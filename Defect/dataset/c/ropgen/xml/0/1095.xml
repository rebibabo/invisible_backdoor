<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1095.c" pos:tabs="8"><function pos:start="1:1" pos:end="7725:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:30">disas_insn</name><parameter_list pos:start="1:31" pos:end="1:62">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:43">DisasContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:56">CPUState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="7725:1">{<block_content pos:start="5:5" pos:end="7723:17">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUX86State</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:35">= <expr pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:26">cpu</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:35">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">b</name></decl>, <decl pos:start="7:12" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:19">prefixes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGMemOp</name></type> <name pos:start="11:14" pos:end="11:15">ot</name></decl>, <decl pos:start="11:18" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:18" pos:end="11:22">aflag</name></decl>, <decl pos:start="11:25" pos:end="11:29"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:25" pos:end="11:29">dflag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">modrm</name></decl>, <decl pos:start="13:16" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:18">reg</name></decl>, <decl pos:start="13:21" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:21" pos:end="13:22">rm</name></decl>, <decl pos:start="13:25" pos:end="13:27"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:25" pos:end="13:27">mod</name></decl>, <decl pos:start="13:30" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:30" pos:end="13:31">op</name></decl>, <decl pos:start="13:34" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:34" pos:end="13:38">opreg</name></decl>, <decl pos:start="13:41" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:41" pos:end="13:43">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:25">next_eip</name></decl>, <decl pos:start="15:28" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:28" pos:end="15:31">tval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">rex_w</name></decl>, <decl pos:start="17:16" pos:end="17:20"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:16" pos:end="17:20">rex_r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:16">target_ulong</name></type> <name pos:start="19:18" pos:end="19:25">pc_start</name> <init pos:start="19:27" pos:end="19:43">= <expr pos:start="19:29" pos:end="19:43"><name pos:start="19:29" pos:end="19:43"><name pos:start="19:29" pos:end="19:29">s</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:35">base</name><operator pos:start="19:36" pos:end="19:36">.</operator><name pos:start="19:37" pos:end="19:43">pc_next</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:15">pc_start</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:23"><name pos:start="23:19" pos:end="23:19">s</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:23">pc</name></name> <operator pos:start="23:25" pos:end="23:25">=</operator> <name pos:start="23:27" pos:end="23:34">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">prefixes</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:15">override</name></name> <operator pos:start="27:17" pos:end="27:17">=</operator> <operator pos:start="27:19" pos:end="27:19">-</operator><literal type="number" pos:start="27:20" pos:end="27:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:15"><expr pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:9">rex_w</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <operator pos:start="29:13" pos:end="29:13">-</operator><literal type="number" pos:start="29:14" pos:end="29:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="34:0"><expr pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:9">rex_r</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="number" pos:start="31:13" pos:end="31:13">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="33:1" pos:end="33:20">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:20">TARGET_X86_64</name></cpp:ifdef>

    <expr_stmt pos:start="35:5" pos:end="35:17"><expr pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:12">rex_x</name></name> <operator pos:start="35:14" pos:end="35:14">=</operator> <literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:17"><expr pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:12">rex_b</name></name> <operator pos:start="37:14" pos:end="37:14">=</operator> <literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:16">x86_64_hregs</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:17">rip_offset</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="43:24" pos:end="43:52">/* for relative ip address */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:17"><expr pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:12">vex_l</name></name> <operator pos:start="45:14" pos:end="45:14">=</operator> <literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:17"><expr pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:12"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:12">vex_v</name></name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:37">(<expr pos:start="49:9" pos:end="49:36"><call pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:17">sigsetjmp</name><argument_list pos:start="49:18" pos:end="49:31">(<argument pos:start="49:19" pos:end="49:27"><expr pos:start="49:19" pos:end="49:27"><name pos:start="49:19" pos:end="49:27"><name pos:start="49:19" pos:end="49:19">s</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:27">jmpbuf</name></name></expr></argument>, <argument pos:start="49:30" pos:end="49:30"><expr pos:start="49:30" pos:end="49:30"><literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr></argument>)</argument_list></call> <operator pos:start="49:33" pos:end="49:34">!=</operator> <literal type="number" pos:start="49:36" pos:end="49:36">0</literal></expr>)</condition> <block pos:start="49:39" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:21">

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><call pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:21">gen_exception</name><argument_list pos:start="51:22" pos:end="51:59">(<argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><name pos:start="51:23" pos:end="51:23">s</name></expr></argument>, <argument pos:start="51:26" pos:end="51:35"><expr pos:start="51:26" pos:end="51:35"><name pos:start="51:26" pos:end="51:35">EXCP0D_GPF</name></expr></argument>, <argument pos:start="51:38" pos:end="51:58"><expr pos:start="51:38" pos:end="51:58"><name pos:start="51:38" pos:end="51:45">pc_start</name> <operator pos:start="51:47" pos:end="51:47">-</operator> <name pos:start="51:49" pos:end="51:58"><name pos:start="51:49" pos:end="51:49">s</name><operator pos:start="51:50" pos:end="51:51">-&gt;</operator><name pos:start="51:52" pos:end="51:58">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:21">return <expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:16">s</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:20">pc</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



 <label pos:start="59:2" pos:end="59:11"><name pos:start="59:2" pos:end="59:10">next_byte</name>:</label>

    <expr_stmt pos:start="61:5" pos:end="61:30"><expr pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:5">b</name> <operator pos:start="61:7" pos:end="61:7">=</operator> <call pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:21">x86_ldub_code</name><argument_list pos:start="61:22" pos:end="61:29">(<argument pos:start="61:23" pos:end="61:25"><expr pos:start="61:23" pos:end="61:25"><name pos:start="61:23" pos:end="61:25">env</name></expr></argument>, <argument pos:start="61:28" pos:end="61:28"><expr pos:start="61:28" pos:end="61:28"><name pos:start="61:28" pos:end="61:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="63:28">/* Collect prefixes.  */</comment>

    <switch pos:start="65:5" pos:end="273:5">switch <condition pos:start="65:12" pos:end="65:14">(<expr pos:start="65:13" pos:end="65:13"><name pos:start="65:13" pos:end="65:13">b</name></expr>)</condition> <block pos:start="65:16" pos:end="273:5">{<block_content pos:start="67:5" pos:end="271:14">

    <case pos:start="67:5" pos:end="67:14">case <expr pos:start="67:10" pos:end="67:13"><literal type="number" pos:start="67:10" pos:end="67:13">0xf3</literal></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:32"><expr pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:16">prefixes</name> <operator pos:start="69:18" pos:end="69:19">|=</operator> <name pos:start="69:21" pos:end="69:31">PREFIX_REPZ</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:23">goto <name pos:start="71:14" pos:end="71:22">next_byte</name>;</goto>

    <case pos:start="73:5" pos:end="73:14">case <expr pos:start="73:10" pos:end="73:13"><literal type="number" pos:start="73:10" pos:end="73:13">0xf2</literal></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:33"><expr pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:16">prefixes</name> <operator pos:start="75:18" pos:end="75:19">|=</operator> <name pos:start="75:21" pos:end="75:32">PREFIX_REPNZ</name></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:23">goto <name pos:start="77:14" pos:end="77:22">next_byte</name>;</goto>

    <case pos:start="79:5" pos:end="79:14">case <expr pos:start="79:10" pos:end="79:13"><literal type="number" pos:start="79:10" pos:end="79:13">0xf0</literal></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:32"><expr pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:16">prefixes</name> <operator pos:start="81:18" pos:end="81:19">|=</operator> <name pos:start="81:21" pos:end="81:31">PREFIX_LOCK</name></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:23">goto <name pos:start="83:14" pos:end="83:22">next_byte</name>;</goto>

    <case pos:start="85:5" pos:end="85:14">case <expr pos:start="85:10" pos:end="85:13"><literal type="number" pos:start="85:10" pos:end="85:13">0x2e</literal></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:27"><expr pos:start="87:9" pos:end="87:26"><name pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:19">override</name></name> <operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:26">R_CS</name></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:23">goto <name pos:start="89:14" pos:end="89:22">next_byte</name>;</goto>

    <case pos:start="91:5" pos:end="91:14">case <expr pos:start="91:10" pos:end="91:13"><literal type="number" pos:start="91:10" pos:end="91:13">0x36</literal></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:19">override</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:26">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:23">goto <name pos:start="95:14" pos:end="95:22">next_byte</name>;</goto>

    <case pos:start="97:5" pos:end="97:14">case <expr pos:start="97:10" pos:end="97:13"><literal type="number" pos:start="97:10" pos:end="97:13">0x3e</literal></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:27"><expr pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:19">override</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:26">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:23">goto <name pos:start="101:14" pos:end="101:22">next_byte</name>;</goto>

    <case pos:start="103:5" pos:end="103:14">case <expr pos:start="103:10" pos:end="103:13"><literal type="number" pos:start="103:10" pos:end="103:13">0x26</literal></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:27"><expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:19">override</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:26">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:23">goto <name pos:start="107:14" pos:end="107:22">next_byte</name>;</goto>

    <case pos:start="109:5" pos:end="109:14">case <expr pos:start="109:10" pos:end="109:13"><literal type="number" pos:start="109:10" pos:end="109:13">0x64</literal></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:27"><expr pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:19">override</name></name> <operator pos:start="111:21" pos:end="111:21">=</operator> <name pos:start="111:23" pos:end="111:26">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:23">goto <name pos:start="113:14" pos:end="113:22">next_byte</name>;</goto>

    <case pos:start="115:5" pos:end="115:14">case <expr pos:start="115:10" pos:end="115:13"><literal type="number" pos:start="115:10" pos:end="115:13">0x65</literal></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:27"><expr pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:19">override</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:26">R_GS</name></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:23">goto <name pos:start="119:14" pos:end="119:22">next_byte</name>;</goto>

    <case pos:start="121:5" pos:end="121:14">case <expr pos:start="121:10" pos:end="121:13"><literal type="number" pos:start="121:10" pos:end="121:13">0x66</literal></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:32"><expr pos:start="123:9" pos:end="123:31"><name pos:start="123:9" pos:end="123:16">prefixes</name> <operator pos:start="123:18" pos:end="123:19">|=</operator> <name pos:start="123:21" pos:end="123:31">PREFIX_DATA</name></expr>;</expr_stmt>

        <goto pos:start="125:9" pos:end="125:23">goto <name pos:start="125:14" pos:end="125:22">next_byte</name>;</goto>

    <case pos:start="127:5" pos:end="127:14">case <expr pos:start="127:10" pos:end="127:13"><literal type="number" pos:start="127:10" pos:end="127:13">0x67</literal></expr>:</case>

        <expr_stmt pos:start="129:9" pos:end="129:31"><expr pos:start="129:9" pos:end="129:30"><name pos:start="129:9" pos:end="129:16">prefixes</name> <operator pos:start="129:18" pos:end="129:19">|=</operator> <name pos:start="129:21" pos:end="129:30">PREFIX_ADR</name></expr>;</expr_stmt>

        <goto pos:start="131:9" pos:end="134:0">goto <name pos:start="131:14" pos:end="131:22">next_byte</name>;</goto>

<cpp:ifdef pos:start="133:1" pos:end="133:20">#<cpp:directive pos:start="133:2" pos:end="133:6">ifdef</cpp:directive> <name pos:start="133:8" pos:end="133:20">TARGET_X86_64</name></cpp:ifdef>

    <case pos:start="135:5" pos:end="135:23">case <expr pos:start="135:10" pos:end="135:22"><literal type="number" pos:start="135:10" pos:end="135:13">0x40</literal> <operator pos:start="135:15" pos:end="135:17">...</operator> <literal type="number" pos:start="135:19" pos:end="135:22">0x4f</literal></expr>:</case>

        <if_stmt pos:start="137:9" pos:end="153:9"><if pos:start="137:9" pos:end="153:9">if <condition pos:start="137:12" pos:end="137:22">(<expr pos:start="137:13" pos:end="137:21"><call pos:start="137:13" pos:end="137:21"><name pos:start="137:13" pos:end="137:18">CODE64</name><argument_list pos:start="137:19" pos:end="137:21">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:24" pos:end="153:9">{<block_content pos:start="141:13" pos:end="151:27">

            <comment type="block" pos:start="139:13" pos:end="139:28">/* REX prefix */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:33"><expr pos:start="141:13" pos:end="141:32"><name pos:start="141:13" pos:end="141:17">rex_w</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <operator pos:start="141:21" pos:end="141:21">(</operator><name pos:start="141:22" pos:end="141:22">b</name> <operator pos:start="141:24" pos:end="141:25">&gt;&gt;</operator> <literal type="number" pos:start="141:27" pos:end="141:27">3</literal><operator pos:start="141:28" pos:end="141:28">)</operator> <operator pos:start="141:30" pos:end="141:30">&amp;</operator> <literal type="number" pos:start="141:32" pos:end="141:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:35"><expr pos:start="143:13" pos:end="143:34"><name pos:start="143:13" pos:end="143:17">rex_r</name> <operator pos:start="143:19" pos:end="143:19">=</operator> <operator pos:start="143:21" pos:end="143:21">(</operator><name pos:start="143:22" pos:end="143:22">b</name> <operator pos:start="143:24" pos:end="143:24">&amp;</operator> <literal type="number" pos:start="143:26" pos:end="143:28">0x4</literal><operator pos:start="143:29" pos:end="143:29">)</operator> <operator pos:start="143:31" pos:end="143:32">&lt;&lt;</operator> <literal type="number" pos:start="143:34" pos:end="143:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:38"><expr pos:start="145:13" pos:end="145:37"><name pos:start="145:13" pos:end="145:20"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:20">rex_x</name></name> <operator pos:start="145:22" pos:end="145:22">=</operator> <operator pos:start="145:24" pos:end="145:24">(</operator><name pos:start="145:25" pos:end="145:25">b</name> <operator pos:start="145:27" pos:end="145:27">&amp;</operator> <literal type="number" pos:start="145:29" pos:end="145:31">0x2</literal><operator pos:start="145:32" pos:end="145:32">)</operator> <operator pos:start="145:34" pos:end="145:35">&lt;&lt;</operator> <literal type="number" pos:start="145:37" pos:end="145:37">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:38"><expr pos:start="147:13" pos:end="147:37"><call pos:start="147:13" pos:end="147:20"><name pos:start="147:13" pos:end="147:17">REX_B</name><argument_list pos:start="147:18" pos:end="147:20">(<argument pos:start="147:19" pos:end="147:19"><expr pos:start="147:19" pos:end="147:19"><name pos:start="147:19" pos:end="147:19">s</name></expr></argument>)</argument_list></call> <operator pos:start="147:22" pos:end="147:22">=</operator> <operator pos:start="147:24" pos:end="147:24">(</operator><name pos:start="147:25" pos:end="147:25">b</name> <operator pos:start="147:27" pos:end="147:27">&amp;</operator> <literal type="number" pos:start="147:29" pos:end="147:31">0x1</literal><operator pos:start="147:32" pos:end="147:32">)</operator> <operator pos:start="147:34" pos:end="147:35">&lt;&lt;</operator> <literal type="number" pos:start="147:37" pos:end="147:37">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:29"><expr pos:start="149:13" pos:end="149:28"><name pos:start="149:13" pos:end="149:24">x86_64_hregs</name> <operator pos:start="149:26" pos:end="149:26">=</operator> <literal type="number" pos:start="149:28" pos:end="149:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="149:31" pos:end="149:75">/* select uniform byte register addressing */</comment>

            <goto pos:start="151:13" pos:end="151:27">goto <name pos:start="151:18" pos:end="151:26">next_byte</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="155:9" pos:end="158:0">break;</break>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>

    <case pos:start="159:5" pos:end="159:14">case <expr pos:start="159:10" pos:end="159:13"><literal type="number" pos:start="159:10" pos:end="159:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="159:16" pos:end="159:31">/* 2-byte VEX */</comment>

    <case pos:start="161:5" pos:end="161:14">case <expr pos:start="161:10" pos:end="161:13"><literal type="number" pos:start="161:10" pos:end="161:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="161:16" pos:end="161:31">/* 3-byte VEX */</comment>

        <comment type="block" pos:start="163:9" pos:end="165:55">/* VEX prefixes cannot be used except in 32-bit mode.

           Otherwise the instruction is LES or LDS.  */</comment>

        <if_stmt pos:start="167:9" pos:end="269:9"><if pos:start="167:9" pos:end="269:9">if <condition pos:start="167:12" pos:end="167:34">(<expr pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:21"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:21">code32</name></name> <operator pos:start="167:23" pos:end="167:24">&amp;&amp;</operator> <operator pos:start="167:26" pos:end="167:26">!</operator><name pos:start="167:27" pos:end="167:33"><name pos:start="167:27" pos:end="167:27">s</name><operator pos:start="167:28" pos:end="167:29">-&gt;</operator><name pos:start="167:30" pos:end="167:33">vm86</name></name></expr>)</condition> <block pos:start="167:36" pos:end="269:9">{<block_content pos:start="169:13" pos:end="267:57">

            <decl_stmt pos:start="169:13" pos:end="173:14"><decl pos:start="169:13" pos:end="173:13"><type pos:start="169:13" pos:end="169:28"><specifier pos:start="169:13" pos:end="169:18">static</specifier> <specifier pos:start="169:20" pos:end="169:24">const</specifier> <name pos:start="169:26" pos:end="169:28">int</name></type> <name pos:start="169:30" pos:end="169:41"><name pos:start="169:30" pos:end="169:38">pp_prefix</name><index pos:start="169:39" pos:end="169:41">[<expr pos:start="169:40" pos:end="169:40"><literal type="number" pos:start="169:40" pos:end="169:40">4</literal></expr>]</index></name> <init pos:start="169:43" pos:end="173:13">= <expr pos:start="169:45" pos:end="173:13"><block pos:start="169:45" pos:end="173:13">{

                <expr pos:start="171:17" pos:end="171:17"><literal type="number" pos:start="171:17" pos:end="171:17">0</literal></expr>, <expr pos:start="171:20" pos:end="171:30"><name pos:start="171:20" pos:end="171:30">PREFIX_DATA</name></expr>, <expr pos:start="171:33" pos:end="171:43"><name pos:start="171:33" pos:end="171:43">PREFIX_REPZ</name></expr>, <expr pos:start="171:46" pos:end="171:57"><name pos:start="171:46" pos:end="171:57">PREFIX_REPNZ</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="175:13" pos:end="175:51"><decl pos:start="175:13" pos:end="175:20"><type pos:start="175:13" pos:end="175:15"><name pos:start="175:13" pos:end="175:15">int</name></type> <name pos:start="175:17" pos:end="175:20">vex3</name></decl>, <decl pos:start="175:23" pos:end="175:50"><type ref="prev" pos:start="175:13" pos:end="175:15"/><name pos:start="175:23" pos:end="175:26">vex2</name> <init pos:start="175:28" pos:end="175:50">= <expr pos:start="175:30" pos:end="175:50"><call pos:start="175:30" pos:end="175:50"><name pos:start="175:30" pos:end="175:42">x86_ldub_code</name><argument_list pos:start="175:43" pos:end="175:50">(<argument pos:start="175:44" pos:end="175:46"><expr pos:start="175:44" pos:end="175:46"><name pos:start="175:44" pos:end="175:46">env</name></expr></argument>, <argument pos:start="175:49" pos:end="175:49"><expr pos:start="175:49" pos:end="175:49"><name pos:start="175:49" pos:end="175:49">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="179:13" pos:end="187:13"><if pos:start="179:13" pos:end="187:13">if <condition pos:start="179:16" pos:end="179:52">(<expr pos:start="179:17" pos:end="179:51"><operator pos:start="179:17" pos:end="179:17">!</operator><call pos:start="179:18" pos:end="179:26"><name pos:start="179:18" pos:end="179:23">CODE64</name><argument_list pos:start="179:24" pos:end="179:26">(<argument pos:start="179:25" pos:end="179:25"><expr pos:start="179:25" pos:end="179:25"><name pos:start="179:25" pos:end="179:25">s</name></expr></argument>)</argument_list></call> <operator pos:start="179:28" pos:end="179:29">&amp;&amp;</operator> <operator pos:start="179:31" pos:end="179:31">(</operator><name pos:start="179:32" pos:end="179:35">vex2</name> <operator pos:start="179:37" pos:end="179:37">&amp;</operator> <literal type="number" pos:start="179:39" pos:end="179:42">0xc0</literal><operator pos:start="179:43" pos:end="179:43">)</operator> <operator pos:start="179:45" pos:end="179:46">!=</operator> <literal type="number" pos:start="179:48" pos:end="179:51">0xc0</literal></expr>)</condition> <block pos:start="179:54" pos:end="187:13">{<block_content pos:start="185:17" pos:end="185:22">

                <comment type="block" pos:start="181:17" pos:end="183:63">/* 4.1.4.6: In 32-bit mode, bits [7:6] must be 11b,

                   otherwise the instruction is LES or LDS.  */</comment>

                <break pos:start="185:17" pos:end="185:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:20"><expr pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:17"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:17">pc</name></name><operator pos:start="189:18" pos:end="189:19">++</operator></expr>;</expr_stmt>



            <comment type="block" pos:start="193:13" pos:end="193:78">/* 4.1.1-4.1.3: No preceding lock, 66, f2, f3, or rex prefixes. */</comment>

            <if_stmt pos:start="195:13" pos:end="204:0"><if pos:start="195:13" pos:end="204:0">if <condition pos:start="195:16" pos:end="197:57">(<expr pos:start="195:17" pos:end="197:56"><name pos:start="195:17" pos:end="195:24">prefixes</name> <operator pos:start="195:26" pos:end="195:26">&amp;</operator> <operator pos:start="195:28" pos:end="195:28">(</operator><name pos:start="195:29" pos:end="195:39">PREFIX_REPZ</name> <operator pos:start="195:41" pos:end="195:41">|</operator> <name pos:start="195:43" pos:end="195:54">PREFIX_REPNZ</name>

                            <operator pos:start="197:29" pos:end="197:29">|</operator> <name pos:start="197:31" pos:end="197:41">PREFIX_LOCK</name> <operator pos:start="197:43" pos:end="197:43">|</operator> <name pos:start="197:45" pos:end="197:55">PREFIX_DATA</name><operator pos:start="197:56" pos:end="197:56">)</operator></expr>)</condition> <block pos:start="197:59" pos:end="204:0">{<block_content pos:start="199:17" pos:end="199:32">

                <goto pos:start="199:17" pos:end="199:32">goto <name pos:start="199:22" pos:end="199:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="203:1" pos:end="203:20">#<cpp:directive pos:start="203:2" pos:end="203:6">ifdef</cpp:directive> <name pos:start="203:8" pos:end="203:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="205:13" pos:end="212:0"><if pos:start="205:13" pos:end="212:0">if <condition pos:start="205:16" pos:end="205:29">(<expr pos:start="205:17" pos:end="205:28"><name pos:start="205:17" pos:end="205:28">x86_64_hregs</name></expr>)</condition> <block pos:start="205:31" pos:end="212:0">{<block_content pos:start="207:17" pos:end="207:32">

                <goto pos:start="207:17" pos:end="207:32">goto <name pos:start="207:22" pos:end="207:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="211:1" pos:end="211:6">#<cpp:directive pos:start="211:2" pos:end="211:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="213:13" pos:end="213:37"><expr pos:start="213:13" pos:end="213:36"><name pos:start="213:13" pos:end="213:17">rex_r</name> <operator pos:start="213:19" pos:end="213:19">=</operator> <operator pos:start="213:21" pos:end="213:21">(</operator><operator pos:start="213:22" pos:end="213:22">~</operator><name pos:start="213:23" pos:end="213:26">vex2</name> <operator pos:start="213:28" pos:end="213:29">&gt;&gt;</operator> <literal type="number" pos:start="213:31" pos:end="213:31">4</literal><operator pos:start="213:32" pos:end="213:32">)</operator> <operator pos:start="213:34" pos:end="213:34">&amp;</operator> <literal type="number" pos:start="213:36" pos:end="213:36">8</literal></expr>;</expr_stmt>

            <if_stmt pos:start="215:13" pos:end="261:13"><if pos:start="215:13" pos:end="221:13">if <condition pos:start="215:16" pos:end="215:26">(<expr pos:start="215:17" pos:end="215:25"><name pos:start="215:17" pos:end="215:17">b</name> <operator pos:start="215:19" pos:end="215:20">==</operator> <literal type="number" pos:start="215:22" pos:end="215:25">0xc5</literal></expr>)</condition> <block pos:start="215:28" pos:end="221:13">{<block_content pos:start="217:17" pos:end="219:42">

                <expr_stmt pos:start="217:17" pos:end="217:28"><expr pos:start="217:17" pos:end="217:27"><name pos:start="217:17" pos:end="217:20">vex3</name> <operator pos:start="217:22" pos:end="217:22">=</operator> <name pos:start="217:24" pos:end="217:27">vex2</name></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:42"><expr pos:start="219:17" pos:end="219:41"><name pos:start="219:17" pos:end="219:17">b</name> <operator pos:start="219:19" pos:end="219:19">=</operator> <call pos:start="219:21" pos:end="219:41"><name pos:start="219:21" pos:end="219:33">x86_ldub_code</name><argument_list pos:start="219:34" pos:end="219:41">(<argument pos:start="219:35" pos:end="219:37"><expr pos:start="219:35" pos:end="219:37"><name pos:start="219:35" pos:end="219:37">env</name></expr></argument>, <argument pos:start="219:40" pos:end="219:40"><expr pos:start="219:40" pos:end="219:40"><name pos:start="219:40" pos:end="219:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="221:15" pos:end="261:13">else <block pos:start="221:20" pos:end="261:13">{<block_content pos:start="225:17" pos:end="259:17">

<cpp:ifdef pos:start="223:1" pos:end="223:20">#<cpp:directive pos:start="223:2" pos:end="223:6">ifdef</cpp:directive> <name pos:start="223:8" pos:end="223:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="225:17" pos:end="225:44"><expr pos:start="225:17" pos:end="225:43"><name pos:start="225:17" pos:end="225:24"><name pos:start="225:17" pos:end="225:17">s</name><operator pos:start="225:18" pos:end="225:19">-&gt;</operator><name pos:start="225:20" pos:end="225:24">rex_x</name></name> <operator pos:start="225:26" pos:end="225:26">=</operator> <operator pos:start="225:28" pos:end="225:28">(</operator><operator pos:start="225:29" pos:end="225:29">~</operator><name pos:start="225:30" pos:end="225:33">vex2</name> <operator pos:start="225:35" pos:end="225:36">&gt;&gt;</operator> <literal type="number" pos:start="225:38" pos:end="225:38">3</literal><operator pos:start="225:39" pos:end="225:39">)</operator> <operator pos:start="225:41" pos:end="225:41">&amp;</operator> <literal type="number" pos:start="225:43" pos:end="225:43">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="230:0"><expr pos:start="227:17" pos:end="227:43"><name pos:start="227:17" pos:end="227:24"><name pos:start="227:17" pos:end="227:17">s</name><operator pos:start="227:18" pos:end="227:19">-&gt;</operator><name pos:start="227:20" pos:end="227:24">rex_b</name></name> <operator pos:start="227:26" pos:end="227:26">=</operator> <operator pos:start="227:28" pos:end="227:28">(</operator><operator pos:start="227:29" pos:end="227:29">~</operator><name pos:start="227:30" pos:end="227:33">vex2</name> <operator pos:start="227:35" pos:end="227:36">&gt;&gt;</operator> <literal type="number" pos:start="227:38" pos:end="227:38">2</literal><operator pos:start="227:39" pos:end="227:39">)</operator> <operator pos:start="227:41" pos:end="227:41">&amp;</operator> <literal type="number" pos:start="227:43" pos:end="227:43">8</literal></expr>;</expr_stmt>

<cpp:endif pos:start="229:1" pos:end="229:6">#<cpp:directive pos:start="229:2" pos:end="229:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="231:17" pos:end="231:45"><expr pos:start="231:17" pos:end="231:44"><name pos:start="231:17" pos:end="231:20">vex3</name> <operator pos:start="231:22" pos:end="231:22">=</operator> <call pos:start="231:24" pos:end="231:44"><name pos:start="231:24" pos:end="231:36">x86_ldub_code</name><argument_list pos:start="231:37" pos:end="231:44">(<argument pos:start="231:38" pos:end="231:40"><expr pos:start="231:38" pos:end="231:40"><name pos:start="231:38" pos:end="231:40">env</name></expr></argument>, <argument pos:start="231:43" pos:end="231:43"><expr pos:start="231:43" pos:end="231:43"><name pos:start="231:43" pos:end="231:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:40"><expr pos:start="233:17" pos:end="233:39"><name pos:start="233:17" pos:end="233:21">rex_w</name> <operator pos:start="233:23" pos:end="233:23">=</operator> <operator pos:start="233:25" pos:end="233:25">(</operator><name pos:start="233:26" pos:end="233:29">vex3</name> <operator pos:start="233:31" pos:end="233:32">&gt;&gt;</operator> <literal type="number" pos:start="233:34" pos:end="233:34">7</literal><operator pos:start="233:35" pos:end="233:35">)</operator> <operator pos:start="233:37" pos:end="233:37">&amp;</operator> <literal type="number" pos:start="233:39" pos:end="233:39">1</literal></expr>;</expr_stmt>

                <switch pos:start="235:17" pos:end="259:17">switch <condition pos:start="235:24" pos:end="235:36">(<expr pos:start="235:25" pos:end="235:35"><name pos:start="235:25" pos:end="235:28">vex2</name> <operator pos:start="235:30" pos:end="235:30">&amp;</operator> <literal type="number" pos:start="235:32" pos:end="235:35">0x1f</literal></expr>)</condition> <block pos:start="235:38" pos:end="259:17">{<block_content pos:start="237:17" pos:end="257:36">

                <case pos:start="237:17" pos:end="237:26">case <expr pos:start="237:22" pos:end="237:25"><literal type="number" pos:start="237:22" pos:end="237:25">0x01</literal></expr>:</case> <comment type="block" pos:start="237:28" pos:end="237:66">/* Implied 0f leading opcode bytes.  */</comment>

                    <expr_stmt pos:start="239:21" pos:end="239:54"><expr pos:start="239:21" pos:end="239:53"><name pos:start="239:21" pos:end="239:21">b</name> <operator pos:start="239:23" pos:end="239:23">=</operator> <call pos:start="239:25" pos:end="239:45"><name pos:start="239:25" pos:end="239:37">x86_ldub_code</name><argument_list pos:start="239:38" pos:end="239:45">(<argument pos:start="239:39" pos:end="239:41"><expr pos:start="239:39" pos:end="239:41"><name pos:start="239:39" pos:end="239:41">env</name></expr></argument>, <argument pos:start="239:44" pos:end="239:44"><expr pos:start="239:44" pos:end="239:44"><name pos:start="239:44" pos:end="239:44">s</name></expr></argument>)</argument_list></call> <operator pos:start="239:47" pos:end="239:47">|</operator> <literal type="number" pos:start="239:49" pos:end="239:53">0x100</literal></expr>;</expr_stmt>

                    <break pos:start="241:21" pos:end="241:26">break;</break>

                <case pos:start="243:17" pos:end="243:26">case <expr pos:start="243:22" pos:end="243:25"><literal type="number" pos:start="243:22" pos:end="243:25">0x02</literal></expr>:</case> <comment type="block" pos:start="243:28" pos:end="243:69">/* Implied 0f 38 leading opcode bytes.  */</comment>

                    <expr_stmt pos:start="245:21" pos:end="245:30"><expr pos:start="245:21" pos:end="245:29"><name pos:start="245:21" pos:end="245:21">b</name> <operator pos:start="245:23" pos:end="245:23">=</operator> <literal type="number" pos:start="245:25" pos:end="245:29">0x138</literal></expr>;</expr_stmt>

                    <break pos:start="247:21" pos:end="247:26">break;</break>

                <case pos:start="249:17" pos:end="249:26">case <expr pos:start="249:22" pos:end="249:25"><literal type="number" pos:start="249:22" pos:end="249:25">0x03</literal></expr>:</case> <comment type="block" pos:start="249:28" pos:end="249:69">/* Implied 0f 3a leading opcode bytes.  */</comment>

                    <expr_stmt pos:start="251:21" pos:end="251:30"><expr pos:start="251:21" pos:end="251:29"><name pos:start="251:21" pos:end="251:21">b</name> <operator pos:start="251:23" pos:end="251:23">=</operator> <literal type="number" pos:start="251:25" pos:end="251:29">0x13a</literal></expr>;</expr_stmt>

                    <break pos:start="253:21" pos:end="253:26">break;</break>

                <default pos:start="255:17" pos:end="255:24">default:</default>   <comment type="block" pos:start="255:28" pos:end="255:58">/* Reserved for future use.  */</comment>

                    <goto pos:start="257:21" pos:end="257:36">goto <name pos:start="257:26" pos:end="257:35">unknown_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:42"><expr pos:start="263:13" pos:end="263:41"><name pos:start="263:13" pos:end="263:20"><name pos:start="263:13" pos:end="263:13">s</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:20">vex_v</name></name> <operator pos:start="263:22" pos:end="263:22">=</operator> <operator pos:start="263:24" pos:end="263:24">(</operator><operator pos:start="263:25" pos:end="263:25">~</operator><name pos:start="263:26" pos:end="263:29">vex3</name> <operator pos:start="263:31" pos:end="263:32">&gt;&gt;</operator> <literal type="number" pos:start="263:34" pos:end="263:34">3</literal><operator pos:start="263:35" pos:end="263:35">)</operator> <operator pos:start="263:37" pos:end="263:37">&amp;</operator> <literal type="number" pos:start="263:39" pos:end="263:41">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:39"><expr pos:start="265:13" pos:end="265:38"><name pos:start="265:13" pos:end="265:20"><name pos:start="265:13" pos:end="265:13">s</name><operator pos:start="265:14" pos:end="265:15">-&gt;</operator><name pos:start="265:16" pos:end="265:20">vex_l</name></name> <operator pos:start="265:22" pos:end="265:22">=</operator> <operator pos:start="265:24" pos:end="265:24">(</operator><name pos:start="265:25" pos:end="265:28">vex3</name> <operator pos:start="265:30" pos:end="265:31">&gt;&gt;</operator> <literal type="number" pos:start="265:33" pos:end="265:33">2</literal><operator pos:start="265:34" pos:end="265:34">)</operator> <operator pos:start="265:36" pos:end="265:36">&amp;</operator> <literal type="number" pos:start="265:38" pos:end="265:38">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:57"><expr pos:start="267:13" pos:end="267:56"><name pos:start="267:13" pos:end="267:20">prefixes</name> <operator pos:start="267:22" pos:end="267:23">|=</operator> <name pos:start="267:25" pos:end="267:43"><name pos:start="267:25" pos:end="267:33">pp_prefix</name><index pos:start="267:34" pos:end="267:43">[<expr pos:start="267:35" pos:end="267:42"><name pos:start="267:35" pos:end="267:38">vex3</name> <operator pos:start="267:40" pos:end="267:40">&amp;</operator> <literal type="number" pos:start="267:42" pos:end="267:42">3</literal></expr>]</index></name> <operator pos:start="267:45" pos:end="267:45">|</operator> <name pos:start="267:47" pos:end="267:56">PREFIX_VEX</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="271:9" pos:end="271:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="277:5" pos:end="277:33">/* Post-process prefixes.  */</comment>

    <if_stmt pos:start="279:5" pos:end="319:5"><if pos:start="279:5" pos:end="293:5">if <condition pos:start="279:8" pos:end="279:18">(<expr pos:start="279:9" pos:end="279:17"><call pos:start="279:9" pos:end="279:17"><name pos:start="279:9" pos:end="279:14">CODE64</name><argument_list pos:start="279:15" pos:end="279:17">(<argument pos:start="279:16" pos:end="279:16"><expr pos:start="279:16" pos:end="279:16"><name pos:start="279:16" pos:end="279:16">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="279:20" pos:end="293:5">{<block_content pos:start="287:9" pos:end="291:56">

        <comment type="block" pos:start="281:9" pos:end="285:45">/* In 64-bit mode, the default data size is 32-bit.  Select 64-bit

           data with rex_w, and 16-bit data with 0x66; rex_w takes precedence

           over 0x66 if both are present.  */</comment>

        <expr_stmt pos:start="287:9" pos:end="287:77"><expr pos:start="287:9" pos:end="287:76"><name pos:start="287:9" pos:end="287:13">dflag</name> <operator pos:start="287:15" pos:end="287:15">=</operator> <operator pos:start="287:17" pos:end="287:17">(</operator><ternary pos:start="287:18" pos:end="287:75"><condition pos:start="287:18" pos:end="287:28"><expr pos:start="287:18" pos:end="287:26"><name pos:start="287:18" pos:end="287:22">rex_w</name> <operator pos:start="287:24" pos:end="287:24">&gt;</operator> <literal type="number" pos:start="287:26" pos:end="287:26">0</literal></expr> ?</condition><then pos:start="287:30" pos:end="287:34"> <expr pos:start="287:30" pos:end="287:34"><name pos:start="287:30" pos:end="287:34">MO_64</name></expr> </then><else pos:start="287:36" pos:end="287:75">: <expr pos:start="287:38" pos:end="287:75"><ternary pos:start="287:38" pos:end="287:75"><condition pos:start="287:38" pos:end="287:61"><expr pos:start="287:38" pos:end="287:59"><name pos:start="287:38" pos:end="287:45">prefixes</name> <operator pos:start="287:47" pos:end="287:47">&amp;</operator> <name pos:start="287:49" pos:end="287:59">PREFIX_DATA</name></expr> ?</condition><then pos:start="287:63" pos:end="287:67"> <expr pos:start="287:63" pos:end="287:67"><name pos:start="287:63" pos:end="287:67">MO_16</name></expr> </then><else pos:start="287:69" pos:end="287:75">: <expr pos:start="287:71" pos:end="287:75"><name pos:start="287:71" pos:end="287:75">MO_32</name></expr></else></ternary></expr></else></ternary><operator pos:start="287:76" pos:end="287:76">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="289:9" pos:end="289:62">/* In 64-bit mode, 0x67 selects 32-bit addressing.  */</comment>

        <expr_stmt pos:start="291:9" pos:end="291:56"><expr pos:start="291:9" pos:end="291:55"><name pos:start="291:9" pos:end="291:13">aflag</name> <operator pos:start="291:15" pos:end="291:15">=</operator> <operator pos:start="291:17" pos:end="291:17">(</operator><ternary pos:start="291:18" pos:end="291:54"><condition pos:start="291:18" pos:end="291:40"><expr pos:start="291:18" pos:end="291:38"><name pos:start="291:18" pos:end="291:25">prefixes</name> <operator pos:start="291:27" pos:end="291:27">&amp;</operator> <name pos:start="291:29" pos:end="291:38">PREFIX_ADR</name></expr> ?</condition><then pos:start="291:42" pos:end="291:46"> <expr pos:start="291:42" pos:end="291:46"><name pos:start="291:42" pos:end="291:46">MO_32</name></expr> </then><else pos:start="291:48" pos:end="291:54">: <expr pos:start="291:50" pos:end="291:54"><name pos:start="291:50" pos:end="291:54">MO_64</name></expr></else></ternary><operator pos:start="291:55" pos:end="291:55">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="293:7" pos:end="319:5">else <block pos:start="293:12" pos:end="319:5">{<block_content pos:start="297:9" pos:end="317:9">

        <comment type="block" pos:start="295:9" pos:end="295:70">/* In 16/32-bit mode, 0x66 selects the opposite data size.  */</comment>

        <if_stmt pos:start="297:9" pos:end="305:9"><if pos:start="297:9" pos:end="301:9">if <condition pos:start="297:12" pos:end="297:56">(<expr pos:start="297:13" pos:end="297:55"><name pos:start="297:13" pos:end="297:21"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:21">code32</name></name> <operator pos:start="297:23" pos:end="297:23">^</operator> <operator pos:start="297:25" pos:end="297:25">(</operator><operator pos:start="297:26" pos:end="297:26">(</operator><name pos:start="297:27" pos:end="297:34">prefixes</name> <operator pos:start="297:36" pos:end="297:36">&amp;</operator> <name pos:start="297:38" pos:end="297:48">PREFIX_DATA</name><operator pos:start="297:49" pos:end="297:49">)</operator> <operator pos:start="297:51" pos:end="297:52">!=</operator> <literal type="number" pos:start="297:54" pos:end="297:54">0</literal><operator pos:start="297:55" pos:end="297:55">)</operator></expr>)</condition> <block pos:start="297:58" pos:end="301:9">{<block_content pos:start="299:13" pos:end="299:26">

            <expr_stmt pos:start="299:13" pos:end="299:26"><expr pos:start="299:13" pos:end="299:25"><name pos:start="299:13" pos:end="299:17">dflag</name> <operator pos:start="299:19" pos:end="299:19">=</operator> <name pos:start="299:21" pos:end="299:25">MO_32</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="301:11" pos:end="305:9">else <block pos:start="301:16" pos:end="305:9">{<block_content pos:start="303:13" pos:end="303:26">

            <expr_stmt pos:start="303:13" pos:end="303:26"><expr pos:start="303:13" pos:end="303:25"><name pos:start="303:13" pos:end="303:17">dflag</name> <operator pos:start="303:19" pos:end="303:19">=</operator> <name pos:start="303:21" pos:end="303:25">MO_16</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="307:9" pos:end="307:71">/* In 16/32-bit mode, 0x67 selects the opposite addressing.  */</comment>

        <if_stmt pos:start="309:9" pos:end="317:9"><if pos:start="309:9" pos:end="313:9">if <condition pos:start="309:12" pos:end="309:55">(<expr pos:start="309:13" pos:end="309:54"><name pos:start="309:13" pos:end="309:21"><name pos:start="309:13" pos:end="309:13">s</name><operator pos:start="309:14" pos:end="309:15">-&gt;</operator><name pos:start="309:16" pos:end="309:21">code32</name></name> <operator pos:start="309:23" pos:end="309:23">^</operator> <operator pos:start="309:25" pos:end="309:25">(</operator><operator pos:start="309:26" pos:end="309:26">(</operator><name pos:start="309:27" pos:end="309:34">prefixes</name> <operator pos:start="309:36" pos:end="309:36">&amp;</operator> <name pos:start="309:38" pos:end="309:47">PREFIX_ADR</name><operator pos:start="309:48" pos:end="309:48">)</operator> <operator pos:start="309:50" pos:end="309:51">!=</operator> <literal type="number" pos:start="309:53" pos:end="309:53">0</literal><operator pos:start="309:54" pos:end="309:54">)</operator></expr>)</condition> <block pos:start="309:57" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:26">

            <expr_stmt pos:start="311:13" pos:end="311:26"><expr pos:start="311:13" pos:end="311:25"><name pos:start="311:13" pos:end="311:17">aflag</name> <operator pos:start="311:19" pos:end="311:19">=</operator> <name pos:start="311:21" pos:end="311:25">MO_32</name></expr>;</expr_stmt>

        </block_content>}</block></if>  <else pos:start="313:12" pos:end="317:9">else <block pos:start="313:17" pos:end="317:9">{<block_content pos:start="315:13" pos:end="315:26">

            <expr_stmt pos:start="315:13" pos:end="315:26"><expr pos:start="315:13" pos:end="315:25"><name pos:start="315:13" pos:end="315:17">aflag</name> <operator pos:start="315:19" pos:end="315:19">=</operator> <name pos:start="315:21" pos:end="315:25">MO_16</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="323:5" pos:end="323:25"><expr pos:start="323:5" pos:end="323:24"><name pos:start="323:5" pos:end="323:13"><name pos:start="323:5" pos:end="323:5">s</name><operator pos:start="323:6" pos:end="323:7">-&gt;</operator><name pos:start="323:8" pos:end="323:13">prefix</name></name> <operator pos:start="323:15" pos:end="323:15">=</operator> <name pos:start="323:17" pos:end="323:24">prefixes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:21"><expr pos:start="325:5" pos:end="325:20"><name pos:start="325:5" pos:end="325:12"><name pos:start="325:5" pos:end="325:5">s</name><operator pos:start="325:6" pos:end="325:7">-&gt;</operator><name pos:start="325:8" pos:end="325:12">aflag</name></name> <operator pos:start="325:14" pos:end="325:14">=</operator> <name pos:start="325:16" pos:end="325:20">aflag</name></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:21"><expr pos:start="327:5" pos:end="327:20"><name pos:start="327:5" pos:end="327:12"><name pos:start="327:5" pos:end="327:5">s</name><operator pos:start="327:6" pos:end="327:7">-&gt;</operator><name pos:start="327:8" pos:end="327:12">dflag</name></name> <operator pos:start="327:14" pos:end="327:14">=</operator> <name pos:start="327:16" pos:end="327:20">dflag</name></expr>;</expr_stmt>



    <comment type="block" pos:start="331:5" pos:end="331:27">/* now check op code */</comment>

 <label pos:start="333:2" pos:end="333:10"><name pos:start="333:2" pos:end="333:9">reswitch</name>:</label>

    <switch pos:start="335:5" pos:end="7709:5">switch<condition pos:start="335:11" pos:end="335:13">(<expr pos:start="335:12" pos:end="335:12"><name pos:start="335:12" pos:end="335:12">b</name></expr>)</condition> <block pos:start="335:15" pos:end="7709:5">{<block_content pos:start="337:5" pos:end="7707:24">

    <case pos:start="337:5" pos:end="337:14">case <expr pos:start="337:10" pos:end="337:13"><literal type="number" pos:start="337:10" pos:end="337:13">0x0f</literal></expr>:</case>

        <comment type="block" format="doxygen" pos:start="339:9" pos:end="339:36">/**************************/</comment>

        <comment type="block" pos:start="341:9" pos:end="341:30">/* extended op code */</comment>

        <expr_stmt pos:start="343:9" pos:end="343:42"><expr pos:start="343:9" pos:end="343:41"><name pos:start="343:9" pos:end="343:9">b</name> <operator pos:start="343:11" pos:end="343:11">=</operator> <call pos:start="343:13" pos:end="343:33"><name pos:start="343:13" pos:end="343:25">x86_ldub_code</name><argument_list pos:start="343:26" pos:end="343:33">(<argument pos:start="343:27" pos:end="343:29"><expr pos:start="343:27" pos:end="343:29"><name pos:start="343:27" pos:end="343:29">env</name></expr></argument>, <argument pos:start="343:32" pos:end="343:32"><expr pos:start="343:32" pos:end="343:32"><name pos:start="343:32" pos:end="343:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="343:35" pos:end="343:35">|</operator> <literal type="number" pos:start="343:37" pos:end="343:41">0x100</literal></expr>;</expr_stmt>

        <goto pos:start="345:9" pos:end="345:22">goto <name pos:start="345:14" pos:end="345:21">reswitch</name>;</goto>



        <comment type="block" format="doxygen" pos:start="349:9" pos:end="349:36">/**************************/</comment>

        <comment type="block" pos:start="351:9" pos:end="351:27">/* arith &amp; logic */</comment>

    <case pos:start="353:5" pos:end="353:23">case <expr pos:start="353:10" pos:end="353:22"><literal type="number" pos:start="353:10" pos:end="353:13">0x00</literal> <operator pos:start="353:15" pos:end="353:17">...</operator> <literal type="number" pos:start="353:19" pos:end="353:22">0x05</literal></expr>:</case>

    <case pos:start="355:5" pos:end="355:23">case <expr pos:start="355:10" pos:end="355:22"><literal type="number" pos:start="355:10" pos:end="355:13">0x08</literal> <operator pos:start="355:15" pos:end="355:17">...</operator> <literal type="number" pos:start="355:19" pos:end="355:22">0x0d</literal></expr>:</case>

    <case pos:start="357:5" pos:end="357:23">case <expr pos:start="357:10" pos:end="357:22"><literal type="number" pos:start="357:10" pos:end="357:13">0x10</literal> <operator pos:start="357:15" pos:end="357:17">...</operator> <literal type="number" pos:start="357:19" pos:end="357:22">0x15</literal></expr>:</case>

    <case pos:start="359:5" pos:end="359:23">case <expr pos:start="359:10" pos:end="359:22"><literal type="number" pos:start="359:10" pos:end="359:13">0x18</literal> <operator pos:start="359:15" pos:end="359:17">...</operator> <literal type="number" pos:start="359:19" pos:end="359:22">0x1d</literal></expr>:</case>

    <case pos:start="361:5" pos:end="361:23">case <expr pos:start="361:10" pos:end="361:22"><literal type="number" pos:start="361:10" pos:end="361:13">0x20</literal> <operator pos:start="361:15" pos:end="361:17">...</operator> <literal type="number" pos:start="361:19" pos:end="361:22">0x25</literal></expr>:</case>

    <case pos:start="363:5" pos:end="363:23">case <expr pos:start="363:10" pos:end="363:22"><literal type="number" pos:start="363:10" pos:end="363:13">0x28</literal> <operator pos:start="363:15" pos:end="363:17">...</operator> <literal type="number" pos:start="363:19" pos:end="363:22">0x2d</literal></expr>:</case>

    <case pos:start="365:5" pos:end="365:23">case <expr pos:start="365:10" pos:end="365:22"><literal type="number" pos:start="365:10" pos:end="365:13">0x30</literal> <operator pos:start="365:15" pos:end="365:17">...</operator> <literal type="number" pos:start="365:19" pos:end="365:22">0x35</literal></expr>:</case>

    <case pos:start="367:5" pos:end="367:23">case <expr pos:start="367:10" pos:end="367:22"><literal type="number" pos:start="367:10" pos:end="367:13">0x38</literal> <operator pos:start="367:15" pos:end="367:17">...</operator> <literal type="number" pos:start="367:19" pos:end="367:22">0x3d</literal></expr>:</case>

        <block pos:start="369:9" pos:end="469:9">{<block_content pos:start="371:13" pos:end="467:13">

            <decl_stmt pos:start="371:13" pos:end="371:27"><decl pos:start="371:13" pos:end="371:18"><type pos:start="371:13" pos:end="371:15"><name pos:start="371:13" pos:end="371:15">int</name></type> <name pos:start="371:17" pos:end="371:18">op</name></decl>, <decl pos:start="371:21" pos:end="371:21"><type ref="prev" pos:start="371:13" pos:end="371:15"/><name pos:start="371:21" pos:end="371:21">f</name></decl>, <decl pos:start="371:24" pos:end="371:26"><type ref="prev" pos:start="371:13" pos:end="371:15"/><name pos:start="371:24" pos:end="371:26">val</name></decl>;</decl_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:30"><expr pos:start="373:13" pos:end="373:29"><name pos:start="373:13" pos:end="373:14">op</name> <operator pos:start="373:16" pos:end="373:16">=</operator> <operator pos:start="373:18" pos:end="373:18">(</operator><name pos:start="373:19" pos:end="373:19">b</name> <operator pos:start="373:21" pos:end="373:22">&gt;&gt;</operator> <literal type="number" pos:start="373:24" pos:end="373:24">3</literal><operator pos:start="373:25" pos:end="373:25">)</operator> <operator pos:start="373:27" pos:end="373:27">&amp;</operator> <literal type="number" pos:start="373:29" pos:end="373:29">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="375:13" pos:end="375:29"><expr pos:start="375:13" pos:end="375:28"><name pos:start="375:13" pos:end="375:13">f</name> <operator pos:start="375:15" pos:end="375:15">=</operator> <operator pos:start="375:17" pos:end="375:17">(</operator><name pos:start="375:18" pos:end="375:18">b</name> <operator pos:start="375:20" pos:end="375:21">&gt;&gt;</operator> <literal type="number" pos:start="375:23" pos:end="375:23">1</literal><operator pos:start="375:24" pos:end="375:24">)</operator> <operator pos:start="375:26" pos:end="375:26">&amp;</operator> <literal type="number" pos:start="375:28" pos:end="375:28">3</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="379:13" pos:end="379:34"><expr pos:start="379:13" pos:end="379:33"><name pos:start="379:13" pos:end="379:14">ot</name> <operator pos:start="379:16" pos:end="379:16">=</operator> <call pos:start="379:18" pos:end="379:33"><name pos:start="379:18" pos:end="379:23">mo_b_d</name><argument_list pos:start="379:24" pos:end="379:33">(<argument pos:start="379:25" pos:end="379:25"><expr pos:start="379:25" pos:end="379:25"><name pos:start="379:25" pos:end="379:25">b</name></expr></argument>, <argument pos:start="379:28" pos:end="379:32"><expr pos:start="379:28" pos:end="379:32"><name pos:start="379:28" pos:end="379:32">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <switch pos:start="383:13" pos:end="467:13">switch<condition pos:start="383:19" pos:end="383:21">(<expr pos:start="383:20" pos:end="383:20"><name pos:start="383:20" pos:end="383:20">f</name></expr>)</condition> <block pos:start="383:23" pos:end="467:13">{<block_content pos:start="385:13" pos:end="465:22">

            <case pos:start="385:13" pos:end="385:19">case <expr pos:start="385:18" pos:end="385:18"><literal type="number" pos:start="385:18" pos:end="385:18">0</literal></expr>:</case> <comment type="block" pos:start="385:21" pos:end="385:35">/* OP Ev, Gv */</comment>

                <expr_stmt pos:start="387:17" pos:end="387:46"><expr pos:start="387:17" pos:end="387:45"><name pos:start="387:17" pos:end="387:21">modrm</name> <operator pos:start="387:23" pos:end="387:23">=</operator> <call pos:start="387:25" pos:end="387:45"><name pos:start="387:25" pos:end="387:37">x86_ldub_code</name><argument_list pos:start="387:38" pos:end="387:45">(<argument pos:start="387:39" pos:end="387:41"><expr pos:start="387:39" pos:end="387:41"><name pos:start="387:39" pos:end="387:41">env</name></expr></argument>, <argument pos:start="387:44" pos:end="387:44"><expr pos:start="387:44" pos:end="387:44"><name pos:start="387:44" pos:end="387:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="389:17" pos:end="389:49"><expr pos:start="389:17" pos:end="389:48"><name pos:start="389:17" pos:end="389:19">reg</name> <operator pos:start="389:21" pos:end="389:21">=</operator> <operator pos:start="389:23" pos:end="389:23">(</operator><operator pos:start="389:24" pos:end="389:24">(</operator><name pos:start="389:25" pos:end="389:29">modrm</name> <operator pos:start="389:31" pos:end="389:32">&gt;&gt;</operator> <literal type="number" pos:start="389:34" pos:end="389:34">3</literal><operator pos:start="389:35" pos:end="389:35">)</operator> <operator pos:start="389:37" pos:end="389:37">&amp;</operator> <literal type="number" pos:start="389:39" pos:end="389:39">7</literal><operator pos:start="389:40" pos:end="389:40">)</operator> <operator pos:start="389:42" pos:end="389:42">|</operator> <name pos:start="389:44" pos:end="389:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="391:17" pos:end="391:39"><expr pos:start="391:17" pos:end="391:38"><name pos:start="391:17" pos:end="391:19">mod</name> <operator pos:start="391:21" pos:end="391:21">=</operator> <operator pos:start="391:23" pos:end="391:23">(</operator><name pos:start="391:24" pos:end="391:28">modrm</name> <operator pos:start="391:30" pos:end="391:31">&gt;&gt;</operator> <literal type="number" pos:start="391:33" pos:end="391:33">6</literal><operator pos:start="391:34" pos:end="391:34">)</operator> <operator pos:start="391:36" pos:end="391:36">&amp;</operator> <literal type="number" pos:start="391:38" pos:end="391:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:44"><expr pos:start="393:17" pos:end="393:43"><name pos:start="393:17" pos:end="393:18">rm</name> <operator pos:start="393:20" pos:end="393:20">=</operator> <operator pos:start="393:22" pos:end="393:22">(</operator><name pos:start="393:23" pos:end="393:27">modrm</name> <operator pos:start="393:29" pos:end="393:29">&amp;</operator> <literal type="number" pos:start="393:31" pos:end="393:31">7</literal><operator pos:start="393:32" pos:end="393:32">)</operator> <operator pos:start="393:34" pos:end="393:34">|</operator> <call pos:start="393:36" pos:end="393:43"><name pos:start="393:36" pos:end="393:40">REX_B</name><argument_list pos:start="393:41" pos:end="393:43">(<argument pos:start="393:42" pos:end="393:42"><expr pos:start="393:42" pos:end="393:42"><name pos:start="393:42" pos:end="393:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="395:17" pos:end="419:17"><if pos:start="395:17" pos:end="401:17">if <condition pos:start="395:20" pos:end="395:29">(<expr pos:start="395:21" pos:end="395:28"><name pos:start="395:21" pos:end="395:23">mod</name> <operator pos:start="395:25" pos:end="395:26">!=</operator> <literal type="number" pos:start="395:28" pos:end="395:28">3</literal></expr>)</condition> <block pos:start="395:31" pos:end="401:17">{<block_content pos:start="397:21" pos:end="399:36">

                    <expr_stmt pos:start="397:21" pos:end="397:49"><expr pos:start="397:21" pos:end="397:48"><call pos:start="397:21" pos:end="397:48"><name pos:start="397:21" pos:end="397:33">gen_lea_modrm</name><argument_list pos:start="397:34" pos:end="397:48">(<argument pos:start="397:35" pos:end="397:37"><expr pos:start="397:35" pos:end="397:37"><name pos:start="397:35" pos:end="397:37">env</name></expr></argument>, <argument pos:start="397:40" pos:end="397:40"><expr pos:start="397:40" pos:end="397:40"><name pos:start="397:40" pos:end="397:40">s</name></expr></argument>, <argument pos:start="397:43" pos:end="397:47"><expr pos:start="397:43" pos:end="397:47"><name pos:start="397:43" pos:end="397:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="399:21" pos:end="399:36"><expr pos:start="399:21" pos:end="399:35"><name pos:start="399:21" pos:end="399:25">opreg</name> <operator pos:start="399:27" pos:end="399:27">=</operator> <name pos:start="399:29" pos:end="399:35">OR_TMP0</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="401:19" pos:end="415:17">else if <condition pos:start="401:27" pos:end="401:54">(<expr pos:start="401:28" pos:end="401:53"><name pos:start="401:28" pos:end="401:29">op</name> <operator pos:start="401:31" pos:end="401:32">==</operator> <name pos:start="401:34" pos:end="401:40">OP_XORL</name> <operator pos:start="401:42" pos:end="401:43">&amp;&amp;</operator> <name pos:start="401:45" pos:end="401:46">rm</name> <operator pos:start="401:48" pos:end="401:49">==</operator> <name pos:start="401:51" pos:end="401:53">reg</name></expr>)</condition> <block pos:start="401:56" pos:end="415:17">{<block_content pos:start="403:17" pos:end="413:26">

                <label pos:start="403:17" pos:end="403:25"><name pos:start="403:17" pos:end="403:24">xor_zero</name>:</label>

                    <comment type="block" pos:start="405:21" pos:end="405:51">/* xor reg, reg optimisation */</comment>

                    <expr_stmt pos:start="407:21" pos:end="407:44"><expr pos:start="407:21" pos:end="407:43"><call pos:start="407:21" pos:end="407:43"><name pos:start="407:21" pos:end="407:29">set_cc_op</name><argument_list pos:start="407:30" pos:end="407:43">(<argument pos:start="407:31" pos:end="407:31"><expr pos:start="407:31" pos:end="407:31"><name pos:start="407:31" pos:end="407:31">s</name></expr></argument>, <argument pos:start="407:34" pos:end="407:42"><expr pos:start="407:34" pos:end="407:42"><name pos:start="407:34" pos:end="407:42">CC_OP_CLR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="409:21" pos:end="409:47"><expr pos:start="409:21" pos:end="409:46"><call pos:start="409:21" pos:end="409:46"><name pos:start="409:21" pos:end="409:35">tcg_gen_movi_tl</name><argument_list pos:start="409:36" pos:end="409:46">(<argument pos:start="409:37" pos:end="409:42"><expr pos:start="409:37" pos:end="409:42"><name pos:start="409:37" pos:end="409:42">cpu_T0</name></expr></argument>, <argument pos:start="409:45" pos:end="409:45"><expr pos:start="409:45" pos:end="409:45"><literal type="number" pos:start="409:45" pos:end="409:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="411:21" pos:end="411:54"><expr pos:start="411:21" pos:end="411:53"><call pos:start="411:21" pos:end="411:53"><name pos:start="411:21" pos:end="411:36">gen_op_mov_reg_v</name><argument_list pos:start="411:37" pos:end="411:53">(<argument pos:start="411:38" pos:end="411:39"><expr pos:start="411:38" pos:end="411:39"><name pos:start="411:38" pos:end="411:39">ot</name></expr></argument>, <argument pos:start="411:42" pos:end="411:44"><expr pos:start="411:42" pos:end="411:44"><name pos:start="411:42" pos:end="411:44">reg</name></expr></argument>, <argument pos:start="411:47" pos:end="411:52"><expr pos:start="411:47" pos:end="411:52"><name pos:start="411:47" pos:end="411:52">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="413:21" pos:end="413:26">break;</break>

                </block_content>}</block></if> <else pos:start="415:19" pos:end="419:17">else <block pos:start="415:24" pos:end="419:17">{<block_content pos:start="417:21" pos:end="417:31">

                    <expr_stmt pos:start="417:21" pos:end="417:31"><expr pos:start="417:21" pos:end="417:30"><name pos:start="417:21" pos:end="417:25">opreg</name> <operator pos:start="417:27" pos:end="417:27">=</operator> <name pos:start="417:29" pos:end="417:30">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="421:17" pos:end="421:50"><expr pos:start="421:17" pos:end="421:49"><call pos:start="421:17" pos:end="421:49"><name pos:start="421:17" pos:end="421:32">gen_op_mov_v_reg</name><argument_list pos:start="421:33" pos:end="421:49">(<argument pos:start="421:34" pos:end="421:35"><expr pos:start="421:34" pos:end="421:35"><name pos:start="421:34" pos:end="421:35">ot</name></expr></argument>, <argument pos:start="421:38" pos:end="421:43"><expr pos:start="421:38" pos:end="421:43"><name pos:start="421:38" pos:end="421:43">cpu_T1</name></expr></argument>, <argument pos:start="421:46" pos:end="421:48"><expr pos:start="421:46" pos:end="421:48"><name pos:start="421:46" pos:end="421:48">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="423:17" pos:end="423:41"><expr pos:start="423:17" pos:end="423:40"><call pos:start="423:17" pos:end="423:40"><name pos:start="423:17" pos:end="423:22">gen_op</name><argument_list pos:start="423:23" pos:end="423:40">(<argument pos:start="423:24" pos:end="423:24"><expr pos:start="423:24" pos:end="423:24"><name pos:start="423:24" pos:end="423:24">s</name></expr></argument>, <argument pos:start="423:27" pos:end="423:28"><expr pos:start="423:27" pos:end="423:28"><name pos:start="423:27" pos:end="423:28">op</name></expr></argument>, <argument pos:start="423:31" pos:end="423:32"><expr pos:start="423:31" pos:end="423:32"><name pos:start="423:31" pos:end="423:32">ot</name></expr></argument>, <argument pos:start="423:35" pos:end="423:39"><expr pos:start="423:35" pos:end="423:39"><name pos:start="423:35" pos:end="423:39">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="425:17" pos:end="425:22">break;</break>

            <case pos:start="427:13" pos:end="427:19">case <expr pos:start="427:18" pos:end="427:18"><literal type="number" pos:start="427:18" pos:end="427:18">1</literal></expr>:</case> <comment type="block" pos:start="427:21" pos:end="427:35">/* OP Gv, Ev */</comment>

                <expr_stmt pos:start="429:17" pos:end="429:46"><expr pos:start="429:17" pos:end="429:45"><name pos:start="429:17" pos:end="429:21">modrm</name> <operator pos:start="429:23" pos:end="429:23">=</operator> <call pos:start="429:25" pos:end="429:45"><name pos:start="429:25" pos:end="429:37">x86_ldub_code</name><argument_list pos:start="429:38" pos:end="429:45">(<argument pos:start="429:39" pos:end="429:41"><expr pos:start="429:39" pos:end="429:41"><name pos:start="429:39" pos:end="429:41">env</name></expr></argument>, <argument pos:start="429:44" pos:end="429:44"><expr pos:start="429:44" pos:end="429:44"><name pos:start="429:44" pos:end="429:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="431:17" pos:end="431:39"><expr pos:start="431:17" pos:end="431:38"><name pos:start="431:17" pos:end="431:19">mod</name> <operator pos:start="431:21" pos:end="431:21">=</operator> <operator pos:start="431:23" pos:end="431:23">(</operator><name pos:start="431:24" pos:end="431:28">modrm</name> <operator pos:start="431:30" pos:end="431:31">&gt;&gt;</operator> <literal type="number" pos:start="431:33" pos:end="431:33">6</literal><operator pos:start="431:34" pos:end="431:34">)</operator> <operator pos:start="431:36" pos:end="431:36">&amp;</operator> <literal type="number" pos:start="431:38" pos:end="431:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:49"><expr pos:start="433:17" pos:end="433:48"><name pos:start="433:17" pos:end="433:19">reg</name> <operator pos:start="433:21" pos:end="433:21">=</operator> <operator pos:start="433:23" pos:end="433:23">(</operator><operator pos:start="433:24" pos:end="433:24">(</operator><name pos:start="433:25" pos:end="433:29">modrm</name> <operator pos:start="433:31" pos:end="433:32">&gt;&gt;</operator> <literal type="number" pos:start="433:34" pos:end="433:34">3</literal><operator pos:start="433:35" pos:end="433:35">)</operator> <operator pos:start="433:37" pos:end="433:37">&amp;</operator> <literal type="number" pos:start="433:39" pos:end="433:39">7</literal><operator pos:start="433:40" pos:end="433:40">)</operator> <operator pos:start="433:42" pos:end="433:42">|</operator> <name pos:start="433:44" pos:end="433:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="435:17" pos:end="435:44"><expr pos:start="435:17" pos:end="435:43"><name pos:start="435:17" pos:end="435:18">rm</name> <operator pos:start="435:20" pos:end="435:20">=</operator> <operator pos:start="435:22" pos:end="435:22">(</operator><name pos:start="435:23" pos:end="435:27">modrm</name> <operator pos:start="435:29" pos:end="435:29">&amp;</operator> <literal type="number" pos:start="435:31" pos:end="435:31">7</literal><operator pos:start="435:32" pos:end="435:32">)</operator> <operator pos:start="435:34" pos:end="435:34">|</operator> <call pos:start="435:36" pos:end="435:43"><name pos:start="435:36" pos:end="435:40">REX_B</name><argument_list pos:start="435:41" pos:end="435:43">(<argument pos:start="435:42" pos:end="435:42"><expr pos:start="435:42" pos:end="435:42"><name pos:start="435:42" pos:end="435:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="437:17" pos:end="451:17"><if pos:start="437:17" pos:end="443:17">if <condition pos:start="437:20" pos:end="437:29">(<expr pos:start="437:21" pos:end="437:28"><name pos:start="437:21" pos:end="437:23">mod</name> <operator pos:start="437:25" pos:end="437:26">!=</operator> <literal type="number" pos:start="437:28" pos:end="437:28">3</literal></expr>)</condition> <block pos:start="437:31" pos:end="443:17">{<block_content pos:start="439:21" pos:end="441:55">

                    <expr_stmt pos:start="439:21" pos:end="439:49"><expr pos:start="439:21" pos:end="439:48"><call pos:start="439:21" pos:end="439:48"><name pos:start="439:21" pos:end="439:33">gen_lea_modrm</name><argument_list pos:start="439:34" pos:end="439:48">(<argument pos:start="439:35" pos:end="439:37"><expr pos:start="439:35" pos:end="439:37"><name pos:start="439:35" pos:end="439:37">env</name></expr></argument>, <argument pos:start="439:40" pos:end="439:40"><expr pos:start="439:40" pos:end="439:40"><name pos:start="439:40" pos:end="439:40">s</name></expr></argument>, <argument pos:start="439:43" pos:end="439:47"><expr pos:start="439:43" pos:end="439:47"><name pos:start="439:43" pos:end="439:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="441:21" pos:end="441:55"><expr pos:start="441:21" pos:end="441:54"><call pos:start="441:21" pos:end="441:54"><name pos:start="441:21" pos:end="441:31">gen_op_ld_v</name><argument_list pos:start="441:32" pos:end="441:54">(<argument pos:start="441:33" pos:end="441:33"><expr pos:start="441:33" pos:end="441:33"><name pos:start="441:33" pos:end="441:33">s</name></expr></argument>, <argument pos:start="441:36" pos:end="441:37"><expr pos:start="441:36" pos:end="441:37"><name pos:start="441:36" pos:end="441:37">ot</name></expr></argument>, <argument pos:start="441:40" pos:end="441:45"><expr pos:start="441:40" pos:end="441:45"><name pos:start="441:40" pos:end="441:45">cpu_T1</name></expr></argument>, <argument pos:start="441:48" pos:end="441:53"><expr pos:start="441:48" pos:end="441:53"><name pos:start="441:48" pos:end="441:53">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="443:19" pos:end="447:17">else if <condition pos:start="443:27" pos:end="443:54">(<expr pos:start="443:28" pos:end="443:53"><name pos:start="443:28" pos:end="443:29">op</name> <operator pos:start="443:31" pos:end="443:32">==</operator> <name pos:start="443:34" pos:end="443:40">OP_XORL</name> <operator pos:start="443:42" pos:end="443:43">&amp;&amp;</operator> <name pos:start="443:45" pos:end="443:46">rm</name> <operator pos:start="443:48" pos:end="443:49">==</operator> <name pos:start="443:51" pos:end="443:53">reg</name></expr>)</condition> <block pos:start="443:56" pos:end="447:17">{<block_content pos:start="445:21" pos:end="445:34">

                    <goto pos:start="445:21" pos:end="445:34">goto <name pos:start="445:26" pos:end="445:33">xor_zero</name>;</goto>

                </block_content>}</block></if> <else pos:start="447:19" pos:end="451:17">else <block pos:start="447:24" pos:end="451:17">{<block_content pos:start="449:21" pos:end="449:53">

                    <expr_stmt pos:start="449:21" pos:end="449:53"><expr pos:start="449:21" pos:end="449:52"><call pos:start="449:21" pos:end="449:52"><name pos:start="449:21" pos:end="449:36">gen_op_mov_v_reg</name><argument_list pos:start="449:37" pos:end="449:52">(<argument pos:start="449:38" pos:end="449:39"><expr pos:start="449:38" pos:end="449:39"><name pos:start="449:38" pos:end="449:39">ot</name></expr></argument>, <argument pos:start="449:42" pos:end="449:47"><expr pos:start="449:42" pos:end="449:47"><name pos:start="449:42" pos:end="449:47">cpu_T1</name></expr></argument>, <argument pos:start="449:50" pos:end="449:51"><expr pos:start="449:50" pos:end="449:51"><name pos:start="449:50" pos:end="449:51">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="453:17" pos:end="453:39"><expr pos:start="453:17" pos:end="453:38"><call pos:start="453:17" pos:end="453:38"><name pos:start="453:17" pos:end="453:22">gen_op</name><argument_list pos:start="453:23" pos:end="453:38">(<argument pos:start="453:24" pos:end="453:24"><expr pos:start="453:24" pos:end="453:24"><name pos:start="453:24" pos:end="453:24">s</name></expr></argument>, <argument pos:start="453:27" pos:end="453:28"><expr pos:start="453:27" pos:end="453:28"><name pos:start="453:27" pos:end="453:28">op</name></expr></argument>, <argument pos:start="453:31" pos:end="453:32"><expr pos:start="453:31" pos:end="453:32"><name pos:start="453:31" pos:end="453:32">ot</name></expr></argument>, <argument pos:start="453:35" pos:end="453:37"><expr pos:start="453:35" pos:end="453:37"><name pos:start="453:35" pos:end="453:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="455:17" pos:end="455:22">break;</break>

            <case pos:start="457:13" pos:end="457:19">case <expr pos:start="457:18" pos:end="457:18"><literal type="number" pos:start="457:18" pos:end="457:18">2</literal></expr>:</case> <comment type="block" pos:start="457:21" pos:end="457:34">/* OP A, Iv */</comment>

                <expr_stmt pos:start="459:17" pos:end="459:43"><expr pos:start="459:17" pos:end="459:42"><name pos:start="459:17" pos:end="459:19">val</name> <operator pos:start="459:21" pos:end="459:21">=</operator> <call pos:start="459:23" pos:end="459:42"><name pos:start="459:23" pos:end="459:30">insn_get</name><argument_list pos:start="459:31" pos:end="459:42">(<argument pos:start="459:32" pos:end="459:34"><expr pos:start="459:32" pos:end="459:34"><name pos:start="459:32" pos:end="459:34">env</name></expr></argument>, <argument pos:start="459:37" pos:end="459:37"><expr pos:start="459:37" pos:end="459:37"><name pos:start="459:37" pos:end="459:37">s</name></expr></argument>, <argument pos:start="459:40" pos:end="459:41"><expr pos:start="459:40" pos:end="459:41"><name pos:start="459:40" pos:end="459:41">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="461:17" pos:end="461:45"><expr pos:start="461:17" pos:end="461:44"><call pos:start="461:17" pos:end="461:44"><name pos:start="461:17" pos:end="461:31">tcg_gen_movi_tl</name><argument_list pos:start="461:32" pos:end="461:44">(<argument pos:start="461:33" pos:end="461:38"><expr pos:start="461:33" pos:end="461:38"><name pos:start="461:33" pos:end="461:38">cpu_T1</name></expr></argument>, <argument pos:start="461:41" pos:end="461:43"><expr pos:start="461:41" pos:end="461:43"><name pos:start="461:41" pos:end="461:43">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="463:17" pos:end="463:42"><expr pos:start="463:17" pos:end="463:41"><call pos:start="463:17" pos:end="463:41"><name pos:start="463:17" pos:end="463:22">gen_op</name><argument_list pos:start="463:23" pos:end="463:41">(<argument pos:start="463:24" pos:end="463:24"><expr pos:start="463:24" pos:end="463:24"><name pos:start="463:24" pos:end="463:24">s</name></expr></argument>, <argument pos:start="463:27" pos:end="463:28"><expr pos:start="463:27" pos:end="463:28"><name pos:start="463:27" pos:end="463:28">op</name></expr></argument>, <argument pos:start="463:31" pos:end="463:32"><expr pos:start="463:31" pos:end="463:32"><name pos:start="463:31" pos:end="463:32">ot</name></expr></argument>, <argument pos:start="463:35" pos:end="463:40"><expr pos:start="463:35" pos:end="463:40"><name pos:start="463:35" pos:end="463:40">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="465:17" pos:end="465:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="471:9" pos:end="471:14">break;</break>



    <case pos:start="475:5" pos:end="475:14">case <expr pos:start="475:10" pos:end="475:13"><literal type="number" pos:start="475:10" pos:end="475:13">0x82</literal></expr>:</case>

        <if_stmt pos:start="477:9" pos:end="479:28"><if pos:start="477:9" pos:end="479:28">if <condition pos:start="477:12" pos:end="477:22">(<expr pos:start="477:13" pos:end="477:21"><call pos:start="477:13" pos:end="477:21"><name pos:start="477:13" pos:end="477:18">CODE64</name><argument_list pos:start="477:19" pos:end="477:21">(<argument pos:start="477:20" pos:end="477:20"><expr pos:start="477:20" pos:end="477:20"><name pos:start="477:20" pos:end="477:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="479:13" pos:end="479:28"><block_content pos:start="479:13" pos:end="479:28">

            <goto pos:start="479:13" pos:end="479:28">goto <name pos:start="479:18" pos:end="479:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

    <case pos:start="481:5" pos:end="481:14">case <expr pos:start="481:10" pos:end="481:13"><literal type="number" pos:start="481:10" pos:end="481:13">0x80</literal></expr>:</case> <comment type="block" pos:start="481:16" pos:end="481:25">/* GRP1 */</comment>

    <case pos:start="483:5" pos:end="483:14">case <expr pos:start="483:10" pos:end="483:13"><literal type="number" pos:start="483:10" pos:end="483:13">0x81</literal></expr>:</case>

    <case pos:start="485:5" pos:end="485:14">case <expr pos:start="485:10" pos:end="485:13"><literal type="number" pos:start="485:10" pos:end="485:13">0x83</literal></expr>:</case>

        <block pos:start="487:9" pos:end="555:9">{<block_content pos:start="489:13" pos:end="553:37">

            <decl_stmt pos:start="489:13" pos:end="489:20"><decl pos:start="489:13" pos:end="489:19"><type pos:start="489:13" pos:end="489:15"><name pos:start="489:13" pos:end="489:15">int</name></type> <name pos:start="489:17" pos:end="489:19">val</name></decl>;</decl_stmt>



            <expr_stmt pos:start="493:13" pos:end="493:34"><expr pos:start="493:13" pos:end="493:33"><name pos:start="493:13" pos:end="493:14">ot</name> <operator pos:start="493:16" pos:end="493:16">=</operator> <call pos:start="493:18" pos:end="493:33"><name pos:start="493:18" pos:end="493:23">mo_b_d</name><argument_list pos:start="493:24" pos:end="493:33">(<argument pos:start="493:25" pos:end="493:25"><expr pos:start="493:25" pos:end="493:25"><name pos:start="493:25" pos:end="493:25">b</name></expr></argument>, <argument pos:start="493:28" pos:end="493:32"><expr pos:start="493:28" pos:end="493:32"><name pos:start="493:28" pos:end="493:32">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="497:13" pos:end="497:42"><expr pos:start="497:13" pos:end="497:41"><name pos:start="497:13" pos:end="497:17">modrm</name> <operator pos:start="497:19" pos:end="497:19">=</operator> <call pos:start="497:21" pos:end="497:41"><name pos:start="497:21" pos:end="497:33">x86_ldub_code</name><argument_list pos:start="497:34" pos:end="497:41">(<argument pos:start="497:35" pos:end="497:37"><expr pos:start="497:35" pos:end="497:37"><name pos:start="497:35" pos:end="497:37">env</name></expr></argument>, <argument pos:start="497:40" pos:end="497:40"><expr pos:start="497:40" pos:end="497:40"><name pos:start="497:40" pos:end="497:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:35"><expr pos:start="499:13" pos:end="499:34"><name pos:start="499:13" pos:end="499:15">mod</name> <operator pos:start="499:17" pos:end="499:17">=</operator> <operator pos:start="499:19" pos:end="499:19">(</operator><name pos:start="499:20" pos:end="499:24">modrm</name> <operator pos:start="499:26" pos:end="499:27">&gt;&gt;</operator> <literal type="number" pos:start="499:29" pos:end="499:29">6</literal><operator pos:start="499:30" pos:end="499:30">)</operator> <operator pos:start="499:32" pos:end="499:32">&amp;</operator> <literal type="number" pos:start="499:34" pos:end="499:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:40"><expr pos:start="501:13" pos:end="501:39"><name pos:start="501:13" pos:end="501:14">rm</name> <operator pos:start="501:16" pos:end="501:16">=</operator> <operator pos:start="501:18" pos:end="501:18">(</operator><name pos:start="501:19" pos:end="501:23">modrm</name> <operator pos:start="501:25" pos:end="501:25">&amp;</operator> <literal type="number" pos:start="501:27" pos:end="501:27">7</literal><operator pos:start="501:28" pos:end="501:28">)</operator> <operator pos:start="501:30" pos:end="501:30">|</operator> <call pos:start="501:32" pos:end="501:39"><name pos:start="501:32" pos:end="501:36">REX_B</name><argument_list pos:start="501:37" pos:end="501:39">(<argument pos:start="501:38" pos:end="501:38"><expr pos:start="501:38" pos:end="501:38"><name pos:start="501:38" pos:end="501:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:34"><expr pos:start="503:13" pos:end="503:33"><name pos:start="503:13" pos:end="503:14">op</name> <operator pos:start="503:16" pos:end="503:16">=</operator> <operator pos:start="503:18" pos:end="503:18">(</operator><name pos:start="503:19" pos:end="503:23">modrm</name> <operator pos:start="503:25" pos:end="503:26">&gt;&gt;</operator> <literal type="number" pos:start="503:28" pos:end="503:28">3</literal><operator pos:start="503:29" pos:end="503:29">)</operator> <operator pos:start="503:31" pos:end="503:31">&amp;</operator> <literal type="number" pos:start="503:33" pos:end="503:33">7</literal></expr>;</expr_stmt>



            <if_stmt pos:start="507:13" pos:end="525:13"><if pos:start="507:13" pos:end="521:13">if <condition pos:start="507:16" pos:end="507:25">(<expr pos:start="507:17" pos:end="507:24"><name pos:start="507:17" pos:end="507:19">mod</name> <operator pos:start="507:21" pos:end="507:22">!=</operator> <literal type="number" pos:start="507:24" pos:end="507:24">3</literal></expr>)</condition> <block pos:start="507:27" pos:end="521:13">{<block_content pos:start="509:17" pos:end="519:32">

                <if_stmt pos:start="509:17" pos:end="515:56"><if pos:start="509:17" pos:end="511:38">if <condition pos:start="509:20" pos:end="509:30">(<expr pos:start="509:21" pos:end="509:29"><name pos:start="509:21" pos:end="509:21">b</name> <operator pos:start="509:23" pos:end="509:24">==</operator> <literal type="number" pos:start="509:26" pos:end="509:29">0x83</literal></expr>)</condition><block type="pseudo" pos:start="511:21" pos:end="511:38"><block_content pos:start="511:21" pos:end="511:38">

                    <expr_stmt pos:start="511:21" pos:end="511:38"><expr pos:start="511:21" pos:end="511:37"><name pos:start="511:21" pos:end="511:33"><name pos:start="511:21" pos:end="511:21">s</name><operator pos:start="511:22" pos:end="511:23">-&gt;</operator><name pos:start="511:24" pos:end="511:33">rip_offset</name></name> <operator pos:start="511:35" pos:end="511:35">=</operator> <literal type="number" pos:start="511:37" pos:end="511:37">1</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="513:17" pos:end="515:56">else<block type="pseudo" pos:start="515:21" pos:end="515:56"><block_content pos:start="515:21" pos:end="515:56">

                    <expr_stmt pos:start="515:21" pos:end="515:56"><expr pos:start="515:21" pos:end="515:55"><name pos:start="515:21" pos:end="515:33"><name pos:start="515:21" pos:end="515:21">s</name><operator pos:start="515:22" pos:end="515:23">-&gt;</operator><name pos:start="515:24" pos:end="515:33">rip_offset</name></name> <operator pos:start="515:35" pos:end="515:35">=</operator> <call pos:start="515:37" pos:end="515:55"><name pos:start="515:37" pos:end="515:51">insn_const_size</name><argument_list pos:start="515:52" pos:end="515:55">(<argument pos:start="515:53" pos:end="515:54"><expr pos:start="515:53" pos:end="515:54"><name pos:start="515:53" pos:end="515:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="517:17" pos:end="517:45"><expr pos:start="517:17" pos:end="517:44"><call pos:start="517:17" pos:end="517:44"><name pos:start="517:17" pos:end="517:29">gen_lea_modrm</name><argument_list pos:start="517:30" pos:end="517:44">(<argument pos:start="517:31" pos:end="517:33"><expr pos:start="517:31" pos:end="517:33"><name pos:start="517:31" pos:end="517:33">env</name></expr></argument>, <argument pos:start="517:36" pos:end="517:36"><expr pos:start="517:36" pos:end="517:36"><name pos:start="517:36" pos:end="517:36">s</name></expr></argument>, <argument pos:start="517:39" pos:end="517:43"><expr pos:start="517:39" pos:end="517:43"><name pos:start="517:39" pos:end="517:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="519:17" pos:end="519:32"><expr pos:start="519:17" pos:end="519:31"><name pos:start="519:17" pos:end="519:21">opreg</name> <operator pos:start="519:23" pos:end="519:23">=</operator> <name pos:start="519:25" pos:end="519:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="521:15" pos:end="525:13">else <block pos:start="521:20" pos:end="525:13">{<block_content pos:start="523:17" pos:end="523:27">

                <expr_stmt pos:start="523:17" pos:end="523:27"><expr pos:start="523:17" pos:end="523:26"><name pos:start="523:17" pos:end="523:21">opreg</name> <operator pos:start="523:23" pos:end="523:23">=</operator> <name pos:start="523:25" pos:end="523:26">rm</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <switch pos:start="529:13" pos:end="549:13">switch<condition pos:start="529:19" pos:end="529:21">(<expr pos:start="529:20" pos:end="529:20"><name pos:start="529:20" pos:end="529:20">b</name></expr>)</condition> <block pos:start="529:23" pos:end="549:13">{<block_content pos:start="531:13" pos:end="547:22">

            <default pos:start="531:13" pos:end="531:20">default:</default>

            <case pos:start="533:13" pos:end="533:22">case <expr pos:start="533:18" pos:end="533:21"><literal type="number" pos:start="533:18" pos:end="533:21">0x80</literal></expr>:</case>

            <case pos:start="535:13" pos:end="535:22">case <expr pos:start="535:18" pos:end="535:21"><literal type="number" pos:start="535:18" pos:end="535:21">0x81</literal></expr>:</case>

            <case pos:start="537:13" pos:end="537:22">case <expr pos:start="537:18" pos:end="537:21"><literal type="number" pos:start="537:18" pos:end="537:21">0x82</literal></expr>:</case>

                <expr_stmt pos:start="539:17" pos:end="539:43"><expr pos:start="539:17" pos:end="539:42"><name pos:start="539:17" pos:end="539:19">val</name> <operator pos:start="539:21" pos:end="539:21">=</operator> <call pos:start="539:23" pos:end="539:42"><name pos:start="539:23" pos:end="539:30">insn_get</name><argument_list pos:start="539:31" pos:end="539:42">(<argument pos:start="539:32" pos:end="539:34"><expr pos:start="539:32" pos:end="539:34"><name pos:start="539:32" pos:end="539:34">env</name></expr></argument>, <argument pos:start="539:37" pos:end="539:37"><expr pos:start="539:37" pos:end="539:37"><name pos:start="539:37" pos:end="539:37">s</name></expr></argument>, <argument pos:start="539:40" pos:end="539:41"><expr pos:start="539:40" pos:end="539:41"><name pos:start="539:40" pos:end="539:41">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="541:17" pos:end="541:22">break;</break>

            <case pos:start="543:13" pos:end="543:22">case <expr pos:start="543:18" pos:end="543:21"><literal type="number" pos:start="543:18" pos:end="543:21">0x83</literal></expr>:</case>

                <expr_stmt pos:start="545:17" pos:end="545:53"><expr pos:start="545:17" pos:end="545:52"><name pos:start="545:17" pos:end="545:19">val</name> <operator pos:start="545:21" pos:end="545:21">=</operator> <operator pos:start="545:23" pos:end="545:23">(</operator><name pos:start="545:24" pos:end="545:29">int8_t</name><operator pos:start="545:30" pos:end="545:30">)</operator><call pos:start="545:31" pos:end="545:52"><name pos:start="545:31" pos:end="545:38">insn_get</name><argument_list pos:start="545:39" pos:end="545:52">(<argument pos:start="545:40" pos:end="545:42"><expr pos:start="545:40" pos:end="545:42"><name pos:start="545:40" pos:end="545:42">env</name></expr></argument>, <argument pos:start="545:45" pos:end="545:45"><expr pos:start="545:45" pos:end="545:45"><name pos:start="545:45" pos:end="545:45">s</name></expr></argument>, <argument pos:start="545:48" pos:end="545:51"><expr pos:start="545:48" pos:end="545:51"><name pos:start="545:48" pos:end="545:51">MO_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="547:17" pos:end="547:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="551:13" pos:end="551:41"><expr pos:start="551:13" pos:end="551:40"><call pos:start="551:13" pos:end="551:40"><name pos:start="551:13" pos:end="551:27">tcg_gen_movi_tl</name><argument_list pos:start="551:28" pos:end="551:40">(<argument pos:start="551:29" pos:end="551:34"><expr pos:start="551:29" pos:end="551:34"><name pos:start="551:29" pos:end="551:34">cpu_T1</name></expr></argument>, <argument pos:start="551:37" pos:end="551:39"><expr pos:start="551:37" pos:end="551:39"><name pos:start="551:37" pos:end="551:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:37"><expr pos:start="553:13" pos:end="553:36"><call pos:start="553:13" pos:end="553:36"><name pos:start="553:13" pos:end="553:18">gen_op</name><argument_list pos:start="553:19" pos:end="553:36">(<argument pos:start="553:20" pos:end="553:20"><expr pos:start="553:20" pos:end="553:20"><name pos:start="553:20" pos:end="553:20">s</name></expr></argument>, <argument pos:start="553:23" pos:end="553:24"><expr pos:start="553:23" pos:end="553:24"><name pos:start="553:23" pos:end="553:24">op</name></expr></argument>, <argument pos:start="553:27" pos:end="553:28"><expr pos:start="553:27" pos:end="553:28"><name pos:start="553:27" pos:end="553:28">ot</name></expr></argument>, <argument pos:start="553:31" pos:end="553:35"><expr pos:start="553:31" pos:end="553:35"><name pos:start="553:31" pos:end="553:35">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="557:9" pos:end="557:14">break;</break>



        <comment type="block" format="doxygen" pos:start="561:9" pos:end="561:36">/**************************/</comment>

        <comment type="block" pos:start="563:9" pos:end="563:44">/* inc, dec, and other misc arith */</comment>

    <case pos:start="565:5" pos:end="565:23">case <expr pos:start="565:10" pos:end="565:22"><literal type="number" pos:start="565:10" pos:end="565:13">0x40</literal> <operator pos:start="565:15" pos:end="565:17">...</operator> <literal type="number" pos:start="565:19" pos:end="565:22">0x47</literal></expr>:</case> <comment type="block" pos:start="565:25" pos:end="565:36">/* inc Gv */</comment>

        <expr_stmt pos:start="567:9" pos:end="567:19"><expr pos:start="567:9" pos:end="567:18"><name pos:start="567:9" pos:end="567:10">ot</name> <operator pos:start="567:12" pos:end="567:12">=</operator> <name pos:start="567:14" pos:end="567:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="569:9" pos:end="569:44"><expr pos:start="569:9" pos:end="569:43"><call pos:start="569:9" pos:end="569:43"><name pos:start="569:9" pos:end="569:15">gen_inc</name><argument_list pos:start="569:16" pos:end="569:43">(<argument pos:start="569:17" pos:end="569:17"><expr pos:start="569:17" pos:end="569:17"><name pos:start="569:17" pos:end="569:17">s</name></expr></argument>, <argument pos:start="569:20" pos:end="569:21"><expr pos:start="569:20" pos:end="569:21"><name pos:start="569:20" pos:end="569:21">ot</name></expr></argument>, <argument pos:start="569:24" pos:end="569:39"><expr pos:start="569:24" pos:end="569:39"><name pos:start="569:24" pos:end="569:29">OR_EAX</name> <operator pos:start="569:31" pos:end="569:31">+</operator> <operator pos:start="569:33" pos:end="569:33">(</operator><name pos:start="569:34" pos:end="569:34">b</name> <operator pos:start="569:36" pos:end="569:36">&amp;</operator> <literal type="number" pos:start="569:38" pos:end="569:38">7</literal><operator pos:start="569:39" pos:end="569:39">)</operator></expr></argument>, <argument pos:start="569:42" pos:end="569:42"><expr pos:start="569:42" pos:end="569:42"><literal type="number" pos:start="569:42" pos:end="569:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="571:9" pos:end="571:14">break;</break>

    <case pos:start="573:5" pos:end="573:23">case <expr pos:start="573:10" pos:end="573:22"><literal type="number" pos:start="573:10" pos:end="573:13">0x48</literal> <operator pos:start="573:15" pos:end="573:17">...</operator> <literal type="number" pos:start="573:19" pos:end="573:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="573:25" pos:end="573:36">/* dec Gv */</comment>

        <expr_stmt pos:start="575:9" pos:end="575:19"><expr pos:start="575:9" pos:end="575:18"><name pos:start="575:9" pos:end="575:10">ot</name> <operator pos:start="575:12" pos:end="575:12">=</operator> <name pos:start="575:14" pos:end="575:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="577:9" pos:end="577:45"><expr pos:start="577:9" pos:end="577:44"><call pos:start="577:9" pos:end="577:44"><name pos:start="577:9" pos:end="577:15">gen_inc</name><argument_list pos:start="577:16" pos:end="577:44">(<argument pos:start="577:17" pos:end="577:17"><expr pos:start="577:17" pos:end="577:17"><name pos:start="577:17" pos:end="577:17">s</name></expr></argument>, <argument pos:start="577:20" pos:end="577:21"><expr pos:start="577:20" pos:end="577:21"><name pos:start="577:20" pos:end="577:21">ot</name></expr></argument>, <argument pos:start="577:24" pos:end="577:39"><expr pos:start="577:24" pos:end="577:39"><name pos:start="577:24" pos:end="577:29">OR_EAX</name> <operator pos:start="577:31" pos:end="577:31">+</operator> <operator pos:start="577:33" pos:end="577:33">(</operator><name pos:start="577:34" pos:end="577:34">b</name> <operator pos:start="577:36" pos:end="577:36">&amp;</operator> <literal type="number" pos:start="577:38" pos:end="577:38">7</literal><operator pos:start="577:39" pos:end="577:39">)</operator></expr></argument>, <argument pos:start="577:42" pos:end="577:43"><expr pos:start="577:42" pos:end="577:43"><operator pos:start="577:42" pos:end="577:42">-</operator><literal type="number" pos:start="577:43" pos:end="577:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="579:9" pos:end="579:14">break;</break>

    <case pos:start="581:5" pos:end="581:14">case <expr pos:start="581:10" pos:end="581:13"><literal type="number" pos:start="581:10" pos:end="581:13">0xf6</literal></expr>:</case> <comment type="block" pos:start="581:16" pos:end="581:25">/* GRP3 */</comment>

    <case pos:start="583:5" pos:end="583:14">case <expr pos:start="583:10" pos:end="583:13"><literal type="number" pos:start="583:10" pos:end="583:13">0xf7</literal></expr>:</case>

        <expr_stmt pos:start="585:9" pos:end="585:30"><expr pos:start="585:9" pos:end="585:29"><name pos:start="585:9" pos:end="585:10">ot</name> <operator pos:start="585:12" pos:end="585:12">=</operator> <call pos:start="585:14" pos:end="585:29"><name pos:start="585:14" pos:end="585:19">mo_b_d</name><argument_list pos:start="585:20" pos:end="585:29">(<argument pos:start="585:21" pos:end="585:21"><expr pos:start="585:21" pos:end="585:21"><name pos:start="585:21" pos:end="585:21">b</name></expr></argument>, <argument pos:start="585:24" pos:end="585:28"><expr pos:start="585:24" pos:end="585:28"><name pos:start="585:24" pos:end="585:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="589:9" pos:end="589:38"><expr pos:start="589:9" pos:end="589:37"><name pos:start="589:9" pos:end="589:13">modrm</name> <operator pos:start="589:15" pos:end="589:15">=</operator> <call pos:start="589:17" pos:end="589:37"><name pos:start="589:17" pos:end="589:29">x86_ldub_code</name><argument_list pos:start="589:30" pos:end="589:37">(<argument pos:start="589:31" pos:end="589:33"><expr pos:start="589:31" pos:end="589:33"><name pos:start="589:31" pos:end="589:33">env</name></expr></argument>, <argument pos:start="589:36" pos:end="589:36"><expr pos:start="589:36" pos:end="589:36"><name pos:start="589:36" pos:end="589:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="591:9" pos:end="591:31"><expr pos:start="591:9" pos:end="591:30"><name pos:start="591:9" pos:end="591:11">mod</name> <operator pos:start="591:13" pos:end="591:13">=</operator> <operator pos:start="591:15" pos:end="591:15">(</operator><name pos:start="591:16" pos:end="591:20">modrm</name> <operator pos:start="591:22" pos:end="591:23">&gt;&gt;</operator> <literal type="number" pos:start="591:25" pos:end="591:25">6</literal><operator pos:start="591:26" pos:end="591:26">)</operator> <operator pos:start="591:28" pos:end="591:28">&amp;</operator> <literal type="number" pos:start="591:30" pos:end="591:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="593:9" pos:end="593:36"><expr pos:start="593:9" pos:end="593:35"><name pos:start="593:9" pos:end="593:10">rm</name> <operator pos:start="593:12" pos:end="593:12">=</operator> <operator pos:start="593:14" pos:end="593:14">(</operator><name pos:start="593:15" pos:end="593:19">modrm</name> <operator pos:start="593:21" pos:end="593:21">&amp;</operator> <literal type="number" pos:start="593:23" pos:end="593:23">7</literal><operator pos:start="593:24" pos:end="593:24">)</operator> <operator pos:start="593:26" pos:end="593:26">|</operator> <call pos:start="593:28" pos:end="593:35"><name pos:start="593:28" pos:end="593:32">REX_B</name><argument_list pos:start="593:33" pos:end="593:35">(<argument pos:start="593:34" pos:end="593:34"><expr pos:start="593:34" pos:end="593:34"><name pos:start="593:34" pos:end="593:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="595:9" pos:end="595:30"><expr pos:start="595:9" pos:end="595:29"><name pos:start="595:9" pos:end="595:10">op</name> <operator pos:start="595:12" pos:end="595:12">=</operator> <operator pos:start="595:14" pos:end="595:14">(</operator><name pos:start="595:15" pos:end="595:19">modrm</name> <operator pos:start="595:21" pos:end="595:22">&gt;&gt;</operator> <literal type="number" pos:start="595:24" pos:end="595:24">3</literal><operator pos:start="595:25" pos:end="595:25">)</operator> <operator pos:start="595:27" pos:end="595:27">&amp;</operator> <literal type="number" pos:start="595:29" pos:end="595:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="597:9" pos:end="621:9"><if pos:start="597:9" pos:end="617:9">if <condition pos:start="597:12" pos:end="597:21">(<expr pos:start="597:13" pos:end="597:20"><name pos:start="597:13" pos:end="597:15">mod</name> <operator pos:start="597:17" pos:end="597:18">!=</operator> <literal type="number" pos:start="597:20" pos:end="597:20">3</literal></expr>)</condition> <block pos:start="597:23" pos:end="617:9">{<block_content pos:start="599:13" pos:end="615:13">

            <if_stmt pos:start="599:13" pos:end="603:13"><if pos:start="599:13" pos:end="603:13">if <condition pos:start="599:16" pos:end="599:24">(<expr pos:start="599:17" pos:end="599:23"><name pos:start="599:17" pos:end="599:18">op</name> <operator pos:start="599:20" pos:end="599:21">==</operator> <literal type="number" pos:start="599:23" pos:end="599:23">0</literal></expr>)</condition> <block pos:start="599:26" pos:end="603:13">{<block_content pos:start="601:17" pos:end="601:52">

                <expr_stmt pos:start="601:17" pos:end="601:52"><expr pos:start="601:17" pos:end="601:51"><name pos:start="601:17" pos:end="601:29"><name pos:start="601:17" pos:end="601:17">s</name><operator pos:start="601:18" pos:end="601:19">-&gt;</operator><name pos:start="601:20" pos:end="601:29">rip_offset</name></name> <operator pos:start="601:31" pos:end="601:31">=</operator> <call pos:start="601:33" pos:end="601:51"><name pos:start="601:33" pos:end="601:47">insn_const_size</name><argument_list pos:start="601:48" pos:end="601:51">(<argument pos:start="601:49" pos:end="601:50"><expr pos:start="601:49" pos:end="601:50"><name pos:start="601:49" pos:end="601:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="605:13" pos:end="605:41"><expr pos:start="605:13" pos:end="605:40"><call pos:start="605:13" pos:end="605:40"><name pos:start="605:13" pos:end="605:25">gen_lea_modrm</name><argument_list pos:start="605:26" pos:end="605:40">(<argument pos:start="605:27" pos:end="605:29"><expr pos:start="605:27" pos:end="605:29"><name pos:start="605:27" pos:end="605:29">env</name></expr></argument>, <argument pos:start="605:32" pos:end="605:32"><expr pos:start="605:32" pos:end="605:32"><name pos:start="605:32" pos:end="605:32">s</name></expr></argument>, <argument pos:start="605:35" pos:end="605:39"><expr pos:start="605:35" pos:end="605:39"><name pos:start="605:35" pos:end="605:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="607:13" pos:end="607:78">/* For those below that handle locked memory, don't load here.  */</comment>

            <if_stmt pos:start="609:13" pos:end="615:13"><if pos:start="609:13" pos:end="615:13">if <condition pos:start="609:16" pos:end="611:27">(<expr pos:start="609:17" pos:end="611:26"><operator pos:start="609:17" pos:end="609:17">!</operator><operator pos:start="609:18" pos:end="609:18">(</operator><name pos:start="609:19" pos:end="609:27"><name pos:start="609:19" pos:end="609:19">s</name><operator pos:start="609:20" pos:end="609:21">-&gt;</operator><name pos:start="609:22" pos:end="609:27">prefix</name></name> <operator pos:start="609:29" pos:end="609:29">&amp;</operator> <name pos:start="609:31" pos:end="609:41">PREFIX_LOCK</name><operator pos:start="609:42" pos:end="609:42">)</operator>

                <operator pos:start="611:17" pos:end="611:18">||</operator> <name pos:start="611:20" pos:end="611:21">op</name> <operator pos:start="611:23" pos:end="611:24">!=</operator> <literal type="number" pos:start="611:26" pos:end="611:26">2</literal></expr>)</condition> <block pos:start="611:29" pos:end="615:13">{<block_content pos:start="613:17" pos:end="613:51">

                <expr_stmt pos:start="613:17" pos:end="613:51"><expr pos:start="613:17" pos:end="613:50"><call pos:start="613:17" pos:end="613:50"><name pos:start="613:17" pos:end="613:27">gen_op_ld_v</name><argument_list pos:start="613:28" pos:end="613:50">(<argument pos:start="613:29" pos:end="613:29"><expr pos:start="613:29" pos:end="613:29"><name pos:start="613:29" pos:end="613:29">s</name></expr></argument>, <argument pos:start="613:32" pos:end="613:33"><expr pos:start="613:32" pos:end="613:33"><name pos:start="613:32" pos:end="613:33">ot</name></expr></argument>, <argument pos:start="613:36" pos:end="613:41"><expr pos:start="613:36" pos:end="613:41"><name pos:start="613:36" pos:end="613:41">cpu_T0</name></expr></argument>, <argument pos:start="613:44" pos:end="613:49"><expr pos:start="613:44" pos:end="613:49"><name pos:start="613:44" pos:end="613:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="617:11" pos:end="621:9">else <block pos:start="617:16" pos:end="621:9">{<block_content pos:start="619:13" pos:end="619:45">

            <expr_stmt pos:start="619:13" pos:end="619:45"><expr pos:start="619:13" pos:end="619:44"><call pos:start="619:13" pos:end="619:44"><name pos:start="619:13" pos:end="619:28">gen_op_mov_v_reg</name><argument_list pos:start="619:29" pos:end="619:44">(<argument pos:start="619:30" pos:end="619:31"><expr pos:start="619:30" pos:end="619:31"><name pos:start="619:30" pos:end="619:31">ot</name></expr></argument>, <argument pos:start="619:34" pos:end="619:39"><expr pos:start="619:34" pos:end="619:39"><name pos:start="619:34" pos:end="619:39">cpu_T0</name></expr></argument>, <argument pos:start="619:42" pos:end="619:43"><expr pos:start="619:42" pos:end="619:43"><name pos:start="619:42" pos:end="619:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="625:9" pos:end="1039:9">switch<condition pos:start="625:15" pos:end="625:18">(<expr pos:start="625:16" pos:end="625:17"><name pos:start="625:16" pos:end="625:17">op</name></expr>)</condition> <block pos:start="625:20" pos:end="1039:9">{<block_content pos:start="627:9" pos:end="1037:28">

        <case pos:start="627:9" pos:end="627:15">case <expr pos:start="627:14" pos:end="627:14"><literal type="number" pos:start="627:14" pos:end="627:14">0</literal></expr>:</case> <comment type="block" pos:start="627:17" pos:end="627:26">/* test */</comment>

            <expr_stmt pos:start="629:13" pos:end="629:39"><expr pos:start="629:13" pos:end="629:38"><name pos:start="629:13" pos:end="629:15">val</name> <operator pos:start="629:17" pos:end="629:17">=</operator> <call pos:start="629:19" pos:end="629:38"><name pos:start="629:19" pos:end="629:26">insn_get</name><argument_list pos:start="629:27" pos:end="629:38">(<argument pos:start="629:28" pos:end="629:30"><expr pos:start="629:28" pos:end="629:30"><name pos:start="629:28" pos:end="629:30">env</name></expr></argument>, <argument pos:start="629:33" pos:end="629:33"><expr pos:start="629:33" pos:end="629:33"><name pos:start="629:33" pos:end="629:33">s</name></expr></argument>, <argument pos:start="629:36" pos:end="629:37"><expr pos:start="629:36" pos:end="629:37"><name pos:start="629:36" pos:end="629:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="631:13" pos:end="631:41"><expr pos:start="631:13" pos:end="631:40"><call pos:start="631:13" pos:end="631:40"><name pos:start="631:13" pos:end="631:27">tcg_gen_movi_tl</name><argument_list pos:start="631:28" pos:end="631:40">(<argument pos:start="631:29" pos:end="631:34"><expr pos:start="631:29" pos:end="631:34"><name pos:start="631:29" pos:end="631:34">cpu_T1</name></expr></argument>, <argument pos:start="631:37" pos:end="631:39"><expr pos:start="631:37" pos:end="631:39"><name pos:start="631:37" pos:end="631:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="633:13" pos:end="633:36"><expr pos:start="633:13" pos:end="633:35"><call pos:start="633:13" pos:end="633:35"><name pos:start="633:13" pos:end="633:33">gen_op_testl_T0_T1_cc</name><argument_list pos:start="633:34" pos:end="633:35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="635:13" pos:end="635:44"><expr pos:start="635:13" pos:end="635:43"><call pos:start="635:13" pos:end="635:43"><name pos:start="635:13" pos:end="635:21">set_cc_op</name><argument_list pos:start="635:22" pos:end="635:43">(<argument pos:start="635:23" pos:end="635:23"><expr pos:start="635:23" pos:end="635:23"><name pos:start="635:23" pos:end="635:23">s</name></expr></argument>, <argument pos:start="635:26" pos:end="635:42"><expr pos:start="635:26" pos:end="635:42"><name pos:start="635:26" pos:end="635:37">CC_OP_LOGICB</name> <operator pos:start="635:39" pos:end="635:39">+</operator> <name pos:start="635:41" pos:end="635:42">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="637:13" pos:end="637:18">break;</break>

        <case pos:start="639:9" pos:end="639:15">case <expr pos:start="639:14" pos:end="639:14"><literal type="number" pos:start="639:14" pos:end="639:14">2</literal></expr>:</case> <comment type="block" pos:start="639:17" pos:end="639:25">/* not */</comment>

            <if_stmt pos:start="641:13" pos:end="669:13"><if pos:start="641:13" pos:end="655:13">if <condition pos:start="641:16" pos:end="641:40">(<expr pos:start="641:17" pos:end="641:39"><name pos:start="641:17" pos:end="641:25"><name pos:start="641:17" pos:end="641:17">s</name><operator pos:start="641:18" pos:end="641:19">-&gt;</operator><name pos:start="641:20" pos:end="641:25">prefix</name></name> <operator pos:start="641:27" pos:end="641:27">&amp;</operator> <name pos:start="641:29" pos:end="641:39">PREFIX_LOCK</name></expr>)</condition> <block pos:start="641:42" pos:end="655:13">{<block_content pos:start="643:17" pos:end="653:70">

                <if_stmt pos:start="643:17" pos:end="647:17"><if pos:start="643:17" pos:end="647:17">if <condition pos:start="643:20" pos:end="643:29">(<expr pos:start="643:21" pos:end="643:28"><name pos:start="643:21" pos:end="643:23">mod</name> <operator pos:start="643:25" pos:end="643:26">==</operator> <literal type="number" pos:start="643:28" pos:end="643:28">3</literal></expr>)</condition> <block pos:start="643:31" pos:end="647:17">{<block_content pos:start="645:21" pos:end="645:36">

                    <goto pos:start="645:21" pos:end="645:36">goto <name pos:start="645:26" pos:end="645:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="649:17" pos:end="649:44"><expr pos:start="649:17" pos:end="649:43"><call pos:start="649:17" pos:end="649:43"><name pos:start="649:17" pos:end="649:31">tcg_gen_movi_tl</name><argument_list pos:start="649:32" pos:end="649:43">(<argument pos:start="649:33" pos:end="649:38"><expr pos:start="649:33" pos:end="649:38"><name pos:start="649:33" pos:end="649:38">cpu_T0</name></expr></argument>, <argument pos:start="649:41" pos:end="649:42"><expr pos:start="649:41" pos:end="649:42"><operator pos:start="649:41" pos:end="649:41">~</operator><literal type="number" pos:start="649:42" pos:end="649:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="651:17" pos:end="653:70"><expr pos:start="651:17" pos:end="653:69"><call pos:start="651:17" pos:end="653:69"><name pos:start="651:17" pos:end="651:43">tcg_gen_atomic_xor_fetch_tl</name><argument_list pos:start="651:44" pos:end="653:69">(<argument pos:start="651:45" pos:end="651:50"><expr pos:start="651:45" pos:end="651:50"><name pos:start="651:45" pos:end="651:50">cpu_T0</name></expr></argument>, <argument pos:start="651:53" pos:end="651:58"><expr pos:start="651:53" pos:end="651:58"><name pos:start="651:53" pos:end="651:58">cpu_A0</name></expr></argument>, <argument pos:start="651:61" pos:end="651:66"><expr pos:start="651:61" pos:end="651:66"><name pos:start="651:61" pos:end="651:66">cpu_T0</name></expr></argument>,

                                            <argument pos:start="653:45" pos:end="653:56"><expr pos:start="653:45" pos:end="653:56"><name pos:start="653:45" pos:end="653:56"><name pos:start="653:45" pos:end="653:45">s</name><operator pos:start="653:46" pos:end="653:47">-&gt;</operator><name pos:start="653:48" pos:end="653:56">mem_index</name></name></expr></argument>, <argument pos:start="653:59" pos:end="653:68"><expr pos:start="653:59" pos:end="653:68"><name pos:start="653:59" pos:end="653:60">ot</name> <operator pos:start="653:62" pos:end="653:62">|</operator> <name pos:start="653:64" pos:end="653:68">MO_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="655:15" pos:end="669:13">else <block pos:start="655:20" pos:end="669:13">{<block_content pos:start="657:17" pos:end="667:17">

                <expr_stmt pos:start="657:17" pos:end="657:47"><expr pos:start="657:17" pos:end="657:46"><call pos:start="657:17" pos:end="657:46"><name pos:start="657:17" pos:end="657:30">tcg_gen_not_tl</name><argument_list pos:start="657:31" pos:end="657:46">(<argument pos:start="657:32" pos:end="657:37"><expr pos:start="657:32" pos:end="657:37"><name pos:start="657:32" pos:end="657:37">cpu_T0</name></expr></argument>, <argument pos:start="657:40" pos:end="657:45"><expr pos:start="657:40" pos:end="657:45"><name pos:start="657:40" pos:end="657:45">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="659:17" pos:end="667:17"><if pos:start="659:17" pos:end="663:17">if <condition pos:start="659:20" pos:end="659:29">(<expr pos:start="659:21" pos:end="659:28"><name pos:start="659:21" pos:end="659:23">mod</name> <operator pos:start="659:25" pos:end="659:26">!=</operator> <literal type="number" pos:start="659:28" pos:end="659:28">3</literal></expr>)</condition> <block pos:start="659:31" pos:end="663:17">{<block_content pos:start="661:21" pos:end="661:55">

                    <expr_stmt pos:start="661:21" pos:end="661:55"><expr pos:start="661:21" pos:end="661:54"><call pos:start="661:21" pos:end="661:54"><name pos:start="661:21" pos:end="661:31">gen_op_st_v</name><argument_list pos:start="661:32" pos:end="661:54">(<argument pos:start="661:33" pos:end="661:33"><expr pos:start="661:33" pos:end="661:33"><name pos:start="661:33" pos:end="661:33">s</name></expr></argument>, <argument pos:start="661:36" pos:end="661:37"><expr pos:start="661:36" pos:end="661:37"><name pos:start="661:36" pos:end="661:37">ot</name></expr></argument>, <argument pos:start="661:40" pos:end="661:45"><expr pos:start="661:40" pos:end="661:45"><name pos:start="661:40" pos:end="661:45">cpu_T0</name></expr></argument>, <argument pos:start="661:48" pos:end="661:53"><expr pos:start="661:48" pos:end="661:53"><name pos:start="661:48" pos:end="661:53">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="663:19" pos:end="667:17">else <block pos:start="663:24" pos:end="667:17">{<block_content pos:start="665:21" pos:end="665:53">

                    <expr_stmt pos:start="665:21" pos:end="665:53"><expr pos:start="665:21" pos:end="665:52"><call pos:start="665:21" pos:end="665:52"><name pos:start="665:21" pos:end="665:36">gen_op_mov_reg_v</name><argument_list pos:start="665:37" pos:end="665:52">(<argument pos:start="665:38" pos:end="665:39"><expr pos:start="665:38" pos:end="665:39"><name pos:start="665:38" pos:end="665:39">ot</name></expr></argument>, <argument pos:start="665:42" pos:end="665:43"><expr pos:start="665:42" pos:end="665:43"><name pos:start="665:42" pos:end="665:43">rm</name></expr></argument>, <argument pos:start="665:46" pos:end="665:51"><expr pos:start="665:46" pos:end="665:51"><name pos:start="665:46" pos:end="665:51">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="671:13" pos:end="671:18">break;</break>

        <case pos:start="673:9" pos:end="673:15">case <expr pos:start="673:14" pos:end="673:14"><literal type="number" pos:start="673:14" pos:end="673:14">3</literal></expr>:</case> <comment type="block" pos:start="673:17" pos:end="673:25">/* neg */</comment>

            <if_stmt pos:start="675:13" pos:end="745:13"><if pos:start="675:13" pos:end="731:13">if <condition pos:start="675:16" pos:end="675:40">(<expr pos:start="675:17" pos:end="675:39"><name pos:start="675:17" pos:end="675:25"><name pos:start="675:17" pos:end="675:17">s</name><operator pos:start="675:18" pos:end="675:19">-&gt;</operator><name pos:start="675:20" pos:end="675:25">prefix</name></name> <operator pos:start="675:27" pos:end="675:27">&amp;</operator> <name pos:start="675:29" pos:end="675:39">PREFIX_LOCK</name></expr>)</condition> <block pos:start="675:42" pos:end="731:13">{<block_content pos:start="677:17" pos:end="729:34">

                <decl_stmt pos:start="677:17" pos:end="677:33"><decl pos:start="677:17" pos:end="677:32"><type pos:start="677:17" pos:end="677:26"><name pos:start="677:17" pos:end="677:24">TCGLabel</name> <modifier pos:start="677:26" pos:end="677:26">*</modifier></type><name pos:start="677:27" pos:end="677:32">label1</name></decl>;</decl_stmt>

                <decl_stmt pos:start="679:17" pos:end="679:36"><decl pos:start="679:17" pos:end="679:23"><type pos:start="679:17" pos:end="679:20"><name pos:start="679:17" pos:end="679:20">TCGv</name></type> <name pos:start="679:22" pos:end="679:23">a0</name></decl>, <decl pos:start="679:26" pos:end="679:27"><type ref="prev" pos:start="679:17" pos:end="679:20"/><name pos:start="679:26" pos:end="679:27">t0</name></decl>, <decl pos:start="679:30" pos:end="679:31"><type ref="prev" pos:start="679:17" pos:end="679:20"/><name pos:start="679:30" pos:end="679:31">t1</name></decl>, <decl pos:start="679:34" pos:end="679:35"><type ref="prev" pos:start="679:17" pos:end="679:20"/><name pos:start="679:34" pos:end="679:35">t2</name></decl>;</decl_stmt>



                <if_stmt pos:start="683:17" pos:end="687:17"><if pos:start="683:17" pos:end="687:17">if <condition pos:start="683:20" pos:end="683:29">(<expr pos:start="683:21" pos:end="683:28"><name pos:start="683:21" pos:end="683:23">mod</name> <operator pos:start="683:25" pos:end="683:26">==</operator> <literal type="number" pos:start="683:28" pos:end="683:28">3</literal></expr>)</condition> <block pos:start="683:31" pos:end="687:17">{<block_content pos:start="685:21" pos:end="685:36">

                    <goto pos:start="685:21" pos:end="685:36">goto <name pos:start="685:26" pos:end="685:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:42"><expr pos:start="689:17" pos:end="689:41"><name pos:start="689:17" pos:end="689:18">a0</name> <operator pos:start="689:20" pos:end="689:20">=</operator> <call pos:start="689:22" pos:end="689:41"><name pos:start="689:22" pos:end="689:39">tcg_temp_local_new</name><argument_list pos:start="689:40" pos:end="689:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="691:17" pos:end="691:42"><expr pos:start="691:17" pos:end="691:41"><name pos:start="691:17" pos:end="691:18">t0</name> <operator pos:start="691:20" pos:end="691:20">=</operator> <call pos:start="691:22" pos:end="691:41"><name pos:start="691:22" pos:end="691:39">tcg_temp_local_new</name><argument_list pos:start="691:40" pos:end="691:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="693:17" pos:end="693:41"><expr pos:start="693:17" pos:end="693:40"><name pos:start="693:17" pos:end="693:22">label1</name> <operator pos:start="693:24" pos:end="693:24">=</operator> <call pos:start="693:26" pos:end="693:40"><name pos:start="693:26" pos:end="693:38">gen_new_label</name><argument_list pos:start="693:39" pos:end="693:40">()</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="697:17" pos:end="697:43"><expr pos:start="697:17" pos:end="697:42"><call pos:start="697:17" pos:end="697:42"><name pos:start="697:17" pos:end="697:30">tcg_gen_mov_tl</name><argument_list pos:start="697:31" pos:end="697:42">(<argument pos:start="697:32" pos:end="697:33"><expr pos:start="697:32" pos:end="697:33"><name pos:start="697:32" pos:end="697:33">a0</name></expr></argument>, <argument pos:start="697:36" pos:end="697:41"><expr pos:start="697:36" pos:end="697:41"><name pos:start="697:36" pos:end="697:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="699:17" pos:end="699:43"><expr pos:start="699:17" pos:end="699:42"><call pos:start="699:17" pos:end="699:42"><name pos:start="699:17" pos:end="699:30">tcg_gen_mov_tl</name><argument_list pos:start="699:31" pos:end="699:42">(<argument pos:start="699:32" pos:end="699:33"><expr pos:start="699:32" pos:end="699:33"><name pos:start="699:32" pos:end="699:33">t0</name></expr></argument>, <argument pos:start="699:36" pos:end="699:41"><expr pos:start="699:36" pos:end="699:41"><name pos:start="699:36" pos:end="699:41">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="703:17" pos:end="703:38"><expr pos:start="703:17" pos:end="703:37"><call pos:start="703:17" pos:end="703:37"><name pos:start="703:17" pos:end="703:29">gen_set_label</name><argument_list pos:start="703:30" pos:end="703:37">(<argument pos:start="703:31" pos:end="703:36"><expr pos:start="703:31" pos:end="703:36"><name pos:start="703:31" pos:end="703:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="705:17" pos:end="705:36"><expr pos:start="705:17" pos:end="705:35"><name pos:start="705:17" pos:end="705:18">t1</name> <operator pos:start="705:20" pos:end="705:20">=</operator> <call pos:start="705:22" pos:end="705:35"><name pos:start="705:22" pos:end="705:33">tcg_temp_new</name><argument_list pos:start="705:34" pos:end="705:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="707:17" pos:end="707:36"><expr pos:start="707:17" pos:end="707:35"><name pos:start="707:17" pos:end="707:18">t2</name> <operator pos:start="707:20" pos:end="707:20">=</operator> <call pos:start="707:22" pos:end="707:35"><name pos:start="707:22" pos:end="707:33">tcg_temp_new</name><argument_list pos:start="707:34" pos:end="707:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="709:17" pos:end="709:39"><expr pos:start="709:17" pos:end="709:38"><call pos:start="709:17" pos:end="709:38"><name pos:start="709:17" pos:end="709:30">tcg_gen_mov_tl</name><argument_list pos:start="709:31" pos:end="709:38">(<argument pos:start="709:32" pos:end="709:33"><expr pos:start="709:32" pos:end="709:33"><name pos:start="709:32" pos:end="709:33">t2</name></expr></argument>, <argument pos:start="709:36" pos:end="709:37"><expr pos:start="709:36" pos:end="709:37"><name pos:start="709:36" pos:end="709:37">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="711:17" pos:end="711:39"><expr pos:start="711:17" pos:end="711:38"><call pos:start="711:17" pos:end="711:38"><name pos:start="711:17" pos:end="711:30">tcg_gen_neg_tl</name><argument_list pos:start="711:31" pos:end="711:38">(<argument pos:start="711:32" pos:end="711:33"><expr pos:start="711:32" pos:end="711:33"><name pos:start="711:32" pos:end="711:33">t1</name></expr></argument>, <argument pos:start="711:36" pos:end="711:37"><expr pos:start="711:36" pos:end="711:37"><name pos:start="711:36" pos:end="711:37">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="713:17" pos:end="715:68"><expr pos:start="713:17" pos:end="715:67"><call pos:start="713:17" pos:end="715:67"><name pos:start="713:17" pos:end="713:41">tcg_gen_atomic_cmpxchg_tl</name><argument_list pos:start="713:42" pos:end="715:67">(<argument pos:start="713:43" pos:end="713:44"><expr pos:start="713:43" pos:end="713:44"><name pos:start="713:43" pos:end="713:44">t0</name></expr></argument>, <argument pos:start="713:47" pos:end="713:48"><expr pos:start="713:47" pos:end="713:48"><name pos:start="713:47" pos:end="713:48">a0</name></expr></argument>, <argument pos:start="713:51" pos:end="713:52"><expr pos:start="713:51" pos:end="713:52"><name pos:start="713:51" pos:end="713:52">t0</name></expr></argument>, <argument pos:start="713:55" pos:end="713:56"><expr pos:start="713:55" pos:end="713:56"><name pos:start="713:55" pos:end="713:56">t1</name></expr></argument>,

                                          <argument pos:start="715:43" pos:end="715:54"><expr pos:start="715:43" pos:end="715:54"><name pos:start="715:43" pos:end="715:54"><name pos:start="715:43" pos:end="715:43">s</name><operator pos:start="715:44" pos:end="715:45">-&gt;</operator><name pos:start="715:46" pos:end="715:54">mem_index</name></name></expr></argument>, <argument pos:start="715:57" pos:end="715:66"><expr pos:start="715:57" pos:end="715:66"><name pos:start="715:57" pos:end="715:58">ot</name> <operator pos:start="715:60" pos:end="715:60">|</operator> <name pos:start="715:62" pos:end="715:66">MO_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="717:17" pos:end="717:34"><expr pos:start="717:17" pos:end="717:33"><call pos:start="717:17" pos:end="717:33"><name pos:start="717:17" pos:end="717:29">tcg_temp_free</name><argument_list pos:start="717:30" pos:end="717:33">(<argument pos:start="717:31" pos:end="717:32"><expr pos:start="717:31" pos:end="717:32"><name pos:start="717:31" pos:end="717:32">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="719:17" pos:end="719:63"><expr pos:start="719:17" pos:end="719:62"><call pos:start="719:17" pos:end="719:62"><name pos:start="719:17" pos:end="719:33">tcg_gen_brcond_tl</name><argument_list pos:start="719:34" pos:end="719:62">(<argument pos:start="719:35" pos:end="719:45"><expr pos:start="719:35" pos:end="719:45"><name pos:start="719:35" pos:end="719:45">TCG_COND_NE</name></expr></argument>, <argument pos:start="719:48" pos:end="719:49"><expr pos:start="719:48" pos:end="719:49"><name pos:start="719:48" pos:end="719:49">t0</name></expr></argument>, <argument pos:start="719:52" pos:end="719:53"><expr pos:start="719:52" pos:end="719:53"><name pos:start="719:52" pos:end="719:53">t2</name></expr></argument>, <argument pos:start="719:56" pos:end="719:61"><expr pos:start="719:56" pos:end="719:61"><name pos:start="719:56" pos:end="719:61">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="723:17" pos:end="723:34"><expr pos:start="723:17" pos:end="723:33"><call pos:start="723:17" pos:end="723:33"><name pos:start="723:17" pos:end="723:29">tcg_temp_free</name><argument_list pos:start="723:30" pos:end="723:33">(<argument pos:start="723:31" pos:end="723:32"><expr pos:start="723:31" pos:end="723:32"><name pos:start="723:31" pos:end="723:32">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="725:17" pos:end="725:34"><expr pos:start="725:17" pos:end="725:33"><call pos:start="725:17" pos:end="725:33"><name pos:start="725:17" pos:end="725:29">tcg_temp_free</name><argument_list pos:start="725:30" pos:end="725:33">(<argument pos:start="725:31" pos:end="725:32"><expr pos:start="725:31" pos:end="725:32"><name pos:start="725:31" pos:end="725:32">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="727:17" pos:end="727:43"><expr pos:start="727:17" pos:end="727:42"><call pos:start="727:17" pos:end="727:42"><name pos:start="727:17" pos:end="727:30">tcg_gen_mov_tl</name><argument_list pos:start="727:31" pos:end="727:42">(<argument pos:start="727:32" pos:end="727:37"><expr pos:start="727:32" pos:end="727:37"><name pos:start="727:32" pos:end="727:37">cpu_T0</name></expr></argument>, <argument pos:start="727:40" pos:end="727:41"><expr pos:start="727:40" pos:end="727:41"><name pos:start="727:40" pos:end="727:41">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="729:17" pos:end="729:34"><expr pos:start="729:17" pos:end="729:33"><call pos:start="729:17" pos:end="729:33"><name pos:start="729:17" pos:end="729:29">tcg_temp_free</name><argument_list pos:start="729:30" pos:end="729:33">(<argument pos:start="729:31" pos:end="729:32"><expr pos:start="729:31" pos:end="729:32"><name pos:start="729:31" pos:end="729:32">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="731:15" pos:end="745:13">else <block pos:start="731:20" pos:end="745:13">{<block_content pos:start="733:17" pos:end="743:17">

                <expr_stmt pos:start="733:17" pos:end="733:47"><expr pos:start="733:17" pos:end="733:46"><call pos:start="733:17" pos:end="733:46"><name pos:start="733:17" pos:end="733:30">tcg_gen_neg_tl</name><argument_list pos:start="733:31" pos:end="733:46">(<argument pos:start="733:32" pos:end="733:37"><expr pos:start="733:32" pos:end="733:37"><name pos:start="733:32" pos:end="733:37">cpu_T0</name></expr></argument>, <argument pos:start="733:40" pos:end="733:45"><expr pos:start="733:40" pos:end="733:45"><name pos:start="733:40" pos:end="733:45">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="735:17" pos:end="743:17"><if pos:start="735:17" pos:end="739:17">if <condition pos:start="735:20" pos:end="735:29">(<expr pos:start="735:21" pos:end="735:28"><name pos:start="735:21" pos:end="735:23">mod</name> <operator pos:start="735:25" pos:end="735:26">!=</operator> <literal type="number" pos:start="735:28" pos:end="735:28">3</literal></expr>)</condition> <block pos:start="735:31" pos:end="739:17">{<block_content pos:start="737:21" pos:end="737:55">

                    <expr_stmt pos:start="737:21" pos:end="737:55"><expr pos:start="737:21" pos:end="737:54"><call pos:start="737:21" pos:end="737:54"><name pos:start="737:21" pos:end="737:31">gen_op_st_v</name><argument_list pos:start="737:32" pos:end="737:54">(<argument pos:start="737:33" pos:end="737:33"><expr pos:start="737:33" pos:end="737:33"><name pos:start="737:33" pos:end="737:33">s</name></expr></argument>, <argument pos:start="737:36" pos:end="737:37"><expr pos:start="737:36" pos:end="737:37"><name pos:start="737:36" pos:end="737:37">ot</name></expr></argument>, <argument pos:start="737:40" pos:end="737:45"><expr pos:start="737:40" pos:end="737:45"><name pos:start="737:40" pos:end="737:45">cpu_T0</name></expr></argument>, <argument pos:start="737:48" pos:end="737:53"><expr pos:start="737:48" pos:end="737:53"><name pos:start="737:48" pos:end="737:53">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="739:19" pos:end="743:17">else <block pos:start="739:24" pos:end="743:17">{<block_content pos:start="741:21" pos:end="741:53">

                    <expr_stmt pos:start="741:21" pos:end="741:53"><expr pos:start="741:21" pos:end="741:52"><call pos:start="741:21" pos:end="741:52"><name pos:start="741:21" pos:end="741:36">gen_op_mov_reg_v</name><argument_list pos:start="741:37" pos:end="741:52">(<argument pos:start="741:38" pos:end="741:39"><expr pos:start="741:38" pos:end="741:39"><name pos:start="741:38" pos:end="741:39">ot</name></expr></argument>, <argument pos:start="741:42" pos:end="741:43"><expr pos:start="741:42" pos:end="741:43"><name pos:start="741:42" pos:end="741:43">rm</name></expr></argument>, <argument pos:start="741:46" pos:end="741:51"><expr pos:start="741:46" pos:end="741:51"><name pos:start="741:46" pos:end="741:51">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="747:13" pos:end="747:35"><expr pos:start="747:13" pos:end="747:34"><call pos:start="747:13" pos:end="747:34"><name pos:start="747:13" pos:end="747:32">gen_op_update_neg_cc</name><argument_list pos:start="747:33" pos:end="747:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="749:13" pos:end="749:42"><expr pos:start="749:13" pos:end="749:41"><call pos:start="749:13" pos:end="749:41"><name pos:start="749:13" pos:end="749:21">set_cc_op</name><argument_list pos:start="749:22" pos:end="749:41">(<argument pos:start="749:23" pos:end="749:23"><expr pos:start="749:23" pos:end="749:23"><name pos:start="749:23" pos:end="749:23">s</name></expr></argument>, <argument pos:start="749:26" pos:end="749:40"><expr pos:start="749:26" pos:end="749:40"><name pos:start="749:26" pos:end="749:35">CC_OP_SUBB</name> <operator pos:start="749:37" pos:end="749:37">+</operator> <name pos:start="749:39" pos:end="749:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="751:13" pos:end="751:18">break;</break>

        <case pos:start="753:9" pos:end="753:15">case <expr pos:start="753:14" pos:end="753:14"><literal type="number" pos:start="753:14" pos:end="753:14">4</literal></expr>:</case> <comment type="block" pos:start="753:17" pos:end="753:25">/* mul */</comment>

            <switch pos:start="755:13" pos:end="847:13">switch<condition pos:start="755:19" pos:end="755:22">(<expr pos:start="755:20" pos:end="755:21"><name pos:start="755:20" pos:end="755:21">ot</name></expr>)</condition> <block pos:start="755:24" pos:end="847:13">{<block_content pos:start="757:13" pos:end="846:0">

            <case pos:start="757:13" pos:end="757:22">case <expr pos:start="757:18" pos:end="757:21"><name pos:start="757:18" pos:end="757:21">MO_8</name></expr>:</case>

                <expr_stmt pos:start="759:17" pos:end="759:54"><expr pos:start="759:17" pos:end="759:53"><call pos:start="759:17" pos:end="759:53"><name pos:start="759:17" pos:end="759:32">gen_op_mov_v_reg</name><argument_list pos:start="759:33" pos:end="759:53">(<argument pos:start="759:34" pos:end="759:37"><expr pos:start="759:34" pos:end="759:37"><name pos:start="759:34" pos:end="759:37">MO_8</name></expr></argument>, <argument pos:start="759:40" pos:end="759:45"><expr pos:start="759:40" pos:end="759:45"><name pos:start="759:40" pos:end="759:45">cpu_T1</name></expr></argument>, <argument pos:start="759:48" pos:end="759:52"><expr pos:start="759:48" pos:end="759:52"><name pos:start="759:48" pos:end="759:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="761:17" pos:end="761:49"><expr pos:start="761:17" pos:end="761:48"><call pos:start="761:17" pos:end="761:48"><name pos:start="761:17" pos:end="761:32">tcg_gen_ext8u_tl</name><argument_list pos:start="761:33" pos:end="761:48">(<argument pos:start="761:34" pos:end="761:39"><expr pos:start="761:34" pos:end="761:39"><name pos:start="761:34" pos:end="761:39">cpu_T0</name></expr></argument>, <argument pos:start="761:42" pos:end="761:47"><expr pos:start="761:42" pos:end="761:47"><name pos:start="761:42" pos:end="761:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="763:17" pos:end="763:49"><expr pos:start="763:17" pos:end="763:48"><call pos:start="763:17" pos:end="763:48"><name pos:start="763:17" pos:end="763:32">tcg_gen_ext8u_tl</name><argument_list pos:start="763:33" pos:end="763:48">(<argument pos:start="763:34" pos:end="763:39"><expr pos:start="763:34" pos:end="763:39"><name pos:start="763:34" pos:end="763:39">cpu_T1</name></expr></argument>, <argument pos:start="763:42" pos:end="763:47"><expr pos:start="763:42" pos:end="763:47"><name pos:start="763:42" pos:end="763:47">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="765:17" pos:end="765:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="767:17" pos:end="767:55"><expr pos:start="767:17" pos:end="767:54"><call pos:start="767:17" pos:end="767:54"><name pos:start="767:17" pos:end="767:30">tcg_gen_mul_tl</name><argument_list pos:start="767:31" pos:end="767:54">(<argument pos:start="767:32" pos:end="767:37"><expr pos:start="767:32" pos:end="767:37"><name pos:start="767:32" pos:end="767:37">cpu_T0</name></expr></argument>, <argument pos:start="767:40" pos:end="767:45"><expr pos:start="767:40" pos:end="767:45"><name pos:start="767:40" pos:end="767:45">cpu_T0</name></expr></argument>, <argument pos:start="767:48" pos:end="767:53"><expr pos:start="767:48" pos:end="767:53"><name pos:start="767:48" pos:end="767:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="769:17" pos:end="769:55"><expr pos:start="769:17" pos:end="769:54"><call pos:start="769:17" pos:end="769:54"><name pos:start="769:17" pos:end="769:32">gen_op_mov_reg_v</name><argument_list pos:start="769:33" pos:end="769:54">(<argument pos:start="769:34" pos:end="769:38"><expr pos:start="769:34" pos:end="769:38"><name pos:start="769:34" pos:end="769:38">MO_16</name></expr></argument>, <argument pos:start="769:41" pos:end="769:45"><expr pos:start="769:41" pos:end="769:45"><name pos:start="769:41" pos:end="769:45">R_EAX</name></expr></argument>, <argument pos:start="769:48" pos:end="769:53"><expr pos:start="769:48" pos:end="769:53"><name pos:start="769:48" pos:end="769:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="771:17" pos:end="771:51"><expr pos:start="771:17" pos:end="771:50"><call pos:start="771:17" pos:end="771:50"><name pos:start="771:17" pos:end="771:30">tcg_gen_mov_tl</name><argument_list pos:start="771:31" pos:end="771:50">(<argument pos:start="771:32" pos:end="771:41"><expr pos:start="771:32" pos:end="771:41"><name pos:start="771:32" pos:end="771:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="771:44" pos:end="771:49"><expr pos:start="771:44" pos:end="771:49"><name pos:start="771:44" pos:end="771:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="773:17" pos:end="773:60"><expr pos:start="773:17" pos:end="773:59"><call pos:start="773:17" pos:end="773:59"><name pos:start="773:17" pos:end="773:31">tcg_gen_andi_tl</name><argument_list pos:start="773:32" pos:end="773:59">(<argument pos:start="773:33" pos:end="773:42"><expr pos:start="773:33" pos:end="773:42"><name pos:start="773:33" pos:end="773:42">cpu_cc_src</name></expr></argument>, <argument pos:start="773:45" pos:end="773:50"><expr pos:start="773:45" pos:end="773:50"><name pos:start="773:45" pos:end="773:50">cpu_T0</name></expr></argument>, <argument pos:start="773:53" pos:end="773:58"><expr pos:start="773:53" pos:end="773:58"><literal type="number" pos:start="773:53" pos:end="773:58">0xff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="775:17" pos:end="775:41"><expr pos:start="775:17" pos:end="775:40"><call pos:start="775:17" pos:end="775:40"><name pos:start="775:17" pos:end="775:25">set_cc_op</name><argument_list pos:start="775:26" pos:end="775:40">(<argument pos:start="775:27" pos:end="775:27"><expr pos:start="775:27" pos:end="775:27"><name pos:start="775:27" pos:end="775:27">s</name></expr></argument>, <argument pos:start="775:30" pos:end="775:39"><expr pos:start="775:30" pos:end="775:39"><name pos:start="775:30" pos:end="775:39">CC_OP_MULB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="777:17" pos:end="777:22">break;</break>

            <case pos:start="779:13" pos:end="779:23">case <expr pos:start="779:18" pos:end="779:22"><name pos:start="779:18" pos:end="779:22">MO_16</name></expr>:</case>

                <expr_stmt pos:start="781:17" pos:end="781:55"><expr pos:start="781:17" pos:end="781:54"><call pos:start="781:17" pos:end="781:54"><name pos:start="781:17" pos:end="781:32">gen_op_mov_v_reg</name><argument_list pos:start="781:33" pos:end="781:54">(<argument pos:start="781:34" pos:end="781:38"><expr pos:start="781:34" pos:end="781:38"><name pos:start="781:34" pos:end="781:38">MO_16</name></expr></argument>, <argument pos:start="781:41" pos:end="781:46"><expr pos:start="781:41" pos:end="781:46"><name pos:start="781:41" pos:end="781:46">cpu_T1</name></expr></argument>, <argument pos:start="781:49" pos:end="781:53"><expr pos:start="781:49" pos:end="781:53"><name pos:start="781:49" pos:end="781:53">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="783:17" pos:end="783:50"><expr pos:start="783:17" pos:end="783:49"><call pos:start="783:17" pos:end="783:49"><name pos:start="783:17" pos:end="783:33">tcg_gen_ext16u_tl</name><argument_list pos:start="783:34" pos:end="783:49">(<argument pos:start="783:35" pos:end="783:40"><expr pos:start="783:35" pos:end="783:40"><name pos:start="783:35" pos:end="783:40">cpu_T0</name></expr></argument>, <argument pos:start="783:43" pos:end="783:48"><expr pos:start="783:43" pos:end="783:48"><name pos:start="783:43" pos:end="783:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="785:17" pos:end="785:50"><expr pos:start="785:17" pos:end="785:49"><call pos:start="785:17" pos:end="785:49"><name pos:start="785:17" pos:end="785:33">tcg_gen_ext16u_tl</name><argument_list pos:start="785:34" pos:end="785:49">(<argument pos:start="785:35" pos:end="785:40"><expr pos:start="785:35" pos:end="785:40"><name pos:start="785:35" pos:end="785:40">cpu_T1</name></expr></argument>, <argument pos:start="785:43" pos:end="785:48"><expr pos:start="785:43" pos:end="785:48"><name pos:start="785:43" pos:end="785:48">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="787:17" pos:end="787:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="789:17" pos:end="789:55"><expr pos:start="789:17" pos:end="789:54"><call pos:start="789:17" pos:end="789:54"><name pos:start="789:17" pos:end="789:30">tcg_gen_mul_tl</name><argument_list pos:start="789:31" pos:end="789:54">(<argument pos:start="789:32" pos:end="789:37"><expr pos:start="789:32" pos:end="789:37"><name pos:start="789:32" pos:end="789:37">cpu_T0</name></expr></argument>, <argument pos:start="789:40" pos:end="789:45"><expr pos:start="789:40" pos:end="789:45"><name pos:start="789:40" pos:end="789:45">cpu_T0</name></expr></argument>, <argument pos:start="789:48" pos:end="789:53"><expr pos:start="789:48" pos:end="789:53"><name pos:start="789:48" pos:end="789:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="791:17" pos:end="791:55"><expr pos:start="791:17" pos:end="791:54"><call pos:start="791:17" pos:end="791:54"><name pos:start="791:17" pos:end="791:32">gen_op_mov_reg_v</name><argument_list pos:start="791:33" pos:end="791:54">(<argument pos:start="791:34" pos:end="791:38"><expr pos:start="791:34" pos:end="791:38"><name pos:start="791:34" pos:end="791:38">MO_16</name></expr></argument>, <argument pos:start="791:41" pos:end="791:45"><expr pos:start="791:41" pos:end="791:45"><name pos:start="791:41" pos:end="791:45">R_EAX</name></expr></argument>, <argument pos:start="791:48" pos:end="791:53"><expr pos:start="791:48" pos:end="791:53"><name pos:start="791:48" pos:end="791:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="793:17" pos:end="793:51"><expr pos:start="793:17" pos:end="793:50"><call pos:start="793:17" pos:end="793:50"><name pos:start="793:17" pos:end="793:30">tcg_gen_mov_tl</name><argument_list pos:start="793:31" pos:end="793:50">(<argument pos:start="793:32" pos:end="793:41"><expr pos:start="793:32" pos:end="793:41"><name pos:start="793:32" pos:end="793:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="793:44" pos:end="793:49"><expr pos:start="793:44" pos:end="793:49"><name pos:start="793:44" pos:end="793:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="795:17" pos:end="795:52"><expr pos:start="795:17" pos:end="795:51"><call pos:start="795:17" pos:end="795:51"><name pos:start="795:17" pos:end="795:31">tcg_gen_shri_tl</name><argument_list pos:start="795:32" pos:end="795:51">(<argument pos:start="795:33" pos:end="795:38"><expr pos:start="795:33" pos:end="795:38"><name pos:start="795:33" pos:end="795:38">cpu_T0</name></expr></argument>, <argument pos:start="795:41" pos:end="795:46"><expr pos:start="795:41" pos:end="795:46"><name pos:start="795:41" pos:end="795:46">cpu_T0</name></expr></argument>, <argument pos:start="795:49" pos:end="795:50"><expr pos:start="795:49" pos:end="795:50"><literal type="number" pos:start="795:49" pos:end="795:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="797:17" pos:end="797:55"><expr pos:start="797:17" pos:end="797:54"><call pos:start="797:17" pos:end="797:54"><name pos:start="797:17" pos:end="797:32">gen_op_mov_reg_v</name><argument_list pos:start="797:33" pos:end="797:54">(<argument pos:start="797:34" pos:end="797:38"><expr pos:start="797:34" pos:end="797:38"><name pos:start="797:34" pos:end="797:38">MO_16</name></expr></argument>, <argument pos:start="797:41" pos:end="797:45"><expr pos:start="797:41" pos:end="797:45"><name pos:start="797:41" pos:end="797:45">R_EDX</name></expr></argument>, <argument pos:start="797:48" pos:end="797:53"><expr pos:start="797:48" pos:end="797:53"><name pos:start="797:48" pos:end="797:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="799:17" pos:end="799:51"><expr pos:start="799:17" pos:end="799:50"><call pos:start="799:17" pos:end="799:50"><name pos:start="799:17" pos:end="799:30">tcg_gen_mov_tl</name><argument_list pos:start="799:31" pos:end="799:50">(<argument pos:start="799:32" pos:end="799:41"><expr pos:start="799:32" pos:end="799:41"><name pos:start="799:32" pos:end="799:41">cpu_cc_src</name></expr></argument>, <argument pos:start="799:44" pos:end="799:49"><expr pos:start="799:44" pos:end="799:49"><name pos:start="799:44" pos:end="799:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="801:17" pos:end="801:41"><expr pos:start="801:17" pos:end="801:40"><call pos:start="801:17" pos:end="801:40"><name pos:start="801:17" pos:end="801:25">set_cc_op</name><argument_list pos:start="801:26" pos:end="801:40">(<argument pos:start="801:27" pos:end="801:27"><expr pos:start="801:27" pos:end="801:27"><name pos:start="801:27" pos:end="801:27">s</name></expr></argument>, <argument pos:start="801:30" pos:end="801:39"><expr pos:start="801:30" pos:end="801:39"><name pos:start="801:30" pos:end="801:39">CC_OP_MULW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="803:17" pos:end="803:22">break;</break>

            <default pos:start="805:13" pos:end="805:20">default:</default>

            <case pos:start="807:13" pos:end="807:23">case <expr pos:start="807:18" pos:end="807:22"><name pos:start="807:18" pos:end="807:22">MO_32</name></expr>:</case>

                <expr_stmt pos:start="809:17" pos:end="809:59"><expr pos:start="809:17" pos:end="809:58"><call pos:start="809:17" pos:end="809:58"><name pos:start="809:17" pos:end="809:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="809:37" pos:end="809:58">(<argument pos:start="809:38" pos:end="809:49"><expr pos:start="809:38" pos:end="809:49"><name pos:start="809:38" pos:end="809:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="809:52" pos:end="809:57"><expr pos:start="809:52" pos:end="809:57"><name pos:start="809:52" pos:end="809:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="811:17" pos:end="811:68"><expr pos:start="811:17" pos:end="811:67"><call pos:start="811:17" pos:end="811:67"><name pos:start="811:17" pos:end="811:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="811:37" pos:end="811:67">(<argument pos:start="811:38" pos:end="811:49"><expr pos:start="811:38" pos:end="811:49"><name pos:start="811:38" pos:end="811:49">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="811:52" pos:end="811:66"><expr pos:start="811:52" pos:end="811:66"><name pos:start="811:52" pos:end="811:66"><name pos:start="811:52" pos:end="811:59">cpu_regs</name><index pos:start="811:60" pos:end="811:66">[<expr pos:start="811:61" pos:end="811:65"><name pos:start="811:61" pos:end="811:65">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="813:17" pos:end="815:62"><expr pos:start="813:17" pos:end="815:61"><call pos:start="813:17" pos:end="815:61"><name pos:start="813:17" pos:end="813:33">tcg_gen_mulu2_i32</name><argument_list pos:start="813:34" pos:end="815:61">(<argument pos:start="813:35" pos:end="813:46"><expr pos:start="813:35" pos:end="813:46"><name pos:start="813:35" pos:end="813:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="813:49" pos:end="813:60"><expr pos:start="813:49" pos:end="813:60"><name pos:start="813:49" pos:end="813:60">cpu_tmp3_i32</name></expr></argument>,

                                  <argument pos:start="815:35" pos:end="815:46"><expr pos:start="815:35" pos:end="815:46"><name pos:start="815:35" pos:end="815:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="815:49" pos:end="815:60"><expr pos:start="815:49" pos:end="815:60"><name pos:start="815:49" pos:end="815:60">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="817:17" pos:end="817:67"><expr pos:start="817:17" pos:end="817:66"><call pos:start="817:17" pos:end="817:66"><name pos:start="817:17" pos:end="817:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="817:36" pos:end="817:66">(<argument pos:start="817:37" pos:end="817:51"><expr pos:start="817:37" pos:end="817:51"><name pos:start="817:37" pos:end="817:51"><name pos:start="817:37" pos:end="817:44">cpu_regs</name><index pos:start="817:45" pos:end="817:51">[<expr pos:start="817:46" pos:end="817:50"><name pos:start="817:46" pos:end="817:50">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="817:54" pos:end="817:65"><expr pos:start="817:54" pos:end="817:65"><name pos:start="817:54" pos:end="817:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="819:17" pos:end="819:67"><expr pos:start="819:17" pos:end="819:66"><call pos:start="819:17" pos:end="819:66"><name pos:start="819:17" pos:end="819:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="819:36" pos:end="819:66">(<argument pos:start="819:37" pos:end="819:51"><expr pos:start="819:37" pos:end="819:51"><name pos:start="819:37" pos:end="819:51"><name pos:start="819:37" pos:end="819:44">cpu_regs</name><index pos:start="819:45" pos:end="819:51">[<expr pos:start="819:46" pos:end="819:50"><name pos:start="819:46" pos:end="819:50">R_EDX</name></expr>]</index></name></expr></argument>, <argument pos:start="819:54" pos:end="819:65"><expr pos:start="819:54" pos:end="819:65"><name pos:start="819:54" pos:end="819:65">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="821:17" pos:end="821:60"><expr pos:start="821:17" pos:end="821:59"><call pos:start="821:17" pos:end="821:59"><name pos:start="821:17" pos:end="821:30">tcg_gen_mov_tl</name><argument_list pos:start="821:31" pos:end="821:59">(<argument pos:start="821:32" pos:end="821:41"><expr pos:start="821:32" pos:end="821:41"><name pos:start="821:32" pos:end="821:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="821:44" pos:end="821:58"><expr pos:start="821:44" pos:end="821:58"><name pos:start="821:44" pos:end="821:58"><name pos:start="821:44" pos:end="821:51">cpu_regs</name><index pos:start="821:52" pos:end="821:58">[<expr pos:start="821:53" pos:end="821:57"><name pos:start="821:53" pos:end="821:57">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="823:17" pos:end="823:60"><expr pos:start="823:17" pos:end="823:59"><call pos:start="823:17" pos:end="823:59"><name pos:start="823:17" pos:end="823:30">tcg_gen_mov_tl</name><argument_list pos:start="823:31" pos:end="823:59">(<argument pos:start="823:32" pos:end="823:41"><expr pos:start="823:32" pos:end="823:41"><name pos:start="823:32" pos:end="823:41">cpu_cc_src</name></expr></argument>, <argument pos:start="823:44" pos:end="823:58"><expr pos:start="823:44" pos:end="823:58"><name pos:start="823:44" pos:end="823:58"><name pos:start="823:44" pos:end="823:51">cpu_regs</name><index pos:start="823:52" pos:end="823:58">[<expr pos:start="823:53" pos:end="823:57"><name pos:start="823:53" pos:end="823:57">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="825:17" pos:end="825:41"><expr pos:start="825:17" pos:end="825:40"><call pos:start="825:17" pos:end="825:40"><name pos:start="825:17" pos:end="825:25">set_cc_op</name><argument_list pos:start="825:26" pos:end="825:40">(<argument pos:start="825:27" pos:end="825:27"><expr pos:start="825:27" pos:end="825:27"><name pos:start="825:27" pos:end="825:27">s</name></expr></argument>, <argument pos:start="825:30" pos:end="825:39"><expr pos:start="825:30" pos:end="825:39"><name pos:start="825:30" pos:end="825:39">CC_OP_MULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="827:17" pos:end="830:0">break;</break>

<cpp:ifdef pos:start="829:1" pos:end="829:20">#<cpp:directive pos:start="829:2" pos:end="829:6">ifdef</cpp:directive> <name pos:start="829:8" pos:end="829:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="831:13" pos:end="831:23">case <expr pos:start="831:18" pos:end="831:22"><name pos:start="831:18" pos:end="831:22">MO_64</name></expr>:</case>

                <expr_stmt pos:start="833:17" pos:end="835:59"><expr pos:start="833:17" pos:end="835:58"><call pos:start="833:17" pos:end="835:58"><name pos:start="833:17" pos:end="833:33">tcg_gen_mulu2_i64</name><argument_list pos:start="833:34" pos:end="835:58">(<argument pos:start="833:35" pos:end="833:49"><expr pos:start="833:35" pos:end="833:49"><name pos:start="833:35" pos:end="833:49"><name pos:start="833:35" pos:end="833:42">cpu_regs</name><index pos:start="833:43" pos:end="833:49">[<expr pos:start="833:44" pos:end="833:48"><name pos:start="833:44" pos:end="833:48">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="833:52" pos:end="833:66"><expr pos:start="833:52" pos:end="833:66"><name pos:start="833:52" pos:end="833:66"><name pos:start="833:52" pos:end="833:59">cpu_regs</name><index pos:start="833:60" pos:end="833:66">[<expr pos:start="833:61" pos:end="833:65"><name pos:start="833:61" pos:end="833:65">R_EDX</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="835:35" pos:end="835:40"><expr pos:start="835:35" pos:end="835:40"><name pos:start="835:35" pos:end="835:40">cpu_T0</name></expr></argument>, <argument pos:start="835:43" pos:end="835:57"><expr pos:start="835:43" pos:end="835:57"><name pos:start="835:43" pos:end="835:57"><name pos:start="835:43" pos:end="835:50">cpu_regs</name><index pos:start="835:51" pos:end="835:57">[<expr pos:start="835:52" pos:end="835:56"><name pos:start="835:52" pos:end="835:56">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="837:17" pos:end="837:60"><expr pos:start="837:17" pos:end="837:59"><call pos:start="837:17" pos:end="837:59"><name pos:start="837:17" pos:end="837:30">tcg_gen_mov_tl</name><argument_list pos:start="837:31" pos:end="837:59">(<argument pos:start="837:32" pos:end="837:41"><expr pos:start="837:32" pos:end="837:41"><name pos:start="837:32" pos:end="837:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="837:44" pos:end="837:58"><expr pos:start="837:44" pos:end="837:58"><name pos:start="837:44" pos:end="837:58"><name pos:start="837:44" pos:end="837:51">cpu_regs</name><index pos:start="837:52" pos:end="837:58">[<expr pos:start="837:53" pos:end="837:57"><name pos:start="837:53" pos:end="837:57">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="839:17" pos:end="839:60"><expr pos:start="839:17" pos:end="839:59"><call pos:start="839:17" pos:end="839:59"><name pos:start="839:17" pos:end="839:30">tcg_gen_mov_tl</name><argument_list pos:start="839:31" pos:end="839:59">(<argument pos:start="839:32" pos:end="839:41"><expr pos:start="839:32" pos:end="839:41"><name pos:start="839:32" pos:end="839:41">cpu_cc_src</name></expr></argument>, <argument pos:start="839:44" pos:end="839:58"><expr pos:start="839:44" pos:end="839:58"><name pos:start="839:44" pos:end="839:58"><name pos:start="839:44" pos:end="839:51">cpu_regs</name><index pos:start="839:52" pos:end="839:58">[<expr pos:start="839:53" pos:end="839:57"><name pos:start="839:53" pos:end="839:57">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="841:17" pos:end="841:41"><expr pos:start="841:17" pos:end="841:40"><call pos:start="841:17" pos:end="841:40"><name pos:start="841:17" pos:end="841:25">set_cc_op</name><argument_list pos:start="841:26" pos:end="841:40">(<argument pos:start="841:27" pos:end="841:27"><expr pos:start="841:27" pos:end="841:27"><name pos:start="841:27" pos:end="841:27">s</name></expr></argument>, <argument pos:start="841:30" pos:end="841:39"><expr pos:start="841:30" pos:end="841:39"><name pos:start="841:30" pos:end="841:39">CC_OP_MULQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="843:17" pos:end="846:0">break;</break>

<cpp:endif pos:start="845:1" pos:end="845:6">#<cpp:directive pos:start="845:2" pos:end="845:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="849:13" pos:end="849:18">break;</break>

        <case pos:start="851:9" pos:end="851:15">case <expr pos:start="851:14" pos:end="851:14"><literal type="number" pos:start="851:14" pos:end="851:14">5</literal></expr>:</case> <comment type="block" pos:start="851:17" pos:end="851:26">/* imul */</comment>

            <switch pos:start="853:13" pos:end="955:13">switch<condition pos:start="853:19" pos:end="853:22">(<expr pos:start="853:20" pos:end="853:21"><name pos:start="853:20" pos:end="853:21">ot</name></expr>)</condition> <block pos:start="853:24" pos:end="955:13">{<block_content pos:start="855:13" pos:end="954:0">

            <case pos:start="855:13" pos:end="855:22">case <expr pos:start="855:18" pos:end="855:21"><name pos:start="855:18" pos:end="855:21">MO_8</name></expr>:</case>

                <expr_stmt pos:start="857:17" pos:end="857:54"><expr pos:start="857:17" pos:end="857:53"><call pos:start="857:17" pos:end="857:53"><name pos:start="857:17" pos:end="857:32">gen_op_mov_v_reg</name><argument_list pos:start="857:33" pos:end="857:53">(<argument pos:start="857:34" pos:end="857:37"><expr pos:start="857:34" pos:end="857:37"><name pos:start="857:34" pos:end="857:37">MO_8</name></expr></argument>, <argument pos:start="857:40" pos:end="857:45"><expr pos:start="857:40" pos:end="857:45"><name pos:start="857:40" pos:end="857:45">cpu_T1</name></expr></argument>, <argument pos:start="857:48" pos:end="857:52"><expr pos:start="857:48" pos:end="857:52"><name pos:start="857:48" pos:end="857:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="859:17" pos:end="859:49"><expr pos:start="859:17" pos:end="859:48"><call pos:start="859:17" pos:end="859:48"><name pos:start="859:17" pos:end="859:32">tcg_gen_ext8s_tl</name><argument_list pos:start="859:33" pos:end="859:48">(<argument pos:start="859:34" pos:end="859:39"><expr pos:start="859:34" pos:end="859:39"><name pos:start="859:34" pos:end="859:39">cpu_T0</name></expr></argument>, <argument pos:start="859:42" pos:end="859:47"><expr pos:start="859:42" pos:end="859:47"><name pos:start="859:42" pos:end="859:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="861:17" pos:end="861:49"><expr pos:start="861:17" pos:end="861:48"><call pos:start="861:17" pos:end="861:48"><name pos:start="861:17" pos:end="861:32">tcg_gen_ext8s_tl</name><argument_list pos:start="861:33" pos:end="861:48">(<argument pos:start="861:34" pos:end="861:39"><expr pos:start="861:34" pos:end="861:39"><name pos:start="861:34" pos:end="861:39">cpu_T1</name></expr></argument>, <argument pos:start="861:42" pos:end="861:47"><expr pos:start="861:42" pos:end="861:47"><name pos:start="861:42" pos:end="861:47">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="863:17" pos:end="863:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="865:17" pos:end="865:55"><expr pos:start="865:17" pos:end="865:54"><call pos:start="865:17" pos:end="865:54"><name pos:start="865:17" pos:end="865:30">tcg_gen_mul_tl</name><argument_list pos:start="865:31" pos:end="865:54">(<argument pos:start="865:32" pos:end="865:37"><expr pos:start="865:32" pos:end="865:37"><name pos:start="865:32" pos:end="865:37">cpu_T0</name></expr></argument>, <argument pos:start="865:40" pos:end="865:45"><expr pos:start="865:40" pos:end="865:45"><name pos:start="865:40" pos:end="865:45">cpu_T0</name></expr></argument>, <argument pos:start="865:48" pos:end="865:53"><expr pos:start="865:48" pos:end="865:53"><name pos:start="865:48" pos:end="865:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="867:17" pos:end="867:55"><expr pos:start="867:17" pos:end="867:54"><call pos:start="867:17" pos:end="867:54"><name pos:start="867:17" pos:end="867:32">gen_op_mov_reg_v</name><argument_list pos:start="867:33" pos:end="867:54">(<argument pos:start="867:34" pos:end="867:38"><expr pos:start="867:34" pos:end="867:38"><name pos:start="867:34" pos:end="867:38">MO_16</name></expr></argument>, <argument pos:start="867:41" pos:end="867:45"><expr pos:start="867:41" pos:end="867:45"><name pos:start="867:41" pos:end="867:45">R_EAX</name></expr></argument>, <argument pos:start="867:48" pos:end="867:53"><expr pos:start="867:48" pos:end="867:53"><name pos:start="867:48" pos:end="867:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="869:17" pos:end="869:51"><expr pos:start="869:17" pos:end="869:50"><call pos:start="869:17" pos:end="869:50"><name pos:start="869:17" pos:end="869:30">tcg_gen_mov_tl</name><argument_list pos:start="869:31" pos:end="869:50">(<argument pos:start="869:32" pos:end="869:41"><expr pos:start="869:32" pos:end="869:41"><name pos:start="869:32" pos:end="869:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="869:44" pos:end="869:49"><expr pos:start="869:44" pos:end="869:49"><name pos:start="869:44" pos:end="869:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="871:17" pos:end="871:51"><expr pos:start="871:17" pos:end="871:50"><call pos:start="871:17" pos:end="871:50"><name pos:start="871:17" pos:end="871:32">tcg_gen_ext8s_tl</name><argument_list pos:start="871:33" pos:end="871:50">(<argument pos:start="871:34" pos:end="871:41"><expr pos:start="871:34" pos:end="871:41"><name pos:start="871:34" pos:end="871:41">cpu_tmp0</name></expr></argument>, <argument pos:start="871:44" pos:end="871:49"><expr pos:start="871:44" pos:end="871:49"><name pos:start="871:44" pos:end="871:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="873:17" pos:end="873:61"><expr pos:start="873:17" pos:end="873:60"><call pos:start="873:17" pos:end="873:60"><name pos:start="873:17" pos:end="873:30">tcg_gen_sub_tl</name><argument_list pos:start="873:31" pos:end="873:60">(<argument pos:start="873:32" pos:end="873:41"><expr pos:start="873:32" pos:end="873:41"><name pos:start="873:32" pos:end="873:41">cpu_cc_src</name></expr></argument>, <argument pos:start="873:44" pos:end="873:49"><expr pos:start="873:44" pos:end="873:49"><name pos:start="873:44" pos:end="873:49">cpu_T0</name></expr></argument>, <argument pos:start="873:52" pos:end="873:59"><expr pos:start="873:52" pos:end="873:59"><name pos:start="873:52" pos:end="873:59">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="875:17" pos:end="875:41"><expr pos:start="875:17" pos:end="875:40"><call pos:start="875:17" pos:end="875:40"><name pos:start="875:17" pos:end="875:25">set_cc_op</name><argument_list pos:start="875:26" pos:end="875:40">(<argument pos:start="875:27" pos:end="875:27"><expr pos:start="875:27" pos:end="875:27"><name pos:start="875:27" pos:end="875:27">s</name></expr></argument>, <argument pos:start="875:30" pos:end="875:39"><expr pos:start="875:30" pos:end="875:39"><name pos:start="875:30" pos:end="875:39">CC_OP_MULB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="877:17" pos:end="877:22">break;</break>

            <case pos:start="879:13" pos:end="879:23">case <expr pos:start="879:18" pos:end="879:22"><name pos:start="879:18" pos:end="879:22">MO_16</name></expr>:</case>

                <expr_stmt pos:start="881:17" pos:end="881:55"><expr pos:start="881:17" pos:end="881:54"><call pos:start="881:17" pos:end="881:54"><name pos:start="881:17" pos:end="881:32">gen_op_mov_v_reg</name><argument_list pos:start="881:33" pos:end="881:54">(<argument pos:start="881:34" pos:end="881:38"><expr pos:start="881:34" pos:end="881:38"><name pos:start="881:34" pos:end="881:38">MO_16</name></expr></argument>, <argument pos:start="881:41" pos:end="881:46"><expr pos:start="881:41" pos:end="881:46"><name pos:start="881:41" pos:end="881:46">cpu_T1</name></expr></argument>, <argument pos:start="881:49" pos:end="881:53"><expr pos:start="881:49" pos:end="881:53"><name pos:start="881:49" pos:end="881:53">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="883:17" pos:end="883:50"><expr pos:start="883:17" pos:end="883:49"><call pos:start="883:17" pos:end="883:49"><name pos:start="883:17" pos:end="883:33">tcg_gen_ext16s_tl</name><argument_list pos:start="883:34" pos:end="883:49">(<argument pos:start="883:35" pos:end="883:40"><expr pos:start="883:35" pos:end="883:40"><name pos:start="883:35" pos:end="883:40">cpu_T0</name></expr></argument>, <argument pos:start="883:43" pos:end="883:48"><expr pos:start="883:43" pos:end="883:48"><name pos:start="883:43" pos:end="883:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="885:17" pos:end="885:50"><expr pos:start="885:17" pos:end="885:49"><call pos:start="885:17" pos:end="885:49"><name pos:start="885:17" pos:end="885:33">tcg_gen_ext16s_tl</name><argument_list pos:start="885:34" pos:end="885:49">(<argument pos:start="885:35" pos:end="885:40"><expr pos:start="885:35" pos:end="885:40"><name pos:start="885:35" pos:end="885:40">cpu_T1</name></expr></argument>, <argument pos:start="885:43" pos:end="885:48"><expr pos:start="885:43" pos:end="885:48"><name pos:start="885:43" pos:end="885:48">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="887:17" pos:end="887:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="889:17" pos:end="889:55"><expr pos:start="889:17" pos:end="889:54"><call pos:start="889:17" pos:end="889:54"><name pos:start="889:17" pos:end="889:30">tcg_gen_mul_tl</name><argument_list pos:start="889:31" pos:end="889:54">(<argument pos:start="889:32" pos:end="889:37"><expr pos:start="889:32" pos:end="889:37"><name pos:start="889:32" pos:end="889:37">cpu_T0</name></expr></argument>, <argument pos:start="889:40" pos:end="889:45"><expr pos:start="889:40" pos:end="889:45"><name pos:start="889:40" pos:end="889:45">cpu_T0</name></expr></argument>, <argument pos:start="889:48" pos:end="889:53"><expr pos:start="889:48" pos:end="889:53"><name pos:start="889:48" pos:end="889:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="891:17" pos:end="891:55"><expr pos:start="891:17" pos:end="891:54"><call pos:start="891:17" pos:end="891:54"><name pos:start="891:17" pos:end="891:32">gen_op_mov_reg_v</name><argument_list pos:start="891:33" pos:end="891:54">(<argument pos:start="891:34" pos:end="891:38"><expr pos:start="891:34" pos:end="891:38"><name pos:start="891:34" pos:end="891:38">MO_16</name></expr></argument>, <argument pos:start="891:41" pos:end="891:45"><expr pos:start="891:41" pos:end="891:45"><name pos:start="891:41" pos:end="891:45">R_EAX</name></expr></argument>, <argument pos:start="891:48" pos:end="891:53"><expr pos:start="891:48" pos:end="891:53"><name pos:start="891:48" pos:end="891:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="893:17" pos:end="893:51"><expr pos:start="893:17" pos:end="893:50"><call pos:start="893:17" pos:end="893:50"><name pos:start="893:17" pos:end="893:30">tcg_gen_mov_tl</name><argument_list pos:start="893:31" pos:end="893:50">(<argument pos:start="893:32" pos:end="893:41"><expr pos:start="893:32" pos:end="893:41"><name pos:start="893:32" pos:end="893:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="893:44" pos:end="893:49"><expr pos:start="893:44" pos:end="893:49"><name pos:start="893:44" pos:end="893:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="895:17" pos:end="895:52"><expr pos:start="895:17" pos:end="895:51"><call pos:start="895:17" pos:end="895:51"><name pos:start="895:17" pos:end="895:33">tcg_gen_ext16s_tl</name><argument_list pos:start="895:34" pos:end="895:51">(<argument pos:start="895:35" pos:end="895:42"><expr pos:start="895:35" pos:end="895:42"><name pos:start="895:35" pos:end="895:42">cpu_tmp0</name></expr></argument>, <argument pos:start="895:45" pos:end="895:50"><expr pos:start="895:45" pos:end="895:50"><name pos:start="895:45" pos:end="895:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="897:17" pos:end="897:61"><expr pos:start="897:17" pos:end="897:60"><call pos:start="897:17" pos:end="897:60"><name pos:start="897:17" pos:end="897:30">tcg_gen_sub_tl</name><argument_list pos:start="897:31" pos:end="897:60">(<argument pos:start="897:32" pos:end="897:41"><expr pos:start="897:32" pos:end="897:41"><name pos:start="897:32" pos:end="897:41">cpu_cc_src</name></expr></argument>, <argument pos:start="897:44" pos:end="897:49"><expr pos:start="897:44" pos:end="897:49"><name pos:start="897:44" pos:end="897:49">cpu_T0</name></expr></argument>, <argument pos:start="897:52" pos:end="897:59"><expr pos:start="897:52" pos:end="897:59"><name pos:start="897:52" pos:end="897:59">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="899:17" pos:end="899:52"><expr pos:start="899:17" pos:end="899:51"><call pos:start="899:17" pos:end="899:51"><name pos:start="899:17" pos:end="899:31">tcg_gen_shri_tl</name><argument_list pos:start="899:32" pos:end="899:51">(<argument pos:start="899:33" pos:end="899:38"><expr pos:start="899:33" pos:end="899:38"><name pos:start="899:33" pos:end="899:38">cpu_T0</name></expr></argument>, <argument pos:start="899:41" pos:end="899:46"><expr pos:start="899:41" pos:end="899:46"><name pos:start="899:41" pos:end="899:46">cpu_T0</name></expr></argument>, <argument pos:start="899:49" pos:end="899:50"><expr pos:start="899:49" pos:end="899:50"><literal type="number" pos:start="899:49" pos:end="899:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="901:17" pos:end="901:55"><expr pos:start="901:17" pos:end="901:54"><call pos:start="901:17" pos:end="901:54"><name pos:start="901:17" pos:end="901:32">gen_op_mov_reg_v</name><argument_list pos:start="901:33" pos:end="901:54">(<argument pos:start="901:34" pos:end="901:38"><expr pos:start="901:34" pos:end="901:38"><name pos:start="901:34" pos:end="901:38">MO_16</name></expr></argument>, <argument pos:start="901:41" pos:end="901:45"><expr pos:start="901:41" pos:end="901:45"><name pos:start="901:41" pos:end="901:45">R_EDX</name></expr></argument>, <argument pos:start="901:48" pos:end="901:53"><expr pos:start="901:48" pos:end="901:53"><name pos:start="901:48" pos:end="901:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="903:17" pos:end="903:41"><expr pos:start="903:17" pos:end="903:40"><call pos:start="903:17" pos:end="903:40"><name pos:start="903:17" pos:end="903:25">set_cc_op</name><argument_list pos:start="903:26" pos:end="903:40">(<argument pos:start="903:27" pos:end="903:27"><expr pos:start="903:27" pos:end="903:27"><name pos:start="903:27" pos:end="903:27">s</name></expr></argument>, <argument pos:start="903:30" pos:end="903:39"><expr pos:start="903:30" pos:end="903:39"><name pos:start="903:30" pos:end="903:39">CC_OP_MULW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="905:17" pos:end="905:22">break;</break>

            <default pos:start="907:13" pos:end="907:20">default:</default>

            <case pos:start="909:13" pos:end="909:23">case <expr pos:start="909:18" pos:end="909:22"><name pos:start="909:18" pos:end="909:22">MO_32</name></expr>:</case>

                <expr_stmt pos:start="911:17" pos:end="911:59"><expr pos:start="911:17" pos:end="911:58"><call pos:start="911:17" pos:end="911:58"><name pos:start="911:17" pos:end="911:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="911:37" pos:end="911:58">(<argument pos:start="911:38" pos:end="911:49"><expr pos:start="911:38" pos:end="911:49"><name pos:start="911:38" pos:end="911:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="911:52" pos:end="911:57"><expr pos:start="911:52" pos:end="911:57"><name pos:start="911:52" pos:end="911:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="913:17" pos:end="913:68"><expr pos:start="913:17" pos:end="913:67"><call pos:start="913:17" pos:end="913:67"><name pos:start="913:17" pos:end="913:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="913:37" pos:end="913:67">(<argument pos:start="913:38" pos:end="913:49"><expr pos:start="913:38" pos:end="913:49"><name pos:start="913:38" pos:end="913:49">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="913:52" pos:end="913:66"><expr pos:start="913:52" pos:end="913:66"><name pos:start="913:52" pos:end="913:66"><name pos:start="913:52" pos:end="913:59">cpu_regs</name><index pos:start="913:60" pos:end="913:66">[<expr pos:start="913:61" pos:end="913:65"><name pos:start="913:61" pos:end="913:65">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="915:17" pos:end="917:62"><expr pos:start="915:17" pos:end="917:61"><call pos:start="915:17" pos:end="917:61"><name pos:start="915:17" pos:end="915:33">tcg_gen_muls2_i32</name><argument_list pos:start="915:34" pos:end="917:61">(<argument pos:start="915:35" pos:end="915:46"><expr pos:start="915:35" pos:end="915:46"><name pos:start="915:35" pos:end="915:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="915:49" pos:end="915:60"><expr pos:start="915:49" pos:end="915:60"><name pos:start="915:49" pos:end="915:60">cpu_tmp3_i32</name></expr></argument>,

                                  <argument pos:start="917:35" pos:end="917:46"><expr pos:start="917:35" pos:end="917:46"><name pos:start="917:35" pos:end="917:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="917:49" pos:end="917:60"><expr pos:start="917:49" pos:end="917:60"><name pos:start="917:49" pos:end="917:60">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="919:17" pos:end="919:67"><expr pos:start="919:17" pos:end="919:66"><call pos:start="919:17" pos:end="919:66"><name pos:start="919:17" pos:end="919:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="919:36" pos:end="919:66">(<argument pos:start="919:37" pos:end="919:51"><expr pos:start="919:37" pos:end="919:51"><name pos:start="919:37" pos:end="919:51"><name pos:start="919:37" pos:end="919:44">cpu_regs</name><index pos:start="919:45" pos:end="919:51">[<expr pos:start="919:46" pos:end="919:50"><name pos:start="919:46" pos:end="919:50">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="919:54" pos:end="919:65"><expr pos:start="919:54" pos:end="919:65"><name pos:start="919:54" pos:end="919:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="921:17" pos:end="921:67"><expr pos:start="921:17" pos:end="921:66"><call pos:start="921:17" pos:end="921:66"><name pos:start="921:17" pos:end="921:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="921:36" pos:end="921:66">(<argument pos:start="921:37" pos:end="921:51"><expr pos:start="921:37" pos:end="921:51"><name pos:start="921:37" pos:end="921:51"><name pos:start="921:37" pos:end="921:44">cpu_regs</name><index pos:start="921:45" pos:end="921:51">[<expr pos:start="921:46" pos:end="921:50"><name pos:start="921:46" pos:end="921:50">R_EDX</name></expr>]</index></name></expr></argument>, <argument pos:start="921:54" pos:end="921:65"><expr pos:start="921:54" pos:end="921:65"><name pos:start="921:54" pos:end="921:65">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="923:17" pos:end="923:65"><expr pos:start="923:17" pos:end="923:64"><call pos:start="923:17" pos:end="923:64"><name pos:start="923:17" pos:end="923:32">tcg_gen_sari_i32</name><argument_list pos:start="923:33" pos:end="923:64">(<argument pos:start="923:34" pos:end="923:45"><expr pos:start="923:34" pos:end="923:45"><name pos:start="923:34" pos:end="923:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="923:48" pos:end="923:59"><expr pos:start="923:48" pos:end="923:59"><name pos:start="923:48" pos:end="923:59">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="923:62" pos:end="923:63"><expr pos:start="923:62" pos:end="923:63"><literal type="number" pos:start="923:62" pos:end="923:63">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="925:17" pos:end="925:60"><expr pos:start="925:17" pos:end="925:59"><call pos:start="925:17" pos:end="925:59"><name pos:start="925:17" pos:end="925:30">tcg_gen_mov_tl</name><argument_list pos:start="925:31" pos:end="925:59">(<argument pos:start="925:32" pos:end="925:41"><expr pos:start="925:32" pos:end="925:41"><name pos:start="925:32" pos:end="925:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="925:44" pos:end="925:58"><expr pos:start="925:44" pos:end="925:58"><name pos:start="925:44" pos:end="925:58"><name pos:start="925:44" pos:end="925:51">cpu_regs</name><index pos:start="925:52" pos:end="925:58">[<expr pos:start="925:53" pos:end="925:57"><name pos:start="925:53" pos:end="925:57">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="927:17" pos:end="927:74"><expr pos:start="927:17" pos:end="927:73"><call pos:start="927:17" pos:end="927:73"><name pos:start="927:17" pos:end="927:31">tcg_gen_sub_i32</name><argument_list pos:start="927:32" pos:end="927:73">(<argument pos:start="927:33" pos:end="927:44"><expr pos:start="927:33" pos:end="927:44"><name pos:start="927:33" pos:end="927:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="927:47" pos:end="927:58"><expr pos:start="927:47" pos:end="927:58"><name pos:start="927:47" pos:end="927:58">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="927:61" pos:end="927:72"><expr pos:start="927:61" pos:end="927:72"><name pos:start="927:61" pos:end="927:72">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="929:17" pos:end="929:62"><expr pos:start="929:17" pos:end="929:61"><call pos:start="929:17" pos:end="929:61"><name pos:start="929:17" pos:end="929:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="929:36" pos:end="929:61">(<argument pos:start="929:37" pos:end="929:46"><expr pos:start="929:37" pos:end="929:46"><name pos:start="929:37" pos:end="929:46">cpu_cc_src</name></expr></argument>, <argument pos:start="929:49" pos:end="929:60"><expr pos:start="929:49" pos:end="929:60"><name pos:start="929:49" pos:end="929:60">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="931:17" pos:end="931:41"><expr pos:start="931:17" pos:end="931:40"><call pos:start="931:17" pos:end="931:40"><name pos:start="931:17" pos:end="931:25">set_cc_op</name><argument_list pos:start="931:26" pos:end="931:40">(<argument pos:start="931:27" pos:end="931:27"><expr pos:start="931:27" pos:end="931:27"><name pos:start="931:27" pos:end="931:27">s</name></expr></argument>, <argument pos:start="931:30" pos:end="931:39"><expr pos:start="931:30" pos:end="931:39"><name pos:start="931:30" pos:end="931:39">CC_OP_MULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="933:17" pos:end="936:0">break;</break>

<cpp:ifdef pos:start="935:1" pos:end="935:20">#<cpp:directive pos:start="935:2" pos:end="935:6">ifdef</cpp:directive> <name pos:start="935:8" pos:end="935:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="937:13" pos:end="937:23">case <expr pos:start="937:18" pos:end="937:22"><name pos:start="937:18" pos:end="937:22">MO_64</name></expr>:</case>

                <expr_stmt pos:start="939:17" pos:end="941:59"><expr pos:start="939:17" pos:end="941:58"><call pos:start="939:17" pos:end="941:58"><name pos:start="939:17" pos:end="939:33">tcg_gen_muls2_i64</name><argument_list pos:start="939:34" pos:end="941:58">(<argument pos:start="939:35" pos:end="939:49"><expr pos:start="939:35" pos:end="939:49"><name pos:start="939:35" pos:end="939:49"><name pos:start="939:35" pos:end="939:42">cpu_regs</name><index pos:start="939:43" pos:end="939:49">[<expr pos:start="939:44" pos:end="939:48"><name pos:start="939:44" pos:end="939:48">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="939:52" pos:end="939:66"><expr pos:start="939:52" pos:end="939:66"><name pos:start="939:52" pos:end="939:66"><name pos:start="939:52" pos:end="939:59">cpu_regs</name><index pos:start="939:60" pos:end="939:66">[<expr pos:start="939:61" pos:end="939:65"><name pos:start="939:61" pos:end="939:65">R_EDX</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="941:35" pos:end="941:40"><expr pos:start="941:35" pos:end="941:40"><name pos:start="941:35" pos:end="941:40">cpu_T0</name></expr></argument>, <argument pos:start="941:43" pos:end="941:57"><expr pos:start="941:43" pos:end="941:57"><name pos:start="941:43" pos:end="941:57"><name pos:start="941:43" pos:end="941:50">cpu_regs</name><index pos:start="941:51" pos:end="941:57">[<expr pos:start="941:52" pos:end="941:56"><name pos:start="941:52" pos:end="941:56">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="943:17" pos:end="943:60"><expr pos:start="943:17" pos:end="943:59"><call pos:start="943:17" pos:end="943:59"><name pos:start="943:17" pos:end="943:30">tcg_gen_mov_tl</name><argument_list pos:start="943:31" pos:end="943:59">(<argument pos:start="943:32" pos:end="943:41"><expr pos:start="943:32" pos:end="943:41"><name pos:start="943:32" pos:end="943:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="943:44" pos:end="943:58"><expr pos:start="943:44" pos:end="943:58"><name pos:start="943:44" pos:end="943:58"><name pos:start="943:44" pos:end="943:51">cpu_regs</name><index pos:start="943:52" pos:end="943:58">[<expr pos:start="943:53" pos:end="943:57"><name pos:start="943:53" pos:end="943:57">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="945:17" pos:end="945:65"><expr pos:start="945:17" pos:end="945:64"><call pos:start="945:17" pos:end="945:64"><name pos:start="945:17" pos:end="945:31">tcg_gen_sari_tl</name><argument_list pos:start="945:32" pos:end="945:64">(<argument pos:start="945:33" pos:end="945:42"><expr pos:start="945:33" pos:end="945:42"><name pos:start="945:33" pos:end="945:42">cpu_cc_src</name></expr></argument>, <argument pos:start="945:45" pos:end="945:59"><expr pos:start="945:45" pos:end="945:59"><name pos:start="945:45" pos:end="945:59"><name pos:start="945:45" pos:end="945:52">cpu_regs</name><index pos:start="945:53" pos:end="945:59">[<expr pos:start="945:54" pos:end="945:58"><name pos:start="945:54" pos:end="945:58">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="945:62" pos:end="945:63"><expr pos:start="945:62" pos:end="945:63"><literal type="number" pos:start="945:62" pos:end="945:63">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="947:17" pos:end="947:72"><expr pos:start="947:17" pos:end="947:71"><call pos:start="947:17" pos:end="947:71"><name pos:start="947:17" pos:end="947:30">tcg_gen_sub_tl</name><argument_list pos:start="947:31" pos:end="947:71">(<argument pos:start="947:32" pos:end="947:41"><expr pos:start="947:32" pos:end="947:41"><name pos:start="947:32" pos:end="947:41">cpu_cc_src</name></expr></argument>, <argument pos:start="947:44" pos:end="947:53"><expr pos:start="947:44" pos:end="947:53"><name pos:start="947:44" pos:end="947:53">cpu_cc_src</name></expr></argument>, <argument pos:start="947:56" pos:end="947:70"><expr pos:start="947:56" pos:end="947:70"><name pos:start="947:56" pos:end="947:70"><name pos:start="947:56" pos:end="947:63">cpu_regs</name><index pos:start="947:64" pos:end="947:70">[<expr pos:start="947:65" pos:end="947:69"><name pos:start="947:65" pos:end="947:69">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="949:17" pos:end="949:41"><expr pos:start="949:17" pos:end="949:40"><call pos:start="949:17" pos:end="949:40"><name pos:start="949:17" pos:end="949:25">set_cc_op</name><argument_list pos:start="949:26" pos:end="949:40">(<argument pos:start="949:27" pos:end="949:27"><expr pos:start="949:27" pos:end="949:27"><name pos:start="949:27" pos:end="949:27">s</name></expr></argument>, <argument pos:start="949:30" pos:end="949:39"><expr pos:start="949:30" pos:end="949:39"><name pos:start="949:30" pos:end="949:39">CC_OP_MULQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="951:17" pos:end="954:0">break;</break>

<cpp:endif pos:start="953:1" pos:end="953:6">#<cpp:directive pos:start="953:2" pos:end="953:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="957:13" pos:end="957:18">break;</break>

        <case pos:start="959:9" pos:end="959:15">case <expr pos:start="959:14" pos:end="959:14"><literal type="number" pos:start="959:14" pos:end="959:14">6</literal></expr>:</case> <comment type="block" pos:start="959:17" pos:end="959:25">/* div */</comment>

            <switch pos:start="961:13" pos:end="993:13">switch<condition pos:start="961:19" pos:end="961:22">(<expr pos:start="961:20" pos:end="961:21"><name pos:start="961:20" pos:end="961:21">ot</name></expr>)</condition> <block pos:start="961:24" pos:end="993:13">{<block_content pos:start="963:13" pos:end="992:0">

            <case pos:start="963:13" pos:end="963:22">case <expr pos:start="963:18" pos:end="963:21"><name pos:start="963:18" pos:end="963:21">MO_8</name></expr>:</case>

                <expr_stmt pos:start="965:17" pos:end="965:52"><expr pos:start="965:17" pos:end="965:51"><call pos:start="965:17" pos:end="965:51"><name pos:start="965:17" pos:end="965:34">gen_helper_divb_AL</name><argument_list pos:start="965:35" pos:end="965:51">(<argument pos:start="965:36" pos:end="965:42"><expr pos:start="965:36" pos:end="965:42"><name pos:start="965:36" pos:end="965:42">cpu_env</name></expr></argument>, <argument pos:start="965:45" pos:end="965:50"><expr pos:start="965:45" pos:end="965:50"><name pos:start="965:45" pos:end="965:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="967:17" pos:end="967:22">break;</break>

            <case pos:start="969:13" pos:end="969:23">case <expr pos:start="969:18" pos:end="969:22"><name pos:start="969:18" pos:end="969:22">MO_16</name></expr>:</case>

                <expr_stmt pos:start="971:17" pos:end="971:52"><expr pos:start="971:17" pos:end="971:51"><call pos:start="971:17" pos:end="971:51"><name pos:start="971:17" pos:end="971:34">gen_helper_divw_AX</name><argument_list pos:start="971:35" pos:end="971:51">(<argument pos:start="971:36" pos:end="971:42"><expr pos:start="971:36" pos:end="971:42"><name pos:start="971:36" pos:end="971:42">cpu_env</name></expr></argument>, <argument pos:start="971:45" pos:end="971:50"><expr pos:start="971:45" pos:end="971:50"><name pos:start="971:45" pos:end="971:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="973:17" pos:end="973:22">break;</break>

            <default pos:start="975:13" pos:end="975:20">default:</default>

            <case pos:start="977:13" pos:end="977:23">case <expr pos:start="977:18" pos:end="977:22"><name pos:start="977:18" pos:end="977:22">MO_32</name></expr>:</case>

                <expr_stmt pos:start="979:17" pos:end="979:53"><expr pos:start="979:17" pos:end="979:52"><call pos:start="979:17" pos:end="979:52"><name pos:start="979:17" pos:end="979:35">gen_helper_divl_EAX</name><argument_list pos:start="979:36" pos:end="979:52">(<argument pos:start="979:37" pos:end="979:43"><expr pos:start="979:37" pos:end="979:43"><name pos:start="979:37" pos:end="979:43">cpu_env</name></expr></argument>, <argument pos:start="979:46" pos:end="979:51"><expr pos:start="979:46" pos:end="979:51"><name pos:start="979:46" pos:end="979:51">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="981:17" pos:end="984:0">break;</break>

<cpp:ifdef pos:start="983:1" pos:end="983:20">#<cpp:directive pos:start="983:2" pos:end="983:6">ifdef</cpp:directive> <name pos:start="983:8" pos:end="983:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="985:13" pos:end="985:23">case <expr pos:start="985:18" pos:end="985:22"><name pos:start="985:18" pos:end="985:22">MO_64</name></expr>:</case>

                <expr_stmt pos:start="987:17" pos:end="987:53"><expr pos:start="987:17" pos:end="987:52"><call pos:start="987:17" pos:end="987:52"><name pos:start="987:17" pos:end="987:35">gen_helper_divq_EAX</name><argument_list pos:start="987:36" pos:end="987:52">(<argument pos:start="987:37" pos:end="987:43"><expr pos:start="987:37" pos:end="987:43"><name pos:start="987:37" pos:end="987:43">cpu_env</name></expr></argument>, <argument pos:start="987:46" pos:end="987:51"><expr pos:start="987:46" pos:end="987:51"><name pos:start="987:46" pos:end="987:51">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="989:17" pos:end="992:0">break;</break>

<cpp:endif pos:start="991:1" pos:end="991:6">#<cpp:directive pos:start="991:2" pos:end="991:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="995:13" pos:end="995:18">break;</break>

        <case pos:start="997:9" pos:end="997:15">case <expr pos:start="997:14" pos:end="997:14"><literal type="number" pos:start="997:14" pos:end="997:14">7</literal></expr>:</case> <comment type="block" pos:start="997:17" pos:end="997:26">/* idiv */</comment>

            <switch pos:start="999:13" pos:end="1031:13">switch<condition pos:start="999:19" pos:end="999:22">(<expr pos:start="999:20" pos:end="999:21"><name pos:start="999:20" pos:end="999:21">ot</name></expr>)</condition> <block pos:start="999:24" pos:end="1031:13">{<block_content pos:start="1001:13" pos:end="1030:0">

            <case pos:start="1001:13" pos:end="1001:22">case <expr pos:start="1001:18" pos:end="1001:21"><name pos:start="1001:18" pos:end="1001:21">MO_8</name></expr>:</case>

                <expr_stmt pos:start="1003:17" pos:end="1003:53"><expr pos:start="1003:17" pos:end="1003:52"><call pos:start="1003:17" pos:end="1003:52"><name pos:start="1003:17" pos:end="1003:35">gen_helper_idivb_AL</name><argument_list pos:start="1003:36" pos:end="1003:52">(<argument pos:start="1003:37" pos:end="1003:43"><expr pos:start="1003:37" pos:end="1003:43"><name pos:start="1003:37" pos:end="1003:43">cpu_env</name></expr></argument>, <argument pos:start="1003:46" pos:end="1003:51"><expr pos:start="1003:46" pos:end="1003:51"><name pos:start="1003:46" pos:end="1003:51">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1005:17" pos:end="1005:22">break;</break>

            <case pos:start="1007:13" pos:end="1007:23">case <expr pos:start="1007:18" pos:end="1007:22"><name pos:start="1007:18" pos:end="1007:22">MO_16</name></expr>:</case>

                <expr_stmt pos:start="1009:17" pos:end="1009:53"><expr pos:start="1009:17" pos:end="1009:52"><call pos:start="1009:17" pos:end="1009:52"><name pos:start="1009:17" pos:end="1009:35">gen_helper_idivw_AX</name><argument_list pos:start="1009:36" pos:end="1009:52">(<argument pos:start="1009:37" pos:end="1009:43"><expr pos:start="1009:37" pos:end="1009:43"><name pos:start="1009:37" pos:end="1009:43">cpu_env</name></expr></argument>, <argument pos:start="1009:46" pos:end="1009:51"><expr pos:start="1009:46" pos:end="1009:51"><name pos:start="1009:46" pos:end="1009:51">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1011:17" pos:end="1011:22">break;</break>

            <default pos:start="1013:13" pos:end="1013:20">default:</default>

            <case pos:start="1015:13" pos:end="1015:23">case <expr pos:start="1015:18" pos:end="1015:22"><name pos:start="1015:18" pos:end="1015:22">MO_32</name></expr>:</case>

                <expr_stmt pos:start="1017:17" pos:end="1017:54"><expr pos:start="1017:17" pos:end="1017:53"><call pos:start="1017:17" pos:end="1017:53"><name pos:start="1017:17" pos:end="1017:36">gen_helper_idivl_EAX</name><argument_list pos:start="1017:37" pos:end="1017:53">(<argument pos:start="1017:38" pos:end="1017:44"><expr pos:start="1017:38" pos:end="1017:44"><name pos:start="1017:38" pos:end="1017:44">cpu_env</name></expr></argument>, <argument pos:start="1017:47" pos:end="1017:52"><expr pos:start="1017:47" pos:end="1017:52"><name pos:start="1017:47" pos:end="1017:52">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1019:17" pos:end="1022:0">break;</break>

<cpp:ifdef pos:start="1021:1" pos:end="1021:20">#<cpp:directive pos:start="1021:2" pos:end="1021:6">ifdef</cpp:directive> <name pos:start="1021:8" pos:end="1021:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="1023:13" pos:end="1023:23">case <expr pos:start="1023:18" pos:end="1023:22"><name pos:start="1023:18" pos:end="1023:22">MO_64</name></expr>:</case>

                <expr_stmt pos:start="1025:17" pos:end="1025:54"><expr pos:start="1025:17" pos:end="1025:53"><call pos:start="1025:17" pos:end="1025:53"><name pos:start="1025:17" pos:end="1025:36">gen_helper_idivq_EAX</name><argument_list pos:start="1025:37" pos:end="1025:53">(<argument pos:start="1025:38" pos:end="1025:44"><expr pos:start="1025:38" pos:end="1025:44"><name pos:start="1025:38" pos:end="1025:44">cpu_env</name></expr></argument>, <argument pos:start="1025:47" pos:end="1025:52"><expr pos:start="1025:47" pos:end="1025:52"><name pos:start="1025:47" pos:end="1025:52">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1027:17" pos:end="1030:0">break;</break>

<cpp:endif pos:start="1029:1" pos:end="1029:6">#<cpp:directive pos:start="1029:2" pos:end="1029:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="1033:13" pos:end="1033:18">break;</break>

        <default pos:start="1035:9" pos:end="1035:16">default:</default>

            <goto pos:start="1037:13" pos:end="1037:28">goto <name pos:start="1037:18" pos:end="1037:27">unknown_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="1041:9" pos:end="1041:14">break;</break>



    <case pos:start="1045:5" pos:end="1045:14">case <expr pos:start="1045:10" pos:end="1045:13"><literal type="number" pos:start="1045:10" pos:end="1045:13">0xfe</literal></expr>:</case> <comment type="block" pos:start="1045:16" pos:end="1045:25">/* GRP4 */</comment>

    <case pos:start="1047:5" pos:end="1047:14">case <expr pos:start="1047:10" pos:end="1047:13"><literal type="number" pos:start="1047:10" pos:end="1047:13">0xff</literal></expr>:</case> <comment type="block" pos:start="1047:16" pos:end="1047:25">/* GRP5 */</comment>

        <expr_stmt pos:start="1049:9" pos:end="1049:30"><expr pos:start="1049:9" pos:end="1049:29"><name pos:start="1049:9" pos:end="1049:10">ot</name> <operator pos:start="1049:12" pos:end="1049:12">=</operator> <call pos:start="1049:14" pos:end="1049:29"><name pos:start="1049:14" pos:end="1049:19">mo_b_d</name><argument_list pos:start="1049:20" pos:end="1049:29">(<argument pos:start="1049:21" pos:end="1049:21"><expr pos:start="1049:21" pos:end="1049:21"><name pos:start="1049:21" pos:end="1049:21">b</name></expr></argument>, <argument pos:start="1049:24" pos:end="1049:28"><expr pos:start="1049:24" pos:end="1049:28"><name pos:start="1049:24" pos:end="1049:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="1053:9" pos:end="1053:38"><expr pos:start="1053:9" pos:end="1053:37"><name pos:start="1053:9" pos:end="1053:13">modrm</name> <operator pos:start="1053:15" pos:end="1053:15">=</operator> <call pos:start="1053:17" pos:end="1053:37"><name pos:start="1053:17" pos:end="1053:29">x86_ldub_code</name><argument_list pos:start="1053:30" pos:end="1053:37">(<argument pos:start="1053:31" pos:end="1053:33"><expr pos:start="1053:31" pos:end="1053:33"><name pos:start="1053:31" pos:end="1053:33">env</name></expr></argument>, <argument pos:start="1053:36" pos:end="1053:36"><expr pos:start="1053:36" pos:end="1053:36"><name pos:start="1053:36" pos:end="1053:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1055:9" pos:end="1055:31"><expr pos:start="1055:9" pos:end="1055:30"><name pos:start="1055:9" pos:end="1055:11">mod</name> <operator pos:start="1055:13" pos:end="1055:13">=</operator> <operator pos:start="1055:15" pos:end="1055:15">(</operator><name pos:start="1055:16" pos:end="1055:20">modrm</name> <operator pos:start="1055:22" pos:end="1055:23">&gt;&gt;</operator> <literal type="number" pos:start="1055:25" pos:end="1055:25">6</literal><operator pos:start="1055:26" pos:end="1055:26">)</operator> <operator pos:start="1055:28" pos:end="1055:28">&amp;</operator> <literal type="number" pos:start="1055:30" pos:end="1055:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1057:9" pos:end="1057:36"><expr pos:start="1057:9" pos:end="1057:35"><name pos:start="1057:9" pos:end="1057:10">rm</name> <operator pos:start="1057:12" pos:end="1057:12">=</operator> <operator pos:start="1057:14" pos:end="1057:14">(</operator><name pos:start="1057:15" pos:end="1057:19">modrm</name> <operator pos:start="1057:21" pos:end="1057:21">&amp;</operator> <literal type="number" pos:start="1057:23" pos:end="1057:23">7</literal><operator pos:start="1057:24" pos:end="1057:24">)</operator> <operator pos:start="1057:26" pos:end="1057:26">|</operator> <call pos:start="1057:28" pos:end="1057:35"><name pos:start="1057:28" pos:end="1057:32">REX_B</name><argument_list pos:start="1057:33" pos:end="1057:35">(<argument pos:start="1057:34" pos:end="1057:34"><expr pos:start="1057:34" pos:end="1057:34"><name pos:start="1057:34" pos:end="1057:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1059:9" pos:end="1059:30"><expr pos:start="1059:9" pos:end="1059:29"><name pos:start="1059:9" pos:end="1059:10">op</name> <operator pos:start="1059:12" pos:end="1059:12">=</operator> <operator pos:start="1059:14" pos:end="1059:14">(</operator><name pos:start="1059:15" pos:end="1059:19">modrm</name> <operator pos:start="1059:21" pos:end="1059:22">&gt;&gt;</operator> <literal type="number" pos:start="1059:24" pos:end="1059:24">3</literal><operator pos:start="1059:25" pos:end="1059:25">)</operator> <operator pos:start="1059:27" pos:end="1059:27">&amp;</operator> <literal type="number" pos:start="1059:29" pos:end="1059:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1061:9" pos:end="1065:9"><if pos:start="1061:9" pos:end="1065:9">if <condition pos:start="1061:12" pos:end="1061:33">(<expr pos:start="1061:13" pos:end="1061:32"><name pos:start="1061:13" pos:end="1061:14">op</name> <operator pos:start="1061:16" pos:end="1061:17">&gt;=</operator> <literal type="number" pos:start="1061:19" pos:end="1061:19">2</literal> <operator pos:start="1061:21" pos:end="1061:22">&amp;&amp;</operator> <name pos:start="1061:24" pos:end="1061:24">b</name> <operator pos:start="1061:26" pos:end="1061:27">==</operator> <literal type="number" pos:start="1061:29" pos:end="1061:32">0xfe</literal></expr>)</condition> <block pos:start="1061:35" pos:end="1065:9">{<block_content pos:start="1063:13" pos:end="1063:28">

            <goto pos:start="1063:13" pos:end="1063:28">goto <name pos:start="1063:18" pos:end="1063:27">unknown_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1067:9" pos:end="1087:9"><if pos:start="1067:9" pos:end="1087:9">if <condition pos:start="1067:12" pos:end="1067:22">(<expr pos:start="1067:13" pos:end="1067:21"><call pos:start="1067:13" pos:end="1067:21"><name pos:start="1067:13" pos:end="1067:18">CODE64</name><argument_list pos:start="1067:19" pos:end="1067:21">(<argument pos:start="1067:20" pos:end="1067:20"><expr pos:start="1067:20" pos:end="1067:20"><name pos:start="1067:20" pos:end="1067:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1067:24" pos:end="1087:9">{<block_content pos:start="1069:13" pos:end="1085:13">

            <if_stmt pos:start="1069:13" pos:end="1085:13"><if pos:start="1069:13" pos:end="1075:13">if <condition pos:start="1069:16" pos:end="1069:35">(<expr pos:start="1069:17" pos:end="1069:34"><name pos:start="1069:17" pos:end="1069:18">op</name> <operator pos:start="1069:20" pos:end="1069:21">==</operator> <literal type="number" pos:start="1069:23" pos:end="1069:23">2</literal> <operator pos:start="1069:25" pos:end="1069:26">||</operator> <name pos:start="1069:28" pos:end="1069:29">op</name> <operator pos:start="1069:31" pos:end="1069:32">==</operator> <literal type="number" pos:start="1069:34" pos:end="1069:34">4</literal></expr>)</condition> <block pos:start="1069:37" pos:end="1075:13">{<block_content pos:start="1073:17" pos:end="1073:27">

                <comment type="block" pos:start="1071:17" pos:end="1071:54">/* operand size for jumps is 64 bit */</comment>

                <expr_stmt pos:start="1073:17" pos:end="1073:27"><expr pos:start="1073:17" pos:end="1073:26"><name pos:start="1073:17" pos:end="1073:18">ot</name> <operator pos:start="1073:20" pos:end="1073:20">=</operator> <name pos:start="1073:22" pos:end="1073:26">MO_64</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1075:15" pos:end="1079:13">else if <condition pos:start="1075:23" pos:end="1075:42">(<expr pos:start="1075:24" pos:end="1075:41"><name pos:start="1075:24" pos:end="1075:25">op</name> <operator pos:start="1075:27" pos:end="1075:28">==</operator> <literal type="number" pos:start="1075:30" pos:end="1075:30">3</literal> <operator pos:start="1075:32" pos:end="1075:33">||</operator> <name pos:start="1075:35" pos:end="1075:36">op</name> <operator pos:start="1075:38" pos:end="1075:39">==</operator> <literal type="number" pos:start="1075:41" pos:end="1075:41">5</literal></expr>)</condition> <block pos:start="1075:44" pos:end="1079:13">{<block_content pos:start="1077:17" pos:end="1077:67">

                <expr_stmt pos:start="1077:17" pos:end="1077:67"><expr pos:start="1077:17" pos:end="1077:66"><name pos:start="1077:17" pos:end="1077:18">ot</name> <operator pos:start="1077:20" pos:end="1077:20">=</operator> <ternary pos:start="1077:22" pos:end="1077:66"><condition pos:start="1077:22" pos:end="1077:37"><expr pos:start="1077:22" pos:end="1077:35"><name pos:start="1077:22" pos:end="1077:26">dflag</name> <operator pos:start="1077:28" pos:end="1077:29">!=</operator> <name pos:start="1077:31" pos:end="1077:35">MO_16</name></expr> ?</condition><then pos:start="1077:39" pos:end="1077:58"> <expr pos:start="1077:39" pos:end="1077:58"><name pos:start="1077:39" pos:end="1077:43">MO_32</name> <operator pos:start="1077:45" pos:end="1077:45">+</operator> <operator pos:start="1077:47" pos:end="1077:47">(</operator><name pos:start="1077:48" pos:end="1077:52">rex_w</name> <operator pos:start="1077:54" pos:end="1077:55">==</operator> <literal type="number" pos:start="1077:57" pos:end="1077:57">1</literal><operator pos:start="1077:58" pos:end="1077:58">)</operator></expr> </then><else pos:start="1077:60" pos:end="1077:66">: <expr pos:start="1077:62" pos:end="1077:66"><name pos:start="1077:62" pos:end="1077:66">MO_16</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1079:15" pos:end="1085:13">else if <condition pos:start="1079:23" pos:end="1079:31">(<expr pos:start="1079:24" pos:end="1079:30"><name pos:start="1079:24" pos:end="1079:25">op</name> <operator pos:start="1079:27" pos:end="1079:28">==</operator> <literal type="number" pos:start="1079:30" pos:end="1079:30">6</literal></expr>)</condition> <block pos:start="1079:33" pos:end="1085:13">{<block_content pos:start="1083:17" pos:end="1083:42">

                <comment type="block" pos:start="1081:17" pos:end="1081:49">/* default push size is 64 bit */</comment>

                <expr_stmt pos:start="1083:17" pos:end="1083:42"><expr pos:start="1083:17" pos:end="1083:41"><name pos:start="1083:17" pos:end="1083:18">ot</name> <operator pos:start="1083:20" pos:end="1083:20">=</operator> <call pos:start="1083:22" pos:end="1083:41"><name pos:start="1083:22" pos:end="1083:31">mo_pushpop</name><argument_list pos:start="1083:32" pos:end="1083:41">(<argument pos:start="1083:33" pos:end="1083:33"><expr pos:start="1083:33" pos:end="1083:33"><name pos:start="1083:33" pos:end="1083:33">s</name></expr></argument>, <argument pos:start="1083:36" pos:end="1083:40"><expr pos:start="1083:36" pos:end="1083:40"><name pos:start="1083:36" pos:end="1083:40">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1089:9" pos:end="1101:9"><if pos:start="1089:9" pos:end="1097:9">if <condition pos:start="1089:12" pos:end="1089:21">(<expr pos:start="1089:13" pos:end="1089:20"><name pos:start="1089:13" pos:end="1089:15">mod</name> <operator pos:start="1089:17" pos:end="1089:18">!=</operator> <literal type="number" pos:start="1089:20" pos:end="1089:20">3</literal></expr>)</condition> <block pos:start="1089:23" pos:end="1097:9">{<block_content pos:start="1091:13" pos:end="1095:51">

            <expr_stmt pos:start="1091:13" pos:end="1091:41"><expr pos:start="1091:13" pos:end="1091:40"><call pos:start="1091:13" pos:end="1091:40"><name pos:start="1091:13" pos:end="1091:25">gen_lea_modrm</name><argument_list pos:start="1091:26" pos:end="1091:40">(<argument pos:start="1091:27" pos:end="1091:29"><expr pos:start="1091:27" pos:end="1091:29"><name pos:start="1091:27" pos:end="1091:29">env</name></expr></argument>, <argument pos:start="1091:32" pos:end="1091:32"><expr pos:start="1091:32" pos:end="1091:32"><name pos:start="1091:32" pos:end="1091:32">s</name></expr></argument>, <argument pos:start="1091:35" pos:end="1091:39"><expr pos:start="1091:35" pos:end="1091:39"><name pos:start="1091:35" pos:end="1091:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1093:13" pos:end="1095:51"><if pos:start="1093:13" pos:end="1095:51">if <condition pos:start="1093:16" pos:end="1093:46">(<expr pos:start="1093:17" pos:end="1093:45"><name pos:start="1093:17" pos:end="1093:18">op</name> <operator pos:start="1093:20" pos:end="1093:21">&gt;=</operator> <literal type="number" pos:start="1093:23" pos:end="1093:23">2</literal> <operator pos:start="1093:25" pos:end="1093:26">&amp;&amp;</operator> <name pos:start="1093:28" pos:end="1093:29">op</name> <operator pos:start="1093:31" pos:end="1093:32">!=</operator> <literal type="number" pos:start="1093:34" pos:end="1093:34">3</literal> <operator pos:start="1093:36" pos:end="1093:37">&amp;&amp;</operator> <name pos:start="1093:39" pos:end="1093:40">op</name> <operator pos:start="1093:42" pos:end="1093:43">!=</operator> <literal type="number" pos:start="1093:45" pos:end="1093:45">5</literal></expr>)</condition><block type="pseudo" pos:start="1095:17" pos:end="1095:51"><block_content pos:start="1095:17" pos:end="1095:51">

                <expr_stmt pos:start="1095:17" pos:end="1095:51"><expr pos:start="1095:17" pos:end="1095:50"><call pos:start="1095:17" pos:end="1095:50"><name pos:start="1095:17" pos:end="1095:27">gen_op_ld_v</name><argument_list pos:start="1095:28" pos:end="1095:50">(<argument pos:start="1095:29" pos:end="1095:29"><expr pos:start="1095:29" pos:end="1095:29"><name pos:start="1095:29" pos:end="1095:29">s</name></expr></argument>, <argument pos:start="1095:32" pos:end="1095:33"><expr pos:start="1095:32" pos:end="1095:33"><name pos:start="1095:32" pos:end="1095:33">ot</name></expr></argument>, <argument pos:start="1095:36" pos:end="1095:41"><expr pos:start="1095:36" pos:end="1095:41"><name pos:start="1095:36" pos:end="1095:41">cpu_T0</name></expr></argument>, <argument pos:start="1095:44" pos:end="1095:49"><expr pos:start="1095:44" pos:end="1095:49"><name pos:start="1095:44" pos:end="1095:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1097:11" pos:end="1101:9">else <block pos:start="1097:16" pos:end="1101:9">{<block_content pos:start="1099:13" pos:end="1099:45">

            <expr_stmt pos:start="1099:13" pos:end="1099:45"><expr pos:start="1099:13" pos:end="1099:44"><call pos:start="1099:13" pos:end="1099:44"><name pos:start="1099:13" pos:end="1099:28">gen_op_mov_v_reg</name><argument_list pos:start="1099:29" pos:end="1099:44">(<argument pos:start="1099:30" pos:end="1099:31"><expr pos:start="1099:30" pos:end="1099:31"><name pos:start="1099:30" pos:end="1099:31">ot</name></expr></argument>, <argument pos:start="1099:34" pos:end="1099:39"><expr pos:start="1099:34" pos:end="1099:39"><name pos:start="1099:34" pos:end="1099:39">cpu_T0</name></expr></argument>, <argument pos:start="1099:42" pos:end="1099:43"><expr pos:start="1099:42" pos:end="1099:43"><name pos:start="1099:42" pos:end="1099:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="1105:9" pos:end="1255:9">switch<condition pos:start="1105:15" pos:end="1105:18">(<expr pos:start="1105:16" pos:end="1105:17"><name pos:start="1105:16" pos:end="1105:17">op</name></expr>)</condition> <block pos:start="1105:20" pos:end="1255:9">{<block_content pos:start="1107:9" pos:end="1253:28">

        <case pos:start="1107:9" pos:end="1107:15">case <expr pos:start="1107:14" pos:end="1107:14"><literal type="number" pos:start="1107:14" pos:end="1107:14">0</literal></expr>:</case> <comment type="block" pos:start="1107:17" pos:end="1107:28">/* inc Ev */</comment>

            <if_stmt pos:start="1109:13" pos:end="1115:27"><if pos:start="1109:13" pos:end="1111:32">if <condition pos:start="1109:16" pos:end="1109:25">(<expr pos:start="1109:17" pos:end="1109:24"><name pos:start="1109:17" pos:end="1109:19">mod</name> <operator pos:start="1109:21" pos:end="1109:22">!=</operator> <literal type="number" pos:start="1109:24" pos:end="1109:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1111:17" pos:end="1111:32"><block_content pos:start="1111:17" pos:end="1111:32">

                <expr_stmt pos:start="1111:17" pos:end="1111:32"><expr pos:start="1111:17" pos:end="1111:31"><name pos:start="1111:17" pos:end="1111:21">opreg</name> <operator pos:start="1111:23" pos:end="1111:23">=</operator> <name pos:start="1111:25" pos:end="1111:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1113:13" pos:end="1115:27">else<block type="pseudo" pos:start="1115:17" pos:end="1115:27"><block_content pos:start="1115:17" pos:end="1115:27">

                <expr_stmt pos:start="1115:17" pos:end="1115:27"><expr pos:start="1115:17" pos:end="1115:26"><name pos:start="1115:17" pos:end="1115:21">opreg</name> <operator pos:start="1115:23" pos:end="1115:23">=</operator> <name pos:start="1115:25" pos:end="1115:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1117:13" pos:end="1117:37"><expr pos:start="1117:13" pos:end="1117:36"><call pos:start="1117:13" pos:end="1117:36"><name pos:start="1117:13" pos:end="1117:19">gen_inc</name><argument_list pos:start="1117:20" pos:end="1117:36">(<argument pos:start="1117:21" pos:end="1117:21"><expr pos:start="1117:21" pos:end="1117:21"><name pos:start="1117:21" pos:end="1117:21">s</name></expr></argument>, <argument pos:start="1117:24" pos:end="1117:25"><expr pos:start="1117:24" pos:end="1117:25"><name pos:start="1117:24" pos:end="1117:25">ot</name></expr></argument>, <argument pos:start="1117:28" pos:end="1117:32"><expr pos:start="1117:28" pos:end="1117:32"><name pos:start="1117:28" pos:end="1117:32">opreg</name></expr></argument>, <argument pos:start="1117:35" pos:end="1117:35"><expr pos:start="1117:35" pos:end="1117:35"><literal type="number" pos:start="1117:35" pos:end="1117:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1119:13" pos:end="1119:18">break;</break>

        <case pos:start="1121:9" pos:end="1121:15">case <expr pos:start="1121:14" pos:end="1121:14"><literal type="number" pos:start="1121:14" pos:end="1121:14">1</literal></expr>:</case> <comment type="block" pos:start="1121:17" pos:end="1121:28">/* dec Ev */</comment>

            <if_stmt pos:start="1123:13" pos:end="1129:27"><if pos:start="1123:13" pos:end="1125:32">if <condition pos:start="1123:16" pos:end="1123:25">(<expr pos:start="1123:17" pos:end="1123:24"><name pos:start="1123:17" pos:end="1123:19">mod</name> <operator pos:start="1123:21" pos:end="1123:22">!=</operator> <literal type="number" pos:start="1123:24" pos:end="1123:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1125:17" pos:end="1125:32"><block_content pos:start="1125:17" pos:end="1125:32">

                <expr_stmt pos:start="1125:17" pos:end="1125:32"><expr pos:start="1125:17" pos:end="1125:31"><name pos:start="1125:17" pos:end="1125:21">opreg</name> <operator pos:start="1125:23" pos:end="1125:23">=</operator> <name pos:start="1125:25" pos:end="1125:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1127:13" pos:end="1129:27">else<block type="pseudo" pos:start="1129:17" pos:end="1129:27"><block_content pos:start="1129:17" pos:end="1129:27">

                <expr_stmt pos:start="1129:17" pos:end="1129:27"><expr pos:start="1129:17" pos:end="1129:26"><name pos:start="1129:17" pos:end="1129:21">opreg</name> <operator pos:start="1129:23" pos:end="1129:23">=</operator> <name pos:start="1129:25" pos:end="1129:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1131:13" pos:end="1131:38"><expr pos:start="1131:13" pos:end="1131:37"><call pos:start="1131:13" pos:end="1131:37"><name pos:start="1131:13" pos:end="1131:19">gen_inc</name><argument_list pos:start="1131:20" pos:end="1131:37">(<argument pos:start="1131:21" pos:end="1131:21"><expr pos:start="1131:21" pos:end="1131:21"><name pos:start="1131:21" pos:end="1131:21">s</name></expr></argument>, <argument pos:start="1131:24" pos:end="1131:25"><expr pos:start="1131:24" pos:end="1131:25"><name pos:start="1131:24" pos:end="1131:25">ot</name></expr></argument>, <argument pos:start="1131:28" pos:end="1131:32"><expr pos:start="1131:28" pos:end="1131:32"><name pos:start="1131:28" pos:end="1131:32">opreg</name></expr></argument>, <argument pos:start="1131:35" pos:end="1131:36"><expr pos:start="1131:35" pos:end="1131:36"><operator pos:start="1131:35" pos:end="1131:35">-</operator><literal type="number" pos:start="1131:36" pos:end="1131:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1133:13" pos:end="1133:18">break;</break>

        <case pos:start="1135:9" pos:end="1135:15">case <expr pos:start="1135:14" pos:end="1135:14"><literal type="number" pos:start="1135:14" pos:end="1135:14">2</literal></expr>:</case> <comment type="block" pos:start="1135:17" pos:end="1135:29">/* call Ev */</comment>

            <comment type="block" pos:start="1137:13" pos:end="1137:65">/* XXX: optimize if memory (no 'and' is necessary) */</comment>

            <if_stmt pos:start="1139:13" pos:end="1143:13"><if pos:start="1139:13" pos:end="1143:13">if <condition pos:start="1139:16" pos:end="1139:31">(<expr pos:start="1139:17" pos:end="1139:30"><name pos:start="1139:17" pos:end="1139:21">dflag</name> <operator pos:start="1139:23" pos:end="1139:24">==</operator> <name pos:start="1139:26" pos:end="1139:30">MO_16</name></expr>)</condition> <block pos:start="1139:33" pos:end="1143:13">{<block_content pos:start="1141:17" pos:end="1141:50">

                <expr_stmt pos:start="1141:17" pos:end="1141:50"><expr pos:start="1141:17" pos:end="1141:49"><call pos:start="1141:17" pos:end="1141:49"><name pos:start="1141:17" pos:end="1141:33">tcg_gen_ext16u_tl</name><argument_list pos:start="1141:34" pos:end="1141:49">(<argument pos:start="1141:35" pos:end="1141:40"><expr pos:start="1141:35" pos:end="1141:40"><name pos:start="1141:35" pos:end="1141:40">cpu_T0</name></expr></argument>, <argument pos:start="1141:43" pos:end="1141:48"><expr pos:start="1141:43" pos:end="1141:48"><name pos:start="1141:43" pos:end="1141:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1145:13" pos:end="1145:42"><expr pos:start="1145:13" pos:end="1145:41"><name pos:start="1145:13" pos:end="1145:20">next_eip</name> <operator pos:start="1145:22" pos:end="1145:22">=</operator> <name pos:start="1145:24" pos:end="1145:28"><name pos:start="1145:24" pos:end="1145:24">s</name><operator pos:start="1145:25" pos:end="1145:26">-&gt;</operator><name pos:start="1145:27" pos:end="1145:28">pc</name></name> <operator pos:start="1145:30" pos:end="1145:30">-</operator> <name pos:start="1145:32" pos:end="1145:41"><name pos:start="1145:32" pos:end="1145:32">s</name><operator pos:start="1145:33" pos:end="1145:34">-&gt;</operator><name pos:start="1145:35" pos:end="1145:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1147:13" pos:end="1147:46"><expr pos:start="1147:13" pos:end="1147:45"><call pos:start="1147:13" pos:end="1147:45"><name pos:start="1147:13" pos:end="1147:27">tcg_gen_movi_tl</name><argument_list pos:start="1147:28" pos:end="1147:45">(<argument pos:start="1147:29" pos:end="1147:34"><expr pos:start="1147:29" pos:end="1147:34"><name pos:start="1147:29" pos:end="1147:34">cpu_T1</name></expr></argument>, <argument pos:start="1147:37" pos:end="1147:44"><expr pos:start="1147:37" pos:end="1147:44"><name pos:start="1147:37" pos:end="1147:44">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1149:13" pos:end="1149:34"><expr pos:start="1149:13" pos:end="1149:33"><call pos:start="1149:13" pos:end="1149:33"><name pos:start="1149:13" pos:end="1149:22">gen_push_v</name><argument_list pos:start="1149:23" pos:end="1149:33">(<argument pos:start="1149:24" pos:end="1149:24"><expr pos:start="1149:24" pos:end="1149:24"><name pos:start="1149:24" pos:end="1149:24">s</name></expr></argument>, <argument pos:start="1149:27" pos:end="1149:32"><expr pos:start="1149:27" pos:end="1149:32"><name pos:start="1149:27" pos:end="1149:32">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1151:13" pos:end="1151:33"><expr pos:start="1151:13" pos:end="1151:32"><call pos:start="1151:13" pos:end="1151:32"><name pos:start="1151:13" pos:end="1151:24">gen_op_jmp_v</name><argument_list pos:start="1151:25" pos:end="1151:32">(<argument pos:start="1151:26" pos:end="1151:31"><expr pos:start="1151:26" pos:end="1151:31"><name pos:start="1151:26" pos:end="1151:31">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:27"><expr pos:start="1153:13" pos:end="1153:26"><call pos:start="1153:13" pos:end="1153:26"><name pos:start="1153:13" pos:end="1153:23">gen_bnd_jmp</name><argument_list pos:start="1153:24" pos:end="1153:26">(<argument pos:start="1153:25" pos:end="1153:25"><expr pos:start="1153:25" pos:end="1153:25"><name pos:start="1153:25" pos:end="1153:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1155:13" pos:end="1155:30"><expr pos:start="1155:13" pos:end="1155:29"><call pos:start="1155:13" pos:end="1155:29"><name pos:start="1155:13" pos:end="1155:18">gen_jr</name><argument_list pos:start="1155:19" pos:end="1155:29">(<argument pos:start="1155:20" pos:end="1155:20"><expr pos:start="1155:20" pos:end="1155:20"><name pos:start="1155:20" pos:end="1155:20">s</name></expr></argument>, <argument pos:start="1155:23" pos:end="1155:28"><expr pos:start="1155:23" pos:end="1155:28"><name pos:start="1155:23" pos:end="1155:28">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1157:13" pos:end="1157:18">break;</break>

        <case pos:start="1159:9" pos:end="1159:15">case <expr pos:start="1159:14" pos:end="1159:14"><literal type="number" pos:start="1159:14" pos:end="1159:14">3</literal></expr>:</case> <comment type="block" pos:start="1159:17" pos:end="1159:30">/* lcall Ev */</comment>

            <expr_stmt pos:start="1161:13" pos:end="1161:47"><expr pos:start="1161:13" pos:end="1161:46"><call pos:start="1161:13" pos:end="1161:46"><name pos:start="1161:13" pos:end="1161:23">gen_op_ld_v</name><argument_list pos:start="1161:24" pos:end="1161:46">(<argument pos:start="1161:25" pos:end="1161:25"><expr pos:start="1161:25" pos:end="1161:25"><name pos:start="1161:25" pos:end="1161:25">s</name></expr></argument>, <argument pos:start="1161:28" pos:end="1161:29"><expr pos:start="1161:28" pos:end="1161:29"><name pos:start="1161:28" pos:end="1161:29">ot</name></expr></argument>, <argument pos:start="1161:32" pos:end="1161:37"><expr pos:start="1161:32" pos:end="1161:37"><name pos:start="1161:32" pos:end="1161:37">cpu_T1</name></expr></argument>, <argument pos:start="1161:40" pos:end="1161:45"><expr pos:start="1161:40" pos:end="1161:45"><name pos:start="1161:40" pos:end="1161:45">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1163:13" pos:end="1163:38"><expr pos:start="1163:13" pos:end="1163:37"><call pos:start="1163:13" pos:end="1163:37"><name pos:start="1163:13" pos:end="1163:25">gen_add_A0_im</name><argument_list pos:start="1163:26" pos:end="1163:37">(<argument pos:start="1163:27" pos:end="1163:27"><expr pos:start="1163:27" pos:end="1163:27"><name pos:start="1163:27" pos:end="1163:27">s</name></expr></argument>, <argument pos:start="1163:30" pos:end="1163:36"><expr pos:start="1163:30" pos:end="1163:36"><literal type="number" pos:start="1163:30" pos:end="1163:30">1</literal> <operator pos:start="1163:32" pos:end="1163:33">&lt;&lt;</operator> <name pos:start="1163:35" pos:end="1163:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1165:13" pos:end="1165:50"><expr pos:start="1165:13" pos:end="1165:49"><call pos:start="1165:13" pos:end="1165:49"><name pos:start="1165:13" pos:end="1165:23">gen_op_ld_v</name><argument_list pos:start="1165:24" pos:end="1165:49">(<argument pos:start="1165:25" pos:end="1165:25"><expr pos:start="1165:25" pos:end="1165:25"><name pos:start="1165:25" pos:end="1165:25">s</name></expr></argument>, <argument pos:start="1165:28" pos:end="1165:32"><expr pos:start="1165:28" pos:end="1165:32"><name pos:start="1165:28" pos:end="1165:32">MO_16</name></expr></argument>, <argument pos:start="1165:35" pos:end="1165:40"><expr pos:start="1165:35" pos:end="1165:40"><name pos:start="1165:35" pos:end="1165:40">cpu_T0</name></expr></argument>, <argument pos:start="1165:43" pos:end="1165:48"><expr pos:start="1165:43" pos:end="1165:48"><name pos:start="1165:43" pos:end="1165:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="1167:9" pos:end="1167:17"><name pos:start="1167:9" pos:end="1167:16">do_lcall</name>:</label>

            <if_stmt pos:start="1169:13" pos:end="1189:13"><if pos:start="1169:13" pos:end="1179:13">if <condition pos:start="1169:16" pos:end="1169:34">(<expr pos:start="1169:17" pos:end="1169:33"><name pos:start="1169:17" pos:end="1169:21"><name pos:start="1169:17" pos:end="1169:17">s</name><operator pos:start="1169:18" pos:end="1169:19">-&gt;</operator><name pos:start="1169:20" pos:end="1169:21">pe</name></name> <operator pos:start="1169:23" pos:end="1169:24">&amp;&amp;</operator> <operator pos:start="1169:26" pos:end="1169:26">!</operator><name pos:start="1169:27" pos:end="1169:33"><name pos:start="1169:27" pos:end="1169:27">s</name><operator pos:start="1169:28" pos:end="1169:29">-&gt;</operator><name pos:start="1169:30" pos:end="1169:33">vm86</name></name></expr>)</condition> <block pos:start="1169:36" pos:end="1179:13">{<block_content pos:start="1171:17" pos:end="1177:77">

                <expr_stmt pos:start="1171:17" pos:end="1171:59"><expr pos:start="1171:17" pos:end="1171:58"><call pos:start="1171:17" pos:end="1171:58"><name pos:start="1171:17" pos:end="1171:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1171:37" pos:end="1171:58">(<argument pos:start="1171:38" pos:end="1171:49"><expr pos:start="1171:38" pos:end="1171:49"><name pos:start="1171:38" pos:end="1171:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1171:52" pos:end="1171:57"><expr pos:start="1171:52" pos:end="1171:57"><name pos:start="1171:52" pos:end="1171:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1173:17" pos:end="1177:77"><expr pos:start="1173:17" pos:end="1177:76"><call pos:start="1173:17" pos:end="1177:76"><name pos:start="1173:17" pos:end="1173:42">gen_helper_lcall_protected</name><argument_list pos:start="1173:43" pos:end="1177:76">(<argument pos:start="1173:44" pos:end="1173:50"><expr pos:start="1173:44" pos:end="1173:50"><name pos:start="1173:44" pos:end="1173:50">cpu_env</name></expr></argument>, <argument pos:start="1173:53" pos:end="1173:64"><expr pos:start="1173:53" pos:end="1173:64"><name pos:start="1173:53" pos:end="1173:64">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1173:67" pos:end="1173:72"><expr pos:start="1173:67" pos:end="1173:72"><name pos:start="1173:67" pos:end="1173:72">cpu_T1</name></expr></argument>,

                                           <argument pos:start="1175:44" pos:end="1175:67"><expr pos:start="1175:44" pos:end="1175:67"><call pos:start="1175:44" pos:end="1175:67"><name pos:start="1175:44" pos:end="1175:56">tcg_const_i32</name><argument_list pos:start="1175:57" pos:end="1175:67">(<argument pos:start="1175:58" pos:end="1175:66"><expr pos:start="1175:58" pos:end="1175:66"><name pos:start="1175:58" pos:end="1175:62">dflag</name> <operator pos:start="1175:64" pos:end="1175:64">-</operator> <literal type="number" pos:start="1175:66" pos:end="1175:66">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                           <argument pos:start="1177:44" pos:end="1177:75"><expr pos:start="1177:44" pos:end="1177:75"><call pos:start="1177:44" pos:end="1177:75"><name pos:start="1177:44" pos:end="1177:55">tcg_const_tl</name><argument_list pos:start="1177:56" pos:end="1177:75">(<argument pos:start="1177:57" pos:end="1177:74"><expr pos:start="1177:57" pos:end="1177:74"><name pos:start="1177:57" pos:end="1177:61"><name pos:start="1177:57" pos:end="1177:57">s</name><operator pos:start="1177:58" pos:end="1177:59">-&gt;</operator><name pos:start="1177:60" pos:end="1177:61">pc</name></name> <operator pos:start="1177:63" pos:end="1177:63">-</operator> <name pos:start="1177:65" pos:end="1177:74"><name pos:start="1177:65" pos:end="1177:65">s</name><operator pos:start="1177:66" pos:end="1177:67">-&gt;</operator><name pos:start="1177:68" pos:end="1177:74">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1179:15" pos:end="1189:13">else <block pos:start="1179:20" pos:end="1189:13">{<block_content pos:start="1181:17" pos:end="1187:73">

                <expr_stmt pos:start="1181:17" pos:end="1181:59"><expr pos:start="1181:17" pos:end="1181:58"><call pos:start="1181:17" pos:end="1181:58"><name pos:start="1181:17" pos:end="1181:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1181:37" pos:end="1181:58">(<argument pos:start="1181:38" pos:end="1181:49"><expr pos:start="1181:38" pos:end="1181:49"><name pos:start="1181:38" pos:end="1181:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1181:52" pos:end="1181:57"><expr pos:start="1181:52" pos:end="1181:57"><name pos:start="1181:52" pos:end="1181:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1183:17" pos:end="1187:73"><expr pos:start="1183:17" pos:end="1187:72"><call pos:start="1183:17" pos:end="1187:72"><name pos:start="1183:17" pos:end="1183:37">gen_helper_lcall_real</name><argument_list pos:start="1183:38" pos:end="1187:72">(<argument pos:start="1183:39" pos:end="1183:45"><expr pos:start="1183:39" pos:end="1183:45"><name pos:start="1183:39" pos:end="1183:45">cpu_env</name></expr></argument>, <argument pos:start="1183:48" pos:end="1183:59"><expr pos:start="1183:48" pos:end="1183:59"><name pos:start="1183:48" pos:end="1183:59">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1183:62" pos:end="1183:67"><expr pos:start="1183:62" pos:end="1183:67"><name pos:start="1183:62" pos:end="1183:67">cpu_T1</name></expr></argument>,

                                      <argument pos:start="1185:39" pos:end="1185:62"><expr pos:start="1185:39" pos:end="1185:62"><call pos:start="1185:39" pos:end="1185:62"><name pos:start="1185:39" pos:end="1185:51">tcg_const_i32</name><argument_list pos:start="1185:52" pos:end="1185:62">(<argument pos:start="1185:53" pos:end="1185:61"><expr pos:start="1185:53" pos:end="1185:61"><name pos:start="1185:53" pos:end="1185:57">dflag</name> <operator pos:start="1185:59" pos:end="1185:59">-</operator> <literal type="number" pos:start="1185:61" pos:end="1185:61">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="1187:39" pos:end="1187:71"><expr pos:start="1187:39" pos:end="1187:71"><call pos:start="1187:39" pos:end="1187:71"><name pos:start="1187:39" pos:end="1187:51">tcg_const_i32</name><argument_list pos:start="1187:52" pos:end="1187:71">(<argument pos:start="1187:53" pos:end="1187:70"><expr pos:start="1187:53" pos:end="1187:70"><name pos:start="1187:53" pos:end="1187:57"><name pos:start="1187:53" pos:end="1187:53">s</name><operator pos:start="1187:54" pos:end="1187:55">-&gt;</operator><name pos:start="1187:56" pos:end="1187:57">pc</name></name> <operator pos:start="1187:59" pos:end="1187:59">-</operator> <name pos:start="1187:61" pos:end="1187:70"><name pos:start="1187:61" pos:end="1187:61">s</name><operator pos:start="1187:62" pos:end="1187:63">-&gt;</operator><name pos:start="1187:64" pos:end="1187:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1191:13" pos:end="1191:73"><expr pos:start="1191:13" pos:end="1191:72"><call pos:start="1191:13" pos:end="1191:72"><name pos:start="1191:13" pos:end="1191:25">tcg_gen_ld_tl</name><argument_list pos:start="1191:26" pos:end="1191:72">(<argument pos:start="1191:27" pos:end="1191:34"><expr pos:start="1191:27" pos:end="1191:34"><name pos:start="1191:27" pos:end="1191:34">cpu_tmp4</name></expr></argument>, <argument pos:start="1191:37" pos:end="1191:43"><expr pos:start="1191:37" pos:end="1191:43"><name pos:start="1191:37" pos:end="1191:43">cpu_env</name></expr></argument>, <argument pos:start="1191:46" pos:end="1191:71"><expr pos:start="1191:46" pos:end="1191:71"><call pos:start="1191:46" pos:end="1191:71"><name pos:start="1191:46" pos:end="1191:53">offsetof</name><argument_list pos:start="1191:54" pos:end="1191:71">(<argument pos:start="1191:55" pos:end="1191:65"><expr pos:start="1191:55" pos:end="1191:65"><name pos:start="1191:55" pos:end="1191:65">CPUX86State</name></expr></argument>, <argument pos:start="1191:68" pos:end="1191:70"><expr pos:start="1191:68" pos:end="1191:70"><name pos:start="1191:68" pos:end="1191:70">eip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1193:13" pos:end="1193:32"><expr pos:start="1193:13" pos:end="1193:31"><call pos:start="1193:13" pos:end="1193:31"><name pos:start="1193:13" pos:end="1193:18">gen_jr</name><argument_list pos:start="1193:19" pos:end="1193:31">(<argument pos:start="1193:20" pos:end="1193:20"><expr pos:start="1193:20" pos:end="1193:20"><name pos:start="1193:20" pos:end="1193:20">s</name></expr></argument>, <argument pos:start="1193:23" pos:end="1193:30"><expr pos:start="1193:23" pos:end="1193:30"><name pos:start="1193:23" pos:end="1193:30">cpu_tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1195:13" pos:end="1195:18">break;</break>

        <case pos:start="1197:9" pos:end="1197:15">case <expr pos:start="1197:14" pos:end="1197:14"><literal type="number" pos:start="1197:14" pos:end="1197:14">4</literal></expr>:</case> <comment type="block" pos:start="1197:17" pos:end="1197:28">/* jmp Ev */</comment>

            <if_stmt pos:start="1199:13" pos:end="1203:13"><if pos:start="1199:13" pos:end="1203:13">if <condition pos:start="1199:16" pos:end="1199:31">(<expr pos:start="1199:17" pos:end="1199:30"><name pos:start="1199:17" pos:end="1199:21">dflag</name> <operator pos:start="1199:23" pos:end="1199:24">==</operator> <name pos:start="1199:26" pos:end="1199:30">MO_16</name></expr>)</condition> <block pos:start="1199:33" pos:end="1203:13">{<block_content pos:start="1201:17" pos:end="1201:50">

                <expr_stmt pos:start="1201:17" pos:end="1201:50"><expr pos:start="1201:17" pos:end="1201:49"><call pos:start="1201:17" pos:end="1201:49"><name pos:start="1201:17" pos:end="1201:33">tcg_gen_ext16u_tl</name><argument_list pos:start="1201:34" pos:end="1201:49">(<argument pos:start="1201:35" pos:end="1201:40"><expr pos:start="1201:35" pos:end="1201:40"><name pos:start="1201:35" pos:end="1201:40">cpu_T0</name></expr></argument>, <argument pos:start="1201:43" pos:end="1201:48"><expr pos:start="1201:43" pos:end="1201:48"><name pos:start="1201:43" pos:end="1201:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1205:13" pos:end="1205:33"><expr pos:start="1205:13" pos:end="1205:32"><call pos:start="1205:13" pos:end="1205:32"><name pos:start="1205:13" pos:end="1205:24">gen_op_jmp_v</name><argument_list pos:start="1205:25" pos:end="1205:32">(<argument pos:start="1205:26" pos:end="1205:31"><expr pos:start="1205:26" pos:end="1205:31"><name pos:start="1205:26" pos:end="1205:31">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1207:13" pos:end="1207:27"><expr pos:start="1207:13" pos:end="1207:26"><call pos:start="1207:13" pos:end="1207:26"><name pos:start="1207:13" pos:end="1207:23">gen_bnd_jmp</name><argument_list pos:start="1207:24" pos:end="1207:26">(<argument pos:start="1207:25" pos:end="1207:25"><expr pos:start="1207:25" pos:end="1207:25"><name pos:start="1207:25" pos:end="1207:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1209:13" pos:end="1209:30"><expr pos:start="1209:13" pos:end="1209:29"><call pos:start="1209:13" pos:end="1209:29"><name pos:start="1209:13" pos:end="1209:18">gen_jr</name><argument_list pos:start="1209:19" pos:end="1209:29">(<argument pos:start="1209:20" pos:end="1209:20"><expr pos:start="1209:20" pos:end="1209:20"><name pos:start="1209:20" pos:end="1209:20">s</name></expr></argument>, <argument pos:start="1209:23" pos:end="1209:28"><expr pos:start="1209:23" pos:end="1209:28"><name pos:start="1209:23" pos:end="1209:28">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1211:13" pos:end="1211:18">break;</break>

        <case pos:start="1213:9" pos:end="1213:15">case <expr pos:start="1213:14" pos:end="1213:14"><literal type="number" pos:start="1213:14" pos:end="1213:14">5</literal></expr>:</case> <comment type="block" pos:start="1213:17" pos:end="1213:29">/* ljmp Ev */</comment>

            <expr_stmt pos:start="1215:13" pos:end="1215:47"><expr pos:start="1215:13" pos:end="1215:46"><call pos:start="1215:13" pos:end="1215:46"><name pos:start="1215:13" pos:end="1215:23">gen_op_ld_v</name><argument_list pos:start="1215:24" pos:end="1215:46">(<argument pos:start="1215:25" pos:end="1215:25"><expr pos:start="1215:25" pos:end="1215:25"><name pos:start="1215:25" pos:end="1215:25">s</name></expr></argument>, <argument pos:start="1215:28" pos:end="1215:29"><expr pos:start="1215:28" pos:end="1215:29"><name pos:start="1215:28" pos:end="1215:29">ot</name></expr></argument>, <argument pos:start="1215:32" pos:end="1215:37"><expr pos:start="1215:32" pos:end="1215:37"><name pos:start="1215:32" pos:end="1215:37">cpu_T1</name></expr></argument>, <argument pos:start="1215:40" pos:end="1215:45"><expr pos:start="1215:40" pos:end="1215:45"><name pos:start="1215:40" pos:end="1215:45">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1217:13" pos:end="1217:38"><expr pos:start="1217:13" pos:end="1217:37"><call pos:start="1217:13" pos:end="1217:37"><name pos:start="1217:13" pos:end="1217:25">gen_add_A0_im</name><argument_list pos:start="1217:26" pos:end="1217:37">(<argument pos:start="1217:27" pos:end="1217:27"><expr pos:start="1217:27" pos:end="1217:27"><name pos:start="1217:27" pos:end="1217:27">s</name></expr></argument>, <argument pos:start="1217:30" pos:end="1217:36"><expr pos:start="1217:30" pos:end="1217:36"><literal type="number" pos:start="1217:30" pos:end="1217:30">1</literal> <operator pos:start="1217:32" pos:end="1217:33">&lt;&lt;</operator> <name pos:start="1217:35" pos:end="1217:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1219:13" pos:end="1219:50"><expr pos:start="1219:13" pos:end="1219:49"><call pos:start="1219:13" pos:end="1219:49"><name pos:start="1219:13" pos:end="1219:23">gen_op_ld_v</name><argument_list pos:start="1219:24" pos:end="1219:49">(<argument pos:start="1219:25" pos:end="1219:25"><expr pos:start="1219:25" pos:end="1219:25"><name pos:start="1219:25" pos:end="1219:25">s</name></expr></argument>, <argument pos:start="1219:28" pos:end="1219:32"><expr pos:start="1219:28" pos:end="1219:32"><name pos:start="1219:28" pos:end="1219:32">MO_16</name></expr></argument>, <argument pos:start="1219:35" pos:end="1219:40"><expr pos:start="1219:35" pos:end="1219:40"><name pos:start="1219:35" pos:end="1219:40">cpu_T0</name></expr></argument>, <argument pos:start="1219:43" pos:end="1219:48"><expr pos:start="1219:43" pos:end="1219:48"><name pos:start="1219:43" pos:end="1219:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="1221:9" pos:end="1221:16"><name pos:start="1221:9" pos:end="1221:15">do_ljmp</name>:</label>

            <if_stmt pos:start="1223:13" pos:end="1237:13"><if pos:start="1223:13" pos:end="1231:13">if <condition pos:start="1223:16" pos:end="1223:34">(<expr pos:start="1223:17" pos:end="1223:33"><name pos:start="1223:17" pos:end="1223:21"><name pos:start="1223:17" pos:end="1223:17">s</name><operator pos:start="1223:18" pos:end="1223:19">-&gt;</operator><name pos:start="1223:20" pos:end="1223:21">pe</name></name> <operator pos:start="1223:23" pos:end="1223:24">&amp;&amp;</operator> <operator pos:start="1223:26" pos:end="1223:26">!</operator><name pos:start="1223:27" pos:end="1223:33"><name pos:start="1223:27" pos:end="1223:27">s</name><operator pos:start="1223:28" pos:end="1223:29">-&gt;</operator><name pos:start="1223:30" pos:end="1223:33">vm86</name></name></expr>)</condition> <block pos:start="1223:36" pos:end="1231:13">{<block_content pos:start="1225:17" pos:end="1229:76">

                <expr_stmt pos:start="1225:17" pos:end="1225:59"><expr pos:start="1225:17" pos:end="1225:58"><call pos:start="1225:17" pos:end="1225:58"><name pos:start="1225:17" pos:end="1225:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1225:37" pos:end="1225:58">(<argument pos:start="1225:38" pos:end="1225:49"><expr pos:start="1225:38" pos:end="1225:49"><name pos:start="1225:38" pos:end="1225:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1225:52" pos:end="1225:57"><expr pos:start="1225:52" pos:end="1225:57"><name pos:start="1225:52" pos:end="1225:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1227:17" pos:end="1229:76"><expr pos:start="1227:17" pos:end="1229:75"><call pos:start="1227:17" pos:end="1229:75"><name pos:start="1227:17" pos:end="1227:41">gen_helper_ljmp_protected</name><argument_list pos:start="1227:42" pos:end="1229:75">(<argument pos:start="1227:43" pos:end="1227:49"><expr pos:start="1227:43" pos:end="1227:49"><name pos:start="1227:43" pos:end="1227:49">cpu_env</name></expr></argument>, <argument pos:start="1227:52" pos:end="1227:63"><expr pos:start="1227:52" pos:end="1227:63"><name pos:start="1227:52" pos:end="1227:63">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1227:66" pos:end="1227:71"><expr pos:start="1227:66" pos:end="1227:71"><name pos:start="1227:66" pos:end="1227:71">cpu_T1</name></expr></argument>,

                                          <argument pos:start="1229:43" pos:end="1229:74"><expr pos:start="1229:43" pos:end="1229:74"><call pos:start="1229:43" pos:end="1229:74"><name pos:start="1229:43" pos:end="1229:54">tcg_const_tl</name><argument_list pos:start="1229:55" pos:end="1229:74">(<argument pos:start="1229:56" pos:end="1229:73"><expr pos:start="1229:56" pos:end="1229:73"><name pos:start="1229:56" pos:end="1229:60"><name pos:start="1229:56" pos:end="1229:56">s</name><operator pos:start="1229:57" pos:end="1229:58">-&gt;</operator><name pos:start="1229:59" pos:end="1229:60">pc</name></name> <operator pos:start="1229:62" pos:end="1229:62">-</operator> <name pos:start="1229:64" pos:end="1229:73"><name pos:start="1229:64" pos:end="1229:64">s</name><operator pos:start="1229:65" pos:end="1229:66">-&gt;</operator><name pos:start="1229:67" pos:end="1229:73">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1231:15" pos:end="1237:13">else <block pos:start="1231:20" pos:end="1237:13">{<block_content pos:start="1233:17" pos:end="1235:37">

                <expr_stmt pos:start="1233:17" pos:end="1233:44"><expr pos:start="1233:17" pos:end="1233:43"><call pos:start="1233:17" pos:end="1233:43"><name pos:start="1233:17" pos:end="1233:37">gen_op_movl_seg_T0_vm</name><argument_list pos:start="1233:38" pos:end="1233:43">(<argument pos:start="1233:39" pos:end="1233:42"><expr pos:start="1233:39" pos:end="1233:42"><name pos:start="1233:39" pos:end="1233:42">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1235:17" pos:end="1235:37"><expr pos:start="1235:17" pos:end="1235:36"><call pos:start="1235:17" pos:end="1235:36"><name pos:start="1235:17" pos:end="1235:28">gen_op_jmp_v</name><argument_list pos:start="1235:29" pos:end="1235:36">(<argument pos:start="1235:30" pos:end="1235:35"><expr pos:start="1235:30" pos:end="1235:35"><name pos:start="1235:30" pos:end="1235:35">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1239:13" pos:end="1239:73"><expr pos:start="1239:13" pos:end="1239:72"><call pos:start="1239:13" pos:end="1239:72"><name pos:start="1239:13" pos:end="1239:25">tcg_gen_ld_tl</name><argument_list pos:start="1239:26" pos:end="1239:72">(<argument pos:start="1239:27" pos:end="1239:34"><expr pos:start="1239:27" pos:end="1239:34"><name pos:start="1239:27" pos:end="1239:34">cpu_tmp4</name></expr></argument>, <argument pos:start="1239:37" pos:end="1239:43"><expr pos:start="1239:37" pos:end="1239:43"><name pos:start="1239:37" pos:end="1239:43">cpu_env</name></expr></argument>, <argument pos:start="1239:46" pos:end="1239:71"><expr pos:start="1239:46" pos:end="1239:71"><call pos:start="1239:46" pos:end="1239:71"><name pos:start="1239:46" pos:end="1239:53">offsetof</name><argument_list pos:start="1239:54" pos:end="1239:71">(<argument pos:start="1239:55" pos:end="1239:65"><expr pos:start="1239:55" pos:end="1239:65"><name pos:start="1239:55" pos:end="1239:65">CPUX86State</name></expr></argument>, <argument pos:start="1239:68" pos:end="1239:70"><expr pos:start="1239:68" pos:end="1239:70"><name pos:start="1239:68" pos:end="1239:70">eip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1241:13" pos:end="1241:32"><expr pos:start="1241:13" pos:end="1241:31"><call pos:start="1241:13" pos:end="1241:31"><name pos:start="1241:13" pos:end="1241:18">gen_jr</name><argument_list pos:start="1241:19" pos:end="1241:31">(<argument pos:start="1241:20" pos:end="1241:20"><expr pos:start="1241:20" pos:end="1241:20"><name pos:start="1241:20" pos:end="1241:20">s</name></expr></argument>, <argument pos:start="1241:23" pos:end="1241:30"><expr pos:start="1241:23" pos:end="1241:30"><name pos:start="1241:23" pos:end="1241:30">cpu_tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1243:13" pos:end="1243:18">break;</break>

        <case pos:start="1245:9" pos:end="1245:15">case <expr pos:start="1245:14" pos:end="1245:14"><literal type="number" pos:start="1245:14" pos:end="1245:14">6</literal></expr>:</case> <comment type="block" pos:start="1245:17" pos:end="1245:29">/* push Ev */</comment>

            <expr_stmt pos:start="1247:13" pos:end="1247:34"><expr pos:start="1247:13" pos:end="1247:33"><call pos:start="1247:13" pos:end="1247:33"><name pos:start="1247:13" pos:end="1247:22">gen_push_v</name><argument_list pos:start="1247:23" pos:end="1247:33">(<argument pos:start="1247:24" pos:end="1247:24"><expr pos:start="1247:24" pos:end="1247:24"><name pos:start="1247:24" pos:end="1247:24">s</name></expr></argument>, <argument pos:start="1247:27" pos:end="1247:32"><expr pos:start="1247:27" pos:end="1247:32"><name pos:start="1247:27" pos:end="1247:32">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1249:13" pos:end="1249:18">break;</break>

        <default pos:start="1251:9" pos:end="1251:16">default:</default>

            <goto pos:start="1253:13" pos:end="1253:28">goto <name pos:start="1253:18" pos:end="1253:27">unknown_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="1257:9" pos:end="1257:14">break;</break>



    <case pos:start="1261:5" pos:end="1261:14">case <expr pos:start="1261:10" pos:end="1261:13"><literal type="number" pos:start="1261:10" pos:end="1261:13">0x84</literal></expr>:</case> <comment type="block" pos:start="1261:16" pos:end="1261:32">/* test Ev, Gv */</comment>

    <case pos:start="1263:5" pos:end="1263:14">case <expr pos:start="1263:10" pos:end="1263:13"><literal type="number" pos:start="1263:10" pos:end="1263:13">0x85</literal></expr>:</case>

        <expr_stmt pos:start="1265:9" pos:end="1265:30"><expr pos:start="1265:9" pos:end="1265:29"><name pos:start="1265:9" pos:end="1265:10">ot</name> <operator pos:start="1265:12" pos:end="1265:12">=</operator> <call pos:start="1265:14" pos:end="1265:29"><name pos:start="1265:14" pos:end="1265:19">mo_b_d</name><argument_list pos:start="1265:20" pos:end="1265:29">(<argument pos:start="1265:21" pos:end="1265:21"><expr pos:start="1265:21" pos:end="1265:21"><name pos:start="1265:21" pos:end="1265:21">b</name></expr></argument>, <argument pos:start="1265:24" pos:end="1265:28"><expr pos:start="1265:24" pos:end="1265:28"><name pos:start="1265:24" pos:end="1265:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="1269:9" pos:end="1269:38"><expr pos:start="1269:9" pos:end="1269:37"><name pos:start="1269:9" pos:end="1269:13">modrm</name> <operator pos:start="1269:15" pos:end="1269:15">=</operator> <call pos:start="1269:17" pos:end="1269:37"><name pos:start="1269:17" pos:end="1269:29">x86_ldub_code</name><argument_list pos:start="1269:30" pos:end="1269:37">(<argument pos:start="1269:31" pos:end="1269:33"><expr pos:start="1269:31" pos:end="1269:33"><name pos:start="1269:31" pos:end="1269:33">env</name></expr></argument>, <argument pos:start="1269:36" pos:end="1269:36"><expr pos:start="1269:36" pos:end="1269:36"><name pos:start="1269:36" pos:end="1269:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1271:9" pos:end="1271:41"><expr pos:start="1271:9" pos:end="1271:40"><name pos:start="1271:9" pos:end="1271:11">reg</name> <operator pos:start="1271:13" pos:end="1271:13">=</operator> <operator pos:start="1271:15" pos:end="1271:15">(</operator><operator pos:start="1271:16" pos:end="1271:16">(</operator><name pos:start="1271:17" pos:end="1271:21">modrm</name> <operator pos:start="1271:23" pos:end="1271:24">&gt;&gt;</operator> <literal type="number" pos:start="1271:26" pos:end="1271:26">3</literal><operator pos:start="1271:27" pos:end="1271:27">)</operator> <operator pos:start="1271:29" pos:end="1271:29">&amp;</operator> <literal type="number" pos:start="1271:31" pos:end="1271:31">7</literal><operator pos:start="1271:32" pos:end="1271:32">)</operator> <operator pos:start="1271:34" pos:end="1271:34">|</operator> <name pos:start="1271:36" pos:end="1271:40">rex_r</name></expr>;</expr_stmt>



        <expr_stmt pos:start="1275:9" pos:end="1275:54"><expr pos:start="1275:9" pos:end="1275:53"><call pos:start="1275:9" pos:end="1275:53"><name pos:start="1275:9" pos:end="1275:22">gen_ldst_modrm</name><argument_list pos:start="1275:23" pos:end="1275:53">(<argument pos:start="1275:24" pos:end="1275:26"><expr pos:start="1275:24" pos:end="1275:26"><name pos:start="1275:24" pos:end="1275:26">env</name></expr></argument>, <argument pos:start="1275:29" pos:end="1275:29"><expr pos:start="1275:29" pos:end="1275:29"><name pos:start="1275:29" pos:end="1275:29">s</name></expr></argument>, <argument pos:start="1275:32" pos:end="1275:36"><expr pos:start="1275:32" pos:end="1275:36"><name pos:start="1275:32" pos:end="1275:36">modrm</name></expr></argument>, <argument pos:start="1275:39" pos:end="1275:40"><expr pos:start="1275:39" pos:end="1275:40"><name pos:start="1275:39" pos:end="1275:40">ot</name></expr></argument>, <argument pos:start="1275:43" pos:end="1275:49"><expr pos:start="1275:43" pos:end="1275:49"><name pos:start="1275:43" pos:end="1275:49">OR_TMP0</name></expr></argument>, <argument pos:start="1275:52" pos:end="1275:52"><expr pos:start="1275:52" pos:end="1275:52"><literal type="number" pos:start="1275:52" pos:end="1275:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1277:9" pos:end="1277:42"><expr pos:start="1277:9" pos:end="1277:41"><call pos:start="1277:9" pos:end="1277:41"><name pos:start="1277:9" pos:end="1277:24">gen_op_mov_v_reg</name><argument_list pos:start="1277:25" pos:end="1277:41">(<argument pos:start="1277:26" pos:end="1277:27"><expr pos:start="1277:26" pos:end="1277:27"><name pos:start="1277:26" pos:end="1277:27">ot</name></expr></argument>, <argument pos:start="1277:30" pos:end="1277:35"><expr pos:start="1277:30" pos:end="1277:35"><name pos:start="1277:30" pos:end="1277:35">cpu_T1</name></expr></argument>, <argument pos:start="1277:38" pos:end="1277:40"><expr pos:start="1277:38" pos:end="1277:40"><name pos:start="1277:38" pos:end="1277:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1279:9" pos:end="1279:32"><expr pos:start="1279:9" pos:end="1279:31"><call pos:start="1279:9" pos:end="1279:31"><name pos:start="1279:9" pos:end="1279:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="1279:30" pos:end="1279:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1281:9" pos:end="1281:40"><expr pos:start="1281:9" pos:end="1281:39"><call pos:start="1281:9" pos:end="1281:39"><name pos:start="1281:9" pos:end="1281:17">set_cc_op</name><argument_list pos:start="1281:18" pos:end="1281:39">(<argument pos:start="1281:19" pos:end="1281:19"><expr pos:start="1281:19" pos:end="1281:19"><name pos:start="1281:19" pos:end="1281:19">s</name></expr></argument>, <argument pos:start="1281:22" pos:end="1281:38"><expr pos:start="1281:22" pos:end="1281:38"><name pos:start="1281:22" pos:end="1281:33">CC_OP_LOGICB</name> <operator pos:start="1281:35" pos:end="1281:35">+</operator> <name pos:start="1281:37" pos:end="1281:38">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1283:9" pos:end="1283:14">break;</break>



    <case pos:start="1287:5" pos:end="1287:14">case <expr pos:start="1287:10" pos:end="1287:13"><literal type="number" pos:start="1287:10" pos:end="1287:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="1287:16" pos:end="1287:33">/* test eAX, Iv */</comment>

    <case pos:start="1289:5" pos:end="1289:14">case <expr pos:start="1289:10" pos:end="1289:13"><literal type="number" pos:start="1289:10" pos:end="1289:13">0xa9</literal></expr>:</case>

        <expr_stmt pos:start="1291:9" pos:end="1291:30"><expr pos:start="1291:9" pos:end="1291:29"><name pos:start="1291:9" pos:end="1291:10">ot</name> <operator pos:start="1291:12" pos:end="1291:12">=</operator> <call pos:start="1291:14" pos:end="1291:29"><name pos:start="1291:14" pos:end="1291:19">mo_b_d</name><argument_list pos:start="1291:20" pos:end="1291:29">(<argument pos:start="1291:21" pos:end="1291:21"><expr pos:start="1291:21" pos:end="1291:21"><name pos:start="1291:21" pos:end="1291:21">b</name></expr></argument>, <argument pos:start="1291:24" pos:end="1291:28"><expr pos:start="1291:24" pos:end="1291:28"><name pos:start="1291:24" pos:end="1291:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1293:9" pos:end="1293:35"><expr pos:start="1293:9" pos:end="1293:34"><name pos:start="1293:9" pos:end="1293:11">val</name> <operator pos:start="1293:13" pos:end="1293:13">=</operator> <call pos:start="1293:15" pos:end="1293:34"><name pos:start="1293:15" pos:end="1293:22">insn_get</name><argument_list pos:start="1293:23" pos:end="1293:34">(<argument pos:start="1293:24" pos:end="1293:26"><expr pos:start="1293:24" pos:end="1293:26"><name pos:start="1293:24" pos:end="1293:26">env</name></expr></argument>, <argument pos:start="1293:29" pos:end="1293:29"><expr pos:start="1293:29" pos:end="1293:29"><name pos:start="1293:29" pos:end="1293:29">s</name></expr></argument>, <argument pos:start="1293:32" pos:end="1293:33"><expr pos:start="1293:32" pos:end="1293:33"><name pos:start="1293:32" pos:end="1293:33">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="1297:9" pos:end="1297:45"><expr pos:start="1297:9" pos:end="1297:44"><call pos:start="1297:9" pos:end="1297:44"><name pos:start="1297:9" pos:end="1297:24">gen_op_mov_v_reg</name><argument_list pos:start="1297:25" pos:end="1297:44">(<argument pos:start="1297:26" pos:end="1297:27"><expr pos:start="1297:26" pos:end="1297:27"><name pos:start="1297:26" pos:end="1297:27">ot</name></expr></argument>, <argument pos:start="1297:30" pos:end="1297:35"><expr pos:start="1297:30" pos:end="1297:35"><name pos:start="1297:30" pos:end="1297:35">cpu_T0</name></expr></argument>, <argument pos:start="1297:38" pos:end="1297:43"><expr pos:start="1297:38" pos:end="1297:43"><name pos:start="1297:38" pos:end="1297:43">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1299:9" pos:end="1299:37"><expr pos:start="1299:9" pos:end="1299:36"><call pos:start="1299:9" pos:end="1299:36"><name pos:start="1299:9" pos:end="1299:23">tcg_gen_movi_tl</name><argument_list pos:start="1299:24" pos:end="1299:36">(<argument pos:start="1299:25" pos:end="1299:30"><expr pos:start="1299:25" pos:end="1299:30"><name pos:start="1299:25" pos:end="1299:30">cpu_T1</name></expr></argument>, <argument pos:start="1299:33" pos:end="1299:35"><expr pos:start="1299:33" pos:end="1299:35"><name pos:start="1299:33" pos:end="1299:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1301:9" pos:end="1301:32"><expr pos:start="1301:9" pos:end="1301:31"><call pos:start="1301:9" pos:end="1301:31"><name pos:start="1301:9" pos:end="1301:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="1301:30" pos:end="1301:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1303:9" pos:end="1303:40"><expr pos:start="1303:9" pos:end="1303:39"><call pos:start="1303:9" pos:end="1303:39"><name pos:start="1303:9" pos:end="1303:17">set_cc_op</name><argument_list pos:start="1303:18" pos:end="1303:39">(<argument pos:start="1303:19" pos:end="1303:19"><expr pos:start="1303:19" pos:end="1303:19"><name pos:start="1303:19" pos:end="1303:19">s</name></expr></argument>, <argument pos:start="1303:22" pos:end="1303:38"><expr pos:start="1303:22" pos:end="1303:38"><name pos:start="1303:22" pos:end="1303:33">CC_OP_LOGICB</name> <operator pos:start="1303:35" pos:end="1303:35">+</operator> <name pos:start="1303:37" pos:end="1303:38">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1305:9" pos:end="1305:14">break;</break>



    <case pos:start="1309:5" pos:end="1309:14">case <expr pos:start="1309:10" pos:end="1309:13"><literal type="number" pos:start="1309:10" pos:end="1309:13">0x98</literal></expr>:</case> <comment type="block" pos:start="1309:16" pos:end="1309:29">/* CWDE/CBW */</comment>

        <switch pos:start="1311:9" pos:end="1351:9">switch <condition pos:start="1311:16" pos:end="1311:22">(<expr pos:start="1311:17" pos:end="1311:21"><name pos:start="1311:17" pos:end="1311:21">dflag</name></expr>)</condition> <block pos:start="1311:24" pos:end="1351:9">{<block_content pos:start="1315:9" pos:end="1349:24">

<cpp:ifdef pos:start="1313:1" pos:end="1313:20">#<cpp:directive pos:start="1313:2" pos:end="1313:6">ifdef</cpp:directive> <name pos:start="1313:8" pos:end="1313:20">TARGET_X86_64</name></cpp:ifdef>

        <case pos:start="1315:9" pos:end="1315:19">case <expr pos:start="1315:14" pos:end="1315:18"><name pos:start="1315:14" pos:end="1315:18">MO_64</name></expr>:</case>

            <expr_stmt pos:start="1317:13" pos:end="1317:51"><expr pos:start="1317:13" pos:end="1317:50"><call pos:start="1317:13" pos:end="1317:50"><name pos:start="1317:13" pos:end="1317:28">gen_op_mov_v_reg</name><argument_list pos:start="1317:29" pos:end="1317:50">(<argument pos:start="1317:30" pos:end="1317:34"><expr pos:start="1317:30" pos:end="1317:34"><name pos:start="1317:30" pos:end="1317:34">MO_32</name></expr></argument>, <argument pos:start="1317:37" pos:end="1317:42"><expr pos:start="1317:37" pos:end="1317:42"><name pos:start="1317:37" pos:end="1317:42">cpu_T0</name></expr></argument>, <argument pos:start="1317:45" pos:end="1317:49"><expr pos:start="1317:45" pos:end="1317:49"><name pos:start="1317:45" pos:end="1317:49">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1319:13" pos:end="1319:46"><expr pos:start="1319:13" pos:end="1319:45"><call pos:start="1319:13" pos:end="1319:45"><name pos:start="1319:13" pos:end="1319:29">tcg_gen_ext32s_tl</name><argument_list pos:start="1319:30" pos:end="1319:45">(<argument pos:start="1319:31" pos:end="1319:36"><expr pos:start="1319:31" pos:end="1319:36"><name pos:start="1319:31" pos:end="1319:36">cpu_T0</name></expr></argument>, <argument pos:start="1319:39" pos:end="1319:44"><expr pos:start="1319:39" pos:end="1319:44"><name pos:start="1319:39" pos:end="1319:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1321:13" pos:end="1321:51"><expr pos:start="1321:13" pos:end="1321:50"><call pos:start="1321:13" pos:end="1321:50"><name pos:start="1321:13" pos:end="1321:28">gen_op_mov_reg_v</name><argument_list pos:start="1321:29" pos:end="1321:50">(<argument pos:start="1321:30" pos:end="1321:34"><expr pos:start="1321:30" pos:end="1321:34"><name pos:start="1321:30" pos:end="1321:34">MO_64</name></expr></argument>, <argument pos:start="1321:37" pos:end="1321:41"><expr pos:start="1321:37" pos:end="1321:41"><name pos:start="1321:37" pos:end="1321:41">R_EAX</name></expr></argument>, <argument pos:start="1321:44" pos:end="1321:49"><expr pos:start="1321:44" pos:end="1321:49"><name pos:start="1321:44" pos:end="1321:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1323:13" pos:end="1326:0">break;</break>

<cpp:endif pos:start="1325:1" pos:end="1325:6">#<cpp:directive pos:start="1325:2" pos:end="1325:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1327:9" pos:end="1327:19">case <expr pos:start="1327:14" pos:end="1327:18"><name pos:start="1327:14" pos:end="1327:18">MO_32</name></expr>:</case>

            <expr_stmt pos:start="1329:13" pos:end="1329:51"><expr pos:start="1329:13" pos:end="1329:50"><call pos:start="1329:13" pos:end="1329:50"><name pos:start="1329:13" pos:end="1329:28">gen_op_mov_v_reg</name><argument_list pos:start="1329:29" pos:end="1329:50">(<argument pos:start="1329:30" pos:end="1329:34"><expr pos:start="1329:30" pos:end="1329:34"><name pos:start="1329:30" pos:end="1329:34">MO_16</name></expr></argument>, <argument pos:start="1329:37" pos:end="1329:42"><expr pos:start="1329:37" pos:end="1329:42"><name pos:start="1329:37" pos:end="1329:42">cpu_T0</name></expr></argument>, <argument pos:start="1329:45" pos:end="1329:49"><expr pos:start="1329:45" pos:end="1329:49"><name pos:start="1329:45" pos:end="1329:49">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1331:13" pos:end="1331:46"><expr pos:start="1331:13" pos:end="1331:45"><call pos:start="1331:13" pos:end="1331:45"><name pos:start="1331:13" pos:end="1331:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1331:30" pos:end="1331:45">(<argument pos:start="1331:31" pos:end="1331:36"><expr pos:start="1331:31" pos:end="1331:36"><name pos:start="1331:31" pos:end="1331:36">cpu_T0</name></expr></argument>, <argument pos:start="1331:39" pos:end="1331:44"><expr pos:start="1331:39" pos:end="1331:44"><name pos:start="1331:39" pos:end="1331:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1333:13" pos:end="1333:51"><expr pos:start="1333:13" pos:end="1333:50"><call pos:start="1333:13" pos:end="1333:50"><name pos:start="1333:13" pos:end="1333:28">gen_op_mov_reg_v</name><argument_list pos:start="1333:29" pos:end="1333:50">(<argument pos:start="1333:30" pos:end="1333:34"><expr pos:start="1333:30" pos:end="1333:34"><name pos:start="1333:30" pos:end="1333:34">MO_32</name></expr></argument>, <argument pos:start="1333:37" pos:end="1333:41"><expr pos:start="1333:37" pos:end="1333:41"><name pos:start="1333:37" pos:end="1333:41">R_EAX</name></expr></argument>, <argument pos:start="1333:44" pos:end="1333:49"><expr pos:start="1333:44" pos:end="1333:49"><name pos:start="1333:44" pos:end="1333:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1335:13" pos:end="1335:18">break;</break>

        <case pos:start="1337:9" pos:end="1337:19">case <expr pos:start="1337:14" pos:end="1337:18"><name pos:start="1337:14" pos:end="1337:18">MO_16</name></expr>:</case>

            <expr_stmt pos:start="1339:13" pos:end="1339:50"><expr pos:start="1339:13" pos:end="1339:49"><call pos:start="1339:13" pos:end="1339:49"><name pos:start="1339:13" pos:end="1339:28">gen_op_mov_v_reg</name><argument_list pos:start="1339:29" pos:end="1339:49">(<argument pos:start="1339:30" pos:end="1339:33"><expr pos:start="1339:30" pos:end="1339:33"><name pos:start="1339:30" pos:end="1339:33">MO_8</name></expr></argument>, <argument pos:start="1339:36" pos:end="1339:41"><expr pos:start="1339:36" pos:end="1339:41"><name pos:start="1339:36" pos:end="1339:41">cpu_T0</name></expr></argument>, <argument pos:start="1339:44" pos:end="1339:48"><expr pos:start="1339:44" pos:end="1339:48"><name pos:start="1339:44" pos:end="1339:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1341:13" pos:end="1341:45"><expr pos:start="1341:13" pos:end="1341:44"><call pos:start="1341:13" pos:end="1341:44"><name pos:start="1341:13" pos:end="1341:28">tcg_gen_ext8s_tl</name><argument_list pos:start="1341:29" pos:end="1341:44">(<argument pos:start="1341:30" pos:end="1341:35"><expr pos:start="1341:30" pos:end="1341:35"><name pos:start="1341:30" pos:end="1341:35">cpu_T0</name></expr></argument>, <argument pos:start="1341:38" pos:end="1341:43"><expr pos:start="1341:38" pos:end="1341:43"><name pos:start="1341:38" pos:end="1341:43">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1343:13" pos:end="1343:51"><expr pos:start="1343:13" pos:end="1343:50"><call pos:start="1343:13" pos:end="1343:50"><name pos:start="1343:13" pos:end="1343:28">gen_op_mov_reg_v</name><argument_list pos:start="1343:29" pos:end="1343:50">(<argument pos:start="1343:30" pos:end="1343:34"><expr pos:start="1343:30" pos:end="1343:34"><name pos:start="1343:30" pos:end="1343:34">MO_16</name></expr></argument>, <argument pos:start="1343:37" pos:end="1343:41"><expr pos:start="1343:37" pos:end="1343:41"><name pos:start="1343:37" pos:end="1343:41">R_EAX</name></expr></argument>, <argument pos:start="1343:44" pos:end="1343:49"><expr pos:start="1343:44" pos:end="1343:49"><name pos:start="1343:44" pos:end="1343:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1345:13" pos:end="1345:18">break;</break>

        <default pos:start="1347:9" pos:end="1347:16">default:</default>

            <expr_stmt pos:start="1349:13" pos:end="1349:24"><expr pos:start="1349:13" pos:end="1349:23"><call pos:start="1349:13" pos:end="1349:23"><name pos:start="1349:13" pos:end="1349:21">tcg_abort</name><argument_list pos:start="1349:22" pos:end="1349:23">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <break pos:start="1353:9" pos:end="1353:14">break;</break>

    <case pos:start="1355:5" pos:end="1355:14">case <expr pos:start="1355:10" pos:end="1355:13"><literal type="number" pos:start="1355:10" pos:end="1355:13">0x99</literal></expr>:</case> <comment type="block" pos:start="1355:16" pos:end="1355:28">/* CDQ/CWD */</comment>

        <switch pos:start="1357:9" pos:end="1401:9">switch <condition pos:start="1357:16" pos:end="1357:22">(<expr pos:start="1357:17" pos:end="1357:21"><name pos:start="1357:17" pos:end="1357:21">dflag</name></expr>)</condition> <block pos:start="1357:24" pos:end="1401:9">{<block_content pos:start="1361:9" pos:end="1399:24">

<cpp:ifdef pos:start="1359:1" pos:end="1359:20">#<cpp:directive pos:start="1359:2" pos:end="1359:6">ifdef</cpp:directive> <name pos:start="1359:8" pos:end="1359:20">TARGET_X86_64</name></cpp:ifdef>

        <case pos:start="1361:9" pos:end="1361:19">case <expr pos:start="1361:14" pos:end="1361:18"><name pos:start="1361:14" pos:end="1361:18">MO_64</name></expr>:</case>

            <expr_stmt pos:start="1363:13" pos:end="1363:51"><expr pos:start="1363:13" pos:end="1363:50"><call pos:start="1363:13" pos:end="1363:50"><name pos:start="1363:13" pos:end="1363:28">gen_op_mov_v_reg</name><argument_list pos:start="1363:29" pos:end="1363:50">(<argument pos:start="1363:30" pos:end="1363:34"><expr pos:start="1363:30" pos:end="1363:34"><name pos:start="1363:30" pos:end="1363:34">MO_64</name></expr></argument>, <argument pos:start="1363:37" pos:end="1363:42"><expr pos:start="1363:37" pos:end="1363:42"><name pos:start="1363:37" pos:end="1363:42">cpu_T0</name></expr></argument>, <argument pos:start="1363:45" pos:end="1363:49"><expr pos:start="1363:45" pos:end="1363:49"><name pos:start="1363:45" pos:end="1363:49">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1365:13" pos:end="1365:48"><expr pos:start="1365:13" pos:end="1365:47"><call pos:start="1365:13" pos:end="1365:47"><name pos:start="1365:13" pos:end="1365:27">tcg_gen_sari_tl</name><argument_list pos:start="1365:28" pos:end="1365:47">(<argument pos:start="1365:29" pos:end="1365:34"><expr pos:start="1365:29" pos:end="1365:34"><name pos:start="1365:29" pos:end="1365:34">cpu_T0</name></expr></argument>, <argument pos:start="1365:37" pos:end="1365:42"><expr pos:start="1365:37" pos:end="1365:42"><name pos:start="1365:37" pos:end="1365:42">cpu_T0</name></expr></argument>, <argument pos:start="1365:45" pos:end="1365:46"><expr pos:start="1365:45" pos:end="1365:46"><literal type="number" pos:start="1365:45" pos:end="1365:46">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1367:13" pos:end="1367:51"><expr pos:start="1367:13" pos:end="1367:50"><call pos:start="1367:13" pos:end="1367:50"><name pos:start="1367:13" pos:end="1367:28">gen_op_mov_reg_v</name><argument_list pos:start="1367:29" pos:end="1367:50">(<argument pos:start="1367:30" pos:end="1367:34"><expr pos:start="1367:30" pos:end="1367:34"><name pos:start="1367:30" pos:end="1367:34">MO_64</name></expr></argument>, <argument pos:start="1367:37" pos:end="1367:41"><expr pos:start="1367:37" pos:end="1367:41"><name pos:start="1367:37" pos:end="1367:41">R_EDX</name></expr></argument>, <argument pos:start="1367:44" pos:end="1367:49"><expr pos:start="1367:44" pos:end="1367:49"><name pos:start="1367:44" pos:end="1367:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1369:13" pos:end="1372:0">break;</break>

<cpp:endif pos:start="1371:1" pos:end="1371:6">#<cpp:directive pos:start="1371:2" pos:end="1371:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1373:9" pos:end="1373:19">case <expr pos:start="1373:14" pos:end="1373:18"><name pos:start="1373:14" pos:end="1373:18">MO_32</name></expr>:</case>

            <expr_stmt pos:start="1375:13" pos:end="1375:51"><expr pos:start="1375:13" pos:end="1375:50"><call pos:start="1375:13" pos:end="1375:50"><name pos:start="1375:13" pos:end="1375:28">gen_op_mov_v_reg</name><argument_list pos:start="1375:29" pos:end="1375:50">(<argument pos:start="1375:30" pos:end="1375:34"><expr pos:start="1375:30" pos:end="1375:34"><name pos:start="1375:30" pos:end="1375:34">MO_32</name></expr></argument>, <argument pos:start="1375:37" pos:end="1375:42"><expr pos:start="1375:37" pos:end="1375:42"><name pos:start="1375:37" pos:end="1375:42">cpu_T0</name></expr></argument>, <argument pos:start="1375:45" pos:end="1375:49"><expr pos:start="1375:45" pos:end="1375:49"><name pos:start="1375:45" pos:end="1375:49">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1377:13" pos:end="1377:46"><expr pos:start="1377:13" pos:end="1377:45"><call pos:start="1377:13" pos:end="1377:45"><name pos:start="1377:13" pos:end="1377:29">tcg_gen_ext32s_tl</name><argument_list pos:start="1377:30" pos:end="1377:45">(<argument pos:start="1377:31" pos:end="1377:36"><expr pos:start="1377:31" pos:end="1377:36"><name pos:start="1377:31" pos:end="1377:36">cpu_T0</name></expr></argument>, <argument pos:start="1377:39" pos:end="1377:44"><expr pos:start="1377:39" pos:end="1377:44"><name pos:start="1377:39" pos:end="1377:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1379:13" pos:end="1379:48"><expr pos:start="1379:13" pos:end="1379:47"><call pos:start="1379:13" pos:end="1379:47"><name pos:start="1379:13" pos:end="1379:27">tcg_gen_sari_tl</name><argument_list pos:start="1379:28" pos:end="1379:47">(<argument pos:start="1379:29" pos:end="1379:34"><expr pos:start="1379:29" pos:end="1379:34"><name pos:start="1379:29" pos:end="1379:34">cpu_T0</name></expr></argument>, <argument pos:start="1379:37" pos:end="1379:42"><expr pos:start="1379:37" pos:end="1379:42"><name pos:start="1379:37" pos:end="1379:42">cpu_T0</name></expr></argument>, <argument pos:start="1379:45" pos:end="1379:46"><expr pos:start="1379:45" pos:end="1379:46"><literal type="number" pos:start="1379:45" pos:end="1379:46">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1381:13" pos:end="1381:51"><expr pos:start="1381:13" pos:end="1381:50"><call pos:start="1381:13" pos:end="1381:50"><name pos:start="1381:13" pos:end="1381:28">gen_op_mov_reg_v</name><argument_list pos:start="1381:29" pos:end="1381:50">(<argument pos:start="1381:30" pos:end="1381:34"><expr pos:start="1381:30" pos:end="1381:34"><name pos:start="1381:30" pos:end="1381:34">MO_32</name></expr></argument>, <argument pos:start="1381:37" pos:end="1381:41"><expr pos:start="1381:37" pos:end="1381:41"><name pos:start="1381:37" pos:end="1381:41">R_EDX</name></expr></argument>, <argument pos:start="1381:44" pos:end="1381:49"><expr pos:start="1381:44" pos:end="1381:49"><name pos:start="1381:44" pos:end="1381:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1383:13" pos:end="1383:18">break;</break>

        <case pos:start="1385:9" pos:end="1385:19">case <expr pos:start="1385:14" pos:end="1385:18"><name pos:start="1385:14" pos:end="1385:18">MO_16</name></expr>:</case>

            <expr_stmt pos:start="1387:13" pos:end="1387:51"><expr pos:start="1387:13" pos:end="1387:50"><call pos:start="1387:13" pos:end="1387:50"><name pos:start="1387:13" pos:end="1387:28">gen_op_mov_v_reg</name><argument_list pos:start="1387:29" pos:end="1387:50">(<argument pos:start="1387:30" pos:end="1387:34"><expr pos:start="1387:30" pos:end="1387:34"><name pos:start="1387:30" pos:end="1387:34">MO_16</name></expr></argument>, <argument pos:start="1387:37" pos:end="1387:42"><expr pos:start="1387:37" pos:end="1387:42"><name pos:start="1387:37" pos:end="1387:42">cpu_T0</name></expr></argument>, <argument pos:start="1387:45" pos:end="1387:49"><expr pos:start="1387:45" pos:end="1387:49"><name pos:start="1387:45" pos:end="1387:49">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1389:13" pos:end="1389:46"><expr pos:start="1389:13" pos:end="1389:45"><call pos:start="1389:13" pos:end="1389:45"><name pos:start="1389:13" pos:end="1389:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1389:30" pos:end="1389:45">(<argument pos:start="1389:31" pos:end="1389:36"><expr pos:start="1389:31" pos:end="1389:36"><name pos:start="1389:31" pos:end="1389:36">cpu_T0</name></expr></argument>, <argument pos:start="1389:39" pos:end="1389:44"><expr pos:start="1389:39" pos:end="1389:44"><name pos:start="1389:39" pos:end="1389:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1391:13" pos:end="1391:48"><expr pos:start="1391:13" pos:end="1391:47"><call pos:start="1391:13" pos:end="1391:47"><name pos:start="1391:13" pos:end="1391:27">tcg_gen_sari_tl</name><argument_list pos:start="1391:28" pos:end="1391:47">(<argument pos:start="1391:29" pos:end="1391:34"><expr pos:start="1391:29" pos:end="1391:34"><name pos:start="1391:29" pos:end="1391:34">cpu_T0</name></expr></argument>, <argument pos:start="1391:37" pos:end="1391:42"><expr pos:start="1391:37" pos:end="1391:42"><name pos:start="1391:37" pos:end="1391:42">cpu_T0</name></expr></argument>, <argument pos:start="1391:45" pos:end="1391:46"><expr pos:start="1391:45" pos:end="1391:46"><literal type="number" pos:start="1391:45" pos:end="1391:46">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1393:13" pos:end="1393:51"><expr pos:start="1393:13" pos:end="1393:50"><call pos:start="1393:13" pos:end="1393:50"><name pos:start="1393:13" pos:end="1393:28">gen_op_mov_reg_v</name><argument_list pos:start="1393:29" pos:end="1393:50">(<argument pos:start="1393:30" pos:end="1393:34"><expr pos:start="1393:30" pos:end="1393:34"><name pos:start="1393:30" pos:end="1393:34">MO_16</name></expr></argument>, <argument pos:start="1393:37" pos:end="1393:41"><expr pos:start="1393:37" pos:end="1393:41"><name pos:start="1393:37" pos:end="1393:41">R_EDX</name></expr></argument>, <argument pos:start="1393:44" pos:end="1393:49"><expr pos:start="1393:44" pos:end="1393:49"><name pos:start="1393:44" pos:end="1393:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1395:13" pos:end="1395:18">break;</break>

        <default pos:start="1397:9" pos:end="1397:16">default:</default>

            <expr_stmt pos:start="1399:13" pos:end="1399:24"><expr pos:start="1399:13" pos:end="1399:23"><call pos:start="1399:13" pos:end="1399:23"><name pos:start="1399:13" pos:end="1399:21">tcg_abort</name><argument_list pos:start="1399:22" pos:end="1399:23">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <break pos:start="1403:9" pos:end="1403:14">break;</break>

    <case pos:start="1405:5" pos:end="1405:15">case <expr pos:start="1405:10" pos:end="1405:14"><literal type="number" pos:start="1405:10" pos:end="1405:14">0x1af</literal></expr>:</case> <comment type="block" pos:start="1405:17" pos:end="1405:33">/* imul Gv, Ev */</comment>

    <case pos:start="1407:5" pos:end="1407:14">case <expr pos:start="1407:10" pos:end="1407:13"><literal type="number" pos:start="1407:10" pos:end="1407:13">0x69</literal></expr>:</case> <comment type="block" pos:start="1407:16" pos:end="1407:35">/* imul Gv, Ev, I */</comment>

    <case pos:start="1409:5" pos:end="1409:14">case <expr pos:start="1409:10" pos:end="1409:13"><literal type="number" pos:start="1409:10" pos:end="1409:13">0x6b</literal></expr>:</case>

        <expr_stmt pos:start="1411:9" pos:end="1411:19"><expr pos:start="1411:9" pos:end="1411:18"><name pos:start="1411:9" pos:end="1411:10">ot</name> <operator pos:start="1411:12" pos:end="1411:12">=</operator> <name pos:start="1411:14" pos:end="1411:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1413:9" pos:end="1413:38"><expr pos:start="1413:9" pos:end="1413:37"><name pos:start="1413:9" pos:end="1413:13">modrm</name> <operator pos:start="1413:15" pos:end="1413:15">=</operator> <call pos:start="1413:17" pos:end="1413:37"><name pos:start="1413:17" pos:end="1413:29">x86_ldub_code</name><argument_list pos:start="1413:30" pos:end="1413:37">(<argument pos:start="1413:31" pos:end="1413:33"><expr pos:start="1413:31" pos:end="1413:33"><name pos:start="1413:31" pos:end="1413:33">env</name></expr></argument>, <argument pos:start="1413:36" pos:end="1413:36"><expr pos:start="1413:36" pos:end="1413:36"><name pos:start="1413:36" pos:end="1413:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1415:9" pos:end="1415:41"><expr pos:start="1415:9" pos:end="1415:40"><name pos:start="1415:9" pos:end="1415:11">reg</name> <operator pos:start="1415:13" pos:end="1415:13">=</operator> <operator pos:start="1415:15" pos:end="1415:15">(</operator><operator pos:start="1415:16" pos:end="1415:16">(</operator><name pos:start="1415:17" pos:end="1415:21">modrm</name> <operator pos:start="1415:23" pos:end="1415:24">&gt;&gt;</operator> <literal type="number" pos:start="1415:26" pos:end="1415:26">3</literal><operator pos:start="1415:27" pos:end="1415:27">)</operator> <operator pos:start="1415:29" pos:end="1415:29">&amp;</operator> <literal type="number" pos:start="1415:31" pos:end="1415:31">7</literal><operator pos:start="1415:32" pos:end="1415:32">)</operator> <operator pos:start="1415:34" pos:end="1415:34">|</operator> <name pos:start="1415:36" pos:end="1415:40">rex_r</name></expr>;</expr_stmt>

        <if_stmt pos:start="1417:9" pos:end="1423:30"><if pos:start="1417:9" pos:end="1419:48">if <condition pos:start="1417:12" pos:end="1417:22">(<expr pos:start="1417:13" pos:end="1417:21"><name pos:start="1417:13" pos:end="1417:13">b</name> <operator pos:start="1417:15" pos:end="1417:16">==</operator> <literal type="number" pos:start="1417:18" pos:end="1417:21">0x69</literal></expr>)</condition><block type="pseudo" pos:start="1419:13" pos:end="1419:48"><block_content pos:start="1419:13" pos:end="1419:48">

            <expr_stmt pos:start="1419:13" pos:end="1419:48"><expr pos:start="1419:13" pos:end="1419:47"><name pos:start="1419:13" pos:end="1419:25"><name pos:start="1419:13" pos:end="1419:13">s</name><operator pos:start="1419:14" pos:end="1419:15">-&gt;</operator><name pos:start="1419:16" pos:end="1419:25">rip_offset</name></name> <operator pos:start="1419:27" pos:end="1419:27">=</operator> <call pos:start="1419:29" pos:end="1419:47"><name pos:start="1419:29" pos:end="1419:43">insn_const_size</name><argument_list pos:start="1419:44" pos:end="1419:47">(<argument pos:start="1419:45" pos:end="1419:46"><expr pos:start="1419:45" pos:end="1419:46"><name pos:start="1419:45" pos:end="1419:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="1421:9" pos:end="1423:30">else if <condition pos:start="1421:17" pos:end="1421:27">(<expr pos:start="1421:18" pos:end="1421:26"><name pos:start="1421:18" pos:end="1421:18">b</name> <operator pos:start="1421:20" pos:end="1421:21">==</operator> <literal type="number" pos:start="1421:23" pos:end="1421:26">0x6b</literal></expr>)</condition><block type="pseudo" pos:start="1423:13" pos:end="1423:30"><block_content pos:start="1423:13" pos:end="1423:30">

            <expr_stmt pos:start="1423:13" pos:end="1423:30"><expr pos:start="1423:13" pos:end="1423:29"><name pos:start="1423:13" pos:end="1423:25"><name pos:start="1423:13" pos:end="1423:13">s</name><operator pos:start="1423:14" pos:end="1423:15">-&gt;</operator><name pos:start="1423:16" pos:end="1423:25">rip_offset</name></name> <operator pos:start="1423:27" pos:end="1423:27">=</operator> <literal type="number" pos:start="1423:29" pos:end="1423:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1425:9" pos:end="1425:54"><expr pos:start="1425:9" pos:end="1425:53"><call pos:start="1425:9" pos:end="1425:53"><name pos:start="1425:9" pos:end="1425:22">gen_ldst_modrm</name><argument_list pos:start="1425:23" pos:end="1425:53">(<argument pos:start="1425:24" pos:end="1425:26"><expr pos:start="1425:24" pos:end="1425:26"><name pos:start="1425:24" pos:end="1425:26">env</name></expr></argument>, <argument pos:start="1425:29" pos:end="1425:29"><expr pos:start="1425:29" pos:end="1425:29"><name pos:start="1425:29" pos:end="1425:29">s</name></expr></argument>, <argument pos:start="1425:32" pos:end="1425:36"><expr pos:start="1425:32" pos:end="1425:36"><name pos:start="1425:32" pos:end="1425:36">modrm</name></expr></argument>, <argument pos:start="1425:39" pos:end="1425:40"><expr pos:start="1425:39" pos:end="1425:40"><name pos:start="1425:39" pos:end="1425:40">ot</name></expr></argument>, <argument pos:start="1425:43" pos:end="1425:49"><expr pos:start="1425:43" pos:end="1425:49"><name pos:start="1425:43" pos:end="1425:49">OR_TMP0</name></expr></argument>, <argument pos:start="1425:52" pos:end="1425:52"><expr pos:start="1425:52" pos:end="1425:52"><literal type="number" pos:start="1425:52" pos:end="1425:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1427:9" pos:end="1443:9"><if pos:start="1427:9" pos:end="1433:9">if <condition pos:start="1427:12" pos:end="1427:22">(<expr pos:start="1427:13" pos:end="1427:21"><name pos:start="1427:13" pos:end="1427:13">b</name> <operator pos:start="1427:15" pos:end="1427:16">==</operator> <literal type="number" pos:start="1427:18" pos:end="1427:21">0x69</literal></expr>)</condition> <block pos:start="1427:24" pos:end="1433:9">{<block_content pos:start="1429:13" pos:end="1431:41">

            <expr_stmt pos:start="1429:13" pos:end="1429:39"><expr pos:start="1429:13" pos:end="1429:38"><name pos:start="1429:13" pos:end="1429:15">val</name> <operator pos:start="1429:17" pos:end="1429:17">=</operator> <call pos:start="1429:19" pos:end="1429:38"><name pos:start="1429:19" pos:end="1429:26">insn_get</name><argument_list pos:start="1429:27" pos:end="1429:38">(<argument pos:start="1429:28" pos:end="1429:30"><expr pos:start="1429:28" pos:end="1429:30"><name pos:start="1429:28" pos:end="1429:30">env</name></expr></argument>, <argument pos:start="1429:33" pos:end="1429:33"><expr pos:start="1429:33" pos:end="1429:33"><name pos:start="1429:33" pos:end="1429:33">s</name></expr></argument>, <argument pos:start="1429:36" pos:end="1429:37"><expr pos:start="1429:36" pos:end="1429:37"><name pos:start="1429:36" pos:end="1429:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1431:13" pos:end="1431:41"><expr pos:start="1431:13" pos:end="1431:40"><call pos:start="1431:13" pos:end="1431:40"><name pos:start="1431:13" pos:end="1431:27">tcg_gen_movi_tl</name><argument_list pos:start="1431:28" pos:end="1431:40">(<argument pos:start="1431:29" pos:end="1431:34"><expr pos:start="1431:29" pos:end="1431:34"><name pos:start="1431:29" pos:end="1431:34">cpu_T1</name></expr></argument>, <argument pos:start="1431:37" pos:end="1431:39"><expr pos:start="1431:37" pos:end="1431:39"><name pos:start="1431:37" pos:end="1431:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1433:11" pos:end="1439:9">else if <condition pos:start="1433:19" pos:end="1433:29">(<expr pos:start="1433:20" pos:end="1433:28"><name pos:start="1433:20" pos:end="1433:20">b</name> <operator pos:start="1433:22" pos:end="1433:23">==</operator> <literal type="number" pos:start="1433:25" pos:end="1433:28">0x6b</literal></expr>)</condition> <block pos:start="1433:31" pos:end="1439:9">{<block_content pos:start="1435:13" pos:end="1437:41">

            <expr_stmt pos:start="1435:13" pos:end="1435:49"><expr pos:start="1435:13" pos:end="1435:48"><name pos:start="1435:13" pos:end="1435:15">val</name> <operator pos:start="1435:17" pos:end="1435:17">=</operator> <operator pos:start="1435:19" pos:end="1435:19">(</operator><name pos:start="1435:20" pos:end="1435:25">int8_t</name><operator pos:start="1435:26" pos:end="1435:26">)</operator><call pos:start="1435:27" pos:end="1435:48"><name pos:start="1435:27" pos:end="1435:34">insn_get</name><argument_list pos:start="1435:35" pos:end="1435:48">(<argument pos:start="1435:36" pos:end="1435:38"><expr pos:start="1435:36" pos:end="1435:38"><name pos:start="1435:36" pos:end="1435:38">env</name></expr></argument>, <argument pos:start="1435:41" pos:end="1435:41"><expr pos:start="1435:41" pos:end="1435:41"><name pos:start="1435:41" pos:end="1435:41">s</name></expr></argument>, <argument pos:start="1435:44" pos:end="1435:47"><expr pos:start="1435:44" pos:end="1435:47"><name pos:start="1435:44" pos:end="1435:47">MO_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1437:13" pos:end="1437:41"><expr pos:start="1437:13" pos:end="1437:40"><call pos:start="1437:13" pos:end="1437:40"><name pos:start="1437:13" pos:end="1437:27">tcg_gen_movi_tl</name><argument_list pos:start="1437:28" pos:end="1437:40">(<argument pos:start="1437:29" pos:end="1437:34"><expr pos:start="1437:29" pos:end="1437:34"><name pos:start="1437:29" pos:end="1437:34">cpu_T1</name></expr></argument>, <argument pos:start="1437:37" pos:end="1437:39"><expr pos:start="1437:37" pos:end="1437:39"><name pos:start="1437:37" pos:end="1437:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1439:11" pos:end="1443:9">else <block pos:start="1439:16" pos:end="1443:9">{<block_content pos:start="1441:13" pos:end="1441:46">

            <expr_stmt pos:start="1441:13" pos:end="1441:46"><expr pos:start="1441:13" pos:end="1441:45"><call pos:start="1441:13" pos:end="1441:45"><name pos:start="1441:13" pos:end="1441:28">gen_op_mov_v_reg</name><argument_list pos:start="1441:29" pos:end="1441:45">(<argument pos:start="1441:30" pos:end="1441:31"><expr pos:start="1441:30" pos:end="1441:31"><name pos:start="1441:30" pos:end="1441:31">ot</name></expr></argument>, <argument pos:start="1441:34" pos:end="1441:39"><expr pos:start="1441:34" pos:end="1441:39"><name pos:start="1441:34" pos:end="1441:39">cpu_T1</name></expr></argument>, <argument pos:start="1441:42" pos:end="1441:44"><expr pos:start="1441:42" pos:end="1441:44"><name pos:start="1441:42" pos:end="1441:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="1445:9" pos:end="1505:9">switch <condition pos:start="1445:16" pos:end="1445:19">(<expr pos:start="1445:17" pos:end="1445:18"><name pos:start="1445:17" pos:end="1445:18">ot</name></expr>)</condition> <block pos:start="1445:21" pos:end="1505:9">{<block_content pos:start="1449:9" pos:end="1503:18">

<cpp:ifdef pos:start="1447:1" pos:end="1447:20">#<cpp:directive pos:start="1447:2" pos:end="1447:6">ifdef</cpp:directive> <name pos:start="1447:8" pos:end="1447:20">TARGET_X86_64</name></cpp:ifdef>

        <case pos:start="1449:9" pos:end="1449:19">case <expr pos:start="1449:14" pos:end="1449:18"><name pos:start="1449:14" pos:end="1449:18">MO_64</name></expr>:</case>

            <expr_stmt pos:start="1451:13" pos:end="1451:69"><expr pos:start="1451:13" pos:end="1451:68"><call pos:start="1451:13" pos:end="1451:68"><name pos:start="1451:13" pos:end="1451:29">tcg_gen_muls2_i64</name><argument_list pos:start="1451:30" pos:end="1451:68">(<argument pos:start="1451:31" pos:end="1451:43"><expr pos:start="1451:31" pos:end="1451:43"><name pos:start="1451:31" pos:end="1451:43"><name pos:start="1451:31" pos:end="1451:38">cpu_regs</name><index pos:start="1451:39" pos:end="1451:43">[<expr pos:start="1451:40" pos:end="1451:42"><name pos:start="1451:40" pos:end="1451:42">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1451:46" pos:end="1451:51"><expr pos:start="1451:46" pos:end="1451:51"><name pos:start="1451:46" pos:end="1451:51">cpu_T1</name></expr></argument>, <argument pos:start="1451:54" pos:end="1451:59"><expr pos:start="1451:54" pos:end="1451:59"><name pos:start="1451:54" pos:end="1451:59">cpu_T0</name></expr></argument>, <argument pos:start="1451:62" pos:end="1451:67"><expr pos:start="1451:62" pos:end="1451:67"><name pos:start="1451:62" pos:end="1451:67">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1453:13" pos:end="1453:54"><expr pos:start="1453:13" pos:end="1453:53"><call pos:start="1453:13" pos:end="1453:53"><name pos:start="1453:13" pos:end="1453:26">tcg_gen_mov_tl</name><argument_list pos:start="1453:27" pos:end="1453:53">(<argument pos:start="1453:28" pos:end="1453:37"><expr pos:start="1453:28" pos:end="1453:37"><name pos:start="1453:28" pos:end="1453:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1453:40" pos:end="1453:52"><expr pos:start="1453:40" pos:end="1453:52"><name pos:start="1453:40" pos:end="1453:52"><name pos:start="1453:40" pos:end="1453:47">cpu_regs</name><index pos:start="1453:48" pos:end="1453:52">[<expr pos:start="1453:49" pos:end="1453:51"><name pos:start="1453:49" pos:end="1453:51">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1455:13" pos:end="1455:56"><expr pos:start="1455:13" pos:end="1455:55"><call pos:start="1455:13" pos:end="1455:55"><name pos:start="1455:13" pos:end="1455:27">tcg_gen_sari_tl</name><argument_list pos:start="1455:28" pos:end="1455:55">(<argument pos:start="1455:29" pos:end="1455:38"><expr pos:start="1455:29" pos:end="1455:38"><name pos:start="1455:29" pos:end="1455:38">cpu_cc_src</name></expr></argument>, <argument pos:start="1455:41" pos:end="1455:50"><expr pos:start="1455:41" pos:end="1455:50"><name pos:start="1455:41" pos:end="1455:50">cpu_cc_dst</name></expr></argument>, <argument pos:start="1455:53" pos:end="1455:54"><expr pos:start="1455:53" pos:end="1455:54"><literal type="number" pos:start="1455:53" pos:end="1455:54">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1457:13" pos:end="1457:59"><expr pos:start="1457:13" pos:end="1457:58"><call pos:start="1457:13" pos:end="1457:58"><name pos:start="1457:13" pos:end="1457:26">tcg_gen_sub_tl</name><argument_list pos:start="1457:27" pos:end="1457:58">(<argument pos:start="1457:28" pos:end="1457:37"><expr pos:start="1457:28" pos:end="1457:37"><name pos:start="1457:28" pos:end="1457:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1457:40" pos:end="1457:49"><expr pos:start="1457:40" pos:end="1457:49"><name pos:start="1457:40" pos:end="1457:49">cpu_cc_src</name></expr></argument>, <argument pos:start="1457:52" pos:end="1457:57"><expr pos:start="1457:52" pos:end="1457:57"><name pos:start="1457:52" pos:end="1457:57">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1459:13" pos:end="1462:0">break;</break>

<cpp:endif pos:start="1461:1" pos:end="1461:6">#<cpp:directive pos:start="1461:2" pos:end="1461:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1463:9" pos:end="1463:19">case <expr pos:start="1463:14" pos:end="1463:18"><name pos:start="1463:14" pos:end="1463:18">MO_32</name></expr>:</case>

            <expr_stmt pos:start="1465:13" pos:end="1465:55"><expr pos:start="1465:13" pos:end="1465:54"><call pos:start="1465:13" pos:end="1465:54"><name pos:start="1465:13" pos:end="1465:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1465:33" pos:end="1465:54">(<argument pos:start="1465:34" pos:end="1465:45"><expr pos:start="1465:34" pos:end="1465:45"><name pos:start="1465:34" pos:end="1465:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1465:48" pos:end="1465:53"><expr pos:start="1465:48" pos:end="1465:53"><name pos:start="1465:48" pos:end="1465:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1467:13" pos:end="1467:55"><expr pos:start="1467:13" pos:end="1467:54"><call pos:start="1467:13" pos:end="1467:54"><name pos:start="1467:13" pos:end="1467:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1467:33" pos:end="1467:54">(<argument pos:start="1467:34" pos:end="1467:45"><expr pos:start="1467:34" pos:end="1467:45"><name pos:start="1467:34" pos:end="1467:45">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="1467:48" pos:end="1467:53"><expr pos:start="1467:48" pos:end="1467:53"><name pos:start="1467:48" pos:end="1467:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1469:13" pos:end="1471:58"><expr pos:start="1469:13" pos:end="1471:57"><call pos:start="1469:13" pos:end="1471:57"><name pos:start="1469:13" pos:end="1469:29">tcg_gen_muls2_i32</name><argument_list pos:start="1469:30" pos:end="1471:57">(<argument pos:start="1469:31" pos:end="1469:42"><expr pos:start="1469:31" pos:end="1469:42"><name pos:start="1469:31" pos:end="1469:42">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1469:45" pos:end="1469:56"><expr pos:start="1469:45" pos:end="1469:56"><name pos:start="1469:45" pos:end="1469:56">cpu_tmp3_i32</name></expr></argument>,

                              <argument pos:start="1471:31" pos:end="1471:42"><expr pos:start="1471:31" pos:end="1471:42"><name pos:start="1471:31" pos:end="1471:42">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1471:45" pos:end="1471:56"><expr pos:start="1471:45" pos:end="1471:56"><name pos:start="1471:45" pos:end="1471:56">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1473:13" pos:end="1473:61"><expr pos:start="1473:13" pos:end="1473:60"><call pos:start="1473:13" pos:end="1473:60"><name pos:start="1473:13" pos:end="1473:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="1473:32" pos:end="1473:60">(<argument pos:start="1473:33" pos:end="1473:45"><expr pos:start="1473:33" pos:end="1473:45"><name pos:start="1473:33" pos:end="1473:45"><name pos:start="1473:33" pos:end="1473:40">cpu_regs</name><index pos:start="1473:41" pos:end="1473:45">[<expr pos:start="1473:42" pos:end="1473:44"><name pos:start="1473:42" pos:end="1473:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1473:48" pos:end="1473:59"><expr pos:start="1473:48" pos:end="1473:59"><name pos:start="1473:48" pos:end="1473:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1475:13" pos:end="1475:61"><expr pos:start="1475:13" pos:end="1475:60"><call pos:start="1475:13" pos:end="1475:60"><name pos:start="1475:13" pos:end="1475:28">tcg_gen_sari_i32</name><argument_list pos:start="1475:29" pos:end="1475:60">(<argument pos:start="1475:30" pos:end="1475:41"><expr pos:start="1475:30" pos:end="1475:41"><name pos:start="1475:30" pos:end="1475:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1475:44" pos:end="1475:55"><expr pos:start="1475:44" pos:end="1475:55"><name pos:start="1475:44" pos:end="1475:55">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1475:58" pos:end="1475:59"><expr pos:start="1475:58" pos:end="1475:59"><literal type="number" pos:start="1475:58" pos:end="1475:59">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1477:13" pos:end="1477:54"><expr pos:start="1477:13" pos:end="1477:53"><call pos:start="1477:13" pos:end="1477:53"><name pos:start="1477:13" pos:end="1477:26">tcg_gen_mov_tl</name><argument_list pos:start="1477:27" pos:end="1477:53">(<argument pos:start="1477:28" pos:end="1477:37"><expr pos:start="1477:28" pos:end="1477:37"><name pos:start="1477:28" pos:end="1477:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1477:40" pos:end="1477:52"><expr pos:start="1477:40" pos:end="1477:52"><name pos:start="1477:40" pos:end="1477:52"><name pos:start="1477:40" pos:end="1477:47">cpu_regs</name><index pos:start="1477:48" pos:end="1477:52">[<expr pos:start="1477:49" pos:end="1477:51"><name pos:start="1477:49" pos:end="1477:51">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1479:13" pos:end="1479:70"><expr pos:start="1479:13" pos:end="1479:69"><call pos:start="1479:13" pos:end="1479:69"><name pos:start="1479:13" pos:end="1479:27">tcg_gen_sub_i32</name><argument_list pos:start="1479:28" pos:end="1479:69">(<argument pos:start="1479:29" pos:end="1479:40"><expr pos:start="1479:29" pos:end="1479:40"><name pos:start="1479:29" pos:end="1479:40">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1479:43" pos:end="1479:54"><expr pos:start="1479:43" pos:end="1479:54"><name pos:start="1479:43" pos:end="1479:54">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1479:57" pos:end="1479:68"><expr pos:start="1479:57" pos:end="1479:68"><name pos:start="1479:57" pos:end="1479:68">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1481:13" pos:end="1481:58"><expr pos:start="1481:13" pos:end="1481:57"><call pos:start="1481:13" pos:end="1481:57"><name pos:start="1481:13" pos:end="1481:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="1481:32" pos:end="1481:57">(<argument pos:start="1481:33" pos:end="1481:42"><expr pos:start="1481:33" pos:end="1481:42"><name pos:start="1481:33" pos:end="1481:42">cpu_cc_src</name></expr></argument>, <argument pos:start="1481:45" pos:end="1481:56"><expr pos:start="1481:45" pos:end="1481:56"><name pos:start="1481:45" pos:end="1481:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1483:13" pos:end="1483:18">break;</break>

        <default pos:start="1485:9" pos:end="1485:16">default:</default>

            <expr_stmt pos:start="1487:13" pos:end="1487:46"><expr pos:start="1487:13" pos:end="1487:45"><call pos:start="1487:13" pos:end="1487:45"><name pos:start="1487:13" pos:end="1487:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1487:30" pos:end="1487:45">(<argument pos:start="1487:31" pos:end="1487:36"><expr pos:start="1487:31" pos:end="1487:36"><name pos:start="1487:31" pos:end="1487:36">cpu_T0</name></expr></argument>, <argument pos:start="1487:39" pos:end="1487:44"><expr pos:start="1487:39" pos:end="1487:44"><name pos:start="1487:39" pos:end="1487:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1489:13" pos:end="1489:46"><expr pos:start="1489:13" pos:end="1489:45"><call pos:start="1489:13" pos:end="1489:45"><name pos:start="1489:13" pos:end="1489:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1489:30" pos:end="1489:45">(<argument pos:start="1489:31" pos:end="1489:36"><expr pos:start="1489:31" pos:end="1489:36"><name pos:start="1489:31" pos:end="1489:36">cpu_T1</name></expr></argument>, <argument pos:start="1489:39" pos:end="1489:44"><expr pos:start="1489:39" pos:end="1489:44"><name pos:start="1489:39" pos:end="1489:44">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1491:13" pos:end="1491:59">/* XXX: use 32 bit mul which could be faster */</comment>

            <expr_stmt pos:start="1493:13" pos:end="1493:51"><expr pos:start="1493:13" pos:end="1493:50"><call pos:start="1493:13" pos:end="1493:50"><name pos:start="1493:13" pos:end="1493:26">tcg_gen_mul_tl</name><argument_list pos:start="1493:27" pos:end="1493:50">(<argument pos:start="1493:28" pos:end="1493:33"><expr pos:start="1493:28" pos:end="1493:33"><name pos:start="1493:28" pos:end="1493:33">cpu_T0</name></expr></argument>, <argument pos:start="1493:36" pos:end="1493:41"><expr pos:start="1493:36" pos:end="1493:41"><name pos:start="1493:36" pos:end="1493:41">cpu_T0</name></expr></argument>, <argument pos:start="1493:44" pos:end="1493:49"><expr pos:start="1493:44" pos:end="1493:49"><name pos:start="1493:44" pos:end="1493:49">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1495:13" pos:end="1495:47"><expr pos:start="1495:13" pos:end="1495:46"><call pos:start="1495:13" pos:end="1495:46"><name pos:start="1495:13" pos:end="1495:26">tcg_gen_mov_tl</name><argument_list pos:start="1495:27" pos:end="1495:46">(<argument pos:start="1495:28" pos:end="1495:37"><expr pos:start="1495:28" pos:end="1495:37"><name pos:start="1495:28" pos:end="1495:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1495:40" pos:end="1495:45"><expr pos:start="1495:40" pos:end="1495:45"><name pos:start="1495:40" pos:end="1495:45">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1497:13" pos:end="1497:48"><expr pos:start="1497:13" pos:end="1497:47"><call pos:start="1497:13" pos:end="1497:47"><name pos:start="1497:13" pos:end="1497:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1497:30" pos:end="1497:47">(<argument pos:start="1497:31" pos:end="1497:38"><expr pos:start="1497:31" pos:end="1497:38"><name pos:start="1497:31" pos:end="1497:38">cpu_tmp0</name></expr></argument>, <argument pos:start="1497:41" pos:end="1497:46"><expr pos:start="1497:41" pos:end="1497:46"><name pos:start="1497:41" pos:end="1497:46">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1499:13" pos:end="1499:57"><expr pos:start="1499:13" pos:end="1499:56"><call pos:start="1499:13" pos:end="1499:56"><name pos:start="1499:13" pos:end="1499:26">tcg_gen_sub_tl</name><argument_list pos:start="1499:27" pos:end="1499:56">(<argument pos:start="1499:28" pos:end="1499:37"><expr pos:start="1499:28" pos:end="1499:37"><name pos:start="1499:28" pos:end="1499:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1499:40" pos:end="1499:45"><expr pos:start="1499:40" pos:end="1499:45"><name pos:start="1499:40" pos:end="1499:45">cpu_T0</name></expr></argument>, <argument pos:start="1499:48" pos:end="1499:55"><expr pos:start="1499:48" pos:end="1499:55"><name pos:start="1499:48" pos:end="1499:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1501:13" pos:end="1501:46"><expr pos:start="1501:13" pos:end="1501:45"><call pos:start="1501:13" pos:end="1501:45"><name pos:start="1501:13" pos:end="1501:28">gen_op_mov_reg_v</name><argument_list pos:start="1501:29" pos:end="1501:45">(<argument pos:start="1501:30" pos:end="1501:31"><expr pos:start="1501:30" pos:end="1501:31"><name pos:start="1501:30" pos:end="1501:31">ot</name></expr></argument>, <argument pos:start="1501:34" pos:end="1501:36"><expr pos:start="1501:34" pos:end="1501:36"><name pos:start="1501:34" pos:end="1501:36">reg</name></expr></argument>, <argument pos:start="1501:39" pos:end="1501:44"><expr pos:start="1501:39" pos:end="1501:44"><name pos:start="1501:39" pos:end="1501:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1503:13" pos:end="1503:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="1507:9" pos:end="1507:38"><expr pos:start="1507:9" pos:end="1507:37"><call pos:start="1507:9" pos:end="1507:37"><name pos:start="1507:9" pos:end="1507:17">set_cc_op</name><argument_list pos:start="1507:18" pos:end="1507:37">(<argument pos:start="1507:19" pos:end="1507:19"><expr pos:start="1507:19" pos:end="1507:19"><name pos:start="1507:19" pos:end="1507:19">s</name></expr></argument>, <argument pos:start="1507:22" pos:end="1507:36"><expr pos:start="1507:22" pos:end="1507:36"><name pos:start="1507:22" pos:end="1507:31">CC_OP_MULB</name> <operator pos:start="1507:33" pos:end="1507:33">+</operator> <name pos:start="1507:35" pos:end="1507:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1509:9" pos:end="1509:14">break;</break>

    <case pos:start="1511:5" pos:end="1511:15">case <expr pos:start="1511:10" pos:end="1511:14"><literal type="number" pos:start="1511:10" pos:end="1511:14">0x1c0</literal></expr>:</case>

    <case pos:start="1513:5" pos:end="1513:15">case <expr pos:start="1513:10" pos:end="1513:14"><literal type="number" pos:start="1513:10" pos:end="1513:14">0x1c1</literal></expr>:</case> <comment type="block" pos:start="1513:17" pos:end="1513:33">/* xadd Ev, Gv */</comment>

        <expr_stmt pos:start="1515:9" pos:end="1515:30"><expr pos:start="1515:9" pos:end="1515:29"><name pos:start="1515:9" pos:end="1515:10">ot</name> <operator pos:start="1515:12" pos:end="1515:12">=</operator> <call pos:start="1515:14" pos:end="1515:29"><name pos:start="1515:14" pos:end="1515:19">mo_b_d</name><argument_list pos:start="1515:20" pos:end="1515:29">(<argument pos:start="1515:21" pos:end="1515:21"><expr pos:start="1515:21" pos:end="1515:21"><name pos:start="1515:21" pos:end="1515:21">b</name></expr></argument>, <argument pos:start="1515:24" pos:end="1515:28"><expr pos:start="1515:24" pos:end="1515:28"><name pos:start="1515:24" pos:end="1515:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1517:9" pos:end="1517:38"><expr pos:start="1517:9" pos:end="1517:37"><name pos:start="1517:9" pos:end="1517:13">modrm</name> <operator pos:start="1517:15" pos:end="1517:15">=</operator> <call pos:start="1517:17" pos:end="1517:37"><name pos:start="1517:17" pos:end="1517:29">x86_ldub_code</name><argument_list pos:start="1517:30" pos:end="1517:37">(<argument pos:start="1517:31" pos:end="1517:33"><expr pos:start="1517:31" pos:end="1517:33"><name pos:start="1517:31" pos:end="1517:33">env</name></expr></argument>, <argument pos:start="1517:36" pos:end="1517:36"><expr pos:start="1517:36" pos:end="1517:36"><name pos:start="1517:36" pos:end="1517:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1519:9" pos:end="1519:41"><expr pos:start="1519:9" pos:end="1519:40"><name pos:start="1519:9" pos:end="1519:11">reg</name> <operator pos:start="1519:13" pos:end="1519:13">=</operator> <operator pos:start="1519:15" pos:end="1519:15">(</operator><operator pos:start="1519:16" pos:end="1519:16">(</operator><name pos:start="1519:17" pos:end="1519:21">modrm</name> <operator pos:start="1519:23" pos:end="1519:24">&gt;&gt;</operator> <literal type="number" pos:start="1519:26" pos:end="1519:26">3</literal><operator pos:start="1519:27" pos:end="1519:27">)</operator> <operator pos:start="1519:29" pos:end="1519:29">&amp;</operator> <literal type="number" pos:start="1519:31" pos:end="1519:31">7</literal><operator pos:start="1519:32" pos:end="1519:32">)</operator> <operator pos:start="1519:34" pos:end="1519:34">|</operator> <name pos:start="1519:36" pos:end="1519:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1521:9" pos:end="1521:31"><expr pos:start="1521:9" pos:end="1521:30"><name pos:start="1521:9" pos:end="1521:11">mod</name> <operator pos:start="1521:13" pos:end="1521:13">=</operator> <operator pos:start="1521:15" pos:end="1521:15">(</operator><name pos:start="1521:16" pos:end="1521:20">modrm</name> <operator pos:start="1521:22" pos:end="1521:23">&gt;&gt;</operator> <literal type="number" pos:start="1521:25" pos:end="1521:25">6</literal><operator pos:start="1521:26" pos:end="1521:26">)</operator> <operator pos:start="1521:28" pos:end="1521:28">&amp;</operator> <literal type="number" pos:start="1521:30" pos:end="1521:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1523:9" pos:end="1523:42"><expr pos:start="1523:9" pos:end="1523:41"><call pos:start="1523:9" pos:end="1523:41"><name pos:start="1523:9" pos:end="1523:24">gen_op_mov_v_reg</name><argument_list pos:start="1523:25" pos:end="1523:41">(<argument pos:start="1523:26" pos:end="1523:27"><expr pos:start="1523:26" pos:end="1523:27"><name pos:start="1523:26" pos:end="1523:27">ot</name></expr></argument>, <argument pos:start="1523:30" pos:end="1523:35"><expr pos:start="1523:30" pos:end="1523:35"><name pos:start="1523:30" pos:end="1523:35">cpu_T0</name></expr></argument>, <argument pos:start="1523:38" pos:end="1523:40"><expr pos:start="1523:38" pos:end="1523:40"><name pos:start="1523:38" pos:end="1523:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1525:9" pos:end="1561:9"><if pos:start="1525:9" pos:end="1537:9">if <condition pos:start="1525:12" pos:end="1525:21">(<expr pos:start="1525:13" pos:end="1525:20"><name pos:start="1525:13" pos:end="1525:15">mod</name> <operator pos:start="1525:17" pos:end="1525:18">==</operator> <literal type="number" pos:start="1525:20" pos:end="1525:20">3</literal></expr>)</condition> <block pos:start="1525:23" pos:end="1537:9">{<block_content pos:start="1527:13" pos:end="1535:45">

            <expr_stmt pos:start="1527:13" pos:end="1527:40"><expr pos:start="1527:13" pos:end="1527:39"><name pos:start="1527:13" pos:end="1527:14">rm</name> <operator pos:start="1527:16" pos:end="1527:16">=</operator> <operator pos:start="1527:18" pos:end="1527:18">(</operator><name pos:start="1527:19" pos:end="1527:23">modrm</name> <operator pos:start="1527:25" pos:end="1527:25">&amp;</operator> <literal type="number" pos:start="1527:27" pos:end="1527:27">7</literal><operator pos:start="1527:28" pos:end="1527:28">)</operator> <operator pos:start="1527:30" pos:end="1527:30">|</operator> <call pos:start="1527:32" pos:end="1527:39"><name pos:start="1527:32" pos:end="1527:36">REX_B</name><argument_list pos:start="1527:37" pos:end="1527:39">(<argument pos:start="1527:38" pos:end="1527:38"><expr pos:start="1527:38" pos:end="1527:38"><name pos:start="1527:38" pos:end="1527:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1529:13" pos:end="1529:45"><expr pos:start="1529:13" pos:end="1529:44"><call pos:start="1529:13" pos:end="1529:44"><name pos:start="1529:13" pos:end="1529:28">gen_op_mov_v_reg</name><argument_list pos:start="1529:29" pos:end="1529:44">(<argument pos:start="1529:30" pos:end="1529:31"><expr pos:start="1529:30" pos:end="1529:31"><name pos:start="1529:30" pos:end="1529:31">ot</name></expr></argument>, <argument pos:start="1529:34" pos:end="1529:39"><expr pos:start="1529:34" pos:end="1529:39"><name pos:start="1529:34" pos:end="1529:39">cpu_T1</name></expr></argument>, <argument pos:start="1529:42" pos:end="1529:43"><expr pos:start="1529:42" pos:end="1529:43"><name pos:start="1529:42" pos:end="1529:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1531:13" pos:end="1531:51"><expr pos:start="1531:13" pos:end="1531:50"><call pos:start="1531:13" pos:end="1531:50"><name pos:start="1531:13" pos:end="1531:26">tcg_gen_add_tl</name><argument_list pos:start="1531:27" pos:end="1531:50">(<argument pos:start="1531:28" pos:end="1531:33"><expr pos:start="1531:28" pos:end="1531:33"><name pos:start="1531:28" pos:end="1531:33">cpu_T0</name></expr></argument>, <argument pos:start="1531:36" pos:end="1531:41"><expr pos:start="1531:36" pos:end="1531:41"><name pos:start="1531:36" pos:end="1531:41">cpu_T0</name></expr></argument>, <argument pos:start="1531:44" pos:end="1531:49"><expr pos:start="1531:44" pos:end="1531:49"><name pos:start="1531:44" pos:end="1531:49">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1533:13" pos:end="1533:46"><expr pos:start="1533:13" pos:end="1533:45"><call pos:start="1533:13" pos:end="1533:45"><name pos:start="1533:13" pos:end="1533:28">gen_op_mov_reg_v</name><argument_list pos:start="1533:29" pos:end="1533:45">(<argument pos:start="1533:30" pos:end="1533:31"><expr pos:start="1533:30" pos:end="1533:31"><name pos:start="1533:30" pos:end="1533:31">ot</name></expr></argument>, <argument pos:start="1533:34" pos:end="1533:36"><expr pos:start="1533:34" pos:end="1533:36"><name pos:start="1533:34" pos:end="1533:36">reg</name></expr></argument>, <argument pos:start="1533:39" pos:end="1533:44"><expr pos:start="1533:39" pos:end="1533:44"><name pos:start="1533:39" pos:end="1533:44">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1535:13" pos:end="1535:45"><expr pos:start="1535:13" pos:end="1535:44"><call pos:start="1535:13" pos:end="1535:44"><name pos:start="1535:13" pos:end="1535:28">gen_op_mov_reg_v</name><argument_list pos:start="1535:29" pos:end="1535:44">(<argument pos:start="1535:30" pos:end="1535:31"><expr pos:start="1535:30" pos:end="1535:31"><name pos:start="1535:30" pos:end="1535:31">ot</name></expr></argument>, <argument pos:start="1535:34" pos:end="1535:35"><expr pos:start="1535:34" pos:end="1535:35"><name pos:start="1535:34" pos:end="1535:35">rm</name></expr></argument>, <argument pos:start="1535:38" pos:end="1535:43"><expr pos:start="1535:38" pos:end="1535:43"><name pos:start="1535:38" pos:end="1535:43">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1537:11" pos:end="1561:9">else <block pos:start="1537:16" pos:end="1561:9">{<block_content pos:start="1539:13" pos:end="1559:46">

            <expr_stmt pos:start="1539:13" pos:end="1539:41"><expr pos:start="1539:13" pos:end="1539:40"><call pos:start="1539:13" pos:end="1539:40"><name pos:start="1539:13" pos:end="1539:25">gen_lea_modrm</name><argument_list pos:start="1539:26" pos:end="1539:40">(<argument pos:start="1539:27" pos:end="1539:29"><expr pos:start="1539:27" pos:end="1539:29"><name pos:start="1539:27" pos:end="1539:29">env</name></expr></argument>, <argument pos:start="1539:32" pos:end="1539:32"><expr pos:start="1539:32" pos:end="1539:32"><name pos:start="1539:32" pos:end="1539:32">s</name></expr></argument>, <argument pos:start="1539:35" pos:end="1539:39"><expr pos:start="1539:35" pos:end="1539:39"><name pos:start="1539:35" pos:end="1539:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1541:13" pos:end="1557:13"><if pos:start="1541:13" pos:end="1549:13">if <condition pos:start="1541:16" pos:end="1541:40">(<expr pos:start="1541:17" pos:end="1541:39"><name pos:start="1541:17" pos:end="1541:25"><name pos:start="1541:17" pos:end="1541:17">s</name><operator pos:start="1541:18" pos:end="1541:19">-&gt;</operator><name pos:start="1541:20" pos:end="1541:25">prefix</name></name> <operator pos:start="1541:27" pos:end="1541:27">&amp;</operator> <name pos:start="1541:29" pos:end="1541:39">PREFIX_LOCK</name></expr>)</condition> <block pos:start="1541:42" pos:end="1549:13">{<block_content pos:start="1543:17" pos:end="1547:55">

                <expr_stmt pos:start="1543:17" pos:end="1545:70"><expr pos:start="1543:17" pos:end="1545:69"><call pos:start="1543:17" pos:end="1545:69"><name pos:start="1543:17" pos:end="1543:43">tcg_gen_atomic_fetch_add_tl</name><argument_list pos:start="1543:44" pos:end="1545:69">(<argument pos:start="1543:45" pos:end="1543:50"><expr pos:start="1543:45" pos:end="1543:50"><name pos:start="1543:45" pos:end="1543:50">cpu_T1</name></expr></argument>, <argument pos:start="1543:53" pos:end="1543:58"><expr pos:start="1543:53" pos:end="1543:58"><name pos:start="1543:53" pos:end="1543:58">cpu_A0</name></expr></argument>, <argument pos:start="1543:61" pos:end="1543:66"><expr pos:start="1543:61" pos:end="1543:66"><name pos:start="1543:61" pos:end="1543:66">cpu_T0</name></expr></argument>,

                                            <argument pos:start="1545:45" pos:end="1545:56"><expr pos:start="1545:45" pos:end="1545:56"><name pos:start="1545:45" pos:end="1545:56"><name pos:start="1545:45" pos:end="1545:45">s</name><operator pos:start="1545:46" pos:end="1545:47">-&gt;</operator><name pos:start="1545:48" pos:end="1545:56">mem_index</name></name></expr></argument>, <argument pos:start="1545:59" pos:end="1545:68"><expr pos:start="1545:59" pos:end="1545:68"><name pos:start="1545:59" pos:end="1545:60">ot</name> <operator pos:start="1545:62" pos:end="1545:62">|</operator> <name pos:start="1545:64" pos:end="1545:68">MO_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1547:17" pos:end="1547:55"><expr pos:start="1547:17" pos:end="1547:54"><call pos:start="1547:17" pos:end="1547:54"><name pos:start="1547:17" pos:end="1547:30">tcg_gen_add_tl</name><argument_list pos:start="1547:31" pos:end="1547:54">(<argument pos:start="1547:32" pos:end="1547:37"><expr pos:start="1547:32" pos:end="1547:37"><name pos:start="1547:32" pos:end="1547:37">cpu_T0</name></expr></argument>, <argument pos:start="1547:40" pos:end="1547:45"><expr pos:start="1547:40" pos:end="1547:45"><name pos:start="1547:40" pos:end="1547:45">cpu_T0</name></expr></argument>, <argument pos:start="1547:48" pos:end="1547:53"><expr pos:start="1547:48" pos:end="1547:53"><name pos:start="1547:48" pos:end="1547:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1549:15" pos:end="1557:13">else <block pos:start="1549:20" pos:end="1557:13">{<block_content pos:start="1551:17" pos:end="1555:51">

                <expr_stmt pos:start="1551:17" pos:end="1551:51"><expr pos:start="1551:17" pos:end="1551:50"><call pos:start="1551:17" pos:end="1551:50"><name pos:start="1551:17" pos:end="1551:27">gen_op_ld_v</name><argument_list pos:start="1551:28" pos:end="1551:50">(<argument pos:start="1551:29" pos:end="1551:29"><expr pos:start="1551:29" pos:end="1551:29"><name pos:start="1551:29" pos:end="1551:29">s</name></expr></argument>, <argument pos:start="1551:32" pos:end="1551:33"><expr pos:start="1551:32" pos:end="1551:33"><name pos:start="1551:32" pos:end="1551:33">ot</name></expr></argument>, <argument pos:start="1551:36" pos:end="1551:41"><expr pos:start="1551:36" pos:end="1551:41"><name pos:start="1551:36" pos:end="1551:41">cpu_T1</name></expr></argument>, <argument pos:start="1551:44" pos:end="1551:49"><expr pos:start="1551:44" pos:end="1551:49"><name pos:start="1551:44" pos:end="1551:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1553:17" pos:end="1553:55"><expr pos:start="1553:17" pos:end="1553:54"><call pos:start="1553:17" pos:end="1553:54"><name pos:start="1553:17" pos:end="1553:30">tcg_gen_add_tl</name><argument_list pos:start="1553:31" pos:end="1553:54">(<argument pos:start="1553:32" pos:end="1553:37"><expr pos:start="1553:32" pos:end="1553:37"><name pos:start="1553:32" pos:end="1553:37">cpu_T0</name></expr></argument>, <argument pos:start="1553:40" pos:end="1553:45"><expr pos:start="1553:40" pos:end="1553:45"><name pos:start="1553:40" pos:end="1553:45">cpu_T0</name></expr></argument>, <argument pos:start="1553:48" pos:end="1553:53"><expr pos:start="1553:48" pos:end="1553:53"><name pos:start="1553:48" pos:end="1553:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1555:17" pos:end="1555:51"><expr pos:start="1555:17" pos:end="1555:50"><call pos:start="1555:17" pos:end="1555:50"><name pos:start="1555:17" pos:end="1555:27">gen_op_st_v</name><argument_list pos:start="1555:28" pos:end="1555:50">(<argument pos:start="1555:29" pos:end="1555:29"><expr pos:start="1555:29" pos:end="1555:29"><name pos:start="1555:29" pos:end="1555:29">s</name></expr></argument>, <argument pos:start="1555:32" pos:end="1555:33"><expr pos:start="1555:32" pos:end="1555:33"><name pos:start="1555:32" pos:end="1555:33">ot</name></expr></argument>, <argument pos:start="1555:36" pos:end="1555:41"><expr pos:start="1555:36" pos:end="1555:41"><name pos:start="1555:36" pos:end="1555:41">cpu_T0</name></expr></argument>, <argument pos:start="1555:44" pos:end="1555:49"><expr pos:start="1555:44" pos:end="1555:49"><name pos:start="1555:44" pos:end="1555:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1559:13" pos:end="1559:46"><expr pos:start="1559:13" pos:end="1559:45"><call pos:start="1559:13" pos:end="1559:45"><name pos:start="1559:13" pos:end="1559:28">gen_op_mov_reg_v</name><argument_list pos:start="1559:29" pos:end="1559:45">(<argument pos:start="1559:30" pos:end="1559:31"><expr pos:start="1559:30" pos:end="1559:31"><name pos:start="1559:30" pos:end="1559:31">ot</name></expr></argument>, <argument pos:start="1559:34" pos:end="1559:36"><expr pos:start="1559:34" pos:end="1559:36"><name pos:start="1559:34" pos:end="1559:36">reg</name></expr></argument>, <argument pos:start="1559:39" pos:end="1559:44"><expr pos:start="1559:39" pos:end="1559:44"><name pos:start="1559:39" pos:end="1559:44">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1563:9" pos:end="1563:28"><expr pos:start="1563:9" pos:end="1563:27"><call pos:start="1563:9" pos:end="1563:27"><name pos:start="1563:9" pos:end="1563:25">gen_op_update2_cc</name><argument_list pos:start="1563:26" pos:end="1563:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1565:9" pos:end="1565:38"><expr pos:start="1565:9" pos:end="1565:37"><call pos:start="1565:9" pos:end="1565:37"><name pos:start="1565:9" pos:end="1565:17">set_cc_op</name><argument_list pos:start="1565:18" pos:end="1565:37">(<argument pos:start="1565:19" pos:end="1565:19"><expr pos:start="1565:19" pos:end="1565:19"><name pos:start="1565:19" pos:end="1565:19">s</name></expr></argument>, <argument pos:start="1565:22" pos:end="1565:36"><expr pos:start="1565:22" pos:end="1565:36"><name pos:start="1565:22" pos:end="1565:31">CC_OP_ADDB</name> <operator pos:start="1565:33" pos:end="1565:33">+</operator> <name pos:start="1565:35" pos:end="1565:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1567:9" pos:end="1567:14">break;</break>

    <case pos:start="1569:5" pos:end="1569:15">case <expr pos:start="1569:10" pos:end="1569:14"><literal type="number" pos:start="1569:10" pos:end="1569:14">0x1b0</literal></expr>:</case>

    <case pos:start="1571:5" pos:end="1571:15">case <expr pos:start="1571:10" pos:end="1571:14"><literal type="number" pos:start="1571:10" pos:end="1571:14">0x1b1</literal></expr>:</case> <comment type="block" pos:start="1571:17" pos:end="1571:36">/* cmpxchg Ev, Gv */</comment>

        <block pos:start="1573:9" pos:end="1679:9">{<block_content pos:start="1575:13" pos:end="1677:32">

            <decl_stmt pos:start="1575:13" pos:end="1575:34"><decl pos:start="1575:13" pos:end="1575:21"><type pos:start="1575:13" pos:end="1575:16"><name pos:start="1575:13" pos:end="1575:16">TCGv</name></type> <name pos:start="1575:18" pos:end="1575:21">oldv</name></decl>, <decl pos:start="1575:24" pos:end="1575:27"><type ref="prev" pos:start="1575:13" pos:end="1575:16"/><name pos:start="1575:24" pos:end="1575:27">newv</name></decl>, <decl pos:start="1575:30" pos:end="1575:33"><type ref="prev" pos:start="1575:13" pos:end="1575:16"/><name pos:start="1575:30" pos:end="1575:33">cmpv</name></decl>;</decl_stmt>



            <expr_stmt pos:start="1579:13" pos:end="1579:34"><expr pos:start="1579:13" pos:end="1579:33"><name pos:start="1579:13" pos:end="1579:14">ot</name> <operator pos:start="1579:16" pos:end="1579:16">=</operator> <call pos:start="1579:18" pos:end="1579:33"><name pos:start="1579:18" pos:end="1579:23">mo_b_d</name><argument_list pos:start="1579:24" pos:end="1579:33">(<argument pos:start="1579:25" pos:end="1579:25"><expr pos:start="1579:25" pos:end="1579:25"><name pos:start="1579:25" pos:end="1579:25">b</name></expr></argument>, <argument pos:start="1579:28" pos:end="1579:32"><expr pos:start="1579:28" pos:end="1579:32"><name pos:start="1579:28" pos:end="1579:32">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1581:13" pos:end="1581:42"><expr pos:start="1581:13" pos:end="1581:41"><name pos:start="1581:13" pos:end="1581:17">modrm</name> <operator pos:start="1581:19" pos:end="1581:19">=</operator> <call pos:start="1581:21" pos:end="1581:41"><name pos:start="1581:21" pos:end="1581:33">x86_ldub_code</name><argument_list pos:start="1581:34" pos:end="1581:41">(<argument pos:start="1581:35" pos:end="1581:37"><expr pos:start="1581:35" pos:end="1581:37"><name pos:start="1581:35" pos:end="1581:37">env</name></expr></argument>, <argument pos:start="1581:40" pos:end="1581:40"><expr pos:start="1581:40" pos:end="1581:40"><name pos:start="1581:40" pos:end="1581:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1583:13" pos:end="1583:45"><expr pos:start="1583:13" pos:end="1583:44"><name pos:start="1583:13" pos:end="1583:15">reg</name> <operator pos:start="1583:17" pos:end="1583:17">=</operator> <operator pos:start="1583:19" pos:end="1583:19">(</operator><operator pos:start="1583:20" pos:end="1583:20">(</operator><name pos:start="1583:21" pos:end="1583:25">modrm</name> <operator pos:start="1583:27" pos:end="1583:28">&gt;&gt;</operator> <literal type="number" pos:start="1583:30" pos:end="1583:30">3</literal><operator pos:start="1583:31" pos:end="1583:31">)</operator> <operator pos:start="1583:33" pos:end="1583:33">&amp;</operator> <literal type="number" pos:start="1583:35" pos:end="1583:35">7</literal><operator pos:start="1583:36" pos:end="1583:36">)</operator> <operator pos:start="1583:38" pos:end="1583:38">|</operator> <name pos:start="1583:40" pos:end="1583:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1585:13" pos:end="1585:35"><expr pos:start="1585:13" pos:end="1585:34"><name pos:start="1585:13" pos:end="1585:15">mod</name> <operator pos:start="1585:17" pos:end="1585:17">=</operator> <operator pos:start="1585:19" pos:end="1585:19">(</operator><name pos:start="1585:20" pos:end="1585:24">modrm</name> <operator pos:start="1585:26" pos:end="1585:27">&gt;&gt;</operator> <literal type="number" pos:start="1585:29" pos:end="1585:29">6</literal><operator pos:start="1585:30" pos:end="1585:30">)</operator> <operator pos:start="1585:32" pos:end="1585:32">&amp;</operator> <literal type="number" pos:start="1585:34" pos:end="1585:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1587:13" pos:end="1587:34"><expr pos:start="1587:13" pos:end="1587:33"><name pos:start="1587:13" pos:end="1587:16">oldv</name> <operator pos:start="1587:18" pos:end="1587:18">=</operator> <call pos:start="1587:20" pos:end="1587:33"><name pos:start="1587:20" pos:end="1587:31">tcg_temp_new</name><argument_list pos:start="1587:32" pos:end="1587:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1589:13" pos:end="1589:34"><expr pos:start="1589:13" pos:end="1589:33"><name pos:start="1589:13" pos:end="1589:16">newv</name> <operator pos:start="1589:18" pos:end="1589:18">=</operator> <call pos:start="1589:20" pos:end="1589:33"><name pos:start="1589:20" pos:end="1589:31">tcg_temp_new</name><argument_list pos:start="1589:32" pos:end="1589:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1591:13" pos:end="1591:34"><expr pos:start="1591:13" pos:end="1591:33"><name pos:start="1591:13" pos:end="1591:16">cmpv</name> <operator pos:start="1591:18" pos:end="1591:18">=</operator> <call pos:start="1591:20" pos:end="1591:33"><name pos:start="1591:20" pos:end="1591:31">tcg_temp_new</name><argument_list pos:start="1591:32" pos:end="1591:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1593:13" pos:end="1593:44"><expr pos:start="1593:13" pos:end="1593:43"><call pos:start="1593:13" pos:end="1593:43"><name pos:start="1593:13" pos:end="1593:28">gen_op_mov_v_reg</name><argument_list pos:start="1593:29" pos:end="1593:43">(<argument pos:start="1593:30" pos:end="1593:31"><expr pos:start="1593:30" pos:end="1593:31"><name pos:start="1593:30" pos:end="1593:31">ot</name></expr></argument>, <argument pos:start="1593:34" pos:end="1593:37"><expr pos:start="1593:34" pos:end="1593:37"><name pos:start="1593:34" pos:end="1593:37">newv</name></expr></argument>, <argument pos:start="1593:40" pos:end="1593:42"><expr pos:start="1593:40" pos:end="1593:42"><name pos:start="1593:40" pos:end="1593:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1595:13" pos:end="1595:50"><expr pos:start="1595:13" pos:end="1595:49"><call pos:start="1595:13" pos:end="1595:49"><name pos:start="1595:13" pos:end="1595:26">tcg_gen_mov_tl</name><argument_list pos:start="1595:27" pos:end="1595:49">(<argument pos:start="1595:28" pos:end="1595:31"><expr pos:start="1595:28" pos:end="1595:31"><name pos:start="1595:28" pos:end="1595:31">cmpv</name></expr></argument>, <argument pos:start="1595:34" pos:end="1595:48"><expr pos:start="1595:34" pos:end="1595:48"><name pos:start="1595:34" pos:end="1595:48"><name pos:start="1595:34" pos:end="1595:41">cpu_regs</name><index pos:start="1595:42" pos:end="1595:48">[<expr pos:start="1595:43" pos:end="1595:47"><name pos:start="1595:43" pos:end="1595:47">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="1599:13" pos:end="1663:13"><if pos:start="1599:13" pos:end="1615:13">if <condition pos:start="1599:16" pos:end="1599:40">(<expr pos:start="1599:17" pos:end="1599:39"><name pos:start="1599:17" pos:end="1599:25"><name pos:start="1599:17" pos:end="1599:17">s</name><operator pos:start="1599:18" pos:end="1599:19">-&gt;</operator><name pos:start="1599:20" pos:end="1599:25">prefix</name></name> <operator pos:start="1599:27" pos:end="1599:27">&amp;</operator> <name pos:start="1599:29" pos:end="1599:39">PREFIX_LOCK</name></expr>)</condition> <block pos:start="1599:42" pos:end="1615:13">{<block_content pos:start="1601:17" pos:end="1613:50">

                <if_stmt pos:start="1601:17" pos:end="1605:17"><if pos:start="1601:17" pos:end="1605:17">if <condition pos:start="1601:20" pos:end="1601:29">(<expr pos:start="1601:21" pos:end="1601:28"><name pos:start="1601:21" pos:end="1601:23">mod</name> <operator pos:start="1601:25" pos:end="1601:26">==</operator> <literal type="number" pos:start="1601:28" pos:end="1601:28">3</literal></expr>)</condition> <block pos:start="1601:31" pos:end="1605:17">{<block_content pos:start="1603:21" pos:end="1603:36">

                    <goto pos:start="1603:21" pos:end="1603:36">goto <name pos:start="1603:26" pos:end="1603:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1607:17" pos:end="1607:45"><expr pos:start="1607:17" pos:end="1607:44"><call pos:start="1607:17" pos:end="1607:44"><name pos:start="1607:17" pos:end="1607:29">gen_lea_modrm</name><argument_list pos:start="1607:30" pos:end="1607:44">(<argument pos:start="1607:31" pos:end="1607:33"><expr pos:start="1607:31" pos:end="1607:33"><name pos:start="1607:31" pos:end="1607:33">env</name></expr></argument>, <argument pos:start="1607:36" pos:end="1607:36"><expr pos:start="1607:36" pos:end="1607:36"><name pos:start="1607:36" pos:end="1607:36">s</name></expr></argument>, <argument pos:start="1607:39" pos:end="1607:43"><expr pos:start="1607:39" pos:end="1607:43"><name pos:start="1607:39" pos:end="1607:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1609:17" pos:end="1611:68"><expr pos:start="1609:17" pos:end="1611:67"><call pos:start="1609:17" pos:end="1611:67"><name pos:start="1609:17" pos:end="1609:41">tcg_gen_atomic_cmpxchg_tl</name><argument_list pos:start="1609:42" pos:end="1611:67">(<argument pos:start="1609:43" pos:end="1609:46"><expr pos:start="1609:43" pos:end="1609:46"><name pos:start="1609:43" pos:end="1609:46">oldv</name></expr></argument>, <argument pos:start="1609:49" pos:end="1609:54"><expr pos:start="1609:49" pos:end="1609:54"><name pos:start="1609:49" pos:end="1609:54">cpu_A0</name></expr></argument>, <argument pos:start="1609:57" pos:end="1609:60"><expr pos:start="1609:57" pos:end="1609:60"><name pos:start="1609:57" pos:end="1609:60">cmpv</name></expr></argument>, <argument pos:start="1609:63" pos:end="1609:66"><expr pos:start="1609:63" pos:end="1609:66"><name pos:start="1609:63" pos:end="1609:66">newv</name></expr></argument>,

                                          <argument pos:start="1611:43" pos:end="1611:54"><expr pos:start="1611:43" pos:end="1611:54"><name pos:start="1611:43" pos:end="1611:54"><name pos:start="1611:43" pos:end="1611:43">s</name><operator pos:start="1611:44" pos:end="1611:45">-&gt;</operator><name pos:start="1611:46" pos:end="1611:54">mem_index</name></name></expr></argument>, <argument pos:start="1611:57" pos:end="1611:66"><expr pos:start="1611:57" pos:end="1611:66"><name pos:start="1611:57" pos:end="1611:58">ot</name> <operator pos:start="1611:60" pos:end="1611:60">|</operator> <name pos:start="1611:62" pos:end="1611:66">MO_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1613:17" pos:end="1613:50"><expr pos:start="1613:17" pos:end="1613:49"><call pos:start="1613:17" pos:end="1613:49"><name pos:start="1613:17" pos:end="1613:32">gen_op_mov_reg_v</name><argument_list pos:start="1613:33" pos:end="1613:49">(<argument pos:start="1613:34" pos:end="1613:35"><expr pos:start="1613:34" pos:end="1613:35"><name pos:start="1613:34" pos:end="1613:35">ot</name></expr></argument>, <argument pos:start="1613:38" pos:end="1613:42"><expr pos:start="1613:38" pos:end="1613:42"><name pos:start="1613:38" pos:end="1613:42">R_EAX</name></expr></argument>, <argument pos:start="1613:45" pos:end="1613:48"><expr pos:start="1613:45" pos:end="1613:48"><name pos:start="1613:45" pos:end="1613:48">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1615:15" pos:end="1663:13">else <block pos:start="1615:20" pos:end="1663:13">{<block_content pos:start="1617:17" pos:end="1661:17">

                <if_stmt pos:start="1617:17" pos:end="1631:17"><if pos:start="1617:17" pos:end="1623:17">if <condition pos:start="1617:20" pos:end="1617:29">(<expr pos:start="1617:21" pos:end="1617:28"><name pos:start="1617:21" pos:end="1617:23">mod</name> <operator pos:start="1617:25" pos:end="1617:26">==</operator> <literal type="number" pos:start="1617:28" pos:end="1617:28">3</literal></expr>)</condition> <block pos:start="1617:31" pos:end="1623:17">{<block_content pos:start="1619:21" pos:end="1621:51">

                    <expr_stmt pos:start="1619:21" pos:end="1619:48"><expr pos:start="1619:21" pos:end="1619:47"><name pos:start="1619:21" pos:end="1619:22">rm</name> <operator pos:start="1619:24" pos:end="1619:24">=</operator> <operator pos:start="1619:26" pos:end="1619:26">(</operator><name pos:start="1619:27" pos:end="1619:31">modrm</name> <operator pos:start="1619:33" pos:end="1619:33">&amp;</operator> <literal type="number" pos:start="1619:35" pos:end="1619:35">7</literal><operator pos:start="1619:36" pos:end="1619:36">)</operator> <operator pos:start="1619:38" pos:end="1619:38">|</operator> <call pos:start="1619:40" pos:end="1619:47"><name pos:start="1619:40" pos:end="1619:44">REX_B</name><argument_list pos:start="1619:45" pos:end="1619:47">(<argument pos:start="1619:46" pos:end="1619:46"><expr pos:start="1619:46" pos:end="1619:46"><name pos:start="1619:46" pos:end="1619:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1621:21" pos:end="1621:51"><expr pos:start="1621:21" pos:end="1621:50"><call pos:start="1621:21" pos:end="1621:50"><name pos:start="1621:21" pos:end="1621:36">gen_op_mov_v_reg</name><argument_list pos:start="1621:37" pos:end="1621:50">(<argument pos:start="1621:38" pos:end="1621:39"><expr pos:start="1621:38" pos:end="1621:39"><name pos:start="1621:38" pos:end="1621:39">ot</name></expr></argument>, <argument pos:start="1621:42" pos:end="1621:45"><expr pos:start="1621:42" pos:end="1621:45"><name pos:start="1621:42" pos:end="1621:45">oldv</name></expr></argument>, <argument pos:start="1621:48" pos:end="1621:49"><expr pos:start="1621:48" pos:end="1621:49"><name pos:start="1621:48" pos:end="1621:49">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1623:19" pos:end="1631:17">else <block pos:start="1623:24" pos:end="1631:17">{<block_content pos:start="1625:21" pos:end="1629:27">

                    <expr_stmt pos:start="1625:21" pos:end="1625:49"><expr pos:start="1625:21" pos:end="1625:48"><call pos:start="1625:21" pos:end="1625:48"><name pos:start="1625:21" pos:end="1625:33">gen_lea_modrm</name><argument_list pos:start="1625:34" pos:end="1625:48">(<argument pos:start="1625:35" pos:end="1625:37"><expr pos:start="1625:35" pos:end="1625:37"><name pos:start="1625:35" pos:end="1625:37">env</name></expr></argument>, <argument pos:start="1625:40" pos:end="1625:40"><expr pos:start="1625:40" pos:end="1625:40"><name pos:start="1625:40" pos:end="1625:40">s</name></expr></argument>, <argument pos:start="1625:43" pos:end="1625:47"><expr pos:start="1625:43" pos:end="1625:47"><name pos:start="1625:43" pos:end="1625:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1627:21" pos:end="1627:53"><expr pos:start="1627:21" pos:end="1627:52"><call pos:start="1627:21" pos:end="1627:52"><name pos:start="1627:21" pos:end="1627:31">gen_op_ld_v</name><argument_list pos:start="1627:32" pos:end="1627:52">(<argument pos:start="1627:33" pos:end="1627:33"><expr pos:start="1627:33" pos:end="1627:33"><name pos:start="1627:33" pos:end="1627:33">s</name></expr></argument>, <argument pos:start="1627:36" pos:end="1627:37"><expr pos:start="1627:36" pos:end="1627:37"><name pos:start="1627:36" pos:end="1627:37">ot</name></expr></argument>, <argument pos:start="1627:40" pos:end="1627:43"><expr pos:start="1627:40" pos:end="1627:43"><name pos:start="1627:40" pos:end="1627:43">oldv</name></expr></argument>, <argument pos:start="1627:46" pos:end="1627:51"><expr pos:start="1627:46" pos:end="1627:51"><name pos:start="1627:46" pos:end="1627:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1629:21" pos:end="1629:27"><expr pos:start="1629:21" pos:end="1629:26"><name pos:start="1629:21" pos:end="1629:22">rm</name> <operator pos:start="1629:24" pos:end="1629:24">=</operator> <literal type="number" pos:start="1629:26" pos:end="1629:26">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="1629:29" pos:end="1629:47">/* avoid warning */</comment>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1633:17" pos:end="1633:35"><expr pos:start="1633:17" pos:end="1633:34"><call pos:start="1633:17" pos:end="1633:34"><name pos:start="1633:17" pos:end="1633:24">gen_extu</name><argument_list pos:start="1633:25" pos:end="1633:34">(<argument pos:start="1633:26" pos:end="1633:27"><expr pos:start="1633:26" pos:end="1633:27"><name pos:start="1633:26" pos:end="1633:27">ot</name></expr></argument>, <argument pos:start="1633:30" pos:end="1633:33"><expr pos:start="1633:30" pos:end="1633:33"><name pos:start="1633:30" pos:end="1633:33">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1635:17" pos:end="1635:35"><expr pos:start="1635:17" pos:end="1635:34"><call pos:start="1635:17" pos:end="1635:34"><name pos:start="1635:17" pos:end="1635:24">gen_extu</name><argument_list pos:start="1635:25" pos:end="1635:34">(<argument pos:start="1635:26" pos:end="1635:27"><expr pos:start="1635:26" pos:end="1635:27"><name pos:start="1635:26" pos:end="1635:27">ot</name></expr></argument>, <argument pos:start="1635:30" pos:end="1635:33"><expr pos:start="1635:30" pos:end="1635:33"><name pos:start="1635:30" pos:end="1635:33">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1637:17" pos:end="1637:62">/* store value = (old == cmp ? new : old);  */</comment>

                <expr_stmt pos:start="1639:17" pos:end="1639:78"><expr pos:start="1639:17" pos:end="1639:77"><call pos:start="1639:17" pos:end="1639:77"><name pos:start="1639:17" pos:end="1639:34">tcg_gen_movcond_tl</name><argument_list pos:start="1639:35" pos:end="1639:77">(<argument pos:start="1639:36" pos:end="1639:46"><expr pos:start="1639:36" pos:end="1639:46"><name pos:start="1639:36" pos:end="1639:46">TCG_COND_EQ</name></expr></argument>, <argument pos:start="1639:49" pos:end="1639:52"><expr pos:start="1639:49" pos:end="1639:52"><name pos:start="1639:49" pos:end="1639:52">newv</name></expr></argument>, <argument pos:start="1639:55" pos:end="1639:58"><expr pos:start="1639:55" pos:end="1639:58"><name pos:start="1639:55" pos:end="1639:58">oldv</name></expr></argument>, <argument pos:start="1639:61" pos:end="1639:64"><expr pos:start="1639:61" pos:end="1639:64"><name pos:start="1639:61" pos:end="1639:64">cmpv</name></expr></argument>, <argument pos:start="1639:67" pos:end="1639:70"><expr pos:start="1639:67" pos:end="1639:70"><name pos:start="1639:67" pos:end="1639:70">newv</name></expr></argument>, <argument pos:start="1639:73" pos:end="1639:76"><expr pos:start="1639:73" pos:end="1639:76"><name pos:start="1639:73" pos:end="1639:76">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1641:17" pos:end="1661:17"><if pos:start="1641:17" pos:end="1647:17">if <condition pos:start="1641:20" pos:end="1641:29">(<expr pos:start="1641:21" pos:end="1641:28"><name pos:start="1641:21" pos:end="1641:23">mod</name> <operator pos:start="1641:25" pos:end="1641:26">==</operator> <literal type="number" pos:start="1641:28" pos:end="1641:28">3</literal></expr>)</condition> <block pos:start="1641:31" pos:end="1647:17">{<block_content pos:start="1643:21" pos:end="1645:51">

                    <expr_stmt pos:start="1643:21" pos:end="1643:54"><expr pos:start="1643:21" pos:end="1643:53"><call pos:start="1643:21" pos:end="1643:53"><name pos:start="1643:21" pos:end="1643:36">gen_op_mov_reg_v</name><argument_list pos:start="1643:37" pos:end="1643:53">(<argument pos:start="1643:38" pos:end="1643:39"><expr pos:start="1643:38" pos:end="1643:39"><name pos:start="1643:38" pos:end="1643:39">ot</name></expr></argument>, <argument pos:start="1643:42" pos:end="1643:46"><expr pos:start="1643:42" pos:end="1643:46"><name pos:start="1643:42" pos:end="1643:46">R_EAX</name></expr></argument>, <argument pos:start="1643:49" pos:end="1643:52"><expr pos:start="1643:49" pos:end="1643:52"><name pos:start="1643:49" pos:end="1643:52">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1645:21" pos:end="1645:51"><expr pos:start="1645:21" pos:end="1645:50"><call pos:start="1645:21" pos:end="1645:50"><name pos:start="1645:21" pos:end="1645:36">gen_op_mov_reg_v</name><argument_list pos:start="1645:37" pos:end="1645:50">(<argument pos:start="1645:38" pos:end="1645:39"><expr pos:start="1645:38" pos:end="1645:39"><name pos:start="1645:38" pos:end="1645:39">ot</name></expr></argument>, <argument pos:start="1645:42" pos:end="1645:43"><expr pos:start="1645:42" pos:end="1645:43"><name pos:start="1645:42" pos:end="1645:43">rm</name></expr></argument>, <argument pos:start="1645:46" pos:end="1645:49"><expr pos:start="1645:46" pos:end="1645:49"><name pos:start="1645:46" pos:end="1645:49">newv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1647:19" pos:end="1661:17">else <block pos:start="1647:24" pos:end="1661:17">{<block_content pos:start="1657:21" pos:end="1659:54">

                    <comment type="block" pos:start="1649:21" pos:end="1655:38">/* Perform an unconditional store cycle like physical cpu;

                       must be before changing accumulator to ensure

                       idempotency if the store faults and the instruction

                       is restarted */</comment>

                    <expr_stmt pos:start="1657:21" pos:end="1657:53"><expr pos:start="1657:21" pos:end="1657:52"><call pos:start="1657:21" pos:end="1657:52"><name pos:start="1657:21" pos:end="1657:31">gen_op_st_v</name><argument_list pos:start="1657:32" pos:end="1657:52">(<argument pos:start="1657:33" pos:end="1657:33"><expr pos:start="1657:33" pos:end="1657:33"><name pos:start="1657:33" pos:end="1657:33">s</name></expr></argument>, <argument pos:start="1657:36" pos:end="1657:37"><expr pos:start="1657:36" pos:end="1657:37"><name pos:start="1657:36" pos:end="1657:37">ot</name></expr></argument>, <argument pos:start="1657:40" pos:end="1657:43"><expr pos:start="1657:40" pos:end="1657:43"><name pos:start="1657:40" pos:end="1657:43">newv</name></expr></argument>, <argument pos:start="1657:46" pos:end="1657:51"><expr pos:start="1657:46" pos:end="1657:51"><name pos:start="1657:46" pos:end="1657:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1659:21" pos:end="1659:54"><expr pos:start="1659:21" pos:end="1659:53"><call pos:start="1659:21" pos:end="1659:53"><name pos:start="1659:21" pos:end="1659:36">gen_op_mov_reg_v</name><argument_list pos:start="1659:37" pos:end="1659:53">(<argument pos:start="1659:38" pos:end="1659:39"><expr pos:start="1659:38" pos:end="1659:39"><name pos:start="1659:38" pos:end="1659:39">ot</name></expr></argument>, <argument pos:start="1659:42" pos:end="1659:46"><expr pos:start="1659:42" pos:end="1659:46"><name pos:start="1659:42" pos:end="1659:46">R_EAX</name></expr></argument>, <argument pos:start="1659:49" pos:end="1659:52"><expr pos:start="1659:49" pos:end="1659:52"><name pos:start="1659:49" pos:end="1659:52">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1665:13" pos:end="1665:45"><expr pos:start="1665:13" pos:end="1665:44"><call pos:start="1665:13" pos:end="1665:44"><name pos:start="1665:13" pos:end="1665:26">tcg_gen_mov_tl</name><argument_list pos:start="1665:27" pos:end="1665:44">(<argument pos:start="1665:28" pos:end="1665:37"><expr pos:start="1665:28" pos:end="1665:37"><name pos:start="1665:28" pos:end="1665:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1665:40" pos:end="1665:43"><expr pos:start="1665:40" pos:end="1665:43"><name pos:start="1665:40" pos:end="1665:43">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1667:13" pos:end="1667:46"><expr pos:start="1667:13" pos:end="1667:45"><call pos:start="1667:13" pos:end="1667:45"><name pos:start="1667:13" pos:end="1667:26">tcg_gen_mov_tl</name><argument_list pos:start="1667:27" pos:end="1667:45">(<argument pos:start="1667:28" pos:end="1667:38"><expr pos:start="1667:28" pos:end="1667:38"><name pos:start="1667:28" pos:end="1667:38">cpu_cc_srcT</name></expr></argument>, <argument pos:start="1667:41" pos:end="1667:44"><expr pos:start="1667:41" pos:end="1667:44"><name pos:start="1667:41" pos:end="1667:44">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1669:13" pos:end="1669:51"><expr pos:start="1669:13" pos:end="1669:50"><call pos:start="1669:13" pos:end="1669:50"><name pos:start="1669:13" pos:end="1669:26">tcg_gen_sub_tl</name><argument_list pos:start="1669:27" pos:end="1669:50">(<argument pos:start="1669:28" pos:end="1669:37"><expr pos:start="1669:28" pos:end="1669:37"><name pos:start="1669:28" pos:end="1669:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1669:40" pos:end="1669:43"><expr pos:start="1669:40" pos:end="1669:43"><name pos:start="1669:40" pos:end="1669:43">cmpv</name></expr></argument>, <argument pos:start="1669:46" pos:end="1669:49"><expr pos:start="1669:46" pos:end="1669:49"><name pos:start="1669:46" pos:end="1669:49">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1671:13" pos:end="1671:42"><expr pos:start="1671:13" pos:end="1671:41"><call pos:start="1671:13" pos:end="1671:41"><name pos:start="1671:13" pos:end="1671:21">set_cc_op</name><argument_list pos:start="1671:22" pos:end="1671:41">(<argument pos:start="1671:23" pos:end="1671:23"><expr pos:start="1671:23" pos:end="1671:23"><name pos:start="1671:23" pos:end="1671:23">s</name></expr></argument>, <argument pos:start="1671:26" pos:end="1671:40"><expr pos:start="1671:26" pos:end="1671:40"><name pos:start="1671:26" pos:end="1671:35">CC_OP_SUBB</name> <operator pos:start="1671:37" pos:end="1671:37">+</operator> <name pos:start="1671:39" pos:end="1671:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1673:13" pos:end="1673:32"><expr pos:start="1673:13" pos:end="1673:31"><call pos:start="1673:13" pos:end="1673:31"><name pos:start="1673:13" pos:end="1673:25">tcg_temp_free</name><argument_list pos:start="1673:26" pos:end="1673:31">(<argument pos:start="1673:27" pos:end="1673:30"><expr pos:start="1673:27" pos:end="1673:30"><name pos:start="1673:27" pos:end="1673:30">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1675:13" pos:end="1675:32"><expr pos:start="1675:13" pos:end="1675:31"><call pos:start="1675:13" pos:end="1675:31"><name pos:start="1675:13" pos:end="1675:25">tcg_temp_free</name><argument_list pos:start="1675:26" pos:end="1675:31">(<argument pos:start="1675:27" pos:end="1675:30"><expr pos:start="1675:27" pos:end="1675:30"><name pos:start="1675:27" pos:end="1675:30">newv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1677:13" pos:end="1677:32"><expr pos:start="1677:13" pos:end="1677:31"><call pos:start="1677:13" pos:end="1677:31"><name pos:start="1677:13" pos:end="1677:25">tcg_temp_free</name><argument_list pos:start="1677:26" pos:end="1677:31">(<argument pos:start="1677:27" pos:end="1677:30"><expr pos:start="1677:27" pos:end="1677:30"><name pos:start="1677:27" pos:end="1677:30">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1681:9" pos:end="1681:14">break;</break>

    <case pos:start="1683:5" pos:end="1683:15">case <expr pos:start="1683:10" pos:end="1683:14"><literal type="number" pos:start="1683:10" pos:end="1683:14">0x1c7</literal></expr>:</case> <comment type="block" pos:start="1683:17" pos:end="1683:31">/* cmpxchg8b */</comment>

        <expr_stmt pos:start="1685:9" pos:end="1685:38"><expr pos:start="1685:9" pos:end="1685:37"><name pos:start="1685:9" pos:end="1685:13">modrm</name> <operator pos:start="1685:15" pos:end="1685:15">=</operator> <call pos:start="1685:17" pos:end="1685:37"><name pos:start="1685:17" pos:end="1685:29">x86_ldub_code</name><argument_list pos:start="1685:30" pos:end="1685:37">(<argument pos:start="1685:31" pos:end="1685:33"><expr pos:start="1685:31" pos:end="1685:33"><name pos:start="1685:31" pos:end="1685:33">env</name></expr></argument>, <argument pos:start="1685:36" pos:end="1685:36"><expr pos:start="1685:36" pos:end="1685:36"><name pos:start="1685:36" pos:end="1685:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1687:9" pos:end="1687:31"><expr pos:start="1687:9" pos:end="1687:30"><name pos:start="1687:9" pos:end="1687:11">mod</name> <operator pos:start="1687:13" pos:end="1687:13">=</operator> <operator pos:start="1687:15" pos:end="1687:15">(</operator><name pos:start="1687:16" pos:end="1687:20">modrm</name> <operator pos:start="1687:22" pos:end="1687:23">&gt;&gt;</operator> <literal type="number" pos:start="1687:25" pos:end="1687:25">6</literal><operator pos:start="1687:26" pos:end="1687:26">)</operator> <operator pos:start="1687:28" pos:end="1687:28">&amp;</operator> <literal type="number" pos:start="1687:30" pos:end="1687:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1689:9" pos:end="1694:0"><if pos:start="1689:9" pos:end="1694:0">if <condition pos:start="1689:12" pos:end="1689:50">(<expr pos:start="1689:13" pos:end="1689:49"><operator pos:start="1689:13" pos:end="1689:13">(</operator><name pos:start="1689:14" pos:end="1689:16">mod</name> <operator pos:start="1689:18" pos:end="1689:19">==</operator> <literal type="number" pos:start="1689:21" pos:end="1689:21">3</literal><operator pos:start="1689:22" pos:end="1689:22">)</operator> <operator pos:start="1689:24" pos:end="1689:25">||</operator> <operator pos:start="1689:27" pos:end="1689:27">(</operator><operator pos:start="1689:28" pos:end="1689:28">(</operator><name pos:start="1689:29" pos:end="1689:33">modrm</name> <operator pos:start="1689:35" pos:end="1689:35">&amp;</operator> <literal type="number" pos:start="1689:37" pos:end="1689:40">0x38</literal><operator pos:start="1689:41" pos:end="1689:41">)</operator> <operator pos:start="1689:43" pos:end="1689:44">!=</operator> <literal type="number" pos:start="1689:46" pos:end="1689:48">0x8</literal><operator pos:start="1689:49" pos:end="1689:49">)</operator></expr>)</condition><block type="pseudo" pos:start="1691:13" pos:end="1694:0"><block_content pos:start="1691:13" pos:end="1694:0">

            <goto pos:start="1691:13" pos:end="1694:0">goto <name pos:start="1691:18" pos:end="1691:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="1693:1" pos:end="1693:20">#<cpp:directive pos:start="1693:2" pos:end="1693:6">ifdef</cpp:directive> <name pos:start="1693:8" pos:end="1693:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1695:9" pos:end="1735:9"><if pos:start="1695:9" pos:end="1713:9">if <condition pos:start="1695:12" pos:end="1695:27">(<expr pos:start="1695:13" pos:end="1695:26"><name pos:start="1695:13" pos:end="1695:17">dflag</name> <operator pos:start="1695:19" pos:end="1695:20">==</operator> <name pos:start="1695:22" pos:end="1695:26">MO_64</name></expr>)</condition> <block pos:start="1695:29" pos:end="1713:9">{<block_content pos:start="1697:13" pos:end="1711:13">

            <if_stmt pos:start="1697:13" pos:end="1699:32"><if pos:start="1697:13" pos:end="1699:32">if <condition pos:start="1697:16" pos:end="1697:58">(<expr pos:start="1697:17" pos:end="1697:57"><operator pos:start="1697:17" pos:end="1697:17">!</operator><operator pos:start="1697:18" pos:end="1697:18">(</operator><name pos:start="1697:19" pos:end="1697:39"><name pos:start="1697:19" pos:end="1697:19">s</name><operator pos:start="1697:20" pos:end="1697:21">-&gt;</operator><name pos:start="1697:22" pos:end="1697:39">cpuid_ext_features</name></name> <operator pos:start="1697:41" pos:end="1697:41">&amp;</operator> <name pos:start="1697:43" pos:end="1697:56">CPUID_EXT_CX16</name><operator pos:start="1697:57" pos:end="1697:57">)</operator></expr>)</condition><block type="pseudo" pos:start="1699:17" pos:end="1699:32"><block_content pos:start="1699:17" pos:end="1699:32">

                <goto pos:start="1699:17" pos:end="1699:32">goto <name pos:start="1699:22" pos:end="1699:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1701:13" pos:end="1701:41"><expr pos:start="1701:13" pos:end="1701:40"><call pos:start="1701:13" pos:end="1701:40"><name pos:start="1701:13" pos:end="1701:25">gen_lea_modrm</name><argument_list pos:start="1701:26" pos:end="1701:40">(<argument pos:start="1701:27" pos:end="1701:29"><expr pos:start="1701:27" pos:end="1701:29"><name pos:start="1701:27" pos:end="1701:29">env</name></expr></argument>, <argument pos:start="1701:32" pos:end="1701:32"><expr pos:start="1701:32" pos:end="1701:32"><name pos:start="1701:32" pos:end="1701:32">s</name></expr></argument>, <argument pos:start="1701:35" pos:end="1701:39"><expr pos:start="1701:35" pos:end="1701:39"><name pos:start="1701:35" pos:end="1701:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1703:13" pos:end="1711:13"><if pos:start="1703:13" pos:end="1707:13">if <condition pos:start="1703:16" pos:end="1703:59">(<expr pos:start="1703:17" pos:end="1703:58"><operator pos:start="1703:17" pos:end="1703:17">(</operator><name pos:start="1703:18" pos:end="1703:26"><name pos:start="1703:18" pos:end="1703:18">s</name><operator pos:start="1703:19" pos:end="1703:20">-&gt;</operator><name pos:start="1703:21" pos:end="1703:26">prefix</name></name> <operator pos:start="1703:28" pos:end="1703:28">&amp;</operator> <name pos:start="1703:30" pos:end="1703:40">PREFIX_LOCK</name><operator pos:start="1703:41" pos:end="1703:41">)</operator> <operator pos:start="1703:43" pos:end="1703:44">&amp;&amp;</operator> <name pos:start="1703:46" pos:end="1703:58">parallel_cpus</name></expr>)</condition> <block pos:start="1703:61" pos:end="1707:13">{<block_content pos:start="1705:17" pos:end="1705:55">

                <expr_stmt pos:start="1705:17" pos:end="1705:55"><expr pos:start="1705:17" pos:end="1705:54"><call pos:start="1705:17" pos:end="1705:54"><name pos:start="1705:17" pos:end="1705:37">gen_helper_cmpxchg16b</name><argument_list pos:start="1705:38" pos:end="1705:54">(<argument pos:start="1705:39" pos:end="1705:45"><expr pos:start="1705:39" pos:end="1705:45"><name pos:start="1705:39" pos:end="1705:45">cpu_env</name></expr></argument>, <argument pos:start="1705:48" pos:end="1705:53"><expr pos:start="1705:48" pos:end="1705:53"><name pos:start="1705:48" pos:end="1705:53">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1707:15" pos:end="1711:13">else <block pos:start="1707:20" pos:end="1711:13">{<block_content pos:start="1709:17" pos:end="1709:64">

                <expr_stmt pos:start="1709:17" pos:end="1709:64"><expr pos:start="1709:17" pos:end="1709:63"><call pos:start="1709:17" pos:end="1709:63"><name pos:start="1709:17" pos:end="1709:46">gen_helper_cmpxchg16b_unlocked</name><argument_list pos:start="1709:47" pos:end="1709:63">(<argument pos:start="1709:48" pos:end="1709:54"><expr pos:start="1709:48" pos:end="1709:54"><name pos:start="1709:48" pos:end="1709:54">cpu_env</name></expr></argument>, <argument pos:start="1709:57" pos:end="1709:62"><expr pos:start="1709:57" pos:end="1709:62"><name pos:start="1709:57" pos:end="1709:62">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1713:11" pos:end="1735:9">else

<cpp:endif pos:start="1715:1" pos:end="1715:6">#<cpp:directive pos:start="1715:2" pos:end="1715:6">endif</cpp:directive></cpp:endif>        

        <block pos:start="1717:9" pos:end="1735:9">{<block_content pos:start="1719:13" pos:end="1733:13">

            <if_stmt pos:start="1719:13" pos:end="1721:32"><if pos:start="1719:13" pos:end="1721:32">if <condition pos:start="1719:16" pos:end="1719:49">(<expr pos:start="1719:17" pos:end="1719:48"><operator pos:start="1719:17" pos:end="1719:17">!</operator><operator pos:start="1719:18" pos:end="1719:18">(</operator><name pos:start="1719:19" pos:end="1719:35"><name pos:start="1719:19" pos:end="1719:19">s</name><operator pos:start="1719:20" pos:end="1719:21">-&gt;</operator><name pos:start="1719:22" pos:end="1719:35">cpuid_features</name></name> <operator pos:start="1719:37" pos:end="1719:37">&amp;</operator> <name pos:start="1719:39" pos:end="1719:47">CPUID_CX8</name><operator pos:start="1719:48" pos:end="1719:48">)</operator></expr>)</condition><block type="pseudo" pos:start="1721:17" pos:end="1721:32"><block_content pos:start="1721:17" pos:end="1721:32">

                <goto pos:start="1721:17" pos:end="1721:32">goto <name pos:start="1721:22" pos:end="1721:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1723:13" pos:end="1723:41"><expr pos:start="1723:13" pos:end="1723:40"><call pos:start="1723:13" pos:end="1723:40"><name pos:start="1723:13" pos:end="1723:25">gen_lea_modrm</name><argument_list pos:start="1723:26" pos:end="1723:40">(<argument pos:start="1723:27" pos:end="1723:29"><expr pos:start="1723:27" pos:end="1723:29"><name pos:start="1723:27" pos:end="1723:29">env</name></expr></argument>, <argument pos:start="1723:32" pos:end="1723:32"><expr pos:start="1723:32" pos:end="1723:32"><name pos:start="1723:32" pos:end="1723:32">s</name></expr></argument>, <argument pos:start="1723:35" pos:end="1723:39"><expr pos:start="1723:35" pos:end="1723:39"><name pos:start="1723:35" pos:end="1723:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1725:13" pos:end="1733:13"><if pos:start="1725:13" pos:end="1729:13">if <condition pos:start="1725:16" pos:end="1725:59">(<expr pos:start="1725:17" pos:end="1725:58"><operator pos:start="1725:17" pos:end="1725:17">(</operator><name pos:start="1725:18" pos:end="1725:26"><name pos:start="1725:18" pos:end="1725:18">s</name><operator pos:start="1725:19" pos:end="1725:20">-&gt;</operator><name pos:start="1725:21" pos:end="1725:26">prefix</name></name> <operator pos:start="1725:28" pos:end="1725:28">&amp;</operator> <name pos:start="1725:30" pos:end="1725:40">PREFIX_LOCK</name><operator pos:start="1725:41" pos:end="1725:41">)</operator> <operator pos:start="1725:43" pos:end="1725:44">&amp;&amp;</operator> <name pos:start="1725:46" pos:end="1725:58">parallel_cpus</name></expr>)</condition> <block pos:start="1725:61" pos:end="1729:13">{<block_content pos:start="1727:17" pos:end="1727:54">

                <expr_stmt pos:start="1727:17" pos:end="1727:54"><expr pos:start="1727:17" pos:end="1727:53"><call pos:start="1727:17" pos:end="1727:53"><name pos:start="1727:17" pos:end="1727:36">gen_helper_cmpxchg8b</name><argument_list pos:start="1727:37" pos:end="1727:53">(<argument pos:start="1727:38" pos:end="1727:44"><expr pos:start="1727:38" pos:end="1727:44"><name pos:start="1727:38" pos:end="1727:44">cpu_env</name></expr></argument>, <argument pos:start="1727:47" pos:end="1727:52"><expr pos:start="1727:47" pos:end="1727:52"><name pos:start="1727:47" pos:end="1727:52">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1729:15" pos:end="1733:13">else <block pos:start="1729:20" pos:end="1733:13">{<block_content pos:start="1731:17" pos:end="1731:63">

                <expr_stmt pos:start="1731:17" pos:end="1731:63"><expr pos:start="1731:17" pos:end="1731:62"><call pos:start="1731:17" pos:end="1731:62"><name pos:start="1731:17" pos:end="1731:45">gen_helper_cmpxchg8b_unlocked</name><argument_list pos:start="1731:46" pos:end="1731:62">(<argument pos:start="1731:47" pos:end="1731:53"><expr pos:start="1731:47" pos:end="1731:53"><name pos:start="1731:47" pos:end="1731:53">cpu_env</name></expr></argument>, <argument pos:start="1731:56" pos:end="1731:61"><expr pos:start="1731:56" pos:end="1731:61"><name pos:start="1731:56" pos:end="1731:61">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1737:9" pos:end="1737:35"><expr pos:start="1737:9" pos:end="1737:34"><call pos:start="1737:9" pos:end="1737:34"><name pos:start="1737:9" pos:end="1737:17">set_cc_op</name><argument_list pos:start="1737:18" pos:end="1737:34">(<argument pos:start="1737:19" pos:end="1737:19"><expr pos:start="1737:19" pos:end="1737:19"><name pos:start="1737:19" pos:end="1737:19">s</name></expr></argument>, <argument pos:start="1737:22" pos:end="1737:33"><expr pos:start="1737:22" pos:end="1737:33"><name pos:start="1737:22" pos:end="1737:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1739:9" pos:end="1739:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1743:9" pos:end="1743:36">/**************************/</comment>

        <comment type="block" pos:start="1745:9" pos:end="1745:22">/* push/pop */</comment>

    <case pos:start="1747:5" pos:end="1747:23">case <expr pos:start="1747:10" pos:end="1747:22"><literal type="number" pos:start="1747:10" pos:end="1747:13">0x50</literal> <operator pos:start="1747:15" pos:end="1747:17">...</operator> <literal type="number" pos:start="1747:19" pos:end="1747:22">0x57</literal></expr>:</case> <comment type="block" pos:start="1747:25" pos:end="1747:34">/* push */</comment>

        <expr_stmt pos:start="1749:9" pos:end="1749:60"><expr pos:start="1749:9" pos:end="1749:59"><call pos:start="1749:9" pos:end="1749:59"><name pos:start="1749:9" pos:end="1749:24">gen_op_mov_v_reg</name><argument_list pos:start="1749:25" pos:end="1749:59">(<argument pos:start="1749:26" pos:end="1749:30"><expr pos:start="1749:26" pos:end="1749:30"><name pos:start="1749:26" pos:end="1749:30">MO_32</name></expr></argument>, <argument pos:start="1749:33" pos:end="1749:38"><expr pos:start="1749:33" pos:end="1749:38"><name pos:start="1749:33" pos:end="1749:38">cpu_T0</name></expr></argument>, <argument pos:start="1749:41" pos:end="1749:58"><expr pos:start="1749:41" pos:end="1749:58"><operator pos:start="1749:41" pos:end="1749:41">(</operator><name pos:start="1749:42" pos:end="1749:42">b</name> <operator pos:start="1749:44" pos:end="1749:44">&amp;</operator> <literal type="number" pos:start="1749:46" pos:end="1749:46">7</literal><operator pos:start="1749:47" pos:end="1749:47">)</operator> <operator pos:start="1749:49" pos:end="1749:49">|</operator> <call pos:start="1749:51" pos:end="1749:58"><name pos:start="1749:51" pos:end="1749:55">REX_B</name><argument_list pos:start="1749:56" pos:end="1749:58">(<argument pos:start="1749:57" pos:end="1749:57"><expr pos:start="1749:57" pos:end="1749:57"><name pos:start="1749:57" pos:end="1749:57">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1751:9" pos:end="1751:30"><expr pos:start="1751:9" pos:end="1751:29"><call pos:start="1751:9" pos:end="1751:29"><name pos:start="1751:9" pos:end="1751:18">gen_push_v</name><argument_list pos:start="1751:19" pos:end="1751:29">(<argument pos:start="1751:20" pos:end="1751:20"><expr pos:start="1751:20" pos:end="1751:20"><name pos:start="1751:20" pos:end="1751:20">s</name></expr></argument>, <argument pos:start="1751:23" pos:end="1751:28"><expr pos:start="1751:23" pos:end="1751:28"><name pos:start="1751:23" pos:end="1751:28">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1753:9" pos:end="1753:14">break;</break>

    <case pos:start="1755:5" pos:end="1755:23">case <expr pos:start="1755:10" pos:end="1755:22"><literal type="number" pos:start="1755:10" pos:end="1755:13">0x58</literal> <operator pos:start="1755:15" pos:end="1755:17">...</operator> <literal type="number" pos:start="1755:19" pos:end="1755:22">0x5f</literal></expr>:</case> <comment type="block" pos:start="1755:25" pos:end="1755:33">/* pop */</comment>

        <expr_stmt pos:start="1757:9" pos:end="1757:27"><expr pos:start="1757:9" pos:end="1757:26"><name pos:start="1757:9" pos:end="1757:10">ot</name> <operator pos:start="1757:12" pos:end="1757:12">=</operator> <call pos:start="1757:14" pos:end="1757:26"><name pos:start="1757:14" pos:end="1757:23">gen_pop_T0</name><argument_list pos:start="1757:24" pos:end="1757:26">(<argument pos:start="1757:25" pos:end="1757:25"><expr pos:start="1757:25" pos:end="1757:25"><name pos:start="1757:25" pos:end="1757:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1759:9" pos:end="1759:50">/* NOTE: order is important for pop %sp */</comment>

        <expr_stmt pos:start="1761:9" pos:end="1761:30"><expr pos:start="1761:9" pos:end="1761:29"><call pos:start="1761:9" pos:end="1761:29"><name pos:start="1761:9" pos:end="1761:22">gen_pop_update</name><argument_list pos:start="1761:23" pos:end="1761:29">(<argument pos:start="1761:24" pos:end="1761:24"><expr pos:start="1761:24" pos:end="1761:24"><name pos:start="1761:24" pos:end="1761:24">s</name></expr></argument>, <argument pos:start="1761:27" pos:end="1761:28"><expr pos:start="1761:27" pos:end="1761:28"><name pos:start="1761:27" pos:end="1761:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1763:9" pos:end="1763:57"><expr pos:start="1763:9" pos:end="1763:56"><call pos:start="1763:9" pos:end="1763:56"><name pos:start="1763:9" pos:end="1763:24">gen_op_mov_reg_v</name><argument_list pos:start="1763:25" pos:end="1763:56">(<argument pos:start="1763:26" pos:end="1763:27"><expr pos:start="1763:26" pos:end="1763:27"><name pos:start="1763:26" pos:end="1763:27">ot</name></expr></argument>, <argument pos:start="1763:30" pos:end="1763:47"><expr pos:start="1763:30" pos:end="1763:47"><operator pos:start="1763:30" pos:end="1763:30">(</operator><name pos:start="1763:31" pos:end="1763:31">b</name> <operator pos:start="1763:33" pos:end="1763:33">&amp;</operator> <literal type="number" pos:start="1763:35" pos:end="1763:35">7</literal><operator pos:start="1763:36" pos:end="1763:36">)</operator> <operator pos:start="1763:38" pos:end="1763:38">|</operator> <call pos:start="1763:40" pos:end="1763:47"><name pos:start="1763:40" pos:end="1763:44">REX_B</name><argument_list pos:start="1763:45" pos:end="1763:47">(<argument pos:start="1763:46" pos:end="1763:46"><expr pos:start="1763:46" pos:end="1763:46"><name pos:start="1763:46" pos:end="1763:46">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1763:50" pos:end="1763:55"><expr pos:start="1763:50" pos:end="1763:55"><name pos:start="1763:50" pos:end="1763:55">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1765:9" pos:end="1765:14">break;</break>

    <case pos:start="1767:5" pos:end="1767:14">case <expr pos:start="1767:10" pos:end="1767:13"><literal type="number" pos:start="1767:10" pos:end="1767:13">0x60</literal></expr>:</case> <comment type="block" pos:start="1767:16" pos:end="1767:26">/* pusha */</comment>

        <if_stmt pos:start="1769:9" pos:end="1771:28"><if pos:start="1769:9" pos:end="1771:28">if <condition pos:start="1769:12" pos:end="1769:22">(<expr pos:start="1769:13" pos:end="1769:21"><call pos:start="1769:13" pos:end="1769:21"><name pos:start="1769:13" pos:end="1769:18">CODE64</name><argument_list pos:start="1769:19" pos:end="1769:21">(<argument pos:start="1769:20" pos:end="1769:20"><expr pos:start="1769:20" pos:end="1769:20"><name pos:start="1769:20" pos:end="1769:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1771:13" pos:end="1771:28"><block_content pos:start="1771:13" pos:end="1771:28">

            <goto pos:start="1771:13" pos:end="1771:28">goto <name pos:start="1771:18" pos:end="1771:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1773:9" pos:end="1773:21"><expr pos:start="1773:9" pos:end="1773:20"><call pos:start="1773:9" pos:end="1773:20"><name pos:start="1773:9" pos:end="1773:17">gen_pusha</name><argument_list pos:start="1773:18" pos:end="1773:20">(<argument pos:start="1773:19" pos:end="1773:19"><expr pos:start="1773:19" pos:end="1773:19"><name pos:start="1773:19" pos:end="1773:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1775:9" pos:end="1775:14">break;</break>

    <case pos:start="1777:5" pos:end="1777:14">case <expr pos:start="1777:10" pos:end="1777:13"><literal type="number" pos:start="1777:10" pos:end="1777:13">0x61</literal></expr>:</case> <comment type="block" pos:start="1777:16" pos:end="1777:25">/* popa */</comment>

        <if_stmt pos:start="1779:9" pos:end="1781:28"><if pos:start="1779:9" pos:end="1781:28">if <condition pos:start="1779:12" pos:end="1779:22">(<expr pos:start="1779:13" pos:end="1779:21"><call pos:start="1779:13" pos:end="1779:21"><name pos:start="1779:13" pos:end="1779:18">CODE64</name><argument_list pos:start="1779:19" pos:end="1779:21">(<argument pos:start="1779:20" pos:end="1779:20"><expr pos:start="1779:20" pos:end="1779:20"><name pos:start="1779:20" pos:end="1779:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1781:13" pos:end="1781:28"><block_content pos:start="1781:13" pos:end="1781:28">

            <goto pos:start="1781:13" pos:end="1781:28">goto <name pos:start="1781:18" pos:end="1781:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1783:9" pos:end="1783:20"><expr pos:start="1783:9" pos:end="1783:19"><call pos:start="1783:9" pos:end="1783:19"><name pos:start="1783:9" pos:end="1783:16">gen_popa</name><argument_list pos:start="1783:17" pos:end="1783:19">(<argument pos:start="1783:18" pos:end="1783:18"><expr pos:start="1783:18" pos:end="1783:18"><name pos:start="1783:18" pos:end="1783:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1785:9" pos:end="1785:14">break;</break>

    <case pos:start="1787:5" pos:end="1787:14">case <expr pos:start="1787:10" pos:end="1787:13"><literal type="number" pos:start="1787:10" pos:end="1787:13">0x68</literal></expr>:</case> <comment type="block" pos:start="1787:16" pos:end="1787:28">/* push Iv */</comment>

    <case pos:start="1789:5" pos:end="1789:14">case <expr pos:start="1789:10" pos:end="1789:13"><literal type="number" pos:start="1789:10" pos:end="1789:13">0x6a</literal></expr>:</case>

        <expr_stmt pos:start="1791:9" pos:end="1791:34"><expr pos:start="1791:9" pos:end="1791:33"><name pos:start="1791:9" pos:end="1791:10">ot</name> <operator pos:start="1791:12" pos:end="1791:12">=</operator> <call pos:start="1791:14" pos:end="1791:33"><name pos:start="1791:14" pos:end="1791:23">mo_pushpop</name><argument_list pos:start="1791:24" pos:end="1791:33">(<argument pos:start="1791:25" pos:end="1791:25"><expr pos:start="1791:25" pos:end="1791:25"><name pos:start="1791:25" pos:end="1791:25">s</name></expr></argument>, <argument pos:start="1791:28" pos:end="1791:32"><expr pos:start="1791:28" pos:end="1791:32"><name pos:start="1791:28" pos:end="1791:32">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1793:9" pos:end="1799:49"><if pos:start="1793:9" pos:end="1795:39">if <condition pos:start="1793:12" pos:end="1793:22">(<expr pos:start="1793:13" pos:end="1793:21"><name pos:start="1793:13" pos:end="1793:13">b</name> <operator pos:start="1793:15" pos:end="1793:16">==</operator> <literal type="number" pos:start="1793:18" pos:end="1793:21">0x68</literal></expr>)</condition><block type="pseudo" pos:start="1795:13" pos:end="1795:39"><block_content pos:start="1795:13" pos:end="1795:39">

            <expr_stmt pos:start="1795:13" pos:end="1795:39"><expr pos:start="1795:13" pos:end="1795:38"><name pos:start="1795:13" pos:end="1795:15">val</name> <operator pos:start="1795:17" pos:end="1795:17">=</operator> <call pos:start="1795:19" pos:end="1795:38"><name pos:start="1795:19" pos:end="1795:26">insn_get</name><argument_list pos:start="1795:27" pos:end="1795:38">(<argument pos:start="1795:28" pos:end="1795:30"><expr pos:start="1795:28" pos:end="1795:30"><name pos:start="1795:28" pos:end="1795:30">env</name></expr></argument>, <argument pos:start="1795:33" pos:end="1795:33"><expr pos:start="1795:33" pos:end="1795:33"><name pos:start="1795:33" pos:end="1795:33">s</name></expr></argument>, <argument pos:start="1795:36" pos:end="1795:37"><expr pos:start="1795:36" pos:end="1795:37"><name pos:start="1795:36" pos:end="1795:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1797:9" pos:end="1799:49">else<block type="pseudo" pos:start="1799:13" pos:end="1799:49"><block_content pos:start="1799:13" pos:end="1799:49">

            <expr_stmt pos:start="1799:13" pos:end="1799:49"><expr pos:start="1799:13" pos:end="1799:48"><name pos:start="1799:13" pos:end="1799:15">val</name> <operator pos:start="1799:17" pos:end="1799:17">=</operator> <operator pos:start="1799:19" pos:end="1799:19">(</operator><name pos:start="1799:20" pos:end="1799:25">int8_t</name><operator pos:start="1799:26" pos:end="1799:26">)</operator><call pos:start="1799:27" pos:end="1799:48"><name pos:start="1799:27" pos:end="1799:34">insn_get</name><argument_list pos:start="1799:35" pos:end="1799:48">(<argument pos:start="1799:36" pos:end="1799:38"><expr pos:start="1799:36" pos:end="1799:38"><name pos:start="1799:36" pos:end="1799:38">env</name></expr></argument>, <argument pos:start="1799:41" pos:end="1799:41"><expr pos:start="1799:41" pos:end="1799:41"><name pos:start="1799:41" pos:end="1799:41">s</name></expr></argument>, <argument pos:start="1799:44" pos:end="1799:47"><expr pos:start="1799:44" pos:end="1799:47"><name pos:start="1799:44" pos:end="1799:47">MO_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1801:9" pos:end="1801:37"><expr pos:start="1801:9" pos:end="1801:36"><call pos:start="1801:9" pos:end="1801:36"><name pos:start="1801:9" pos:end="1801:23">tcg_gen_movi_tl</name><argument_list pos:start="1801:24" pos:end="1801:36">(<argument pos:start="1801:25" pos:end="1801:30"><expr pos:start="1801:25" pos:end="1801:30"><name pos:start="1801:25" pos:end="1801:30">cpu_T0</name></expr></argument>, <argument pos:start="1801:33" pos:end="1801:35"><expr pos:start="1801:33" pos:end="1801:35"><name pos:start="1801:33" pos:end="1801:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1803:9" pos:end="1803:30"><expr pos:start="1803:9" pos:end="1803:29"><call pos:start="1803:9" pos:end="1803:29"><name pos:start="1803:9" pos:end="1803:18">gen_push_v</name><argument_list pos:start="1803:19" pos:end="1803:29">(<argument pos:start="1803:20" pos:end="1803:20"><expr pos:start="1803:20" pos:end="1803:20"><name pos:start="1803:20" pos:end="1803:20">s</name></expr></argument>, <argument pos:start="1803:23" pos:end="1803:28"><expr pos:start="1803:23" pos:end="1803:28"><name pos:start="1803:23" pos:end="1803:28">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1805:9" pos:end="1805:14">break;</break>

    <case pos:start="1807:5" pos:end="1807:14">case <expr pos:start="1807:10" pos:end="1807:13"><literal type="number" pos:start="1807:10" pos:end="1807:13">0x8f</literal></expr>:</case> <comment type="block" pos:start="1807:16" pos:end="1807:27">/* pop Ev */</comment>

        <expr_stmt pos:start="1809:9" pos:end="1809:38"><expr pos:start="1809:9" pos:end="1809:37"><name pos:start="1809:9" pos:end="1809:13">modrm</name> <operator pos:start="1809:15" pos:end="1809:15">=</operator> <call pos:start="1809:17" pos:end="1809:37"><name pos:start="1809:17" pos:end="1809:29">x86_ldub_code</name><argument_list pos:start="1809:30" pos:end="1809:37">(<argument pos:start="1809:31" pos:end="1809:33"><expr pos:start="1809:31" pos:end="1809:33"><name pos:start="1809:31" pos:end="1809:33">env</name></expr></argument>, <argument pos:start="1809:36" pos:end="1809:36"><expr pos:start="1809:36" pos:end="1809:36"><name pos:start="1809:36" pos:end="1809:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1811:9" pos:end="1811:31"><expr pos:start="1811:9" pos:end="1811:30"><name pos:start="1811:9" pos:end="1811:11">mod</name> <operator pos:start="1811:13" pos:end="1811:13">=</operator> <operator pos:start="1811:15" pos:end="1811:15">(</operator><name pos:start="1811:16" pos:end="1811:20">modrm</name> <operator pos:start="1811:22" pos:end="1811:23">&gt;&gt;</operator> <literal type="number" pos:start="1811:25" pos:end="1811:25">6</literal><operator pos:start="1811:26" pos:end="1811:26">)</operator> <operator pos:start="1811:28" pos:end="1811:28">&amp;</operator> <literal type="number" pos:start="1811:30" pos:end="1811:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1813:9" pos:end="1813:27"><expr pos:start="1813:9" pos:end="1813:26"><name pos:start="1813:9" pos:end="1813:10">ot</name> <operator pos:start="1813:12" pos:end="1813:12">=</operator> <call pos:start="1813:14" pos:end="1813:26"><name pos:start="1813:14" pos:end="1813:23">gen_pop_T0</name><argument_list pos:start="1813:24" pos:end="1813:26">(<argument pos:start="1813:25" pos:end="1813:25"><expr pos:start="1813:25" pos:end="1813:25"><name pos:start="1813:25" pos:end="1813:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1815:9" pos:end="1837:9"><if pos:start="1815:9" pos:end="1825:9">if <condition pos:start="1815:12" pos:end="1815:21">(<expr pos:start="1815:13" pos:end="1815:20"><name pos:start="1815:13" pos:end="1815:15">mod</name> <operator pos:start="1815:17" pos:end="1815:18">==</operator> <literal type="number" pos:start="1815:20" pos:end="1815:20">3</literal></expr>)</condition> <block pos:start="1815:23" pos:end="1825:9">{<block_content pos:start="1819:13" pos:end="1823:45">

            <comment type="block" pos:start="1817:13" pos:end="1817:54">/* NOTE: order is important for pop %sp */</comment>

            <expr_stmt pos:start="1819:13" pos:end="1819:34"><expr pos:start="1819:13" pos:end="1819:33"><call pos:start="1819:13" pos:end="1819:33"><name pos:start="1819:13" pos:end="1819:26">gen_pop_update</name><argument_list pos:start="1819:27" pos:end="1819:33">(<argument pos:start="1819:28" pos:end="1819:28"><expr pos:start="1819:28" pos:end="1819:28"><name pos:start="1819:28" pos:end="1819:28">s</name></expr></argument>, <argument pos:start="1819:31" pos:end="1819:32"><expr pos:start="1819:31" pos:end="1819:32"><name pos:start="1819:31" pos:end="1819:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1821:13" pos:end="1821:40"><expr pos:start="1821:13" pos:end="1821:39"><name pos:start="1821:13" pos:end="1821:14">rm</name> <operator pos:start="1821:16" pos:end="1821:16">=</operator> <operator pos:start="1821:18" pos:end="1821:18">(</operator><name pos:start="1821:19" pos:end="1821:23">modrm</name> <operator pos:start="1821:25" pos:end="1821:25">&amp;</operator> <literal type="number" pos:start="1821:27" pos:end="1821:27">7</literal><operator pos:start="1821:28" pos:end="1821:28">)</operator> <operator pos:start="1821:30" pos:end="1821:30">|</operator> <call pos:start="1821:32" pos:end="1821:39"><name pos:start="1821:32" pos:end="1821:36">REX_B</name><argument_list pos:start="1821:37" pos:end="1821:39">(<argument pos:start="1821:38" pos:end="1821:38"><expr pos:start="1821:38" pos:end="1821:38"><name pos:start="1821:38" pos:end="1821:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1823:13" pos:end="1823:45"><expr pos:start="1823:13" pos:end="1823:44"><call pos:start="1823:13" pos:end="1823:44"><name pos:start="1823:13" pos:end="1823:28">gen_op_mov_reg_v</name><argument_list pos:start="1823:29" pos:end="1823:44">(<argument pos:start="1823:30" pos:end="1823:31"><expr pos:start="1823:30" pos:end="1823:31"><name pos:start="1823:30" pos:end="1823:31">ot</name></expr></argument>, <argument pos:start="1823:34" pos:end="1823:35"><expr pos:start="1823:34" pos:end="1823:35"><name pos:start="1823:34" pos:end="1823:35">rm</name></expr></argument>, <argument pos:start="1823:38" pos:end="1823:43"><expr pos:start="1823:38" pos:end="1823:43"><name pos:start="1823:38" pos:end="1823:43">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1825:11" pos:end="1837:9">else <block pos:start="1825:16" pos:end="1837:9">{<block_content pos:start="1829:13" pos:end="1835:34">

            <comment type="block" pos:start="1827:13" pos:end="1827:65">/* NOTE: order is important too for MMU exceptions */</comment>

            <expr_stmt pos:start="1829:13" pos:end="1829:39"><expr pos:start="1829:13" pos:end="1829:38"><name pos:start="1829:13" pos:end="1829:28"><name pos:start="1829:13" pos:end="1829:13">s</name><operator pos:start="1829:14" pos:end="1829:15">-&gt;</operator><name pos:start="1829:16" pos:end="1829:28">popl_esp_hack</name></name> <operator pos:start="1829:30" pos:end="1829:30">=</operator> <literal type="number" pos:start="1829:32" pos:end="1829:32">1</literal> <operator pos:start="1829:34" pos:end="1829:35">&lt;&lt;</operator> <name pos:start="1829:37" pos:end="1829:38">ot</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1831:13" pos:end="1831:58"><expr pos:start="1831:13" pos:end="1831:57"><call pos:start="1831:13" pos:end="1831:57"><name pos:start="1831:13" pos:end="1831:26">gen_ldst_modrm</name><argument_list pos:start="1831:27" pos:end="1831:57">(<argument pos:start="1831:28" pos:end="1831:30"><expr pos:start="1831:28" pos:end="1831:30"><name pos:start="1831:28" pos:end="1831:30">env</name></expr></argument>, <argument pos:start="1831:33" pos:end="1831:33"><expr pos:start="1831:33" pos:end="1831:33"><name pos:start="1831:33" pos:end="1831:33">s</name></expr></argument>, <argument pos:start="1831:36" pos:end="1831:40"><expr pos:start="1831:36" pos:end="1831:40"><name pos:start="1831:36" pos:end="1831:40">modrm</name></expr></argument>, <argument pos:start="1831:43" pos:end="1831:44"><expr pos:start="1831:43" pos:end="1831:44"><name pos:start="1831:43" pos:end="1831:44">ot</name></expr></argument>, <argument pos:start="1831:47" pos:end="1831:53"><expr pos:start="1831:47" pos:end="1831:53"><name pos:start="1831:47" pos:end="1831:53">OR_TMP0</name></expr></argument>, <argument pos:start="1831:56" pos:end="1831:56"><expr pos:start="1831:56" pos:end="1831:56"><literal type="number" pos:start="1831:56" pos:end="1831:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1833:13" pos:end="1833:33"><expr pos:start="1833:13" pos:end="1833:32"><name pos:start="1833:13" pos:end="1833:28"><name pos:start="1833:13" pos:end="1833:13">s</name><operator pos:start="1833:14" pos:end="1833:15">-&gt;</operator><name pos:start="1833:16" pos:end="1833:28">popl_esp_hack</name></name> <operator pos:start="1833:30" pos:end="1833:30">=</operator> <literal type="number" pos:start="1833:32" pos:end="1833:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1835:13" pos:end="1835:34"><expr pos:start="1835:13" pos:end="1835:33"><call pos:start="1835:13" pos:end="1835:33"><name pos:start="1835:13" pos:end="1835:26">gen_pop_update</name><argument_list pos:start="1835:27" pos:end="1835:33">(<argument pos:start="1835:28" pos:end="1835:28"><expr pos:start="1835:28" pos:end="1835:28"><name pos:start="1835:28" pos:end="1835:28">s</name></expr></argument>, <argument pos:start="1835:31" pos:end="1835:32"><expr pos:start="1835:31" pos:end="1835:32"><name pos:start="1835:31" pos:end="1835:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1839:9" pos:end="1839:14">break;</break>

    <case pos:start="1841:5" pos:end="1841:14">case <expr pos:start="1841:10" pos:end="1841:13"><literal type="number" pos:start="1841:10" pos:end="1841:13">0xc8</literal></expr>:</case> <comment type="block" pos:start="1841:16" pos:end="1841:26">/* enter */</comment>

        <block pos:start="1843:9" pos:end="1853:9">{<block_content pos:start="1845:13" pos:end="1851:37">

            <decl_stmt pos:start="1845:13" pos:end="1845:22"><decl pos:start="1845:13" pos:end="1845:21"><type pos:start="1845:13" pos:end="1845:15"><name pos:start="1845:13" pos:end="1845:15">int</name></type> <name pos:start="1845:17" pos:end="1845:21">level</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1847:13" pos:end="1847:40"><expr pos:start="1847:13" pos:end="1847:39"><name pos:start="1847:13" pos:end="1847:15">val</name> <operator pos:start="1847:17" pos:end="1847:17">=</operator> <call pos:start="1847:19" pos:end="1847:39"><name pos:start="1847:19" pos:end="1847:31">x86_lduw_code</name><argument_list pos:start="1847:32" pos:end="1847:39">(<argument pos:start="1847:33" pos:end="1847:35"><expr pos:start="1847:33" pos:end="1847:35"><name pos:start="1847:33" pos:end="1847:35">env</name></expr></argument>, <argument pos:start="1847:38" pos:end="1847:38"><expr pos:start="1847:38" pos:end="1847:38"><name pos:start="1847:38" pos:end="1847:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1849:13" pos:end="1849:42"><expr pos:start="1849:13" pos:end="1849:41"><name pos:start="1849:13" pos:end="1849:17">level</name> <operator pos:start="1849:19" pos:end="1849:19">=</operator> <call pos:start="1849:21" pos:end="1849:41"><name pos:start="1849:21" pos:end="1849:33">x86_ldub_code</name><argument_list pos:start="1849:34" pos:end="1849:41">(<argument pos:start="1849:35" pos:end="1849:37"><expr pos:start="1849:35" pos:end="1849:37"><name pos:start="1849:35" pos:end="1849:37">env</name></expr></argument>, <argument pos:start="1849:40" pos:end="1849:40"><expr pos:start="1849:40" pos:end="1849:40"><name pos:start="1849:40" pos:end="1849:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1851:13" pos:end="1851:37"><expr pos:start="1851:13" pos:end="1851:36"><call pos:start="1851:13" pos:end="1851:36"><name pos:start="1851:13" pos:end="1851:21">gen_enter</name><argument_list pos:start="1851:22" pos:end="1851:36">(<argument pos:start="1851:23" pos:end="1851:23"><expr pos:start="1851:23" pos:end="1851:23"><name pos:start="1851:23" pos:end="1851:23">s</name></expr></argument>, <argument pos:start="1851:26" pos:end="1851:28"><expr pos:start="1851:26" pos:end="1851:28"><name pos:start="1851:26" pos:end="1851:28">val</name></expr></argument>, <argument pos:start="1851:31" pos:end="1851:35"><expr pos:start="1851:31" pos:end="1851:35"><name pos:start="1851:31" pos:end="1851:35">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1855:9" pos:end="1855:14">break;</break>

    <case pos:start="1857:5" pos:end="1857:14">case <expr pos:start="1857:10" pos:end="1857:13"><literal type="number" pos:start="1857:10" pos:end="1857:13">0xc9</literal></expr>:</case> <comment type="block" pos:start="1857:16" pos:end="1857:26">/* leave */</comment>

        <expr_stmt pos:start="1859:9" pos:end="1859:21"><expr pos:start="1859:9" pos:end="1859:20"><call pos:start="1859:9" pos:end="1859:20"><name pos:start="1859:9" pos:end="1859:17">gen_leave</name><argument_list pos:start="1859:18" pos:end="1859:20">(<argument pos:start="1859:19" pos:end="1859:19"><expr pos:start="1859:19" pos:end="1859:19"><name pos:start="1859:19" pos:end="1859:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1861:9" pos:end="1861:14">break;</break>

    <case pos:start="1863:5" pos:end="1863:14">case <expr pos:start="1863:10" pos:end="1863:13"><literal type="number" pos:start="1863:10" pos:end="1863:13">0x06</literal></expr>:</case> <comment type="block" pos:start="1863:16" pos:end="1863:28">/* push es */</comment>

    <case pos:start="1865:5" pos:end="1865:14">case <expr pos:start="1865:10" pos:end="1865:13"><literal type="number" pos:start="1865:10" pos:end="1865:13">0x0e</literal></expr>:</case> <comment type="block" pos:start="1865:16" pos:end="1865:28">/* push cs */</comment>

    <case pos:start="1867:5" pos:end="1867:14">case <expr pos:start="1867:10" pos:end="1867:13"><literal type="number" pos:start="1867:10" pos:end="1867:13">0x16</literal></expr>:</case> <comment type="block" pos:start="1867:16" pos:end="1867:28">/* push ss */</comment>

    <case pos:start="1869:5" pos:end="1869:14">case <expr pos:start="1869:10" pos:end="1869:13"><literal type="number" pos:start="1869:10" pos:end="1869:13">0x1e</literal></expr>:</case> <comment type="block" pos:start="1869:16" pos:end="1869:28">/* push ds */</comment>

        <if_stmt pos:start="1871:9" pos:end="1873:28"><if pos:start="1871:9" pos:end="1873:28">if <condition pos:start="1871:12" pos:end="1871:22">(<expr pos:start="1871:13" pos:end="1871:21"><call pos:start="1871:13" pos:end="1871:21"><name pos:start="1871:13" pos:end="1871:18">CODE64</name><argument_list pos:start="1871:19" pos:end="1871:21">(<argument pos:start="1871:20" pos:end="1871:20"><expr pos:start="1871:20" pos:end="1871:20"><name pos:start="1871:20" pos:end="1871:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1873:13" pos:end="1873:28"><block_content pos:start="1873:13" pos:end="1873:28">

            <goto pos:start="1873:13" pos:end="1873:28">goto <name pos:start="1873:18" pos:end="1873:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1875:9" pos:end="1875:35"><expr pos:start="1875:9" pos:end="1875:34"><call pos:start="1875:9" pos:end="1875:34"><name pos:start="1875:9" pos:end="1875:26">gen_op_movl_T0_seg</name><argument_list pos:start="1875:27" pos:end="1875:34">(<argument pos:start="1875:28" pos:end="1875:33"><expr pos:start="1875:28" pos:end="1875:33"><name pos:start="1875:28" pos:end="1875:28">b</name> <operator pos:start="1875:30" pos:end="1875:31">&gt;&gt;</operator> <literal type="number" pos:start="1875:33" pos:end="1875:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1877:9" pos:end="1877:30"><expr pos:start="1877:9" pos:end="1877:29"><call pos:start="1877:9" pos:end="1877:29"><name pos:start="1877:9" pos:end="1877:18">gen_push_v</name><argument_list pos:start="1877:19" pos:end="1877:29">(<argument pos:start="1877:20" pos:end="1877:20"><expr pos:start="1877:20" pos:end="1877:20"><name pos:start="1877:20" pos:end="1877:20">s</name></expr></argument>, <argument pos:start="1877:23" pos:end="1877:28"><expr pos:start="1877:23" pos:end="1877:28"><name pos:start="1877:23" pos:end="1877:28">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1879:9" pos:end="1879:14">break;</break>

    <case pos:start="1881:5" pos:end="1881:15">case <expr pos:start="1881:10" pos:end="1881:14"><literal type="number" pos:start="1881:10" pos:end="1881:14">0x1a0</literal></expr>:</case> <comment type="block" pos:start="1881:17" pos:end="1881:29">/* push fs */</comment>

    <case pos:start="1883:5" pos:end="1883:15">case <expr pos:start="1883:10" pos:end="1883:14"><literal type="number" pos:start="1883:10" pos:end="1883:14">0x1a8</literal></expr>:</case> <comment type="block" pos:start="1883:17" pos:end="1883:29">/* push gs */</comment>

        <expr_stmt pos:start="1885:9" pos:end="1885:41"><expr pos:start="1885:9" pos:end="1885:40"><call pos:start="1885:9" pos:end="1885:40"><name pos:start="1885:9" pos:end="1885:26">gen_op_movl_T0_seg</name><argument_list pos:start="1885:27" pos:end="1885:40">(<argument pos:start="1885:28" pos:end="1885:39"><expr pos:start="1885:28" pos:end="1885:39"><operator pos:start="1885:28" pos:end="1885:28">(</operator><name pos:start="1885:29" pos:end="1885:29">b</name> <operator pos:start="1885:31" pos:end="1885:32">&gt;&gt;</operator> <literal type="number" pos:start="1885:34" pos:end="1885:34">3</literal><operator pos:start="1885:35" pos:end="1885:35">)</operator> <operator pos:start="1885:37" pos:end="1885:37">&amp;</operator> <literal type="number" pos:start="1885:39" pos:end="1885:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1887:9" pos:end="1887:30"><expr pos:start="1887:9" pos:end="1887:29"><call pos:start="1887:9" pos:end="1887:29"><name pos:start="1887:9" pos:end="1887:18">gen_push_v</name><argument_list pos:start="1887:19" pos:end="1887:29">(<argument pos:start="1887:20" pos:end="1887:20"><expr pos:start="1887:20" pos:end="1887:20"><name pos:start="1887:20" pos:end="1887:20">s</name></expr></argument>, <argument pos:start="1887:23" pos:end="1887:28"><expr pos:start="1887:23" pos:end="1887:28"><name pos:start="1887:23" pos:end="1887:28">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1889:9" pos:end="1889:14">break;</break>

    <case pos:start="1891:5" pos:end="1891:14">case <expr pos:start="1891:10" pos:end="1891:13"><literal type="number" pos:start="1891:10" pos:end="1891:13">0x07</literal></expr>:</case> <comment type="block" pos:start="1891:16" pos:end="1891:27">/* pop es */</comment>

    <case pos:start="1893:5" pos:end="1893:14">case <expr pos:start="1893:10" pos:end="1893:13"><literal type="number" pos:start="1893:10" pos:end="1893:13">0x17</literal></expr>:</case> <comment type="block" pos:start="1893:16" pos:end="1893:27">/* pop ss */</comment>

    <case pos:start="1895:5" pos:end="1895:14">case <expr pos:start="1895:10" pos:end="1895:13"><literal type="number" pos:start="1895:10" pos:end="1895:13">0x1f</literal></expr>:</case> <comment type="block" pos:start="1895:16" pos:end="1895:27">/* pop ds */</comment>

        <if_stmt pos:start="1897:9" pos:end="1899:28"><if pos:start="1897:9" pos:end="1899:28">if <condition pos:start="1897:12" pos:end="1897:22">(<expr pos:start="1897:13" pos:end="1897:21"><call pos:start="1897:13" pos:end="1897:21"><name pos:start="1897:13" pos:end="1897:18">CODE64</name><argument_list pos:start="1897:19" pos:end="1897:21">(<argument pos:start="1897:20" pos:end="1897:20"><expr pos:start="1897:20" pos:end="1897:20"><name pos:start="1897:20" pos:end="1897:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1899:13" pos:end="1899:28"><block_content pos:start="1899:13" pos:end="1899:28">

            <goto pos:start="1899:13" pos:end="1899:28">goto <name pos:start="1899:18" pos:end="1899:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1901:9" pos:end="1901:21"><expr pos:start="1901:9" pos:end="1901:20"><name pos:start="1901:9" pos:end="1901:11">reg</name> <operator pos:start="1901:13" pos:end="1901:13">=</operator> <name pos:start="1901:15" pos:end="1901:15">b</name> <operator pos:start="1901:17" pos:end="1901:18">&gt;&gt;</operator> <literal type="number" pos:start="1901:20" pos:end="1901:20">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1903:9" pos:end="1903:27"><expr pos:start="1903:9" pos:end="1903:26"><name pos:start="1903:9" pos:end="1903:10">ot</name> <operator pos:start="1903:12" pos:end="1903:12">=</operator> <call pos:start="1903:14" pos:end="1903:26"><name pos:start="1903:14" pos:end="1903:23">gen_pop_T0</name><argument_list pos:start="1903:24" pos:end="1903:26">(<argument pos:start="1903:25" pos:end="1903:25"><expr pos:start="1903:25" pos:end="1903:25"><name pos:start="1903:25" pos:end="1903:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1905:9" pos:end="1905:32"><expr pos:start="1905:9" pos:end="1905:31"><call pos:start="1905:9" pos:end="1905:31"><name pos:start="1905:9" pos:end="1905:23">gen_movl_seg_T0</name><argument_list pos:start="1905:24" pos:end="1905:31">(<argument pos:start="1905:25" pos:end="1905:25"><expr pos:start="1905:25" pos:end="1905:25"><name pos:start="1905:25" pos:end="1905:25">s</name></expr></argument>, <argument pos:start="1905:28" pos:end="1905:30"><expr pos:start="1905:28" pos:end="1905:30"><name pos:start="1905:28" pos:end="1905:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1907:9" pos:end="1907:30"><expr pos:start="1907:9" pos:end="1907:29"><call pos:start="1907:9" pos:end="1907:29"><name pos:start="1907:9" pos:end="1907:22">gen_pop_update</name><argument_list pos:start="1907:23" pos:end="1907:29">(<argument pos:start="1907:24" pos:end="1907:24"><expr pos:start="1907:24" pos:end="1907:24"><name pos:start="1907:24" pos:end="1907:24">s</name></expr></argument>, <argument pos:start="1907:27" pos:end="1907:28"><expr pos:start="1907:27" pos:end="1907:28"><name pos:start="1907:27" pos:end="1907:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1909:9" pos:end="1909:75">/* Note that reg == R_SS in gen_movl_seg_T0 always sets is_jmp.  */</comment>

        <if_stmt pos:start="1911:9" pos:end="1927:9"><if pos:start="1911:9" pos:end="1927:9">if <condition pos:start="1911:12" pos:end="1911:27">(<expr pos:start="1911:13" pos:end="1911:26"><name pos:start="1911:13" pos:end="1911:26"><name pos:start="1911:13" pos:end="1911:13">s</name><operator pos:start="1911:14" pos:end="1911:15">-&gt;</operator><name pos:start="1911:16" pos:end="1911:19">base</name><operator pos:start="1911:20" pos:end="1911:20">.</operator><name pos:start="1911:21" pos:end="1911:26">is_jmp</name></name></expr>)</condition> <block pos:start="1911:29" pos:end="1927:9">{<block_content pos:start="1913:13" pos:end="1925:13">

            <expr_stmt pos:start="1913:13" pos:end="1913:43"><expr pos:start="1913:13" pos:end="1913:42"><call pos:start="1913:13" pos:end="1913:42"><name pos:start="1913:13" pos:end="1913:22">gen_jmp_im</name><argument_list pos:start="1913:23" pos:end="1913:42">(<argument pos:start="1913:24" pos:end="1913:41"><expr pos:start="1913:24" pos:end="1913:41"><name pos:start="1913:24" pos:end="1913:28"><name pos:start="1913:24" pos:end="1913:24">s</name><operator pos:start="1913:25" pos:end="1913:26">-&gt;</operator><name pos:start="1913:27" pos:end="1913:28">pc</name></name> <operator pos:start="1913:30" pos:end="1913:30">-</operator> <name pos:start="1913:32" pos:end="1913:41"><name pos:start="1913:32" pos:end="1913:32">s</name><operator pos:start="1913:33" pos:end="1913:34">-&gt;</operator><name pos:start="1913:35" pos:end="1913:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1915:13" pos:end="1925:13"><if pos:start="1915:13" pos:end="1921:13">if <condition pos:start="1915:16" pos:end="1915:28">(<expr pos:start="1915:17" pos:end="1915:27"><name pos:start="1915:17" pos:end="1915:19">reg</name> <operator pos:start="1915:21" pos:end="1915:22">==</operator> <name pos:start="1915:24" pos:end="1915:27">R_SS</name></expr>)</condition> <block pos:start="1915:30" pos:end="1921:13">{<block_content pos:start="1917:17" pos:end="1919:45">

                <expr_stmt pos:start="1917:17" pos:end="1917:26"><expr pos:start="1917:17" pos:end="1917:25"><name pos:start="1917:17" pos:end="1917:21"><name pos:start="1917:17" pos:end="1917:17">s</name><operator pos:start="1917:18" pos:end="1917:19">-&gt;</operator><name pos:start="1917:20" pos:end="1917:21">tf</name></name> <operator pos:start="1917:23" pos:end="1917:23">=</operator> <literal type="number" pos:start="1917:25" pos:end="1917:25">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1919:17" pos:end="1919:45"><expr pos:start="1919:17" pos:end="1919:44"><call pos:start="1919:17" pos:end="1919:44"><name pos:start="1919:17" pos:end="1919:35">gen_eob_inhibit_irq</name><argument_list pos:start="1919:36" pos:end="1919:44">(<argument pos:start="1919:37" pos:end="1919:37"><expr pos:start="1919:37" pos:end="1919:37"><name pos:start="1919:37" pos:end="1919:37">s</name></expr></argument>, <argument pos:start="1919:40" pos:end="1919:43"><expr pos:start="1919:40" pos:end="1919:43"><name pos:start="1919:40" pos:end="1919:43">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1921:15" pos:end="1925:13">else <block pos:start="1921:20" pos:end="1925:13">{<block_content pos:start="1923:17" pos:end="1923:27">

                <expr_stmt pos:start="1923:17" pos:end="1923:27"><expr pos:start="1923:17" pos:end="1923:26"><call pos:start="1923:17" pos:end="1923:26"><name pos:start="1923:17" pos:end="1923:23">gen_eob</name><argument_list pos:start="1923:24" pos:end="1923:26">(<argument pos:start="1923:25" pos:end="1923:25"><expr pos:start="1923:25" pos:end="1923:25"><name pos:start="1923:25" pos:end="1923:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1929:9" pos:end="1929:14">break;</break>

    <case pos:start="1931:5" pos:end="1931:15">case <expr pos:start="1931:10" pos:end="1931:14"><literal type="number" pos:start="1931:10" pos:end="1931:14">0x1a1</literal></expr>:</case> <comment type="block" pos:start="1931:17" pos:end="1931:28">/* pop fs */</comment>

    <case pos:start="1933:5" pos:end="1933:15">case <expr pos:start="1933:10" pos:end="1933:14"><literal type="number" pos:start="1933:10" pos:end="1933:14">0x1a9</literal></expr>:</case> <comment type="block" pos:start="1933:17" pos:end="1933:28">/* pop gs */</comment>

        <expr_stmt pos:start="1935:9" pos:end="1935:27"><expr pos:start="1935:9" pos:end="1935:26"><name pos:start="1935:9" pos:end="1935:10">ot</name> <operator pos:start="1935:12" pos:end="1935:12">=</operator> <call pos:start="1935:14" pos:end="1935:26"><name pos:start="1935:14" pos:end="1935:23">gen_pop_T0</name><argument_list pos:start="1935:24" pos:end="1935:26">(<argument pos:start="1935:25" pos:end="1935:25"><expr pos:start="1935:25" pos:end="1935:25"><name pos:start="1935:25" pos:end="1935:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1937:9" pos:end="1937:41"><expr pos:start="1937:9" pos:end="1937:40"><call pos:start="1937:9" pos:end="1937:40"><name pos:start="1937:9" pos:end="1937:23">gen_movl_seg_T0</name><argument_list pos:start="1937:24" pos:end="1937:40">(<argument pos:start="1937:25" pos:end="1937:25"><expr pos:start="1937:25" pos:end="1937:25"><name pos:start="1937:25" pos:end="1937:25">s</name></expr></argument>, <argument pos:start="1937:28" pos:end="1937:39"><expr pos:start="1937:28" pos:end="1937:39"><operator pos:start="1937:28" pos:end="1937:28">(</operator><name pos:start="1937:29" pos:end="1937:29">b</name> <operator pos:start="1937:31" pos:end="1937:32">&gt;&gt;</operator> <literal type="number" pos:start="1937:34" pos:end="1937:34">3</literal><operator pos:start="1937:35" pos:end="1937:35">)</operator> <operator pos:start="1937:37" pos:end="1937:37">&amp;</operator> <literal type="number" pos:start="1937:39" pos:end="1937:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1939:9" pos:end="1939:30"><expr pos:start="1939:9" pos:end="1939:29"><call pos:start="1939:9" pos:end="1939:29"><name pos:start="1939:9" pos:end="1939:22">gen_pop_update</name><argument_list pos:start="1939:23" pos:end="1939:29">(<argument pos:start="1939:24" pos:end="1939:24"><expr pos:start="1939:24" pos:end="1939:24"><name pos:start="1939:24" pos:end="1939:24">s</name></expr></argument>, <argument pos:start="1939:27" pos:end="1939:28"><expr pos:start="1939:27" pos:end="1939:28"><name pos:start="1939:27" pos:end="1939:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1941:9" pos:end="1947:9"><if pos:start="1941:9" pos:end="1947:9">if <condition pos:start="1941:12" pos:end="1941:27">(<expr pos:start="1941:13" pos:end="1941:26"><name pos:start="1941:13" pos:end="1941:26"><name pos:start="1941:13" pos:end="1941:13">s</name><operator pos:start="1941:14" pos:end="1941:15">-&gt;</operator><name pos:start="1941:16" pos:end="1941:19">base</name><operator pos:start="1941:20" pos:end="1941:20">.</operator><name pos:start="1941:21" pos:end="1941:26">is_jmp</name></name></expr>)</condition> <block pos:start="1941:29" pos:end="1947:9">{<block_content pos:start="1943:13" pos:end="1945:23">

            <expr_stmt pos:start="1943:13" pos:end="1943:43"><expr pos:start="1943:13" pos:end="1943:42"><call pos:start="1943:13" pos:end="1943:42"><name pos:start="1943:13" pos:end="1943:22">gen_jmp_im</name><argument_list pos:start="1943:23" pos:end="1943:42">(<argument pos:start="1943:24" pos:end="1943:41"><expr pos:start="1943:24" pos:end="1943:41"><name pos:start="1943:24" pos:end="1943:28"><name pos:start="1943:24" pos:end="1943:24">s</name><operator pos:start="1943:25" pos:end="1943:26">-&gt;</operator><name pos:start="1943:27" pos:end="1943:28">pc</name></name> <operator pos:start="1943:30" pos:end="1943:30">-</operator> <name pos:start="1943:32" pos:end="1943:41"><name pos:start="1943:32" pos:end="1943:32">s</name><operator pos:start="1943:33" pos:end="1943:34">-&gt;</operator><name pos:start="1943:35" pos:end="1943:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1945:13" pos:end="1945:23"><expr pos:start="1945:13" pos:end="1945:22"><call pos:start="1945:13" pos:end="1945:22"><name pos:start="1945:13" pos:end="1945:19">gen_eob</name><argument_list pos:start="1945:20" pos:end="1945:22">(<argument pos:start="1945:21" pos:end="1945:21"><expr pos:start="1945:21" pos:end="1945:21"><name pos:start="1945:21" pos:end="1945:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1949:9" pos:end="1949:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1953:9" pos:end="1953:36">/**************************/</comment>

        <comment type="block" pos:start="1955:9" pos:end="1955:17">/* mov */</comment>

    <case pos:start="1957:5" pos:end="1957:14">case <expr pos:start="1957:10" pos:end="1957:13"><literal type="number" pos:start="1957:10" pos:end="1957:13">0x88</literal></expr>:</case>

    <case pos:start="1959:5" pos:end="1959:14">case <expr pos:start="1959:10" pos:end="1959:13"><literal type="number" pos:start="1959:10" pos:end="1959:13">0x89</literal></expr>:</case> <comment type="block" pos:start="1959:16" pos:end="1959:31">/* mov Gv, Ev */</comment>

        <expr_stmt pos:start="1961:9" pos:end="1961:30"><expr pos:start="1961:9" pos:end="1961:29"><name pos:start="1961:9" pos:end="1961:10">ot</name> <operator pos:start="1961:12" pos:end="1961:12">=</operator> <call pos:start="1961:14" pos:end="1961:29"><name pos:start="1961:14" pos:end="1961:19">mo_b_d</name><argument_list pos:start="1961:20" pos:end="1961:29">(<argument pos:start="1961:21" pos:end="1961:21"><expr pos:start="1961:21" pos:end="1961:21"><name pos:start="1961:21" pos:end="1961:21">b</name></expr></argument>, <argument pos:start="1961:24" pos:end="1961:28"><expr pos:start="1961:24" pos:end="1961:28"><name pos:start="1961:24" pos:end="1961:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1963:9" pos:end="1963:38"><expr pos:start="1963:9" pos:end="1963:37"><name pos:start="1963:9" pos:end="1963:13">modrm</name> <operator pos:start="1963:15" pos:end="1963:15">=</operator> <call pos:start="1963:17" pos:end="1963:37"><name pos:start="1963:17" pos:end="1963:29">x86_ldub_code</name><argument_list pos:start="1963:30" pos:end="1963:37">(<argument pos:start="1963:31" pos:end="1963:33"><expr pos:start="1963:31" pos:end="1963:33"><name pos:start="1963:31" pos:end="1963:33">env</name></expr></argument>, <argument pos:start="1963:36" pos:end="1963:36"><expr pos:start="1963:36" pos:end="1963:36"><name pos:start="1963:36" pos:end="1963:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1965:9" pos:end="1965:41"><expr pos:start="1965:9" pos:end="1965:40"><name pos:start="1965:9" pos:end="1965:11">reg</name> <operator pos:start="1965:13" pos:end="1965:13">=</operator> <operator pos:start="1965:15" pos:end="1965:15">(</operator><operator pos:start="1965:16" pos:end="1965:16">(</operator><name pos:start="1965:17" pos:end="1965:21">modrm</name> <operator pos:start="1965:23" pos:end="1965:24">&gt;&gt;</operator> <literal type="number" pos:start="1965:26" pos:end="1965:26">3</literal><operator pos:start="1965:27" pos:end="1965:27">)</operator> <operator pos:start="1965:29" pos:end="1965:29">&amp;</operator> <literal type="number" pos:start="1965:31" pos:end="1965:31">7</literal><operator pos:start="1965:32" pos:end="1965:32">)</operator> <operator pos:start="1965:34" pos:end="1965:34">|</operator> <name pos:start="1965:36" pos:end="1965:40">rex_r</name></expr>;</expr_stmt>



        <comment type="block" pos:start="1969:9" pos:end="1969:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="1971:9" pos:end="1971:50"><expr pos:start="1971:9" pos:end="1971:49"><call pos:start="1971:9" pos:end="1971:49"><name pos:start="1971:9" pos:end="1971:22">gen_ldst_modrm</name><argument_list pos:start="1971:23" pos:end="1971:49">(<argument pos:start="1971:24" pos:end="1971:26"><expr pos:start="1971:24" pos:end="1971:26"><name pos:start="1971:24" pos:end="1971:26">env</name></expr></argument>, <argument pos:start="1971:29" pos:end="1971:29"><expr pos:start="1971:29" pos:end="1971:29"><name pos:start="1971:29" pos:end="1971:29">s</name></expr></argument>, <argument pos:start="1971:32" pos:end="1971:36"><expr pos:start="1971:32" pos:end="1971:36"><name pos:start="1971:32" pos:end="1971:36">modrm</name></expr></argument>, <argument pos:start="1971:39" pos:end="1971:40"><expr pos:start="1971:39" pos:end="1971:40"><name pos:start="1971:39" pos:end="1971:40">ot</name></expr></argument>, <argument pos:start="1971:43" pos:end="1971:45"><expr pos:start="1971:43" pos:end="1971:45"><name pos:start="1971:43" pos:end="1971:45">reg</name></expr></argument>, <argument pos:start="1971:48" pos:end="1971:48"><expr pos:start="1971:48" pos:end="1971:48"><literal type="number" pos:start="1971:48" pos:end="1971:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1973:9" pos:end="1973:14">break;</break>

    <case pos:start="1975:5" pos:end="1975:14">case <expr pos:start="1975:10" pos:end="1975:13"><literal type="number" pos:start="1975:10" pos:end="1975:13">0xc6</literal></expr>:</case>

    <case pos:start="1977:5" pos:end="1977:14">case <expr pos:start="1977:10" pos:end="1977:13"><literal type="number" pos:start="1977:10" pos:end="1977:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="1977:16" pos:end="1977:31">/* mov Ev, Iv */</comment>

        <expr_stmt pos:start="1979:9" pos:end="1979:30"><expr pos:start="1979:9" pos:end="1979:29"><name pos:start="1979:9" pos:end="1979:10">ot</name> <operator pos:start="1979:12" pos:end="1979:12">=</operator> <call pos:start="1979:14" pos:end="1979:29"><name pos:start="1979:14" pos:end="1979:19">mo_b_d</name><argument_list pos:start="1979:20" pos:end="1979:29">(<argument pos:start="1979:21" pos:end="1979:21"><expr pos:start="1979:21" pos:end="1979:21"><name pos:start="1979:21" pos:end="1979:21">b</name></expr></argument>, <argument pos:start="1979:24" pos:end="1979:28"><expr pos:start="1979:24" pos:end="1979:28"><name pos:start="1979:24" pos:end="1979:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1981:9" pos:end="1981:38"><expr pos:start="1981:9" pos:end="1981:37"><name pos:start="1981:9" pos:end="1981:13">modrm</name> <operator pos:start="1981:15" pos:end="1981:15">=</operator> <call pos:start="1981:17" pos:end="1981:37"><name pos:start="1981:17" pos:end="1981:29">x86_ldub_code</name><argument_list pos:start="1981:30" pos:end="1981:37">(<argument pos:start="1981:31" pos:end="1981:33"><expr pos:start="1981:31" pos:end="1981:33"><name pos:start="1981:31" pos:end="1981:33">env</name></expr></argument>, <argument pos:start="1981:36" pos:end="1981:36"><expr pos:start="1981:36" pos:end="1981:36"><name pos:start="1981:36" pos:end="1981:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1983:9" pos:end="1983:31"><expr pos:start="1983:9" pos:end="1983:30"><name pos:start="1983:9" pos:end="1983:11">mod</name> <operator pos:start="1983:13" pos:end="1983:13">=</operator> <operator pos:start="1983:15" pos:end="1983:15">(</operator><name pos:start="1983:16" pos:end="1983:20">modrm</name> <operator pos:start="1983:22" pos:end="1983:23">&gt;&gt;</operator> <literal type="number" pos:start="1983:25" pos:end="1983:25">6</literal><operator pos:start="1983:26" pos:end="1983:26">)</operator> <operator pos:start="1983:28" pos:end="1983:28">&amp;</operator> <literal type="number" pos:start="1983:30" pos:end="1983:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1985:9" pos:end="1991:9"><if pos:start="1985:9" pos:end="1991:9">if <condition pos:start="1985:12" pos:end="1985:21">(<expr pos:start="1985:13" pos:end="1985:20"><name pos:start="1985:13" pos:end="1985:15">mod</name> <operator pos:start="1985:17" pos:end="1985:18">!=</operator> <literal type="number" pos:start="1985:20" pos:end="1985:20">3</literal></expr>)</condition> <block pos:start="1985:23" pos:end="1991:9">{<block_content pos:start="1987:13" pos:end="1989:41">

            <expr_stmt pos:start="1987:13" pos:end="1987:48"><expr pos:start="1987:13" pos:end="1987:47"><name pos:start="1987:13" pos:end="1987:25"><name pos:start="1987:13" pos:end="1987:13">s</name><operator pos:start="1987:14" pos:end="1987:15">-&gt;</operator><name pos:start="1987:16" pos:end="1987:25">rip_offset</name></name> <operator pos:start="1987:27" pos:end="1987:27">=</operator> <call pos:start="1987:29" pos:end="1987:47"><name pos:start="1987:29" pos:end="1987:43">insn_const_size</name><argument_list pos:start="1987:44" pos:end="1987:47">(<argument pos:start="1987:45" pos:end="1987:46"><expr pos:start="1987:45" pos:end="1987:46"><name pos:start="1987:45" pos:end="1987:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1989:13" pos:end="1989:41"><expr pos:start="1989:13" pos:end="1989:40"><call pos:start="1989:13" pos:end="1989:40"><name pos:start="1989:13" pos:end="1989:25">gen_lea_modrm</name><argument_list pos:start="1989:26" pos:end="1989:40">(<argument pos:start="1989:27" pos:end="1989:29"><expr pos:start="1989:27" pos:end="1989:29"><name pos:start="1989:27" pos:end="1989:29">env</name></expr></argument>, <argument pos:start="1989:32" pos:end="1989:32"><expr pos:start="1989:32" pos:end="1989:32"><name pos:start="1989:32" pos:end="1989:32">s</name></expr></argument>, <argument pos:start="1989:35" pos:end="1989:39"><expr pos:start="1989:35" pos:end="1989:39"><name pos:start="1989:35" pos:end="1989:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1993:9" pos:end="1993:35"><expr pos:start="1993:9" pos:end="1993:34"><name pos:start="1993:9" pos:end="1993:11">val</name> <operator pos:start="1993:13" pos:end="1993:13">=</operator> <call pos:start="1993:15" pos:end="1993:34"><name pos:start="1993:15" pos:end="1993:22">insn_get</name><argument_list pos:start="1993:23" pos:end="1993:34">(<argument pos:start="1993:24" pos:end="1993:26"><expr pos:start="1993:24" pos:end="1993:26"><name pos:start="1993:24" pos:end="1993:26">env</name></expr></argument>, <argument pos:start="1993:29" pos:end="1993:29"><expr pos:start="1993:29" pos:end="1993:29"><name pos:start="1993:29" pos:end="1993:29">s</name></expr></argument>, <argument pos:start="1993:32" pos:end="1993:33"><expr pos:start="1993:32" pos:end="1993:33"><name pos:start="1993:32" pos:end="1993:33">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1995:9" pos:end="1995:37"><expr pos:start="1995:9" pos:end="1995:36"><call pos:start="1995:9" pos:end="1995:36"><name pos:start="1995:9" pos:end="1995:23">tcg_gen_movi_tl</name><argument_list pos:start="1995:24" pos:end="1995:36">(<argument pos:start="1995:25" pos:end="1995:30"><expr pos:start="1995:25" pos:end="1995:30"><name pos:start="1995:25" pos:end="1995:30">cpu_T0</name></expr></argument>, <argument pos:start="1995:33" pos:end="1995:35"><expr pos:start="1995:33" pos:end="1995:35"><name pos:start="1995:33" pos:end="1995:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1997:9" pos:end="2005:9"><if pos:start="1997:9" pos:end="2001:9">if <condition pos:start="1997:12" pos:end="1997:21">(<expr pos:start="1997:13" pos:end="1997:20"><name pos:start="1997:13" pos:end="1997:15">mod</name> <operator pos:start="1997:17" pos:end="1997:18">!=</operator> <literal type="number" pos:start="1997:20" pos:end="1997:20">3</literal></expr>)</condition> <block pos:start="1997:23" pos:end="2001:9">{<block_content pos:start="1999:13" pos:end="1999:47">

            <expr_stmt pos:start="1999:13" pos:end="1999:47"><expr pos:start="1999:13" pos:end="1999:46"><call pos:start="1999:13" pos:end="1999:46"><name pos:start="1999:13" pos:end="1999:23">gen_op_st_v</name><argument_list pos:start="1999:24" pos:end="1999:46">(<argument pos:start="1999:25" pos:end="1999:25"><expr pos:start="1999:25" pos:end="1999:25"><name pos:start="1999:25" pos:end="1999:25">s</name></expr></argument>, <argument pos:start="1999:28" pos:end="1999:29"><expr pos:start="1999:28" pos:end="1999:29"><name pos:start="1999:28" pos:end="1999:29">ot</name></expr></argument>, <argument pos:start="1999:32" pos:end="1999:37"><expr pos:start="1999:32" pos:end="1999:37"><name pos:start="1999:32" pos:end="1999:37">cpu_T0</name></expr></argument>, <argument pos:start="1999:40" pos:end="1999:45"><expr pos:start="1999:40" pos:end="1999:45"><name pos:start="1999:40" pos:end="1999:45">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2001:11" pos:end="2005:9">else <block pos:start="2001:16" pos:end="2005:9">{<block_content pos:start="2003:13" pos:end="2003:65">

            <expr_stmt pos:start="2003:13" pos:end="2003:65"><expr pos:start="2003:13" pos:end="2003:64"><call pos:start="2003:13" pos:end="2003:64"><name pos:start="2003:13" pos:end="2003:28">gen_op_mov_reg_v</name><argument_list pos:start="2003:29" pos:end="2003:64">(<argument pos:start="2003:30" pos:end="2003:31"><expr pos:start="2003:30" pos:end="2003:31"><name pos:start="2003:30" pos:end="2003:31">ot</name></expr></argument>, <argument pos:start="2003:34" pos:end="2003:55"><expr pos:start="2003:34" pos:end="2003:55"><operator pos:start="2003:34" pos:end="2003:34">(</operator><name pos:start="2003:35" pos:end="2003:39">modrm</name> <operator pos:start="2003:41" pos:end="2003:41">&amp;</operator> <literal type="number" pos:start="2003:43" pos:end="2003:43">7</literal><operator pos:start="2003:44" pos:end="2003:44">)</operator> <operator pos:start="2003:46" pos:end="2003:46">|</operator> <call pos:start="2003:48" pos:end="2003:55"><name pos:start="2003:48" pos:end="2003:52">REX_B</name><argument_list pos:start="2003:53" pos:end="2003:55">(<argument pos:start="2003:54" pos:end="2003:54"><expr pos:start="2003:54" pos:end="2003:54"><name pos:start="2003:54" pos:end="2003:54">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2003:58" pos:end="2003:63"><expr pos:start="2003:58" pos:end="2003:63"><name pos:start="2003:58" pos:end="2003:63">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2007:9" pos:end="2007:14">break;</break>

    <case pos:start="2009:5" pos:end="2009:14">case <expr pos:start="2009:10" pos:end="2009:13"><literal type="number" pos:start="2009:10" pos:end="2009:13">0x8a</literal></expr>:</case>

    <case pos:start="2011:5" pos:end="2011:14">case <expr pos:start="2011:10" pos:end="2011:13"><literal type="number" pos:start="2011:10" pos:end="2011:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="2011:16" pos:end="2011:31">/* mov Ev, Gv */</comment>

        <expr_stmt pos:start="2013:9" pos:end="2013:30"><expr pos:start="2013:9" pos:end="2013:29"><name pos:start="2013:9" pos:end="2013:10">ot</name> <operator pos:start="2013:12" pos:end="2013:12">=</operator> <call pos:start="2013:14" pos:end="2013:29"><name pos:start="2013:14" pos:end="2013:19">mo_b_d</name><argument_list pos:start="2013:20" pos:end="2013:29">(<argument pos:start="2013:21" pos:end="2013:21"><expr pos:start="2013:21" pos:end="2013:21"><name pos:start="2013:21" pos:end="2013:21">b</name></expr></argument>, <argument pos:start="2013:24" pos:end="2013:28"><expr pos:start="2013:24" pos:end="2013:28"><name pos:start="2013:24" pos:end="2013:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2015:9" pos:end="2015:38"><expr pos:start="2015:9" pos:end="2015:37"><name pos:start="2015:9" pos:end="2015:13">modrm</name> <operator pos:start="2015:15" pos:end="2015:15">=</operator> <call pos:start="2015:17" pos:end="2015:37"><name pos:start="2015:17" pos:end="2015:29">x86_ldub_code</name><argument_list pos:start="2015:30" pos:end="2015:37">(<argument pos:start="2015:31" pos:end="2015:33"><expr pos:start="2015:31" pos:end="2015:33"><name pos:start="2015:31" pos:end="2015:33">env</name></expr></argument>, <argument pos:start="2015:36" pos:end="2015:36"><expr pos:start="2015:36" pos:end="2015:36"><name pos:start="2015:36" pos:end="2015:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2017:9" pos:end="2017:41"><expr pos:start="2017:9" pos:end="2017:40"><name pos:start="2017:9" pos:end="2017:11">reg</name> <operator pos:start="2017:13" pos:end="2017:13">=</operator> <operator pos:start="2017:15" pos:end="2017:15">(</operator><operator pos:start="2017:16" pos:end="2017:16">(</operator><name pos:start="2017:17" pos:end="2017:21">modrm</name> <operator pos:start="2017:23" pos:end="2017:24">&gt;&gt;</operator> <literal type="number" pos:start="2017:26" pos:end="2017:26">3</literal><operator pos:start="2017:27" pos:end="2017:27">)</operator> <operator pos:start="2017:29" pos:end="2017:29">&amp;</operator> <literal type="number" pos:start="2017:31" pos:end="2017:31">7</literal><operator pos:start="2017:32" pos:end="2017:32">)</operator> <operator pos:start="2017:34" pos:end="2017:34">|</operator> <name pos:start="2017:36" pos:end="2017:40">rex_r</name></expr>;</expr_stmt>



        <expr_stmt pos:start="2021:9" pos:end="2021:54"><expr pos:start="2021:9" pos:end="2021:53"><call pos:start="2021:9" pos:end="2021:53"><name pos:start="2021:9" pos:end="2021:22">gen_ldst_modrm</name><argument_list pos:start="2021:23" pos:end="2021:53">(<argument pos:start="2021:24" pos:end="2021:26"><expr pos:start="2021:24" pos:end="2021:26"><name pos:start="2021:24" pos:end="2021:26">env</name></expr></argument>, <argument pos:start="2021:29" pos:end="2021:29"><expr pos:start="2021:29" pos:end="2021:29"><name pos:start="2021:29" pos:end="2021:29">s</name></expr></argument>, <argument pos:start="2021:32" pos:end="2021:36"><expr pos:start="2021:32" pos:end="2021:36"><name pos:start="2021:32" pos:end="2021:36">modrm</name></expr></argument>, <argument pos:start="2021:39" pos:end="2021:40"><expr pos:start="2021:39" pos:end="2021:40"><name pos:start="2021:39" pos:end="2021:40">ot</name></expr></argument>, <argument pos:start="2021:43" pos:end="2021:49"><expr pos:start="2021:43" pos:end="2021:49"><name pos:start="2021:43" pos:end="2021:49">OR_TMP0</name></expr></argument>, <argument pos:start="2021:52" pos:end="2021:52"><expr pos:start="2021:52" pos:end="2021:52"><literal type="number" pos:start="2021:52" pos:end="2021:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2023:9" pos:end="2023:42"><expr pos:start="2023:9" pos:end="2023:41"><call pos:start="2023:9" pos:end="2023:41"><name pos:start="2023:9" pos:end="2023:24">gen_op_mov_reg_v</name><argument_list pos:start="2023:25" pos:end="2023:41">(<argument pos:start="2023:26" pos:end="2023:27"><expr pos:start="2023:26" pos:end="2023:27"><name pos:start="2023:26" pos:end="2023:27">ot</name></expr></argument>, <argument pos:start="2023:30" pos:end="2023:32"><expr pos:start="2023:30" pos:end="2023:32"><name pos:start="2023:30" pos:end="2023:32">reg</name></expr></argument>, <argument pos:start="2023:35" pos:end="2023:40"><expr pos:start="2023:35" pos:end="2023:40"><name pos:start="2023:35" pos:end="2023:40">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2025:9" pos:end="2025:14">break;</break>

    <case pos:start="2027:5" pos:end="2027:14">case <expr pos:start="2027:10" pos:end="2027:13"><literal type="number" pos:start="2027:10" pos:end="2027:13">0x8e</literal></expr>:</case> <comment type="block" pos:start="2027:16" pos:end="2027:32">/* mov seg, Gv */</comment>

        <expr_stmt pos:start="2029:9" pos:end="2029:38"><expr pos:start="2029:9" pos:end="2029:37"><name pos:start="2029:9" pos:end="2029:13">modrm</name> <operator pos:start="2029:15" pos:end="2029:15">=</operator> <call pos:start="2029:17" pos:end="2029:37"><name pos:start="2029:17" pos:end="2029:29">x86_ldub_code</name><argument_list pos:start="2029:30" pos:end="2029:37">(<argument pos:start="2029:31" pos:end="2029:33"><expr pos:start="2029:31" pos:end="2029:33"><name pos:start="2029:31" pos:end="2029:33">env</name></expr></argument>, <argument pos:start="2029:36" pos:end="2029:36"><expr pos:start="2029:36" pos:end="2029:36"><name pos:start="2029:36" pos:end="2029:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2031:9" pos:end="2031:31"><expr pos:start="2031:9" pos:end="2031:30"><name pos:start="2031:9" pos:end="2031:11">reg</name> <operator pos:start="2031:13" pos:end="2031:13">=</operator> <operator pos:start="2031:15" pos:end="2031:15">(</operator><name pos:start="2031:16" pos:end="2031:20">modrm</name> <operator pos:start="2031:22" pos:end="2031:23">&gt;&gt;</operator> <literal type="number" pos:start="2031:25" pos:end="2031:25">3</literal><operator pos:start="2031:26" pos:end="2031:26">)</operator> <operator pos:start="2031:28" pos:end="2031:28">&amp;</operator> <literal type="number" pos:start="2031:30" pos:end="2031:30">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2033:9" pos:end="2035:28"><if pos:start="2033:9" pos:end="2035:28">if <condition pos:start="2033:12" pos:end="2033:36">(<expr pos:start="2033:13" pos:end="2033:35"><name pos:start="2033:13" pos:end="2033:15">reg</name> <operator pos:start="2033:17" pos:end="2033:18">&gt;=</operator> <literal type="number" pos:start="2033:20" pos:end="2033:20">6</literal> <operator pos:start="2033:22" pos:end="2033:23">||</operator> <name pos:start="2033:25" pos:end="2033:27">reg</name> <operator pos:start="2033:29" pos:end="2033:30">==</operator> <name pos:start="2033:32" pos:end="2033:35">R_CS</name></expr>)</condition><block type="pseudo" pos:start="2035:13" pos:end="2035:28"><block_content pos:start="2035:13" pos:end="2035:28">

            <goto pos:start="2035:13" pos:end="2035:28">goto <name pos:start="2035:18" pos:end="2035:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2037:9" pos:end="2037:57"><expr pos:start="2037:9" pos:end="2037:56"><call pos:start="2037:9" pos:end="2037:56"><name pos:start="2037:9" pos:end="2037:22">gen_ldst_modrm</name><argument_list pos:start="2037:23" pos:end="2037:56">(<argument pos:start="2037:24" pos:end="2037:26"><expr pos:start="2037:24" pos:end="2037:26"><name pos:start="2037:24" pos:end="2037:26">env</name></expr></argument>, <argument pos:start="2037:29" pos:end="2037:29"><expr pos:start="2037:29" pos:end="2037:29"><name pos:start="2037:29" pos:end="2037:29">s</name></expr></argument>, <argument pos:start="2037:32" pos:end="2037:36"><expr pos:start="2037:32" pos:end="2037:36"><name pos:start="2037:32" pos:end="2037:36">modrm</name></expr></argument>, <argument pos:start="2037:39" pos:end="2037:43"><expr pos:start="2037:39" pos:end="2037:43"><name pos:start="2037:39" pos:end="2037:43">MO_16</name></expr></argument>, <argument pos:start="2037:46" pos:end="2037:52"><expr pos:start="2037:46" pos:end="2037:52"><name pos:start="2037:46" pos:end="2037:52">OR_TMP0</name></expr></argument>, <argument pos:start="2037:55" pos:end="2037:55"><expr pos:start="2037:55" pos:end="2037:55"><literal type="number" pos:start="2037:55" pos:end="2037:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2039:9" pos:end="2039:32"><expr pos:start="2039:9" pos:end="2039:31"><call pos:start="2039:9" pos:end="2039:31"><name pos:start="2039:9" pos:end="2039:23">gen_movl_seg_T0</name><argument_list pos:start="2039:24" pos:end="2039:31">(<argument pos:start="2039:25" pos:end="2039:25"><expr pos:start="2039:25" pos:end="2039:25"><name pos:start="2039:25" pos:end="2039:25">s</name></expr></argument>, <argument pos:start="2039:28" pos:end="2039:30"><expr pos:start="2039:28" pos:end="2039:30"><name pos:start="2039:28" pos:end="2039:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2041:9" pos:end="2041:75">/* Note that reg == R_SS in gen_movl_seg_T0 always sets is_jmp.  */</comment>

        <if_stmt pos:start="2043:9" pos:end="2059:9"><if pos:start="2043:9" pos:end="2059:9">if <condition pos:start="2043:12" pos:end="2043:27">(<expr pos:start="2043:13" pos:end="2043:26"><name pos:start="2043:13" pos:end="2043:26"><name pos:start="2043:13" pos:end="2043:13">s</name><operator pos:start="2043:14" pos:end="2043:15">-&gt;</operator><name pos:start="2043:16" pos:end="2043:19">base</name><operator pos:start="2043:20" pos:end="2043:20">.</operator><name pos:start="2043:21" pos:end="2043:26">is_jmp</name></name></expr>)</condition> <block pos:start="2043:29" pos:end="2059:9">{<block_content pos:start="2045:13" pos:end="2057:13">

            <expr_stmt pos:start="2045:13" pos:end="2045:43"><expr pos:start="2045:13" pos:end="2045:42"><call pos:start="2045:13" pos:end="2045:42"><name pos:start="2045:13" pos:end="2045:22">gen_jmp_im</name><argument_list pos:start="2045:23" pos:end="2045:42">(<argument pos:start="2045:24" pos:end="2045:41"><expr pos:start="2045:24" pos:end="2045:41"><name pos:start="2045:24" pos:end="2045:28"><name pos:start="2045:24" pos:end="2045:24">s</name><operator pos:start="2045:25" pos:end="2045:26">-&gt;</operator><name pos:start="2045:27" pos:end="2045:28">pc</name></name> <operator pos:start="2045:30" pos:end="2045:30">-</operator> <name pos:start="2045:32" pos:end="2045:41"><name pos:start="2045:32" pos:end="2045:32">s</name><operator pos:start="2045:33" pos:end="2045:34">-&gt;</operator><name pos:start="2045:35" pos:end="2045:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2047:13" pos:end="2057:13"><if pos:start="2047:13" pos:end="2053:13">if <condition pos:start="2047:16" pos:end="2047:28">(<expr pos:start="2047:17" pos:end="2047:27"><name pos:start="2047:17" pos:end="2047:19">reg</name> <operator pos:start="2047:21" pos:end="2047:22">==</operator> <name pos:start="2047:24" pos:end="2047:27">R_SS</name></expr>)</condition> <block pos:start="2047:30" pos:end="2053:13">{<block_content pos:start="2049:17" pos:end="2051:45">

                <expr_stmt pos:start="2049:17" pos:end="2049:26"><expr pos:start="2049:17" pos:end="2049:25"><name pos:start="2049:17" pos:end="2049:21"><name pos:start="2049:17" pos:end="2049:17">s</name><operator pos:start="2049:18" pos:end="2049:19">-&gt;</operator><name pos:start="2049:20" pos:end="2049:21">tf</name></name> <operator pos:start="2049:23" pos:end="2049:23">=</operator> <literal type="number" pos:start="2049:25" pos:end="2049:25">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="2051:17" pos:end="2051:45"><expr pos:start="2051:17" pos:end="2051:44"><call pos:start="2051:17" pos:end="2051:44"><name pos:start="2051:17" pos:end="2051:35">gen_eob_inhibit_irq</name><argument_list pos:start="2051:36" pos:end="2051:44">(<argument pos:start="2051:37" pos:end="2051:37"><expr pos:start="2051:37" pos:end="2051:37"><name pos:start="2051:37" pos:end="2051:37">s</name></expr></argument>, <argument pos:start="2051:40" pos:end="2051:43"><expr pos:start="2051:40" pos:end="2051:43"><name pos:start="2051:40" pos:end="2051:43">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2053:15" pos:end="2057:13">else <block pos:start="2053:20" pos:end="2057:13">{<block_content pos:start="2055:17" pos:end="2055:27">

                <expr_stmt pos:start="2055:17" pos:end="2055:27"><expr pos:start="2055:17" pos:end="2055:26"><call pos:start="2055:17" pos:end="2055:26"><name pos:start="2055:17" pos:end="2055:23">gen_eob</name><argument_list pos:start="2055:24" pos:end="2055:26">(<argument pos:start="2055:25" pos:end="2055:25"><expr pos:start="2055:25" pos:end="2055:25"><name pos:start="2055:25" pos:end="2055:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2061:9" pos:end="2061:14">break;</break>

    <case pos:start="2063:5" pos:end="2063:14">case <expr pos:start="2063:10" pos:end="2063:13"><literal type="number" pos:start="2063:10" pos:end="2063:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="2063:16" pos:end="2063:32">/* mov Gv, seg */</comment>

        <expr_stmt pos:start="2065:9" pos:end="2065:38"><expr pos:start="2065:9" pos:end="2065:37"><name pos:start="2065:9" pos:end="2065:13">modrm</name> <operator pos:start="2065:15" pos:end="2065:15">=</operator> <call pos:start="2065:17" pos:end="2065:37"><name pos:start="2065:17" pos:end="2065:29">x86_ldub_code</name><argument_list pos:start="2065:30" pos:end="2065:37">(<argument pos:start="2065:31" pos:end="2065:33"><expr pos:start="2065:31" pos:end="2065:33"><name pos:start="2065:31" pos:end="2065:33">env</name></expr></argument>, <argument pos:start="2065:36" pos:end="2065:36"><expr pos:start="2065:36" pos:end="2065:36"><name pos:start="2065:36" pos:end="2065:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2067:9" pos:end="2067:31"><expr pos:start="2067:9" pos:end="2067:30"><name pos:start="2067:9" pos:end="2067:11">reg</name> <operator pos:start="2067:13" pos:end="2067:13">=</operator> <operator pos:start="2067:15" pos:end="2067:15">(</operator><name pos:start="2067:16" pos:end="2067:20">modrm</name> <operator pos:start="2067:22" pos:end="2067:23">&gt;&gt;</operator> <literal type="number" pos:start="2067:25" pos:end="2067:25">3</literal><operator pos:start="2067:26" pos:end="2067:26">)</operator> <operator pos:start="2067:28" pos:end="2067:28">&amp;</operator> <literal type="number" pos:start="2067:30" pos:end="2067:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2069:9" pos:end="2069:31"><expr pos:start="2069:9" pos:end="2069:30"><name pos:start="2069:9" pos:end="2069:11">mod</name> <operator pos:start="2069:13" pos:end="2069:13">=</operator> <operator pos:start="2069:15" pos:end="2069:15">(</operator><name pos:start="2069:16" pos:end="2069:20">modrm</name> <operator pos:start="2069:22" pos:end="2069:23">&gt;&gt;</operator> <literal type="number" pos:start="2069:25" pos:end="2069:25">6</literal><operator pos:start="2069:26" pos:end="2069:26">)</operator> <operator pos:start="2069:28" pos:end="2069:28">&amp;</operator> <literal type="number" pos:start="2069:30" pos:end="2069:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2071:9" pos:end="2073:28"><if pos:start="2071:9" pos:end="2073:28">if <condition pos:start="2071:12" pos:end="2071:21">(<expr pos:start="2071:13" pos:end="2071:20"><name pos:start="2071:13" pos:end="2071:15">reg</name> <operator pos:start="2071:17" pos:end="2071:18">&gt;=</operator> <literal type="number" pos:start="2071:20" pos:end="2071:20">6</literal></expr>)</condition><block type="pseudo" pos:start="2073:13" pos:end="2073:28"><block_content pos:start="2073:13" pos:end="2073:28">

            <goto pos:start="2073:13" pos:end="2073:28">goto <name pos:start="2073:18" pos:end="2073:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2075:9" pos:end="2075:32"><expr pos:start="2075:9" pos:end="2075:31"><call pos:start="2075:9" pos:end="2075:31"><name pos:start="2075:9" pos:end="2075:26">gen_op_movl_T0_seg</name><argument_list pos:start="2075:27" pos:end="2075:31">(<argument pos:start="2075:28" pos:end="2075:30"><expr pos:start="2075:28" pos:end="2075:30"><name pos:start="2075:28" pos:end="2075:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2077:9" pos:end="2077:38"><expr pos:start="2077:9" pos:end="2077:37"><name pos:start="2077:9" pos:end="2077:10">ot</name> <operator pos:start="2077:12" pos:end="2077:12">=</operator> <ternary pos:start="2077:14" pos:end="2077:37"><condition pos:start="2077:14" pos:end="2077:23"><expr pos:start="2077:14" pos:end="2077:21"><name pos:start="2077:14" pos:end="2077:16">mod</name> <operator pos:start="2077:18" pos:end="2077:19">==</operator> <literal type="number" pos:start="2077:21" pos:end="2077:21">3</literal></expr> ?</condition><then pos:start="2077:25" pos:end="2077:29"> <expr pos:start="2077:25" pos:end="2077:29"><name pos:start="2077:25" pos:end="2077:29">dflag</name></expr> </then><else pos:start="2077:31" pos:end="2077:37">: <expr pos:start="2077:33" pos:end="2077:37"><name pos:start="2077:33" pos:end="2077:37">MO_16</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="2079:9" pos:end="2079:54"><expr pos:start="2079:9" pos:end="2079:53"><call pos:start="2079:9" pos:end="2079:53"><name pos:start="2079:9" pos:end="2079:22">gen_ldst_modrm</name><argument_list pos:start="2079:23" pos:end="2079:53">(<argument pos:start="2079:24" pos:end="2079:26"><expr pos:start="2079:24" pos:end="2079:26"><name pos:start="2079:24" pos:end="2079:26">env</name></expr></argument>, <argument pos:start="2079:29" pos:end="2079:29"><expr pos:start="2079:29" pos:end="2079:29"><name pos:start="2079:29" pos:end="2079:29">s</name></expr></argument>, <argument pos:start="2079:32" pos:end="2079:36"><expr pos:start="2079:32" pos:end="2079:36"><name pos:start="2079:32" pos:end="2079:36">modrm</name></expr></argument>, <argument pos:start="2079:39" pos:end="2079:40"><expr pos:start="2079:39" pos:end="2079:40"><name pos:start="2079:39" pos:end="2079:40">ot</name></expr></argument>, <argument pos:start="2079:43" pos:end="2079:49"><expr pos:start="2079:43" pos:end="2079:49"><name pos:start="2079:43" pos:end="2079:49">OR_TMP0</name></expr></argument>, <argument pos:start="2079:52" pos:end="2079:52"><expr pos:start="2079:52" pos:end="2079:52"><literal type="number" pos:start="2079:52" pos:end="2079:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2081:9" pos:end="2081:14">break;</break>



    <case pos:start="2085:5" pos:end="2085:15">case <expr pos:start="2085:10" pos:end="2085:14"><literal type="number" pos:start="2085:10" pos:end="2085:14">0x1b6</literal></expr>:</case> <comment type="block" pos:start="2085:17" pos:end="2085:35">/* movzbS Gv, Eb */</comment>

    <case pos:start="2087:5" pos:end="2087:15">case <expr pos:start="2087:10" pos:end="2087:14"><literal type="number" pos:start="2087:10" pos:end="2087:14">0x1b7</literal></expr>:</case> <comment type="block" pos:start="2087:17" pos:end="2087:35">/* movzwS Gv, Eb */</comment>

    <case pos:start="2089:5" pos:end="2089:15">case <expr pos:start="2089:10" pos:end="2089:14"><literal type="number" pos:start="2089:10" pos:end="2089:14">0x1be</literal></expr>:</case> <comment type="block" pos:start="2089:17" pos:end="2089:35">/* movsbS Gv, Eb */</comment>

    <case pos:start="2091:5" pos:end="2091:15">case <expr pos:start="2091:10" pos:end="2091:14"><literal type="number" pos:start="2091:10" pos:end="2091:14">0x1bf</literal></expr>:</case> <comment type="block" pos:start="2091:17" pos:end="2091:35">/* movswS Gv, Eb */</comment>

        <block pos:start="2093:9" pos:end="2179:9">{<block_content pos:start="2095:13" pos:end="2177:13">

            <decl_stmt pos:start="2095:13" pos:end="2095:26"><decl pos:start="2095:13" pos:end="2095:25"><type pos:start="2095:13" pos:end="2095:20"><name pos:start="2095:13" pos:end="2095:20">TCGMemOp</name></type> <name pos:start="2095:22" pos:end="2095:25">d_ot</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2097:13" pos:end="2097:26"><decl pos:start="2097:13" pos:end="2097:25"><type pos:start="2097:13" pos:end="2097:20"><name pos:start="2097:13" pos:end="2097:20">TCGMemOp</name></type> <name pos:start="2097:22" pos:end="2097:25">s_ot</name></decl>;</decl_stmt>



            <comment type="block" pos:start="2101:13" pos:end="2101:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="2103:13" pos:end="2103:25"><expr pos:start="2103:13" pos:end="2103:24"><name pos:start="2103:13" pos:end="2103:16">d_ot</name> <operator pos:start="2103:18" pos:end="2103:18">=</operator> <name pos:start="2103:20" pos:end="2103:24">dflag</name></expr>;</expr_stmt>

            <comment type="block" pos:start="2105:13" pos:end="2105:42">/* ot is the size of source */</comment>

            <expr_stmt pos:start="2107:13" pos:end="2107:32"><expr pos:start="2107:13" pos:end="2107:31"><name pos:start="2107:13" pos:end="2107:14">ot</name> <operator pos:start="2107:16" pos:end="2107:16">=</operator> <operator pos:start="2107:18" pos:end="2107:18">(</operator><name pos:start="2107:19" pos:end="2107:19">b</name> <operator pos:start="2107:21" pos:end="2107:21">&amp;</operator> <literal type="number" pos:start="2107:23" pos:end="2107:23">1</literal><operator pos:start="2107:24" pos:end="2107:24">)</operator> <operator pos:start="2107:26" pos:end="2107:26">+</operator> <name pos:start="2107:28" pos:end="2107:31">MO_8</name></expr>;</expr_stmt>

            <comment type="block" pos:start="2109:13" pos:end="2109:49">/* s_ot is the sign+size of source */</comment>

            <expr_stmt pos:start="2111:13" pos:end="2111:45"><expr pos:start="2111:13" pos:end="2111:44"><name pos:start="2111:13" pos:end="2111:16">s_ot</name> <operator pos:start="2111:18" pos:end="2111:18">=</operator> <ternary pos:start="2111:20" pos:end="2111:44"><condition pos:start="2111:20" pos:end="2111:26"><expr pos:start="2111:20" pos:end="2111:24"><name pos:start="2111:20" pos:end="2111:20">b</name> <operator pos:start="2111:22" pos:end="2111:22">&amp;</operator> <literal type="number" pos:start="2111:24" pos:end="2111:24">8</literal></expr> ?</condition><then pos:start="2111:28" pos:end="2111:39"> <expr pos:start="2111:28" pos:end="2111:39"><name pos:start="2111:28" pos:end="2111:34">MO_SIGN</name> <operator pos:start="2111:36" pos:end="2111:36">|</operator> <name pos:start="2111:38" pos:end="2111:39">ot</name></expr> </then><else pos:start="2111:41" pos:end="2111:44">: <expr pos:start="2111:43" pos:end="2111:44"><name pos:start="2111:43" pos:end="2111:44">ot</name></expr></else></ternary></expr>;</expr_stmt>



            <expr_stmt pos:start="2115:13" pos:end="2115:42"><expr pos:start="2115:13" pos:end="2115:41"><name pos:start="2115:13" pos:end="2115:17">modrm</name> <operator pos:start="2115:19" pos:end="2115:19">=</operator> <call pos:start="2115:21" pos:end="2115:41"><name pos:start="2115:21" pos:end="2115:33">x86_ldub_code</name><argument_list pos:start="2115:34" pos:end="2115:41">(<argument pos:start="2115:35" pos:end="2115:37"><expr pos:start="2115:35" pos:end="2115:37"><name pos:start="2115:35" pos:end="2115:37">env</name></expr></argument>, <argument pos:start="2115:40" pos:end="2115:40"><expr pos:start="2115:40" pos:end="2115:40"><name pos:start="2115:40" pos:end="2115:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2117:13" pos:end="2117:45"><expr pos:start="2117:13" pos:end="2117:44"><name pos:start="2117:13" pos:end="2117:15">reg</name> <operator pos:start="2117:17" pos:end="2117:17">=</operator> <operator pos:start="2117:19" pos:end="2117:19">(</operator><operator pos:start="2117:20" pos:end="2117:20">(</operator><name pos:start="2117:21" pos:end="2117:25">modrm</name> <operator pos:start="2117:27" pos:end="2117:28">&gt;&gt;</operator> <literal type="number" pos:start="2117:30" pos:end="2117:30">3</literal><operator pos:start="2117:31" pos:end="2117:31">)</operator> <operator pos:start="2117:33" pos:end="2117:33">&amp;</operator> <literal type="number" pos:start="2117:35" pos:end="2117:35">7</literal><operator pos:start="2117:36" pos:end="2117:36">)</operator> <operator pos:start="2117:38" pos:end="2117:38">|</operator> <name pos:start="2117:40" pos:end="2117:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2119:13" pos:end="2119:35"><expr pos:start="2119:13" pos:end="2119:34"><name pos:start="2119:13" pos:end="2119:15">mod</name> <operator pos:start="2119:17" pos:end="2119:17">=</operator> <operator pos:start="2119:19" pos:end="2119:19">(</operator><name pos:start="2119:20" pos:end="2119:24">modrm</name> <operator pos:start="2119:26" pos:end="2119:27">&gt;&gt;</operator> <literal type="number" pos:start="2119:29" pos:end="2119:29">6</literal><operator pos:start="2119:30" pos:end="2119:30">)</operator> <operator pos:start="2119:32" pos:end="2119:32">&amp;</operator> <literal type="number" pos:start="2119:34" pos:end="2119:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2121:13" pos:end="2121:40"><expr pos:start="2121:13" pos:end="2121:39"><name pos:start="2121:13" pos:end="2121:14">rm</name> <operator pos:start="2121:16" pos:end="2121:16">=</operator> <operator pos:start="2121:18" pos:end="2121:18">(</operator><name pos:start="2121:19" pos:end="2121:23">modrm</name> <operator pos:start="2121:25" pos:end="2121:25">&amp;</operator> <literal type="number" pos:start="2121:27" pos:end="2121:27">7</literal><operator pos:start="2121:28" pos:end="2121:28">)</operator> <operator pos:start="2121:30" pos:end="2121:30">|</operator> <call pos:start="2121:32" pos:end="2121:39"><name pos:start="2121:32" pos:end="2121:36">REX_B</name><argument_list pos:start="2121:37" pos:end="2121:39">(<argument pos:start="2121:38" pos:end="2121:38"><expr pos:start="2121:38" pos:end="2121:38"><name pos:start="2121:38" pos:end="2121:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="2125:13" pos:end="2177:13"><if pos:start="2125:13" pos:end="2169:13">if <condition pos:start="2125:16" pos:end="2125:25">(<expr pos:start="2125:17" pos:end="2125:24"><name pos:start="2125:17" pos:end="2125:19">mod</name> <operator pos:start="2125:21" pos:end="2125:22">==</operator> <literal type="number" pos:start="2125:24" pos:end="2125:24">3</literal></expr>)</condition> <block pos:start="2125:27" pos:end="2169:13">{<block_content pos:start="2127:17" pos:end="2167:52">

                <if_stmt pos:start="2127:17" pos:end="2165:17"><if pos:start="2127:17" pos:end="2131:17">if <condition pos:start="2127:20" pos:end="2127:56">(<expr pos:start="2127:21" pos:end="2127:55"><name pos:start="2127:21" pos:end="2127:24">s_ot</name> <operator pos:start="2127:26" pos:end="2127:27">==</operator> <name pos:start="2127:29" pos:end="2127:33">MO_SB</name> <operator pos:start="2127:35" pos:end="2127:36">&amp;&amp;</operator> <call pos:start="2127:38" pos:end="2127:55"><name pos:start="2127:38" pos:end="2127:51">byte_reg_is_xH</name><argument_list pos:start="2127:52" pos:end="2127:55">(<argument pos:start="2127:53" pos:end="2127:54"><expr pos:start="2127:53" pos:end="2127:54"><name pos:start="2127:53" pos:end="2127:54">rm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2127:58" pos:end="2131:17">{<block_content pos:start="2129:21" pos:end="2129:72">

                    <expr_stmt pos:start="2129:21" pos:end="2129:72"><expr pos:start="2129:21" pos:end="2129:71"><call pos:start="2129:21" pos:end="2129:71"><name pos:start="2129:21" pos:end="2129:39">tcg_gen_sextract_tl</name><argument_list pos:start="2129:40" pos:end="2129:71">(<argument pos:start="2129:41" pos:end="2129:46"><expr pos:start="2129:41" pos:end="2129:46"><name pos:start="2129:41" pos:end="2129:46">cpu_T0</name></expr></argument>, <argument pos:start="2129:49" pos:end="2129:64"><expr pos:start="2129:49" pos:end="2129:64"><name pos:start="2129:49" pos:end="2129:64"><name pos:start="2129:49" pos:end="2129:56">cpu_regs</name><index pos:start="2129:57" pos:end="2129:64">[<expr pos:start="2129:58" pos:end="2129:63"><name pos:start="2129:58" pos:end="2129:59">rm</name> <operator pos:start="2129:61" pos:end="2129:61">-</operator> <literal type="number" pos:start="2129:63" pos:end="2129:63">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="2129:67" pos:end="2129:67"><expr pos:start="2129:67" pos:end="2129:67"><literal type="number" pos:start="2129:67" pos:end="2129:67">8</literal></expr></argument>, <argument pos:start="2129:70" pos:end="2129:70"><expr pos:start="2129:70" pos:end="2129:70"><literal type="number" pos:start="2129:70" pos:end="2129:70">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2131:19" pos:end="2165:17">else <block pos:start="2131:24" pos:end="2165:17">{<block_content pos:start="2133:21" pos:end="2163:21">

                    <expr_stmt pos:start="2133:21" pos:end="2133:53"><expr pos:start="2133:21" pos:end="2133:52"><call pos:start="2133:21" pos:end="2133:52"><name pos:start="2133:21" pos:end="2133:36">gen_op_mov_v_reg</name><argument_list pos:start="2133:37" pos:end="2133:52">(<argument pos:start="2133:38" pos:end="2133:39"><expr pos:start="2133:38" pos:end="2133:39"><name pos:start="2133:38" pos:end="2133:39">ot</name></expr></argument>, <argument pos:start="2133:42" pos:end="2133:47"><expr pos:start="2133:42" pos:end="2133:47"><name pos:start="2133:42" pos:end="2133:47">cpu_T0</name></expr></argument>, <argument pos:start="2133:50" pos:end="2133:51"><expr pos:start="2133:50" pos:end="2133:51"><name pos:start="2133:50" pos:end="2133:51">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="2135:21" pos:end="2163:21">switch <condition pos:start="2135:28" pos:end="2135:33">(<expr pos:start="2135:29" pos:end="2135:32"><name pos:start="2135:29" pos:end="2135:32">s_ot</name></expr>)</condition> <block pos:start="2135:35" pos:end="2163:21">{<block_content pos:start="2137:21" pos:end="2161:30">

                    <case pos:start="2137:21" pos:end="2137:31">case <expr pos:start="2137:26" pos:end="2137:30"><name pos:start="2137:26" pos:end="2137:30">MO_UB</name></expr>:</case>

                        <expr_stmt pos:start="2139:25" pos:end="2139:57"><expr pos:start="2139:25" pos:end="2139:56"><call pos:start="2139:25" pos:end="2139:56"><name pos:start="2139:25" pos:end="2139:40">tcg_gen_ext8u_tl</name><argument_list pos:start="2139:41" pos:end="2139:56">(<argument pos:start="2139:42" pos:end="2139:47"><expr pos:start="2139:42" pos:end="2139:47"><name pos:start="2139:42" pos:end="2139:47">cpu_T0</name></expr></argument>, <argument pos:start="2139:50" pos:end="2139:55"><expr pos:start="2139:50" pos:end="2139:55"><name pos:start="2139:50" pos:end="2139:55">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2141:25" pos:end="2141:30">break;</break>

                    <case pos:start="2143:21" pos:end="2143:31">case <expr pos:start="2143:26" pos:end="2143:30"><name pos:start="2143:26" pos:end="2143:30">MO_SB</name></expr>:</case>

                        <expr_stmt pos:start="2145:25" pos:end="2145:57"><expr pos:start="2145:25" pos:end="2145:56"><call pos:start="2145:25" pos:end="2145:56"><name pos:start="2145:25" pos:end="2145:40">tcg_gen_ext8s_tl</name><argument_list pos:start="2145:41" pos:end="2145:56">(<argument pos:start="2145:42" pos:end="2145:47"><expr pos:start="2145:42" pos:end="2145:47"><name pos:start="2145:42" pos:end="2145:47">cpu_T0</name></expr></argument>, <argument pos:start="2145:50" pos:end="2145:55"><expr pos:start="2145:50" pos:end="2145:55"><name pos:start="2145:50" pos:end="2145:55">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2147:25" pos:end="2147:30">break;</break>

                    <case pos:start="2149:21" pos:end="2149:31">case <expr pos:start="2149:26" pos:end="2149:30"><name pos:start="2149:26" pos:end="2149:30">MO_UW</name></expr>:</case>

                        <expr_stmt pos:start="2151:25" pos:end="2151:58"><expr pos:start="2151:25" pos:end="2151:57"><call pos:start="2151:25" pos:end="2151:57"><name pos:start="2151:25" pos:end="2151:41">tcg_gen_ext16u_tl</name><argument_list pos:start="2151:42" pos:end="2151:57">(<argument pos:start="2151:43" pos:end="2151:48"><expr pos:start="2151:43" pos:end="2151:48"><name pos:start="2151:43" pos:end="2151:48">cpu_T0</name></expr></argument>, <argument pos:start="2151:51" pos:end="2151:56"><expr pos:start="2151:51" pos:end="2151:56"><name pos:start="2151:51" pos:end="2151:56">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2153:25" pos:end="2153:30">break;</break>

                    <default pos:start="2155:21" pos:end="2155:28">default:</default>

                    <case pos:start="2157:21" pos:end="2157:31">case <expr pos:start="2157:26" pos:end="2157:30"><name pos:start="2157:26" pos:end="2157:30">MO_SW</name></expr>:</case>

                        <expr_stmt pos:start="2159:25" pos:end="2159:58"><expr pos:start="2159:25" pos:end="2159:57"><call pos:start="2159:25" pos:end="2159:57"><name pos:start="2159:25" pos:end="2159:41">tcg_gen_ext16s_tl</name><argument_list pos:start="2159:42" pos:end="2159:57">(<argument pos:start="2159:43" pos:end="2159:48"><expr pos:start="2159:43" pos:end="2159:48"><name pos:start="2159:43" pos:end="2159:48">cpu_T0</name></expr></argument>, <argument pos:start="2159:51" pos:end="2159:56"><expr pos:start="2159:51" pos:end="2159:56"><name pos:start="2159:51" pos:end="2159:56">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2161:25" pos:end="2161:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2167:17" pos:end="2167:52"><expr pos:start="2167:17" pos:end="2167:51"><call pos:start="2167:17" pos:end="2167:51"><name pos:start="2167:17" pos:end="2167:32">gen_op_mov_reg_v</name><argument_list pos:start="2167:33" pos:end="2167:51">(<argument pos:start="2167:34" pos:end="2167:37"><expr pos:start="2167:34" pos:end="2167:37"><name pos:start="2167:34" pos:end="2167:37">d_ot</name></expr></argument>, <argument pos:start="2167:40" pos:end="2167:42"><expr pos:start="2167:40" pos:end="2167:42"><name pos:start="2167:40" pos:end="2167:42">reg</name></expr></argument>, <argument pos:start="2167:45" pos:end="2167:50"><expr pos:start="2167:45" pos:end="2167:50"><name pos:start="2167:45" pos:end="2167:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2169:15" pos:end="2177:13">else <block pos:start="2169:20" pos:end="2177:13">{<block_content pos:start="2171:17" pos:end="2175:52">

                <expr_stmt pos:start="2171:17" pos:end="2171:45"><expr pos:start="2171:17" pos:end="2171:44"><call pos:start="2171:17" pos:end="2171:44"><name pos:start="2171:17" pos:end="2171:29">gen_lea_modrm</name><argument_list pos:start="2171:30" pos:end="2171:44">(<argument pos:start="2171:31" pos:end="2171:33"><expr pos:start="2171:31" pos:end="2171:33"><name pos:start="2171:31" pos:end="2171:33">env</name></expr></argument>, <argument pos:start="2171:36" pos:end="2171:36"><expr pos:start="2171:36" pos:end="2171:36"><name pos:start="2171:36" pos:end="2171:36">s</name></expr></argument>, <argument pos:start="2171:39" pos:end="2171:43"><expr pos:start="2171:39" pos:end="2171:43"><name pos:start="2171:39" pos:end="2171:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2173:17" pos:end="2173:53"><expr pos:start="2173:17" pos:end="2173:52"><call pos:start="2173:17" pos:end="2173:52"><name pos:start="2173:17" pos:end="2173:27">gen_op_ld_v</name><argument_list pos:start="2173:28" pos:end="2173:52">(<argument pos:start="2173:29" pos:end="2173:29"><expr pos:start="2173:29" pos:end="2173:29"><name pos:start="2173:29" pos:end="2173:29">s</name></expr></argument>, <argument pos:start="2173:32" pos:end="2173:35"><expr pos:start="2173:32" pos:end="2173:35"><name pos:start="2173:32" pos:end="2173:35">s_ot</name></expr></argument>, <argument pos:start="2173:38" pos:end="2173:43"><expr pos:start="2173:38" pos:end="2173:43"><name pos:start="2173:38" pos:end="2173:43">cpu_T0</name></expr></argument>, <argument pos:start="2173:46" pos:end="2173:51"><expr pos:start="2173:46" pos:end="2173:51"><name pos:start="2173:46" pos:end="2173:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2175:17" pos:end="2175:52"><expr pos:start="2175:17" pos:end="2175:51"><call pos:start="2175:17" pos:end="2175:51"><name pos:start="2175:17" pos:end="2175:32">gen_op_mov_reg_v</name><argument_list pos:start="2175:33" pos:end="2175:51">(<argument pos:start="2175:34" pos:end="2175:37"><expr pos:start="2175:34" pos:end="2175:37"><name pos:start="2175:34" pos:end="2175:37">d_ot</name></expr></argument>, <argument pos:start="2175:40" pos:end="2175:42"><expr pos:start="2175:40" pos:end="2175:42"><name pos:start="2175:40" pos:end="2175:42">reg</name></expr></argument>, <argument pos:start="2175:45" pos:end="2175:50"><expr pos:start="2175:45" pos:end="2175:50"><name pos:start="2175:45" pos:end="2175:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2181:9" pos:end="2181:14">break;</break>



    <case pos:start="2185:5" pos:end="2185:14">case <expr pos:start="2185:10" pos:end="2185:13"><literal type="number" pos:start="2185:10" pos:end="2185:13">0x8d</literal></expr>:</case> <comment type="block" pos:start="2185:16" pos:end="2185:24">/* lea */</comment>

        <expr_stmt pos:start="2187:9" pos:end="2187:38"><expr pos:start="2187:9" pos:end="2187:37"><name pos:start="2187:9" pos:end="2187:13">modrm</name> <operator pos:start="2187:15" pos:end="2187:15">=</operator> <call pos:start="2187:17" pos:end="2187:37"><name pos:start="2187:17" pos:end="2187:29">x86_ldub_code</name><argument_list pos:start="2187:30" pos:end="2187:37">(<argument pos:start="2187:31" pos:end="2187:33"><expr pos:start="2187:31" pos:end="2187:33"><name pos:start="2187:31" pos:end="2187:33">env</name></expr></argument>, <argument pos:start="2187:36" pos:end="2187:36"><expr pos:start="2187:36" pos:end="2187:36"><name pos:start="2187:36" pos:end="2187:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2189:9" pos:end="2189:31"><expr pos:start="2189:9" pos:end="2189:30"><name pos:start="2189:9" pos:end="2189:11">mod</name> <operator pos:start="2189:13" pos:end="2189:13">=</operator> <operator pos:start="2189:15" pos:end="2189:15">(</operator><name pos:start="2189:16" pos:end="2189:20">modrm</name> <operator pos:start="2189:22" pos:end="2189:23">&gt;&gt;</operator> <literal type="number" pos:start="2189:25" pos:end="2189:25">6</literal><operator pos:start="2189:26" pos:end="2189:26">)</operator> <operator pos:start="2189:28" pos:end="2189:28">&amp;</operator> <literal type="number" pos:start="2189:30" pos:end="2189:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2191:9" pos:end="2193:28"><if pos:start="2191:9" pos:end="2193:28">if <condition pos:start="2191:12" pos:end="2191:21">(<expr pos:start="2191:13" pos:end="2191:20"><name pos:start="2191:13" pos:end="2191:15">mod</name> <operator pos:start="2191:17" pos:end="2191:18">==</operator> <literal type="number" pos:start="2191:20" pos:end="2191:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2193:13" pos:end="2193:28"><block_content pos:start="2193:13" pos:end="2193:28">

            <goto pos:start="2193:13" pos:end="2193:28">goto <name pos:start="2193:18" pos:end="2193:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2195:9" pos:end="2195:41"><expr pos:start="2195:9" pos:end="2195:40"><name pos:start="2195:9" pos:end="2195:11">reg</name> <operator pos:start="2195:13" pos:end="2195:13">=</operator> <operator pos:start="2195:15" pos:end="2195:15">(</operator><operator pos:start="2195:16" pos:end="2195:16">(</operator><name pos:start="2195:17" pos:end="2195:21">modrm</name> <operator pos:start="2195:23" pos:end="2195:24">&gt;&gt;</operator> <literal type="number" pos:start="2195:26" pos:end="2195:26">3</literal><operator pos:start="2195:27" pos:end="2195:27">)</operator> <operator pos:start="2195:29" pos:end="2195:29">&amp;</operator> <literal type="number" pos:start="2195:31" pos:end="2195:31">7</literal><operator pos:start="2195:32" pos:end="2195:32">)</operator> <operator pos:start="2195:34" pos:end="2195:34">|</operator> <name pos:start="2195:36" pos:end="2195:40">rex_r</name></expr>;</expr_stmt>

        <block pos:start="2197:9" pos:end="2207:9">{<block_content pos:start="2199:13" pos:end="2205:49">

            <decl_stmt pos:start="2199:13" pos:end="2199:60"><decl pos:start="2199:13" pos:end="2199:59"><type pos:start="2199:13" pos:end="2199:24"><name pos:start="2199:13" pos:end="2199:24">AddressParts</name></type> <name pos:start="2199:26" pos:end="2199:26">a</name> <init pos:start="2199:28" pos:end="2199:59">= <expr pos:start="2199:30" pos:end="2199:59"><call pos:start="2199:30" pos:end="2199:59"><name pos:start="2199:30" pos:end="2199:44">gen_lea_modrm_0</name><argument_list pos:start="2199:45" pos:end="2199:59">(<argument pos:start="2199:46" pos:end="2199:48"><expr pos:start="2199:46" pos:end="2199:48"><name pos:start="2199:46" pos:end="2199:48">env</name></expr></argument>, <argument pos:start="2199:51" pos:end="2199:51"><expr pos:start="2199:51" pos:end="2199:51"><name pos:start="2199:51" pos:end="2199:51">s</name></expr></argument>, <argument pos:start="2199:54" pos:end="2199:58"><expr pos:start="2199:54" pos:end="2199:58"><name pos:start="2199:54" pos:end="2199:58">modrm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="2201:13" pos:end="2201:41"><decl pos:start="2201:13" pos:end="2201:40"><type pos:start="2201:13" pos:end="2201:16"><name pos:start="2201:13" pos:end="2201:16">TCGv</name></type> <name pos:start="2201:18" pos:end="2201:19">ea</name> <init pos:start="2201:21" pos:end="2201:40">= <expr pos:start="2201:23" pos:end="2201:40"><call pos:start="2201:23" pos:end="2201:40"><name pos:start="2201:23" pos:end="2201:37">gen_lea_modrm_1</name><argument_list pos:start="2201:38" pos:end="2201:40">(<argument pos:start="2201:39" pos:end="2201:39"><expr pos:start="2201:39" pos:end="2201:39"><name pos:start="2201:39" pos:end="2201:39">a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="2203:13" pos:end="2203:51"><expr pos:start="2203:13" pos:end="2203:50"><call pos:start="2203:13" pos:end="2203:50"><name pos:start="2203:13" pos:end="2203:25">gen_lea_v_seg</name><argument_list pos:start="2203:26" pos:end="2203:50">(<argument pos:start="2203:27" pos:end="2203:27"><expr pos:start="2203:27" pos:end="2203:27"><name pos:start="2203:27" pos:end="2203:27">s</name></expr></argument>, <argument pos:start="2203:30" pos:end="2203:37"><expr pos:start="2203:30" pos:end="2203:37"><name pos:start="2203:30" pos:end="2203:37"><name pos:start="2203:30" pos:end="2203:30">s</name><operator pos:start="2203:31" pos:end="2203:32">-&gt;</operator><name pos:start="2203:33" pos:end="2203:37">aflag</name></name></expr></argument>, <argument pos:start="2203:40" pos:end="2203:41"><expr pos:start="2203:40" pos:end="2203:41"><name pos:start="2203:40" pos:end="2203:41">ea</name></expr></argument>, <argument pos:start="2203:44" pos:end="2203:45"><expr pos:start="2203:44" pos:end="2203:45"><operator pos:start="2203:44" pos:end="2203:44">-</operator><literal type="number" pos:start="2203:45" pos:end="2203:45">1</literal></expr></argument>, <argument pos:start="2203:48" pos:end="2203:49"><expr pos:start="2203:48" pos:end="2203:49"><operator pos:start="2203:48" pos:end="2203:48">-</operator><literal type="number" pos:start="2203:49" pos:end="2203:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2205:13" pos:end="2205:49"><expr pos:start="2205:13" pos:end="2205:48"><call pos:start="2205:13" pos:end="2205:48"><name pos:start="2205:13" pos:end="2205:28">gen_op_mov_reg_v</name><argument_list pos:start="2205:29" pos:end="2205:48">(<argument pos:start="2205:30" pos:end="2205:34"><expr pos:start="2205:30" pos:end="2205:34"><name pos:start="2205:30" pos:end="2205:34">dflag</name></expr></argument>, <argument pos:start="2205:37" pos:end="2205:39"><expr pos:start="2205:37" pos:end="2205:39"><name pos:start="2205:37" pos:end="2205:39">reg</name></expr></argument>, <argument pos:start="2205:42" pos:end="2205:47"><expr pos:start="2205:42" pos:end="2205:47"><name pos:start="2205:42" pos:end="2205:47">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2209:9" pos:end="2209:14">break;</break>



    <case pos:start="2213:5" pos:end="2213:14">case <expr pos:start="2213:10" pos:end="2213:13"><literal type="number" pos:start="2213:10" pos:end="2213:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="2213:16" pos:end="2213:32">/* mov EAX, Ov */</comment>

    <case pos:start="2215:5" pos:end="2215:14">case <expr pos:start="2215:10" pos:end="2215:13"><literal type="number" pos:start="2215:10" pos:end="2215:13">0xa1</literal></expr>:</case>

    <case pos:start="2217:5" pos:end="2217:14">case <expr pos:start="2217:10" pos:end="2217:13"><literal type="number" pos:start="2217:10" pos:end="2217:13">0xa2</literal></expr>:</case> <comment type="block" pos:start="2217:16" pos:end="2217:32">/* mov Ov, EAX */</comment>

    <case pos:start="2219:5" pos:end="2219:14">case <expr pos:start="2219:10" pos:end="2219:13"><literal type="number" pos:start="2219:10" pos:end="2219:13">0xa3</literal></expr>:</case>

        <block pos:start="2221:9" pos:end="2267:9">{<block_content pos:start="2223:13" pos:end="2265:13">

            <decl_stmt pos:start="2223:13" pos:end="2223:37"><decl pos:start="2223:13" pos:end="2223:36"><type pos:start="2223:13" pos:end="2223:24"><name pos:start="2223:13" pos:end="2223:24">target_ulong</name></type> <name pos:start="2223:26" pos:end="2223:36">offset_addr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="2227:13" pos:end="2227:34"><expr pos:start="2227:13" pos:end="2227:33"><name pos:start="2227:13" pos:end="2227:14">ot</name> <operator pos:start="2227:16" pos:end="2227:16">=</operator> <call pos:start="2227:18" pos:end="2227:33"><name pos:start="2227:18" pos:end="2227:23">mo_b_d</name><argument_list pos:start="2227:24" pos:end="2227:33">(<argument pos:start="2227:25" pos:end="2227:25"><expr pos:start="2227:25" pos:end="2227:25"><name pos:start="2227:25" pos:end="2227:25">b</name></expr></argument>, <argument pos:start="2227:28" pos:end="2227:32"><expr pos:start="2227:28" pos:end="2227:32"><name pos:start="2227:28" pos:end="2227:32">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2229:13" pos:end="2247:13">switch <condition pos:start="2229:20" pos:end="2229:29">(<expr pos:start="2229:21" pos:end="2229:28"><name pos:start="2229:21" pos:end="2229:28"><name pos:start="2229:21" pos:end="2229:21">s</name><operator pos:start="2229:22" pos:end="2229:23">-&gt;</operator><name pos:start="2229:24" pos:end="2229:28">aflag</name></name></expr>)</condition> <block pos:start="2229:31" pos:end="2247:13">{<block_content pos:start="2233:13" pos:end="2245:22">

<cpp:ifdef pos:start="2231:1" pos:end="2231:20">#<cpp:directive pos:start="2231:2" pos:end="2231:6">ifdef</cpp:directive> <name pos:start="2231:8" pos:end="2231:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="2233:13" pos:end="2233:23">case <expr pos:start="2233:18" pos:end="2233:22"><name pos:start="2233:18" pos:end="2233:22">MO_64</name></expr>:</case>

                <expr_stmt pos:start="2235:17" pos:end="2235:51"><expr pos:start="2235:17" pos:end="2235:50"><name pos:start="2235:17" pos:end="2235:27">offset_addr</name> <operator pos:start="2235:29" pos:end="2235:29">=</operator> <call pos:start="2235:31" pos:end="2235:50"><name pos:start="2235:31" pos:end="2235:42">x86_ldq_code</name><argument_list pos:start="2235:43" pos:end="2235:50">(<argument pos:start="2235:44" pos:end="2235:46"><expr pos:start="2235:44" pos:end="2235:46"><name pos:start="2235:44" pos:end="2235:46">env</name></expr></argument>, <argument pos:start="2235:49" pos:end="2235:49"><expr pos:start="2235:49" pos:end="2235:49"><name pos:start="2235:49" pos:end="2235:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2237:17" pos:end="2240:0">break;</break>

<cpp:endif pos:start="2239:1" pos:end="2239:6">#<cpp:directive pos:start="2239:2" pos:end="2239:6">endif</cpp:directive></cpp:endif>

            <default pos:start="2241:13" pos:end="2241:20">default:</default>

                <expr_stmt pos:start="2243:17" pos:end="2243:57"><expr pos:start="2243:17" pos:end="2243:56"><name pos:start="2243:17" pos:end="2243:27">offset_addr</name> <operator pos:start="2243:29" pos:end="2243:29">=</operator> <call pos:start="2243:31" pos:end="2243:56"><name pos:start="2243:31" pos:end="2243:38">insn_get</name><argument_list pos:start="2243:39" pos:end="2243:56">(<argument pos:start="2243:40" pos:end="2243:42"><expr pos:start="2243:40" pos:end="2243:42"><name pos:start="2243:40" pos:end="2243:42">env</name></expr></argument>, <argument pos:start="2243:45" pos:end="2243:45"><expr pos:start="2243:45" pos:end="2243:45"><name pos:start="2243:45" pos:end="2243:45">s</name></expr></argument>, <argument pos:start="2243:48" pos:end="2243:55"><expr pos:start="2243:48" pos:end="2243:55"><name pos:start="2243:48" pos:end="2243:55"><name pos:start="2243:48" pos:end="2243:48">s</name><operator pos:start="2243:49" pos:end="2243:50">-&gt;</operator><name pos:start="2243:51" pos:end="2243:55">aflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2245:17" pos:end="2245:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="2249:13" pos:end="2249:49"><expr pos:start="2249:13" pos:end="2249:48"><call pos:start="2249:13" pos:end="2249:48"><name pos:start="2249:13" pos:end="2249:27">tcg_gen_movi_tl</name><argument_list pos:start="2249:28" pos:end="2249:48">(<argument pos:start="2249:29" pos:end="2249:34"><expr pos:start="2249:29" pos:end="2249:34"><name pos:start="2249:29" pos:end="2249:34">cpu_A0</name></expr></argument>, <argument pos:start="2249:37" pos:end="2249:47"><expr pos:start="2249:37" pos:end="2249:47"><name pos:start="2249:37" pos:end="2249:47">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2251:13" pos:end="2251:33"><expr pos:start="2251:13" pos:end="2251:32"><call pos:start="2251:13" pos:end="2251:32"><name pos:start="2251:13" pos:end="2251:29">gen_add_A0_ds_seg</name><argument_list pos:start="2251:30" pos:end="2251:32">(<argument pos:start="2251:31" pos:end="2251:31"><expr pos:start="2251:31" pos:end="2251:31"><name pos:start="2251:31" pos:end="2251:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2253:13" pos:end="2265:13"><if pos:start="2253:13" pos:end="2259:13">if <condition pos:start="2253:16" pos:end="2253:29">(<expr pos:start="2253:17" pos:end="2253:28"><operator pos:start="2253:17" pos:end="2253:17">(</operator><name pos:start="2253:18" pos:end="2253:18">b</name> <operator pos:start="2253:20" pos:end="2253:20">&amp;</operator> <literal type="number" pos:start="2253:22" pos:end="2253:22">2</literal><operator pos:start="2253:23" pos:end="2253:23">)</operator> <operator pos:start="2253:25" pos:end="2253:26">==</operator> <literal type="number" pos:start="2253:28" pos:end="2253:28">0</literal></expr>)</condition> <block pos:start="2253:31" pos:end="2259:13">{<block_content pos:start="2255:17" pos:end="2257:52">

                <expr_stmt pos:start="2255:17" pos:end="2255:51"><expr pos:start="2255:17" pos:end="2255:50"><call pos:start="2255:17" pos:end="2255:50"><name pos:start="2255:17" pos:end="2255:27">gen_op_ld_v</name><argument_list pos:start="2255:28" pos:end="2255:50">(<argument pos:start="2255:29" pos:end="2255:29"><expr pos:start="2255:29" pos:end="2255:29"><name pos:start="2255:29" pos:end="2255:29">s</name></expr></argument>, <argument pos:start="2255:32" pos:end="2255:33"><expr pos:start="2255:32" pos:end="2255:33"><name pos:start="2255:32" pos:end="2255:33">ot</name></expr></argument>, <argument pos:start="2255:36" pos:end="2255:41"><expr pos:start="2255:36" pos:end="2255:41"><name pos:start="2255:36" pos:end="2255:41">cpu_T0</name></expr></argument>, <argument pos:start="2255:44" pos:end="2255:49"><expr pos:start="2255:44" pos:end="2255:49"><name pos:start="2255:44" pos:end="2255:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2257:17" pos:end="2257:52"><expr pos:start="2257:17" pos:end="2257:51"><call pos:start="2257:17" pos:end="2257:51"><name pos:start="2257:17" pos:end="2257:32">gen_op_mov_reg_v</name><argument_list pos:start="2257:33" pos:end="2257:51">(<argument pos:start="2257:34" pos:end="2257:35"><expr pos:start="2257:34" pos:end="2257:35"><name pos:start="2257:34" pos:end="2257:35">ot</name></expr></argument>, <argument pos:start="2257:38" pos:end="2257:42"><expr pos:start="2257:38" pos:end="2257:42"><name pos:start="2257:38" pos:end="2257:42">R_EAX</name></expr></argument>, <argument pos:start="2257:45" pos:end="2257:50"><expr pos:start="2257:45" pos:end="2257:50"><name pos:start="2257:45" pos:end="2257:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2259:15" pos:end="2265:13">else <block pos:start="2259:20" pos:end="2265:13">{<block_content pos:start="2261:17" pos:end="2263:51">

                <expr_stmt pos:start="2261:17" pos:end="2261:52"><expr pos:start="2261:17" pos:end="2261:51"><call pos:start="2261:17" pos:end="2261:51"><name pos:start="2261:17" pos:end="2261:32">gen_op_mov_v_reg</name><argument_list pos:start="2261:33" pos:end="2261:51">(<argument pos:start="2261:34" pos:end="2261:35"><expr pos:start="2261:34" pos:end="2261:35"><name pos:start="2261:34" pos:end="2261:35">ot</name></expr></argument>, <argument pos:start="2261:38" pos:end="2261:43"><expr pos:start="2261:38" pos:end="2261:43"><name pos:start="2261:38" pos:end="2261:43">cpu_T0</name></expr></argument>, <argument pos:start="2261:46" pos:end="2261:50"><expr pos:start="2261:46" pos:end="2261:50"><name pos:start="2261:46" pos:end="2261:50">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2263:17" pos:end="2263:51"><expr pos:start="2263:17" pos:end="2263:50"><call pos:start="2263:17" pos:end="2263:50"><name pos:start="2263:17" pos:end="2263:27">gen_op_st_v</name><argument_list pos:start="2263:28" pos:end="2263:50">(<argument pos:start="2263:29" pos:end="2263:29"><expr pos:start="2263:29" pos:end="2263:29"><name pos:start="2263:29" pos:end="2263:29">s</name></expr></argument>, <argument pos:start="2263:32" pos:end="2263:33"><expr pos:start="2263:32" pos:end="2263:33"><name pos:start="2263:32" pos:end="2263:33">ot</name></expr></argument>, <argument pos:start="2263:36" pos:end="2263:41"><expr pos:start="2263:36" pos:end="2263:41"><name pos:start="2263:36" pos:end="2263:41">cpu_T0</name></expr></argument>, <argument pos:start="2263:44" pos:end="2263:49"><expr pos:start="2263:44" pos:end="2263:49"><name pos:start="2263:44" pos:end="2263:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2269:9" pos:end="2269:14">break;</break>

    <case pos:start="2271:5" pos:end="2271:14">case <expr pos:start="2271:10" pos:end="2271:13"><literal type="number" pos:start="2271:10" pos:end="2271:13">0xd7</literal></expr>:</case> <comment type="block" pos:start="2271:16" pos:end="2271:25">/* xlat */</comment>

        <expr_stmt pos:start="2273:9" pos:end="2273:48"><expr pos:start="2273:9" pos:end="2273:47"><call pos:start="2273:9" pos:end="2273:47"><name pos:start="2273:9" pos:end="2273:22">tcg_gen_mov_tl</name><argument_list pos:start="2273:23" pos:end="2273:47">(<argument pos:start="2273:24" pos:end="2273:29"><expr pos:start="2273:24" pos:end="2273:29"><name pos:start="2273:24" pos:end="2273:29">cpu_A0</name></expr></argument>, <argument pos:start="2273:32" pos:end="2273:46"><expr pos:start="2273:32" pos:end="2273:46"><name pos:start="2273:32" pos:end="2273:46"><name pos:start="2273:32" pos:end="2273:39">cpu_regs</name><index pos:start="2273:40" pos:end="2273:46">[<expr pos:start="2273:41" pos:end="2273:45"><name pos:start="2273:41" pos:end="2273:45">R_EBX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2275:9" pos:end="2275:50"><expr pos:start="2275:9" pos:end="2275:49"><call pos:start="2275:9" pos:end="2275:49"><name pos:start="2275:9" pos:end="2275:24">tcg_gen_ext8u_tl</name><argument_list pos:start="2275:25" pos:end="2275:49">(<argument pos:start="2275:26" pos:end="2275:31"><expr pos:start="2275:26" pos:end="2275:31"><name pos:start="2275:26" pos:end="2275:31">cpu_T0</name></expr></argument>, <argument pos:start="2275:34" pos:end="2275:48"><expr pos:start="2275:34" pos:end="2275:48"><name pos:start="2275:34" pos:end="2275:48"><name pos:start="2275:34" pos:end="2275:41">cpu_regs</name><index pos:start="2275:42" pos:end="2275:48">[<expr pos:start="2275:43" pos:end="2275:47"><name pos:start="2275:43" pos:end="2275:47">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2277:9" pos:end="2277:47"><expr pos:start="2277:9" pos:end="2277:46"><call pos:start="2277:9" pos:end="2277:46"><name pos:start="2277:9" pos:end="2277:22">tcg_gen_add_tl</name><argument_list pos:start="2277:23" pos:end="2277:46">(<argument pos:start="2277:24" pos:end="2277:29"><expr pos:start="2277:24" pos:end="2277:29"><name pos:start="2277:24" pos:end="2277:29">cpu_A0</name></expr></argument>, <argument pos:start="2277:32" pos:end="2277:37"><expr pos:start="2277:32" pos:end="2277:37"><name pos:start="2277:32" pos:end="2277:37">cpu_A0</name></expr></argument>, <argument pos:start="2277:40" pos:end="2277:45"><expr pos:start="2277:40" pos:end="2277:45"><name pos:start="2277:40" pos:end="2277:45">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2279:9" pos:end="2279:35"><expr pos:start="2279:9" pos:end="2279:34"><call pos:start="2279:9" pos:end="2279:34"><name pos:start="2279:9" pos:end="2279:16">gen_extu</name><argument_list pos:start="2279:17" pos:end="2279:34">(<argument pos:start="2279:18" pos:end="2279:25"><expr pos:start="2279:18" pos:end="2279:25"><name pos:start="2279:18" pos:end="2279:25"><name pos:start="2279:18" pos:end="2279:18">s</name><operator pos:start="2279:19" pos:end="2279:20">-&gt;</operator><name pos:start="2279:21" pos:end="2279:25">aflag</name></name></expr></argument>, <argument pos:start="2279:28" pos:end="2279:33"><expr pos:start="2279:28" pos:end="2279:33"><name pos:start="2279:28" pos:end="2279:33">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2281:9" pos:end="2281:29"><expr pos:start="2281:9" pos:end="2281:28"><call pos:start="2281:9" pos:end="2281:28"><name pos:start="2281:9" pos:end="2281:25">gen_add_A0_ds_seg</name><argument_list pos:start="2281:26" pos:end="2281:28">(<argument pos:start="2281:27" pos:end="2281:27"><expr pos:start="2281:27" pos:end="2281:27"><name pos:start="2281:27" pos:end="2281:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2283:9" pos:end="2283:45"><expr pos:start="2283:9" pos:end="2283:44"><call pos:start="2283:9" pos:end="2283:44"><name pos:start="2283:9" pos:end="2283:19">gen_op_ld_v</name><argument_list pos:start="2283:20" pos:end="2283:44">(<argument pos:start="2283:21" pos:end="2283:21"><expr pos:start="2283:21" pos:end="2283:21"><name pos:start="2283:21" pos:end="2283:21">s</name></expr></argument>, <argument pos:start="2283:24" pos:end="2283:27"><expr pos:start="2283:24" pos:end="2283:27"><name pos:start="2283:24" pos:end="2283:27">MO_8</name></expr></argument>, <argument pos:start="2283:30" pos:end="2283:35"><expr pos:start="2283:30" pos:end="2283:35"><name pos:start="2283:30" pos:end="2283:35">cpu_T0</name></expr></argument>, <argument pos:start="2283:38" pos:end="2283:43"><expr pos:start="2283:38" pos:end="2283:43"><name pos:start="2283:38" pos:end="2283:43">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2285:9" pos:end="2285:46"><expr pos:start="2285:9" pos:end="2285:45"><call pos:start="2285:9" pos:end="2285:45"><name pos:start="2285:9" pos:end="2285:24">gen_op_mov_reg_v</name><argument_list pos:start="2285:25" pos:end="2285:45">(<argument pos:start="2285:26" pos:end="2285:29"><expr pos:start="2285:26" pos:end="2285:29"><name pos:start="2285:26" pos:end="2285:29">MO_8</name></expr></argument>, <argument pos:start="2285:32" pos:end="2285:36"><expr pos:start="2285:32" pos:end="2285:36"><name pos:start="2285:32" pos:end="2285:36">R_EAX</name></expr></argument>, <argument pos:start="2285:39" pos:end="2285:44"><expr pos:start="2285:39" pos:end="2285:44"><name pos:start="2285:39" pos:end="2285:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2287:9" pos:end="2287:14">break;</break>

    <case pos:start="2289:5" pos:end="2289:23">case <expr pos:start="2289:10" pos:end="2289:22"><literal type="number" pos:start="2289:10" pos:end="2289:13">0xb0</literal> <operator pos:start="2289:15" pos:end="2289:17">...</operator> <literal type="number" pos:start="2289:19" pos:end="2289:22">0xb7</literal></expr>:</case> <comment type="block" pos:start="2289:25" pos:end="2289:39">/* mov R, Ib */</comment>

        <expr_stmt pos:start="2291:9" pos:end="2291:37"><expr pos:start="2291:9" pos:end="2291:36"><name pos:start="2291:9" pos:end="2291:11">val</name> <operator pos:start="2291:13" pos:end="2291:13">=</operator> <call pos:start="2291:15" pos:end="2291:36"><name pos:start="2291:15" pos:end="2291:22">insn_get</name><argument_list pos:start="2291:23" pos:end="2291:36">(<argument pos:start="2291:24" pos:end="2291:26"><expr pos:start="2291:24" pos:end="2291:26"><name pos:start="2291:24" pos:end="2291:26">env</name></expr></argument>, <argument pos:start="2291:29" pos:end="2291:29"><expr pos:start="2291:29" pos:end="2291:29"><name pos:start="2291:29" pos:end="2291:29">s</name></expr></argument>, <argument pos:start="2291:32" pos:end="2291:35"><expr pos:start="2291:32" pos:end="2291:35"><name pos:start="2291:32" pos:end="2291:35">MO_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2293:9" pos:end="2293:37"><expr pos:start="2293:9" pos:end="2293:36"><call pos:start="2293:9" pos:end="2293:36"><name pos:start="2293:9" pos:end="2293:23">tcg_gen_movi_tl</name><argument_list pos:start="2293:24" pos:end="2293:36">(<argument pos:start="2293:25" pos:end="2293:30"><expr pos:start="2293:25" pos:end="2293:30"><name pos:start="2293:25" pos:end="2293:30">cpu_T0</name></expr></argument>, <argument pos:start="2293:33" pos:end="2293:35"><expr pos:start="2293:33" pos:end="2293:35"><name pos:start="2293:33" pos:end="2293:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2295:9" pos:end="2295:59"><expr pos:start="2295:9" pos:end="2295:58"><call pos:start="2295:9" pos:end="2295:58"><name pos:start="2295:9" pos:end="2295:24">gen_op_mov_reg_v</name><argument_list pos:start="2295:25" pos:end="2295:58">(<argument pos:start="2295:26" pos:end="2295:29"><expr pos:start="2295:26" pos:end="2295:29"><name pos:start="2295:26" pos:end="2295:29">MO_8</name></expr></argument>, <argument pos:start="2295:32" pos:end="2295:49"><expr pos:start="2295:32" pos:end="2295:49"><operator pos:start="2295:32" pos:end="2295:32">(</operator><name pos:start="2295:33" pos:end="2295:33">b</name> <operator pos:start="2295:35" pos:end="2295:35">&amp;</operator> <literal type="number" pos:start="2295:37" pos:end="2295:37">7</literal><operator pos:start="2295:38" pos:end="2295:38">)</operator> <operator pos:start="2295:40" pos:end="2295:40">|</operator> <call pos:start="2295:42" pos:end="2295:49"><name pos:start="2295:42" pos:end="2295:46">REX_B</name><argument_list pos:start="2295:47" pos:end="2295:49">(<argument pos:start="2295:48" pos:end="2295:48"><expr pos:start="2295:48" pos:end="2295:48"><name pos:start="2295:48" pos:end="2295:48">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2295:52" pos:end="2295:57"><expr pos:start="2295:52" pos:end="2295:57"><name pos:start="2295:52" pos:end="2295:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2297:9" pos:end="2297:14">break;</break>

    <case pos:start="2299:5" pos:end="2302:0">case <expr pos:start="2299:10" pos:end="2299:22"><literal type="number" pos:start="2299:10" pos:end="2299:13">0xb8</literal> <operator pos:start="2299:15" pos:end="2299:17">...</operator> <literal type="number" pos:start="2299:19" pos:end="2299:22">0xbf</literal></expr>:</case> <comment type="block" pos:start="2299:25" pos:end="2299:39">/* mov R, Iv */</comment>

<cpp:ifdef pos:start="2301:1" pos:end="2301:20">#<cpp:directive pos:start="2301:2" pos:end="2301:6">ifdef</cpp:directive> <name pos:start="2301:8" pos:end="2301:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="2303:9" pos:end="2333:9"><if pos:start="2303:9" pos:end="2317:9">if <condition pos:start="2303:12" pos:end="2303:27">(<expr pos:start="2303:13" pos:end="2303:26"><name pos:start="2303:13" pos:end="2303:17">dflag</name> <operator pos:start="2303:19" pos:end="2303:20">==</operator> <name pos:start="2303:22" pos:end="2303:26">MO_64</name></expr>)</condition> <block pos:start="2303:29" pos:end="2317:9">{<block_content pos:start="2305:13" pos:end="2315:49">

            <decl_stmt pos:start="2305:13" pos:end="2305:25"><decl pos:start="2305:13" pos:end="2305:24"><type pos:start="2305:13" pos:end="2305:20"><name pos:start="2305:13" pos:end="2305:20">uint64_t</name></type> <name pos:start="2305:22" pos:end="2305:24">tmp</name></decl>;</decl_stmt>

            <comment type="block" pos:start="2307:13" pos:end="2307:29">/* 64 bit case */</comment>

            <expr_stmt pos:start="2309:13" pos:end="2309:39"><expr pos:start="2309:13" pos:end="2309:38"><name pos:start="2309:13" pos:end="2309:15">tmp</name> <operator pos:start="2309:17" pos:end="2309:17">=</operator> <call pos:start="2309:19" pos:end="2309:38"><name pos:start="2309:19" pos:end="2309:30">x86_ldq_code</name><argument_list pos:start="2309:31" pos:end="2309:38">(<argument pos:start="2309:32" pos:end="2309:34"><expr pos:start="2309:32" pos:end="2309:34"><name pos:start="2309:32" pos:end="2309:34">env</name></expr></argument>, <argument pos:start="2309:37" pos:end="2309:37"><expr pos:start="2309:37" pos:end="2309:37"><name pos:start="2309:37" pos:end="2309:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2311:13" pos:end="2311:37"><expr pos:start="2311:13" pos:end="2311:36"><name pos:start="2311:13" pos:end="2311:15">reg</name> <operator pos:start="2311:17" pos:end="2311:17">=</operator> <operator pos:start="2311:19" pos:end="2311:19">(</operator><name pos:start="2311:20" pos:end="2311:20">b</name> <operator pos:start="2311:22" pos:end="2311:22">&amp;</operator> <literal type="number" pos:start="2311:24" pos:end="2311:24">7</literal><operator pos:start="2311:25" pos:end="2311:25">)</operator> <operator pos:start="2311:27" pos:end="2311:27">|</operator> <call pos:start="2311:29" pos:end="2311:36"><name pos:start="2311:29" pos:end="2311:33">REX_B</name><argument_list pos:start="2311:34" pos:end="2311:36">(<argument pos:start="2311:35" pos:end="2311:35"><expr pos:start="2311:35" pos:end="2311:35"><name pos:start="2311:35" pos:end="2311:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2313:13" pos:end="2313:41"><expr pos:start="2313:13" pos:end="2313:40"><call pos:start="2313:13" pos:end="2313:40"><name pos:start="2313:13" pos:end="2313:27">tcg_gen_movi_tl</name><argument_list pos:start="2313:28" pos:end="2313:40">(<argument pos:start="2313:29" pos:end="2313:34"><expr pos:start="2313:29" pos:end="2313:34"><name pos:start="2313:29" pos:end="2313:34">cpu_T0</name></expr></argument>, <argument pos:start="2313:37" pos:end="2313:39"><expr pos:start="2313:37" pos:end="2313:39"><name pos:start="2313:37" pos:end="2313:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2315:13" pos:end="2315:49"><expr pos:start="2315:13" pos:end="2315:48"><call pos:start="2315:13" pos:end="2315:48"><name pos:start="2315:13" pos:end="2315:28">gen_op_mov_reg_v</name><argument_list pos:start="2315:29" pos:end="2315:48">(<argument pos:start="2315:30" pos:end="2315:34"><expr pos:start="2315:30" pos:end="2315:34"><name pos:start="2315:30" pos:end="2315:34">MO_64</name></expr></argument>, <argument pos:start="2315:37" pos:end="2315:39"><expr pos:start="2315:37" pos:end="2315:39"><name pos:start="2315:37" pos:end="2315:39">reg</name></expr></argument>, <argument pos:start="2315:42" pos:end="2315:47"><expr pos:start="2315:42" pos:end="2315:47"><name pos:start="2315:42" pos:end="2315:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2317:11" pos:end="2333:9">else

<cpp:endif pos:start="2319:1" pos:end="2319:6">#<cpp:directive pos:start="2319:2" pos:end="2319:6">endif</cpp:directive></cpp:endif>

        <block pos:start="2321:9" pos:end="2333:9">{<block_content pos:start="2323:13" pos:end="2331:46">

            <expr_stmt pos:start="2323:13" pos:end="2323:23"><expr pos:start="2323:13" pos:end="2323:22"><name pos:start="2323:13" pos:end="2323:14">ot</name> <operator pos:start="2323:16" pos:end="2323:16">=</operator> <name pos:start="2323:18" pos:end="2323:22">dflag</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2325:13" pos:end="2325:39"><expr pos:start="2325:13" pos:end="2325:38"><name pos:start="2325:13" pos:end="2325:15">val</name> <operator pos:start="2325:17" pos:end="2325:17">=</operator> <call pos:start="2325:19" pos:end="2325:38"><name pos:start="2325:19" pos:end="2325:26">insn_get</name><argument_list pos:start="2325:27" pos:end="2325:38">(<argument pos:start="2325:28" pos:end="2325:30"><expr pos:start="2325:28" pos:end="2325:30"><name pos:start="2325:28" pos:end="2325:30">env</name></expr></argument>, <argument pos:start="2325:33" pos:end="2325:33"><expr pos:start="2325:33" pos:end="2325:33"><name pos:start="2325:33" pos:end="2325:33">s</name></expr></argument>, <argument pos:start="2325:36" pos:end="2325:37"><expr pos:start="2325:36" pos:end="2325:37"><name pos:start="2325:36" pos:end="2325:37">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2327:13" pos:end="2327:37"><expr pos:start="2327:13" pos:end="2327:36"><name pos:start="2327:13" pos:end="2327:15">reg</name> <operator pos:start="2327:17" pos:end="2327:17">=</operator> <operator pos:start="2327:19" pos:end="2327:19">(</operator><name pos:start="2327:20" pos:end="2327:20">b</name> <operator pos:start="2327:22" pos:end="2327:22">&amp;</operator> <literal type="number" pos:start="2327:24" pos:end="2327:24">7</literal><operator pos:start="2327:25" pos:end="2327:25">)</operator> <operator pos:start="2327:27" pos:end="2327:27">|</operator> <call pos:start="2327:29" pos:end="2327:36"><name pos:start="2327:29" pos:end="2327:33">REX_B</name><argument_list pos:start="2327:34" pos:end="2327:36">(<argument pos:start="2327:35" pos:end="2327:35"><expr pos:start="2327:35" pos:end="2327:35"><name pos:start="2327:35" pos:end="2327:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2329:13" pos:end="2329:41"><expr pos:start="2329:13" pos:end="2329:40"><call pos:start="2329:13" pos:end="2329:40"><name pos:start="2329:13" pos:end="2329:27">tcg_gen_movi_tl</name><argument_list pos:start="2329:28" pos:end="2329:40">(<argument pos:start="2329:29" pos:end="2329:34"><expr pos:start="2329:29" pos:end="2329:34"><name pos:start="2329:29" pos:end="2329:34">cpu_T0</name></expr></argument>, <argument pos:start="2329:37" pos:end="2329:39"><expr pos:start="2329:37" pos:end="2329:39"><name pos:start="2329:37" pos:end="2329:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2331:13" pos:end="2331:46"><expr pos:start="2331:13" pos:end="2331:45"><call pos:start="2331:13" pos:end="2331:45"><name pos:start="2331:13" pos:end="2331:28">gen_op_mov_reg_v</name><argument_list pos:start="2331:29" pos:end="2331:45">(<argument pos:start="2331:30" pos:end="2331:31"><expr pos:start="2331:30" pos:end="2331:31"><name pos:start="2331:30" pos:end="2331:31">ot</name></expr></argument>, <argument pos:start="2331:34" pos:end="2331:36"><expr pos:start="2331:34" pos:end="2331:36"><name pos:start="2331:34" pos:end="2331:36">reg</name></expr></argument>, <argument pos:start="2331:39" pos:end="2331:44"><expr pos:start="2331:39" pos:end="2331:44"><name pos:start="2331:39" pos:end="2331:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2335:9" pos:end="2335:14">break;</break>



    <case pos:start="2339:5" pos:end="2339:23">case <expr pos:start="2339:10" pos:end="2339:22"><literal type="number" pos:start="2339:10" pos:end="2339:13">0x91</literal> <operator pos:start="2339:15" pos:end="2339:17">...</operator> <literal type="number" pos:start="2339:19" pos:end="2339:22">0x97</literal></expr>:</case> <comment type="block" pos:start="2339:25" pos:end="2339:41">/* xchg R, EAX */</comment>

    <label pos:start="2341:5" pos:end="2341:20"><name pos:start="2341:5" pos:end="2341:19">do_xchg_reg_eax</name>:</label>

        <expr_stmt pos:start="2343:9" pos:end="2343:19"><expr pos:start="2343:9" pos:end="2343:18"><name pos:start="2343:9" pos:end="2343:10">ot</name> <operator pos:start="2343:12" pos:end="2343:12">=</operator> <name pos:start="2343:14" pos:end="2343:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2345:9" pos:end="2345:33"><expr pos:start="2345:9" pos:end="2345:32"><name pos:start="2345:9" pos:end="2345:11">reg</name> <operator pos:start="2345:13" pos:end="2345:13">=</operator> <operator pos:start="2345:15" pos:end="2345:15">(</operator><name pos:start="2345:16" pos:end="2345:16">b</name> <operator pos:start="2345:18" pos:end="2345:18">&amp;</operator> <literal type="number" pos:start="2345:20" pos:end="2345:20">7</literal><operator pos:start="2345:21" pos:end="2345:21">)</operator> <operator pos:start="2345:23" pos:end="2345:23">|</operator> <call pos:start="2345:25" pos:end="2345:32"><name pos:start="2345:25" pos:end="2345:29">REX_B</name><argument_list pos:start="2345:30" pos:end="2345:32">(<argument pos:start="2345:31" pos:end="2345:31"><expr pos:start="2345:31" pos:end="2345:31"><name pos:start="2345:31" pos:end="2345:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2347:9" pos:end="2347:19"><expr pos:start="2347:9" pos:end="2347:18"><name pos:start="2347:9" pos:end="2347:10">rm</name> <operator pos:start="2347:12" pos:end="2347:12">=</operator> <name pos:start="2347:14" pos:end="2347:18">R_EAX</name></expr>;</expr_stmt>

        <goto pos:start="2349:9" pos:end="2349:25">goto <name pos:start="2349:14" pos:end="2349:24">do_xchg_reg</name>;</goto>

    <case pos:start="2351:5" pos:end="2351:14">case <expr pos:start="2351:10" pos:end="2351:13"><literal type="number" pos:start="2351:10" pos:end="2351:13">0x86</literal></expr>:</case>

    <case pos:start="2353:5" pos:end="2353:14">case <expr pos:start="2353:10" pos:end="2353:13"><literal type="number" pos:start="2353:10" pos:end="2353:13">0x87</literal></expr>:</case> <comment type="block" pos:start="2353:16" pos:end="2353:32">/* xchg Ev, Gv */</comment>

        <expr_stmt pos:start="2355:9" pos:end="2355:30"><expr pos:start="2355:9" pos:end="2355:29"><name pos:start="2355:9" pos:end="2355:10">ot</name> <operator pos:start="2355:12" pos:end="2355:12">=</operator> <call pos:start="2355:14" pos:end="2355:29"><name pos:start="2355:14" pos:end="2355:19">mo_b_d</name><argument_list pos:start="2355:20" pos:end="2355:29">(<argument pos:start="2355:21" pos:end="2355:21"><expr pos:start="2355:21" pos:end="2355:21"><name pos:start="2355:21" pos:end="2355:21">b</name></expr></argument>, <argument pos:start="2355:24" pos:end="2355:28"><expr pos:start="2355:24" pos:end="2355:28"><name pos:start="2355:24" pos:end="2355:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2357:9" pos:end="2357:38"><expr pos:start="2357:9" pos:end="2357:37"><name pos:start="2357:9" pos:end="2357:13">modrm</name> <operator pos:start="2357:15" pos:end="2357:15">=</operator> <call pos:start="2357:17" pos:end="2357:37"><name pos:start="2357:17" pos:end="2357:29">x86_ldub_code</name><argument_list pos:start="2357:30" pos:end="2357:37">(<argument pos:start="2357:31" pos:end="2357:33"><expr pos:start="2357:31" pos:end="2357:33"><name pos:start="2357:31" pos:end="2357:33">env</name></expr></argument>, <argument pos:start="2357:36" pos:end="2357:36"><expr pos:start="2357:36" pos:end="2357:36"><name pos:start="2357:36" pos:end="2357:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2359:9" pos:end="2359:41"><expr pos:start="2359:9" pos:end="2359:40"><name pos:start="2359:9" pos:end="2359:11">reg</name> <operator pos:start="2359:13" pos:end="2359:13">=</operator> <operator pos:start="2359:15" pos:end="2359:15">(</operator><operator pos:start="2359:16" pos:end="2359:16">(</operator><name pos:start="2359:17" pos:end="2359:21">modrm</name> <operator pos:start="2359:23" pos:end="2359:24">&gt;&gt;</operator> <literal type="number" pos:start="2359:26" pos:end="2359:26">3</literal><operator pos:start="2359:27" pos:end="2359:27">)</operator> <operator pos:start="2359:29" pos:end="2359:29">&amp;</operator> <literal type="number" pos:start="2359:31" pos:end="2359:31">7</literal><operator pos:start="2359:32" pos:end="2359:32">)</operator> <operator pos:start="2359:34" pos:end="2359:34">|</operator> <name pos:start="2359:36" pos:end="2359:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2361:9" pos:end="2361:31"><expr pos:start="2361:9" pos:end="2361:30"><name pos:start="2361:9" pos:end="2361:11">mod</name> <operator pos:start="2361:13" pos:end="2361:13">=</operator> <operator pos:start="2361:15" pos:end="2361:15">(</operator><name pos:start="2361:16" pos:end="2361:20">modrm</name> <operator pos:start="2361:22" pos:end="2361:23">&gt;&gt;</operator> <literal type="number" pos:start="2361:25" pos:end="2361:25">6</literal><operator pos:start="2361:26" pos:end="2361:26">)</operator> <operator pos:start="2361:28" pos:end="2361:28">&amp;</operator> <literal type="number" pos:start="2361:30" pos:end="2361:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2363:9" pos:end="2391:9"><if pos:start="2363:9" pos:end="2377:9">if <condition pos:start="2363:12" pos:end="2363:21">(<expr pos:start="2363:13" pos:end="2363:20"><name pos:start="2363:13" pos:end="2363:15">mod</name> <operator pos:start="2363:17" pos:end="2363:18">==</operator> <literal type="number" pos:start="2363:20" pos:end="2363:20">3</literal></expr>)</condition> <block pos:start="2363:23" pos:end="2377:9">{<block_content pos:start="2365:13" pos:end="2375:46">

            <expr_stmt pos:start="2365:13" pos:end="2365:40"><expr pos:start="2365:13" pos:end="2365:39"><name pos:start="2365:13" pos:end="2365:14">rm</name> <operator pos:start="2365:16" pos:end="2365:16">=</operator> <operator pos:start="2365:18" pos:end="2365:18">(</operator><name pos:start="2365:19" pos:end="2365:23">modrm</name> <operator pos:start="2365:25" pos:end="2365:25">&amp;</operator> <literal type="number" pos:start="2365:27" pos:end="2365:27">7</literal><operator pos:start="2365:28" pos:end="2365:28">)</operator> <operator pos:start="2365:30" pos:end="2365:30">|</operator> <call pos:start="2365:32" pos:end="2365:39"><name pos:start="2365:32" pos:end="2365:36">REX_B</name><argument_list pos:start="2365:37" pos:end="2365:39">(<argument pos:start="2365:38" pos:end="2365:38"><expr pos:start="2365:38" pos:end="2365:38"><name pos:start="2365:38" pos:end="2365:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="2367:9" pos:end="2367:20"><name pos:start="2367:9" pos:end="2367:19">do_xchg_reg</name>:</label>

            <expr_stmt pos:start="2369:13" pos:end="2369:46"><expr pos:start="2369:13" pos:end="2369:45"><call pos:start="2369:13" pos:end="2369:45"><name pos:start="2369:13" pos:end="2369:28">gen_op_mov_v_reg</name><argument_list pos:start="2369:29" pos:end="2369:45">(<argument pos:start="2369:30" pos:end="2369:31"><expr pos:start="2369:30" pos:end="2369:31"><name pos:start="2369:30" pos:end="2369:31">ot</name></expr></argument>, <argument pos:start="2369:34" pos:end="2369:39"><expr pos:start="2369:34" pos:end="2369:39"><name pos:start="2369:34" pos:end="2369:39">cpu_T0</name></expr></argument>, <argument pos:start="2369:42" pos:end="2369:44"><expr pos:start="2369:42" pos:end="2369:44"><name pos:start="2369:42" pos:end="2369:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2371:13" pos:end="2371:45"><expr pos:start="2371:13" pos:end="2371:44"><call pos:start="2371:13" pos:end="2371:44"><name pos:start="2371:13" pos:end="2371:28">gen_op_mov_v_reg</name><argument_list pos:start="2371:29" pos:end="2371:44">(<argument pos:start="2371:30" pos:end="2371:31"><expr pos:start="2371:30" pos:end="2371:31"><name pos:start="2371:30" pos:end="2371:31">ot</name></expr></argument>, <argument pos:start="2371:34" pos:end="2371:39"><expr pos:start="2371:34" pos:end="2371:39"><name pos:start="2371:34" pos:end="2371:39">cpu_T1</name></expr></argument>, <argument pos:start="2371:42" pos:end="2371:43"><expr pos:start="2371:42" pos:end="2371:43"><name pos:start="2371:42" pos:end="2371:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2373:13" pos:end="2373:45"><expr pos:start="2373:13" pos:end="2373:44"><call pos:start="2373:13" pos:end="2373:44"><name pos:start="2373:13" pos:end="2373:28">gen_op_mov_reg_v</name><argument_list pos:start="2373:29" pos:end="2373:44">(<argument pos:start="2373:30" pos:end="2373:31"><expr pos:start="2373:30" pos:end="2373:31"><name pos:start="2373:30" pos:end="2373:31">ot</name></expr></argument>, <argument pos:start="2373:34" pos:end="2373:35"><expr pos:start="2373:34" pos:end="2373:35"><name pos:start="2373:34" pos:end="2373:35">rm</name></expr></argument>, <argument pos:start="2373:38" pos:end="2373:43"><expr pos:start="2373:38" pos:end="2373:43"><name pos:start="2373:38" pos:end="2373:43">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2375:13" pos:end="2375:46"><expr pos:start="2375:13" pos:end="2375:45"><call pos:start="2375:13" pos:end="2375:45"><name pos:start="2375:13" pos:end="2375:28">gen_op_mov_reg_v</name><argument_list pos:start="2375:29" pos:end="2375:45">(<argument pos:start="2375:30" pos:end="2375:31"><expr pos:start="2375:30" pos:end="2375:31"><name pos:start="2375:30" pos:end="2375:31">ot</name></expr></argument>, <argument pos:start="2375:34" pos:end="2375:36"><expr pos:start="2375:34" pos:end="2375:36"><name pos:start="2375:34" pos:end="2375:36">reg</name></expr></argument>, <argument pos:start="2375:39" pos:end="2375:44"><expr pos:start="2375:39" pos:end="2375:44"><name pos:start="2375:39" pos:end="2375:44">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2377:11" pos:end="2391:9">else <block pos:start="2377:16" pos:end="2391:9">{<block_content pos:start="2379:13" pos:end="2389:46">

            <expr_stmt pos:start="2379:13" pos:end="2379:41"><expr pos:start="2379:13" pos:end="2379:40"><call pos:start="2379:13" pos:end="2379:40"><name pos:start="2379:13" pos:end="2379:25">gen_lea_modrm</name><argument_list pos:start="2379:26" pos:end="2379:40">(<argument pos:start="2379:27" pos:end="2379:29"><expr pos:start="2379:27" pos:end="2379:29"><name pos:start="2379:27" pos:end="2379:29">env</name></expr></argument>, <argument pos:start="2379:32" pos:end="2379:32"><expr pos:start="2379:32" pos:end="2379:32"><name pos:start="2379:32" pos:end="2379:32">s</name></expr></argument>, <argument pos:start="2379:35" pos:end="2379:39"><expr pos:start="2379:35" pos:end="2379:39"><name pos:start="2379:35" pos:end="2379:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2381:13" pos:end="2381:46"><expr pos:start="2381:13" pos:end="2381:45"><call pos:start="2381:13" pos:end="2381:45"><name pos:start="2381:13" pos:end="2381:28">gen_op_mov_v_reg</name><argument_list pos:start="2381:29" pos:end="2381:45">(<argument pos:start="2381:30" pos:end="2381:31"><expr pos:start="2381:30" pos:end="2381:31"><name pos:start="2381:30" pos:end="2381:31">ot</name></expr></argument>, <argument pos:start="2381:34" pos:end="2381:39"><expr pos:start="2381:34" pos:end="2381:39"><name pos:start="2381:34" pos:end="2381:39">cpu_T0</name></expr></argument>, <argument pos:start="2381:42" pos:end="2381:44"><expr pos:start="2381:42" pos:end="2381:44"><name pos:start="2381:42" pos:end="2381:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2383:13" pos:end="2383:44">/* for xchg, lock is implicit */</comment>

            <expr_stmt pos:start="2385:13" pos:end="2387:61"><expr pos:start="2385:13" pos:end="2387:60"><call pos:start="2385:13" pos:end="2387:60"><name pos:start="2385:13" pos:end="2385:34">tcg_gen_atomic_xchg_tl</name><argument_list pos:start="2385:35" pos:end="2387:60">(<argument pos:start="2385:36" pos:end="2385:41"><expr pos:start="2385:36" pos:end="2385:41"><name pos:start="2385:36" pos:end="2385:41">cpu_T1</name></expr></argument>, <argument pos:start="2385:44" pos:end="2385:49"><expr pos:start="2385:44" pos:end="2385:49"><name pos:start="2385:44" pos:end="2385:49">cpu_A0</name></expr></argument>, <argument pos:start="2385:52" pos:end="2385:57"><expr pos:start="2385:52" pos:end="2385:57"><name pos:start="2385:52" pos:end="2385:57">cpu_T0</name></expr></argument>,

                                   <argument pos:start="2387:36" pos:end="2387:47"><expr pos:start="2387:36" pos:end="2387:47"><name pos:start="2387:36" pos:end="2387:47"><name pos:start="2387:36" pos:end="2387:36">s</name><operator pos:start="2387:37" pos:end="2387:38">-&gt;</operator><name pos:start="2387:39" pos:end="2387:47">mem_index</name></name></expr></argument>, <argument pos:start="2387:50" pos:end="2387:59"><expr pos:start="2387:50" pos:end="2387:59"><name pos:start="2387:50" pos:end="2387:51">ot</name> <operator pos:start="2387:53" pos:end="2387:53">|</operator> <name pos:start="2387:55" pos:end="2387:59">MO_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2389:13" pos:end="2389:46"><expr pos:start="2389:13" pos:end="2389:45"><call pos:start="2389:13" pos:end="2389:45"><name pos:start="2389:13" pos:end="2389:28">gen_op_mov_reg_v</name><argument_list pos:start="2389:29" pos:end="2389:45">(<argument pos:start="2389:30" pos:end="2389:31"><expr pos:start="2389:30" pos:end="2389:31"><name pos:start="2389:30" pos:end="2389:31">ot</name></expr></argument>, <argument pos:start="2389:34" pos:end="2389:36"><expr pos:start="2389:34" pos:end="2389:36"><name pos:start="2389:34" pos:end="2389:36">reg</name></expr></argument>, <argument pos:start="2389:39" pos:end="2389:44"><expr pos:start="2389:39" pos:end="2389:44"><name pos:start="2389:39" pos:end="2389:44">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2393:9" pos:end="2393:14">break;</break>

    <case pos:start="2395:5" pos:end="2395:14">case <expr pos:start="2395:10" pos:end="2395:13"><literal type="number" pos:start="2395:10" pos:end="2395:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="2395:16" pos:end="2395:27">/* les Gv */</comment>

        <comment type="block" pos:start="2397:9" pos:end="2397:49">/* In CODE64 this is VEX3; see above.  */</comment>

        <expr_stmt pos:start="2399:9" pos:end="2399:18"><expr pos:start="2399:9" pos:end="2399:17"><name pos:start="2399:9" pos:end="2399:10">op</name> <operator pos:start="2399:12" pos:end="2399:12">=</operator> <name pos:start="2399:14" pos:end="2399:17">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="2401:9" pos:end="2401:20">goto <name pos:start="2401:14" pos:end="2401:19">do_lxx</name>;</goto>

    <case pos:start="2403:5" pos:end="2403:14">case <expr pos:start="2403:10" pos:end="2403:13"><literal type="number" pos:start="2403:10" pos:end="2403:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="2403:16" pos:end="2403:27">/* lds Gv */</comment>

        <comment type="block" pos:start="2405:9" pos:end="2405:49">/* In CODE64 this is VEX2; see above.  */</comment>

        <expr_stmt pos:start="2407:9" pos:end="2407:18"><expr pos:start="2407:9" pos:end="2407:17"><name pos:start="2407:9" pos:end="2407:10">op</name> <operator pos:start="2407:12" pos:end="2407:12">=</operator> <name pos:start="2407:14" pos:end="2407:17">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="2409:9" pos:end="2409:20">goto <name pos:start="2409:14" pos:end="2409:19">do_lxx</name>;</goto>

    <case pos:start="2411:5" pos:end="2411:15">case <expr pos:start="2411:10" pos:end="2411:14"><literal type="number" pos:start="2411:10" pos:end="2411:14">0x1b2</literal></expr>:</case> <comment type="block" pos:start="2411:17" pos:end="2411:28">/* lss Gv */</comment>

        <expr_stmt pos:start="2413:9" pos:end="2413:18"><expr pos:start="2413:9" pos:end="2413:17"><name pos:start="2413:9" pos:end="2413:10">op</name> <operator pos:start="2413:12" pos:end="2413:12">=</operator> <name pos:start="2413:14" pos:end="2413:17">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="2415:9" pos:end="2415:20">goto <name pos:start="2415:14" pos:end="2415:19">do_lxx</name>;</goto>

    <case pos:start="2417:5" pos:end="2417:15">case <expr pos:start="2417:10" pos:end="2417:14"><literal type="number" pos:start="2417:10" pos:end="2417:14">0x1b4</literal></expr>:</case> <comment type="block" pos:start="2417:17" pos:end="2417:28">/* lfs Gv */</comment>

        <expr_stmt pos:start="2419:9" pos:end="2419:18"><expr pos:start="2419:9" pos:end="2419:17"><name pos:start="2419:9" pos:end="2419:10">op</name> <operator pos:start="2419:12" pos:end="2419:12">=</operator> <name pos:start="2419:14" pos:end="2419:17">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="2421:9" pos:end="2421:20">goto <name pos:start="2421:14" pos:end="2421:19">do_lxx</name>;</goto>

    <case pos:start="2423:5" pos:end="2423:15">case <expr pos:start="2423:10" pos:end="2423:14"><literal type="number" pos:start="2423:10" pos:end="2423:14">0x1b5</literal></expr>:</case> <comment type="block" pos:start="2423:17" pos:end="2423:28">/* lgs Gv */</comment>

        <expr_stmt pos:start="2425:9" pos:end="2425:18"><expr pos:start="2425:9" pos:end="2425:17"><name pos:start="2425:9" pos:end="2425:10">op</name> <operator pos:start="2425:12" pos:end="2425:12">=</operator> <name pos:start="2425:14" pos:end="2425:17">R_GS</name></expr>;</expr_stmt>

    <label pos:start="2427:5" pos:end="2427:11"><name pos:start="2427:5" pos:end="2427:10">do_lxx</name>:</label>

        <expr_stmt pos:start="2429:9" pos:end="2429:44"><expr pos:start="2429:9" pos:end="2429:43"><name pos:start="2429:9" pos:end="2429:10">ot</name> <operator pos:start="2429:12" pos:end="2429:12">=</operator> <ternary pos:start="2429:14" pos:end="2429:43"><condition pos:start="2429:14" pos:end="2429:29"><expr pos:start="2429:14" pos:end="2429:27"><name pos:start="2429:14" pos:end="2429:18">dflag</name> <operator pos:start="2429:20" pos:end="2429:21">!=</operator> <name pos:start="2429:23" pos:end="2429:27">MO_16</name></expr> ?</condition><then pos:start="2429:31" pos:end="2429:35"> <expr pos:start="2429:31" pos:end="2429:35"><name pos:start="2429:31" pos:end="2429:35">MO_32</name></expr> </then><else pos:start="2429:37" pos:end="2429:43">: <expr pos:start="2429:39" pos:end="2429:43"><name pos:start="2429:39" pos:end="2429:43">MO_16</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="2431:9" pos:end="2431:38"><expr pos:start="2431:9" pos:end="2431:37"><name pos:start="2431:9" pos:end="2431:13">modrm</name> <operator pos:start="2431:15" pos:end="2431:15">=</operator> <call pos:start="2431:17" pos:end="2431:37"><name pos:start="2431:17" pos:end="2431:29">x86_ldub_code</name><argument_list pos:start="2431:30" pos:end="2431:37">(<argument pos:start="2431:31" pos:end="2431:33"><expr pos:start="2431:31" pos:end="2431:33"><name pos:start="2431:31" pos:end="2431:33">env</name></expr></argument>, <argument pos:start="2431:36" pos:end="2431:36"><expr pos:start="2431:36" pos:end="2431:36"><name pos:start="2431:36" pos:end="2431:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2433:9" pos:end="2433:41"><expr pos:start="2433:9" pos:end="2433:40"><name pos:start="2433:9" pos:end="2433:11">reg</name> <operator pos:start="2433:13" pos:end="2433:13">=</operator> <operator pos:start="2433:15" pos:end="2433:15">(</operator><operator pos:start="2433:16" pos:end="2433:16">(</operator><name pos:start="2433:17" pos:end="2433:21">modrm</name> <operator pos:start="2433:23" pos:end="2433:24">&gt;&gt;</operator> <literal type="number" pos:start="2433:26" pos:end="2433:26">3</literal><operator pos:start="2433:27" pos:end="2433:27">)</operator> <operator pos:start="2433:29" pos:end="2433:29">&amp;</operator> <literal type="number" pos:start="2433:31" pos:end="2433:31">7</literal><operator pos:start="2433:32" pos:end="2433:32">)</operator> <operator pos:start="2433:34" pos:end="2433:34">|</operator> <name pos:start="2433:36" pos:end="2433:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2435:9" pos:end="2435:31"><expr pos:start="2435:9" pos:end="2435:30"><name pos:start="2435:9" pos:end="2435:11">mod</name> <operator pos:start="2435:13" pos:end="2435:13">=</operator> <operator pos:start="2435:15" pos:end="2435:15">(</operator><name pos:start="2435:16" pos:end="2435:20">modrm</name> <operator pos:start="2435:22" pos:end="2435:23">&gt;&gt;</operator> <literal type="number" pos:start="2435:25" pos:end="2435:25">6</literal><operator pos:start="2435:26" pos:end="2435:26">)</operator> <operator pos:start="2435:28" pos:end="2435:28">&amp;</operator> <literal type="number" pos:start="2435:30" pos:end="2435:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2437:9" pos:end="2439:28"><if pos:start="2437:9" pos:end="2439:28">if <condition pos:start="2437:12" pos:end="2437:21">(<expr pos:start="2437:13" pos:end="2437:20"><name pos:start="2437:13" pos:end="2437:15">mod</name> <operator pos:start="2437:17" pos:end="2437:18">==</operator> <literal type="number" pos:start="2437:20" pos:end="2437:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2439:13" pos:end="2439:28"><block_content pos:start="2439:13" pos:end="2439:28">

            <goto pos:start="2439:13" pos:end="2439:28">goto <name pos:start="2439:18" pos:end="2439:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2441:9" pos:end="2441:37"><expr pos:start="2441:9" pos:end="2441:36"><call pos:start="2441:9" pos:end="2441:36"><name pos:start="2441:9" pos:end="2441:21">gen_lea_modrm</name><argument_list pos:start="2441:22" pos:end="2441:36">(<argument pos:start="2441:23" pos:end="2441:25"><expr pos:start="2441:23" pos:end="2441:25"><name pos:start="2441:23" pos:end="2441:25">env</name></expr></argument>, <argument pos:start="2441:28" pos:end="2441:28"><expr pos:start="2441:28" pos:end="2441:28"><name pos:start="2441:28" pos:end="2441:28">s</name></expr></argument>, <argument pos:start="2441:31" pos:end="2441:35"><expr pos:start="2441:31" pos:end="2441:35"><name pos:start="2441:31" pos:end="2441:35">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2443:9" pos:end="2443:43"><expr pos:start="2443:9" pos:end="2443:42"><call pos:start="2443:9" pos:end="2443:42"><name pos:start="2443:9" pos:end="2443:19">gen_op_ld_v</name><argument_list pos:start="2443:20" pos:end="2443:42">(<argument pos:start="2443:21" pos:end="2443:21"><expr pos:start="2443:21" pos:end="2443:21"><name pos:start="2443:21" pos:end="2443:21">s</name></expr></argument>, <argument pos:start="2443:24" pos:end="2443:25"><expr pos:start="2443:24" pos:end="2443:25"><name pos:start="2443:24" pos:end="2443:25">ot</name></expr></argument>, <argument pos:start="2443:28" pos:end="2443:33"><expr pos:start="2443:28" pos:end="2443:33"><name pos:start="2443:28" pos:end="2443:33">cpu_T1</name></expr></argument>, <argument pos:start="2443:36" pos:end="2443:41"><expr pos:start="2443:36" pos:end="2443:41"><name pos:start="2443:36" pos:end="2443:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2445:9" pos:end="2445:34"><expr pos:start="2445:9" pos:end="2445:33"><call pos:start="2445:9" pos:end="2445:33"><name pos:start="2445:9" pos:end="2445:21">gen_add_A0_im</name><argument_list pos:start="2445:22" pos:end="2445:33">(<argument pos:start="2445:23" pos:end="2445:23"><expr pos:start="2445:23" pos:end="2445:23"><name pos:start="2445:23" pos:end="2445:23">s</name></expr></argument>, <argument pos:start="2445:26" pos:end="2445:32"><expr pos:start="2445:26" pos:end="2445:32"><literal type="number" pos:start="2445:26" pos:end="2445:26">1</literal> <operator pos:start="2445:28" pos:end="2445:29">&lt;&lt;</operator> <name pos:start="2445:31" pos:end="2445:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2447:9" pos:end="2447:66">/* load the segment first to handle exceptions properly */</comment>

        <expr_stmt pos:start="2449:9" pos:end="2449:46"><expr pos:start="2449:9" pos:end="2449:45"><call pos:start="2449:9" pos:end="2449:45"><name pos:start="2449:9" pos:end="2449:19">gen_op_ld_v</name><argument_list pos:start="2449:20" pos:end="2449:45">(<argument pos:start="2449:21" pos:end="2449:21"><expr pos:start="2449:21" pos:end="2449:21"><name pos:start="2449:21" pos:end="2449:21">s</name></expr></argument>, <argument pos:start="2449:24" pos:end="2449:28"><expr pos:start="2449:24" pos:end="2449:28"><name pos:start="2449:24" pos:end="2449:28">MO_16</name></expr></argument>, <argument pos:start="2449:31" pos:end="2449:36"><expr pos:start="2449:31" pos:end="2449:36"><name pos:start="2449:31" pos:end="2449:36">cpu_T0</name></expr></argument>, <argument pos:start="2449:39" pos:end="2449:44"><expr pos:start="2449:39" pos:end="2449:44"><name pos:start="2449:39" pos:end="2449:44">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2451:9" pos:end="2451:31"><expr pos:start="2451:9" pos:end="2451:30"><call pos:start="2451:9" pos:end="2451:30"><name pos:start="2451:9" pos:end="2451:23">gen_movl_seg_T0</name><argument_list pos:start="2451:24" pos:end="2451:30">(<argument pos:start="2451:25" pos:end="2451:25"><expr pos:start="2451:25" pos:end="2451:25"><name pos:start="2451:25" pos:end="2451:25">s</name></expr></argument>, <argument pos:start="2451:28" pos:end="2451:29"><expr pos:start="2451:28" pos:end="2451:29"><name pos:start="2451:28" pos:end="2451:29">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2453:9" pos:end="2453:31">/* then put the data */</comment>

        <expr_stmt pos:start="2455:9" pos:end="2455:42"><expr pos:start="2455:9" pos:end="2455:41"><call pos:start="2455:9" pos:end="2455:41"><name pos:start="2455:9" pos:end="2455:24">gen_op_mov_reg_v</name><argument_list pos:start="2455:25" pos:end="2455:41">(<argument pos:start="2455:26" pos:end="2455:27"><expr pos:start="2455:26" pos:end="2455:27"><name pos:start="2455:26" pos:end="2455:27">ot</name></expr></argument>, <argument pos:start="2455:30" pos:end="2455:32"><expr pos:start="2455:30" pos:end="2455:32"><name pos:start="2455:30" pos:end="2455:32">reg</name></expr></argument>, <argument pos:start="2455:35" pos:end="2455:40"><expr pos:start="2455:35" pos:end="2455:40"><name pos:start="2455:35" pos:end="2455:40">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2457:9" pos:end="2463:9"><if pos:start="2457:9" pos:end="2463:9">if <condition pos:start="2457:12" pos:end="2457:27">(<expr pos:start="2457:13" pos:end="2457:26"><name pos:start="2457:13" pos:end="2457:26"><name pos:start="2457:13" pos:end="2457:13">s</name><operator pos:start="2457:14" pos:end="2457:15">-&gt;</operator><name pos:start="2457:16" pos:end="2457:19">base</name><operator pos:start="2457:20" pos:end="2457:20">.</operator><name pos:start="2457:21" pos:end="2457:26">is_jmp</name></name></expr>)</condition> <block pos:start="2457:29" pos:end="2463:9">{<block_content pos:start="2459:13" pos:end="2461:23">

            <expr_stmt pos:start="2459:13" pos:end="2459:43"><expr pos:start="2459:13" pos:end="2459:42"><call pos:start="2459:13" pos:end="2459:42"><name pos:start="2459:13" pos:end="2459:22">gen_jmp_im</name><argument_list pos:start="2459:23" pos:end="2459:42">(<argument pos:start="2459:24" pos:end="2459:41"><expr pos:start="2459:24" pos:end="2459:41"><name pos:start="2459:24" pos:end="2459:28"><name pos:start="2459:24" pos:end="2459:24">s</name><operator pos:start="2459:25" pos:end="2459:26">-&gt;</operator><name pos:start="2459:27" pos:end="2459:28">pc</name></name> <operator pos:start="2459:30" pos:end="2459:30">-</operator> <name pos:start="2459:32" pos:end="2459:41"><name pos:start="2459:32" pos:end="2459:32">s</name><operator pos:start="2459:33" pos:end="2459:34">-&gt;</operator><name pos:start="2459:35" pos:end="2459:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2461:13" pos:end="2461:23"><expr pos:start="2461:13" pos:end="2461:22"><call pos:start="2461:13" pos:end="2461:22"><name pos:start="2461:13" pos:end="2461:19">gen_eob</name><argument_list pos:start="2461:20" pos:end="2461:22">(<argument pos:start="2461:21" pos:end="2461:21"><expr pos:start="2461:21" pos:end="2461:21"><name pos:start="2461:21" pos:end="2461:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2465:9" pos:end="2465:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2469:9" pos:end="2469:34">/************************/</comment>

        <comment type="block" pos:start="2471:9" pos:end="2471:20">/* shifts */</comment>

    <case pos:start="2473:5" pos:end="2473:14">case <expr pos:start="2473:10" pos:end="2473:13"><literal type="number" pos:start="2473:10" pos:end="2473:13">0xc0</literal></expr>:</case>

    <case pos:start="2475:5" pos:end="2475:14">case <expr pos:start="2475:10" pos:end="2475:13"><literal type="number" pos:start="2475:10" pos:end="2475:13">0xc1</literal></expr>:</case>

        <comment type="block" pos:start="2477:9" pos:end="2477:25">/* shift Ev,Ib */</comment>

        <expr_stmt pos:start="2479:9" pos:end="2479:18"><expr pos:start="2479:9" pos:end="2479:17"><name pos:start="2479:9" pos:end="2479:13">shift</name> <operator pos:start="2479:15" pos:end="2479:15">=</operator> <literal type="number" pos:start="2479:17" pos:end="2479:17">2</literal></expr>;</expr_stmt>

    <label pos:start="2481:5" pos:end="2481:9"><name pos:start="2481:5" pos:end="2481:8">grp2</name>:</label>

        <block pos:start="2483:9" pos:end="2533:9">{<block_content pos:start="2485:13" pos:end="2531:13">

            <expr_stmt pos:start="2485:13" pos:end="2485:34"><expr pos:start="2485:13" pos:end="2485:33"><name pos:start="2485:13" pos:end="2485:14">ot</name> <operator pos:start="2485:16" pos:end="2485:16">=</operator> <call pos:start="2485:18" pos:end="2485:33"><name pos:start="2485:18" pos:end="2485:23">mo_b_d</name><argument_list pos:start="2485:24" pos:end="2485:33">(<argument pos:start="2485:25" pos:end="2485:25"><expr pos:start="2485:25" pos:end="2485:25"><name pos:start="2485:25" pos:end="2485:25">b</name></expr></argument>, <argument pos:start="2485:28" pos:end="2485:32"><expr pos:start="2485:28" pos:end="2485:32"><name pos:start="2485:28" pos:end="2485:32">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2487:13" pos:end="2487:42"><expr pos:start="2487:13" pos:end="2487:41"><name pos:start="2487:13" pos:end="2487:17">modrm</name> <operator pos:start="2487:19" pos:end="2487:19">=</operator> <call pos:start="2487:21" pos:end="2487:41"><name pos:start="2487:21" pos:end="2487:33">x86_ldub_code</name><argument_list pos:start="2487:34" pos:end="2487:41">(<argument pos:start="2487:35" pos:end="2487:37"><expr pos:start="2487:35" pos:end="2487:37"><name pos:start="2487:35" pos:end="2487:37">env</name></expr></argument>, <argument pos:start="2487:40" pos:end="2487:40"><expr pos:start="2487:40" pos:end="2487:40"><name pos:start="2487:40" pos:end="2487:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2489:13" pos:end="2489:35"><expr pos:start="2489:13" pos:end="2489:34"><name pos:start="2489:13" pos:end="2489:15">mod</name> <operator pos:start="2489:17" pos:end="2489:17">=</operator> <operator pos:start="2489:19" pos:end="2489:19">(</operator><name pos:start="2489:20" pos:end="2489:24">modrm</name> <operator pos:start="2489:26" pos:end="2489:27">&gt;&gt;</operator> <literal type="number" pos:start="2489:29" pos:end="2489:29">6</literal><operator pos:start="2489:30" pos:end="2489:30">)</operator> <operator pos:start="2489:32" pos:end="2489:32">&amp;</operator> <literal type="number" pos:start="2489:34" pos:end="2489:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2491:13" pos:end="2491:34"><expr pos:start="2491:13" pos:end="2491:33"><name pos:start="2491:13" pos:end="2491:14">op</name> <operator pos:start="2491:16" pos:end="2491:16">=</operator> <operator pos:start="2491:18" pos:end="2491:18">(</operator><name pos:start="2491:19" pos:end="2491:23">modrm</name> <operator pos:start="2491:25" pos:end="2491:26">&gt;&gt;</operator> <literal type="number" pos:start="2491:28" pos:end="2491:28">3</literal><operator pos:start="2491:29" pos:end="2491:29">)</operator> <operator pos:start="2491:31" pos:end="2491:31">&amp;</operator> <literal type="number" pos:start="2491:33" pos:end="2491:33">7</literal></expr>;</expr_stmt>



            <if_stmt pos:start="2495:13" pos:end="2511:13"><if pos:start="2495:13" pos:end="2507:13">if <condition pos:start="2495:16" pos:end="2495:25">(<expr pos:start="2495:17" pos:end="2495:24"><name pos:start="2495:17" pos:end="2495:19">mod</name> <operator pos:start="2495:21" pos:end="2495:22">!=</operator> <literal type="number" pos:start="2495:24" pos:end="2495:24">3</literal></expr>)</condition> <block pos:start="2495:27" pos:end="2507:13">{<block_content pos:start="2497:17" pos:end="2505:32">

                <if_stmt pos:start="2497:17" pos:end="2501:17"><if pos:start="2497:17" pos:end="2501:17">if <condition pos:start="2497:20" pos:end="2497:31">(<expr pos:start="2497:21" pos:end="2497:30"><name pos:start="2497:21" pos:end="2497:25">shift</name> <operator pos:start="2497:27" pos:end="2497:28">==</operator> <literal type="number" pos:start="2497:30" pos:end="2497:30">2</literal></expr>)</condition> <block pos:start="2497:33" pos:end="2501:17">{<block_content pos:start="2499:21" pos:end="2499:38">

                    <expr_stmt pos:start="2499:21" pos:end="2499:38"><expr pos:start="2499:21" pos:end="2499:37"><name pos:start="2499:21" pos:end="2499:33"><name pos:start="2499:21" pos:end="2499:21">s</name><operator pos:start="2499:22" pos:end="2499:23">-&gt;</operator><name pos:start="2499:24" pos:end="2499:33">rip_offset</name></name> <operator pos:start="2499:35" pos:end="2499:35">=</operator> <literal type="number" pos:start="2499:37" pos:end="2499:37">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2503:17" pos:end="2503:45"><expr pos:start="2503:17" pos:end="2503:44"><call pos:start="2503:17" pos:end="2503:44"><name pos:start="2503:17" pos:end="2503:29">gen_lea_modrm</name><argument_list pos:start="2503:30" pos:end="2503:44">(<argument pos:start="2503:31" pos:end="2503:33"><expr pos:start="2503:31" pos:end="2503:33"><name pos:start="2503:31" pos:end="2503:33">env</name></expr></argument>, <argument pos:start="2503:36" pos:end="2503:36"><expr pos:start="2503:36" pos:end="2503:36"><name pos:start="2503:36" pos:end="2503:36">s</name></expr></argument>, <argument pos:start="2503:39" pos:end="2503:43"><expr pos:start="2503:39" pos:end="2503:43"><name pos:start="2503:39" pos:end="2503:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2505:17" pos:end="2505:32"><expr pos:start="2505:17" pos:end="2505:31"><name pos:start="2505:17" pos:end="2505:21">opreg</name> <operator pos:start="2505:23" pos:end="2505:23">=</operator> <name pos:start="2505:25" pos:end="2505:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2507:15" pos:end="2511:13">else <block pos:start="2507:20" pos:end="2511:13">{<block_content pos:start="2509:17" pos:end="2509:47">

                <expr_stmt pos:start="2509:17" pos:end="2509:47"><expr pos:start="2509:17" pos:end="2509:46"><name pos:start="2509:17" pos:end="2509:21">opreg</name> <operator pos:start="2509:23" pos:end="2509:23">=</operator> <operator pos:start="2509:25" pos:end="2509:25">(</operator><name pos:start="2509:26" pos:end="2509:30">modrm</name> <operator pos:start="2509:32" pos:end="2509:32">&amp;</operator> <literal type="number" pos:start="2509:34" pos:end="2509:34">7</literal><operator pos:start="2509:35" pos:end="2509:35">)</operator> <operator pos:start="2509:37" pos:end="2509:37">|</operator> <call pos:start="2509:39" pos:end="2509:46"><name pos:start="2509:39" pos:end="2509:43">REX_B</name><argument_list pos:start="2509:44" pos:end="2509:46">(<argument pos:start="2509:45" pos:end="2509:45"><expr pos:start="2509:45" pos:end="2509:45"><name pos:start="2509:45" pos:end="2509:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="2515:13" pos:end="2515:28">/* simpler op */</comment>

            <if_stmt pos:start="2517:13" pos:end="2531:13"><if pos:start="2517:13" pos:end="2521:13">if <condition pos:start="2517:16" pos:end="2517:27">(<expr pos:start="2517:17" pos:end="2517:26"><name pos:start="2517:17" pos:end="2517:21">shift</name> <operator pos:start="2517:23" pos:end="2517:24">==</operator> <literal type="number" pos:start="2517:26" pos:end="2517:26">0</literal></expr>)</condition> <block pos:start="2517:29" pos:end="2521:13">{<block_content pos:start="2519:17" pos:end="2519:52">

                <expr_stmt pos:start="2519:17" pos:end="2519:52"><expr pos:start="2519:17" pos:end="2519:51"><call pos:start="2519:17" pos:end="2519:51"><name pos:start="2519:17" pos:end="2519:25">gen_shift</name><argument_list pos:start="2519:26" pos:end="2519:51">(<argument pos:start="2519:27" pos:end="2519:27"><expr pos:start="2519:27" pos:end="2519:27"><name pos:start="2519:27" pos:end="2519:27">s</name></expr></argument>, <argument pos:start="2519:30" pos:end="2519:31"><expr pos:start="2519:30" pos:end="2519:31"><name pos:start="2519:30" pos:end="2519:31">op</name></expr></argument>, <argument pos:start="2519:34" pos:end="2519:35"><expr pos:start="2519:34" pos:end="2519:35"><name pos:start="2519:34" pos:end="2519:35">ot</name></expr></argument>, <argument pos:start="2519:38" pos:end="2519:42"><expr pos:start="2519:38" pos:end="2519:42"><name pos:start="2519:38" pos:end="2519:42">opreg</name></expr></argument>, <argument pos:start="2519:45" pos:end="2519:50"><expr pos:start="2519:45" pos:end="2519:50"><name pos:start="2519:45" pos:end="2519:50">OR_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2521:15" pos:end="2531:13">else <block pos:start="2521:20" pos:end="2531:13">{<block_content pos:start="2523:17" pos:end="2529:52">

                <if_stmt pos:start="2523:17" pos:end="2527:17"><if pos:start="2523:17" pos:end="2527:17">if <condition pos:start="2523:20" pos:end="2523:31">(<expr pos:start="2523:21" pos:end="2523:30"><name pos:start="2523:21" pos:end="2523:25">shift</name> <operator pos:start="2523:27" pos:end="2523:28">==</operator> <literal type="number" pos:start="2523:30" pos:end="2523:30">2</literal></expr>)</condition> <block pos:start="2523:33" pos:end="2527:17">{<block_content pos:start="2525:21" pos:end="2525:50">

                    <expr_stmt pos:start="2525:21" pos:end="2525:50"><expr pos:start="2525:21" pos:end="2525:49"><name pos:start="2525:21" pos:end="2525:25">shift</name> <operator pos:start="2525:27" pos:end="2525:27">=</operator> <call pos:start="2525:29" pos:end="2525:49"><name pos:start="2525:29" pos:end="2525:41">x86_ldub_code</name><argument_list pos:start="2525:42" pos:end="2525:49">(<argument pos:start="2525:43" pos:end="2525:45"><expr pos:start="2525:43" pos:end="2525:45"><name pos:start="2525:43" pos:end="2525:45">env</name></expr></argument>, <argument pos:start="2525:48" pos:end="2525:48"><expr pos:start="2525:48" pos:end="2525:48"><name pos:start="2525:48" pos:end="2525:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2529:17" pos:end="2529:52"><expr pos:start="2529:17" pos:end="2529:51"><call pos:start="2529:17" pos:end="2529:51"><name pos:start="2529:17" pos:end="2529:26">gen_shifti</name><argument_list pos:start="2529:27" pos:end="2529:51">(<argument pos:start="2529:28" pos:end="2529:28"><expr pos:start="2529:28" pos:end="2529:28"><name pos:start="2529:28" pos:end="2529:28">s</name></expr></argument>, <argument pos:start="2529:31" pos:end="2529:32"><expr pos:start="2529:31" pos:end="2529:32"><name pos:start="2529:31" pos:end="2529:32">op</name></expr></argument>, <argument pos:start="2529:35" pos:end="2529:36"><expr pos:start="2529:35" pos:end="2529:36"><name pos:start="2529:35" pos:end="2529:36">ot</name></expr></argument>, <argument pos:start="2529:39" pos:end="2529:43"><expr pos:start="2529:39" pos:end="2529:43"><name pos:start="2529:39" pos:end="2529:43">opreg</name></expr></argument>, <argument pos:start="2529:46" pos:end="2529:50"><expr pos:start="2529:46" pos:end="2529:50"><name pos:start="2529:46" pos:end="2529:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2535:9" pos:end="2535:14">break;</break>

    <case pos:start="2537:5" pos:end="2537:14">case <expr pos:start="2537:10" pos:end="2537:13"><literal type="number" pos:start="2537:10" pos:end="2537:13">0xd0</literal></expr>:</case>

    <case pos:start="2539:5" pos:end="2539:14">case <expr pos:start="2539:10" pos:end="2539:13"><literal type="number" pos:start="2539:10" pos:end="2539:13">0xd1</literal></expr>:</case>

        <comment type="block" pos:start="2541:9" pos:end="2541:24">/* shift Ev,1 */</comment>

        <expr_stmt pos:start="2543:9" pos:end="2543:18"><expr pos:start="2543:9" pos:end="2543:17"><name pos:start="2543:9" pos:end="2543:13">shift</name> <operator pos:start="2543:15" pos:end="2543:15">=</operator> <literal type="number" pos:start="2543:17" pos:end="2543:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2545:9" pos:end="2545:18">goto <name pos:start="2545:14" pos:end="2545:17">grp2</name>;</goto>

    <case pos:start="2547:5" pos:end="2547:14">case <expr pos:start="2547:10" pos:end="2547:13"><literal type="number" pos:start="2547:10" pos:end="2547:13">0xd2</literal></expr>:</case>

    <case pos:start="2549:5" pos:end="2549:14">case <expr pos:start="2549:10" pos:end="2549:13"><literal type="number" pos:start="2549:10" pos:end="2549:13">0xd3</literal></expr>:</case>

        <comment type="block" pos:start="2551:9" pos:end="2551:25">/* shift Ev,cl */</comment>

        <expr_stmt pos:start="2553:9" pos:end="2553:18"><expr pos:start="2553:9" pos:end="2553:17"><name pos:start="2553:9" pos:end="2553:13">shift</name> <operator pos:start="2553:15" pos:end="2553:15">=</operator> <literal type="number" pos:start="2553:17" pos:end="2553:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="2555:9" pos:end="2555:18">goto <name pos:start="2555:14" pos:end="2555:17">grp2</name>;</goto>



    <case pos:start="2559:5" pos:end="2559:15">case <expr pos:start="2559:10" pos:end="2559:14"><literal type="number" pos:start="2559:10" pos:end="2559:14">0x1a4</literal></expr>:</case> <comment type="block" pos:start="2559:17" pos:end="2559:30">/* shld imm */</comment>

        <expr_stmt pos:start="2561:9" pos:end="2561:15"><expr pos:start="2561:9" pos:end="2561:14"><name pos:start="2561:9" pos:end="2561:10">op</name> <operator pos:start="2561:12" pos:end="2561:12">=</operator> <literal type="number" pos:start="2561:14" pos:end="2561:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2563:9" pos:end="2563:18"><expr pos:start="2563:9" pos:end="2563:17"><name pos:start="2563:9" pos:end="2563:13">shift</name> <operator pos:start="2563:15" pos:end="2563:15">=</operator> <literal type="number" pos:start="2563:17" pos:end="2563:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2565:9" pos:end="2565:23">goto <name pos:start="2565:14" pos:end="2565:22">do_shiftd</name>;</goto>

    <case pos:start="2567:5" pos:end="2567:15">case <expr pos:start="2567:10" pos:end="2567:14"><literal type="number" pos:start="2567:10" pos:end="2567:14">0x1a5</literal></expr>:</case> <comment type="block" pos:start="2567:17" pos:end="2567:29">/* shld cl */</comment>

        <expr_stmt pos:start="2569:9" pos:end="2569:15"><expr pos:start="2569:9" pos:end="2569:14"><name pos:start="2569:9" pos:end="2569:10">op</name> <operator pos:start="2569:12" pos:end="2569:12">=</operator> <literal type="number" pos:start="2569:14" pos:end="2569:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2571:9" pos:end="2571:18"><expr pos:start="2571:9" pos:end="2571:17"><name pos:start="2571:9" pos:end="2571:13">shift</name> <operator pos:start="2571:15" pos:end="2571:15">=</operator> <literal type="number" pos:start="2571:17" pos:end="2571:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="2573:9" pos:end="2573:23">goto <name pos:start="2573:14" pos:end="2573:22">do_shiftd</name>;</goto>

    <case pos:start="2575:5" pos:end="2575:15">case <expr pos:start="2575:10" pos:end="2575:14"><literal type="number" pos:start="2575:10" pos:end="2575:14">0x1ac</literal></expr>:</case> <comment type="block" pos:start="2575:17" pos:end="2575:30">/* shrd imm */</comment>

        <expr_stmt pos:start="2577:9" pos:end="2577:15"><expr pos:start="2577:9" pos:end="2577:14"><name pos:start="2577:9" pos:end="2577:10">op</name> <operator pos:start="2577:12" pos:end="2577:12">=</operator> <literal type="number" pos:start="2577:14" pos:end="2577:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2579:9" pos:end="2579:18"><expr pos:start="2579:9" pos:end="2579:17"><name pos:start="2579:9" pos:end="2579:13">shift</name> <operator pos:start="2579:15" pos:end="2579:15">=</operator> <literal type="number" pos:start="2579:17" pos:end="2579:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2581:9" pos:end="2581:23">goto <name pos:start="2581:14" pos:end="2581:22">do_shiftd</name>;</goto>

    <case pos:start="2583:5" pos:end="2583:15">case <expr pos:start="2583:10" pos:end="2583:14"><literal type="number" pos:start="2583:10" pos:end="2583:14">0x1ad</literal></expr>:</case> <comment type="block" pos:start="2583:17" pos:end="2583:29">/* shrd cl */</comment>

        <expr_stmt pos:start="2585:9" pos:end="2585:15"><expr pos:start="2585:9" pos:end="2585:14"><name pos:start="2585:9" pos:end="2585:10">op</name> <operator pos:start="2585:12" pos:end="2585:12">=</operator> <literal type="number" pos:start="2585:14" pos:end="2585:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2587:9" pos:end="2587:18"><expr pos:start="2587:9" pos:end="2587:17"><name pos:start="2587:9" pos:end="2587:13">shift</name> <operator pos:start="2587:15" pos:end="2587:15">=</operator> <literal type="number" pos:start="2587:17" pos:end="2587:17">0</literal></expr>;</expr_stmt>

    <label pos:start="2589:5" pos:end="2589:14"><name pos:start="2589:5" pos:end="2589:13">do_shiftd</name>:</label>

        <expr_stmt pos:start="2591:9" pos:end="2591:19"><expr pos:start="2591:9" pos:end="2591:18"><name pos:start="2591:9" pos:end="2591:10">ot</name> <operator pos:start="2591:12" pos:end="2591:12">=</operator> <name pos:start="2591:14" pos:end="2591:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2593:9" pos:end="2593:38"><expr pos:start="2593:9" pos:end="2593:37"><name pos:start="2593:9" pos:end="2593:13">modrm</name> <operator pos:start="2593:15" pos:end="2593:15">=</operator> <call pos:start="2593:17" pos:end="2593:37"><name pos:start="2593:17" pos:end="2593:29">x86_ldub_code</name><argument_list pos:start="2593:30" pos:end="2593:37">(<argument pos:start="2593:31" pos:end="2593:33"><expr pos:start="2593:31" pos:end="2593:33"><name pos:start="2593:31" pos:end="2593:33">env</name></expr></argument>, <argument pos:start="2593:36" pos:end="2593:36"><expr pos:start="2593:36" pos:end="2593:36"><name pos:start="2593:36" pos:end="2593:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2595:9" pos:end="2595:31"><expr pos:start="2595:9" pos:end="2595:30"><name pos:start="2595:9" pos:end="2595:11">mod</name> <operator pos:start="2595:13" pos:end="2595:13">=</operator> <operator pos:start="2595:15" pos:end="2595:15">(</operator><name pos:start="2595:16" pos:end="2595:20">modrm</name> <operator pos:start="2595:22" pos:end="2595:23">&gt;&gt;</operator> <literal type="number" pos:start="2595:25" pos:end="2595:25">6</literal><operator pos:start="2595:26" pos:end="2595:26">)</operator> <operator pos:start="2595:28" pos:end="2595:28">&amp;</operator> <literal type="number" pos:start="2595:30" pos:end="2595:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2597:9" pos:end="2597:36"><expr pos:start="2597:9" pos:end="2597:35"><name pos:start="2597:9" pos:end="2597:10">rm</name> <operator pos:start="2597:12" pos:end="2597:12">=</operator> <operator pos:start="2597:14" pos:end="2597:14">(</operator><name pos:start="2597:15" pos:end="2597:19">modrm</name> <operator pos:start="2597:21" pos:end="2597:21">&amp;</operator> <literal type="number" pos:start="2597:23" pos:end="2597:23">7</literal><operator pos:start="2597:24" pos:end="2597:24">)</operator> <operator pos:start="2597:26" pos:end="2597:26">|</operator> <call pos:start="2597:28" pos:end="2597:35"><name pos:start="2597:28" pos:end="2597:32">REX_B</name><argument_list pos:start="2597:33" pos:end="2597:35">(<argument pos:start="2597:34" pos:end="2597:34"><expr pos:start="2597:34" pos:end="2597:34"><name pos:start="2597:34" pos:end="2597:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2599:9" pos:end="2599:41"><expr pos:start="2599:9" pos:end="2599:40"><name pos:start="2599:9" pos:end="2599:11">reg</name> <operator pos:start="2599:13" pos:end="2599:13">=</operator> <operator pos:start="2599:15" pos:end="2599:15">(</operator><operator pos:start="2599:16" pos:end="2599:16">(</operator><name pos:start="2599:17" pos:end="2599:21">modrm</name> <operator pos:start="2599:23" pos:end="2599:24">&gt;&gt;</operator> <literal type="number" pos:start="2599:26" pos:end="2599:26">3</literal><operator pos:start="2599:27" pos:end="2599:27">)</operator> <operator pos:start="2599:29" pos:end="2599:29">&amp;</operator> <literal type="number" pos:start="2599:31" pos:end="2599:31">7</literal><operator pos:start="2599:32" pos:end="2599:32">)</operator> <operator pos:start="2599:34" pos:end="2599:34">|</operator> <name pos:start="2599:36" pos:end="2599:40">rex_r</name></expr>;</expr_stmt>

        <if_stmt pos:start="2601:9" pos:end="2611:9"><if pos:start="2601:9" pos:end="2607:9">if <condition pos:start="2601:12" pos:end="2601:21">(<expr pos:start="2601:13" pos:end="2601:20"><name pos:start="2601:13" pos:end="2601:15">mod</name> <operator pos:start="2601:17" pos:end="2601:18">!=</operator> <literal type="number" pos:start="2601:20" pos:end="2601:20">3</literal></expr>)</condition> <block pos:start="2601:23" pos:end="2607:9">{<block_content pos:start="2603:13" pos:end="2605:28">

            <expr_stmt pos:start="2603:13" pos:end="2603:41"><expr pos:start="2603:13" pos:end="2603:40"><call pos:start="2603:13" pos:end="2603:40"><name pos:start="2603:13" pos:end="2603:25">gen_lea_modrm</name><argument_list pos:start="2603:26" pos:end="2603:40">(<argument pos:start="2603:27" pos:end="2603:29"><expr pos:start="2603:27" pos:end="2603:29"><name pos:start="2603:27" pos:end="2603:29">env</name></expr></argument>, <argument pos:start="2603:32" pos:end="2603:32"><expr pos:start="2603:32" pos:end="2603:32"><name pos:start="2603:32" pos:end="2603:32">s</name></expr></argument>, <argument pos:start="2603:35" pos:end="2603:39"><expr pos:start="2603:35" pos:end="2603:39"><name pos:start="2603:35" pos:end="2603:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2605:13" pos:end="2605:28"><expr pos:start="2605:13" pos:end="2605:27"><name pos:start="2605:13" pos:end="2605:17">opreg</name> <operator pos:start="2605:19" pos:end="2605:19">=</operator> <name pos:start="2605:21" pos:end="2605:27">OR_TMP0</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2607:11" pos:end="2611:9">else <block pos:start="2607:16" pos:end="2611:9">{<block_content pos:start="2609:13" pos:end="2609:23">

            <expr_stmt pos:start="2609:13" pos:end="2609:23"><expr pos:start="2609:13" pos:end="2609:22"><name pos:start="2609:13" pos:end="2609:17">opreg</name> <operator pos:start="2609:19" pos:end="2609:19">=</operator> <name pos:start="2609:21" pos:end="2609:22">rm</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2613:9" pos:end="2613:42"><expr pos:start="2613:9" pos:end="2613:41"><call pos:start="2613:9" pos:end="2613:41"><name pos:start="2613:9" pos:end="2613:24">gen_op_mov_v_reg</name><argument_list pos:start="2613:25" pos:end="2613:41">(<argument pos:start="2613:26" pos:end="2613:27"><expr pos:start="2613:26" pos:end="2613:27"><name pos:start="2613:26" pos:end="2613:27">ot</name></expr></argument>, <argument pos:start="2613:30" pos:end="2613:35"><expr pos:start="2613:30" pos:end="2613:35"><name pos:start="2613:30" pos:end="2613:35">cpu_T1</name></expr></argument>, <argument pos:start="2613:38" pos:end="2613:40"><expr pos:start="2613:38" pos:end="2613:40"><name pos:start="2613:38" pos:end="2613:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="2617:9" pos:end="2629:9"><if pos:start="2617:9" pos:end="2625:9">if <condition pos:start="2617:12" pos:end="2617:18">(<expr pos:start="2617:13" pos:end="2617:17"><name pos:start="2617:13" pos:end="2617:17">shift</name></expr>)</condition> <block pos:start="2617:20" pos:end="2625:9">{<block_content pos:start="2619:13" pos:end="2623:31">

            <decl_stmt pos:start="2619:13" pos:end="2619:59"><decl pos:start="2619:13" pos:end="2619:58"><type pos:start="2619:13" pos:end="2619:16"><name pos:start="2619:13" pos:end="2619:16">TCGv</name></type> <name pos:start="2619:18" pos:end="2619:20">imm</name> <init pos:start="2619:22" pos:end="2619:58">= <expr pos:start="2619:24" pos:end="2619:58"><call pos:start="2619:24" pos:end="2619:58"><name pos:start="2619:24" pos:end="2619:35">tcg_const_tl</name><argument_list pos:start="2619:36" pos:end="2619:58">(<argument pos:start="2619:37" pos:end="2619:57"><expr pos:start="2619:37" pos:end="2619:57"><call pos:start="2619:37" pos:end="2619:57"><name pos:start="2619:37" pos:end="2619:49">x86_ldub_code</name><argument_list pos:start="2619:50" pos:end="2619:57">(<argument pos:start="2619:51" pos:end="2619:53"><expr pos:start="2619:51" pos:end="2619:53"><name pos:start="2619:51" pos:end="2619:53">env</name></expr></argument>, <argument pos:start="2619:56" pos:end="2619:56"><expr pos:start="2619:56" pos:end="2619:56"><name pos:start="2619:56" pos:end="2619:56">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="2621:13" pos:end="2621:52"><expr pos:start="2621:13" pos:end="2621:51"><call pos:start="2621:13" pos:end="2621:51"><name pos:start="2621:13" pos:end="2621:28">gen_shiftd_rm_T1</name><argument_list pos:start="2621:29" pos:end="2621:51">(<argument pos:start="2621:30" pos:end="2621:30"><expr pos:start="2621:30" pos:end="2621:30"><name pos:start="2621:30" pos:end="2621:30">s</name></expr></argument>, <argument pos:start="2621:33" pos:end="2621:34"><expr pos:start="2621:33" pos:end="2621:34"><name pos:start="2621:33" pos:end="2621:34">ot</name></expr></argument>, <argument pos:start="2621:37" pos:end="2621:41"><expr pos:start="2621:37" pos:end="2621:41"><name pos:start="2621:37" pos:end="2621:41">opreg</name></expr></argument>, <argument pos:start="2621:44" pos:end="2621:45"><expr pos:start="2621:44" pos:end="2621:45"><name pos:start="2621:44" pos:end="2621:45">op</name></expr></argument>, <argument pos:start="2621:48" pos:end="2621:50"><expr pos:start="2621:48" pos:end="2621:50"><name pos:start="2621:48" pos:end="2621:50">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2623:13" pos:end="2623:31"><expr pos:start="2623:13" pos:end="2623:30"><call pos:start="2623:13" pos:end="2623:30"><name pos:start="2623:13" pos:end="2623:25">tcg_temp_free</name><argument_list pos:start="2623:26" pos:end="2623:30">(<argument pos:start="2623:27" pos:end="2623:29"><expr pos:start="2623:27" pos:end="2623:29"><name pos:start="2623:27" pos:end="2623:29">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2625:11" pos:end="2629:9">else <block pos:start="2625:16" pos:end="2629:9">{<block_content pos:start="2627:13" pos:end="2627:64">

            <expr_stmt pos:start="2627:13" pos:end="2627:64"><expr pos:start="2627:13" pos:end="2627:63"><call pos:start="2627:13" pos:end="2627:63"><name pos:start="2627:13" pos:end="2627:28">gen_shiftd_rm_T1</name><argument_list pos:start="2627:29" pos:end="2627:63">(<argument pos:start="2627:30" pos:end="2627:30"><expr pos:start="2627:30" pos:end="2627:30"><name pos:start="2627:30" pos:end="2627:30">s</name></expr></argument>, <argument pos:start="2627:33" pos:end="2627:34"><expr pos:start="2627:33" pos:end="2627:34"><name pos:start="2627:33" pos:end="2627:34">ot</name></expr></argument>, <argument pos:start="2627:37" pos:end="2627:41"><expr pos:start="2627:37" pos:end="2627:41"><name pos:start="2627:37" pos:end="2627:41">opreg</name></expr></argument>, <argument pos:start="2627:44" pos:end="2627:45"><expr pos:start="2627:44" pos:end="2627:45"><name pos:start="2627:44" pos:end="2627:45">op</name></expr></argument>, <argument pos:start="2627:48" pos:end="2627:62"><expr pos:start="2627:48" pos:end="2627:62"><name pos:start="2627:48" pos:end="2627:62"><name pos:start="2627:48" pos:end="2627:55">cpu_regs</name><index pos:start="2627:56" pos:end="2627:62">[<expr pos:start="2627:57" pos:end="2627:61"><name pos:start="2627:57" pos:end="2627:61">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2631:9" pos:end="2631:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2635:9" pos:end="2635:34">/************************/</comment>

        <comment type="block" pos:start="2637:9" pos:end="2637:20">/* floats */</comment>

    <case pos:start="2639:5" pos:end="2639:23">case <expr pos:start="2639:10" pos:end="2639:22"><literal type="number" pos:start="2639:10" pos:end="2639:13">0xd8</literal> <operator pos:start="2639:15" pos:end="2639:17">...</operator> <literal type="number" pos:start="2639:19" pos:end="2639:22">0xdf</literal></expr>:</case>

        <if_stmt pos:start="2641:9" pos:end="2651:9"><if pos:start="2641:9" pos:end="2651:9">if <condition pos:start="2641:12" pos:end="2641:49">(<expr pos:start="2641:13" pos:end="2641:48"><name pos:start="2641:13" pos:end="2641:20"><name pos:start="2641:13" pos:end="2641:13">s</name><operator pos:start="2641:14" pos:end="2641:15">-&gt;</operator><name pos:start="2641:16" pos:end="2641:20">flags</name></name> <operator pos:start="2641:22" pos:end="2641:22">&amp;</operator> <operator pos:start="2641:24" pos:end="2641:24">(</operator><name pos:start="2641:25" pos:end="2641:34">HF_EM_MASK</name> <operator pos:start="2641:36" pos:end="2641:36">|</operator> <name pos:start="2641:38" pos:end="2641:47">HF_TS_MASK</name><operator pos:start="2641:48" pos:end="2641:48">)</operator></expr>)</condition> <block pos:start="2641:51" pos:end="2651:9">{<block_content pos:start="2647:13" pos:end="2649:18">

            <comment type="block" pos:start="2643:13" pos:end="2643:72">/* if CR0.EM or CR0.TS are set, generate an FPU exception */</comment>

            <comment type="block" pos:start="2645:13" pos:end="2645:49">/* XXX: what to do if illegal op ? */</comment>

            <expr_stmt pos:start="2647:13" pos:end="2647:65"><expr pos:start="2647:13" pos:end="2647:64"><call pos:start="2647:13" pos:end="2647:64"><name pos:start="2647:13" pos:end="2647:25">gen_exception</name><argument_list pos:start="2647:26" pos:end="2647:64">(<argument pos:start="2647:27" pos:end="2647:27"><expr pos:start="2647:27" pos:end="2647:27"><name pos:start="2647:27" pos:end="2647:27">s</name></expr></argument>, <argument pos:start="2647:30" pos:end="2647:40"><expr pos:start="2647:30" pos:end="2647:40"><name pos:start="2647:30" pos:end="2647:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="2647:43" pos:end="2647:63"><expr pos:start="2647:43" pos:end="2647:63"><name pos:start="2647:43" pos:end="2647:50">pc_start</name> <operator pos:start="2647:52" pos:end="2647:52">-</operator> <name pos:start="2647:54" pos:end="2647:63"><name pos:start="2647:54" pos:end="2647:54">s</name><operator pos:start="2647:55" pos:end="2647:56">-&gt;</operator><name pos:start="2647:57" pos:end="2647:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2649:13" pos:end="2649:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2653:9" pos:end="2653:38"><expr pos:start="2653:9" pos:end="2653:37"><name pos:start="2653:9" pos:end="2653:13">modrm</name> <operator pos:start="2653:15" pos:end="2653:15">=</operator> <call pos:start="2653:17" pos:end="2653:37"><name pos:start="2653:17" pos:end="2653:29">x86_ldub_code</name><argument_list pos:start="2653:30" pos:end="2653:37">(<argument pos:start="2653:31" pos:end="2653:33"><expr pos:start="2653:31" pos:end="2653:33"><name pos:start="2653:31" pos:end="2653:33">env</name></expr></argument>, <argument pos:start="2653:36" pos:end="2653:36"><expr pos:start="2653:36" pos:end="2653:36"><name pos:start="2653:36" pos:end="2653:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2655:9" pos:end="2655:31"><expr pos:start="2655:9" pos:end="2655:30"><name pos:start="2655:9" pos:end="2655:11">mod</name> <operator pos:start="2655:13" pos:end="2655:13">=</operator> <operator pos:start="2655:15" pos:end="2655:15">(</operator><name pos:start="2655:16" pos:end="2655:20">modrm</name> <operator pos:start="2655:22" pos:end="2655:23">&gt;&gt;</operator> <literal type="number" pos:start="2655:25" pos:end="2655:25">6</literal><operator pos:start="2655:26" pos:end="2655:26">)</operator> <operator pos:start="2655:28" pos:end="2655:28">&amp;</operator> <literal type="number" pos:start="2655:30" pos:end="2655:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2657:9" pos:end="2657:23"><expr pos:start="2657:9" pos:end="2657:22"><name pos:start="2657:9" pos:end="2657:10">rm</name> <operator pos:start="2657:12" pos:end="2657:12">=</operator> <name pos:start="2657:14" pos:end="2657:18">modrm</name> <operator pos:start="2657:20" pos:end="2657:20">&amp;</operator> <literal type="number" pos:start="2657:22" pos:end="2657:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2659:9" pos:end="2659:49"><expr pos:start="2659:9" pos:end="2659:48"><name pos:start="2659:9" pos:end="2659:10">op</name> <operator pos:start="2659:12" pos:end="2659:12">=</operator> <operator pos:start="2659:14" pos:end="2659:14">(</operator><operator pos:start="2659:15" pos:end="2659:15">(</operator><name pos:start="2659:16" pos:end="2659:16">b</name> <operator pos:start="2659:18" pos:end="2659:18">&amp;</operator> <literal type="number" pos:start="2659:20" pos:end="2659:20">7</literal><operator pos:start="2659:21" pos:end="2659:21">)</operator> <operator pos:start="2659:23" pos:end="2659:24">&lt;&lt;</operator> <literal type="number" pos:start="2659:26" pos:end="2659:26">3</literal><operator pos:start="2659:27" pos:end="2659:27">)</operator> <operator pos:start="2659:29" pos:end="2659:29">|</operator> <operator pos:start="2659:31" pos:end="2659:31">(</operator><operator pos:start="2659:32" pos:end="2659:32">(</operator><name pos:start="2659:33" pos:end="2659:37">modrm</name> <operator pos:start="2659:39" pos:end="2659:40">&gt;&gt;</operator> <literal type="number" pos:start="2659:42" pos:end="2659:42">3</literal><operator pos:start="2659:43" pos:end="2659:43">)</operator> <operator pos:start="2659:45" pos:end="2659:45">&amp;</operator> <literal type="number" pos:start="2659:47" pos:end="2659:47">7</literal><operator pos:start="2659:48" pos:end="2659:48">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2661:9" pos:end="3637:9"><if pos:start="2661:9" pos:end="3019:9">if <condition pos:start="2661:12" pos:end="2661:21">(<expr pos:start="2661:13" pos:end="2661:20"><name pos:start="2661:13" pos:end="2661:15">mod</name> <operator pos:start="2661:17" pos:end="2661:18">!=</operator> <literal type="number" pos:start="2661:20" pos:end="2661:20">3</literal></expr>)</condition> <block pos:start="2661:23" pos:end="3019:9">{<block_content pos:start="2665:13" pos:end="3017:13">

            <comment type="block" pos:start="2663:13" pos:end="2663:27">/* memory op */</comment>

            <expr_stmt pos:start="2665:13" pos:end="2665:41"><expr pos:start="2665:13" pos:end="2665:40"><call pos:start="2665:13" pos:end="2665:40"><name pos:start="2665:13" pos:end="2665:25">gen_lea_modrm</name><argument_list pos:start="2665:26" pos:end="2665:40">(<argument pos:start="2665:27" pos:end="2665:29"><expr pos:start="2665:27" pos:end="2665:29"><name pos:start="2665:27" pos:end="2665:29">env</name></expr></argument>, <argument pos:start="2665:32" pos:end="2665:32"><expr pos:start="2665:32" pos:end="2665:32"><name pos:start="2665:32" pos:end="2665:32">s</name></expr></argument>, <argument pos:start="2665:35" pos:end="2665:39"><expr pos:start="2665:35" pos:end="2665:39"><name pos:start="2665:35" pos:end="2665:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2667:13" pos:end="3017:13">switch<condition pos:start="2667:19" pos:end="2667:22">(<expr pos:start="2667:20" pos:end="2667:21"><name pos:start="2667:20" pos:end="2667:21">op</name></expr>)</condition> <block pos:start="2667:24" pos:end="3017:13">{<block_content pos:start="2669:13" pos:end="3015:32">

            <case pos:start="2669:13" pos:end="2669:31">case <expr pos:start="2669:18" pos:end="2669:30"><literal type="number" pos:start="2669:18" pos:end="2669:21">0x00</literal> <operator pos:start="2669:23" pos:end="2669:25">...</operator> <literal type="number" pos:start="2669:27" pos:end="2669:30">0x07</literal></expr>:</case> <comment type="block" pos:start="2669:33" pos:end="2669:43">/* fxxxs */</comment>

            <case pos:start="2671:13" pos:end="2671:31">case <expr pos:start="2671:18" pos:end="2671:30"><literal type="number" pos:start="2671:18" pos:end="2671:21">0x10</literal> <operator pos:start="2671:23" pos:end="2671:25">...</operator> <literal type="number" pos:start="2671:27" pos:end="2671:30">0x17</literal></expr>:</case> <comment type="block" pos:start="2671:33" pos:end="2671:44">/* fixxxl */</comment>

            <case pos:start="2673:13" pos:end="2673:31">case <expr pos:start="2673:18" pos:end="2673:30"><literal type="number" pos:start="2673:18" pos:end="2673:21">0x20</literal> <operator pos:start="2673:23" pos:end="2673:25">...</operator> <literal type="number" pos:start="2673:27" pos:end="2673:30">0x27</literal></expr>:</case> <comment type="block" pos:start="2673:33" pos:end="2673:43">/* fxxxl */</comment>

            <case pos:start="2675:13" pos:end="2675:31">case <expr pos:start="2675:18" pos:end="2675:30"><literal type="number" pos:start="2675:18" pos:end="2675:21">0x30</literal> <operator pos:start="2675:23" pos:end="2675:25">...</operator> <literal type="number" pos:start="2675:27" pos:end="2675:30">0x37</literal></expr>:</case> <comment type="block" pos:start="2675:33" pos:end="2675:43">/* fixxx */</comment>

                <block pos:start="2677:17" pos:end="2743:17">{<block_content pos:start="2679:21" pos:end="2741:21">

                    <decl_stmt pos:start="2679:21" pos:end="2679:28"><decl pos:start="2679:21" pos:end="2679:27"><type pos:start="2679:21" pos:end="2679:23"><name pos:start="2679:21" pos:end="2679:23">int</name></type> <name pos:start="2679:25" pos:end="2679:27">op1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="2681:21" pos:end="2681:33"><expr pos:start="2681:21" pos:end="2681:32"><name pos:start="2681:21" pos:end="2681:23">op1</name> <operator pos:start="2681:25" pos:end="2681:25">=</operator> <name pos:start="2681:27" pos:end="2681:28">op</name> <operator pos:start="2681:30" pos:end="2681:30">&amp;</operator> <literal type="number" pos:start="2681:32" pos:end="2681:32">7</literal></expr>;</expr_stmt>



                    <switch pos:start="2685:21" pos:end="2729:21">switch<condition pos:start="2685:27" pos:end="2685:35">(<expr pos:start="2685:28" pos:end="2685:34"><name pos:start="2685:28" pos:end="2685:29">op</name> <operator pos:start="2685:31" pos:end="2685:32">&gt;&gt;</operator> <literal type="number" pos:start="2685:34" pos:end="2685:34">4</literal></expr>)</condition> <block pos:start="2685:37" pos:end="2729:21">{<block_content pos:start="2687:21" pos:end="2727:30">

                    <case pos:start="2687:21" pos:end="2687:27">case <expr pos:start="2687:26" pos:end="2687:26"><literal type="number" pos:start="2687:26" pos:end="2687:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2689:25" pos:end="2691:67"><expr pos:start="2689:25" pos:end="2691:66"><call pos:start="2689:25" pos:end="2691:66"><name pos:start="2689:25" pos:end="2689:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2689:44" pos:end="2691:66">(<argument pos:start="2689:45" pos:end="2689:56"><expr pos:start="2689:45" pos:end="2689:56"><name pos:start="2689:45" pos:end="2689:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2689:59" pos:end="2689:64"><expr pos:start="2689:59" pos:end="2689:64"><name pos:start="2689:59" pos:end="2689:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2691:45" pos:end="2691:56"><expr pos:start="2691:45" pos:end="2691:56"><name pos:start="2691:45" pos:end="2691:56"><name pos:start="2691:45" pos:end="2691:45">s</name><operator pos:start="2691:46" pos:end="2691:47">-&gt;</operator><name pos:start="2691:48" pos:end="2691:56">mem_index</name></name></expr></argument>, <argument pos:start="2691:59" pos:end="2691:65"><expr pos:start="2691:59" pos:end="2691:65"><name pos:start="2691:59" pos:end="2691:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2693:25" pos:end="2693:67"><expr pos:start="2693:25" pos:end="2693:66"><call pos:start="2693:25" pos:end="2693:66"><name pos:start="2693:25" pos:end="2693:43">gen_helper_flds_FT0</name><argument_list pos:start="2693:44" pos:end="2693:66">(<argument pos:start="2693:45" pos:end="2693:51"><expr pos:start="2693:45" pos:end="2693:51"><name pos:start="2693:45" pos:end="2693:51">cpu_env</name></expr></argument>, <argument pos:start="2693:54" pos:end="2693:65"><expr pos:start="2693:54" pos:end="2693:65"><name pos:start="2693:54" pos:end="2693:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2695:25" pos:end="2695:30">break;</break>

                    <case pos:start="2697:21" pos:end="2697:27">case <expr pos:start="2697:26" pos:end="2697:26"><literal type="number" pos:start="2697:26" pos:end="2697:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2699:25" pos:end="2701:67"><expr pos:start="2699:25" pos:end="2701:66"><call pos:start="2699:25" pos:end="2701:66"><name pos:start="2699:25" pos:end="2699:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2699:44" pos:end="2701:66">(<argument pos:start="2699:45" pos:end="2699:56"><expr pos:start="2699:45" pos:end="2699:56"><name pos:start="2699:45" pos:end="2699:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2699:59" pos:end="2699:64"><expr pos:start="2699:59" pos:end="2699:64"><name pos:start="2699:59" pos:end="2699:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2701:45" pos:end="2701:56"><expr pos:start="2701:45" pos:end="2701:56"><name pos:start="2701:45" pos:end="2701:56"><name pos:start="2701:45" pos:end="2701:45">s</name><operator pos:start="2701:46" pos:end="2701:47">-&gt;</operator><name pos:start="2701:48" pos:end="2701:56">mem_index</name></name></expr></argument>, <argument pos:start="2701:59" pos:end="2701:65"><expr pos:start="2701:59" pos:end="2701:65"><name pos:start="2701:59" pos:end="2701:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2703:25" pos:end="2703:68"><expr pos:start="2703:25" pos:end="2703:67"><call pos:start="2703:25" pos:end="2703:67"><name pos:start="2703:25" pos:end="2703:44">gen_helper_fildl_FT0</name><argument_list pos:start="2703:45" pos:end="2703:67">(<argument pos:start="2703:46" pos:end="2703:52"><expr pos:start="2703:46" pos:end="2703:52"><name pos:start="2703:46" pos:end="2703:52">cpu_env</name></expr></argument>, <argument pos:start="2703:55" pos:end="2703:66"><expr pos:start="2703:55" pos:end="2703:66"><name pos:start="2703:55" pos:end="2703:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2705:25" pos:end="2705:30">break;</break>

                    <case pos:start="2707:21" pos:end="2707:27">case <expr pos:start="2707:26" pos:end="2707:26"><literal type="number" pos:start="2707:26" pos:end="2707:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2709:25" pos:end="2711:66"><expr pos:start="2709:25" pos:end="2711:65"><call pos:start="2709:25" pos:end="2711:65"><name pos:start="2709:25" pos:end="2709:43">tcg_gen_qemu_ld_i64</name><argument_list pos:start="2709:44" pos:end="2711:65">(<argument pos:start="2709:45" pos:end="2709:56"><expr pos:start="2709:45" pos:end="2709:56"><name pos:start="2709:45" pos:end="2709:56">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2709:59" pos:end="2709:64"><expr pos:start="2709:59" pos:end="2709:64"><name pos:start="2709:59" pos:end="2709:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2711:45" pos:end="2711:56"><expr pos:start="2711:45" pos:end="2711:56"><name pos:start="2711:45" pos:end="2711:56"><name pos:start="2711:45" pos:end="2711:45">s</name><operator pos:start="2711:46" pos:end="2711:47">-&gt;</operator><name pos:start="2711:48" pos:end="2711:56">mem_index</name></name></expr></argument>, <argument pos:start="2711:59" pos:end="2711:64"><expr pos:start="2711:59" pos:end="2711:64"><name pos:start="2711:59" pos:end="2711:64">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2713:25" pos:end="2713:67"><expr pos:start="2713:25" pos:end="2713:66"><call pos:start="2713:25" pos:end="2713:66"><name pos:start="2713:25" pos:end="2713:43">gen_helper_fldl_FT0</name><argument_list pos:start="2713:44" pos:end="2713:66">(<argument pos:start="2713:45" pos:end="2713:51"><expr pos:start="2713:45" pos:end="2713:51"><name pos:start="2713:45" pos:end="2713:51">cpu_env</name></expr></argument>, <argument pos:start="2713:54" pos:end="2713:65"><expr pos:start="2713:54" pos:end="2713:65"><name pos:start="2713:54" pos:end="2713:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2715:25" pos:end="2715:30">break;</break>

                    <case pos:start="2717:21" pos:end="2717:27">case <expr pos:start="2717:26" pos:end="2717:26"><literal type="number" pos:start="2717:26" pos:end="2717:26">3</literal></expr>:</case>

                    <default pos:start="2719:21" pos:end="2719:28">default:</default>

                        <expr_stmt pos:start="2721:25" pos:end="2723:67"><expr pos:start="2721:25" pos:end="2723:66"><call pos:start="2721:25" pos:end="2723:66"><name pos:start="2721:25" pos:end="2721:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2721:44" pos:end="2723:66">(<argument pos:start="2721:45" pos:end="2721:56"><expr pos:start="2721:45" pos:end="2721:56"><name pos:start="2721:45" pos:end="2721:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2721:59" pos:end="2721:64"><expr pos:start="2721:59" pos:end="2721:64"><name pos:start="2721:59" pos:end="2721:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2723:45" pos:end="2723:56"><expr pos:start="2723:45" pos:end="2723:56"><name pos:start="2723:45" pos:end="2723:56"><name pos:start="2723:45" pos:end="2723:45">s</name><operator pos:start="2723:46" pos:end="2723:47">-&gt;</operator><name pos:start="2723:48" pos:end="2723:56">mem_index</name></name></expr></argument>, <argument pos:start="2723:59" pos:end="2723:65"><expr pos:start="2723:59" pos:end="2723:65"><name pos:start="2723:59" pos:end="2723:65">MO_LESW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2725:25" pos:end="2725:68"><expr pos:start="2725:25" pos:end="2725:67"><call pos:start="2725:25" pos:end="2725:67"><name pos:start="2725:25" pos:end="2725:44">gen_helper_fildl_FT0</name><argument_list pos:start="2725:45" pos:end="2725:67">(<argument pos:start="2725:46" pos:end="2725:52"><expr pos:start="2725:46" pos:end="2725:52"><name pos:start="2725:46" pos:end="2725:52">cpu_env</name></expr></argument>, <argument pos:start="2725:55" pos:end="2725:66"><expr pos:start="2725:55" pos:end="2725:66"><name pos:start="2725:55" pos:end="2725:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2727:25" pos:end="2727:30">break;</break>

                    </block_content>}</block></switch>



                    <expr_stmt pos:start="2733:21" pos:end="2733:53"><expr pos:start="2733:21" pos:end="2733:52"><call pos:start="2733:21" pos:end="2733:52"><name pos:start="2733:21" pos:end="2733:47">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="2733:48" pos:end="2733:52">(<argument pos:start="2733:49" pos:end="2733:51"><expr pos:start="2733:49" pos:end="2733:51"><name pos:start="2733:49" pos:end="2733:51">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2735:21" pos:end="2741:21"><if pos:start="2735:21" pos:end="2741:21">if <condition pos:start="2735:24" pos:end="2735:33">(<expr pos:start="2735:25" pos:end="2735:32"><name pos:start="2735:25" pos:end="2735:27">op1</name> <operator pos:start="2735:29" pos:end="2735:30">==</operator> <literal type="number" pos:start="2735:32" pos:end="2735:32">3</literal></expr>)</condition> <block pos:start="2735:35" pos:end="2741:21">{<block_content pos:start="2739:25" pos:end="2739:49">

                        <comment type="block" pos:start="2737:25" pos:end="2737:45">/* fcomp needs pop */</comment>

                        <expr_stmt pos:start="2739:25" pos:end="2739:49"><expr pos:start="2739:25" pos:end="2739:48"><call pos:start="2739:25" pos:end="2739:48"><name pos:start="2739:25" pos:end="2739:39">gen_helper_fpop</name><argument_list pos:start="2739:40" pos:end="2739:48">(<argument pos:start="2739:41" pos:end="2739:47"><expr pos:start="2739:41" pos:end="2739:47"><name pos:start="2739:41" pos:end="2739:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="2745:17" pos:end="2745:22">break;</break>

            <case pos:start="2747:13" pos:end="2747:22">case <expr pos:start="2747:18" pos:end="2747:21"><literal type="number" pos:start="2747:18" pos:end="2747:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2747:24" pos:end="2747:33">/* flds */</comment>

            <case pos:start="2749:13" pos:end="2749:22">case <expr pos:start="2749:18" pos:end="2749:21"><literal type="number" pos:start="2749:18" pos:end="2749:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2749:24" pos:end="2749:33">/* fsts */</comment>

            <case pos:start="2751:13" pos:end="2751:22">case <expr pos:start="2751:18" pos:end="2751:21"><literal type="number" pos:start="2751:18" pos:end="2751:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="2751:24" pos:end="2751:34">/* fstps */</comment>

            <case pos:start="2753:13" pos:end="2753:31">case <expr pos:start="2753:18" pos:end="2753:30"><literal type="number" pos:start="2753:18" pos:end="2753:21">0x18</literal> <operator pos:start="2753:23" pos:end="2753:25">...</operator> <literal type="number" pos:start="2753:27" pos:end="2753:30">0x1b</literal></expr>:</case> <comment type="block" pos:start="2753:33" pos:end="2753:67">/* fildl, fisttpl, fistl, fistpl */</comment>

            <case pos:start="2755:13" pos:end="2755:31">case <expr pos:start="2755:18" pos:end="2755:30"><literal type="number" pos:start="2755:18" pos:end="2755:21">0x28</literal> <operator pos:start="2755:23" pos:end="2755:25">...</operator> <literal type="number" pos:start="2755:27" pos:end="2755:30">0x2b</literal></expr>:</case> <comment type="block" pos:start="2755:33" pos:end="2755:65">/* fldl, fisttpll, fstl, fstpl */</comment>

            <case pos:start="2757:13" pos:end="2757:31">case <expr pos:start="2757:18" pos:end="2757:30"><literal type="number" pos:start="2757:18" pos:end="2757:21">0x38</literal> <operator pos:start="2757:23" pos:end="2757:25">...</operator> <literal type="number" pos:start="2757:27" pos:end="2757:30">0x3b</literal></expr>:</case> <comment type="block" pos:start="2757:33" pos:end="2757:67">/* filds, fisttps, fists, fistps */</comment>

                <switch pos:start="2759:17" pos:end="2909:17">switch<condition pos:start="2759:23" pos:end="2759:30">(<expr pos:start="2759:24" pos:end="2759:29"><name pos:start="2759:24" pos:end="2759:25">op</name> <operator pos:start="2759:27" pos:end="2759:27">&amp;</operator> <literal type="number" pos:start="2759:29" pos:end="2759:29">7</literal></expr>)</condition> <block pos:start="2759:32" pos:end="2909:17">{<block_content pos:start="2761:17" pos:end="2907:26">

                <case pos:start="2761:17" pos:end="2761:23">case <expr pos:start="2761:22" pos:end="2761:22"><literal type="number" pos:start="2761:22" pos:end="2761:22">0</literal></expr>:</case>

                    <switch pos:start="2763:21" pos:end="2807:21">switch<condition pos:start="2763:27" pos:end="2763:35">(<expr pos:start="2763:28" pos:end="2763:34"><name pos:start="2763:28" pos:end="2763:29">op</name> <operator pos:start="2763:31" pos:end="2763:32">&gt;&gt;</operator> <literal type="number" pos:start="2763:34" pos:end="2763:34">4</literal></expr>)</condition> <block pos:start="2763:37" pos:end="2807:21">{<block_content pos:start="2765:21" pos:end="2805:30">

                    <case pos:start="2765:21" pos:end="2765:27">case <expr pos:start="2765:26" pos:end="2765:26"><literal type="number" pos:start="2765:26" pos:end="2765:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2767:25" pos:end="2769:67"><expr pos:start="2767:25" pos:end="2769:66"><call pos:start="2767:25" pos:end="2769:66"><name pos:start="2767:25" pos:end="2767:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2767:44" pos:end="2769:66">(<argument pos:start="2767:45" pos:end="2767:56"><expr pos:start="2767:45" pos:end="2767:56"><name pos:start="2767:45" pos:end="2767:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2767:59" pos:end="2767:64"><expr pos:start="2767:59" pos:end="2767:64"><name pos:start="2767:59" pos:end="2767:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2769:45" pos:end="2769:56"><expr pos:start="2769:45" pos:end="2769:56"><name pos:start="2769:45" pos:end="2769:56"><name pos:start="2769:45" pos:end="2769:45">s</name><operator pos:start="2769:46" pos:end="2769:47">-&gt;</operator><name pos:start="2769:48" pos:end="2769:56">mem_index</name></name></expr></argument>, <argument pos:start="2769:59" pos:end="2769:65"><expr pos:start="2769:59" pos:end="2769:65"><name pos:start="2769:59" pos:end="2769:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2771:25" pos:end="2771:67"><expr pos:start="2771:25" pos:end="2771:66"><call pos:start="2771:25" pos:end="2771:66"><name pos:start="2771:25" pos:end="2771:43">gen_helper_flds_ST0</name><argument_list pos:start="2771:44" pos:end="2771:66">(<argument pos:start="2771:45" pos:end="2771:51"><expr pos:start="2771:45" pos:end="2771:51"><name pos:start="2771:45" pos:end="2771:51">cpu_env</name></expr></argument>, <argument pos:start="2771:54" pos:end="2771:65"><expr pos:start="2771:54" pos:end="2771:65"><name pos:start="2771:54" pos:end="2771:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2773:25" pos:end="2773:30">break;</break>

                    <case pos:start="2775:21" pos:end="2775:27">case <expr pos:start="2775:26" pos:end="2775:26"><literal type="number" pos:start="2775:26" pos:end="2775:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2777:25" pos:end="2779:67"><expr pos:start="2777:25" pos:end="2779:66"><call pos:start="2777:25" pos:end="2779:66"><name pos:start="2777:25" pos:end="2777:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2777:44" pos:end="2779:66">(<argument pos:start="2777:45" pos:end="2777:56"><expr pos:start="2777:45" pos:end="2777:56"><name pos:start="2777:45" pos:end="2777:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2777:59" pos:end="2777:64"><expr pos:start="2777:59" pos:end="2777:64"><name pos:start="2777:59" pos:end="2777:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2779:45" pos:end="2779:56"><expr pos:start="2779:45" pos:end="2779:56"><name pos:start="2779:45" pos:end="2779:56"><name pos:start="2779:45" pos:end="2779:45">s</name><operator pos:start="2779:46" pos:end="2779:47">-&gt;</operator><name pos:start="2779:48" pos:end="2779:56">mem_index</name></name></expr></argument>, <argument pos:start="2779:59" pos:end="2779:65"><expr pos:start="2779:59" pos:end="2779:65"><name pos:start="2779:59" pos:end="2779:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2781:25" pos:end="2781:68"><expr pos:start="2781:25" pos:end="2781:67"><call pos:start="2781:25" pos:end="2781:67"><name pos:start="2781:25" pos:end="2781:44">gen_helper_fildl_ST0</name><argument_list pos:start="2781:45" pos:end="2781:67">(<argument pos:start="2781:46" pos:end="2781:52"><expr pos:start="2781:46" pos:end="2781:52"><name pos:start="2781:46" pos:end="2781:52">cpu_env</name></expr></argument>, <argument pos:start="2781:55" pos:end="2781:66"><expr pos:start="2781:55" pos:end="2781:66"><name pos:start="2781:55" pos:end="2781:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2783:25" pos:end="2783:30">break;</break>

                    <case pos:start="2785:21" pos:end="2785:27">case <expr pos:start="2785:26" pos:end="2785:26"><literal type="number" pos:start="2785:26" pos:end="2785:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2787:25" pos:end="2789:66"><expr pos:start="2787:25" pos:end="2789:65"><call pos:start="2787:25" pos:end="2789:65"><name pos:start="2787:25" pos:end="2787:43">tcg_gen_qemu_ld_i64</name><argument_list pos:start="2787:44" pos:end="2789:65">(<argument pos:start="2787:45" pos:end="2787:56"><expr pos:start="2787:45" pos:end="2787:56"><name pos:start="2787:45" pos:end="2787:56">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2787:59" pos:end="2787:64"><expr pos:start="2787:59" pos:end="2787:64"><name pos:start="2787:59" pos:end="2787:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2789:45" pos:end="2789:56"><expr pos:start="2789:45" pos:end="2789:56"><name pos:start="2789:45" pos:end="2789:56"><name pos:start="2789:45" pos:end="2789:45">s</name><operator pos:start="2789:46" pos:end="2789:47">-&gt;</operator><name pos:start="2789:48" pos:end="2789:56">mem_index</name></name></expr></argument>, <argument pos:start="2789:59" pos:end="2789:64"><expr pos:start="2789:59" pos:end="2789:64"><name pos:start="2789:59" pos:end="2789:64">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2791:25" pos:end="2791:67"><expr pos:start="2791:25" pos:end="2791:66"><call pos:start="2791:25" pos:end="2791:66"><name pos:start="2791:25" pos:end="2791:43">gen_helper_fldl_ST0</name><argument_list pos:start="2791:44" pos:end="2791:66">(<argument pos:start="2791:45" pos:end="2791:51"><expr pos:start="2791:45" pos:end="2791:51"><name pos:start="2791:45" pos:end="2791:51">cpu_env</name></expr></argument>, <argument pos:start="2791:54" pos:end="2791:65"><expr pos:start="2791:54" pos:end="2791:65"><name pos:start="2791:54" pos:end="2791:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2793:25" pos:end="2793:30">break;</break>

                    <case pos:start="2795:21" pos:end="2795:27">case <expr pos:start="2795:26" pos:end="2795:26"><literal type="number" pos:start="2795:26" pos:end="2795:26">3</literal></expr>:</case>

                    <default pos:start="2797:21" pos:end="2797:28">default:</default>

                        <expr_stmt pos:start="2799:25" pos:end="2801:67"><expr pos:start="2799:25" pos:end="2801:66"><call pos:start="2799:25" pos:end="2801:66"><name pos:start="2799:25" pos:end="2799:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2799:44" pos:end="2801:66">(<argument pos:start="2799:45" pos:end="2799:56"><expr pos:start="2799:45" pos:end="2799:56"><name pos:start="2799:45" pos:end="2799:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2799:59" pos:end="2799:64"><expr pos:start="2799:59" pos:end="2799:64"><name pos:start="2799:59" pos:end="2799:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2801:45" pos:end="2801:56"><expr pos:start="2801:45" pos:end="2801:56"><name pos:start="2801:45" pos:end="2801:56"><name pos:start="2801:45" pos:end="2801:45">s</name><operator pos:start="2801:46" pos:end="2801:47">-&gt;</operator><name pos:start="2801:48" pos:end="2801:56">mem_index</name></name></expr></argument>, <argument pos:start="2801:59" pos:end="2801:65"><expr pos:start="2801:59" pos:end="2801:65"><name pos:start="2801:59" pos:end="2801:65">MO_LESW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2803:25" pos:end="2803:68"><expr pos:start="2803:25" pos:end="2803:67"><call pos:start="2803:25" pos:end="2803:67"><name pos:start="2803:25" pos:end="2803:44">gen_helper_fildl_ST0</name><argument_list pos:start="2803:45" pos:end="2803:67">(<argument pos:start="2803:46" pos:end="2803:52"><expr pos:start="2803:46" pos:end="2803:52"><name pos:start="2803:46" pos:end="2803:52">cpu_env</name></expr></argument>, <argument pos:start="2803:55" pos:end="2803:66"><expr pos:start="2803:55" pos:end="2803:66"><name pos:start="2803:55" pos:end="2803:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2805:25" pos:end="2805:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="2809:21" pos:end="2809:26">break;</break>

                <case pos:start="2811:17" pos:end="2811:23">case <expr pos:start="2811:22" pos:end="2811:22"><literal type="number" pos:start="2811:22" pos:end="2811:22">1</literal></expr>:</case>

                    <comment type="block" pos:start="2813:21" pos:end="2813:75">/* XXX: the corresponding CPUID bit must be tested ! */</comment>

                    <switch pos:start="2815:21" pos:end="2849:21">switch<condition pos:start="2815:27" pos:end="2815:35">(<expr pos:start="2815:28" pos:end="2815:34"><name pos:start="2815:28" pos:end="2815:29">op</name> <operator pos:start="2815:31" pos:end="2815:32">&gt;&gt;</operator> <literal type="number" pos:start="2815:34" pos:end="2815:34">4</literal></expr>)</condition> <block pos:start="2815:37" pos:end="2849:21">{<block_content pos:start="2817:21" pos:end="2847:30">

                    <case pos:start="2817:21" pos:end="2817:27">case <expr pos:start="2817:26" pos:end="2817:26"><literal type="number" pos:start="2817:26" pos:end="2817:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2819:25" pos:end="2819:69"><expr pos:start="2819:25" pos:end="2819:68"><call pos:start="2819:25" pos:end="2819:68"><name pos:start="2819:25" pos:end="2819:45">gen_helper_fisttl_ST0</name><argument_list pos:start="2819:46" pos:end="2819:68">(<argument pos:start="2819:47" pos:end="2819:58"><expr pos:start="2819:47" pos:end="2819:58"><name pos:start="2819:47" pos:end="2819:58">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2819:61" pos:end="2819:67"><expr pos:start="2819:61" pos:end="2819:67"><name pos:start="2819:61" pos:end="2819:67">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2821:25" pos:end="2823:67"><expr pos:start="2821:25" pos:end="2823:66"><call pos:start="2821:25" pos:end="2823:66"><name pos:start="2821:25" pos:end="2821:43">tcg_gen_qemu_st_i32</name><argument_list pos:start="2821:44" pos:end="2823:66">(<argument pos:start="2821:45" pos:end="2821:56"><expr pos:start="2821:45" pos:end="2821:56"><name pos:start="2821:45" pos:end="2821:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2821:59" pos:end="2821:64"><expr pos:start="2821:59" pos:end="2821:64"><name pos:start="2821:59" pos:end="2821:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2823:45" pos:end="2823:56"><expr pos:start="2823:45" pos:end="2823:56"><name pos:start="2823:45" pos:end="2823:56"><name pos:start="2823:45" pos:end="2823:45">s</name><operator pos:start="2823:46" pos:end="2823:47">-&gt;</operator><name pos:start="2823:48" pos:end="2823:56">mem_index</name></name></expr></argument>, <argument pos:start="2823:59" pos:end="2823:65"><expr pos:start="2823:59" pos:end="2823:65"><name pos:start="2823:59" pos:end="2823:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2825:25" pos:end="2825:30">break;</break>

                    <case pos:start="2827:21" pos:end="2827:27">case <expr pos:start="2827:26" pos:end="2827:26"><literal type="number" pos:start="2827:26" pos:end="2827:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2829:25" pos:end="2829:70"><expr pos:start="2829:25" pos:end="2829:69"><call pos:start="2829:25" pos:end="2829:69"><name pos:start="2829:25" pos:end="2829:46">gen_helper_fisttll_ST0</name><argument_list pos:start="2829:47" pos:end="2829:69">(<argument pos:start="2829:48" pos:end="2829:59"><expr pos:start="2829:48" pos:end="2829:59"><name pos:start="2829:48" pos:end="2829:59">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2829:62" pos:end="2829:68"><expr pos:start="2829:62" pos:end="2829:68"><name pos:start="2829:62" pos:end="2829:68">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2831:25" pos:end="2833:66"><expr pos:start="2831:25" pos:end="2833:65"><call pos:start="2831:25" pos:end="2833:65"><name pos:start="2831:25" pos:end="2831:43">tcg_gen_qemu_st_i64</name><argument_list pos:start="2831:44" pos:end="2833:65">(<argument pos:start="2831:45" pos:end="2831:56"><expr pos:start="2831:45" pos:end="2831:56"><name pos:start="2831:45" pos:end="2831:56">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2831:59" pos:end="2831:64"><expr pos:start="2831:59" pos:end="2831:64"><name pos:start="2831:59" pos:end="2831:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2833:45" pos:end="2833:56"><expr pos:start="2833:45" pos:end="2833:56"><name pos:start="2833:45" pos:end="2833:56"><name pos:start="2833:45" pos:end="2833:45">s</name><operator pos:start="2833:46" pos:end="2833:47">-&gt;</operator><name pos:start="2833:48" pos:end="2833:56">mem_index</name></name></expr></argument>, <argument pos:start="2833:59" pos:end="2833:64"><expr pos:start="2833:59" pos:end="2833:64"><name pos:start="2833:59" pos:end="2833:64">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2835:25" pos:end="2835:30">break;</break>

                    <case pos:start="2837:21" pos:end="2837:27">case <expr pos:start="2837:26" pos:end="2837:26"><literal type="number" pos:start="2837:26" pos:end="2837:26">3</literal></expr>:</case>

                    <default pos:start="2839:21" pos:end="2839:28">default:</default>

                        <expr_stmt pos:start="2841:25" pos:end="2841:68"><expr pos:start="2841:25" pos:end="2841:67"><call pos:start="2841:25" pos:end="2841:67"><name pos:start="2841:25" pos:end="2841:44">gen_helper_fistt_ST0</name><argument_list pos:start="2841:45" pos:end="2841:67">(<argument pos:start="2841:46" pos:end="2841:57"><expr pos:start="2841:46" pos:end="2841:57"><name pos:start="2841:46" pos:end="2841:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2841:60" pos:end="2841:66"><expr pos:start="2841:60" pos:end="2841:66"><name pos:start="2841:60" pos:end="2841:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2843:25" pos:end="2845:67"><expr pos:start="2843:25" pos:end="2845:66"><call pos:start="2843:25" pos:end="2845:66"><name pos:start="2843:25" pos:end="2843:43">tcg_gen_qemu_st_i32</name><argument_list pos:start="2843:44" pos:end="2845:66">(<argument pos:start="2843:45" pos:end="2843:56"><expr pos:start="2843:45" pos:end="2843:56"><name pos:start="2843:45" pos:end="2843:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2843:59" pos:end="2843:64"><expr pos:start="2843:59" pos:end="2843:64"><name pos:start="2843:59" pos:end="2843:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2845:45" pos:end="2845:56"><expr pos:start="2845:45" pos:end="2845:56"><name pos:start="2845:45" pos:end="2845:56"><name pos:start="2845:45" pos:end="2845:45">s</name><operator pos:start="2845:46" pos:end="2845:47">-&gt;</operator><name pos:start="2845:48" pos:end="2845:56">mem_index</name></name></expr></argument>, <argument pos:start="2845:59" pos:end="2845:65"><expr pos:start="2845:59" pos:end="2845:65"><name pos:start="2845:59" pos:end="2845:65">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2847:25" pos:end="2847:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="2851:21" pos:end="2851:45"><expr pos:start="2851:21" pos:end="2851:44"><call pos:start="2851:21" pos:end="2851:44"><name pos:start="2851:21" pos:end="2851:35">gen_helper_fpop</name><argument_list pos:start="2851:36" pos:end="2851:44">(<argument pos:start="2851:37" pos:end="2851:43"><expr pos:start="2851:37" pos:end="2851:43"><name pos:start="2851:37" pos:end="2851:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2853:21" pos:end="2853:26">break;</break>

                <default pos:start="2855:17" pos:end="2855:24">default:</default>

                    <switch pos:start="2857:21" pos:end="2901:21">switch<condition pos:start="2857:27" pos:end="2857:35">(<expr pos:start="2857:28" pos:end="2857:34"><name pos:start="2857:28" pos:end="2857:29">op</name> <operator pos:start="2857:31" pos:end="2857:32">&gt;&gt;</operator> <literal type="number" pos:start="2857:34" pos:end="2857:34">4</literal></expr>)</condition> <block pos:start="2857:37" pos:end="2901:21">{<block_content pos:start="2859:21" pos:end="2899:30">

                    <case pos:start="2859:21" pos:end="2859:27">case <expr pos:start="2859:26" pos:end="2859:26"><literal type="number" pos:start="2859:26" pos:end="2859:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2861:25" pos:end="2861:67"><expr pos:start="2861:25" pos:end="2861:66"><call pos:start="2861:25" pos:end="2861:66"><name pos:start="2861:25" pos:end="2861:43">gen_helper_fsts_ST0</name><argument_list pos:start="2861:44" pos:end="2861:66">(<argument pos:start="2861:45" pos:end="2861:56"><expr pos:start="2861:45" pos:end="2861:56"><name pos:start="2861:45" pos:end="2861:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2861:59" pos:end="2861:65"><expr pos:start="2861:59" pos:end="2861:65"><name pos:start="2861:59" pos:end="2861:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2863:25" pos:end="2865:67"><expr pos:start="2863:25" pos:end="2865:66"><call pos:start="2863:25" pos:end="2865:66"><name pos:start="2863:25" pos:end="2863:43">tcg_gen_qemu_st_i32</name><argument_list pos:start="2863:44" pos:end="2865:66">(<argument pos:start="2863:45" pos:end="2863:56"><expr pos:start="2863:45" pos:end="2863:56"><name pos:start="2863:45" pos:end="2863:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2863:59" pos:end="2863:64"><expr pos:start="2863:59" pos:end="2863:64"><name pos:start="2863:59" pos:end="2863:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2865:45" pos:end="2865:56"><expr pos:start="2865:45" pos:end="2865:56"><name pos:start="2865:45" pos:end="2865:56"><name pos:start="2865:45" pos:end="2865:45">s</name><operator pos:start="2865:46" pos:end="2865:47">-&gt;</operator><name pos:start="2865:48" pos:end="2865:56">mem_index</name></name></expr></argument>, <argument pos:start="2865:59" pos:end="2865:65"><expr pos:start="2865:59" pos:end="2865:65"><name pos:start="2865:59" pos:end="2865:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2867:25" pos:end="2867:30">break;</break>

                    <case pos:start="2869:21" pos:end="2869:27">case <expr pos:start="2869:26" pos:end="2869:26"><literal type="number" pos:start="2869:26" pos:end="2869:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2871:25" pos:end="2871:68"><expr pos:start="2871:25" pos:end="2871:67"><call pos:start="2871:25" pos:end="2871:67"><name pos:start="2871:25" pos:end="2871:44">gen_helper_fistl_ST0</name><argument_list pos:start="2871:45" pos:end="2871:67">(<argument pos:start="2871:46" pos:end="2871:57"><expr pos:start="2871:46" pos:end="2871:57"><name pos:start="2871:46" pos:end="2871:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2871:60" pos:end="2871:66"><expr pos:start="2871:60" pos:end="2871:66"><name pos:start="2871:60" pos:end="2871:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2873:25" pos:end="2875:67"><expr pos:start="2873:25" pos:end="2875:66"><call pos:start="2873:25" pos:end="2875:66"><name pos:start="2873:25" pos:end="2873:43">tcg_gen_qemu_st_i32</name><argument_list pos:start="2873:44" pos:end="2875:66">(<argument pos:start="2873:45" pos:end="2873:56"><expr pos:start="2873:45" pos:end="2873:56"><name pos:start="2873:45" pos:end="2873:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2873:59" pos:end="2873:64"><expr pos:start="2873:59" pos:end="2873:64"><name pos:start="2873:59" pos:end="2873:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2875:45" pos:end="2875:56"><expr pos:start="2875:45" pos:end="2875:56"><name pos:start="2875:45" pos:end="2875:56"><name pos:start="2875:45" pos:end="2875:45">s</name><operator pos:start="2875:46" pos:end="2875:47">-&gt;</operator><name pos:start="2875:48" pos:end="2875:56">mem_index</name></name></expr></argument>, <argument pos:start="2875:59" pos:end="2875:65"><expr pos:start="2875:59" pos:end="2875:65"><name pos:start="2875:59" pos:end="2875:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2877:25" pos:end="2877:30">break;</break>

                    <case pos:start="2879:21" pos:end="2879:27">case <expr pos:start="2879:26" pos:end="2879:26"><literal type="number" pos:start="2879:26" pos:end="2879:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2881:25" pos:end="2881:67"><expr pos:start="2881:25" pos:end="2881:66"><call pos:start="2881:25" pos:end="2881:66"><name pos:start="2881:25" pos:end="2881:43">gen_helper_fstl_ST0</name><argument_list pos:start="2881:44" pos:end="2881:66">(<argument pos:start="2881:45" pos:end="2881:56"><expr pos:start="2881:45" pos:end="2881:56"><name pos:start="2881:45" pos:end="2881:56">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2881:59" pos:end="2881:65"><expr pos:start="2881:59" pos:end="2881:65"><name pos:start="2881:59" pos:end="2881:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2883:25" pos:end="2885:66"><expr pos:start="2883:25" pos:end="2885:65"><call pos:start="2883:25" pos:end="2885:65"><name pos:start="2883:25" pos:end="2883:43">tcg_gen_qemu_st_i64</name><argument_list pos:start="2883:44" pos:end="2885:65">(<argument pos:start="2883:45" pos:end="2883:56"><expr pos:start="2883:45" pos:end="2883:56"><name pos:start="2883:45" pos:end="2883:56">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2883:59" pos:end="2883:64"><expr pos:start="2883:59" pos:end="2883:64"><name pos:start="2883:59" pos:end="2883:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2885:45" pos:end="2885:56"><expr pos:start="2885:45" pos:end="2885:56"><name pos:start="2885:45" pos:end="2885:56"><name pos:start="2885:45" pos:end="2885:45">s</name><operator pos:start="2885:46" pos:end="2885:47">-&gt;</operator><name pos:start="2885:48" pos:end="2885:56">mem_index</name></name></expr></argument>, <argument pos:start="2885:59" pos:end="2885:64"><expr pos:start="2885:59" pos:end="2885:64"><name pos:start="2885:59" pos:end="2885:64">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2887:25" pos:end="2887:30">break;</break>

                    <case pos:start="2889:21" pos:end="2889:27">case <expr pos:start="2889:26" pos:end="2889:26"><literal type="number" pos:start="2889:26" pos:end="2889:26">3</literal></expr>:</case>

                    <default pos:start="2891:21" pos:end="2891:28">default:</default>

                        <expr_stmt pos:start="2893:25" pos:end="2893:67"><expr pos:start="2893:25" pos:end="2893:66"><call pos:start="2893:25" pos:end="2893:66"><name pos:start="2893:25" pos:end="2893:43">gen_helper_fist_ST0</name><argument_list pos:start="2893:44" pos:end="2893:66">(<argument pos:start="2893:45" pos:end="2893:56"><expr pos:start="2893:45" pos:end="2893:56"><name pos:start="2893:45" pos:end="2893:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2893:59" pos:end="2893:65"><expr pos:start="2893:59" pos:end="2893:65"><name pos:start="2893:59" pos:end="2893:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2895:25" pos:end="2897:67"><expr pos:start="2895:25" pos:end="2897:66"><call pos:start="2895:25" pos:end="2897:66"><name pos:start="2895:25" pos:end="2895:43">tcg_gen_qemu_st_i32</name><argument_list pos:start="2895:44" pos:end="2897:66">(<argument pos:start="2895:45" pos:end="2895:56"><expr pos:start="2895:45" pos:end="2895:56"><name pos:start="2895:45" pos:end="2895:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2895:59" pos:end="2895:64"><expr pos:start="2895:59" pos:end="2895:64"><name pos:start="2895:59" pos:end="2895:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2897:45" pos:end="2897:56"><expr pos:start="2897:45" pos:end="2897:56"><name pos:start="2897:45" pos:end="2897:56"><name pos:start="2897:45" pos:end="2897:45">s</name><operator pos:start="2897:46" pos:end="2897:47">-&gt;</operator><name pos:start="2897:48" pos:end="2897:56">mem_index</name></name></expr></argument>, <argument pos:start="2897:59" pos:end="2897:65"><expr pos:start="2897:59" pos:end="2897:65"><name pos:start="2897:59" pos:end="2897:65">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2899:25" pos:end="2899:30">break;</break>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="2903:21" pos:end="2905:49"><if pos:start="2903:21" pos:end="2905:49">if <condition pos:start="2903:24" pos:end="2903:38">(<expr pos:start="2903:25" pos:end="2903:37"><operator pos:start="2903:25" pos:end="2903:25">(</operator><name pos:start="2903:26" pos:end="2903:27">op</name> <operator pos:start="2903:29" pos:end="2903:29">&amp;</operator> <literal type="number" pos:start="2903:31" pos:end="2903:31">7</literal><operator pos:start="2903:32" pos:end="2903:32">)</operator> <operator pos:start="2903:34" pos:end="2903:35">==</operator> <literal type="number" pos:start="2903:37" pos:end="2903:37">3</literal></expr>)</condition><block type="pseudo" pos:start="2905:25" pos:end="2905:49"><block_content pos:start="2905:25" pos:end="2905:49">

                        <expr_stmt pos:start="2905:25" pos:end="2905:49"><expr pos:start="2905:25" pos:end="2905:48"><call pos:start="2905:25" pos:end="2905:48"><name pos:start="2905:25" pos:end="2905:39">gen_helper_fpop</name><argument_list pos:start="2905:40" pos:end="2905:48">(<argument pos:start="2905:41" pos:end="2905:47"><expr pos:start="2905:41" pos:end="2905:47"><name pos:start="2905:41" pos:end="2905:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="2907:21" pos:end="2907:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2911:17" pos:end="2911:22">break;</break>

            <case pos:start="2913:13" pos:end="2913:22">case <expr pos:start="2913:18" pos:end="2913:21"><literal type="number" pos:start="2913:18" pos:end="2913:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="2913:24" pos:end="2913:39">/* fldenv mem */</comment>

                <expr_stmt pos:start="2915:17" pos:end="2915:77"><expr pos:start="2915:17" pos:end="2915:76"><call pos:start="2915:17" pos:end="2915:76"><name pos:start="2915:17" pos:end="2915:33">gen_helper_fldenv</name><argument_list pos:start="2915:34" pos:end="2915:76">(<argument pos:start="2915:35" pos:end="2915:41"><expr pos:start="2915:35" pos:end="2915:41"><name pos:start="2915:35" pos:end="2915:41">cpu_env</name></expr></argument>, <argument pos:start="2915:44" pos:end="2915:49"><expr pos:start="2915:44" pos:end="2915:49"><name pos:start="2915:44" pos:end="2915:49">cpu_A0</name></expr></argument>, <argument pos:start="2915:52" pos:end="2915:75"><expr pos:start="2915:52" pos:end="2915:75"><call pos:start="2915:52" pos:end="2915:75"><name pos:start="2915:52" pos:end="2915:64">tcg_const_i32</name><argument_list pos:start="2915:65" pos:end="2915:75">(<argument pos:start="2915:66" pos:end="2915:74"><expr pos:start="2915:66" pos:end="2915:74"><name pos:start="2915:66" pos:end="2915:70">dflag</name> <operator pos:start="2915:72" pos:end="2915:72">-</operator> <literal type="number" pos:start="2915:74" pos:end="2915:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2917:17" pos:end="2917:22">break;</break>

            <case pos:start="2919:13" pos:end="2919:22">case <expr pos:start="2919:18" pos:end="2919:21"><literal type="number" pos:start="2919:18" pos:end="2919:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="2919:24" pos:end="2919:38">/* fldcw mem */</comment>

                <expr_stmt pos:start="2921:17" pos:end="2923:59"><expr pos:start="2921:17" pos:end="2923:58"><call pos:start="2921:17" pos:end="2923:58"><name pos:start="2921:17" pos:end="2921:35">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2921:36" pos:end="2923:58">(<argument pos:start="2921:37" pos:end="2921:48"><expr pos:start="2921:37" pos:end="2921:48"><name pos:start="2921:37" pos:end="2921:48">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2921:51" pos:end="2921:56"><expr pos:start="2921:51" pos:end="2921:56"><name pos:start="2921:51" pos:end="2921:56">cpu_A0</name></expr></argument>,

                                    <argument pos:start="2923:37" pos:end="2923:48"><expr pos:start="2923:37" pos:end="2923:48"><name pos:start="2923:37" pos:end="2923:48"><name pos:start="2923:37" pos:end="2923:37">s</name><operator pos:start="2923:38" pos:end="2923:39">-&gt;</operator><name pos:start="2923:40" pos:end="2923:48">mem_index</name></name></expr></argument>, <argument pos:start="2923:51" pos:end="2923:57"><expr pos:start="2923:51" pos:end="2923:57"><name pos:start="2923:51" pos:end="2923:57">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2925:17" pos:end="2925:56"><expr pos:start="2925:17" pos:end="2925:55"><call pos:start="2925:17" pos:end="2925:55"><name pos:start="2925:17" pos:end="2925:32">gen_helper_fldcw</name><argument_list pos:start="2925:33" pos:end="2925:55">(<argument pos:start="2925:34" pos:end="2925:40"><expr pos:start="2925:34" pos:end="2925:40"><name pos:start="2925:34" pos:end="2925:40">cpu_env</name></expr></argument>, <argument pos:start="2925:43" pos:end="2925:54"><expr pos:start="2925:43" pos:end="2925:54"><name pos:start="2925:43" pos:end="2925:54">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2927:17" pos:end="2927:22">break;</break>

            <case pos:start="2929:13" pos:end="2929:22">case <expr pos:start="2929:18" pos:end="2929:21"><literal type="number" pos:start="2929:18" pos:end="2929:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="2929:24" pos:end="2929:40">/* fnstenv mem */</comment>

                <expr_stmt pos:start="2931:17" pos:end="2931:77"><expr pos:start="2931:17" pos:end="2931:76"><call pos:start="2931:17" pos:end="2931:76"><name pos:start="2931:17" pos:end="2931:33">gen_helper_fstenv</name><argument_list pos:start="2931:34" pos:end="2931:76">(<argument pos:start="2931:35" pos:end="2931:41"><expr pos:start="2931:35" pos:end="2931:41"><name pos:start="2931:35" pos:end="2931:41">cpu_env</name></expr></argument>, <argument pos:start="2931:44" pos:end="2931:49"><expr pos:start="2931:44" pos:end="2931:49"><name pos:start="2931:44" pos:end="2931:49">cpu_A0</name></expr></argument>, <argument pos:start="2931:52" pos:end="2931:75"><expr pos:start="2931:52" pos:end="2931:75"><call pos:start="2931:52" pos:end="2931:75"><name pos:start="2931:52" pos:end="2931:64">tcg_const_i32</name><argument_list pos:start="2931:65" pos:end="2931:75">(<argument pos:start="2931:66" pos:end="2931:74"><expr pos:start="2931:66" pos:end="2931:74"><name pos:start="2931:66" pos:end="2931:70">dflag</name> <operator pos:start="2931:72" pos:end="2931:72">-</operator> <literal type="number" pos:start="2931:74" pos:end="2931:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2933:17" pos:end="2933:22">break;</break>

            <case pos:start="2935:13" pos:end="2935:22">case <expr pos:start="2935:18" pos:end="2935:21"><literal type="number" pos:start="2935:18" pos:end="2935:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="2935:24" pos:end="2935:39">/* fnstcw mem */</comment>

                <expr_stmt pos:start="2937:17" pos:end="2937:57"><expr pos:start="2937:17" pos:end="2937:56"><call pos:start="2937:17" pos:end="2937:56"><name pos:start="2937:17" pos:end="2937:33">gen_helper_fnstcw</name><argument_list pos:start="2937:34" pos:end="2937:56">(<argument pos:start="2937:35" pos:end="2937:46"><expr pos:start="2937:35" pos:end="2937:46"><name pos:start="2937:35" pos:end="2937:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2937:49" pos:end="2937:55"><expr pos:start="2937:49" pos:end="2937:55"><name pos:start="2937:49" pos:end="2937:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2939:17" pos:end="2941:59"><expr pos:start="2939:17" pos:end="2941:58"><call pos:start="2939:17" pos:end="2941:58"><name pos:start="2939:17" pos:end="2939:35">tcg_gen_qemu_st_i32</name><argument_list pos:start="2939:36" pos:end="2941:58">(<argument pos:start="2939:37" pos:end="2939:48"><expr pos:start="2939:37" pos:end="2939:48"><name pos:start="2939:37" pos:end="2939:48">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2939:51" pos:end="2939:56"><expr pos:start="2939:51" pos:end="2939:56"><name pos:start="2939:51" pos:end="2939:56">cpu_A0</name></expr></argument>,

                                    <argument pos:start="2941:37" pos:end="2941:48"><expr pos:start="2941:37" pos:end="2941:48"><name pos:start="2941:37" pos:end="2941:48"><name pos:start="2941:37" pos:end="2941:37">s</name><operator pos:start="2941:38" pos:end="2941:39">-&gt;</operator><name pos:start="2941:40" pos:end="2941:48">mem_index</name></name></expr></argument>, <argument pos:start="2941:51" pos:end="2941:57"><expr pos:start="2941:51" pos:end="2941:57"><name pos:start="2941:51" pos:end="2941:57">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2943:17" pos:end="2943:22">break;</break>

            <case pos:start="2945:13" pos:end="2945:22">case <expr pos:start="2945:18" pos:end="2945:21"><literal type="number" pos:start="2945:18" pos:end="2945:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="2945:24" pos:end="2945:37">/* fldt mem */</comment>

                <expr_stmt pos:start="2947:17" pos:end="2947:53"><expr pos:start="2947:17" pos:end="2947:52"><call pos:start="2947:17" pos:end="2947:52"><name pos:start="2947:17" pos:end="2947:35">gen_helper_fldt_ST0</name><argument_list pos:start="2947:36" pos:end="2947:52">(<argument pos:start="2947:37" pos:end="2947:43"><expr pos:start="2947:37" pos:end="2947:43"><name pos:start="2947:37" pos:end="2947:43">cpu_env</name></expr></argument>, <argument pos:start="2947:46" pos:end="2947:51"><expr pos:start="2947:46" pos:end="2947:51"><name pos:start="2947:46" pos:end="2947:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2949:17" pos:end="2949:22">break;</break>

            <case pos:start="2951:13" pos:end="2951:22">case <expr pos:start="2951:18" pos:end="2951:21"><literal type="number" pos:start="2951:18" pos:end="2951:21">0x1f</literal></expr>:</case> <comment type="block" pos:start="2951:24" pos:end="2951:38">/* fstpt mem */</comment>

                <expr_stmt pos:start="2953:17" pos:end="2953:53"><expr pos:start="2953:17" pos:end="2953:52"><call pos:start="2953:17" pos:end="2953:52"><name pos:start="2953:17" pos:end="2953:35">gen_helper_fstt_ST0</name><argument_list pos:start="2953:36" pos:end="2953:52">(<argument pos:start="2953:37" pos:end="2953:43"><expr pos:start="2953:37" pos:end="2953:43"><name pos:start="2953:37" pos:end="2953:43">cpu_env</name></expr></argument>, <argument pos:start="2953:46" pos:end="2953:51"><expr pos:start="2953:46" pos:end="2953:51"><name pos:start="2953:46" pos:end="2953:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2955:17" pos:end="2955:41"><expr pos:start="2955:17" pos:end="2955:40"><call pos:start="2955:17" pos:end="2955:40"><name pos:start="2955:17" pos:end="2955:31">gen_helper_fpop</name><argument_list pos:start="2955:32" pos:end="2955:40">(<argument pos:start="2955:33" pos:end="2955:39"><expr pos:start="2955:33" pos:end="2955:39"><name pos:start="2955:33" pos:end="2955:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2957:17" pos:end="2957:22">break;</break>

            <case pos:start="2959:13" pos:end="2959:22">case <expr pos:start="2959:18" pos:end="2959:21"><literal type="number" pos:start="2959:18" pos:end="2959:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="2959:24" pos:end="2959:39">/* frstor mem */</comment>

                <expr_stmt pos:start="2961:17" pos:end="2961:77"><expr pos:start="2961:17" pos:end="2961:76"><call pos:start="2961:17" pos:end="2961:76"><name pos:start="2961:17" pos:end="2961:33">gen_helper_frstor</name><argument_list pos:start="2961:34" pos:end="2961:76">(<argument pos:start="2961:35" pos:end="2961:41"><expr pos:start="2961:35" pos:end="2961:41"><name pos:start="2961:35" pos:end="2961:41">cpu_env</name></expr></argument>, <argument pos:start="2961:44" pos:end="2961:49"><expr pos:start="2961:44" pos:end="2961:49"><name pos:start="2961:44" pos:end="2961:49">cpu_A0</name></expr></argument>, <argument pos:start="2961:52" pos:end="2961:75"><expr pos:start="2961:52" pos:end="2961:75"><call pos:start="2961:52" pos:end="2961:75"><name pos:start="2961:52" pos:end="2961:64">tcg_const_i32</name><argument_list pos:start="2961:65" pos:end="2961:75">(<argument pos:start="2961:66" pos:end="2961:74"><expr pos:start="2961:66" pos:end="2961:74"><name pos:start="2961:66" pos:end="2961:70">dflag</name> <operator pos:start="2961:72" pos:end="2961:72">-</operator> <literal type="number" pos:start="2961:74" pos:end="2961:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2963:17" pos:end="2963:22">break;</break>

            <case pos:start="2965:13" pos:end="2965:22">case <expr pos:start="2965:18" pos:end="2965:21"><literal type="number" pos:start="2965:18" pos:end="2965:21">0x2e</literal></expr>:</case> <comment type="block" pos:start="2965:24" pos:end="2965:39">/* fnsave mem */</comment>

                <expr_stmt pos:start="2967:17" pos:end="2967:76"><expr pos:start="2967:17" pos:end="2967:75"><call pos:start="2967:17" pos:end="2967:75"><name pos:start="2967:17" pos:end="2967:32">gen_helper_fsave</name><argument_list pos:start="2967:33" pos:end="2967:75">(<argument pos:start="2967:34" pos:end="2967:40"><expr pos:start="2967:34" pos:end="2967:40"><name pos:start="2967:34" pos:end="2967:40">cpu_env</name></expr></argument>, <argument pos:start="2967:43" pos:end="2967:48"><expr pos:start="2967:43" pos:end="2967:48"><name pos:start="2967:43" pos:end="2967:48">cpu_A0</name></expr></argument>, <argument pos:start="2967:51" pos:end="2967:74"><expr pos:start="2967:51" pos:end="2967:74"><call pos:start="2967:51" pos:end="2967:74"><name pos:start="2967:51" pos:end="2967:63">tcg_const_i32</name><argument_list pos:start="2967:64" pos:end="2967:74">(<argument pos:start="2967:65" pos:end="2967:73"><expr pos:start="2967:65" pos:end="2967:73"><name pos:start="2967:65" pos:end="2967:69">dflag</name> <operator pos:start="2967:71" pos:end="2967:71">-</operator> <literal type="number" pos:start="2967:73" pos:end="2967:73">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2969:17" pos:end="2969:22">break;</break>

            <case pos:start="2971:13" pos:end="2971:22">case <expr pos:start="2971:18" pos:end="2971:21"><literal type="number" pos:start="2971:18" pos:end="2971:21">0x2f</literal></expr>:</case> <comment type="block" pos:start="2971:24" pos:end="2971:39">/* fnstsw mem */</comment>

                <expr_stmt pos:start="2973:17" pos:end="2973:57"><expr pos:start="2973:17" pos:end="2973:56"><call pos:start="2973:17" pos:end="2973:56"><name pos:start="2973:17" pos:end="2973:33">gen_helper_fnstsw</name><argument_list pos:start="2973:34" pos:end="2973:56">(<argument pos:start="2973:35" pos:end="2973:46"><expr pos:start="2973:35" pos:end="2973:46"><name pos:start="2973:35" pos:end="2973:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2973:49" pos:end="2973:55"><expr pos:start="2973:49" pos:end="2973:55"><name pos:start="2973:49" pos:end="2973:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2975:17" pos:end="2977:59"><expr pos:start="2975:17" pos:end="2977:58"><call pos:start="2975:17" pos:end="2977:58"><name pos:start="2975:17" pos:end="2975:35">tcg_gen_qemu_st_i32</name><argument_list pos:start="2975:36" pos:end="2977:58">(<argument pos:start="2975:37" pos:end="2975:48"><expr pos:start="2975:37" pos:end="2975:48"><name pos:start="2975:37" pos:end="2975:48">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2975:51" pos:end="2975:56"><expr pos:start="2975:51" pos:end="2975:56"><name pos:start="2975:51" pos:end="2975:56">cpu_A0</name></expr></argument>,

                                    <argument pos:start="2977:37" pos:end="2977:48"><expr pos:start="2977:37" pos:end="2977:48"><name pos:start="2977:37" pos:end="2977:48"><name pos:start="2977:37" pos:end="2977:37">s</name><operator pos:start="2977:38" pos:end="2977:39">-&gt;</operator><name pos:start="2977:40" pos:end="2977:48">mem_index</name></name></expr></argument>, <argument pos:start="2977:51" pos:end="2977:57"><expr pos:start="2977:51" pos:end="2977:57"><name pos:start="2977:51" pos:end="2977:57">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2979:17" pos:end="2979:22">break;</break>

            <case pos:start="2981:13" pos:end="2981:22">case <expr pos:start="2981:18" pos:end="2981:21"><literal type="number" pos:start="2981:18" pos:end="2981:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="2981:24" pos:end="2981:33">/* fbld */</comment>

                <expr_stmt pos:start="2983:17" pos:end="2983:53"><expr pos:start="2983:17" pos:end="2983:52"><call pos:start="2983:17" pos:end="2983:52"><name pos:start="2983:17" pos:end="2983:35">gen_helper_fbld_ST0</name><argument_list pos:start="2983:36" pos:end="2983:52">(<argument pos:start="2983:37" pos:end="2983:43"><expr pos:start="2983:37" pos:end="2983:43"><name pos:start="2983:37" pos:end="2983:43">cpu_env</name></expr></argument>, <argument pos:start="2983:46" pos:end="2983:51"><expr pos:start="2983:46" pos:end="2983:51"><name pos:start="2983:46" pos:end="2983:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2985:17" pos:end="2985:22">break;</break>

            <case pos:start="2987:13" pos:end="2987:22">case <expr pos:start="2987:18" pos:end="2987:21"><literal type="number" pos:start="2987:18" pos:end="2987:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="2987:24" pos:end="2987:34">/* fbstp */</comment>

                <expr_stmt pos:start="2989:17" pos:end="2989:53"><expr pos:start="2989:17" pos:end="2989:52"><call pos:start="2989:17" pos:end="2989:52"><name pos:start="2989:17" pos:end="2989:35">gen_helper_fbst_ST0</name><argument_list pos:start="2989:36" pos:end="2989:52">(<argument pos:start="2989:37" pos:end="2989:43"><expr pos:start="2989:37" pos:end="2989:43"><name pos:start="2989:37" pos:end="2989:43">cpu_env</name></expr></argument>, <argument pos:start="2989:46" pos:end="2989:51"><expr pos:start="2989:46" pos:end="2989:51"><name pos:start="2989:46" pos:end="2989:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2991:17" pos:end="2991:41"><expr pos:start="2991:17" pos:end="2991:40"><call pos:start="2991:17" pos:end="2991:40"><name pos:start="2991:17" pos:end="2991:31">gen_helper_fpop</name><argument_list pos:start="2991:32" pos:end="2991:40">(<argument pos:start="2991:33" pos:end="2991:39"><expr pos:start="2991:33" pos:end="2991:39"><name pos:start="2991:33" pos:end="2991:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2993:17" pos:end="2993:22">break;</break>

            <case pos:start="2995:13" pos:end="2995:22">case <expr pos:start="2995:18" pos:end="2995:21"><literal type="number" pos:start="2995:18" pos:end="2995:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="2995:24" pos:end="2995:35">/* fildll */</comment>

                <expr_stmt pos:start="2997:17" pos:end="2997:80"><expr pos:start="2997:17" pos:end="2997:79"><call pos:start="2997:17" pos:end="2997:79"><name pos:start="2997:17" pos:end="2997:35">tcg_gen_qemu_ld_i64</name><argument_list pos:start="2997:36" pos:end="2997:79">(<argument pos:start="2997:37" pos:end="2997:48"><expr pos:start="2997:37" pos:end="2997:48"><name pos:start="2997:37" pos:end="2997:48">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2997:51" pos:end="2997:56"><expr pos:start="2997:51" pos:end="2997:56"><name pos:start="2997:51" pos:end="2997:56">cpu_A0</name></expr></argument>, <argument pos:start="2997:59" pos:end="2997:70"><expr pos:start="2997:59" pos:end="2997:70"><name pos:start="2997:59" pos:end="2997:70"><name pos:start="2997:59" pos:end="2997:59">s</name><operator pos:start="2997:60" pos:end="2997:61">-&gt;</operator><name pos:start="2997:62" pos:end="2997:70">mem_index</name></name></expr></argument>, <argument pos:start="2997:73" pos:end="2997:78"><expr pos:start="2997:73" pos:end="2997:78"><name pos:start="2997:73" pos:end="2997:78">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2999:17" pos:end="2999:61"><expr pos:start="2999:17" pos:end="2999:60"><call pos:start="2999:17" pos:end="2999:60"><name pos:start="2999:17" pos:end="2999:37">gen_helper_fildll_ST0</name><argument_list pos:start="2999:38" pos:end="2999:60">(<argument pos:start="2999:39" pos:end="2999:45"><expr pos:start="2999:39" pos:end="2999:45"><name pos:start="2999:39" pos:end="2999:45">cpu_env</name></expr></argument>, <argument pos:start="2999:48" pos:end="2999:59"><expr pos:start="2999:48" pos:end="2999:59"><name pos:start="2999:48" pos:end="2999:59">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3001:17" pos:end="3001:22">break;</break>

            <case pos:start="3003:13" pos:end="3003:22">case <expr pos:start="3003:18" pos:end="3003:21"><literal type="number" pos:start="3003:18" pos:end="3003:21">0x3f</literal></expr>:</case> <comment type="block" pos:start="3003:24" pos:end="3003:36">/* fistpll */</comment>

                <expr_stmt pos:start="3005:17" pos:end="3005:61"><expr pos:start="3005:17" pos:end="3005:60"><call pos:start="3005:17" pos:end="3005:60"><name pos:start="3005:17" pos:end="3005:37">gen_helper_fistll_ST0</name><argument_list pos:start="3005:38" pos:end="3005:60">(<argument pos:start="3005:39" pos:end="3005:50"><expr pos:start="3005:39" pos:end="3005:50"><name pos:start="3005:39" pos:end="3005:50">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3005:53" pos:end="3005:59"><expr pos:start="3005:53" pos:end="3005:59"><name pos:start="3005:53" pos:end="3005:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3007:17" pos:end="3007:80"><expr pos:start="3007:17" pos:end="3007:79"><call pos:start="3007:17" pos:end="3007:79"><name pos:start="3007:17" pos:end="3007:35">tcg_gen_qemu_st_i64</name><argument_list pos:start="3007:36" pos:end="3007:79">(<argument pos:start="3007:37" pos:end="3007:48"><expr pos:start="3007:37" pos:end="3007:48"><name pos:start="3007:37" pos:end="3007:48">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3007:51" pos:end="3007:56"><expr pos:start="3007:51" pos:end="3007:56"><name pos:start="3007:51" pos:end="3007:56">cpu_A0</name></expr></argument>, <argument pos:start="3007:59" pos:end="3007:70"><expr pos:start="3007:59" pos:end="3007:70"><name pos:start="3007:59" pos:end="3007:70"><name pos:start="3007:59" pos:end="3007:59">s</name><operator pos:start="3007:60" pos:end="3007:61">-&gt;</operator><name pos:start="3007:62" pos:end="3007:70">mem_index</name></name></expr></argument>, <argument pos:start="3007:73" pos:end="3007:78"><expr pos:start="3007:73" pos:end="3007:78"><name pos:start="3007:73" pos:end="3007:78">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3009:17" pos:end="3009:41"><expr pos:start="3009:17" pos:end="3009:40"><call pos:start="3009:17" pos:end="3009:40"><name pos:start="3009:17" pos:end="3009:31">gen_helper_fpop</name><argument_list pos:start="3009:32" pos:end="3009:40">(<argument pos:start="3009:33" pos:end="3009:39"><expr pos:start="3009:33" pos:end="3009:39"><name pos:start="3009:33" pos:end="3009:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3011:17" pos:end="3011:22">break;</break>

            <default pos:start="3013:13" pos:end="3013:20">default:</default>

                <goto pos:start="3015:17" pos:end="3015:32">goto <name pos:start="3015:22" pos:end="3015:31">unknown_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="3019:11" pos:end="3637:9">else <block pos:start="3019:16" pos:end="3637:9">{<block_content pos:start="3023:13" pos:end="3635:13">

            <comment type="block" pos:start="3021:13" pos:end="3021:36">/* register float ops */</comment>

            <expr_stmt pos:start="3023:13" pos:end="3023:23"><expr pos:start="3023:13" pos:end="3023:22"><name pos:start="3023:13" pos:end="3023:17">opreg</name> <operator pos:start="3023:19" pos:end="3023:19">=</operator> <name pos:start="3023:21" pos:end="3023:22">rm</name></expr>;</expr_stmt>



            <switch pos:start="3027:13" pos:end="3635:13">switch<condition pos:start="3027:19" pos:end="3027:22">(<expr pos:start="3027:20" pos:end="3027:21"><name pos:start="3027:20" pos:end="3027:21">op</name></expr>)</condition> <block pos:start="3027:24" pos:end="3635:13">{<block_content pos:start="3029:13" pos:end="3633:32">

            <case pos:start="3029:13" pos:end="3029:22">case <expr pos:start="3029:18" pos:end="3029:21"><literal type="number" pos:start="3029:18" pos:end="3029:21">0x08</literal></expr>:</case> <comment type="block" pos:start="3029:24" pos:end="3029:36">/* fld sti */</comment>

                <expr_stmt pos:start="3031:17" pos:end="3031:42"><expr pos:start="3031:17" pos:end="3031:41"><call pos:start="3031:17" pos:end="3031:41"><name pos:start="3031:17" pos:end="3031:32">gen_helper_fpush</name><argument_list pos:start="3031:33" pos:end="3031:41">(<argument pos:start="3031:34" pos:end="3031:40"><expr pos:start="3031:34" pos:end="3031:40"><name pos:start="3031:34" pos:end="3031:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3033:17" pos:end="3035:72"><expr pos:start="3033:17" pos:end="3035:71"><call pos:start="3033:17" pos:end="3035:71"><name pos:start="3033:17" pos:end="3033:39">gen_helper_fmov_ST0_STN</name><argument_list pos:start="3033:40" pos:end="3035:71">(<argument pos:start="3033:41" pos:end="3033:47"><expr pos:start="3033:41" pos:end="3033:47"><name pos:start="3033:41" pos:end="3033:47">cpu_env</name></expr></argument>,

                                        <argument pos:start="3035:41" pos:end="3035:70"><expr pos:start="3035:41" pos:end="3035:70"><call pos:start="3035:41" pos:end="3035:70"><name pos:start="3035:41" pos:end="3035:53">tcg_const_i32</name><argument_list pos:start="3035:54" pos:end="3035:70">(<argument pos:start="3035:55" pos:end="3035:69"><expr pos:start="3035:55" pos:end="3035:69"><operator pos:start="3035:55" pos:end="3035:55">(</operator><name pos:start="3035:56" pos:end="3035:60">opreg</name> <operator pos:start="3035:62" pos:end="3035:62">+</operator> <literal type="number" pos:start="3035:64" pos:end="3035:64">1</literal><operator pos:start="3035:65" pos:end="3035:65">)</operator> <operator pos:start="3035:67" pos:end="3035:67">&amp;</operator> <literal type="number" pos:start="3035:69" pos:end="3035:69">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3037:17" pos:end="3037:22">break;</break>

            <case pos:start="3039:13" pos:end="3039:22">case <expr pos:start="3039:18" pos:end="3039:21"><literal type="number" pos:start="3039:18" pos:end="3039:21">0x09</literal></expr>:</case> <comment type="block" pos:start="3039:24" pos:end="3039:38">/* fxchg sti */</comment>

            <case pos:start="3041:13" pos:end="3041:22">case <expr pos:start="3041:18" pos:end="3041:21"><literal type="number" pos:start="3041:18" pos:end="3041:21">0x29</literal></expr>:</case> <comment type="block" pos:start="3041:24" pos:end="3041:56">/* fxchg4 sti, undocumented op */</comment>

            <case pos:start="3043:13" pos:end="3043:22">case <expr pos:start="3043:18" pos:end="3043:21"><literal type="number" pos:start="3043:18" pos:end="3043:21">0x39</literal></expr>:</case> <comment type="block" pos:start="3043:24" pos:end="3043:56">/* fxchg7 sti, undocumented op */</comment>

                <expr_stmt pos:start="3045:17" pos:end="3045:72"><expr pos:start="3045:17" pos:end="3045:71"><call pos:start="3045:17" pos:end="3045:71"><name pos:start="3045:17" pos:end="3045:40">gen_helper_fxchg_ST0_STN</name><argument_list pos:start="3045:41" pos:end="3045:71">(<argument pos:start="3045:42" pos:end="3045:48"><expr pos:start="3045:42" pos:end="3045:48"><name pos:start="3045:42" pos:end="3045:48">cpu_env</name></expr></argument>, <argument pos:start="3045:51" pos:end="3045:70"><expr pos:start="3045:51" pos:end="3045:70"><call pos:start="3045:51" pos:end="3045:70"><name pos:start="3045:51" pos:end="3045:63">tcg_const_i32</name><argument_list pos:start="3045:64" pos:end="3045:70">(<argument pos:start="3045:65" pos:end="3045:69"><expr pos:start="3045:65" pos:end="3045:69"><name pos:start="3045:65" pos:end="3045:69">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3047:17" pos:end="3047:22">break;</break>

            <case pos:start="3049:13" pos:end="3049:22">case <expr pos:start="3049:18" pos:end="3049:21"><literal type="number" pos:start="3049:18" pos:end="3049:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="3049:24" pos:end="3049:37">/* grp d9/2 */</comment>

                <switch pos:start="3051:17" pos:end="3065:17">switch<condition pos:start="3051:23" pos:end="3051:26">(<expr pos:start="3051:24" pos:end="3051:25"><name pos:start="3051:24" pos:end="3051:25">rm</name></expr>)</condition> <block pos:start="3051:28" pos:end="3065:17">{<block_content pos:start="3053:17" pos:end="3063:36">

                <case pos:start="3053:17" pos:end="3053:23">case <expr pos:start="3053:22" pos:end="3053:22"><literal type="number" pos:start="3053:22" pos:end="3053:22">0</literal></expr>:</case> <comment type="block" pos:start="3053:25" pos:end="3053:34">/* fnop */</comment>

                    <comment type="block" pos:start="3055:21" pos:end="3055:62">/* check exceptions (FreeBSD FPU probe) */</comment>

                    <expr_stmt pos:start="3057:21" pos:end="3057:46"><expr pos:start="3057:21" pos:end="3057:45"><call pos:start="3057:21" pos:end="3057:45"><name pos:start="3057:21" pos:end="3057:36">gen_helper_fwait</name><argument_list pos:start="3057:37" pos:end="3057:45">(<argument pos:start="3057:38" pos:end="3057:44"><expr pos:start="3057:38" pos:end="3057:44"><name pos:start="3057:38" pos:end="3057:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3059:21" pos:end="3059:26">break;</break>

                <default pos:start="3061:17" pos:end="3061:24">default:</default>

                    <goto pos:start="3063:21" pos:end="3063:36">goto <name pos:start="3063:26" pos:end="3063:35">unknown_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3067:17" pos:end="3067:22">break;</break>

            <case pos:start="3069:13" pos:end="3069:22">case <expr pos:start="3069:18" pos:end="3069:21"><literal type="number" pos:start="3069:18" pos:end="3069:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="3069:24" pos:end="3069:37">/* grp d9/4 */</comment>

                <switch pos:start="3071:17" pos:end="3103:17">switch<condition pos:start="3071:23" pos:end="3071:26">(<expr pos:start="3071:24" pos:end="3071:25"><name pos:start="3071:24" pos:end="3071:25">rm</name></expr>)</condition> <block pos:start="3071:28" pos:end="3103:17">{<block_content pos:start="3073:17" pos:end="3101:36">

                <case pos:start="3073:17" pos:end="3073:23">case <expr pos:start="3073:22" pos:end="3073:22"><literal type="number" pos:start="3073:22" pos:end="3073:22">0</literal></expr>:</case> <comment type="block" pos:start="3073:25" pos:end="3073:34">/* fchs */</comment>

                    <expr_stmt pos:start="3075:21" pos:end="3075:49"><expr pos:start="3075:21" pos:end="3075:48"><call pos:start="3075:21" pos:end="3075:48"><name pos:start="3075:21" pos:end="3075:39">gen_helper_fchs_ST0</name><argument_list pos:start="3075:40" pos:end="3075:48">(<argument pos:start="3075:41" pos:end="3075:47"><expr pos:start="3075:41" pos:end="3075:47"><name pos:start="3075:41" pos:end="3075:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3077:21" pos:end="3077:26">break;</break>

                <case pos:start="3079:17" pos:end="3079:23">case <expr pos:start="3079:22" pos:end="3079:22"><literal type="number" pos:start="3079:22" pos:end="3079:22">1</literal></expr>:</case> <comment type="block" pos:start="3079:25" pos:end="3079:34">/* fabs */</comment>

                    <expr_stmt pos:start="3081:21" pos:end="3081:49"><expr pos:start="3081:21" pos:end="3081:48"><call pos:start="3081:21" pos:end="3081:48"><name pos:start="3081:21" pos:end="3081:39">gen_helper_fabs_ST0</name><argument_list pos:start="3081:40" pos:end="3081:48">(<argument pos:start="3081:41" pos:end="3081:47"><expr pos:start="3081:41" pos:end="3081:47"><name pos:start="3081:41" pos:end="3081:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3083:21" pos:end="3083:26">break;</break>

                <case pos:start="3085:17" pos:end="3085:23">case <expr pos:start="3085:22" pos:end="3085:22"><literal type="number" pos:start="3085:22" pos:end="3085:22">4</literal></expr>:</case> <comment type="block" pos:start="3085:25" pos:end="3085:34">/* ftst */</comment>

                    <expr_stmt pos:start="3087:21" pos:end="3087:49"><expr pos:start="3087:21" pos:end="3087:48"><call pos:start="3087:21" pos:end="3087:48"><name pos:start="3087:21" pos:end="3087:39">gen_helper_fldz_FT0</name><argument_list pos:start="3087:40" pos:end="3087:48">(<argument pos:start="3087:41" pos:end="3087:47"><expr pos:start="3087:41" pos:end="3087:47"><name pos:start="3087:41" pos:end="3087:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3089:21" pos:end="3089:53"><expr pos:start="3089:21" pos:end="3089:52"><call pos:start="3089:21" pos:end="3089:52"><name pos:start="3089:21" pos:end="3089:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3089:44" pos:end="3089:52">(<argument pos:start="3089:45" pos:end="3089:51"><expr pos:start="3089:45" pos:end="3089:51"><name pos:start="3089:45" pos:end="3089:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3091:21" pos:end="3091:26">break;</break>

                <case pos:start="3093:17" pos:end="3093:23">case <expr pos:start="3093:22" pos:end="3093:22"><literal type="number" pos:start="3093:22" pos:end="3093:22">5</literal></expr>:</case> <comment type="block" pos:start="3093:25" pos:end="3093:34">/* fxam */</comment>

                    <expr_stmt pos:start="3095:21" pos:end="3095:49"><expr pos:start="3095:21" pos:end="3095:48"><call pos:start="3095:21" pos:end="3095:48"><name pos:start="3095:21" pos:end="3095:39">gen_helper_fxam_ST0</name><argument_list pos:start="3095:40" pos:end="3095:48">(<argument pos:start="3095:41" pos:end="3095:47"><expr pos:start="3095:41" pos:end="3095:47"><name pos:start="3095:41" pos:end="3095:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3097:21" pos:end="3097:26">break;</break>

                <default pos:start="3099:17" pos:end="3099:24">default:</default>

                    <goto pos:start="3101:21" pos:end="3101:36">goto <name pos:start="3101:26" pos:end="3101:35">unknown_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3105:17" pos:end="3105:22">break;</break>

            <case pos:start="3107:13" pos:end="3107:22">case <expr pos:start="3107:18" pos:end="3107:21"><literal type="number" pos:start="3107:18" pos:end="3107:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="3107:24" pos:end="3107:37">/* grp d9/5 */</comment>

                <block pos:start="3109:17" pos:end="3175:17">{<block_content pos:start="3111:21" pos:end="3173:21">

                    <switch pos:start="3111:21" pos:end="3173:21">switch<condition pos:start="3111:27" pos:end="3111:30">(<expr pos:start="3111:28" pos:end="3111:29"><name pos:start="3111:28" pos:end="3111:29">rm</name></expr>)</condition> <block pos:start="3111:32" pos:end="3173:21">{<block_content pos:start="3113:21" pos:end="3171:40">

                    <case pos:start="3113:21" pos:end="3113:27">case <expr pos:start="3113:26" pos:end="3113:26"><literal type="number" pos:start="3113:26" pos:end="3113:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="3115:25" pos:end="3115:50"><expr pos:start="3115:25" pos:end="3115:49"><call pos:start="3115:25" pos:end="3115:49"><name pos:start="3115:25" pos:end="3115:40">gen_helper_fpush</name><argument_list pos:start="3115:41" pos:end="3115:49">(<argument pos:start="3115:42" pos:end="3115:48"><expr pos:start="3115:42" pos:end="3115:48"><name pos:start="3115:42" pos:end="3115:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3117:25" pos:end="3117:53"><expr pos:start="3117:25" pos:end="3117:52"><call pos:start="3117:25" pos:end="3117:52"><name pos:start="3117:25" pos:end="3117:43">gen_helper_fld1_ST0</name><argument_list pos:start="3117:44" pos:end="3117:52">(<argument pos:start="3117:45" pos:end="3117:51"><expr pos:start="3117:45" pos:end="3117:51"><name pos:start="3117:45" pos:end="3117:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3119:25" pos:end="3119:30">break;</break>

                    <case pos:start="3121:21" pos:end="3121:27">case <expr pos:start="3121:26" pos:end="3121:26"><literal type="number" pos:start="3121:26" pos:end="3121:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="3123:25" pos:end="3123:50"><expr pos:start="3123:25" pos:end="3123:49"><call pos:start="3123:25" pos:end="3123:49"><name pos:start="3123:25" pos:end="3123:40">gen_helper_fpush</name><argument_list pos:start="3123:41" pos:end="3123:49">(<argument pos:start="3123:42" pos:end="3123:48"><expr pos:start="3123:42" pos:end="3123:48"><name pos:start="3123:42" pos:end="3123:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3125:25" pos:end="3125:55"><expr pos:start="3125:25" pos:end="3125:54"><call pos:start="3125:25" pos:end="3125:54"><name pos:start="3125:25" pos:end="3125:45">gen_helper_fldl2t_ST0</name><argument_list pos:start="3125:46" pos:end="3125:54">(<argument pos:start="3125:47" pos:end="3125:53"><expr pos:start="3125:47" pos:end="3125:53"><name pos:start="3125:47" pos:end="3125:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3127:25" pos:end="3127:30">break;</break>

                    <case pos:start="3129:21" pos:end="3129:27">case <expr pos:start="3129:26" pos:end="3129:26"><literal type="number" pos:start="3129:26" pos:end="3129:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="3131:25" pos:end="3131:50"><expr pos:start="3131:25" pos:end="3131:49"><call pos:start="3131:25" pos:end="3131:49"><name pos:start="3131:25" pos:end="3131:40">gen_helper_fpush</name><argument_list pos:start="3131:41" pos:end="3131:49">(<argument pos:start="3131:42" pos:end="3131:48"><expr pos:start="3131:42" pos:end="3131:48"><name pos:start="3131:42" pos:end="3131:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3133:25" pos:end="3133:55"><expr pos:start="3133:25" pos:end="3133:54"><call pos:start="3133:25" pos:end="3133:54"><name pos:start="3133:25" pos:end="3133:45">gen_helper_fldl2e_ST0</name><argument_list pos:start="3133:46" pos:end="3133:54">(<argument pos:start="3133:47" pos:end="3133:53"><expr pos:start="3133:47" pos:end="3133:53"><name pos:start="3133:47" pos:end="3133:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3135:25" pos:end="3135:30">break;</break>

                    <case pos:start="3137:21" pos:end="3137:27">case <expr pos:start="3137:26" pos:end="3137:26"><literal type="number" pos:start="3137:26" pos:end="3137:26">3</literal></expr>:</case>

                        <expr_stmt pos:start="3139:25" pos:end="3139:50"><expr pos:start="3139:25" pos:end="3139:49"><call pos:start="3139:25" pos:end="3139:49"><name pos:start="3139:25" pos:end="3139:40">gen_helper_fpush</name><argument_list pos:start="3139:41" pos:end="3139:49">(<argument pos:start="3139:42" pos:end="3139:48"><expr pos:start="3139:42" pos:end="3139:48"><name pos:start="3139:42" pos:end="3139:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3141:25" pos:end="3141:54"><expr pos:start="3141:25" pos:end="3141:53"><call pos:start="3141:25" pos:end="3141:53"><name pos:start="3141:25" pos:end="3141:44">gen_helper_fldpi_ST0</name><argument_list pos:start="3141:45" pos:end="3141:53">(<argument pos:start="3141:46" pos:end="3141:52"><expr pos:start="3141:46" pos:end="3141:52"><name pos:start="3141:46" pos:end="3141:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3143:25" pos:end="3143:30">break;</break>

                    <case pos:start="3145:21" pos:end="3145:27">case <expr pos:start="3145:26" pos:end="3145:26"><literal type="number" pos:start="3145:26" pos:end="3145:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="3147:25" pos:end="3147:50"><expr pos:start="3147:25" pos:end="3147:49"><call pos:start="3147:25" pos:end="3147:49"><name pos:start="3147:25" pos:end="3147:40">gen_helper_fpush</name><argument_list pos:start="3147:41" pos:end="3147:49">(<argument pos:start="3147:42" pos:end="3147:48"><expr pos:start="3147:42" pos:end="3147:48"><name pos:start="3147:42" pos:end="3147:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3149:25" pos:end="3149:55"><expr pos:start="3149:25" pos:end="3149:54"><call pos:start="3149:25" pos:end="3149:54"><name pos:start="3149:25" pos:end="3149:45">gen_helper_fldlg2_ST0</name><argument_list pos:start="3149:46" pos:end="3149:54">(<argument pos:start="3149:47" pos:end="3149:53"><expr pos:start="3149:47" pos:end="3149:53"><name pos:start="3149:47" pos:end="3149:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3151:25" pos:end="3151:30">break;</break>

                    <case pos:start="3153:21" pos:end="3153:27">case <expr pos:start="3153:26" pos:end="3153:26"><literal type="number" pos:start="3153:26" pos:end="3153:26">5</literal></expr>:</case>

                        <expr_stmt pos:start="3155:25" pos:end="3155:50"><expr pos:start="3155:25" pos:end="3155:49"><call pos:start="3155:25" pos:end="3155:49"><name pos:start="3155:25" pos:end="3155:40">gen_helper_fpush</name><argument_list pos:start="3155:41" pos:end="3155:49">(<argument pos:start="3155:42" pos:end="3155:48"><expr pos:start="3155:42" pos:end="3155:48"><name pos:start="3155:42" pos:end="3155:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3157:25" pos:end="3157:55"><expr pos:start="3157:25" pos:end="3157:54"><call pos:start="3157:25" pos:end="3157:54"><name pos:start="3157:25" pos:end="3157:45">gen_helper_fldln2_ST0</name><argument_list pos:start="3157:46" pos:end="3157:54">(<argument pos:start="3157:47" pos:end="3157:53"><expr pos:start="3157:47" pos:end="3157:53"><name pos:start="3157:47" pos:end="3157:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3159:25" pos:end="3159:30">break;</break>

                    <case pos:start="3161:21" pos:end="3161:27">case <expr pos:start="3161:26" pos:end="3161:26"><literal type="number" pos:start="3161:26" pos:end="3161:26">6</literal></expr>:</case>

                        <expr_stmt pos:start="3163:25" pos:end="3163:50"><expr pos:start="3163:25" pos:end="3163:49"><call pos:start="3163:25" pos:end="3163:49"><name pos:start="3163:25" pos:end="3163:40">gen_helper_fpush</name><argument_list pos:start="3163:41" pos:end="3163:49">(<argument pos:start="3163:42" pos:end="3163:48"><expr pos:start="3163:42" pos:end="3163:48"><name pos:start="3163:42" pos:end="3163:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3165:25" pos:end="3165:53"><expr pos:start="3165:25" pos:end="3165:52"><call pos:start="3165:25" pos:end="3165:52"><name pos:start="3165:25" pos:end="3165:43">gen_helper_fldz_ST0</name><argument_list pos:start="3165:44" pos:end="3165:52">(<argument pos:start="3165:45" pos:end="3165:51"><expr pos:start="3165:45" pos:end="3165:51"><name pos:start="3165:45" pos:end="3165:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3167:25" pos:end="3167:30">break;</break>

                    <default pos:start="3169:21" pos:end="3169:28">default:</default>

                        <goto pos:start="3171:25" pos:end="3171:40">goto <name pos:start="3171:30" pos:end="3171:39">unknown_op</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block>

                <break pos:start="3177:17" pos:end="3177:22">break;</break>

            <case pos:start="3179:13" pos:end="3179:22">case <expr pos:start="3179:18" pos:end="3179:21"><literal type="number" pos:start="3179:18" pos:end="3179:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="3179:24" pos:end="3179:37">/* grp d9/6 */</comment>

                <switch pos:start="3181:17" pos:end="3233:17">switch<condition pos:start="3181:23" pos:end="3181:26">(<expr pos:start="3181:24" pos:end="3181:25"><name pos:start="3181:24" pos:end="3181:25">rm</name></expr>)</condition> <block pos:start="3181:28" pos:end="3233:17">{<block_content pos:start="3183:17" pos:end="3231:26">

                <case pos:start="3183:17" pos:end="3183:23">case <expr pos:start="3183:22" pos:end="3183:22"><literal type="number" pos:start="3183:22" pos:end="3183:22">0</literal></expr>:</case> <comment type="block" pos:start="3183:25" pos:end="3183:35">/* f2xm1 */</comment>

                    <expr_stmt pos:start="3185:21" pos:end="3185:46"><expr pos:start="3185:21" pos:end="3185:45"><call pos:start="3185:21" pos:end="3185:45"><name pos:start="3185:21" pos:end="3185:36">gen_helper_f2xm1</name><argument_list pos:start="3185:37" pos:end="3185:45">(<argument pos:start="3185:38" pos:end="3185:44"><expr pos:start="3185:38" pos:end="3185:44"><name pos:start="3185:38" pos:end="3185:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3187:21" pos:end="3187:26">break;</break>

                <case pos:start="3189:17" pos:end="3189:23">case <expr pos:start="3189:22" pos:end="3189:22"><literal type="number" pos:start="3189:22" pos:end="3189:22">1</literal></expr>:</case> <comment type="block" pos:start="3189:25" pos:end="3189:35">/* fyl2x */</comment>

                    <expr_stmt pos:start="3191:21" pos:end="3191:46"><expr pos:start="3191:21" pos:end="3191:45"><call pos:start="3191:21" pos:end="3191:45"><name pos:start="3191:21" pos:end="3191:36">gen_helper_fyl2x</name><argument_list pos:start="3191:37" pos:end="3191:45">(<argument pos:start="3191:38" pos:end="3191:44"><expr pos:start="3191:38" pos:end="3191:44"><name pos:start="3191:38" pos:end="3191:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3193:21" pos:end="3193:26">break;</break>

                <case pos:start="3195:17" pos:end="3195:23">case <expr pos:start="3195:22" pos:end="3195:22"><literal type="number" pos:start="3195:22" pos:end="3195:22">2</literal></expr>:</case> <comment type="block" pos:start="3195:25" pos:end="3195:35">/* fptan */</comment>

                    <expr_stmt pos:start="3197:21" pos:end="3197:46"><expr pos:start="3197:21" pos:end="3197:45"><call pos:start="3197:21" pos:end="3197:45"><name pos:start="3197:21" pos:end="3197:36">gen_helper_fptan</name><argument_list pos:start="3197:37" pos:end="3197:45">(<argument pos:start="3197:38" pos:end="3197:44"><expr pos:start="3197:38" pos:end="3197:44"><name pos:start="3197:38" pos:end="3197:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3199:21" pos:end="3199:26">break;</break>

                <case pos:start="3201:17" pos:end="3201:23">case <expr pos:start="3201:22" pos:end="3201:22"><literal type="number" pos:start="3201:22" pos:end="3201:22">3</literal></expr>:</case> <comment type="block" pos:start="3201:25" pos:end="3201:36">/* fpatan */</comment>

                    <expr_stmt pos:start="3203:21" pos:end="3203:47"><expr pos:start="3203:21" pos:end="3203:46"><call pos:start="3203:21" pos:end="3203:46"><name pos:start="3203:21" pos:end="3203:37">gen_helper_fpatan</name><argument_list pos:start="3203:38" pos:end="3203:46">(<argument pos:start="3203:39" pos:end="3203:45"><expr pos:start="3203:39" pos:end="3203:45"><name pos:start="3203:39" pos:end="3203:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3205:21" pos:end="3205:26">break;</break>

                <case pos:start="3207:17" pos:end="3207:23">case <expr pos:start="3207:22" pos:end="3207:22"><literal type="number" pos:start="3207:22" pos:end="3207:22">4</literal></expr>:</case> <comment type="block" pos:start="3207:25" pos:end="3207:37">/* fxtract */</comment>

                    <expr_stmt pos:start="3209:21" pos:end="3209:48"><expr pos:start="3209:21" pos:end="3209:47"><call pos:start="3209:21" pos:end="3209:47"><name pos:start="3209:21" pos:end="3209:38">gen_helper_fxtract</name><argument_list pos:start="3209:39" pos:end="3209:47">(<argument pos:start="3209:40" pos:end="3209:46"><expr pos:start="3209:40" pos:end="3209:46"><name pos:start="3209:40" pos:end="3209:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3211:21" pos:end="3211:26">break;</break>

                <case pos:start="3213:17" pos:end="3213:23">case <expr pos:start="3213:22" pos:end="3213:22"><literal type="number" pos:start="3213:22" pos:end="3213:22">5</literal></expr>:</case> <comment type="block" pos:start="3213:25" pos:end="3213:36">/* fprem1 */</comment>

                    <expr_stmt pos:start="3215:21" pos:end="3215:47"><expr pos:start="3215:21" pos:end="3215:46"><call pos:start="3215:21" pos:end="3215:46"><name pos:start="3215:21" pos:end="3215:37">gen_helper_fprem1</name><argument_list pos:start="3215:38" pos:end="3215:46">(<argument pos:start="3215:39" pos:end="3215:45"><expr pos:start="3215:39" pos:end="3215:45"><name pos:start="3215:39" pos:end="3215:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3217:21" pos:end="3217:26">break;</break>

                <case pos:start="3219:17" pos:end="3219:23">case <expr pos:start="3219:22" pos:end="3219:22"><literal type="number" pos:start="3219:22" pos:end="3219:22">6</literal></expr>:</case> <comment type="block" pos:start="3219:25" pos:end="3219:37">/* fdecstp */</comment>

                    <expr_stmt pos:start="3221:21" pos:end="3221:48"><expr pos:start="3221:21" pos:end="3221:47"><call pos:start="3221:21" pos:end="3221:47"><name pos:start="3221:21" pos:end="3221:38">gen_helper_fdecstp</name><argument_list pos:start="3221:39" pos:end="3221:47">(<argument pos:start="3221:40" pos:end="3221:46"><expr pos:start="3221:40" pos:end="3221:46"><name pos:start="3221:40" pos:end="3221:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3223:21" pos:end="3223:26">break;</break>

                <default pos:start="3225:17" pos:end="3225:24">default:</default>

                <case pos:start="3227:17" pos:end="3227:23">case <expr pos:start="3227:22" pos:end="3227:22"><literal type="number" pos:start="3227:22" pos:end="3227:22">7</literal></expr>:</case> <comment type="block" pos:start="3227:25" pos:end="3227:37">/* fincstp */</comment>

                    <expr_stmt pos:start="3229:21" pos:end="3229:48"><expr pos:start="3229:21" pos:end="3229:47"><call pos:start="3229:21" pos:end="3229:47"><name pos:start="3229:21" pos:end="3229:38">gen_helper_fincstp</name><argument_list pos:start="3229:39" pos:end="3229:47">(<argument pos:start="3229:40" pos:end="3229:46"><expr pos:start="3229:40" pos:end="3229:46"><name pos:start="3229:40" pos:end="3229:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3231:21" pos:end="3231:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3235:17" pos:end="3235:22">break;</break>

            <case pos:start="3237:13" pos:end="3237:22">case <expr pos:start="3237:18" pos:end="3237:21"><literal type="number" pos:start="3237:18" pos:end="3237:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="3237:24" pos:end="3237:37">/* grp d9/7 */</comment>

                <switch pos:start="3239:17" pos:end="3291:17">switch<condition pos:start="3239:23" pos:end="3239:26">(<expr pos:start="3239:24" pos:end="3239:25"><name pos:start="3239:24" pos:end="3239:25">rm</name></expr>)</condition> <block pos:start="3239:28" pos:end="3291:17">{<block_content pos:start="3241:17" pos:end="3289:26">

                <case pos:start="3241:17" pos:end="3241:23">case <expr pos:start="3241:22" pos:end="3241:22"><literal type="number" pos:start="3241:22" pos:end="3241:22">0</literal></expr>:</case> <comment type="block" pos:start="3241:25" pos:end="3241:35">/* fprem */</comment>

                    <expr_stmt pos:start="3243:21" pos:end="3243:46"><expr pos:start="3243:21" pos:end="3243:45"><call pos:start="3243:21" pos:end="3243:45"><name pos:start="3243:21" pos:end="3243:36">gen_helper_fprem</name><argument_list pos:start="3243:37" pos:end="3243:45">(<argument pos:start="3243:38" pos:end="3243:44"><expr pos:start="3243:38" pos:end="3243:44"><name pos:start="3243:38" pos:end="3243:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3245:21" pos:end="3245:26">break;</break>

                <case pos:start="3247:17" pos:end="3247:23">case <expr pos:start="3247:22" pos:end="3247:22"><literal type="number" pos:start="3247:22" pos:end="3247:22">1</literal></expr>:</case> <comment type="block" pos:start="3247:25" pos:end="3247:37">/* fyl2xp1 */</comment>

                    <expr_stmt pos:start="3249:21" pos:end="3249:48"><expr pos:start="3249:21" pos:end="3249:47"><call pos:start="3249:21" pos:end="3249:47"><name pos:start="3249:21" pos:end="3249:38">gen_helper_fyl2xp1</name><argument_list pos:start="3249:39" pos:end="3249:47">(<argument pos:start="3249:40" pos:end="3249:46"><expr pos:start="3249:40" pos:end="3249:46"><name pos:start="3249:40" pos:end="3249:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3251:21" pos:end="3251:26">break;</break>

                <case pos:start="3253:17" pos:end="3253:23">case <expr pos:start="3253:22" pos:end="3253:22"><literal type="number" pos:start="3253:22" pos:end="3253:22">2</literal></expr>:</case> <comment type="block" pos:start="3253:25" pos:end="3253:35">/* fsqrt */</comment>

                    <expr_stmt pos:start="3255:21" pos:end="3255:46"><expr pos:start="3255:21" pos:end="3255:45"><call pos:start="3255:21" pos:end="3255:45"><name pos:start="3255:21" pos:end="3255:36">gen_helper_fsqrt</name><argument_list pos:start="3255:37" pos:end="3255:45">(<argument pos:start="3255:38" pos:end="3255:44"><expr pos:start="3255:38" pos:end="3255:44"><name pos:start="3255:38" pos:end="3255:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3257:21" pos:end="3257:26">break;</break>

                <case pos:start="3259:17" pos:end="3259:23">case <expr pos:start="3259:22" pos:end="3259:22"><literal type="number" pos:start="3259:22" pos:end="3259:22">3</literal></expr>:</case> <comment type="block" pos:start="3259:25" pos:end="3259:37">/* fsincos */</comment>

                    <expr_stmt pos:start="3261:21" pos:end="3261:48"><expr pos:start="3261:21" pos:end="3261:47"><call pos:start="3261:21" pos:end="3261:47"><name pos:start="3261:21" pos:end="3261:38">gen_helper_fsincos</name><argument_list pos:start="3261:39" pos:end="3261:47">(<argument pos:start="3261:40" pos:end="3261:46"><expr pos:start="3261:40" pos:end="3261:46"><name pos:start="3261:40" pos:end="3261:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3263:21" pos:end="3263:26">break;</break>

                <case pos:start="3265:17" pos:end="3265:23">case <expr pos:start="3265:22" pos:end="3265:22"><literal type="number" pos:start="3265:22" pos:end="3265:22">5</literal></expr>:</case> <comment type="block" pos:start="3265:25" pos:end="3265:36">/* fscale */</comment>

                    <expr_stmt pos:start="3267:21" pos:end="3267:47"><expr pos:start="3267:21" pos:end="3267:46"><call pos:start="3267:21" pos:end="3267:46"><name pos:start="3267:21" pos:end="3267:37">gen_helper_fscale</name><argument_list pos:start="3267:38" pos:end="3267:46">(<argument pos:start="3267:39" pos:end="3267:45"><expr pos:start="3267:39" pos:end="3267:45"><name pos:start="3267:39" pos:end="3267:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3269:21" pos:end="3269:26">break;</break>

                <case pos:start="3271:17" pos:end="3271:23">case <expr pos:start="3271:22" pos:end="3271:22"><literal type="number" pos:start="3271:22" pos:end="3271:22">4</literal></expr>:</case> <comment type="block" pos:start="3271:25" pos:end="3271:37">/* frndint */</comment>

                    <expr_stmt pos:start="3273:21" pos:end="3273:48"><expr pos:start="3273:21" pos:end="3273:47"><call pos:start="3273:21" pos:end="3273:47"><name pos:start="3273:21" pos:end="3273:38">gen_helper_frndint</name><argument_list pos:start="3273:39" pos:end="3273:47">(<argument pos:start="3273:40" pos:end="3273:46"><expr pos:start="3273:40" pos:end="3273:46"><name pos:start="3273:40" pos:end="3273:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3275:21" pos:end="3275:26">break;</break>

                <case pos:start="3277:17" pos:end="3277:23">case <expr pos:start="3277:22" pos:end="3277:22"><literal type="number" pos:start="3277:22" pos:end="3277:22">6</literal></expr>:</case> <comment type="block" pos:start="3277:25" pos:end="3277:34">/* fsin */</comment>

                    <expr_stmt pos:start="3279:21" pos:end="3279:45"><expr pos:start="3279:21" pos:end="3279:44"><call pos:start="3279:21" pos:end="3279:44"><name pos:start="3279:21" pos:end="3279:35">gen_helper_fsin</name><argument_list pos:start="3279:36" pos:end="3279:44">(<argument pos:start="3279:37" pos:end="3279:43"><expr pos:start="3279:37" pos:end="3279:43"><name pos:start="3279:37" pos:end="3279:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3281:21" pos:end="3281:26">break;</break>

                <default pos:start="3283:17" pos:end="3283:24">default:</default>

                <case pos:start="3285:17" pos:end="3285:23">case <expr pos:start="3285:22" pos:end="3285:22"><literal type="number" pos:start="3285:22" pos:end="3285:22">7</literal></expr>:</case> <comment type="block" pos:start="3285:25" pos:end="3285:34">/* fcos */</comment>

                    <expr_stmt pos:start="3287:21" pos:end="3287:45"><expr pos:start="3287:21" pos:end="3287:44"><call pos:start="3287:21" pos:end="3287:44"><name pos:start="3287:21" pos:end="3287:35">gen_helper_fcos</name><argument_list pos:start="3287:36" pos:end="3287:44">(<argument pos:start="3287:37" pos:end="3287:43"><expr pos:start="3287:37" pos:end="3287:43"><name pos:start="3287:37" pos:end="3287:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3289:21" pos:end="3289:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3293:17" pos:end="3293:22">break;</break>

            <case pos:start="3295:13" pos:end="3295:22">case <expr pos:start="3295:18" pos:end="3295:21"><literal type="number" pos:start="3295:18" pos:end="3295:21">0x00</literal></expr>:</case> <case pos:start="3295:24" pos:end="3295:33">case <expr pos:start="3295:29" pos:end="3295:32"><literal type="number" pos:start="3295:29" pos:end="3295:32">0x01</literal></expr>:</case> <case pos:start="3295:35" pos:end="3295:53">case <expr pos:start="3295:40" pos:end="3295:52"><literal type="number" pos:start="3295:40" pos:end="3295:43">0x04</literal> <operator pos:start="3295:45" pos:end="3295:47">...</operator> <literal type="number" pos:start="3295:49" pos:end="3295:52">0x07</literal></expr>:</case> <comment type="block" pos:start="3295:55" pos:end="3295:72">/* fxxx st, sti */</comment>

            <case pos:start="3297:13" pos:end="3297:22">case <expr pos:start="3297:18" pos:end="3297:21"><literal type="number" pos:start="3297:18" pos:end="3297:21">0x20</literal></expr>:</case> <case pos:start="3297:24" pos:end="3297:33">case <expr pos:start="3297:29" pos:end="3297:32"><literal type="number" pos:start="3297:29" pos:end="3297:32">0x21</literal></expr>:</case> <case pos:start="3297:35" pos:end="3297:53">case <expr pos:start="3297:40" pos:end="3297:52"><literal type="number" pos:start="3297:40" pos:end="3297:43">0x24</literal> <operator pos:start="3297:45" pos:end="3297:47">...</operator> <literal type="number" pos:start="3297:49" pos:end="3297:52">0x27</literal></expr>:</case> <comment type="block" pos:start="3297:55" pos:end="3297:72">/* fxxx sti, st */</comment>

            <case pos:start="3299:13" pos:end="3299:22">case <expr pos:start="3299:18" pos:end="3299:21"><literal type="number" pos:start="3299:18" pos:end="3299:21">0x30</literal></expr>:</case> <case pos:start="3299:24" pos:end="3299:33">case <expr pos:start="3299:29" pos:end="3299:32"><literal type="number" pos:start="3299:29" pos:end="3299:32">0x31</literal></expr>:</case> <case pos:start="3299:35" pos:end="3299:53">case <expr pos:start="3299:40" pos:end="3299:52"><literal type="number" pos:start="3299:40" pos:end="3299:43">0x34</literal> <operator pos:start="3299:45" pos:end="3299:47">...</operator> <literal type="number" pos:start="3299:49" pos:end="3299:52">0x37</literal></expr>:</case> <comment type="block" pos:start="3299:55" pos:end="3299:73">/* fxxxp sti, st */</comment>

                <block pos:start="3301:17" pos:end="3325:17">{<block_content pos:start="3303:21" pos:end="3323:21">

                    <decl_stmt pos:start="3303:21" pos:end="3303:28"><decl pos:start="3303:21" pos:end="3303:27"><type pos:start="3303:21" pos:end="3303:23"><name pos:start="3303:21" pos:end="3303:23">int</name></type> <name pos:start="3303:25" pos:end="3303:27">op1</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="3307:21" pos:end="3307:33"><expr pos:start="3307:21" pos:end="3307:32"><name pos:start="3307:21" pos:end="3307:23">op1</name> <operator pos:start="3307:25" pos:end="3307:25">=</operator> <name pos:start="3307:27" pos:end="3307:28">op</name> <operator pos:start="3307:30" pos:end="3307:30">&amp;</operator> <literal type="number" pos:start="3307:32" pos:end="3307:32">7</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="3309:21" pos:end="3323:21"><if pos:start="3309:21" pos:end="3317:21">if <condition pos:start="3309:24" pos:end="3309:35">(<expr pos:start="3309:25" pos:end="3309:34"><name pos:start="3309:25" pos:end="3309:26">op</name> <operator pos:start="3309:28" pos:end="3309:29">&gt;=</operator> <literal type="number" pos:start="3309:31" pos:end="3309:34">0x20</literal></expr>)</condition> <block pos:start="3309:37" pos:end="3317:21">{<block_content pos:start="3311:25" pos:end="3315:53">

                        <expr_stmt pos:start="3311:25" pos:end="3311:64"><expr pos:start="3311:25" pos:end="3311:63"><call pos:start="3311:25" pos:end="3311:63"><name pos:start="3311:25" pos:end="3311:51">gen_helper_fp_arith_STN_ST0</name><argument_list pos:start="3311:52" pos:end="3311:63">(<argument pos:start="3311:53" pos:end="3311:55"><expr pos:start="3311:53" pos:end="3311:55"><name pos:start="3311:53" pos:end="3311:55">op1</name></expr></argument>, <argument pos:start="3311:58" pos:end="3311:62"><expr pos:start="3311:58" pos:end="3311:62"><name pos:start="3311:58" pos:end="3311:62">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="3313:25" pos:end="3315:53"><if pos:start="3313:25" pos:end="3315:53">if <condition pos:start="3313:28" pos:end="3313:39">(<expr pos:start="3313:29" pos:end="3313:38"><name pos:start="3313:29" pos:end="3313:30">op</name> <operator pos:start="3313:32" pos:end="3313:33">&gt;=</operator> <literal type="number" pos:start="3313:35" pos:end="3313:38">0x30</literal></expr>)</condition><block type="pseudo" pos:start="3315:29" pos:end="3315:53"><block_content pos:start="3315:29" pos:end="3315:53">

                            <expr_stmt pos:start="3315:29" pos:end="3315:53"><expr pos:start="3315:29" pos:end="3315:52"><call pos:start="3315:29" pos:end="3315:52"><name pos:start="3315:29" pos:end="3315:43">gen_helper_fpop</name><argument_list pos:start="3315:44" pos:end="3315:52">(<argument pos:start="3315:45" pos:end="3315:51"><expr pos:start="3315:45" pos:end="3315:51"><name pos:start="3315:45" pos:end="3315:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="3317:23" pos:end="3323:21">else <block pos:start="3317:28" pos:end="3323:21">{<block_content pos:start="3319:25" pos:end="3321:57">

                        <expr_stmt pos:start="3319:25" pos:end="3319:79"><expr pos:start="3319:25" pos:end="3319:78"><call pos:start="3319:25" pos:end="3319:78"><name pos:start="3319:25" pos:end="3319:47">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3319:48" pos:end="3319:78">(<argument pos:start="3319:49" pos:end="3319:55"><expr pos:start="3319:49" pos:end="3319:55"><name pos:start="3319:49" pos:end="3319:55">cpu_env</name></expr></argument>, <argument pos:start="3319:58" pos:end="3319:77"><expr pos:start="3319:58" pos:end="3319:77"><call pos:start="3319:58" pos:end="3319:77"><name pos:start="3319:58" pos:end="3319:70">tcg_const_i32</name><argument_list pos:start="3319:71" pos:end="3319:77">(<argument pos:start="3319:72" pos:end="3319:76"><expr pos:start="3319:72" pos:end="3319:76"><name pos:start="3319:72" pos:end="3319:76">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3321:25" pos:end="3321:57"><expr pos:start="3321:25" pos:end="3321:56"><call pos:start="3321:25" pos:end="3321:56"><name pos:start="3321:25" pos:end="3321:51">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="3321:52" pos:end="3321:56">(<argument pos:start="3321:53" pos:end="3321:55"><expr pos:start="3321:53" pos:end="3321:55"><name pos:start="3321:53" pos:end="3321:55">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="3327:17" pos:end="3327:22">break;</break>

            <case pos:start="3329:13" pos:end="3329:22">case <expr pos:start="3329:18" pos:end="3329:21"><literal type="number" pos:start="3329:18" pos:end="3329:21">0x02</literal></expr>:</case> <comment type="block" pos:start="3329:24" pos:end="3329:33">/* fcom */</comment>

            <case pos:start="3331:13" pos:end="3331:22">case <expr pos:start="3331:18" pos:end="3331:21"><literal type="number" pos:start="3331:18" pos:end="3331:21">0x22</literal></expr>:</case> <comment type="block" pos:start="3331:24" pos:end="3331:51">/* fcom2, undocumented op */</comment>

                <expr_stmt pos:start="3333:17" pos:end="3333:71"><expr pos:start="3333:17" pos:end="3333:70"><call pos:start="3333:17" pos:end="3333:70"><name pos:start="3333:17" pos:end="3333:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3333:40" pos:end="3333:70">(<argument pos:start="3333:41" pos:end="3333:47"><expr pos:start="3333:41" pos:end="3333:47"><name pos:start="3333:41" pos:end="3333:47">cpu_env</name></expr></argument>, <argument pos:start="3333:50" pos:end="3333:69"><expr pos:start="3333:50" pos:end="3333:69"><call pos:start="3333:50" pos:end="3333:69"><name pos:start="3333:50" pos:end="3333:62">tcg_const_i32</name><argument_list pos:start="3333:63" pos:end="3333:69">(<argument pos:start="3333:64" pos:end="3333:68"><expr pos:start="3333:64" pos:end="3333:68"><name pos:start="3333:64" pos:end="3333:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3335:17" pos:end="3335:49"><expr pos:start="3335:17" pos:end="3335:48"><call pos:start="3335:17" pos:end="3335:48"><name pos:start="3335:17" pos:end="3335:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3335:40" pos:end="3335:48">(<argument pos:start="3335:41" pos:end="3335:47"><expr pos:start="3335:41" pos:end="3335:47"><name pos:start="3335:41" pos:end="3335:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3337:17" pos:end="3337:22">break;</break>

            <case pos:start="3339:13" pos:end="3339:22">case <expr pos:start="3339:18" pos:end="3339:21"><literal type="number" pos:start="3339:18" pos:end="3339:21">0x03</literal></expr>:</case> <comment type="block" pos:start="3339:24" pos:end="3339:34">/* fcomp */</comment>

            <case pos:start="3341:13" pos:end="3341:22">case <expr pos:start="3341:18" pos:end="3341:21"><literal type="number" pos:start="3341:18" pos:end="3341:21">0x23</literal></expr>:</case> <comment type="block" pos:start="3341:24" pos:end="3341:52">/* fcomp3, undocumented op */</comment>

            <case pos:start="3343:13" pos:end="3343:22">case <expr pos:start="3343:18" pos:end="3343:21"><literal type="number" pos:start="3343:18" pos:end="3343:21">0x32</literal></expr>:</case> <comment type="block" pos:start="3343:24" pos:end="3343:52">/* fcomp5, undocumented op */</comment>

                <expr_stmt pos:start="3345:17" pos:end="3345:71"><expr pos:start="3345:17" pos:end="3345:70"><call pos:start="3345:17" pos:end="3345:70"><name pos:start="3345:17" pos:end="3345:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3345:40" pos:end="3345:70">(<argument pos:start="3345:41" pos:end="3345:47"><expr pos:start="3345:41" pos:end="3345:47"><name pos:start="3345:41" pos:end="3345:47">cpu_env</name></expr></argument>, <argument pos:start="3345:50" pos:end="3345:69"><expr pos:start="3345:50" pos:end="3345:69"><call pos:start="3345:50" pos:end="3345:69"><name pos:start="3345:50" pos:end="3345:62">tcg_const_i32</name><argument_list pos:start="3345:63" pos:end="3345:69">(<argument pos:start="3345:64" pos:end="3345:68"><expr pos:start="3345:64" pos:end="3345:68"><name pos:start="3345:64" pos:end="3345:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3347:17" pos:end="3347:49"><expr pos:start="3347:17" pos:end="3347:48"><call pos:start="3347:17" pos:end="3347:48"><name pos:start="3347:17" pos:end="3347:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3347:40" pos:end="3347:48">(<argument pos:start="3347:41" pos:end="3347:47"><expr pos:start="3347:41" pos:end="3347:47"><name pos:start="3347:41" pos:end="3347:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3349:17" pos:end="3349:41"><expr pos:start="3349:17" pos:end="3349:40"><call pos:start="3349:17" pos:end="3349:40"><name pos:start="3349:17" pos:end="3349:31">gen_helper_fpop</name><argument_list pos:start="3349:32" pos:end="3349:40">(<argument pos:start="3349:33" pos:end="3349:39"><expr pos:start="3349:33" pos:end="3349:39"><name pos:start="3349:33" pos:end="3349:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3351:17" pos:end="3351:22">break;</break>

            <case pos:start="3353:13" pos:end="3353:22">case <expr pos:start="3353:18" pos:end="3353:21"><literal type="number" pos:start="3353:18" pos:end="3353:21">0x15</literal></expr>:</case> <comment type="block" pos:start="3353:24" pos:end="3353:33">/* da/5 */</comment>

                <switch pos:start="3355:17" pos:end="3373:17">switch<condition pos:start="3355:23" pos:end="3355:26">(<expr pos:start="3355:24" pos:end="3355:25"><name pos:start="3355:24" pos:end="3355:25">rm</name></expr>)</condition> <block pos:start="3355:28" pos:end="3373:17">{<block_content pos:start="3357:17" pos:end="3371:36">

                <case pos:start="3357:17" pos:end="3357:23">case <expr pos:start="3357:22" pos:end="3357:22"><literal type="number" pos:start="3357:22" pos:end="3357:22">1</literal></expr>:</case> <comment type="block" pos:start="3357:25" pos:end="3357:37">/* fucompp */</comment>

                    <expr_stmt pos:start="3359:21" pos:end="3359:71"><expr pos:start="3359:21" pos:end="3359:70"><call pos:start="3359:21" pos:end="3359:70"><name pos:start="3359:21" pos:end="3359:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3359:44" pos:end="3359:70">(<argument pos:start="3359:45" pos:end="3359:51"><expr pos:start="3359:45" pos:end="3359:51"><name pos:start="3359:45" pos:end="3359:51">cpu_env</name></expr></argument>, <argument pos:start="3359:54" pos:end="3359:69"><expr pos:start="3359:54" pos:end="3359:69"><call pos:start="3359:54" pos:end="3359:69"><name pos:start="3359:54" pos:end="3359:66">tcg_const_i32</name><argument_list pos:start="3359:67" pos:end="3359:69">(<argument pos:start="3359:68" pos:end="3359:68"><expr pos:start="3359:68" pos:end="3359:68"><literal type="number" pos:start="3359:68" pos:end="3359:68">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3361:21" pos:end="3361:54"><expr pos:start="3361:21" pos:end="3361:53"><call pos:start="3361:21" pos:end="3361:53"><name pos:start="3361:21" pos:end="3361:44">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3361:45" pos:end="3361:53">(<argument pos:start="3361:46" pos:end="3361:52"><expr pos:start="3361:46" pos:end="3361:52"><name pos:start="3361:46" pos:end="3361:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3363:21" pos:end="3363:45"><expr pos:start="3363:21" pos:end="3363:44"><call pos:start="3363:21" pos:end="3363:44"><name pos:start="3363:21" pos:end="3363:35">gen_helper_fpop</name><argument_list pos:start="3363:36" pos:end="3363:44">(<argument pos:start="3363:37" pos:end="3363:43"><expr pos:start="3363:37" pos:end="3363:43"><name pos:start="3363:37" pos:end="3363:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3365:21" pos:end="3365:45"><expr pos:start="3365:21" pos:end="3365:44"><call pos:start="3365:21" pos:end="3365:44"><name pos:start="3365:21" pos:end="3365:35">gen_helper_fpop</name><argument_list pos:start="3365:36" pos:end="3365:44">(<argument pos:start="3365:37" pos:end="3365:43"><expr pos:start="3365:37" pos:end="3365:43"><name pos:start="3365:37" pos:end="3365:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3367:21" pos:end="3367:26">break;</break>

                <default pos:start="3369:17" pos:end="3369:24">default:</default>

                    <goto pos:start="3371:21" pos:end="3371:36">goto <name pos:start="3371:26" pos:end="3371:35">unknown_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3375:17" pos:end="3375:22">break;</break>

            <case pos:start="3377:13" pos:end="3377:22">case <expr pos:start="3377:18" pos:end="3377:21"><literal type="number" pos:start="3377:18" pos:end="3377:21">0x1c</literal></expr>:</case>

                <switch pos:start="3379:17" pos:end="3409:17">switch<condition pos:start="3379:23" pos:end="3379:26">(<expr pos:start="3379:24" pos:end="3379:25"><name pos:start="3379:24" pos:end="3379:25">rm</name></expr>)</condition> <block pos:start="3379:28" pos:end="3409:17">{<block_content pos:start="3381:17" pos:end="3407:36">

                <case pos:start="3381:17" pos:end="3381:23">case <expr pos:start="3381:22" pos:end="3381:22"><literal type="number" pos:start="3381:22" pos:end="3381:22">0</literal></expr>:</case> <comment type="block" pos:start="3381:25" pos:end="3381:63">/* feni (287 only, just do nop here) */</comment>

                    <break pos:start="3383:21" pos:end="3383:26">break;</break>

                <case pos:start="3385:17" pos:end="3385:23">case <expr pos:start="3385:22" pos:end="3385:22"><literal type="number" pos:start="3385:22" pos:end="3385:22">1</literal></expr>:</case> <comment type="block" pos:start="3385:25" pos:end="3385:64">/* fdisi (287 only, just do nop here) */</comment>

                    <break pos:start="3387:21" pos:end="3387:26">break;</break>

                <case pos:start="3389:17" pos:end="3389:23">case <expr pos:start="3389:22" pos:end="3389:22"><literal type="number" pos:start="3389:22" pos:end="3389:22">2</literal></expr>:</case> <comment type="block" pos:start="3389:25" pos:end="3389:35">/* fclex */</comment>

                    <expr_stmt pos:start="3391:21" pos:end="3391:46"><expr pos:start="3391:21" pos:end="3391:45"><call pos:start="3391:21" pos:end="3391:45"><name pos:start="3391:21" pos:end="3391:36">gen_helper_fclex</name><argument_list pos:start="3391:37" pos:end="3391:45">(<argument pos:start="3391:38" pos:end="3391:44"><expr pos:start="3391:38" pos:end="3391:44"><name pos:start="3391:38" pos:end="3391:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3393:21" pos:end="3393:26">break;</break>

                <case pos:start="3395:17" pos:end="3395:23">case <expr pos:start="3395:22" pos:end="3395:22"><literal type="number" pos:start="3395:22" pos:end="3395:22">3</literal></expr>:</case> <comment type="block" pos:start="3395:25" pos:end="3395:36">/* fninit */</comment>

                    <expr_stmt pos:start="3397:21" pos:end="3397:47"><expr pos:start="3397:21" pos:end="3397:46"><call pos:start="3397:21" pos:end="3397:46"><name pos:start="3397:21" pos:end="3397:37">gen_helper_fninit</name><argument_list pos:start="3397:38" pos:end="3397:46">(<argument pos:start="3397:39" pos:end="3397:45"><expr pos:start="3397:39" pos:end="3397:45"><name pos:start="3397:39" pos:end="3397:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3399:21" pos:end="3399:26">break;</break>

                <case pos:start="3401:17" pos:end="3401:23">case <expr pos:start="3401:22" pos:end="3401:22"><literal type="number" pos:start="3401:22" pos:end="3401:22">4</literal></expr>:</case> <comment type="block" pos:start="3401:25" pos:end="3401:65">/* fsetpm (287 only, just do nop here) */</comment>

                    <break pos:start="3403:21" pos:end="3403:26">break;</break>

                <default pos:start="3405:17" pos:end="3405:24">default:</default>

                    <goto pos:start="3407:21" pos:end="3407:36">goto <name pos:start="3407:26" pos:end="3407:35">unknown_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3411:17" pos:end="3411:22">break;</break>

            <case pos:start="3413:13" pos:end="3413:22">case <expr pos:start="3413:18" pos:end="3413:21"><literal type="number" pos:start="3413:18" pos:end="3413:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="3413:24" pos:end="3413:35">/* fucomi */</comment>

                <if_stmt pos:start="3415:17" pos:end="3419:17"><if pos:start="3415:17" pos:end="3419:17">if <condition pos:start="3415:20" pos:end="3415:54">(<expr pos:start="3415:21" pos:end="3415:53"><operator pos:start="3415:21" pos:end="3415:21">!</operator><operator pos:start="3415:22" pos:end="3415:22">(</operator><name pos:start="3415:23" pos:end="3415:39"><name pos:start="3415:23" pos:end="3415:23">s</name><operator pos:start="3415:24" pos:end="3415:25">-&gt;</operator><name pos:start="3415:26" pos:end="3415:39">cpuid_features</name></name> <operator pos:start="3415:41" pos:end="3415:41">&amp;</operator> <name pos:start="3415:43" pos:end="3415:52">CPUID_CMOV</name><operator pos:start="3415:53" pos:end="3415:53">)</operator></expr>)</condition> <block pos:start="3415:56" pos:end="3419:17">{<block_content pos:start="3417:21" pos:end="3417:36">

                    <goto pos:start="3417:21" pos:end="3417:36">goto <name pos:start="3417:26" pos:end="3417:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="3421:17" pos:end="3421:36"><expr pos:start="3421:17" pos:end="3421:35"><call pos:start="3421:17" pos:end="3421:35"><name pos:start="3421:17" pos:end="3421:32">gen_update_cc_op</name><argument_list pos:start="3421:33" pos:end="3421:35">(<argument pos:start="3421:34" pos:end="3421:34"><expr pos:start="3421:34" pos:end="3421:34"><name pos:start="3421:34" pos:end="3421:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3423:17" pos:end="3423:71"><expr pos:start="3423:17" pos:end="3423:70"><call pos:start="3423:17" pos:end="3423:70"><name pos:start="3423:17" pos:end="3423:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3423:40" pos:end="3423:70">(<argument pos:start="3423:41" pos:end="3423:47"><expr pos:start="3423:41" pos:end="3423:47"><name pos:start="3423:41" pos:end="3423:47">cpu_env</name></expr></argument>, <argument pos:start="3423:50" pos:end="3423:69"><expr pos:start="3423:50" pos:end="3423:69"><call pos:start="3423:50" pos:end="3423:69"><name pos:start="3423:50" pos:end="3423:62">tcg_const_i32</name><argument_list pos:start="3423:63" pos:end="3423:69">(<argument pos:start="3423:64" pos:end="3423:68"><expr pos:start="3423:64" pos:end="3423:68"><name pos:start="3423:64" pos:end="3423:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3425:17" pos:end="3425:51"><expr pos:start="3425:17" pos:end="3425:50"><call pos:start="3425:17" pos:end="3425:50"><name pos:start="3425:17" pos:end="3425:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="3425:42" pos:end="3425:50">(<argument pos:start="3425:43" pos:end="3425:49"><expr pos:start="3425:43" pos:end="3425:49"><name pos:start="3425:43" pos:end="3425:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3427:17" pos:end="3427:43"><expr pos:start="3427:17" pos:end="3427:42"><call pos:start="3427:17" pos:end="3427:42"><name pos:start="3427:17" pos:end="3427:25">set_cc_op</name><argument_list pos:start="3427:26" pos:end="3427:42">(<argument pos:start="3427:27" pos:end="3427:27"><expr pos:start="3427:27" pos:end="3427:27"><name pos:start="3427:27" pos:end="3427:27">s</name></expr></argument>, <argument pos:start="3427:30" pos:end="3427:41"><expr pos:start="3427:30" pos:end="3427:41"><name pos:start="3427:30" pos:end="3427:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3429:17" pos:end="3429:22">break;</break>

            <case pos:start="3431:13" pos:end="3431:22">case <expr pos:start="3431:18" pos:end="3431:21"><literal type="number" pos:start="3431:18" pos:end="3431:21">0x1e</literal></expr>:</case> <comment type="block" pos:start="3431:24" pos:end="3431:34">/* fcomi */</comment>

                <if_stmt pos:start="3433:17" pos:end="3437:17"><if pos:start="3433:17" pos:end="3437:17">if <condition pos:start="3433:20" pos:end="3433:54">(<expr pos:start="3433:21" pos:end="3433:53"><operator pos:start="3433:21" pos:end="3433:21">!</operator><operator pos:start="3433:22" pos:end="3433:22">(</operator><name pos:start="3433:23" pos:end="3433:39"><name pos:start="3433:23" pos:end="3433:23">s</name><operator pos:start="3433:24" pos:end="3433:25">-&gt;</operator><name pos:start="3433:26" pos:end="3433:39">cpuid_features</name></name> <operator pos:start="3433:41" pos:end="3433:41">&amp;</operator> <name pos:start="3433:43" pos:end="3433:52">CPUID_CMOV</name><operator pos:start="3433:53" pos:end="3433:53">)</operator></expr>)</condition> <block pos:start="3433:56" pos:end="3437:17">{<block_content pos:start="3435:21" pos:end="3435:36">

                    <goto pos:start="3435:21" pos:end="3435:36">goto <name pos:start="3435:26" pos:end="3435:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="3439:17" pos:end="3439:36"><expr pos:start="3439:17" pos:end="3439:35"><call pos:start="3439:17" pos:end="3439:35"><name pos:start="3439:17" pos:end="3439:32">gen_update_cc_op</name><argument_list pos:start="3439:33" pos:end="3439:35">(<argument pos:start="3439:34" pos:end="3439:34"><expr pos:start="3439:34" pos:end="3439:34"><name pos:start="3439:34" pos:end="3439:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3441:17" pos:end="3441:71"><expr pos:start="3441:17" pos:end="3441:70"><call pos:start="3441:17" pos:end="3441:70"><name pos:start="3441:17" pos:end="3441:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3441:40" pos:end="3441:70">(<argument pos:start="3441:41" pos:end="3441:47"><expr pos:start="3441:41" pos:end="3441:47"><name pos:start="3441:41" pos:end="3441:47">cpu_env</name></expr></argument>, <argument pos:start="3441:50" pos:end="3441:69"><expr pos:start="3441:50" pos:end="3441:69"><call pos:start="3441:50" pos:end="3441:69"><name pos:start="3441:50" pos:end="3441:62">tcg_const_i32</name><argument_list pos:start="3441:63" pos:end="3441:69">(<argument pos:start="3441:64" pos:end="3441:68"><expr pos:start="3441:64" pos:end="3441:68"><name pos:start="3441:64" pos:end="3441:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3443:17" pos:end="3443:50"><expr pos:start="3443:17" pos:end="3443:49"><call pos:start="3443:17" pos:end="3443:49"><name pos:start="3443:17" pos:end="3443:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="3443:41" pos:end="3443:49">(<argument pos:start="3443:42" pos:end="3443:48"><expr pos:start="3443:42" pos:end="3443:48"><name pos:start="3443:42" pos:end="3443:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3445:17" pos:end="3445:43"><expr pos:start="3445:17" pos:end="3445:42"><call pos:start="3445:17" pos:end="3445:42"><name pos:start="3445:17" pos:end="3445:25">set_cc_op</name><argument_list pos:start="3445:26" pos:end="3445:42">(<argument pos:start="3445:27" pos:end="3445:27"><expr pos:start="3445:27" pos:end="3445:27"><name pos:start="3445:27" pos:end="3445:27">s</name></expr></argument>, <argument pos:start="3445:30" pos:end="3445:41"><expr pos:start="3445:30" pos:end="3445:41"><name pos:start="3445:30" pos:end="3445:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3447:17" pos:end="3447:22">break;</break>

            <case pos:start="3449:13" pos:end="3449:22">case <expr pos:start="3449:18" pos:end="3449:21"><literal type="number" pos:start="3449:18" pos:end="3449:21">0x28</literal></expr>:</case> <comment type="block" pos:start="3449:24" pos:end="3449:38">/* ffree sti */</comment>

                <expr_stmt pos:start="3451:17" pos:end="3451:68"><expr pos:start="3451:17" pos:end="3451:67"><call pos:start="3451:17" pos:end="3451:67"><name pos:start="3451:17" pos:end="3451:36">gen_helper_ffree_STN</name><argument_list pos:start="3451:37" pos:end="3451:67">(<argument pos:start="3451:38" pos:end="3451:44"><expr pos:start="3451:38" pos:end="3451:44"><name pos:start="3451:38" pos:end="3451:44">cpu_env</name></expr></argument>, <argument pos:start="3451:47" pos:end="3451:66"><expr pos:start="3451:47" pos:end="3451:66"><call pos:start="3451:47" pos:end="3451:66"><name pos:start="3451:47" pos:end="3451:59">tcg_const_i32</name><argument_list pos:start="3451:60" pos:end="3451:66">(<argument pos:start="3451:61" pos:end="3451:65"><expr pos:start="3451:61" pos:end="3451:65"><name pos:start="3451:61" pos:end="3451:65">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3453:17" pos:end="3453:22">break;</break>

            <case pos:start="3455:13" pos:end="3455:22">case <expr pos:start="3455:18" pos:end="3455:21"><literal type="number" pos:start="3455:18" pos:end="3455:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="3455:24" pos:end="3455:36">/* fst sti */</comment>

                <expr_stmt pos:start="3457:17" pos:end="3457:71"><expr pos:start="3457:17" pos:end="3457:70"><call pos:start="3457:17" pos:end="3457:70"><name pos:start="3457:17" pos:end="3457:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="3457:40" pos:end="3457:70">(<argument pos:start="3457:41" pos:end="3457:47"><expr pos:start="3457:41" pos:end="3457:47"><name pos:start="3457:41" pos:end="3457:47">cpu_env</name></expr></argument>, <argument pos:start="3457:50" pos:end="3457:69"><expr pos:start="3457:50" pos:end="3457:69"><call pos:start="3457:50" pos:end="3457:69"><name pos:start="3457:50" pos:end="3457:62">tcg_const_i32</name><argument_list pos:start="3457:63" pos:end="3457:69">(<argument pos:start="3457:64" pos:end="3457:68"><expr pos:start="3457:64" pos:end="3457:68"><name pos:start="3457:64" pos:end="3457:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3459:17" pos:end="3459:22">break;</break>

            <case pos:start="3461:13" pos:end="3461:22">case <expr pos:start="3461:18" pos:end="3461:21"><literal type="number" pos:start="3461:18" pos:end="3461:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="3461:24" pos:end="3461:37">/* fstp sti */</comment>

            <case pos:start="3463:13" pos:end="3463:22">case <expr pos:start="3463:18" pos:end="3463:21"><literal type="number" pos:start="3463:18" pos:end="3463:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="3463:24" pos:end="3463:55">/* fstp1 sti, undocumented op */</comment>

            <case pos:start="3465:13" pos:end="3465:22">case <expr pos:start="3465:18" pos:end="3465:21"><literal type="number" pos:start="3465:18" pos:end="3465:21">0x3a</literal></expr>:</case> <comment type="block" pos:start="3465:24" pos:end="3465:55">/* fstp8 sti, undocumented op */</comment>

            <case pos:start="3467:13" pos:end="3467:22">case <expr pos:start="3467:18" pos:end="3467:21"><literal type="number" pos:start="3467:18" pos:end="3467:21">0x3b</literal></expr>:</case> <comment type="block" pos:start="3467:24" pos:end="3467:55">/* fstp9 sti, undocumented op */</comment>

                <expr_stmt pos:start="3469:17" pos:end="3469:71"><expr pos:start="3469:17" pos:end="3469:70"><call pos:start="3469:17" pos:end="3469:70"><name pos:start="3469:17" pos:end="3469:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="3469:40" pos:end="3469:70">(<argument pos:start="3469:41" pos:end="3469:47"><expr pos:start="3469:41" pos:end="3469:47"><name pos:start="3469:41" pos:end="3469:47">cpu_env</name></expr></argument>, <argument pos:start="3469:50" pos:end="3469:69"><expr pos:start="3469:50" pos:end="3469:69"><call pos:start="3469:50" pos:end="3469:69"><name pos:start="3469:50" pos:end="3469:62">tcg_const_i32</name><argument_list pos:start="3469:63" pos:end="3469:69">(<argument pos:start="3469:64" pos:end="3469:68"><expr pos:start="3469:64" pos:end="3469:68"><name pos:start="3469:64" pos:end="3469:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3471:17" pos:end="3471:41"><expr pos:start="3471:17" pos:end="3471:40"><call pos:start="3471:17" pos:end="3471:40"><name pos:start="3471:17" pos:end="3471:31">gen_helper_fpop</name><argument_list pos:start="3471:32" pos:end="3471:40">(<argument pos:start="3471:33" pos:end="3471:39"><expr pos:start="3471:33" pos:end="3471:39"><name pos:start="3471:33" pos:end="3471:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3473:17" pos:end="3473:22">break;</break>

            <case pos:start="3475:13" pos:end="3475:22">case <expr pos:start="3475:18" pos:end="3475:21"><literal type="number" pos:start="3475:18" pos:end="3475:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="3475:24" pos:end="3475:40">/* fucom st(i) */</comment>

                <expr_stmt pos:start="3477:17" pos:end="3477:71"><expr pos:start="3477:17" pos:end="3477:70"><call pos:start="3477:17" pos:end="3477:70"><name pos:start="3477:17" pos:end="3477:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3477:40" pos:end="3477:70">(<argument pos:start="3477:41" pos:end="3477:47"><expr pos:start="3477:41" pos:end="3477:47"><name pos:start="3477:41" pos:end="3477:47">cpu_env</name></expr></argument>, <argument pos:start="3477:50" pos:end="3477:69"><expr pos:start="3477:50" pos:end="3477:69"><call pos:start="3477:50" pos:end="3477:69"><name pos:start="3477:50" pos:end="3477:62">tcg_const_i32</name><argument_list pos:start="3477:63" pos:end="3477:69">(<argument pos:start="3477:64" pos:end="3477:68"><expr pos:start="3477:64" pos:end="3477:68"><name pos:start="3477:64" pos:end="3477:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3479:17" pos:end="3479:50"><expr pos:start="3479:17" pos:end="3479:49"><call pos:start="3479:17" pos:end="3479:49"><name pos:start="3479:17" pos:end="3479:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3479:41" pos:end="3479:49">(<argument pos:start="3479:42" pos:end="3479:48"><expr pos:start="3479:42" pos:end="3479:48"><name pos:start="3479:42" pos:end="3479:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3481:17" pos:end="3481:22">break;</break>

            <case pos:start="3483:13" pos:end="3483:22">case <expr pos:start="3483:18" pos:end="3483:21"><literal type="number" pos:start="3483:18" pos:end="3483:21">0x2d</literal></expr>:</case> <comment type="block" pos:start="3483:24" pos:end="3483:41">/* fucomp st(i) */</comment>

                <expr_stmt pos:start="3485:17" pos:end="3485:71"><expr pos:start="3485:17" pos:end="3485:70"><call pos:start="3485:17" pos:end="3485:70"><name pos:start="3485:17" pos:end="3485:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3485:40" pos:end="3485:70">(<argument pos:start="3485:41" pos:end="3485:47"><expr pos:start="3485:41" pos:end="3485:47"><name pos:start="3485:41" pos:end="3485:47">cpu_env</name></expr></argument>, <argument pos:start="3485:50" pos:end="3485:69"><expr pos:start="3485:50" pos:end="3485:69"><call pos:start="3485:50" pos:end="3485:69"><name pos:start="3485:50" pos:end="3485:62">tcg_const_i32</name><argument_list pos:start="3485:63" pos:end="3485:69">(<argument pos:start="3485:64" pos:end="3485:68"><expr pos:start="3485:64" pos:end="3485:68"><name pos:start="3485:64" pos:end="3485:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3487:17" pos:end="3487:50"><expr pos:start="3487:17" pos:end="3487:49"><call pos:start="3487:17" pos:end="3487:49"><name pos:start="3487:17" pos:end="3487:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3487:41" pos:end="3487:49">(<argument pos:start="3487:42" pos:end="3487:48"><expr pos:start="3487:42" pos:end="3487:48"><name pos:start="3487:42" pos:end="3487:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3489:17" pos:end="3489:41"><expr pos:start="3489:17" pos:end="3489:40"><call pos:start="3489:17" pos:end="3489:40"><name pos:start="3489:17" pos:end="3489:31">gen_helper_fpop</name><argument_list pos:start="3489:32" pos:end="3489:40">(<argument pos:start="3489:33" pos:end="3489:39"><expr pos:start="3489:33" pos:end="3489:39"><name pos:start="3489:33" pos:end="3489:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3491:17" pos:end="3491:22">break;</break>

            <case pos:start="3493:13" pos:end="3493:22">case <expr pos:start="3493:18" pos:end="3493:21"><literal type="number" pos:start="3493:18" pos:end="3493:21">0x33</literal></expr>:</case> <comment type="block" pos:start="3493:24" pos:end="3493:33">/* de/3 */</comment>

                <switch pos:start="3495:17" pos:end="3513:17">switch<condition pos:start="3495:23" pos:end="3495:26">(<expr pos:start="3495:24" pos:end="3495:25"><name pos:start="3495:24" pos:end="3495:25">rm</name></expr>)</condition> <block pos:start="3495:28" pos:end="3513:17">{<block_content pos:start="3497:17" pos:end="3511:36">

                <case pos:start="3497:17" pos:end="3497:23">case <expr pos:start="3497:22" pos:end="3497:22"><literal type="number" pos:start="3497:22" pos:end="3497:22">1</literal></expr>:</case> <comment type="block" pos:start="3497:25" pos:end="3497:36">/* fcompp */</comment>

                    <expr_stmt pos:start="3499:21" pos:end="3499:71"><expr pos:start="3499:21" pos:end="3499:70"><call pos:start="3499:21" pos:end="3499:70"><name pos:start="3499:21" pos:end="3499:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3499:44" pos:end="3499:70">(<argument pos:start="3499:45" pos:end="3499:51"><expr pos:start="3499:45" pos:end="3499:51"><name pos:start="3499:45" pos:end="3499:51">cpu_env</name></expr></argument>, <argument pos:start="3499:54" pos:end="3499:69"><expr pos:start="3499:54" pos:end="3499:69"><call pos:start="3499:54" pos:end="3499:69"><name pos:start="3499:54" pos:end="3499:66">tcg_const_i32</name><argument_list pos:start="3499:67" pos:end="3499:69">(<argument pos:start="3499:68" pos:end="3499:68"><expr pos:start="3499:68" pos:end="3499:68"><literal type="number" pos:start="3499:68" pos:end="3499:68">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3501:21" pos:end="3501:53"><expr pos:start="3501:21" pos:end="3501:52"><call pos:start="3501:21" pos:end="3501:52"><name pos:start="3501:21" pos:end="3501:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3501:44" pos:end="3501:52">(<argument pos:start="3501:45" pos:end="3501:51"><expr pos:start="3501:45" pos:end="3501:51"><name pos:start="3501:45" pos:end="3501:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3503:21" pos:end="3503:45"><expr pos:start="3503:21" pos:end="3503:44"><call pos:start="3503:21" pos:end="3503:44"><name pos:start="3503:21" pos:end="3503:35">gen_helper_fpop</name><argument_list pos:start="3503:36" pos:end="3503:44">(<argument pos:start="3503:37" pos:end="3503:43"><expr pos:start="3503:37" pos:end="3503:43"><name pos:start="3503:37" pos:end="3503:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3505:21" pos:end="3505:45"><expr pos:start="3505:21" pos:end="3505:44"><call pos:start="3505:21" pos:end="3505:44"><name pos:start="3505:21" pos:end="3505:35">gen_helper_fpop</name><argument_list pos:start="3505:36" pos:end="3505:44">(<argument pos:start="3505:37" pos:end="3505:43"><expr pos:start="3505:37" pos:end="3505:43"><name pos:start="3505:37" pos:end="3505:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3507:21" pos:end="3507:26">break;</break>

                <default pos:start="3509:17" pos:end="3509:24">default:</default>

                    <goto pos:start="3511:21" pos:end="3511:36">goto <name pos:start="3511:26" pos:end="3511:35">unknown_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3515:17" pos:end="3515:22">break;</break>

            <case pos:start="3517:13" pos:end="3517:22">case <expr pos:start="3517:18" pos:end="3517:21"><literal type="number" pos:start="3517:18" pos:end="3517:21">0x38</literal></expr>:</case> <comment type="block" pos:start="3517:24" pos:end="3517:56">/* ffreep sti, undocumented op */</comment>

                <expr_stmt pos:start="3519:17" pos:end="3519:68"><expr pos:start="3519:17" pos:end="3519:67"><call pos:start="3519:17" pos:end="3519:67"><name pos:start="3519:17" pos:end="3519:36">gen_helper_ffree_STN</name><argument_list pos:start="3519:37" pos:end="3519:67">(<argument pos:start="3519:38" pos:end="3519:44"><expr pos:start="3519:38" pos:end="3519:44"><name pos:start="3519:38" pos:end="3519:44">cpu_env</name></expr></argument>, <argument pos:start="3519:47" pos:end="3519:66"><expr pos:start="3519:47" pos:end="3519:66"><call pos:start="3519:47" pos:end="3519:66"><name pos:start="3519:47" pos:end="3519:59">tcg_const_i32</name><argument_list pos:start="3519:60" pos:end="3519:66">(<argument pos:start="3519:61" pos:end="3519:65"><expr pos:start="3519:61" pos:end="3519:65"><name pos:start="3519:61" pos:end="3519:65">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3521:17" pos:end="3521:41"><expr pos:start="3521:17" pos:end="3521:40"><call pos:start="3521:17" pos:end="3521:40"><name pos:start="3521:17" pos:end="3521:31">gen_helper_fpop</name><argument_list pos:start="3521:32" pos:end="3521:40">(<argument pos:start="3521:33" pos:end="3521:39"><expr pos:start="3521:33" pos:end="3521:39"><name pos:start="3521:33" pos:end="3521:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3523:17" pos:end="3523:22">break;</break>

            <case pos:start="3525:13" pos:end="3525:22">case <expr pos:start="3525:18" pos:end="3525:21"><literal type="number" pos:start="3525:18" pos:end="3525:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="3525:24" pos:end="3525:33">/* df/4 */</comment>

                <switch pos:start="3527:17" pos:end="3543:17">switch<condition pos:start="3527:23" pos:end="3527:26">(<expr pos:start="3527:24" pos:end="3527:25"><name pos:start="3527:24" pos:end="3527:25">rm</name></expr>)</condition> <block pos:start="3527:28" pos:end="3543:17">{<block_content pos:start="3529:17" pos:end="3541:36">

                <case pos:start="3529:17" pos:end="3529:23">case <expr pos:start="3529:22" pos:end="3529:22"><literal type="number" pos:start="3529:22" pos:end="3529:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="3531:21" pos:end="3531:61"><expr pos:start="3531:21" pos:end="3531:60"><call pos:start="3531:21" pos:end="3531:60"><name pos:start="3531:21" pos:end="3531:37">gen_helper_fnstsw</name><argument_list pos:start="3531:38" pos:end="3531:60">(<argument pos:start="3531:39" pos:end="3531:50"><expr pos:start="3531:39" pos:end="3531:50"><name pos:start="3531:39" pos:end="3531:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3531:53" pos:end="3531:59"><expr pos:start="3531:53" pos:end="3531:59"><name pos:start="3531:53" pos:end="3531:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3533:21" pos:end="3533:62"><expr pos:start="3533:21" pos:end="3533:61"><call pos:start="3533:21" pos:end="3533:61"><name pos:start="3533:21" pos:end="3533:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="3533:40" pos:end="3533:61">(<argument pos:start="3533:41" pos:end="3533:46"><expr pos:start="3533:41" pos:end="3533:46"><name pos:start="3533:41" pos:end="3533:46">cpu_T0</name></expr></argument>, <argument pos:start="3533:49" pos:end="3533:60"><expr pos:start="3533:49" pos:end="3533:60"><name pos:start="3533:49" pos:end="3533:60">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3535:21" pos:end="3535:59"><expr pos:start="3535:21" pos:end="3535:58"><call pos:start="3535:21" pos:end="3535:58"><name pos:start="3535:21" pos:end="3535:36">gen_op_mov_reg_v</name><argument_list pos:start="3535:37" pos:end="3535:58">(<argument pos:start="3535:38" pos:end="3535:42"><expr pos:start="3535:38" pos:end="3535:42"><name pos:start="3535:38" pos:end="3535:42">MO_16</name></expr></argument>, <argument pos:start="3535:45" pos:end="3535:49"><expr pos:start="3535:45" pos:end="3535:49"><name pos:start="3535:45" pos:end="3535:49">R_EAX</name></expr></argument>, <argument pos:start="3535:52" pos:end="3535:57"><expr pos:start="3535:52" pos:end="3535:57"><name pos:start="3535:52" pos:end="3535:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3537:21" pos:end="3537:26">break;</break>

                <default pos:start="3539:17" pos:end="3539:24">default:</default>

                    <goto pos:start="3541:21" pos:end="3541:36">goto <name pos:start="3541:26" pos:end="3541:35">unknown_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3545:17" pos:end="3545:22">break;</break>

            <case pos:start="3547:13" pos:end="3547:22">case <expr pos:start="3547:18" pos:end="3547:21"><literal type="number" pos:start="3547:18" pos:end="3547:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="3547:24" pos:end="3547:36">/* fucomip */</comment>

                <if_stmt pos:start="3549:17" pos:end="3553:17"><if pos:start="3549:17" pos:end="3553:17">if <condition pos:start="3549:20" pos:end="3549:54">(<expr pos:start="3549:21" pos:end="3549:53"><operator pos:start="3549:21" pos:end="3549:21">!</operator><operator pos:start="3549:22" pos:end="3549:22">(</operator><name pos:start="3549:23" pos:end="3549:39"><name pos:start="3549:23" pos:end="3549:23">s</name><operator pos:start="3549:24" pos:end="3549:25">-&gt;</operator><name pos:start="3549:26" pos:end="3549:39">cpuid_features</name></name> <operator pos:start="3549:41" pos:end="3549:41">&amp;</operator> <name pos:start="3549:43" pos:end="3549:52">CPUID_CMOV</name><operator pos:start="3549:53" pos:end="3549:53">)</operator></expr>)</condition> <block pos:start="3549:56" pos:end="3553:17">{<block_content pos:start="3551:21" pos:end="3551:36">

                    <goto pos:start="3551:21" pos:end="3551:36">goto <name pos:start="3551:26" pos:end="3551:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="3555:17" pos:end="3555:36"><expr pos:start="3555:17" pos:end="3555:35"><call pos:start="3555:17" pos:end="3555:35"><name pos:start="3555:17" pos:end="3555:32">gen_update_cc_op</name><argument_list pos:start="3555:33" pos:end="3555:35">(<argument pos:start="3555:34" pos:end="3555:34"><expr pos:start="3555:34" pos:end="3555:34"><name pos:start="3555:34" pos:end="3555:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3557:17" pos:end="3557:71"><expr pos:start="3557:17" pos:end="3557:70"><call pos:start="3557:17" pos:end="3557:70"><name pos:start="3557:17" pos:end="3557:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3557:40" pos:end="3557:70">(<argument pos:start="3557:41" pos:end="3557:47"><expr pos:start="3557:41" pos:end="3557:47"><name pos:start="3557:41" pos:end="3557:47">cpu_env</name></expr></argument>, <argument pos:start="3557:50" pos:end="3557:69"><expr pos:start="3557:50" pos:end="3557:69"><call pos:start="3557:50" pos:end="3557:69"><name pos:start="3557:50" pos:end="3557:62">tcg_const_i32</name><argument_list pos:start="3557:63" pos:end="3557:69">(<argument pos:start="3557:64" pos:end="3557:68"><expr pos:start="3557:64" pos:end="3557:68"><name pos:start="3557:64" pos:end="3557:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3559:17" pos:end="3559:51"><expr pos:start="3559:17" pos:end="3559:50"><call pos:start="3559:17" pos:end="3559:50"><name pos:start="3559:17" pos:end="3559:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="3559:42" pos:end="3559:50">(<argument pos:start="3559:43" pos:end="3559:49"><expr pos:start="3559:43" pos:end="3559:49"><name pos:start="3559:43" pos:end="3559:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3561:17" pos:end="3561:41"><expr pos:start="3561:17" pos:end="3561:40"><call pos:start="3561:17" pos:end="3561:40"><name pos:start="3561:17" pos:end="3561:31">gen_helper_fpop</name><argument_list pos:start="3561:32" pos:end="3561:40">(<argument pos:start="3561:33" pos:end="3561:39"><expr pos:start="3561:33" pos:end="3561:39"><name pos:start="3561:33" pos:end="3561:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3563:17" pos:end="3563:43"><expr pos:start="3563:17" pos:end="3563:42"><call pos:start="3563:17" pos:end="3563:42"><name pos:start="3563:17" pos:end="3563:25">set_cc_op</name><argument_list pos:start="3563:26" pos:end="3563:42">(<argument pos:start="3563:27" pos:end="3563:27"><expr pos:start="3563:27" pos:end="3563:27"><name pos:start="3563:27" pos:end="3563:27">s</name></expr></argument>, <argument pos:start="3563:30" pos:end="3563:41"><expr pos:start="3563:30" pos:end="3563:41"><name pos:start="3563:30" pos:end="3563:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3565:17" pos:end="3565:22">break;</break>

            <case pos:start="3567:13" pos:end="3567:22">case <expr pos:start="3567:18" pos:end="3567:21"><literal type="number" pos:start="3567:18" pos:end="3567:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="3567:24" pos:end="3567:35">/* fcomip */</comment>

                <if_stmt pos:start="3569:17" pos:end="3573:17"><if pos:start="3569:17" pos:end="3573:17">if <condition pos:start="3569:20" pos:end="3569:54">(<expr pos:start="3569:21" pos:end="3569:53"><operator pos:start="3569:21" pos:end="3569:21">!</operator><operator pos:start="3569:22" pos:end="3569:22">(</operator><name pos:start="3569:23" pos:end="3569:39"><name pos:start="3569:23" pos:end="3569:23">s</name><operator pos:start="3569:24" pos:end="3569:25">-&gt;</operator><name pos:start="3569:26" pos:end="3569:39">cpuid_features</name></name> <operator pos:start="3569:41" pos:end="3569:41">&amp;</operator> <name pos:start="3569:43" pos:end="3569:52">CPUID_CMOV</name><operator pos:start="3569:53" pos:end="3569:53">)</operator></expr>)</condition> <block pos:start="3569:56" pos:end="3573:17">{<block_content pos:start="3571:21" pos:end="3571:36">

                    <goto pos:start="3571:21" pos:end="3571:36">goto <name pos:start="3571:26" pos:end="3571:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="3575:17" pos:end="3575:36"><expr pos:start="3575:17" pos:end="3575:35"><call pos:start="3575:17" pos:end="3575:35"><name pos:start="3575:17" pos:end="3575:32">gen_update_cc_op</name><argument_list pos:start="3575:33" pos:end="3575:35">(<argument pos:start="3575:34" pos:end="3575:34"><expr pos:start="3575:34" pos:end="3575:34"><name pos:start="3575:34" pos:end="3575:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3577:17" pos:end="3577:71"><expr pos:start="3577:17" pos:end="3577:70"><call pos:start="3577:17" pos:end="3577:70"><name pos:start="3577:17" pos:end="3577:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3577:40" pos:end="3577:70">(<argument pos:start="3577:41" pos:end="3577:47"><expr pos:start="3577:41" pos:end="3577:47"><name pos:start="3577:41" pos:end="3577:47">cpu_env</name></expr></argument>, <argument pos:start="3577:50" pos:end="3577:69"><expr pos:start="3577:50" pos:end="3577:69"><call pos:start="3577:50" pos:end="3577:69"><name pos:start="3577:50" pos:end="3577:62">tcg_const_i32</name><argument_list pos:start="3577:63" pos:end="3577:69">(<argument pos:start="3577:64" pos:end="3577:68"><expr pos:start="3577:64" pos:end="3577:68"><name pos:start="3577:64" pos:end="3577:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3579:17" pos:end="3579:50"><expr pos:start="3579:17" pos:end="3579:49"><call pos:start="3579:17" pos:end="3579:49"><name pos:start="3579:17" pos:end="3579:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="3579:41" pos:end="3579:49">(<argument pos:start="3579:42" pos:end="3579:48"><expr pos:start="3579:42" pos:end="3579:48"><name pos:start="3579:42" pos:end="3579:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3581:17" pos:end="3581:41"><expr pos:start="3581:17" pos:end="3581:40"><call pos:start="3581:17" pos:end="3581:40"><name pos:start="3581:17" pos:end="3581:31">gen_helper_fpop</name><argument_list pos:start="3581:32" pos:end="3581:40">(<argument pos:start="3581:33" pos:end="3581:39"><expr pos:start="3581:33" pos:end="3581:39"><name pos:start="3581:33" pos:end="3581:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3583:17" pos:end="3583:43"><expr pos:start="3583:17" pos:end="3583:42"><call pos:start="3583:17" pos:end="3583:42"><name pos:start="3583:17" pos:end="3583:25">set_cc_op</name><argument_list pos:start="3583:26" pos:end="3583:42">(<argument pos:start="3583:27" pos:end="3583:27"><expr pos:start="3583:27" pos:end="3583:27"><name pos:start="3583:27" pos:end="3583:27">s</name></expr></argument>, <argument pos:start="3583:30" pos:end="3583:41"><expr pos:start="3583:30" pos:end="3583:41"><name pos:start="3583:30" pos:end="3583:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3585:17" pos:end="3585:22">break;</break>

            <case pos:start="3587:13" pos:end="3587:31">case <expr pos:start="3587:18" pos:end="3587:30"><literal type="number" pos:start="3587:18" pos:end="3587:21">0x10</literal> <operator pos:start="3587:23" pos:end="3587:25">...</operator> <literal type="number" pos:start="3587:27" pos:end="3587:30">0x13</literal></expr>:</case> <comment type="block" pos:start="3587:33" pos:end="3587:45">/* fcmovxx */</comment>

            <case pos:start="3589:13" pos:end="3589:31">case <expr pos:start="3589:18" pos:end="3589:30"><literal type="number" pos:start="3589:18" pos:end="3589:21">0x18</literal> <operator pos:start="3589:23" pos:end="3589:25">...</operator> <literal type="number" pos:start="3589:27" pos:end="3589:30">0x1b</literal></expr>:</case>

                <block pos:start="3591:17" pos:end="3627:17">{<block_content pos:start="3593:21" pos:end="3625:38">

                    <decl_stmt pos:start="3593:21" pos:end="3593:28"><decl pos:start="3593:21" pos:end="3593:27"><type pos:start="3593:21" pos:end="3593:23"><name pos:start="3593:21" pos:end="3593:23">int</name></type> <name pos:start="3593:25" pos:end="3593:27">op1</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="3595:21" pos:end="3595:33"><decl pos:start="3595:21" pos:end="3595:32"><type pos:start="3595:21" pos:end="3595:30"><name pos:start="3595:21" pos:end="3595:28">TCGLabel</name> <modifier pos:start="3595:30" pos:end="3595:30">*</modifier></type><name pos:start="3595:31" pos:end="3595:32">l1</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="3597:21" pos:end="3607:22"><decl pos:start="3597:21" pos:end="3607:21"><type pos:start="3597:21" pos:end="3597:40"><specifier pos:start="3597:21" pos:end="3597:26">static</specifier> <specifier pos:start="3597:28" pos:end="3597:32">const</specifier> <name pos:start="3597:34" pos:end="3597:40">uint8_t</name></type> <name pos:start="3597:42" pos:end="3597:52"><name pos:start="3597:42" pos:end="3597:49">fcmov_cc</name><index pos:start="3597:50" pos:end="3597:52">[<expr pos:start="3597:51" pos:end="3597:51"><literal type="number" pos:start="3597:51" pos:end="3597:51">8</literal></expr>]</index></name> <init pos:start="3597:54" pos:end="3607:21">= <expr pos:start="3597:56" pos:end="3607:21"><block pos:start="3597:56" pos:end="3607:21">{

                        <expr pos:start="3599:25" pos:end="3599:36"><operator pos:start="3599:25" pos:end="3599:25">(</operator><name pos:start="3599:26" pos:end="3599:30">JCC_B</name> <operator pos:start="3599:32" pos:end="3599:33">&lt;&lt;</operator> <literal type="number" pos:start="3599:35" pos:end="3599:35">1</literal><operator pos:start="3599:36" pos:end="3599:36">)</operator></expr>,

                        <expr pos:start="3601:25" pos:end="3601:36"><operator pos:start="3601:25" pos:end="3601:25">(</operator><name pos:start="3601:26" pos:end="3601:30">JCC_Z</name> <operator pos:start="3601:32" pos:end="3601:33">&lt;&lt;</operator> <literal type="number" pos:start="3601:35" pos:end="3601:35">1</literal><operator pos:start="3601:36" pos:end="3601:36">)</operator></expr>,

                        <expr pos:start="3603:25" pos:end="3603:37"><operator pos:start="3603:25" pos:end="3603:25">(</operator><name pos:start="3603:26" pos:end="3603:31">JCC_BE</name> <operator pos:start="3603:33" pos:end="3603:34">&lt;&lt;</operator> <literal type="number" pos:start="3603:36" pos:end="3603:36">1</literal><operator pos:start="3603:37" pos:end="3603:37">)</operator></expr>,

                        <expr pos:start="3605:25" pos:end="3605:36"><operator pos:start="3605:25" pos:end="3605:25">(</operator><name pos:start="3605:26" pos:end="3605:30">JCC_P</name> <operator pos:start="3605:32" pos:end="3605:33">&lt;&lt;</operator> <literal type="number" pos:start="3605:35" pos:end="3605:35">1</literal><operator pos:start="3605:36" pos:end="3605:36">)</operator></expr>,

                    }</block></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="3611:21" pos:end="3615:21"><if pos:start="3611:21" pos:end="3615:21">if <condition pos:start="3611:24" pos:end="3611:58">(<expr pos:start="3611:25" pos:end="3611:57"><operator pos:start="3611:25" pos:end="3611:25">!</operator><operator pos:start="3611:26" pos:end="3611:26">(</operator><name pos:start="3611:27" pos:end="3611:43"><name pos:start="3611:27" pos:end="3611:27">s</name><operator pos:start="3611:28" pos:end="3611:29">-&gt;</operator><name pos:start="3611:30" pos:end="3611:43">cpuid_features</name></name> <operator pos:start="3611:45" pos:end="3611:45">&amp;</operator> <name pos:start="3611:47" pos:end="3611:56">CPUID_CMOV</name><operator pos:start="3611:57" pos:end="3611:57">)</operator></expr>)</condition> <block pos:start="3611:60" pos:end="3615:21">{<block_content pos:start="3613:25" pos:end="3613:40">

                        <goto pos:start="3613:25" pos:end="3613:40">goto <name pos:start="3613:30" pos:end="3613:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="3617:21" pos:end="3617:67"><expr pos:start="3617:21" pos:end="3617:66"><name pos:start="3617:21" pos:end="3617:23">op1</name> <operator pos:start="3617:25" pos:end="3617:25">=</operator> <name pos:start="3617:27" pos:end="3617:42"><name pos:start="3617:27" pos:end="3617:34">fcmov_cc</name><index pos:start="3617:35" pos:end="3617:42">[<expr pos:start="3617:36" pos:end="3617:41"><name pos:start="3617:36" pos:end="3617:37">op</name> <operator pos:start="3617:39" pos:end="3617:39">&amp;</operator> <literal type="number" pos:start="3617:41" pos:end="3617:41">3</literal></expr>]</index></name> <operator pos:start="3617:44" pos:end="3617:44">|</operator> <operator pos:start="3617:46" pos:end="3617:46">(</operator><operator pos:start="3617:47" pos:end="3617:47">(</operator><operator pos:start="3617:48" pos:end="3617:48">(</operator><name pos:start="3617:49" pos:end="3617:50">op</name> <operator pos:start="3617:52" pos:end="3617:53">&gt;&gt;</operator> <literal type="number" pos:start="3617:55" pos:end="3617:55">3</literal><operator pos:start="3617:56" pos:end="3617:56">)</operator> <operator pos:start="3617:58" pos:end="3617:58">&amp;</operator> <literal type="number" pos:start="3617:60" pos:end="3617:60">1</literal><operator pos:start="3617:61" pos:end="3617:61">)</operator> <operator pos:start="3617:63" pos:end="3617:63">^</operator> <literal type="number" pos:start="3617:65" pos:end="3617:65">1</literal><operator pos:start="3617:66" pos:end="3617:66">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="3619:21" pos:end="3619:41"><expr pos:start="3619:21" pos:end="3619:40"><name pos:start="3619:21" pos:end="3619:22">l1</name> <operator pos:start="3619:24" pos:end="3619:24">=</operator> <call pos:start="3619:26" pos:end="3619:40"><name pos:start="3619:26" pos:end="3619:38">gen_new_label</name><argument_list pos:start="3619:39" pos:end="3619:40">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3621:21" pos:end="3621:47"><expr pos:start="3621:21" pos:end="3621:46"><call pos:start="3621:21" pos:end="3621:46"><name pos:start="3621:21" pos:end="3621:34">gen_jcc1_noeob</name><argument_list pos:start="3621:35" pos:end="3621:46">(<argument pos:start="3621:36" pos:end="3621:36"><expr pos:start="3621:36" pos:end="3621:36"><name pos:start="3621:36" pos:end="3621:36">s</name></expr></argument>, <argument pos:start="3621:39" pos:end="3621:41"><expr pos:start="3621:39" pos:end="3621:41"><name pos:start="3621:39" pos:end="3621:41">op1</name></expr></argument>, <argument pos:start="3621:44" pos:end="3621:45"><expr pos:start="3621:44" pos:end="3621:45"><name pos:start="3621:44" pos:end="3621:45">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3623:21" pos:end="3623:75"><expr pos:start="3623:21" pos:end="3623:74"><call pos:start="3623:21" pos:end="3623:74"><name pos:start="3623:21" pos:end="3623:43">gen_helper_fmov_ST0_STN</name><argument_list pos:start="3623:44" pos:end="3623:74">(<argument pos:start="3623:45" pos:end="3623:51"><expr pos:start="3623:45" pos:end="3623:51"><name pos:start="3623:45" pos:end="3623:51">cpu_env</name></expr></argument>, <argument pos:start="3623:54" pos:end="3623:73"><expr pos:start="3623:54" pos:end="3623:73"><call pos:start="3623:54" pos:end="3623:73"><name pos:start="3623:54" pos:end="3623:66">tcg_const_i32</name><argument_list pos:start="3623:67" pos:end="3623:73">(<argument pos:start="3623:68" pos:end="3623:72"><expr pos:start="3623:68" pos:end="3623:72"><name pos:start="3623:68" pos:end="3623:72">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3625:21" pos:end="3625:38"><expr pos:start="3625:21" pos:end="3625:37"><call pos:start="3625:21" pos:end="3625:37"><name pos:start="3625:21" pos:end="3625:33">gen_set_label</name><argument_list pos:start="3625:34" pos:end="3625:37">(<argument pos:start="3625:35" pos:end="3625:36"><expr pos:start="3625:35" pos:end="3625:36"><name pos:start="3625:35" pos:end="3625:36">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3629:17" pos:end="3629:22">break;</break>

            <default pos:start="3631:13" pos:end="3631:20">default:</default>

                <goto pos:start="3633:17" pos:end="3633:32">goto <name pos:start="3633:22" pos:end="3633:31">unknown_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3639:9" pos:end="3639:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3641:9" pos:end="3641:34">/************************/</comment>

        <comment type="block" pos:start="3643:9" pos:end="3643:24">/* string ops */</comment>



    <case pos:start="3647:5" pos:end="3647:14">case <expr pos:start="3647:10" pos:end="3647:13"><literal type="number" pos:start="3647:10" pos:end="3647:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="3647:16" pos:end="3647:26">/* movsS */</comment>

    <case pos:start="3649:5" pos:end="3649:14">case <expr pos:start="3649:10" pos:end="3649:13"><literal type="number" pos:start="3649:10" pos:end="3649:13">0xa5</literal></expr>:</case>

        <expr_stmt pos:start="3651:9" pos:end="3651:30"><expr pos:start="3651:9" pos:end="3651:29"><name pos:start="3651:9" pos:end="3651:10">ot</name> <operator pos:start="3651:12" pos:end="3651:12">=</operator> <call pos:start="3651:14" pos:end="3651:29"><name pos:start="3651:14" pos:end="3651:19">mo_b_d</name><argument_list pos:start="3651:20" pos:end="3651:29">(<argument pos:start="3651:21" pos:end="3651:21"><expr pos:start="3651:21" pos:end="3651:21"><name pos:start="3651:21" pos:end="3651:21">b</name></expr></argument>, <argument pos:start="3651:24" pos:end="3651:28"><expr pos:start="3651:24" pos:end="3651:28"><name pos:start="3651:24" pos:end="3651:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3653:9" pos:end="3661:9"><if pos:start="3653:9" pos:end="3657:9">if <condition pos:start="3653:12" pos:end="3653:52">(<expr pos:start="3653:13" pos:end="3653:51"><name pos:start="3653:13" pos:end="3653:20">prefixes</name> <operator pos:start="3653:22" pos:end="3653:22">&amp;</operator> <operator pos:start="3653:24" pos:end="3653:24">(</operator><name pos:start="3653:25" pos:end="3653:35">PREFIX_REPZ</name> <operator pos:start="3653:37" pos:end="3653:37">|</operator> <name pos:start="3653:39" pos:end="3653:50">PREFIX_REPNZ</name><operator pos:start="3653:51" pos:end="3653:51">)</operator></expr>)</condition> <block pos:start="3653:54" pos:end="3657:9">{<block_content pos:start="3655:13" pos:end="3655:76">

            <expr_stmt pos:start="3655:13" pos:end="3655:76"><expr pos:start="3655:13" pos:end="3655:75"><call pos:start="3655:13" pos:end="3655:75"><name pos:start="3655:13" pos:end="3655:25">gen_repz_movs</name><argument_list pos:start="3655:26" pos:end="3655:75">(<argument pos:start="3655:27" pos:end="3655:27"><expr pos:start="3655:27" pos:end="3655:27"><name pos:start="3655:27" pos:end="3655:27">s</name></expr></argument>, <argument pos:start="3655:30" pos:end="3655:31"><expr pos:start="3655:30" pos:end="3655:31"><name pos:start="3655:30" pos:end="3655:31">ot</name></expr></argument>, <argument pos:start="3655:34" pos:end="3655:54"><expr pos:start="3655:34" pos:end="3655:54"><name pos:start="3655:34" pos:end="3655:41">pc_start</name> <operator pos:start="3655:43" pos:end="3655:43">-</operator> <name pos:start="3655:45" pos:end="3655:54"><name pos:start="3655:45" pos:end="3655:45">s</name><operator pos:start="3655:46" pos:end="3655:47">-&gt;</operator><name pos:start="3655:48" pos:end="3655:54">cs_base</name></name></expr></argument>, <argument pos:start="3655:57" pos:end="3655:74"><expr pos:start="3655:57" pos:end="3655:74"><name pos:start="3655:57" pos:end="3655:61"><name pos:start="3655:57" pos:end="3655:57">s</name><operator pos:start="3655:58" pos:end="3655:59">-&gt;</operator><name pos:start="3655:60" pos:end="3655:61">pc</name></name> <operator pos:start="3655:63" pos:end="3655:63">-</operator> <name pos:start="3655:65" pos:end="3655:74"><name pos:start="3655:65" pos:end="3655:65">s</name><operator pos:start="3655:66" pos:end="3655:67">-&gt;</operator><name pos:start="3655:68" pos:end="3655:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3657:11" pos:end="3661:9">else <block pos:start="3657:16" pos:end="3661:9">{<block_content pos:start="3659:13" pos:end="3659:28">

            <expr_stmt pos:start="3659:13" pos:end="3659:28"><expr pos:start="3659:13" pos:end="3659:27"><call pos:start="3659:13" pos:end="3659:27"><name pos:start="3659:13" pos:end="3659:20">gen_movs</name><argument_list pos:start="3659:21" pos:end="3659:27">(<argument pos:start="3659:22" pos:end="3659:22"><expr pos:start="3659:22" pos:end="3659:22"><name pos:start="3659:22" pos:end="3659:22">s</name></expr></argument>, <argument pos:start="3659:25" pos:end="3659:26"><expr pos:start="3659:25" pos:end="3659:26"><name pos:start="3659:25" pos:end="3659:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3663:9" pos:end="3663:14">break;</break>



    <case pos:start="3667:5" pos:end="3667:14">case <expr pos:start="3667:10" pos:end="3667:13"><literal type="number" pos:start="3667:10" pos:end="3667:13">0xaa</literal></expr>:</case> <comment type="block" pos:start="3667:16" pos:end="3667:26">/* stosS */</comment>

    <case pos:start="3669:5" pos:end="3669:14">case <expr pos:start="3669:10" pos:end="3669:13"><literal type="number" pos:start="3669:10" pos:end="3669:13">0xab</literal></expr>:</case>

        <expr_stmt pos:start="3671:9" pos:end="3671:30"><expr pos:start="3671:9" pos:end="3671:29"><name pos:start="3671:9" pos:end="3671:10">ot</name> <operator pos:start="3671:12" pos:end="3671:12">=</operator> <call pos:start="3671:14" pos:end="3671:29"><name pos:start="3671:14" pos:end="3671:19">mo_b_d</name><argument_list pos:start="3671:20" pos:end="3671:29">(<argument pos:start="3671:21" pos:end="3671:21"><expr pos:start="3671:21" pos:end="3671:21"><name pos:start="3671:21" pos:end="3671:21">b</name></expr></argument>, <argument pos:start="3671:24" pos:end="3671:28"><expr pos:start="3671:24" pos:end="3671:28"><name pos:start="3671:24" pos:end="3671:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3673:9" pos:end="3681:9"><if pos:start="3673:9" pos:end="3677:9">if <condition pos:start="3673:12" pos:end="3673:52">(<expr pos:start="3673:13" pos:end="3673:51"><name pos:start="3673:13" pos:end="3673:20">prefixes</name> <operator pos:start="3673:22" pos:end="3673:22">&amp;</operator> <operator pos:start="3673:24" pos:end="3673:24">(</operator><name pos:start="3673:25" pos:end="3673:35">PREFIX_REPZ</name> <operator pos:start="3673:37" pos:end="3673:37">|</operator> <name pos:start="3673:39" pos:end="3673:50">PREFIX_REPNZ</name><operator pos:start="3673:51" pos:end="3673:51">)</operator></expr>)</condition> <block pos:start="3673:54" pos:end="3677:9">{<block_content pos:start="3675:13" pos:end="3675:76">

            <expr_stmt pos:start="3675:13" pos:end="3675:76"><expr pos:start="3675:13" pos:end="3675:75"><call pos:start="3675:13" pos:end="3675:75"><name pos:start="3675:13" pos:end="3675:25">gen_repz_stos</name><argument_list pos:start="3675:26" pos:end="3675:75">(<argument pos:start="3675:27" pos:end="3675:27"><expr pos:start="3675:27" pos:end="3675:27"><name pos:start="3675:27" pos:end="3675:27">s</name></expr></argument>, <argument pos:start="3675:30" pos:end="3675:31"><expr pos:start="3675:30" pos:end="3675:31"><name pos:start="3675:30" pos:end="3675:31">ot</name></expr></argument>, <argument pos:start="3675:34" pos:end="3675:54"><expr pos:start="3675:34" pos:end="3675:54"><name pos:start="3675:34" pos:end="3675:41">pc_start</name> <operator pos:start="3675:43" pos:end="3675:43">-</operator> <name pos:start="3675:45" pos:end="3675:54"><name pos:start="3675:45" pos:end="3675:45">s</name><operator pos:start="3675:46" pos:end="3675:47">-&gt;</operator><name pos:start="3675:48" pos:end="3675:54">cs_base</name></name></expr></argument>, <argument pos:start="3675:57" pos:end="3675:74"><expr pos:start="3675:57" pos:end="3675:74"><name pos:start="3675:57" pos:end="3675:61"><name pos:start="3675:57" pos:end="3675:57">s</name><operator pos:start="3675:58" pos:end="3675:59">-&gt;</operator><name pos:start="3675:60" pos:end="3675:61">pc</name></name> <operator pos:start="3675:63" pos:end="3675:63">-</operator> <name pos:start="3675:65" pos:end="3675:74"><name pos:start="3675:65" pos:end="3675:65">s</name><operator pos:start="3675:66" pos:end="3675:67">-&gt;</operator><name pos:start="3675:68" pos:end="3675:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3677:11" pos:end="3681:9">else <block pos:start="3677:16" pos:end="3681:9">{<block_content pos:start="3679:13" pos:end="3679:28">

            <expr_stmt pos:start="3679:13" pos:end="3679:28"><expr pos:start="3679:13" pos:end="3679:27"><call pos:start="3679:13" pos:end="3679:27"><name pos:start="3679:13" pos:end="3679:20">gen_stos</name><argument_list pos:start="3679:21" pos:end="3679:27">(<argument pos:start="3679:22" pos:end="3679:22"><expr pos:start="3679:22" pos:end="3679:22"><name pos:start="3679:22" pos:end="3679:22">s</name></expr></argument>, <argument pos:start="3679:25" pos:end="3679:26"><expr pos:start="3679:25" pos:end="3679:26"><name pos:start="3679:25" pos:end="3679:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3683:9" pos:end="3683:14">break;</break>

    <case pos:start="3685:5" pos:end="3685:14">case <expr pos:start="3685:10" pos:end="3685:13"><literal type="number" pos:start="3685:10" pos:end="3685:13">0xac</literal></expr>:</case> <comment type="block" pos:start="3685:16" pos:end="3685:26">/* lodsS */</comment>

    <case pos:start="3687:5" pos:end="3687:14">case <expr pos:start="3687:10" pos:end="3687:13"><literal type="number" pos:start="3687:10" pos:end="3687:13">0xad</literal></expr>:</case>

        <expr_stmt pos:start="3689:9" pos:end="3689:30"><expr pos:start="3689:9" pos:end="3689:29"><name pos:start="3689:9" pos:end="3689:10">ot</name> <operator pos:start="3689:12" pos:end="3689:12">=</operator> <call pos:start="3689:14" pos:end="3689:29"><name pos:start="3689:14" pos:end="3689:19">mo_b_d</name><argument_list pos:start="3689:20" pos:end="3689:29">(<argument pos:start="3689:21" pos:end="3689:21"><expr pos:start="3689:21" pos:end="3689:21"><name pos:start="3689:21" pos:end="3689:21">b</name></expr></argument>, <argument pos:start="3689:24" pos:end="3689:28"><expr pos:start="3689:24" pos:end="3689:28"><name pos:start="3689:24" pos:end="3689:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3691:9" pos:end="3699:9"><if pos:start="3691:9" pos:end="3695:9">if <condition pos:start="3691:12" pos:end="3691:52">(<expr pos:start="3691:13" pos:end="3691:51"><name pos:start="3691:13" pos:end="3691:20">prefixes</name> <operator pos:start="3691:22" pos:end="3691:22">&amp;</operator> <operator pos:start="3691:24" pos:end="3691:24">(</operator><name pos:start="3691:25" pos:end="3691:35">PREFIX_REPZ</name> <operator pos:start="3691:37" pos:end="3691:37">|</operator> <name pos:start="3691:39" pos:end="3691:50">PREFIX_REPNZ</name><operator pos:start="3691:51" pos:end="3691:51">)</operator></expr>)</condition> <block pos:start="3691:54" pos:end="3695:9">{<block_content pos:start="3693:13" pos:end="3693:76">

            <expr_stmt pos:start="3693:13" pos:end="3693:76"><expr pos:start="3693:13" pos:end="3693:75"><call pos:start="3693:13" pos:end="3693:75"><name pos:start="3693:13" pos:end="3693:25">gen_repz_lods</name><argument_list pos:start="3693:26" pos:end="3693:75">(<argument pos:start="3693:27" pos:end="3693:27"><expr pos:start="3693:27" pos:end="3693:27"><name pos:start="3693:27" pos:end="3693:27">s</name></expr></argument>, <argument pos:start="3693:30" pos:end="3693:31"><expr pos:start="3693:30" pos:end="3693:31"><name pos:start="3693:30" pos:end="3693:31">ot</name></expr></argument>, <argument pos:start="3693:34" pos:end="3693:54"><expr pos:start="3693:34" pos:end="3693:54"><name pos:start="3693:34" pos:end="3693:41">pc_start</name> <operator pos:start="3693:43" pos:end="3693:43">-</operator> <name pos:start="3693:45" pos:end="3693:54"><name pos:start="3693:45" pos:end="3693:45">s</name><operator pos:start="3693:46" pos:end="3693:47">-&gt;</operator><name pos:start="3693:48" pos:end="3693:54">cs_base</name></name></expr></argument>, <argument pos:start="3693:57" pos:end="3693:74"><expr pos:start="3693:57" pos:end="3693:74"><name pos:start="3693:57" pos:end="3693:61"><name pos:start="3693:57" pos:end="3693:57">s</name><operator pos:start="3693:58" pos:end="3693:59">-&gt;</operator><name pos:start="3693:60" pos:end="3693:61">pc</name></name> <operator pos:start="3693:63" pos:end="3693:63">-</operator> <name pos:start="3693:65" pos:end="3693:74"><name pos:start="3693:65" pos:end="3693:65">s</name><operator pos:start="3693:66" pos:end="3693:67">-&gt;</operator><name pos:start="3693:68" pos:end="3693:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3695:11" pos:end="3699:9">else <block pos:start="3695:16" pos:end="3699:9">{<block_content pos:start="3697:13" pos:end="3697:28">

            <expr_stmt pos:start="3697:13" pos:end="3697:28"><expr pos:start="3697:13" pos:end="3697:27"><call pos:start="3697:13" pos:end="3697:27"><name pos:start="3697:13" pos:end="3697:20">gen_lods</name><argument_list pos:start="3697:21" pos:end="3697:27">(<argument pos:start="3697:22" pos:end="3697:22"><expr pos:start="3697:22" pos:end="3697:22"><name pos:start="3697:22" pos:end="3697:22">s</name></expr></argument>, <argument pos:start="3697:25" pos:end="3697:26"><expr pos:start="3697:25" pos:end="3697:26"><name pos:start="3697:25" pos:end="3697:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3701:9" pos:end="3701:14">break;</break>

    <case pos:start="3703:5" pos:end="3703:14">case <expr pos:start="3703:10" pos:end="3703:13"><literal type="number" pos:start="3703:10" pos:end="3703:13">0xae</literal></expr>:</case> <comment type="block" pos:start="3703:16" pos:end="3703:26">/* scasS */</comment>

    <case pos:start="3705:5" pos:end="3705:14">case <expr pos:start="3705:10" pos:end="3705:13"><literal type="number" pos:start="3705:10" pos:end="3705:13">0xaf</literal></expr>:</case>

        <expr_stmt pos:start="3707:9" pos:end="3707:30"><expr pos:start="3707:9" pos:end="3707:29"><name pos:start="3707:9" pos:end="3707:10">ot</name> <operator pos:start="3707:12" pos:end="3707:12">=</operator> <call pos:start="3707:14" pos:end="3707:29"><name pos:start="3707:14" pos:end="3707:19">mo_b_d</name><argument_list pos:start="3707:20" pos:end="3707:29">(<argument pos:start="3707:21" pos:end="3707:21"><expr pos:start="3707:21" pos:end="3707:21"><name pos:start="3707:21" pos:end="3707:21">b</name></expr></argument>, <argument pos:start="3707:24" pos:end="3707:28"><expr pos:start="3707:24" pos:end="3707:28"><name pos:start="3707:24" pos:end="3707:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3709:9" pos:end="3721:9"><if pos:start="3709:9" pos:end="3713:9">if <condition pos:start="3709:12" pos:end="3709:36">(<expr pos:start="3709:13" pos:end="3709:35"><name pos:start="3709:13" pos:end="3709:20">prefixes</name> <operator pos:start="3709:22" pos:end="3709:22">&amp;</operator> <name pos:start="3709:24" pos:end="3709:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3709:38" pos:end="3713:9">{<block_content pos:start="3711:13" pos:end="3711:79">

            <expr_stmt pos:start="3711:13" pos:end="3711:79"><expr pos:start="3711:13" pos:end="3711:78"><call pos:start="3711:13" pos:end="3711:78"><name pos:start="3711:13" pos:end="3711:25">gen_repz_scas</name><argument_list pos:start="3711:26" pos:end="3711:78">(<argument pos:start="3711:27" pos:end="3711:27"><expr pos:start="3711:27" pos:end="3711:27"><name pos:start="3711:27" pos:end="3711:27">s</name></expr></argument>, <argument pos:start="3711:30" pos:end="3711:31"><expr pos:start="3711:30" pos:end="3711:31"><name pos:start="3711:30" pos:end="3711:31">ot</name></expr></argument>, <argument pos:start="3711:34" pos:end="3711:54"><expr pos:start="3711:34" pos:end="3711:54"><name pos:start="3711:34" pos:end="3711:41">pc_start</name> <operator pos:start="3711:43" pos:end="3711:43">-</operator> <name pos:start="3711:45" pos:end="3711:54"><name pos:start="3711:45" pos:end="3711:45">s</name><operator pos:start="3711:46" pos:end="3711:47">-&gt;</operator><name pos:start="3711:48" pos:end="3711:54">cs_base</name></name></expr></argument>, <argument pos:start="3711:57" pos:end="3711:74"><expr pos:start="3711:57" pos:end="3711:74"><name pos:start="3711:57" pos:end="3711:61"><name pos:start="3711:57" pos:end="3711:57">s</name><operator pos:start="3711:58" pos:end="3711:59">-&gt;</operator><name pos:start="3711:60" pos:end="3711:61">pc</name></name> <operator pos:start="3711:63" pos:end="3711:63">-</operator> <name pos:start="3711:65" pos:end="3711:74"><name pos:start="3711:65" pos:end="3711:65">s</name><operator pos:start="3711:66" pos:end="3711:67">-&gt;</operator><name pos:start="3711:68" pos:end="3711:74">cs_base</name></name></expr></argument>, <argument pos:start="3711:77" pos:end="3711:77"><expr pos:start="3711:77" pos:end="3711:77"><literal type="number" pos:start="3711:77" pos:end="3711:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3713:11" pos:end="3717:9">else if <condition pos:start="3713:19" pos:end="3713:42">(<expr pos:start="3713:20" pos:end="3713:41"><name pos:start="3713:20" pos:end="3713:27">prefixes</name> <operator pos:start="3713:29" pos:end="3713:29">&amp;</operator> <name pos:start="3713:31" pos:end="3713:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3713:44" pos:end="3717:9">{<block_content pos:start="3715:13" pos:end="3715:79">

            <expr_stmt pos:start="3715:13" pos:end="3715:79"><expr pos:start="3715:13" pos:end="3715:78"><call pos:start="3715:13" pos:end="3715:78"><name pos:start="3715:13" pos:end="3715:25">gen_repz_scas</name><argument_list pos:start="3715:26" pos:end="3715:78">(<argument pos:start="3715:27" pos:end="3715:27"><expr pos:start="3715:27" pos:end="3715:27"><name pos:start="3715:27" pos:end="3715:27">s</name></expr></argument>, <argument pos:start="3715:30" pos:end="3715:31"><expr pos:start="3715:30" pos:end="3715:31"><name pos:start="3715:30" pos:end="3715:31">ot</name></expr></argument>, <argument pos:start="3715:34" pos:end="3715:54"><expr pos:start="3715:34" pos:end="3715:54"><name pos:start="3715:34" pos:end="3715:41">pc_start</name> <operator pos:start="3715:43" pos:end="3715:43">-</operator> <name pos:start="3715:45" pos:end="3715:54"><name pos:start="3715:45" pos:end="3715:45">s</name><operator pos:start="3715:46" pos:end="3715:47">-&gt;</operator><name pos:start="3715:48" pos:end="3715:54">cs_base</name></name></expr></argument>, <argument pos:start="3715:57" pos:end="3715:74"><expr pos:start="3715:57" pos:end="3715:74"><name pos:start="3715:57" pos:end="3715:61"><name pos:start="3715:57" pos:end="3715:57">s</name><operator pos:start="3715:58" pos:end="3715:59">-&gt;</operator><name pos:start="3715:60" pos:end="3715:61">pc</name></name> <operator pos:start="3715:63" pos:end="3715:63">-</operator> <name pos:start="3715:65" pos:end="3715:74"><name pos:start="3715:65" pos:end="3715:65">s</name><operator pos:start="3715:66" pos:end="3715:67">-&gt;</operator><name pos:start="3715:68" pos:end="3715:74">cs_base</name></name></expr></argument>, <argument pos:start="3715:77" pos:end="3715:77"><expr pos:start="3715:77" pos:end="3715:77"><literal type="number" pos:start="3715:77" pos:end="3715:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3717:11" pos:end="3721:9">else <block pos:start="3717:16" pos:end="3721:9">{<block_content pos:start="3719:13" pos:end="3719:28">

            <expr_stmt pos:start="3719:13" pos:end="3719:28"><expr pos:start="3719:13" pos:end="3719:27"><call pos:start="3719:13" pos:end="3719:27"><name pos:start="3719:13" pos:end="3719:20">gen_scas</name><argument_list pos:start="3719:21" pos:end="3719:27">(<argument pos:start="3719:22" pos:end="3719:22"><expr pos:start="3719:22" pos:end="3719:22"><name pos:start="3719:22" pos:end="3719:22">s</name></expr></argument>, <argument pos:start="3719:25" pos:end="3719:26"><expr pos:start="3719:25" pos:end="3719:26"><name pos:start="3719:25" pos:end="3719:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3723:9" pos:end="3723:14">break;</break>



    <case pos:start="3727:5" pos:end="3727:14">case <expr pos:start="3727:10" pos:end="3727:13"><literal type="number" pos:start="3727:10" pos:end="3727:13">0xa6</literal></expr>:</case> <comment type="block" pos:start="3727:16" pos:end="3727:26">/* cmpsS */</comment>

    <case pos:start="3729:5" pos:end="3729:14">case <expr pos:start="3729:10" pos:end="3729:13"><literal type="number" pos:start="3729:10" pos:end="3729:13">0xa7</literal></expr>:</case>

        <expr_stmt pos:start="3731:9" pos:end="3731:30"><expr pos:start="3731:9" pos:end="3731:29"><name pos:start="3731:9" pos:end="3731:10">ot</name> <operator pos:start="3731:12" pos:end="3731:12">=</operator> <call pos:start="3731:14" pos:end="3731:29"><name pos:start="3731:14" pos:end="3731:19">mo_b_d</name><argument_list pos:start="3731:20" pos:end="3731:29">(<argument pos:start="3731:21" pos:end="3731:21"><expr pos:start="3731:21" pos:end="3731:21"><name pos:start="3731:21" pos:end="3731:21">b</name></expr></argument>, <argument pos:start="3731:24" pos:end="3731:28"><expr pos:start="3731:24" pos:end="3731:28"><name pos:start="3731:24" pos:end="3731:28">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3733:9" pos:end="3745:9"><if pos:start="3733:9" pos:end="3737:9">if <condition pos:start="3733:12" pos:end="3733:36">(<expr pos:start="3733:13" pos:end="3733:35"><name pos:start="3733:13" pos:end="3733:20">prefixes</name> <operator pos:start="3733:22" pos:end="3733:22">&amp;</operator> <name pos:start="3733:24" pos:end="3733:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3733:38" pos:end="3737:9">{<block_content pos:start="3735:13" pos:end="3735:79">

            <expr_stmt pos:start="3735:13" pos:end="3735:79"><expr pos:start="3735:13" pos:end="3735:78"><call pos:start="3735:13" pos:end="3735:78"><name pos:start="3735:13" pos:end="3735:25">gen_repz_cmps</name><argument_list pos:start="3735:26" pos:end="3735:78">(<argument pos:start="3735:27" pos:end="3735:27"><expr pos:start="3735:27" pos:end="3735:27"><name pos:start="3735:27" pos:end="3735:27">s</name></expr></argument>, <argument pos:start="3735:30" pos:end="3735:31"><expr pos:start="3735:30" pos:end="3735:31"><name pos:start="3735:30" pos:end="3735:31">ot</name></expr></argument>, <argument pos:start="3735:34" pos:end="3735:54"><expr pos:start="3735:34" pos:end="3735:54"><name pos:start="3735:34" pos:end="3735:41">pc_start</name> <operator pos:start="3735:43" pos:end="3735:43">-</operator> <name pos:start="3735:45" pos:end="3735:54"><name pos:start="3735:45" pos:end="3735:45">s</name><operator pos:start="3735:46" pos:end="3735:47">-&gt;</operator><name pos:start="3735:48" pos:end="3735:54">cs_base</name></name></expr></argument>, <argument pos:start="3735:57" pos:end="3735:74"><expr pos:start="3735:57" pos:end="3735:74"><name pos:start="3735:57" pos:end="3735:61"><name pos:start="3735:57" pos:end="3735:57">s</name><operator pos:start="3735:58" pos:end="3735:59">-&gt;</operator><name pos:start="3735:60" pos:end="3735:61">pc</name></name> <operator pos:start="3735:63" pos:end="3735:63">-</operator> <name pos:start="3735:65" pos:end="3735:74"><name pos:start="3735:65" pos:end="3735:65">s</name><operator pos:start="3735:66" pos:end="3735:67">-&gt;</operator><name pos:start="3735:68" pos:end="3735:74">cs_base</name></name></expr></argument>, <argument pos:start="3735:77" pos:end="3735:77"><expr pos:start="3735:77" pos:end="3735:77"><literal type="number" pos:start="3735:77" pos:end="3735:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3737:11" pos:end="3741:9">else if <condition pos:start="3737:19" pos:end="3737:42">(<expr pos:start="3737:20" pos:end="3737:41"><name pos:start="3737:20" pos:end="3737:27">prefixes</name> <operator pos:start="3737:29" pos:end="3737:29">&amp;</operator> <name pos:start="3737:31" pos:end="3737:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3737:44" pos:end="3741:9">{<block_content pos:start="3739:13" pos:end="3739:79">

            <expr_stmt pos:start="3739:13" pos:end="3739:79"><expr pos:start="3739:13" pos:end="3739:78"><call pos:start="3739:13" pos:end="3739:78"><name pos:start="3739:13" pos:end="3739:25">gen_repz_cmps</name><argument_list pos:start="3739:26" pos:end="3739:78">(<argument pos:start="3739:27" pos:end="3739:27"><expr pos:start="3739:27" pos:end="3739:27"><name pos:start="3739:27" pos:end="3739:27">s</name></expr></argument>, <argument pos:start="3739:30" pos:end="3739:31"><expr pos:start="3739:30" pos:end="3739:31"><name pos:start="3739:30" pos:end="3739:31">ot</name></expr></argument>, <argument pos:start="3739:34" pos:end="3739:54"><expr pos:start="3739:34" pos:end="3739:54"><name pos:start="3739:34" pos:end="3739:41">pc_start</name> <operator pos:start="3739:43" pos:end="3739:43">-</operator> <name pos:start="3739:45" pos:end="3739:54"><name pos:start="3739:45" pos:end="3739:45">s</name><operator pos:start="3739:46" pos:end="3739:47">-&gt;</operator><name pos:start="3739:48" pos:end="3739:54">cs_base</name></name></expr></argument>, <argument pos:start="3739:57" pos:end="3739:74"><expr pos:start="3739:57" pos:end="3739:74"><name pos:start="3739:57" pos:end="3739:61"><name pos:start="3739:57" pos:end="3739:57">s</name><operator pos:start="3739:58" pos:end="3739:59">-&gt;</operator><name pos:start="3739:60" pos:end="3739:61">pc</name></name> <operator pos:start="3739:63" pos:end="3739:63">-</operator> <name pos:start="3739:65" pos:end="3739:74"><name pos:start="3739:65" pos:end="3739:65">s</name><operator pos:start="3739:66" pos:end="3739:67">-&gt;</operator><name pos:start="3739:68" pos:end="3739:74">cs_base</name></name></expr></argument>, <argument pos:start="3739:77" pos:end="3739:77"><expr pos:start="3739:77" pos:end="3739:77"><literal type="number" pos:start="3739:77" pos:end="3739:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3741:11" pos:end="3745:9">else <block pos:start="3741:16" pos:end="3745:9">{<block_content pos:start="3743:13" pos:end="3743:28">

            <expr_stmt pos:start="3743:13" pos:end="3743:28"><expr pos:start="3743:13" pos:end="3743:27"><call pos:start="3743:13" pos:end="3743:27"><name pos:start="3743:13" pos:end="3743:20">gen_cmps</name><argument_list pos:start="3743:21" pos:end="3743:27">(<argument pos:start="3743:22" pos:end="3743:22"><expr pos:start="3743:22" pos:end="3743:22"><name pos:start="3743:22" pos:end="3743:22">s</name></expr></argument>, <argument pos:start="3743:25" pos:end="3743:26"><expr pos:start="3743:25" pos:end="3743:26"><name pos:start="3743:25" pos:end="3743:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3747:9" pos:end="3747:14">break;</break>

    <case pos:start="3749:5" pos:end="3749:14">case <expr pos:start="3749:10" pos:end="3749:13"><literal type="number" pos:start="3749:10" pos:end="3749:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="3749:16" pos:end="3749:25">/* insS */</comment>

    <case pos:start="3751:5" pos:end="3751:14">case <expr pos:start="3751:10" pos:end="3751:13"><literal type="number" pos:start="3751:10" pos:end="3751:13">0x6d</literal></expr>:</case>

        <expr_stmt pos:start="3753:9" pos:end="3753:32"><expr pos:start="3753:9" pos:end="3753:31"><name pos:start="3753:9" pos:end="3753:10">ot</name> <operator pos:start="3753:12" pos:end="3753:12">=</operator> <call pos:start="3753:14" pos:end="3753:31"><name pos:start="3753:14" pos:end="3753:21">mo_b_d32</name><argument_list pos:start="3753:22" pos:end="3753:31">(<argument pos:start="3753:23" pos:end="3753:23"><expr pos:start="3753:23" pos:end="3753:23"><name pos:start="3753:23" pos:end="3753:23">b</name></expr></argument>, <argument pos:start="3753:26" pos:end="3753:30"><expr pos:start="3753:26" pos:end="3753:30"><name pos:start="3753:26" pos:end="3753:30">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3755:9" pos:end="3755:51"><expr pos:start="3755:9" pos:end="3755:50"><call pos:start="3755:9" pos:end="3755:50"><name pos:start="3755:9" pos:end="3755:25">tcg_gen_ext16u_tl</name><argument_list pos:start="3755:26" pos:end="3755:50">(<argument pos:start="3755:27" pos:end="3755:32"><expr pos:start="3755:27" pos:end="3755:32"><name pos:start="3755:27" pos:end="3755:32">cpu_T0</name></expr></argument>, <argument pos:start="3755:35" pos:end="3755:49"><expr pos:start="3755:35" pos:end="3755:49"><name pos:start="3755:35" pos:end="3755:49"><name pos:start="3755:35" pos:end="3755:42">cpu_regs</name><index pos:start="3755:43" pos:end="3755:49">[<expr pos:start="3755:44" pos:end="3755:48"><name pos:start="3755:44" pos:end="3755:48">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3757:9" pos:end="3759:68"><expr pos:start="3757:9" pos:end="3759:67"><call pos:start="3757:9" pos:end="3759:67"><name pos:start="3757:9" pos:end="3757:20">gen_check_io</name><argument_list pos:start="3757:21" pos:end="3759:67">(<argument pos:start="3757:22" pos:end="3757:22"><expr pos:start="3757:22" pos:end="3757:22"><name pos:start="3757:22" pos:end="3757:22">s</name></expr></argument>, <argument pos:start="3757:25" pos:end="3757:26"><expr pos:start="3757:25" pos:end="3757:26"><name pos:start="3757:25" pos:end="3757:26">ot</name></expr></argument>, <argument pos:start="3757:29" pos:end="3757:49"><expr pos:start="3757:29" pos:end="3757:49"><name pos:start="3757:29" pos:end="3757:36">pc_start</name> <operator pos:start="3757:38" pos:end="3757:38">-</operator> <name pos:start="3757:40" pos:end="3757:49"><name pos:start="3757:40" pos:end="3757:40">s</name><operator pos:start="3757:41" pos:end="3757:42">-&gt;</operator><name pos:start="3757:43" pos:end="3757:49">cs_base</name></name></expr></argument>, 

                     <argument pos:start="3759:22" pos:end="3759:66"><expr pos:start="3759:22" pos:end="3759:66"><name pos:start="3759:22" pos:end="3759:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="3759:41" pos:end="3759:41">|</operator> <call pos:start="3759:43" pos:end="3759:62"><name pos:start="3759:43" pos:end="3759:52">svm_is_rep</name><argument_list pos:start="3759:53" pos:end="3759:62">(<argument pos:start="3759:54" pos:end="3759:61"><expr pos:start="3759:54" pos:end="3759:61"><name pos:start="3759:54" pos:end="3759:61">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="3759:64" pos:end="3759:64">|</operator> <literal type="number" pos:start="3759:66" pos:end="3759:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3761:9" pos:end="3775:9"><if pos:start="3761:9" pos:end="3765:9">if <condition pos:start="3761:12" pos:end="3761:52">(<expr pos:start="3761:13" pos:end="3761:51"><name pos:start="3761:13" pos:end="3761:20">prefixes</name> <operator pos:start="3761:22" pos:end="3761:22">&amp;</operator> <operator pos:start="3761:24" pos:end="3761:24">(</operator><name pos:start="3761:25" pos:end="3761:35">PREFIX_REPZ</name> <operator pos:start="3761:37" pos:end="3761:37">|</operator> <name pos:start="3761:39" pos:end="3761:50">PREFIX_REPNZ</name><operator pos:start="3761:51" pos:end="3761:51">)</operator></expr>)</condition> <block pos:start="3761:54" pos:end="3765:9">{<block_content pos:start="3763:13" pos:end="3763:75">

            <expr_stmt pos:start="3763:13" pos:end="3763:75"><expr pos:start="3763:13" pos:end="3763:74"><call pos:start="3763:13" pos:end="3763:74"><name pos:start="3763:13" pos:end="3763:24">gen_repz_ins</name><argument_list pos:start="3763:25" pos:end="3763:74">(<argument pos:start="3763:26" pos:end="3763:26"><expr pos:start="3763:26" pos:end="3763:26"><name pos:start="3763:26" pos:end="3763:26">s</name></expr></argument>, <argument pos:start="3763:29" pos:end="3763:30"><expr pos:start="3763:29" pos:end="3763:30"><name pos:start="3763:29" pos:end="3763:30">ot</name></expr></argument>, <argument pos:start="3763:33" pos:end="3763:53"><expr pos:start="3763:33" pos:end="3763:53"><name pos:start="3763:33" pos:end="3763:40">pc_start</name> <operator pos:start="3763:42" pos:end="3763:42">-</operator> <name pos:start="3763:44" pos:end="3763:53"><name pos:start="3763:44" pos:end="3763:44">s</name><operator pos:start="3763:45" pos:end="3763:46">-&gt;</operator><name pos:start="3763:47" pos:end="3763:53">cs_base</name></name></expr></argument>, <argument pos:start="3763:56" pos:end="3763:73"><expr pos:start="3763:56" pos:end="3763:73"><name pos:start="3763:56" pos:end="3763:60"><name pos:start="3763:56" pos:end="3763:56">s</name><operator pos:start="3763:57" pos:end="3763:58">-&gt;</operator><name pos:start="3763:59" pos:end="3763:60">pc</name></name> <operator pos:start="3763:62" pos:end="3763:62">-</operator> <name pos:start="3763:64" pos:end="3763:73"><name pos:start="3763:64" pos:end="3763:64">s</name><operator pos:start="3763:65" pos:end="3763:66">-&gt;</operator><name pos:start="3763:67" pos:end="3763:73">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3765:11" pos:end="3775:9">else <block pos:start="3765:16" pos:end="3775:9">{<block_content pos:start="3767:13" pos:end="3773:13">

            <expr_stmt pos:start="3767:13" pos:end="3767:27"><expr pos:start="3767:13" pos:end="3767:26"><call pos:start="3767:13" pos:end="3767:26"><name pos:start="3767:13" pos:end="3767:19">gen_ins</name><argument_list pos:start="3767:20" pos:end="3767:26">(<argument pos:start="3767:21" pos:end="3767:21"><expr pos:start="3767:21" pos:end="3767:21"><name pos:start="3767:21" pos:end="3767:21">s</name></expr></argument>, <argument pos:start="3767:24" pos:end="3767:25"><expr pos:start="3767:24" pos:end="3767:25"><name pos:start="3767:24" pos:end="3767:25">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3769:13" pos:end="3773:13"><if pos:start="3769:13" pos:end="3773:13">if <condition pos:start="3769:16" pos:end="3769:54">(<expr pos:start="3769:17" pos:end="3769:53"><call pos:start="3769:17" pos:end="3769:37"><name pos:start="3769:17" pos:end="3769:25">tb_cflags</name><argument_list pos:start="3769:26" pos:end="3769:37">(<argument pos:start="3769:27" pos:end="3769:36"><expr pos:start="3769:27" pos:end="3769:36"><name pos:start="3769:27" pos:end="3769:36"><name pos:start="3769:27" pos:end="3769:27">s</name><operator pos:start="3769:28" pos:end="3769:29">-&gt;</operator><name pos:start="3769:30" pos:end="3769:33">base</name><operator pos:start="3769:34" pos:end="3769:34">.</operator><name pos:start="3769:35" pos:end="3769:36">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3769:39" pos:end="3769:39">&amp;</operator> <name pos:start="3769:41" pos:end="3769:53">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3769:56" pos:end="3773:13">{<block_content pos:start="3771:17" pos:end="3771:47">

                <expr_stmt pos:start="3771:17" pos:end="3771:47"><expr pos:start="3771:17" pos:end="3771:46"><call pos:start="3771:17" pos:end="3771:46"><name pos:start="3771:17" pos:end="3771:23">gen_jmp</name><argument_list pos:start="3771:24" pos:end="3771:46">(<argument pos:start="3771:25" pos:end="3771:25"><expr pos:start="3771:25" pos:end="3771:25"><name pos:start="3771:25" pos:end="3771:25">s</name></expr></argument>, <argument pos:start="3771:28" pos:end="3771:45"><expr pos:start="3771:28" pos:end="3771:45"><name pos:start="3771:28" pos:end="3771:32"><name pos:start="3771:28" pos:end="3771:28">s</name><operator pos:start="3771:29" pos:end="3771:30">-&gt;</operator><name pos:start="3771:31" pos:end="3771:32">pc</name></name> <operator pos:start="3771:34" pos:end="3771:34">-</operator> <name pos:start="3771:36" pos:end="3771:45"><name pos:start="3771:36" pos:end="3771:36">s</name><operator pos:start="3771:37" pos:end="3771:38">-&gt;</operator><name pos:start="3771:39" pos:end="3771:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3777:9" pos:end="3777:14">break;</break>

    <case pos:start="3779:5" pos:end="3779:14">case <expr pos:start="3779:10" pos:end="3779:13"><literal type="number" pos:start="3779:10" pos:end="3779:13">0x6e</literal></expr>:</case> <comment type="block" pos:start="3779:16" pos:end="3779:26">/* outsS */</comment>

    <case pos:start="3781:5" pos:end="3781:14">case <expr pos:start="3781:10" pos:end="3781:13"><literal type="number" pos:start="3781:10" pos:end="3781:13">0x6f</literal></expr>:</case>

        <expr_stmt pos:start="3783:9" pos:end="3783:32"><expr pos:start="3783:9" pos:end="3783:31"><name pos:start="3783:9" pos:end="3783:10">ot</name> <operator pos:start="3783:12" pos:end="3783:12">=</operator> <call pos:start="3783:14" pos:end="3783:31"><name pos:start="3783:14" pos:end="3783:21">mo_b_d32</name><argument_list pos:start="3783:22" pos:end="3783:31">(<argument pos:start="3783:23" pos:end="3783:23"><expr pos:start="3783:23" pos:end="3783:23"><name pos:start="3783:23" pos:end="3783:23">b</name></expr></argument>, <argument pos:start="3783:26" pos:end="3783:30"><expr pos:start="3783:26" pos:end="3783:30"><name pos:start="3783:26" pos:end="3783:30">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3785:9" pos:end="3785:51"><expr pos:start="3785:9" pos:end="3785:50"><call pos:start="3785:9" pos:end="3785:50"><name pos:start="3785:9" pos:end="3785:25">tcg_gen_ext16u_tl</name><argument_list pos:start="3785:26" pos:end="3785:50">(<argument pos:start="3785:27" pos:end="3785:32"><expr pos:start="3785:27" pos:end="3785:32"><name pos:start="3785:27" pos:end="3785:32">cpu_T0</name></expr></argument>, <argument pos:start="3785:35" pos:end="3785:49"><expr pos:start="3785:35" pos:end="3785:49"><name pos:start="3785:35" pos:end="3785:49"><name pos:start="3785:35" pos:end="3785:42">cpu_regs</name><index pos:start="3785:43" pos:end="3785:49">[<expr pos:start="3785:44" pos:end="3785:48"><name pos:start="3785:44" pos:end="3785:48">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3787:9" pos:end="3789:47"><expr pos:start="3787:9" pos:end="3789:46"><call pos:start="3787:9" pos:end="3789:46"><name pos:start="3787:9" pos:end="3787:20">gen_check_io</name><argument_list pos:start="3787:21" pos:end="3789:46">(<argument pos:start="3787:22" pos:end="3787:22"><expr pos:start="3787:22" pos:end="3787:22"><name pos:start="3787:22" pos:end="3787:22">s</name></expr></argument>, <argument pos:start="3787:25" pos:end="3787:26"><expr pos:start="3787:25" pos:end="3787:26"><name pos:start="3787:25" pos:end="3787:26">ot</name></expr></argument>, <argument pos:start="3787:29" pos:end="3787:49"><expr pos:start="3787:29" pos:end="3787:49"><name pos:start="3787:29" pos:end="3787:36">pc_start</name> <operator pos:start="3787:38" pos:end="3787:38">-</operator> <name pos:start="3787:40" pos:end="3787:49"><name pos:start="3787:40" pos:end="3787:40">s</name><operator pos:start="3787:41" pos:end="3787:42">-&gt;</operator><name pos:start="3787:43" pos:end="3787:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="3789:22" pos:end="3789:45"><expr pos:start="3789:22" pos:end="3789:45"><call pos:start="3789:22" pos:end="3789:41"><name pos:start="3789:22" pos:end="3789:31">svm_is_rep</name><argument_list pos:start="3789:32" pos:end="3789:41">(<argument pos:start="3789:33" pos:end="3789:40"><expr pos:start="3789:33" pos:end="3789:40"><name pos:start="3789:33" pos:end="3789:40">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="3789:43" pos:end="3789:43">|</operator> <literal type="number" pos:start="3789:45" pos:end="3789:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3791:9" pos:end="3805:9"><if pos:start="3791:9" pos:end="3795:9">if <condition pos:start="3791:12" pos:end="3791:52">(<expr pos:start="3791:13" pos:end="3791:51"><name pos:start="3791:13" pos:end="3791:20">prefixes</name> <operator pos:start="3791:22" pos:end="3791:22">&amp;</operator> <operator pos:start="3791:24" pos:end="3791:24">(</operator><name pos:start="3791:25" pos:end="3791:35">PREFIX_REPZ</name> <operator pos:start="3791:37" pos:end="3791:37">|</operator> <name pos:start="3791:39" pos:end="3791:50">PREFIX_REPNZ</name><operator pos:start="3791:51" pos:end="3791:51">)</operator></expr>)</condition> <block pos:start="3791:54" pos:end="3795:9">{<block_content pos:start="3793:13" pos:end="3793:76">

            <expr_stmt pos:start="3793:13" pos:end="3793:76"><expr pos:start="3793:13" pos:end="3793:75"><call pos:start="3793:13" pos:end="3793:75"><name pos:start="3793:13" pos:end="3793:25">gen_repz_outs</name><argument_list pos:start="3793:26" pos:end="3793:75">(<argument pos:start="3793:27" pos:end="3793:27"><expr pos:start="3793:27" pos:end="3793:27"><name pos:start="3793:27" pos:end="3793:27">s</name></expr></argument>, <argument pos:start="3793:30" pos:end="3793:31"><expr pos:start="3793:30" pos:end="3793:31"><name pos:start="3793:30" pos:end="3793:31">ot</name></expr></argument>, <argument pos:start="3793:34" pos:end="3793:54"><expr pos:start="3793:34" pos:end="3793:54"><name pos:start="3793:34" pos:end="3793:41">pc_start</name> <operator pos:start="3793:43" pos:end="3793:43">-</operator> <name pos:start="3793:45" pos:end="3793:54"><name pos:start="3793:45" pos:end="3793:45">s</name><operator pos:start="3793:46" pos:end="3793:47">-&gt;</operator><name pos:start="3793:48" pos:end="3793:54">cs_base</name></name></expr></argument>, <argument pos:start="3793:57" pos:end="3793:74"><expr pos:start="3793:57" pos:end="3793:74"><name pos:start="3793:57" pos:end="3793:61"><name pos:start="3793:57" pos:end="3793:57">s</name><operator pos:start="3793:58" pos:end="3793:59">-&gt;</operator><name pos:start="3793:60" pos:end="3793:61">pc</name></name> <operator pos:start="3793:63" pos:end="3793:63">-</operator> <name pos:start="3793:65" pos:end="3793:74"><name pos:start="3793:65" pos:end="3793:65">s</name><operator pos:start="3793:66" pos:end="3793:67">-&gt;</operator><name pos:start="3793:68" pos:end="3793:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3795:11" pos:end="3805:9">else <block pos:start="3795:16" pos:end="3805:9">{<block_content pos:start="3797:13" pos:end="3803:13">

            <expr_stmt pos:start="3797:13" pos:end="3797:28"><expr pos:start="3797:13" pos:end="3797:27"><call pos:start="3797:13" pos:end="3797:27"><name pos:start="3797:13" pos:end="3797:20">gen_outs</name><argument_list pos:start="3797:21" pos:end="3797:27">(<argument pos:start="3797:22" pos:end="3797:22"><expr pos:start="3797:22" pos:end="3797:22"><name pos:start="3797:22" pos:end="3797:22">s</name></expr></argument>, <argument pos:start="3797:25" pos:end="3797:26"><expr pos:start="3797:25" pos:end="3797:26"><name pos:start="3797:25" pos:end="3797:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3799:13" pos:end="3803:13"><if pos:start="3799:13" pos:end="3803:13">if <condition pos:start="3799:16" pos:end="3799:54">(<expr pos:start="3799:17" pos:end="3799:53"><call pos:start="3799:17" pos:end="3799:37"><name pos:start="3799:17" pos:end="3799:25">tb_cflags</name><argument_list pos:start="3799:26" pos:end="3799:37">(<argument pos:start="3799:27" pos:end="3799:36"><expr pos:start="3799:27" pos:end="3799:36"><name pos:start="3799:27" pos:end="3799:36"><name pos:start="3799:27" pos:end="3799:27">s</name><operator pos:start="3799:28" pos:end="3799:29">-&gt;</operator><name pos:start="3799:30" pos:end="3799:33">base</name><operator pos:start="3799:34" pos:end="3799:34">.</operator><name pos:start="3799:35" pos:end="3799:36">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3799:39" pos:end="3799:39">&amp;</operator> <name pos:start="3799:41" pos:end="3799:53">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3799:56" pos:end="3803:13">{<block_content pos:start="3801:17" pos:end="3801:47">

                <expr_stmt pos:start="3801:17" pos:end="3801:47"><expr pos:start="3801:17" pos:end="3801:46"><call pos:start="3801:17" pos:end="3801:46"><name pos:start="3801:17" pos:end="3801:23">gen_jmp</name><argument_list pos:start="3801:24" pos:end="3801:46">(<argument pos:start="3801:25" pos:end="3801:25"><expr pos:start="3801:25" pos:end="3801:25"><name pos:start="3801:25" pos:end="3801:25">s</name></expr></argument>, <argument pos:start="3801:28" pos:end="3801:45"><expr pos:start="3801:28" pos:end="3801:45"><name pos:start="3801:28" pos:end="3801:32"><name pos:start="3801:28" pos:end="3801:28">s</name><operator pos:start="3801:29" pos:end="3801:30">-&gt;</operator><name pos:start="3801:31" pos:end="3801:32">pc</name></name> <operator pos:start="3801:34" pos:end="3801:34">-</operator> <name pos:start="3801:36" pos:end="3801:45"><name pos:start="3801:36" pos:end="3801:36">s</name><operator pos:start="3801:37" pos:end="3801:38">-&gt;</operator><name pos:start="3801:39" pos:end="3801:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3807:9" pos:end="3807:14">break;</break>



        <comment type="block" format="doxygen" pos:start="3811:9" pos:end="3811:34">/************************/</comment>

        <comment type="block" pos:start="3813:9" pos:end="3813:22">/* port I/O */</comment>



    <case pos:start="3817:5" pos:end="3817:14">case <expr pos:start="3817:10" pos:end="3817:13"><literal type="number" pos:start="3817:10" pos:end="3817:13">0xe4</literal></expr>:</case>

    <case pos:start="3819:5" pos:end="3819:14">case <expr pos:start="3819:10" pos:end="3819:13"><literal type="number" pos:start="3819:10" pos:end="3819:13">0xe5</literal></expr>:</case>

        <expr_stmt pos:start="3821:9" pos:end="3821:32"><expr pos:start="3821:9" pos:end="3821:31"><name pos:start="3821:9" pos:end="3821:10">ot</name> <operator pos:start="3821:12" pos:end="3821:12">=</operator> <call pos:start="3821:14" pos:end="3821:31"><name pos:start="3821:14" pos:end="3821:21">mo_b_d32</name><argument_list pos:start="3821:22" pos:end="3821:31">(<argument pos:start="3821:23" pos:end="3821:23"><expr pos:start="3821:23" pos:end="3821:23"><name pos:start="3821:23" pos:end="3821:23">b</name></expr></argument>, <argument pos:start="3821:26" pos:end="3821:30"><expr pos:start="3821:26" pos:end="3821:30"><name pos:start="3821:26" pos:end="3821:30">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3823:9" pos:end="3823:36"><expr pos:start="3823:9" pos:end="3823:35"><name pos:start="3823:9" pos:end="3823:11">val</name> <operator pos:start="3823:13" pos:end="3823:13">=</operator> <call pos:start="3823:15" pos:end="3823:35"><name pos:start="3823:15" pos:end="3823:27">x86_ldub_code</name><argument_list pos:start="3823:28" pos:end="3823:35">(<argument pos:start="3823:29" pos:end="3823:31"><expr pos:start="3823:29" pos:end="3823:31"><name pos:start="3823:29" pos:end="3823:31">env</name></expr></argument>, <argument pos:start="3823:34" pos:end="3823:34"><expr pos:start="3823:34" pos:end="3823:34"><name pos:start="3823:34" pos:end="3823:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3825:9" pos:end="3825:37"><expr pos:start="3825:9" pos:end="3825:36"><call pos:start="3825:9" pos:end="3825:36"><name pos:start="3825:9" pos:end="3825:23">tcg_gen_movi_tl</name><argument_list pos:start="3825:24" pos:end="3825:36">(<argument pos:start="3825:25" pos:end="3825:30"><expr pos:start="3825:25" pos:end="3825:30"><name pos:start="3825:25" pos:end="3825:30">cpu_T0</name></expr></argument>, <argument pos:start="3825:33" pos:end="3825:35"><expr pos:start="3825:33" pos:end="3825:35"><name pos:start="3825:33" pos:end="3825:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3827:9" pos:end="3829:64"><expr pos:start="3827:9" pos:end="3829:63"><call pos:start="3827:9" pos:end="3829:63"><name pos:start="3827:9" pos:end="3827:20">gen_check_io</name><argument_list pos:start="3827:21" pos:end="3829:63">(<argument pos:start="3827:22" pos:end="3827:22"><expr pos:start="3827:22" pos:end="3827:22"><name pos:start="3827:22" pos:end="3827:22">s</name></expr></argument>, <argument pos:start="3827:25" pos:end="3827:26"><expr pos:start="3827:25" pos:end="3827:26"><name pos:start="3827:25" pos:end="3827:26">ot</name></expr></argument>, <argument pos:start="3827:29" pos:end="3827:49"><expr pos:start="3827:29" pos:end="3827:49"><name pos:start="3827:29" pos:end="3827:36">pc_start</name> <operator pos:start="3827:38" pos:end="3827:38">-</operator> <name pos:start="3827:40" pos:end="3827:49"><name pos:start="3827:40" pos:end="3827:40">s</name><operator pos:start="3827:41" pos:end="3827:42">-&gt;</operator><name pos:start="3827:43" pos:end="3827:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="3829:22" pos:end="3829:62"><expr pos:start="3829:22" pos:end="3829:62"><name pos:start="3829:22" pos:end="3829:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="3829:41" pos:end="3829:41">|</operator> <call pos:start="3829:43" pos:end="3829:62"><name pos:start="3829:43" pos:end="3829:52">svm_is_rep</name><argument_list pos:start="3829:53" pos:end="3829:62">(<argument pos:start="3829:54" pos:end="3829:61"><expr pos:start="3829:54" pos:end="3829:61"><name pos:start="3829:54" pos:end="3829:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3831:9" pos:end="3835:9"><if pos:start="3831:9" pos:end="3835:9">if <condition pos:start="3831:12" pos:end="3831:50">(<expr pos:start="3831:13" pos:end="3831:49"><call pos:start="3831:13" pos:end="3831:33"><name pos:start="3831:13" pos:end="3831:21">tb_cflags</name><argument_list pos:start="3831:22" pos:end="3831:33">(<argument pos:start="3831:23" pos:end="3831:32"><expr pos:start="3831:23" pos:end="3831:32"><name pos:start="3831:23" pos:end="3831:32"><name pos:start="3831:23" pos:end="3831:23">s</name><operator pos:start="3831:24" pos:end="3831:25">-&gt;</operator><name pos:start="3831:26" pos:end="3831:29">base</name><operator pos:start="3831:30" pos:end="3831:30">.</operator><name pos:start="3831:31" pos:end="3831:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3831:35" pos:end="3831:35">&amp;</operator> <name pos:start="3831:37" pos:end="3831:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3831:52" pos:end="3835:9">{<block_content pos:start="3833:13" pos:end="3833:27">

            <expr_stmt pos:start="3833:13" pos:end="3833:27"><expr pos:start="3833:13" pos:end="3833:26"><call pos:start="3833:13" pos:end="3833:26"><name pos:start="3833:13" pos:end="3833:24">gen_io_start</name><argument_list pos:start="3833:25" pos:end="3833:26">()</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3837:9" pos:end="3837:44"><expr pos:start="3837:9" pos:end="3837:43"><call pos:start="3837:9" pos:end="3837:43"><name pos:start="3837:9" pos:end="3837:24">tcg_gen_movi_i32</name><argument_list pos:start="3837:25" pos:end="3837:43">(<argument pos:start="3837:26" pos:end="3837:37"><expr pos:start="3837:26" pos:end="3837:37"><name pos:start="3837:26" pos:end="3837:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3837:40" pos:end="3837:42"><expr pos:start="3837:40" pos:end="3837:42"><name pos:start="3837:40" pos:end="3837:42">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3839:9" pos:end="3839:53"><expr pos:start="3839:9" pos:end="3839:52"><call pos:start="3839:9" pos:end="3839:52"><name pos:start="3839:9" pos:end="3839:26">gen_helper_in_func</name><argument_list pos:start="3839:27" pos:end="3839:52">(<argument pos:start="3839:28" pos:end="3839:29"><expr pos:start="3839:28" pos:end="3839:29"><name pos:start="3839:28" pos:end="3839:29">ot</name></expr></argument>, <argument pos:start="3839:32" pos:end="3839:37"><expr pos:start="3839:32" pos:end="3839:37"><name pos:start="3839:32" pos:end="3839:37">cpu_T1</name></expr></argument>, <argument pos:start="3839:40" pos:end="3839:51"><expr pos:start="3839:40" pos:end="3839:51"><name pos:start="3839:40" pos:end="3839:51">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3841:9" pos:end="3841:44"><expr pos:start="3841:9" pos:end="3841:43"><call pos:start="3841:9" pos:end="3841:43"><name pos:start="3841:9" pos:end="3841:24">gen_op_mov_reg_v</name><argument_list pos:start="3841:25" pos:end="3841:43">(<argument pos:start="3841:26" pos:end="3841:27"><expr pos:start="3841:26" pos:end="3841:27"><name pos:start="3841:26" pos:end="3841:27">ot</name></expr></argument>, <argument pos:start="3841:30" pos:end="3841:34"><expr pos:start="3841:30" pos:end="3841:34"><name pos:start="3841:30" pos:end="3841:34">R_EAX</name></expr></argument>, <argument pos:start="3841:37" pos:end="3841:42"><expr pos:start="3841:37" pos:end="3841:42"><name pos:start="3841:37" pos:end="3841:42">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3843:9" pos:end="3843:40"><expr pos:start="3843:9" pos:end="3843:39"><call pos:start="3843:9" pos:end="3843:39"><name pos:start="3843:9" pos:end="3843:18">gen_bpt_io</name><argument_list pos:start="3843:19" pos:end="3843:39">(<argument pos:start="3843:20" pos:end="3843:20"><expr pos:start="3843:20" pos:end="3843:20"><name pos:start="3843:20" pos:end="3843:20">s</name></expr></argument>, <argument pos:start="3843:23" pos:end="3843:34"><expr pos:start="3843:23" pos:end="3843:34"><name pos:start="3843:23" pos:end="3843:34">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3843:37" pos:end="3843:38"><expr pos:start="3843:37" pos:end="3843:38"><name pos:start="3843:37" pos:end="3843:38">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3845:9" pos:end="3851:9"><if pos:start="3845:9" pos:end="3851:9">if <condition pos:start="3845:12" pos:end="3845:50">(<expr pos:start="3845:13" pos:end="3845:49"><call pos:start="3845:13" pos:end="3845:33"><name pos:start="3845:13" pos:end="3845:21">tb_cflags</name><argument_list pos:start="3845:22" pos:end="3845:33">(<argument pos:start="3845:23" pos:end="3845:32"><expr pos:start="3845:23" pos:end="3845:32"><name pos:start="3845:23" pos:end="3845:32"><name pos:start="3845:23" pos:end="3845:23">s</name><operator pos:start="3845:24" pos:end="3845:25">-&gt;</operator><name pos:start="3845:26" pos:end="3845:29">base</name><operator pos:start="3845:30" pos:end="3845:30">.</operator><name pos:start="3845:31" pos:end="3845:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3845:35" pos:end="3845:35">&amp;</operator> <name pos:start="3845:37" pos:end="3845:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3845:52" pos:end="3851:9">{<block_content pos:start="3847:13" pos:end="3849:43">

            <expr_stmt pos:start="3847:13" pos:end="3847:25"><expr pos:start="3847:13" pos:end="3847:24"><call pos:start="3847:13" pos:end="3847:24"><name pos:start="3847:13" pos:end="3847:22">gen_io_end</name><argument_list pos:start="3847:23" pos:end="3847:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3849:13" pos:end="3849:43"><expr pos:start="3849:13" pos:end="3849:42"><call pos:start="3849:13" pos:end="3849:42"><name pos:start="3849:13" pos:end="3849:19">gen_jmp</name><argument_list pos:start="3849:20" pos:end="3849:42">(<argument pos:start="3849:21" pos:end="3849:21"><expr pos:start="3849:21" pos:end="3849:21"><name pos:start="3849:21" pos:end="3849:21">s</name></expr></argument>, <argument pos:start="3849:24" pos:end="3849:41"><expr pos:start="3849:24" pos:end="3849:41"><name pos:start="3849:24" pos:end="3849:28"><name pos:start="3849:24" pos:end="3849:24">s</name><operator pos:start="3849:25" pos:end="3849:26">-&gt;</operator><name pos:start="3849:27" pos:end="3849:28">pc</name></name> <operator pos:start="3849:30" pos:end="3849:30">-</operator> <name pos:start="3849:32" pos:end="3849:41"><name pos:start="3849:32" pos:end="3849:32">s</name><operator pos:start="3849:33" pos:end="3849:34">-&gt;</operator><name pos:start="3849:35" pos:end="3849:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3853:9" pos:end="3853:14">break;</break>

    <case pos:start="3855:5" pos:end="3855:14">case <expr pos:start="3855:10" pos:end="3855:13"><literal type="number" pos:start="3855:10" pos:end="3855:13">0xe6</literal></expr>:</case>

    <case pos:start="3857:5" pos:end="3857:14">case <expr pos:start="3857:10" pos:end="3857:13"><literal type="number" pos:start="3857:10" pos:end="3857:13">0xe7</literal></expr>:</case>

        <expr_stmt pos:start="3859:9" pos:end="3859:32"><expr pos:start="3859:9" pos:end="3859:31"><name pos:start="3859:9" pos:end="3859:10">ot</name> <operator pos:start="3859:12" pos:end="3859:12">=</operator> <call pos:start="3859:14" pos:end="3859:31"><name pos:start="3859:14" pos:end="3859:21">mo_b_d32</name><argument_list pos:start="3859:22" pos:end="3859:31">(<argument pos:start="3859:23" pos:end="3859:23"><expr pos:start="3859:23" pos:end="3859:23"><name pos:start="3859:23" pos:end="3859:23">b</name></expr></argument>, <argument pos:start="3859:26" pos:end="3859:30"><expr pos:start="3859:26" pos:end="3859:30"><name pos:start="3859:26" pos:end="3859:30">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3861:9" pos:end="3861:36"><expr pos:start="3861:9" pos:end="3861:35"><name pos:start="3861:9" pos:end="3861:11">val</name> <operator pos:start="3861:13" pos:end="3861:13">=</operator> <call pos:start="3861:15" pos:end="3861:35"><name pos:start="3861:15" pos:end="3861:27">x86_ldub_code</name><argument_list pos:start="3861:28" pos:end="3861:35">(<argument pos:start="3861:29" pos:end="3861:31"><expr pos:start="3861:29" pos:end="3861:31"><name pos:start="3861:29" pos:end="3861:31">env</name></expr></argument>, <argument pos:start="3861:34" pos:end="3861:34"><expr pos:start="3861:34" pos:end="3861:34"><name pos:start="3861:34" pos:end="3861:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3863:9" pos:end="3863:37"><expr pos:start="3863:9" pos:end="3863:36"><call pos:start="3863:9" pos:end="3863:36"><name pos:start="3863:9" pos:end="3863:23">tcg_gen_movi_tl</name><argument_list pos:start="3863:24" pos:end="3863:36">(<argument pos:start="3863:25" pos:end="3863:30"><expr pos:start="3863:25" pos:end="3863:30"><name pos:start="3863:25" pos:end="3863:30">cpu_T0</name></expr></argument>, <argument pos:start="3863:33" pos:end="3863:35"><expr pos:start="3863:33" pos:end="3863:35"><name pos:start="3863:33" pos:end="3863:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3865:9" pos:end="3867:43"><expr pos:start="3865:9" pos:end="3867:42"><call pos:start="3865:9" pos:end="3867:42"><name pos:start="3865:9" pos:end="3865:20">gen_check_io</name><argument_list pos:start="3865:21" pos:end="3867:42">(<argument pos:start="3865:22" pos:end="3865:22"><expr pos:start="3865:22" pos:end="3865:22"><name pos:start="3865:22" pos:end="3865:22">s</name></expr></argument>, <argument pos:start="3865:25" pos:end="3865:26"><expr pos:start="3865:25" pos:end="3865:26"><name pos:start="3865:25" pos:end="3865:26">ot</name></expr></argument>, <argument pos:start="3865:29" pos:end="3865:49"><expr pos:start="3865:29" pos:end="3865:49"><name pos:start="3865:29" pos:end="3865:36">pc_start</name> <operator pos:start="3865:38" pos:end="3865:38">-</operator> <name pos:start="3865:40" pos:end="3865:49"><name pos:start="3865:40" pos:end="3865:40">s</name><operator pos:start="3865:41" pos:end="3865:42">-&gt;</operator><name pos:start="3865:43" pos:end="3865:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="3867:22" pos:end="3867:41"><expr pos:start="3867:22" pos:end="3867:41"><call pos:start="3867:22" pos:end="3867:41"><name pos:start="3867:22" pos:end="3867:31">svm_is_rep</name><argument_list pos:start="3867:32" pos:end="3867:41">(<argument pos:start="3867:33" pos:end="3867:40"><expr pos:start="3867:33" pos:end="3867:40"><name pos:start="3867:33" pos:end="3867:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3869:9" pos:end="3869:44"><expr pos:start="3869:9" pos:end="3869:43"><call pos:start="3869:9" pos:end="3869:43"><name pos:start="3869:9" pos:end="3869:24">gen_op_mov_v_reg</name><argument_list pos:start="3869:25" pos:end="3869:43">(<argument pos:start="3869:26" pos:end="3869:27"><expr pos:start="3869:26" pos:end="3869:27"><name pos:start="3869:26" pos:end="3869:27">ot</name></expr></argument>, <argument pos:start="3869:30" pos:end="3869:35"><expr pos:start="3869:30" pos:end="3869:35"><name pos:start="3869:30" pos:end="3869:35">cpu_T1</name></expr></argument>, <argument pos:start="3869:38" pos:end="3869:42"><expr pos:start="3869:38" pos:end="3869:42"><name pos:start="3869:38" pos:end="3869:42">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="3873:9" pos:end="3877:9"><if pos:start="3873:9" pos:end="3877:9">if <condition pos:start="3873:12" pos:end="3873:50">(<expr pos:start="3873:13" pos:end="3873:49"><call pos:start="3873:13" pos:end="3873:33"><name pos:start="3873:13" pos:end="3873:21">tb_cflags</name><argument_list pos:start="3873:22" pos:end="3873:33">(<argument pos:start="3873:23" pos:end="3873:32"><expr pos:start="3873:23" pos:end="3873:32"><name pos:start="3873:23" pos:end="3873:32"><name pos:start="3873:23" pos:end="3873:23">s</name><operator pos:start="3873:24" pos:end="3873:25">-&gt;</operator><name pos:start="3873:26" pos:end="3873:29">base</name><operator pos:start="3873:30" pos:end="3873:30">.</operator><name pos:start="3873:31" pos:end="3873:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3873:35" pos:end="3873:35">&amp;</operator> <name pos:start="3873:37" pos:end="3873:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3873:52" pos:end="3877:9">{<block_content pos:start="3875:13" pos:end="3875:27">

            <expr_stmt pos:start="3875:13" pos:end="3875:27"><expr pos:start="3875:13" pos:end="3875:26"><call pos:start="3875:13" pos:end="3875:26"><name pos:start="3875:13" pos:end="3875:24">gen_io_start</name><argument_list pos:start="3875:25" pos:end="3875:26">()</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3879:9" pos:end="3879:44"><expr pos:start="3879:9" pos:end="3879:43"><call pos:start="3879:9" pos:end="3879:43"><name pos:start="3879:9" pos:end="3879:24">tcg_gen_movi_i32</name><argument_list pos:start="3879:25" pos:end="3879:43">(<argument pos:start="3879:26" pos:end="3879:37"><expr pos:start="3879:26" pos:end="3879:37"><name pos:start="3879:26" pos:end="3879:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3879:40" pos:end="3879:42"><expr pos:start="3879:40" pos:end="3879:42"><name pos:start="3879:40" pos:end="3879:42">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3881:9" pos:end="3881:51"><expr pos:start="3881:9" pos:end="3881:50"><call pos:start="3881:9" pos:end="3881:50"><name pos:start="3881:9" pos:end="3881:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="3881:29" pos:end="3881:50">(<argument pos:start="3881:30" pos:end="3881:41"><expr pos:start="3881:30" pos:end="3881:41"><name pos:start="3881:30" pos:end="3881:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="3881:44" pos:end="3881:49"><expr pos:start="3881:44" pos:end="3881:49"><name pos:start="3881:44" pos:end="3881:49">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3883:9" pos:end="3883:60"><expr pos:start="3883:9" pos:end="3883:59"><call pos:start="3883:9" pos:end="3883:59"><name pos:start="3883:9" pos:end="3883:27">gen_helper_out_func</name><argument_list pos:start="3883:28" pos:end="3883:59">(<argument pos:start="3883:29" pos:end="3883:30"><expr pos:start="3883:29" pos:end="3883:30"><name pos:start="3883:29" pos:end="3883:30">ot</name></expr></argument>, <argument pos:start="3883:33" pos:end="3883:44"><expr pos:start="3883:33" pos:end="3883:44"><name pos:start="3883:33" pos:end="3883:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3883:47" pos:end="3883:58"><expr pos:start="3883:47" pos:end="3883:58"><name pos:start="3883:47" pos:end="3883:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3885:9" pos:end="3885:40"><expr pos:start="3885:9" pos:end="3885:39"><call pos:start="3885:9" pos:end="3885:39"><name pos:start="3885:9" pos:end="3885:18">gen_bpt_io</name><argument_list pos:start="3885:19" pos:end="3885:39">(<argument pos:start="3885:20" pos:end="3885:20"><expr pos:start="3885:20" pos:end="3885:20"><name pos:start="3885:20" pos:end="3885:20">s</name></expr></argument>, <argument pos:start="3885:23" pos:end="3885:34"><expr pos:start="3885:23" pos:end="3885:34"><name pos:start="3885:23" pos:end="3885:34">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3885:37" pos:end="3885:38"><expr pos:start="3885:37" pos:end="3885:38"><name pos:start="3885:37" pos:end="3885:38">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3887:9" pos:end="3893:9"><if pos:start="3887:9" pos:end="3893:9">if <condition pos:start="3887:12" pos:end="3887:50">(<expr pos:start="3887:13" pos:end="3887:49"><call pos:start="3887:13" pos:end="3887:33"><name pos:start="3887:13" pos:end="3887:21">tb_cflags</name><argument_list pos:start="3887:22" pos:end="3887:33">(<argument pos:start="3887:23" pos:end="3887:32"><expr pos:start="3887:23" pos:end="3887:32"><name pos:start="3887:23" pos:end="3887:32"><name pos:start="3887:23" pos:end="3887:23">s</name><operator pos:start="3887:24" pos:end="3887:25">-&gt;</operator><name pos:start="3887:26" pos:end="3887:29">base</name><operator pos:start="3887:30" pos:end="3887:30">.</operator><name pos:start="3887:31" pos:end="3887:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3887:35" pos:end="3887:35">&amp;</operator> <name pos:start="3887:37" pos:end="3887:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3887:52" pos:end="3893:9">{<block_content pos:start="3889:13" pos:end="3891:43">

            <expr_stmt pos:start="3889:13" pos:end="3889:25"><expr pos:start="3889:13" pos:end="3889:24"><call pos:start="3889:13" pos:end="3889:24"><name pos:start="3889:13" pos:end="3889:22">gen_io_end</name><argument_list pos:start="3889:23" pos:end="3889:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3891:13" pos:end="3891:43"><expr pos:start="3891:13" pos:end="3891:42"><call pos:start="3891:13" pos:end="3891:42"><name pos:start="3891:13" pos:end="3891:19">gen_jmp</name><argument_list pos:start="3891:20" pos:end="3891:42">(<argument pos:start="3891:21" pos:end="3891:21"><expr pos:start="3891:21" pos:end="3891:21"><name pos:start="3891:21" pos:end="3891:21">s</name></expr></argument>, <argument pos:start="3891:24" pos:end="3891:41"><expr pos:start="3891:24" pos:end="3891:41"><name pos:start="3891:24" pos:end="3891:28"><name pos:start="3891:24" pos:end="3891:24">s</name><operator pos:start="3891:25" pos:end="3891:26">-&gt;</operator><name pos:start="3891:27" pos:end="3891:28">pc</name></name> <operator pos:start="3891:30" pos:end="3891:30">-</operator> <name pos:start="3891:32" pos:end="3891:41"><name pos:start="3891:32" pos:end="3891:32">s</name><operator pos:start="3891:33" pos:end="3891:34">-&gt;</operator><name pos:start="3891:35" pos:end="3891:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3895:9" pos:end="3895:14">break;</break>

    <case pos:start="3897:5" pos:end="3897:14">case <expr pos:start="3897:10" pos:end="3897:13"><literal type="number" pos:start="3897:10" pos:end="3897:13">0xec</literal></expr>:</case>

    <case pos:start="3899:5" pos:end="3899:14">case <expr pos:start="3899:10" pos:end="3899:13"><literal type="number" pos:start="3899:10" pos:end="3899:13">0xed</literal></expr>:</case>

        <expr_stmt pos:start="3901:9" pos:end="3901:32"><expr pos:start="3901:9" pos:end="3901:31"><name pos:start="3901:9" pos:end="3901:10">ot</name> <operator pos:start="3901:12" pos:end="3901:12">=</operator> <call pos:start="3901:14" pos:end="3901:31"><name pos:start="3901:14" pos:end="3901:21">mo_b_d32</name><argument_list pos:start="3901:22" pos:end="3901:31">(<argument pos:start="3901:23" pos:end="3901:23"><expr pos:start="3901:23" pos:end="3901:23"><name pos:start="3901:23" pos:end="3901:23">b</name></expr></argument>, <argument pos:start="3901:26" pos:end="3901:30"><expr pos:start="3901:26" pos:end="3901:30"><name pos:start="3901:26" pos:end="3901:30">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3903:9" pos:end="3903:51"><expr pos:start="3903:9" pos:end="3903:50"><call pos:start="3903:9" pos:end="3903:50"><name pos:start="3903:9" pos:end="3903:25">tcg_gen_ext16u_tl</name><argument_list pos:start="3903:26" pos:end="3903:50">(<argument pos:start="3903:27" pos:end="3903:32"><expr pos:start="3903:27" pos:end="3903:32"><name pos:start="3903:27" pos:end="3903:32">cpu_T0</name></expr></argument>, <argument pos:start="3903:35" pos:end="3903:49"><expr pos:start="3903:35" pos:end="3903:49"><name pos:start="3903:35" pos:end="3903:49"><name pos:start="3903:35" pos:end="3903:42">cpu_regs</name><index pos:start="3903:43" pos:end="3903:49">[<expr pos:start="3903:44" pos:end="3903:48"><name pos:start="3903:44" pos:end="3903:48">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3905:9" pos:end="3907:64"><expr pos:start="3905:9" pos:end="3907:63"><call pos:start="3905:9" pos:end="3907:63"><name pos:start="3905:9" pos:end="3905:20">gen_check_io</name><argument_list pos:start="3905:21" pos:end="3907:63">(<argument pos:start="3905:22" pos:end="3905:22"><expr pos:start="3905:22" pos:end="3905:22"><name pos:start="3905:22" pos:end="3905:22">s</name></expr></argument>, <argument pos:start="3905:25" pos:end="3905:26"><expr pos:start="3905:25" pos:end="3905:26"><name pos:start="3905:25" pos:end="3905:26">ot</name></expr></argument>, <argument pos:start="3905:29" pos:end="3905:49"><expr pos:start="3905:29" pos:end="3905:49"><name pos:start="3905:29" pos:end="3905:36">pc_start</name> <operator pos:start="3905:38" pos:end="3905:38">-</operator> <name pos:start="3905:40" pos:end="3905:49"><name pos:start="3905:40" pos:end="3905:40">s</name><operator pos:start="3905:41" pos:end="3905:42">-&gt;</operator><name pos:start="3905:43" pos:end="3905:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="3907:22" pos:end="3907:62"><expr pos:start="3907:22" pos:end="3907:62"><name pos:start="3907:22" pos:end="3907:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="3907:41" pos:end="3907:41">|</operator> <call pos:start="3907:43" pos:end="3907:62"><name pos:start="3907:43" pos:end="3907:52">svm_is_rep</name><argument_list pos:start="3907:53" pos:end="3907:62">(<argument pos:start="3907:54" pos:end="3907:61"><expr pos:start="3907:54" pos:end="3907:61"><name pos:start="3907:54" pos:end="3907:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3909:9" pos:end="3913:9"><if pos:start="3909:9" pos:end="3913:9">if <condition pos:start="3909:12" pos:end="3909:50">(<expr pos:start="3909:13" pos:end="3909:49"><call pos:start="3909:13" pos:end="3909:33"><name pos:start="3909:13" pos:end="3909:21">tb_cflags</name><argument_list pos:start="3909:22" pos:end="3909:33">(<argument pos:start="3909:23" pos:end="3909:32"><expr pos:start="3909:23" pos:end="3909:32"><name pos:start="3909:23" pos:end="3909:32"><name pos:start="3909:23" pos:end="3909:23">s</name><operator pos:start="3909:24" pos:end="3909:25">-&gt;</operator><name pos:start="3909:26" pos:end="3909:29">base</name><operator pos:start="3909:30" pos:end="3909:30">.</operator><name pos:start="3909:31" pos:end="3909:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3909:35" pos:end="3909:35">&amp;</operator> <name pos:start="3909:37" pos:end="3909:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3909:52" pos:end="3913:9">{<block_content pos:start="3911:13" pos:end="3911:27">

            <expr_stmt pos:start="3911:13" pos:end="3911:27"><expr pos:start="3911:13" pos:end="3911:26"><call pos:start="3911:13" pos:end="3911:26"><name pos:start="3911:13" pos:end="3911:24">gen_io_start</name><argument_list pos:start="3911:25" pos:end="3911:26">()</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3915:9" pos:end="3915:51"><expr pos:start="3915:9" pos:end="3915:50"><call pos:start="3915:9" pos:end="3915:50"><name pos:start="3915:9" pos:end="3915:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="3915:29" pos:end="3915:50">(<argument pos:start="3915:30" pos:end="3915:41"><expr pos:start="3915:30" pos:end="3915:41"><name pos:start="3915:30" pos:end="3915:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3915:44" pos:end="3915:49"><expr pos:start="3915:44" pos:end="3915:49"><name pos:start="3915:44" pos:end="3915:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3917:9" pos:end="3917:53"><expr pos:start="3917:9" pos:end="3917:52"><call pos:start="3917:9" pos:end="3917:52"><name pos:start="3917:9" pos:end="3917:26">gen_helper_in_func</name><argument_list pos:start="3917:27" pos:end="3917:52">(<argument pos:start="3917:28" pos:end="3917:29"><expr pos:start="3917:28" pos:end="3917:29"><name pos:start="3917:28" pos:end="3917:29">ot</name></expr></argument>, <argument pos:start="3917:32" pos:end="3917:37"><expr pos:start="3917:32" pos:end="3917:37"><name pos:start="3917:32" pos:end="3917:37">cpu_T1</name></expr></argument>, <argument pos:start="3917:40" pos:end="3917:51"><expr pos:start="3917:40" pos:end="3917:51"><name pos:start="3917:40" pos:end="3917:51">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3919:9" pos:end="3919:44"><expr pos:start="3919:9" pos:end="3919:43"><call pos:start="3919:9" pos:end="3919:43"><name pos:start="3919:9" pos:end="3919:24">gen_op_mov_reg_v</name><argument_list pos:start="3919:25" pos:end="3919:43">(<argument pos:start="3919:26" pos:end="3919:27"><expr pos:start="3919:26" pos:end="3919:27"><name pos:start="3919:26" pos:end="3919:27">ot</name></expr></argument>, <argument pos:start="3919:30" pos:end="3919:34"><expr pos:start="3919:30" pos:end="3919:34"><name pos:start="3919:30" pos:end="3919:34">R_EAX</name></expr></argument>, <argument pos:start="3919:37" pos:end="3919:42"><expr pos:start="3919:37" pos:end="3919:42"><name pos:start="3919:37" pos:end="3919:42">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3921:9" pos:end="3921:40"><expr pos:start="3921:9" pos:end="3921:39"><call pos:start="3921:9" pos:end="3921:39"><name pos:start="3921:9" pos:end="3921:18">gen_bpt_io</name><argument_list pos:start="3921:19" pos:end="3921:39">(<argument pos:start="3921:20" pos:end="3921:20"><expr pos:start="3921:20" pos:end="3921:20"><name pos:start="3921:20" pos:end="3921:20">s</name></expr></argument>, <argument pos:start="3921:23" pos:end="3921:34"><expr pos:start="3921:23" pos:end="3921:34"><name pos:start="3921:23" pos:end="3921:34">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3921:37" pos:end="3921:38"><expr pos:start="3921:37" pos:end="3921:38"><name pos:start="3921:37" pos:end="3921:38">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3923:9" pos:end="3929:9"><if pos:start="3923:9" pos:end="3929:9">if <condition pos:start="3923:12" pos:end="3923:50">(<expr pos:start="3923:13" pos:end="3923:49"><call pos:start="3923:13" pos:end="3923:33"><name pos:start="3923:13" pos:end="3923:21">tb_cflags</name><argument_list pos:start="3923:22" pos:end="3923:33">(<argument pos:start="3923:23" pos:end="3923:32"><expr pos:start="3923:23" pos:end="3923:32"><name pos:start="3923:23" pos:end="3923:32"><name pos:start="3923:23" pos:end="3923:23">s</name><operator pos:start="3923:24" pos:end="3923:25">-&gt;</operator><name pos:start="3923:26" pos:end="3923:29">base</name><operator pos:start="3923:30" pos:end="3923:30">.</operator><name pos:start="3923:31" pos:end="3923:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3923:35" pos:end="3923:35">&amp;</operator> <name pos:start="3923:37" pos:end="3923:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3923:52" pos:end="3929:9">{<block_content pos:start="3925:13" pos:end="3927:43">

            <expr_stmt pos:start="3925:13" pos:end="3925:25"><expr pos:start="3925:13" pos:end="3925:24"><call pos:start="3925:13" pos:end="3925:24"><name pos:start="3925:13" pos:end="3925:22">gen_io_end</name><argument_list pos:start="3925:23" pos:end="3925:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3927:13" pos:end="3927:43"><expr pos:start="3927:13" pos:end="3927:42"><call pos:start="3927:13" pos:end="3927:42"><name pos:start="3927:13" pos:end="3927:19">gen_jmp</name><argument_list pos:start="3927:20" pos:end="3927:42">(<argument pos:start="3927:21" pos:end="3927:21"><expr pos:start="3927:21" pos:end="3927:21"><name pos:start="3927:21" pos:end="3927:21">s</name></expr></argument>, <argument pos:start="3927:24" pos:end="3927:41"><expr pos:start="3927:24" pos:end="3927:41"><name pos:start="3927:24" pos:end="3927:28"><name pos:start="3927:24" pos:end="3927:24">s</name><operator pos:start="3927:25" pos:end="3927:26">-&gt;</operator><name pos:start="3927:27" pos:end="3927:28">pc</name></name> <operator pos:start="3927:30" pos:end="3927:30">-</operator> <name pos:start="3927:32" pos:end="3927:41"><name pos:start="3927:32" pos:end="3927:32">s</name><operator pos:start="3927:33" pos:end="3927:34">-&gt;</operator><name pos:start="3927:35" pos:end="3927:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3931:9" pos:end="3931:14">break;</break>

    <case pos:start="3933:5" pos:end="3933:14">case <expr pos:start="3933:10" pos:end="3933:13"><literal type="number" pos:start="3933:10" pos:end="3933:13">0xee</literal></expr>:</case>

    <case pos:start="3935:5" pos:end="3935:14">case <expr pos:start="3935:10" pos:end="3935:13"><literal type="number" pos:start="3935:10" pos:end="3935:13">0xef</literal></expr>:</case>

        <expr_stmt pos:start="3937:9" pos:end="3937:32"><expr pos:start="3937:9" pos:end="3937:31"><name pos:start="3937:9" pos:end="3937:10">ot</name> <operator pos:start="3937:12" pos:end="3937:12">=</operator> <call pos:start="3937:14" pos:end="3937:31"><name pos:start="3937:14" pos:end="3937:21">mo_b_d32</name><argument_list pos:start="3937:22" pos:end="3937:31">(<argument pos:start="3937:23" pos:end="3937:23"><expr pos:start="3937:23" pos:end="3937:23"><name pos:start="3937:23" pos:end="3937:23">b</name></expr></argument>, <argument pos:start="3937:26" pos:end="3937:30"><expr pos:start="3937:26" pos:end="3937:30"><name pos:start="3937:26" pos:end="3937:30">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3939:9" pos:end="3939:51"><expr pos:start="3939:9" pos:end="3939:50"><call pos:start="3939:9" pos:end="3939:50"><name pos:start="3939:9" pos:end="3939:25">tcg_gen_ext16u_tl</name><argument_list pos:start="3939:26" pos:end="3939:50">(<argument pos:start="3939:27" pos:end="3939:32"><expr pos:start="3939:27" pos:end="3939:32"><name pos:start="3939:27" pos:end="3939:32">cpu_T0</name></expr></argument>, <argument pos:start="3939:35" pos:end="3939:49"><expr pos:start="3939:35" pos:end="3939:49"><name pos:start="3939:35" pos:end="3939:49"><name pos:start="3939:35" pos:end="3939:42">cpu_regs</name><index pos:start="3939:43" pos:end="3939:49">[<expr pos:start="3939:44" pos:end="3939:48"><name pos:start="3939:44" pos:end="3939:48">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3941:9" pos:end="3943:43"><expr pos:start="3941:9" pos:end="3943:42"><call pos:start="3941:9" pos:end="3943:42"><name pos:start="3941:9" pos:end="3941:20">gen_check_io</name><argument_list pos:start="3941:21" pos:end="3943:42">(<argument pos:start="3941:22" pos:end="3941:22"><expr pos:start="3941:22" pos:end="3941:22"><name pos:start="3941:22" pos:end="3941:22">s</name></expr></argument>, <argument pos:start="3941:25" pos:end="3941:26"><expr pos:start="3941:25" pos:end="3941:26"><name pos:start="3941:25" pos:end="3941:26">ot</name></expr></argument>, <argument pos:start="3941:29" pos:end="3941:49"><expr pos:start="3941:29" pos:end="3941:49"><name pos:start="3941:29" pos:end="3941:36">pc_start</name> <operator pos:start="3941:38" pos:end="3941:38">-</operator> <name pos:start="3941:40" pos:end="3941:49"><name pos:start="3941:40" pos:end="3941:40">s</name><operator pos:start="3941:41" pos:end="3941:42">-&gt;</operator><name pos:start="3941:43" pos:end="3941:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="3943:22" pos:end="3943:41"><expr pos:start="3943:22" pos:end="3943:41"><call pos:start="3943:22" pos:end="3943:41"><name pos:start="3943:22" pos:end="3943:31">svm_is_rep</name><argument_list pos:start="3943:32" pos:end="3943:41">(<argument pos:start="3943:33" pos:end="3943:40"><expr pos:start="3943:33" pos:end="3943:40"><name pos:start="3943:33" pos:end="3943:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3945:9" pos:end="3945:44"><expr pos:start="3945:9" pos:end="3945:43"><call pos:start="3945:9" pos:end="3945:43"><name pos:start="3945:9" pos:end="3945:24">gen_op_mov_v_reg</name><argument_list pos:start="3945:25" pos:end="3945:43">(<argument pos:start="3945:26" pos:end="3945:27"><expr pos:start="3945:26" pos:end="3945:27"><name pos:start="3945:26" pos:end="3945:27">ot</name></expr></argument>, <argument pos:start="3945:30" pos:end="3945:35"><expr pos:start="3945:30" pos:end="3945:35"><name pos:start="3945:30" pos:end="3945:35">cpu_T1</name></expr></argument>, <argument pos:start="3945:38" pos:end="3945:42"><expr pos:start="3945:38" pos:end="3945:42"><name pos:start="3945:38" pos:end="3945:42">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="3949:9" pos:end="3953:9"><if pos:start="3949:9" pos:end="3953:9">if <condition pos:start="3949:12" pos:end="3949:50">(<expr pos:start="3949:13" pos:end="3949:49"><call pos:start="3949:13" pos:end="3949:33"><name pos:start="3949:13" pos:end="3949:21">tb_cflags</name><argument_list pos:start="3949:22" pos:end="3949:33">(<argument pos:start="3949:23" pos:end="3949:32"><expr pos:start="3949:23" pos:end="3949:32"><name pos:start="3949:23" pos:end="3949:32"><name pos:start="3949:23" pos:end="3949:23">s</name><operator pos:start="3949:24" pos:end="3949:25">-&gt;</operator><name pos:start="3949:26" pos:end="3949:29">base</name><operator pos:start="3949:30" pos:end="3949:30">.</operator><name pos:start="3949:31" pos:end="3949:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3949:35" pos:end="3949:35">&amp;</operator> <name pos:start="3949:37" pos:end="3949:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3949:52" pos:end="3953:9">{<block_content pos:start="3951:13" pos:end="3951:27">

            <expr_stmt pos:start="3951:13" pos:end="3951:27"><expr pos:start="3951:13" pos:end="3951:26"><call pos:start="3951:13" pos:end="3951:26"><name pos:start="3951:13" pos:end="3951:24">gen_io_start</name><argument_list pos:start="3951:25" pos:end="3951:26">()</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3955:9" pos:end="3955:51"><expr pos:start="3955:9" pos:end="3955:50"><call pos:start="3955:9" pos:end="3955:50"><name pos:start="3955:9" pos:end="3955:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="3955:29" pos:end="3955:50">(<argument pos:start="3955:30" pos:end="3955:41"><expr pos:start="3955:30" pos:end="3955:41"><name pos:start="3955:30" pos:end="3955:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3955:44" pos:end="3955:49"><expr pos:start="3955:44" pos:end="3955:49"><name pos:start="3955:44" pos:end="3955:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3957:9" pos:end="3957:51"><expr pos:start="3957:9" pos:end="3957:50"><call pos:start="3957:9" pos:end="3957:50"><name pos:start="3957:9" pos:end="3957:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="3957:29" pos:end="3957:50">(<argument pos:start="3957:30" pos:end="3957:41"><expr pos:start="3957:30" pos:end="3957:41"><name pos:start="3957:30" pos:end="3957:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="3957:44" pos:end="3957:49"><expr pos:start="3957:44" pos:end="3957:49"><name pos:start="3957:44" pos:end="3957:49">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3959:9" pos:end="3959:60"><expr pos:start="3959:9" pos:end="3959:59"><call pos:start="3959:9" pos:end="3959:59"><name pos:start="3959:9" pos:end="3959:27">gen_helper_out_func</name><argument_list pos:start="3959:28" pos:end="3959:59">(<argument pos:start="3959:29" pos:end="3959:30"><expr pos:start="3959:29" pos:end="3959:30"><name pos:start="3959:29" pos:end="3959:30">ot</name></expr></argument>, <argument pos:start="3959:33" pos:end="3959:44"><expr pos:start="3959:33" pos:end="3959:44"><name pos:start="3959:33" pos:end="3959:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3959:47" pos:end="3959:58"><expr pos:start="3959:47" pos:end="3959:58"><name pos:start="3959:47" pos:end="3959:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3961:9" pos:end="3961:40"><expr pos:start="3961:9" pos:end="3961:39"><call pos:start="3961:9" pos:end="3961:39"><name pos:start="3961:9" pos:end="3961:18">gen_bpt_io</name><argument_list pos:start="3961:19" pos:end="3961:39">(<argument pos:start="3961:20" pos:end="3961:20"><expr pos:start="3961:20" pos:end="3961:20"><name pos:start="3961:20" pos:end="3961:20">s</name></expr></argument>, <argument pos:start="3961:23" pos:end="3961:34"><expr pos:start="3961:23" pos:end="3961:34"><name pos:start="3961:23" pos:end="3961:34">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3961:37" pos:end="3961:38"><expr pos:start="3961:37" pos:end="3961:38"><name pos:start="3961:37" pos:end="3961:38">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3963:9" pos:end="3969:9"><if pos:start="3963:9" pos:end="3969:9">if <condition pos:start="3963:12" pos:end="3963:50">(<expr pos:start="3963:13" pos:end="3963:49"><call pos:start="3963:13" pos:end="3963:33"><name pos:start="3963:13" pos:end="3963:21">tb_cflags</name><argument_list pos:start="3963:22" pos:end="3963:33">(<argument pos:start="3963:23" pos:end="3963:32"><expr pos:start="3963:23" pos:end="3963:32"><name pos:start="3963:23" pos:end="3963:32"><name pos:start="3963:23" pos:end="3963:23">s</name><operator pos:start="3963:24" pos:end="3963:25">-&gt;</operator><name pos:start="3963:26" pos:end="3963:29">base</name><operator pos:start="3963:30" pos:end="3963:30">.</operator><name pos:start="3963:31" pos:end="3963:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3963:35" pos:end="3963:35">&amp;</operator> <name pos:start="3963:37" pos:end="3963:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="3963:52" pos:end="3969:9">{<block_content pos:start="3965:13" pos:end="3967:43">

            <expr_stmt pos:start="3965:13" pos:end="3965:25"><expr pos:start="3965:13" pos:end="3965:24"><call pos:start="3965:13" pos:end="3965:24"><name pos:start="3965:13" pos:end="3965:22">gen_io_end</name><argument_list pos:start="3965:23" pos:end="3965:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3967:13" pos:end="3967:43"><expr pos:start="3967:13" pos:end="3967:42"><call pos:start="3967:13" pos:end="3967:42"><name pos:start="3967:13" pos:end="3967:19">gen_jmp</name><argument_list pos:start="3967:20" pos:end="3967:42">(<argument pos:start="3967:21" pos:end="3967:21"><expr pos:start="3967:21" pos:end="3967:21"><name pos:start="3967:21" pos:end="3967:21">s</name></expr></argument>, <argument pos:start="3967:24" pos:end="3967:41"><expr pos:start="3967:24" pos:end="3967:41"><name pos:start="3967:24" pos:end="3967:28"><name pos:start="3967:24" pos:end="3967:24">s</name><operator pos:start="3967:25" pos:end="3967:26">-&gt;</operator><name pos:start="3967:27" pos:end="3967:28">pc</name></name> <operator pos:start="3967:30" pos:end="3967:30">-</operator> <name pos:start="3967:32" pos:end="3967:41"><name pos:start="3967:32" pos:end="3967:32">s</name><operator pos:start="3967:33" pos:end="3967:34">-&gt;</operator><name pos:start="3967:35" pos:end="3967:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3971:9" pos:end="3971:14">break;</break>



        <comment type="block" format="doxygen" pos:start="3975:9" pos:end="3975:34">/************************/</comment>

        <comment type="block" pos:start="3977:9" pos:end="3977:21">/* control */</comment>

    <case pos:start="3979:5" pos:end="3979:14">case <expr pos:start="3979:10" pos:end="3979:13"><literal type="number" pos:start="3979:10" pos:end="3979:13">0xc2</literal></expr>:</case> <comment type="block" pos:start="3979:16" pos:end="3979:27">/* ret im */</comment>

        <expr_stmt pos:start="3981:9" pos:end="3981:36"><expr pos:start="3981:9" pos:end="3981:35"><name pos:start="3981:9" pos:end="3981:11">val</name> <operator pos:start="3981:13" pos:end="3981:13">=</operator> <call pos:start="3981:15" pos:end="3981:35"><name pos:start="3981:15" pos:end="3981:27">x86_ldsw_code</name><argument_list pos:start="3981:28" pos:end="3981:35">(<argument pos:start="3981:29" pos:end="3981:31"><expr pos:start="3981:29" pos:end="3981:31"><name pos:start="3981:29" pos:end="3981:31">env</name></expr></argument>, <argument pos:start="3981:34" pos:end="3981:34"><expr pos:start="3981:34" pos:end="3981:34"><name pos:start="3981:34" pos:end="3981:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3983:9" pos:end="3983:27"><expr pos:start="3983:9" pos:end="3983:26"><name pos:start="3983:9" pos:end="3983:10">ot</name> <operator pos:start="3983:12" pos:end="3983:12">=</operator> <call pos:start="3983:14" pos:end="3983:26"><name pos:start="3983:14" pos:end="3983:23">gen_pop_T0</name><argument_list pos:start="3983:24" pos:end="3983:26">(<argument pos:start="3983:25" pos:end="3983:25"><expr pos:start="3983:25" pos:end="3983:25"><name pos:start="3983:25" pos:end="3983:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3985:9" pos:end="3985:45"><expr pos:start="3985:9" pos:end="3985:44"><call pos:start="3985:9" pos:end="3985:44"><name pos:start="3985:9" pos:end="3985:24">gen_stack_update</name><argument_list pos:start="3985:25" pos:end="3985:44">(<argument pos:start="3985:26" pos:end="3985:26"><expr pos:start="3985:26" pos:end="3985:26"><name pos:start="3985:26" pos:end="3985:26">s</name></expr></argument>, <argument pos:start="3985:29" pos:end="3985:43"><expr pos:start="3985:29" pos:end="3985:43"><name pos:start="3985:29" pos:end="3985:31">val</name> <operator pos:start="3985:33" pos:end="3985:33">+</operator> <operator pos:start="3985:35" pos:end="3985:35">(</operator><literal type="number" pos:start="3985:36" pos:end="3985:36">1</literal> <operator pos:start="3985:38" pos:end="3985:39">&lt;&lt;</operator> <name pos:start="3985:41" pos:end="3985:42">ot</name><operator pos:start="3985:43" pos:end="3985:43">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3987:9" pos:end="3987:63">/* Note that gen_pop_T0 uses a zero-extending load.  */</comment>

        <expr_stmt pos:start="3989:9" pos:end="3989:29"><expr pos:start="3989:9" pos:end="3989:28"><call pos:start="3989:9" pos:end="3989:28"><name pos:start="3989:9" pos:end="3989:20">gen_op_jmp_v</name><argument_list pos:start="3989:21" pos:end="3989:28">(<argument pos:start="3989:22" pos:end="3989:27"><expr pos:start="3989:22" pos:end="3989:27"><name pos:start="3989:22" pos:end="3989:27">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3991:9" pos:end="3991:23"><expr pos:start="3991:9" pos:end="3991:22"><call pos:start="3991:9" pos:end="3991:22"><name pos:start="3991:9" pos:end="3991:19">gen_bnd_jmp</name><argument_list pos:start="3991:20" pos:end="3991:22">(<argument pos:start="3991:21" pos:end="3991:21"><expr pos:start="3991:21" pos:end="3991:21"><name pos:start="3991:21" pos:end="3991:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3993:9" pos:end="3993:26"><expr pos:start="3993:9" pos:end="3993:25"><call pos:start="3993:9" pos:end="3993:25"><name pos:start="3993:9" pos:end="3993:14">gen_jr</name><argument_list pos:start="3993:15" pos:end="3993:25">(<argument pos:start="3993:16" pos:end="3993:16"><expr pos:start="3993:16" pos:end="3993:16"><name pos:start="3993:16" pos:end="3993:16">s</name></expr></argument>, <argument pos:start="3993:19" pos:end="3993:24"><expr pos:start="3993:19" pos:end="3993:24"><name pos:start="3993:19" pos:end="3993:24">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3995:9" pos:end="3995:14">break;</break>

    <case pos:start="3997:5" pos:end="3997:14">case <expr pos:start="3997:10" pos:end="3997:13"><literal type="number" pos:start="3997:10" pos:end="3997:13">0xc3</literal></expr>:</case> <comment type="block" pos:start="3997:16" pos:end="3997:24">/* ret */</comment>

        <expr_stmt pos:start="3999:9" pos:end="3999:27"><expr pos:start="3999:9" pos:end="3999:26"><name pos:start="3999:9" pos:end="3999:10">ot</name> <operator pos:start="3999:12" pos:end="3999:12">=</operator> <call pos:start="3999:14" pos:end="3999:26"><name pos:start="3999:14" pos:end="3999:23">gen_pop_T0</name><argument_list pos:start="3999:24" pos:end="3999:26">(<argument pos:start="3999:25" pos:end="3999:25"><expr pos:start="3999:25" pos:end="3999:25"><name pos:start="3999:25" pos:end="3999:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4001:9" pos:end="4001:30"><expr pos:start="4001:9" pos:end="4001:29"><call pos:start="4001:9" pos:end="4001:29"><name pos:start="4001:9" pos:end="4001:22">gen_pop_update</name><argument_list pos:start="4001:23" pos:end="4001:29">(<argument pos:start="4001:24" pos:end="4001:24"><expr pos:start="4001:24" pos:end="4001:24"><name pos:start="4001:24" pos:end="4001:24">s</name></expr></argument>, <argument pos:start="4001:27" pos:end="4001:28"><expr pos:start="4001:27" pos:end="4001:28"><name pos:start="4001:27" pos:end="4001:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="4003:9" pos:end="4003:63">/* Note that gen_pop_T0 uses a zero-extending load.  */</comment>

        <expr_stmt pos:start="4005:9" pos:end="4005:29"><expr pos:start="4005:9" pos:end="4005:28"><call pos:start="4005:9" pos:end="4005:28"><name pos:start="4005:9" pos:end="4005:20">gen_op_jmp_v</name><argument_list pos:start="4005:21" pos:end="4005:28">(<argument pos:start="4005:22" pos:end="4005:27"><expr pos:start="4005:22" pos:end="4005:27"><name pos:start="4005:22" pos:end="4005:27">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4007:9" pos:end="4007:23"><expr pos:start="4007:9" pos:end="4007:22"><call pos:start="4007:9" pos:end="4007:22"><name pos:start="4007:9" pos:end="4007:19">gen_bnd_jmp</name><argument_list pos:start="4007:20" pos:end="4007:22">(<argument pos:start="4007:21" pos:end="4007:21"><expr pos:start="4007:21" pos:end="4007:21"><name pos:start="4007:21" pos:end="4007:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4009:9" pos:end="4009:26"><expr pos:start="4009:9" pos:end="4009:25"><call pos:start="4009:9" pos:end="4009:25"><name pos:start="4009:9" pos:end="4009:14">gen_jr</name><argument_list pos:start="4009:15" pos:end="4009:25">(<argument pos:start="4009:16" pos:end="4009:16"><expr pos:start="4009:16" pos:end="4009:16"><name pos:start="4009:16" pos:end="4009:16">s</name></expr></argument>, <argument pos:start="4009:19" pos:end="4009:24"><expr pos:start="4009:19" pos:end="4009:24"><name pos:start="4009:19" pos:end="4009:24">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4011:9" pos:end="4011:14">break;</break>

    <case pos:start="4013:5" pos:end="4013:14">case <expr pos:start="4013:10" pos:end="4013:13"><literal type="number" pos:start="4013:10" pos:end="4013:13">0xca</literal></expr>:</case> <comment type="block" pos:start="4013:16" pos:end="4013:28">/* lret im */</comment>

        <expr_stmt pos:start="4015:9" pos:end="4015:36"><expr pos:start="4015:9" pos:end="4015:35"><name pos:start="4015:9" pos:end="4015:11">val</name> <operator pos:start="4015:13" pos:end="4015:13">=</operator> <call pos:start="4015:15" pos:end="4015:35"><name pos:start="4015:15" pos:end="4015:27">x86_ldsw_code</name><argument_list pos:start="4015:28" pos:end="4015:35">(<argument pos:start="4015:29" pos:end="4015:31"><expr pos:start="4015:29" pos:end="4015:31"><name pos:start="4015:29" pos:end="4015:31">env</name></expr></argument>, <argument pos:start="4015:34" pos:end="4015:34"><expr pos:start="4015:34" pos:end="4015:34"><name pos:start="4015:34" pos:end="4015:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="4017:5" pos:end="4017:12"><name pos:start="4017:5" pos:end="4017:11">do_lret</name>:</label>

        <if_stmt pos:start="4019:9" pos:end="4055:9"><if pos:start="4019:9" pos:end="4029:9">if <condition pos:start="4019:12" pos:end="4019:30">(<expr pos:start="4019:13" pos:end="4019:29"><name pos:start="4019:13" pos:end="4019:17"><name pos:start="4019:13" pos:end="4019:13">s</name><operator pos:start="4019:14" pos:end="4019:15">-&gt;</operator><name pos:start="4019:16" pos:end="4019:17">pe</name></name> <operator pos:start="4019:19" pos:end="4019:20">&amp;&amp;</operator> <operator pos:start="4019:22" pos:end="4019:22">!</operator><name pos:start="4019:23" pos:end="4019:29"><name pos:start="4019:23" pos:end="4019:23">s</name><operator pos:start="4019:24" pos:end="4019:25">-&gt;</operator><name pos:start="4019:26" pos:end="4019:29">vm86</name></name></expr>)</condition> <block pos:start="4019:32" pos:end="4029:9">{<block_content pos:start="4021:13" pos:end="4027:58">

            <expr_stmt pos:start="4021:13" pos:end="4021:32"><expr pos:start="4021:13" pos:end="4021:31"><call pos:start="4021:13" pos:end="4021:31"><name pos:start="4021:13" pos:end="4021:28">gen_update_cc_op</name><argument_list pos:start="4021:29" pos:end="4021:31">(<argument pos:start="4021:30" pos:end="4021:30"><expr pos:start="4021:30" pos:end="4021:30"><name pos:start="4021:30" pos:end="4021:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4023:13" pos:end="4023:46"><expr pos:start="4023:13" pos:end="4023:45"><call pos:start="4023:13" pos:end="4023:45"><name pos:start="4023:13" pos:end="4023:22">gen_jmp_im</name><argument_list pos:start="4023:23" pos:end="4023:45">(<argument pos:start="4023:24" pos:end="4023:44"><expr pos:start="4023:24" pos:end="4023:44"><name pos:start="4023:24" pos:end="4023:31">pc_start</name> <operator pos:start="4023:33" pos:end="4023:33">-</operator> <name pos:start="4023:35" pos:end="4023:44"><name pos:start="4023:35" pos:end="4023:35">s</name><operator pos:start="4023:36" pos:end="4023:37">-&gt;</operator><name pos:start="4023:38" pos:end="4023:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4025:13" pos:end="4027:58"><expr pos:start="4025:13" pos:end="4027:57"><call pos:start="4025:13" pos:end="4027:57"><name pos:start="4025:13" pos:end="4025:37">gen_helper_lret_protected</name><argument_list pos:start="4025:38" pos:end="4027:57">(<argument pos:start="4025:39" pos:end="4025:45"><expr pos:start="4025:39" pos:end="4025:45"><name pos:start="4025:39" pos:end="4025:45">cpu_env</name></expr></argument>, <argument pos:start="4025:48" pos:end="4025:71"><expr pos:start="4025:48" pos:end="4025:71"><call pos:start="4025:48" pos:end="4025:71"><name pos:start="4025:48" pos:end="4025:60">tcg_const_i32</name><argument_list pos:start="4025:61" pos:end="4025:71">(<argument pos:start="4025:62" pos:end="4025:70"><expr pos:start="4025:62" pos:end="4025:70"><name pos:start="4025:62" pos:end="4025:66">dflag</name> <operator pos:start="4025:68" pos:end="4025:68">-</operator> <literal type="number" pos:start="4025:70" pos:end="4025:70">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="4027:39" pos:end="4027:56"><expr pos:start="4027:39" pos:end="4027:56"><call pos:start="4027:39" pos:end="4027:56"><name pos:start="4027:39" pos:end="4027:51">tcg_const_i32</name><argument_list pos:start="4027:52" pos:end="4027:56">(<argument pos:start="4027:53" pos:end="4027:55"><expr pos:start="4027:53" pos:end="4027:55"><name pos:start="4027:53" pos:end="4027:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4029:11" pos:end="4055:9">else <block pos:start="4029:16" pos:end="4055:9">{<block_content pos:start="4031:13" pos:end="4053:52">

            <expr_stmt pos:start="4031:13" pos:end="4031:28"><expr pos:start="4031:13" pos:end="4031:27"><call pos:start="4031:13" pos:end="4031:27"><name pos:start="4031:13" pos:end="4031:24">gen_stack_A0</name><argument_list pos:start="4031:25" pos:end="4031:27">(<argument pos:start="4031:26" pos:end="4031:26"><expr pos:start="4031:26" pos:end="4031:26"><name pos:start="4031:26" pos:end="4031:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4033:13" pos:end="4033:28">/* pop offset */</comment>

            <expr_stmt pos:start="4035:13" pos:end="4035:50"><expr pos:start="4035:13" pos:end="4035:49"><call pos:start="4035:13" pos:end="4035:49"><name pos:start="4035:13" pos:end="4035:23">gen_op_ld_v</name><argument_list pos:start="4035:24" pos:end="4035:49">(<argument pos:start="4035:25" pos:end="4035:25"><expr pos:start="4035:25" pos:end="4035:25"><name pos:start="4035:25" pos:end="4035:25">s</name></expr></argument>, <argument pos:start="4035:28" pos:end="4035:32"><expr pos:start="4035:28" pos:end="4035:32"><name pos:start="4035:28" pos:end="4035:32">dflag</name></expr></argument>, <argument pos:start="4035:35" pos:end="4035:40"><expr pos:start="4035:35" pos:end="4035:40"><name pos:start="4035:35" pos:end="4035:40">cpu_T0</name></expr></argument>, <argument pos:start="4035:43" pos:end="4035:48"><expr pos:start="4035:43" pos:end="4035:48"><name pos:start="4035:43" pos:end="4035:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4037:13" pos:end="4039:27">/* NOTE: keeping EIP updated is not a problem in case of

               exception */</comment>

            <expr_stmt pos:start="4041:13" pos:end="4041:33"><expr pos:start="4041:13" pos:end="4041:32"><call pos:start="4041:13" pos:end="4041:32"><name pos:start="4041:13" pos:end="4041:24">gen_op_jmp_v</name><argument_list pos:start="4041:25" pos:end="4041:32">(<argument pos:start="4041:26" pos:end="4041:31"><expr pos:start="4041:26" pos:end="4041:31"><name pos:start="4041:26" pos:end="4041:31">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4043:13" pos:end="4043:30">/* pop selector */</comment>

            <expr_stmt pos:start="4045:13" pos:end="4045:41"><expr pos:start="4045:13" pos:end="4045:40"><call pos:start="4045:13" pos:end="4045:40"><name pos:start="4045:13" pos:end="4045:25">gen_add_A0_im</name><argument_list pos:start="4045:26" pos:end="4045:40">(<argument pos:start="4045:27" pos:end="4045:27"><expr pos:start="4045:27" pos:end="4045:27"><name pos:start="4045:27" pos:end="4045:27">s</name></expr></argument>, <argument pos:start="4045:30" pos:end="4045:39"><expr pos:start="4045:30" pos:end="4045:39"><literal type="number" pos:start="4045:30" pos:end="4045:30">1</literal> <operator pos:start="4045:32" pos:end="4045:33">&lt;&lt;</operator> <name pos:start="4045:35" pos:end="4045:39">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4047:13" pos:end="4047:50"><expr pos:start="4047:13" pos:end="4047:49"><call pos:start="4047:13" pos:end="4047:49"><name pos:start="4047:13" pos:end="4047:23">gen_op_ld_v</name><argument_list pos:start="4047:24" pos:end="4047:49">(<argument pos:start="4047:25" pos:end="4047:25"><expr pos:start="4047:25" pos:end="4047:25"><name pos:start="4047:25" pos:end="4047:25">s</name></expr></argument>, <argument pos:start="4047:28" pos:end="4047:32"><expr pos:start="4047:28" pos:end="4047:32"><name pos:start="4047:28" pos:end="4047:32">dflag</name></expr></argument>, <argument pos:start="4047:35" pos:end="4047:40"><expr pos:start="4047:35" pos:end="4047:40"><name pos:start="4047:35" pos:end="4047:40">cpu_T0</name></expr></argument>, <argument pos:start="4047:43" pos:end="4047:48"><expr pos:start="4047:43" pos:end="4047:48"><name pos:start="4047:43" pos:end="4047:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4049:13" pos:end="4049:40"><expr pos:start="4049:13" pos:end="4049:39"><call pos:start="4049:13" pos:end="4049:39"><name pos:start="4049:13" pos:end="4049:33">gen_op_movl_seg_T0_vm</name><argument_list pos:start="4049:34" pos:end="4049:39">(<argument pos:start="4049:35" pos:end="4049:38"><expr pos:start="4049:35" pos:end="4049:38"><name pos:start="4049:35" pos:end="4049:38">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4051:13" pos:end="4051:34">/* add stack offset */</comment>

            <expr_stmt pos:start="4053:13" pos:end="4053:52"><expr pos:start="4053:13" pos:end="4053:51"><call pos:start="4053:13" pos:end="4053:51"><name pos:start="4053:13" pos:end="4053:28">gen_stack_update</name><argument_list pos:start="4053:29" pos:end="4053:51">(<argument pos:start="4053:30" pos:end="4053:30"><expr pos:start="4053:30" pos:end="4053:30"><name pos:start="4053:30" pos:end="4053:30">s</name></expr></argument>, <argument pos:start="4053:33" pos:end="4053:50"><expr pos:start="4053:33" pos:end="4053:50"><name pos:start="4053:33" pos:end="4053:35">val</name> <operator pos:start="4053:37" pos:end="4053:37">+</operator> <operator pos:start="4053:39" pos:end="4053:39">(</operator><literal type="number" pos:start="4053:40" pos:end="4053:40">2</literal> <operator pos:start="4053:42" pos:end="4053:43">&lt;&lt;</operator> <name pos:start="4053:45" pos:end="4053:49">dflag</name><operator pos:start="4053:50" pos:end="4053:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4057:9" pos:end="4057:19"><expr pos:start="4057:9" pos:end="4057:18"><call pos:start="4057:9" pos:end="4057:18"><name pos:start="4057:9" pos:end="4057:15">gen_eob</name><argument_list pos:start="4057:16" pos:end="4057:18">(<argument pos:start="4057:17" pos:end="4057:17"><expr pos:start="4057:17" pos:end="4057:17"><name pos:start="4057:17" pos:end="4057:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4059:9" pos:end="4059:14">break;</break>

    <case pos:start="4061:5" pos:end="4061:14">case <expr pos:start="4061:10" pos:end="4061:13"><literal type="number" pos:start="4061:10" pos:end="4061:13">0xcb</literal></expr>:</case> <comment type="block" pos:start="4061:16" pos:end="4061:25">/* lret */</comment>

        <expr_stmt pos:start="4063:9" pos:end="4063:16"><expr pos:start="4063:9" pos:end="4063:15"><name pos:start="4063:9" pos:end="4063:11">val</name> <operator pos:start="4063:13" pos:end="4063:13">=</operator> <literal type="number" pos:start="4063:15" pos:end="4063:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="4065:9" pos:end="4065:21">goto <name pos:start="4065:14" pos:end="4065:20">do_lret</name>;</goto>

    <case pos:start="4067:5" pos:end="4067:14">case <expr pos:start="4067:10" pos:end="4067:13"><literal type="number" pos:start="4067:10" pos:end="4067:13">0xcf</literal></expr>:</case> <comment type="block" pos:start="4067:16" pos:end="4067:25">/* iret */</comment>

        <expr_stmt pos:start="4069:9" pos:end="4069:60"><expr pos:start="4069:9" pos:end="4069:59"><call pos:start="4069:9" pos:end="4069:59"><name pos:start="4069:9" pos:end="4069:31">gen_svm_check_intercept</name><argument_list pos:start="4069:32" pos:end="4069:59">(<argument pos:start="4069:33" pos:end="4069:33"><expr pos:start="4069:33" pos:end="4069:33"><name pos:start="4069:33" pos:end="4069:33">s</name></expr></argument>, <argument pos:start="4069:36" pos:end="4069:43"><expr pos:start="4069:36" pos:end="4069:43"><name pos:start="4069:36" pos:end="4069:43">pc_start</name></expr></argument>, <argument pos:start="4069:46" pos:end="4069:58"><expr pos:start="4069:46" pos:end="4069:58"><name pos:start="4069:46" pos:end="4069:58">SVM_EXIT_IRET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4071:9" pos:end="4101:9"><if pos:start="4071:9" pos:end="4079:9">if <condition pos:start="4071:12" pos:end="4071:19">(<expr pos:start="4071:13" pos:end="4071:18"><operator pos:start="4071:13" pos:end="4071:13">!</operator><name pos:start="4071:14" pos:end="4071:18"><name pos:start="4071:14" pos:end="4071:14">s</name><operator pos:start="4071:15" pos:end="4071:16">-&gt;</operator><name pos:start="4071:17" pos:end="4071:18">pe</name></name></expr>)</condition> <block pos:start="4071:21" pos:end="4079:9">{<block_content pos:start="4075:13" pos:end="4077:39">

            <comment type="block" pos:start="4073:13" pos:end="4073:27">/* real mode */</comment>

            <expr_stmt pos:start="4075:13" pos:end="4075:68"><expr pos:start="4075:13" pos:end="4075:67"><call pos:start="4075:13" pos:end="4075:67"><name pos:start="4075:13" pos:end="4075:32">gen_helper_iret_real</name><argument_list pos:start="4075:33" pos:end="4075:67">(<argument pos:start="4075:34" pos:end="4075:40"><expr pos:start="4075:34" pos:end="4075:40"><name pos:start="4075:34" pos:end="4075:40">cpu_env</name></expr></argument>, <argument pos:start="4075:43" pos:end="4075:66"><expr pos:start="4075:43" pos:end="4075:66"><call pos:start="4075:43" pos:end="4075:66"><name pos:start="4075:43" pos:end="4075:55">tcg_const_i32</name><argument_list pos:start="4075:56" pos:end="4075:66">(<argument pos:start="4075:57" pos:end="4075:65"><expr pos:start="4075:57" pos:end="4075:65"><name pos:start="4075:57" pos:end="4075:61">dflag</name> <operator pos:start="4075:63" pos:end="4075:63">-</operator> <literal type="number" pos:start="4075:65" pos:end="4075:65">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4077:13" pos:end="4077:39"><expr pos:start="4077:13" pos:end="4077:38"><call pos:start="4077:13" pos:end="4077:38"><name pos:start="4077:13" pos:end="4077:21">set_cc_op</name><argument_list pos:start="4077:22" pos:end="4077:38">(<argument pos:start="4077:23" pos:end="4077:23"><expr pos:start="4077:23" pos:end="4077:23"><name pos:start="4077:23" pos:end="4077:23">s</name></expr></argument>, <argument pos:start="4077:26" pos:end="4077:37"><expr pos:start="4077:26" pos:end="4077:37"><name pos:start="4077:26" pos:end="4077:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="4079:11" pos:end="4093:9">else if <condition pos:start="4079:19" pos:end="4079:27">(<expr pos:start="4079:20" pos:end="4079:26"><name pos:start="4079:20" pos:end="4079:26"><name pos:start="4079:20" pos:end="4079:20">s</name><operator pos:start="4079:21" pos:end="4079:22">-&gt;</operator><name pos:start="4079:23" pos:end="4079:26">vm86</name></name></expr>)</condition> <block pos:start="4079:29" pos:end="4093:9">{<block_content pos:start="4081:13" pos:end="4091:13">

            <if_stmt pos:start="4081:13" pos:end="4091:13"><if pos:start="4081:13" pos:end="4085:13">if <condition pos:start="4081:16" pos:end="4081:29">(<expr pos:start="4081:17" pos:end="4081:28"><name pos:start="4081:17" pos:end="4081:23"><name pos:start="4081:17" pos:end="4081:17">s</name><operator pos:start="4081:18" pos:end="4081:19">-&gt;</operator><name pos:start="4081:20" pos:end="4081:23">iopl</name></name> <operator pos:start="4081:25" pos:end="4081:26">!=</operator> <literal type="number" pos:start="4081:28" pos:end="4081:28">3</literal></expr>)</condition> <block pos:start="4081:31" pos:end="4085:13">{<block_content pos:start="4083:17" pos:end="4083:68">

                <expr_stmt pos:start="4083:17" pos:end="4083:68"><expr pos:start="4083:17" pos:end="4083:67"><call pos:start="4083:17" pos:end="4083:67"><name pos:start="4083:17" pos:end="4083:29">gen_exception</name><argument_list pos:start="4083:30" pos:end="4083:67">(<argument pos:start="4083:31" pos:end="4083:31"><expr pos:start="4083:31" pos:end="4083:31"><name pos:start="4083:31" pos:end="4083:31">s</name></expr></argument>, <argument pos:start="4083:34" pos:end="4083:43"><expr pos:start="4083:34" pos:end="4083:43"><name pos:start="4083:34" pos:end="4083:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4083:46" pos:end="4083:66"><expr pos:start="4083:46" pos:end="4083:66"><name pos:start="4083:46" pos:end="4083:53">pc_start</name> <operator pos:start="4083:55" pos:end="4083:55">-</operator> <name pos:start="4083:57" pos:end="4083:66"><name pos:start="4083:57" pos:end="4083:57">s</name><operator pos:start="4083:58" pos:end="4083:59">-&gt;</operator><name pos:start="4083:60" pos:end="4083:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4085:15" pos:end="4091:13">else <block pos:start="4085:20" pos:end="4091:13">{<block_content pos:start="4087:17" pos:end="4089:43">

                <expr_stmt pos:start="4087:17" pos:end="4087:72"><expr pos:start="4087:17" pos:end="4087:71"><call pos:start="4087:17" pos:end="4087:71"><name pos:start="4087:17" pos:end="4087:36">gen_helper_iret_real</name><argument_list pos:start="4087:37" pos:end="4087:71">(<argument pos:start="4087:38" pos:end="4087:44"><expr pos:start="4087:38" pos:end="4087:44"><name pos:start="4087:38" pos:end="4087:44">cpu_env</name></expr></argument>, <argument pos:start="4087:47" pos:end="4087:70"><expr pos:start="4087:47" pos:end="4087:70"><call pos:start="4087:47" pos:end="4087:70"><name pos:start="4087:47" pos:end="4087:59">tcg_const_i32</name><argument_list pos:start="4087:60" pos:end="4087:70">(<argument pos:start="4087:61" pos:end="4087:69"><expr pos:start="4087:61" pos:end="4087:69"><name pos:start="4087:61" pos:end="4087:65">dflag</name> <operator pos:start="4087:67" pos:end="4087:67">-</operator> <literal type="number" pos:start="4087:69" pos:end="4087:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4089:17" pos:end="4089:43"><expr pos:start="4089:17" pos:end="4089:42"><call pos:start="4089:17" pos:end="4089:42"><name pos:start="4089:17" pos:end="4089:25">set_cc_op</name><argument_list pos:start="4089:26" pos:end="4089:42">(<argument pos:start="4089:27" pos:end="4089:27"><expr pos:start="4089:27" pos:end="4089:27"><name pos:start="4089:27" pos:end="4089:27">s</name></expr></argument>, <argument pos:start="4089:30" pos:end="4089:41"><expr pos:start="4089:30" pos:end="4089:41"><name pos:start="4089:30" pos:end="4089:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="4093:11" pos:end="4101:9">else <block pos:start="4093:16" pos:end="4101:9">{<block_content pos:start="4095:13" pos:end="4099:39">

            <expr_stmt pos:start="4095:13" pos:end="4097:73"><expr pos:start="4095:13" pos:end="4097:72"><call pos:start="4095:13" pos:end="4097:72"><name pos:start="4095:13" pos:end="4095:37">gen_helper_iret_protected</name><argument_list pos:start="4095:38" pos:end="4097:72">(<argument pos:start="4095:39" pos:end="4095:45"><expr pos:start="4095:39" pos:end="4095:45"><name pos:start="4095:39" pos:end="4095:45">cpu_env</name></expr></argument>, <argument pos:start="4095:48" pos:end="4095:71"><expr pos:start="4095:48" pos:end="4095:71"><call pos:start="4095:48" pos:end="4095:71"><name pos:start="4095:48" pos:end="4095:60">tcg_const_i32</name><argument_list pos:start="4095:61" pos:end="4095:71">(<argument pos:start="4095:62" pos:end="4095:70"><expr pos:start="4095:62" pos:end="4095:70"><name pos:start="4095:62" pos:end="4095:66">dflag</name> <operator pos:start="4095:68" pos:end="4095:68">-</operator> <literal type="number" pos:start="4095:70" pos:end="4095:70">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="4097:39" pos:end="4097:71"><expr pos:start="4097:39" pos:end="4097:71"><call pos:start="4097:39" pos:end="4097:71"><name pos:start="4097:39" pos:end="4097:51">tcg_const_i32</name><argument_list pos:start="4097:52" pos:end="4097:71">(<argument pos:start="4097:53" pos:end="4097:70"><expr pos:start="4097:53" pos:end="4097:70"><name pos:start="4097:53" pos:end="4097:57"><name pos:start="4097:53" pos:end="4097:53">s</name><operator pos:start="4097:54" pos:end="4097:55">-&gt;</operator><name pos:start="4097:56" pos:end="4097:57">pc</name></name> <operator pos:start="4097:59" pos:end="4097:59">-</operator> <name pos:start="4097:61" pos:end="4097:70"><name pos:start="4097:61" pos:end="4097:61">s</name><operator pos:start="4097:62" pos:end="4097:63">-&gt;</operator><name pos:start="4097:64" pos:end="4097:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4099:13" pos:end="4099:39"><expr pos:start="4099:13" pos:end="4099:38"><call pos:start="4099:13" pos:end="4099:38"><name pos:start="4099:13" pos:end="4099:21">set_cc_op</name><argument_list pos:start="4099:22" pos:end="4099:38">(<argument pos:start="4099:23" pos:end="4099:23"><expr pos:start="4099:23" pos:end="4099:23"><name pos:start="4099:23" pos:end="4099:23">s</name></expr></argument>, <argument pos:start="4099:26" pos:end="4099:37"><expr pos:start="4099:26" pos:end="4099:37"><name pos:start="4099:26" pos:end="4099:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4103:9" pos:end="4103:19"><expr pos:start="4103:9" pos:end="4103:18"><call pos:start="4103:9" pos:end="4103:18"><name pos:start="4103:9" pos:end="4103:15">gen_eob</name><argument_list pos:start="4103:16" pos:end="4103:18">(<argument pos:start="4103:17" pos:end="4103:17"><expr pos:start="4103:17" pos:end="4103:17"><name pos:start="4103:17" pos:end="4103:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4105:9" pos:end="4105:14">break;</break>

    <case pos:start="4107:5" pos:end="4107:14">case <expr pos:start="4107:10" pos:end="4107:13"><literal type="number" pos:start="4107:10" pos:end="4107:13">0xe8</literal></expr>:</case> <comment type="block" pos:start="4107:16" pos:end="4107:28">/* call im */</comment>

        <block pos:start="4109:9" pos:end="4143:9">{<block_content pos:start="4111:13" pos:end="4141:29">

            <if_stmt pos:start="4111:13" pos:end="4119:13"><if pos:start="4111:13" pos:end="4115:13">if <condition pos:start="4111:16" pos:end="4111:31">(<expr pos:start="4111:17" pos:end="4111:30"><name pos:start="4111:17" pos:end="4111:21">dflag</name> <operator pos:start="4111:23" pos:end="4111:24">!=</operator> <name pos:start="4111:26" pos:end="4111:30">MO_16</name></expr>)</condition> <block pos:start="4111:33" pos:end="4115:13">{<block_content pos:start="4113:17" pos:end="4113:56">

                <expr_stmt pos:start="4113:17" pos:end="4113:56"><expr pos:start="4113:17" pos:end="4113:55"><name pos:start="4113:17" pos:end="4113:20">tval</name> <operator pos:start="4113:22" pos:end="4113:22">=</operator> <operator pos:start="4113:24" pos:end="4113:24">(</operator><name pos:start="4113:25" pos:end="4113:31">int32_t</name><operator pos:start="4113:32" pos:end="4113:32">)</operator><call pos:start="4113:33" pos:end="4113:55"><name pos:start="4113:33" pos:end="4113:40">insn_get</name><argument_list pos:start="4113:41" pos:end="4113:55">(<argument pos:start="4113:42" pos:end="4113:44"><expr pos:start="4113:42" pos:end="4113:44"><name pos:start="4113:42" pos:end="4113:44">env</name></expr></argument>, <argument pos:start="4113:47" pos:end="4113:47"><expr pos:start="4113:47" pos:end="4113:47"><name pos:start="4113:47" pos:end="4113:47">s</name></expr></argument>, <argument pos:start="4113:50" pos:end="4113:54"><expr pos:start="4113:50" pos:end="4113:54"><name pos:start="4113:50" pos:end="4113:54">MO_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4115:15" pos:end="4119:13">else <block pos:start="4115:20" pos:end="4119:13">{<block_content pos:start="4117:17" pos:end="4117:56">

                <expr_stmt pos:start="4117:17" pos:end="4117:56"><expr pos:start="4117:17" pos:end="4117:55"><name pos:start="4117:17" pos:end="4117:20">tval</name> <operator pos:start="4117:22" pos:end="4117:22">=</operator> <operator pos:start="4117:24" pos:end="4117:24">(</operator><name pos:start="4117:25" pos:end="4117:31">int16_t</name><operator pos:start="4117:32" pos:end="4117:32">)</operator><call pos:start="4117:33" pos:end="4117:55"><name pos:start="4117:33" pos:end="4117:40">insn_get</name><argument_list pos:start="4117:41" pos:end="4117:55">(<argument pos:start="4117:42" pos:end="4117:44"><expr pos:start="4117:42" pos:end="4117:44"><name pos:start="4117:42" pos:end="4117:44">env</name></expr></argument>, <argument pos:start="4117:47" pos:end="4117:47"><expr pos:start="4117:47" pos:end="4117:47"><name pos:start="4117:47" pos:end="4117:47">s</name></expr></argument>, <argument pos:start="4117:50" pos:end="4117:54"><expr pos:start="4117:50" pos:end="4117:54"><name pos:start="4117:50" pos:end="4117:54">MO_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="4121:13" pos:end="4121:42"><expr pos:start="4121:13" pos:end="4121:41"><name pos:start="4121:13" pos:end="4121:20">next_eip</name> <operator pos:start="4121:22" pos:end="4121:22">=</operator> <name pos:start="4121:24" pos:end="4121:28"><name pos:start="4121:24" pos:end="4121:24">s</name><operator pos:start="4121:25" pos:end="4121:26">-&gt;</operator><name pos:start="4121:27" pos:end="4121:28">pc</name></name> <operator pos:start="4121:30" pos:end="4121:30">-</operator> <name pos:start="4121:32" pos:end="4121:41"><name pos:start="4121:32" pos:end="4121:32">s</name><operator pos:start="4121:33" pos:end="4121:34">-&gt;</operator><name pos:start="4121:35" pos:end="4121:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="4123:13" pos:end="4123:29"><expr pos:start="4123:13" pos:end="4123:28"><name pos:start="4123:13" pos:end="4123:16">tval</name> <operator pos:start="4123:18" pos:end="4123:19">+=</operator> <name pos:start="4123:21" pos:end="4123:28">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="4125:13" pos:end="4133:13"><if pos:start="4125:13" pos:end="4129:13">if <condition pos:start="4125:16" pos:end="4125:31">(<expr pos:start="4125:17" pos:end="4125:30"><name pos:start="4125:17" pos:end="4125:21">dflag</name> <operator pos:start="4125:23" pos:end="4125:24">==</operator> <name pos:start="4125:26" pos:end="4125:30">MO_16</name></expr>)</condition> <block pos:start="4125:33" pos:end="4129:13">{<block_content pos:start="4127:17" pos:end="4127:31">

                <expr_stmt pos:start="4127:17" pos:end="4127:31"><expr pos:start="4127:17" pos:end="4127:30"><name pos:start="4127:17" pos:end="4127:20">tval</name> <operator pos:start="4127:22" pos:end="4127:23">&amp;=</operator> <literal type="number" pos:start="4127:25" pos:end="4127:30">0xffff</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="4129:15" pos:end="4133:13">else if <condition pos:start="4129:23" pos:end="4129:34">(<expr pos:start="4129:24" pos:end="4129:33"><operator pos:start="4129:24" pos:end="4129:24">!</operator><call pos:start="4129:25" pos:end="4129:33"><name pos:start="4129:25" pos:end="4129:30">CODE64</name><argument_list pos:start="4129:31" pos:end="4129:33">(<argument pos:start="4129:32" pos:end="4129:32"><expr pos:start="4129:32" pos:end="4129:32"><name pos:start="4129:32" pos:end="4129:32">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4129:36" pos:end="4133:13">{<block_content pos:start="4131:17" pos:end="4131:35">

                <expr_stmt pos:start="4131:17" pos:end="4131:35"><expr pos:start="4131:17" pos:end="4131:34"><name pos:start="4131:17" pos:end="4131:20">tval</name> <operator pos:start="4131:22" pos:end="4131:23">&amp;=</operator> <literal type="number" pos:start="4131:25" pos:end="4131:34">0xffffffff</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4135:13" pos:end="4135:46"><expr pos:start="4135:13" pos:end="4135:45"><call pos:start="4135:13" pos:end="4135:45"><name pos:start="4135:13" pos:end="4135:27">tcg_gen_movi_tl</name><argument_list pos:start="4135:28" pos:end="4135:45">(<argument pos:start="4135:29" pos:end="4135:34"><expr pos:start="4135:29" pos:end="4135:34"><name pos:start="4135:29" pos:end="4135:34">cpu_T0</name></expr></argument>, <argument pos:start="4135:37" pos:end="4135:44"><expr pos:start="4135:37" pos:end="4135:44"><name pos:start="4135:37" pos:end="4135:44">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4137:13" pos:end="4137:34"><expr pos:start="4137:13" pos:end="4137:33"><call pos:start="4137:13" pos:end="4137:33"><name pos:start="4137:13" pos:end="4137:22">gen_push_v</name><argument_list pos:start="4137:23" pos:end="4137:33">(<argument pos:start="4137:24" pos:end="4137:24"><expr pos:start="4137:24" pos:end="4137:24"><name pos:start="4137:24" pos:end="4137:24">s</name></expr></argument>, <argument pos:start="4137:27" pos:end="4137:32"><expr pos:start="4137:27" pos:end="4137:32"><name pos:start="4137:27" pos:end="4137:32">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4139:13" pos:end="4139:27"><expr pos:start="4139:13" pos:end="4139:26"><call pos:start="4139:13" pos:end="4139:26"><name pos:start="4139:13" pos:end="4139:23">gen_bnd_jmp</name><argument_list pos:start="4139:24" pos:end="4139:26">(<argument pos:start="4139:25" pos:end="4139:25"><expr pos:start="4139:25" pos:end="4139:25"><name pos:start="4139:25" pos:end="4139:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4141:13" pos:end="4141:29"><expr pos:start="4141:13" pos:end="4141:28"><call pos:start="4141:13" pos:end="4141:28"><name pos:start="4141:13" pos:end="4141:19">gen_jmp</name><argument_list pos:start="4141:20" pos:end="4141:28">(<argument pos:start="4141:21" pos:end="4141:21"><expr pos:start="4141:21" pos:end="4141:21"><name pos:start="4141:21" pos:end="4141:21">s</name></expr></argument>, <argument pos:start="4141:24" pos:end="4141:27"><expr pos:start="4141:24" pos:end="4141:27"><name pos:start="4141:24" pos:end="4141:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4145:9" pos:end="4145:14">break;</break>

    <case pos:start="4147:5" pos:end="4147:14">case <expr pos:start="4147:10" pos:end="4147:13"><literal type="number" pos:start="4147:10" pos:end="4147:13">0x9a</literal></expr>:</case> <comment type="block" pos:start="4147:16" pos:end="4147:29">/* lcall im */</comment>

        <block pos:start="4149:9" pos:end="4171:9">{<block_content pos:start="4151:13" pos:end="4169:44">

            <decl_stmt pos:start="4151:13" pos:end="4151:42"><decl pos:start="4151:13" pos:end="4151:33"><type pos:start="4151:13" pos:end="4151:24"><name pos:start="4151:13" pos:end="4151:20">unsigned</name> <name pos:start="4151:22" pos:end="4151:24">int</name></type> <name pos:start="4151:26" pos:end="4151:33">selector</name></decl>, <decl pos:start="4151:36" pos:end="4151:41"><type ref="prev" pos:start="4151:13" pos:end="4151:24"/><name pos:start="4151:36" pos:end="4151:41">offset</name></decl>;</decl_stmt>



            <if_stmt pos:start="4155:13" pos:end="4157:32"><if pos:start="4155:13" pos:end="4157:32">if <condition pos:start="4155:16" pos:end="4155:26">(<expr pos:start="4155:17" pos:end="4155:25"><call pos:start="4155:17" pos:end="4155:25"><name pos:start="4155:17" pos:end="4155:22">CODE64</name><argument_list pos:start="4155:23" pos:end="4155:25">(<argument pos:start="4155:24" pos:end="4155:24"><expr pos:start="4155:24" pos:end="4155:24"><name pos:start="4155:24" pos:end="4155:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4157:17" pos:end="4157:32"><block_content pos:start="4157:17" pos:end="4157:32">

                <goto pos:start="4157:17" pos:end="4157:32">goto <name pos:start="4157:22" pos:end="4157:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4159:13" pos:end="4159:23"><expr pos:start="4159:13" pos:end="4159:22"><name pos:start="4159:13" pos:end="4159:14">ot</name> <operator pos:start="4159:16" pos:end="4159:16">=</operator> <name pos:start="4159:18" pos:end="4159:22">dflag</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4161:13" pos:end="4161:42"><expr pos:start="4161:13" pos:end="4161:41"><name pos:start="4161:13" pos:end="4161:18">offset</name> <operator pos:start="4161:20" pos:end="4161:20">=</operator> <call pos:start="4161:22" pos:end="4161:41"><name pos:start="4161:22" pos:end="4161:29">insn_get</name><argument_list pos:start="4161:30" pos:end="4161:41">(<argument pos:start="4161:31" pos:end="4161:33"><expr pos:start="4161:31" pos:end="4161:33"><name pos:start="4161:31" pos:end="4161:33">env</name></expr></argument>, <argument pos:start="4161:36" pos:end="4161:36"><expr pos:start="4161:36" pos:end="4161:36"><name pos:start="4161:36" pos:end="4161:36">s</name></expr></argument>, <argument pos:start="4161:39" pos:end="4161:40"><expr pos:start="4161:39" pos:end="4161:40"><name pos:start="4161:39" pos:end="4161:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4163:13" pos:end="4163:47"><expr pos:start="4163:13" pos:end="4163:46"><name pos:start="4163:13" pos:end="4163:20">selector</name> <operator pos:start="4163:22" pos:end="4163:22">=</operator> <call pos:start="4163:24" pos:end="4163:46"><name pos:start="4163:24" pos:end="4163:31">insn_get</name><argument_list pos:start="4163:32" pos:end="4163:46">(<argument pos:start="4163:33" pos:end="4163:35"><expr pos:start="4163:33" pos:end="4163:35"><name pos:start="4163:33" pos:end="4163:35">env</name></expr></argument>, <argument pos:start="4163:38" pos:end="4163:38"><expr pos:start="4163:38" pos:end="4163:38"><name pos:start="4163:38" pos:end="4163:38">s</name></expr></argument>, <argument pos:start="4163:41" pos:end="4163:45"><expr pos:start="4163:41" pos:end="4163:45"><name pos:start="4163:41" pos:end="4163:45">MO_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4167:13" pos:end="4167:46"><expr pos:start="4167:13" pos:end="4167:45"><call pos:start="4167:13" pos:end="4167:45"><name pos:start="4167:13" pos:end="4167:27">tcg_gen_movi_tl</name><argument_list pos:start="4167:28" pos:end="4167:45">(<argument pos:start="4167:29" pos:end="4167:34"><expr pos:start="4167:29" pos:end="4167:34"><name pos:start="4167:29" pos:end="4167:34">cpu_T0</name></expr></argument>, <argument pos:start="4167:37" pos:end="4167:44"><expr pos:start="4167:37" pos:end="4167:44"><name pos:start="4167:37" pos:end="4167:44">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4169:13" pos:end="4169:44"><expr pos:start="4169:13" pos:end="4169:43"><call pos:start="4169:13" pos:end="4169:43"><name pos:start="4169:13" pos:end="4169:27">tcg_gen_movi_tl</name><argument_list pos:start="4169:28" pos:end="4169:43">(<argument pos:start="4169:29" pos:end="4169:34"><expr pos:start="4169:29" pos:end="4169:34"><name pos:start="4169:29" pos:end="4169:34">cpu_T1</name></expr></argument>, <argument pos:start="4169:37" pos:end="4169:42"><expr pos:start="4169:37" pos:end="4169:42"><name pos:start="4169:37" pos:end="4169:42">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="4173:9" pos:end="4173:22">goto <name pos:start="4173:14" pos:end="4173:21">do_lcall</name>;</goto>

    <case pos:start="4175:5" pos:end="4175:14">case <expr pos:start="4175:10" pos:end="4175:13"><literal type="number" pos:start="4175:10" pos:end="4175:13">0xe9</literal></expr>:</case> <comment type="block" pos:start="4175:16" pos:end="4175:27">/* jmp im */</comment>

        <if_stmt pos:start="4177:9" pos:end="4185:9"><if pos:start="4177:9" pos:end="4181:9">if <condition pos:start="4177:12" pos:end="4177:27">(<expr pos:start="4177:13" pos:end="4177:26"><name pos:start="4177:13" pos:end="4177:17">dflag</name> <operator pos:start="4177:19" pos:end="4177:20">!=</operator> <name pos:start="4177:22" pos:end="4177:26">MO_16</name></expr>)</condition> <block pos:start="4177:29" pos:end="4181:9">{<block_content pos:start="4179:13" pos:end="4179:52">

            <expr_stmt pos:start="4179:13" pos:end="4179:52"><expr pos:start="4179:13" pos:end="4179:51"><name pos:start="4179:13" pos:end="4179:16">tval</name> <operator pos:start="4179:18" pos:end="4179:18">=</operator> <operator pos:start="4179:20" pos:end="4179:20">(</operator><name pos:start="4179:21" pos:end="4179:27">int32_t</name><operator pos:start="4179:28" pos:end="4179:28">)</operator><call pos:start="4179:29" pos:end="4179:51"><name pos:start="4179:29" pos:end="4179:36">insn_get</name><argument_list pos:start="4179:37" pos:end="4179:51">(<argument pos:start="4179:38" pos:end="4179:40"><expr pos:start="4179:38" pos:end="4179:40"><name pos:start="4179:38" pos:end="4179:40">env</name></expr></argument>, <argument pos:start="4179:43" pos:end="4179:43"><expr pos:start="4179:43" pos:end="4179:43"><name pos:start="4179:43" pos:end="4179:43">s</name></expr></argument>, <argument pos:start="4179:46" pos:end="4179:50"><expr pos:start="4179:46" pos:end="4179:50"><name pos:start="4179:46" pos:end="4179:50">MO_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4181:11" pos:end="4185:9">else <block pos:start="4181:16" pos:end="4185:9">{<block_content pos:start="4183:13" pos:end="4183:52">

            <expr_stmt pos:start="4183:13" pos:end="4183:52"><expr pos:start="4183:13" pos:end="4183:51"><name pos:start="4183:13" pos:end="4183:16">tval</name> <operator pos:start="4183:18" pos:end="4183:18">=</operator> <operator pos:start="4183:20" pos:end="4183:20">(</operator><name pos:start="4183:21" pos:end="4183:27">int16_t</name><operator pos:start="4183:28" pos:end="4183:28">)</operator><call pos:start="4183:29" pos:end="4183:51"><name pos:start="4183:29" pos:end="4183:36">insn_get</name><argument_list pos:start="4183:37" pos:end="4183:51">(<argument pos:start="4183:38" pos:end="4183:40"><expr pos:start="4183:38" pos:end="4183:40"><name pos:start="4183:38" pos:end="4183:40">env</name></expr></argument>, <argument pos:start="4183:43" pos:end="4183:43"><expr pos:start="4183:43" pos:end="4183:43"><name pos:start="4183:43" pos:end="4183:43">s</name></expr></argument>, <argument pos:start="4183:46" pos:end="4183:50"><expr pos:start="4183:46" pos:end="4183:50"><name pos:start="4183:46" pos:end="4183:50">MO_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4187:9" pos:end="4187:35"><expr pos:start="4187:9" pos:end="4187:34"><name pos:start="4187:9" pos:end="4187:12">tval</name> <operator pos:start="4187:14" pos:end="4187:15">+=</operator> <name pos:start="4187:17" pos:end="4187:21"><name pos:start="4187:17" pos:end="4187:17">s</name><operator pos:start="4187:18" pos:end="4187:19">-&gt;</operator><name pos:start="4187:20" pos:end="4187:21">pc</name></name> <operator pos:start="4187:23" pos:end="4187:23">-</operator> <name pos:start="4187:25" pos:end="4187:34"><name pos:start="4187:25" pos:end="4187:25">s</name><operator pos:start="4187:26" pos:end="4187:27">-&gt;</operator><name pos:start="4187:28" pos:end="4187:34">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="4189:9" pos:end="4197:9"><if pos:start="4189:9" pos:end="4193:9">if <condition pos:start="4189:12" pos:end="4189:27">(<expr pos:start="4189:13" pos:end="4189:26"><name pos:start="4189:13" pos:end="4189:17">dflag</name> <operator pos:start="4189:19" pos:end="4189:20">==</operator> <name pos:start="4189:22" pos:end="4189:26">MO_16</name></expr>)</condition> <block pos:start="4189:29" pos:end="4193:9">{<block_content pos:start="4191:13" pos:end="4191:27">

            <expr_stmt pos:start="4191:13" pos:end="4191:27"><expr pos:start="4191:13" pos:end="4191:26"><name pos:start="4191:13" pos:end="4191:16">tval</name> <operator pos:start="4191:18" pos:end="4191:19">&amp;=</operator> <literal type="number" pos:start="4191:21" pos:end="4191:26">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="4193:11" pos:end="4197:9">else if <condition pos:start="4193:19" pos:end="4193:30">(<expr pos:start="4193:20" pos:end="4193:29"><operator pos:start="4193:20" pos:end="4193:20">!</operator><call pos:start="4193:21" pos:end="4193:29"><name pos:start="4193:21" pos:end="4193:26">CODE64</name><argument_list pos:start="4193:27" pos:end="4193:29">(<argument pos:start="4193:28" pos:end="4193:28"><expr pos:start="4193:28" pos:end="4193:28"><name pos:start="4193:28" pos:end="4193:28">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4193:32" pos:end="4197:9">{<block_content pos:start="4195:13" pos:end="4195:31">

            <expr_stmt pos:start="4195:13" pos:end="4195:31"><expr pos:start="4195:13" pos:end="4195:30"><name pos:start="4195:13" pos:end="4195:16">tval</name> <operator pos:start="4195:18" pos:end="4195:19">&amp;=</operator> <literal type="number" pos:start="4195:21" pos:end="4195:30">0xffffffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="4199:9" pos:end="4199:23"><expr pos:start="4199:9" pos:end="4199:22"><call pos:start="4199:9" pos:end="4199:22"><name pos:start="4199:9" pos:end="4199:19">gen_bnd_jmp</name><argument_list pos:start="4199:20" pos:end="4199:22">(<argument pos:start="4199:21" pos:end="4199:21"><expr pos:start="4199:21" pos:end="4199:21"><name pos:start="4199:21" pos:end="4199:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4201:9" pos:end="4201:25"><expr pos:start="4201:9" pos:end="4201:24"><call pos:start="4201:9" pos:end="4201:24"><name pos:start="4201:9" pos:end="4201:15">gen_jmp</name><argument_list pos:start="4201:16" pos:end="4201:24">(<argument pos:start="4201:17" pos:end="4201:17"><expr pos:start="4201:17" pos:end="4201:17"><name pos:start="4201:17" pos:end="4201:17">s</name></expr></argument>, <argument pos:start="4201:20" pos:end="4201:23"><expr pos:start="4201:20" pos:end="4201:23"><name pos:start="4201:20" pos:end="4201:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4203:9" pos:end="4203:14">break;</break>

    <case pos:start="4205:5" pos:end="4205:14">case <expr pos:start="4205:10" pos:end="4205:13"><literal type="number" pos:start="4205:10" pos:end="4205:13">0xea</literal></expr>:</case> <comment type="block" pos:start="4205:16" pos:end="4205:28">/* ljmp im */</comment>

        <block pos:start="4207:9" pos:end="4229:9">{<block_content pos:start="4209:13" pos:end="4227:44">

            <decl_stmt pos:start="4209:13" pos:end="4209:42"><decl pos:start="4209:13" pos:end="4209:33"><type pos:start="4209:13" pos:end="4209:24"><name pos:start="4209:13" pos:end="4209:20">unsigned</name> <name pos:start="4209:22" pos:end="4209:24">int</name></type> <name pos:start="4209:26" pos:end="4209:33">selector</name></decl>, <decl pos:start="4209:36" pos:end="4209:41"><type ref="prev" pos:start="4209:13" pos:end="4209:24"/><name pos:start="4209:36" pos:end="4209:41">offset</name></decl>;</decl_stmt>



            <if_stmt pos:start="4213:13" pos:end="4215:32"><if pos:start="4213:13" pos:end="4215:32">if <condition pos:start="4213:16" pos:end="4213:26">(<expr pos:start="4213:17" pos:end="4213:25"><call pos:start="4213:17" pos:end="4213:25"><name pos:start="4213:17" pos:end="4213:22">CODE64</name><argument_list pos:start="4213:23" pos:end="4213:25">(<argument pos:start="4213:24" pos:end="4213:24"><expr pos:start="4213:24" pos:end="4213:24"><name pos:start="4213:24" pos:end="4213:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4215:17" pos:end="4215:32"><block_content pos:start="4215:17" pos:end="4215:32">

                <goto pos:start="4215:17" pos:end="4215:32">goto <name pos:start="4215:22" pos:end="4215:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4217:13" pos:end="4217:23"><expr pos:start="4217:13" pos:end="4217:22"><name pos:start="4217:13" pos:end="4217:14">ot</name> <operator pos:start="4217:16" pos:end="4217:16">=</operator> <name pos:start="4217:18" pos:end="4217:22">dflag</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4219:13" pos:end="4219:42"><expr pos:start="4219:13" pos:end="4219:41"><name pos:start="4219:13" pos:end="4219:18">offset</name> <operator pos:start="4219:20" pos:end="4219:20">=</operator> <call pos:start="4219:22" pos:end="4219:41"><name pos:start="4219:22" pos:end="4219:29">insn_get</name><argument_list pos:start="4219:30" pos:end="4219:41">(<argument pos:start="4219:31" pos:end="4219:33"><expr pos:start="4219:31" pos:end="4219:33"><name pos:start="4219:31" pos:end="4219:33">env</name></expr></argument>, <argument pos:start="4219:36" pos:end="4219:36"><expr pos:start="4219:36" pos:end="4219:36"><name pos:start="4219:36" pos:end="4219:36">s</name></expr></argument>, <argument pos:start="4219:39" pos:end="4219:40"><expr pos:start="4219:39" pos:end="4219:40"><name pos:start="4219:39" pos:end="4219:40">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4221:13" pos:end="4221:47"><expr pos:start="4221:13" pos:end="4221:46"><name pos:start="4221:13" pos:end="4221:20">selector</name> <operator pos:start="4221:22" pos:end="4221:22">=</operator> <call pos:start="4221:24" pos:end="4221:46"><name pos:start="4221:24" pos:end="4221:31">insn_get</name><argument_list pos:start="4221:32" pos:end="4221:46">(<argument pos:start="4221:33" pos:end="4221:35"><expr pos:start="4221:33" pos:end="4221:35"><name pos:start="4221:33" pos:end="4221:35">env</name></expr></argument>, <argument pos:start="4221:38" pos:end="4221:38"><expr pos:start="4221:38" pos:end="4221:38"><name pos:start="4221:38" pos:end="4221:38">s</name></expr></argument>, <argument pos:start="4221:41" pos:end="4221:45"><expr pos:start="4221:41" pos:end="4221:45"><name pos:start="4221:41" pos:end="4221:45">MO_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4225:13" pos:end="4225:46"><expr pos:start="4225:13" pos:end="4225:45"><call pos:start="4225:13" pos:end="4225:45"><name pos:start="4225:13" pos:end="4225:27">tcg_gen_movi_tl</name><argument_list pos:start="4225:28" pos:end="4225:45">(<argument pos:start="4225:29" pos:end="4225:34"><expr pos:start="4225:29" pos:end="4225:34"><name pos:start="4225:29" pos:end="4225:34">cpu_T0</name></expr></argument>, <argument pos:start="4225:37" pos:end="4225:44"><expr pos:start="4225:37" pos:end="4225:44"><name pos:start="4225:37" pos:end="4225:44">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4227:13" pos:end="4227:44"><expr pos:start="4227:13" pos:end="4227:43"><call pos:start="4227:13" pos:end="4227:43"><name pos:start="4227:13" pos:end="4227:27">tcg_gen_movi_tl</name><argument_list pos:start="4227:28" pos:end="4227:43">(<argument pos:start="4227:29" pos:end="4227:34"><expr pos:start="4227:29" pos:end="4227:34"><name pos:start="4227:29" pos:end="4227:34">cpu_T1</name></expr></argument>, <argument pos:start="4227:37" pos:end="4227:42"><expr pos:start="4227:37" pos:end="4227:42"><name pos:start="4227:37" pos:end="4227:42">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="4231:9" pos:end="4231:21">goto <name pos:start="4231:14" pos:end="4231:20">do_ljmp</name>;</goto>

    <case pos:start="4233:5" pos:end="4233:14">case <expr pos:start="4233:10" pos:end="4233:13"><literal type="number" pos:start="4233:10" pos:end="4233:13">0xeb</literal></expr>:</case> <comment type="block" pos:start="4233:16" pos:end="4233:27">/* jmp Jb */</comment>

        <expr_stmt pos:start="4235:9" pos:end="4235:46"><expr pos:start="4235:9" pos:end="4235:45"><name pos:start="4235:9" pos:end="4235:12">tval</name> <operator pos:start="4235:14" pos:end="4235:14">=</operator> <operator pos:start="4235:16" pos:end="4235:16">(</operator><name pos:start="4235:17" pos:end="4235:22">int8_t</name><operator pos:start="4235:23" pos:end="4235:23">)</operator><call pos:start="4235:24" pos:end="4235:45"><name pos:start="4235:24" pos:end="4235:31">insn_get</name><argument_list pos:start="4235:32" pos:end="4235:45">(<argument pos:start="4235:33" pos:end="4235:35"><expr pos:start="4235:33" pos:end="4235:35"><name pos:start="4235:33" pos:end="4235:35">env</name></expr></argument>, <argument pos:start="4235:38" pos:end="4235:38"><expr pos:start="4235:38" pos:end="4235:38"><name pos:start="4235:38" pos:end="4235:38">s</name></expr></argument>, <argument pos:start="4235:41" pos:end="4235:44"><expr pos:start="4235:41" pos:end="4235:44"><name pos:start="4235:41" pos:end="4235:44">MO_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4237:9" pos:end="4237:35"><expr pos:start="4237:9" pos:end="4237:34"><name pos:start="4237:9" pos:end="4237:12">tval</name> <operator pos:start="4237:14" pos:end="4237:15">+=</operator> <name pos:start="4237:17" pos:end="4237:21"><name pos:start="4237:17" pos:end="4237:17">s</name><operator pos:start="4237:18" pos:end="4237:19">-&gt;</operator><name pos:start="4237:20" pos:end="4237:21">pc</name></name> <operator pos:start="4237:23" pos:end="4237:23">-</operator> <name pos:start="4237:25" pos:end="4237:34"><name pos:start="4237:25" pos:end="4237:25">s</name><operator pos:start="4237:26" pos:end="4237:27">-&gt;</operator><name pos:start="4237:28" pos:end="4237:34">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="4239:9" pos:end="4243:9"><if pos:start="4239:9" pos:end="4243:9">if <condition pos:start="4239:12" pos:end="4239:27">(<expr pos:start="4239:13" pos:end="4239:26"><name pos:start="4239:13" pos:end="4239:17">dflag</name> <operator pos:start="4239:19" pos:end="4239:20">==</operator> <name pos:start="4239:22" pos:end="4239:26">MO_16</name></expr>)</condition> <block pos:start="4239:29" pos:end="4243:9">{<block_content pos:start="4241:13" pos:end="4241:27">

            <expr_stmt pos:start="4241:13" pos:end="4241:27"><expr pos:start="4241:13" pos:end="4241:26"><name pos:start="4241:13" pos:end="4241:16">tval</name> <operator pos:start="4241:18" pos:end="4241:19">&amp;=</operator> <literal type="number" pos:start="4241:21" pos:end="4241:26">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="4245:9" pos:end="4245:25"><expr pos:start="4245:9" pos:end="4245:24"><call pos:start="4245:9" pos:end="4245:24"><name pos:start="4245:9" pos:end="4245:15">gen_jmp</name><argument_list pos:start="4245:16" pos:end="4245:24">(<argument pos:start="4245:17" pos:end="4245:17"><expr pos:start="4245:17" pos:end="4245:17"><name pos:start="4245:17" pos:end="4245:17">s</name></expr></argument>, <argument pos:start="4245:20" pos:end="4245:23"><expr pos:start="4245:20" pos:end="4245:23"><name pos:start="4245:20" pos:end="4245:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4247:9" pos:end="4247:14">break;</break>

    <case pos:start="4249:5" pos:end="4249:23">case <expr pos:start="4249:10" pos:end="4249:22"><literal type="number" pos:start="4249:10" pos:end="4249:13">0x70</literal> <operator pos:start="4249:15" pos:end="4249:17">...</operator> <literal type="number" pos:start="4249:19" pos:end="4249:22">0x7f</literal></expr>:</case> <comment type="block" pos:start="4249:25" pos:end="4249:36">/* jcc Jb */</comment>

        <expr_stmt pos:start="4251:9" pos:end="4251:46"><expr pos:start="4251:9" pos:end="4251:45"><name pos:start="4251:9" pos:end="4251:12">tval</name> <operator pos:start="4251:14" pos:end="4251:14">=</operator> <operator pos:start="4251:16" pos:end="4251:16">(</operator><name pos:start="4251:17" pos:end="4251:22">int8_t</name><operator pos:start="4251:23" pos:end="4251:23">)</operator><call pos:start="4251:24" pos:end="4251:45"><name pos:start="4251:24" pos:end="4251:31">insn_get</name><argument_list pos:start="4251:32" pos:end="4251:45">(<argument pos:start="4251:33" pos:end="4251:35"><expr pos:start="4251:33" pos:end="4251:35"><name pos:start="4251:33" pos:end="4251:35">env</name></expr></argument>, <argument pos:start="4251:38" pos:end="4251:38"><expr pos:start="4251:38" pos:end="4251:38"><name pos:start="4251:38" pos:end="4251:38">s</name></expr></argument>, <argument pos:start="4251:41" pos:end="4251:44"><expr pos:start="4251:41" pos:end="4251:44"><name pos:start="4251:41" pos:end="4251:44">MO_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="4253:9" pos:end="4253:20">goto <name pos:start="4253:14" pos:end="4253:19">do_jcc</name>;</goto>

    <case pos:start="4255:5" pos:end="4255:25">case <expr pos:start="4255:10" pos:end="4255:24"><literal type="number" pos:start="4255:10" pos:end="4255:14">0x180</literal> <operator pos:start="4255:16" pos:end="4255:18">...</operator> <literal type="number" pos:start="4255:20" pos:end="4255:24">0x18f</literal></expr>:</case> <comment type="block" pos:start="4255:27" pos:end="4255:38">/* jcc Jv */</comment>

        <if_stmt pos:start="4257:9" pos:end="4265:9"><if pos:start="4257:9" pos:end="4261:9">if <condition pos:start="4257:12" pos:end="4257:27">(<expr pos:start="4257:13" pos:end="4257:26"><name pos:start="4257:13" pos:end="4257:17">dflag</name> <operator pos:start="4257:19" pos:end="4257:20">!=</operator> <name pos:start="4257:22" pos:end="4257:26">MO_16</name></expr>)</condition> <block pos:start="4257:29" pos:end="4261:9">{<block_content pos:start="4259:13" pos:end="4259:52">

            <expr_stmt pos:start="4259:13" pos:end="4259:52"><expr pos:start="4259:13" pos:end="4259:51"><name pos:start="4259:13" pos:end="4259:16">tval</name> <operator pos:start="4259:18" pos:end="4259:18">=</operator> <operator pos:start="4259:20" pos:end="4259:20">(</operator><name pos:start="4259:21" pos:end="4259:27">int32_t</name><operator pos:start="4259:28" pos:end="4259:28">)</operator><call pos:start="4259:29" pos:end="4259:51"><name pos:start="4259:29" pos:end="4259:36">insn_get</name><argument_list pos:start="4259:37" pos:end="4259:51">(<argument pos:start="4259:38" pos:end="4259:40"><expr pos:start="4259:38" pos:end="4259:40"><name pos:start="4259:38" pos:end="4259:40">env</name></expr></argument>, <argument pos:start="4259:43" pos:end="4259:43"><expr pos:start="4259:43" pos:end="4259:43"><name pos:start="4259:43" pos:end="4259:43">s</name></expr></argument>, <argument pos:start="4259:46" pos:end="4259:50"><expr pos:start="4259:46" pos:end="4259:50"><name pos:start="4259:46" pos:end="4259:50">MO_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4261:11" pos:end="4265:9">else <block pos:start="4261:16" pos:end="4265:9">{<block_content pos:start="4263:13" pos:end="4263:52">

            <expr_stmt pos:start="4263:13" pos:end="4263:52"><expr pos:start="4263:13" pos:end="4263:51"><name pos:start="4263:13" pos:end="4263:16">tval</name> <operator pos:start="4263:18" pos:end="4263:18">=</operator> <operator pos:start="4263:20" pos:end="4263:20">(</operator><name pos:start="4263:21" pos:end="4263:27">int16_t</name><operator pos:start="4263:28" pos:end="4263:28">)</operator><call pos:start="4263:29" pos:end="4263:51"><name pos:start="4263:29" pos:end="4263:36">insn_get</name><argument_list pos:start="4263:37" pos:end="4263:51">(<argument pos:start="4263:38" pos:end="4263:40"><expr pos:start="4263:38" pos:end="4263:40"><name pos:start="4263:38" pos:end="4263:40">env</name></expr></argument>, <argument pos:start="4263:43" pos:end="4263:43"><expr pos:start="4263:43" pos:end="4263:43"><name pos:start="4263:43" pos:end="4263:43">s</name></expr></argument>, <argument pos:start="4263:46" pos:end="4263:50"><expr pos:start="4263:46" pos:end="4263:50"><name pos:start="4263:46" pos:end="4263:50">MO_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="4267:5" pos:end="4267:11"><name pos:start="4267:5" pos:end="4267:10">do_jcc</name>:</label>

        <expr_stmt pos:start="4269:9" pos:end="4269:38"><expr pos:start="4269:9" pos:end="4269:37"><name pos:start="4269:9" pos:end="4269:16">next_eip</name> <operator pos:start="4269:18" pos:end="4269:18">=</operator> <name pos:start="4269:20" pos:end="4269:24"><name pos:start="4269:20" pos:end="4269:20">s</name><operator pos:start="4269:21" pos:end="4269:22">-&gt;</operator><name pos:start="4269:23" pos:end="4269:24">pc</name></name> <operator pos:start="4269:26" pos:end="4269:26">-</operator> <name pos:start="4269:28" pos:end="4269:37"><name pos:start="4269:28" pos:end="4269:28">s</name><operator pos:start="4269:29" pos:end="4269:30">-&gt;</operator><name pos:start="4269:31" pos:end="4269:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="4271:9" pos:end="4271:25"><expr pos:start="4271:9" pos:end="4271:24"><name pos:start="4271:9" pos:end="4271:12">tval</name> <operator pos:start="4271:14" pos:end="4271:15">+=</operator> <name pos:start="4271:17" pos:end="4271:24">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="4273:9" pos:end="4277:9"><if pos:start="4273:9" pos:end="4277:9">if <condition pos:start="4273:12" pos:end="4273:27">(<expr pos:start="4273:13" pos:end="4273:26"><name pos:start="4273:13" pos:end="4273:17">dflag</name> <operator pos:start="4273:19" pos:end="4273:20">==</operator> <name pos:start="4273:22" pos:end="4273:26">MO_16</name></expr>)</condition> <block pos:start="4273:29" pos:end="4277:9">{<block_content pos:start="4275:13" pos:end="4275:27">

            <expr_stmt pos:start="4275:13" pos:end="4275:27"><expr pos:start="4275:13" pos:end="4275:26"><name pos:start="4275:13" pos:end="4275:16">tval</name> <operator pos:start="4275:18" pos:end="4275:19">&amp;=</operator> <literal type="number" pos:start="4275:21" pos:end="4275:26">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="4279:9" pos:end="4279:23"><expr pos:start="4279:9" pos:end="4279:22"><call pos:start="4279:9" pos:end="4279:22"><name pos:start="4279:9" pos:end="4279:19">gen_bnd_jmp</name><argument_list pos:start="4279:20" pos:end="4279:22">(<argument pos:start="4279:21" pos:end="4279:21"><expr pos:start="4279:21" pos:end="4279:21"><name pos:start="4279:21" pos:end="4279:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4281:9" pos:end="4281:38"><expr pos:start="4281:9" pos:end="4281:37"><call pos:start="4281:9" pos:end="4281:37"><name pos:start="4281:9" pos:end="4281:15">gen_jcc</name><argument_list pos:start="4281:16" pos:end="4281:37">(<argument pos:start="4281:17" pos:end="4281:17"><expr pos:start="4281:17" pos:end="4281:17"><name pos:start="4281:17" pos:end="4281:17">s</name></expr></argument>, <argument pos:start="4281:20" pos:end="4281:20"><expr pos:start="4281:20" pos:end="4281:20"><name pos:start="4281:20" pos:end="4281:20">b</name></expr></argument>, <argument pos:start="4281:23" pos:end="4281:26"><expr pos:start="4281:23" pos:end="4281:26"><name pos:start="4281:23" pos:end="4281:26">tval</name></expr></argument>, <argument pos:start="4281:29" pos:end="4281:36"><expr pos:start="4281:29" pos:end="4281:36"><name pos:start="4281:29" pos:end="4281:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4283:9" pos:end="4283:14">break;</break>



    <case pos:start="4287:5" pos:end="4287:25">case <expr pos:start="4287:10" pos:end="4287:24"><literal type="number" pos:start="4287:10" pos:end="4287:14">0x190</literal> <operator pos:start="4287:16" pos:end="4287:18">...</operator> <literal type="number" pos:start="4287:20" pos:end="4287:24">0x19f</literal></expr>:</case> <comment type="block" pos:start="4287:27" pos:end="4287:40">/* setcc Gv */</comment>

        <expr_stmt pos:start="4289:9" pos:end="4289:38"><expr pos:start="4289:9" pos:end="4289:37"><name pos:start="4289:9" pos:end="4289:13">modrm</name> <operator pos:start="4289:15" pos:end="4289:15">=</operator> <call pos:start="4289:17" pos:end="4289:37"><name pos:start="4289:17" pos:end="4289:29">x86_ldub_code</name><argument_list pos:start="4289:30" pos:end="4289:37">(<argument pos:start="4289:31" pos:end="4289:33"><expr pos:start="4289:31" pos:end="4289:33"><name pos:start="4289:31" pos:end="4289:33">env</name></expr></argument>, <argument pos:start="4289:36" pos:end="4289:36"><expr pos:start="4289:36" pos:end="4289:36"><name pos:start="4289:36" pos:end="4289:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4291:9" pos:end="4291:33"><expr pos:start="4291:9" pos:end="4291:32"><call pos:start="4291:9" pos:end="4291:32"><name pos:start="4291:9" pos:end="4291:18">gen_setcc1</name><argument_list pos:start="4291:19" pos:end="4291:32">(<argument pos:start="4291:20" pos:end="4291:20"><expr pos:start="4291:20" pos:end="4291:20"><name pos:start="4291:20" pos:end="4291:20">s</name></expr></argument>, <argument pos:start="4291:23" pos:end="4291:23"><expr pos:start="4291:23" pos:end="4291:23"><name pos:start="4291:23" pos:end="4291:23">b</name></expr></argument>, <argument pos:start="4291:26" pos:end="4291:31"><expr pos:start="4291:26" pos:end="4291:31"><name pos:start="4291:26" pos:end="4291:31">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4293:9" pos:end="4293:56"><expr pos:start="4293:9" pos:end="4293:55"><call pos:start="4293:9" pos:end="4293:55"><name pos:start="4293:9" pos:end="4293:22">gen_ldst_modrm</name><argument_list pos:start="4293:23" pos:end="4293:55">(<argument pos:start="4293:24" pos:end="4293:26"><expr pos:start="4293:24" pos:end="4293:26"><name pos:start="4293:24" pos:end="4293:26">env</name></expr></argument>, <argument pos:start="4293:29" pos:end="4293:29"><expr pos:start="4293:29" pos:end="4293:29"><name pos:start="4293:29" pos:end="4293:29">s</name></expr></argument>, <argument pos:start="4293:32" pos:end="4293:36"><expr pos:start="4293:32" pos:end="4293:36"><name pos:start="4293:32" pos:end="4293:36">modrm</name></expr></argument>, <argument pos:start="4293:39" pos:end="4293:42"><expr pos:start="4293:39" pos:end="4293:42"><name pos:start="4293:39" pos:end="4293:42">MO_8</name></expr></argument>, <argument pos:start="4293:45" pos:end="4293:51"><expr pos:start="4293:45" pos:end="4293:51"><name pos:start="4293:45" pos:end="4293:51">OR_TMP0</name></expr></argument>, <argument pos:start="4293:54" pos:end="4293:54"><expr pos:start="4293:54" pos:end="4293:54"><literal type="number" pos:start="4293:54" pos:end="4293:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4295:9" pos:end="4295:14">break;</break>

    <case pos:start="4297:5" pos:end="4297:25">case <expr pos:start="4297:10" pos:end="4297:24"><literal type="number" pos:start="4297:10" pos:end="4297:14">0x140</literal> <operator pos:start="4297:16" pos:end="4297:18">...</operator> <literal type="number" pos:start="4297:20" pos:end="4297:24">0x14f</literal></expr>:</case> <comment type="block" pos:start="4297:27" pos:end="4297:43">/* cmov Gv, Ev */</comment>

        <if_stmt pos:start="4299:9" pos:end="4303:9"><if pos:start="4299:9" pos:end="4303:9">if <condition pos:start="4299:12" pos:end="4299:46">(<expr pos:start="4299:13" pos:end="4299:45"><operator pos:start="4299:13" pos:end="4299:13">!</operator><operator pos:start="4299:14" pos:end="4299:14">(</operator><name pos:start="4299:15" pos:end="4299:31"><name pos:start="4299:15" pos:end="4299:15">s</name><operator pos:start="4299:16" pos:end="4299:17">-&gt;</operator><name pos:start="4299:18" pos:end="4299:31">cpuid_features</name></name> <operator pos:start="4299:33" pos:end="4299:33">&amp;</operator> <name pos:start="4299:35" pos:end="4299:44">CPUID_CMOV</name><operator pos:start="4299:45" pos:end="4299:45">)</operator></expr>)</condition> <block pos:start="4299:48" pos:end="4303:9">{<block_content pos:start="4301:13" pos:end="4301:28">

            <goto pos:start="4301:13" pos:end="4301:28">goto <name pos:start="4301:18" pos:end="4301:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="4305:9" pos:end="4305:19"><expr pos:start="4305:9" pos:end="4305:18"><name pos:start="4305:9" pos:end="4305:10">ot</name> <operator pos:start="4305:12" pos:end="4305:12">=</operator> <name pos:start="4305:14" pos:end="4305:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4307:9" pos:end="4307:38"><expr pos:start="4307:9" pos:end="4307:37"><name pos:start="4307:9" pos:end="4307:13">modrm</name> <operator pos:start="4307:15" pos:end="4307:15">=</operator> <call pos:start="4307:17" pos:end="4307:37"><name pos:start="4307:17" pos:end="4307:29">x86_ldub_code</name><argument_list pos:start="4307:30" pos:end="4307:37">(<argument pos:start="4307:31" pos:end="4307:33"><expr pos:start="4307:31" pos:end="4307:33"><name pos:start="4307:31" pos:end="4307:33">env</name></expr></argument>, <argument pos:start="4307:36" pos:end="4307:36"><expr pos:start="4307:36" pos:end="4307:36"><name pos:start="4307:36" pos:end="4307:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4309:9" pos:end="4309:41"><expr pos:start="4309:9" pos:end="4309:40"><name pos:start="4309:9" pos:end="4309:11">reg</name> <operator pos:start="4309:13" pos:end="4309:13">=</operator> <operator pos:start="4309:15" pos:end="4309:15">(</operator><operator pos:start="4309:16" pos:end="4309:16">(</operator><name pos:start="4309:17" pos:end="4309:21">modrm</name> <operator pos:start="4309:23" pos:end="4309:24">&gt;&gt;</operator> <literal type="number" pos:start="4309:26" pos:end="4309:26">3</literal><operator pos:start="4309:27" pos:end="4309:27">)</operator> <operator pos:start="4309:29" pos:end="4309:29">&amp;</operator> <literal type="number" pos:start="4309:31" pos:end="4309:31">7</literal><operator pos:start="4309:32" pos:end="4309:32">)</operator> <operator pos:start="4309:34" pos:end="4309:34">|</operator> <name pos:start="4309:36" pos:end="4309:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4311:9" pos:end="4311:47"><expr pos:start="4311:9" pos:end="4311:46"><call pos:start="4311:9" pos:end="4311:46"><name pos:start="4311:9" pos:end="4311:19">gen_cmovcc1</name><argument_list pos:start="4311:20" pos:end="4311:46">(<argument pos:start="4311:21" pos:end="4311:23"><expr pos:start="4311:21" pos:end="4311:23"><name pos:start="4311:21" pos:end="4311:23">env</name></expr></argument>, <argument pos:start="4311:26" pos:end="4311:26"><expr pos:start="4311:26" pos:end="4311:26"><name pos:start="4311:26" pos:end="4311:26">s</name></expr></argument>, <argument pos:start="4311:29" pos:end="4311:30"><expr pos:start="4311:29" pos:end="4311:30"><name pos:start="4311:29" pos:end="4311:30">ot</name></expr></argument>, <argument pos:start="4311:33" pos:end="4311:33"><expr pos:start="4311:33" pos:end="4311:33"><name pos:start="4311:33" pos:end="4311:33">b</name></expr></argument>, <argument pos:start="4311:36" pos:end="4311:40"><expr pos:start="4311:36" pos:end="4311:40"><name pos:start="4311:36" pos:end="4311:40">modrm</name></expr></argument>, <argument pos:start="4311:43" pos:end="4311:45"><expr pos:start="4311:43" pos:end="4311:45"><name pos:start="4311:43" pos:end="4311:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4313:9" pos:end="4313:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4317:9" pos:end="4317:34">/************************/</comment>

        <comment type="block" pos:start="4319:9" pos:end="4319:19">/* flags */</comment>

    <case pos:start="4321:5" pos:end="4321:14">case <expr pos:start="4321:10" pos:end="4321:13"><literal type="number" pos:start="4321:10" pos:end="4321:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="4321:16" pos:end="4321:26">/* pushf */</comment>

        <expr_stmt pos:start="4323:9" pos:end="4323:61"><expr pos:start="4323:9" pos:end="4323:60"><call pos:start="4323:9" pos:end="4323:60"><name pos:start="4323:9" pos:end="4323:31">gen_svm_check_intercept</name><argument_list pos:start="4323:32" pos:end="4323:60">(<argument pos:start="4323:33" pos:end="4323:33"><expr pos:start="4323:33" pos:end="4323:33"><name pos:start="4323:33" pos:end="4323:33">s</name></expr></argument>, <argument pos:start="4323:36" pos:end="4323:43"><expr pos:start="4323:36" pos:end="4323:43"><name pos:start="4323:36" pos:end="4323:43">pc_start</name></expr></argument>, <argument pos:start="4323:46" pos:end="4323:59"><expr pos:start="4323:46" pos:end="4323:59"><name pos:start="4323:46" pos:end="4323:59">SVM_EXIT_PUSHF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4325:9" pos:end="4337:9"><if pos:start="4325:9" pos:end="4329:9">if <condition pos:start="4325:12" pos:end="4325:36">(<expr pos:start="4325:13" pos:end="4325:35"><name pos:start="4325:13" pos:end="4325:19"><name pos:start="4325:13" pos:end="4325:13">s</name><operator pos:start="4325:14" pos:end="4325:15">-&gt;</operator><name pos:start="4325:16" pos:end="4325:19">vm86</name></name> <operator pos:start="4325:21" pos:end="4325:22">&amp;&amp;</operator> <name pos:start="4325:24" pos:end="4325:30"><name pos:start="4325:24" pos:end="4325:24">s</name><operator pos:start="4325:25" pos:end="4325:26">-&gt;</operator><name pos:start="4325:27" pos:end="4325:30">iopl</name></name> <operator pos:start="4325:32" pos:end="4325:33">!=</operator> <literal type="number" pos:start="4325:35" pos:end="4325:35">3</literal></expr>)</condition> <block pos:start="4325:38" pos:end="4329:9">{<block_content pos:start="4327:13" pos:end="4327:64">

            <expr_stmt pos:start="4327:13" pos:end="4327:64"><expr pos:start="4327:13" pos:end="4327:63"><call pos:start="4327:13" pos:end="4327:63"><name pos:start="4327:13" pos:end="4327:25">gen_exception</name><argument_list pos:start="4327:26" pos:end="4327:63">(<argument pos:start="4327:27" pos:end="4327:27"><expr pos:start="4327:27" pos:end="4327:27"><name pos:start="4327:27" pos:end="4327:27">s</name></expr></argument>, <argument pos:start="4327:30" pos:end="4327:39"><expr pos:start="4327:30" pos:end="4327:39"><name pos:start="4327:30" pos:end="4327:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4327:42" pos:end="4327:62"><expr pos:start="4327:42" pos:end="4327:62"><name pos:start="4327:42" pos:end="4327:49">pc_start</name> <operator pos:start="4327:51" pos:end="4327:51">-</operator> <name pos:start="4327:53" pos:end="4327:62"><name pos:start="4327:53" pos:end="4327:53">s</name><operator pos:start="4327:54" pos:end="4327:55">-&gt;</operator><name pos:start="4327:56" pos:end="4327:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4329:11" pos:end="4337:9">else <block pos:start="4329:16" pos:end="4337:9">{<block_content pos:start="4331:13" pos:end="4335:34">

            <expr_stmt pos:start="4331:13" pos:end="4331:32"><expr pos:start="4331:13" pos:end="4331:31"><call pos:start="4331:13" pos:end="4331:31"><name pos:start="4331:13" pos:end="4331:28">gen_update_cc_op</name><argument_list pos:start="4331:29" pos:end="4331:31">(<argument pos:start="4331:30" pos:end="4331:30"><expr pos:start="4331:30" pos:end="4331:30"><name pos:start="4331:30" pos:end="4331:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4333:13" pos:end="4333:52"><expr pos:start="4333:13" pos:end="4333:51"><call pos:start="4333:13" pos:end="4333:51"><name pos:start="4333:13" pos:end="4333:34">gen_helper_read_eflags</name><argument_list pos:start="4333:35" pos:end="4333:51">(<argument pos:start="4333:36" pos:end="4333:41"><expr pos:start="4333:36" pos:end="4333:41"><name pos:start="4333:36" pos:end="4333:41">cpu_T0</name></expr></argument>, <argument pos:start="4333:44" pos:end="4333:50"><expr pos:start="4333:44" pos:end="4333:50"><name pos:start="4333:44" pos:end="4333:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4335:13" pos:end="4335:34"><expr pos:start="4335:13" pos:end="4335:33"><call pos:start="4335:13" pos:end="4335:33"><name pos:start="4335:13" pos:end="4335:22">gen_push_v</name><argument_list pos:start="4335:23" pos:end="4335:33">(<argument pos:start="4335:24" pos:end="4335:24"><expr pos:start="4335:24" pos:end="4335:24"><name pos:start="4335:24" pos:end="4335:24">s</name></expr></argument>, <argument pos:start="4335:27" pos:end="4335:32"><expr pos:start="4335:27" pos:end="4335:32"><name pos:start="4335:27" pos:end="4335:32">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4339:9" pos:end="4339:14">break;</break>

    <case pos:start="4341:5" pos:end="4341:14">case <expr pos:start="4341:10" pos:end="4341:13"><literal type="number" pos:start="4341:10" pos:end="4341:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="4341:16" pos:end="4341:25">/* popf */</comment>

        <expr_stmt pos:start="4343:9" pos:end="4343:60"><expr pos:start="4343:9" pos:end="4343:59"><call pos:start="4343:9" pos:end="4343:59"><name pos:start="4343:9" pos:end="4343:31">gen_svm_check_intercept</name><argument_list pos:start="4343:32" pos:end="4343:59">(<argument pos:start="4343:33" pos:end="4343:33"><expr pos:start="4343:33" pos:end="4343:33"><name pos:start="4343:33" pos:end="4343:33">s</name></expr></argument>, <argument pos:start="4343:36" pos:end="4343:43"><expr pos:start="4343:36" pos:end="4343:43"><name pos:start="4343:36" pos:end="4343:43">pc_start</name></expr></argument>, <argument pos:start="4343:46" pos:end="4343:58"><expr pos:start="4343:46" pos:end="4343:58"><name pos:start="4343:46" pos:end="4343:58">SVM_EXIT_POPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4345:9" pos:end="4453:9"><if pos:start="4345:9" pos:end="4349:9">if <condition pos:start="4345:12" pos:end="4345:36">(<expr pos:start="4345:13" pos:end="4345:35"><name pos:start="4345:13" pos:end="4345:19"><name pos:start="4345:13" pos:end="4345:13">s</name><operator pos:start="4345:14" pos:end="4345:15">-&gt;</operator><name pos:start="4345:16" pos:end="4345:19">vm86</name></name> <operator pos:start="4345:21" pos:end="4345:22">&amp;&amp;</operator> <name pos:start="4345:24" pos:end="4345:30"><name pos:start="4345:24" pos:end="4345:24">s</name><operator pos:start="4345:25" pos:end="4345:26">-&gt;</operator><name pos:start="4345:27" pos:end="4345:30">iopl</name></name> <operator pos:start="4345:32" pos:end="4345:33">!=</operator> <literal type="number" pos:start="4345:35" pos:end="4345:35">3</literal></expr>)</condition> <block pos:start="4345:38" pos:end="4349:9">{<block_content pos:start="4347:13" pos:end="4347:64">

            <expr_stmt pos:start="4347:13" pos:end="4347:64"><expr pos:start="4347:13" pos:end="4347:63"><call pos:start="4347:13" pos:end="4347:63"><name pos:start="4347:13" pos:end="4347:25">gen_exception</name><argument_list pos:start="4347:26" pos:end="4347:63">(<argument pos:start="4347:27" pos:end="4347:27"><expr pos:start="4347:27" pos:end="4347:27"><name pos:start="4347:27" pos:end="4347:27">s</name></expr></argument>, <argument pos:start="4347:30" pos:end="4347:39"><expr pos:start="4347:30" pos:end="4347:39"><name pos:start="4347:30" pos:end="4347:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4347:42" pos:end="4347:62"><expr pos:start="4347:42" pos:end="4347:62"><name pos:start="4347:42" pos:end="4347:49">pc_start</name> <operator pos:start="4347:51" pos:end="4347:51">-</operator> <name pos:start="4347:53" pos:end="4347:62"><name pos:start="4347:53" pos:end="4347:53">s</name><operator pos:start="4347:54" pos:end="4347:55">-&gt;</operator><name pos:start="4347:56" pos:end="4347:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4349:11" pos:end="4453:9">else <block pos:start="4349:16" pos:end="4453:9">{<block_content pos:start="4351:13" pos:end="4451:23">

            <expr_stmt pos:start="4351:13" pos:end="4351:31"><expr pos:start="4351:13" pos:end="4351:30"><name pos:start="4351:13" pos:end="4351:14">ot</name> <operator pos:start="4351:16" pos:end="4351:16">=</operator> <call pos:start="4351:18" pos:end="4351:30"><name pos:start="4351:18" pos:end="4351:27">gen_pop_T0</name><argument_list pos:start="4351:28" pos:end="4351:30">(<argument pos:start="4351:29" pos:end="4351:29"><expr pos:start="4351:29" pos:end="4351:29"><name pos:start="4351:29" pos:end="4351:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4353:13" pos:end="4441:13"><if pos:start="4353:13" pos:end="4381:13">if <condition pos:start="4353:16" pos:end="4353:28">(<expr pos:start="4353:17" pos:end="4353:27"><name pos:start="4353:17" pos:end="4353:22"><name pos:start="4353:17" pos:end="4353:17">s</name><operator pos:start="4353:18" pos:end="4353:19">-&gt;</operator><name pos:start="4353:20" pos:end="4353:22">cpl</name></name> <operator pos:start="4353:24" pos:end="4353:25">==</operator> <literal type="number" pos:start="4353:27" pos:end="4353:27">0</literal></expr>)</condition> <block pos:start="4353:30" pos:end="4381:13">{<block_content pos:start="4355:17" pos:end="4379:17">

                <if_stmt pos:start="4355:17" pos:end="4379:17"><if pos:start="4355:17" pos:end="4367:17">if <condition pos:start="4355:20" pos:end="4355:35">(<expr pos:start="4355:21" pos:end="4355:34"><name pos:start="4355:21" pos:end="4355:25">dflag</name> <operator pos:start="4355:27" pos:end="4355:28">!=</operator> <name pos:start="4355:30" pos:end="4355:34">MO_16</name></expr>)</condition> <block pos:start="4355:37" pos:end="4367:17">{<block_content pos:start="4357:21" pos:end="4365:72">

                    <expr_stmt pos:start="4357:21" pos:end="4365:72"><expr pos:start="4357:21" pos:end="4365:71"><call pos:start="4357:21" pos:end="4365:71"><name pos:start="4357:21" pos:end="4357:43">gen_helper_write_eflags</name><argument_list pos:start="4357:44" pos:end="4365:71">(<argument pos:start="4357:45" pos:end="4357:51"><expr pos:start="4357:45" pos:end="4357:51"><name pos:start="4357:45" pos:end="4357:51">cpu_env</name></expr></argument>, <argument pos:start="4357:54" pos:end="4357:59"><expr pos:start="4357:54" pos:end="4357:59"><name pos:start="4357:54" pos:end="4357:59">cpu_T0</name></expr></argument>,

                                            <argument pos:start="4359:45" pos:end="4365:70"><expr pos:start="4359:45" pos:end="4365:70"><call pos:start="4359:45" pos:end="4365:70"><name pos:start="4359:45" pos:end="4359:57">tcg_const_i32</name><argument_list pos:start="4359:58" pos:end="4365:70">(<argument pos:start="4359:59" pos:end="4365:69"><expr pos:start="4359:59" pos:end="4365:69"><operator pos:start="4359:59" pos:end="4359:59">(</operator><name pos:start="4359:60" pos:end="4359:66">TF_MASK</name> <operator pos:start="4359:68" pos:end="4359:68">|</operator> <name pos:start="4359:70" pos:end="4359:76">AC_MASK</name> <operator pos:start="4359:78" pos:end="4359:78">|</operator>

                                                           <name pos:start="4361:60" pos:end="4361:66">ID_MASK</name> <operator pos:start="4361:68" pos:end="4361:68">|</operator> <name pos:start="4361:70" pos:end="4361:76">NT_MASK</name> <operator pos:start="4361:78" pos:end="4361:78">|</operator>

                                                           <name pos:start="4363:60" pos:end="4363:66">IF_MASK</name> <operator pos:start="4363:68" pos:end="4363:68">|</operator>

                                                           <name pos:start="4365:60" pos:end="4365:68">IOPL_MASK</name><operator pos:start="4365:69" pos:end="4365:69">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4367:19" pos:end="4379:17">else <block pos:start="4367:24" pos:end="4379:17">{<block_content pos:start="4369:21" pos:end="4377:69">

                    <expr_stmt pos:start="4369:21" pos:end="4377:69"><expr pos:start="4369:21" pos:end="4377:68"><call pos:start="4369:21" pos:end="4377:68"><name pos:start="4369:21" pos:end="4369:43">gen_helper_write_eflags</name><argument_list pos:start="4369:44" pos:end="4377:68">(<argument pos:start="4369:45" pos:end="4369:51"><expr pos:start="4369:45" pos:end="4369:51"><name pos:start="4369:45" pos:end="4369:51">cpu_env</name></expr></argument>, <argument pos:start="4369:54" pos:end="4369:59"><expr pos:start="4369:54" pos:end="4369:59"><name pos:start="4369:54" pos:end="4369:59">cpu_T0</name></expr></argument>,

                                            <argument pos:start="4371:45" pos:end="4377:67"><expr pos:start="4371:45" pos:end="4377:67"><call pos:start="4371:45" pos:end="4377:67"><name pos:start="4371:45" pos:end="4371:57">tcg_const_i32</name><argument_list pos:start="4371:58" pos:end="4377:67">(<argument pos:start="4371:59" pos:end="4377:66"><expr pos:start="4371:59" pos:end="4377:66"><operator pos:start="4371:59" pos:end="4371:59">(</operator><name pos:start="4371:60" pos:end="4371:66">TF_MASK</name> <operator pos:start="4371:68" pos:end="4371:68">|</operator> <name pos:start="4371:70" pos:end="4371:76">AC_MASK</name> <operator pos:start="4371:78" pos:end="4371:78">|</operator>

                                                           <name pos:start="4373:60" pos:end="4373:66">ID_MASK</name> <operator pos:start="4373:68" pos:end="4373:68">|</operator> <name pos:start="4373:70" pos:end="4373:76">NT_MASK</name> <operator pos:start="4373:78" pos:end="4373:78">|</operator>

                                                           <name pos:start="4375:60" pos:end="4375:66">IF_MASK</name> <operator pos:start="4375:68" pos:end="4375:68">|</operator> <name pos:start="4375:70" pos:end="4375:78">IOPL_MASK</name><operator pos:start="4375:79" pos:end="4375:79">)</operator>

                                                          <operator pos:start="4377:59" pos:end="4377:59">&amp;</operator> <literal type="number" pos:start="4377:61" pos:end="4377:66">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="4381:15" pos:end="4441:13">else <block pos:start="4381:20" pos:end="4441:13">{<block_content pos:start="4383:17" pos:end="4439:17">

                <if_stmt pos:start="4383:17" pos:end="4439:17"><if pos:start="4383:17" pos:end="4417:17">if <condition pos:start="4383:20" pos:end="4383:38">(<expr pos:start="4383:21" pos:end="4383:37"><name pos:start="4383:21" pos:end="4383:26"><name pos:start="4383:21" pos:end="4383:21">s</name><operator pos:start="4383:22" pos:end="4383:23">-&gt;</operator><name pos:start="4383:24" pos:end="4383:26">cpl</name></name> <operator pos:start="4383:28" pos:end="4383:29">&lt;=</operator> <name pos:start="4383:31" pos:end="4383:37"><name pos:start="4383:31" pos:end="4383:31">s</name><operator pos:start="4383:32" pos:end="4383:33">-&gt;</operator><name pos:start="4383:34" pos:end="4383:37">iopl</name></name></expr>)</condition> <block pos:start="4383:40" pos:end="4417:17">{<block_content pos:start="4385:21" pos:end="4415:21">

                    <if_stmt pos:start="4385:21" pos:end="4415:21"><if pos:start="4385:21" pos:end="4399:21">if <condition pos:start="4385:24" pos:end="4385:39">(<expr pos:start="4385:25" pos:end="4385:38"><name pos:start="4385:25" pos:end="4385:29">dflag</name> <operator pos:start="4385:31" pos:end="4385:32">!=</operator> <name pos:start="4385:34" pos:end="4385:38">MO_16</name></expr>)</condition> <block pos:start="4385:41" pos:end="4399:21">{<block_content pos:start="4387:25" pos:end="4397:74">

                        <expr_stmt pos:start="4387:25" pos:end="4397:74"><expr pos:start="4387:25" pos:end="4397:73"><call pos:start="4387:25" pos:end="4397:73"><name pos:start="4387:25" pos:end="4387:47">gen_helper_write_eflags</name><argument_list pos:start="4387:48" pos:end="4397:73">(<argument pos:start="4387:49" pos:end="4387:55"><expr pos:start="4387:49" pos:end="4387:55"><name pos:start="4387:49" pos:end="4387:55">cpu_env</name></expr></argument>, <argument pos:start="4387:58" pos:end="4387:63"><expr pos:start="4387:58" pos:end="4387:63"><name pos:start="4387:58" pos:end="4387:63">cpu_T0</name></expr></argument>,

                                                <argument pos:start="4389:49" pos:end="4397:72"><expr pos:start="4389:49" pos:end="4397:72"><call pos:start="4389:49" pos:end="4397:72"><name pos:start="4389:49" pos:end="4389:61">tcg_const_i32</name><argument_list pos:start="4389:62" pos:end="4397:72">(<argument pos:start="4389:63" pos:end="4397:71"><expr pos:start="4389:63" pos:end="4397:71"><operator pos:start="4389:63" pos:end="4389:63">(</operator><name pos:start="4389:64" pos:end="4389:70">TF_MASK</name> <operator pos:start="4389:72" pos:end="4389:72">|</operator>

                                                               <name pos:start="4391:64" pos:end="4391:70">AC_MASK</name> <operator pos:start="4391:72" pos:end="4391:72">|</operator>

                                                               <name pos:start="4393:64" pos:end="4393:70">ID_MASK</name> <operator pos:start="4393:72" pos:end="4393:72">|</operator>

                                                               <name pos:start="4395:64" pos:end="4395:70">NT_MASK</name> <operator pos:start="4395:72" pos:end="4395:72">|</operator>

                                                               <name pos:start="4397:64" pos:end="4397:70">IF_MASK</name><operator pos:start="4397:71" pos:end="4397:71">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4399:23" pos:end="4415:21">else <block pos:start="4399:28" pos:end="4415:21">{<block_content pos:start="4401:25" pos:end="4413:73">

                        <expr_stmt pos:start="4401:25" pos:end="4413:73"><expr pos:start="4401:25" pos:end="4413:72"><call pos:start="4401:25" pos:end="4413:72"><name pos:start="4401:25" pos:end="4401:47">gen_helper_write_eflags</name><argument_list pos:start="4401:48" pos:end="4413:72">(<argument pos:start="4401:49" pos:end="4401:55"><expr pos:start="4401:49" pos:end="4401:55"><name pos:start="4401:49" pos:end="4401:55">cpu_env</name></expr></argument>, <argument pos:start="4401:58" pos:end="4401:63"><expr pos:start="4401:58" pos:end="4401:63"><name pos:start="4401:58" pos:end="4401:63">cpu_T0</name></expr></argument>,

                                                <argument pos:start="4403:49" pos:end="4413:71"><expr pos:start="4403:49" pos:end="4413:71"><call pos:start="4403:49" pos:end="4413:71"><name pos:start="4403:49" pos:end="4403:61">tcg_const_i32</name><argument_list pos:start="4403:62" pos:end="4413:71">(<argument pos:start="4403:63" pos:end="4413:70"><expr pos:start="4403:63" pos:end="4413:70"><operator pos:start="4403:63" pos:end="4403:63">(</operator><name pos:start="4403:64" pos:end="4403:70">TF_MASK</name> <operator pos:start="4403:72" pos:end="4403:72">|</operator>

                                                               <name pos:start="4405:64" pos:end="4405:70">AC_MASK</name> <operator pos:start="4405:72" pos:end="4405:72">|</operator>

                                                               <name pos:start="4407:64" pos:end="4407:70">ID_MASK</name> <operator pos:start="4407:72" pos:end="4407:72">|</operator>

                                                               <name pos:start="4409:64" pos:end="4409:70">NT_MASK</name> <operator pos:start="4409:72" pos:end="4409:72">|</operator>

                                                               <name pos:start="4411:64" pos:end="4411:70">IF_MASK</name><operator pos:start="4411:71" pos:end="4411:71">)</operator>

                                                              <operator pos:start="4413:63" pos:end="4413:63">&amp;</operator> <literal type="number" pos:start="4413:65" pos:end="4413:70">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="4417:19" pos:end="4439:17">else <block pos:start="4417:24" pos:end="4439:17">{<block_content pos:start="4419:21" pos:end="4437:21">

                    <if_stmt pos:start="4419:21" pos:end="4437:21"><if pos:start="4419:21" pos:end="4427:21">if <condition pos:start="4419:24" pos:end="4419:39">(<expr pos:start="4419:25" pos:end="4419:38"><name pos:start="4419:25" pos:end="4419:29">dflag</name> <operator pos:start="4419:31" pos:end="4419:32">!=</operator> <name pos:start="4419:34" pos:end="4419:38">MO_16</name></expr>)</condition> <block pos:start="4419:41" pos:end="4427:21">{<block_content pos:start="4421:25" pos:end="4425:79">

                        <expr_stmt pos:start="4421:25" pos:end="4425:79"><expr pos:start="4421:25" pos:end="4425:78"><call pos:start="4421:25" pos:end="4425:78"><name pos:start="4421:25" pos:end="4421:47">gen_helper_write_eflags</name><argument_list pos:start="4421:48" pos:end="4425:78">(<argument pos:start="4421:49" pos:end="4421:55"><expr pos:start="4421:49" pos:end="4421:55"><name pos:start="4421:49" pos:end="4421:55">cpu_env</name></expr></argument>, <argument pos:start="4421:58" pos:end="4421:63"><expr pos:start="4421:58" pos:end="4421:63"><name pos:start="4421:58" pos:end="4421:63">cpu_T0</name></expr></argument>,

                                           <argument pos:start="4423:44" pos:end="4425:77"><expr pos:start="4423:44" pos:end="4425:77"><call pos:start="4423:44" pos:end="4425:77"><name pos:start="4423:44" pos:end="4423:56">tcg_const_i32</name><argument_list pos:start="4423:57" pos:end="4425:77">(<argument pos:start="4423:58" pos:end="4425:76"><expr pos:start="4423:58" pos:end="4425:76"><operator pos:start="4423:58" pos:end="4423:58">(</operator><name pos:start="4423:59" pos:end="4423:65">TF_MASK</name> <operator pos:start="4423:67" pos:end="4423:67">|</operator> <name pos:start="4423:69" pos:end="4423:75">AC_MASK</name> <operator pos:start="4423:77" pos:end="4423:77">|</operator>

                                                          <name pos:start="4425:59" pos:end="4425:65">ID_MASK</name> <operator pos:start="4425:67" pos:end="4425:67">|</operator> <name pos:start="4425:69" pos:end="4425:75">NT_MASK</name><operator pos:start="4425:76" pos:end="4425:76">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4427:23" pos:end="4437:21">else <block pos:start="4427:28" pos:end="4437:21">{<block_content pos:start="4429:25" pos:end="4435:68">

                        <expr_stmt pos:start="4429:25" pos:end="4435:68"><expr pos:start="4429:25" pos:end="4435:67"><call pos:start="4429:25" pos:end="4435:67"><name pos:start="4429:25" pos:end="4429:47">gen_helper_write_eflags</name><argument_list pos:start="4429:48" pos:end="4435:67">(<argument pos:start="4429:49" pos:end="4429:55"><expr pos:start="4429:49" pos:end="4429:55"><name pos:start="4429:49" pos:end="4429:55">cpu_env</name></expr></argument>, <argument pos:start="4429:58" pos:end="4429:63"><expr pos:start="4429:58" pos:end="4429:63"><name pos:start="4429:58" pos:end="4429:63">cpu_T0</name></expr></argument>,

                                           <argument pos:start="4431:44" pos:end="4435:66"><expr pos:start="4431:44" pos:end="4435:66"><call pos:start="4431:44" pos:end="4435:66"><name pos:start="4431:44" pos:end="4431:56">tcg_const_i32</name><argument_list pos:start="4431:57" pos:end="4435:66">(<argument pos:start="4431:58" pos:end="4435:65"><expr pos:start="4431:58" pos:end="4435:65"><operator pos:start="4431:58" pos:end="4431:58">(</operator><name pos:start="4431:59" pos:end="4431:65">TF_MASK</name> <operator pos:start="4431:67" pos:end="4431:67">|</operator> <name pos:start="4431:69" pos:end="4431:75">AC_MASK</name> <operator pos:start="4431:77" pos:end="4431:77">|</operator>

                                                          <name pos:start="4433:59" pos:end="4433:65">ID_MASK</name> <operator pos:start="4433:67" pos:end="4433:67">|</operator> <name pos:start="4433:69" pos:end="4433:75">NT_MASK</name><operator pos:start="4433:76" pos:end="4433:76">)</operator>

                                                         <operator pos:start="4435:58" pos:end="4435:58">&amp;</operator> <literal type="number" pos:start="4435:60" pos:end="4435:65">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="4443:13" pos:end="4443:34"><expr pos:start="4443:13" pos:end="4443:33"><call pos:start="4443:13" pos:end="4443:33"><name pos:start="4443:13" pos:end="4443:26">gen_pop_update</name><argument_list pos:start="4443:27" pos:end="4443:33">(<argument pos:start="4443:28" pos:end="4443:28"><expr pos:start="4443:28" pos:end="4443:28"><name pos:start="4443:28" pos:end="4443:28">s</name></expr></argument>, <argument pos:start="4443:31" pos:end="4443:32"><expr pos:start="4443:31" pos:end="4443:32"><name pos:start="4443:31" pos:end="4443:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4445:13" pos:end="4445:39"><expr pos:start="4445:13" pos:end="4445:38"><call pos:start="4445:13" pos:end="4445:38"><name pos:start="4445:13" pos:end="4445:21">set_cc_op</name><argument_list pos:start="4445:22" pos:end="4445:38">(<argument pos:start="4445:23" pos:end="4445:23"><expr pos:start="4445:23" pos:end="4445:23"><name pos:start="4445:23" pos:end="4445:23">s</name></expr></argument>, <argument pos:start="4445:26" pos:end="4445:37"><expr pos:start="4445:26" pos:end="4445:37"><name pos:start="4445:26" pos:end="4445:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4447:13" pos:end="4447:65">/* abort translation because TF/AC flag may change */</comment>

            <expr_stmt pos:start="4449:13" pos:end="4449:43"><expr pos:start="4449:13" pos:end="4449:42"><call pos:start="4449:13" pos:end="4449:42"><name pos:start="4449:13" pos:end="4449:22">gen_jmp_im</name><argument_list pos:start="4449:23" pos:end="4449:42">(<argument pos:start="4449:24" pos:end="4449:41"><expr pos:start="4449:24" pos:end="4449:41"><name pos:start="4449:24" pos:end="4449:28"><name pos:start="4449:24" pos:end="4449:24">s</name><operator pos:start="4449:25" pos:end="4449:26">-&gt;</operator><name pos:start="4449:27" pos:end="4449:28">pc</name></name> <operator pos:start="4449:30" pos:end="4449:30">-</operator> <name pos:start="4449:32" pos:end="4449:41"><name pos:start="4449:32" pos:end="4449:32">s</name><operator pos:start="4449:33" pos:end="4449:34">-&gt;</operator><name pos:start="4449:35" pos:end="4449:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4451:13" pos:end="4451:23"><expr pos:start="4451:13" pos:end="4451:22"><call pos:start="4451:13" pos:end="4451:22"><name pos:start="4451:13" pos:end="4451:19">gen_eob</name><argument_list pos:start="4451:20" pos:end="4451:22">(<argument pos:start="4451:21" pos:end="4451:21"><expr pos:start="4451:21" pos:end="4451:21"><name pos:start="4451:21" pos:end="4451:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4455:9" pos:end="4455:14">break;</break>

    <case pos:start="4457:5" pos:end="4457:14">case <expr pos:start="4457:10" pos:end="4457:13"><literal type="number" pos:start="4457:10" pos:end="4457:13">0x9e</literal></expr>:</case> <comment type="block" pos:start="4457:16" pos:end="4457:25">/* sahf */</comment>

        <if_stmt pos:start="4459:9" pos:end="4461:28"><if pos:start="4459:9" pos:end="4461:28">if <condition pos:start="4459:12" pos:end="4459:72">(<expr pos:start="4459:13" pos:end="4459:71"><call pos:start="4459:13" pos:end="4459:21"><name pos:start="4459:13" pos:end="4459:18">CODE64</name><argument_list pos:start="4459:19" pos:end="4459:21">(<argument pos:start="4459:20" pos:end="4459:20"><expr pos:start="4459:20" pos:end="4459:20"><name pos:start="4459:20" pos:end="4459:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4459:23" pos:end="4459:24">&amp;&amp;</operator> <operator pos:start="4459:26" pos:end="4459:26">!</operator><operator pos:start="4459:27" pos:end="4459:27">(</operator><name pos:start="4459:28" pos:end="4459:49"><name pos:start="4459:28" pos:end="4459:28">s</name><operator pos:start="4459:29" pos:end="4459:30">-&gt;</operator><name pos:start="4459:31" pos:end="4459:49">cpuid_ext3_features</name></name> <operator pos:start="4459:51" pos:end="4459:51">&amp;</operator> <name pos:start="4459:53" pos:end="4459:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="4459:71" pos:end="4459:71">)</operator></expr>)</condition><block type="pseudo" pos:start="4461:13" pos:end="4461:28"><block_content pos:start="4461:13" pos:end="4461:28">

            <goto pos:start="4461:13" pos:end="4461:28">goto <name pos:start="4461:18" pos:end="4461:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4463:9" pos:end="4463:45"><expr pos:start="4463:9" pos:end="4463:44"><call pos:start="4463:9" pos:end="4463:44"><name pos:start="4463:9" pos:end="4463:24">gen_op_mov_v_reg</name><argument_list pos:start="4463:25" pos:end="4463:44">(<argument pos:start="4463:26" pos:end="4463:29"><expr pos:start="4463:26" pos:end="4463:29"><name pos:start="4463:26" pos:end="4463:29">MO_8</name></expr></argument>, <argument pos:start="4463:32" pos:end="4463:37"><expr pos:start="4463:32" pos:end="4463:37"><name pos:start="4463:32" pos:end="4463:37">cpu_T0</name></expr></argument>, <argument pos:start="4463:40" pos:end="4463:43"><expr pos:start="4463:40" pos:end="4463:43"><name pos:start="4463:40" pos:end="4463:43">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4465:9" pos:end="4465:30"><expr pos:start="4465:9" pos:end="4465:29"><call pos:start="4465:9" pos:end="4465:29"><name pos:start="4465:9" pos:end="4465:26">gen_compute_eflags</name><argument_list pos:start="4465:27" pos:end="4465:29">(<argument pos:start="4465:28" pos:end="4465:28"><expr pos:start="4465:28" pos:end="4465:28"><name pos:start="4465:28" pos:end="4465:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4467:9" pos:end="4467:54"><expr pos:start="4467:9" pos:end="4467:53"><call pos:start="4467:9" pos:end="4467:53"><name pos:start="4467:9" pos:end="4467:23">tcg_gen_andi_tl</name><argument_list pos:start="4467:24" pos:end="4467:53">(<argument pos:start="4467:25" pos:end="4467:34"><expr pos:start="4467:25" pos:end="4467:34"><name pos:start="4467:25" pos:end="4467:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4467:37" pos:end="4467:46"><expr pos:start="4467:37" pos:end="4467:46"><name pos:start="4467:37" pos:end="4467:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4467:49" pos:end="4467:52"><expr pos:start="4467:49" pos:end="4467:52"><name pos:start="4467:49" pos:end="4467:52">CC_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4469:9" pos:end="4469:74"><expr pos:start="4469:9" pos:end="4469:73"><call pos:start="4469:9" pos:end="4469:73"><name pos:start="4469:9" pos:end="4469:23">tcg_gen_andi_tl</name><argument_list pos:start="4469:24" pos:end="4469:73">(<argument pos:start="4469:25" pos:end="4469:30"><expr pos:start="4469:25" pos:end="4469:30"><name pos:start="4469:25" pos:end="4469:30">cpu_T0</name></expr></argument>, <argument pos:start="4469:33" pos:end="4469:38"><expr pos:start="4469:33" pos:end="4469:38"><name pos:start="4469:33" pos:end="4469:38">cpu_T0</name></expr></argument>, <argument pos:start="4469:41" pos:end="4469:72"><expr pos:start="4469:41" pos:end="4469:72"><name pos:start="4469:41" pos:end="4469:44">CC_S</name> <operator pos:start="4469:46" pos:end="4469:46">|</operator> <name pos:start="4469:48" pos:end="4469:51">CC_Z</name> <operator pos:start="4469:53" pos:end="4469:53">|</operator> <name pos:start="4469:55" pos:end="4469:58">CC_A</name> <operator pos:start="4469:60" pos:end="4469:60">|</operator> <name pos:start="4469:62" pos:end="4469:65">CC_P</name> <operator pos:start="4469:67" pos:end="4469:67">|</operator> <name pos:start="4469:69" pos:end="4469:72">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4471:9" pos:end="4471:54"><expr pos:start="4471:9" pos:end="4471:53"><call pos:start="4471:9" pos:end="4471:53"><name pos:start="4471:9" pos:end="4471:21">tcg_gen_or_tl</name><argument_list pos:start="4471:22" pos:end="4471:53">(<argument pos:start="4471:23" pos:end="4471:32"><expr pos:start="4471:23" pos:end="4471:32"><name pos:start="4471:23" pos:end="4471:32">cpu_cc_src</name></expr></argument>, <argument pos:start="4471:35" pos:end="4471:44"><expr pos:start="4471:35" pos:end="4471:44"><name pos:start="4471:35" pos:end="4471:44">cpu_cc_src</name></expr></argument>, <argument pos:start="4471:47" pos:end="4471:52"><expr pos:start="4471:47" pos:end="4471:52"><name pos:start="4471:47" pos:end="4471:52">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4473:9" pos:end="4473:14">break;</break>

    <case pos:start="4475:5" pos:end="4475:14">case <expr pos:start="4475:10" pos:end="4475:13"><literal type="number" pos:start="4475:10" pos:end="4475:13">0x9f</literal></expr>:</case> <comment type="block" pos:start="4475:16" pos:end="4475:25">/* lahf */</comment>

        <if_stmt pos:start="4477:9" pos:end="4479:28"><if pos:start="4477:9" pos:end="4479:28">if <condition pos:start="4477:12" pos:end="4477:72">(<expr pos:start="4477:13" pos:end="4477:71"><call pos:start="4477:13" pos:end="4477:21"><name pos:start="4477:13" pos:end="4477:18">CODE64</name><argument_list pos:start="4477:19" pos:end="4477:21">(<argument pos:start="4477:20" pos:end="4477:20"><expr pos:start="4477:20" pos:end="4477:20"><name pos:start="4477:20" pos:end="4477:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4477:23" pos:end="4477:24">&amp;&amp;</operator> <operator pos:start="4477:26" pos:end="4477:26">!</operator><operator pos:start="4477:27" pos:end="4477:27">(</operator><name pos:start="4477:28" pos:end="4477:49"><name pos:start="4477:28" pos:end="4477:28">s</name><operator pos:start="4477:29" pos:end="4477:30">-&gt;</operator><name pos:start="4477:31" pos:end="4477:49">cpuid_ext3_features</name></name> <operator pos:start="4477:51" pos:end="4477:51">&amp;</operator> <name pos:start="4477:53" pos:end="4477:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="4477:71" pos:end="4477:71">)</operator></expr>)</condition><block type="pseudo" pos:start="4479:13" pos:end="4479:28"><block_content pos:start="4479:13" pos:end="4479:28">

            <goto pos:start="4479:13" pos:end="4479:28">goto <name pos:start="4479:18" pos:end="4479:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4481:9" pos:end="4481:30"><expr pos:start="4481:9" pos:end="4481:29"><call pos:start="4481:9" pos:end="4481:29"><name pos:start="4481:9" pos:end="4481:26">gen_compute_eflags</name><argument_list pos:start="4481:27" pos:end="4481:29">(<argument pos:start="4481:28" pos:end="4481:28"><expr pos:start="4481:28" pos:end="4481:28"><name pos:start="4481:28" pos:end="4481:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="4483:9" pos:end="4483:71">/* Note: gen_compute_eflags() only gives the condition codes */</comment>

        <expr_stmt pos:start="4485:9" pos:end="4485:49"><expr pos:start="4485:9" pos:end="4485:48"><call pos:start="4485:9" pos:end="4485:48"><name pos:start="4485:9" pos:end="4485:22">tcg_gen_ori_tl</name><argument_list pos:start="4485:23" pos:end="4485:48">(<argument pos:start="4485:24" pos:end="4485:29"><expr pos:start="4485:24" pos:end="4485:29"><name pos:start="4485:24" pos:end="4485:29">cpu_T0</name></expr></argument>, <argument pos:start="4485:32" pos:end="4485:41"><expr pos:start="4485:32" pos:end="4485:41"><name pos:start="4485:32" pos:end="4485:41">cpu_cc_src</name></expr></argument>, <argument pos:start="4485:44" pos:end="4485:47"><expr pos:start="4485:44" pos:end="4485:47"><literal type="number" pos:start="4485:44" pos:end="4485:47">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4487:9" pos:end="4487:45"><expr pos:start="4487:9" pos:end="4487:44"><call pos:start="4487:9" pos:end="4487:44"><name pos:start="4487:9" pos:end="4487:24">gen_op_mov_reg_v</name><argument_list pos:start="4487:25" pos:end="4487:44">(<argument pos:start="4487:26" pos:end="4487:29"><expr pos:start="4487:26" pos:end="4487:29"><name pos:start="4487:26" pos:end="4487:29">MO_8</name></expr></argument>, <argument pos:start="4487:32" pos:end="4487:35"><expr pos:start="4487:32" pos:end="4487:35"><name pos:start="4487:32" pos:end="4487:35">R_AH</name></expr></argument>, <argument pos:start="4487:38" pos:end="4487:43"><expr pos:start="4487:38" pos:end="4487:43"><name pos:start="4487:38" pos:end="4487:43">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4489:9" pos:end="4489:14">break;</break>

    <case pos:start="4491:5" pos:end="4491:14">case <expr pos:start="4491:10" pos:end="4491:13"><literal type="number" pos:start="4491:10" pos:end="4491:13">0xf5</literal></expr>:</case> <comment type="block" pos:start="4491:16" pos:end="4491:24">/* cmc */</comment>

        <expr_stmt pos:start="4493:9" pos:end="4493:30"><expr pos:start="4493:9" pos:end="4493:29"><call pos:start="4493:9" pos:end="4493:29"><name pos:start="4493:9" pos:end="4493:26">gen_compute_eflags</name><argument_list pos:start="4493:27" pos:end="4493:29">(<argument pos:start="4493:28" pos:end="4493:28"><expr pos:start="4493:28" pos:end="4493:28"><name pos:start="4493:28" pos:end="4493:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4495:9" pos:end="4495:54"><expr pos:start="4495:9" pos:end="4495:53"><call pos:start="4495:9" pos:end="4495:53"><name pos:start="4495:9" pos:end="4495:23">tcg_gen_xori_tl</name><argument_list pos:start="4495:24" pos:end="4495:53">(<argument pos:start="4495:25" pos:end="4495:34"><expr pos:start="4495:25" pos:end="4495:34"><name pos:start="4495:25" pos:end="4495:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4495:37" pos:end="4495:46"><expr pos:start="4495:37" pos:end="4495:46"><name pos:start="4495:37" pos:end="4495:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4495:49" pos:end="4495:52"><expr pos:start="4495:49" pos:end="4495:52"><name pos:start="4495:49" pos:end="4495:52">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4497:9" pos:end="4497:14">break;</break>

    <case pos:start="4499:5" pos:end="4499:14">case <expr pos:start="4499:10" pos:end="4499:13"><literal type="number" pos:start="4499:10" pos:end="4499:13">0xf8</literal></expr>:</case> <comment type="block" pos:start="4499:16" pos:end="4499:24">/* clc */</comment>

        <expr_stmt pos:start="4501:9" pos:end="4501:30"><expr pos:start="4501:9" pos:end="4501:29"><call pos:start="4501:9" pos:end="4501:29"><name pos:start="4501:9" pos:end="4501:26">gen_compute_eflags</name><argument_list pos:start="4501:27" pos:end="4501:29">(<argument pos:start="4501:28" pos:end="4501:28"><expr pos:start="4501:28" pos:end="4501:28"><name pos:start="4501:28" pos:end="4501:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4503:9" pos:end="4503:55"><expr pos:start="4503:9" pos:end="4503:54"><call pos:start="4503:9" pos:end="4503:54"><name pos:start="4503:9" pos:end="4503:23">tcg_gen_andi_tl</name><argument_list pos:start="4503:24" pos:end="4503:54">(<argument pos:start="4503:25" pos:end="4503:34"><expr pos:start="4503:25" pos:end="4503:34"><name pos:start="4503:25" pos:end="4503:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4503:37" pos:end="4503:46"><expr pos:start="4503:37" pos:end="4503:46"><name pos:start="4503:37" pos:end="4503:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4503:49" pos:end="4503:53"><expr pos:start="4503:49" pos:end="4503:53"><operator pos:start="4503:49" pos:end="4503:49">~</operator><name pos:start="4503:50" pos:end="4503:53">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4505:9" pos:end="4505:14">break;</break>

    <case pos:start="4507:5" pos:end="4507:14">case <expr pos:start="4507:10" pos:end="4507:13"><literal type="number" pos:start="4507:10" pos:end="4507:13">0xf9</literal></expr>:</case> <comment type="block" pos:start="4507:16" pos:end="4507:24">/* stc */</comment>

        <expr_stmt pos:start="4509:9" pos:end="4509:30"><expr pos:start="4509:9" pos:end="4509:29"><call pos:start="4509:9" pos:end="4509:29"><name pos:start="4509:9" pos:end="4509:26">gen_compute_eflags</name><argument_list pos:start="4509:27" pos:end="4509:29">(<argument pos:start="4509:28" pos:end="4509:28"><expr pos:start="4509:28" pos:end="4509:28"><name pos:start="4509:28" pos:end="4509:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4511:9" pos:end="4511:53"><expr pos:start="4511:9" pos:end="4511:52"><call pos:start="4511:9" pos:end="4511:52"><name pos:start="4511:9" pos:end="4511:22">tcg_gen_ori_tl</name><argument_list pos:start="4511:23" pos:end="4511:52">(<argument pos:start="4511:24" pos:end="4511:33"><expr pos:start="4511:24" pos:end="4511:33"><name pos:start="4511:24" pos:end="4511:33">cpu_cc_src</name></expr></argument>, <argument pos:start="4511:36" pos:end="4511:45"><expr pos:start="4511:36" pos:end="4511:45"><name pos:start="4511:36" pos:end="4511:45">cpu_cc_src</name></expr></argument>, <argument pos:start="4511:48" pos:end="4511:51"><expr pos:start="4511:48" pos:end="4511:51"><name pos:start="4511:48" pos:end="4511:51">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4513:9" pos:end="4513:14">break;</break>

    <case pos:start="4515:5" pos:end="4515:14">case <expr pos:start="4515:10" pos:end="4515:13"><literal type="number" pos:start="4515:10" pos:end="4515:13">0xfc</literal></expr>:</case> <comment type="block" pos:start="4515:16" pos:end="4515:24">/* cld */</comment>

        <expr_stmt pos:start="4517:9" pos:end="4517:42"><expr pos:start="4517:9" pos:end="4517:41"><call pos:start="4517:9" pos:end="4517:41"><name pos:start="4517:9" pos:end="4517:24">tcg_gen_movi_i32</name><argument_list pos:start="4517:25" pos:end="4517:41">(<argument pos:start="4517:26" pos:end="4517:37"><expr pos:start="4517:26" pos:end="4517:37"><name pos:start="4517:26" pos:end="4517:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4517:40" pos:end="4517:40"><expr pos:start="4517:40" pos:end="4517:40"><literal type="number" pos:start="4517:40" pos:end="4517:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4519:9" pos:end="4519:73"><expr pos:start="4519:9" pos:end="4519:72"><call pos:start="4519:9" pos:end="4519:72"><name pos:start="4519:9" pos:end="4519:22">tcg_gen_st_i32</name><argument_list pos:start="4519:23" pos:end="4519:72">(<argument pos:start="4519:24" pos:end="4519:35"><expr pos:start="4519:24" pos:end="4519:35"><name pos:start="4519:24" pos:end="4519:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4519:38" pos:end="4519:44"><expr pos:start="4519:38" pos:end="4519:44"><name pos:start="4519:38" pos:end="4519:44">cpu_env</name></expr></argument>, <argument pos:start="4519:47" pos:end="4519:71"><expr pos:start="4519:47" pos:end="4519:71"><call pos:start="4519:47" pos:end="4519:71"><name pos:start="4519:47" pos:end="4519:54">offsetof</name><argument_list pos:start="4519:55" pos:end="4519:71">(<argument pos:start="4519:56" pos:end="4519:66"><expr pos:start="4519:56" pos:end="4519:66"><name pos:start="4519:56" pos:end="4519:66">CPUX86State</name></expr></argument>, <argument pos:start="4519:69" pos:end="4519:70"><expr pos:start="4519:69" pos:end="4519:70"><name pos:start="4519:69" pos:end="4519:70">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4521:9" pos:end="4521:14">break;</break>

    <case pos:start="4523:5" pos:end="4523:14">case <expr pos:start="4523:10" pos:end="4523:13"><literal type="number" pos:start="4523:10" pos:end="4523:13">0xfd</literal></expr>:</case> <comment type="block" pos:start="4523:16" pos:end="4523:24">/* std */</comment>

        <expr_stmt pos:start="4525:9" pos:end="4525:43"><expr pos:start="4525:9" pos:end="4525:42"><call pos:start="4525:9" pos:end="4525:42"><name pos:start="4525:9" pos:end="4525:24">tcg_gen_movi_i32</name><argument_list pos:start="4525:25" pos:end="4525:42">(<argument pos:start="4525:26" pos:end="4525:37"><expr pos:start="4525:26" pos:end="4525:37"><name pos:start="4525:26" pos:end="4525:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4525:40" pos:end="4525:41"><expr pos:start="4525:40" pos:end="4525:41"><operator pos:start="4525:40" pos:end="4525:40">-</operator><literal type="number" pos:start="4525:41" pos:end="4525:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4527:9" pos:end="4527:73"><expr pos:start="4527:9" pos:end="4527:72"><call pos:start="4527:9" pos:end="4527:72"><name pos:start="4527:9" pos:end="4527:22">tcg_gen_st_i32</name><argument_list pos:start="4527:23" pos:end="4527:72">(<argument pos:start="4527:24" pos:end="4527:35"><expr pos:start="4527:24" pos:end="4527:35"><name pos:start="4527:24" pos:end="4527:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4527:38" pos:end="4527:44"><expr pos:start="4527:38" pos:end="4527:44"><name pos:start="4527:38" pos:end="4527:44">cpu_env</name></expr></argument>, <argument pos:start="4527:47" pos:end="4527:71"><expr pos:start="4527:47" pos:end="4527:71"><call pos:start="4527:47" pos:end="4527:71"><name pos:start="4527:47" pos:end="4527:54">offsetof</name><argument_list pos:start="4527:55" pos:end="4527:71">(<argument pos:start="4527:56" pos:end="4527:66"><expr pos:start="4527:56" pos:end="4527:66"><name pos:start="4527:56" pos:end="4527:66">CPUX86State</name></expr></argument>, <argument pos:start="4527:69" pos:end="4527:70"><expr pos:start="4527:69" pos:end="4527:70"><name pos:start="4527:69" pos:end="4527:70">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4529:9" pos:end="4529:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4533:9" pos:end="4533:34">/************************/</comment>

        <comment type="block" pos:start="4535:9" pos:end="4535:28">/* bit operations */</comment>

    <case pos:start="4537:5" pos:end="4537:15">case <expr pos:start="4537:10" pos:end="4537:14"><literal type="number" pos:start="4537:10" pos:end="4537:14">0x1ba</literal></expr>:</case> <comment type="block" pos:start="4537:17" pos:end="4537:43">/* bt/bts/btr/btc Gv, im */</comment>

        <expr_stmt pos:start="4539:9" pos:end="4539:19"><expr pos:start="4539:9" pos:end="4539:18"><name pos:start="4539:9" pos:end="4539:10">ot</name> <operator pos:start="4539:12" pos:end="4539:12">=</operator> <name pos:start="4539:14" pos:end="4539:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4541:9" pos:end="4541:38"><expr pos:start="4541:9" pos:end="4541:37"><name pos:start="4541:9" pos:end="4541:13">modrm</name> <operator pos:start="4541:15" pos:end="4541:15">=</operator> <call pos:start="4541:17" pos:end="4541:37"><name pos:start="4541:17" pos:end="4541:29">x86_ldub_code</name><argument_list pos:start="4541:30" pos:end="4541:37">(<argument pos:start="4541:31" pos:end="4541:33"><expr pos:start="4541:31" pos:end="4541:33"><name pos:start="4541:31" pos:end="4541:33">env</name></expr></argument>, <argument pos:start="4541:36" pos:end="4541:36"><expr pos:start="4541:36" pos:end="4541:36"><name pos:start="4541:36" pos:end="4541:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4543:9" pos:end="4543:30"><expr pos:start="4543:9" pos:end="4543:29"><name pos:start="4543:9" pos:end="4543:10">op</name> <operator pos:start="4543:12" pos:end="4543:12">=</operator> <operator pos:start="4543:14" pos:end="4543:14">(</operator><name pos:start="4543:15" pos:end="4543:19">modrm</name> <operator pos:start="4543:21" pos:end="4543:22">&gt;&gt;</operator> <literal type="number" pos:start="4543:24" pos:end="4543:24">3</literal><operator pos:start="4543:25" pos:end="4543:25">)</operator> <operator pos:start="4543:27" pos:end="4543:27">&amp;</operator> <literal type="number" pos:start="4543:29" pos:end="4543:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4545:9" pos:end="4545:31"><expr pos:start="4545:9" pos:end="4545:30"><name pos:start="4545:9" pos:end="4545:11">mod</name> <operator pos:start="4545:13" pos:end="4545:13">=</operator> <operator pos:start="4545:15" pos:end="4545:15">(</operator><name pos:start="4545:16" pos:end="4545:20">modrm</name> <operator pos:start="4545:22" pos:end="4545:23">&gt;&gt;</operator> <literal type="number" pos:start="4545:25" pos:end="4545:25">6</literal><operator pos:start="4545:26" pos:end="4545:26">)</operator> <operator pos:start="4545:28" pos:end="4545:28">&amp;</operator> <literal type="number" pos:start="4545:30" pos:end="4545:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4547:9" pos:end="4547:36"><expr pos:start="4547:9" pos:end="4547:35"><name pos:start="4547:9" pos:end="4547:10">rm</name> <operator pos:start="4547:12" pos:end="4547:12">=</operator> <operator pos:start="4547:14" pos:end="4547:14">(</operator><name pos:start="4547:15" pos:end="4547:19">modrm</name> <operator pos:start="4547:21" pos:end="4547:21">&amp;</operator> <literal type="number" pos:start="4547:23" pos:end="4547:23">7</literal><operator pos:start="4547:24" pos:end="4547:24">)</operator> <operator pos:start="4547:26" pos:end="4547:26">|</operator> <call pos:start="4547:28" pos:end="4547:35"><name pos:start="4547:28" pos:end="4547:32">REX_B</name><argument_list pos:start="4547:33" pos:end="4547:35">(<argument pos:start="4547:34" pos:end="4547:34"><expr pos:start="4547:34" pos:end="4547:34"><name pos:start="4547:34" pos:end="4547:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4549:9" pos:end="4565:9"><if pos:start="4549:9" pos:end="4561:9">if <condition pos:start="4549:12" pos:end="4549:21">(<expr pos:start="4549:13" pos:end="4549:20"><name pos:start="4549:13" pos:end="4549:15">mod</name> <operator pos:start="4549:17" pos:end="4549:18">!=</operator> <literal type="number" pos:start="4549:20" pos:end="4549:20">3</literal></expr>)</condition> <block pos:start="4549:23" pos:end="4561:9">{<block_content pos:start="4551:13" pos:end="4559:13">

            <expr_stmt pos:start="4551:13" pos:end="4551:30"><expr pos:start="4551:13" pos:end="4551:29"><name pos:start="4551:13" pos:end="4551:25"><name pos:start="4551:13" pos:end="4551:13">s</name><operator pos:start="4551:14" pos:end="4551:15">-&gt;</operator><name pos:start="4551:16" pos:end="4551:25">rip_offset</name></name> <operator pos:start="4551:27" pos:end="4551:27">=</operator> <literal type="number" pos:start="4551:29" pos:end="4551:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4553:13" pos:end="4553:41"><expr pos:start="4553:13" pos:end="4553:40"><call pos:start="4553:13" pos:end="4553:40"><name pos:start="4553:13" pos:end="4553:25">gen_lea_modrm</name><argument_list pos:start="4553:26" pos:end="4553:40">(<argument pos:start="4553:27" pos:end="4553:29"><expr pos:start="4553:27" pos:end="4553:29"><name pos:start="4553:27" pos:end="4553:29">env</name></expr></argument>, <argument pos:start="4553:32" pos:end="4553:32"><expr pos:start="4553:32" pos:end="4553:32"><name pos:start="4553:32" pos:end="4553:32">s</name></expr></argument>, <argument pos:start="4553:35" pos:end="4553:39"><expr pos:start="4553:35" pos:end="4553:39"><name pos:start="4553:35" pos:end="4553:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4555:13" pos:end="4559:13"><if pos:start="4555:13" pos:end="4559:13">if <condition pos:start="4555:16" pos:end="4555:43">(<expr pos:start="4555:17" pos:end="4555:42"><operator pos:start="4555:17" pos:end="4555:17">!</operator><operator pos:start="4555:18" pos:end="4555:18">(</operator><name pos:start="4555:19" pos:end="4555:27"><name pos:start="4555:19" pos:end="4555:19">s</name><operator pos:start="4555:20" pos:end="4555:21">-&gt;</operator><name pos:start="4555:22" pos:end="4555:27">prefix</name></name> <operator pos:start="4555:29" pos:end="4555:29">&amp;</operator> <name pos:start="4555:31" pos:end="4555:41">PREFIX_LOCK</name><operator pos:start="4555:42" pos:end="4555:42">)</operator></expr>)</condition> <block pos:start="4555:45" pos:end="4559:13">{<block_content pos:start="4557:17" pos:end="4557:51">

                <expr_stmt pos:start="4557:17" pos:end="4557:51"><expr pos:start="4557:17" pos:end="4557:50"><call pos:start="4557:17" pos:end="4557:50"><name pos:start="4557:17" pos:end="4557:27">gen_op_ld_v</name><argument_list pos:start="4557:28" pos:end="4557:50">(<argument pos:start="4557:29" pos:end="4557:29"><expr pos:start="4557:29" pos:end="4557:29"><name pos:start="4557:29" pos:end="4557:29">s</name></expr></argument>, <argument pos:start="4557:32" pos:end="4557:33"><expr pos:start="4557:32" pos:end="4557:33"><name pos:start="4557:32" pos:end="4557:33">ot</name></expr></argument>, <argument pos:start="4557:36" pos:end="4557:41"><expr pos:start="4557:36" pos:end="4557:41"><name pos:start="4557:36" pos:end="4557:41">cpu_T0</name></expr></argument>, <argument pos:start="4557:44" pos:end="4557:49"><expr pos:start="4557:44" pos:end="4557:49"><name pos:start="4557:44" pos:end="4557:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="4561:11" pos:end="4565:9">else <block pos:start="4561:16" pos:end="4565:9">{<block_content pos:start="4563:13" pos:end="4563:45">

            <expr_stmt pos:start="4563:13" pos:end="4563:45"><expr pos:start="4563:13" pos:end="4563:44"><call pos:start="4563:13" pos:end="4563:44"><name pos:start="4563:13" pos:end="4563:28">gen_op_mov_v_reg</name><argument_list pos:start="4563:29" pos:end="4563:44">(<argument pos:start="4563:30" pos:end="4563:31"><expr pos:start="4563:30" pos:end="4563:31"><name pos:start="4563:30" pos:end="4563:31">ot</name></expr></argument>, <argument pos:start="4563:34" pos:end="4563:39"><expr pos:start="4563:34" pos:end="4563:39"><name pos:start="4563:34" pos:end="4563:39">cpu_T0</name></expr></argument>, <argument pos:start="4563:42" pos:end="4563:43"><expr pos:start="4563:42" pos:end="4563:43"><name pos:start="4563:42" pos:end="4563:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="4567:9" pos:end="4567:24">/* load shift */</comment>

        <expr_stmt pos:start="4569:9" pos:end="4569:36"><expr pos:start="4569:9" pos:end="4569:35"><name pos:start="4569:9" pos:end="4569:11">val</name> <operator pos:start="4569:13" pos:end="4569:13">=</operator> <call pos:start="4569:15" pos:end="4569:35"><name pos:start="4569:15" pos:end="4569:27">x86_ldub_code</name><argument_list pos:start="4569:28" pos:end="4569:35">(<argument pos:start="4569:29" pos:end="4569:31"><expr pos:start="4569:29" pos:end="4569:31"><name pos:start="4569:29" pos:end="4569:31">env</name></expr></argument>, <argument pos:start="4569:34" pos:end="4569:34"><expr pos:start="4569:34" pos:end="4569:34"><name pos:start="4569:34" pos:end="4569:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4571:9" pos:end="4571:37"><expr pos:start="4571:9" pos:end="4571:36"><call pos:start="4571:9" pos:end="4571:36"><name pos:start="4571:9" pos:end="4571:23">tcg_gen_movi_tl</name><argument_list pos:start="4571:24" pos:end="4571:36">(<argument pos:start="4571:25" pos:end="4571:30"><expr pos:start="4571:25" pos:end="4571:30"><name pos:start="4571:25" pos:end="4571:30">cpu_T1</name></expr></argument>, <argument pos:start="4571:33" pos:end="4571:35"><expr pos:start="4571:33" pos:end="4571:35"><name pos:start="4571:33" pos:end="4571:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4573:9" pos:end="4575:28"><if pos:start="4573:9" pos:end="4575:28">if <condition pos:start="4573:12" pos:end="4573:19">(<expr pos:start="4573:13" pos:end="4573:18"><name pos:start="4573:13" pos:end="4573:14">op</name> <operator pos:start="4573:16" pos:end="4573:16">&lt;</operator> <literal type="number" pos:start="4573:18" pos:end="4573:18">4</literal></expr>)</condition><block type="pseudo" pos:start="4575:13" pos:end="4575:28"><block_content pos:start="4575:13" pos:end="4575:28">

            <goto pos:start="4575:13" pos:end="4575:28">goto <name pos:start="4575:18" pos:end="4575:27">unknown_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4577:9" pos:end="4577:16"><expr pos:start="4577:9" pos:end="4577:15"><name pos:start="4577:9" pos:end="4577:10">op</name> <operator pos:start="4577:12" pos:end="4577:13">-=</operator> <literal type="number" pos:start="4577:15" pos:end="4577:15">4</literal></expr>;</expr_stmt>

        <goto pos:start="4579:9" pos:end="4579:19">goto <name pos:start="4579:14" pos:end="4579:18">bt_op</name>;</goto>

    <case pos:start="4581:5" pos:end="4581:15">case <expr pos:start="4581:10" pos:end="4581:14"><literal type="number" pos:start="4581:10" pos:end="4581:14">0x1a3</literal></expr>:</case> <comment type="block" pos:start="4581:17" pos:end="4581:31">/* bt Gv, Ev */</comment>

        <expr_stmt pos:start="4583:9" pos:end="4583:15"><expr pos:start="4583:9" pos:end="4583:14"><name pos:start="4583:9" pos:end="4583:10">op</name> <operator pos:start="4583:12" pos:end="4583:12">=</operator> <literal type="number" pos:start="4583:14" pos:end="4583:14">0</literal></expr>;</expr_stmt>

        <goto pos:start="4585:9" pos:end="4585:20">goto <name pos:start="4585:14" pos:end="4585:19">do_btx</name>;</goto>

    <case pos:start="4587:5" pos:end="4587:15">case <expr pos:start="4587:10" pos:end="4587:14"><literal type="number" pos:start="4587:10" pos:end="4587:14">0x1ab</literal></expr>:</case> <comment type="block" pos:start="4587:17" pos:end="4587:25">/* bts */</comment>

        <expr_stmt pos:start="4589:9" pos:end="4589:15"><expr pos:start="4589:9" pos:end="4589:14"><name pos:start="4589:9" pos:end="4589:10">op</name> <operator pos:start="4589:12" pos:end="4589:12">=</operator> <literal type="number" pos:start="4589:14" pos:end="4589:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="4591:9" pos:end="4591:20">goto <name pos:start="4591:14" pos:end="4591:19">do_btx</name>;</goto>

    <case pos:start="4593:5" pos:end="4593:15">case <expr pos:start="4593:10" pos:end="4593:14"><literal type="number" pos:start="4593:10" pos:end="4593:14">0x1b3</literal></expr>:</case> <comment type="block" pos:start="4593:17" pos:end="4593:25">/* btr */</comment>

        <expr_stmt pos:start="4595:9" pos:end="4595:15"><expr pos:start="4595:9" pos:end="4595:14"><name pos:start="4595:9" pos:end="4595:10">op</name> <operator pos:start="4595:12" pos:end="4595:12">=</operator> <literal type="number" pos:start="4595:14" pos:end="4595:14">2</literal></expr>;</expr_stmt>

        <goto pos:start="4597:9" pos:end="4597:20">goto <name pos:start="4597:14" pos:end="4597:19">do_btx</name>;</goto>

    <case pos:start="4599:5" pos:end="4599:15">case <expr pos:start="4599:10" pos:end="4599:14"><literal type="number" pos:start="4599:10" pos:end="4599:14">0x1bb</literal></expr>:</case> <comment type="block" pos:start="4599:17" pos:end="4599:25">/* btc */</comment>

        <expr_stmt pos:start="4601:9" pos:end="4601:15"><expr pos:start="4601:9" pos:end="4601:14"><name pos:start="4601:9" pos:end="4601:10">op</name> <operator pos:start="4601:12" pos:end="4601:12">=</operator> <literal type="number" pos:start="4601:14" pos:end="4601:14">3</literal></expr>;</expr_stmt>

    <label pos:start="4603:5" pos:end="4603:11"><name pos:start="4603:5" pos:end="4603:10">do_btx</name>:</label>

        <expr_stmt pos:start="4605:9" pos:end="4605:19"><expr pos:start="4605:9" pos:end="4605:18"><name pos:start="4605:9" pos:end="4605:10">ot</name> <operator pos:start="4605:12" pos:end="4605:12">=</operator> <name pos:start="4605:14" pos:end="4605:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4607:9" pos:end="4607:38"><expr pos:start="4607:9" pos:end="4607:37"><name pos:start="4607:9" pos:end="4607:13">modrm</name> <operator pos:start="4607:15" pos:end="4607:15">=</operator> <call pos:start="4607:17" pos:end="4607:37"><name pos:start="4607:17" pos:end="4607:29">x86_ldub_code</name><argument_list pos:start="4607:30" pos:end="4607:37">(<argument pos:start="4607:31" pos:end="4607:33"><expr pos:start="4607:31" pos:end="4607:33"><name pos:start="4607:31" pos:end="4607:33">env</name></expr></argument>, <argument pos:start="4607:36" pos:end="4607:36"><expr pos:start="4607:36" pos:end="4607:36"><name pos:start="4607:36" pos:end="4607:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4609:9" pos:end="4609:41"><expr pos:start="4609:9" pos:end="4609:40"><name pos:start="4609:9" pos:end="4609:11">reg</name> <operator pos:start="4609:13" pos:end="4609:13">=</operator> <operator pos:start="4609:15" pos:end="4609:15">(</operator><operator pos:start="4609:16" pos:end="4609:16">(</operator><name pos:start="4609:17" pos:end="4609:21">modrm</name> <operator pos:start="4609:23" pos:end="4609:24">&gt;&gt;</operator> <literal type="number" pos:start="4609:26" pos:end="4609:26">3</literal><operator pos:start="4609:27" pos:end="4609:27">)</operator> <operator pos:start="4609:29" pos:end="4609:29">&amp;</operator> <literal type="number" pos:start="4609:31" pos:end="4609:31">7</literal><operator pos:start="4609:32" pos:end="4609:32">)</operator> <operator pos:start="4609:34" pos:end="4609:34">|</operator> <name pos:start="4609:36" pos:end="4609:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4611:9" pos:end="4611:31"><expr pos:start="4611:9" pos:end="4611:30"><name pos:start="4611:9" pos:end="4611:11">mod</name> <operator pos:start="4611:13" pos:end="4611:13">=</operator> <operator pos:start="4611:15" pos:end="4611:15">(</operator><name pos:start="4611:16" pos:end="4611:20">modrm</name> <operator pos:start="4611:22" pos:end="4611:23">&gt;&gt;</operator> <literal type="number" pos:start="4611:25" pos:end="4611:25">6</literal><operator pos:start="4611:26" pos:end="4611:26">)</operator> <operator pos:start="4611:28" pos:end="4611:28">&amp;</operator> <literal type="number" pos:start="4611:30" pos:end="4611:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4613:9" pos:end="4613:36"><expr pos:start="4613:9" pos:end="4613:35"><name pos:start="4613:9" pos:end="4613:10">rm</name> <operator pos:start="4613:12" pos:end="4613:12">=</operator> <operator pos:start="4613:14" pos:end="4613:14">(</operator><name pos:start="4613:15" pos:end="4613:19">modrm</name> <operator pos:start="4613:21" pos:end="4613:21">&amp;</operator> <literal type="number" pos:start="4613:23" pos:end="4613:23">7</literal><operator pos:start="4613:24" pos:end="4613:24">)</operator> <operator pos:start="4613:26" pos:end="4613:26">|</operator> <call pos:start="4613:28" pos:end="4613:35"><name pos:start="4613:28" pos:end="4613:32">REX_B</name><argument_list pos:start="4613:33" pos:end="4613:35">(<argument pos:start="4613:34" pos:end="4613:34"><expr pos:start="4613:34" pos:end="4613:34"><name pos:start="4613:34" pos:end="4613:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4615:9" pos:end="4615:45"><expr pos:start="4615:9" pos:end="4615:44"><call pos:start="4615:9" pos:end="4615:44"><name pos:start="4615:9" pos:end="4615:24">gen_op_mov_v_reg</name><argument_list pos:start="4615:25" pos:end="4615:44">(<argument pos:start="4615:26" pos:end="4615:30"><expr pos:start="4615:26" pos:end="4615:30"><name pos:start="4615:26" pos:end="4615:30">MO_32</name></expr></argument>, <argument pos:start="4615:33" pos:end="4615:38"><expr pos:start="4615:33" pos:end="4615:38"><name pos:start="4615:33" pos:end="4615:38">cpu_T1</name></expr></argument>, <argument pos:start="4615:41" pos:end="4615:43"><expr pos:start="4615:41" pos:end="4615:43"><name pos:start="4615:41" pos:end="4615:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4617:9" pos:end="4643:9"><if pos:start="4617:9" pos:end="4639:9">if <condition pos:start="4617:12" pos:end="4617:21">(<expr pos:start="4617:13" pos:end="4617:20"><name pos:start="4617:13" pos:end="4617:15">mod</name> <operator pos:start="4617:17" pos:end="4617:18">!=</operator> <literal type="number" pos:start="4617:20" pos:end="4617:20">3</literal></expr>)</condition> <block pos:start="4617:23" pos:end="4639:9">{<block_content pos:start="4619:13" pos:end="4637:13">

            <decl_stmt pos:start="4619:13" pos:end="4619:60"><decl pos:start="4619:13" pos:end="4619:59"><type pos:start="4619:13" pos:end="4619:24"><name pos:start="4619:13" pos:end="4619:24">AddressParts</name></type> <name pos:start="4619:26" pos:end="4619:26">a</name> <init pos:start="4619:28" pos:end="4619:59">= <expr pos:start="4619:30" pos:end="4619:59"><call pos:start="4619:30" pos:end="4619:59"><name pos:start="4619:30" pos:end="4619:44">gen_lea_modrm_0</name><argument_list pos:start="4619:45" pos:end="4619:59">(<argument pos:start="4619:46" pos:end="4619:48"><expr pos:start="4619:46" pos:end="4619:48"><name pos:start="4619:46" pos:end="4619:48">env</name></expr></argument>, <argument pos:start="4619:51" pos:end="4619:51"><expr pos:start="4619:51" pos:end="4619:51"><name pos:start="4619:51" pos:end="4619:51">s</name></expr></argument>, <argument pos:start="4619:54" pos:end="4619:58"><expr pos:start="4619:54" pos:end="4619:58"><name pos:start="4619:54" pos:end="4619:58">modrm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="4621:13" pos:end="4621:62">/* specific case: we need to add a displacement */</comment>

            <expr_stmt pos:start="4623:13" pos:end="4623:33"><expr pos:start="4623:13" pos:end="4623:32"><call pos:start="4623:13" pos:end="4623:32"><name pos:start="4623:13" pos:end="4623:20">gen_exts</name><argument_list pos:start="4623:21" pos:end="4623:32">(<argument pos:start="4623:22" pos:end="4623:23"><expr pos:start="4623:22" pos:end="4623:23"><name pos:start="4623:22" pos:end="4623:23">ot</name></expr></argument>, <argument pos:start="4623:26" pos:end="4623:31"><expr pos:start="4623:26" pos:end="4623:31"><name pos:start="4623:26" pos:end="4623:31">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4625:13" pos:end="4625:54"><expr pos:start="4625:13" pos:end="4625:53"><call pos:start="4625:13" pos:end="4625:53"><name pos:start="4625:13" pos:end="4625:27">tcg_gen_sari_tl</name><argument_list pos:start="4625:28" pos:end="4625:53">(<argument pos:start="4625:29" pos:end="4625:36"><expr pos:start="4625:29" pos:end="4625:36"><name pos:start="4625:29" pos:end="4625:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4625:39" pos:end="4625:44"><expr pos:start="4625:39" pos:end="4625:44"><name pos:start="4625:39" pos:end="4625:44">cpu_T1</name></expr></argument>, <argument pos:start="4625:47" pos:end="4625:52"><expr pos:start="4625:47" pos:end="4625:52"><literal type="number" pos:start="4625:47" pos:end="4625:49">3</literal> <operator pos:start="4625:49" pos:end="4625:49">+</operator> <name pos:start="4625:51" pos:end="4625:52">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4627:13" pos:end="4627:52"><expr pos:start="4627:13" pos:end="4627:51"><call pos:start="4627:13" pos:end="4627:51"><name pos:start="4627:13" pos:end="4627:27">tcg_gen_shli_tl</name><argument_list pos:start="4627:28" pos:end="4627:51">(<argument pos:start="4627:29" pos:end="4627:36"><expr pos:start="4627:29" pos:end="4627:36"><name pos:start="4627:29" pos:end="4627:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4627:39" pos:end="4627:46"><expr pos:start="4627:39" pos:end="4627:46"><name pos:start="4627:39" pos:end="4627:46">cpu_tmp0</name></expr></argument>, <argument pos:start="4627:49" pos:end="4627:50"><expr pos:start="4627:49" pos:end="4627:50"><name pos:start="4627:49" pos:end="4627:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4629:13" pos:end="4629:65"><expr pos:start="4629:13" pos:end="4629:64"><call pos:start="4629:13" pos:end="4629:64"><name pos:start="4629:13" pos:end="4629:26">tcg_gen_add_tl</name><argument_list pos:start="4629:27" pos:end="4629:64">(<argument pos:start="4629:28" pos:end="4629:33"><expr pos:start="4629:28" pos:end="4629:33"><name pos:start="4629:28" pos:end="4629:33">cpu_A0</name></expr></argument>, <argument pos:start="4629:36" pos:end="4629:53"><expr pos:start="4629:36" pos:end="4629:53"><call pos:start="4629:36" pos:end="4629:53"><name pos:start="4629:36" pos:end="4629:50">gen_lea_modrm_1</name><argument_list pos:start="4629:51" pos:end="4629:53">(<argument pos:start="4629:52" pos:end="4629:52"><expr pos:start="4629:52" pos:end="4629:52"><name pos:start="4629:52" pos:end="4629:52">a</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4629:56" pos:end="4629:63"><expr pos:start="4629:56" pos:end="4629:63"><name pos:start="4629:56" pos:end="4629:63">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4631:13" pos:end="4631:71"><expr pos:start="4631:13" pos:end="4631:70"><call pos:start="4631:13" pos:end="4631:70"><name pos:start="4631:13" pos:end="4631:25">gen_lea_v_seg</name><argument_list pos:start="4631:26" pos:end="4631:70">(<argument pos:start="4631:27" pos:end="4631:27"><expr pos:start="4631:27" pos:end="4631:27"><name pos:start="4631:27" pos:end="4631:27">s</name></expr></argument>, <argument pos:start="4631:30" pos:end="4631:37"><expr pos:start="4631:30" pos:end="4631:37"><name pos:start="4631:30" pos:end="4631:37"><name pos:start="4631:30" pos:end="4631:30">s</name><operator pos:start="4631:31" pos:end="4631:32">-&gt;</operator><name pos:start="4631:33" pos:end="4631:37">aflag</name></name></expr></argument>, <argument pos:start="4631:40" pos:end="4631:45"><expr pos:start="4631:40" pos:end="4631:45"><name pos:start="4631:40" pos:end="4631:45">cpu_A0</name></expr></argument>, <argument pos:start="4631:48" pos:end="4631:56"><expr pos:start="4631:48" pos:end="4631:56"><name pos:start="4631:48" pos:end="4631:56"><name pos:start="4631:48" pos:end="4631:48">a</name><operator pos:start="4631:49" pos:end="4631:49">.</operator><name pos:start="4631:50" pos:end="4631:56">def_seg</name></name></expr></argument>, <argument pos:start="4631:59" pos:end="4631:69"><expr pos:start="4631:59" pos:end="4631:69"><name pos:start="4631:59" pos:end="4631:69"><name pos:start="4631:59" pos:end="4631:59">s</name><operator pos:start="4631:60" pos:end="4631:61">-&gt;</operator><name pos:start="4631:62" pos:end="4631:69">override</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4633:13" pos:end="4637:13"><if pos:start="4633:13" pos:end="4637:13">if <condition pos:start="4633:16" pos:end="4633:43">(<expr pos:start="4633:17" pos:end="4633:42"><operator pos:start="4633:17" pos:end="4633:17">!</operator><operator pos:start="4633:18" pos:end="4633:18">(</operator><name pos:start="4633:19" pos:end="4633:27"><name pos:start="4633:19" pos:end="4633:19">s</name><operator pos:start="4633:20" pos:end="4633:21">-&gt;</operator><name pos:start="4633:22" pos:end="4633:27">prefix</name></name> <operator pos:start="4633:29" pos:end="4633:29">&amp;</operator> <name pos:start="4633:31" pos:end="4633:41">PREFIX_LOCK</name><operator pos:start="4633:42" pos:end="4633:42">)</operator></expr>)</condition> <block pos:start="4633:45" pos:end="4637:13">{<block_content pos:start="4635:17" pos:end="4635:51">

                <expr_stmt pos:start="4635:17" pos:end="4635:51"><expr pos:start="4635:17" pos:end="4635:50"><call pos:start="4635:17" pos:end="4635:50"><name pos:start="4635:17" pos:end="4635:27">gen_op_ld_v</name><argument_list pos:start="4635:28" pos:end="4635:50">(<argument pos:start="4635:29" pos:end="4635:29"><expr pos:start="4635:29" pos:end="4635:29"><name pos:start="4635:29" pos:end="4635:29">s</name></expr></argument>, <argument pos:start="4635:32" pos:end="4635:33"><expr pos:start="4635:32" pos:end="4635:33"><name pos:start="4635:32" pos:end="4635:33">ot</name></expr></argument>, <argument pos:start="4635:36" pos:end="4635:41"><expr pos:start="4635:36" pos:end="4635:41"><name pos:start="4635:36" pos:end="4635:41">cpu_T0</name></expr></argument>, <argument pos:start="4635:44" pos:end="4635:49"><expr pos:start="4635:44" pos:end="4635:49"><name pos:start="4635:44" pos:end="4635:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="4639:11" pos:end="4643:9">else <block pos:start="4639:16" pos:end="4643:9">{<block_content pos:start="4641:13" pos:end="4641:45">

            <expr_stmt pos:start="4641:13" pos:end="4641:45"><expr pos:start="4641:13" pos:end="4641:44"><call pos:start="4641:13" pos:end="4641:44"><name pos:start="4641:13" pos:end="4641:28">gen_op_mov_v_reg</name><argument_list pos:start="4641:29" pos:end="4641:44">(<argument pos:start="4641:30" pos:end="4641:31"><expr pos:start="4641:30" pos:end="4641:31"><name pos:start="4641:30" pos:end="4641:31">ot</name></expr></argument>, <argument pos:start="4641:34" pos:end="4641:39"><expr pos:start="4641:34" pos:end="4641:39"><name pos:start="4641:34" pos:end="4641:39">cpu_T0</name></expr></argument>, <argument pos:start="4641:42" pos:end="4641:43"><expr pos:start="4641:42" pos:end="4641:43"><name pos:start="4641:42" pos:end="4641:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="4645:5" pos:end="4645:10"><name pos:start="4645:5" pos:end="4645:9">bt_op</name>:</label>

        <expr_stmt pos:start="4647:9" pos:end="4647:61"><expr pos:start="4647:9" pos:end="4647:60"><call pos:start="4647:9" pos:end="4647:60"><name pos:start="4647:9" pos:end="4647:23">tcg_gen_andi_tl</name><argument_list pos:start="4647:24" pos:end="4647:60">(<argument pos:start="4647:25" pos:end="4647:30"><expr pos:start="4647:25" pos:end="4647:30"><name pos:start="4647:25" pos:end="4647:30">cpu_T1</name></expr></argument>, <argument pos:start="4647:33" pos:end="4647:38"><expr pos:start="4647:33" pos:end="4647:38"><name pos:start="4647:33" pos:end="4647:38">cpu_T1</name></expr></argument>, <argument pos:start="4647:41" pos:end="4647:59"><expr pos:start="4647:41" pos:end="4647:59"><operator pos:start="4647:41" pos:end="4647:41">(</operator><literal type="number" pos:start="4647:42" pos:end="4647:42">1</literal> <operator pos:start="4647:44" pos:end="4647:45">&lt;&lt;</operator> <operator pos:start="4647:47" pos:end="4647:47">(</operator><literal type="number" pos:start="4647:48" pos:end="4647:50">3</literal> <operator pos:start="4647:50" pos:end="4647:50">+</operator> <name pos:start="4647:52" pos:end="4647:53">ot</name><operator pos:start="4647:54" pos:end="4647:54">)</operator><operator pos:start="4647:55" pos:end="4647:55">)</operator> <operator pos:start="4647:57" pos:end="4647:57">-</operator> <literal type="number" pos:start="4647:59" pos:end="4647:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4649:9" pos:end="4649:37"><expr pos:start="4649:9" pos:end="4649:36"><call pos:start="4649:9" pos:end="4649:36"><name pos:start="4649:9" pos:end="4649:23">tcg_gen_movi_tl</name><argument_list pos:start="4649:24" pos:end="4649:36">(<argument pos:start="4649:25" pos:end="4649:32"><expr pos:start="4649:25" pos:end="4649:32"><name pos:start="4649:25" pos:end="4649:32">cpu_tmp0</name></expr></argument>, <argument pos:start="4649:35" pos:end="4649:35"><expr pos:start="4649:35" pos:end="4649:35"><literal type="number" pos:start="4649:35" pos:end="4649:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4651:9" pos:end="4651:51"><expr pos:start="4651:9" pos:end="4651:50"><call pos:start="4651:9" pos:end="4651:50"><name pos:start="4651:9" pos:end="4651:22">tcg_gen_shl_tl</name><argument_list pos:start="4651:23" pos:end="4651:50">(<argument pos:start="4651:24" pos:end="4651:31"><expr pos:start="4651:24" pos:end="4651:31"><name pos:start="4651:24" pos:end="4651:31">cpu_tmp0</name></expr></argument>, <argument pos:start="4651:34" pos:end="4651:41"><expr pos:start="4651:34" pos:end="4651:41"><name pos:start="4651:34" pos:end="4651:41">cpu_tmp0</name></expr></argument>, <argument pos:start="4651:44" pos:end="4651:49"><expr pos:start="4651:44" pos:end="4651:49"><name pos:start="4651:44" pos:end="4651:49">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4653:9" pos:end="4747:9"><if pos:start="4653:9" pos:end="4699:9">if <condition pos:start="4653:12" pos:end="4653:36">(<expr pos:start="4653:13" pos:end="4653:35"><name pos:start="4653:13" pos:end="4653:21"><name pos:start="4653:13" pos:end="4653:13">s</name><operator pos:start="4653:14" pos:end="4653:15">-&gt;</operator><name pos:start="4653:16" pos:end="4653:21">prefix</name></name> <operator pos:start="4653:23" pos:end="4653:23">&amp;</operator> <name pos:start="4653:25" pos:end="4653:35">PREFIX_LOCK</name></expr>)</condition> <block pos:start="4653:38" pos:end="4699:9">{<block_content pos:start="4655:13" pos:end="4697:53">

            <switch pos:start="4655:13" pos:end="4695:13">switch <condition pos:start="4655:20" pos:end="4655:23">(<expr pos:start="4655:21" pos:end="4655:22"><name pos:start="4655:21" pos:end="4655:22">op</name></expr>)</condition> <block pos:start="4655:25" pos:end="4695:13">{<block_content pos:start="4657:13" pos:end="4693:22">

            <case pos:start="4657:13" pos:end="4657:19">case <expr pos:start="4657:18" pos:end="4657:18"><literal type="number" pos:start="4657:18" pos:end="4657:18">0</literal></expr>:</case> <comment type="block" pos:start="4657:21" pos:end="4657:28">/* bt */</comment>

                <comment type="block" pos:start="4659:17" pos:end="4661:63">/* Needs no atomic ops; we surpressed the normal

                   memory load for LOCK above so do it now.  */</comment>

                <expr_stmt pos:start="4663:17" pos:end="4663:51"><expr pos:start="4663:17" pos:end="4663:50"><call pos:start="4663:17" pos:end="4663:50"><name pos:start="4663:17" pos:end="4663:27">gen_op_ld_v</name><argument_list pos:start="4663:28" pos:end="4663:50">(<argument pos:start="4663:29" pos:end="4663:29"><expr pos:start="4663:29" pos:end="4663:29"><name pos:start="4663:29" pos:end="4663:29">s</name></expr></argument>, <argument pos:start="4663:32" pos:end="4663:33"><expr pos:start="4663:32" pos:end="4663:33"><name pos:start="4663:32" pos:end="4663:33">ot</name></expr></argument>, <argument pos:start="4663:36" pos:end="4663:41"><expr pos:start="4663:36" pos:end="4663:41"><name pos:start="4663:36" pos:end="4663:41">cpu_T0</name></expr></argument>, <argument pos:start="4663:44" pos:end="4663:49"><expr pos:start="4663:44" pos:end="4663:49"><name pos:start="4663:44" pos:end="4663:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="4665:17" pos:end="4665:22">break;</break>

            <case pos:start="4667:13" pos:end="4667:19">case <expr pos:start="4667:18" pos:end="4667:18"><literal type="number" pos:start="4667:18" pos:end="4667:18">1</literal></expr>:</case> <comment type="block" pos:start="4667:21" pos:end="4667:29">/* bts */</comment>

                <expr_stmt pos:start="4669:17" pos:end="4671:69"><expr pos:start="4669:17" pos:end="4671:68"><call pos:start="4669:17" pos:end="4671:68"><name pos:start="4669:17" pos:end="4669:42">tcg_gen_atomic_fetch_or_tl</name><argument_list pos:start="4669:43" pos:end="4671:68">(<argument pos:start="4669:44" pos:end="4669:49"><expr pos:start="4669:44" pos:end="4669:49"><name pos:start="4669:44" pos:end="4669:49">cpu_T0</name></expr></argument>, <argument pos:start="4669:52" pos:end="4669:57"><expr pos:start="4669:52" pos:end="4669:57"><name pos:start="4669:52" pos:end="4669:57">cpu_A0</name></expr></argument>, <argument pos:start="4669:60" pos:end="4669:67"><expr pos:start="4669:60" pos:end="4669:67"><name pos:start="4669:60" pos:end="4669:67">cpu_tmp0</name></expr></argument>,

                                           <argument pos:start="4671:44" pos:end="4671:55"><expr pos:start="4671:44" pos:end="4671:55"><name pos:start="4671:44" pos:end="4671:55"><name pos:start="4671:44" pos:end="4671:44">s</name><operator pos:start="4671:45" pos:end="4671:46">-&gt;</operator><name pos:start="4671:47" pos:end="4671:55">mem_index</name></name></expr></argument>, <argument pos:start="4671:58" pos:end="4671:67"><expr pos:start="4671:58" pos:end="4671:67"><name pos:start="4671:58" pos:end="4671:59">ot</name> <operator pos:start="4671:61" pos:end="4671:61">|</operator> <name pos:start="4671:63" pos:end="4671:67">MO_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="4673:17" pos:end="4673:22">break;</break>

            <case pos:start="4675:13" pos:end="4675:19">case <expr pos:start="4675:18" pos:end="4675:18"><literal type="number" pos:start="4675:18" pos:end="4675:18">2</literal></expr>:</case> <comment type="block" pos:start="4675:21" pos:end="4675:29">/* btr */</comment>

                <expr_stmt pos:start="4677:17" pos:end="4677:51"><expr pos:start="4677:17" pos:end="4677:50"><call pos:start="4677:17" pos:end="4677:50"><name pos:start="4677:17" pos:end="4677:30">tcg_gen_not_tl</name><argument_list pos:start="4677:31" pos:end="4677:50">(<argument pos:start="4677:32" pos:end="4677:39"><expr pos:start="4677:32" pos:end="4677:39"><name pos:start="4677:32" pos:end="4677:39">cpu_tmp0</name></expr></argument>, <argument pos:start="4677:42" pos:end="4677:49"><expr pos:start="4677:42" pos:end="4677:49"><name pos:start="4677:42" pos:end="4677:49">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4679:17" pos:end="4681:70"><expr pos:start="4679:17" pos:end="4681:69"><call pos:start="4679:17" pos:end="4681:69"><name pos:start="4679:17" pos:end="4679:43">tcg_gen_atomic_fetch_and_tl</name><argument_list pos:start="4679:44" pos:end="4681:69">(<argument pos:start="4679:45" pos:end="4679:50"><expr pos:start="4679:45" pos:end="4679:50"><name pos:start="4679:45" pos:end="4679:50">cpu_T0</name></expr></argument>, <argument pos:start="4679:53" pos:end="4679:58"><expr pos:start="4679:53" pos:end="4679:58"><name pos:start="4679:53" pos:end="4679:58">cpu_A0</name></expr></argument>, <argument pos:start="4679:61" pos:end="4679:68"><expr pos:start="4679:61" pos:end="4679:68"><name pos:start="4679:61" pos:end="4679:68">cpu_tmp0</name></expr></argument>,

                                            <argument pos:start="4681:45" pos:end="4681:56"><expr pos:start="4681:45" pos:end="4681:56"><name pos:start="4681:45" pos:end="4681:56"><name pos:start="4681:45" pos:end="4681:45">s</name><operator pos:start="4681:46" pos:end="4681:47">-&gt;</operator><name pos:start="4681:48" pos:end="4681:56">mem_index</name></name></expr></argument>, <argument pos:start="4681:59" pos:end="4681:68"><expr pos:start="4681:59" pos:end="4681:68"><name pos:start="4681:59" pos:end="4681:60">ot</name> <operator pos:start="4681:62" pos:end="4681:62">|</operator> <name pos:start="4681:64" pos:end="4681:68">MO_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="4683:17" pos:end="4683:22">break;</break>

            <default pos:start="4685:13" pos:end="4685:20">default:</default>

            <case pos:start="4687:13" pos:end="4687:19">case <expr pos:start="4687:18" pos:end="4687:18"><literal type="number" pos:start="4687:18" pos:end="4687:18">3</literal></expr>:</case> <comment type="block" pos:start="4687:21" pos:end="4687:29">/* btc */</comment>

                <expr_stmt pos:start="4689:17" pos:end="4691:70"><expr pos:start="4689:17" pos:end="4691:69"><call pos:start="4689:17" pos:end="4691:69"><name pos:start="4689:17" pos:end="4689:43">tcg_gen_atomic_fetch_xor_tl</name><argument_list pos:start="4689:44" pos:end="4691:69">(<argument pos:start="4689:45" pos:end="4689:50"><expr pos:start="4689:45" pos:end="4689:50"><name pos:start="4689:45" pos:end="4689:50">cpu_T0</name></expr></argument>, <argument pos:start="4689:53" pos:end="4689:58"><expr pos:start="4689:53" pos:end="4689:58"><name pos:start="4689:53" pos:end="4689:58">cpu_A0</name></expr></argument>, <argument pos:start="4689:61" pos:end="4689:68"><expr pos:start="4689:61" pos:end="4689:68"><name pos:start="4689:61" pos:end="4689:68">cpu_tmp0</name></expr></argument>,

                                            <argument pos:start="4691:45" pos:end="4691:56"><expr pos:start="4691:45" pos:end="4691:56"><name pos:start="4691:45" pos:end="4691:56"><name pos:start="4691:45" pos:end="4691:45">s</name><operator pos:start="4691:46" pos:end="4691:47">-&gt;</operator><name pos:start="4691:48" pos:end="4691:56">mem_index</name></name></expr></argument>, <argument pos:start="4691:59" pos:end="4691:68"><expr pos:start="4691:59" pos:end="4691:68"><name pos:start="4691:59" pos:end="4691:60">ot</name> <operator pos:start="4691:62" pos:end="4691:62">|</operator> <name pos:start="4691:64" pos:end="4691:68">MO_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="4693:17" pos:end="4693:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="4697:13" pos:end="4697:53"><expr pos:start="4697:13" pos:end="4697:52"><call pos:start="4697:13" pos:end="4697:52"><name pos:start="4697:13" pos:end="4697:26">tcg_gen_shr_tl</name><argument_list pos:start="4697:27" pos:end="4697:52">(<argument pos:start="4697:28" pos:end="4697:35"><expr pos:start="4697:28" pos:end="4697:35"><name pos:start="4697:28" pos:end="4697:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4697:38" pos:end="4697:43"><expr pos:start="4697:38" pos:end="4697:43"><name pos:start="4697:38" pos:end="4697:43">cpu_T0</name></expr></argument>, <argument pos:start="4697:46" pos:end="4697:51"><expr pos:start="4697:46" pos:end="4697:51"><name pos:start="4697:46" pos:end="4697:51">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4699:11" pos:end="4747:9">else <block pos:start="4699:16" pos:end="4747:9">{<block_content pos:start="4701:13" pos:end="4745:13">

            <expr_stmt pos:start="4701:13" pos:end="4701:53"><expr pos:start="4701:13" pos:end="4701:52"><call pos:start="4701:13" pos:end="4701:52"><name pos:start="4701:13" pos:end="4701:26">tcg_gen_shr_tl</name><argument_list pos:start="4701:27" pos:end="4701:52">(<argument pos:start="4701:28" pos:end="4701:35"><expr pos:start="4701:28" pos:end="4701:35"><name pos:start="4701:28" pos:end="4701:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4701:38" pos:end="4701:43"><expr pos:start="4701:38" pos:end="4701:43"><name pos:start="4701:38" pos:end="4701:43">cpu_T0</name></expr></argument>, <argument pos:start="4701:46" pos:end="4701:51"><expr pos:start="4701:46" pos:end="4701:51"><name pos:start="4701:46" pos:end="4701:51">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="4703:13" pos:end="4731:13">switch <condition pos:start="4703:20" pos:end="4703:23">(<expr pos:start="4703:21" pos:end="4703:22"><name pos:start="4703:21" pos:end="4703:22">op</name></expr>)</condition> <block pos:start="4703:25" pos:end="4731:13">{<block_content pos:start="4705:13" pos:end="4729:22">

            <case pos:start="4705:13" pos:end="4705:19">case <expr pos:start="4705:18" pos:end="4705:18"><literal type="number" pos:start="4705:18" pos:end="4705:18">0</literal></expr>:</case> <comment type="block" pos:start="4705:21" pos:end="4705:28">/* bt */</comment>

                <comment type="block" pos:start="4707:17" pos:end="4707:58">/* Data already loaded; nothing to do.  */</comment>

                <break pos:start="4709:17" pos:end="4709:22">break;</break>

            <case pos:start="4711:13" pos:end="4711:19">case <expr pos:start="4711:18" pos:end="4711:18"><literal type="number" pos:start="4711:18" pos:end="4711:18">1</literal></expr>:</case> <comment type="block" pos:start="4711:21" pos:end="4711:29">/* bts */</comment>

                <expr_stmt pos:start="4713:17" pos:end="4713:56"><expr pos:start="4713:17" pos:end="4713:55"><call pos:start="4713:17" pos:end="4713:55"><name pos:start="4713:17" pos:end="4713:29">tcg_gen_or_tl</name><argument_list pos:start="4713:30" pos:end="4713:55">(<argument pos:start="4713:31" pos:end="4713:36"><expr pos:start="4713:31" pos:end="4713:36"><name pos:start="4713:31" pos:end="4713:36">cpu_T0</name></expr></argument>, <argument pos:start="4713:39" pos:end="4713:44"><expr pos:start="4713:39" pos:end="4713:44"><name pos:start="4713:39" pos:end="4713:44">cpu_T0</name></expr></argument>, <argument pos:start="4713:47" pos:end="4713:54"><expr pos:start="4713:47" pos:end="4713:54"><name pos:start="4713:47" pos:end="4713:54">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="4715:17" pos:end="4715:22">break;</break>

            <case pos:start="4717:13" pos:end="4717:19">case <expr pos:start="4717:18" pos:end="4717:18"><literal type="number" pos:start="4717:18" pos:end="4717:18">2</literal></expr>:</case> <comment type="block" pos:start="4717:21" pos:end="4717:29">/* btr */</comment>

                <expr_stmt pos:start="4719:17" pos:end="4719:58"><expr pos:start="4719:17" pos:end="4719:57"><call pos:start="4719:17" pos:end="4719:57"><name pos:start="4719:17" pos:end="4719:31">tcg_gen_andc_tl</name><argument_list pos:start="4719:32" pos:end="4719:57">(<argument pos:start="4719:33" pos:end="4719:38"><expr pos:start="4719:33" pos:end="4719:38"><name pos:start="4719:33" pos:end="4719:38">cpu_T0</name></expr></argument>, <argument pos:start="4719:41" pos:end="4719:46"><expr pos:start="4719:41" pos:end="4719:46"><name pos:start="4719:41" pos:end="4719:46">cpu_T0</name></expr></argument>, <argument pos:start="4719:49" pos:end="4719:56"><expr pos:start="4719:49" pos:end="4719:56"><name pos:start="4719:49" pos:end="4719:56">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="4721:17" pos:end="4721:22">break;</break>

            <default pos:start="4723:13" pos:end="4723:20">default:</default>

            <case pos:start="4725:13" pos:end="4725:19">case <expr pos:start="4725:18" pos:end="4725:18"><literal type="number" pos:start="4725:18" pos:end="4725:18">3</literal></expr>:</case> <comment type="block" pos:start="4725:21" pos:end="4725:29">/* btc */</comment>

                <expr_stmt pos:start="4727:17" pos:end="4727:57"><expr pos:start="4727:17" pos:end="4727:56"><call pos:start="4727:17" pos:end="4727:56"><name pos:start="4727:17" pos:end="4727:30">tcg_gen_xor_tl</name><argument_list pos:start="4727:31" pos:end="4727:56">(<argument pos:start="4727:32" pos:end="4727:37"><expr pos:start="4727:32" pos:end="4727:37"><name pos:start="4727:32" pos:end="4727:37">cpu_T0</name></expr></argument>, <argument pos:start="4727:40" pos:end="4727:45"><expr pos:start="4727:40" pos:end="4727:45"><name pos:start="4727:40" pos:end="4727:45">cpu_T0</name></expr></argument>, <argument pos:start="4727:48" pos:end="4727:55"><expr pos:start="4727:48" pos:end="4727:55"><name pos:start="4727:48" pos:end="4727:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="4729:17" pos:end="4729:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="4733:13" pos:end="4745:13"><if pos:start="4733:13" pos:end="4745:13">if <condition pos:start="4733:16" pos:end="4733:24">(<expr pos:start="4733:17" pos:end="4733:23"><name pos:start="4733:17" pos:end="4733:18">op</name> <operator pos:start="4733:20" pos:end="4733:21">!=</operator> <literal type="number" pos:start="4733:23" pos:end="4733:23">0</literal></expr>)</condition> <block pos:start="4733:26" pos:end="4745:13">{<block_content pos:start="4735:17" pos:end="4743:17">

                <if_stmt pos:start="4735:17" pos:end="4743:17"><if pos:start="4735:17" pos:end="4739:17">if <condition pos:start="4735:20" pos:end="4735:29">(<expr pos:start="4735:21" pos:end="4735:28"><name pos:start="4735:21" pos:end="4735:23">mod</name> <operator pos:start="4735:25" pos:end="4735:26">!=</operator> <literal type="number" pos:start="4735:28" pos:end="4735:28">3</literal></expr>)</condition> <block pos:start="4735:31" pos:end="4739:17">{<block_content pos:start="4737:21" pos:end="4737:55">

                    <expr_stmt pos:start="4737:21" pos:end="4737:55"><expr pos:start="4737:21" pos:end="4737:54"><call pos:start="4737:21" pos:end="4737:54"><name pos:start="4737:21" pos:end="4737:31">gen_op_st_v</name><argument_list pos:start="4737:32" pos:end="4737:54">(<argument pos:start="4737:33" pos:end="4737:33"><expr pos:start="4737:33" pos:end="4737:33"><name pos:start="4737:33" pos:end="4737:33">s</name></expr></argument>, <argument pos:start="4737:36" pos:end="4737:37"><expr pos:start="4737:36" pos:end="4737:37"><name pos:start="4737:36" pos:end="4737:37">ot</name></expr></argument>, <argument pos:start="4737:40" pos:end="4737:45"><expr pos:start="4737:40" pos:end="4737:45"><name pos:start="4737:40" pos:end="4737:45">cpu_T0</name></expr></argument>, <argument pos:start="4737:48" pos:end="4737:53"><expr pos:start="4737:48" pos:end="4737:53"><name pos:start="4737:48" pos:end="4737:53">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4739:19" pos:end="4743:17">else <block pos:start="4739:24" pos:end="4743:17">{<block_content pos:start="4741:21" pos:end="4741:53">

                    <expr_stmt pos:start="4741:21" pos:end="4741:53"><expr pos:start="4741:21" pos:end="4741:52"><call pos:start="4741:21" pos:end="4741:52"><name pos:start="4741:21" pos:end="4741:36">gen_op_mov_reg_v</name><argument_list pos:start="4741:37" pos:end="4741:52">(<argument pos:start="4741:38" pos:end="4741:39"><expr pos:start="4741:38" pos:end="4741:39"><name pos:start="4741:38" pos:end="4741:39">ot</name></expr></argument>, <argument pos:start="4741:42" pos:end="4741:43"><expr pos:start="4741:42" pos:end="4741:43"><name pos:start="4741:42" pos:end="4741:43">rm</name></expr></argument>, <argument pos:start="4741:46" pos:end="4741:51"><expr pos:start="4741:46" pos:end="4741:51"><name pos:start="4741:46" pos:end="4741:51">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="4751:9" pos:end="4755:33">/* Delay all CC updates until after the store above.  Note that

           C is the result of the test, Z is unchanged, and the others

           are all undefined.  */</comment>

        <switch pos:start="4757:9" pos:end="4807:9">switch <condition pos:start="4757:16" pos:end="4757:25">(<expr pos:start="4757:17" pos:end="4757:24"><name pos:start="4757:17" pos:end="4757:24"><name pos:start="4757:17" pos:end="4757:17">s</name><operator pos:start="4757:18" pos:end="4757:19">-&gt;</operator><name pos:start="4757:20" pos:end="4757:24">cc_op</name></name></expr>)</condition> <block pos:start="4757:27" pos:end="4807:9">{<block_content pos:start="4759:9" pos:end="4805:18">

        <case pos:start="4759:9" pos:end="4759:39">case <expr pos:start="4759:14" pos:end="4759:38"><name pos:start="4759:14" pos:end="4759:23">CC_OP_MULB</name> <operator pos:start="4759:25" pos:end="4759:27">...</operator> <name pos:start="4759:29" pos:end="4759:38">CC_OP_MULQ</name></expr>:</case>

        <case pos:start="4761:9" pos:end="4761:39">case <expr pos:start="4761:14" pos:end="4761:38"><name pos:start="4761:14" pos:end="4761:23">CC_OP_ADDB</name> <operator pos:start="4761:25" pos:end="4761:27">...</operator> <name pos:start="4761:29" pos:end="4761:38">CC_OP_ADDQ</name></expr>:</case>

        <case pos:start="4763:9" pos:end="4763:39">case <expr pos:start="4763:14" pos:end="4763:38"><name pos:start="4763:14" pos:end="4763:23">CC_OP_ADCB</name> <operator pos:start="4763:25" pos:end="4763:27">...</operator> <name pos:start="4763:29" pos:end="4763:38">CC_OP_ADCQ</name></expr>:</case>

        <case pos:start="4765:9" pos:end="4765:39">case <expr pos:start="4765:14" pos:end="4765:38"><name pos:start="4765:14" pos:end="4765:23">CC_OP_SUBB</name> <operator pos:start="4765:25" pos:end="4765:27">...</operator> <name pos:start="4765:29" pos:end="4765:38">CC_OP_SUBQ</name></expr>:</case>

        <case pos:start="4767:9" pos:end="4767:39">case <expr pos:start="4767:14" pos:end="4767:38"><name pos:start="4767:14" pos:end="4767:23">CC_OP_SBBB</name> <operator pos:start="4767:25" pos:end="4767:27">...</operator> <name pos:start="4767:29" pos:end="4767:38">CC_OP_SBBQ</name></expr>:</case>

        <case pos:start="4769:9" pos:end="4769:43">case <expr pos:start="4769:14" pos:end="4769:42"><name pos:start="4769:14" pos:end="4769:25">CC_OP_LOGICB</name> <operator pos:start="4769:27" pos:end="4769:29">...</operator> <name pos:start="4769:31" pos:end="4769:42">CC_OP_LOGICQ</name></expr>:</case>

        <case pos:start="4771:9" pos:end="4771:39">case <expr pos:start="4771:14" pos:end="4771:38"><name pos:start="4771:14" pos:end="4771:23">CC_OP_INCB</name> <operator pos:start="4771:25" pos:end="4771:27">...</operator> <name pos:start="4771:29" pos:end="4771:38">CC_OP_INCQ</name></expr>:</case>

        <case pos:start="4773:9" pos:end="4773:39">case <expr pos:start="4773:14" pos:end="4773:38"><name pos:start="4773:14" pos:end="4773:23">CC_OP_DECB</name> <operator pos:start="4773:25" pos:end="4773:27">...</operator> <name pos:start="4773:29" pos:end="4773:38">CC_OP_DECQ</name></expr>:</case>

        <case pos:start="4775:9" pos:end="4775:39">case <expr pos:start="4775:14" pos:end="4775:38"><name pos:start="4775:14" pos:end="4775:23">CC_OP_SHLB</name> <operator pos:start="4775:25" pos:end="4775:27">...</operator> <name pos:start="4775:29" pos:end="4775:38">CC_OP_SHLQ</name></expr>:</case>

        <case pos:start="4777:9" pos:end="4777:39">case <expr pos:start="4777:14" pos:end="4777:38"><name pos:start="4777:14" pos:end="4777:23">CC_OP_SARB</name> <operator pos:start="4777:25" pos:end="4777:27">...</operator> <name pos:start="4777:29" pos:end="4777:38">CC_OP_SARQ</name></expr>:</case>

        <case pos:start="4779:9" pos:end="4779:43">case <expr pos:start="4779:14" pos:end="4779:42"><name pos:start="4779:14" pos:end="4779:25">CC_OP_BMILGB</name> <operator pos:start="4779:27" pos:end="4779:29">...</operator> <name pos:start="4779:31" pos:end="4779:42">CC_OP_BMILGQ</name></expr>:</case>

            <comment type="block" pos:start="4781:13" pos:end="4787:30">/* Z was going to be computed from the non-zero status of CC_DST.

               We can get that same Z value (and the new C value) by leaving

               CC_DST alone, setting CC_SRC, and using a CC_OP_SAR of the

               same width.  */</comment>

            <expr_stmt pos:start="4789:13" pos:end="4789:49"><expr pos:start="4789:13" pos:end="4789:48"><call pos:start="4789:13" pos:end="4789:48"><name pos:start="4789:13" pos:end="4789:26">tcg_gen_mov_tl</name><argument_list pos:start="4789:27" pos:end="4789:48">(<argument pos:start="4789:28" pos:end="4789:37"><expr pos:start="4789:28" pos:end="4789:37"><name pos:start="4789:28" pos:end="4789:37">cpu_cc_src</name></expr></argument>, <argument pos:start="4789:40" pos:end="4789:47"><expr pos:start="4789:40" pos:end="4789:47"><name pos:start="4789:40" pos:end="4789:47">cpu_tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4791:13" pos:end="4791:69"><expr pos:start="4791:13" pos:end="4791:68"><call pos:start="4791:13" pos:end="4791:68"><name pos:start="4791:13" pos:end="4791:21">set_cc_op</name><argument_list pos:start="4791:22" pos:end="4791:68">(<argument pos:start="4791:23" pos:end="4791:23"><expr pos:start="4791:23" pos:end="4791:23"><name pos:start="4791:23" pos:end="4791:23">s</name></expr></argument>, <argument pos:start="4791:26" pos:end="4791:67"><expr pos:start="4791:26" pos:end="4791:67"><operator pos:start="4791:26" pos:end="4791:26">(</operator><operator pos:start="4791:27" pos:end="4791:27">(</operator><name pos:start="4791:28" pos:end="4791:35"><name pos:start="4791:28" pos:end="4791:28">s</name><operator pos:start="4791:29" pos:end="4791:30">-&gt;</operator><name pos:start="4791:31" pos:end="4791:35">cc_op</name></name> <operator pos:start="4791:37" pos:end="4791:37">-</operator> <name pos:start="4791:39" pos:end="4791:48">CC_OP_MULB</name><operator pos:start="4791:49" pos:end="4791:49">)</operator> <operator pos:start="4791:51" pos:end="4791:51">&amp;</operator> <literal type="number" pos:start="4791:53" pos:end="4791:53">3</literal><operator pos:start="4791:54" pos:end="4791:54">)</operator> <operator pos:start="4791:56" pos:end="4791:56">+</operator> <name pos:start="4791:58" pos:end="4791:67">CC_OP_SARB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4793:13" pos:end="4793:18">break;</break>

        <default pos:start="4795:9" pos:end="4795:16">default:</default>

            <comment type="block" pos:start="4797:13" pos:end="4797:68">/* Otherwise, generate EFLAGS and replace the C bit.  */</comment>

            <expr_stmt pos:start="4799:13" pos:end="4799:34"><expr pos:start="4799:13" pos:end="4799:33"><call pos:start="4799:13" pos:end="4799:33"><name pos:start="4799:13" pos:end="4799:30">gen_compute_eflags</name><argument_list pos:start="4799:31" pos:end="4799:33">(<argument pos:start="4799:32" pos:end="4799:32"><expr pos:start="4799:32" pos:end="4799:32"><name pos:start="4799:32" pos:end="4799:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4801:13" pos:end="4803:47"><expr pos:start="4801:13" pos:end="4803:46"><call pos:start="4801:13" pos:end="4803:46"><name pos:start="4801:13" pos:end="4801:30">tcg_gen_deposit_tl</name><argument_list pos:start="4801:31" pos:end="4803:46">(<argument pos:start="4801:32" pos:end="4801:41"><expr pos:start="4801:32" pos:end="4801:41"><name pos:start="4801:32" pos:end="4801:41">cpu_cc_src</name></expr></argument>, <argument pos:start="4801:44" pos:end="4801:53"><expr pos:start="4801:44" pos:end="4801:53"><name pos:start="4801:44" pos:end="4801:53">cpu_cc_src</name></expr></argument>, <argument pos:start="4801:56" pos:end="4801:63"><expr pos:start="4801:56" pos:end="4801:63"><name pos:start="4801:56" pos:end="4801:63">cpu_tmp4</name></expr></argument>,

                               <argument pos:start="4803:32" pos:end="4803:42"><expr pos:start="4803:32" pos:end="4803:42"><call pos:start="4803:32" pos:end="4803:42"><name pos:start="4803:32" pos:end="4803:36">ctz32</name><argument_list pos:start="4803:37" pos:end="4803:42">(<argument pos:start="4803:38" pos:end="4803:41"><expr pos:start="4803:38" pos:end="4803:41"><name pos:start="4803:38" pos:end="4803:41">CC_C</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="4803:45" pos:end="4803:45"><expr pos:start="4803:45" pos:end="4803:45"><literal type="number" pos:start="4803:45" pos:end="4803:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4805:13" pos:end="4805:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="4809:9" pos:end="4809:14">break;</break>

    <case pos:start="4811:5" pos:end="4811:15">case <expr pos:start="4811:10" pos:end="4811:14"><literal type="number" pos:start="4811:10" pos:end="4811:14">0x1bc</literal></expr>:</case> <comment type="block" pos:start="4811:17" pos:end="4811:33">/* bsf / tzcnt */</comment>

    <case pos:start="4813:5" pos:end="4813:15">case <expr pos:start="4813:10" pos:end="4813:14"><literal type="number" pos:start="4813:10" pos:end="4813:14">0x1bd</literal></expr>:</case> <comment type="block" pos:start="4813:17" pos:end="4813:33">/* bsr / lzcnt */</comment>

        <expr_stmt pos:start="4815:9" pos:end="4815:19"><expr pos:start="4815:9" pos:end="4815:18"><name pos:start="4815:9" pos:end="4815:10">ot</name> <operator pos:start="4815:12" pos:end="4815:12">=</operator> <name pos:start="4815:14" pos:end="4815:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4817:9" pos:end="4817:38"><expr pos:start="4817:9" pos:end="4817:37"><name pos:start="4817:9" pos:end="4817:13">modrm</name> <operator pos:start="4817:15" pos:end="4817:15">=</operator> <call pos:start="4817:17" pos:end="4817:37"><name pos:start="4817:17" pos:end="4817:29">x86_ldub_code</name><argument_list pos:start="4817:30" pos:end="4817:37">(<argument pos:start="4817:31" pos:end="4817:33"><expr pos:start="4817:31" pos:end="4817:33"><name pos:start="4817:31" pos:end="4817:33">env</name></expr></argument>, <argument pos:start="4817:36" pos:end="4817:36"><expr pos:start="4817:36" pos:end="4817:36"><name pos:start="4817:36" pos:end="4817:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4819:9" pos:end="4819:41"><expr pos:start="4819:9" pos:end="4819:40"><name pos:start="4819:9" pos:end="4819:11">reg</name> <operator pos:start="4819:13" pos:end="4819:13">=</operator> <operator pos:start="4819:15" pos:end="4819:15">(</operator><operator pos:start="4819:16" pos:end="4819:16">(</operator><name pos:start="4819:17" pos:end="4819:21">modrm</name> <operator pos:start="4819:23" pos:end="4819:24">&gt;&gt;</operator> <literal type="number" pos:start="4819:26" pos:end="4819:26">3</literal><operator pos:start="4819:27" pos:end="4819:27">)</operator> <operator pos:start="4819:29" pos:end="4819:29">&amp;</operator> <literal type="number" pos:start="4819:31" pos:end="4819:31">7</literal><operator pos:start="4819:32" pos:end="4819:32">)</operator> <operator pos:start="4819:34" pos:end="4819:34">|</operator> <name pos:start="4819:36" pos:end="4819:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4821:9" pos:end="4821:54"><expr pos:start="4821:9" pos:end="4821:53"><call pos:start="4821:9" pos:end="4821:53"><name pos:start="4821:9" pos:end="4821:22">gen_ldst_modrm</name><argument_list pos:start="4821:23" pos:end="4821:53">(<argument pos:start="4821:24" pos:end="4821:26"><expr pos:start="4821:24" pos:end="4821:26"><name pos:start="4821:24" pos:end="4821:26">env</name></expr></argument>, <argument pos:start="4821:29" pos:end="4821:29"><expr pos:start="4821:29" pos:end="4821:29"><name pos:start="4821:29" pos:end="4821:29">s</name></expr></argument>, <argument pos:start="4821:32" pos:end="4821:36"><expr pos:start="4821:32" pos:end="4821:36"><name pos:start="4821:32" pos:end="4821:36">modrm</name></expr></argument>, <argument pos:start="4821:39" pos:end="4821:40"><expr pos:start="4821:39" pos:end="4821:40"><name pos:start="4821:39" pos:end="4821:40">ot</name></expr></argument>, <argument pos:start="4821:43" pos:end="4821:49"><expr pos:start="4821:43" pos:end="4821:49"><name pos:start="4821:43" pos:end="4821:49">OR_TMP0</name></expr></argument>, <argument pos:start="4821:52" pos:end="4821:52"><expr pos:start="4821:52" pos:end="4821:52"><literal type="number" pos:start="4821:52" pos:end="4821:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4823:9" pos:end="4823:29"><expr pos:start="4823:9" pos:end="4823:28"><call pos:start="4823:9" pos:end="4823:28"><name pos:start="4823:9" pos:end="4823:16">gen_extu</name><argument_list pos:start="4823:17" pos:end="4823:28">(<argument pos:start="4823:18" pos:end="4823:19"><expr pos:start="4823:18" pos:end="4823:19"><name pos:start="4823:18" pos:end="4823:19">ot</name></expr></argument>, <argument pos:start="4823:22" pos:end="4823:27"><expr pos:start="4823:22" pos:end="4823:27"><name pos:start="4823:22" pos:end="4823:27">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="4827:9" pos:end="4827:69">/* Note that lzcnt and tzcnt are in different extensions.  */</comment>

        <if_stmt pos:start="4829:9" pos:end="4905:9"><if pos:start="4829:9" pos:end="4867:9">if <condition pos:start="4829:12" pos:end="4835:66">(<expr pos:start="4829:13" pos:end="4835:65"><operator pos:start="4829:13" pos:end="4829:13">(</operator><name pos:start="4829:14" pos:end="4829:21">prefixes</name> <operator pos:start="4829:23" pos:end="4829:23">&amp;</operator> <name pos:start="4829:25" pos:end="4829:35">PREFIX_REPZ</name><operator pos:start="4829:36" pos:end="4829:36">)</operator>

            <operator pos:start="4831:13" pos:end="4831:14">&amp;&amp;</operator> <operator pos:start="4831:16" pos:end="4831:16">(</operator><ternary pos:start="4831:17" pos:end="4835:64"><condition pos:start="4831:17" pos:end="4833:17"><expr pos:start="4831:17" pos:end="4831:21"><name pos:start="4831:17" pos:end="4831:17">b</name> <operator pos:start="4831:19" pos:end="4831:19">&amp;</operator> <literal type="number" pos:start="4831:21" pos:end="4831:21">1</literal></expr>

                ?</condition><then pos:start="4833:19" pos:end="4833:57"> <expr pos:start="4833:19" pos:end="4833:57"><name pos:start="4833:19" pos:end="4833:40"><name pos:start="4833:19" pos:end="4833:19">s</name><operator pos:start="4833:20" pos:end="4833:21">-&gt;</operator><name pos:start="4833:22" pos:end="4833:40">cpuid_ext3_features</name></name> <operator pos:start="4833:42" pos:end="4833:42">&amp;</operator> <name pos:start="4833:44" pos:end="4833:57">CPUID_EXT3_ABM</name></expr>

                </then><else pos:start="4835:17" pos:end="4835:64">: <expr pos:start="4835:19" pos:end="4835:64"><name pos:start="4835:19" pos:end="4835:43"><name pos:start="4835:19" pos:end="4835:19">s</name><operator pos:start="4835:20" pos:end="4835:21">-&gt;</operator><name pos:start="4835:22" pos:end="4835:43">cpuid_7_0_ebx_features</name></name> <operator pos:start="4835:45" pos:end="4835:45">&amp;</operator> <name pos:start="4835:47" pos:end="4835:64">CPUID_7_0_EBX_BMI1</name></expr></else></ternary><operator pos:start="4835:65" pos:end="4835:65">)</operator></expr>)</condition> <block pos:start="4835:68" pos:end="4867:9">{<block_content pos:start="4837:13" pos:end="4865:44">

            <decl_stmt pos:start="4837:13" pos:end="4837:31"><decl pos:start="4837:13" pos:end="4837:30"><type pos:start="4837:13" pos:end="4837:15"><name pos:start="4837:13" pos:end="4837:15">int</name></type> <name pos:start="4837:17" pos:end="4837:20">size</name> <init pos:start="4837:22" pos:end="4837:30">= <expr pos:start="4837:24" pos:end="4837:30"><literal type="number" pos:start="4837:24" pos:end="4837:24">8</literal> <operator pos:start="4837:26" pos:end="4837:27">&lt;&lt;</operator> <name pos:start="4837:29" pos:end="4837:30">ot</name></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="4839:13" pos:end="4839:73">/* For lzcnt/tzcnt, C bit is defined related to the input. */</comment>

            <expr_stmt pos:start="4841:13" pos:end="4841:47"><expr pos:start="4841:13" pos:end="4841:46"><call pos:start="4841:13" pos:end="4841:46"><name pos:start="4841:13" pos:end="4841:26">tcg_gen_mov_tl</name><argument_list pos:start="4841:27" pos:end="4841:46">(<argument pos:start="4841:28" pos:end="4841:37"><expr pos:start="4841:28" pos:end="4841:37"><name pos:start="4841:28" pos:end="4841:37">cpu_cc_src</name></expr></argument>, <argument pos:start="4841:40" pos:end="4841:45"><expr pos:start="4841:40" pos:end="4841:45"><name pos:start="4841:40" pos:end="4841:45">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4843:13" pos:end="4859:13"><if pos:start="4843:13" pos:end="4853:13">if <condition pos:start="4843:16" pos:end="4843:22">(<expr pos:start="4843:17" pos:end="4843:21"><name pos:start="4843:17" pos:end="4843:17">b</name> <operator pos:start="4843:19" pos:end="4843:19">&amp;</operator> <literal type="number" pos:start="4843:21" pos:end="4843:21">1</literal></expr>)</condition> <block pos:start="4843:24" pos:end="4853:13">{<block_content pos:start="4849:17" pos:end="4851:73">

                <comment type="block" pos:start="4845:17" pos:end="4847:73">/* For lzcnt, reduce the target_ulong result by the

                   number of zeros that we expect to find at the top.  */</comment>

                <expr_stmt pos:start="4849:17" pos:end="4849:66"><expr pos:start="4849:17" pos:end="4849:65"><call pos:start="4849:17" pos:end="4849:65"><name pos:start="4849:17" pos:end="4849:31">tcg_gen_clzi_tl</name><argument_list pos:start="4849:32" pos:end="4849:65">(<argument pos:start="4849:33" pos:end="4849:38"><expr pos:start="4849:33" pos:end="4849:38"><name pos:start="4849:33" pos:end="4849:38">cpu_T0</name></expr></argument>, <argument pos:start="4849:41" pos:end="4849:46"><expr pos:start="4849:41" pos:end="4849:46"><name pos:start="4849:41" pos:end="4849:46">cpu_T0</name></expr></argument>, <argument pos:start="4849:49" pos:end="4849:64"><expr pos:start="4849:49" pos:end="4849:64"><name pos:start="4849:49" pos:end="4849:64">TARGET_LONG_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4851:17" pos:end="4851:73"><expr pos:start="4851:17" pos:end="4851:72"><call pos:start="4851:17" pos:end="4851:72"><name pos:start="4851:17" pos:end="4851:31">tcg_gen_subi_tl</name><argument_list pos:start="4851:32" pos:end="4851:72">(<argument pos:start="4851:33" pos:end="4851:38"><expr pos:start="4851:33" pos:end="4851:38"><name pos:start="4851:33" pos:end="4851:38">cpu_T0</name></expr></argument>, <argument pos:start="4851:41" pos:end="4851:46"><expr pos:start="4851:41" pos:end="4851:46"><name pos:start="4851:41" pos:end="4851:46">cpu_T0</name></expr></argument>, <argument pos:start="4851:49" pos:end="4851:71"><expr pos:start="4851:49" pos:end="4851:71"><name pos:start="4851:49" pos:end="4851:64">TARGET_LONG_BITS</name> <operator pos:start="4851:66" pos:end="4851:66">-</operator> <name pos:start="4851:68" pos:end="4851:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4853:15" pos:end="4859:13">else <block pos:start="4853:20" pos:end="4859:13">{<block_content pos:start="4857:17" pos:end="4857:54">

                <comment type="block" pos:start="4855:17" pos:end="4855:76">/* For tzcnt, a zero input must return the operand size.  */</comment>

                <expr_stmt pos:start="4857:17" pos:end="4857:54"><expr pos:start="4857:17" pos:end="4857:53"><call pos:start="4857:17" pos:end="4857:53"><name pos:start="4857:17" pos:end="4857:31">tcg_gen_ctzi_tl</name><argument_list pos:start="4857:32" pos:end="4857:53">(<argument pos:start="4857:33" pos:end="4857:38"><expr pos:start="4857:33" pos:end="4857:38"><name pos:start="4857:33" pos:end="4857:38">cpu_T0</name></expr></argument>, <argument pos:start="4857:41" pos:end="4857:46"><expr pos:start="4857:41" pos:end="4857:46"><name pos:start="4857:41" pos:end="4857:46">cpu_T0</name></expr></argument>, <argument pos:start="4857:49" pos:end="4857:52"><expr pos:start="4857:49" pos:end="4857:52"><name pos:start="4857:49" pos:end="4857:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="4861:13" pos:end="4861:75">/* For lzcnt/tzcnt, Z bit is defined related to the result.  */</comment>

            <expr_stmt pos:start="4863:13" pos:end="4863:32"><expr pos:start="4863:13" pos:end="4863:31"><call pos:start="4863:13" pos:end="4863:31"><name pos:start="4863:13" pos:end="4863:29">gen_op_update1_cc</name><argument_list pos:start="4863:30" pos:end="4863:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4865:13" pos:end="4865:44"><expr pos:start="4865:13" pos:end="4865:43"><call pos:start="4865:13" pos:end="4865:43"><name pos:start="4865:13" pos:end="4865:21">set_cc_op</name><argument_list pos:start="4865:22" pos:end="4865:43">(<argument pos:start="4865:23" pos:end="4865:23"><expr pos:start="4865:23" pos:end="4865:23"><name pos:start="4865:23" pos:end="4865:23">s</name></expr></argument>, <argument pos:start="4865:26" pos:end="4865:42"><expr pos:start="4865:26" pos:end="4865:42"><name pos:start="4865:26" pos:end="4865:37">CC_OP_BMILGB</name> <operator pos:start="4865:39" pos:end="4865:39">+</operator> <name pos:start="4865:41" pos:end="4865:42">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4867:11" pos:end="4905:9">else <block pos:start="4867:16" pos:end="4905:9">{<block_content pos:start="4873:13" pos:end="4903:13">

            <comment type="block" pos:start="4869:13" pos:end="4871:51">/* For bsr/bsf, only the Z bit is defined and it is related

               to the input and not the result.  */</comment>

            <expr_stmt pos:start="4873:13" pos:end="4873:47"><expr pos:start="4873:13" pos:end="4873:46"><call pos:start="4873:13" pos:end="4873:46"><name pos:start="4873:13" pos:end="4873:26">tcg_gen_mov_tl</name><argument_list pos:start="4873:27" pos:end="4873:46">(<argument pos:start="4873:28" pos:end="4873:37"><expr pos:start="4873:28" pos:end="4873:37"><name pos:start="4873:28" pos:end="4873:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="4873:40" pos:end="4873:45"><expr pos:start="4873:40" pos:end="4873:45"><name pos:start="4873:40" pos:end="4873:45">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4875:13" pos:end="4875:44"><expr pos:start="4875:13" pos:end="4875:43"><call pos:start="4875:13" pos:end="4875:43"><name pos:start="4875:13" pos:end="4875:21">set_cc_op</name><argument_list pos:start="4875:22" pos:end="4875:43">(<argument pos:start="4875:23" pos:end="4875:23"><expr pos:start="4875:23" pos:end="4875:23"><name pos:start="4875:23" pos:end="4875:23">s</name></expr></argument>, <argument pos:start="4875:26" pos:end="4875:42"><expr pos:start="4875:26" pos:end="4875:42"><name pos:start="4875:26" pos:end="4875:37">CC_OP_LOGICB</name> <operator pos:start="4875:39" pos:end="4875:39">+</operator> <name pos:start="4875:41" pos:end="4875:42">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="4879:13" pos:end="4885:74">/* ??? The manual says that the output is undefined when the

               input is zero, but real hardware leaves it unchanged, and

               real programs appear to depend on that.  Accomplish this

               by passing the output as the value to return upon zero.  */</comment>

            <if_stmt pos:start="4887:13" pos:end="4903:13"><if pos:start="4887:13" pos:end="4899:13">if <condition pos:start="4887:16" pos:end="4887:22">(<expr pos:start="4887:17" pos:end="4887:21"><name pos:start="4887:17" pos:end="4887:17">b</name> <operator pos:start="4887:19" pos:end="4887:19">&amp;</operator> <literal type="number" pos:start="4887:21" pos:end="4887:21">1</literal></expr>)</condition> <block pos:start="4887:24" pos:end="4899:13">{<block_content pos:start="4893:17" pos:end="4897:70">

                <comment type="block" pos:start="4889:17" pos:end="4891:54">/* For bsr, return the bit index of the first 1 bit,

                   not the count of leading zeros.  */</comment>

                <expr_stmt pos:start="4893:17" pos:end="4893:77"><expr pos:start="4893:17" pos:end="4893:76"><call pos:start="4893:17" pos:end="4893:76"><name pos:start="4893:17" pos:end="4893:31">tcg_gen_xori_tl</name><argument_list pos:start="4893:32" pos:end="4893:76">(<argument pos:start="4893:33" pos:end="4893:38"><expr pos:start="4893:33" pos:end="4893:38"><name pos:start="4893:33" pos:end="4893:38">cpu_T1</name></expr></argument>, <argument pos:start="4893:41" pos:end="4893:53"><expr pos:start="4893:41" pos:end="4893:53"><name pos:start="4893:41" pos:end="4893:53"><name pos:start="4893:41" pos:end="4893:48">cpu_regs</name><index pos:start="4893:49" pos:end="4893:53">[<expr pos:start="4893:50" pos:end="4893:52"><name pos:start="4893:50" pos:end="4893:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="4893:56" pos:end="4893:75"><expr pos:start="4893:56" pos:end="4893:75"><name pos:start="4893:56" pos:end="4893:71">TARGET_LONG_BITS</name> <operator pos:start="4893:73" pos:end="4893:73">-</operator> <literal type="number" pos:start="4893:75" pos:end="4893:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4895:17" pos:end="4895:55"><expr pos:start="4895:17" pos:end="4895:54"><call pos:start="4895:17" pos:end="4895:54"><name pos:start="4895:17" pos:end="4895:30">tcg_gen_clz_tl</name><argument_list pos:start="4895:31" pos:end="4895:54">(<argument pos:start="4895:32" pos:end="4895:37"><expr pos:start="4895:32" pos:end="4895:37"><name pos:start="4895:32" pos:end="4895:37">cpu_T0</name></expr></argument>, <argument pos:start="4895:40" pos:end="4895:45"><expr pos:start="4895:40" pos:end="4895:45"><name pos:start="4895:40" pos:end="4895:45">cpu_T0</name></expr></argument>, <argument pos:start="4895:48" pos:end="4895:53"><expr pos:start="4895:48" pos:end="4895:53"><name pos:start="4895:48" pos:end="4895:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4897:17" pos:end="4897:70"><expr pos:start="4897:17" pos:end="4897:69"><call pos:start="4897:17" pos:end="4897:69"><name pos:start="4897:17" pos:end="4897:31">tcg_gen_xori_tl</name><argument_list pos:start="4897:32" pos:end="4897:69">(<argument pos:start="4897:33" pos:end="4897:38"><expr pos:start="4897:33" pos:end="4897:38"><name pos:start="4897:33" pos:end="4897:38">cpu_T0</name></expr></argument>, <argument pos:start="4897:41" pos:end="4897:46"><expr pos:start="4897:41" pos:end="4897:46"><name pos:start="4897:41" pos:end="4897:46">cpu_T0</name></expr></argument>, <argument pos:start="4897:49" pos:end="4897:68"><expr pos:start="4897:49" pos:end="4897:68"><name pos:start="4897:49" pos:end="4897:64">TARGET_LONG_BITS</name> <operator pos:start="4897:66" pos:end="4897:66">-</operator> <literal type="number" pos:start="4897:68" pos:end="4897:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4899:15" pos:end="4903:13">else <block pos:start="4899:20" pos:end="4903:13">{<block_content pos:start="4901:17" pos:end="4901:62">

                <expr_stmt pos:start="4901:17" pos:end="4901:62"><expr pos:start="4901:17" pos:end="4901:61"><call pos:start="4901:17" pos:end="4901:61"><name pos:start="4901:17" pos:end="4901:30">tcg_gen_ctz_tl</name><argument_list pos:start="4901:31" pos:end="4901:61">(<argument pos:start="4901:32" pos:end="4901:37"><expr pos:start="4901:32" pos:end="4901:37"><name pos:start="4901:32" pos:end="4901:37">cpu_T0</name></expr></argument>, <argument pos:start="4901:40" pos:end="4901:45"><expr pos:start="4901:40" pos:end="4901:45"><name pos:start="4901:40" pos:end="4901:45">cpu_T0</name></expr></argument>, <argument pos:start="4901:48" pos:end="4901:60"><expr pos:start="4901:48" pos:end="4901:60"><name pos:start="4901:48" pos:end="4901:60"><name pos:start="4901:48" pos:end="4901:55">cpu_regs</name><index pos:start="4901:56" pos:end="4901:60">[<expr pos:start="4901:57" pos:end="4901:59"><name pos:start="4901:57" pos:end="4901:59">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4907:9" pos:end="4907:42"><expr pos:start="4907:9" pos:end="4907:41"><call pos:start="4907:9" pos:end="4907:41"><name pos:start="4907:9" pos:end="4907:24">gen_op_mov_reg_v</name><argument_list pos:start="4907:25" pos:end="4907:41">(<argument pos:start="4907:26" pos:end="4907:27"><expr pos:start="4907:26" pos:end="4907:27"><name pos:start="4907:26" pos:end="4907:27">ot</name></expr></argument>, <argument pos:start="4907:30" pos:end="4907:32"><expr pos:start="4907:30" pos:end="4907:32"><name pos:start="4907:30" pos:end="4907:32">reg</name></expr></argument>, <argument pos:start="4907:35" pos:end="4907:40"><expr pos:start="4907:35" pos:end="4907:40"><name pos:start="4907:35" pos:end="4907:40">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4909:9" pos:end="4909:14">break;</break>

        <comment type="block" format="doxygen" pos:start="4911:9" pos:end="4911:34">/************************/</comment>

        <comment type="block" pos:start="4913:9" pos:end="4913:17">/* bcd */</comment>

    <case pos:start="4915:5" pos:end="4915:14">case <expr pos:start="4915:10" pos:end="4915:13"><literal type="number" pos:start="4915:10" pos:end="4915:13">0x27</literal></expr>:</case> <comment type="block" pos:start="4915:16" pos:end="4915:24">/* daa */</comment>

        <if_stmt pos:start="4917:9" pos:end="4919:28"><if pos:start="4917:9" pos:end="4919:28">if <condition pos:start="4917:12" pos:end="4917:22">(<expr pos:start="4917:13" pos:end="4917:21"><call pos:start="4917:13" pos:end="4917:21"><name pos:start="4917:13" pos:end="4917:18">CODE64</name><argument_list pos:start="4917:19" pos:end="4917:21">(<argument pos:start="4917:20" pos:end="4917:20"><expr pos:start="4917:20" pos:end="4917:20"><name pos:start="4917:20" pos:end="4917:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4919:13" pos:end="4919:28"><block_content pos:start="4919:13" pos:end="4919:28">

            <goto pos:start="4919:13" pos:end="4919:28">goto <name pos:start="4919:18" pos:end="4919:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4921:9" pos:end="4921:28"><expr pos:start="4921:9" pos:end="4921:27"><call pos:start="4921:9" pos:end="4921:27"><name pos:start="4921:9" pos:end="4921:24">gen_update_cc_op</name><argument_list pos:start="4921:25" pos:end="4921:27">(<argument pos:start="4921:26" pos:end="4921:26"><expr pos:start="4921:26" pos:end="4921:26"><name pos:start="4921:26" pos:end="4921:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4923:9" pos:end="4923:32"><expr pos:start="4923:9" pos:end="4923:31"><call pos:start="4923:9" pos:end="4923:31"><name pos:start="4923:9" pos:end="4923:22">gen_helper_daa</name><argument_list pos:start="4923:23" pos:end="4923:31">(<argument pos:start="4923:24" pos:end="4923:30"><expr pos:start="4923:24" pos:end="4923:30"><name pos:start="4923:24" pos:end="4923:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4925:9" pos:end="4925:35"><expr pos:start="4925:9" pos:end="4925:34"><call pos:start="4925:9" pos:end="4925:34"><name pos:start="4925:9" pos:end="4925:17">set_cc_op</name><argument_list pos:start="4925:18" pos:end="4925:34">(<argument pos:start="4925:19" pos:end="4925:19"><expr pos:start="4925:19" pos:end="4925:19"><name pos:start="4925:19" pos:end="4925:19">s</name></expr></argument>, <argument pos:start="4925:22" pos:end="4925:33"><expr pos:start="4925:22" pos:end="4925:33"><name pos:start="4925:22" pos:end="4925:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4927:9" pos:end="4927:14">break;</break>

    <case pos:start="4929:5" pos:end="4929:14">case <expr pos:start="4929:10" pos:end="4929:13"><literal type="number" pos:start="4929:10" pos:end="4929:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="4929:16" pos:end="4929:24">/* das */</comment>

        <if_stmt pos:start="4931:9" pos:end="4933:28"><if pos:start="4931:9" pos:end="4933:28">if <condition pos:start="4931:12" pos:end="4931:22">(<expr pos:start="4931:13" pos:end="4931:21"><call pos:start="4931:13" pos:end="4931:21"><name pos:start="4931:13" pos:end="4931:18">CODE64</name><argument_list pos:start="4931:19" pos:end="4931:21">(<argument pos:start="4931:20" pos:end="4931:20"><expr pos:start="4931:20" pos:end="4931:20"><name pos:start="4931:20" pos:end="4931:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4933:13" pos:end="4933:28"><block_content pos:start="4933:13" pos:end="4933:28">

            <goto pos:start="4933:13" pos:end="4933:28">goto <name pos:start="4933:18" pos:end="4933:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4935:9" pos:end="4935:28"><expr pos:start="4935:9" pos:end="4935:27"><call pos:start="4935:9" pos:end="4935:27"><name pos:start="4935:9" pos:end="4935:24">gen_update_cc_op</name><argument_list pos:start="4935:25" pos:end="4935:27">(<argument pos:start="4935:26" pos:end="4935:26"><expr pos:start="4935:26" pos:end="4935:26"><name pos:start="4935:26" pos:end="4935:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4937:9" pos:end="4937:32"><expr pos:start="4937:9" pos:end="4937:31"><call pos:start="4937:9" pos:end="4937:31"><name pos:start="4937:9" pos:end="4937:22">gen_helper_das</name><argument_list pos:start="4937:23" pos:end="4937:31">(<argument pos:start="4937:24" pos:end="4937:30"><expr pos:start="4937:24" pos:end="4937:30"><name pos:start="4937:24" pos:end="4937:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4939:9" pos:end="4939:35"><expr pos:start="4939:9" pos:end="4939:34"><call pos:start="4939:9" pos:end="4939:34"><name pos:start="4939:9" pos:end="4939:17">set_cc_op</name><argument_list pos:start="4939:18" pos:end="4939:34">(<argument pos:start="4939:19" pos:end="4939:19"><expr pos:start="4939:19" pos:end="4939:19"><name pos:start="4939:19" pos:end="4939:19">s</name></expr></argument>, <argument pos:start="4939:22" pos:end="4939:33"><expr pos:start="4939:22" pos:end="4939:33"><name pos:start="4939:22" pos:end="4939:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4941:9" pos:end="4941:14">break;</break>

    <case pos:start="4943:5" pos:end="4943:14">case <expr pos:start="4943:10" pos:end="4943:13"><literal type="number" pos:start="4943:10" pos:end="4943:13">0x37</literal></expr>:</case> <comment type="block" pos:start="4943:16" pos:end="4943:24">/* aaa */</comment>

        <if_stmt pos:start="4945:9" pos:end="4947:28"><if pos:start="4945:9" pos:end="4947:28">if <condition pos:start="4945:12" pos:end="4945:22">(<expr pos:start="4945:13" pos:end="4945:21"><call pos:start="4945:13" pos:end="4945:21"><name pos:start="4945:13" pos:end="4945:18">CODE64</name><argument_list pos:start="4945:19" pos:end="4945:21">(<argument pos:start="4945:20" pos:end="4945:20"><expr pos:start="4945:20" pos:end="4945:20"><name pos:start="4945:20" pos:end="4945:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4947:13" pos:end="4947:28"><block_content pos:start="4947:13" pos:end="4947:28">

            <goto pos:start="4947:13" pos:end="4947:28">goto <name pos:start="4947:18" pos:end="4947:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4949:9" pos:end="4949:28"><expr pos:start="4949:9" pos:end="4949:27"><call pos:start="4949:9" pos:end="4949:27"><name pos:start="4949:9" pos:end="4949:24">gen_update_cc_op</name><argument_list pos:start="4949:25" pos:end="4949:27">(<argument pos:start="4949:26" pos:end="4949:26"><expr pos:start="4949:26" pos:end="4949:26"><name pos:start="4949:26" pos:end="4949:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4951:9" pos:end="4951:32"><expr pos:start="4951:9" pos:end="4951:31"><call pos:start="4951:9" pos:end="4951:31"><name pos:start="4951:9" pos:end="4951:22">gen_helper_aaa</name><argument_list pos:start="4951:23" pos:end="4951:31">(<argument pos:start="4951:24" pos:end="4951:30"><expr pos:start="4951:24" pos:end="4951:30"><name pos:start="4951:24" pos:end="4951:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4953:9" pos:end="4953:35"><expr pos:start="4953:9" pos:end="4953:34"><call pos:start="4953:9" pos:end="4953:34"><name pos:start="4953:9" pos:end="4953:17">set_cc_op</name><argument_list pos:start="4953:18" pos:end="4953:34">(<argument pos:start="4953:19" pos:end="4953:19"><expr pos:start="4953:19" pos:end="4953:19"><name pos:start="4953:19" pos:end="4953:19">s</name></expr></argument>, <argument pos:start="4953:22" pos:end="4953:33"><expr pos:start="4953:22" pos:end="4953:33"><name pos:start="4953:22" pos:end="4953:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4955:9" pos:end="4955:14">break;</break>

    <case pos:start="4957:5" pos:end="4957:14">case <expr pos:start="4957:10" pos:end="4957:13"><literal type="number" pos:start="4957:10" pos:end="4957:13">0x3f</literal></expr>:</case> <comment type="block" pos:start="4957:16" pos:end="4957:24">/* aas */</comment>

        <if_stmt pos:start="4959:9" pos:end="4961:28"><if pos:start="4959:9" pos:end="4961:28">if <condition pos:start="4959:12" pos:end="4959:22">(<expr pos:start="4959:13" pos:end="4959:21"><call pos:start="4959:13" pos:end="4959:21"><name pos:start="4959:13" pos:end="4959:18">CODE64</name><argument_list pos:start="4959:19" pos:end="4959:21">(<argument pos:start="4959:20" pos:end="4959:20"><expr pos:start="4959:20" pos:end="4959:20"><name pos:start="4959:20" pos:end="4959:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4961:13" pos:end="4961:28"><block_content pos:start="4961:13" pos:end="4961:28">

            <goto pos:start="4961:13" pos:end="4961:28">goto <name pos:start="4961:18" pos:end="4961:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4963:9" pos:end="4963:28"><expr pos:start="4963:9" pos:end="4963:27"><call pos:start="4963:9" pos:end="4963:27"><name pos:start="4963:9" pos:end="4963:24">gen_update_cc_op</name><argument_list pos:start="4963:25" pos:end="4963:27">(<argument pos:start="4963:26" pos:end="4963:26"><expr pos:start="4963:26" pos:end="4963:26"><name pos:start="4963:26" pos:end="4963:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4965:9" pos:end="4965:32"><expr pos:start="4965:9" pos:end="4965:31"><call pos:start="4965:9" pos:end="4965:31"><name pos:start="4965:9" pos:end="4965:22">gen_helper_aas</name><argument_list pos:start="4965:23" pos:end="4965:31">(<argument pos:start="4965:24" pos:end="4965:30"><expr pos:start="4965:24" pos:end="4965:30"><name pos:start="4965:24" pos:end="4965:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4967:9" pos:end="4967:35"><expr pos:start="4967:9" pos:end="4967:34"><call pos:start="4967:9" pos:end="4967:34"><name pos:start="4967:9" pos:end="4967:17">set_cc_op</name><argument_list pos:start="4967:18" pos:end="4967:34">(<argument pos:start="4967:19" pos:end="4967:19"><expr pos:start="4967:19" pos:end="4967:19"><name pos:start="4967:19" pos:end="4967:19">s</name></expr></argument>, <argument pos:start="4967:22" pos:end="4967:33"><expr pos:start="4967:22" pos:end="4967:33"><name pos:start="4967:22" pos:end="4967:33">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4969:9" pos:end="4969:14">break;</break>

    <case pos:start="4971:5" pos:end="4971:14">case <expr pos:start="4971:10" pos:end="4971:13"><literal type="number" pos:start="4971:10" pos:end="4971:13">0xd4</literal></expr>:</case> <comment type="block" pos:start="4971:16" pos:end="4971:24">/* aam */</comment>

        <if_stmt pos:start="4973:9" pos:end="4975:28"><if pos:start="4973:9" pos:end="4975:28">if <condition pos:start="4973:12" pos:end="4973:22">(<expr pos:start="4973:13" pos:end="4973:21"><call pos:start="4973:13" pos:end="4973:21"><name pos:start="4973:13" pos:end="4973:18">CODE64</name><argument_list pos:start="4973:19" pos:end="4973:21">(<argument pos:start="4973:20" pos:end="4973:20"><expr pos:start="4973:20" pos:end="4973:20"><name pos:start="4973:20" pos:end="4973:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4975:13" pos:end="4975:28"><block_content pos:start="4975:13" pos:end="4975:28">

            <goto pos:start="4975:13" pos:end="4975:28">goto <name pos:start="4975:18" pos:end="4975:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4977:9" pos:end="4977:36"><expr pos:start="4977:9" pos:end="4977:35"><name pos:start="4977:9" pos:end="4977:11">val</name> <operator pos:start="4977:13" pos:end="4977:13">=</operator> <call pos:start="4977:15" pos:end="4977:35"><name pos:start="4977:15" pos:end="4977:27">x86_ldub_code</name><argument_list pos:start="4977:28" pos:end="4977:35">(<argument pos:start="4977:29" pos:end="4977:31"><expr pos:start="4977:29" pos:end="4977:31"><name pos:start="4977:29" pos:end="4977:31">env</name></expr></argument>, <argument pos:start="4977:34" pos:end="4977:34"><expr pos:start="4977:34" pos:end="4977:34"><name pos:start="4977:34" pos:end="4977:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4979:9" pos:end="4989:9"><if pos:start="4979:9" pos:end="4983:9">if <condition pos:start="4979:12" pos:end="4979:21">(<expr pos:start="4979:13" pos:end="4979:20"><name pos:start="4979:13" pos:end="4979:15">val</name> <operator pos:start="4979:17" pos:end="4979:18">==</operator> <literal type="number" pos:start="4979:20" pos:end="4979:20">0</literal></expr>)</condition> <block pos:start="4979:23" pos:end="4983:9">{<block_content pos:start="4981:13" pos:end="4981:65">

            <expr_stmt pos:start="4981:13" pos:end="4981:65"><expr pos:start="4981:13" pos:end="4981:64"><call pos:start="4981:13" pos:end="4981:64"><name pos:start="4981:13" pos:end="4981:25">gen_exception</name><argument_list pos:start="4981:26" pos:end="4981:64">(<argument pos:start="4981:27" pos:end="4981:27"><expr pos:start="4981:27" pos:end="4981:27"><name pos:start="4981:27" pos:end="4981:27">s</name></expr></argument>, <argument pos:start="4981:30" pos:end="4981:40"><expr pos:start="4981:30" pos:end="4981:40"><name pos:start="4981:30" pos:end="4981:40">EXCP00_DIVZ</name></expr></argument>, <argument pos:start="4981:43" pos:end="4981:63"><expr pos:start="4981:43" pos:end="4981:63"><name pos:start="4981:43" pos:end="4981:50">pc_start</name> <operator pos:start="4981:52" pos:end="4981:52">-</operator> <name pos:start="4981:54" pos:end="4981:63"><name pos:start="4981:54" pos:end="4981:54">s</name><operator pos:start="4981:55" pos:end="4981:56">-&gt;</operator><name pos:start="4981:57" pos:end="4981:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4983:11" pos:end="4989:9">else <block pos:start="4983:16" pos:end="4989:9">{<block_content pos:start="4985:13" pos:end="4987:39">

            <expr_stmt pos:start="4985:13" pos:end="4985:56"><expr pos:start="4985:13" pos:end="4985:55"><call pos:start="4985:13" pos:end="4985:55"><name pos:start="4985:13" pos:end="4985:26">gen_helper_aam</name><argument_list pos:start="4985:27" pos:end="4985:55">(<argument pos:start="4985:28" pos:end="4985:34"><expr pos:start="4985:28" pos:end="4985:34"><name pos:start="4985:28" pos:end="4985:34">cpu_env</name></expr></argument>, <argument pos:start="4985:37" pos:end="4985:54"><expr pos:start="4985:37" pos:end="4985:54"><call pos:start="4985:37" pos:end="4985:54"><name pos:start="4985:37" pos:end="4985:49">tcg_const_i32</name><argument_list pos:start="4985:50" pos:end="4985:54">(<argument pos:start="4985:51" pos:end="4985:53"><expr pos:start="4985:51" pos:end="4985:53"><name pos:start="4985:51" pos:end="4985:53">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4987:13" pos:end="4987:39"><expr pos:start="4987:13" pos:end="4987:38"><call pos:start="4987:13" pos:end="4987:38"><name pos:start="4987:13" pos:end="4987:21">set_cc_op</name><argument_list pos:start="4987:22" pos:end="4987:38">(<argument pos:start="4987:23" pos:end="4987:23"><expr pos:start="4987:23" pos:end="4987:23"><name pos:start="4987:23" pos:end="4987:23">s</name></expr></argument>, <argument pos:start="4987:26" pos:end="4987:37"><expr pos:start="4987:26" pos:end="4987:37"><name pos:start="4987:26" pos:end="4987:37">CC_OP_LOGICB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4991:9" pos:end="4991:14">break;</break>

    <case pos:start="4993:5" pos:end="4993:14">case <expr pos:start="4993:10" pos:end="4993:13"><literal type="number" pos:start="4993:10" pos:end="4993:13">0xd5</literal></expr>:</case> <comment type="block" pos:start="4993:16" pos:end="4993:24">/* aad */</comment>

        <if_stmt pos:start="4995:9" pos:end="4997:28"><if pos:start="4995:9" pos:end="4997:28">if <condition pos:start="4995:12" pos:end="4995:22">(<expr pos:start="4995:13" pos:end="4995:21"><call pos:start="4995:13" pos:end="4995:21"><name pos:start="4995:13" pos:end="4995:18">CODE64</name><argument_list pos:start="4995:19" pos:end="4995:21">(<argument pos:start="4995:20" pos:end="4995:20"><expr pos:start="4995:20" pos:end="4995:20"><name pos:start="4995:20" pos:end="4995:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4997:13" pos:end="4997:28"><block_content pos:start="4997:13" pos:end="4997:28">

            <goto pos:start="4997:13" pos:end="4997:28">goto <name pos:start="4997:18" pos:end="4997:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4999:9" pos:end="4999:36"><expr pos:start="4999:9" pos:end="4999:35"><name pos:start="4999:9" pos:end="4999:11">val</name> <operator pos:start="4999:13" pos:end="4999:13">=</operator> <call pos:start="4999:15" pos:end="4999:35"><name pos:start="4999:15" pos:end="4999:27">x86_ldub_code</name><argument_list pos:start="4999:28" pos:end="4999:35">(<argument pos:start="4999:29" pos:end="4999:31"><expr pos:start="4999:29" pos:end="4999:31"><name pos:start="4999:29" pos:end="4999:31">env</name></expr></argument>, <argument pos:start="4999:34" pos:end="4999:34"><expr pos:start="4999:34" pos:end="4999:34"><name pos:start="4999:34" pos:end="4999:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5001:9" pos:end="5001:52"><expr pos:start="5001:9" pos:end="5001:51"><call pos:start="5001:9" pos:end="5001:51"><name pos:start="5001:9" pos:end="5001:22">gen_helper_aad</name><argument_list pos:start="5001:23" pos:end="5001:51">(<argument pos:start="5001:24" pos:end="5001:30"><expr pos:start="5001:24" pos:end="5001:30"><name pos:start="5001:24" pos:end="5001:30">cpu_env</name></expr></argument>, <argument pos:start="5001:33" pos:end="5001:50"><expr pos:start="5001:33" pos:end="5001:50"><call pos:start="5001:33" pos:end="5001:50"><name pos:start="5001:33" pos:end="5001:45">tcg_const_i32</name><argument_list pos:start="5001:46" pos:end="5001:50">(<argument pos:start="5001:47" pos:end="5001:49"><expr pos:start="5001:47" pos:end="5001:49"><name pos:start="5001:47" pos:end="5001:49">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5003:9" pos:end="5003:35"><expr pos:start="5003:9" pos:end="5003:34"><call pos:start="5003:9" pos:end="5003:34"><name pos:start="5003:9" pos:end="5003:17">set_cc_op</name><argument_list pos:start="5003:18" pos:end="5003:34">(<argument pos:start="5003:19" pos:end="5003:19"><expr pos:start="5003:19" pos:end="5003:19"><name pos:start="5003:19" pos:end="5003:19">s</name></expr></argument>, <argument pos:start="5003:22" pos:end="5003:33"><expr pos:start="5003:22" pos:end="5003:33"><name pos:start="5003:22" pos:end="5003:33">CC_OP_LOGICB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5005:9" pos:end="5005:14">break;</break>

        <comment type="block" format="doxygen" pos:start="5007:9" pos:end="5007:34">/************************/</comment>

        <comment type="block" pos:start="5009:9" pos:end="5009:18">/* misc */</comment>

    <case pos:start="5011:5" pos:end="5011:14">case <expr pos:start="5011:10" pos:end="5011:13"><literal type="number" pos:start="5011:10" pos:end="5011:13">0x90</literal></expr>:</case> <comment type="block" pos:start="5011:16" pos:end="5011:24">/* nop */</comment>

        <comment type="block" pos:start="5013:9" pos:end="5013:49">/* XXX: correct lock test for all insn */</comment>

        <if_stmt pos:start="5015:9" pos:end="5019:9"><if pos:start="5015:9" pos:end="5019:9">if <condition pos:start="5015:12" pos:end="5015:35">(<expr pos:start="5015:13" pos:end="5015:34"><name pos:start="5015:13" pos:end="5015:20">prefixes</name> <operator pos:start="5015:22" pos:end="5015:22">&amp;</operator> <name pos:start="5015:24" pos:end="5015:34">PREFIX_LOCK</name></expr>)</condition> <block pos:start="5015:37" pos:end="5019:9">{<block_content pos:start="5017:13" pos:end="5017:28">

            <goto pos:start="5017:13" pos:end="5017:28">goto <name pos:start="5017:18" pos:end="5017:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="5021:9" pos:end="5021:70">/* If REX_B is set, then this is xchg eax, r8d, not a nop.  */</comment>

        <if_stmt pos:start="5023:9" pos:end="5027:9"><if pos:start="5023:9" pos:end="5027:9">if <condition pos:start="5023:12" pos:end="5023:21">(<expr pos:start="5023:13" pos:end="5023:20"><call pos:start="5023:13" pos:end="5023:20"><name pos:start="5023:13" pos:end="5023:17">REX_B</name><argument_list pos:start="5023:18" pos:end="5023:20">(<argument pos:start="5023:19" pos:end="5023:19"><expr pos:start="5023:19" pos:end="5023:19"><name pos:start="5023:19" pos:end="5023:19">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5023:23" pos:end="5027:9">{<block_content pos:start="5025:13" pos:end="5025:33">

            <goto pos:start="5025:13" pos:end="5025:33">goto <name pos:start="5025:18" pos:end="5025:32">do_xchg_reg_eax</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="5029:9" pos:end="5039:9"><if pos:start="5029:9" pos:end="5039:9">if <condition pos:start="5029:12" pos:end="5029:35">(<expr pos:start="5029:13" pos:end="5029:34"><name pos:start="5029:13" pos:end="5029:20">prefixes</name> <operator pos:start="5029:22" pos:end="5029:22">&amp;</operator> <name pos:start="5029:24" pos:end="5029:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="5029:37" pos:end="5039:9">{<block_content pos:start="5031:13" pos:end="5037:44">

            <expr_stmt pos:start="5031:13" pos:end="5031:32"><expr pos:start="5031:13" pos:end="5031:31"><call pos:start="5031:13" pos:end="5031:31"><name pos:start="5031:13" pos:end="5031:28">gen_update_cc_op</name><argument_list pos:start="5031:29" pos:end="5031:31">(<argument pos:start="5031:30" pos:end="5031:30"><expr pos:start="5031:30" pos:end="5031:30"><name pos:start="5031:30" pos:end="5031:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5033:13" pos:end="5033:46"><expr pos:start="5033:13" pos:end="5033:45"><call pos:start="5033:13" pos:end="5033:45"><name pos:start="5033:13" pos:end="5033:22">gen_jmp_im</name><argument_list pos:start="5033:23" pos:end="5033:45">(<argument pos:start="5033:24" pos:end="5033:44"><expr pos:start="5033:24" pos:end="5033:44"><name pos:start="5033:24" pos:end="5033:31">pc_start</name> <operator pos:start="5033:33" pos:end="5033:33">-</operator> <name pos:start="5033:35" pos:end="5033:44"><name pos:start="5033:35" pos:end="5033:35">s</name><operator pos:start="5033:36" pos:end="5033:37">-&gt;</operator><name pos:start="5033:38" pos:end="5033:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5035:13" pos:end="5035:71"><expr pos:start="5035:13" pos:end="5035:70"><call pos:start="5035:13" pos:end="5035:70"><name pos:start="5035:13" pos:end="5035:28">gen_helper_pause</name><argument_list pos:start="5035:29" pos:end="5035:70">(<argument pos:start="5035:30" pos:end="5035:36"><expr pos:start="5035:30" pos:end="5035:36"><name pos:start="5035:30" pos:end="5035:36">cpu_env</name></expr></argument>, <argument pos:start="5035:39" pos:end="5035:69"><expr pos:start="5035:39" pos:end="5035:69"><call pos:start="5035:39" pos:end="5035:69"><name pos:start="5035:39" pos:end="5035:51">tcg_const_i32</name><argument_list pos:start="5035:52" pos:end="5035:69">(<argument pos:start="5035:53" pos:end="5035:68"><expr pos:start="5035:53" pos:end="5035:68"><name pos:start="5035:53" pos:end="5035:57"><name pos:start="5035:53" pos:end="5035:53">s</name><operator pos:start="5035:54" pos:end="5035:55">-&gt;</operator><name pos:start="5035:56" pos:end="5035:57">pc</name></name> <operator pos:start="5035:59" pos:end="5035:59">-</operator> <name pos:start="5035:61" pos:end="5035:68">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5037:13" pos:end="5037:44"><expr pos:start="5037:13" pos:end="5037:43"><name pos:start="5037:13" pos:end="5037:26"><name pos:start="5037:13" pos:end="5037:13">s</name><operator pos:start="5037:14" pos:end="5037:15">-&gt;</operator><name pos:start="5037:16" pos:end="5037:19">base</name><operator pos:start="5037:20" pos:end="5037:20">.</operator><name pos:start="5037:21" pos:end="5037:26">is_jmp</name></name> <operator pos:start="5037:28" pos:end="5037:28">=</operator> <name pos:start="5037:30" pos:end="5037:43">DISAS_NORETURN</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5041:9" pos:end="5041:14">break;</break>

    <case pos:start="5043:5" pos:end="5043:14">case <expr pos:start="5043:10" pos:end="5043:13"><literal type="number" pos:start="5043:10" pos:end="5043:13">0x9b</literal></expr>:</case> <comment type="block" pos:start="5043:16" pos:end="5043:26">/* fwait */</comment>

        <if_stmt pos:start="5045:9" pos:end="5055:9"><if pos:start="5045:9" pos:end="5051:9">if <condition pos:start="5045:12" pos:end="5047:38">(<expr pos:start="5045:13" pos:end="5047:37"><operator pos:start="5045:13" pos:end="5045:13">(</operator><name pos:start="5045:14" pos:end="5045:21"><name pos:start="5045:14" pos:end="5045:14">s</name><operator pos:start="5045:15" pos:end="5045:16">-&gt;</operator><name pos:start="5045:17" pos:end="5045:21">flags</name></name> <operator pos:start="5045:23" pos:end="5045:23">&amp;</operator> <operator pos:start="5045:25" pos:end="5045:25">(</operator><name pos:start="5045:26" pos:end="5045:35">HF_MP_MASK</name> <operator pos:start="5045:37" pos:end="5045:37">|</operator> <name pos:start="5045:39" pos:end="5045:48">HF_TS_MASK</name><operator pos:start="5045:49" pos:end="5045:49">)</operator><operator pos:start="5045:50" pos:end="5045:50">)</operator> <operator pos:start="5045:52" pos:end="5045:53">==</operator>

            <operator pos:start="5047:13" pos:end="5047:13">(</operator><name pos:start="5047:14" pos:end="5047:23">HF_MP_MASK</name> <operator pos:start="5047:25" pos:end="5047:25">|</operator> <name pos:start="5047:27" pos:end="5047:36">HF_TS_MASK</name><operator pos:start="5047:37" pos:end="5047:37">)</operator></expr>)</condition> <block pos:start="5047:40" pos:end="5051:9">{<block_content pos:start="5049:13" pos:end="5049:65">

            <expr_stmt pos:start="5049:13" pos:end="5049:65"><expr pos:start="5049:13" pos:end="5049:64"><call pos:start="5049:13" pos:end="5049:64"><name pos:start="5049:13" pos:end="5049:25">gen_exception</name><argument_list pos:start="5049:26" pos:end="5049:64">(<argument pos:start="5049:27" pos:end="5049:27"><expr pos:start="5049:27" pos:end="5049:27"><name pos:start="5049:27" pos:end="5049:27">s</name></expr></argument>, <argument pos:start="5049:30" pos:end="5049:40"><expr pos:start="5049:30" pos:end="5049:40"><name pos:start="5049:30" pos:end="5049:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="5049:43" pos:end="5049:63"><expr pos:start="5049:43" pos:end="5049:63"><name pos:start="5049:43" pos:end="5049:50">pc_start</name> <operator pos:start="5049:52" pos:end="5049:52">-</operator> <name pos:start="5049:54" pos:end="5049:63"><name pos:start="5049:54" pos:end="5049:54">s</name><operator pos:start="5049:55" pos:end="5049:56">-&gt;</operator><name pos:start="5049:57" pos:end="5049:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5051:11" pos:end="5055:9">else <block pos:start="5051:16" pos:end="5055:9">{<block_content pos:start="5053:13" pos:end="5053:38">

            <expr_stmt pos:start="5053:13" pos:end="5053:38"><expr pos:start="5053:13" pos:end="5053:37"><call pos:start="5053:13" pos:end="5053:37"><name pos:start="5053:13" pos:end="5053:28">gen_helper_fwait</name><argument_list pos:start="5053:29" pos:end="5053:37">(<argument pos:start="5053:30" pos:end="5053:36"><expr pos:start="5053:30" pos:end="5053:36"><name pos:start="5053:30" pos:end="5053:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5057:9" pos:end="5057:14">break;</break>

    <case pos:start="5059:5" pos:end="5059:14">case <expr pos:start="5059:10" pos:end="5059:13"><literal type="number" pos:start="5059:10" pos:end="5059:13">0xcc</literal></expr>:</case> <comment type="block" pos:start="5059:16" pos:end="5059:25">/* int3 */</comment>

        <expr_stmt pos:start="5061:9" pos:end="5061:81"><expr pos:start="5061:9" pos:end="5061:80"><call pos:start="5061:9" pos:end="5061:80"><name pos:start="5061:9" pos:end="5061:21">gen_interrupt</name><argument_list pos:start="5061:22" pos:end="5061:80">(<argument pos:start="5061:23" pos:end="5061:23"><expr pos:start="5061:23" pos:end="5061:23"><name pos:start="5061:23" pos:end="5061:23">s</name></expr></argument>, <argument pos:start="5061:26" pos:end="5061:36"><expr pos:start="5061:26" pos:end="5061:36"><name pos:start="5061:26" pos:end="5061:36">EXCP03_INT3</name></expr></argument>, <argument pos:start="5061:39" pos:end="5061:59"><expr pos:start="5061:39" pos:end="5061:59"><name pos:start="5061:39" pos:end="5061:46">pc_start</name> <operator pos:start="5061:48" pos:end="5061:48">-</operator> <name pos:start="5061:50" pos:end="5061:59"><name pos:start="5061:50" pos:end="5061:50">s</name><operator pos:start="5061:51" pos:end="5061:52">-&gt;</operator><name pos:start="5061:53" pos:end="5061:59">cs_base</name></name></expr></argument>, <argument pos:start="5061:62" pos:end="5061:79"><expr pos:start="5061:62" pos:end="5061:79"><name pos:start="5061:62" pos:end="5061:66"><name pos:start="5061:62" pos:end="5061:62">s</name><operator pos:start="5061:63" pos:end="5061:64">-&gt;</operator><name pos:start="5061:65" pos:end="5061:66">pc</name></name> <operator pos:start="5061:68" pos:end="5061:68">-</operator> <name pos:start="5061:70" pos:end="5061:79"><name pos:start="5061:70" pos:end="5061:70">s</name><operator pos:start="5061:71" pos:end="5061:72">-&gt;</operator><name pos:start="5061:73" pos:end="5061:79">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5063:9" pos:end="5063:14">break;</break>

    <case pos:start="5065:5" pos:end="5065:14">case <expr pos:start="5065:10" pos:end="5065:13"><literal type="number" pos:start="5065:10" pos:end="5065:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="5065:16" pos:end="5065:26">/* int N */</comment>

        <expr_stmt pos:start="5067:9" pos:end="5067:36"><expr pos:start="5067:9" pos:end="5067:35"><name pos:start="5067:9" pos:end="5067:11">val</name> <operator pos:start="5067:13" pos:end="5067:13">=</operator> <call pos:start="5067:15" pos:end="5067:35"><name pos:start="5067:15" pos:end="5067:27">x86_ldub_code</name><argument_list pos:start="5067:28" pos:end="5067:35">(<argument pos:start="5067:29" pos:end="5067:31"><expr pos:start="5067:29" pos:end="5067:31"><name pos:start="5067:29" pos:end="5067:31">env</name></expr></argument>, <argument pos:start="5067:34" pos:end="5067:34"><expr pos:start="5067:34" pos:end="5067:34"><name pos:start="5067:34" pos:end="5067:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5069:9" pos:end="5077:9"><if pos:start="5069:9" pos:end="5073:9">if <condition pos:start="5069:12" pos:end="5069:36">(<expr pos:start="5069:13" pos:end="5069:35"><name pos:start="5069:13" pos:end="5069:19"><name pos:start="5069:13" pos:end="5069:13">s</name><operator pos:start="5069:14" pos:end="5069:15">-&gt;</operator><name pos:start="5069:16" pos:end="5069:19">vm86</name></name> <operator pos:start="5069:21" pos:end="5069:22">&amp;&amp;</operator> <name pos:start="5069:24" pos:end="5069:30"><name pos:start="5069:24" pos:end="5069:24">s</name><operator pos:start="5069:25" pos:end="5069:26">-&gt;</operator><name pos:start="5069:27" pos:end="5069:30">iopl</name></name> <operator pos:start="5069:32" pos:end="5069:33">!=</operator> <literal type="number" pos:start="5069:35" pos:end="5069:35">3</literal></expr>)</condition> <block pos:start="5069:38" pos:end="5073:9">{<block_content pos:start="5071:13" pos:end="5071:64">

            <expr_stmt pos:start="5071:13" pos:end="5071:64"><expr pos:start="5071:13" pos:end="5071:63"><call pos:start="5071:13" pos:end="5071:63"><name pos:start="5071:13" pos:end="5071:25">gen_exception</name><argument_list pos:start="5071:26" pos:end="5071:63">(<argument pos:start="5071:27" pos:end="5071:27"><expr pos:start="5071:27" pos:end="5071:27"><name pos:start="5071:27" pos:end="5071:27">s</name></expr></argument>, <argument pos:start="5071:30" pos:end="5071:39"><expr pos:start="5071:30" pos:end="5071:39"><name pos:start="5071:30" pos:end="5071:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5071:42" pos:end="5071:62"><expr pos:start="5071:42" pos:end="5071:62"><name pos:start="5071:42" pos:end="5071:49">pc_start</name> <operator pos:start="5071:51" pos:end="5071:51">-</operator> <name pos:start="5071:53" pos:end="5071:62"><name pos:start="5071:53" pos:end="5071:53">s</name><operator pos:start="5071:54" pos:end="5071:55">-&gt;</operator><name pos:start="5071:56" pos:end="5071:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5073:11" pos:end="5077:9">else <block pos:start="5073:16" pos:end="5077:9">{<block_content pos:start="5075:13" pos:end="5075:77">

            <expr_stmt pos:start="5075:13" pos:end="5075:77"><expr pos:start="5075:13" pos:end="5075:76"><call pos:start="5075:13" pos:end="5075:76"><name pos:start="5075:13" pos:end="5075:25">gen_interrupt</name><argument_list pos:start="5075:26" pos:end="5075:76">(<argument pos:start="5075:27" pos:end="5075:27"><expr pos:start="5075:27" pos:end="5075:27"><name pos:start="5075:27" pos:end="5075:27">s</name></expr></argument>, <argument pos:start="5075:30" pos:end="5075:32"><expr pos:start="5075:30" pos:end="5075:32"><name pos:start="5075:30" pos:end="5075:32">val</name></expr></argument>, <argument pos:start="5075:35" pos:end="5075:55"><expr pos:start="5075:35" pos:end="5075:55"><name pos:start="5075:35" pos:end="5075:42">pc_start</name> <operator pos:start="5075:44" pos:end="5075:44">-</operator> <name pos:start="5075:46" pos:end="5075:55"><name pos:start="5075:46" pos:end="5075:46">s</name><operator pos:start="5075:47" pos:end="5075:48">-&gt;</operator><name pos:start="5075:49" pos:end="5075:55">cs_base</name></name></expr></argument>, <argument pos:start="5075:58" pos:end="5075:75"><expr pos:start="5075:58" pos:end="5075:75"><name pos:start="5075:58" pos:end="5075:62"><name pos:start="5075:58" pos:end="5075:58">s</name><operator pos:start="5075:59" pos:end="5075:60">-&gt;</operator><name pos:start="5075:61" pos:end="5075:62">pc</name></name> <operator pos:start="5075:64" pos:end="5075:64">-</operator> <name pos:start="5075:66" pos:end="5075:75"><name pos:start="5075:66" pos:end="5075:66">s</name><operator pos:start="5075:67" pos:end="5075:68">-&gt;</operator><name pos:start="5075:69" pos:end="5075:75">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5079:9" pos:end="5079:14">break;</break>

    <case pos:start="5081:5" pos:end="5081:14">case <expr pos:start="5081:10" pos:end="5081:13"><literal type="number" pos:start="5081:10" pos:end="5081:13">0xce</literal></expr>:</case> <comment type="block" pos:start="5081:16" pos:end="5081:25">/* into */</comment>

        <if_stmt pos:start="5083:9" pos:end="5085:28"><if pos:start="5083:9" pos:end="5085:28">if <condition pos:start="5083:12" pos:end="5083:22">(<expr pos:start="5083:13" pos:end="5083:21"><call pos:start="5083:13" pos:end="5083:21"><name pos:start="5083:13" pos:end="5083:18">CODE64</name><argument_list pos:start="5083:19" pos:end="5083:21">(<argument pos:start="5083:20" pos:end="5083:20"><expr pos:start="5083:20" pos:end="5083:20"><name pos:start="5083:20" pos:end="5083:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5085:13" pos:end="5085:28"><block_content pos:start="5085:13" pos:end="5085:28">

            <goto pos:start="5085:13" pos:end="5085:28">goto <name pos:start="5085:18" pos:end="5085:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5087:9" pos:end="5087:28"><expr pos:start="5087:9" pos:end="5087:27"><call pos:start="5087:9" pos:end="5087:27"><name pos:start="5087:9" pos:end="5087:24">gen_update_cc_op</name><argument_list pos:start="5087:25" pos:end="5087:27">(<argument pos:start="5087:26" pos:end="5087:26"><expr pos:start="5087:26" pos:end="5087:26"><name pos:start="5087:26" pos:end="5087:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5089:9" pos:end="5089:42"><expr pos:start="5089:9" pos:end="5089:41"><call pos:start="5089:9" pos:end="5089:41"><name pos:start="5089:9" pos:end="5089:18">gen_jmp_im</name><argument_list pos:start="5089:19" pos:end="5089:41">(<argument pos:start="5089:20" pos:end="5089:40"><expr pos:start="5089:20" pos:end="5089:40"><name pos:start="5089:20" pos:end="5089:27">pc_start</name> <operator pos:start="5089:29" pos:end="5089:29">-</operator> <name pos:start="5089:31" pos:end="5089:40"><name pos:start="5089:31" pos:end="5089:31">s</name><operator pos:start="5089:32" pos:end="5089:33">-&gt;</operator><name pos:start="5089:34" pos:end="5089:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5091:9" pos:end="5091:66"><expr pos:start="5091:9" pos:end="5091:65"><call pos:start="5091:9" pos:end="5091:65"><name pos:start="5091:9" pos:end="5091:23">gen_helper_into</name><argument_list pos:start="5091:24" pos:end="5091:65">(<argument pos:start="5091:25" pos:end="5091:31"><expr pos:start="5091:25" pos:end="5091:31"><name pos:start="5091:25" pos:end="5091:31">cpu_env</name></expr></argument>, <argument pos:start="5091:34" pos:end="5091:64"><expr pos:start="5091:34" pos:end="5091:64"><call pos:start="5091:34" pos:end="5091:64"><name pos:start="5091:34" pos:end="5091:46">tcg_const_i32</name><argument_list pos:start="5091:47" pos:end="5091:64">(<argument pos:start="5091:48" pos:end="5091:63"><expr pos:start="5091:48" pos:end="5091:63"><name pos:start="5091:48" pos:end="5091:52"><name pos:start="5091:48" pos:end="5091:48">s</name><operator pos:start="5091:49" pos:end="5091:50">-&gt;</operator><name pos:start="5091:51" pos:end="5091:52">pc</name></name> <operator pos:start="5091:54" pos:end="5091:54">-</operator> <name pos:start="5091:56" pos:end="5091:63">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5093:9" pos:end="5096:0">break;</break>

<cpp:ifdef pos:start="5095:1" pos:end="5095:17">#<cpp:directive pos:start="5095:2" pos:end="5095:6">ifdef</cpp:directive> <name pos:start="5095:8" pos:end="5095:17">WANT_ICEBP</name></cpp:ifdef>

    <case pos:start="5097:5" pos:end="5097:14">case <expr pos:start="5097:10" pos:end="5097:13"><literal type="number" pos:start="5097:10" pos:end="5097:13">0xf1</literal></expr>:</case> <comment type="block" pos:start="5097:16" pos:end="5097:69">/* icebp (undocumented, exits to external debugger) */</comment>

        <expr_stmt pos:start="5099:9" pos:end="5102:0"><expr pos:start="5099:9" pos:end="5099:60"><call pos:start="5099:9" pos:end="5099:60"><name pos:start="5099:9" pos:end="5099:31">gen_svm_check_intercept</name><argument_list pos:start="5099:32" pos:end="5099:60">(<argument pos:start="5099:33" pos:end="5099:33"><expr pos:start="5099:33" pos:end="5099:33"><name pos:start="5099:33" pos:end="5099:33">s</name></expr></argument>, <argument pos:start="5099:36" pos:end="5099:43"><expr pos:start="5099:36" pos:end="5099:43"><name pos:start="5099:36" pos:end="5099:43">pc_start</name></expr></argument>, <argument pos:start="5099:46" pos:end="5099:59"><expr pos:start="5099:46" pos:end="5099:59"><name pos:start="5099:46" pos:end="5099:59">SVM_EXIT_ICEBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="5101:1" pos:end="5101:5">#<cpp:directive pos:start="5101:2" pos:end="5101:3">if</cpp:directive> <expr pos:start="5101:5" pos:end="5101:5"><literal type="number" pos:start="5101:5" pos:end="5101:5">1</literal></expr></cpp:if>

        <expr_stmt pos:start="5103:9" pos:end="5106:0"><expr pos:start="5103:9" pos:end="5103:43"><call pos:start="5103:9" pos:end="5103:43"><name pos:start="5103:9" pos:end="5103:17">gen_debug</name><argument_list pos:start="5103:18" pos:end="5103:43">(<argument pos:start="5103:19" pos:end="5103:19"><expr pos:start="5103:19" pos:end="5103:19"><name pos:start="5103:19" pos:end="5103:19">s</name></expr></argument>, <argument pos:start="5103:22" pos:end="5103:42"><expr pos:start="5103:22" pos:end="5103:42"><name pos:start="5103:22" pos:end="5103:29">pc_start</name> <operator pos:start="5103:31" pos:end="5103:31">-</operator> <name pos:start="5103:33" pos:end="5103:42"><name pos:start="5103:33" pos:end="5103:33">s</name><operator pos:start="5103:34" pos:end="5103:35">-&gt;</operator><name pos:start="5103:36" pos:end="5103:42">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="5105:1" pos:end="5105:5">#<cpp:directive pos:start="5105:2" pos:end="5105:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="5107:9" pos:end="5107:25">/* start debug */</comment>

        <expr_stmt pos:start="5109:9" pos:end="5109:44"><expr pos:start="5109:9" pos:end="5109:43"><call pos:start="5109:9" pos:end="5109:43"><name pos:start="5109:9" pos:end="5109:16">tb_flush</name><argument_list pos:start="5109:17" pos:end="5109:43">(<argument pos:start="5109:18" pos:end="5109:42"><expr pos:start="5109:18" pos:end="5109:42"><call pos:start="5109:18" pos:end="5109:42"><name pos:start="5109:18" pos:end="5109:20">CPU</name><argument_list pos:start="5109:21" pos:end="5109:42">(<argument pos:start="5109:22" pos:end="5109:41"><expr pos:start="5109:22" pos:end="5109:41"><call pos:start="5109:22" pos:end="5109:41"><name pos:start="5109:22" pos:end="5109:36">x86_env_get_cpu</name><argument_list pos:start="5109:37" pos:end="5109:41">(<argument pos:start="5109:38" pos:end="5109:40"><expr pos:start="5109:38" pos:end="5109:40"><name pos:start="5109:38" pos:end="5109:40">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5111:9" pos:end="5114:0"><expr pos:start="5111:9" pos:end="5111:53"><call pos:start="5111:9" pos:end="5111:53"><name pos:start="5111:9" pos:end="5111:20">qemu_set_log</name><argument_list pos:start="5111:21" pos:end="5111:53">(<argument pos:start="5111:22" pos:end="5111:52"><expr pos:start="5111:22" pos:end="5111:52"><name pos:start="5111:22" pos:end="5111:32">CPU_LOG_INT</name> <operator pos:start="5111:34" pos:end="5111:34">|</operator> <name pos:start="5111:36" pos:end="5111:52">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="5113:1" pos:end="5113:6">#<cpp:directive pos:start="5113:2" pos:end="5113:6">endif</cpp:directive></cpp:endif>

        <break pos:start="5115:9" pos:end="5118:0">break;</break>

<cpp:endif pos:start="5117:1" pos:end="5117:6">#<cpp:directive pos:start="5117:2" pos:end="5117:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5119:5" pos:end="5119:14">case <expr pos:start="5119:10" pos:end="5119:13"><literal type="number" pos:start="5119:10" pos:end="5119:13">0xfa</literal></expr>:</case> <comment type="block" pos:start="5119:16" pos:end="5119:24">/* cli */</comment>

        <if_stmt pos:start="5121:9" pos:end="5145:9"><if pos:start="5121:9" pos:end="5133:9">if <condition pos:start="5121:12" pos:end="5121:21">(<expr pos:start="5121:13" pos:end="5121:20"><operator pos:start="5121:13" pos:end="5121:13">!</operator><name pos:start="5121:14" pos:end="5121:20"><name pos:start="5121:14" pos:end="5121:14">s</name><operator pos:start="5121:15" pos:end="5121:16">-&gt;</operator><name pos:start="5121:17" pos:end="5121:20">vm86</name></name></expr>)</condition> <block pos:start="5121:23" pos:end="5133:9">{<block_content pos:start="5123:13" pos:end="5131:13">

            <if_stmt pos:start="5123:13" pos:end="5131:13"><if pos:start="5123:13" pos:end="5127:13">if <condition pos:start="5123:16" pos:end="5123:34">(<expr pos:start="5123:17" pos:end="5123:33"><name pos:start="5123:17" pos:end="5123:22"><name pos:start="5123:17" pos:end="5123:17">s</name><operator pos:start="5123:18" pos:end="5123:19">-&gt;</operator><name pos:start="5123:20" pos:end="5123:22">cpl</name></name> <operator pos:start="5123:24" pos:end="5123:25">&lt;=</operator> <name pos:start="5123:27" pos:end="5123:33"><name pos:start="5123:27" pos:end="5123:27">s</name><operator pos:start="5123:28" pos:end="5123:29">-&gt;</operator><name pos:start="5123:30" pos:end="5123:33">iopl</name></name></expr>)</condition> <block pos:start="5123:36" pos:end="5127:13">{<block_content pos:start="5125:17" pos:end="5125:40">

                <expr_stmt pos:start="5125:17" pos:end="5125:40"><expr pos:start="5125:17" pos:end="5125:39"><call pos:start="5125:17" pos:end="5125:39"><name pos:start="5125:17" pos:end="5125:30">gen_helper_cli</name><argument_list pos:start="5125:31" pos:end="5125:39">(<argument pos:start="5125:32" pos:end="5125:38"><expr pos:start="5125:32" pos:end="5125:38"><name pos:start="5125:32" pos:end="5125:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5127:15" pos:end="5131:13">else <block pos:start="5127:20" pos:end="5131:13">{<block_content pos:start="5129:17" pos:end="5129:68">

                <expr_stmt pos:start="5129:17" pos:end="5129:68"><expr pos:start="5129:17" pos:end="5129:67"><call pos:start="5129:17" pos:end="5129:67"><name pos:start="5129:17" pos:end="5129:29">gen_exception</name><argument_list pos:start="5129:30" pos:end="5129:67">(<argument pos:start="5129:31" pos:end="5129:31"><expr pos:start="5129:31" pos:end="5129:31"><name pos:start="5129:31" pos:end="5129:31">s</name></expr></argument>, <argument pos:start="5129:34" pos:end="5129:43"><expr pos:start="5129:34" pos:end="5129:43"><name pos:start="5129:34" pos:end="5129:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5129:46" pos:end="5129:66"><expr pos:start="5129:46" pos:end="5129:66"><name pos:start="5129:46" pos:end="5129:53">pc_start</name> <operator pos:start="5129:55" pos:end="5129:55">-</operator> <name pos:start="5129:57" pos:end="5129:66"><name pos:start="5129:57" pos:end="5129:57">s</name><operator pos:start="5129:58" pos:end="5129:59">-&gt;</operator><name pos:start="5129:60" pos:end="5129:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="5133:11" pos:end="5145:9">else <block pos:start="5133:16" pos:end="5145:9">{<block_content pos:start="5135:13" pos:end="5143:13">

            <if_stmt pos:start="5135:13" pos:end="5143:13"><if pos:start="5135:13" pos:end="5139:13">if <condition pos:start="5135:16" pos:end="5135:29">(<expr pos:start="5135:17" pos:end="5135:28"><name pos:start="5135:17" pos:end="5135:23"><name pos:start="5135:17" pos:end="5135:17">s</name><operator pos:start="5135:18" pos:end="5135:19">-&gt;</operator><name pos:start="5135:20" pos:end="5135:23">iopl</name></name> <operator pos:start="5135:25" pos:end="5135:26">==</operator> <literal type="number" pos:start="5135:28" pos:end="5135:28">3</literal></expr>)</condition> <block pos:start="5135:31" pos:end="5139:13">{<block_content pos:start="5137:17" pos:end="5137:40">

                <expr_stmt pos:start="5137:17" pos:end="5137:40"><expr pos:start="5137:17" pos:end="5137:39"><call pos:start="5137:17" pos:end="5137:39"><name pos:start="5137:17" pos:end="5137:30">gen_helper_cli</name><argument_list pos:start="5137:31" pos:end="5137:39">(<argument pos:start="5137:32" pos:end="5137:38"><expr pos:start="5137:32" pos:end="5137:38"><name pos:start="5137:32" pos:end="5137:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5139:15" pos:end="5143:13">else <block pos:start="5139:20" pos:end="5143:13">{<block_content pos:start="5141:17" pos:end="5141:68">

                <expr_stmt pos:start="5141:17" pos:end="5141:68"><expr pos:start="5141:17" pos:end="5141:67"><call pos:start="5141:17" pos:end="5141:67"><name pos:start="5141:17" pos:end="5141:29">gen_exception</name><argument_list pos:start="5141:30" pos:end="5141:67">(<argument pos:start="5141:31" pos:end="5141:31"><expr pos:start="5141:31" pos:end="5141:31"><name pos:start="5141:31" pos:end="5141:31">s</name></expr></argument>, <argument pos:start="5141:34" pos:end="5141:43"><expr pos:start="5141:34" pos:end="5141:43"><name pos:start="5141:34" pos:end="5141:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5141:46" pos:end="5141:66"><expr pos:start="5141:46" pos:end="5141:66"><name pos:start="5141:46" pos:end="5141:53">pc_start</name> <operator pos:start="5141:55" pos:end="5141:55">-</operator> <name pos:start="5141:57" pos:end="5141:66"><name pos:start="5141:57" pos:end="5141:57">s</name><operator pos:start="5141:58" pos:end="5141:59">-&gt;</operator><name pos:start="5141:60" pos:end="5141:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5147:9" pos:end="5147:14">break;</break>

    <case pos:start="5149:5" pos:end="5149:14">case <expr pos:start="5149:10" pos:end="5149:13"><literal type="number" pos:start="5149:10" pos:end="5149:13">0xfb</literal></expr>:</case> <comment type="block" pos:start="5149:16" pos:end="5149:24">/* sti */</comment>

        <if_stmt pos:start="5151:9" pos:end="5165:9"><if pos:start="5151:9" pos:end="5161:9">if <condition pos:start="5151:12" pos:end="5151:55">(<expr pos:start="5151:13" pos:end="5151:54"><ternary pos:start="5151:13" pos:end="5151:54"><condition pos:start="5151:13" pos:end="5151:21"><expr pos:start="5151:13" pos:end="5151:19"><name pos:start="5151:13" pos:end="5151:19"><name pos:start="5151:13" pos:end="5151:13">s</name><operator pos:start="5151:14" pos:end="5151:15">-&gt;</operator><name pos:start="5151:16" pos:end="5151:19">vm86</name></name></expr> ?</condition><then pos:start="5151:23" pos:end="5151:34"> <expr pos:start="5151:23" pos:end="5151:34"><name pos:start="5151:23" pos:end="5151:29"><name pos:start="5151:23" pos:end="5151:23">s</name><operator pos:start="5151:24" pos:end="5151:25">-&gt;</operator><name pos:start="5151:26" pos:end="5151:29">iopl</name></name> <operator pos:start="5151:31" pos:end="5151:32">==</operator> <literal type="number" pos:start="5151:34" pos:end="5151:34">3</literal></expr> </then><else pos:start="5151:36" pos:end="5151:54">: <expr pos:start="5151:38" pos:end="5151:54"><name pos:start="5151:38" pos:end="5151:43"><name pos:start="5151:38" pos:end="5151:38">s</name><operator pos:start="5151:39" pos:end="5151:40">-&gt;</operator><name pos:start="5151:41" pos:end="5151:43">cpl</name></name> <operator pos:start="5151:45" pos:end="5151:46">&lt;=</operator> <name pos:start="5151:48" pos:end="5151:54"><name pos:start="5151:48" pos:end="5151:48">s</name><operator pos:start="5151:49" pos:end="5151:50">-&gt;</operator><name pos:start="5151:51" pos:end="5151:54">iopl</name></name></expr></else></ternary></expr>)</condition> <block pos:start="5151:57" pos:end="5161:9">{<block_content pos:start="5153:13" pos:end="5159:41">

            <expr_stmt pos:start="5153:13" pos:end="5153:36"><expr pos:start="5153:13" pos:end="5153:35"><call pos:start="5153:13" pos:end="5153:35"><name pos:start="5153:13" pos:end="5153:26">gen_helper_sti</name><argument_list pos:start="5153:27" pos:end="5153:35">(<argument pos:start="5153:28" pos:end="5153:34"><expr pos:start="5153:28" pos:end="5153:34"><name pos:start="5153:28" pos:end="5153:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="5155:13" pos:end="5155:73">/* interruptions are enabled only the first insn after sti */</comment>

            <expr_stmt pos:start="5157:13" pos:end="5157:43"><expr pos:start="5157:13" pos:end="5157:42"><call pos:start="5157:13" pos:end="5157:42"><name pos:start="5157:13" pos:end="5157:22">gen_jmp_im</name><argument_list pos:start="5157:23" pos:end="5157:42">(<argument pos:start="5157:24" pos:end="5157:41"><expr pos:start="5157:24" pos:end="5157:41"><name pos:start="5157:24" pos:end="5157:28"><name pos:start="5157:24" pos:end="5157:24">s</name><operator pos:start="5157:25" pos:end="5157:26">-&gt;</operator><name pos:start="5157:27" pos:end="5157:28">pc</name></name> <operator pos:start="5157:30" pos:end="5157:30">-</operator> <name pos:start="5157:32" pos:end="5157:41"><name pos:start="5157:32" pos:end="5157:32">s</name><operator pos:start="5157:33" pos:end="5157:34">-&gt;</operator><name pos:start="5157:35" pos:end="5157:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5159:13" pos:end="5159:41"><expr pos:start="5159:13" pos:end="5159:40"><call pos:start="5159:13" pos:end="5159:40"><name pos:start="5159:13" pos:end="5159:31">gen_eob_inhibit_irq</name><argument_list pos:start="5159:32" pos:end="5159:40">(<argument pos:start="5159:33" pos:end="5159:33"><expr pos:start="5159:33" pos:end="5159:33"><name pos:start="5159:33" pos:end="5159:33">s</name></expr></argument>, <argument pos:start="5159:36" pos:end="5159:39"><expr pos:start="5159:36" pos:end="5159:39"><name pos:start="5159:36" pos:end="5159:39">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5161:11" pos:end="5165:9">else <block pos:start="5161:16" pos:end="5165:9">{<block_content pos:start="5163:13" pos:end="5163:64">

            <expr_stmt pos:start="5163:13" pos:end="5163:64"><expr pos:start="5163:13" pos:end="5163:63"><call pos:start="5163:13" pos:end="5163:63"><name pos:start="5163:13" pos:end="5163:25">gen_exception</name><argument_list pos:start="5163:26" pos:end="5163:63">(<argument pos:start="5163:27" pos:end="5163:27"><expr pos:start="5163:27" pos:end="5163:27"><name pos:start="5163:27" pos:end="5163:27">s</name></expr></argument>, <argument pos:start="5163:30" pos:end="5163:39"><expr pos:start="5163:30" pos:end="5163:39"><name pos:start="5163:30" pos:end="5163:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5163:42" pos:end="5163:62"><expr pos:start="5163:42" pos:end="5163:62"><name pos:start="5163:42" pos:end="5163:49">pc_start</name> <operator pos:start="5163:51" pos:end="5163:51">-</operator> <name pos:start="5163:53" pos:end="5163:62"><name pos:start="5163:53" pos:end="5163:53">s</name><operator pos:start="5163:54" pos:end="5163:55">-&gt;</operator><name pos:start="5163:56" pos:end="5163:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5167:9" pos:end="5167:14">break;</break>

    <case pos:start="5169:5" pos:end="5169:14">case <expr pos:start="5169:10" pos:end="5169:13"><literal type="number" pos:start="5169:10" pos:end="5169:13">0x62</literal></expr>:</case> <comment type="block" pos:start="5169:16" pos:end="5169:26">/* bound */</comment>

        <if_stmt pos:start="5171:9" pos:end="5173:28"><if pos:start="5171:9" pos:end="5173:28">if <condition pos:start="5171:12" pos:end="5171:22">(<expr pos:start="5171:13" pos:end="5171:21"><call pos:start="5171:13" pos:end="5171:21"><name pos:start="5171:13" pos:end="5171:18">CODE64</name><argument_list pos:start="5171:19" pos:end="5171:21">(<argument pos:start="5171:20" pos:end="5171:20"><expr pos:start="5171:20" pos:end="5171:20"><name pos:start="5171:20" pos:end="5171:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5173:13" pos:end="5173:28"><block_content pos:start="5173:13" pos:end="5173:28">

            <goto pos:start="5173:13" pos:end="5173:28">goto <name pos:start="5173:18" pos:end="5173:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5175:9" pos:end="5175:19"><expr pos:start="5175:9" pos:end="5175:18"><name pos:start="5175:9" pos:end="5175:10">ot</name> <operator pos:start="5175:12" pos:end="5175:12">=</operator> <name pos:start="5175:14" pos:end="5175:18">dflag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="5177:9" pos:end="5177:38"><expr pos:start="5177:9" pos:end="5177:37"><name pos:start="5177:9" pos:end="5177:13">modrm</name> <operator pos:start="5177:15" pos:end="5177:15">=</operator> <call pos:start="5177:17" pos:end="5177:37"><name pos:start="5177:17" pos:end="5177:29">x86_ldub_code</name><argument_list pos:start="5177:30" pos:end="5177:37">(<argument pos:start="5177:31" pos:end="5177:33"><expr pos:start="5177:31" pos:end="5177:33"><name pos:start="5177:31" pos:end="5177:33">env</name></expr></argument>, <argument pos:start="5177:36" pos:end="5177:36"><expr pos:start="5177:36" pos:end="5177:36"><name pos:start="5177:36" pos:end="5177:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5179:9" pos:end="5179:31"><expr pos:start="5179:9" pos:end="5179:30"><name pos:start="5179:9" pos:end="5179:11">reg</name> <operator pos:start="5179:13" pos:end="5179:13">=</operator> <operator pos:start="5179:15" pos:end="5179:15">(</operator><name pos:start="5179:16" pos:end="5179:20">modrm</name> <operator pos:start="5179:22" pos:end="5179:23">&gt;&gt;</operator> <literal type="number" pos:start="5179:25" pos:end="5179:25">3</literal><operator pos:start="5179:26" pos:end="5179:26">)</operator> <operator pos:start="5179:28" pos:end="5179:28">&amp;</operator> <literal type="number" pos:start="5179:30" pos:end="5179:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5181:9" pos:end="5181:31"><expr pos:start="5181:9" pos:end="5181:30"><name pos:start="5181:9" pos:end="5181:11">mod</name> <operator pos:start="5181:13" pos:end="5181:13">=</operator> <operator pos:start="5181:15" pos:end="5181:15">(</operator><name pos:start="5181:16" pos:end="5181:20">modrm</name> <operator pos:start="5181:22" pos:end="5181:23">&gt;&gt;</operator> <literal type="number" pos:start="5181:25" pos:end="5181:25">6</literal><operator pos:start="5181:26" pos:end="5181:26">)</operator> <operator pos:start="5181:28" pos:end="5181:28">&amp;</operator> <literal type="number" pos:start="5181:30" pos:end="5181:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="5183:9" pos:end="5185:28"><if pos:start="5183:9" pos:end="5185:28">if <condition pos:start="5183:12" pos:end="5183:21">(<expr pos:start="5183:13" pos:end="5183:20"><name pos:start="5183:13" pos:end="5183:15">mod</name> <operator pos:start="5183:17" pos:end="5183:18">==</operator> <literal type="number" pos:start="5183:20" pos:end="5183:20">3</literal></expr>)</condition><block type="pseudo" pos:start="5185:13" pos:end="5185:28"><block_content pos:start="5185:13" pos:end="5185:28">

            <goto pos:start="5185:13" pos:end="5185:28">goto <name pos:start="5185:18" pos:end="5185:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5187:9" pos:end="5187:42"><expr pos:start="5187:9" pos:end="5187:41"><call pos:start="5187:9" pos:end="5187:41"><name pos:start="5187:9" pos:end="5187:24">gen_op_mov_v_reg</name><argument_list pos:start="5187:25" pos:end="5187:41">(<argument pos:start="5187:26" pos:end="5187:27"><expr pos:start="5187:26" pos:end="5187:27"><name pos:start="5187:26" pos:end="5187:27">ot</name></expr></argument>, <argument pos:start="5187:30" pos:end="5187:35"><expr pos:start="5187:30" pos:end="5187:35"><name pos:start="5187:30" pos:end="5187:35">cpu_T0</name></expr></argument>, <argument pos:start="5187:38" pos:end="5187:40"><expr pos:start="5187:38" pos:end="5187:40"><name pos:start="5187:38" pos:end="5187:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5189:9" pos:end="5189:37"><expr pos:start="5189:9" pos:end="5189:36"><call pos:start="5189:9" pos:end="5189:36"><name pos:start="5189:9" pos:end="5189:21">gen_lea_modrm</name><argument_list pos:start="5189:22" pos:end="5189:36">(<argument pos:start="5189:23" pos:end="5189:25"><expr pos:start="5189:23" pos:end="5189:25"><name pos:start="5189:23" pos:end="5189:25">env</name></expr></argument>, <argument pos:start="5189:28" pos:end="5189:28"><expr pos:start="5189:28" pos:end="5189:28"><name pos:start="5189:28" pos:end="5189:28">s</name></expr></argument>, <argument pos:start="5189:31" pos:end="5189:35"><expr pos:start="5189:31" pos:end="5189:35"><name pos:start="5189:31" pos:end="5189:35">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5191:9" pos:end="5191:51"><expr pos:start="5191:9" pos:end="5191:50"><call pos:start="5191:9" pos:end="5191:50"><name pos:start="5191:9" pos:end="5191:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5191:29" pos:end="5191:50">(<argument pos:start="5191:30" pos:end="5191:41"><expr pos:start="5191:30" pos:end="5191:41"><name pos:start="5191:30" pos:end="5191:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5191:44" pos:end="5191:49"><expr pos:start="5191:44" pos:end="5191:49"><name pos:start="5191:44" pos:end="5191:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5193:9" pos:end="5201:9"><if pos:start="5193:9" pos:end="5197:9">if <condition pos:start="5193:12" pos:end="5193:24">(<expr pos:start="5193:13" pos:end="5193:23"><name pos:start="5193:13" pos:end="5193:14">ot</name> <operator pos:start="5193:16" pos:end="5193:17">==</operator> <name pos:start="5193:19" pos:end="5193:23">MO_16</name></expr>)</condition> <block pos:start="5193:26" pos:end="5197:9">{<block_content pos:start="5195:13" pos:end="5195:61">

            <expr_stmt pos:start="5195:13" pos:end="5195:61"><expr pos:start="5195:13" pos:end="5195:60"><call pos:start="5195:13" pos:end="5195:60"><name pos:start="5195:13" pos:end="5195:29">gen_helper_boundw</name><argument_list pos:start="5195:30" pos:end="5195:60">(<argument pos:start="5195:31" pos:end="5195:37"><expr pos:start="5195:31" pos:end="5195:37"><name pos:start="5195:31" pos:end="5195:37">cpu_env</name></expr></argument>, <argument pos:start="5195:40" pos:end="5195:45"><expr pos:start="5195:40" pos:end="5195:45"><name pos:start="5195:40" pos:end="5195:45">cpu_A0</name></expr></argument>, <argument pos:start="5195:48" pos:end="5195:59"><expr pos:start="5195:48" pos:end="5195:59"><name pos:start="5195:48" pos:end="5195:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5197:11" pos:end="5201:9">else <block pos:start="5197:16" pos:end="5201:9">{<block_content pos:start="5199:13" pos:end="5199:61">

            <expr_stmt pos:start="5199:13" pos:end="5199:61"><expr pos:start="5199:13" pos:end="5199:60"><call pos:start="5199:13" pos:end="5199:60"><name pos:start="5199:13" pos:end="5199:29">gen_helper_boundl</name><argument_list pos:start="5199:30" pos:end="5199:60">(<argument pos:start="5199:31" pos:end="5199:37"><expr pos:start="5199:31" pos:end="5199:37"><name pos:start="5199:31" pos:end="5199:37">cpu_env</name></expr></argument>, <argument pos:start="5199:40" pos:end="5199:45"><expr pos:start="5199:40" pos:end="5199:45"><name pos:start="5199:40" pos:end="5199:45">cpu_A0</name></expr></argument>, <argument pos:start="5199:48" pos:end="5199:59"><expr pos:start="5199:48" pos:end="5199:59"><name pos:start="5199:48" pos:end="5199:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5203:9" pos:end="5203:14">break;</break>

    <case pos:start="5205:5" pos:end="5205:25">case <expr pos:start="5205:10" pos:end="5205:24"><literal type="number" pos:start="5205:10" pos:end="5205:14">0x1c8</literal> <operator pos:start="5205:16" pos:end="5205:18">...</operator> <literal type="number" pos:start="5205:20" pos:end="5205:24">0x1cf</literal></expr>:</case> <comment type="block" pos:start="5205:27" pos:end="5205:41">/* bswap reg */</comment>

        <expr_stmt pos:start="5207:9" pos:end="5210:0"><expr pos:start="5207:9" pos:end="5207:32"><name pos:start="5207:9" pos:end="5207:11">reg</name> <operator pos:start="5207:13" pos:end="5207:13">=</operator> <operator pos:start="5207:15" pos:end="5207:15">(</operator><name pos:start="5207:16" pos:end="5207:16">b</name> <operator pos:start="5207:18" pos:end="5207:18">&amp;</operator> <literal type="number" pos:start="5207:20" pos:end="5207:20">7</literal><operator pos:start="5207:21" pos:end="5207:21">)</operator> <operator pos:start="5207:23" pos:end="5207:23">|</operator> <call pos:start="5207:25" pos:end="5207:32"><name pos:start="5207:25" pos:end="5207:29">REX_B</name><argument_list pos:start="5207:30" pos:end="5207:32">(<argument pos:start="5207:31" pos:end="5207:31"><expr pos:start="5207:31" pos:end="5207:31"><name pos:start="5207:31" pos:end="5207:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="5209:1" pos:end="5209:20">#<cpp:directive pos:start="5209:2" pos:end="5209:6">ifdef</cpp:directive> <name pos:start="5209:8" pos:end="5209:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="5211:9" pos:end="5233:9"><if pos:start="5211:9" pos:end="5219:9">if <condition pos:start="5211:12" pos:end="5211:27">(<expr pos:start="5211:13" pos:end="5211:26"><name pos:start="5211:13" pos:end="5211:17">dflag</name> <operator pos:start="5211:19" pos:end="5211:20">==</operator> <name pos:start="5211:22" pos:end="5211:26">MO_64</name></expr>)</condition> <block pos:start="5211:29" pos:end="5219:9">{<block_content pos:start="5213:13" pos:end="5217:49">

            <expr_stmt pos:start="5213:13" pos:end="5213:49"><expr pos:start="5213:13" pos:end="5213:48"><call pos:start="5213:13" pos:end="5213:48"><name pos:start="5213:13" pos:end="5213:28">gen_op_mov_v_reg</name><argument_list pos:start="5213:29" pos:end="5213:48">(<argument pos:start="5213:30" pos:end="5213:34"><expr pos:start="5213:30" pos:end="5213:34"><name pos:start="5213:30" pos:end="5213:34">MO_64</name></expr></argument>, <argument pos:start="5213:37" pos:end="5213:42"><expr pos:start="5213:37" pos:end="5213:42"><name pos:start="5213:37" pos:end="5213:42">cpu_T0</name></expr></argument>, <argument pos:start="5213:45" pos:end="5213:47"><expr pos:start="5213:45" pos:end="5213:47"><name pos:start="5213:45" pos:end="5213:47">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5215:13" pos:end="5215:48"><expr pos:start="5215:13" pos:end="5215:47"><call pos:start="5215:13" pos:end="5215:47"><name pos:start="5215:13" pos:end="5215:31">tcg_gen_bswap64_i64</name><argument_list pos:start="5215:32" pos:end="5215:47">(<argument pos:start="5215:33" pos:end="5215:38"><expr pos:start="5215:33" pos:end="5215:38"><name pos:start="5215:33" pos:end="5215:38">cpu_T0</name></expr></argument>, <argument pos:start="5215:41" pos:end="5215:46"><expr pos:start="5215:41" pos:end="5215:46"><name pos:start="5215:41" pos:end="5215:46">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5217:13" pos:end="5217:49"><expr pos:start="5217:13" pos:end="5217:48"><call pos:start="5217:13" pos:end="5217:48"><name pos:start="5217:13" pos:end="5217:28">gen_op_mov_reg_v</name><argument_list pos:start="5217:29" pos:end="5217:48">(<argument pos:start="5217:30" pos:end="5217:34"><expr pos:start="5217:30" pos:end="5217:34"><name pos:start="5217:30" pos:end="5217:34">MO_64</name></expr></argument>, <argument pos:start="5217:37" pos:end="5217:39"><expr pos:start="5217:37" pos:end="5217:39"><name pos:start="5217:37" pos:end="5217:39">reg</name></expr></argument>, <argument pos:start="5217:42" pos:end="5217:47"><expr pos:start="5217:42" pos:end="5217:47"><name pos:start="5217:42" pos:end="5217:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5219:11" pos:end="5233:9">else

<cpp:endif pos:start="5221:1" pos:end="5221:6">#<cpp:directive pos:start="5221:2" pos:end="5221:6">endif</cpp:directive></cpp:endif>

        <block pos:start="5223:9" pos:end="5233:9">{<block_content pos:start="5225:13" pos:end="5231:49">

            <expr_stmt pos:start="5225:13" pos:end="5225:49"><expr pos:start="5225:13" pos:end="5225:48"><call pos:start="5225:13" pos:end="5225:48"><name pos:start="5225:13" pos:end="5225:28">gen_op_mov_v_reg</name><argument_list pos:start="5225:29" pos:end="5225:48">(<argument pos:start="5225:30" pos:end="5225:34"><expr pos:start="5225:30" pos:end="5225:34"><name pos:start="5225:30" pos:end="5225:34">MO_32</name></expr></argument>, <argument pos:start="5225:37" pos:end="5225:42"><expr pos:start="5225:37" pos:end="5225:42"><name pos:start="5225:37" pos:end="5225:42">cpu_T0</name></expr></argument>, <argument pos:start="5225:45" pos:end="5225:47"><expr pos:start="5225:45" pos:end="5225:47"><name pos:start="5225:45" pos:end="5225:47">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5227:13" pos:end="5227:46"><expr pos:start="5227:13" pos:end="5227:45"><call pos:start="5227:13" pos:end="5227:45"><name pos:start="5227:13" pos:end="5227:29">tcg_gen_ext32u_tl</name><argument_list pos:start="5227:30" pos:end="5227:45">(<argument pos:start="5227:31" pos:end="5227:36"><expr pos:start="5227:31" pos:end="5227:36"><name pos:start="5227:31" pos:end="5227:36">cpu_T0</name></expr></argument>, <argument pos:start="5227:39" pos:end="5227:44"><expr pos:start="5227:39" pos:end="5227:44"><name pos:start="5227:39" pos:end="5227:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5229:13" pos:end="5229:47"><expr pos:start="5229:13" pos:end="5229:46"><call pos:start="5229:13" pos:end="5229:46"><name pos:start="5229:13" pos:end="5229:30">tcg_gen_bswap32_tl</name><argument_list pos:start="5229:31" pos:end="5229:46">(<argument pos:start="5229:32" pos:end="5229:37"><expr pos:start="5229:32" pos:end="5229:37"><name pos:start="5229:32" pos:end="5229:37">cpu_T0</name></expr></argument>, <argument pos:start="5229:40" pos:end="5229:45"><expr pos:start="5229:40" pos:end="5229:45"><name pos:start="5229:40" pos:end="5229:45">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5231:13" pos:end="5231:49"><expr pos:start="5231:13" pos:end="5231:48"><call pos:start="5231:13" pos:end="5231:48"><name pos:start="5231:13" pos:end="5231:28">gen_op_mov_reg_v</name><argument_list pos:start="5231:29" pos:end="5231:48">(<argument pos:start="5231:30" pos:end="5231:34"><expr pos:start="5231:30" pos:end="5231:34"><name pos:start="5231:30" pos:end="5231:34">MO_32</name></expr></argument>, <argument pos:start="5231:37" pos:end="5231:39"><expr pos:start="5231:37" pos:end="5231:39"><name pos:start="5231:37" pos:end="5231:39">reg</name></expr></argument>, <argument pos:start="5231:42" pos:end="5231:47"><expr pos:start="5231:42" pos:end="5231:47"><name pos:start="5231:42" pos:end="5231:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5235:9" pos:end="5235:14">break;</break>

    <case pos:start="5237:5" pos:end="5237:14">case <expr pos:start="5237:10" pos:end="5237:13"><literal type="number" pos:start="5237:10" pos:end="5237:13">0xd6</literal></expr>:</case> <comment type="block" pos:start="5237:16" pos:end="5237:25">/* salc */</comment>

        <if_stmt pos:start="5239:9" pos:end="5241:28"><if pos:start="5239:9" pos:end="5241:28">if <condition pos:start="5239:12" pos:end="5239:22">(<expr pos:start="5239:13" pos:end="5239:21"><call pos:start="5239:13" pos:end="5239:21"><name pos:start="5239:13" pos:end="5239:18">CODE64</name><argument_list pos:start="5239:19" pos:end="5239:21">(<argument pos:start="5239:20" pos:end="5239:20"><expr pos:start="5239:20" pos:end="5239:20"><name pos:start="5239:20" pos:end="5239:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5241:13" pos:end="5241:28"><block_content pos:start="5241:13" pos:end="5241:28">

            <goto pos:start="5241:13" pos:end="5241:28">goto <name pos:start="5241:18" pos:end="5241:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5243:9" pos:end="5243:40"><expr pos:start="5243:9" pos:end="5243:39"><call pos:start="5243:9" pos:end="5243:39"><name pos:start="5243:9" pos:end="5243:28">gen_compute_eflags_c</name><argument_list pos:start="5243:29" pos:end="5243:39">(<argument pos:start="5243:30" pos:end="5243:30"><expr pos:start="5243:30" pos:end="5243:30"><name pos:start="5243:30" pos:end="5243:30">s</name></expr></argument>, <argument pos:start="5243:33" pos:end="5243:38"><expr pos:start="5243:33" pos:end="5243:38"><name pos:start="5243:33" pos:end="5243:38">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5245:9" pos:end="5245:39"><expr pos:start="5245:9" pos:end="5245:38"><call pos:start="5245:9" pos:end="5245:38"><name pos:start="5245:9" pos:end="5245:22">tcg_gen_neg_tl</name><argument_list pos:start="5245:23" pos:end="5245:38">(<argument pos:start="5245:24" pos:end="5245:29"><expr pos:start="5245:24" pos:end="5245:29"><name pos:start="5245:24" pos:end="5245:29">cpu_T0</name></expr></argument>, <argument pos:start="5245:32" pos:end="5245:37"><expr pos:start="5245:32" pos:end="5245:37"><name pos:start="5245:32" pos:end="5245:37">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5247:9" pos:end="5247:46"><expr pos:start="5247:9" pos:end="5247:45"><call pos:start="5247:9" pos:end="5247:45"><name pos:start="5247:9" pos:end="5247:24">gen_op_mov_reg_v</name><argument_list pos:start="5247:25" pos:end="5247:45">(<argument pos:start="5247:26" pos:end="5247:29"><expr pos:start="5247:26" pos:end="5247:29"><name pos:start="5247:26" pos:end="5247:29">MO_8</name></expr></argument>, <argument pos:start="5247:32" pos:end="5247:36"><expr pos:start="5247:32" pos:end="5247:36"><name pos:start="5247:32" pos:end="5247:36">R_EAX</name></expr></argument>, <argument pos:start="5247:39" pos:end="5247:44"><expr pos:start="5247:39" pos:end="5247:44"><name pos:start="5247:39" pos:end="5247:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5249:9" pos:end="5249:14">break;</break>

    <case pos:start="5251:5" pos:end="5251:14">case <expr pos:start="5251:10" pos:end="5251:13"><literal type="number" pos:start="5251:10" pos:end="5251:13">0xe0</literal></expr>:</case> <comment type="block" pos:start="5251:16" pos:end="5251:27">/* loopnz */</comment>

    <case pos:start="5253:5" pos:end="5253:14">case <expr pos:start="5253:10" pos:end="5253:13"><literal type="number" pos:start="5253:10" pos:end="5253:13">0xe1</literal></expr>:</case> <comment type="block" pos:start="5253:16" pos:end="5253:26">/* loopz */</comment>

    <case pos:start="5255:5" pos:end="5255:14">case <expr pos:start="5255:10" pos:end="5255:13"><literal type="number" pos:start="5255:10" pos:end="5255:13">0xe2</literal></expr>:</case> <comment type="block" pos:start="5255:16" pos:end="5255:25">/* loop */</comment>

    <case pos:start="5257:5" pos:end="5257:14">case <expr pos:start="5257:10" pos:end="5257:13"><literal type="number" pos:start="5257:10" pos:end="5257:13">0xe3</literal></expr>:</case> <comment type="block" pos:start="5257:16" pos:end="5257:26">/* jecxz */</comment>

        <block pos:start="5259:9" pos:end="5337:9">{<block_content pos:start="5261:13" pos:end="5335:23">

            <decl_stmt pos:start="5261:13" pos:end="5261:35"><decl pos:start="5261:13" pos:end="5261:24"><type pos:start="5261:13" pos:end="5261:22"><name pos:start="5261:13" pos:end="5261:20">TCGLabel</name> <modifier pos:start="5261:22" pos:end="5261:22">*</modifier></type><name pos:start="5261:23" pos:end="5261:24">l1</name></decl>, <decl pos:start="5261:27" pos:end="5261:29"><type ref="prev" pos:start="5261:13" pos:end="5261:22"><modifier pos:start="5261:27" pos:end="5261:27">*</modifier></type><name pos:start="5261:28" pos:end="5261:29">l2</name></decl>, <decl pos:start="5261:32" pos:end="5261:34"><type ref="prev" pos:start="5261:13" pos:end="5261:22"><modifier pos:start="5261:32" pos:end="5261:32">*</modifier></type><name pos:start="5261:33" pos:end="5261:34">l3</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5265:13" pos:end="5265:50"><expr pos:start="5265:13" pos:end="5265:49"><name pos:start="5265:13" pos:end="5265:16">tval</name> <operator pos:start="5265:18" pos:end="5265:18">=</operator> <operator pos:start="5265:20" pos:end="5265:20">(</operator><name pos:start="5265:21" pos:end="5265:26">int8_t</name><operator pos:start="5265:27" pos:end="5265:27">)</operator><call pos:start="5265:28" pos:end="5265:49"><name pos:start="5265:28" pos:end="5265:35">insn_get</name><argument_list pos:start="5265:36" pos:end="5265:49">(<argument pos:start="5265:37" pos:end="5265:39"><expr pos:start="5265:37" pos:end="5265:39"><name pos:start="5265:37" pos:end="5265:39">env</name></expr></argument>, <argument pos:start="5265:42" pos:end="5265:42"><expr pos:start="5265:42" pos:end="5265:42"><name pos:start="5265:42" pos:end="5265:42">s</name></expr></argument>, <argument pos:start="5265:45" pos:end="5265:48"><expr pos:start="5265:45" pos:end="5265:48"><name pos:start="5265:45" pos:end="5265:48">MO_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5267:13" pos:end="5267:42"><expr pos:start="5267:13" pos:end="5267:41"><name pos:start="5267:13" pos:end="5267:20">next_eip</name> <operator pos:start="5267:22" pos:end="5267:22">=</operator> <name pos:start="5267:24" pos:end="5267:28"><name pos:start="5267:24" pos:end="5267:24">s</name><operator pos:start="5267:25" pos:end="5267:26">-&gt;</operator><name pos:start="5267:27" pos:end="5267:28">pc</name></name> <operator pos:start="5267:30" pos:end="5267:30">-</operator> <name pos:start="5267:32" pos:end="5267:41"><name pos:start="5267:32" pos:end="5267:32">s</name><operator pos:start="5267:33" pos:end="5267:34">-&gt;</operator><name pos:start="5267:35" pos:end="5267:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="5269:13" pos:end="5269:29"><expr pos:start="5269:13" pos:end="5269:28"><name pos:start="5269:13" pos:end="5269:16">tval</name> <operator pos:start="5269:18" pos:end="5269:19">+=</operator> <name pos:start="5269:21" pos:end="5269:28">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="5271:13" pos:end="5275:13"><if pos:start="5271:13" pos:end="5275:13">if <condition pos:start="5271:16" pos:end="5271:31">(<expr pos:start="5271:17" pos:end="5271:30"><name pos:start="5271:17" pos:end="5271:21">dflag</name> <operator pos:start="5271:23" pos:end="5271:24">==</operator> <name pos:start="5271:26" pos:end="5271:30">MO_16</name></expr>)</condition> <block pos:start="5271:33" pos:end="5275:13">{<block_content pos:start="5273:17" pos:end="5273:31">

                <expr_stmt pos:start="5273:17" pos:end="5273:31"><expr pos:start="5273:17" pos:end="5273:30"><name pos:start="5273:17" pos:end="5273:20">tval</name> <operator pos:start="5273:22" pos:end="5273:23">&amp;=</operator> <literal type="number" pos:start="5273:25" pos:end="5273:30">0xffff</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="5279:13" pos:end="5279:33"><expr pos:start="5279:13" pos:end="5279:32"><name pos:start="5279:13" pos:end="5279:14">l1</name> <operator pos:start="5279:16" pos:end="5279:16">=</operator> <call pos:start="5279:18" pos:end="5279:32"><name pos:start="5279:18" pos:end="5279:30">gen_new_label</name><argument_list pos:start="5279:31" pos:end="5279:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5281:13" pos:end="5281:33"><expr pos:start="5281:13" pos:end="5281:32"><name pos:start="5281:13" pos:end="5281:14">l2</name> <operator pos:start="5281:16" pos:end="5281:16">=</operator> <call pos:start="5281:18" pos:end="5281:32"><name pos:start="5281:18" pos:end="5281:30">gen_new_label</name><argument_list pos:start="5281:31" pos:end="5281:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5283:13" pos:end="5283:33"><expr pos:start="5283:13" pos:end="5283:32"><name pos:start="5283:13" pos:end="5283:14">l3</name> <operator pos:start="5283:16" pos:end="5283:16">=</operator> <call pos:start="5283:18" pos:end="5283:32"><name pos:start="5283:18" pos:end="5283:30">gen_new_label</name><argument_list pos:start="5283:31" pos:end="5283:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5285:13" pos:end="5285:19"><expr pos:start="5285:13" pos:end="5285:18"><name pos:start="5285:13" pos:end="5285:13">b</name> <operator pos:start="5285:15" pos:end="5285:16">&amp;=</operator> <literal type="number" pos:start="5285:18" pos:end="5285:18">3</literal></expr>;</expr_stmt>

            <switch pos:start="5287:13" pos:end="5317:13">switch<condition pos:start="5287:19" pos:end="5287:21">(<expr pos:start="5287:20" pos:end="5287:20"><name pos:start="5287:20" pos:end="5287:20">b</name></expr>)</condition> <block pos:start="5287:23" pos:end="5317:13">{<block_content pos:start="5289:13" pos:end="5315:22">

            <case pos:start="5289:13" pos:end="5289:19">case <expr pos:start="5289:18" pos:end="5289:18"><literal type="number" pos:start="5289:18" pos:end="5289:18">0</literal></expr>:</case> <comment type="block" pos:start="5289:21" pos:end="5289:32">/* loopnz */</comment>

            <case pos:start="5291:13" pos:end="5291:19">case <expr pos:start="5291:18" pos:end="5291:18"><literal type="number" pos:start="5291:18" pos:end="5291:18">1</literal></expr>:</case> <comment type="block" pos:start="5291:21" pos:end="5291:31">/* loopz */</comment>

                <expr_stmt pos:start="5293:17" pos:end="5293:55"><expr pos:start="5293:17" pos:end="5293:54"><call pos:start="5293:17" pos:end="5293:54"><name pos:start="5293:17" pos:end="5293:33">gen_op_add_reg_im</name><argument_list pos:start="5293:34" pos:end="5293:54">(<argument pos:start="5293:35" pos:end="5293:42"><expr pos:start="5293:35" pos:end="5293:42"><name pos:start="5293:35" pos:end="5293:42"><name pos:start="5293:35" pos:end="5293:35">s</name><operator pos:start="5293:36" pos:end="5293:37">-&gt;</operator><name pos:start="5293:38" pos:end="5293:42">aflag</name></name></expr></argument>, <argument pos:start="5293:45" pos:end="5293:49"><expr pos:start="5293:45" pos:end="5293:49"><name pos:start="5293:45" pos:end="5293:49">R_ECX</name></expr></argument>, <argument pos:start="5293:52" pos:end="5293:53"><expr pos:start="5293:52" pos:end="5293:53"><operator pos:start="5293:52" pos:end="5293:52">-</operator><literal type="number" pos:start="5293:53" pos:end="5293:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5295:17" pos:end="5295:44"><expr pos:start="5295:17" pos:end="5295:43"><call pos:start="5295:17" pos:end="5295:43"><name pos:start="5295:17" pos:end="5295:29">gen_op_jz_ecx</name><argument_list pos:start="5295:30" pos:end="5295:43">(<argument pos:start="5295:31" pos:end="5295:38"><expr pos:start="5295:31" pos:end="5295:38"><name pos:start="5295:31" pos:end="5295:38"><name pos:start="5295:31" pos:end="5295:31">s</name><operator pos:start="5295:32" pos:end="5295:33">-&gt;</operator><name pos:start="5295:34" pos:end="5295:38">aflag</name></name></expr></argument>, <argument pos:start="5295:41" pos:end="5295:42"><expr pos:start="5295:41" pos:end="5295:42"><name pos:start="5295:41" pos:end="5295:42">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5297:17" pos:end="5297:56"><expr pos:start="5297:17" pos:end="5297:55"><call pos:start="5297:17" pos:end="5297:55"><name pos:start="5297:17" pos:end="5297:24">gen_jcc1</name><argument_list pos:start="5297:25" pos:end="5297:55">(<argument pos:start="5297:26" pos:end="5297:26"><expr pos:start="5297:26" pos:end="5297:26"><name pos:start="5297:26" pos:end="5297:26">s</name></expr></argument>, <argument pos:start="5297:29" pos:end="5297:50"><expr pos:start="5297:29" pos:end="5297:50"><operator pos:start="5297:29" pos:end="5297:29">(</operator><name pos:start="5297:30" pos:end="5297:34">JCC_Z</name> <operator pos:start="5297:36" pos:end="5297:37">&lt;&lt;</operator> <literal type="number" pos:start="5297:39" pos:end="5297:39">1</literal><operator pos:start="5297:40" pos:end="5297:40">)</operator> <operator pos:start="5297:42" pos:end="5297:42">|</operator> <operator pos:start="5297:44" pos:end="5297:44">(</operator><name pos:start="5297:45" pos:end="5297:45">b</name> <operator pos:start="5297:47" pos:end="5297:47">^</operator> <literal type="number" pos:start="5297:49" pos:end="5297:49">1</literal><operator pos:start="5297:50" pos:end="5297:50">)</operator></expr></argument>, <argument pos:start="5297:53" pos:end="5297:54"><expr pos:start="5297:53" pos:end="5297:54"><name pos:start="5297:53" pos:end="5297:54">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5299:17" pos:end="5299:22">break;</break>

            <case pos:start="5301:13" pos:end="5301:19">case <expr pos:start="5301:18" pos:end="5301:18"><literal type="number" pos:start="5301:18" pos:end="5301:18">2</literal></expr>:</case> <comment type="block" pos:start="5301:21" pos:end="5301:30">/* loop */</comment>

                <expr_stmt pos:start="5303:17" pos:end="5303:55"><expr pos:start="5303:17" pos:end="5303:54"><call pos:start="5303:17" pos:end="5303:54"><name pos:start="5303:17" pos:end="5303:33">gen_op_add_reg_im</name><argument_list pos:start="5303:34" pos:end="5303:54">(<argument pos:start="5303:35" pos:end="5303:42"><expr pos:start="5303:35" pos:end="5303:42"><name pos:start="5303:35" pos:end="5303:42"><name pos:start="5303:35" pos:end="5303:35">s</name><operator pos:start="5303:36" pos:end="5303:37">-&gt;</operator><name pos:start="5303:38" pos:end="5303:42">aflag</name></name></expr></argument>, <argument pos:start="5303:45" pos:end="5303:49"><expr pos:start="5303:45" pos:end="5303:49"><name pos:start="5303:45" pos:end="5303:49">R_ECX</name></expr></argument>, <argument pos:start="5303:52" pos:end="5303:53"><expr pos:start="5303:52" pos:end="5303:53"><operator pos:start="5303:52" pos:end="5303:52">-</operator><literal type="number" pos:start="5303:53" pos:end="5303:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5305:17" pos:end="5305:45"><expr pos:start="5305:17" pos:end="5305:44"><call pos:start="5305:17" pos:end="5305:44"><name pos:start="5305:17" pos:end="5305:30">gen_op_jnz_ecx</name><argument_list pos:start="5305:31" pos:end="5305:44">(<argument pos:start="5305:32" pos:end="5305:39"><expr pos:start="5305:32" pos:end="5305:39"><name pos:start="5305:32" pos:end="5305:39"><name pos:start="5305:32" pos:end="5305:32">s</name><operator pos:start="5305:33" pos:end="5305:34">-&gt;</operator><name pos:start="5305:35" pos:end="5305:39">aflag</name></name></expr></argument>, <argument pos:start="5305:42" pos:end="5305:43"><expr pos:start="5305:42" pos:end="5305:43"><name pos:start="5305:42" pos:end="5305:43">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5307:17" pos:end="5307:22">break;</break>

            <default pos:start="5309:13" pos:end="5309:20">default:</default>

            <case pos:start="5311:13" pos:end="5311:19">case <expr pos:start="5311:18" pos:end="5311:18"><literal type="number" pos:start="5311:18" pos:end="5311:18">3</literal></expr>:</case> <comment type="block" pos:start="5311:21" pos:end="5311:30">/* jcxz */</comment>

                <expr_stmt pos:start="5313:17" pos:end="5313:44"><expr pos:start="5313:17" pos:end="5313:43"><call pos:start="5313:17" pos:end="5313:43"><name pos:start="5313:17" pos:end="5313:29">gen_op_jz_ecx</name><argument_list pos:start="5313:30" pos:end="5313:43">(<argument pos:start="5313:31" pos:end="5313:38"><expr pos:start="5313:31" pos:end="5313:38"><name pos:start="5313:31" pos:end="5313:38"><name pos:start="5313:31" pos:end="5313:31">s</name><operator pos:start="5313:32" pos:end="5313:33">-&gt;</operator><name pos:start="5313:34" pos:end="5313:38">aflag</name></name></expr></argument>, <argument pos:start="5313:41" pos:end="5313:42"><expr pos:start="5313:41" pos:end="5313:42"><name pos:start="5313:41" pos:end="5313:42">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5315:17" pos:end="5315:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="5321:13" pos:end="5321:30"><expr pos:start="5321:13" pos:end="5321:29"><call pos:start="5321:13" pos:end="5321:29"><name pos:start="5321:13" pos:end="5321:25">gen_set_label</name><argument_list pos:start="5321:26" pos:end="5321:29">(<argument pos:start="5321:27" pos:end="5321:28"><expr pos:start="5321:27" pos:end="5321:28"><name pos:start="5321:27" pos:end="5321:28">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5323:13" pos:end="5323:33"><expr pos:start="5323:13" pos:end="5323:32"><call pos:start="5323:13" pos:end="5323:32"><name pos:start="5323:13" pos:end="5323:22">gen_jmp_im</name><argument_list pos:start="5323:23" pos:end="5323:32">(<argument pos:start="5323:24" pos:end="5323:31"><expr pos:start="5323:24" pos:end="5323:31"><name pos:start="5323:24" pos:end="5323:31">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5325:13" pos:end="5325:27"><expr pos:start="5325:13" pos:end="5325:26"><call pos:start="5325:13" pos:end="5325:26"><name pos:start="5325:13" pos:end="5325:22">tcg_gen_br</name><argument_list pos:start="5325:23" pos:end="5325:26">(<argument pos:start="5325:24" pos:end="5325:25"><expr pos:start="5325:24" pos:end="5325:25"><name pos:start="5325:24" pos:end="5325:25">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="5329:13" pos:end="5329:30"><expr pos:start="5329:13" pos:end="5329:29"><call pos:start="5329:13" pos:end="5329:29"><name pos:start="5329:13" pos:end="5329:25">gen_set_label</name><argument_list pos:start="5329:26" pos:end="5329:29">(<argument pos:start="5329:27" pos:end="5329:28"><expr pos:start="5329:27" pos:end="5329:28"><name pos:start="5329:27" pos:end="5329:28">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5331:13" pos:end="5331:29"><expr pos:start="5331:13" pos:end="5331:28"><call pos:start="5331:13" pos:end="5331:28"><name pos:start="5331:13" pos:end="5331:22">gen_jmp_im</name><argument_list pos:start="5331:23" pos:end="5331:28">(<argument pos:start="5331:24" pos:end="5331:27"><expr pos:start="5331:24" pos:end="5331:27"><name pos:start="5331:24" pos:end="5331:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5333:13" pos:end="5333:30"><expr pos:start="5333:13" pos:end="5333:29"><call pos:start="5333:13" pos:end="5333:29"><name pos:start="5333:13" pos:end="5333:25">gen_set_label</name><argument_list pos:start="5333:26" pos:end="5333:29">(<argument pos:start="5333:27" pos:end="5333:28"><expr pos:start="5333:27" pos:end="5333:28"><name pos:start="5333:27" pos:end="5333:28">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5335:13" pos:end="5335:23"><expr pos:start="5335:13" pos:end="5335:22"><call pos:start="5335:13" pos:end="5335:22"><name pos:start="5335:13" pos:end="5335:19">gen_eob</name><argument_list pos:start="5335:20" pos:end="5335:22">(<argument pos:start="5335:21" pos:end="5335:21"><expr pos:start="5335:21" pos:end="5335:21"><name pos:start="5335:21" pos:end="5335:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5339:9" pos:end="5339:14">break;</break>

    <case pos:start="5341:5" pos:end="5341:15">case <expr pos:start="5341:10" pos:end="5341:14"><literal type="number" pos:start="5341:10" pos:end="5341:14">0x130</literal></expr>:</case> <comment type="block" pos:start="5341:17" pos:end="5341:27">/* wrmsr */</comment>

    <case pos:start="5343:5" pos:end="5343:15">case <expr pos:start="5343:10" pos:end="5343:14"><literal type="number" pos:start="5343:10" pos:end="5343:14">0x132</literal></expr>:</case> <comment type="block" pos:start="5343:17" pos:end="5343:27">/* rdmsr */</comment>

        <if_stmt pos:start="5345:9" pos:end="5365:9"><if pos:start="5345:9" pos:end="5349:9">if <condition pos:start="5345:12" pos:end="5345:24">(<expr pos:start="5345:13" pos:end="5345:23"><name pos:start="5345:13" pos:end="5345:18"><name pos:start="5345:13" pos:end="5345:13">s</name><operator pos:start="5345:14" pos:end="5345:15">-&gt;</operator><name pos:start="5345:16" pos:end="5345:18">cpl</name></name> <operator pos:start="5345:20" pos:end="5345:21">!=</operator> <literal type="number" pos:start="5345:23" pos:end="5345:23">0</literal></expr>)</condition> <block pos:start="5345:26" pos:end="5349:9">{<block_content pos:start="5347:13" pos:end="5347:64">

            <expr_stmt pos:start="5347:13" pos:end="5347:64"><expr pos:start="5347:13" pos:end="5347:63"><call pos:start="5347:13" pos:end="5347:63"><name pos:start="5347:13" pos:end="5347:25">gen_exception</name><argument_list pos:start="5347:26" pos:end="5347:63">(<argument pos:start="5347:27" pos:end="5347:27"><expr pos:start="5347:27" pos:end="5347:27"><name pos:start="5347:27" pos:end="5347:27">s</name></expr></argument>, <argument pos:start="5347:30" pos:end="5347:39"><expr pos:start="5347:30" pos:end="5347:39"><name pos:start="5347:30" pos:end="5347:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5347:42" pos:end="5347:62"><expr pos:start="5347:42" pos:end="5347:62"><name pos:start="5347:42" pos:end="5347:49">pc_start</name> <operator pos:start="5347:51" pos:end="5347:51">-</operator> <name pos:start="5347:53" pos:end="5347:62"><name pos:start="5347:53" pos:end="5347:53">s</name><operator pos:start="5347:54" pos:end="5347:55">-&gt;</operator><name pos:start="5347:56" pos:end="5347:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5349:11" pos:end="5365:9">else <block pos:start="5349:16" pos:end="5365:9">{<block_content pos:start="5351:13" pos:end="5363:13">

            <expr_stmt pos:start="5351:13" pos:end="5351:32"><expr pos:start="5351:13" pos:end="5351:31"><call pos:start="5351:13" pos:end="5351:31"><name pos:start="5351:13" pos:end="5351:28">gen_update_cc_op</name><argument_list pos:start="5351:29" pos:end="5351:31">(<argument pos:start="5351:30" pos:end="5351:30"><expr pos:start="5351:30" pos:end="5351:30"><name pos:start="5351:30" pos:end="5351:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5353:13" pos:end="5353:46"><expr pos:start="5353:13" pos:end="5353:45"><call pos:start="5353:13" pos:end="5353:45"><name pos:start="5353:13" pos:end="5353:22">gen_jmp_im</name><argument_list pos:start="5353:23" pos:end="5353:45">(<argument pos:start="5353:24" pos:end="5353:44"><expr pos:start="5353:24" pos:end="5353:44"><name pos:start="5353:24" pos:end="5353:31">pc_start</name> <operator pos:start="5353:33" pos:end="5353:33">-</operator> <name pos:start="5353:35" pos:end="5353:44"><name pos:start="5353:35" pos:end="5353:35">s</name><operator pos:start="5353:36" pos:end="5353:37">-&gt;</operator><name pos:start="5353:38" pos:end="5353:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5355:13" pos:end="5363:13"><if pos:start="5355:13" pos:end="5359:13">if <condition pos:start="5355:16" pos:end="5355:22">(<expr pos:start="5355:17" pos:end="5355:21"><name pos:start="5355:17" pos:end="5355:17">b</name> <operator pos:start="5355:19" pos:end="5355:19">&amp;</operator> <literal type="number" pos:start="5355:21" pos:end="5355:21">2</literal></expr>)</condition> <block pos:start="5355:24" pos:end="5359:13">{<block_content pos:start="5357:17" pos:end="5357:42">

                <expr_stmt pos:start="5357:17" pos:end="5357:42"><expr pos:start="5357:17" pos:end="5357:41"><call pos:start="5357:17" pos:end="5357:41"><name pos:start="5357:17" pos:end="5357:32">gen_helper_rdmsr</name><argument_list pos:start="5357:33" pos:end="5357:41">(<argument pos:start="5357:34" pos:end="5357:40"><expr pos:start="5357:34" pos:end="5357:40"><name pos:start="5357:34" pos:end="5357:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5359:15" pos:end="5363:13">else <block pos:start="5359:20" pos:end="5363:13">{<block_content pos:start="5361:17" pos:end="5361:42">

                <expr_stmt pos:start="5361:17" pos:end="5361:42"><expr pos:start="5361:17" pos:end="5361:41"><call pos:start="5361:17" pos:end="5361:41"><name pos:start="5361:17" pos:end="5361:32">gen_helper_wrmsr</name><argument_list pos:start="5361:33" pos:end="5361:41">(<argument pos:start="5361:34" pos:end="5361:40"><expr pos:start="5361:34" pos:end="5361:40"><name pos:start="5361:34" pos:end="5361:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5367:9" pos:end="5367:14">break;</break>

    <case pos:start="5369:5" pos:end="5369:15">case <expr pos:start="5369:10" pos:end="5369:14"><literal type="number" pos:start="5369:10" pos:end="5369:14">0x131</literal></expr>:</case> <comment type="block" pos:start="5369:17" pos:end="5369:27">/* rdtsc */</comment>

        <expr_stmt pos:start="5371:9" pos:end="5371:28"><expr pos:start="5371:9" pos:end="5371:27"><call pos:start="5371:9" pos:end="5371:27"><name pos:start="5371:9" pos:end="5371:24">gen_update_cc_op</name><argument_list pos:start="5371:25" pos:end="5371:27">(<argument pos:start="5371:26" pos:end="5371:26"><expr pos:start="5371:26" pos:end="5371:26"><name pos:start="5371:26" pos:end="5371:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5373:9" pos:end="5373:42"><expr pos:start="5373:9" pos:end="5373:41"><call pos:start="5373:9" pos:end="5373:41"><name pos:start="5373:9" pos:end="5373:18">gen_jmp_im</name><argument_list pos:start="5373:19" pos:end="5373:41">(<argument pos:start="5373:20" pos:end="5373:40"><expr pos:start="5373:20" pos:end="5373:40"><name pos:start="5373:20" pos:end="5373:27">pc_start</name> <operator pos:start="5373:29" pos:end="5373:29">-</operator> <name pos:start="5373:31" pos:end="5373:40"><name pos:start="5373:31" pos:end="5373:31">s</name><operator pos:start="5373:32" pos:end="5373:33">-&gt;</operator><name pos:start="5373:34" pos:end="5373:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5375:9" pos:end="5379:9"><if pos:start="5375:9" pos:end="5379:9">if <condition pos:start="5375:12" pos:end="5375:50">(<expr pos:start="5375:13" pos:end="5375:49"><call pos:start="5375:13" pos:end="5375:33"><name pos:start="5375:13" pos:end="5375:21">tb_cflags</name><argument_list pos:start="5375:22" pos:end="5375:33">(<argument pos:start="5375:23" pos:end="5375:32"><expr pos:start="5375:23" pos:end="5375:32"><name pos:start="5375:23" pos:end="5375:32"><name pos:start="5375:23" pos:end="5375:23">s</name><operator pos:start="5375:24" pos:end="5375:25">-&gt;</operator><name pos:start="5375:26" pos:end="5375:29">base</name><operator pos:start="5375:30" pos:end="5375:30">.</operator><name pos:start="5375:31" pos:end="5375:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="5375:35" pos:end="5375:35">&amp;</operator> <name pos:start="5375:37" pos:end="5375:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="5375:52" pos:end="5379:9">{<block_content pos:start="5377:13" pos:end="5377:27">

            <expr_stmt pos:start="5377:13" pos:end="5377:27"><expr pos:start="5377:13" pos:end="5377:26"><call pos:start="5377:13" pos:end="5377:26"><name pos:start="5377:13" pos:end="5377:24">gen_io_start</name><argument_list pos:start="5377:25" pos:end="5377:26">()</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="5381:9" pos:end="5381:34"><expr pos:start="5381:9" pos:end="5381:33"><call pos:start="5381:9" pos:end="5381:33"><name pos:start="5381:9" pos:end="5381:24">gen_helper_rdtsc</name><argument_list pos:start="5381:25" pos:end="5381:33">(<argument pos:start="5381:26" pos:end="5381:32"><expr pos:start="5381:26" pos:end="5381:32"><name pos:start="5381:26" pos:end="5381:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5383:9" pos:end="5389:9"><if pos:start="5383:9" pos:end="5389:9">if <condition pos:start="5383:12" pos:end="5383:50">(<expr pos:start="5383:13" pos:end="5383:49"><call pos:start="5383:13" pos:end="5383:33"><name pos:start="5383:13" pos:end="5383:21">tb_cflags</name><argument_list pos:start="5383:22" pos:end="5383:33">(<argument pos:start="5383:23" pos:end="5383:32"><expr pos:start="5383:23" pos:end="5383:32"><name pos:start="5383:23" pos:end="5383:32"><name pos:start="5383:23" pos:end="5383:23">s</name><operator pos:start="5383:24" pos:end="5383:25">-&gt;</operator><name pos:start="5383:26" pos:end="5383:29">base</name><operator pos:start="5383:30" pos:end="5383:30">.</operator><name pos:start="5383:31" pos:end="5383:32">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="5383:35" pos:end="5383:35">&amp;</operator> <name pos:start="5383:37" pos:end="5383:49">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="5383:52" pos:end="5389:9">{<block_content pos:start="5385:13" pos:end="5387:43">

            <expr_stmt pos:start="5385:13" pos:end="5385:25"><expr pos:start="5385:13" pos:end="5385:24"><call pos:start="5385:13" pos:end="5385:24"><name pos:start="5385:13" pos:end="5385:22">gen_io_end</name><argument_list pos:start="5385:23" pos:end="5385:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5387:13" pos:end="5387:43"><expr pos:start="5387:13" pos:end="5387:42"><call pos:start="5387:13" pos:end="5387:42"><name pos:start="5387:13" pos:end="5387:19">gen_jmp</name><argument_list pos:start="5387:20" pos:end="5387:42">(<argument pos:start="5387:21" pos:end="5387:21"><expr pos:start="5387:21" pos:end="5387:21"><name pos:start="5387:21" pos:end="5387:21">s</name></expr></argument>, <argument pos:start="5387:24" pos:end="5387:41"><expr pos:start="5387:24" pos:end="5387:41"><name pos:start="5387:24" pos:end="5387:28"><name pos:start="5387:24" pos:end="5387:24">s</name><operator pos:start="5387:25" pos:end="5387:26">-&gt;</operator><name pos:start="5387:27" pos:end="5387:28">pc</name></name> <operator pos:start="5387:30" pos:end="5387:30">-</operator> <name pos:start="5387:32" pos:end="5387:41"><name pos:start="5387:32" pos:end="5387:32">s</name><operator pos:start="5387:33" pos:end="5387:34">-&gt;</operator><name pos:start="5387:35" pos:end="5387:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5391:9" pos:end="5391:14">break;</break>

    <case pos:start="5393:5" pos:end="5393:15">case <expr pos:start="5393:10" pos:end="5393:14"><literal type="number" pos:start="5393:10" pos:end="5393:14">0x133</literal></expr>:</case> <comment type="block" pos:start="5393:17" pos:end="5393:27">/* rdpmc */</comment>

        <expr_stmt pos:start="5395:9" pos:end="5395:28"><expr pos:start="5395:9" pos:end="5395:27"><call pos:start="5395:9" pos:end="5395:27"><name pos:start="5395:9" pos:end="5395:24">gen_update_cc_op</name><argument_list pos:start="5395:25" pos:end="5395:27">(<argument pos:start="5395:26" pos:end="5395:26"><expr pos:start="5395:26" pos:end="5395:26"><name pos:start="5395:26" pos:end="5395:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5397:9" pos:end="5397:42"><expr pos:start="5397:9" pos:end="5397:41"><call pos:start="5397:9" pos:end="5397:41"><name pos:start="5397:9" pos:end="5397:18">gen_jmp_im</name><argument_list pos:start="5397:19" pos:end="5397:41">(<argument pos:start="5397:20" pos:end="5397:40"><expr pos:start="5397:20" pos:end="5397:40"><name pos:start="5397:20" pos:end="5397:27">pc_start</name> <operator pos:start="5397:29" pos:end="5397:29">-</operator> <name pos:start="5397:31" pos:end="5397:40"><name pos:start="5397:31" pos:end="5397:31">s</name><operator pos:start="5397:32" pos:end="5397:33">-&gt;</operator><name pos:start="5397:34" pos:end="5397:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5399:9" pos:end="5399:34"><expr pos:start="5399:9" pos:end="5399:33"><call pos:start="5399:9" pos:end="5399:33"><name pos:start="5399:9" pos:end="5399:24">gen_helper_rdpmc</name><argument_list pos:start="5399:25" pos:end="5399:33">(<argument pos:start="5399:26" pos:end="5399:32"><expr pos:start="5399:26" pos:end="5399:32"><name pos:start="5399:26" pos:end="5399:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5401:9" pos:end="5401:14">break;</break>

    <case pos:start="5403:5" pos:end="5403:15">case <expr pos:start="5403:10" pos:end="5403:14"><literal type="number" pos:start="5403:10" pos:end="5403:14">0x134</literal></expr>:</case> <comment type="block" pos:start="5403:17" pos:end="5403:30">/* sysenter */</comment>

        <comment type="block" pos:start="5405:9" pos:end="5405:51">/* For Intel SYSENTER is valid on 64-bit */</comment>

        <if_stmt pos:start="5407:9" pos:end="5409:28"><if pos:start="5407:9" pos:end="5409:28">if <condition pos:start="5407:12" pos:end="5407:68">(<expr pos:start="5407:13" pos:end="5407:67"><call pos:start="5407:13" pos:end="5407:21"><name pos:start="5407:13" pos:end="5407:18">CODE64</name><argument_list pos:start="5407:19" pos:end="5407:21">(<argument pos:start="5407:20" pos:end="5407:20"><expr pos:start="5407:20" pos:end="5407:20"><name pos:start="5407:20" pos:end="5407:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="5407:23" pos:end="5407:24">&amp;&amp;</operator> <name pos:start="5407:26" pos:end="5407:43"><name pos:start="5407:26" pos:end="5407:28">env</name><operator pos:start="5407:29" pos:end="5407:30">-&gt;</operator><name pos:start="5407:31" pos:end="5407:43">cpuid_vendor1</name></name> <operator pos:start="5407:45" pos:end="5407:46">!=</operator> <name pos:start="5407:48" pos:end="5407:67">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="5409:13" pos:end="5409:28"><block_content pos:start="5409:13" pos:end="5409:28">

            <goto pos:start="5409:13" pos:end="5409:28">goto <name pos:start="5409:18" pos:end="5409:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5411:9" pos:end="5421:9"><if pos:start="5411:9" pos:end="5415:9">if <condition pos:start="5411:12" pos:end="5411:19">(<expr pos:start="5411:13" pos:end="5411:18"><operator pos:start="5411:13" pos:end="5411:13">!</operator><name pos:start="5411:14" pos:end="5411:18"><name pos:start="5411:14" pos:end="5411:14">s</name><operator pos:start="5411:15" pos:end="5411:16">-&gt;</operator><name pos:start="5411:17" pos:end="5411:18">pe</name></name></expr>)</condition> <block pos:start="5411:21" pos:end="5415:9">{<block_content pos:start="5413:13" pos:end="5413:64">

            <expr_stmt pos:start="5413:13" pos:end="5413:64"><expr pos:start="5413:13" pos:end="5413:63"><call pos:start="5413:13" pos:end="5413:63"><name pos:start="5413:13" pos:end="5413:25">gen_exception</name><argument_list pos:start="5413:26" pos:end="5413:63">(<argument pos:start="5413:27" pos:end="5413:27"><expr pos:start="5413:27" pos:end="5413:27"><name pos:start="5413:27" pos:end="5413:27">s</name></expr></argument>, <argument pos:start="5413:30" pos:end="5413:39"><expr pos:start="5413:30" pos:end="5413:39"><name pos:start="5413:30" pos:end="5413:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5413:42" pos:end="5413:62"><expr pos:start="5413:42" pos:end="5413:62"><name pos:start="5413:42" pos:end="5413:49">pc_start</name> <operator pos:start="5413:51" pos:end="5413:51">-</operator> <name pos:start="5413:53" pos:end="5413:62"><name pos:start="5413:53" pos:end="5413:53">s</name><operator pos:start="5413:54" pos:end="5413:55">-&gt;</operator><name pos:start="5413:56" pos:end="5413:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5415:11" pos:end="5421:9">else <block pos:start="5415:16" pos:end="5421:9">{<block_content pos:start="5417:13" pos:end="5419:23">

            <expr_stmt pos:start="5417:13" pos:end="5417:41"><expr pos:start="5417:13" pos:end="5417:40"><call pos:start="5417:13" pos:end="5417:40"><name pos:start="5417:13" pos:end="5417:31">gen_helper_sysenter</name><argument_list pos:start="5417:32" pos:end="5417:40">(<argument pos:start="5417:33" pos:end="5417:39"><expr pos:start="5417:33" pos:end="5417:39"><name pos:start="5417:33" pos:end="5417:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5419:13" pos:end="5419:23"><expr pos:start="5419:13" pos:end="5419:22"><call pos:start="5419:13" pos:end="5419:22"><name pos:start="5419:13" pos:end="5419:19">gen_eob</name><argument_list pos:start="5419:20" pos:end="5419:22">(<argument pos:start="5419:21" pos:end="5419:21"><expr pos:start="5419:21" pos:end="5419:21"><name pos:start="5419:21" pos:end="5419:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5423:9" pos:end="5423:14">break;</break>

    <case pos:start="5425:5" pos:end="5425:15">case <expr pos:start="5425:10" pos:end="5425:14"><literal type="number" pos:start="5425:10" pos:end="5425:14">0x135</literal></expr>:</case> <comment type="block" pos:start="5425:17" pos:end="5425:29">/* sysexit */</comment>

        <comment type="block" pos:start="5427:9" pos:end="5427:50">/* For Intel SYSEXIT is valid on 64-bit */</comment>

        <if_stmt pos:start="5429:9" pos:end="5431:28"><if pos:start="5429:9" pos:end="5431:28">if <condition pos:start="5429:12" pos:end="5429:68">(<expr pos:start="5429:13" pos:end="5429:67"><call pos:start="5429:13" pos:end="5429:21"><name pos:start="5429:13" pos:end="5429:18">CODE64</name><argument_list pos:start="5429:19" pos:end="5429:21">(<argument pos:start="5429:20" pos:end="5429:20"><expr pos:start="5429:20" pos:end="5429:20"><name pos:start="5429:20" pos:end="5429:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="5429:23" pos:end="5429:24">&amp;&amp;</operator> <name pos:start="5429:26" pos:end="5429:43"><name pos:start="5429:26" pos:end="5429:28">env</name><operator pos:start="5429:29" pos:end="5429:30">-&gt;</operator><name pos:start="5429:31" pos:end="5429:43">cpuid_vendor1</name></name> <operator pos:start="5429:45" pos:end="5429:46">!=</operator> <name pos:start="5429:48" pos:end="5429:67">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="5431:13" pos:end="5431:28"><block_content pos:start="5431:13" pos:end="5431:28">

            <goto pos:start="5431:13" pos:end="5431:28">goto <name pos:start="5431:18" pos:end="5431:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5433:9" pos:end="5443:9"><if pos:start="5433:9" pos:end="5437:9">if <condition pos:start="5433:12" pos:end="5433:19">(<expr pos:start="5433:13" pos:end="5433:18"><operator pos:start="5433:13" pos:end="5433:13">!</operator><name pos:start="5433:14" pos:end="5433:18"><name pos:start="5433:14" pos:end="5433:14">s</name><operator pos:start="5433:15" pos:end="5433:16">-&gt;</operator><name pos:start="5433:17" pos:end="5433:18">pe</name></name></expr>)</condition> <block pos:start="5433:21" pos:end="5437:9">{<block_content pos:start="5435:13" pos:end="5435:64">

            <expr_stmt pos:start="5435:13" pos:end="5435:64"><expr pos:start="5435:13" pos:end="5435:63"><call pos:start="5435:13" pos:end="5435:63"><name pos:start="5435:13" pos:end="5435:25">gen_exception</name><argument_list pos:start="5435:26" pos:end="5435:63">(<argument pos:start="5435:27" pos:end="5435:27"><expr pos:start="5435:27" pos:end="5435:27"><name pos:start="5435:27" pos:end="5435:27">s</name></expr></argument>, <argument pos:start="5435:30" pos:end="5435:39"><expr pos:start="5435:30" pos:end="5435:39"><name pos:start="5435:30" pos:end="5435:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5435:42" pos:end="5435:62"><expr pos:start="5435:42" pos:end="5435:62"><name pos:start="5435:42" pos:end="5435:49">pc_start</name> <operator pos:start="5435:51" pos:end="5435:51">-</operator> <name pos:start="5435:53" pos:end="5435:62"><name pos:start="5435:53" pos:end="5435:53">s</name><operator pos:start="5435:54" pos:end="5435:55">-&gt;</operator><name pos:start="5435:56" pos:end="5435:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5437:11" pos:end="5443:9">else <block pos:start="5437:16" pos:end="5443:9">{<block_content pos:start="5439:13" pos:end="5441:23">

            <expr_stmt pos:start="5439:13" pos:end="5439:66"><expr pos:start="5439:13" pos:end="5439:65"><call pos:start="5439:13" pos:end="5439:65"><name pos:start="5439:13" pos:end="5439:30">gen_helper_sysexit</name><argument_list pos:start="5439:31" pos:end="5439:65">(<argument pos:start="5439:32" pos:end="5439:38"><expr pos:start="5439:32" pos:end="5439:38"><name pos:start="5439:32" pos:end="5439:38">cpu_env</name></expr></argument>, <argument pos:start="5439:41" pos:end="5439:64"><expr pos:start="5439:41" pos:end="5439:64"><call pos:start="5439:41" pos:end="5439:64"><name pos:start="5439:41" pos:end="5439:53">tcg_const_i32</name><argument_list pos:start="5439:54" pos:end="5439:64">(<argument pos:start="5439:55" pos:end="5439:63"><expr pos:start="5439:55" pos:end="5439:63"><name pos:start="5439:55" pos:end="5439:59">dflag</name> <operator pos:start="5439:61" pos:end="5439:61">-</operator> <literal type="number" pos:start="5439:63" pos:end="5439:63">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5441:13" pos:end="5441:23"><expr pos:start="5441:13" pos:end="5441:22"><call pos:start="5441:13" pos:end="5441:22"><name pos:start="5441:13" pos:end="5441:19">gen_eob</name><argument_list pos:start="5441:20" pos:end="5441:22">(<argument pos:start="5441:21" pos:end="5441:21"><expr pos:start="5441:21" pos:end="5441:21"><name pos:start="5441:21" pos:end="5441:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5445:9" pos:end="5448:0">break;</break>

<cpp:ifdef pos:start="5447:1" pos:end="5447:20">#<cpp:directive pos:start="5447:2" pos:end="5447:6">ifdef</cpp:directive> <name pos:start="5447:8" pos:end="5447:20">TARGET_X86_64</name></cpp:ifdef>

    <case pos:start="5449:5" pos:end="5449:15">case <expr pos:start="5449:10" pos:end="5449:14"><literal type="number" pos:start="5449:10" pos:end="5449:14">0x105</literal></expr>:</case> <comment type="block" pos:start="5449:17" pos:end="5449:29">/* syscall */</comment>

        <comment type="block" pos:start="5451:9" pos:end="5451:46">/* XXX: is it usable in real mode ? */</comment>

        <expr_stmt pos:start="5453:9" pos:end="5453:28"><expr pos:start="5453:9" pos:end="5453:27"><call pos:start="5453:9" pos:end="5453:27"><name pos:start="5453:9" pos:end="5453:24">gen_update_cc_op</name><argument_list pos:start="5453:25" pos:end="5453:27">(<argument pos:start="5453:26" pos:end="5453:26"><expr pos:start="5453:26" pos:end="5453:26"><name pos:start="5453:26" pos:end="5453:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5455:9" pos:end="5455:42"><expr pos:start="5455:9" pos:end="5455:41"><call pos:start="5455:9" pos:end="5455:41"><name pos:start="5455:9" pos:end="5455:18">gen_jmp_im</name><argument_list pos:start="5455:19" pos:end="5455:41">(<argument pos:start="5455:20" pos:end="5455:40"><expr pos:start="5455:20" pos:end="5455:40"><name pos:start="5455:20" pos:end="5455:27">pc_start</name> <operator pos:start="5455:29" pos:end="5455:29">-</operator> <name pos:start="5455:31" pos:end="5455:40"><name pos:start="5455:31" pos:end="5455:31">s</name><operator pos:start="5455:32" pos:end="5455:33">-&gt;</operator><name pos:start="5455:34" pos:end="5455:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5457:9" pos:end="5457:69"><expr pos:start="5457:9" pos:end="5457:68"><call pos:start="5457:9" pos:end="5457:68"><name pos:start="5457:9" pos:end="5457:26">gen_helper_syscall</name><argument_list pos:start="5457:27" pos:end="5457:68">(<argument pos:start="5457:28" pos:end="5457:34"><expr pos:start="5457:28" pos:end="5457:34"><name pos:start="5457:28" pos:end="5457:34">cpu_env</name></expr></argument>, <argument pos:start="5457:37" pos:end="5457:67"><expr pos:start="5457:37" pos:end="5457:67"><call pos:start="5457:37" pos:end="5457:67"><name pos:start="5457:37" pos:end="5457:49">tcg_const_i32</name><argument_list pos:start="5457:50" pos:end="5457:67">(<argument pos:start="5457:51" pos:end="5457:66"><expr pos:start="5457:51" pos:end="5457:66"><name pos:start="5457:51" pos:end="5457:55"><name pos:start="5457:51" pos:end="5457:51">s</name><operator pos:start="5457:52" pos:end="5457:53">-&gt;</operator><name pos:start="5457:54" pos:end="5457:55">pc</name></name> <operator pos:start="5457:57" pos:end="5457:57">-</operator> <name pos:start="5457:59" pos:end="5457:66">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="5459:9" pos:end="5463:74">/* TF handling for the syscall insn is different. The TF bit is  checked

           after the syscall insn completes. This allows #DB to not be

           generated after one has entered CPL0 if TF is set in FMASK.  */</comment>

        <expr_stmt pos:start="5465:9" pos:end="5465:39"><expr pos:start="5465:9" pos:end="5465:38"><call pos:start="5465:9" pos:end="5465:38"><name pos:start="5465:9" pos:end="5465:22">gen_eob_worker</name><argument_list pos:start="5465:23" pos:end="5465:38">(<argument pos:start="5465:24" pos:end="5465:24"><expr pos:start="5465:24" pos:end="5465:24"><name pos:start="5465:24" pos:end="5465:24">s</name></expr></argument>, <argument pos:start="5465:27" pos:end="5465:31"><expr pos:start="5465:27" pos:end="5465:31"><name pos:start="5465:27" pos:end="5465:31">false</name></expr></argument>, <argument pos:start="5465:34" pos:end="5465:37"><expr pos:start="5465:34" pos:end="5465:37"><name pos:start="5465:34" pos:end="5465:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5467:9" pos:end="5467:14">break;</break>

    <case pos:start="5469:5" pos:end="5469:15">case <expr pos:start="5469:10" pos:end="5469:14"><literal type="number" pos:start="5469:10" pos:end="5469:14">0x107</literal></expr>:</case> <comment type="block" pos:start="5469:17" pos:end="5469:28">/* sysret */</comment>

        <if_stmt pos:start="5471:9" pos:end="5497:9"><if pos:start="5471:9" pos:end="5475:9">if <condition pos:start="5471:12" pos:end="5471:19">(<expr pos:start="5471:13" pos:end="5471:18"><operator pos:start="5471:13" pos:end="5471:13">!</operator><name pos:start="5471:14" pos:end="5471:18"><name pos:start="5471:14" pos:end="5471:14">s</name><operator pos:start="5471:15" pos:end="5471:16">-&gt;</operator><name pos:start="5471:17" pos:end="5471:18">pe</name></name></expr>)</condition> <block pos:start="5471:21" pos:end="5475:9">{<block_content pos:start="5473:13" pos:end="5473:64">

            <expr_stmt pos:start="5473:13" pos:end="5473:64"><expr pos:start="5473:13" pos:end="5473:63"><call pos:start="5473:13" pos:end="5473:63"><name pos:start="5473:13" pos:end="5473:25">gen_exception</name><argument_list pos:start="5473:26" pos:end="5473:63">(<argument pos:start="5473:27" pos:end="5473:27"><expr pos:start="5473:27" pos:end="5473:27"><name pos:start="5473:27" pos:end="5473:27">s</name></expr></argument>, <argument pos:start="5473:30" pos:end="5473:39"><expr pos:start="5473:30" pos:end="5473:39"><name pos:start="5473:30" pos:end="5473:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5473:42" pos:end="5473:62"><expr pos:start="5473:42" pos:end="5473:62"><name pos:start="5473:42" pos:end="5473:49">pc_start</name> <operator pos:start="5473:51" pos:end="5473:51">-</operator> <name pos:start="5473:53" pos:end="5473:62"><name pos:start="5473:53" pos:end="5473:53">s</name><operator pos:start="5473:54" pos:end="5473:55">-&gt;</operator><name pos:start="5473:56" pos:end="5473:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5475:11" pos:end="5497:9">else <block pos:start="5475:16" pos:end="5497:9">{<block_content pos:start="5477:13" pos:end="5495:43">

            <expr_stmt pos:start="5477:13" pos:end="5477:65"><expr pos:start="5477:13" pos:end="5477:64"><call pos:start="5477:13" pos:end="5477:64"><name pos:start="5477:13" pos:end="5477:29">gen_helper_sysret</name><argument_list pos:start="5477:30" pos:end="5477:64">(<argument pos:start="5477:31" pos:end="5477:37"><expr pos:start="5477:31" pos:end="5477:37"><name pos:start="5477:31" pos:end="5477:37">cpu_env</name></expr></argument>, <argument pos:start="5477:40" pos:end="5477:63"><expr pos:start="5477:40" pos:end="5477:63"><call pos:start="5477:40" pos:end="5477:63"><name pos:start="5477:40" pos:end="5477:52">tcg_const_i32</name><argument_list pos:start="5477:53" pos:end="5477:63">(<argument pos:start="5477:54" pos:end="5477:62"><expr pos:start="5477:54" pos:end="5477:62"><name pos:start="5477:54" pos:end="5477:58">dflag</name> <operator pos:start="5477:60" pos:end="5477:60">-</operator> <literal type="number" pos:start="5477:62" pos:end="5477:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="5479:13" pos:end="5479:64">/* condition codes are modified only in long mode */</comment>

            <if_stmt pos:start="5481:13" pos:end="5485:13"><if pos:start="5481:13" pos:end="5485:13">if <condition pos:start="5481:16" pos:end="5481:23">(<expr pos:start="5481:17" pos:end="5481:22"><name pos:start="5481:17" pos:end="5481:22"><name pos:start="5481:17" pos:end="5481:17">s</name><operator pos:start="5481:18" pos:end="5481:19">-&gt;</operator><name pos:start="5481:20" pos:end="5481:22">lma</name></name></expr>)</condition> <block pos:start="5481:25" pos:end="5485:13">{<block_content pos:start="5483:17" pos:end="5483:43">

                <expr_stmt pos:start="5483:17" pos:end="5483:43"><expr pos:start="5483:17" pos:end="5483:42"><call pos:start="5483:17" pos:end="5483:42"><name pos:start="5483:17" pos:end="5483:25">set_cc_op</name><argument_list pos:start="5483:26" pos:end="5483:42">(<argument pos:start="5483:27" pos:end="5483:27"><expr pos:start="5483:27" pos:end="5483:27"><name pos:start="5483:27" pos:end="5483:27">s</name></expr></argument>, <argument pos:start="5483:30" pos:end="5483:41"><expr pos:start="5483:30" pos:end="5483:41"><name pos:start="5483:30" pos:end="5483:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="5487:13" pos:end="5493:29">/* TF handling for the sysret insn is different. The TF bit is

               checked after the sysret insn completes. This allows #DB to be

               generated "as if" the syscall insn in userspace has just

               completed.  */</comment>

            <expr_stmt pos:start="5495:13" pos:end="5495:43"><expr pos:start="5495:13" pos:end="5495:42"><call pos:start="5495:13" pos:end="5495:42"><name pos:start="5495:13" pos:end="5495:26">gen_eob_worker</name><argument_list pos:start="5495:27" pos:end="5495:42">(<argument pos:start="5495:28" pos:end="5495:28"><expr pos:start="5495:28" pos:end="5495:28"><name pos:start="5495:28" pos:end="5495:28">s</name></expr></argument>, <argument pos:start="5495:31" pos:end="5495:35"><expr pos:start="5495:31" pos:end="5495:35"><name pos:start="5495:31" pos:end="5495:35">false</name></expr></argument>, <argument pos:start="5495:38" pos:end="5495:41"><expr pos:start="5495:38" pos:end="5495:41"><name pos:start="5495:38" pos:end="5495:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5499:9" pos:end="5502:0">break;</break>

<cpp:endif pos:start="5501:1" pos:end="5501:6">#<cpp:directive pos:start="5501:2" pos:end="5501:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5503:5" pos:end="5503:15">case <expr pos:start="5503:10" pos:end="5503:14"><literal type="number" pos:start="5503:10" pos:end="5503:14">0x1a2</literal></expr>:</case> <comment type="block" pos:start="5503:17" pos:end="5503:27">/* cpuid */</comment>

        <expr_stmt pos:start="5505:9" pos:end="5505:28"><expr pos:start="5505:9" pos:end="5505:27"><call pos:start="5505:9" pos:end="5505:27"><name pos:start="5505:9" pos:end="5505:24">gen_update_cc_op</name><argument_list pos:start="5505:25" pos:end="5505:27">(<argument pos:start="5505:26" pos:end="5505:26"><expr pos:start="5505:26" pos:end="5505:26"><name pos:start="5505:26" pos:end="5505:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5507:9" pos:end="5507:42"><expr pos:start="5507:9" pos:end="5507:41"><call pos:start="5507:9" pos:end="5507:41"><name pos:start="5507:9" pos:end="5507:18">gen_jmp_im</name><argument_list pos:start="5507:19" pos:end="5507:41">(<argument pos:start="5507:20" pos:end="5507:40"><expr pos:start="5507:20" pos:end="5507:40"><name pos:start="5507:20" pos:end="5507:27">pc_start</name> <operator pos:start="5507:29" pos:end="5507:29">-</operator> <name pos:start="5507:31" pos:end="5507:40"><name pos:start="5507:31" pos:end="5507:31">s</name><operator pos:start="5507:32" pos:end="5507:33">-&gt;</operator><name pos:start="5507:34" pos:end="5507:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5509:9" pos:end="5509:34"><expr pos:start="5509:9" pos:end="5509:33"><call pos:start="5509:9" pos:end="5509:33"><name pos:start="5509:9" pos:end="5509:24">gen_helper_cpuid</name><argument_list pos:start="5509:25" pos:end="5509:33">(<argument pos:start="5509:26" pos:end="5509:32"><expr pos:start="5509:26" pos:end="5509:32"><name pos:start="5509:26" pos:end="5509:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5511:9" pos:end="5511:14">break;</break>

    <case pos:start="5513:5" pos:end="5513:14">case <expr pos:start="5513:10" pos:end="5513:13"><literal type="number" pos:start="5513:10" pos:end="5513:13">0xf4</literal></expr>:</case> <comment type="block" pos:start="5513:16" pos:end="5513:24">/* hlt */</comment>

        <if_stmt pos:start="5515:9" pos:end="5529:9"><if pos:start="5515:9" pos:end="5519:9">if <condition pos:start="5515:12" pos:end="5515:24">(<expr pos:start="5515:13" pos:end="5515:23"><name pos:start="5515:13" pos:end="5515:18"><name pos:start="5515:13" pos:end="5515:13">s</name><operator pos:start="5515:14" pos:end="5515:15">-&gt;</operator><name pos:start="5515:16" pos:end="5515:18">cpl</name></name> <operator pos:start="5515:20" pos:end="5515:21">!=</operator> <literal type="number" pos:start="5515:23" pos:end="5515:23">0</literal></expr>)</condition> <block pos:start="5515:26" pos:end="5519:9">{<block_content pos:start="5517:13" pos:end="5517:64">

            <expr_stmt pos:start="5517:13" pos:end="5517:64"><expr pos:start="5517:13" pos:end="5517:63"><call pos:start="5517:13" pos:end="5517:63"><name pos:start="5517:13" pos:end="5517:25">gen_exception</name><argument_list pos:start="5517:26" pos:end="5517:63">(<argument pos:start="5517:27" pos:end="5517:27"><expr pos:start="5517:27" pos:end="5517:27"><name pos:start="5517:27" pos:end="5517:27">s</name></expr></argument>, <argument pos:start="5517:30" pos:end="5517:39"><expr pos:start="5517:30" pos:end="5517:39"><name pos:start="5517:30" pos:end="5517:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5517:42" pos:end="5517:62"><expr pos:start="5517:42" pos:end="5517:62"><name pos:start="5517:42" pos:end="5517:49">pc_start</name> <operator pos:start="5517:51" pos:end="5517:51">-</operator> <name pos:start="5517:53" pos:end="5517:62"><name pos:start="5517:53" pos:end="5517:53">s</name><operator pos:start="5517:54" pos:end="5517:55">-&gt;</operator><name pos:start="5517:56" pos:end="5517:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5519:11" pos:end="5529:9">else <block pos:start="5519:16" pos:end="5529:9">{<block_content pos:start="5521:13" pos:end="5527:44">

            <expr_stmt pos:start="5521:13" pos:end="5521:32"><expr pos:start="5521:13" pos:end="5521:31"><call pos:start="5521:13" pos:end="5521:31"><name pos:start="5521:13" pos:end="5521:28">gen_update_cc_op</name><argument_list pos:start="5521:29" pos:end="5521:31">(<argument pos:start="5521:30" pos:end="5521:30"><expr pos:start="5521:30" pos:end="5521:30"><name pos:start="5521:30" pos:end="5521:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5523:13" pos:end="5523:46"><expr pos:start="5523:13" pos:end="5523:45"><call pos:start="5523:13" pos:end="5523:45"><name pos:start="5523:13" pos:end="5523:22">gen_jmp_im</name><argument_list pos:start="5523:23" pos:end="5523:45">(<argument pos:start="5523:24" pos:end="5523:44"><expr pos:start="5523:24" pos:end="5523:44"><name pos:start="5523:24" pos:end="5523:31">pc_start</name> <operator pos:start="5523:33" pos:end="5523:33">-</operator> <name pos:start="5523:35" pos:end="5523:44"><name pos:start="5523:35" pos:end="5523:35">s</name><operator pos:start="5523:36" pos:end="5523:37">-&gt;</operator><name pos:start="5523:38" pos:end="5523:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5525:13" pos:end="5525:69"><expr pos:start="5525:13" pos:end="5525:68"><call pos:start="5525:13" pos:end="5525:68"><name pos:start="5525:13" pos:end="5525:26">gen_helper_hlt</name><argument_list pos:start="5525:27" pos:end="5525:68">(<argument pos:start="5525:28" pos:end="5525:34"><expr pos:start="5525:28" pos:end="5525:34"><name pos:start="5525:28" pos:end="5525:34">cpu_env</name></expr></argument>, <argument pos:start="5525:37" pos:end="5525:67"><expr pos:start="5525:37" pos:end="5525:67"><call pos:start="5525:37" pos:end="5525:67"><name pos:start="5525:37" pos:end="5525:49">tcg_const_i32</name><argument_list pos:start="5525:50" pos:end="5525:67">(<argument pos:start="5525:51" pos:end="5525:66"><expr pos:start="5525:51" pos:end="5525:66"><name pos:start="5525:51" pos:end="5525:55"><name pos:start="5525:51" pos:end="5525:51">s</name><operator pos:start="5525:52" pos:end="5525:53">-&gt;</operator><name pos:start="5525:54" pos:end="5525:55">pc</name></name> <operator pos:start="5525:57" pos:end="5525:57">-</operator> <name pos:start="5525:59" pos:end="5525:66">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5527:13" pos:end="5527:44"><expr pos:start="5527:13" pos:end="5527:43"><name pos:start="5527:13" pos:end="5527:26"><name pos:start="5527:13" pos:end="5527:13">s</name><operator pos:start="5527:14" pos:end="5527:15">-&gt;</operator><name pos:start="5527:16" pos:end="5527:19">base</name><operator pos:start="5527:20" pos:end="5527:20">.</operator><name pos:start="5527:21" pos:end="5527:26">is_jmp</name></name> <operator pos:start="5527:28" pos:end="5527:28">=</operator> <name pos:start="5527:30" pos:end="5527:43">DISAS_NORETURN</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5531:9" pos:end="5531:14">break;</break>

    <case pos:start="5533:5" pos:end="5533:15">case <expr pos:start="5533:10" pos:end="5533:14"><literal type="number" pos:start="5533:10" pos:end="5533:14">0x100</literal></expr>:</case>

        <expr_stmt pos:start="5535:9" pos:end="5535:38"><expr pos:start="5535:9" pos:end="5535:37"><name pos:start="5535:9" pos:end="5535:13">modrm</name> <operator pos:start="5535:15" pos:end="5535:15">=</operator> <call pos:start="5535:17" pos:end="5535:37"><name pos:start="5535:17" pos:end="5535:29">x86_ldub_code</name><argument_list pos:start="5535:30" pos:end="5535:37">(<argument pos:start="5535:31" pos:end="5535:33"><expr pos:start="5535:31" pos:end="5535:33"><name pos:start="5535:31" pos:end="5535:33">env</name></expr></argument>, <argument pos:start="5535:36" pos:end="5535:36"><expr pos:start="5535:36" pos:end="5535:36"><name pos:start="5535:36" pos:end="5535:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5537:9" pos:end="5537:31"><expr pos:start="5537:9" pos:end="5537:30"><name pos:start="5537:9" pos:end="5537:11">mod</name> <operator pos:start="5537:13" pos:end="5537:13">=</operator> <operator pos:start="5537:15" pos:end="5537:15">(</operator><name pos:start="5537:16" pos:end="5537:20">modrm</name> <operator pos:start="5537:22" pos:end="5537:23">&gt;&gt;</operator> <literal type="number" pos:start="5537:25" pos:end="5537:25">6</literal><operator pos:start="5537:26" pos:end="5537:26">)</operator> <operator pos:start="5537:28" pos:end="5537:28">&amp;</operator> <literal type="number" pos:start="5537:30" pos:end="5537:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5539:9" pos:end="5539:30"><expr pos:start="5539:9" pos:end="5539:29"><name pos:start="5539:9" pos:end="5539:10">op</name> <operator pos:start="5539:12" pos:end="5539:12">=</operator> <operator pos:start="5539:14" pos:end="5539:14">(</operator><name pos:start="5539:15" pos:end="5539:19">modrm</name> <operator pos:start="5539:21" pos:end="5539:22">&gt;&gt;</operator> <literal type="number" pos:start="5539:24" pos:end="5539:24">3</literal><operator pos:start="5539:25" pos:end="5539:25">)</operator> <operator pos:start="5539:27" pos:end="5539:27">&amp;</operator> <literal type="number" pos:start="5539:29" pos:end="5539:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="5541:9" pos:end="5657:9">switch<condition pos:start="5541:15" pos:end="5541:18">(<expr pos:start="5541:16" pos:end="5541:17"><name pos:start="5541:16" pos:end="5541:17">op</name></expr>)</condition> <block pos:start="5541:20" pos:end="5657:9">{<block_content pos:start="5543:9" pos:end="5655:28">

        <case pos:start="5543:9" pos:end="5543:15">case <expr pos:start="5543:14" pos:end="5543:14"><literal type="number" pos:start="5543:14" pos:end="5543:14">0</literal></expr>:</case> <comment type="block" pos:start="5543:17" pos:end="5543:26">/* sldt */</comment>

            <if_stmt pos:start="5545:13" pos:end="5547:32"><if pos:start="5545:13" pos:end="5547:32">if <condition pos:start="5545:16" pos:end="5545:34">(<expr pos:start="5545:17" pos:end="5545:33"><operator pos:start="5545:17" pos:end="5545:17">!</operator><name pos:start="5545:18" pos:end="5545:22"><name pos:start="5545:18" pos:end="5545:18">s</name><operator pos:start="5545:19" pos:end="5545:20">-&gt;</operator><name pos:start="5545:21" pos:end="5545:22">pe</name></name> <operator pos:start="5545:24" pos:end="5545:25">||</operator> <name pos:start="5545:27" pos:end="5545:33"><name pos:start="5545:27" pos:end="5545:27">s</name><operator pos:start="5545:28" pos:end="5545:29">-&gt;</operator><name pos:start="5545:30" pos:end="5545:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5547:17" pos:end="5547:32"><block_content pos:start="5547:17" pos:end="5547:32">

                <goto pos:start="5547:17" pos:end="5547:32">goto <name pos:start="5547:22" pos:end="5547:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5549:13" pos:end="5549:69"><expr pos:start="5549:13" pos:end="5549:68"><call pos:start="5549:13" pos:end="5549:68"><name pos:start="5549:13" pos:end="5549:35">gen_svm_check_intercept</name><argument_list pos:start="5549:36" pos:end="5549:68">(<argument pos:start="5549:37" pos:end="5549:37"><expr pos:start="5549:37" pos:end="5549:37"><name pos:start="5549:37" pos:end="5549:37">s</name></expr></argument>, <argument pos:start="5549:40" pos:end="5549:47"><expr pos:start="5549:40" pos:end="5549:47"><name pos:start="5549:40" pos:end="5549:47">pc_start</name></expr></argument>, <argument pos:start="5549:50" pos:end="5549:67"><expr pos:start="5549:50" pos:end="5549:67"><name pos:start="5549:50" pos:end="5549:67">SVM_EXIT_LDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5551:13" pos:end="5553:66"><expr pos:start="5551:13" pos:end="5553:65"><call pos:start="5551:13" pos:end="5553:65"><name pos:start="5551:13" pos:end="5551:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5551:29" pos:end="5553:65">(<argument pos:start="5551:30" pos:end="5551:35"><expr pos:start="5551:30" pos:end="5551:35"><name pos:start="5551:30" pos:end="5551:35">cpu_T0</name></expr></argument>, <argument pos:start="5551:38" pos:end="5551:44"><expr pos:start="5551:38" pos:end="5551:44"><name pos:start="5551:38" pos:end="5551:44">cpu_env</name></expr></argument>,

                             <argument pos:start="5553:30" pos:end="5553:64"><expr pos:start="5553:30" pos:end="5553:64"><call pos:start="5553:30" pos:end="5553:64"><name pos:start="5553:30" pos:end="5553:37">offsetof</name><argument_list pos:start="5553:38" pos:end="5553:64">(<argument pos:start="5553:39" pos:end="5553:49"><expr pos:start="5553:39" pos:end="5553:49"><name pos:start="5553:39" pos:end="5553:49">CPUX86State</name></expr></argument>, <argument pos:start="5553:52" pos:end="5553:63"><expr pos:start="5553:52" pos:end="5553:63"><name pos:start="5553:52" pos:end="5553:63"><name pos:start="5553:52" pos:end="5553:54">ldt</name><operator pos:start="5553:55" pos:end="5553:55">.</operator><name pos:start="5553:56" pos:end="5553:63">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5555:13" pos:end="5555:42"><expr pos:start="5555:13" pos:end="5555:41"><name pos:start="5555:13" pos:end="5555:14">ot</name> <operator pos:start="5555:16" pos:end="5555:16">=</operator> <ternary pos:start="5555:18" pos:end="5555:41"><condition pos:start="5555:18" pos:end="5555:27"><expr pos:start="5555:18" pos:end="5555:25"><name pos:start="5555:18" pos:end="5555:20">mod</name> <operator pos:start="5555:22" pos:end="5555:23">==</operator> <literal type="number" pos:start="5555:25" pos:end="5555:25">3</literal></expr> ?</condition><then pos:start="5555:29" pos:end="5555:33"> <expr pos:start="5555:29" pos:end="5555:33"><name pos:start="5555:29" pos:end="5555:33">dflag</name></expr> </then><else pos:start="5555:35" pos:end="5555:41">: <expr pos:start="5555:37" pos:end="5555:41"><name pos:start="5555:37" pos:end="5555:41">MO_16</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="5557:13" pos:end="5557:58"><expr pos:start="5557:13" pos:end="5557:57"><call pos:start="5557:13" pos:end="5557:57"><name pos:start="5557:13" pos:end="5557:26">gen_ldst_modrm</name><argument_list pos:start="5557:27" pos:end="5557:57">(<argument pos:start="5557:28" pos:end="5557:30"><expr pos:start="5557:28" pos:end="5557:30"><name pos:start="5557:28" pos:end="5557:30">env</name></expr></argument>, <argument pos:start="5557:33" pos:end="5557:33"><expr pos:start="5557:33" pos:end="5557:33"><name pos:start="5557:33" pos:end="5557:33">s</name></expr></argument>, <argument pos:start="5557:36" pos:end="5557:40"><expr pos:start="5557:36" pos:end="5557:40"><name pos:start="5557:36" pos:end="5557:40">modrm</name></expr></argument>, <argument pos:start="5557:43" pos:end="5557:44"><expr pos:start="5557:43" pos:end="5557:44"><name pos:start="5557:43" pos:end="5557:44">ot</name></expr></argument>, <argument pos:start="5557:47" pos:end="5557:53"><expr pos:start="5557:47" pos:end="5557:53"><name pos:start="5557:47" pos:end="5557:53">OR_TMP0</name></expr></argument>, <argument pos:start="5557:56" pos:end="5557:56"><expr pos:start="5557:56" pos:end="5557:56"><literal type="number" pos:start="5557:56" pos:end="5557:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5559:13" pos:end="5559:18">break;</break>

        <case pos:start="5561:9" pos:end="5561:15">case <expr pos:start="5561:14" pos:end="5561:14"><literal type="number" pos:start="5561:14" pos:end="5561:14">2</literal></expr>:</case> <comment type="block" pos:start="5561:17" pos:end="5561:26">/* lldt */</comment>

            <if_stmt pos:start="5563:13" pos:end="5565:32"><if pos:start="5563:13" pos:end="5565:32">if <condition pos:start="5563:16" pos:end="5563:34">(<expr pos:start="5563:17" pos:end="5563:33"><operator pos:start="5563:17" pos:end="5563:17">!</operator><name pos:start="5563:18" pos:end="5563:22"><name pos:start="5563:18" pos:end="5563:18">s</name><operator pos:start="5563:19" pos:end="5563:20">-&gt;</operator><name pos:start="5563:21" pos:end="5563:22">pe</name></name> <operator pos:start="5563:24" pos:end="5563:25">||</operator> <name pos:start="5563:27" pos:end="5563:33"><name pos:start="5563:27" pos:end="5563:27">s</name><operator pos:start="5563:28" pos:end="5563:29">-&gt;</operator><name pos:start="5563:30" pos:end="5563:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5565:17" pos:end="5565:32"><block_content pos:start="5565:17" pos:end="5565:32">

                <goto pos:start="5565:17" pos:end="5565:32">goto <name pos:start="5565:22" pos:end="5565:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5567:13" pos:end="5581:13"><if pos:start="5567:13" pos:end="5571:13">if <condition pos:start="5567:16" pos:end="5567:28">(<expr pos:start="5567:17" pos:end="5567:27"><name pos:start="5567:17" pos:end="5567:22"><name pos:start="5567:17" pos:end="5567:17">s</name><operator pos:start="5567:18" pos:end="5567:19">-&gt;</operator><name pos:start="5567:20" pos:end="5567:22">cpl</name></name> <operator pos:start="5567:24" pos:end="5567:25">!=</operator> <literal type="number" pos:start="5567:27" pos:end="5567:27">0</literal></expr>)</condition> <block pos:start="5567:30" pos:end="5571:13">{<block_content pos:start="5569:17" pos:end="5569:68">

                <expr_stmt pos:start="5569:17" pos:end="5569:68"><expr pos:start="5569:17" pos:end="5569:67"><call pos:start="5569:17" pos:end="5569:67"><name pos:start="5569:17" pos:end="5569:29">gen_exception</name><argument_list pos:start="5569:30" pos:end="5569:67">(<argument pos:start="5569:31" pos:end="5569:31"><expr pos:start="5569:31" pos:end="5569:31"><name pos:start="5569:31" pos:end="5569:31">s</name></expr></argument>, <argument pos:start="5569:34" pos:end="5569:43"><expr pos:start="5569:34" pos:end="5569:43"><name pos:start="5569:34" pos:end="5569:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5569:46" pos:end="5569:66"><expr pos:start="5569:46" pos:end="5569:66"><name pos:start="5569:46" pos:end="5569:53">pc_start</name> <operator pos:start="5569:55" pos:end="5569:55">-</operator> <name pos:start="5569:57" pos:end="5569:66"><name pos:start="5569:57" pos:end="5569:57">s</name><operator pos:start="5569:58" pos:end="5569:59">-&gt;</operator><name pos:start="5569:60" pos:end="5569:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5571:15" pos:end="5581:13">else <block pos:start="5571:20" pos:end="5581:13">{<block_content pos:start="5573:17" pos:end="5579:55">

                <expr_stmt pos:start="5573:17" pos:end="5573:74"><expr pos:start="5573:17" pos:end="5573:73"><call pos:start="5573:17" pos:end="5573:73"><name pos:start="5573:17" pos:end="5573:39">gen_svm_check_intercept</name><argument_list pos:start="5573:40" pos:end="5573:73">(<argument pos:start="5573:41" pos:end="5573:41"><expr pos:start="5573:41" pos:end="5573:41"><name pos:start="5573:41" pos:end="5573:41">s</name></expr></argument>, <argument pos:start="5573:44" pos:end="5573:51"><expr pos:start="5573:44" pos:end="5573:51"><name pos:start="5573:44" pos:end="5573:51">pc_start</name></expr></argument>, <argument pos:start="5573:54" pos:end="5573:72"><expr pos:start="5573:54" pos:end="5573:72"><name pos:start="5573:54" pos:end="5573:72">SVM_EXIT_LDTR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5575:17" pos:end="5575:65"><expr pos:start="5575:17" pos:end="5575:64"><call pos:start="5575:17" pos:end="5575:64"><name pos:start="5575:17" pos:end="5575:30">gen_ldst_modrm</name><argument_list pos:start="5575:31" pos:end="5575:64">(<argument pos:start="5575:32" pos:end="5575:34"><expr pos:start="5575:32" pos:end="5575:34"><name pos:start="5575:32" pos:end="5575:34">env</name></expr></argument>, <argument pos:start="5575:37" pos:end="5575:37"><expr pos:start="5575:37" pos:end="5575:37"><name pos:start="5575:37" pos:end="5575:37">s</name></expr></argument>, <argument pos:start="5575:40" pos:end="5575:44"><expr pos:start="5575:40" pos:end="5575:44"><name pos:start="5575:40" pos:end="5575:44">modrm</name></expr></argument>, <argument pos:start="5575:47" pos:end="5575:51"><expr pos:start="5575:47" pos:end="5575:51"><name pos:start="5575:47" pos:end="5575:51">MO_16</name></expr></argument>, <argument pos:start="5575:54" pos:end="5575:60"><expr pos:start="5575:54" pos:end="5575:60"><name pos:start="5575:54" pos:end="5575:60">OR_TMP0</name></expr></argument>, <argument pos:start="5575:63" pos:end="5575:63"><expr pos:start="5575:63" pos:end="5575:63"><literal type="number" pos:start="5575:63" pos:end="5575:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5577:17" pos:end="5577:59"><expr pos:start="5577:17" pos:end="5577:58"><call pos:start="5577:17" pos:end="5577:58"><name pos:start="5577:17" pos:end="5577:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5577:37" pos:end="5577:58">(<argument pos:start="5577:38" pos:end="5577:49"><expr pos:start="5577:38" pos:end="5577:49"><name pos:start="5577:38" pos:end="5577:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5577:52" pos:end="5577:57"><expr pos:start="5577:52" pos:end="5577:57"><name pos:start="5577:52" pos:end="5577:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5579:17" pos:end="5579:55"><expr pos:start="5579:17" pos:end="5579:54"><call pos:start="5579:17" pos:end="5579:54"><name pos:start="5579:17" pos:end="5579:31">gen_helper_lldt</name><argument_list pos:start="5579:32" pos:end="5579:54">(<argument pos:start="5579:33" pos:end="5579:39"><expr pos:start="5579:33" pos:end="5579:39"><name pos:start="5579:33" pos:end="5579:39">cpu_env</name></expr></argument>, <argument pos:start="5579:42" pos:end="5579:53"><expr pos:start="5579:42" pos:end="5579:53"><name pos:start="5579:42" pos:end="5579:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="5583:13" pos:end="5583:18">break;</break>

        <case pos:start="5585:9" pos:end="5585:15">case <expr pos:start="5585:14" pos:end="5585:14"><literal type="number" pos:start="5585:14" pos:end="5585:14">1</literal></expr>:</case> <comment type="block" pos:start="5585:17" pos:end="5585:25">/* str */</comment>

            <if_stmt pos:start="5587:13" pos:end="5589:32"><if pos:start="5587:13" pos:end="5589:32">if <condition pos:start="5587:16" pos:end="5587:34">(<expr pos:start="5587:17" pos:end="5587:33"><operator pos:start="5587:17" pos:end="5587:17">!</operator><name pos:start="5587:18" pos:end="5587:22"><name pos:start="5587:18" pos:end="5587:18">s</name><operator pos:start="5587:19" pos:end="5587:20">-&gt;</operator><name pos:start="5587:21" pos:end="5587:22">pe</name></name> <operator pos:start="5587:24" pos:end="5587:25">||</operator> <name pos:start="5587:27" pos:end="5587:33"><name pos:start="5587:27" pos:end="5587:27">s</name><operator pos:start="5587:28" pos:end="5587:29">-&gt;</operator><name pos:start="5587:30" pos:end="5587:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5589:17" pos:end="5589:32"><block_content pos:start="5589:17" pos:end="5589:32">

                <goto pos:start="5589:17" pos:end="5589:32">goto <name pos:start="5589:22" pos:end="5589:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5591:13" pos:end="5591:67"><expr pos:start="5591:13" pos:end="5591:66"><call pos:start="5591:13" pos:end="5591:66"><name pos:start="5591:13" pos:end="5591:35">gen_svm_check_intercept</name><argument_list pos:start="5591:36" pos:end="5591:66">(<argument pos:start="5591:37" pos:end="5591:37"><expr pos:start="5591:37" pos:end="5591:37"><name pos:start="5591:37" pos:end="5591:37">s</name></expr></argument>, <argument pos:start="5591:40" pos:end="5591:47"><expr pos:start="5591:40" pos:end="5591:47"><name pos:start="5591:40" pos:end="5591:47">pc_start</name></expr></argument>, <argument pos:start="5591:50" pos:end="5591:65"><expr pos:start="5591:50" pos:end="5591:65"><name pos:start="5591:50" pos:end="5591:65">SVM_EXIT_TR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5593:13" pos:end="5595:65"><expr pos:start="5593:13" pos:end="5595:64"><call pos:start="5593:13" pos:end="5595:64"><name pos:start="5593:13" pos:end="5593:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5593:29" pos:end="5595:64">(<argument pos:start="5593:30" pos:end="5593:35"><expr pos:start="5593:30" pos:end="5593:35"><name pos:start="5593:30" pos:end="5593:35">cpu_T0</name></expr></argument>, <argument pos:start="5593:38" pos:end="5593:44"><expr pos:start="5593:38" pos:end="5593:44"><name pos:start="5593:38" pos:end="5593:44">cpu_env</name></expr></argument>,

                             <argument pos:start="5595:30" pos:end="5595:63"><expr pos:start="5595:30" pos:end="5595:63"><call pos:start="5595:30" pos:end="5595:63"><name pos:start="5595:30" pos:end="5595:37">offsetof</name><argument_list pos:start="5595:38" pos:end="5595:63">(<argument pos:start="5595:39" pos:end="5595:49"><expr pos:start="5595:39" pos:end="5595:49"><name pos:start="5595:39" pos:end="5595:49">CPUX86State</name></expr></argument>, <argument pos:start="5595:52" pos:end="5595:62"><expr pos:start="5595:52" pos:end="5595:62"><name pos:start="5595:52" pos:end="5595:62"><name pos:start="5595:52" pos:end="5595:53">tr</name><operator pos:start="5595:54" pos:end="5595:54">.</operator><name pos:start="5595:55" pos:end="5595:62">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5597:13" pos:end="5597:42"><expr pos:start="5597:13" pos:end="5597:41"><name pos:start="5597:13" pos:end="5597:14">ot</name> <operator pos:start="5597:16" pos:end="5597:16">=</operator> <ternary pos:start="5597:18" pos:end="5597:41"><condition pos:start="5597:18" pos:end="5597:27"><expr pos:start="5597:18" pos:end="5597:25"><name pos:start="5597:18" pos:end="5597:20">mod</name> <operator pos:start="5597:22" pos:end="5597:23">==</operator> <literal type="number" pos:start="5597:25" pos:end="5597:25">3</literal></expr> ?</condition><then pos:start="5597:29" pos:end="5597:33"> <expr pos:start="5597:29" pos:end="5597:33"><name pos:start="5597:29" pos:end="5597:33">dflag</name></expr> </then><else pos:start="5597:35" pos:end="5597:41">: <expr pos:start="5597:37" pos:end="5597:41"><name pos:start="5597:37" pos:end="5597:41">MO_16</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="5599:13" pos:end="5599:58"><expr pos:start="5599:13" pos:end="5599:57"><call pos:start="5599:13" pos:end="5599:57"><name pos:start="5599:13" pos:end="5599:26">gen_ldst_modrm</name><argument_list pos:start="5599:27" pos:end="5599:57">(<argument pos:start="5599:28" pos:end="5599:30"><expr pos:start="5599:28" pos:end="5599:30"><name pos:start="5599:28" pos:end="5599:30">env</name></expr></argument>, <argument pos:start="5599:33" pos:end="5599:33"><expr pos:start="5599:33" pos:end="5599:33"><name pos:start="5599:33" pos:end="5599:33">s</name></expr></argument>, <argument pos:start="5599:36" pos:end="5599:40"><expr pos:start="5599:36" pos:end="5599:40"><name pos:start="5599:36" pos:end="5599:40">modrm</name></expr></argument>, <argument pos:start="5599:43" pos:end="5599:44"><expr pos:start="5599:43" pos:end="5599:44"><name pos:start="5599:43" pos:end="5599:44">ot</name></expr></argument>, <argument pos:start="5599:47" pos:end="5599:53"><expr pos:start="5599:47" pos:end="5599:53"><name pos:start="5599:47" pos:end="5599:53">OR_TMP0</name></expr></argument>, <argument pos:start="5599:56" pos:end="5599:56"><expr pos:start="5599:56" pos:end="5599:56"><literal type="number" pos:start="5599:56" pos:end="5599:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5601:13" pos:end="5601:18">break;</break>

        <case pos:start="5603:9" pos:end="5603:15">case <expr pos:start="5603:14" pos:end="5603:14"><literal type="number" pos:start="5603:14" pos:end="5603:14">3</literal></expr>:</case> <comment type="block" pos:start="5603:17" pos:end="5603:25">/* ltr */</comment>

            <if_stmt pos:start="5605:13" pos:end="5607:32"><if pos:start="5605:13" pos:end="5607:32">if <condition pos:start="5605:16" pos:end="5605:34">(<expr pos:start="5605:17" pos:end="5605:33"><operator pos:start="5605:17" pos:end="5605:17">!</operator><name pos:start="5605:18" pos:end="5605:22"><name pos:start="5605:18" pos:end="5605:18">s</name><operator pos:start="5605:19" pos:end="5605:20">-&gt;</operator><name pos:start="5605:21" pos:end="5605:22">pe</name></name> <operator pos:start="5605:24" pos:end="5605:25">||</operator> <name pos:start="5605:27" pos:end="5605:33"><name pos:start="5605:27" pos:end="5605:27">s</name><operator pos:start="5605:28" pos:end="5605:29">-&gt;</operator><name pos:start="5605:30" pos:end="5605:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5607:17" pos:end="5607:32"><block_content pos:start="5607:17" pos:end="5607:32">

                <goto pos:start="5607:17" pos:end="5607:32">goto <name pos:start="5607:22" pos:end="5607:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5609:13" pos:end="5623:13"><if pos:start="5609:13" pos:end="5613:13">if <condition pos:start="5609:16" pos:end="5609:28">(<expr pos:start="5609:17" pos:end="5609:27"><name pos:start="5609:17" pos:end="5609:22"><name pos:start="5609:17" pos:end="5609:17">s</name><operator pos:start="5609:18" pos:end="5609:19">-&gt;</operator><name pos:start="5609:20" pos:end="5609:22">cpl</name></name> <operator pos:start="5609:24" pos:end="5609:25">!=</operator> <literal type="number" pos:start="5609:27" pos:end="5609:27">0</literal></expr>)</condition> <block pos:start="5609:30" pos:end="5613:13">{<block_content pos:start="5611:17" pos:end="5611:68">

                <expr_stmt pos:start="5611:17" pos:end="5611:68"><expr pos:start="5611:17" pos:end="5611:67"><call pos:start="5611:17" pos:end="5611:67"><name pos:start="5611:17" pos:end="5611:29">gen_exception</name><argument_list pos:start="5611:30" pos:end="5611:67">(<argument pos:start="5611:31" pos:end="5611:31"><expr pos:start="5611:31" pos:end="5611:31"><name pos:start="5611:31" pos:end="5611:31">s</name></expr></argument>, <argument pos:start="5611:34" pos:end="5611:43"><expr pos:start="5611:34" pos:end="5611:43"><name pos:start="5611:34" pos:end="5611:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5611:46" pos:end="5611:66"><expr pos:start="5611:46" pos:end="5611:66"><name pos:start="5611:46" pos:end="5611:53">pc_start</name> <operator pos:start="5611:55" pos:end="5611:55">-</operator> <name pos:start="5611:57" pos:end="5611:66"><name pos:start="5611:57" pos:end="5611:57">s</name><operator pos:start="5611:58" pos:end="5611:59">-&gt;</operator><name pos:start="5611:60" pos:end="5611:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5613:15" pos:end="5623:13">else <block pos:start="5613:20" pos:end="5623:13">{<block_content pos:start="5615:17" pos:end="5621:54">

                <expr_stmt pos:start="5615:17" pos:end="5615:72"><expr pos:start="5615:17" pos:end="5615:71"><call pos:start="5615:17" pos:end="5615:71"><name pos:start="5615:17" pos:end="5615:39">gen_svm_check_intercept</name><argument_list pos:start="5615:40" pos:end="5615:71">(<argument pos:start="5615:41" pos:end="5615:41"><expr pos:start="5615:41" pos:end="5615:41"><name pos:start="5615:41" pos:end="5615:41">s</name></expr></argument>, <argument pos:start="5615:44" pos:end="5615:51"><expr pos:start="5615:44" pos:end="5615:51"><name pos:start="5615:44" pos:end="5615:51">pc_start</name></expr></argument>, <argument pos:start="5615:54" pos:end="5615:70"><expr pos:start="5615:54" pos:end="5615:70"><name pos:start="5615:54" pos:end="5615:70">SVM_EXIT_TR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5617:17" pos:end="5617:65"><expr pos:start="5617:17" pos:end="5617:64"><call pos:start="5617:17" pos:end="5617:64"><name pos:start="5617:17" pos:end="5617:30">gen_ldst_modrm</name><argument_list pos:start="5617:31" pos:end="5617:64">(<argument pos:start="5617:32" pos:end="5617:34"><expr pos:start="5617:32" pos:end="5617:34"><name pos:start="5617:32" pos:end="5617:34">env</name></expr></argument>, <argument pos:start="5617:37" pos:end="5617:37"><expr pos:start="5617:37" pos:end="5617:37"><name pos:start="5617:37" pos:end="5617:37">s</name></expr></argument>, <argument pos:start="5617:40" pos:end="5617:44"><expr pos:start="5617:40" pos:end="5617:44"><name pos:start="5617:40" pos:end="5617:44">modrm</name></expr></argument>, <argument pos:start="5617:47" pos:end="5617:51"><expr pos:start="5617:47" pos:end="5617:51"><name pos:start="5617:47" pos:end="5617:51">MO_16</name></expr></argument>, <argument pos:start="5617:54" pos:end="5617:60"><expr pos:start="5617:54" pos:end="5617:60"><name pos:start="5617:54" pos:end="5617:60">OR_TMP0</name></expr></argument>, <argument pos:start="5617:63" pos:end="5617:63"><expr pos:start="5617:63" pos:end="5617:63"><literal type="number" pos:start="5617:63" pos:end="5617:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5619:17" pos:end="5619:59"><expr pos:start="5619:17" pos:end="5619:58"><call pos:start="5619:17" pos:end="5619:58"><name pos:start="5619:17" pos:end="5619:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5619:37" pos:end="5619:58">(<argument pos:start="5619:38" pos:end="5619:49"><expr pos:start="5619:38" pos:end="5619:49"><name pos:start="5619:38" pos:end="5619:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5619:52" pos:end="5619:57"><expr pos:start="5619:52" pos:end="5619:57"><name pos:start="5619:52" pos:end="5619:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5621:17" pos:end="5621:54"><expr pos:start="5621:17" pos:end="5621:53"><call pos:start="5621:17" pos:end="5621:53"><name pos:start="5621:17" pos:end="5621:30">gen_helper_ltr</name><argument_list pos:start="5621:31" pos:end="5621:53">(<argument pos:start="5621:32" pos:end="5621:38"><expr pos:start="5621:32" pos:end="5621:38"><name pos:start="5621:32" pos:end="5621:38">cpu_env</name></expr></argument>, <argument pos:start="5621:41" pos:end="5621:52"><expr pos:start="5621:41" pos:end="5621:52"><name pos:start="5621:41" pos:end="5621:52">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="5625:13" pos:end="5625:18">break;</break>

        <case pos:start="5627:9" pos:end="5627:15">case <expr pos:start="5627:14" pos:end="5627:14"><literal type="number" pos:start="5627:14" pos:end="5627:14">4</literal></expr>:</case> <comment type="block" pos:start="5627:17" pos:end="5627:26">/* verr */</comment>

        <case pos:start="5629:9" pos:end="5629:15">case <expr pos:start="5629:14" pos:end="5629:14"><literal type="number" pos:start="5629:14" pos:end="5629:14">5</literal></expr>:</case> <comment type="block" pos:start="5629:17" pos:end="5629:26">/* verw */</comment>

            <if_stmt pos:start="5631:13" pos:end="5633:32"><if pos:start="5631:13" pos:end="5633:32">if <condition pos:start="5631:16" pos:end="5631:34">(<expr pos:start="5631:17" pos:end="5631:33"><operator pos:start="5631:17" pos:end="5631:17">!</operator><name pos:start="5631:18" pos:end="5631:22"><name pos:start="5631:18" pos:end="5631:18">s</name><operator pos:start="5631:19" pos:end="5631:20">-&gt;</operator><name pos:start="5631:21" pos:end="5631:22">pe</name></name> <operator pos:start="5631:24" pos:end="5631:25">||</operator> <name pos:start="5631:27" pos:end="5631:33"><name pos:start="5631:27" pos:end="5631:27">s</name><operator pos:start="5631:28" pos:end="5631:29">-&gt;</operator><name pos:start="5631:30" pos:end="5631:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5633:17" pos:end="5633:32"><block_content pos:start="5633:17" pos:end="5633:32">

                <goto pos:start="5633:17" pos:end="5633:32">goto <name pos:start="5633:22" pos:end="5633:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5635:13" pos:end="5635:61"><expr pos:start="5635:13" pos:end="5635:60"><call pos:start="5635:13" pos:end="5635:60"><name pos:start="5635:13" pos:end="5635:26">gen_ldst_modrm</name><argument_list pos:start="5635:27" pos:end="5635:60">(<argument pos:start="5635:28" pos:end="5635:30"><expr pos:start="5635:28" pos:end="5635:30"><name pos:start="5635:28" pos:end="5635:30">env</name></expr></argument>, <argument pos:start="5635:33" pos:end="5635:33"><expr pos:start="5635:33" pos:end="5635:33"><name pos:start="5635:33" pos:end="5635:33">s</name></expr></argument>, <argument pos:start="5635:36" pos:end="5635:40"><expr pos:start="5635:36" pos:end="5635:40"><name pos:start="5635:36" pos:end="5635:40">modrm</name></expr></argument>, <argument pos:start="5635:43" pos:end="5635:47"><expr pos:start="5635:43" pos:end="5635:47"><name pos:start="5635:43" pos:end="5635:47">MO_16</name></expr></argument>, <argument pos:start="5635:50" pos:end="5635:56"><expr pos:start="5635:50" pos:end="5635:56"><name pos:start="5635:50" pos:end="5635:56">OR_TMP0</name></expr></argument>, <argument pos:start="5635:59" pos:end="5635:59"><expr pos:start="5635:59" pos:end="5635:59"><literal type="number" pos:start="5635:59" pos:end="5635:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5637:13" pos:end="5637:32"><expr pos:start="5637:13" pos:end="5637:31"><call pos:start="5637:13" pos:end="5637:31"><name pos:start="5637:13" pos:end="5637:28">gen_update_cc_op</name><argument_list pos:start="5637:29" pos:end="5637:31">(<argument pos:start="5637:30" pos:end="5637:30"><expr pos:start="5637:30" pos:end="5637:30"><name pos:start="5637:30" pos:end="5637:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5639:13" pos:end="5647:13"><if pos:start="5639:13" pos:end="5643:13">if <condition pos:start="5639:16" pos:end="5639:24">(<expr pos:start="5639:17" pos:end="5639:23"><name pos:start="5639:17" pos:end="5639:18">op</name> <operator pos:start="5639:20" pos:end="5639:21">==</operator> <literal type="number" pos:start="5639:23" pos:end="5639:23">4</literal></expr>)</condition> <block pos:start="5639:26" pos:end="5643:13">{<block_content pos:start="5641:17" pos:end="5641:49">

                <expr_stmt pos:start="5641:17" pos:end="5641:49"><expr pos:start="5641:17" pos:end="5641:48"><call pos:start="5641:17" pos:end="5641:48"><name pos:start="5641:17" pos:end="5641:31">gen_helper_verr</name><argument_list pos:start="5641:32" pos:end="5641:48">(<argument pos:start="5641:33" pos:end="5641:39"><expr pos:start="5641:33" pos:end="5641:39"><name pos:start="5641:33" pos:end="5641:39">cpu_env</name></expr></argument>, <argument pos:start="5641:42" pos:end="5641:47"><expr pos:start="5641:42" pos:end="5641:47"><name pos:start="5641:42" pos:end="5641:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5643:15" pos:end="5647:13">else <block pos:start="5643:20" pos:end="5647:13">{<block_content pos:start="5645:17" pos:end="5645:49">

                <expr_stmt pos:start="5645:17" pos:end="5645:49"><expr pos:start="5645:17" pos:end="5645:48"><call pos:start="5645:17" pos:end="5645:48"><name pos:start="5645:17" pos:end="5645:31">gen_helper_verw</name><argument_list pos:start="5645:32" pos:end="5645:48">(<argument pos:start="5645:33" pos:end="5645:39"><expr pos:start="5645:33" pos:end="5645:39"><name pos:start="5645:33" pos:end="5645:39">cpu_env</name></expr></argument>, <argument pos:start="5645:42" pos:end="5645:47"><expr pos:start="5645:42" pos:end="5645:47"><name pos:start="5645:42" pos:end="5645:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="5649:13" pos:end="5649:39"><expr pos:start="5649:13" pos:end="5649:38"><call pos:start="5649:13" pos:end="5649:38"><name pos:start="5649:13" pos:end="5649:21">set_cc_op</name><argument_list pos:start="5649:22" pos:end="5649:38">(<argument pos:start="5649:23" pos:end="5649:23"><expr pos:start="5649:23" pos:end="5649:23"><name pos:start="5649:23" pos:end="5649:23">s</name></expr></argument>, <argument pos:start="5649:26" pos:end="5649:37"><expr pos:start="5649:26" pos:end="5649:37"><name pos:start="5649:26" pos:end="5649:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5651:13" pos:end="5651:18">break;</break>

        <default pos:start="5653:9" pos:end="5653:16">default:</default>

            <goto pos:start="5655:13" pos:end="5655:28">goto <name pos:start="5655:18" pos:end="5655:27">unknown_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="5659:9" pos:end="5659:14">break;</break>



    <case pos:start="5663:5" pos:end="5663:15">case <expr pos:start="5663:10" pos:end="5663:14"><literal type="number" pos:start="5663:10" pos:end="5663:14">0x101</literal></expr>:</case>

        <expr_stmt pos:start="5665:9" pos:end="5665:38"><expr pos:start="5665:9" pos:end="5665:37"><name pos:start="5665:9" pos:end="5665:13">modrm</name> <operator pos:start="5665:15" pos:end="5665:15">=</operator> <call pos:start="5665:17" pos:end="5665:37"><name pos:start="5665:17" pos:end="5665:29">x86_ldub_code</name><argument_list pos:start="5665:30" pos:end="5665:37">(<argument pos:start="5665:31" pos:end="5665:33"><expr pos:start="5665:31" pos:end="5665:33"><name pos:start="5665:31" pos:end="5665:33">env</name></expr></argument>, <argument pos:start="5665:36" pos:end="5665:36"><expr pos:start="5665:36" pos:end="5665:36"><name pos:start="5665:36" pos:end="5665:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="5667:9" pos:end="6317:9">switch <condition pos:start="5667:16" pos:end="5667:22">(<expr pos:start="5667:17" pos:end="5667:21"><name pos:start="5667:17" pos:end="5667:21">modrm</name></expr>)</condition> <block pos:start="5667:24" pos:end="6317:9">{<block_content pos:start="5669:9" pos:end="6315:28">

        <expr_stmt pos:start="5669:9" pos:end="5671:69"><expr pos:start="5669:9" pos:end="5671:68"><call pos:start="5669:9" pos:end="5669:28"><name pos:start="5669:9" pos:end="5669:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="5669:26" pos:end="5669:28">(<argument pos:start="5669:27" pos:end="5669:27"><expr pos:start="5669:27" pos:end="5669:27"><literal type="number" pos:start="5669:27" pos:end="5669:27">0</literal></expr></argument>)</argument_list></call><operator pos:start="5669:29" pos:end="5669:29">:</operator> <comment type="block" pos:start="5669:31" pos:end="5669:40">/* sgdt */</comment>

            <call pos:start="5671:13" pos:end="5671:68"><name pos:start="5671:13" pos:end="5671:35">gen_svm_check_intercept</name><argument_list pos:start="5671:36" pos:end="5671:68">(<argument pos:start="5671:37" pos:end="5671:37"><expr pos:start="5671:37" pos:end="5671:37"><name pos:start="5671:37" pos:end="5671:37">s</name></expr></argument>, <argument pos:start="5671:40" pos:end="5671:47"><expr pos:start="5671:40" pos:end="5671:47"><name pos:start="5671:40" pos:end="5671:47">pc_start</name></expr></argument>, <argument pos:start="5671:50" pos:end="5671:67"><expr pos:start="5671:50" pos:end="5671:67"><name pos:start="5671:50" pos:end="5671:67">SVM_EXIT_GDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5673:13" pos:end="5673:41"><expr pos:start="5673:13" pos:end="5673:40"><call pos:start="5673:13" pos:end="5673:40"><name pos:start="5673:13" pos:end="5673:25">gen_lea_modrm</name><argument_list pos:start="5673:26" pos:end="5673:40">(<argument pos:start="5673:27" pos:end="5673:29"><expr pos:start="5673:27" pos:end="5673:29"><name pos:start="5673:27" pos:end="5673:29">env</name></expr></argument>, <argument pos:start="5673:32" pos:end="5673:32"><expr pos:start="5673:32" pos:end="5673:32"><name pos:start="5673:32" pos:end="5673:32">s</name></expr></argument>, <argument pos:start="5673:35" pos:end="5673:39"><expr pos:start="5673:35" pos:end="5673:39"><name pos:start="5673:35" pos:end="5673:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5675:13" pos:end="5677:72"><expr pos:start="5675:13" pos:end="5677:71"><call pos:start="5675:13" pos:end="5677:71"><name pos:start="5675:13" pos:end="5675:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5675:29" pos:end="5677:71">(<argument pos:start="5675:30" pos:end="5675:35"><expr pos:start="5675:30" pos:end="5675:35"><name pos:start="5675:30" pos:end="5675:35">cpu_T0</name></expr></argument>,

                             <argument pos:start="5677:30" pos:end="5677:36"><expr pos:start="5677:30" pos:end="5677:36"><name pos:start="5677:30" pos:end="5677:36">cpu_env</name></expr></argument>, <argument pos:start="5677:39" pos:end="5677:70"><expr pos:start="5677:39" pos:end="5677:70"><call pos:start="5677:39" pos:end="5677:70"><name pos:start="5677:39" pos:end="5677:46">offsetof</name><argument_list pos:start="5677:47" pos:end="5677:70">(<argument pos:start="5677:48" pos:end="5677:58"><expr pos:start="5677:48" pos:end="5677:58"><name pos:start="5677:48" pos:end="5677:58">CPUX86State</name></expr></argument>, <argument pos:start="5677:61" pos:end="5677:69"><expr pos:start="5677:61" pos:end="5677:69"><name pos:start="5677:61" pos:end="5677:69"><name pos:start="5677:61" pos:end="5677:63">gdt</name><operator pos:start="5677:64" pos:end="5677:64">.</operator><name pos:start="5677:65" pos:end="5677:69">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5679:13" pos:end="5679:50"><expr pos:start="5679:13" pos:end="5679:49"><call pos:start="5679:13" pos:end="5679:49"><name pos:start="5679:13" pos:end="5679:23">gen_op_st_v</name><argument_list pos:start="5679:24" pos:end="5679:49">(<argument pos:start="5679:25" pos:end="5679:25"><expr pos:start="5679:25" pos:end="5679:25"><name pos:start="5679:25" pos:end="5679:25">s</name></expr></argument>, <argument pos:start="5679:28" pos:end="5679:32"><expr pos:start="5679:28" pos:end="5679:32"><name pos:start="5679:28" pos:end="5679:32">MO_16</name></expr></argument>, <argument pos:start="5679:35" pos:end="5679:40"><expr pos:start="5679:35" pos:end="5679:40"><name pos:start="5679:35" pos:end="5679:40">cpu_T0</name></expr></argument>, <argument pos:start="5679:43" pos:end="5679:48"><expr pos:start="5679:43" pos:end="5679:48"><name pos:start="5679:43" pos:end="5679:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5681:13" pos:end="5681:32"><expr pos:start="5681:13" pos:end="5681:31"><call pos:start="5681:13" pos:end="5681:31"><name pos:start="5681:13" pos:end="5681:25">gen_add_A0_im</name><argument_list pos:start="5681:26" pos:end="5681:31">(<argument pos:start="5681:27" pos:end="5681:27"><expr pos:start="5681:27" pos:end="5681:27"><name pos:start="5681:27" pos:end="5681:27">s</name></expr></argument>, <argument pos:start="5681:30" pos:end="5681:30"><expr pos:start="5681:30" pos:end="5681:30"><literal type="number" pos:start="5681:30" pos:end="5681:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5683:13" pos:end="5683:76"><expr pos:start="5683:13" pos:end="5683:75"><call pos:start="5683:13" pos:end="5683:75"><name pos:start="5683:13" pos:end="5683:25">tcg_gen_ld_tl</name><argument_list pos:start="5683:26" pos:end="5683:75">(<argument pos:start="5683:27" pos:end="5683:32"><expr pos:start="5683:27" pos:end="5683:32"><name pos:start="5683:27" pos:end="5683:32">cpu_T0</name></expr></argument>, <argument pos:start="5683:35" pos:end="5683:41"><expr pos:start="5683:35" pos:end="5683:41"><name pos:start="5683:35" pos:end="5683:41">cpu_env</name></expr></argument>, <argument pos:start="5683:44" pos:end="5683:74"><expr pos:start="5683:44" pos:end="5683:74"><call pos:start="5683:44" pos:end="5683:74"><name pos:start="5683:44" pos:end="5683:51">offsetof</name><argument_list pos:start="5683:52" pos:end="5683:74">(<argument pos:start="5683:53" pos:end="5683:63"><expr pos:start="5683:53" pos:end="5683:63"><name pos:start="5683:53" pos:end="5683:63">CPUX86State</name></expr></argument>, <argument pos:start="5683:66" pos:end="5683:73"><expr pos:start="5683:66" pos:end="5683:73"><name pos:start="5683:66" pos:end="5683:73"><name pos:start="5683:66" pos:end="5683:68">gdt</name><operator pos:start="5683:69" pos:end="5683:69">.</operator><name pos:start="5683:70" pos:end="5683:73">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5685:13" pos:end="5689:13"><if pos:start="5685:13" pos:end="5689:13">if <condition pos:start="5685:16" pos:end="5685:31">(<expr pos:start="5685:17" pos:end="5685:30"><name pos:start="5685:17" pos:end="5685:21">dflag</name> <operator pos:start="5685:23" pos:end="5685:24">==</operator> <name pos:start="5685:26" pos:end="5685:30">MO_16</name></expr>)</condition> <block pos:start="5685:33" pos:end="5689:13">{<block_content pos:start="5687:17" pos:end="5687:58">

                <expr_stmt pos:start="5687:17" pos:end="5687:58"><expr pos:start="5687:17" pos:end="5687:57"><call pos:start="5687:17" pos:end="5687:57"><name pos:start="5687:17" pos:end="5687:31">tcg_gen_andi_tl</name><argument_list pos:start="5687:32" pos:end="5687:57">(<argument pos:start="5687:33" pos:end="5687:38"><expr pos:start="5687:33" pos:end="5687:38"><name pos:start="5687:33" pos:end="5687:38">cpu_T0</name></expr></argument>, <argument pos:start="5687:41" pos:end="5687:46"><expr pos:start="5687:41" pos:end="5687:46"><name pos:start="5687:41" pos:end="5687:46">cpu_T0</name></expr></argument>, <argument pos:start="5687:49" pos:end="5687:56"><expr pos:start="5687:49" pos:end="5687:56"><literal type="number" pos:start="5687:49" pos:end="5687:56">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5691:13" pos:end="5691:62"><expr pos:start="5691:13" pos:end="5691:61"><call pos:start="5691:13" pos:end="5691:61"><name pos:start="5691:13" pos:end="5691:23">gen_op_st_v</name><argument_list pos:start="5691:24" pos:end="5691:61">(<argument pos:start="5691:25" pos:end="5691:25"><expr pos:start="5691:25" pos:end="5691:25"><name pos:start="5691:25" pos:end="5691:25">s</name></expr></argument>, <argument pos:start="5691:28" pos:end="5691:44"><expr pos:start="5691:28" pos:end="5691:44"><call pos:start="5691:28" pos:end="5691:36"><name pos:start="5691:28" pos:end="5691:33">CODE64</name><argument_list pos:start="5691:34" pos:end="5691:36">(<argument pos:start="5691:35" pos:end="5691:35"><expr pos:start="5691:35" pos:end="5691:35"><name pos:start="5691:35" pos:end="5691:35">s</name></expr></argument>)</argument_list></call> <operator pos:start="5691:38" pos:end="5691:38">+</operator> <name pos:start="5691:40" pos:end="5691:44">MO_32</name></expr></argument>, <argument pos:start="5691:47" pos:end="5691:52"><expr pos:start="5691:47" pos:end="5691:52"><name pos:start="5691:47" pos:end="5691:52">cpu_T0</name></expr></argument>, <argument pos:start="5691:55" pos:end="5691:60"><expr pos:start="5691:55" pos:end="5691:60"><name pos:start="5691:55" pos:end="5691:60">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5693:13" pos:end="5693:18">break;</break>



        <case pos:start="5697:9" pos:end="5697:18">case <expr pos:start="5697:14" pos:end="5697:17"><literal type="number" pos:start="5697:14" pos:end="5697:17">0xc8</literal></expr>:</case> <comment type="block" pos:start="5697:20" pos:end="5697:32">/* monitor */</comment>

            <if_stmt pos:start="5699:13" pos:end="5703:13"><if pos:start="5699:13" pos:end="5703:13">if <condition pos:start="5699:16" pos:end="5699:76">(<expr pos:start="5699:17" pos:end="5699:75"><operator pos:start="5699:17" pos:end="5699:17">!</operator><operator pos:start="5699:18" pos:end="5699:18">(</operator><name pos:start="5699:19" pos:end="5699:39"><name pos:start="5699:19" pos:end="5699:19">s</name><operator pos:start="5699:20" pos:end="5699:21">-&gt;</operator><name pos:start="5699:22" pos:end="5699:39">cpuid_ext_features</name></name> <operator pos:start="5699:41" pos:end="5699:41">&amp;</operator> <name pos:start="5699:43" pos:end="5699:59">CPUID_EXT_MONITOR</name><operator pos:start="5699:60" pos:end="5699:60">)</operator> <operator pos:start="5699:62" pos:end="5699:63">||</operator> <name pos:start="5699:65" pos:end="5699:70"><name pos:start="5699:65" pos:end="5699:65">s</name><operator pos:start="5699:66" pos:end="5699:67">-&gt;</operator><name pos:start="5699:68" pos:end="5699:70">cpl</name></name> <operator pos:start="5699:72" pos:end="5699:73">!=</operator> <literal type="number" pos:start="5699:75" pos:end="5699:75">0</literal></expr>)</condition> <block pos:start="5699:78" pos:end="5703:13">{<block_content pos:start="5701:17" pos:end="5701:32">

                <goto pos:start="5701:17" pos:end="5701:32">goto <name pos:start="5701:22" pos:end="5701:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5705:13" pos:end="5705:32"><expr pos:start="5705:13" pos:end="5705:31"><call pos:start="5705:13" pos:end="5705:31"><name pos:start="5705:13" pos:end="5705:28">gen_update_cc_op</name><argument_list pos:start="5705:29" pos:end="5705:31">(<argument pos:start="5705:30" pos:end="5705:30"><expr pos:start="5705:30" pos:end="5705:30"><name pos:start="5705:30" pos:end="5705:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5707:13" pos:end="5707:46"><expr pos:start="5707:13" pos:end="5707:45"><call pos:start="5707:13" pos:end="5707:45"><name pos:start="5707:13" pos:end="5707:22">gen_jmp_im</name><argument_list pos:start="5707:23" pos:end="5707:45">(<argument pos:start="5707:24" pos:end="5707:44"><expr pos:start="5707:24" pos:end="5707:44"><name pos:start="5707:24" pos:end="5707:31">pc_start</name> <operator pos:start="5707:33" pos:end="5707:33">-</operator> <name pos:start="5707:35" pos:end="5707:44"><name pos:start="5707:35" pos:end="5707:35">s</name><operator pos:start="5707:36" pos:end="5707:37">-&gt;</operator><name pos:start="5707:38" pos:end="5707:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5709:13" pos:end="5709:52"><expr pos:start="5709:13" pos:end="5709:51"><call pos:start="5709:13" pos:end="5709:51"><name pos:start="5709:13" pos:end="5709:26">tcg_gen_mov_tl</name><argument_list pos:start="5709:27" pos:end="5709:51">(<argument pos:start="5709:28" pos:end="5709:33"><expr pos:start="5709:28" pos:end="5709:33"><name pos:start="5709:28" pos:end="5709:33">cpu_A0</name></expr></argument>, <argument pos:start="5709:36" pos:end="5709:50"><expr pos:start="5709:36" pos:end="5709:50"><name pos:start="5709:36" pos:end="5709:50"><name pos:start="5709:36" pos:end="5709:43">cpu_regs</name><index pos:start="5709:44" pos:end="5709:50">[<expr pos:start="5709:45" pos:end="5709:49"><name pos:start="5709:45" pos:end="5709:49">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5711:13" pos:end="5711:39"><expr pos:start="5711:13" pos:end="5711:38"><call pos:start="5711:13" pos:end="5711:38"><name pos:start="5711:13" pos:end="5711:20">gen_extu</name><argument_list pos:start="5711:21" pos:end="5711:38">(<argument pos:start="5711:22" pos:end="5711:29"><expr pos:start="5711:22" pos:end="5711:29"><name pos:start="5711:22" pos:end="5711:29"><name pos:start="5711:22" pos:end="5711:22">s</name><operator pos:start="5711:23" pos:end="5711:24">-&gt;</operator><name pos:start="5711:25" pos:end="5711:29">aflag</name></name></expr></argument>, <argument pos:start="5711:32" pos:end="5711:37"><expr pos:start="5711:32" pos:end="5711:37"><name pos:start="5711:32" pos:end="5711:37">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5713:13" pos:end="5713:33"><expr pos:start="5713:13" pos:end="5713:32"><call pos:start="5713:13" pos:end="5713:32"><name pos:start="5713:13" pos:end="5713:29">gen_add_A0_ds_seg</name><argument_list pos:start="5713:30" pos:end="5713:32">(<argument pos:start="5713:31" pos:end="5713:31"><expr pos:start="5713:31" pos:end="5713:31"><name pos:start="5713:31" pos:end="5713:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5715:13" pos:end="5715:48"><expr pos:start="5715:13" pos:end="5715:47"><call pos:start="5715:13" pos:end="5715:47"><name pos:start="5715:13" pos:end="5715:30">gen_helper_monitor</name><argument_list pos:start="5715:31" pos:end="5715:47">(<argument pos:start="5715:32" pos:end="5715:38"><expr pos:start="5715:32" pos:end="5715:38"><name pos:start="5715:32" pos:end="5715:38">cpu_env</name></expr></argument>, <argument pos:start="5715:41" pos:end="5715:46"><expr pos:start="5715:41" pos:end="5715:46"><name pos:start="5715:41" pos:end="5715:46">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5717:13" pos:end="5717:18">break;</break>



        <case pos:start="5721:9" pos:end="5721:18">case <expr pos:start="5721:14" pos:end="5721:17"><literal type="number" pos:start="5721:14" pos:end="5721:17">0xc9</literal></expr>:</case> <comment type="block" pos:start="5721:20" pos:end="5721:30">/* mwait */</comment>

            <if_stmt pos:start="5723:13" pos:end="5727:13"><if pos:start="5723:13" pos:end="5727:13">if <condition pos:start="5723:16" pos:end="5723:76">(<expr pos:start="5723:17" pos:end="5723:75"><operator pos:start="5723:17" pos:end="5723:17">!</operator><operator pos:start="5723:18" pos:end="5723:18">(</operator><name pos:start="5723:19" pos:end="5723:39"><name pos:start="5723:19" pos:end="5723:19">s</name><operator pos:start="5723:20" pos:end="5723:21">-&gt;</operator><name pos:start="5723:22" pos:end="5723:39">cpuid_ext_features</name></name> <operator pos:start="5723:41" pos:end="5723:41">&amp;</operator> <name pos:start="5723:43" pos:end="5723:59">CPUID_EXT_MONITOR</name><operator pos:start="5723:60" pos:end="5723:60">)</operator> <operator pos:start="5723:62" pos:end="5723:63">||</operator> <name pos:start="5723:65" pos:end="5723:70"><name pos:start="5723:65" pos:end="5723:65">s</name><operator pos:start="5723:66" pos:end="5723:67">-&gt;</operator><name pos:start="5723:68" pos:end="5723:70">cpl</name></name> <operator pos:start="5723:72" pos:end="5723:73">!=</operator> <literal type="number" pos:start="5723:75" pos:end="5723:75">0</literal></expr>)</condition> <block pos:start="5723:78" pos:end="5727:13">{<block_content pos:start="5725:17" pos:end="5725:32">

                <goto pos:start="5725:17" pos:end="5725:32">goto <name pos:start="5725:22" pos:end="5725:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5729:13" pos:end="5729:32"><expr pos:start="5729:13" pos:end="5729:31"><call pos:start="5729:13" pos:end="5729:31"><name pos:start="5729:13" pos:end="5729:28">gen_update_cc_op</name><argument_list pos:start="5729:29" pos:end="5729:31">(<argument pos:start="5729:30" pos:end="5729:30"><expr pos:start="5729:30" pos:end="5729:30"><name pos:start="5729:30" pos:end="5729:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5731:13" pos:end="5731:46"><expr pos:start="5731:13" pos:end="5731:45"><call pos:start="5731:13" pos:end="5731:45"><name pos:start="5731:13" pos:end="5731:22">gen_jmp_im</name><argument_list pos:start="5731:23" pos:end="5731:45">(<argument pos:start="5731:24" pos:end="5731:44"><expr pos:start="5731:24" pos:end="5731:44"><name pos:start="5731:24" pos:end="5731:31">pc_start</name> <operator pos:start="5731:33" pos:end="5731:33">-</operator> <name pos:start="5731:35" pos:end="5731:44"><name pos:start="5731:35" pos:end="5731:35">s</name><operator pos:start="5731:36" pos:end="5731:37">-&gt;</operator><name pos:start="5731:38" pos:end="5731:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5733:13" pos:end="5733:71"><expr pos:start="5733:13" pos:end="5733:70"><call pos:start="5733:13" pos:end="5733:70"><name pos:start="5733:13" pos:end="5733:28">gen_helper_mwait</name><argument_list pos:start="5733:29" pos:end="5733:70">(<argument pos:start="5733:30" pos:end="5733:36"><expr pos:start="5733:30" pos:end="5733:36"><name pos:start="5733:30" pos:end="5733:36">cpu_env</name></expr></argument>, <argument pos:start="5733:39" pos:end="5733:69"><expr pos:start="5733:39" pos:end="5733:69"><call pos:start="5733:39" pos:end="5733:69"><name pos:start="5733:39" pos:end="5733:51">tcg_const_i32</name><argument_list pos:start="5733:52" pos:end="5733:69">(<argument pos:start="5733:53" pos:end="5733:68"><expr pos:start="5733:53" pos:end="5733:68"><name pos:start="5733:53" pos:end="5733:57"><name pos:start="5733:53" pos:end="5733:53">s</name><operator pos:start="5733:54" pos:end="5733:55">-&gt;</operator><name pos:start="5733:56" pos:end="5733:57">pc</name></name> <operator pos:start="5733:59" pos:end="5733:59">-</operator> <name pos:start="5733:61" pos:end="5733:68">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5735:13" pos:end="5735:23"><expr pos:start="5735:13" pos:end="5735:22"><call pos:start="5735:13" pos:end="5735:22"><name pos:start="5735:13" pos:end="5735:19">gen_eob</name><argument_list pos:start="5735:20" pos:end="5735:22">(<argument pos:start="5735:21" pos:end="5735:21"><expr pos:start="5735:21" pos:end="5735:21"><name pos:start="5735:21" pos:end="5735:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5737:13" pos:end="5737:18">break;</break>



        <case pos:start="5741:9" pos:end="5741:18">case <expr pos:start="5741:14" pos:end="5741:17"><literal type="number" pos:start="5741:14" pos:end="5741:17">0xca</literal></expr>:</case> <comment type="block" pos:start="5741:20" pos:end="5741:29">/* clac */</comment>

            <if_stmt pos:start="5743:13" pos:end="5749:13"><if pos:start="5743:13" pos:end="5749:13">if <condition pos:start="5743:16" pos:end="5745:31">(<expr pos:start="5743:17" pos:end="5745:30"><operator pos:start="5743:17" pos:end="5743:17">!</operator><operator pos:start="5743:18" pos:end="5743:18">(</operator><name pos:start="5743:19" pos:end="5743:43"><name pos:start="5743:19" pos:end="5743:19">s</name><operator pos:start="5743:20" pos:end="5743:21">-&gt;</operator><name pos:start="5743:22" pos:end="5743:43">cpuid_7_0_ebx_features</name></name> <operator pos:start="5743:45" pos:end="5743:45">&amp;</operator> <name pos:start="5743:47" pos:end="5743:64">CPUID_7_0_EBX_SMAP</name><operator pos:start="5743:65" pos:end="5743:65">)</operator>

                <operator pos:start="5745:17" pos:end="5745:18">||</operator> <name pos:start="5745:20" pos:end="5745:25"><name pos:start="5745:20" pos:end="5745:20">s</name><operator pos:start="5745:21" pos:end="5745:22">-&gt;</operator><name pos:start="5745:23" pos:end="5745:25">cpl</name></name> <operator pos:start="5745:27" pos:end="5745:28">!=</operator> <literal type="number" pos:start="5745:30" pos:end="5745:30">0</literal></expr>)</condition> <block pos:start="5745:33" pos:end="5749:13">{<block_content pos:start="5747:17" pos:end="5747:32">

                <goto pos:start="5747:17" pos:end="5747:32">goto <name pos:start="5747:22" pos:end="5747:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5751:13" pos:end="5751:37"><expr pos:start="5751:13" pos:end="5751:36"><call pos:start="5751:13" pos:end="5751:36"><name pos:start="5751:13" pos:end="5751:27">gen_helper_clac</name><argument_list pos:start="5751:28" pos:end="5751:36">(<argument pos:start="5751:29" pos:end="5751:35"><expr pos:start="5751:29" pos:end="5751:35"><name pos:start="5751:29" pos:end="5751:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5753:13" pos:end="5753:43"><expr pos:start="5753:13" pos:end="5753:42"><call pos:start="5753:13" pos:end="5753:42"><name pos:start="5753:13" pos:end="5753:22">gen_jmp_im</name><argument_list pos:start="5753:23" pos:end="5753:42">(<argument pos:start="5753:24" pos:end="5753:41"><expr pos:start="5753:24" pos:end="5753:41"><name pos:start="5753:24" pos:end="5753:28"><name pos:start="5753:24" pos:end="5753:24">s</name><operator pos:start="5753:25" pos:end="5753:26">-&gt;</operator><name pos:start="5753:27" pos:end="5753:28">pc</name></name> <operator pos:start="5753:30" pos:end="5753:30">-</operator> <name pos:start="5753:32" pos:end="5753:41"><name pos:start="5753:32" pos:end="5753:32">s</name><operator pos:start="5753:33" pos:end="5753:34">-&gt;</operator><name pos:start="5753:35" pos:end="5753:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5755:13" pos:end="5755:23"><expr pos:start="5755:13" pos:end="5755:22"><call pos:start="5755:13" pos:end="5755:22"><name pos:start="5755:13" pos:end="5755:19">gen_eob</name><argument_list pos:start="5755:20" pos:end="5755:22">(<argument pos:start="5755:21" pos:end="5755:21"><expr pos:start="5755:21" pos:end="5755:21"><name pos:start="5755:21" pos:end="5755:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5757:13" pos:end="5757:18">break;</break>



        <case pos:start="5761:9" pos:end="5761:18">case <expr pos:start="5761:14" pos:end="5761:17"><literal type="number" pos:start="5761:14" pos:end="5761:17">0xcb</literal></expr>:</case> <comment type="block" pos:start="5761:20" pos:end="5761:29">/* stac */</comment>

            <if_stmt pos:start="5763:13" pos:end="5769:13"><if pos:start="5763:13" pos:end="5769:13">if <condition pos:start="5763:16" pos:end="5765:31">(<expr pos:start="5763:17" pos:end="5765:30"><operator pos:start="5763:17" pos:end="5763:17">!</operator><operator pos:start="5763:18" pos:end="5763:18">(</operator><name pos:start="5763:19" pos:end="5763:43"><name pos:start="5763:19" pos:end="5763:19">s</name><operator pos:start="5763:20" pos:end="5763:21">-&gt;</operator><name pos:start="5763:22" pos:end="5763:43">cpuid_7_0_ebx_features</name></name> <operator pos:start="5763:45" pos:end="5763:45">&amp;</operator> <name pos:start="5763:47" pos:end="5763:64">CPUID_7_0_EBX_SMAP</name><operator pos:start="5763:65" pos:end="5763:65">)</operator>

                <operator pos:start="5765:17" pos:end="5765:18">||</operator> <name pos:start="5765:20" pos:end="5765:25"><name pos:start="5765:20" pos:end="5765:20">s</name><operator pos:start="5765:21" pos:end="5765:22">-&gt;</operator><name pos:start="5765:23" pos:end="5765:25">cpl</name></name> <operator pos:start="5765:27" pos:end="5765:28">!=</operator> <literal type="number" pos:start="5765:30" pos:end="5765:30">0</literal></expr>)</condition> <block pos:start="5765:33" pos:end="5769:13">{<block_content pos:start="5767:17" pos:end="5767:32">

                <goto pos:start="5767:17" pos:end="5767:32">goto <name pos:start="5767:22" pos:end="5767:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5771:13" pos:end="5771:37"><expr pos:start="5771:13" pos:end="5771:36"><call pos:start="5771:13" pos:end="5771:36"><name pos:start="5771:13" pos:end="5771:27">gen_helper_stac</name><argument_list pos:start="5771:28" pos:end="5771:36">(<argument pos:start="5771:29" pos:end="5771:35"><expr pos:start="5771:29" pos:end="5771:35"><name pos:start="5771:29" pos:end="5771:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5773:13" pos:end="5773:43"><expr pos:start="5773:13" pos:end="5773:42"><call pos:start="5773:13" pos:end="5773:42"><name pos:start="5773:13" pos:end="5773:22">gen_jmp_im</name><argument_list pos:start="5773:23" pos:end="5773:42">(<argument pos:start="5773:24" pos:end="5773:41"><expr pos:start="5773:24" pos:end="5773:41"><name pos:start="5773:24" pos:end="5773:28"><name pos:start="5773:24" pos:end="5773:24">s</name><operator pos:start="5773:25" pos:end="5773:26">-&gt;</operator><name pos:start="5773:27" pos:end="5773:28">pc</name></name> <operator pos:start="5773:30" pos:end="5773:30">-</operator> <name pos:start="5773:32" pos:end="5773:41"><name pos:start="5773:32" pos:end="5773:32">s</name><operator pos:start="5773:33" pos:end="5773:34">-&gt;</operator><name pos:start="5773:35" pos:end="5773:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5775:13" pos:end="5775:23"><expr pos:start="5775:13" pos:end="5775:22"><call pos:start="5775:13" pos:end="5775:22"><name pos:start="5775:13" pos:end="5775:19">gen_eob</name><argument_list pos:start="5775:20" pos:end="5775:22">(<argument pos:start="5775:21" pos:end="5775:21"><expr pos:start="5775:21" pos:end="5775:21"><name pos:start="5775:21" pos:end="5775:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5777:13" pos:end="5777:18">break;</break>



        <expr_stmt pos:start="5781:9" pos:end="5783:69"><expr pos:start="5781:9" pos:end="5783:68"><call pos:start="5781:9" pos:end="5781:28"><name pos:start="5781:9" pos:end="5781:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="5781:26" pos:end="5781:28">(<argument pos:start="5781:27" pos:end="5781:27"><expr pos:start="5781:27" pos:end="5781:27"><literal type="number" pos:start="5781:27" pos:end="5781:27">1</literal></expr></argument>)</argument_list></call><operator pos:start="5781:29" pos:end="5781:29">:</operator> <comment type="block" pos:start="5781:31" pos:end="5781:40">/* sidt */</comment>

            <call pos:start="5783:13" pos:end="5783:68"><name pos:start="5783:13" pos:end="5783:35">gen_svm_check_intercept</name><argument_list pos:start="5783:36" pos:end="5783:68">(<argument pos:start="5783:37" pos:end="5783:37"><expr pos:start="5783:37" pos:end="5783:37"><name pos:start="5783:37" pos:end="5783:37">s</name></expr></argument>, <argument pos:start="5783:40" pos:end="5783:47"><expr pos:start="5783:40" pos:end="5783:47"><name pos:start="5783:40" pos:end="5783:47">pc_start</name></expr></argument>, <argument pos:start="5783:50" pos:end="5783:67"><expr pos:start="5783:50" pos:end="5783:67"><name pos:start="5783:50" pos:end="5783:67">SVM_EXIT_IDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5785:13" pos:end="5785:41"><expr pos:start="5785:13" pos:end="5785:40"><call pos:start="5785:13" pos:end="5785:40"><name pos:start="5785:13" pos:end="5785:25">gen_lea_modrm</name><argument_list pos:start="5785:26" pos:end="5785:40">(<argument pos:start="5785:27" pos:end="5785:29"><expr pos:start="5785:27" pos:end="5785:29"><name pos:start="5785:27" pos:end="5785:29">env</name></expr></argument>, <argument pos:start="5785:32" pos:end="5785:32"><expr pos:start="5785:32" pos:end="5785:32"><name pos:start="5785:32" pos:end="5785:32">s</name></expr></argument>, <argument pos:start="5785:35" pos:end="5785:39"><expr pos:start="5785:35" pos:end="5785:39"><name pos:start="5785:35" pos:end="5785:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5787:13" pos:end="5787:80"><expr pos:start="5787:13" pos:end="5787:79"><call pos:start="5787:13" pos:end="5787:79"><name pos:start="5787:13" pos:end="5787:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5787:29" pos:end="5787:79">(<argument pos:start="5787:30" pos:end="5787:35"><expr pos:start="5787:30" pos:end="5787:35"><name pos:start="5787:30" pos:end="5787:35">cpu_T0</name></expr></argument>, <argument pos:start="5787:38" pos:end="5787:44"><expr pos:start="5787:38" pos:end="5787:44"><name pos:start="5787:38" pos:end="5787:44">cpu_env</name></expr></argument>, <argument pos:start="5787:47" pos:end="5787:78"><expr pos:start="5787:47" pos:end="5787:78"><call pos:start="5787:47" pos:end="5787:78"><name pos:start="5787:47" pos:end="5787:54">offsetof</name><argument_list pos:start="5787:55" pos:end="5787:78">(<argument pos:start="5787:56" pos:end="5787:66"><expr pos:start="5787:56" pos:end="5787:66"><name pos:start="5787:56" pos:end="5787:66">CPUX86State</name></expr></argument>, <argument pos:start="5787:69" pos:end="5787:77"><expr pos:start="5787:69" pos:end="5787:77"><name pos:start="5787:69" pos:end="5787:77"><name pos:start="5787:69" pos:end="5787:71">idt</name><operator pos:start="5787:72" pos:end="5787:72">.</operator><name pos:start="5787:73" pos:end="5787:77">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5789:13" pos:end="5789:50"><expr pos:start="5789:13" pos:end="5789:49"><call pos:start="5789:13" pos:end="5789:49"><name pos:start="5789:13" pos:end="5789:23">gen_op_st_v</name><argument_list pos:start="5789:24" pos:end="5789:49">(<argument pos:start="5789:25" pos:end="5789:25"><expr pos:start="5789:25" pos:end="5789:25"><name pos:start="5789:25" pos:end="5789:25">s</name></expr></argument>, <argument pos:start="5789:28" pos:end="5789:32"><expr pos:start="5789:28" pos:end="5789:32"><name pos:start="5789:28" pos:end="5789:32">MO_16</name></expr></argument>, <argument pos:start="5789:35" pos:end="5789:40"><expr pos:start="5789:35" pos:end="5789:40"><name pos:start="5789:35" pos:end="5789:40">cpu_T0</name></expr></argument>, <argument pos:start="5789:43" pos:end="5789:48"><expr pos:start="5789:43" pos:end="5789:48"><name pos:start="5789:43" pos:end="5789:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5791:13" pos:end="5791:32"><expr pos:start="5791:13" pos:end="5791:31"><call pos:start="5791:13" pos:end="5791:31"><name pos:start="5791:13" pos:end="5791:25">gen_add_A0_im</name><argument_list pos:start="5791:26" pos:end="5791:31">(<argument pos:start="5791:27" pos:end="5791:27"><expr pos:start="5791:27" pos:end="5791:27"><name pos:start="5791:27" pos:end="5791:27">s</name></expr></argument>, <argument pos:start="5791:30" pos:end="5791:30"><expr pos:start="5791:30" pos:end="5791:30"><literal type="number" pos:start="5791:30" pos:end="5791:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5793:13" pos:end="5793:76"><expr pos:start="5793:13" pos:end="5793:75"><call pos:start="5793:13" pos:end="5793:75"><name pos:start="5793:13" pos:end="5793:25">tcg_gen_ld_tl</name><argument_list pos:start="5793:26" pos:end="5793:75">(<argument pos:start="5793:27" pos:end="5793:32"><expr pos:start="5793:27" pos:end="5793:32"><name pos:start="5793:27" pos:end="5793:32">cpu_T0</name></expr></argument>, <argument pos:start="5793:35" pos:end="5793:41"><expr pos:start="5793:35" pos:end="5793:41"><name pos:start="5793:35" pos:end="5793:41">cpu_env</name></expr></argument>, <argument pos:start="5793:44" pos:end="5793:74"><expr pos:start="5793:44" pos:end="5793:74"><call pos:start="5793:44" pos:end="5793:74"><name pos:start="5793:44" pos:end="5793:51">offsetof</name><argument_list pos:start="5793:52" pos:end="5793:74">(<argument pos:start="5793:53" pos:end="5793:63"><expr pos:start="5793:53" pos:end="5793:63"><name pos:start="5793:53" pos:end="5793:63">CPUX86State</name></expr></argument>, <argument pos:start="5793:66" pos:end="5793:73"><expr pos:start="5793:66" pos:end="5793:73"><name pos:start="5793:66" pos:end="5793:73"><name pos:start="5793:66" pos:end="5793:68">idt</name><operator pos:start="5793:69" pos:end="5793:69">.</operator><name pos:start="5793:70" pos:end="5793:73">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5795:13" pos:end="5799:13"><if pos:start="5795:13" pos:end="5799:13">if <condition pos:start="5795:16" pos:end="5795:31">(<expr pos:start="5795:17" pos:end="5795:30"><name pos:start="5795:17" pos:end="5795:21">dflag</name> <operator pos:start="5795:23" pos:end="5795:24">==</operator> <name pos:start="5795:26" pos:end="5795:30">MO_16</name></expr>)</condition> <block pos:start="5795:33" pos:end="5799:13">{<block_content pos:start="5797:17" pos:end="5797:58">

                <expr_stmt pos:start="5797:17" pos:end="5797:58"><expr pos:start="5797:17" pos:end="5797:57"><call pos:start="5797:17" pos:end="5797:57"><name pos:start="5797:17" pos:end="5797:31">tcg_gen_andi_tl</name><argument_list pos:start="5797:32" pos:end="5797:57">(<argument pos:start="5797:33" pos:end="5797:38"><expr pos:start="5797:33" pos:end="5797:38"><name pos:start="5797:33" pos:end="5797:38">cpu_T0</name></expr></argument>, <argument pos:start="5797:41" pos:end="5797:46"><expr pos:start="5797:41" pos:end="5797:46"><name pos:start="5797:41" pos:end="5797:46">cpu_T0</name></expr></argument>, <argument pos:start="5797:49" pos:end="5797:56"><expr pos:start="5797:49" pos:end="5797:56"><literal type="number" pos:start="5797:49" pos:end="5797:56">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5801:13" pos:end="5801:62"><expr pos:start="5801:13" pos:end="5801:61"><call pos:start="5801:13" pos:end="5801:61"><name pos:start="5801:13" pos:end="5801:23">gen_op_st_v</name><argument_list pos:start="5801:24" pos:end="5801:61">(<argument pos:start="5801:25" pos:end="5801:25"><expr pos:start="5801:25" pos:end="5801:25"><name pos:start="5801:25" pos:end="5801:25">s</name></expr></argument>, <argument pos:start="5801:28" pos:end="5801:44"><expr pos:start="5801:28" pos:end="5801:44"><call pos:start="5801:28" pos:end="5801:36"><name pos:start="5801:28" pos:end="5801:33">CODE64</name><argument_list pos:start="5801:34" pos:end="5801:36">(<argument pos:start="5801:35" pos:end="5801:35"><expr pos:start="5801:35" pos:end="5801:35"><name pos:start="5801:35" pos:end="5801:35">s</name></expr></argument>)</argument_list></call> <operator pos:start="5801:38" pos:end="5801:38">+</operator> <name pos:start="5801:40" pos:end="5801:44">MO_32</name></expr></argument>, <argument pos:start="5801:47" pos:end="5801:52"><expr pos:start="5801:47" pos:end="5801:52"><name pos:start="5801:47" pos:end="5801:52">cpu_T0</name></expr></argument>, <argument pos:start="5801:55" pos:end="5801:60"><expr pos:start="5801:55" pos:end="5801:60"><name pos:start="5801:55" pos:end="5801:60">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5803:13" pos:end="5803:18">break;</break>



        <case pos:start="5807:9" pos:end="5807:18">case <expr pos:start="5807:14" pos:end="5807:17"><literal type="number" pos:start="5807:14" pos:end="5807:17">0xd0</literal></expr>:</case> <comment type="block" pos:start="5807:20" pos:end="5807:31">/* xgetbv */</comment>

            <if_stmt pos:start="5809:13" pos:end="5817:13"><if pos:start="5809:13" pos:end="5817:13">if <condition pos:start="5809:16" pos:end="5813:64">(<expr pos:start="5809:17" pos:end="5813:63"><operator pos:start="5809:17" pos:end="5809:17">(</operator><name pos:start="5809:18" pos:end="5809:38"><name pos:start="5809:18" pos:end="5809:18">s</name><operator pos:start="5809:19" pos:end="5809:20">-&gt;</operator><name pos:start="5809:21" pos:end="5809:38">cpuid_ext_features</name></name> <operator pos:start="5809:40" pos:end="5809:40">&amp;</operator> <name pos:start="5809:42" pos:end="5809:56">CPUID_EXT_XSAVE</name><operator pos:start="5809:57" pos:end="5809:57">)</operator> <operator pos:start="5809:59" pos:end="5809:60">==</operator> <literal type="number" pos:start="5809:62" pos:end="5809:62">0</literal>

                <operator pos:start="5811:17" pos:end="5811:18">||</operator> <operator pos:start="5811:20" pos:end="5811:20">(</operator><name pos:start="5811:21" pos:end="5811:29"><name pos:start="5811:21" pos:end="5811:21">s</name><operator pos:start="5811:22" pos:end="5811:23">-&gt;</operator><name pos:start="5811:24" pos:end="5811:29">prefix</name></name> <operator pos:start="5811:31" pos:end="5811:31">&amp;</operator> <operator pos:start="5811:33" pos:end="5811:33">(</operator><name pos:start="5811:34" pos:end="5811:44">PREFIX_LOCK</name> <operator pos:start="5811:46" pos:end="5811:46">|</operator> <name pos:start="5811:48" pos:end="5811:58">PREFIX_DATA</name>

                                 <operator pos:start="5813:34" pos:end="5813:34">|</operator> <name pos:start="5813:36" pos:end="5813:46">PREFIX_REPZ</name> <operator pos:start="5813:48" pos:end="5813:48">|</operator> <name pos:start="5813:50" pos:end="5813:61">PREFIX_REPNZ</name><operator pos:start="5813:62" pos:end="5813:62">)</operator><operator pos:start="5813:63" pos:end="5813:63">)</operator></expr>)</condition> <block pos:start="5813:66" pos:end="5817:13">{<block_content pos:start="5815:17" pos:end="5815:32">

                <goto pos:start="5815:17" pos:end="5815:32">goto <name pos:start="5815:22" pos:end="5815:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5819:13" pos:end="5819:64"><expr pos:start="5819:13" pos:end="5819:63"><call pos:start="5819:13" pos:end="5819:63"><name pos:start="5819:13" pos:end="5819:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5819:33" pos:end="5819:63">(<argument pos:start="5819:34" pos:end="5819:45"><expr pos:start="5819:34" pos:end="5819:45"><name pos:start="5819:34" pos:end="5819:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5819:48" pos:end="5819:62"><expr pos:start="5819:48" pos:end="5819:62"><name pos:start="5819:48" pos:end="5819:62"><name pos:start="5819:48" pos:end="5819:55">cpu_regs</name><index pos:start="5819:56" pos:end="5819:62">[<expr pos:start="5819:57" pos:end="5819:61"><name pos:start="5819:57" pos:end="5819:61">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5821:13" pos:end="5821:67"><expr pos:start="5821:13" pos:end="5821:66"><call pos:start="5821:13" pos:end="5821:66"><name pos:start="5821:13" pos:end="5821:29">gen_helper_xgetbv</name><argument_list pos:start="5821:30" pos:end="5821:66">(<argument pos:start="5821:31" pos:end="5821:42"><expr pos:start="5821:31" pos:end="5821:42"><name pos:start="5821:31" pos:end="5821:42">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="5821:45" pos:end="5821:51"><expr pos:start="5821:45" pos:end="5821:51"><name pos:start="5821:45" pos:end="5821:51">cpu_env</name></expr></argument>, <argument pos:start="5821:54" pos:end="5821:65"><expr pos:start="5821:54" pos:end="5821:65"><name pos:start="5821:54" pos:end="5821:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5823:13" pos:end="5823:80"><expr pos:start="5823:13" pos:end="5823:79"><call pos:start="5823:13" pos:end="5823:79"><name pos:start="5823:13" pos:end="5823:31">tcg_gen_extr_i64_tl</name><argument_list pos:start="5823:32" pos:end="5823:79">(<argument pos:start="5823:33" pos:end="5823:47"><expr pos:start="5823:33" pos:end="5823:47"><name pos:start="5823:33" pos:end="5823:47"><name pos:start="5823:33" pos:end="5823:40">cpu_regs</name><index pos:start="5823:41" pos:end="5823:47">[<expr pos:start="5823:42" pos:end="5823:46"><name pos:start="5823:42" pos:end="5823:46">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="5823:50" pos:end="5823:64"><expr pos:start="5823:50" pos:end="5823:64"><name pos:start="5823:50" pos:end="5823:64"><name pos:start="5823:50" pos:end="5823:57">cpu_regs</name><index pos:start="5823:58" pos:end="5823:64">[<expr pos:start="5823:59" pos:end="5823:63"><name pos:start="5823:59" pos:end="5823:63">R_EDX</name></expr>]</index></name></expr></argument>, <argument pos:start="5823:67" pos:end="5823:78"><expr pos:start="5823:67" pos:end="5823:78"><name pos:start="5823:67" pos:end="5823:78">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5825:13" pos:end="5825:18">break;</break>



        <case pos:start="5829:9" pos:end="5829:18">case <expr pos:start="5829:14" pos:end="5829:17"><literal type="number" pos:start="5829:14" pos:end="5829:17">0xd1</literal></expr>:</case> <comment type="block" pos:start="5829:20" pos:end="5829:31">/* xsetbv */</comment>

            <if_stmt pos:start="5831:13" pos:end="5839:13"><if pos:start="5831:13" pos:end="5839:13">if <condition pos:start="5831:16" pos:end="5835:64">(<expr pos:start="5831:17" pos:end="5835:63"><operator pos:start="5831:17" pos:end="5831:17">(</operator><name pos:start="5831:18" pos:end="5831:38"><name pos:start="5831:18" pos:end="5831:18">s</name><operator pos:start="5831:19" pos:end="5831:20">-&gt;</operator><name pos:start="5831:21" pos:end="5831:38">cpuid_ext_features</name></name> <operator pos:start="5831:40" pos:end="5831:40">&amp;</operator> <name pos:start="5831:42" pos:end="5831:56">CPUID_EXT_XSAVE</name><operator pos:start="5831:57" pos:end="5831:57">)</operator> <operator pos:start="5831:59" pos:end="5831:60">==</operator> <literal type="number" pos:start="5831:62" pos:end="5831:62">0</literal>

                <operator pos:start="5833:17" pos:end="5833:18">||</operator> <operator pos:start="5833:20" pos:end="5833:20">(</operator><name pos:start="5833:21" pos:end="5833:29"><name pos:start="5833:21" pos:end="5833:21">s</name><operator pos:start="5833:22" pos:end="5833:23">-&gt;</operator><name pos:start="5833:24" pos:end="5833:29">prefix</name></name> <operator pos:start="5833:31" pos:end="5833:31">&amp;</operator> <operator pos:start="5833:33" pos:end="5833:33">(</operator><name pos:start="5833:34" pos:end="5833:44">PREFIX_LOCK</name> <operator pos:start="5833:46" pos:end="5833:46">|</operator> <name pos:start="5833:48" pos:end="5833:58">PREFIX_DATA</name>

                                 <operator pos:start="5835:34" pos:end="5835:34">|</operator> <name pos:start="5835:36" pos:end="5835:46">PREFIX_REPZ</name> <operator pos:start="5835:48" pos:end="5835:48">|</operator> <name pos:start="5835:50" pos:end="5835:61">PREFIX_REPNZ</name><operator pos:start="5835:62" pos:end="5835:62">)</operator><operator pos:start="5835:63" pos:end="5835:63">)</operator></expr>)</condition> <block pos:start="5835:66" pos:end="5839:13">{<block_content pos:start="5837:17" pos:end="5837:32">

                <goto pos:start="5837:17" pos:end="5837:32">goto <name pos:start="5837:22" pos:end="5837:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="5841:13" pos:end="5847:13"><if pos:start="5841:13" pos:end="5847:13">if <condition pos:start="5841:16" pos:end="5841:28">(<expr pos:start="5841:17" pos:end="5841:27"><name pos:start="5841:17" pos:end="5841:22"><name pos:start="5841:17" pos:end="5841:17">s</name><operator pos:start="5841:18" pos:end="5841:19">-&gt;</operator><name pos:start="5841:20" pos:end="5841:22">cpl</name></name> <operator pos:start="5841:24" pos:end="5841:25">!=</operator> <literal type="number" pos:start="5841:27" pos:end="5841:27">0</literal></expr>)</condition> <block pos:start="5841:30" pos:end="5847:13">{<block_content pos:start="5843:17" pos:end="5845:22">

                <expr_stmt pos:start="5843:17" pos:end="5843:68"><expr pos:start="5843:17" pos:end="5843:67"><call pos:start="5843:17" pos:end="5843:67"><name pos:start="5843:17" pos:end="5843:29">gen_exception</name><argument_list pos:start="5843:30" pos:end="5843:67">(<argument pos:start="5843:31" pos:end="5843:31"><expr pos:start="5843:31" pos:end="5843:31"><name pos:start="5843:31" pos:end="5843:31">s</name></expr></argument>, <argument pos:start="5843:34" pos:end="5843:43"><expr pos:start="5843:34" pos:end="5843:43"><name pos:start="5843:34" pos:end="5843:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5843:46" pos:end="5843:66"><expr pos:start="5843:46" pos:end="5843:66"><name pos:start="5843:46" pos:end="5843:53">pc_start</name> <operator pos:start="5843:55" pos:end="5843:55">-</operator> <name pos:start="5843:57" pos:end="5843:66"><name pos:start="5843:57" pos:end="5843:57">s</name><operator pos:start="5843:58" pos:end="5843:59">-&gt;</operator><name pos:start="5843:60" pos:end="5843:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5845:17" pos:end="5845:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5849:13" pos:end="5851:51"><expr pos:start="5849:13" pos:end="5851:50"><call pos:start="5849:13" pos:end="5851:50"><name pos:start="5849:13" pos:end="5849:33">tcg_gen_concat_tl_i64</name><argument_list pos:start="5849:34" pos:end="5851:50">(<argument pos:start="5849:35" pos:end="5849:46"><expr pos:start="5849:35" pos:end="5849:46"><name pos:start="5849:35" pos:end="5849:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="5849:49" pos:end="5849:63"><expr pos:start="5849:49" pos:end="5849:63"><name pos:start="5849:49" pos:end="5849:63"><name pos:start="5849:49" pos:end="5849:56">cpu_regs</name><index pos:start="5849:57" pos:end="5849:63">[<expr pos:start="5849:58" pos:end="5849:62"><name pos:start="5849:58" pos:end="5849:62">R_EAX</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="5851:35" pos:end="5851:49"><expr pos:start="5851:35" pos:end="5851:49"><name pos:start="5851:35" pos:end="5851:49"><name pos:start="5851:35" pos:end="5851:42">cpu_regs</name><index pos:start="5851:43" pos:end="5851:49">[<expr pos:start="5851:44" pos:end="5851:48"><name pos:start="5851:44" pos:end="5851:48">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5853:13" pos:end="5853:64"><expr pos:start="5853:13" pos:end="5853:63"><call pos:start="5853:13" pos:end="5853:63"><name pos:start="5853:13" pos:end="5853:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5853:33" pos:end="5853:63">(<argument pos:start="5853:34" pos:end="5853:45"><expr pos:start="5853:34" pos:end="5853:45"><name pos:start="5853:34" pos:end="5853:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5853:48" pos:end="5853:62"><expr pos:start="5853:48" pos:end="5853:62"><name pos:start="5853:48" pos:end="5853:62"><name pos:start="5853:48" pos:end="5853:55">cpu_regs</name><index pos:start="5853:56" pos:end="5853:62">[<expr pos:start="5853:57" pos:end="5853:61"><name pos:start="5853:57" pos:end="5853:61">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5855:13" pos:end="5855:67"><expr pos:start="5855:13" pos:end="5855:66"><call pos:start="5855:13" pos:end="5855:66"><name pos:start="5855:13" pos:end="5855:29">gen_helper_xsetbv</name><argument_list pos:start="5855:30" pos:end="5855:66">(<argument pos:start="5855:31" pos:end="5855:37"><expr pos:start="5855:31" pos:end="5855:37"><name pos:start="5855:31" pos:end="5855:37">cpu_env</name></expr></argument>, <argument pos:start="5855:40" pos:end="5855:51"><expr pos:start="5855:40" pos:end="5855:51"><name pos:start="5855:40" pos:end="5855:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5855:54" pos:end="5855:65"><expr pos:start="5855:54" pos:end="5855:65"><name pos:start="5855:54" pos:end="5855:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="5857:13" pos:end="5857:63">/* End TB because translation flags may change.  */</comment>

            <expr_stmt pos:start="5859:13" pos:end="5859:43"><expr pos:start="5859:13" pos:end="5859:42"><call pos:start="5859:13" pos:end="5859:42"><name pos:start="5859:13" pos:end="5859:22">gen_jmp_im</name><argument_list pos:start="5859:23" pos:end="5859:42">(<argument pos:start="5859:24" pos:end="5859:41"><expr pos:start="5859:24" pos:end="5859:41"><name pos:start="5859:24" pos:end="5859:28"><name pos:start="5859:24" pos:end="5859:24">s</name><operator pos:start="5859:25" pos:end="5859:26">-&gt;</operator><name pos:start="5859:27" pos:end="5859:28">pc</name></name> <operator pos:start="5859:30" pos:end="5859:30">-</operator> <name pos:start="5859:32" pos:end="5859:41"><name pos:start="5859:32" pos:end="5859:32">s</name><operator pos:start="5859:33" pos:end="5859:34">-&gt;</operator><name pos:start="5859:35" pos:end="5859:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5861:13" pos:end="5861:23"><expr pos:start="5861:13" pos:end="5861:22"><call pos:start="5861:13" pos:end="5861:22"><name pos:start="5861:13" pos:end="5861:19">gen_eob</name><argument_list pos:start="5861:20" pos:end="5861:22">(<argument pos:start="5861:21" pos:end="5861:21"><expr pos:start="5861:21" pos:end="5861:21"><name pos:start="5861:21" pos:end="5861:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5863:13" pos:end="5863:18">break;</break>



        <case pos:start="5867:9" pos:end="5867:18">case <expr pos:start="5867:14" pos:end="5867:17"><literal type="number" pos:start="5867:14" pos:end="5867:17">0xd8</literal></expr>:</case> <comment type="block" pos:start="5867:20" pos:end="5867:30">/* VMRUN */</comment>

            <if_stmt pos:start="5869:13" pos:end="5873:13"><if pos:start="5869:13" pos:end="5873:13">if <condition pos:start="5869:16" pos:end="5869:53">(<expr pos:start="5869:17" pos:end="5869:52"><operator pos:start="5869:17" pos:end="5869:17">!</operator><operator pos:start="5869:18" pos:end="5869:18">(</operator><name pos:start="5869:19" pos:end="5869:26"><name pos:start="5869:19" pos:end="5869:19">s</name><operator pos:start="5869:20" pos:end="5869:21">-&gt;</operator><name pos:start="5869:22" pos:end="5869:26">flags</name></name> <operator pos:start="5869:28" pos:end="5869:28">&amp;</operator> <name pos:start="5869:30" pos:end="5869:41">HF_SVME_MASK</name><operator pos:start="5869:42" pos:end="5869:42">)</operator> <operator pos:start="5869:44" pos:end="5869:45">||</operator> <operator pos:start="5869:47" pos:end="5869:47">!</operator><name pos:start="5869:48" pos:end="5869:52"><name pos:start="5869:48" pos:end="5869:48">s</name><operator pos:start="5869:49" pos:end="5869:50">-&gt;</operator><name pos:start="5869:51" pos:end="5869:52">pe</name></name></expr>)</condition> <block pos:start="5869:55" pos:end="5873:13">{<block_content pos:start="5871:17" pos:end="5871:32">

                <goto pos:start="5871:17" pos:end="5871:32">goto <name pos:start="5871:22" pos:end="5871:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="5875:13" pos:end="5881:13"><if pos:start="5875:13" pos:end="5881:13">if <condition pos:start="5875:16" pos:end="5875:28">(<expr pos:start="5875:17" pos:end="5875:27"><name pos:start="5875:17" pos:end="5875:22"><name pos:start="5875:17" pos:end="5875:17">s</name><operator pos:start="5875:18" pos:end="5875:19">-&gt;</operator><name pos:start="5875:20" pos:end="5875:22">cpl</name></name> <operator pos:start="5875:24" pos:end="5875:25">!=</operator> <literal type="number" pos:start="5875:27" pos:end="5875:27">0</literal></expr>)</condition> <block pos:start="5875:30" pos:end="5881:13">{<block_content pos:start="5877:17" pos:end="5879:22">

                <expr_stmt pos:start="5877:17" pos:end="5877:68"><expr pos:start="5877:17" pos:end="5877:67"><call pos:start="5877:17" pos:end="5877:67"><name pos:start="5877:17" pos:end="5877:29">gen_exception</name><argument_list pos:start="5877:30" pos:end="5877:67">(<argument pos:start="5877:31" pos:end="5877:31"><expr pos:start="5877:31" pos:end="5877:31"><name pos:start="5877:31" pos:end="5877:31">s</name></expr></argument>, <argument pos:start="5877:34" pos:end="5877:43"><expr pos:start="5877:34" pos:end="5877:43"><name pos:start="5877:34" pos:end="5877:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5877:46" pos:end="5877:66"><expr pos:start="5877:46" pos:end="5877:66"><name pos:start="5877:46" pos:end="5877:53">pc_start</name> <operator pos:start="5877:55" pos:end="5877:55">-</operator> <name pos:start="5877:57" pos:end="5877:66"><name pos:start="5877:57" pos:end="5877:57">s</name><operator pos:start="5877:58" pos:end="5877:59">-&gt;</operator><name pos:start="5877:60" pos:end="5877:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5879:17" pos:end="5879:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5883:13" pos:end="5883:32"><expr pos:start="5883:13" pos:end="5883:31"><call pos:start="5883:13" pos:end="5883:31"><name pos:start="5883:13" pos:end="5883:28">gen_update_cc_op</name><argument_list pos:start="5883:29" pos:end="5883:31">(<argument pos:start="5883:30" pos:end="5883:30"><expr pos:start="5883:30" pos:end="5883:30"><name pos:start="5883:30" pos:end="5883:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5885:13" pos:end="5885:46"><expr pos:start="5885:13" pos:end="5885:45"><call pos:start="5885:13" pos:end="5885:45"><name pos:start="5885:13" pos:end="5885:22">gen_jmp_im</name><argument_list pos:start="5885:23" pos:end="5885:45">(<argument pos:start="5885:24" pos:end="5885:44"><expr pos:start="5885:24" pos:end="5885:44"><name pos:start="5885:24" pos:end="5885:31">pc_start</name> <operator pos:start="5885:33" pos:end="5885:33">-</operator> <name pos:start="5885:35" pos:end="5885:44"><name pos:start="5885:35" pos:end="5885:35">s</name><operator pos:start="5885:36" pos:end="5885:37">-&gt;</operator><name pos:start="5885:38" pos:end="5885:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5887:13" pos:end="5889:62"><expr pos:start="5887:13" pos:end="5889:61"><call pos:start="5887:13" pos:end="5889:61"><name pos:start="5887:13" pos:end="5887:28">gen_helper_vmrun</name><argument_list pos:start="5887:29" pos:end="5889:61">(<argument pos:start="5887:30" pos:end="5887:36"><expr pos:start="5887:30" pos:end="5887:36"><name pos:start="5887:30" pos:end="5887:36">cpu_env</name></expr></argument>, <argument pos:start="5887:39" pos:end="5887:65"><expr pos:start="5887:39" pos:end="5887:65"><call pos:start="5887:39" pos:end="5887:65"><name pos:start="5887:39" pos:end="5887:51">tcg_const_i32</name><argument_list pos:start="5887:52" pos:end="5887:65">(<argument pos:start="5887:53" pos:end="5887:64"><expr pos:start="5887:53" pos:end="5887:64"><name pos:start="5887:53" pos:end="5887:60"><name pos:start="5887:53" pos:end="5887:53">s</name><operator pos:start="5887:54" pos:end="5887:55">-&gt;</operator><name pos:start="5887:56" pos:end="5887:60">aflag</name></name> <operator pos:start="5887:62" pos:end="5887:62">-</operator> <literal type="number" pos:start="5887:64" pos:end="5887:64">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="5889:30" pos:end="5889:60"><expr pos:start="5889:30" pos:end="5889:60"><call pos:start="5889:30" pos:end="5889:60"><name pos:start="5889:30" pos:end="5889:42">tcg_const_i32</name><argument_list pos:start="5889:43" pos:end="5889:60">(<argument pos:start="5889:44" pos:end="5889:59"><expr pos:start="5889:44" pos:end="5889:59"><name pos:start="5889:44" pos:end="5889:48"><name pos:start="5889:44" pos:end="5889:44">s</name><operator pos:start="5889:45" pos:end="5889:46">-&gt;</operator><name pos:start="5889:47" pos:end="5889:48">pc</name></name> <operator pos:start="5889:50" pos:end="5889:50">-</operator> <name pos:start="5889:52" pos:end="5889:59">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5891:13" pos:end="5891:31"><expr pos:start="5891:13" pos:end="5891:30"><call pos:start="5891:13" pos:end="5891:30"><name pos:start="5891:13" pos:end="5891:27">tcg_gen_exit_tb</name><argument_list pos:start="5891:28" pos:end="5891:30">(<argument pos:start="5891:29" pos:end="5891:29"><expr pos:start="5891:29" pos:end="5891:29"><literal type="number" pos:start="5891:29" pos:end="5891:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5893:13" pos:end="5893:44"><expr pos:start="5893:13" pos:end="5893:43"><name pos:start="5893:13" pos:end="5893:26"><name pos:start="5893:13" pos:end="5893:13">s</name><operator pos:start="5893:14" pos:end="5893:15">-&gt;</operator><name pos:start="5893:16" pos:end="5893:19">base</name><operator pos:start="5893:20" pos:end="5893:20">.</operator><name pos:start="5893:21" pos:end="5893:26">is_jmp</name></name> <operator pos:start="5893:28" pos:end="5893:28">=</operator> <name pos:start="5893:30" pos:end="5893:43">DISAS_NORETURN</name></expr>;</expr_stmt>

            <break pos:start="5895:13" pos:end="5895:18">break;</break>



        <case pos:start="5899:9" pos:end="5899:18">case <expr pos:start="5899:14" pos:end="5899:17"><literal type="number" pos:start="5899:14" pos:end="5899:17">0xd9</literal></expr>:</case> <comment type="block" pos:start="5899:20" pos:end="5899:32">/* VMMCALL */</comment>

            <if_stmt pos:start="5901:13" pos:end="5905:13"><if pos:start="5901:13" pos:end="5905:13">if <condition pos:start="5901:16" pos:end="5901:43">(<expr pos:start="5901:17" pos:end="5901:42"><operator pos:start="5901:17" pos:end="5901:17">!</operator><operator pos:start="5901:18" pos:end="5901:18">(</operator><name pos:start="5901:19" pos:end="5901:26"><name pos:start="5901:19" pos:end="5901:19">s</name><operator pos:start="5901:20" pos:end="5901:21">-&gt;</operator><name pos:start="5901:22" pos:end="5901:26">flags</name></name> <operator pos:start="5901:28" pos:end="5901:28">&amp;</operator> <name pos:start="5901:30" pos:end="5901:41">HF_SVME_MASK</name><operator pos:start="5901:42" pos:end="5901:42">)</operator></expr>)</condition> <block pos:start="5901:45" pos:end="5905:13">{<block_content pos:start="5903:17" pos:end="5903:32">

                <goto pos:start="5903:17" pos:end="5903:32">goto <name pos:start="5903:22" pos:end="5903:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5907:13" pos:end="5907:32"><expr pos:start="5907:13" pos:end="5907:31"><call pos:start="5907:13" pos:end="5907:31"><name pos:start="5907:13" pos:end="5907:28">gen_update_cc_op</name><argument_list pos:start="5907:29" pos:end="5907:31">(<argument pos:start="5907:30" pos:end="5907:30"><expr pos:start="5907:30" pos:end="5907:30"><name pos:start="5907:30" pos:end="5907:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5909:13" pos:end="5909:46"><expr pos:start="5909:13" pos:end="5909:45"><call pos:start="5909:13" pos:end="5909:45"><name pos:start="5909:13" pos:end="5909:22">gen_jmp_im</name><argument_list pos:start="5909:23" pos:end="5909:45">(<argument pos:start="5909:24" pos:end="5909:44"><expr pos:start="5909:24" pos:end="5909:44"><name pos:start="5909:24" pos:end="5909:31">pc_start</name> <operator pos:start="5909:33" pos:end="5909:33">-</operator> <name pos:start="5909:35" pos:end="5909:44"><name pos:start="5909:35" pos:end="5909:35">s</name><operator pos:start="5909:36" pos:end="5909:37">-&gt;</operator><name pos:start="5909:38" pos:end="5909:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5911:13" pos:end="5911:40"><expr pos:start="5911:13" pos:end="5911:39"><call pos:start="5911:13" pos:end="5911:39"><name pos:start="5911:13" pos:end="5911:30">gen_helper_vmmcall</name><argument_list pos:start="5911:31" pos:end="5911:39">(<argument pos:start="5911:32" pos:end="5911:38"><expr pos:start="5911:32" pos:end="5911:38"><name pos:start="5911:32" pos:end="5911:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5913:13" pos:end="5913:18">break;</break>



        <case pos:start="5917:9" pos:end="5917:18">case <expr pos:start="5917:14" pos:end="5917:17"><literal type="number" pos:start="5917:14" pos:end="5917:17">0xda</literal></expr>:</case> <comment type="block" pos:start="5917:20" pos:end="5917:31">/* VMLOAD */</comment>

            <if_stmt pos:start="5919:13" pos:end="5923:13"><if pos:start="5919:13" pos:end="5923:13">if <condition pos:start="5919:16" pos:end="5919:53">(<expr pos:start="5919:17" pos:end="5919:52"><operator pos:start="5919:17" pos:end="5919:17">!</operator><operator pos:start="5919:18" pos:end="5919:18">(</operator><name pos:start="5919:19" pos:end="5919:26"><name pos:start="5919:19" pos:end="5919:19">s</name><operator pos:start="5919:20" pos:end="5919:21">-&gt;</operator><name pos:start="5919:22" pos:end="5919:26">flags</name></name> <operator pos:start="5919:28" pos:end="5919:28">&amp;</operator> <name pos:start="5919:30" pos:end="5919:41">HF_SVME_MASK</name><operator pos:start="5919:42" pos:end="5919:42">)</operator> <operator pos:start="5919:44" pos:end="5919:45">||</operator> <operator pos:start="5919:47" pos:end="5919:47">!</operator><name pos:start="5919:48" pos:end="5919:52"><name pos:start="5919:48" pos:end="5919:48">s</name><operator pos:start="5919:49" pos:end="5919:50">-&gt;</operator><name pos:start="5919:51" pos:end="5919:52">pe</name></name></expr>)</condition> <block pos:start="5919:55" pos:end="5923:13">{<block_content pos:start="5921:17" pos:end="5921:32">

                <goto pos:start="5921:17" pos:end="5921:32">goto <name pos:start="5921:22" pos:end="5921:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="5925:13" pos:end="5931:13"><if pos:start="5925:13" pos:end="5931:13">if <condition pos:start="5925:16" pos:end="5925:28">(<expr pos:start="5925:17" pos:end="5925:27"><name pos:start="5925:17" pos:end="5925:22"><name pos:start="5925:17" pos:end="5925:17">s</name><operator pos:start="5925:18" pos:end="5925:19">-&gt;</operator><name pos:start="5925:20" pos:end="5925:22">cpl</name></name> <operator pos:start="5925:24" pos:end="5925:25">!=</operator> <literal type="number" pos:start="5925:27" pos:end="5925:27">0</literal></expr>)</condition> <block pos:start="5925:30" pos:end="5931:13">{<block_content pos:start="5927:17" pos:end="5929:22">

                <expr_stmt pos:start="5927:17" pos:end="5927:68"><expr pos:start="5927:17" pos:end="5927:67"><call pos:start="5927:17" pos:end="5927:67"><name pos:start="5927:17" pos:end="5927:29">gen_exception</name><argument_list pos:start="5927:30" pos:end="5927:67">(<argument pos:start="5927:31" pos:end="5927:31"><expr pos:start="5927:31" pos:end="5927:31"><name pos:start="5927:31" pos:end="5927:31">s</name></expr></argument>, <argument pos:start="5927:34" pos:end="5927:43"><expr pos:start="5927:34" pos:end="5927:43"><name pos:start="5927:34" pos:end="5927:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5927:46" pos:end="5927:66"><expr pos:start="5927:46" pos:end="5927:66"><name pos:start="5927:46" pos:end="5927:53">pc_start</name> <operator pos:start="5927:55" pos:end="5927:55">-</operator> <name pos:start="5927:57" pos:end="5927:66"><name pos:start="5927:57" pos:end="5927:57">s</name><operator pos:start="5927:58" pos:end="5927:59">-&gt;</operator><name pos:start="5927:60" pos:end="5927:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5929:17" pos:end="5929:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5933:13" pos:end="5933:32"><expr pos:start="5933:13" pos:end="5933:31"><call pos:start="5933:13" pos:end="5933:31"><name pos:start="5933:13" pos:end="5933:28">gen_update_cc_op</name><argument_list pos:start="5933:29" pos:end="5933:31">(<argument pos:start="5933:30" pos:end="5933:30"><expr pos:start="5933:30" pos:end="5933:30"><name pos:start="5933:30" pos:end="5933:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5935:13" pos:end="5935:46"><expr pos:start="5935:13" pos:end="5935:45"><call pos:start="5935:13" pos:end="5935:45"><name pos:start="5935:13" pos:end="5935:22">gen_jmp_im</name><argument_list pos:start="5935:23" pos:end="5935:45">(<argument pos:start="5935:24" pos:end="5935:44"><expr pos:start="5935:24" pos:end="5935:44"><name pos:start="5935:24" pos:end="5935:31">pc_start</name> <operator pos:start="5935:33" pos:end="5935:33">-</operator> <name pos:start="5935:35" pos:end="5935:44"><name pos:start="5935:35" pos:end="5935:35">s</name><operator pos:start="5935:36" pos:end="5935:37">-&gt;</operator><name pos:start="5935:38" pos:end="5935:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5937:13" pos:end="5937:68"><expr pos:start="5937:13" pos:end="5937:67"><call pos:start="5937:13" pos:end="5937:67"><name pos:start="5937:13" pos:end="5937:29">gen_helper_vmload</name><argument_list pos:start="5937:30" pos:end="5937:67">(<argument pos:start="5937:31" pos:end="5937:37"><expr pos:start="5937:31" pos:end="5937:37"><name pos:start="5937:31" pos:end="5937:37">cpu_env</name></expr></argument>, <argument pos:start="5937:40" pos:end="5937:66"><expr pos:start="5937:40" pos:end="5937:66"><call pos:start="5937:40" pos:end="5937:66"><name pos:start="5937:40" pos:end="5937:52">tcg_const_i32</name><argument_list pos:start="5937:53" pos:end="5937:66">(<argument pos:start="5937:54" pos:end="5937:65"><expr pos:start="5937:54" pos:end="5937:65"><name pos:start="5937:54" pos:end="5937:61"><name pos:start="5937:54" pos:end="5937:54">s</name><operator pos:start="5937:55" pos:end="5937:56">-&gt;</operator><name pos:start="5937:57" pos:end="5937:61">aflag</name></name> <operator pos:start="5937:63" pos:end="5937:63">-</operator> <literal type="number" pos:start="5937:65" pos:end="5937:65">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5939:13" pos:end="5939:18">break;</break>



        <case pos:start="5943:9" pos:end="5943:18">case <expr pos:start="5943:14" pos:end="5943:17"><literal type="number" pos:start="5943:14" pos:end="5943:17">0xdb</literal></expr>:</case> <comment type="block" pos:start="5943:20" pos:end="5943:31">/* VMSAVE */</comment>

            <if_stmt pos:start="5945:13" pos:end="5949:13"><if pos:start="5945:13" pos:end="5949:13">if <condition pos:start="5945:16" pos:end="5945:53">(<expr pos:start="5945:17" pos:end="5945:52"><operator pos:start="5945:17" pos:end="5945:17">!</operator><operator pos:start="5945:18" pos:end="5945:18">(</operator><name pos:start="5945:19" pos:end="5945:26"><name pos:start="5945:19" pos:end="5945:19">s</name><operator pos:start="5945:20" pos:end="5945:21">-&gt;</operator><name pos:start="5945:22" pos:end="5945:26">flags</name></name> <operator pos:start="5945:28" pos:end="5945:28">&amp;</operator> <name pos:start="5945:30" pos:end="5945:41">HF_SVME_MASK</name><operator pos:start="5945:42" pos:end="5945:42">)</operator> <operator pos:start="5945:44" pos:end="5945:45">||</operator> <operator pos:start="5945:47" pos:end="5945:47">!</operator><name pos:start="5945:48" pos:end="5945:52"><name pos:start="5945:48" pos:end="5945:48">s</name><operator pos:start="5945:49" pos:end="5945:50">-&gt;</operator><name pos:start="5945:51" pos:end="5945:52">pe</name></name></expr>)</condition> <block pos:start="5945:55" pos:end="5949:13">{<block_content pos:start="5947:17" pos:end="5947:32">

                <goto pos:start="5947:17" pos:end="5947:32">goto <name pos:start="5947:22" pos:end="5947:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="5951:13" pos:end="5957:13"><if pos:start="5951:13" pos:end="5957:13">if <condition pos:start="5951:16" pos:end="5951:28">(<expr pos:start="5951:17" pos:end="5951:27"><name pos:start="5951:17" pos:end="5951:22"><name pos:start="5951:17" pos:end="5951:17">s</name><operator pos:start="5951:18" pos:end="5951:19">-&gt;</operator><name pos:start="5951:20" pos:end="5951:22">cpl</name></name> <operator pos:start="5951:24" pos:end="5951:25">!=</operator> <literal type="number" pos:start="5951:27" pos:end="5951:27">0</literal></expr>)</condition> <block pos:start="5951:30" pos:end="5957:13">{<block_content pos:start="5953:17" pos:end="5955:22">

                <expr_stmt pos:start="5953:17" pos:end="5953:68"><expr pos:start="5953:17" pos:end="5953:67"><call pos:start="5953:17" pos:end="5953:67"><name pos:start="5953:17" pos:end="5953:29">gen_exception</name><argument_list pos:start="5953:30" pos:end="5953:67">(<argument pos:start="5953:31" pos:end="5953:31"><expr pos:start="5953:31" pos:end="5953:31"><name pos:start="5953:31" pos:end="5953:31">s</name></expr></argument>, <argument pos:start="5953:34" pos:end="5953:43"><expr pos:start="5953:34" pos:end="5953:43"><name pos:start="5953:34" pos:end="5953:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5953:46" pos:end="5953:66"><expr pos:start="5953:46" pos:end="5953:66"><name pos:start="5953:46" pos:end="5953:53">pc_start</name> <operator pos:start="5953:55" pos:end="5953:55">-</operator> <name pos:start="5953:57" pos:end="5953:66"><name pos:start="5953:57" pos:end="5953:57">s</name><operator pos:start="5953:58" pos:end="5953:59">-&gt;</operator><name pos:start="5953:60" pos:end="5953:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5955:17" pos:end="5955:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5959:13" pos:end="5959:32"><expr pos:start="5959:13" pos:end="5959:31"><call pos:start="5959:13" pos:end="5959:31"><name pos:start="5959:13" pos:end="5959:28">gen_update_cc_op</name><argument_list pos:start="5959:29" pos:end="5959:31">(<argument pos:start="5959:30" pos:end="5959:30"><expr pos:start="5959:30" pos:end="5959:30"><name pos:start="5959:30" pos:end="5959:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5961:13" pos:end="5961:46"><expr pos:start="5961:13" pos:end="5961:45"><call pos:start="5961:13" pos:end="5961:45"><name pos:start="5961:13" pos:end="5961:22">gen_jmp_im</name><argument_list pos:start="5961:23" pos:end="5961:45">(<argument pos:start="5961:24" pos:end="5961:44"><expr pos:start="5961:24" pos:end="5961:44"><name pos:start="5961:24" pos:end="5961:31">pc_start</name> <operator pos:start="5961:33" pos:end="5961:33">-</operator> <name pos:start="5961:35" pos:end="5961:44"><name pos:start="5961:35" pos:end="5961:35">s</name><operator pos:start="5961:36" pos:end="5961:37">-&gt;</operator><name pos:start="5961:38" pos:end="5961:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5963:13" pos:end="5963:68"><expr pos:start="5963:13" pos:end="5963:67"><call pos:start="5963:13" pos:end="5963:67"><name pos:start="5963:13" pos:end="5963:29">gen_helper_vmsave</name><argument_list pos:start="5963:30" pos:end="5963:67">(<argument pos:start="5963:31" pos:end="5963:37"><expr pos:start="5963:31" pos:end="5963:37"><name pos:start="5963:31" pos:end="5963:37">cpu_env</name></expr></argument>, <argument pos:start="5963:40" pos:end="5963:66"><expr pos:start="5963:40" pos:end="5963:66"><call pos:start="5963:40" pos:end="5963:66"><name pos:start="5963:40" pos:end="5963:52">tcg_const_i32</name><argument_list pos:start="5963:53" pos:end="5963:66">(<argument pos:start="5963:54" pos:end="5963:65"><expr pos:start="5963:54" pos:end="5963:65"><name pos:start="5963:54" pos:end="5963:61"><name pos:start="5963:54" pos:end="5963:54">s</name><operator pos:start="5963:55" pos:end="5963:56">-&gt;</operator><name pos:start="5963:57" pos:end="5963:61">aflag</name></name> <operator pos:start="5963:63" pos:end="5963:63">-</operator> <literal type="number" pos:start="5963:65" pos:end="5963:65">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5965:13" pos:end="5965:18">break;</break>



        <case pos:start="5969:9" pos:end="5969:18">case <expr pos:start="5969:14" pos:end="5969:17"><literal type="number" pos:start="5969:14" pos:end="5969:17">0xdc</literal></expr>:</case> <comment type="block" pos:start="5969:20" pos:end="5969:29">/* STGI */</comment>

            <if_stmt pos:start="5971:13" pos:end="5979:13"><if pos:start="5971:13" pos:end="5979:13">if <condition pos:start="5971:16" pos:end="5975:26">(<expr pos:start="5971:17" pos:end="5975:25"><operator pos:start="5971:17" pos:end="5971:17">(</operator><operator pos:start="5971:18" pos:end="5971:18">!</operator><operator pos:start="5971:19" pos:end="5971:19">(</operator><name pos:start="5971:20" pos:end="5971:27"><name pos:start="5971:20" pos:end="5971:20">s</name><operator pos:start="5971:21" pos:end="5971:22">-&gt;</operator><name pos:start="5971:23" pos:end="5971:27">flags</name></name> <operator pos:start="5971:29" pos:end="5971:29">&amp;</operator> <name pos:start="5971:31" pos:end="5971:42">HF_SVME_MASK</name><operator pos:start="5971:43" pos:end="5971:43">)</operator>

                   <operator pos:start="5973:20" pos:end="5973:21">&amp;&amp;</operator> <operator pos:start="5973:23" pos:end="5973:23">!</operator><operator pos:start="5973:24" pos:end="5973:24">(</operator><name pos:start="5973:25" pos:end="5973:46"><name pos:start="5973:25" pos:end="5973:25">s</name><operator pos:start="5973:26" pos:end="5973:27">-&gt;</operator><name pos:start="5973:28" pos:end="5973:46">cpuid_ext3_features</name></name> <operator pos:start="5973:48" pos:end="5973:48">&amp;</operator> <name pos:start="5973:50" pos:end="5973:66">CPUID_EXT3_SKINIT</name><operator pos:start="5973:67" pos:end="5973:67">)</operator><operator pos:start="5973:68" pos:end="5973:68">)</operator>

                <operator pos:start="5975:17" pos:end="5975:18">||</operator> <operator pos:start="5975:20" pos:end="5975:20">!</operator><name pos:start="5975:21" pos:end="5975:25"><name pos:start="5975:21" pos:end="5975:21">s</name><operator pos:start="5975:22" pos:end="5975:23">-&gt;</operator><name pos:start="5975:24" pos:end="5975:25">pe</name></name></expr>)</condition> <block pos:start="5975:28" pos:end="5979:13">{<block_content pos:start="5977:17" pos:end="5977:32">

                <goto pos:start="5977:17" pos:end="5977:32">goto <name pos:start="5977:22" pos:end="5977:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="5981:13" pos:end="5987:13"><if pos:start="5981:13" pos:end="5987:13">if <condition pos:start="5981:16" pos:end="5981:28">(<expr pos:start="5981:17" pos:end="5981:27"><name pos:start="5981:17" pos:end="5981:22"><name pos:start="5981:17" pos:end="5981:17">s</name><operator pos:start="5981:18" pos:end="5981:19">-&gt;</operator><name pos:start="5981:20" pos:end="5981:22">cpl</name></name> <operator pos:start="5981:24" pos:end="5981:25">!=</operator> <literal type="number" pos:start="5981:27" pos:end="5981:27">0</literal></expr>)</condition> <block pos:start="5981:30" pos:end="5987:13">{<block_content pos:start="5983:17" pos:end="5985:22">

                <expr_stmt pos:start="5983:17" pos:end="5983:68"><expr pos:start="5983:17" pos:end="5983:67"><call pos:start="5983:17" pos:end="5983:67"><name pos:start="5983:17" pos:end="5983:29">gen_exception</name><argument_list pos:start="5983:30" pos:end="5983:67">(<argument pos:start="5983:31" pos:end="5983:31"><expr pos:start="5983:31" pos:end="5983:31"><name pos:start="5983:31" pos:end="5983:31">s</name></expr></argument>, <argument pos:start="5983:34" pos:end="5983:43"><expr pos:start="5983:34" pos:end="5983:43"><name pos:start="5983:34" pos:end="5983:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5983:46" pos:end="5983:66"><expr pos:start="5983:46" pos:end="5983:66"><name pos:start="5983:46" pos:end="5983:53">pc_start</name> <operator pos:start="5983:55" pos:end="5983:55">-</operator> <name pos:start="5983:57" pos:end="5983:66"><name pos:start="5983:57" pos:end="5983:57">s</name><operator pos:start="5983:58" pos:end="5983:59">-&gt;</operator><name pos:start="5983:60" pos:end="5983:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5985:17" pos:end="5985:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5989:13" pos:end="5989:32"><expr pos:start="5989:13" pos:end="5989:31"><call pos:start="5989:13" pos:end="5989:31"><name pos:start="5989:13" pos:end="5989:28">gen_update_cc_op</name><argument_list pos:start="5989:29" pos:end="5989:31">(<argument pos:start="5989:30" pos:end="5989:30"><expr pos:start="5989:30" pos:end="5989:30"><name pos:start="5989:30" pos:end="5989:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5991:13" pos:end="5991:46"><expr pos:start="5991:13" pos:end="5991:45"><call pos:start="5991:13" pos:end="5991:45"><name pos:start="5991:13" pos:end="5991:22">gen_jmp_im</name><argument_list pos:start="5991:23" pos:end="5991:45">(<argument pos:start="5991:24" pos:end="5991:44"><expr pos:start="5991:24" pos:end="5991:44"><name pos:start="5991:24" pos:end="5991:31">pc_start</name> <operator pos:start="5991:33" pos:end="5991:33">-</operator> <name pos:start="5991:35" pos:end="5991:44"><name pos:start="5991:35" pos:end="5991:35">s</name><operator pos:start="5991:36" pos:end="5991:37">-&gt;</operator><name pos:start="5991:38" pos:end="5991:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5993:13" pos:end="5993:37"><expr pos:start="5993:13" pos:end="5993:36"><call pos:start="5993:13" pos:end="5993:36"><name pos:start="5993:13" pos:end="5993:27">gen_helper_stgi</name><argument_list pos:start="5993:28" pos:end="5993:36">(<argument pos:start="5993:29" pos:end="5993:35"><expr pos:start="5993:29" pos:end="5993:35"><name pos:start="5993:29" pos:end="5993:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5995:13" pos:end="5995:18">break;</break>



        <case pos:start="5999:9" pos:end="5999:18">case <expr pos:start="5999:14" pos:end="5999:17"><literal type="number" pos:start="5999:14" pos:end="5999:17">0xdd</literal></expr>:</case> <comment type="block" pos:start="5999:20" pos:end="5999:29">/* CLGI */</comment>

            <if_stmt pos:start="6001:13" pos:end="6005:13"><if pos:start="6001:13" pos:end="6005:13">if <condition pos:start="6001:16" pos:end="6001:53">(<expr pos:start="6001:17" pos:end="6001:52"><operator pos:start="6001:17" pos:end="6001:17">!</operator><operator pos:start="6001:18" pos:end="6001:18">(</operator><name pos:start="6001:19" pos:end="6001:26"><name pos:start="6001:19" pos:end="6001:19">s</name><operator pos:start="6001:20" pos:end="6001:21">-&gt;</operator><name pos:start="6001:22" pos:end="6001:26">flags</name></name> <operator pos:start="6001:28" pos:end="6001:28">&amp;</operator> <name pos:start="6001:30" pos:end="6001:41">HF_SVME_MASK</name><operator pos:start="6001:42" pos:end="6001:42">)</operator> <operator pos:start="6001:44" pos:end="6001:45">||</operator> <operator pos:start="6001:47" pos:end="6001:47">!</operator><name pos:start="6001:48" pos:end="6001:52"><name pos:start="6001:48" pos:end="6001:48">s</name><operator pos:start="6001:49" pos:end="6001:50">-&gt;</operator><name pos:start="6001:51" pos:end="6001:52">pe</name></name></expr>)</condition> <block pos:start="6001:55" pos:end="6005:13">{<block_content pos:start="6003:17" pos:end="6003:32">

                <goto pos:start="6003:17" pos:end="6003:32">goto <name pos:start="6003:22" pos:end="6003:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="6007:13" pos:end="6013:13"><if pos:start="6007:13" pos:end="6013:13">if <condition pos:start="6007:16" pos:end="6007:28">(<expr pos:start="6007:17" pos:end="6007:27"><name pos:start="6007:17" pos:end="6007:22"><name pos:start="6007:17" pos:end="6007:17">s</name><operator pos:start="6007:18" pos:end="6007:19">-&gt;</operator><name pos:start="6007:20" pos:end="6007:22">cpl</name></name> <operator pos:start="6007:24" pos:end="6007:25">!=</operator> <literal type="number" pos:start="6007:27" pos:end="6007:27">0</literal></expr>)</condition> <block pos:start="6007:30" pos:end="6013:13">{<block_content pos:start="6009:17" pos:end="6011:22">

                <expr_stmt pos:start="6009:17" pos:end="6009:68"><expr pos:start="6009:17" pos:end="6009:67"><call pos:start="6009:17" pos:end="6009:67"><name pos:start="6009:17" pos:end="6009:29">gen_exception</name><argument_list pos:start="6009:30" pos:end="6009:67">(<argument pos:start="6009:31" pos:end="6009:31"><expr pos:start="6009:31" pos:end="6009:31"><name pos:start="6009:31" pos:end="6009:31">s</name></expr></argument>, <argument pos:start="6009:34" pos:end="6009:43"><expr pos:start="6009:34" pos:end="6009:43"><name pos:start="6009:34" pos:end="6009:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6009:46" pos:end="6009:66"><expr pos:start="6009:46" pos:end="6009:66"><name pos:start="6009:46" pos:end="6009:53">pc_start</name> <operator pos:start="6009:55" pos:end="6009:55">-</operator> <name pos:start="6009:57" pos:end="6009:66"><name pos:start="6009:57" pos:end="6009:57">s</name><operator pos:start="6009:58" pos:end="6009:59">-&gt;</operator><name pos:start="6009:60" pos:end="6009:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6011:17" pos:end="6011:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6015:13" pos:end="6015:32"><expr pos:start="6015:13" pos:end="6015:31"><call pos:start="6015:13" pos:end="6015:31"><name pos:start="6015:13" pos:end="6015:28">gen_update_cc_op</name><argument_list pos:start="6015:29" pos:end="6015:31">(<argument pos:start="6015:30" pos:end="6015:30"><expr pos:start="6015:30" pos:end="6015:30"><name pos:start="6015:30" pos:end="6015:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6017:13" pos:end="6017:46"><expr pos:start="6017:13" pos:end="6017:45"><call pos:start="6017:13" pos:end="6017:45"><name pos:start="6017:13" pos:end="6017:22">gen_jmp_im</name><argument_list pos:start="6017:23" pos:end="6017:45">(<argument pos:start="6017:24" pos:end="6017:44"><expr pos:start="6017:24" pos:end="6017:44"><name pos:start="6017:24" pos:end="6017:31">pc_start</name> <operator pos:start="6017:33" pos:end="6017:33">-</operator> <name pos:start="6017:35" pos:end="6017:44"><name pos:start="6017:35" pos:end="6017:35">s</name><operator pos:start="6017:36" pos:end="6017:37">-&gt;</operator><name pos:start="6017:38" pos:end="6017:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6019:13" pos:end="6019:37"><expr pos:start="6019:13" pos:end="6019:36"><call pos:start="6019:13" pos:end="6019:36"><name pos:start="6019:13" pos:end="6019:27">gen_helper_clgi</name><argument_list pos:start="6019:28" pos:end="6019:36">(<argument pos:start="6019:29" pos:end="6019:35"><expr pos:start="6019:29" pos:end="6019:35"><name pos:start="6019:29" pos:end="6019:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6021:13" pos:end="6021:18">break;</break>



        <case pos:start="6025:9" pos:end="6025:18">case <expr pos:start="6025:14" pos:end="6025:17"><literal type="number" pos:start="6025:14" pos:end="6025:17">0xde</literal></expr>:</case> <comment type="block" pos:start="6025:20" pos:end="6025:31">/* SKINIT */</comment>

            <if_stmt pos:start="6027:13" pos:end="6035:13"><if pos:start="6027:13" pos:end="6035:13">if <condition pos:start="6027:16" pos:end="6031:26">(<expr pos:start="6027:17" pos:end="6031:25"><operator pos:start="6027:17" pos:end="6027:17">(</operator><operator pos:start="6027:18" pos:end="6027:18">!</operator><operator pos:start="6027:19" pos:end="6027:19">(</operator><name pos:start="6027:20" pos:end="6027:27"><name pos:start="6027:20" pos:end="6027:20">s</name><operator pos:start="6027:21" pos:end="6027:22">-&gt;</operator><name pos:start="6027:23" pos:end="6027:27">flags</name></name> <operator pos:start="6027:29" pos:end="6027:29">&amp;</operator> <name pos:start="6027:31" pos:end="6027:42">HF_SVME_MASK</name><operator pos:start="6027:43" pos:end="6027:43">)</operator>

                 <operator pos:start="6029:18" pos:end="6029:19">&amp;&amp;</operator> <operator pos:start="6029:21" pos:end="6029:21">!</operator><operator pos:start="6029:22" pos:end="6029:22">(</operator><name pos:start="6029:23" pos:end="6029:44"><name pos:start="6029:23" pos:end="6029:23">s</name><operator pos:start="6029:24" pos:end="6029:25">-&gt;</operator><name pos:start="6029:26" pos:end="6029:44">cpuid_ext3_features</name></name> <operator pos:start="6029:46" pos:end="6029:46">&amp;</operator> <name pos:start="6029:48" pos:end="6029:64">CPUID_EXT3_SKINIT</name><operator pos:start="6029:65" pos:end="6029:65">)</operator><operator pos:start="6029:66" pos:end="6029:66">)</operator>

                <operator pos:start="6031:17" pos:end="6031:18">||</operator> <operator pos:start="6031:20" pos:end="6031:20">!</operator><name pos:start="6031:21" pos:end="6031:25"><name pos:start="6031:21" pos:end="6031:21">s</name><operator pos:start="6031:22" pos:end="6031:23">-&gt;</operator><name pos:start="6031:24" pos:end="6031:25">pe</name></name></expr>)</condition> <block pos:start="6031:28" pos:end="6035:13">{<block_content pos:start="6033:17" pos:end="6033:32">

                <goto pos:start="6033:17" pos:end="6033:32">goto <name pos:start="6033:22" pos:end="6033:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6037:13" pos:end="6037:32"><expr pos:start="6037:13" pos:end="6037:31"><call pos:start="6037:13" pos:end="6037:31"><name pos:start="6037:13" pos:end="6037:28">gen_update_cc_op</name><argument_list pos:start="6037:29" pos:end="6037:31">(<argument pos:start="6037:30" pos:end="6037:30"><expr pos:start="6037:30" pos:end="6037:30"><name pos:start="6037:30" pos:end="6037:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6039:13" pos:end="6039:46"><expr pos:start="6039:13" pos:end="6039:45"><call pos:start="6039:13" pos:end="6039:45"><name pos:start="6039:13" pos:end="6039:22">gen_jmp_im</name><argument_list pos:start="6039:23" pos:end="6039:45">(<argument pos:start="6039:24" pos:end="6039:44"><expr pos:start="6039:24" pos:end="6039:44"><name pos:start="6039:24" pos:end="6039:31">pc_start</name> <operator pos:start="6039:33" pos:end="6039:33">-</operator> <name pos:start="6039:35" pos:end="6039:44"><name pos:start="6039:35" pos:end="6039:35">s</name><operator pos:start="6039:36" pos:end="6039:37">-&gt;</operator><name pos:start="6039:38" pos:end="6039:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6041:13" pos:end="6041:39"><expr pos:start="6041:13" pos:end="6041:38"><call pos:start="6041:13" pos:end="6041:38"><name pos:start="6041:13" pos:end="6041:29">gen_helper_skinit</name><argument_list pos:start="6041:30" pos:end="6041:38">(<argument pos:start="6041:31" pos:end="6041:37"><expr pos:start="6041:31" pos:end="6041:37"><name pos:start="6041:31" pos:end="6041:37">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6043:13" pos:end="6043:18">break;</break>



        <case pos:start="6047:9" pos:end="6047:18">case <expr pos:start="6047:14" pos:end="6047:17"><literal type="number" pos:start="6047:14" pos:end="6047:17">0xdf</literal></expr>:</case> <comment type="block" pos:start="6047:20" pos:end="6047:32">/* INVLPGA */</comment>

            <if_stmt pos:start="6049:13" pos:end="6053:13"><if pos:start="6049:13" pos:end="6053:13">if <condition pos:start="6049:16" pos:end="6049:53">(<expr pos:start="6049:17" pos:end="6049:52"><operator pos:start="6049:17" pos:end="6049:17">!</operator><operator pos:start="6049:18" pos:end="6049:18">(</operator><name pos:start="6049:19" pos:end="6049:26"><name pos:start="6049:19" pos:end="6049:19">s</name><operator pos:start="6049:20" pos:end="6049:21">-&gt;</operator><name pos:start="6049:22" pos:end="6049:26">flags</name></name> <operator pos:start="6049:28" pos:end="6049:28">&amp;</operator> <name pos:start="6049:30" pos:end="6049:41">HF_SVME_MASK</name><operator pos:start="6049:42" pos:end="6049:42">)</operator> <operator pos:start="6049:44" pos:end="6049:45">||</operator> <operator pos:start="6049:47" pos:end="6049:47">!</operator><name pos:start="6049:48" pos:end="6049:52"><name pos:start="6049:48" pos:end="6049:48">s</name><operator pos:start="6049:49" pos:end="6049:50">-&gt;</operator><name pos:start="6049:51" pos:end="6049:52">pe</name></name></expr>)</condition> <block pos:start="6049:55" pos:end="6053:13">{<block_content pos:start="6051:17" pos:end="6051:32">

                <goto pos:start="6051:17" pos:end="6051:32">goto <name pos:start="6051:22" pos:end="6051:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="6055:13" pos:end="6061:13"><if pos:start="6055:13" pos:end="6061:13">if <condition pos:start="6055:16" pos:end="6055:28">(<expr pos:start="6055:17" pos:end="6055:27"><name pos:start="6055:17" pos:end="6055:22"><name pos:start="6055:17" pos:end="6055:17">s</name><operator pos:start="6055:18" pos:end="6055:19">-&gt;</operator><name pos:start="6055:20" pos:end="6055:22">cpl</name></name> <operator pos:start="6055:24" pos:end="6055:25">!=</operator> <literal type="number" pos:start="6055:27" pos:end="6055:27">0</literal></expr>)</condition> <block pos:start="6055:30" pos:end="6061:13">{<block_content pos:start="6057:17" pos:end="6059:22">

                <expr_stmt pos:start="6057:17" pos:end="6057:68"><expr pos:start="6057:17" pos:end="6057:67"><call pos:start="6057:17" pos:end="6057:67"><name pos:start="6057:17" pos:end="6057:29">gen_exception</name><argument_list pos:start="6057:30" pos:end="6057:67">(<argument pos:start="6057:31" pos:end="6057:31"><expr pos:start="6057:31" pos:end="6057:31"><name pos:start="6057:31" pos:end="6057:31">s</name></expr></argument>, <argument pos:start="6057:34" pos:end="6057:43"><expr pos:start="6057:34" pos:end="6057:43"><name pos:start="6057:34" pos:end="6057:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6057:46" pos:end="6057:66"><expr pos:start="6057:46" pos:end="6057:66"><name pos:start="6057:46" pos:end="6057:53">pc_start</name> <operator pos:start="6057:55" pos:end="6057:55">-</operator> <name pos:start="6057:57" pos:end="6057:66"><name pos:start="6057:57" pos:end="6057:57">s</name><operator pos:start="6057:58" pos:end="6057:59">-&gt;</operator><name pos:start="6057:60" pos:end="6057:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6059:17" pos:end="6059:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6063:13" pos:end="6063:32"><expr pos:start="6063:13" pos:end="6063:31"><call pos:start="6063:13" pos:end="6063:31"><name pos:start="6063:13" pos:end="6063:28">gen_update_cc_op</name><argument_list pos:start="6063:29" pos:end="6063:31">(<argument pos:start="6063:30" pos:end="6063:30"><expr pos:start="6063:30" pos:end="6063:30"><name pos:start="6063:30" pos:end="6063:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6065:13" pos:end="6065:46"><expr pos:start="6065:13" pos:end="6065:45"><call pos:start="6065:13" pos:end="6065:45"><name pos:start="6065:13" pos:end="6065:22">gen_jmp_im</name><argument_list pos:start="6065:23" pos:end="6065:45">(<argument pos:start="6065:24" pos:end="6065:44"><expr pos:start="6065:24" pos:end="6065:44"><name pos:start="6065:24" pos:end="6065:31">pc_start</name> <operator pos:start="6065:33" pos:end="6065:33">-</operator> <name pos:start="6065:35" pos:end="6065:44"><name pos:start="6065:35" pos:end="6065:35">s</name><operator pos:start="6065:36" pos:end="6065:37">-&gt;</operator><name pos:start="6065:38" pos:end="6065:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6067:13" pos:end="6067:69"><expr pos:start="6067:13" pos:end="6067:68"><call pos:start="6067:13" pos:end="6067:68"><name pos:start="6067:13" pos:end="6067:30">gen_helper_invlpga</name><argument_list pos:start="6067:31" pos:end="6067:68">(<argument pos:start="6067:32" pos:end="6067:38"><expr pos:start="6067:32" pos:end="6067:38"><name pos:start="6067:32" pos:end="6067:38">cpu_env</name></expr></argument>, <argument pos:start="6067:41" pos:end="6067:67"><expr pos:start="6067:41" pos:end="6067:67"><call pos:start="6067:41" pos:end="6067:67"><name pos:start="6067:41" pos:end="6067:53">tcg_const_i32</name><argument_list pos:start="6067:54" pos:end="6067:67">(<argument pos:start="6067:55" pos:end="6067:66"><expr pos:start="6067:55" pos:end="6067:66"><name pos:start="6067:55" pos:end="6067:62"><name pos:start="6067:55" pos:end="6067:55">s</name><operator pos:start="6067:56" pos:end="6067:57">-&gt;</operator><name pos:start="6067:58" pos:end="6067:62">aflag</name></name> <operator pos:start="6067:64" pos:end="6067:64">-</operator> <literal type="number" pos:start="6067:66" pos:end="6067:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6069:13" pos:end="6069:18">break;</break>



        <expr_stmt pos:start="6073:9" pos:end="6073:29"><expr pos:start="6073:9" pos:end="6073:29"><call pos:start="6073:9" pos:end="6073:28"><name pos:start="6073:9" pos:end="6073:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="6073:26" pos:end="6073:28">(<argument pos:start="6073:27" pos:end="6073:27"><expr pos:start="6073:27" pos:end="6073:27"><literal type="number" pos:start="6073:27" pos:end="6073:27">2</literal></expr></argument>)</argument_list></call><operator pos:start="6073:29" pos:end="6073:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="6073:31" pos:end="6073:40">/* lgdt */</comment>

            <if_stmt pos:start="6075:13" pos:end="6081:13"><if pos:start="6075:13" pos:end="6081:13">if <condition pos:start="6075:16" pos:end="6075:28">(<expr pos:start="6075:17" pos:end="6075:27"><name pos:start="6075:17" pos:end="6075:22"><name pos:start="6075:17" pos:end="6075:17">s</name><operator pos:start="6075:18" pos:end="6075:19">-&gt;</operator><name pos:start="6075:20" pos:end="6075:22">cpl</name></name> <operator pos:start="6075:24" pos:end="6075:25">!=</operator> <literal type="number" pos:start="6075:27" pos:end="6075:27">0</literal></expr>)</condition> <block pos:start="6075:30" pos:end="6081:13">{<block_content pos:start="6077:17" pos:end="6079:22">

                <expr_stmt pos:start="6077:17" pos:end="6077:68"><expr pos:start="6077:17" pos:end="6077:67"><call pos:start="6077:17" pos:end="6077:67"><name pos:start="6077:17" pos:end="6077:29">gen_exception</name><argument_list pos:start="6077:30" pos:end="6077:67">(<argument pos:start="6077:31" pos:end="6077:31"><expr pos:start="6077:31" pos:end="6077:31"><name pos:start="6077:31" pos:end="6077:31">s</name></expr></argument>, <argument pos:start="6077:34" pos:end="6077:43"><expr pos:start="6077:34" pos:end="6077:43"><name pos:start="6077:34" pos:end="6077:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6077:46" pos:end="6077:66"><expr pos:start="6077:46" pos:end="6077:66"><name pos:start="6077:46" pos:end="6077:53">pc_start</name> <operator pos:start="6077:55" pos:end="6077:55">-</operator> <name pos:start="6077:57" pos:end="6077:66"><name pos:start="6077:57" pos:end="6077:57">s</name><operator pos:start="6077:58" pos:end="6077:59">-&gt;</operator><name pos:start="6077:60" pos:end="6077:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6079:17" pos:end="6079:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6083:13" pos:end="6083:70"><expr pos:start="6083:13" pos:end="6083:69"><call pos:start="6083:13" pos:end="6083:69"><name pos:start="6083:13" pos:end="6083:35">gen_svm_check_intercept</name><argument_list pos:start="6083:36" pos:end="6083:69">(<argument pos:start="6083:37" pos:end="6083:37"><expr pos:start="6083:37" pos:end="6083:37"><name pos:start="6083:37" pos:end="6083:37">s</name></expr></argument>, <argument pos:start="6083:40" pos:end="6083:47"><expr pos:start="6083:40" pos:end="6083:47"><name pos:start="6083:40" pos:end="6083:47">pc_start</name></expr></argument>, <argument pos:start="6083:50" pos:end="6083:68"><expr pos:start="6083:50" pos:end="6083:68"><name pos:start="6083:50" pos:end="6083:68">SVM_EXIT_GDTR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6085:13" pos:end="6085:41"><expr pos:start="6085:13" pos:end="6085:40"><call pos:start="6085:13" pos:end="6085:40"><name pos:start="6085:13" pos:end="6085:25">gen_lea_modrm</name><argument_list pos:start="6085:26" pos:end="6085:40">(<argument pos:start="6085:27" pos:end="6085:29"><expr pos:start="6085:27" pos:end="6085:29"><name pos:start="6085:27" pos:end="6085:29">env</name></expr></argument>, <argument pos:start="6085:32" pos:end="6085:32"><expr pos:start="6085:32" pos:end="6085:32"><name pos:start="6085:32" pos:end="6085:32">s</name></expr></argument>, <argument pos:start="6085:35" pos:end="6085:39"><expr pos:start="6085:35" pos:end="6085:39"><name pos:start="6085:35" pos:end="6085:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6087:13" pos:end="6087:50"><expr pos:start="6087:13" pos:end="6087:49"><call pos:start="6087:13" pos:end="6087:49"><name pos:start="6087:13" pos:end="6087:23">gen_op_ld_v</name><argument_list pos:start="6087:24" pos:end="6087:49">(<argument pos:start="6087:25" pos:end="6087:25"><expr pos:start="6087:25" pos:end="6087:25"><name pos:start="6087:25" pos:end="6087:25">s</name></expr></argument>, <argument pos:start="6087:28" pos:end="6087:32"><expr pos:start="6087:28" pos:end="6087:32"><name pos:start="6087:28" pos:end="6087:32">MO_16</name></expr></argument>, <argument pos:start="6087:35" pos:end="6087:40"><expr pos:start="6087:35" pos:end="6087:40"><name pos:start="6087:35" pos:end="6087:40">cpu_T1</name></expr></argument>, <argument pos:start="6087:43" pos:end="6087:48"><expr pos:start="6087:43" pos:end="6087:48"><name pos:start="6087:43" pos:end="6087:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6089:13" pos:end="6089:32"><expr pos:start="6089:13" pos:end="6089:31"><call pos:start="6089:13" pos:end="6089:31"><name pos:start="6089:13" pos:end="6089:25">gen_add_A0_im</name><argument_list pos:start="6089:26" pos:end="6089:31">(<argument pos:start="6089:27" pos:end="6089:27"><expr pos:start="6089:27" pos:end="6089:27"><name pos:start="6089:27" pos:end="6089:27">s</name></expr></argument>, <argument pos:start="6089:30" pos:end="6089:30"><expr pos:start="6089:30" pos:end="6089:30"><literal type="number" pos:start="6089:30" pos:end="6089:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6091:13" pos:end="6091:62"><expr pos:start="6091:13" pos:end="6091:61"><call pos:start="6091:13" pos:end="6091:61"><name pos:start="6091:13" pos:end="6091:23">gen_op_ld_v</name><argument_list pos:start="6091:24" pos:end="6091:61">(<argument pos:start="6091:25" pos:end="6091:25"><expr pos:start="6091:25" pos:end="6091:25"><name pos:start="6091:25" pos:end="6091:25">s</name></expr></argument>, <argument pos:start="6091:28" pos:end="6091:44"><expr pos:start="6091:28" pos:end="6091:44"><call pos:start="6091:28" pos:end="6091:36"><name pos:start="6091:28" pos:end="6091:33">CODE64</name><argument_list pos:start="6091:34" pos:end="6091:36">(<argument pos:start="6091:35" pos:end="6091:35"><expr pos:start="6091:35" pos:end="6091:35"><name pos:start="6091:35" pos:end="6091:35">s</name></expr></argument>)</argument_list></call> <operator pos:start="6091:38" pos:end="6091:38">+</operator> <name pos:start="6091:40" pos:end="6091:44">MO_32</name></expr></argument>, <argument pos:start="6091:47" pos:end="6091:52"><expr pos:start="6091:47" pos:end="6091:52"><name pos:start="6091:47" pos:end="6091:52">cpu_T0</name></expr></argument>, <argument pos:start="6091:55" pos:end="6091:60"><expr pos:start="6091:55" pos:end="6091:60"><name pos:start="6091:55" pos:end="6091:60">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6093:13" pos:end="6097:13"><if pos:start="6093:13" pos:end="6097:13">if <condition pos:start="6093:16" pos:end="6093:31">(<expr pos:start="6093:17" pos:end="6093:30"><name pos:start="6093:17" pos:end="6093:21">dflag</name> <operator pos:start="6093:23" pos:end="6093:24">==</operator> <name pos:start="6093:26" pos:end="6093:30">MO_16</name></expr>)</condition> <block pos:start="6093:33" pos:end="6097:13">{<block_content pos:start="6095:17" pos:end="6095:58">

                <expr_stmt pos:start="6095:17" pos:end="6095:58"><expr pos:start="6095:17" pos:end="6095:57"><call pos:start="6095:17" pos:end="6095:57"><name pos:start="6095:17" pos:end="6095:31">tcg_gen_andi_tl</name><argument_list pos:start="6095:32" pos:end="6095:57">(<argument pos:start="6095:33" pos:end="6095:38"><expr pos:start="6095:33" pos:end="6095:38"><name pos:start="6095:33" pos:end="6095:38">cpu_T0</name></expr></argument>, <argument pos:start="6095:41" pos:end="6095:46"><expr pos:start="6095:41" pos:end="6095:46"><name pos:start="6095:41" pos:end="6095:46">cpu_T0</name></expr></argument>, <argument pos:start="6095:49" pos:end="6095:56"><expr pos:start="6095:49" pos:end="6095:56"><literal type="number" pos:start="6095:49" pos:end="6095:56">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6099:13" pos:end="6099:76"><expr pos:start="6099:13" pos:end="6099:75"><call pos:start="6099:13" pos:end="6099:75"><name pos:start="6099:13" pos:end="6099:25">tcg_gen_st_tl</name><argument_list pos:start="6099:26" pos:end="6099:75">(<argument pos:start="6099:27" pos:end="6099:32"><expr pos:start="6099:27" pos:end="6099:32"><name pos:start="6099:27" pos:end="6099:32">cpu_T0</name></expr></argument>, <argument pos:start="6099:35" pos:end="6099:41"><expr pos:start="6099:35" pos:end="6099:41"><name pos:start="6099:35" pos:end="6099:41">cpu_env</name></expr></argument>, <argument pos:start="6099:44" pos:end="6099:74"><expr pos:start="6099:44" pos:end="6099:74"><call pos:start="6099:44" pos:end="6099:74"><name pos:start="6099:44" pos:end="6099:51">offsetof</name><argument_list pos:start="6099:52" pos:end="6099:74">(<argument pos:start="6099:53" pos:end="6099:63"><expr pos:start="6099:53" pos:end="6099:63"><name pos:start="6099:53" pos:end="6099:63">CPUX86State</name></expr></argument>, <argument pos:start="6099:66" pos:end="6099:73"><expr pos:start="6099:66" pos:end="6099:73"><name pos:start="6099:66" pos:end="6099:73"><name pos:start="6099:66" pos:end="6099:68">gdt</name><operator pos:start="6099:69" pos:end="6099:69">.</operator><name pos:start="6099:70" pos:end="6099:73">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6101:13" pos:end="6101:79"><expr pos:start="6101:13" pos:end="6101:78"><call pos:start="6101:13" pos:end="6101:78"><name pos:start="6101:13" pos:end="6101:27">tcg_gen_st32_tl</name><argument_list pos:start="6101:28" pos:end="6101:78">(<argument pos:start="6101:29" pos:end="6101:34"><expr pos:start="6101:29" pos:end="6101:34"><name pos:start="6101:29" pos:end="6101:34">cpu_T1</name></expr></argument>, <argument pos:start="6101:37" pos:end="6101:43"><expr pos:start="6101:37" pos:end="6101:43"><name pos:start="6101:37" pos:end="6101:43">cpu_env</name></expr></argument>, <argument pos:start="6101:46" pos:end="6101:77"><expr pos:start="6101:46" pos:end="6101:77"><call pos:start="6101:46" pos:end="6101:77"><name pos:start="6101:46" pos:end="6101:53">offsetof</name><argument_list pos:start="6101:54" pos:end="6101:77">(<argument pos:start="6101:55" pos:end="6101:65"><expr pos:start="6101:55" pos:end="6101:65"><name pos:start="6101:55" pos:end="6101:65">CPUX86State</name></expr></argument>, <argument pos:start="6101:68" pos:end="6101:76"><expr pos:start="6101:68" pos:end="6101:76"><name pos:start="6101:68" pos:end="6101:76"><name pos:start="6101:68" pos:end="6101:70">gdt</name><operator pos:start="6101:71" pos:end="6101:71">.</operator><name pos:start="6101:72" pos:end="6101:76">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6103:13" pos:end="6103:18">break;</break>



        <expr_stmt pos:start="6107:9" pos:end="6107:29"><expr pos:start="6107:9" pos:end="6107:29"><call pos:start="6107:9" pos:end="6107:28"><name pos:start="6107:9" pos:end="6107:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="6107:26" pos:end="6107:28">(<argument pos:start="6107:27" pos:end="6107:27"><expr pos:start="6107:27" pos:end="6107:27"><literal type="number" pos:start="6107:27" pos:end="6107:27">3</literal></expr></argument>)</argument_list></call><operator pos:start="6107:29" pos:end="6107:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="6107:31" pos:end="6107:40">/* lidt */</comment>

            <if_stmt pos:start="6109:13" pos:end="6115:13"><if pos:start="6109:13" pos:end="6115:13">if <condition pos:start="6109:16" pos:end="6109:28">(<expr pos:start="6109:17" pos:end="6109:27"><name pos:start="6109:17" pos:end="6109:22"><name pos:start="6109:17" pos:end="6109:17">s</name><operator pos:start="6109:18" pos:end="6109:19">-&gt;</operator><name pos:start="6109:20" pos:end="6109:22">cpl</name></name> <operator pos:start="6109:24" pos:end="6109:25">!=</operator> <literal type="number" pos:start="6109:27" pos:end="6109:27">0</literal></expr>)</condition> <block pos:start="6109:30" pos:end="6115:13">{<block_content pos:start="6111:17" pos:end="6113:22">

                <expr_stmt pos:start="6111:17" pos:end="6111:68"><expr pos:start="6111:17" pos:end="6111:67"><call pos:start="6111:17" pos:end="6111:67"><name pos:start="6111:17" pos:end="6111:29">gen_exception</name><argument_list pos:start="6111:30" pos:end="6111:67">(<argument pos:start="6111:31" pos:end="6111:31"><expr pos:start="6111:31" pos:end="6111:31"><name pos:start="6111:31" pos:end="6111:31">s</name></expr></argument>, <argument pos:start="6111:34" pos:end="6111:43"><expr pos:start="6111:34" pos:end="6111:43"><name pos:start="6111:34" pos:end="6111:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6111:46" pos:end="6111:66"><expr pos:start="6111:46" pos:end="6111:66"><name pos:start="6111:46" pos:end="6111:53">pc_start</name> <operator pos:start="6111:55" pos:end="6111:55">-</operator> <name pos:start="6111:57" pos:end="6111:66"><name pos:start="6111:57" pos:end="6111:57">s</name><operator pos:start="6111:58" pos:end="6111:59">-&gt;</operator><name pos:start="6111:60" pos:end="6111:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6113:17" pos:end="6113:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6117:13" pos:end="6117:70"><expr pos:start="6117:13" pos:end="6117:69"><call pos:start="6117:13" pos:end="6117:69"><name pos:start="6117:13" pos:end="6117:35">gen_svm_check_intercept</name><argument_list pos:start="6117:36" pos:end="6117:69">(<argument pos:start="6117:37" pos:end="6117:37"><expr pos:start="6117:37" pos:end="6117:37"><name pos:start="6117:37" pos:end="6117:37">s</name></expr></argument>, <argument pos:start="6117:40" pos:end="6117:47"><expr pos:start="6117:40" pos:end="6117:47"><name pos:start="6117:40" pos:end="6117:47">pc_start</name></expr></argument>, <argument pos:start="6117:50" pos:end="6117:68"><expr pos:start="6117:50" pos:end="6117:68"><name pos:start="6117:50" pos:end="6117:68">SVM_EXIT_IDTR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6119:13" pos:end="6119:41"><expr pos:start="6119:13" pos:end="6119:40"><call pos:start="6119:13" pos:end="6119:40"><name pos:start="6119:13" pos:end="6119:25">gen_lea_modrm</name><argument_list pos:start="6119:26" pos:end="6119:40">(<argument pos:start="6119:27" pos:end="6119:29"><expr pos:start="6119:27" pos:end="6119:29"><name pos:start="6119:27" pos:end="6119:29">env</name></expr></argument>, <argument pos:start="6119:32" pos:end="6119:32"><expr pos:start="6119:32" pos:end="6119:32"><name pos:start="6119:32" pos:end="6119:32">s</name></expr></argument>, <argument pos:start="6119:35" pos:end="6119:39"><expr pos:start="6119:35" pos:end="6119:39"><name pos:start="6119:35" pos:end="6119:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6121:13" pos:end="6121:50"><expr pos:start="6121:13" pos:end="6121:49"><call pos:start="6121:13" pos:end="6121:49"><name pos:start="6121:13" pos:end="6121:23">gen_op_ld_v</name><argument_list pos:start="6121:24" pos:end="6121:49">(<argument pos:start="6121:25" pos:end="6121:25"><expr pos:start="6121:25" pos:end="6121:25"><name pos:start="6121:25" pos:end="6121:25">s</name></expr></argument>, <argument pos:start="6121:28" pos:end="6121:32"><expr pos:start="6121:28" pos:end="6121:32"><name pos:start="6121:28" pos:end="6121:32">MO_16</name></expr></argument>, <argument pos:start="6121:35" pos:end="6121:40"><expr pos:start="6121:35" pos:end="6121:40"><name pos:start="6121:35" pos:end="6121:40">cpu_T1</name></expr></argument>, <argument pos:start="6121:43" pos:end="6121:48"><expr pos:start="6121:43" pos:end="6121:48"><name pos:start="6121:43" pos:end="6121:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6123:13" pos:end="6123:32"><expr pos:start="6123:13" pos:end="6123:31"><call pos:start="6123:13" pos:end="6123:31"><name pos:start="6123:13" pos:end="6123:25">gen_add_A0_im</name><argument_list pos:start="6123:26" pos:end="6123:31">(<argument pos:start="6123:27" pos:end="6123:27"><expr pos:start="6123:27" pos:end="6123:27"><name pos:start="6123:27" pos:end="6123:27">s</name></expr></argument>, <argument pos:start="6123:30" pos:end="6123:30"><expr pos:start="6123:30" pos:end="6123:30"><literal type="number" pos:start="6123:30" pos:end="6123:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6125:13" pos:end="6125:62"><expr pos:start="6125:13" pos:end="6125:61"><call pos:start="6125:13" pos:end="6125:61"><name pos:start="6125:13" pos:end="6125:23">gen_op_ld_v</name><argument_list pos:start="6125:24" pos:end="6125:61">(<argument pos:start="6125:25" pos:end="6125:25"><expr pos:start="6125:25" pos:end="6125:25"><name pos:start="6125:25" pos:end="6125:25">s</name></expr></argument>, <argument pos:start="6125:28" pos:end="6125:44"><expr pos:start="6125:28" pos:end="6125:44"><call pos:start="6125:28" pos:end="6125:36"><name pos:start="6125:28" pos:end="6125:33">CODE64</name><argument_list pos:start="6125:34" pos:end="6125:36">(<argument pos:start="6125:35" pos:end="6125:35"><expr pos:start="6125:35" pos:end="6125:35"><name pos:start="6125:35" pos:end="6125:35">s</name></expr></argument>)</argument_list></call> <operator pos:start="6125:38" pos:end="6125:38">+</operator> <name pos:start="6125:40" pos:end="6125:44">MO_32</name></expr></argument>, <argument pos:start="6125:47" pos:end="6125:52"><expr pos:start="6125:47" pos:end="6125:52"><name pos:start="6125:47" pos:end="6125:52">cpu_T0</name></expr></argument>, <argument pos:start="6125:55" pos:end="6125:60"><expr pos:start="6125:55" pos:end="6125:60"><name pos:start="6125:55" pos:end="6125:60">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6127:13" pos:end="6131:13"><if pos:start="6127:13" pos:end="6131:13">if <condition pos:start="6127:16" pos:end="6127:31">(<expr pos:start="6127:17" pos:end="6127:30"><name pos:start="6127:17" pos:end="6127:21">dflag</name> <operator pos:start="6127:23" pos:end="6127:24">==</operator> <name pos:start="6127:26" pos:end="6127:30">MO_16</name></expr>)</condition> <block pos:start="6127:33" pos:end="6131:13">{<block_content pos:start="6129:17" pos:end="6129:58">

                <expr_stmt pos:start="6129:17" pos:end="6129:58"><expr pos:start="6129:17" pos:end="6129:57"><call pos:start="6129:17" pos:end="6129:57"><name pos:start="6129:17" pos:end="6129:31">tcg_gen_andi_tl</name><argument_list pos:start="6129:32" pos:end="6129:57">(<argument pos:start="6129:33" pos:end="6129:38"><expr pos:start="6129:33" pos:end="6129:38"><name pos:start="6129:33" pos:end="6129:38">cpu_T0</name></expr></argument>, <argument pos:start="6129:41" pos:end="6129:46"><expr pos:start="6129:41" pos:end="6129:46"><name pos:start="6129:41" pos:end="6129:46">cpu_T0</name></expr></argument>, <argument pos:start="6129:49" pos:end="6129:56"><expr pos:start="6129:49" pos:end="6129:56"><literal type="number" pos:start="6129:49" pos:end="6129:56">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6133:13" pos:end="6133:76"><expr pos:start="6133:13" pos:end="6133:75"><call pos:start="6133:13" pos:end="6133:75"><name pos:start="6133:13" pos:end="6133:25">tcg_gen_st_tl</name><argument_list pos:start="6133:26" pos:end="6133:75">(<argument pos:start="6133:27" pos:end="6133:32"><expr pos:start="6133:27" pos:end="6133:32"><name pos:start="6133:27" pos:end="6133:32">cpu_T0</name></expr></argument>, <argument pos:start="6133:35" pos:end="6133:41"><expr pos:start="6133:35" pos:end="6133:41"><name pos:start="6133:35" pos:end="6133:41">cpu_env</name></expr></argument>, <argument pos:start="6133:44" pos:end="6133:74"><expr pos:start="6133:44" pos:end="6133:74"><call pos:start="6133:44" pos:end="6133:74"><name pos:start="6133:44" pos:end="6133:51">offsetof</name><argument_list pos:start="6133:52" pos:end="6133:74">(<argument pos:start="6133:53" pos:end="6133:63"><expr pos:start="6133:53" pos:end="6133:63"><name pos:start="6133:53" pos:end="6133:63">CPUX86State</name></expr></argument>, <argument pos:start="6133:66" pos:end="6133:73"><expr pos:start="6133:66" pos:end="6133:73"><name pos:start="6133:66" pos:end="6133:73"><name pos:start="6133:66" pos:end="6133:68">idt</name><operator pos:start="6133:69" pos:end="6133:69">.</operator><name pos:start="6133:70" pos:end="6133:73">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6135:13" pos:end="6135:79"><expr pos:start="6135:13" pos:end="6135:78"><call pos:start="6135:13" pos:end="6135:78"><name pos:start="6135:13" pos:end="6135:27">tcg_gen_st32_tl</name><argument_list pos:start="6135:28" pos:end="6135:78">(<argument pos:start="6135:29" pos:end="6135:34"><expr pos:start="6135:29" pos:end="6135:34"><name pos:start="6135:29" pos:end="6135:34">cpu_T1</name></expr></argument>, <argument pos:start="6135:37" pos:end="6135:43"><expr pos:start="6135:37" pos:end="6135:43"><name pos:start="6135:37" pos:end="6135:43">cpu_env</name></expr></argument>, <argument pos:start="6135:46" pos:end="6135:77"><expr pos:start="6135:46" pos:end="6135:77"><call pos:start="6135:46" pos:end="6135:77"><name pos:start="6135:46" pos:end="6135:53">offsetof</name><argument_list pos:start="6135:54" pos:end="6135:77">(<argument pos:start="6135:55" pos:end="6135:65"><expr pos:start="6135:55" pos:end="6135:65"><name pos:start="6135:55" pos:end="6135:65">CPUX86State</name></expr></argument>, <argument pos:start="6135:68" pos:end="6135:76"><expr pos:start="6135:68" pos:end="6135:76"><name pos:start="6135:68" pos:end="6135:76"><name pos:start="6135:68" pos:end="6135:70">idt</name><operator pos:start="6135:71" pos:end="6135:71">.</operator><name pos:start="6135:72" pos:end="6135:76">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6137:13" pos:end="6137:18">break;</break>



        <expr_stmt pos:start="6141:9" pos:end="6143:68"><expr pos:start="6141:9" pos:end="6143:67"><call pos:start="6141:9" pos:end="6141:24"><name pos:start="6141:9" pos:end="6141:21">CASE_MODRM_OP</name><argument_list pos:start="6141:22" pos:end="6141:24">(<argument pos:start="6141:23" pos:end="6141:23"><expr pos:start="6141:23" pos:end="6141:23"><literal type="number" pos:start="6141:23" pos:end="6141:23">4</literal></expr></argument>)</argument_list></call><operator pos:start="6141:25" pos:end="6141:25">:</operator> <comment type="block" pos:start="6141:27" pos:end="6141:36">/* smsw */</comment>

            <call pos:start="6143:13" pos:end="6143:67"><name pos:start="6143:13" pos:end="6143:35">gen_svm_check_intercept</name><argument_list pos:start="6143:36" pos:end="6143:67">(<argument pos:start="6143:37" pos:end="6143:37"><expr pos:start="6143:37" pos:end="6143:37"><name pos:start="6143:37" pos:end="6143:37">s</name></expr></argument>, <argument pos:start="6143:40" pos:end="6143:47"><expr pos:start="6143:40" pos:end="6143:47"><name pos:start="6143:40" pos:end="6143:47">pc_start</name></expr></argument>, <argument pos:start="6143:50" pos:end="6143:66"><expr pos:start="6143:50" pos:end="6143:66"><name pos:start="6143:50" pos:end="6143:66">SVM_EXIT_READ_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6145:13" pos:end="6145:73"><expr pos:start="6145:13" pos:end="6145:72"><call pos:start="6145:13" pos:end="6145:72"><name pos:start="6145:13" pos:end="6145:25">tcg_gen_ld_tl</name><argument_list pos:start="6145:26" pos:end="6145:72">(<argument pos:start="6145:27" pos:end="6145:32"><expr pos:start="6145:27" pos:end="6145:32"><name pos:start="6145:27" pos:end="6145:32">cpu_T0</name></expr></argument>, <argument pos:start="6145:35" pos:end="6145:41"><expr pos:start="6145:35" pos:end="6145:41"><name pos:start="6145:35" pos:end="6145:41">cpu_env</name></expr></argument>, <argument pos:start="6145:44" pos:end="6145:71"><expr pos:start="6145:44" pos:end="6145:71"><call pos:start="6145:44" pos:end="6145:71"><name pos:start="6145:44" pos:end="6145:51">offsetof</name><argument_list pos:start="6145:52" pos:end="6145:71">(<argument pos:start="6145:53" pos:end="6145:63"><expr pos:start="6145:53" pos:end="6145:63"><name pos:start="6145:53" pos:end="6145:63">CPUX86State</name></expr></argument>, <argument pos:start="6145:66" pos:end="6145:70"><expr pos:start="6145:66" pos:end="6145:70"><name pos:start="6145:66" pos:end="6145:70"><name pos:start="6145:66" pos:end="6145:67">cr</name><index pos:start="6145:68" pos:end="6145:70">[<expr pos:start="6145:69" pos:end="6145:69"><literal type="number" pos:start="6145:69" pos:end="6145:69">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6147:13" pos:end="6157:13"><if pos:start="6147:13" pos:end="6153:13">if <condition pos:start="6147:16" pos:end="6147:26">(<expr pos:start="6147:17" pos:end="6147:25"><call pos:start="6147:17" pos:end="6147:25"><name pos:start="6147:17" pos:end="6147:22">CODE64</name><argument_list pos:start="6147:23" pos:end="6147:25">(<argument pos:start="6147:24" pos:end="6147:24"><expr pos:start="6147:24" pos:end="6147:24"><name pos:start="6147:24" pos:end="6147:24">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6147:28" pos:end="6153:13">{<block_content pos:start="6149:17" pos:end="6151:51">

                <expr_stmt pos:start="6149:17" pos:end="6149:39"><expr pos:start="6149:17" pos:end="6149:38"><name pos:start="6149:17" pos:end="6149:19">mod</name> <operator pos:start="6149:21" pos:end="6149:21">=</operator> <operator pos:start="6149:23" pos:end="6149:23">(</operator><name pos:start="6149:24" pos:end="6149:28">modrm</name> <operator pos:start="6149:30" pos:end="6149:31">&gt;&gt;</operator> <literal type="number" pos:start="6149:33" pos:end="6149:33">6</literal><operator pos:start="6149:34" pos:end="6149:34">)</operator> <operator pos:start="6149:36" pos:end="6149:36">&amp;</operator> <literal type="number" pos:start="6149:38" pos:end="6149:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="6151:17" pos:end="6151:51"><expr pos:start="6151:17" pos:end="6151:50"><name pos:start="6151:17" pos:end="6151:18">ot</name> <operator pos:start="6151:20" pos:end="6151:20">=</operator> <operator pos:start="6151:22" pos:end="6151:22">(</operator><ternary pos:start="6151:23" pos:end="6151:49"><condition pos:start="6151:23" pos:end="6151:32"><expr pos:start="6151:23" pos:end="6151:30"><name pos:start="6151:23" pos:end="6151:25">mod</name> <operator pos:start="6151:27" pos:end="6151:28">!=</operator> <literal type="number" pos:start="6151:30" pos:end="6151:30">3</literal></expr> ?</condition><then pos:start="6151:34" pos:end="6151:38"> <expr pos:start="6151:34" pos:end="6151:38"><name pos:start="6151:34" pos:end="6151:38">MO_16</name></expr> </then><else pos:start="6151:40" pos:end="6151:49">: <expr pos:start="6151:42" pos:end="6151:49"><name pos:start="6151:42" pos:end="6151:49"><name pos:start="6151:42" pos:end="6151:42">s</name><operator pos:start="6151:43" pos:end="6151:44">-&gt;</operator><name pos:start="6151:45" pos:end="6151:49">dflag</name></name></expr></else></ternary><operator pos:start="6151:50" pos:end="6151:50">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6153:15" pos:end="6157:13">else <block pos:start="6153:20" pos:end="6157:13">{<block_content pos:start="6155:17" pos:end="6155:27">

                <expr_stmt pos:start="6155:17" pos:end="6155:27"><expr pos:start="6155:17" pos:end="6155:26"><name pos:start="6155:17" pos:end="6155:18">ot</name> <operator pos:start="6155:20" pos:end="6155:20">=</operator> <name pos:start="6155:22" pos:end="6155:26">MO_16</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6159:13" pos:end="6159:58"><expr pos:start="6159:13" pos:end="6159:57"><call pos:start="6159:13" pos:end="6159:57"><name pos:start="6159:13" pos:end="6159:26">gen_ldst_modrm</name><argument_list pos:start="6159:27" pos:end="6159:57">(<argument pos:start="6159:28" pos:end="6159:30"><expr pos:start="6159:28" pos:end="6159:30"><name pos:start="6159:28" pos:end="6159:30">env</name></expr></argument>, <argument pos:start="6159:33" pos:end="6159:33"><expr pos:start="6159:33" pos:end="6159:33"><name pos:start="6159:33" pos:end="6159:33">s</name></expr></argument>, <argument pos:start="6159:36" pos:end="6159:40"><expr pos:start="6159:36" pos:end="6159:40"><name pos:start="6159:36" pos:end="6159:40">modrm</name></expr></argument>, <argument pos:start="6159:43" pos:end="6159:44"><expr pos:start="6159:43" pos:end="6159:44"><name pos:start="6159:43" pos:end="6159:44">ot</name></expr></argument>, <argument pos:start="6159:47" pos:end="6159:53"><expr pos:start="6159:47" pos:end="6159:53"><name pos:start="6159:47" pos:end="6159:53">OR_TMP0</name></expr></argument>, <argument pos:start="6159:56" pos:end="6159:56"><expr pos:start="6159:56" pos:end="6159:56"><literal type="number" pos:start="6159:56" pos:end="6159:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6161:13" pos:end="6161:18">break;</break>

        <case pos:start="6163:9" pos:end="6163:18">case <expr pos:start="6163:14" pos:end="6163:17"><literal type="number" pos:start="6163:14" pos:end="6163:17">0xee</literal></expr>:</case> <comment type="block" pos:start="6163:20" pos:end="6163:31">/* rdpkru */</comment>

            <if_stmt pos:start="6165:13" pos:end="6169:13"><if pos:start="6165:13" pos:end="6169:13">if <condition pos:start="6165:16" pos:end="6165:39">(<expr pos:start="6165:17" pos:end="6165:38"><name pos:start="6165:17" pos:end="6165:24">prefixes</name> <operator pos:start="6165:26" pos:end="6165:26">&amp;</operator> <name pos:start="6165:28" pos:end="6165:38">PREFIX_LOCK</name></expr>)</condition> <block pos:start="6165:41" pos:end="6169:13">{<block_content pos:start="6167:17" pos:end="6167:32">

                <goto pos:start="6167:17" pos:end="6167:32">goto <name pos:start="6167:22" pos:end="6167:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6171:13" pos:end="6171:64"><expr pos:start="6171:13" pos:end="6171:63"><call pos:start="6171:13" pos:end="6171:63"><name pos:start="6171:13" pos:end="6171:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="6171:33" pos:end="6171:63">(<argument pos:start="6171:34" pos:end="6171:45"><expr pos:start="6171:34" pos:end="6171:45"><name pos:start="6171:34" pos:end="6171:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="6171:48" pos:end="6171:62"><expr pos:start="6171:48" pos:end="6171:62"><name pos:start="6171:48" pos:end="6171:62"><name pos:start="6171:48" pos:end="6171:55">cpu_regs</name><index pos:start="6171:56" pos:end="6171:62">[<expr pos:start="6171:57" pos:end="6171:61"><name pos:start="6171:57" pos:end="6171:61">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6173:13" pos:end="6173:67"><expr pos:start="6173:13" pos:end="6173:66"><call pos:start="6173:13" pos:end="6173:66"><name pos:start="6173:13" pos:end="6173:29">gen_helper_rdpkru</name><argument_list pos:start="6173:30" pos:end="6173:66">(<argument pos:start="6173:31" pos:end="6173:42"><expr pos:start="6173:31" pos:end="6173:42"><name pos:start="6173:31" pos:end="6173:42">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="6173:45" pos:end="6173:51"><expr pos:start="6173:45" pos:end="6173:51"><name pos:start="6173:45" pos:end="6173:51">cpu_env</name></expr></argument>, <argument pos:start="6173:54" pos:end="6173:65"><expr pos:start="6173:54" pos:end="6173:65"><name pos:start="6173:54" pos:end="6173:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6175:13" pos:end="6175:80"><expr pos:start="6175:13" pos:end="6175:79"><call pos:start="6175:13" pos:end="6175:79"><name pos:start="6175:13" pos:end="6175:31">tcg_gen_extr_i64_tl</name><argument_list pos:start="6175:32" pos:end="6175:79">(<argument pos:start="6175:33" pos:end="6175:47"><expr pos:start="6175:33" pos:end="6175:47"><name pos:start="6175:33" pos:end="6175:47"><name pos:start="6175:33" pos:end="6175:40">cpu_regs</name><index pos:start="6175:41" pos:end="6175:47">[<expr pos:start="6175:42" pos:end="6175:46"><name pos:start="6175:42" pos:end="6175:46">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="6175:50" pos:end="6175:64"><expr pos:start="6175:50" pos:end="6175:64"><name pos:start="6175:50" pos:end="6175:64"><name pos:start="6175:50" pos:end="6175:57">cpu_regs</name><index pos:start="6175:58" pos:end="6175:64">[<expr pos:start="6175:59" pos:end="6175:63"><name pos:start="6175:59" pos:end="6175:63">R_EDX</name></expr>]</index></name></expr></argument>, <argument pos:start="6175:67" pos:end="6175:78"><expr pos:start="6175:67" pos:end="6175:78"><name pos:start="6175:67" pos:end="6175:78">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6177:13" pos:end="6177:18">break;</break>

        <case pos:start="6179:9" pos:end="6179:18">case <expr pos:start="6179:14" pos:end="6179:17"><literal type="number" pos:start="6179:14" pos:end="6179:17">0xef</literal></expr>:</case> <comment type="block" pos:start="6179:20" pos:end="6179:31">/* wrpkru */</comment>

            <if_stmt pos:start="6181:13" pos:end="6185:13"><if pos:start="6181:13" pos:end="6185:13">if <condition pos:start="6181:16" pos:end="6181:39">(<expr pos:start="6181:17" pos:end="6181:38"><name pos:start="6181:17" pos:end="6181:24">prefixes</name> <operator pos:start="6181:26" pos:end="6181:26">&amp;</operator> <name pos:start="6181:28" pos:end="6181:38">PREFIX_LOCK</name></expr>)</condition> <block pos:start="6181:41" pos:end="6185:13">{<block_content pos:start="6183:17" pos:end="6183:32">

                <goto pos:start="6183:17" pos:end="6183:32">goto <name pos:start="6183:22" pos:end="6183:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6187:13" pos:end="6189:51"><expr pos:start="6187:13" pos:end="6189:50"><call pos:start="6187:13" pos:end="6189:50"><name pos:start="6187:13" pos:end="6187:33">tcg_gen_concat_tl_i64</name><argument_list pos:start="6187:34" pos:end="6189:50">(<argument pos:start="6187:35" pos:end="6187:46"><expr pos:start="6187:35" pos:end="6187:46"><name pos:start="6187:35" pos:end="6187:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="6187:49" pos:end="6187:63"><expr pos:start="6187:49" pos:end="6187:63"><name pos:start="6187:49" pos:end="6187:63"><name pos:start="6187:49" pos:end="6187:56">cpu_regs</name><index pos:start="6187:57" pos:end="6187:63">[<expr pos:start="6187:58" pos:end="6187:62"><name pos:start="6187:58" pos:end="6187:62">R_EAX</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="6189:35" pos:end="6189:49"><expr pos:start="6189:35" pos:end="6189:49"><name pos:start="6189:35" pos:end="6189:49"><name pos:start="6189:35" pos:end="6189:42">cpu_regs</name><index pos:start="6189:43" pos:end="6189:49">[<expr pos:start="6189:44" pos:end="6189:48"><name pos:start="6189:44" pos:end="6189:48">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6191:13" pos:end="6191:64"><expr pos:start="6191:13" pos:end="6191:63"><call pos:start="6191:13" pos:end="6191:63"><name pos:start="6191:13" pos:end="6191:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="6191:33" pos:end="6191:63">(<argument pos:start="6191:34" pos:end="6191:45"><expr pos:start="6191:34" pos:end="6191:45"><name pos:start="6191:34" pos:end="6191:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="6191:48" pos:end="6191:62"><expr pos:start="6191:48" pos:end="6191:62"><name pos:start="6191:48" pos:end="6191:62"><name pos:start="6191:48" pos:end="6191:55">cpu_regs</name><index pos:start="6191:56" pos:end="6191:62">[<expr pos:start="6191:57" pos:end="6191:61"><name pos:start="6191:57" pos:end="6191:61">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6193:13" pos:end="6193:67"><expr pos:start="6193:13" pos:end="6193:66"><call pos:start="6193:13" pos:end="6193:66"><name pos:start="6193:13" pos:end="6193:29">gen_helper_wrpkru</name><argument_list pos:start="6193:30" pos:end="6193:66">(<argument pos:start="6193:31" pos:end="6193:37"><expr pos:start="6193:31" pos:end="6193:37"><name pos:start="6193:31" pos:end="6193:37">cpu_env</name></expr></argument>, <argument pos:start="6193:40" pos:end="6193:51"><expr pos:start="6193:40" pos:end="6193:51"><name pos:start="6193:40" pos:end="6193:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="6193:54" pos:end="6193:65"><expr pos:start="6193:54" pos:end="6193:65"><name pos:start="6193:54" pos:end="6193:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6195:13" pos:end="6195:18">break;</break>

        <expr_stmt pos:start="6197:9" pos:end="6197:25"><expr pos:start="6197:9" pos:end="6197:25"><call pos:start="6197:9" pos:end="6197:24"><name pos:start="6197:9" pos:end="6197:21">CASE_MODRM_OP</name><argument_list pos:start="6197:22" pos:end="6197:24">(<argument pos:start="6197:23" pos:end="6197:23"><expr pos:start="6197:23" pos:end="6197:23"><literal type="number" pos:start="6197:23" pos:end="6197:23">6</literal></expr></argument>)</argument_list></call><operator pos:start="6197:25" pos:end="6197:25">:</operator></expr></expr_stmt> <comment type="block" pos:start="6197:27" pos:end="6197:36">/* lmsw */</comment>

            <if_stmt pos:start="6199:13" pos:end="6205:13"><if pos:start="6199:13" pos:end="6205:13">if <condition pos:start="6199:16" pos:end="6199:28">(<expr pos:start="6199:17" pos:end="6199:27"><name pos:start="6199:17" pos:end="6199:22"><name pos:start="6199:17" pos:end="6199:17">s</name><operator pos:start="6199:18" pos:end="6199:19">-&gt;</operator><name pos:start="6199:20" pos:end="6199:22">cpl</name></name> <operator pos:start="6199:24" pos:end="6199:25">!=</operator> <literal type="number" pos:start="6199:27" pos:end="6199:27">0</literal></expr>)</condition> <block pos:start="6199:30" pos:end="6205:13">{<block_content pos:start="6201:17" pos:end="6203:22">

                <expr_stmt pos:start="6201:17" pos:end="6201:68"><expr pos:start="6201:17" pos:end="6201:67"><call pos:start="6201:17" pos:end="6201:67"><name pos:start="6201:17" pos:end="6201:29">gen_exception</name><argument_list pos:start="6201:30" pos:end="6201:67">(<argument pos:start="6201:31" pos:end="6201:31"><expr pos:start="6201:31" pos:end="6201:31"><name pos:start="6201:31" pos:end="6201:31">s</name></expr></argument>, <argument pos:start="6201:34" pos:end="6201:43"><expr pos:start="6201:34" pos:end="6201:43"><name pos:start="6201:34" pos:end="6201:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6201:46" pos:end="6201:66"><expr pos:start="6201:46" pos:end="6201:66"><name pos:start="6201:46" pos:end="6201:53">pc_start</name> <operator pos:start="6201:55" pos:end="6201:55">-</operator> <name pos:start="6201:57" pos:end="6201:66"><name pos:start="6201:57" pos:end="6201:57">s</name><operator pos:start="6201:58" pos:end="6201:59">-&gt;</operator><name pos:start="6201:60" pos:end="6201:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6203:17" pos:end="6203:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6207:13" pos:end="6207:69"><expr pos:start="6207:13" pos:end="6207:68"><call pos:start="6207:13" pos:end="6207:68"><name pos:start="6207:13" pos:end="6207:35">gen_svm_check_intercept</name><argument_list pos:start="6207:36" pos:end="6207:68">(<argument pos:start="6207:37" pos:end="6207:37"><expr pos:start="6207:37" pos:end="6207:37"><name pos:start="6207:37" pos:end="6207:37">s</name></expr></argument>, <argument pos:start="6207:40" pos:end="6207:47"><expr pos:start="6207:40" pos:end="6207:47"><name pos:start="6207:40" pos:end="6207:47">pc_start</name></expr></argument>, <argument pos:start="6207:50" pos:end="6207:67"><expr pos:start="6207:50" pos:end="6207:67"><name pos:start="6207:50" pos:end="6207:67">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6209:13" pos:end="6209:61"><expr pos:start="6209:13" pos:end="6209:60"><call pos:start="6209:13" pos:end="6209:60"><name pos:start="6209:13" pos:end="6209:26">gen_ldst_modrm</name><argument_list pos:start="6209:27" pos:end="6209:60">(<argument pos:start="6209:28" pos:end="6209:30"><expr pos:start="6209:28" pos:end="6209:30"><name pos:start="6209:28" pos:end="6209:30">env</name></expr></argument>, <argument pos:start="6209:33" pos:end="6209:33"><expr pos:start="6209:33" pos:end="6209:33"><name pos:start="6209:33" pos:end="6209:33">s</name></expr></argument>, <argument pos:start="6209:36" pos:end="6209:40"><expr pos:start="6209:36" pos:end="6209:40"><name pos:start="6209:36" pos:end="6209:40">modrm</name></expr></argument>, <argument pos:start="6209:43" pos:end="6209:47"><expr pos:start="6209:43" pos:end="6209:47"><name pos:start="6209:43" pos:end="6209:47">MO_16</name></expr></argument>, <argument pos:start="6209:50" pos:end="6209:56"><expr pos:start="6209:50" pos:end="6209:56"><name pos:start="6209:50" pos:end="6209:56">OR_TMP0</name></expr></argument>, <argument pos:start="6209:59" pos:end="6209:59"><expr pos:start="6209:59" pos:end="6209:59"><literal type="number" pos:start="6209:59" pos:end="6209:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6211:13" pos:end="6211:45"><expr pos:start="6211:13" pos:end="6211:44"><call pos:start="6211:13" pos:end="6211:44"><name pos:start="6211:13" pos:end="6211:27">gen_helper_lmsw</name><argument_list pos:start="6211:28" pos:end="6211:44">(<argument pos:start="6211:29" pos:end="6211:35"><expr pos:start="6211:29" pos:end="6211:35"><name pos:start="6211:29" pos:end="6211:35">cpu_env</name></expr></argument>, <argument pos:start="6211:38" pos:end="6211:43"><expr pos:start="6211:38" pos:end="6211:43"><name pos:start="6211:38" pos:end="6211:43">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6213:13" pos:end="6213:43"><expr pos:start="6213:13" pos:end="6213:42"><call pos:start="6213:13" pos:end="6213:42"><name pos:start="6213:13" pos:end="6213:22">gen_jmp_im</name><argument_list pos:start="6213:23" pos:end="6213:42">(<argument pos:start="6213:24" pos:end="6213:41"><expr pos:start="6213:24" pos:end="6213:41"><name pos:start="6213:24" pos:end="6213:28"><name pos:start="6213:24" pos:end="6213:24">s</name><operator pos:start="6213:25" pos:end="6213:26">-&gt;</operator><name pos:start="6213:27" pos:end="6213:28">pc</name></name> <operator pos:start="6213:30" pos:end="6213:30">-</operator> <name pos:start="6213:32" pos:end="6213:41"><name pos:start="6213:32" pos:end="6213:32">s</name><operator pos:start="6213:33" pos:end="6213:34">-&gt;</operator><name pos:start="6213:35" pos:end="6213:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6215:13" pos:end="6215:23"><expr pos:start="6215:13" pos:end="6215:22"><call pos:start="6215:13" pos:end="6215:22"><name pos:start="6215:13" pos:end="6215:19">gen_eob</name><argument_list pos:start="6215:20" pos:end="6215:22">(<argument pos:start="6215:21" pos:end="6215:21"><expr pos:start="6215:21" pos:end="6215:21"><name pos:start="6215:21" pos:end="6215:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6217:13" pos:end="6217:18">break;</break>



        <expr_stmt pos:start="6221:9" pos:end="6221:29"><expr pos:start="6221:9" pos:end="6221:29"><call pos:start="6221:9" pos:end="6221:28"><name pos:start="6221:9" pos:end="6221:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="6221:26" pos:end="6221:28">(<argument pos:start="6221:27" pos:end="6221:27"><expr pos:start="6221:27" pos:end="6221:27"><literal type="number" pos:start="6221:27" pos:end="6221:27">7</literal></expr></argument>)</argument_list></call><operator pos:start="6221:29" pos:end="6221:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="6221:31" pos:end="6221:42">/* invlpg */</comment>

            <if_stmt pos:start="6223:13" pos:end="6229:13"><if pos:start="6223:13" pos:end="6229:13">if <condition pos:start="6223:16" pos:end="6223:28">(<expr pos:start="6223:17" pos:end="6223:27"><name pos:start="6223:17" pos:end="6223:22"><name pos:start="6223:17" pos:end="6223:17">s</name><operator pos:start="6223:18" pos:end="6223:19">-&gt;</operator><name pos:start="6223:20" pos:end="6223:22">cpl</name></name> <operator pos:start="6223:24" pos:end="6223:25">!=</operator> <literal type="number" pos:start="6223:27" pos:end="6223:27">0</literal></expr>)</condition> <block pos:start="6223:30" pos:end="6229:13">{<block_content pos:start="6225:17" pos:end="6227:22">

                <expr_stmt pos:start="6225:17" pos:end="6225:68"><expr pos:start="6225:17" pos:end="6225:67"><call pos:start="6225:17" pos:end="6225:67"><name pos:start="6225:17" pos:end="6225:29">gen_exception</name><argument_list pos:start="6225:30" pos:end="6225:67">(<argument pos:start="6225:31" pos:end="6225:31"><expr pos:start="6225:31" pos:end="6225:31"><name pos:start="6225:31" pos:end="6225:31">s</name></expr></argument>, <argument pos:start="6225:34" pos:end="6225:43"><expr pos:start="6225:34" pos:end="6225:43"><name pos:start="6225:34" pos:end="6225:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6225:46" pos:end="6225:66"><expr pos:start="6225:46" pos:end="6225:66"><name pos:start="6225:46" pos:end="6225:53">pc_start</name> <operator pos:start="6225:55" pos:end="6225:55">-</operator> <name pos:start="6225:57" pos:end="6225:66"><name pos:start="6225:57" pos:end="6225:57">s</name><operator pos:start="6225:58" pos:end="6225:59">-&gt;</operator><name pos:start="6225:60" pos:end="6225:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6227:17" pos:end="6227:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6231:13" pos:end="6231:32"><expr pos:start="6231:13" pos:end="6231:31"><call pos:start="6231:13" pos:end="6231:31"><name pos:start="6231:13" pos:end="6231:28">gen_update_cc_op</name><argument_list pos:start="6231:29" pos:end="6231:31">(<argument pos:start="6231:30" pos:end="6231:30"><expr pos:start="6231:30" pos:end="6231:30"><name pos:start="6231:30" pos:end="6231:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6233:13" pos:end="6233:46"><expr pos:start="6233:13" pos:end="6233:45"><call pos:start="6233:13" pos:end="6233:45"><name pos:start="6233:13" pos:end="6233:22">gen_jmp_im</name><argument_list pos:start="6233:23" pos:end="6233:45">(<argument pos:start="6233:24" pos:end="6233:44"><expr pos:start="6233:24" pos:end="6233:44"><name pos:start="6233:24" pos:end="6233:31">pc_start</name> <operator pos:start="6233:33" pos:end="6233:33">-</operator> <name pos:start="6233:35" pos:end="6233:44"><name pos:start="6233:35" pos:end="6233:35">s</name><operator pos:start="6233:36" pos:end="6233:37">-&gt;</operator><name pos:start="6233:38" pos:end="6233:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6235:13" pos:end="6235:41"><expr pos:start="6235:13" pos:end="6235:40"><call pos:start="6235:13" pos:end="6235:40"><name pos:start="6235:13" pos:end="6235:25">gen_lea_modrm</name><argument_list pos:start="6235:26" pos:end="6235:40">(<argument pos:start="6235:27" pos:end="6235:29"><expr pos:start="6235:27" pos:end="6235:29"><name pos:start="6235:27" pos:end="6235:29">env</name></expr></argument>, <argument pos:start="6235:32" pos:end="6235:32"><expr pos:start="6235:32" pos:end="6235:32"><name pos:start="6235:32" pos:end="6235:32">s</name></expr></argument>, <argument pos:start="6235:35" pos:end="6235:39"><expr pos:start="6235:35" pos:end="6235:39"><name pos:start="6235:35" pos:end="6235:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6237:13" pos:end="6237:47"><expr pos:start="6237:13" pos:end="6237:46"><call pos:start="6237:13" pos:end="6237:46"><name pos:start="6237:13" pos:end="6237:29">gen_helper_invlpg</name><argument_list pos:start="6237:30" pos:end="6237:46">(<argument pos:start="6237:31" pos:end="6237:37"><expr pos:start="6237:31" pos:end="6237:37"><name pos:start="6237:31" pos:end="6237:37">cpu_env</name></expr></argument>, <argument pos:start="6237:40" pos:end="6237:45"><expr pos:start="6237:40" pos:end="6237:45"><name pos:start="6237:40" pos:end="6237:45">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6239:13" pos:end="6239:43"><expr pos:start="6239:13" pos:end="6239:42"><call pos:start="6239:13" pos:end="6239:42"><name pos:start="6239:13" pos:end="6239:22">gen_jmp_im</name><argument_list pos:start="6239:23" pos:end="6239:42">(<argument pos:start="6239:24" pos:end="6239:41"><expr pos:start="6239:24" pos:end="6239:41"><name pos:start="6239:24" pos:end="6239:28"><name pos:start="6239:24" pos:end="6239:24">s</name><operator pos:start="6239:25" pos:end="6239:26">-&gt;</operator><name pos:start="6239:27" pos:end="6239:28">pc</name></name> <operator pos:start="6239:30" pos:end="6239:30">-</operator> <name pos:start="6239:32" pos:end="6239:41"><name pos:start="6239:32" pos:end="6239:32">s</name><operator pos:start="6239:33" pos:end="6239:34">-&gt;</operator><name pos:start="6239:35" pos:end="6239:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6241:13" pos:end="6241:23"><expr pos:start="6241:13" pos:end="6241:22"><call pos:start="6241:13" pos:end="6241:22"><name pos:start="6241:13" pos:end="6241:19">gen_eob</name><argument_list pos:start="6241:20" pos:end="6241:22">(<argument pos:start="6241:21" pos:end="6241:21"><expr pos:start="6241:21" pos:end="6241:21"><name pos:start="6241:21" pos:end="6241:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6243:13" pos:end="6243:18">break;</break>



        <case pos:start="6247:9" pos:end="6250:0">case <expr pos:start="6247:14" pos:end="6247:17"><literal type="number" pos:start="6247:14" pos:end="6247:17">0xf8</literal></expr>:</case> <comment type="block" pos:start="6247:20" pos:end="6247:31">/* swapgs */</comment>

<cpp:ifdef pos:start="6249:1" pos:end="6249:20">#<cpp:directive pos:start="6249:2" pos:end="6249:6">ifdef</cpp:directive> <name pos:start="6249:8" pos:end="6249:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="6251:13" pos:end="6276:0"><if pos:start="6251:13" pos:end="6276:0">if <condition pos:start="6251:16" pos:end="6251:26">(<expr pos:start="6251:17" pos:end="6251:25"><call pos:start="6251:17" pos:end="6251:25"><name pos:start="6251:17" pos:end="6251:22">CODE64</name><argument_list pos:start="6251:23" pos:end="6251:25">(<argument pos:start="6251:24" pos:end="6251:24"><expr pos:start="6251:24" pos:end="6251:24"><name pos:start="6251:24" pos:end="6251:24">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6251:28" pos:end="6276:0">{<block_content pos:start="6253:17" pos:end="6271:22">

                <if_stmt pos:start="6253:17" pos:end="6269:17"><if pos:start="6253:17" pos:end="6257:17">if <condition pos:start="6253:20" pos:end="6253:32">(<expr pos:start="6253:21" pos:end="6253:31"><name pos:start="6253:21" pos:end="6253:26"><name pos:start="6253:21" pos:end="6253:21">s</name><operator pos:start="6253:22" pos:end="6253:23">-&gt;</operator><name pos:start="6253:24" pos:end="6253:26">cpl</name></name> <operator pos:start="6253:28" pos:end="6253:29">!=</operator> <literal type="number" pos:start="6253:31" pos:end="6253:31">0</literal></expr>)</condition> <block pos:start="6253:34" pos:end="6257:17">{<block_content pos:start="6255:21" pos:end="6255:72">

                    <expr_stmt pos:start="6255:21" pos:end="6255:72"><expr pos:start="6255:21" pos:end="6255:71"><call pos:start="6255:21" pos:end="6255:71"><name pos:start="6255:21" pos:end="6255:33">gen_exception</name><argument_list pos:start="6255:34" pos:end="6255:71">(<argument pos:start="6255:35" pos:end="6255:35"><expr pos:start="6255:35" pos:end="6255:35"><name pos:start="6255:35" pos:end="6255:35">s</name></expr></argument>, <argument pos:start="6255:38" pos:end="6255:47"><expr pos:start="6255:38" pos:end="6255:47"><name pos:start="6255:38" pos:end="6255:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6255:50" pos:end="6255:70"><expr pos:start="6255:50" pos:end="6255:70"><name pos:start="6255:50" pos:end="6255:57">pc_start</name> <operator pos:start="6255:59" pos:end="6255:59">-</operator> <name pos:start="6255:61" pos:end="6255:70"><name pos:start="6255:61" pos:end="6255:61">s</name><operator pos:start="6255:62" pos:end="6255:63">-&gt;</operator><name pos:start="6255:64" pos:end="6255:70">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6257:19" pos:end="6269:17">else <block pos:start="6257:24" pos:end="6269:17">{<block_content pos:start="6259:21" pos:end="6267:71">

                    <expr_stmt pos:start="6259:21" pos:end="6259:63"><expr pos:start="6259:21" pos:end="6259:62"><call pos:start="6259:21" pos:end="6259:62"><name pos:start="6259:21" pos:end="6259:34">tcg_gen_mov_tl</name><argument_list pos:start="6259:35" pos:end="6259:62">(<argument pos:start="6259:36" pos:end="6259:41"><expr pos:start="6259:36" pos:end="6259:41"><name pos:start="6259:36" pos:end="6259:41">cpu_T0</name></expr></argument>, <argument pos:start="6259:44" pos:end="6259:61"><expr pos:start="6259:44" pos:end="6259:61"><name pos:start="6259:44" pos:end="6259:61"><name pos:start="6259:44" pos:end="6259:55">cpu_seg_base</name><index pos:start="6259:56" pos:end="6259:61">[<expr pos:start="6259:57" pos:end="6259:60"><name pos:start="6259:57" pos:end="6259:60">R_GS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6261:21" pos:end="6263:71"><expr pos:start="6261:21" pos:end="6263:70"><call pos:start="6261:21" pos:end="6263:70"><name pos:start="6261:21" pos:end="6261:33">tcg_gen_ld_tl</name><argument_list pos:start="6261:34" pos:end="6263:70">(<argument pos:start="6261:35" pos:end="6261:52"><expr pos:start="6261:35" pos:end="6261:52"><name pos:start="6261:35" pos:end="6261:52"><name pos:start="6261:35" pos:end="6261:46">cpu_seg_base</name><index pos:start="6261:47" pos:end="6261:52">[<expr pos:start="6261:48" pos:end="6261:51"><name pos:start="6261:48" pos:end="6261:51">R_GS</name></expr>]</index></name></expr></argument>, <argument pos:start="6261:55" pos:end="6261:61"><expr pos:start="6261:55" pos:end="6261:61"><name pos:start="6261:55" pos:end="6261:61">cpu_env</name></expr></argument>,

                                  <argument pos:start="6263:35" pos:end="6263:69"><expr pos:start="6263:35" pos:end="6263:69"><call pos:start="6263:35" pos:end="6263:69"><name pos:start="6263:35" pos:end="6263:42">offsetof</name><argument_list pos:start="6263:43" pos:end="6263:69">(<argument pos:start="6263:44" pos:end="6263:54"><expr pos:start="6263:44" pos:end="6263:54"><name pos:start="6263:44" pos:end="6263:54">CPUX86State</name></expr></argument>, <argument pos:start="6263:57" pos:end="6263:68"><expr pos:start="6263:57" pos:end="6263:68"><name pos:start="6263:57" pos:end="6263:68">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6265:21" pos:end="6267:71"><expr pos:start="6265:21" pos:end="6267:70"><call pos:start="6265:21" pos:end="6267:70"><name pos:start="6265:21" pos:end="6265:33">tcg_gen_st_tl</name><argument_list pos:start="6265:34" pos:end="6267:70">(<argument pos:start="6265:35" pos:end="6265:40"><expr pos:start="6265:35" pos:end="6265:40"><name pos:start="6265:35" pos:end="6265:40">cpu_T0</name></expr></argument>, <argument pos:start="6265:43" pos:end="6265:49"><expr pos:start="6265:43" pos:end="6265:49"><name pos:start="6265:43" pos:end="6265:49">cpu_env</name></expr></argument>,

                                  <argument pos:start="6267:35" pos:end="6267:69"><expr pos:start="6267:35" pos:end="6267:69"><call pos:start="6267:35" pos:end="6267:69"><name pos:start="6267:35" pos:end="6267:42">offsetof</name><argument_list pos:start="6267:43" pos:end="6267:69">(<argument pos:start="6267:44" pos:end="6267:54"><expr pos:start="6267:44" pos:end="6267:54"><name pos:start="6267:44" pos:end="6267:54">CPUX86State</name></expr></argument>, <argument pos:start="6267:57" pos:end="6267:68"><expr pos:start="6267:57" pos:end="6267:68"><name pos:start="6267:57" pos:end="6267:68">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="6271:17" pos:end="6271:22">break;</break>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="6275:1" pos:end="6275:6">#<cpp:directive pos:start="6275:2" pos:end="6275:6">endif</cpp:directive></cpp:endif>

            <goto pos:start="6277:13" pos:end="6277:28">goto <name pos:start="6277:18" pos:end="6277:27">illegal_op</name>;</goto>



        <case pos:start="6281:9" pos:end="6281:18">case <expr pos:start="6281:14" pos:end="6281:17"><literal type="number" pos:start="6281:14" pos:end="6281:17">0xf9</literal></expr>:</case> <comment type="block" pos:start="6281:20" pos:end="6281:31">/* rdtscp */</comment>

            <if_stmt pos:start="6283:13" pos:end="6287:13"><if pos:start="6283:13" pos:end="6287:13">if <condition pos:start="6283:16" pos:end="6283:62">(<expr pos:start="6283:17" pos:end="6283:61"><operator pos:start="6283:17" pos:end="6283:17">!</operator><operator pos:start="6283:18" pos:end="6283:18">(</operator><name pos:start="6283:19" pos:end="6283:40"><name pos:start="6283:19" pos:end="6283:19">s</name><operator pos:start="6283:20" pos:end="6283:21">-&gt;</operator><name pos:start="6283:22" pos:end="6283:40">cpuid_ext2_features</name></name> <operator pos:start="6283:42" pos:end="6283:42">&amp;</operator> <name pos:start="6283:44" pos:end="6283:60">CPUID_EXT2_RDTSCP</name><operator pos:start="6283:61" pos:end="6283:61">)</operator></expr>)</condition> <block pos:start="6283:64" pos:end="6287:13">{<block_content pos:start="6285:17" pos:end="6285:32">

                <goto pos:start="6285:17" pos:end="6285:32">goto <name pos:start="6285:22" pos:end="6285:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6289:13" pos:end="6289:32"><expr pos:start="6289:13" pos:end="6289:31"><call pos:start="6289:13" pos:end="6289:31"><name pos:start="6289:13" pos:end="6289:28">gen_update_cc_op</name><argument_list pos:start="6289:29" pos:end="6289:31">(<argument pos:start="6289:30" pos:end="6289:30"><expr pos:start="6289:30" pos:end="6289:30"><name pos:start="6289:30" pos:end="6289:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6291:13" pos:end="6291:46"><expr pos:start="6291:13" pos:end="6291:45"><call pos:start="6291:13" pos:end="6291:45"><name pos:start="6291:13" pos:end="6291:22">gen_jmp_im</name><argument_list pos:start="6291:23" pos:end="6291:45">(<argument pos:start="6291:24" pos:end="6291:44"><expr pos:start="6291:24" pos:end="6291:44"><name pos:start="6291:24" pos:end="6291:31">pc_start</name> <operator pos:start="6291:33" pos:end="6291:33">-</operator> <name pos:start="6291:35" pos:end="6291:44"><name pos:start="6291:35" pos:end="6291:35">s</name><operator pos:start="6291:36" pos:end="6291:37">-&gt;</operator><name pos:start="6291:38" pos:end="6291:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6293:13" pos:end="6297:13"><if pos:start="6293:13" pos:end="6297:13">if <condition pos:start="6293:16" pos:end="6293:54">(<expr pos:start="6293:17" pos:end="6293:53"><call pos:start="6293:17" pos:end="6293:37"><name pos:start="6293:17" pos:end="6293:25">tb_cflags</name><argument_list pos:start="6293:26" pos:end="6293:37">(<argument pos:start="6293:27" pos:end="6293:36"><expr pos:start="6293:27" pos:end="6293:36"><name pos:start="6293:27" pos:end="6293:36"><name pos:start="6293:27" pos:end="6293:27">s</name><operator pos:start="6293:28" pos:end="6293:29">-&gt;</operator><name pos:start="6293:30" pos:end="6293:33">base</name><operator pos:start="6293:34" pos:end="6293:34">.</operator><name pos:start="6293:35" pos:end="6293:36">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="6293:39" pos:end="6293:39">&amp;</operator> <name pos:start="6293:41" pos:end="6293:53">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="6293:56" pos:end="6297:13">{<block_content pos:start="6295:17" pos:end="6295:31">

                <expr_stmt pos:start="6295:17" pos:end="6295:31"><expr pos:start="6295:17" pos:end="6295:30"><call pos:start="6295:17" pos:end="6295:30"><name pos:start="6295:17" pos:end="6295:28">gen_io_start</name><argument_list pos:start="6295:29" pos:end="6295:30">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6299:13" pos:end="6299:39"><expr pos:start="6299:13" pos:end="6299:38"><call pos:start="6299:13" pos:end="6299:38"><name pos:start="6299:13" pos:end="6299:29">gen_helper_rdtscp</name><argument_list pos:start="6299:30" pos:end="6299:38">(<argument pos:start="6299:31" pos:end="6299:37"><expr pos:start="6299:31" pos:end="6299:37"><name pos:start="6299:31" pos:end="6299:37">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6301:13" pos:end="6307:13"><if pos:start="6301:13" pos:end="6307:13">if <condition pos:start="6301:16" pos:end="6301:54">(<expr pos:start="6301:17" pos:end="6301:53"><call pos:start="6301:17" pos:end="6301:37"><name pos:start="6301:17" pos:end="6301:25">tb_cflags</name><argument_list pos:start="6301:26" pos:end="6301:37">(<argument pos:start="6301:27" pos:end="6301:36"><expr pos:start="6301:27" pos:end="6301:36"><name pos:start="6301:27" pos:end="6301:36"><name pos:start="6301:27" pos:end="6301:27">s</name><operator pos:start="6301:28" pos:end="6301:29">-&gt;</operator><name pos:start="6301:30" pos:end="6301:33">base</name><operator pos:start="6301:34" pos:end="6301:34">.</operator><name pos:start="6301:35" pos:end="6301:36">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="6301:39" pos:end="6301:39">&amp;</operator> <name pos:start="6301:41" pos:end="6301:53">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="6301:56" pos:end="6307:13">{<block_content pos:start="6303:17" pos:end="6305:47">

                <expr_stmt pos:start="6303:17" pos:end="6303:29"><expr pos:start="6303:17" pos:end="6303:28"><call pos:start="6303:17" pos:end="6303:28"><name pos:start="6303:17" pos:end="6303:26">gen_io_end</name><argument_list pos:start="6303:27" pos:end="6303:28">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6305:17" pos:end="6305:47"><expr pos:start="6305:17" pos:end="6305:46"><call pos:start="6305:17" pos:end="6305:46"><name pos:start="6305:17" pos:end="6305:23">gen_jmp</name><argument_list pos:start="6305:24" pos:end="6305:46">(<argument pos:start="6305:25" pos:end="6305:25"><expr pos:start="6305:25" pos:end="6305:25"><name pos:start="6305:25" pos:end="6305:25">s</name></expr></argument>, <argument pos:start="6305:28" pos:end="6305:45"><expr pos:start="6305:28" pos:end="6305:45"><name pos:start="6305:28" pos:end="6305:32"><name pos:start="6305:28" pos:end="6305:28">s</name><operator pos:start="6305:29" pos:end="6305:30">-&gt;</operator><name pos:start="6305:31" pos:end="6305:32">pc</name></name> <operator pos:start="6305:34" pos:end="6305:34">-</operator> <name pos:start="6305:36" pos:end="6305:45"><name pos:start="6305:36" pos:end="6305:36">s</name><operator pos:start="6305:37" pos:end="6305:38">-&gt;</operator><name pos:start="6305:39" pos:end="6305:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="6309:13" pos:end="6309:18">break;</break>



        <default pos:start="6313:9" pos:end="6313:16">default:</default>

            <goto pos:start="6315:13" pos:end="6315:28">goto <name pos:start="6315:18" pos:end="6315:27">unknown_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="6319:9" pos:end="6319:14">break;</break>



    <case pos:start="6323:5" pos:end="6323:15">case <expr pos:start="6323:10" pos:end="6323:14"><literal type="number" pos:start="6323:10" pos:end="6323:14">0x108</literal></expr>:</case> <comment type="block" pos:start="6323:17" pos:end="6323:26">/* invd */</comment>

    <case pos:start="6325:5" pos:end="6325:15">case <expr pos:start="6325:10" pos:end="6325:14"><literal type="number" pos:start="6325:10" pos:end="6325:14">0x109</literal></expr>:</case> <comment type="block" pos:start="6325:17" pos:end="6325:28">/* wbinvd */</comment>

        <if_stmt pos:start="6327:9" pos:end="6337:9"><if pos:start="6327:9" pos:end="6331:9">if <condition pos:start="6327:12" pos:end="6327:24">(<expr pos:start="6327:13" pos:end="6327:23"><name pos:start="6327:13" pos:end="6327:18"><name pos:start="6327:13" pos:end="6327:13">s</name><operator pos:start="6327:14" pos:end="6327:15">-&gt;</operator><name pos:start="6327:16" pos:end="6327:18">cpl</name></name> <operator pos:start="6327:20" pos:end="6327:21">!=</operator> <literal type="number" pos:start="6327:23" pos:end="6327:23">0</literal></expr>)</condition> <block pos:start="6327:26" pos:end="6331:9">{<block_content pos:start="6329:13" pos:end="6329:64">

            <expr_stmt pos:start="6329:13" pos:end="6329:64"><expr pos:start="6329:13" pos:end="6329:63"><call pos:start="6329:13" pos:end="6329:63"><name pos:start="6329:13" pos:end="6329:25">gen_exception</name><argument_list pos:start="6329:26" pos:end="6329:63">(<argument pos:start="6329:27" pos:end="6329:27"><expr pos:start="6329:27" pos:end="6329:27"><name pos:start="6329:27" pos:end="6329:27">s</name></expr></argument>, <argument pos:start="6329:30" pos:end="6329:39"><expr pos:start="6329:30" pos:end="6329:39"><name pos:start="6329:30" pos:end="6329:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6329:42" pos:end="6329:62"><expr pos:start="6329:42" pos:end="6329:62"><name pos:start="6329:42" pos:end="6329:49">pc_start</name> <operator pos:start="6329:51" pos:end="6329:51">-</operator> <name pos:start="6329:53" pos:end="6329:62"><name pos:start="6329:53" pos:end="6329:53">s</name><operator pos:start="6329:54" pos:end="6329:55">-&gt;</operator><name pos:start="6329:56" pos:end="6329:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6331:11" pos:end="6337:9">else <block pos:start="6331:16" pos:end="6337:9">{<block_content pos:start="6333:13" pos:end="6333:92">

            <expr_stmt pos:start="6333:13" pos:end="6333:92"><expr pos:start="6333:13" pos:end="6333:91"><call pos:start="6333:13" pos:end="6333:91"><name pos:start="6333:13" pos:end="6333:35">gen_svm_check_intercept</name><argument_list pos:start="6333:36" pos:end="6333:91">(<argument pos:start="6333:37" pos:end="6333:37"><expr pos:start="6333:37" pos:end="6333:37"><name pos:start="6333:37" pos:end="6333:37">s</name></expr></argument>, <argument pos:start="6333:40" pos:end="6333:47"><expr pos:start="6333:40" pos:end="6333:47"><name pos:start="6333:40" pos:end="6333:47">pc_start</name></expr></argument>, <argument pos:start="6333:50" pos:end="6333:90"><expr pos:start="6333:50" pos:end="6333:90"><ternary pos:start="6333:50" pos:end="6333:90"><condition pos:start="6333:50" pos:end="6333:58"><expr pos:start="6333:50" pos:end="6333:56"><operator pos:start="6333:50" pos:end="6333:50">(</operator><name pos:start="6333:51" pos:end="6333:51">b</name> <operator pos:start="6333:53" pos:end="6333:53">&amp;</operator> <literal type="number" pos:start="6333:55" pos:end="6333:55">2</literal><operator pos:start="6333:56" pos:end="6333:56">)</operator></expr> ?</condition><then pos:start="6333:60" pos:end="6333:72"> <expr pos:start="6333:60" pos:end="6333:72"><name pos:start="6333:60" pos:end="6333:72">SVM_EXIT_INVD</name></expr> </then><else pos:start="6333:74" pos:end="6333:90">: <expr pos:start="6333:76" pos:end="6333:90"><name pos:start="6333:76" pos:end="6333:90">SVM_EXIT_WBINVD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6335:13" pos:end="6335:31">/* nothing to do */</comment>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6339:9" pos:end="6339:14">break;</break>

    <case pos:start="6341:5" pos:end="6344:0">case <expr pos:start="6341:10" pos:end="6341:13"><literal type="number" pos:start="6341:10" pos:end="6341:13">0x63</literal></expr>:</case> <comment type="block" pos:start="6341:16" pos:end="6341:44">/* arpl or movslS (x86_64) */</comment>

<cpp:ifdef pos:start="6343:1" pos:end="6343:20">#<cpp:directive pos:start="6343:2" pos:end="6343:6">ifdef</cpp:directive> <name pos:start="6343:8" pos:end="6343:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="6345:9" pos:end="6483:9"><if pos:start="6345:9" pos:end="6389:9">if <condition pos:start="6345:12" pos:end="6345:22">(<expr pos:start="6345:13" pos:end="6345:21"><call pos:start="6345:13" pos:end="6345:21"><name pos:start="6345:13" pos:end="6345:18">CODE64</name><argument_list pos:start="6345:19" pos:end="6345:21">(<argument pos:start="6345:20" pos:end="6345:20"><expr pos:start="6345:20" pos:end="6345:20"><name pos:start="6345:20" pos:end="6345:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6345:24" pos:end="6389:9">{<block_content pos:start="6347:13" pos:end="6387:13">

            <decl_stmt pos:start="6347:13" pos:end="6347:21"><decl pos:start="6347:13" pos:end="6347:20"><type pos:start="6347:13" pos:end="6347:15"><name pos:start="6347:13" pos:end="6347:15">int</name></type> <name pos:start="6347:17" pos:end="6347:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="6349:13" pos:end="6349:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="6351:13" pos:end="6351:25"><expr pos:start="6351:13" pos:end="6351:24"><name pos:start="6351:13" pos:end="6351:16">d_ot</name> <operator pos:start="6351:18" pos:end="6351:18">=</operator> <name pos:start="6351:20" pos:end="6351:24">dflag</name></expr>;</expr_stmt>



            <expr_stmt pos:start="6355:13" pos:end="6355:42"><expr pos:start="6355:13" pos:end="6355:41"><name pos:start="6355:13" pos:end="6355:17">modrm</name> <operator pos:start="6355:19" pos:end="6355:19">=</operator> <call pos:start="6355:21" pos:end="6355:41"><name pos:start="6355:21" pos:end="6355:33">x86_ldub_code</name><argument_list pos:start="6355:34" pos:end="6355:41">(<argument pos:start="6355:35" pos:end="6355:37"><expr pos:start="6355:35" pos:end="6355:37"><name pos:start="6355:35" pos:end="6355:37">env</name></expr></argument>, <argument pos:start="6355:40" pos:end="6355:40"><expr pos:start="6355:40" pos:end="6355:40"><name pos:start="6355:40" pos:end="6355:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6357:13" pos:end="6357:45"><expr pos:start="6357:13" pos:end="6357:44"><name pos:start="6357:13" pos:end="6357:15">reg</name> <operator pos:start="6357:17" pos:end="6357:17">=</operator> <operator pos:start="6357:19" pos:end="6357:19">(</operator><operator pos:start="6357:20" pos:end="6357:20">(</operator><name pos:start="6357:21" pos:end="6357:25">modrm</name> <operator pos:start="6357:27" pos:end="6357:28">&gt;&gt;</operator> <literal type="number" pos:start="6357:30" pos:end="6357:30">3</literal><operator pos:start="6357:31" pos:end="6357:31">)</operator> <operator pos:start="6357:33" pos:end="6357:33">&amp;</operator> <literal type="number" pos:start="6357:35" pos:end="6357:35">7</literal><operator pos:start="6357:36" pos:end="6357:36">)</operator> <operator pos:start="6357:38" pos:end="6357:38">|</operator> <name pos:start="6357:40" pos:end="6357:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6359:13" pos:end="6359:35"><expr pos:start="6359:13" pos:end="6359:34"><name pos:start="6359:13" pos:end="6359:15">mod</name> <operator pos:start="6359:17" pos:end="6359:17">=</operator> <operator pos:start="6359:19" pos:end="6359:19">(</operator><name pos:start="6359:20" pos:end="6359:24">modrm</name> <operator pos:start="6359:26" pos:end="6359:27">&gt;&gt;</operator> <literal type="number" pos:start="6359:29" pos:end="6359:29">6</literal><operator pos:start="6359:30" pos:end="6359:30">)</operator> <operator pos:start="6359:32" pos:end="6359:32">&amp;</operator> <literal type="number" pos:start="6359:34" pos:end="6359:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6361:13" pos:end="6361:40"><expr pos:start="6361:13" pos:end="6361:39"><name pos:start="6361:13" pos:end="6361:14">rm</name> <operator pos:start="6361:16" pos:end="6361:16">=</operator> <operator pos:start="6361:18" pos:end="6361:18">(</operator><name pos:start="6361:19" pos:end="6361:23">modrm</name> <operator pos:start="6361:25" pos:end="6361:25">&amp;</operator> <literal type="number" pos:start="6361:27" pos:end="6361:27">7</literal><operator pos:start="6361:28" pos:end="6361:28">)</operator> <operator pos:start="6361:30" pos:end="6361:30">|</operator> <call pos:start="6361:32" pos:end="6361:39"><name pos:start="6361:32" pos:end="6361:36">REX_B</name><argument_list pos:start="6361:37" pos:end="6361:39">(<argument pos:start="6361:38" pos:end="6361:38"><expr pos:start="6361:38" pos:end="6361:38"><name pos:start="6361:38" pos:end="6361:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="6365:13" pos:end="6387:13"><if pos:start="6365:13" pos:end="6379:13">if <condition pos:start="6365:16" pos:end="6365:25">(<expr pos:start="6365:17" pos:end="6365:24"><name pos:start="6365:17" pos:end="6365:19">mod</name> <operator pos:start="6365:21" pos:end="6365:22">==</operator> <literal type="number" pos:start="6365:24" pos:end="6365:24">3</literal></expr>)</condition> <block pos:start="6365:27" pos:end="6379:13">{<block_content pos:start="6367:17" pos:end="6377:52">

                <expr_stmt pos:start="6367:17" pos:end="6367:52"><expr pos:start="6367:17" pos:end="6367:51"><call pos:start="6367:17" pos:end="6367:51"><name pos:start="6367:17" pos:end="6367:32">gen_op_mov_v_reg</name><argument_list pos:start="6367:33" pos:end="6367:51">(<argument pos:start="6367:34" pos:end="6367:38"><expr pos:start="6367:34" pos:end="6367:38"><name pos:start="6367:34" pos:end="6367:38">MO_32</name></expr></argument>, <argument pos:start="6367:41" pos:end="6367:46"><expr pos:start="6367:41" pos:end="6367:46"><name pos:start="6367:41" pos:end="6367:46">cpu_T0</name></expr></argument>, <argument pos:start="6367:49" pos:end="6367:50"><expr pos:start="6367:49" pos:end="6367:50"><name pos:start="6367:49" pos:end="6367:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="6369:17" pos:end="6369:33">/* sign extend */</comment>

                <if_stmt pos:start="6371:17" pos:end="6375:17"><if pos:start="6371:17" pos:end="6375:17">if <condition pos:start="6371:20" pos:end="6371:34">(<expr pos:start="6371:21" pos:end="6371:33"><name pos:start="6371:21" pos:end="6371:24">d_ot</name> <operator pos:start="6371:26" pos:end="6371:27">==</operator> <name pos:start="6371:29" pos:end="6371:33">MO_64</name></expr>)</condition> <block pos:start="6371:36" pos:end="6375:17">{<block_content pos:start="6373:21" pos:end="6373:54">

                    <expr_stmt pos:start="6373:21" pos:end="6373:54"><expr pos:start="6373:21" pos:end="6373:53"><call pos:start="6373:21" pos:end="6373:53"><name pos:start="6373:21" pos:end="6373:37">tcg_gen_ext32s_tl</name><argument_list pos:start="6373:38" pos:end="6373:53">(<argument pos:start="6373:39" pos:end="6373:44"><expr pos:start="6373:39" pos:end="6373:44"><name pos:start="6373:39" pos:end="6373:44">cpu_T0</name></expr></argument>, <argument pos:start="6373:47" pos:end="6373:52"><expr pos:start="6373:47" pos:end="6373:52"><name pos:start="6373:47" pos:end="6373:52">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="6377:17" pos:end="6377:52"><expr pos:start="6377:17" pos:end="6377:51"><call pos:start="6377:17" pos:end="6377:51"><name pos:start="6377:17" pos:end="6377:32">gen_op_mov_reg_v</name><argument_list pos:start="6377:33" pos:end="6377:51">(<argument pos:start="6377:34" pos:end="6377:37"><expr pos:start="6377:34" pos:end="6377:37"><name pos:start="6377:34" pos:end="6377:37">d_ot</name></expr></argument>, <argument pos:start="6377:40" pos:end="6377:42"><expr pos:start="6377:40" pos:end="6377:42"><name pos:start="6377:40" pos:end="6377:42">reg</name></expr></argument>, <argument pos:start="6377:45" pos:end="6377:50"><expr pos:start="6377:45" pos:end="6377:50"><name pos:start="6377:45" pos:end="6377:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6379:15" pos:end="6387:13">else <block pos:start="6379:20" pos:end="6387:13">{<block_content pos:start="6381:17" pos:end="6385:52">

                <expr_stmt pos:start="6381:17" pos:end="6381:45"><expr pos:start="6381:17" pos:end="6381:44"><call pos:start="6381:17" pos:end="6381:44"><name pos:start="6381:17" pos:end="6381:29">gen_lea_modrm</name><argument_list pos:start="6381:30" pos:end="6381:44">(<argument pos:start="6381:31" pos:end="6381:33"><expr pos:start="6381:31" pos:end="6381:33"><name pos:start="6381:31" pos:end="6381:33">env</name></expr></argument>, <argument pos:start="6381:36" pos:end="6381:36"><expr pos:start="6381:36" pos:end="6381:36"><name pos:start="6381:36" pos:end="6381:36">s</name></expr></argument>, <argument pos:start="6381:39" pos:end="6381:43"><expr pos:start="6381:39" pos:end="6381:43"><name pos:start="6381:39" pos:end="6381:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6383:17" pos:end="6383:64"><expr pos:start="6383:17" pos:end="6383:63"><call pos:start="6383:17" pos:end="6383:63"><name pos:start="6383:17" pos:end="6383:27">gen_op_ld_v</name><argument_list pos:start="6383:28" pos:end="6383:63">(<argument pos:start="6383:29" pos:end="6383:29"><expr pos:start="6383:29" pos:end="6383:29"><name pos:start="6383:29" pos:end="6383:29">s</name></expr></argument>, <argument pos:start="6383:32" pos:end="6383:46"><expr pos:start="6383:32" pos:end="6383:46"><name pos:start="6383:32" pos:end="6383:36">MO_32</name> <operator pos:start="6383:38" pos:end="6383:38">|</operator> <name pos:start="6383:40" pos:end="6383:46">MO_SIGN</name></expr></argument>, <argument pos:start="6383:49" pos:end="6383:54"><expr pos:start="6383:49" pos:end="6383:54"><name pos:start="6383:49" pos:end="6383:54">cpu_T0</name></expr></argument>, <argument pos:start="6383:57" pos:end="6383:62"><expr pos:start="6383:57" pos:end="6383:62"><name pos:start="6383:57" pos:end="6383:62">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6385:17" pos:end="6385:52"><expr pos:start="6385:17" pos:end="6385:51"><call pos:start="6385:17" pos:end="6385:51"><name pos:start="6385:17" pos:end="6385:32">gen_op_mov_reg_v</name><argument_list pos:start="6385:33" pos:end="6385:51">(<argument pos:start="6385:34" pos:end="6385:37"><expr pos:start="6385:34" pos:end="6385:37"><name pos:start="6385:34" pos:end="6385:37">d_ot</name></expr></argument>, <argument pos:start="6385:40" pos:end="6385:42"><expr pos:start="6385:40" pos:end="6385:42"><name pos:start="6385:40" pos:end="6385:42">reg</name></expr></argument>, <argument pos:start="6385:45" pos:end="6385:50"><expr pos:start="6385:45" pos:end="6385:50"><name pos:start="6385:45" pos:end="6385:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="6389:11" pos:end="6483:9">else

<cpp:endif pos:start="6391:1" pos:end="6391:6">#<cpp:directive pos:start="6391:2" pos:end="6391:6">endif</cpp:directive></cpp:endif>

        <block pos:start="6393:9" pos:end="6483:9">{<block_content pos:start="6395:13" pos:end="6481:30">

            <decl_stmt pos:start="6395:13" pos:end="6395:29"><decl pos:start="6395:13" pos:end="6395:28"><type pos:start="6395:13" pos:end="6395:22"><name pos:start="6395:13" pos:end="6395:20">TCGLabel</name> <modifier pos:start="6395:22" pos:end="6395:22">*</modifier></type><name pos:start="6395:23" pos:end="6395:28">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6397:13" pos:end="6397:32"><decl pos:start="6397:13" pos:end="6397:19"><type pos:start="6397:13" pos:end="6397:16"><name pos:start="6397:13" pos:end="6397:16">TCGv</name></type> <name pos:start="6397:18" pos:end="6397:19">t0</name></decl>, <decl pos:start="6397:22" pos:end="6397:23"><type ref="prev" pos:start="6397:13" pos:end="6397:16"/><name pos:start="6397:22" pos:end="6397:23">t1</name></decl>, <decl pos:start="6397:26" pos:end="6397:27"><type ref="prev" pos:start="6397:13" pos:end="6397:16"/><name pos:start="6397:26" pos:end="6397:27">t2</name></decl>, <decl pos:start="6397:30" pos:end="6397:31"><type ref="prev" pos:start="6397:13" pos:end="6397:16"/><name pos:start="6397:30" pos:end="6397:31">a0</name></decl>;</decl_stmt>



            <if_stmt pos:start="6401:13" pos:end="6403:32"><if pos:start="6401:13" pos:end="6403:32">if <condition pos:start="6401:16" pos:end="6401:34">(<expr pos:start="6401:17" pos:end="6401:33"><operator pos:start="6401:17" pos:end="6401:17">!</operator><name pos:start="6401:18" pos:end="6401:22"><name pos:start="6401:18" pos:end="6401:18">s</name><operator pos:start="6401:19" pos:end="6401:20">-&gt;</operator><name pos:start="6401:21" pos:end="6401:22">pe</name></name> <operator pos:start="6401:24" pos:end="6401:25">||</operator> <name pos:start="6401:27" pos:end="6401:33"><name pos:start="6401:27" pos:end="6401:27">s</name><operator pos:start="6401:28" pos:end="6401:29">-&gt;</operator><name pos:start="6401:30" pos:end="6401:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="6403:17" pos:end="6403:32"><block_content pos:start="6403:17" pos:end="6403:32">

                <goto pos:start="6403:17" pos:end="6403:32">goto <name pos:start="6403:22" pos:end="6403:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6405:13" pos:end="6405:38"><expr pos:start="6405:13" pos:end="6405:37"><name pos:start="6405:13" pos:end="6405:14">t0</name> <operator pos:start="6405:16" pos:end="6405:16">=</operator> <call pos:start="6405:18" pos:end="6405:37"><name pos:start="6405:18" pos:end="6405:35">tcg_temp_local_new</name><argument_list pos:start="6405:36" pos:end="6405:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6407:13" pos:end="6407:38"><expr pos:start="6407:13" pos:end="6407:37"><name pos:start="6407:13" pos:end="6407:14">t1</name> <operator pos:start="6407:16" pos:end="6407:16">=</operator> <call pos:start="6407:18" pos:end="6407:37"><name pos:start="6407:18" pos:end="6407:35">tcg_temp_local_new</name><argument_list pos:start="6407:36" pos:end="6407:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6409:13" pos:end="6409:38"><expr pos:start="6409:13" pos:end="6409:37"><name pos:start="6409:13" pos:end="6409:14">t2</name> <operator pos:start="6409:16" pos:end="6409:16">=</operator> <call pos:start="6409:18" pos:end="6409:37"><name pos:start="6409:18" pos:end="6409:35">tcg_temp_local_new</name><argument_list pos:start="6409:36" pos:end="6409:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6411:13" pos:end="6411:23"><expr pos:start="6411:13" pos:end="6411:22"><name pos:start="6411:13" pos:end="6411:14">ot</name> <operator pos:start="6411:16" pos:end="6411:16">=</operator> <name pos:start="6411:18" pos:end="6411:22">MO_16</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6413:13" pos:end="6413:42"><expr pos:start="6413:13" pos:end="6413:41"><name pos:start="6413:13" pos:end="6413:17">modrm</name> <operator pos:start="6413:19" pos:end="6413:19">=</operator> <call pos:start="6413:21" pos:end="6413:41"><name pos:start="6413:21" pos:end="6413:33">x86_ldub_code</name><argument_list pos:start="6413:34" pos:end="6413:41">(<argument pos:start="6413:35" pos:end="6413:37"><expr pos:start="6413:35" pos:end="6413:37"><name pos:start="6413:35" pos:end="6413:37">env</name></expr></argument>, <argument pos:start="6413:40" pos:end="6413:40"><expr pos:start="6413:40" pos:end="6413:40"><name pos:start="6413:40" pos:end="6413:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6415:13" pos:end="6415:35"><expr pos:start="6415:13" pos:end="6415:34"><name pos:start="6415:13" pos:end="6415:15">reg</name> <operator pos:start="6415:17" pos:end="6415:17">=</operator> <operator pos:start="6415:19" pos:end="6415:19">(</operator><name pos:start="6415:20" pos:end="6415:24">modrm</name> <operator pos:start="6415:26" pos:end="6415:27">&gt;&gt;</operator> <literal type="number" pos:start="6415:29" pos:end="6415:29">3</literal><operator pos:start="6415:30" pos:end="6415:30">)</operator> <operator pos:start="6415:32" pos:end="6415:32">&amp;</operator> <literal type="number" pos:start="6415:34" pos:end="6415:34">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6417:13" pos:end="6417:35"><expr pos:start="6417:13" pos:end="6417:34"><name pos:start="6417:13" pos:end="6417:15">mod</name> <operator pos:start="6417:17" pos:end="6417:17">=</operator> <operator pos:start="6417:19" pos:end="6417:19">(</operator><name pos:start="6417:20" pos:end="6417:24">modrm</name> <operator pos:start="6417:26" pos:end="6417:27">&gt;&gt;</operator> <literal type="number" pos:start="6417:29" pos:end="6417:29">6</literal><operator pos:start="6417:30" pos:end="6417:30">)</operator> <operator pos:start="6417:32" pos:end="6417:32">&amp;</operator> <literal type="number" pos:start="6417:34" pos:end="6417:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6419:13" pos:end="6419:27"><expr pos:start="6419:13" pos:end="6419:26"><name pos:start="6419:13" pos:end="6419:14">rm</name> <operator pos:start="6419:16" pos:end="6419:16">=</operator> <name pos:start="6419:18" pos:end="6419:22">modrm</name> <operator pos:start="6419:24" pos:end="6419:24">&amp;</operator> <literal type="number" pos:start="6419:26" pos:end="6419:26">7</literal></expr>;</expr_stmt>

            <if_stmt pos:start="6421:13" pos:end="6437:13"><if pos:start="6421:13" pos:end="6431:13">if <condition pos:start="6421:16" pos:end="6421:25">(<expr pos:start="6421:17" pos:end="6421:24"><name pos:start="6421:17" pos:end="6421:19">mod</name> <operator pos:start="6421:21" pos:end="6421:22">!=</operator> <literal type="number" pos:start="6421:24" pos:end="6421:24">3</literal></expr>)</condition> <block pos:start="6421:27" pos:end="6431:13">{<block_content pos:start="6423:17" pos:end="6429:43">

                <expr_stmt pos:start="6423:17" pos:end="6423:45"><expr pos:start="6423:17" pos:end="6423:44"><call pos:start="6423:17" pos:end="6423:44"><name pos:start="6423:17" pos:end="6423:29">gen_lea_modrm</name><argument_list pos:start="6423:30" pos:end="6423:44">(<argument pos:start="6423:31" pos:end="6423:33"><expr pos:start="6423:31" pos:end="6423:33"><name pos:start="6423:31" pos:end="6423:33">env</name></expr></argument>, <argument pos:start="6423:36" pos:end="6423:36"><expr pos:start="6423:36" pos:end="6423:36"><name pos:start="6423:36" pos:end="6423:36">s</name></expr></argument>, <argument pos:start="6423:39" pos:end="6423:43"><expr pos:start="6423:39" pos:end="6423:43"><name pos:start="6423:39" pos:end="6423:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6425:17" pos:end="6425:47"><expr pos:start="6425:17" pos:end="6425:46"><call pos:start="6425:17" pos:end="6425:46"><name pos:start="6425:17" pos:end="6425:27">gen_op_ld_v</name><argument_list pos:start="6425:28" pos:end="6425:46">(<argument pos:start="6425:29" pos:end="6425:29"><expr pos:start="6425:29" pos:end="6425:29"><name pos:start="6425:29" pos:end="6425:29">s</name></expr></argument>, <argument pos:start="6425:32" pos:end="6425:33"><expr pos:start="6425:32" pos:end="6425:33"><name pos:start="6425:32" pos:end="6425:33">ot</name></expr></argument>, <argument pos:start="6425:36" pos:end="6425:37"><expr pos:start="6425:36" pos:end="6425:37"><name pos:start="6425:36" pos:end="6425:37">t0</name></expr></argument>, <argument pos:start="6425:40" pos:end="6425:45"><expr pos:start="6425:40" pos:end="6425:45"><name pos:start="6425:40" pos:end="6425:45">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6427:17" pos:end="6427:42"><expr pos:start="6427:17" pos:end="6427:41"><name pos:start="6427:17" pos:end="6427:18">a0</name> <operator pos:start="6427:20" pos:end="6427:20">=</operator> <call pos:start="6427:22" pos:end="6427:41"><name pos:start="6427:22" pos:end="6427:39">tcg_temp_local_new</name><argument_list pos:start="6427:40" pos:end="6427:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6429:17" pos:end="6429:43"><expr pos:start="6429:17" pos:end="6429:42"><call pos:start="6429:17" pos:end="6429:42"><name pos:start="6429:17" pos:end="6429:30">tcg_gen_mov_tl</name><argument_list pos:start="6429:31" pos:end="6429:42">(<argument pos:start="6429:32" pos:end="6429:33"><expr pos:start="6429:32" pos:end="6429:33"><name pos:start="6429:32" pos:end="6429:33">a0</name></expr></argument>, <argument pos:start="6429:36" pos:end="6429:41"><expr pos:start="6429:36" pos:end="6429:41"><name pos:start="6429:36" pos:end="6429:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6431:15" pos:end="6437:13">else <block pos:start="6431:20" pos:end="6437:13">{<block_content pos:start="6433:17" pos:end="6435:32">

                <expr_stmt pos:start="6433:17" pos:end="6433:45"><expr pos:start="6433:17" pos:end="6433:44"><call pos:start="6433:17" pos:end="6433:44"><name pos:start="6433:17" pos:end="6433:32">gen_op_mov_v_reg</name><argument_list pos:start="6433:33" pos:end="6433:44">(<argument pos:start="6433:34" pos:end="6433:35"><expr pos:start="6433:34" pos:end="6433:35"><name pos:start="6433:34" pos:end="6433:35">ot</name></expr></argument>, <argument pos:start="6433:38" pos:end="6433:39"><expr pos:start="6433:38" pos:end="6433:39"><name pos:start="6433:38" pos:end="6433:39">t0</name></expr></argument>, <argument pos:start="6433:42" pos:end="6433:43"><expr pos:start="6433:42" pos:end="6433:43"><name pos:start="6433:42" pos:end="6433:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6435:17" pos:end="6435:32"><expr pos:start="6435:17" pos:end="6435:31"><call pos:start="6435:17" pos:end="6435:31"><name pos:start="6435:17" pos:end="6435:27">TCGV_UNUSED</name><argument_list pos:start="6435:28" pos:end="6435:31">(<argument pos:start="6435:29" pos:end="6435:30"><expr pos:start="6435:29" pos:end="6435:30"><name pos:start="6435:29" pos:end="6435:30">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6439:13" pos:end="6439:42"><expr pos:start="6439:13" pos:end="6439:41"><call pos:start="6439:13" pos:end="6439:41"><name pos:start="6439:13" pos:end="6439:28">gen_op_mov_v_reg</name><argument_list pos:start="6439:29" pos:end="6439:41">(<argument pos:start="6439:30" pos:end="6439:31"><expr pos:start="6439:30" pos:end="6439:31"><name pos:start="6439:30" pos:end="6439:31">ot</name></expr></argument>, <argument pos:start="6439:34" pos:end="6439:35"><expr pos:start="6439:34" pos:end="6439:35"><name pos:start="6439:34" pos:end="6439:35">t1</name></expr></argument>, <argument pos:start="6439:38" pos:end="6439:40"><expr pos:start="6439:38" pos:end="6439:40"><name pos:start="6439:38" pos:end="6439:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6441:13" pos:end="6441:45"><expr pos:start="6441:13" pos:end="6441:44"><call pos:start="6441:13" pos:end="6441:44"><name pos:start="6441:13" pos:end="6441:27">tcg_gen_andi_tl</name><argument_list pos:start="6441:28" pos:end="6441:44">(<argument pos:start="6441:29" pos:end="6441:36"><expr pos:start="6441:29" pos:end="6441:36"><name pos:start="6441:29" pos:end="6441:36">cpu_tmp0</name></expr></argument>, <argument pos:start="6441:39" pos:end="6441:40"><expr pos:start="6441:39" pos:end="6441:40"><name pos:start="6441:39" pos:end="6441:40">t0</name></expr></argument>, <argument pos:start="6441:43" pos:end="6441:43"><expr pos:start="6441:43" pos:end="6441:43"><literal type="number" pos:start="6441:43" pos:end="6441:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6443:13" pos:end="6443:39"><expr pos:start="6443:13" pos:end="6443:38"><call pos:start="6443:13" pos:end="6443:38"><name pos:start="6443:13" pos:end="6443:27">tcg_gen_andi_tl</name><argument_list pos:start="6443:28" pos:end="6443:38">(<argument pos:start="6443:29" pos:end="6443:30"><expr pos:start="6443:29" pos:end="6443:30"><name pos:start="6443:29" pos:end="6443:30">t1</name></expr></argument>, <argument pos:start="6443:33" pos:end="6443:34"><expr pos:start="6443:33" pos:end="6443:34"><name pos:start="6443:33" pos:end="6443:34">t1</name></expr></argument>, <argument pos:start="6443:37" pos:end="6443:37"><expr pos:start="6443:37" pos:end="6443:37"><literal type="number" pos:start="6443:37" pos:end="6443:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6445:13" pos:end="6445:35"><expr pos:start="6445:13" pos:end="6445:34"><call pos:start="6445:13" pos:end="6445:34"><name pos:start="6445:13" pos:end="6445:27">tcg_gen_movi_tl</name><argument_list pos:start="6445:28" pos:end="6445:34">(<argument pos:start="6445:29" pos:end="6445:30"><expr pos:start="6445:29" pos:end="6445:30"><name pos:start="6445:29" pos:end="6445:30">t2</name></expr></argument>, <argument pos:start="6445:33" pos:end="6445:33"><expr pos:start="6445:33" pos:end="6445:33"><literal type="number" pos:start="6445:33" pos:end="6445:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6447:13" pos:end="6447:37"><expr pos:start="6447:13" pos:end="6447:36"><name pos:start="6447:13" pos:end="6447:18">label1</name> <operator pos:start="6447:20" pos:end="6447:20">=</operator> <call pos:start="6447:22" pos:end="6447:36"><name pos:start="6447:22" pos:end="6447:34">gen_new_label</name><argument_list pos:start="6447:35" pos:end="6447:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6449:13" pos:end="6449:65"><expr pos:start="6449:13" pos:end="6449:64"><call pos:start="6449:13" pos:end="6449:64"><name pos:start="6449:13" pos:end="6449:29">tcg_gen_brcond_tl</name><argument_list pos:start="6449:30" pos:end="6449:64">(<argument pos:start="6449:31" pos:end="6449:41"><expr pos:start="6449:31" pos:end="6449:41"><name pos:start="6449:31" pos:end="6449:41">TCG_COND_GE</name></expr></argument>, <argument pos:start="6449:44" pos:end="6449:51"><expr pos:start="6449:44" pos:end="6449:51"><name pos:start="6449:44" pos:end="6449:51">cpu_tmp0</name></expr></argument>, <argument pos:start="6449:54" pos:end="6449:55"><expr pos:start="6449:54" pos:end="6449:55"><name pos:start="6449:54" pos:end="6449:55">t1</name></expr></argument>, <argument pos:start="6449:58" pos:end="6449:63"><expr pos:start="6449:58" pos:end="6449:63"><name pos:start="6449:58" pos:end="6449:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6451:13" pos:end="6451:40"><expr pos:start="6451:13" pos:end="6451:39"><call pos:start="6451:13" pos:end="6451:39"><name pos:start="6451:13" pos:end="6451:27">tcg_gen_andi_tl</name><argument_list pos:start="6451:28" pos:end="6451:39">(<argument pos:start="6451:29" pos:end="6451:30"><expr pos:start="6451:29" pos:end="6451:30"><name pos:start="6451:29" pos:end="6451:30">t0</name></expr></argument>, <argument pos:start="6451:33" pos:end="6451:34"><expr pos:start="6451:33" pos:end="6451:34"><name pos:start="6451:33" pos:end="6451:34">t0</name></expr></argument>, <argument pos:start="6451:37" pos:end="6451:38"><expr pos:start="6451:37" pos:end="6451:38"><operator pos:start="6451:37" pos:end="6451:37">~</operator><literal type="number" pos:start="6451:38" pos:end="6451:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6453:13" pos:end="6453:38"><expr pos:start="6453:13" pos:end="6453:37"><call pos:start="6453:13" pos:end="6453:37"><name pos:start="6453:13" pos:end="6453:25">tcg_gen_or_tl</name><argument_list pos:start="6453:26" pos:end="6453:37">(<argument pos:start="6453:27" pos:end="6453:28"><expr pos:start="6453:27" pos:end="6453:28"><name pos:start="6453:27" pos:end="6453:28">t0</name></expr></argument>, <argument pos:start="6453:31" pos:end="6453:32"><expr pos:start="6453:31" pos:end="6453:32"><name pos:start="6453:31" pos:end="6453:32">t0</name></expr></argument>, <argument pos:start="6453:35" pos:end="6453:36"><expr pos:start="6453:35" pos:end="6453:36"><name pos:start="6453:35" pos:end="6453:36">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6455:13" pos:end="6455:38"><expr pos:start="6455:13" pos:end="6455:37"><call pos:start="6455:13" pos:end="6455:37"><name pos:start="6455:13" pos:end="6455:27">tcg_gen_movi_tl</name><argument_list pos:start="6455:28" pos:end="6455:37">(<argument pos:start="6455:29" pos:end="6455:30"><expr pos:start="6455:29" pos:end="6455:30"><name pos:start="6455:29" pos:end="6455:30">t2</name></expr></argument>, <argument pos:start="6455:33" pos:end="6455:36"><expr pos:start="6455:33" pos:end="6455:36"><name pos:start="6455:33" pos:end="6455:36">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6457:13" pos:end="6457:34"><expr pos:start="6457:13" pos:end="6457:33"><call pos:start="6457:13" pos:end="6457:33"><name pos:start="6457:13" pos:end="6457:25">gen_set_label</name><argument_list pos:start="6457:26" pos:end="6457:33">(<argument pos:start="6457:27" pos:end="6457:32"><expr pos:start="6457:27" pos:end="6457:32"><name pos:start="6457:27" pos:end="6457:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6459:13" pos:end="6469:13"><if pos:start="6459:13" pos:end="6465:12">if <condition pos:start="6459:16" pos:end="6459:25">(<expr pos:start="6459:17" pos:end="6459:24"><name pos:start="6459:17" pos:end="6459:19">mod</name> <operator pos:start="6459:21" pos:end="6459:22">!=</operator> <literal type="number" pos:start="6459:24" pos:end="6459:24">3</literal></expr>)</condition> <block pos:start="6459:27" pos:end="6465:12">{<block_content pos:start="6461:17" pos:end="6463:34">

                <expr_stmt pos:start="6461:17" pos:end="6461:43"><expr pos:start="6461:17" pos:end="6461:42"><call pos:start="6461:17" pos:end="6461:42"><name pos:start="6461:17" pos:end="6461:27">gen_op_st_v</name><argument_list pos:start="6461:28" pos:end="6461:42">(<argument pos:start="6461:29" pos:end="6461:29"><expr pos:start="6461:29" pos:end="6461:29"><name pos:start="6461:29" pos:end="6461:29">s</name></expr></argument>, <argument pos:start="6461:32" pos:end="6461:33"><expr pos:start="6461:32" pos:end="6461:33"><name pos:start="6461:32" pos:end="6461:33">ot</name></expr></argument>, <argument pos:start="6461:36" pos:end="6461:37"><expr pos:start="6461:36" pos:end="6461:37"><name pos:start="6461:36" pos:end="6461:37">t0</name></expr></argument>, <argument pos:start="6461:40" pos:end="6461:41"><expr pos:start="6461:40" pos:end="6461:41"><name pos:start="6461:40" pos:end="6461:41">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6463:17" pos:end="6463:34"><expr pos:start="6463:17" pos:end="6463:33"><call pos:start="6463:17" pos:end="6463:33"><name pos:start="6463:17" pos:end="6463:29">tcg_temp_free</name><argument_list pos:start="6463:30" pos:end="6463:33">(<argument pos:start="6463:31" pos:end="6463:32"><expr pos:start="6463:31" pos:end="6463:32"><name pos:start="6463:31" pos:end="6463:32">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           </block_content>}</block></if> <else pos:start="6465:14" pos:end="6469:13">else <block pos:start="6465:19" pos:end="6469:13">{<block_content pos:start="6467:17" pos:end="6467:45">

                <expr_stmt pos:start="6467:17" pos:end="6467:45"><expr pos:start="6467:17" pos:end="6467:44"><call pos:start="6467:17" pos:end="6467:44"><name pos:start="6467:17" pos:end="6467:32">gen_op_mov_reg_v</name><argument_list pos:start="6467:33" pos:end="6467:44">(<argument pos:start="6467:34" pos:end="6467:35"><expr pos:start="6467:34" pos:end="6467:35"><name pos:start="6467:34" pos:end="6467:35">ot</name></expr></argument>, <argument pos:start="6467:38" pos:end="6467:39"><expr pos:start="6467:38" pos:end="6467:39"><name pos:start="6467:38" pos:end="6467:39">rm</name></expr></argument>, <argument pos:start="6467:42" pos:end="6467:43"><expr pos:start="6467:42" pos:end="6467:43"><name pos:start="6467:42" pos:end="6467:43">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6471:13" pos:end="6471:34"><expr pos:start="6471:13" pos:end="6471:33"><call pos:start="6471:13" pos:end="6471:33"><name pos:start="6471:13" pos:end="6471:30">gen_compute_eflags</name><argument_list pos:start="6471:31" pos:end="6471:33">(<argument pos:start="6471:32" pos:end="6471:32"><expr pos:start="6471:32" pos:end="6471:32"><name pos:start="6471:32" pos:end="6471:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6473:13" pos:end="6473:59"><expr pos:start="6473:13" pos:end="6473:58"><call pos:start="6473:13" pos:end="6473:58"><name pos:start="6473:13" pos:end="6473:27">tcg_gen_andi_tl</name><argument_list pos:start="6473:28" pos:end="6473:58">(<argument pos:start="6473:29" pos:end="6473:38"><expr pos:start="6473:29" pos:end="6473:38"><name pos:start="6473:29" pos:end="6473:38">cpu_cc_src</name></expr></argument>, <argument pos:start="6473:41" pos:end="6473:50"><expr pos:start="6473:41" pos:end="6473:50"><name pos:start="6473:41" pos:end="6473:50">cpu_cc_src</name></expr></argument>, <argument pos:start="6473:53" pos:end="6473:57"><expr pos:start="6473:53" pos:end="6473:57"><operator pos:start="6473:53" pos:end="6473:53">~</operator><name pos:start="6473:54" pos:end="6473:57">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6475:13" pos:end="6475:54"><expr pos:start="6475:13" pos:end="6475:53"><call pos:start="6475:13" pos:end="6475:53"><name pos:start="6475:13" pos:end="6475:25">tcg_gen_or_tl</name><argument_list pos:start="6475:26" pos:end="6475:53">(<argument pos:start="6475:27" pos:end="6475:36"><expr pos:start="6475:27" pos:end="6475:36"><name pos:start="6475:27" pos:end="6475:36">cpu_cc_src</name></expr></argument>, <argument pos:start="6475:39" pos:end="6475:48"><expr pos:start="6475:39" pos:end="6475:48"><name pos:start="6475:39" pos:end="6475:48">cpu_cc_src</name></expr></argument>, <argument pos:start="6475:51" pos:end="6475:52"><expr pos:start="6475:51" pos:end="6475:52"><name pos:start="6475:51" pos:end="6475:52">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6477:13" pos:end="6477:30"><expr pos:start="6477:13" pos:end="6477:29"><call pos:start="6477:13" pos:end="6477:29"><name pos:start="6477:13" pos:end="6477:25">tcg_temp_free</name><argument_list pos:start="6477:26" pos:end="6477:29">(<argument pos:start="6477:27" pos:end="6477:28"><expr pos:start="6477:27" pos:end="6477:28"><name pos:start="6477:27" pos:end="6477:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6479:13" pos:end="6479:30"><expr pos:start="6479:13" pos:end="6479:29"><call pos:start="6479:13" pos:end="6479:29"><name pos:start="6479:13" pos:end="6479:25">tcg_temp_free</name><argument_list pos:start="6479:26" pos:end="6479:29">(<argument pos:start="6479:27" pos:end="6479:28"><expr pos:start="6479:27" pos:end="6479:28"><name pos:start="6479:27" pos:end="6479:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6481:13" pos:end="6481:30"><expr pos:start="6481:13" pos:end="6481:29"><call pos:start="6481:13" pos:end="6481:29"><name pos:start="6481:13" pos:end="6481:25">tcg_temp_free</name><argument_list pos:start="6481:26" pos:end="6481:29">(<argument pos:start="6481:27" pos:end="6481:28"><expr pos:start="6481:27" pos:end="6481:28"><name pos:start="6481:27" pos:end="6481:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6485:9" pos:end="6485:14">break;</break>

    <case pos:start="6487:5" pos:end="6487:15">case <expr pos:start="6487:10" pos:end="6487:14"><literal type="number" pos:start="6487:10" pos:end="6487:14">0x102</literal></expr>:</case> <comment type="block" pos:start="6487:17" pos:end="6487:25">/* lar */</comment>

    <case pos:start="6489:5" pos:end="6489:15">case <expr pos:start="6489:10" pos:end="6489:14"><literal type="number" pos:start="6489:10" pos:end="6489:14">0x103</literal></expr>:</case> <comment type="block" pos:start="6489:17" pos:end="6489:25">/* lsl */</comment>

        <block pos:start="6491:9" pos:end="6537:9">{<block_content pos:start="6493:13" pos:end="6535:30">

            <decl_stmt pos:start="6493:13" pos:end="6493:29"><decl pos:start="6493:13" pos:end="6493:28"><type pos:start="6493:13" pos:end="6493:22"><name pos:start="6493:13" pos:end="6493:20">TCGLabel</name> <modifier pos:start="6493:22" pos:end="6493:22">*</modifier></type><name pos:start="6493:23" pos:end="6493:28">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6495:13" pos:end="6495:20"><decl pos:start="6495:13" pos:end="6495:19"><type pos:start="6495:13" pos:end="6495:16"><name pos:start="6495:13" pos:end="6495:16">TCGv</name></type> <name pos:start="6495:18" pos:end="6495:19">t0</name></decl>;</decl_stmt>

            <if_stmt pos:start="6497:13" pos:end="6499:32"><if pos:start="6497:13" pos:end="6499:32">if <condition pos:start="6497:16" pos:end="6497:34">(<expr pos:start="6497:17" pos:end="6497:33"><operator pos:start="6497:17" pos:end="6497:17">!</operator><name pos:start="6497:18" pos:end="6497:22"><name pos:start="6497:18" pos:end="6497:18">s</name><operator pos:start="6497:19" pos:end="6497:20">-&gt;</operator><name pos:start="6497:21" pos:end="6497:22">pe</name></name> <operator pos:start="6497:24" pos:end="6497:25">||</operator> <name pos:start="6497:27" pos:end="6497:33"><name pos:start="6497:27" pos:end="6497:27">s</name><operator pos:start="6497:28" pos:end="6497:29">-&gt;</operator><name pos:start="6497:30" pos:end="6497:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="6499:17" pos:end="6499:32"><block_content pos:start="6499:17" pos:end="6499:32">

                <goto pos:start="6499:17" pos:end="6499:32">goto <name pos:start="6499:22" pos:end="6499:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6501:13" pos:end="6501:48"><expr pos:start="6501:13" pos:end="6501:47"><name pos:start="6501:13" pos:end="6501:14">ot</name> <operator pos:start="6501:16" pos:end="6501:16">=</operator> <ternary pos:start="6501:18" pos:end="6501:47"><condition pos:start="6501:18" pos:end="6501:33"><expr pos:start="6501:18" pos:end="6501:31"><name pos:start="6501:18" pos:end="6501:22">dflag</name> <operator pos:start="6501:24" pos:end="6501:25">!=</operator> <name pos:start="6501:27" pos:end="6501:31">MO_16</name></expr> ?</condition><then pos:start="6501:35" pos:end="6501:39"> <expr pos:start="6501:35" pos:end="6501:39"><name pos:start="6501:35" pos:end="6501:39">MO_32</name></expr> </then><else pos:start="6501:41" pos:end="6501:47">: <expr pos:start="6501:43" pos:end="6501:47"><name pos:start="6501:43" pos:end="6501:47">MO_16</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="6503:13" pos:end="6503:42"><expr pos:start="6503:13" pos:end="6503:41"><name pos:start="6503:13" pos:end="6503:17">modrm</name> <operator pos:start="6503:19" pos:end="6503:19">=</operator> <call pos:start="6503:21" pos:end="6503:41"><name pos:start="6503:21" pos:end="6503:33">x86_ldub_code</name><argument_list pos:start="6503:34" pos:end="6503:41">(<argument pos:start="6503:35" pos:end="6503:37"><expr pos:start="6503:35" pos:end="6503:37"><name pos:start="6503:35" pos:end="6503:37">env</name></expr></argument>, <argument pos:start="6503:40" pos:end="6503:40"><expr pos:start="6503:40" pos:end="6503:40"><name pos:start="6503:40" pos:end="6503:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6505:13" pos:end="6505:45"><expr pos:start="6505:13" pos:end="6505:44"><name pos:start="6505:13" pos:end="6505:15">reg</name> <operator pos:start="6505:17" pos:end="6505:17">=</operator> <operator pos:start="6505:19" pos:end="6505:19">(</operator><operator pos:start="6505:20" pos:end="6505:20">(</operator><name pos:start="6505:21" pos:end="6505:25">modrm</name> <operator pos:start="6505:27" pos:end="6505:28">&gt;&gt;</operator> <literal type="number" pos:start="6505:30" pos:end="6505:30">3</literal><operator pos:start="6505:31" pos:end="6505:31">)</operator> <operator pos:start="6505:33" pos:end="6505:33">&amp;</operator> <literal type="number" pos:start="6505:35" pos:end="6505:35">7</literal><operator pos:start="6505:36" pos:end="6505:36">)</operator> <operator pos:start="6505:38" pos:end="6505:38">|</operator> <name pos:start="6505:40" pos:end="6505:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6507:13" pos:end="6507:61"><expr pos:start="6507:13" pos:end="6507:60"><call pos:start="6507:13" pos:end="6507:60"><name pos:start="6507:13" pos:end="6507:26">gen_ldst_modrm</name><argument_list pos:start="6507:27" pos:end="6507:60">(<argument pos:start="6507:28" pos:end="6507:30"><expr pos:start="6507:28" pos:end="6507:30"><name pos:start="6507:28" pos:end="6507:30">env</name></expr></argument>, <argument pos:start="6507:33" pos:end="6507:33"><expr pos:start="6507:33" pos:end="6507:33"><name pos:start="6507:33" pos:end="6507:33">s</name></expr></argument>, <argument pos:start="6507:36" pos:end="6507:40"><expr pos:start="6507:36" pos:end="6507:40"><name pos:start="6507:36" pos:end="6507:40">modrm</name></expr></argument>, <argument pos:start="6507:43" pos:end="6507:47"><expr pos:start="6507:43" pos:end="6507:47"><name pos:start="6507:43" pos:end="6507:47">MO_16</name></expr></argument>, <argument pos:start="6507:50" pos:end="6507:56"><expr pos:start="6507:50" pos:end="6507:56"><name pos:start="6507:50" pos:end="6507:56">OR_TMP0</name></expr></argument>, <argument pos:start="6507:59" pos:end="6507:59"><expr pos:start="6507:59" pos:end="6507:59"><literal type="number" pos:start="6507:59" pos:end="6507:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6509:13" pos:end="6509:38"><expr pos:start="6509:13" pos:end="6509:37"><name pos:start="6509:13" pos:end="6509:14">t0</name> <operator pos:start="6509:16" pos:end="6509:16">=</operator> <call pos:start="6509:18" pos:end="6509:37"><name pos:start="6509:18" pos:end="6509:35">tcg_temp_local_new</name><argument_list pos:start="6509:36" pos:end="6509:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6511:13" pos:end="6511:32"><expr pos:start="6511:13" pos:end="6511:31"><call pos:start="6511:13" pos:end="6511:31"><name pos:start="6511:13" pos:end="6511:28">gen_update_cc_op</name><argument_list pos:start="6511:29" pos:end="6511:31">(<argument pos:start="6511:30" pos:end="6511:30"><expr pos:start="6511:30" pos:end="6511:30"><name pos:start="6511:30" pos:end="6511:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6513:13" pos:end="6521:13"><if pos:start="6513:13" pos:end="6517:13">if <condition pos:start="6513:16" pos:end="6513:27">(<expr pos:start="6513:17" pos:end="6513:26"><name pos:start="6513:17" pos:end="6513:17">b</name> <operator pos:start="6513:19" pos:end="6513:20">==</operator> <literal type="number" pos:start="6513:22" pos:end="6513:26">0x102</literal></expr>)</condition> <block pos:start="6513:29" pos:end="6517:13">{<block_content pos:start="6515:17" pos:end="6515:52">

                <expr_stmt pos:start="6515:17" pos:end="6515:52"><expr pos:start="6515:17" pos:end="6515:51"><call pos:start="6515:17" pos:end="6515:51"><name pos:start="6515:17" pos:end="6515:30">gen_helper_lar</name><argument_list pos:start="6515:31" pos:end="6515:51">(<argument pos:start="6515:32" pos:end="6515:33"><expr pos:start="6515:32" pos:end="6515:33"><name pos:start="6515:32" pos:end="6515:33">t0</name></expr></argument>, <argument pos:start="6515:36" pos:end="6515:42"><expr pos:start="6515:36" pos:end="6515:42"><name pos:start="6515:36" pos:end="6515:42">cpu_env</name></expr></argument>, <argument pos:start="6515:45" pos:end="6515:50"><expr pos:start="6515:45" pos:end="6515:50"><name pos:start="6515:45" pos:end="6515:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6517:15" pos:end="6521:13">else <block pos:start="6517:20" pos:end="6521:13">{<block_content pos:start="6519:17" pos:end="6519:52">

                <expr_stmt pos:start="6519:17" pos:end="6519:52"><expr pos:start="6519:17" pos:end="6519:51"><call pos:start="6519:17" pos:end="6519:51"><name pos:start="6519:17" pos:end="6519:30">gen_helper_lsl</name><argument_list pos:start="6519:31" pos:end="6519:51">(<argument pos:start="6519:32" pos:end="6519:33"><expr pos:start="6519:32" pos:end="6519:33"><name pos:start="6519:32" pos:end="6519:33">t0</name></expr></argument>, <argument pos:start="6519:36" pos:end="6519:42"><expr pos:start="6519:36" pos:end="6519:42"><name pos:start="6519:36" pos:end="6519:42">cpu_env</name></expr></argument>, <argument pos:start="6519:45" pos:end="6519:50"><expr pos:start="6519:45" pos:end="6519:50"><name pos:start="6519:45" pos:end="6519:50">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6523:13" pos:end="6523:56"><expr pos:start="6523:13" pos:end="6523:55"><call pos:start="6523:13" pos:end="6523:55"><name pos:start="6523:13" pos:end="6523:27">tcg_gen_andi_tl</name><argument_list pos:start="6523:28" pos:end="6523:55">(<argument pos:start="6523:29" pos:end="6523:36"><expr pos:start="6523:29" pos:end="6523:36"><name pos:start="6523:29" pos:end="6523:36">cpu_tmp0</name></expr></argument>, <argument pos:start="6523:39" pos:end="6523:48"><expr pos:start="6523:39" pos:end="6523:48"><name pos:start="6523:39" pos:end="6523:48">cpu_cc_src</name></expr></argument>, <argument pos:start="6523:51" pos:end="6523:54"><expr pos:start="6523:51" pos:end="6523:54"><name pos:start="6523:51" pos:end="6523:54">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6525:13" pos:end="6525:37"><expr pos:start="6525:13" pos:end="6525:36"><name pos:start="6525:13" pos:end="6525:18">label1</name> <operator pos:start="6525:20" pos:end="6525:20">=</operator> <call pos:start="6525:22" pos:end="6525:36"><name pos:start="6525:22" pos:end="6525:34">gen_new_label</name><argument_list pos:start="6525:35" pos:end="6525:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6527:13" pos:end="6527:65"><expr pos:start="6527:13" pos:end="6527:64"><call pos:start="6527:13" pos:end="6527:64"><name pos:start="6527:13" pos:end="6527:30">tcg_gen_brcondi_tl</name><argument_list pos:start="6527:31" pos:end="6527:64">(<argument pos:start="6527:32" pos:end="6527:42"><expr pos:start="6527:32" pos:end="6527:42"><name pos:start="6527:32" pos:end="6527:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="6527:45" pos:end="6527:52"><expr pos:start="6527:45" pos:end="6527:52"><name pos:start="6527:45" pos:end="6527:52">cpu_tmp0</name></expr></argument>, <argument pos:start="6527:55" pos:end="6527:55"><expr pos:start="6527:55" pos:end="6527:55"><literal type="number" pos:start="6527:55" pos:end="6527:55">0</literal></expr></argument>, <argument pos:start="6527:58" pos:end="6527:63"><expr pos:start="6527:58" pos:end="6527:63"><name pos:start="6527:58" pos:end="6527:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6529:13" pos:end="6529:42"><expr pos:start="6529:13" pos:end="6529:41"><call pos:start="6529:13" pos:end="6529:41"><name pos:start="6529:13" pos:end="6529:28">gen_op_mov_reg_v</name><argument_list pos:start="6529:29" pos:end="6529:41">(<argument pos:start="6529:30" pos:end="6529:31"><expr pos:start="6529:30" pos:end="6529:31"><name pos:start="6529:30" pos:end="6529:31">ot</name></expr></argument>, <argument pos:start="6529:34" pos:end="6529:36"><expr pos:start="6529:34" pos:end="6529:36"><name pos:start="6529:34" pos:end="6529:36">reg</name></expr></argument>, <argument pos:start="6529:39" pos:end="6529:40"><expr pos:start="6529:39" pos:end="6529:40"><name pos:start="6529:39" pos:end="6529:40">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6531:13" pos:end="6531:34"><expr pos:start="6531:13" pos:end="6531:33"><call pos:start="6531:13" pos:end="6531:33"><name pos:start="6531:13" pos:end="6531:25">gen_set_label</name><argument_list pos:start="6531:26" pos:end="6531:33">(<argument pos:start="6531:27" pos:end="6531:32"><expr pos:start="6531:27" pos:end="6531:32"><name pos:start="6531:27" pos:end="6531:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6533:13" pos:end="6533:39"><expr pos:start="6533:13" pos:end="6533:38"><call pos:start="6533:13" pos:end="6533:38"><name pos:start="6533:13" pos:end="6533:21">set_cc_op</name><argument_list pos:start="6533:22" pos:end="6533:38">(<argument pos:start="6533:23" pos:end="6533:23"><expr pos:start="6533:23" pos:end="6533:23"><name pos:start="6533:23" pos:end="6533:23">s</name></expr></argument>, <argument pos:start="6533:26" pos:end="6533:37"><expr pos:start="6533:26" pos:end="6533:37"><name pos:start="6533:26" pos:end="6533:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6535:13" pos:end="6535:30"><expr pos:start="6535:13" pos:end="6535:29"><call pos:start="6535:13" pos:end="6535:29"><name pos:start="6535:13" pos:end="6535:25">tcg_temp_free</name><argument_list pos:start="6535:26" pos:end="6535:29">(<argument pos:start="6535:27" pos:end="6535:28"><expr pos:start="6535:27" pos:end="6535:28"><name pos:start="6535:27" pos:end="6535:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6539:9" pos:end="6539:14">break;</break>

    <case pos:start="6541:5" pos:end="6541:15">case <expr pos:start="6541:10" pos:end="6541:14"><literal type="number" pos:start="6541:10" pos:end="6541:14">0x118</literal></expr>:</case>

        <expr_stmt pos:start="6543:9" pos:end="6543:38"><expr pos:start="6543:9" pos:end="6543:37"><name pos:start="6543:9" pos:end="6543:13">modrm</name> <operator pos:start="6543:15" pos:end="6543:15">=</operator> <call pos:start="6543:17" pos:end="6543:37"><name pos:start="6543:17" pos:end="6543:29">x86_ldub_code</name><argument_list pos:start="6543:30" pos:end="6543:37">(<argument pos:start="6543:31" pos:end="6543:33"><expr pos:start="6543:31" pos:end="6543:33"><name pos:start="6543:31" pos:end="6543:33">env</name></expr></argument>, <argument pos:start="6543:36" pos:end="6543:36"><expr pos:start="6543:36" pos:end="6543:36"><name pos:start="6543:36" pos:end="6543:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6545:9" pos:end="6545:31"><expr pos:start="6545:9" pos:end="6545:30"><name pos:start="6545:9" pos:end="6545:11">mod</name> <operator pos:start="6545:13" pos:end="6545:13">=</operator> <operator pos:start="6545:15" pos:end="6545:15">(</operator><name pos:start="6545:16" pos:end="6545:20">modrm</name> <operator pos:start="6545:22" pos:end="6545:23">&gt;&gt;</operator> <literal type="number" pos:start="6545:25" pos:end="6545:25">6</literal><operator pos:start="6545:26" pos:end="6545:26">)</operator> <operator pos:start="6545:28" pos:end="6545:28">&amp;</operator> <literal type="number" pos:start="6545:30" pos:end="6545:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="6547:9" pos:end="6547:30"><expr pos:start="6547:9" pos:end="6547:29"><name pos:start="6547:9" pos:end="6547:10">op</name> <operator pos:start="6547:12" pos:end="6547:12">=</operator> <operator pos:start="6547:14" pos:end="6547:14">(</operator><name pos:start="6547:15" pos:end="6547:19">modrm</name> <operator pos:start="6547:21" pos:end="6547:22">&gt;&gt;</operator> <literal type="number" pos:start="6547:24" pos:end="6547:24">3</literal><operator pos:start="6547:25" pos:end="6547:25">)</operator> <operator pos:start="6547:27" pos:end="6547:27">&amp;</operator> <literal type="number" pos:start="6547:29" pos:end="6547:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="6549:9" pos:end="6575:9">switch<condition pos:start="6549:15" pos:end="6549:18">(<expr pos:start="6549:16" pos:end="6549:17"><name pos:start="6549:16" pos:end="6549:17">op</name></expr>)</condition> <block pos:start="6549:20" pos:end="6575:9">{<block_content pos:start="6551:9" pos:end="6573:18">

        <case pos:start="6551:9" pos:end="6551:15">case <expr pos:start="6551:14" pos:end="6551:14"><literal type="number" pos:start="6551:14" pos:end="6551:14">0</literal></expr>:</case> <comment type="block" pos:start="6551:17" pos:end="6551:33">/* prefetchnta */</comment>

        <case pos:start="6553:9" pos:end="6553:15">case <expr pos:start="6553:14" pos:end="6553:14"><literal type="number" pos:start="6553:14" pos:end="6553:14">1</literal></expr>:</case> <comment type="block" pos:start="6553:17" pos:end="6553:33">/* prefetchnt0 */</comment>

        <case pos:start="6555:9" pos:end="6555:15">case <expr pos:start="6555:14" pos:end="6555:14"><literal type="number" pos:start="6555:14" pos:end="6555:14">2</literal></expr>:</case> <comment type="block" pos:start="6555:17" pos:end="6555:33">/* prefetchnt0 */</comment>

        <case pos:start="6557:9" pos:end="6557:15">case <expr pos:start="6557:14" pos:end="6557:14"><literal type="number" pos:start="6557:14" pos:end="6557:14">3</literal></expr>:</case> <comment type="block" pos:start="6557:17" pos:end="6557:33">/* prefetchnt0 */</comment>

            <if_stmt pos:start="6559:13" pos:end="6561:32"><if pos:start="6559:13" pos:end="6561:32">if <condition pos:start="6559:16" pos:end="6559:25">(<expr pos:start="6559:17" pos:end="6559:24"><name pos:start="6559:17" pos:end="6559:19">mod</name> <operator pos:start="6559:21" pos:end="6559:22">==</operator> <literal type="number" pos:start="6559:24" pos:end="6559:24">3</literal></expr>)</condition><block type="pseudo" pos:start="6561:17" pos:end="6561:32"><block_content pos:start="6561:17" pos:end="6561:32">

                <goto pos:start="6561:17" pos:end="6561:32">goto <name pos:start="6561:22" pos:end="6561:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6563:13" pos:end="6563:41"><expr pos:start="6563:13" pos:end="6563:40"><call pos:start="6563:13" pos:end="6563:40"><name pos:start="6563:13" pos:end="6563:25">gen_nop_modrm</name><argument_list pos:start="6563:26" pos:end="6563:40">(<argument pos:start="6563:27" pos:end="6563:29"><expr pos:start="6563:27" pos:end="6563:29"><name pos:start="6563:27" pos:end="6563:29">env</name></expr></argument>, <argument pos:start="6563:32" pos:end="6563:32"><expr pos:start="6563:32" pos:end="6563:32"><name pos:start="6563:32" pos:end="6563:32">s</name></expr></argument>, <argument pos:start="6563:35" pos:end="6563:39"><expr pos:start="6563:35" pos:end="6563:39"><name pos:start="6563:35" pos:end="6563:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6565:13" pos:end="6565:36">/* nothing more to do */</comment>

            <break pos:start="6567:13" pos:end="6567:18">break;</break>

        <default pos:start="6569:9" pos:end="6569:16">default:</default> <comment type="block" pos:start="6569:18" pos:end="6569:39">/* nop (multi byte) */</comment>

            <expr_stmt pos:start="6571:13" pos:end="6571:41"><expr pos:start="6571:13" pos:end="6571:40"><call pos:start="6571:13" pos:end="6571:40"><name pos:start="6571:13" pos:end="6571:25">gen_nop_modrm</name><argument_list pos:start="6571:26" pos:end="6571:40">(<argument pos:start="6571:27" pos:end="6571:29"><expr pos:start="6571:27" pos:end="6571:29"><name pos:start="6571:27" pos:end="6571:29">env</name></expr></argument>, <argument pos:start="6571:32" pos:end="6571:32"><expr pos:start="6571:32" pos:end="6571:32"><name pos:start="6571:32" pos:end="6571:32">s</name></expr></argument>, <argument pos:start="6571:35" pos:end="6571:39"><expr pos:start="6571:35" pos:end="6571:39"><name pos:start="6571:35" pos:end="6571:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6573:13" pos:end="6573:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="6577:9" pos:end="6577:14">break;</break>

    <case pos:start="6579:5" pos:end="6579:15">case <expr pos:start="6579:10" pos:end="6579:14"><literal type="number" pos:start="6579:10" pos:end="6579:14">0x11a</literal></expr>:</case>

        <expr_stmt pos:start="6581:9" pos:end="6581:38"><expr pos:start="6581:9" pos:end="6581:37"><name pos:start="6581:9" pos:end="6581:13">modrm</name> <operator pos:start="6581:15" pos:end="6581:15">=</operator> <call pos:start="6581:17" pos:end="6581:37"><name pos:start="6581:17" pos:end="6581:29">x86_ldub_code</name><argument_list pos:start="6581:30" pos:end="6581:37">(<argument pos:start="6581:31" pos:end="6581:33"><expr pos:start="6581:31" pos:end="6581:33"><name pos:start="6581:31" pos:end="6581:33">env</name></expr></argument>, <argument pos:start="6581:36" pos:end="6581:36"><expr pos:start="6581:36" pos:end="6581:36"><name pos:start="6581:36" pos:end="6581:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6583:9" pos:end="6753:9"><if pos:start="6583:9" pos:end="6753:9">if <condition pos:start="6583:12" pos:end="6583:38">(<expr pos:start="6583:13" pos:end="6583:37"><name pos:start="6583:13" pos:end="6583:20"><name pos:start="6583:13" pos:end="6583:13">s</name><operator pos:start="6583:14" pos:end="6583:15">-&gt;</operator><name pos:start="6583:16" pos:end="6583:20">flags</name></name> <operator pos:start="6583:22" pos:end="6583:22">&amp;</operator> <name pos:start="6583:24" pos:end="6583:37">HF_MPX_EN_MASK</name></expr>)</condition> <block pos:start="6583:40" pos:end="6753:9">{<block_content pos:start="6585:13" pos:end="6751:13">

            <expr_stmt pos:start="6585:13" pos:end="6585:35"><expr pos:start="6585:13" pos:end="6585:34"><name pos:start="6585:13" pos:end="6585:15">mod</name> <operator pos:start="6585:17" pos:end="6585:17">=</operator> <operator pos:start="6585:19" pos:end="6585:19">(</operator><name pos:start="6585:20" pos:end="6585:24">modrm</name> <operator pos:start="6585:26" pos:end="6585:27">&gt;&gt;</operator> <literal type="number" pos:start="6585:29" pos:end="6585:29">6</literal><operator pos:start="6585:30" pos:end="6585:30">)</operator> <operator pos:start="6585:32" pos:end="6585:32">&amp;</operator> <literal type="number" pos:start="6585:34" pos:end="6585:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6587:13" pos:end="6587:45"><expr pos:start="6587:13" pos:end="6587:44"><name pos:start="6587:13" pos:end="6587:15">reg</name> <operator pos:start="6587:17" pos:end="6587:17">=</operator> <operator pos:start="6587:19" pos:end="6587:19">(</operator><operator pos:start="6587:20" pos:end="6587:20">(</operator><name pos:start="6587:21" pos:end="6587:25">modrm</name> <operator pos:start="6587:27" pos:end="6587:28">&gt;&gt;</operator> <literal type="number" pos:start="6587:30" pos:end="6587:30">3</literal><operator pos:start="6587:31" pos:end="6587:31">)</operator> <operator pos:start="6587:33" pos:end="6587:33">&amp;</operator> <literal type="number" pos:start="6587:35" pos:end="6587:35">7</literal><operator pos:start="6587:36" pos:end="6587:36">)</operator> <operator pos:start="6587:38" pos:end="6587:38">|</operator> <name pos:start="6587:40" pos:end="6587:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6589:13" pos:end="6751:13"><if pos:start="6589:13" pos:end="6605:13">if <condition pos:start="6589:16" pos:end="6589:39">(<expr pos:start="6589:17" pos:end="6589:38"><name pos:start="6589:17" pos:end="6589:24">prefixes</name> <operator pos:start="6589:26" pos:end="6589:26">&amp;</operator> <name pos:start="6589:28" pos:end="6589:38">PREFIX_REPZ</name></expr>)</condition> <block pos:start="6589:41" pos:end="6605:13">{<block_content pos:start="6593:17" pos:end="6603:70">

                <comment type="block" pos:start="6591:17" pos:end="6591:27">/* bndcl */</comment>

                <if_stmt pos:start="6593:17" pos:end="6601:17"><if pos:start="6593:17" pos:end="6601:17">if <condition pos:start="6593:20" pos:end="6597:41">(<expr pos:start="6593:21" pos:end="6597:40"><name pos:start="6593:21" pos:end="6593:23">reg</name> <operator pos:start="6593:25" pos:end="6593:26">&gt;=</operator> <literal type="number" pos:start="6593:28" pos:end="6593:28">4</literal>

                    <operator pos:start="6595:21" pos:end="6595:22">||</operator> <operator pos:start="6595:24" pos:end="6595:24">(</operator><name pos:start="6595:25" pos:end="6595:32">prefixes</name> <operator pos:start="6595:34" pos:end="6595:34">&amp;</operator> <name pos:start="6595:36" pos:end="6595:46">PREFIX_LOCK</name><operator pos:start="6595:47" pos:end="6595:47">)</operator>

                    <operator pos:start="6597:21" pos:end="6597:22">||</operator> <name pos:start="6597:24" pos:end="6597:31"><name pos:start="6597:24" pos:end="6597:24">s</name><operator pos:start="6597:25" pos:end="6597:26">-&gt;</operator><name pos:start="6597:27" pos:end="6597:31">aflag</name></name> <operator pos:start="6597:33" pos:end="6597:34">==</operator> <name pos:start="6597:36" pos:end="6597:40">MO_16</name></expr>)</condition> <block pos:start="6597:43" pos:end="6601:17">{<block_content pos:start="6599:21" pos:end="6599:36">

                    <goto pos:start="6599:21" pos:end="6599:36">goto <name pos:start="6599:26" pos:end="6599:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="6603:17" pos:end="6603:70"><expr pos:start="6603:17" pos:end="6603:69"><call pos:start="6603:17" pos:end="6603:69"><name pos:start="6603:17" pos:end="6603:25">gen_bndck</name><argument_list pos:start="6603:26" pos:end="6603:69">(<argument pos:start="6603:27" pos:end="6603:29"><expr pos:start="6603:27" pos:end="6603:29"><name pos:start="6603:27" pos:end="6603:29">env</name></expr></argument>, <argument pos:start="6603:32" pos:end="6603:32"><expr pos:start="6603:32" pos:end="6603:32"><name pos:start="6603:32" pos:end="6603:32">s</name></expr></argument>, <argument pos:start="6603:35" pos:end="6603:39"><expr pos:start="6603:35" pos:end="6603:39"><name pos:start="6603:35" pos:end="6603:39">modrm</name></expr></argument>, <argument pos:start="6603:42" pos:end="6603:53"><expr pos:start="6603:42" pos:end="6603:53"><name pos:start="6603:42" pos:end="6603:53">TCG_COND_LTU</name></expr></argument>, <argument pos:start="6603:56" pos:end="6603:68"><expr pos:start="6603:56" pos:end="6603:68"><name pos:start="6603:56" pos:end="6603:68"><name pos:start="6603:56" pos:end="6603:63">cpu_bndl</name><index pos:start="6603:64" pos:end="6603:68">[<expr pos:start="6603:65" pos:end="6603:67"><name pos:start="6603:65" pos:end="6603:67">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="6605:15" pos:end="6627:13">else if <condition pos:start="6605:23" pos:end="6605:47">(<expr pos:start="6605:24" pos:end="6605:46"><name pos:start="6605:24" pos:end="6605:31">prefixes</name> <operator pos:start="6605:33" pos:end="6605:33">&amp;</operator> <name pos:start="6605:35" pos:end="6605:46">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="6605:49" pos:end="6627:13">{<block_content pos:start="6609:17" pos:end="6625:40">

                <comment type="block" pos:start="6607:17" pos:end="6607:27">/* bndcu */</comment>

                <if_stmt pos:start="6609:17" pos:end="6617:17"><if pos:start="6609:17" pos:end="6617:17">if <condition pos:start="6609:20" pos:end="6613:41">(<expr pos:start="6609:21" pos:end="6613:40"><name pos:start="6609:21" pos:end="6609:23">reg</name> <operator pos:start="6609:25" pos:end="6609:26">&gt;=</operator> <literal type="number" pos:start="6609:28" pos:end="6609:28">4</literal>

                    <operator pos:start="6611:21" pos:end="6611:22">||</operator> <operator pos:start="6611:24" pos:end="6611:24">(</operator><name pos:start="6611:25" pos:end="6611:32">prefixes</name> <operator pos:start="6611:34" pos:end="6611:34">&amp;</operator> <name pos:start="6611:36" pos:end="6611:46">PREFIX_LOCK</name><operator pos:start="6611:47" pos:end="6611:47">)</operator>

                    <operator pos:start="6613:21" pos:end="6613:22">||</operator> <name pos:start="6613:24" pos:end="6613:31"><name pos:start="6613:24" pos:end="6613:24">s</name><operator pos:start="6613:25" pos:end="6613:26">-&gt;</operator><name pos:start="6613:27" pos:end="6613:31">aflag</name></name> <operator pos:start="6613:33" pos:end="6613:34">==</operator> <name pos:start="6613:36" pos:end="6613:40">MO_16</name></expr>)</condition> <block pos:start="6613:43" pos:end="6617:17">{<block_content pos:start="6615:21" pos:end="6615:36">

                    <goto pos:start="6615:21" pos:end="6615:36">goto <name pos:start="6615:26" pos:end="6615:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <decl_stmt pos:start="6619:17" pos:end="6619:51"><decl pos:start="6619:17" pos:end="6619:50"><type pos:start="6619:17" pos:end="6619:24"><name pos:start="6619:17" pos:end="6619:24">TCGv_i64</name></type> <name pos:start="6619:26" pos:end="6619:29">notu</name> <init pos:start="6619:31" pos:end="6619:50">= <expr pos:start="6619:33" pos:end="6619:50"><call pos:start="6619:33" pos:end="6619:50"><name pos:start="6619:33" pos:end="6619:48">tcg_temp_new_i64</name><argument_list pos:start="6619:49" pos:end="6619:50">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="6621:17" pos:end="6621:53"><expr pos:start="6621:17" pos:end="6621:52"><call pos:start="6621:17" pos:end="6621:52"><name pos:start="6621:17" pos:end="6621:31">tcg_gen_not_i64</name><argument_list pos:start="6621:32" pos:end="6621:52">(<argument pos:start="6621:33" pos:end="6621:36"><expr pos:start="6621:33" pos:end="6621:36"><name pos:start="6621:33" pos:end="6621:36">notu</name></expr></argument>, <argument pos:start="6621:39" pos:end="6621:51"><expr pos:start="6621:39" pos:end="6621:51"><name pos:start="6621:39" pos:end="6621:51"><name pos:start="6621:39" pos:end="6621:46">cpu_bndu</name><index pos:start="6621:47" pos:end="6621:51">[<expr pos:start="6621:48" pos:end="6621:50"><name pos:start="6621:48" pos:end="6621:50">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6623:17" pos:end="6623:61"><expr pos:start="6623:17" pos:end="6623:60"><call pos:start="6623:17" pos:end="6623:60"><name pos:start="6623:17" pos:end="6623:25">gen_bndck</name><argument_list pos:start="6623:26" pos:end="6623:60">(<argument pos:start="6623:27" pos:end="6623:29"><expr pos:start="6623:27" pos:end="6623:29"><name pos:start="6623:27" pos:end="6623:29">env</name></expr></argument>, <argument pos:start="6623:32" pos:end="6623:32"><expr pos:start="6623:32" pos:end="6623:32"><name pos:start="6623:32" pos:end="6623:32">s</name></expr></argument>, <argument pos:start="6623:35" pos:end="6623:39"><expr pos:start="6623:35" pos:end="6623:39"><name pos:start="6623:35" pos:end="6623:39">modrm</name></expr></argument>, <argument pos:start="6623:42" pos:end="6623:53"><expr pos:start="6623:42" pos:end="6623:53"><name pos:start="6623:42" pos:end="6623:53">TCG_COND_GTU</name></expr></argument>, <argument pos:start="6623:56" pos:end="6623:59"><expr pos:start="6623:56" pos:end="6623:59"><name pos:start="6623:56" pos:end="6623:59">notu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6625:17" pos:end="6625:40"><expr pos:start="6625:17" pos:end="6625:39"><call pos:start="6625:17" pos:end="6625:39"><name pos:start="6625:17" pos:end="6625:33">tcg_temp_free_i64</name><argument_list pos:start="6625:34" pos:end="6625:39">(<argument pos:start="6625:35" pos:end="6625:38"><expr pos:start="6625:35" pos:end="6625:38"><name pos:start="6625:35" pos:end="6625:38">notu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="6627:15" pos:end="6691:13">else if <condition pos:start="6627:23" pos:end="6627:46">(<expr pos:start="6627:24" pos:end="6627:45"><name pos:start="6627:24" pos:end="6627:31">prefixes</name> <operator pos:start="6627:33" pos:end="6627:33">&amp;</operator> <name pos:start="6627:35" pos:end="6627:45">PREFIX_DATA</name></expr>)</condition> <block pos:start="6627:48" pos:end="6691:13">{<block_content pos:start="6631:17" pos:end="6689:17">

                <comment type="block" pos:start="6629:17" pos:end="6629:44">/* bndmov -- from reg/mem */</comment>

                <if_stmt pos:start="6631:17" pos:end="6635:17"><if pos:start="6631:17" pos:end="6635:17">if <condition pos:start="6631:20" pos:end="6631:50">(<expr pos:start="6631:21" pos:end="6631:49"><name pos:start="6631:21" pos:end="6631:23">reg</name> <operator pos:start="6631:25" pos:end="6631:26">&gt;=</operator> <literal type="number" pos:start="6631:28" pos:end="6631:28">4</literal> <operator pos:start="6631:30" pos:end="6631:31">||</operator> <name pos:start="6631:33" pos:end="6631:40"><name pos:start="6631:33" pos:end="6631:33">s</name><operator pos:start="6631:34" pos:end="6631:35">-&gt;</operator><name pos:start="6631:36" pos:end="6631:40">aflag</name></name> <operator pos:start="6631:42" pos:end="6631:43">==</operator> <name pos:start="6631:45" pos:end="6631:49">MO_16</name></expr>)</condition> <block pos:start="6631:52" pos:end="6635:17">{<block_content pos:start="6633:21" pos:end="6633:36">

                    <goto pos:start="6633:21" pos:end="6633:36">goto <name pos:start="6633:26" pos:end="6633:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="6637:17" pos:end="6689:17"><if pos:start="6637:17" pos:end="6655:17">if <condition pos:start="6637:20" pos:end="6637:29">(<expr pos:start="6637:21" pos:end="6637:28"><name pos:start="6637:21" pos:end="6637:23">mod</name> <operator pos:start="6637:25" pos:end="6637:26">==</operator> <literal type="number" pos:start="6637:28" pos:end="6637:28">3</literal></expr>)</condition> <block pos:start="6637:31" pos:end="6655:17">{<block_content pos:start="6639:21" pos:end="6653:21">

                    <decl_stmt pos:start="6639:21" pos:end="6639:54"><decl pos:start="6639:21" pos:end="6639:53"><type pos:start="6639:21" pos:end="6639:23"><name pos:start="6639:21" pos:end="6639:23">int</name></type> <name pos:start="6639:25" pos:end="6639:28">reg2</name> <init pos:start="6639:30" pos:end="6639:53">= <expr pos:start="6639:32" pos:end="6639:53"><operator pos:start="6639:32" pos:end="6639:32">(</operator><name pos:start="6639:33" pos:end="6639:37">modrm</name> <operator pos:start="6639:39" pos:end="6639:39">&amp;</operator> <literal type="number" pos:start="6639:41" pos:end="6639:41">7</literal><operator pos:start="6639:42" pos:end="6639:42">)</operator> <operator pos:start="6639:44" pos:end="6639:44">|</operator> <call pos:start="6639:46" pos:end="6639:53"><name pos:start="6639:46" pos:end="6639:50">REX_B</name><argument_list pos:start="6639:51" pos:end="6639:53">(<argument pos:start="6639:52" pos:end="6639:52"><expr pos:start="6639:52" pos:end="6639:52"><name pos:start="6639:52" pos:end="6639:52">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="6641:21" pos:end="6645:21"><if pos:start="6641:21" pos:end="6645:21">if <condition pos:start="6641:24" pos:end="6641:62">(<expr pos:start="6641:25" pos:end="6641:61"><name pos:start="6641:25" pos:end="6641:28">reg2</name> <operator pos:start="6641:30" pos:end="6641:31">&gt;=</operator> <literal type="number" pos:start="6641:33" pos:end="6641:33">4</literal> <operator pos:start="6641:35" pos:end="6641:36">||</operator> <operator pos:start="6641:38" pos:end="6641:38">(</operator><name pos:start="6641:39" pos:end="6641:46">prefixes</name> <operator pos:start="6641:48" pos:end="6641:48">&amp;</operator> <name pos:start="6641:50" pos:end="6641:60">PREFIX_LOCK</name><operator pos:start="6641:61" pos:end="6641:61">)</operator></expr>)</condition> <block pos:start="6641:64" pos:end="6645:21">{<block_content pos:start="6643:25" pos:end="6643:40">

                        <goto pos:start="6643:25" pos:end="6643:40">goto <name pos:start="6643:30" pos:end="6643:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="6647:21" pos:end="6653:21"><if pos:start="6647:21" pos:end="6653:21">if <condition pos:start="6647:24" pos:end="6647:50">(<expr pos:start="6647:25" pos:end="6647:49"><name pos:start="6647:25" pos:end="6647:32"><name pos:start="6647:25" pos:end="6647:25">s</name><operator pos:start="6647:26" pos:end="6647:27">-&gt;</operator><name pos:start="6647:28" pos:end="6647:32">flags</name></name> <operator pos:start="6647:34" pos:end="6647:34">&amp;</operator> <name pos:start="6647:36" pos:end="6647:49">HF_MPX_IU_MASK</name></expr>)</condition> <block pos:start="6647:52" pos:end="6653:21">{<block_content pos:start="6649:25" pos:end="6651:71">

                        <expr_stmt pos:start="6649:25" pos:end="6649:71"><expr pos:start="6649:25" pos:end="6649:70"><call pos:start="6649:25" pos:end="6649:70"><name pos:start="6649:25" pos:end="6649:39">tcg_gen_mov_i64</name><argument_list pos:start="6649:40" pos:end="6649:70">(<argument pos:start="6649:41" pos:end="6649:53"><expr pos:start="6649:41" pos:end="6649:53"><name pos:start="6649:41" pos:end="6649:53"><name pos:start="6649:41" pos:end="6649:48">cpu_bndl</name><index pos:start="6649:49" pos:end="6649:53">[<expr pos:start="6649:50" pos:end="6649:52"><name pos:start="6649:50" pos:end="6649:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6649:56" pos:end="6649:69"><expr pos:start="6649:56" pos:end="6649:69"><name pos:start="6649:56" pos:end="6649:69"><name pos:start="6649:56" pos:end="6649:63">cpu_bndl</name><index pos:start="6649:64" pos:end="6649:69">[<expr pos:start="6649:65" pos:end="6649:68"><name pos:start="6649:65" pos:end="6649:68">reg2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6651:25" pos:end="6651:71"><expr pos:start="6651:25" pos:end="6651:70"><call pos:start="6651:25" pos:end="6651:70"><name pos:start="6651:25" pos:end="6651:39">tcg_gen_mov_i64</name><argument_list pos:start="6651:40" pos:end="6651:70">(<argument pos:start="6651:41" pos:end="6651:53"><expr pos:start="6651:41" pos:end="6651:53"><name pos:start="6651:41" pos:end="6651:53"><name pos:start="6651:41" pos:end="6651:48">cpu_bndu</name><index pos:start="6651:49" pos:end="6651:53">[<expr pos:start="6651:50" pos:end="6651:52"><name pos:start="6651:50" pos:end="6651:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6651:56" pos:end="6651:69"><expr pos:start="6651:56" pos:end="6651:69"><name pos:start="6651:56" pos:end="6651:69"><name pos:start="6651:56" pos:end="6651:63">cpu_bndu</name><index pos:start="6651:64" pos:end="6651:69">[<expr pos:start="6651:65" pos:end="6651:68"><name pos:start="6651:65" pos:end="6651:68">reg2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="6655:19" pos:end="6689:17">else <block pos:start="6655:24" pos:end="6689:17">{<block_content pos:start="6657:21" pos:end="6687:53">

                    <expr_stmt pos:start="6657:21" pos:end="6657:49"><expr pos:start="6657:21" pos:end="6657:48"><call pos:start="6657:21" pos:end="6657:48"><name pos:start="6657:21" pos:end="6657:33">gen_lea_modrm</name><argument_list pos:start="6657:34" pos:end="6657:48">(<argument pos:start="6657:35" pos:end="6657:37"><expr pos:start="6657:35" pos:end="6657:37"><name pos:start="6657:35" pos:end="6657:37">env</name></expr></argument>, <argument pos:start="6657:40" pos:end="6657:40"><expr pos:start="6657:40" pos:end="6657:40"><name pos:start="6657:40" pos:end="6657:40">s</name></expr></argument>, <argument pos:start="6657:43" pos:end="6657:47"><expr pos:start="6657:43" pos:end="6657:47"><name pos:start="6657:43" pos:end="6657:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="6659:21" pos:end="6683:21"><if pos:start="6659:21" pos:end="6671:21">if <condition pos:start="6659:24" pos:end="6659:34">(<expr pos:start="6659:25" pos:end="6659:33"><call pos:start="6659:25" pos:end="6659:33"><name pos:start="6659:25" pos:end="6659:30">CODE64</name><argument_list pos:start="6659:31" pos:end="6659:33">(<argument pos:start="6659:32" pos:end="6659:32"><expr pos:start="6659:32" pos:end="6659:32"><name pos:start="6659:32" pos:end="6659:32">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6659:36" pos:end="6671:21">{<block_content pos:start="6661:25" pos:end="6669:66">

                        <expr_stmt pos:start="6661:25" pos:end="6663:66"><expr pos:start="6661:25" pos:end="6663:65"><call pos:start="6661:25" pos:end="6663:65"><name pos:start="6661:25" pos:end="6661:43">tcg_gen_qemu_ld_i64</name><argument_list pos:start="6661:44" pos:end="6663:65">(<argument pos:start="6661:45" pos:end="6661:57"><expr pos:start="6661:45" pos:end="6661:57"><name pos:start="6661:45" pos:end="6661:57"><name pos:start="6661:45" pos:end="6661:52">cpu_bndl</name><index pos:start="6661:53" pos:end="6661:57">[<expr pos:start="6661:54" pos:end="6661:56"><name pos:start="6661:54" pos:end="6661:56">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6661:60" pos:end="6661:65"><expr pos:start="6661:60" pos:end="6661:65"><name pos:start="6661:60" pos:end="6661:65">cpu_A0</name></expr></argument>,

                                            <argument pos:start="6663:45" pos:end="6663:56"><expr pos:start="6663:45" pos:end="6663:56"><name pos:start="6663:45" pos:end="6663:56"><name pos:start="6663:45" pos:end="6663:45">s</name><operator pos:start="6663:46" pos:end="6663:47">-&gt;</operator><name pos:start="6663:48" pos:end="6663:56">mem_index</name></name></expr></argument>, <argument pos:start="6663:59" pos:end="6663:64"><expr pos:start="6663:59" pos:end="6663:64"><name pos:start="6663:59" pos:end="6663:64">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6665:25" pos:end="6665:59"><expr pos:start="6665:25" pos:end="6665:58"><call pos:start="6665:25" pos:end="6665:58"><name pos:start="6665:25" pos:end="6665:39">tcg_gen_addi_tl</name><argument_list pos:start="6665:40" pos:end="6665:58">(<argument pos:start="6665:41" pos:end="6665:46"><expr pos:start="6665:41" pos:end="6665:46"><name pos:start="6665:41" pos:end="6665:46">cpu_A0</name></expr></argument>, <argument pos:start="6665:49" pos:end="6665:54"><expr pos:start="6665:49" pos:end="6665:54"><name pos:start="6665:49" pos:end="6665:54">cpu_A0</name></expr></argument>, <argument pos:start="6665:57" pos:end="6665:57"><expr pos:start="6665:57" pos:end="6665:57"><literal type="number" pos:start="6665:57" pos:end="6665:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6667:25" pos:end="6669:66"><expr pos:start="6667:25" pos:end="6669:65"><call pos:start="6667:25" pos:end="6669:65"><name pos:start="6667:25" pos:end="6667:43">tcg_gen_qemu_ld_i64</name><argument_list pos:start="6667:44" pos:end="6669:65">(<argument pos:start="6667:45" pos:end="6667:57"><expr pos:start="6667:45" pos:end="6667:57"><name pos:start="6667:45" pos:end="6667:57"><name pos:start="6667:45" pos:end="6667:52">cpu_bndu</name><index pos:start="6667:53" pos:end="6667:57">[<expr pos:start="6667:54" pos:end="6667:56"><name pos:start="6667:54" pos:end="6667:56">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6667:60" pos:end="6667:65"><expr pos:start="6667:60" pos:end="6667:65"><name pos:start="6667:60" pos:end="6667:65">cpu_A0</name></expr></argument>,

                                            <argument pos:start="6669:45" pos:end="6669:56"><expr pos:start="6669:45" pos:end="6669:56"><name pos:start="6669:45" pos:end="6669:56"><name pos:start="6669:45" pos:end="6669:45">s</name><operator pos:start="6669:46" pos:end="6669:47">-&gt;</operator><name pos:start="6669:48" pos:end="6669:56">mem_index</name></name></expr></argument>, <argument pos:start="6669:59" pos:end="6669:64"><expr pos:start="6669:59" pos:end="6669:64"><name pos:start="6669:59" pos:end="6669:64">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="6671:23" pos:end="6683:21">else <block pos:start="6671:28" pos:end="6683:21">{<block_content pos:start="6673:25" pos:end="6681:67">

                        <expr_stmt pos:start="6673:25" pos:end="6675:67"><expr pos:start="6673:25" pos:end="6675:66"><call pos:start="6673:25" pos:end="6675:66"><name pos:start="6673:25" pos:end="6673:43">tcg_gen_qemu_ld_i64</name><argument_list pos:start="6673:44" pos:end="6675:66">(<argument pos:start="6673:45" pos:end="6673:57"><expr pos:start="6673:45" pos:end="6673:57"><name pos:start="6673:45" pos:end="6673:57"><name pos:start="6673:45" pos:end="6673:52">cpu_bndl</name><index pos:start="6673:53" pos:end="6673:57">[<expr pos:start="6673:54" pos:end="6673:56"><name pos:start="6673:54" pos:end="6673:56">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6673:60" pos:end="6673:65"><expr pos:start="6673:60" pos:end="6673:65"><name pos:start="6673:60" pos:end="6673:65">cpu_A0</name></expr></argument>,

                                            <argument pos:start="6675:45" pos:end="6675:56"><expr pos:start="6675:45" pos:end="6675:56"><name pos:start="6675:45" pos:end="6675:56"><name pos:start="6675:45" pos:end="6675:45">s</name><operator pos:start="6675:46" pos:end="6675:47">-&gt;</operator><name pos:start="6675:48" pos:end="6675:56">mem_index</name></name></expr></argument>, <argument pos:start="6675:59" pos:end="6675:65"><expr pos:start="6675:59" pos:end="6675:65"><name pos:start="6675:59" pos:end="6675:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6677:25" pos:end="6677:59"><expr pos:start="6677:25" pos:end="6677:58"><call pos:start="6677:25" pos:end="6677:58"><name pos:start="6677:25" pos:end="6677:39">tcg_gen_addi_tl</name><argument_list pos:start="6677:40" pos:end="6677:58">(<argument pos:start="6677:41" pos:end="6677:46"><expr pos:start="6677:41" pos:end="6677:46"><name pos:start="6677:41" pos:end="6677:46">cpu_A0</name></expr></argument>, <argument pos:start="6677:49" pos:end="6677:54"><expr pos:start="6677:49" pos:end="6677:54"><name pos:start="6677:49" pos:end="6677:54">cpu_A0</name></expr></argument>, <argument pos:start="6677:57" pos:end="6677:57"><expr pos:start="6677:57" pos:end="6677:57"><literal type="number" pos:start="6677:57" pos:end="6677:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6679:25" pos:end="6681:67"><expr pos:start="6679:25" pos:end="6681:66"><call pos:start="6679:25" pos:end="6681:66"><name pos:start="6679:25" pos:end="6679:43">tcg_gen_qemu_ld_i64</name><argument_list pos:start="6679:44" pos:end="6681:66">(<argument pos:start="6679:45" pos:end="6679:57"><expr pos:start="6679:45" pos:end="6679:57"><name pos:start="6679:45" pos:end="6679:57"><name pos:start="6679:45" pos:end="6679:52">cpu_bndu</name><index pos:start="6679:53" pos:end="6679:57">[<expr pos:start="6679:54" pos:end="6679:56"><name pos:start="6679:54" pos:end="6679:56">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6679:60" pos:end="6679:65"><expr pos:start="6679:60" pos:end="6679:65"><name pos:start="6679:60" pos:end="6679:65">cpu_A0</name></expr></argument>,

                                            <argument pos:start="6681:45" pos:end="6681:56"><expr pos:start="6681:45" pos:end="6681:56"><name pos:start="6681:45" pos:end="6681:56"><name pos:start="6681:45" pos:end="6681:45">s</name><operator pos:start="6681:46" pos:end="6681:47">-&gt;</operator><name pos:start="6681:48" pos:end="6681:56">mem_index</name></name></expr></argument>, <argument pos:start="6681:59" pos:end="6681:65"><expr pos:start="6681:59" pos:end="6681:65"><name pos:start="6681:59" pos:end="6681:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <comment type="block" pos:start="6685:21" pos:end="6685:54">/* bnd registers are now in-use */</comment>

                    <expr_stmt pos:start="6687:21" pos:end="6687:53"><expr pos:start="6687:21" pos:end="6687:52"><call pos:start="6687:21" pos:end="6687:52"><name pos:start="6687:21" pos:end="6687:33">gen_set_hflag</name><argument_list pos:start="6687:34" pos:end="6687:52">(<argument pos:start="6687:35" pos:end="6687:35"><expr pos:start="6687:35" pos:end="6687:35"><name pos:start="6687:35" pos:end="6687:35">s</name></expr></argument>, <argument pos:start="6687:38" pos:end="6687:51"><expr pos:start="6687:38" pos:end="6687:51"><name pos:start="6687:38" pos:end="6687:51">HF_MPX_IU_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="6691:15" pos:end="6751:13">else if <condition pos:start="6691:23" pos:end="6691:32">(<expr pos:start="6691:24" pos:end="6691:31"><name pos:start="6691:24" pos:end="6691:26">mod</name> <operator pos:start="6691:28" pos:end="6691:29">!=</operator> <literal type="number" pos:start="6691:31" pos:end="6691:31">3</literal></expr>)</condition> <block pos:start="6691:34" pos:end="6751:13">{<block_content pos:start="6695:17" pos:end="6749:49">

                <comment type="block" pos:start="6693:17" pos:end="6693:28">/* bndldx */</comment>

                <decl_stmt pos:start="6695:17" pos:end="6695:64"><decl pos:start="6695:17" pos:end="6695:63"><type pos:start="6695:17" pos:end="6695:28"><name pos:start="6695:17" pos:end="6695:28">AddressParts</name></type> <name pos:start="6695:30" pos:end="6695:30">a</name> <init pos:start="6695:32" pos:end="6695:63">= <expr pos:start="6695:34" pos:end="6695:63"><call pos:start="6695:34" pos:end="6695:63"><name pos:start="6695:34" pos:end="6695:48">gen_lea_modrm_0</name><argument_list pos:start="6695:49" pos:end="6695:63">(<argument pos:start="6695:50" pos:end="6695:52"><expr pos:start="6695:50" pos:end="6695:52"><name pos:start="6695:50" pos:end="6695:52">env</name></expr></argument>, <argument pos:start="6695:55" pos:end="6695:55"><expr pos:start="6695:55" pos:end="6695:55"><name pos:start="6695:55" pos:end="6695:55">s</name></expr></argument>, <argument pos:start="6695:58" pos:end="6695:62"><expr pos:start="6695:58" pos:end="6695:62"><name pos:start="6695:58" pos:end="6695:62">modrm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="6697:17" pos:end="6707:17"><if pos:start="6697:17" pos:end="6707:17">if <condition pos:start="6697:20" pos:end="6703:35">(<expr pos:start="6697:21" pos:end="6703:34"><name pos:start="6697:21" pos:end="6697:23">reg</name> <operator pos:start="6697:25" pos:end="6697:26">&gt;=</operator> <literal type="number" pos:start="6697:28" pos:end="6697:28">4</literal>

                    <operator pos:start="6699:21" pos:end="6699:22">||</operator> <operator pos:start="6699:24" pos:end="6699:24">(</operator><name pos:start="6699:25" pos:end="6699:32">prefixes</name> <operator pos:start="6699:34" pos:end="6699:34">&amp;</operator> <name pos:start="6699:36" pos:end="6699:46">PREFIX_LOCK</name><operator pos:start="6699:47" pos:end="6699:47">)</operator>

                    <operator pos:start="6701:21" pos:end="6701:22">||</operator> <name pos:start="6701:24" pos:end="6701:31"><name pos:start="6701:24" pos:end="6701:24">s</name><operator pos:start="6701:25" pos:end="6701:26">-&gt;</operator><name pos:start="6701:27" pos:end="6701:31">aflag</name></name> <operator pos:start="6701:33" pos:end="6701:34">==</operator> <name pos:start="6701:36" pos:end="6701:40">MO_16</name>

                    <operator pos:start="6703:21" pos:end="6703:22">||</operator> <name pos:start="6703:24" pos:end="6703:29"><name pos:start="6703:24" pos:end="6703:24">a</name><operator pos:start="6703:25" pos:end="6703:25">.</operator><name pos:start="6703:26" pos:end="6703:29">base</name></name> <operator pos:start="6703:31" pos:end="6703:31">&lt;</operator> <operator pos:start="6703:33" pos:end="6703:33">-</operator><literal type="number" pos:start="6703:34" pos:end="6703:34">1</literal></expr>)</condition> <block pos:start="6703:37" pos:end="6707:17">{<block_content pos:start="6705:21" pos:end="6705:36">

                    <goto pos:start="6705:21" pos:end="6705:36">goto <name pos:start="6705:26" pos:end="6705:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="6709:17" pos:end="6717:17"><if pos:start="6709:17" pos:end="6713:17">if <condition pos:start="6709:20" pos:end="6709:32">(<expr pos:start="6709:21" pos:end="6709:31"><name pos:start="6709:21" pos:end="6709:26"><name pos:start="6709:21" pos:end="6709:21">a</name><operator pos:start="6709:22" pos:end="6709:22">.</operator><name pos:start="6709:23" pos:end="6709:26">base</name></name> <operator pos:start="6709:28" pos:end="6709:29">&gt;=</operator> <literal type="number" pos:start="6709:31" pos:end="6709:31">0</literal></expr>)</condition> <block pos:start="6709:34" pos:end="6713:17">{<block_content pos:start="6711:21" pos:end="6711:70">

                    <expr_stmt pos:start="6711:21" pos:end="6711:70"><expr pos:start="6711:21" pos:end="6711:69"><call pos:start="6711:21" pos:end="6711:69"><name pos:start="6711:21" pos:end="6711:35">tcg_gen_addi_tl</name><argument_list pos:start="6711:36" pos:end="6711:69">(<argument pos:start="6711:37" pos:end="6711:42"><expr pos:start="6711:37" pos:end="6711:42"><name pos:start="6711:37" pos:end="6711:42">cpu_A0</name></expr></argument>, <argument pos:start="6711:45" pos:end="6711:60"><expr pos:start="6711:45" pos:end="6711:60"><name pos:start="6711:45" pos:end="6711:60"><name pos:start="6711:45" pos:end="6711:52">cpu_regs</name><index pos:start="6711:53" pos:end="6711:60">[<expr pos:start="6711:54" pos:end="6711:59"><name pos:start="6711:54" pos:end="6711:59"><name pos:start="6711:54" pos:end="6711:54">a</name><operator pos:start="6711:55" pos:end="6711:55">.</operator><name pos:start="6711:56" pos:end="6711:59">base</name></name></expr>]</index></name></expr></argument>, <argument pos:start="6711:63" pos:end="6711:68"><expr pos:start="6711:63" pos:end="6711:68"><name pos:start="6711:63" pos:end="6711:68"><name pos:start="6711:63" pos:end="6711:63">a</name><operator pos:start="6711:64" pos:end="6711:64">.</operator><name pos:start="6711:65" pos:end="6711:68">disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6713:19" pos:end="6717:17">else <block pos:start="6713:24" pos:end="6717:17">{<block_content pos:start="6715:21" pos:end="6715:47">

                    <expr_stmt pos:start="6715:21" pos:end="6715:47"><expr pos:start="6715:21" pos:end="6715:46"><call pos:start="6715:21" pos:end="6715:46"><name pos:start="6715:21" pos:end="6715:35">tcg_gen_movi_tl</name><argument_list pos:start="6715:36" pos:end="6715:46">(<argument pos:start="6715:37" pos:end="6715:42"><expr pos:start="6715:37" pos:end="6715:42"><name pos:start="6715:37" pos:end="6715:42">cpu_A0</name></expr></argument>, <argument pos:start="6715:45" pos:end="6715:45"><expr pos:start="6715:45" pos:end="6715:45"><literal type="number" pos:start="6715:45" pos:end="6715:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="6719:17" pos:end="6719:75"><expr pos:start="6719:17" pos:end="6719:74"><call pos:start="6719:17" pos:end="6719:74"><name pos:start="6719:17" pos:end="6719:29">gen_lea_v_seg</name><argument_list pos:start="6719:30" pos:end="6719:74">(<argument pos:start="6719:31" pos:end="6719:31"><expr pos:start="6719:31" pos:end="6719:31"><name pos:start="6719:31" pos:end="6719:31">s</name></expr></argument>, <argument pos:start="6719:34" pos:end="6719:41"><expr pos:start="6719:34" pos:end="6719:41"><name pos:start="6719:34" pos:end="6719:41"><name pos:start="6719:34" pos:end="6719:34">s</name><operator pos:start="6719:35" pos:end="6719:36">-&gt;</operator><name pos:start="6719:37" pos:end="6719:41">aflag</name></name></expr></argument>, <argument pos:start="6719:44" pos:end="6719:49"><expr pos:start="6719:44" pos:end="6719:49"><name pos:start="6719:44" pos:end="6719:49">cpu_A0</name></expr></argument>, <argument pos:start="6719:52" pos:end="6719:60"><expr pos:start="6719:52" pos:end="6719:60"><name pos:start="6719:52" pos:end="6719:60"><name pos:start="6719:52" pos:end="6719:52">a</name><operator pos:start="6719:53" pos:end="6719:53">.</operator><name pos:start="6719:54" pos:end="6719:60">def_seg</name></name></expr></argument>, <argument pos:start="6719:63" pos:end="6719:73"><expr pos:start="6719:63" pos:end="6719:73"><name pos:start="6719:63" pos:end="6719:73"><name pos:start="6719:63" pos:end="6719:63">s</name><operator pos:start="6719:64" pos:end="6719:65">-&gt;</operator><name pos:start="6719:66" pos:end="6719:73">override</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6721:17" pos:end="6729:17"><if pos:start="6721:17" pos:end="6725:17">if <condition pos:start="6721:20" pos:end="6721:33">(<expr pos:start="6721:21" pos:end="6721:32"><name pos:start="6721:21" pos:end="6721:27"><name pos:start="6721:21" pos:end="6721:21">a</name><operator pos:start="6721:22" pos:end="6721:22">.</operator><name pos:start="6721:23" pos:end="6721:27">index</name></name> <operator pos:start="6721:29" pos:end="6721:30">&gt;=</operator> <literal type="number" pos:start="6721:32" pos:end="6721:32">0</literal></expr>)</condition> <block pos:start="6721:35" pos:end="6725:17">{<block_content pos:start="6723:21" pos:end="6723:62">

                    <expr_stmt pos:start="6723:21" pos:end="6723:62"><expr pos:start="6723:21" pos:end="6723:61"><call pos:start="6723:21" pos:end="6723:61"><name pos:start="6723:21" pos:end="6723:34">tcg_gen_mov_tl</name><argument_list pos:start="6723:35" pos:end="6723:61">(<argument pos:start="6723:36" pos:end="6723:41"><expr pos:start="6723:36" pos:end="6723:41"><name pos:start="6723:36" pos:end="6723:41">cpu_T0</name></expr></argument>, <argument pos:start="6723:44" pos:end="6723:60"><expr pos:start="6723:44" pos:end="6723:60"><name pos:start="6723:44" pos:end="6723:60"><name pos:start="6723:44" pos:end="6723:51">cpu_regs</name><index pos:start="6723:52" pos:end="6723:60">[<expr pos:start="6723:53" pos:end="6723:59"><name pos:start="6723:53" pos:end="6723:59"><name pos:start="6723:53" pos:end="6723:53">a</name><operator pos:start="6723:54" pos:end="6723:54">.</operator><name pos:start="6723:55" pos:end="6723:59">index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6725:19" pos:end="6729:17">else <block pos:start="6725:24" pos:end="6729:17">{<block_content pos:start="6727:21" pos:end="6727:47">

                    <expr_stmt pos:start="6727:21" pos:end="6727:47"><expr pos:start="6727:21" pos:end="6727:46"><call pos:start="6727:21" pos:end="6727:46"><name pos:start="6727:21" pos:end="6727:35">tcg_gen_movi_tl</name><argument_list pos:start="6727:36" pos:end="6727:46">(<argument pos:start="6727:37" pos:end="6727:42"><expr pos:start="6727:37" pos:end="6727:42"><name pos:start="6727:37" pos:end="6727:42">cpu_T0</name></expr></argument>, <argument pos:start="6727:45" pos:end="6727:45"><expr pos:start="6727:45" pos:end="6727:45"><literal type="number" pos:start="6727:45" pos:end="6727:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="6731:17" pos:end="6747:17"><if pos:start="6731:17" pos:end="6739:17">if <condition pos:start="6731:20" pos:end="6731:30">(<expr pos:start="6731:21" pos:end="6731:29"><call pos:start="6731:21" pos:end="6731:29"><name pos:start="6731:21" pos:end="6731:26">CODE64</name><argument_list pos:start="6731:27" pos:end="6731:29">(<argument pos:start="6731:28" pos:end="6731:28"><expr pos:start="6731:28" pos:end="6731:28"><name pos:start="6731:28" pos:end="6731:28">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6731:32" pos:end="6739:17">{<block_content pos:start="6733:21" pos:end="6737:75">

                    <expr_stmt pos:start="6733:21" pos:end="6733:80"><expr pos:start="6733:21" pos:end="6733:79"><call pos:start="6733:21" pos:end="6733:79"><name pos:start="6733:21" pos:end="6733:39">gen_helper_bndldx64</name><argument_list pos:start="6733:40" pos:end="6733:79">(<argument pos:start="6733:41" pos:end="6733:53"><expr pos:start="6733:41" pos:end="6733:53"><name pos:start="6733:41" pos:end="6733:53"><name pos:start="6733:41" pos:end="6733:48">cpu_bndl</name><index pos:start="6733:49" pos:end="6733:53">[<expr pos:start="6733:50" pos:end="6733:52"><name pos:start="6733:50" pos:end="6733:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6733:56" pos:end="6733:62"><expr pos:start="6733:56" pos:end="6733:62"><name pos:start="6733:56" pos:end="6733:62">cpu_env</name></expr></argument>, <argument pos:start="6733:65" pos:end="6733:70"><expr pos:start="6733:65" pos:end="6733:70"><name pos:start="6733:65" pos:end="6733:70">cpu_A0</name></expr></argument>, <argument pos:start="6733:73" pos:end="6733:78"><expr pos:start="6733:73" pos:end="6733:78"><name pos:start="6733:73" pos:end="6733:78">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6735:21" pos:end="6737:75"><expr pos:start="6735:21" pos:end="6737:74"><call pos:start="6735:21" pos:end="6737:74"><name pos:start="6735:21" pos:end="6735:34">tcg_gen_ld_i64</name><argument_list pos:start="6735:35" pos:end="6737:74">(<argument pos:start="6735:36" pos:end="6735:48"><expr pos:start="6735:36" pos:end="6735:48"><name pos:start="6735:36" pos:end="6735:48"><name pos:start="6735:36" pos:end="6735:43">cpu_bndu</name><index pos:start="6735:44" pos:end="6735:48">[<expr pos:start="6735:45" pos:end="6735:47"><name pos:start="6735:45" pos:end="6735:47">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6735:51" pos:end="6735:57"><expr pos:start="6735:51" pos:end="6735:57"><name pos:start="6735:51" pos:end="6735:57">cpu_env</name></expr></argument>,

                                   <argument pos:start="6737:36" pos:end="6737:73"><expr pos:start="6737:36" pos:end="6737:73"><call pos:start="6737:36" pos:end="6737:73"><name pos:start="6737:36" pos:end="6737:43">offsetof</name><argument_list pos:start="6737:44" pos:end="6737:73">(<argument pos:start="6737:45" pos:end="6737:55"><expr pos:start="6737:45" pos:end="6737:55"><name pos:start="6737:45" pos:end="6737:55">CPUX86State</name></expr></argument>, <argument pos:start="6737:58" pos:end="6737:72"><expr pos:start="6737:58" pos:end="6737:72"><call pos:start="6737:58" pos:end="6737:72"><name pos:start="6737:58" pos:end="6737:69"><name pos:start="6737:58" pos:end="6737:63">mmx_t0</name><operator pos:start="6737:64" pos:end="6737:64">.</operator><name pos:start="6737:65" pos:end="6737:69">MMX_Q</name></name><argument_list pos:start="6737:70" pos:end="6737:72">(<argument pos:start="6737:71" pos:end="6737:71"><expr pos:start="6737:71" pos:end="6737:71"><literal type="number" pos:start="6737:71" pos:end="6737:71">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6739:19" pos:end="6747:17">else <block pos:start="6739:24" pos:end="6747:17">{<block_content pos:start="6741:21" pos:end="6745:71">

                    <expr_stmt pos:start="6741:21" pos:end="6741:80"><expr pos:start="6741:21" pos:end="6741:79"><call pos:start="6741:21" pos:end="6741:79"><name pos:start="6741:21" pos:end="6741:39">gen_helper_bndldx32</name><argument_list pos:start="6741:40" pos:end="6741:79">(<argument pos:start="6741:41" pos:end="6741:53"><expr pos:start="6741:41" pos:end="6741:53"><name pos:start="6741:41" pos:end="6741:53"><name pos:start="6741:41" pos:end="6741:48">cpu_bndu</name><index pos:start="6741:49" pos:end="6741:53">[<expr pos:start="6741:50" pos:end="6741:52"><name pos:start="6741:50" pos:end="6741:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6741:56" pos:end="6741:62"><expr pos:start="6741:56" pos:end="6741:62"><name pos:start="6741:56" pos:end="6741:62">cpu_env</name></expr></argument>, <argument pos:start="6741:65" pos:end="6741:70"><expr pos:start="6741:65" pos:end="6741:70"><name pos:start="6741:65" pos:end="6741:70">cpu_A0</name></expr></argument>, <argument pos:start="6741:73" pos:end="6741:78"><expr pos:start="6741:73" pos:end="6741:78"><name pos:start="6741:73" pos:end="6741:78">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6743:21" pos:end="6743:69"><expr pos:start="6743:21" pos:end="6743:68"><call pos:start="6743:21" pos:end="6743:68"><name pos:start="6743:21" pos:end="6743:38">tcg_gen_ext32u_i64</name><argument_list pos:start="6743:39" pos:end="6743:68">(<argument pos:start="6743:40" pos:end="6743:52"><expr pos:start="6743:40" pos:end="6743:52"><name pos:start="6743:40" pos:end="6743:52"><name pos:start="6743:40" pos:end="6743:47">cpu_bndl</name><index pos:start="6743:48" pos:end="6743:52">[<expr pos:start="6743:49" pos:end="6743:51"><name pos:start="6743:49" pos:end="6743:51">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6743:55" pos:end="6743:67"><expr pos:start="6743:55" pos:end="6743:67"><name pos:start="6743:55" pos:end="6743:67"><name pos:start="6743:55" pos:end="6743:62">cpu_bndu</name><index pos:start="6743:63" pos:end="6743:67">[<expr pos:start="6743:64" pos:end="6743:66"><name pos:start="6743:64" pos:end="6743:66">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6745:21" pos:end="6745:71"><expr pos:start="6745:21" pos:end="6745:70"><call pos:start="6745:21" pos:end="6745:70"><name pos:start="6745:21" pos:end="6745:36">tcg_gen_shri_i64</name><argument_list pos:start="6745:37" pos:end="6745:70">(<argument pos:start="6745:38" pos:end="6745:50"><expr pos:start="6745:38" pos:end="6745:50"><name pos:start="6745:38" pos:end="6745:50"><name pos:start="6745:38" pos:end="6745:45">cpu_bndu</name><index pos:start="6745:46" pos:end="6745:50">[<expr pos:start="6745:47" pos:end="6745:49"><name pos:start="6745:47" pos:end="6745:49">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6745:53" pos:end="6745:65"><expr pos:start="6745:53" pos:end="6745:65"><name pos:start="6745:53" pos:end="6745:65"><name pos:start="6745:53" pos:end="6745:60">cpu_bndu</name><index pos:start="6745:61" pos:end="6745:65">[<expr pos:start="6745:62" pos:end="6745:64"><name pos:start="6745:62" pos:end="6745:64">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6745:68" pos:end="6745:69"><expr pos:start="6745:68" pos:end="6745:69"><literal type="number" pos:start="6745:68" pos:end="6745:69">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="6749:17" pos:end="6749:49"><expr pos:start="6749:17" pos:end="6749:48"><call pos:start="6749:17" pos:end="6749:48"><name pos:start="6749:17" pos:end="6749:29">gen_set_hflag</name><argument_list pos:start="6749:30" pos:end="6749:48">(<argument pos:start="6749:31" pos:end="6749:31"><expr pos:start="6749:31" pos:end="6749:31"><name pos:start="6749:31" pos:end="6749:31">s</name></expr></argument>, <argument pos:start="6749:34" pos:end="6749:47"><expr pos:start="6749:34" pos:end="6749:47"><name pos:start="6749:34" pos:end="6749:47">HF_MPX_IU_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6755:9" pos:end="6755:37"><expr pos:start="6755:9" pos:end="6755:36"><call pos:start="6755:9" pos:end="6755:36"><name pos:start="6755:9" pos:end="6755:21">gen_nop_modrm</name><argument_list pos:start="6755:22" pos:end="6755:36">(<argument pos:start="6755:23" pos:end="6755:25"><expr pos:start="6755:23" pos:end="6755:25"><name pos:start="6755:23" pos:end="6755:25">env</name></expr></argument>, <argument pos:start="6755:28" pos:end="6755:28"><expr pos:start="6755:28" pos:end="6755:28"><name pos:start="6755:28" pos:end="6755:28">s</name></expr></argument>, <argument pos:start="6755:31" pos:end="6755:35"><expr pos:start="6755:31" pos:end="6755:35"><name pos:start="6755:31" pos:end="6755:35">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6757:9" pos:end="6757:14">break;</break>

    <case pos:start="6759:5" pos:end="6759:15">case <expr pos:start="6759:10" pos:end="6759:14"><literal type="number" pos:start="6759:10" pos:end="6759:14">0x11b</literal></expr>:</case>

        <expr_stmt pos:start="6761:9" pos:end="6761:38"><expr pos:start="6761:9" pos:end="6761:37"><name pos:start="6761:9" pos:end="6761:13">modrm</name> <operator pos:start="6761:15" pos:end="6761:15">=</operator> <call pos:start="6761:17" pos:end="6761:37"><name pos:start="6761:17" pos:end="6761:29">x86_ldub_code</name><argument_list pos:start="6761:30" pos:end="6761:37">(<argument pos:start="6761:31" pos:end="6761:33"><expr pos:start="6761:31" pos:end="6761:33"><name pos:start="6761:31" pos:end="6761:33">env</name></expr></argument>, <argument pos:start="6761:36" pos:end="6761:36"><expr pos:start="6761:36" pos:end="6761:36"><name pos:start="6761:36" pos:end="6761:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6763:9" pos:end="6957:9"><if pos:start="6763:9" pos:end="6957:9">if <condition pos:start="6763:12" pos:end="6763:38">(<expr pos:start="6763:13" pos:end="6763:37"><name pos:start="6763:13" pos:end="6763:20"><name pos:start="6763:13" pos:end="6763:13">s</name><operator pos:start="6763:14" pos:end="6763:15">-&gt;</operator><name pos:start="6763:16" pos:end="6763:20">flags</name></name> <operator pos:start="6763:22" pos:end="6763:22">&amp;</operator> <name pos:start="6763:24" pos:end="6763:37">HF_MPX_EN_MASK</name></expr>)</condition> <block pos:start="6763:40" pos:end="6957:9">{<block_content pos:start="6765:13" pos:end="6955:13">

            <expr_stmt pos:start="6765:13" pos:end="6765:35"><expr pos:start="6765:13" pos:end="6765:34"><name pos:start="6765:13" pos:end="6765:15">mod</name> <operator pos:start="6765:17" pos:end="6765:17">=</operator> <operator pos:start="6765:19" pos:end="6765:19">(</operator><name pos:start="6765:20" pos:end="6765:24">modrm</name> <operator pos:start="6765:26" pos:end="6765:27">&gt;&gt;</operator> <literal type="number" pos:start="6765:29" pos:end="6765:29">6</literal><operator pos:start="6765:30" pos:end="6765:30">)</operator> <operator pos:start="6765:32" pos:end="6765:32">&amp;</operator> <literal type="number" pos:start="6765:34" pos:end="6765:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6767:13" pos:end="6767:45"><expr pos:start="6767:13" pos:end="6767:44"><name pos:start="6767:13" pos:end="6767:15">reg</name> <operator pos:start="6767:17" pos:end="6767:17">=</operator> <operator pos:start="6767:19" pos:end="6767:19">(</operator><operator pos:start="6767:20" pos:end="6767:20">(</operator><name pos:start="6767:21" pos:end="6767:25">modrm</name> <operator pos:start="6767:27" pos:end="6767:28">&gt;&gt;</operator> <literal type="number" pos:start="6767:30" pos:end="6767:30">3</literal><operator pos:start="6767:31" pos:end="6767:31">)</operator> <operator pos:start="6767:33" pos:end="6767:33">&amp;</operator> <literal type="number" pos:start="6767:35" pos:end="6767:35">7</literal><operator pos:start="6767:36" pos:end="6767:36">)</operator> <operator pos:start="6767:38" pos:end="6767:38">|</operator> <name pos:start="6767:40" pos:end="6767:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6769:13" pos:end="6955:13"><if pos:start="6769:13" pos:end="6825:13">if <condition pos:start="6769:16" pos:end="6769:53">(<expr pos:start="6769:17" pos:end="6769:52"><name pos:start="6769:17" pos:end="6769:19">mod</name> <operator pos:start="6769:21" pos:end="6769:22">!=</operator> <literal type="number" pos:start="6769:24" pos:end="6769:24">3</literal> <operator pos:start="6769:26" pos:end="6769:27">&amp;&amp;</operator> <operator pos:start="6769:29" pos:end="6769:29">(</operator><name pos:start="6769:30" pos:end="6769:37">prefixes</name> <operator pos:start="6769:39" pos:end="6769:39">&amp;</operator> <name pos:start="6769:41" pos:end="6769:51">PREFIX_REPZ</name><operator pos:start="6769:52" pos:end="6769:52">)</operator></expr>)</condition> <block pos:start="6769:55" pos:end="6825:13">{<block_content pos:start="6773:17" pos:end="6823:22">

                <comment type="block" pos:start="6771:17" pos:end="6771:27">/* bndmk */</comment>

                <if_stmt pos:start="6773:17" pos:end="6781:17"><if pos:start="6773:17" pos:end="6781:17">if <condition pos:start="6773:20" pos:end="6777:41">(<expr pos:start="6773:21" pos:end="6777:40"><name pos:start="6773:21" pos:end="6773:23">reg</name> <operator pos:start="6773:25" pos:end="6773:26">&gt;=</operator> <literal type="number" pos:start="6773:28" pos:end="6773:28">4</literal>

                    <operator pos:start="6775:21" pos:end="6775:22">||</operator> <operator pos:start="6775:24" pos:end="6775:24">(</operator><name pos:start="6775:25" pos:end="6775:32">prefixes</name> <operator pos:start="6775:34" pos:end="6775:34">&amp;</operator> <name pos:start="6775:36" pos:end="6775:46">PREFIX_LOCK</name><operator pos:start="6775:47" pos:end="6775:47">)</operator>

                    <operator pos:start="6777:21" pos:end="6777:22">||</operator> <name pos:start="6777:24" pos:end="6777:31"><name pos:start="6777:24" pos:end="6777:24">s</name><operator pos:start="6777:25" pos:end="6777:26">-&gt;</operator><name pos:start="6777:27" pos:end="6777:31">aflag</name></name> <operator pos:start="6777:33" pos:end="6777:34">==</operator> <name pos:start="6777:36" pos:end="6777:40">MO_16</name></expr>)</condition> <block pos:start="6777:43" pos:end="6781:17">{<block_content pos:start="6779:21" pos:end="6779:36">

                    <goto pos:start="6779:21" pos:end="6779:36">goto <name pos:start="6779:26" pos:end="6779:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <decl_stmt pos:start="6783:17" pos:end="6783:64"><decl pos:start="6783:17" pos:end="6783:63"><type pos:start="6783:17" pos:end="6783:28"><name pos:start="6783:17" pos:end="6783:28">AddressParts</name></type> <name pos:start="6783:30" pos:end="6783:30">a</name> <init pos:start="6783:32" pos:end="6783:63">= <expr pos:start="6783:34" pos:end="6783:63"><call pos:start="6783:34" pos:end="6783:63"><name pos:start="6783:34" pos:end="6783:48">gen_lea_modrm_0</name><argument_list pos:start="6783:49" pos:end="6783:63">(<argument pos:start="6783:50" pos:end="6783:52"><expr pos:start="6783:50" pos:end="6783:52"><name pos:start="6783:50" pos:end="6783:52">env</name></expr></argument>, <argument pos:start="6783:55" pos:end="6783:55"><expr pos:start="6783:55" pos:end="6783:55"><name pos:start="6783:55" pos:end="6783:55">s</name></expr></argument>, <argument pos:start="6783:58" pos:end="6783:62"><expr pos:start="6783:58" pos:end="6783:62"><name pos:start="6783:58" pos:end="6783:62">modrm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="6785:17" pos:end="6807:17"><if pos:start="6785:17" pos:end="6795:17">if <condition pos:start="6785:20" pos:end="6785:32">(<expr pos:start="6785:21" pos:end="6785:31"><name pos:start="6785:21" pos:end="6785:26"><name pos:start="6785:21" pos:end="6785:21">a</name><operator pos:start="6785:22" pos:end="6785:22">.</operator><name pos:start="6785:23" pos:end="6785:26">base</name></name> <operator pos:start="6785:28" pos:end="6785:29">&gt;=</operator> <literal type="number" pos:start="6785:31" pos:end="6785:31">0</literal></expr>)</condition> <block pos:start="6785:34" pos:end="6795:17">{<block_content pos:start="6787:21" pos:end="6793:21">

                    <expr_stmt pos:start="6787:21" pos:end="6787:73"><expr pos:start="6787:21" pos:end="6787:72"><call pos:start="6787:21" pos:end="6787:72"><name pos:start="6787:21" pos:end="6787:39">tcg_gen_extu_tl_i64</name><argument_list pos:start="6787:40" pos:end="6787:72">(<argument pos:start="6787:41" pos:end="6787:53"><expr pos:start="6787:41" pos:end="6787:53"><name pos:start="6787:41" pos:end="6787:53"><name pos:start="6787:41" pos:end="6787:48">cpu_bndl</name><index pos:start="6787:49" pos:end="6787:53">[<expr pos:start="6787:50" pos:end="6787:52"><name pos:start="6787:50" pos:end="6787:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6787:56" pos:end="6787:71"><expr pos:start="6787:56" pos:end="6787:71"><name pos:start="6787:56" pos:end="6787:71"><name pos:start="6787:56" pos:end="6787:63">cpu_regs</name><index pos:start="6787:64" pos:end="6787:71">[<expr pos:start="6787:65" pos:end="6787:70"><name pos:start="6787:65" pos:end="6787:70"><name pos:start="6787:65" pos:end="6787:65">a</name><operator pos:start="6787:66" pos:end="6787:66">.</operator><name pos:start="6787:67" pos:end="6787:70">base</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="6789:21" pos:end="6793:21"><if pos:start="6789:21" pos:end="6793:21">if <condition pos:start="6789:24" pos:end="6789:35">(<expr pos:start="6789:25" pos:end="6789:34"><operator pos:start="6789:25" pos:end="6789:25">!</operator><call pos:start="6789:26" pos:end="6789:34"><name pos:start="6789:26" pos:end="6789:31">CODE64</name><argument_list pos:start="6789:32" pos:end="6789:34">(<argument pos:start="6789:33" pos:end="6789:33"><expr pos:start="6789:33" pos:end="6789:33"><name pos:start="6789:33" pos:end="6789:33">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6789:37" pos:end="6793:21">{<block_content pos:start="6791:25" pos:end="6791:73">

                        <expr_stmt pos:start="6791:25" pos:end="6791:73"><expr pos:start="6791:25" pos:end="6791:72"><call pos:start="6791:25" pos:end="6791:72"><name pos:start="6791:25" pos:end="6791:42">tcg_gen_ext32u_i64</name><argument_list pos:start="6791:43" pos:end="6791:72">(<argument pos:start="6791:44" pos:end="6791:56"><expr pos:start="6791:44" pos:end="6791:56"><name pos:start="6791:44" pos:end="6791:56"><name pos:start="6791:44" pos:end="6791:51">cpu_bndl</name><index pos:start="6791:52" pos:end="6791:56">[<expr pos:start="6791:53" pos:end="6791:55"><name pos:start="6791:53" pos:end="6791:55">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6791:59" pos:end="6791:71"><expr pos:start="6791:59" pos:end="6791:71"><name pos:start="6791:59" pos:end="6791:71"><name pos:start="6791:59" pos:end="6791:66">cpu_bndl</name><index pos:start="6791:67" pos:end="6791:71">[<expr pos:start="6791:68" pos:end="6791:70"><name pos:start="6791:68" pos:end="6791:70">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="6795:19" pos:end="6801:17">else if <condition pos:start="6795:27" pos:end="6795:40">(<expr pos:start="6795:28" pos:end="6795:39"><name pos:start="6795:28" pos:end="6795:33"><name pos:start="6795:28" pos:end="6795:28">a</name><operator pos:start="6795:29" pos:end="6795:29">.</operator><name pos:start="6795:30" pos:end="6795:33">base</name></name> <operator pos:start="6795:35" pos:end="6795:36">==</operator> <operator pos:start="6795:38" pos:end="6795:38">-</operator><literal type="number" pos:start="6795:39" pos:end="6795:39">1</literal></expr>)</condition> <block pos:start="6795:42" pos:end="6801:17">{<block_content pos:start="6799:21" pos:end="6799:55">

                    <comment type="block" pos:start="6797:21" pos:end="6797:63">/* no base register has lower bound of 0 */</comment>

                    <expr_stmt pos:start="6799:21" pos:end="6799:55"><expr pos:start="6799:21" pos:end="6799:54"><call pos:start="6799:21" pos:end="6799:54"><name pos:start="6799:21" pos:end="6799:36">tcg_gen_movi_i64</name><argument_list pos:start="6799:37" pos:end="6799:54">(<argument pos:start="6799:38" pos:end="6799:50"><expr pos:start="6799:38" pos:end="6799:50"><name pos:start="6799:38" pos:end="6799:50"><name pos:start="6799:38" pos:end="6799:45">cpu_bndl</name><index pos:start="6799:46" pos:end="6799:50">[<expr pos:start="6799:47" pos:end="6799:49"><name pos:start="6799:47" pos:end="6799:49">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6799:53" pos:end="6799:53"><expr pos:start="6799:53" pos:end="6799:53"><literal type="number" pos:start="6799:53" pos:end="6799:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6801:19" pos:end="6807:17">else <block pos:start="6801:24" pos:end="6807:17">{<block_content pos:start="6805:21" pos:end="6805:36">

                    <comment type="block" pos:start="6803:21" pos:end="6803:52">/* rip-relative generates #ud */</comment>

                    <goto pos:start="6805:21" pos:end="6805:36">goto <name pos:start="6805:26" pos:end="6805:35">illegal_op</name>;</goto>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="6809:17" pos:end="6809:59"><expr pos:start="6809:17" pos:end="6809:58"><call pos:start="6809:17" pos:end="6809:58"><name pos:start="6809:17" pos:end="6809:30">tcg_gen_not_tl</name><argument_list pos:start="6809:31" pos:end="6809:58">(<argument pos:start="6809:32" pos:end="6809:37"><expr pos:start="6809:32" pos:end="6809:37"><name pos:start="6809:32" pos:end="6809:37">cpu_A0</name></expr></argument>, <argument pos:start="6809:40" pos:end="6809:57"><expr pos:start="6809:40" pos:end="6809:57"><call pos:start="6809:40" pos:end="6809:57"><name pos:start="6809:40" pos:end="6809:54">gen_lea_modrm_1</name><argument_list pos:start="6809:55" pos:end="6809:57">(<argument pos:start="6809:56" pos:end="6809:56"><expr pos:start="6809:56" pos:end="6809:56"><name pos:start="6809:56" pos:end="6809:56">a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6811:17" pos:end="6815:17"><if pos:start="6811:17" pos:end="6815:17">if <condition pos:start="6811:20" pos:end="6811:31">(<expr pos:start="6811:21" pos:end="6811:30"><operator pos:start="6811:21" pos:end="6811:21">!</operator><call pos:start="6811:22" pos:end="6811:30"><name pos:start="6811:22" pos:end="6811:27">CODE64</name><argument_list pos:start="6811:28" pos:end="6811:30">(<argument pos:start="6811:29" pos:end="6811:29"><expr pos:start="6811:29" pos:end="6811:29"><name pos:start="6811:29" pos:end="6811:29">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6811:33" pos:end="6815:17">{<block_content pos:start="6813:21" pos:end="6813:54">

                    <expr_stmt pos:start="6813:21" pos:end="6813:54"><expr pos:start="6813:21" pos:end="6813:53"><call pos:start="6813:21" pos:end="6813:53"><name pos:start="6813:21" pos:end="6813:37">tcg_gen_ext32u_tl</name><argument_list pos:start="6813:38" pos:end="6813:53">(<argument pos:start="6813:39" pos:end="6813:44"><expr pos:start="6813:39" pos:end="6813:44"><name pos:start="6813:39" pos:end="6813:44">cpu_A0</name></expr></argument>, <argument pos:start="6813:47" pos:end="6813:52"><expr pos:start="6813:47" pos:end="6813:52"><name pos:start="6813:47" pos:end="6813:52">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="6817:17" pos:end="6817:59"><expr pos:start="6817:17" pos:end="6817:58"><call pos:start="6817:17" pos:end="6817:58"><name pos:start="6817:17" pos:end="6817:35">tcg_gen_extu_tl_i64</name><argument_list pos:start="6817:36" pos:end="6817:58">(<argument pos:start="6817:37" pos:end="6817:49"><expr pos:start="6817:37" pos:end="6817:49"><name pos:start="6817:37" pos:end="6817:49"><name pos:start="6817:37" pos:end="6817:44">cpu_bndu</name><index pos:start="6817:45" pos:end="6817:49">[<expr pos:start="6817:46" pos:end="6817:48"><name pos:start="6817:46" pos:end="6817:48">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6817:52" pos:end="6817:57"><expr pos:start="6817:52" pos:end="6817:57"><name pos:start="6817:52" pos:end="6817:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="6819:17" pos:end="6819:50">/* bnd registers are now in-use */</comment>

                <expr_stmt pos:start="6821:17" pos:end="6821:49"><expr pos:start="6821:17" pos:end="6821:48"><call pos:start="6821:17" pos:end="6821:48"><name pos:start="6821:17" pos:end="6821:29">gen_set_hflag</name><argument_list pos:start="6821:30" pos:end="6821:48">(<argument pos:start="6821:31" pos:end="6821:31"><expr pos:start="6821:31" pos:end="6821:31"><name pos:start="6821:31" pos:end="6821:31">s</name></expr></argument>, <argument pos:start="6821:34" pos:end="6821:47"><expr pos:start="6821:34" pos:end="6821:47"><name pos:start="6821:34" pos:end="6821:47">HF_MPX_IU_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6823:17" pos:end="6823:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="6825:15" pos:end="6841:13">else if <condition pos:start="6825:23" pos:end="6825:47">(<expr pos:start="6825:24" pos:end="6825:46"><name pos:start="6825:24" pos:end="6825:31">prefixes</name> <operator pos:start="6825:33" pos:end="6825:33">&amp;</operator> <name pos:start="6825:35" pos:end="6825:46">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="6825:49" pos:end="6841:13">{<block_content pos:start="6829:17" pos:end="6839:70">

                <comment type="block" pos:start="6827:17" pos:end="6827:27">/* bndcn */</comment>

                <if_stmt pos:start="6829:17" pos:end="6837:17"><if pos:start="6829:17" pos:end="6837:17">if <condition pos:start="6829:20" pos:end="6833:41">(<expr pos:start="6829:21" pos:end="6833:40"><name pos:start="6829:21" pos:end="6829:23">reg</name> <operator pos:start="6829:25" pos:end="6829:26">&gt;=</operator> <literal type="number" pos:start="6829:28" pos:end="6829:28">4</literal>

                    <operator pos:start="6831:21" pos:end="6831:22">||</operator> <operator pos:start="6831:24" pos:end="6831:24">(</operator><name pos:start="6831:25" pos:end="6831:32">prefixes</name> <operator pos:start="6831:34" pos:end="6831:34">&amp;</operator> <name pos:start="6831:36" pos:end="6831:46">PREFIX_LOCK</name><operator pos:start="6831:47" pos:end="6831:47">)</operator>

                    <operator pos:start="6833:21" pos:end="6833:22">||</operator> <name pos:start="6833:24" pos:end="6833:31"><name pos:start="6833:24" pos:end="6833:24">s</name><operator pos:start="6833:25" pos:end="6833:26">-&gt;</operator><name pos:start="6833:27" pos:end="6833:31">aflag</name></name> <operator pos:start="6833:33" pos:end="6833:34">==</operator> <name pos:start="6833:36" pos:end="6833:40">MO_16</name></expr>)</condition> <block pos:start="6833:43" pos:end="6837:17">{<block_content pos:start="6835:21" pos:end="6835:36">

                    <goto pos:start="6835:21" pos:end="6835:36">goto <name pos:start="6835:26" pos:end="6835:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="6839:17" pos:end="6839:70"><expr pos:start="6839:17" pos:end="6839:69"><call pos:start="6839:17" pos:end="6839:69"><name pos:start="6839:17" pos:end="6839:25">gen_bndck</name><argument_list pos:start="6839:26" pos:end="6839:69">(<argument pos:start="6839:27" pos:end="6839:29"><expr pos:start="6839:27" pos:end="6839:29"><name pos:start="6839:27" pos:end="6839:29">env</name></expr></argument>, <argument pos:start="6839:32" pos:end="6839:32"><expr pos:start="6839:32" pos:end="6839:32"><name pos:start="6839:32" pos:end="6839:32">s</name></expr></argument>, <argument pos:start="6839:35" pos:end="6839:39"><expr pos:start="6839:35" pos:end="6839:39"><name pos:start="6839:35" pos:end="6839:39">modrm</name></expr></argument>, <argument pos:start="6839:42" pos:end="6839:53"><expr pos:start="6839:42" pos:end="6839:53"><name pos:start="6839:42" pos:end="6839:53">TCG_COND_GTU</name></expr></argument>, <argument pos:start="6839:56" pos:end="6839:68"><expr pos:start="6839:56" pos:end="6839:68"><name pos:start="6839:56" pos:end="6839:68"><name pos:start="6839:56" pos:end="6839:63">cpu_bndu</name><index pos:start="6839:64" pos:end="6839:68">[<expr pos:start="6839:65" pos:end="6839:67"><name pos:start="6839:65" pos:end="6839:67">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="6841:15" pos:end="6901:13">else if <condition pos:start="6841:23" pos:end="6841:46">(<expr pos:start="6841:24" pos:end="6841:45"><name pos:start="6841:24" pos:end="6841:31">prefixes</name> <operator pos:start="6841:33" pos:end="6841:33">&amp;</operator> <name pos:start="6841:35" pos:end="6841:45">PREFIX_DATA</name></expr>)</condition> <block pos:start="6841:48" pos:end="6901:13">{<block_content pos:start="6845:17" pos:end="6899:17">

                <comment type="block" pos:start="6843:17" pos:end="6843:42">/* bndmov -- to reg/mem */</comment>

                <if_stmt pos:start="6845:17" pos:end="6849:17"><if pos:start="6845:17" pos:end="6849:17">if <condition pos:start="6845:20" pos:end="6845:50">(<expr pos:start="6845:21" pos:end="6845:49"><name pos:start="6845:21" pos:end="6845:23">reg</name> <operator pos:start="6845:25" pos:end="6845:26">&gt;=</operator> <literal type="number" pos:start="6845:28" pos:end="6845:28">4</literal> <operator pos:start="6845:30" pos:end="6845:31">||</operator> <name pos:start="6845:33" pos:end="6845:40"><name pos:start="6845:33" pos:end="6845:33">s</name><operator pos:start="6845:34" pos:end="6845:35">-&gt;</operator><name pos:start="6845:36" pos:end="6845:40">aflag</name></name> <operator pos:start="6845:42" pos:end="6845:43">==</operator> <name pos:start="6845:45" pos:end="6845:49">MO_16</name></expr>)</condition> <block pos:start="6845:52" pos:end="6849:17">{<block_content pos:start="6847:21" pos:end="6847:36">

                    <goto pos:start="6847:21" pos:end="6847:36">goto <name pos:start="6847:26" pos:end="6847:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="6851:17" pos:end="6899:17"><if pos:start="6851:17" pos:end="6869:17">if <condition pos:start="6851:20" pos:end="6851:29">(<expr pos:start="6851:21" pos:end="6851:28"><name pos:start="6851:21" pos:end="6851:23">mod</name> <operator pos:start="6851:25" pos:end="6851:26">==</operator> <literal type="number" pos:start="6851:28" pos:end="6851:28">3</literal></expr>)</condition> <block pos:start="6851:31" pos:end="6869:17">{<block_content pos:start="6853:21" pos:end="6867:21">

                    <decl_stmt pos:start="6853:21" pos:end="6853:54"><decl pos:start="6853:21" pos:end="6853:53"><type pos:start="6853:21" pos:end="6853:23"><name pos:start="6853:21" pos:end="6853:23">int</name></type> <name pos:start="6853:25" pos:end="6853:28">reg2</name> <init pos:start="6853:30" pos:end="6853:53">= <expr pos:start="6853:32" pos:end="6853:53"><operator pos:start="6853:32" pos:end="6853:32">(</operator><name pos:start="6853:33" pos:end="6853:37">modrm</name> <operator pos:start="6853:39" pos:end="6853:39">&amp;</operator> <literal type="number" pos:start="6853:41" pos:end="6853:41">7</literal><operator pos:start="6853:42" pos:end="6853:42">)</operator> <operator pos:start="6853:44" pos:end="6853:44">|</operator> <call pos:start="6853:46" pos:end="6853:53"><name pos:start="6853:46" pos:end="6853:50">REX_B</name><argument_list pos:start="6853:51" pos:end="6853:53">(<argument pos:start="6853:52" pos:end="6853:52"><expr pos:start="6853:52" pos:end="6853:52"><name pos:start="6853:52" pos:end="6853:52">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="6855:21" pos:end="6859:21"><if pos:start="6855:21" pos:end="6859:21">if <condition pos:start="6855:24" pos:end="6855:62">(<expr pos:start="6855:25" pos:end="6855:61"><name pos:start="6855:25" pos:end="6855:28">reg2</name> <operator pos:start="6855:30" pos:end="6855:31">&gt;=</operator> <literal type="number" pos:start="6855:33" pos:end="6855:33">4</literal> <operator pos:start="6855:35" pos:end="6855:36">||</operator> <operator pos:start="6855:38" pos:end="6855:38">(</operator><name pos:start="6855:39" pos:end="6855:46">prefixes</name> <operator pos:start="6855:48" pos:end="6855:48">&amp;</operator> <name pos:start="6855:50" pos:end="6855:60">PREFIX_LOCK</name><operator pos:start="6855:61" pos:end="6855:61">)</operator></expr>)</condition> <block pos:start="6855:64" pos:end="6859:21">{<block_content pos:start="6857:25" pos:end="6857:40">

                        <goto pos:start="6857:25" pos:end="6857:40">goto <name pos:start="6857:30" pos:end="6857:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="6861:21" pos:end="6867:21"><if pos:start="6861:21" pos:end="6867:21">if <condition pos:start="6861:24" pos:end="6861:50">(<expr pos:start="6861:25" pos:end="6861:49"><name pos:start="6861:25" pos:end="6861:32"><name pos:start="6861:25" pos:end="6861:25">s</name><operator pos:start="6861:26" pos:end="6861:27">-&gt;</operator><name pos:start="6861:28" pos:end="6861:32">flags</name></name> <operator pos:start="6861:34" pos:end="6861:34">&amp;</operator> <name pos:start="6861:36" pos:end="6861:49">HF_MPX_IU_MASK</name></expr>)</condition> <block pos:start="6861:52" pos:end="6867:21">{<block_content pos:start="6863:25" pos:end="6865:71">

                        <expr_stmt pos:start="6863:25" pos:end="6863:71"><expr pos:start="6863:25" pos:end="6863:70"><call pos:start="6863:25" pos:end="6863:70"><name pos:start="6863:25" pos:end="6863:39">tcg_gen_mov_i64</name><argument_list pos:start="6863:40" pos:end="6863:70">(<argument pos:start="6863:41" pos:end="6863:54"><expr pos:start="6863:41" pos:end="6863:54"><name pos:start="6863:41" pos:end="6863:54"><name pos:start="6863:41" pos:end="6863:48">cpu_bndl</name><index pos:start="6863:49" pos:end="6863:54">[<expr pos:start="6863:50" pos:end="6863:53"><name pos:start="6863:50" pos:end="6863:53">reg2</name></expr>]</index></name></expr></argument>, <argument pos:start="6863:57" pos:end="6863:69"><expr pos:start="6863:57" pos:end="6863:69"><name pos:start="6863:57" pos:end="6863:69"><name pos:start="6863:57" pos:end="6863:64">cpu_bndl</name><index pos:start="6863:65" pos:end="6863:69">[<expr pos:start="6863:66" pos:end="6863:68"><name pos:start="6863:66" pos:end="6863:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6865:25" pos:end="6865:71"><expr pos:start="6865:25" pos:end="6865:70"><call pos:start="6865:25" pos:end="6865:70"><name pos:start="6865:25" pos:end="6865:39">tcg_gen_mov_i64</name><argument_list pos:start="6865:40" pos:end="6865:70">(<argument pos:start="6865:41" pos:end="6865:54"><expr pos:start="6865:41" pos:end="6865:54"><name pos:start="6865:41" pos:end="6865:54"><name pos:start="6865:41" pos:end="6865:48">cpu_bndu</name><index pos:start="6865:49" pos:end="6865:54">[<expr pos:start="6865:50" pos:end="6865:53"><name pos:start="6865:50" pos:end="6865:53">reg2</name></expr>]</index></name></expr></argument>, <argument pos:start="6865:57" pos:end="6865:69"><expr pos:start="6865:57" pos:end="6865:69"><name pos:start="6865:57" pos:end="6865:69"><name pos:start="6865:57" pos:end="6865:64">cpu_bndu</name><index pos:start="6865:65" pos:end="6865:69">[<expr pos:start="6865:66" pos:end="6865:68"><name pos:start="6865:66" pos:end="6865:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="6869:19" pos:end="6899:17">else <block pos:start="6869:24" pos:end="6899:17">{<block_content pos:start="6871:21" pos:end="6897:21">

                    <expr_stmt pos:start="6871:21" pos:end="6871:49"><expr pos:start="6871:21" pos:end="6871:48"><call pos:start="6871:21" pos:end="6871:48"><name pos:start="6871:21" pos:end="6871:33">gen_lea_modrm</name><argument_list pos:start="6871:34" pos:end="6871:48">(<argument pos:start="6871:35" pos:end="6871:37"><expr pos:start="6871:35" pos:end="6871:37"><name pos:start="6871:35" pos:end="6871:37">env</name></expr></argument>, <argument pos:start="6871:40" pos:end="6871:40"><expr pos:start="6871:40" pos:end="6871:40"><name pos:start="6871:40" pos:end="6871:40">s</name></expr></argument>, <argument pos:start="6871:43" pos:end="6871:47"><expr pos:start="6871:43" pos:end="6871:47"><name pos:start="6871:43" pos:end="6871:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="6873:21" pos:end="6897:21"><if pos:start="6873:21" pos:end="6885:21">if <condition pos:start="6873:24" pos:end="6873:34">(<expr pos:start="6873:25" pos:end="6873:33"><call pos:start="6873:25" pos:end="6873:33"><name pos:start="6873:25" pos:end="6873:30">CODE64</name><argument_list pos:start="6873:31" pos:end="6873:33">(<argument pos:start="6873:32" pos:end="6873:32"><expr pos:start="6873:32" pos:end="6873:32"><name pos:start="6873:32" pos:end="6873:32">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6873:36" pos:end="6885:21">{<block_content pos:start="6875:25" pos:end="6883:66">

                        <expr_stmt pos:start="6875:25" pos:end="6877:66"><expr pos:start="6875:25" pos:end="6877:65"><call pos:start="6875:25" pos:end="6877:65"><name pos:start="6875:25" pos:end="6875:43">tcg_gen_qemu_st_i64</name><argument_list pos:start="6875:44" pos:end="6877:65">(<argument pos:start="6875:45" pos:end="6875:57"><expr pos:start="6875:45" pos:end="6875:57"><name pos:start="6875:45" pos:end="6875:57"><name pos:start="6875:45" pos:end="6875:52">cpu_bndl</name><index pos:start="6875:53" pos:end="6875:57">[<expr pos:start="6875:54" pos:end="6875:56"><name pos:start="6875:54" pos:end="6875:56">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6875:60" pos:end="6875:65"><expr pos:start="6875:60" pos:end="6875:65"><name pos:start="6875:60" pos:end="6875:65">cpu_A0</name></expr></argument>,

                                            <argument pos:start="6877:45" pos:end="6877:56"><expr pos:start="6877:45" pos:end="6877:56"><name pos:start="6877:45" pos:end="6877:56"><name pos:start="6877:45" pos:end="6877:45">s</name><operator pos:start="6877:46" pos:end="6877:47">-&gt;</operator><name pos:start="6877:48" pos:end="6877:56">mem_index</name></name></expr></argument>, <argument pos:start="6877:59" pos:end="6877:64"><expr pos:start="6877:59" pos:end="6877:64"><name pos:start="6877:59" pos:end="6877:64">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6879:25" pos:end="6879:59"><expr pos:start="6879:25" pos:end="6879:58"><call pos:start="6879:25" pos:end="6879:58"><name pos:start="6879:25" pos:end="6879:39">tcg_gen_addi_tl</name><argument_list pos:start="6879:40" pos:end="6879:58">(<argument pos:start="6879:41" pos:end="6879:46"><expr pos:start="6879:41" pos:end="6879:46"><name pos:start="6879:41" pos:end="6879:46">cpu_A0</name></expr></argument>, <argument pos:start="6879:49" pos:end="6879:54"><expr pos:start="6879:49" pos:end="6879:54"><name pos:start="6879:49" pos:end="6879:54">cpu_A0</name></expr></argument>, <argument pos:start="6879:57" pos:end="6879:57"><expr pos:start="6879:57" pos:end="6879:57"><literal type="number" pos:start="6879:57" pos:end="6879:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6881:25" pos:end="6883:66"><expr pos:start="6881:25" pos:end="6883:65"><call pos:start="6881:25" pos:end="6883:65"><name pos:start="6881:25" pos:end="6881:43">tcg_gen_qemu_st_i64</name><argument_list pos:start="6881:44" pos:end="6883:65">(<argument pos:start="6881:45" pos:end="6881:57"><expr pos:start="6881:45" pos:end="6881:57"><name pos:start="6881:45" pos:end="6881:57"><name pos:start="6881:45" pos:end="6881:52">cpu_bndu</name><index pos:start="6881:53" pos:end="6881:57">[<expr pos:start="6881:54" pos:end="6881:56"><name pos:start="6881:54" pos:end="6881:56">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6881:60" pos:end="6881:65"><expr pos:start="6881:60" pos:end="6881:65"><name pos:start="6881:60" pos:end="6881:65">cpu_A0</name></expr></argument>,

                                            <argument pos:start="6883:45" pos:end="6883:56"><expr pos:start="6883:45" pos:end="6883:56"><name pos:start="6883:45" pos:end="6883:56"><name pos:start="6883:45" pos:end="6883:45">s</name><operator pos:start="6883:46" pos:end="6883:47">-&gt;</operator><name pos:start="6883:48" pos:end="6883:56">mem_index</name></name></expr></argument>, <argument pos:start="6883:59" pos:end="6883:64"><expr pos:start="6883:59" pos:end="6883:64"><name pos:start="6883:59" pos:end="6883:64">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="6885:23" pos:end="6897:21">else <block pos:start="6885:28" pos:end="6897:21">{<block_content pos:start="6887:25" pos:end="6895:67">

                        <expr_stmt pos:start="6887:25" pos:end="6889:67"><expr pos:start="6887:25" pos:end="6889:66"><call pos:start="6887:25" pos:end="6889:66"><name pos:start="6887:25" pos:end="6887:43">tcg_gen_qemu_st_i64</name><argument_list pos:start="6887:44" pos:end="6889:66">(<argument pos:start="6887:45" pos:end="6887:57"><expr pos:start="6887:45" pos:end="6887:57"><name pos:start="6887:45" pos:end="6887:57"><name pos:start="6887:45" pos:end="6887:52">cpu_bndl</name><index pos:start="6887:53" pos:end="6887:57">[<expr pos:start="6887:54" pos:end="6887:56"><name pos:start="6887:54" pos:end="6887:56">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6887:60" pos:end="6887:65"><expr pos:start="6887:60" pos:end="6887:65"><name pos:start="6887:60" pos:end="6887:65">cpu_A0</name></expr></argument>,

                                            <argument pos:start="6889:45" pos:end="6889:56"><expr pos:start="6889:45" pos:end="6889:56"><name pos:start="6889:45" pos:end="6889:56"><name pos:start="6889:45" pos:end="6889:45">s</name><operator pos:start="6889:46" pos:end="6889:47">-&gt;</operator><name pos:start="6889:48" pos:end="6889:56">mem_index</name></name></expr></argument>, <argument pos:start="6889:59" pos:end="6889:65"><expr pos:start="6889:59" pos:end="6889:65"><name pos:start="6889:59" pos:end="6889:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6891:25" pos:end="6891:59"><expr pos:start="6891:25" pos:end="6891:58"><call pos:start="6891:25" pos:end="6891:58"><name pos:start="6891:25" pos:end="6891:39">tcg_gen_addi_tl</name><argument_list pos:start="6891:40" pos:end="6891:58">(<argument pos:start="6891:41" pos:end="6891:46"><expr pos:start="6891:41" pos:end="6891:46"><name pos:start="6891:41" pos:end="6891:46">cpu_A0</name></expr></argument>, <argument pos:start="6891:49" pos:end="6891:54"><expr pos:start="6891:49" pos:end="6891:54"><name pos:start="6891:49" pos:end="6891:54">cpu_A0</name></expr></argument>, <argument pos:start="6891:57" pos:end="6891:57"><expr pos:start="6891:57" pos:end="6891:57"><literal type="number" pos:start="6891:57" pos:end="6891:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6893:25" pos:end="6895:67"><expr pos:start="6893:25" pos:end="6895:66"><call pos:start="6893:25" pos:end="6895:66"><name pos:start="6893:25" pos:end="6893:43">tcg_gen_qemu_st_i64</name><argument_list pos:start="6893:44" pos:end="6895:66">(<argument pos:start="6893:45" pos:end="6893:57"><expr pos:start="6893:45" pos:end="6893:57"><name pos:start="6893:45" pos:end="6893:57"><name pos:start="6893:45" pos:end="6893:52">cpu_bndu</name><index pos:start="6893:53" pos:end="6893:57">[<expr pos:start="6893:54" pos:end="6893:56"><name pos:start="6893:54" pos:end="6893:56">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6893:60" pos:end="6893:65"><expr pos:start="6893:60" pos:end="6893:65"><name pos:start="6893:60" pos:end="6893:65">cpu_A0</name></expr></argument>,

                                            <argument pos:start="6895:45" pos:end="6895:56"><expr pos:start="6895:45" pos:end="6895:56"><name pos:start="6895:45" pos:end="6895:56"><name pos:start="6895:45" pos:end="6895:45">s</name><operator pos:start="6895:46" pos:end="6895:47">-&gt;</operator><name pos:start="6895:48" pos:end="6895:56">mem_index</name></name></expr></argument>, <argument pos:start="6895:59" pos:end="6895:65"><expr pos:start="6895:59" pos:end="6895:65"><name pos:start="6895:59" pos:end="6895:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="6901:15" pos:end="6955:13">else if <condition pos:start="6901:23" pos:end="6901:32">(<expr pos:start="6901:24" pos:end="6901:31"><name pos:start="6901:24" pos:end="6901:26">mod</name> <operator pos:start="6901:28" pos:end="6901:29">!=</operator> <literal type="number" pos:start="6901:31" pos:end="6901:31">3</literal></expr>)</condition> <block pos:start="6901:34" pos:end="6955:13">{<block_content pos:start="6905:17" pos:end="6953:17">

                <comment type="block" pos:start="6903:17" pos:end="6903:28">/* bndstx */</comment>

                <decl_stmt pos:start="6905:17" pos:end="6905:64"><decl pos:start="6905:17" pos:end="6905:63"><type pos:start="6905:17" pos:end="6905:28"><name pos:start="6905:17" pos:end="6905:28">AddressParts</name></type> <name pos:start="6905:30" pos:end="6905:30">a</name> <init pos:start="6905:32" pos:end="6905:63">= <expr pos:start="6905:34" pos:end="6905:63"><call pos:start="6905:34" pos:end="6905:63"><name pos:start="6905:34" pos:end="6905:48">gen_lea_modrm_0</name><argument_list pos:start="6905:49" pos:end="6905:63">(<argument pos:start="6905:50" pos:end="6905:52"><expr pos:start="6905:50" pos:end="6905:52"><name pos:start="6905:50" pos:end="6905:52">env</name></expr></argument>, <argument pos:start="6905:55" pos:end="6905:55"><expr pos:start="6905:55" pos:end="6905:55"><name pos:start="6905:55" pos:end="6905:55">s</name></expr></argument>, <argument pos:start="6905:58" pos:end="6905:62"><expr pos:start="6905:58" pos:end="6905:62"><name pos:start="6905:58" pos:end="6905:62">modrm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="6907:17" pos:end="6917:17"><if pos:start="6907:17" pos:end="6917:17">if <condition pos:start="6907:20" pos:end="6913:35">(<expr pos:start="6907:21" pos:end="6913:34"><name pos:start="6907:21" pos:end="6907:23">reg</name> <operator pos:start="6907:25" pos:end="6907:26">&gt;=</operator> <literal type="number" pos:start="6907:28" pos:end="6907:28">4</literal>

                    <operator pos:start="6909:21" pos:end="6909:22">||</operator> <operator pos:start="6909:24" pos:end="6909:24">(</operator><name pos:start="6909:25" pos:end="6909:32">prefixes</name> <operator pos:start="6909:34" pos:end="6909:34">&amp;</operator> <name pos:start="6909:36" pos:end="6909:46">PREFIX_LOCK</name><operator pos:start="6909:47" pos:end="6909:47">)</operator>

                    <operator pos:start="6911:21" pos:end="6911:22">||</operator> <name pos:start="6911:24" pos:end="6911:31"><name pos:start="6911:24" pos:end="6911:24">s</name><operator pos:start="6911:25" pos:end="6911:26">-&gt;</operator><name pos:start="6911:27" pos:end="6911:31">aflag</name></name> <operator pos:start="6911:33" pos:end="6911:34">==</operator> <name pos:start="6911:36" pos:end="6911:40">MO_16</name>

                    <operator pos:start="6913:21" pos:end="6913:22">||</operator> <name pos:start="6913:24" pos:end="6913:29"><name pos:start="6913:24" pos:end="6913:24">a</name><operator pos:start="6913:25" pos:end="6913:25">.</operator><name pos:start="6913:26" pos:end="6913:29">base</name></name> <operator pos:start="6913:31" pos:end="6913:31">&lt;</operator> <operator pos:start="6913:33" pos:end="6913:33">-</operator><literal type="number" pos:start="6913:34" pos:end="6913:34">1</literal></expr>)</condition> <block pos:start="6913:37" pos:end="6917:17">{<block_content pos:start="6915:21" pos:end="6915:36">

                    <goto pos:start="6915:21" pos:end="6915:36">goto <name pos:start="6915:26" pos:end="6915:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="6919:17" pos:end="6927:17"><if pos:start="6919:17" pos:end="6923:17">if <condition pos:start="6919:20" pos:end="6919:32">(<expr pos:start="6919:21" pos:end="6919:31"><name pos:start="6919:21" pos:end="6919:26"><name pos:start="6919:21" pos:end="6919:21">a</name><operator pos:start="6919:22" pos:end="6919:22">.</operator><name pos:start="6919:23" pos:end="6919:26">base</name></name> <operator pos:start="6919:28" pos:end="6919:29">&gt;=</operator> <literal type="number" pos:start="6919:31" pos:end="6919:31">0</literal></expr>)</condition> <block pos:start="6919:34" pos:end="6923:17">{<block_content pos:start="6921:21" pos:end="6921:70">

                    <expr_stmt pos:start="6921:21" pos:end="6921:70"><expr pos:start="6921:21" pos:end="6921:69"><call pos:start="6921:21" pos:end="6921:69"><name pos:start="6921:21" pos:end="6921:35">tcg_gen_addi_tl</name><argument_list pos:start="6921:36" pos:end="6921:69">(<argument pos:start="6921:37" pos:end="6921:42"><expr pos:start="6921:37" pos:end="6921:42"><name pos:start="6921:37" pos:end="6921:42">cpu_A0</name></expr></argument>, <argument pos:start="6921:45" pos:end="6921:60"><expr pos:start="6921:45" pos:end="6921:60"><name pos:start="6921:45" pos:end="6921:60"><name pos:start="6921:45" pos:end="6921:52">cpu_regs</name><index pos:start="6921:53" pos:end="6921:60">[<expr pos:start="6921:54" pos:end="6921:59"><name pos:start="6921:54" pos:end="6921:59"><name pos:start="6921:54" pos:end="6921:54">a</name><operator pos:start="6921:55" pos:end="6921:55">.</operator><name pos:start="6921:56" pos:end="6921:59">base</name></name></expr>]</index></name></expr></argument>, <argument pos:start="6921:63" pos:end="6921:68"><expr pos:start="6921:63" pos:end="6921:68"><name pos:start="6921:63" pos:end="6921:68"><name pos:start="6921:63" pos:end="6921:63">a</name><operator pos:start="6921:64" pos:end="6921:64">.</operator><name pos:start="6921:65" pos:end="6921:68">disp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6923:19" pos:end="6927:17">else <block pos:start="6923:24" pos:end="6927:17">{<block_content pos:start="6925:21" pos:end="6925:47">

                    <expr_stmt pos:start="6925:21" pos:end="6925:47"><expr pos:start="6925:21" pos:end="6925:46"><call pos:start="6925:21" pos:end="6925:46"><name pos:start="6925:21" pos:end="6925:35">tcg_gen_movi_tl</name><argument_list pos:start="6925:36" pos:end="6925:46">(<argument pos:start="6925:37" pos:end="6925:42"><expr pos:start="6925:37" pos:end="6925:42"><name pos:start="6925:37" pos:end="6925:42">cpu_A0</name></expr></argument>, <argument pos:start="6925:45" pos:end="6925:45"><expr pos:start="6925:45" pos:end="6925:45"><literal type="number" pos:start="6925:45" pos:end="6925:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="6929:17" pos:end="6929:75"><expr pos:start="6929:17" pos:end="6929:74"><call pos:start="6929:17" pos:end="6929:74"><name pos:start="6929:17" pos:end="6929:29">gen_lea_v_seg</name><argument_list pos:start="6929:30" pos:end="6929:74">(<argument pos:start="6929:31" pos:end="6929:31"><expr pos:start="6929:31" pos:end="6929:31"><name pos:start="6929:31" pos:end="6929:31">s</name></expr></argument>, <argument pos:start="6929:34" pos:end="6929:41"><expr pos:start="6929:34" pos:end="6929:41"><name pos:start="6929:34" pos:end="6929:41"><name pos:start="6929:34" pos:end="6929:34">s</name><operator pos:start="6929:35" pos:end="6929:36">-&gt;</operator><name pos:start="6929:37" pos:end="6929:41">aflag</name></name></expr></argument>, <argument pos:start="6929:44" pos:end="6929:49"><expr pos:start="6929:44" pos:end="6929:49"><name pos:start="6929:44" pos:end="6929:49">cpu_A0</name></expr></argument>, <argument pos:start="6929:52" pos:end="6929:60"><expr pos:start="6929:52" pos:end="6929:60"><name pos:start="6929:52" pos:end="6929:60"><name pos:start="6929:52" pos:end="6929:52">a</name><operator pos:start="6929:53" pos:end="6929:53">.</operator><name pos:start="6929:54" pos:end="6929:60">def_seg</name></name></expr></argument>, <argument pos:start="6929:63" pos:end="6929:73"><expr pos:start="6929:63" pos:end="6929:73"><name pos:start="6929:63" pos:end="6929:73"><name pos:start="6929:63" pos:end="6929:63">s</name><operator pos:start="6929:64" pos:end="6929:65">-&gt;</operator><name pos:start="6929:66" pos:end="6929:73">override</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6931:17" pos:end="6939:17"><if pos:start="6931:17" pos:end="6935:17">if <condition pos:start="6931:20" pos:end="6931:33">(<expr pos:start="6931:21" pos:end="6931:32"><name pos:start="6931:21" pos:end="6931:27"><name pos:start="6931:21" pos:end="6931:21">a</name><operator pos:start="6931:22" pos:end="6931:22">.</operator><name pos:start="6931:23" pos:end="6931:27">index</name></name> <operator pos:start="6931:29" pos:end="6931:30">&gt;=</operator> <literal type="number" pos:start="6931:32" pos:end="6931:32">0</literal></expr>)</condition> <block pos:start="6931:35" pos:end="6935:17">{<block_content pos:start="6933:21" pos:end="6933:62">

                    <expr_stmt pos:start="6933:21" pos:end="6933:62"><expr pos:start="6933:21" pos:end="6933:61"><call pos:start="6933:21" pos:end="6933:61"><name pos:start="6933:21" pos:end="6933:34">tcg_gen_mov_tl</name><argument_list pos:start="6933:35" pos:end="6933:61">(<argument pos:start="6933:36" pos:end="6933:41"><expr pos:start="6933:36" pos:end="6933:41"><name pos:start="6933:36" pos:end="6933:41">cpu_T0</name></expr></argument>, <argument pos:start="6933:44" pos:end="6933:60"><expr pos:start="6933:44" pos:end="6933:60"><name pos:start="6933:44" pos:end="6933:60"><name pos:start="6933:44" pos:end="6933:51">cpu_regs</name><index pos:start="6933:52" pos:end="6933:60">[<expr pos:start="6933:53" pos:end="6933:59"><name pos:start="6933:53" pos:end="6933:59"><name pos:start="6933:53" pos:end="6933:53">a</name><operator pos:start="6933:54" pos:end="6933:54">.</operator><name pos:start="6933:55" pos:end="6933:59">index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6935:19" pos:end="6939:17">else <block pos:start="6935:24" pos:end="6939:17">{<block_content pos:start="6937:21" pos:end="6937:47">

                    <expr_stmt pos:start="6937:21" pos:end="6937:47"><expr pos:start="6937:21" pos:end="6937:46"><call pos:start="6937:21" pos:end="6937:46"><name pos:start="6937:21" pos:end="6937:35">tcg_gen_movi_tl</name><argument_list pos:start="6937:36" pos:end="6937:46">(<argument pos:start="6937:37" pos:end="6937:42"><expr pos:start="6937:37" pos:end="6937:42"><name pos:start="6937:37" pos:end="6937:42">cpu_T0</name></expr></argument>, <argument pos:start="6937:45" pos:end="6937:45"><expr pos:start="6937:45" pos:end="6937:45"><literal type="number" pos:start="6937:45" pos:end="6937:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="6941:17" pos:end="6953:17"><if pos:start="6941:17" pos:end="6947:17">if <condition pos:start="6941:20" pos:end="6941:30">(<expr pos:start="6941:21" pos:end="6941:29"><call pos:start="6941:21" pos:end="6941:29"><name pos:start="6941:21" pos:end="6941:26">CODE64</name><argument_list pos:start="6941:27" pos:end="6941:29">(<argument pos:start="6941:28" pos:end="6941:28"><expr pos:start="6941:28" pos:end="6941:28"><name pos:start="6941:28" pos:end="6941:28">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6941:32" pos:end="6947:17">{<block_content pos:start="6943:21" pos:end="6945:70">

                    <expr_stmt pos:start="6943:21" pos:end="6945:70"><expr pos:start="6943:21" pos:end="6945:69"><call pos:start="6943:21" pos:end="6945:69"><name pos:start="6943:21" pos:end="6943:39">gen_helper_bndstx64</name><argument_list pos:start="6943:40" pos:end="6945:69">(<argument pos:start="6943:41" pos:end="6943:47"><expr pos:start="6943:41" pos:end="6943:47"><name pos:start="6943:41" pos:end="6943:47">cpu_env</name></expr></argument>, <argument pos:start="6943:50" pos:end="6943:55"><expr pos:start="6943:50" pos:end="6943:55"><name pos:start="6943:50" pos:end="6943:55">cpu_A0</name></expr></argument>, <argument pos:start="6943:58" pos:end="6943:63"><expr pos:start="6943:58" pos:end="6943:63"><name pos:start="6943:58" pos:end="6943:63">cpu_T0</name></expr></argument>,

                                        <argument pos:start="6945:41" pos:end="6945:53"><expr pos:start="6945:41" pos:end="6945:53"><name pos:start="6945:41" pos:end="6945:53"><name pos:start="6945:41" pos:end="6945:48">cpu_bndl</name><index pos:start="6945:49" pos:end="6945:53">[<expr pos:start="6945:50" pos:end="6945:52"><name pos:start="6945:50" pos:end="6945:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6945:56" pos:end="6945:68"><expr pos:start="6945:56" pos:end="6945:68"><name pos:start="6945:56" pos:end="6945:68"><name pos:start="6945:56" pos:end="6945:63">cpu_bndu</name><index pos:start="6945:64" pos:end="6945:68">[<expr pos:start="6945:65" pos:end="6945:67"><name pos:start="6945:65" pos:end="6945:67">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6947:19" pos:end="6953:17">else <block pos:start="6947:24" pos:end="6953:17">{<block_content pos:start="6949:21" pos:end="6951:70">

                    <expr_stmt pos:start="6949:21" pos:end="6951:70"><expr pos:start="6949:21" pos:end="6951:69"><call pos:start="6949:21" pos:end="6951:69"><name pos:start="6949:21" pos:end="6949:39">gen_helper_bndstx32</name><argument_list pos:start="6949:40" pos:end="6951:69">(<argument pos:start="6949:41" pos:end="6949:47"><expr pos:start="6949:41" pos:end="6949:47"><name pos:start="6949:41" pos:end="6949:47">cpu_env</name></expr></argument>, <argument pos:start="6949:50" pos:end="6949:55"><expr pos:start="6949:50" pos:end="6949:55"><name pos:start="6949:50" pos:end="6949:55">cpu_A0</name></expr></argument>, <argument pos:start="6949:58" pos:end="6949:63"><expr pos:start="6949:58" pos:end="6949:63"><name pos:start="6949:58" pos:end="6949:63">cpu_T0</name></expr></argument>,

                                        <argument pos:start="6951:41" pos:end="6951:53"><expr pos:start="6951:41" pos:end="6951:53"><name pos:start="6951:41" pos:end="6951:53"><name pos:start="6951:41" pos:end="6951:48">cpu_bndl</name><index pos:start="6951:49" pos:end="6951:53">[<expr pos:start="6951:50" pos:end="6951:52"><name pos:start="6951:50" pos:end="6951:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="6951:56" pos:end="6951:68"><expr pos:start="6951:56" pos:end="6951:68"><name pos:start="6951:56" pos:end="6951:68"><name pos:start="6951:56" pos:end="6951:63">cpu_bndu</name><index pos:start="6951:64" pos:end="6951:68">[<expr pos:start="6951:65" pos:end="6951:67"><name pos:start="6951:65" pos:end="6951:67">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6959:9" pos:end="6959:37"><expr pos:start="6959:9" pos:end="6959:36"><call pos:start="6959:9" pos:end="6959:36"><name pos:start="6959:9" pos:end="6959:21">gen_nop_modrm</name><argument_list pos:start="6959:22" pos:end="6959:36">(<argument pos:start="6959:23" pos:end="6959:25"><expr pos:start="6959:23" pos:end="6959:25"><name pos:start="6959:23" pos:end="6959:25">env</name></expr></argument>, <argument pos:start="6959:28" pos:end="6959:28"><expr pos:start="6959:28" pos:end="6959:28"><name pos:start="6959:28" pos:end="6959:28">s</name></expr></argument>, <argument pos:start="6959:31" pos:end="6959:35"><expr pos:start="6959:31" pos:end="6959:35"><name pos:start="6959:31" pos:end="6959:35">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6961:9" pos:end="6961:14">break;</break>

    <case pos:start="6963:5" pos:end="6963:15">case <expr pos:start="6963:10" pos:end="6963:14"><literal type="number" pos:start="6963:10" pos:end="6963:14">0x119</literal></expr>:</case> <case pos:start="6963:17" pos:end="6963:37">case <expr pos:start="6963:22" pos:end="6963:36"><literal type="number" pos:start="6963:22" pos:end="6963:26">0x11c</literal> <operator pos:start="6963:28" pos:end="6963:30">...</operator> <literal type="number" pos:start="6963:32" pos:end="6963:36">0x11f</literal></expr>:</case> <comment type="block" pos:start="6963:39" pos:end="6963:60">/* nop (multi byte) */</comment>

        <expr_stmt pos:start="6965:9" pos:end="6965:38"><expr pos:start="6965:9" pos:end="6965:37"><name pos:start="6965:9" pos:end="6965:13">modrm</name> <operator pos:start="6965:15" pos:end="6965:15">=</operator> <call pos:start="6965:17" pos:end="6965:37"><name pos:start="6965:17" pos:end="6965:29">x86_ldub_code</name><argument_list pos:start="6965:30" pos:end="6965:37">(<argument pos:start="6965:31" pos:end="6965:33"><expr pos:start="6965:31" pos:end="6965:33"><name pos:start="6965:31" pos:end="6965:33">env</name></expr></argument>, <argument pos:start="6965:36" pos:end="6965:36"><expr pos:start="6965:36" pos:end="6965:36"><name pos:start="6965:36" pos:end="6965:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6967:9" pos:end="6967:37"><expr pos:start="6967:9" pos:end="6967:36"><call pos:start="6967:9" pos:end="6967:36"><name pos:start="6967:9" pos:end="6967:21">gen_nop_modrm</name><argument_list pos:start="6967:22" pos:end="6967:36">(<argument pos:start="6967:23" pos:end="6967:25"><expr pos:start="6967:23" pos:end="6967:25"><name pos:start="6967:23" pos:end="6967:25">env</name></expr></argument>, <argument pos:start="6967:28" pos:end="6967:28"><expr pos:start="6967:28" pos:end="6967:28"><name pos:start="6967:28" pos:end="6967:28">s</name></expr></argument>, <argument pos:start="6967:31" pos:end="6967:35"><expr pos:start="6967:31" pos:end="6967:35"><name pos:start="6967:31" pos:end="6967:35">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6969:9" pos:end="6969:14">break;</break>

    <case pos:start="6971:5" pos:end="6971:15">case <expr pos:start="6971:10" pos:end="6971:14"><literal type="number" pos:start="6971:10" pos:end="6971:14">0x120</literal></expr>:</case> <comment type="block" pos:start="6971:17" pos:end="6971:34">/* mov reg, crN */</comment>

    <case pos:start="6973:5" pos:end="6973:15">case <expr pos:start="6973:10" pos:end="6973:14"><literal type="number" pos:start="6973:10" pos:end="6973:14">0x122</literal></expr>:</case> <comment type="block" pos:start="6973:17" pos:end="6973:34">/* mov crN, reg */</comment>

        <if_stmt pos:start="6975:9" pos:end="7081:9"><if pos:start="6975:9" pos:end="6979:9">if <condition pos:start="6975:12" pos:end="6975:24">(<expr pos:start="6975:13" pos:end="6975:23"><name pos:start="6975:13" pos:end="6975:18"><name pos:start="6975:13" pos:end="6975:13">s</name><operator pos:start="6975:14" pos:end="6975:15">-&gt;</operator><name pos:start="6975:16" pos:end="6975:18">cpl</name></name> <operator pos:start="6975:20" pos:end="6975:21">!=</operator> <literal type="number" pos:start="6975:23" pos:end="6975:23">0</literal></expr>)</condition> <block pos:start="6975:26" pos:end="6979:9">{<block_content pos:start="6977:13" pos:end="6977:64">

            <expr_stmt pos:start="6977:13" pos:end="6977:64"><expr pos:start="6977:13" pos:end="6977:63"><call pos:start="6977:13" pos:end="6977:63"><name pos:start="6977:13" pos:end="6977:25">gen_exception</name><argument_list pos:start="6977:26" pos:end="6977:63">(<argument pos:start="6977:27" pos:end="6977:27"><expr pos:start="6977:27" pos:end="6977:27"><name pos:start="6977:27" pos:end="6977:27">s</name></expr></argument>, <argument pos:start="6977:30" pos:end="6977:39"><expr pos:start="6977:30" pos:end="6977:39"><name pos:start="6977:30" pos:end="6977:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6977:42" pos:end="6977:62"><expr pos:start="6977:42" pos:end="6977:62"><name pos:start="6977:42" pos:end="6977:49">pc_start</name> <operator pos:start="6977:51" pos:end="6977:51">-</operator> <name pos:start="6977:53" pos:end="6977:62"><name pos:start="6977:53" pos:end="6977:53">s</name><operator pos:start="6977:54" pos:end="6977:55">-&gt;</operator><name pos:start="6977:56" pos:end="6977:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6979:11" pos:end="7081:9">else <block pos:start="6979:16" pos:end="7081:9">{<block_content pos:start="6981:13" pos:end="7079:13">

            <expr_stmt pos:start="6981:13" pos:end="6981:42"><expr pos:start="6981:13" pos:end="6981:41"><name pos:start="6981:13" pos:end="6981:17">modrm</name> <operator pos:start="6981:19" pos:end="6981:19">=</operator> <call pos:start="6981:21" pos:end="6981:41"><name pos:start="6981:21" pos:end="6981:33">x86_ldub_code</name><argument_list pos:start="6981:34" pos:end="6981:41">(<argument pos:start="6981:35" pos:end="6981:37"><expr pos:start="6981:35" pos:end="6981:37"><name pos:start="6981:35" pos:end="6981:37">env</name></expr></argument>, <argument pos:start="6981:40" pos:end="6981:40"><expr pos:start="6981:40" pos:end="6981:40"><name pos:start="6981:40" pos:end="6981:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6983:13" pos:end="6991:15">/* Ignore the mod bits (assume (modrm&amp;0xc0)==0xc0).

             * AMD documentation (24594.pdf) and testing of

             * intel 386 and 486 processors all show that the mod bits

             * are assumed to be 1's, regardless of actual values.

             */</comment>

            <expr_stmt pos:start="6993:13" pos:end="6993:40"><expr pos:start="6993:13" pos:end="6993:39"><name pos:start="6993:13" pos:end="6993:14">rm</name> <operator pos:start="6993:16" pos:end="6993:16">=</operator> <operator pos:start="6993:18" pos:end="6993:18">(</operator><name pos:start="6993:19" pos:end="6993:23">modrm</name> <operator pos:start="6993:25" pos:end="6993:25">&amp;</operator> <literal type="number" pos:start="6993:27" pos:end="6993:27">7</literal><operator pos:start="6993:28" pos:end="6993:28">)</operator> <operator pos:start="6993:30" pos:end="6993:30">|</operator> <call pos:start="6993:32" pos:end="6993:39"><name pos:start="6993:32" pos:end="6993:36">REX_B</name><argument_list pos:start="6993:37" pos:end="6993:39">(<argument pos:start="6993:38" pos:end="6993:38"><expr pos:start="6993:38" pos:end="6993:38"><name pos:start="6993:38" pos:end="6993:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6995:13" pos:end="6995:45"><expr pos:start="6995:13" pos:end="6995:44"><name pos:start="6995:13" pos:end="6995:15">reg</name> <operator pos:start="6995:17" pos:end="6995:17">=</operator> <operator pos:start="6995:19" pos:end="6995:19">(</operator><operator pos:start="6995:20" pos:end="6995:20">(</operator><name pos:start="6995:21" pos:end="6995:25">modrm</name> <operator pos:start="6995:27" pos:end="6995:28">&gt;&gt;</operator> <literal type="number" pos:start="6995:30" pos:end="6995:30">3</literal><operator pos:start="6995:31" pos:end="6995:31">)</operator> <operator pos:start="6995:33" pos:end="6995:33">&amp;</operator> <literal type="number" pos:start="6995:35" pos:end="6995:35">7</literal><operator pos:start="6995:36" pos:end="6995:36">)</operator> <operator pos:start="6995:38" pos:end="6995:38">|</operator> <name pos:start="6995:40" pos:end="6995:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6997:13" pos:end="7003:27"><if pos:start="6997:13" pos:end="6999:27">if <condition pos:start="6997:16" pos:end="6997:26">(<expr pos:start="6997:17" pos:end="6997:25"><call pos:start="6997:17" pos:end="6997:25"><name pos:start="6997:17" pos:end="6997:22">CODE64</name><argument_list pos:start="6997:23" pos:end="6997:25">(<argument pos:start="6997:24" pos:end="6997:24"><expr pos:start="6997:24" pos:end="6997:24"><name pos:start="6997:24" pos:end="6997:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6999:17" pos:end="6999:27"><block_content pos:start="6999:17" pos:end="6999:27">

                <expr_stmt pos:start="6999:17" pos:end="6999:27"><expr pos:start="6999:17" pos:end="6999:26"><name pos:start="6999:17" pos:end="6999:18">ot</name> <operator pos:start="6999:20" pos:end="6999:20">=</operator> <name pos:start="6999:22" pos:end="6999:26">MO_64</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="7001:13" pos:end="7003:27">else<block type="pseudo" pos:start="7003:17" pos:end="7003:27"><block_content pos:start="7003:17" pos:end="7003:27">

                <expr_stmt pos:start="7003:17" pos:end="7003:27"><expr pos:start="7003:17" pos:end="7003:26"><name pos:start="7003:17" pos:end="7003:18">ot</name> <operator pos:start="7003:20" pos:end="7003:20">=</operator> <name pos:start="7003:22" pos:end="7003:26">MO_32</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="7005:13" pos:end="7011:13"><if pos:start="7005:13" pos:end="7011:13">if <condition pos:start="7005:16" pos:end="7007:61">(<expr pos:start="7005:17" pos:end="7007:60"><operator pos:start="7005:17" pos:end="7005:17">(</operator><name pos:start="7005:18" pos:end="7005:25">prefixes</name> <operator pos:start="7005:27" pos:end="7005:27">&amp;</operator> <name pos:start="7005:29" pos:end="7005:39">PREFIX_LOCK</name><operator pos:start="7005:40" pos:end="7005:40">)</operator> <operator pos:start="7005:42" pos:end="7005:43">&amp;&amp;</operator> <operator pos:start="7005:45" pos:end="7005:45">(</operator><name pos:start="7005:46" pos:end="7005:48">reg</name> <operator pos:start="7005:50" pos:end="7005:51">==</operator> <literal type="number" pos:start="7005:53" pos:end="7005:53">0</literal><operator pos:start="7005:54" pos:end="7005:54">)</operator> <operator pos:start="7005:56" pos:end="7005:57">&amp;&amp;</operator>

                <operator pos:start="7007:17" pos:end="7007:17">(</operator><name pos:start="7007:18" pos:end="7007:39"><name pos:start="7007:18" pos:end="7007:18">s</name><operator pos:start="7007:19" pos:end="7007:20">-&gt;</operator><name pos:start="7007:21" pos:end="7007:39">cpuid_ext3_features</name></name> <operator pos:start="7007:41" pos:end="7007:41">&amp;</operator> <name pos:start="7007:43" pos:end="7007:59">CPUID_EXT3_CR8LEG</name><operator pos:start="7007:60" pos:end="7007:60">)</operator></expr>)</condition> <block pos:start="7007:63" pos:end="7011:13">{<block_content pos:start="7009:17" pos:end="7009:24">

                <expr_stmt pos:start="7009:17" pos:end="7009:24"><expr pos:start="7009:17" pos:end="7009:23"><name pos:start="7009:17" pos:end="7009:19">reg</name> <operator pos:start="7009:21" pos:end="7009:21">=</operator> <literal type="number" pos:start="7009:23" pos:end="7009:23">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="7013:13" pos:end="7079:13">switch<condition pos:start="7013:19" pos:end="7013:23">(<expr pos:start="7013:20" pos:end="7013:22"><name pos:start="7013:20" pos:end="7013:22">reg</name></expr>)</condition> <block pos:start="7013:25" pos:end="7079:13">{<block_content pos:start="7015:13" pos:end="7077:32">

            <case pos:start="7015:13" pos:end="7015:19">case <expr pos:start="7015:18" pos:end="7015:18"><literal type="number" pos:start="7015:18" pos:end="7015:18">0</literal></expr>:</case>

            <case pos:start="7017:13" pos:end="7017:19">case <expr pos:start="7017:18" pos:end="7017:18"><literal type="number" pos:start="7017:18" pos:end="7017:18">2</literal></expr>:</case>

            <case pos:start="7019:13" pos:end="7019:19">case <expr pos:start="7019:18" pos:end="7019:18"><literal type="number" pos:start="7019:18" pos:end="7019:18">3</literal></expr>:</case>

            <case pos:start="7021:13" pos:end="7021:19">case <expr pos:start="7021:18" pos:end="7021:18"><literal type="number" pos:start="7021:18" pos:end="7021:18">4</literal></expr>:</case>

            <case pos:start="7023:13" pos:end="7023:19">case <expr pos:start="7023:18" pos:end="7023:18"><literal type="number" pos:start="7023:18" pos:end="7023:18">8</literal></expr>:</case>

                <expr_stmt pos:start="7025:17" pos:end="7025:36"><expr pos:start="7025:17" pos:end="7025:35"><call pos:start="7025:17" pos:end="7025:35"><name pos:start="7025:17" pos:end="7025:32">gen_update_cc_op</name><argument_list pos:start="7025:33" pos:end="7025:35">(<argument pos:start="7025:34" pos:end="7025:34"><expr pos:start="7025:34" pos:end="7025:34"><name pos:start="7025:34" pos:end="7025:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7027:17" pos:end="7027:50"><expr pos:start="7027:17" pos:end="7027:49"><call pos:start="7027:17" pos:end="7027:49"><name pos:start="7027:17" pos:end="7027:26">gen_jmp_im</name><argument_list pos:start="7027:27" pos:end="7027:49">(<argument pos:start="7027:28" pos:end="7027:48"><expr pos:start="7027:28" pos:end="7027:48"><name pos:start="7027:28" pos:end="7027:35">pc_start</name> <operator pos:start="7027:37" pos:end="7027:37">-</operator> <name pos:start="7027:39" pos:end="7027:48"><name pos:start="7027:39" pos:end="7027:39">s</name><operator pos:start="7027:40" pos:end="7027:41">-&gt;</operator><name pos:start="7027:42" pos:end="7027:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="7029:17" pos:end="7071:17"><if pos:start="7029:17" pos:end="7053:17">if <condition pos:start="7029:20" pos:end="7029:26">(<expr pos:start="7029:21" pos:end="7029:25"><name pos:start="7029:21" pos:end="7029:21">b</name> <operator pos:start="7029:23" pos:end="7029:23">&amp;</operator> <literal type="number" pos:start="7029:25" pos:end="7029:25">2</literal></expr>)</condition> <block pos:start="7029:28" pos:end="7053:17">{<block_content pos:start="7031:21" pos:end="7051:31">

                    <if_stmt pos:start="7031:21" pos:end="7035:21"><if pos:start="7031:21" pos:end="7035:21">if <condition pos:start="7031:24" pos:end="7031:62">(<expr pos:start="7031:25" pos:end="7031:61"><call pos:start="7031:25" pos:end="7031:45"><name pos:start="7031:25" pos:end="7031:33">tb_cflags</name><argument_list pos:start="7031:34" pos:end="7031:45">(<argument pos:start="7031:35" pos:end="7031:44"><expr pos:start="7031:35" pos:end="7031:44"><name pos:start="7031:35" pos:end="7031:44"><name pos:start="7031:35" pos:end="7031:35">s</name><operator pos:start="7031:36" pos:end="7031:37">-&gt;</operator><name pos:start="7031:38" pos:end="7031:41">base</name><operator pos:start="7031:42" pos:end="7031:42">.</operator><name pos:start="7031:43" pos:end="7031:44">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="7031:47" pos:end="7031:47">&amp;</operator> <name pos:start="7031:49" pos:end="7031:61">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="7031:64" pos:end="7035:21">{<block_content pos:start="7033:25" pos:end="7033:39">

                        <expr_stmt pos:start="7033:25" pos:end="7033:39"><expr pos:start="7033:25" pos:end="7033:38"><call pos:start="7033:25" pos:end="7033:38"><name pos:start="7033:25" pos:end="7033:36">gen_io_start</name><argument_list pos:start="7033:37" pos:end="7033:38">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="7037:21" pos:end="7037:53"><expr pos:start="7037:21" pos:end="7037:52"><call pos:start="7037:21" pos:end="7037:52"><name pos:start="7037:21" pos:end="7037:36">gen_op_mov_v_reg</name><argument_list pos:start="7037:37" pos:end="7037:52">(<argument pos:start="7037:38" pos:end="7037:39"><expr pos:start="7037:38" pos:end="7037:39"><name pos:start="7037:38" pos:end="7037:39">ot</name></expr></argument>, <argument pos:start="7037:42" pos:end="7037:47"><expr pos:start="7037:42" pos:end="7037:47"><name pos:start="7037:42" pos:end="7037:47">cpu_T0</name></expr></argument>, <argument pos:start="7037:50" pos:end="7037:51"><expr pos:start="7037:50" pos:end="7037:51"><name pos:start="7037:50" pos:end="7037:51">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="7039:21" pos:end="7041:49"><expr pos:start="7039:21" pos:end="7041:48"><call pos:start="7039:21" pos:end="7041:48"><name pos:start="7039:21" pos:end="7039:40">gen_helper_write_crN</name><argument_list pos:start="7039:41" pos:end="7041:48">(<argument pos:start="7039:42" pos:end="7039:48"><expr pos:start="7039:42" pos:end="7039:48"><name pos:start="7039:42" pos:end="7039:48">cpu_env</name></expr></argument>, <argument pos:start="7039:51" pos:end="7039:68"><expr pos:start="7039:51" pos:end="7039:68"><call pos:start="7039:51" pos:end="7039:68"><name pos:start="7039:51" pos:end="7039:63">tcg_const_i32</name><argument_list pos:start="7039:64" pos:end="7039:68">(<argument pos:start="7039:65" pos:end="7039:67"><expr pos:start="7039:65" pos:end="7039:67"><name pos:start="7039:65" pos:end="7039:67">reg</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="7041:42" pos:end="7041:47"><expr pos:start="7041:42" pos:end="7041:47"><name pos:start="7041:42" pos:end="7041:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="7043:21" pos:end="7047:21"><if pos:start="7043:21" pos:end="7047:21">if <condition pos:start="7043:24" pos:end="7043:62">(<expr pos:start="7043:25" pos:end="7043:61"><call pos:start="7043:25" pos:end="7043:45"><name pos:start="7043:25" pos:end="7043:33">tb_cflags</name><argument_list pos:start="7043:34" pos:end="7043:45">(<argument pos:start="7043:35" pos:end="7043:44"><expr pos:start="7043:35" pos:end="7043:44"><name pos:start="7043:35" pos:end="7043:44"><name pos:start="7043:35" pos:end="7043:35">s</name><operator pos:start="7043:36" pos:end="7043:37">-&gt;</operator><name pos:start="7043:38" pos:end="7043:41">base</name><operator pos:start="7043:42" pos:end="7043:42">.</operator><name pos:start="7043:43" pos:end="7043:44">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="7043:47" pos:end="7043:47">&amp;</operator> <name pos:start="7043:49" pos:end="7043:61">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="7043:64" pos:end="7047:21">{<block_content pos:start="7045:25" pos:end="7045:37">

                        <expr_stmt pos:start="7045:25" pos:end="7045:37"><expr pos:start="7045:25" pos:end="7045:36"><call pos:start="7045:25" pos:end="7045:36"><name pos:start="7045:25" pos:end="7045:34">gen_io_end</name><argument_list pos:start="7045:35" pos:end="7045:36">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="7049:21" pos:end="7049:51"><expr pos:start="7049:21" pos:end="7049:50"><call pos:start="7049:21" pos:end="7049:50"><name pos:start="7049:21" pos:end="7049:30">gen_jmp_im</name><argument_list pos:start="7049:31" pos:end="7049:50">(<argument pos:start="7049:32" pos:end="7049:49"><expr pos:start="7049:32" pos:end="7049:49"><name pos:start="7049:32" pos:end="7049:36"><name pos:start="7049:32" pos:end="7049:32">s</name><operator pos:start="7049:33" pos:end="7049:34">-&gt;</operator><name pos:start="7049:35" pos:end="7049:36">pc</name></name> <operator pos:start="7049:38" pos:end="7049:38">-</operator> <name pos:start="7049:40" pos:end="7049:49"><name pos:start="7049:40" pos:end="7049:40">s</name><operator pos:start="7049:41" pos:end="7049:42">-&gt;</operator><name pos:start="7049:43" pos:end="7049:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="7051:21" pos:end="7051:31"><expr pos:start="7051:21" pos:end="7051:30"><call pos:start="7051:21" pos:end="7051:30"><name pos:start="7051:21" pos:end="7051:27">gen_eob</name><argument_list pos:start="7051:28" pos:end="7051:30">(<argument pos:start="7051:29" pos:end="7051:29"><expr pos:start="7051:29" pos:end="7051:29"><name pos:start="7051:29" pos:end="7051:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="7053:19" pos:end="7071:17">else <block pos:start="7053:24" pos:end="7071:17">{<block_content pos:start="7055:21" pos:end="7069:21">

                    <if_stmt pos:start="7055:21" pos:end="7059:21"><if pos:start="7055:21" pos:end="7059:21">if <condition pos:start="7055:24" pos:end="7055:62">(<expr pos:start="7055:25" pos:end="7055:61"><call pos:start="7055:25" pos:end="7055:45"><name pos:start="7055:25" pos:end="7055:33">tb_cflags</name><argument_list pos:start="7055:34" pos:end="7055:45">(<argument pos:start="7055:35" pos:end="7055:44"><expr pos:start="7055:35" pos:end="7055:44"><name pos:start="7055:35" pos:end="7055:44"><name pos:start="7055:35" pos:end="7055:35">s</name><operator pos:start="7055:36" pos:end="7055:37">-&gt;</operator><name pos:start="7055:38" pos:end="7055:41">base</name><operator pos:start="7055:42" pos:end="7055:42">.</operator><name pos:start="7055:43" pos:end="7055:44">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="7055:47" pos:end="7055:47">&amp;</operator> <name pos:start="7055:49" pos:end="7055:61">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="7055:64" pos:end="7059:21">{<block_content pos:start="7057:25" pos:end="7057:39">

                        <expr_stmt pos:start="7057:25" pos:end="7057:39"><expr pos:start="7057:25" pos:end="7057:38"><call pos:start="7057:25" pos:end="7057:38"><name pos:start="7057:25" pos:end="7057:36">gen_io_start</name><argument_list pos:start="7057:37" pos:end="7057:38">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="7061:21" pos:end="7061:77"><expr pos:start="7061:21" pos:end="7061:76"><call pos:start="7061:21" pos:end="7061:76"><name pos:start="7061:21" pos:end="7061:39">gen_helper_read_crN</name><argument_list pos:start="7061:40" pos:end="7061:76">(<argument pos:start="7061:41" pos:end="7061:46"><expr pos:start="7061:41" pos:end="7061:46"><name pos:start="7061:41" pos:end="7061:46">cpu_T0</name></expr></argument>, <argument pos:start="7061:49" pos:end="7061:55"><expr pos:start="7061:49" pos:end="7061:55"><name pos:start="7061:49" pos:end="7061:55">cpu_env</name></expr></argument>, <argument pos:start="7061:58" pos:end="7061:75"><expr pos:start="7061:58" pos:end="7061:75"><call pos:start="7061:58" pos:end="7061:75"><name pos:start="7061:58" pos:end="7061:70">tcg_const_i32</name><argument_list pos:start="7061:71" pos:end="7061:75">(<argument pos:start="7061:72" pos:end="7061:74"><expr pos:start="7061:72" pos:end="7061:74"><name pos:start="7061:72" pos:end="7061:74">reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="7063:21" pos:end="7063:53"><expr pos:start="7063:21" pos:end="7063:52"><call pos:start="7063:21" pos:end="7063:52"><name pos:start="7063:21" pos:end="7063:36">gen_op_mov_reg_v</name><argument_list pos:start="7063:37" pos:end="7063:52">(<argument pos:start="7063:38" pos:end="7063:39"><expr pos:start="7063:38" pos:end="7063:39"><name pos:start="7063:38" pos:end="7063:39">ot</name></expr></argument>, <argument pos:start="7063:42" pos:end="7063:43"><expr pos:start="7063:42" pos:end="7063:43"><name pos:start="7063:42" pos:end="7063:43">rm</name></expr></argument>, <argument pos:start="7063:46" pos:end="7063:51"><expr pos:start="7063:46" pos:end="7063:51"><name pos:start="7063:46" pos:end="7063:51">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="7065:21" pos:end="7069:21"><if pos:start="7065:21" pos:end="7069:21">if <condition pos:start="7065:24" pos:end="7065:62">(<expr pos:start="7065:25" pos:end="7065:61"><call pos:start="7065:25" pos:end="7065:45"><name pos:start="7065:25" pos:end="7065:33">tb_cflags</name><argument_list pos:start="7065:34" pos:end="7065:45">(<argument pos:start="7065:35" pos:end="7065:44"><expr pos:start="7065:35" pos:end="7065:44"><name pos:start="7065:35" pos:end="7065:44"><name pos:start="7065:35" pos:end="7065:35">s</name><operator pos:start="7065:36" pos:end="7065:37">-&gt;</operator><name pos:start="7065:38" pos:end="7065:41">base</name><operator pos:start="7065:42" pos:end="7065:42">.</operator><name pos:start="7065:43" pos:end="7065:44">tb</name></name></expr></argument>)</argument_list></call> <operator pos:start="7065:47" pos:end="7065:47">&amp;</operator> <name pos:start="7065:49" pos:end="7065:61">CF_USE_ICOUNT</name></expr>)</condition> <block pos:start="7065:64" pos:end="7069:21">{<block_content pos:start="7067:25" pos:end="7067:37">

                        <expr_stmt pos:start="7067:25" pos:end="7067:37"><expr pos:start="7067:25" pos:end="7067:36"><call pos:start="7067:25" pos:end="7067:36"><name pos:start="7067:25" pos:end="7067:34">gen_io_end</name><argument_list pos:start="7067:35" pos:end="7067:36">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="7073:17" pos:end="7073:22">break;</break>

            <default pos:start="7075:13" pos:end="7075:20">default:</default>

                <goto pos:start="7077:17" pos:end="7077:32">goto <name pos:start="7077:22" pos:end="7077:31">unknown_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="7083:9" pos:end="7083:14">break;</break>

    <case pos:start="7085:5" pos:end="7085:15">case <expr pos:start="7085:10" pos:end="7085:14"><literal type="number" pos:start="7085:10" pos:end="7085:14">0x121</literal></expr>:</case> <comment type="block" pos:start="7085:17" pos:end="7085:34">/* mov reg, drN */</comment>

    <case pos:start="7087:5" pos:end="7087:15">case <expr pos:start="7087:10" pos:end="7087:14"><literal type="number" pos:start="7087:10" pos:end="7087:14">0x123</literal></expr>:</case> <comment type="block" pos:start="7087:17" pos:end="7087:34">/* mov drN, reg */</comment>

        <if_stmt pos:start="7089:9" pos:end="7151:9"><if pos:start="7089:9" pos:end="7093:9">if <condition pos:start="7089:12" pos:end="7089:24">(<expr pos:start="7089:13" pos:end="7089:23"><name pos:start="7089:13" pos:end="7089:18"><name pos:start="7089:13" pos:end="7089:13">s</name><operator pos:start="7089:14" pos:end="7089:15">-&gt;</operator><name pos:start="7089:16" pos:end="7089:18">cpl</name></name> <operator pos:start="7089:20" pos:end="7089:21">!=</operator> <literal type="number" pos:start="7089:23" pos:end="7089:23">0</literal></expr>)</condition> <block pos:start="7089:26" pos:end="7093:9">{<block_content pos:start="7091:13" pos:end="7091:64">

            <expr_stmt pos:start="7091:13" pos:end="7091:64"><expr pos:start="7091:13" pos:end="7091:63"><call pos:start="7091:13" pos:end="7091:63"><name pos:start="7091:13" pos:end="7091:25">gen_exception</name><argument_list pos:start="7091:26" pos:end="7091:63">(<argument pos:start="7091:27" pos:end="7091:27"><expr pos:start="7091:27" pos:end="7091:27"><name pos:start="7091:27" pos:end="7091:27">s</name></expr></argument>, <argument pos:start="7091:30" pos:end="7091:39"><expr pos:start="7091:30" pos:end="7091:39"><name pos:start="7091:30" pos:end="7091:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="7091:42" pos:end="7091:62"><expr pos:start="7091:42" pos:end="7091:62"><name pos:start="7091:42" pos:end="7091:49">pc_start</name> <operator pos:start="7091:51" pos:end="7091:51">-</operator> <name pos:start="7091:53" pos:end="7091:62"><name pos:start="7091:53" pos:end="7091:53">s</name><operator pos:start="7091:54" pos:end="7091:55">-&gt;</operator><name pos:start="7091:56" pos:end="7091:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="7093:11" pos:end="7151:9">else <block pos:start="7093:16" pos:end="7151:9">{<block_content pos:start="7095:13" pos:end="7149:13">

            <expr_stmt pos:start="7095:13" pos:end="7095:42"><expr pos:start="7095:13" pos:end="7095:41"><name pos:start="7095:13" pos:end="7095:17">modrm</name> <operator pos:start="7095:19" pos:end="7095:19">=</operator> <call pos:start="7095:21" pos:end="7095:41"><name pos:start="7095:21" pos:end="7095:33">x86_ldub_code</name><argument_list pos:start="7095:34" pos:end="7095:41">(<argument pos:start="7095:35" pos:end="7095:37"><expr pos:start="7095:35" pos:end="7095:37"><name pos:start="7095:35" pos:end="7095:37">env</name></expr></argument>, <argument pos:start="7095:40" pos:end="7095:40"><expr pos:start="7095:40" pos:end="7095:40"><name pos:start="7095:40" pos:end="7095:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="7097:13" pos:end="7105:15">/* Ignore the mod bits (assume (modrm&amp;0xc0)==0xc0).

             * AMD documentation (24594.pdf) and testing of

             * intel 386 and 486 processors all show that the mod bits

             * are assumed to be 1's, regardless of actual values.

             */</comment>

            <expr_stmt pos:start="7107:13" pos:end="7107:40"><expr pos:start="7107:13" pos:end="7107:39"><name pos:start="7107:13" pos:end="7107:14">rm</name> <operator pos:start="7107:16" pos:end="7107:16">=</operator> <operator pos:start="7107:18" pos:end="7107:18">(</operator><name pos:start="7107:19" pos:end="7107:23">modrm</name> <operator pos:start="7107:25" pos:end="7107:25">&amp;</operator> <literal type="number" pos:start="7107:27" pos:end="7107:27">7</literal><operator pos:start="7107:28" pos:end="7107:28">)</operator> <operator pos:start="7107:30" pos:end="7107:30">|</operator> <call pos:start="7107:32" pos:end="7107:39"><name pos:start="7107:32" pos:end="7107:36">REX_B</name><argument_list pos:start="7107:37" pos:end="7107:39">(<argument pos:start="7107:38" pos:end="7107:38"><expr pos:start="7107:38" pos:end="7107:38"><name pos:start="7107:38" pos:end="7107:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7109:13" pos:end="7109:45"><expr pos:start="7109:13" pos:end="7109:44"><name pos:start="7109:13" pos:end="7109:15">reg</name> <operator pos:start="7109:17" pos:end="7109:17">=</operator> <operator pos:start="7109:19" pos:end="7109:19">(</operator><operator pos:start="7109:20" pos:end="7109:20">(</operator><name pos:start="7109:21" pos:end="7109:25">modrm</name> <operator pos:start="7109:27" pos:end="7109:28">&gt;&gt;</operator> <literal type="number" pos:start="7109:30" pos:end="7109:30">3</literal><operator pos:start="7109:31" pos:end="7109:31">)</operator> <operator pos:start="7109:33" pos:end="7109:33">&amp;</operator> <literal type="number" pos:start="7109:35" pos:end="7109:35">7</literal><operator pos:start="7109:36" pos:end="7109:36">)</operator> <operator pos:start="7109:38" pos:end="7109:38">|</operator> <name pos:start="7109:40" pos:end="7109:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="7111:13" pos:end="7117:27"><if pos:start="7111:13" pos:end="7113:27">if <condition pos:start="7111:16" pos:end="7111:26">(<expr pos:start="7111:17" pos:end="7111:25"><call pos:start="7111:17" pos:end="7111:25"><name pos:start="7111:17" pos:end="7111:22">CODE64</name><argument_list pos:start="7111:23" pos:end="7111:25">(<argument pos:start="7111:24" pos:end="7111:24"><expr pos:start="7111:24" pos:end="7111:24"><name pos:start="7111:24" pos:end="7111:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="7113:17" pos:end="7113:27"><block_content pos:start="7113:17" pos:end="7113:27">

                <expr_stmt pos:start="7113:17" pos:end="7113:27"><expr pos:start="7113:17" pos:end="7113:26"><name pos:start="7113:17" pos:end="7113:18">ot</name> <operator pos:start="7113:20" pos:end="7113:20">=</operator> <name pos:start="7113:22" pos:end="7113:26">MO_64</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="7115:13" pos:end="7117:27">else<block type="pseudo" pos:start="7117:17" pos:end="7117:27"><block_content pos:start="7117:17" pos:end="7117:27">

                <expr_stmt pos:start="7117:17" pos:end="7117:27"><expr pos:start="7117:17" pos:end="7117:26"><name pos:start="7117:17" pos:end="7117:18">ot</name> <operator pos:start="7117:20" pos:end="7117:20">=</operator> <name pos:start="7117:22" pos:end="7117:26">MO_32</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="7119:13" pos:end="7123:13"><if pos:start="7119:13" pos:end="7123:13">if <condition pos:start="7119:16" pos:end="7119:25">(<expr pos:start="7119:17" pos:end="7119:24"><name pos:start="7119:17" pos:end="7119:19">reg</name> <operator pos:start="7119:21" pos:end="7119:22">&gt;=</operator> <literal type="number" pos:start="7119:24" pos:end="7119:24">8</literal></expr>)</condition> <block pos:start="7119:27" pos:end="7123:13">{<block_content pos:start="7121:17" pos:end="7121:32">

                <goto pos:start="7121:17" pos:end="7121:32">goto <name pos:start="7121:22" pos:end="7121:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7125:13" pos:end="7149:13"><if pos:start="7125:13" pos:end="7139:13">if <condition pos:start="7125:16" pos:end="7125:22">(<expr pos:start="7125:17" pos:end="7125:21"><name pos:start="7125:17" pos:end="7125:17">b</name> <operator pos:start="7125:19" pos:end="7125:19">&amp;</operator> <literal type="number" pos:start="7125:21" pos:end="7125:21">2</literal></expr>)</condition> <block pos:start="7125:24" pos:end="7139:13">{<block_content pos:start="7127:17" pos:end="7137:27">

                <expr_stmt pos:start="7127:17" pos:end="7127:79"><expr pos:start="7127:17" pos:end="7127:78"><call pos:start="7127:17" pos:end="7127:78"><name pos:start="7127:17" pos:end="7127:39">gen_svm_check_intercept</name><argument_list pos:start="7127:40" pos:end="7127:78">(<argument pos:start="7127:41" pos:end="7127:41"><expr pos:start="7127:41" pos:end="7127:41"><name pos:start="7127:41" pos:end="7127:41">s</name></expr></argument>, <argument pos:start="7127:44" pos:end="7127:51"><expr pos:start="7127:44" pos:end="7127:51"><name pos:start="7127:44" pos:end="7127:51">pc_start</name></expr></argument>, <argument pos:start="7127:54" pos:end="7127:77"><expr pos:start="7127:54" pos:end="7127:77"><name pos:start="7127:54" pos:end="7127:71">SVM_EXIT_WRITE_DR0</name> <operator pos:start="7127:73" pos:end="7127:73">+</operator> <name pos:start="7127:75" pos:end="7127:77">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7129:17" pos:end="7129:49"><expr pos:start="7129:17" pos:end="7129:48"><call pos:start="7129:17" pos:end="7129:48"><name pos:start="7129:17" pos:end="7129:32">gen_op_mov_v_reg</name><argument_list pos:start="7129:33" pos:end="7129:48">(<argument pos:start="7129:34" pos:end="7129:35"><expr pos:start="7129:34" pos:end="7129:35"><name pos:start="7129:34" pos:end="7129:35">ot</name></expr></argument>, <argument pos:start="7129:38" pos:end="7129:43"><expr pos:start="7129:38" pos:end="7129:43"><name pos:start="7129:38" pos:end="7129:43">cpu_T0</name></expr></argument>, <argument pos:start="7129:46" pos:end="7129:47"><expr pos:start="7129:46" pos:end="7129:47"><name pos:start="7129:46" pos:end="7129:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7131:17" pos:end="7131:52"><expr pos:start="7131:17" pos:end="7131:51"><call pos:start="7131:17" pos:end="7131:51"><name pos:start="7131:17" pos:end="7131:32">tcg_gen_movi_i32</name><argument_list pos:start="7131:33" pos:end="7131:51">(<argument pos:start="7131:34" pos:end="7131:45"><expr pos:start="7131:34" pos:end="7131:45"><name pos:start="7131:34" pos:end="7131:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="7131:48" pos:end="7131:50"><expr pos:start="7131:48" pos:end="7131:50"><name pos:start="7131:48" pos:end="7131:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7133:17" pos:end="7133:65"><expr pos:start="7133:17" pos:end="7133:64"><call pos:start="7133:17" pos:end="7133:64"><name pos:start="7133:17" pos:end="7133:33">gen_helper_set_dr</name><argument_list pos:start="7133:34" pos:end="7133:64">(<argument pos:start="7133:35" pos:end="7133:41"><expr pos:start="7133:35" pos:end="7133:41"><name pos:start="7133:35" pos:end="7133:41">cpu_env</name></expr></argument>, <argument pos:start="7133:44" pos:end="7133:55"><expr pos:start="7133:44" pos:end="7133:55"><name pos:start="7133:44" pos:end="7133:55">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="7133:58" pos:end="7133:63"><expr pos:start="7133:58" pos:end="7133:63"><name pos:start="7133:58" pos:end="7133:63">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7135:17" pos:end="7135:47"><expr pos:start="7135:17" pos:end="7135:46"><call pos:start="7135:17" pos:end="7135:46"><name pos:start="7135:17" pos:end="7135:26">gen_jmp_im</name><argument_list pos:start="7135:27" pos:end="7135:46">(<argument pos:start="7135:28" pos:end="7135:45"><expr pos:start="7135:28" pos:end="7135:45"><name pos:start="7135:28" pos:end="7135:32"><name pos:start="7135:28" pos:end="7135:28">s</name><operator pos:start="7135:29" pos:end="7135:30">-&gt;</operator><name pos:start="7135:31" pos:end="7135:32">pc</name></name> <operator pos:start="7135:34" pos:end="7135:34">-</operator> <name pos:start="7135:36" pos:end="7135:45"><name pos:start="7135:36" pos:end="7135:36">s</name><operator pos:start="7135:37" pos:end="7135:38">-&gt;</operator><name pos:start="7135:39" pos:end="7135:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7137:17" pos:end="7137:27"><expr pos:start="7137:17" pos:end="7137:26"><call pos:start="7137:17" pos:end="7137:26"><name pos:start="7137:17" pos:end="7137:23">gen_eob</name><argument_list pos:start="7137:24" pos:end="7137:26">(<argument pos:start="7137:25" pos:end="7137:25"><expr pos:start="7137:25" pos:end="7137:25"><name pos:start="7137:25" pos:end="7137:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7139:15" pos:end="7149:13">else <block pos:start="7139:20" pos:end="7149:13">{<block_content pos:start="7141:17" pos:end="7147:49">

                <expr_stmt pos:start="7141:17" pos:end="7141:78"><expr pos:start="7141:17" pos:end="7141:77"><call pos:start="7141:17" pos:end="7141:77"><name pos:start="7141:17" pos:end="7141:39">gen_svm_check_intercept</name><argument_list pos:start="7141:40" pos:end="7141:77">(<argument pos:start="7141:41" pos:end="7141:41"><expr pos:start="7141:41" pos:end="7141:41"><name pos:start="7141:41" pos:end="7141:41">s</name></expr></argument>, <argument pos:start="7141:44" pos:end="7141:51"><expr pos:start="7141:44" pos:end="7141:51"><name pos:start="7141:44" pos:end="7141:51">pc_start</name></expr></argument>, <argument pos:start="7141:54" pos:end="7141:76"><expr pos:start="7141:54" pos:end="7141:76"><name pos:start="7141:54" pos:end="7141:70">SVM_EXIT_READ_DR0</name> <operator pos:start="7141:72" pos:end="7141:72">+</operator> <name pos:start="7141:74" pos:end="7141:76">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7143:17" pos:end="7143:52"><expr pos:start="7143:17" pos:end="7143:51"><call pos:start="7143:17" pos:end="7143:51"><name pos:start="7143:17" pos:end="7143:32">tcg_gen_movi_i32</name><argument_list pos:start="7143:33" pos:end="7143:51">(<argument pos:start="7143:34" pos:end="7143:45"><expr pos:start="7143:34" pos:end="7143:45"><name pos:start="7143:34" pos:end="7143:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="7143:48" pos:end="7143:50"><expr pos:start="7143:48" pos:end="7143:50"><name pos:start="7143:48" pos:end="7143:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7145:17" pos:end="7145:65"><expr pos:start="7145:17" pos:end="7145:64"><call pos:start="7145:17" pos:end="7145:64"><name pos:start="7145:17" pos:end="7145:33">gen_helper_get_dr</name><argument_list pos:start="7145:34" pos:end="7145:64">(<argument pos:start="7145:35" pos:end="7145:40"><expr pos:start="7145:35" pos:end="7145:40"><name pos:start="7145:35" pos:end="7145:40">cpu_T0</name></expr></argument>, <argument pos:start="7145:43" pos:end="7145:49"><expr pos:start="7145:43" pos:end="7145:49"><name pos:start="7145:43" pos:end="7145:49">cpu_env</name></expr></argument>, <argument pos:start="7145:52" pos:end="7145:63"><expr pos:start="7145:52" pos:end="7145:63"><name pos:start="7145:52" pos:end="7145:63">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7147:17" pos:end="7147:49"><expr pos:start="7147:17" pos:end="7147:48"><call pos:start="7147:17" pos:end="7147:48"><name pos:start="7147:17" pos:end="7147:32">gen_op_mov_reg_v</name><argument_list pos:start="7147:33" pos:end="7147:48">(<argument pos:start="7147:34" pos:end="7147:35"><expr pos:start="7147:34" pos:end="7147:35"><name pos:start="7147:34" pos:end="7147:35">ot</name></expr></argument>, <argument pos:start="7147:38" pos:end="7147:39"><expr pos:start="7147:38" pos:end="7147:39"><name pos:start="7147:38" pos:end="7147:39">rm</name></expr></argument>, <argument pos:start="7147:42" pos:end="7147:47"><expr pos:start="7147:42" pos:end="7147:47"><name pos:start="7147:42" pos:end="7147:47">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="7153:9" pos:end="7153:14">break;</break>

    <case pos:start="7155:5" pos:end="7155:15">case <expr pos:start="7155:10" pos:end="7155:14"><literal type="number" pos:start="7155:10" pos:end="7155:14">0x106</literal></expr>:</case> <comment type="block" pos:start="7155:17" pos:end="7155:26">/* clts */</comment>

        <if_stmt pos:start="7157:9" pos:end="7173:9"><if pos:start="7157:9" pos:end="7161:9">if <condition pos:start="7157:12" pos:end="7157:24">(<expr pos:start="7157:13" pos:end="7157:23"><name pos:start="7157:13" pos:end="7157:18"><name pos:start="7157:13" pos:end="7157:13">s</name><operator pos:start="7157:14" pos:end="7157:15">-&gt;</operator><name pos:start="7157:16" pos:end="7157:18">cpl</name></name> <operator pos:start="7157:20" pos:end="7157:21">!=</operator> <literal type="number" pos:start="7157:23" pos:end="7157:23">0</literal></expr>)</condition> <block pos:start="7157:26" pos:end="7161:9">{<block_content pos:start="7159:13" pos:end="7159:64">

            <expr_stmt pos:start="7159:13" pos:end="7159:64"><expr pos:start="7159:13" pos:end="7159:63"><call pos:start="7159:13" pos:end="7159:63"><name pos:start="7159:13" pos:end="7159:25">gen_exception</name><argument_list pos:start="7159:26" pos:end="7159:63">(<argument pos:start="7159:27" pos:end="7159:27"><expr pos:start="7159:27" pos:end="7159:27"><name pos:start="7159:27" pos:end="7159:27">s</name></expr></argument>, <argument pos:start="7159:30" pos:end="7159:39"><expr pos:start="7159:30" pos:end="7159:39"><name pos:start="7159:30" pos:end="7159:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="7159:42" pos:end="7159:62"><expr pos:start="7159:42" pos:end="7159:62"><name pos:start="7159:42" pos:end="7159:49">pc_start</name> <operator pos:start="7159:51" pos:end="7159:51">-</operator> <name pos:start="7159:53" pos:end="7159:62"><name pos:start="7159:53" pos:end="7159:53">s</name><operator pos:start="7159:54" pos:end="7159:55">-&gt;</operator><name pos:start="7159:56" pos:end="7159:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="7161:11" pos:end="7173:9">else <block pos:start="7161:16" pos:end="7173:9">{<block_content pos:start="7163:13" pos:end="7171:23">

            <expr_stmt pos:start="7163:13" pos:end="7163:69"><expr pos:start="7163:13" pos:end="7163:68"><call pos:start="7163:13" pos:end="7163:68"><name pos:start="7163:13" pos:end="7163:35">gen_svm_check_intercept</name><argument_list pos:start="7163:36" pos:end="7163:68">(<argument pos:start="7163:37" pos:end="7163:37"><expr pos:start="7163:37" pos:end="7163:37"><name pos:start="7163:37" pos:end="7163:37">s</name></expr></argument>, <argument pos:start="7163:40" pos:end="7163:47"><expr pos:start="7163:40" pos:end="7163:47"><name pos:start="7163:40" pos:end="7163:47">pc_start</name></expr></argument>, <argument pos:start="7163:50" pos:end="7163:67"><expr pos:start="7163:50" pos:end="7163:67"><name pos:start="7163:50" pos:end="7163:67">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7165:13" pos:end="7165:37"><expr pos:start="7165:13" pos:end="7165:36"><call pos:start="7165:13" pos:end="7165:36"><name pos:start="7165:13" pos:end="7165:27">gen_helper_clts</name><argument_list pos:start="7165:28" pos:end="7165:36">(<argument pos:start="7165:29" pos:end="7165:35"><expr pos:start="7165:29" pos:end="7165:35"><name pos:start="7165:29" pos:end="7165:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="7167:13" pos:end="7167:62">/* abort block because static cpu state changed */</comment>

            <expr_stmt pos:start="7169:13" pos:end="7169:43"><expr pos:start="7169:13" pos:end="7169:42"><call pos:start="7169:13" pos:end="7169:42"><name pos:start="7169:13" pos:end="7169:22">gen_jmp_im</name><argument_list pos:start="7169:23" pos:end="7169:42">(<argument pos:start="7169:24" pos:end="7169:41"><expr pos:start="7169:24" pos:end="7169:41"><name pos:start="7169:24" pos:end="7169:28"><name pos:start="7169:24" pos:end="7169:24">s</name><operator pos:start="7169:25" pos:end="7169:26">-&gt;</operator><name pos:start="7169:27" pos:end="7169:28">pc</name></name> <operator pos:start="7169:30" pos:end="7169:30">-</operator> <name pos:start="7169:32" pos:end="7169:41"><name pos:start="7169:32" pos:end="7169:32">s</name><operator pos:start="7169:33" pos:end="7169:34">-&gt;</operator><name pos:start="7169:35" pos:end="7169:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7171:13" pos:end="7171:23"><expr pos:start="7171:13" pos:end="7171:22"><call pos:start="7171:13" pos:end="7171:22"><name pos:start="7171:13" pos:end="7171:19">gen_eob</name><argument_list pos:start="7171:20" pos:end="7171:22">(<argument pos:start="7171:21" pos:end="7171:21"><expr pos:start="7171:21" pos:end="7171:21"><name pos:start="7171:21" pos:end="7171:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="7175:9" pos:end="7175:14">break;</break>

    <comment type="block" pos:start="7177:5" pos:end="7177:53">/* MMX/3DNow!/SSE/SSE2/SSE3/SSSE3/SSE4 support */</comment>

    <case pos:start="7179:5" pos:end="7179:15">case <expr pos:start="7179:10" pos:end="7179:14"><literal type="number" pos:start="7179:10" pos:end="7179:14">0x1c3</literal></expr>:</case> <comment type="block" pos:start="7179:17" pos:end="7179:37">/* MOVNTI reg, mem */</comment>

        <if_stmt pos:start="7181:9" pos:end="7183:28"><if pos:start="7181:9" pos:end="7183:28">if <condition pos:start="7181:12" pos:end="7181:46">(<expr pos:start="7181:13" pos:end="7181:45"><operator pos:start="7181:13" pos:end="7181:13">!</operator><operator pos:start="7181:14" pos:end="7181:14">(</operator><name pos:start="7181:15" pos:end="7181:31"><name pos:start="7181:15" pos:end="7181:15">s</name><operator pos:start="7181:16" pos:end="7181:17">-&gt;</operator><name pos:start="7181:18" pos:end="7181:31">cpuid_features</name></name> <operator pos:start="7181:33" pos:end="7181:33">&amp;</operator> <name pos:start="7181:35" pos:end="7181:44">CPUID_SSE2</name><operator pos:start="7181:45" pos:end="7181:45">)</operator></expr>)</condition><block type="pseudo" pos:start="7183:13" pos:end="7183:28"><block_content pos:start="7183:13" pos:end="7183:28">

            <goto pos:start="7183:13" pos:end="7183:28">goto <name pos:start="7183:18" pos:end="7183:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7185:9" pos:end="7185:29"><expr pos:start="7185:9" pos:end="7185:28"><name pos:start="7185:9" pos:end="7185:10">ot</name> <operator pos:start="7185:12" pos:end="7185:12">=</operator> <call pos:start="7185:14" pos:end="7185:28"><name pos:start="7185:14" pos:end="7185:21">mo_64_32</name><argument_list pos:start="7185:22" pos:end="7185:28">(<argument pos:start="7185:23" pos:end="7185:27"><expr pos:start="7185:23" pos:end="7185:27"><name pos:start="7185:23" pos:end="7185:27">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7187:9" pos:end="7187:38"><expr pos:start="7187:9" pos:end="7187:37"><name pos:start="7187:9" pos:end="7187:13">modrm</name> <operator pos:start="7187:15" pos:end="7187:15">=</operator> <call pos:start="7187:17" pos:end="7187:37"><name pos:start="7187:17" pos:end="7187:29">x86_ldub_code</name><argument_list pos:start="7187:30" pos:end="7187:37">(<argument pos:start="7187:31" pos:end="7187:33"><expr pos:start="7187:31" pos:end="7187:33"><name pos:start="7187:31" pos:end="7187:33">env</name></expr></argument>, <argument pos:start="7187:36" pos:end="7187:36"><expr pos:start="7187:36" pos:end="7187:36"><name pos:start="7187:36" pos:end="7187:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7189:9" pos:end="7189:31"><expr pos:start="7189:9" pos:end="7189:30"><name pos:start="7189:9" pos:end="7189:11">mod</name> <operator pos:start="7189:13" pos:end="7189:13">=</operator> <operator pos:start="7189:15" pos:end="7189:15">(</operator><name pos:start="7189:16" pos:end="7189:20">modrm</name> <operator pos:start="7189:22" pos:end="7189:23">&gt;&gt;</operator> <literal type="number" pos:start="7189:25" pos:end="7189:25">6</literal><operator pos:start="7189:26" pos:end="7189:26">)</operator> <operator pos:start="7189:28" pos:end="7189:28">&amp;</operator> <literal type="number" pos:start="7189:30" pos:end="7189:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="7191:9" pos:end="7193:28"><if pos:start="7191:9" pos:end="7193:28">if <condition pos:start="7191:12" pos:end="7191:21">(<expr pos:start="7191:13" pos:end="7191:20"><name pos:start="7191:13" pos:end="7191:15">mod</name> <operator pos:start="7191:17" pos:end="7191:18">==</operator> <literal type="number" pos:start="7191:20" pos:end="7191:20">3</literal></expr>)</condition><block type="pseudo" pos:start="7193:13" pos:end="7193:28"><block_content pos:start="7193:13" pos:end="7193:28">

            <goto pos:start="7193:13" pos:end="7193:28">goto <name pos:start="7193:18" pos:end="7193:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7195:9" pos:end="7195:41"><expr pos:start="7195:9" pos:end="7195:40"><name pos:start="7195:9" pos:end="7195:11">reg</name> <operator pos:start="7195:13" pos:end="7195:13">=</operator> <operator pos:start="7195:15" pos:end="7195:15">(</operator><operator pos:start="7195:16" pos:end="7195:16">(</operator><name pos:start="7195:17" pos:end="7195:21">modrm</name> <operator pos:start="7195:23" pos:end="7195:24">&gt;&gt;</operator> <literal type="number" pos:start="7195:26" pos:end="7195:26">3</literal><operator pos:start="7195:27" pos:end="7195:27">)</operator> <operator pos:start="7195:29" pos:end="7195:29">&amp;</operator> <literal type="number" pos:start="7195:31" pos:end="7195:31">7</literal><operator pos:start="7195:32" pos:end="7195:32">)</operator> <operator pos:start="7195:34" pos:end="7195:34">|</operator> <name pos:start="7195:36" pos:end="7195:40">rex_r</name></expr>;</expr_stmt>

        <comment type="block" pos:start="7197:9" pos:end="7197:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="7199:9" pos:end="7199:50"><expr pos:start="7199:9" pos:end="7199:49"><call pos:start="7199:9" pos:end="7199:49"><name pos:start="7199:9" pos:end="7199:22">gen_ldst_modrm</name><argument_list pos:start="7199:23" pos:end="7199:49">(<argument pos:start="7199:24" pos:end="7199:26"><expr pos:start="7199:24" pos:end="7199:26"><name pos:start="7199:24" pos:end="7199:26">env</name></expr></argument>, <argument pos:start="7199:29" pos:end="7199:29"><expr pos:start="7199:29" pos:end="7199:29"><name pos:start="7199:29" pos:end="7199:29">s</name></expr></argument>, <argument pos:start="7199:32" pos:end="7199:36"><expr pos:start="7199:32" pos:end="7199:36"><name pos:start="7199:32" pos:end="7199:36">modrm</name></expr></argument>, <argument pos:start="7199:39" pos:end="7199:40"><expr pos:start="7199:39" pos:end="7199:40"><name pos:start="7199:39" pos:end="7199:40">ot</name></expr></argument>, <argument pos:start="7199:43" pos:end="7199:45"><expr pos:start="7199:43" pos:end="7199:45"><name pos:start="7199:43" pos:end="7199:45">reg</name></expr></argument>, <argument pos:start="7199:48" pos:end="7199:48"><expr pos:start="7199:48" pos:end="7199:48"><literal type="number" pos:start="7199:48" pos:end="7199:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7201:9" pos:end="7201:14">break;</break>

    <case pos:start="7203:5" pos:end="7203:15">case <expr pos:start="7203:10" pos:end="7203:14"><literal type="number" pos:start="7203:10" pos:end="7203:14">0x1ae</literal></expr>:</case>

        <expr_stmt pos:start="7205:9" pos:end="7205:38"><expr pos:start="7205:9" pos:end="7205:37"><name pos:start="7205:9" pos:end="7205:13">modrm</name> <operator pos:start="7205:15" pos:end="7205:15">=</operator> <call pos:start="7205:17" pos:end="7205:37"><name pos:start="7205:17" pos:end="7205:29">x86_ldub_code</name><argument_list pos:start="7205:30" pos:end="7205:37">(<argument pos:start="7205:31" pos:end="7205:33"><expr pos:start="7205:31" pos:end="7205:33"><name pos:start="7205:31" pos:end="7205:33">env</name></expr></argument>, <argument pos:start="7205:36" pos:end="7205:36"><expr pos:start="7205:36" pos:end="7205:36"><name pos:start="7205:36" pos:end="7205:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="7207:9" pos:end="7593:9">switch <condition pos:start="7207:16" pos:end="7207:22">(<expr pos:start="7207:17" pos:end="7207:21"><name pos:start="7207:17" pos:end="7207:21">modrm</name></expr>)</condition> <block pos:start="7207:24" pos:end="7593:9">{<block_content pos:start="7209:9" pos:end="7591:28">

        <expr_stmt pos:start="7209:9" pos:end="7209:29"><expr pos:start="7209:9" pos:end="7209:29"><call pos:start="7209:9" pos:end="7209:28"><name pos:start="7209:9" pos:end="7209:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="7209:26" pos:end="7209:28">(<argument pos:start="7209:27" pos:end="7209:27"><expr pos:start="7209:27" pos:end="7209:27"><literal type="number" pos:start="7209:27" pos:end="7209:27">0</literal></expr></argument>)</argument_list></call><operator pos:start="7209:29" pos:end="7209:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="7209:31" pos:end="7209:42">/* fxsave */</comment>

            <if_stmt pos:start="7211:13" pos:end="7217:13"><if pos:start="7211:13" pos:end="7217:13">if <condition pos:start="7211:16" pos:end="7213:44">(<expr pos:start="7211:17" pos:end="7213:43"><operator pos:start="7211:17" pos:end="7211:17">!</operator><operator pos:start="7211:18" pos:end="7211:18">(</operator><name pos:start="7211:19" pos:end="7211:35"><name pos:start="7211:19" pos:end="7211:19">s</name><operator pos:start="7211:20" pos:end="7211:21">-&gt;</operator><name pos:start="7211:22" pos:end="7211:35">cpuid_features</name></name> <operator pos:start="7211:37" pos:end="7211:37">&amp;</operator> <name pos:start="7211:39" pos:end="7211:48">CPUID_FXSR</name><operator pos:start="7211:49" pos:end="7211:49">)</operator>

                <operator pos:start="7213:17" pos:end="7213:18">||</operator> <operator pos:start="7213:20" pos:end="7213:20">(</operator><name pos:start="7213:21" pos:end="7213:28">prefixes</name> <operator pos:start="7213:30" pos:end="7213:30">&amp;</operator> <name pos:start="7213:32" pos:end="7213:42">PREFIX_LOCK</name><operator pos:start="7213:43" pos:end="7213:43">)</operator></expr>)</condition> <block pos:start="7213:46" pos:end="7217:13">{<block_content pos:start="7215:17" pos:end="7215:32">

                <goto pos:start="7215:17" pos:end="7215:32">goto <name pos:start="7215:22" pos:end="7215:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7219:13" pos:end="7225:13"><if pos:start="7219:13" pos:end="7225:13">if <condition pos:start="7219:16" pos:end="7219:67">(<expr pos:start="7219:17" pos:end="7219:66"><operator pos:start="7219:17" pos:end="7219:17">(</operator><name pos:start="7219:18" pos:end="7219:25"><name pos:start="7219:18" pos:end="7219:18">s</name><operator pos:start="7219:19" pos:end="7219:20">-&gt;</operator><name pos:start="7219:21" pos:end="7219:25">flags</name></name> <operator pos:start="7219:27" pos:end="7219:27">&amp;</operator> <name pos:start="7219:29" pos:end="7219:38">HF_EM_MASK</name><operator pos:start="7219:39" pos:end="7219:39">)</operator> <operator pos:start="7219:41" pos:end="7219:42">||</operator> <operator pos:start="7219:44" pos:end="7219:44">(</operator><name pos:start="7219:45" pos:end="7219:52"><name pos:start="7219:45" pos:end="7219:45">s</name><operator pos:start="7219:46" pos:end="7219:47">-&gt;</operator><name pos:start="7219:48" pos:end="7219:52">flags</name></name> <operator pos:start="7219:54" pos:end="7219:54">&amp;</operator> <name pos:start="7219:56" pos:end="7219:65">HF_TS_MASK</name><operator pos:start="7219:66" pos:end="7219:66">)</operator></expr>)</condition> <block pos:start="7219:69" pos:end="7225:13">{<block_content pos:start="7221:17" pos:end="7223:22">

                <expr_stmt pos:start="7221:17" pos:end="7221:69"><expr pos:start="7221:17" pos:end="7221:68"><call pos:start="7221:17" pos:end="7221:68"><name pos:start="7221:17" pos:end="7221:29">gen_exception</name><argument_list pos:start="7221:30" pos:end="7221:68">(<argument pos:start="7221:31" pos:end="7221:31"><expr pos:start="7221:31" pos:end="7221:31"><name pos:start="7221:31" pos:end="7221:31">s</name></expr></argument>, <argument pos:start="7221:34" pos:end="7221:44"><expr pos:start="7221:34" pos:end="7221:44"><name pos:start="7221:34" pos:end="7221:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="7221:47" pos:end="7221:67"><expr pos:start="7221:47" pos:end="7221:67"><name pos:start="7221:47" pos:end="7221:54">pc_start</name> <operator pos:start="7221:56" pos:end="7221:56">-</operator> <name pos:start="7221:58" pos:end="7221:67"><name pos:start="7221:58" pos:end="7221:58">s</name><operator pos:start="7221:59" pos:end="7221:60">-&gt;</operator><name pos:start="7221:61" pos:end="7221:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="7223:17" pos:end="7223:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7227:13" pos:end="7227:41"><expr pos:start="7227:13" pos:end="7227:40"><call pos:start="7227:13" pos:end="7227:40"><name pos:start="7227:13" pos:end="7227:25">gen_lea_modrm</name><argument_list pos:start="7227:26" pos:end="7227:40">(<argument pos:start="7227:27" pos:end="7227:29"><expr pos:start="7227:27" pos:end="7227:29"><name pos:start="7227:27" pos:end="7227:29">env</name></expr></argument>, <argument pos:start="7227:32" pos:end="7227:32"><expr pos:start="7227:32" pos:end="7227:32"><name pos:start="7227:32" pos:end="7227:32">s</name></expr></argument>, <argument pos:start="7227:35" pos:end="7227:39"><expr pos:start="7227:35" pos:end="7227:39"><name pos:start="7227:35" pos:end="7227:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7229:13" pos:end="7229:47"><expr pos:start="7229:13" pos:end="7229:46"><call pos:start="7229:13" pos:end="7229:46"><name pos:start="7229:13" pos:end="7229:29">gen_helper_fxsave</name><argument_list pos:start="7229:30" pos:end="7229:46">(<argument pos:start="7229:31" pos:end="7229:37"><expr pos:start="7229:31" pos:end="7229:37"><name pos:start="7229:31" pos:end="7229:37">cpu_env</name></expr></argument>, <argument pos:start="7229:40" pos:end="7229:45"><expr pos:start="7229:40" pos:end="7229:45"><name pos:start="7229:40" pos:end="7229:45">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7231:13" pos:end="7231:18">break;</break>



        <expr_stmt pos:start="7235:9" pos:end="7235:29"><expr pos:start="7235:9" pos:end="7235:29"><call pos:start="7235:9" pos:end="7235:28"><name pos:start="7235:9" pos:end="7235:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="7235:26" pos:end="7235:28">(<argument pos:start="7235:27" pos:end="7235:27"><expr pos:start="7235:27" pos:end="7235:27"><literal type="number" pos:start="7235:27" pos:end="7235:27">1</literal></expr></argument>)</argument_list></call><operator pos:start="7235:29" pos:end="7235:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="7235:31" pos:end="7235:43">/* fxrstor */</comment>

            <if_stmt pos:start="7237:13" pos:end="7243:13"><if pos:start="7237:13" pos:end="7243:13">if <condition pos:start="7237:16" pos:end="7239:44">(<expr pos:start="7237:17" pos:end="7239:43"><operator pos:start="7237:17" pos:end="7237:17">!</operator><operator pos:start="7237:18" pos:end="7237:18">(</operator><name pos:start="7237:19" pos:end="7237:35"><name pos:start="7237:19" pos:end="7237:19">s</name><operator pos:start="7237:20" pos:end="7237:21">-&gt;</operator><name pos:start="7237:22" pos:end="7237:35">cpuid_features</name></name> <operator pos:start="7237:37" pos:end="7237:37">&amp;</operator> <name pos:start="7237:39" pos:end="7237:48">CPUID_FXSR</name><operator pos:start="7237:49" pos:end="7237:49">)</operator>

                <operator pos:start="7239:17" pos:end="7239:18">||</operator> <operator pos:start="7239:20" pos:end="7239:20">(</operator><name pos:start="7239:21" pos:end="7239:28">prefixes</name> <operator pos:start="7239:30" pos:end="7239:30">&amp;</operator> <name pos:start="7239:32" pos:end="7239:42">PREFIX_LOCK</name><operator pos:start="7239:43" pos:end="7239:43">)</operator></expr>)</condition> <block pos:start="7239:46" pos:end="7243:13">{<block_content pos:start="7241:17" pos:end="7241:32">

                <goto pos:start="7241:17" pos:end="7241:32">goto <name pos:start="7241:22" pos:end="7241:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7245:13" pos:end="7251:13"><if pos:start="7245:13" pos:end="7251:13">if <condition pos:start="7245:16" pos:end="7245:67">(<expr pos:start="7245:17" pos:end="7245:66"><operator pos:start="7245:17" pos:end="7245:17">(</operator><name pos:start="7245:18" pos:end="7245:25"><name pos:start="7245:18" pos:end="7245:18">s</name><operator pos:start="7245:19" pos:end="7245:20">-&gt;</operator><name pos:start="7245:21" pos:end="7245:25">flags</name></name> <operator pos:start="7245:27" pos:end="7245:27">&amp;</operator> <name pos:start="7245:29" pos:end="7245:38">HF_EM_MASK</name><operator pos:start="7245:39" pos:end="7245:39">)</operator> <operator pos:start="7245:41" pos:end="7245:42">||</operator> <operator pos:start="7245:44" pos:end="7245:44">(</operator><name pos:start="7245:45" pos:end="7245:52"><name pos:start="7245:45" pos:end="7245:45">s</name><operator pos:start="7245:46" pos:end="7245:47">-&gt;</operator><name pos:start="7245:48" pos:end="7245:52">flags</name></name> <operator pos:start="7245:54" pos:end="7245:54">&amp;</operator> <name pos:start="7245:56" pos:end="7245:65">HF_TS_MASK</name><operator pos:start="7245:66" pos:end="7245:66">)</operator></expr>)</condition> <block pos:start="7245:69" pos:end="7251:13">{<block_content pos:start="7247:17" pos:end="7249:22">

                <expr_stmt pos:start="7247:17" pos:end="7247:69"><expr pos:start="7247:17" pos:end="7247:68"><call pos:start="7247:17" pos:end="7247:68"><name pos:start="7247:17" pos:end="7247:29">gen_exception</name><argument_list pos:start="7247:30" pos:end="7247:68">(<argument pos:start="7247:31" pos:end="7247:31"><expr pos:start="7247:31" pos:end="7247:31"><name pos:start="7247:31" pos:end="7247:31">s</name></expr></argument>, <argument pos:start="7247:34" pos:end="7247:44"><expr pos:start="7247:34" pos:end="7247:44"><name pos:start="7247:34" pos:end="7247:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="7247:47" pos:end="7247:67"><expr pos:start="7247:47" pos:end="7247:67"><name pos:start="7247:47" pos:end="7247:54">pc_start</name> <operator pos:start="7247:56" pos:end="7247:56">-</operator> <name pos:start="7247:58" pos:end="7247:67"><name pos:start="7247:58" pos:end="7247:58">s</name><operator pos:start="7247:59" pos:end="7247:60">-&gt;</operator><name pos:start="7247:61" pos:end="7247:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="7249:17" pos:end="7249:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7253:13" pos:end="7253:41"><expr pos:start="7253:13" pos:end="7253:40"><call pos:start="7253:13" pos:end="7253:40"><name pos:start="7253:13" pos:end="7253:25">gen_lea_modrm</name><argument_list pos:start="7253:26" pos:end="7253:40">(<argument pos:start="7253:27" pos:end="7253:29"><expr pos:start="7253:27" pos:end="7253:29"><name pos:start="7253:27" pos:end="7253:29">env</name></expr></argument>, <argument pos:start="7253:32" pos:end="7253:32"><expr pos:start="7253:32" pos:end="7253:32"><name pos:start="7253:32" pos:end="7253:32">s</name></expr></argument>, <argument pos:start="7253:35" pos:end="7253:39"><expr pos:start="7253:35" pos:end="7253:39"><name pos:start="7253:35" pos:end="7253:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7255:13" pos:end="7255:48"><expr pos:start="7255:13" pos:end="7255:47"><call pos:start="7255:13" pos:end="7255:47"><name pos:start="7255:13" pos:end="7255:30">gen_helper_fxrstor</name><argument_list pos:start="7255:31" pos:end="7255:47">(<argument pos:start="7255:32" pos:end="7255:38"><expr pos:start="7255:32" pos:end="7255:38"><name pos:start="7255:32" pos:end="7255:38">cpu_env</name></expr></argument>, <argument pos:start="7255:41" pos:end="7255:46"><expr pos:start="7255:41" pos:end="7255:46"><name pos:start="7255:41" pos:end="7255:46">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7257:13" pos:end="7257:18">break;</break>



        <expr_stmt pos:start="7261:9" pos:end="7261:29"><expr pos:start="7261:9" pos:end="7261:29"><call pos:start="7261:9" pos:end="7261:28"><name pos:start="7261:9" pos:end="7261:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="7261:26" pos:end="7261:28">(<argument pos:start="7261:27" pos:end="7261:27"><expr pos:start="7261:27" pos:end="7261:27"><literal type="number" pos:start="7261:27" pos:end="7261:27">2</literal></expr></argument>)</argument_list></call><operator pos:start="7261:29" pos:end="7261:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="7261:31" pos:end="7261:43">/* ldmxcsr */</comment>

            <if_stmt pos:start="7263:13" pos:end="7267:13"><if pos:start="7263:13" pos:end="7267:13">if <condition pos:start="7263:16" pos:end="7263:72">(<expr pos:start="7263:17" pos:end="7263:71"><operator pos:start="7263:17" pos:end="7263:17">(</operator><name pos:start="7263:18" pos:end="7263:25"><name pos:start="7263:18" pos:end="7263:18">s</name><operator pos:start="7263:19" pos:end="7263:20">-&gt;</operator><name pos:start="7263:21" pos:end="7263:25">flags</name></name> <operator pos:start="7263:27" pos:end="7263:27">&amp;</operator> <name pos:start="7263:29" pos:end="7263:38">HF_EM_MASK</name><operator pos:start="7263:39" pos:end="7263:39">)</operator> <operator pos:start="7263:41" pos:end="7263:42">||</operator> <operator pos:start="7263:44" pos:end="7263:44">!</operator><operator pos:start="7263:45" pos:end="7263:45">(</operator><name pos:start="7263:46" pos:end="7263:53"><name pos:start="7263:46" pos:end="7263:46">s</name><operator pos:start="7263:47" pos:end="7263:48">-&gt;</operator><name pos:start="7263:49" pos:end="7263:53">flags</name></name> <operator pos:start="7263:55" pos:end="7263:55">&amp;</operator> <name pos:start="7263:57" pos:end="7263:70">HF_OSFXSR_MASK</name><operator pos:start="7263:71" pos:end="7263:71">)</operator></expr>)</condition> <block pos:start="7263:74" pos:end="7267:13">{<block_content pos:start="7265:17" pos:end="7265:32">

                <goto pos:start="7265:17" pos:end="7265:32">goto <name pos:start="7265:22" pos:end="7265:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7269:13" pos:end="7275:13"><if pos:start="7269:13" pos:end="7275:13">if <condition pos:start="7269:16" pos:end="7269:38">(<expr pos:start="7269:17" pos:end="7269:37"><name pos:start="7269:17" pos:end="7269:24"><name pos:start="7269:17" pos:end="7269:17">s</name><operator pos:start="7269:18" pos:end="7269:19">-&gt;</operator><name pos:start="7269:20" pos:end="7269:24">flags</name></name> <operator pos:start="7269:26" pos:end="7269:26">&amp;</operator> <name pos:start="7269:28" pos:end="7269:37">HF_TS_MASK</name></expr>)</condition> <block pos:start="7269:40" pos:end="7275:13">{<block_content pos:start="7271:17" pos:end="7273:22">

                <expr_stmt pos:start="7271:17" pos:end="7271:69"><expr pos:start="7271:17" pos:end="7271:68"><call pos:start="7271:17" pos:end="7271:68"><name pos:start="7271:17" pos:end="7271:29">gen_exception</name><argument_list pos:start="7271:30" pos:end="7271:68">(<argument pos:start="7271:31" pos:end="7271:31"><expr pos:start="7271:31" pos:end="7271:31"><name pos:start="7271:31" pos:end="7271:31">s</name></expr></argument>, <argument pos:start="7271:34" pos:end="7271:44"><expr pos:start="7271:34" pos:end="7271:44"><name pos:start="7271:34" pos:end="7271:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="7271:47" pos:end="7271:67"><expr pos:start="7271:47" pos:end="7271:67"><name pos:start="7271:47" pos:end="7271:54">pc_start</name> <operator pos:start="7271:56" pos:end="7271:56">-</operator> <name pos:start="7271:58" pos:end="7271:67"><name pos:start="7271:58" pos:end="7271:58">s</name><operator pos:start="7271:59" pos:end="7271:60">-&gt;</operator><name pos:start="7271:61" pos:end="7271:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="7273:17" pos:end="7273:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7277:13" pos:end="7277:41"><expr pos:start="7277:13" pos:end="7277:40"><call pos:start="7277:13" pos:end="7277:40"><name pos:start="7277:13" pos:end="7277:25">gen_lea_modrm</name><argument_list pos:start="7277:26" pos:end="7277:40">(<argument pos:start="7277:27" pos:end="7277:29"><expr pos:start="7277:27" pos:end="7277:29"><name pos:start="7277:27" pos:end="7277:29">env</name></expr></argument>, <argument pos:start="7277:32" pos:end="7277:32"><expr pos:start="7277:32" pos:end="7277:32"><name pos:start="7277:32" pos:end="7277:32">s</name></expr></argument>, <argument pos:start="7277:35" pos:end="7277:39"><expr pos:start="7277:35" pos:end="7277:39"><name pos:start="7277:35" pos:end="7277:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7279:13" pos:end="7279:77"><expr pos:start="7279:13" pos:end="7279:76"><call pos:start="7279:13" pos:end="7279:76"><name pos:start="7279:13" pos:end="7279:31">tcg_gen_qemu_ld_i32</name><argument_list pos:start="7279:32" pos:end="7279:76">(<argument pos:start="7279:33" pos:end="7279:44"><expr pos:start="7279:33" pos:end="7279:44"><name pos:start="7279:33" pos:end="7279:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="7279:47" pos:end="7279:52"><expr pos:start="7279:47" pos:end="7279:52"><name pos:start="7279:47" pos:end="7279:52">cpu_A0</name></expr></argument>, <argument pos:start="7279:55" pos:end="7279:66"><expr pos:start="7279:55" pos:end="7279:66"><name pos:start="7279:55" pos:end="7279:66"><name pos:start="7279:55" pos:end="7279:55">s</name><operator pos:start="7279:56" pos:end="7279:57">-&gt;</operator><name pos:start="7279:58" pos:end="7279:66">mem_index</name></name></expr></argument>, <argument pos:start="7279:69" pos:end="7279:75"><expr pos:start="7279:69" pos:end="7279:75"><name pos:start="7279:69" pos:end="7279:75">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7281:13" pos:end="7281:54"><expr pos:start="7281:13" pos:end="7281:53"><call pos:start="7281:13" pos:end="7281:53"><name pos:start="7281:13" pos:end="7281:30">gen_helper_ldmxcsr</name><argument_list pos:start="7281:31" pos:end="7281:53">(<argument pos:start="7281:32" pos:end="7281:38"><expr pos:start="7281:32" pos:end="7281:38"><name pos:start="7281:32" pos:end="7281:38">cpu_env</name></expr></argument>, <argument pos:start="7281:41" pos:end="7281:52"><expr pos:start="7281:41" pos:end="7281:52"><name pos:start="7281:41" pos:end="7281:52">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7283:13" pos:end="7283:18">break;</break>



        <expr_stmt pos:start="7287:9" pos:end="7287:29"><expr pos:start="7287:9" pos:end="7287:29"><call pos:start="7287:9" pos:end="7287:28"><name pos:start="7287:9" pos:end="7287:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="7287:26" pos:end="7287:28">(<argument pos:start="7287:27" pos:end="7287:27"><expr pos:start="7287:27" pos:end="7287:27"><literal type="number" pos:start="7287:27" pos:end="7287:27">3</literal></expr></argument>)</argument_list></call><operator pos:start="7287:29" pos:end="7287:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="7287:31" pos:end="7287:43">/* stmxcsr */</comment>

            <if_stmt pos:start="7289:13" pos:end="7293:13"><if pos:start="7289:13" pos:end="7293:13">if <condition pos:start="7289:16" pos:end="7289:72">(<expr pos:start="7289:17" pos:end="7289:71"><operator pos:start="7289:17" pos:end="7289:17">(</operator><name pos:start="7289:18" pos:end="7289:25"><name pos:start="7289:18" pos:end="7289:18">s</name><operator pos:start="7289:19" pos:end="7289:20">-&gt;</operator><name pos:start="7289:21" pos:end="7289:25">flags</name></name> <operator pos:start="7289:27" pos:end="7289:27">&amp;</operator> <name pos:start="7289:29" pos:end="7289:38">HF_EM_MASK</name><operator pos:start="7289:39" pos:end="7289:39">)</operator> <operator pos:start="7289:41" pos:end="7289:42">||</operator> <operator pos:start="7289:44" pos:end="7289:44">!</operator><operator pos:start="7289:45" pos:end="7289:45">(</operator><name pos:start="7289:46" pos:end="7289:53"><name pos:start="7289:46" pos:end="7289:46">s</name><operator pos:start="7289:47" pos:end="7289:48">-&gt;</operator><name pos:start="7289:49" pos:end="7289:53">flags</name></name> <operator pos:start="7289:55" pos:end="7289:55">&amp;</operator> <name pos:start="7289:57" pos:end="7289:70">HF_OSFXSR_MASK</name><operator pos:start="7289:71" pos:end="7289:71">)</operator></expr>)</condition> <block pos:start="7289:74" pos:end="7293:13">{<block_content pos:start="7291:17" pos:end="7291:32">

                <goto pos:start="7291:17" pos:end="7291:32">goto <name pos:start="7291:22" pos:end="7291:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7295:13" pos:end="7301:13"><if pos:start="7295:13" pos:end="7301:13">if <condition pos:start="7295:16" pos:end="7295:38">(<expr pos:start="7295:17" pos:end="7295:37"><name pos:start="7295:17" pos:end="7295:24"><name pos:start="7295:17" pos:end="7295:17">s</name><operator pos:start="7295:18" pos:end="7295:19">-&gt;</operator><name pos:start="7295:20" pos:end="7295:24">flags</name></name> <operator pos:start="7295:26" pos:end="7295:26">&amp;</operator> <name pos:start="7295:28" pos:end="7295:37">HF_TS_MASK</name></expr>)</condition> <block pos:start="7295:40" pos:end="7301:13">{<block_content pos:start="7297:17" pos:end="7299:22">

                <expr_stmt pos:start="7297:17" pos:end="7297:69"><expr pos:start="7297:17" pos:end="7297:68"><call pos:start="7297:17" pos:end="7297:68"><name pos:start="7297:17" pos:end="7297:29">gen_exception</name><argument_list pos:start="7297:30" pos:end="7297:68">(<argument pos:start="7297:31" pos:end="7297:31"><expr pos:start="7297:31" pos:end="7297:31"><name pos:start="7297:31" pos:end="7297:31">s</name></expr></argument>, <argument pos:start="7297:34" pos:end="7297:44"><expr pos:start="7297:34" pos:end="7297:44"><name pos:start="7297:34" pos:end="7297:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="7297:47" pos:end="7297:67"><expr pos:start="7297:47" pos:end="7297:67"><name pos:start="7297:47" pos:end="7297:54">pc_start</name> <operator pos:start="7297:56" pos:end="7297:56">-</operator> <name pos:start="7297:58" pos:end="7297:67"><name pos:start="7297:58" pos:end="7297:58">s</name><operator pos:start="7297:59" pos:end="7297:60">-&gt;</operator><name pos:start="7297:61" pos:end="7297:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="7299:17" pos:end="7299:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7303:13" pos:end="7303:41"><expr pos:start="7303:13" pos:end="7303:40"><call pos:start="7303:13" pos:end="7303:40"><name pos:start="7303:13" pos:end="7303:25">gen_lea_modrm</name><argument_list pos:start="7303:26" pos:end="7303:40">(<argument pos:start="7303:27" pos:end="7303:29"><expr pos:start="7303:27" pos:end="7303:29"><name pos:start="7303:27" pos:end="7303:29">env</name></expr></argument>, <argument pos:start="7303:32" pos:end="7303:32"><expr pos:start="7303:32" pos:end="7303:32"><name pos:start="7303:32" pos:end="7303:32">s</name></expr></argument>, <argument pos:start="7303:35" pos:end="7303:39"><expr pos:start="7303:35" pos:end="7303:39"><name pos:start="7303:35" pos:end="7303:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7305:13" pos:end="7305:76"><expr pos:start="7305:13" pos:end="7305:75"><call pos:start="7305:13" pos:end="7305:75"><name pos:start="7305:13" pos:end="7305:28">tcg_gen_ld32u_tl</name><argument_list pos:start="7305:29" pos:end="7305:75">(<argument pos:start="7305:30" pos:end="7305:35"><expr pos:start="7305:30" pos:end="7305:35"><name pos:start="7305:30" pos:end="7305:35">cpu_T0</name></expr></argument>, <argument pos:start="7305:38" pos:end="7305:44"><expr pos:start="7305:38" pos:end="7305:44"><name pos:start="7305:38" pos:end="7305:44">cpu_env</name></expr></argument>, <argument pos:start="7305:47" pos:end="7305:74"><expr pos:start="7305:47" pos:end="7305:74"><call pos:start="7305:47" pos:end="7305:74"><name pos:start="7305:47" pos:end="7305:54">offsetof</name><argument_list pos:start="7305:55" pos:end="7305:74">(<argument pos:start="7305:56" pos:end="7305:66"><expr pos:start="7305:56" pos:end="7305:66"><name pos:start="7305:56" pos:end="7305:66">CPUX86State</name></expr></argument>, <argument pos:start="7305:69" pos:end="7305:73"><expr pos:start="7305:69" pos:end="7305:73"><name pos:start="7305:69" pos:end="7305:73">mxcsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7307:13" pos:end="7307:50"><expr pos:start="7307:13" pos:end="7307:49"><call pos:start="7307:13" pos:end="7307:49"><name pos:start="7307:13" pos:end="7307:23">gen_op_st_v</name><argument_list pos:start="7307:24" pos:end="7307:49">(<argument pos:start="7307:25" pos:end="7307:25"><expr pos:start="7307:25" pos:end="7307:25"><name pos:start="7307:25" pos:end="7307:25">s</name></expr></argument>, <argument pos:start="7307:28" pos:end="7307:32"><expr pos:start="7307:28" pos:end="7307:32"><name pos:start="7307:28" pos:end="7307:32">MO_32</name></expr></argument>, <argument pos:start="7307:35" pos:end="7307:40"><expr pos:start="7307:35" pos:end="7307:40"><name pos:start="7307:35" pos:end="7307:40">cpu_T0</name></expr></argument>, <argument pos:start="7307:43" pos:end="7307:48"><expr pos:start="7307:43" pos:end="7307:48"><name pos:start="7307:43" pos:end="7307:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7309:13" pos:end="7309:18">break;</break>



        <expr_stmt pos:start="7313:9" pos:end="7313:29"><expr pos:start="7313:9" pos:end="7313:29"><call pos:start="7313:9" pos:end="7313:28"><name pos:start="7313:9" pos:end="7313:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="7313:26" pos:end="7313:28">(<argument pos:start="7313:27" pos:end="7313:27"><expr pos:start="7313:27" pos:end="7313:27"><literal type="number" pos:start="7313:27" pos:end="7313:27">4</literal></expr></argument>)</argument_list></call><operator pos:start="7313:29" pos:end="7313:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="7313:31" pos:end="7313:41">/* xsave */</comment>

            <if_stmt pos:start="7315:13" pos:end="7323:13"><if pos:start="7315:13" pos:end="7323:13">if <condition pos:start="7315:16" pos:end="7319:63">(<expr pos:start="7315:17" pos:end="7319:62"><operator pos:start="7315:17" pos:end="7315:17">(</operator><name pos:start="7315:18" pos:end="7315:38"><name pos:start="7315:18" pos:end="7315:18">s</name><operator pos:start="7315:19" pos:end="7315:20">-&gt;</operator><name pos:start="7315:21" pos:end="7315:38">cpuid_ext_features</name></name> <operator pos:start="7315:40" pos:end="7315:40">&amp;</operator> <name pos:start="7315:42" pos:end="7315:56">CPUID_EXT_XSAVE</name><operator pos:start="7315:57" pos:end="7315:57">)</operator> <operator pos:start="7315:59" pos:end="7315:60">==</operator> <literal type="number" pos:start="7315:62" pos:end="7315:62">0</literal>

                <operator pos:start="7317:17" pos:end="7317:18">||</operator> <operator pos:start="7317:20" pos:end="7317:20">(</operator><name pos:start="7317:21" pos:end="7317:28">prefixes</name> <operator pos:start="7317:30" pos:end="7317:30">&amp;</operator> <operator pos:start="7317:32" pos:end="7317:32">(</operator><name pos:start="7317:33" pos:end="7317:43">PREFIX_LOCK</name> <operator pos:start="7317:45" pos:end="7317:45">|</operator> <name pos:start="7317:47" pos:end="7317:57">PREFIX_DATA</name>

                                <operator pos:start="7319:33" pos:end="7319:33">|</operator> <name pos:start="7319:35" pos:end="7319:45">PREFIX_REPZ</name> <operator pos:start="7319:47" pos:end="7319:47">|</operator> <name pos:start="7319:49" pos:end="7319:60">PREFIX_REPNZ</name><operator pos:start="7319:61" pos:end="7319:61">)</operator><operator pos:start="7319:62" pos:end="7319:62">)</operator></expr>)</condition> <block pos:start="7319:65" pos:end="7323:13">{<block_content pos:start="7321:17" pos:end="7321:32">

                <goto pos:start="7321:17" pos:end="7321:32">goto <name pos:start="7321:22" pos:end="7321:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7325:13" pos:end="7325:41"><expr pos:start="7325:13" pos:end="7325:40"><call pos:start="7325:13" pos:end="7325:40"><name pos:start="7325:13" pos:end="7325:25">gen_lea_modrm</name><argument_list pos:start="7325:26" pos:end="7325:40">(<argument pos:start="7325:27" pos:end="7325:29"><expr pos:start="7325:27" pos:end="7325:29"><name pos:start="7325:27" pos:end="7325:29">env</name></expr></argument>, <argument pos:start="7325:32" pos:end="7325:32"><expr pos:start="7325:32" pos:end="7325:32"><name pos:start="7325:32" pos:end="7325:32">s</name></expr></argument>, <argument pos:start="7325:35" pos:end="7325:39"><expr pos:start="7325:35" pos:end="7325:39"><name pos:start="7325:35" pos:end="7325:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7327:13" pos:end="7329:51"><expr pos:start="7327:13" pos:end="7329:50"><call pos:start="7327:13" pos:end="7329:50"><name pos:start="7327:13" pos:end="7327:33">tcg_gen_concat_tl_i64</name><argument_list pos:start="7327:34" pos:end="7329:50">(<argument pos:start="7327:35" pos:end="7327:46"><expr pos:start="7327:35" pos:end="7327:46"><name pos:start="7327:35" pos:end="7327:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="7327:49" pos:end="7327:63"><expr pos:start="7327:49" pos:end="7327:63"><name pos:start="7327:49" pos:end="7327:63"><name pos:start="7327:49" pos:end="7327:56">cpu_regs</name><index pos:start="7327:57" pos:end="7327:63">[<expr pos:start="7327:58" pos:end="7327:62"><name pos:start="7327:58" pos:end="7327:62">R_EAX</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="7329:35" pos:end="7329:49"><expr pos:start="7329:35" pos:end="7329:49"><name pos:start="7329:35" pos:end="7329:49"><name pos:start="7329:35" pos:end="7329:42">cpu_regs</name><index pos:start="7329:43" pos:end="7329:49">[<expr pos:start="7329:44" pos:end="7329:48"><name pos:start="7329:44" pos:end="7329:48">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7331:13" pos:end="7331:60"><expr pos:start="7331:13" pos:end="7331:59"><call pos:start="7331:13" pos:end="7331:59"><name pos:start="7331:13" pos:end="7331:28">gen_helper_xsave</name><argument_list pos:start="7331:29" pos:end="7331:59">(<argument pos:start="7331:30" pos:end="7331:36"><expr pos:start="7331:30" pos:end="7331:36"><name pos:start="7331:30" pos:end="7331:36">cpu_env</name></expr></argument>, <argument pos:start="7331:39" pos:end="7331:44"><expr pos:start="7331:39" pos:end="7331:44"><name pos:start="7331:39" pos:end="7331:44">cpu_A0</name></expr></argument>, <argument pos:start="7331:47" pos:end="7331:58"><expr pos:start="7331:47" pos:end="7331:58"><name pos:start="7331:47" pos:end="7331:58">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7333:13" pos:end="7333:18">break;</break>



        <expr_stmt pos:start="7337:9" pos:end="7337:29"><expr pos:start="7337:9" pos:end="7337:29"><call pos:start="7337:9" pos:end="7337:28"><name pos:start="7337:9" pos:end="7337:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="7337:26" pos:end="7337:28">(<argument pos:start="7337:27" pos:end="7337:27"><expr pos:start="7337:27" pos:end="7337:27"><literal type="number" pos:start="7337:27" pos:end="7337:27">5</literal></expr></argument>)</argument_list></call><operator pos:start="7337:29" pos:end="7337:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="7337:31" pos:end="7337:42">/* xrstor */</comment>

            <if_stmt pos:start="7339:13" pos:end="7347:13"><if pos:start="7339:13" pos:end="7347:13">if <condition pos:start="7339:16" pos:end="7343:63">(<expr pos:start="7339:17" pos:end="7343:62"><operator pos:start="7339:17" pos:end="7339:17">(</operator><name pos:start="7339:18" pos:end="7339:38"><name pos:start="7339:18" pos:end="7339:18">s</name><operator pos:start="7339:19" pos:end="7339:20">-&gt;</operator><name pos:start="7339:21" pos:end="7339:38">cpuid_ext_features</name></name> <operator pos:start="7339:40" pos:end="7339:40">&amp;</operator> <name pos:start="7339:42" pos:end="7339:56">CPUID_EXT_XSAVE</name><operator pos:start="7339:57" pos:end="7339:57">)</operator> <operator pos:start="7339:59" pos:end="7339:60">==</operator> <literal type="number" pos:start="7339:62" pos:end="7339:62">0</literal>

                <operator pos:start="7341:17" pos:end="7341:18">||</operator> <operator pos:start="7341:20" pos:end="7341:20">(</operator><name pos:start="7341:21" pos:end="7341:28">prefixes</name> <operator pos:start="7341:30" pos:end="7341:30">&amp;</operator> <operator pos:start="7341:32" pos:end="7341:32">(</operator><name pos:start="7341:33" pos:end="7341:43">PREFIX_LOCK</name> <operator pos:start="7341:45" pos:end="7341:45">|</operator> <name pos:start="7341:47" pos:end="7341:57">PREFIX_DATA</name>

                                <operator pos:start="7343:33" pos:end="7343:33">|</operator> <name pos:start="7343:35" pos:end="7343:45">PREFIX_REPZ</name> <operator pos:start="7343:47" pos:end="7343:47">|</operator> <name pos:start="7343:49" pos:end="7343:60">PREFIX_REPNZ</name><operator pos:start="7343:61" pos:end="7343:61">)</operator><operator pos:start="7343:62" pos:end="7343:62">)</operator></expr>)</condition> <block pos:start="7343:65" pos:end="7347:13">{<block_content pos:start="7345:17" pos:end="7345:32">

                <goto pos:start="7345:17" pos:end="7345:32">goto <name pos:start="7345:22" pos:end="7345:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7349:13" pos:end="7349:41"><expr pos:start="7349:13" pos:end="7349:40"><call pos:start="7349:13" pos:end="7349:40"><name pos:start="7349:13" pos:end="7349:25">gen_lea_modrm</name><argument_list pos:start="7349:26" pos:end="7349:40">(<argument pos:start="7349:27" pos:end="7349:29"><expr pos:start="7349:27" pos:end="7349:29"><name pos:start="7349:27" pos:end="7349:29">env</name></expr></argument>, <argument pos:start="7349:32" pos:end="7349:32"><expr pos:start="7349:32" pos:end="7349:32"><name pos:start="7349:32" pos:end="7349:32">s</name></expr></argument>, <argument pos:start="7349:35" pos:end="7349:39"><expr pos:start="7349:35" pos:end="7349:39"><name pos:start="7349:35" pos:end="7349:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7351:13" pos:end="7353:51"><expr pos:start="7351:13" pos:end="7353:50"><call pos:start="7351:13" pos:end="7353:50"><name pos:start="7351:13" pos:end="7351:33">tcg_gen_concat_tl_i64</name><argument_list pos:start="7351:34" pos:end="7353:50">(<argument pos:start="7351:35" pos:end="7351:46"><expr pos:start="7351:35" pos:end="7351:46"><name pos:start="7351:35" pos:end="7351:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="7351:49" pos:end="7351:63"><expr pos:start="7351:49" pos:end="7351:63"><name pos:start="7351:49" pos:end="7351:63"><name pos:start="7351:49" pos:end="7351:56">cpu_regs</name><index pos:start="7351:57" pos:end="7351:63">[<expr pos:start="7351:58" pos:end="7351:62"><name pos:start="7351:58" pos:end="7351:62">R_EAX</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="7353:35" pos:end="7353:49"><expr pos:start="7353:35" pos:end="7353:49"><name pos:start="7353:35" pos:end="7353:49"><name pos:start="7353:35" pos:end="7353:42">cpu_regs</name><index pos:start="7353:43" pos:end="7353:49">[<expr pos:start="7353:44" pos:end="7353:48"><name pos:start="7353:44" pos:end="7353:48">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7355:13" pos:end="7355:61"><expr pos:start="7355:13" pos:end="7355:60"><call pos:start="7355:13" pos:end="7355:60"><name pos:start="7355:13" pos:end="7355:29">gen_helper_xrstor</name><argument_list pos:start="7355:30" pos:end="7355:60">(<argument pos:start="7355:31" pos:end="7355:37"><expr pos:start="7355:31" pos:end="7355:37"><name pos:start="7355:31" pos:end="7355:37">cpu_env</name></expr></argument>, <argument pos:start="7355:40" pos:end="7355:45"><expr pos:start="7355:40" pos:end="7355:45"><name pos:start="7355:40" pos:end="7355:45">cpu_A0</name></expr></argument>, <argument pos:start="7355:48" pos:end="7355:59"><expr pos:start="7355:48" pos:end="7355:59"><name pos:start="7355:48" pos:end="7355:59">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="7357:13" pos:end="7359:61">/* XRSTOR is how MPX is enabled, which changes how

               we translate.  Thus we need to end the TB.  */</comment>

            <expr_stmt pos:start="7361:13" pos:end="7361:32"><expr pos:start="7361:13" pos:end="7361:31"><call pos:start="7361:13" pos:end="7361:31"><name pos:start="7361:13" pos:end="7361:28">gen_update_cc_op</name><argument_list pos:start="7361:29" pos:end="7361:31">(<argument pos:start="7361:30" pos:end="7361:30"><expr pos:start="7361:30" pos:end="7361:30"><name pos:start="7361:30" pos:end="7361:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7363:13" pos:end="7363:43"><expr pos:start="7363:13" pos:end="7363:42"><call pos:start="7363:13" pos:end="7363:42"><name pos:start="7363:13" pos:end="7363:22">gen_jmp_im</name><argument_list pos:start="7363:23" pos:end="7363:42">(<argument pos:start="7363:24" pos:end="7363:41"><expr pos:start="7363:24" pos:end="7363:41"><name pos:start="7363:24" pos:end="7363:28"><name pos:start="7363:24" pos:end="7363:24">s</name><operator pos:start="7363:25" pos:end="7363:26">-&gt;</operator><name pos:start="7363:27" pos:end="7363:28">pc</name></name> <operator pos:start="7363:30" pos:end="7363:30">-</operator> <name pos:start="7363:32" pos:end="7363:41"><name pos:start="7363:32" pos:end="7363:32">s</name><operator pos:start="7363:33" pos:end="7363:34">-&gt;</operator><name pos:start="7363:35" pos:end="7363:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7365:13" pos:end="7365:23"><expr pos:start="7365:13" pos:end="7365:22"><call pos:start="7365:13" pos:end="7365:22"><name pos:start="7365:13" pos:end="7365:19">gen_eob</name><argument_list pos:start="7365:20" pos:end="7365:22">(<argument pos:start="7365:21" pos:end="7365:21"><expr pos:start="7365:21" pos:end="7365:21"><name pos:start="7365:21" pos:end="7365:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7367:13" pos:end="7367:18">break;</break>



        <expr_stmt pos:start="7371:9" pos:end="7371:29"><expr pos:start="7371:9" pos:end="7371:29"><call pos:start="7371:9" pos:end="7371:28"><name pos:start="7371:9" pos:end="7371:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="7371:26" pos:end="7371:28">(<argument pos:start="7371:27" pos:end="7371:27"><expr pos:start="7371:27" pos:end="7371:27"><literal type="number" pos:start="7371:27" pos:end="7371:27">6</literal></expr></argument>)</argument_list></call><operator pos:start="7371:29" pos:end="7371:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="7371:31" pos:end="7371:51">/* xsaveopt / clwb */</comment>

            <if_stmt pos:start="7373:13" pos:end="7377:13"><if pos:start="7373:13" pos:end="7377:13">if <condition pos:start="7373:16" pos:end="7373:39">(<expr pos:start="7373:17" pos:end="7373:38"><name pos:start="7373:17" pos:end="7373:24">prefixes</name> <operator pos:start="7373:26" pos:end="7373:26">&amp;</operator> <name pos:start="7373:28" pos:end="7373:38">PREFIX_LOCK</name></expr>)</condition> <block pos:start="7373:41" pos:end="7377:13">{<block_content pos:start="7375:17" pos:end="7375:32">

                <goto pos:start="7375:17" pos:end="7375:32">goto <name pos:start="7375:22" pos:end="7375:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7379:13" pos:end="7413:13"><if pos:start="7379:13" pos:end="7391:13">if <condition pos:start="7379:16" pos:end="7379:39">(<expr pos:start="7379:17" pos:end="7379:38"><name pos:start="7379:17" pos:end="7379:24">prefixes</name> <operator pos:start="7379:26" pos:end="7379:26">&amp;</operator> <name pos:start="7379:28" pos:end="7379:38">PREFIX_DATA</name></expr>)</condition> <block pos:start="7379:41" pos:end="7391:13">{<block_content pos:start="7383:17" pos:end="7389:45">

                <comment type="block" pos:start="7381:17" pos:end="7381:26">/* clwb */</comment>

                <if_stmt pos:start="7383:17" pos:end="7387:17"><if pos:start="7383:17" pos:end="7387:17">if <condition pos:start="7383:20" pos:end="7383:70">(<expr pos:start="7383:21" pos:end="7383:69"><operator pos:start="7383:21" pos:end="7383:21">!</operator><operator pos:start="7383:22" pos:end="7383:22">(</operator><name pos:start="7383:23" pos:end="7383:47"><name pos:start="7383:23" pos:end="7383:23">s</name><operator pos:start="7383:24" pos:end="7383:25">-&gt;</operator><name pos:start="7383:26" pos:end="7383:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="7383:49" pos:end="7383:49">&amp;</operator> <name pos:start="7383:51" pos:end="7383:68">CPUID_7_0_EBX_CLWB</name><operator pos:start="7383:69" pos:end="7383:69">)</operator></expr>)</condition> <block pos:start="7383:72" pos:end="7387:17">{<block_content pos:start="7385:21" pos:end="7385:36">

                    <goto pos:start="7385:21" pos:end="7385:36">goto <name pos:start="7385:26" pos:end="7385:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="7389:17" pos:end="7389:45"><expr pos:start="7389:17" pos:end="7389:44"><call pos:start="7389:17" pos:end="7389:44"><name pos:start="7389:17" pos:end="7389:29">gen_nop_modrm</name><argument_list pos:start="7389:30" pos:end="7389:44">(<argument pos:start="7389:31" pos:end="7389:33"><expr pos:start="7389:31" pos:end="7389:33"><name pos:start="7389:31" pos:end="7389:33">env</name></expr></argument>, <argument pos:start="7389:36" pos:end="7389:36"><expr pos:start="7389:36" pos:end="7389:36"><name pos:start="7389:36" pos:end="7389:36">s</name></expr></argument>, <argument pos:start="7389:39" pos:end="7389:43"><expr pos:start="7389:39" pos:end="7389:43"><name pos:start="7389:39" pos:end="7389:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7391:15" pos:end="7413:13">else <block pos:start="7391:20" pos:end="7413:13">{<block_content pos:start="7395:17" pos:end="7411:67">

                <comment type="block" pos:start="7393:17" pos:end="7393:30">/* xsaveopt */</comment>

                <if_stmt pos:start="7395:17" pos:end="7403:17"><if pos:start="7395:17" pos:end="7403:17">if <condition pos:start="7395:20" pos:end="7399:65">(<expr pos:start="7395:21" pos:end="7399:64"><operator pos:start="7395:21" pos:end="7395:21">(</operator><name pos:start="7395:22" pos:end="7395:42"><name pos:start="7395:22" pos:end="7395:22">s</name><operator pos:start="7395:23" pos:end="7395:24">-&gt;</operator><name pos:start="7395:25" pos:end="7395:42">cpuid_ext_features</name></name> <operator pos:start="7395:44" pos:end="7395:44">&amp;</operator> <name pos:start="7395:46" pos:end="7395:60">CPUID_EXT_XSAVE</name><operator pos:start="7395:61" pos:end="7395:61">)</operator> <operator pos:start="7395:63" pos:end="7395:64">==</operator> <literal type="number" pos:start="7395:66" pos:end="7395:66">0</literal>

                    <operator pos:start="7397:21" pos:end="7397:22">||</operator> <operator pos:start="7397:24" pos:end="7397:24">(</operator><name pos:start="7397:25" pos:end="7397:47"><name pos:start="7397:25" pos:end="7397:25">s</name><operator pos:start="7397:26" pos:end="7397:27">-&gt;</operator><name pos:start="7397:28" pos:end="7397:47">cpuid_xsave_features</name></name> <operator pos:start="7397:49" pos:end="7397:49">&amp;</operator> <name pos:start="7397:51" pos:end="7397:70">CPUID_XSAVE_XSAVEOPT</name><operator pos:start="7397:71" pos:end="7397:71">)</operator> <operator pos:start="7397:73" pos:end="7397:74">==</operator> <literal type="number" pos:start="7397:76" pos:end="7397:76">0</literal>

                    <operator pos:start="7399:21" pos:end="7399:22">||</operator> <operator pos:start="7399:24" pos:end="7399:24">(</operator><name pos:start="7399:25" pos:end="7399:32">prefixes</name> <operator pos:start="7399:34" pos:end="7399:34">&amp;</operator> <operator pos:start="7399:36" pos:end="7399:36">(</operator><name pos:start="7399:37" pos:end="7399:47">PREFIX_REPZ</name> <operator pos:start="7399:49" pos:end="7399:49">|</operator> <name pos:start="7399:51" pos:end="7399:62">PREFIX_REPNZ</name><operator pos:start="7399:63" pos:end="7399:63">)</operator><operator pos:start="7399:64" pos:end="7399:64">)</operator></expr>)</condition> <block pos:start="7399:67" pos:end="7403:17">{<block_content pos:start="7401:21" pos:end="7401:36">

                    <goto pos:start="7401:21" pos:end="7401:36">goto <name pos:start="7401:26" pos:end="7401:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="7405:17" pos:end="7405:45"><expr pos:start="7405:17" pos:end="7405:44"><call pos:start="7405:17" pos:end="7405:44"><name pos:start="7405:17" pos:end="7405:29">gen_lea_modrm</name><argument_list pos:start="7405:30" pos:end="7405:44">(<argument pos:start="7405:31" pos:end="7405:33"><expr pos:start="7405:31" pos:end="7405:33"><name pos:start="7405:31" pos:end="7405:33">env</name></expr></argument>, <argument pos:start="7405:36" pos:end="7405:36"><expr pos:start="7405:36" pos:end="7405:36"><name pos:start="7405:36" pos:end="7405:36">s</name></expr></argument>, <argument pos:start="7405:39" pos:end="7405:43"><expr pos:start="7405:39" pos:end="7405:43"><name pos:start="7405:39" pos:end="7405:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7407:17" pos:end="7409:55"><expr pos:start="7407:17" pos:end="7409:54"><call pos:start="7407:17" pos:end="7409:54"><name pos:start="7407:17" pos:end="7407:37">tcg_gen_concat_tl_i64</name><argument_list pos:start="7407:38" pos:end="7409:54">(<argument pos:start="7407:39" pos:end="7407:50"><expr pos:start="7407:39" pos:end="7407:50"><name pos:start="7407:39" pos:end="7407:50">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="7407:53" pos:end="7407:67"><expr pos:start="7407:53" pos:end="7407:67"><name pos:start="7407:53" pos:end="7407:67"><name pos:start="7407:53" pos:end="7407:60">cpu_regs</name><index pos:start="7407:61" pos:end="7407:67">[<expr pos:start="7407:62" pos:end="7407:66"><name pos:start="7407:62" pos:end="7407:66">R_EAX</name></expr>]</index></name></expr></argument>,

                                      <argument pos:start="7409:39" pos:end="7409:53"><expr pos:start="7409:39" pos:end="7409:53"><name pos:start="7409:39" pos:end="7409:53"><name pos:start="7409:39" pos:end="7409:46">cpu_regs</name><index pos:start="7409:47" pos:end="7409:53">[<expr pos:start="7409:48" pos:end="7409:52"><name pos:start="7409:48" pos:end="7409:52">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7411:17" pos:end="7411:67"><expr pos:start="7411:17" pos:end="7411:66"><call pos:start="7411:17" pos:end="7411:66"><name pos:start="7411:17" pos:end="7411:35">gen_helper_xsaveopt</name><argument_list pos:start="7411:36" pos:end="7411:66">(<argument pos:start="7411:37" pos:end="7411:43"><expr pos:start="7411:37" pos:end="7411:43"><name pos:start="7411:37" pos:end="7411:43">cpu_env</name></expr></argument>, <argument pos:start="7411:46" pos:end="7411:51"><expr pos:start="7411:46" pos:end="7411:51"><name pos:start="7411:46" pos:end="7411:51">cpu_A0</name></expr></argument>, <argument pos:start="7411:54" pos:end="7411:65"><expr pos:start="7411:54" pos:end="7411:65"><name pos:start="7411:54" pos:end="7411:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="7415:13" pos:end="7415:18">break;</break>



        <expr_stmt pos:start="7419:9" pos:end="7419:29"><expr pos:start="7419:9" pos:end="7419:29"><call pos:start="7419:9" pos:end="7419:28"><name pos:start="7419:9" pos:end="7419:25">CASE_MODRM_MEM_OP</name><argument_list pos:start="7419:26" pos:end="7419:28">(<argument pos:start="7419:27" pos:end="7419:27"><expr pos:start="7419:27" pos:end="7419:27"><literal type="number" pos:start="7419:27" pos:end="7419:27">7</literal></expr></argument>)</argument_list></call><operator pos:start="7419:29" pos:end="7419:29">:</operator></expr></expr_stmt> <comment type="block" pos:start="7419:31" pos:end="7419:56">/* clflush / clflushopt */</comment>

            <if_stmt pos:start="7421:13" pos:end="7425:13"><if pos:start="7421:13" pos:end="7425:13">if <condition pos:start="7421:16" pos:end="7421:39">(<expr pos:start="7421:17" pos:end="7421:38"><name pos:start="7421:17" pos:end="7421:24">prefixes</name> <operator pos:start="7421:26" pos:end="7421:26">&amp;</operator> <name pos:start="7421:28" pos:end="7421:38">PREFIX_LOCK</name></expr>)</condition> <block pos:start="7421:41" pos:end="7425:13">{<block_content pos:start="7423:17" pos:end="7423:32">

                <goto pos:start="7423:17" pos:end="7423:32">goto <name pos:start="7423:22" pos:end="7423:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7427:13" pos:end="7449:13"><if pos:start="7427:13" pos:end="7437:13">if <condition pos:start="7427:16" pos:end="7427:39">(<expr pos:start="7427:17" pos:end="7427:38"><name pos:start="7427:17" pos:end="7427:24">prefixes</name> <operator pos:start="7427:26" pos:end="7427:26">&amp;</operator> <name pos:start="7427:28" pos:end="7427:38">PREFIX_DATA</name></expr>)</condition> <block pos:start="7427:41" pos:end="7437:13">{<block_content pos:start="7431:17" pos:end="7435:17">

                <comment type="block" pos:start="7429:17" pos:end="7429:32">/* clflushopt */</comment>

                <if_stmt pos:start="7431:17" pos:end="7435:17"><if pos:start="7431:17" pos:end="7435:17">if <condition pos:start="7431:20" pos:end="7431:76">(<expr pos:start="7431:21" pos:end="7431:75"><operator pos:start="7431:21" pos:end="7431:21">!</operator><operator pos:start="7431:22" pos:end="7431:22">(</operator><name pos:start="7431:23" pos:end="7431:47"><name pos:start="7431:23" pos:end="7431:23">s</name><operator pos:start="7431:24" pos:end="7431:25">-&gt;</operator><name pos:start="7431:26" pos:end="7431:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="7431:49" pos:end="7431:49">&amp;</operator> <name pos:start="7431:51" pos:end="7431:74">CPUID_7_0_EBX_CLFLUSHOPT</name><operator pos:start="7431:75" pos:end="7431:75">)</operator></expr>)</condition> <block pos:start="7431:78" pos:end="7435:17">{<block_content pos:start="7433:21" pos:end="7433:36">

                    <goto pos:start="7433:21" pos:end="7433:36">goto <name pos:start="7433:26" pos:end="7433:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="7437:15" pos:end="7449:13">else <block pos:start="7437:20" pos:end="7449:13">{<block_content pos:start="7441:17" pos:end="7447:17">

                <comment type="block" pos:start="7439:17" pos:end="7439:29">/* clflush */</comment>

                <if_stmt pos:start="7441:17" pos:end="7447:17"><if pos:start="7441:17" pos:end="7447:17">if <condition pos:start="7441:20" pos:end="7443:60">(<expr pos:start="7441:21" pos:end="7443:59"><operator pos:start="7441:21" pos:end="7441:21">(</operator><name pos:start="7441:22" pos:end="7441:30"><name pos:start="7441:22" pos:end="7441:22">s</name><operator pos:start="7441:23" pos:end="7441:24">-&gt;</operator><name pos:start="7441:25" pos:end="7441:30">prefix</name></name> <operator pos:start="7441:32" pos:end="7441:32">&amp;</operator> <operator pos:start="7441:34" pos:end="7441:34">(</operator><name pos:start="7441:35" pos:end="7441:45">PREFIX_REPZ</name> <operator pos:start="7441:47" pos:end="7441:47">|</operator> <name pos:start="7441:49" pos:end="7441:60">PREFIX_REPNZ</name><operator pos:start="7441:61" pos:end="7441:61">)</operator><operator pos:start="7441:62" pos:end="7441:62">)</operator>

                    <operator pos:start="7443:21" pos:end="7443:22">||</operator> <operator pos:start="7443:24" pos:end="7443:24">!</operator><operator pos:start="7443:25" pos:end="7443:25">(</operator><name pos:start="7443:26" pos:end="7443:42"><name pos:start="7443:26" pos:end="7443:26">s</name><operator pos:start="7443:27" pos:end="7443:28">-&gt;</operator><name pos:start="7443:29" pos:end="7443:42">cpuid_features</name></name> <operator pos:start="7443:44" pos:end="7443:44">&amp;</operator> <name pos:start="7443:46" pos:end="7443:58">CPUID_CLFLUSH</name><operator pos:start="7443:59" pos:end="7443:59">)</operator></expr>)</condition> <block pos:start="7443:62" pos:end="7447:17">{<block_content pos:start="7445:21" pos:end="7445:36">

                    <goto pos:start="7445:21" pos:end="7445:36">goto <name pos:start="7445:26" pos:end="7445:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="7451:13" pos:end="7451:41"><expr pos:start="7451:13" pos:end="7451:40"><call pos:start="7451:13" pos:end="7451:40"><name pos:start="7451:13" pos:end="7451:25">gen_nop_modrm</name><argument_list pos:start="7451:26" pos:end="7451:40">(<argument pos:start="7451:27" pos:end="7451:29"><expr pos:start="7451:27" pos:end="7451:29"><name pos:start="7451:27" pos:end="7451:29">env</name></expr></argument>, <argument pos:start="7451:32" pos:end="7451:32"><expr pos:start="7451:32" pos:end="7451:32"><name pos:start="7451:32" pos:end="7451:32">s</name></expr></argument>, <argument pos:start="7451:35" pos:end="7451:39"><expr pos:start="7451:35" pos:end="7451:39"><name pos:start="7451:35" pos:end="7451:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7453:13" pos:end="7453:18">break;</break>



        <case pos:start="7457:9" pos:end="7457:27">case <expr pos:start="7457:14" pos:end="7457:26"><literal type="number" pos:start="7457:14" pos:end="7457:17">0xc0</literal> <operator pos:start="7457:19" pos:end="7457:21">...</operator> <literal type="number" pos:start="7457:23" pos:end="7457:26">0xc7</literal></expr>:</case> <comment type="block" pos:start="7457:29" pos:end="7457:56">/* rdfsbase (f3 0f ae /0) */</comment>

        <case pos:start="7459:9" pos:end="7459:27">case <expr pos:start="7459:14" pos:end="7459:26"><literal type="number" pos:start="7459:14" pos:end="7459:17">0xc8</literal> <operator pos:start="7459:19" pos:end="7459:21">...</operator> <literal type="number" pos:start="7459:23" pos:end="7459:26">0xcf</literal></expr>:</case> <comment type="block" pos:start="7459:29" pos:end="7459:56">/* rdgsbase (f3 0f ae /1) */</comment>

        <case pos:start="7461:9" pos:end="7461:27">case <expr pos:start="7461:14" pos:end="7461:26"><literal type="number" pos:start="7461:14" pos:end="7461:17">0xd0</literal> <operator pos:start="7461:19" pos:end="7461:21">...</operator> <literal type="number" pos:start="7461:23" pos:end="7461:26">0xd7</literal></expr>:</case> <comment type="block" pos:start="7461:29" pos:end="7461:56">/* wrfsbase (f3 0f ae /2) */</comment>

        <case pos:start="7463:9" pos:end="7463:27">case <expr pos:start="7463:14" pos:end="7463:26"><literal type="number" pos:start="7463:14" pos:end="7463:17">0xd8</literal> <operator pos:start="7463:19" pos:end="7463:21">...</operator> <literal type="number" pos:start="7463:23" pos:end="7463:26">0xdf</literal></expr>:</case> <comment type="block" pos:start="7463:29" pos:end="7463:56">/* wrgsbase (f3 0f ae /3) */</comment>

            <if_stmt pos:start="7465:13" pos:end="7519:13"><if pos:start="7465:13" pos:end="7519:13">if <condition pos:start="7465:16" pos:end="7471:72">(<expr pos:start="7465:17" pos:end="7471:71"><call pos:start="7465:17" pos:end="7465:25"><name pos:start="7465:17" pos:end="7465:22">CODE64</name><argument_list pos:start="7465:23" pos:end="7465:25">(<argument pos:start="7465:24" pos:end="7465:24"><expr pos:start="7465:24" pos:end="7465:24"><name pos:start="7465:24" pos:end="7465:24">s</name></expr></argument>)</argument_list></call>

                <operator pos:start="7467:17" pos:end="7467:18">&amp;&amp;</operator> <operator pos:start="7467:20" pos:end="7467:20">(</operator><name pos:start="7467:21" pos:end="7467:28">prefixes</name> <operator pos:start="7467:30" pos:end="7467:30">&amp;</operator> <name pos:start="7467:32" pos:end="7467:42">PREFIX_REPZ</name><operator pos:start="7467:43" pos:end="7467:43">)</operator>

                <operator pos:start="7469:17" pos:end="7469:18">&amp;&amp;</operator> <operator pos:start="7469:20" pos:end="7469:20">!</operator><operator pos:start="7469:21" pos:end="7469:21">(</operator><name pos:start="7469:22" pos:end="7469:29">prefixes</name> <operator pos:start="7469:31" pos:end="7469:31">&amp;</operator> <name pos:start="7469:33" pos:end="7469:43">PREFIX_LOCK</name><operator pos:start="7469:44" pos:end="7469:44">)</operator>

                <operator pos:start="7471:17" pos:end="7471:18">&amp;&amp;</operator> <operator pos:start="7471:20" pos:end="7471:20">(</operator><name pos:start="7471:21" pos:end="7471:45"><name pos:start="7471:21" pos:end="7471:21">s</name><operator pos:start="7471:22" pos:end="7471:23">-&gt;</operator><name pos:start="7471:24" pos:end="7471:45">cpuid_7_0_ebx_features</name></name> <operator pos:start="7471:47" pos:end="7471:47">&amp;</operator> <name pos:start="7471:49" pos:end="7471:70">CPUID_7_0_EBX_FSGSBASE</name><operator pos:start="7471:71" pos:end="7471:71">)</operator></expr>)</condition> <block pos:start="7471:74" pos:end="7519:13">{<block_content pos:start="7473:17" pos:end="7517:22">

                <decl_stmt pos:start="7473:17" pos:end="7473:42"><decl pos:start="7473:17" pos:end="7473:25"><type pos:start="7473:17" pos:end="7473:20"><name pos:start="7473:17" pos:end="7473:20">TCGv</name></type> <name pos:start="7473:22" pos:end="7473:25">base</name></decl>, <decl pos:start="7473:28" pos:end="7473:31"><type ref="prev" pos:start="7473:17" pos:end="7473:20"/><name pos:start="7473:28" pos:end="7473:31">treg</name></decl>, <decl pos:start="7473:34" pos:end="7473:36"><type ref="prev" pos:start="7473:17" pos:end="7473:20"/><name pos:start="7473:34" pos:end="7473:36">src</name></decl>, <decl pos:start="7473:39" pos:end="7473:41"><type ref="prev" pos:start="7473:17" pos:end="7473:20"/><name pos:start="7473:39" pos:end="7473:41">dst</name></decl>;</decl_stmt>



                <comment type="block" pos:start="7477:17" pos:end="7477:70">/* Preserve hflags bits by testing CR4 at runtime.  */</comment>

                <expr_stmt pos:start="7479:17" pos:end="7479:66"><expr pos:start="7479:17" pos:end="7479:65"><call pos:start="7479:17" pos:end="7479:65"><name pos:start="7479:17" pos:end="7479:32">tcg_gen_movi_i32</name><argument_list pos:start="7479:33" pos:end="7479:65">(<argument pos:start="7479:34" pos:end="7479:45"><expr pos:start="7479:34" pos:end="7479:45"><name pos:start="7479:34" pos:end="7479:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="7479:48" pos:end="7479:64"><expr pos:start="7479:48" pos:end="7479:64"><name pos:start="7479:48" pos:end="7479:64">CR4_FSGSBASE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7481:17" pos:end="7481:62"><expr pos:start="7481:17" pos:end="7481:61"><call pos:start="7481:17" pos:end="7481:61"><name pos:start="7481:17" pos:end="7481:38">gen_helper_cr4_testbit</name><argument_list pos:start="7481:39" pos:end="7481:61">(<argument pos:start="7481:40" pos:end="7481:46"><expr pos:start="7481:40" pos:end="7481:46"><name pos:start="7481:40" pos:end="7481:46">cpu_env</name></expr></argument>, <argument pos:start="7481:49" pos:end="7481:60"><expr pos:start="7481:49" pos:end="7481:60"><name pos:start="7481:49" pos:end="7481:60">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="7485:17" pos:end="7485:61"><expr pos:start="7485:17" pos:end="7485:60"><name pos:start="7485:17" pos:end="7485:20">base</name> <operator pos:start="7485:22" pos:end="7485:22">=</operator> <name pos:start="7485:24" pos:end="7485:60"><name pos:start="7485:24" pos:end="7485:35">cpu_seg_base</name><index pos:start="7485:36" pos:end="7485:60">[<expr pos:start="7485:37" pos:end="7485:59"><ternary pos:start="7485:37" pos:end="7485:59"><condition pos:start="7485:37" pos:end="7485:47"><expr pos:start="7485:37" pos:end="7485:45"><name pos:start="7485:37" pos:end="7485:41">modrm</name> <operator pos:start="7485:43" pos:end="7485:43">&amp;</operator> <literal type="number" pos:start="7485:45" pos:end="7485:45">8</literal></expr> ?</condition><then pos:start="7485:49" pos:end="7485:52"> <expr pos:start="7485:49" pos:end="7485:52"><name pos:start="7485:49" pos:end="7485:52">R_GS</name></expr> </then><else pos:start="7485:54" pos:end="7485:59">: <expr pos:start="7485:56" pos:end="7485:59"><name pos:start="7485:56" pos:end="7485:59">R_FS</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="7487:17" pos:end="7487:56"><expr pos:start="7487:17" pos:end="7487:55"><name pos:start="7487:17" pos:end="7487:20">treg</name> <operator pos:start="7487:22" pos:end="7487:22">=</operator> <name pos:start="7487:24" pos:end="7487:55"><name pos:start="7487:24" pos:end="7487:31">cpu_regs</name><index pos:start="7487:32" pos:end="7487:55">[<expr pos:start="7487:33" pos:end="7487:54"><operator pos:start="7487:33" pos:end="7487:33">(</operator><name pos:start="7487:34" pos:end="7487:38">modrm</name> <operator pos:start="7487:40" pos:end="7487:40">&amp;</operator> <literal type="number" pos:start="7487:42" pos:end="7487:42">7</literal><operator pos:start="7487:43" pos:end="7487:43">)</operator> <operator pos:start="7487:45" pos:end="7487:45">|</operator> <call pos:start="7487:47" pos:end="7487:54"><name pos:start="7487:47" pos:end="7487:51">REX_B</name><argument_list pos:start="7487:52" pos:end="7487:54">(<argument pos:start="7487:53" pos:end="7487:53"><expr pos:start="7487:53" pos:end="7487:53"><name pos:start="7487:53" pos:end="7487:53">s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="7491:17" pos:end="7503:17"><if pos:start="7491:17" pos:end="7497:17">if <condition pos:start="7491:20" pos:end="7491:33">(<expr pos:start="7491:21" pos:end="7491:32"><name pos:start="7491:21" pos:end="7491:25">modrm</name> <operator pos:start="7491:27" pos:end="7491:27">&amp;</operator> <literal type="number" pos:start="7491:29" pos:end="7491:32">0x10</literal></expr>)</condition> <block pos:start="7491:35" pos:end="7497:17">{<block_content pos:start="7495:21" pos:end="7495:43">

                    <comment type="block" pos:start="7493:21" pos:end="7493:33">/* wr*base */</comment>

                    <expr_stmt pos:start="7495:21" pos:end="7495:43"><expr pos:start="7495:21" pos:end="7495:30"><name pos:start="7495:21" pos:end="7495:23">dst</name> <operator pos:start="7495:25" pos:end="7495:25">=</operator> <name pos:start="7495:27" pos:end="7495:30">base</name></expr><operator pos:start="7495:31" pos:end="7495:31">,</operator> <expr pos:start="7495:33" pos:end="7495:42"><name pos:start="7495:33" pos:end="7495:35">src</name> <operator pos:start="7495:37" pos:end="7495:37">=</operator> <name pos:start="7495:39" pos:end="7495:42">treg</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="7497:19" pos:end="7503:17">else <block pos:start="7497:24" pos:end="7503:17">{<block_content pos:start="7501:21" pos:end="7501:43">

                    <comment type="block" pos:start="7499:21" pos:end="7499:33">/* rd*base */</comment>

                    <expr_stmt pos:start="7501:21" pos:end="7501:43"><expr pos:start="7501:21" pos:end="7501:30"><name pos:start="7501:21" pos:end="7501:23">dst</name> <operator pos:start="7501:25" pos:end="7501:25">=</operator> <name pos:start="7501:27" pos:end="7501:30">treg</name></expr><operator pos:start="7501:31" pos:end="7501:31">,</operator> <expr pos:start="7501:33" pos:end="7501:42"><name pos:start="7501:33" pos:end="7501:35">src</name> <operator pos:start="7501:37" pos:end="7501:37">=</operator> <name pos:start="7501:39" pos:end="7501:42">base</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="7507:17" pos:end="7515:17"><if pos:start="7507:17" pos:end="7511:17">if <condition pos:start="7507:20" pos:end="7507:38">(<expr pos:start="7507:21" pos:end="7507:37"><name pos:start="7507:21" pos:end="7507:28"><name pos:start="7507:21" pos:end="7507:21">s</name><operator pos:start="7507:22" pos:end="7507:23">-&gt;</operator><name pos:start="7507:24" pos:end="7507:28">dflag</name></name> <operator pos:start="7507:30" pos:end="7507:31">==</operator> <name pos:start="7507:33" pos:end="7507:37">MO_32</name></expr>)</condition> <block pos:start="7507:40" pos:end="7511:17">{<block_content pos:start="7509:21" pos:end="7509:48">

                    <expr_stmt pos:start="7509:21" pos:end="7509:48"><expr pos:start="7509:21" pos:end="7509:47"><call pos:start="7509:21" pos:end="7509:47"><name pos:start="7509:21" pos:end="7509:37">tcg_gen_ext32u_tl</name><argument_list pos:start="7509:38" pos:end="7509:47">(<argument pos:start="7509:39" pos:end="7509:41"><expr pos:start="7509:39" pos:end="7509:41"><name pos:start="7509:39" pos:end="7509:41">dst</name></expr></argument>, <argument pos:start="7509:44" pos:end="7509:46"><expr pos:start="7509:44" pos:end="7509:46"><name pos:start="7509:44" pos:end="7509:46">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="7511:19" pos:end="7515:17">else <block pos:start="7511:24" pos:end="7515:17">{<block_content pos:start="7513:21" pos:end="7513:45">

                    <expr_stmt pos:start="7513:21" pos:end="7513:45"><expr pos:start="7513:21" pos:end="7513:44"><call pos:start="7513:21" pos:end="7513:44"><name pos:start="7513:21" pos:end="7513:34">tcg_gen_mov_tl</name><argument_list pos:start="7513:35" pos:end="7513:44">(<argument pos:start="7513:36" pos:end="7513:38"><expr pos:start="7513:36" pos:end="7513:38"><name pos:start="7513:36" pos:end="7513:38">dst</name></expr></argument>, <argument pos:start="7513:41" pos:end="7513:43"><expr pos:start="7513:41" pos:end="7513:43"><name pos:start="7513:41" pos:end="7513:43">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="7517:17" pos:end="7517:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="7521:13" pos:end="7521:28">goto <name pos:start="7521:18" pos:end="7521:27">unknown_op</name>;</goto>



        <case pos:start="7525:9" pos:end="7525:18">case <expr pos:start="7525:14" pos:end="7525:17"><literal type="number" pos:start="7525:14" pos:end="7525:17">0xf8</literal></expr>:</case> <comment type="block" pos:start="7525:20" pos:end="7525:41">/* sfence / pcommit */</comment>

            <if_stmt pos:start="7527:13" pos:end="7541:13"><if pos:start="7527:13" pos:end="7541:13">if <condition pos:start="7527:16" pos:end="7527:39">(<expr pos:start="7527:17" pos:end="7527:38"><name pos:start="7527:17" pos:end="7527:24">prefixes</name> <operator pos:start="7527:26" pos:end="7527:26">&amp;</operator> <name pos:start="7527:28" pos:end="7527:38">PREFIX_DATA</name></expr>)</condition> <block pos:start="7527:41" pos:end="7541:13">{<block_content pos:start="7531:17" pos:end="7539:22">

                <comment type="block" pos:start="7529:17" pos:end="7529:29">/* pcommit */</comment>

                <if_stmt pos:start="7531:17" pos:end="7537:17"><if pos:start="7531:17" pos:end="7537:17">if <condition pos:start="7531:20" pos:end="7533:48">(<expr pos:start="7531:21" pos:end="7533:47"><operator pos:start="7531:21" pos:end="7531:21">!</operator><operator pos:start="7531:22" pos:end="7531:22">(</operator><name pos:start="7531:23" pos:end="7531:47"><name pos:start="7531:23" pos:end="7531:23">s</name><operator pos:start="7531:24" pos:end="7531:25">-&gt;</operator><name pos:start="7531:26" pos:end="7531:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="7531:49" pos:end="7531:49">&amp;</operator> <name pos:start="7531:51" pos:end="7531:71">CPUID_7_0_EBX_PCOMMIT</name><operator pos:start="7531:72" pos:end="7531:72">)</operator>

                    <operator pos:start="7533:21" pos:end="7533:22">||</operator> <operator pos:start="7533:24" pos:end="7533:24">(</operator><name pos:start="7533:25" pos:end="7533:32">prefixes</name> <operator pos:start="7533:34" pos:end="7533:34">&amp;</operator> <name pos:start="7533:36" pos:end="7533:46">PREFIX_LOCK</name><operator pos:start="7533:47" pos:end="7533:47">)</operator></expr>)</condition> <block pos:start="7533:50" pos:end="7537:17">{<block_content pos:start="7535:21" pos:end="7535:36">

                    <goto pos:start="7535:21" pos:end="7535:36">goto <name pos:start="7535:26" pos:end="7535:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <break pos:start="7539:17" pos:end="7539:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="7543:13" pos:end="7543:26">/* fallthru */</comment>

        <case pos:start="7545:9" pos:end="7545:27">case <expr pos:start="7545:14" pos:end="7545:26"><literal type="number" pos:start="7545:14" pos:end="7545:17">0xf9</literal> <operator pos:start="7545:19" pos:end="7545:21">...</operator> <literal type="number" pos:start="7545:23" pos:end="7545:26">0xff</literal></expr>:</case> <comment type="block" pos:start="7545:29" pos:end="7545:40">/* sfence */</comment>

            <if_stmt pos:start="7547:13" pos:end="7553:13"><if pos:start="7547:13" pos:end="7553:13">if <condition pos:start="7547:16" pos:end="7549:44">(<expr pos:start="7547:17" pos:end="7549:43"><operator pos:start="7547:17" pos:end="7547:17">!</operator><operator pos:start="7547:18" pos:end="7547:18">(</operator><name pos:start="7547:19" pos:end="7547:35"><name pos:start="7547:19" pos:end="7547:19">s</name><operator pos:start="7547:20" pos:end="7547:21">-&gt;</operator><name pos:start="7547:22" pos:end="7547:35">cpuid_features</name></name> <operator pos:start="7547:37" pos:end="7547:37">&amp;</operator> <name pos:start="7547:39" pos:end="7547:47">CPUID_SSE</name><operator pos:start="7547:48" pos:end="7547:48">)</operator>

                <operator pos:start="7549:17" pos:end="7549:18">||</operator> <operator pos:start="7549:20" pos:end="7549:20">(</operator><name pos:start="7549:21" pos:end="7549:28">prefixes</name> <operator pos:start="7549:30" pos:end="7549:30">&amp;</operator> <name pos:start="7549:32" pos:end="7549:42">PREFIX_LOCK</name><operator pos:start="7549:43" pos:end="7549:43">)</operator></expr>)</condition> <block pos:start="7549:46" pos:end="7553:13">{<block_content pos:start="7551:17" pos:end="7551:32">

                <goto pos:start="7551:17" pos:end="7551:32">goto <name pos:start="7551:22" pos:end="7551:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7555:13" pos:end="7555:50"><expr pos:start="7555:13" pos:end="7555:49"><call pos:start="7555:13" pos:end="7555:49"><name pos:start="7555:13" pos:end="7555:22">tcg_gen_mb</name><argument_list pos:start="7555:23" pos:end="7555:49">(<argument pos:start="7555:24" pos:end="7555:48"><expr pos:start="7555:24" pos:end="7555:48"><name pos:start="7555:24" pos:end="7555:35">TCG_MO_ST_ST</name> <operator pos:start="7555:37" pos:end="7555:37">|</operator> <name pos:start="7555:39" pos:end="7555:48">TCG_BAR_SC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7557:13" pos:end="7557:18">break;</break>

        <case pos:start="7559:9" pos:end="7559:27">case <expr pos:start="7559:14" pos:end="7559:26"><literal type="number" pos:start="7559:14" pos:end="7559:17">0xe8</literal> <operator pos:start="7559:19" pos:end="7559:21">...</operator> <literal type="number" pos:start="7559:23" pos:end="7559:26">0xef</literal></expr>:</case> <comment type="block" pos:start="7559:29" pos:end="7559:40">/* lfence */</comment>

            <if_stmt pos:start="7561:13" pos:end="7567:13"><if pos:start="7561:13" pos:end="7567:13">if <condition pos:start="7561:16" pos:end="7563:44">(<expr pos:start="7561:17" pos:end="7563:43"><operator pos:start="7561:17" pos:end="7561:17">!</operator><operator pos:start="7561:18" pos:end="7561:18">(</operator><name pos:start="7561:19" pos:end="7561:35"><name pos:start="7561:19" pos:end="7561:19">s</name><operator pos:start="7561:20" pos:end="7561:21">-&gt;</operator><name pos:start="7561:22" pos:end="7561:35">cpuid_features</name></name> <operator pos:start="7561:37" pos:end="7561:37">&amp;</operator> <name pos:start="7561:39" pos:end="7561:47">CPUID_SSE</name><operator pos:start="7561:48" pos:end="7561:48">)</operator>

                <operator pos:start="7563:17" pos:end="7563:18">||</operator> <operator pos:start="7563:20" pos:end="7563:20">(</operator><name pos:start="7563:21" pos:end="7563:28">prefixes</name> <operator pos:start="7563:30" pos:end="7563:30">&amp;</operator> <name pos:start="7563:32" pos:end="7563:42">PREFIX_LOCK</name><operator pos:start="7563:43" pos:end="7563:43">)</operator></expr>)</condition> <block pos:start="7563:46" pos:end="7567:13">{<block_content pos:start="7565:17" pos:end="7565:32">

                <goto pos:start="7565:17" pos:end="7565:32">goto <name pos:start="7565:22" pos:end="7565:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7569:13" pos:end="7569:50"><expr pos:start="7569:13" pos:end="7569:49"><call pos:start="7569:13" pos:end="7569:49"><name pos:start="7569:13" pos:end="7569:22">tcg_gen_mb</name><argument_list pos:start="7569:23" pos:end="7569:49">(<argument pos:start="7569:24" pos:end="7569:48"><expr pos:start="7569:24" pos:end="7569:48"><name pos:start="7569:24" pos:end="7569:35">TCG_MO_LD_LD</name> <operator pos:start="7569:37" pos:end="7569:37">|</operator> <name pos:start="7569:39" pos:end="7569:48">TCG_BAR_SC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7571:13" pos:end="7571:18">break;</break>

        <case pos:start="7573:9" pos:end="7573:27">case <expr pos:start="7573:14" pos:end="7573:26"><literal type="number" pos:start="7573:14" pos:end="7573:17">0xf0</literal> <operator pos:start="7573:19" pos:end="7573:21">...</operator> <literal type="number" pos:start="7573:23" pos:end="7573:26">0xf7</literal></expr>:</case> <comment type="block" pos:start="7573:29" pos:end="7573:40">/* mfence */</comment>

            <if_stmt pos:start="7575:13" pos:end="7581:13"><if pos:start="7575:13" pos:end="7581:13">if <condition pos:start="7575:16" pos:end="7577:44">(<expr pos:start="7575:17" pos:end="7577:43"><operator pos:start="7575:17" pos:end="7575:17">!</operator><operator pos:start="7575:18" pos:end="7575:18">(</operator><name pos:start="7575:19" pos:end="7575:35"><name pos:start="7575:19" pos:end="7575:19">s</name><operator pos:start="7575:20" pos:end="7575:21">-&gt;</operator><name pos:start="7575:22" pos:end="7575:35">cpuid_features</name></name> <operator pos:start="7575:37" pos:end="7575:37">&amp;</operator> <name pos:start="7575:39" pos:end="7575:48">CPUID_SSE2</name><operator pos:start="7575:49" pos:end="7575:49">)</operator>

                <operator pos:start="7577:17" pos:end="7577:18">||</operator> <operator pos:start="7577:20" pos:end="7577:20">(</operator><name pos:start="7577:21" pos:end="7577:28">prefixes</name> <operator pos:start="7577:30" pos:end="7577:30">&amp;</operator> <name pos:start="7577:32" pos:end="7577:42">PREFIX_LOCK</name><operator pos:start="7577:43" pos:end="7577:43">)</operator></expr>)</condition> <block pos:start="7577:46" pos:end="7581:13">{<block_content pos:start="7579:17" pos:end="7579:32">

                <goto pos:start="7579:17" pos:end="7579:32">goto <name pos:start="7579:22" pos:end="7579:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7583:13" pos:end="7583:48"><expr pos:start="7583:13" pos:end="7583:47"><call pos:start="7583:13" pos:end="7583:47"><name pos:start="7583:13" pos:end="7583:22">tcg_gen_mb</name><argument_list pos:start="7583:23" pos:end="7583:47">(<argument pos:start="7583:24" pos:end="7583:46"><expr pos:start="7583:24" pos:end="7583:46"><name pos:start="7583:24" pos:end="7583:33">TCG_MO_ALL</name> <operator pos:start="7583:35" pos:end="7583:35">|</operator> <name pos:start="7583:37" pos:end="7583:46">TCG_BAR_SC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7585:13" pos:end="7585:18">break;</break>



        <default pos:start="7589:9" pos:end="7589:16">default:</default>

            <goto pos:start="7591:13" pos:end="7591:28">goto <name pos:start="7591:18" pos:end="7591:27">unknown_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="7595:9" pos:end="7595:14">break;</break>



    <case pos:start="7599:5" pos:end="7599:15">case <expr pos:start="7599:10" pos:end="7599:14"><literal type="number" pos:start="7599:10" pos:end="7599:14">0x10d</literal></expr>:</case> <comment type="block" pos:start="7599:17" pos:end="7599:40">/* 3DNow! prefetch(w) */</comment>

        <expr_stmt pos:start="7601:9" pos:end="7601:38"><expr pos:start="7601:9" pos:end="7601:37"><name pos:start="7601:9" pos:end="7601:13">modrm</name> <operator pos:start="7601:15" pos:end="7601:15">=</operator> <call pos:start="7601:17" pos:end="7601:37"><name pos:start="7601:17" pos:end="7601:29">x86_ldub_code</name><argument_list pos:start="7601:30" pos:end="7601:37">(<argument pos:start="7601:31" pos:end="7601:33"><expr pos:start="7601:31" pos:end="7601:33"><name pos:start="7601:31" pos:end="7601:33">env</name></expr></argument>, <argument pos:start="7601:36" pos:end="7601:36"><expr pos:start="7601:36" pos:end="7601:36"><name pos:start="7601:36" pos:end="7601:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7603:9" pos:end="7603:31"><expr pos:start="7603:9" pos:end="7603:30"><name pos:start="7603:9" pos:end="7603:11">mod</name> <operator pos:start="7603:13" pos:end="7603:13">=</operator> <operator pos:start="7603:15" pos:end="7603:15">(</operator><name pos:start="7603:16" pos:end="7603:20">modrm</name> <operator pos:start="7603:22" pos:end="7603:23">&gt;&gt;</operator> <literal type="number" pos:start="7603:25" pos:end="7603:25">6</literal><operator pos:start="7603:26" pos:end="7603:26">)</operator> <operator pos:start="7603:28" pos:end="7603:28">&amp;</operator> <literal type="number" pos:start="7603:30" pos:end="7603:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="7605:9" pos:end="7607:28"><if pos:start="7605:9" pos:end="7607:28">if <condition pos:start="7605:12" pos:end="7605:21">(<expr pos:start="7605:13" pos:end="7605:20"><name pos:start="7605:13" pos:end="7605:15">mod</name> <operator pos:start="7605:17" pos:end="7605:18">==</operator> <literal type="number" pos:start="7605:20" pos:end="7605:20">3</literal></expr>)</condition><block type="pseudo" pos:start="7607:13" pos:end="7607:28"><block_content pos:start="7607:13" pos:end="7607:28">

            <goto pos:start="7607:13" pos:end="7607:28">goto <name pos:start="7607:18" pos:end="7607:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7609:9" pos:end="7609:37"><expr pos:start="7609:9" pos:end="7609:36"><call pos:start="7609:9" pos:end="7609:36"><name pos:start="7609:9" pos:end="7609:21">gen_nop_modrm</name><argument_list pos:start="7609:22" pos:end="7609:36">(<argument pos:start="7609:23" pos:end="7609:25"><expr pos:start="7609:23" pos:end="7609:25"><name pos:start="7609:23" pos:end="7609:25">env</name></expr></argument>, <argument pos:start="7609:28" pos:end="7609:28"><expr pos:start="7609:28" pos:end="7609:28"><name pos:start="7609:28" pos:end="7609:28">s</name></expr></argument>, <argument pos:start="7609:31" pos:end="7609:35"><expr pos:start="7609:31" pos:end="7609:35"><name pos:start="7609:31" pos:end="7609:35">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7611:9" pos:end="7611:14">break;</break>

    <case pos:start="7613:5" pos:end="7613:15">case <expr pos:start="7613:10" pos:end="7613:14"><literal type="number" pos:start="7613:10" pos:end="7613:14">0x1aa</literal></expr>:</case> <comment type="block" pos:start="7613:17" pos:end="7613:25">/* rsm */</comment>

        <expr_stmt pos:start="7615:9" pos:end="7615:59"><expr pos:start="7615:9" pos:end="7615:58"><call pos:start="7615:9" pos:end="7615:58"><name pos:start="7615:9" pos:end="7615:31">gen_svm_check_intercept</name><argument_list pos:start="7615:32" pos:end="7615:58">(<argument pos:start="7615:33" pos:end="7615:33"><expr pos:start="7615:33" pos:end="7615:33"><name pos:start="7615:33" pos:end="7615:33">s</name></expr></argument>, <argument pos:start="7615:36" pos:end="7615:43"><expr pos:start="7615:36" pos:end="7615:43"><name pos:start="7615:36" pos:end="7615:43">pc_start</name></expr></argument>, <argument pos:start="7615:46" pos:end="7615:57"><expr pos:start="7615:46" pos:end="7615:57"><name pos:start="7615:46" pos:end="7615:57">SVM_EXIT_RSM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="7617:9" pos:end="7619:28"><if pos:start="7617:9" pos:end="7619:28">if <condition pos:start="7617:12" pos:end="7617:38">(<expr pos:start="7617:13" pos:end="7617:37"><operator pos:start="7617:13" pos:end="7617:13">!</operator><operator pos:start="7617:14" pos:end="7617:14">(</operator><name pos:start="7617:15" pos:end="7617:22"><name pos:start="7617:15" pos:end="7617:15">s</name><operator pos:start="7617:16" pos:end="7617:17">-&gt;</operator><name pos:start="7617:18" pos:end="7617:22">flags</name></name> <operator pos:start="7617:24" pos:end="7617:24">&amp;</operator> <name pos:start="7617:26" pos:end="7617:36">HF_SMM_MASK</name><operator pos:start="7617:37" pos:end="7617:37">)</operator></expr>)</condition><block type="pseudo" pos:start="7619:13" pos:end="7619:28"><block_content pos:start="7619:13" pos:end="7619:28">

            <goto pos:start="7619:13" pos:end="7619:28">goto <name pos:start="7619:18" pos:end="7619:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7621:9" pos:end="7621:28"><expr pos:start="7621:9" pos:end="7621:27"><call pos:start="7621:9" pos:end="7621:27"><name pos:start="7621:9" pos:end="7621:24">gen_update_cc_op</name><argument_list pos:start="7621:25" pos:end="7621:27">(<argument pos:start="7621:26" pos:end="7621:26"><expr pos:start="7621:26" pos:end="7621:26"><name pos:start="7621:26" pos:end="7621:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7623:9" pos:end="7623:39"><expr pos:start="7623:9" pos:end="7623:38"><call pos:start="7623:9" pos:end="7623:38"><name pos:start="7623:9" pos:end="7623:18">gen_jmp_im</name><argument_list pos:start="7623:19" pos:end="7623:38">(<argument pos:start="7623:20" pos:end="7623:37"><expr pos:start="7623:20" pos:end="7623:37"><name pos:start="7623:20" pos:end="7623:24"><name pos:start="7623:20" pos:end="7623:20">s</name><operator pos:start="7623:21" pos:end="7623:22">-&gt;</operator><name pos:start="7623:23" pos:end="7623:24">pc</name></name> <operator pos:start="7623:26" pos:end="7623:26">-</operator> <name pos:start="7623:28" pos:end="7623:37"><name pos:start="7623:28" pos:end="7623:28">s</name><operator pos:start="7623:29" pos:end="7623:30">-&gt;</operator><name pos:start="7623:31" pos:end="7623:37">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7625:9" pos:end="7625:32"><expr pos:start="7625:9" pos:end="7625:31"><call pos:start="7625:9" pos:end="7625:31"><name pos:start="7625:9" pos:end="7625:22">gen_helper_rsm</name><argument_list pos:start="7625:23" pos:end="7625:31">(<argument pos:start="7625:24" pos:end="7625:30"><expr pos:start="7625:24" pos:end="7625:30"><name pos:start="7625:24" pos:end="7625:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7627:9" pos:end="7627:19"><expr pos:start="7627:9" pos:end="7627:18"><call pos:start="7627:9" pos:end="7627:18"><name pos:start="7627:9" pos:end="7627:15">gen_eob</name><argument_list pos:start="7627:16" pos:end="7627:18">(<argument pos:start="7627:17" pos:end="7627:17"><expr pos:start="7627:17" pos:end="7627:17"><name pos:start="7627:17" pos:end="7627:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7629:9" pos:end="7629:14">break;</break>

    <case pos:start="7631:5" pos:end="7631:15">case <expr pos:start="7631:10" pos:end="7631:14"><literal type="number" pos:start="7631:10" pos:end="7631:14">0x1b8</literal></expr>:</case> <comment type="block" pos:start="7631:17" pos:end="7631:35">/* SSE4.2 popcnt */</comment>

        <if_stmt pos:start="7633:9" pos:end="7637:28"><if pos:start="7633:9" pos:end="7637:28">if <condition pos:start="7633:12" pos:end="7635:25">(<expr pos:start="7633:13" pos:end="7635:24"><operator pos:start="7633:13" pos:end="7633:13">(</operator><name pos:start="7633:14" pos:end="7633:21">prefixes</name> <operator pos:start="7633:23" pos:end="7633:23">&amp;</operator> <operator pos:start="7633:25" pos:end="7633:25">(</operator><name pos:start="7633:26" pos:end="7633:36">PREFIX_REPZ</name> <operator pos:start="7633:38" pos:end="7633:38">|</operator> <name pos:start="7633:40" pos:end="7633:50">PREFIX_LOCK</name> <operator pos:start="7633:52" pos:end="7633:52">|</operator> <name pos:start="7633:54" pos:end="7633:65">PREFIX_REPNZ</name><operator pos:start="7633:66" pos:end="7633:66">)</operator><operator pos:start="7633:67" pos:end="7633:67">)</operator> <operator pos:start="7633:69" pos:end="7633:70">!=</operator>

             <name pos:start="7635:14" pos:end="7635:24">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="7637:13" pos:end="7637:28"><block_content pos:start="7637:13" pos:end="7637:28">

            <goto pos:start="7637:13" pos:end="7637:28">goto <name pos:start="7637:18" pos:end="7637:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="7639:9" pos:end="7641:28"><if pos:start="7639:9" pos:end="7641:28">if <condition pos:start="7639:12" pos:end="7639:56">(<expr pos:start="7639:13" pos:end="7639:55"><operator pos:start="7639:13" pos:end="7639:13">!</operator><operator pos:start="7639:14" pos:end="7639:14">(</operator><name pos:start="7639:15" pos:end="7639:35"><name pos:start="7639:15" pos:end="7639:15">s</name><operator pos:start="7639:16" pos:end="7639:17">-&gt;</operator><name pos:start="7639:18" pos:end="7639:35">cpuid_ext_features</name></name> <operator pos:start="7639:37" pos:end="7639:37">&amp;</operator> <name pos:start="7639:39" pos:end="7639:54">CPUID_EXT_POPCNT</name><operator pos:start="7639:55" pos:end="7639:55">)</operator></expr>)</condition><block type="pseudo" pos:start="7641:13" pos:end="7641:28"><block_content pos:start="7641:13" pos:end="7641:28">

            <goto pos:start="7641:13" pos:end="7641:28">goto <name pos:start="7641:18" pos:end="7641:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="7645:9" pos:end="7645:38"><expr pos:start="7645:9" pos:end="7645:37"><name pos:start="7645:9" pos:end="7645:13">modrm</name> <operator pos:start="7645:15" pos:end="7645:15">=</operator> <call pos:start="7645:17" pos:end="7645:37"><name pos:start="7645:17" pos:end="7645:29">x86_ldub_code</name><argument_list pos:start="7645:30" pos:end="7645:37">(<argument pos:start="7645:31" pos:end="7645:33"><expr pos:start="7645:31" pos:end="7645:33"><name pos:start="7645:31" pos:end="7645:33">env</name></expr></argument>, <argument pos:start="7645:36" pos:end="7645:36"><expr pos:start="7645:36" pos:end="7645:36"><name pos:start="7645:36" pos:end="7645:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7647:9" pos:end="7647:41"><expr pos:start="7647:9" pos:end="7647:40"><name pos:start="7647:9" pos:end="7647:11">reg</name> <operator pos:start="7647:13" pos:end="7647:13">=</operator> <operator pos:start="7647:15" pos:end="7647:15">(</operator><operator pos:start="7647:16" pos:end="7647:16">(</operator><name pos:start="7647:17" pos:end="7647:21">modrm</name> <operator pos:start="7647:23" pos:end="7647:24">&gt;&gt;</operator> <literal type="number" pos:start="7647:26" pos:end="7647:26">3</literal><operator pos:start="7647:27" pos:end="7647:27">)</operator> <operator pos:start="7647:29" pos:end="7647:29">&amp;</operator> <literal type="number" pos:start="7647:31" pos:end="7647:31">7</literal><operator pos:start="7647:32" pos:end="7647:32">)</operator> <operator pos:start="7647:34" pos:end="7647:34">|</operator> <name pos:start="7647:36" pos:end="7647:40">rex_r</name></expr>;</expr_stmt>



        <if_stmt pos:start="7651:9" pos:end="7659:9"><if pos:start="7651:9" pos:end="7655:9">if <condition pos:start="7651:12" pos:end="7651:36">(<expr pos:start="7651:13" pos:end="7651:35"><name pos:start="7651:13" pos:end="7651:21"><name pos:start="7651:13" pos:end="7651:13">s</name><operator pos:start="7651:14" pos:end="7651:15">-&gt;</operator><name pos:start="7651:16" pos:end="7651:21">prefix</name></name> <operator pos:start="7651:23" pos:end="7651:23">&amp;</operator> <name pos:start="7651:25" pos:end="7651:35">PREFIX_DATA</name></expr>)</condition> <block pos:start="7651:38" pos:end="7655:9">{<block_content pos:start="7653:13" pos:end="7653:23">

            <expr_stmt pos:start="7653:13" pos:end="7653:23"><expr pos:start="7653:13" pos:end="7653:22"><name pos:start="7653:13" pos:end="7653:14">ot</name> <operator pos:start="7653:16" pos:end="7653:16">=</operator> <name pos:start="7653:18" pos:end="7653:22">MO_16</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="7655:11" pos:end="7659:9">else <block pos:start="7655:16" pos:end="7659:9">{<block_content pos:start="7657:13" pos:end="7657:33">

            <expr_stmt pos:start="7657:13" pos:end="7657:33"><expr pos:start="7657:13" pos:end="7657:32"><name pos:start="7657:13" pos:end="7657:14">ot</name> <operator pos:start="7657:16" pos:end="7657:16">=</operator> <call pos:start="7657:18" pos:end="7657:32"><name pos:start="7657:18" pos:end="7657:25">mo_64_32</name><argument_list pos:start="7657:26" pos:end="7657:32">(<argument pos:start="7657:27" pos:end="7657:31"><expr pos:start="7657:27" pos:end="7657:31"><name pos:start="7657:27" pos:end="7657:31">dflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="7663:9" pos:end="7663:54"><expr pos:start="7663:9" pos:end="7663:53"><call pos:start="7663:9" pos:end="7663:53"><name pos:start="7663:9" pos:end="7663:22">gen_ldst_modrm</name><argument_list pos:start="7663:23" pos:end="7663:53">(<argument pos:start="7663:24" pos:end="7663:26"><expr pos:start="7663:24" pos:end="7663:26"><name pos:start="7663:24" pos:end="7663:26">env</name></expr></argument>, <argument pos:start="7663:29" pos:end="7663:29"><expr pos:start="7663:29" pos:end="7663:29"><name pos:start="7663:29" pos:end="7663:29">s</name></expr></argument>, <argument pos:start="7663:32" pos:end="7663:36"><expr pos:start="7663:32" pos:end="7663:36"><name pos:start="7663:32" pos:end="7663:36">modrm</name></expr></argument>, <argument pos:start="7663:39" pos:end="7663:40"><expr pos:start="7663:39" pos:end="7663:40"><name pos:start="7663:39" pos:end="7663:40">ot</name></expr></argument>, <argument pos:start="7663:43" pos:end="7663:49"><expr pos:start="7663:43" pos:end="7663:49"><name pos:start="7663:43" pos:end="7663:49">OR_TMP0</name></expr></argument>, <argument pos:start="7663:52" pos:end="7663:52"><expr pos:start="7663:52" pos:end="7663:52"><literal type="number" pos:start="7663:52" pos:end="7663:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7665:9" pos:end="7665:29"><expr pos:start="7665:9" pos:end="7665:28"><call pos:start="7665:9" pos:end="7665:28"><name pos:start="7665:9" pos:end="7665:16">gen_extu</name><argument_list pos:start="7665:17" pos:end="7665:28">(<argument pos:start="7665:18" pos:end="7665:19"><expr pos:start="7665:18" pos:end="7665:19"><name pos:start="7665:18" pos:end="7665:19">ot</name></expr></argument>, <argument pos:start="7665:22" pos:end="7665:27"><expr pos:start="7665:22" pos:end="7665:27"><name pos:start="7665:22" pos:end="7665:27">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7667:9" pos:end="7667:43"><expr pos:start="7667:9" pos:end="7667:42"><call pos:start="7667:9" pos:end="7667:42"><name pos:start="7667:9" pos:end="7667:22">tcg_gen_mov_tl</name><argument_list pos:start="7667:23" pos:end="7667:42">(<argument pos:start="7667:24" pos:end="7667:33"><expr pos:start="7667:24" pos:end="7667:33"><name pos:start="7667:24" pos:end="7667:33">cpu_cc_src</name></expr></argument>, <argument pos:start="7667:36" pos:end="7667:41"><expr pos:start="7667:36" pos:end="7667:41"><name pos:start="7667:36" pos:end="7667:41">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7669:9" pos:end="7669:41"><expr pos:start="7669:9" pos:end="7669:40"><call pos:start="7669:9" pos:end="7669:40"><name pos:start="7669:9" pos:end="7669:24">tcg_gen_ctpop_tl</name><argument_list pos:start="7669:25" pos:end="7669:40">(<argument pos:start="7669:26" pos:end="7669:31"><expr pos:start="7669:26" pos:end="7669:31"><name pos:start="7669:26" pos:end="7669:31">cpu_T0</name></expr></argument>, <argument pos:start="7669:34" pos:end="7669:39"><expr pos:start="7669:34" pos:end="7669:39"><name pos:start="7669:34" pos:end="7669:39">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7671:9" pos:end="7671:42"><expr pos:start="7671:9" pos:end="7671:41"><call pos:start="7671:9" pos:end="7671:41"><name pos:start="7671:9" pos:end="7671:24">gen_op_mov_reg_v</name><argument_list pos:start="7671:25" pos:end="7671:41">(<argument pos:start="7671:26" pos:end="7671:27"><expr pos:start="7671:26" pos:end="7671:27"><name pos:start="7671:26" pos:end="7671:27">ot</name></expr></argument>, <argument pos:start="7671:30" pos:end="7671:32"><expr pos:start="7671:30" pos:end="7671:32"><name pos:start="7671:30" pos:end="7671:32">reg</name></expr></argument>, <argument pos:start="7671:35" pos:end="7671:40"><expr pos:start="7671:35" pos:end="7671:40"><name pos:start="7671:35" pos:end="7671:40">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="7675:9" pos:end="7675:35"><expr pos:start="7675:9" pos:end="7675:34"><call pos:start="7675:9" pos:end="7675:34"><name pos:start="7675:9" pos:end="7675:17">set_cc_op</name><argument_list pos:start="7675:18" pos:end="7675:34">(<argument pos:start="7675:19" pos:end="7675:19"><expr pos:start="7675:19" pos:end="7675:19"><name pos:start="7675:19" pos:end="7675:19">s</name></expr></argument>, <argument pos:start="7675:22" pos:end="7675:33"><expr pos:start="7675:22" pos:end="7675:33"><name pos:start="7675:22" pos:end="7675:33">CC_OP_POPCNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7677:9" pos:end="7677:14">break;</break>

    <case pos:start="7679:5" pos:end="7679:25">case <expr pos:start="7679:10" pos:end="7679:24"><literal type="number" pos:start="7679:10" pos:end="7679:14">0x10e</literal> <operator pos:start="7679:16" pos:end="7679:18">...</operator> <literal type="number" pos:start="7679:20" pos:end="7679:24">0x10f</literal></expr>:</case>

        <comment type="block" pos:start="7681:9" pos:end="7681:50">/* 3DNow! instructions, ignore prefixes */</comment>

        <expr_stmt pos:start="7683:9" pos:end="7683:65"><expr pos:start="7683:9" pos:end="7683:64"><name pos:start="7683:9" pos:end="7683:17"><name pos:start="7683:9" pos:end="7683:9">s</name><operator pos:start="7683:10" pos:end="7683:11">-&gt;</operator><name pos:start="7683:12" pos:end="7683:17">prefix</name></name> <operator pos:start="7683:19" pos:end="7683:20">&amp;=</operator> <operator pos:start="7683:22" pos:end="7683:22">~</operator><operator pos:start="7683:23" pos:end="7683:23">(</operator><name pos:start="7683:24" pos:end="7683:34">PREFIX_REPZ</name> <operator pos:start="7683:36" pos:end="7683:36">|</operator> <name pos:start="7683:38" pos:end="7683:49">PREFIX_REPNZ</name> <operator pos:start="7683:51" pos:end="7683:51">|</operator> <name pos:start="7683:53" pos:end="7683:63">PREFIX_DATA</name><operator pos:start="7683:64" pos:end="7683:64">)</operator></expr>;</expr_stmt>

    <case pos:start="7685:5" pos:end="7685:25">case <expr pos:start="7685:10" pos:end="7685:24"><literal type="number" pos:start="7685:10" pos:end="7685:14">0x110</literal> <operator pos:start="7685:16" pos:end="7685:18">...</operator> <literal type="number" pos:start="7685:20" pos:end="7685:24">0x117</literal></expr>:</case>

    <case pos:start="7687:5" pos:end="7687:25">case <expr pos:start="7687:10" pos:end="7687:24"><literal type="number" pos:start="7687:10" pos:end="7687:14">0x128</literal> <operator pos:start="7687:16" pos:end="7687:18">...</operator> <literal type="number" pos:start="7687:20" pos:end="7687:24">0x12f</literal></expr>:</case>

    <case pos:start="7689:5" pos:end="7689:25">case <expr pos:start="7689:10" pos:end="7689:24"><literal type="number" pos:start="7689:10" pos:end="7689:14">0x138</literal> <operator pos:start="7689:16" pos:end="7689:18">...</operator> <literal type="number" pos:start="7689:20" pos:end="7689:24">0x13a</literal></expr>:</case>

    <case pos:start="7691:5" pos:end="7691:25">case <expr pos:start="7691:10" pos:end="7691:24"><literal type="number" pos:start="7691:10" pos:end="7691:14">0x150</literal> <operator pos:start="7691:16" pos:end="7691:18">...</operator> <literal type="number" pos:start="7691:20" pos:end="7691:24">0x179</literal></expr>:</case>

    <case pos:start="7693:5" pos:end="7693:25">case <expr pos:start="7693:10" pos:end="7693:24"><literal type="number" pos:start="7693:10" pos:end="7693:14">0x17c</literal> <operator pos:start="7693:16" pos:end="7693:18">...</operator> <literal type="number" pos:start="7693:20" pos:end="7693:24">0x17f</literal></expr>:</case>

    <case pos:start="7695:5" pos:end="7695:15">case <expr pos:start="7695:10" pos:end="7695:14"><literal type="number" pos:start="7695:10" pos:end="7695:14">0x1c2</literal></expr>:</case>

    <case pos:start="7697:5" pos:end="7697:25">case <expr pos:start="7697:10" pos:end="7697:24"><literal type="number" pos:start="7697:10" pos:end="7697:14">0x1c4</literal> <operator pos:start="7697:16" pos:end="7697:18">...</operator> <literal type="number" pos:start="7697:20" pos:end="7697:24">0x1c6</literal></expr>:</case>

    <case pos:start="7699:5" pos:end="7699:25">case <expr pos:start="7699:10" pos:end="7699:24"><literal type="number" pos:start="7699:10" pos:end="7699:14">0x1d0</literal> <operator pos:start="7699:16" pos:end="7699:18">...</operator> <literal type="number" pos:start="7699:20" pos:end="7699:24">0x1fe</literal></expr>:</case>

        <expr_stmt pos:start="7701:9" pos:end="7701:44"><expr pos:start="7701:9" pos:end="7701:43"><call pos:start="7701:9" pos:end="7701:43"><name pos:start="7701:9" pos:end="7701:15">gen_sse</name><argument_list pos:start="7701:16" pos:end="7701:43">(<argument pos:start="7701:17" pos:end="7701:19"><expr pos:start="7701:17" pos:end="7701:19"><name pos:start="7701:17" pos:end="7701:19">env</name></expr></argument>, <argument pos:start="7701:22" pos:end="7701:22"><expr pos:start="7701:22" pos:end="7701:22"><name pos:start="7701:22" pos:end="7701:22">s</name></expr></argument>, <argument pos:start="7701:25" pos:end="7701:25"><expr pos:start="7701:25" pos:end="7701:25"><name pos:start="7701:25" pos:end="7701:25">b</name></expr></argument>, <argument pos:start="7701:28" pos:end="7701:35"><expr pos:start="7701:28" pos:end="7701:35"><name pos:start="7701:28" pos:end="7701:35">pc_start</name></expr></argument>, <argument pos:start="7701:38" pos:end="7701:42"><expr pos:start="7701:38" pos:end="7701:42"><name pos:start="7701:38" pos:end="7701:42">rex_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7703:9" pos:end="7703:14">break;</break>

    <default pos:start="7705:5" pos:end="7705:12">default:</default>

        <goto pos:start="7707:9" pos:end="7707:24">goto <name pos:start="7707:14" pos:end="7707:23">unknown_op</name>;</goto>

    </block_content>}</block></switch>

    <return pos:start="7711:5" pos:end="7711:17">return <expr pos:start="7711:12" pos:end="7711:16"><name pos:start="7711:12" pos:end="7711:16"><name pos:start="7711:12" pos:end="7711:12">s</name><operator pos:start="7711:13" pos:end="7711:14">-&gt;</operator><name pos:start="7711:15" pos:end="7711:16">pc</name></name></expr>;</return>

 <label pos:start="7713:2" pos:end="7713:12"><name pos:start="7713:2" pos:end="7713:11">illegal_op</name>:</label>

    <expr_stmt pos:start="7715:5" pos:end="7715:26"><expr pos:start="7715:5" pos:end="7715:25"><call pos:start="7715:5" pos:end="7715:25"><name pos:start="7715:5" pos:end="7715:22">gen_illegal_opcode</name><argument_list pos:start="7715:23" pos:end="7715:25">(<argument pos:start="7715:24" pos:end="7715:24"><expr pos:start="7715:24" pos:end="7715:24"><name pos:start="7715:24" pos:end="7715:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="7717:5" pos:end="7717:17">return <expr pos:start="7717:12" pos:end="7717:16"><name pos:start="7717:12" pos:end="7717:16"><name pos:start="7717:12" pos:end="7717:12">s</name><operator pos:start="7717:13" pos:end="7717:14">-&gt;</operator><name pos:start="7717:15" pos:end="7717:16">pc</name></name></expr>;</return>

 <label pos:start="7719:2" pos:end="7719:12"><name pos:start="7719:2" pos:end="7719:11">unknown_op</name>:</label>

    <expr_stmt pos:start="7721:5" pos:end="7721:31"><expr pos:start="7721:5" pos:end="7721:30"><call pos:start="7721:5" pos:end="7721:30"><name pos:start="7721:5" pos:end="7721:22">gen_unknown_opcode</name><argument_list pos:start="7721:23" pos:end="7721:30">(<argument pos:start="7721:24" pos:end="7721:26"><expr pos:start="7721:24" pos:end="7721:26"><name pos:start="7721:24" pos:end="7721:26">env</name></expr></argument>, <argument pos:start="7721:29" pos:end="7721:29"><expr pos:start="7721:29" pos:end="7721:29"><name pos:start="7721:29" pos:end="7721:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="7723:5" pos:end="7723:17">return <expr pos:start="7723:12" pos:end="7723:16"><name pos:start="7723:12" pos:end="7723:16"><name pos:start="7723:12" pos:end="7723:12">s</name><operator pos:start="7723:13" pos:end="7723:14">-&gt;</operator><name pos:start="7723:15" pos:end="7723:16">pc</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
