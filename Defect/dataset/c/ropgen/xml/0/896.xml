<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/896.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vmdk_write</name><parameter_list pos:start="1:22" pos:end="3:56">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><name pos:start="1:45" pos:end="1:51">int64_t</name></type> <name pos:start="1:53" pos:end="1:62">sector_num</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:39"><decl pos:start="3:22" pos:end="3:39"><type pos:start="3:22" pos:end="3:39"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:34">uint8_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">buf</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:55">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="121:1">{<block_content pos:start="7:5" pos:end="119:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVVmdkState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">VmdkExtent</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">extent</name> <init pos:start="9:24" pos:end="9:29">= <expr pos:start="9:26" pos:end="9:29"><name pos:start="9:26" pos:end="9:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:28">index_in_cluster</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:27">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">VmdkMetaData</name></type> <name pos:start="17:18" pos:end="17:23">m_data</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="33:5">if <condition pos:start="21:8" pos:end="21:39">(<expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:18">sector_num</name> <operator pos:start="21:20" pos:end="21:20">&gt;</operator> <name pos:start="21:22" pos:end="21:38"><name pos:start="21:22" pos:end="21:23">bs</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:38">total_sectors</name></name></expr>)</condition> <block pos:start="21:41" pos:end="33:5">{<block_content pos:start="23:9" pos:end="31:18">

        <expr_stmt pos:start="23:9" pos:end="29:47"><expr pos:start="23:9" pos:end="29:46"><call pos:start="23:9" pos:end="29:46"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="29:46">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>,

                <argument pos:start="25:17" pos:end="27:48"><expr pos:start="25:17" pos:end="27:48"><literal type="string" pos:start="25:17" pos:end="25:53">"(VMDK) Wrong offset: sector_num=0x%"</literal> <name pos:start="25:55" pos:end="25:60">PRIx64</name>

                <literal type="string" pos:start="27:17" pos:end="27:36">" total_sectors=0x%"</literal> <name pos:start="27:38" pos:end="27:43">PRIx64</name> <literal type="string" pos:start="27:45" pos:end="27:48">"\n"</literal></expr></argument>,

                <argument pos:start="29:17" pos:end="29:26"><expr pos:start="29:17" pos:end="29:26"><name pos:start="29:17" pos:end="29:26">sector_num</name></expr></argument>, <argument pos:start="29:29" pos:end="29:45"><expr pos:start="29:29" pos:end="29:45"><name pos:start="29:29" pos:end="29:45"><name pos:start="29:29" pos:end="29:30">bs</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:45">total_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="37:5" pos:end="117:5">while <condition pos:start="37:11" pos:end="37:26">(<expr pos:start="37:12" pos:end="37:25"><name pos:start="37:12" pos:end="37:21">nb_sectors</name> <operator pos:start="37:23" pos:end="37:23">&gt;</operator> <literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr>)</condition> <block pos:start="37:28" pos:end="117:5">{<block_content pos:start="39:9" pos:end="115:9">

        <expr_stmt pos:start="39:9" pos:end="39:52"><expr pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:14">extent</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:51"><name pos:start="39:18" pos:end="39:28">find_extent</name><argument_list pos:start="39:29" pos:end="39:51">(<argument pos:start="39:30" pos:end="39:30"><expr pos:start="39:30" pos:end="39:30"><name pos:start="39:30" pos:end="39:30">s</name></expr></argument>, <argument pos:start="39:33" pos:end="39:42"><expr pos:start="39:33" pos:end="39:42"><name pos:start="39:33" pos:end="39:42">sector_num</name></expr></argument>, <argument pos:start="39:45" pos:end="39:50"><expr pos:start="39:45" pos:end="39:50"><name pos:start="39:45" pos:end="39:50">extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:19">extent</name></expr>)</condition> <block pos:start="41:22" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:24">

            <return pos:start="43:13" pos:end="43:24">return <expr pos:start="43:20" pos:end="43:23"><operator pos:start="43:20" pos:end="43:20">-</operator><name pos:start="43:21" pos:end="43:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="55:52"><expr pos:start="47:9" pos:end="55:51"><name pos:start="47:9" pos:end="47:22">cluster_offset</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <call pos:start="47:26" pos:end="55:51"><name pos:start="47:26" pos:end="47:43">get_cluster_offset</name><argument_list pos:start="47:44" pos:end="55:51">(

                                <argument pos:start="49:33" pos:end="49:34"><expr pos:start="49:33" pos:end="49:34"><name pos:start="49:33" pos:end="49:34">bs</name></expr></argument>,

                                <argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><name pos:start="51:33" pos:end="51:38">extent</name></expr></argument>,

                                <argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><operator pos:start="53:33" pos:end="53:33">&amp;</operator><name pos:start="53:34" pos:end="53:39">m_data</name></expr></argument>,

                                <argument pos:start="55:33" pos:end="55:47"><expr pos:start="55:33" pos:end="55:47"><name pos:start="55:33" pos:end="55:42">sector_num</name> <operator pos:start="55:44" pos:end="55:45">&lt;&lt;</operator> <literal type="number" pos:start="55:47" pos:end="55:47">9</literal></expr></argument>, <argument pos:start="55:50" pos:end="55:50"><expr pos:start="55:50" pos:end="55:50"><literal type="number" pos:start="55:50" pos:end="55:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:28">(<expr pos:start="57:13" pos:end="57:27"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:27">cluster_offset</name></expr>)</condition> <block pos:start="57:30" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:22">

            <return pos:start="59:13" pos:end="59:22">return <expr pos:start="59:20" pos:end="59:21"><operator pos:start="59:20" pos:end="59:20">-</operator><literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:64"><expr pos:start="63:9" pos:end="63:63"><name pos:start="63:9" pos:end="63:24">index_in_cluster</name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:37">sector_num</name> <operator pos:start="63:39" pos:end="63:39">%</operator> <name pos:start="63:41" pos:end="63:63"><name pos:start="63:41" pos:end="63:46">extent</name><operator pos:start="63:47" pos:end="63:48">-&gt;</operator><name pos:start="63:49" pos:end="63:63">cluster_sectors</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:55"><expr pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:9">n</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <name pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:18">extent</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:35">cluster_sectors</name></name> <operator pos:start="65:37" pos:end="65:37">-</operator> <name pos:start="65:39" pos:end="65:54">index_in_cluster</name></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:27">(<expr pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:13">n</name> <operator pos:start="67:15" pos:end="67:15">&gt;</operator> <name pos:start="67:17" pos:end="67:26">nb_sectors</name></expr>)</condition> <block pos:start="67:29" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:27">

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:13">n</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:26">nb_sectors</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="75:9" pos:end="85:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="81:27">(<expr pos:start="75:13" pos:end="81:26"><call pos:start="75:13" pos:end="79:37"><name pos:start="75:13" pos:end="75:23">bdrv_pwrite</name><argument_list pos:start="75:24" pos:end="79:37">(<argument pos:start="75:25" pos:end="75:32"><expr pos:start="75:25" pos:end="75:32"><name pos:start="75:25" pos:end="75:32"><name pos:start="75:25" pos:end="75:26">bs</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:32">file</name></name></expr></argument>,

                        <argument pos:start="77:25" pos:end="77:63"><expr pos:start="77:25" pos:end="77:63"><name pos:start="77:25" pos:end="77:38">cluster_offset</name> <operator pos:start="77:40" pos:end="77:40">+</operator> <name pos:start="77:42" pos:end="77:57">index_in_cluster</name> <operator pos:start="77:59" pos:end="77:59">*</operator> <literal type="number" pos:start="77:61" pos:end="77:63">512</literal></expr></argument>,

                        <argument pos:start="79:25" pos:end="79:27"><expr pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">buf</name></expr></argument>, <argument pos:start="79:30" pos:end="79:36"><expr pos:start="79:30" pos:end="79:36"><name pos:start="79:30" pos:end="79:30">n</name> <operator pos:start="79:32" pos:end="79:32">*</operator> <literal type="number" pos:start="79:34" pos:end="79:36">512</literal></expr></argument>)</argument_list></call>

                <operator pos:start="81:17" pos:end="81:18">!=</operator> <name pos:start="81:20" pos:end="81:20">n</name> <operator pos:start="81:22" pos:end="81:22">*</operator> <literal type="number" pos:start="81:24" pos:end="81:26">512</literal></expr>)</condition> <block pos:start="81:29" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:22">

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="97:9"><if pos:start="87:9" pos:end="97:9">if <condition pos:start="87:12" pos:end="87:25">(<expr pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:18">m_data</name><operator pos:start="87:19" pos:end="87:19">.</operator><name pos:start="87:20" pos:end="87:24">valid</name></name></expr>)</condition> <block pos:start="87:27" pos:end="97:9">{<block_content pos:start="91:13" pos:end="95:13">

            <comment type="block" pos:start="89:13" pos:end="89:34">/* update L2 tables */</comment>

            <if_stmt pos:start="91:13" pos:end="95:13"><if pos:start="91:13" pos:end="95:13">if <condition pos:start="91:16" pos:end="91:53">(<expr pos:start="91:17" pos:end="91:52"><call pos:start="91:17" pos:end="91:46"><name pos:start="91:17" pos:end="91:29">vmdk_L2update</name><argument_list pos:start="91:30" pos:end="91:46">(<argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><name pos:start="91:31" pos:end="91:36">extent</name></expr></argument>, <argument pos:start="91:39" pos:end="91:45"><expr pos:start="91:39" pos:end="91:45"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:45">m_data</name></expr></argument>)</argument_list></call> <operator pos:start="91:48" pos:end="91:49">==</operator> <operator pos:start="91:51" pos:end="91:51">-</operator><literal type="number" pos:start="91:52" pos:end="91:52">1</literal></expr>)</condition> <block pos:start="91:55" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:26">

                <return pos:start="93:17" pos:end="93:26">return <expr pos:start="93:24" pos:end="93:25"><operator pos:start="93:24" pos:end="93:24">-</operator><literal type="number" pos:start="93:25" pos:end="93:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:18">nb_sectors</name> <operator pos:start="99:20" pos:end="99:21">-=</operator> <name pos:start="99:23" pos:end="99:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:24"><expr pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:18">sector_num</name> <operator pos:start="101:20" pos:end="101:21">+=</operator> <name pos:start="101:23" pos:end="101:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:23"><expr pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:11">buf</name> <operator pos:start="103:13" pos:end="103:14">+=</operator> <name pos:start="103:16" pos:end="103:16">n</name> <operator pos:start="103:18" pos:end="103:18">*</operator> <literal type="number" pos:start="103:20" pos:end="103:22">512</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="107:9" pos:end="107:78">// update CID on the first write every time the virtual disk is opened</comment>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:28">(<expr pos:start="109:13" pos:end="109:27"><operator pos:start="109:13" pos:end="109:13">!</operator><name pos:start="109:14" pos:end="109:27"><name pos:start="109:14" pos:end="109:14">s</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:27">cid_updated</name></name></expr>)</condition> <block pos:start="109:30" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:34">

            <expr_stmt pos:start="111:13" pos:end="111:43"><expr pos:start="111:13" pos:end="111:42"><call pos:start="111:13" pos:end="111:42"><name pos:start="111:13" pos:end="111:26">vmdk_write_cid</name><argument_list pos:start="111:27" pos:end="111:42">(<argument pos:start="111:28" pos:end="111:29"><expr pos:start="111:28" pos:end="111:29"><name pos:start="111:28" pos:end="111:29">bs</name></expr></argument>, <argument pos:start="111:32" pos:end="111:41"><expr pos:start="111:32" pos:end="111:41"><call pos:start="111:32" pos:end="111:41"><name pos:start="111:32" pos:end="111:35">time</name><argument_list pos:start="111:36" pos:end="111:41">(<argument pos:start="111:37" pos:end="111:40"><expr pos:start="111:37" pos:end="111:40"><name pos:start="111:37" pos:end="111:40">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:34"><expr pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:26"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:26">cid_updated</name></name> <operator pos:start="113:28" pos:end="113:28">=</operator> <name pos:start="113:30" pos:end="113:33">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <return pos:start="119:5" pos:end="119:13">return <expr pos:start="119:12" pos:end="119:12"><literal type="number" pos:start="119:12" pos:end="119:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
