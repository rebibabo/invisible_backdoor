<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14094.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">xen_domain_watcher</name><parameter_list pos:start="1:31" pos:end="1:36">(<parameter pos:start="1:32" pos:end="1:35"><decl pos:start="1:32" pos:end="1:35"><type pos:start="1:32" pos:end="1:35"><name pos:start="1:32" pos:end="1:35">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">qemu_running</name> <init pos:start="5:22" pos:end="5:24">= <expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:10">fd</name><index pos:start="7:11" pos:end="7:13">[<expr pos:start="7:12" pos:end="7:12"><literal type="number" pos:start="7:12" pos:end="7:12">2</literal></expr>]</index></name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">i</name></decl>, <decl pos:start="7:19" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:19">n</name></decl>, <decl pos:start="7:22" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:23">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:13">byte</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:13"><expr pos:start="13:5" pos:end="13:12"><call pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:8">pipe</name><argument_list pos:start="13:9" pos:end="13:12">(<argument pos:start="13:10" pos:end="13:11"><expr pos:start="13:10" pos:end="13:11"><name pos:start="13:10" pos:end="13:11">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:15"><if pos:start="15:5" pos:end="17:15">if <condition pos:start="15:8" pos:end="15:20">(<expr pos:start="15:9" pos:end="15:19"><call pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:12">fork</name><argument_list pos:start="15:13" pos:end="15:14">()</argument_list></call> <operator pos:start="15:16" pos:end="15:17">!=</operator> <literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:15"><block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="17:17" pos:end="17:31">/* not child */</comment>



    <comment type="block" pos:start="21:5" pos:end="23:53">/* close all file handles, except stdio/out/err,

     * our watch pipe and the xen interface handle */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:24"><expr pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:5">n</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:21">getdtablesize</name><argument_list pos:start="25:22" pos:end="25:23">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="27:5" pos:end="39:5">for <control pos:start="27:9" pos:end="27:27">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">3</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:21"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:21">n</name></expr>;</condition> <incr pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:24">i</name><operator pos:start="27:25" pos:end="27:26">++</operator></expr></incr>)</control> <block pos:start="27:29" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:17">

        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:23">(<expr pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:13">i</name> <operator pos:start="29:15" pos:end="29:16">==</operator> <name pos:start="29:18" pos:end="29:22"><name pos:start="29:18" pos:end="29:19">fd</name><index pos:start="29:20" pos:end="29:22">[<expr pos:start="29:21" pos:end="29:21"><literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="35:21"><if pos:start="33:9" pos:end="35:21">if <condition pos:start="33:12" pos:end="33:24">(<expr pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:13">i</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <name pos:start="33:18" pos:end="33:23">xen_xc</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:21"><block_content pos:start="35:13" pos:end="35:21">

            <continue pos:start="35:13" pos:end="35:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:17"><expr pos:start="37:9" pos:end="37:16"><call pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:13">close</name><argument_list pos:start="37:14" pos:end="37:16">(<argument pos:start="37:15" pos:end="37:15"><expr pos:start="37:15" pos:end="37:15"><name pos:start="37:15" pos:end="37:15">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="43:5" pos:end="43:29">/* ignore term signals */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><call pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:10">signal</name><argument_list pos:start="45:11" pos:end="45:28">(<argument pos:start="45:12" pos:end="45:17"><expr pos:start="45:12" pos:end="45:17"><name pos:start="45:12" pos:end="45:17">SIGINT</name></expr></argument>,  <argument pos:start="45:21" pos:end="45:27"><expr pos:start="45:21" pos:end="45:27"><name pos:start="45:21" pos:end="45:27">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><call pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:10">signal</name><argument_list pos:start="47:11" pos:end="47:28">(<argument pos:start="47:12" pos:end="47:18"><expr pos:start="47:12" pos:end="47:18"><name pos:start="47:12" pos:end="47:18">SIGTERM</name></expr></argument>, <argument pos:start="47:21" pos:end="47:27"><expr pos:start="47:21" pos:end="47:27"><name pos:start="47:21" pos:end="47:27">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:31">/* wait for qemu exiting */</comment>

    <while pos:start="53:5" pos:end="87:5">while <condition pos:start="53:11" pos:end="53:24">(<expr pos:start="53:12" pos:end="53:23"><name pos:start="53:12" pos:end="53:23">qemu_running</name></expr>)</condition> <block pos:start="53:26" pos:end="87:5">{<block_content pos:start="55:9" pos:end="85:9">

        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:10">rc</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <call pos:start="55:14" pos:end="55:34"><name pos:start="55:14" pos:end="55:17">read</name><argument_list pos:start="55:18" pos:end="55:34">(<argument pos:start="55:19" pos:end="55:23"><expr pos:start="55:19" pos:end="55:23"><name pos:start="55:19" pos:end="55:23"><name pos:start="55:19" pos:end="55:20">fd</name><index pos:start="55:21" pos:end="55:23">[<expr pos:start="55:22" pos:end="55:22"><literal type="number" pos:start="55:22" pos:end="55:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:26" pos:end="55:30"><expr pos:start="55:26" pos:end="55:30"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:30">byte</name></expr></argument>, <argument pos:start="55:33" pos:end="55:33"><expr pos:start="55:33" pos:end="55:33"><literal type="number" pos:start="55:33" pos:end="55:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="57:9" pos:end="85:9">switch <condition pos:start="57:16" pos:end="57:19">(<expr pos:start="57:17" pos:end="57:18"><name pos:start="57:17" pos:end="57:18">rc</name></expr>)</condition> <block pos:start="57:21" pos:end="85:9">{<block_content pos:start="59:9" pos:end="83:18">

        <case pos:start="59:9" pos:end="59:16">case <expr pos:start="59:14" pos:end="59:15"><operator pos:start="59:14" pos:end="59:14">-</operator><literal type="number" pos:start="59:15" pos:end="59:15">1</literal></expr>:</case>

            <if_stmt pos:start="61:13" pos:end="63:25"><if pos:start="61:13" pos:end="63:25">if <condition pos:start="61:16" pos:end="61:31">(<expr pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:21">errno</name> <operator pos:start="61:23" pos:end="61:24">==</operator> <name pos:start="61:26" pos:end="61:30">EINTR</name></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:25"><block_content pos:start="63:17" pos:end="63:25">

                <continue pos:start="63:17" pos:end="63:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:81"><expr pos:start="65:13" pos:end="65:80"><call pos:start="65:13" pos:end="65:80"><name pos:start="65:13" pos:end="65:20">qemu_log</name><argument_list pos:start="65:21" pos:end="65:80">(<argument pos:start="65:22" pos:end="65:48"><expr pos:start="65:22" pos:end="65:48"><literal type="string" pos:start="65:22" pos:end="65:48">"%s: Huh? read error: %s\n"</literal></expr></argument>, <argument pos:start="65:51" pos:end="65:62"><expr pos:start="65:51" pos:end="65:62"><name pos:start="65:51" pos:end="65:62">__FUNCTION__</name></expr></argument>, <argument pos:start="65:65" pos:end="65:79"><expr pos:start="65:65" pos:end="65:79"><call pos:start="65:65" pos:end="65:79"><name pos:start="65:65" pos:end="65:72">strerror</name><argument_list pos:start="65:73" pos:end="65:79">(<argument pos:start="65:74" pos:end="65:78"><expr pos:start="65:74" pos:end="65:78"><name pos:start="65:74" pos:end="65:78">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:29"><expr pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:24">qemu_running</name> <operator pos:start="67:26" pos:end="67:26">=</operator> <literal type="number" pos:start="67:28" pos:end="67:28">0</literal></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <case pos:start="71:9" pos:end="71:15">case <expr pos:start="71:14" pos:end="71:14"><literal type="number" pos:start="71:14" pos:end="71:14">0</literal></expr>:</case>

            <comment type="block" pos:start="73:13" pos:end="73:36">/* EOF -&gt; qemu exited */</comment>

            <expr_stmt pos:start="75:13" pos:end="75:29"><expr pos:start="75:13" pos:end="75:28"><name pos:start="75:13" pos:end="75:24">qemu_running</name> <operator pos:start="75:26" pos:end="75:26">=</operator> <literal type="number" pos:start="75:28" pos:end="75:28">0</literal></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        <default pos:start="79:9" pos:end="79:16">default:</default>

            <expr_stmt pos:start="81:13" pos:end="81:73"><expr pos:start="81:13" pos:end="81:72"><call pos:start="81:13" pos:end="81:72"><name pos:start="81:13" pos:end="81:20">qemu_log</name><argument_list pos:start="81:21" pos:end="81:72">(<argument pos:start="81:22" pos:end="81:57"><expr pos:start="81:22" pos:end="81:57"><literal type="string" pos:start="81:22" pos:end="81:57">"%s: Huh? data on the watch pipe?\n"</literal></expr></argument>, <argument pos:start="81:60" pos:end="81:71"><expr pos:start="81:60" pos:end="81:71"><name pos:start="81:60" pos:end="81:71">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <comment type="block" pos:start="91:5" pos:end="91:17">/* cleanup */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:65"><expr pos:start="93:5" pos:end="93:64"><call pos:start="93:5" pos:end="93:64"><name pos:start="93:5" pos:end="93:12">qemu_log</name><argument_list pos:start="93:13" pos:end="93:64">(<argument pos:start="93:14" pos:end="93:38"><expr pos:start="93:14" pos:end="93:38"><literal type="string" pos:start="93:14" pos:end="93:38">"%s: destroy domain %d\n"</literal></expr></argument>, <argument pos:start="93:41" pos:end="93:52"><expr pos:start="93:41" pos:end="93:52"><name pos:start="93:41" pos:end="93:52">__FUNCTION__</name></expr></argument>, <argument pos:start="93:55" pos:end="93:63"><expr pos:start="93:55" pos:end="93:63"><name pos:start="93:55" pos:end="93:63">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:41"><expr pos:start="95:5" pos:end="95:40"><call pos:start="95:5" pos:end="95:40"><name pos:start="95:5" pos:end="95:21">xc_domain_destroy</name><argument_list pos:start="95:22" pos:end="95:40">(<argument pos:start="95:23" pos:end="95:28"><expr pos:start="95:23" pos:end="95:28"><name pos:start="95:23" pos:end="95:28">xen_xc</name></expr></argument>, <argument pos:start="95:31" pos:end="95:39"><expr pos:start="95:31" pos:end="95:39"><name pos:start="95:31" pos:end="95:39">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:13"><expr pos:start="97:5" pos:end="97:12"><call pos:start="97:5" pos:end="97:12"><name pos:start="97:5" pos:end="97:9">_exit</name><argument_list pos:start="97:10" pos:end="97:12">(<argument pos:start="97:11" pos:end="97:11"><expr pos:start="97:11" pos:end="97:11"><literal type="number" pos:start="97:11" pos:end="97:11">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
