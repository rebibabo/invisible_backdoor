<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21257.c" pos:tabs="8"><function pos:start="1:1" pos:end="2871:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">gen_sse</name><parameter_list pos:start="1:20" pos:end="3:53">(<parameter pos:start="1:21" pos:end="1:36"><decl pos:start="1:21" pos:end="1:36"><type pos:start="1:21" pos:end="1:36"><name pos:start="1:21" pos:end="1:31">CPUX86State</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:50">DisasContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:60"><decl pos:start="1:56" pos:end="1:60"><type pos:start="1:56" pos:end="1:60"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:60">b</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:41"><decl pos:start="3:21" pos:end="3:41"><type pos:start="3:21" pos:end="3:41"><name pos:start="3:21" pos:end="3:32">target_ulong</name></type> <name pos:start="3:34" pos:end="3:41">pc_start</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:52"><decl pos:start="3:44" pos:end="3:52"><type pos:start="3:44" pos:end="3:52"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:52">rex_r</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="2871:1">{<block_content pos:start="7:5" pos:end="2869:5">

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">b1</name></decl>, <decl pos:start="7:13" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:22">op1_offset</name></decl>, <decl pos:start="7:25" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:34">op2_offset</name></decl>, <decl pos:start="7:37" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:37" pos:end="7:42">is_xmm</name></decl>, <decl pos:start="7:45" pos:end="7:47"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:45" pos:end="7:47">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">modrm</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">mod</name></decl>, <decl pos:start="9:21" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:22">rm</name></decl>, <decl pos:start="9:25" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:27">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">SSEFunc_0_epp</name></type> <name pos:start="11:19" pos:end="11:28">sse_fn_epp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">SSEFunc_0_eppi</name></type> <name pos:start="13:20" pos:end="13:30">sse_fn_eppi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">SSEFunc_0_ppi</name></type> <name pos:start="15:19" pos:end="15:28">sse_fn_ppi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18">SSEFunc_0_eppt</name></type> <name pos:start="17:20" pos:end="17:30">sse_fn_eppt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">TCGMemOp</name></type> <name pos:start="19:14" pos:end="19:15">ot</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:14"><expr pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">b</name> <operator pos:start="23:7" pos:end="23:8">&amp;=</operator> <literal type="number" pos:start="23:10" pos:end="23:13">0xff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="39:15"><if pos:start="25:5" pos:end="27:15">if <condition pos:start="25:8" pos:end="25:32">(<expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">prefix</name></name> <operator pos:start="25:19" pos:end="25:19">&amp;</operator> <name pos:start="25:21" pos:end="25:31">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:15"><block_content pos:start="27:9" pos:end="27:15">

        <expr_stmt pos:start="27:9" pos:end="27:15"><expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">b1</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="29:5" pos:end="31:15">else if <condition pos:start="29:13" pos:end="29:37">(<expr pos:start="29:14" pos:end="29:36"><name pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:14">s</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:22">prefix</name></name> <operator pos:start="29:24" pos:end="29:24">&amp;</operator> <name pos:start="29:26" pos:end="29:36">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:15"><block_content pos:start="31:9" pos:end="31:15">

        <expr_stmt pos:start="31:9" pos:end="31:15"><expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:10">b1</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">2</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="33:5" pos:end="35:15">else if <condition pos:start="33:13" pos:end="33:38">(<expr pos:start="33:14" pos:end="33:37"><name pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:14">s</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:22">prefix</name></name> <operator pos:start="33:24" pos:end="33:24">&amp;</operator> <name pos:start="33:26" pos:end="33:37">PREFIX_REPNZ</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:15"><block_content pos:start="35:9" pos:end="35:15">

        <expr_stmt pos:start="35:9" pos:end="35:15"><expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">b1</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">3</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="37:5" pos:end="39:15">else<block type="pseudo" pos:start="39:9" pos:end="39:15"><block_content pos:start="39:9" pos:end="39:15">

        <expr_stmt pos:start="39:9" pos:end="39:15"><expr pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:10">b1</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:14">sse_fn_epp</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:37"><name pos:start="41:18" pos:end="41:30">sse_op_table1</name><index pos:start="41:31" pos:end="41:33">[<expr pos:start="41:32" pos:end="41:32"><name pos:start="41:32" pos:end="41:32">b</name></expr>]</index><index pos:start="41:34" pos:end="41:37">[<expr pos:start="41:35" pos:end="41:36"><name pos:start="41:35" pos:end="41:36">b1</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:20">(<expr pos:start="43:9" pos:end="43:19"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:19">sse_fn_epp</name></expr>)</condition> <block pos:start="43:22" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:24">

        <goto pos:start="45:9" pos:end="45:24">goto <name pos:start="45:14" pos:end="45:23">unknown_op</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="67:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:59">(<expr pos:start="49:9" pos:end="49:58"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:10">b</name> <operator pos:start="49:12" pos:end="49:13">&lt;=</operator> <literal type="number" pos:start="49:15" pos:end="49:18">0x5f</literal> <operator pos:start="49:20" pos:end="49:21">&amp;&amp;</operator> <name pos:start="49:23" pos:end="49:23">b</name> <operator pos:start="49:25" pos:end="49:26">&gt;=</operator> <literal type="number" pos:start="49:28" pos:end="49:31">0x10</literal><operator pos:start="49:32" pos:end="49:32">)</operator> <operator pos:start="49:34" pos:end="49:35">||</operator> <name pos:start="49:37" pos:end="49:37">b</name> <operator pos:start="49:39" pos:end="49:40">==</operator> <literal type="number" pos:start="49:42" pos:end="49:45">0xc6</literal> <operator pos:start="49:47" pos:end="49:48">||</operator> <name pos:start="49:50" pos:end="49:50">b</name> <operator pos:start="49:52" pos:end="49:53">==</operator> <literal type="number" pos:start="49:55" pos:end="49:58">0xc2</literal></expr>)</condition> <block pos:start="49:61" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:19">

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:14">is_xmm</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="67:5">else <block pos:start="53:12" pos:end="67:5">{<block_content pos:start="55:9" pos:end="65:9">

        <if_stmt pos:start="55:9" pos:end="65:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:14">b1</name> <operator pos:start="55:16" pos:end="55:17">==</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:23">

            <comment type="block" pos:start="57:13" pos:end="57:26">/* MMX case */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:23"><expr pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:18">is_xmm</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="65:9">else <block pos:start="61:16" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:23">

            <expr_stmt pos:start="63:13" pos:end="63:23"><expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:18">is_xmm</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:34">/* simple MMX/SSE operation */</comment>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:30">(<expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:16">flags</name></name> <operator pos:start="71:18" pos:end="71:18">&amp;</operator> <name pos:start="71:20" pos:end="71:29">HF_TS_MASK</name></expr>)</condition> <block pos:start="71:32" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:15">

        <expr_stmt pos:start="73:9" pos:end="73:61"><expr pos:start="73:9" pos:end="73:60"><call pos:start="73:9" pos:end="73:60"><name pos:start="73:9" pos:end="73:21">gen_exception</name><argument_list pos:start="73:22" pos:end="73:60">(<argument pos:start="73:23" pos:end="73:23"><expr pos:start="73:23" pos:end="73:23"><name pos:start="73:23" pos:end="73:23">s</name></expr></argument>, <argument pos:start="73:26" pos:end="73:36"><expr pos:start="73:26" pos:end="73:36"><name pos:start="73:26" pos:end="73:36">EXCP07_PREX</name></expr></argument>, <argument pos:start="73:39" pos:end="73:59"><expr pos:start="73:39" pos:end="73:59"><name pos:start="73:39" pos:end="73:46">pc_start</name> <operator pos:start="73:48" pos:end="73:48">-</operator> <name pos:start="73:50" pos:end="73:59"><name pos:start="73:50" pos:end="73:50">s</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:59">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="79:30">(<expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">flags</name></name> <operator pos:start="79:18" pos:end="79:18">&amp;</operator> <name pos:start="79:20" pos:end="79:29">HF_EM_MASK</name></expr>)</condition> <block pos:start="79:32" pos:end="87:5">{<block_content pos:start="81:5" pos:end="85:15">

    <label pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:14">illegal_op</name>:</label>

        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><call pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:26">gen_illegal_opcode</name><argument_list pos:start="83:27" pos:end="83:29">(<argument pos:start="83:28" pos:end="83:28"><expr pos:start="83:28" pos:end="83:28"><name pos:start="83:28" pos:end="83:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="93:67">(<expr pos:start="89:9" pos:end="93:66"><name pos:start="89:9" pos:end="89:14">is_xmm</name>

        <operator pos:start="91:9" pos:end="91:10">&amp;&amp;</operator> <operator pos:start="91:12" pos:end="91:12">!</operator><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:21"><name pos:start="91:14" pos:end="91:14">s</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:21">flags</name></name> <operator pos:start="91:23" pos:end="91:23">&amp;</operator> <name pos:start="91:25" pos:end="91:38">HF_OSFXSR_MASK</name><operator pos:start="91:39" pos:end="91:39">)</operator>

        <operator pos:start="93:9" pos:end="93:10">&amp;&amp;</operator> <operator pos:start="93:12" pos:end="93:12">(</operator><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:14">b</name> <operator pos:start="93:16" pos:end="93:17">!=</operator> <literal type="number" pos:start="93:19" pos:end="93:22">0x38</literal> <operator pos:start="93:24" pos:end="93:25">&amp;&amp;</operator> <name pos:start="93:27" pos:end="93:27">b</name> <operator pos:start="93:29" pos:end="93:30">!=</operator> <literal type="number" pos:start="93:32" pos:end="93:35">0x3a</literal><operator pos:start="93:36" pos:end="93:36">)</operator> <operator pos:start="93:38" pos:end="93:39">||</operator> <operator pos:start="93:41" pos:end="93:41">(</operator><name pos:start="93:42" pos:end="93:50"><name pos:start="93:42" pos:end="93:42">s</name><operator pos:start="93:43" pos:end="93:44">-&gt;</operator><name pos:start="93:45" pos:end="93:50">prefix</name></name> <operator pos:start="93:52" pos:end="93:52">&amp;</operator> <name pos:start="93:54" pos:end="93:64">PREFIX_DATA</name><operator pos:start="93:65" pos:end="93:65">)</operator><operator pos:start="93:66" pos:end="93:66">)</operator></expr>)</condition> <block pos:start="93:69" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:24">

        <goto pos:start="95:9" pos:end="95:24">goto <name pos:start="95:14" pos:end="95:23">unknown_op</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="99:5" pos:end="115:5"><if pos:start="99:5" pos:end="115:5">if <condition pos:start="99:8" pos:end="99:18">(<expr pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:9">b</name> <operator pos:start="99:11" pos:end="99:12">==</operator> <literal type="number" pos:start="99:14" pos:end="99:17">0x0e</literal></expr>)</condition> <block pos:start="99:20" pos:end="115:5">{<block_content pos:start="101:9" pos:end="113:15">

        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:57">(<expr pos:start="101:13" pos:end="101:56"><operator pos:start="101:13" pos:end="101:13">!</operator><operator pos:start="101:14" pos:end="101:14">(</operator><name pos:start="101:15" pos:end="101:36"><name pos:start="101:15" pos:end="101:15">s</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:36">cpuid_ext2_features</name></name> <operator pos:start="101:38" pos:end="101:38">&amp;</operator> <name pos:start="101:40" pos:end="101:55">CPUID_EXT2_3DNOW</name><operator pos:start="101:56" pos:end="101:56">)</operator></expr>)</condition> <block pos:start="101:59" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:28">

            <comment type="block" pos:start="103:13" pos:end="103:74">/* If we were fully decoding this we might use illegal_op.  */</comment>

            <goto pos:start="105:13" pos:end="105:28">goto <name pos:start="105:18" pos:end="105:27">unknown_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="109:9" pos:end="109:19">/* femms */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:33"><expr pos:start="111:9" pos:end="111:32"><call pos:start="111:9" pos:end="111:32"><name pos:start="111:9" pos:end="111:23">gen_helper_emms</name><argument_list pos:start="111:24" pos:end="111:32">(<argument pos:start="111:25" pos:end="111:31"><expr pos:start="111:25" pos:end="111:31"><name pos:start="111:25" pos:end="111:31">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if <condition pos:start="117:8" pos:end="117:18">(<expr pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:9">b</name> <operator pos:start="117:11" pos:end="117:12">==</operator> <literal type="number" pos:start="117:14" pos:end="117:17">0x77</literal></expr>)</condition> <block pos:start="117:20" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:15">

        <comment type="block" pos:start="119:9" pos:end="119:18">/* emms */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:33"><expr pos:start="121:9" pos:end="121:32"><call pos:start="121:9" pos:end="121:32"><name pos:start="121:9" pos:end="121:23">gen_helper_emms</name><argument_list pos:start="121:24" pos:end="121:32">(<argument pos:start="121:25" pos:end="121:31"><expr pos:start="121:25" pos:end="121:31"><name pos:start="121:25" pos:end="121:31">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="127:5" pos:end="129:31">/* prepare MMX state (XXX: optimize by storing fptt and fptags in

       the static cpu state) */</comment>

    <if_stmt pos:start="131:5" pos:end="135:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:16">(<expr pos:start="131:9" pos:end="131:15"><operator pos:start="131:9" pos:end="131:9">!</operator><name pos:start="131:10" pos:end="131:15">is_xmm</name></expr>)</condition> <block pos:start="131:18" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:38">

        <expr_stmt pos:start="133:9" pos:end="133:38"><expr pos:start="133:9" pos:end="133:37"><call pos:start="133:9" pos:end="133:37"><name pos:start="133:9" pos:end="133:28">gen_helper_enter_mmx</name><argument_list pos:start="133:29" pos:end="133:37">(<argument pos:start="133:30" pos:end="133:36"><expr pos:start="133:30" pos:end="133:36"><name pos:start="133:30" pos:end="133:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:40"><expr pos:start="139:5" pos:end="139:39"><name pos:start="139:5" pos:end="139:9">modrm</name> <operator pos:start="139:11" pos:end="139:11">=</operator> <call pos:start="139:13" pos:end="139:39"><name pos:start="139:13" pos:end="139:25">cpu_ldub_code</name><argument_list pos:start="139:26" pos:end="139:39">(<argument pos:start="139:27" pos:end="139:29"><expr pos:start="139:27" pos:end="139:29"><name pos:start="139:27" pos:end="139:29">env</name></expr></argument>, <argument pos:start="139:32" pos:end="139:38"><expr pos:start="139:32" pos:end="139:38"><name pos:start="139:32" pos:end="139:36"><name pos:start="139:32" pos:end="139:32">s</name><operator pos:start="139:33" pos:end="139:34">-&gt;</operator><name pos:start="139:35" pos:end="139:36">pc</name></name><operator pos:start="139:37" pos:end="139:38">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:29"><expr pos:start="141:5" pos:end="141:28"><name pos:start="141:5" pos:end="141:7">reg</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <operator pos:start="141:11" pos:end="141:11">(</operator><operator pos:start="141:12" pos:end="141:12">(</operator><name pos:start="141:13" pos:end="141:17">modrm</name> <operator pos:start="141:19" pos:end="141:20">&gt;&gt;</operator> <literal type="number" pos:start="141:22" pos:end="141:22">3</literal><operator pos:start="141:23" pos:end="141:23">)</operator> <operator pos:start="141:25" pos:end="141:25">&amp;</operator> <literal type="number" pos:start="141:27" pos:end="141:27">7</literal><operator pos:start="141:28" pos:end="141:28">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="145:21"><if pos:start="143:5" pos:end="145:21">if <condition pos:start="143:8" pos:end="143:15">(<expr pos:start="143:9" pos:end="143:14"><name pos:start="143:9" pos:end="143:14">is_xmm</name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:21"><block_content pos:start="145:9" pos:end="145:21">

        <expr_stmt pos:start="145:9" pos:end="145:21"><expr pos:start="145:9" pos:end="145:20"><name pos:start="145:9" pos:end="145:11">reg</name> <operator pos:start="145:13" pos:end="145:14">|=</operator> <name pos:start="145:16" pos:end="145:20">rex_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:27"><expr pos:start="147:5" pos:end="147:26"><name pos:start="147:5" pos:end="147:7">mod</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <operator pos:start="147:11" pos:end="147:11">(</operator><name pos:start="147:12" pos:end="147:16">modrm</name> <operator pos:start="147:18" pos:end="147:19">&gt;&gt;</operator> <literal type="number" pos:start="147:21" pos:end="147:21">6</literal><operator pos:start="147:22" pos:end="147:22">)</operator> <operator pos:start="147:24" pos:end="147:24">&amp;</operator> <literal type="number" pos:start="147:26" pos:end="147:26">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="2869:5"><if pos:start="149:5" pos:end="2611:5">if <condition pos:start="149:8" pos:end="149:34">(<expr pos:start="149:9" pos:end="149:33"><name pos:start="149:9" pos:end="149:18">sse_fn_epp</name> <operator pos:start="149:20" pos:end="149:21">==</operator> <name pos:start="149:23" pos:end="149:33">SSE_SPECIAL</name></expr>)</condition> <block pos:start="149:36" pos:end="2611:5">{<block_content pos:start="151:9" pos:end="2609:9">

        <expr_stmt pos:start="151:9" pos:end="151:23"><expr pos:start="151:9" pos:end="151:22"><name pos:start="151:9" pos:end="151:9">b</name> <operator pos:start="151:11" pos:end="151:12">|=</operator> <operator pos:start="151:14" pos:end="151:14">(</operator><name pos:start="151:15" pos:end="151:16">b1</name> <operator pos:start="151:18" pos:end="151:19">&lt;&lt;</operator> <literal type="number" pos:start="151:21" pos:end="151:21">8</literal><operator pos:start="151:22" pos:end="151:22">)</operator></expr>;</expr_stmt>

        <switch pos:start="153:9" pos:end="2609:9">switch<condition pos:start="153:15" pos:end="153:17">(<expr pos:start="153:16" pos:end="153:16"><name pos:start="153:16" pos:end="153:16">b</name></expr>)</condition> <block pos:start="153:19" pos:end="2609:9">{<block_content pos:start="155:9" pos:end="2607:19">

        <case pos:start="155:9" pos:end="155:19">case <expr pos:start="155:14" pos:end="155:18"><literal type="number" pos:start="155:14" pos:end="155:18">0x0e7</literal></expr>:</case> <comment type="block" pos:start="155:21" pos:end="155:32">/* movntq */</comment>

            <if_stmt pos:start="157:13" pos:end="161:13"><if pos:start="157:13" pos:end="161:13">if <condition pos:start="157:16" pos:end="157:25">(<expr pos:start="157:17" pos:end="157:24"><name pos:start="157:17" pos:end="157:19">mod</name> <operator pos:start="157:21" pos:end="157:22">==</operator> <literal type="number" pos:start="157:24" pos:end="157:24">3</literal></expr>)</condition> <block pos:start="157:27" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:32">

                <goto pos:start="159:17" pos:end="159:32">goto <name pos:start="159:22" pos:end="159:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:41"><expr pos:start="163:13" pos:end="163:40"><call pos:start="163:13" pos:end="163:40"><name pos:start="163:13" pos:end="163:25">gen_lea_modrm</name><argument_list pos:start="163:26" pos:end="163:40">(<argument pos:start="163:27" pos:end="163:29"><expr pos:start="163:27" pos:end="163:29"><name pos:start="163:27" pos:end="163:29">env</name></expr></argument>, <argument pos:start="163:32" pos:end="163:32"><expr pos:start="163:32" pos:end="163:32"><name pos:start="163:32" pos:end="163:32">s</name></expr></argument>, <argument pos:start="163:35" pos:end="163:39"><expr pos:start="163:35" pos:end="163:39"><name pos:start="163:35" pos:end="163:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:70"><expr pos:start="165:13" pos:end="165:69"><call pos:start="165:13" pos:end="165:69"><name pos:start="165:13" pos:end="165:26">gen_stq_env_A0</name><argument_list pos:start="165:27" pos:end="165:69">(<argument pos:start="165:28" pos:end="165:28"><expr pos:start="165:28" pos:end="165:28"><name pos:start="165:28" pos:end="165:28">s</name></expr></argument>, <argument pos:start="165:31" pos:end="165:68"><expr pos:start="165:31" pos:end="165:68"><call pos:start="165:31" pos:end="165:68"><name pos:start="165:31" pos:end="165:38">offsetof</name><argument_list pos:start="165:39" pos:end="165:68">(<argument pos:start="165:40" pos:end="165:50"><expr pos:start="165:40" pos:end="165:50"><name pos:start="165:40" pos:end="165:50">CPUX86State</name></expr></argument>, <argument pos:start="165:53" pos:end="165:67"><expr pos:start="165:53" pos:end="165:67"><name pos:start="165:53" pos:end="165:63"><name pos:start="165:53" pos:end="165:58">fpregs</name><index pos:start="165:59" pos:end="165:63">[<expr pos:start="165:60" pos:end="165:62"><name pos:start="165:60" pos:end="165:62">reg</name></expr>]</index></name><operator pos:start="165:64" pos:end="165:64">.</operator><name pos:start="165:65" pos:end="165:67">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>

        <case pos:start="169:9" pos:end="169:19">case <expr pos:start="169:14" pos:end="169:18"><literal type="number" pos:start="169:14" pos:end="169:18">0x1e7</literal></expr>:</case> <comment type="block" pos:start="169:21" pos:end="169:33">/* movntdq */</comment>

        <case pos:start="171:9" pos:end="171:19">case <expr pos:start="171:14" pos:end="171:18"><literal type="number" pos:start="171:14" pos:end="171:18">0x02b</literal></expr>:</case> <comment type="block" pos:start="171:21" pos:end="171:33">/* movntps */</comment>

        <case pos:start="173:9" pos:end="173:19">case <expr pos:start="173:14" pos:end="173:18"><literal type="number" pos:start="173:14" pos:end="173:18">0x12b</literal></expr>:</case> <comment type="block" pos:start="173:21" pos:end="173:33">/* movntps */</comment>

            <if_stmt pos:start="175:13" pos:end="177:32"><if pos:start="175:13" pos:end="177:32">if <condition pos:start="175:16" pos:end="175:25">(<expr pos:start="175:17" pos:end="175:24"><name pos:start="175:17" pos:end="175:19">mod</name> <operator pos:start="175:21" pos:end="175:22">==</operator> <literal type="number" pos:start="175:24" pos:end="175:24">3</literal></expr>)</condition><block type="pseudo" pos:start="177:17" pos:end="177:32"><block_content pos:start="177:17" pos:end="177:32">

                <goto pos:start="177:17" pos:end="177:32">goto <name pos:start="177:22" pos:end="177:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:41"><expr pos:start="179:13" pos:end="179:40"><call pos:start="179:13" pos:end="179:40"><name pos:start="179:13" pos:end="179:25">gen_lea_modrm</name><argument_list pos:start="179:26" pos:end="179:40">(<argument pos:start="179:27" pos:end="179:29"><expr pos:start="179:27" pos:end="179:29"><name pos:start="179:27" pos:end="179:29">env</name></expr></argument>, <argument pos:start="179:32" pos:end="179:32"><expr pos:start="179:32" pos:end="179:32"><name pos:start="179:32" pos:end="179:32">s</name></expr></argument>, <argument pos:start="179:35" pos:end="179:39"><expr pos:start="179:35" pos:end="179:39"><name pos:start="179:35" pos:end="179:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:68"><expr pos:start="181:13" pos:end="181:67"><call pos:start="181:13" pos:end="181:67"><name pos:start="181:13" pos:end="181:26">gen_sto_env_A0</name><argument_list pos:start="181:27" pos:end="181:67">(<argument pos:start="181:28" pos:end="181:28"><expr pos:start="181:28" pos:end="181:28"><name pos:start="181:28" pos:end="181:28">s</name></expr></argument>, <argument pos:start="181:31" pos:end="181:66"><expr pos:start="181:31" pos:end="181:66"><call pos:start="181:31" pos:end="181:66"><name pos:start="181:31" pos:end="181:38">offsetof</name><argument_list pos:start="181:39" pos:end="181:66">(<argument pos:start="181:40" pos:end="181:50"><expr pos:start="181:40" pos:end="181:50"><name pos:start="181:40" pos:end="181:50">CPUX86State</name></expr></argument>, <argument pos:start="181:53" pos:end="181:65"><expr pos:start="181:53" pos:end="181:65"><name pos:start="181:53" pos:end="181:65"><name pos:start="181:53" pos:end="181:60">xmm_regs</name><index pos:start="181:61" pos:end="181:65">[<expr pos:start="181:62" pos:end="181:64"><name pos:start="181:62" pos:end="181:64">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="183:13" pos:end="183:18">break;</break>

        <case pos:start="185:9" pos:end="185:19">case <expr pos:start="185:14" pos:end="185:18"><literal type="number" pos:start="185:14" pos:end="185:18">0x3f0</literal></expr>:</case> <comment type="block" pos:start="185:21" pos:end="185:31">/* lddqu */</comment>

            <if_stmt pos:start="187:13" pos:end="189:32"><if pos:start="187:13" pos:end="189:32">if <condition pos:start="187:16" pos:end="187:25">(<expr pos:start="187:17" pos:end="187:24"><name pos:start="187:17" pos:end="187:19">mod</name> <operator pos:start="187:21" pos:end="187:22">==</operator> <literal type="number" pos:start="187:24" pos:end="187:24">3</literal></expr>)</condition><block type="pseudo" pos:start="189:17" pos:end="189:32"><block_content pos:start="189:17" pos:end="189:32">

                <goto pos:start="189:17" pos:end="189:32">goto <name pos:start="189:22" pos:end="189:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:41"><expr pos:start="191:13" pos:end="191:40"><call pos:start="191:13" pos:end="191:40"><name pos:start="191:13" pos:end="191:25">gen_lea_modrm</name><argument_list pos:start="191:26" pos:end="191:40">(<argument pos:start="191:27" pos:end="191:29"><expr pos:start="191:27" pos:end="191:29"><name pos:start="191:27" pos:end="191:29">env</name></expr></argument>, <argument pos:start="191:32" pos:end="191:32"><expr pos:start="191:32" pos:end="191:32"><name pos:start="191:32" pos:end="191:32">s</name></expr></argument>, <argument pos:start="191:35" pos:end="191:39"><expr pos:start="191:35" pos:end="191:39"><name pos:start="191:35" pos:end="191:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:68"><expr pos:start="193:13" pos:end="193:67"><call pos:start="193:13" pos:end="193:67"><name pos:start="193:13" pos:end="193:26">gen_ldo_env_A0</name><argument_list pos:start="193:27" pos:end="193:67">(<argument pos:start="193:28" pos:end="193:28"><expr pos:start="193:28" pos:end="193:28"><name pos:start="193:28" pos:end="193:28">s</name></expr></argument>, <argument pos:start="193:31" pos:end="193:66"><expr pos:start="193:31" pos:end="193:66"><call pos:start="193:31" pos:end="193:66"><name pos:start="193:31" pos:end="193:38">offsetof</name><argument_list pos:start="193:39" pos:end="193:66">(<argument pos:start="193:40" pos:end="193:50"><expr pos:start="193:40" pos:end="193:50"><name pos:start="193:40" pos:end="193:50">CPUX86State</name></expr></argument>, <argument pos:start="193:53" pos:end="193:65"><expr pos:start="193:53" pos:end="193:65"><name pos:start="193:53" pos:end="193:65"><name pos:start="193:53" pos:end="193:60">xmm_regs</name><index pos:start="193:61" pos:end="193:65">[<expr pos:start="193:62" pos:end="193:64"><name pos:start="193:62" pos:end="193:64">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        <case pos:start="197:9" pos:end="197:19">case <expr pos:start="197:14" pos:end="197:18"><literal type="number" pos:start="197:14" pos:end="197:18">0x22b</literal></expr>:</case> <comment type="block" pos:start="197:21" pos:end="197:33">/* movntss */</comment>

        <case pos:start="199:9" pos:end="199:19">case <expr pos:start="199:14" pos:end="199:18"><literal type="number" pos:start="199:14" pos:end="199:18">0x32b</literal></expr>:</case> <comment type="block" pos:start="199:21" pos:end="199:33">/* movntsd */</comment>

            <if_stmt pos:start="201:13" pos:end="203:32"><if pos:start="201:13" pos:end="203:32">if <condition pos:start="201:16" pos:end="201:25">(<expr pos:start="201:17" pos:end="201:24"><name pos:start="201:17" pos:end="201:19">mod</name> <operator pos:start="201:21" pos:end="201:22">==</operator> <literal type="number" pos:start="201:24" pos:end="201:24">3</literal></expr>)</condition><block type="pseudo" pos:start="203:17" pos:end="203:32"><block_content pos:start="203:17" pos:end="203:32">

                <goto pos:start="203:17" pos:end="203:32">goto <name pos:start="203:22" pos:end="203:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:41"><expr pos:start="205:13" pos:end="205:40"><call pos:start="205:13" pos:end="205:40"><name pos:start="205:13" pos:end="205:25">gen_lea_modrm</name><argument_list pos:start="205:26" pos:end="205:40">(<argument pos:start="205:27" pos:end="205:29"><expr pos:start="205:27" pos:end="205:29"><name pos:start="205:27" pos:end="205:29">env</name></expr></argument>, <argument pos:start="205:32" pos:end="205:32"><expr pos:start="205:32" pos:end="205:32"><name pos:start="205:32" pos:end="205:32">s</name></expr></argument>, <argument pos:start="205:35" pos:end="205:39"><expr pos:start="205:35" pos:end="205:39"><name pos:start="205:35" pos:end="205:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="207:13" pos:end="221:13"><if pos:start="207:13" pos:end="213:13">if <condition pos:start="207:16" pos:end="207:23">(<expr pos:start="207:17" pos:end="207:22"><name pos:start="207:17" pos:end="207:18">b1</name> <operator pos:start="207:20" pos:end="207:20">&amp;</operator> <literal type="number" pos:start="207:22" pos:end="207:22">1</literal></expr>)</condition> <block pos:start="207:25" pos:end="213:13">{<block_content pos:start="209:17" pos:end="211:68">

                <expr_stmt pos:start="209:17" pos:end="211:68"><expr pos:start="209:17" pos:end="211:67"><call pos:start="209:17" pos:end="211:67"><name pos:start="209:17" pos:end="209:30">gen_stq_env_A0</name><argument_list pos:start="209:31" pos:end="211:67">(<argument pos:start="209:32" pos:end="209:32"><expr pos:start="209:32" pos:end="209:32"><name pos:start="209:32" pos:end="209:32">s</name></expr></argument>, <argument pos:start="209:35" pos:end="211:66"><expr pos:start="209:35" pos:end="211:66"><call pos:start="209:35" pos:end="211:66"><name pos:start="209:35" pos:end="209:42">offsetof</name><argument_list pos:start="209:43" pos:end="211:66">(<argument pos:start="209:44" pos:end="209:54"><expr pos:start="209:44" pos:end="209:54"><name pos:start="209:44" pos:end="209:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="211:44" pos:end="211:65"><expr pos:start="211:44" pos:end="211:65"><name pos:start="211:44" pos:end="211:56"><name pos:start="211:44" pos:end="211:51">xmm_regs</name><index pos:start="211:52" pos:end="211:56">[<expr pos:start="211:53" pos:end="211:55"><name pos:start="211:53" pos:end="211:55">reg</name></expr>]</index></name><operator pos:start="211:57" pos:end="211:57">.</operator><call pos:start="211:58" pos:end="211:65"><name pos:start="211:58" pos:end="211:62">ZMM_Q</name><argument_list pos:start="211:63" pos:end="211:65">(<argument pos:start="211:64" pos:end="211:64"><expr pos:start="211:64" pos:end="211:64"><literal type="number" pos:start="211:64" pos:end="211:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="213:15" pos:end="221:13">else <block pos:start="213:20" pos:end="221:13">{<block_content pos:start="215:17" pos:end="219:54">

                <expr_stmt pos:start="215:17" pos:end="217:45"><expr pos:start="215:17" pos:end="217:44"><call pos:start="215:17" pos:end="217:44"><name pos:start="215:17" pos:end="215:32">tcg_gen_ld32u_tl</name><argument_list pos:start="215:33" pos:end="217:44">(<argument pos:start="215:34" pos:end="215:39"><expr pos:start="215:34" pos:end="215:39"><name pos:start="215:34" pos:end="215:39">cpu_T0</name></expr></argument>, <argument pos:start="215:42" pos:end="215:48"><expr pos:start="215:42" pos:end="215:48"><name pos:start="215:42" pos:end="215:48">cpu_env</name></expr></argument>, <argument pos:start="215:51" pos:end="217:43"><expr pos:start="215:51" pos:end="217:43"><call pos:start="215:51" pos:end="217:43"><name pos:start="215:51" pos:end="215:58">offsetof</name><argument_list pos:start="215:59" pos:end="217:43">(<argument pos:start="215:60" pos:end="215:70"><expr pos:start="215:60" pos:end="215:70"><name pos:start="215:60" pos:end="215:70">CPUX86State</name></expr></argument>,

                    <argument pos:start="217:21" pos:end="217:42"><expr pos:start="217:21" pos:end="217:42"><name pos:start="217:21" pos:end="217:33"><name pos:start="217:21" pos:end="217:28">xmm_regs</name><index pos:start="217:29" pos:end="217:33">[<expr pos:start="217:30" pos:end="217:32"><name pos:start="217:30" pos:end="217:32">reg</name></expr>]</index></name><operator pos:start="217:34" pos:end="217:34">.</operator><call pos:start="217:35" pos:end="217:42"><name pos:start="217:35" pos:end="217:39">ZMM_L</name><argument_list pos:start="217:40" pos:end="217:42">(<argument pos:start="217:41" pos:end="217:41"><expr pos:start="217:41" pos:end="217:41"><literal type="number" pos:start="217:41" pos:end="217:41">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:54"><expr pos:start="219:17" pos:end="219:53"><call pos:start="219:17" pos:end="219:53"><name pos:start="219:17" pos:end="219:27">gen_op_st_v</name><argument_list pos:start="219:28" pos:end="219:53">(<argument pos:start="219:29" pos:end="219:29"><expr pos:start="219:29" pos:end="219:29"><name pos:start="219:29" pos:end="219:29">s</name></expr></argument>, <argument pos:start="219:32" pos:end="219:36"><expr pos:start="219:32" pos:end="219:36"><name pos:start="219:32" pos:end="219:36">MO_32</name></expr></argument>, <argument pos:start="219:39" pos:end="219:44"><expr pos:start="219:39" pos:end="219:44"><name pos:start="219:39" pos:end="219:44">cpu_T0</name></expr></argument>, <argument pos:start="219:47" pos:end="219:52"><expr pos:start="219:47" pos:end="219:52"><name pos:start="219:47" pos:end="219:52">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <case pos:start="225:9" pos:end="228:0">case <expr pos:start="225:14" pos:end="225:17"><literal type="number" pos:start="225:14" pos:end="225:17">0x6e</literal></expr>:</case> <comment type="block" pos:start="225:20" pos:end="225:36">/* movd mm, ea */</comment>

<cpp:ifdef pos:start="227:1" pos:end="227:20">#<cpp:directive pos:start="227:2" pos:end="227:6">ifdef</cpp:directive> <name pos:start="227:8" pos:end="227:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="229:13" pos:end="251:13"><if pos:start="229:13" pos:end="235:13">if <condition pos:start="229:16" pos:end="229:34">(<expr pos:start="229:17" pos:end="229:33"><name pos:start="229:17" pos:end="229:24"><name pos:start="229:17" pos:end="229:17">s</name><operator pos:start="229:18" pos:end="229:19">-&gt;</operator><name pos:start="229:20" pos:end="229:24">dflag</name></name> <operator pos:start="229:26" pos:end="229:27">==</operator> <name pos:start="229:29" pos:end="229:33">MO_64</name></expr>)</condition> <block pos:start="229:36" pos:end="235:13">{<block_content pos:start="231:17" pos:end="233:86">

                <expr_stmt pos:start="231:17" pos:end="231:65"><expr pos:start="231:17" pos:end="231:64"><call pos:start="231:17" pos:end="231:64"><name pos:start="231:17" pos:end="231:30">gen_ldst_modrm</name><argument_list pos:start="231:31" pos:end="231:64">(<argument pos:start="231:32" pos:end="231:34"><expr pos:start="231:32" pos:end="231:34"><name pos:start="231:32" pos:end="231:34">env</name></expr></argument>, <argument pos:start="231:37" pos:end="231:37"><expr pos:start="231:37" pos:end="231:37"><name pos:start="231:37" pos:end="231:37">s</name></expr></argument>, <argument pos:start="231:40" pos:end="231:44"><expr pos:start="231:40" pos:end="231:44"><name pos:start="231:40" pos:end="231:44">modrm</name></expr></argument>, <argument pos:start="231:47" pos:end="231:51"><expr pos:start="231:47" pos:end="231:51"><name pos:start="231:47" pos:end="231:51">MO_64</name></expr></argument>, <argument pos:start="231:54" pos:end="231:60"><expr pos:start="231:54" pos:end="231:60"><name pos:start="231:54" pos:end="231:60">OR_TMP0</name></expr></argument>, <argument pos:start="231:63" pos:end="231:63"><expr pos:start="231:63" pos:end="231:63"><literal type="number" pos:start="231:63" pos:end="231:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:86"><expr pos:start="233:17" pos:end="233:85"><call pos:start="233:17" pos:end="233:85"><name pos:start="233:17" pos:end="233:29">tcg_gen_st_tl</name><argument_list pos:start="233:30" pos:end="233:85">(<argument pos:start="233:31" pos:end="233:36"><expr pos:start="233:31" pos:end="233:36"><name pos:start="233:31" pos:end="233:36">cpu_T0</name></expr></argument>, <argument pos:start="233:39" pos:end="233:45"><expr pos:start="233:39" pos:end="233:45"><name pos:start="233:39" pos:end="233:45">cpu_env</name></expr></argument>, <argument pos:start="233:48" pos:end="233:84"><expr pos:start="233:48" pos:end="233:84"><call pos:start="233:48" pos:end="233:84"><name pos:start="233:48" pos:end="233:55">offsetof</name><argument_list pos:start="233:56" pos:end="233:84">(<argument pos:start="233:57" pos:end="233:67"><expr pos:start="233:57" pos:end="233:67"><name pos:start="233:57" pos:end="233:67">CPUX86State</name></expr></argument>,<argument pos:start="233:69" pos:end="233:83"><expr pos:start="233:69" pos:end="233:83"><name pos:start="233:69" pos:end="233:79"><name pos:start="233:69" pos:end="233:74">fpregs</name><index pos:start="233:75" pos:end="233:79">[<expr pos:start="233:76" pos:end="233:78"><name pos:start="233:76" pos:end="233:78">reg</name></expr>]</index></name><operator pos:start="233:80" pos:end="233:80">.</operator><name pos:start="233:81" pos:end="233:83">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="235:15" pos:end="251:13">else

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>

            <block pos:start="239:13" pos:end="251:13">{<block_content pos:start="241:17" pos:end="249:66">

                <expr_stmt pos:start="241:17" pos:end="241:65"><expr pos:start="241:17" pos:end="241:64"><call pos:start="241:17" pos:end="241:64"><name pos:start="241:17" pos:end="241:30">gen_ldst_modrm</name><argument_list pos:start="241:31" pos:end="241:64">(<argument pos:start="241:32" pos:end="241:34"><expr pos:start="241:32" pos:end="241:34"><name pos:start="241:32" pos:end="241:34">env</name></expr></argument>, <argument pos:start="241:37" pos:end="241:37"><expr pos:start="241:37" pos:end="241:37"><name pos:start="241:37" pos:end="241:37">s</name></expr></argument>, <argument pos:start="241:40" pos:end="241:44"><expr pos:start="241:40" pos:end="241:44"><name pos:start="241:40" pos:end="241:44">modrm</name></expr></argument>, <argument pos:start="241:47" pos:end="241:51"><expr pos:start="241:47" pos:end="241:51"><name pos:start="241:47" pos:end="241:51">MO_32</name></expr></argument>, <argument pos:start="241:54" pos:end="241:60"><expr pos:start="241:54" pos:end="241:60"><name pos:start="241:54" pos:end="241:60">OR_TMP0</name></expr></argument>, <argument pos:start="241:63" pos:end="241:63"><expr pos:start="241:63" pos:end="241:63"><literal type="number" pos:start="241:63" pos:end="241:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="245:72"><expr pos:start="243:17" pos:end="245:71"><call pos:start="243:17" pos:end="245:71"><name pos:start="243:17" pos:end="243:32">tcg_gen_addi_ptr</name><argument_list pos:start="243:33" pos:end="245:71">(<argument pos:start="243:34" pos:end="243:41"><expr pos:start="243:34" pos:end="243:41"><name pos:start="243:34" pos:end="243:41">cpu_ptr0</name></expr></argument>, <argument pos:start="243:44" pos:end="243:50"><expr pos:start="243:44" pos:end="243:50"><name pos:start="243:44" pos:end="243:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="245:34" pos:end="245:70"><expr pos:start="245:34" pos:end="245:70"><call pos:start="245:34" pos:end="245:70"><name pos:start="245:34" pos:end="245:41">offsetof</name><argument_list pos:start="245:42" pos:end="245:70">(<argument pos:start="245:43" pos:end="245:53"><expr pos:start="245:43" pos:end="245:53"><name pos:start="245:43" pos:end="245:53">CPUX86State</name></expr></argument>,<argument pos:start="245:55" pos:end="245:69"><expr pos:start="245:55" pos:end="245:69"><name pos:start="245:55" pos:end="245:65"><name pos:start="245:55" pos:end="245:60">fpregs</name><index pos:start="245:61" pos:end="245:65">[<expr pos:start="245:62" pos:end="245:64"><name pos:start="245:62" pos:end="245:64">reg</name></expr>]</index></name><operator pos:start="245:66" pos:end="245:66">.</operator><name pos:start="245:67" pos:end="245:69">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:59"><expr pos:start="247:17" pos:end="247:58"><call pos:start="247:17" pos:end="247:58"><name pos:start="247:17" pos:end="247:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="247:37" pos:end="247:58">(<argument pos:start="247:38" pos:end="247:49"><expr pos:start="247:38" pos:end="247:49"><name pos:start="247:38" pos:end="247:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="247:52" pos:end="247:57"><expr pos:start="247:52" pos:end="247:57"><name pos:start="247:52" pos:end="247:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:66"><expr pos:start="249:17" pos:end="249:65"><call pos:start="249:17" pos:end="249:65"><name pos:start="249:17" pos:end="249:41">gen_helper_movl_mm_T0_mmx</name><argument_list pos:start="249:42" pos:end="249:65">(<argument pos:start="249:43" pos:end="249:50"><expr pos:start="249:43" pos:end="249:50"><name pos:start="249:43" pos:end="249:50">cpu_ptr0</name></expr></argument>, <argument pos:start="249:53" pos:end="249:64"><expr pos:start="249:53" pos:end="249:64"><name pos:start="249:53" pos:end="249:64">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="253:13" pos:end="253:18">break;</break>

        <case pos:start="255:9" pos:end="258:0">case <expr pos:start="255:14" pos:end="255:18"><literal type="number" pos:start="255:14" pos:end="255:18">0x16e</literal></expr>:</case> <comment type="block" pos:start="255:21" pos:end="255:38">/* movd xmm, ea */</comment>

<cpp:ifdef pos:start="257:1" pos:end="257:20">#<cpp:directive pos:start="257:2" pos:end="257:6">ifdef</cpp:directive> <name pos:start="257:8" pos:end="257:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="259:13" pos:end="285:13"><if pos:start="259:13" pos:end="269:13">if <condition pos:start="259:16" pos:end="259:34">(<expr pos:start="259:17" pos:end="259:33"><name pos:start="259:17" pos:end="259:24"><name pos:start="259:17" pos:end="259:17">s</name><operator pos:start="259:18" pos:end="259:19">-&gt;</operator><name pos:start="259:20" pos:end="259:24">dflag</name></name> <operator pos:start="259:26" pos:end="259:27">==</operator> <name pos:start="259:29" pos:end="259:33">MO_64</name></expr>)</condition> <block pos:start="259:36" pos:end="269:13">{<block_content pos:start="261:17" pos:end="267:60">

                <expr_stmt pos:start="261:17" pos:end="261:65"><expr pos:start="261:17" pos:end="261:64"><call pos:start="261:17" pos:end="261:64"><name pos:start="261:17" pos:end="261:30">gen_ldst_modrm</name><argument_list pos:start="261:31" pos:end="261:64">(<argument pos:start="261:32" pos:end="261:34"><expr pos:start="261:32" pos:end="261:34"><name pos:start="261:32" pos:end="261:34">env</name></expr></argument>, <argument pos:start="261:37" pos:end="261:37"><expr pos:start="261:37" pos:end="261:37"><name pos:start="261:37" pos:end="261:37">s</name></expr></argument>, <argument pos:start="261:40" pos:end="261:44"><expr pos:start="261:40" pos:end="261:44"><name pos:start="261:40" pos:end="261:44">modrm</name></expr></argument>, <argument pos:start="261:47" pos:end="261:51"><expr pos:start="261:47" pos:end="261:51"><name pos:start="261:47" pos:end="261:51">MO_64</name></expr></argument>, <argument pos:start="261:54" pos:end="261:60"><expr pos:start="261:54" pos:end="261:60"><name pos:start="261:54" pos:end="261:60">OR_TMP0</name></expr></argument>, <argument pos:start="261:63" pos:end="261:63"><expr pos:start="261:63" pos:end="261:63"><literal type="number" pos:start="261:63" pos:end="261:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="265:70"><expr pos:start="263:17" pos:end="265:69"><call pos:start="263:17" pos:end="265:69"><name pos:start="263:17" pos:end="263:32">tcg_gen_addi_ptr</name><argument_list pos:start="263:33" pos:end="265:69">(<argument pos:start="263:34" pos:end="263:41"><expr pos:start="263:34" pos:end="263:41"><name pos:start="263:34" pos:end="263:41">cpu_ptr0</name></expr></argument>, <argument pos:start="263:44" pos:end="263:50"><expr pos:start="263:44" pos:end="263:50"><name pos:start="263:44" pos:end="263:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="265:34" pos:end="265:68"><expr pos:start="265:34" pos:end="265:68"><call pos:start="265:34" pos:end="265:68"><name pos:start="265:34" pos:end="265:41">offsetof</name><argument_list pos:start="265:42" pos:end="265:68">(<argument pos:start="265:43" pos:end="265:53"><expr pos:start="265:43" pos:end="265:53"><name pos:start="265:43" pos:end="265:53">CPUX86State</name></expr></argument>,<argument pos:start="265:55" pos:end="265:67"><expr pos:start="265:55" pos:end="265:67"><name pos:start="265:55" pos:end="265:67"><name pos:start="265:55" pos:end="265:62">xmm_regs</name><index pos:start="265:63" pos:end="265:67">[<expr pos:start="265:64" pos:end="265:66"><name pos:start="265:64" pos:end="265:66">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:60"><expr pos:start="267:17" pos:end="267:59"><call pos:start="267:17" pos:end="267:59"><name pos:start="267:17" pos:end="267:41">gen_helper_movq_mm_T0_xmm</name><argument_list pos:start="267:42" pos:end="267:59">(<argument pos:start="267:43" pos:end="267:50"><expr pos:start="267:43" pos:end="267:50"><name pos:start="267:43" pos:end="267:50">cpu_ptr0</name></expr></argument>, <argument pos:start="267:53" pos:end="267:58"><expr pos:start="267:53" pos:end="267:58"><name pos:start="267:53" pos:end="267:58">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="269:15" pos:end="285:13">else

<cpp:endif pos:start="271:1" pos:end="271:6">#<cpp:directive pos:start="271:2" pos:end="271:6">endif</cpp:directive></cpp:endif>

            <block pos:start="273:13" pos:end="285:13">{<block_content pos:start="275:17" pos:end="283:66">

                <expr_stmt pos:start="275:17" pos:end="275:65"><expr pos:start="275:17" pos:end="275:64"><call pos:start="275:17" pos:end="275:64"><name pos:start="275:17" pos:end="275:30">gen_ldst_modrm</name><argument_list pos:start="275:31" pos:end="275:64">(<argument pos:start="275:32" pos:end="275:34"><expr pos:start="275:32" pos:end="275:34"><name pos:start="275:32" pos:end="275:34">env</name></expr></argument>, <argument pos:start="275:37" pos:end="275:37"><expr pos:start="275:37" pos:end="275:37"><name pos:start="275:37" pos:end="275:37">s</name></expr></argument>, <argument pos:start="275:40" pos:end="275:44"><expr pos:start="275:40" pos:end="275:44"><name pos:start="275:40" pos:end="275:44">modrm</name></expr></argument>, <argument pos:start="275:47" pos:end="275:51"><expr pos:start="275:47" pos:end="275:51"><name pos:start="275:47" pos:end="275:51">MO_32</name></expr></argument>, <argument pos:start="275:54" pos:end="275:60"><expr pos:start="275:54" pos:end="275:60"><name pos:start="275:54" pos:end="275:60">OR_TMP0</name></expr></argument>, <argument pos:start="275:63" pos:end="275:63"><expr pos:start="275:63" pos:end="275:63"><literal type="number" pos:start="275:63" pos:end="275:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="279:70"><expr pos:start="277:17" pos:end="279:69"><call pos:start="277:17" pos:end="279:69"><name pos:start="277:17" pos:end="277:32">tcg_gen_addi_ptr</name><argument_list pos:start="277:33" pos:end="279:69">(<argument pos:start="277:34" pos:end="277:41"><expr pos:start="277:34" pos:end="277:41"><name pos:start="277:34" pos:end="277:41">cpu_ptr0</name></expr></argument>, <argument pos:start="277:44" pos:end="277:50"><expr pos:start="277:44" pos:end="277:50"><name pos:start="277:44" pos:end="277:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="279:34" pos:end="279:68"><expr pos:start="279:34" pos:end="279:68"><call pos:start="279:34" pos:end="279:68"><name pos:start="279:34" pos:end="279:41">offsetof</name><argument_list pos:start="279:42" pos:end="279:68">(<argument pos:start="279:43" pos:end="279:53"><expr pos:start="279:43" pos:end="279:53"><name pos:start="279:43" pos:end="279:53">CPUX86State</name></expr></argument>,<argument pos:start="279:55" pos:end="279:67"><expr pos:start="279:55" pos:end="279:67"><name pos:start="279:55" pos:end="279:67"><name pos:start="279:55" pos:end="279:62">xmm_regs</name><index pos:start="279:63" pos:end="279:67">[<expr pos:start="279:64" pos:end="279:66"><name pos:start="279:64" pos:end="279:66">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:59"><expr pos:start="281:17" pos:end="281:58"><call pos:start="281:17" pos:end="281:58"><name pos:start="281:17" pos:end="281:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="281:37" pos:end="281:58">(<argument pos:start="281:38" pos:end="281:49"><expr pos:start="281:38" pos:end="281:49"><name pos:start="281:38" pos:end="281:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="281:52" pos:end="281:57"><expr pos:start="281:52" pos:end="281:57"><name pos:start="281:52" pos:end="281:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="283:17" pos:end="283:66"><expr pos:start="283:17" pos:end="283:65"><call pos:start="283:17" pos:end="283:65"><name pos:start="283:17" pos:end="283:41">gen_helper_movl_mm_T0_xmm</name><argument_list pos:start="283:42" pos:end="283:65">(<argument pos:start="283:43" pos:end="283:50"><expr pos:start="283:43" pos:end="283:50"><name pos:start="283:43" pos:end="283:50">cpu_ptr0</name></expr></argument>, <argument pos:start="283:53" pos:end="283:64"><expr pos:start="283:53" pos:end="283:64"><name pos:start="283:53" pos:end="283:64">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="287:13" pos:end="287:18">break;</break>

        <case pos:start="289:9" pos:end="289:18">case <expr pos:start="289:14" pos:end="289:17"><literal type="number" pos:start="289:14" pos:end="289:17">0x6f</literal></expr>:</case> <comment type="block" pos:start="289:20" pos:end="289:36">/* movq mm, ea */</comment>

            <if_stmt pos:start="291:13" pos:end="309:13"><if pos:start="291:13" pos:end="297:13">if <condition pos:start="291:16" pos:end="291:25">(<expr pos:start="291:17" pos:end="291:24"><name pos:start="291:17" pos:end="291:19">mod</name> <operator pos:start="291:21" pos:end="291:22">!=</operator> <literal type="number" pos:start="291:24" pos:end="291:24">3</literal></expr>)</condition> <block pos:start="291:27" pos:end="297:13">{<block_content pos:start="293:17" pos:end="295:74">

                <expr_stmt pos:start="293:17" pos:end="293:45"><expr pos:start="293:17" pos:end="293:44"><call pos:start="293:17" pos:end="293:44"><name pos:start="293:17" pos:end="293:29">gen_lea_modrm</name><argument_list pos:start="293:30" pos:end="293:44">(<argument pos:start="293:31" pos:end="293:33"><expr pos:start="293:31" pos:end="293:33"><name pos:start="293:31" pos:end="293:33">env</name></expr></argument>, <argument pos:start="293:36" pos:end="293:36"><expr pos:start="293:36" pos:end="293:36"><name pos:start="293:36" pos:end="293:36">s</name></expr></argument>, <argument pos:start="293:39" pos:end="293:43"><expr pos:start="293:39" pos:end="293:43"><name pos:start="293:39" pos:end="293:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:74"><expr pos:start="295:17" pos:end="295:73"><call pos:start="295:17" pos:end="295:73"><name pos:start="295:17" pos:end="295:30">gen_ldq_env_A0</name><argument_list pos:start="295:31" pos:end="295:73">(<argument pos:start="295:32" pos:end="295:32"><expr pos:start="295:32" pos:end="295:32"><name pos:start="295:32" pos:end="295:32">s</name></expr></argument>, <argument pos:start="295:35" pos:end="295:72"><expr pos:start="295:35" pos:end="295:72"><call pos:start="295:35" pos:end="295:72"><name pos:start="295:35" pos:end="295:42">offsetof</name><argument_list pos:start="295:43" pos:end="295:72">(<argument pos:start="295:44" pos:end="295:54"><expr pos:start="295:44" pos:end="295:54"><name pos:start="295:44" pos:end="295:54">CPUX86State</name></expr></argument>, <argument pos:start="295:57" pos:end="295:71"><expr pos:start="295:57" pos:end="295:71"><name pos:start="295:57" pos:end="295:67"><name pos:start="295:57" pos:end="295:62">fpregs</name><index pos:start="295:63" pos:end="295:67">[<expr pos:start="295:64" pos:end="295:66"><name pos:start="295:64" pos:end="295:66">reg</name></expr>]</index></name><operator pos:start="295:68" pos:end="295:68">.</operator><name pos:start="295:69" pos:end="295:71">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="297:15" pos:end="309:13">else <block pos:start="297:20" pos:end="309:13">{<block_content pos:start="299:17" pos:end="307:70">

                <expr_stmt pos:start="299:17" pos:end="299:33"><expr pos:start="299:17" pos:end="299:32"><name pos:start="299:17" pos:end="299:18">rm</name> <operator pos:start="299:20" pos:end="299:20">=</operator> <operator pos:start="299:22" pos:end="299:22">(</operator><name pos:start="299:23" pos:end="299:27">modrm</name> <operator pos:start="299:29" pos:end="299:29">&amp;</operator> <literal type="number" pos:start="299:31" pos:end="299:31">7</literal><operator pos:start="299:32" pos:end="299:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="303:69"><expr pos:start="301:17" pos:end="303:68"><call pos:start="301:17" pos:end="303:68"><name pos:start="301:17" pos:end="301:30">tcg_gen_ld_i64</name><argument_list pos:start="301:31" pos:end="303:68">(<argument pos:start="301:32" pos:end="301:43"><expr pos:start="301:32" pos:end="301:43"><name pos:start="301:32" pos:end="301:43">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="301:46" pos:end="301:52"><expr pos:start="301:46" pos:end="301:52"><name pos:start="301:46" pos:end="301:52">cpu_env</name></expr></argument>,

                               <argument pos:start="303:32" pos:end="303:67"><expr pos:start="303:32" pos:end="303:67"><call pos:start="303:32" pos:end="303:67"><name pos:start="303:32" pos:end="303:39">offsetof</name><argument_list pos:start="303:40" pos:end="303:67">(<argument pos:start="303:41" pos:end="303:51"><expr pos:start="303:41" pos:end="303:51"><name pos:start="303:41" pos:end="303:51">CPUX86State</name></expr></argument>,<argument pos:start="303:53" pos:end="303:66"><expr pos:start="303:53" pos:end="303:66"><name pos:start="303:53" pos:end="303:62"><name pos:start="303:53" pos:end="303:58">fpregs</name><index pos:start="303:59" pos:end="303:62">[<expr pos:start="303:60" pos:end="303:61"><name pos:start="303:60" pos:end="303:61">rm</name></expr>]</index></name><operator pos:start="303:63" pos:end="303:63">.</operator><name pos:start="303:64" pos:end="303:66">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="305:17" pos:end="307:70"><expr pos:start="305:17" pos:end="307:69"><call pos:start="305:17" pos:end="307:69"><name pos:start="305:17" pos:end="305:30">tcg_gen_st_i64</name><argument_list pos:start="305:31" pos:end="307:69">(<argument pos:start="305:32" pos:end="305:43"><expr pos:start="305:32" pos:end="305:43"><name pos:start="305:32" pos:end="305:43">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="305:46" pos:end="305:52"><expr pos:start="305:46" pos:end="305:52"><name pos:start="305:46" pos:end="305:52">cpu_env</name></expr></argument>,

                               <argument pos:start="307:32" pos:end="307:68"><expr pos:start="307:32" pos:end="307:68"><call pos:start="307:32" pos:end="307:68"><name pos:start="307:32" pos:end="307:39">offsetof</name><argument_list pos:start="307:40" pos:end="307:68">(<argument pos:start="307:41" pos:end="307:51"><expr pos:start="307:41" pos:end="307:51"><name pos:start="307:41" pos:end="307:51">CPUX86State</name></expr></argument>,<argument pos:start="307:53" pos:end="307:67"><expr pos:start="307:53" pos:end="307:67"><name pos:start="307:53" pos:end="307:63"><name pos:start="307:53" pos:end="307:58">fpregs</name><index pos:start="307:59" pos:end="307:63">[<expr pos:start="307:60" pos:end="307:62"><name pos:start="307:60" pos:end="307:62">reg</name></expr>]</index></name><operator pos:start="307:64" pos:end="307:64">.</operator><name pos:start="307:65" pos:end="307:67">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="311:13" pos:end="311:18">break;</break>

        <case pos:start="313:9" pos:end="313:19">case <expr pos:start="313:14" pos:end="313:18"><literal type="number" pos:start="313:14" pos:end="313:18">0x010</literal></expr>:</case> <comment type="block" pos:start="313:21" pos:end="313:32">/* movups */</comment>

        <case pos:start="315:9" pos:end="315:19">case <expr pos:start="315:14" pos:end="315:18"><literal type="number" pos:start="315:14" pos:end="315:18">0x110</literal></expr>:</case> <comment type="block" pos:start="315:21" pos:end="315:32">/* movupd */</comment>

        <case pos:start="317:9" pos:end="317:19">case <expr pos:start="317:14" pos:end="317:18"><literal type="number" pos:start="317:14" pos:end="317:18">0x028</literal></expr>:</case> <comment type="block" pos:start="317:21" pos:end="317:32">/* movaps */</comment>

        <case pos:start="319:9" pos:end="319:19">case <expr pos:start="319:14" pos:end="319:18"><literal type="number" pos:start="319:14" pos:end="319:18">0x128</literal></expr>:</case> <comment type="block" pos:start="319:21" pos:end="319:32">/* movapd */</comment>

        <case pos:start="321:9" pos:end="321:19">case <expr pos:start="321:14" pos:end="321:18"><literal type="number" pos:start="321:14" pos:end="321:18">0x16f</literal></expr>:</case> <comment type="block" pos:start="321:21" pos:end="321:40">/* movdqa xmm, ea */</comment>

        <case pos:start="323:9" pos:end="323:19">case <expr pos:start="323:14" pos:end="323:18"><literal type="number" pos:start="323:14" pos:end="323:18">0x26f</literal></expr>:</case> <comment type="block" pos:start="323:21" pos:end="323:40">/* movdqu xmm, ea */</comment>

            <if_stmt pos:start="325:13" pos:end="339:13"><if pos:start="325:13" pos:end="331:13">if <condition pos:start="325:16" pos:end="325:25">(<expr pos:start="325:17" pos:end="325:24"><name pos:start="325:17" pos:end="325:19">mod</name> <operator pos:start="325:21" pos:end="325:22">!=</operator> <literal type="number" pos:start="325:24" pos:end="325:24">3</literal></expr>)</condition> <block pos:start="325:27" pos:end="331:13">{<block_content pos:start="327:17" pos:end="329:72">

                <expr_stmt pos:start="327:17" pos:end="327:45"><expr pos:start="327:17" pos:end="327:44"><call pos:start="327:17" pos:end="327:44"><name pos:start="327:17" pos:end="327:29">gen_lea_modrm</name><argument_list pos:start="327:30" pos:end="327:44">(<argument pos:start="327:31" pos:end="327:33"><expr pos:start="327:31" pos:end="327:33"><name pos:start="327:31" pos:end="327:33">env</name></expr></argument>, <argument pos:start="327:36" pos:end="327:36"><expr pos:start="327:36" pos:end="327:36"><name pos:start="327:36" pos:end="327:36">s</name></expr></argument>, <argument pos:start="327:39" pos:end="327:43"><expr pos:start="327:39" pos:end="327:43"><name pos:start="327:39" pos:end="327:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:72"><expr pos:start="329:17" pos:end="329:71"><call pos:start="329:17" pos:end="329:71"><name pos:start="329:17" pos:end="329:30">gen_ldo_env_A0</name><argument_list pos:start="329:31" pos:end="329:71">(<argument pos:start="329:32" pos:end="329:32"><expr pos:start="329:32" pos:end="329:32"><name pos:start="329:32" pos:end="329:32">s</name></expr></argument>, <argument pos:start="329:35" pos:end="329:70"><expr pos:start="329:35" pos:end="329:70"><call pos:start="329:35" pos:end="329:70"><name pos:start="329:35" pos:end="329:42">offsetof</name><argument_list pos:start="329:43" pos:end="329:70">(<argument pos:start="329:44" pos:end="329:54"><expr pos:start="329:44" pos:end="329:54"><name pos:start="329:44" pos:end="329:54">CPUX86State</name></expr></argument>, <argument pos:start="329:57" pos:end="329:69"><expr pos:start="329:57" pos:end="329:69"><name pos:start="329:57" pos:end="329:69"><name pos:start="329:57" pos:end="329:64">xmm_regs</name><index pos:start="329:65" pos:end="329:69">[<expr pos:start="329:66" pos:end="329:68"><name pos:start="329:66" pos:end="329:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="331:15" pos:end="339:13">else <block pos:start="331:20" pos:end="339:13">{<block_content pos:start="333:17" pos:end="337:64">

                <expr_stmt pos:start="333:17" pos:end="333:44"><expr pos:start="333:17" pos:end="333:43"><name pos:start="333:17" pos:end="333:18">rm</name> <operator pos:start="333:20" pos:end="333:20">=</operator> <operator pos:start="333:22" pos:end="333:22">(</operator><name pos:start="333:23" pos:end="333:27">modrm</name> <operator pos:start="333:29" pos:end="333:29">&amp;</operator> <literal type="number" pos:start="333:31" pos:end="333:31">7</literal><operator pos:start="333:32" pos:end="333:32">)</operator> <operator pos:start="333:34" pos:end="333:34">|</operator> <call pos:start="333:36" pos:end="333:43"><name pos:start="333:36" pos:end="333:40">REX_B</name><argument_list pos:start="333:41" pos:end="333:43">(<argument pos:start="333:42" pos:end="333:42"><expr pos:start="333:42" pos:end="333:42"><name pos:start="333:42" pos:end="333:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="337:64"><expr pos:start="335:17" pos:end="337:63"><call pos:start="335:17" pos:end="337:63"><name pos:start="335:17" pos:end="335:27">gen_op_movo</name><argument_list pos:start="335:28" pos:end="337:63">(<argument pos:start="335:29" pos:end="335:63"><expr pos:start="335:29" pos:end="335:63"><call pos:start="335:29" pos:end="335:63"><name pos:start="335:29" pos:end="335:36">offsetof</name><argument_list pos:start="335:37" pos:end="335:63">(<argument pos:start="335:38" pos:end="335:48"><expr pos:start="335:38" pos:end="335:48"><name pos:start="335:38" pos:end="335:48">CPUX86State</name></expr></argument>,<argument pos:start="335:50" pos:end="335:62"><expr pos:start="335:50" pos:end="335:62"><name pos:start="335:50" pos:end="335:62"><name pos:start="335:50" pos:end="335:57">xmm_regs</name><index pos:start="335:58" pos:end="335:62">[<expr pos:start="335:59" pos:end="335:61"><name pos:start="335:59" pos:end="335:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="337:29" pos:end="337:62"><expr pos:start="337:29" pos:end="337:62"><call pos:start="337:29" pos:end="337:62"><name pos:start="337:29" pos:end="337:36">offsetof</name><argument_list pos:start="337:37" pos:end="337:62">(<argument pos:start="337:38" pos:end="337:48"><expr pos:start="337:38" pos:end="337:48"><name pos:start="337:38" pos:end="337:48">CPUX86State</name></expr></argument>,<argument pos:start="337:50" pos:end="337:61"><expr pos:start="337:50" pos:end="337:61"><name pos:start="337:50" pos:end="337:61"><name pos:start="337:50" pos:end="337:57">xmm_regs</name><index pos:start="337:58" pos:end="337:61">[<expr pos:start="337:59" pos:end="337:60"><name pos:start="337:59" pos:end="337:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="341:13" pos:end="341:18">break;</break>

        <case pos:start="343:9" pos:end="343:19">case <expr pos:start="343:14" pos:end="343:18"><literal type="number" pos:start="343:14" pos:end="343:18">0x210</literal></expr>:</case> <comment type="block" pos:start="343:21" pos:end="343:39">/* movss xmm, ea */</comment>

            <if_stmt pos:start="345:13" pos:end="369:13"><if pos:start="345:13" pos:end="361:13">if <condition pos:start="345:16" pos:end="345:25">(<expr pos:start="345:17" pos:end="345:24"><name pos:start="345:17" pos:end="345:19">mod</name> <operator pos:start="345:21" pos:end="345:22">!=</operator> <literal type="number" pos:start="345:24" pos:end="345:24">3</literal></expr>)</condition> <block pos:start="345:27" pos:end="361:13">{<block_content pos:start="347:17" pos:end="359:95">

                <expr_stmt pos:start="347:17" pos:end="347:45"><expr pos:start="347:17" pos:end="347:44"><call pos:start="347:17" pos:end="347:44"><name pos:start="347:17" pos:end="347:29">gen_lea_modrm</name><argument_list pos:start="347:30" pos:end="347:44">(<argument pos:start="347:31" pos:end="347:33"><expr pos:start="347:31" pos:end="347:33"><name pos:start="347:31" pos:end="347:33">env</name></expr></argument>, <argument pos:start="347:36" pos:end="347:36"><expr pos:start="347:36" pos:end="347:36"><name pos:start="347:36" pos:end="347:36">s</name></expr></argument>, <argument pos:start="347:39" pos:end="347:43"><expr pos:start="347:39" pos:end="347:43"><name pos:start="347:39" pos:end="347:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:54"><expr pos:start="349:17" pos:end="349:53"><call pos:start="349:17" pos:end="349:53"><name pos:start="349:17" pos:end="349:27">gen_op_ld_v</name><argument_list pos:start="349:28" pos:end="349:53">(<argument pos:start="349:29" pos:end="349:29"><expr pos:start="349:29" pos:end="349:29"><name pos:start="349:29" pos:end="349:29">s</name></expr></argument>, <argument pos:start="349:32" pos:end="349:36"><expr pos:start="349:32" pos:end="349:36"><name pos:start="349:32" pos:end="349:36">MO_32</name></expr></argument>, <argument pos:start="349:39" pos:end="349:44"><expr pos:start="349:39" pos:end="349:44"><name pos:start="349:39" pos:end="349:44">cpu_T0</name></expr></argument>, <argument pos:start="349:47" pos:end="349:52"><expr pos:start="349:47" pos:end="349:52"><name pos:start="349:47" pos:end="349:52">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:95"><expr pos:start="351:17" pos:end="351:94"><call pos:start="351:17" pos:end="351:94"><name pos:start="351:17" pos:end="351:31">tcg_gen_st32_tl</name><argument_list pos:start="351:32" pos:end="351:94">(<argument pos:start="351:33" pos:end="351:38"><expr pos:start="351:33" pos:end="351:38"><name pos:start="351:33" pos:end="351:38">cpu_T0</name></expr></argument>, <argument pos:start="351:41" pos:end="351:47"><expr pos:start="351:41" pos:end="351:47"><name pos:start="351:41" pos:end="351:47">cpu_env</name></expr></argument>, <argument pos:start="351:50" pos:end="351:93"><expr pos:start="351:50" pos:end="351:93"><call pos:start="351:50" pos:end="351:93"><name pos:start="351:50" pos:end="351:57">offsetof</name><argument_list pos:start="351:58" pos:end="351:93">(<argument pos:start="351:59" pos:end="351:69"><expr pos:start="351:59" pos:end="351:69"><name pos:start="351:59" pos:end="351:69">CPUX86State</name></expr></argument>,<argument pos:start="351:71" pos:end="351:92"><expr pos:start="351:71" pos:end="351:92"><name pos:start="351:71" pos:end="351:83"><name pos:start="351:71" pos:end="351:78">xmm_regs</name><index pos:start="351:79" pos:end="351:83">[<expr pos:start="351:80" pos:end="351:82"><name pos:start="351:80" pos:end="351:82">reg</name></expr>]</index></name><operator pos:start="351:84" pos:end="351:84">.</operator><call pos:start="351:85" pos:end="351:92"><name pos:start="351:85" pos:end="351:89">ZMM_L</name><argument_list pos:start="351:90" pos:end="351:92">(<argument pos:start="351:91" pos:end="351:91"><expr pos:start="351:91" pos:end="351:91"><literal type="number" pos:start="351:91" pos:end="351:91">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="353:43"><expr pos:start="353:17" pos:end="353:42"><call pos:start="353:17" pos:end="353:42"><name pos:start="353:17" pos:end="353:31">tcg_gen_movi_tl</name><argument_list pos:start="353:32" pos:end="353:42">(<argument pos:start="353:33" pos:end="353:38"><expr pos:start="353:33" pos:end="353:38"><name pos:start="353:33" pos:end="353:38">cpu_T0</name></expr></argument>, <argument pos:start="353:41" pos:end="353:41"><expr pos:start="353:41" pos:end="353:41"><literal type="number" pos:start="353:41" pos:end="353:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="355:17" pos:end="355:95"><expr pos:start="355:17" pos:end="355:94"><call pos:start="355:17" pos:end="355:94"><name pos:start="355:17" pos:end="355:31">tcg_gen_st32_tl</name><argument_list pos:start="355:32" pos:end="355:94">(<argument pos:start="355:33" pos:end="355:38"><expr pos:start="355:33" pos:end="355:38"><name pos:start="355:33" pos:end="355:38">cpu_T0</name></expr></argument>, <argument pos:start="355:41" pos:end="355:47"><expr pos:start="355:41" pos:end="355:47"><name pos:start="355:41" pos:end="355:47">cpu_env</name></expr></argument>, <argument pos:start="355:50" pos:end="355:93"><expr pos:start="355:50" pos:end="355:93"><call pos:start="355:50" pos:end="355:93"><name pos:start="355:50" pos:end="355:57">offsetof</name><argument_list pos:start="355:58" pos:end="355:93">(<argument pos:start="355:59" pos:end="355:69"><expr pos:start="355:59" pos:end="355:69"><name pos:start="355:59" pos:end="355:69">CPUX86State</name></expr></argument>,<argument pos:start="355:71" pos:end="355:92"><expr pos:start="355:71" pos:end="355:92"><name pos:start="355:71" pos:end="355:83"><name pos:start="355:71" pos:end="355:78">xmm_regs</name><index pos:start="355:79" pos:end="355:83">[<expr pos:start="355:80" pos:end="355:82"><name pos:start="355:80" pos:end="355:82">reg</name></expr>]</index></name><operator pos:start="355:84" pos:end="355:84">.</operator><call pos:start="355:85" pos:end="355:92"><name pos:start="355:85" pos:end="355:89">ZMM_L</name><argument_list pos:start="355:90" pos:end="355:92">(<argument pos:start="355:91" pos:end="355:91"><expr pos:start="355:91" pos:end="355:91"><literal type="number" pos:start="355:91" pos:end="355:91">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:95"><expr pos:start="357:17" pos:end="357:94"><call pos:start="357:17" pos:end="357:94"><name pos:start="357:17" pos:end="357:31">tcg_gen_st32_tl</name><argument_list pos:start="357:32" pos:end="357:94">(<argument pos:start="357:33" pos:end="357:38"><expr pos:start="357:33" pos:end="357:38"><name pos:start="357:33" pos:end="357:38">cpu_T0</name></expr></argument>, <argument pos:start="357:41" pos:end="357:47"><expr pos:start="357:41" pos:end="357:47"><name pos:start="357:41" pos:end="357:47">cpu_env</name></expr></argument>, <argument pos:start="357:50" pos:end="357:93"><expr pos:start="357:50" pos:end="357:93"><call pos:start="357:50" pos:end="357:93"><name pos:start="357:50" pos:end="357:57">offsetof</name><argument_list pos:start="357:58" pos:end="357:93">(<argument pos:start="357:59" pos:end="357:69"><expr pos:start="357:59" pos:end="357:69"><name pos:start="357:59" pos:end="357:69">CPUX86State</name></expr></argument>,<argument pos:start="357:71" pos:end="357:92"><expr pos:start="357:71" pos:end="357:92"><name pos:start="357:71" pos:end="357:83"><name pos:start="357:71" pos:end="357:78">xmm_regs</name><index pos:start="357:79" pos:end="357:83">[<expr pos:start="357:80" pos:end="357:82"><name pos:start="357:80" pos:end="357:82">reg</name></expr>]</index></name><operator pos:start="357:84" pos:end="357:84">.</operator><call pos:start="357:85" pos:end="357:92"><name pos:start="357:85" pos:end="357:89">ZMM_L</name><argument_list pos:start="357:90" pos:end="357:92">(<argument pos:start="357:91" pos:end="357:91"><expr pos:start="357:91" pos:end="357:91"><literal type="number" pos:start="357:91" pos:end="357:91">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:95"><expr pos:start="359:17" pos:end="359:94"><call pos:start="359:17" pos:end="359:94"><name pos:start="359:17" pos:end="359:31">tcg_gen_st32_tl</name><argument_list pos:start="359:32" pos:end="359:94">(<argument pos:start="359:33" pos:end="359:38"><expr pos:start="359:33" pos:end="359:38"><name pos:start="359:33" pos:end="359:38">cpu_T0</name></expr></argument>, <argument pos:start="359:41" pos:end="359:47"><expr pos:start="359:41" pos:end="359:47"><name pos:start="359:41" pos:end="359:47">cpu_env</name></expr></argument>, <argument pos:start="359:50" pos:end="359:93"><expr pos:start="359:50" pos:end="359:93"><call pos:start="359:50" pos:end="359:93"><name pos:start="359:50" pos:end="359:57">offsetof</name><argument_list pos:start="359:58" pos:end="359:93">(<argument pos:start="359:59" pos:end="359:69"><expr pos:start="359:59" pos:end="359:69"><name pos:start="359:59" pos:end="359:69">CPUX86State</name></expr></argument>,<argument pos:start="359:71" pos:end="359:92"><expr pos:start="359:71" pos:end="359:92"><name pos:start="359:71" pos:end="359:83"><name pos:start="359:71" pos:end="359:78">xmm_regs</name><index pos:start="359:79" pos:end="359:83">[<expr pos:start="359:80" pos:end="359:82"><name pos:start="359:80" pos:end="359:82">reg</name></expr>]</index></name><operator pos:start="359:84" pos:end="359:84">.</operator><call pos:start="359:85" pos:end="359:92"><name pos:start="359:85" pos:end="359:89">ZMM_L</name><argument_list pos:start="359:90" pos:end="359:92">(<argument pos:start="359:91" pos:end="359:91"><expr pos:start="359:91" pos:end="359:91"><literal type="number" pos:start="359:91" pos:end="359:91">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="361:15" pos:end="369:13">else <block pos:start="361:20" pos:end="369:13">{<block_content pos:start="363:17" pos:end="367:73">

                <expr_stmt pos:start="363:17" pos:end="363:44"><expr pos:start="363:17" pos:end="363:43"><name pos:start="363:17" pos:end="363:18">rm</name> <operator pos:start="363:20" pos:end="363:20">=</operator> <operator pos:start="363:22" pos:end="363:22">(</operator><name pos:start="363:23" pos:end="363:27">modrm</name> <operator pos:start="363:29" pos:end="363:29">&amp;</operator> <literal type="number" pos:start="363:31" pos:end="363:31">7</literal><operator pos:start="363:32" pos:end="363:32">)</operator> <operator pos:start="363:34" pos:end="363:34">|</operator> <call pos:start="363:36" pos:end="363:43"><name pos:start="363:36" pos:end="363:40">REX_B</name><argument_list pos:start="363:41" pos:end="363:43">(<argument pos:start="363:42" pos:end="363:42"><expr pos:start="363:42" pos:end="363:42"><name pos:start="363:42" pos:end="363:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="365:17" pos:end="367:73"><expr pos:start="365:17" pos:end="367:72"><call pos:start="365:17" pos:end="367:72"><name pos:start="365:17" pos:end="365:27">gen_op_movl</name><argument_list pos:start="365:28" pos:end="367:72">(<argument pos:start="365:29" pos:end="365:72"><expr pos:start="365:29" pos:end="365:72"><call pos:start="365:29" pos:end="365:72"><name pos:start="365:29" pos:end="365:36">offsetof</name><argument_list pos:start="365:37" pos:end="365:72">(<argument pos:start="365:38" pos:end="365:48"><expr pos:start="365:38" pos:end="365:48"><name pos:start="365:38" pos:end="365:48">CPUX86State</name></expr></argument>,<argument pos:start="365:50" pos:end="365:71"><expr pos:start="365:50" pos:end="365:71"><name pos:start="365:50" pos:end="365:62"><name pos:start="365:50" pos:end="365:57">xmm_regs</name><index pos:start="365:58" pos:end="365:62">[<expr pos:start="365:59" pos:end="365:61"><name pos:start="365:59" pos:end="365:61">reg</name></expr>]</index></name><operator pos:start="365:63" pos:end="365:63">.</operator><call pos:start="365:64" pos:end="365:71"><name pos:start="365:64" pos:end="365:68">ZMM_L</name><argument_list pos:start="365:69" pos:end="365:71">(<argument pos:start="365:70" pos:end="365:70"><expr pos:start="365:70" pos:end="365:70"><literal type="number" pos:start="365:70" pos:end="365:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="367:29" pos:end="367:71"><expr pos:start="367:29" pos:end="367:71"><call pos:start="367:29" pos:end="367:71"><name pos:start="367:29" pos:end="367:36">offsetof</name><argument_list pos:start="367:37" pos:end="367:71">(<argument pos:start="367:38" pos:end="367:48"><expr pos:start="367:38" pos:end="367:48"><name pos:start="367:38" pos:end="367:48">CPUX86State</name></expr></argument>,<argument pos:start="367:50" pos:end="367:70"><expr pos:start="367:50" pos:end="367:70"><name pos:start="367:50" pos:end="367:61"><name pos:start="367:50" pos:end="367:57">xmm_regs</name><index pos:start="367:58" pos:end="367:61">[<expr pos:start="367:59" pos:end="367:60"><name pos:start="367:59" pos:end="367:60">rm</name></expr>]</index></name><operator pos:start="367:62" pos:end="367:62">.</operator><call pos:start="367:63" pos:end="367:70"><name pos:start="367:63" pos:end="367:67">ZMM_L</name><argument_list pos:start="367:68" pos:end="367:70">(<argument pos:start="367:69" pos:end="367:69"><expr pos:start="367:69" pos:end="367:69"><literal type="number" pos:start="367:69" pos:end="367:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="371:13" pos:end="371:18">break;</break>

        <case pos:start="373:9" pos:end="373:19">case <expr pos:start="373:14" pos:end="373:18"><literal type="number" pos:start="373:14" pos:end="373:18">0x310</literal></expr>:</case> <comment type="block" pos:start="373:21" pos:end="373:39">/* movsd xmm, ea */</comment>

            <if_stmt pos:start="375:13" pos:end="397:13"><if pos:start="375:13" pos:end="389:13">if <condition pos:start="375:16" pos:end="375:25">(<expr pos:start="375:17" pos:end="375:24"><name pos:start="375:17" pos:end="375:19">mod</name> <operator pos:start="375:21" pos:end="375:22">!=</operator> <literal type="number" pos:start="375:24" pos:end="375:24">3</literal></expr>)</condition> <block pos:start="375:27" pos:end="389:13">{<block_content pos:start="377:17" pos:end="387:95">

                <expr_stmt pos:start="377:17" pos:end="377:45"><expr pos:start="377:17" pos:end="377:44"><call pos:start="377:17" pos:end="377:44"><name pos:start="377:17" pos:end="377:29">gen_lea_modrm</name><argument_list pos:start="377:30" pos:end="377:44">(<argument pos:start="377:31" pos:end="377:33"><expr pos:start="377:31" pos:end="377:33"><name pos:start="377:31" pos:end="377:33">env</name></expr></argument>, <argument pos:start="377:36" pos:end="377:36"><expr pos:start="377:36" pos:end="377:36"><name pos:start="377:36" pos:end="377:36">s</name></expr></argument>, <argument pos:start="377:39" pos:end="377:43"><expr pos:start="377:39" pos:end="377:43"><name pos:start="377:39" pos:end="377:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="381:68"><expr pos:start="379:17" pos:end="381:67"><call pos:start="379:17" pos:end="381:67"><name pos:start="379:17" pos:end="379:30">gen_ldq_env_A0</name><argument_list pos:start="379:31" pos:end="381:67">(<argument pos:start="379:32" pos:end="379:32"><expr pos:start="379:32" pos:end="379:32"><name pos:start="379:32" pos:end="379:32">s</name></expr></argument>, <argument pos:start="379:35" pos:end="381:66"><expr pos:start="379:35" pos:end="381:66"><call pos:start="379:35" pos:end="381:66"><name pos:start="379:35" pos:end="379:42">offsetof</name><argument_list pos:start="379:43" pos:end="381:66">(<argument pos:start="379:44" pos:end="379:54"><expr pos:start="379:44" pos:end="379:54"><name pos:start="379:44" pos:end="379:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="381:44" pos:end="381:65"><expr pos:start="381:44" pos:end="381:65"><name pos:start="381:44" pos:end="381:56"><name pos:start="381:44" pos:end="381:51">xmm_regs</name><index pos:start="381:52" pos:end="381:56">[<expr pos:start="381:53" pos:end="381:55"><name pos:start="381:53" pos:end="381:55">reg</name></expr>]</index></name><operator pos:start="381:57" pos:end="381:57">.</operator><call pos:start="381:58" pos:end="381:65"><name pos:start="381:58" pos:end="381:62">ZMM_Q</name><argument_list pos:start="381:63" pos:end="381:65">(<argument pos:start="381:64" pos:end="381:64"><expr pos:start="381:64" pos:end="381:64"><literal type="number" pos:start="381:64" pos:end="381:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:43"><expr pos:start="383:17" pos:end="383:42"><call pos:start="383:17" pos:end="383:42"><name pos:start="383:17" pos:end="383:31">tcg_gen_movi_tl</name><argument_list pos:start="383:32" pos:end="383:42">(<argument pos:start="383:33" pos:end="383:38"><expr pos:start="383:33" pos:end="383:38"><name pos:start="383:33" pos:end="383:38">cpu_T0</name></expr></argument>, <argument pos:start="383:41" pos:end="383:41"><expr pos:start="383:41" pos:end="383:41"><literal type="number" pos:start="383:41" pos:end="383:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="385:17" pos:end="385:95"><expr pos:start="385:17" pos:end="385:94"><call pos:start="385:17" pos:end="385:94"><name pos:start="385:17" pos:end="385:31">tcg_gen_st32_tl</name><argument_list pos:start="385:32" pos:end="385:94">(<argument pos:start="385:33" pos:end="385:38"><expr pos:start="385:33" pos:end="385:38"><name pos:start="385:33" pos:end="385:38">cpu_T0</name></expr></argument>, <argument pos:start="385:41" pos:end="385:47"><expr pos:start="385:41" pos:end="385:47"><name pos:start="385:41" pos:end="385:47">cpu_env</name></expr></argument>, <argument pos:start="385:50" pos:end="385:93"><expr pos:start="385:50" pos:end="385:93"><call pos:start="385:50" pos:end="385:93"><name pos:start="385:50" pos:end="385:57">offsetof</name><argument_list pos:start="385:58" pos:end="385:93">(<argument pos:start="385:59" pos:end="385:69"><expr pos:start="385:59" pos:end="385:69"><name pos:start="385:59" pos:end="385:69">CPUX86State</name></expr></argument>,<argument pos:start="385:71" pos:end="385:92"><expr pos:start="385:71" pos:end="385:92"><name pos:start="385:71" pos:end="385:83"><name pos:start="385:71" pos:end="385:78">xmm_regs</name><index pos:start="385:79" pos:end="385:83">[<expr pos:start="385:80" pos:end="385:82"><name pos:start="385:80" pos:end="385:82">reg</name></expr>]</index></name><operator pos:start="385:84" pos:end="385:84">.</operator><call pos:start="385:85" pos:end="385:92"><name pos:start="385:85" pos:end="385:89">ZMM_L</name><argument_list pos:start="385:90" pos:end="385:92">(<argument pos:start="385:91" pos:end="385:91"><expr pos:start="385:91" pos:end="385:91"><literal type="number" pos:start="385:91" pos:end="385:91">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:95"><expr pos:start="387:17" pos:end="387:94"><call pos:start="387:17" pos:end="387:94"><name pos:start="387:17" pos:end="387:31">tcg_gen_st32_tl</name><argument_list pos:start="387:32" pos:end="387:94">(<argument pos:start="387:33" pos:end="387:38"><expr pos:start="387:33" pos:end="387:38"><name pos:start="387:33" pos:end="387:38">cpu_T0</name></expr></argument>, <argument pos:start="387:41" pos:end="387:47"><expr pos:start="387:41" pos:end="387:47"><name pos:start="387:41" pos:end="387:47">cpu_env</name></expr></argument>, <argument pos:start="387:50" pos:end="387:93"><expr pos:start="387:50" pos:end="387:93"><call pos:start="387:50" pos:end="387:93"><name pos:start="387:50" pos:end="387:57">offsetof</name><argument_list pos:start="387:58" pos:end="387:93">(<argument pos:start="387:59" pos:end="387:69"><expr pos:start="387:59" pos:end="387:69"><name pos:start="387:59" pos:end="387:69">CPUX86State</name></expr></argument>,<argument pos:start="387:71" pos:end="387:92"><expr pos:start="387:71" pos:end="387:92"><name pos:start="387:71" pos:end="387:83"><name pos:start="387:71" pos:end="387:78">xmm_regs</name><index pos:start="387:79" pos:end="387:83">[<expr pos:start="387:80" pos:end="387:82"><name pos:start="387:80" pos:end="387:82">reg</name></expr>]</index></name><operator pos:start="387:84" pos:end="387:84">.</operator><call pos:start="387:85" pos:end="387:92"><name pos:start="387:85" pos:end="387:89">ZMM_L</name><argument_list pos:start="387:90" pos:end="387:92">(<argument pos:start="387:91" pos:end="387:91"><expr pos:start="387:91" pos:end="387:91"><literal type="number" pos:start="387:91" pos:end="387:91">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="389:15" pos:end="397:13">else <block pos:start="389:20" pos:end="397:13">{<block_content pos:start="391:17" pos:end="395:73">

                <expr_stmt pos:start="391:17" pos:end="391:44"><expr pos:start="391:17" pos:end="391:43"><name pos:start="391:17" pos:end="391:18">rm</name> <operator pos:start="391:20" pos:end="391:20">=</operator> <operator pos:start="391:22" pos:end="391:22">(</operator><name pos:start="391:23" pos:end="391:27">modrm</name> <operator pos:start="391:29" pos:end="391:29">&amp;</operator> <literal type="number" pos:start="391:31" pos:end="391:31">7</literal><operator pos:start="391:32" pos:end="391:32">)</operator> <operator pos:start="391:34" pos:end="391:34">|</operator> <call pos:start="391:36" pos:end="391:43"><name pos:start="391:36" pos:end="391:40">REX_B</name><argument_list pos:start="391:41" pos:end="391:43">(<argument pos:start="391:42" pos:end="391:42"><expr pos:start="391:42" pos:end="391:42"><name pos:start="391:42" pos:end="391:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="395:73"><expr pos:start="393:17" pos:end="395:72"><call pos:start="393:17" pos:end="395:72"><name pos:start="393:17" pos:end="393:27">gen_op_movq</name><argument_list pos:start="393:28" pos:end="395:72">(<argument pos:start="393:29" pos:end="393:72"><expr pos:start="393:29" pos:end="393:72"><call pos:start="393:29" pos:end="393:72"><name pos:start="393:29" pos:end="393:36">offsetof</name><argument_list pos:start="393:37" pos:end="393:72">(<argument pos:start="393:38" pos:end="393:48"><expr pos:start="393:38" pos:end="393:48"><name pos:start="393:38" pos:end="393:48">CPUX86State</name></expr></argument>,<argument pos:start="393:50" pos:end="393:71"><expr pos:start="393:50" pos:end="393:71"><name pos:start="393:50" pos:end="393:62"><name pos:start="393:50" pos:end="393:57">xmm_regs</name><index pos:start="393:58" pos:end="393:62">[<expr pos:start="393:59" pos:end="393:61"><name pos:start="393:59" pos:end="393:61">reg</name></expr>]</index></name><operator pos:start="393:63" pos:end="393:63">.</operator><call pos:start="393:64" pos:end="393:71"><name pos:start="393:64" pos:end="393:68">ZMM_Q</name><argument_list pos:start="393:69" pos:end="393:71">(<argument pos:start="393:70" pos:end="393:70"><expr pos:start="393:70" pos:end="393:70"><literal type="number" pos:start="393:70" pos:end="393:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="395:29" pos:end="395:71"><expr pos:start="395:29" pos:end="395:71"><call pos:start="395:29" pos:end="395:71"><name pos:start="395:29" pos:end="395:36">offsetof</name><argument_list pos:start="395:37" pos:end="395:71">(<argument pos:start="395:38" pos:end="395:48"><expr pos:start="395:38" pos:end="395:48"><name pos:start="395:38" pos:end="395:48">CPUX86State</name></expr></argument>,<argument pos:start="395:50" pos:end="395:70"><expr pos:start="395:50" pos:end="395:70"><name pos:start="395:50" pos:end="395:61"><name pos:start="395:50" pos:end="395:57">xmm_regs</name><index pos:start="395:58" pos:end="395:61">[<expr pos:start="395:59" pos:end="395:60"><name pos:start="395:59" pos:end="395:60">rm</name></expr>]</index></name><operator pos:start="395:62" pos:end="395:62">.</operator><call pos:start="395:63" pos:end="395:70"><name pos:start="395:63" pos:end="395:67">ZMM_Q</name><argument_list pos:start="395:68" pos:end="395:70">(<argument pos:start="395:69" pos:end="395:69"><expr pos:start="395:69" pos:end="395:69"><literal type="number" pos:start="395:69" pos:end="395:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="399:13" pos:end="399:18">break;</break>

        <case pos:start="401:9" pos:end="401:19">case <expr pos:start="401:14" pos:end="401:18"><literal type="number" pos:start="401:14" pos:end="401:18">0x012</literal></expr>:</case> <comment type="block" pos:start="401:21" pos:end="401:32">/* movlps */</comment>

        <case pos:start="403:9" pos:end="403:19">case <expr pos:start="403:14" pos:end="403:18"><literal type="number" pos:start="403:14" pos:end="403:18">0x112</literal></expr>:</case> <comment type="block" pos:start="403:21" pos:end="403:32">/* movlpd */</comment>

            <if_stmt pos:start="405:13" pos:end="423:13"><if pos:start="405:13" pos:end="413:13">if <condition pos:start="405:16" pos:end="405:25">(<expr pos:start="405:17" pos:end="405:24"><name pos:start="405:17" pos:end="405:19">mod</name> <operator pos:start="405:21" pos:end="405:22">!=</operator> <literal type="number" pos:start="405:24" pos:end="405:24">3</literal></expr>)</condition> <block pos:start="405:27" pos:end="413:13">{<block_content pos:start="407:17" pos:end="411:68">

                <expr_stmt pos:start="407:17" pos:end="407:45"><expr pos:start="407:17" pos:end="407:44"><call pos:start="407:17" pos:end="407:44"><name pos:start="407:17" pos:end="407:29">gen_lea_modrm</name><argument_list pos:start="407:30" pos:end="407:44">(<argument pos:start="407:31" pos:end="407:33"><expr pos:start="407:31" pos:end="407:33"><name pos:start="407:31" pos:end="407:33">env</name></expr></argument>, <argument pos:start="407:36" pos:end="407:36"><expr pos:start="407:36" pos:end="407:36"><name pos:start="407:36" pos:end="407:36">s</name></expr></argument>, <argument pos:start="407:39" pos:end="407:43"><expr pos:start="407:39" pos:end="407:43"><name pos:start="407:39" pos:end="407:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="411:68"><expr pos:start="409:17" pos:end="411:67"><call pos:start="409:17" pos:end="411:67"><name pos:start="409:17" pos:end="409:30">gen_ldq_env_A0</name><argument_list pos:start="409:31" pos:end="411:67">(<argument pos:start="409:32" pos:end="409:32"><expr pos:start="409:32" pos:end="409:32"><name pos:start="409:32" pos:end="409:32">s</name></expr></argument>, <argument pos:start="409:35" pos:end="411:66"><expr pos:start="409:35" pos:end="411:66"><call pos:start="409:35" pos:end="411:66"><name pos:start="409:35" pos:end="409:42">offsetof</name><argument_list pos:start="409:43" pos:end="411:66">(<argument pos:start="409:44" pos:end="409:54"><expr pos:start="409:44" pos:end="409:54"><name pos:start="409:44" pos:end="409:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="411:44" pos:end="411:65"><expr pos:start="411:44" pos:end="411:65"><name pos:start="411:44" pos:end="411:56"><name pos:start="411:44" pos:end="411:51">xmm_regs</name><index pos:start="411:52" pos:end="411:56">[<expr pos:start="411:53" pos:end="411:55"><name pos:start="411:53" pos:end="411:55">reg</name></expr>]</index></name><operator pos:start="411:57" pos:end="411:57">.</operator><call pos:start="411:58" pos:end="411:65"><name pos:start="411:58" pos:end="411:62">ZMM_Q</name><argument_list pos:start="411:63" pos:end="411:65">(<argument pos:start="411:64" pos:end="411:64"><expr pos:start="411:64" pos:end="411:64"><literal type="number" pos:start="411:64" pos:end="411:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="413:15" pos:end="423:13">else <block pos:start="413:20" pos:end="423:13">{<block_content pos:start="417:17" pos:end="421:73">

                <comment type="block" pos:start="415:17" pos:end="415:29">/* movhlps */</comment>

                <expr_stmt pos:start="417:17" pos:end="417:44"><expr pos:start="417:17" pos:end="417:43"><name pos:start="417:17" pos:end="417:18">rm</name> <operator pos:start="417:20" pos:end="417:20">=</operator> <operator pos:start="417:22" pos:end="417:22">(</operator><name pos:start="417:23" pos:end="417:27">modrm</name> <operator pos:start="417:29" pos:end="417:29">&amp;</operator> <literal type="number" pos:start="417:31" pos:end="417:31">7</literal><operator pos:start="417:32" pos:end="417:32">)</operator> <operator pos:start="417:34" pos:end="417:34">|</operator> <call pos:start="417:36" pos:end="417:43"><name pos:start="417:36" pos:end="417:40">REX_B</name><argument_list pos:start="417:41" pos:end="417:43">(<argument pos:start="417:42" pos:end="417:42"><expr pos:start="417:42" pos:end="417:42"><name pos:start="417:42" pos:end="417:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="419:17" pos:end="421:73"><expr pos:start="419:17" pos:end="421:72"><call pos:start="419:17" pos:end="421:72"><name pos:start="419:17" pos:end="419:27">gen_op_movq</name><argument_list pos:start="419:28" pos:end="421:72">(<argument pos:start="419:29" pos:end="419:72"><expr pos:start="419:29" pos:end="419:72"><call pos:start="419:29" pos:end="419:72"><name pos:start="419:29" pos:end="419:36">offsetof</name><argument_list pos:start="419:37" pos:end="419:72">(<argument pos:start="419:38" pos:end="419:48"><expr pos:start="419:38" pos:end="419:48"><name pos:start="419:38" pos:end="419:48">CPUX86State</name></expr></argument>,<argument pos:start="419:50" pos:end="419:71"><expr pos:start="419:50" pos:end="419:71"><name pos:start="419:50" pos:end="419:62"><name pos:start="419:50" pos:end="419:57">xmm_regs</name><index pos:start="419:58" pos:end="419:62">[<expr pos:start="419:59" pos:end="419:61"><name pos:start="419:59" pos:end="419:61">reg</name></expr>]</index></name><operator pos:start="419:63" pos:end="419:63">.</operator><call pos:start="419:64" pos:end="419:71"><name pos:start="419:64" pos:end="419:68">ZMM_Q</name><argument_list pos:start="419:69" pos:end="419:71">(<argument pos:start="419:70" pos:end="419:70"><expr pos:start="419:70" pos:end="419:70"><literal type="number" pos:start="419:70" pos:end="419:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="421:29" pos:end="421:71"><expr pos:start="421:29" pos:end="421:71"><call pos:start="421:29" pos:end="421:71"><name pos:start="421:29" pos:end="421:36">offsetof</name><argument_list pos:start="421:37" pos:end="421:71">(<argument pos:start="421:38" pos:end="421:48"><expr pos:start="421:38" pos:end="421:48"><name pos:start="421:38" pos:end="421:48">CPUX86State</name></expr></argument>,<argument pos:start="421:50" pos:end="421:70"><expr pos:start="421:50" pos:end="421:70"><name pos:start="421:50" pos:end="421:61"><name pos:start="421:50" pos:end="421:57">xmm_regs</name><index pos:start="421:58" pos:end="421:61">[<expr pos:start="421:59" pos:end="421:60"><name pos:start="421:59" pos:end="421:60">rm</name></expr>]</index></name><operator pos:start="421:62" pos:end="421:62">.</operator><call pos:start="421:63" pos:end="421:70"><name pos:start="421:63" pos:end="421:67">ZMM_Q</name><argument_list pos:start="421:68" pos:end="421:70">(<argument pos:start="421:69" pos:end="421:69"><expr pos:start="421:69" pos:end="421:69"><literal type="number" pos:start="421:69" pos:end="421:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="425:13" pos:end="425:18">break;</break>

        <case pos:start="427:9" pos:end="427:19">case <expr pos:start="427:14" pos:end="427:18"><literal type="number" pos:start="427:14" pos:end="427:18">0x212</literal></expr>:</case> <comment type="block" pos:start="427:21" pos:end="427:34">/* movsldup */</comment>

            <if_stmt pos:start="429:13" pos:end="447:13"><if pos:start="429:13" pos:end="435:13">if <condition pos:start="429:16" pos:end="429:25">(<expr pos:start="429:17" pos:end="429:24"><name pos:start="429:17" pos:end="429:19">mod</name> <operator pos:start="429:21" pos:end="429:22">!=</operator> <literal type="number" pos:start="429:24" pos:end="429:24">3</literal></expr>)</condition> <block pos:start="429:27" pos:end="435:13">{<block_content pos:start="431:17" pos:end="433:72">

                <expr_stmt pos:start="431:17" pos:end="431:45"><expr pos:start="431:17" pos:end="431:44"><call pos:start="431:17" pos:end="431:44"><name pos:start="431:17" pos:end="431:29">gen_lea_modrm</name><argument_list pos:start="431:30" pos:end="431:44">(<argument pos:start="431:31" pos:end="431:33"><expr pos:start="431:31" pos:end="431:33"><name pos:start="431:31" pos:end="431:33">env</name></expr></argument>, <argument pos:start="431:36" pos:end="431:36"><expr pos:start="431:36" pos:end="431:36"><name pos:start="431:36" pos:end="431:36">s</name></expr></argument>, <argument pos:start="431:39" pos:end="431:43"><expr pos:start="431:39" pos:end="431:43"><name pos:start="431:39" pos:end="431:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:72"><expr pos:start="433:17" pos:end="433:71"><call pos:start="433:17" pos:end="433:71"><name pos:start="433:17" pos:end="433:30">gen_ldo_env_A0</name><argument_list pos:start="433:31" pos:end="433:71">(<argument pos:start="433:32" pos:end="433:32"><expr pos:start="433:32" pos:end="433:32"><name pos:start="433:32" pos:end="433:32">s</name></expr></argument>, <argument pos:start="433:35" pos:end="433:70"><expr pos:start="433:35" pos:end="433:70"><call pos:start="433:35" pos:end="433:70"><name pos:start="433:35" pos:end="433:42">offsetof</name><argument_list pos:start="433:43" pos:end="433:70">(<argument pos:start="433:44" pos:end="433:54"><expr pos:start="433:44" pos:end="433:54"><name pos:start="433:44" pos:end="433:54">CPUX86State</name></expr></argument>, <argument pos:start="433:57" pos:end="433:69"><expr pos:start="433:57" pos:end="433:69"><name pos:start="433:57" pos:end="433:69"><name pos:start="433:57" pos:end="433:64">xmm_regs</name><index pos:start="433:65" pos:end="433:69">[<expr pos:start="433:66" pos:end="433:68"><name pos:start="433:66" pos:end="433:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="435:15" pos:end="447:13">else <block pos:start="435:20" pos:end="447:13">{<block_content pos:start="437:17" pos:end="445:73">

                <expr_stmt pos:start="437:17" pos:end="437:44"><expr pos:start="437:17" pos:end="437:43"><name pos:start="437:17" pos:end="437:18">rm</name> <operator pos:start="437:20" pos:end="437:20">=</operator> <operator pos:start="437:22" pos:end="437:22">(</operator><name pos:start="437:23" pos:end="437:27">modrm</name> <operator pos:start="437:29" pos:end="437:29">&amp;</operator> <literal type="number" pos:start="437:31" pos:end="437:31">7</literal><operator pos:start="437:32" pos:end="437:32">)</operator> <operator pos:start="437:34" pos:end="437:34">|</operator> <call pos:start="437:36" pos:end="437:43"><name pos:start="437:36" pos:end="437:40">REX_B</name><argument_list pos:start="437:41" pos:end="437:43">(<argument pos:start="437:42" pos:end="437:42"><expr pos:start="437:42" pos:end="437:42"><name pos:start="437:42" pos:end="437:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="439:17" pos:end="441:73"><expr pos:start="439:17" pos:end="441:72"><call pos:start="439:17" pos:end="441:72"><name pos:start="439:17" pos:end="439:27">gen_op_movl</name><argument_list pos:start="439:28" pos:end="441:72">(<argument pos:start="439:29" pos:end="439:72"><expr pos:start="439:29" pos:end="439:72"><call pos:start="439:29" pos:end="439:72"><name pos:start="439:29" pos:end="439:36">offsetof</name><argument_list pos:start="439:37" pos:end="439:72">(<argument pos:start="439:38" pos:end="439:48"><expr pos:start="439:38" pos:end="439:48"><name pos:start="439:38" pos:end="439:48">CPUX86State</name></expr></argument>,<argument pos:start="439:50" pos:end="439:71"><expr pos:start="439:50" pos:end="439:71"><name pos:start="439:50" pos:end="439:62"><name pos:start="439:50" pos:end="439:57">xmm_regs</name><index pos:start="439:58" pos:end="439:62">[<expr pos:start="439:59" pos:end="439:61"><name pos:start="439:59" pos:end="439:61">reg</name></expr>]</index></name><operator pos:start="439:63" pos:end="439:63">.</operator><call pos:start="439:64" pos:end="439:71"><name pos:start="439:64" pos:end="439:68">ZMM_L</name><argument_list pos:start="439:69" pos:end="439:71">(<argument pos:start="439:70" pos:end="439:70"><expr pos:start="439:70" pos:end="439:70"><literal type="number" pos:start="439:70" pos:end="439:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="441:29" pos:end="441:71"><expr pos:start="441:29" pos:end="441:71"><call pos:start="441:29" pos:end="441:71"><name pos:start="441:29" pos:end="441:36">offsetof</name><argument_list pos:start="441:37" pos:end="441:71">(<argument pos:start="441:38" pos:end="441:48"><expr pos:start="441:38" pos:end="441:48"><name pos:start="441:38" pos:end="441:48">CPUX86State</name></expr></argument>,<argument pos:start="441:50" pos:end="441:70"><expr pos:start="441:50" pos:end="441:70"><name pos:start="441:50" pos:end="441:61"><name pos:start="441:50" pos:end="441:57">xmm_regs</name><index pos:start="441:58" pos:end="441:61">[<expr pos:start="441:59" pos:end="441:60"><name pos:start="441:59" pos:end="441:60">rm</name></expr>]</index></name><operator pos:start="441:62" pos:end="441:62">.</operator><call pos:start="441:63" pos:end="441:70"><name pos:start="441:63" pos:end="441:67">ZMM_L</name><argument_list pos:start="441:68" pos:end="441:70">(<argument pos:start="441:69" pos:end="441:69"><expr pos:start="441:69" pos:end="441:69"><literal type="number" pos:start="441:69" pos:end="441:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="443:17" pos:end="445:73"><expr pos:start="443:17" pos:end="445:72"><call pos:start="443:17" pos:end="445:72"><name pos:start="443:17" pos:end="443:27">gen_op_movl</name><argument_list pos:start="443:28" pos:end="445:72">(<argument pos:start="443:29" pos:end="443:72"><expr pos:start="443:29" pos:end="443:72"><call pos:start="443:29" pos:end="443:72"><name pos:start="443:29" pos:end="443:36">offsetof</name><argument_list pos:start="443:37" pos:end="443:72">(<argument pos:start="443:38" pos:end="443:48"><expr pos:start="443:38" pos:end="443:48"><name pos:start="443:38" pos:end="443:48">CPUX86State</name></expr></argument>,<argument pos:start="443:50" pos:end="443:71"><expr pos:start="443:50" pos:end="443:71"><name pos:start="443:50" pos:end="443:62"><name pos:start="443:50" pos:end="443:57">xmm_regs</name><index pos:start="443:58" pos:end="443:62">[<expr pos:start="443:59" pos:end="443:61"><name pos:start="443:59" pos:end="443:61">reg</name></expr>]</index></name><operator pos:start="443:63" pos:end="443:63">.</operator><call pos:start="443:64" pos:end="443:71"><name pos:start="443:64" pos:end="443:68">ZMM_L</name><argument_list pos:start="443:69" pos:end="443:71">(<argument pos:start="443:70" pos:end="443:70"><expr pos:start="443:70" pos:end="443:70"><literal type="number" pos:start="443:70" pos:end="443:70">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="445:29" pos:end="445:71"><expr pos:start="445:29" pos:end="445:71"><call pos:start="445:29" pos:end="445:71"><name pos:start="445:29" pos:end="445:36">offsetof</name><argument_list pos:start="445:37" pos:end="445:71">(<argument pos:start="445:38" pos:end="445:48"><expr pos:start="445:38" pos:end="445:48"><name pos:start="445:38" pos:end="445:48">CPUX86State</name></expr></argument>,<argument pos:start="445:50" pos:end="445:70"><expr pos:start="445:50" pos:end="445:70"><name pos:start="445:50" pos:end="445:61"><name pos:start="445:50" pos:end="445:57">xmm_regs</name><index pos:start="445:58" pos:end="445:61">[<expr pos:start="445:59" pos:end="445:60"><name pos:start="445:59" pos:end="445:60">rm</name></expr>]</index></name><operator pos:start="445:62" pos:end="445:62">.</operator><call pos:start="445:63" pos:end="445:70"><name pos:start="445:63" pos:end="445:67">ZMM_L</name><argument_list pos:start="445:68" pos:end="445:70">(<argument pos:start="445:69" pos:end="445:69"><expr pos:start="445:69" pos:end="445:69"><literal type="number" pos:start="445:69" pos:end="445:69">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="449:13" pos:end="451:70"><expr pos:start="449:13" pos:end="451:69"><call pos:start="449:13" pos:end="451:69"><name pos:start="449:13" pos:end="449:23">gen_op_movl</name><argument_list pos:start="449:24" pos:end="451:69">(<argument pos:start="449:25" pos:end="449:68"><expr pos:start="449:25" pos:end="449:68"><call pos:start="449:25" pos:end="449:68"><name pos:start="449:25" pos:end="449:32">offsetof</name><argument_list pos:start="449:33" pos:end="449:68">(<argument pos:start="449:34" pos:end="449:44"><expr pos:start="449:34" pos:end="449:44"><name pos:start="449:34" pos:end="449:44">CPUX86State</name></expr></argument>,<argument pos:start="449:46" pos:end="449:67"><expr pos:start="449:46" pos:end="449:67"><name pos:start="449:46" pos:end="449:58"><name pos:start="449:46" pos:end="449:53">xmm_regs</name><index pos:start="449:54" pos:end="449:58">[<expr pos:start="449:55" pos:end="449:57"><name pos:start="449:55" pos:end="449:57">reg</name></expr>]</index></name><operator pos:start="449:59" pos:end="449:59">.</operator><call pos:start="449:60" pos:end="449:67"><name pos:start="449:60" pos:end="449:64">ZMM_L</name><argument_list pos:start="449:65" pos:end="449:67">(<argument pos:start="449:66" pos:end="449:66"><expr pos:start="449:66" pos:end="449:66"><literal type="number" pos:start="449:66" pos:end="449:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="451:25" pos:end="451:68"><expr pos:start="451:25" pos:end="451:68"><call pos:start="451:25" pos:end="451:68"><name pos:start="451:25" pos:end="451:32">offsetof</name><argument_list pos:start="451:33" pos:end="451:68">(<argument pos:start="451:34" pos:end="451:44"><expr pos:start="451:34" pos:end="451:44"><name pos:start="451:34" pos:end="451:44">CPUX86State</name></expr></argument>,<argument pos:start="451:46" pos:end="451:67"><expr pos:start="451:46" pos:end="451:67"><name pos:start="451:46" pos:end="451:58"><name pos:start="451:46" pos:end="451:53">xmm_regs</name><index pos:start="451:54" pos:end="451:58">[<expr pos:start="451:55" pos:end="451:57"><name pos:start="451:55" pos:end="451:57">reg</name></expr>]</index></name><operator pos:start="451:59" pos:end="451:59">.</operator><call pos:start="451:60" pos:end="451:67"><name pos:start="451:60" pos:end="451:64">ZMM_L</name><argument_list pos:start="451:65" pos:end="451:67">(<argument pos:start="451:66" pos:end="451:66"><expr pos:start="451:66" pos:end="451:66"><literal type="number" pos:start="451:66" pos:end="451:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="455:70"><expr pos:start="453:13" pos:end="455:69"><call pos:start="453:13" pos:end="455:69"><name pos:start="453:13" pos:end="453:23">gen_op_movl</name><argument_list pos:start="453:24" pos:end="455:69">(<argument pos:start="453:25" pos:end="453:68"><expr pos:start="453:25" pos:end="453:68"><call pos:start="453:25" pos:end="453:68"><name pos:start="453:25" pos:end="453:32">offsetof</name><argument_list pos:start="453:33" pos:end="453:68">(<argument pos:start="453:34" pos:end="453:44"><expr pos:start="453:34" pos:end="453:44"><name pos:start="453:34" pos:end="453:44">CPUX86State</name></expr></argument>,<argument pos:start="453:46" pos:end="453:67"><expr pos:start="453:46" pos:end="453:67"><name pos:start="453:46" pos:end="453:58"><name pos:start="453:46" pos:end="453:53">xmm_regs</name><index pos:start="453:54" pos:end="453:58">[<expr pos:start="453:55" pos:end="453:57"><name pos:start="453:55" pos:end="453:57">reg</name></expr>]</index></name><operator pos:start="453:59" pos:end="453:59">.</operator><call pos:start="453:60" pos:end="453:67"><name pos:start="453:60" pos:end="453:64">ZMM_L</name><argument_list pos:start="453:65" pos:end="453:67">(<argument pos:start="453:66" pos:end="453:66"><expr pos:start="453:66" pos:end="453:66"><literal type="number" pos:start="453:66" pos:end="453:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="455:25" pos:end="455:68"><expr pos:start="455:25" pos:end="455:68"><call pos:start="455:25" pos:end="455:68"><name pos:start="455:25" pos:end="455:32">offsetof</name><argument_list pos:start="455:33" pos:end="455:68">(<argument pos:start="455:34" pos:end="455:44"><expr pos:start="455:34" pos:end="455:44"><name pos:start="455:34" pos:end="455:44">CPUX86State</name></expr></argument>,<argument pos:start="455:46" pos:end="455:67"><expr pos:start="455:46" pos:end="455:67"><name pos:start="455:46" pos:end="455:58"><name pos:start="455:46" pos:end="455:53">xmm_regs</name><index pos:start="455:54" pos:end="455:58">[<expr pos:start="455:55" pos:end="455:57"><name pos:start="455:55" pos:end="455:57">reg</name></expr>]</index></name><operator pos:start="455:59" pos:end="455:59">.</operator><call pos:start="455:60" pos:end="455:67"><name pos:start="455:60" pos:end="455:64">ZMM_L</name><argument_list pos:start="455:65" pos:end="455:67">(<argument pos:start="455:66" pos:end="455:66"><expr pos:start="455:66" pos:end="455:66"><literal type="number" pos:start="455:66" pos:end="455:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="457:13" pos:end="457:18">break;</break>

        <case pos:start="459:9" pos:end="459:19">case <expr pos:start="459:14" pos:end="459:18"><literal type="number" pos:start="459:14" pos:end="459:18">0x312</literal></expr>:</case> <comment type="block" pos:start="459:21" pos:end="459:33">/* movddup */</comment>

            <if_stmt pos:start="461:13" pos:end="477:13"><if pos:start="461:13" pos:end="469:13">if <condition pos:start="461:16" pos:end="461:25">(<expr pos:start="461:17" pos:end="461:24"><name pos:start="461:17" pos:end="461:19">mod</name> <operator pos:start="461:21" pos:end="461:22">!=</operator> <literal type="number" pos:start="461:24" pos:end="461:24">3</literal></expr>)</condition> <block pos:start="461:27" pos:end="469:13">{<block_content pos:start="463:17" pos:end="467:68">

                <expr_stmt pos:start="463:17" pos:end="463:45"><expr pos:start="463:17" pos:end="463:44"><call pos:start="463:17" pos:end="463:44"><name pos:start="463:17" pos:end="463:29">gen_lea_modrm</name><argument_list pos:start="463:30" pos:end="463:44">(<argument pos:start="463:31" pos:end="463:33"><expr pos:start="463:31" pos:end="463:33"><name pos:start="463:31" pos:end="463:33">env</name></expr></argument>, <argument pos:start="463:36" pos:end="463:36"><expr pos:start="463:36" pos:end="463:36"><name pos:start="463:36" pos:end="463:36">s</name></expr></argument>, <argument pos:start="463:39" pos:end="463:43"><expr pos:start="463:39" pos:end="463:43"><name pos:start="463:39" pos:end="463:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="465:17" pos:end="467:68"><expr pos:start="465:17" pos:end="467:67"><call pos:start="465:17" pos:end="467:67"><name pos:start="465:17" pos:end="465:30">gen_ldq_env_A0</name><argument_list pos:start="465:31" pos:end="467:67">(<argument pos:start="465:32" pos:end="465:32"><expr pos:start="465:32" pos:end="465:32"><name pos:start="465:32" pos:end="465:32">s</name></expr></argument>, <argument pos:start="465:35" pos:end="467:66"><expr pos:start="465:35" pos:end="467:66"><call pos:start="465:35" pos:end="467:66"><name pos:start="465:35" pos:end="465:42">offsetof</name><argument_list pos:start="465:43" pos:end="467:66">(<argument pos:start="465:44" pos:end="465:54"><expr pos:start="465:44" pos:end="465:54"><name pos:start="465:44" pos:end="465:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="467:44" pos:end="467:65"><expr pos:start="467:44" pos:end="467:65"><name pos:start="467:44" pos:end="467:56"><name pos:start="467:44" pos:end="467:51">xmm_regs</name><index pos:start="467:52" pos:end="467:56">[<expr pos:start="467:53" pos:end="467:55"><name pos:start="467:53" pos:end="467:55">reg</name></expr>]</index></name><operator pos:start="467:57" pos:end="467:57">.</operator><call pos:start="467:58" pos:end="467:65"><name pos:start="467:58" pos:end="467:62">ZMM_Q</name><argument_list pos:start="467:63" pos:end="467:65">(<argument pos:start="467:64" pos:end="467:64"><expr pos:start="467:64" pos:end="467:64"><literal type="number" pos:start="467:64" pos:end="467:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="469:15" pos:end="477:13">else <block pos:start="469:20" pos:end="477:13">{<block_content pos:start="471:17" pos:end="475:73">

                <expr_stmt pos:start="471:17" pos:end="471:44"><expr pos:start="471:17" pos:end="471:43"><name pos:start="471:17" pos:end="471:18">rm</name> <operator pos:start="471:20" pos:end="471:20">=</operator> <operator pos:start="471:22" pos:end="471:22">(</operator><name pos:start="471:23" pos:end="471:27">modrm</name> <operator pos:start="471:29" pos:end="471:29">&amp;</operator> <literal type="number" pos:start="471:31" pos:end="471:31">7</literal><operator pos:start="471:32" pos:end="471:32">)</operator> <operator pos:start="471:34" pos:end="471:34">|</operator> <call pos:start="471:36" pos:end="471:43"><name pos:start="471:36" pos:end="471:40">REX_B</name><argument_list pos:start="471:41" pos:end="471:43">(<argument pos:start="471:42" pos:end="471:42"><expr pos:start="471:42" pos:end="471:42"><name pos:start="471:42" pos:end="471:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="473:17" pos:end="475:73"><expr pos:start="473:17" pos:end="475:72"><call pos:start="473:17" pos:end="475:72"><name pos:start="473:17" pos:end="473:27">gen_op_movq</name><argument_list pos:start="473:28" pos:end="475:72">(<argument pos:start="473:29" pos:end="473:72"><expr pos:start="473:29" pos:end="473:72"><call pos:start="473:29" pos:end="473:72"><name pos:start="473:29" pos:end="473:36">offsetof</name><argument_list pos:start="473:37" pos:end="473:72">(<argument pos:start="473:38" pos:end="473:48"><expr pos:start="473:38" pos:end="473:48"><name pos:start="473:38" pos:end="473:48">CPUX86State</name></expr></argument>,<argument pos:start="473:50" pos:end="473:71"><expr pos:start="473:50" pos:end="473:71"><name pos:start="473:50" pos:end="473:62"><name pos:start="473:50" pos:end="473:57">xmm_regs</name><index pos:start="473:58" pos:end="473:62">[<expr pos:start="473:59" pos:end="473:61"><name pos:start="473:59" pos:end="473:61">reg</name></expr>]</index></name><operator pos:start="473:63" pos:end="473:63">.</operator><call pos:start="473:64" pos:end="473:71"><name pos:start="473:64" pos:end="473:68">ZMM_Q</name><argument_list pos:start="473:69" pos:end="473:71">(<argument pos:start="473:70" pos:end="473:70"><expr pos:start="473:70" pos:end="473:70"><literal type="number" pos:start="473:70" pos:end="473:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="475:29" pos:end="475:71"><expr pos:start="475:29" pos:end="475:71"><call pos:start="475:29" pos:end="475:71"><name pos:start="475:29" pos:end="475:36">offsetof</name><argument_list pos:start="475:37" pos:end="475:71">(<argument pos:start="475:38" pos:end="475:48"><expr pos:start="475:38" pos:end="475:48"><name pos:start="475:38" pos:end="475:48">CPUX86State</name></expr></argument>,<argument pos:start="475:50" pos:end="475:70"><expr pos:start="475:50" pos:end="475:70"><name pos:start="475:50" pos:end="475:61"><name pos:start="475:50" pos:end="475:57">xmm_regs</name><index pos:start="475:58" pos:end="475:61">[<expr pos:start="475:59" pos:end="475:60"><name pos:start="475:59" pos:end="475:60">rm</name></expr>]</index></name><operator pos:start="475:62" pos:end="475:62">.</operator><call pos:start="475:63" pos:end="475:70"><name pos:start="475:63" pos:end="475:67">ZMM_Q</name><argument_list pos:start="475:68" pos:end="475:70">(<argument pos:start="475:69" pos:end="475:69"><expr pos:start="475:69" pos:end="475:69"><literal type="number" pos:start="475:69" pos:end="475:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="479:13" pos:end="481:70"><expr pos:start="479:13" pos:end="481:69"><call pos:start="479:13" pos:end="481:69"><name pos:start="479:13" pos:end="479:23">gen_op_movq</name><argument_list pos:start="479:24" pos:end="481:69">(<argument pos:start="479:25" pos:end="479:68"><expr pos:start="479:25" pos:end="479:68"><call pos:start="479:25" pos:end="479:68"><name pos:start="479:25" pos:end="479:32">offsetof</name><argument_list pos:start="479:33" pos:end="479:68">(<argument pos:start="479:34" pos:end="479:44"><expr pos:start="479:34" pos:end="479:44"><name pos:start="479:34" pos:end="479:44">CPUX86State</name></expr></argument>,<argument pos:start="479:46" pos:end="479:67"><expr pos:start="479:46" pos:end="479:67"><name pos:start="479:46" pos:end="479:58"><name pos:start="479:46" pos:end="479:53">xmm_regs</name><index pos:start="479:54" pos:end="479:58">[<expr pos:start="479:55" pos:end="479:57"><name pos:start="479:55" pos:end="479:57">reg</name></expr>]</index></name><operator pos:start="479:59" pos:end="479:59">.</operator><call pos:start="479:60" pos:end="479:67"><name pos:start="479:60" pos:end="479:64">ZMM_Q</name><argument_list pos:start="479:65" pos:end="479:67">(<argument pos:start="479:66" pos:end="479:66"><expr pos:start="479:66" pos:end="479:66"><literal type="number" pos:start="479:66" pos:end="479:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="481:25" pos:end="481:68"><expr pos:start="481:25" pos:end="481:68"><call pos:start="481:25" pos:end="481:68"><name pos:start="481:25" pos:end="481:32">offsetof</name><argument_list pos:start="481:33" pos:end="481:68">(<argument pos:start="481:34" pos:end="481:44"><expr pos:start="481:34" pos:end="481:44"><name pos:start="481:34" pos:end="481:44">CPUX86State</name></expr></argument>,<argument pos:start="481:46" pos:end="481:67"><expr pos:start="481:46" pos:end="481:67"><name pos:start="481:46" pos:end="481:58"><name pos:start="481:46" pos:end="481:53">xmm_regs</name><index pos:start="481:54" pos:end="481:58">[<expr pos:start="481:55" pos:end="481:57"><name pos:start="481:55" pos:end="481:57">reg</name></expr>]</index></name><operator pos:start="481:59" pos:end="481:59">.</operator><call pos:start="481:60" pos:end="481:67"><name pos:start="481:60" pos:end="481:64">ZMM_Q</name><argument_list pos:start="481:65" pos:end="481:67">(<argument pos:start="481:66" pos:end="481:66"><expr pos:start="481:66" pos:end="481:66"><literal type="number" pos:start="481:66" pos:end="481:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="483:13" pos:end="483:18">break;</break>

        <case pos:start="485:9" pos:end="485:19">case <expr pos:start="485:14" pos:end="485:18"><literal type="number" pos:start="485:14" pos:end="485:18">0x016</literal></expr>:</case> <comment type="block" pos:start="485:21" pos:end="485:32">/* movhps */</comment>

        <case pos:start="487:9" pos:end="487:19">case <expr pos:start="487:14" pos:end="487:18"><literal type="number" pos:start="487:14" pos:end="487:18">0x116</literal></expr>:</case> <comment type="block" pos:start="487:21" pos:end="487:32">/* movhpd */</comment>

            <if_stmt pos:start="489:13" pos:end="507:13"><if pos:start="489:13" pos:end="497:13">if <condition pos:start="489:16" pos:end="489:25">(<expr pos:start="489:17" pos:end="489:24"><name pos:start="489:17" pos:end="489:19">mod</name> <operator pos:start="489:21" pos:end="489:22">!=</operator> <literal type="number" pos:start="489:24" pos:end="489:24">3</literal></expr>)</condition> <block pos:start="489:27" pos:end="497:13">{<block_content pos:start="491:17" pos:end="495:68">

                <expr_stmt pos:start="491:17" pos:end="491:45"><expr pos:start="491:17" pos:end="491:44"><call pos:start="491:17" pos:end="491:44"><name pos:start="491:17" pos:end="491:29">gen_lea_modrm</name><argument_list pos:start="491:30" pos:end="491:44">(<argument pos:start="491:31" pos:end="491:33"><expr pos:start="491:31" pos:end="491:33"><name pos:start="491:31" pos:end="491:33">env</name></expr></argument>, <argument pos:start="491:36" pos:end="491:36"><expr pos:start="491:36" pos:end="491:36"><name pos:start="491:36" pos:end="491:36">s</name></expr></argument>, <argument pos:start="491:39" pos:end="491:43"><expr pos:start="491:39" pos:end="491:43"><name pos:start="491:39" pos:end="491:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="493:17" pos:end="495:68"><expr pos:start="493:17" pos:end="495:67"><call pos:start="493:17" pos:end="495:67"><name pos:start="493:17" pos:end="493:30">gen_ldq_env_A0</name><argument_list pos:start="493:31" pos:end="495:67">(<argument pos:start="493:32" pos:end="493:32"><expr pos:start="493:32" pos:end="493:32"><name pos:start="493:32" pos:end="493:32">s</name></expr></argument>, <argument pos:start="493:35" pos:end="495:66"><expr pos:start="493:35" pos:end="495:66"><call pos:start="493:35" pos:end="495:66"><name pos:start="493:35" pos:end="493:42">offsetof</name><argument_list pos:start="493:43" pos:end="495:66">(<argument pos:start="493:44" pos:end="493:54"><expr pos:start="493:44" pos:end="493:54"><name pos:start="493:44" pos:end="493:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="495:44" pos:end="495:65"><expr pos:start="495:44" pos:end="495:65"><name pos:start="495:44" pos:end="495:56"><name pos:start="495:44" pos:end="495:51">xmm_regs</name><index pos:start="495:52" pos:end="495:56">[<expr pos:start="495:53" pos:end="495:55"><name pos:start="495:53" pos:end="495:55">reg</name></expr>]</index></name><operator pos:start="495:57" pos:end="495:57">.</operator><call pos:start="495:58" pos:end="495:65"><name pos:start="495:58" pos:end="495:62">ZMM_Q</name><argument_list pos:start="495:63" pos:end="495:65">(<argument pos:start="495:64" pos:end="495:64"><expr pos:start="495:64" pos:end="495:64"><literal type="number" pos:start="495:64" pos:end="495:64">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="497:15" pos:end="507:13">else <block pos:start="497:20" pos:end="507:13">{<block_content pos:start="501:17" pos:end="505:73">

                <comment type="block" pos:start="499:17" pos:end="499:29">/* movlhps */</comment>

                <expr_stmt pos:start="501:17" pos:end="501:44"><expr pos:start="501:17" pos:end="501:43"><name pos:start="501:17" pos:end="501:18">rm</name> <operator pos:start="501:20" pos:end="501:20">=</operator> <operator pos:start="501:22" pos:end="501:22">(</operator><name pos:start="501:23" pos:end="501:27">modrm</name> <operator pos:start="501:29" pos:end="501:29">&amp;</operator> <literal type="number" pos:start="501:31" pos:end="501:31">7</literal><operator pos:start="501:32" pos:end="501:32">)</operator> <operator pos:start="501:34" pos:end="501:34">|</operator> <call pos:start="501:36" pos:end="501:43"><name pos:start="501:36" pos:end="501:40">REX_B</name><argument_list pos:start="501:41" pos:end="501:43">(<argument pos:start="501:42" pos:end="501:42"><expr pos:start="501:42" pos:end="501:42"><name pos:start="501:42" pos:end="501:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="503:17" pos:end="505:73"><expr pos:start="503:17" pos:end="505:72"><call pos:start="503:17" pos:end="505:72"><name pos:start="503:17" pos:end="503:27">gen_op_movq</name><argument_list pos:start="503:28" pos:end="505:72">(<argument pos:start="503:29" pos:end="503:72"><expr pos:start="503:29" pos:end="503:72"><call pos:start="503:29" pos:end="503:72"><name pos:start="503:29" pos:end="503:36">offsetof</name><argument_list pos:start="503:37" pos:end="503:72">(<argument pos:start="503:38" pos:end="503:48"><expr pos:start="503:38" pos:end="503:48"><name pos:start="503:38" pos:end="503:48">CPUX86State</name></expr></argument>,<argument pos:start="503:50" pos:end="503:71"><expr pos:start="503:50" pos:end="503:71"><name pos:start="503:50" pos:end="503:62"><name pos:start="503:50" pos:end="503:57">xmm_regs</name><index pos:start="503:58" pos:end="503:62">[<expr pos:start="503:59" pos:end="503:61"><name pos:start="503:59" pos:end="503:61">reg</name></expr>]</index></name><operator pos:start="503:63" pos:end="503:63">.</operator><call pos:start="503:64" pos:end="503:71"><name pos:start="503:64" pos:end="503:68">ZMM_Q</name><argument_list pos:start="503:69" pos:end="503:71">(<argument pos:start="503:70" pos:end="503:70"><expr pos:start="503:70" pos:end="503:70"><literal type="number" pos:start="503:70" pos:end="503:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="505:29" pos:end="505:71"><expr pos:start="505:29" pos:end="505:71"><call pos:start="505:29" pos:end="505:71"><name pos:start="505:29" pos:end="505:36">offsetof</name><argument_list pos:start="505:37" pos:end="505:71">(<argument pos:start="505:38" pos:end="505:48"><expr pos:start="505:38" pos:end="505:48"><name pos:start="505:38" pos:end="505:48">CPUX86State</name></expr></argument>,<argument pos:start="505:50" pos:end="505:70"><expr pos:start="505:50" pos:end="505:70"><name pos:start="505:50" pos:end="505:61"><name pos:start="505:50" pos:end="505:57">xmm_regs</name><index pos:start="505:58" pos:end="505:61">[<expr pos:start="505:59" pos:end="505:60"><name pos:start="505:59" pos:end="505:60">rm</name></expr>]</index></name><operator pos:start="505:62" pos:end="505:62">.</operator><call pos:start="505:63" pos:end="505:70"><name pos:start="505:63" pos:end="505:67">ZMM_Q</name><argument_list pos:start="505:68" pos:end="505:70">(<argument pos:start="505:69" pos:end="505:69"><expr pos:start="505:69" pos:end="505:69"><literal type="number" pos:start="505:69" pos:end="505:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="509:13" pos:end="509:18">break;</break>

        <case pos:start="511:9" pos:end="511:19">case <expr pos:start="511:14" pos:end="511:18"><literal type="number" pos:start="511:14" pos:end="511:18">0x216</literal></expr>:</case> <comment type="block" pos:start="511:21" pos:end="511:34">/* movshdup */</comment>

            <if_stmt pos:start="513:13" pos:end="531:13"><if pos:start="513:13" pos:end="519:13">if <condition pos:start="513:16" pos:end="513:25">(<expr pos:start="513:17" pos:end="513:24"><name pos:start="513:17" pos:end="513:19">mod</name> <operator pos:start="513:21" pos:end="513:22">!=</operator> <literal type="number" pos:start="513:24" pos:end="513:24">3</literal></expr>)</condition> <block pos:start="513:27" pos:end="519:13">{<block_content pos:start="515:17" pos:end="517:72">

                <expr_stmt pos:start="515:17" pos:end="515:45"><expr pos:start="515:17" pos:end="515:44"><call pos:start="515:17" pos:end="515:44"><name pos:start="515:17" pos:end="515:29">gen_lea_modrm</name><argument_list pos:start="515:30" pos:end="515:44">(<argument pos:start="515:31" pos:end="515:33"><expr pos:start="515:31" pos:end="515:33"><name pos:start="515:31" pos:end="515:33">env</name></expr></argument>, <argument pos:start="515:36" pos:end="515:36"><expr pos:start="515:36" pos:end="515:36"><name pos:start="515:36" pos:end="515:36">s</name></expr></argument>, <argument pos:start="515:39" pos:end="515:43"><expr pos:start="515:39" pos:end="515:43"><name pos:start="515:39" pos:end="515:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="517:17" pos:end="517:72"><expr pos:start="517:17" pos:end="517:71"><call pos:start="517:17" pos:end="517:71"><name pos:start="517:17" pos:end="517:30">gen_ldo_env_A0</name><argument_list pos:start="517:31" pos:end="517:71">(<argument pos:start="517:32" pos:end="517:32"><expr pos:start="517:32" pos:end="517:32"><name pos:start="517:32" pos:end="517:32">s</name></expr></argument>, <argument pos:start="517:35" pos:end="517:70"><expr pos:start="517:35" pos:end="517:70"><call pos:start="517:35" pos:end="517:70"><name pos:start="517:35" pos:end="517:42">offsetof</name><argument_list pos:start="517:43" pos:end="517:70">(<argument pos:start="517:44" pos:end="517:54"><expr pos:start="517:44" pos:end="517:54"><name pos:start="517:44" pos:end="517:54">CPUX86State</name></expr></argument>, <argument pos:start="517:57" pos:end="517:69"><expr pos:start="517:57" pos:end="517:69"><name pos:start="517:57" pos:end="517:69"><name pos:start="517:57" pos:end="517:64">xmm_regs</name><index pos:start="517:65" pos:end="517:69">[<expr pos:start="517:66" pos:end="517:68"><name pos:start="517:66" pos:end="517:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="519:15" pos:end="531:13">else <block pos:start="519:20" pos:end="531:13">{<block_content pos:start="521:17" pos:end="529:73">

                <expr_stmt pos:start="521:17" pos:end="521:44"><expr pos:start="521:17" pos:end="521:43"><name pos:start="521:17" pos:end="521:18">rm</name> <operator pos:start="521:20" pos:end="521:20">=</operator> <operator pos:start="521:22" pos:end="521:22">(</operator><name pos:start="521:23" pos:end="521:27">modrm</name> <operator pos:start="521:29" pos:end="521:29">&amp;</operator> <literal type="number" pos:start="521:31" pos:end="521:31">7</literal><operator pos:start="521:32" pos:end="521:32">)</operator> <operator pos:start="521:34" pos:end="521:34">|</operator> <call pos:start="521:36" pos:end="521:43"><name pos:start="521:36" pos:end="521:40">REX_B</name><argument_list pos:start="521:41" pos:end="521:43">(<argument pos:start="521:42" pos:end="521:42"><expr pos:start="521:42" pos:end="521:42"><name pos:start="521:42" pos:end="521:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="525:73"><expr pos:start="523:17" pos:end="525:72"><call pos:start="523:17" pos:end="525:72"><name pos:start="523:17" pos:end="523:27">gen_op_movl</name><argument_list pos:start="523:28" pos:end="525:72">(<argument pos:start="523:29" pos:end="523:72"><expr pos:start="523:29" pos:end="523:72"><call pos:start="523:29" pos:end="523:72"><name pos:start="523:29" pos:end="523:36">offsetof</name><argument_list pos:start="523:37" pos:end="523:72">(<argument pos:start="523:38" pos:end="523:48"><expr pos:start="523:38" pos:end="523:48"><name pos:start="523:38" pos:end="523:48">CPUX86State</name></expr></argument>,<argument pos:start="523:50" pos:end="523:71"><expr pos:start="523:50" pos:end="523:71"><name pos:start="523:50" pos:end="523:62"><name pos:start="523:50" pos:end="523:57">xmm_regs</name><index pos:start="523:58" pos:end="523:62">[<expr pos:start="523:59" pos:end="523:61"><name pos:start="523:59" pos:end="523:61">reg</name></expr>]</index></name><operator pos:start="523:63" pos:end="523:63">.</operator><call pos:start="523:64" pos:end="523:71"><name pos:start="523:64" pos:end="523:68">ZMM_L</name><argument_list pos:start="523:69" pos:end="523:71">(<argument pos:start="523:70" pos:end="523:70"><expr pos:start="523:70" pos:end="523:70"><literal type="number" pos:start="523:70" pos:end="523:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="525:29" pos:end="525:71"><expr pos:start="525:29" pos:end="525:71"><call pos:start="525:29" pos:end="525:71"><name pos:start="525:29" pos:end="525:36">offsetof</name><argument_list pos:start="525:37" pos:end="525:71">(<argument pos:start="525:38" pos:end="525:48"><expr pos:start="525:38" pos:end="525:48"><name pos:start="525:38" pos:end="525:48">CPUX86State</name></expr></argument>,<argument pos:start="525:50" pos:end="525:70"><expr pos:start="525:50" pos:end="525:70"><name pos:start="525:50" pos:end="525:61"><name pos:start="525:50" pos:end="525:57">xmm_regs</name><index pos:start="525:58" pos:end="525:61">[<expr pos:start="525:59" pos:end="525:60"><name pos:start="525:59" pos:end="525:60">rm</name></expr>]</index></name><operator pos:start="525:62" pos:end="525:62">.</operator><call pos:start="525:63" pos:end="525:70"><name pos:start="525:63" pos:end="525:67">ZMM_L</name><argument_list pos:start="525:68" pos:end="525:70">(<argument pos:start="525:69" pos:end="525:69"><expr pos:start="525:69" pos:end="525:69"><literal type="number" pos:start="525:69" pos:end="525:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="527:17" pos:end="529:73"><expr pos:start="527:17" pos:end="529:72"><call pos:start="527:17" pos:end="529:72"><name pos:start="527:17" pos:end="527:27">gen_op_movl</name><argument_list pos:start="527:28" pos:end="529:72">(<argument pos:start="527:29" pos:end="527:72"><expr pos:start="527:29" pos:end="527:72"><call pos:start="527:29" pos:end="527:72"><name pos:start="527:29" pos:end="527:36">offsetof</name><argument_list pos:start="527:37" pos:end="527:72">(<argument pos:start="527:38" pos:end="527:48"><expr pos:start="527:38" pos:end="527:48"><name pos:start="527:38" pos:end="527:48">CPUX86State</name></expr></argument>,<argument pos:start="527:50" pos:end="527:71"><expr pos:start="527:50" pos:end="527:71"><name pos:start="527:50" pos:end="527:62"><name pos:start="527:50" pos:end="527:57">xmm_regs</name><index pos:start="527:58" pos:end="527:62">[<expr pos:start="527:59" pos:end="527:61"><name pos:start="527:59" pos:end="527:61">reg</name></expr>]</index></name><operator pos:start="527:63" pos:end="527:63">.</operator><call pos:start="527:64" pos:end="527:71"><name pos:start="527:64" pos:end="527:68">ZMM_L</name><argument_list pos:start="527:69" pos:end="527:71">(<argument pos:start="527:70" pos:end="527:70"><expr pos:start="527:70" pos:end="527:70"><literal type="number" pos:start="527:70" pos:end="527:70">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="529:29" pos:end="529:71"><expr pos:start="529:29" pos:end="529:71"><call pos:start="529:29" pos:end="529:71"><name pos:start="529:29" pos:end="529:36">offsetof</name><argument_list pos:start="529:37" pos:end="529:71">(<argument pos:start="529:38" pos:end="529:48"><expr pos:start="529:38" pos:end="529:48"><name pos:start="529:38" pos:end="529:48">CPUX86State</name></expr></argument>,<argument pos:start="529:50" pos:end="529:70"><expr pos:start="529:50" pos:end="529:70"><name pos:start="529:50" pos:end="529:61"><name pos:start="529:50" pos:end="529:57">xmm_regs</name><index pos:start="529:58" pos:end="529:61">[<expr pos:start="529:59" pos:end="529:60"><name pos:start="529:59" pos:end="529:60">rm</name></expr>]</index></name><operator pos:start="529:62" pos:end="529:62">.</operator><call pos:start="529:63" pos:end="529:70"><name pos:start="529:63" pos:end="529:67">ZMM_L</name><argument_list pos:start="529:68" pos:end="529:70">(<argument pos:start="529:69" pos:end="529:69"><expr pos:start="529:69" pos:end="529:69"><literal type="number" pos:start="529:69" pos:end="529:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="533:13" pos:end="535:70"><expr pos:start="533:13" pos:end="535:69"><call pos:start="533:13" pos:end="535:69"><name pos:start="533:13" pos:end="533:23">gen_op_movl</name><argument_list pos:start="533:24" pos:end="535:69">(<argument pos:start="533:25" pos:end="533:68"><expr pos:start="533:25" pos:end="533:68"><call pos:start="533:25" pos:end="533:68"><name pos:start="533:25" pos:end="533:32">offsetof</name><argument_list pos:start="533:33" pos:end="533:68">(<argument pos:start="533:34" pos:end="533:44"><expr pos:start="533:34" pos:end="533:44"><name pos:start="533:34" pos:end="533:44">CPUX86State</name></expr></argument>,<argument pos:start="533:46" pos:end="533:67"><expr pos:start="533:46" pos:end="533:67"><name pos:start="533:46" pos:end="533:58"><name pos:start="533:46" pos:end="533:53">xmm_regs</name><index pos:start="533:54" pos:end="533:58">[<expr pos:start="533:55" pos:end="533:57"><name pos:start="533:55" pos:end="533:57">reg</name></expr>]</index></name><operator pos:start="533:59" pos:end="533:59">.</operator><call pos:start="533:60" pos:end="533:67"><name pos:start="533:60" pos:end="533:64">ZMM_L</name><argument_list pos:start="533:65" pos:end="533:67">(<argument pos:start="533:66" pos:end="533:66"><expr pos:start="533:66" pos:end="533:66"><literal type="number" pos:start="533:66" pos:end="533:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="535:25" pos:end="535:68"><expr pos:start="535:25" pos:end="535:68"><call pos:start="535:25" pos:end="535:68"><name pos:start="535:25" pos:end="535:32">offsetof</name><argument_list pos:start="535:33" pos:end="535:68">(<argument pos:start="535:34" pos:end="535:44"><expr pos:start="535:34" pos:end="535:44"><name pos:start="535:34" pos:end="535:44">CPUX86State</name></expr></argument>,<argument pos:start="535:46" pos:end="535:67"><expr pos:start="535:46" pos:end="535:67"><name pos:start="535:46" pos:end="535:58"><name pos:start="535:46" pos:end="535:53">xmm_regs</name><index pos:start="535:54" pos:end="535:58">[<expr pos:start="535:55" pos:end="535:57"><name pos:start="535:55" pos:end="535:57">reg</name></expr>]</index></name><operator pos:start="535:59" pos:end="535:59">.</operator><call pos:start="535:60" pos:end="535:67"><name pos:start="535:60" pos:end="535:64">ZMM_L</name><argument_list pos:start="535:65" pos:end="535:67">(<argument pos:start="535:66" pos:end="535:66"><expr pos:start="535:66" pos:end="535:66"><literal type="number" pos:start="535:66" pos:end="535:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="537:13" pos:end="539:70"><expr pos:start="537:13" pos:end="539:69"><call pos:start="537:13" pos:end="539:69"><name pos:start="537:13" pos:end="537:23">gen_op_movl</name><argument_list pos:start="537:24" pos:end="539:69">(<argument pos:start="537:25" pos:end="537:68"><expr pos:start="537:25" pos:end="537:68"><call pos:start="537:25" pos:end="537:68"><name pos:start="537:25" pos:end="537:32">offsetof</name><argument_list pos:start="537:33" pos:end="537:68">(<argument pos:start="537:34" pos:end="537:44"><expr pos:start="537:34" pos:end="537:44"><name pos:start="537:34" pos:end="537:44">CPUX86State</name></expr></argument>,<argument pos:start="537:46" pos:end="537:67"><expr pos:start="537:46" pos:end="537:67"><name pos:start="537:46" pos:end="537:58"><name pos:start="537:46" pos:end="537:53">xmm_regs</name><index pos:start="537:54" pos:end="537:58">[<expr pos:start="537:55" pos:end="537:57"><name pos:start="537:55" pos:end="537:57">reg</name></expr>]</index></name><operator pos:start="537:59" pos:end="537:59">.</operator><call pos:start="537:60" pos:end="537:67"><name pos:start="537:60" pos:end="537:64">ZMM_L</name><argument_list pos:start="537:65" pos:end="537:67">(<argument pos:start="537:66" pos:end="537:66"><expr pos:start="537:66" pos:end="537:66"><literal type="number" pos:start="537:66" pos:end="537:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="539:25" pos:end="539:68"><expr pos:start="539:25" pos:end="539:68"><call pos:start="539:25" pos:end="539:68"><name pos:start="539:25" pos:end="539:32">offsetof</name><argument_list pos:start="539:33" pos:end="539:68">(<argument pos:start="539:34" pos:end="539:44"><expr pos:start="539:34" pos:end="539:44"><name pos:start="539:34" pos:end="539:44">CPUX86State</name></expr></argument>,<argument pos:start="539:46" pos:end="539:67"><expr pos:start="539:46" pos:end="539:67"><name pos:start="539:46" pos:end="539:58"><name pos:start="539:46" pos:end="539:53">xmm_regs</name><index pos:start="539:54" pos:end="539:58">[<expr pos:start="539:55" pos:end="539:57"><name pos:start="539:55" pos:end="539:57">reg</name></expr>]</index></name><operator pos:start="539:59" pos:end="539:59">.</operator><call pos:start="539:60" pos:end="539:67"><name pos:start="539:60" pos:end="539:64">ZMM_L</name><argument_list pos:start="539:65" pos:end="539:67">(<argument pos:start="539:66" pos:end="539:66"><expr pos:start="539:66" pos:end="539:66"><literal type="number" pos:start="539:66" pos:end="539:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="541:13" pos:end="541:18">break;</break>

        <case pos:start="543:9" pos:end="543:19">case <expr pos:start="543:14" pos:end="543:18"><literal type="number" pos:start="543:14" pos:end="543:18">0x178</literal></expr>:</case>

        <case pos:start="545:9" pos:end="545:19">case <expr pos:start="545:14" pos:end="545:18"><literal type="number" pos:start="545:14" pos:end="545:18">0x378</literal></expr>:</case>

            <block pos:start="547:13" pos:end="581:13">{<block_content pos:start="549:17" pos:end="579:70">

                <decl_stmt pos:start="549:17" pos:end="549:44"><decl pos:start="549:17" pos:end="549:29"><type pos:start="549:17" pos:end="549:19"><name pos:start="549:17" pos:end="549:19">int</name></type> <name pos:start="549:21" pos:end="549:29">bit_index</name></decl>, <decl pos:start="549:32" pos:end="549:43"><type ref="prev" pos:start="549:17" pos:end="549:19"/><name pos:start="549:32" pos:end="549:43">field_length</name></decl>;</decl_stmt>



                <if_stmt pos:start="553:17" pos:end="555:36"><if pos:start="553:17" pos:end="555:36">if <condition pos:start="553:20" pos:end="553:40">(<expr pos:start="553:21" pos:end="553:39"><name pos:start="553:21" pos:end="553:22">b1</name> <operator pos:start="553:24" pos:end="553:25">==</operator> <literal type="number" pos:start="553:27" pos:end="553:27">1</literal> <operator pos:start="553:29" pos:end="553:30">&amp;&amp;</operator> <name pos:start="553:32" pos:end="553:34">reg</name> <operator pos:start="553:36" pos:end="553:37">!=</operator> <literal type="number" pos:start="553:39" pos:end="553:39">0</literal></expr>)</condition><block type="pseudo" pos:start="555:21" pos:end="555:36"><block_content pos:start="555:21" pos:end="555:36">

                    <goto pos:start="555:21" pos:end="555:36">goto <name pos:start="555:26" pos:end="555:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="557:17" pos:end="557:66"><expr pos:start="557:17" pos:end="557:65"><name pos:start="557:17" pos:end="557:28">field_length</name> <operator pos:start="557:30" pos:end="557:30">=</operator> <call pos:start="557:32" pos:end="557:58"><name pos:start="557:32" pos:end="557:44">cpu_ldub_code</name><argument_list pos:start="557:45" pos:end="557:58">(<argument pos:start="557:46" pos:end="557:48"><expr pos:start="557:46" pos:end="557:48"><name pos:start="557:46" pos:end="557:48">env</name></expr></argument>, <argument pos:start="557:51" pos:end="557:57"><expr pos:start="557:51" pos:end="557:57"><name pos:start="557:51" pos:end="557:55"><name pos:start="557:51" pos:end="557:51">s</name><operator pos:start="557:52" pos:end="557:53">-&gt;</operator><name pos:start="557:54" pos:end="557:55">pc</name></name><operator pos:start="557:56" pos:end="557:57">++</operator></expr></argument>)</argument_list></call> <operator pos:start="557:60" pos:end="557:60">&amp;</operator> <literal type="number" pos:start="557:62" pos:end="557:65">0x3F</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="559:17" pos:end="559:63"><expr pos:start="559:17" pos:end="559:62"><name pos:start="559:17" pos:end="559:25">bit_index</name> <operator pos:start="559:27" pos:end="559:27">=</operator> <call pos:start="559:29" pos:end="559:55"><name pos:start="559:29" pos:end="559:41">cpu_ldub_code</name><argument_list pos:start="559:42" pos:end="559:55">(<argument pos:start="559:43" pos:end="559:45"><expr pos:start="559:43" pos:end="559:45"><name pos:start="559:43" pos:end="559:45">env</name></expr></argument>, <argument pos:start="559:48" pos:end="559:54"><expr pos:start="559:48" pos:end="559:54"><name pos:start="559:48" pos:end="559:52"><name pos:start="559:48" pos:end="559:48">s</name><operator pos:start="559:49" pos:end="559:50">-&gt;</operator><name pos:start="559:51" pos:end="559:52">pc</name></name><operator pos:start="559:53" pos:end="559:54">++</operator></expr></argument>)</argument_list></call> <operator pos:start="559:57" pos:end="559:57">&amp;</operator> <literal type="number" pos:start="559:59" pos:end="559:62">0x3F</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="561:17" pos:end="563:57"><expr pos:start="561:17" pos:end="563:56"><call pos:start="561:17" pos:end="563:56"><name pos:start="561:17" pos:end="561:32">tcg_gen_addi_ptr</name><argument_list pos:start="561:33" pos:end="563:56">(<argument pos:start="561:34" pos:end="561:41"><expr pos:start="561:34" pos:end="561:41"><name pos:start="561:34" pos:end="561:41">cpu_ptr0</name></expr></argument>, <argument pos:start="561:44" pos:end="561:50"><expr pos:start="561:44" pos:end="561:50"><name pos:start="561:44" pos:end="561:50">cpu_env</name></expr></argument>,

                    <argument pos:start="563:21" pos:end="563:55"><expr pos:start="563:21" pos:end="563:55"><call pos:start="563:21" pos:end="563:55"><name pos:start="563:21" pos:end="563:28">offsetof</name><argument_list pos:start="563:29" pos:end="563:55">(<argument pos:start="563:30" pos:end="563:40"><expr pos:start="563:30" pos:end="563:40"><name pos:start="563:30" pos:end="563:40">CPUX86State</name></expr></argument>,<argument pos:start="563:42" pos:end="563:54"><expr pos:start="563:42" pos:end="563:54"><name pos:start="563:42" pos:end="563:54"><name pos:start="563:42" pos:end="563:49">xmm_regs</name><index pos:start="563:50" pos:end="563:54">[<expr pos:start="563:51" pos:end="563:53"><name pos:start="563:51" pos:end="563:53">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="565:17" pos:end="579:70"><if pos:start="565:17" pos:end="571:68">if <condition pos:start="565:20" pos:end="565:28">(<expr pos:start="565:21" pos:end="565:27"><name pos:start="565:21" pos:end="565:22">b1</name> <operator pos:start="565:24" pos:end="565:25">==</operator> <literal type="number" pos:start="565:27" pos:end="565:27">1</literal></expr>)</condition><block type="pseudo" pos:start="567:21" pos:end="571:68"><block_content pos:start="567:21" pos:end="571:68">

                    <expr_stmt pos:start="567:21" pos:end="571:68"><expr pos:start="567:21" pos:end="571:67"><call pos:start="567:21" pos:end="571:67"><name pos:start="567:21" pos:end="567:38">gen_helper_extrq_i</name><argument_list pos:start="567:39" pos:end="571:67">(<argument pos:start="567:40" pos:end="567:46"><expr pos:start="567:40" pos:end="567:46"><name pos:start="567:40" pos:end="567:46">cpu_env</name></expr></argument>, <argument pos:start="567:49" pos:end="567:56"><expr pos:start="567:49" pos:end="567:56"><name pos:start="567:49" pos:end="567:56">cpu_ptr0</name></expr></argument>,

                                       <argument pos:start="569:40" pos:end="569:63"><expr pos:start="569:40" pos:end="569:63"><call pos:start="569:40" pos:end="569:63"><name pos:start="569:40" pos:end="569:52">tcg_const_i32</name><argument_list pos:start="569:53" pos:end="569:63">(<argument pos:start="569:54" pos:end="569:62"><expr pos:start="569:54" pos:end="569:62"><name pos:start="569:54" pos:end="569:62">bit_index</name></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="571:40" pos:end="571:66"><expr pos:start="571:40" pos:end="571:66"><call pos:start="571:40" pos:end="571:66"><name pos:start="571:40" pos:end="571:52">tcg_const_i32</name><argument_list pos:start="571:53" pos:end="571:66">(<argument pos:start="571:54" pos:end="571:65"><expr pos:start="571:54" pos:end="571:65"><name pos:start="571:54" pos:end="571:65">field_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="573:17" pos:end="579:70">else<block type="pseudo" pos:start="575:21" pos:end="579:70"><block_content pos:start="575:21" pos:end="579:70">

                    <expr_stmt pos:start="575:21" pos:end="579:70"><expr pos:start="575:21" pos:end="579:69"><call pos:start="575:21" pos:end="579:69"><name pos:start="575:21" pos:end="575:40">gen_helper_insertq_i</name><argument_list pos:start="575:41" pos:end="579:69">(<argument pos:start="575:42" pos:end="575:48"><expr pos:start="575:42" pos:end="575:48"><name pos:start="575:42" pos:end="575:48">cpu_env</name></expr></argument>, <argument pos:start="575:51" pos:end="575:58"><expr pos:start="575:51" pos:end="575:58"><name pos:start="575:51" pos:end="575:58">cpu_ptr0</name></expr></argument>,

                                         <argument pos:start="577:42" pos:end="577:65"><expr pos:start="577:42" pos:end="577:65"><call pos:start="577:42" pos:end="577:65"><name pos:start="577:42" pos:end="577:54">tcg_const_i32</name><argument_list pos:start="577:55" pos:end="577:65">(<argument pos:start="577:56" pos:end="577:64"><expr pos:start="577:56" pos:end="577:64"><name pos:start="577:56" pos:end="577:64">bit_index</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="579:42" pos:end="579:68"><expr pos:start="579:42" pos:end="579:68"><call pos:start="579:42" pos:end="579:68"><name pos:start="579:42" pos:end="579:54">tcg_const_i32</name><argument_list pos:start="579:55" pos:end="579:68">(<argument pos:start="579:56" pos:end="579:67"><expr pos:start="579:56" pos:end="579:67"><name pos:start="579:56" pos:end="579:67">field_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block>

            <break pos:start="583:13" pos:end="583:18">break;</break>

        <case pos:start="585:9" pos:end="588:0">case <expr pos:start="585:14" pos:end="585:17"><literal type="number" pos:start="585:14" pos:end="585:17">0x7e</literal></expr>:</case> <comment type="block" pos:start="585:20" pos:end="585:36">/* movd ea, mm */</comment>

<cpp:ifdef pos:start="587:1" pos:end="587:20">#<cpp:directive pos:start="587:2" pos:end="587:6">ifdef</cpp:directive> <name pos:start="587:8" pos:end="587:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="589:13" pos:end="609:13"><if pos:start="589:13" pos:end="597:13">if <condition pos:start="589:16" pos:end="589:34">(<expr pos:start="589:17" pos:end="589:33"><name pos:start="589:17" pos:end="589:24"><name pos:start="589:17" pos:end="589:17">s</name><operator pos:start="589:18" pos:end="589:19">-&gt;</operator><name pos:start="589:20" pos:end="589:24">dflag</name></name> <operator pos:start="589:26" pos:end="589:27">==</operator> <name pos:start="589:29" pos:end="589:33">MO_64</name></expr>)</condition> <block pos:start="589:36" pos:end="597:13">{<block_content pos:start="591:17" pos:end="595:65">

                <expr_stmt pos:start="591:17" pos:end="593:70"><expr pos:start="591:17" pos:end="593:69"><call pos:start="591:17" pos:end="593:69"><name pos:start="591:17" pos:end="591:30">tcg_gen_ld_i64</name><argument_list pos:start="591:31" pos:end="593:69">(<argument pos:start="591:32" pos:end="591:37"><expr pos:start="591:32" pos:end="591:37"><name pos:start="591:32" pos:end="591:37">cpu_T0</name></expr></argument>, <argument pos:start="591:40" pos:end="591:46"><expr pos:start="591:40" pos:end="591:46"><name pos:start="591:40" pos:end="591:46">cpu_env</name></expr></argument>,

                               <argument pos:start="593:32" pos:end="593:68"><expr pos:start="593:32" pos:end="593:68"><call pos:start="593:32" pos:end="593:68"><name pos:start="593:32" pos:end="593:39">offsetof</name><argument_list pos:start="593:40" pos:end="593:68">(<argument pos:start="593:41" pos:end="593:51"><expr pos:start="593:41" pos:end="593:51"><name pos:start="593:41" pos:end="593:51">CPUX86State</name></expr></argument>,<argument pos:start="593:53" pos:end="593:67"><expr pos:start="593:53" pos:end="593:67"><name pos:start="593:53" pos:end="593:63"><name pos:start="593:53" pos:end="593:58">fpregs</name><index pos:start="593:59" pos:end="593:63">[<expr pos:start="593:60" pos:end="593:62"><name pos:start="593:60" pos:end="593:62">reg</name></expr>]</index></name><operator pos:start="593:64" pos:end="593:64">.</operator><name pos:start="593:65" pos:end="593:67">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="595:17" pos:end="595:65"><expr pos:start="595:17" pos:end="595:64"><call pos:start="595:17" pos:end="595:64"><name pos:start="595:17" pos:end="595:30">gen_ldst_modrm</name><argument_list pos:start="595:31" pos:end="595:64">(<argument pos:start="595:32" pos:end="595:34"><expr pos:start="595:32" pos:end="595:34"><name pos:start="595:32" pos:end="595:34">env</name></expr></argument>, <argument pos:start="595:37" pos:end="595:37"><expr pos:start="595:37" pos:end="595:37"><name pos:start="595:37" pos:end="595:37">s</name></expr></argument>, <argument pos:start="595:40" pos:end="595:44"><expr pos:start="595:40" pos:end="595:44"><name pos:start="595:40" pos:end="595:44">modrm</name></expr></argument>, <argument pos:start="595:47" pos:end="595:51"><expr pos:start="595:47" pos:end="595:51"><name pos:start="595:47" pos:end="595:51">MO_64</name></expr></argument>, <argument pos:start="595:54" pos:end="595:60"><expr pos:start="595:54" pos:end="595:60"><name pos:start="595:54" pos:end="595:60">OR_TMP0</name></expr></argument>, <argument pos:start="595:63" pos:end="595:63"><expr pos:start="595:63" pos:end="595:63"><literal type="number" pos:start="595:63" pos:end="595:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="597:15" pos:end="609:13">else

<cpp:endif pos:start="599:1" pos:end="599:6">#<cpp:directive pos:start="599:2" pos:end="599:6">endif</cpp:directive></cpp:endif>

            <block pos:start="601:13" pos:end="609:13">{<block_content pos:start="603:17" pos:end="607:65">

                <expr_stmt pos:start="603:17" pos:end="605:81"><expr pos:start="603:17" pos:end="605:80"><call pos:start="603:17" pos:end="605:80"><name pos:start="603:17" pos:end="603:32">tcg_gen_ld32u_tl</name><argument_list pos:start="603:33" pos:end="605:80">(<argument pos:start="603:34" pos:end="603:39"><expr pos:start="603:34" pos:end="603:39"><name pos:start="603:34" pos:end="603:39">cpu_T0</name></expr></argument>, <argument pos:start="603:42" pos:end="603:48"><expr pos:start="603:42" pos:end="603:48"><name pos:start="603:42" pos:end="603:48">cpu_env</name></expr></argument>,

                                 <argument pos:start="605:34" pos:end="605:79"><expr pos:start="605:34" pos:end="605:79"><call pos:start="605:34" pos:end="605:79"><name pos:start="605:34" pos:end="605:41">offsetof</name><argument_list pos:start="605:42" pos:end="605:79">(<argument pos:start="605:43" pos:end="605:53"><expr pos:start="605:43" pos:end="605:53"><name pos:start="605:43" pos:end="605:53">CPUX86State</name></expr></argument>,<argument pos:start="605:55" pos:end="605:78"><expr pos:start="605:55" pos:end="605:78"><name pos:start="605:55" pos:end="605:65"><name pos:start="605:55" pos:end="605:60">fpregs</name><index pos:start="605:61" pos:end="605:65">[<expr pos:start="605:62" pos:end="605:64"><name pos:start="605:62" pos:end="605:64">reg</name></expr>]</index></name><operator pos:start="605:66" pos:end="605:66">.</operator><call pos:start="605:67" pos:end="605:78"><name pos:start="605:67" pos:end="605:75"><name pos:start="605:67" pos:end="605:69">mmx</name><operator pos:start="605:70" pos:end="605:70">.</operator><name pos:start="605:71" pos:end="605:75">MMX_L</name></name><argument_list pos:start="605:76" pos:end="605:78">(<argument pos:start="605:77" pos:end="605:77"><expr pos:start="605:77" pos:end="605:77"><literal type="number" pos:start="605:77" pos:end="605:77">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="607:17" pos:end="607:65"><expr pos:start="607:17" pos:end="607:64"><call pos:start="607:17" pos:end="607:64"><name pos:start="607:17" pos:end="607:30">gen_ldst_modrm</name><argument_list pos:start="607:31" pos:end="607:64">(<argument pos:start="607:32" pos:end="607:34"><expr pos:start="607:32" pos:end="607:34"><name pos:start="607:32" pos:end="607:34">env</name></expr></argument>, <argument pos:start="607:37" pos:end="607:37"><expr pos:start="607:37" pos:end="607:37"><name pos:start="607:37" pos:end="607:37">s</name></expr></argument>, <argument pos:start="607:40" pos:end="607:44"><expr pos:start="607:40" pos:end="607:44"><name pos:start="607:40" pos:end="607:44">modrm</name></expr></argument>, <argument pos:start="607:47" pos:end="607:51"><expr pos:start="607:47" pos:end="607:51"><name pos:start="607:47" pos:end="607:51">MO_32</name></expr></argument>, <argument pos:start="607:54" pos:end="607:60"><expr pos:start="607:54" pos:end="607:60"><name pos:start="607:54" pos:end="607:60">OR_TMP0</name></expr></argument>, <argument pos:start="607:63" pos:end="607:63"><expr pos:start="607:63" pos:end="607:63"><literal type="number" pos:start="607:63" pos:end="607:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="611:13" pos:end="611:18">break;</break>

        <case pos:start="613:9" pos:end="616:0">case <expr pos:start="613:14" pos:end="613:18"><literal type="number" pos:start="613:14" pos:end="613:18">0x17e</literal></expr>:</case> <comment type="block" pos:start="613:21" pos:end="613:38">/* movd ea, xmm */</comment>

<cpp:ifdef pos:start="615:1" pos:end="615:20">#<cpp:directive pos:start="615:2" pos:end="615:6">ifdef</cpp:directive> <name pos:start="615:8" pos:end="615:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="617:13" pos:end="637:13"><if pos:start="617:13" pos:end="625:13">if <condition pos:start="617:16" pos:end="617:34">(<expr pos:start="617:17" pos:end="617:33"><name pos:start="617:17" pos:end="617:24"><name pos:start="617:17" pos:end="617:17">s</name><operator pos:start="617:18" pos:end="617:19">-&gt;</operator><name pos:start="617:20" pos:end="617:24">dflag</name></name> <operator pos:start="617:26" pos:end="617:27">==</operator> <name pos:start="617:29" pos:end="617:33">MO_64</name></expr>)</condition> <block pos:start="617:36" pos:end="625:13">{<block_content pos:start="619:17" pos:end="623:65">

                <expr_stmt pos:start="619:17" pos:end="621:77"><expr pos:start="619:17" pos:end="621:76"><call pos:start="619:17" pos:end="621:76"><name pos:start="619:17" pos:end="619:30">tcg_gen_ld_i64</name><argument_list pos:start="619:31" pos:end="621:76">(<argument pos:start="619:32" pos:end="619:37"><expr pos:start="619:32" pos:end="619:37"><name pos:start="619:32" pos:end="619:37">cpu_T0</name></expr></argument>, <argument pos:start="619:40" pos:end="619:46"><expr pos:start="619:40" pos:end="619:46"><name pos:start="619:40" pos:end="619:46">cpu_env</name></expr></argument>,

                               <argument pos:start="621:32" pos:end="621:75"><expr pos:start="621:32" pos:end="621:75"><call pos:start="621:32" pos:end="621:75"><name pos:start="621:32" pos:end="621:39">offsetof</name><argument_list pos:start="621:40" pos:end="621:75">(<argument pos:start="621:41" pos:end="621:51"><expr pos:start="621:41" pos:end="621:51"><name pos:start="621:41" pos:end="621:51">CPUX86State</name></expr></argument>,<argument pos:start="621:53" pos:end="621:74"><expr pos:start="621:53" pos:end="621:74"><name pos:start="621:53" pos:end="621:65"><name pos:start="621:53" pos:end="621:60">xmm_regs</name><index pos:start="621:61" pos:end="621:65">[<expr pos:start="621:62" pos:end="621:64"><name pos:start="621:62" pos:end="621:64">reg</name></expr>]</index></name><operator pos:start="621:66" pos:end="621:66">.</operator><call pos:start="621:67" pos:end="621:74"><name pos:start="621:67" pos:end="621:71">ZMM_Q</name><argument_list pos:start="621:72" pos:end="621:74">(<argument pos:start="621:73" pos:end="621:73"><expr pos:start="621:73" pos:end="621:73"><literal type="number" pos:start="621:73" pos:end="621:73">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="623:17" pos:end="623:65"><expr pos:start="623:17" pos:end="623:64"><call pos:start="623:17" pos:end="623:64"><name pos:start="623:17" pos:end="623:30">gen_ldst_modrm</name><argument_list pos:start="623:31" pos:end="623:64">(<argument pos:start="623:32" pos:end="623:34"><expr pos:start="623:32" pos:end="623:34"><name pos:start="623:32" pos:end="623:34">env</name></expr></argument>, <argument pos:start="623:37" pos:end="623:37"><expr pos:start="623:37" pos:end="623:37"><name pos:start="623:37" pos:end="623:37">s</name></expr></argument>, <argument pos:start="623:40" pos:end="623:44"><expr pos:start="623:40" pos:end="623:44"><name pos:start="623:40" pos:end="623:44">modrm</name></expr></argument>, <argument pos:start="623:47" pos:end="623:51"><expr pos:start="623:47" pos:end="623:51"><name pos:start="623:47" pos:end="623:51">MO_64</name></expr></argument>, <argument pos:start="623:54" pos:end="623:60"><expr pos:start="623:54" pos:end="623:60"><name pos:start="623:54" pos:end="623:60">OR_TMP0</name></expr></argument>, <argument pos:start="623:63" pos:end="623:63"><expr pos:start="623:63" pos:end="623:63"><literal type="number" pos:start="623:63" pos:end="623:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="625:15" pos:end="637:13">else

<cpp:endif pos:start="627:1" pos:end="627:6">#<cpp:directive pos:start="627:2" pos:end="627:6">endif</cpp:directive></cpp:endif>

            <block pos:start="629:13" pos:end="637:13">{<block_content pos:start="631:17" pos:end="635:65">

                <expr_stmt pos:start="631:17" pos:end="633:79"><expr pos:start="631:17" pos:end="633:78"><call pos:start="631:17" pos:end="633:78"><name pos:start="631:17" pos:end="631:32">tcg_gen_ld32u_tl</name><argument_list pos:start="631:33" pos:end="633:78">(<argument pos:start="631:34" pos:end="631:39"><expr pos:start="631:34" pos:end="631:39"><name pos:start="631:34" pos:end="631:39">cpu_T0</name></expr></argument>, <argument pos:start="631:42" pos:end="631:48"><expr pos:start="631:42" pos:end="631:48"><name pos:start="631:42" pos:end="631:48">cpu_env</name></expr></argument>,

                                 <argument pos:start="633:34" pos:end="633:77"><expr pos:start="633:34" pos:end="633:77"><call pos:start="633:34" pos:end="633:77"><name pos:start="633:34" pos:end="633:41">offsetof</name><argument_list pos:start="633:42" pos:end="633:77">(<argument pos:start="633:43" pos:end="633:53"><expr pos:start="633:43" pos:end="633:53"><name pos:start="633:43" pos:end="633:53">CPUX86State</name></expr></argument>,<argument pos:start="633:55" pos:end="633:76"><expr pos:start="633:55" pos:end="633:76"><name pos:start="633:55" pos:end="633:67"><name pos:start="633:55" pos:end="633:62">xmm_regs</name><index pos:start="633:63" pos:end="633:67">[<expr pos:start="633:64" pos:end="633:66"><name pos:start="633:64" pos:end="633:66">reg</name></expr>]</index></name><operator pos:start="633:68" pos:end="633:68">.</operator><call pos:start="633:69" pos:end="633:76"><name pos:start="633:69" pos:end="633:73">ZMM_L</name><argument_list pos:start="633:74" pos:end="633:76">(<argument pos:start="633:75" pos:end="633:75"><expr pos:start="633:75" pos:end="633:75"><literal type="number" pos:start="633:75" pos:end="633:75">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="635:17" pos:end="635:65"><expr pos:start="635:17" pos:end="635:64"><call pos:start="635:17" pos:end="635:64"><name pos:start="635:17" pos:end="635:30">gen_ldst_modrm</name><argument_list pos:start="635:31" pos:end="635:64">(<argument pos:start="635:32" pos:end="635:34"><expr pos:start="635:32" pos:end="635:34"><name pos:start="635:32" pos:end="635:34">env</name></expr></argument>, <argument pos:start="635:37" pos:end="635:37"><expr pos:start="635:37" pos:end="635:37"><name pos:start="635:37" pos:end="635:37">s</name></expr></argument>, <argument pos:start="635:40" pos:end="635:44"><expr pos:start="635:40" pos:end="635:44"><name pos:start="635:40" pos:end="635:44">modrm</name></expr></argument>, <argument pos:start="635:47" pos:end="635:51"><expr pos:start="635:47" pos:end="635:51"><name pos:start="635:47" pos:end="635:51">MO_32</name></expr></argument>, <argument pos:start="635:54" pos:end="635:60"><expr pos:start="635:54" pos:end="635:60"><name pos:start="635:54" pos:end="635:60">OR_TMP0</name></expr></argument>, <argument pos:start="635:63" pos:end="635:63"><expr pos:start="635:63" pos:end="635:63"><literal type="number" pos:start="635:63" pos:end="635:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="639:13" pos:end="639:18">break;</break>

        <case pos:start="641:9" pos:end="641:19">case <expr pos:start="641:14" pos:end="641:18"><literal type="number" pos:start="641:14" pos:end="641:18">0x27e</literal></expr>:</case> <comment type="block" pos:start="641:21" pos:end="641:38">/* movq xmm, ea */</comment>

            <if_stmt pos:start="643:13" pos:end="659:13"><if pos:start="643:13" pos:end="651:13">if <condition pos:start="643:16" pos:end="643:25">(<expr pos:start="643:17" pos:end="643:24"><name pos:start="643:17" pos:end="643:19">mod</name> <operator pos:start="643:21" pos:end="643:22">!=</operator> <literal type="number" pos:start="643:24" pos:end="643:24">3</literal></expr>)</condition> <block pos:start="643:27" pos:end="651:13">{<block_content pos:start="645:17" pos:end="649:68">

                <expr_stmt pos:start="645:17" pos:end="645:45"><expr pos:start="645:17" pos:end="645:44"><call pos:start="645:17" pos:end="645:44"><name pos:start="645:17" pos:end="645:29">gen_lea_modrm</name><argument_list pos:start="645:30" pos:end="645:44">(<argument pos:start="645:31" pos:end="645:33"><expr pos:start="645:31" pos:end="645:33"><name pos:start="645:31" pos:end="645:33">env</name></expr></argument>, <argument pos:start="645:36" pos:end="645:36"><expr pos:start="645:36" pos:end="645:36"><name pos:start="645:36" pos:end="645:36">s</name></expr></argument>, <argument pos:start="645:39" pos:end="645:43"><expr pos:start="645:39" pos:end="645:43"><name pos:start="645:39" pos:end="645:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="647:17" pos:end="649:68"><expr pos:start="647:17" pos:end="649:67"><call pos:start="647:17" pos:end="649:67"><name pos:start="647:17" pos:end="647:30">gen_ldq_env_A0</name><argument_list pos:start="647:31" pos:end="649:67">(<argument pos:start="647:32" pos:end="647:32"><expr pos:start="647:32" pos:end="647:32"><name pos:start="647:32" pos:end="647:32">s</name></expr></argument>, <argument pos:start="647:35" pos:end="649:66"><expr pos:start="647:35" pos:end="649:66"><call pos:start="647:35" pos:end="649:66"><name pos:start="647:35" pos:end="647:42">offsetof</name><argument_list pos:start="647:43" pos:end="649:66">(<argument pos:start="647:44" pos:end="647:54"><expr pos:start="647:44" pos:end="647:54"><name pos:start="647:44" pos:end="647:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="649:44" pos:end="649:65"><expr pos:start="649:44" pos:end="649:65"><name pos:start="649:44" pos:end="649:56"><name pos:start="649:44" pos:end="649:51">xmm_regs</name><index pos:start="649:52" pos:end="649:56">[<expr pos:start="649:53" pos:end="649:55"><name pos:start="649:53" pos:end="649:55">reg</name></expr>]</index></name><operator pos:start="649:57" pos:end="649:57">.</operator><call pos:start="649:58" pos:end="649:65"><name pos:start="649:58" pos:end="649:62">ZMM_Q</name><argument_list pos:start="649:63" pos:end="649:65">(<argument pos:start="649:64" pos:end="649:64"><expr pos:start="649:64" pos:end="649:64"><literal type="number" pos:start="649:64" pos:end="649:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="651:15" pos:end="659:13">else <block pos:start="651:20" pos:end="659:13">{<block_content pos:start="653:17" pos:end="657:73">

                <expr_stmt pos:start="653:17" pos:end="653:44"><expr pos:start="653:17" pos:end="653:43"><name pos:start="653:17" pos:end="653:18">rm</name> <operator pos:start="653:20" pos:end="653:20">=</operator> <operator pos:start="653:22" pos:end="653:22">(</operator><name pos:start="653:23" pos:end="653:27">modrm</name> <operator pos:start="653:29" pos:end="653:29">&amp;</operator> <literal type="number" pos:start="653:31" pos:end="653:31">7</literal><operator pos:start="653:32" pos:end="653:32">)</operator> <operator pos:start="653:34" pos:end="653:34">|</operator> <call pos:start="653:36" pos:end="653:43"><name pos:start="653:36" pos:end="653:40">REX_B</name><argument_list pos:start="653:41" pos:end="653:43">(<argument pos:start="653:42" pos:end="653:42"><expr pos:start="653:42" pos:end="653:42"><name pos:start="653:42" pos:end="653:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="655:17" pos:end="657:73"><expr pos:start="655:17" pos:end="657:72"><call pos:start="655:17" pos:end="657:72"><name pos:start="655:17" pos:end="655:27">gen_op_movq</name><argument_list pos:start="655:28" pos:end="657:72">(<argument pos:start="655:29" pos:end="655:72"><expr pos:start="655:29" pos:end="655:72"><call pos:start="655:29" pos:end="655:72"><name pos:start="655:29" pos:end="655:36">offsetof</name><argument_list pos:start="655:37" pos:end="655:72">(<argument pos:start="655:38" pos:end="655:48"><expr pos:start="655:38" pos:end="655:48"><name pos:start="655:38" pos:end="655:48">CPUX86State</name></expr></argument>,<argument pos:start="655:50" pos:end="655:71"><expr pos:start="655:50" pos:end="655:71"><name pos:start="655:50" pos:end="655:62"><name pos:start="655:50" pos:end="655:57">xmm_regs</name><index pos:start="655:58" pos:end="655:62">[<expr pos:start="655:59" pos:end="655:61"><name pos:start="655:59" pos:end="655:61">reg</name></expr>]</index></name><operator pos:start="655:63" pos:end="655:63">.</operator><call pos:start="655:64" pos:end="655:71"><name pos:start="655:64" pos:end="655:68">ZMM_Q</name><argument_list pos:start="655:69" pos:end="655:71">(<argument pos:start="655:70" pos:end="655:70"><expr pos:start="655:70" pos:end="655:70"><literal type="number" pos:start="655:70" pos:end="655:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="657:29" pos:end="657:71"><expr pos:start="657:29" pos:end="657:71"><call pos:start="657:29" pos:end="657:71"><name pos:start="657:29" pos:end="657:36">offsetof</name><argument_list pos:start="657:37" pos:end="657:71">(<argument pos:start="657:38" pos:end="657:48"><expr pos:start="657:38" pos:end="657:48"><name pos:start="657:38" pos:end="657:48">CPUX86State</name></expr></argument>,<argument pos:start="657:50" pos:end="657:70"><expr pos:start="657:50" pos:end="657:70"><name pos:start="657:50" pos:end="657:61"><name pos:start="657:50" pos:end="657:57">xmm_regs</name><index pos:start="657:58" pos:end="657:61">[<expr pos:start="657:59" pos:end="657:60"><name pos:start="657:59" pos:end="657:60">rm</name></expr>]</index></name><operator pos:start="657:62" pos:end="657:62">.</operator><call pos:start="657:63" pos:end="657:70"><name pos:start="657:63" pos:end="657:67">ZMM_Q</name><argument_list pos:start="657:68" pos:end="657:70">(<argument pos:start="657:69" pos:end="657:69"><expr pos:start="657:69" pos:end="657:69"><literal type="number" pos:start="657:69" pos:end="657:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="661:13" pos:end="661:76"><expr pos:start="661:13" pos:end="661:75"><call pos:start="661:13" pos:end="661:75"><name pos:start="661:13" pos:end="661:29">gen_op_movq_env_0</name><argument_list pos:start="661:30" pos:end="661:75">(<argument pos:start="661:31" pos:end="661:74"><expr pos:start="661:31" pos:end="661:74"><call pos:start="661:31" pos:end="661:74"><name pos:start="661:31" pos:end="661:38">offsetof</name><argument_list pos:start="661:39" pos:end="661:74">(<argument pos:start="661:40" pos:end="661:50"><expr pos:start="661:40" pos:end="661:50"><name pos:start="661:40" pos:end="661:50">CPUX86State</name></expr></argument>,<argument pos:start="661:52" pos:end="661:73"><expr pos:start="661:52" pos:end="661:73"><name pos:start="661:52" pos:end="661:64"><name pos:start="661:52" pos:end="661:59">xmm_regs</name><index pos:start="661:60" pos:end="661:64">[<expr pos:start="661:61" pos:end="661:63"><name pos:start="661:61" pos:end="661:63">reg</name></expr>]</index></name><operator pos:start="661:65" pos:end="661:65">.</operator><call pos:start="661:66" pos:end="661:73"><name pos:start="661:66" pos:end="661:70">ZMM_Q</name><argument_list pos:start="661:71" pos:end="661:73">(<argument pos:start="661:72" pos:end="661:72"><expr pos:start="661:72" pos:end="661:72"><literal type="number" pos:start="661:72" pos:end="661:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="663:13" pos:end="663:18">break;</break>

        <case pos:start="665:9" pos:end="665:18">case <expr pos:start="665:14" pos:end="665:17"><literal type="number" pos:start="665:14" pos:end="665:17">0x7f</literal></expr>:</case> <comment type="block" pos:start="665:20" pos:end="665:36">/* movq ea, mm */</comment>

            <if_stmt pos:start="667:13" pos:end="681:13"><if pos:start="667:13" pos:end="673:13">if <condition pos:start="667:16" pos:end="667:25">(<expr pos:start="667:17" pos:end="667:24"><name pos:start="667:17" pos:end="667:19">mod</name> <operator pos:start="667:21" pos:end="667:22">!=</operator> <literal type="number" pos:start="667:24" pos:end="667:24">3</literal></expr>)</condition> <block pos:start="667:27" pos:end="673:13">{<block_content pos:start="669:17" pos:end="671:74">

                <expr_stmt pos:start="669:17" pos:end="669:45"><expr pos:start="669:17" pos:end="669:44"><call pos:start="669:17" pos:end="669:44"><name pos:start="669:17" pos:end="669:29">gen_lea_modrm</name><argument_list pos:start="669:30" pos:end="669:44">(<argument pos:start="669:31" pos:end="669:33"><expr pos:start="669:31" pos:end="669:33"><name pos:start="669:31" pos:end="669:33">env</name></expr></argument>, <argument pos:start="669:36" pos:end="669:36"><expr pos:start="669:36" pos:end="669:36"><name pos:start="669:36" pos:end="669:36">s</name></expr></argument>, <argument pos:start="669:39" pos:end="669:43"><expr pos:start="669:39" pos:end="669:43"><name pos:start="669:39" pos:end="669:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="671:17" pos:end="671:74"><expr pos:start="671:17" pos:end="671:73"><call pos:start="671:17" pos:end="671:73"><name pos:start="671:17" pos:end="671:30">gen_stq_env_A0</name><argument_list pos:start="671:31" pos:end="671:73">(<argument pos:start="671:32" pos:end="671:32"><expr pos:start="671:32" pos:end="671:32"><name pos:start="671:32" pos:end="671:32">s</name></expr></argument>, <argument pos:start="671:35" pos:end="671:72"><expr pos:start="671:35" pos:end="671:72"><call pos:start="671:35" pos:end="671:72"><name pos:start="671:35" pos:end="671:42">offsetof</name><argument_list pos:start="671:43" pos:end="671:72">(<argument pos:start="671:44" pos:end="671:54"><expr pos:start="671:44" pos:end="671:54"><name pos:start="671:44" pos:end="671:54">CPUX86State</name></expr></argument>, <argument pos:start="671:57" pos:end="671:71"><expr pos:start="671:57" pos:end="671:71"><name pos:start="671:57" pos:end="671:67"><name pos:start="671:57" pos:end="671:62">fpregs</name><index pos:start="671:63" pos:end="671:67">[<expr pos:start="671:64" pos:end="671:66"><name pos:start="671:64" pos:end="671:66">reg</name></expr>]</index></name><operator pos:start="671:68" pos:end="671:68">.</operator><name pos:start="671:69" pos:end="671:71">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="673:15" pos:end="681:13">else <block pos:start="673:20" pos:end="681:13">{<block_content pos:start="675:17" pos:end="679:67">

                <expr_stmt pos:start="675:17" pos:end="675:33"><expr pos:start="675:17" pos:end="675:32"><name pos:start="675:17" pos:end="675:18">rm</name> <operator pos:start="675:20" pos:end="675:20">=</operator> <operator pos:start="675:22" pos:end="675:22">(</operator><name pos:start="675:23" pos:end="675:27">modrm</name> <operator pos:start="675:29" pos:end="675:29">&amp;</operator> <literal type="number" pos:start="675:31" pos:end="675:31">7</literal><operator pos:start="675:32" pos:end="675:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="677:17" pos:end="679:67"><expr pos:start="677:17" pos:end="679:66"><call pos:start="677:17" pos:end="679:66"><name pos:start="677:17" pos:end="677:27">gen_op_movq</name><argument_list pos:start="677:28" pos:end="679:66">(<argument pos:start="677:29" pos:end="677:64"><expr pos:start="677:29" pos:end="677:64"><call pos:start="677:29" pos:end="677:64"><name pos:start="677:29" pos:end="677:36">offsetof</name><argument_list pos:start="677:37" pos:end="677:64">(<argument pos:start="677:38" pos:end="677:48"><expr pos:start="677:38" pos:end="677:48"><name pos:start="677:38" pos:end="677:48">CPUX86State</name></expr></argument>,<argument pos:start="677:50" pos:end="677:63"><expr pos:start="677:50" pos:end="677:63"><name pos:start="677:50" pos:end="677:59"><name pos:start="677:50" pos:end="677:55">fpregs</name><index pos:start="677:56" pos:end="677:59">[<expr pos:start="677:57" pos:end="677:58"><name pos:start="677:57" pos:end="677:58">rm</name></expr>]</index></name><operator pos:start="677:60" pos:end="677:60">.</operator><name pos:start="677:61" pos:end="677:63">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="679:29" pos:end="679:65"><expr pos:start="679:29" pos:end="679:65"><call pos:start="679:29" pos:end="679:65"><name pos:start="679:29" pos:end="679:36">offsetof</name><argument_list pos:start="679:37" pos:end="679:65">(<argument pos:start="679:38" pos:end="679:48"><expr pos:start="679:38" pos:end="679:48"><name pos:start="679:38" pos:end="679:48">CPUX86State</name></expr></argument>,<argument pos:start="679:50" pos:end="679:64"><expr pos:start="679:50" pos:end="679:64"><name pos:start="679:50" pos:end="679:60"><name pos:start="679:50" pos:end="679:55">fpregs</name><index pos:start="679:56" pos:end="679:60">[<expr pos:start="679:57" pos:end="679:59"><name pos:start="679:57" pos:end="679:59">reg</name></expr>]</index></name><operator pos:start="679:61" pos:end="679:61">.</operator><name pos:start="679:62" pos:end="679:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="683:13" pos:end="683:18">break;</break>

        <case pos:start="685:9" pos:end="685:19">case <expr pos:start="685:14" pos:end="685:18"><literal type="number" pos:start="685:14" pos:end="685:18">0x011</literal></expr>:</case> <comment type="block" pos:start="685:21" pos:end="685:32">/* movups */</comment>

        <case pos:start="687:9" pos:end="687:19">case <expr pos:start="687:14" pos:end="687:18"><literal type="number" pos:start="687:14" pos:end="687:18">0x111</literal></expr>:</case> <comment type="block" pos:start="687:21" pos:end="687:32">/* movupd */</comment>

        <case pos:start="689:9" pos:end="689:19">case <expr pos:start="689:14" pos:end="689:18"><literal type="number" pos:start="689:14" pos:end="689:18">0x029</literal></expr>:</case> <comment type="block" pos:start="689:21" pos:end="689:32">/* movaps */</comment>

        <case pos:start="691:9" pos:end="691:19">case <expr pos:start="691:14" pos:end="691:18"><literal type="number" pos:start="691:14" pos:end="691:18">0x129</literal></expr>:</case> <comment type="block" pos:start="691:21" pos:end="691:32">/* movapd */</comment>

        <case pos:start="693:9" pos:end="693:19">case <expr pos:start="693:14" pos:end="693:18"><literal type="number" pos:start="693:14" pos:end="693:18">0x17f</literal></expr>:</case> <comment type="block" pos:start="693:21" pos:end="693:40">/* movdqa ea, xmm */</comment>

        <case pos:start="695:9" pos:end="695:19">case <expr pos:start="695:14" pos:end="695:18"><literal type="number" pos:start="695:14" pos:end="695:18">0x27f</literal></expr>:</case> <comment type="block" pos:start="695:21" pos:end="695:40">/* movdqu ea, xmm */</comment>

            <if_stmt pos:start="697:13" pos:end="711:13"><if pos:start="697:13" pos:end="703:13">if <condition pos:start="697:16" pos:end="697:25">(<expr pos:start="697:17" pos:end="697:24"><name pos:start="697:17" pos:end="697:19">mod</name> <operator pos:start="697:21" pos:end="697:22">!=</operator> <literal type="number" pos:start="697:24" pos:end="697:24">3</literal></expr>)</condition> <block pos:start="697:27" pos:end="703:13">{<block_content pos:start="699:17" pos:end="701:72">

                <expr_stmt pos:start="699:17" pos:end="699:45"><expr pos:start="699:17" pos:end="699:44"><call pos:start="699:17" pos:end="699:44"><name pos:start="699:17" pos:end="699:29">gen_lea_modrm</name><argument_list pos:start="699:30" pos:end="699:44">(<argument pos:start="699:31" pos:end="699:33"><expr pos:start="699:31" pos:end="699:33"><name pos:start="699:31" pos:end="699:33">env</name></expr></argument>, <argument pos:start="699:36" pos:end="699:36"><expr pos:start="699:36" pos:end="699:36"><name pos:start="699:36" pos:end="699:36">s</name></expr></argument>, <argument pos:start="699:39" pos:end="699:43"><expr pos:start="699:39" pos:end="699:43"><name pos:start="699:39" pos:end="699:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="701:17" pos:end="701:72"><expr pos:start="701:17" pos:end="701:71"><call pos:start="701:17" pos:end="701:71"><name pos:start="701:17" pos:end="701:30">gen_sto_env_A0</name><argument_list pos:start="701:31" pos:end="701:71">(<argument pos:start="701:32" pos:end="701:32"><expr pos:start="701:32" pos:end="701:32"><name pos:start="701:32" pos:end="701:32">s</name></expr></argument>, <argument pos:start="701:35" pos:end="701:70"><expr pos:start="701:35" pos:end="701:70"><call pos:start="701:35" pos:end="701:70"><name pos:start="701:35" pos:end="701:42">offsetof</name><argument_list pos:start="701:43" pos:end="701:70">(<argument pos:start="701:44" pos:end="701:54"><expr pos:start="701:44" pos:end="701:54"><name pos:start="701:44" pos:end="701:54">CPUX86State</name></expr></argument>, <argument pos:start="701:57" pos:end="701:69"><expr pos:start="701:57" pos:end="701:69"><name pos:start="701:57" pos:end="701:69"><name pos:start="701:57" pos:end="701:64">xmm_regs</name><index pos:start="701:65" pos:end="701:69">[<expr pos:start="701:66" pos:end="701:68"><name pos:start="701:66" pos:end="701:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="703:15" pos:end="711:13">else <block pos:start="703:20" pos:end="711:13">{<block_content pos:start="705:17" pos:end="709:65">

                <expr_stmt pos:start="705:17" pos:end="705:44"><expr pos:start="705:17" pos:end="705:43"><name pos:start="705:17" pos:end="705:18">rm</name> <operator pos:start="705:20" pos:end="705:20">=</operator> <operator pos:start="705:22" pos:end="705:22">(</operator><name pos:start="705:23" pos:end="705:27">modrm</name> <operator pos:start="705:29" pos:end="705:29">&amp;</operator> <literal type="number" pos:start="705:31" pos:end="705:31">7</literal><operator pos:start="705:32" pos:end="705:32">)</operator> <operator pos:start="705:34" pos:end="705:34">|</operator> <call pos:start="705:36" pos:end="705:43"><name pos:start="705:36" pos:end="705:40">REX_B</name><argument_list pos:start="705:41" pos:end="705:43">(<argument pos:start="705:42" pos:end="705:42"><expr pos:start="705:42" pos:end="705:42"><name pos:start="705:42" pos:end="705:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="707:17" pos:end="709:65"><expr pos:start="707:17" pos:end="709:64"><call pos:start="707:17" pos:end="709:64"><name pos:start="707:17" pos:end="707:27">gen_op_movo</name><argument_list pos:start="707:28" pos:end="709:64">(<argument pos:start="707:29" pos:end="707:62"><expr pos:start="707:29" pos:end="707:62"><call pos:start="707:29" pos:end="707:62"><name pos:start="707:29" pos:end="707:36">offsetof</name><argument_list pos:start="707:37" pos:end="707:62">(<argument pos:start="707:38" pos:end="707:48"><expr pos:start="707:38" pos:end="707:48"><name pos:start="707:38" pos:end="707:48">CPUX86State</name></expr></argument>,<argument pos:start="707:50" pos:end="707:61"><expr pos:start="707:50" pos:end="707:61"><name pos:start="707:50" pos:end="707:61"><name pos:start="707:50" pos:end="707:57">xmm_regs</name><index pos:start="707:58" pos:end="707:61">[<expr pos:start="707:59" pos:end="707:60"><name pos:start="707:59" pos:end="707:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="709:29" pos:end="709:63"><expr pos:start="709:29" pos:end="709:63"><call pos:start="709:29" pos:end="709:63"><name pos:start="709:29" pos:end="709:36">offsetof</name><argument_list pos:start="709:37" pos:end="709:63">(<argument pos:start="709:38" pos:end="709:48"><expr pos:start="709:38" pos:end="709:48"><name pos:start="709:38" pos:end="709:48">CPUX86State</name></expr></argument>,<argument pos:start="709:50" pos:end="709:62"><expr pos:start="709:50" pos:end="709:62"><name pos:start="709:50" pos:end="709:62"><name pos:start="709:50" pos:end="709:57">xmm_regs</name><index pos:start="709:58" pos:end="709:62">[<expr pos:start="709:59" pos:end="709:61"><name pos:start="709:59" pos:end="709:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="713:13" pos:end="713:18">break;</break>

        <case pos:start="715:9" pos:end="715:19">case <expr pos:start="715:14" pos:end="715:18"><literal type="number" pos:start="715:14" pos:end="715:18">0x211</literal></expr>:</case> <comment type="block" pos:start="715:21" pos:end="715:39">/* movss ea, xmm */</comment>

            <if_stmt pos:start="717:13" pos:end="733:13"><if pos:start="717:13" pos:end="725:13">if <condition pos:start="717:16" pos:end="717:25">(<expr pos:start="717:17" pos:end="717:24"><name pos:start="717:17" pos:end="717:19">mod</name> <operator pos:start="717:21" pos:end="717:22">!=</operator> <literal type="number" pos:start="717:24" pos:end="717:24">3</literal></expr>)</condition> <block pos:start="717:27" pos:end="725:13">{<block_content pos:start="719:17" pos:end="723:54">

                <expr_stmt pos:start="719:17" pos:end="719:45"><expr pos:start="719:17" pos:end="719:44"><call pos:start="719:17" pos:end="719:44"><name pos:start="719:17" pos:end="719:29">gen_lea_modrm</name><argument_list pos:start="719:30" pos:end="719:44">(<argument pos:start="719:31" pos:end="719:33"><expr pos:start="719:31" pos:end="719:33"><name pos:start="719:31" pos:end="719:33">env</name></expr></argument>, <argument pos:start="719:36" pos:end="719:36"><expr pos:start="719:36" pos:end="719:36"><name pos:start="719:36" pos:end="719:36">s</name></expr></argument>, <argument pos:start="719:39" pos:end="719:43"><expr pos:start="719:39" pos:end="719:43"><name pos:start="719:39" pos:end="719:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="721:17" pos:end="721:96"><expr pos:start="721:17" pos:end="721:95"><call pos:start="721:17" pos:end="721:95"><name pos:start="721:17" pos:end="721:32">tcg_gen_ld32u_tl</name><argument_list pos:start="721:33" pos:end="721:95">(<argument pos:start="721:34" pos:end="721:39"><expr pos:start="721:34" pos:end="721:39"><name pos:start="721:34" pos:end="721:39">cpu_T0</name></expr></argument>, <argument pos:start="721:42" pos:end="721:48"><expr pos:start="721:42" pos:end="721:48"><name pos:start="721:42" pos:end="721:48">cpu_env</name></expr></argument>, <argument pos:start="721:51" pos:end="721:94"><expr pos:start="721:51" pos:end="721:94"><call pos:start="721:51" pos:end="721:94"><name pos:start="721:51" pos:end="721:58">offsetof</name><argument_list pos:start="721:59" pos:end="721:94">(<argument pos:start="721:60" pos:end="721:70"><expr pos:start="721:60" pos:end="721:70"><name pos:start="721:60" pos:end="721:70">CPUX86State</name></expr></argument>,<argument pos:start="721:72" pos:end="721:93"><expr pos:start="721:72" pos:end="721:93"><name pos:start="721:72" pos:end="721:84"><name pos:start="721:72" pos:end="721:79">xmm_regs</name><index pos:start="721:80" pos:end="721:84">[<expr pos:start="721:81" pos:end="721:83"><name pos:start="721:81" pos:end="721:83">reg</name></expr>]</index></name><operator pos:start="721:85" pos:end="721:85">.</operator><call pos:start="721:86" pos:end="721:93"><name pos:start="721:86" pos:end="721:90">ZMM_L</name><argument_list pos:start="721:91" pos:end="721:93">(<argument pos:start="721:92" pos:end="721:92"><expr pos:start="721:92" pos:end="721:92"><literal type="number" pos:start="721:92" pos:end="721:92">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="723:17" pos:end="723:54"><expr pos:start="723:17" pos:end="723:53"><call pos:start="723:17" pos:end="723:53"><name pos:start="723:17" pos:end="723:27">gen_op_st_v</name><argument_list pos:start="723:28" pos:end="723:53">(<argument pos:start="723:29" pos:end="723:29"><expr pos:start="723:29" pos:end="723:29"><name pos:start="723:29" pos:end="723:29">s</name></expr></argument>, <argument pos:start="723:32" pos:end="723:36"><expr pos:start="723:32" pos:end="723:36"><name pos:start="723:32" pos:end="723:36">MO_32</name></expr></argument>, <argument pos:start="723:39" pos:end="723:44"><expr pos:start="723:39" pos:end="723:44"><name pos:start="723:39" pos:end="723:44">cpu_T0</name></expr></argument>, <argument pos:start="723:47" pos:end="723:52"><expr pos:start="723:47" pos:end="723:52"><name pos:start="723:47" pos:end="723:52">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="725:15" pos:end="733:13">else <block pos:start="725:20" pos:end="733:13">{<block_content pos:start="727:17" pos:end="731:74">

                <expr_stmt pos:start="727:17" pos:end="727:44"><expr pos:start="727:17" pos:end="727:43"><name pos:start="727:17" pos:end="727:18">rm</name> <operator pos:start="727:20" pos:end="727:20">=</operator> <operator pos:start="727:22" pos:end="727:22">(</operator><name pos:start="727:23" pos:end="727:27">modrm</name> <operator pos:start="727:29" pos:end="727:29">&amp;</operator> <literal type="number" pos:start="727:31" pos:end="727:31">7</literal><operator pos:start="727:32" pos:end="727:32">)</operator> <operator pos:start="727:34" pos:end="727:34">|</operator> <call pos:start="727:36" pos:end="727:43"><name pos:start="727:36" pos:end="727:40">REX_B</name><argument_list pos:start="727:41" pos:end="727:43">(<argument pos:start="727:42" pos:end="727:42"><expr pos:start="727:42" pos:end="727:42"><name pos:start="727:42" pos:end="727:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="729:17" pos:end="731:74"><expr pos:start="729:17" pos:end="731:73"><call pos:start="729:17" pos:end="731:73"><name pos:start="729:17" pos:end="729:27">gen_op_movl</name><argument_list pos:start="729:28" pos:end="731:73">(<argument pos:start="729:29" pos:end="729:71"><expr pos:start="729:29" pos:end="729:71"><call pos:start="729:29" pos:end="729:71"><name pos:start="729:29" pos:end="729:36">offsetof</name><argument_list pos:start="729:37" pos:end="729:71">(<argument pos:start="729:38" pos:end="729:48"><expr pos:start="729:38" pos:end="729:48"><name pos:start="729:38" pos:end="729:48">CPUX86State</name></expr></argument>,<argument pos:start="729:50" pos:end="729:70"><expr pos:start="729:50" pos:end="729:70"><name pos:start="729:50" pos:end="729:61"><name pos:start="729:50" pos:end="729:57">xmm_regs</name><index pos:start="729:58" pos:end="729:61">[<expr pos:start="729:59" pos:end="729:60"><name pos:start="729:59" pos:end="729:60">rm</name></expr>]</index></name><operator pos:start="729:62" pos:end="729:62">.</operator><call pos:start="729:63" pos:end="729:70"><name pos:start="729:63" pos:end="729:67">ZMM_L</name><argument_list pos:start="729:68" pos:end="729:70">(<argument pos:start="729:69" pos:end="729:69"><expr pos:start="729:69" pos:end="729:69"><literal type="number" pos:start="729:69" pos:end="729:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="731:29" pos:end="731:72"><expr pos:start="731:29" pos:end="731:72"><call pos:start="731:29" pos:end="731:72"><name pos:start="731:29" pos:end="731:36">offsetof</name><argument_list pos:start="731:37" pos:end="731:72">(<argument pos:start="731:38" pos:end="731:48"><expr pos:start="731:38" pos:end="731:48"><name pos:start="731:38" pos:end="731:48">CPUX86State</name></expr></argument>,<argument pos:start="731:50" pos:end="731:71"><expr pos:start="731:50" pos:end="731:71"><name pos:start="731:50" pos:end="731:62"><name pos:start="731:50" pos:end="731:57">xmm_regs</name><index pos:start="731:58" pos:end="731:62">[<expr pos:start="731:59" pos:end="731:61"><name pos:start="731:59" pos:end="731:61">reg</name></expr>]</index></name><operator pos:start="731:63" pos:end="731:63">.</operator><call pos:start="731:64" pos:end="731:71"><name pos:start="731:64" pos:end="731:68">ZMM_L</name><argument_list pos:start="731:69" pos:end="731:71">(<argument pos:start="731:70" pos:end="731:70"><expr pos:start="731:70" pos:end="731:70"><literal type="number" pos:start="731:70" pos:end="731:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="735:13" pos:end="735:18">break;</break>

        <case pos:start="737:9" pos:end="737:19">case <expr pos:start="737:14" pos:end="737:18"><literal type="number" pos:start="737:14" pos:end="737:18">0x311</literal></expr>:</case> <comment type="block" pos:start="737:21" pos:end="737:39">/* movsd ea, xmm */</comment>

            <if_stmt pos:start="739:13" pos:end="755:13"><if pos:start="739:13" pos:end="747:13">if <condition pos:start="739:16" pos:end="739:25">(<expr pos:start="739:17" pos:end="739:24"><name pos:start="739:17" pos:end="739:19">mod</name> <operator pos:start="739:21" pos:end="739:22">!=</operator> <literal type="number" pos:start="739:24" pos:end="739:24">3</literal></expr>)</condition> <block pos:start="739:27" pos:end="747:13">{<block_content pos:start="741:17" pos:end="745:68">

                <expr_stmt pos:start="741:17" pos:end="741:45"><expr pos:start="741:17" pos:end="741:44"><call pos:start="741:17" pos:end="741:44"><name pos:start="741:17" pos:end="741:29">gen_lea_modrm</name><argument_list pos:start="741:30" pos:end="741:44">(<argument pos:start="741:31" pos:end="741:33"><expr pos:start="741:31" pos:end="741:33"><name pos:start="741:31" pos:end="741:33">env</name></expr></argument>, <argument pos:start="741:36" pos:end="741:36"><expr pos:start="741:36" pos:end="741:36"><name pos:start="741:36" pos:end="741:36">s</name></expr></argument>, <argument pos:start="741:39" pos:end="741:43"><expr pos:start="741:39" pos:end="741:43"><name pos:start="741:39" pos:end="741:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="743:17" pos:end="745:68"><expr pos:start="743:17" pos:end="745:67"><call pos:start="743:17" pos:end="745:67"><name pos:start="743:17" pos:end="743:30">gen_stq_env_A0</name><argument_list pos:start="743:31" pos:end="745:67">(<argument pos:start="743:32" pos:end="743:32"><expr pos:start="743:32" pos:end="743:32"><name pos:start="743:32" pos:end="743:32">s</name></expr></argument>, <argument pos:start="743:35" pos:end="745:66"><expr pos:start="743:35" pos:end="745:66"><call pos:start="743:35" pos:end="745:66"><name pos:start="743:35" pos:end="743:42">offsetof</name><argument_list pos:start="743:43" pos:end="745:66">(<argument pos:start="743:44" pos:end="743:54"><expr pos:start="743:44" pos:end="743:54"><name pos:start="743:44" pos:end="743:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="745:44" pos:end="745:65"><expr pos:start="745:44" pos:end="745:65"><name pos:start="745:44" pos:end="745:56"><name pos:start="745:44" pos:end="745:51">xmm_regs</name><index pos:start="745:52" pos:end="745:56">[<expr pos:start="745:53" pos:end="745:55"><name pos:start="745:53" pos:end="745:55">reg</name></expr>]</index></name><operator pos:start="745:57" pos:end="745:57">.</operator><call pos:start="745:58" pos:end="745:65"><name pos:start="745:58" pos:end="745:62">ZMM_Q</name><argument_list pos:start="745:63" pos:end="745:65">(<argument pos:start="745:64" pos:end="745:64"><expr pos:start="745:64" pos:end="745:64"><literal type="number" pos:start="745:64" pos:end="745:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="747:15" pos:end="755:13">else <block pos:start="747:20" pos:end="755:13">{<block_content pos:start="749:17" pos:end="753:74">

                <expr_stmt pos:start="749:17" pos:end="749:44"><expr pos:start="749:17" pos:end="749:43"><name pos:start="749:17" pos:end="749:18">rm</name> <operator pos:start="749:20" pos:end="749:20">=</operator> <operator pos:start="749:22" pos:end="749:22">(</operator><name pos:start="749:23" pos:end="749:27">modrm</name> <operator pos:start="749:29" pos:end="749:29">&amp;</operator> <literal type="number" pos:start="749:31" pos:end="749:31">7</literal><operator pos:start="749:32" pos:end="749:32">)</operator> <operator pos:start="749:34" pos:end="749:34">|</operator> <call pos:start="749:36" pos:end="749:43"><name pos:start="749:36" pos:end="749:40">REX_B</name><argument_list pos:start="749:41" pos:end="749:43">(<argument pos:start="749:42" pos:end="749:42"><expr pos:start="749:42" pos:end="749:42"><name pos:start="749:42" pos:end="749:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="751:17" pos:end="753:74"><expr pos:start="751:17" pos:end="753:73"><call pos:start="751:17" pos:end="753:73"><name pos:start="751:17" pos:end="751:27">gen_op_movq</name><argument_list pos:start="751:28" pos:end="753:73">(<argument pos:start="751:29" pos:end="751:71"><expr pos:start="751:29" pos:end="751:71"><call pos:start="751:29" pos:end="751:71"><name pos:start="751:29" pos:end="751:36">offsetof</name><argument_list pos:start="751:37" pos:end="751:71">(<argument pos:start="751:38" pos:end="751:48"><expr pos:start="751:38" pos:end="751:48"><name pos:start="751:38" pos:end="751:48">CPUX86State</name></expr></argument>,<argument pos:start="751:50" pos:end="751:70"><expr pos:start="751:50" pos:end="751:70"><name pos:start="751:50" pos:end="751:61"><name pos:start="751:50" pos:end="751:57">xmm_regs</name><index pos:start="751:58" pos:end="751:61">[<expr pos:start="751:59" pos:end="751:60"><name pos:start="751:59" pos:end="751:60">rm</name></expr>]</index></name><operator pos:start="751:62" pos:end="751:62">.</operator><call pos:start="751:63" pos:end="751:70"><name pos:start="751:63" pos:end="751:67">ZMM_Q</name><argument_list pos:start="751:68" pos:end="751:70">(<argument pos:start="751:69" pos:end="751:69"><expr pos:start="751:69" pos:end="751:69"><literal type="number" pos:start="751:69" pos:end="751:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="753:29" pos:end="753:72"><expr pos:start="753:29" pos:end="753:72"><call pos:start="753:29" pos:end="753:72"><name pos:start="753:29" pos:end="753:36">offsetof</name><argument_list pos:start="753:37" pos:end="753:72">(<argument pos:start="753:38" pos:end="753:48"><expr pos:start="753:38" pos:end="753:48"><name pos:start="753:38" pos:end="753:48">CPUX86State</name></expr></argument>,<argument pos:start="753:50" pos:end="753:71"><expr pos:start="753:50" pos:end="753:71"><name pos:start="753:50" pos:end="753:62"><name pos:start="753:50" pos:end="753:57">xmm_regs</name><index pos:start="753:58" pos:end="753:62">[<expr pos:start="753:59" pos:end="753:61"><name pos:start="753:59" pos:end="753:61">reg</name></expr>]</index></name><operator pos:start="753:63" pos:end="753:63">.</operator><call pos:start="753:64" pos:end="753:71"><name pos:start="753:64" pos:end="753:68">ZMM_Q</name><argument_list pos:start="753:69" pos:end="753:71">(<argument pos:start="753:70" pos:end="753:70"><expr pos:start="753:70" pos:end="753:70"><literal type="number" pos:start="753:70" pos:end="753:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="757:13" pos:end="757:18">break;</break>

        <case pos:start="759:9" pos:end="759:19">case <expr pos:start="759:14" pos:end="759:18"><literal type="number" pos:start="759:14" pos:end="759:18">0x013</literal></expr>:</case> <comment type="block" pos:start="759:21" pos:end="759:32">/* movlps */</comment>

        <case pos:start="761:9" pos:end="761:19">case <expr pos:start="761:14" pos:end="761:18"><literal type="number" pos:start="761:14" pos:end="761:18">0x113</literal></expr>:</case> <comment type="block" pos:start="761:21" pos:end="761:32">/* movlpd */</comment>

            <if_stmt pos:start="763:13" pos:end="775:13"><if pos:start="763:13" pos:end="771:13">if <condition pos:start="763:16" pos:end="763:25">(<expr pos:start="763:17" pos:end="763:24"><name pos:start="763:17" pos:end="763:19">mod</name> <operator pos:start="763:21" pos:end="763:22">!=</operator> <literal type="number" pos:start="763:24" pos:end="763:24">3</literal></expr>)</condition> <block pos:start="763:27" pos:end="771:13">{<block_content pos:start="765:17" pos:end="769:68">

                <expr_stmt pos:start="765:17" pos:end="765:45"><expr pos:start="765:17" pos:end="765:44"><call pos:start="765:17" pos:end="765:44"><name pos:start="765:17" pos:end="765:29">gen_lea_modrm</name><argument_list pos:start="765:30" pos:end="765:44">(<argument pos:start="765:31" pos:end="765:33"><expr pos:start="765:31" pos:end="765:33"><name pos:start="765:31" pos:end="765:33">env</name></expr></argument>, <argument pos:start="765:36" pos:end="765:36"><expr pos:start="765:36" pos:end="765:36"><name pos:start="765:36" pos:end="765:36">s</name></expr></argument>, <argument pos:start="765:39" pos:end="765:43"><expr pos:start="765:39" pos:end="765:43"><name pos:start="765:39" pos:end="765:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="767:17" pos:end="769:68"><expr pos:start="767:17" pos:end="769:67"><call pos:start="767:17" pos:end="769:67"><name pos:start="767:17" pos:end="767:30">gen_stq_env_A0</name><argument_list pos:start="767:31" pos:end="769:67">(<argument pos:start="767:32" pos:end="767:32"><expr pos:start="767:32" pos:end="767:32"><name pos:start="767:32" pos:end="767:32">s</name></expr></argument>, <argument pos:start="767:35" pos:end="769:66"><expr pos:start="767:35" pos:end="769:66"><call pos:start="767:35" pos:end="769:66"><name pos:start="767:35" pos:end="767:42">offsetof</name><argument_list pos:start="767:43" pos:end="769:66">(<argument pos:start="767:44" pos:end="767:54"><expr pos:start="767:44" pos:end="767:54"><name pos:start="767:44" pos:end="767:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="769:44" pos:end="769:65"><expr pos:start="769:44" pos:end="769:65"><name pos:start="769:44" pos:end="769:56"><name pos:start="769:44" pos:end="769:51">xmm_regs</name><index pos:start="769:52" pos:end="769:56">[<expr pos:start="769:53" pos:end="769:55"><name pos:start="769:53" pos:end="769:55">reg</name></expr>]</index></name><operator pos:start="769:57" pos:end="769:57">.</operator><call pos:start="769:58" pos:end="769:65"><name pos:start="769:58" pos:end="769:62">ZMM_Q</name><argument_list pos:start="769:63" pos:end="769:65">(<argument pos:start="769:64" pos:end="769:64"><expr pos:start="769:64" pos:end="769:64"><literal type="number" pos:start="769:64" pos:end="769:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="771:15" pos:end="775:13">else <block pos:start="771:20" pos:end="775:13">{<block_content pos:start="773:17" pos:end="773:32">

                <goto pos:start="773:17" pos:end="773:32">goto <name pos:start="773:22" pos:end="773:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="777:13" pos:end="777:18">break;</break>

        <case pos:start="779:9" pos:end="779:19">case <expr pos:start="779:14" pos:end="779:18"><literal type="number" pos:start="779:14" pos:end="779:18">0x017</literal></expr>:</case> <comment type="block" pos:start="779:21" pos:end="779:32">/* movhps */</comment>

        <case pos:start="781:9" pos:end="781:19">case <expr pos:start="781:14" pos:end="781:18"><literal type="number" pos:start="781:14" pos:end="781:18">0x117</literal></expr>:</case> <comment type="block" pos:start="781:21" pos:end="781:32">/* movhpd */</comment>

            <if_stmt pos:start="783:13" pos:end="795:13"><if pos:start="783:13" pos:end="791:13">if <condition pos:start="783:16" pos:end="783:25">(<expr pos:start="783:17" pos:end="783:24"><name pos:start="783:17" pos:end="783:19">mod</name> <operator pos:start="783:21" pos:end="783:22">!=</operator> <literal type="number" pos:start="783:24" pos:end="783:24">3</literal></expr>)</condition> <block pos:start="783:27" pos:end="791:13">{<block_content pos:start="785:17" pos:end="789:68">

                <expr_stmt pos:start="785:17" pos:end="785:45"><expr pos:start="785:17" pos:end="785:44"><call pos:start="785:17" pos:end="785:44"><name pos:start="785:17" pos:end="785:29">gen_lea_modrm</name><argument_list pos:start="785:30" pos:end="785:44">(<argument pos:start="785:31" pos:end="785:33"><expr pos:start="785:31" pos:end="785:33"><name pos:start="785:31" pos:end="785:33">env</name></expr></argument>, <argument pos:start="785:36" pos:end="785:36"><expr pos:start="785:36" pos:end="785:36"><name pos:start="785:36" pos:end="785:36">s</name></expr></argument>, <argument pos:start="785:39" pos:end="785:43"><expr pos:start="785:39" pos:end="785:43"><name pos:start="785:39" pos:end="785:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="787:17" pos:end="789:68"><expr pos:start="787:17" pos:end="789:67"><call pos:start="787:17" pos:end="789:67"><name pos:start="787:17" pos:end="787:30">gen_stq_env_A0</name><argument_list pos:start="787:31" pos:end="789:67">(<argument pos:start="787:32" pos:end="787:32"><expr pos:start="787:32" pos:end="787:32"><name pos:start="787:32" pos:end="787:32">s</name></expr></argument>, <argument pos:start="787:35" pos:end="789:66"><expr pos:start="787:35" pos:end="789:66"><call pos:start="787:35" pos:end="789:66"><name pos:start="787:35" pos:end="787:42">offsetof</name><argument_list pos:start="787:43" pos:end="789:66">(<argument pos:start="787:44" pos:end="787:54"><expr pos:start="787:44" pos:end="787:54"><name pos:start="787:44" pos:end="787:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="789:44" pos:end="789:65"><expr pos:start="789:44" pos:end="789:65"><name pos:start="789:44" pos:end="789:56"><name pos:start="789:44" pos:end="789:51">xmm_regs</name><index pos:start="789:52" pos:end="789:56">[<expr pos:start="789:53" pos:end="789:55"><name pos:start="789:53" pos:end="789:55">reg</name></expr>]</index></name><operator pos:start="789:57" pos:end="789:57">.</operator><call pos:start="789:58" pos:end="789:65"><name pos:start="789:58" pos:end="789:62">ZMM_Q</name><argument_list pos:start="789:63" pos:end="789:65">(<argument pos:start="789:64" pos:end="789:64"><expr pos:start="789:64" pos:end="789:64"><literal type="number" pos:start="789:64" pos:end="789:64">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="791:15" pos:end="795:13">else <block pos:start="791:20" pos:end="795:13">{<block_content pos:start="793:17" pos:end="793:32">

                <goto pos:start="793:17" pos:end="793:32">goto <name pos:start="793:22" pos:end="793:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="797:13" pos:end="797:18">break;</break>

        <case pos:start="799:9" pos:end="799:18">case <expr pos:start="799:14" pos:end="799:17"><literal type="number" pos:start="799:14" pos:end="799:17">0x71</literal></expr>:</case> <comment type="block" pos:start="799:20" pos:end="799:37">/* shift mm, im */</comment>

        <case pos:start="801:9" pos:end="801:18">case <expr pos:start="801:14" pos:end="801:17"><literal type="number" pos:start="801:14" pos:end="801:17">0x72</literal></expr>:</case>

        <case pos:start="803:9" pos:end="803:18">case <expr pos:start="803:14" pos:end="803:17"><literal type="number" pos:start="803:14" pos:end="803:17">0x73</literal></expr>:</case>

        <case pos:start="805:9" pos:end="805:19">case <expr pos:start="805:14" pos:end="805:18"><literal type="number" pos:start="805:14" pos:end="805:18">0x171</literal></expr>:</case> <comment type="block" pos:start="805:21" pos:end="805:39">/* shift xmm, im */</comment>

        <case pos:start="807:9" pos:end="807:19">case <expr pos:start="807:14" pos:end="807:18"><literal type="number" pos:start="807:14" pos:end="807:18">0x172</literal></expr>:</case>

        <case pos:start="809:9" pos:end="809:19">case <expr pos:start="809:14" pos:end="809:18"><literal type="number" pos:start="809:14" pos:end="809:18">0x173</literal></expr>:</case>

            <if_stmt pos:start="811:13" pos:end="815:13"><if pos:start="811:13" pos:end="815:13">if <condition pos:start="811:16" pos:end="811:24">(<expr pos:start="811:17" pos:end="811:23"><name pos:start="811:17" pos:end="811:18">b1</name> <operator pos:start="811:20" pos:end="811:21">&gt;=</operator> <literal type="number" pos:start="811:23" pos:end="811:23">2</literal></expr>)</condition> <block pos:start="811:26" pos:end="815:13">{<block_content pos:start="813:17" pos:end="813:32">

	        <goto pos:start="813:17" pos:end="813:32">goto <name pos:start="813:22" pos:end="813:31">unknown_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="817:13" pos:end="817:46"><expr pos:start="817:13" pos:end="817:45"><name pos:start="817:13" pos:end="817:15">val</name> <operator pos:start="817:17" pos:end="817:17">=</operator> <call pos:start="817:19" pos:end="817:45"><name pos:start="817:19" pos:end="817:31">cpu_ldub_code</name><argument_list pos:start="817:32" pos:end="817:45">(<argument pos:start="817:33" pos:end="817:35"><expr pos:start="817:33" pos:end="817:35"><name pos:start="817:33" pos:end="817:35">env</name></expr></argument>, <argument pos:start="817:38" pos:end="817:44"><expr pos:start="817:38" pos:end="817:44"><name pos:start="817:38" pos:end="817:42"><name pos:start="817:38" pos:end="817:38">s</name><operator pos:start="817:39" pos:end="817:40">-&gt;</operator><name pos:start="817:41" pos:end="817:42">pc</name></name><operator pos:start="817:43" pos:end="817:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="819:13" pos:end="843:13"><if pos:start="819:13" pos:end="831:13">if <condition pos:start="819:16" pos:end="819:23">(<expr pos:start="819:17" pos:end="819:22"><name pos:start="819:17" pos:end="819:22">is_xmm</name></expr>)</condition> <block pos:start="819:25" pos:end="831:13">{<block_content pos:start="821:17" pos:end="829:58">

                <expr_stmt pos:start="821:17" pos:end="821:45"><expr pos:start="821:17" pos:end="821:44"><call pos:start="821:17" pos:end="821:44"><name pos:start="821:17" pos:end="821:31">tcg_gen_movi_tl</name><argument_list pos:start="821:32" pos:end="821:44">(<argument pos:start="821:33" pos:end="821:38"><expr pos:start="821:33" pos:end="821:38"><name pos:start="821:33" pos:end="821:38">cpu_T0</name></expr></argument>, <argument pos:start="821:41" pos:end="821:43"><expr pos:start="821:41" pos:end="821:43"><name pos:start="821:41" pos:end="821:43">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="823:17" pos:end="823:88"><expr pos:start="823:17" pos:end="823:87"><call pos:start="823:17" pos:end="823:87"><name pos:start="823:17" pos:end="823:31">tcg_gen_st32_tl</name><argument_list pos:start="823:32" pos:end="823:87">(<argument pos:start="823:33" pos:end="823:38"><expr pos:start="823:33" pos:end="823:38"><name pos:start="823:33" pos:end="823:38">cpu_T0</name></expr></argument>, <argument pos:start="823:41" pos:end="823:47"><expr pos:start="823:41" pos:end="823:47"><name pos:start="823:41" pos:end="823:47">cpu_env</name></expr></argument>, <argument pos:start="823:50" pos:end="823:86"><expr pos:start="823:50" pos:end="823:86"><call pos:start="823:50" pos:end="823:86"><name pos:start="823:50" pos:end="823:57">offsetof</name><argument_list pos:start="823:58" pos:end="823:86">(<argument pos:start="823:59" pos:end="823:69"><expr pos:start="823:59" pos:end="823:69"><name pos:start="823:59" pos:end="823:69">CPUX86State</name></expr></argument>,<argument pos:start="823:71" pos:end="823:85"><expr pos:start="823:71" pos:end="823:85"><call pos:start="823:71" pos:end="823:85"><name pos:start="823:71" pos:end="823:82"><name pos:start="823:71" pos:end="823:76">xmm_t0</name><operator pos:start="823:77" pos:end="823:77">.</operator><name pos:start="823:78" pos:end="823:82">ZMM_L</name></name><argument_list pos:start="823:83" pos:end="823:85">(<argument pos:start="823:84" pos:end="823:84"><expr pos:start="823:84" pos:end="823:84"><literal type="number" pos:start="823:84" pos:end="823:84">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="825:17" pos:end="825:43"><expr pos:start="825:17" pos:end="825:42"><call pos:start="825:17" pos:end="825:42"><name pos:start="825:17" pos:end="825:31">tcg_gen_movi_tl</name><argument_list pos:start="825:32" pos:end="825:42">(<argument pos:start="825:33" pos:end="825:38"><expr pos:start="825:33" pos:end="825:38"><name pos:start="825:33" pos:end="825:38">cpu_T0</name></expr></argument>, <argument pos:start="825:41" pos:end="825:41"><expr pos:start="825:41" pos:end="825:41"><literal type="number" pos:start="825:41" pos:end="825:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="827:17" pos:end="827:88"><expr pos:start="827:17" pos:end="827:87"><call pos:start="827:17" pos:end="827:87"><name pos:start="827:17" pos:end="827:31">tcg_gen_st32_tl</name><argument_list pos:start="827:32" pos:end="827:87">(<argument pos:start="827:33" pos:end="827:38"><expr pos:start="827:33" pos:end="827:38"><name pos:start="827:33" pos:end="827:38">cpu_T0</name></expr></argument>, <argument pos:start="827:41" pos:end="827:47"><expr pos:start="827:41" pos:end="827:47"><name pos:start="827:41" pos:end="827:47">cpu_env</name></expr></argument>, <argument pos:start="827:50" pos:end="827:86"><expr pos:start="827:50" pos:end="827:86"><call pos:start="827:50" pos:end="827:86"><name pos:start="827:50" pos:end="827:57">offsetof</name><argument_list pos:start="827:58" pos:end="827:86">(<argument pos:start="827:59" pos:end="827:69"><expr pos:start="827:59" pos:end="827:69"><name pos:start="827:59" pos:end="827:69">CPUX86State</name></expr></argument>,<argument pos:start="827:71" pos:end="827:85"><expr pos:start="827:71" pos:end="827:85"><call pos:start="827:71" pos:end="827:85"><name pos:start="827:71" pos:end="827:82"><name pos:start="827:71" pos:end="827:76">xmm_t0</name><operator pos:start="827:77" pos:end="827:77">.</operator><name pos:start="827:78" pos:end="827:82">ZMM_L</name></name><argument_list pos:start="827:83" pos:end="827:85">(<argument pos:start="827:84" pos:end="827:84"><expr pos:start="827:84" pos:end="827:84"><literal type="number" pos:start="827:84" pos:end="827:84">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="829:17" pos:end="829:58"><expr pos:start="829:17" pos:end="829:57"><name pos:start="829:17" pos:end="829:26">op1_offset</name> <operator pos:start="829:28" pos:end="829:28">=</operator> <call pos:start="829:30" pos:end="829:57"><name pos:start="829:30" pos:end="829:37">offsetof</name><argument_list pos:start="829:38" pos:end="829:57">(<argument pos:start="829:39" pos:end="829:49"><expr pos:start="829:39" pos:end="829:49"><name pos:start="829:39" pos:end="829:49">CPUX86State</name></expr></argument>,<argument pos:start="829:51" pos:end="829:56"><expr pos:start="829:51" pos:end="829:56"><name pos:start="829:51" pos:end="829:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="831:15" pos:end="843:13">else <block pos:start="831:20" pos:end="843:13">{<block_content pos:start="833:17" pos:end="841:58">

                <expr_stmt pos:start="833:17" pos:end="833:45"><expr pos:start="833:17" pos:end="833:44"><call pos:start="833:17" pos:end="833:44"><name pos:start="833:17" pos:end="833:31">tcg_gen_movi_tl</name><argument_list pos:start="833:32" pos:end="833:44">(<argument pos:start="833:33" pos:end="833:38"><expr pos:start="833:33" pos:end="833:38"><name pos:start="833:33" pos:end="833:38">cpu_T0</name></expr></argument>, <argument pos:start="833:41" pos:end="833:43"><expr pos:start="833:41" pos:end="833:43"><name pos:start="833:41" pos:end="833:43">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="835:17" pos:end="835:88"><expr pos:start="835:17" pos:end="835:87"><call pos:start="835:17" pos:end="835:87"><name pos:start="835:17" pos:end="835:31">tcg_gen_st32_tl</name><argument_list pos:start="835:32" pos:end="835:87">(<argument pos:start="835:33" pos:end="835:38"><expr pos:start="835:33" pos:end="835:38"><name pos:start="835:33" pos:end="835:38">cpu_T0</name></expr></argument>, <argument pos:start="835:41" pos:end="835:47"><expr pos:start="835:41" pos:end="835:47"><name pos:start="835:41" pos:end="835:47">cpu_env</name></expr></argument>, <argument pos:start="835:50" pos:end="835:86"><expr pos:start="835:50" pos:end="835:86"><call pos:start="835:50" pos:end="835:86"><name pos:start="835:50" pos:end="835:57">offsetof</name><argument_list pos:start="835:58" pos:end="835:86">(<argument pos:start="835:59" pos:end="835:69"><expr pos:start="835:59" pos:end="835:69"><name pos:start="835:59" pos:end="835:69">CPUX86State</name></expr></argument>,<argument pos:start="835:71" pos:end="835:85"><expr pos:start="835:71" pos:end="835:85"><call pos:start="835:71" pos:end="835:85"><name pos:start="835:71" pos:end="835:82"><name pos:start="835:71" pos:end="835:76">mmx_t0</name><operator pos:start="835:77" pos:end="835:77">.</operator><name pos:start="835:78" pos:end="835:82">MMX_L</name></name><argument_list pos:start="835:83" pos:end="835:85">(<argument pos:start="835:84" pos:end="835:84"><expr pos:start="835:84" pos:end="835:84"><literal type="number" pos:start="835:84" pos:end="835:84">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="837:17" pos:end="837:43"><expr pos:start="837:17" pos:end="837:42"><call pos:start="837:17" pos:end="837:42"><name pos:start="837:17" pos:end="837:31">tcg_gen_movi_tl</name><argument_list pos:start="837:32" pos:end="837:42">(<argument pos:start="837:33" pos:end="837:38"><expr pos:start="837:33" pos:end="837:38"><name pos:start="837:33" pos:end="837:38">cpu_T0</name></expr></argument>, <argument pos:start="837:41" pos:end="837:41"><expr pos:start="837:41" pos:end="837:41"><literal type="number" pos:start="837:41" pos:end="837:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="839:17" pos:end="839:88"><expr pos:start="839:17" pos:end="839:87"><call pos:start="839:17" pos:end="839:87"><name pos:start="839:17" pos:end="839:31">tcg_gen_st32_tl</name><argument_list pos:start="839:32" pos:end="839:87">(<argument pos:start="839:33" pos:end="839:38"><expr pos:start="839:33" pos:end="839:38"><name pos:start="839:33" pos:end="839:38">cpu_T0</name></expr></argument>, <argument pos:start="839:41" pos:end="839:47"><expr pos:start="839:41" pos:end="839:47"><name pos:start="839:41" pos:end="839:47">cpu_env</name></expr></argument>, <argument pos:start="839:50" pos:end="839:86"><expr pos:start="839:50" pos:end="839:86"><call pos:start="839:50" pos:end="839:86"><name pos:start="839:50" pos:end="839:57">offsetof</name><argument_list pos:start="839:58" pos:end="839:86">(<argument pos:start="839:59" pos:end="839:69"><expr pos:start="839:59" pos:end="839:69"><name pos:start="839:59" pos:end="839:69">CPUX86State</name></expr></argument>,<argument pos:start="839:71" pos:end="839:85"><expr pos:start="839:71" pos:end="839:85"><call pos:start="839:71" pos:end="839:85"><name pos:start="839:71" pos:end="839:82"><name pos:start="839:71" pos:end="839:76">mmx_t0</name><operator pos:start="839:77" pos:end="839:77">.</operator><name pos:start="839:78" pos:end="839:82">MMX_L</name></name><argument_list pos:start="839:83" pos:end="839:85">(<argument pos:start="839:84" pos:end="839:84"><expr pos:start="839:84" pos:end="839:84"><literal type="number" pos:start="839:84" pos:end="839:84">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="841:17" pos:end="841:58"><expr pos:start="841:17" pos:end="841:57"><name pos:start="841:17" pos:end="841:26">op1_offset</name> <operator pos:start="841:28" pos:end="841:28">=</operator> <call pos:start="841:30" pos:end="841:57"><name pos:start="841:30" pos:end="841:37">offsetof</name><argument_list pos:start="841:38" pos:end="841:57">(<argument pos:start="841:39" pos:end="841:49"><expr pos:start="841:39" pos:end="841:49"><name pos:start="841:39" pos:end="841:49">CPUX86State</name></expr></argument>,<argument pos:start="841:51" pos:end="841:56"><expr pos:start="841:51" pos:end="841:56"><name pos:start="841:51" pos:end="841:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="845:13" pos:end="847:65"><expr pos:start="845:13" pos:end="847:64"><name pos:start="845:13" pos:end="845:22">sse_fn_epp</name> <operator pos:start="845:24" pos:end="845:24">=</operator> <name pos:start="845:26" pos:end="847:64"><name pos:start="845:26" pos:end="845:38">sse_op_table2</name><index pos:start="845:39" pos:end="847:60">[<expr pos:start="845:40" pos:end="847:59"><operator pos:start="845:40" pos:end="845:40">(</operator><operator pos:start="845:41" pos:end="845:41">(</operator><name pos:start="845:42" pos:end="845:42">b</name> <operator pos:start="845:44" pos:end="845:44">-</operator> <literal type="number" pos:start="845:46" pos:end="845:46">1</literal><operator pos:start="845:47" pos:end="845:47">)</operator> <operator pos:start="845:49" pos:end="845:49">&amp;</operator> <literal type="number" pos:start="845:51" pos:end="845:51">3</literal><operator pos:start="845:52" pos:end="845:52">)</operator> <operator pos:start="845:54" pos:end="845:54">*</operator> <literal type="number" pos:start="845:56" pos:end="845:58">8</literal> <operator pos:start="845:58" pos:end="845:58">+</operator>

                                       <operator pos:start="847:40" pos:end="847:40">(</operator><operator pos:start="847:41" pos:end="847:41">(</operator><operator pos:start="847:42" pos:end="847:42">(</operator><name pos:start="847:43" pos:end="847:47">modrm</name> <operator pos:start="847:49" pos:end="847:50">&gt;&gt;</operator> <literal type="number" pos:start="847:52" pos:end="847:52">3</literal><operator pos:start="847:53" pos:end="847:53">)</operator><operator pos:start="847:54" pos:end="847:54">)</operator> <operator pos:start="847:56" pos:end="847:56">&amp;</operator> <literal type="number" pos:start="847:58" pos:end="847:58">7</literal><operator pos:start="847:59" pos:end="847:59">)</operator></expr>]</index><index pos:start="847:61" pos:end="847:64">[<expr pos:start="847:62" pos:end="847:63"><name pos:start="847:62" pos:end="847:63">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="849:13" pos:end="853:13"><if pos:start="849:13" pos:end="853:13">if <condition pos:start="849:16" pos:end="849:28">(<expr pos:start="849:17" pos:end="849:27"><operator pos:start="849:17" pos:end="849:17">!</operator><name pos:start="849:18" pos:end="849:27">sse_fn_epp</name></expr>)</condition> <block pos:start="849:30" pos:end="853:13">{<block_content pos:start="851:17" pos:end="851:32">

                <goto pos:start="851:17" pos:end="851:32">goto <name pos:start="851:22" pos:end="851:31">unknown_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="855:13" pos:end="867:13"><if pos:start="855:13" pos:end="861:13">if <condition pos:start="855:16" pos:end="855:23">(<expr pos:start="855:17" pos:end="855:22"><name pos:start="855:17" pos:end="855:22">is_xmm</name></expr>)</condition> <block pos:start="855:25" pos:end="861:13">{<block_content pos:start="857:17" pos:end="859:64">

                <expr_stmt pos:start="857:17" pos:end="857:44"><expr pos:start="857:17" pos:end="857:43"><name pos:start="857:17" pos:end="857:18">rm</name> <operator pos:start="857:20" pos:end="857:20">=</operator> <operator pos:start="857:22" pos:end="857:22">(</operator><name pos:start="857:23" pos:end="857:27">modrm</name> <operator pos:start="857:29" pos:end="857:29">&amp;</operator> <literal type="number" pos:start="857:31" pos:end="857:31">7</literal><operator pos:start="857:32" pos:end="857:32">)</operator> <operator pos:start="857:34" pos:end="857:34">|</operator> <call pos:start="857:36" pos:end="857:43"><name pos:start="857:36" pos:end="857:40">REX_B</name><argument_list pos:start="857:41" pos:end="857:43">(<argument pos:start="857:42" pos:end="857:42"><expr pos:start="857:42" pos:end="857:42"><name pos:start="857:42" pos:end="857:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="859:17" pos:end="859:64"><expr pos:start="859:17" pos:end="859:63"><name pos:start="859:17" pos:end="859:26">op2_offset</name> <operator pos:start="859:28" pos:end="859:28">=</operator> <call pos:start="859:30" pos:end="859:63"><name pos:start="859:30" pos:end="859:37">offsetof</name><argument_list pos:start="859:38" pos:end="859:63">(<argument pos:start="859:39" pos:end="859:49"><expr pos:start="859:39" pos:end="859:49"><name pos:start="859:39" pos:end="859:49">CPUX86State</name></expr></argument>,<argument pos:start="859:51" pos:end="859:62"><expr pos:start="859:51" pos:end="859:62"><name pos:start="859:51" pos:end="859:62"><name pos:start="859:51" pos:end="859:58">xmm_regs</name><index pos:start="859:59" pos:end="859:62">[<expr pos:start="859:60" pos:end="859:61"><name pos:start="859:60" pos:end="859:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="861:15" pos:end="867:13">else <block pos:start="861:20" pos:end="867:13">{<block_content pos:start="863:17" pos:end="865:66">

                <expr_stmt pos:start="863:17" pos:end="863:33"><expr pos:start="863:17" pos:end="863:32"><name pos:start="863:17" pos:end="863:18">rm</name> <operator pos:start="863:20" pos:end="863:20">=</operator> <operator pos:start="863:22" pos:end="863:22">(</operator><name pos:start="863:23" pos:end="863:27">modrm</name> <operator pos:start="863:29" pos:end="863:29">&amp;</operator> <literal type="number" pos:start="863:31" pos:end="863:31">7</literal><operator pos:start="863:32" pos:end="863:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="865:17" pos:end="865:66"><expr pos:start="865:17" pos:end="865:65"><name pos:start="865:17" pos:end="865:26">op2_offset</name> <operator pos:start="865:28" pos:end="865:28">=</operator> <call pos:start="865:30" pos:end="865:65"><name pos:start="865:30" pos:end="865:37">offsetof</name><argument_list pos:start="865:38" pos:end="865:65">(<argument pos:start="865:39" pos:end="865:49"><expr pos:start="865:39" pos:end="865:49"><name pos:start="865:39" pos:end="865:49">CPUX86State</name></expr></argument>,<argument pos:start="865:51" pos:end="865:64"><expr pos:start="865:51" pos:end="865:64"><name pos:start="865:51" pos:end="865:60"><name pos:start="865:51" pos:end="865:56">fpregs</name><index pos:start="865:57" pos:end="865:60">[<expr pos:start="865:58" pos:end="865:59"><name pos:start="865:58" pos:end="865:59">rm</name></expr>]</index></name><operator pos:start="865:61" pos:end="865:61">.</operator><name pos:start="865:62" pos:end="865:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="869:13" pos:end="869:60"><expr pos:start="869:13" pos:end="869:59"><call pos:start="869:13" pos:end="869:59"><name pos:start="869:13" pos:end="869:28">tcg_gen_addi_ptr</name><argument_list pos:start="869:29" pos:end="869:59">(<argument pos:start="869:30" pos:end="869:37"><expr pos:start="869:30" pos:end="869:37"><name pos:start="869:30" pos:end="869:37">cpu_ptr0</name></expr></argument>, <argument pos:start="869:40" pos:end="869:46"><expr pos:start="869:40" pos:end="869:46"><name pos:start="869:40" pos:end="869:46">cpu_env</name></expr></argument>, <argument pos:start="869:49" pos:end="869:58"><expr pos:start="869:49" pos:end="869:58"><name pos:start="869:49" pos:end="869:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="871:13" pos:end="871:60"><expr pos:start="871:13" pos:end="871:59"><call pos:start="871:13" pos:end="871:59"><name pos:start="871:13" pos:end="871:28">tcg_gen_addi_ptr</name><argument_list pos:start="871:29" pos:end="871:59">(<argument pos:start="871:30" pos:end="871:37"><expr pos:start="871:30" pos:end="871:37"><name pos:start="871:30" pos:end="871:37">cpu_ptr1</name></expr></argument>, <argument pos:start="871:40" pos:end="871:46"><expr pos:start="871:40" pos:end="871:46"><name pos:start="871:40" pos:end="871:46">cpu_env</name></expr></argument>, <argument pos:start="871:49" pos:end="871:58"><expr pos:start="871:49" pos:end="871:58"><name pos:start="871:49" pos:end="871:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="873:13" pos:end="873:52"><expr pos:start="873:13" pos:end="873:51"><call pos:start="873:13" pos:end="873:51"><name pos:start="873:13" pos:end="873:22">sse_fn_epp</name><argument_list pos:start="873:23" pos:end="873:51">(<argument pos:start="873:24" pos:end="873:30"><expr pos:start="873:24" pos:end="873:30"><name pos:start="873:24" pos:end="873:30">cpu_env</name></expr></argument>, <argument pos:start="873:33" pos:end="873:40"><expr pos:start="873:33" pos:end="873:40"><name pos:start="873:33" pos:end="873:40">cpu_ptr0</name></expr></argument>, <argument pos:start="873:43" pos:end="873:50"><expr pos:start="873:43" pos:end="873:50"><name pos:start="873:43" pos:end="873:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="875:13" pos:end="875:18">break;</break>

        <case pos:start="877:9" pos:end="877:19">case <expr pos:start="877:14" pos:end="877:18"><literal type="number" pos:start="877:14" pos:end="877:18">0x050</literal></expr>:</case> <comment type="block" pos:start="877:21" pos:end="877:34">/* movmskps */</comment>

            <expr_stmt pos:start="879:13" pos:end="879:40"><expr pos:start="879:13" pos:end="879:39"><name pos:start="879:13" pos:end="879:14">rm</name> <operator pos:start="879:16" pos:end="879:16">=</operator> <operator pos:start="879:18" pos:end="879:18">(</operator><name pos:start="879:19" pos:end="879:23">modrm</name> <operator pos:start="879:25" pos:end="879:25">&amp;</operator> <literal type="number" pos:start="879:27" pos:end="879:27">7</literal><operator pos:start="879:28" pos:end="879:28">)</operator> <operator pos:start="879:30" pos:end="879:30">|</operator> <call pos:start="879:32" pos:end="879:39"><name pos:start="879:32" pos:end="879:36">REX_B</name><argument_list pos:start="879:37" pos:end="879:39">(<argument pos:start="879:38" pos:end="879:38"><expr pos:start="879:38" pos:end="879:38"><name pos:start="879:38" pos:end="879:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="881:13" pos:end="883:65"><expr pos:start="881:13" pos:end="883:64"><call pos:start="881:13" pos:end="883:64"><name pos:start="881:13" pos:end="881:28">tcg_gen_addi_ptr</name><argument_list pos:start="881:29" pos:end="883:64">(<argument pos:start="881:30" pos:end="881:37"><expr pos:start="881:30" pos:end="881:37"><name pos:start="881:30" pos:end="881:37">cpu_ptr0</name></expr></argument>, <argument pos:start="881:40" pos:end="881:46"><expr pos:start="881:40" pos:end="881:46"><name pos:start="881:40" pos:end="881:46">cpu_env</name></expr></argument>, 

                             <argument pos:start="883:30" pos:end="883:63"><expr pos:start="883:30" pos:end="883:63"><call pos:start="883:30" pos:end="883:63"><name pos:start="883:30" pos:end="883:37">offsetof</name><argument_list pos:start="883:38" pos:end="883:63">(<argument pos:start="883:39" pos:end="883:49"><expr pos:start="883:39" pos:end="883:49"><name pos:start="883:39" pos:end="883:49">CPUX86State</name></expr></argument>,<argument pos:start="883:51" pos:end="883:62"><expr pos:start="883:51" pos:end="883:62"><name pos:start="883:51" pos:end="883:62"><name pos:start="883:51" pos:end="883:58">xmm_regs</name><index pos:start="883:59" pos:end="883:62">[<expr pos:start="883:60" pos:end="883:61"><name pos:start="883:60" pos:end="883:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="885:13" pos:end="885:65"><expr pos:start="885:13" pos:end="885:64"><call pos:start="885:13" pos:end="885:64"><name pos:start="885:13" pos:end="885:31">gen_helper_movmskps</name><argument_list pos:start="885:32" pos:end="885:64">(<argument pos:start="885:33" pos:end="885:44"><expr pos:start="885:33" pos:end="885:44"><name pos:start="885:33" pos:end="885:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="885:47" pos:end="885:53"><expr pos:start="885:47" pos:end="885:53"><name pos:start="885:47" pos:end="885:53">cpu_env</name></expr></argument>, <argument pos:start="885:56" pos:end="885:63"><expr pos:start="885:56" pos:end="885:63"><name pos:start="885:56" pos:end="885:63">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="887:13" pos:end="887:61"><expr pos:start="887:13" pos:end="887:60"><call pos:start="887:13" pos:end="887:60"><name pos:start="887:13" pos:end="887:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="887:32" pos:end="887:60">(<argument pos:start="887:33" pos:end="887:45"><expr pos:start="887:33" pos:end="887:45"><name pos:start="887:33" pos:end="887:45"><name pos:start="887:33" pos:end="887:40">cpu_regs</name><index pos:start="887:41" pos:end="887:45">[<expr pos:start="887:42" pos:end="887:44"><name pos:start="887:42" pos:end="887:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="887:48" pos:end="887:59"><expr pos:start="887:48" pos:end="887:59"><name pos:start="887:48" pos:end="887:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="889:13" pos:end="889:18">break;</break>

        <case pos:start="891:9" pos:end="891:19">case <expr pos:start="891:14" pos:end="891:18"><literal type="number" pos:start="891:14" pos:end="891:18">0x150</literal></expr>:</case> <comment type="block" pos:start="891:21" pos:end="891:34">/* movmskpd */</comment>

            <expr_stmt pos:start="893:13" pos:end="893:40"><expr pos:start="893:13" pos:end="893:39"><name pos:start="893:13" pos:end="893:14">rm</name> <operator pos:start="893:16" pos:end="893:16">=</operator> <operator pos:start="893:18" pos:end="893:18">(</operator><name pos:start="893:19" pos:end="893:23">modrm</name> <operator pos:start="893:25" pos:end="893:25">&amp;</operator> <literal type="number" pos:start="893:27" pos:end="893:27">7</literal><operator pos:start="893:28" pos:end="893:28">)</operator> <operator pos:start="893:30" pos:end="893:30">|</operator> <call pos:start="893:32" pos:end="893:39"><name pos:start="893:32" pos:end="893:36">REX_B</name><argument_list pos:start="893:37" pos:end="893:39">(<argument pos:start="893:38" pos:end="893:38"><expr pos:start="893:38" pos:end="893:38"><name pos:start="893:38" pos:end="893:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="895:13" pos:end="897:65"><expr pos:start="895:13" pos:end="897:64"><call pos:start="895:13" pos:end="897:64"><name pos:start="895:13" pos:end="895:28">tcg_gen_addi_ptr</name><argument_list pos:start="895:29" pos:end="897:64">(<argument pos:start="895:30" pos:end="895:37"><expr pos:start="895:30" pos:end="895:37"><name pos:start="895:30" pos:end="895:37">cpu_ptr0</name></expr></argument>, <argument pos:start="895:40" pos:end="895:46"><expr pos:start="895:40" pos:end="895:46"><name pos:start="895:40" pos:end="895:46">cpu_env</name></expr></argument>, 

                             <argument pos:start="897:30" pos:end="897:63"><expr pos:start="897:30" pos:end="897:63"><call pos:start="897:30" pos:end="897:63"><name pos:start="897:30" pos:end="897:37">offsetof</name><argument_list pos:start="897:38" pos:end="897:63">(<argument pos:start="897:39" pos:end="897:49"><expr pos:start="897:39" pos:end="897:49"><name pos:start="897:39" pos:end="897:49">CPUX86State</name></expr></argument>,<argument pos:start="897:51" pos:end="897:62"><expr pos:start="897:51" pos:end="897:62"><name pos:start="897:51" pos:end="897:62"><name pos:start="897:51" pos:end="897:58">xmm_regs</name><index pos:start="897:59" pos:end="897:62">[<expr pos:start="897:60" pos:end="897:61"><name pos:start="897:60" pos:end="897:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="899:13" pos:end="899:65"><expr pos:start="899:13" pos:end="899:64"><call pos:start="899:13" pos:end="899:64"><name pos:start="899:13" pos:end="899:31">gen_helper_movmskpd</name><argument_list pos:start="899:32" pos:end="899:64">(<argument pos:start="899:33" pos:end="899:44"><expr pos:start="899:33" pos:end="899:44"><name pos:start="899:33" pos:end="899:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="899:47" pos:end="899:53"><expr pos:start="899:47" pos:end="899:53"><name pos:start="899:47" pos:end="899:53">cpu_env</name></expr></argument>, <argument pos:start="899:56" pos:end="899:63"><expr pos:start="899:56" pos:end="899:63"><name pos:start="899:56" pos:end="899:63">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="901:13" pos:end="901:61"><expr pos:start="901:13" pos:end="901:60"><call pos:start="901:13" pos:end="901:60"><name pos:start="901:13" pos:end="901:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="901:32" pos:end="901:60">(<argument pos:start="901:33" pos:end="901:45"><expr pos:start="901:33" pos:end="901:45"><name pos:start="901:33" pos:end="901:45"><name pos:start="901:33" pos:end="901:40">cpu_regs</name><index pos:start="901:41" pos:end="901:45">[<expr pos:start="901:42" pos:end="901:44"><name pos:start="901:42" pos:end="901:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="901:48" pos:end="901:59"><expr pos:start="901:48" pos:end="901:59"><name pos:start="901:48" pos:end="901:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="903:13" pos:end="903:18">break;</break>

        <case pos:start="905:9" pos:end="905:19">case <expr pos:start="905:14" pos:end="905:18"><literal type="number" pos:start="905:14" pos:end="905:18">0x02a</literal></expr>:</case> <comment type="block" pos:start="905:21" pos:end="905:34">/* cvtpi2ps */</comment>

        <case pos:start="907:9" pos:end="907:19">case <expr pos:start="907:14" pos:end="907:18"><literal type="number" pos:start="907:14" pos:end="907:18">0x12a</literal></expr>:</case> <comment type="block" pos:start="907:21" pos:end="907:34">/* cvtpi2pd */</comment>

            <expr_stmt pos:start="909:13" pos:end="909:42"><expr pos:start="909:13" pos:end="909:41"><call pos:start="909:13" pos:end="909:41"><name pos:start="909:13" pos:end="909:32">gen_helper_enter_mmx</name><argument_list pos:start="909:33" pos:end="909:41">(<argument pos:start="909:34" pos:end="909:40"><expr pos:start="909:34" pos:end="909:40"><name pos:start="909:34" pos:end="909:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="911:13" pos:end="925:13"><if pos:start="911:13" pos:end="919:13">if <condition pos:start="911:16" pos:end="911:25">(<expr pos:start="911:17" pos:end="911:24"><name pos:start="911:17" pos:end="911:19">mod</name> <operator pos:start="911:21" pos:end="911:22">!=</operator> <literal type="number" pos:start="911:24" pos:end="911:24">3</literal></expr>)</condition> <block pos:start="911:27" pos:end="919:13">{<block_content pos:start="913:17" pos:end="917:46">

                <expr_stmt pos:start="913:17" pos:end="913:45"><expr pos:start="913:17" pos:end="913:44"><call pos:start="913:17" pos:end="913:44"><name pos:start="913:17" pos:end="913:29">gen_lea_modrm</name><argument_list pos:start="913:30" pos:end="913:44">(<argument pos:start="913:31" pos:end="913:33"><expr pos:start="913:31" pos:end="913:33"><name pos:start="913:31" pos:end="913:33">env</name></expr></argument>, <argument pos:start="913:36" pos:end="913:36"><expr pos:start="913:36" pos:end="913:36"><name pos:start="913:36" pos:end="913:36">s</name></expr></argument>, <argument pos:start="913:39" pos:end="913:43"><expr pos:start="913:39" pos:end="913:43"><name pos:start="913:39" pos:end="913:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="915:17" pos:end="915:58"><expr pos:start="915:17" pos:end="915:57"><name pos:start="915:17" pos:end="915:26">op2_offset</name> <operator pos:start="915:28" pos:end="915:28">=</operator> <call pos:start="915:30" pos:end="915:57"><name pos:start="915:30" pos:end="915:37">offsetof</name><argument_list pos:start="915:38" pos:end="915:57">(<argument pos:start="915:39" pos:end="915:49"><expr pos:start="915:39" pos:end="915:49"><name pos:start="915:39" pos:end="915:49">CPUX86State</name></expr></argument>,<argument pos:start="915:51" pos:end="915:56"><expr pos:start="915:51" pos:end="915:56"><name pos:start="915:51" pos:end="915:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="917:17" pos:end="917:46"><expr pos:start="917:17" pos:end="917:45"><call pos:start="917:17" pos:end="917:45"><name pos:start="917:17" pos:end="917:30">gen_ldq_env_A0</name><argument_list pos:start="917:31" pos:end="917:45">(<argument pos:start="917:32" pos:end="917:32"><expr pos:start="917:32" pos:end="917:32"><name pos:start="917:32" pos:end="917:32">s</name></expr></argument>, <argument pos:start="917:35" pos:end="917:44"><expr pos:start="917:35" pos:end="917:44"><name pos:start="917:35" pos:end="917:44">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="919:15" pos:end="925:13">else <block pos:start="919:20" pos:end="925:13">{<block_content pos:start="921:17" pos:end="923:66">

                <expr_stmt pos:start="921:17" pos:end="921:33"><expr pos:start="921:17" pos:end="921:32"><name pos:start="921:17" pos:end="921:18">rm</name> <operator pos:start="921:20" pos:end="921:20">=</operator> <operator pos:start="921:22" pos:end="921:22">(</operator><name pos:start="921:23" pos:end="921:27">modrm</name> <operator pos:start="921:29" pos:end="921:29">&amp;</operator> <literal type="number" pos:start="921:31" pos:end="921:31">7</literal><operator pos:start="921:32" pos:end="921:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="923:17" pos:end="923:66"><expr pos:start="923:17" pos:end="923:65"><name pos:start="923:17" pos:end="923:26">op2_offset</name> <operator pos:start="923:28" pos:end="923:28">=</operator> <call pos:start="923:30" pos:end="923:65"><name pos:start="923:30" pos:end="923:37">offsetof</name><argument_list pos:start="923:38" pos:end="923:65">(<argument pos:start="923:39" pos:end="923:49"><expr pos:start="923:39" pos:end="923:49"><name pos:start="923:39" pos:end="923:49">CPUX86State</name></expr></argument>,<argument pos:start="923:51" pos:end="923:64"><expr pos:start="923:51" pos:end="923:64"><name pos:start="923:51" pos:end="923:60"><name pos:start="923:51" pos:end="923:56">fpregs</name><index pos:start="923:57" pos:end="923:60">[<expr pos:start="923:58" pos:end="923:59"><name pos:start="923:58" pos:end="923:59">rm</name></expr>]</index></name><operator pos:start="923:61" pos:end="923:61">.</operator><name pos:start="923:62" pos:end="923:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="927:13" pos:end="927:61"><expr pos:start="927:13" pos:end="927:60"><name pos:start="927:13" pos:end="927:22">op1_offset</name> <operator pos:start="927:24" pos:end="927:24">=</operator> <call pos:start="927:26" pos:end="927:60"><name pos:start="927:26" pos:end="927:33">offsetof</name><argument_list pos:start="927:34" pos:end="927:60">(<argument pos:start="927:35" pos:end="927:45"><expr pos:start="927:35" pos:end="927:45"><name pos:start="927:35" pos:end="927:45">CPUX86State</name></expr></argument>,<argument pos:start="927:47" pos:end="927:59"><expr pos:start="927:47" pos:end="927:59"><name pos:start="927:47" pos:end="927:59"><name pos:start="927:47" pos:end="927:54">xmm_regs</name><index pos:start="927:55" pos:end="927:59">[<expr pos:start="927:56" pos:end="927:58"><name pos:start="927:56" pos:end="927:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="929:13" pos:end="929:60"><expr pos:start="929:13" pos:end="929:59"><call pos:start="929:13" pos:end="929:59"><name pos:start="929:13" pos:end="929:28">tcg_gen_addi_ptr</name><argument_list pos:start="929:29" pos:end="929:59">(<argument pos:start="929:30" pos:end="929:37"><expr pos:start="929:30" pos:end="929:37"><name pos:start="929:30" pos:end="929:37">cpu_ptr0</name></expr></argument>, <argument pos:start="929:40" pos:end="929:46"><expr pos:start="929:40" pos:end="929:46"><name pos:start="929:40" pos:end="929:46">cpu_env</name></expr></argument>, <argument pos:start="929:49" pos:end="929:58"><expr pos:start="929:49" pos:end="929:58"><name pos:start="929:49" pos:end="929:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="931:13" pos:end="931:60"><expr pos:start="931:13" pos:end="931:59"><call pos:start="931:13" pos:end="931:59"><name pos:start="931:13" pos:end="931:28">tcg_gen_addi_ptr</name><argument_list pos:start="931:29" pos:end="931:59">(<argument pos:start="931:30" pos:end="931:37"><expr pos:start="931:30" pos:end="931:37"><name pos:start="931:30" pos:end="931:37">cpu_ptr1</name></expr></argument>, <argument pos:start="931:40" pos:end="931:46"><expr pos:start="931:40" pos:end="931:46"><name pos:start="931:40" pos:end="931:46">cpu_env</name></expr></argument>, <argument pos:start="931:49" pos:end="931:58"><expr pos:start="931:49" pos:end="931:58"><name pos:start="931:49" pos:end="931:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="933:13" pos:end="949:13">switch<condition pos:start="933:19" pos:end="933:26">(<expr pos:start="933:20" pos:end="933:25"><name pos:start="933:20" pos:end="933:20">b</name> <operator pos:start="933:22" pos:end="933:23">&gt;&gt;</operator> <literal type="number" pos:start="933:25" pos:end="933:25">8</literal></expr>)</condition> <block pos:start="933:28" pos:end="949:13">{<block_content pos:start="935:13" pos:end="947:22">

            <case pos:start="935:13" pos:end="935:21">case <expr pos:start="935:18" pos:end="935:20"><literal type="number" pos:start="935:18" pos:end="935:20">0x0</literal></expr>:</case>

                <expr_stmt pos:start="937:17" pos:end="937:65"><expr pos:start="937:17" pos:end="937:64"><call pos:start="937:17" pos:end="937:64"><name pos:start="937:17" pos:end="937:35">gen_helper_cvtpi2ps</name><argument_list pos:start="937:36" pos:end="937:64">(<argument pos:start="937:37" pos:end="937:43"><expr pos:start="937:37" pos:end="937:43"><name pos:start="937:37" pos:end="937:43">cpu_env</name></expr></argument>, <argument pos:start="937:46" pos:end="937:53"><expr pos:start="937:46" pos:end="937:53"><name pos:start="937:46" pos:end="937:53">cpu_ptr0</name></expr></argument>, <argument pos:start="937:56" pos:end="937:63"><expr pos:start="937:56" pos:end="937:63"><name pos:start="937:56" pos:end="937:63">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="939:17" pos:end="939:22">break;</break>

            <default pos:start="941:13" pos:end="941:20">default:</default>

            <case pos:start="943:13" pos:end="943:21">case <expr pos:start="943:18" pos:end="943:20"><literal type="number" pos:start="943:18" pos:end="943:20">0x1</literal></expr>:</case>

                <expr_stmt pos:start="945:17" pos:end="945:65"><expr pos:start="945:17" pos:end="945:64"><call pos:start="945:17" pos:end="945:64"><name pos:start="945:17" pos:end="945:35">gen_helper_cvtpi2pd</name><argument_list pos:start="945:36" pos:end="945:64">(<argument pos:start="945:37" pos:end="945:43"><expr pos:start="945:37" pos:end="945:43"><name pos:start="945:37" pos:end="945:43">cpu_env</name></expr></argument>, <argument pos:start="945:46" pos:end="945:53"><expr pos:start="945:46" pos:end="945:53"><name pos:start="945:46" pos:end="945:53">cpu_ptr0</name></expr></argument>, <argument pos:start="945:56" pos:end="945:63"><expr pos:start="945:56" pos:end="945:63"><name pos:start="945:56" pos:end="945:63">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="947:17" pos:end="947:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="951:13" pos:end="951:18">break;</break>

        <case pos:start="953:9" pos:end="953:19">case <expr pos:start="953:14" pos:end="953:18"><literal type="number" pos:start="953:14" pos:end="953:18">0x22a</literal></expr>:</case> <comment type="block" pos:start="953:21" pos:end="953:34">/* cvtsi2ss */</comment>

        <case pos:start="955:9" pos:end="955:19">case <expr pos:start="955:14" pos:end="955:18"><literal type="number" pos:start="955:14" pos:end="955:18">0x32a</literal></expr>:</case> <comment type="block" pos:start="955:21" pos:end="955:34">/* cvtsi2sd */</comment>

            <expr_stmt pos:start="957:13" pos:end="957:36"><expr pos:start="957:13" pos:end="957:35"><name pos:start="957:13" pos:end="957:14">ot</name> <operator pos:start="957:16" pos:end="957:16">=</operator> <call pos:start="957:18" pos:end="957:35"><name pos:start="957:18" pos:end="957:25">mo_64_32</name><argument_list pos:start="957:26" pos:end="957:35">(<argument pos:start="957:27" pos:end="957:34"><expr pos:start="957:27" pos:end="957:34"><name pos:start="957:27" pos:end="957:34"><name pos:start="957:27" pos:end="957:27">s</name><operator pos:start="957:28" pos:end="957:29">-&gt;</operator><name pos:start="957:30" pos:end="957:34">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="959:13" pos:end="959:58"><expr pos:start="959:13" pos:end="959:57"><call pos:start="959:13" pos:end="959:57"><name pos:start="959:13" pos:end="959:26">gen_ldst_modrm</name><argument_list pos:start="959:27" pos:end="959:57">(<argument pos:start="959:28" pos:end="959:30"><expr pos:start="959:28" pos:end="959:30"><name pos:start="959:28" pos:end="959:30">env</name></expr></argument>, <argument pos:start="959:33" pos:end="959:33"><expr pos:start="959:33" pos:end="959:33"><name pos:start="959:33" pos:end="959:33">s</name></expr></argument>, <argument pos:start="959:36" pos:end="959:40"><expr pos:start="959:36" pos:end="959:40"><name pos:start="959:36" pos:end="959:40">modrm</name></expr></argument>, <argument pos:start="959:43" pos:end="959:44"><expr pos:start="959:43" pos:end="959:44"><name pos:start="959:43" pos:end="959:44">ot</name></expr></argument>, <argument pos:start="959:47" pos:end="959:53"><expr pos:start="959:47" pos:end="959:53"><name pos:start="959:47" pos:end="959:53">OR_TMP0</name></expr></argument>, <argument pos:start="959:56" pos:end="959:56"><expr pos:start="959:56" pos:end="959:56"><literal type="number" pos:start="959:56" pos:end="959:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="961:13" pos:end="961:61"><expr pos:start="961:13" pos:end="961:60"><name pos:start="961:13" pos:end="961:22">op1_offset</name> <operator pos:start="961:24" pos:end="961:24">=</operator> <call pos:start="961:26" pos:end="961:60"><name pos:start="961:26" pos:end="961:33">offsetof</name><argument_list pos:start="961:34" pos:end="961:60">(<argument pos:start="961:35" pos:end="961:45"><expr pos:start="961:35" pos:end="961:45"><name pos:start="961:35" pos:end="961:45">CPUX86State</name></expr></argument>,<argument pos:start="961:47" pos:end="961:59"><expr pos:start="961:47" pos:end="961:59"><name pos:start="961:47" pos:end="961:59"><name pos:start="961:47" pos:end="961:54">xmm_regs</name><index pos:start="961:55" pos:end="961:59">[<expr pos:start="961:56" pos:end="961:58"><name pos:start="961:56" pos:end="961:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="963:13" pos:end="963:60"><expr pos:start="963:13" pos:end="963:59"><call pos:start="963:13" pos:end="963:59"><name pos:start="963:13" pos:end="963:28">tcg_gen_addi_ptr</name><argument_list pos:start="963:29" pos:end="963:59">(<argument pos:start="963:30" pos:end="963:37"><expr pos:start="963:30" pos:end="963:37"><name pos:start="963:30" pos:end="963:37">cpu_ptr0</name></expr></argument>, <argument pos:start="963:40" pos:end="963:46"><expr pos:start="963:40" pos:end="963:46"><name pos:start="963:40" pos:end="963:46">cpu_env</name></expr></argument>, <argument pos:start="963:49" pos:end="963:58"><expr pos:start="963:49" pos:end="963:58"><name pos:start="963:49" pos:end="963:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="965:13" pos:end="987:13"><if pos:start="965:13" pos:end="973:13">if <condition pos:start="965:16" pos:end="965:28">(<expr pos:start="965:17" pos:end="965:27"><name pos:start="965:17" pos:end="965:18">ot</name> <operator pos:start="965:20" pos:end="965:21">==</operator> <name pos:start="965:23" pos:end="965:27">MO_32</name></expr>)</condition> <block pos:start="965:30" pos:end="973:13">{<block_content pos:start="967:17" pos:end="971:60">

                <decl_stmt pos:start="967:17" pos:end="967:73"><decl pos:start="967:17" pos:end="967:72"><type pos:start="967:17" pos:end="967:29"><name pos:start="967:17" pos:end="967:29">SSEFunc_0_epi</name></type> <name pos:start="967:31" pos:end="967:40">sse_fn_epi</name> <init pos:start="967:42" pos:end="967:72">= <expr pos:start="967:44" pos:end="967:72"><name pos:start="967:44" pos:end="967:72"><name pos:start="967:44" pos:end="967:58">sse_op_table3ai</name><index pos:start="967:59" pos:end="967:72">[<expr pos:start="967:60" pos:end="967:71"><operator pos:start="967:60" pos:end="967:60">(</operator><name pos:start="967:61" pos:end="967:61">b</name> <operator pos:start="967:63" pos:end="967:64">&gt;&gt;</operator> <literal type="number" pos:start="967:66" pos:end="967:66">8</literal><operator pos:start="967:67" pos:end="967:67">)</operator> <operator pos:start="967:69" pos:end="967:69">&amp;</operator> <literal type="number" pos:start="967:71" pos:end="967:71">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="969:17" pos:end="969:59"><expr pos:start="969:17" pos:end="969:58"><call pos:start="969:17" pos:end="969:58"><name pos:start="969:17" pos:end="969:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="969:37" pos:end="969:58">(<argument pos:start="969:38" pos:end="969:49"><expr pos:start="969:38" pos:end="969:49"><name pos:start="969:38" pos:end="969:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="969:52" pos:end="969:57"><expr pos:start="969:52" pos:end="969:57"><name pos:start="969:52" pos:end="969:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="971:17" pos:end="971:60"><expr pos:start="971:17" pos:end="971:59"><call pos:start="971:17" pos:end="971:59"><name pos:start="971:17" pos:end="971:26">sse_fn_epi</name><argument_list pos:start="971:27" pos:end="971:59">(<argument pos:start="971:28" pos:end="971:34"><expr pos:start="971:28" pos:end="971:34"><name pos:start="971:28" pos:end="971:34">cpu_env</name></expr></argument>, <argument pos:start="971:37" pos:end="971:44"><expr pos:start="971:37" pos:end="971:44"><name pos:start="971:37" pos:end="971:44">cpu_ptr0</name></expr></argument>, <argument pos:start="971:47" pos:end="971:58"><expr pos:start="971:47" pos:end="971:58"><name pos:start="971:47" pos:end="971:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="973:15" pos:end="987:13">else <block pos:start="973:20" pos:end="987:13">{<block_content pos:start="977:17" pos:end="986:0">

<cpp:ifdef pos:start="975:1" pos:end="975:20">#<cpp:directive pos:start="975:2" pos:end="975:6">ifdef</cpp:directive> <name pos:start="975:8" pos:end="975:20">TARGET_X86_64</name></cpp:ifdef>

                <decl_stmt pos:start="977:17" pos:end="977:73"><decl pos:start="977:17" pos:end="977:72"><type pos:start="977:17" pos:end="977:29"><name pos:start="977:17" pos:end="977:29">SSEFunc_0_epl</name></type> <name pos:start="977:31" pos:end="977:40">sse_fn_epl</name> <init pos:start="977:42" pos:end="977:72">= <expr pos:start="977:44" pos:end="977:72"><name pos:start="977:44" pos:end="977:72"><name pos:start="977:44" pos:end="977:58">sse_op_table3aq</name><index pos:start="977:59" pos:end="977:72">[<expr pos:start="977:60" pos:end="977:71"><operator pos:start="977:60" pos:end="977:60">(</operator><name pos:start="977:61" pos:end="977:61">b</name> <operator pos:start="977:63" pos:end="977:64">&gt;&gt;</operator> <literal type="number" pos:start="977:66" pos:end="977:66">8</literal><operator pos:start="977:67" pos:end="977:67">)</operator> <operator pos:start="977:69" pos:end="977:69">&amp;</operator> <literal type="number" pos:start="977:71" pos:end="977:71">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="979:17" pos:end="982:0"><expr pos:start="979:17" pos:end="979:53"><call pos:start="979:17" pos:end="979:53"><name pos:start="979:17" pos:end="979:26">sse_fn_epl</name><argument_list pos:start="979:27" pos:end="979:53">(<argument pos:start="979:28" pos:end="979:34"><expr pos:start="979:28" pos:end="979:34"><name pos:start="979:28" pos:end="979:34">cpu_env</name></expr></argument>, <argument pos:start="979:37" pos:end="979:44"><expr pos:start="979:37" pos:end="979:44"><name pos:start="979:37" pos:end="979:44">cpu_ptr0</name></expr></argument>, <argument pos:start="979:47" pos:end="979:52"><expr pos:start="979:47" pos:end="979:52"><name pos:start="979:47" pos:end="979:52">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="981:1" pos:end="981:5">#<cpp:directive pos:start="981:2" pos:end="981:5">else</cpp:directive></cpp:else>

                <goto pos:start="983:17" pos:end="986:0">goto <name pos:start="983:22" pos:end="983:31">illegal_op</name>;</goto>

<cpp:endif pos:start="985:1" pos:end="985:6">#<cpp:directive pos:start="985:2" pos:end="985:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

            <break pos:start="989:13" pos:end="989:18">break;</break>

        <case pos:start="991:9" pos:end="991:19">case <expr pos:start="991:14" pos:end="991:18"><literal type="number" pos:start="991:14" pos:end="991:18">0x02c</literal></expr>:</case> <comment type="block" pos:start="991:21" pos:end="991:35">/* cvttps2pi */</comment>

        <case pos:start="993:9" pos:end="993:19">case <expr pos:start="993:14" pos:end="993:18"><literal type="number" pos:start="993:14" pos:end="993:18">0x12c</literal></expr>:</case> <comment type="block" pos:start="993:21" pos:end="993:35">/* cvttpd2pi */</comment>

        <case pos:start="995:9" pos:end="995:19">case <expr pos:start="995:14" pos:end="995:18"><literal type="number" pos:start="995:14" pos:end="995:18">0x02d</literal></expr>:</case> <comment type="block" pos:start="995:21" pos:end="995:34">/* cvtps2pi */</comment>

        <case pos:start="997:9" pos:end="997:19">case <expr pos:start="997:14" pos:end="997:18"><literal type="number" pos:start="997:14" pos:end="997:18">0x12d</literal></expr>:</case> <comment type="block" pos:start="997:21" pos:end="997:34">/* cvtpd2pi */</comment>

            <expr_stmt pos:start="999:13" pos:end="999:42"><expr pos:start="999:13" pos:end="999:41"><call pos:start="999:13" pos:end="999:41"><name pos:start="999:13" pos:end="999:32">gen_helper_enter_mmx</name><argument_list pos:start="999:33" pos:end="999:41">(<argument pos:start="999:34" pos:end="999:40"><expr pos:start="999:34" pos:end="999:40"><name pos:start="999:34" pos:end="999:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1001:13" pos:end="1015:13"><if pos:start="1001:13" pos:end="1009:13">if <condition pos:start="1001:16" pos:end="1001:25">(<expr pos:start="1001:17" pos:end="1001:24"><name pos:start="1001:17" pos:end="1001:19">mod</name> <operator pos:start="1001:21" pos:end="1001:22">!=</operator> <literal type="number" pos:start="1001:24" pos:end="1001:24">3</literal></expr>)</condition> <block pos:start="1001:27" pos:end="1009:13">{<block_content pos:start="1003:17" pos:end="1007:46">

                <expr_stmt pos:start="1003:17" pos:end="1003:45"><expr pos:start="1003:17" pos:end="1003:44"><call pos:start="1003:17" pos:end="1003:44"><name pos:start="1003:17" pos:end="1003:29">gen_lea_modrm</name><argument_list pos:start="1003:30" pos:end="1003:44">(<argument pos:start="1003:31" pos:end="1003:33"><expr pos:start="1003:31" pos:end="1003:33"><name pos:start="1003:31" pos:end="1003:33">env</name></expr></argument>, <argument pos:start="1003:36" pos:end="1003:36"><expr pos:start="1003:36" pos:end="1003:36"><name pos:start="1003:36" pos:end="1003:36">s</name></expr></argument>, <argument pos:start="1003:39" pos:end="1003:43"><expr pos:start="1003:39" pos:end="1003:43"><name pos:start="1003:39" pos:end="1003:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1005:17" pos:end="1005:58"><expr pos:start="1005:17" pos:end="1005:57"><name pos:start="1005:17" pos:end="1005:26">op2_offset</name> <operator pos:start="1005:28" pos:end="1005:28">=</operator> <call pos:start="1005:30" pos:end="1005:57"><name pos:start="1005:30" pos:end="1005:37">offsetof</name><argument_list pos:start="1005:38" pos:end="1005:57">(<argument pos:start="1005:39" pos:end="1005:49"><expr pos:start="1005:39" pos:end="1005:49"><name pos:start="1005:39" pos:end="1005:49">CPUX86State</name></expr></argument>,<argument pos:start="1005:51" pos:end="1005:56"><expr pos:start="1005:51" pos:end="1005:56"><name pos:start="1005:51" pos:end="1005:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1007:17" pos:end="1007:46"><expr pos:start="1007:17" pos:end="1007:45"><call pos:start="1007:17" pos:end="1007:45"><name pos:start="1007:17" pos:end="1007:30">gen_ldo_env_A0</name><argument_list pos:start="1007:31" pos:end="1007:45">(<argument pos:start="1007:32" pos:end="1007:32"><expr pos:start="1007:32" pos:end="1007:32"><name pos:start="1007:32" pos:end="1007:32">s</name></expr></argument>, <argument pos:start="1007:35" pos:end="1007:44"><expr pos:start="1007:35" pos:end="1007:44"><name pos:start="1007:35" pos:end="1007:44">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1009:15" pos:end="1015:13">else <block pos:start="1009:20" pos:end="1015:13">{<block_content pos:start="1011:17" pos:end="1013:64">

                <expr_stmt pos:start="1011:17" pos:end="1011:44"><expr pos:start="1011:17" pos:end="1011:43"><name pos:start="1011:17" pos:end="1011:18">rm</name> <operator pos:start="1011:20" pos:end="1011:20">=</operator> <operator pos:start="1011:22" pos:end="1011:22">(</operator><name pos:start="1011:23" pos:end="1011:27">modrm</name> <operator pos:start="1011:29" pos:end="1011:29">&amp;</operator> <literal type="number" pos:start="1011:31" pos:end="1011:31">7</literal><operator pos:start="1011:32" pos:end="1011:32">)</operator> <operator pos:start="1011:34" pos:end="1011:34">|</operator> <call pos:start="1011:36" pos:end="1011:43"><name pos:start="1011:36" pos:end="1011:40">REX_B</name><argument_list pos:start="1011:41" pos:end="1011:43">(<argument pos:start="1011:42" pos:end="1011:42"><expr pos:start="1011:42" pos:end="1011:42"><name pos:start="1011:42" pos:end="1011:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1013:17" pos:end="1013:64"><expr pos:start="1013:17" pos:end="1013:63"><name pos:start="1013:17" pos:end="1013:26">op2_offset</name> <operator pos:start="1013:28" pos:end="1013:28">=</operator> <call pos:start="1013:30" pos:end="1013:63"><name pos:start="1013:30" pos:end="1013:37">offsetof</name><argument_list pos:start="1013:38" pos:end="1013:63">(<argument pos:start="1013:39" pos:end="1013:49"><expr pos:start="1013:39" pos:end="1013:49"><name pos:start="1013:39" pos:end="1013:49">CPUX86State</name></expr></argument>,<argument pos:start="1013:51" pos:end="1013:62"><expr pos:start="1013:51" pos:end="1013:62"><name pos:start="1013:51" pos:end="1013:62"><name pos:start="1013:51" pos:end="1013:58">xmm_regs</name><index pos:start="1013:59" pos:end="1013:62">[<expr pos:start="1013:60" pos:end="1013:61"><name pos:start="1013:60" pos:end="1013:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1017:13" pos:end="1017:67"><expr pos:start="1017:13" pos:end="1017:66"><name pos:start="1017:13" pos:end="1017:22">op1_offset</name> <operator pos:start="1017:24" pos:end="1017:24">=</operator> <call pos:start="1017:26" pos:end="1017:66"><name pos:start="1017:26" pos:end="1017:33">offsetof</name><argument_list pos:start="1017:34" pos:end="1017:66">(<argument pos:start="1017:35" pos:end="1017:45"><expr pos:start="1017:35" pos:end="1017:45"><name pos:start="1017:35" pos:end="1017:45">CPUX86State</name></expr></argument>,<argument pos:start="1017:47" pos:end="1017:65"><expr pos:start="1017:47" pos:end="1017:65"><name pos:start="1017:47" pos:end="1017:61"><name pos:start="1017:47" pos:end="1017:52">fpregs</name><index pos:start="1017:53" pos:end="1017:61">[<expr pos:start="1017:54" pos:end="1017:60"><name pos:start="1017:54" pos:end="1017:56">reg</name> <operator pos:start="1017:58" pos:end="1017:58">&amp;</operator> <literal type="number" pos:start="1017:60" pos:end="1017:60">7</literal></expr>]</index></name><operator pos:start="1017:62" pos:end="1017:62">.</operator><name pos:start="1017:63" pos:end="1017:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1019:13" pos:end="1019:60"><expr pos:start="1019:13" pos:end="1019:59"><call pos:start="1019:13" pos:end="1019:59"><name pos:start="1019:13" pos:end="1019:28">tcg_gen_addi_ptr</name><argument_list pos:start="1019:29" pos:end="1019:59">(<argument pos:start="1019:30" pos:end="1019:37"><expr pos:start="1019:30" pos:end="1019:37"><name pos:start="1019:30" pos:end="1019:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1019:40" pos:end="1019:46"><expr pos:start="1019:40" pos:end="1019:46"><name pos:start="1019:40" pos:end="1019:46">cpu_env</name></expr></argument>, <argument pos:start="1019:49" pos:end="1019:58"><expr pos:start="1019:49" pos:end="1019:58"><name pos:start="1019:49" pos:end="1019:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1021:13" pos:end="1021:60"><expr pos:start="1021:13" pos:end="1021:59"><call pos:start="1021:13" pos:end="1021:59"><name pos:start="1021:13" pos:end="1021:28">tcg_gen_addi_ptr</name><argument_list pos:start="1021:29" pos:end="1021:59">(<argument pos:start="1021:30" pos:end="1021:37"><expr pos:start="1021:30" pos:end="1021:37"><name pos:start="1021:30" pos:end="1021:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1021:40" pos:end="1021:46"><expr pos:start="1021:40" pos:end="1021:46"><name pos:start="1021:40" pos:end="1021:46">cpu_env</name></expr></argument>, <argument pos:start="1021:49" pos:end="1021:58"><expr pos:start="1021:49" pos:end="1021:58"><name pos:start="1021:49" pos:end="1021:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1023:13" pos:end="1049:13">switch<condition pos:start="1023:19" pos:end="1023:21">(<expr pos:start="1023:20" pos:end="1023:20"><name pos:start="1023:20" pos:end="1023:20">b</name></expr>)</condition> <block pos:start="1023:23" pos:end="1049:13">{<block_content pos:start="1025:13" pos:end="1047:22">

            <case pos:start="1025:13" pos:end="1025:23">case <expr pos:start="1025:18" pos:end="1025:22"><literal type="number" pos:start="1025:18" pos:end="1025:22">0x02c</literal></expr>:</case>

                <expr_stmt pos:start="1027:17" pos:end="1027:66"><expr pos:start="1027:17" pos:end="1027:65"><call pos:start="1027:17" pos:end="1027:65"><name pos:start="1027:17" pos:end="1027:36">gen_helper_cvttps2pi</name><argument_list pos:start="1027:37" pos:end="1027:65">(<argument pos:start="1027:38" pos:end="1027:44"><expr pos:start="1027:38" pos:end="1027:44"><name pos:start="1027:38" pos:end="1027:44">cpu_env</name></expr></argument>, <argument pos:start="1027:47" pos:end="1027:54"><expr pos:start="1027:47" pos:end="1027:54"><name pos:start="1027:47" pos:end="1027:54">cpu_ptr0</name></expr></argument>, <argument pos:start="1027:57" pos:end="1027:64"><expr pos:start="1027:57" pos:end="1027:64"><name pos:start="1027:57" pos:end="1027:64">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1029:17" pos:end="1029:22">break;</break>

            <case pos:start="1031:13" pos:end="1031:23">case <expr pos:start="1031:18" pos:end="1031:22"><literal type="number" pos:start="1031:18" pos:end="1031:22">0x12c</literal></expr>:</case>

                <expr_stmt pos:start="1033:17" pos:end="1033:66"><expr pos:start="1033:17" pos:end="1033:65"><call pos:start="1033:17" pos:end="1033:65"><name pos:start="1033:17" pos:end="1033:36">gen_helper_cvttpd2pi</name><argument_list pos:start="1033:37" pos:end="1033:65">(<argument pos:start="1033:38" pos:end="1033:44"><expr pos:start="1033:38" pos:end="1033:44"><name pos:start="1033:38" pos:end="1033:44">cpu_env</name></expr></argument>, <argument pos:start="1033:47" pos:end="1033:54"><expr pos:start="1033:47" pos:end="1033:54"><name pos:start="1033:47" pos:end="1033:54">cpu_ptr0</name></expr></argument>, <argument pos:start="1033:57" pos:end="1033:64"><expr pos:start="1033:57" pos:end="1033:64"><name pos:start="1033:57" pos:end="1033:64">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1035:17" pos:end="1035:22">break;</break>

            <case pos:start="1037:13" pos:end="1037:23">case <expr pos:start="1037:18" pos:end="1037:22"><literal type="number" pos:start="1037:18" pos:end="1037:22">0x02d</literal></expr>:</case>

                <expr_stmt pos:start="1039:17" pos:end="1039:65"><expr pos:start="1039:17" pos:end="1039:64"><call pos:start="1039:17" pos:end="1039:64"><name pos:start="1039:17" pos:end="1039:35">gen_helper_cvtps2pi</name><argument_list pos:start="1039:36" pos:end="1039:64">(<argument pos:start="1039:37" pos:end="1039:43"><expr pos:start="1039:37" pos:end="1039:43"><name pos:start="1039:37" pos:end="1039:43">cpu_env</name></expr></argument>, <argument pos:start="1039:46" pos:end="1039:53"><expr pos:start="1039:46" pos:end="1039:53"><name pos:start="1039:46" pos:end="1039:53">cpu_ptr0</name></expr></argument>, <argument pos:start="1039:56" pos:end="1039:63"><expr pos:start="1039:56" pos:end="1039:63"><name pos:start="1039:56" pos:end="1039:63">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1041:17" pos:end="1041:22">break;</break>

            <case pos:start="1043:13" pos:end="1043:23">case <expr pos:start="1043:18" pos:end="1043:22"><literal type="number" pos:start="1043:18" pos:end="1043:22">0x12d</literal></expr>:</case>

                <expr_stmt pos:start="1045:17" pos:end="1045:65"><expr pos:start="1045:17" pos:end="1045:64"><call pos:start="1045:17" pos:end="1045:64"><name pos:start="1045:17" pos:end="1045:35">gen_helper_cvtpd2pi</name><argument_list pos:start="1045:36" pos:end="1045:64">(<argument pos:start="1045:37" pos:end="1045:43"><expr pos:start="1045:37" pos:end="1045:43"><name pos:start="1045:37" pos:end="1045:43">cpu_env</name></expr></argument>, <argument pos:start="1045:46" pos:end="1045:53"><expr pos:start="1045:46" pos:end="1045:53"><name pos:start="1045:46" pos:end="1045:53">cpu_ptr0</name></expr></argument>, <argument pos:start="1045:56" pos:end="1045:63"><expr pos:start="1045:56" pos:end="1045:63"><name pos:start="1045:56" pos:end="1045:63">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1047:17" pos:end="1047:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="1051:13" pos:end="1051:18">break;</break>

        <case pos:start="1053:9" pos:end="1053:19">case <expr pos:start="1053:14" pos:end="1053:18"><literal type="number" pos:start="1053:14" pos:end="1053:18">0x22c</literal></expr>:</case> <comment type="block" pos:start="1053:21" pos:end="1053:35">/* cvttss2si */</comment>

        <case pos:start="1055:9" pos:end="1055:19">case <expr pos:start="1055:14" pos:end="1055:18"><literal type="number" pos:start="1055:14" pos:end="1055:18">0x32c</literal></expr>:</case> <comment type="block" pos:start="1055:21" pos:end="1055:35">/* cvttsd2si */</comment>

        <case pos:start="1057:9" pos:end="1057:19">case <expr pos:start="1057:14" pos:end="1057:18"><literal type="number" pos:start="1057:14" pos:end="1057:18">0x22d</literal></expr>:</case> <comment type="block" pos:start="1057:21" pos:end="1057:34">/* cvtss2si */</comment>

        <case pos:start="1059:9" pos:end="1059:19">case <expr pos:start="1059:14" pos:end="1059:18"><literal type="number" pos:start="1059:14" pos:end="1059:18">0x32d</literal></expr>:</case> <comment type="block" pos:start="1059:21" pos:end="1059:34">/* cvtsd2si */</comment>

            <expr_stmt pos:start="1061:13" pos:end="1061:36"><expr pos:start="1061:13" pos:end="1061:35"><name pos:start="1061:13" pos:end="1061:14">ot</name> <operator pos:start="1061:16" pos:end="1061:16">=</operator> <call pos:start="1061:18" pos:end="1061:35"><name pos:start="1061:18" pos:end="1061:25">mo_64_32</name><argument_list pos:start="1061:26" pos:end="1061:35">(<argument pos:start="1061:27" pos:end="1061:34"><expr pos:start="1061:27" pos:end="1061:34"><name pos:start="1061:27" pos:end="1061:34"><name pos:start="1061:27" pos:end="1061:27">s</name><operator pos:start="1061:28" pos:end="1061:29">-&gt;</operator><name pos:start="1061:30" pos:end="1061:34">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1063:13" pos:end="1087:13"><if pos:start="1063:13" pos:end="1081:13">if <condition pos:start="1063:16" pos:end="1063:25">(<expr pos:start="1063:17" pos:end="1063:24"><name pos:start="1063:17" pos:end="1063:19">mod</name> <operator pos:start="1063:21" pos:end="1063:22">!=</operator> <literal type="number" pos:start="1063:24" pos:end="1063:24">3</literal></expr>)</condition> <block pos:start="1063:27" pos:end="1081:13">{<block_content pos:start="1065:17" pos:end="1079:58">

                <expr_stmt pos:start="1065:17" pos:end="1065:45"><expr pos:start="1065:17" pos:end="1065:44"><call pos:start="1065:17" pos:end="1065:44"><name pos:start="1065:17" pos:end="1065:29">gen_lea_modrm</name><argument_list pos:start="1065:30" pos:end="1065:44">(<argument pos:start="1065:31" pos:end="1065:33"><expr pos:start="1065:31" pos:end="1065:33"><name pos:start="1065:31" pos:end="1065:33">env</name></expr></argument>, <argument pos:start="1065:36" pos:end="1065:36"><expr pos:start="1065:36" pos:end="1065:36"><name pos:start="1065:36" pos:end="1065:36">s</name></expr></argument>, <argument pos:start="1065:39" pos:end="1065:43"><expr pos:start="1065:39" pos:end="1065:43"><name pos:start="1065:39" pos:end="1065:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1067:17" pos:end="1077:17"><if pos:start="1067:17" pos:end="1071:17">if <condition pos:start="1067:20" pos:end="1067:33">(<expr pos:start="1067:21" pos:end="1067:32"><operator pos:start="1067:21" pos:end="1067:21">(</operator><name pos:start="1067:22" pos:end="1067:22">b</name> <operator pos:start="1067:24" pos:end="1067:25">&gt;&gt;</operator> <literal type="number" pos:start="1067:27" pos:end="1067:27">8</literal><operator pos:start="1067:28" pos:end="1067:28">)</operator> <operator pos:start="1067:30" pos:end="1067:30">&amp;</operator> <literal type="number" pos:start="1067:32" pos:end="1067:32">1</literal></expr>)</condition> <block pos:start="1067:35" pos:end="1071:17">{<block_content pos:start="1069:21" pos:end="1069:78">

                    <expr_stmt pos:start="1069:21" pos:end="1069:78"><expr pos:start="1069:21" pos:end="1069:77"><call pos:start="1069:21" pos:end="1069:77"><name pos:start="1069:21" pos:end="1069:34">gen_ldq_env_A0</name><argument_list pos:start="1069:35" pos:end="1069:77">(<argument pos:start="1069:36" pos:end="1069:36"><expr pos:start="1069:36" pos:end="1069:36"><name pos:start="1069:36" pos:end="1069:36">s</name></expr></argument>, <argument pos:start="1069:39" pos:end="1069:76"><expr pos:start="1069:39" pos:end="1069:76"><call pos:start="1069:39" pos:end="1069:76"><name pos:start="1069:39" pos:end="1069:46">offsetof</name><argument_list pos:start="1069:47" pos:end="1069:76">(<argument pos:start="1069:48" pos:end="1069:58"><expr pos:start="1069:48" pos:end="1069:58"><name pos:start="1069:48" pos:end="1069:58">CPUX86State</name></expr></argument>, <argument pos:start="1069:61" pos:end="1069:75"><expr pos:start="1069:61" pos:end="1069:75"><call pos:start="1069:61" pos:end="1069:75"><name pos:start="1069:61" pos:end="1069:72"><name pos:start="1069:61" pos:end="1069:66">xmm_t0</name><operator pos:start="1069:67" pos:end="1069:67">.</operator><name pos:start="1069:68" pos:end="1069:72">ZMM_Q</name></name><argument_list pos:start="1069:73" pos:end="1069:75">(<argument pos:start="1069:74" pos:end="1069:74"><expr pos:start="1069:74" pos:end="1069:74"><literal type="number" pos:start="1069:74" pos:end="1069:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1071:19" pos:end="1077:17">else <block pos:start="1071:24" pos:end="1077:17">{<block_content pos:start="1073:21" pos:end="1075:92">

                    <expr_stmt pos:start="1073:21" pos:end="1073:58"><expr pos:start="1073:21" pos:end="1073:57"><call pos:start="1073:21" pos:end="1073:57"><name pos:start="1073:21" pos:end="1073:31">gen_op_ld_v</name><argument_list pos:start="1073:32" pos:end="1073:57">(<argument pos:start="1073:33" pos:end="1073:33"><expr pos:start="1073:33" pos:end="1073:33"><name pos:start="1073:33" pos:end="1073:33">s</name></expr></argument>, <argument pos:start="1073:36" pos:end="1073:40"><expr pos:start="1073:36" pos:end="1073:40"><name pos:start="1073:36" pos:end="1073:40">MO_32</name></expr></argument>, <argument pos:start="1073:43" pos:end="1073:48"><expr pos:start="1073:43" pos:end="1073:48"><name pos:start="1073:43" pos:end="1073:48">cpu_T0</name></expr></argument>, <argument pos:start="1073:51" pos:end="1073:56"><expr pos:start="1073:51" pos:end="1073:56"><name pos:start="1073:51" pos:end="1073:56">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1075:21" pos:end="1075:92"><expr pos:start="1075:21" pos:end="1075:91"><call pos:start="1075:21" pos:end="1075:91"><name pos:start="1075:21" pos:end="1075:35">tcg_gen_st32_tl</name><argument_list pos:start="1075:36" pos:end="1075:91">(<argument pos:start="1075:37" pos:end="1075:42"><expr pos:start="1075:37" pos:end="1075:42"><name pos:start="1075:37" pos:end="1075:42">cpu_T0</name></expr></argument>, <argument pos:start="1075:45" pos:end="1075:51"><expr pos:start="1075:45" pos:end="1075:51"><name pos:start="1075:45" pos:end="1075:51">cpu_env</name></expr></argument>, <argument pos:start="1075:54" pos:end="1075:90"><expr pos:start="1075:54" pos:end="1075:90"><call pos:start="1075:54" pos:end="1075:90"><name pos:start="1075:54" pos:end="1075:61">offsetof</name><argument_list pos:start="1075:62" pos:end="1075:90">(<argument pos:start="1075:63" pos:end="1075:73"><expr pos:start="1075:63" pos:end="1075:73"><name pos:start="1075:63" pos:end="1075:73">CPUX86State</name></expr></argument>,<argument pos:start="1075:75" pos:end="1075:89"><expr pos:start="1075:75" pos:end="1075:89"><call pos:start="1075:75" pos:end="1075:89"><name pos:start="1075:75" pos:end="1075:86"><name pos:start="1075:75" pos:end="1075:80">xmm_t0</name><operator pos:start="1075:81" pos:end="1075:81">.</operator><name pos:start="1075:82" pos:end="1075:86">ZMM_L</name></name><argument_list pos:start="1075:87" pos:end="1075:89">(<argument pos:start="1075:88" pos:end="1075:88"><expr pos:start="1075:88" pos:end="1075:88"><literal type="number" pos:start="1075:88" pos:end="1075:88">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1079:17" pos:end="1079:58"><expr pos:start="1079:17" pos:end="1079:57"><name pos:start="1079:17" pos:end="1079:26">op2_offset</name> <operator pos:start="1079:28" pos:end="1079:28">=</operator> <call pos:start="1079:30" pos:end="1079:57"><name pos:start="1079:30" pos:end="1079:37">offsetof</name><argument_list pos:start="1079:38" pos:end="1079:57">(<argument pos:start="1079:39" pos:end="1079:49"><expr pos:start="1079:39" pos:end="1079:49"><name pos:start="1079:39" pos:end="1079:49">CPUX86State</name></expr></argument>,<argument pos:start="1079:51" pos:end="1079:56"><expr pos:start="1079:51" pos:end="1079:56"><name pos:start="1079:51" pos:end="1079:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1081:15" pos:end="1087:13">else <block pos:start="1081:20" pos:end="1087:13">{<block_content pos:start="1083:17" pos:end="1085:64">

                <expr_stmt pos:start="1083:17" pos:end="1083:44"><expr pos:start="1083:17" pos:end="1083:43"><name pos:start="1083:17" pos:end="1083:18">rm</name> <operator pos:start="1083:20" pos:end="1083:20">=</operator> <operator pos:start="1083:22" pos:end="1083:22">(</operator><name pos:start="1083:23" pos:end="1083:27">modrm</name> <operator pos:start="1083:29" pos:end="1083:29">&amp;</operator> <literal type="number" pos:start="1083:31" pos:end="1083:31">7</literal><operator pos:start="1083:32" pos:end="1083:32">)</operator> <operator pos:start="1083:34" pos:end="1083:34">|</operator> <call pos:start="1083:36" pos:end="1083:43"><name pos:start="1083:36" pos:end="1083:40">REX_B</name><argument_list pos:start="1083:41" pos:end="1083:43">(<argument pos:start="1083:42" pos:end="1083:42"><expr pos:start="1083:42" pos:end="1083:42"><name pos:start="1083:42" pos:end="1083:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1085:17" pos:end="1085:64"><expr pos:start="1085:17" pos:end="1085:63"><name pos:start="1085:17" pos:end="1085:26">op2_offset</name> <operator pos:start="1085:28" pos:end="1085:28">=</operator> <call pos:start="1085:30" pos:end="1085:63"><name pos:start="1085:30" pos:end="1085:37">offsetof</name><argument_list pos:start="1085:38" pos:end="1085:63">(<argument pos:start="1085:39" pos:end="1085:49"><expr pos:start="1085:39" pos:end="1085:49"><name pos:start="1085:39" pos:end="1085:49">CPUX86State</name></expr></argument>,<argument pos:start="1085:51" pos:end="1085:62"><expr pos:start="1085:51" pos:end="1085:62"><name pos:start="1085:51" pos:end="1085:62"><name pos:start="1085:51" pos:end="1085:58">xmm_regs</name><index pos:start="1085:59" pos:end="1085:62">[<expr pos:start="1085:60" pos:end="1085:61"><name pos:start="1085:60" pos:end="1085:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1089:13" pos:end="1089:60"><expr pos:start="1089:13" pos:end="1089:59"><call pos:start="1089:13" pos:end="1089:59"><name pos:start="1089:13" pos:end="1089:28">tcg_gen_addi_ptr</name><argument_list pos:start="1089:29" pos:end="1089:59">(<argument pos:start="1089:30" pos:end="1089:37"><expr pos:start="1089:30" pos:end="1089:37"><name pos:start="1089:30" pos:end="1089:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1089:40" pos:end="1089:46"><expr pos:start="1089:40" pos:end="1089:46"><name pos:start="1089:40" pos:end="1089:46">cpu_env</name></expr></argument>, <argument pos:start="1089:49" pos:end="1089:58"><expr pos:start="1089:49" pos:end="1089:58"><name pos:start="1089:49" pos:end="1089:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1091:13" pos:end="1117:13"><if pos:start="1091:13" pos:end="1101:13">if <condition pos:start="1091:16" pos:end="1091:28">(<expr pos:start="1091:17" pos:end="1091:27"><name pos:start="1091:17" pos:end="1091:18">ot</name> <operator pos:start="1091:20" pos:end="1091:21">==</operator> <name pos:start="1091:23" pos:end="1091:27">MO_32</name></expr>)</condition> <block pos:start="1091:30" pos:end="1101:13">{<block_content pos:start="1093:17" pos:end="1099:58">

                <decl_stmt pos:start="1093:17" pos:end="1095:62"><decl pos:start="1093:17" pos:end="1095:61"><type pos:start="1093:17" pos:end="1093:28"><name pos:start="1093:17" pos:end="1093:28">SSEFunc_i_ep</name></type> <name pos:start="1093:30" pos:end="1093:40">sse_fn_i_ep</name> <init pos:start="1093:42" pos:end="1095:61">=

                    <expr pos:start="1095:21" pos:end="1095:61"><name pos:start="1095:21" pos:end="1095:61"><name pos:start="1095:21" pos:end="1095:35">sse_op_table3bi</name><index pos:start="1095:36" pos:end="1095:61">[<expr pos:start="1095:37" pos:end="1095:60"><operator pos:start="1095:37" pos:end="1095:37">(</operator><operator pos:start="1095:38" pos:end="1095:38">(</operator><name pos:start="1095:39" pos:end="1095:39">b</name> <operator pos:start="1095:41" pos:end="1095:42">&gt;&gt;</operator> <literal type="number" pos:start="1095:44" pos:end="1095:44">7</literal><operator pos:start="1095:45" pos:end="1095:45">)</operator> <operator pos:start="1095:47" pos:end="1095:47">&amp;</operator> <literal type="number" pos:start="1095:49" pos:end="1095:49">2</literal><operator pos:start="1095:50" pos:end="1095:50">)</operator> <operator pos:start="1095:52" pos:end="1095:52">|</operator> <operator pos:start="1095:54" pos:end="1095:54">(</operator><name pos:start="1095:55" pos:end="1095:55">b</name> <operator pos:start="1095:57" pos:end="1095:57">&amp;</operator> <literal type="number" pos:start="1095:59" pos:end="1095:59">1</literal><operator pos:start="1095:60" pos:end="1095:60">)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1097:17" pos:end="1097:61"><expr pos:start="1097:17" pos:end="1097:60"><call pos:start="1097:17" pos:end="1097:60"><name pos:start="1097:17" pos:end="1097:27">sse_fn_i_ep</name><argument_list pos:start="1097:28" pos:end="1097:60">(<argument pos:start="1097:29" pos:end="1097:40"><expr pos:start="1097:29" pos:end="1097:40"><name pos:start="1097:29" pos:end="1097:40">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1097:43" pos:end="1097:49"><expr pos:start="1097:43" pos:end="1097:49"><name pos:start="1097:43" pos:end="1097:49">cpu_env</name></expr></argument>, <argument pos:start="1097:52" pos:end="1097:59"><expr pos:start="1097:52" pos:end="1097:59"><name pos:start="1097:52" pos:end="1097:59">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1099:17" pos:end="1099:58"><expr pos:start="1099:17" pos:end="1099:57"><call pos:start="1099:17" pos:end="1099:57"><name pos:start="1099:17" pos:end="1099:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="1099:36" pos:end="1099:57">(<argument pos:start="1099:37" pos:end="1099:42"><expr pos:start="1099:37" pos:end="1099:42"><name pos:start="1099:37" pos:end="1099:42">cpu_T0</name></expr></argument>, <argument pos:start="1099:45" pos:end="1099:56"><expr pos:start="1099:45" pos:end="1099:56"><name pos:start="1099:45" pos:end="1099:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1101:15" pos:end="1117:13">else <block pos:start="1101:20" pos:end="1117:13">{<block_content pos:start="1105:17" pos:end="1116:0">

<cpp:ifdef pos:start="1103:1" pos:end="1103:20">#<cpp:directive pos:start="1103:2" pos:end="1103:6">ifdef</cpp:directive> <name pos:start="1103:8" pos:end="1103:20">TARGET_X86_64</name></cpp:ifdef>

                <decl_stmt pos:start="1105:17" pos:end="1107:62"><decl pos:start="1105:17" pos:end="1107:61"><type pos:start="1105:17" pos:end="1105:28"><name pos:start="1105:17" pos:end="1105:28">SSEFunc_l_ep</name></type> <name pos:start="1105:30" pos:end="1105:40">sse_fn_l_ep</name> <init pos:start="1105:42" pos:end="1107:61">=

                    <expr pos:start="1107:21" pos:end="1107:61"><name pos:start="1107:21" pos:end="1107:61"><name pos:start="1107:21" pos:end="1107:35">sse_op_table3bq</name><index pos:start="1107:36" pos:end="1107:61">[<expr pos:start="1107:37" pos:end="1107:60"><operator pos:start="1107:37" pos:end="1107:37">(</operator><operator pos:start="1107:38" pos:end="1107:38">(</operator><name pos:start="1107:39" pos:end="1107:39">b</name> <operator pos:start="1107:41" pos:end="1107:42">&gt;&gt;</operator> <literal type="number" pos:start="1107:44" pos:end="1107:44">7</literal><operator pos:start="1107:45" pos:end="1107:45">)</operator> <operator pos:start="1107:47" pos:end="1107:47">&amp;</operator> <literal type="number" pos:start="1107:49" pos:end="1107:49">2</literal><operator pos:start="1107:50" pos:end="1107:50">)</operator> <operator pos:start="1107:52" pos:end="1107:52">|</operator> <operator pos:start="1107:54" pos:end="1107:54">(</operator><name pos:start="1107:55" pos:end="1107:55">b</name> <operator pos:start="1107:57" pos:end="1107:57">&amp;</operator> <literal type="number" pos:start="1107:59" pos:end="1107:59">1</literal><operator pos:start="1107:60" pos:end="1107:60">)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1109:17" pos:end="1112:0"><expr pos:start="1109:17" pos:end="1109:54"><call pos:start="1109:17" pos:end="1109:54"><name pos:start="1109:17" pos:end="1109:27">sse_fn_l_ep</name><argument_list pos:start="1109:28" pos:end="1109:54">(<argument pos:start="1109:29" pos:end="1109:34"><expr pos:start="1109:29" pos:end="1109:34"><name pos:start="1109:29" pos:end="1109:34">cpu_T0</name></expr></argument>, <argument pos:start="1109:37" pos:end="1109:43"><expr pos:start="1109:37" pos:end="1109:43"><name pos:start="1109:37" pos:end="1109:43">cpu_env</name></expr></argument>, <argument pos:start="1109:46" pos:end="1109:53"><expr pos:start="1109:46" pos:end="1109:53"><name pos:start="1109:46" pos:end="1109:53">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1111:1" pos:end="1111:5">#<cpp:directive pos:start="1111:2" pos:end="1111:5">else</cpp:directive></cpp:else>

                <goto pos:start="1113:17" pos:end="1116:0">goto <name pos:start="1113:22" pos:end="1113:31">illegal_op</name>;</goto>

<cpp:endif pos:start="1115:1" pos:end="1115:6">#<cpp:directive pos:start="1115:2" pos:end="1115:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1119:13" pos:end="1119:46"><expr pos:start="1119:13" pos:end="1119:45"><call pos:start="1119:13" pos:end="1119:45"><name pos:start="1119:13" pos:end="1119:28">gen_op_mov_reg_v</name><argument_list pos:start="1119:29" pos:end="1119:45">(<argument pos:start="1119:30" pos:end="1119:31"><expr pos:start="1119:30" pos:end="1119:31"><name pos:start="1119:30" pos:end="1119:31">ot</name></expr></argument>, <argument pos:start="1119:34" pos:end="1119:36"><expr pos:start="1119:34" pos:end="1119:36"><name pos:start="1119:34" pos:end="1119:36">reg</name></expr></argument>, <argument pos:start="1119:39" pos:end="1119:44"><expr pos:start="1119:39" pos:end="1119:44"><name pos:start="1119:39" pos:end="1119:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1121:13" pos:end="1121:18">break;</break>

        <case pos:start="1123:9" pos:end="1123:18">case <expr pos:start="1123:14" pos:end="1123:17"><literal type="number" pos:start="1123:14" pos:end="1123:17">0xc4</literal></expr>:</case> <comment type="block" pos:start="1123:20" pos:end="1123:31">/* pinsrw */</comment>

        <case pos:start="1125:9" pos:end="1125:19">case <expr pos:start="1125:14" pos:end="1125:18"><literal type="number" pos:start="1125:14" pos:end="1125:18">0x1c4</literal></expr>:</case>

            <expr_stmt pos:start="1127:13" pos:end="1127:30"><expr pos:start="1127:13" pos:end="1127:29"><name pos:start="1127:13" pos:end="1127:25"><name pos:start="1127:13" pos:end="1127:13">s</name><operator pos:start="1127:14" pos:end="1127:15">-&gt;</operator><name pos:start="1127:16" pos:end="1127:25">rip_offset</name></name> <operator pos:start="1127:27" pos:end="1127:27">=</operator> <literal type="number" pos:start="1127:29" pos:end="1127:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1129:13" pos:end="1129:61"><expr pos:start="1129:13" pos:end="1129:60"><call pos:start="1129:13" pos:end="1129:60"><name pos:start="1129:13" pos:end="1129:26">gen_ldst_modrm</name><argument_list pos:start="1129:27" pos:end="1129:60">(<argument pos:start="1129:28" pos:end="1129:30"><expr pos:start="1129:28" pos:end="1129:30"><name pos:start="1129:28" pos:end="1129:30">env</name></expr></argument>, <argument pos:start="1129:33" pos:end="1129:33"><expr pos:start="1129:33" pos:end="1129:33"><name pos:start="1129:33" pos:end="1129:33">s</name></expr></argument>, <argument pos:start="1129:36" pos:end="1129:40"><expr pos:start="1129:36" pos:end="1129:40"><name pos:start="1129:36" pos:end="1129:40">modrm</name></expr></argument>, <argument pos:start="1129:43" pos:end="1129:47"><expr pos:start="1129:43" pos:end="1129:47"><name pos:start="1129:43" pos:end="1129:47">MO_16</name></expr></argument>, <argument pos:start="1129:50" pos:end="1129:56"><expr pos:start="1129:50" pos:end="1129:56"><name pos:start="1129:50" pos:end="1129:56">OR_TMP0</name></expr></argument>, <argument pos:start="1129:59" pos:end="1129:59"><expr pos:start="1129:59" pos:end="1129:59"><literal type="number" pos:start="1129:59" pos:end="1129:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1131:13" pos:end="1131:46"><expr pos:start="1131:13" pos:end="1131:45"><name pos:start="1131:13" pos:end="1131:15">val</name> <operator pos:start="1131:17" pos:end="1131:17">=</operator> <call pos:start="1131:19" pos:end="1131:45"><name pos:start="1131:19" pos:end="1131:31">cpu_ldub_code</name><argument_list pos:start="1131:32" pos:end="1131:45">(<argument pos:start="1131:33" pos:end="1131:35"><expr pos:start="1131:33" pos:end="1131:35"><name pos:start="1131:33" pos:end="1131:35">env</name></expr></argument>, <argument pos:start="1131:38" pos:end="1131:44"><expr pos:start="1131:38" pos:end="1131:44"><name pos:start="1131:38" pos:end="1131:42"><name pos:start="1131:38" pos:end="1131:38">s</name><operator pos:start="1131:39" pos:end="1131:40">-&gt;</operator><name pos:start="1131:41" pos:end="1131:42">pc</name></name><operator pos:start="1131:43" pos:end="1131:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1133:13" pos:end="1149:13"><if pos:start="1133:13" pos:end="1141:13">if <condition pos:start="1133:16" pos:end="1133:19">(<expr pos:start="1133:17" pos:end="1133:18"><name pos:start="1133:17" pos:end="1133:18">b1</name></expr>)</condition> <block pos:start="1133:21" pos:end="1141:13">{<block_content pos:start="1135:17" pos:end="1139:80">

                <expr_stmt pos:start="1135:17" pos:end="1135:25"><expr pos:start="1135:17" pos:end="1135:24"><name pos:start="1135:17" pos:end="1135:19">val</name> <operator pos:start="1135:21" pos:end="1135:22">&amp;=</operator> <literal type="number" pos:start="1135:24" pos:end="1135:24">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1137:17" pos:end="1139:80"><expr pos:start="1137:17" pos:end="1139:79"><call pos:start="1137:17" pos:end="1139:79"><name pos:start="1137:17" pos:end="1137:31">tcg_gen_st16_tl</name><argument_list pos:start="1137:32" pos:end="1139:79">(<argument pos:start="1137:33" pos:end="1137:38"><expr pos:start="1137:33" pos:end="1137:38"><name pos:start="1137:33" pos:end="1137:38">cpu_T0</name></expr></argument>, <argument pos:start="1137:41" pos:end="1137:47"><expr pos:start="1137:41" pos:end="1137:47"><name pos:start="1137:41" pos:end="1137:47">cpu_env</name></expr></argument>,

                                <argument pos:start="1139:33" pos:end="1139:78"><expr pos:start="1139:33" pos:end="1139:78"><call pos:start="1139:33" pos:end="1139:78"><name pos:start="1139:33" pos:end="1139:40">offsetof</name><argument_list pos:start="1139:41" pos:end="1139:78">(<argument pos:start="1139:42" pos:end="1139:52"><expr pos:start="1139:42" pos:end="1139:52"><name pos:start="1139:42" pos:end="1139:52">CPUX86State</name></expr></argument>,<argument pos:start="1139:54" pos:end="1139:77"><expr pos:start="1139:54" pos:end="1139:77"><name pos:start="1139:54" pos:end="1139:66"><name pos:start="1139:54" pos:end="1139:61">xmm_regs</name><index pos:start="1139:62" pos:end="1139:66">[<expr pos:start="1139:63" pos:end="1139:65"><name pos:start="1139:63" pos:end="1139:65">reg</name></expr>]</index></name><operator pos:start="1139:67" pos:end="1139:67">.</operator><call pos:start="1139:68" pos:end="1139:77"><name pos:start="1139:68" pos:end="1139:72">ZMM_W</name><argument_list pos:start="1139:73" pos:end="1139:77">(<argument pos:start="1139:74" pos:end="1139:76"><expr pos:start="1139:74" pos:end="1139:76"><name pos:start="1139:74" pos:end="1139:76">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1141:15" pos:end="1149:13">else <block pos:start="1141:20" pos:end="1149:13">{<block_content pos:start="1143:17" pos:end="1147:82">

                <expr_stmt pos:start="1143:17" pos:end="1143:25"><expr pos:start="1143:17" pos:end="1143:24"><name pos:start="1143:17" pos:end="1143:19">val</name> <operator pos:start="1143:21" pos:end="1143:22">&amp;=</operator> <literal type="number" pos:start="1143:24" pos:end="1143:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1145:17" pos:end="1147:82"><expr pos:start="1145:17" pos:end="1147:81"><call pos:start="1145:17" pos:end="1147:81"><name pos:start="1145:17" pos:end="1145:31">tcg_gen_st16_tl</name><argument_list pos:start="1145:32" pos:end="1147:81">(<argument pos:start="1145:33" pos:end="1145:38"><expr pos:start="1145:33" pos:end="1145:38"><name pos:start="1145:33" pos:end="1145:38">cpu_T0</name></expr></argument>, <argument pos:start="1145:41" pos:end="1145:47"><expr pos:start="1145:41" pos:end="1145:47"><name pos:start="1145:41" pos:end="1145:47">cpu_env</name></expr></argument>,

                                <argument pos:start="1147:33" pos:end="1147:80"><expr pos:start="1147:33" pos:end="1147:80"><call pos:start="1147:33" pos:end="1147:80"><name pos:start="1147:33" pos:end="1147:40">offsetof</name><argument_list pos:start="1147:41" pos:end="1147:80">(<argument pos:start="1147:42" pos:end="1147:52"><expr pos:start="1147:42" pos:end="1147:52"><name pos:start="1147:42" pos:end="1147:52">CPUX86State</name></expr></argument>,<argument pos:start="1147:54" pos:end="1147:79"><expr pos:start="1147:54" pos:end="1147:79"><name pos:start="1147:54" pos:end="1147:64"><name pos:start="1147:54" pos:end="1147:59">fpregs</name><index pos:start="1147:60" pos:end="1147:64">[<expr pos:start="1147:61" pos:end="1147:63"><name pos:start="1147:61" pos:end="1147:63">reg</name></expr>]</index></name><operator pos:start="1147:65" pos:end="1147:65">.</operator><call pos:start="1147:66" pos:end="1147:79"><name pos:start="1147:66" pos:end="1147:74"><name pos:start="1147:66" pos:end="1147:68">mmx</name><operator pos:start="1147:69" pos:end="1147:69">.</operator><name pos:start="1147:70" pos:end="1147:74">MMX_W</name></name><argument_list pos:start="1147:75" pos:end="1147:79">(<argument pos:start="1147:76" pos:end="1147:78"><expr pos:start="1147:76" pos:end="1147:78"><name pos:start="1147:76" pos:end="1147:78">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1151:13" pos:end="1151:18">break;</break>

        <case pos:start="1153:9" pos:end="1153:18">case <expr pos:start="1153:14" pos:end="1153:17"><literal type="number" pos:start="1153:14" pos:end="1153:17">0xc5</literal></expr>:</case> <comment type="block" pos:start="1153:20" pos:end="1153:31">/* pextrw */</comment>

        <case pos:start="1155:9" pos:end="1155:19">case <expr pos:start="1155:14" pos:end="1155:18"><literal type="number" pos:start="1155:14" pos:end="1155:18">0x1c5</literal></expr>:</case>

            <if_stmt pos:start="1157:13" pos:end="1159:32"><if pos:start="1157:13" pos:end="1159:32">if <condition pos:start="1157:16" pos:end="1157:25">(<expr pos:start="1157:17" pos:end="1157:24"><name pos:start="1157:17" pos:end="1157:19">mod</name> <operator pos:start="1157:21" pos:end="1157:22">!=</operator> <literal type="number" pos:start="1157:24" pos:end="1157:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1159:17" pos:end="1159:32"><block_content pos:start="1159:17" pos:end="1159:32">

                <goto pos:start="1159:17" pos:end="1159:32">goto <name pos:start="1159:22" pos:end="1159:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1161:13" pos:end="1161:36"><expr pos:start="1161:13" pos:end="1161:35"><name pos:start="1161:13" pos:end="1161:14">ot</name> <operator pos:start="1161:16" pos:end="1161:16">=</operator> <call pos:start="1161:18" pos:end="1161:35"><name pos:start="1161:18" pos:end="1161:25">mo_64_32</name><argument_list pos:start="1161:26" pos:end="1161:35">(<argument pos:start="1161:27" pos:end="1161:34"><expr pos:start="1161:27" pos:end="1161:34"><name pos:start="1161:27" pos:end="1161:34"><name pos:start="1161:27" pos:end="1161:27">s</name><operator pos:start="1161:28" pos:end="1161:29">-&gt;</operator><name pos:start="1161:30" pos:end="1161:34">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1163:13" pos:end="1163:46"><expr pos:start="1163:13" pos:end="1163:45"><name pos:start="1163:13" pos:end="1163:15">val</name> <operator pos:start="1163:17" pos:end="1163:17">=</operator> <call pos:start="1163:19" pos:end="1163:45"><name pos:start="1163:19" pos:end="1163:31">cpu_ldub_code</name><argument_list pos:start="1163:32" pos:end="1163:45">(<argument pos:start="1163:33" pos:end="1163:35"><expr pos:start="1163:33" pos:end="1163:35"><name pos:start="1163:33" pos:end="1163:35">env</name></expr></argument>, <argument pos:start="1163:38" pos:end="1163:44"><expr pos:start="1163:38" pos:end="1163:44"><name pos:start="1163:38" pos:end="1163:42"><name pos:start="1163:38" pos:end="1163:38">s</name><operator pos:start="1163:39" pos:end="1163:40">-&gt;</operator><name pos:start="1163:41" pos:end="1163:42">pc</name></name><operator pos:start="1163:43" pos:end="1163:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1165:13" pos:end="1185:13"><if pos:start="1165:13" pos:end="1175:13">if <condition pos:start="1165:16" pos:end="1165:19">(<expr pos:start="1165:17" pos:end="1165:18"><name pos:start="1165:17" pos:end="1165:18">b1</name></expr>)</condition> <block pos:start="1165:21" pos:end="1175:13">{<block_content pos:start="1167:17" pos:end="1173:80">

                <expr_stmt pos:start="1167:17" pos:end="1167:25"><expr pos:start="1167:17" pos:end="1167:24"><name pos:start="1167:17" pos:end="1167:19">val</name> <operator pos:start="1167:21" pos:end="1167:22">&amp;=</operator> <literal type="number" pos:start="1167:24" pos:end="1167:24">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1169:17" pos:end="1169:44"><expr pos:start="1169:17" pos:end="1169:43"><name pos:start="1169:17" pos:end="1169:18">rm</name> <operator pos:start="1169:20" pos:end="1169:20">=</operator> <operator pos:start="1169:22" pos:end="1169:22">(</operator><name pos:start="1169:23" pos:end="1169:27">modrm</name> <operator pos:start="1169:29" pos:end="1169:29">&amp;</operator> <literal type="number" pos:start="1169:31" pos:end="1169:31">7</literal><operator pos:start="1169:32" pos:end="1169:32">)</operator> <operator pos:start="1169:34" pos:end="1169:34">|</operator> <call pos:start="1169:36" pos:end="1169:43"><name pos:start="1169:36" pos:end="1169:40">REX_B</name><argument_list pos:start="1169:41" pos:end="1169:43">(<argument pos:start="1169:42" pos:end="1169:42"><expr pos:start="1169:42" pos:end="1169:42"><name pos:start="1169:42" pos:end="1169:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1171:17" pos:end="1173:80"><expr pos:start="1171:17" pos:end="1173:79"><call pos:start="1171:17" pos:end="1173:79"><name pos:start="1171:17" pos:end="1171:32">tcg_gen_ld16u_tl</name><argument_list pos:start="1171:33" pos:end="1173:79">(<argument pos:start="1171:34" pos:end="1171:39"><expr pos:start="1171:34" pos:end="1171:39"><name pos:start="1171:34" pos:end="1171:39">cpu_T0</name></expr></argument>, <argument pos:start="1171:42" pos:end="1171:48"><expr pos:start="1171:42" pos:end="1171:48"><name pos:start="1171:42" pos:end="1171:48">cpu_env</name></expr></argument>,

                                 <argument pos:start="1173:34" pos:end="1173:78"><expr pos:start="1173:34" pos:end="1173:78"><call pos:start="1173:34" pos:end="1173:78"><name pos:start="1173:34" pos:end="1173:41">offsetof</name><argument_list pos:start="1173:42" pos:end="1173:78">(<argument pos:start="1173:43" pos:end="1173:53"><expr pos:start="1173:43" pos:end="1173:53"><name pos:start="1173:43" pos:end="1173:53">CPUX86State</name></expr></argument>,<argument pos:start="1173:55" pos:end="1173:77"><expr pos:start="1173:55" pos:end="1173:77"><name pos:start="1173:55" pos:end="1173:66"><name pos:start="1173:55" pos:end="1173:62">xmm_regs</name><index pos:start="1173:63" pos:end="1173:66">[<expr pos:start="1173:64" pos:end="1173:65"><name pos:start="1173:64" pos:end="1173:65">rm</name></expr>]</index></name><operator pos:start="1173:67" pos:end="1173:67">.</operator><call pos:start="1173:68" pos:end="1173:77"><name pos:start="1173:68" pos:end="1173:72">ZMM_W</name><argument_list pos:start="1173:73" pos:end="1173:77">(<argument pos:start="1173:74" pos:end="1173:76"><expr pos:start="1173:74" pos:end="1173:76"><name pos:start="1173:74" pos:end="1173:76">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1175:15" pos:end="1185:13">else <block pos:start="1175:20" pos:end="1185:13">{<block_content pos:start="1177:17" pos:end="1183:81">

                <expr_stmt pos:start="1177:17" pos:end="1177:25"><expr pos:start="1177:17" pos:end="1177:24"><name pos:start="1177:17" pos:end="1177:19">val</name> <operator pos:start="1177:21" pos:end="1177:22">&amp;=</operator> <literal type="number" pos:start="1177:24" pos:end="1177:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1179:17" pos:end="1179:33"><expr pos:start="1179:17" pos:end="1179:32"><name pos:start="1179:17" pos:end="1179:18">rm</name> <operator pos:start="1179:20" pos:end="1179:20">=</operator> <operator pos:start="1179:22" pos:end="1179:22">(</operator><name pos:start="1179:23" pos:end="1179:27">modrm</name> <operator pos:start="1179:29" pos:end="1179:29">&amp;</operator> <literal type="number" pos:start="1179:31" pos:end="1179:31">7</literal><operator pos:start="1179:32" pos:end="1179:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1181:17" pos:end="1183:81"><expr pos:start="1181:17" pos:end="1183:80"><call pos:start="1181:17" pos:end="1183:80"><name pos:start="1181:17" pos:end="1181:32">tcg_gen_ld16u_tl</name><argument_list pos:start="1181:33" pos:end="1183:80">(<argument pos:start="1181:34" pos:end="1181:39"><expr pos:start="1181:34" pos:end="1181:39"><name pos:start="1181:34" pos:end="1181:39">cpu_T0</name></expr></argument>, <argument pos:start="1181:42" pos:end="1181:48"><expr pos:start="1181:42" pos:end="1181:48"><name pos:start="1181:42" pos:end="1181:48">cpu_env</name></expr></argument>,

                                <argument pos:start="1183:33" pos:end="1183:79"><expr pos:start="1183:33" pos:end="1183:79"><call pos:start="1183:33" pos:end="1183:79"><name pos:start="1183:33" pos:end="1183:40">offsetof</name><argument_list pos:start="1183:41" pos:end="1183:79">(<argument pos:start="1183:42" pos:end="1183:52"><expr pos:start="1183:42" pos:end="1183:52"><name pos:start="1183:42" pos:end="1183:52">CPUX86State</name></expr></argument>,<argument pos:start="1183:54" pos:end="1183:78"><expr pos:start="1183:54" pos:end="1183:78"><name pos:start="1183:54" pos:end="1183:63"><name pos:start="1183:54" pos:end="1183:59">fpregs</name><index pos:start="1183:60" pos:end="1183:63">[<expr pos:start="1183:61" pos:end="1183:62"><name pos:start="1183:61" pos:end="1183:62">rm</name></expr>]</index></name><operator pos:start="1183:64" pos:end="1183:64">.</operator><call pos:start="1183:65" pos:end="1183:78"><name pos:start="1183:65" pos:end="1183:73"><name pos:start="1183:65" pos:end="1183:67">mmx</name><operator pos:start="1183:68" pos:end="1183:68">.</operator><name pos:start="1183:69" pos:end="1183:73">MMX_W</name></name><argument_list pos:start="1183:74" pos:end="1183:78">(<argument pos:start="1183:75" pos:end="1183:77"><expr pos:start="1183:75" pos:end="1183:77"><name pos:start="1183:75" pos:end="1183:77">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1187:13" pos:end="1187:45"><expr pos:start="1187:13" pos:end="1187:44"><name pos:start="1187:13" pos:end="1187:15">reg</name> <operator pos:start="1187:17" pos:end="1187:17">=</operator> <operator pos:start="1187:19" pos:end="1187:19">(</operator><operator pos:start="1187:20" pos:end="1187:20">(</operator><name pos:start="1187:21" pos:end="1187:25">modrm</name> <operator pos:start="1187:27" pos:end="1187:28">&gt;&gt;</operator> <literal type="number" pos:start="1187:30" pos:end="1187:30">3</literal><operator pos:start="1187:31" pos:end="1187:31">)</operator> <operator pos:start="1187:33" pos:end="1187:33">&amp;</operator> <literal type="number" pos:start="1187:35" pos:end="1187:35">7</literal><operator pos:start="1187:36" pos:end="1187:36">)</operator> <operator pos:start="1187:38" pos:end="1187:38">|</operator> <name pos:start="1187:40" pos:end="1187:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1189:13" pos:end="1189:46"><expr pos:start="1189:13" pos:end="1189:45"><call pos:start="1189:13" pos:end="1189:45"><name pos:start="1189:13" pos:end="1189:28">gen_op_mov_reg_v</name><argument_list pos:start="1189:29" pos:end="1189:45">(<argument pos:start="1189:30" pos:end="1189:31"><expr pos:start="1189:30" pos:end="1189:31"><name pos:start="1189:30" pos:end="1189:31">ot</name></expr></argument>, <argument pos:start="1189:34" pos:end="1189:36"><expr pos:start="1189:34" pos:end="1189:36"><name pos:start="1189:34" pos:end="1189:36">reg</name></expr></argument>, <argument pos:start="1189:39" pos:end="1189:44"><expr pos:start="1189:39" pos:end="1189:44"><name pos:start="1189:39" pos:end="1189:44">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1191:13" pos:end="1191:18">break;</break>

        <case pos:start="1193:9" pos:end="1193:19">case <expr pos:start="1193:14" pos:end="1193:18"><literal type="number" pos:start="1193:14" pos:end="1193:18">0x1d6</literal></expr>:</case> <comment type="block" pos:start="1193:21" pos:end="1193:38">/* movq ea, xmm */</comment>

            <if_stmt pos:start="1195:13" pos:end="1213:13"><if pos:start="1195:13" pos:end="1203:13">if <condition pos:start="1195:16" pos:end="1195:25">(<expr pos:start="1195:17" pos:end="1195:24"><name pos:start="1195:17" pos:end="1195:19">mod</name> <operator pos:start="1195:21" pos:end="1195:22">!=</operator> <literal type="number" pos:start="1195:24" pos:end="1195:24">3</literal></expr>)</condition> <block pos:start="1195:27" pos:end="1203:13">{<block_content pos:start="1197:17" pos:end="1201:68">

                <expr_stmt pos:start="1197:17" pos:end="1197:45"><expr pos:start="1197:17" pos:end="1197:44"><call pos:start="1197:17" pos:end="1197:44"><name pos:start="1197:17" pos:end="1197:29">gen_lea_modrm</name><argument_list pos:start="1197:30" pos:end="1197:44">(<argument pos:start="1197:31" pos:end="1197:33"><expr pos:start="1197:31" pos:end="1197:33"><name pos:start="1197:31" pos:end="1197:33">env</name></expr></argument>, <argument pos:start="1197:36" pos:end="1197:36"><expr pos:start="1197:36" pos:end="1197:36"><name pos:start="1197:36" pos:end="1197:36">s</name></expr></argument>, <argument pos:start="1197:39" pos:end="1197:43"><expr pos:start="1197:39" pos:end="1197:43"><name pos:start="1197:39" pos:end="1197:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1199:17" pos:end="1201:68"><expr pos:start="1199:17" pos:end="1201:67"><call pos:start="1199:17" pos:end="1201:67"><name pos:start="1199:17" pos:end="1199:30">gen_stq_env_A0</name><argument_list pos:start="1199:31" pos:end="1201:67">(<argument pos:start="1199:32" pos:end="1199:32"><expr pos:start="1199:32" pos:end="1199:32"><name pos:start="1199:32" pos:end="1199:32">s</name></expr></argument>, <argument pos:start="1199:35" pos:end="1201:66"><expr pos:start="1199:35" pos:end="1201:66"><call pos:start="1199:35" pos:end="1201:66"><name pos:start="1199:35" pos:end="1199:42">offsetof</name><argument_list pos:start="1199:43" pos:end="1201:66">(<argument pos:start="1199:44" pos:end="1199:54"><expr pos:start="1199:44" pos:end="1199:54"><name pos:start="1199:44" pos:end="1199:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="1201:44" pos:end="1201:65"><expr pos:start="1201:44" pos:end="1201:65"><name pos:start="1201:44" pos:end="1201:56"><name pos:start="1201:44" pos:end="1201:51">xmm_regs</name><index pos:start="1201:52" pos:end="1201:56">[<expr pos:start="1201:53" pos:end="1201:55"><name pos:start="1201:53" pos:end="1201:55">reg</name></expr>]</index></name><operator pos:start="1201:57" pos:end="1201:57">.</operator><call pos:start="1201:58" pos:end="1201:65"><name pos:start="1201:58" pos:end="1201:62">ZMM_Q</name><argument_list pos:start="1201:63" pos:end="1201:65">(<argument pos:start="1201:64" pos:end="1201:64"><expr pos:start="1201:64" pos:end="1201:64"><literal type="number" pos:start="1201:64" pos:end="1201:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1203:15" pos:end="1213:13">else <block pos:start="1203:20" pos:end="1213:13">{<block_content pos:start="1205:17" pos:end="1211:79">

                <expr_stmt pos:start="1205:17" pos:end="1205:44"><expr pos:start="1205:17" pos:end="1205:43"><name pos:start="1205:17" pos:end="1205:18">rm</name> <operator pos:start="1205:20" pos:end="1205:20">=</operator> <operator pos:start="1205:22" pos:end="1205:22">(</operator><name pos:start="1205:23" pos:end="1205:27">modrm</name> <operator pos:start="1205:29" pos:end="1205:29">&amp;</operator> <literal type="number" pos:start="1205:31" pos:end="1205:31">7</literal><operator pos:start="1205:32" pos:end="1205:32">)</operator> <operator pos:start="1205:34" pos:end="1205:34">|</operator> <call pos:start="1205:36" pos:end="1205:43"><name pos:start="1205:36" pos:end="1205:40">REX_B</name><argument_list pos:start="1205:41" pos:end="1205:43">(<argument pos:start="1205:42" pos:end="1205:42"><expr pos:start="1205:42" pos:end="1205:42"><name pos:start="1205:42" pos:end="1205:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1207:17" pos:end="1209:74"><expr pos:start="1207:17" pos:end="1209:73"><call pos:start="1207:17" pos:end="1209:73"><name pos:start="1207:17" pos:end="1207:27">gen_op_movq</name><argument_list pos:start="1207:28" pos:end="1209:73">(<argument pos:start="1207:29" pos:end="1207:71"><expr pos:start="1207:29" pos:end="1207:71"><call pos:start="1207:29" pos:end="1207:71"><name pos:start="1207:29" pos:end="1207:36">offsetof</name><argument_list pos:start="1207:37" pos:end="1207:71">(<argument pos:start="1207:38" pos:end="1207:48"><expr pos:start="1207:38" pos:end="1207:48"><name pos:start="1207:38" pos:end="1207:48">CPUX86State</name></expr></argument>,<argument pos:start="1207:50" pos:end="1207:70"><expr pos:start="1207:50" pos:end="1207:70"><name pos:start="1207:50" pos:end="1207:61"><name pos:start="1207:50" pos:end="1207:57">xmm_regs</name><index pos:start="1207:58" pos:end="1207:61">[<expr pos:start="1207:59" pos:end="1207:60"><name pos:start="1207:59" pos:end="1207:60">rm</name></expr>]</index></name><operator pos:start="1207:62" pos:end="1207:62">.</operator><call pos:start="1207:63" pos:end="1207:70"><name pos:start="1207:63" pos:end="1207:67">ZMM_Q</name><argument_list pos:start="1207:68" pos:end="1207:70">(<argument pos:start="1207:69" pos:end="1207:69"><expr pos:start="1207:69" pos:end="1207:69"><literal type="number" pos:start="1207:69" pos:end="1207:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="1209:29" pos:end="1209:72"><expr pos:start="1209:29" pos:end="1209:72"><call pos:start="1209:29" pos:end="1209:72"><name pos:start="1209:29" pos:end="1209:36">offsetof</name><argument_list pos:start="1209:37" pos:end="1209:72">(<argument pos:start="1209:38" pos:end="1209:48"><expr pos:start="1209:38" pos:end="1209:48"><name pos:start="1209:38" pos:end="1209:48">CPUX86State</name></expr></argument>,<argument pos:start="1209:50" pos:end="1209:71"><expr pos:start="1209:50" pos:end="1209:71"><name pos:start="1209:50" pos:end="1209:62"><name pos:start="1209:50" pos:end="1209:57">xmm_regs</name><index pos:start="1209:58" pos:end="1209:62">[<expr pos:start="1209:59" pos:end="1209:61"><name pos:start="1209:59" pos:end="1209:61">reg</name></expr>]</index></name><operator pos:start="1209:63" pos:end="1209:63">.</operator><call pos:start="1209:64" pos:end="1209:71"><name pos:start="1209:64" pos:end="1209:68">ZMM_Q</name><argument_list pos:start="1209:69" pos:end="1209:71">(<argument pos:start="1209:70" pos:end="1209:70"><expr pos:start="1209:70" pos:end="1209:70"><literal type="number" pos:start="1209:70" pos:end="1209:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1211:17" pos:end="1211:79"><expr pos:start="1211:17" pos:end="1211:78"><call pos:start="1211:17" pos:end="1211:78"><name pos:start="1211:17" pos:end="1211:33">gen_op_movq_env_0</name><argument_list pos:start="1211:34" pos:end="1211:78">(<argument pos:start="1211:35" pos:end="1211:77"><expr pos:start="1211:35" pos:end="1211:77"><call pos:start="1211:35" pos:end="1211:77"><name pos:start="1211:35" pos:end="1211:42">offsetof</name><argument_list pos:start="1211:43" pos:end="1211:77">(<argument pos:start="1211:44" pos:end="1211:54"><expr pos:start="1211:44" pos:end="1211:54"><name pos:start="1211:44" pos:end="1211:54">CPUX86State</name></expr></argument>,<argument pos:start="1211:56" pos:end="1211:76"><expr pos:start="1211:56" pos:end="1211:76"><name pos:start="1211:56" pos:end="1211:67"><name pos:start="1211:56" pos:end="1211:63">xmm_regs</name><index pos:start="1211:64" pos:end="1211:67">[<expr pos:start="1211:65" pos:end="1211:66"><name pos:start="1211:65" pos:end="1211:66">rm</name></expr>]</index></name><operator pos:start="1211:68" pos:end="1211:68">.</operator><call pos:start="1211:69" pos:end="1211:76"><name pos:start="1211:69" pos:end="1211:73">ZMM_Q</name><argument_list pos:start="1211:74" pos:end="1211:76">(<argument pos:start="1211:75" pos:end="1211:75"><expr pos:start="1211:75" pos:end="1211:75"><literal type="number" pos:start="1211:75" pos:end="1211:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1215:13" pos:end="1215:18">break;</break>

        <case pos:start="1217:9" pos:end="1217:19">case <expr pos:start="1217:14" pos:end="1217:18"><literal type="number" pos:start="1217:14" pos:end="1217:18">0x2d6</literal></expr>:</case> <comment type="block" pos:start="1217:21" pos:end="1217:33">/* movq2dq */</comment>

            <expr_stmt pos:start="1219:13" pos:end="1219:42"><expr pos:start="1219:13" pos:end="1219:41"><call pos:start="1219:13" pos:end="1219:41"><name pos:start="1219:13" pos:end="1219:32">gen_helper_enter_mmx</name><argument_list pos:start="1219:33" pos:end="1219:41">(<argument pos:start="1219:34" pos:end="1219:40"><expr pos:start="1219:34" pos:end="1219:40"><name pos:start="1219:34" pos:end="1219:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1221:13" pos:end="1221:29"><expr pos:start="1221:13" pos:end="1221:28"><name pos:start="1221:13" pos:end="1221:14">rm</name> <operator pos:start="1221:16" pos:end="1221:16">=</operator> <operator pos:start="1221:18" pos:end="1221:18">(</operator><name pos:start="1221:19" pos:end="1221:23">modrm</name> <operator pos:start="1221:25" pos:end="1221:25">&amp;</operator> <literal type="number" pos:start="1221:27" pos:end="1221:27">7</literal><operator pos:start="1221:28" pos:end="1221:28">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1223:13" pos:end="1225:62"><expr pos:start="1223:13" pos:end="1225:61"><call pos:start="1223:13" pos:end="1225:61"><name pos:start="1223:13" pos:end="1223:23">gen_op_movq</name><argument_list pos:start="1223:24" pos:end="1225:61">(<argument pos:start="1223:25" pos:end="1223:68"><expr pos:start="1223:25" pos:end="1223:68"><call pos:start="1223:25" pos:end="1223:68"><name pos:start="1223:25" pos:end="1223:32">offsetof</name><argument_list pos:start="1223:33" pos:end="1223:68">(<argument pos:start="1223:34" pos:end="1223:44"><expr pos:start="1223:34" pos:end="1223:44"><name pos:start="1223:34" pos:end="1223:44">CPUX86State</name></expr></argument>,<argument pos:start="1223:46" pos:end="1223:67"><expr pos:start="1223:46" pos:end="1223:67"><name pos:start="1223:46" pos:end="1223:58"><name pos:start="1223:46" pos:end="1223:53">xmm_regs</name><index pos:start="1223:54" pos:end="1223:58">[<expr pos:start="1223:55" pos:end="1223:57"><name pos:start="1223:55" pos:end="1223:57">reg</name></expr>]</index></name><operator pos:start="1223:59" pos:end="1223:59">.</operator><call pos:start="1223:60" pos:end="1223:67"><name pos:start="1223:60" pos:end="1223:64">ZMM_Q</name><argument_list pos:start="1223:65" pos:end="1223:67">(<argument pos:start="1223:66" pos:end="1223:66"><expr pos:start="1223:66" pos:end="1223:66"><literal type="number" pos:start="1223:66" pos:end="1223:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="1225:25" pos:end="1225:60"><expr pos:start="1225:25" pos:end="1225:60"><call pos:start="1225:25" pos:end="1225:60"><name pos:start="1225:25" pos:end="1225:32">offsetof</name><argument_list pos:start="1225:33" pos:end="1225:60">(<argument pos:start="1225:34" pos:end="1225:44"><expr pos:start="1225:34" pos:end="1225:44"><name pos:start="1225:34" pos:end="1225:44">CPUX86State</name></expr></argument>,<argument pos:start="1225:46" pos:end="1225:59"><expr pos:start="1225:46" pos:end="1225:59"><name pos:start="1225:46" pos:end="1225:55"><name pos:start="1225:46" pos:end="1225:51">fpregs</name><index pos:start="1225:52" pos:end="1225:55">[<expr pos:start="1225:53" pos:end="1225:54"><name pos:start="1225:53" pos:end="1225:54">rm</name></expr>]</index></name><operator pos:start="1225:56" pos:end="1225:56">.</operator><name pos:start="1225:57" pos:end="1225:59">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1227:13" pos:end="1227:76"><expr pos:start="1227:13" pos:end="1227:75"><call pos:start="1227:13" pos:end="1227:75"><name pos:start="1227:13" pos:end="1227:29">gen_op_movq_env_0</name><argument_list pos:start="1227:30" pos:end="1227:75">(<argument pos:start="1227:31" pos:end="1227:74"><expr pos:start="1227:31" pos:end="1227:74"><call pos:start="1227:31" pos:end="1227:74"><name pos:start="1227:31" pos:end="1227:38">offsetof</name><argument_list pos:start="1227:39" pos:end="1227:74">(<argument pos:start="1227:40" pos:end="1227:50"><expr pos:start="1227:40" pos:end="1227:50"><name pos:start="1227:40" pos:end="1227:50">CPUX86State</name></expr></argument>,<argument pos:start="1227:52" pos:end="1227:73"><expr pos:start="1227:52" pos:end="1227:73"><name pos:start="1227:52" pos:end="1227:64"><name pos:start="1227:52" pos:end="1227:59">xmm_regs</name><index pos:start="1227:60" pos:end="1227:64">[<expr pos:start="1227:61" pos:end="1227:63"><name pos:start="1227:61" pos:end="1227:63">reg</name></expr>]</index></name><operator pos:start="1227:65" pos:end="1227:65">.</operator><call pos:start="1227:66" pos:end="1227:73"><name pos:start="1227:66" pos:end="1227:70">ZMM_Q</name><argument_list pos:start="1227:71" pos:end="1227:73">(<argument pos:start="1227:72" pos:end="1227:72"><expr pos:start="1227:72" pos:end="1227:72"><literal type="number" pos:start="1227:72" pos:end="1227:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1229:13" pos:end="1229:18">break;</break>

        <case pos:start="1231:9" pos:end="1231:19">case <expr pos:start="1231:14" pos:end="1231:18"><literal type="number" pos:start="1231:14" pos:end="1231:18">0x3d6</literal></expr>:</case> <comment type="block" pos:start="1231:21" pos:end="1231:33">/* movdq2q */</comment>

            <expr_stmt pos:start="1233:13" pos:end="1233:42"><expr pos:start="1233:13" pos:end="1233:41"><call pos:start="1233:13" pos:end="1233:41"><name pos:start="1233:13" pos:end="1233:32">gen_helper_enter_mmx</name><argument_list pos:start="1233:33" pos:end="1233:41">(<argument pos:start="1233:34" pos:end="1233:40"><expr pos:start="1233:34" pos:end="1233:40"><name pos:start="1233:34" pos:end="1233:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1235:13" pos:end="1235:40"><expr pos:start="1235:13" pos:end="1235:39"><name pos:start="1235:13" pos:end="1235:14">rm</name> <operator pos:start="1235:16" pos:end="1235:16">=</operator> <operator pos:start="1235:18" pos:end="1235:18">(</operator><name pos:start="1235:19" pos:end="1235:23">modrm</name> <operator pos:start="1235:25" pos:end="1235:25">&amp;</operator> <literal type="number" pos:start="1235:27" pos:end="1235:27">7</literal><operator pos:start="1235:28" pos:end="1235:28">)</operator> <operator pos:start="1235:30" pos:end="1235:30">|</operator> <call pos:start="1235:32" pos:end="1235:39"><name pos:start="1235:32" pos:end="1235:36">REX_B</name><argument_list pos:start="1235:37" pos:end="1235:39">(<argument pos:start="1235:38" pos:end="1235:38"><expr pos:start="1235:38" pos:end="1235:38"><name pos:start="1235:38" pos:end="1235:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1237:13" pos:end="1239:69"><expr pos:start="1237:13" pos:end="1239:68"><call pos:start="1237:13" pos:end="1239:68"><name pos:start="1237:13" pos:end="1237:23">gen_op_movq</name><argument_list pos:start="1237:24" pos:end="1239:68">(<argument pos:start="1237:25" pos:end="1237:65"><expr pos:start="1237:25" pos:end="1237:65"><call pos:start="1237:25" pos:end="1237:65"><name pos:start="1237:25" pos:end="1237:32">offsetof</name><argument_list pos:start="1237:33" pos:end="1237:65">(<argument pos:start="1237:34" pos:end="1237:44"><expr pos:start="1237:34" pos:end="1237:44"><name pos:start="1237:34" pos:end="1237:44">CPUX86State</name></expr></argument>,<argument pos:start="1237:46" pos:end="1237:64"><expr pos:start="1237:46" pos:end="1237:64"><name pos:start="1237:46" pos:end="1237:60"><name pos:start="1237:46" pos:end="1237:51">fpregs</name><index pos:start="1237:52" pos:end="1237:60">[<expr pos:start="1237:53" pos:end="1237:59"><name pos:start="1237:53" pos:end="1237:55">reg</name> <operator pos:start="1237:57" pos:end="1237:57">&amp;</operator> <literal type="number" pos:start="1237:59" pos:end="1237:59">7</literal></expr>]</index></name><operator pos:start="1237:61" pos:end="1237:61">.</operator><name pos:start="1237:62" pos:end="1237:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="1239:25" pos:end="1239:67"><expr pos:start="1239:25" pos:end="1239:67"><call pos:start="1239:25" pos:end="1239:67"><name pos:start="1239:25" pos:end="1239:32">offsetof</name><argument_list pos:start="1239:33" pos:end="1239:67">(<argument pos:start="1239:34" pos:end="1239:44"><expr pos:start="1239:34" pos:end="1239:44"><name pos:start="1239:34" pos:end="1239:44">CPUX86State</name></expr></argument>,<argument pos:start="1239:46" pos:end="1239:66"><expr pos:start="1239:46" pos:end="1239:66"><name pos:start="1239:46" pos:end="1239:57"><name pos:start="1239:46" pos:end="1239:53">xmm_regs</name><index pos:start="1239:54" pos:end="1239:57">[<expr pos:start="1239:55" pos:end="1239:56"><name pos:start="1239:55" pos:end="1239:56">rm</name></expr>]</index></name><operator pos:start="1239:58" pos:end="1239:58">.</operator><call pos:start="1239:59" pos:end="1239:66"><name pos:start="1239:59" pos:end="1239:63">ZMM_Q</name><argument_list pos:start="1239:64" pos:end="1239:66">(<argument pos:start="1239:65" pos:end="1239:65"><expr pos:start="1239:65" pos:end="1239:65"><literal type="number" pos:start="1239:65" pos:end="1239:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1241:13" pos:end="1241:18">break;</break>

        <case pos:start="1243:9" pos:end="1243:18">case <expr pos:start="1243:14" pos:end="1243:17"><literal type="number" pos:start="1243:14" pos:end="1243:17">0xd7</literal></expr>:</case> <comment type="block" pos:start="1243:20" pos:end="1243:33">/* pmovmskb */</comment>

        <case pos:start="1245:9" pos:end="1245:19">case <expr pos:start="1245:14" pos:end="1245:18"><literal type="number" pos:start="1245:14" pos:end="1245:18">0x1d7</literal></expr>:</case>

            <if_stmt pos:start="1247:13" pos:end="1249:32"><if pos:start="1247:13" pos:end="1249:32">if <condition pos:start="1247:16" pos:end="1247:25">(<expr pos:start="1247:17" pos:end="1247:24"><name pos:start="1247:17" pos:end="1247:19">mod</name> <operator pos:start="1247:21" pos:end="1247:22">!=</operator> <literal type="number" pos:start="1247:24" pos:end="1247:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1249:17" pos:end="1249:32"><block_content pos:start="1249:17" pos:end="1249:32">

                <goto pos:start="1249:17" pos:end="1249:32">goto <name pos:start="1249:22" pos:end="1249:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1251:13" pos:end="1267:13"><if pos:start="1251:13" pos:end="1259:13">if <condition pos:start="1251:16" pos:end="1251:19">(<expr pos:start="1251:17" pos:end="1251:18"><name pos:start="1251:17" pos:end="1251:18">b1</name></expr>)</condition> <block pos:start="1251:21" pos:end="1259:13">{<block_content pos:start="1253:17" pos:end="1257:73">

                <expr_stmt pos:start="1253:17" pos:end="1253:44"><expr pos:start="1253:17" pos:end="1253:43"><name pos:start="1253:17" pos:end="1253:18">rm</name> <operator pos:start="1253:20" pos:end="1253:20">=</operator> <operator pos:start="1253:22" pos:end="1253:22">(</operator><name pos:start="1253:23" pos:end="1253:27">modrm</name> <operator pos:start="1253:29" pos:end="1253:29">&amp;</operator> <literal type="number" pos:start="1253:31" pos:end="1253:31">7</literal><operator pos:start="1253:32" pos:end="1253:32">)</operator> <operator pos:start="1253:34" pos:end="1253:34">|</operator> <call pos:start="1253:36" pos:end="1253:43"><name pos:start="1253:36" pos:end="1253:40">REX_B</name><argument_list pos:start="1253:41" pos:end="1253:43">(<argument pos:start="1253:42" pos:end="1253:42"><expr pos:start="1253:42" pos:end="1253:42"><name pos:start="1253:42" pos:end="1253:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1255:17" pos:end="1255:88"><expr pos:start="1255:17" pos:end="1255:87"><call pos:start="1255:17" pos:end="1255:87"><name pos:start="1255:17" pos:end="1255:32">tcg_gen_addi_ptr</name><argument_list pos:start="1255:33" pos:end="1255:87">(<argument pos:start="1255:34" pos:end="1255:41"><expr pos:start="1255:34" pos:end="1255:41"><name pos:start="1255:34" pos:end="1255:41">cpu_ptr0</name></expr></argument>, <argument pos:start="1255:44" pos:end="1255:50"><expr pos:start="1255:44" pos:end="1255:50"><name pos:start="1255:44" pos:end="1255:50">cpu_env</name></expr></argument>, <argument pos:start="1255:53" pos:end="1255:86"><expr pos:start="1255:53" pos:end="1255:86"><call pos:start="1255:53" pos:end="1255:86"><name pos:start="1255:53" pos:end="1255:60">offsetof</name><argument_list pos:start="1255:61" pos:end="1255:86">(<argument pos:start="1255:62" pos:end="1255:72"><expr pos:start="1255:62" pos:end="1255:72"><name pos:start="1255:62" pos:end="1255:72">CPUX86State</name></expr></argument>,<argument pos:start="1255:74" pos:end="1255:85"><expr pos:start="1255:74" pos:end="1255:85"><name pos:start="1255:74" pos:end="1255:85"><name pos:start="1255:74" pos:end="1255:81">xmm_regs</name><index pos:start="1255:82" pos:end="1255:85">[<expr pos:start="1255:83" pos:end="1255:84"><name pos:start="1255:83" pos:end="1255:84">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1257:17" pos:end="1257:73"><expr pos:start="1257:17" pos:end="1257:72"><call pos:start="1257:17" pos:end="1257:72"><name pos:start="1257:17" pos:end="1257:39">gen_helper_pmovmskb_xmm</name><argument_list pos:start="1257:40" pos:end="1257:72">(<argument pos:start="1257:41" pos:end="1257:52"><expr pos:start="1257:41" pos:end="1257:52"><name pos:start="1257:41" pos:end="1257:52">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1257:55" pos:end="1257:61"><expr pos:start="1257:55" pos:end="1257:61"><name pos:start="1257:55" pos:end="1257:61">cpu_env</name></expr></argument>, <argument pos:start="1257:64" pos:end="1257:71"><expr pos:start="1257:64" pos:end="1257:71"><name pos:start="1257:64" pos:end="1257:71">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1259:15" pos:end="1267:13">else <block pos:start="1259:20" pos:end="1267:13">{<block_content pos:start="1261:17" pos:end="1265:73">

                <expr_stmt pos:start="1261:17" pos:end="1261:33"><expr pos:start="1261:17" pos:end="1261:32"><name pos:start="1261:17" pos:end="1261:18">rm</name> <operator pos:start="1261:20" pos:end="1261:20">=</operator> <operator pos:start="1261:22" pos:end="1261:22">(</operator><name pos:start="1261:23" pos:end="1261:27">modrm</name> <operator pos:start="1261:29" pos:end="1261:29">&amp;</operator> <literal type="number" pos:start="1261:31" pos:end="1261:31">7</literal><operator pos:start="1261:32" pos:end="1261:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1263:17" pos:end="1263:90"><expr pos:start="1263:17" pos:end="1263:89"><call pos:start="1263:17" pos:end="1263:89"><name pos:start="1263:17" pos:end="1263:32">tcg_gen_addi_ptr</name><argument_list pos:start="1263:33" pos:end="1263:89">(<argument pos:start="1263:34" pos:end="1263:41"><expr pos:start="1263:34" pos:end="1263:41"><name pos:start="1263:34" pos:end="1263:41">cpu_ptr0</name></expr></argument>, <argument pos:start="1263:44" pos:end="1263:50"><expr pos:start="1263:44" pos:end="1263:50"><name pos:start="1263:44" pos:end="1263:50">cpu_env</name></expr></argument>, <argument pos:start="1263:53" pos:end="1263:88"><expr pos:start="1263:53" pos:end="1263:88"><call pos:start="1263:53" pos:end="1263:88"><name pos:start="1263:53" pos:end="1263:60">offsetof</name><argument_list pos:start="1263:61" pos:end="1263:88">(<argument pos:start="1263:62" pos:end="1263:72"><expr pos:start="1263:62" pos:end="1263:72"><name pos:start="1263:62" pos:end="1263:72">CPUX86State</name></expr></argument>,<argument pos:start="1263:74" pos:end="1263:87"><expr pos:start="1263:74" pos:end="1263:87"><name pos:start="1263:74" pos:end="1263:83"><name pos:start="1263:74" pos:end="1263:79">fpregs</name><index pos:start="1263:80" pos:end="1263:83">[<expr pos:start="1263:81" pos:end="1263:82"><name pos:start="1263:81" pos:end="1263:82">rm</name></expr>]</index></name><operator pos:start="1263:84" pos:end="1263:84">.</operator><name pos:start="1263:85" pos:end="1263:87">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1265:17" pos:end="1265:73"><expr pos:start="1265:17" pos:end="1265:72"><call pos:start="1265:17" pos:end="1265:72"><name pos:start="1265:17" pos:end="1265:39">gen_helper_pmovmskb_mmx</name><argument_list pos:start="1265:40" pos:end="1265:72">(<argument pos:start="1265:41" pos:end="1265:52"><expr pos:start="1265:41" pos:end="1265:52"><name pos:start="1265:41" pos:end="1265:52">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1265:55" pos:end="1265:61"><expr pos:start="1265:55" pos:end="1265:61"><name pos:start="1265:55" pos:end="1265:61">cpu_env</name></expr></argument>, <argument pos:start="1265:64" pos:end="1265:71"><expr pos:start="1265:64" pos:end="1265:71"><name pos:start="1265:64" pos:end="1265:71">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1269:13" pos:end="1269:45"><expr pos:start="1269:13" pos:end="1269:44"><name pos:start="1269:13" pos:end="1269:15">reg</name> <operator pos:start="1269:17" pos:end="1269:17">=</operator> <operator pos:start="1269:19" pos:end="1269:19">(</operator><operator pos:start="1269:20" pos:end="1269:20">(</operator><name pos:start="1269:21" pos:end="1269:25">modrm</name> <operator pos:start="1269:27" pos:end="1269:28">&gt;&gt;</operator> <literal type="number" pos:start="1269:30" pos:end="1269:30">3</literal><operator pos:start="1269:31" pos:end="1269:31">)</operator> <operator pos:start="1269:33" pos:end="1269:33">&amp;</operator> <literal type="number" pos:start="1269:35" pos:end="1269:35">7</literal><operator pos:start="1269:36" pos:end="1269:36">)</operator> <operator pos:start="1269:38" pos:end="1269:38">|</operator> <name pos:start="1269:40" pos:end="1269:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1271:13" pos:end="1271:61"><expr pos:start="1271:13" pos:end="1271:60"><call pos:start="1271:13" pos:end="1271:60"><name pos:start="1271:13" pos:end="1271:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="1271:32" pos:end="1271:60">(<argument pos:start="1271:33" pos:end="1271:45"><expr pos:start="1271:33" pos:end="1271:45"><name pos:start="1271:33" pos:end="1271:45"><name pos:start="1271:33" pos:end="1271:40">cpu_regs</name><index pos:start="1271:41" pos:end="1271:45">[<expr pos:start="1271:42" pos:end="1271:44"><name pos:start="1271:42" pos:end="1271:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1271:48" pos:end="1271:59"><expr pos:start="1271:48" pos:end="1271:59"><name pos:start="1271:48" pos:end="1271:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1273:13" pos:end="1273:18">break;</break>



        <case pos:start="1277:9" pos:end="1277:19">case <expr pos:start="1277:14" pos:end="1277:18"><literal type="number" pos:start="1277:14" pos:end="1277:18">0x138</literal></expr>:</case>

        <case pos:start="1279:9" pos:end="1279:19">case <expr pos:start="1279:14" pos:end="1279:18"><literal type="number" pos:start="1279:14" pos:end="1279:18">0x038</literal></expr>:</case>

            <expr_stmt pos:start="1281:13" pos:end="1281:22"><expr pos:start="1281:13" pos:end="1281:21"><name pos:start="1281:13" pos:end="1281:13">b</name> <operator pos:start="1281:15" pos:end="1281:15">=</operator> <name pos:start="1281:17" pos:end="1281:21">modrm</name></expr>;</expr_stmt>

            <if_stmt pos:start="1283:13" pos:end="1287:13"><if pos:start="1283:13" pos:end="1287:13">if <condition pos:start="1283:16" pos:end="1283:35">(<expr pos:start="1283:17" pos:end="1283:34"><operator pos:start="1283:17" pos:end="1283:17">(</operator><name pos:start="1283:18" pos:end="1283:18">b</name> <operator pos:start="1283:20" pos:end="1283:20">&amp;</operator> <literal type="number" pos:start="1283:22" pos:end="1283:25">0xf0</literal><operator pos:start="1283:26" pos:end="1283:26">)</operator> <operator pos:start="1283:28" pos:end="1283:29">==</operator> <literal type="number" pos:start="1283:31" pos:end="1283:34">0xf0</literal></expr>)</condition> <block pos:start="1283:37" pos:end="1287:13">{<block_content pos:start="1285:17" pos:end="1285:33">

                <goto pos:start="1285:17" pos:end="1285:33">goto <name pos:start="1285:22" pos:end="1285:32">do_0f_38_fx</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1289:13" pos:end="1289:48"><expr pos:start="1289:13" pos:end="1289:47"><name pos:start="1289:13" pos:end="1289:17">modrm</name> <operator pos:start="1289:19" pos:end="1289:19">=</operator> <call pos:start="1289:21" pos:end="1289:47"><name pos:start="1289:21" pos:end="1289:33">cpu_ldub_code</name><argument_list pos:start="1289:34" pos:end="1289:47">(<argument pos:start="1289:35" pos:end="1289:37"><expr pos:start="1289:35" pos:end="1289:37"><name pos:start="1289:35" pos:end="1289:37">env</name></expr></argument>, <argument pos:start="1289:40" pos:end="1289:46"><expr pos:start="1289:40" pos:end="1289:46"><name pos:start="1289:40" pos:end="1289:44"><name pos:start="1289:40" pos:end="1289:40">s</name><operator pos:start="1289:41" pos:end="1289:42">-&gt;</operator><name pos:start="1289:43" pos:end="1289:44">pc</name></name><operator pos:start="1289:45" pos:end="1289:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1291:13" pos:end="1291:27"><expr pos:start="1291:13" pos:end="1291:26"><name pos:start="1291:13" pos:end="1291:14">rm</name> <operator pos:start="1291:16" pos:end="1291:16">=</operator> <name pos:start="1291:18" pos:end="1291:22">modrm</name> <operator pos:start="1291:24" pos:end="1291:24">&amp;</operator> <literal type="number" pos:start="1291:26" pos:end="1291:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1293:13" pos:end="1293:45"><expr pos:start="1293:13" pos:end="1293:44"><name pos:start="1293:13" pos:end="1293:15">reg</name> <operator pos:start="1293:17" pos:end="1293:17">=</operator> <operator pos:start="1293:19" pos:end="1293:19">(</operator><operator pos:start="1293:20" pos:end="1293:20">(</operator><name pos:start="1293:21" pos:end="1293:25">modrm</name> <operator pos:start="1293:27" pos:end="1293:28">&gt;&gt;</operator> <literal type="number" pos:start="1293:30" pos:end="1293:30">3</literal><operator pos:start="1293:31" pos:end="1293:31">)</operator> <operator pos:start="1293:33" pos:end="1293:33">&amp;</operator> <literal type="number" pos:start="1293:35" pos:end="1293:35">7</literal><operator pos:start="1293:36" pos:end="1293:36">)</operator> <operator pos:start="1293:38" pos:end="1293:38">|</operator> <name pos:start="1293:40" pos:end="1293:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1295:13" pos:end="1295:35"><expr pos:start="1295:13" pos:end="1295:34"><name pos:start="1295:13" pos:end="1295:15">mod</name> <operator pos:start="1295:17" pos:end="1295:17">=</operator> <operator pos:start="1295:19" pos:end="1295:19">(</operator><name pos:start="1295:20" pos:end="1295:24">modrm</name> <operator pos:start="1295:26" pos:end="1295:27">&gt;&gt;</operator> <literal type="number" pos:start="1295:29" pos:end="1295:29">6</literal><operator pos:start="1295:30" pos:end="1295:30">)</operator> <operator pos:start="1295:32" pos:end="1295:32">&amp;</operator> <literal type="number" pos:start="1295:34" pos:end="1295:34">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1297:13" pos:end="1301:13"><if pos:start="1297:13" pos:end="1301:13">if <condition pos:start="1297:16" pos:end="1297:24">(<expr pos:start="1297:17" pos:end="1297:23"><name pos:start="1297:17" pos:end="1297:18">b1</name> <operator pos:start="1297:20" pos:end="1297:21">&gt;=</operator> <literal type="number" pos:start="1297:23" pos:end="1297:23">2</literal></expr>)</condition> <block pos:start="1297:26" pos:end="1301:13">{<block_content pos:start="1299:17" pos:end="1299:32">

                <goto pos:start="1299:17" pos:end="1299:32">goto <name pos:start="1299:22" pos:end="1299:31">unknown_op</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="1305:13" pos:end="1305:49"><expr pos:start="1305:13" pos:end="1305:48"><name pos:start="1305:13" pos:end="1305:22">sse_fn_epp</name> <operator pos:start="1305:24" pos:end="1305:24">=</operator> <name pos:start="1305:26" pos:end="1305:41"><name pos:start="1305:26" pos:end="1305:38">sse_op_table6</name><index pos:start="1305:39" pos:end="1305:41">[<expr pos:start="1305:40" pos:end="1305:40"><name pos:start="1305:40" pos:end="1305:40">b</name></expr>]</index></name><operator pos:start="1305:42" pos:end="1305:42">.</operator><name pos:start="1305:43" pos:end="1305:48"><name pos:start="1305:43" pos:end="1305:44">op</name><index pos:start="1305:45" pos:end="1305:48">[<expr pos:start="1305:46" pos:end="1305:47"><name pos:start="1305:46" pos:end="1305:47">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="1307:13" pos:end="1311:13"><if pos:start="1307:13" pos:end="1311:13">if <condition pos:start="1307:16" pos:end="1307:28">(<expr pos:start="1307:17" pos:end="1307:27"><operator pos:start="1307:17" pos:end="1307:17">!</operator><name pos:start="1307:18" pos:end="1307:27">sse_fn_epp</name></expr>)</condition> <block pos:start="1307:30" pos:end="1311:13">{<block_content pos:start="1309:17" pos:end="1309:32">

                <goto pos:start="1309:17" pos:end="1309:32">goto <name pos:start="1309:22" pos:end="1309:31">unknown_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1313:13" pos:end="1315:32"><if pos:start="1313:13" pos:end="1315:32">if <condition pos:start="1313:16" pos:end="1313:69">(<expr pos:start="1313:17" pos:end="1313:68"><operator pos:start="1313:17" pos:end="1313:17">!</operator><operator pos:start="1313:18" pos:end="1313:18">(</operator><name pos:start="1313:19" pos:end="1313:39"><name pos:start="1313:19" pos:end="1313:19">s</name><operator pos:start="1313:20" pos:end="1313:21">-&gt;</operator><name pos:start="1313:22" pos:end="1313:39">cpuid_ext_features</name></name> <operator pos:start="1313:41" pos:end="1313:41">&amp;</operator> <name pos:start="1313:43" pos:end="1313:58"><name pos:start="1313:43" pos:end="1313:55">sse_op_table6</name><index pos:start="1313:56" pos:end="1313:58">[<expr pos:start="1313:57" pos:end="1313:57"><name pos:start="1313:57" pos:end="1313:57">b</name></expr>]</index></name><operator pos:start="1313:59" pos:end="1313:59">.</operator><name pos:start="1313:60" pos:end="1313:67">ext_mask</name><operator pos:start="1313:68" pos:end="1313:68">)</operator></expr>)</condition><block type="pseudo" pos:start="1315:17" pos:end="1315:32"><block_content pos:start="1315:17" pos:end="1315:32">

                <goto pos:start="1315:17" pos:end="1315:32">goto <name pos:start="1315:22" pos:end="1315:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="1319:13" pos:end="1405:13"><if pos:start="1319:13" pos:end="1387:13">if <condition pos:start="1319:16" pos:end="1319:19">(<expr pos:start="1319:17" pos:end="1319:18"><name pos:start="1319:17" pos:end="1319:18">b1</name></expr>)</condition> <block pos:start="1319:21" pos:end="1387:13">{<block_content pos:start="1321:17" pos:end="1385:17">

                <expr_stmt pos:start="1321:17" pos:end="1321:65"><expr pos:start="1321:17" pos:end="1321:64"><name pos:start="1321:17" pos:end="1321:26">op1_offset</name> <operator pos:start="1321:28" pos:end="1321:28">=</operator> <call pos:start="1321:30" pos:end="1321:64"><name pos:start="1321:30" pos:end="1321:37">offsetof</name><argument_list pos:start="1321:38" pos:end="1321:64">(<argument pos:start="1321:39" pos:end="1321:49"><expr pos:start="1321:39" pos:end="1321:49"><name pos:start="1321:39" pos:end="1321:49">CPUX86State</name></expr></argument>,<argument pos:start="1321:51" pos:end="1321:63"><expr pos:start="1321:51" pos:end="1321:63"><name pos:start="1321:51" pos:end="1321:63"><name pos:start="1321:51" pos:end="1321:58">xmm_regs</name><index pos:start="1321:59" pos:end="1321:63">[<expr pos:start="1321:60" pos:end="1321:62"><name pos:start="1321:60" pos:end="1321:62">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1323:17" pos:end="1385:17"><if pos:start="1323:17" pos:end="1327:17">if <condition pos:start="1323:20" pos:end="1323:29">(<expr pos:start="1323:21" pos:end="1323:28"><name pos:start="1323:21" pos:end="1323:23">mod</name> <operator pos:start="1323:25" pos:end="1323:26">==</operator> <literal type="number" pos:start="1323:28" pos:end="1323:28">3</literal></expr>)</condition> <block pos:start="1323:31" pos:end="1327:17">{<block_content pos:start="1325:21" pos:end="1325:79">

                    <expr_stmt pos:start="1325:21" pos:end="1325:79"><expr pos:start="1325:21" pos:end="1325:78"><name pos:start="1325:21" pos:end="1325:30">op2_offset</name> <operator pos:start="1325:32" pos:end="1325:32">=</operator> <call pos:start="1325:34" pos:end="1325:78"><name pos:start="1325:34" pos:end="1325:41">offsetof</name><argument_list pos:start="1325:42" pos:end="1325:78">(<argument pos:start="1325:43" pos:end="1325:53"><expr pos:start="1325:43" pos:end="1325:53"><name pos:start="1325:43" pos:end="1325:53">CPUX86State</name></expr></argument>,<argument pos:start="1325:55" pos:end="1325:77"><expr pos:start="1325:55" pos:end="1325:77"><name pos:start="1325:55" pos:end="1325:77"><name pos:start="1325:55" pos:end="1325:62">xmm_regs</name><index pos:start="1325:63" pos:end="1325:77">[<expr pos:start="1325:64" pos:end="1325:76"><name pos:start="1325:64" pos:end="1325:65">rm</name> <operator pos:start="1325:67" pos:end="1325:67">|</operator> <call pos:start="1325:69" pos:end="1325:76"><name pos:start="1325:69" pos:end="1325:73">REX_B</name><argument_list pos:start="1325:74" pos:end="1325:76">(<argument pos:start="1325:75" pos:end="1325:75"><expr pos:start="1325:75" pos:end="1325:75"><name pos:start="1325:75" pos:end="1325:75">s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1327:19" pos:end="1385:17">else <block pos:start="1327:24" pos:end="1385:17">{<block_content pos:start="1329:21" pos:end="1383:21">

                    <expr_stmt pos:start="1329:21" pos:end="1329:62"><expr pos:start="1329:21" pos:end="1329:61"><name pos:start="1329:21" pos:end="1329:30">op2_offset</name> <operator pos:start="1329:32" pos:end="1329:32">=</operator> <call pos:start="1329:34" pos:end="1329:61"><name pos:start="1329:34" pos:end="1329:41">offsetof</name><argument_list pos:start="1329:42" pos:end="1329:61">(<argument pos:start="1329:43" pos:end="1329:53"><expr pos:start="1329:43" pos:end="1329:53"><name pos:start="1329:43" pos:end="1329:53">CPUX86State</name></expr></argument>,<argument pos:start="1329:55" pos:end="1329:60"><expr pos:start="1329:55" pos:end="1329:60"><name pos:start="1329:55" pos:end="1329:60">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1331:21" pos:end="1331:49"><expr pos:start="1331:21" pos:end="1331:48"><call pos:start="1331:21" pos:end="1331:48"><name pos:start="1331:21" pos:end="1331:33">gen_lea_modrm</name><argument_list pos:start="1331:34" pos:end="1331:48">(<argument pos:start="1331:35" pos:end="1331:37"><expr pos:start="1331:35" pos:end="1331:37"><name pos:start="1331:35" pos:end="1331:37">env</name></expr></argument>, <argument pos:start="1331:40" pos:end="1331:40"><expr pos:start="1331:40" pos:end="1331:40"><name pos:start="1331:40" pos:end="1331:40">s</name></expr></argument>, <argument pos:start="1331:43" pos:end="1331:47"><expr pos:start="1331:43" pos:end="1331:47"><name pos:start="1331:43" pos:end="1331:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="1333:21" pos:end="1383:21">switch <condition pos:start="1333:28" pos:end="1333:30">(<expr pos:start="1333:29" pos:end="1333:29"><name pos:start="1333:29" pos:end="1333:29">b</name></expr>)</condition> <block pos:start="1333:32" pos:end="1383:21">{<block_content pos:start="1335:21" pos:end="1381:54">

                    <case pos:start="1335:21" pos:end="1335:30">case <expr pos:start="1335:26" pos:end="1335:29"><literal type="number" pos:start="1335:26" pos:end="1335:29">0x20</literal></expr>:</case> <case pos:start="1335:32" pos:end="1335:41">case <expr pos:start="1335:37" pos:end="1335:40"><literal type="number" pos:start="1335:37" pos:end="1335:40">0x30</literal></expr>:</case> <comment type="block" pos:start="1335:43" pos:end="1335:66">/* pmovsxbw, pmovzxbw */</comment>

                    <case pos:start="1337:21" pos:end="1337:30">case <expr pos:start="1337:26" pos:end="1337:29"><literal type="number" pos:start="1337:26" pos:end="1337:29">0x23</literal></expr>:</case> <case pos:start="1337:32" pos:end="1337:41">case <expr pos:start="1337:37" pos:end="1337:40"><literal type="number" pos:start="1337:37" pos:end="1337:40">0x33</literal></expr>:</case> <comment type="block" pos:start="1337:43" pos:end="1337:66">/* pmovsxwd, pmovzxwd */</comment>

                    <case pos:start="1339:21" pos:end="1339:30">case <expr pos:start="1339:26" pos:end="1339:29"><literal type="number" pos:start="1339:26" pos:end="1339:29">0x25</literal></expr>:</case> <case pos:start="1339:32" pos:end="1339:41">case <expr pos:start="1339:37" pos:end="1339:40"><literal type="number" pos:start="1339:37" pos:end="1339:40">0x35</literal></expr>:</case> <comment type="block" pos:start="1339:43" pos:end="1339:66">/* pmovsxdq, pmovzxdq */</comment>

                        <expr_stmt pos:start="1341:25" pos:end="1343:68"><expr pos:start="1341:25" pos:end="1343:67"><call pos:start="1341:25" pos:end="1343:67"><name pos:start="1341:25" pos:end="1341:38">gen_ldq_env_A0</name><argument_list pos:start="1341:39" pos:end="1343:67">(<argument pos:start="1341:40" pos:end="1341:40"><expr pos:start="1341:40" pos:end="1341:40"><name pos:start="1341:40" pos:end="1341:40">s</name></expr></argument>, <argument pos:start="1341:43" pos:end="1343:66"><expr pos:start="1341:43" pos:end="1343:66"><name pos:start="1341:43" pos:end="1341:52">op2_offset</name> <operator pos:start="1341:54" pos:end="1341:54">+</operator>

                                        <call pos:start="1343:41" pos:end="1343:66"><name pos:start="1343:41" pos:end="1343:48">offsetof</name><argument_list pos:start="1343:49" pos:end="1343:66">(<argument pos:start="1343:50" pos:end="1343:55"><expr pos:start="1343:50" pos:end="1343:55"><name pos:start="1343:50" pos:end="1343:55">ZMMReg</name></expr></argument>, <argument pos:start="1343:58" pos:end="1343:65"><expr pos:start="1343:58" pos:end="1343:65"><call pos:start="1343:58" pos:end="1343:65"><name pos:start="1343:58" pos:end="1343:62">ZMM_Q</name><argument_list pos:start="1343:63" pos:end="1343:65">(<argument pos:start="1343:64" pos:end="1343:64"><expr pos:start="1343:64" pos:end="1343:64"><literal type="number" pos:start="1343:64" pos:end="1343:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1345:25" pos:end="1345:30">break;</break>

                    <case pos:start="1347:21" pos:end="1347:30">case <expr pos:start="1347:26" pos:end="1347:29"><literal type="number" pos:start="1347:26" pos:end="1347:29">0x21</literal></expr>:</case> <case pos:start="1347:32" pos:end="1347:41">case <expr pos:start="1347:37" pos:end="1347:40"><literal type="number" pos:start="1347:37" pos:end="1347:40">0x31</literal></expr>:</case> <comment type="block" pos:start="1347:43" pos:end="1347:66">/* pmovsxbd, pmovzxbd */</comment>

                    <case pos:start="1349:21" pos:end="1349:30">case <expr pos:start="1349:26" pos:end="1349:29"><literal type="number" pos:start="1349:26" pos:end="1349:29">0x24</literal></expr>:</case> <case pos:start="1349:32" pos:end="1349:41">case <expr pos:start="1349:37" pos:end="1349:40"><literal type="number" pos:start="1349:37" pos:end="1349:40">0x34</literal></expr>:</case> <comment type="block" pos:start="1349:43" pos:end="1349:66">/* pmovsxwq, pmovzxwq */</comment>

                        <expr_stmt pos:start="1351:25" pos:end="1353:67"><expr pos:start="1351:25" pos:end="1353:66"><call pos:start="1351:25" pos:end="1353:66"><name pos:start="1351:25" pos:end="1351:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="1351:44" pos:end="1353:66">(<argument pos:start="1351:45" pos:end="1351:56"><expr pos:start="1351:45" pos:end="1351:56"><name pos:start="1351:45" pos:end="1351:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1351:59" pos:end="1351:64"><expr pos:start="1351:59" pos:end="1351:64"><name pos:start="1351:59" pos:end="1351:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="1353:45" pos:end="1353:56"><expr pos:start="1353:45" pos:end="1353:56"><name pos:start="1353:45" pos:end="1353:56"><name pos:start="1353:45" pos:end="1353:45">s</name><operator pos:start="1353:46" pos:end="1353:47">-&gt;</operator><name pos:start="1353:48" pos:end="1353:56">mem_index</name></name></expr></argument>, <argument pos:start="1353:59" pos:end="1353:65"><expr pos:start="1353:59" pos:end="1353:65"><name pos:start="1353:59" pos:end="1353:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1355:25" pos:end="1357:68"><expr pos:start="1355:25" pos:end="1357:67"><call pos:start="1355:25" pos:end="1357:67"><name pos:start="1355:25" pos:end="1355:38">tcg_gen_st_i32</name><argument_list pos:start="1355:39" pos:end="1357:67">(<argument pos:start="1355:40" pos:end="1355:51"><expr pos:start="1355:40" pos:end="1355:51"><name pos:start="1355:40" pos:end="1355:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1355:54" pos:end="1355:60"><expr pos:start="1355:54" pos:end="1355:60"><name pos:start="1355:54" pos:end="1355:60">cpu_env</name></expr></argument>, <argument pos:start="1355:63" pos:end="1357:66"><expr pos:start="1355:63" pos:end="1357:66"><name pos:start="1355:63" pos:end="1355:72">op2_offset</name> <operator pos:start="1355:74" pos:end="1355:74">+</operator>

                                        <call pos:start="1357:41" pos:end="1357:66"><name pos:start="1357:41" pos:end="1357:48">offsetof</name><argument_list pos:start="1357:49" pos:end="1357:66">(<argument pos:start="1357:50" pos:end="1357:55"><expr pos:start="1357:50" pos:end="1357:55"><name pos:start="1357:50" pos:end="1357:55">ZMMReg</name></expr></argument>, <argument pos:start="1357:58" pos:end="1357:65"><expr pos:start="1357:58" pos:end="1357:65"><call pos:start="1357:58" pos:end="1357:65"><name pos:start="1357:58" pos:end="1357:62">ZMM_L</name><argument_list pos:start="1357:63" pos:end="1357:65">(<argument pos:start="1357:64" pos:end="1357:64"><expr pos:start="1357:64" pos:end="1357:64"><literal type="number" pos:start="1357:64" pos:end="1357:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1359:25" pos:end="1359:30">break;</break>

                    <case pos:start="1361:21" pos:end="1361:30">case <expr pos:start="1361:26" pos:end="1361:29"><literal type="number" pos:start="1361:26" pos:end="1361:29">0x22</literal></expr>:</case> <case pos:start="1361:32" pos:end="1361:41">case <expr pos:start="1361:37" pos:end="1361:40"><literal type="number" pos:start="1361:37" pos:end="1361:40">0x32</literal></expr>:</case> <comment type="block" pos:start="1361:43" pos:end="1361:66">/* pmovsxbq, pmovzxbq */</comment>

                        <expr_stmt pos:start="1363:25" pos:end="1365:66"><expr pos:start="1363:25" pos:end="1365:65"><call pos:start="1363:25" pos:end="1365:65"><name pos:start="1363:25" pos:end="1363:42">tcg_gen_qemu_ld_tl</name><argument_list pos:start="1363:43" pos:end="1365:65">(<argument pos:start="1363:44" pos:end="1363:51"><expr pos:start="1363:44" pos:end="1363:51"><name pos:start="1363:44" pos:end="1363:51">cpu_tmp0</name></expr></argument>, <argument pos:start="1363:54" pos:end="1363:59"><expr pos:start="1363:54" pos:end="1363:59"><name pos:start="1363:54" pos:end="1363:59">cpu_A0</name></expr></argument>,

                                           <argument pos:start="1365:44" pos:end="1365:55"><expr pos:start="1365:44" pos:end="1365:55"><name pos:start="1365:44" pos:end="1365:55"><name pos:start="1365:44" pos:end="1365:44">s</name><operator pos:start="1365:45" pos:end="1365:46">-&gt;</operator><name pos:start="1365:47" pos:end="1365:55">mem_index</name></name></expr></argument>, <argument pos:start="1365:58" pos:end="1365:64"><expr pos:start="1365:58" pos:end="1365:64"><name pos:start="1365:58" pos:end="1365:64">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1367:25" pos:end="1369:68"><expr pos:start="1367:25" pos:end="1369:67"><call pos:start="1367:25" pos:end="1369:67"><name pos:start="1367:25" pos:end="1367:39">tcg_gen_st16_tl</name><argument_list pos:start="1367:40" pos:end="1369:67">(<argument pos:start="1367:41" pos:end="1367:48"><expr pos:start="1367:41" pos:end="1367:48"><name pos:start="1367:41" pos:end="1367:48">cpu_tmp0</name></expr></argument>, <argument pos:start="1367:51" pos:end="1367:57"><expr pos:start="1367:51" pos:end="1367:57"><name pos:start="1367:51" pos:end="1367:57">cpu_env</name></expr></argument>, <argument pos:start="1367:60" pos:end="1369:66"><expr pos:start="1367:60" pos:end="1369:66"><name pos:start="1367:60" pos:end="1367:69">op2_offset</name> <operator pos:start="1367:71" pos:end="1367:71">+</operator>

                                        <call pos:start="1369:41" pos:end="1369:66"><name pos:start="1369:41" pos:end="1369:48">offsetof</name><argument_list pos:start="1369:49" pos:end="1369:66">(<argument pos:start="1369:50" pos:end="1369:55"><expr pos:start="1369:50" pos:end="1369:55"><name pos:start="1369:50" pos:end="1369:55">ZMMReg</name></expr></argument>, <argument pos:start="1369:58" pos:end="1369:65"><expr pos:start="1369:58" pos:end="1369:65"><call pos:start="1369:58" pos:end="1369:65"><name pos:start="1369:58" pos:end="1369:62">ZMM_W</name><argument_list pos:start="1369:63" pos:end="1369:65">(<argument pos:start="1369:64" pos:end="1369:64"><expr pos:start="1369:64" pos:end="1369:64"><literal type="number" pos:start="1369:64" pos:end="1369:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1371:25" pos:end="1371:30">break;</break>

                    <case pos:start="1373:21" pos:end="1373:30">case <expr pos:start="1373:26" pos:end="1373:29"><literal type="number" pos:start="1373:26" pos:end="1373:29">0x2a</literal></expr>:</case>            <comment type="block" pos:start="1373:43" pos:end="1373:56">/* movntqda */</comment>

                        <expr_stmt pos:start="1375:25" pos:end="1375:54"><expr pos:start="1375:25" pos:end="1375:53"><call pos:start="1375:25" pos:end="1375:53"><name pos:start="1375:25" pos:end="1375:38">gen_ldo_env_A0</name><argument_list pos:start="1375:39" pos:end="1375:53">(<argument pos:start="1375:40" pos:end="1375:40"><expr pos:start="1375:40" pos:end="1375:40"><name pos:start="1375:40" pos:end="1375:40">s</name></expr></argument>, <argument pos:start="1375:43" pos:end="1375:52"><expr pos:start="1375:43" pos:end="1375:52"><name pos:start="1375:43" pos:end="1375:52">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="1377:25" pos:end="1377:31">return;</return>

                    <default pos:start="1379:21" pos:end="1379:28">default:</default>

                        <expr_stmt pos:start="1381:25" pos:end="1381:54"><expr pos:start="1381:25" pos:end="1381:53"><call pos:start="1381:25" pos:end="1381:53"><name pos:start="1381:25" pos:end="1381:38">gen_ldo_env_A0</name><argument_list pos:start="1381:39" pos:end="1381:53">(<argument pos:start="1381:40" pos:end="1381:40"><expr pos:start="1381:40" pos:end="1381:40"><name pos:start="1381:40" pos:end="1381:40">s</name></expr></argument>, <argument pos:start="1381:43" pos:end="1381:52"><expr pos:start="1381:43" pos:end="1381:52"><name pos:start="1381:43" pos:end="1381:52">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1387:15" pos:end="1405:13">else <block pos:start="1387:20" pos:end="1405:13">{<block_content pos:start="1389:17" pos:end="1403:17">

                <expr_stmt pos:start="1389:17" pos:end="1389:67"><expr pos:start="1389:17" pos:end="1389:66"><name pos:start="1389:17" pos:end="1389:26">op1_offset</name> <operator pos:start="1389:28" pos:end="1389:28">=</operator> <call pos:start="1389:30" pos:end="1389:66"><name pos:start="1389:30" pos:end="1389:37">offsetof</name><argument_list pos:start="1389:38" pos:end="1389:66">(<argument pos:start="1389:39" pos:end="1389:49"><expr pos:start="1389:39" pos:end="1389:49"><name pos:start="1389:39" pos:end="1389:49">CPUX86State</name></expr></argument>,<argument pos:start="1389:51" pos:end="1389:65"><expr pos:start="1389:51" pos:end="1389:65"><name pos:start="1389:51" pos:end="1389:61"><name pos:start="1389:51" pos:end="1389:56">fpregs</name><index pos:start="1389:57" pos:end="1389:61">[<expr pos:start="1389:58" pos:end="1389:60"><name pos:start="1389:58" pos:end="1389:60">reg</name></expr>]</index></name><operator pos:start="1389:62" pos:end="1389:62">.</operator><name pos:start="1389:63" pos:end="1389:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1391:17" pos:end="1403:17"><if pos:start="1391:17" pos:end="1395:17">if <condition pos:start="1391:20" pos:end="1391:29">(<expr pos:start="1391:21" pos:end="1391:28"><name pos:start="1391:21" pos:end="1391:23">mod</name> <operator pos:start="1391:25" pos:end="1391:26">==</operator> <literal type="number" pos:start="1391:28" pos:end="1391:28">3</literal></expr>)</condition> <block pos:start="1391:31" pos:end="1395:17">{<block_content pos:start="1393:21" pos:end="1393:70">

                    <expr_stmt pos:start="1393:21" pos:end="1393:70"><expr pos:start="1393:21" pos:end="1393:69"><name pos:start="1393:21" pos:end="1393:30">op2_offset</name> <operator pos:start="1393:32" pos:end="1393:32">=</operator> <call pos:start="1393:34" pos:end="1393:69"><name pos:start="1393:34" pos:end="1393:41">offsetof</name><argument_list pos:start="1393:42" pos:end="1393:69">(<argument pos:start="1393:43" pos:end="1393:53"><expr pos:start="1393:43" pos:end="1393:53"><name pos:start="1393:43" pos:end="1393:53">CPUX86State</name></expr></argument>,<argument pos:start="1393:55" pos:end="1393:68"><expr pos:start="1393:55" pos:end="1393:68"><name pos:start="1393:55" pos:end="1393:64"><name pos:start="1393:55" pos:end="1393:60">fpregs</name><index pos:start="1393:61" pos:end="1393:64">[<expr pos:start="1393:62" pos:end="1393:63"><name pos:start="1393:62" pos:end="1393:63">rm</name></expr>]</index></name><operator pos:start="1393:65" pos:end="1393:65">.</operator><name pos:start="1393:66" pos:end="1393:68">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1395:19" pos:end="1403:17">else <block pos:start="1395:24" pos:end="1403:17">{<block_content pos:start="1397:21" pos:end="1401:50">

                    <expr_stmt pos:start="1397:21" pos:end="1397:62"><expr pos:start="1397:21" pos:end="1397:61"><name pos:start="1397:21" pos:end="1397:30">op2_offset</name> <operator pos:start="1397:32" pos:end="1397:32">=</operator> <call pos:start="1397:34" pos:end="1397:61"><name pos:start="1397:34" pos:end="1397:41">offsetof</name><argument_list pos:start="1397:42" pos:end="1397:61">(<argument pos:start="1397:43" pos:end="1397:53"><expr pos:start="1397:43" pos:end="1397:53"><name pos:start="1397:43" pos:end="1397:53">CPUX86State</name></expr></argument>,<argument pos:start="1397:55" pos:end="1397:60"><expr pos:start="1397:55" pos:end="1397:60"><name pos:start="1397:55" pos:end="1397:60">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1399:21" pos:end="1399:49"><expr pos:start="1399:21" pos:end="1399:48"><call pos:start="1399:21" pos:end="1399:48"><name pos:start="1399:21" pos:end="1399:33">gen_lea_modrm</name><argument_list pos:start="1399:34" pos:end="1399:48">(<argument pos:start="1399:35" pos:end="1399:37"><expr pos:start="1399:35" pos:end="1399:37"><name pos:start="1399:35" pos:end="1399:37">env</name></expr></argument>, <argument pos:start="1399:40" pos:end="1399:40"><expr pos:start="1399:40" pos:end="1399:40"><name pos:start="1399:40" pos:end="1399:40">s</name></expr></argument>, <argument pos:start="1399:43" pos:end="1399:47"><expr pos:start="1399:43" pos:end="1399:47"><name pos:start="1399:43" pos:end="1399:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1401:21" pos:end="1401:50"><expr pos:start="1401:21" pos:end="1401:49"><call pos:start="1401:21" pos:end="1401:49"><name pos:start="1401:21" pos:end="1401:34">gen_ldq_env_A0</name><argument_list pos:start="1401:35" pos:end="1401:49">(<argument pos:start="1401:36" pos:end="1401:36"><expr pos:start="1401:36" pos:end="1401:36"><name pos:start="1401:36" pos:end="1401:36">s</name></expr></argument>, <argument pos:start="1401:39" pos:end="1401:48"><expr pos:start="1401:39" pos:end="1401:48"><name pos:start="1401:39" pos:end="1401:48">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1407:13" pos:end="1411:13"><if pos:start="1407:13" pos:end="1411:13">if <condition pos:start="1407:16" pos:end="1407:42">(<expr pos:start="1407:17" pos:end="1407:41"><name pos:start="1407:17" pos:end="1407:26">sse_fn_epp</name> <operator pos:start="1407:28" pos:end="1407:29">==</operator> <name pos:start="1407:31" pos:end="1407:41">SSE_SPECIAL</name></expr>)</condition> <block pos:start="1407:44" pos:end="1411:13">{<block_content pos:start="1409:17" pos:end="1409:32">

                <goto pos:start="1409:17" pos:end="1409:32">goto <name pos:start="1409:22" pos:end="1409:31">unknown_op</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="1415:13" pos:end="1415:60"><expr pos:start="1415:13" pos:end="1415:59"><call pos:start="1415:13" pos:end="1415:59"><name pos:start="1415:13" pos:end="1415:28">tcg_gen_addi_ptr</name><argument_list pos:start="1415:29" pos:end="1415:59">(<argument pos:start="1415:30" pos:end="1415:37"><expr pos:start="1415:30" pos:end="1415:37"><name pos:start="1415:30" pos:end="1415:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1415:40" pos:end="1415:46"><expr pos:start="1415:40" pos:end="1415:46"><name pos:start="1415:40" pos:end="1415:46">cpu_env</name></expr></argument>, <argument pos:start="1415:49" pos:end="1415:58"><expr pos:start="1415:49" pos:end="1415:58"><name pos:start="1415:49" pos:end="1415:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1417:13" pos:end="1417:60"><expr pos:start="1417:13" pos:end="1417:59"><call pos:start="1417:13" pos:end="1417:59"><name pos:start="1417:13" pos:end="1417:28">tcg_gen_addi_ptr</name><argument_list pos:start="1417:29" pos:end="1417:59">(<argument pos:start="1417:30" pos:end="1417:37"><expr pos:start="1417:30" pos:end="1417:37"><name pos:start="1417:30" pos:end="1417:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1417:40" pos:end="1417:46"><expr pos:start="1417:40" pos:end="1417:46"><name pos:start="1417:40" pos:end="1417:46">cpu_env</name></expr></argument>, <argument pos:start="1417:49" pos:end="1417:58"><expr pos:start="1417:49" pos:end="1417:58"><name pos:start="1417:49" pos:end="1417:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1419:13" pos:end="1419:52"><expr pos:start="1419:13" pos:end="1419:51"><call pos:start="1419:13" pos:end="1419:51"><name pos:start="1419:13" pos:end="1419:22">sse_fn_epp</name><argument_list pos:start="1419:23" pos:end="1419:51">(<argument pos:start="1419:24" pos:end="1419:30"><expr pos:start="1419:24" pos:end="1419:30"><name pos:start="1419:24" pos:end="1419:30">cpu_env</name></expr></argument>, <argument pos:start="1419:33" pos:end="1419:40"><expr pos:start="1419:33" pos:end="1419:40"><name pos:start="1419:33" pos:end="1419:40">cpu_ptr0</name></expr></argument>, <argument pos:start="1419:43" pos:end="1419:50"><expr pos:start="1419:43" pos:end="1419:50"><name pos:start="1419:43" pos:end="1419:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="1423:13" pos:end="1427:13"><if pos:start="1423:13" pos:end="1427:13">if <condition pos:start="1423:16" pos:end="1423:26">(<expr pos:start="1423:17" pos:end="1423:25"><name pos:start="1423:17" pos:end="1423:17">b</name> <operator pos:start="1423:19" pos:end="1423:20">==</operator> <literal type="number" pos:start="1423:22" pos:end="1423:25">0x17</literal></expr>)</condition> <block pos:start="1423:28" pos:end="1427:13">{<block_content pos:start="1425:17" pos:end="1425:43">

                <expr_stmt pos:start="1425:17" pos:end="1425:43"><expr pos:start="1425:17" pos:end="1425:42"><call pos:start="1425:17" pos:end="1425:42"><name pos:start="1425:17" pos:end="1425:25">set_cc_op</name><argument_list pos:start="1425:26" pos:end="1425:42">(<argument pos:start="1425:27" pos:end="1425:27"><expr pos:start="1425:27" pos:end="1425:27"><name pos:start="1425:27" pos:end="1425:27">s</name></expr></argument>, <argument pos:start="1425:30" pos:end="1425:41"><expr pos:start="1425:30" pos:end="1425:41"><name pos:start="1425:30" pos:end="1425:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="1429:13" pos:end="1429:18">break;</break>



        <case pos:start="1433:9" pos:end="1433:19">case <expr pos:start="1433:14" pos:end="1433:18"><literal type="number" pos:start="1433:14" pos:end="1433:18">0x238</literal></expr>:</case>

        <case pos:start="1435:9" pos:end="1435:19">case <expr pos:start="1435:14" pos:end="1435:18"><literal type="number" pos:start="1435:14" pos:end="1435:18">0x338</literal></expr>:</case>

        <label pos:start="1437:9" pos:end="1437:20"><name pos:start="1437:9" pos:end="1437:19">do_0f_38_fx</name>:</label>

            <comment type="block" pos:start="1439:13" pos:end="1439:62">/* Various integer extensions at 0f 38 f[0-f].  */</comment>

            <expr_stmt pos:start="1441:13" pos:end="1441:34"><expr pos:start="1441:13" pos:end="1441:33"><name pos:start="1441:13" pos:end="1441:13">b</name> <operator pos:start="1441:15" pos:end="1441:15">=</operator> <name pos:start="1441:17" pos:end="1441:21">modrm</name> <operator pos:start="1441:23" pos:end="1441:23">|</operator> <operator pos:start="1441:25" pos:end="1441:25">(</operator><name pos:start="1441:26" pos:end="1441:27">b1</name> <operator pos:start="1441:29" pos:end="1441:30">&lt;&lt;</operator> <literal type="number" pos:start="1441:32" pos:end="1441:32">8</literal><operator pos:start="1441:33" pos:end="1441:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1443:13" pos:end="1443:48"><expr pos:start="1443:13" pos:end="1443:47"><name pos:start="1443:13" pos:end="1443:17">modrm</name> <operator pos:start="1443:19" pos:end="1443:19">=</operator> <call pos:start="1443:21" pos:end="1443:47"><name pos:start="1443:21" pos:end="1443:33">cpu_ldub_code</name><argument_list pos:start="1443:34" pos:end="1443:47">(<argument pos:start="1443:35" pos:end="1443:37"><expr pos:start="1443:35" pos:end="1443:37"><name pos:start="1443:35" pos:end="1443:37">env</name></expr></argument>, <argument pos:start="1443:40" pos:end="1443:46"><expr pos:start="1443:40" pos:end="1443:46"><name pos:start="1443:40" pos:end="1443:44"><name pos:start="1443:40" pos:end="1443:40">s</name><operator pos:start="1443:41" pos:end="1443:42">-&gt;</operator><name pos:start="1443:43" pos:end="1443:44">pc</name></name><operator pos:start="1443:45" pos:end="1443:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1445:13" pos:end="1445:45"><expr pos:start="1445:13" pos:end="1445:44"><name pos:start="1445:13" pos:end="1445:15">reg</name> <operator pos:start="1445:17" pos:end="1445:17">=</operator> <operator pos:start="1445:19" pos:end="1445:19">(</operator><operator pos:start="1445:20" pos:end="1445:20">(</operator><name pos:start="1445:21" pos:end="1445:25">modrm</name> <operator pos:start="1445:27" pos:end="1445:28">&gt;&gt;</operator> <literal type="number" pos:start="1445:30" pos:end="1445:30">3</literal><operator pos:start="1445:31" pos:end="1445:31">)</operator> <operator pos:start="1445:33" pos:end="1445:33">&amp;</operator> <literal type="number" pos:start="1445:35" pos:end="1445:35">7</literal><operator pos:start="1445:36" pos:end="1445:36">)</operator> <operator pos:start="1445:38" pos:end="1445:38">|</operator> <name pos:start="1445:40" pos:end="1445:44">rex_r</name></expr>;</expr_stmt>



            <switch pos:start="1449:13" pos:end="2153:13">switch <condition pos:start="1449:20" pos:end="1449:22">(<expr pos:start="1449:21" pos:end="1449:21"><name pos:start="1449:21" pos:end="1449:21">b</name></expr>)</condition> <block pos:start="1449:24" pos:end="2153:13">{<block_content pos:start="1451:13" pos:end="2151:32">

            <case pos:start="1451:13" pos:end="1451:23">case <expr pos:start="1451:18" pos:end="1451:22"><literal type="number" pos:start="1451:18" pos:end="1451:22">0x3f0</literal></expr>:</case> <comment type="block" pos:start="1451:25" pos:end="1451:41">/* crc32 Gd,Eb */</comment>

            <case pos:start="1453:13" pos:end="1453:23">case <expr pos:start="1453:18" pos:end="1453:22"><literal type="number" pos:start="1453:18" pos:end="1453:22">0x3f1</literal></expr>:</case> <comment type="block" pos:start="1453:25" pos:end="1453:41">/* crc32 Gd,Ey */</comment>

            <label pos:start="1455:13" pos:end="1455:21"><name pos:start="1455:13" pos:end="1455:20">do_crc32</name>:</label>

                <if_stmt pos:start="1457:17" pos:end="1461:17"><if pos:start="1457:17" pos:end="1461:17">if <condition pos:start="1457:20" pos:end="1457:63">(<expr pos:start="1457:21" pos:end="1457:62"><operator pos:start="1457:21" pos:end="1457:21">!</operator><operator pos:start="1457:22" pos:end="1457:22">(</operator><name pos:start="1457:23" pos:end="1457:43"><name pos:start="1457:23" pos:end="1457:23">s</name><operator pos:start="1457:24" pos:end="1457:25">-&gt;</operator><name pos:start="1457:26" pos:end="1457:43">cpuid_ext_features</name></name> <operator pos:start="1457:45" pos:end="1457:45">&amp;</operator> <name pos:start="1457:47" pos:end="1457:61">CPUID_EXT_SSE42</name><operator pos:start="1457:62" pos:end="1457:62">)</operator></expr>)</condition> <block pos:start="1457:65" pos:end="1461:17">{<block_content pos:start="1459:21" pos:end="1459:36">

                    <goto pos:start="1459:21" pos:end="1459:36">goto <name pos:start="1459:26" pos:end="1459:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1463:17" pos:end="1475:17"><if pos:start="1463:17" pos:end="1467:17">if <condition pos:start="1463:20" pos:end="1463:39">(<expr pos:start="1463:21" pos:end="1463:38"><operator pos:start="1463:21" pos:end="1463:21">(</operator><name pos:start="1463:22" pos:end="1463:22">b</name> <operator pos:start="1463:24" pos:end="1463:24">&amp;</operator> <literal type="number" pos:start="1463:26" pos:end="1463:29">0xff</literal><operator pos:start="1463:30" pos:end="1463:30">)</operator> <operator pos:start="1463:32" pos:end="1463:33">==</operator> <literal type="number" pos:start="1463:35" pos:end="1463:38">0xf0</literal></expr>)</condition> <block pos:start="1463:41" pos:end="1467:17">{<block_content pos:start="1465:21" pos:end="1465:30">

                    <expr_stmt pos:start="1465:21" pos:end="1465:30"><expr pos:start="1465:21" pos:end="1465:29"><name pos:start="1465:21" pos:end="1465:22">ot</name> <operator pos:start="1465:24" pos:end="1465:24">=</operator> <name pos:start="1465:26" pos:end="1465:29">MO_8</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1467:19" pos:end="1471:17">else if <condition pos:start="1467:27" pos:end="1467:45">(<expr pos:start="1467:28" pos:end="1467:44"><name pos:start="1467:28" pos:end="1467:35"><name pos:start="1467:28" pos:end="1467:28">s</name><operator pos:start="1467:29" pos:end="1467:30">-&gt;</operator><name pos:start="1467:31" pos:end="1467:35">dflag</name></name> <operator pos:start="1467:37" pos:end="1467:38">!=</operator> <name pos:start="1467:40" pos:end="1467:44">MO_64</name></expr>)</condition> <block pos:start="1467:47" pos:end="1471:17">{<block_content pos:start="1469:21" pos:end="1469:67">

                    <expr_stmt pos:start="1469:21" pos:end="1469:67"><expr pos:start="1469:21" pos:end="1469:66"><name pos:start="1469:21" pos:end="1469:22">ot</name> <operator pos:start="1469:24" pos:end="1469:24">=</operator> <operator pos:start="1469:26" pos:end="1469:26">(</operator><ternary pos:start="1469:27" pos:end="1469:65"><condition pos:start="1469:27" pos:end="1469:51"><expr pos:start="1469:27" pos:end="1469:49"><name pos:start="1469:27" pos:end="1469:35"><name pos:start="1469:27" pos:end="1469:27">s</name><operator pos:start="1469:28" pos:end="1469:29">-&gt;</operator><name pos:start="1469:30" pos:end="1469:35">prefix</name></name> <operator pos:start="1469:37" pos:end="1469:37">&amp;</operator> <name pos:start="1469:39" pos:end="1469:49">PREFIX_DATA</name></expr> ?</condition><then pos:start="1469:53" pos:end="1469:57"> <expr pos:start="1469:53" pos:end="1469:57"><name pos:start="1469:53" pos:end="1469:57">MO_16</name></expr> </then><else pos:start="1469:59" pos:end="1469:65">: <expr pos:start="1469:61" pos:end="1469:65"><name pos:start="1469:61" pos:end="1469:65">MO_32</name></expr></else></ternary><operator pos:start="1469:66" pos:end="1469:66">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1471:19" pos:end="1475:17">else <block pos:start="1471:24" pos:end="1475:17">{<block_content pos:start="1473:21" pos:end="1473:31">

                    <expr_stmt pos:start="1473:21" pos:end="1473:31"><expr pos:start="1473:21" pos:end="1473:30"><name pos:start="1473:21" pos:end="1473:22">ot</name> <operator pos:start="1473:24" pos:end="1473:24">=</operator> <name pos:start="1473:26" pos:end="1473:30">MO_64</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="1479:17" pos:end="1479:66"><expr pos:start="1479:17" pos:end="1479:65"><call pos:start="1479:17" pos:end="1479:65"><name pos:start="1479:17" pos:end="1479:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1479:37" pos:end="1479:65">(<argument pos:start="1479:38" pos:end="1479:49"><expr pos:start="1479:38" pos:end="1479:49"><name pos:start="1479:38" pos:end="1479:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1479:52" pos:end="1479:64"><expr pos:start="1479:52" pos:end="1479:64"><name pos:start="1479:52" pos:end="1479:64"><name pos:start="1479:52" pos:end="1479:59">cpu_regs</name><index pos:start="1479:60" pos:end="1479:64">[<expr pos:start="1479:61" pos:end="1479:63"><name pos:start="1479:61" pos:end="1479:63">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1481:17" pos:end="1481:62"><expr pos:start="1481:17" pos:end="1481:61"><call pos:start="1481:17" pos:end="1481:61"><name pos:start="1481:17" pos:end="1481:30">gen_ldst_modrm</name><argument_list pos:start="1481:31" pos:end="1481:61">(<argument pos:start="1481:32" pos:end="1481:34"><expr pos:start="1481:32" pos:end="1481:34"><name pos:start="1481:32" pos:end="1481:34">env</name></expr></argument>, <argument pos:start="1481:37" pos:end="1481:37"><expr pos:start="1481:37" pos:end="1481:37"><name pos:start="1481:37" pos:end="1481:37">s</name></expr></argument>, <argument pos:start="1481:40" pos:end="1481:44"><expr pos:start="1481:40" pos:end="1481:44"><name pos:start="1481:40" pos:end="1481:44">modrm</name></expr></argument>, <argument pos:start="1481:47" pos:end="1481:48"><expr pos:start="1481:47" pos:end="1481:48"><name pos:start="1481:47" pos:end="1481:48">ot</name></expr></argument>, <argument pos:start="1481:51" pos:end="1481:57"><expr pos:start="1481:51" pos:end="1481:57"><name pos:start="1481:51" pos:end="1481:57">OR_TMP0</name></expr></argument>, <argument pos:start="1481:60" pos:end="1481:60"><expr pos:start="1481:60" pos:end="1481:60"><literal type="number" pos:start="1481:60" pos:end="1481:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1483:17" pos:end="1485:65"><expr pos:start="1483:17" pos:end="1485:64"><call pos:start="1483:17" pos:end="1485:64"><name pos:start="1483:17" pos:end="1483:32">gen_helper_crc32</name><argument_list pos:start="1483:33" pos:end="1485:64">(<argument pos:start="1483:34" pos:end="1483:39"><expr pos:start="1483:34" pos:end="1483:39"><name pos:start="1483:34" pos:end="1483:39">cpu_T0</name></expr></argument>, <argument pos:start="1483:42" pos:end="1483:53"><expr pos:start="1483:42" pos:end="1483:53"><name pos:start="1483:42" pos:end="1483:53">cpu_tmp2_i32</name></expr></argument>,

                                 <argument pos:start="1485:34" pos:end="1485:39"><expr pos:start="1485:34" pos:end="1485:39"><name pos:start="1485:34" pos:end="1485:39">cpu_T0</name></expr></argument>, <argument pos:start="1485:42" pos:end="1485:63"><expr pos:start="1485:42" pos:end="1485:63"><call pos:start="1485:42" pos:end="1485:63"><name pos:start="1485:42" pos:end="1485:54">tcg_const_i32</name><argument_list pos:start="1485:55" pos:end="1485:63">(<argument pos:start="1485:56" pos:end="1485:62"><expr pos:start="1485:56" pos:end="1485:62"><literal type="number" pos:start="1485:56" pos:end="1485:56">8</literal> <operator pos:start="1485:58" pos:end="1485:59">&lt;&lt;</operator> <name pos:start="1485:61" pos:end="1485:62">ot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="1489:17" pos:end="1489:40"><expr pos:start="1489:17" pos:end="1489:39"><name pos:start="1489:17" pos:end="1489:18">ot</name> <operator pos:start="1489:20" pos:end="1489:20">=</operator> <call pos:start="1489:22" pos:end="1489:39"><name pos:start="1489:22" pos:end="1489:29">mo_64_32</name><argument_list pos:start="1489:30" pos:end="1489:39">(<argument pos:start="1489:31" pos:end="1489:38"><expr pos:start="1489:31" pos:end="1489:38"><name pos:start="1489:31" pos:end="1489:38"><name pos:start="1489:31" pos:end="1489:31">s</name><operator pos:start="1489:32" pos:end="1489:33">-&gt;</operator><name pos:start="1489:34" pos:end="1489:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1491:17" pos:end="1491:50"><expr pos:start="1491:17" pos:end="1491:49"><call pos:start="1491:17" pos:end="1491:49"><name pos:start="1491:17" pos:end="1491:32">gen_op_mov_reg_v</name><argument_list pos:start="1491:33" pos:end="1491:49">(<argument pos:start="1491:34" pos:end="1491:35"><expr pos:start="1491:34" pos:end="1491:35"><name pos:start="1491:34" pos:end="1491:35">ot</name></expr></argument>, <argument pos:start="1491:38" pos:end="1491:40"><expr pos:start="1491:38" pos:end="1491:40"><name pos:start="1491:38" pos:end="1491:40">reg</name></expr></argument>, <argument pos:start="1491:43" pos:end="1491:48"><expr pos:start="1491:43" pos:end="1491:48"><name pos:start="1491:43" pos:end="1491:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1493:17" pos:end="1493:22">break;</break>



            <case pos:start="1497:13" pos:end="1497:23">case <expr pos:start="1497:18" pos:end="1497:22"><literal type="number" pos:start="1497:18" pos:end="1497:22">0x1f0</literal></expr>:</case> <comment type="block" pos:start="1497:25" pos:end="1497:44">/* crc32 or movbe */</comment>

            <case pos:start="1499:13" pos:end="1499:23">case <expr pos:start="1499:18" pos:end="1499:22"><literal type="number" pos:start="1499:18" pos:end="1499:22">0x1f1</literal></expr>:</case>

                <comment type="block" pos:start="1501:17" pos:end="1505:34">/* For these insns, the f3 prefix is supposed to have priority

                   over the 66 prefix, but that's not what we implement above

                   setting b1.  */</comment>

                <if_stmt pos:start="1507:17" pos:end="1511:17"><if pos:start="1507:17" pos:end="1511:17">if <condition pos:start="1507:20" pos:end="1507:45">(<expr pos:start="1507:21" pos:end="1507:44"><name pos:start="1507:21" pos:end="1507:29"><name pos:start="1507:21" pos:end="1507:21">s</name><operator pos:start="1507:22" pos:end="1507:23">-&gt;</operator><name pos:start="1507:24" pos:end="1507:29">prefix</name></name> <operator pos:start="1507:31" pos:end="1507:31">&amp;</operator> <name pos:start="1507:33" pos:end="1507:44">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="1507:47" pos:end="1511:17">{<block_content pos:start="1509:21" pos:end="1509:34">

                    <goto pos:start="1509:21" pos:end="1509:34">goto <name pos:start="1509:26" pos:end="1509:33">do_crc32</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1513:17" pos:end="1513:30">/* FALLTHRU */</comment>

            <case pos:start="1515:13" pos:end="1515:23">case <expr pos:start="1515:18" pos:end="1515:22"><literal type="number" pos:start="1515:18" pos:end="1515:22">0x0f0</literal></expr>:</case> <comment type="block" pos:start="1515:25" pos:end="1515:41">/* movbe Gy,My */</comment>

            <case pos:start="1517:13" pos:end="1517:23">case <expr pos:start="1517:18" pos:end="1517:22"><literal type="number" pos:start="1517:18" pos:end="1517:22">0x0f1</literal></expr>:</case> <comment type="block" pos:start="1517:25" pos:end="1517:41">/* movbe My,Gy */</comment>

                <if_stmt pos:start="1519:17" pos:end="1523:17"><if pos:start="1519:17" pos:end="1523:17">if <condition pos:start="1519:20" pos:end="1519:63">(<expr pos:start="1519:21" pos:end="1519:62"><operator pos:start="1519:21" pos:end="1519:21">!</operator><operator pos:start="1519:22" pos:end="1519:22">(</operator><name pos:start="1519:23" pos:end="1519:43"><name pos:start="1519:23" pos:end="1519:23">s</name><operator pos:start="1519:24" pos:end="1519:25">-&gt;</operator><name pos:start="1519:26" pos:end="1519:43">cpuid_ext_features</name></name> <operator pos:start="1519:45" pos:end="1519:45">&amp;</operator> <name pos:start="1519:47" pos:end="1519:61">CPUID_EXT_MOVBE</name><operator pos:start="1519:62" pos:end="1519:62">)</operator></expr>)</condition> <block pos:start="1519:65" pos:end="1523:17">{<block_content pos:start="1521:21" pos:end="1521:36">

                    <goto pos:start="1521:21" pos:end="1521:36">goto <name pos:start="1521:26" pos:end="1521:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1525:17" pos:end="1533:17"><if pos:start="1525:17" pos:end="1529:17">if <condition pos:start="1525:20" pos:end="1525:38">(<expr pos:start="1525:21" pos:end="1525:37"><name pos:start="1525:21" pos:end="1525:28"><name pos:start="1525:21" pos:end="1525:21">s</name><operator pos:start="1525:22" pos:end="1525:23">-&gt;</operator><name pos:start="1525:24" pos:end="1525:28">dflag</name></name> <operator pos:start="1525:30" pos:end="1525:31">!=</operator> <name pos:start="1525:33" pos:end="1525:37">MO_64</name></expr>)</condition> <block pos:start="1525:40" pos:end="1529:17">{<block_content pos:start="1527:21" pos:end="1527:67">

                    <expr_stmt pos:start="1527:21" pos:end="1527:67"><expr pos:start="1527:21" pos:end="1527:66"><name pos:start="1527:21" pos:end="1527:22">ot</name> <operator pos:start="1527:24" pos:end="1527:24">=</operator> <operator pos:start="1527:26" pos:end="1527:26">(</operator><ternary pos:start="1527:27" pos:end="1527:65"><condition pos:start="1527:27" pos:end="1527:51"><expr pos:start="1527:27" pos:end="1527:49"><name pos:start="1527:27" pos:end="1527:35"><name pos:start="1527:27" pos:end="1527:27">s</name><operator pos:start="1527:28" pos:end="1527:29">-&gt;</operator><name pos:start="1527:30" pos:end="1527:35">prefix</name></name> <operator pos:start="1527:37" pos:end="1527:37">&amp;</operator> <name pos:start="1527:39" pos:end="1527:49">PREFIX_DATA</name></expr> ?</condition><then pos:start="1527:53" pos:end="1527:57"> <expr pos:start="1527:53" pos:end="1527:57"><name pos:start="1527:53" pos:end="1527:57">MO_16</name></expr> </then><else pos:start="1527:59" pos:end="1527:65">: <expr pos:start="1527:61" pos:end="1527:65"><name pos:start="1527:61" pos:end="1527:65">MO_32</name></expr></else></ternary><operator pos:start="1527:66" pos:end="1527:66">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1529:19" pos:end="1533:17">else <block pos:start="1529:24" pos:end="1533:17">{<block_content pos:start="1531:21" pos:end="1531:31">

                    <expr_stmt pos:start="1531:21" pos:end="1531:31"><expr pos:start="1531:21" pos:end="1531:30"><name pos:start="1531:21" pos:end="1531:22">ot</name> <operator pos:start="1531:24" pos:end="1531:24">=</operator> <name pos:start="1531:26" pos:end="1531:30">MO_64</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="1537:17" pos:end="1537:45"><expr pos:start="1537:17" pos:end="1537:44"><call pos:start="1537:17" pos:end="1537:44"><name pos:start="1537:17" pos:end="1537:29">gen_lea_modrm</name><argument_list pos:start="1537:30" pos:end="1537:44">(<argument pos:start="1537:31" pos:end="1537:33"><expr pos:start="1537:31" pos:end="1537:33"><name pos:start="1537:31" pos:end="1537:33">env</name></expr></argument>, <argument pos:start="1537:36" pos:end="1537:36"><expr pos:start="1537:36" pos:end="1537:36"><name pos:start="1537:36" pos:end="1537:36">s</name></expr></argument>, <argument pos:start="1537:39" pos:end="1537:43"><expr pos:start="1537:39" pos:end="1537:43"><name pos:start="1537:39" pos:end="1537:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1539:17" pos:end="1553:17"><if pos:start="1539:17" pos:end="1547:17">if <condition pos:start="1539:20" pos:end="1539:33">(<expr pos:start="1539:21" pos:end="1539:32"><operator pos:start="1539:21" pos:end="1539:21">(</operator><name pos:start="1539:22" pos:end="1539:22">b</name> <operator pos:start="1539:24" pos:end="1539:24">&amp;</operator> <literal type="number" pos:start="1539:26" pos:end="1539:26">1</literal><operator pos:start="1539:27" pos:end="1539:27">)</operator> <operator pos:start="1539:29" pos:end="1539:30">==</operator> <literal type="number" pos:start="1539:32" pos:end="1539:32">0</literal></expr>)</condition> <block pos:start="1539:35" pos:end="1547:17">{<block_content pos:start="1541:21" pos:end="1545:54">

                    <expr_stmt pos:start="1541:21" pos:end="1543:65"><expr pos:start="1541:21" pos:end="1543:64"><call pos:start="1541:21" pos:end="1543:64"><name pos:start="1541:21" pos:end="1541:38">tcg_gen_qemu_ld_tl</name><argument_list pos:start="1541:39" pos:end="1543:64">(<argument pos:start="1541:40" pos:end="1541:45"><expr pos:start="1541:40" pos:end="1541:45"><name pos:start="1541:40" pos:end="1541:45">cpu_T0</name></expr></argument>, <argument pos:start="1541:48" pos:end="1541:53"><expr pos:start="1541:48" pos:end="1541:53"><name pos:start="1541:48" pos:end="1541:53">cpu_A0</name></expr></argument>,

                                       <argument pos:start="1543:40" pos:end="1543:51"><expr pos:start="1543:40" pos:end="1543:51"><name pos:start="1543:40" pos:end="1543:51"><name pos:start="1543:40" pos:end="1543:40">s</name><operator pos:start="1543:41" pos:end="1543:42">-&gt;</operator><name pos:start="1543:43" pos:end="1543:51">mem_index</name></name></expr></argument>, <argument pos:start="1543:54" pos:end="1543:63"><expr pos:start="1543:54" pos:end="1543:63"><name pos:start="1543:54" pos:end="1543:55">ot</name> <operator pos:start="1543:57" pos:end="1543:57">|</operator> <name pos:start="1543:59" pos:end="1543:63">MO_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1545:21" pos:end="1545:54"><expr pos:start="1545:21" pos:end="1545:53"><call pos:start="1545:21" pos:end="1545:53"><name pos:start="1545:21" pos:end="1545:36">gen_op_mov_reg_v</name><argument_list pos:start="1545:37" pos:end="1545:53">(<argument pos:start="1545:38" pos:end="1545:39"><expr pos:start="1545:38" pos:end="1545:39"><name pos:start="1545:38" pos:end="1545:39">ot</name></expr></argument>, <argument pos:start="1545:42" pos:end="1545:44"><expr pos:start="1545:42" pos:end="1545:44"><name pos:start="1545:42" pos:end="1545:44">reg</name></expr></argument>, <argument pos:start="1545:47" pos:end="1545:52"><expr pos:start="1545:47" pos:end="1545:52"><name pos:start="1545:47" pos:end="1545:52">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1547:19" pos:end="1553:17">else <block pos:start="1547:24" pos:end="1553:17">{<block_content pos:start="1549:21" pos:end="1551:65">

                    <expr_stmt pos:start="1549:21" pos:end="1551:65"><expr pos:start="1549:21" pos:end="1551:64"><call pos:start="1549:21" pos:end="1551:64"><name pos:start="1549:21" pos:end="1549:38">tcg_gen_qemu_st_tl</name><argument_list pos:start="1549:39" pos:end="1551:64">(<argument pos:start="1549:40" pos:end="1549:52"><expr pos:start="1549:40" pos:end="1549:52"><name pos:start="1549:40" pos:end="1549:52"><name pos:start="1549:40" pos:end="1549:47">cpu_regs</name><index pos:start="1549:48" pos:end="1549:52">[<expr pos:start="1549:49" pos:end="1549:51"><name pos:start="1549:49" pos:end="1549:51">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1549:55" pos:end="1549:60"><expr pos:start="1549:55" pos:end="1549:60"><name pos:start="1549:55" pos:end="1549:60">cpu_A0</name></expr></argument>,

                                       <argument pos:start="1551:40" pos:end="1551:51"><expr pos:start="1551:40" pos:end="1551:51"><name pos:start="1551:40" pos:end="1551:51"><name pos:start="1551:40" pos:end="1551:40">s</name><operator pos:start="1551:41" pos:end="1551:42">-&gt;</operator><name pos:start="1551:43" pos:end="1551:51">mem_index</name></name></expr></argument>, <argument pos:start="1551:54" pos:end="1551:63"><expr pos:start="1551:54" pos:end="1551:63"><name pos:start="1551:54" pos:end="1551:55">ot</name> <operator pos:start="1551:57" pos:end="1551:57">|</operator> <name pos:start="1551:59" pos:end="1551:63">MO_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1555:17" pos:end="1555:22">break;</break>



            <case pos:start="1559:13" pos:end="1559:23">case <expr pos:start="1559:18" pos:end="1559:22"><literal type="number" pos:start="1559:18" pos:end="1559:22">0x0f2</literal></expr>:</case> <comment type="block" pos:start="1559:25" pos:end="1559:45">/* andn Gy, By, Ey */</comment>

                <if_stmt pos:start="1561:17" pos:end="1569:17"><if pos:start="1561:17" pos:end="1569:17">if <condition pos:start="1561:20" pos:end="1565:37">(<expr pos:start="1561:21" pos:end="1565:36"><operator pos:start="1561:21" pos:end="1561:21">!</operator><operator pos:start="1561:22" pos:end="1561:22">(</operator><name pos:start="1561:23" pos:end="1561:47"><name pos:start="1561:23" pos:end="1561:23">s</name><operator pos:start="1561:24" pos:end="1561:25">-&gt;</operator><name pos:start="1561:26" pos:end="1561:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1561:49" pos:end="1561:49">&amp;</operator> <name pos:start="1561:51" pos:end="1561:68">CPUID_7_0_EBX_BMI1</name><operator pos:start="1561:69" pos:end="1561:69">)</operator>

                    <operator pos:start="1563:21" pos:end="1563:22">||</operator> <operator pos:start="1563:24" pos:end="1563:24">!</operator><operator pos:start="1563:25" pos:end="1563:25">(</operator><name pos:start="1563:26" pos:end="1563:34"><name pos:start="1563:26" pos:end="1563:26">s</name><operator pos:start="1563:27" pos:end="1563:28">-&gt;</operator><name pos:start="1563:29" pos:end="1563:34">prefix</name></name> <operator pos:start="1563:36" pos:end="1563:36">&amp;</operator> <name pos:start="1563:38" pos:end="1563:47">PREFIX_VEX</name><operator pos:start="1563:48" pos:end="1563:48">)</operator>

                    <operator pos:start="1565:21" pos:end="1565:22">||</operator> <name pos:start="1565:24" pos:end="1565:31"><name pos:start="1565:24" pos:end="1565:24">s</name><operator pos:start="1565:25" pos:end="1565:26">-&gt;</operator><name pos:start="1565:27" pos:end="1565:31">vex_l</name></name> <operator pos:start="1565:33" pos:end="1565:34">!=</operator> <literal type="number" pos:start="1565:36" pos:end="1565:36">0</literal></expr>)</condition> <block pos:start="1565:39" pos:end="1569:17">{<block_content pos:start="1567:21" pos:end="1567:36">

                    <goto pos:start="1567:21" pos:end="1567:36">goto <name pos:start="1567:26" pos:end="1567:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1571:17" pos:end="1571:40"><expr pos:start="1571:17" pos:end="1571:39"><name pos:start="1571:17" pos:end="1571:18">ot</name> <operator pos:start="1571:20" pos:end="1571:20">=</operator> <call pos:start="1571:22" pos:end="1571:39"><name pos:start="1571:22" pos:end="1571:29">mo_64_32</name><argument_list pos:start="1571:30" pos:end="1571:39">(<argument pos:start="1571:31" pos:end="1571:38"><expr pos:start="1571:31" pos:end="1571:38"><name pos:start="1571:31" pos:end="1571:38"><name pos:start="1571:31" pos:end="1571:31">s</name><operator pos:start="1571:32" pos:end="1571:33">-&gt;</operator><name pos:start="1571:34" pos:end="1571:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1573:17" pos:end="1573:62"><expr pos:start="1573:17" pos:end="1573:61"><call pos:start="1573:17" pos:end="1573:61"><name pos:start="1573:17" pos:end="1573:30">gen_ldst_modrm</name><argument_list pos:start="1573:31" pos:end="1573:61">(<argument pos:start="1573:32" pos:end="1573:34"><expr pos:start="1573:32" pos:end="1573:34"><name pos:start="1573:32" pos:end="1573:34">env</name></expr></argument>, <argument pos:start="1573:37" pos:end="1573:37"><expr pos:start="1573:37" pos:end="1573:37"><name pos:start="1573:37" pos:end="1573:37">s</name></expr></argument>, <argument pos:start="1573:40" pos:end="1573:44"><expr pos:start="1573:40" pos:end="1573:44"><name pos:start="1573:40" pos:end="1573:44">modrm</name></expr></argument>, <argument pos:start="1573:47" pos:end="1573:48"><expr pos:start="1573:47" pos:end="1573:48"><name pos:start="1573:47" pos:end="1573:48">ot</name></expr></argument>, <argument pos:start="1573:51" pos:end="1573:57"><expr pos:start="1573:51" pos:end="1573:57"><name pos:start="1573:51" pos:end="1573:57">OR_TMP0</name></expr></argument>, <argument pos:start="1573:60" pos:end="1573:60"><expr pos:start="1573:60" pos:end="1573:60"><literal type="number" pos:start="1573:60" pos:end="1573:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1575:17" pos:end="1575:68"><expr pos:start="1575:17" pos:end="1575:67"><call pos:start="1575:17" pos:end="1575:67"><name pos:start="1575:17" pos:end="1575:31">tcg_gen_andc_tl</name><argument_list pos:start="1575:32" pos:end="1575:67">(<argument pos:start="1575:33" pos:end="1575:38"><expr pos:start="1575:33" pos:end="1575:38"><name pos:start="1575:33" pos:end="1575:38">cpu_T0</name></expr></argument>, <argument pos:start="1575:41" pos:end="1575:58"><expr pos:start="1575:41" pos:end="1575:58"><name pos:start="1575:41" pos:end="1575:58"><name pos:start="1575:41" pos:end="1575:48">cpu_regs</name><index pos:start="1575:49" pos:end="1575:58">[<expr pos:start="1575:50" pos:end="1575:57"><name pos:start="1575:50" pos:end="1575:57"><name pos:start="1575:50" pos:end="1575:50">s</name><operator pos:start="1575:51" pos:end="1575:52">-&gt;</operator><name pos:start="1575:53" pos:end="1575:57">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="1575:61" pos:end="1575:66"><expr pos:start="1575:61" pos:end="1575:66"><name pos:start="1575:61" pos:end="1575:66">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1577:17" pos:end="1577:50"><expr pos:start="1577:17" pos:end="1577:49"><call pos:start="1577:17" pos:end="1577:49"><name pos:start="1577:17" pos:end="1577:32">gen_op_mov_reg_v</name><argument_list pos:start="1577:33" pos:end="1577:49">(<argument pos:start="1577:34" pos:end="1577:35"><expr pos:start="1577:34" pos:end="1577:35"><name pos:start="1577:34" pos:end="1577:35">ot</name></expr></argument>, <argument pos:start="1577:38" pos:end="1577:40"><expr pos:start="1577:38" pos:end="1577:40"><name pos:start="1577:38" pos:end="1577:40">reg</name></expr></argument>, <argument pos:start="1577:43" pos:end="1577:48"><expr pos:start="1577:43" pos:end="1577:48"><name pos:start="1577:43" pos:end="1577:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1579:17" pos:end="1579:36"><expr pos:start="1579:17" pos:end="1579:35"><call pos:start="1579:17" pos:end="1579:35"><name pos:start="1579:17" pos:end="1579:33">gen_op_update1_cc</name><argument_list pos:start="1579:34" pos:end="1579:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1581:17" pos:end="1581:48"><expr pos:start="1581:17" pos:end="1581:47"><call pos:start="1581:17" pos:end="1581:47"><name pos:start="1581:17" pos:end="1581:25">set_cc_op</name><argument_list pos:start="1581:26" pos:end="1581:47">(<argument pos:start="1581:27" pos:end="1581:27"><expr pos:start="1581:27" pos:end="1581:27"><name pos:start="1581:27" pos:end="1581:27">s</name></expr></argument>, <argument pos:start="1581:30" pos:end="1581:46"><expr pos:start="1581:30" pos:end="1581:46"><name pos:start="1581:30" pos:end="1581:41">CC_OP_LOGICB</name> <operator pos:start="1581:43" pos:end="1581:43">+</operator> <name pos:start="1581:45" pos:end="1581:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1583:17" pos:end="1583:22">break;</break>



            <case pos:start="1587:13" pos:end="1587:23">case <expr pos:start="1587:18" pos:end="1587:22"><literal type="number" pos:start="1587:18" pos:end="1587:22">0x0f7</literal></expr>:</case> <comment type="block" pos:start="1587:25" pos:end="1587:46">/* bextr Gy, Ey, By */</comment>

                <if_stmt pos:start="1589:17" pos:end="1597:17"><if pos:start="1589:17" pos:end="1597:17">if <condition pos:start="1589:20" pos:end="1593:37">(<expr pos:start="1589:21" pos:end="1593:36"><operator pos:start="1589:21" pos:end="1589:21">!</operator><operator pos:start="1589:22" pos:end="1589:22">(</operator><name pos:start="1589:23" pos:end="1589:47"><name pos:start="1589:23" pos:end="1589:23">s</name><operator pos:start="1589:24" pos:end="1589:25">-&gt;</operator><name pos:start="1589:26" pos:end="1589:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1589:49" pos:end="1589:49">&amp;</operator> <name pos:start="1589:51" pos:end="1589:68">CPUID_7_0_EBX_BMI1</name><operator pos:start="1589:69" pos:end="1589:69">)</operator>

                    <operator pos:start="1591:21" pos:end="1591:22">||</operator> <operator pos:start="1591:24" pos:end="1591:24">!</operator><operator pos:start="1591:25" pos:end="1591:25">(</operator><name pos:start="1591:26" pos:end="1591:34"><name pos:start="1591:26" pos:end="1591:26">s</name><operator pos:start="1591:27" pos:end="1591:28">-&gt;</operator><name pos:start="1591:29" pos:end="1591:34">prefix</name></name> <operator pos:start="1591:36" pos:end="1591:36">&amp;</operator> <name pos:start="1591:38" pos:end="1591:47">PREFIX_VEX</name><operator pos:start="1591:48" pos:end="1591:48">)</operator>

                    <operator pos:start="1593:21" pos:end="1593:22">||</operator> <name pos:start="1593:24" pos:end="1593:31"><name pos:start="1593:24" pos:end="1593:24">s</name><operator pos:start="1593:25" pos:end="1593:26">-&gt;</operator><name pos:start="1593:27" pos:end="1593:31">vex_l</name></name> <operator pos:start="1593:33" pos:end="1593:34">!=</operator> <literal type="number" pos:start="1593:36" pos:end="1593:36">0</literal></expr>)</condition> <block pos:start="1593:39" pos:end="1597:17">{<block_content pos:start="1595:21" pos:end="1595:36">

                    <goto pos:start="1595:21" pos:end="1595:36">goto <name pos:start="1595:26" pos:end="1595:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1599:17" pos:end="1599:40"><expr pos:start="1599:17" pos:end="1599:39"><name pos:start="1599:17" pos:end="1599:18">ot</name> <operator pos:start="1599:20" pos:end="1599:20">=</operator> <call pos:start="1599:22" pos:end="1599:39"><name pos:start="1599:22" pos:end="1599:29">mo_64_32</name><argument_list pos:start="1599:30" pos:end="1599:39">(<argument pos:start="1599:31" pos:end="1599:38"><expr pos:start="1599:31" pos:end="1599:38"><name pos:start="1599:31" pos:end="1599:38"><name pos:start="1599:31" pos:end="1599:31">s</name><operator pos:start="1599:32" pos:end="1599:33">-&gt;</operator><name pos:start="1599:34" pos:end="1599:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1601:17" pos:end="1659:17">{<block_content pos:start="1603:21" pos:end="1657:52">

                    <decl_stmt pos:start="1603:21" pos:end="1603:37"><decl pos:start="1603:21" pos:end="1603:30"><type pos:start="1603:21" pos:end="1603:24"><name pos:start="1603:21" pos:end="1603:24">TCGv</name></type> <name pos:start="1603:26" pos:end="1603:30">bound</name></decl>, <decl pos:start="1603:33" pos:end="1603:36"><type ref="prev" pos:start="1603:21" pos:end="1603:24"/><name pos:start="1603:33" pos:end="1603:36">zero</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="1607:21" pos:end="1607:66"><expr pos:start="1607:21" pos:end="1607:65"><call pos:start="1607:21" pos:end="1607:65"><name pos:start="1607:21" pos:end="1607:34">gen_ldst_modrm</name><argument_list pos:start="1607:35" pos:end="1607:65">(<argument pos:start="1607:36" pos:end="1607:38"><expr pos:start="1607:36" pos:end="1607:38"><name pos:start="1607:36" pos:end="1607:38">env</name></expr></argument>, <argument pos:start="1607:41" pos:end="1607:41"><expr pos:start="1607:41" pos:end="1607:41"><name pos:start="1607:41" pos:end="1607:41">s</name></expr></argument>, <argument pos:start="1607:44" pos:end="1607:48"><expr pos:start="1607:44" pos:end="1607:48"><name pos:start="1607:44" pos:end="1607:48">modrm</name></expr></argument>, <argument pos:start="1607:51" pos:end="1607:52"><expr pos:start="1607:51" pos:end="1607:52"><name pos:start="1607:51" pos:end="1607:52">ot</name></expr></argument>, <argument pos:start="1607:55" pos:end="1607:61"><expr pos:start="1607:55" pos:end="1607:61"><name pos:start="1607:55" pos:end="1607:61">OR_TMP0</name></expr></argument>, <argument pos:start="1607:64" pos:end="1607:64"><expr pos:start="1607:64" pos:end="1607:64"><literal type="number" pos:start="1607:64" pos:end="1607:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="1609:21" pos:end="1611:69">/* Extract START, and shift the operand.

                       Shifts larger than operand size get zeros.  */</comment>

                    <expr_stmt pos:start="1613:21" pos:end="1613:65"><expr pos:start="1613:21" pos:end="1613:64"><call pos:start="1613:21" pos:end="1613:64"><name pos:start="1613:21" pos:end="1613:36">tcg_gen_ext8u_tl</name><argument_list pos:start="1613:37" pos:end="1613:64">(<argument pos:start="1613:38" pos:end="1613:43"><expr pos:start="1613:38" pos:end="1613:43"><name pos:start="1613:38" pos:end="1613:43">cpu_A0</name></expr></argument>, <argument pos:start="1613:46" pos:end="1613:63"><expr pos:start="1613:46" pos:end="1613:63"><name pos:start="1613:46" pos:end="1613:63"><name pos:start="1613:46" pos:end="1613:53">cpu_regs</name><index pos:start="1613:54" pos:end="1613:63">[<expr pos:start="1613:55" pos:end="1613:62"><name pos:start="1613:55" pos:end="1613:62"><name pos:start="1613:55" pos:end="1613:55">s</name><operator pos:start="1613:56" pos:end="1613:57">-&gt;</operator><name pos:start="1613:58" pos:end="1613:62">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1615:21" pos:end="1615:59"><expr pos:start="1615:21" pos:end="1615:58"><call pos:start="1615:21" pos:end="1615:58"><name pos:start="1615:21" pos:end="1615:34">tcg_gen_shr_tl</name><argument_list pos:start="1615:35" pos:end="1615:58">(<argument pos:start="1615:36" pos:end="1615:41"><expr pos:start="1615:36" pos:end="1615:41"><name pos:start="1615:36" pos:end="1615:41">cpu_T0</name></expr></argument>, <argument pos:start="1615:44" pos:end="1615:49"><expr pos:start="1615:44" pos:end="1615:49"><name pos:start="1615:44" pos:end="1615:49">cpu_T0</name></expr></argument>, <argument pos:start="1615:52" pos:end="1615:57"><expr pos:start="1615:52" pos:end="1615:57"><name pos:start="1615:52" pos:end="1615:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1619:21" pos:end="1619:64"><expr pos:start="1619:21" pos:end="1619:63"><name pos:start="1619:21" pos:end="1619:25">bound</name> <operator pos:start="1619:27" pos:end="1619:27">=</operator> <call pos:start="1619:29" pos:end="1619:63"><name pos:start="1619:29" pos:end="1619:40">tcg_const_tl</name><argument_list pos:start="1619:41" pos:end="1619:63">(<argument pos:start="1619:42" pos:end="1619:62"><expr pos:start="1619:42" pos:end="1619:62"><ternary pos:start="1619:42" pos:end="1619:62"><condition pos:start="1619:42" pos:end="1619:54"><expr pos:start="1619:42" pos:end="1619:52"><name pos:start="1619:42" pos:end="1619:43">ot</name> <operator pos:start="1619:45" pos:end="1619:46">==</operator> <name pos:start="1619:48" pos:end="1619:52">MO_64</name></expr> ?</condition><then pos:start="1619:56" pos:end="1619:57"> <expr pos:start="1619:56" pos:end="1619:57"><literal type="number" pos:start="1619:56" pos:end="1619:57">63</literal></expr> </then><else pos:start="1619:59" pos:end="1619:62">: <expr pos:start="1619:61" pos:end="1619:62"><literal type="number" pos:start="1619:61" pos:end="1619:62">31</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1621:21" pos:end="1621:43"><expr pos:start="1621:21" pos:end="1621:42"><name pos:start="1621:21" pos:end="1621:24">zero</name> <operator pos:start="1621:26" pos:end="1621:26">=</operator> <call pos:start="1621:28" pos:end="1621:42"><name pos:start="1621:28" pos:end="1621:39">tcg_const_tl</name><argument_list pos:start="1621:40" pos:end="1621:42">(<argument pos:start="1621:41" pos:end="1621:41"><expr pos:start="1621:41" pos:end="1621:41"><literal type="number" pos:start="1621:41" pos:end="1621:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1623:21" pos:end="1625:53"><expr pos:start="1623:21" pos:end="1625:52"><call pos:start="1623:21" pos:end="1625:52"><name pos:start="1623:21" pos:end="1623:38">tcg_gen_movcond_tl</name><argument_list pos:start="1623:39" pos:end="1625:52">(<argument pos:start="1623:40" pos:end="1623:51"><expr pos:start="1623:40" pos:end="1623:51"><name pos:start="1623:40" pos:end="1623:51">TCG_COND_LEU</name></expr></argument>, <argument pos:start="1623:54" pos:end="1623:59"><expr pos:start="1623:54" pos:end="1623:59"><name pos:start="1623:54" pos:end="1623:59">cpu_T0</name></expr></argument>, <argument pos:start="1623:62" pos:end="1623:67"><expr pos:start="1623:62" pos:end="1623:67"><name pos:start="1623:62" pos:end="1623:67">cpu_A0</name></expr></argument>, <argument pos:start="1623:70" pos:end="1623:74"><expr pos:start="1623:70" pos:end="1623:74"><name pos:start="1623:70" pos:end="1623:74">bound</name></expr></argument>,

                                       <argument pos:start="1625:40" pos:end="1625:45"><expr pos:start="1625:40" pos:end="1625:45"><name pos:start="1625:40" pos:end="1625:45">cpu_T0</name></expr></argument>, <argument pos:start="1625:48" pos:end="1625:51"><expr pos:start="1625:48" pos:end="1625:51"><name pos:start="1625:48" pos:end="1625:51">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1627:21" pos:end="1627:40"><expr pos:start="1627:21" pos:end="1627:39"><call pos:start="1627:21" pos:end="1627:39"><name pos:start="1627:21" pos:end="1627:33">tcg_temp_free</name><argument_list pos:start="1627:34" pos:end="1627:39">(<argument pos:start="1627:35" pos:end="1627:38"><expr pos:start="1627:35" pos:end="1627:38"><name pos:start="1627:35" pos:end="1627:38">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <comment type="block" pos:start="1631:21" pos:end="1633:53">/* Extract the LEN into a mask.  Lengths larger than

                       operand size get all ones.  */</comment>

                    <expr_stmt pos:start="1635:21" pos:end="1635:73"><expr pos:start="1635:21" pos:end="1635:72"><call pos:start="1635:21" pos:end="1635:72"><name pos:start="1635:21" pos:end="1635:38">tcg_gen_extract_tl</name><argument_list pos:start="1635:39" pos:end="1635:72">(<argument pos:start="1635:40" pos:end="1635:45"><expr pos:start="1635:40" pos:end="1635:45"><name pos:start="1635:40" pos:end="1635:45">cpu_A0</name></expr></argument>, <argument pos:start="1635:48" pos:end="1635:65"><expr pos:start="1635:48" pos:end="1635:65"><name pos:start="1635:48" pos:end="1635:65"><name pos:start="1635:48" pos:end="1635:55">cpu_regs</name><index pos:start="1635:56" pos:end="1635:65">[<expr pos:start="1635:57" pos:end="1635:64"><name pos:start="1635:57" pos:end="1635:64"><name pos:start="1635:57" pos:end="1635:57">s</name><operator pos:start="1635:58" pos:end="1635:59">-&gt;</operator><name pos:start="1635:60" pos:end="1635:64">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="1635:68" pos:end="1635:68"><expr pos:start="1635:68" pos:end="1635:68"><literal type="number" pos:start="1635:68" pos:end="1635:68">8</literal></expr></argument>, <argument pos:start="1635:71" pos:end="1635:71"><expr pos:start="1635:71" pos:end="1635:71"><literal type="number" pos:start="1635:71" pos:end="1635:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1637:21" pos:end="1639:54"><expr pos:start="1637:21" pos:end="1639:53"><call pos:start="1637:21" pos:end="1639:53"><name pos:start="1637:21" pos:end="1637:38">tcg_gen_movcond_tl</name><argument_list pos:start="1637:39" pos:end="1639:53">(<argument pos:start="1637:40" pos:end="1637:51"><expr pos:start="1637:40" pos:end="1637:51"><name pos:start="1637:40" pos:end="1637:51">TCG_COND_LEU</name></expr></argument>, <argument pos:start="1637:54" pos:end="1637:59"><expr pos:start="1637:54" pos:end="1637:59"><name pos:start="1637:54" pos:end="1637:59">cpu_A0</name></expr></argument>, <argument pos:start="1637:62" pos:end="1637:67"><expr pos:start="1637:62" pos:end="1637:67"><name pos:start="1637:62" pos:end="1637:67">cpu_A0</name></expr></argument>, <argument pos:start="1637:70" pos:end="1637:74"><expr pos:start="1637:70" pos:end="1637:74"><name pos:start="1637:70" pos:end="1637:74">bound</name></expr></argument>,

                                       <argument pos:start="1639:40" pos:end="1639:45"><expr pos:start="1639:40" pos:end="1639:45"><name pos:start="1639:40" pos:end="1639:45">cpu_A0</name></expr></argument>, <argument pos:start="1639:48" pos:end="1639:52"><expr pos:start="1639:48" pos:end="1639:52"><name pos:start="1639:48" pos:end="1639:52">bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1641:21" pos:end="1641:41"><expr pos:start="1641:21" pos:end="1641:40"><call pos:start="1641:21" pos:end="1641:40"><name pos:start="1641:21" pos:end="1641:33">tcg_temp_free</name><argument_list pos:start="1641:34" pos:end="1641:40">(<argument pos:start="1641:35" pos:end="1641:39"><expr pos:start="1641:35" pos:end="1641:39"><name pos:start="1641:35" pos:end="1641:39">bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1643:21" pos:end="1643:47"><expr pos:start="1643:21" pos:end="1643:46"><call pos:start="1643:21" pos:end="1643:46"><name pos:start="1643:21" pos:end="1643:35">tcg_gen_movi_tl</name><argument_list pos:start="1643:36" pos:end="1643:46">(<argument pos:start="1643:37" pos:end="1643:42"><expr pos:start="1643:37" pos:end="1643:42"><name pos:start="1643:37" pos:end="1643:42">cpu_T1</name></expr></argument>, <argument pos:start="1643:45" pos:end="1643:45"><expr pos:start="1643:45" pos:end="1643:45"><literal type="number" pos:start="1643:45" pos:end="1643:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1645:21" pos:end="1645:59"><expr pos:start="1645:21" pos:end="1645:58"><call pos:start="1645:21" pos:end="1645:58"><name pos:start="1645:21" pos:end="1645:34">tcg_gen_shl_tl</name><argument_list pos:start="1645:35" pos:end="1645:58">(<argument pos:start="1645:36" pos:end="1645:41"><expr pos:start="1645:36" pos:end="1645:41"><name pos:start="1645:36" pos:end="1645:41">cpu_T1</name></expr></argument>, <argument pos:start="1645:44" pos:end="1645:49"><expr pos:start="1645:44" pos:end="1645:49"><name pos:start="1645:44" pos:end="1645:49">cpu_T1</name></expr></argument>, <argument pos:start="1645:52" pos:end="1645:57"><expr pos:start="1645:52" pos:end="1645:57"><name pos:start="1645:52" pos:end="1645:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1647:21" pos:end="1647:55"><expr pos:start="1647:21" pos:end="1647:54"><call pos:start="1647:21" pos:end="1647:54"><name pos:start="1647:21" pos:end="1647:35">tcg_gen_subi_tl</name><argument_list pos:start="1647:36" pos:end="1647:54">(<argument pos:start="1647:37" pos:end="1647:42"><expr pos:start="1647:37" pos:end="1647:42"><name pos:start="1647:37" pos:end="1647:42">cpu_T1</name></expr></argument>, <argument pos:start="1647:45" pos:end="1647:50"><expr pos:start="1647:45" pos:end="1647:50"><name pos:start="1647:45" pos:end="1647:50">cpu_T1</name></expr></argument>, <argument pos:start="1647:53" pos:end="1647:53"><expr pos:start="1647:53" pos:end="1647:53"><literal type="number" pos:start="1647:53" pos:end="1647:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1649:21" pos:end="1649:59"><expr pos:start="1649:21" pos:end="1649:58"><call pos:start="1649:21" pos:end="1649:58"><name pos:start="1649:21" pos:end="1649:34">tcg_gen_and_tl</name><argument_list pos:start="1649:35" pos:end="1649:58">(<argument pos:start="1649:36" pos:end="1649:41"><expr pos:start="1649:36" pos:end="1649:41"><name pos:start="1649:36" pos:end="1649:41">cpu_T0</name></expr></argument>, <argument pos:start="1649:44" pos:end="1649:49"><expr pos:start="1649:44" pos:end="1649:49"><name pos:start="1649:44" pos:end="1649:49">cpu_T0</name></expr></argument>, <argument pos:start="1649:52" pos:end="1649:57"><expr pos:start="1649:52" pos:end="1649:57"><name pos:start="1649:52" pos:end="1649:57">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1653:21" pos:end="1653:54"><expr pos:start="1653:21" pos:end="1653:53"><call pos:start="1653:21" pos:end="1653:53"><name pos:start="1653:21" pos:end="1653:36">gen_op_mov_reg_v</name><argument_list pos:start="1653:37" pos:end="1653:53">(<argument pos:start="1653:38" pos:end="1653:39"><expr pos:start="1653:38" pos:end="1653:39"><name pos:start="1653:38" pos:end="1653:39">ot</name></expr></argument>, <argument pos:start="1653:42" pos:end="1653:44"><expr pos:start="1653:42" pos:end="1653:44"><name pos:start="1653:42" pos:end="1653:44">reg</name></expr></argument>, <argument pos:start="1653:47" pos:end="1653:52"><expr pos:start="1653:47" pos:end="1653:52"><name pos:start="1653:47" pos:end="1653:52">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1655:21" pos:end="1655:40"><expr pos:start="1655:21" pos:end="1655:39"><call pos:start="1655:21" pos:end="1655:39"><name pos:start="1655:21" pos:end="1655:37">gen_op_update1_cc</name><argument_list pos:start="1655:38" pos:end="1655:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1657:21" pos:end="1657:52"><expr pos:start="1657:21" pos:end="1657:51"><call pos:start="1657:21" pos:end="1657:51"><name pos:start="1657:21" pos:end="1657:29">set_cc_op</name><argument_list pos:start="1657:30" pos:end="1657:51">(<argument pos:start="1657:31" pos:end="1657:31"><expr pos:start="1657:31" pos:end="1657:31"><name pos:start="1657:31" pos:end="1657:31">s</name></expr></argument>, <argument pos:start="1657:34" pos:end="1657:50"><expr pos:start="1657:34" pos:end="1657:50"><name pos:start="1657:34" pos:end="1657:45">CC_OP_LOGICB</name> <operator pos:start="1657:47" pos:end="1657:47">+</operator> <name pos:start="1657:49" pos:end="1657:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1661:17" pos:end="1661:22">break;</break>



            <case pos:start="1665:13" pos:end="1665:23">case <expr pos:start="1665:18" pos:end="1665:22"><literal type="number" pos:start="1665:18" pos:end="1665:22">0x0f5</literal></expr>:</case> <comment type="block" pos:start="1665:25" pos:end="1665:45">/* bzhi Gy, Ey, By */</comment>

                <if_stmt pos:start="1667:17" pos:end="1675:17"><if pos:start="1667:17" pos:end="1675:17">if <condition pos:start="1667:20" pos:end="1671:37">(<expr pos:start="1667:21" pos:end="1671:36"><operator pos:start="1667:21" pos:end="1667:21">!</operator><operator pos:start="1667:22" pos:end="1667:22">(</operator><name pos:start="1667:23" pos:end="1667:47"><name pos:start="1667:23" pos:end="1667:23">s</name><operator pos:start="1667:24" pos:end="1667:25">-&gt;</operator><name pos:start="1667:26" pos:end="1667:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1667:49" pos:end="1667:49">&amp;</operator> <name pos:start="1667:51" pos:end="1667:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1667:69" pos:end="1667:69">)</operator>

                    <operator pos:start="1669:21" pos:end="1669:22">||</operator> <operator pos:start="1669:24" pos:end="1669:24">!</operator><operator pos:start="1669:25" pos:end="1669:25">(</operator><name pos:start="1669:26" pos:end="1669:34"><name pos:start="1669:26" pos:end="1669:26">s</name><operator pos:start="1669:27" pos:end="1669:28">-&gt;</operator><name pos:start="1669:29" pos:end="1669:34">prefix</name></name> <operator pos:start="1669:36" pos:end="1669:36">&amp;</operator> <name pos:start="1669:38" pos:end="1669:47">PREFIX_VEX</name><operator pos:start="1669:48" pos:end="1669:48">)</operator>

                    <operator pos:start="1671:21" pos:end="1671:22">||</operator> <name pos:start="1671:24" pos:end="1671:31"><name pos:start="1671:24" pos:end="1671:24">s</name><operator pos:start="1671:25" pos:end="1671:26">-&gt;</operator><name pos:start="1671:27" pos:end="1671:31">vex_l</name></name> <operator pos:start="1671:33" pos:end="1671:34">!=</operator> <literal type="number" pos:start="1671:36" pos:end="1671:36">0</literal></expr>)</condition> <block pos:start="1671:39" pos:end="1675:17">{<block_content pos:start="1673:21" pos:end="1673:36">

                    <goto pos:start="1673:21" pos:end="1673:36">goto <name pos:start="1673:26" pos:end="1673:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1677:17" pos:end="1677:40"><expr pos:start="1677:17" pos:end="1677:39"><name pos:start="1677:17" pos:end="1677:18">ot</name> <operator pos:start="1677:20" pos:end="1677:20">=</operator> <call pos:start="1677:22" pos:end="1677:39"><name pos:start="1677:22" pos:end="1677:29">mo_64_32</name><argument_list pos:start="1677:30" pos:end="1677:39">(<argument pos:start="1677:31" pos:end="1677:38"><expr pos:start="1677:31" pos:end="1677:38"><name pos:start="1677:31" pos:end="1677:38"><name pos:start="1677:31" pos:end="1677:31">s</name><operator pos:start="1677:32" pos:end="1677:33">-&gt;</operator><name pos:start="1677:34" pos:end="1677:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1679:17" pos:end="1679:62"><expr pos:start="1679:17" pos:end="1679:61"><call pos:start="1679:17" pos:end="1679:61"><name pos:start="1679:17" pos:end="1679:30">gen_ldst_modrm</name><argument_list pos:start="1679:31" pos:end="1679:61">(<argument pos:start="1679:32" pos:end="1679:34"><expr pos:start="1679:32" pos:end="1679:34"><name pos:start="1679:32" pos:end="1679:34">env</name></expr></argument>, <argument pos:start="1679:37" pos:end="1679:37"><expr pos:start="1679:37" pos:end="1679:37"><name pos:start="1679:37" pos:end="1679:37">s</name></expr></argument>, <argument pos:start="1679:40" pos:end="1679:44"><expr pos:start="1679:40" pos:end="1679:44"><name pos:start="1679:40" pos:end="1679:44">modrm</name></expr></argument>, <argument pos:start="1679:47" pos:end="1679:48"><expr pos:start="1679:47" pos:end="1679:48"><name pos:start="1679:47" pos:end="1679:48">ot</name></expr></argument>, <argument pos:start="1679:51" pos:end="1679:57"><expr pos:start="1679:51" pos:end="1679:57"><name pos:start="1679:51" pos:end="1679:57">OR_TMP0</name></expr></argument>, <argument pos:start="1679:60" pos:end="1679:60"><expr pos:start="1679:60" pos:end="1679:60"><literal type="number" pos:start="1679:60" pos:end="1679:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1681:17" pos:end="1681:61"><expr pos:start="1681:17" pos:end="1681:60"><call pos:start="1681:17" pos:end="1681:60"><name pos:start="1681:17" pos:end="1681:32">tcg_gen_ext8u_tl</name><argument_list pos:start="1681:33" pos:end="1681:60">(<argument pos:start="1681:34" pos:end="1681:39"><expr pos:start="1681:34" pos:end="1681:39"><name pos:start="1681:34" pos:end="1681:39">cpu_T1</name></expr></argument>, <argument pos:start="1681:42" pos:end="1681:59"><expr pos:start="1681:42" pos:end="1681:59"><name pos:start="1681:42" pos:end="1681:59"><name pos:start="1681:42" pos:end="1681:49">cpu_regs</name><index pos:start="1681:50" pos:end="1681:59">[<expr pos:start="1681:51" pos:end="1681:58"><name pos:start="1681:51" pos:end="1681:58"><name pos:start="1681:51" pos:end="1681:51">s</name><operator pos:start="1681:52" pos:end="1681:53">-&gt;</operator><name pos:start="1681:54" pos:end="1681:58">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1683:17" pos:end="1701:17">{<block_content pos:start="1685:21" pos:end="1699:41">

                    <decl_stmt pos:start="1685:21" pos:end="1685:69"><decl pos:start="1685:21" pos:end="1685:68"><type pos:start="1685:21" pos:end="1685:24"><name pos:start="1685:21" pos:end="1685:24">TCGv</name></type> <name pos:start="1685:26" pos:end="1685:30">bound</name> <init pos:start="1685:32" pos:end="1685:68">= <expr pos:start="1685:34" pos:end="1685:68"><call pos:start="1685:34" pos:end="1685:68"><name pos:start="1685:34" pos:end="1685:45">tcg_const_tl</name><argument_list pos:start="1685:46" pos:end="1685:68">(<argument pos:start="1685:47" pos:end="1685:67"><expr pos:start="1685:47" pos:end="1685:67"><ternary pos:start="1685:47" pos:end="1685:67"><condition pos:start="1685:47" pos:end="1685:59"><expr pos:start="1685:47" pos:end="1685:57"><name pos:start="1685:47" pos:end="1685:48">ot</name> <operator pos:start="1685:50" pos:end="1685:51">==</operator> <name pos:start="1685:53" pos:end="1685:57">MO_64</name></expr> ?</condition><then pos:start="1685:61" pos:end="1685:62"> <expr pos:start="1685:61" pos:end="1685:62"><literal type="number" pos:start="1685:61" pos:end="1685:62">63</literal></expr> </then><else pos:start="1685:64" pos:end="1685:67">: <expr pos:start="1685:66" pos:end="1685:67"><literal type="number" pos:start="1685:66" pos:end="1685:67">31</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="block" pos:start="1687:21" pos:end="1689:72">/* Note that since we're using BMILG (in order to get O

                       cleared) we need to store the inverse into C.  */</comment>

                    <expr_stmt pos:start="1691:21" pos:end="1693:54"><expr pos:start="1691:21" pos:end="1693:53"><call pos:start="1691:21" pos:end="1693:53"><name pos:start="1691:21" pos:end="1691:38">tcg_gen_setcond_tl</name><argument_list pos:start="1691:39" pos:end="1693:53">(<argument pos:start="1691:40" pos:end="1691:50"><expr pos:start="1691:40" pos:end="1691:50"><name pos:start="1691:40" pos:end="1691:50">TCG_COND_LT</name></expr></argument>, <argument pos:start="1691:53" pos:end="1691:62"><expr pos:start="1691:53" pos:end="1691:62"><name pos:start="1691:53" pos:end="1691:62">cpu_cc_src</name></expr></argument>,

                                       <argument pos:start="1693:40" pos:end="1693:45"><expr pos:start="1693:40" pos:end="1693:45"><name pos:start="1693:40" pos:end="1693:45">cpu_T1</name></expr></argument>, <argument pos:start="1693:48" pos:end="1693:52"><expr pos:start="1693:48" pos:end="1693:52"><name pos:start="1693:48" pos:end="1693:52">bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1695:21" pos:end="1697:61"><expr pos:start="1695:21" pos:end="1697:60"><call pos:start="1695:21" pos:end="1697:60"><name pos:start="1695:21" pos:end="1695:38">tcg_gen_movcond_tl</name><argument_list pos:start="1695:39" pos:end="1697:60">(<argument pos:start="1695:40" pos:end="1695:50"><expr pos:start="1695:40" pos:end="1695:50"><name pos:start="1695:40" pos:end="1695:50">TCG_COND_GT</name></expr></argument>, <argument pos:start="1695:53" pos:end="1695:58"><expr pos:start="1695:53" pos:end="1695:58"><name pos:start="1695:53" pos:end="1695:58">cpu_T1</name></expr></argument>, <argument pos:start="1695:61" pos:end="1695:66"><expr pos:start="1695:61" pos:end="1695:66"><name pos:start="1695:61" pos:end="1695:66">cpu_T1</name></expr></argument>,

                                       <argument pos:start="1697:40" pos:end="1697:44"><expr pos:start="1697:40" pos:end="1697:44"><name pos:start="1697:40" pos:end="1697:44">bound</name></expr></argument>, <argument pos:start="1697:47" pos:end="1697:51"><expr pos:start="1697:47" pos:end="1697:51"><name pos:start="1697:47" pos:end="1697:51">bound</name></expr></argument>, <argument pos:start="1697:54" pos:end="1697:59"><expr pos:start="1697:54" pos:end="1697:59"><name pos:start="1697:54" pos:end="1697:59">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1699:21" pos:end="1699:41"><expr pos:start="1699:21" pos:end="1699:40"><call pos:start="1699:21" pos:end="1699:40"><name pos:start="1699:21" pos:end="1699:33">tcg_temp_free</name><argument_list pos:start="1699:34" pos:end="1699:40">(<argument pos:start="1699:35" pos:end="1699:39"><expr pos:start="1699:35" pos:end="1699:39"><name pos:start="1699:35" pos:end="1699:39">bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <expr_stmt pos:start="1703:17" pos:end="1703:44"><expr pos:start="1703:17" pos:end="1703:43"><call pos:start="1703:17" pos:end="1703:43"><name pos:start="1703:17" pos:end="1703:31">tcg_gen_movi_tl</name><argument_list pos:start="1703:32" pos:end="1703:43">(<argument pos:start="1703:33" pos:end="1703:38"><expr pos:start="1703:33" pos:end="1703:38"><name pos:start="1703:33" pos:end="1703:38">cpu_A0</name></expr></argument>, <argument pos:start="1703:41" pos:end="1703:42"><expr pos:start="1703:41" pos:end="1703:42"><operator pos:start="1703:41" pos:end="1703:41">-</operator><literal type="number" pos:start="1703:42" pos:end="1703:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1705:17" pos:end="1705:55"><expr pos:start="1705:17" pos:end="1705:54"><call pos:start="1705:17" pos:end="1705:54"><name pos:start="1705:17" pos:end="1705:30">tcg_gen_shl_tl</name><argument_list pos:start="1705:31" pos:end="1705:54">(<argument pos:start="1705:32" pos:end="1705:37"><expr pos:start="1705:32" pos:end="1705:37"><name pos:start="1705:32" pos:end="1705:37">cpu_A0</name></expr></argument>, <argument pos:start="1705:40" pos:end="1705:45"><expr pos:start="1705:40" pos:end="1705:45"><name pos:start="1705:40" pos:end="1705:45">cpu_A0</name></expr></argument>, <argument pos:start="1705:48" pos:end="1705:53"><expr pos:start="1705:48" pos:end="1705:53"><name pos:start="1705:48" pos:end="1705:53">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1707:17" pos:end="1707:56"><expr pos:start="1707:17" pos:end="1707:55"><call pos:start="1707:17" pos:end="1707:55"><name pos:start="1707:17" pos:end="1707:31">tcg_gen_andc_tl</name><argument_list pos:start="1707:32" pos:end="1707:55">(<argument pos:start="1707:33" pos:end="1707:38"><expr pos:start="1707:33" pos:end="1707:38"><name pos:start="1707:33" pos:end="1707:38">cpu_T0</name></expr></argument>, <argument pos:start="1707:41" pos:end="1707:46"><expr pos:start="1707:41" pos:end="1707:46"><name pos:start="1707:41" pos:end="1707:46">cpu_T0</name></expr></argument>, <argument pos:start="1707:49" pos:end="1707:54"><expr pos:start="1707:49" pos:end="1707:54"><name pos:start="1707:49" pos:end="1707:54">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1709:17" pos:end="1709:50"><expr pos:start="1709:17" pos:end="1709:49"><call pos:start="1709:17" pos:end="1709:49"><name pos:start="1709:17" pos:end="1709:32">gen_op_mov_reg_v</name><argument_list pos:start="1709:33" pos:end="1709:49">(<argument pos:start="1709:34" pos:end="1709:35"><expr pos:start="1709:34" pos:end="1709:35"><name pos:start="1709:34" pos:end="1709:35">ot</name></expr></argument>, <argument pos:start="1709:38" pos:end="1709:40"><expr pos:start="1709:38" pos:end="1709:40"><name pos:start="1709:38" pos:end="1709:40">reg</name></expr></argument>, <argument pos:start="1709:43" pos:end="1709:48"><expr pos:start="1709:43" pos:end="1709:48"><name pos:start="1709:43" pos:end="1709:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1711:17" pos:end="1711:36"><expr pos:start="1711:17" pos:end="1711:35"><call pos:start="1711:17" pos:end="1711:35"><name pos:start="1711:17" pos:end="1711:33">gen_op_update1_cc</name><argument_list pos:start="1711:34" pos:end="1711:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1713:17" pos:end="1713:48"><expr pos:start="1713:17" pos:end="1713:47"><call pos:start="1713:17" pos:end="1713:47"><name pos:start="1713:17" pos:end="1713:25">set_cc_op</name><argument_list pos:start="1713:26" pos:end="1713:47">(<argument pos:start="1713:27" pos:end="1713:27"><expr pos:start="1713:27" pos:end="1713:27"><name pos:start="1713:27" pos:end="1713:27">s</name></expr></argument>, <argument pos:start="1713:30" pos:end="1713:46"><expr pos:start="1713:30" pos:end="1713:46"><name pos:start="1713:30" pos:end="1713:41">CC_OP_BMILGB</name> <operator pos:start="1713:43" pos:end="1713:43">+</operator> <name pos:start="1713:45" pos:end="1713:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1715:17" pos:end="1715:22">break;</break>



            <case pos:start="1719:13" pos:end="1719:23">case <expr pos:start="1719:18" pos:end="1719:22"><literal type="number" pos:start="1719:18" pos:end="1719:22">0x3f6</literal></expr>:</case> <comment type="block" pos:start="1719:25" pos:end="1719:50">/* mulx By, Gy, rdx, Ey */</comment>

                <if_stmt pos:start="1721:17" pos:end="1729:17"><if pos:start="1721:17" pos:end="1729:17">if <condition pos:start="1721:20" pos:end="1725:37">(<expr pos:start="1721:21" pos:end="1725:36"><operator pos:start="1721:21" pos:end="1721:21">!</operator><operator pos:start="1721:22" pos:end="1721:22">(</operator><name pos:start="1721:23" pos:end="1721:47"><name pos:start="1721:23" pos:end="1721:23">s</name><operator pos:start="1721:24" pos:end="1721:25">-&gt;</operator><name pos:start="1721:26" pos:end="1721:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1721:49" pos:end="1721:49">&amp;</operator> <name pos:start="1721:51" pos:end="1721:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1721:69" pos:end="1721:69">)</operator>

                    <operator pos:start="1723:21" pos:end="1723:22">||</operator> <operator pos:start="1723:24" pos:end="1723:24">!</operator><operator pos:start="1723:25" pos:end="1723:25">(</operator><name pos:start="1723:26" pos:end="1723:34"><name pos:start="1723:26" pos:end="1723:26">s</name><operator pos:start="1723:27" pos:end="1723:28">-&gt;</operator><name pos:start="1723:29" pos:end="1723:34">prefix</name></name> <operator pos:start="1723:36" pos:end="1723:36">&amp;</operator> <name pos:start="1723:38" pos:end="1723:47">PREFIX_VEX</name><operator pos:start="1723:48" pos:end="1723:48">)</operator>

                    <operator pos:start="1725:21" pos:end="1725:22">||</operator> <name pos:start="1725:24" pos:end="1725:31"><name pos:start="1725:24" pos:end="1725:24">s</name><operator pos:start="1725:25" pos:end="1725:26">-&gt;</operator><name pos:start="1725:27" pos:end="1725:31">vex_l</name></name> <operator pos:start="1725:33" pos:end="1725:34">!=</operator> <literal type="number" pos:start="1725:36" pos:end="1725:36">0</literal></expr>)</condition> <block pos:start="1725:39" pos:end="1729:17">{<block_content pos:start="1727:21" pos:end="1727:36">

                    <goto pos:start="1727:21" pos:end="1727:36">goto <name pos:start="1727:26" pos:end="1727:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1731:17" pos:end="1731:40"><expr pos:start="1731:17" pos:end="1731:39"><name pos:start="1731:17" pos:end="1731:18">ot</name> <operator pos:start="1731:20" pos:end="1731:20">=</operator> <call pos:start="1731:22" pos:end="1731:39"><name pos:start="1731:22" pos:end="1731:29">mo_64_32</name><argument_list pos:start="1731:30" pos:end="1731:39">(<argument pos:start="1731:31" pos:end="1731:38"><expr pos:start="1731:31" pos:end="1731:38"><name pos:start="1731:31" pos:end="1731:38"><name pos:start="1731:31" pos:end="1731:31">s</name><operator pos:start="1731:32" pos:end="1731:33">-&gt;</operator><name pos:start="1731:34" pos:end="1731:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1733:17" pos:end="1733:62"><expr pos:start="1733:17" pos:end="1733:61"><call pos:start="1733:17" pos:end="1733:61"><name pos:start="1733:17" pos:end="1733:30">gen_ldst_modrm</name><argument_list pos:start="1733:31" pos:end="1733:61">(<argument pos:start="1733:32" pos:end="1733:34"><expr pos:start="1733:32" pos:end="1733:34"><name pos:start="1733:32" pos:end="1733:34">env</name></expr></argument>, <argument pos:start="1733:37" pos:end="1733:37"><expr pos:start="1733:37" pos:end="1733:37"><name pos:start="1733:37" pos:end="1733:37">s</name></expr></argument>, <argument pos:start="1733:40" pos:end="1733:44"><expr pos:start="1733:40" pos:end="1733:44"><name pos:start="1733:40" pos:end="1733:44">modrm</name></expr></argument>, <argument pos:start="1733:47" pos:end="1733:48"><expr pos:start="1733:47" pos:end="1733:48"><name pos:start="1733:47" pos:end="1733:48">ot</name></expr></argument>, <argument pos:start="1733:51" pos:end="1733:57"><expr pos:start="1733:51" pos:end="1733:57"><name pos:start="1733:51" pos:end="1733:57">OR_TMP0</name></expr></argument>, <argument pos:start="1733:60" pos:end="1733:60"><expr pos:start="1733:60" pos:end="1733:60"><literal type="number" pos:start="1733:60" pos:end="1733:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="1735:17" pos:end="1769:17">switch <condition pos:start="1735:24" pos:end="1735:27">(<expr pos:start="1735:25" pos:end="1735:26"><name pos:start="1735:25" pos:end="1735:26">ot</name></expr>)</condition> <block pos:start="1735:29" pos:end="1769:17">{<block_content pos:start="1737:17" pos:end="1768:0">

                <default pos:start="1737:17" pos:end="1737:24">default:</default>

                    <expr_stmt pos:start="1739:21" pos:end="1739:63"><expr pos:start="1739:21" pos:end="1739:62"><call pos:start="1739:21" pos:end="1739:62"><name pos:start="1739:21" pos:end="1739:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1739:41" pos:end="1739:62">(<argument pos:start="1739:42" pos:end="1739:53"><expr pos:start="1739:42" pos:end="1739:53"><name pos:start="1739:42" pos:end="1739:53">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1739:56" pos:end="1739:61"><expr pos:start="1739:56" pos:end="1739:61"><name pos:start="1739:56" pos:end="1739:61">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1741:21" pos:end="1741:72"><expr pos:start="1741:21" pos:end="1741:71"><call pos:start="1741:21" pos:end="1741:71"><name pos:start="1741:21" pos:end="1741:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1741:41" pos:end="1741:71">(<argument pos:start="1741:42" pos:end="1741:53"><expr pos:start="1741:42" pos:end="1741:53"><name pos:start="1741:42" pos:end="1741:53">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="1741:56" pos:end="1741:70"><expr pos:start="1741:56" pos:end="1741:70"><name pos:start="1741:56" pos:end="1741:70"><name pos:start="1741:56" pos:end="1741:63">cpu_regs</name><index pos:start="1741:64" pos:end="1741:70">[<expr pos:start="1741:65" pos:end="1741:69"><name pos:start="1741:65" pos:end="1741:69">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1743:21" pos:end="1745:66"><expr pos:start="1743:21" pos:end="1745:65"><call pos:start="1743:21" pos:end="1745:65"><name pos:start="1743:21" pos:end="1743:37">tcg_gen_mulu2_i32</name><argument_list pos:start="1743:38" pos:end="1745:65">(<argument pos:start="1743:39" pos:end="1743:50"><expr pos:start="1743:39" pos:end="1743:50"><name pos:start="1743:39" pos:end="1743:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1743:53" pos:end="1743:64"><expr pos:start="1743:53" pos:end="1743:64"><name pos:start="1743:53" pos:end="1743:64">cpu_tmp3_i32</name></expr></argument>,

                                      <argument pos:start="1745:39" pos:end="1745:50"><expr pos:start="1745:39" pos:end="1745:50"><name pos:start="1745:39" pos:end="1745:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1745:53" pos:end="1745:64"><expr pos:start="1745:53" pos:end="1745:64"><name pos:start="1745:53" pos:end="1745:64">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1747:21" pos:end="1747:74"><expr pos:start="1747:21" pos:end="1747:73"><call pos:start="1747:21" pos:end="1747:73"><name pos:start="1747:21" pos:end="1747:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="1747:40" pos:end="1747:73">(<argument pos:start="1747:41" pos:end="1747:58"><expr pos:start="1747:41" pos:end="1747:58"><name pos:start="1747:41" pos:end="1747:58"><name pos:start="1747:41" pos:end="1747:48">cpu_regs</name><index pos:start="1747:49" pos:end="1747:58">[<expr pos:start="1747:50" pos:end="1747:57"><name pos:start="1747:50" pos:end="1747:57"><name pos:start="1747:50" pos:end="1747:50">s</name><operator pos:start="1747:51" pos:end="1747:52">-&gt;</operator><name pos:start="1747:53" pos:end="1747:57">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="1747:61" pos:end="1747:72"><expr pos:start="1747:61" pos:end="1747:72"><name pos:start="1747:61" pos:end="1747:72">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1749:21" pos:end="1749:69"><expr pos:start="1749:21" pos:end="1749:68"><call pos:start="1749:21" pos:end="1749:68"><name pos:start="1749:21" pos:end="1749:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="1749:40" pos:end="1749:68">(<argument pos:start="1749:41" pos:end="1749:53"><expr pos:start="1749:41" pos:end="1749:53"><name pos:start="1749:41" pos:end="1749:53"><name pos:start="1749:41" pos:end="1749:48">cpu_regs</name><index pos:start="1749:49" pos:end="1749:53">[<expr pos:start="1749:50" pos:end="1749:52"><name pos:start="1749:50" pos:end="1749:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1749:56" pos:end="1749:67"><expr pos:start="1749:56" pos:end="1749:67"><name pos:start="1749:56" pos:end="1749:67">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1751:21" pos:end="1754:0">break;</break>

<cpp:ifdef pos:start="1753:1" pos:end="1753:20">#<cpp:directive pos:start="1753:2" pos:end="1753:6">ifdef</cpp:directive> <name pos:start="1753:8" pos:end="1753:20">TARGET_X86_64</name></cpp:ifdef>

                <case pos:start="1755:17" pos:end="1755:27">case <expr pos:start="1755:22" pos:end="1755:26"><name pos:start="1755:22" pos:end="1755:26">MO_64</name></expr>:</case>

                    <expr_stmt pos:start="1757:21" pos:end="1759:63"><expr pos:start="1757:21" pos:end="1759:62"><call pos:start="1757:21" pos:end="1759:62"><name pos:start="1757:21" pos:end="1757:37">tcg_gen_mulu2_i64</name><argument_list pos:start="1757:38" pos:end="1759:62">(<argument pos:start="1757:39" pos:end="1757:44"><expr pos:start="1757:39" pos:end="1757:44"><name pos:start="1757:39" pos:end="1757:44">cpu_T0</name></expr></argument>, <argument pos:start="1757:47" pos:end="1757:52"><expr pos:start="1757:47" pos:end="1757:52"><name pos:start="1757:47" pos:end="1757:52">cpu_T1</name></expr></argument>,

                                      <argument pos:start="1759:39" pos:end="1759:44"><expr pos:start="1759:39" pos:end="1759:44"><name pos:start="1759:39" pos:end="1759:44">cpu_T0</name></expr></argument>, <argument pos:start="1759:47" pos:end="1759:61"><expr pos:start="1759:47" pos:end="1759:61"><name pos:start="1759:47" pos:end="1759:61"><name pos:start="1759:47" pos:end="1759:54">cpu_regs</name><index pos:start="1759:55" pos:end="1759:61">[<expr pos:start="1759:56" pos:end="1759:60"><name pos:start="1759:56" pos:end="1759:60">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1761:21" pos:end="1761:64"><expr pos:start="1761:21" pos:end="1761:63"><call pos:start="1761:21" pos:end="1761:63"><name pos:start="1761:21" pos:end="1761:35">tcg_gen_mov_i64</name><argument_list pos:start="1761:36" pos:end="1761:63">(<argument pos:start="1761:37" pos:end="1761:54"><expr pos:start="1761:37" pos:end="1761:54"><name pos:start="1761:37" pos:end="1761:54"><name pos:start="1761:37" pos:end="1761:44">cpu_regs</name><index pos:start="1761:45" pos:end="1761:54">[<expr pos:start="1761:46" pos:end="1761:53"><name pos:start="1761:46" pos:end="1761:53"><name pos:start="1761:46" pos:end="1761:46">s</name><operator pos:start="1761:47" pos:end="1761:48">-&gt;</operator><name pos:start="1761:49" pos:end="1761:53">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="1761:57" pos:end="1761:62"><expr pos:start="1761:57" pos:end="1761:62"><name pos:start="1761:57" pos:end="1761:62">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1763:21" pos:end="1763:59"><expr pos:start="1763:21" pos:end="1763:58"><call pos:start="1763:21" pos:end="1763:58"><name pos:start="1763:21" pos:end="1763:35">tcg_gen_mov_i64</name><argument_list pos:start="1763:36" pos:end="1763:58">(<argument pos:start="1763:37" pos:end="1763:49"><expr pos:start="1763:37" pos:end="1763:49"><name pos:start="1763:37" pos:end="1763:49"><name pos:start="1763:37" pos:end="1763:44">cpu_regs</name><index pos:start="1763:45" pos:end="1763:49">[<expr pos:start="1763:46" pos:end="1763:48"><name pos:start="1763:46" pos:end="1763:48">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1763:52" pos:end="1763:57"><expr pos:start="1763:52" pos:end="1763:57"><name pos:start="1763:52" pos:end="1763:57">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1765:21" pos:end="1768:0">break;</break>

<cpp:endif pos:start="1767:1" pos:end="1767:6">#<cpp:directive pos:start="1767:2" pos:end="1767:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></switch>

                <break pos:start="1771:17" pos:end="1771:22">break;</break>



            <case pos:start="1775:13" pos:end="1775:23">case <expr pos:start="1775:18" pos:end="1775:22"><literal type="number" pos:start="1775:18" pos:end="1775:22">0x3f5</literal></expr>:</case> <comment type="block" pos:start="1775:25" pos:end="1775:45">/* pdep Gy, By, Ey */</comment>

                <if_stmt pos:start="1777:17" pos:end="1785:17"><if pos:start="1777:17" pos:end="1785:17">if <condition pos:start="1777:20" pos:end="1781:37">(<expr pos:start="1777:21" pos:end="1781:36"><operator pos:start="1777:21" pos:end="1777:21">!</operator><operator pos:start="1777:22" pos:end="1777:22">(</operator><name pos:start="1777:23" pos:end="1777:47"><name pos:start="1777:23" pos:end="1777:23">s</name><operator pos:start="1777:24" pos:end="1777:25">-&gt;</operator><name pos:start="1777:26" pos:end="1777:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1777:49" pos:end="1777:49">&amp;</operator> <name pos:start="1777:51" pos:end="1777:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1777:69" pos:end="1777:69">)</operator>

                    <operator pos:start="1779:21" pos:end="1779:22">||</operator> <operator pos:start="1779:24" pos:end="1779:24">!</operator><operator pos:start="1779:25" pos:end="1779:25">(</operator><name pos:start="1779:26" pos:end="1779:34"><name pos:start="1779:26" pos:end="1779:26">s</name><operator pos:start="1779:27" pos:end="1779:28">-&gt;</operator><name pos:start="1779:29" pos:end="1779:34">prefix</name></name> <operator pos:start="1779:36" pos:end="1779:36">&amp;</operator> <name pos:start="1779:38" pos:end="1779:47">PREFIX_VEX</name><operator pos:start="1779:48" pos:end="1779:48">)</operator>

                    <operator pos:start="1781:21" pos:end="1781:22">||</operator> <name pos:start="1781:24" pos:end="1781:31"><name pos:start="1781:24" pos:end="1781:24">s</name><operator pos:start="1781:25" pos:end="1781:26">-&gt;</operator><name pos:start="1781:27" pos:end="1781:31">vex_l</name></name> <operator pos:start="1781:33" pos:end="1781:34">!=</operator> <literal type="number" pos:start="1781:36" pos:end="1781:36">0</literal></expr>)</condition> <block pos:start="1781:39" pos:end="1785:17">{<block_content pos:start="1783:21" pos:end="1783:36">

                    <goto pos:start="1783:21" pos:end="1783:36">goto <name pos:start="1783:26" pos:end="1783:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1787:17" pos:end="1787:40"><expr pos:start="1787:17" pos:end="1787:39"><name pos:start="1787:17" pos:end="1787:18">ot</name> <operator pos:start="1787:20" pos:end="1787:20">=</operator> <call pos:start="1787:22" pos:end="1787:39"><name pos:start="1787:22" pos:end="1787:29">mo_64_32</name><argument_list pos:start="1787:30" pos:end="1787:39">(<argument pos:start="1787:31" pos:end="1787:38"><expr pos:start="1787:31" pos:end="1787:38"><name pos:start="1787:31" pos:end="1787:38"><name pos:start="1787:31" pos:end="1787:31">s</name><operator pos:start="1787:32" pos:end="1787:33">-&gt;</operator><name pos:start="1787:34" pos:end="1787:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1789:17" pos:end="1789:62"><expr pos:start="1789:17" pos:end="1789:61"><call pos:start="1789:17" pos:end="1789:61"><name pos:start="1789:17" pos:end="1789:30">gen_ldst_modrm</name><argument_list pos:start="1789:31" pos:end="1789:61">(<argument pos:start="1789:32" pos:end="1789:34"><expr pos:start="1789:32" pos:end="1789:34"><name pos:start="1789:32" pos:end="1789:34">env</name></expr></argument>, <argument pos:start="1789:37" pos:end="1789:37"><expr pos:start="1789:37" pos:end="1789:37"><name pos:start="1789:37" pos:end="1789:37">s</name></expr></argument>, <argument pos:start="1789:40" pos:end="1789:44"><expr pos:start="1789:40" pos:end="1789:44"><name pos:start="1789:40" pos:end="1789:44">modrm</name></expr></argument>, <argument pos:start="1789:47" pos:end="1789:48"><expr pos:start="1789:47" pos:end="1789:48"><name pos:start="1789:47" pos:end="1789:48">ot</name></expr></argument>, <argument pos:start="1789:51" pos:end="1789:57"><expr pos:start="1789:51" pos:end="1789:57"><name pos:start="1789:51" pos:end="1789:57">OR_TMP0</name></expr></argument>, <argument pos:start="1789:60" pos:end="1789:60"><expr pos:start="1789:60" pos:end="1789:60"><literal type="number" pos:start="1789:60" pos:end="1789:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1791:17" pos:end="1793:70">/* Note that by zero-extending the mask operand, we

                   automatically handle zero-extending the result.  */</comment>

                <if_stmt pos:start="1795:17" pos:end="1803:17"><if pos:start="1795:17" pos:end="1799:17">if <condition pos:start="1795:20" pos:end="1795:32">(<expr pos:start="1795:21" pos:end="1795:31"><name pos:start="1795:21" pos:end="1795:22">ot</name> <operator pos:start="1795:24" pos:end="1795:25">==</operator> <name pos:start="1795:27" pos:end="1795:31">MO_64</name></expr>)</condition> <block pos:start="1795:34" pos:end="1799:17">{<block_content pos:start="1797:21" pos:end="1797:63">

                    <expr_stmt pos:start="1797:21" pos:end="1797:63"><expr pos:start="1797:21" pos:end="1797:62"><call pos:start="1797:21" pos:end="1797:62"><name pos:start="1797:21" pos:end="1797:34">tcg_gen_mov_tl</name><argument_list pos:start="1797:35" pos:end="1797:62">(<argument pos:start="1797:36" pos:end="1797:41"><expr pos:start="1797:36" pos:end="1797:41"><name pos:start="1797:36" pos:end="1797:41">cpu_T1</name></expr></argument>, <argument pos:start="1797:44" pos:end="1797:61"><expr pos:start="1797:44" pos:end="1797:61"><name pos:start="1797:44" pos:end="1797:61"><name pos:start="1797:44" pos:end="1797:51">cpu_regs</name><index pos:start="1797:52" pos:end="1797:61">[<expr pos:start="1797:53" pos:end="1797:60"><name pos:start="1797:53" pos:end="1797:60"><name pos:start="1797:53" pos:end="1797:53">s</name><operator pos:start="1797:54" pos:end="1797:55">-&gt;</operator><name pos:start="1797:56" pos:end="1797:60">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1799:19" pos:end="1803:17">else <block pos:start="1799:24" pos:end="1803:17">{<block_content pos:start="1801:21" pos:end="1801:66">

                    <expr_stmt pos:start="1801:21" pos:end="1801:66"><expr pos:start="1801:21" pos:end="1801:65"><call pos:start="1801:21" pos:end="1801:65"><name pos:start="1801:21" pos:end="1801:37">tcg_gen_ext32u_tl</name><argument_list pos:start="1801:38" pos:end="1801:65">(<argument pos:start="1801:39" pos:end="1801:44"><expr pos:start="1801:39" pos:end="1801:44"><name pos:start="1801:39" pos:end="1801:44">cpu_T1</name></expr></argument>, <argument pos:start="1801:47" pos:end="1801:64"><expr pos:start="1801:47" pos:end="1801:64"><name pos:start="1801:47" pos:end="1801:64"><name pos:start="1801:47" pos:end="1801:54">cpu_regs</name><index pos:start="1801:55" pos:end="1801:64">[<expr pos:start="1801:56" pos:end="1801:63"><name pos:start="1801:56" pos:end="1801:63"><name pos:start="1801:56" pos:end="1801:56">s</name><operator pos:start="1801:57" pos:end="1801:58">-&gt;</operator><name pos:start="1801:59" pos:end="1801:63">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1805:17" pos:end="1805:63"><expr pos:start="1805:17" pos:end="1805:62"><call pos:start="1805:17" pos:end="1805:62"><name pos:start="1805:17" pos:end="1805:31">gen_helper_pdep</name><argument_list pos:start="1805:32" pos:end="1805:62">(<argument pos:start="1805:33" pos:end="1805:45"><expr pos:start="1805:33" pos:end="1805:45"><name pos:start="1805:33" pos:end="1805:45"><name pos:start="1805:33" pos:end="1805:40">cpu_regs</name><index pos:start="1805:41" pos:end="1805:45">[<expr pos:start="1805:42" pos:end="1805:44"><name pos:start="1805:42" pos:end="1805:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1805:48" pos:end="1805:53"><expr pos:start="1805:48" pos:end="1805:53"><name pos:start="1805:48" pos:end="1805:53">cpu_T0</name></expr></argument>, <argument pos:start="1805:56" pos:end="1805:61"><expr pos:start="1805:56" pos:end="1805:61"><name pos:start="1805:56" pos:end="1805:61">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1807:17" pos:end="1807:22">break;</break>



            <case pos:start="1811:13" pos:end="1811:23">case <expr pos:start="1811:18" pos:end="1811:22"><literal type="number" pos:start="1811:18" pos:end="1811:22">0x2f5</literal></expr>:</case> <comment type="block" pos:start="1811:25" pos:end="1811:45">/* pext Gy, By, Ey */</comment>

                <if_stmt pos:start="1813:17" pos:end="1821:17"><if pos:start="1813:17" pos:end="1821:17">if <condition pos:start="1813:20" pos:end="1817:37">(<expr pos:start="1813:21" pos:end="1817:36"><operator pos:start="1813:21" pos:end="1813:21">!</operator><operator pos:start="1813:22" pos:end="1813:22">(</operator><name pos:start="1813:23" pos:end="1813:47"><name pos:start="1813:23" pos:end="1813:23">s</name><operator pos:start="1813:24" pos:end="1813:25">-&gt;</operator><name pos:start="1813:26" pos:end="1813:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1813:49" pos:end="1813:49">&amp;</operator> <name pos:start="1813:51" pos:end="1813:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1813:69" pos:end="1813:69">)</operator>

                    <operator pos:start="1815:21" pos:end="1815:22">||</operator> <operator pos:start="1815:24" pos:end="1815:24">!</operator><operator pos:start="1815:25" pos:end="1815:25">(</operator><name pos:start="1815:26" pos:end="1815:34"><name pos:start="1815:26" pos:end="1815:26">s</name><operator pos:start="1815:27" pos:end="1815:28">-&gt;</operator><name pos:start="1815:29" pos:end="1815:34">prefix</name></name> <operator pos:start="1815:36" pos:end="1815:36">&amp;</operator> <name pos:start="1815:38" pos:end="1815:47">PREFIX_VEX</name><operator pos:start="1815:48" pos:end="1815:48">)</operator>

                    <operator pos:start="1817:21" pos:end="1817:22">||</operator> <name pos:start="1817:24" pos:end="1817:31"><name pos:start="1817:24" pos:end="1817:24">s</name><operator pos:start="1817:25" pos:end="1817:26">-&gt;</operator><name pos:start="1817:27" pos:end="1817:31">vex_l</name></name> <operator pos:start="1817:33" pos:end="1817:34">!=</operator> <literal type="number" pos:start="1817:36" pos:end="1817:36">0</literal></expr>)</condition> <block pos:start="1817:39" pos:end="1821:17">{<block_content pos:start="1819:21" pos:end="1819:36">

                    <goto pos:start="1819:21" pos:end="1819:36">goto <name pos:start="1819:26" pos:end="1819:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1823:17" pos:end="1823:40"><expr pos:start="1823:17" pos:end="1823:39"><name pos:start="1823:17" pos:end="1823:18">ot</name> <operator pos:start="1823:20" pos:end="1823:20">=</operator> <call pos:start="1823:22" pos:end="1823:39"><name pos:start="1823:22" pos:end="1823:29">mo_64_32</name><argument_list pos:start="1823:30" pos:end="1823:39">(<argument pos:start="1823:31" pos:end="1823:38"><expr pos:start="1823:31" pos:end="1823:38"><name pos:start="1823:31" pos:end="1823:38"><name pos:start="1823:31" pos:end="1823:31">s</name><operator pos:start="1823:32" pos:end="1823:33">-&gt;</operator><name pos:start="1823:34" pos:end="1823:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1825:17" pos:end="1825:62"><expr pos:start="1825:17" pos:end="1825:61"><call pos:start="1825:17" pos:end="1825:61"><name pos:start="1825:17" pos:end="1825:30">gen_ldst_modrm</name><argument_list pos:start="1825:31" pos:end="1825:61">(<argument pos:start="1825:32" pos:end="1825:34"><expr pos:start="1825:32" pos:end="1825:34"><name pos:start="1825:32" pos:end="1825:34">env</name></expr></argument>, <argument pos:start="1825:37" pos:end="1825:37"><expr pos:start="1825:37" pos:end="1825:37"><name pos:start="1825:37" pos:end="1825:37">s</name></expr></argument>, <argument pos:start="1825:40" pos:end="1825:44"><expr pos:start="1825:40" pos:end="1825:44"><name pos:start="1825:40" pos:end="1825:44">modrm</name></expr></argument>, <argument pos:start="1825:47" pos:end="1825:48"><expr pos:start="1825:47" pos:end="1825:48"><name pos:start="1825:47" pos:end="1825:48">ot</name></expr></argument>, <argument pos:start="1825:51" pos:end="1825:57"><expr pos:start="1825:51" pos:end="1825:57"><name pos:start="1825:51" pos:end="1825:57">OR_TMP0</name></expr></argument>, <argument pos:start="1825:60" pos:end="1825:60"><expr pos:start="1825:60" pos:end="1825:60"><literal type="number" pos:start="1825:60" pos:end="1825:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1827:17" pos:end="1829:70">/* Note that by zero-extending the mask operand, we

                   automatically handle zero-extending the result.  */</comment>

                <if_stmt pos:start="1831:17" pos:end="1839:17"><if pos:start="1831:17" pos:end="1835:17">if <condition pos:start="1831:20" pos:end="1831:32">(<expr pos:start="1831:21" pos:end="1831:31"><name pos:start="1831:21" pos:end="1831:22">ot</name> <operator pos:start="1831:24" pos:end="1831:25">==</operator> <name pos:start="1831:27" pos:end="1831:31">MO_64</name></expr>)</condition> <block pos:start="1831:34" pos:end="1835:17">{<block_content pos:start="1833:21" pos:end="1833:63">

                    <expr_stmt pos:start="1833:21" pos:end="1833:63"><expr pos:start="1833:21" pos:end="1833:62"><call pos:start="1833:21" pos:end="1833:62"><name pos:start="1833:21" pos:end="1833:34">tcg_gen_mov_tl</name><argument_list pos:start="1833:35" pos:end="1833:62">(<argument pos:start="1833:36" pos:end="1833:41"><expr pos:start="1833:36" pos:end="1833:41"><name pos:start="1833:36" pos:end="1833:41">cpu_T1</name></expr></argument>, <argument pos:start="1833:44" pos:end="1833:61"><expr pos:start="1833:44" pos:end="1833:61"><name pos:start="1833:44" pos:end="1833:61"><name pos:start="1833:44" pos:end="1833:51">cpu_regs</name><index pos:start="1833:52" pos:end="1833:61">[<expr pos:start="1833:53" pos:end="1833:60"><name pos:start="1833:53" pos:end="1833:60"><name pos:start="1833:53" pos:end="1833:53">s</name><operator pos:start="1833:54" pos:end="1833:55">-&gt;</operator><name pos:start="1833:56" pos:end="1833:60">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1835:19" pos:end="1839:17">else <block pos:start="1835:24" pos:end="1839:17">{<block_content pos:start="1837:21" pos:end="1837:66">

                    <expr_stmt pos:start="1837:21" pos:end="1837:66"><expr pos:start="1837:21" pos:end="1837:65"><call pos:start="1837:21" pos:end="1837:65"><name pos:start="1837:21" pos:end="1837:37">tcg_gen_ext32u_tl</name><argument_list pos:start="1837:38" pos:end="1837:65">(<argument pos:start="1837:39" pos:end="1837:44"><expr pos:start="1837:39" pos:end="1837:44"><name pos:start="1837:39" pos:end="1837:44">cpu_T1</name></expr></argument>, <argument pos:start="1837:47" pos:end="1837:64"><expr pos:start="1837:47" pos:end="1837:64"><name pos:start="1837:47" pos:end="1837:64"><name pos:start="1837:47" pos:end="1837:54">cpu_regs</name><index pos:start="1837:55" pos:end="1837:64">[<expr pos:start="1837:56" pos:end="1837:63"><name pos:start="1837:56" pos:end="1837:63"><name pos:start="1837:56" pos:end="1837:56">s</name><operator pos:start="1837:57" pos:end="1837:58">-&gt;</operator><name pos:start="1837:59" pos:end="1837:63">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1841:17" pos:end="1841:63"><expr pos:start="1841:17" pos:end="1841:62"><call pos:start="1841:17" pos:end="1841:62"><name pos:start="1841:17" pos:end="1841:31">gen_helper_pext</name><argument_list pos:start="1841:32" pos:end="1841:62">(<argument pos:start="1841:33" pos:end="1841:45"><expr pos:start="1841:33" pos:end="1841:45"><name pos:start="1841:33" pos:end="1841:45"><name pos:start="1841:33" pos:end="1841:40">cpu_regs</name><index pos:start="1841:41" pos:end="1841:45">[<expr pos:start="1841:42" pos:end="1841:44"><name pos:start="1841:42" pos:end="1841:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1841:48" pos:end="1841:53"><expr pos:start="1841:48" pos:end="1841:53"><name pos:start="1841:48" pos:end="1841:53">cpu_T0</name></expr></argument>, <argument pos:start="1841:56" pos:end="1841:61"><expr pos:start="1841:56" pos:end="1841:61"><name pos:start="1841:56" pos:end="1841:61">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1843:17" pos:end="1843:22">break;</break>



            <case pos:start="1847:13" pos:end="1847:23">case <expr pos:start="1847:18" pos:end="1847:22"><literal type="number" pos:start="1847:18" pos:end="1847:22">0x1f6</literal></expr>:</case> <comment type="block" pos:start="1847:25" pos:end="1847:41">/* adcx Gy, Ey */</comment>

            <case pos:start="1849:13" pos:end="1849:23">case <expr pos:start="1849:18" pos:end="1849:22"><literal type="number" pos:start="1849:18" pos:end="1849:22">0x2f6</literal></expr>:</case> <comment type="block" pos:start="1849:25" pos:end="1849:41">/* adox Gy, Ey */</comment>

                <if_stmt pos:start="1851:17" pos:end="1997:17"><if pos:start="1851:17" pos:end="1855:17">if <condition pos:start="1851:20" pos:end="1851:69">(<expr pos:start="1851:21" pos:end="1851:68"><operator pos:start="1851:21" pos:end="1851:21">!</operator><operator pos:start="1851:22" pos:end="1851:22">(</operator><name pos:start="1851:23" pos:end="1851:47"><name pos:start="1851:23" pos:end="1851:23">s</name><operator pos:start="1851:24" pos:end="1851:25">-&gt;</operator><name pos:start="1851:26" pos:end="1851:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1851:49" pos:end="1851:49">&amp;</operator> <name pos:start="1851:51" pos:end="1851:67">CPUID_7_0_EBX_ADX</name><operator pos:start="1851:68" pos:end="1851:68">)</operator></expr>)</condition> <block pos:start="1851:71" pos:end="1855:17">{<block_content pos:start="1853:21" pos:end="1853:36">

                    <goto pos:start="1853:21" pos:end="1853:36">goto <name pos:start="1853:26" pos:end="1853:35">illegal_op</name>;</goto>

                </block_content>}</block></if> <else pos:start="1855:19" pos:end="1997:17">else <block pos:start="1855:24" pos:end="1997:17">{<block_content pos:start="1857:21" pos:end="1995:41">

                    <decl_stmt pos:start="1857:21" pos:end="1857:51"><decl pos:start="1857:21" pos:end="1857:33"><type pos:start="1857:21" pos:end="1857:24"><name pos:start="1857:21" pos:end="1857:24">TCGv</name></type> <name pos:start="1857:26" pos:end="1857:33">carry_in</name></decl>, <decl pos:start="1857:36" pos:end="1857:44"><type ref="prev" pos:start="1857:21" pos:end="1857:24"/><name pos:start="1857:36" pos:end="1857:44">carry_out</name></decl>, <decl pos:start="1857:47" pos:end="1857:50"><type ref="prev" pos:start="1857:21" pos:end="1857:24"/><name pos:start="1857:47" pos:end="1857:50">zero</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="1859:21" pos:end="1859:31"><decl pos:start="1859:21" pos:end="1859:30"><type pos:start="1859:21" pos:end="1859:23"><name pos:start="1859:21" pos:end="1859:23">int</name></type> <name pos:start="1859:25" pos:end="1859:30">end_op</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="1863:21" pos:end="1863:44"><expr pos:start="1863:21" pos:end="1863:43"><name pos:start="1863:21" pos:end="1863:22">ot</name> <operator pos:start="1863:24" pos:end="1863:24">=</operator> <call pos:start="1863:26" pos:end="1863:43"><name pos:start="1863:26" pos:end="1863:33">mo_64_32</name><argument_list pos:start="1863:34" pos:end="1863:43">(<argument pos:start="1863:35" pos:end="1863:42"><expr pos:start="1863:35" pos:end="1863:42"><name pos:start="1863:35" pos:end="1863:42"><name pos:start="1863:35" pos:end="1863:35">s</name><operator pos:start="1863:36" pos:end="1863:37">-&gt;</operator><name pos:start="1863:38" pos:end="1863:42">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1865:21" pos:end="1865:66"><expr pos:start="1865:21" pos:end="1865:65"><call pos:start="1865:21" pos:end="1865:65"><name pos:start="1865:21" pos:end="1865:34">gen_ldst_modrm</name><argument_list pos:start="1865:35" pos:end="1865:65">(<argument pos:start="1865:36" pos:end="1865:38"><expr pos:start="1865:36" pos:end="1865:38"><name pos:start="1865:36" pos:end="1865:38">env</name></expr></argument>, <argument pos:start="1865:41" pos:end="1865:41"><expr pos:start="1865:41" pos:end="1865:41"><name pos:start="1865:41" pos:end="1865:41">s</name></expr></argument>, <argument pos:start="1865:44" pos:end="1865:48"><expr pos:start="1865:44" pos:end="1865:48"><name pos:start="1865:44" pos:end="1865:48">modrm</name></expr></argument>, <argument pos:start="1865:51" pos:end="1865:52"><expr pos:start="1865:51" pos:end="1865:52"><name pos:start="1865:51" pos:end="1865:52">ot</name></expr></argument>, <argument pos:start="1865:55" pos:end="1865:61"><expr pos:start="1865:55" pos:end="1865:61"><name pos:start="1865:55" pos:end="1865:61">OR_TMP0</name></expr></argument>, <argument pos:start="1865:64" pos:end="1865:64"><expr pos:start="1865:64" pos:end="1865:64"><literal type="number" pos:start="1865:64" pos:end="1865:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <comment type="block" pos:start="1869:21" pos:end="1869:70">/* Re-use the carry-out from a previous round.  */</comment>

                    <expr_stmt pos:start="1871:21" pos:end="1871:42"><expr pos:start="1871:21" pos:end="1871:41"><call pos:start="1871:21" pos:end="1871:41"><name pos:start="1871:21" pos:end="1871:31">TCGV_UNUSED</name><argument_list pos:start="1871:32" pos:end="1871:41">(<argument pos:start="1871:33" pos:end="1871:40"><expr pos:start="1871:33" pos:end="1871:40"><name pos:start="1871:33" pos:end="1871:40">carry_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1873:21" pos:end="1873:72"><expr pos:start="1873:21" pos:end="1873:71"><name pos:start="1873:21" pos:end="1873:29">carry_out</name> <operator pos:start="1873:31" pos:end="1873:31">=</operator> <operator pos:start="1873:33" pos:end="1873:33">(</operator><ternary pos:start="1873:34" pos:end="1873:70"><condition pos:start="1873:34" pos:end="1873:45"><expr pos:start="1873:34" pos:end="1873:43"><name pos:start="1873:34" pos:end="1873:34">b</name> <operator pos:start="1873:36" pos:end="1873:37">==</operator> <literal type="number" pos:start="1873:39" pos:end="1873:43">0x1f6</literal></expr> ?</condition><then pos:start="1873:47" pos:end="1873:56"> <expr pos:start="1873:47" pos:end="1873:56"><name pos:start="1873:47" pos:end="1873:56">cpu_cc_dst</name></expr> </then><else pos:start="1873:58" pos:end="1873:70">: <expr pos:start="1873:60" pos:end="1873:70"><name pos:start="1873:60" pos:end="1873:70">cpu_cc_src2</name></expr></else></ternary><operator pos:start="1873:71" pos:end="1873:71">)</operator></expr>;</expr_stmt>

                    <switch pos:start="1875:21" pos:end="1923:21">switch <condition pos:start="1875:28" pos:end="1875:37">(<expr pos:start="1875:29" pos:end="1875:36"><name pos:start="1875:29" pos:end="1875:36"><name pos:start="1875:29" pos:end="1875:29">s</name><operator pos:start="1875:30" pos:end="1875:31">-&gt;</operator><name pos:start="1875:32" pos:end="1875:36">cc_op</name></name></expr>)</condition> <block pos:start="1875:39" pos:end="1923:21">{<block_content pos:start="1877:21" pos:end="1921:30">

                    <case pos:start="1877:21" pos:end="1877:36">case <expr pos:start="1877:26" pos:end="1877:35"><name pos:start="1877:26" pos:end="1877:35">CC_OP_ADCX</name></expr>:</case>

                        <if_stmt pos:start="1879:25" pos:end="1889:25"><if pos:start="1879:25" pos:end="1885:25">if <condition pos:start="1879:28" pos:end="1879:39">(<expr pos:start="1879:29" pos:end="1879:38"><name pos:start="1879:29" pos:end="1879:29">b</name> <operator pos:start="1879:31" pos:end="1879:32">==</operator> <literal type="number" pos:start="1879:34" pos:end="1879:38">0x1f6</literal></expr>)</condition> <block pos:start="1879:41" pos:end="1885:25">{<block_content pos:start="1881:29" pos:end="1883:48">

                            <expr_stmt pos:start="1881:29" pos:end="1881:50"><expr pos:start="1881:29" pos:end="1881:49"><name pos:start="1881:29" pos:end="1881:36">carry_in</name> <operator pos:start="1881:38" pos:end="1881:38">=</operator> <name pos:start="1881:40" pos:end="1881:49">cpu_cc_dst</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="1883:29" pos:end="1883:48"><expr pos:start="1883:29" pos:end="1883:47"><name pos:start="1883:29" pos:end="1883:34">end_op</name> <operator pos:start="1883:36" pos:end="1883:36">=</operator> <name pos:start="1883:38" pos:end="1883:47">CC_OP_ADCX</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1885:27" pos:end="1889:25">else <block pos:start="1885:32" pos:end="1889:25">{<block_content pos:start="1887:29" pos:end="1887:49">

                            <expr_stmt pos:start="1887:29" pos:end="1887:49"><expr pos:start="1887:29" pos:end="1887:48"><name pos:start="1887:29" pos:end="1887:34">end_op</name> <operator pos:start="1887:36" pos:end="1887:36">=</operator> <name pos:start="1887:38" pos:end="1887:48">CC_OP_ADCOX</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="1891:25" pos:end="1891:30">break;</break>

                    <case pos:start="1893:21" pos:end="1893:36">case <expr pos:start="1893:26" pos:end="1893:35"><name pos:start="1893:26" pos:end="1893:35">CC_OP_ADOX</name></expr>:</case>

                        <if_stmt pos:start="1895:25" pos:end="1905:25"><if pos:start="1895:25" pos:end="1899:25">if <condition pos:start="1895:28" pos:end="1895:39">(<expr pos:start="1895:29" pos:end="1895:38"><name pos:start="1895:29" pos:end="1895:29">b</name> <operator pos:start="1895:31" pos:end="1895:32">==</operator> <literal type="number" pos:start="1895:34" pos:end="1895:38">0x1f6</literal></expr>)</condition> <block pos:start="1895:41" pos:end="1899:25">{<block_content pos:start="1897:29" pos:end="1897:49">

                            <expr_stmt pos:start="1897:29" pos:end="1897:49"><expr pos:start="1897:29" pos:end="1897:48"><name pos:start="1897:29" pos:end="1897:34">end_op</name> <operator pos:start="1897:36" pos:end="1897:36">=</operator> <name pos:start="1897:38" pos:end="1897:48">CC_OP_ADCOX</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1899:27" pos:end="1905:25">else <block pos:start="1899:32" pos:end="1905:25">{<block_content pos:start="1901:29" pos:end="1903:48">

                            <expr_stmt pos:start="1901:29" pos:end="1901:51"><expr pos:start="1901:29" pos:end="1901:50"><name pos:start="1901:29" pos:end="1901:36">carry_in</name> <operator pos:start="1901:38" pos:end="1901:38">=</operator> <name pos:start="1901:40" pos:end="1901:50">cpu_cc_src2</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="1903:29" pos:end="1903:48"><expr pos:start="1903:29" pos:end="1903:47"><name pos:start="1903:29" pos:end="1903:34">end_op</name> <operator pos:start="1903:36" pos:end="1903:36">=</operator> <name pos:start="1903:38" pos:end="1903:47">CC_OP_ADOX</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="1907:25" pos:end="1907:30">break;</break>

                    <case pos:start="1909:21" pos:end="1909:37">case <expr pos:start="1909:26" pos:end="1909:36"><name pos:start="1909:26" pos:end="1909:36">CC_OP_ADCOX</name></expr>:</case>

                        <expr_stmt pos:start="1911:25" pos:end="1911:45"><expr pos:start="1911:25" pos:end="1911:44"><name pos:start="1911:25" pos:end="1911:30">end_op</name> <operator pos:start="1911:32" pos:end="1911:32">=</operator> <name pos:start="1911:34" pos:end="1911:44">CC_OP_ADCOX</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1913:25" pos:end="1913:45"><expr pos:start="1913:25" pos:end="1913:44"><name pos:start="1913:25" pos:end="1913:32">carry_in</name> <operator pos:start="1913:34" pos:end="1913:34">=</operator> <name pos:start="1913:36" pos:end="1913:44">carry_out</name></expr>;</expr_stmt>

                        <break pos:start="1915:25" pos:end="1915:30">break;</break>

                    <default pos:start="1917:21" pos:end="1917:28">default:</default>

                        <expr_stmt pos:start="1919:25" pos:end="1919:72"><expr pos:start="1919:25" pos:end="1919:71"><name pos:start="1919:25" pos:end="1919:30">end_op</name> <operator pos:start="1919:32" pos:end="1919:32">=</operator> <operator pos:start="1919:34" pos:end="1919:34">(</operator><ternary pos:start="1919:35" pos:end="1919:70"><condition pos:start="1919:35" pos:end="1919:46"><expr pos:start="1919:35" pos:end="1919:44"><name pos:start="1919:35" pos:end="1919:35">b</name> <operator pos:start="1919:37" pos:end="1919:38">==</operator> <literal type="number" pos:start="1919:40" pos:end="1919:44">0x1f6</literal></expr> ?</condition><then pos:start="1919:48" pos:end="1919:57"> <expr pos:start="1919:48" pos:end="1919:57"><name pos:start="1919:48" pos:end="1919:57">CC_OP_ADCX</name></expr> </then><else pos:start="1919:59" pos:end="1919:70">: <expr pos:start="1919:61" pos:end="1919:70"><name pos:start="1919:61" pos:end="1919:70">CC_OP_ADOX</name></expr></else></ternary><operator pos:start="1919:71" pos:end="1919:71">)</operator></expr>;</expr_stmt>

                        <break pos:start="1921:25" pos:end="1921:30">break;</break>

                    </block_content>}</block></switch>

                    <comment type="block" pos:start="1925:21" pos:end="1925:77">/* If we can't reuse carry-out, get it out of EFLAGS.  */</comment>

                    <if_stmt pos:start="1927:21" pos:end="1941:21"><if pos:start="1927:21" pos:end="1941:21">if <condition pos:start="1927:24" pos:end="1927:49">(<expr pos:start="1927:25" pos:end="1927:48"><call pos:start="1927:25" pos:end="1927:48"><name pos:start="1927:25" pos:end="1927:38">TCGV_IS_UNUSED</name><argument_list pos:start="1927:39" pos:end="1927:48">(<argument pos:start="1927:40" pos:end="1927:47"><expr pos:start="1927:40" pos:end="1927:47"><name pos:start="1927:40" pos:end="1927:47">carry_in</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1927:51" pos:end="1941:21">{<block_content pos:start="1929:25" pos:end="1939:79">

                        <if_stmt pos:start="1929:25" pos:end="1933:25"><if pos:start="1929:25" pos:end="1933:25">if <condition pos:start="1929:28" pos:end="1929:77">(<expr pos:start="1929:29" pos:end="1929:76"><name pos:start="1929:29" pos:end="1929:36"><name pos:start="1929:29" pos:end="1929:29">s</name><operator pos:start="1929:30" pos:end="1929:31">-&gt;</operator><name pos:start="1929:32" pos:end="1929:36">cc_op</name></name> <operator pos:start="1929:38" pos:end="1929:39">!=</operator> <name pos:start="1929:41" pos:end="1929:50">CC_OP_ADCX</name> <operator pos:start="1929:52" pos:end="1929:53">&amp;&amp;</operator> <name pos:start="1929:55" pos:end="1929:62"><name pos:start="1929:55" pos:end="1929:55">s</name><operator pos:start="1929:56" pos:end="1929:57">-&gt;</operator><name pos:start="1929:58" pos:end="1929:62">cc_op</name></name> <operator pos:start="1929:64" pos:end="1929:65">!=</operator> <name pos:start="1929:67" pos:end="1929:76">CC_OP_ADOX</name></expr>)</condition> <block pos:start="1929:79" pos:end="1933:25">{<block_content pos:start="1931:29" pos:end="1931:50">

                            <expr_stmt pos:start="1931:29" pos:end="1931:50"><expr pos:start="1931:29" pos:end="1931:49"><call pos:start="1931:29" pos:end="1931:49"><name pos:start="1931:29" pos:end="1931:46">gen_compute_eflags</name><argument_list pos:start="1931:47" pos:end="1931:49">(<argument pos:start="1931:48" pos:end="1931:48"><expr pos:start="1931:48" pos:end="1931:48"><name pos:start="1931:48" pos:end="1931:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1935:25" pos:end="1935:44"><expr pos:start="1935:25" pos:end="1935:43"><name pos:start="1935:25" pos:end="1935:32">carry_in</name> <operator pos:start="1935:34" pos:end="1935:34">=</operator> <name pos:start="1935:36" pos:end="1935:43">cpu_tmp0</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1937:25" pos:end="1939:79"><expr pos:start="1937:25" pos:end="1939:78"><call pos:start="1937:25" pos:end="1939:78"><name pos:start="1937:25" pos:end="1937:42">tcg_gen_extract_tl</name><argument_list pos:start="1937:43" pos:end="1939:78">(<argument pos:start="1937:44" pos:end="1937:51"><expr pos:start="1937:44" pos:end="1937:51"><name pos:start="1937:44" pos:end="1937:51">carry_in</name></expr></argument>, <argument pos:start="1937:54" pos:end="1937:63"><expr pos:start="1937:54" pos:end="1937:63"><name pos:start="1937:54" pos:end="1937:63">cpu_cc_src</name></expr></argument>,

                                           <argument pos:start="1939:44" pos:end="1939:74"><expr pos:start="1939:44" pos:end="1939:74"><call pos:start="1939:44" pos:end="1939:74"><name pos:start="1939:44" pos:end="1939:48">ctz32</name><argument_list pos:start="1939:49" pos:end="1939:74">(<argument pos:start="1939:50" pos:end="1939:73"><expr pos:start="1939:50" pos:end="1939:73"><ternary pos:start="1939:50" pos:end="1939:73"><condition pos:start="1939:50" pos:end="1939:61"><expr pos:start="1939:50" pos:end="1939:59"><name pos:start="1939:50" pos:end="1939:50">b</name> <operator pos:start="1939:52" pos:end="1939:53">==</operator> <literal type="number" pos:start="1939:55" pos:end="1939:59">0x1f6</literal></expr> ?</condition><then pos:start="1939:63" pos:end="1939:66"> <expr pos:start="1939:63" pos:end="1939:66"><name pos:start="1939:63" pos:end="1939:66">CC_C</name></expr> </then><else pos:start="1939:68" pos:end="1939:73">: <expr pos:start="1939:70" pos:end="1939:73"><name pos:start="1939:70" pos:end="1939:73">CC_O</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1939:77" pos:end="1939:77"><expr pos:start="1939:77" pos:end="1939:77"><literal type="number" pos:start="1939:77" pos:end="1939:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <switch pos:start="1945:21" pos:end="1993:21">switch <condition pos:start="1945:28" pos:end="1945:31">(<expr pos:start="1945:29" pos:end="1945:30"><name pos:start="1945:29" pos:end="1945:30">ot</name></expr>)</condition> <block pos:start="1945:33" pos:end="1993:21">{<block_content pos:start="1949:21" pos:end="1991:30">

<cpp:ifdef pos:start="1947:1" pos:end="1947:20">#<cpp:directive pos:start="1947:2" pos:end="1947:6">ifdef</cpp:directive> <name pos:start="1947:8" pos:end="1947:20">TARGET_X86_64</name></cpp:ifdef>

                    <case pos:start="1949:21" pos:end="1949:31">case <expr pos:start="1949:26" pos:end="1949:30"><name pos:start="1949:26" pos:end="1949:30">MO_32</name></expr>:</case>

                        <comment type="block" pos:start="1951:25" pos:end="1953:79">/* If we know TL is 64-bit, and we want a 32-bit

                           result, just do everything in 64-bit arithmetic.  */</comment>

                        <expr_stmt pos:start="1955:25" pos:end="1955:73"><expr pos:start="1955:25" pos:end="1955:72"><call pos:start="1955:25" pos:end="1955:72"><name pos:start="1955:25" pos:end="1955:42">tcg_gen_ext32u_i64</name><argument_list pos:start="1955:43" pos:end="1955:72">(<argument pos:start="1955:44" pos:end="1955:56"><expr pos:start="1955:44" pos:end="1955:56"><name pos:start="1955:44" pos:end="1955:56"><name pos:start="1955:44" pos:end="1955:51">cpu_regs</name><index pos:start="1955:52" pos:end="1955:56">[<expr pos:start="1955:53" pos:end="1955:55"><name pos:start="1955:53" pos:end="1955:55">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1955:59" pos:end="1955:71"><expr pos:start="1955:59" pos:end="1955:71"><name pos:start="1955:59" pos:end="1955:71"><name pos:start="1955:59" pos:end="1955:66">cpu_regs</name><index pos:start="1955:67" pos:end="1955:71">[<expr pos:start="1955:68" pos:end="1955:70"><name pos:start="1955:68" pos:end="1955:70">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1957:25" pos:end="1957:59"><expr pos:start="1957:25" pos:end="1957:58"><call pos:start="1957:25" pos:end="1957:58"><name pos:start="1957:25" pos:end="1957:42">tcg_gen_ext32u_i64</name><argument_list pos:start="1957:43" pos:end="1957:58">(<argument pos:start="1957:44" pos:end="1957:49"><expr pos:start="1957:44" pos:end="1957:49"><name pos:start="1957:44" pos:end="1957:49">cpu_T0</name></expr></argument>, <argument pos:start="1957:52" pos:end="1957:57"><expr pos:start="1957:52" pos:end="1957:57"><name pos:start="1957:52" pos:end="1957:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1959:25" pos:end="1959:71"><expr pos:start="1959:25" pos:end="1959:70"><call pos:start="1959:25" pos:end="1959:70"><name pos:start="1959:25" pos:end="1959:39">tcg_gen_add_i64</name><argument_list pos:start="1959:40" pos:end="1959:70">(<argument pos:start="1959:41" pos:end="1959:46"><expr pos:start="1959:41" pos:end="1959:46"><name pos:start="1959:41" pos:end="1959:46">cpu_T0</name></expr></argument>, <argument pos:start="1959:49" pos:end="1959:54"><expr pos:start="1959:49" pos:end="1959:54"><name pos:start="1959:49" pos:end="1959:54">cpu_T0</name></expr></argument>, <argument pos:start="1959:57" pos:end="1959:69"><expr pos:start="1959:57" pos:end="1959:69"><name pos:start="1959:57" pos:end="1959:69"><name pos:start="1959:57" pos:end="1959:64">cpu_regs</name><index pos:start="1959:65" pos:end="1959:69">[<expr pos:start="1959:66" pos:end="1959:68"><name pos:start="1959:66" pos:end="1959:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1961:25" pos:end="1961:66"><expr pos:start="1961:25" pos:end="1961:65"><call pos:start="1961:25" pos:end="1961:65"><name pos:start="1961:25" pos:end="1961:39">tcg_gen_add_i64</name><argument_list pos:start="1961:40" pos:end="1961:65">(<argument pos:start="1961:41" pos:end="1961:46"><expr pos:start="1961:41" pos:end="1961:46"><name pos:start="1961:41" pos:end="1961:46">cpu_T0</name></expr></argument>, <argument pos:start="1961:49" pos:end="1961:54"><expr pos:start="1961:49" pos:end="1961:54"><name pos:start="1961:49" pos:end="1961:54">cpu_T0</name></expr></argument>, <argument pos:start="1961:57" pos:end="1961:64"><expr pos:start="1961:57" pos:end="1961:64"><name pos:start="1961:57" pos:end="1961:64">carry_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1963:25" pos:end="1963:66"><expr pos:start="1963:25" pos:end="1963:65"><call pos:start="1963:25" pos:end="1963:65"><name pos:start="1963:25" pos:end="1963:42">tcg_gen_ext32u_i64</name><argument_list pos:start="1963:43" pos:end="1963:65">(<argument pos:start="1963:44" pos:end="1963:56"><expr pos:start="1963:44" pos:end="1963:56"><name pos:start="1963:44" pos:end="1963:56"><name pos:start="1963:44" pos:end="1963:51">cpu_regs</name><index pos:start="1963:52" pos:end="1963:56">[<expr pos:start="1963:53" pos:end="1963:55"><name pos:start="1963:53" pos:end="1963:55">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1963:59" pos:end="1963:64"><expr pos:start="1963:59" pos:end="1963:64"><name pos:start="1963:59" pos:end="1963:64">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1965:25" pos:end="1965:64"><expr pos:start="1965:25" pos:end="1965:63"><call pos:start="1965:25" pos:end="1965:63"><name pos:start="1965:25" pos:end="1965:40">tcg_gen_shri_i64</name><argument_list pos:start="1965:41" pos:end="1965:63">(<argument pos:start="1965:42" pos:end="1965:50"><expr pos:start="1965:42" pos:end="1965:50"><name pos:start="1965:42" pos:end="1965:50">carry_out</name></expr></argument>, <argument pos:start="1965:53" pos:end="1965:58"><expr pos:start="1965:53" pos:end="1965:58"><name pos:start="1965:53" pos:end="1965:58">cpu_T0</name></expr></argument>, <argument pos:start="1965:61" pos:end="1965:62"><expr pos:start="1965:61" pos:end="1965:62"><literal type="number" pos:start="1965:61" pos:end="1965:62">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1967:25" pos:end="1970:0">break;</break>

<cpp:endif pos:start="1969:1" pos:end="1969:6">#<cpp:directive pos:start="1969:2" pos:end="1969:6">endif</cpp:directive></cpp:endif>

                    <default pos:start="1971:21" pos:end="1971:28">default:</default>

                        <comment type="block" pos:start="1973:25" pos:end="1973:76">/* Otherwise compute the carry-out in two steps.  */</comment>

                        <expr_stmt pos:start="1975:25" pos:end="1975:47"><expr pos:start="1975:25" pos:end="1975:46"><name pos:start="1975:25" pos:end="1975:28">zero</name> <operator pos:start="1975:30" pos:end="1975:30">=</operator> <call pos:start="1975:32" pos:end="1975:46"><name pos:start="1975:32" pos:end="1975:43">tcg_const_tl</name><argument_list pos:start="1975:44" pos:end="1975:46">(<argument pos:start="1975:45" pos:end="1975:45"><expr pos:start="1975:45" pos:end="1975:45"><literal type="number" pos:start="1975:45" pos:end="1975:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1977:25" pos:end="1981:56"><expr pos:start="1977:25" pos:end="1981:55"><call pos:start="1977:25" pos:end="1981:55"><name pos:start="1977:25" pos:end="1977:39">tcg_gen_add2_tl</name><argument_list pos:start="1977:40" pos:end="1981:55">(<argument pos:start="1977:41" pos:end="1977:46"><expr pos:start="1977:41" pos:end="1977:46"><name pos:start="1977:41" pos:end="1977:46">cpu_T0</name></expr></argument>, <argument pos:start="1977:49" pos:end="1977:57"><expr pos:start="1977:49" pos:end="1977:57"><name pos:start="1977:49" pos:end="1977:57">carry_out</name></expr></argument>,

                                        <argument pos:start="1979:41" pos:end="1979:46"><expr pos:start="1979:41" pos:end="1979:46"><name pos:start="1979:41" pos:end="1979:46">cpu_T0</name></expr></argument>, <argument pos:start="1979:49" pos:end="1979:52"><expr pos:start="1979:49" pos:end="1979:52"><name pos:start="1979:49" pos:end="1979:52">zero</name></expr></argument>,

                                        <argument pos:start="1981:41" pos:end="1981:48"><expr pos:start="1981:41" pos:end="1981:48"><name pos:start="1981:41" pos:end="1981:48">carry_in</name></expr></argument>, <argument pos:start="1981:51" pos:end="1981:54"><expr pos:start="1981:51" pos:end="1981:54"><name pos:start="1981:51" pos:end="1981:54">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1983:25" pos:end="1987:54"><expr pos:start="1983:25" pos:end="1987:53"><call pos:start="1983:25" pos:end="1987:53"><name pos:start="1983:25" pos:end="1983:39">tcg_gen_add2_tl</name><argument_list pos:start="1983:40" pos:end="1987:53">(<argument pos:start="1983:41" pos:end="1983:53"><expr pos:start="1983:41" pos:end="1983:53"><name pos:start="1983:41" pos:end="1983:53"><name pos:start="1983:41" pos:end="1983:48">cpu_regs</name><index pos:start="1983:49" pos:end="1983:53">[<expr pos:start="1983:50" pos:end="1983:52"><name pos:start="1983:50" pos:end="1983:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1983:56" pos:end="1983:64"><expr pos:start="1983:56" pos:end="1983:64"><name pos:start="1983:56" pos:end="1983:64">carry_out</name></expr></argument>,

                                        <argument pos:start="1985:41" pos:end="1985:53"><expr pos:start="1985:41" pos:end="1985:53"><name pos:start="1985:41" pos:end="1985:53"><name pos:start="1985:41" pos:end="1985:48">cpu_regs</name><index pos:start="1985:49" pos:end="1985:53">[<expr pos:start="1985:50" pos:end="1985:52"><name pos:start="1985:50" pos:end="1985:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1985:56" pos:end="1985:64"><expr pos:start="1985:56" pos:end="1985:64"><name pos:start="1985:56" pos:end="1985:64">carry_out</name></expr></argument>,

                                        <argument pos:start="1987:41" pos:end="1987:46"><expr pos:start="1987:41" pos:end="1987:46"><name pos:start="1987:41" pos:end="1987:46">cpu_T0</name></expr></argument>, <argument pos:start="1987:49" pos:end="1987:52"><expr pos:start="1987:49" pos:end="1987:52"><name pos:start="1987:49" pos:end="1987:52">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1989:25" pos:end="1989:44"><expr pos:start="1989:25" pos:end="1989:43"><call pos:start="1989:25" pos:end="1989:43"><name pos:start="1989:25" pos:end="1989:37">tcg_temp_free</name><argument_list pos:start="1989:38" pos:end="1989:43">(<argument pos:start="1989:39" pos:end="1989:42"><expr pos:start="1989:39" pos:end="1989:42"><name pos:start="1989:39" pos:end="1989:42">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1991:25" pos:end="1991:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="1995:21" pos:end="1995:41"><expr pos:start="1995:21" pos:end="1995:40"><call pos:start="1995:21" pos:end="1995:40"><name pos:start="1995:21" pos:end="1995:29">set_cc_op</name><argument_list pos:start="1995:30" pos:end="1995:40">(<argument pos:start="1995:31" pos:end="1995:31"><expr pos:start="1995:31" pos:end="1995:31"><name pos:start="1995:31" pos:end="1995:31">s</name></expr></argument>, <argument pos:start="1995:34" pos:end="1995:39"><expr pos:start="1995:34" pos:end="1995:39"><name pos:start="1995:34" pos:end="1995:39">end_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1999:17" pos:end="1999:22">break;</break>



            <case pos:start="2003:13" pos:end="2003:23">case <expr pos:start="2003:18" pos:end="2003:22"><literal type="number" pos:start="2003:18" pos:end="2003:22">0x1f7</literal></expr>:</case> <comment type="block" pos:start="2003:25" pos:end="2003:45">/* shlx Gy, Ey, By */</comment>

            <case pos:start="2005:13" pos:end="2005:23">case <expr pos:start="2005:18" pos:end="2005:22"><literal type="number" pos:start="2005:18" pos:end="2005:22">0x2f7</literal></expr>:</case> <comment type="block" pos:start="2005:25" pos:end="2005:45">/* sarx Gy, Ey, By */</comment>

            <case pos:start="2007:13" pos:end="2007:23">case <expr pos:start="2007:18" pos:end="2007:22"><literal type="number" pos:start="2007:18" pos:end="2007:22">0x3f7</literal></expr>:</case> <comment type="block" pos:start="2007:25" pos:end="2007:45">/* shrx Gy, Ey, By */</comment>

                <if_stmt pos:start="2009:17" pos:end="2017:17"><if pos:start="2009:17" pos:end="2017:17">if <condition pos:start="2009:20" pos:end="2013:37">(<expr pos:start="2009:21" pos:end="2013:36"><operator pos:start="2009:21" pos:end="2009:21">!</operator><operator pos:start="2009:22" pos:end="2009:22">(</operator><name pos:start="2009:23" pos:end="2009:47"><name pos:start="2009:23" pos:end="2009:23">s</name><operator pos:start="2009:24" pos:end="2009:25">-&gt;</operator><name pos:start="2009:26" pos:end="2009:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="2009:49" pos:end="2009:49">&amp;</operator> <name pos:start="2009:51" pos:end="2009:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="2009:69" pos:end="2009:69">)</operator>

                    <operator pos:start="2011:21" pos:end="2011:22">||</operator> <operator pos:start="2011:24" pos:end="2011:24">!</operator><operator pos:start="2011:25" pos:end="2011:25">(</operator><name pos:start="2011:26" pos:end="2011:34"><name pos:start="2011:26" pos:end="2011:26">s</name><operator pos:start="2011:27" pos:end="2011:28">-&gt;</operator><name pos:start="2011:29" pos:end="2011:34">prefix</name></name> <operator pos:start="2011:36" pos:end="2011:36">&amp;</operator> <name pos:start="2011:38" pos:end="2011:47">PREFIX_VEX</name><operator pos:start="2011:48" pos:end="2011:48">)</operator>

                    <operator pos:start="2013:21" pos:end="2013:22">||</operator> <name pos:start="2013:24" pos:end="2013:31"><name pos:start="2013:24" pos:end="2013:24">s</name><operator pos:start="2013:25" pos:end="2013:26">-&gt;</operator><name pos:start="2013:27" pos:end="2013:31">vex_l</name></name> <operator pos:start="2013:33" pos:end="2013:34">!=</operator> <literal type="number" pos:start="2013:36" pos:end="2013:36">0</literal></expr>)</condition> <block pos:start="2013:39" pos:end="2017:17">{<block_content pos:start="2015:21" pos:end="2015:36">

                    <goto pos:start="2015:21" pos:end="2015:36">goto <name pos:start="2015:26" pos:end="2015:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2019:17" pos:end="2019:40"><expr pos:start="2019:17" pos:end="2019:39"><name pos:start="2019:17" pos:end="2019:18">ot</name> <operator pos:start="2019:20" pos:end="2019:20">=</operator> <call pos:start="2019:22" pos:end="2019:39"><name pos:start="2019:22" pos:end="2019:29">mo_64_32</name><argument_list pos:start="2019:30" pos:end="2019:39">(<argument pos:start="2019:31" pos:end="2019:38"><expr pos:start="2019:31" pos:end="2019:38"><name pos:start="2019:31" pos:end="2019:38"><name pos:start="2019:31" pos:end="2019:31">s</name><operator pos:start="2019:32" pos:end="2019:33">-&gt;</operator><name pos:start="2019:34" pos:end="2019:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2021:17" pos:end="2021:62"><expr pos:start="2021:17" pos:end="2021:61"><call pos:start="2021:17" pos:end="2021:61"><name pos:start="2021:17" pos:end="2021:30">gen_ldst_modrm</name><argument_list pos:start="2021:31" pos:end="2021:61">(<argument pos:start="2021:32" pos:end="2021:34"><expr pos:start="2021:32" pos:end="2021:34"><name pos:start="2021:32" pos:end="2021:34">env</name></expr></argument>, <argument pos:start="2021:37" pos:end="2021:37"><expr pos:start="2021:37" pos:end="2021:37"><name pos:start="2021:37" pos:end="2021:37">s</name></expr></argument>, <argument pos:start="2021:40" pos:end="2021:44"><expr pos:start="2021:40" pos:end="2021:44"><name pos:start="2021:40" pos:end="2021:44">modrm</name></expr></argument>, <argument pos:start="2021:47" pos:end="2021:48"><expr pos:start="2021:47" pos:end="2021:48"><name pos:start="2021:47" pos:end="2021:48">ot</name></expr></argument>, <argument pos:start="2021:51" pos:end="2021:57"><expr pos:start="2021:51" pos:end="2021:57"><name pos:start="2021:51" pos:end="2021:57">OR_TMP0</name></expr></argument>, <argument pos:start="2021:60" pos:end="2021:60"><expr pos:start="2021:60" pos:end="2021:60"><literal type="number" pos:start="2021:60" pos:end="2021:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2023:17" pos:end="2031:17"><if pos:start="2023:17" pos:end="2027:17">if <condition pos:start="2023:20" pos:end="2023:32">(<expr pos:start="2023:21" pos:end="2023:31"><name pos:start="2023:21" pos:end="2023:22">ot</name> <operator pos:start="2023:24" pos:end="2023:25">==</operator> <name pos:start="2023:27" pos:end="2023:31">MO_64</name></expr>)</condition> <block pos:start="2023:34" pos:end="2027:17">{<block_content pos:start="2025:21" pos:end="2025:68">

                    <expr_stmt pos:start="2025:21" pos:end="2025:68"><expr pos:start="2025:21" pos:end="2025:67"><call pos:start="2025:21" pos:end="2025:67"><name pos:start="2025:21" pos:end="2025:35">tcg_gen_andi_tl</name><argument_list pos:start="2025:36" pos:end="2025:67">(<argument pos:start="2025:37" pos:end="2025:42"><expr pos:start="2025:37" pos:end="2025:42"><name pos:start="2025:37" pos:end="2025:42">cpu_T1</name></expr></argument>, <argument pos:start="2025:45" pos:end="2025:62"><expr pos:start="2025:45" pos:end="2025:62"><name pos:start="2025:45" pos:end="2025:62"><name pos:start="2025:45" pos:end="2025:52">cpu_regs</name><index pos:start="2025:53" pos:end="2025:62">[<expr pos:start="2025:54" pos:end="2025:61"><name pos:start="2025:54" pos:end="2025:61"><name pos:start="2025:54" pos:end="2025:54">s</name><operator pos:start="2025:55" pos:end="2025:56">-&gt;</operator><name pos:start="2025:57" pos:end="2025:61">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="2025:65" pos:end="2025:66"><expr pos:start="2025:65" pos:end="2025:66"><literal type="number" pos:start="2025:65" pos:end="2025:66">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2027:19" pos:end="2031:17">else <block pos:start="2027:24" pos:end="2031:17">{<block_content pos:start="2029:21" pos:end="2029:68">

                    <expr_stmt pos:start="2029:21" pos:end="2029:68"><expr pos:start="2029:21" pos:end="2029:67"><call pos:start="2029:21" pos:end="2029:67"><name pos:start="2029:21" pos:end="2029:35">tcg_gen_andi_tl</name><argument_list pos:start="2029:36" pos:end="2029:67">(<argument pos:start="2029:37" pos:end="2029:42"><expr pos:start="2029:37" pos:end="2029:42"><name pos:start="2029:37" pos:end="2029:42">cpu_T1</name></expr></argument>, <argument pos:start="2029:45" pos:end="2029:62"><expr pos:start="2029:45" pos:end="2029:62"><name pos:start="2029:45" pos:end="2029:62"><name pos:start="2029:45" pos:end="2029:52">cpu_regs</name><index pos:start="2029:53" pos:end="2029:62">[<expr pos:start="2029:54" pos:end="2029:61"><name pos:start="2029:54" pos:end="2029:61"><name pos:start="2029:54" pos:end="2029:54">s</name><operator pos:start="2029:55" pos:end="2029:56">-&gt;</operator><name pos:start="2029:57" pos:end="2029:61">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="2029:65" pos:end="2029:66"><expr pos:start="2029:65" pos:end="2029:66"><literal type="number" pos:start="2029:65" pos:end="2029:66">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="2033:17" pos:end="2057:17"><if pos:start="2033:17" pos:end="2037:17">if <condition pos:start="2033:20" pos:end="2033:31">(<expr pos:start="2033:21" pos:end="2033:30"><name pos:start="2033:21" pos:end="2033:21">b</name> <operator pos:start="2033:23" pos:end="2033:24">==</operator> <literal type="number" pos:start="2033:26" pos:end="2033:30">0x1f7</literal></expr>)</condition> <block pos:start="2033:33" pos:end="2037:17">{<block_content pos:start="2035:21" pos:end="2035:59">

                    <expr_stmt pos:start="2035:21" pos:end="2035:59"><expr pos:start="2035:21" pos:end="2035:58"><call pos:start="2035:21" pos:end="2035:58"><name pos:start="2035:21" pos:end="2035:34">tcg_gen_shl_tl</name><argument_list pos:start="2035:35" pos:end="2035:58">(<argument pos:start="2035:36" pos:end="2035:41"><expr pos:start="2035:36" pos:end="2035:41"><name pos:start="2035:36" pos:end="2035:41">cpu_T0</name></expr></argument>, <argument pos:start="2035:44" pos:end="2035:49"><expr pos:start="2035:44" pos:end="2035:49"><name pos:start="2035:44" pos:end="2035:49">cpu_T0</name></expr></argument>, <argument pos:start="2035:52" pos:end="2035:57"><expr pos:start="2035:52" pos:end="2035:57"><name pos:start="2035:52" pos:end="2035:57">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2037:19" pos:end="2047:17">else if <condition pos:start="2037:27" pos:end="2037:38">(<expr pos:start="2037:28" pos:end="2037:37"><name pos:start="2037:28" pos:end="2037:28">b</name> <operator pos:start="2037:30" pos:end="2037:31">==</operator> <literal type="number" pos:start="2037:33" pos:end="2037:37">0x2f7</literal></expr>)</condition> <block pos:start="2037:40" pos:end="2047:17">{<block_content pos:start="2039:21" pos:end="2045:59">

                    <if_stmt pos:start="2039:21" pos:end="2043:21"><if pos:start="2039:21" pos:end="2043:21">if <condition pos:start="2039:24" pos:end="2039:36">(<expr pos:start="2039:25" pos:end="2039:35"><name pos:start="2039:25" pos:end="2039:26">ot</name> <operator pos:start="2039:28" pos:end="2039:29">!=</operator> <name pos:start="2039:31" pos:end="2039:35">MO_64</name></expr>)</condition> <block pos:start="2039:38" pos:end="2043:21">{<block_content pos:start="2041:25" pos:end="2041:58">

                        <expr_stmt pos:start="2041:25" pos:end="2041:58"><expr pos:start="2041:25" pos:end="2041:57"><call pos:start="2041:25" pos:end="2041:57"><name pos:start="2041:25" pos:end="2041:41">tcg_gen_ext32s_tl</name><argument_list pos:start="2041:42" pos:end="2041:57">(<argument pos:start="2041:43" pos:end="2041:48"><expr pos:start="2041:43" pos:end="2041:48"><name pos:start="2041:43" pos:end="2041:48">cpu_T0</name></expr></argument>, <argument pos:start="2041:51" pos:end="2041:56"><expr pos:start="2041:51" pos:end="2041:56"><name pos:start="2041:51" pos:end="2041:56">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2045:21" pos:end="2045:59"><expr pos:start="2045:21" pos:end="2045:58"><call pos:start="2045:21" pos:end="2045:58"><name pos:start="2045:21" pos:end="2045:34">tcg_gen_sar_tl</name><argument_list pos:start="2045:35" pos:end="2045:58">(<argument pos:start="2045:36" pos:end="2045:41"><expr pos:start="2045:36" pos:end="2045:41"><name pos:start="2045:36" pos:end="2045:41">cpu_T0</name></expr></argument>, <argument pos:start="2045:44" pos:end="2045:49"><expr pos:start="2045:44" pos:end="2045:49"><name pos:start="2045:44" pos:end="2045:49">cpu_T0</name></expr></argument>, <argument pos:start="2045:52" pos:end="2045:57"><expr pos:start="2045:52" pos:end="2045:57"><name pos:start="2045:52" pos:end="2045:57">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2047:19" pos:end="2057:17">else <block pos:start="2047:24" pos:end="2057:17">{<block_content pos:start="2049:21" pos:end="2055:59">

                    <if_stmt pos:start="2049:21" pos:end="2053:21"><if pos:start="2049:21" pos:end="2053:21">if <condition pos:start="2049:24" pos:end="2049:36">(<expr pos:start="2049:25" pos:end="2049:35"><name pos:start="2049:25" pos:end="2049:26">ot</name> <operator pos:start="2049:28" pos:end="2049:29">!=</operator> <name pos:start="2049:31" pos:end="2049:35">MO_64</name></expr>)</condition> <block pos:start="2049:38" pos:end="2053:21">{<block_content pos:start="2051:25" pos:end="2051:58">

                        <expr_stmt pos:start="2051:25" pos:end="2051:58"><expr pos:start="2051:25" pos:end="2051:57"><call pos:start="2051:25" pos:end="2051:57"><name pos:start="2051:25" pos:end="2051:41">tcg_gen_ext32u_tl</name><argument_list pos:start="2051:42" pos:end="2051:57">(<argument pos:start="2051:43" pos:end="2051:48"><expr pos:start="2051:43" pos:end="2051:48"><name pos:start="2051:43" pos:end="2051:48">cpu_T0</name></expr></argument>, <argument pos:start="2051:51" pos:end="2051:56"><expr pos:start="2051:51" pos:end="2051:56"><name pos:start="2051:51" pos:end="2051:56">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2055:21" pos:end="2055:59"><expr pos:start="2055:21" pos:end="2055:58"><call pos:start="2055:21" pos:end="2055:58"><name pos:start="2055:21" pos:end="2055:34">tcg_gen_shr_tl</name><argument_list pos:start="2055:35" pos:end="2055:58">(<argument pos:start="2055:36" pos:end="2055:41"><expr pos:start="2055:36" pos:end="2055:41"><name pos:start="2055:36" pos:end="2055:41">cpu_T0</name></expr></argument>, <argument pos:start="2055:44" pos:end="2055:49"><expr pos:start="2055:44" pos:end="2055:49"><name pos:start="2055:44" pos:end="2055:49">cpu_T0</name></expr></argument>, <argument pos:start="2055:52" pos:end="2055:57"><expr pos:start="2055:52" pos:end="2055:57"><name pos:start="2055:52" pos:end="2055:57">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2059:17" pos:end="2059:50"><expr pos:start="2059:17" pos:end="2059:49"><call pos:start="2059:17" pos:end="2059:49"><name pos:start="2059:17" pos:end="2059:32">gen_op_mov_reg_v</name><argument_list pos:start="2059:33" pos:end="2059:49">(<argument pos:start="2059:34" pos:end="2059:35"><expr pos:start="2059:34" pos:end="2059:35"><name pos:start="2059:34" pos:end="2059:35">ot</name></expr></argument>, <argument pos:start="2059:38" pos:end="2059:40"><expr pos:start="2059:38" pos:end="2059:40"><name pos:start="2059:38" pos:end="2059:40">reg</name></expr></argument>, <argument pos:start="2059:43" pos:end="2059:48"><expr pos:start="2059:43" pos:end="2059:48"><name pos:start="2059:43" pos:end="2059:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2061:17" pos:end="2061:22">break;</break>



            <case pos:start="2065:13" pos:end="2065:23">case <expr pos:start="2065:18" pos:end="2065:22"><literal type="number" pos:start="2065:18" pos:end="2065:22">0x0f3</literal></expr>:</case>

            <case pos:start="2067:13" pos:end="2067:23">case <expr pos:start="2067:18" pos:end="2067:22"><literal type="number" pos:start="2067:18" pos:end="2067:22">0x1f3</literal></expr>:</case>

            <case pos:start="2069:13" pos:end="2069:23">case <expr pos:start="2069:18" pos:end="2069:22"><literal type="number" pos:start="2069:18" pos:end="2069:22">0x2f3</literal></expr>:</case>

            <case pos:start="2071:13" pos:end="2071:23">case <expr pos:start="2071:18" pos:end="2071:22"><literal type="number" pos:start="2071:18" pos:end="2071:22">0x3f3</literal></expr>:</case> <comment type="block" pos:start="2071:25" pos:end="2071:38">/* Group 17 */</comment>

                <if_stmt pos:start="2073:17" pos:end="2081:17"><if pos:start="2073:17" pos:end="2081:17">if <condition pos:start="2073:20" pos:end="2077:37">(<expr pos:start="2073:21" pos:end="2077:36"><operator pos:start="2073:21" pos:end="2073:21">!</operator><operator pos:start="2073:22" pos:end="2073:22">(</operator><name pos:start="2073:23" pos:end="2073:47"><name pos:start="2073:23" pos:end="2073:23">s</name><operator pos:start="2073:24" pos:end="2073:25">-&gt;</operator><name pos:start="2073:26" pos:end="2073:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="2073:49" pos:end="2073:49">&amp;</operator> <name pos:start="2073:51" pos:end="2073:68">CPUID_7_0_EBX_BMI1</name><operator pos:start="2073:69" pos:end="2073:69">)</operator>

                    <operator pos:start="2075:21" pos:end="2075:22">||</operator> <operator pos:start="2075:24" pos:end="2075:24">!</operator><operator pos:start="2075:25" pos:end="2075:25">(</operator><name pos:start="2075:26" pos:end="2075:34"><name pos:start="2075:26" pos:end="2075:26">s</name><operator pos:start="2075:27" pos:end="2075:28">-&gt;</operator><name pos:start="2075:29" pos:end="2075:34">prefix</name></name> <operator pos:start="2075:36" pos:end="2075:36">&amp;</operator> <name pos:start="2075:38" pos:end="2075:47">PREFIX_VEX</name><operator pos:start="2075:48" pos:end="2075:48">)</operator>

                    <operator pos:start="2077:21" pos:end="2077:22">||</operator> <name pos:start="2077:24" pos:end="2077:31"><name pos:start="2077:24" pos:end="2077:24">s</name><operator pos:start="2077:25" pos:end="2077:26">-&gt;</operator><name pos:start="2077:27" pos:end="2077:31">vex_l</name></name> <operator pos:start="2077:33" pos:end="2077:34">!=</operator> <literal type="number" pos:start="2077:36" pos:end="2077:36">0</literal></expr>)</condition> <block pos:start="2077:39" pos:end="2081:17">{<block_content pos:start="2079:21" pos:end="2079:36">

                    <goto pos:start="2079:21" pos:end="2079:36">goto <name pos:start="2079:26" pos:end="2079:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2083:17" pos:end="2083:40"><expr pos:start="2083:17" pos:end="2083:39"><name pos:start="2083:17" pos:end="2083:18">ot</name> <operator pos:start="2083:20" pos:end="2083:20">=</operator> <call pos:start="2083:22" pos:end="2083:39"><name pos:start="2083:22" pos:end="2083:29">mo_64_32</name><argument_list pos:start="2083:30" pos:end="2083:39">(<argument pos:start="2083:31" pos:end="2083:38"><expr pos:start="2083:31" pos:end="2083:38"><name pos:start="2083:31" pos:end="2083:38"><name pos:start="2083:31" pos:end="2083:31">s</name><operator pos:start="2083:32" pos:end="2083:33">-&gt;</operator><name pos:start="2083:34" pos:end="2083:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2085:17" pos:end="2085:62"><expr pos:start="2085:17" pos:end="2085:61"><call pos:start="2085:17" pos:end="2085:61"><name pos:start="2085:17" pos:end="2085:30">gen_ldst_modrm</name><argument_list pos:start="2085:31" pos:end="2085:61">(<argument pos:start="2085:32" pos:end="2085:34"><expr pos:start="2085:32" pos:end="2085:34"><name pos:start="2085:32" pos:end="2085:34">env</name></expr></argument>, <argument pos:start="2085:37" pos:end="2085:37"><expr pos:start="2085:37" pos:end="2085:37"><name pos:start="2085:37" pos:end="2085:37">s</name></expr></argument>, <argument pos:start="2085:40" pos:end="2085:44"><expr pos:start="2085:40" pos:end="2085:44"><name pos:start="2085:40" pos:end="2085:44">modrm</name></expr></argument>, <argument pos:start="2085:47" pos:end="2085:48"><expr pos:start="2085:47" pos:end="2085:48"><name pos:start="2085:47" pos:end="2085:48">ot</name></expr></argument>, <argument pos:start="2085:51" pos:end="2085:57"><expr pos:start="2085:51" pos:end="2085:57"><name pos:start="2085:51" pos:end="2085:57">OR_TMP0</name></expr></argument>, <argument pos:start="2085:60" pos:end="2085:60"><expr pos:start="2085:60" pos:end="2085:60"><literal type="number" pos:start="2085:60" pos:end="2085:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <switch pos:start="2089:17" pos:end="2143:17">switch <condition pos:start="2089:24" pos:end="2089:32">(<expr pos:start="2089:25" pos:end="2089:31"><name pos:start="2089:25" pos:end="2089:27">reg</name> <operator pos:start="2089:29" pos:end="2089:29">&amp;</operator> <literal type="number" pos:start="2089:31" pos:end="2089:31">7</literal></expr>)</condition> <block pos:start="2089:34" pos:end="2143:17">{<block_content pos:start="2091:17" pos:end="2141:36">

                <case pos:start="2091:17" pos:end="2091:23">case <expr pos:start="2091:22" pos:end="2091:22"><literal type="number" pos:start="2091:22" pos:end="2091:22">1</literal></expr>:</case> <comment type="block" pos:start="2091:25" pos:end="2091:40">/* blsr By,Ey */</comment>

                    <expr_stmt pos:start="2093:21" pos:end="2093:51"><expr pos:start="2093:21" pos:end="2093:50"><call pos:start="2093:21" pos:end="2093:50"><name pos:start="2093:21" pos:end="2093:34">tcg_gen_neg_tl</name><argument_list pos:start="2093:35" pos:end="2093:50">(<argument pos:start="2093:36" pos:end="2093:41"><expr pos:start="2093:36" pos:end="2093:41"><name pos:start="2093:36" pos:end="2093:41">cpu_T1</name></expr></argument>, <argument pos:start="2093:44" pos:end="2093:49"><expr pos:start="2093:44" pos:end="2093:49"><name pos:start="2093:44" pos:end="2093:49">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2095:21" pos:end="2095:59"><expr pos:start="2095:21" pos:end="2095:58"><call pos:start="2095:21" pos:end="2095:58"><name pos:start="2095:21" pos:end="2095:34">tcg_gen_and_tl</name><argument_list pos:start="2095:35" pos:end="2095:58">(<argument pos:start="2095:36" pos:end="2095:41"><expr pos:start="2095:36" pos:end="2095:41"><name pos:start="2095:36" pos:end="2095:41">cpu_T0</name></expr></argument>, <argument pos:start="2095:44" pos:end="2095:49"><expr pos:start="2095:44" pos:end="2095:49"><name pos:start="2095:44" pos:end="2095:49">cpu_T0</name></expr></argument>, <argument pos:start="2095:52" pos:end="2095:57"><expr pos:start="2095:52" pos:end="2095:57"><name pos:start="2095:52" pos:end="2095:57">cpu_T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2097:21" pos:end="2097:59"><expr pos:start="2097:21" pos:end="2097:58"><call pos:start="2097:21" pos:end="2097:58"><name pos:start="2097:21" pos:end="2097:36">gen_op_mov_reg_v</name><argument_list pos:start="2097:37" pos:end="2097:58">(<argument pos:start="2097:38" pos:end="2097:39"><expr pos:start="2097:38" pos:end="2097:39"><name pos:start="2097:38" pos:end="2097:39">ot</name></expr></argument>, <argument pos:start="2097:42" pos:end="2097:49"><expr pos:start="2097:42" pos:end="2097:49"><name pos:start="2097:42" pos:end="2097:49"><name pos:start="2097:42" pos:end="2097:42">s</name><operator pos:start="2097:43" pos:end="2097:44">-&gt;</operator><name pos:start="2097:45" pos:end="2097:49">vex_v</name></name></expr></argument>, <argument pos:start="2097:52" pos:end="2097:57"><expr pos:start="2097:52" pos:end="2097:57"><name pos:start="2097:52" pos:end="2097:57">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2099:21" pos:end="2099:40"><expr pos:start="2099:21" pos:end="2099:39"><call pos:start="2099:21" pos:end="2099:39"><name pos:start="2099:21" pos:end="2099:37">gen_op_update2_cc</name><argument_list pos:start="2099:38" pos:end="2099:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2101:21" pos:end="2101:52"><expr pos:start="2101:21" pos:end="2101:51"><call pos:start="2101:21" pos:end="2101:51"><name pos:start="2101:21" pos:end="2101:29">set_cc_op</name><argument_list pos:start="2101:30" pos:end="2101:51">(<argument pos:start="2101:31" pos:end="2101:31"><expr pos:start="2101:31" pos:end="2101:31"><name pos:start="2101:31" pos:end="2101:31">s</name></expr></argument>, <argument pos:start="2101:34" pos:end="2101:50"><expr pos:start="2101:34" pos:end="2101:50"><name pos:start="2101:34" pos:end="2101:45">CC_OP_BMILGB</name> <operator pos:start="2101:47" pos:end="2101:47">+</operator> <name pos:start="2101:49" pos:end="2101:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2103:21" pos:end="2103:26">break;</break>



                <case pos:start="2107:17" pos:end="2107:23">case <expr pos:start="2107:22" pos:end="2107:22"><literal type="number" pos:start="2107:22" pos:end="2107:22">2</literal></expr>:</case> <comment type="block" pos:start="2107:25" pos:end="2107:42">/* blsmsk By,Ey */</comment>

                    <expr_stmt pos:start="2109:21" pos:end="2109:55"><expr pos:start="2109:21" pos:end="2109:54"><call pos:start="2109:21" pos:end="2109:54"><name pos:start="2109:21" pos:end="2109:34">tcg_gen_mov_tl</name><argument_list pos:start="2109:35" pos:end="2109:54">(<argument pos:start="2109:36" pos:end="2109:45"><expr pos:start="2109:36" pos:end="2109:45"><name pos:start="2109:36" pos:end="2109:45">cpu_cc_src</name></expr></argument>, <argument pos:start="2109:48" pos:end="2109:53"><expr pos:start="2109:48" pos:end="2109:53"><name pos:start="2109:48" pos:end="2109:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2111:21" pos:end="2111:55"><expr pos:start="2111:21" pos:end="2111:54"><call pos:start="2111:21" pos:end="2111:54"><name pos:start="2111:21" pos:end="2111:35">tcg_gen_subi_tl</name><argument_list pos:start="2111:36" pos:end="2111:54">(<argument pos:start="2111:37" pos:end="2111:42"><expr pos:start="2111:37" pos:end="2111:42"><name pos:start="2111:37" pos:end="2111:42">cpu_T0</name></expr></argument>, <argument pos:start="2111:45" pos:end="2111:50"><expr pos:start="2111:45" pos:end="2111:50"><name pos:start="2111:45" pos:end="2111:50">cpu_T0</name></expr></argument>, <argument pos:start="2111:53" pos:end="2111:53"><expr pos:start="2111:53" pos:end="2111:53"><literal type="number" pos:start="2111:53" pos:end="2111:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2113:21" pos:end="2113:63"><expr pos:start="2113:21" pos:end="2113:62"><call pos:start="2113:21" pos:end="2113:62"><name pos:start="2113:21" pos:end="2113:34">tcg_gen_xor_tl</name><argument_list pos:start="2113:35" pos:end="2113:62">(<argument pos:start="2113:36" pos:end="2113:41"><expr pos:start="2113:36" pos:end="2113:41"><name pos:start="2113:36" pos:end="2113:41">cpu_T0</name></expr></argument>, <argument pos:start="2113:44" pos:end="2113:49"><expr pos:start="2113:44" pos:end="2113:49"><name pos:start="2113:44" pos:end="2113:49">cpu_T0</name></expr></argument>, <argument pos:start="2113:52" pos:end="2113:61"><expr pos:start="2113:52" pos:end="2113:61"><name pos:start="2113:52" pos:end="2113:61">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2115:21" pos:end="2115:55"><expr pos:start="2115:21" pos:end="2115:54"><call pos:start="2115:21" pos:end="2115:54"><name pos:start="2115:21" pos:end="2115:34">tcg_gen_mov_tl</name><argument_list pos:start="2115:35" pos:end="2115:54">(<argument pos:start="2115:36" pos:end="2115:45"><expr pos:start="2115:36" pos:end="2115:45"><name pos:start="2115:36" pos:end="2115:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="2115:48" pos:end="2115:53"><expr pos:start="2115:48" pos:end="2115:53"><name pos:start="2115:48" pos:end="2115:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2117:21" pos:end="2117:52"><expr pos:start="2117:21" pos:end="2117:51"><call pos:start="2117:21" pos:end="2117:51"><name pos:start="2117:21" pos:end="2117:29">set_cc_op</name><argument_list pos:start="2117:30" pos:end="2117:51">(<argument pos:start="2117:31" pos:end="2117:31"><expr pos:start="2117:31" pos:end="2117:31"><name pos:start="2117:31" pos:end="2117:31">s</name></expr></argument>, <argument pos:start="2117:34" pos:end="2117:50"><expr pos:start="2117:34" pos:end="2117:50"><name pos:start="2117:34" pos:end="2117:45">CC_OP_BMILGB</name> <operator pos:start="2117:47" pos:end="2117:47">+</operator> <name pos:start="2117:49" pos:end="2117:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2119:21" pos:end="2119:26">break;</break>



                <case pos:start="2123:17" pos:end="2123:23">case <expr pos:start="2123:22" pos:end="2123:22"><literal type="number" pos:start="2123:22" pos:end="2123:22">3</literal></expr>:</case> <comment type="block" pos:start="2123:25" pos:end="2123:41">/* blsi By, Ey */</comment>

                    <expr_stmt pos:start="2125:21" pos:end="2125:55"><expr pos:start="2125:21" pos:end="2125:54"><call pos:start="2125:21" pos:end="2125:54"><name pos:start="2125:21" pos:end="2125:34">tcg_gen_mov_tl</name><argument_list pos:start="2125:35" pos:end="2125:54">(<argument pos:start="2125:36" pos:end="2125:45"><expr pos:start="2125:36" pos:end="2125:45"><name pos:start="2125:36" pos:end="2125:45">cpu_cc_src</name></expr></argument>, <argument pos:start="2125:48" pos:end="2125:53"><expr pos:start="2125:48" pos:end="2125:53"><name pos:start="2125:48" pos:end="2125:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2127:21" pos:end="2127:55"><expr pos:start="2127:21" pos:end="2127:54"><call pos:start="2127:21" pos:end="2127:54"><name pos:start="2127:21" pos:end="2127:35">tcg_gen_subi_tl</name><argument_list pos:start="2127:36" pos:end="2127:54">(<argument pos:start="2127:37" pos:end="2127:42"><expr pos:start="2127:37" pos:end="2127:42"><name pos:start="2127:37" pos:end="2127:42">cpu_T0</name></expr></argument>, <argument pos:start="2127:45" pos:end="2127:50"><expr pos:start="2127:45" pos:end="2127:50"><name pos:start="2127:45" pos:end="2127:50">cpu_T0</name></expr></argument>, <argument pos:start="2127:53" pos:end="2127:53"><expr pos:start="2127:53" pos:end="2127:53"><literal type="number" pos:start="2127:53" pos:end="2127:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2129:21" pos:end="2129:63"><expr pos:start="2129:21" pos:end="2129:62"><call pos:start="2129:21" pos:end="2129:62"><name pos:start="2129:21" pos:end="2129:34">tcg_gen_and_tl</name><argument_list pos:start="2129:35" pos:end="2129:62">(<argument pos:start="2129:36" pos:end="2129:41"><expr pos:start="2129:36" pos:end="2129:41"><name pos:start="2129:36" pos:end="2129:41">cpu_T0</name></expr></argument>, <argument pos:start="2129:44" pos:end="2129:49"><expr pos:start="2129:44" pos:end="2129:49"><name pos:start="2129:44" pos:end="2129:49">cpu_T0</name></expr></argument>, <argument pos:start="2129:52" pos:end="2129:61"><expr pos:start="2129:52" pos:end="2129:61"><name pos:start="2129:52" pos:end="2129:61">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2131:21" pos:end="2131:55"><expr pos:start="2131:21" pos:end="2131:54"><call pos:start="2131:21" pos:end="2131:54"><name pos:start="2131:21" pos:end="2131:34">tcg_gen_mov_tl</name><argument_list pos:start="2131:35" pos:end="2131:54">(<argument pos:start="2131:36" pos:end="2131:45"><expr pos:start="2131:36" pos:end="2131:45"><name pos:start="2131:36" pos:end="2131:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="2131:48" pos:end="2131:53"><expr pos:start="2131:48" pos:end="2131:53"><name pos:start="2131:48" pos:end="2131:53">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2133:21" pos:end="2133:52"><expr pos:start="2133:21" pos:end="2133:51"><call pos:start="2133:21" pos:end="2133:51"><name pos:start="2133:21" pos:end="2133:29">set_cc_op</name><argument_list pos:start="2133:30" pos:end="2133:51">(<argument pos:start="2133:31" pos:end="2133:31"><expr pos:start="2133:31" pos:end="2133:31"><name pos:start="2133:31" pos:end="2133:31">s</name></expr></argument>, <argument pos:start="2133:34" pos:end="2133:50"><expr pos:start="2133:34" pos:end="2133:50"><name pos:start="2133:34" pos:end="2133:45">CC_OP_BMILGB</name> <operator pos:start="2133:47" pos:end="2133:47">+</operator> <name pos:start="2133:49" pos:end="2133:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2135:21" pos:end="2135:26">break;</break>



                <default pos:start="2139:17" pos:end="2139:24">default:</default>

                    <goto pos:start="2141:21" pos:end="2141:36">goto <name pos:start="2141:26" pos:end="2141:35">unknown_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2145:17" pos:end="2145:22">break;</break>



            <default pos:start="2149:13" pos:end="2149:20">default:</default>

                <goto pos:start="2151:17" pos:end="2151:32">goto <name pos:start="2151:22" pos:end="2151:31">unknown_op</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="2155:13" pos:end="2155:18">break;</break>



        <case pos:start="2159:9" pos:end="2159:19">case <expr pos:start="2159:14" pos:end="2159:18"><literal type="number" pos:start="2159:14" pos:end="2159:18">0x03a</literal></expr>:</case>

        <case pos:start="2161:9" pos:end="2161:19">case <expr pos:start="2161:14" pos:end="2161:18"><literal type="number" pos:start="2161:14" pos:end="2161:18">0x13a</literal></expr>:</case>

            <expr_stmt pos:start="2163:13" pos:end="2163:22"><expr pos:start="2163:13" pos:end="2163:21"><name pos:start="2163:13" pos:end="2163:13">b</name> <operator pos:start="2163:15" pos:end="2163:15">=</operator> <name pos:start="2163:17" pos:end="2163:21">modrm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2165:13" pos:end="2165:48"><expr pos:start="2165:13" pos:end="2165:47"><name pos:start="2165:13" pos:end="2165:17">modrm</name> <operator pos:start="2165:19" pos:end="2165:19">=</operator> <call pos:start="2165:21" pos:end="2165:47"><name pos:start="2165:21" pos:end="2165:33">cpu_ldub_code</name><argument_list pos:start="2165:34" pos:end="2165:47">(<argument pos:start="2165:35" pos:end="2165:37"><expr pos:start="2165:35" pos:end="2165:37"><name pos:start="2165:35" pos:end="2165:37">env</name></expr></argument>, <argument pos:start="2165:40" pos:end="2165:46"><expr pos:start="2165:40" pos:end="2165:46"><name pos:start="2165:40" pos:end="2165:44"><name pos:start="2165:40" pos:end="2165:40">s</name><operator pos:start="2165:41" pos:end="2165:42">-&gt;</operator><name pos:start="2165:43" pos:end="2165:44">pc</name></name><operator pos:start="2165:45" pos:end="2165:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2167:13" pos:end="2167:27"><expr pos:start="2167:13" pos:end="2167:26"><name pos:start="2167:13" pos:end="2167:14">rm</name> <operator pos:start="2167:16" pos:end="2167:16">=</operator> <name pos:start="2167:18" pos:end="2167:22">modrm</name> <operator pos:start="2167:24" pos:end="2167:24">&amp;</operator> <literal type="number" pos:start="2167:26" pos:end="2167:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2169:13" pos:end="2169:45"><expr pos:start="2169:13" pos:end="2169:44"><name pos:start="2169:13" pos:end="2169:15">reg</name> <operator pos:start="2169:17" pos:end="2169:17">=</operator> <operator pos:start="2169:19" pos:end="2169:19">(</operator><operator pos:start="2169:20" pos:end="2169:20">(</operator><name pos:start="2169:21" pos:end="2169:25">modrm</name> <operator pos:start="2169:27" pos:end="2169:28">&gt;&gt;</operator> <literal type="number" pos:start="2169:30" pos:end="2169:30">3</literal><operator pos:start="2169:31" pos:end="2169:31">)</operator> <operator pos:start="2169:33" pos:end="2169:33">&amp;</operator> <literal type="number" pos:start="2169:35" pos:end="2169:35">7</literal><operator pos:start="2169:36" pos:end="2169:36">)</operator> <operator pos:start="2169:38" pos:end="2169:38">|</operator> <name pos:start="2169:40" pos:end="2169:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2171:13" pos:end="2171:35"><expr pos:start="2171:13" pos:end="2171:34"><name pos:start="2171:13" pos:end="2171:15">mod</name> <operator pos:start="2171:17" pos:end="2171:17">=</operator> <operator pos:start="2171:19" pos:end="2171:19">(</operator><name pos:start="2171:20" pos:end="2171:24">modrm</name> <operator pos:start="2171:26" pos:end="2171:27">&gt;&gt;</operator> <literal type="number" pos:start="2171:29" pos:end="2171:29">6</literal><operator pos:start="2171:30" pos:end="2171:30">)</operator> <operator pos:start="2171:32" pos:end="2171:32">&amp;</operator> <literal type="number" pos:start="2171:34" pos:end="2171:34">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="2173:13" pos:end="2177:13"><if pos:start="2173:13" pos:end="2177:13">if <condition pos:start="2173:16" pos:end="2173:24">(<expr pos:start="2173:17" pos:end="2173:23"><name pos:start="2173:17" pos:end="2173:18">b1</name> <operator pos:start="2173:20" pos:end="2173:21">&gt;=</operator> <literal type="number" pos:start="2173:23" pos:end="2173:23">2</literal></expr>)</condition> <block pos:start="2173:26" pos:end="2177:13">{<block_content pos:start="2175:17" pos:end="2175:32">

                <goto pos:start="2175:17" pos:end="2175:32">goto <name pos:start="2175:22" pos:end="2175:31">unknown_op</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="2181:13" pos:end="2181:50"><expr pos:start="2181:13" pos:end="2181:49"><name pos:start="2181:13" pos:end="2181:23">sse_fn_eppi</name> <operator pos:start="2181:25" pos:end="2181:25">=</operator> <name pos:start="2181:27" pos:end="2181:42"><name pos:start="2181:27" pos:end="2181:39">sse_op_table7</name><index pos:start="2181:40" pos:end="2181:42">[<expr pos:start="2181:41" pos:end="2181:41"><name pos:start="2181:41" pos:end="2181:41">b</name></expr>]</index></name><operator pos:start="2181:43" pos:end="2181:43">.</operator><name pos:start="2181:44" pos:end="2181:49"><name pos:start="2181:44" pos:end="2181:45">op</name><index pos:start="2181:46" pos:end="2181:49">[<expr pos:start="2181:47" pos:end="2181:48"><name pos:start="2181:47" pos:end="2181:48">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="2183:13" pos:end="2187:13"><if pos:start="2183:13" pos:end="2187:13">if <condition pos:start="2183:16" pos:end="2183:29">(<expr pos:start="2183:17" pos:end="2183:28"><operator pos:start="2183:17" pos:end="2183:17">!</operator><name pos:start="2183:18" pos:end="2183:28">sse_fn_eppi</name></expr>)</condition> <block pos:start="2183:31" pos:end="2187:13">{<block_content pos:start="2185:17" pos:end="2185:32">

                <goto pos:start="2185:17" pos:end="2185:32">goto <name pos:start="2185:22" pos:end="2185:31">unknown_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="2189:13" pos:end="2191:32"><if pos:start="2189:13" pos:end="2191:32">if <condition pos:start="2189:16" pos:end="2189:69">(<expr pos:start="2189:17" pos:end="2189:68"><operator pos:start="2189:17" pos:end="2189:17">!</operator><operator pos:start="2189:18" pos:end="2189:18">(</operator><name pos:start="2189:19" pos:end="2189:39"><name pos:start="2189:19" pos:end="2189:19">s</name><operator pos:start="2189:20" pos:end="2189:21">-&gt;</operator><name pos:start="2189:22" pos:end="2189:39">cpuid_ext_features</name></name> <operator pos:start="2189:41" pos:end="2189:41">&amp;</operator> <name pos:start="2189:43" pos:end="2189:58"><name pos:start="2189:43" pos:end="2189:55">sse_op_table7</name><index pos:start="2189:56" pos:end="2189:58">[<expr pos:start="2189:57" pos:end="2189:57"><name pos:start="2189:57" pos:end="2189:57">b</name></expr>]</index></name><operator pos:start="2189:59" pos:end="2189:59">.</operator><name pos:start="2189:60" pos:end="2189:67">ext_mask</name><operator pos:start="2189:68" pos:end="2189:68">)</operator></expr>)</condition><block type="pseudo" pos:start="2191:17" pos:end="2191:32"><block_content pos:start="2191:17" pos:end="2191:32">

                <goto pos:start="2191:17" pos:end="2191:32">goto <name pos:start="2191:22" pos:end="2191:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="2195:13" pos:end="2195:30"><expr pos:start="2195:13" pos:end="2195:29"><name pos:start="2195:13" pos:end="2195:25"><name pos:start="2195:13" pos:end="2195:13">s</name><operator pos:start="2195:14" pos:end="2195:15">-&gt;</operator><name pos:start="2195:16" pos:end="2195:25">rip_offset</name></name> <operator pos:start="2195:27" pos:end="2195:27">=</operator> <literal type="number" pos:start="2195:29" pos:end="2195:29">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="2199:13" pos:end="2465:13"><if pos:start="2199:13" pos:end="2465:13">if <condition pos:start="2199:16" pos:end="2199:43">(<expr pos:start="2199:17" pos:end="2199:42"><name pos:start="2199:17" pos:end="2199:27">sse_fn_eppi</name> <operator pos:start="2199:29" pos:end="2199:30">==</operator> <name pos:start="2199:32" pos:end="2199:42">SSE_SPECIAL</name></expr>)</condition> <block pos:start="2199:45" pos:end="2465:13">{<block_content pos:start="2201:17" pos:end="2463:23">

                <expr_stmt pos:start="2201:17" pos:end="2201:40"><expr pos:start="2201:17" pos:end="2201:39"><name pos:start="2201:17" pos:end="2201:18">ot</name> <operator pos:start="2201:20" pos:end="2201:20">=</operator> <call pos:start="2201:22" pos:end="2201:39"><name pos:start="2201:22" pos:end="2201:29">mo_64_32</name><argument_list pos:start="2201:30" pos:end="2201:39">(<argument pos:start="2201:31" pos:end="2201:38"><expr pos:start="2201:31" pos:end="2201:38"><name pos:start="2201:31" pos:end="2201:38"><name pos:start="2201:31" pos:end="2201:31">s</name><operator pos:start="2201:32" pos:end="2201:33">-&gt;</operator><name pos:start="2201:34" pos:end="2201:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2203:17" pos:end="2203:44"><expr pos:start="2203:17" pos:end="2203:43"><name pos:start="2203:17" pos:end="2203:18">rm</name> <operator pos:start="2203:20" pos:end="2203:20">=</operator> <operator pos:start="2203:22" pos:end="2203:22">(</operator><name pos:start="2203:23" pos:end="2203:27">modrm</name> <operator pos:start="2203:29" pos:end="2203:29">&amp;</operator> <literal type="number" pos:start="2203:31" pos:end="2203:31">7</literal><operator pos:start="2203:32" pos:end="2203:32">)</operator> <operator pos:start="2203:34" pos:end="2203:34">|</operator> <call pos:start="2203:36" pos:end="2203:43"><name pos:start="2203:36" pos:end="2203:40">REX_B</name><argument_list pos:start="2203:41" pos:end="2203:43">(<argument pos:start="2203:42" pos:end="2203:42"><expr pos:start="2203:42" pos:end="2203:42"><name pos:start="2203:42" pos:end="2203:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2205:17" pos:end="2207:49"><if pos:start="2205:17" pos:end="2207:49">if <condition pos:start="2205:20" pos:end="2205:29">(<expr pos:start="2205:21" pos:end="2205:28"><name pos:start="2205:21" pos:end="2205:23">mod</name> <operator pos:start="2205:25" pos:end="2205:26">!=</operator> <literal type="number" pos:start="2205:28" pos:end="2205:28">3</literal></expr>)</condition><block type="pseudo" pos:start="2207:21" pos:end="2207:49"><block_content pos:start="2207:21" pos:end="2207:49">

                    <expr_stmt pos:start="2207:21" pos:end="2207:49"><expr pos:start="2207:21" pos:end="2207:48"><call pos:start="2207:21" pos:end="2207:48"><name pos:start="2207:21" pos:end="2207:33">gen_lea_modrm</name><argument_list pos:start="2207:34" pos:end="2207:48">(<argument pos:start="2207:35" pos:end="2207:37"><expr pos:start="2207:35" pos:end="2207:37"><name pos:start="2207:35" pos:end="2207:37">env</name></expr></argument>, <argument pos:start="2207:40" pos:end="2207:40"><expr pos:start="2207:40" pos:end="2207:40"><name pos:start="2207:40" pos:end="2207:40">s</name></expr></argument>, <argument pos:start="2207:43" pos:end="2207:47"><expr pos:start="2207:43" pos:end="2207:47"><name pos:start="2207:43" pos:end="2207:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2209:17" pos:end="2209:49"><expr pos:start="2209:17" pos:end="2209:48"><name pos:start="2209:17" pos:end="2209:19">reg</name> <operator pos:start="2209:21" pos:end="2209:21">=</operator> <operator pos:start="2209:23" pos:end="2209:23">(</operator><operator pos:start="2209:24" pos:end="2209:24">(</operator><name pos:start="2209:25" pos:end="2209:29">modrm</name> <operator pos:start="2209:31" pos:end="2209:32">&gt;&gt;</operator> <literal type="number" pos:start="2209:34" pos:end="2209:34">3</literal><operator pos:start="2209:35" pos:end="2209:35">)</operator> <operator pos:start="2209:37" pos:end="2209:37">&amp;</operator> <literal type="number" pos:start="2209:39" pos:end="2209:39">7</literal><operator pos:start="2209:40" pos:end="2209:40">)</operator> <operator pos:start="2209:42" pos:end="2209:42">|</operator> <name pos:start="2209:44" pos:end="2209:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2211:17" pos:end="2211:50"><expr pos:start="2211:17" pos:end="2211:49"><name pos:start="2211:17" pos:end="2211:19">val</name> <operator pos:start="2211:21" pos:end="2211:21">=</operator> <call pos:start="2211:23" pos:end="2211:49"><name pos:start="2211:23" pos:end="2211:35">cpu_ldub_code</name><argument_list pos:start="2211:36" pos:end="2211:49">(<argument pos:start="2211:37" pos:end="2211:39"><expr pos:start="2211:37" pos:end="2211:39"><name pos:start="2211:37" pos:end="2211:39">env</name></expr></argument>, <argument pos:start="2211:42" pos:end="2211:48"><expr pos:start="2211:42" pos:end="2211:48"><name pos:start="2211:42" pos:end="2211:46"><name pos:start="2211:42" pos:end="2211:42">s</name><operator pos:start="2211:43" pos:end="2211:44">-&gt;</operator><name pos:start="2211:45" pos:end="2211:46">pc</name></name><operator pos:start="2211:47" pos:end="2211:48">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="2213:17" pos:end="2461:17">switch <condition pos:start="2213:24" pos:end="2213:26">(<expr pos:start="2213:25" pos:end="2213:25"><name pos:start="2213:25" pos:end="2213:25">b</name></expr>)</condition> <block pos:start="2213:28" pos:end="2461:17">{<block_content pos:start="2215:17" pos:end="2459:26">

                <case pos:start="2215:17" pos:end="2215:26">case <expr pos:start="2215:22" pos:end="2215:25"><literal type="number" pos:start="2215:22" pos:end="2215:25">0x14</literal></expr>:</case> <comment type="block" pos:start="2215:28" pos:end="2215:39">/* pextrb */</comment>

                    <expr_stmt pos:start="2217:21" pos:end="2219:76"><expr pos:start="2217:21" pos:end="2219:75"><call pos:start="2217:21" pos:end="2219:75"><name pos:start="2217:21" pos:end="2217:35">tcg_gen_ld8u_tl</name><argument_list pos:start="2217:36" pos:end="2219:75">(<argument pos:start="2217:37" pos:end="2217:42"><expr pos:start="2217:37" pos:end="2217:42"><name pos:start="2217:37" pos:end="2217:42">cpu_T0</name></expr></argument>, <argument pos:start="2217:45" pos:end="2217:51"><expr pos:start="2217:45" pos:end="2217:51"><name pos:start="2217:45" pos:end="2217:51">cpu_env</name></expr></argument>, <argument pos:start="2217:54" pos:end="2219:74"><expr pos:start="2217:54" pos:end="2219:74"><call pos:start="2217:54" pos:end="2219:74"><name pos:start="2217:54" pos:end="2217:61">offsetof</name><argument_list pos:start="2217:62" pos:end="2219:74">(<argument pos:start="2217:63" pos:end="2217:73"><expr pos:start="2217:63" pos:end="2217:73"><name pos:start="2217:63" pos:end="2217:73">CPUX86State</name></expr></argument>,

                                            <argument pos:start="2219:45" pos:end="2219:73"><expr pos:start="2219:45" pos:end="2219:73"><name pos:start="2219:45" pos:end="2219:57"><name pos:start="2219:45" pos:end="2219:52">xmm_regs</name><index pos:start="2219:53" pos:end="2219:57">[<expr pos:start="2219:54" pos:end="2219:56"><name pos:start="2219:54" pos:end="2219:56">reg</name></expr>]</index></name><operator pos:start="2219:58" pos:end="2219:58">.</operator><call pos:start="2219:59" pos:end="2219:73"><name pos:start="2219:59" pos:end="2219:63">ZMM_B</name><argument_list pos:start="2219:64" pos:end="2219:73">(<argument pos:start="2219:65" pos:end="2219:72"><expr pos:start="2219:65" pos:end="2219:72"><name pos:start="2219:65" pos:end="2219:67">val</name> <operator pos:start="2219:69" pos:end="2219:69">&amp;</operator> <literal type="number" pos:start="2219:71" pos:end="2219:72">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2221:21" pos:end="2231:21"><if pos:start="2221:21" pos:end="2225:21">if <condition pos:start="2221:24" pos:end="2221:33">(<expr pos:start="2221:25" pos:end="2221:32"><name pos:start="2221:25" pos:end="2221:27">mod</name> <operator pos:start="2221:29" pos:end="2221:30">==</operator> <literal type="number" pos:start="2221:32" pos:end="2221:32">3</literal></expr>)</condition> <block pos:start="2221:35" pos:end="2225:21">{<block_content pos:start="2223:25" pos:end="2223:57">

                        <expr_stmt pos:start="2223:25" pos:end="2223:57"><expr pos:start="2223:25" pos:end="2223:56"><call pos:start="2223:25" pos:end="2223:56"><name pos:start="2223:25" pos:end="2223:40">gen_op_mov_reg_v</name><argument_list pos:start="2223:41" pos:end="2223:56">(<argument pos:start="2223:42" pos:end="2223:43"><expr pos:start="2223:42" pos:end="2223:43"><name pos:start="2223:42" pos:end="2223:43">ot</name></expr></argument>, <argument pos:start="2223:46" pos:end="2223:47"><expr pos:start="2223:46" pos:end="2223:47"><name pos:start="2223:46" pos:end="2223:47">rm</name></expr></argument>, <argument pos:start="2223:50" pos:end="2223:55"><expr pos:start="2223:50" pos:end="2223:55"><name pos:start="2223:50" pos:end="2223:55">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2225:23" pos:end="2231:21">else <block pos:start="2225:28" pos:end="2231:21">{<block_content pos:start="2227:25" pos:end="2229:64">

                        <expr_stmt pos:start="2227:25" pos:end="2229:64"><expr pos:start="2227:25" pos:end="2229:63"><call pos:start="2227:25" pos:end="2229:63"><name pos:start="2227:25" pos:end="2227:42">tcg_gen_qemu_st_tl</name><argument_list pos:start="2227:43" pos:end="2229:63">(<argument pos:start="2227:44" pos:end="2227:49"><expr pos:start="2227:44" pos:end="2227:49"><name pos:start="2227:44" pos:end="2227:49">cpu_T0</name></expr></argument>, <argument pos:start="2227:52" pos:end="2227:57"><expr pos:start="2227:52" pos:end="2227:57"><name pos:start="2227:52" pos:end="2227:57">cpu_A0</name></expr></argument>,

                                           <argument pos:start="2229:44" pos:end="2229:55"><expr pos:start="2229:44" pos:end="2229:55"><name pos:start="2229:44" pos:end="2229:55"><name pos:start="2229:44" pos:end="2229:44">s</name><operator pos:start="2229:45" pos:end="2229:46">-&gt;</operator><name pos:start="2229:47" pos:end="2229:55">mem_index</name></name></expr></argument>, <argument pos:start="2229:58" pos:end="2229:62"><expr pos:start="2229:58" pos:end="2229:62"><name pos:start="2229:58" pos:end="2229:62">MO_UB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2233:21" pos:end="2233:26">break;</break>

                <case pos:start="2235:17" pos:end="2235:26">case <expr pos:start="2235:22" pos:end="2235:25"><literal type="number" pos:start="2235:22" pos:end="2235:25">0x15</literal></expr>:</case> <comment type="block" pos:start="2235:28" pos:end="2235:39">/* pextrw */</comment>

                    <expr_stmt pos:start="2237:21" pos:end="2239:75"><expr pos:start="2237:21" pos:end="2239:74"><call pos:start="2237:21" pos:end="2239:74"><name pos:start="2237:21" pos:end="2237:36">tcg_gen_ld16u_tl</name><argument_list pos:start="2237:37" pos:end="2239:74">(<argument pos:start="2237:38" pos:end="2237:43"><expr pos:start="2237:38" pos:end="2237:43"><name pos:start="2237:38" pos:end="2237:43">cpu_T0</name></expr></argument>, <argument pos:start="2237:46" pos:end="2237:52"><expr pos:start="2237:46" pos:end="2237:52"><name pos:start="2237:46" pos:end="2237:52">cpu_env</name></expr></argument>, <argument pos:start="2237:55" pos:end="2239:73"><expr pos:start="2237:55" pos:end="2239:73"><call pos:start="2237:55" pos:end="2239:73"><name pos:start="2237:55" pos:end="2237:62">offsetof</name><argument_list pos:start="2237:63" pos:end="2239:73">(<argument pos:start="2237:64" pos:end="2237:74"><expr pos:start="2237:64" pos:end="2237:74"><name pos:start="2237:64" pos:end="2237:74">CPUX86State</name></expr></argument>,

                                            <argument pos:start="2239:45" pos:end="2239:72"><expr pos:start="2239:45" pos:end="2239:72"><name pos:start="2239:45" pos:end="2239:57"><name pos:start="2239:45" pos:end="2239:52">xmm_regs</name><index pos:start="2239:53" pos:end="2239:57">[<expr pos:start="2239:54" pos:end="2239:56"><name pos:start="2239:54" pos:end="2239:56">reg</name></expr>]</index></name><operator pos:start="2239:58" pos:end="2239:58">.</operator><call pos:start="2239:59" pos:end="2239:72"><name pos:start="2239:59" pos:end="2239:63">ZMM_W</name><argument_list pos:start="2239:64" pos:end="2239:72">(<argument pos:start="2239:65" pos:end="2239:71"><expr pos:start="2239:65" pos:end="2239:71"><name pos:start="2239:65" pos:end="2239:67">val</name> <operator pos:start="2239:69" pos:end="2239:69">&amp;</operator> <literal type="number" pos:start="2239:71" pos:end="2239:71">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2241:21" pos:end="2251:21"><if pos:start="2241:21" pos:end="2245:21">if <condition pos:start="2241:24" pos:end="2241:33">(<expr pos:start="2241:25" pos:end="2241:32"><name pos:start="2241:25" pos:end="2241:27">mod</name> <operator pos:start="2241:29" pos:end="2241:30">==</operator> <literal type="number" pos:start="2241:32" pos:end="2241:32">3</literal></expr>)</condition> <block pos:start="2241:35" pos:end="2245:21">{<block_content pos:start="2243:25" pos:end="2243:57">

                        <expr_stmt pos:start="2243:25" pos:end="2243:57"><expr pos:start="2243:25" pos:end="2243:56"><call pos:start="2243:25" pos:end="2243:56"><name pos:start="2243:25" pos:end="2243:40">gen_op_mov_reg_v</name><argument_list pos:start="2243:41" pos:end="2243:56">(<argument pos:start="2243:42" pos:end="2243:43"><expr pos:start="2243:42" pos:end="2243:43"><name pos:start="2243:42" pos:end="2243:43">ot</name></expr></argument>, <argument pos:start="2243:46" pos:end="2243:47"><expr pos:start="2243:46" pos:end="2243:47"><name pos:start="2243:46" pos:end="2243:47">rm</name></expr></argument>, <argument pos:start="2243:50" pos:end="2243:55"><expr pos:start="2243:50" pos:end="2243:55"><name pos:start="2243:50" pos:end="2243:55">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2245:23" pos:end="2251:21">else <block pos:start="2245:28" pos:end="2251:21">{<block_content pos:start="2247:25" pos:end="2249:66">

                        <expr_stmt pos:start="2247:25" pos:end="2249:66"><expr pos:start="2247:25" pos:end="2249:65"><call pos:start="2247:25" pos:end="2249:65"><name pos:start="2247:25" pos:end="2247:42">tcg_gen_qemu_st_tl</name><argument_list pos:start="2247:43" pos:end="2249:65">(<argument pos:start="2247:44" pos:end="2247:49"><expr pos:start="2247:44" pos:end="2247:49"><name pos:start="2247:44" pos:end="2247:49">cpu_T0</name></expr></argument>, <argument pos:start="2247:52" pos:end="2247:57"><expr pos:start="2247:52" pos:end="2247:57"><name pos:start="2247:52" pos:end="2247:57">cpu_A0</name></expr></argument>,

                                           <argument pos:start="2249:44" pos:end="2249:55"><expr pos:start="2249:44" pos:end="2249:55"><name pos:start="2249:44" pos:end="2249:55"><name pos:start="2249:44" pos:end="2249:44">s</name><operator pos:start="2249:45" pos:end="2249:46">-&gt;</operator><name pos:start="2249:47" pos:end="2249:55">mem_index</name></name></expr></argument>, <argument pos:start="2249:58" pos:end="2249:64"><expr pos:start="2249:58" pos:end="2249:64"><name pos:start="2249:58" pos:end="2249:64">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2253:21" pos:end="2253:26">break;</break>

                <case pos:start="2255:17" pos:end="2255:26">case <expr pos:start="2255:22" pos:end="2255:25"><literal type="number" pos:start="2255:22" pos:end="2255:25">0x16</literal></expr>:</case>

                    <if_stmt pos:start="2257:21" pos:end="2305:21"><if pos:start="2257:21" pos:end="2277:21">if <condition pos:start="2257:24" pos:end="2257:36">(<expr pos:start="2257:25" pos:end="2257:35"><name pos:start="2257:25" pos:end="2257:26">ot</name> <operator pos:start="2257:28" pos:end="2257:29">==</operator> <name pos:start="2257:31" pos:end="2257:35">MO_32</name></expr>)</condition> <block pos:start="2257:38" pos:end="2277:21">{<block_content pos:start="2259:25" pos:end="2275:25"> <comment type="block" pos:start="2257:40" pos:end="2257:51">/* pextrd */</comment>

                        <expr_stmt pos:start="2259:25" pos:end="2263:79"><expr pos:start="2259:25" pos:end="2263:78"><call pos:start="2259:25" pos:end="2263:78"><name pos:start="2259:25" pos:end="2259:38">tcg_gen_ld_i32</name><argument_list pos:start="2259:39" pos:end="2263:78">(<argument pos:start="2259:40" pos:end="2259:51"><expr pos:start="2259:40" pos:end="2259:51"><name pos:start="2259:40" pos:end="2259:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2259:54" pos:end="2259:60"><expr pos:start="2259:54" pos:end="2259:60"><name pos:start="2259:54" pos:end="2259:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2261:41" pos:end="2263:77"><expr pos:start="2261:41" pos:end="2263:77"><call pos:start="2261:41" pos:end="2263:77"><name pos:start="2261:41" pos:end="2261:48">offsetof</name><argument_list pos:start="2261:49" pos:end="2263:77">(<argument pos:start="2261:50" pos:end="2261:60"><expr pos:start="2261:50" pos:end="2261:60"><name pos:start="2261:50" pos:end="2261:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2263:49" pos:end="2263:76"><expr pos:start="2263:49" pos:end="2263:76"><name pos:start="2263:49" pos:end="2263:61"><name pos:start="2263:49" pos:end="2263:56">xmm_regs</name><index pos:start="2263:57" pos:end="2263:61">[<expr pos:start="2263:58" pos:end="2263:60"><name pos:start="2263:58" pos:end="2263:60">reg</name></expr>]</index></name><operator pos:start="2263:62" pos:end="2263:62">.</operator><call pos:start="2263:63" pos:end="2263:76"><name pos:start="2263:63" pos:end="2263:67">ZMM_L</name><argument_list pos:start="2263:68" pos:end="2263:76">(<argument pos:start="2263:69" pos:end="2263:75"><expr pos:start="2263:69" pos:end="2263:75"><name pos:start="2263:69" pos:end="2263:71">val</name> <operator pos:start="2263:73" pos:end="2263:73">&amp;</operator> <literal type="number" pos:start="2263:75" pos:end="2263:75">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2265:25" pos:end="2275:25"><if pos:start="2265:25" pos:end="2269:25">if <condition pos:start="2265:28" pos:end="2265:37">(<expr pos:start="2265:29" pos:end="2265:36"><name pos:start="2265:29" pos:end="2265:31">mod</name> <operator pos:start="2265:33" pos:end="2265:34">==</operator> <literal type="number" pos:start="2265:36" pos:end="2265:36">3</literal></expr>)</condition> <block pos:start="2265:39" pos:end="2269:25">{<block_content pos:start="2267:29" pos:end="2267:76">

                            <expr_stmt pos:start="2267:29" pos:end="2267:76"><expr pos:start="2267:29" pos:end="2267:75"><call pos:start="2267:29" pos:end="2267:75"><name pos:start="2267:29" pos:end="2267:47">tcg_gen_extu_i32_tl</name><argument_list pos:start="2267:48" pos:end="2267:75">(<argument pos:start="2267:49" pos:end="2267:60"><expr pos:start="2267:49" pos:end="2267:60"><name pos:start="2267:49" pos:end="2267:60"><name pos:start="2267:49" pos:end="2267:56">cpu_regs</name><index pos:start="2267:57" pos:end="2267:60">[<expr pos:start="2267:58" pos:end="2267:59"><name pos:start="2267:58" pos:end="2267:59">rm</name></expr>]</index></name></expr></argument>, <argument pos:start="2267:63" pos:end="2267:74"><expr pos:start="2267:63" pos:end="2267:74"><name pos:start="2267:63" pos:end="2267:74">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2269:27" pos:end="2275:25">else <block pos:start="2269:32" pos:end="2275:25">{<block_content pos:start="2271:29" pos:end="2273:71">

                            <expr_stmt pos:start="2271:29" pos:end="2273:71"><expr pos:start="2271:29" pos:end="2273:70"><call pos:start="2271:29" pos:end="2273:70"><name pos:start="2271:29" pos:end="2271:47">tcg_gen_qemu_st_i32</name><argument_list pos:start="2271:48" pos:end="2273:70">(<argument pos:start="2271:49" pos:end="2271:60"><expr pos:start="2271:49" pos:end="2271:60"><name pos:start="2271:49" pos:end="2271:60">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2271:63" pos:end="2271:68"><expr pos:start="2271:63" pos:end="2271:68"><name pos:start="2271:63" pos:end="2271:68">cpu_A0</name></expr></argument>,

                                                <argument pos:start="2273:49" pos:end="2273:60"><expr pos:start="2273:49" pos:end="2273:60"><name pos:start="2273:49" pos:end="2273:60"><name pos:start="2273:49" pos:end="2273:49">s</name><operator pos:start="2273:50" pos:end="2273:51">-&gt;</operator><name pos:start="2273:52" pos:end="2273:60">mem_index</name></name></expr></argument>, <argument pos:start="2273:63" pos:end="2273:69"><expr pos:start="2273:63" pos:end="2273:69"><name pos:start="2273:63" pos:end="2273:69">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="2277:23" pos:end="2305:21">else <block pos:start="2277:28" pos:end="2305:21">{<block_content pos:start="2281:25" pos:end="2304:0"> <comment type="block" pos:start="2277:30" pos:end="2277:41">/* pextrq */</comment>

<cpp:ifdef pos:start="2279:1" pos:end="2279:20">#<cpp:directive pos:start="2279:2" pos:end="2279:6">ifdef</cpp:directive> <name pos:start="2279:8" pos:end="2279:20">TARGET_X86_64</name></cpp:ifdef>

                        <expr_stmt pos:start="2281:25" pos:end="2285:79"><expr pos:start="2281:25" pos:end="2285:78"><call pos:start="2281:25" pos:end="2285:78"><name pos:start="2281:25" pos:end="2281:38">tcg_gen_ld_i64</name><argument_list pos:start="2281:39" pos:end="2285:78">(<argument pos:start="2281:40" pos:end="2281:51"><expr pos:start="2281:40" pos:end="2281:51"><name pos:start="2281:40" pos:end="2281:51">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2281:54" pos:end="2281:60"><expr pos:start="2281:54" pos:end="2281:60"><name pos:start="2281:54" pos:end="2281:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2283:41" pos:end="2285:77"><expr pos:start="2283:41" pos:end="2285:77"><call pos:start="2283:41" pos:end="2285:77"><name pos:start="2283:41" pos:end="2283:48">offsetof</name><argument_list pos:start="2283:49" pos:end="2285:77">(<argument pos:start="2283:50" pos:end="2283:60"><expr pos:start="2283:50" pos:end="2283:60"><name pos:start="2283:50" pos:end="2283:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2285:49" pos:end="2285:76"><expr pos:start="2285:49" pos:end="2285:76"><name pos:start="2285:49" pos:end="2285:61"><name pos:start="2285:49" pos:end="2285:56">xmm_regs</name><index pos:start="2285:57" pos:end="2285:61">[<expr pos:start="2285:58" pos:end="2285:60"><name pos:start="2285:58" pos:end="2285:60">reg</name></expr>]</index></name><operator pos:start="2285:62" pos:end="2285:62">.</operator><call pos:start="2285:63" pos:end="2285:76"><name pos:start="2285:63" pos:end="2285:67">ZMM_Q</name><argument_list pos:start="2285:68" pos:end="2285:76">(<argument pos:start="2285:69" pos:end="2285:75"><expr pos:start="2285:69" pos:end="2285:75"><name pos:start="2285:69" pos:end="2285:71">val</name> <operator pos:start="2285:73" pos:end="2285:73">&amp;</operator> <literal type="number" pos:start="2285:75" pos:end="2285:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2287:25" pos:end="2300:0"><if pos:start="2287:25" pos:end="2291:25">if <condition pos:start="2287:28" pos:end="2287:37">(<expr pos:start="2287:29" pos:end="2287:36"><name pos:start="2287:29" pos:end="2287:31">mod</name> <operator pos:start="2287:33" pos:end="2287:34">==</operator> <literal type="number" pos:start="2287:36" pos:end="2287:36">3</literal></expr>)</condition> <block pos:start="2287:39" pos:end="2291:25">{<block_content pos:start="2289:29" pos:end="2289:72">

                            <expr_stmt pos:start="2289:29" pos:end="2289:72"><expr pos:start="2289:29" pos:end="2289:71"><call pos:start="2289:29" pos:end="2289:71"><name pos:start="2289:29" pos:end="2289:43">tcg_gen_mov_i64</name><argument_list pos:start="2289:44" pos:end="2289:71">(<argument pos:start="2289:45" pos:end="2289:56"><expr pos:start="2289:45" pos:end="2289:56"><name pos:start="2289:45" pos:end="2289:56"><name pos:start="2289:45" pos:end="2289:52">cpu_regs</name><index pos:start="2289:53" pos:end="2289:56">[<expr pos:start="2289:54" pos:end="2289:55"><name pos:start="2289:54" pos:end="2289:55">rm</name></expr>]</index></name></expr></argument>, <argument pos:start="2289:59" pos:end="2289:70"><expr pos:start="2289:59" pos:end="2289:70"><name pos:start="2289:59" pos:end="2289:70">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2291:27" pos:end="2300:0">else <block pos:start="2291:32" pos:end="2300:0">{<block_content pos:start="2293:29" pos:end="2295:70">

                            <expr_stmt pos:start="2293:29" pos:end="2295:70"><expr pos:start="2293:29" pos:end="2295:69"><call pos:start="2293:29" pos:end="2295:69"><name pos:start="2293:29" pos:end="2293:47">tcg_gen_qemu_st_i64</name><argument_list pos:start="2293:48" pos:end="2295:69">(<argument pos:start="2293:49" pos:end="2293:60"><expr pos:start="2293:49" pos:end="2293:60"><name pos:start="2293:49" pos:end="2293:60">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2293:63" pos:end="2293:68"><expr pos:start="2293:63" pos:end="2293:68"><name pos:start="2293:63" pos:end="2293:68">cpu_A0</name></expr></argument>,

                                                <argument pos:start="2295:49" pos:end="2295:60"><expr pos:start="2295:49" pos:end="2295:60"><name pos:start="2295:49" pos:end="2295:60"><name pos:start="2295:49" pos:end="2295:49">s</name><operator pos:start="2295:50" pos:end="2295:51">-&gt;</operator><name pos:start="2295:52" pos:end="2295:60">mem_index</name></name></expr></argument>, <argument pos:start="2295:63" pos:end="2295:68"><expr pos:start="2295:63" pos:end="2295:68"><name pos:start="2295:63" pos:end="2295:68">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

<cpp:else pos:start="2299:1" pos:end="2299:5">#<cpp:directive pos:start="2299:2" pos:end="2299:5">else</cpp:directive></cpp:else>

                        <goto pos:start="2301:25" pos:end="2304:0">goto <name pos:start="2301:30" pos:end="2301:39">illegal_op</name>;</goto>

<cpp:endif pos:start="2303:1" pos:end="2303:6">#<cpp:directive pos:start="2303:2" pos:end="2303:6">endif</cpp:directive></cpp:endif>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2307:21" pos:end="2307:26">break;</break>

                <case pos:start="2309:17" pos:end="2309:26">case <expr pos:start="2309:22" pos:end="2309:25"><literal type="number" pos:start="2309:22" pos:end="2309:25">0x17</literal></expr>:</case> <comment type="block" pos:start="2309:28" pos:end="2309:42">/* extractps */</comment>

                    <expr_stmt pos:start="2311:21" pos:end="2313:75"><expr pos:start="2311:21" pos:end="2313:74"><call pos:start="2311:21" pos:end="2313:74"><name pos:start="2311:21" pos:end="2311:36">tcg_gen_ld32u_tl</name><argument_list pos:start="2311:37" pos:end="2313:74">(<argument pos:start="2311:38" pos:end="2311:43"><expr pos:start="2311:38" pos:end="2311:43"><name pos:start="2311:38" pos:end="2311:43">cpu_T0</name></expr></argument>, <argument pos:start="2311:46" pos:end="2311:52"><expr pos:start="2311:46" pos:end="2311:52"><name pos:start="2311:46" pos:end="2311:52">cpu_env</name></expr></argument>, <argument pos:start="2311:55" pos:end="2313:73"><expr pos:start="2311:55" pos:end="2313:73"><call pos:start="2311:55" pos:end="2313:73"><name pos:start="2311:55" pos:end="2311:62">offsetof</name><argument_list pos:start="2311:63" pos:end="2313:73">(<argument pos:start="2311:64" pos:end="2311:74"><expr pos:start="2311:64" pos:end="2311:74"><name pos:start="2311:64" pos:end="2311:74">CPUX86State</name></expr></argument>,

                                            <argument pos:start="2313:45" pos:end="2313:72"><expr pos:start="2313:45" pos:end="2313:72"><name pos:start="2313:45" pos:end="2313:57"><name pos:start="2313:45" pos:end="2313:52">xmm_regs</name><index pos:start="2313:53" pos:end="2313:57">[<expr pos:start="2313:54" pos:end="2313:56"><name pos:start="2313:54" pos:end="2313:56">reg</name></expr>]</index></name><operator pos:start="2313:58" pos:end="2313:58">.</operator><call pos:start="2313:59" pos:end="2313:72"><name pos:start="2313:59" pos:end="2313:63">ZMM_L</name><argument_list pos:start="2313:64" pos:end="2313:72">(<argument pos:start="2313:65" pos:end="2313:71"><expr pos:start="2313:65" pos:end="2313:71"><name pos:start="2313:65" pos:end="2313:67">val</name> <operator pos:start="2313:69" pos:end="2313:69">&amp;</operator> <literal type="number" pos:start="2313:71" pos:end="2313:71">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2315:21" pos:end="2325:21"><if pos:start="2315:21" pos:end="2319:21">if <condition pos:start="2315:24" pos:end="2315:33">(<expr pos:start="2315:25" pos:end="2315:32"><name pos:start="2315:25" pos:end="2315:27">mod</name> <operator pos:start="2315:29" pos:end="2315:30">==</operator> <literal type="number" pos:start="2315:32" pos:end="2315:32">3</literal></expr>)</condition> <block pos:start="2315:35" pos:end="2319:21">{<block_content pos:start="2317:25" pos:end="2317:57">

                        <expr_stmt pos:start="2317:25" pos:end="2317:57"><expr pos:start="2317:25" pos:end="2317:56"><call pos:start="2317:25" pos:end="2317:56"><name pos:start="2317:25" pos:end="2317:40">gen_op_mov_reg_v</name><argument_list pos:start="2317:41" pos:end="2317:56">(<argument pos:start="2317:42" pos:end="2317:43"><expr pos:start="2317:42" pos:end="2317:43"><name pos:start="2317:42" pos:end="2317:43">ot</name></expr></argument>, <argument pos:start="2317:46" pos:end="2317:47"><expr pos:start="2317:46" pos:end="2317:47"><name pos:start="2317:46" pos:end="2317:47">rm</name></expr></argument>, <argument pos:start="2317:50" pos:end="2317:55"><expr pos:start="2317:50" pos:end="2317:55"><name pos:start="2317:50" pos:end="2317:55">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2319:23" pos:end="2325:21">else <block pos:start="2319:28" pos:end="2325:21">{<block_content pos:start="2321:25" pos:end="2323:66">

                        <expr_stmt pos:start="2321:25" pos:end="2323:66"><expr pos:start="2321:25" pos:end="2323:65"><call pos:start="2321:25" pos:end="2323:65"><name pos:start="2321:25" pos:end="2321:42">tcg_gen_qemu_st_tl</name><argument_list pos:start="2321:43" pos:end="2323:65">(<argument pos:start="2321:44" pos:end="2321:49"><expr pos:start="2321:44" pos:end="2321:49"><name pos:start="2321:44" pos:end="2321:49">cpu_T0</name></expr></argument>, <argument pos:start="2321:52" pos:end="2321:57"><expr pos:start="2321:52" pos:end="2321:57"><name pos:start="2321:52" pos:end="2321:57">cpu_A0</name></expr></argument>,

                                           <argument pos:start="2323:44" pos:end="2323:55"><expr pos:start="2323:44" pos:end="2323:55"><name pos:start="2323:44" pos:end="2323:55"><name pos:start="2323:44" pos:end="2323:44">s</name><operator pos:start="2323:45" pos:end="2323:46">-&gt;</operator><name pos:start="2323:47" pos:end="2323:55">mem_index</name></name></expr></argument>, <argument pos:start="2323:58" pos:end="2323:64"><expr pos:start="2323:58" pos:end="2323:64"><name pos:start="2323:58" pos:end="2323:64">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2327:21" pos:end="2327:26">break;</break>

                <case pos:start="2329:17" pos:end="2329:26">case <expr pos:start="2329:22" pos:end="2329:25"><literal type="number" pos:start="2329:22" pos:end="2329:25">0x20</literal></expr>:</case> <comment type="block" pos:start="2329:28" pos:end="2329:39">/* pinsrb */</comment>

                    <if_stmt pos:start="2331:21" pos:end="2341:21"><if pos:start="2331:21" pos:end="2335:21">if <condition pos:start="2331:24" pos:end="2331:33">(<expr pos:start="2331:25" pos:end="2331:32"><name pos:start="2331:25" pos:end="2331:27">mod</name> <operator pos:start="2331:29" pos:end="2331:30">==</operator> <literal type="number" pos:start="2331:32" pos:end="2331:32">3</literal></expr>)</condition> <block pos:start="2331:35" pos:end="2335:21">{<block_content pos:start="2333:25" pos:end="2333:60">

                        <expr_stmt pos:start="2333:25" pos:end="2333:60"><expr pos:start="2333:25" pos:end="2333:59"><call pos:start="2333:25" pos:end="2333:59"><name pos:start="2333:25" pos:end="2333:40">gen_op_mov_v_reg</name><argument_list pos:start="2333:41" pos:end="2333:59">(<argument pos:start="2333:42" pos:end="2333:46"><expr pos:start="2333:42" pos:end="2333:46"><name pos:start="2333:42" pos:end="2333:46">MO_32</name></expr></argument>, <argument pos:start="2333:49" pos:end="2333:54"><expr pos:start="2333:49" pos:end="2333:54"><name pos:start="2333:49" pos:end="2333:54">cpu_T0</name></expr></argument>, <argument pos:start="2333:57" pos:end="2333:58"><expr pos:start="2333:57" pos:end="2333:58"><name pos:start="2333:57" pos:end="2333:58">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2335:23" pos:end="2341:21">else <block pos:start="2335:28" pos:end="2341:21">{<block_content pos:start="2337:25" pos:end="2339:64">

                        <expr_stmt pos:start="2337:25" pos:end="2339:64"><expr pos:start="2337:25" pos:end="2339:63"><call pos:start="2337:25" pos:end="2339:63"><name pos:start="2337:25" pos:end="2337:42">tcg_gen_qemu_ld_tl</name><argument_list pos:start="2337:43" pos:end="2339:63">(<argument pos:start="2337:44" pos:end="2337:49"><expr pos:start="2337:44" pos:end="2337:49"><name pos:start="2337:44" pos:end="2337:49">cpu_T0</name></expr></argument>, <argument pos:start="2337:52" pos:end="2337:57"><expr pos:start="2337:52" pos:end="2337:57"><name pos:start="2337:52" pos:end="2337:57">cpu_A0</name></expr></argument>,

                                           <argument pos:start="2339:44" pos:end="2339:55"><expr pos:start="2339:44" pos:end="2339:55"><name pos:start="2339:44" pos:end="2339:55"><name pos:start="2339:44" pos:end="2339:44">s</name><operator pos:start="2339:45" pos:end="2339:46">-&gt;</operator><name pos:start="2339:47" pos:end="2339:55">mem_index</name></name></expr></argument>, <argument pos:start="2339:58" pos:end="2339:62"><expr pos:start="2339:58" pos:end="2339:62"><name pos:start="2339:58" pos:end="2339:62">MO_UB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2343:21" pos:end="2345:76"><expr pos:start="2343:21" pos:end="2345:75"><call pos:start="2343:21" pos:end="2345:75"><name pos:start="2343:21" pos:end="2343:34">tcg_gen_st8_tl</name><argument_list pos:start="2343:35" pos:end="2345:75">(<argument pos:start="2343:36" pos:end="2343:41"><expr pos:start="2343:36" pos:end="2343:41"><name pos:start="2343:36" pos:end="2343:41">cpu_T0</name></expr></argument>, <argument pos:start="2343:44" pos:end="2343:50"><expr pos:start="2343:44" pos:end="2343:50"><name pos:start="2343:44" pos:end="2343:50">cpu_env</name></expr></argument>, <argument pos:start="2343:53" pos:end="2345:74"><expr pos:start="2343:53" pos:end="2345:74"><call pos:start="2343:53" pos:end="2345:74"><name pos:start="2343:53" pos:end="2343:60">offsetof</name><argument_list pos:start="2343:61" pos:end="2345:74">(<argument pos:start="2343:62" pos:end="2343:72"><expr pos:start="2343:62" pos:end="2343:72"><name pos:start="2343:62" pos:end="2343:72">CPUX86State</name></expr></argument>,

                                            <argument pos:start="2345:45" pos:end="2345:73"><expr pos:start="2345:45" pos:end="2345:73"><name pos:start="2345:45" pos:end="2345:57"><name pos:start="2345:45" pos:end="2345:52">xmm_regs</name><index pos:start="2345:53" pos:end="2345:57">[<expr pos:start="2345:54" pos:end="2345:56"><name pos:start="2345:54" pos:end="2345:56">reg</name></expr>]</index></name><operator pos:start="2345:58" pos:end="2345:58">.</operator><call pos:start="2345:59" pos:end="2345:73"><name pos:start="2345:59" pos:end="2345:63">ZMM_B</name><argument_list pos:start="2345:64" pos:end="2345:73">(<argument pos:start="2345:65" pos:end="2345:72"><expr pos:start="2345:65" pos:end="2345:72"><name pos:start="2345:65" pos:end="2345:67">val</name> <operator pos:start="2345:69" pos:end="2345:69">&amp;</operator> <literal type="number" pos:start="2345:71" pos:end="2345:72">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2347:21" pos:end="2347:26">break;</break>

                <case pos:start="2349:17" pos:end="2349:26">case <expr pos:start="2349:22" pos:end="2349:25"><literal type="number" pos:start="2349:22" pos:end="2349:25">0x21</literal></expr>:</case> <comment type="block" pos:start="2349:28" pos:end="2349:41">/* insertps */</comment>

                    <if_stmt pos:start="2351:21" pos:end="2365:21"><if pos:start="2351:21" pos:end="2359:21">if <condition pos:start="2351:24" pos:end="2351:33">(<expr pos:start="2351:25" pos:end="2351:32"><name pos:start="2351:25" pos:end="2351:27">mod</name> <operator pos:start="2351:29" pos:end="2351:30">==</operator> <literal type="number" pos:start="2351:32" pos:end="2351:32">3</literal></expr>)</condition> <block pos:start="2351:35" pos:end="2359:21">{<block_content pos:start="2353:25" pos:end="2357:73">

                        <expr_stmt pos:start="2353:25" pos:end="2357:73"><expr pos:start="2353:25" pos:end="2357:72"><call pos:start="2353:25" pos:end="2357:72"><name pos:start="2353:25" pos:end="2353:38">tcg_gen_ld_i32</name><argument_list pos:start="2353:39" pos:end="2357:72">(<argument pos:start="2353:40" pos:end="2353:51"><expr pos:start="2353:40" pos:end="2353:51"><name pos:start="2353:40" pos:end="2353:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2353:54" pos:end="2353:60"><expr pos:start="2353:54" pos:end="2353:60"><name pos:start="2353:54" pos:end="2353:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2355:41" pos:end="2357:71"><expr pos:start="2355:41" pos:end="2357:71"><call pos:start="2355:41" pos:end="2357:71"><name pos:start="2355:41" pos:end="2355:48">offsetof</name><argument_list pos:start="2355:49" pos:end="2357:71">(<argument pos:start="2355:50" pos:end="2355:60"><expr pos:start="2355:50" pos:end="2355:60"><name pos:start="2355:50" pos:end="2355:60">CPUX86State</name></expr></argument>,<argument pos:start="2355:62" pos:end="2357:70"><expr pos:start="2355:62" pos:end="2357:70"><name pos:start="2355:62" pos:end="2355:73"><name pos:start="2355:62" pos:end="2355:69">xmm_regs</name><index pos:start="2355:70" pos:end="2355:73">[<expr pos:start="2355:71" pos:end="2355:72"><name pos:start="2355:71" pos:end="2355:72">rm</name></expr>]</index></name>

                                                <operator pos:start="2357:49" pos:end="2357:49">.</operator><call pos:start="2357:50" pos:end="2357:70"><name pos:start="2357:50" pos:end="2357:54">ZMM_L</name><argument_list pos:start="2357:55" pos:end="2357:70">(<argument pos:start="2357:56" pos:end="2357:69"><expr pos:start="2357:56" pos:end="2357:69"><operator pos:start="2357:56" pos:end="2357:56">(</operator><name pos:start="2357:57" pos:end="2357:59">val</name> <operator pos:start="2357:61" pos:end="2357:62">&gt;&gt;</operator> <literal type="number" pos:start="2357:64" pos:end="2357:64">6</literal><operator pos:start="2357:65" pos:end="2357:65">)</operator> <operator pos:start="2357:67" pos:end="2357:67">&amp;</operator> <literal type="number" pos:start="2357:69" pos:end="2357:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2359:23" pos:end="2365:21">else <block pos:start="2359:28" pos:end="2365:21">{<block_content pos:start="2361:25" pos:end="2363:67">

                        <expr_stmt pos:start="2361:25" pos:end="2363:67"><expr pos:start="2361:25" pos:end="2363:66"><call pos:start="2361:25" pos:end="2363:66"><name pos:start="2361:25" pos:end="2361:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2361:44" pos:end="2363:66">(<argument pos:start="2361:45" pos:end="2361:56"><expr pos:start="2361:45" pos:end="2361:56"><name pos:start="2361:45" pos:end="2361:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2361:59" pos:end="2361:64"><expr pos:start="2361:59" pos:end="2361:64"><name pos:start="2361:59" pos:end="2361:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2363:45" pos:end="2363:56"><expr pos:start="2363:45" pos:end="2363:56"><name pos:start="2363:45" pos:end="2363:56"><name pos:start="2363:45" pos:end="2363:45">s</name><operator pos:start="2363:46" pos:end="2363:47">-&gt;</operator><name pos:start="2363:48" pos:end="2363:56">mem_index</name></name></expr></argument>, <argument pos:start="2363:59" pos:end="2363:65"><expr pos:start="2363:59" pos:end="2363:65"><name pos:start="2363:59" pos:end="2363:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2367:21" pos:end="2371:69"><expr pos:start="2367:21" pos:end="2371:68"><call pos:start="2367:21" pos:end="2371:68"><name pos:start="2367:21" pos:end="2367:34">tcg_gen_st_i32</name><argument_list pos:start="2367:35" pos:end="2371:68">(<argument pos:start="2367:36" pos:end="2367:47"><expr pos:start="2367:36" pos:end="2367:47"><name pos:start="2367:36" pos:end="2367:47">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2367:50" pos:end="2367:56"><expr pos:start="2367:50" pos:end="2367:56"><name pos:start="2367:50" pos:end="2367:56">cpu_env</name></expr></argument>,

                                    <argument pos:start="2369:37" pos:end="2371:67"><expr pos:start="2369:37" pos:end="2371:67"><call pos:start="2369:37" pos:end="2371:67"><name pos:start="2369:37" pos:end="2369:44">offsetof</name><argument_list pos:start="2369:45" pos:end="2371:67">(<argument pos:start="2369:46" pos:end="2369:56"><expr pos:start="2369:46" pos:end="2369:56"><name pos:start="2369:46" pos:end="2369:56">CPUX86State</name></expr></argument>,<argument pos:start="2369:58" pos:end="2371:66"><expr pos:start="2369:58" pos:end="2371:66"><name pos:start="2369:58" pos:end="2369:70"><name pos:start="2369:58" pos:end="2369:65">xmm_regs</name><index pos:start="2369:66" pos:end="2369:70">[<expr pos:start="2369:67" pos:end="2369:69"><name pos:start="2369:67" pos:end="2369:69">reg</name></expr>]</index></name>

                                            <operator pos:start="2371:45" pos:end="2371:45">.</operator><call pos:start="2371:46" pos:end="2371:66"><name pos:start="2371:46" pos:end="2371:50">ZMM_L</name><argument_list pos:start="2371:51" pos:end="2371:66">(<argument pos:start="2371:52" pos:end="2371:65"><expr pos:start="2371:52" pos:end="2371:65"><operator pos:start="2371:52" pos:end="2371:52">(</operator><name pos:start="2371:53" pos:end="2371:55">val</name> <operator pos:start="2371:57" pos:end="2371:58">&gt;&gt;</operator> <literal type="number" pos:start="2371:60" pos:end="2371:60">4</literal><operator pos:start="2371:61" pos:end="2371:61">)</operator> <operator pos:start="2371:63" pos:end="2371:63">&amp;</operator> <literal type="number" pos:start="2371:65" pos:end="2371:65">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2373:21" pos:end="2379:73"><if pos:start="2373:21" pos:end="2379:73">if <condition pos:start="2373:24" pos:end="2373:39">(<expr pos:start="2373:25" pos:end="2373:38"><operator pos:start="2373:25" pos:end="2373:25">(</operator><name pos:start="2373:26" pos:end="2373:28">val</name> <operator pos:start="2373:30" pos:end="2373:31">&gt;&gt;</operator> <literal type="number" pos:start="2373:33" pos:end="2373:33">0</literal><operator pos:start="2373:34" pos:end="2373:34">)</operator> <operator pos:start="2373:36" pos:end="2373:36">&amp;</operator> <literal type="number" pos:start="2373:38" pos:end="2373:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2375:25" pos:end="2379:73"><block_content pos:start="2375:25" pos:end="2379:73">

                        <expr_stmt pos:start="2375:25" pos:end="2379:73"><expr pos:start="2375:25" pos:end="2379:72"><call pos:start="2375:25" pos:end="2379:72"><name pos:start="2375:25" pos:end="2375:38">tcg_gen_st_i32</name><argument_list pos:start="2375:39" pos:end="2379:72">(<argument pos:start="2375:40" pos:end="2375:72"><expr pos:start="2375:40" pos:end="2375:72"><call pos:start="2375:40" pos:end="2375:72"><name pos:start="2375:40" pos:end="2375:52">tcg_const_i32</name><argument_list pos:start="2375:53" pos:end="2375:72">(<argument pos:start="2375:54" pos:end="2375:54"><expr pos:start="2375:54" pos:end="2375:54"><literal type="number" pos:start="2375:54" pos:end="2375:54">0</literal></expr></argument> <comment type="block" pos:start="2375:56" pos:end="2375:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2377:41" pos:end="2377:47"><expr pos:start="2377:41" pos:end="2377:47"><name pos:start="2377:41" pos:end="2377:47">cpu_env</name></expr></argument>, <argument pos:start="2377:50" pos:end="2379:71"><expr pos:start="2377:50" pos:end="2379:71"><call pos:start="2377:50" pos:end="2379:71"><name pos:start="2377:50" pos:end="2377:57">offsetof</name><argument_list pos:start="2377:58" pos:end="2379:71">(<argument pos:start="2377:59" pos:end="2377:69"><expr pos:start="2377:59" pos:end="2377:69"><name pos:start="2377:59" pos:end="2377:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2379:49" pos:end="2379:70"><expr pos:start="2379:49" pos:end="2379:70"><name pos:start="2379:49" pos:end="2379:61"><name pos:start="2379:49" pos:end="2379:56">xmm_regs</name><index pos:start="2379:57" pos:end="2379:61">[<expr pos:start="2379:58" pos:end="2379:60"><name pos:start="2379:58" pos:end="2379:60">reg</name></expr>]</index></name><operator pos:start="2379:62" pos:end="2379:62">.</operator><call pos:start="2379:63" pos:end="2379:70"><name pos:start="2379:63" pos:end="2379:67">ZMM_L</name><argument_list pos:start="2379:68" pos:end="2379:70">(<argument pos:start="2379:69" pos:end="2379:69"><expr pos:start="2379:69" pos:end="2379:69"><literal type="number" pos:start="2379:69" pos:end="2379:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="2381:21" pos:end="2387:73"><if pos:start="2381:21" pos:end="2387:73">if <condition pos:start="2381:24" pos:end="2381:39">(<expr pos:start="2381:25" pos:end="2381:38"><operator pos:start="2381:25" pos:end="2381:25">(</operator><name pos:start="2381:26" pos:end="2381:28">val</name> <operator pos:start="2381:30" pos:end="2381:31">&gt;&gt;</operator> <literal type="number" pos:start="2381:33" pos:end="2381:33">1</literal><operator pos:start="2381:34" pos:end="2381:34">)</operator> <operator pos:start="2381:36" pos:end="2381:36">&amp;</operator> <literal type="number" pos:start="2381:38" pos:end="2381:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2383:25" pos:end="2387:73"><block_content pos:start="2383:25" pos:end="2387:73">

                        <expr_stmt pos:start="2383:25" pos:end="2387:73"><expr pos:start="2383:25" pos:end="2387:72"><call pos:start="2383:25" pos:end="2387:72"><name pos:start="2383:25" pos:end="2383:38">tcg_gen_st_i32</name><argument_list pos:start="2383:39" pos:end="2387:72">(<argument pos:start="2383:40" pos:end="2383:72"><expr pos:start="2383:40" pos:end="2383:72"><call pos:start="2383:40" pos:end="2383:72"><name pos:start="2383:40" pos:end="2383:52">tcg_const_i32</name><argument_list pos:start="2383:53" pos:end="2383:72">(<argument pos:start="2383:54" pos:end="2383:54"><expr pos:start="2383:54" pos:end="2383:54"><literal type="number" pos:start="2383:54" pos:end="2383:54">0</literal></expr></argument> <comment type="block" pos:start="2383:56" pos:end="2383:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2385:41" pos:end="2385:47"><expr pos:start="2385:41" pos:end="2385:47"><name pos:start="2385:41" pos:end="2385:47">cpu_env</name></expr></argument>, <argument pos:start="2385:50" pos:end="2387:71"><expr pos:start="2385:50" pos:end="2387:71"><call pos:start="2385:50" pos:end="2387:71"><name pos:start="2385:50" pos:end="2385:57">offsetof</name><argument_list pos:start="2385:58" pos:end="2387:71">(<argument pos:start="2385:59" pos:end="2385:69"><expr pos:start="2385:59" pos:end="2385:69"><name pos:start="2385:59" pos:end="2385:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2387:49" pos:end="2387:70"><expr pos:start="2387:49" pos:end="2387:70"><name pos:start="2387:49" pos:end="2387:61"><name pos:start="2387:49" pos:end="2387:56">xmm_regs</name><index pos:start="2387:57" pos:end="2387:61">[<expr pos:start="2387:58" pos:end="2387:60"><name pos:start="2387:58" pos:end="2387:60">reg</name></expr>]</index></name><operator pos:start="2387:62" pos:end="2387:62">.</operator><call pos:start="2387:63" pos:end="2387:70"><name pos:start="2387:63" pos:end="2387:67">ZMM_L</name><argument_list pos:start="2387:68" pos:end="2387:70">(<argument pos:start="2387:69" pos:end="2387:69"><expr pos:start="2387:69" pos:end="2387:69"><literal type="number" pos:start="2387:69" pos:end="2387:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="2389:21" pos:end="2395:73"><if pos:start="2389:21" pos:end="2395:73">if <condition pos:start="2389:24" pos:end="2389:39">(<expr pos:start="2389:25" pos:end="2389:38"><operator pos:start="2389:25" pos:end="2389:25">(</operator><name pos:start="2389:26" pos:end="2389:28">val</name> <operator pos:start="2389:30" pos:end="2389:31">&gt;&gt;</operator> <literal type="number" pos:start="2389:33" pos:end="2389:33">2</literal><operator pos:start="2389:34" pos:end="2389:34">)</operator> <operator pos:start="2389:36" pos:end="2389:36">&amp;</operator> <literal type="number" pos:start="2389:38" pos:end="2389:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2391:25" pos:end="2395:73"><block_content pos:start="2391:25" pos:end="2395:73">

                        <expr_stmt pos:start="2391:25" pos:end="2395:73"><expr pos:start="2391:25" pos:end="2395:72"><call pos:start="2391:25" pos:end="2395:72"><name pos:start="2391:25" pos:end="2391:38">tcg_gen_st_i32</name><argument_list pos:start="2391:39" pos:end="2395:72">(<argument pos:start="2391:40" pos:end="2391:72"><expr pos:start="2391:40" pos:end="2391:72"><call pos:start="2391:40" pos:end="2391:72"><name pos:start="2391:40" pos:end="2391:52">tcg_const_i32</name><argument_list pos:start="2391:53" pos:end="2391:72">(<argument pos:start="2391:54" pos:end="2391:54"><expr pos:start="2391:54" pos:end="2391:54"><literal type="number" pos:start="2391:54" pos:end="2391:54">0</literal></expr></argument> <comment type="block" pos:start="2391:56" pos:end="2391:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2393:41" pos:end="2393:47"><expr pos:start="2393:41" pos:end="2393:47"><name pos:start="2393:41" pos:end="2393:47">cpu_env</name></expr></argument>, <argument pos:start="2393:50" pos:end="2395:71"><expr pos:start="2393:50" pos:end="2395:71"><call pos:start="2393:50" pos:end="2395:71"><name pos:start="2393:50" pos:end="2393:57">offsetof</name><argument_list pos:start="2393:58" pos:end="2395:71">(<argument pos:start="2393:59" pos:end="2393:69"><expr pos:start="2393:59" pos:end="2393:69"><name pos:start="2393:59" pos:end="2393:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2395:49" pos:end="2395:70"><expr pos:start="2395:49" pos:end="2395:70"><name pos:start="2395:49" pos:end="2395:61"><name pos:start="2395:49" pos:end="2395:56">xmm_regs</name><index pos:start="2395:57" pos:end="2395:61">[<expr pos:start="2395:58" pos:end="2395:60"><name pos:start="2395:58" pos:end="2395:60">reg</name></expr>]</index></name><operator pos:start="2395:62" pos:end="2395:62">.</operator><call pos:start="2395:63" pos:end="2395:70"><name pos:start="2395:63" pos:end="2395:67">ZMM_L</name><argument_list pos:start="2395:68" pos:end="2395:70">(<argument pos:start="2395:69" pos:end="2395:69"><expr pos:start="2395:69" pos:end="2395:69"><literal type="number" pos:start="2395:69" pos:end="2395:69">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="2397:21" pos:end="2403:73"><if pos:start="2397:21" pos:end="2403:73">if <condition pos:start="2397:24" pos:end="2397:39">(<expr pos:start="2397:25" pos:end="2397:38"><operator pos:start="2397:25" pos:end="2397:25">(</operator><name pos:start="2397:26" pos:end="2397:28">val</name> <operator pos:start="2397:30" pos:end="2397:31">&gt;&gt;</operator> <literal type="number" pos:start="2397:33" pos:end="2397:33">3</literal><operator pos:start="2397:34" pos:end="2397:34">)</operator> <operator pos:start="2397:36" pos:end="2397:36">&amp;</operator> <literal type="number" pos:start="2397:38" pos:end="2397:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2399:25" pos:end="2403:73"><block_content pos:start="2399:25" pos:end="2403:73">

                        <expr_stmt pos:start="2399:25" pos:end="2403:73"><expr pos:start="2399:25" pos:end="2403:72"><call pos:start="2399:25" pos:end="2403:72"><name pos:start="2399:25" pos:end="2399:38">tcg_gen_st_i32</name><argument_list pos:start="2399:39" pos:end="2403:72">(<argument pos:start="2399:40" pos:end="2399:72"><expr pos:start="2399:40" pos:end="2399:72"><call pos:start="2399:40" pos:end="2399:72"><name pos:start="2399:40" pos:end="2399:52">tcg_const_i32</name><argument_list pos:start="2399:53" pos:end="2399:72">(<argument pos:start="2399:54" pos:end="2399:54"><expr pos:start="2399:54" pos:end="2399:54"><literal type="number" pos:start="2399:54" pos:end="2399:54">0</literal></expr></argument> <comment type="block" pos:start="2399:56" pos:end="2399:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2401:41" pos:end="2401:47"><expr pos:start="2401:41" pos:end="2401:47"><name pos:start="2401:41" pos:end="2401:47">cpu_env</name></expr></argument>, <argument pos:start="2401:50" pos:end="2403:71"><expr pos:start="2401:50" pos:end="2403:71"><call pos:start="2401:50" pos:end="2403:71"><name pos:start="2401:50" pos:end="2401:57">offsetof</name><argument_list pos:start="2401:58" pos:end="2403:71">(<argument pos:start="2401:59" pos:end="2401:69"><expr pos:start="2401:59" pos:end="2401:69"><name pos:start="2401:59" pos:end="2401:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2403:49" pos:end="2403:70"><expr pos:start="2403:49" pos:end="2403:70"><name pos:start="2403:49" pos:end="2403:61"><name pos:start="2403:49" pos:end="2403:56">xmm_regs</name><index pos:start="2403:57" pos:end="2403:61">[<expr pos:start="2403:58" pos:end="2403:60"><name pos:start="2403:58" pos:end="2403:60">reg</name></expr>]</index></name><operator pos:start="2403:62" pos:end="2403:62">.</operator><call pos:start="2403:63" pos:end="2403:70"><name pos:start="2403:63" pos:end="2403:67">ZMM_L</name><argument_list pos:start="2403:68" pos:end="2403:70">(<argument pos:start="2403:69" pos:end="2403:69"><expr pos:start="2403:69" pos:end="2403:69"><literal type="number" pos:start="2403:69" pos:end="2403:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="2405:21" pos:end="2405:26">break;</break>

                <case pos:start="2407:17" pos:end="2407:26">case <expr pos:start="2407:22" pos:end="2407:25"><literal type="number" pos:start="2407:22" pos:end="2407:25">0x22</literal></expr>:</case>

                    <if_stmt pos:start="2409:21" pos:end="2457:21"><if pos:start="2409:21" pos:end="2429:21">if <condition pos:start="2409:24" pos:end="2409:36">(<expr pos:start="2409:25" pos:end="2409:35"><name pos:start="2409:25" pos:end="2409:26">ot</name> <operator pos:start="2409:28" pos:end="2409:29">==</operator> <name pos:start="2409:31" pos:end="2409:35">MO_32</name></expr>)</condition> <block pos:start="2409:38" pos:end="2429:21">{<block_content pos:start="2411:25" pos:end="2427:79"> <comment type="block" pos:start="2409:40" pos:end="2409:51">/* pinsrd */</comment>

                        <if_stmt pos:start="2411:25" pos:end="2421:25"><if pos:start="2411:25" pos:end="2415:25">if <condition pos:start="2411:28" pos:end="2411:37">(<expr pos:start="2411:29" pos:end="2411:36"><name pos:start="2411:29" pos:end="2411:31">mod</name> <operator pos:start="2411:33" pos:end="2411:34">==</operator> <literal type="number" pos:start="2411:36" pos:end="2411:36">3</literal></expr>)</condition> <block pos:start="2411:39" pos:end="2415:25">{<block_content pos:start="2413:29" pos:end="2413:77">

                            <expr_stmt pos:start="2413:29" pos:end="2413:77"><expr pos:start="2413:29" pos:end="2413:76"><call pos:start="2413:29" pos:end="2413:76"><name pos:start="2413:29" pos:end="2413:48">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2413:49" pos:end="2413:76">(<argument pos:start="2413:50" pos:end="2413:61"><expr pos:start="2413:50" pos:end="2413:61"><name pos:start="2413:50" pos:end="2413:61">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2413:64" pos:end="2413:75"><expr pos:start="2413:64" pos:end="2413:75"><name pos:start="2413:64" pos:end="2413:75"><name pos:start="2413:64" pos:end="2413:71">cpu_regs</name><index pos:start="2413:72" pos:end="2413:75">[<expr pos:start="2413:73" pos:end="2413:74"><name pos:start="2413:73" pos:end="2413:74">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2415:27" pos:end="2421:25">else <block pos:start="2415:32" pos:end="2421:25">{<block_content pos:start="2417:29" pos:end="2419:71">

                            <expr_stmt pos:start="2417:29" pos:end="2419:71"><expr pos:start="2417:29" pos:end="2419:70"><call pos:start="2417:29" pos:end="2419:70"><name pos:start="2417:29" pos:end="2417:47">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2417:48" pos:end="2419:70">(<argument pos:start="2417:49" pos:end="2417:60"><expr pos:start="2417:49" pos:end="2417:60"><name pos:start="2417:49" pos:end="2417:60">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2417:63" pos:end="2417:68"><expr pos:start="2417:63" pos:end="2417:68"><name pos:start="2417:63" pos:end="2417:68">cpu_A0</name></expr></argument>,

                                                <argument pos:start="2419:49" pos:end="2419:60"><expr pos:start="2419:49" pos:end="2419:60"><name pos:start="2419:49" pos:end="2419:60"><name pos:start="2419:49" pos:end="2419:49">s</name><operator pos:start="2419:50" pos:end="2419:51">-&gt;</operator><name pos:start="2419:52" pos:end="2419:60">mem_index</name></name></expr></argument>, <argument pos:start="2419:63" pos:end="2419:69"><expr pos:start="2419:63" pos:end="2419:69"><name pos:start="2419:63" pos:end="2419:69">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2423:25" pos:end="2427:79"><expr pos:start="2423:25" pos:end="2427:78"><call pos:start="2423:25" pos:end="2427:78"><name pos:start="2423:25" pos:end="2423:38">tcg_gen_st_i32</name><argument_list pos:start="2423:39" pos:end="2427:78">(<argument pos:start="2423:40" pos:end="2423:51"><expr pos:start="2423:40" pos:end="2423:51"><name pos:start="2423:40" pos:end="2423:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2423:54" pos:end="2423:60"><expr pos:start="2423:54" pos:end="2423:60"><name pos:start="2423:54" pos:end="2423:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2425:41" pos:end="2427:77"><expr pos:start="2425:41" pos:end="2427:77"><call pos:start="2425:41" pos:end="2427:77"><name pos:start="2425:41" pos:end="2425:48">offsetof</name><argument_list pos:start="2425:49" pos:end="2427:77">(<argument pos:start="2425:50" pos:end="2425:60"><expr pos:start="2425:50" pos:end="2425:60"><name pos:start="2425:50" pos:end="2425:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2427:49" pos:end="2427:76"><expr pos:start="2427:49" pos:end="2427:76"><name pos:start="2427:49" pos:end="2427:61"><name pos:start="2427:49" pos:end="2427:56">xmm_regs</name><index pos:start="2427:57" pos:end="2427:61">[<expr pos:start="2427:58" pos:end="2427:60"><name pos:start="2427:58" pos:end="2427:60">reg</name></expr>]</index></name><operator pos:start="2427:62" pos:end="2427:62">.</operator><call pos:start="2427:63" pos:end="2427:76"><name pos:start="2427:63" pos:end="2427:67">ZMM_L</name><argument_list pos:start="2427:68" pos:end="2427:76">(<argument pos:start="2427:69" pos:end="2427:75"><expr pos:start="2427:69" pos:end="2427:75"><name pos:start="2427:69" pos:end="2427:71">val</name> <operator pos:start="2427:73" pos:end="2427:73">&amp;</operator> <literal type="number" pos:start="2427:75" pos:end="2427:75">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2429:23" pos:end="2457:21">else <block pos:start="2429:28" pos:end="2457:21">{<block_content pos:start="2433:25" pos:end="2456:0"> <comment type="block" pos:start="2429:30" pos:end="2429:41">/* pinsrq */</comment>

<cpp:ifdef pos:start="2431:1" pos:end="2431:20">#<cpp:directive pos:start="2431:2" pos:end="2431:6">ifdef</cpp:directive> <name pos:start="2431:8" pos:end="2431:20">TARGET_X86_64</name></cpp:ifdef>

                        <if_stmt pos:start="2433:25" pos:end="2443:25"><if pos:start="2433:25" pos:end="2437:25">if <condition pos:start="2433:28" pos:end="2433:37">(<expr pos:start="2433:29" pos:end="2433:36"><name pos:start="2433:29" pos:end="2433:31">mod</name> <operator pos:start="2433:33" pos:end="2433:34">==</operator> <literal type="number" pos:start="2433:36" pos:end="2433:36">3</literal></expr>)</condition> <block pos:start="2433:39" pos:end="2437:25">{<block_content pos:start="2435:29" pos:end="2435:67">

                            <expr_stmt pos:start="2435:29" pos:end="2435:67"><expr pos:start="2435:29" pos:end="2435:66"><call pos:start="2435:29" pos:end="2435:66"><name pos:start="2435:29" pos:end="2435:44">gen_op_mov_v_reg</name><argument_list pos:start="2435:45" pos:end="2435:66">(<argument pos:start="2435:46" pos:end="2435:47"><expr pos:start="2435:46" pos:end="2435:47"><name pos:start="2435:46" pos:end="2435:47">ot</name></expr></argument>, <argument pos:start="2435:50" pos:end="2435:61"><expr pos:start="2435:50" pos:end="2435:61"><name pos:start="2435:50" pos:end="2435:61">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2435:64" pos:end="2435:65"><expr pos:start="2435:64" pos:end="2435:65"><name pos:start="2435:64" pos:end="2435:65">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2437:27" pos:end="2443:25">else <block pos:start="2437:32" pos:end="2443:25">{<block_content pos:start="2439:29" pos:end="2441:70">

                            <expr_stmt pos:start="2439:29" pos:end="2441:70"><expr pos:start="2439:29" pos:end="2441:69"><call pos:start="2439:29" pos:end="2441:69"><name pos:start="2439:29" pos:end="2439:47">tcg_gen_qemu_ld_i64</name><argument_list pos:start="2439:48" pos:end="2441:69">(<argument pos:start="2439:49" pos:end="2439:60"><expr pos:start="2439:49" pos:end="2439:60"><name pos:start="2439:49" pos:end="2439:60">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2439:63" pos:end="2439:68"><expr pos:start="2439:63" pos:end="2439:68"><name pos:start="2439:63" pos:end="2439:68">cpu_A0</name></expr></argument>,

                                                <argument pos:start="2441:49" pos:end="2441:60"><expr pos:start="2441:49" pos:end="2441:60"><name pos:start="2441:49" pos:end="2441:60"><name pos:start="2441:49" pos:end="2441:49">s</name><operator pos:start="2441:50" pos:end="2441:51">-&gt;</operator><name pos:start="2441:52" pos:end="2441:60">mem_index</name></name></expr></argument>, <argument pos:start="2441:63" pos:end="2441:68"><expr pos:start="2441:63" pos:end="2441:68"><name pos:start="2441:63" pos:end="2441:68">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2445:25" pos:end="2452:0"><expr pos:start="2445:25" pos:end="2449:78"><call pos:start="2445:25" pos:end="2449:78"><name pos:start="2445:25" pos:end="2445:38">tcg_gen_st_i64</name><argument_list pos:start="2445:39" pos:end="2449:78">(<argument pos:start="2445:40" pos:end="2445:51"><expr pos:start="2445:40" pos:end="2445:51"><name pos:start="2445:40" pos:end="2445:51">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2445:54" pos:end="2445:60"><expr pos:start="2445:54" pos:end="2445:60"><name pos:start="2445:54" pos:end="2445:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2447:41" pos:end="2449:77"><expr pos:start="2447:41" pos:end="2449:77"><call pos:start="2447:41" pos:end="2449:77"><name pos:start="2447:41" pos:end="2447:48">offsetof</name><argument_list pos:start="2447:49" pos:end="2449:77">(<argument pos:start="2447:50" pos:end="2447:60"><expr pos:start="2447:50" pos:end="2447:60"><name pos:start="2447:50" pos:end="2447:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2449:49" pos:end="2449:76"><expr pos:start="2449:49" pos:end="2449:76"><name pos:start="2449:49" pos:end="2449:61"><name pos:start="2449:49" pos:end="2449:56">xmm_regs</name><index pos:start="2449:57" pos:end="2449:61">[<expr pos:start="2449:58" pos:end="2449:60"><name pos:start="2449:58" pos:end="2449:60">reg</name></expr>]</index></name><operator pos:start="2449:62" pos:end="2449:62">.</operator><call pos:start="2449:63" pos:end="2449:76"><name pos:start="2449:63" pos:end="2449:67">ZMM_Q</name><argument_list pos:start="2449:68" pos:end="2449:76">(<argument pos:start="2449:69" pos:end="2449:75"><expr pos:start="2449:69" pos:end="2449:75"><name pos:start="2449:69" pos:end="2449:71">val</name> <operator pos:start="2449:73" pos:end="2449:73">&amp;</operator> <literal type="number" pos:start="2449:75" pos:end="2449:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="2451:1" pos:end="2451:5">#<cpp:directive pos:start="2451:2" pos:end="2451:5">else</cpp:directive></cpp:else>

                        <goto pos:start="2453:25" pos:end="2456:0">goto <name pos:start="2453:30" pos:end="2453:39">illegal_op</name>;</goto>

<cpp:endif pos:start="2455:1" pos:end="2455:6">#<cpp:directive pos:start="2455:2" pos:end="2455:6">endif</cpp:directive></cpp:endif>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2459:21" pos:end="2459:26">break;</break>

                </block_content>}</block></switch>

                <return pos:start="2463:17" pos:end="2463:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="2469:13" pos:end="2505:13"><if pos:start="2469:13" pos:end="2487:13">if <condition pos:start="2469:16" pos:end="2469:19">(<expr pos:start="2469:17" pos:end="2469:18"><name pos:start="2469:17" pos:end="2469:18">b1</name></expr>)</condition> <block pos:start="2469:21" pos:end="2487:13">{<block_content pos:start="2471:17" pos:end="2485:17">

                <expr_stmt pos:start="2471:17" pos:end="2471:65"><expr pos:start="2471:17" pos:end="2471:64"><name pos:start="2471:17" pos:end="2471:26">op1_offset</name> <operator pos:start="2471:28" pos:end="2471:28">=</operator> <call pos:start="2471:30" pos:end="2471:64"><name pos:start="2471:30" pos:end="2471:37">offsetof</name><argument_list pos:start="2471:38" pos:end="2471:64">(<argument pos:start="2471:39" pos:end="2471:49"><expr pos:start="2471:39" pos:end="2471:49"><name pos:start="2471:39" pos:end="2471:49">CPUX86State</name></expr></argument>,<argument pos:start="2471:51" pos:end="2471:63"><expr pos:start="2471:51" pos:end="2471:63"><name pos:start="2471:51" pos:end="2471:63"><name pos:start="2471:51" pos:end="2471:58">xmm_regs</name><index pos:start="2471:59" pos:end="2471:63">[<expr pos:start="2471:60" pos:end="2471:62"><name pos:start="2471:60" pos:end="2471:62">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2473:17" pos:end="2485:17"><if pos:start="2473:17" pos:end="2477:17">if <condition pos:start="2473:20" pos:end="2473:29">(<expr pos:start="2473:21" pos:end="2473:28"><name pos:start="2473:21" pos:end="2473:23">mod</name> <operator pos:start="2473:25" pos:end="2473:26">==</operator> <literal type="number" pos:start="2473:28" pos:end="2473:28">3</literal></expr>)</condition> <block pos:start="2473:31" pos:end="2477:17">{<block_content pos:start="2475:21" pos:end="2475:79">

                    <expr_stmt pos:start="2475:21" pos:end="2475:79"><expr pos:start="2475:21" pos:end="2475:78"><name pos:start="2475:21" pos:end="2475:30">op2_offset</name> <operator pos:start="2475:32" pos:end="2475:32">=</operator> <call pos:start="2475:34" pos:end="2475:78"><name pos:start="2475:34" pos:end="2475:41">offsetof</name><argument_list pos:start="2475:42" pos:end="2475:78">(<argument pos:start="2475:43" pos:end="2475:53"><expr pos:start="2475:43" pos:end="2475:53"><name pos:start="2475:43" pos:end="2475:53">CPUX86State</name></expr></argument>,<argument pos:start="2475:55" pos:end="2475:77"><expr pos:start="2475:55" pos:end="2475:77"><name pos:start="2475:55" pos:end="2475:77"><name pos:start="2475:55" pos:end="2475:62">xmm_regs</name><index pos:start="2475:63" pos:end="2475:77">[<expr pos:start="2475:64" pos:end="2475:76"><name pos:start="2475:64" pos:end="2475:65">rm</name> <operator pos:start="2475:67" pos:end="2475:67">|</operator> <call pos:start="2475:69" pos:end="2475:76"><name pos:start="2475:69" pos:end="2475:73">REX_B</name><argument_list pos:start="2475:74" pos:end="2475:76">(<argument pos:start="2475:75" pos:end="2475:75"><expr pos:start="2475:75" pos:end="2475:75"><name pos:start="2475:75" pos:end="2475:75">s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2477:19" pos:end="2485:17">else <block pos:start="2477:24" pos:end="2485:17">{<block_content pos:start="2479:21" pos:end="2483:50">

                    <expr_stmt pos:start="2479:21" pos:end="2479:62"><expr pos:start="2479:21" pos:end="2479:61"><name pos:start="2479:21" pos:end="2479:30">op2_offset</name> <operator pos:start="2479:32" pos:end="2479:32">=</operator> <call pos:start="2479:34" pos:end="2479:61"><name pos:start="2479:34" pos:end="2479:41">offsetof</name><argument_list pos:start="2479:42" pos:end="2479:61">(<argument pos:start="2479:43" pos:end="2479:53"><expr pos:start="2479:43" pos:end="2479:53"><name pos:start="2479:43" pos:end="2479:53">CPUX86State</name></expr></argument>,<argument pos:start="2479:55" pos:end="2479:60"><expr pos:start="2479:55" pos:end="2479:60"><name pos:start="2479:55" pos:end="2479:60">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2481:21" pos:end="2481:49"><expr pos:start="2481:21" pos:end="2481:48"><call pos:start="2481:21" pos:end="2481:48"><name pos:start="2481:21" pos:end="2481:33">gen_lea_modrm</name><argument_list pos:start="2481:34" pos:end="2481:48">(<argument pos:start="2481:35" pos:end="2481:37"><expr pos:start="2481:35" pos:end="2481:37"><name pos:start="2481:35" pos:end="2481:37">env</name></expr></argument>, <argument pos:start="2481:40" pos:end="2481:40"><expr pos:start="2481:40" pos:end="2481:40"><name pos:start="2481:40" pos:end="2481:40">s</name></expr></argument>, <argument pos:start="2481:43" pos:end="2481:47"><expr pos:start="2481:43" pos:end="2481:47"><name pos:start="2481:43" pos:end="2481:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2483:21" pos:end="2483:50"><expr pos:start="2483:21" pos:end="2483:49"><call pos:start="2483:21" pos:end="2483:49"><name pos:start="2483:21" pos:end="2483:34">gen_ldo_env_A0</name><argument_list pos:start="2483:35" pos:end="2483:49">(<argument pos:start="2483:36" pos:end="2483:36"><expr pos:start="2483:36" pos:end="2483:36"><name pos:start="2483:36" pos:end="2483:36">s</name></expr></argument>, <argument pos:start="2483:39" pos:end="2483:48"><expr pos:start="2483:39" pos:end="2483:48"><name pos:start="2483:39" pos:end="2483:48">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="2487:15" pos:end="2505:13">else <block pos:start="2487:20" pos:end="2505:13">{<block_content pos:start="2489:17" pos:end="2503:17">

                <expr_stmt pos:start="2489:17" pos:end="2489:67"><expr pos:start="2489:17" pos:end="2489:66"><name pos:start="2489:17" pos:end="2489:26">op1_offset</name> <operator pos:start="2489:28" pos:end="2489:28">=</operator> <call pos:start="2489:30" pos:end="2489:66"><name pos:start="2489:30" pos:end="2489:37">offsetof</name><argument_list pos:start="2489:38" pos:end="2489:66">(<argument pos:start="2489:39" pos:end="2489:49"><expr pos:start="2489:39" pos:end="2489:49"><name pos:start="2489:39" pos:end="2489:49">CPUX86State</name></expr></argument>,<argument pos:start="2489:51" pos:end="2489:65"><expr pos:start="2489:51" pos:end="2489:65"><name pos:start="2489:51" pos:end="2489:61"><name pos:start="2489:51" pos:end="2489:56">fpregs</name><index pos:start="2489:57" pos:end="2489:61">[<expr pos:start="2489:58" pos:end="2489:60"><name pos:start="2489:58" pos:end="2489:60">reg</name></expr>]</index></name><operator pos:start="2489:62" pos:end="2489:62">.</operator><name pos:start="2489:63" pos:end="2489:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2491:17" pos:end="2503:17"><if pos:start="2491:17" pos:end="2495:17">if <condition pos:start="2491:20" pos:end="2491:29">(<expr pos:start="2491:21" pos:end="2491:28"><name pos:start="2491:21" pos:end="2491:23">mod</name> <operator pos:start="2491:25" pos:end="2491:26">==</operator> <literal type="number" pos:start="2491:28" pos:end="2491:28">3</literal></expr>)</condition> <block pos:start="2491:31" pos:end="2495:17">{<block_content pos:start="2493:21" pos:end="2493:70">

                    <expr_stmt pos:start="2493:21" pos:end="2493:70"><expr pos:start="2493:21" pos:end="2493:69"><name pos:start="2493:21" pos:end="2493:30">op2_offset</name> <operator pos:start="2493:32" pos:end="2493:32">=</operator> <call pos:start="2493:34" pos:end="2493:69"><name pos:start="2493:34" pos:end="2493:41">offsetof</name><argument_list pos:start="2493:42" pos:end="2493:69">(<argument pos:start="2493:43" pos:end="2493:53"><expr pos:start="2493:43" pos:end="2493:53"><name pos:start="2493:43" pos:end="2493:53">CPUX86State</name></expr></argument>,<argument pos:start="2493:55" pos:end="2493:68"><expr pos:start="2493:55" pos:end="2493:68"><name pos:start="2493:55" pos:end="2493:64"><name pos:start="2493:55" pos:end="2493:60">fpregs</name><index pos:start="2493:61" pos:end="2493:64">[<expr pos:start="2493:62" pos:end="2493:63"><name pos:start="2493:62" pos:end="2493:63">rm</name></expr>]</index></name><operator pos:start="2493:65" pos:end="2493:65">.</operator><name pos:start="2493:66" pos:end="2493:68">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2495:19" pos:end="2503:17">else <block pos:start="2495:24" pos:end="2503:17">{<block_content pos:start="2497:21" pos:end="2501:50">

                    <expr_stmt pos:start="2497:21" pos:end="2497:62"><expr pos:start="2497:21" pos:end="2497:61"><name pos:start="2497:21" pos:end="2497:30">op2_offset</name> <operator pos:start="2497:32" pos:end="2497:32">=</operator> <call pos:start="2497:34" pos:end="2497:61"><name pos:start="2497:34" pos:end="2497:41">offsetof</name><argument_list pos:start="2497:42" pos:end="2497:61">(<argument pos:start="2497:43" pos:end="2497:53"><expr pos:start="2497:43" pos:end="2497:53"><name pos:start="2497:43" pos:end="2497:53">CPUX86State</name></expr></argument>,<argument pos:start="2497:55" pos:end="2497:60"><expr pos:start="2497:55" pos:end="2497:60"><name pos:start="2497:55" pos:end="2497:60">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2499:21" pos:end="2499:49"><expr pos:start="2499:21" pos:end="2499:48"><call pos:start="2499:21" pos:end="2499:48"><name pos:start="2499:21" pos:end="2499:33">gen_lea_modrm</name><argument_list pos:start="2499:34" pos:end="2499:48">(<argument pos:start="2499:35" pos:end="2499:37"><expr pos:start="2499:35" pos:end="2499:37"><name pos:start="2499:35" pos:end="2499:37">env</name></expr></argument>, <argument pos:start="2499:40" pos:end="2499:40"><expr pos:start="2499:40" pos:end="2499:40"><name pos:start="2499:40" pos:end="2499:40">s</name></expr></argument>, <argument pos:start="2499:43" pos:end="2499:47"><expr pos:start="2499:43" pos:end="2499:47"><name pos:start="2499:43" pos:end="2499:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2501:21" pos:end="2501:50"><expr pos:start="2501:21" pos:end="2501:49"><call pos:start="2501:21" pos:end="2501:49"><name pos:start="2501:21" pos:end="2501:34">gen_ldq_env_A0</name><argument_list pos:start="2501:35" pos:end="2501:49">(<argument pos:start="2501:36" pos:end="2501:36"><expr pos:start="2501:36" pos:end="2501:36"><name pos:start="2501:36" pos:end="2501:36">s</name></expr></argument>, <argument pos:start="2501:39" pos:end="2501:48"><expr pos:start="2501:39" pos:end="2501:48"><name pos:start="2501:39" pos:end="2501:48">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="2507:13" pos:end="2507:46"><expr pos:start="2507:13" pos:end="2507:45"><name pos:start="2507:13" pos:end="2507:15">val</name> <operator pos:start="2507:17" pos:end="2507:17">=</operator> <call pos:start="2507:19" pos:end="2507:45"><name pos:start="2507:19" pos:end="2507:31">cpu_ldub_code</name><argument_list pos:start="2507:32" pos:end="2507:45">(<argument pos:start="2507:33" pos:end="2507:35"><expr pos:start="2507:33" pos:end="2507:35"><name pos:start="2507:33" pos:end="2507:35">env</name></expr></argument>, <argument pos:start="2507:38" pos:end="2507:44"><expr pos:start="2507:38" pos:end="2507:44"><name pos:start="2507:38" pos:end="2507:42"><name pos:start="2507:38" pos:end="2507:38">s</name><operator pos:start="2507:39" pos:end="2507:40">-&gt;</operator><name pos:start="2507:41" pos:end="2507:42">pc</name></name><operator pos:start="2507:43" pos:end="2507:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="2511:13" pos:end="2525:13"><if pos:start="2511:13" pos:end="2525:13">if <condition pos:start="2511:16" pos:end="2511:35">(<expr pos:start="2511:17" pos:end="2511:34"><operator pos:start="2511:17" pos:end="2511:17">(</operator><name pos:start="2511:18" pos:end="2511:18">b</name> <operator pos:start="2511:20" pos:end="2511:20">&amp;</operator> <literal type="number" pos:start="2511:22" pos:end="2511:25">0xfc</literal><operator pos:start="2511:26" pos:end="2511:26">)</operator> <operator pos:start="2511:28" pos:end="2511:29">==</operator> <literal type="number" pos:start="2511:31" pos:end="2511:34">0x60</literal></expr>)</condition> <block pos:start="2511:37" pos:end="2525:13">{<block_content pos:start="2513:17" pos:end="2523:17"> <comment type="block" pos:start="2511:39" pos:end="2511:53">/* pcmpXstrX */</comment>

                <expr_stmt pos:start="2513:17" pos:end="2513:43"><expr pos:start="2513:17" pos:end="2513:42"><call pos:start="2513:17" pos:end="2513:42"><name pos:start="2513:17" pos:end="2513:25">set_cc_op</name><argument_list pos:start="2513:26" pos:end="2513:42">(<argument pos:start="2513:27" pos:end="2513:27"><expr pos:start="2513:27" pos:end="2513:27"><name pos:start="2513:27" pos:end="2513:27">s</name></expr></argument>, <argument pos:start="2513:30" pos:end="2513:41"><expr pos:start="2513:30" pos:end="2513:41"><name pos:start="2513:30" pos:end="2513:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="2517:17" pos:end="2523:17"><if pos:start="2517:17" pos:end="2523:17">if <condition pos:start="2517:20" pos:end="2517:38">(<expr pos:start="2517:21" pos:end="2517:37"><name pos:start="2517:21" pos:end="2517:28"><name pos:start="2517:21" pos:end="2517:21">s</name><operator pos:start="2517:22" pos:end="2517:23">-&gt;</operator><name pos:start="2517:24" pos:end="2517:28">dflag</name></name> <operator pos:start="2517:30" pos:end="2517:31">==</operator> <name pos:start="2517:33" pos:end="2517:37">MO_64</name></expr>)</condition> <block pos:start="2517:40" pos:end="2523:17">{<block_content pos:start="2521:21" pos:end="2521:34">

                    <comment type="block" pos:start="2519:21" pos:end="2519:72">/* The helper must use entire 64-bit gp registers */</comment>

                    <expr_stmt pos:start="2521:21" pos:end="2521:34"><expr pos:start="2521:21" pos:end="2521:33"><name pos:start="2521:21" pos:end="2521:23">val</name> <operator pos:start="2521:25" pos:end="2521:26">|=</operator> <literal type="number" pos:start="2521:28" pos:end="2521:28">1</literal> <operator pos:start="2521:30" pos:end="2521:31">&lt;&lt;</operator> <literal type="number" pos:start="2521:33" pos:end="2521:33">8</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="2529:13" pos:end="2529:60"><expr pos:start="2529:13" pos:end="2529:59"><call pos:start="2529:13" pos:end="2529:59"><name pos:start="2529:13" pos:end="2529:28">tcg_gen_addi_ptr</name><argument_list pos:start="2529:29" pos:end="2529:59">(<argument pos:start="2529:30" pos:end="2529:37"><expr pos:start="2529:30" pos:end="2529:37"><name pos:start="2529:30" pos:end="2529:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2529:40" pos:end="2529:46"><expr pos:start="2529:40" pos:end="2529:46"><name pos:start="2529:40" pos:end="2529:46">cpu_env</name></expr></argument>, <argument pos:start="2529:49" pos:end="2529:58"><expr pos:start="2529:49" pos:end="2529:58"><name pos:start="2529:49" pos:end="2529:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2531:13" pos:end="2531:60"><expr pos:start="2531:13" pos:end="2531:59"><call pos:start="2531:13" pos:end="2531:59"><name pos:start="2531:13" pos:end="2531:28">tcg_gen_addi_ptr</name><argument_list pos:start="2531:29" pos:end="2531:59">(<argument pos:start="2531:30" pos:end="2531:37"><expr pos:start="2531:30" pos:end="2531:37"><name pos:start="2531:30" pos:end="2531:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2531:40" pos:end="2531:46"><expr pos:start="2531:40" pos:end="2531:46"><name pos:start="2531:40" pos:end="2531:46">cpu_env</name></expr></argument>, <argument pos:start="2531:49" pos:end="2531:58"><expr pos:start="2531:49" pos:end="2531:58"><name pos:start="2531:49" pos:end="2531:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2533:13" pos:end="2533:73"><expr pos:start="2533:13" pos:end="2533:72"><call pos:start="2533:13" pos:end="2533:72"><name pos:start="2533:13" pos:end="2533:23">sse_fn_eppi</name><argument_list pos:start="2533:24" pos:end="2533:72">(<argument pos:start="2533:25" pos:end="2533:31"><expr pos:start="2533:25" pos:end="2533:31"><name pos:start="2533:25" pos:end="2533:31">cpu_env</name></expr></argument>, <argument pos:start="2533:34" pos:end="2533:41"><expr pos:start="2533:34" pos:end="2533:41"><name pos:start="2533:34" pos:end="2533:41">cpu_ptr0</name></expr></argument>, <argument pos:start="2533:44" pos:end="2533:51"><expr pos:start="2533:44" pos:end="2533:51"><name pos:start="2533:44" pos:end="2533:51">cpu_ptr1</name></expr></argument>, <argument pos:start="2533:54" pos:end="2533:71"><expr pos:start="2533:54" pos:end="2533:71"><call pos:start="2533:54" pos:end="2533:71"><name pos:start="2533:54" pos:end="2533:66">tcg_const_i32</name><argument_list pos:start="2533:67" pos:end="2533:71">(<argument pos:start="2533:68" pos:end="2533:70"><expr pos:start="2533:68" pos:end="2533:70"><name pos:start="2533:68" pos:end="2533:70">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2535:13" pos:end="2535:18">break;</break>



        <case pos:start="2539:9" pos:end="2539:19">case <expr pos:start="2539:14" pos:end="2539:18"><literal type="number" pos:start="2539:14" pos:end="2539:18">0x33a</literal></expr>:</case>

            <comment type="block" pos:start="2541:13" pos:end="2541:62">/* Various integer extensions at 0f 3a f[0-f].  */</comment>

            <expr_stmt pos:start="2543:13" pos:end="2543:34"><expr pos:start="2543:13" pos:end="2543:33"><name pos:start="2543:13" pos:end="2543:13">b</name> <operator pos:start="2543:15" pos:end="2543:15">=</operator> <name pos:start="2543:17" pos:end="2543:21">modrm</name> <operator pos:start="2543:23" pos:end="2543:23">|</operator> <operator pos:start="2543:25" pos:end="2543:25">(</operator><name pos:start="2543:26" pos:end="2543:27">b1</name> <operator pos:start="2543:29" pos:end="2543:30">&lt;&lt;</operator> <literal type="number" pos:start="2543:32" pos:end="2543:32">8</literal><operator pos:start="2543:33" pos:end="2543:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2545:13" pos:end="2545:48"><expr pos:start="2545:13" pos:end="2545:47"><name pos:start="2545:13" pos:end="2545:17">modrm</name> <operator pos:start="2545:19" pos:end="2545:19">=</operator> <call pos:start="2545:21" pos:end="2545:47"><name pos:start="2545:21" pos:end="2545:33">cpu_ldub_code</name><argument_list pos:start="2545:34" pos:end="2545:47">(<argument pos:start="2545:35" pos:end="2545:37"><expr pos:start="2545:35" pos:end="2545:37"><name pos:start="2545:35" pos:end="2545:37">env</name></expr></argument>, <argument pos:start="2545:40" pos:end="2545:46"><expr pos:start="2545:40" pos:end="2545:46"><name pos:start="2545:40" pos:end="2545:44"><name pos:start="2545:40" pos:end="2545:40">s</name><operator pos:start="2545:41" pos:end="2545:42">-&gt;</operator><name pos:start="2545:43" pos:end="2545:44">pc</name></name><operator pos:start="2545:45" pos:end="2545:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2547:13" pos:end="2547:45"><expr pos:start="2547:13" pos:end="2547:44"><name pos:start="2547:13" pos:end="2547:15">reg</name> <operator pos:start="2547:17" pos:end="2547:17">=</operator> <operator pos:start="2547:19" pos:end="2547:19">(</operator><operator pos:start="2547:20" pos:end="2547:20">(</operator><name pos:start="2547:21" pos:end="2547:25">modrm</name> <operator pos:start="2547:27" pos:end="2547:28">&gt;&gt;</operator> <literal type="number" pos:start="2547:30" pos:end="2547:30">3</literal><operator pos:start="2547:31" pos:end="2547:31">)</operator> <operator pos:start="2547:33" pos:end="2547:33">&amp;</operator> <literal type="number" pos:start="2547:35" pos:end="2547:35">7</literal><operator pos:start="2547:36" pos:end="2547:36">)</operator> <operator pos:start="2547:38" pos:end="2547:38">|</operator> <name pos:start="2547:40" pos:end="2547:44">rex_r</name></expr>;</expr_stmt>



            <switch pos:start="2551:13" pos:end="2595:13">switch <condition pos:start="2551:20" pos:end="2551:22">(<expr pos:start="2551:21" pos:end="2551:21"><name pos:start="2551:21" pos:end="2551:21">b</name></expr>)</condition> <block pos:start="2551:24" pos:end="2595:13">{<block_content pos:start="2553:13" pos:end="2593:32">

            <case pos:start="2553:13" pos:end="2553:23">case <expr pos:start="2553:18" pos:end="2553:22"><literal type="number" pos:start="2553:18" pos:end="2553:22">0x3f0</literal></expr>:</case> <comment type="block" pos:start="2553:25" pos:end="2553:44">/* rorx Gy,Ey, Ib */</comment>

                <if_stmt pos:start="2555:17" pos:end="2563:17"><if pos:start="2555:17" pos:end="2563:17">if <condition pos:start="2555:20" pos:end="2559:37">(<expr pos:start="2555:21" pos:end="2559:36"><operator pos:start="2555:21" pos:end="2555:21">!</operator><operator pos:start="2555:22" pos:end="2555:22">(</operator><name pos:start="2555:23" pos:end="2555:47"><name pos:start="2555:23" pos:end="2555:23">s</name><operator pos:start="2555:24" pos:end="2555:25">-&gt;</operator><name pos:start="2555:26" pos:end="2555:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="2555:49" pos:end="2555:49">&amp;</operator> <name pos:start="2555:51" pos:end="2555:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="2555:69" pos:end="2555:69">)</operator>

                    <operator pos:start="2557:21" pos:end="2557:22">||</operator> <operator pos:start="2557:24" pos:end="2557:24">!</operator><operator pos:start="2557:25" pos:end="2557:25">(</operator><name pos:start="2557:26" pos:end="2557:34"><name pos:start="2557:26" pos:end="2557:26">s</name><operator pos:start="2557:27" pos:end="2557:28">-&gt;</operator><name pos:start="2557:29" pos:end="2557:34">prefix</name></name> <operator pos:start="2557:36" pos:end="2557:36">&amp;</operator> <name pos:start="2557:38" pos:end="2557:47">PREFIX_VEX</name><operator pos:start="2557:48" pos:end="2557:48">)</operator>

                    <operator pos:start="2559:21" pos:end="2559:22">||</operator> <name pos:start="2559:24" pos:end="2559:31"><name pos:start="2559:24" pos:end="2559:24">s</name><operator pos:start="2559:25" pos:end="2559:26">-&gt;</operator><name pos:start="2559:27" pos:end="2559:31">vex_l</name></name> <operator pos:start="2559:33" pos:end="2559:34">!=</operator> <literal type="number" pos:start="2559:36" pos:end="2559:36">0</literal></expr>)</condition> <block pos:start="2559:39" pos:end="2563:17">{<block_content pos:start="2561:21" pos:end="2561:36">

                    <goto pos:start="2561:21" pos:end="2561:36">goto <name pos:start="2561:26" pos:end="2561:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2565:17" pos:end="2565:40"><expr pos:start="2565:17" pos:end="2565:39"><name pos:start="2565:17" pos:end="2565:18">ot</name> <operator pos:start="2565:20" pos:end="2565:20">=</operator> <call pos:start="2565:22" pos:end="2565:39"><name pos:start="2565:22" pos:end="2565:29">mo_64_32</name><argument_list pos:start="2565:30" pos:end="2565:39">(<argument pos:start="2565:31" pos:end="2565:38"><expr pos:start="2565:31" pos:end="2565:38"><name pos:start="2565:31" pos:end="2565:38"><name pos:start="2565:31" pos:end="2565:31">s</name><operator pos:start="2565:32" pos:end="2565:33">-&gt;</operator><name pos:start="2565:34" pos:end="2565:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2567:17" pos:end="2567:62"><expr pos:start="2567:17" pos:end="2567:61"><call pos:start="2567:17" pos:end="2567:61"><name pos:start="2567:17" pos:end="2567:30">gen_ldst_modrm</name><argument_list pos:start="2567:31" pos:end="2567:61">(<argument pos:start="2567:32" pos:end="2567:34"><expr pos:start="2567:32" pos:end="2567:34"><name pos:start="2567:32" pos:end="2567:34">env</name></expr></argument>, <argument pos:start="2567:37" pos:end="2567:37"><expr pos:start="2567:37" pos:end="2567:37"><name pos:start="2567:37" pos:end="2567:37">s</name></expr></argument>, <argument pos:start="2567:40" pos:end="2567:44"><expr pos:start="2567:40" pos:end="2567:44"><name pos:start="2567:40" pos:end="2567:44">modrm</name></expr></argument>, <argument pos:start="2567:47" pos:end="2567:48"><expr pos:start="2567:47" pos:end="2567:48"><name pos:start="2567:47" pos:end="2567:48">ot</name></expr></argument>, <argument pos:start="2567:51" pos:end="2567:57"><expr pos:start="2567:51" pos:end="2567:57"><name pos:start="2567:51" pos:end="2567:57">OR_TMP0</name></expr></argument>, <argument pos:start="2567:60" pos:end="2567:60"><expr pos:start="2567:60" pos:end="2567:60"><literal type="number" pos:start="2567:60" pos:end="2567:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2569:17" pos:end="2569:48"><expr pos:start="2569:17" pos:end="2569:47"><name pos:start="2569:17" pos:end="2569:17">b</name> <operator pos:start="2569:19" pos:end="2569:19">=</operator> <call pos:start="2569:21" pos:end="2569:47"><name pos:start="2569:21" pos:end="2569:33">cpu_ldub_code</name><argument_list pos:start="2569:34" pos:end="2569:47">(<argument pos:start="2569:35" pos:end="2569:37"><expr pos:start="2569:35" pos:end="2569:37"><name pos:start="2569:35" pos:end="2569:37">env</name></expr></argument>, <argument pos:start="2569:40" pos:end="2569:46"><expr pos:start="2569:40" pos:end="2569:46"><name pos:start="2569:40" pos:end="2569:44"><name pos:start="2569:40" pos:end="2569:40">s</name><operator pos:start="2569:41" pos:end="2569:42">-&gt;</operator><name pos:start="2569:43" pos:end="2569:44">pc</name></name><operator pos:start="2569:45" pos:end="2569:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2571:17" pos:end="2583:17"><if pos:start="2571:17" pos:end="2575:17">if <condition pos:start="2571:20" pos:end="2571:32">(<expr pos:start="2571:21" pos:end="2571:31"><name pos:start="2571:21" pos:end="2571:22">ot</name> <operator pos:start="2571:24" pos:end="2571:25">==</operator> <name pos:start="2571:27" pos:end="2571:31">MO_64</name></expr>)</condition> <block pos:start="2571:34" pos:end="2575:17">{<block_content pos:start="2573:21" pos:end="2573:61">

                    <expr_stmt pos:start="2573:21" pos:end="2573:61"><expr pos:start="2573:21" pos:end="2573:60"><call pos:start="2573:21" pos:end="2573:60"><name pos:start="2573:21" pos:end="2573:36">tcg_gen_rotri_tl</name><argument_list pos:start="2573:37" pos:end="2573:60">(<argument pos:start="2573:38" pos:end="2573:43"><expr pos:start="2573:38" pos:end="2573:43"><name pos:start="2573:38" pos:end="2573:43">cpu_T0</name></expr></argument>, <argument pos:start="2573:46" pos:end="2573:51"><expr pos:start="2573:46" pos:end="2573:51"><name pos:start="2573:46" pos:end="2573:51">cpu_T0</name></expr></argument>, <argument pos:start="2573:54" pos:end="2573:59"><expr pos:start="2573:54" pos:end="2573:59"><name pos:start="2573:54" pos:end="2573:54">b</name> <operator pos:start="2573:56" pos:end="2573:56">&amp;</operator> <literal type="number" pos:start="2573:58" pos:end="2573:59">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2575:19" pos:end="2583:17">else <block pos:start="2575:24" pos:end="2583:17">{<block_content pos:start="2577:21" pos:end="2581:62">

                    <expr_stmt pos:start="2577:21" pos:end="2577:63"><expr pos:start="2577:21" pos:end="2577:62"><call pos:start="2577:21" pos:end="2577:62"><name pos:start="2577:21" pos:end="2577:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2577:41" pos:end="2577:62">(<argument pos:start="2577:42" pos:end="2577:53"><expr pos:start="2577:42" pos:end="2577:53"><name pos:start="2577:42" pos:end="2577:53">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2577:56" pos:end="2577:61"><expr pos:start="2577:56" pos:end="2577:61"><name pos:start="2577:56" pos:end="2577:61">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2579:21" pos:end="2579:74"><expr pos:start="2579:21" pos:end="2579:73"><call pos:start="2579:21" pos:end="2579:73"><name pos:start="2579:21" pos:end="2579:37">tcg_gen_rotri_i32</name><argument_list pos:start="2579:38" pos:end="2579:73">(<argument pos:start="2579:39" pos:end="2579:50"><expr pos:start="2579:39" pos:end="2579:50"><name pos:start="2579:39" pos:end="2579:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2579:53" pos:end="2579:64"><expr pos:start="2579:53" pos:end="2579:64"><name pos:start="2579:53" pos:end="2579:64">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2579:67" pos:end="2579:72"><expr pos:start="2579:67" pos:end="2579:72"><name pos:start="2579:67" pos:end="2579:67">b</name> <operator pos:start="2579:69" pos:end="2579:69">&amp;</operator> <literal type="number" pos:start="2579:71" pos:end="2579:72">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2581:21" pos:end="2581:62"><expr pos:start="2581:21" pos:end="2581:61"><call pos:start="2581:21" pos:end="2581:61"><name pos:start="2581:21" pos:end="2581:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="2581:40" pos:end="2581:61">(<argument pos:start="2581:41" pos:end="2581:46"><expr pos:start="2581:41" pos:end="2581:46"><name pos:start="2581:41" pos:end="2581:46">cpu_T0</name></expr></argument>, <argument pos:start="2581:49" pos:end="2581:60"><expr pos:start="2581:49" pos:end="2581:60"><name pos:start="2581:49" pos:end="2581:60">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2585:17" pos:end="2585:50"><expr pos:start="2585:17" pos:end="2585:49"><call pos:start="2585:17" pos:end="2585:49"><name pos:start="2585:17" pos:end="2585:32">gen_op_mov_reg_v</name><argument_list pos:start="2585:33" pos:end="2585:49">(<argument pos:start="2585:34" pos:end="2585:35"><expr pos:start="2585:34" pos:end="2585:35"><name pos:start="2585:34" pos:end="2585:35">ot</name></expr></argument>, <argument pos:start="2585:38" pos:end="2585:40"><expr pos:start="2585:38" pos:end="2585:40"><name pos:start="2585:38" pos:end="2585:40">reg</name></expr></argument>, <argument pos:start="2585:43" pos:end="2585:48"><expr pos:start="2585:43" pos:end="2585:48"><name pos:start="2585:43" pos:end="2585:48">cpu_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2587:17" pos:end="2587:22">break;</break>



            <default pos:start="2591:13" pos:end="2591:20">default:</default>

                <goto pos:start="2593:17" pos:end="2593:32">goto <name pos:start="2593:22" pos:end="2593:31">unknown_op</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="2597:13" pos:end="2597:18">break;</break>



        <default pos:start="2601:9" pos:end="2601:16">default:</default>

        <label pos:start="2603:9" pos:end="2603:19"><name pos:start="2603:9" pos:end="2603:18">unknown_op</name>:</label>

            <expr_stmt pos:start="2605:13" pos:end="2605:39"><expr pos:start="2605:13" pos:end="2605:38"><call pos:start="2605:13" pos:end="2605:38"><name pos:start="2605:13" pos:end="2605:30">gen_unknown_opcode</name><argument_list pos:start="2605:31" pos:end="2605:38">(<argument pos:start="2605:32" pos:end="2605:34"><expr pos:start="2605:32" pos:end="2605:34"><name pos:start="2605:32" pos:end="2605:34">env</name></expr></argument>, <argument pos:start="2605:37" pos:end="2605:37"><expr pos:start="2605:37" pos:end="2605:37"><name pos:start="2605:37" pos:end="2605:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="2607:13" pos:end="2607:19">return;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="2611:7" pos:end="2869:5">else <block pos:start="2611:12" pos:end="2869:5">{<block_content pos:start="2615:9" pos:end="2867:9">

        <comment type="block" pos:start="2613:9" pos:end="2613:42">/* generic MMX or SSE operation */</comment>

        <switch pos:start="2615:9" pos:end="2631:9">switch<condition pos:start="2615:15" pos:end="2615:17">(<expr pos:start="2615:16" pos:end="2615:16"><name pos:start="2615:16" pos:end="2615:16">b</name></expr>)</condition> <block pos:start="2615:19" pos:end="2631:9">{<block_content pos:start="2617:9" pos:end="2629:18">

        <case pos:start="2617:9" pos:end="2617:18">case <expr pos:start="2617:14" pos:end="2617:17"><literal type="number" pos:start="2617:14" pos:end="2617:17">0x70</literal></expr>:</case> <comment type="block" pos:start="2617:20" pos:end="2617:36">/* pshufx insn */</comment>

        <case pos:start="2619:9" pos:end="2619:18">case <expr pos:start="2619:14" pos:end="2619:17"><literal type="number" pos:start="2619:14" pos:end="2619:17">0xc6</literal></expr>:</case> <comment type="block" pos:start="2619:20" pos:end="2619:36">/* pshufx insn */</comment>

        <case pos:start="2621:9" pos:end="2621:18">case <expr pos:start="2621:14" pos:end="2621:17"><literal type="number" pos:start="2621:14" pos:end="2621:17">0xc2</literal></expr>:</case> <comment type="block" pos:start="2621:20" pos:end="2621:38">/* compare insns */</comment>

            <expr_stmt pos:start="2623:13" pos:end="2623:30"><expr pos:start="2623:13" pos:end="2623:29"><name pos:start="2623:13" pos:end="2623:25"><name pos:start="2623:13" pos:end="2623:13">s</name><operator pos:start="2623:14" pos:end="2623:15">-&gt;</operator><name pos:start="2623:16" pos:end="2623:25">rip_offset</name></name> <operator pos:start="2623:27" pos:end="2623:27">=</operator> <literal type="number" pos:start="2623:29" pos:end="2623:29">1</literal></expr>;</expr_stmt>

            <break pos:start="2625:13" pos:end="2625:18">break;</break>

        <default pos:start="2627:9" pos:end="2627:16">default:</default>

            <break pos:start="2629:13" pos:end="2629:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="2633:9" pos:end="2753:9"><if pos:start="2633:9" pos:end="2733:9">if <condition pos:start="2633:12" pos:end="2633:19">(<expr pos:start="2633:13" pos:end="2633:18"><name pos:start="2633:13" pos:end="2633:18">is_xmm</name></expr>)</condition> <block pos:start="2633:21" pos:end="2733:9">{<block_content pos:start="2635:13" pos:end="2731:13">

            <expr_stmt pos:start="2635:13" pos:end="2635:61"><expr pos:start="2635:13" pos:end="2635:60"><name pos:start="2635:13" pos:end="2635:22">op1_offset</name> <operator pos:start="2635:24" pos:end="2635:24">=</operator> <call pos:start="2635:26" pos:end="2635:60"><name pos:start="2635:26" pos:end="2635:33">offsetof</name><argument_list pos:start="2635:34" pos:end="2635:60">(<argument pos:start="2635:35" pos:end="2635:45"><expr pos:start="2635:35" pos:end="2635:45"><name pos:start="2635:35" pos:end="2635:45">CPUX86State</name></expr></argument>,<argument pos:start="2635:47" pos:end="2635:59"><expr pos:start="2635:47" pos:end="2635:59"><name pos:start="2635:47" pos:end="2635:59"><name pos:start="2635:47" pos:end="2635:54">xmm_regs</name><index pos:start="2635:55" pos:end="2635:59">[<expr pos:start="2635:56" pos:end="2635:58"><name pos:start="2635:56" pos:end="2635:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2637:13" pos:end="2731:13"><if pos:start="2637:13" pos:end="2725:13">if <condition pos:start="2637:16" pos:end="2637:25">(<expr pos:start="2637:17" pos:end="2637:24"><name pos:start="2637:17" pos:end="2637:19">mod</name> <operator pos:start="2637:21" pos:end="2637:22">!=</operator> <literal type="number" pos:start="2637:24" pos:end="2637:24">3</literal></expr>)</condition> <block pos:start="2637:27" pos:end="2725:13">{<block_content pos:start="2639:17" pos:end="2723:17">

                <decl_stmt pos:start="2639:17" pos:end="2639:27"><decl pos:start="2639:17" pos:end="2639:26"><type pos:start="2639:17" pos:end="2639:19"><name pos:start="2639:17" pos:end="2639:19">int</name></type> <name pos:start="2639:21" pos:end="2639:22">sz</name> <init pos:start="2639:24" pos:end="2639:26">= <expr pos:start="2639:26" pos:end="2639:26"><literal type="number" pos:start="2639:26" pos:end="2639:26">4</literal></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="2643:17" pos:end="2643:45"><expr pos:start="2643:17" pos:end="2643:44"><call pos:start="2643:17" pos:end="2643:44"><name pos:start="2643:17" pos:end="2643:29">gen_lea_modrm</name><argument_list pos:start="2643:30" pos:end="2643:44">(<argument pos:start="2643:31" pos:end="2643:33"><expr pos:start="2643:31" pos:end="2643:33"><name pos:start="2643:31" pos:end="2643:33">env</name></expr></argument>, <argument pos:start="2643:36" pos:end="2643:36"><expr pos:start="2643:36" pos:end="2643:36"><name pos:start="2643:36" pos:end="2643:36">s</name></expr></argument>, <argument pos:start="2643:39" pos:end="2643:43"><expr pos:start="2643:39" pos:end="2643:43"><name pos:start="2643:39" pos:end="2643:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2645:17" pos:end="2645:58"><expr pos:start="2645:17" pos:end="2645:57"><name pos:start="2645:17" pos:end="2645:26">op2_offset</name> <operator pos:start="2645:28" pos:end="2645:28">=</operator> <call pos:start="2645:30" pos:end="2645:57"><name pos:start="2645:30" pos:end="2645:37">offsetof</name><argument_list pos:start="2645:38" pos:end="2645:57">(<argument pos:start="2645:39" pos:end="2645:49"><expr pos:start="2645:39" pos:end="2645:49"><name pos:start="2645:39" pos:end="2645:49">CPUX86State</name></expr></argument>,<argument pos:start="2645:51" pos:end="2645:56"><expr pos:start="2645:51" pos:end="2645:56"><name pos:start="2645:51" pos:end="2645:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <switch pos:start="2649:17" pos:end="2689:17">switch <condition pos:start="2649:24" pos:end="2649:26">(<expr pos:start="2649:25" pos:end="2649:25"><name pos:start="2649:25" pos:end="2649:25">b</name></expr>)</condition> <block pos:start="2649:28" pos:end="2689:17">{<block_content pos:start="2651:17" pos:end="2687:26">

                <case pos:start="2651:17" pos:end="2651:35">case <expr pos:start="2651:22" pos:end="2651:34"><literal type="number" pos:start="2651:22" pos:end="2651:25">0x50</literal> <operator pos:start="2651:27" pos:end="2651:29">...</operator> <literal type="number" pos:start="2651:31" pos:end="2651:34">0x5a</literal></expr>:</case>

                <case pos:start="2653:17" pos:end="2653:35">case <expr pos:start="2653:22" pos:end="2653:34"><literal type="number" pos:start="2653:22" pos:end="2653:25">0x5c</literal> <operator pos:start="2653:27" pos:end="2653:29">...</operator> <literal type="number" pos:start="2653:31" pos:end="2653:34">0x5f</literal></expr>:</case>

                <case pos:start="2655:17" pos:end="2655:26">case <expr pos:start="2655:22" pos:end="2655:25"><literal type="number" pos:start="2655:22" pos:end="2655:25">0xc2</literal></expr>:</case>

                    <comment type="block" pos:start="2657:21" pos:end="2657:54">/* Most sse scalar operations.  */</comment>

                    <if_stmt pos:start="2659:21" pos:end="2667:21"><if pos:start="2659:21" pos:end="2663:21">if <condition pos:start="2659:24" pos:end="2659:32">(<expr pos:start="2659:25" pos:end="2659:31"><name pos:start="2659:25" pos:end="2659:26">b1</name> <operator pos:start="2659:28" pos:end="2659:29">==</operator> <literal type="number" pos:start="2659:31" pos:end="2659:31">2</literal></expr>)</condition> <block pos:start="2659:34" pos:end="2663:21">{<block_content pos:start="2661:25" pos:end="2661:31">

                        <expr_stmt pos:start="2661:25" pos:end="2661:31"><expr pos:start="2661:25" pos:end="2661:30"><name pos:start="2661:25" pos:end="2661:26">sz</name> <operator pos:start="2661:28" pos:end="2661:28">=</operator> <literal type="number" pos:start="2661:30" pos:end="2661:30">2</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="2663:23" pos:end="2667:21">else if <condition pos:start="2663:31" pos:end="2663:39">(<expr pos:start="2663:32" pos:end="2663:38"><name pos:start="2663:32" pos:end="2663:33">b1</name> <operator pos:start="2663:35" pos:end="2663:36">==</operator> <literal type="number" pos:start="2663:38" pos:end="2663:38">3</literal></expr>)</condition> <block pos:start="2663:41" pos:end="2667:21">{<block_content pos:start="2665:25" pos:end="2665:31">

                        <expr_stmt pos:start="2665:25" pos:end="2665:31"><expr pos:start="2665:25" pos:end="2665:30"><name pos:start="2665:25" pos:end="2665:26">sz</name> <operator pos:start="2665:28" pos:end="2665:28">=</operator> <literal type="number" pos:start="2665:30" pos:end="2665:30">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="2669:21" pos:end="2669:26">break;</break>



                <case pos:start="2673:17" pos:end="2673:26">case <expr pos:start="2673:22" pos:end="2673:25"><literal type="number" pos:start="2673:22" pos:end="2673:25">0x2e</literal></expr>:</case>  <comment type="block" pos:start="2673:29" pos:end="2673:44">/* ucomis[sd] */</comment>

                <case pos:start="2675:17" pos:end="2675:26">case <expr pos:start="2675:22" pos:end="2675:25"><literal type="number" pos:start="2675:22" pos:end="2675:25">0x2f</literal></expr>:</case>  <comment type="block" pos:start="2675:29" pos:end="2675:43">/* comis[sd] */</comment>

                    <if_stmt pos:start="2677:21" pos:end="2685:21"><if pos:start="2677:21" pos:end="2681:21">if <condition pos:start="2677:24" pos:end="2677:32">(<expr pos:start="2677:25" pos:end="2677:31"><name pos:start="2677:25" pos:end="2677:26">b1</name> <operator pos:start="2677:28" pos:end="2677:29">==</operator> <literal type="number" pos:start="2677:31" pos:end="2677:31">0</literal></expr>)</condition> <block pos:start="2677:34" pos:end="2681:21">{<block_content pos:start="2679:25" pos:end="2679:31">

                        <expr_stmt pos:start="2679:25" pos:end="2679:31"><expr pos:start="2679:25" pos:end="2679:30"><name pos:start="2679:25" pos:end="2679:26">sz</name> <operator pos:start="2679:28" pos:end="2679:28">=</operator> <literal type="number" pos:start="2679:30" pos:end="2679:30">2</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2681:23" pos:end="2685:21">else <block pos:start="2681:28" pos:end="2685:21">{<block_content pos:start="2683:25" pos:end="2683:31">

                        <expr_stmt pos:start="2683:25" pos:end="2683:31"><expr pos:start="2683:25" pos:end="2683:30"><name pos:start="2683:25" pos:end="2683:26">sz</name> <operator pos:start="2683:28" pos:end="2683:28">=</operator> <literal type="number" pos:start="2683:30" pos:end="2683:30">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2687:21" pos:end="2687:26">break;</break>

                </block_content>}</block></switch>



                <switch pos:start="2693:17" pos:end="2723:17">switch <condition pos:start="2693:24" pos:end="2693:27">(<expr pos:start="2693:25" pos:end="2693:26"><name pos:start="2693:25" pos:end="2693:26">sz</name></expr>)</condition> <block pos:start="2693:29" pos:end="2723:17">{<block_content pos:start="2695:17" pos:end="2721:26">

                <case pos:start="2695:17" pos:end="2695:23">case <expr pos:start="2695:22" pos:end="2695:22"><literal type="number" pos:start="2695:22" pos:end="2695:22">2</literal></expr>:</case>

                    <comment type="block" pos:start="2697:21" pos:end="2697:39">/* 32 bit access */</comment>

                    <expr_stmt pos:start="2699:21" pos:end="2699:58"><expr pos:start="2699:21" pos:end="2699:57"><call pos:start="2699:21" pos:end="2699:57"><name pos:start="2699:21" pos:end="2699:31">gen_op_ld_v</name><argument_list pos:start="2699:32" pos:end="2699:57">(<argument pos:start="2699:33" pos:end="2699:33"><expr pos:start="2699:33" pos:end="2699:33"><name pos:start="2699:33" pos:end="2699:33">s</name></expr></argument>, <argument pos:start="2699:36" pos:end="2699:40"><expr pos:start="2699:36" pos:end="2699:40"><name pos:start="2699:36" pos:end="2699:40">MO_32</name></expr></argument>, <argument pos:start="2699:43" pos:end="2699:48"><expr pos:start="2699:43" pos:end="2699:48"><name pos:start="2699:43" pos:end="2699:48">cpu_T0</name></expr></argument>, <argument pos:start="2699:51" pos:end="2699:56"><expr pos:start="2699:51" pos:end="2699:56"><name pos:start="2699:51" pos:end="2699:56">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2701:21" pos:end="2703:75"><expr pos:start="2701:21" pos:end="2703:74"><call pos:start="2701:21" pos:end="2703:74"><name pos:start="2701:21" pos:end="2701:35">tcg_gen_st32_tl</name><argument_list pos:start="2701:36" pos:end="2703:74">(<argument pos:start="2701:37" pos:end="2701:42"><expr pos:start="2701:37" pos:end="2701:42"><name pos:start="2701:37" pos:end="2701:42">cpu_T0</name></expr></argument>, <argument pos:start="2701:45" pos:end="2701:51"><expr pos:start="2701:45" pos:end="2701:51"><name pos:start="2701:45" pos:end="2701:51">cpu_env</name></expr></argument>,

                                    <argument pos:start="2703:37" pos:end="2703:73"><expr pos:start="2703:37" pos:end="2703:73"><call pos:start="2703:37" pos:end="2703:73"><name pos:start="2703:37" pos:end="2703:44">offsetof</name><argument_list pos:start="2703:45" pos:end="2703:73">(<argument pos:start="2703:46" pos:end="2703:56"><expr pos:start="2703:46" pos:end="2703:56"><name pos:start="2703:46" pos:end="2703:56">CPUX86State</name></expr></argument>,<argument pos:start="2703:58" pos:end="2703:72"><expr pos:start="2703:58" pos:end="2703:72"><call pos:start="2703:58" pos:end="2703:72"><name pos:start="2703:58" pos:end="2703:69"><name pos:start="2703:58" pos:end="2703:63">xmm_t0</name><operator pos:start="2703:64" pos:end="2703:64">.</operator><name pos:start="2703:65" pos:end="2703:69">ZMM_L</name></name><argument_list pos:start="2703:70" pos:end="2703:72">(<argument pos:start="2703:71" pos:end="2703:71"><expr pos:start="2703:71" pos:end="2703:71"><literal type="number" pos:start="2703:71" pos:end="2703:71">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2705:21" pos:end="2705:26">break;</break>

                <case pos:start="2707:17" pos:end="2707:23">case <expr pos:start="2707:22" pos:end="2707:22"><literal type="number" pos:start="2707:22" pos:end="2707:22">3</literal></expr>:</case>

                    <comment type="block" pos:start="2709:21" pos:end="2709:39">/* 64 bit access */</comment>

                    <expr_stmt pos:start="2711:21" pos:end="2711:78"><expr pos:start="2711:21" pos:end="2711:77"><call pos:start="2711:21" pos:end="2711:77"><name pos:start="2711:21" pos:end="2711:34">gen_ldq_env_A0</name><argument_list pos:start="2711:35" pos:end="2711:77">(<argument pos:start="2711:36" pos:end="2711:36"><expr pos:start="2711:36" pos:end="2711:36"><name pos:start="2711:36" pos:end="2711:36">s</name></expr></argument>, <argument pos:start="2711:39" pos:end="2711:76"><expr pos:start="2711:39" pos:end="2711:76"><call pos:start="2711:39" pos:end="2711:76"><name pos:start="2711:39" pos:end="2711:46">offsetof</name><argument_list pos:start="2711:47" pos:end="2711:76">(<argument pos:start="2711:48" pos:end="2711:58"><expr pos:start="2711:48" pos:end="2711:58"><name pos:start="2711:48" pos:end="2711:58">CPUX86State</name></expr></argument>, <argument pos:start="2711:61" pos:end="2711:75"><expr pos:start="2711:61" pos:end="2711:75"><call pos:start="2711:61" pos:end="2711:75"><name pos:start="2711:61" pos:end="2711:72"><name pos:start="2711:61" pos:end="2711:66">xmm_t0</name><operator pos:start="2711:67" pos:end="2711:67">.</operator><name pos:start="2711:68" pos:end="2711:72">ZMM_D</name></name><argument_list pos:start="2711:73" pos:end="2711:75">(<argument pos:start="2711:74" pos:end="2711:74"><expr pos:start="2711:74" pos:end="2711:74"><literal type="number" pos:start="2711:74" pos:end="2711:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2713:21" pos:end="2713:26">break;</break>

                <default pos:start="2715:17" pos:end="2715:24">default:</default>

                    <comment type="block" pos:start="2717:21" pos:end="2717:40">/* 128 bit access */</comment>

                    <expr_stmt pos:start="2719:21" pos:end="2719:50"><expr pos:start="2719:21" pos:end="2719:49"><call pos:start="2719:21" pos:end="2719:49"><name pos:start="2719:21" pos:end="2719:34">gen_ldo_env_A0</name><argument_list pos:start="2719:35" pos:end="2719:49">(<argument pos:start="2719:36" pos:end="2719:36"><expr pos:start="2719:36" pos:end="2719:36"><name pos:start="2719:36" pos:end="2719:36">s</name></expr></argument>, <argument pos:start="2719:39" pos:end="2719:48"><expr pos:start="2719:39" pos:end="2719:48"><name pos:start="2719:39" pos:end="2719:48">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2721:21" pos:end="2721:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="2725:15" pos:end="2731:13">else <block pos:start="2725:20" pos:end="2731:13">{<block_content pos:start="2727:17" pos:end="2729:64">

                <expr_stmt pos:start="2727:17" pos:end="2727:44"><expr pos:start="2727:17" pos:end="2727:43"><name pos:start="2727:17" pos:end="2727:18">rm</name> <operator pos:start="2727:20" pos:end="2727:20">=</operator> <operator pos:start="2727:22" pos:end="2727:22">(</operator><name pos:start="2727:23" pos:end="2727:27">modrm</name> <operator pos:start="2727:29" pos:end="2727:29">&amp;</operator> <literal type="number" pos:start="2727:31" pos:end="2727:31">7</literal><operator pos:start="2727:32" pos:end="2727:32">)</operator> <operator pos:start="2727:34" pos:end="2727:34">|</operator> <call pos:start="2727:36" pos:end="2727:43"><name pos:start="2727:36" pos:end="2727:40">REX_B</name><argument_list pos:start="2727:41" pos:end="2727:43">(<argument pos:start="2727:42" pos:end="2727:42"><expr pos:start="2727:42" pos:end="2727:42"><name pos:start="2727:42" pos:end="2727:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2729:17" pos:end="2729:64"><expr pos:start="2729:17" pos:end="2729:63"><name pos:start="2729:17" pos:end="2729:26">op2_offset</name> <operator pos:start="2729:28" pos:end="2729:28">=</operator> <call pos:start="2729:30" pos:end="2729:63"><name pos:start="2729:30" pos:end="2729:37">offsetof</name><argument_list pos:start="2729:38" pos:end="2729:63">(<argument pos:start="2729:39" pos:end="2729:49"><expr pos:start="2729:39" pos:end="2729:49"><name pos:start="2729:39" pos:end="2729:49">CPUX86State</name></expr></argument>,<argument pos:start="2729:51" pos:end="2729:62"><expr pos:start="2729:51" pos:end="2729:62"><name pos:start="2729:51" pos:end="2729:62"><name pos:start="2729:51" pos:end="2729:58">xmm_regs</name><index pos:start="2729:59" pos:end="2729:62">[<expr pos:start="2729:60" pos:end="2729:61"><name pos:start="2729:60" pos:end="2729:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2733:11" pos:end="2753:9">else <block pos:start="2733:16" pos:end="2753:9">{<block_content pos:start="2735:13" pos:end="2751:13">

            <expr_stmt pos:start="2735:13" pos:end="2735:63"><expr pos:start="2735:13" pos:end="2735:62"><name pos:start="2735:13" pos:end="2735:22">op1_offset</name> <operator pos:start="2735:24" pos:end="2735:24">=</operator> <call pos:start="2735:26" pos:end="2735:62"><name pos:start="2735:26" pos:end="2735:33">offsetof</name><argument_list pos:start="2735:34" pos:end="2735:62">(<argument pos:start="2735:35" pos:end="2735:45"><expr pos:start="2735:35" pos:end="2735:45"><name pos:start="2735:35" pos:end="2735:45">CPUX86State</name></expr></argument>,<argument pos:start="2735:47" pos:end="2735:61"><expr pos:start="2735:47" pos:end="2735:61"><name pos:start="2735:47" pos:end="2735:57"><name pos:start="2735:47" pos:end="2735:52">fpregs</name><index pos:start="2735:53" pos:end="2735:57">[<expr pos:start="2735:54" pos:end="2735:56"><name pos:start="2735:54" pos:end="2735:56">reg</name></expr>]</index></name><operator pos:start="2735:58" pos:end="2735:58">.</operator><name pos:start="2735:59" pos:end="2735:61">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2737:13" pos:end="2751:13"><if pos:start="2737:13" pos:end="2745:13">if <condition pos:start="2737:16" pos:end="2737:25">(<expr pos:start="2737:17" pos:end="2737:24"><name pos:start="2737:17" pos:end="2737:19">mod</name> <operator pos:start="2737:21" pos:end="2737:22">!=</operator> <literal type="number" pos:start="2737:24" pos:end="2737:24">3</literal></expr>)</condition> <block pos:start="2737:27" pos:end="2745:13">{<block_content pos:start="2739:17" pos:end="2743:46">

                <expr_stmt pos:start="2739:17" pos:end="2739:45"><expr pos:start="2739:17" pos:end="2739:44"><call pos:start="2739:17" pos:end="2739:44"><name pos:start="2739:17" pos:end="2739:29">gen_lea_modrm</name><argument_list pos:start="2739:30" pos:end="2739:44">(<argument pos:start="2739:31" pos:end="2739:33"><expr pos:start="2739:31" pos:end="2739:33"><name pos:start="2739:31" pos:end="2739:33">env</name></expr></argument>, <argument pos:start="2739:36" pos:end="2739:36"><expr pos:start="2739:36" pos:end="2739:36"><name pos:start="2739:36" pos:end="2739:36">s</name></expr></argument>, <argument pos:start="2739:39" pos:end="2739:43"><expr pos:start="2739:39" pos:end="2739:43"><name pos:start="2739:39" pos:end="2739:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2741:17" pos:end="2741:58"><expr pos:start="2741:17" pos:end="2741:57"><name pos:start="2741:17" pos:end="2741:26">op2_offset</name> <operator pos:start="2741:28" pos:end="2741:28">=</operator> <call pos:start="2741:30" pos:end="2741:57"><name pos:start="2741:30" pos:end="2741:37">offsetof</name><argument_list pos:start="2741:38" pos:end="2741:57">(<argument pos:start="2741:39" pos:end="2741:49"><expr pos:start="2741:39" pos:end="2741:49"><name pos:start="2741:39" pos:end="2741:49">CPUX86State</name></expr></argument>,<argument pos:start="2741:51" pos:end="2741:56"><expr pos:start="2741:51" pos:end="2741:56"><name pos:start="2741:51" pos:end="2741:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2743:17" pos:end="2743:46"><expr pos:start="2743:17" pos:end="2743:45"><call pos:start="2743:17" pos:end="2743:45"><name pos:start="2743:17" pos:end="2743:30">gen_ldq_env_A0</name><argument_list pos:start="2743:31" pos:end="2743:45">(<argument pos:start="2743:32" pos:end="2743:32"><expr pos:start="2743:32" pos:end="2743:32"><name pos:start="2743:32" pos:end="2743:32">s</name></expr></argument>, <argument pos:start="2743:35" pos:end="2743:44"><expr pos:start="2743:35" pos:end="2743:44"><name pos:start="2743:35" pos:end="2743:44">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2745:15" pos:end="2751:13">else <block pos:start="2745:20" pos:end="2751:13">{<block_content pos:start="2747:17" pos:end="2749:66">

                <expr_stmt pos:start="2747:17" pos:end="2747:33"><expr pos:start="2747:17" pos:end="2747:32"><name pos:start="2747:17" pos:end="2747:18">rm</name> <operator pos:start="2747:20" pos:end="2747:20">=</operator> <operator pos:start="2747:22" pos:end="2747:22">(</operator><name pos:start="2747:23" pos:end="2747:27">modrm</name> <operator pos:start="2747:29" pos:end="2747:29">&amp;</operator> <literal type="number" pos:start="2747:31" pos:end="2747:31">7</literal><operator pos:start="2747:32" pos:end="2747:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="2749:17" pos:end="2749:66"><expr pos:start="2749:17" pos:end="2749:65"><name pos:start="2749:17" pos:end="2749:26">op2_offset</name> <operator pos:start="2749:28" pos:end="2749:28">=</operator> <call pos:start="2749:30" pos:end="2749:65"><name pos:start="2749:30" pos:end="2749:37">offsetof</name><argument_list pos:start="2749:38" pos:end="2749:65">(<argument pos:start="2749:39" pos:end="2749:49"><expr pos:start="2749:39" pos:end="2749:49"><name pos:start="2749:39" pos:end="2749:49">CPUX86State</name></expr></argument>,<argument pos:start="2749:51" pos:end="2749:64"><expr pos:start="2749:51" pos:end="2749:64"><name pos:start="2749:51" pos:end="2749:60"><name pos:start="2749:51" pos:end="2749:56">fpregs</name><index pos:start="2749:57" pos:end="2749:60">[<expr pos:start="2749:58" pos:end="2749:59"><name pos:start="2749:58" pos:end="2749:59">rm</name></expr>]</index></name><operator pos:start="2749:61" pos:end="2749:61">.</operator><name pos:start="2749:62" pos:end="2749:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="2755:9" pos:end="2861:9">switch<condition pos:start="2755:15" pos:end="2755:17">(<expr pos:start="2755:16" pos:end="2755:16"><name pos:start="2755:16" pos:end="2755:16">b</name></expr>)</condition> <block pos:start="2755:19" pos:end="2861:9">{<block_content pos:start="2757:9" pos:end="2859:18">

        <case pos:start="2757:9" pos:end="2757:18">case <expr pos:start="2757:14" pos:end="2757:17"><literal type="number" pos:start="2757:14" pos:end="2757:17">0x0f</literal></expr>:</case> <comment type="block" pos:start="2757:20" pos:end="2757:42">/* 3DNow! data insns */</comment>

            <expr_stmt pos:start="2759:13" pos:end="2759:46"><expr pos:start="2759:13" pos:end="2759:45"><name pos:start="2759:13" pos:end="2759:15">val</name> <operator pos:start="2759:17" pos:end="2759:17">=</operator> <call pos:start="2759:19" pos:end="2759:45"><name pos:start="2759:19" pos:end="2759:31">cpu_ldub_code</name><argument_list pos:start="2759:32" pos:end="2759:45">(<argument pos:start="2759:33" pos:end="2759:35"><expr pos:start="2759:33" pos:end="2759:35"><name pos:start="2759:33" pos:end="2759:35">env</name></expr></argument>, <argument pos:start="2759:38" pos:end="2759:44"><expr pos:start="2759:38" pos:end="2759:44"><name pos:start="2759:38" pos:end="2759:42"><name pos:start="2759:38" pos:end="2759:38">s</name><operator pos:start="2759:39" pos:end="2759:40">-&gt;</operator><name pos:start="2759:41" pos:end="2759:42">pc</name></name><operator pos:start="2759:43" pos:end="2759:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2761:13" pos:end="2761:44"><expr pos:start="2761:13" pos:end="2761:43"><name pos:start="2761:13" pos:end="2761:22">sse_fn_epp</name> <operator pos:start="2761:24" pos:end="2761:24">=</operator> <name pos:start="2761:26" pos:end="2761:43"><name pos:start="2761:26" pos:end="2761:38">sse_op_table5</name><index pos:start="2761:39" pos:end="2761:43">[<expr pos:start="2761:40" pos:end="2761:42"><name pos:start="2761:40" pos:end="2761:42">val</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="2763:13" pos:end="2767:13"><if pos:start="2763:13" pos:end="2767:13">if <condition pos:start="2763:16" pos:end="2763:28">(<expr pos:start="2763:17" pos:end="2763:27"><operator pos:start="2763:17" pos:end="2763:17">!</operator><name pos:start="2763:18" pos:end="2763:27">sse_fn_epp</name></expr>)</condition> <block pos:start="2763:30" pos:end="2767:13">{<block_content pos:start="2765:17" pos:end="2765:32">

                <goto pos:start="2765:17" pos:end="2765:32">goto <name pos:start="2765:22" pos:end="2765:31">unknown_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="2769:13" pos:end="2773:13"><if pos:start="2769:13" pos:end="2773:13">if <condition pos:start="2769:16" pos:end="2769:61">(<expr pos:start="2769:17" pos:end="2769:60"><operator pos:start="2769:17" pos:end="2769:17">!</operator><operator pos:start="2769:18" pos:end="2769:18">(</operator><name pos:start="2769:19" pos:end="2769:40"><name pos:start="2769:19" pos:end="2769:19">s</name><operator pos:start="2769:20" pos:end="2769:21">-&gt;</operator><name pos:start="2769:22" pos:end="2769:40">cpuid_ext2_features</name></name> <operator pos:start="2769:42" pos:end="2769:42">&amp;</operator> <name pos:start="2769:44" pos:end="2769:59">CPUID_EXT2_3DNOW</name><operator pos:start="2769:60" pos:end="2769:60">)</operator></expr>)</condition> <block pos:start="2769:63" pos:end="2773:13">{<block_content pos:start="2771:17" pos:end="2771:32">

                <goto pos:start="2771:17" pos:end="2771:32">goto <name pos:start="2771:22" pos:end="2771:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2775:13" pos:end="2775:60"><expr pos:start="2775:13" pos:end="2775:59"><call pos:start="2775:13" pos:end="2775:59"><name pos:start="2775:13" pos:end="2775:28">tcg_gen_addi_ptr</name><argument_list pos:start="2775:29" pos:end="2775:59">(<argument pos:start="2775:30" pos:end="2775:37"><expr pos:start="2775:30" pos:end="2775:37"><name pos:start="2775:30" pos:end="2775:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2775:40" pos:end="2775:46"><expr pos:start="2775:40" pos:end="2775:46"><name pos:start="2775:40" pos:end="2775:46">cpu_env</name></expr></argument>, <argument pos:start="2775:49" pos:end="2775:58"><expr pos:start="2775:49" pos:end="2775:58"><name pos:start="2775:49" pos:end="2775:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2777:13" pos:end="2777:60"><expr pos:start="2777:13" pos:end="2777:59"><call pos:start="2777:13" pos:end="2777:59"><name pos:start="2777:13" pos:end="2777:28">tcg_gen_addi_ptr</name><argument_list pos:start="2777:29" pos:end="2777:59">(<argument pos:start="2777:30" pos:end="2777:37"><expr pos:start="2777:30" pos:end="2777:37"><name pos:start="2777:30" pos:end="2777:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2777:40" pos:end="2777:46"><expr pos:start="2777:40" pos:end="2777:46"><name pos:start="2777:40" pos:end="2777:46">cpu_env</name></expr></argument>, <argument pos:start="2777:49" pos:end="2777:58"><expr pos:start="2777:49" pos:end="2777:58"><name pos:start="2777:49" pos:end="2777:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2779:13" pos:end="2779:52"><expr pos:start="2779:13" pos:end="2779:51"><call pos:start="2779:13" pos:end="2779:51"><name pos:start="2779:13" pos:end="2779:22">sse_fn_epp</name><argument_list pos:start="2779:23" pos:end="2779:51">(<argument pos:start="2779:24" pos:end="2779:30"><expr pos:start="2779:24" pos:end="2779:30"><name pos:start="2779:24" pos:end="2779:30">cpu_env</name></expr></argument>, <argument pos:start="2779:33" pos:end="2779:40"><expr pos:start="2779:33" pos:end="2779:40"><name pos:start="2779:33" pos:end="2779:40">cpu_ptr0</name></expr></argument>, <argument pos:start="2779:43" pos:end="2779:50"><expr pos:start="2779:43" pos:end="2779:50"><name pos:start="2779:43" pos:end="2779:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2781:13" pos:end="2781:18">break;</break>

        <case pos:start="2783:9" pos:end="2783:18">case <expr pos:start="2783:14" pos:end="2783:17"><literal type="number" pos:start="2783:14" pos:end="2783:17">0x70</literal></expr>:</case> <comment type="block" pos:start="2783:20" pos:end="2783:36">/* pshufx insn */</comment>

        <case pos:start="2785:9" pos:end="2785:18">case <expr pos:start="2785:14" pos:end="2785:17"><literal type="number" pos:start="2785:14" pos:end="2785:17">0xc6</literal></expr>:</case> <comment type="block" pos:start="2785:20" pos:end="2785:36">/* pshufx insn */</comment>

            <expr_stmt pos:start="2787:13" pos:end="2787:46"><expr pos:start="2787:13" pos:end="2787:45"><name pos:start="2787:13" pos:end="2787:15">val</name> <operator pos:start="2787:17" pos:end="2787:17">=</operator> <call pos:start="2787:19" pos:end="2787:45"><name pos:start="2787:19" pos:end="2787:31">cpu_ldub_code</name><argument_list pos:start="2787:32" pos:end="2787:45">(<argument pos:start="2787:33" pos:end="2787:35"><expr pos:start="2787:33" pos:end="2787:35"><name pos:start="2787:33" pos:end="2787:35">env</name></expr></argument>, <argument pos:start="2787:38" pos:end="2787:44"><expr pos:start="2787:38" pos:end="2787:44"><name pos:start="2787:38" pos:end="2787:42"><name pos:start="2787:38" pos:end="2787:38">s</name><operator pos:start="2787:39" pos:end="2787:40">-&gt;</operator><name pos:start="2787:41" pos:end="2787:42">pc</name></name><operator pos:start="2787:43" pos:end="2787:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2789:13" pos:end="2789:60"><expr pos:start="2789:13" pos:end="2789:59"><call pos:start="2789:13" pos:end="2789:59"><name pos:start="2789:13" pos:end="2789:28">tcg_gen_addi_ptr</name><argument_list pos:start="2789:29" pos:end="2789:59">(<argument pos:start="2789:30" pos:end="2789:37"><expr pos:start="2789:30" pos:end="2789:37"><name pos:start="2789:30" pos:end="2789:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2789:40" pos:end="2789:46"><expr pos:start="2789:40" pos:end="2789:46"><name pos:start="2789:40" pos:end="2789:46">cpu_env</name></expr></argument>, <argument pos:start="2789:49" pos:end="2789:58"><expr pos:start="2789:49" pos:end="2789:58"><name pos:start="2789:49" pos:end="2789:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2791:13" pos:end="2791:60"><expr pos:start="2791:13" pos:end="2791:59"><call pos:start="2791:13" pos:end="2791:59"><name pos:start="2791:13" pos:end="2791:28">tcg_gen_addi_ptr</name><argument_list pos:start="2791:29" pos:end="2791:59">(<argument pos:start="2791:30" pos:end="2791:37"><expr pos:start="2791:30" pos:end="2791:37"><name pos:start="2791:30" pos:end="2791:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2791:40" pos:end="2791:46"><expr pos:start="2791:40" pos:end="2791:46"><name pos:start="2791:40" pos:end="2791:46">cpu_env</name></expr></argument>, <argument pos:start="2791:49" pos:end="2791:58"><expr pos:start="2791:49" pos:end="2791:58"><name pos:start="2791:49" pos:end="2791:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2793:13" pos:end="2793:45">/* XXX: introduce a new table? */</comment>

            <expr_stmt pos:start="2795:13" pos:end="2795:51"><expr pos:start="2795:13" pos:end="2795:50"><name pos:start="2795:13" pos:end="2795:22">sse_fn_ppi</name> <operator pos:start="2795:24" pos:end="2795:24">=</operator> <operator pos:start="2795:26" pos:end="2795:26">(</operator><name pos:start="2795:27" pos:end="2795:39">SSEFunc_0_ppi</name><operator pos:start="2795:40" pos:end="2795:40">)</operator><name pos:start="2795:41" pos:end="2795:50">sse_fn_epp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2797:13" pos:end="2797:63"><expr pos:start="2797:13" pos:end="2797:62"><call pos:start="2797:13" pos:end="2797:62"><name pos:start="2797:13" pos:end="2797:22">sse_fn_ppi</name><argument_list pos:start="2797:23" pos:end="2797:62">(<argument pos:start="2797:24" pos:end="2797:31"><expr pos:start="2797:24" pos:end="2797:31"><name pos:start="2797:24" pos:end="2797:31">cpu_ptr0</name></expr></argument>, <argument pos:start="2797:34" pos:end="2797:41"><expr pos:start="2797:34" pos:end="2797:41"><name pos:start="2797:34" pos:end="2797:41">cpu_ptr1</name></expr></argument>, <argument pos:start="2797:44" pos:end="2797:61"><expr pos:start="2797:44" pos:end="2797:61"><call pos:start="2797:44" pos:end="2797:61"><name pos:start="2797:44" pos:end="2797:56">tcg_const_i32</name><argument_list pos:start="2797:57" pos:end="2797:61">(<argument pos:start="2797:58" pos:end="2797:60"><expr pos:start="2797:58" pos:end="2797:60"><name pos:start="2797:58" pos:end="2797:60">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2799:13" pos:end="2799:18">break;</break>

        <case pos:start="2801:9" pos:end="2801:18">case <expr pos:start="2801:14" pos:end="2801:17"><literal type="number" pos:start="2801:14" pos:end="2801:17">0xc2</literal></expr>:</case>

            <comment type="block" pos:start="2803:13" pos:end="2803:31">/* compare insns */</comment>

            <expr_stmt pos:start="2805:13" pos:end="2805:46"><expr pos:start="2805:13" pos:end="2805:45"><name pos:start="2805:13" pos:end="2805:15">val</name> <operator pos:start="2805:17" pos:end="2805:17">=</operator> <call pos:start="2805:19" pos:end="2805:45"><name pos:start="2805:19" pos:end="2805:31">cpu_ldub_code</name><argument_list pos:start="2805:32" pos:end="2805:45">(<argument pos:start="2805:33" pos:end="2805:35"><expr pos:start="2805:33" pos:end="2805:35"><name pos:start="2805:33" pos:end="2805:35">env</name></expr></argument>, <argument pos:start="2805:38" pos:end="2805:44"><expr pos:start="2805:38" pos:end="2805:44"><name pos:start="2805:38" pos:end="2805:42"><name pos:start="2805:38" pos:end="2805:38">s</name><operator pos:start="2805:39" pos:end="2805:40">-&gt;</operator><name pos:start="2805:41" pos:end="2805:42">pc</name></name><operator pos:start="2805:43" pos:end="2805:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2807:13" pos:end="2809:32"><if pos:start="2807:13" pos:end="2809:32">if <condition pos:start="2807:16" pos:end="2807:25">(<expr pos:start="2807:17" pos:end="2807:24"><name pos:start="2807:17" pos:end="2807:19">val</name> <operator pos:start="2807:21" pos:end="2807:22">&gt;=</operator> <literal type="number" pos:start="2807:24" pos:end="2807:24">8</literal></expr>)</condition><block type="pseudo" pos:start="2809:17" pos:end="2809:32"><block_content pos:start="2809:17" pos:end="2809:32">

                <goto pos:start="2809:17" pos:end="2809:32">goto <name pos:start="2809:22" pos:end="2809:31">unknown_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2811:13" pos:end="2811:48"><expr pos:start="2811:13" pos:end="2811:47"><name pos:start="2811:13" pos:end="2811:22">sse_fn_epp</name> <operator pos:start="2811:24" pos:end="2811:24">=</operator> <name pos:start="2811:26" pos:end="2811:47"><name pos:start="2811:26" pos:end="2811:38">sse_op_table4</name><index pos:start="2811:39" pos:end="2811:43">[<expr pos:start="2811:40" pos:end="2811:42"><name pos:start="2811:40" pos:end="2811:42">val</name></expr>]</index><index pos:start="2811:44" pos:end="2811:47">[<expr pos:start="2811:45" pos:end="2811:46"><name pos:start="2811:45" pos:end="2811:46">b1</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="2815:13" pos:end="2815:60"><expr pos:start="2815:13" pos:end="2815:59"><call pos:start="2815:13" pos:end="2815:59"><name pos:start="2815:13" pos:end="2815:28">tcg_gen_addi_ptr</name><argument_list pos:start="2815:29" pos:end="2815:59">(<argument pos:start="2815:30" pos:end="2815:37"><expr pos:start="2815:30" pos:end="2815:37"><name pos:start="2815:30" pos:end="2815:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2815:40" pos:end="2815:46"><expr pos:start="2815:40" pos:end="2815:46"><name pos:start="2815:40" pos:end="2815:46">cpu_env</name></expr></argument>, <argument pos:start="2815:49" pos:end="2815:58"><expr pos:start="2815:49" pos:end="2815:58"><name pos:start="2815:49" pos:end="2815:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2817:13" pos:end="2817:60"><expr pos:start="2817:13" pos:end="2817:59"><call pos:start="2817:13" pos:end="2817:59"><name pos:start="2817:13" pos:end="2817:28">tcg_gen_addi_ptr</name><argument_list pos:start="2817:29" pos:end="2817:59">(<argument pos:start="2817:30" pos:end="2817:37"><expr pos:start="2817:30" pos:end="2817:37"><name pos:start="2817:30" pos:end="2817:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2817:40" pos:end="2817:46"><expr pos:start="2817:40" pos:end="2817:46"><name pos:start="2817:40" pos:end="2817:46">cpu_env</name></expr></argument>, <argument pos:start="2817:49" pos:end="2817:58"><expr pos:start="2817:49" pos:end="2817:58"><name pos:start="2817:49" pos:end="2817:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2819:13" pos:end="2819:52"><expr pos:start="2819:13" pos:end="2819:51"><call pos:start="2819:13" pos:end="2819:51"><name pos:start="2819:13" pos:end="2819:22">sse_fn_epp</name><argument_list pos:start="2819:23" pos:end="2819:51">(<argument pos:start="2819:24" pos:end="2819:30"><expr pos:start="2819:24" pos:end="2819:30"><name pos:start="2819:24" pos:end="2819:30">cpu_env</name></expr></argument>, <argument pos:start="2819:33" pos:end="2819:40"><expr pos:start="2819:33" pos:end="2819:40"><name pos:start="2819:33" pos:end="2819:40">cpu_ptr0</name></expr></argument>, <argument pos:start="2819:43" pos:end="2819:50"><expr pos:start="2819:43" pos:end="2819:50"><name pos:start="2819:43" pos:end="2819:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2821:13" pos:end="2821:18">break;</break>

        <case pos:start="2823:9" pos:end="2823:18">case <expr pos:start="2823:14" pos:end="2823:17"><literal type="number" pos:start="2823:14" pos:end="2823:17">0xf7</literal></expr>:</case>

            <comment type="block" pos:start="2825:13" pos:end="2825:46">/* maskmov : we must prepare A0 */</comment>

            <if_stmt pos:start="2827:13" pos:end="2829:32"><if pos:start="2827:13" pos:end="2829:32">if <condition pos:start="2827:16" pos:end="2827:25">(<expr pos:start="2827:17" pos:end="2827:24"><name pos:start="2827:17" pos:end="2827:19">mod</name> <operator pos:start="2827:21" pos:end="2827:22">!=</operator> <literal type="number" pos:start="2827:24" pos:end="2827:24">3</literal></expr>)</condition><block type="pseudo" pos:start="2829:17" pos:end="2829:32"><block_content pos:start="2829:17" pos:end="2829:32">

                <goto pos:start="2829:17" pos:end="2829:32">goto <name pos:start="2829:22" pos:end="2829:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2831:13" pos:end="2831:52"><expr pos:start="2831:13" pos:end="2831:51"><call pos:start="2831:13" pos:end="2831:51"><name pos:start="2831:13" pos:end="2831:26">tcg_gen_mov_tl</name><argument_list pos:start="2831:27" pos:end="2831:51">(<argument pos:start="2831:28" pos:end="2831:33"><expr pos:start="2831:28" pos:end="2831:33"><name pos:start="2831:28" pos:end="2831:33">cpu_A0</name></expr></argument>, <argument pos:start="2831:36" pos:end="2831:50"><expr pos:start="2831:36" pos:end="2831:50"><name pos:start="2831:36" pos:end="2831:50"><name pos:start="2831:36" pos:end="2831:43">cpu_regs</name><index pos:start="2831:44" pos:end="2831:50">[<expr pos:start="2831:45" pos:end="2831:49"><name pos:start="2831:45" pos:end="2831:49">R_EDI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2833:13" pos:end="2833:39"><expr pos:start="2833:13" pos:end="2833:38"><call pos:start="2833:13" pos:end="2833:38"><name pos:start="2833:13" pos:end="2833:20">gen_extu</name><argument_list pos:start="2833:21" pos:end="2833:38">(<argument pos:start="2833:22" pos:end="2833:29"><expr pos:start="2833:22" pos:end="2833:29"><name pos:start="2833:22" pos:end="2833:29"><name pos:start="2833:22" pos:end="2833:22">s</name><operator pos:start="2833:23" pos:end="2833:24">-&gt;</operator><name pos:start="2833:25" pos:end="2833:29">aflag</name></name></expr></argument>, <argument pos:start="2833:32" pos:end="2833:37"><expr pos:start="2833:32" pos:end="2833:37"><name pos:start="2833:32" pos:end="2833:37">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2835:13" pos:end="2835:33"><expr pos:start="2835:13" pos:end="2835:32"><call pos:start="2835:13" pos:end="2835:32"><name pos:start="2835:13" pos:end="2835:29">gen_add_A0_ds_seg</name><argument_list pos:start="2835:30" pos:end="2835:32">(<argument pos:start="2835:31" pos:end="2835:31"><expr pos:start="2835:31" pos:end="2835:31"><name pos:start="2835:31" pos:end="2835:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="2839:13" pos:end="2839:60"><expr pos:start="2839:13" pos:end="2839:59"><call pos:start="2839:13" pos:end="2839:59"><name pos:start="2839:13" pos:end="2839:28">tcg_gen_addi_ptr</name><argument_list pos:start="2839:29" pos:end="2839:59">(<argument pos:start="2839:30" pos:end="2839:37"><expr pos:start="2839:30" pos:end="2839:37"><name pos:start="2839:30" pos:end="2839:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2839:40" pos:end="2839:46"><expr pos:start="2839:40" pos:end="2839:46"><name pos:start="2839:40" pos:end="2839:46">cpu_env</name></expr></argument>, <argument pos:start="2839:49" pos:end="2839:58"><expr pos:start="2839:49" pos:end="2839:58"><name pos:start="2839:49" pos:end="2839:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2841:13" pos:end="2841:60"><expr pos:start="2841:13" pos:end="2841:59"><call pos:start="2841:13" pos:end="2841:59"><name pos:start="2841:13" pos:end="2841:28">tcg_gen_addi_ptr</name><argument_list pos:start="2841:29" pos:end="2841:59">(<argument pos:start="2841:30" pos:end="2841:37"><expr pos:start="2841:30" pos:end="2841:37"><name pos:start="2841:30" pos:end="2841:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2841:40" pos:end="2841:46"><expr pos:start="2841:40" pos:end="2841:46"><name pos:start="2841:40" pos:end="2841:46">cpu_env</name></expr></argument>, <argument pos:start="2841:49" pos:end="2841:58"><expr pos:start="2841:49" pos:end="2841:58"><name pos:start="2841:49" pos:end="2841:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2843:13" pos:end="2843:45">/* XXX: introduce a new table? */</comment>

            <expr_stmt pos:start="2845:13" pos:end="2845:53"><expr pos:start="2845:13" pos:end="2845:52"><name pos:start="2845:13" pos:end="2845:23">sse_fn_eppt</name> <operator pos:start="2845:25" pos:end="2845:25">=</operator> <operator pos:start="2845:27" pos:end="2845:27">(</operator><name pos:start="2845:28" pos:end="2845:41">SSEFunc_0_eppt</name><operator pos:start="2845:42" pos:end="2845:42">)</operator><name pos:start="2845:43" pos:end="2845:52">sse_fn_epp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2847:13" pos:end="2847:61"><expr pos:start="2847:13" pos:end="2847:60"><call pos:start="2847:13" pos:end="2847:60"><name pos:start="2847:13" pos:end="2847:23">sse_fn_eppt</name><argument_list pos:start="2847:24" pos:end="2847:60">(<argument pos:start="2847:25" pos:end="2847:31"><expr pos:start="2847:25" pos:end="2847:31"><name pos:start="2847:25" pos:end="2847:31">cpu_env</name></expr></argument>, <argument pos:start="2847:34" pos:end="2847:41"><expr pos:start="2847:34" pos:end="2847:41"><name pos:start="2847:34" pos:end="2847:41">cpu_ptr0</name></expr></argument>, <argument pos:start="2847:44" pos:end="2847:51"><expr pos:start="2847:44" pos:end="2847:51"><name pos:start="2847:44" pos:end="2847:51">cpu_ptr1</name></expr></argument>, <argument pos:start="2847:54" pos:end="2847:59"><expr pos:start="2847:54" pos:end="2847:59"><name pos:start="2847:54" pos:end="2847:59">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2849:13" pos:end="2849:18">break;</break>

        <default pos:start="2851:9" pos:end="2851:16">default:</default>

            <expr_stmt pos:start="2853:13" pos:end="2853:60"><expr pos:start="2853:13" pos:end="2853:59"><call pos:start="2853:13" pos:end="2853:59"><name pos:start="2853:13" pos:end="2853:28">tcg_gen_addi_ptr</name><argument_list pos:start="2853:29" pos:end="2853:59">(<argument pos:start="2853:30" pos:end="2853:37"><expr pos:start="2853:30" pos:end="2853:37"><name pos:start="2853:30" pos:end="2853:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2853:40" pos:end="2853:46"><expr pos:start="2853:40" pos:end="2853:46"><name pos:start="2853:40" pos:end="2853:46">cpu_env</name></expr></argument>, <argument pos:start="2853:49" pos:end="2853:58"><expr pos:start="2853:49" pos:end="2853:58"><name pos:start="2853:49" pos:end="2853:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2855:13" pos:end="2855:60"><expr pos:start="2855:13" pos:end="2855:59"><call pos:start="2855:13" pos:end="2855:59"><name pos:start="2855:13" pos:end="2855:28">tcg_gen_addi_ptr</name><argument_list pos:start="2855:29" pos:end="2855:59">(<argument pos:start="2855:30" pos:end="2855:37"><expr pos:start="2855:30" pos:end="2855:37"><name pos:start="2855:30" pos:end="2855:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2855:40" pos:end="2855:46"><expr pos:start="2855:40" pos:end="2855:46"><name pos:start="2855:40" pos:end="2855:46">cpu_env</name></expr></argument>, <argument pos:start="2855:49" pos:end="2855:58"><expr pos:start="2855:49" pos:end="2855:58"><name pos:start="2855:49" pos:end="2855:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2857:13" pos:end="2857:52"><expr pos:start="2857:13" pos:end="2857:51"><call pos:start="2857:13" pos:end="2857:51"><name pos:start="2857:13" pos:end="2857:22">sse_fn_epp</name><argument_list pos:start="2857:23" pos:end="2857:51">(<argument pos:start="2857:24" pos:end="2857:30"><expr pos:start="2857:24" pos:end="2857:30"><name pos:start="2857:24" pos:end="2857:30">cpu_env</name></expr></argument>, <argument pos:start="2857:33" pos:end="2857:40"><expr pos:start="2857:33" pos:end="2857:40"><name pos:start="2857:33" pos:end="2857:40">cpu_ptr0</name></expr></argument>, <argument pos:start="2857:43" pos:end="2857:50"><expr pos:start="2857:43" pos:end="2857:50"><name pos:start="2857:43" pos:end="2857:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2859:13" pos:end="2859:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="2863:9" pos:end="2867:9"><if pos:start="2863:9" pos:end="2867:9">if <condition pos:start="2863:12" pos:end="2863:35">(<expr pos:start="2863:13" pos:end="2863:34"><name pos:start="2863:13" pos:end="2863:13">b</name> <operator pos:start="2863:15" pos:end="2863:16">==</operator> <literal type="number" pos:start="2863:18" pos:end="2863:21">0x2e</literal> <operator pos:start="2863:23" pos:end="2863:24">||</operator> <name pos:start="2863:26" pos:end="2863:26">b</name> <operator pos:start="2863:28" pos:end="2863:29">==</operator> <literal type="number" pos:start="2863:31" pos:end="2863:34">0x2f</literal></expr>)</condition> <block pos:start="2863:37" pos:end="2867:9">{<block_content pos:start="2865:13" pos:end="2865:39">

            <expr_stmt pos:start="2865:13" pos:end="2865:39"><expr pos:start="2865:13" pos:end="2865:38"><call pos:start="2865:13" pos:end="2865:38"><name pos:start="2865:13" pos:end="2865:21">set_cc_op</name><argument_list pos:start="2865:22" pos:end="2865:38">(<argument pos:start="2865:23" pos:end="2865:23"><expr pos:start="2865:23" pos:end="2865:23"><name pos:start="2865:23" pos:end="2865:23">s</name></expr></argument>, <argument pos:start="2865:26" pos:end="2865:37"><expr pos:start="2865:26" pos:end="2865:37"><name pos:start="2865:26" pos:end="2865:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
