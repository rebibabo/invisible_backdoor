<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14230.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:28">memcard_read</name><parameter_list pos:start="1:29" pos:end="3:43">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:66"><decl pos:start="1:44" pos:end="1:66"><type pos:start="1:44" pos:end="1:66"><name pos:start="1:44" pos:end="1:61">target_phys_addr_t</name></type> <name pos:start="1:63" pos:end="1:66">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:37">unsigned</name></type> <name pos:start="3:39" pos:end="3:42">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:13">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25">MilkymistMemcardState</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:28">s</name> <init pos:start="7:30" pos:end="7:37">= <expr pos:start="7:32" pos:end="7:37"><name pos:start="7:32" pos:end="7:37">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:14">r</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:15"><expr pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:8">addr</name> <operator pos:start="13:10" pos:end="13:12">&gt;&gt;=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">2</literal></expr>;</expr_stmt>

    <switch pos:start="15:5" pos:end="85:5">switch <condition pos:start="15:12" pos:end="15:17">(<expr pos:start="15:13" pos:end="15:16"><name pos:start="15:13" pos:end="15:16">addr</name></expr>)</condition> <block pos:start="15:19" pos:end="85:5">{<block_content pos:start="17:5" pos:end="83:14">

    <case pos:start="17:5" pos:end="17:15">case <expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:14">R_CMD</name></expr>:</case>

        <if_stmt pos:start="19:9" pos:end="37:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:24">(<expr pos:start="19:13" pos:end="19:23"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:23"><name pos:start="19:14" pos:end="19:14">s</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:23">enabled</name></name></expr>)</condition> <block pos:start="19:26" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:21">

            <expr_stmt pos:start="21:13" pos:end="21:21"><expr pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:13">r</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="number" pos:start="21:17" pos:end="21:20">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="23:11" pos:end="37:9">else <block pos:start="23:16" pos:end="37:9">{<block_content pos:start="25:13" pos:end="35:13">

            <expr_stmt pos:start="25:13" pos:end="25:52"><expr pos:start="25:13" pos:end="25:51"><name pos:start="25:13" pos:end="25:13">r</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:51"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:27">response</name><index pos:start="25:28" pos:end="25:51">[<expr pos:start="25:29" pos:end="25:50"><name pos:start="25:29" pos:end="25:48"><name pos:start="25:29" pos:end="25:29">s</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:48">response_read_ptr</name></name><operator pos:start="25:49" pos:end="25:50">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="35:13"><if pos:start="27:13" pos:end="35:13">if <condition pos:start="27:16" pos:end="27:55">(<expr pos:start="27:17" pos:end="27:54"><name pos:start="27:17" pos:end="27:36"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:36">response_read_ptr</name></name> <operator pos:start="27:38" pos:end="27:38">&gt;</operator> <name pos:start="27:40" pos:end="27:54"><name pos:start="27:40" pos:end="27:40">s</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:54">response_len</name></name></expr>)</condition> <block pos:start="27:57" pos:end="35:13">{<block_content pos:start="29:17" pos:end="33:41">

                <expr_stmt pos:start="29:17" pos:end="31:73"><expr pos:start="29:17" pos:end="31:72"><call pos:start="29:17" pos:end="31:72"><name pos:start="29:17" pos:end="29:28">error_report</name><argument_list pos:start="29:29" pos:end="31:72">(<argument pos:start="29:30" pos:end="31:71"><expr pos:start="29:30" pos:end="31:71"><literal type="string" pos:start="29:30" pos:end="29:50">"milkymist_memcard: "</literal>

                        <literal type="string" pos:start="31:25" pos:end="31:71">"read more cmd bytes than available. Clipping."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:41"><expr pos:start="33:17" pos:end="33:40"><name pos:start="33:17" pos:end="33:36"><name pos:start="33:17" pos:end="33:17">s</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:36">response_read_ptr</name></name> <operator pos:start="33:38" pos:end="33:38">=</operator> <literal type="number" pos:start="33:40" pos:end="33:40">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:15">case <expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:14">R_DAT</name></expr>:</case>

        <if_stmt pos:start="43:9" pos:end="59:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:23"><name pos:start="43:14" pos:end="43:14">s</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:23">enabled</name></name></expr>)</condition> <block pos:start="43:26" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:27">

            <expr_stmt pos:start="45:13" pos:end="45:27"><expr pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:13">r</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <literal type="number" pos:start="45:17" pos:end="45:26">0xffffffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="59:9">else <block pos:start="47:16" pos:end="59:9">{<block_content pos:start="49:13" pos:end="57:39">

            <expr_stmt pos:start="49:13" pos:end="49:18"><expr pos:start="49:13" pos:end="49:17"><name pos:start="49:13" pos:end="49:13">r</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <literal type="number" pos:start="49:17" pos:end="49:17">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:45"><expr pos:start="51:13" pos:end="51:44"><name pos:start="51:13" pos:end="51:13">r</name> <operator pos:start="51:15" pos:end="51:16">|=</operator> <call pos:start="51:18" pos:end="51:38"><name pos:start="51:18" pos:end="51:29">sd_read_data</name><argument_list pos:start="51:30" pos:end="51:38">(<argument pos:start="51:31" pos:end="51:37"><expr pos:start="51:31" pos:end="51:37"><name pos:start="51:31" pos:end="51:37"><name pos:start="51:31" pos:end="51:31">s</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:37">card</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:40" pos:end="51:41">&lt;&lt;</operator> <literal type="number" pos:start="51:43" pos:end="51:44">24</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:45"><expr pos:start="53:13" pos:end="53:44"><name pos:start="53:13" pos:end="53:13">r</name> <operator pos:start="53:15" pos:end="53:16">|=</operator> <call pos:start="53:18" pos:end="53:38"><name pos:start="53:18" pos:end="53:29">sd_read_data</name><argument_list pos:start="53:30" pos:end="53:38">(<argument pos:start="53:31" pos:end="53:37"><expr pos:start="53:31" pos:end="53:37"><name pos:start="53:31" pos:end="53:37"><name pos:start="53:31" pos:end="53:31">s</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:37">card</name></name></expr></argument>)</argument_list></call> <operator pos:start="53:40" pos:end="53:41">&lt;&lt;</operator> <literal type="number" pos:start="53:43" pos:end="53:44">16</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:44"><expr pos:start="55:13" pos:end="55:43"><name pos:start="55:13" pos:end="55:13">r</name> <operator pos:start="55:15" pos:end="55:16">|=</operator> <call pos:start="55:18" pos:end="55:38"><name pos:start="55:18" pos:end="55:29">sd_read_data</name><argument_list pos:start="55:30" pos:end="55:38">(<argument pos:start="55:31" pos:end="55:37"><expr pos:start="55:31" pos:end="55:37"><name pos:start="55:31" pos:end="55:37"><name pos:start="55:31" pos:end="55:31">s</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:37">card</name></name></expr></argument>)</argument_list></call> <operator pos:start="55:40" pos:end="55:41">&lt;&lt;</operator> <literal type="number" pos:start="55:43" pos:end="55:43">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:13">r</name> <operator pos:start="57:15" pos:end="57:16">|=</operator> <call pos:start="57:18" pos:end="57:38"><name pos:start="57:18" pos:end="57:29">sd_read_data</name><argument_list pos:start="57:30" pos:end="57:38">(<argument pos:start="57:31" pos:end="57:37"><expr pos:start="57:31" pos:end="57:37"><name pos:start="57:31" pos:end="57:37"><name pos:start="57:31" pos:end="57:31">s</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:37">card</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:20">case <expr pos:start="63:10" pos:end="63:19"><name pos:start="63:10" pos:end="63:19">R_CLK2XDIV</name></expr>:</case>

    <case pos:start="65:5" pos:end="65:18">case <expr pos:start="65:10" pos:end="65:17"><name pos:start="65:10" pos:end="65:17">R_ENABLE</name></expr>:</case>

    <case pos:start="67:5" pos:end="67:19">case <expr pos:start="67:10" pos:end="67:18"><name pos:start="67:10" pos:end="67:18">R_PENDING</name></expr>:</case>

    <case pos:start="69:5" pos:end="69:17">case <expr pos:start="69:10" pos:end="69:16"><name pos:start="69:10" pos:end="69:16">R_START</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:26"><expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:9">r</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <name pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:19">regs</name><index pos:start="71:20" pos:end="71:25">[<expr pos:start="71:21" pos:end="71:24"><name pos:start="71:21" pos:end="71:24">addr</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>



    <default pos:start="77:5" pos:end="77:12">default:</default>

        <expr_stmt pos:start="79:9" pos:end="81:43"><expr pos:start="79:9" pos:end="81:42"><call pos:start="79:9" pos:end="81:42"><name pos:start="79:9" pos:end="79:20">error_report</name><argument_list pos:start="79:21" pos:end="81:42">(<argument pos:start="79:22" pos:end="81:30"><expr pos:start="79:22" pos:end="81:30"><literal type="string" pos:start="79:22" pos:end="79:76">"milkymist_memcard: read access to unknown register 0x"</literal>

                <name pos:start="81:17" pos:end="81:30">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="81:33" pos:end="81:41"><expr pos:start="81:33" pos:end="81:41"><name pos:start="81:33" pos:end="81:36">addr</name> <operator pos:start="81:38" pos:end="81:39">&lt;&lt;</operator> <literal type="number" pos:start="81:41" pos:end="81:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="89:5" pos:end="89:54"><expr pos:start="89:5" pos:end="89:53"><call pos:start="89:5" pos:end="89:53"><name pos:start="89:5" pos:end="89:39">trace_milkymist_memcard_memory_read</name><argument_list pos:start="89:40" pos:end="89:53">(<argument pos:start="89:41" pos:end="89:49"><expr pos:start="89:41" pos:end="89:49"><name pos:start="89:41" pos:end="89:44">addr</name> <operator pos:start="89:46" pos:end="89:47">&lt;&lt;</operator> <literal type="number" pos:start="89:49" pos:end="89:49">2</literal></expr></argument>, <argument pos:start="89:52" pos:end="89:52"><expr pos:start="89:52" pos:end="89:52"><name pos:start="89:52" pos:end="89:52">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><name pos:start="93:12" pos:end="93:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
