<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24849.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">pc_dimm_memory_plug</name><parameter_list pos:start="1:25" pos:end="3:72">(<parameter pos:start="1:26" pos:end="1:41"><decl pos:start="1:26" pos:end="1:41"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:36">DeviceState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">dev</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:67"><decl pos:start="1:44" pos:end="1:67"><type pos:start="1:44" pos:end="1:67"><name pos:start="1:44" pos:end="1:61">MemoryHotplugState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">hpms</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:41"><decl pos:start="3:26" pos:end="3:41"><type pos:start="3:26" pos:end="3:41"><name pos:start="3:26" pos:end="3:37">MemoryRegion</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:41">mr</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:57"><decl pos:start="3:44" pos:end="3:57"><type pos:start="3:44" pos:end="3:57"><name pos:start="3:44" pos:end="3:51">uint64_t</name></type> <name pos:start="3:53" pos:end="3:57">align</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:64">Error</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier><modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:71">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="153:1">{<block_content pos:start="7:5" pos:end="151:37">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:25">machine</name> <init pos:start="9:27" pos:end="9:55">= <expr pos:start="9:29" pos:end="9:55"><call pos:start="9:29" pos:end="9:55"><name pos:start="9:29" pos:end="9:35">MACHINE</name><argument_list pos:start="9:36" pos:end="9:55">(<argument pos:start="9:37" pos:end="9:54"><expr pos:start="9:37" pos:end="9:54"><call pos:start="9:37" pos:end="9:54"><name pos:start="9:37" pos:end="9:52">qdev_get_machine</name><argument_list pos:start="9:53" pos:end="9:54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">PCDIMMDevice</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:22">dimm</name> <init pos:start="11:24" pos:end="11:37">= <expr pos:start="11:26" pos:end="11:37"><call pos:start="11:26" pos:end="11:37"><name pos:start="11:26" pos:end="11:32">PC_DIMM</name><argument_list pos:start="11:33" pos:end="11:37">(<argument pos:start="11:34" pos:end="11:36"><expr pos:start="11:34" pos:end="11:36"><name pos:start="11:34" pos:end="11:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:36">existing_dimms_capacity</name> <init pos:start="15:38" pos:end="15:40">= <expr pos:start="15:40" pos:end="15:40"><literal type="number" pos:start="15:40" pos:end="15:40">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:17">addr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:80"><expr pos:start="21:5" pos:end="21:79"><name pos:start="21:5" pos:end="21:8">addr</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:79"><name pos:start="21:12" pos:end="21:34">object_property_get_int</name><argument_list pos:start="21:35" pos:end="21:79">(<argument pos:start="21:36" pos:end="21:47"><expr pos:start="21:36" pos:end="21:47"><call pos:start="21:36" pos:end="21:47"><name pos:start="21:36" pos:end="21:41">OBJECT</name><argument_list pos:start="21:42" pos:end="21:47">(<argument pos:start="21:43" pos:end="21:46"><expr pos:start="21:43" pos:end="21:46"><name pos:start="21:43" pos:end="21:46">dimm</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:50" pos:end="21:66"><expr pos:start="21:50" pos:end="21:66"><name pos:start="21:50" pos:end="21:66">PC_DIMM_ADDR_PROP</name></expr></argument>, <argument pos:start="21:69" pos:end="21:78"><expr pos:start="21:69" pos:end="21:78"><operator pos:start="21:69" pos:end="21:69">&amp;</operator><name pos:start="21:70" pos:end="21:78">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:17">local_err</name></expr>)</condition> <block pos:start="23:20" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:17">

        <goto pos:start="25:9" pos:end="25:17">goto <name pos:start="25:14" pos:end="25:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="37:69"><expr pos:start="31:5" pos:end="37:68"><name pos:start="31:5" pos:end="31:8">addr</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="37:68"><name pos:start="31:12" pos:end="31:32">pc_dimm_get_free_addr</name><argument_list pos:start="31:33" pos:end="37:68">(<argument pos:start="31:34" pos:end="31:43"><expr pos:start="31:34" pos:end="31:43"><name pos:start="31:34" pos:end="31:43"><name pos:start="31:34" pos:end="31:37">hpms</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:43">base</name></name></expr></argument>,

                                 <argument pos:start="33:34" pos:end="33:62"><expr pos:start="33:34" pos:end="33:62"><call pos:start="33:34" pos:end="33:62"><name pos:start="33:34" pos:end="33:51">memory_region_size</name><argument_list pos:start="33:52" pos:end="33:62">(<argument pos:start="33:53" pos:end="33:61"><expr pos:start="33:53" pos:end="33:61"><operator pos:start="33:53" pos:end="33:53">&amp;</operator><name pos:start="33:54" pos:end="33:61"><name pos:start="33:54" pos:end="33:57">hpms</name><operator pos:start="33:58" pos:end="33:59">-&gt;</operator><name pos:start="33:60" pos:end="33:61">mr</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="35:34" pos:end="35:53"><expr pos:start="35:34" pos:end="35:53"><ternary pos:start="35:34" pos:end="35:53"><condition pos:start="35:34" pos:end="35:40"><expr pos:start="35:34" pos:end="35:38"><operator pos:start="35:34" pos:end="35:34">!</operator><name pos:start="35:35" pos:end="35:38">addr</name></expr> ?</condition><then pos:start="35:42" pos:end="35:45"> <expr pos:start="35:42" pos:end="35:45"><name pos:start="35:42" pos:end="35:45">NULL</name></expr> </then><else pos:start="35:47" pos:end="35:53">: <expr pos:start="35:49" pos:end="35:53"><operator pos:start="35:49" pos:end="35:49">&amp;</operator><name pos:start="35:50" pos:end="35:53">addr</name></expr></else></ternary></expr></argument>, <argument pos:start="35:56" pos:end="35:60"><expr pos:start="35:56" pos:end="35:60"><name pos:start="35:56" pos:end="35:60">align</name></expr></argument>,

                                 <argument pos:start="37:34" pos:end="37:55"><expr pos:start="37:34" pos:end="37:55"><call pos:start="37:34" pos:end="37:55"><name pos:start="37:34" pos:end="37:51">memory_region_size</name><argument_list pos:start="37:52" pos:end="37:55">(<argument pos:start="37:53" pos:end="37:54"><expr pos:start="37:53" pos:end="37:54"><name pos:start="37:53" pos:end="37:54">mr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:58" pos:end="37:67"><expr pos:start="37:58" pos:end="37:67"><operator pos:start="37:58" pos:end="37:58">&amp;</operator><name pos:start="37:59" pos:end="37:67">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:17">local_err</name></expr>)</condition> <block pos:start="39:20" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:17">

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:69"><expr pos:start="47:5" pos:end="47:68"><name pos:start="47:5" pos:end="47:27">existing_dimms_capacity</name> <operator pos:start="47:29" pos:end="47:29">=</operator> <call pos:start="47:31" pos:end="47:68"><name pos:start="47:31" pos:end="47:56">pc_existing_dimms_capacity</name><argument_list pos:start="47:57" pos:end="47:68">(<argument pos:start="47:58" pos:end="47:67"><expr pos:start="47:58" pos:end="47:67"><operator pos:start="47:58" pos:end="47:58">&amp;</operator><name pos:start="47:59" pos:end="47:67">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:18">(<expr pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:17">local_err</name></expr>)</condition> <block pos:start="49:20" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:17">

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="71:5"><if pos:start="57:5" pos:end="71:5">if <condition pos:start="57:8" pos:end="59:49">(<expr pos:start="57:9" pos:end="59:48"><name pos:start="57:9" pos:end="57:31">existing_dimms_capacity</name> <operator pos:start="57:33" pos:end="57:33">+</operator> <call pos:start="57:35" pos:end="57:56"><name pos:start="57:35" pos:end="57:52">memory_region_size</name><argument_list pos:start="57:53" pos:end="57:56">(<argument pos:start="57:54" pos:end="57:55"><expr pos:start="57:54" pos:end="57:55"><name pos:start="57:54" pos:end="57:55">mr</name></expr></argument>)</argument_list></call> <operator pos:start="57:58" pos:end="57:58">&gt;</operator>

        <name pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:15">machine</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:28">maxram_size</name></name> <operator pos:start="59:30" pos:end="59:30">-</operator> <name pos:start="59:32" pos:end="59:48"><name pos:start="59:32" pos:end="59:38">machine</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:48">ram_size</name></name></expr>)</condition> <block pos:start="59:51" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:17">

        <expr_stmt pos:start="61:9" pos:end="67:61"><expr pos:start="61:9" pos:end="67:60"><call pos:start="61:9" pos:end="67:60"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="67:60">(<argument pos:start="61:20" pos:end="61:29"><expr pos:start="61:20" pos:end="61:29"><operator pos:start="61:20" pos:end="61:20">&amp;</operator><name pos:start="61:21" pos:end="61:29">local_err</name></expr></argument>, <argument pos:start="61:32" pos:end="63:67"><expr pos:start="61:32" pos:end="63:67"><literal type="string" pos:start="61:32" pos:end="61:64">"not enough space, currently 0x%"</literal> <name pos:start="61:66" pos:end="61:71">PRIx64</name>

                   <literal type="string" pos:start="63:20" pos:end="63:54">" in use of total hot pluggable 0x"</literal> <name pos:start="63:56" pos:end="63:67">RAM_ADDR_FMT</name></expr></argument>,

                   <argument pos:start="65:20" pos:end="65:42"><expr pos:start="65:20" pos:end="65:42"><name pos:start="65:20" pos:end="65:42">existing_dimms_capacity</name></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:59"><expr pos:start="67:20" pos:end="67:59"><name pos:start="67:20" pos:end="67:39"><name pos:start="67:20" pos:end="67:26">machine</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:39">maxram_size</name></name> <operator pos:start="67:41" pos:end="67:41">-</operator> <name pos:start="67:43" pos:end="67:59"><name pos:start="67:43" pos:end="67:49">machine</name><operator pos:start="67:50" pos:end="67:51">-&gt;</operator><name pos:start="67:52" pos:end="67:59">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:78"><expr pos:start="75:5" pos:end="75:77"><call pos:start="75:5" pos:end="75:77"><name pos:start="75:5" pos:end="75:27">object_property_set_int</name><argument_list pos:start="75:28" pos:end="75:77">(<argument pos:start="75:29" pos:end="75:39"><expr pos:start="75:29" pos:end="75:39"><call pos:start="75:29" pos:end="75:39"><name pos:start="75:29" pos:end="75:34">OBJECT</name><argument_list pos:start="75:35" pos:end="75:39">(<argument pos:start="75:36" pos:end="75:38"><expr pos:start="75:36" pos:end="75:38"><name pos:start="75:36" pos:end="75:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:42" pos:end="75:45"><expr pos:start="75:42" pos:end="75:45"><name pos:start="75:42" pos:end="75:45">addr</name></expr></argument>, <argument pos:start="75:48" pos:end="75:64"><expr pos:start="75:48" pos:end="75:64"><name pos:start="75:48" pos:end="75:64">PC_DIMM_ADDR_PROP</name></expr></argument>, <argument pos:start="75:67" pos:end="75:76"><expr pos:start="75:67" pos:end="75:76"><operator pos:start="75:67" pos:end="75:67">&amp;</operator><name pos:start="75:68" pos:end="75:76">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:18">(<expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:17">local_err</name></expr>)</condition> <block pos:start="77:20" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:17">

        <goto pos:start="79:9" pos:end="79:17">goto <name pos:start="79:14" pos:end="79:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:45"><expr pos:start="83:5" pos:end="83:44"><call pos:start="83:5" pos:end="83:44"><name pos:start="83:5" pos:end="83:38">trace_mhp_pc_dimm_assigned_address</name><argument_list pos:start="83:39" pos:end="83:44">(<argument pos:start="83:40" pos:end="83:43"><expr pos:start="83:40" pos:end="83:43"><name pos:start="83:40" pos:end="83:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:79"><expr pos:start="87:5" pos:end="87:78"><name pos:start="87:5" pos:end="87:8">slot</name> <operator pos:start="87:10" pos:end="87:10">=</operator> <call pos:start="87:12" pos:end="87:78"><name pos:start="87:12" pos:end="87:34">object_property_get_int</name><argument_list pos:start="87:35" pos:end="87:78">(<argument pos:start="87:36" pos:end="87:46"><expr pos:start="87:36" pos:end="87:46"><call pos:start="87:36" pos:end="87:46"><name pos:start="87:36" pos:end="87:41">OBJECT</name><argument_list pos:start="87:42" pos:end="87:46">(<argument pos:start="87:43" pos:end="87:45"><expr pos:start="87:43" pos:end="87:45"><name pos:start="87:43" pos:end="87:45">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:49" pos:end="87:65"><expr pos:start="87:49" pos:end="87:65"><name pos:start="87:49" pos:end="87:65">PC_DIMM_SLOT_PROP</name></expr></argument>, <argument pos:start="87:68" pos:end="87:77"><expr pos:start="87:68" pos:end="87:77"><operator pos:start="87:68" pos:end="87:68">&amp;</operator><name pos:start="87:69" pos:end="87:77">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:18">(<expr pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:17">local_err</name></expr>)</condition> <block pos:start="89:20" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:17">

        <goto pos:start="91:9" pos:end="91:17">goto <name pos:start="91:14" pos:end="91:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="99:65"><expr pos:start="97:5" pos:end="99:64"><name pos:start="97:5" pos:end="97:8">slot</name> <operator pos:start="97:10" pos:end="97:10">=</operator> <call pos:start="97:12" pos:end="99:64"><name pos:start="97:12" pos:end="97:32">pc_dimm_get_free_slot</name><argument_list pos:start="97:33" pos:end="99:64">(<argument pos:start="97:34" pos:end="97:79"><expr pos:start="97:34" pos:end="97:79"><ternary pos:start="97:34" pos:end="97:79"><condition pos:start="97:34" pos:end="97:66"><expr pos:start="97:34" pos:end="97:64"><name pos:start="97:34" pos:end="97:37">slot</name> <operator pos:start="97:39" pos:end="97:40">==</operator> <name pos:start="97:42" pos:end="97:64">PC_DIMM_UNASSIGNED_SLOT</name></expr> ?</condition><then pos:start="97:68" pos:end="97:71"> <expr pos:start="97:68" pos:end="97:71"><name pos:start="97:68" pos:end="97:71">NULL</name></expr> </then><else pos:start="97:73" pos:end="97:79">: <expr pos:start="97:75" pos:end="97:79"><operator pos:start="97:75" pos:end="97:75">&amp;</operator><name pos:start="97:76" pos:end="97:79">slot</name></expr></else></ternary></expr></argument>,

                                 <argument pos:start="99:34" pos:end="99:51"><expr pos:start="99:34" pos:end="99:51"><name pos:start="99:34" pos:end="99:51"><name pos:start="99:34" pos:end="99:40">machine</name><operator pos:start="99:41" pos:end="99:42">-&gt;</operator><name pos:start="99:43" pos:end="99:51">ram_slots</name></name></expr></argument>, <argument pos:start="99:54" pos:end="99:63"><expr pos:start="99:54" pos:end="99:63"><operator pos:start="99:54" pos:end="99:54">&amp;</operator><name pos:start="99:55" pos:end="99:63">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:18">(<expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:17">local_err</name></expr>)</condition> <block pos:start="101:20" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:17">

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:78"><expr pos:start="107:5" pos:end="107:77"><call pos:start="107:5" pos:end="107:77"><name pos:start="107:5" pos:end="107:27">object_property_set_int</name><argument_list pos:start="107:28" pos:end="107:77">(<argument pos:start="107:29" pos:end="107:39"><expr pos:start="107:29" pos:end="107:39"><call pos:start="107:29" pos:end="107:39"><name pos:start="107:29" pos:end="107:34">OBJECT</name><argument_list pos:start="107:35" pos:end="107:39">(<argument pos:start="107:36" pos:end="107:38"><expr pos:start="107:36" pos:end="107:38"><name pos:start="107:36" pos:end="107:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="107:42" pos:end="107:45"><expr pos:start="107:42" pos:end="107:45"><name pos:start="107:42" pos:end="107:45">slot</name></expr></argument>, <argument pos:start="107:48" pos:end="107:64"><expr pos:start="107:48" pos:end="107:64"><name pos:start="107:48" pos:end="107:64">PC_DIMM_SLOT_PROP</name></expr></argument>, <argument pos:start="107:67" pos:end="107:76"><expr pos:start="107:67" pos:end="107:76"><operator pos:start="107:67" pos:end="107:67">&amp;</operator><name pos:start="107:68" pos:end="107:76">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:18">(<expr pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:17">local_err</name></expr>)</condition> <block pos:start="109:20" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:17">

        <goto pos:start="111:9" pos:end="111:17">goto <name pos:start="111:14" pos:end="111:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:42"><expr pos:start="115:5" pos:end="115:41"><call pos:start="115:5" pos:end="115:41"><name pos:start="115:5" pos:end="115:35">trace_mhp_pc_dimm_assigned_slot</name><argument_list pos:start="115:36" pos:end="115:41">(<argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:53">(<expr pos:start="119:9" pos:end="119:52"><call pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:19">kvm_enabled</name><argument_list pos:start="119:20" pos:end="119:21">()</argument_list></call> <operator pos:start="119:23" pos:end="119:24">&amp;&amp;</operator> <operator pos:start="119:26" pos:end="119:26">!</operator><call pos:start="119:27" pos:end="119:52"><name pos:start="119:27" pos:end="119:43">kvm_has_free_slot</name><argument_list pos:start="119:44" pos:end="119:52">(<argument pos:start="119:45" pos:end="119:51"><expr pos:start="119:45" pos:end="119:51"><name pos:start="119:45" pos:end="119:51">machine</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:55" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:17">

        <expr_stmt pos:start="121:9" pos:end="121:75"><expr pos:start="121:9" pos:end="121:74"><call pos:start="121:9" pos:end="121:74"><name pos:start="121:9" pos:end="121:18">error_setg</name><argument_list pos:start="121:19" pos:end="121:74">(<argument pos:start="121:20" pos:end="121:29"><expr pos:start="121:20" pos:end="121:29"><operator pos:start="121:20" pos:end="121:20">&amp;</operator><name pos:start="121:21" pos:end="121:29">local_err</name></expr></argument>, <argument pos:start="121:32" pos:end="121:73"><expr pos:start="121:32" pos:end="121:73"><literal type="string" pos:start="121:32" pos:end="121:73">"hypervisor has no free memory slots left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="123:9" pos:end="123:17">goto <name pos:start="123:14" pos:end="123:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="137:5"><if pos:start="129:5" pos:end="137:5">if <condition pos:start="129:8" pos:end="129:31">(<expr pos:start="129:9" pos:end="129:30"><operator pos:start="129:9" pos:end="129:9">!</operator><call pos:start="129:10" pos:end="129:30"><name pos:start="129:10" pos:end="129:28">vhost_has_free_slot</name><argument_list pos:start="129:29" pos:end="129:30">()</argument_list></call></expr>)</condition> <block pos:start="129:33" pos:end="137:5">{<block_content pos:start="131:9" pos:end="135:17">

        <expr_stmt pos:start="131:9" pos:end="133:53"><expr pos:start="131:9" pos:end="133:52"><call pos:start="131:9" pos:end="133:52"><name pos:start="131:9" pos:end="131:18">error_setg</name><argument_list pos:start="131:19" pos:end="133:52">(<argument pos:start="131:20" pos:end="131:29"><expr pos:start="131:20" pos:end="131:29"><operator pos:start="131:20" pos:end="131:20">&amp;</operator><name pos:start="131:21" pos:end="131:29">local_err</name></expr></argument>, <argument pos:start="131:32" pos:end="133:51"><expr pos:start="131:32" pos:end="133:51"><literal type="string" pos:start="131:32" pos:end="131:65">"a used vhost backend has no free"</literal>

                               <literal type="string" pos:start="133:32" pos:end="133:51">" memory slots left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="135:9" pos:end="135:17">goto <name pos:start="135:14" pos:end="135:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:66"><expr pos:start="141:5" pos:end="141:65"><call pos:start="141:5" pos:end="141:65"><name pos:start="141:5" pos:end="141:31">memory_region_add_subregion</name><argument_list pos:start="141:32" pos:end="141:65">(<argument pos:start="141:33" pos:end="141:41"><expr pos:start="141:33" pos:end="141:41"><operator pos:start="141:33" pos:end="141:33">&amp;</operator><name pos:start="141:34" pos:end="141:41"><name pos:start="141:34" pos:end="141:37">hpms</name><operator pos:start="141:38" pos:end="141:39">-&gt;</operator><name pos:start="141:40" pos:end="141:41">mr</name></name></expr></argument>, <argument pos:start="141:44" pos:end="141:60"><expr pos:start="141:44" pos:end="141:60"><name pos:start="141:44" pos:end="141:47">addr</name> <operator pos:start="141:49" pos:end="141:49">-</operator> <name pos:start="141:51" pos:end="141:60"><name pos:start="141:51" pos:end="141:54">hpms</name><operator pos:start="141:55" pos:end="141:56">-&gt;</operator><name pos:start="141:57" pos:end="141:60">base</name></name></expr></argument>, <argument pos:start="141:63" pos:end="141:64"><expr pos:start="141:63" pos:end="141:64"><name pos:start="141:63" pos:end="141:64">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:34"><expr pos:start="143:5" pos:end="143:33"><call pos:start="143:5" pos:end="143:33"><name pos:start="143:5" pos:end="143:24">vmstate_register_ram</name><argument_list pos:start="143:25" pos:end="143:33">(<argument pos:start="143:26" pos:end="143:27"><expr pos:start="143:26" pos:end="143:27"><name pos:start="143:26" pos:end="143:27">mr</name></expr></argument>, <argument pos:start="143:30" pos:end="143:32"><expr pos:start="143:30" pos:end="143:32"><name pos:start="143:30" pos:end="143:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:67"><expr pos:start="145:5" pos:end="145:66"><call pos:start="145:5" pos:end="145:66"><name pos:start="145:5" pos:end="145:24">numa_set_mem_node_id</name><argument_list pos:start="145:25" pos:end="145:66">(<argument pos:start="145:26" pos:end="145:29"><expr pos:start="145:26" pos:end="145:29"><name pos:start="145:26" pos:end="145:29">addr</name></expr></argument>, <argument pos:start="145:32" pos:end="145:53"><expr pos:start="145:32" pos:end="145:53"><call pos:start="145:32" pos:end="145:53"><name pos:start="145:32" pos:end="145:49">memory_region_size</name><argument_list pos:start="145:50" pos:end="145:53">(<argument pos:start="145:51" pos:end="145:52"><expr pos:start="145:51" pos:end="145:52"><name pos:start="145:51" pos:end="145:52">mr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:56" pos:end="145:65"><expr pos:start="145:56" pos:end="145:65"><name pos:start="145:56" pos:end="145:65"><name pos:start="145:56" pos:end="145:59">dimm</name><operator pos:start="145:60" pos:end="145:61">-&gt;</operator><name pos:start="145:62" pos:end="145:65">node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="149:1" pos:end="149:4"><name pos:start="149:1" pos:end="149:3">out</name>:</label>

    <expr_stmt pos:start="151:5" pos:end="151:37"><expr pos:start="151:5" pos:end="151:36"><call pos:start="151:5" pos:end="151:36"><name pos:start="151:5" pos:end="151:19">error_propagate</name><argument_list pos:start="151:20" pos:end="151:36">(<argument pos:start="151:21" pos:end="151:24"><expr pos:start="151:21" pos:end="151:24"><name pos:start="151:21" pos:end="151:24">errp</name></expr></argument>, <argument pos:start="151:27" pos:end="151:35"><expr pos:start="151:27" pos:end="151:35"><name pos:start="151:27" pos:end="151:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
