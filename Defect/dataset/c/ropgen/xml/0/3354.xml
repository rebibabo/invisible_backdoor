<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3354.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:32">vec_reg_offset</name><parameter_list pos:start="1:33" pos:end="1:71">(<parameter pos:start="1:34" pos:end="1:42"><decl pos:start="1:34" pos:end="1:42"><type pos:start="1:34" pos:end="1:42"><name pos:start="1:34" pos:end="1:36">int</name></type> <name pos:start="1:38" pos:end="1:42">regno</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:55">element</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:65">TCGMemOp</name></type> <name pos:start="1:67" pos:end="1:70">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:16">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">offs</name> <init pos:start="5:14" pos:end="5:57">= <expr pos:start="5:16" pos:end="5:57"><call pos:start="5:16" pos:end="5:57"><name pos:start="5:16" pos:end="5:23">offsetof</name><argument_list pos:start="5:24" pos:end="5:57">(<argument pos:start="5:25" pos:end="5:35"><expr pos:start="5:25" pos:end="5:35"><name pos:start="5:25" pos:end="5:35">CPUARMState</name></expr></argument>, <argument pos:start="5:38" pos:end="5:56"><expr pos:start="5:38" pos:end="5:56"><name pos:start="5:38" pos:end="5:56"><name pos:start="5:38" pos:end="5:40">vfp</name><operator pos:start="5:41" pos:end="5:41">.</operator><name pos:start="5:42" pos:end="5:45">regs</name><index pos:start="5:46" pos:end="5:56">[<expr pos:start="5:47" pos:end="5:55"><name pos:start="5:47" pos:end="5:51">regno</name> <operator pos:start="5:53" pos:end="5:53">*</operator> <literal type="number" pos:start="5:55" pos:end="5:55">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:27">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

    <comment type="block" pos:start="9:5" pos:end="19:7">/* This is complicated slightly because vfp.regs[2n] is

     * still the low half and  vfp.regs[2n+1] the high half

     * of the 128 bit vector, even on big endian systems.

     * Calculate the offset assuming a fully bigendian 128 bits,

     * then XOR to account for the order of the two 64 bit halves.

     */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:49"><expr pos:start="21:5" pos:end="21:48"><name pos:start="21:5" pos:end="21:8">offs</name> <operator pos:start="21:10" pos:end="21:11">+=</operator> <operator pos:start="21:13" pos:end="21:13">(</operator><literal type="number" pos:start="21:14" pos:end="21:17">16</literal> <operator pos:start="21:17" pos:end="21:17">-</operator> <operator pos:start="21:19" pos:end="21:19">(</operator><operator pos:start="21:20" pos:end="21:20">(</operator><name pos:start="21:21" pos:end="21:27">element</name> <operator pos:start="21:29" pos:end="21:29">+</operator> <literal type="number" pos:start="21:31" pos:end="21:31">1</literal><operator pos:start="21:32" pos:end="21:32">)</operator> <operator pos:start="21:34" pos:end="21:34">*</operator> <operator pos:start="21:36" pos:end="21:36">(</operator><literal type="number" pos:start="21:37" pos:end="21:37">1</literal> <operator pos:start="21:39" pos:end="21:40">&lt;&lt;</operator> <name pos:start="21:42" pos:end="21:45">size</name><operator pos:start="21:46" pos:end="21:46">)</operator><operator pos:start="21:47" pos:end="21:47">)</operator><operator pos:start="21:48" pos:end="21:48">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:8">offs</name> <operator pos:start="23:10" pos:end="23:11">^=</operator> <literal type="number" pos:start="23:13" pos:end="23:13">8</literal></expr>;</expr_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:8">offs</name> <operator pos:start="27:10" pos:end="27:11">+=</operator> <name pos:start="27:13" pos:end="27:19">element</name> <operator pos:start="27:21" pos:end="27:21">*</operator> <operator pos:start="27:23" pos:end="27:23">(</operator><literal type="number" pos:start="27:24" pos:end="27:24">1</literal> <operator pos:start="27:26" pos:end="27:27">&lt;&lt;</operator> <name pos:start="27:29" pos:end="27:32">size</name><operator pos:start="27:33" pos:end="27:33">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <return pos:start="31:5" pos:end="31:16">return <expr pos:start="31:12" pos:end="31:15"><name pos:start="31:12" pos:end="31:15">offs</name></expr>;</return>

</block_content>}</block></function>
</unit>
