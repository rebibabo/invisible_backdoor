<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24045.c" pos:tabs="8"><function pos:start="1:1" pos:end="7193:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:30">disas_insn</name><parameter_list pos:start="1:31" pos:end="1:70">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:43">DisasContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:69"><decl pos:start="1:49" pos:end="1:69"><type pos:start="1:49" pos:end="1:69"><name pos:start="1:49" pos:end="1:60">target_ulong</name></type> <name pos:start="1:62" pos:end="1:69">pc_start</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="7193:1">{<block_content pos:start="5:5" pos:end="7191:17">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">b</name></decl>, <decl pos:start="5:12" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:19">prefixes</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">aflag</name></decl>, <decl pos:start="5:29" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:33">dflag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">shift</name></decl>, <decl pos:start="7:16" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:17">ot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">modrm</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">reg</name></decl>, <decl pos:start="9:21" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:22">rm</name></decl>, <decl pos:start="9:25" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:27">mod</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:37">reg_addr</name></decl>, <decl pos:start="9:40" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:41">op</name></decl>, <decl pos:start="9:44" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:44" pos:end="9:48">opreg</name></decl>, <decl pos:start="9:51" pos:end="9:61"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:51" pos:end="9:61">offset_addr</name></decl>, <decl pos:start="9:64" pos:end="9:66"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:64" pos:end="9:66">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:25">next_eip</name></decl>, <decl pos:start="11:28" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:28" pos:end="11:31">tval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">rex_w</name></decl>, <decl pos:start="13:16" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:20">rex_r</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:72">(<expr pos:start="17:9" pos:end="17:71"><call pos:start="17:9" pos:end="17:71"><name pos:start="17:9" pos:end="17:16">unlikely</name><argument_list pos:start="17:17" pos:end="17:71">(<argument pos:start="17:18" pos:end="17:70"><expr pos:start="17:18" pos:end="17:70"><call pos:start="17:18" pos:end="17:70"><name pos:start="17:18" pos:end="17:35">qemu_loglevel_mask</name><argument_list pos:start="17:36" pos:end="17:70">(<argument pos:start="17:37" pos:end="17:69"><expr pos:start="17:37" pos:end="17:69"><name pos:start="17:37" pos:end="17:49">CPU_LOG_TB_OP</name> <operator pos:start="17:51" pos:end="17:51">|</operator> <name pos:start="17:53" pos:end="17:69">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:74" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:43">

        <expr_stmt pos:start="19:9" pos:end="19:43"><expr pos:start="19:9" pos:end="19:42"><call pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:32">tcg_gen_debug_insn_start</name><argument_list pos:start="19:33" pos:end="19:42">(<argument pos:start="19:34" pos:end="19:41"><expr pos:start="19:34" pos:end="19:41"><name pos:start="19:34" pos:end="19:41">pc_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:9">pc</name></name> <operator pos:start="23:11" pos:end="23:11">=</operator> <name pos:start="23:13" pos:end="23:20">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">prefixes</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:9">aflag</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:9">dflag</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <name pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:15">override</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <operator pos:start="31:19" pos:end="31:19">-</operator><literal type="number" pos:start="31:20" pos:end="31:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:15"><expr pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:9">rex_w</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <operator pos:start="33:13" pos:end="33:13">-</operator><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:9">rex_r</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <literal type="number" pos:start="35:13" pos:end="35:13">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="37:1" pos:end="37:20">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:20">TARGET_X86_64</name></cpp:ifdef>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:12">rex_x</name></name> <operator pos:start="39:14" pos:end="39:14">=</operator> <literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:17"><expr pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:12">rex_b</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:16">x86_64_hregs</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:17">rip_offset</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="number" pos:start="47:21" pos:end="47:21">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="47:24" pos:end="47:52">/* for relative ip address */</comment>

 <label pos:start="49:2" pos:end="49:11"><name pos:start="49:2" pos:end="49:10">next_byte</name>:</label>

    <expr_stmt pos:start="51:5" pos:end="51:45"><expr pos:start="51:5" pos:end="51:44"><name pos:start="51:5" pos:end="51:5">b</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <call pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:21">cpu_ldub_code</name><argument_list pos:start="51:22" pos:end="51:44">(<argument pos:start="51:23" pos:end="51:36"><expr pos:start="51:23" pos:end="51:36"><name pos:start="51:23" pos:end="51:36">cpu_single_env</name></expr></argument>, <argument pos:start="51:39" pos:end="51:43"><expr pos:start="51:39" pos:end="51:43"><name pos:start="51:39" pos:end="51:43"><name pos:start="51:39" pos:end="51:39">s</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:43">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="58:0"><expr pos:start="53:5" pos:end="53:11"><name pos:start="53:5" pos:end="53:9"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:9">pc</name></name><operator pos:start="53:10" pos:end="53:11">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="55:5" pos:end="55:24">/* check prefixes */</comment>

<cpp:ifdef pos:start="57:1" pos:end="57:20">#<cpp:directive pos:start="57:2" pos:end="57:6">ifdef</cpp:directive> <name pos:start="57:8" pos:end="57:20">TARGET_X86_64</name></cpp:ifdef>

    <if_stmt pos:start="59:5" pos:end="249:5"><if pos:start="59:5" pos:end="165:5">if <condition pos:start="59:8" pos:end="59:18">(<expr pos:start="59:9" pos:end="59:17"><call pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:14">CODE64</name><argument_list pos:start="59:15" pos:end="59:17">(<argument pos:start="59:16" pos:end="59:16"><expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:20" pos:end="165:5">{<block_content pos:start="61:9" pos:end="163:22">

        <switch pos:start="61:9" pos:end="145:9">switch <condition pos:start="61:16" pos:end="61:18">(<expr pos:start="61:17" pos:end="61:17"><name pos:start="61:17" pos:end="61:17">b</name></expr>)</condition> <block pos:start="61:20" pos:end="145:9">{<block_content pos:start="63:9" pos:end="143:27">

        <case pos:start="63:9" pos:end="63:18">case <expr pos:start="63:14" pos:end="63:17"><literal type="number" pos:start="63:14" pos:end="63:17">0xf3</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:36"><expr pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:20">prefixes</name> <operator pos:start="65:22" pos:end="65:23">|=</operator> <name pos:start="65:25" pos:end="65:35">PREFIX_REPZ</name></expr>;</expr_stmt>

            <goto pos:start="67:13" pos:end="67:27">goto <name pos:start="67:18" pos:end="67:26">next_byte</name>;</goto>

        <case pos:start="69:9" pos:end="69:18">case <expr pos:start="69:14" pos:end="69:17"><literal type="number" pos:start="69:14" pos:end="69:17">0xf2</literal></expr>:</case>

            <expr_stmt pos:start="71:13" pos:end="71:37"><expr pos:start="71:13" pos:end="71:36"><name pos:start="71:13" pos:end="71:20">prefixes</name> <operator pos:start="71:22" pos:end="71:23">|=</operator> <name pos:start="71:25" pos:end="71:36">PREFIX_REPNZ</name></expr>;</expr_stmt>

            <goto pos:start="73:13" pos:end="73:27">goto <name pos:start="73:18" pos:end="73:26">next_byte</name>;</goto>

        <case pos:start="75:9" pos:end="75:18">case <expr pos:start="75:14" pos:end="75:17"><literal type="number" pos:start="75:14" pos:end="75:17">0xf0</literal></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:36"><expr pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:20">prefixes</name> <operator pos:start="77:22" pos:end="77:23">|=</operator> <name pos:start="77:25" pos:end="77:35">PREFIX_LOCK</name></expr>;</expr_stmt>

            <goto pos:start="79:13" pos:end="79:27">goto <name pos:start="79:18" pos:end="79:26">next_byte</name>;</goto>

        <case pos:start="81:9" pos:end="81:18">case <expr pos:start="81:14" pos:end="81:17"><literal type="number" pos:start="81:14" pos:end="81:17">0x2e</literal></expr>:</case>

            <expr_stmt pos:start="83:13" pos:end="83:31"><expr pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:23">override</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator> <name pos:start="83:27" pos:end="83:30">R_CS</name></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:27">goto <name pos:start="85:18" pos:end="85:26">next_byte</name>;</goto>

        <case pos:start="87:9" pos:end="87:18">case <expr pos:start="87:14" pos:end="87:17"><literal type="number" pos:start="87:14" pos:end="87:17">0x36</literal></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:23">override</name></name> <operator pos:start="89:25" pos:end="89:25">=</operator> <name pos:start="89:27" pos:end="89:30">R_SS</name></expr>;</expr_stmt>

            <goto pos:start="91:13" pos:end="91:27">goto <name pos:start="91:18" pos:end="91:26">next_byte</name>;</goto>

        <case pos:start="93:9" pos:end="93:18">case <expr pos:start="93:14" pos:end="93:17"><literal type="number" pos:start="93:14" pos:end="93:17">0x3e</literal></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="95:31"><expr pos:start="95:13" pos:end="95:30"><name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:23">override</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:30">R_DS</name></expr>;</expr_stmt>

            <goto pos:start="97:13" pos:end="97:27">goto <name pos:start="97:18" pos:end="97:26">next_byte</name>;</goto>

        <case pos:start="99:9" pos:end="99:18">case <expr pos:start="99:14" pos:end="99:17"><literal type="number" pos:start="99:14" pos:end="99:17">0x26</literal></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:31"><expr pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:23">override</name></name> <operator pos:start="101:25" pos:end="101:25">=</operator> <name pos:start="101:27" pos:end="101:30">R_ES</name></expr>;</expr_stmt>

            <goto pos:start="103:13" pos:end="103:27">goto <name pos:start="103:18" pos:end="103:26">next_byte</name>;</goto>

        <case pos:start="105:9" pos:end="105:18">case <expr pos:start="105:14" pos:end="105:17"><literal type="number" pos:start="105:14" pos:end="105:17">0x64</literal></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="107:31"><expr pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:23"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:23">override</name></name> <operator pos:start="107:25" pos:end="107:25">=</operator> <name pos:start="107:27" pos:end="107:30">R_FS</name></expr>;</expr_stmt>

            <goto pos:start="109:13" pos:end="109:27">goto <name pos:start="109:18" pos:end="109:26">next_byte</name>;</goto>

        <case pos:start="111:9" pos:end="111:18">case <expr pos:start="111:14" pos:end="111:17"><literal type="number" pos:start="111:14" pos:end="111:17">0x65</literal></expr>:</case>

            <expr_stmt pos:start="113:13" pos:end="113:31"><expr pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:23"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:23">override</name></name> <operator pos:start="113:25" pos:end="113:25">=</operator> <name pos:start="113:27" pos:end="113:30">R_GS</name></expr>;</expr_stmt>

            <goto pos:start="115:13" pos:end="115:27">goto <name pos:start="115:18" pos:end="115:26">next_byte</name>;</goto>

        <case pos:start="117:9" pos:end="117:18">case <expr pos:start="117:14" pos:end="117:17"><literal type="number" pos:start="117:14" pos:end="117:17">0x66</literal></expr>:</case>

            <expr_stmt pos:start="119:13" pos:end="119:36"><expr pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:20">prefixes</name> <operator pos:start="119:22" pos:end="119:23">|=</operator> <name pos:start="119:25" pos:end="119:35">PREFIX_DATA</name></expr>;</expr_stmt>

            <goto pos:start="121:13" pos:end="121:27">goto <name pos:start="121:18" pos:end="121:26">next_byte</name>;</goto>

        <case pos:start="123:9" pos:end="123:18">case <expr pos:start="123:14" pos:end="123:17"><literal type="number" pos:start="123:14" pos:end="123:17">0x67</literal></expr>:</case>

            <expr_stmt pos:start="125:13" pos:end="125:35"><expr pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:20">prefixes</name> <operator pos:start="125:22" pos:end="125:23">|=</operator> <name pos:start="125:25" pos:end="125:34">PREFIX_ADR</name></expr>;</expr_stmt>

            <goto pos:start="127:13" pos:end="127:27">goto <name pos:start="127:18" pos:end="127:26">next_byte</name>;</goto>

        <case pos:start="129:9" pos:end="129:27">case <expr pos:start="129:14" pos:end="129:26"><literal type="number" pos:start="129:14" pos:end="129:17">0x40</literal> <operator pos:start="129:19" pos:end="129:21">...</operator> <literal type="number" pos:start="129:23" pos:end="129:26">0x4f</literal></expr>:</case>

            <comment type="block" pos:start="131:13" pos:end="131:28">/* REX prefix */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:33"><expr pos:start="133:13" pos:end="133:32"><name pos:start="133:13" pos:end="133:17">rex_w</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <operator pos:start="133:21" pos:end="133:21">(</operator><name pos:start="133:22" pos:end="133:22">b</name> <operator pos:start="133:24" pos:end="133:25">&gt;&gt;</operator> <literal type="number" pos:start="133:27" pos:end="133:27">3</literal><operator pos:start="133:28" pos:end="133:28">)</operator> <operator pos:start="133:30" pos:end="133:30">&amp;</operator> <literal type="number" pos:start="133:32" pos:end="133:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:35"><expr pos:start="135:13" pos:end="135:34"><name pos:start="135:13" pos:end="135:17">rex_r</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <operator pos:start="135:21" pos:end="135:21">(</operator><name pos:start="135:22" pos:end="135:22">b</name> <operator pos:start="135:24" pos:end="135:24">&amp;</operator> <literal type="number" pos:start="135:26" pos:end="135:28">0x4</literal><operator pos:start="135:29" pos:end="135:29">)</operator> <operator pos:start="135:31" pos:end="135:32">&lt;&lt;</operator> <literal type="number" pos:start="135:34" pos:end="135:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:38"><expr pos:start="137:13" pos:end="137:37"><name pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:20">rex_x</name></name> <operator pos:start="137:22" pos:end="137:22">=</operator> <operator pos:start="137:24" pos:end="137:24">(</operator><name pos:start="137:25" pos:end="137:25">b</name> <operator pos:start="137:27" pos:end="137:27">&amp;</operator> <literal type="number" pos:start="137:29" pos:end="137:31">0x2</literal><operator pos:start="137:32" pos:end="137:32">)</operator> <operator pos:start="137:34" pos:end="137:35">&lt;&lt;</operator> <literal type="number" pos:start="137:37" pos:end="137:37">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:38"><expr pos:start="139:13" pos:end="139:37"><call pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:17">REX_B</name><argument_list pos:start="139:18" pos:end="139:20">(<argument pos:start="139:19" pos:end="139:19"><expr pos:start="139:19" pos:end="139:19"><name pos:start="139:19" pos:end="139:19">s</name></expr></argument>)</argument_list></call> <operator pos:start="139:22" pos:end="139:22">=</operator> <operator pos:start="139:24" pos:end="139:24">(</operator><name pos:start="139:25" pos:end="139:25">b</name> <operator pos:start="139:27" pos:end="139:27">&amp;</operator> <literal type="number" pos:start="139:29" pos:end="139:31">0x1</literal><operator pos:start="139:32" pos:end="139:32">)</operator> <operator pos:start="139:34" pos:end="139:35">&lt;&lt;</operator> <literal type="number" pos:start="139:37" pos:end="139:37">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:29"><expr pos:start="141:13" pos:end="141:28"><name pos:start="141:13" pos:end="141:24">x86_64_hregs</name> <operator pos:start="141:26" pos:end="141:26">=</operator> <literal type="number" pos:start="141:28" pos:end="141:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="141:31" pos:end="141:75">/* select uniform byte register addressing */</comment>

            <goto pos:start="143:13" pos:end="143:27">goto <name pos:start="143:18" pos:end="143:26">next_byte</name>;</goto>

        </block_content>}</block></switch>

        <if_stmt pos:start="147:9" pos:end="159:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:23">(<expr pos:start="147:13" pos:end="147:22"><name pos:start="147:13" pos:end="147:17">rex_w</name> <operator pos:start="147:19" pos:end="147:20">==</operator> <literal type="number" pos:start="147:22" pos:end="147:22">1</literal></expr>)</condition> <block pos:start="147:25" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:22">

            <comment type="block" pos:start="149:13" pos:end="149:49">/* 0x66 is ignored if rex.w is set */</comment>

            <expr_stmt pos:start="151:13" pos:end="151:22"><expr pos:start="151:13" pos:end="151:21"><name pos:start="151:13" pos:end="151:17">dflag</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <literal type="number" pos:start="151:21" pos:end="151:21">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="159:9">else <block pos:start="153:16" pos:end="159:9">{<block_content pos:start="155:13" pos:end="157:27">

            <if_stmt pos:start="155:13" pos:end="157:27"><if pos:start="155:13" pos:end="157:27">if <condition pos:start="155:16" pos:end="155:39">(<expr pos:start="155:17" pos:end="155:38"><name pos:start="155:17" pos:end="155:24">prefixes</name> <operator pos:start="155:26" pos:end="155:26">&amp;</operator> <name pos:start="155:28" pos:end="155:38">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:27"><block_content pos:start="157:17" pos:end="157:27">

                <expr_stmt pos:start="157:17" pos:end="157:27"><expr pos:start="157:17" pos:end="157:26"><name pos:start="157:17" pos:end="157:21">dflag</name> <operator pos:start="157:23" pos:end="157:24">^=</operator> <literal type="number" pos:start="157:26" pos:end="157:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="161:9" pos:end="163:22"><if pos:start="161:9" pos:end="163:22">if <condition pos:start="161:12" pos:end="161:37">(<expr pos:start="161:13" pos:end="161:36"><operator pos:start="161:13" pos:end="161:13">!</operator><operator pos:start="161:14" pos:end="161:14">(</operator><name pos:start="161:15" pos:end="161:22">prefixes</name> <operator pos:start="161:24" pos:end="161:24">&amp;</operator> <name pos:start="161:26" pos:end="161:35">PREFIX_ADR</name><operator pos:start="161:36" pos:end="161:36">)</operator></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:22"><block_content pos:start="163:13" pos:end="163:22">

            <expr_stmt pos:start="163:13" pos:end="163:22"><expr pos:start="163:13" pos:end="163:21"><name pos:start="163:13" pos:end="163:17">aflag</name> <operator pos:start="163:19" pos:end="163:19">=</operator> <literal type="number" pos:start="163:21" pos:end="163:21">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="165:7" pos:end="249:5">else

<cpp:endif pos:start="167:1" pos:end="167:6">#<cpp:directive pos:start="167:2" pos:end="167:6">endif</cpp:directive></cpp:endif>

    <block pos:start="169:5" pos:end="249:5">{<block_content pos:start="171:9" pos:end="247:23">

        <switch pos:start="171:9" pos:end="239:9">switch <condition pos:start="171:16" pos:end="171:18">(<expr pos:start="171:17" pos:end="171:17"><name pos:start="171:17" pos:end="171:17">b</name></expr>)</condition> <block pos:start="171:20" pos:end="239:9">{<block_content pos:start="173:9" pos:end="237:27">

        <case pos:start="173:9" pos:end="173:18">case <expr pos:start="173:14" pos:end="173:17"><literal type="number" pos:start="173:14" pos:end="173:17">0xf3</literal></expr>:</case>

            <expr_stmt pos:start="175:13" pos:end="175:36"><expr pos:start="175:13" pos:end="175:35"><name pos:start="175:13" pos:end="175:20">prefixes</name> <operator pos:start="175:22" pos:end="175:23">|=</operator> <name pos:start="175:25" pos:end="175:35">PREFIX_REPZ</name></expr>;</expr_stmt>

            <goto pos:start="177:13" pos:end="177:27">goto <name pos:start="177:18" pos:end="177:26">next_byte</name>;</goto>

        <case pos:start="179:9" pos:end="179:18">case <expr pos:start="179:14" pos:end="179:17"><literal type="number" pos:start="179:14" pos:end="179:17">0xf2</literal></expr>:</case>

            <expr_stmt pos:start="181:13" pos:end="181:37"><expr pos:start="181:13" pos:end="181:36"><name pos:start="181:13" pos:end="181:20">prefixes</name> <operator pos:start="181:22" pos:end="181:23">|=</operator> <name pos:start="181:25" pos:end="181:36">PREFIX_REPNZ</name></expr>;</expr_stmt>

            <goto pos:start="183:13" pos:end="183:27">goto <name pos:start="183:18" pos:end="183:26">next_byte</name>;</goto>

        <case pos:start="185:9" pos:end="185:18">case <expr pos:start="185:14" pos:end="185:17"><literal type="number" pos:start="185:14" pos:end="185:17">0xf0</literal></expr>:</case>

            <expr_stmt pos:start="187:13" pos:end="187:36"><expr pos:start="187:13" pos:end="187:35"><name pos:start="187:13" pos:end="187:20">prefixes</name> <operator pos:start="187:22" pos:end="187:23">|=</operator> <name pos:start="187:25" pos:end="187:35">PREFIX_LOCK</name></expr>;</expr_stmt>

            <goto pos:start="189:13" pos:end="189:27">goto <name pos:start="189:18" pos:end="189:26">next_byte</name>;</goto>

        <case pos:start="191:9" pos:end="191:18">case <expr pos:start="191:14" pos:end="191:17"><literal type="number" pos:start="191:14" pos:end="191:17">0x2e</literal></expr>:</case>

            <expr_stmt pos:start="193:13" pos:end="193:31"><expr pos:start="193:13" pos:end="193:30"><name pos:start="193:13" pos:end="193:23"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:23">override</name></name> <operator pos:start="193:25" pos:end="193:25">=</operator> <name pos:start="193:27" pos:end="193:30">R_CS</name></expr>;</expr_stmt>

            <goto pos:start="195:13" pos:end="195:27">goto <name pos:start="195:18" pos:end="195:26">next_byte</name>;</goto>

        <case pos:start="197:9" pos:end="197:18">case <expr pos:start="197:14" pos:end="197:17"><literal type="number" pos:start="197:14" pos:end="197:17">0x36</literal></expr>:</case>

            <expr_stmt pos:start="199:13" pos:end="199:31"><expr pos:start="199:13" pos:end="199:30"><name pos:start="199:13" pos:end="199:23"><name pos:start="199:13" pos:end="199:13">s</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:23">override</name></name> <operator pos:start="199:25" pos:end="199:25">=</operator> <name pos:start="199:27" pos:end="199:30">R_SS</name></expr>;</expr_stmt>

            <goto pos:start="201:13" pos:end="201:27">goto <name pos:start="201:18" pos:end="201:26">next_byte</name>;</goto>

        <case pos:start="203:9" pos:end="203:18">case <expr pos:start="203:14" pos:end="203:17"><literal type="number" pos:start="203:14" pos:end="203:17">0x3e</literal></expr>:</case>

            <expr_stmt pos:start="205:13" pos:end="205:31"><expr pos:start="205:13" pos:end="205:30"><name pos:start="205:13" pos:end="205:23"><name pos:start="205:13" pos:end="205:13">s</name><operator pos:start="205:14" pos:end="205:15">-&gt;</operator><name pos:start="205:16" pos:end="205:23">override</name></name> <operator pos:start="205:25" pos:end="205:25">=</operator> <name pos:start="205:27" pos:end="205:30">R_DS</name></expr>;</expr_stmt>

            <goto pos:start="207:13" pos:end="207:27">goto <name pos:start="207:18" pos:end="207:26">next_byte</name>;</goto>

        <case pos:start="209:9" pos:end="209:18">case <expr pos:start="209:14" pos:end="209:17"><literal type="number" pos:start="209:14" pos:end="209:17">0x26</literal></expr>:</case>

            <expr_stmt pos:start="211:13" pos:end="211:31"><expr pos:start="211:13" pos:end="211:30"><name pos:start="211:13" pos:end="211:23"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:23">override</name></name> <operator pos:start="211:25" pos:end="211:25">=</operator> <name pos:start="211:27" pos:end="211:30">R_ES</name></expr>;</expr_stmt>

            <goto pos:start="213:13" pos:end="213:27">goto <name pos:start="213:18" pos:end="213:26">next_byte</name>;</goto>

        <case pos:start="215:9" pos:end="215:18">case <expr pos:start="215:14" pos:end="215:17"><literal type="number" pos:start="215:14" pos:end="215:17">0x64</literal></expr>:</case>

            <expr_stmt pos:start="217:13" pos:end="217:31"><expr pos:start="217:13" pos:end="217:30"><name pos:start="217:13" pos:end="217:23"><name pos:start="217:13" pos:end="217:13">s</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:23">override</name></name> <operator pos:start="217:25" pos:end="217:25">=</operator> <name pos:start="217:27" pos:end="217:30">R_FS</name></expr>;</expr_stmt>

            <goto pos:start="219:13" pos:end="219:27">goto <name pos:start="219:18" pos:end="219:26">next_byte</name>;</goto>

        <case pos:start="221:9" pos:end="221:18">case <expr pos:start="221:14" pos:end="221:17"><literal type="number" pos:start="221:14" pos:end="221:17">0x65</literal></expr>:</case>

            <expr_stmt pos:start="223:13" pos:end="223:31"><expr pos:start="223:13" pos:end="223:30"><name pos:start="223:13" pos:end="223:23"><name pos:start="223:13" pos:end="223:13">s</name><operator pos:start="223:14" pos:end="223:15">-&gt;</operator><name pos:start="223:16" pos:end="223:23">override</name></name> <operator pos:start="223:25" pos:end="223:25">=</operator> <name pos:start="223:27" pos:end="223:30">R_GS</name></expr>;</expr_stmt>

            <goto pos:start="225:13" pos:end="225:27">goto <name pos:start="225:18" pos:end="225:26">next_byte</name>;</goto>

        <case pos:start="227:9" pos:end="227:18">case <expr pos:start="227:14" pos:end="227:17"><literal type="number" pos:start="227:14" pos:end="227:17">0x66</literal></expr>:</case>

            <expr_stmt pos:start="229:13" pos:end="229:36"><expr pos:start="229:13" pos:end="229:35"><name pos:start="229:13" pos:end="229:20">prefixes</name> <operator pos:start="229:22" pos:end="229:23">|=</operator> <name pos:start="229:25" pos:end="229:35">PREFIX_DATA</name></expr>;</expr_stmt>

            <goto pos:start="231:13" pos:end="231:27">goto <name pos:start="231:18" pos:end="231:26">next_byte</name>;</goto>

        <case pos:start="233:9" pos:end="233:18">case <expr pos:start="233:14" pos:end="233:17"><literal type="number" pos:start="233:14" pos:end="233:17">0x67</literal></expr>:</case>

            <expr_stmt pos:start="235:13" pos:end="235:35"><expr pos:start="235:13" pos:end="235:34"><name pos:start="235:13" pos:end="235:20">prefixes</name> <operator pos:start="235:22" pos:end="235:23">|=</operator> <name pos:start="235:25" pos:end="235:34">PREFIX_ADR</name></expr>;</expr_stmt>

            <goto pos:start="237:13" pos:end="237:27">goto <name pos:start="237:18" pos:end="237:26">next_byte</name>;</goto>

        </block_content>}</block></switch>

        <if_stmt pos:start="241:9" pos:end="243:23"><if pos:start="241:9" pos:end="243:23">if <condition pos:start="241:12" pos:end="241:35">(<expr pos:start="241:13" pos:end="241:34"><name pos:start="241:13" pos:end="241:20">prefixes</name> <operator pos:start="241:22" pos:end="241:22">&amp;</operator> <name pos:start="241:24" pos:end="241:34">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="243:13" pos:end="243:23"><block_content pos:start="243:13" pos:end="243:23">

            <expr_stmt pos:start="243:13" pos:end="243:23"><expr pos:start="243:13" pos:end="243:22"><name pos:start="243:13" pos:end="243:17">dflag</name> <operator pos:start="243:19" pos:end="243:20">^=</operator> <literal type="number" pos:start="243:22" pos:end="243:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="245:9" pos:end="247:23"><if pos:start="245:9" pos:end="247:23">if <condition pos:start="245:12" pos:end="245:34">(<expr pos:start="245:13" pos:end="245:33"><name pos:start="245:13" pos:end="245:20">prefixes</name> <operator pos:start="245:22" pos:end="245:22">&amp;</operator> <name pos:start="245:24" pos:end="245:33">PREFIX_ADR</name></expr>)</condition><block type="pseudo" pos:start="247:13" pos:end="247:23"><block_content pos:start="247:13" pos:end="247:23">

            <expr_stmt pos:start="247:13" pos:end="247:23"><expr pos:start="247:13" pos:end="247:22"><name pos:start="247:13" pos:end="247:17">aflag</name> <operator pos:start="247:19" pos:end="247:20">^=</operator> <literal type="number" pos:start="247:22" pos:end="247:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:25"><expr pos:start="253:5" pos:end="253:24"><name pos:start="253:5" pos:end="253:13"><name pos:start="253:5" pos:end="253:5">s</name><operator pos:start="253:6" pos:end="253:7">-&gt;</operator><name pos:start="253:8" pos:end="253:13">prefix</name></name> <operator pos:start="253:15" pos:end="253:15">=</operator> <name pos:start="253:17" pos:end="253:24">prefixes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:21"><expr pos:start="255:5" pos:end="255:20"><name pos:start="255:5" pos:end="255:12"><name pos:start="255:5" pos:end="255:5">s</name><operator pos:start="255:6" pos:end="255:7">-&gt;</operator><name pos:start="255:8" pos:end="255:12">aflag</name></name> <operator pos:start="255:14" pos:end="255:14">=</operator> <name pos:start="255:16" pos:end="255:20">aflag</name></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:21"><expr pos:start="257:5" pos:end="257:20"><name pos:start="257:5" pos:end="257:12"><name pos:start="257:5" pos:end="257:5">s</name><operator pos:start="257:6" pos:end="257:7">-&gt;</operator><name pos:start="257:8" pos:end="257:12">dflag</name></name> <operator pos:start="257:14" pos:end="257:14">=</operator> <name pos:start="257:16" pos:end="257:20">dflag</name></expr>;</expr_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:25">/* lock generation */</comment>

    <if_stmt pos:start="263:5" pos:end="265:26"><if pos:start="263:5" pos:end="265:26">if <condition pos:start="263:8" pos:end="263:31">(<expr pos:start="263:9" pos:end="263:30"><name pos:start="263:9" pos:end="263:16">prefixes</name> <operator pos:start="263:18" pos:end="263:18">&amp;</operator> <name pos:start="263:20" pos:end="263:30">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="265:9" pos:end="265:26"><block_content pos:start="265:9" pos:end="265:26">

        <expr_stmt pos:start="265:9" pos:end="265:26"><expr pos:start="265:9" pos:end="265:25"><call pos:start="265:9" pos:end="265:25"><name pos:start="265:9" pos:end="265:23">gen_helper_lock</name><argument_list pos:start="265:24" pos:end="265:25">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="269:5" pos:end="269:27">/* now check op code */</comment>

 <label pos:start="271:2" pos:end="271:10"><name pos:start="271:2" pos:end="271:9">reswitch</name>:</label>

    <switch pos:start="273:5" pos:end="7171:5">switch<condition pos:start="273:11" pos:end="273:13">(<expr pos:start="273:12" pos:end="273:12"><name pos:start="273:12" pos:end="273:12">b</name></expr>)</condition> <block pos:start="273:15" pos:end="7171:5">{<block_content pos:start="275:5" pos:end="7169:24">

    <case pos:start="275:5" pos:end="275:14">case <expr pos:start="275:10" pos:end="275:13"><literal type="number" pos:start="275:10" pos:end="275:13">0x0f</literal></expr>:</case>

        <comment type="block" format="doxygen" pos:start="277:9" pos:end="277:36">/**************************/</comment>

        <comment type="block" pos:start="279:9" pos:end="279:30">/* extended op code */</comment>

        <expr_stmt pos:start="281:9" pos:end="281:59"><expr pos:start="281:9" pos:end="281:58"><name pos:start="281:9" pos:end="281:9">b</name> <operator pos:start="281:11" pos:end="281:11">=</operator> <call pos:start="281:13" pos:end="281:50"><name pos:start="281:13" pos:end="281:25">cpu_ldub_code</name><argument_list pos:start="281:26" pos:end="281:50">(<argument pos:start="281:27" pos:end="281:40"><expr pos:start="281:27" pos:end="281:40"><name pos:start="281:27" pos:end="281:40">cpu_single_env</name></expr></argument>, <argument pos:start="281:43" pos:end="281:49"><expr pos:start="281:43" pos:end="281:49"><name pos:start="281:43" pos:end="281:47"><name pos:start="281:43" pos:end="281:43">s</name><operator pos:start="281:44" pos:end="281:45">-&gt;</operator><name pos:start="281:46" pos:end="281:47">pc</name></name><operator pos:start="281:48" pos:end="281:49">++</operator></expr></argument>)</argument_list></call> <operator pos:start="281:52" pos:end="281:52">|</operator> <literal type="number" pos:start="281:54" pos:end="281:58">0x100</literal></expr>;</expr_stmt>

        <goto pos:start="283:9" pos:end="283:22">goto <name pos:start="283:14" pos:end="283:21">reswitch</name>;</goto>



        <comment type="block" format="doxygen" pos:start="287:9" pos:end="287:36">/**************************/</comment>

        <comment type="block" pos:start="289:9" pos:end="289:27">/* arith &amp; logic */</comment>

    <case pos:start="291:5" pos:end="291:23">case <expr pos:start="291:10" pos:end="291:22"><literal type="number" pos:start="291:10" pos:end="291:13">0x00</literal> <operator pos:start="291:15" pos:end="291:17">...</operator> <literal type="number" pos:start="291:19" pos:end="291:22">0x05</literal></expr>:</case>

    <case pos:start="293:5" pos:end="293:23">case <expr pos:start="293:10" pos:end="293:22"><literal type="number" pos:start="293:10" pos:end="293:13">0x08</literal> <operator pos:start="293:15" pos:end="293:17">...</operator> <literal type="number" pos:start="293:19" pos:end="293:22">0x0d</literal></expr>:</case>

    <case pos:start="295:5" pos:end="295:23">case <expr pos:start="295:10" pos:end="295:22"><literal type="number" pos:start="295:10" pos:end="295:13">0x10</literal> <operator pos:start="295:15" pos:end="295:17">...</operator> <literal type="number" pos:start="295:19" pos:end="295:22">0x15</literal></expr>:</case>

    <case pos:start="297:5" pos:end="297:23">case <expr pos:start="297:10" pos:end="297:22"><literal type="number" pos:start="297:10" pos:end="297:13">0x18</literal> <operator pos:start="297:15" pos:end="297:17">...</operator> <literal type="number" pos:start="297:19" pos:end="297:22">0x1d</literal></expr>:</case>

    <case pos:start="299:5" pos:end="299:23">case <expr pos:start="299:10" pos:end="299:22"><literal type="number" pos:start="299:10" pos:end="299:13">0x20</literal> <operator pos:start="299:15" pos:end="299:17">...</operator> <literal type="number" pos:start="299:19" pos:end="299:22">0x25</literal></expr>:</case>

    <case pos:start="301:5" pos:end="301:23">case <expr pos:start="301:10" pos:end="301:22"><literal type="number" pos:start="301:10" pos:end="301:13">0x28</literal> <operator pos:start="301:15" pos:end="301:17">...</operator> <literal type="number" pos:start="301:19" pos:end="301:22">0x2d</literal></expr>:</case>

    <case pos:start="303:5" pos:end="303:23">case <expr pos:start="303:10" pos:end="303:22"><literal type="number" pos:start="303:10" pos:end="303:13">0x30</literal> <operator pos:start="303:15" pos:end="303:17">...</operator> <literal type="number" pos:start="303:19" pos:end="303:22">0x35</literal></expr>:</case>

    <case pos:start="305:5" pos:end="305:23">case <expr pos:start="305:10" pos:end="305:22"><literal type="number" pos:start="305:10" pos:end="305:13">0x38</literal> <operator pos:start="305:15" pos:end="305:17">...</operator> <literal type="number" pos:start="305:19" pos:end="305:22">0x3d</literal></expr>:</case>

        <block pos:start="307:9" pos:end="415:9">{<block_content pos:start="309:13" pos:end="413:13">

            <decl_stmt pos:start="309:13" pos:end="309:27"><decl pos:start="309:13" pos:end="309:18"><type pos:start="309:13" pos:end="309:15"><name pos:start="309:13" pos:end="309:15">int</name></type> <name pos:start="309:17" pos:end="309:18">op</name></decl>, <decl pos:start="309:21" pos:end="309:21"><type ref="prev" pos:start="309:13" pos:end="309:15"/><name pos:start="309:21" pos:end="309:21">f</name></decl>, <decl pos:start="309:24" pos:end="309:26"><type ref="prev" pos:start="309:13" pos:end="309:15"/><name pos:start="309:24" pos:end="309:26">val</name></decl>;</decl_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:30"><expr pos:start="311:13" pos:end="311:29"><name pos:start="311:13" pos:end="311:14">op</name> <operator pos:start="311:16" pos:end="311:16">=</operator> <operator pos:start="311:18" pos:end="311:18">(</operator><name pos:start="311:19" pos:end="311:19">b</name> <operator pos:start="311:21" pos:end="311:22">&gt;&gt;</operator> <literal type="number" pos:start="311:24" pos:end="311:24">3</literal><operator pos:start="311:25" pos:end="311:25">)</operator> <operator pos:start="311:27" pos:end="311:27">&amp;</operator> <literal type="number" pos:start="311:29" pos:end="311:29">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:29"><expr pos:start="313:13" pos:end="313:28"><name pos:start="313:13" pos:end="313:13">f</name> <operator pos:start="313:15" pos:end="313:15">=</operator> <operator pos:start="313:17" pos:end="313:17">(</operator><name pos:start="313:18" pos:end="313:18">b</name> <operator pos:start="313:20" pos:end="313:21">&gt;&gt;</operator> <literal type="number" pos:start="313:23" pos:end="313:23">1</literal><operator pos:start="313:24" pos:end="313:24">)</operator> <operator pos:start="313:26" pos:end="313:26">&amp;</operator> <literal type="number" pos:start="313:28" pos:end="313:28">3</literal></expr>;</expr_stmt>



            <if_stmt pos:start="317:13" pos:end="323:37"><if pos:start="317:13" pos:end="319:29">if <condition pos:start="317:16" pos:end="317:29">(<expr pos:start="317:17" pos:end="317:28"><operator pos:start="317:17" pos:end="317:17">(</operator><name pos:start="317:18" pos:end="317:18">b</name> <operator pos:start="317:20" pos:end="317:20">&amp;</operator> <literal type="number" pos:start="317:22" pos:end="317:22">1</literal><operator pos:start="317:23" pos:end="317:23">)</operator> <operator pos:start="317:25" pos:end="317:26">==</operator> <literal type="number" pos:start="317:28" pos:end="317:28">0</literal></expr>)</condition><block type="pseudo" pos:start="319:17" pos:end="319:29"><block_content pos:start="319:17" pos:end="319:29">

                <expr_stmt pos:start="319:17" pos:end="319:29"><expr pos:start="319:17" pos:end="319:28"><name pos:start="319:17" pos:end="319:18">ot</name> <operator pos:start="319:20" pos:end="319:20">=</operator> <name pos:start="319:22" pos:end="319:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="321:13" pos:end="323:37">else<block type="pseudo" pos:start="323:17" pos:end="323:37"><block_content pos:start="323:17" pos:end="323:37">

                <expr_stmt pos:start="323:17" pos:end="323:37"><expr pos:start="323:17" pos:end="323:36"><name pos:start="323:17" pos:end="323:18">ot</name> <operator pos:start="323:20" pos:end="323:20">=</operator> <name pos:start="323:22" pos:end="323:26">dflag</name> <operator pos:start="323:28" pos:end="323:28">+</operator> <name pos:start="323:30" pos:end="323:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <switch pos:start="327:13" pos:end="413:13">switch<condition pos:start="327:19" pos:end="327:21">(<expr pos:start="327:20" pos:end="327:20"><name pos:start="327:20" pos:end="327:20">f</name></expr>)</condition> <block pos:start="327:23" pos:end="413:13">{<block_content pos:start="329:13" pos:end="411:22">

            <case pos:start="329:13" pos:end="329:19">case <expr pos:start="329:18" pos:end="329:18"><literal type="number" pos:start="329:18" pos:end="329:18">0</literal></expr>:</case> <comment type="block" pos:start="329:21" pos:end="329:35">/* OP Ev, Gv */</comment>

                <expr_stmt pos:start="331:17" pos:end="331:63"><expr pos:start="331:17" pos:end="331:62"><name pos:start="331:17" pos:end="331:21">modrm</name> <operator pos:start="331:23" pos:end="331:23">=</operator> <call pos:start="331:25" pos:end="331:62"><name pos:start="331:25" pos:end="331:37">cpu_ldub_code</name><argument_list pos:start="331:38" pos:end="331:62">(<argument pos:start="331:39" pos:end="331:52"><expr pos:start="331:39" pos:end="331:52"><name pos:start="331:39" pos:end="331:52">cpu_single_env</name></expr></argument>, <argument pos:start="331:55" pos:end="331:61"><expr pos:start="331:55" pos:end="331:61"><name pos:start="331:55" pos:end="331:59"><name pos:start="331:55" pos:end="331:55">s</name><operator pos:start="331:56" pos:end="331:57">-&gt;</operator><name pos:start="331:58" pos:end="331:59">pc</name></name><operator pos:start="331:60" pos:end="331:61">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:49"><expr pos:start="333:17" pos:end="333:48"><name pos:start="333:17" pos:end="333:19">reg</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <operator pos:start="333:23" pos:end="333:23">(</operator><operator pos:start="333:24" pos:end="333:24">(</operator><name pos:start="333:25" pos:end="333:29">modrm</name> <operator pos:start="333:31" pos:end="333:32">&gt;&gt;</operator> <literal type="number" pos:start="333:34" pos:end="333:34">3</literal><operator pos:start="333:35" pos:end="333:35">)</operator> <operator pos:start="333:37" pos:end="333:37">&amp;</operator> <literal type="number" pos:start="333:39" pos:end="333:39">7</literal><operator pos:start="333:40" pos:end="333:40">)</operator> <operator pos:start="333:42" pos:end="333:42">|</operator> <name pos:start="333:44" pos:end="333:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:39"><expr pos:start="335:17" pos:end="335:38"><name pos:start="335:17" pos:end="335:19">mod</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <operator pos:start="335:23" pos:end="335:23">(</operator><name pos:start="335:24" pos:end="335:28">modrm</name> <operator pos:start="335:30" pos:end="335:31">&gt;&gt;</operator> <literal type="number" pos:start="335:33" pos:end="335:33">6</literal><operator pos:start="335:34" pos:end="335:34">)</operator> <operator pos:start="335:36" pos:end="335:36">&amp;</operator> <literal type="number" pos:start="335:38" pos:end="335:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:44"><expr pos:start="337:17" pos:end="337:43"><name pos:start="337:17" pos:end="337:18">rm</name> <operator pos:start="337:20" pos:end="337:20">=</operator> <operator pos:start="337:22" pos:end="337:22">(</operator><name pos:start="337:23" pos:end="337:27">modrm</name> <operator pos:start="337:29" pos:end="337:29">&amp;</operator> <literal type="number" pos:start="337:31" pos:end="337:31">7</literal><operator pos:start="337:32" pos:end="337:32">)</operator> <operator pos:start="337:34" pos:end="337:34">|</operator> <call pos:start="337:36" pos:end="337:43"><name pos:start="337:36" pos:end="337:40">REX_B</name><argument_list pos:start="337:41" pos:end="337:43">(<argument pos:start="337:42" pos:end="337:42"><expr pos:start="337:42" pos:end="337:42"><name pos:start="337:42" pos:end="337:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="339:17" pos:end="365:17"><if pos:start="339:17" pos:end="345:17">if <condition pos:start="339:20" pos:end="339:29">(<expr pos:start="339:21" pos:end="339:28"><name pos:start="339:21" pos:end="339:23">mod</name> <operator pos:start="339:25" pos:end="339:26">!=</operator> <literal type="number" pos:start="339:28" pos:end="339:28">3</literal></expr>)</condition> <block pos:start="339:31" pos:end="345:17">{<block_content pos:start="341:21" pos:end="343:36">

                    <expr_stmt pos:start="341:21" pos:end="341:69"><expr pos:start="341:21" pos:end="341:68"><call pos:start="341:21" pos:end="341:68"><name pos:start="341:21" pos:end="341:33">gen_lea_modrm</name><argument_list pos:start="341:34" pos:end="341:68">(<argument pos:start="341:35" pos:end="341:35"><expr pos:start="341:35" pos:end="341:35"><name pos:start="341:35" pos:end="341:35">s</name></expr></argument>, <argument pos:start="341:38" pos:end="341:42"><expr pos:start="341:38" pos:end="341:42"><name pos:start="341:38" pos:end="341:42">modrm</name></expr></argument>, <argument pos:start="341:45" pos:end="341:53"><expr pos:start="341:45" pos:end="341:53"><operator pos:start="341:45" pos:end="341:45">&amp;</operator><name pos:start="341:46" pos:end="341:53">reg_addr</name></expr></argument>, <argument pos:start="341:56" pos:end="341:67"><expr pos:start="341:56" pos:end="341:67"><operator pos:start="341:56" pos:end="341:56">&amp;</operator><name pos:start="341:57" pos:end="341:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="343:21" pos:end="343:36"><expr pos:start="343:21" pos:end="343:35"><name pos:start="343:21" pos:end="343:25">opreg</name> <operator pos:start="343:27" pos:end="343:27">=</operator> <name pos:start="343:29" pos:end="343:35">OR_TMP0</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="345:19" pos:end="361:17">else if <condition pos:start="345:27" pos:end="345:54">(<expr pos:start="345:28" pos:end="345:53"><name pos:start="345:28" pos:end="345:29">op</name> <operator pos:start="345:31" pos:end="345:32">==</operator> <name pos:start="345:34" pos:end="345:40">OP_XORL</name> <operator pos:start="345:42" pos:end="345:43">&amp;&amp;</operator> <name pos:start="345:45" pos:end="345:46">rm</name> <operator pos:start="345:48" pos:end="345:49">==</operator> <name pos:start="345:51" pos:end="345:53">reg</name></expr>)</condition> <block pos:start="345:56" pos:end="361:17">{<block_content pos:start="347:17" pos:end="359:26">

                <label pos:start="347:17" pos:end="347:25"><name pos:start="347:17" pos:end="347:24">xor_zero</name>:</label>

                    <comment type="block" pos:start="349:21" pos:end="349:51">/* xor reg, reg optimisation */</comment>

                    <expr_stmt pos:start="351:21" pos:end="351:39"><expr pos:start="351:21" pos:end="351:38"><call pos:start="351:21" pos:end="351:38"><name pos:start="351:21" pos:end="351:36">gen_op_movl_T0_0</name><argument_list pos:start="351:37" pos:end="351:38">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="353:21" pos:end="353:49"><expr pos:start="353:21" pos:end="353:48"><name pos:start="353:21" pos:end="353:28"><name pos:start="353:21" pos:end="353:21">s</name><operator pos:start="353:22" pos:end="353:23">-&gt;</operator><name pos:start="353:24" pos:end="353:28">cc_op</name></name> <operator pos:start="353:30" pos:end="353:30">=</operator> <name pos:start="353:32" pos:end="353:43">CC_OP_LOGICB</name> <operator pos:start="353:45" pos:end="353:45">+</operator> <name pos:start="353:47" pos:end="353:48">ot</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:47"><expr pos:start="355:21" pos:end="355:46"><call pos:start="355:21" pos:end="355:46"><name pos:start="355:21" pos:end="355:37">gen_op_mov_reg_T0</name><argument_list pos:start="355:38" pos:end="355:46">(<argument pos:start="355:39" pos:end="355:40"><expr pos:start="355:39" pos:end="355:40"><name pos:start="355:39" pos:end="355:40">ot</name></expr></argument>, <argument pos:start="355:43" pos:end="355:45"><expr pos:start="355:43" pos:end="355:45"><name pos:start="355:43" pos:end="355:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="357:21" pos:end="357:40"><expr pos:start="357:21" pos:end="357:39"><call pos:start="357:21" pos:end="357:39"><name pos:start="357:21" pos:end="357:37">gen_op_update1_cc</name><argument_list pos:start="357:38" pos:end="357:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="359:21" pos:end="359:26">break;</break>

                </block_content>}</block></if> <else pos:start="361:19" pos:end="365:17">else <block pos:start="361:24" pos:end="365:17">{<block_content pos:start="363:21" pos:end="363:31">

                    <expr_stmt pos:start="363:21" pos:end="363:31"><expr pos:start="363:21" pos:end="363:30"><name pos:start="363:21" pos:end="363:25">opreg</name> <operator pos:start="363:27" pos:end="363:27">=</operator> <name pos:start="363:29" pos:end="363:30">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:46"><expr pos:start="367:17" pos:end="367:45"><call pos:start="367:17" pos:end="367:45"><name pos:start="367:17" pos:end="367:33">gen_op_mov_TN_reg</name><argument_list pos:start="367:34" pos:end="367:45">(<argument pos:start="367:35" pos:end="367:36"><expr pos:start="367:35" pos:end="367:36"><name pos:start="367:35" pos:end="367:36">ot</name></expr></argument>, <argument pos:start="367:39" pos:end="367:39"><expr pos:start="367:39" pos:end="367:39"><literal type="number" pos:start="367:39" pos:end="367:39">1</literal></expr></argument>, <argument pos:start="367:42" pos:end="367:44"><expr pos:start="367:42" pos:end="367:44"><name pos:start="367:42" pos:end="367:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:41"><expr pos:start="369:17" pos:end="369:40"><call pos:start="369:17" pos:end="369:40"><name pos:start="369:17" pos:end="369:22">gen_op</name><argument_list pos:start="369:23" pos:end="369:40">(<argument pos:start="369:24" pos:end="369:24"><expr pos:start="369:24" pos:end="369:24"><name pos:start="369:24" pos:end="369:24">s</name></expr></argument>, <argument pos:start="369:27" pos:end="369:28"><expr pos:start="369:27" pos:end="369:28"><name pos:start="369:27" pos:end="369:28">op</name></expr></argument>, <argument pos:start="369:31" pos:end="369:32"><expr pos:start="369:31" pos:end="369:32"><name pos:start="369:31" pos:end="369:32">ot</name></expr></argument>, <argument pos:start="369:35" pos:end="369:39"><expr pos:start="369:35" pos:end="369:39"><name pos:start="369:35" pos:end="369:39">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="371:17" pos:end="371:22">break;</break>

            <case pos:start="373:13" pos:end="373:19">case <expr pos:start="373:18" pos:end="373:18"><literal type="number" pos:start="373:18" pos:end="373:18">1</literal></expr>:</case> <comment type="block" pos:start="373:21" pos:end="373:35">/* OP Gv, Ev */</comment>

                <expr_stmt pos:start="375:17" pos:end="375:63"><expr pos:start="375:17" pos:end="375:62"><name pos:start="375:17" pos:end="375:21">modrm</name> <operator pos:start="375:23" pos:end="375:23">=</operator> <call pos:start="375:25" pos:end="375:62"><name pos:start="375:25" pos:end="375:37">cpu_ldub_code</name><argument_list pos:start="375:38" pos:end="375:62">(<argument pos:start="375:39" pos:end="375:52"><expr pos:start="375:39" pos:end="375:52"><name pos:start="375:39" pos:end="375:52">cpu_single_env</name></expr></argument>, <argument pos:start="375:55" pos:end="375:61"><expr pos:start="375:55" pos:end="375:61"><name pos:start="375:55" pos:end="375:59"><name pos:start="375:55" pos:end="375:55">s</name><operator pos:start="375:56" pos:end="375:57">-&gt;</operator><name pos:start="375:58" pos:end="375:59">pc</name></name><operator pos:start="375:60" pos:end="375:61">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:39"><expr pos:start="377:17" pos:end="377:38"><name pos:start="377:17" pos:end="377:19">mod</name> <operator pos:start="377:21" pos:end="377:21">=</operator> <operator pos:start="377:23" pos:end="377:23">(</operator><name pos:start="377:24" pos:end="377:28">modrm</name> <operator pos:start="377:30" pos:end="377:31">&gt;&gt;</operator> <literal type="number" pos:start="377:33" pos:end="377:33">6</literal><operator pos:start="377:34" pos:end="377:34">)</operator> <operator pos:start="377:36" pos:end="377:36">&amp;</operator> <literal type="number" pos:start="377:38" pos:end="377:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:49"><expr pos:start="379:17" pos:end="379:48"><name pos:start="379:17" pos:end="379:19">reg</name> <operator pos:start="379:21" pos:end="379:21">=</operator> <operator pos:start="379:23" pos:end="379:23">(</operator><operator pos:start="379:24" pos:end="379:24">(</operator><name pos:start="379:25" pos:end="379:29">modrm</name> <operator pos:start="379:31" pos:end="379:32">&gt;&gt;</operator> <literal type="number" pos:start="379:34" pos:end="379:34">3</literal><operator pos:start="379:35" pos:end="379:35">)</operator> <operator pos:start="379:37" pos:end="379:37">&amp;</operator> <literal type="number" pos:start="379:39" pos:end="379:39">7</literal><operator pos:start="379:40" pos:end="379:40">)</operator> <operator pos:start="379:42" pos:end="379:42">|</operator> <name pos:start="379:44" pos:end="379:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:44"><expr pos:start="381:17" pos:end="381:43"><name pos:start="381:17" pos:end="381:18">rm</name> <operator pos:start="381:20" pos:end="381:20">=</operator> <operator pos:start="381:22" pos:end="381:22">(</operator><name pos:start="381:23" pos:end="381:27">modrm</name> <operator pos:start="381:29" pos:end="381:29">&amp;</operator> <literal type="number" pos:start="381:31" pos:end="381:31">7</literal><operator pos:start="381:32" pos:end="381:32">)</operator> <operator pos:start="381:34" pos:end="381:34">|</operator> <call pos:start="381:36" pos:end="381:43"><name pos:start="381:36" pos:end="381:40">REX_B</name><argument_list pos:start="381:41" pos:end="381:43">(<argument pos:start="381:42" pos:end="381:42"><expr pos:start="381:42" pos:end="381:42"><name pos:start="381:42" pos:end="381:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="383:17" pos:end="397:17"><if pos:start="383:17" pos:end="389:17">if <condition pos:start="383:20" pos:end="383:29">(<expr pos:start="383:21" pos:end="383:28"><name pos:start="383:21" pos:end="383:23">mod</name> <operator pos:start="383:25" pos:end="383:26">!=</operator> <literal type="number" pos:start="383:28" pos:end="383:28">3</literal></expr>)</condition> <block pos:start="383:31" pos:end="389:17">{<block_content pos:start="385:21" pos:end="387:55">

                    <expr_stmt pos:start="385:21" pos:end="385:69"><expr pos:start="385:21" pos:end="385:68"><call pos:start="385:21" pos:end="385:68"><name pos:start="385:21" pos:end="385:33">gen_lea_modrm</name><argument_list pos:start="385:34" pos:end="385:68">(<argument pos:start="385:35" pos:end="385:35"><expr pos:start="385:35" pos:end="385:35"><name pos:start="385:35" pos:end="385:35">s</name></expr></argument>, <argument pos:start="385:38" pos:end="385:42"><expr pos:start="385:38" pos:end="385:42"><name pos:start="385:38" pos:end="385:42">modrm</name></expr></argument>, <argument pos:start="385:45" pos:end="385:53"><expr pos:start="385:45" pos:end="385:53"><operator pos:start="385:45" pos:end="385:45">&amp;</operator><name pos:start="385:46" pos:end="385:53">reg_addr</name></expr></argument>, <argument pos:start="385:56" pos:end="385:67"><expr pos:start="385:56" pos:end="385:67"><operator pos:start="385:56" pos:end="385:56">&amp;</operator><name pos:start="385:57" pos:end="385:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="387:21" pos:end="387:55"><expr pos:start="387:21" pos:end="387:54"><call pos:start="387:21" pos:end="387:54"><name pos:start="387:21" pos:end="387:35">gen_op_ld_T1_A0</name><argument_list pos:start="387:36" pos:end="387:54">(<argument pos:start="387:37" pos:end="387:53"><expr pos:start="387:37" pos:end="387:53"><name pos:start="387:37" pos:end="387:38">ot</name> <operator pos:start="387:40" pos:end="387:40">+</operator> <name pos:start="387:42" pos:end="387:53"><name pos:start="387:42" pos:end="387:42">s</name><operator pos:start="387:43" pos:end="387:44">-&gt;</operator><name pos:start="387:45" pos:end="387:53">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="389:19" pos:end="393:17">else if <condition pos:start="389:27" pos:end="389:54">(<expr pos:start="389:28" pos:end="389:53"><name pos:start="389:28" pos:end="389:29">op</name> <operator pos:start="389:31" pos:end="389:32">==</operator> <name pos:start="389:34" pos:end="389:40">OP_XORL</name> <operator pos:start="389:42" pos:end="389:43">&amp;&amp;</operator> <name pos:start="389:45" pos:end="389:46">rm</name> <operator pos:start="389:48" pos:end="389:49">==</operator> <name pos:start="389:51" pos:end="389:53">reg</name></expr>)</condition> <block pos:start="389:56" pos:end="393:17">{<block_content pos:start="391:21" pos:end="391:34">

                    <goto pos:start="391:21" pos:end="391:34">goto <name pos:start="391:26" pos:end="391:33">xor_zero</name>;</goto>

                </block_content>}</block></if> <else pos:start="393:19" pos:end="397:17">else <block pos:start="393:24" pos:end="397:17">{<block_content pos:start="395:21" pos:end="395:49">

                    <expr_stmt pos:start="395:21" pos:end="395:49"><expr pos:start="395:21" pos:end="395:48"><call pos:start="395:21" pos:end="395:48"><name pos:start="395:21" pos:end="395:37">gen_op_mov_TN_reg</name><argument_list pos:start="395:38" pos:end="395:48">(<argument pos:start="395:39" pos:end="395:40"><expr pos:start="395:39" pos:end="395:40"><name pos:start="395:39" pos:end="395:40">ot</name></expr></argument>, <argument pos:start="395:43" pos:end="395:43"><expr pos:start="395:43" pos:end="395:43"><literal type="number" pos:start="395:43" pos:end="395:43">1</literal></expr></argument>, <argument pos:start="395:46" pos:end="395:47"><expr pos:start="395:46" pos:end="395:47"><name pos:start="395:46" pos:end="395:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="399:17" pos:end="399:39"><expr pos:start="399:17" pos:end="399:38"><call pos:start="399:17" pos:end="399:38"><name pos:start="399:17" pos:end="399:22">gen_op</name><argument_list pos:start="399:23" pos:end="399:38">(<argument pos:start="399:24" pos:end="399:24"><expr pos:start="399:24" pos:end="399:24"><name pos:start="399:24" pos:end="399:24">s</name></expr></argument>, <argument pos:start="399:27" pos:end="399:28"><expr pos:start="399:27" pos:end="399:28"><name pos:start="399:27" pos:end="399:28">op</name></expr></argument>, <argument pos:start="399:31" pos:end="399:32"><expr pos:start="399:31" pos:end="399:32"><name pos:start="399:31" pos:end="399:32">ot</name></expr></argument>, <argument pos:start="399:35" pos:end="399:37"><expr pos:start="399:35" pos:end="399:37"><name pos:start="399:35" pos:end="399:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="401:17" pos:end="401:22">break;</break>

            <case pos:start="403:13" pos:end="403:19">case <expr pos:start="403:18" pos:end="403:18"><literal type="number" pos:start="403:18" pos:end="403:18">2</literal></expr>:</case> <comment type="block" pos:start="403:21" pos:end="403:34">/* OP A, Iv */</comment>

                <expr_stmt pos:start="405:17" pos:end="405:38"><expr pos:start="405:17" pos:end="405:37"><name pos:start="405:17" pos:end="405:19">val</name> <operator pos:start="405:21" pos:end="405:21">=</operator> <call pos:start="405:23" pos:end="405:37"><name pos:start="405:23" pos:end="405:30">insn_get</name><argument_list pos:start="405:31" pos:end="405:37">(<argument pos:start="405:32" pos:end="405:32"><expr pos:start="405:32" pos:end="405:32"><name pos:start="405:32" pos:end="405:32">s</name></expr></argument>, <argument pos:start="405:35" pos:end="405:36"><expr pos:start="405:35" pos:end="405:36"><name pos:start="405:35" pos:end="405:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="407:17" pos:end="407:39"><expr pos:start="407:17" pos:end="407:38"><call pos:start="407:17" pos:end="407:38"><name pos:start="407:17" pos:end="407:33">gen_op_movl_T1_im</name><argument_list pos:start="407:34" pos:end="407:38">(<argument pos:start="407:35" pos:end="407:37"><expr pos:start="407:35" pos:end="407:37"><name pos:start="407:35" pos:end="407:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:42"><expr pos:start="409:17" pos:end="409:41"><call pos:start="409:17" pos:end="409:41"><name pos:start="409:17" pos:end="409:22">gen_op</name><argument_list pos:start="409:23" pos:end="409:41">(<argument pos:start="409:24" pos:end="409:24"><expr pos:start="409:24" pos:end="409:24"><name pos:start="409:24" pos:end="409:24">s</name></expr></argument>, <argument pos:start="409:27" pos:end="409:28"><expr pos:start="409:27" pos:end="409:28"><name pos:start="409:27" pos:end="409:28">op</name></expr></argument>, <argument pos:start="409:31" pos:end="409:32"><expr pos:start="409:31" pos:end="409:32"><name pos:start="409:31" pos:end="409:32">ot</name></expr></argument>, <argument pos:start="409:35" pos:end="409:40"><expr pos:start="409:35" pos:end="409:40"><name pos:start="409:35" pos:end="409:40">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="411:17" pos:end="411:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="417:9" pos:end="417:14">break;</break>



    <case pos:start="421:5" pos:end="421:14">case <expr pos:start="421:10" pos:end="421:13"><literal type="number" pos:start="421:10" pos:end="421:13">0x82</literal></expr>:</case>

        <if_stmt pos:start="423:9" pos:end="425:28"><if pos:start="423:9" pos:end="425:28">if <condition pos:start="423:12" pos:end="423:22">(<expr pos:start="423:13" pos:end="423:21"><call pos:start="423:13" pos:end="423:21"><name pos:start="423:13" pos:end="423:18">CODE64</name><argument_list pos:start="423:19" pos:end="423:21">(<argument pos:start="423:20" pos:end="423:20"><expr pos:start="423:20" pos:end="423:20"><name pos:start="423:20" pos:end="423:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="425:13" pos:end="425:28"><block_content pos:start="425:13" pos:end="425:28">

            <goto pos:start="425:13" pos:end="425:28">goto <name pos:start="425:18" pos:end="425:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

    <case pos:start="427:5" pos:end="427:14">case <expr pos:start="427:10" pos:end="427:13"><literal type="number" pos:start="427:10" pos:end="427:13">0x80</literal></expr>:</case> <comment type="block" pos:start="427:16" pos:end="427:25">/* GRP1 */</comment>

    <case pos:start="429:5" pos:end="429:14">case <expr pos:start="429:10" pos:end="429:13"><literal type="number" pos:start="429:10" pos:end="429:13">0x81</literal></expr>:</case>

    <case pos:start="431:5" pos:end="431:14">case <expr pos:start="431:10" pos:end="431:13"><literal type="number" pos:start="431:10" pos:end="431:13">0x83</literal></expr>:</case>

        <block pos:start="433:9" pos:end="507:9">{<block_content pos:start="435:13" pos:end="505:37">

            <decl_stmt pos:start="435:13" pos:end="435:20"><decl pos:start="435:13" pos:end="435:19"><type pos:start="435:13" pos:end="435:15"><name pos:start="435:13" pos:end="435:15">int</name></type> <name pos:start="435:17" pos:end="435:19">val</name></decl>;</decl_stmt>



            <if_stmt pos:start="439:13" pos:end="445:37"><if pos:start="439:13" pos:end="441:29">if <condition pos:start="439:16" pos:end="439:29">(<expr pos:start="439:17" pos:end="439:28"><operator pos:start="439:17" pos:end="439:17">(</operator><name pos:start="439:18" pos:end="439:18">b</name> <operator pos:start="439:20" pos:end="439:20">&amp;</operator> <literal type="number" pos:start="439:22" pos:end="439:22">1</literal><operator pos:start="439:23" pos:end="439:23">)</operator> <operator pos:start="439:25" pos:end="439:26">==</operator> <literal type="number" pos:start="439:28" pos:end="439:28">0</literal></expr>)</condition><block type="pseudo" pos:start="441:17" pos:end="441:29"><block_content pos:start="441:17" pos:end="441:29">

                <expr_stmt pos:start="441:17" pos:end="441:29"><expr pos:start="441:17" pos:end="441:28"><name pos:start="441:17" pos:end="441:18">ot</name> <operator pos:start="441:20" pos:end="441:20">=</operator> <name pos:start="441:22" pos:end="441:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="443:13" pos:end="445:37">else<block type="pseudo" pos:start="445:17" pos:end="445:37"><block_content pos:start="445:17" pos:end="445:37">

                <expr_stmt pos:start="445:17" pos:end="445:37"><expr pos:start="445:17" pos:end="445:36"><name pos:start="445:17" pos:end="445:18">ot</name> <operator pos:start="445:20" pos:end="445:20">=</operator> <name pos:start="445:22" pos:end="445:26">dflag</name> <operator pos:start="445:28" pos:end="445:28">+</operator> <name pos:start="445:30" pos:end="445:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="449:13" pos:end="449:59"><expr pos:start="449:13" pos:end="449:58"><name pos:start="449:13" pos:end="449:17">modrm</name> <operator pos:start="449:19" pos:end="449:19">=</operator> <call pos:start="449:21" pos:end="449:58"><name pos:start="449:21" pos:end="449:33">cpu_ldub_code</name><argument_list pos:start="449:34" pos:end="449:58">(<argument pos:start="449:35" pos:end="449:48"><expr pos:start="449:35" pos:end="449:48"><name pos:start="449:35" pos:end="449:48">cpu_single_env</name></expr></argument>, <argument pos:start="449:51" pos:end="449:57"><expr pos:start="449:51" pos:end="449:57"><name pos:start="449:51" pos:end="449:55"><name pos:start="449:51" pos:end="449:51">s</name><operator pos:start="449:52" pos:end="449:53">-&gt;</operator><name pos:start="449:54" pos:end="449:55">pc</name></name><operator pos:start="449:56" pos:end="449:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="451:13" pos:end="451:35"><expr pos:start="451:13" pos:end="451:34"><name pos:start="451:13" pos:end="451:15">mod</name> <operator pos:start="451:17" pos:end="451:17">=</operator> <operator pos:start="451:19" pos:end="451:19">(</operator><name pos:start="451:20" pos:end="451:24">modrm</name> <operator pos:start="451:26" pos:end="451:27">&gt;&gt;</operator> <literal type="number" pos:start="451:29" pos:end="451:29">6</literal><operator pos:start="451:30" pos:end="451:30">)</operator> <operator pos:start="451:32" pos:end="451:32">&amp;</operator> <literal type="number" pos:start="451:34" pos:end="451:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:40"><expr pos:start="453:13" pos:end="453:39"><name pos:start="453:13" pos:end="453:14">rm</name> <operator pos:start="453:16" pos:end="453:16">=</operator> <operator pos:start="453:18" pos:end="453:18">(</operator><name pos:start="453:19" pos:end="453:23">modrm</name> <operator pos:start="453:25" pos:end="453:25">&amp;</operator> <literal type="number" pos:start="453:27" pos:end="453:27">7</literal><operator pos:start="453:28" pos:end="453:28">)</operator> <operator pos:start="453:30" pos:end="453:30">|</operator> <call pos:start="453:32" pos:end="453:39"><name pos:start="453:32" pos:end="453:36">REX_B</name><argument_list pos:start="453:37" pos:end="453:39">(<argument pos:start="453:38" pos:end="453:38"><expr pos:start="453:38" pos:end="453:38"><name pos:start="453:38" pos:end="453:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:34"><expr pos:start="455:13" pos:end="455:33"><name pos:start="455:13" pos:end="455:14">op</name> <operator pos:start="455:16" pos:end="455:16">=</operator> <operator pos:start="455:18" pos:end="455:18">(</operator><name pos:start="455:19" pos:end="455:23">modrm</name> <operator pos:start="455:25" pos:end="455:26">&gt;&gt;</operator> <literal type="number" pos:start="455:28" pos:end="455:28">3</literal><operator pos:start="455:29" pos:end="455:29">)</operator> <operator pos:start="455:31" pos:end="455:31">&amp;</operator> <literal type="number" pos:start="455:33" pos:end="455:33">7</literal></expr>;</expr_stmt>



            <if_stmt pos:start="459:13" pos:end="477:13"><if pos:start="459:13" pos:end="473:13">if <condition pos:start="459:16" pos:end="459:25">(<expr pos:start="459:17" pos:end="459:24"><name pos:start="459:17" pos:end="459:19">mod</name> <operator pos:start="459:21" pos:end="459:22">!=</operator> <literal type="number" pos:start="459:24" pos:end="459:24">3</literal></expr>)</condition> <block pos:start="459:27" pos:end="473:13">{<block_content pos:start="461:17" pos:end="471:32">

                <if_stmt pos:start="461:17" pos:end="467:56"><if pos:start="461:17" pos:end="463:38">if <condition pos:start="461:20" pos:end="461:30">(<expr pos:start="461:21" pos:end="461:29"><name pos:start="461:21" pos:end="461:21">b</name> <operator pos:start="461:23" pos:end="461:24">==</operator> <literal type="number" pos:start="461:26" pos:end="461:29">0x83</literal></expr>)</condition><block type="pseudo" pos:start="463:21" pos:end="463:38"><block_content pos:start="463:21" pos:end="463:38">

                    <expr_stmt pos:start="463:21" pos:end="463:38"><expr pos:start="463:21" pos:end="463:37"><name pos:start="463:21" pos:end="463:33"><name pos:start="463:21" pos:end="463:21">s</name><operator pos:start="463:22" pos:end="463:23">-&gt;</operator><name pos:start="463:24" pos:end="463:33">rip_offset</name></name> <operator pos:start="463:35" pos:end="463:35">=</operator> <literal type="number" pos:start="463:37" pos:end="463:37">1</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="465:17" pos:end="467:56">else<block type="pseudo" pos:start="467:21" pos:end="467:56"><block_content pos:start="467:21" pos:end="467:56">

                    <expr_stmt pos:start="467:21" pos:end="467:56"><expr pos:start="467:21" pos:end="467:55"><name pos:start="467:21" pos:end="467:33"><name pos:start="467:21" pos:end="467:21">s</name><operator pos:start="467:22" pos:end="467:23">-&gt;</operator><name pos:start="467:24" pos:end="467:33">rip_offset</name></name> <operator pos:start="467:35" pos:end="467:35">=</operator> <call pos:start="467:37" pos:end="467:55"><name pos:start="467:37" pos:end="467:51">insn_const_size</name><argument_list pos:start="467:52" pos:end="467:55">(<argument pos:start="467:53" pos:end="467:54"><expr pos:start="467:53" pos:end="467:54"><name pos:start="467:53" pos:end="467:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="469:17" pos:end="469:65"><expr pos:start="469:17" pos:end="469:64"><call pos:start="469:17" pos:end="469:64"><name pos:start="469:17" pos:end="469:29">gen_lea_modrm</name><argument_list pos:start="469:30" pos:end="469:64">(<argument pos:start="469:31" pos:end="469:31"><expr pos:start="469:31" pos:end="469:31"><name pos:start="469:31" pos:end="469:31">s</name></expr></argument>, <argument pos:start="469:34" pos:end="469:38"><expr pos:start="469:34" pos:end="469:38"><name pos:start="469:34" pos:end="469:38">modrm</name></expr></argument>, <argument pos:start="469:41" pos:end="469:49"><expr pos:start="469:41" pos:end="469:49"><operator pos:start="469:41" pos:end="469:41">&amp;</operator><name pos:start="469:42" pos:end="469:49">reg_addr</name></expr></argument>, <argument pos:start="469:52" pos:end="469:63"><expr pos:start="469:52" pos:end="469:63"><operator pos:start="469:52" pos:end="469:52">&amp;</operator><name pos:start="469:53" pos:end="469:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="471:17" pos:end="471:32"><expr pos:start="471:17" pos:end="471:31"><name pos:start="471:17" pos:end="471:21">opreg</name> <operator pos:start="471:23" pos:end="471:23">=</operator> <name pos:start="471:25" pos:end="471:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="473:15" pos:end="477:13">else <block pos:start="473:20" pos:end="477:13">{<block_content pos:start="475:17" pos:end="475:27">

                <expr_stmt pos:start="475:17" pos:end="475:27"><expr pos:start="475:17" pos:end="475:26"><name pos:start="475:17" pos:end="475:21">opreg</name> <operator pos:start="475:23" pos:end="475:23">=</operator> <name pos:start="475:25" pos:end="475:26">rm</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <switch pos:start="481:13" pos:end="501:13">switch<condition pos:start="481:19" pos:end="481:21">(<expr pos:start="481:20" pos:end="481:20"><name pos:start="481:20" pos:end="481:20">b</name></expr>)</condition> <block pos:start="481:23" pos:end="501:13">{<block_content pos:start="483:13" pos:end="499:22">

            <default pos:start="483:13" pos:end="483:20">default:</default>

            <case pos:start="485:13" pos:end="485:22">case <expr pos:start="485:18" pos:end="485:21"><literal type="number" pos:start="485:18" pos:end="485:21">0x80</literal></expr>:</case>

            <case pos:start="487:13" pos:end="487:22">case <expr pos:start="487:18" pos:end="487:21"><literal type="number" pos:start="487:18" pos:end="487:21">0x81</literal></expr>:</case>

            <case pos:start="489:13" pos:end="489:22">case <expr pos:start="489:18" pos:end="489:21"><literal type="number" pos:start="489:18" pos:end="489:21">0x82</literal></expr>:</case>

                <expr_stmt pos:start="491:17" pos:end="491:38"><expr pos:start="491:17" pos:end="491:37"><name pos:start="491:17" pos:end="491:19">val</name> <operator pos:start="491:21" pos:end="491:21">=</operator> <call pos:start="491:23" pos:end="491:37"><name pos:start="491:23" pos:end="491:30">insn_get</name><argument_list pos:start="491:31" pos:end="491:37">(<argument pos:start="491:32" pos:end="491:32"><expr pos:start="491:32" pos:end="491:32"><name pos:start="491:32" pos:end="491:32">s</name></expr></argument>, <argument pos:start="491:35" pos:end="491:36"><expr pos:start="491:35" pos:end="491:36"><name pos:start="491:35" pos:end="491:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="493:17" pos:end="493:22">break;</break>

            <case pos:start="495:13" pos:end="495:22">case <expr pos:start="495:18" pos:end="495:21"><literal type="number" pos:start="495:18" pos:end="495:21">0x83</literal></expr>:</case>

                <expr_stmt pos:start="497:17" pos:end="497:51"><expr pos:start="497:17" pos:end="497:50"><name pos:start="497:17" pos:end="497:19">val</name> <operator pos:start="497:21" pos:end="497:21">=</operator> <operator pos:start="497:23" pos:end="497:23">(</operator><name pos:start="497:24" pos:end="497:29">int8_t</name><operator pos:start="497:30" pos:end="497:30">)</operator><call pos:start="497:31" pos:end="497:50"><name pos:start="497:31" pos:end="497:38">insn_get</name><argument_list pos:start="497:39" pos:end="497:50">(<argument pos:start="497:40" pos:end="497:40"><expr pos:start="497:40" pos:end="497:40"><name pos:start="497:40" pos:end="497:40">s</name></expr></argument>, <argument pos:start="497:43" pos:end="497:49"><expr pos:start="497:43" pos:end="497:49"><name pos:start="497:43" pos:end="497:49">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="499:17" pos:end="499:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="503:13" pos:end="503:35"><expr pos:start="503:13" pos:end="503:34"><call pos:start="503:13" pos:end="503:34"><name pos:start="503:13" pos:end="503:29">gen_op_movl_T1_im</name><argument_list pos:start="503:30" pos:end="503:34">(<argument pos:start="503:31" pos:end="503:33"><expr pos:start="503:31" pos:end="503:33"><name pos:start="503:31" pos:end="503:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="505:13" pos:end="505:37"><expr pos:start="505:13" pos:end="505:36"><call pos:start="505:13" pos:end="505:36"><name pos:start="505:13" pos:end="505:18">gen_op</name><argument_list pos:start="505:19" pos:end="505:36">(<argument pos:start="505:20" pos:end="505:20"><expr pos:start="505:20" pos:end="505:20"><name pos:start="505:20" pos:end="505:20">s</name></expr></argument>, <argument pos:start="505:23" pos:end="505:24"><expr pos:start="505:23" pos:end="505:24"><name pos:start="505:23" pos:end="505:24">op</name></expr></argument>, <argument pos:start="505:27" pos:end="505:28"><expr pos:start="505:27" pos:end="505:28"><name pos:start="505:27" pos:end="505:28">ot</name></expr></argument>, <argument pos:start="505:31" pos:end="505:35"><expr pos:start="505:31" pos:end="505:35"><name pos:start="505:31" pos:end="505:35">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="509:9" pos:end="509:14">break;</break>



        <comment type="block" format="doxygen" pos:start="513:9" pos:end="513:36">/**************************/</comment>

        <comment type="block" pos:start="515:9" pos:end="515:44">/* inc, dec, and other misc arith */</comment>

    <case pos:start="517:5" pos:end="517:23">case <expr pos:start="517:10" pos:end="517:22"><literal type="number" pos:start="517:10" pos:end="517:13">0x40</literal> <operator pos:start="517:15" pos:end="517:17">...</operator> <literal type="number" pos:start="517:19" pos:end="517:22">0x47</literal></expr>:</case> <comment type="block" pos:start="517:25" pos:end="517:36">/* inc Gv */</comment>

        <expr_stmt pos:start="519:9" pos:end="519:39"><expr pos:start="519:9" pos:end="519:38"><name pos:start="519:9" pos:end="519:10">ot</name> <operator pos:start="519:12" pos:end="519:12">=</operator> <ternary pos:start="519:14" pos:end="519:38"><condition pos:start="519:14" pos:end="519:20"><expr pos:start="519:14" pos:end="519:18"><name pos:start="519:14" pos:end="519:18">dflag</name></expr> ?</condition><then pos:start="519:22" pos:end="519:28"> <expr pos:start="519:22" pos:end="519:28"><name pos:start="519:22" pos:end="519:28">OT_LONG</name></expr> </then><else pos:start="519:30" pos:end="519:38">: <expr pos:start="519:32" pos:end="519:38"><name pos:start="519:32" pos:end="519:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="521:9" pos:end="521:44"><expr pos:start="521:9" pos:end="521:43"><call pos:start="521:9" pos:end="521:43"><name pos:start="521:9" pos:end="521:15">gen_inc</name><argument_list pos:start="521:16" pos:end="521:43">(<argument pos:start="521:17" pos:end="521:17"><expr pos:start="521:17" pos:end="521:17"><name pos:start="521:17" pos:end="521:17">s</name></expr></argument>, <argument pos:start="521:20" pos:end="521:21"><expr pos:start="521:20" pos:end="521:21"><name pos:start="521:20" pos:end="521:21">ot</name></expr></argument>, <argument pos:start="521:24" pos:end="521:39"><expr pos:start="521:24" pos:end="521:39"><name pos:start="521:24" pos:end="521:29">OR_EAX</name> <operator pos:start="521:31" pos:end="521:31">+</operator> <operator pos:start="521:33" pos:end="521:33">(</operator><name pos:start="521:34" pos:end="521:34">b</name> <operator pos:start="521:36" pos:end="521:36">&amp;</operator> <literal type="number" pos:start="521:38" pos:end="521:38">7</literal><operator pos:start="521:39" pos:end="521:39">)</operator></expr></argument>, <argument pos:start="521:42" pos:end="521:42"><expr pos:start="521:42" pos:end="521:42"><literal type="number" pos:start="521:42" pos:end="521:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="523:9" pos:end="523:14">break;</break>

    <case pos:start="525:5" pos:end="525:23">case <expr pos:start="525:10" pos:end="525:22"><literal type="number" pos:start="525:10" pos:end="525:13">0x48</literal> <operator pos:start="525:15" pos:end="525:17">...</operator> <literal type="number" pos:start="525:19" pos:end="525:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="525:25" pos:end="525:36">/* dec Gv */</comment>

        <expr_stmt pos:start="527:9" pos:end="527:39"><expr pos:start="527:9" pos:end="527:38"><name pos:start="527:9" pos:end="527:10">ot</name> <operator pos:start="527:12" pos:end="527:12">=</operator> <ternary pos:start="527:14" pos:end="527:38"><condition pos:start="527:14" pos:end="527:20"><expr pos:start="527:14" pos:end="527:18"><name pos:start="527:14" pos:end="527:18">dflag</name></expr> ?</condition><then pos:start="527:22" pos:end="527:28"> <expr pos:start="527:22" pos:end="527:28"><name pos:start="527:22" pos:end="527:28">OT_LONG</name></expr> </then><else pos:start="527:30" pos:end="527:38">: <expr pos:start="527:32" pos:end="527:38"><name pos:start="527:32" pos:end="527:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="529:9" pos:end="529:45"><expr pos:start="529:9" pos:end="529:44"><call pos:start="529:9" pos:end="529:44"><name pos:start="529:9" pos:end="529:15">gen_inc</name><argument_list pos:start="529:16" pos:end="529:44">(<argument pos:start="529:17" pos:end="529:17"><expr pos:start="529:17" pos:end="529:17"><name pos:start="529:17" pos:end="529:17">s</name></expr></argument>, <argument pos:start="529:20" pos:end="529:21"><expr pos:start="529:20" pos:end="529:21"><name pos:start="529:20" pos:end="529:21">ot</name></expr></argument>, <argument pos:start="529:24" pos:end="529:39"><expr pos:start="529:24" pos:end="529:39"><name pos:start="529:24" pos:end="529:29">OR_EAX</name> <operator pos:start="529:31" pos:end="529:31">+</operator> <operator pos:start="529:33" pos:end="529:33">(</operator><name pos:start="529:34" pos:end="529:34">b</name> <operator pos:start="529:36" pos:end="529:36">&amp;</operator> <literal type="number" pos:start="529:38" pos:end="529:38">7</literal><operator pos:start="529:39" pos:end="529:39">)</operator></expr></argument>, <argument pos:start="529:42" pos:end="529:43"><expr pos:start="529:42" pos:end="529:43"><operator pos:start="529:42" pos:end="529:42">-</operator><literal type="number" pos:start="529:43" pos:end="529:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="531:9" pos:end="531:14">break;</break>

    <case pos:start="533:5" pos:end="533:14">case <expr pos:start="533:10" pos:end="533:13"><literal type="number" pos:start="533:10" pos:end="533:13">0xf6</literal></expr>:</case> <comment type="block" pos:start="533:16" pos:end="533:25">/* GRP3 */</comment>

    <case pos:start="535:5" pos:end="535:14">case <expr pos:start="535:10" pos:end="535:13"><literal type="number" pos:start="535:10" pos:end="535:13">0xf7</literal></expr>:</case>

        <if_stmt pos:start="537:9" pos:end="543:33"><if pos:start="537:9" pos:end="539:25">if <condition pos:start="537:12" pos:end="537:25">(<expr pos:start="537:13" pos:end="537:24"><operator pos:start="537:13" pos:end="537:13">(</operator><name pos:start="537:14" pos:end="537:14">b</name> <operator pos:start="537:16" pos:end="537:16">&amp;</operator> <literal type="number" pos:start="537:18" pos:end="537:18">1</literal><operator pos:start="537:19" pos:end="537:19">)</operator> <operator pos:start="537:21" pos:end="537:22">==</operator> <literal type="number" pos:start="537:24" pos:end="537:24">0</literal></expr>)</condition><block type="pseudo" pos:start="539:13" pos:end="539:25"><block_content pos:start="539:13" pos:end="539:25">

            <expr_stmt pos:start="539:13" pos:end="539:25"><expr pos:start="539:13" pos:end="539:24"><name pos:start="539:13" pos:end="539:14">ot</name> <operator pos:start="539:16" pos:end="539:16">=</operator> <name pos:start="539:18" pos:end="539:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="541:9" pos:end="543:33">else<block type="pseudo" pos:start="543:13" pos:end="543:33"><block_content pos:start="543:13" pos:end="543:33">

            <expr_stmt pos:start="543:13" pos:end="543:33"><expr pos:start="543:13" pos:end="543:32"><name pos:start="543:13" pos:end="543:14">ot</name> <operator pos:start="543:16" pos:end="543:16">=</operator> <name pos:start="543:18" pos:end="543:22">dflag</name> <operator pos:start="543:24" pos:end="543:24">+</operator> <name pos:start="543:26" pos:end="543:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="547:9" pos:end="547:55"><expr pos:start="547:9" pos:end="547:54"><name pos:start="547:9" pos:end="547:13">modrm</name> <operator pos:start="547:15" pos:end="547:15">=</operator> <call pos:start="547:17" pos:end="547:54"><name pos:start="547:17" pos:end="547:29">cpu_ldub_code</name><argument_list pos:start="547:30" pos:end="547:54">(<argument pos:start="547:31" pos:end="547:44"><expr pos:start="547:31" pos:end="547:44"><name pos:start="547:31" pos:end="547:44">cpu_single_env</name></expr></argument>, <argument pos:start="547:47" pos:end="547:53"><expr pos:start="547:47" pos:end="547:53"><name pos:start="547:47" pos:end="547:51"><name pos:start="547:47" pos:end="547:47">s</name><operator pos:start="547:48" pos:end="547:49">-&gt;</operator><name pos:start="547:50" pos:end="547:51">pc</name></name><operator pos:start="547:52" pos:end="547:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="549:9" pos:end="549:31"><expr pos:start="549:9" pos:end="549:30"><name pos:start="549:9" pos:end="549:11">mod</name> <operator pos:start="549:13" pos:end="549:13">=</operator> <operator pos:start="549:15" pos:end="549:15">(</operator><name pos:start="549:16" pos:end="549:20">modrm</name> <operator pos:start="549:22" pos:end="549:23">&gt;&gt;</operator> <literal type="number" pos:start="549:25" pos:end="549:25">6</literal><operator pos:start="549:26" pos:end="549:26">)</operator> <operator pos:start="549:28" pos:end="549:28">&amp;</operator> <literal type="number" pos:start="549:30" pos:end="549:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="551:9" pos:end="551:36"><expr pos:start="551:9" pos:end="551:35"><name pos:start="551:9" pos:end="551:10">rm</name> <operator pos:start="551:12" pos:end="551:12">=</operator> <operator pos:start="551:14" pos:end="551:14">(</operator><name pos:start="551:15" pos:end="551:19">modrm</name> <operator pos:start="551:21" pos:end="551:21">&amp;</operator> <literal type="number" pos:start="551:23" pos:end="551:23">7</literal><operator pos:start="551:24" pos:end="551:24">)</operator> <operator pos:start="551:26" pos:end="551:26">|</operator> <call pos:start="551:28" pos:end="551:35"><name pos:start="551:28" pos:end="551:32">REX_B</name><argument_list pos:start="551:33" pos:end="551:35">(<argument pos:start="551:34" pos:end="551:34"><expr pos:start="551:34" pos:end="551:34"><name pos:start="551:34" pos:end="551:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="553:9" pos:end="553:30"><expr pos:start="553:9" pos:end="553:29"><name pos:start="553:9" pos:end="553:10">op</name> <operator pos:start="553:12" pos:end="553:12">=</operator> <operator pos:start="553:14" pos:end="553:14">(</operator><name pos:start="553:15" pos:end="553:19">modrm</name> <operator pos:start="553:21" pos:end="553:22">&gt;&gt;</operator> <literal type="number" pos:start="553:24" pos:end="553:24">3</literal><operator pos:start="553:25" pos:end="553:25">)</operator> <operator pos:start="553:27" pos:end="553:27">&amp;</operator> <literal type="number" pos:start="553:29" pos:end="553:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="555:9" pos:end="569:9"><if pos:start="555:9" pos:end="565:9">if <condition pos:start="555:12" pos:end="555:21">(<expr pos:start="555:13" pos:end="555:20"><name pos:start="555:13" pos:end="555:15">mod</name> <operator pos:start="555:17" pos:end="555:18">!=</operator> <literal type="number" pos:start="555:20" pos:end="555:20">3</literal></expr>)</condition> <block pos:start="555:23" pos:end="565:9">{<block_content pos:start="557:13" pos:end="563:47">

            <if_stmt pos:start="557:13" pos:end="559:52"><if pos:start="557:13" pos:end="559:52">if <condition pos:start="557:16" pos:end="557:24">(<expr pos:start="557:17" pos:end="557:23"><name pos:start="557:17" pos:end="557:18">op</name> <operator pos:start="557:20" pos:end="557:21">==</operator> <literal type="number" pos:start="557:23" pos:end="557:23">0</literal></expr>)</condition><block type="pseudo" pos:start="559:17" pos:end="559:52"><block_content pos:start="559:17" pos:end="559:52">

                <expr_stmt pos:start="559:17" pos:end="559:52"><expr pos:start="559:17" pos:end="559:51"><name pos:start="559:17" pos:end="559:29"><name pos:start="559:17" pos:end="559:17">s</name><operator pos:start="559:18" pos:end="559:19">-&gt;</operator><name pos:start="559:20" pos:end="559:29">rip_offset</name></name> <operator pos:start="559:31" pos:end="559:31">=</operator> <call pos:start="559:33" pos:end="559:51"><name pos:start="559:33" pos:end="559:47">insn_const_size</name><argument_list pos:start="559:48" pos:end="559:51">(<argument pos:start="559:49" pos:end="559:50"><expr pos:start="559:49" pos:end="559:50"><name pos:start="559:49" pos:end="559:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="561:13" pos:end="561:61"><expr pos:start="561:13" pos:end="561:60"><call pos:start="561:13" pos:end="561:60"><name pos:start="561:13" pos:end="561:25">gen_lea_modrm</name><argument_list pos:start="561:26" pos:end="561:60">(<argument pos:start="561:27" pos:end="561:27"><expr pos:start="561:27" pos:end="561:27"><name pos:start="561:27" pos:end="561:27">s</name></expr></argument>, <argument pos:start="561:30" pos:end="561:34"><expr pos:start="561:30" pos:end="561:34"><name pos:start="561:30" pos:end="561:34">modrm</name></expr></argument>, <argument pos:start="561:37" pos:end="561:45"><expr pos:start="561:37" pos:end="561:45"><operator pos:start="561:37" pos:end="561:37">&amp;</operator><name pos:start="561:38" pos:end="561:45">reg_addr</name></expr></argument>, <argument pos:start="561:48" pos:end="561:59"><expr pos:start="561:48" pos:end="561:59"><operator pos:start="561:48" pos:end="561:48">&amp;</operator><name pos:start="561:49" pos:end="561:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="563:13" pos:end="563:47"><expr pos:start="563:13" pos:end="563:46"><call pos:start="563:13" pos:end="563:46"><name pos:start="563:13" pos:end="563:27">gen_op_ld_T0_A0</name><argument_list pos:start="563:28" pos:end="563:46">(<argument pos:start="563:29" pos:end="563:45"><expr pos:start="563:29" pos:end="563:45"><name pos:start="563:29" pos:end="563:30">ot</name> <operator pos:start="563:32" pos:end="563:32">+</operator> <name pos:start="563:34" pos:end="563:45"><name pos:start="563:34" pos:end="563:34">s</name><operator pos:start="563:35" pos:end="563:36">-&gt;</operator><name pos:start="563:37" pos:end="563:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="565:11" pos:end="569:9">else <block pos:start="565:16" pos:end="569:9">{<block_content pos:start="567:13" pos:end="567:41">

            <expr_stmt pos:start="567:13" pos:end="567:41"><expr pos:start="567:13" pos:end="567:40"><call pos:start="567:13" pos:end="567:40"><name pos:start="567:13" pos:end="567:29">gen_op_mov_TN_reg</name><argument_list pos:start="567:30" pos:end="567:40">(<argument pos:start="567:31" pos:end="567:32"><expr pos:start="567:31" pos:end="567:32"><name pos:start="567:31" pos:end="567:32">ot</name></expr></argument>, <argument pos:start="567:35" pos:end="567:35"><expr pos:start="567:35" pos:end="567:35"><literal type="number" pos:start="567:35" pos:end="567:35">0</literal></expr></argument>, <argument pos:start="567:38" pos:end="567:39"><expr pos:start="567:38" pos:end="567:39"><name pos:start="567:38" pos:end="567:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="573:9" pos:end="991:9">switch<condition pos:start="573:15" pos:end="573:18">(<expr pos:start="573:16" pos:end="573:17"><name pos:start="573:16" pos:end="573:17">op</name></expr>)</condition> <block pos:start="573:20" pos:end="991:9">{<block_content pos:start="575:9" pos:end="989:28">

        <case pos:start="575:9" pos:end="575:15">case <expr pos:start="575:14" pos:end="575:14"><literal type="number" pos:start="575:14" pos:end="575:14">0</literal></expr>:</case> <comment type="block" pos:start="575:17" pos:end="575:26">/* test */</comment>

            <expr_stmt pos:start="577:13" pos:end="577:34"><expr pos:start="577:13" pos:end="577:33"><name pos:start="577:13" pos:end="577:15">val</name> <operator pos:start="577:17" pos:end="577:17">=</operator> <call pos:start="577:19" pos:end="577:33"><name pos:start="577:19" pos:end="577:26">insn_get</name><argument_list pos:start="577:27" pos:end="577:33">(<argument pos:start="577:28" pos:end="577:28"><expr pos:start="577:28" pos:end="577:28"><name pos:start="577:28" pos:end="577:28">s</name></expr></argument>, <argument pos:start="577:31" pos:end="577:32"><expr pos:start="577:31" pos:end="577:32"><name pos:start="577:31" pos:end="577:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:35"><expr pos:start="579:13" pos:end="579:34"><call pos:start="579:13" pos:end="579:34"><name pos:start="579:13" pos:end="579:29">gen_op_movl_T1_im</name><argument_list pos:start="579:30" pos:end="579:34">(<argument pos:start="579:31" pos:end="579:33"><expr pos:start="579:31" pos:end="579:33"><name pos:start="579:31" pos:end="579:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:36"><expr pos:start="581:13" pos:end="581:35"><call pos:start="581:13" pos:end="581:35"><name pos:start="581:13" pos:end="581:33">gen_op_testl_T0_T1_cc</name><argument_list pos:start="581:34" pos:end="581:35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:41"><expr pos:start="583:13" pos:end="583:40"><name pos:start="583:13" pos:end="583:20"><name pos:start="583:13" pos:end="583:13">s</name><operator pos:start="583:14" pos:end="583:15">-&gt;</operator><name pos:start="583:16" pos:end="583:20">cc_op</name></name> <operator pos:start="583:22" pos:end="583:22">=</operator> <name pos:start="583:24" pos:end="583:35">CC_OP_LOGICB</name> <operator pos:start="583:37" pos:end="583:37">+</operator> <name pos:start="583:39" pos:end="583:40">ot</name></expr>;</expr_stmt>

            <break pos:start="585:13" pos:end="585:18">break;</break>

        <case pos:start="587:9" pos:end="587:15">case <expr pos:start="587:14" pos:end="587:14"><literal type="number" pos:start="587:14" pos:end="587:14">2</literal></expr>:</case> <comment type="block" pos:start="587:17" pos:end="587:25">/* not */</comment>

            <expr_stmt pos:start="589:13" pos:end="589:47"><expr pos:start="589:13" pos:end="589:46"><call pos:start="589:13" pos:end="589:46"><name pos:start="589:13" pos:end="589:26">tcg_gen_not_tl</name><argument_list pos:start="589:27" pos:end="589:46">(<argument pos:start="589:28" pos:end="589:35"><expr pos:start="589:28" pos:end="589:35"><name pos:start="589:28" pos:end="589:35"><name pos:start="589:28" pos:end="589:32">cpu_T</name><index pos:start="589:33" pos:end="589:35">[<expr pos:start="589:34" pos:end="589:34"><literal type="number" pos:start="589:34" pos:end="589:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="589:38" pos:end="589:45"><expr pos:start="589:38" pos:end="589:45"><name pos:start="589:38" pos:end="589:45"><name pos:start="589:38" pos:end="589:42">cpu_T</name><index pos:start="589:43" pos:end="589:45">[<expr pos:start="589:44" pos:end="589:44"><literal type="number" pos:start="589:44" pos:end="589:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="591:13" pos:end="599:13"><if pos:start="591:13" pos:end="595:13">if <condition pos:start="591:16" pos:end="591:25">(<expr pos:start="591:17" pos:end="591:24"><name pos:start="591:17" pos:end="591:19">mod</name> <operator pos:start="591:21" pos:end="591:22">!=</operator> <literal type="number" pos:start="591:24" pos:end="591:24">3</literal></expr>)</condition> <block pos:start="591:27" pos:end="595:13">{<block_content pos:start="593:17" pos:end="593:51">

                <expr_stmt pos:start="593:17" pos:end="593:51"><expr pos:start="593:17" pos:end="593:50"><call pos:start="593:17" pos:end="593:50"><name pos:start="593:17" pos:end="593:31">gen_op_st_T0_A0</name><argument_list pos:start="593:32" pos:end="593:50">(<argument pos:start="593:33" pos:end="593:49"><expr pos:start="593:33" pos:end="593:49"><name pos:start="593:33" pos:end="593:34">ot</name> <operator pos:start="593:36" pos:end="593:36">+</operator> <name pos:start="593:38" pos:end="593:49"><name pos:start="593:38" pos:end="593:38">s</name><operator pos:start="593:39" pos:end="593:40">-&gt;</operator><name pos:start="593:41" pos:end="593:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="595:15" pos:end="599:13">else <block pos:start="595:20" pos:end="599:13">{<block_content pos:start="597:17" pos:end="597:42">

                <expr_stmt pos:start="597:17" pos:end="597:42"><expr pos:start="597:17" pos:end="597:41"><call pos:start="597:17" pos:end="597:41"><name pos:start="597:17" pos:end="597:33">gen_op_mov_reg_T0</name><argument_list pos:start="597:34" pos:end="597:41">(<argument pos:start="597:35" pos:end="597:36"><expr pos:start="597:35" pos:end="597:36"><name pos:start="597:35" pos:end="597:36">ot</name></expr></argument>, <argument pos:start="597:39" pos:end="597:40"><expr pos:start="597:39" pos:end="597:40"><name pos:start="597:39" pos:end="597:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="601:13" pos:end="601:18">break;</break>

        <case pos:start="603:9" pos:end="603:15">case <expr pos:start="603:14" pos:end="603:14"><literal type="number" pos:start="603:14" pos:end="603:14">3</literal></expr>:</case> <comment type="block" pos:start="603:17" pos:end="603:25">/* neg */</comment>

            <expr_stmt pos:start="605:13" pos:end="605:47"><expr pos:start="605:13" pos:end="605:46"><call pos:start="605:13" pos:end="605:46"><name pos:start="605:13" pos:end="605:26">tcg_gen_neg_tl</name><argument_list pos:start="605:27" pos:end="605:46">(<argument pos:start="605:28" pos:end="605:35"><expr pos:start="605:28" pos:end="605:35"><name pos:start="605:28" pos:end="605:35"><name pos:start="605:28" pos:end="605:32">cpu_T</name><index pos:start="605:33" pos:end="605:35">[<expr pos:start="605:34" pos:end="605:34"><literal type="number" pos:start="605:34" pos:end="605:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="605:38" pos:end="605:45"><expr pos:start="605:38" pos:end="605:45"><name pos:start="605:38" pos:end="605:45"><name pos:start="605:38" pos:end="605:42">cpu_T</name><index pos:start="605:43" pos:end="605:45">[<expr pos:start="605:44" pos:end="605:44"><literal type="number" pos:start="605:44" pos:end="605:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="607:13" pos:end="615:13"><if pos:start="607:13" pos:end="611:13">if <condition pos:start="607:16" pos:end="607:25">(<expr pos:start="607:17" pos:end="607:24"><name pos:start="607:17" pos:end="607:19">mod</name> <operator pos:start="607:21" pos:end="607:22">!=</operator> <literal type="number" pos:start="607:24" pos:end="607:24">3</literal></expr>)</condition> <block pos:start="607:27" pos:end="611:13">{<block_content pos:start="609:17" pos:end="609:51">

                <expr_stmt pos:start="609:17" pos:end="609:51"><expr pos:start="609:17" pos:end="609:50"><call pos:start="609:17" pos:end="609:50"><name pos:start="609:17" pos:end="609:31">gen_op_st_T0_A0</name><argument_list pos:start="609:32" pos:end="609:50">(<argument pos:start="609:33" pos:end="609:49"><expr pos:start="609:33" pos:end="609:49"><name pos:start="609:33" pos:end="609:34">ot</name> <operator pos:start="609:36" pos:end="609:36">+</operator> <name pos:start="609:38" pos:end="609:49"><name pos:start="609:38" pos:end="609:38">s</name><operator pos:start="609:39" pos:end="609:40">-&gt;</operator><name pos:start="609:41" pos:end="609:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="611:15" pos:end="615:13">else <block pos:start="611:20" pos:end="615:13">{<block_content pos:start="613:17" pos:end="613:42">

                <expr_stmt pos:start="613:17" pos:end="613:42"><expr pos:start="613:17" pos:end="613:41"><call pos:start="613:17" pos:end="613:41"><name pos:start="613:17" pos:end="613:33">gen_op_mov_reg_T0</name><argument_list pos:start="613:34" pos:end="613:41">(<argument pos:start="613:35" pos:end="613:36"><expr pos:start="613:35" pos:end="613:36"><name pos:start="613:35" pos:end="613:36">ot</name></expr></argument>, <argument pos:start="613:39" pos:end="613:40"><expr pos:start="613:39" pos:end="613:40"><name pos:start="613:39" pos:end="613:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="617:13" pos:end="617:35"><expr pos:start="617:13" pos:end="617:34"><call pos:start="617:13" pos:end="617:34"><name pos:start="617:13" pos:end="617:32">gen_op_update_neg_cc</name><argument_list pos:start="617:33" pos:end="617:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="619:13" pos:end="619:39"><expr pos:start="619:13" pos:end="619:38"><name pos:start="619:13" pos:end="619:20"><name pos:start="619:13" pos:end="619:13">s</name><operator pos:start="619:14" pos:end="619:15">-&gt;</operator><name pos:start="619:16" pos:end="619:20">cc_op</name></name> <operator pos:start="619:22" pos:end="619:22">=</operator> <name pos:start="619:24" pos:end="619:33">CC_OP_SUBB</name> <operator pos:start="619:35" pos:end="619:35">+</operator> <name pos:start="619:37" pos:end="619:38">ot</name></expr>;</expr_stmt>

            <break pos:start="621:13" pos:end="621:18">break;</break>

        <case pos:start="623:9" pos:end="623:15">case <expr pos:start="623:14" pos:end="623:14"><literal type="number" pos:start="623:14" pos:end="623:14">4</literal></expr>:</case> <comment type="block" pos:start="623:17" pos:end="623:25">/* mul */</comment>

            <switch pos:start="625:13" pos:end="751:13">switch<condition pos:start="625:19" pos:end="625:22">(<expr pos:start="625:20" pos:end="625:21"><name pos:start="625:20" pos:end="625:21">ot</name></expr>)</condition> <block pos:start="625:24" pos:end="751:13">{<block_content pos:start="627:13" pos:end="750:0">

            <case pos:start="627:13" pos:end="627:25">case <expr pos:start="627:18" pos:end="627:24"><name pos:start="627:18" pos:end="627:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="629:17" pos:end="629:53"><expr pos:start="629:17" pos:end="629:52"><call pos:start="629:17" pos:end="629:52"><name pos:start="629:17" pos:end="629:33">gen_op_mov_TN_reg</name><argument_list pos:start="629:34" pos:end="629:52">(<argument pos:start="629:35" pos:end="629:41"><expr pos:start="629:35" pos:end="629:41"><name pos:start="629:35" pos:end="629:41">OT_BYTE</name></expr></argument>, <argument pos:start="629:44" pos:end="629:44"><expr pos:start="629:44" pos:end="629:44"><literal type="number" pos:start="629:44" pos:end="629:44">1</literal></expr></argument>, <argument pos:start="629:47" pos:end="629:51"><expr pos:start="629:47" pos:end="629:51"><name pos:start="629:47" pos:end="629:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="631:17" pos:end="631:53"><expr pos:start="631:17" pos:end="631:52"><call pos:start="631:17" pos:end="631:52"><name pos:start="631:17" pos:end="631:32">tcg_gen_ext8u_tl</name><argument_list pos:start="631:33" pos:end="631:52">(<argument pos:start="631:34" pos:end="631:41"><expr pos:start="631:34" pos:end="631:41"><name pos:start="631:34" pos:end="631:41"><name pos:start="631:34" pos:end="631:38">cpu_T</name><index pos:start="631:39" pos:end="631:41">[<expr pos:start="631:40" pos:end="631:40"><literal type="number" pos:start="631:40" pos:end="631:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="631:44" pos:end="631:51"><expr pos:start="631:44" pos:end="631:51"><name pos:start="631:44" pos:end="631:51"><name pos:start="631:44" pos:end="631:48">cpu_T</name><index pos:start="631:49" pos:end="631:51">[<expr pos:start="631:50" pos:end="631:50"><literal type="number" pos:start="631:50" pos:end="631:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="633:17" pos:end="633:53"><expr pos:start="633:17" pos:end="633:52"><call pos:start="633:17" pos:end="633:52"><name pos:start="633:17" pos:end="633:32">tcg_gen_ext8u_tl</name><argument_list pos:start="633:33" pos:end="633:52">(<argument pos:start="633:34" pos:end="633:41"><expr pos:start="633:34" pos:end="633:41"><name pos:start="633:34" pos:end="633:41"><name pos:start="633:34" pos:end="633:38">cpu_T</name><index pos:start="633:39" pos:end="633:41">[<expr pos:start="633:40" pos:end="633:40"><literal type="number" pos:start="633:40" pos:end="633:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="633:44" pos:end="633:51"><expr pos:start="633:44" pos:end="633:51"><name pos:start="633:44" pos:end="633:51"><name pos:start="633:44" pos:end="633:48">cpu_T</name><index pos:start="633:49" pos:end="633:51">[<expr pos:start="633:50" pos:end="633:50"><literal type="number" pos:start="633:50" pos:end="633:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="635:17" pos:end="635:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="637:17" pos:end="637:61"><expr pos:start="637:17" pos:end="637:60"><call pos:start="637:17" pos:end="637:60"><name pos:start="637:17" pos:end="637:30">tcg_gen_mul_tl</name><argument_list pos:start="637:31" pos:end="637:60">(<argument pos:start="637:32" pos:end="637:39"><expr pos:start="637:32" pos:end="637:39"><name pos:start="637:32" pos:end="637:39"><name pos:start="637:32" pos:end="637:36">cpu_T</name><index pos:start="637:37" pos:end="637:39">[<expr pos:start="637:38" pos:end="637:38"><literal type="number" pos:start="637:38" pos:end="637:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="637:42" pos:end="637:49"><expr pos:start="637:42" pos:end="637:49"><name pos:start="637:42" pos:end="637:49"><name pos:start="637:42" pos:end="637:46">cpu_T</name><index pos:start="637:47" pos:end="637:49">[<expr pos:start="637:48" pos:end="637:48"><literal type="number" pos:start="637:48" pos:end="637:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="637:52" pos:end="637:59"><expr pos:start="637:52" pos:end="637:59"><name pos:start="637:52" pos:end="637:59"><name pos:start="637:52" pos:end="637:56">cpu_T</name><index pos:start="637:57" pos:end="637:59">[<expr pos:start="637:58" pos:end="637:58"><literal type="number" pos:start="637:58" pos:end="637:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="639:17" pos:end="639:50"><expr pos:start="639:17" pos:end="639:49"><call pos:start="639:17" pos:end="639:49"><name pos:start="639:17" pos:end="639:33">gen_op_mov_reg_T0</name><argument_list pos:start="639:34" pos:end="639:49">(<argument pos:start="639:35" pos:end="639:41"><expr pos:start="639:35" pos:end="639:41"><name pos:start="639:35" pos:end="639:41">OT_WORD</name></expr></argument>, <argument pos:start="639:44" pos:end="639:48"><expr pos:start="639:44" pos:end="639:48"><name pos:start="639:44" pos:end="639:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="641:17" pos:end="641:53"><expr pos:start="641:17" pos:end="641:52"><call pos:start="641:17" pos:end="641:52"><name pos:start="641:17" pos:end="641:30">tcg_gen_mov_tl</name><argument_list pos:start="641:31" pos:end="641:52">(<argument pos:start="641:32" pos:end="641:41"><expr pos:start="641:32" pos:end="641:41"><name pos:start="641:32" pos:end="641:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="641:44" pos:end="641:51"><expr pos:start="641:44" pos:end="641:51"><name pos:start="641:44" pos:end="641:51"><name pos:start="641:44" pos:end="641:48">cpu_T</name><index pos:start="641:49" pos:end="641:51">[<expr pos:start="641:50" pos:end="641:50"><literal type="number" pos:start="641:50" pos:end="641:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="643:17" pos:end="643:62"><expr pos:start="643:17" pos:end="643:61"><call pos:start="643:17" pos:end="643:61"><name pos:start="643:17" pos:end="643:31">tcg_gen_andi_tl</name><argument_list pos:start="643:32" pos:end="643:61">(<argument pos:start="643:33" pos:end="643:42"><expr pos:start="643:33" pos:end="643:42"><name pos:start="643:33" pos:end="643:42">cpu_cc_src</name></expr></argument>, <argument pos:start="643:45" pos:end="643:52"><expr pos:start="643:45" pos:end="643:52"><name pos:start="643:45" pos:end="643:52"><name pos:start="643:45" pos:end="643:49">cpu_T</name><index pos:start="643:50" pos:end="643:52">[<expr pos:start="643:51" pos:end="643:51"><literal type="number" pos:start="643:51" pos:end="643:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="643:55" pos:end="643:60"><expr pos:start="643:55" pos:end="643:60"><literal type="number" pos:start="643:55" pos:end="643:60">0xff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="645:17" pos:end="645:38"><expr pos:start="645:17" pos:end="645:37"><name pos:start="645:17" pos:end="645:24"><name pos:start="645:17" pos:end="645:17">s</name><operator pos:start="645:18" pos:end="645:19">-&gt;</operator><name pos:start="645:20" pos:end="645:24">cc_op</name></name> <operator pos:start="645:26" pos:end="645:26">=</operator> <name pos:start="645:28" pos:end="645:37">CC_OP_MULB</name></expr>;</expr_stmt>

                <break pos:start="647:17" pos:end="647:22">break;</break>

            <case pos:start="649:13" pos:end="649:25">case <expr pos:start="649:18" pos:end="649:24"><name pos:start="649:18" pos:end="649:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="651:17" pos:end="651:53"><expr pos:start="651:17" pos:end="651:52"><call pos:start="651:17" pos:end="651:52"><name pos:start="651:17" pos:end="651:33">gen_op_mov_TN_reg</name><argument_list pos:start="651:34" pos:end="651:52">(<argument pos:start="651:35" pos:end="651:41"><expr pos:start="651:35" pos:end="651:41"><name pos:start="651:35" pos:end="651:41">OT_WORD</name></expr></argument>, <argument pos:start="651:44" pos:end="651:44"><expr pos:start="651:44" pos:end="651:44"><literal type="number" pos:start="651:44" pos:end="651:44">1</literal></expr></argument>, <argument pos:start="651:47" pos:end="651:51"><expr pos:start="651:47" pos:end="651:51"><name pos:start="651:47" pos:end="651:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="653:17" pos:end="653:54"><expr pos:start="653:17" pos:end="653:53"><call pos:start="653:17" pos:end="653:53"><name pos:start="653:17" pos:end="653:33">tcg_gen_ext16u_tl</name><argument_list pos:start="653:34" pos:end="653:53">(<argument pos:start="653:35" pos:end="653:42"><expr pos:start="653:35" pos:end="653:42"><name pos:start="653:35" pos:end="653:42"><name pos:start="653:35" pos:end="653:39">cpu_T</name><index pos:start="653:40" pos:end="653:42">[<expr pos:start="653:41" pos:end="653:41"><literal type="number" pos:start="653:41" pos:end="653:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="653:45" pos:end="653:52"><expr pos:start="653:45" pos:end="653:52"><name pos:start="653:45" pos:end="653:52"><name pos:start="653:45" pos:end="653:49">cpu_T</name><index pos:start="653:50" pos:end="653:52">[<expr pos:start="653:51" pos:end="653:51"><literal type="number" pos:start="653:51" pos:end="653:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="655:17" pos:end="655:54"><expr pos:start="655:17" pos:end="655:53"><call pos:start="655:17" pos:end="655:53"><name pos:start="655:17" pos:end="655:33">tcg_gen_ext16u_tl</name><argument_list pos:start="655:34" pos:end="655:53">(<argument pos:start="655:35" pos:end="655:42"><expr pos:start="655:35" pos:end="655:42"><name pos:start="655:35" pos:end="655:42"><name pos:start="655:35" pos:end="655:39">cpu_T</name><index pos:start="655:40" pos:end="655:42">[<expr pos:start="655:41" pos:end="655:41"><literal type="number" pos:start="655:41" pos:end="655:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="655:45" pos:end="655:52"><expr pos:start="655:45" pos:end="655:52"><name pos:start="655:45" pos:end="655:52"><name pos:start="655:45" pos:end="655:49">cpu_T</name><index pos:start="655:50" pos:end="655:52">[<expr pos:start="655:51" pos:end="655:51"><literal type="number" pos:start="655:51" pos:end="655:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="657:17" pos:end="657:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="659:17" pos:end="659:61"><expr pos:start="659:17" pos:end="659:60"><call pos:start="659:17" pos:end="659:60"><name pos:start="659:17" pos:end="659:30">tcg_gen_mul_tl</name><argument_list pos:start="659:31" pos:end="659:60">(<argument pos:start="659:32" pos:end="659:39"><expr pos:start="659:32" pos:end="659:39"><name pos:start="659:32" pos:end="659:39"><name pos:start="659:32" pos:end="659:36">cpu_T</name><index pos:start="659:37" pos:end="659:39">[<expr pos:start="659:38" pos:end="659:38"><literal type="number" pos:start="659:38" pos:end="659:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="659:42" pos:end="659:49"><expr pos:start="659:42" pos:end="659:49"><name pos:start="659:42" pos:end="659:49"><name pos:start="659:42" pos:end="659:46">cpu_T</name><index pos:start="659:47" pos:end="659:49">[<expr pos:start="659:48" pos:end="659:48"><literal type="number" pos:start="659:48" pos:end="659:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="659:52" pos:end="659:59"><expr pos:start="659:52" pos:end="659:59"><name pos:start="659:52" pos:end="659:59"><name pos:start="659:52" pos:end="659:56">cpu_T</name><index pos:start="659:57" pos:end="659:59">[<expr pos:start="659:58" pos:end="659:58"><literal type="number" pos:start="659:58" pos:end="659:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="661:17" pos:end="661:50"><expr pos:start="661:17" pos:end="661:49"><call pos:start="661:17" pos:end="661:49"><name pos:start="661:17" pos:end="661:33">gen_op_mov_reg_T0</name><argument_list pos:start="661:34" pos:end="661:49">(<argument pos:start="661:35" pos:end="661:41"><expr pos:start="661:35" pos:end="661:41"><name pos:start="661:35" pos:end="661:41">OT_WORD</name></expr></argument>, <argument pos:start="661:44" pos:end="661:48"><expr pos:start="661:44" pos:end="661:48"><name pos:start="661:44" pos:end="661:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="663:17" pos:end="663:53"><expr pos:start="663:17" pos:end="663:52"><call pos:start="663:17" pos:end="663:52"><name pos:start="663:17" pos:end="663:30">tcg_gen_mov_tl</name><argument_list pos:start="663:31" pos:end="663:52">(<argument pos:start="663:32" pos:end="663:41"><expr pos:start="663:32" pos:end="663:41"><name pos:start="663:32" pos:end="663:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="663:44" pos:end="663:51"><expr pos:start="663:44" pos:end="663:51"><name pos:start="663:44" pos:end="663:51"><name pos:start="663:44" pos:end="663:48">cpu_T</name><index pos:start="663:49" pos:end="663:51">[<expr pos:start="663:50" pos:end="663:50"><literal type="number" pos:start="663:50" pos:end="663:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="665:17" pos:end="665:56"><expr pos:start="665:17" pos:end="665:55"><call pos:start="665:17" pos:end="665:55"><name pos:start="665:17" pos:end="665:31">tcg_gen_shri_tl</name><argument_list pos:start="665:32" pos:end="665:55">(<argument pos:start="665:33" pos:end="665:40"><expr pos:start="665:33" pos:end="665:40"><name pos:start="665:33" pos:end="665:40"><name pos:start="665:33" pos:end="665:37">cpu_T</name><index pos:start="665:38" pos:end="665:40">[<expr pos:start="665:39" pos:end="665:39"><literal type="number" pos:start="665:39" pos:end="665:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="665:43" pos:end="665:50"><expr pos:start="665:43" pos:end="665:50"><name pos:start="665:43" pos:end="665:50"><name pos:start="665:43" pos:end="665:47">cpu_T</name><index pos:start="665:48" pos:end="665:50">[<expr pos:start="665:49" pos:end="665:49"><literal type="number" pos:start="665:49" pos:end="665:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="665:53" pos:end="665:54"><expr pos:start="665:53" pos:end="665:54"><literal type="number" pos:start="665:53" pos:end="665:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="667:17" pos:end="667:50"><expr pos:start="667:17" pos:end="667:49"><call pos:start="667:17" pos:end="667:49"><name pos:start="667:17" pos:end="667:33">gen_op_mov_reg_T0</name><argument_list pos:start="667:34" pos:end="667:49">(<argument pos:start="667:35" pos:end="667:41"><expr pos:start="667:35" pos:end="667:41"><name pos:start="667:35" pos:end="667:41">OT_WORD</name></expr></argument>, <argument pos:start="667:44" pos:end="667:48"><expr pos:start="667:44" pos:end="667:48"><name pos:start="667:44" pos:end="667:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:53"><expr pos:start="669:17" pos:end="669:52"><call pos:start="669:17" pos:end="669:52"><name pos:start="669:17" pos:end="669:30">tcg_gen_mov_tl</name><argument_list pos:start="669:31" pos:end="669:52">(<argument pos:start="669:32" pos:end="669:41"><expr pos:start="669:32" pos:end="669:41"><name pos:start="669:32" pos:end="669:41">cpu_cc_src</name></expr></argument>, <argument pos:start="669:44" pos:end="669:51"><expr pos:start="669:44" pos:end="669:51"><name pos:start="669:44" pos:end="669:51"><name pos:start="669:44" pos:end="669:48">cpu_T</name><index pos:start="669:49" pos:end="669:51">[<expr pos:start="669:50" pos:end="669:50"><literal type="number" pos:start="669:50" pos:end="669:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="671:17" pos:end="671:38"><expr pos:start="671:17" pos:end="671:37"><name pos:start="671:17" pos:end="671:24"><name pos:start="671:17" pos:end="671:17">s</name><operator pos:start="671:18" pos:end="671:19">-&gt;</operator><name pos:start="671:20" pos:end="671:24">cc_op</name></name> <operator pos:start="671:26" pos:end="671:26">=</operator> <name pos:start="671:28" pos:end="671:37">CC_OP_MULW</name></expr>;</expr_stmt>

                <break pos:start="673:17" pos:end="673:22">break;</break>

            <default pos:start="675:13" pos:end="675:20">default:</default>

            <case pos:start="677:13" pos:end="680:0">case <expr pos:start="677:18" pos:end="677:24"><name pos:start="677:18" pos:end="677:24">OT_LONG</name></expr>:</case>

<cpp:ifdef pos:start="679:1" pos:end="679:20">#<cpp:directive pos:start="679:2" pos:end="679:6">ifdef</cpp:directive> <name pos:start="679:8" pos:end="679:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="681:17" pos:end="681:53"><expr pos:start="681:17" pos:end="681:52"><call pos:start="681:17" pos:end="681:52"><name pos:start="681:17" pos:end="681:33">gen_op_mov_TN_reg</name><argument_list pos:start="681:34" pos:end="681:52">(<argument pos:start="681:35" pos:end="681:41"><expr pos:start="681:35" pos:end="681:41"><name pos:start="681:35" pos:end="681:41">OT_LONG</name></expr></argument>, <argument pos:start="681:44" pos:end="681:44"><expr pos:start="681:44" pos:end="681:44"><literal type="number" pos:start="681:44" pos:end="681:44">1</literal></expr></argument>, <argument pos:start="681:47" pos:end="681:51"><expr pos:start="681:47" pos:end="681:51"><name pos:start="681:47" pos:end="681:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="683:17" pos:end="683:54"><expr pos:start="683:17" pos:end="683:53"><call pos:start="683:17" pos:end="683:53"><name pos:start="683:17" pos:end="683:33">tcg_gen_ext32u_tl</name><argument_list pos:start="683:34" pos:end="683:53">(<argument pos:start="683:35" pos:end="683:42"><expr pos:start="683:35" pos:end="683:42"><name pos:start="683:35" pos:end="683:42"><name pos:start="683:35" pos:end="683:39">cpu_T</name><index pos:start="683:40" pos:end="683:42">[<expr pos:start="683:41" pos:end="683:41"><literal type="number" pos:start="683:41" pos:end="683:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="683:45" pos:end="683:52"><expr pos:start="683:45" pos:end="683:52"><name pos:start="683:45" pos:end="683:52"><name pos:start="683:45" pos:end="683:49">cpu_T</name><index pos:start="683:50" pos:end="683:52">[<expr pos:start="683:51" pos:end="683:51"><literal type="number" pos:start="683:51" pos:end="683:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="685:17" pos:end="685:54"><expr pos:start="685:17" pos:end="685:53"><call pos:start="685:17" pos:end="685:53"><name pos:start="685:17" pos:end="685:33">tcg_gen_ext32u_tl</name><argument_list pos:start="685:34" pos:end="685:53">(<argument pos:start="685:35" pos:end="685:42"><expr pos:start="685:35" pos:end="685:42"><name pos:start="685:35" pos:end="685:42"><name pos:start="685:35" pos:end="685:39">cpu_T</name><index pos:start="685:40" pos:end="685:42">[<expr pos:start="685:41" pos:end="685:41"><literal type="number" pos:start="685:41" pos:end="685:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="685:45" pos:end="685:52"><expr pos:start="685:45" pos:end="685:52"><name pos:start="685:45" pos:end="685:52"><name pos:start="685:45" pos:end="685:49">cpu_T</name><index pos:start="685:50" pos:end="685:52">[<expr pos:start="685:51" pos:end="685:51"><literal type="number" pos:start="685:51" pos:end="685:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="687:17" pos:end="687:61"><expr pos:start="687:17" pos:end="687:60"><call pos:start="687:17" pos:end="687:60"><name pos:start="687:17" pos:end="687:30">tcg_gen_mul_tl</name><argument_list pos:start="687:31" pos:end="687:60">(<argument pos:start="687:32" pos:end="687:39"><expr pos:start="687:32" pos:end="687:39"><name pos:start="687:32" pos:end="687:39"><name pos:start="687:32" pos:end="687:36">cpu_T</name><index pos:start="687:37" pos:end="687:39">[<expr pos:start="687:38" pos:end="687:38"><literal type="number" pos:start="687:38" pos:end="687:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="687:42" pos:end="687:49"><expr pos:start="687:42" pos:end="687:49"><name pos:start="687:42" pos:end="687:49"><name pos:start="687:42" pos:end="687:46">cpu_T</name><index pos:start="687:47" pos:end="687:49">[<expr pos:start="687:48" pos:end="687:48"><literal type="number" pos:start="687:48" pos:end="687:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="687:52" pos:end="687:59"><expr pos:start="687:52" pos:end="687:59"><name pos:start="687:52" pos:end="687:59"><name pos:start="687:52" pos:end="687:56">cpu_T</name><index pos:start="687:57" pos:end="687:59">[<expr pos:start="687:58" pos:end="687:58"><literal type="number" pos:start="687:58" pos:end="687:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:50"><expr pos:start="689:17" pos:end="689:49"><call pos:start="689:17" pos:end="689:49"><name pos:start="689:17" pos:end="689:33">gen_op_mov_reg_T0</name><argument_list pos:start="689:34" pos:end="689:49">(<argument pos:start="689:35" pos:end="689:41"><expr pos:start="689:35" pos:end="689:41"><name pos:start="689:35" pos:end="689:41">OT_LONG</name></expr></argument>, <argument pos:start="689:44" pos:end="689:48"><expr pos:start="689:44" pos:end="689:48"><name pos:start="689:44" pos:end="689:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="691:17" pos:end="691:53"><expr pos:start="691:17" pos:end="691:52"><call pos:start="691:17" pos:end="691:52"><name pos:start="691:17" pos:end="691:30">tcg_gen_mov_tl</name><argument_list pos:start="691:31" pos:end="691:52">(<argument pos:start="691:32" pos:end="691:41"><expr pos:start="691:32" pos:end="691:41"><name pos:start="691:32" pos:end="691:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="691:44" pos:end="691:51"><expr pos:start="691:44" pos:end="691:51"><name pos:start="691:44" pos:end="691:51"><name pos:start="691:44" pos:end="691:48">cpu_T</name><index pos:start="691:49" pos:end="691:51">[<expr pos:start="691:50" pos:end="691:50"><literal type="number" pos:start="691:50" pos:end="691:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="693:17" pos:end="693:56"><expr pos:start="693:17" pos:end="693:55"><call pos:start="693:17" pos:end="693:55"><name pos:start="693:17" pos:end="693:31">tcg_gen_shri_tl</name><argument_list pos:start="693:32" pos:end="693:55">(<argument pos:start="693:33" pos:end="693:40"><expr pos:start="693:33" pos:end="693:40"><name pos:start="693:33" pos:end="693:40"><name pos:start="693:33" pos:end="693:37">cpu_T</name><index pos:start="693:38" pos:end="693:40">[<expr pos:start="693:39" pos:end="693:39"><literal type="number" pos:start="693:39" pos:end="693:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="693:43" pos:end="693:50"><expr pos:start="693:43" pos:end="693:50"><name pos:start="693:43" pos:end="693:50"><name pos:start="693:43" pos:end="693:47">cpu_T</name><index pos:start="693:48" pos:end="693:50">[<expr pos:start="693:49" pos:end="693:49"><literal type="number" pos:start="693:49" pos:end="693:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="693:53" pos:end="693:54"><expr pos:start="693:53" pos:end="693:54"><literal type="number" pos:start="693:53" pos:end="693:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="695:17" pos:end="695:50"><expr pos:start="695:17" pos:end="695:49"><call pos:start="695:17" pos:end="695:49"><name pos:start="695:17" pos:end="695:33">gen_op_mov_reg_T0</name><argument_list pos:start="695:34" pos:end="695:49">(<argument pos:start="695:35" pos:end="695:41"><expr pos:start="695:35" pos:end="695:41"><name pos:start="695:35" pos:end="695:41">OT_LONG</name></expr></argument>, <argument pos:start="695:44" pos:end="695:48"><expr pos:start="695:44" pos:end="695:48"><name pos:start="695:44" pos:end="695:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="700:0"><expr pos:start="697:17" pos:end="697:52"><call pos:start="697:17" pos:end="697:52"><name pos:start="697:17" pos:end="697:30">tcg_gen_mov_tl</name><argument_list pos:start="697:31" pos:end="697:52">(<argument pos:start="697:32" pos:end="697:41"><expr pos:start="697:32" pos:end="697:41"><name pos:start="697:32" pos:end="697:41">cpu_cc_src</name></expr></argument>, <argument pos:start="697:44" pos:end="697:51"><expr pos:start="697:44" pos:end="697:51"><name pos:start="697:44" pos:end="697:51"><name pos:start="697:44" pos:end="697:48">cpu_T</name><index pos:start="697:49" pos:end="697:51">[<expr pos:start="697:50" pos:end="697:50"><literal type="number" pos:start="697:50" pos:end="697:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="699:1" pos:end="699:5">#<cpp:directive pos:start="699:2" pos:end="699:5">else</cpp:directive></cpp:else>

                <block pos:start="701:17" pos:end="734:0">{<block_content pos:start="703:21" pos:end="729:57">

                    <decl_stmt pos:start="703:21" pos:end="703:36"><decl pos:start="703:21" pos:end="703:31"><type pos:start="703:21" pos:end="703:28"><name pos:start="703:21" pos:end="703:28">TCGv_i64</name></type> <name pos:start="703:30" pos:end="703:31">t0</name></decl>, <decl pos:start="703:34" pos:end="703:35"><type ref="prev" pos:start="703:21" pos:end="703:28"/><name pos:start="703:34" pos:end="703:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="705:21" pos:end="705:44"><expr pos:start="705:21" pos:end="705:43"><name pos:start="705:21" pos:end="705:22">t0</name> <operator pos:start="705:24" pos:end="705:24">=</operator> <call pos:start="705:26" pos:end="705:43"><name pos:start="705:26" pos:end="705:41">tcg_temp_new_i64</name><argument_list pos:start="705:42" pos:end="705:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="707:21" pos:end="707:44"><expr pos:start="707:21" pos:end="707:43"><name pos:start="707:21" pos:end="707:22">t1</name> <operator pos:start="707:24" pos:end="707:24">=</operator> <call pos:start="707:26" pos:end="707:43"><name pos:start="707:26" pos:end="707:41">tcg_temp_new_i64</name><argument_list pos:start="707:42" pos:end="707:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="709:21" pos:end="709:57"><expr pos:start="709:21" pos:end="709:56"><call pos:start="709:21" pos:end="709:56"><name pos:start="709:21" pos:end="709:37">gen_op_mov_TN_reg</name><argument_list pos:start="709:38" pos:end="709:56">(<argument pos:start="709:39" pos:end="709:45"><expr pos:start="709:39" pos:end="709:45"><name pos:start="709:39" pos:end="709:45">OT_LONG</name></expr></argument>, <argument pos:start="709:48" pos:end="709:48"><expr pos:start="709:48" pos:end="709:48"><literal type="number" pos:start="709:48" pos:end="709:48">1</literal></expr></argument>, <argument pos:start="709:51" pos:end="709:55"><expr pos:start="709:51" pos:end="709:55"><name pos:start="709:51" pos:end="709:55">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="711:21" pos:end="711:55"><expr pos:start="711:21" pos:end="711:54"><call pos:start="711:21" pos:end="711:54"><name pos:start="711:21" pos:end="711:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="711:41" pos:end="711:54">(<argument pos:start="711:42" pos:end="711:43"><expr pos:start="711:42" pos:end="711:43"><name pos:start="711:42" pos:end="711:43">t0</name></expr></argument>, <argument pos:start="711:46" pos:end="711:53"><expr pos:start="711:46" pos:end="711:53"><name pos:start="711:46" pos:end="711:53"><name pos:start="711:46" pos:end="711:50">cpu_T</name><index pos:start="711:51" pos:end="711:53">[<expr pos:start="711:52" pos:end="711:52"><literal type="number" pos:start="711:52" pos:end="711:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="713:21" pos:end="713:55"><expr pos:start="713:21" pos:end="713:54"><call pos:start="713:21" pos:end="713:54"><name pos:start="713:21" pos:end="713:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="713:41" pos:end="713:54">(<argument pos:start="713:42" pos:end="713:43"><expr pos:start="713:42" pos:end="713:43"><name pos:start="713:42" pos:end="713:43">t1</name></expr></argument>, <argument pos:start="713:46" pos:end="713:53"><expr pos:start="713:46" pos:end="713:53"><name pos:start="713:46" pos:end="713:53"><name pos:start="713:46" pos:end="713:50">cpu_T</name><index pos:start="713:51" pos:end="713:53">[<expr pos:start="713:52" pos:end="713:52"><literal type="number" pos:start="713:52" pos:end="713:52">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="715:21" pos:end="715:48"><expr pos:start="715:21" pos:end="715:47"><call pos:start="715:21" pos:end="715:47"><name pos:start="715:21" pos:end="715:35">tcg_gen_mul_i64</name><argument_list pos:start="715:36" pos:end="715:47">(<argument pos:start="715:37" pos:end="715:38"><expr pos:start="715:37" pos:end="715:38"><name pos:start="715:37" pos:end="715:38">t0</name></expr></argument>, <argument pos:start="715:41" pos:end="715:42"><expr pos:start="715:41" pos:end="715:42"><name pos:start="715:41" pos:end="715:42">t0</name></expr></argument>, <argument pos:start="715:45" pos:end="715:46"><expr pos:start="715:45" pos:end="715:46"><name pos:start="715:45" pos:end="715:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="717:21" pos:end="717:56"><expr pos:start="717:21" pos:end="717:55"><call pos:start="717:21" pos:end="717:55"><name pos:start="717:21" pos:end="717:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="717:42" pos:end="717:55">(<argument pos:start="717:43" pos:end="717:50"><expr pos:start="717:43" pos:end="717:50"><name pos:start="717:43" pos:end="717:50"><name pos:start="717:43" pos:end="717:47">cpu_T</name><index pos:start="717:48" pos:end="717:50">[<expr pos:start="717:49" pos:end="717:49"><literal type="number" pos:start="717:49" pos:end="717:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="717:53" pos:end="717:54"><expr pos:start="717:53" pos:end="717:54"><name pos:start="717:53" pos:end="717:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="719:21" pos:end="719:54"><expr pos:start="719:21" pos:end="719:53"><call pos:start="719:21" pos:end="719:53"><name pos:start="719:21" pos:end="719:37">gen_op_mov_reg_T0</name><argument_list pos:start="719:38" pos:end="719:53">(<argument pos:start="719:39" pos:end="719:45"><expr pos:start="719:39" pos:end="719:45"><name pos:start="719:39" pos:end="719:45">OT_LONG</name></expr></argument>, <argument pos:start="719:48" pos:end="719:52"><expr pos:start="719:48" pos:end="719:52"><name pos:start="719:48" pos:end="719:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="721:21" pos:end="721:57"><expr pos:start="721:21" pos:end="721:56"><call pos:start="721:21" pos:end="721:56"><name pos:start="721:21" pos:end="721:34">tcg_gen_mov_tl</name><argument_list pos:start="721:35" pos:end="721:56">(<argument pos:start="721:36" pos:end="721:45"><expr pos:start="721:36" pos:end="721:45"><name pos:start="721:36" pos:end="721:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="721:48" pos:end="721:55"><expr pos:start="721:48" pos:end="721:55"><name pos:start="721:48" pos:end="721:55"><name pos:start="721:48" pos:end="721:52">cpu_T</name><index pos:start="721:53" pos:end="721:55">[<expr pos:start="721:54" pos:end="721:54"><literal type="number" pos:start="721:54" pos:end="721:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="723:21" pos:end="723:49"><expr pos:start="723:21" pos:end="723:48"><call pos:start="723:21" pos:end="723:48"><name pos:start="723:21" pos:end="723:36">tcg_gen_shri_i64</name><argument_list pos:start="723:37" pos:end="723:48">(<argument pos:start="723:38" pos:end="723:39"><expr pos:start="723:38" pos:end="723:39"><name pos:start="723:38" pos:end="723:39">t0</name></expr></argument>, <argument pos:start="723:42" pos:end="723:43"><expr pos:start="723:42" pos:end="723:43"><name pos:start="723:42" pos:end="723:43">t0</name></expr></argument>, <argument pos:start="723:46" pos:end="723:47"><expr pos:start="723:46" pos:end="723:47"><literal type="number" pos:start="723:46" pos:end="723:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="725:21" pos:end="725:56"><expr pos:start="725:21" pos:end="725:55"><call pos:start="725:21" pos:end="725:55"><name pos:start="725:21" pos:end="725:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="725:42" pos:end="725:55">(<argument pos:start="725:43" pos:end="725:50"><expr pos:start="725:43" pos:end="725:50"><name pos:start="725:43" pos:end="725:50"><name pos:start="725:43" pos:end="725:47">cpu_T</name><index pos:start="725:48" pos:end="725:50">[<expr pos:start="725:49" pos:end="725:49"><literal type="number" pos:start="725:49" pos:end="725:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="725:53" pos:end="725:54"><expr pos:start="725:53" pos:end="725:54"><name pos:start="725:53" pos:end="725:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="727:21" pos:end="727:54"><expr pos:start="727:21" pos:end="727:53"><call pos:start="727:21" pos:end="727:53"><name pos:start="727:21" pos:end="727:37">gen_op_mov_reg_T0</name><argument_list pos:start="727:38" pos:end="727:53">(<argument pos:start="727:39" pos:end="727:45"><expr pos:start="727:39" pos:end="727:45"><name pos:start="727:39" pos:end="727:45">OT_LONG</name></expr></argument>, <argument pos:start="727:48" pos:end="727:52"><expr pos:start="727:48" pos:end="727:52"><name pos:start="727:48" pos:end="727:52">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="729:21" pos:end="729:57"><expr pos:start="729:21" pos:end="729:56"><call pos:start="729:21" pos:end="729:56"><name pos:start="729:21" pos:end="729:34">tcg_gen_mov_tl</name><argument_list pos:start="729:35" pos:end="729:56">(<argument pos:start="729:36" pos:end="729:45"><expr pos:start="729:36" pos:end="729:45"><name pos:start="729:36" pos:end="729:45">cpu_cc_src</name></expr></argument>, <argument pos:start="729:48" pos:end="729:55"><expr pos:start="729:48" pos:end="729:55"><name pos:start="729:48" pos:end="729:55"><name pos:start="729:48" pos:end="729:52">cpu_T</name><index pos:start="729:53" pos:end="729:55">[<expr pos:start="729:54" pos:end="729:54"><literal type="number" pos:start="729:54" pos:end="729:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="733:1" pos:end="733:6">#<cpp:directive pos:start="733:2" pos:end="733:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="735:17" pos:end="735:38"><expr pos:start="735:17" pos:end="735:37"><name pos:start="735:17" pos:end="735:24"><name pos:start="735:17" pos:end="735:17">s</name><operator pos:start="735:18" pos:end="735:19">-&gt;</operator><name pos:start="735:20" pos:end="735:24">cc_op</name></name> <operator pos:start="735:26" pos:end="735:26">=</operator> <name pos:start="735:28" pos:end="735:37">CC_OP_MULL</name></expr>;</expr_stmt>

                <break pos:start="737:17" pos:end="740:0">break;</break>

<cpp:ifdef pos:start="739:1" pos:end="739:20">#<cpp:directive pos:start="739:2" pos:end="739:6">ifdef</cpp:directive> <name pos:start="739:8" pos:end="739:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="741:13" pos:end="741:25">case <expr pos:start="741:18" pos:end="741:24"><name pos:start="741:18" pos:end="741:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="743:17" pos:end="743:58"><expr pos:start="743:17" pos:end="743:57"><call pos:start="743:17" pos:end="743:57"><name pos:start="743:17" pos:end="743:38">gen_helper_mulq_EAX_T0</name><argument_list pos:start="743:39" pos:end="743:57">(<argument pos:start="743:40" pos:end="743:46"><expr pos:start="743:40" pos:end="743:46"><name pos:start="743:40" pos:end="743:46">cpu_env</name></expr></argument>, <argument pos:start="743:49" pos:end="743:56"><expr pos:start="743:49" pos:end="743:56"><name pos:start="743:49" pos:end="743:56"><name pos:start="743:49" pos:end="743:53">cpu_T</name><index pos:start="743:54" pos:end="743:56">[<expr pos:start="743:55" pos:end="743:55"><literal type="number" pos:start="743:55" pos:end="743:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="745:17" pos:end="745:38"><expr pos:start="745:17" pos:end="745:37"><name pos:start="745:17" pos:end="745:24"><name pos:start="745:17" pos:end="745:17">s</name><operator pos:start="745:18" pos:end="745:19">-&gt;</operator><name pos:start="745:20" pos:end="745:24">cc_op</name></name> <operator pos:start="745:26" pos:end="745:26">=</operator> <name pos:start="745:28" pos:end="745:37">CC_OP_MULQ</name></expr>;</expr_stmt>

                <break pos:start="747:17" pos:end="750:0">break;</break>

<cpp:endif pos:start="749:1" pos:end="749:6">#<cpp:directive pos:start="749:2" pos:end="749:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="753:13" pos:end="753:18">break;</break>

        <case pos:start="755:9" pos:end="755:15">case <expr pos:start="755:14" pos:end="755:14"><literal type="number" pos:start="755:14" pos:end="755:14">5</literal></expr>:</case> <comment type="block" pos:start="755:17" pos:end="755:26">/* imul */</comment>

            <switch pos:start="757:13" pos:end="891:13">switch<condition pos:start="757:19" pos:end="757:22">(<expr pos:start="757:20" pos:end="757:21"><name pos:start="757:20" pos:end="757:21">ot</name></expr>)</condition> <block pos:start="757:24" pos:end="891:13">{<block_content pos:start="759:13" pos:end="890:0">

            <case pos:start="759:13" pos:end="759:25">case <expr pos:start="759:18" pos:end="759:24"><name pos:start="759:18" pos:end="759:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="761:17" pos:end="761:53"><expr pos:start="761:17" pos:end="761:52"><call pos:start="761:17" pos:end="761:52"><name pos:start="761:17" pos:end="761:33">gen_op_mov_TN_reg</name><argument_list pos:start="761:34" pos:end="761:52">(<argument pos:start="761:35" pos:end="761:41"><expr pos:start="761:35" pos:end="761:41"><name pos:start="761:35" pos:end="761:41">OT_BYTE</name></expr></argument>, <argument pos:start="761:44" pos:end="761:44"><expr pos:start="761:44" pos:end="761:44"><literal type="number" pos:start="761:44" pos:end="761:44">1</literal></expr></argument>, <argument pos:start="761:47" pos:end="761:51"><expr pos:start="761:47" pos:end="761:51"><name pos:start="761:47" pos:end="761:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="763:17" pos:end="763:53"><expr pos:start="763:17" pos:end="763:52"><call pos:start="763:17" pos:end="763:52"><name pos:start="763:17" pos:end="763:32">tcg_gen_ext8s_tl</name><argument_list pos:start="763:33" pos:end="763:52">(<argument pos:start="763:34" pos:end="763:41"><expr pos:start="763:34" pos:end="763:41"><name pos:start="763:34" pos:end="763:41"><name pos:start="763:34" pos:end="763:38">cpu_T</name><index pos:start="763:39" pos:end="763:41">[<expr pos:start="763:40" pos:end="763:40"><literal type="number" pos:start="763:40" pos:end="763:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="763:44" pos:end="763:51"><expr pos:start="763:44" pos:end="763:51"><name pos:start="763:44" pos:end="763:51"><name pos:start="763:44" pos:end="763:48">cpu_T</name><index pos:start="763:49" pos:end="763:51">[<expr pos:start="763:50" pos:end="763:50"><literal type="number" pos:start="763:50" pos:end="763:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="765:17" pos:end="765:53"><expr pos:start="765:17" pos:end="765:52"><call pos:start="765:17" pos:end="765:52"><name pos:start="765:17" pos:end="765:32">tcg_gen_ext8s_tl</name><argument_list pos:start="765:33" pos:end="765:52">(<argument pos:start="765:34" pos:end="765:41"><expr pos:start="765:34" pos:end="765:41"><name pos:start="765:34" pos:end="765:41"><name pos:start="765:34" pos:end="765:38">cpu_T</name><index pos:start="765:39" pos:end="765:41">[<expr pos:start="765:40" pos:end="765:40"><literal type="number" pos:start="765:40" pos:end="765:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="765:44" pos:end="765:51"><expr pos:start="765:44" pos:end="765:51"><name pos:start="765:44" pos:end="765:51"><name pos:start="765:44" pos:end="765:48">cpu_T</name><index pos:start="765:49" pos:end="765:51">[<expr pos:start="765:50" pos:end="765:50"><literal type="number" pos:start="765:50" pos:end="765:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="767:17" pos:end="767:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="769:17" pos:end="769:61"><expr pos:start="769:17" pos:end="769:60"><call pos:start="769:17" pos:end="769:60"><name pos:start="769:17" pos:end="769:30">tcg_gen_mul_tl</name><argument_list pos:start="769:31" pos:end="769:60">(<argument pos:start="769:32" pos:end="769:39"><expr pos:start="769:32" pos:end="769:39"><name pos:start="769:32" pos:end="769:39"><name pos:start="769:32" pos:end="769:36">cpu_T</name><index pos:start="769:37" pos:end="769:39">[<expr pos:start="769:38" pos:end="769:38"><literal type="number" pos:start="769:38" pos:end="769:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="769:42" pos:end="769:49"><expr pos:start="769:42" pos:end="769:49"><name pos:start="769:42" pos:end="769:49"><name pos:start="769:42" pos:end="769:46">cpu_T</name><index pos:start="769:47" pos:end="769:49">[<expr pos:start="769:48" pos:end="769:48"><literal type="number" pos:start="769:48" pos:end="769:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="769:52" pos:end="769:59"><expr pos:start="769:52" pos:end="769:59"><name pos:start="769:52" pos:end="769:59"><name pos:start="769:52" pos:end="769:56">cpu_T</name><index pos:start="769:57" pos:end="769:59">[<expr pos:start="769:58" pos:end="769:58"><literal type="number" pos:start="769:58" pos:end="769:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="771:17" pos:end="771:50"><expr pos:start="771:17" pos:end="771:49"><call pos:start="771:17" pos:end="771:49"><name pos:start="771:17" pos:end="771:33">gen_op_mov_reg_T0</name><argument_list pos:start="771:34" pos:end="771:49">(<argument pos:start="771:35" pos:end="771:41"><expr pos:start="771:35" pos:end="771:41"><name pos:start="771:35" pos:end="771:41">OT_WORD</name></expr></argument>, <argument pos:start="771:44" pos:end="771:48"><expr pos:start="771:44" pos:end="771:48"><name pos:start="771:44" pos:end="771:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="773:17" pos:end="773:53"><expr pos:start="773:17" pos:end="773:52"><call pos:start="773:17" pos:end="773:52"><name pos:start="773:17" pos:end="773:30">tcg_gen_mov_tl</name><argument_list pos:start="773:31" pos:end="773:52">(<argument pos:start="773:32" pos:end="773:41"><expr pos:start="773:32" pos:end="773:41"><name pos:start="773:32" pos:end="773:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="773:44" pos:end="773:51"><expr pos:start="773:44" pos:end="773:51"><name pos:start="773:44" pos:end="773:51"><name pos:start="773:44" pos:end="773:48">cpu_T</name><index pos:start="773:49" pos:end="773:51">[<expr pos:start="773:50" pos:end="773:50"><literal type="number" pos:start="773:50" pos:end="773:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="775:17" pos:end="775:53"><expr pos:start="775:17" pos:end="775:52"><call pos:start="775:17" pos:end="775:52"><name pos:start="775:17" pos:end="775:32">tcg_gen_ext8s_tl</name><argument_list pos:start="775:33" pos:end="775:52">(<argument pos:start="775:34" pos:end="775:41"><expr pos:start="775:34" pos:end="775:41"><name pos:start="775:34" pos:end="775:41">cpu_tmp0</name></expr></argument>, <argument pos:start="775:44" pos:end="775:51"><expr pos:start="775:44" pos:end="775:51"><name pos:start="775:44" pos:end="775:51"><name pos:start="775:44" pos:end="775:48">cpu_T</name><index pos:start="775:49" pos:end="775:51">[<expr pos:start="775:50" pos:end="775:50"><literal type="number" pos:start="775:50" pos:end="775:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="777:17" pos:end="777:63"><expr pos:start="777:17" pos:end="777:62"><call pos:start="777:17" pos:end="777:62"><name pos:start="777:17" pos:end="777:30">tcg_gen_sub_tl</name><argument_list pos:start="777:31" pos:end="777:62">(<argument pos:start="777:32" pos:end="777:41"><expr pos:start="777:32" pos:end="777:41"><name pos:start="777:32" pos:end="777:41">cpu_cc_src</name></expr></argument>, <argument pos:start="777:44" pos:end="777:51"><expr pos:start="777:44" pos:end="777:51"><name pos:start="777:44" pos:end="777:51"><name pos:start="777:44" pos:end="777:48">cpu_T</name><index pos:start="777:49" pos:end="777:51">[<expr pos:start="777:50" pos:end="777:50"><literal type="number" pos:start="777:50" pos:end="777:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="777:54" pos:end="777:61"><expr pos:start="777:54" pos:end="777:61"><name pos:start="777:54" pos:end="777:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="779:17" pos:end="779:38"><expr pos:start="779:17" pos:end="779:37"><name pos:start="779:17" pos:end="779:24"><name pos:start="779:17" pos:end="779:17">s</name><operator pos:start="779:18" pos:end="779:19">-&gt;</operator><name pos:start="779:20" pos:end="779:24">cc_op</name></name> <operator pos:start="779:26" pos:end="779:26">=</operator> <name pos:start="779:28" pos:end="779:37">CC_OP_MULB</name></expr>;</expr_stmt>

                <break pos:start="781:17" pos:end="781:22">break;</break>

            <case pos:start="783:13" pos:end="783:25">case <expr pos:start="783:18" pos:end="783:24"><name pos:start="783:18" pos:end="783:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="785:17" pos:end="785:53"><expr pos:start="785:17" pos:end="785:52"><call pos:start="785:17" pos:end="785:52"><name pos:start="785:17" pos:end="785:33">gen_op_mov_TN_reg</name><argument_list pos:start="785:34" pos:end="785:52">(<argument pos:start="785:35" pos:end="785:41"><expr pos:start="785:35" pos:end="785:41"><name pos:start="785:35" pos:end="785:41">OT_WORD</name></expr></argument>, <argument pos:start="785:44" pos:end="785:44"><expr pos:start="785:44" pos:end="785:44"><literal type="number" pos:start="785:44" pos:end="785:44">1</literal></expr></argument>, <argument pos:start="785:47" pos:end="785:51"><expr pos:start="785:47" pos:end="785:51"><name pos:start="785:47" pos:end="785:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="787:17" pos:end="787:54"><expr pos:start="787:17" pos:end="787:53"><call pos:start="787:17" pos:end="787:53"><name pos:start="787:17" pos:end="787:33">tcg_gen_ext16s_tl</name><argument_list pos:start="787:34" pos:end="787:53">(<argument pos:start="787:35" pos:end="787:42"><expr pos:start="787:35" pos:end="787:42"><name pos:start="787:35" pos:end="787:42"><name pos:start="787:35" pos:end="787:39">cpu_T</name><index pos:start="787:40" pos:end="787:42">[<expr pos:start="787:41" pos:end="787:41"><literal type="number" pos:start="787:41" pos:end="787:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="787:45" pos:end="787:52"><expr pos:start="787:45" pos:end="787:52"><name pos:start="787:45" pos:end="787:52"><name pos:start="787:45" pos:end="787:49">cpu_T</name><index pos:start="787:50" pos:end="787:52">[<expr pos:start="787:51" pos:end="787:51"><literal type="number" pos:start="787:51" pos:end="787:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="789:17" pos:end="789:54"><expr pos:start="789:17" pos:end="789:53"><call pos:start="789:17" pos:end="789:53"><name pos:start="789:17" pos:end="789:33">tcg_gen_ext16s_tl</name><argument_list pos:start="789:34" pos:end="789:53">(<argument pos:start="789:35" pos:end="789:42"><expr pos:start="789:35" pos:end="789:42"><name pos:start="789:35" pos:end="789:42"><name pos:start="789:35" pos:end="789:39">cpu_T</name><index pos:start="789:40" pos:end="789:42">[<expr pos:start="789:41" pos:end="789:41"><literal type="number" pos:start="789:41" pos:end="789:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="789:45" pos:end="789:52"><expr pos:start="789:45" pos:end="789:52"><name pos:start="789:45" pos:end="789:52"><name pos:start="789:45" pos:end="789:49">cpu_T</name><index pos:start="789:50" pos:end="789:52">[<expr pos:start="789:51" pos:end="789:51"><literal type="number" pos:start="789:51" pos:end="789:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="791:17" pos:end="791:63">/* XXX: use 32 bit mul which could be faster */</comment>

                <expr_stmt pos:start="793:17" pos:end="793:61"><expr pos:start="793:17" pos:end="793:60"><call pos:start="793:17" pos:end="793:60"><name pos:start="793:17" pos:end="793:30">tcg_gen_mul_tl</name><argument_list pos:start="793:31" pos:end="793:60">(<argument pos:start="793:32" pos:end="793:39"><expr pos:start="793:32" pos:end="793:39"><name pos:start="793:32" pos:end="793:39"><name pos:start="793:32" pos:end="793:36">cpu_T</name><index pos:start="793:37" pos:end="793:39">[<expr pos:start="793:38" pos:end="793:38"><literal type="number" pos:start="793:38" pos:end="793:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="793:42" pos:end="793:49"><expr pos:start="793:42" pos:end="793:49"><name pos:start="793:42" pos:end="793:49"><name pos:start="793:42" pos:end="793:46">cpu_T</name><index pos:start="793:47" pos:end="793:49">[<expr pos:start="793:48" pos:end="793:48"><literal type="number" pos:start="793:48" pos:end="793:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="793:52" pos:end="793:59"><expr pos:start="793:52" pos:end="793:59"><name pos:start="793:52" pos:end="793:59"><name pos:start="793:52" pos:end="793:56">cpu_T</name><index pos:start="793:57" pos:end="793:59">[<expr pos:start="793:58" pos:end="793:58"><literal type="number" pos:start="793:58" pos:end="793:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="795:17" pos:end="795:50"><expr pos:start="795:17" pos:end="795:49"><call pos:start="795:17" pos:end="795:49"><name pos:start="795:17" pos:end="795:33">gen_op_mov_reg_T0</name><argument_list pos:start="795:34" pos:end="795:49">(<argument pos:start="795:35" pos:end="795:41"><expr pos:start="795:35" pos:end="795:41"><name pos:start="795:35" pos:end="795:41">OT_WORD</name></expr></argument>, <argument pos:start="795:44" pos:end="795:48"><expr pos:start="795:44" pos:end="795:48"><name pos:start="795:44" pos:end="795:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="797:17" pos:end="797:53"><expr pos:start="797:17" pos:end="797:52"><call pos:start="797:17" pos:end="797:52"><name pos:start="797:17" pos:end="797:30">tcg_gen_mov_tl</name><argument_list pos:start="797:31" pos:end="797:52">(<argument pos:start="797:32" pos:end="797:41"><expr pos:start="797:32" pos:end="797:41"><name pos:start="797:32" pos:end="797:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="797:44" pos:end="797:51"><expr pos:start="797:44" pos:end="797:51"><name pos:start="797:44" pos:end="797:51"><name pos:start="797:44" pos:end="797:48">cpu_T</name><index pos:start="797:49" pos:end="797:51">[<expr pos:start="797:50" pos:end="797:50"><literal type="number" pos:start="797:50" pos:end="797:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="799:17" pos:end="799:54"><expr pos:start="799:17" pos:end="799:53"><call pos:start="799:17" pos:end="799:53"><name pos:start="799:17" pos:end="799:33">tcg_gen_ext16s_tl</name><argument_list pos:start="799:34" pos:end="799:53">(<argument pos:start="799:35" pos:end="799:42"><expr pos:start="799:35" pos:end="799:42"><name pos:start="799:35" pos:end="799:42">cpu_tmp0</name></expr></argument>, <argument pos:start="799:45" pos:end="799:52"><expr pos:start="799:45" pos:end="799:52"><name pos:start="799:45" pos:end="799:52"><name pos:start="799:45" pos:end="799:49">cpu_T</name><index pos:start="799:50" pos:end="799:52">[<expr pos:start="799:51" pos:end="799:51"><literal type="number" pos:start="799:51" pos:end="799:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="801:17" pos:end="801:63"><expr pos:start="801:17" pos:end="801:62"><call pos:start="801:17" pos:end="801:62"><name pos:start="801:17" pos:end="801:30">tcg_gen_sub_tl</name><argument_list pos:start="801:31" pos:end="801:62">(<argument pos:start="801:32" pos:end="801:41"><expr pos:start="801:32" pos:end="801:41"><name pos:start="801:32" pos:end="801:41">cpu_cc_src</name></expr></argument>, <argument pos:start="801:44" pos:end="801:51"><expr pos:start="801:44" pos:end="801:51"><name pos:start="801:44" pos:end="801:51"><name pos:start="801:44" pos:end="801:48">cpu_T</name><index pos:start="801:49" pos:end="801:51">[<expr pos:start="801:50" pos:end="801:50"><literal type="number" pos:start="801:50" pos:end="801:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="801:54" pos:end="801:61"><expr pos:start="801:54" pos:end="801:61"><name pos:start="801:54" pos:end="801:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="803:17" pos:end="803:56"><expr pos:start="803:17" pos:end="803:55"><call pos:start="803:17" pos:end="803:55"><name pos:start="803:17" pos:end="803:31">tcg_gen_shri_tl</name><argument_list pos:start="803:32" pos:end="803:55">(<argument pos:start="803:33" pos:end="803:40"><expr pos:start="803:33" pos:end="803:40"><name pos:start="803:33" pos:end="803:40"><name pos:start="803:33" pos:end="803:37">cpu_T</name><index pos:start="803:38" pos:end="803:40">[<expr pos:start="803:39" pos:end="803:39"><literal type="number" pos:start="803:39" pos:end="803:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="803:43" pos:end="803:50"><expr pos:start="803:43" pos:end="803:50"><name pos:start="803:43" pos:end="803:50"><name pos:start="803:43" pos:end="803:47">cpu_T</name><index pos:start="803:48" pos:end="803:50">[<expr pos:start="803:49" pos:end="803:49"><literal type="number" pos:start="803:49" pos:end="803:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="803:53" pos:end="803:54"><expr pos:start="803:53" pos:end="803:54"><literal type="number" pos:start="803:53" pos:end="803:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="805:17" pos:end="805:50"><expr pos:start="805:17" pos:end="805:49"><call pos:start="805:17" pos:end="805:49"><name pos:start="805:17" pos:end="805:33">gen_op_mov_reg_T0</name><argument_list pos:start="805:34" pos:end="805:49">(<argument pos:start="805:35" pos:end="805:41"><expr pos:start="805:35" pos:end="805:41"><name pos:start="805:35" pos:end="805:41">OT_WORD</name></expr></argument>, <argument pos:start="805:44" pos:end="805:48"><expr pos:start="805:44" pos:end="805:48"><name pos:start="805:44" pos:end="805:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="807:17" pos:end="807:38"><expr pos:start="807:17" pos:end="807:37"><name pos:start="807:17" pos:end="807:24"><name pos:start="807:17" pos:end="807:17">s</name><operator pos:start="807:18" pos:end="807:19">-&gt;</operator><name pos:start="807:20" pos:end="807:24">cc_op</name></name> <operator pos:start="807:26" pos:end="807:26">=</operator> <name pos:start="807:28" pos:end="807:37">CC_OP_MULW</name></expr>;</expr_stmt>

                <break pos:start="809:17" pos:end="809:22">break;</break>

            <default pos:start="811:13" pos:end="811:20">default:</default>

            <case pos:start="813:13" pos:end="816:0">case <expr pos:start="813:18" pos:end="813:24"><name pos:start="813:18" pos:end="813:24">OT_LONG</name></expr>:</case>

<cpp:ifdef pos:start="815:1" pos:end="815:20">#<cpp:directive pos:start="815:2" pos:end="815:6">ifdef</cpp:directive> <name pos:start="815:8" pos:end="815:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="817:17" pos:end="817:53"><expr pos:start="817:17" pos:end="817:52"><call pos:start="817:17" pos:end="817:52"><name pos:start="817:17" pos:end="817:33">gen_op_mov_TN_reg</name><argument_list pos:start="817:34" pos:end="817:52">(<argument pos:start="817:35" pos:end="817:41"><expr pos:start="817:35" pos:end="817:41"><name pos:start="817:35" pos:end="817:41">OT_LONG</name></expr></argument>, <argument pos:start="817:44" pos:end="817:44"><expr pos:start="817:44" pos:end="817:44"><literal type="number" pos:start="817:44" pos:end="817:44">1</literal></expr></argument>, <argument pos:start="817:47" pos:end="817:51"><expr pos:start="817:47" pos:end="817:51"><name pos:start="817:47" pos:end="817:51">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="819:17" pos:end="819:54"><expr pos:start="819:17" pos:end="819:53"><call pos:start="819:17" pos:end="819:53"><name pos:start="819:17" pos:end="819:33">tcg_gen_ext32s_tl</name><argument_list pos:start="819:34" pos:end="819:53">(<argument pos:start="819:35" pos:end="819:42"><expr pos:start="819:35" pos:end="819:42"><name pos:start="819:35" pos:end="819:42"><name pos:start="819:35" pos:end="819:39">cpu_T</name><index pos:start="819:40" pos:end="819:42">[<expr pos:start="819:41" pos:end="819:41"><literal type="number" pos:start="819:41" pos:end="819:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="819:45" pos:end="819:52"><expr pos:start="819:45" pos:end="819:52"><name pos:start="819:45" pos:end="819:52"><name pos:start="819:45" pos:end="819:49">cpu_T</name><index pos:start="819:50" pos:end="819:52">[<expr pos:start="819:51" pos:end="819:51"><literal type="number" pos:start="819:51" pos:end="819:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="821:17" pos:end="821:54"><expr pos:start="821:17" pos:end="821:53"><call pos:start="821:17" pos:end="821:53"><name pos:start="821:17" pos:end="821:33">tcg_gen_ext32s_tl</name><argument_list pos:start="821:34" pos:end="821:53">(<argument pos:start="821:35" pos:end="821:42"><expr pos:start="821:35" pos:end="821:42"><name pos:start="821:35" pos:end="821:42"><name pos:start="821:35" pos:end="821:39">cpu_T</name><index pos:start="821:40" pos:end="821:42">[<expr pos:start="821:41" pos:end="821:41"><literal type="number" pos:start="821:41" pos:end="821:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="821:45" pos:end="821:52"><expr pos:start="821:45" pos:end="821:52"><name pos:start="821:45" pos:end="821:52"><name pos:start="821:45" pos:end="821:49">cpu_T</name><index pos:start="821:50" pos:end="821:52">[<expr pos:start="821:51" pos:end="821:51"><literal type="number" pos:start="821:51" pos:end="821:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="823:17" pos:end="823:61"><expr pos:start="823:17" pos:end="823:60"><call pos:start="823:17" pos:end="823:60"><name pos:start="823:17" pos:end="823:30">tcg_gen_mul_tl</name><argument_list pos:start="823:31" pos:end="823:60">(<argument pos:start="823:32" pos:end="823:39"><expr pos:start="823:32" pos:end="823:39"><name pos:start="823:32" pos:end="823:39"><name pos:start="823:32" pos:end="823:36">cpu_T</name><index pos:start="823:37" pos:end="823:39">[<expr pos:start="823:38" pos:end="823:38"><literal type="number" pos:start="823:38" pos:end="823:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="823:42" pos:end="823:49"><expr pos:start="823:42" pos:end="823:49"><name pos:start="823:42" pos:end="823:49"><name pos:start="823:42" pos:end="823:46">cpu_T</name><index pos:start="823:47" pos:end="823:49">[<expr pos:start="823:48" pos:end="823:48"><literal type="number" pos:start="823:48" pos:end="823:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="823:52" pos:end="823:59"><expr pos:start="823:52" pos:end="823:59"><name pos:start="823:52" pos:end="823:59"><name pos:start="823:52" pos:end="823:56">cpu_T</name><index pos:start="823:57" pos:end="823:59">[<expr pos:start="823:58" pos:end="823:58"><literal type="number" pos:start="823:58" pos:end="823:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="825:17" pos:end="825:50"><expr pos:start="825:17" pos:end="825:49"><call pos:start="825:17" pos:end="825:49"><name pos:start="825:17" pos:end="825:33">gen_op_mov_reg_T0</name><argument_list pos:start="825:34" pos:end="825:49">(<argument pos:start="825:35" pos:end="825:41"><expr pos:start="825:35" pos:end="825:41"><name pos:start="825:35" pos:end="825:41">OT_LONG</name></expr></argument>, <argument pos:start="825:44" pos:end="825:48"><expr pos:start="825:44" pos:end="825:48"><name pos:start="825:44" pos:end="825:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="827:17" pos:end="827:53"><expr pos:start="827:17" pos:end="827:52"><call pos:start="827:17" pos:end="827:52"><name pos:start="827:17" pos:end="827:30">tcg_gen_mov_tl</name><argument_list pos:start="827:31" pos:end="827:52">(<argument pos:start="827:32" pos:end="827:41"><expr pos:start="827:32" pos:end="827:41"><name pos:start="827:32" pos:end="827:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="827:44" pos:end="827:51"><expr pos:start="827:44" pos:end="827:51"><name pos:start="827:44" pos:end="827:51"><name pos:start="827:44" pos:end="827:48">cpu_T</name><index pos:start="827:49" pos:end="827:51">[<expr pos:start="827:50" pos:end="827:50"><literal type="number" pos:start="827:50" pos:end="827:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="829:17" pos:end="829:54"><expr pos:start="829:17" pos:end="829:53"><call pos:start="829:17" pos:end="829:53"><name pos:start="829:17" pos:end="829:33">tcg_gen_ext32s_tl</name><argument_list pos:start="829:34" pos:end="829:53">(<argument pos:start="829:35" pos:end="829:42"><expr pos:start="829:35" pos:end="829:42"><name pos:start="829:35" pos:end="829:42">cpu_tmp0</name></expr></argument>, <argument pos:start="829:45" pos:end="829:52"><expr pos:start="829:45" pos:end="829:52"><name pos:start="829:45" pos:end="829:52"><name pos:start="829:45" pos:end="829:49">cpu_T</name><index pos:start="829:50" pos:end="829:52">[<expr pos:start="829:51" pos:end="829:51"><literal type="number" pos:start="829:51" pos:end="829:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="831:17" pos:end="831:63"><expr pos:start="831:17" pos:end="831:62"><call pos:start="831:17" pos:end="831:62"><name pos:start="831:17" pos:end="831:30">tcg_gen_sub_tl</name><argument_list pos:start="831:31" pos:end="831:62">(<argument pos:start="831:32" pos:end="831:41"><expr pos:start="831:32" pos:end="831:41"><name pos:start="831:32" pos:end="831:41">cpu_cc_src</name></expr></argument>, <argument pos:start="831:44" pos:end="831:51"><expr pos:start="831:44" pos:end="831:51"><name pos:start="831:44" pos:end="831:51"><name pos:start="831:44" pos:end="831:48">cpu_T</name><index pos:start="831:49" pos:end="831:51">[<expr pos:start="831:50" pos:end="831:50"><literal type="number" pos:start="831:50" pos:end="831:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="831:54" pos:end="831:61"><expr pos:start="831:54" pos:end="831:61"><name pos:start="831:54" pos:end="831:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="833:17" pos:end="833:56"><expr pos:start="833:17" pos:end="833:55"><call pos:start="833:17" pos:end="833:55"><name pos:start="833:17" pos:end="833:31">tcg_gen_shri_tl</name><argument_list pos:start="833:32" pos:end="833:55">(<argument pos:start="833:33" pos:end="833:40"><expr pos:start="833:33" pos:end="833:40"><name pos:start="833:33" pos:end="833:40"><name pos:start="833:33" pos:end="833:37">cpu_T</name><index pos:start="833:38" pos:end="833:40">[<expr pos:start="833:39" pos:end="833:39"><literal type="number" pos:start="833:39" pos:end="833:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="833:43" pos:end="833:50"><expr pos:start="833:43" pos:end="833:50"><name pos:start="833:43" pos:end="833:50"><name pos:start="833:43" pos:end="833:47">cpu_T</name><index pos:start="833:48" pos:end="833:50">[<expr pos:start="833:49" pos:end="833:49"><literal type="number" pos:start="833:49" pos:end="833:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="833:53" pos:end="833:54"><expr pos:start="833:53" pos:end="833:54"><literal type="number" pos:start="833:53" pos:end="833:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="835:17" pos:end="838:0"><expr pos:start="835:17" pos:end="835:49"><call pos:start="835:17" pos:end="835:49"><name pos:start="835:17" pos:end="835:33">gen_op_mov_reg_T0</name><argument_list pos:start="835:34" pos:end="835:49">(<argument pos:start="835:35" pos:end="835:41"><expr pos:start="835:35" pos:end="835:41"><name pos:start="835:35" pos:end="835:41">OT_LONG</name></expr></argument>, <argument pos:start="835:44" pos:end="835:48"><expr pos:start="835:44" pos:end="835:48"><name pos:start="835:44" pos:end="835:48">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="837:1" pos:end="837:5">#<cpp:directive pos:start="837:2" pos:end="837:5">else</cpp:directive></cpp:else>

                <block pos:start="839:17" pos:end="874:0">{<block_content pos:start="841:21" pos:end="869:67">

                    <decl_stmt pos:start="841:21" pos:end="841:36"><decl pos:start="841:21" pos:end="841:31"><type pos:start="841:21" pos:end="841:28"><name pos:start="841:21" pos:end="841:28">TCGv_i64</name></type> <name pos:start="841:30" pos:end="841:31">t0</name></decl>, <decl pos:start="841:34" pos:end="841:35"><type ref="prev" pos:start="841:21" pos:end="841:28"/><name pos:start="841:34" pos:end="841:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="843:21" pos:end="843:44"><expr pos:start="843:21" pos:end="843:43"><name pos:start="843:21" pos:end="843:22">t0</name> <operator pos:start="843:24" pos:end="843:24">=</operator> <call pos:start="843:26" pos:end="843:43"><name pos:start="843:26" pos:end="843:41">tcg_temp_new_i64</name><argument_list pos:start="843:42" pos:end="843:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="845:21" pos:end="845:44"><expr pos:start="845:21" pos:end="845:43"><name pos:start="845:21" pos:end="845:22">t1</name> <operator pos:start="845:24" pos:end="845:24">=</operator> <call pos:start="845:26" pos:end="845:43"><name pos:start="845:26" pos:end="845:41">tcg_temp_new_i64</name><argument_list pos:start="845:42" pos:end="845:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="847:21" pos:end="847:57"><expr pos:start="847:21" pos:end="847:56"><call pos:start="847:21" pos:end="847:56"><name pos:start="847:21" pos:end="847:37">gen_op_mov_TN_reg</name><argument_list pos:start="847:38" pos:end="847:56">(<argument pos:start="847:39" pos:end="847:45"><expr pos:start="847:39" pos:end="847:45"><name pos:start="847:39" pos:end="847:45">OT_LONG</name></expr></argument>, <argument pos:start="847:48" pos:end="847:48"><expr pos:start="847:48" pos:end="847:48"><literal type="number" pos:start="847:48" pos:end="847:48">1</literal></expr></argument>, <argument pos:start="847:51" pos:end="847:55"><expr pos:start="847:51" pos:end="847:55"><name pos:start="847:51" pos:end="847:55">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="849:21" pos:end="849:54"><expr pos:start="849:21" pos:end="849:53"><call pos:start="849:21" pos:end="849:53"><name pos:start="849:21" pos:end="849:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="849:40" pos:end="849:53">(<argument pos:start="849:41" pos:end="849:42"><expr pos:start="849:41" pos:end="849:42"><name pos:start="849:41" pos:end="849:42">t0</name></expr></argument>, <argument pos:start="849:45" pos:end="849:52"><expr pos:start="849:45" pos:end="849:52"><name pos:start="849:45" pos:end="849:52"><name pos:start="849:45" pos:end="849:49">cpu_T</name><index pos:start="849:50" pos:end="849:52">[<expr pos:start="849:51" pos:end="849:51"><literal type="number" pos:start="849:51" pos:end="849:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="851:21" pos:end="851:54"><expr pos:start="851:21" pos:end="851:53"><call pos:start="851:21" pos:end="851:53"><name pos:start="851:21" pos:end="851:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="851:40" pos:end="851:53">(<argument pos:start="851:41" pos:end="851:42"><expr pos:start="851:41" pos:end="851:42"><name pos:start="851:41" pos:end="851:42">t1</name></expr></argument>, <argument pos:start="851:45" pos:end="851:52"><expr pos:start="851:45" pos:end="851:52"><name pos:start="851:45" pos:end="851:52"><name pos:start="851:45" pos:end="851:49">cpu_T</name><index pos:start="851:50" pos:end="851:52">[<expr pos:start="851:51" pos:end="851:51"><literal type="number" pos:start="851:51" pos:end="851:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="853:21" pos:end="853:48"><expr pos:start="853:21" pos:end="853:47"><call pos:start="853:21" pos:end="853:47"><name pos:start="853:21" pos:end="853:35">tcg_gen_mul_i64</name><argument_list pos:start="853:36" pos:end="853:47">(<argument pos:start="853:37" pos:end="853:38"><expr pos:start="853:37" pos:end="853:38"><name pos:start="853:37" pos:end="853:38">t0</name></expr></argument>, <argument pos:start="853:41" pos:end="853:42"><expr pos:start="853:41" pos:end="853:42"><name pos:start="853:41" pos:end="853:42">t0</name></expr></argument>, <argument pos:start="853:45" pos:end="853:46"><expr pos:start="853:45" pos:end="853:46"><name pos:start="853:45" pos:end="853:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="855:21" pos:end="855:56"><expr pos:start="855:21" pos:end="855:55"><call pos:start="855:21" pos:end="855:55"><name pos:start="855:21" pos:end="855:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="855:42" pos:end="855:55">(<argument pos:start="855:43" pos:end="855:50"><expr pos:start="855:43" pos:end="855:50"><name pos:start="855:43" pos:end="855:50"><name pos:start="855:43" pos:end="855:47">cpu_T</name><index pos:start="855:48" pos:end="855:50">[<expr pos:start="855:49" pos:end="855:49"><literal type="number" pos:start="855:49" pos:end="855:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="855:53" pos:end="855:54"><expr pos:start="855:53" pos:end="855:54"><name pos:start="855:53" pos:end="855:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="857:21" pos:end="857:54"><expr pos:start="857:21" pos:end="857:53"><call pos:start="857:21" pos:end="857:53"><name pos:start="857:21" pos:end="857:37">gen_op_mov_reg_T0</name><argument_list pos:start="857:38" pos:end="857:53">(<argument pos:start="857:39" pos:end="857:45"><expr pos:start="857:39" pos:end="857:45"><name pos:start="857:39" pos:end="857:45">OT_LONG</name></expr></argument>, <argument pos:start="857:48" pos:end="857:52"><expr pos:start="857:48" pos:end="857:52"><name pos:start="857:48" pos:end="857:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="859:21" pos:end="859:57"><expr pos:start="859:21" pos:end="859:56"><call pos:start="859:21" pos:end="859:56"><name pos:start="859:21" pos:end="859:34">tcg_gen_mov_tl</name><argument_list pos:start="859:35" pos:end="859:56">(<argument pos:start="859:36" pos:end="859:45"><expr pos:start="859:36" pos:end="859:45"><name pos:start="859:36" pos:end="859:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="859:48" pos:end="859:55"><expr pos:start="859:48" pos:end="859:55"><name pos:start="859:48" pos:end="859:55"><name pos:start="859:48" pos:end="859:52">cpu_T</name><index pos:start="859:53" pos:end="859:55">[<expr pos:start="859:54" pos:end="859:54"><literal type="number" pos:start="859:54" pos:end="859:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="861:21" pos:end="861:60"><expr pos:start="861:21" pos:end="861:59"><call pos:start="861:21" pos:end="861:59"><name pos:start="861:21" pos:end="861:35">tcg_gen_sari_tl</name><argument_list pos:start="861:36" pos:end="861:59">(<argument pos:start="861:37" pos:end="861:44"><expr pos:start="861:37" pos:end="861:44"><name pos:start="861:37" pos:end="861:44">cpu_tmp0</name></expr></argument>, <argument pos:start="861:47" pos:end="861:54"><expr pos:start="861:47" pos:end="861:54"><name pos:start="861:47" pos:end="861:54"><name pos:start="861:47" pos:end="861:51">cpu_T</name><index pos:start="861:52" pos:end="861:54">[<expr pos:start="861:53" pos:end="861:53"><literal type="number" pos:start="861:53" pos:end="861:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="861:57" pos:end="861:58"><expr pos:start="861:57" pos:end="861:58"><literal type="number" pos:start="861:57" pos:end="861:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="863:21" pos:end="863:49"><expr pos:start="863:21" pos:end="863:48"><call pos:start="863:21" pos:end="863:48"><name pos:start="863:21" pos:end="863:36">tcg_gen_shri_i64</name><argument_list pos:start="863:37" pos:end="863:48">(<argument pos:start="863:38" pos:end="863:39"><expr pos:start="863:38" pos:end="863:39"><name pos:start="863:38" pos:end="863:39">t0</name></expr></argument>, <argument pos:start="863:42" pos:end="863:43"><expr pos:start="863:42" pos:end="863:43"><name pos:start="863:42" pos:end="863:43">t0</name></expr></argument>, <argument pos:start="863:46" pos:end="863:47"><expr pos:start="863:46" pos:end="863:47"><literal type="number" pos:start="863:46" pos:end="863:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="865:21" pos:end="865:56"><expr pos:start="865:21" pos:end="865:55"><call pos:start="865:21" pos:end="865:55"><name pos:start="865:21" pos:end="865:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="865:42" pos:end="865:55">(<argument pos:start="865:43" pos:end="865:50"><expr pos:start="865:43" pos:end="865:50"><name pos:start="865:43" pos:end="865:50"><name pos:start="865:43" pos:end="865:47">cpu_T</name><index pos:start="865:48" pos:end="865:50">[<expr pos:start="865:49" pos:end="865:49"><literal type="number" pos:start="865:49" pos:end="865:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="865:53" pos:end="865:54"><expr pos:start="865:53" pos:end="865:54"><name pos:start="865:53" pos:end="865:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="867:21" pos:end="867:54"><expr pos:start="867:21" pos:end="867:53"><call pos:start="867:21" pos:end="867:53"><name pos:start="867:21" pos:end="867:37">gen_op_mov_reg_T0</name><argument_list pos:start="867:38" pos:end="867:53">(<argument pos:start="867:39" pos:end="867:45"><expr pos:start="867:39" pos:end="867:45"><name pos:start="867:39" pos:end="867:45">OT_LONG</name></expr></argument>, <argument pos:start="867:48" pos:end="867:52"><expr pos:start="867:48" pos:end="867:52"><name pos:start="867:48" pos:end="867:52">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="869:21" pos:end="869:67"><expr pos:start="869:21" pos:end="869:66"><call pos:start="869:21" pos:end="869:66"><name pos:start="869:21" pos:end="869:34">tcg_gen_sub_tl</name><argument_list pos:start="869:35" pos:end="869:66">(<argument pos:start="869:36" pos:end="869:45"><expr pos:start="869:36" pos:end="869:45"><name pos:start="869:36" pos:end="869:45">cpu_cc_src</name></expr></argument>, <argument pos:start="869:48" pos:end="869:55"><expr pos:start="869:48" pos:end="869:55"><name pos:start="869:48" pos:end="869:55"><name pos:start="869:48" pos:end="869:52">cpu_T</name><index pos:start="869:53" pos:end="869:55">[<expr pos:start="869:54" pos:end="869:54"><literal type="number" pos:start="869:54" pos:end="869:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="869:58" pos:end="869:65"><expr pos:start="869:58" pos:end="869:65"><name pos:start="869:58" pos:end="869:65">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="873:1" pos:end="873:6">#<cpp:directive pos:start="873:2" pos:end="873:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="875:17" pos:end="875:38"><expr pos:start="875:17" pos:end="875:37"><name pos:start="875:17" pos:end="875:24"><name pos:start="875:17" pos:end="875:17">s</name><operator pos:start="875:18" pos:end="875:19">-&gt;</operator><name pos:start="875:20" pos:end="875:24">cc_op</name></name> <operator pos:start="875:26" pos:end="875:26">=</operator> <name pos:start="875:28" pos:end="875:37">CC_OP_MULL</name></expr>;</expr_stmt>

                <break pos:start="877:17" pos:end="880:0">break;</break>

<cpp:ifdef pos:start="879:1" pos:end="879:20">#<cpp:directive pos:start="879:2" pos:end="879:6">ifdef</cpp:directive> <name pos:start="879:8" pos:end="879:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="881:13" pos:end="881:25">case <expr pos:start="881:18" pos:end="881:24"><name pos:start="881:18" pos:end="881:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="883:17" pos:end="883:59"><expr pos:start="883:17" pos:end="883:58"><call pos:start="883:17" pos:end="883:58"><name pos:start="883:17" pos:end="883:39">gen_helper_imulq_EAX_T0</name><argument_list pos:start="883:40" pos:end="883:58">(<argument pos:start="883:41" pos:end="883:47"><expr pos:start="883:41" pos:end="883:47"><name pos:start="883:41" pos:end="883:47">cpu_env</name></expr></argument>, <argument pos:start="883:50" pos:end="883:57"><expr pos:start="883:50" pos:end="883:57"><name pos:start="883:50" pos:end="883:57"><name pos:start="883:50" pos:end="883:54">cpu_T</name><index pos:start="883:55" pos:end="883:57">[<expr pos:start="883:56" pos:end="883:56"><literal type="number" pos:start="883:56" pos:end="883:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="885:17" pos:end="885:38"><expr pos:start="885:17" pos:end="885:37"><name pos:start="885:17" pos:end="885:24"><name pos:start="885:17" pos:end="885:17">s</name><operator pos:start="885:18" pos:end="885:19">-&gt;</operator><name pos:start="885:20" pos:end="885:24">cc_op</name></name> <operator pos:start="885:26" pos:end="885:26">=</operator> <name pos:start="885:28" pos:end="885:37">CC_OP_MULQ</name></expr>;</expr_stmt>

                <break pos:start="887:17" pos:end="890:0">break;</break>

<cpp:endif pos:start="889:1" pos:end="889:6">#<cpp:directive pos:start="889:2" pos:end="889:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="893:13" pos:end="893:18">break;</break>

        <case pos:start="895:9" pos:end="895:15">case <expr pos:start="895:14" pos:end="895:14"><literal type="number" pos:start="895:14" pos:end="895:14">6</literal></expr>:</case> <comment type="block" pos:start="895:17" pos:end="895:25">/* div */</comment>

            <switch pos:start="897:13" pos:end="937:13">switch<condition pos:start="897:19" pos:end="897:22">(<expr pos:start="897:20" pos:end="897:21"><name pos:start="897:20" pos:end="897:21">ot</name></expr>)</condition> <block pos:start="897:24" pos:end="937:13">{<block_content pos:start="899:13" pos:end="936:0">

            <case pos:start="899:13" pos:end="899:25">case <expr pos:start="899:18" pos:end="899:24"><name pos:start="899:18" pos:end="899:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="901:17" pos:end="901:50"><expr pos:start="901:17" pos:end="901:49"><call pos:start="901:17" pos:end="901:49"><name pos:start="901:17" pos:end="901:26">gen_jmp_im</name><argument_list pos:start="901:27" pos:end="901:49">(<argument pos:start="901:28" pos:end="901:48"><expr pos:start="901:28" pos:end="901:48"><name pos:start="901:28" pos:end="901:35">pc_start</name> <operator pos:start="901:37" pos:end="901:37">-</operator> <name pos:start="901:39" pos:end="901:48"><name pos:start="901:39" pos:end="901:39">s</name><operator pos:start="901:40" pos:end="901:41">-&gt;</operator><name pos:start="901:42" pos:end="901:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="903:17" pos:end="903:54"><expr pos:start="903:17" pos:end="903:53"><call pos:start="903:17" pos:end="903:53"><name pos:start="903:17" pos:end="903:34">gen_helper_divb_AL</name><argument_list pos:start="903:35" pos:end="903:53">(<argument pos:start="903:36" pos:end="903:42"><expr pos:start="903:36" pos:end="903:42"><name pos:start="903:36" pos:end="903:42">cpu_env</name></expr></argument>, <argument pos:start="903:45" pos:end="903:52"><expr pos:start="903:45" pos:end="903:52"><name pos:start="903:45" pos:end="903:52"><name pos:start="903:45" pos:end="903:49">cpu_T</name><index pos:start="903:50" pos:end="903:52">[<expr pos:start="903:51" pos:end="903:51"><literal type="number" pos:start="903:51" pos:end="903:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="905:17" pos:end="905:22">break;</break>

            <case pos:start="907:13" pos:end="907:25">case <expr pos:start="907:18" pos:end="907:24"><name pos:start="907:18" pos:end="907:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="909:17" pos:end="909:50"><expr pos:start="909:17" pos:end="909:49"><call pos:start="909:17" pos:end="909:49"><name pos:start="909:17" pos:end="909:26">gen_jmp_im</name><argument_list pos:start="909:27" pos:end="909:49">(<argument pos:start="909:28" pos:end="909:48"><expr pos:start="909:28" pos:end="909:48"><name pos:start="909:28" pos:end="909:35">pc_start</name> <operator pos:start="909:37" pos:end="909:37">-</operator> <name pos:start="909:39" pos:end="909:48"><name pos:start="909:39" pos:end="909:39">s</name><operator pos:start="909:40" pos:end="909:41">-&gt;</operator><name pos:start="909:42" pos:end="909:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="911:17" pos:end="911:54"><expr pos:start="911:17" pos:end="911:53"><call pos:start="911:17" pos:end="911:53"><name pos:start="911:17" pos:end="911:34">gen_helper_divw_AX</name><argument_list pos:start="911:35" pos:end="911:53">(<argument pos:start="911:36" pos:end="911:42"><expr pos:start="911:36" pos:end="911:42"><name pos:start="911:36" pos:end="911:42">cpu_env</name></expr></argument>, <argument pos:start="911:45" pos:end="911:52"><expr pos:start="911:45" pos:end="911:52"><name pos:start="911:45" pos:end="911:52"><name pos:start="911:45" pos:end="911:49">cpu_T</name><index pos:start="911:50" pos:end="911:52">[<expr pos:start="911:51" pos:end="911:51"><literal type="number" pos:start="911:51" pos:end="911:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="913:17" pos:end="913:22">break;</break>

            <default pos:start="915:13" pos:end="915:20">default:</default>

            <case pos:start="917:13" pos:end="917:25">case <expr pos:start="917:18" pos:end="917:24"><name pos:start="917:18" pos:end="917:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="919:17" pos:end="919:50"><expr pos:start="919:17" pos:end="919:49"><call pos:start="919:17" pos:end="919:49"><name pos:start="919:17" pos:end="919:26">gen_jmp_im</name><argument_list pos:start="919:27" pos:end="919:49">(<argument pos:start="919:28" pos:end="919:48"><expr pos:start="919:28" pos:end="919:48"><name pos:start="919:28" pos:end="919:35">pc_start</name> <operator pos:start="919:37" pos:end="919:37">-</operator> <name pos:start="919:39" pos:end="919:48"><name pos:start="919:39" pos:end="919:39">s</name><operator pos:start="919:40" pos:end="919:41">-&gt;</operator><name pos:start="919:42" pos:end="919:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="921:17" pos:end="921:55"><expr pos:start="921:17" pos:end="921:54"><call pos:start="921:17" pos:end="921:54"><name pos:start="921:17" pos:end="921:35">gen_helper_divl_EAX</name><argument_list pos:start="921:36" pos:end="921:54">(<argument pos:start="921:37" pos:end="921:43"><expr pos:start="921:37" pos:end="921:43"><name pos:start="921:37" pos:end="921:43">cpu_env</name></expr></argument>, <argument pos:start="921:46" pos:end="921:53"><expr pos:start="921:46" pos:end="921:53"><name pos:start="921:46" pos:end="921:53"><name pos:start="921:46" pos:end="921:50">cpu_T</name><index pos:start="921:51" pos:end="921:53">[<expr pos:start="921:52" pos:end="921:52"><literal type="number" pos:start="921:52" pos:end="921:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="923:17" pos:end="926:0">break;</break>

<cpp:ifdef pos:start="925:1" pos:end="925:20">#<cpp:directive pos:start="925:2" pos:end="925:6">ifdef</cpp:directive> <name pos:start="925:8" pos:end="925:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="927:13" pos:end="927:25">case <expr pos:start="927:18" pos:end="927:24"><name pos:start="927:18" pos:end="927:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="929:17" pos:end="929:50"><expr pos:start="929:17" pos:end="929:49"><call pos:start="929:17" pos:end="929:49"><name pos:start="929:17" pos:end="929:26">gen_jmp_im</name><argument_list pos:start="929:27" pos:end="929:49">(<argument pos:start="929:28" pos:end="929:48"><expr pos:start="929:28" pos:end="929:48"><name pos:start="929:28" pos:end="929:35">pc_start</name> <operator pos:start="929:37" pos:end="929:37">-</operator> <name pos:start="929:39" pos:end="929:48"><name pos:start="929:39" pos:end="929:39">s</name><operator pos:start="929:40" pos:end="929:41">-&gt;</operator><name pos:start="929:42" pos:end="929:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="931:17" pos:end="931:55"><expr pos:start="931:17" pos:end="931:54"><call pos:start="931:17" pos:end="931:54"><name pos:start="931:17" pos:end="931:35">gen_helper_divq_EAX</name><argument_list pos:start="931:36" pos:end="931:54">(<argument pos:start="931:37" pos:end="931:43"><expr pos:start="931:37" pos:end="931:43"><name pos:start="931:37" pos:end="931:43">cpu_env</name></expr></argument>, <argument pos:start="931:46" pos:end="931:53"><expr pos:start="931:46" pos:end="931:53"><name pos:start="931:46" pos:end="931:53"><name pos:start="931:46" pos:end="931:50">cpu_T</name><index pos:start="931:51" pos:end="931:53">[<expr pos:start="931:52" pos:end="931:52"><literal type="number" pos:start="931:52" pos:end="931:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="933:17" pos:end="936:0">break;</break>

<cpp:endif pos:start="935:1" pos:end="935:6">#<cpp:directive pos:start="935:2" pos:end="935:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="939:13" pos:end="939:18">break;</break>

        <case pos:start="941:9" pos:end="941:15">case <expr pos:start="941:14" pos:end="941:14"><literal type="number" pos:start="941:14" pos:end="941:14">7</literal></expr>:</case> <comment type="block" pos:start="941:17" pos:end="941:26">/* idiv */</comment>

            <switch pos:start="943:13" pos:end="983:13">switch<condition pos:start="943:19" pos:end="943:22">(<expr pos:start="943:20" pos:end="943:21"><name pos:start="943:20" pos:end="943:21">ot</name></expr>)</condition> <block pos:start="943:24" pos:end="983:13">{<block_content pos:start="945:13" pos:end="982:0">

            <case pos:start="945:13" pos:end="945:25">case <expr pos:start="945:18" pos:end="945:24"><name pos:start="945:18" pos:end="945:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="947:17" pos:end="947:50"><expr pos:start="947:17" pos:end="947:49"><call pos:start="947:17" pos:end="947:49"><name pos:start="947:17" pos:end="947:26">gen_jmp_im</name><argument_list pos:start="947:27" pos:end="947:49">(<argument pos:start="947:28" pos:end="947:48"><expr pos:start="947:28" pos:end="947:48"><name pos:start="947:28" pos:end="947:35">pc_start</name> <operator pos:start="947:37" pos:end="947:37">-</operator> <name pos:start="947:39" pos:end="947:48"><name pos:start="947:39" pos:end="947:39">s</name><operator pos:start="947:40" pos:end="947:41">-&gt;</operator><name pos:start="947:42" pos:end="947:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="949:17" pos:end="949:55"><expr pos:start="949:17" pos:end="949:54"><call pos:start="949:17" pos:end="949:54"><name pos:start="949:17" pos:end="949:35">gen_helper_idivb_AL</name><argument_list pos:start="949:36" pos:end="949:54">(<argument pos:start="949:37" pos:end="949:43"><expr pos:start="949:37" pos:end="949:43"><name pos:start="949:37" pos:end="949:43">cpu_env</name></expr></argument>, <argument pos:start="949:46" pos:end="949:53"><expr pos:start="949:46" pos:end="949:53"><name pos:start="949:46" pos:end="949:53"><name pos:start="949:46" pos:end="949:50">cpu_T</name><index pos:start="949:51" pos:end="949:53">[<expr pos:start="949:52" pos:end="949:52"><literal type="number" pos:start="949:52" pos:end="949:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="951:17" pos:end="951:22">break;</break>

            <case pos:start="953:13" pos:end="953:25">case <expr pos:start="953:18" pos:end="953:24"><name pos:start="953:18" pos:end="953:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="955:17" pos:end="955:50"><expr pos:start="955:17" pos:end="955:49"><call pos:start="955:17" pos:end="955:49"><name pos:start="955:17" pos:end="955:26">gen_jmp_im</name><argument_list pos:start="955:27" pos:end="955:49">(<argument pos:start="955:28" pos:end="955:48"><expr pos:start="955:28" pos:end="955:48"><name pos:start="955:28" pos:end="955:35">pc_start</name> <operator pos:start="955:37" pos:end="955:37">-</operator> <name pos:start="955:39" pos:end="955:48"><name pos:start="955:39" pos:end="955:39">s</name><operator pos:start="955:40" pos:end="955:41">-&gt;</operator><name pos:start="955:42" pos:end="955:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="957:17" pos:end="957:55"><expr pos:start="957:17" pos:end="957:54"><call pos:start="957:17" pos:end="957:54"><name pos:start="957:17" pos:end="957:35">gen_helper_idivw_AX</name><argument_list pos:start="957:36" pos:end="957:54">(<argument pos:start="957:37" pos:end="957:43"><expr pos:start="957:37" pos:end="957:43"><name pos:start="957:37" pos:end="957:43">cpu_env</name></expr></argument>, <argument pos:start="957:46" pos:end="957:53"><expr pos:start="957:46" pos:end="957:53"><name pos:start="957:46" pos:end="957:53"><name pos:start="957:46" pos:end="957:50">cpu_T</name><index pos:start="957:51" pos:end="957:53">[<expr pos:start="957:52" pos:end="957:52"><literal type="number" pos:start="957:52" pos:end="957:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="959:17" pos:end="959:22">break;</break>

            <default pos:start="961:13" pos:end="961:20">default:</default>

            <case pos:start="963:13" pos:end="963:25">case <expr pos:start="963:18" pos:end="963:24"><name pos:start="963:18" pos:end="963:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="965:17" pos:end="965:50"><expr pos:start="965:17" pos:end="965:49"><call pos:start="965:17" pos:end="965:49"><name pos:start="965:17" pos:end="965:26">gen_jmp_im</name><argument_list pos:start="965:27" pos:end="965:49">(<argument pos:start="965:28" pos:end="965:48"><expr pos:start="965:28" pos:end="965:48"><name pos:start="965:28" pos:end="965:35">pc_start</name> <operator pos:start="965:37" pos:end="965:37">-</operator> <name pos:start="965:39" pos:end="965:48"><name pos:start="965:39" pos:end="965:39">s</name><operator pos:start="965:40" pos:end="965:41">-&gt;</operator><name pos:start="965:42" pos:end="965:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="967:17" pos:end="967:56"><expr pos:start="967:17" pos:end="967:55"><call pos:start="967:17" pos:end="967:55"><name pos:start="967:17" pos:end="967:36">gen_helper_idivl_EAX</name><argument_list pos:start="967:37" pos:end="967:55">(<argument pos:start="967:38" pos:end="967:44"><expr pos:start="967:38" pos:end="967:44"><name pos:start="967:38" pos:end="967:44">cpu_env</name></expr></argument>, <argument pos:start="967:47" pos:end="967:54"><expr pos:start="967:47" pos:end="967:54"><name pos:start="967:47" pos:end="967:54"><name pos:start="967:47" pos:end="967:51">cpu_T</name><index pos:start="967:52" pos:end="967:54">[<expr pos:start="967:53" pos:end="967:53"><literal type="number" pos:start="967:53" pos:end="967:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="969:17" pos:end="972:0">break;</break>

<cpp:ifdef pos:start="971:1" pos:end="971:20">#<cpp:directive pos:start="971:2" pos:end="971:6">ifdef</cpp:directive> <name pos:start="971:8" pos:end="971:20">TARGET_X86_64</name></cpp:ifdef>

            <case pos:start="973:13" pos:end="973:25">case <expr pos:start="973:18" pos:end="973:24"><name pos:start="973:18" pos:end="973:24">OT_QUAD</name></expr>:</case>

                <expr_stmt pos:start="975:17" pos:end="975:50"><expr pos:start="975:17" pos:end="975:49"><call pos:start="975:17" pos:end="975:49"><name pos:start="975:17" pos:end="975:26">gen_jmp_im</name><argument_list pos:start="975:27" pos:end="975:49">(<argument pos:start="975:28" pos:end="975:48"><expr pos:start="975:28" pos:end="975:48"><name pos:start="975:28" pos:end="975:35">pc_start</name> <operator pos:start="975:37" pos:end="975:37">-</operator> <name pos:start="975:39" pos:end="975:48"><name pos:start="975:39" pos:end="975:39">s</name><operator pos:start="975:40" pos:end="975:41">-&gt;</operator><name pos:start="975:42" pos:end="975:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="977:17" pos:end="977:56"><expr pos:start="977:17" pos:end="977:55"><call pos:start="977:17" pos:end="977:55"><name pos:start="977:17" pos:end="977:36">gen_helper_idivq_EAX</name><argument_list pos:start="977:37" pos:end="977:55">(<argument pos:start="977:38" pos:end="977:44"><expr pos:start="977:38" pos:end="977:44"><name pos:start="977:38" pos:end="977:44">cpu_env</name></expr></argument>, <argument pos:start="977:47" pos:end="977:54"><expr pos:start="977:47" pos:end="977:54"><name pos:start="977:47" pos:end="977:54"><name pos:start="977:47" pos:end="977:51">cpu_T</name><index pos:start="977:52" pos:end="977:54">[<expr pos:start="977:53" pos:end="977:53"><literal type="number" pos:start="977:53" pos:end="977:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="979:17" pos:end="982:0">break;</break>

<cpp:endif pos:start="981:1" pos:end="981:6">#<cpp:directive pos:start="981:2" pos:end="981:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></switch>

            <break pos:start="985:13" pos:end="985:18">break;</break>

        <default pos:start="987:9" pos:end="987:16">default:</default>

            <goto pos:start="989:13" pos:end="989:28">goto <name pos:start="989:18" pos:end="989:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="993:9" pos:end="993:14">break;</break>



    <case pos:start="997:5" pos:end="997:14">case <expr pos:start="997:10" pos:end="997:13"><literal type="number" pos:start="997:10" pos:end="997:13">0xfe</literal></expr>:</case> <comment type="block" pos:start="997:16" pos:end="997:25">/* GRP4 */</comment>

    <case pos:start="999:5" pos:end="999:14">case <expr pos:start="999:10" pos:end="999:13"><literal type="number" pos:start="999:10" pos:end="999:13">0xff</literal></expr>:</case> <comment type="block" pos:start="999:16" pos:end="999:25">/* GRP5 */</comment>

        <if_stmt pos:start="1001:9" pos:end="1007:33"><if pos:start="1001:9" pos:end="1003:25">if <condition pos:start="1001:12" pos:end="1001:25">(<expr pos:start="1001:13" pos:end="1001:24"><operator pos:start="1001:13" pos:end="1001:13">(</operator><name pos:start="1001:14" pos:end="1001:14">b</name> <operator pos:start="1001:16" pos:end="1001:16">&amp;</operator> <literal type="number" pos:start="1001:18" pos:end="1001:18">1</literal><operator pos:start="1001:19" pos:end="1001:19">)</operator> <operator pos:start="1001:21" pos:end="1001:22">==</operator> <literal type="number" pos:start="1001:24" pos:end="1001:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1003:13" pos:end="1003:25"><block_content pos:start="1003:13" pos:end="1003:25">

            <expr_stmt pos:start="1003:13" pos:end="1003:25"><expr pos:start="1003:13" pos:end="1003:24"><name pos:start="1003:13" pos:end="1003:14">ot</name> <operator pos:start="1003:16" pos:end="1003:16">=</operator> <name pos:start="1003:18" pos:end="1003:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1005:9" pos:end="1007:33">else<block type="pseudo" pos:start="1007:13" pos:end="1007:33"><block_content pos:start="1007:13" pos:end="1007:33">

            <expr_stmt pos:start="1007:13" pos:end="1007:33"><expr pos:start="1007:13" pos:end="1007:32"><name pos:start="1007:13" pos:end="1007:14">ot</name> <operator pos:start="1007:16" pos:end="1007:16">=</operator> <name pos:start="1007:18" pos:end="1007:22">dflag</name> <operator pos:start="1007:24" pos:end="1007:24">+</operator> <name pos:start="1007:26" pos:end="1007:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="1011:9" pos:end="1011:55"><expr pos:start="1011:9" pos:end="1011:54"><name pos:start="1011:9" pos:end="1011:13">modrm</name> <operator pos:start="1011:15" pos:end="1011:15">=</operator> <call pos:start="1011:17" pos:end="1011:54"><name pos:start="1011:17" pos:end="1011:29">cpu_ldub_code</name><argument_list pos:start="1011:30" pos:end="1011:54">(<argument pos:start="1011:31" pos:end="1011:44"><expr pos:start="1011:31" pos:end="1011:44"><name pos:start="1011:31" pos:end="1011:44">cpu_single_env</name></expr></argument>, <argument pos:start="1011:47" pos:end="1011:53"><expr pos:start="1011:47" pos:end="1011:53"><name pos:start="1011:47" pos:end="1011:51"><name pos:start="1011:47" pos:end="1011:47">s</name><operator pos:start="1011:48" pos:end="1011:49">-&gt;</operator><name pos:start="1011:50" pos:end="1011:51">pc</name></name><operator pos:start="1011:52" pos:end="1011:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1013:9" pos:end="1013:31"><expr pos:start="1013:9" pos:end="1013:30"><name pos:start="1013:9" pos:end="1013:11">mod</name> <operator pos:start="1013:13" pos:end="1013:13">=</operator> <operator pos:start="1013:15" pos:end="1013:15">(</operator><name pos:start="1013:16" pos:end="1013:20">modrm</name> <operator pos:start="1013:22" pos:end="1013:23">&gt;&gt;</operator> <literal type="number" pos:start="1013:25" pos:end="1013:25">6</literal><operator pos:start="1013:26" pos:end="1013:26">)</operator> <operator pos:start="1013:28" pos:end="1013:28">&amp;</operator> <literal type="number" pos:start="1013:30" pos:end="1013:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1015:9" pos:end="1015:36"><expr pos:start="1015:9" pos:end="1015:35"><name pos:start="1015:9" pos:end="1015:10">rm</name> <operator pos:start="1015:12" pos:end="1015:12">=</operator> <operator pos:start="1015:14" pos:end="1015:14">(</operator><name pos:start="1015:15" pos:end="1015:19">modrm</name> <operator pos:start="1015:21" pos:end="1015:21">&amp;</operator> <literal type="number" pos:start="1015:23" pos:end="1015:23">7</literal><operator pos:start="1015:24" pos:end="1015:24">)</operator> <operator pos:start="1015:26" pos:end="1015:26">|</operator> <call pos:start="1015:28" pos:end="1015:35"><name pos:start="1015:28" pos:end="1015:32">REX_B</name><argument_list pos:start="1015:33" pos:end="1015:35">(<argument pos:start="1015:34" pos:end="1015:34"><expr pos:start="1015:34" pos:end="1015:34"><name pos:start="1015:34" pos:end="1015:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1017:9" pos:end="1017:30"><expr pos:start="1017:9" pos:end="1017:29"><name pos:start="1017:9" pos:end="1017:10">op</name> <operator pos:start="1017:12" pos:end="1017:12">=</operator> <operator pos:start="1017:14" pos:end="1017:14">(</operator><name pos:start="1017:15" pos:end="1017:19">modrm</name> <operator pos:start="1017:21" pos:end="1017:22">&gt;&gt;</operator> <literal type="number" pos:start="1017:24" pos:end="1017:24">3</literal><operator pos:start="1017:25" pos:end="1017:25">)</operator> <operator pos:start="1017:27" pos:end="1017:27">&amp;</operator> <literal type="number" pos:start="1017:29" pos:end="1017:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1019:9" pos:end="1023:9"><if pos:start="1019:9" pos:end="1023:9">if <condition pos:start="1019:12" pos:end="1019:33">(<expr pos:start="1019:13" pos:end="1019:32"><name pos:start="1019:13" pos:end="1019:14">op</name> <operator pos:start="1019:16" pos:end="1019:17">&gt;=</operator> <literal type="number" pos:start="1019:19" pos:end="1019:19">2</literal> <operator pos:start="1019:21" pos:end="1019:22">&amp;&amp;</operator> <name pos:start="1019:24" pos:end="1019:24">b</name> <operator pos:start="1019:26" pos:end="1019:27">==</operator> <literal type="number" pos:start="1019:29" pos:end="1019:32">0xfe</literal></expr>)</condition> <block pos:start="1019:35" pos:end="1023:9">{<block_content pos:start="1021:13" pos:end="1021:28">

            <goto pos:start="1021:13" pos:end="1021:28">goto <name pos:start="1021:18" pos:end="1021:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1025:9" pos:end="1045:9"><if pos:start="1025:9" pos:end="1045:9">if <condition pos:start="1025:12" pos:end="1025:22">(<expr pos:start="1025:13" pos:end="1025:21"><call pos:start="1025:13" pos:end="1025:21"><name pos:start="1025:13" pos:end="1025:18">CODE64</name><argument_list pos:start="1025:19" pos:end="1025:21">(<argument pos:start="1025:20" pos:end="1025:20"><expr pos:start="1025:20" pos:end="1025:20"><name pos:start="1025:20" pos:end="1025:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1025:24" pos:end="1045:9">{<block_content pos:start="1027:13" pos:end="1043:13">

            <if_stmt pos:start="1027:13" pos:end="1043:13"><if pos:start="1027:13" pos:end="1033:13">if <condition pos:start="1027:16" pos:end="1027:35">(<expr pos:start="1027:17" pos:end="1027:34"><name pos:start="1027:17" pos:end="1027:18">op</name> <operator pos:start="1027:20" pos:end="1027:21">==</operator> <literal type="number" pos:start="1027:23" pos:end="1027:23">2</literal> <operator pos:start="1027:25" pos:end="1027:26">||</operator> <name pos:start="1027:28" pos:end="1027:29">op</name> <operator pos:start="1027:31" pos:end="1027:32">==</operator> <literal type="number" pos:start="1027:34" pos:end="1027:34">4</literal></expr>)</condition> <block pos:start="1027:37" pos:end="1033:13">{<block_content pos:start="1031:17" pos:end="1031:29">

                <comment type="block" pos:start="1029:17" pos:end="1029:54">/* operand size for jumps is 64 bit */</comment>

                <expr_stmt pos:start="1031:17" pos:end="1031:29"><expr pos:start="1031:17" pos:end="1031:28"><name pos:start="1031:17" pos:end="1031:18">ot</name> <operator pos:start="1031:20" pos:end="1031:20">=</operator> <name pos:start="1031:22" pos:end="1031:28">OT_QUAD</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1033:15" pos:end="1037:13">else if <condition pos:start="1033:23" pos:end="1033:42">(<expr pos:start="1033:24" pos:end="1033:41"><name pos:start="1033:24" pos:end="1033:25">op</name> <operator pos:start="1033:27" pos:end="1033:28">==</operator> <literal type="number" pos:start="1033:30" pos:end="1033:30">3</literal> <operator pos:start="1033:32" pos:end="1033:33">||</operator> <name pos:start="1033:35" pos:end="1033:36">op</name> <operator pos:start="1033:38" pos:end="1033:39">==</operator> <literal type="number" pos:start="1033:41" pos:end="1033:41">5</literal></expr>)</condition> <block pos:start="1033:44" pos:end="1037:13">{<block_content pos:start="1035:17" pos:end="1035:62">

                <expr_stmt pos:start="1035:17" pos:end="1035:62"><expr pos:start="1035:17" pos:end="1035:61"><name pos:start="1035:17" pos:end="1035:18">ot</name> <operator pos:start="1035:20" pos:end="1035:20">=</operator> <ternary pos:start="1035:22" pos:end="1035:61"><condition pos:start="1035:22" pos:end="1035:28"><expr pos:start="1035:22" pos:end="1035:26"><name pos:start="1035:22" pos:end="1035:26">dflag</name></expr> ?</condition><then pos:start="1035:30" pos:end="1035:51"> <expr pos:start="1035:30" pos:end="1035:51"><name pos:start="1035:30" pos:end="1035:36">OT_LONG</name> <operator pos:start="1035:38" pos:end="1035:38">+</operator> <operator pos:start="1035:40" pos:end="1035:40">(</operator><name pos:start="1035:41" pos:end="1035:45">rex_w</name> <operator pos:start="1035:47" pos:end="1035:48">==</operator> <literal type="number" pos:start="1035:50" pos:end="1035:50">1</literal><operator pos:start="1035:51" pos:end="1035:51">)</operator></expr> </then><else pos:start="1035:53" pos:end="1035:61">: <expr pos:start="1035:55" pos:end="1035:61"><name pos:start="1035:55" pos:end="1035:61">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1037:15" pos:end="1043:13">else if <condition pos:start="1037:23" pos:end="1037:31">(<expr pos:start="1037:24" pos:end="1037:30"><name pos:start="1037:24" pos:end="1037:25">op</name> <operator pos:start="1037:27" pos:end="1037:28">==</operator> <literal type="number" pos:start="1037:30" pos:end="1037:30">6</literal></expr>)</condition> <block pos:start="1037:33" pos:end="1043:13">{<block_content pos:start="1041:17" pos:end="1041:47">

                <comment type="block" pos:start="1039:17" pos:end="1039:49">/* default push size is 64 bit */</comment>

                <expr_stmt pos:start="1041:17" pos:end="1041:47"><expr pos:start="1041:17" pos:end="1041:46"><name pos:start="1041:17" pos:end="1041:18">ot</name> <operator pos:start="1041:20" pos:end="1041:20">=</operator> <ternary pos:start="1041:22" pos:end="1041:46"><condition pos:start="1041:22" pos:end="1041:28"><expr pos:start="1041:22" pos:end="1041:26"><name pos:start="1041:22" pos:end="1041:26">dflag</name></expr> ?</condition><then pos:start="1041:30" pos:end="1041:36"> <expr pos:start="1041:30" pos:end="1041:36"><name pos:start="1041:30" pos:end="1041:36">OT_QUAD</name></expr> </then><else pos:start="1041:38" pos:end="1041:46">: <expr pos:start="1041:40" pos:end="1041:46"><name pos:start="1041:40" pos:end="1041:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1047:9" pos:end="1059:9"><if pos:start="1047:9" pos:end="1055:9">if <condition pos:start="1047:12" pos:end="1047:21">(<expr pos:start="1047:13" pos:end="1047:20"><name pos:start="1047:13" pos:end="1047:15">mod</name> <operator pos:start="1047:17" pos:end="1047:18">!=</operator> <literal type="number" pos:start="1047:20" pos:end="1047:20">3</literal></expr>)</condition> <block pos:start="1047:23" pos:end="1055:9">{<block_content pos:start="1049:13" pos:end="1053:51">

            <expr_stmt pos:start="1049:13" pos:end="1049:61"><expr pos:start="1049:13" pos:end="1049:60"><call pos:start="1049:13" pos:end="1049:60"><name pos:start="1049:13" pos:end="1049:25">gen_lea_modrm</name><argument_list pos:start="1049:26" pos:end="1049:60">(<argument pos:start="1049:27" pos:end="1049:27"><expr pos:start="1049:27" pos:end="1049:27"><name pos:start="1049:27" pos:end="1049:27">s</name></expr></argument>, <argument pos:start="1049:30" pos:end="1049:34"><expr pos:start="1049:30" pos:end="1049:34"><name pos:start="1049:30" pos:end="1049:34">modrm</name></expr></argument>, <argument pos:start="1049:37" pos:end="1049:45"><expr pos:start="1049:37" pos:end="1049:45"><operator pos:start="1049:37" pos:end="1049:37">&amp;</operator><name pos:start="1049:38" pos:end="1049:45">reg_addr</name></expr></argument>, <argument pos:start="1049:48" pos:end="1049:59"><expr pos:start="1049:48" pos:end="1049:59"><operator pos:start="1049:48" pos:end="1049:48">&amp;</operator><name pos:start="1049:49" pos:end="1049:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1051:13" pos:end="1053:51"><if pos:start="1051:13" pos:end="1053:51">if <condition pos:start="1051:16" pos:end="1051:46">(<expr pos:start="1051:17" pos:end="1051:45"><name pos:start="1051:17" pos:end="1051:18">op</name> <operator pos:start="1051:20" pos:end="1051:21">&gt;=</operator> <literal type="number" pos:start="1051:23" pos:end="1051:23">2</literal> <operator pos:start="1051:25" pos:end="1051:26">&amp;&amp;</operator> <name pos:start="1051:28" pos:end="1051:29">op</name> <operator pos:start="1051:31" pos:end="1051:32">!=</operator> <literal type="number" pos:start="1051:34" pos:end="1051:34">3</literal> <operator pos:start="1051:36" pos:end="1051:37">&amp;&amp;</operator> <name pos:start="1051:39" pos:end="1051:40">op</name> <operator pos:start="1051:42" pos:end="1051:43">!=</operator> <literal type="number" pos:start="1051:45" pos:end="1051:45">5</literal></expr>)</condition><block type="pseudo" pos:start="1053:17" pos:end="1053:51"><block_content pos:start="1053:17" pos:end="1053:51">

                <expr_stmt pos:start="1053:17" pos:end="1053:51"><expr pos:start="1053:17" pos:end="1053:50"><call pos:start="1053:17" pos:end="1053:50"><name pos:start="1053:17" pos:end="1053:31">gen_op_ld_T0_A0</name><argument_list pos:start="1053:32" pos:end="1053:50">(<argument pos:start="1053:33" pos:end="1053:49"><expr pos:start="1053:33" pos:end="1053:49"><name pos:start="1053:33" pos:end="1053:34">ot</name> <operator pos:start="1053:36" pos:end="1053:36">+</operator> <name pos:start="1053:38" pos:end="1053:49"><name pos:start="1053:38" pos:end="1053:38">s</name><operator pos:start="1053:39" pos:end="1053:40">-&gt;</operator><name pos:start="1053:41" pos:end="1053:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1055:11" pos:end="1059:9">else <block pos:start="1055:16" pos:end="1059:9">{<block_content pos:start="1057:13" pos:end="1057:41">

            <expr_stmt pos:start="1057:13" pos:end="1057:41"><expr pos:start="1057:13" pos:end="1057:40"><call pos:start="1057:13" pos:end="1057:40"><name pos:start="1057:13" pos:end="1057:29">gen_op_mov_TN_reg</name><argument_list pos:start="1057:30" pos:end="1057:40">(<argument pos:start="1057:31" pos:end="1057:32"><expr pos:start="1057:31" pos:end="1057:32"><name pos:start="1057:31" pos:end="1057:32">ot</name></expr></argument>, <argument pos:start="1057:35" pos:end="1057:35"><expr pos:start="1057:35" pos:end="1057:35"><literal type="number" pos:start="1057:35" pos:end="1057:35">0</literal></expr></argument>, <argument pos:start="1057:38" pos:end="1057:39"><expr pos:start="1057:38" pos:end="1057:39"><name pos:start="1057:38" pos:end="1057:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="1063:9" pos:end="1215:9">switch<condition pos:start="1063:15" pos:end="1063:18">(<expr pos:start="1063:16" pos:end="1063:17"><name pos:start="1063:16" pos:end="1063:17">op</name></expr>)</condition> <block pos:start="1063:20" pos:end="1215:9">{<block_content pos:start="1065:9" pos:end="1213:28">

        <case pos:start="1065:9" pos:end="1065:15">case <expr pos:start="1065:14" pos:end="1065:14"><literal type="number" pos:start="1065:14" pos:end="1065:14">0</literal></expr>:</case> <comment type="block" pos:start="1065:17" pos:end="1065:28">/* inc Ev */</comment>

            <if_stmt pos:start="1067:13" pos:end="1073:27"><if pos:start="1067:13" pos:end="1069:32">if <condition pos:start="1067:16" pos:end="1067:25">(<expr pos:start="1067:17" pos:end="1067:24"><name pos:start="1067:17" pos:end="1067:19">mod</name> <operator pos:start="1067:21" pos:end="1067:22">!=</operator> <literal type="number" pos:start="1067:24" pos:end="1067:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1069:17" pos:end="1069:32"><block_content pos:start="1069:17" pos:end="1069:32">

                <expr_stmt pos:start="1069:17" pos:end="1069:32"><expr pos:start="1069:17" pos:end="1069:31"><name pos:start="1069:17" pos:end="1069:21">opreg</name> <operator pos:start="1069:23" pos:end="1069:23">=</operator> <name pos:start="1069:25" pos:end="1069:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1071:13" pos:end="1073:27">else<block type="pseudo" pos:start="1073:17" pos:end="1073:27"><block_content pos:start="1073:17" pos:end="1073:27">

                <expr_stmt pos:start="1073:17" pos:end="1073:27"><expr pos:start="1073:17" pos:end="1073:26"><name pos:start="1073:17" pos:end="1073:21">opreg</name> <operator pos:start="1073:23" pos:end="1073:23">=</operator> <name pos:start="1073:25" pos:end="1073:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1075:13" pos:end="1075:37"><expr pos:start="1075:13" pos:end="1075:36"><call pos:start="1075:13" pos:end="1075:36"><name pos:start="1075:13" pos:end="1075:19">gen_inc</name><argument_list pos:start="1075:20" pos:end="1075:36">(<argument pos:start="1075:21" pos:end="1075:21"><expr pos:start="1075:21" pos:end="1075:21"><name pos:start="1075:21" pos:end="1075:21">s</name></expr></argument>, <argument pos:start="1075:24" pos:end="1075:25"><expr pos:start="1075:24" pos:end="1075:25"><name pos:start="1075:24" pos:end="1075:25">ot</name></expr></argument>, <argument pos:start="1075:28" pos:end="1075:32"><expr pos:start="1075:28" pos:end="1075:32"><name pos:start="1075:28" pos:end="1075:32">opreg</name></expr></argument>, <argument pos:start="1075:35" pos:end="1075:35"><expr pos:start="1075:35" pos:end="1075:35"><literal type="number" pos:start="1075:35" pos:end="1075:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1077:13" pos:end="1077:18">break;</break>

        <case pos:start="1079:9" pos:end="1079:15">case <expr pos:start="1079:14" pos:end="1079:14"><literal type="number" pos:start="1079:14" pos:end="1079:14">1</literal></expr>:</case> <comment type="block" pos:start="1079:17" pos:end="1079:28">/* dec Ev */</comment>

            <if_stmt pos:start="1081:13" pos:end="1087:27"><if pos:start="1081:13" pos:end="1083:32">if <condition pos:start="1081:16" pos:end="1081:25">(<expr pos:start="1081:17" pos:end="1081:24"><name pos:start="1081:17" pos:end="1081:19">mod</name> <operator pos:start="1081:21" pos:end="1081:22">!=</operator> <literal type="number" pos:start="1081:24" pos:end="1081:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1083:17" pos:end="1083:32"><block_content pos:start="1083:17" pos:end="1083:32">

                <expr_stmt pos:start="1083:17" pos:end="1083:32"><expr pos:start="1083:17" pos:end="1083:31"><name pos:start="1083:17" pos:end="1083:21">opreg</name> <operator pos:start="1083:23" pos:end="1083:23">=</operator> <name pos:start="1083:25" pos:end="1083:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1085:13" pos:end="1087:27">else<block type="pseudo" pos:start="1087:17" pos:end="1087:27"><block_content pos:start="1087:17" pos:end="1087:27">

                <expr_stmt pos:start="1087:17" pos:end="1087:27"><expr pos:start="1087:17" pos:end="1087:26"><name pos:start="1087:17" pos:end="1087:21">opreg</name> <operator pos:start="1087:23" pos:end="1087:23">=</operator> <name pos:start="1087:25" pos:end="1087:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1089:13" pos:end="1089:38"><expr pos:start="1089:13" pos:end="1089:37"><call pos:start="1089:13" pos:end="1089:37"><name pos:start="1089:13" pos:end="1089:19">gen_inc</name><argument_list pos:start="1089:20" pos:end="1089:37">(<argument pos:start="1089:21" pos:end="1089:21"><expr pos:start="1089:21" pos:end="1089:21"><name pos:start="1089:21" pos:end="1089:21">s</name></expr></argument>, <argument pos:start="1089:24" pos:end="1089:25"><expr pos:start="1089:24" pos:end="1089:25"><name pos:start="1089:24" pos:end="1089:25">ot</name></expr></argument>, <argument pos:start="1089:28" pos:end="1089:32"><expr pos:start="1089:28" pos:end="1089:32"><name pos:start="1089:28" pos:end="1089:32">opreg</name></expr></argument>, <argument pos:start="1089:35" pos:end="1089:36"><expr pos:start="1089:35" pos:end="1089:36"><operator pos:start="1089:35" pos:end="1089:35">-</operator><literal type="number" pos:start="1089:36" pos:end="1089:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1091:13" pos:end="1091:18">break;</break>

        <case pos:start="1093:9" pos:end="1093:15">case <expr pos:start="1093:14" pos:end="1093:14"><literal type="number" pos:start="1093:14" pos:end="1093:14">2</literal></expr>:</case> <comment type="block" pos:start="1093:17" pos:end="1093:29">/* call Ev */</comment>

            <comment type="block" pos:start="1095:13" pos:end="1095:65">/* XXX: optimize if memory (no 'and' is necessary) */</comment>

            <if_stmt pos:start="1097:13" pos:end="1099:38"><if pos:start="1097:13" pos:end="1099:38">if <condition pos:start="1097:16" pos:end="1097:30">(<expr pos:start="1097:17" pos:end="1097:29"><name pos:start="1097:17" pos:end="1097:24"><name pos:start="1097:17" pos:end="1097:17">s</name><operator pos:start="1097:18" pos:end="1097:19">-&gt;</operator><name pos:start="1097:20" pos:end="1097:24">dflag</name></name> <operator pos:start="1097:26" pos:end="1097:27">==</operator> <literal type="number" pos:start="1097:29" pos:end="1097:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1099:17" pos:end="1099:38"><block_content pos:start="1099:17" pos:end="1099:38">

                <expr_stmt pos:start="1099:17" pos:end="1099:38"><expr pos:start="1099:17" pos:end="1099:37"><call pos:start="1099:17" pos:end="1099:37"><name pos:start="1099:17" pos:end="1099:35">gen_op_andl_T0_ffff</name><argument_list pos:start="1099:36" pos:end="1099:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1101:13" pos:end="1101:42"><expr pos:start="1101:13" pos:end="1101:41"><name pos:start="1101:13" pos:end="1101:20">next_eip</name> <operator pos:start="1101:22" pos:end="1101:22">=</operator> <name pos:start="1101:24" pos:end="1101:28"><name pos:start="1101:24" pos:end="1101:24">s</name><operator pos:start="1101:25" pos:end="1101:26">-&gt;</operator><name pos:start="1101:27" pos:end="1101:28">pc</name></name> <operator pos:start="1101:30" pos:end="1101:30">-</operator> <name pos:start="1101:32" pos:end="1101:41"><name pos:start="1101:32" pos:end="1101:32">s</name><operator pos:start="1101:33" pos:end="1101:34">-&gt;</operator><name pos:start="1101:35" pos:end="1101:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1103:13" pos:end="1103:38"><expr pos:start="1103:13" pos:end="1103:37"><call pos:start="1103:13" pos:end="1103:37"><name pos:start="1103:13" pos:end="1103:27">gen_movtl_T1_im</name><argument_list pos:start="1103:28" pos:end="1103:37">(<argument pos:start="1103:29" pos:end="1103:36"><expr pos:start="1103:29" pos:end="1103:36"><name pos:start="1103:29" pos:end="1103:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1105:13" pos:end="1105:27"><expr pos:start="1105:13" pos:end="1105:26"><call pos:start="1105:13" pos:end="1105:26"><name pos:start="1105:13" pos:end="1105:23">gen_push_T1</name><argument_list pos:start="1105:24" pos:end="1105:26">(<argument pos:start="1105:25" pos:end="1105:25"><expr pos:start="1105:25" pos:end="1105:25"><name pos:start="1105:25" pos:end="1105:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1107:13" pos:end="1107:28"><expr pos:start="1107:13" pos:end="1107:27"><call pos:start="1107:13" pos:end="1107:27"><name pos:start="1107:13" pos:end="1107:25">gen_op_jmp_T0</name><argument_list pos:start="1107:26" pos:end="1107:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1109:13" pos:end="1109:23"><expr pos:start="1109:13" pos:end="1109:22"><call pos:start="1109:13" pos:end="1109:22"><name pos:start="1109:13" pos:end="1109:19">gen_eob</name><argument_list pos:start="1109:20" pos:end="1109:22">(<argument pos:start="1109:21" pos:end="1109:21"><expr pos:start="1109:21" pos:end="1109:21"><name pos:start="1109:21" pos:end="1109:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1111:13" pos:end="1111:18">break;</break>

        <case pos:start="1113:9" pos:end="1113:15">case <expr pos:start="1113:14" pos:end="1113:14"><literal type="number" pos:start="1113:14" pos:end="1113:14">3</literal></expr>:</case> <comment type="block" pos:start="1113:17" pos:end="1113:30">/* lcall Ev */</comment>

            <expr_stmt pos:start="1115:13" pos:end="1115:47"><expr pos:start="1115:13" pos:end="1115:46"><call pos:start="1115:13" pos:end="1115:46"><name pos:start="1115:13" pos:end="1115:27">gen_op_ld_T1_A0</name><argument_list pos:start="1115:28" pos:end="1115:46">(<argument pos:start="1115:29" pos:end="1115:45"><expr pos:start="1115:29" pos:end="1115:45"><name pos:start="1115:29" pos:end="1115:30">ot</name> <operator pos:start="1115:32" pos:end="1115:32">+</operator> <name pos:start="1115:34" pos:end="1115:45"><name pos:start="1115:34" pos:end="1115:34">s</name><operator pos:start="1115:35" pos:end="1115:36">-&gt;</operator><name pos:start="1115:37" pos:end="1115:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1117:13" pos:end="1117:54"><expr pos:start="1117:13" pos:end="1117:53"><call pos:start="1117:13" pos:end="1117:53"><name pos:start="1117:13" pos:end="1117:25">gen_add_A0_im</name><argument_list pos:start="1117:26" pos:end="1117:53">(<argument pos:start="1117:27" pos:end="1117:27"><expr pos:start="1117:27" pos:end="1117:27"><name pos:start="1117:27" pos:end="1117:27">s</name></expr></argument>, <argument pos:start="1117:30" pos:end="1117:52"><expr pos:start="1117:30" pos:end="1117:52"><literal type="number" pos:start="1117:30" pos:end="1117:30">1</literal> <operator pos:start="1117:32" pos:end="1117:33">&lt;&lt;</operator> <operator pos:start="1117:35" pos:end="1117:35">(</operator><name pos:start="1117:36" pos:end="1117:37">ot</name> <operator pos:start="1117:39" pos:end="1117:39">-</operator> <name pos:start="1117:41" pos:end="1117:47">OT_WORD</name> <operator pos:start="1117:49" pos:end="1117:49">+</operator> <literal type="number" pos:start="1117:51" pos:end="1117:51">1</literal><operator pos:start="1117:52" pos:end="1117:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1119:13" pos:end="1119:53"><expr pos:start="1119:13" pos:end="1119:52"><call pos:start="1119:13" pos:end="1119:52"><name pos:start="1119:13" pos:end="1119:28">gen_op_ldu_T0_A0</name><argument_list pos:start="1119:29" pos:end="1119:52">(<argument pos:start="1119:30" pos:end="1119:51"><expr pos:start="1119:30" pos:end="1119:51"><name pos:start="1119:30" pos:end="1119:36">OT_WORD</name> <operator pos:start="1119:38" pos:end="1119:38">+</operator> <name pos:start="1119:40" pos:end="1119:51"><name pos:start="1119:40" pos:end="1119:40">s</name><operator pos:start="1119:41" pos:end="1119:42">-&gt;</operator><name pos:start="1119:43" pos:end="1119:51">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="1121:9" pos:end="1121:17"><name pos:start="1121:9" pos:end="1121:16">do_lcall</name>:</label>

            <if_stmt pos:start="1123:13" pos:end="1149:13"><if pos:start="1123:13" pos:end="1139:13">if <condition pos:start="1123:16" pos:end="1123:34">(<expr pos:start="1123:17" pos:end="1123:33"><name pos:start="1123:17" pos:end="1123:21"><name pos:start="1123:17" pos:end="1123:17">s</name><operator pos:start="1123:18" pos:end="1123:19">-&gt;</operator><name pos:start="1123:20" pos:end="1123:21">pe</name></name> <operator pos:start="1123:23" pos:end="1123:24">&amp;&amp;</operator> <operator pos:start="1123:26" pos:end="1123:26">!</operator><name pos:start="1123:27" pos:end="1123:33"><name pos:start="1123:27" pos:end="1123:27">s</name><operator pos:start="1123:28" pos:end="1123:29">-&gt;</operator><name pos:start="1123:30" pos:end="1123:33">vm86</name></name></expr>)</condition> <block pos:start="1123:36" pos:end="1139:13">{<block_content pos:start="1125:17" pos:end="1137:76">

                <if_stmt pos:start="1125:17" pos:end="1127:47"><if pos:start="1125:17" pos:end="1127:47">if <condition pos:start="1125:20" pos:end="1125:46">(<expr pos:start="1125:21" pos:end="1125:45"><name pos:start="1125:21" pos:end="1125:28"><name pos:start="1125:21" pos:end="1125:21">s</name><operator pos:start="1125:22" pos:end="1125:23">-&gt;</operator><name pos:start="1125:24" pos:end="1125:28">cc_op</name></name> <operator pos:start="1125:30" pos:end="1125:31">!=</operator> <name pos:start="1125:33" pos:end="1125:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1127:21" pos:end="1127:47"><block_content pos:start="1127:21" pos:end="1127:47">

                    <expr_stmt pos:start="1127:21" pos:end="1127:47"><expr pos:start="1127:21" pos:end="1127:46"><call pos:start="1127:21" pos:end="1127:46"><name pos:start="1127:21" pos:end="1127:36">gen_op_set_cc_op</name><argument_list pos:start="1127:37" pos:end="1127:46">(<argument pos:start="1127:38" pos:end="1127:45"><expr pos:start="1127:38" pos:end="1127:45"><name pos:start="1127:38" pos:end="1127:45"><name pos:start="1127:38" pos:end="1127:38">s</name><operator pos:start="1127:39" pos:end="1127:40">-&gt;</operator><name pos:start="1127:41" pos:end="1127:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1129:17" pos:end="1129:50"><expr pos:start="1129:17" pos:end="1129:49"><call pos:start="1129:17" pos:end="1129:49"><name pos:start="1129:17" pos:end="1129:26">gen_jmp_im</name><argument_list pos:start="1129:27" pos:end="1129:49">(<argument pos:start="1129:28" pos:end="1129:48"><expr pos:start="1129:28" pos:end="1129:48"><name pos:start="1129:28" pos:end="1129:35">pc_start</name> <operator pos:start="1129:37" pos:end="1129:37">-</operator> <name pos:start="1129:39" pos:end="1129:48"><name pos:start="1129:39" pos:end="1129:39">s</name><operator pos:start="1129:40" pos:end="1129:41">-&gt;</operator><name pos:start="1129:42" pos:end="1129:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1131:17" pos:end="1131:61"><expr pos:start="1131:17" pos:end="1131:60"><call pos:start="1131:17" pos:end="1131:60"><name pos:start="1131:17" pos:end="1131:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1131:37" pos:end="1131:60">(<argument pos:start="1131:38" pos:end="1131:49"><expr pos:start="1131:38" pos:end="1131:49"><name pos:start="1131:38" pos:end="1131:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1131:52" pos:end="1131:59"><expr pos:start="1131:52" pos:end="1131:59"><name pos:start="1131:52" pos:end="1131:59"><name pos:start="1131:52" pos:end="1131:56">cpu_T</name><index pos:start="1131:57" pos:end="1131:59">[<expr pos:start="1131:58" pos:end="1131:58"><literal type="number" pos:start="1131:58" pos:end="1131:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1133:17" pos:end="1137:76"><expr pos:start="1133:17" pos:end="1137:75"><call pos:start="1133:17" pos:end="1137:75"><name pos:start="1133:17" pos:end="1133:42">gen_helper_lcall_protected</name><argument_list pos:start="1133:43" pos:end="1137:75">(<argument pos:start="1133:44" pos:end="1133:50"><expr pos:start="1133:44" pos:end="1133:50"><name pos:start="1133:44" pos:end="1133:50">cpu_env</name></expr></argument>, <argument pos:start="1133:53" pos:end="1133:64"><expr pos:start="1133:53" pos:end="1133:64"><name pos:start="1133:53" pos:end="1133:64">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1133:67" pos:end="1133:74"><expr pos:start="1133:67" pos:end="1133:74"><name pos:start="1133:67" pos:end="1133:74"><name pos:start="1133:67" pos:end="1133:71">cpu_T</name><index pos:start="1133:72" pos:end="1133:74">[<expr pos:start="1133:73" pos:end="1133:73"><literal type="number" pos:start="1133:73" pos:end="1133:73">1</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="1135:44" pos:end="1135:63"><expr pos:start="1135:44" pos:end="1135:63"><call pos:start="1135:44" pos:end="1135:63"><name pos:start="1135:44" pos:end="1135:56">tcg_const_i32</name><argument_list pos:start="1135:57" pos:end="1135:63">(<argument pos:start="1135:58" pos:end="1135:62"><expr pos:start="1135:58" pos:end="1135:62"><name pos:start="1135:58" pos:end="1135:62">dflag</name></expr></argument>)</argument_list></call></expr></argument>,

                                           <argument pos:start="1137:44" pos:end="1137:74"><expr pos:start="1137:44" pos:end="1137:74"><call pos:start="1137:44" pos:end="1137:74"><name pos:start="1137:44" pos:end="1137:56">tcg_const_i32</name><argument_list pos:start="1137:57" pos:end="1137:74">(<argument pos:start="1137:58" pos:end="1137:73"><expr pos:start="1137:58" pos:end="1137:73"><name pos:start="1137:58" pos:end="1137:62"><name pos:start="1137:58" pos:end="1137:58">s</name><operator pos:start="1137:59" pos:end="1137:60">-&gt;</operator><name pos:start="1137:61" pos:end="1137:62">pc</name></name> <operator pos:start="1137:64" pos:end="1137:64">-</operator> <name pos:start="1137:66" pos:end="1137:73">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1139:15" pos:end="1149:13">else <block pos:start="1139:20" pos:end="1149:13">{<block_content pos:start="1141:17" pos:end="1147:73">

                <expr_stmt pos:start="1141:17" pos:end="1141:61"><expr pos:start="1141:17" pos:end="1141:60"><call pos:start="1141:17" pos:end="1141:60"><name pos:start="1141:17" pos:end="1141:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1141:37" pos:end="1141:60">(<argument pos:start="1141:38" pos:end="1141:49"><expr pos:start="1141:38" pos:end="1141:49"><name pos:start="1141:38" pos:end="1141:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1141:52" pos:end="1141:59"><expr pos:start="1141:52" pos:end="1141:59"><name pos:start="1141:52" pos:end="1141:59"><name pos:start="1141:52" pos:end="1141:56">cpu_T</name><index pos:start="1141:57" pos:end="1141:59">[<expr pos:start="1141:58" pos:end="1141:58"><literal type="number" pos:start="1141:58" pos:end="1141:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1143:17" pos:end="1147:73"><expr pos:start="1143:17" pos:end="1147:72"><call pos:start="1143:17" pos:end="1147:72"><name pos:start="1143:17" pos:end="1143:37">gen_helper_lcall_real</name><argument_list pos:start="1143:38" pos:end="1147:72">(<argument pos:start="1143:39" pos:end="1143:45"><expr pos:start="1143:39" pos:end="1143:45"><name pos:start="1143:39" pos:end="1143:45">cpu_env</name></expr></argument>, <argument pos:start="1143:48" pos:end="1143:59"><expr pos:start="1143:48" pos:end="1143:59"><name pos:start="1143:48" pos:end="1143:59">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1143:62" pos:end="1143:69"><expr pos:start="1143:62" pos:end="1143:69"><name pos:start="1143:62" pos:end="1143:69"><name pos:start="1143:62" pos:end="1143:66">cpu_T</name><index pos:start="1143:67" pos:end="1143:69">[<expr pos:start="1143:68" pos:end="1143:68"><literal type="number" pos:start="1143:68" pos:end="1143:68">1</literal></expr>]</index></name></expr></argument>,

                                      <argument pos:start="1145:39" pos:end="1145:58"><expr pos:start="1145:39" pos:end="1145:58"><call pos:start="1145:39" pos:end="1145:58"><name pos:start="1145:39" pos:end="1145:51">tcg_const_i32</name><argument_list pos:start="1145:52" pos:end="1145:58">(<argument pos:start="1145:53" pos:end="1145:57"><expr pos:start="1145:53" pos:end="1145:57"><name pos:start="1145:53" pos:end="1145:57">dflag</name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="1147:39" pos:end="1147:71"><expr pos:start="1147:39" pos:end="1147:71"><call pos:start="1147:39" pos:end="1147:71"><name pos:start="1147:39" pos:end="1147:51">tcg_const_i32</name><argument_list pos:start="1147:52" pos:end="1147:71">(<argument pos:start="1147:53" pos:end="1147:70"><expr pos:start="1147:53" pos:end="1147:70"><name pos:start="1147:53" pos:end="1147:57"><name pos:start="1147:53" pos:end="1147:53">s</name><operator pos:start="1147:54" pos:end="1147:55">-&gt;</operator><name pos:start="1147:56" pos:end="1147:57">pc</name></name> <operator pos:start="1147:59" pos:end="1147:59">-</operator> <name pos:start="1147:61" pos:end="1147:70"><name pos:start="1147:61" pos:end="1147:61">s</name><operator pos:start="1147:62" pos:end="1147:63">-&gt;</operator><name pos:start="1147:64" pos:end="1147:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1151:13" pos:end="1151:23"><expr pos:start="1151:13" pos:end="1151:22"><call pos:start="1151:13" pos:end="1151:22"><name pos:start="1151:13" pos:end="1151:19">gen_eob</name><argument_list pos:start="1151:20" pos:end="1151:22">(<argument pos:start="1151:21" pos:end="1151:21"><expr pos:start="1151:21" pos:end="1151:21"><name pos:start="1151:21" pos:end="1151:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1153:13" pos:end="1153:18">break;</break>

        <case pos:start="1155:9" pos:end="1155:15">case <expr pos:start="1155:14" pos:end="1155:14"><literal type="number" pos:start="1155:14" pos:end="1155:14">4</literal></expr>:</case> <comment type="block" pos:start="1155:17" pos:end="1155:28">/* jmp Ev */</comment>

            <if_stmt pos:start="1157:13" pos:end="1159:38"><if pos:start="1157:13" pos:end="1159:38">if <condition pos:start="1157:16" pos:end="1157:30">(<expr pos:start="1157:17" pos:end="1157:29"><name pos:start="1157:17" pos:end="1157:24"><name pos:start="1157:17" pos:end="1157:17">s</name><operator pos:start="1157:18" pos:end="1157:19">-&gt;</operator><name pos:start="1157:20" pos:end="1157:24">dflag</name></name> <operator pos:start="1157:26" pos:end="1157:27">==</operator> <literal type="number" pos:start="1157:29" pos:end="1157:29">0</literal></expr>)</condition><block type="pseudo" pos:start="1159:17" pos:end="1159:38"><block_content pos:start="1159:17" pos:end="1159:38">

                <expr_stmt pos:start="1159:17" pos:end="1159:38"><expr pos:start="1159:17" pos:end="1159:37"><call pos:start="1159:17" pos:end="1159:37"><name pos:start="1159:17" pos:end="1159:35">gen_op_andl_T0_ffff</name><argument_list pos:start="1159:36" pos:end="1159:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1161:13" pos:end="1161:28"><expr pos:start="1161:13" pos:end="1161:27"><call pos:start="1161:13" pos:end="1161:27"><name pos:start="1161:13" pos:end="1161:25">gen_op_jmp_T0</name><argument_list pos:start="1161:26" pos:end="1161:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1163:13" pos:end="1163:23"><expr pos:start="1163:13" pos:end="1163:22"><call pos:start="1163:13" pos:end="1163:22"><name pos:start="1163:13" pos:end="1163:19">gen_eob</name><argument_list pos:start="1163:20" pos:end="1163:22">(<argument pos:start="1163:21" pos:end="1163:21"><expr pos:start="1163:21" pos:end="1163:21"><name pos:start="1163:21" pos:end="1163:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1165:13" pos:end="1165:18">break;</break>

        <case pos:start="1167:9" pos:end="1167:15">case <expr pos:start="1167:14" pos:end="1167:14"><literal type="number" pos:start="1167:14" pos:end="1167:14">5</literal></expr>:</case> <comment type="block" pos:start="1167:17" pos:end="1167:29">/* ljmp Ev */</comment>

            <expr_stmt pos:start="1169:13" pos:end="1169:47"><expr pos:start="1169:13" pos:end="1169:46"><call pos:start="1169:13" pos:end="1169:46"><name pos:start="1169:13" pos:end="1169:27">gen_op_ld_T1_A0</name><argument_list pos:start="1169:28" pos:end="1169:46">(<argument pos:start="1169:29" pos:end="1169:45"><expr pos:start="1169:29" pos:end="1169:45"><name pos:start="1169:29" pos:end="1169:30">ot</name> <operator pos:start="1169:32" pos:end="1169:32">+</operator> <name pos:start="1169:34" pos:end="1169:45"><name pos:start="1169:34" pos:end="1169:34">s</name><operator pos:start="1169:35" pos:end="1169:36">-&gt;</operator><name pos:start="1169:37" pos:end="1169:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1171:13" pos:end="1171:54"><expr pos:start="1171:13" pos:end="1171:53"><call pos:start="1171:13" pos:end="1171:53"><name pos:start="1171:13" pos:end="1171:25">gen_add_A0_im</name><argument_list pos:start="1171:26" pos:end="1171:53">(<argument pos:start="1171:27" pos:end="1171:27"><expr pos:start="1171:27" pos:end="1171:27"><name pos:start="1171:27" pos:end="1171:27">s</name></expr></argument>, <argument pos:start="1171:30" pos:end="1171:52"><expr pos:start="1171:30" pos:end="1171:52"><literal type="number" pos:start="1171:30" pos:end="1171:30">1</literal> <operator pos:start="1171:32" pos:end="1171:33">&lt;&lt;</operator> <operator pos:start="1171:35" pos:end="1171:35">(</operator><name pos:start="1171:36" pos:end="1171:37">ot</name> <operator pos:start="1171:39" pos:end="1171:39">-</operator> <name pos:start="1171:41" pos:end="1171:47">OT_WORD</name> <operator pos:start="1171:49" pos:end="1171:49">+</operator> <literal type="number" pos:start="1171:51" pos:end="1171:51">1</literal><operator pos:start="1171:52" pos:end="1171:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1173:13" pos:end="1173:53"><expr pos:start="1173:13" pos:end="1173:52"><call pos:start="1173:13" pos:end="1173:52"><name pos:start="1173:13" pos:end="1173:28">gen_op_ldu_T0_A0</name><argument_list pos:start="1173:29" pos:end="1173:52">(<argument pos:start="1173:30" pos:end="1173:51"><expr pos:start="1173:30" pos:end="1173:51"><name pos:start="1173:30" pos:end="1173:36">OT_WORD</name> <operator pos:start="1173:38" pos:end="1173:38">+</operator> <name pos:start="1173:40" pos:end="1173:51"><name pos:start="1173:40" pos:end="1173:40">s</name><operator pos:start="1173:41" pos:end="1173:42">-&gt;</operator><name pos:start="1173:43" pos:end="1173:51">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="1175:9" pos:end="1175:16"><name pos:start="1175:9" pos:end="1175:15">do_ljmp</name>:</label>

            <if_stmt pos:start="1177:13" pos:end="1199:13"><if pos:start="1177:13" pos:end="1191:13">if <condition pos:start="1177:16" pos:end="1177:34">(<expr pos:start="1177:17" pos:end="1177:33"><name pos:start="1177:17" pos:end="1177:21"><name pos:start="1177:17" pos:end="1177:17">s</name><operator pos:start="1177:18" pos:end="1177:19">-&gt;</operator><name pos:start="1177:20" pos:end="1177:21">pe</name></name> <operator pos:start="1177:23" pos:end="1177:24">&amp;&amp;</operator> <operator pos:start="1177:26" pos:end="1177:26">!</operator><name pos:start="1177:27" pos:end="1177:33"><name pos:start="1177:27" pos:end="1177:27">s</name><operator pos:start="1177:28" pos:end="1177:29">-&gt;</operator><name pos:start="1177:30" pos:end="1177:33">vm86</name></name></expr>)</condition> <block pos:start="1177:36" pos:end="1191:13">{<block_content pos:start="1179:17" pos:end="1189:75">

                <if_stmt pos:start="1179:17" pos:end="1181:47"><if pos:start="1179:17" pos:end="1181:47">if <condition pos:start="1179:20" pos:end="1179:46">(<expr pos:start="1179:21" pos:end="1179:45"><name pos:start="1179:21" pos:end="1179:28"><name pos:start="1179:21" pos:end="1179:21">s</name><operator pos:start="1179:22" pos:end="1179:23">-&gt;</operator><name pos:start="1179:24" pos:end="1179:28">cc_op</name></name> <operator pos:start="1179:30" pos:end="1179:31">!=</operator> <name pos:start="1179:33" pos:end="1179:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1181:21" pos:end="1181:47"><block_content pos:start="1181:21" pos:end="1181:47">

                    <expr_stmt pos:start="1181:21" pos:end="1181:47"><expr pos:start="1181:21" pos:end="1181:46"><call pos:start="1181:21" pos:end="1181:46"><name pos:start="1181:21" pos:end="1181:36">gen_op_set_cc_op</name><argument_list pos:start="1181:37" pos:end="1181:46">(<argument pos:start="1181:38" pos:end="1181:45"><expr pos:start="1181:38" pos:end="1181:45"><name pos:start="1181:38" pos:end="1181:45"><name pos:start="1181:38" pos:end="1181:38">s</name><operator pos:start="1181:39" pos:end="1181:40">-&gt;</operator><name pos:start="1181:41" pos:end="1181:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1183:17" pos:end="1183:50"><expr pos:start="1183:17" pos:end="1183:49"><call pos:start="1183:17" pos:end="1183:49"><name pos:start="1183:17" pos:end="1183:26">gen_jmp_im</name><argument_list pos:start="1183:27" pos:end="1183:49">(<argument pos:start="1183:28" pos:end="1183:48"><expr pos:start="1183:28" pos:end="1183:48"><name pos:start="1183:28" pos:end="1183:35">pc_start</name> <operator pos:start="1183:37" pos:end="1183:37">-</operator> <name pos:start="1183:39" pos:end="1183:48"><name pos:start="1183:39" pos:end="1183:39">s</name><operator pos:start="1183:40" pos:end="1183:41">-&gt;</operator><name pos:start="1183:42" pos:end="1183:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1185:17" pos:end="1185:61"><expr pos:start="1185:17" pos:end="1185:60"><call pos:start="1185:17" pos:end="1185:60"><name pos:start="1185:17" pos:end="1185:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1185:37" pos:end="1185:60">(<argument pos:start="1185:38" pos:end="1185:49"><expr pos:start="1185:38" pos:end="1185:49"><name pos:start="1185:38" pos:end="1185:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1185:52" pos:end="1185:59"><expr pos:start="1185:52" pos:end="1185:59"><name pos:start="1185:52" pos:end="1185:59"><name pos:start="1185:52" pos:end="1185:56">cpu_T</name><index pos:start="1185:57" pos:end="1185:59">[<expr pos:start="1185:58" pos:end="1185:58"><literal type="number" pos:start="1185:58" pos:end="1185:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1187:17" pos:end="1189:75"><expr pos:start="1187:17" pos:end="1189:74"><call pos:start="1187:17" pos:end="1189:74"><name pos:start="1187:17" pos:end="1187:41">gen_helper_ljmp_protected</name><argument_list pos:start="1187:42" pos:end="1189:74">(<argument pos:start="1187:43" pos:end="1187:49"><expr pos:start="1187:43" pos:end="1187:49"><name pos:start="1187:43" pos:end="1187:49">cpu_env</name></expr></argument>, <argument pos:start="1187:52" pos:end="1187:63"><expr pos:start="1187:52" pos:end="1187:63"><name pos:start="1187:52" pos:end="1187:63">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1187:66" pos:end="1187:73"><expr pos:start="1187:66" pos:end="1187:73"><name pos:start="1187:66" pos:end="1187:73"><name pos:start="1187:66" pos:end="1187:70">cpu_T</name><index pos:start="1187:71" pos:end="1187:73">[<expr pos:start="1187:72" pos:end="1187:72"><literal type="number" pos:start="1187:72" pos:end="1187:72">1</literal></expr>]</index></name></expr></argument>,

                                          <argument pos:start="1189:43" pos:end="1189:73"><expr pos:start="1189:43" pos:end="1189:73"><call pos:start="1189:43" pos:end="1189:73"><name pos:start="1189:43" pos:end="1189:55">tcg_const_i32</name><argument_list pos:start="1189:56" pos:end="1189:73">(<argument pos:start="1189:57" pos:end="1189:72"><expr pos:start="1189:57" pos:end="1189:72"><name pos:start="1189:57" pos:end="1189:61"><name pos:start="1189:57" pos:end="1189:57">s</name><operator pos:start="1189:58" pos:end="1189:59">-&gt;</operator><name pos:start="1189:60" pos:end="1189:61">pc</name></name> <operator pos:start="1189:63" pos:end="1189:63">-</operator> <name pos:start="1189:65" pos:end="1189:72">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1191:15" pos:end="1199:13">else <block pos:start="1191:20" pos:end="1199:13">{<block_content pos:start="1193:17" pos:end="1197:32">

                <expr_stmt pos:start="1193:17" pos:end="1193:44"><expr pos:start="1193:17" pos:end="1193:43"><call pos:start="1193:17" pos:end="1193:43"><name pos:start="1193:17" pos:end="1193:37">gen_op_movl_seg_T0_vm</name><argument_list pos:start="1193:38" pos:end="1193:43">(<argument pos:start="1193:39" pos:end="1193:42"><expr pos:start="1193:39" pos:end="1193:42"><name pos:start="1193:39" pos:end="1193:42">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1195:17" pos:end="1195:36"><expr pos:start="1195:17" pos:end="1195:35"><call pos:start="1195:17" pos:end="1195:35"><name pos:start="1195:17" pos:end="1195:33">gen_op_movl_T0_T1</name><argument_list pos:start="1195:34" pos:end="1195:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1197:17" pos:end="1197:32"><expr pos:start="1197:17" pos:end="1197:31"><call pos:start="1197:17" pos:end="1197:31"><name pos:start="1197:17" pos:end="1197:29">gen_op_jmp_T0</name><argument_list pos:start="1197:30" pos:end="1197:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1201:13" pos:end="1201:23"><expr pos:start="1201:13" pos:end="1201:22"><call pos:start="1201:13" pos:end="1201:22"><name pos:start="1201:13" pos:end="1201:19">gen_eob</name><argument_list pos:start="1201:20" pos:end="1201:22">(<argument pos:start="1201:21" pos:end="1201:21"><expr pos:start="1201:21" pos:end="1201:21"><name pos:start="1201:21" pos:end="1201:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1203:13" pos:end="1203:18">break;</break>

        <case pos:start="1205:9" pos:end="1205:15">case <expr pos:start="1205:14" pos:end="1205:14"><literal type="number" pos:start="1205:14" pos:end="1205:14">6</literal></expr>:</case> <comment type="block" pos:start="1205:17" pos:end="1205:29">/* push Ev */</comment>

            <expr_stmt pos:start="1207:13" pos:end="1207:27"><expr pos:start="1207:13" pos:end="1207:26"><call pos:start="1207:13" pos:end="1207:26"><name pos:start="1207:13" pos:end="1207:23">gen_push_T0</name><argument_list pos:start="1207:24" pos:end="1207:26">(<argument pos:start="1207:25" pos:end="1207:25"><expr pos:start="1207:25" pos:end="1207:25"><name pos:start="1207:25" pos:end="1207:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1209:13" pos:end="1209:18">break;</break>

        <default pos:start="1211:9" pos:end="1211:16">default:</default>

            <goto pos:start="1213:13" pos:end="1213:28">goto <name pos:start="1213:18" pos:end="1213:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="1217:9" pos:end="1217:14">break;</break>



    <case pos:start="1221:5" pos:end="1221:14">case <expr pos:start="1221:10" pos:end="1221:13"><literal type="number" pos:start="1221:10" pos:end="1221:13">0x84</literal></expr>:</case> <comment type="block" pos:start="1221:16" pos:end="1221:32">/* test Ev, Gv */</comment>

    <case pos:start="1223:5" pos:end="1223:14">case <expr pos:start="1223:10" pos:end="1223:13"><literal type="number" pos:start="1223:10" pos:end="1223:13">0x85</literal></expr>:</case>

        <if_stmt pos:start="1225:9" pos:end="1231:33"><if pos:start="1225:9" pos:end="1227:25">if <condition pos:start="1225:12" pos:end="1225:25">(<expr pos:start="1225:13" pos:end="1225:24"><operator pos:start="1225:13" pos:end="1225:13">(</operator><name pos:start="1225:14" pos:end="1225:14">b</name> <operator pos:start="1225:16" pos:end="1225:16">&amp;</operator> <literal type="number" pos:start="1225:18" pos:end="1225:18">1</literal><operator pos:start="1225:19" pos:end="1225:19">)</operator> <operator pos:start="1225:21" pos:end="1225:22">==</operator> <literal type="number" pos:start="1225:24" pos:end="1225:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1227:13" pos:end="1227:25"><block_content pos:start="1227:13" pos:end="1227:25">

            <expr_stmt pos:start="1227:13" pos:end="1227:25"><expr pos:start="1227:13" pos:end="1227:24"><name pos:start="1227:13" pos:end="1227:14">ot</name> <operator pos:start="1227:16" pos:end="1227:16">=</operator> <name pos:start="1227:18" pos:end="1227:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1229:9" pos:end="1231:33">else<block type="pseudo" pos:start="1231:13" pos:end="1231:33"><block_content pos:start="1231:13" pos:end="1231:33">

            <expr_stmt pos:start="1231:13" pos:end="1231:33"><expr pos:start="1231:13" pos:end="1231:32"><name pos:start="1231:13" pos:end="1231:14">ot</name> <operator pos:start="1231:16" pos:end="1231:16">=</operator> <name pos:start="1231:18" pos:end="1231:22">dflag</name> <operator pos:start="1231:24" pos:end="1231:24">+</operator> <name pos:start="1231:26" pos:end="1231:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="1235:9" pos:end="1235:55"><expr pos:start="1235:9" pos:end="1235:54"><name pos:start="1235:9" pos:end="1235:13">modrm</name> <operator pos:start="1235:15" pos:end="1235:15">=</operator> <call pos:start="1235:17" pos:end="1235:54"><name pos:start="1235:17" pos:end="1235:29">cpu_ldub_code</name><argument_list pos:start="1235:30" pos:end="1235:54">(<argument pos:start="1235:31" pos:end="1235:44"><expr pos:start="1235:31" pos:end="1235:44"><name pos:start="1235:31" pos:end="1235:44">cpu_single_env</name></expr></argument>, <argument pos:start="1235:47" pos:end="1235:53"><expr pos:start="1235:47" pos:end="1235:53"><name pos:start="1235:47" pos:end="1235:51"><name pos:start="1235:47" pos:end="1235:47">s</name><operator pos:start="1235:48" pos:end="1235:49">-&gt;</operator><name pos:start="1235:50" pos:end="1235:51">pc</name></name><operator pos:start="1235:52" pos:end="1235:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1237:9" pos:end="1237:41"><expr pos:start="1237:9" pos:end="1237:40"><name pos:start="1237:9" pos:end="1237:11">reg</name> <operator pos:start="1237:13" pos:end="1237:13">=</operator> <operator pos:start="1237:15" pos:end="1237:15">(</operator><operator pos:start="1237:16" pos:end="1237:16">(</operator><name pos:start="1237:17" pos:end="1237:21">modrm</name> <operator pos:start="1237:23" pos:end="1237:24">&gt;&gt;</operator> <literal type="number" pos:start="1237:26" pos:end="1237:26">3</literal><operator pos:start="1237:27" pos:end="1237:27">)</operator> <operator pos:start="1237:29" pos:end="1237:29">&amp;</operator> <literal type="number" pos:start="1237:31" pos:end="1237:31">7</literal><operator pos:start="1237:32" pos:end="1237:32">)</operator> <operator pos:start="1237:34" pos:end="1237:34">|</operator> <name pos:start="1237:36" pos:end="1237:40">rex_r</name></expr>;</expr_stmt>



        <expr_stmt pos:start="1241:9" pos:end="1241:49"><expr pos:start="1241:9" pos:end="1241:48"><call pos:start="1241:9" pos:end="1241:48"><name pos:start="1241:9" pos:end="1241:22">gen_ldst_modrm</name><argument_list pos:start="1241:23" pos:end="1241:48">(<argument pos:start="1241:24" pos:end="1241:24"><expr pos:start="1241:24" pos:end="1241:24"><name pos:start="1241:24" pos:end="1241:24">s</name></expr></argument>, <argument pos:start="1241:27" pos:end="1241:31"><expr pos:start="1241:27" pos:end="1241:31"><name pos:start="1241:27" pos:end="1241:31">modrm</name></expr></argument>, <argument pos:start="1241:34" pos:end="1241:35"><expr pos:start="1241:34" pos:end="1241:35"><name pos:start="1241:34" pos:end="1241:35">ot</name></expr></argument>, <argument pos:start="1241:38" pos:end="1241:44"><expr pos:start="1241:38" pos:end="1241:44"><name pos:start="1241:38" pos:end="1241:44">OR_TMP0</name></expr></argument>, <argument pos:start="1241:47" pos:end="1241:47"><expr pos:start="1241:47" pos:end="1241:47"><literal type="number" pos:start="1241:47" pos:end="1241:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1243:9" pos:end="1243:38"><expr pos:start="1243:9" pos:end="1243:37"><call pos:start="1243:9" pos:end="1243:37"><name pos:start="1243:9" pos:end="1243:25">gen_op_mov_TN_reg</name><argument_list pos:start="1243:26" pos:end="1243:37">(<argument pos:start="1243:27" pos:end="1243:28"><expr pos:start="1243:27" pos:end="1243:28"><name pos:start="1243:27" pos:end="1243:28">ot</name></expr></argument>, <argument pos:start="1243:31" pos:end="1243:31"><expr pos:start="1243:31" pos:end="1243:31"><literal type="number" pos:start="1243:31" pos:end="1243:31">1</literal></expr></argument>, <argument pos:start="1243:34" pos:end="1243:36"><expr pos:start="1243:34" pos:end="1243:36"><name pos:start="1243:34" pos:end="1243:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1245:9" pos:end="1245:32"><expr pos:start="1245:9" pos:end="1245:31"><call pos:start="1245:9" pos:end="1245:31"><name pos:start="1245:9" pos:end="1245:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="1245:30" pos:end="1245:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1247:9" pos:end="1247:37"><expr pos:start="1247:9" pos:end="1247:36"><name pos:start="1247:9" pos:end="1247:16"><name pos:start="1247:9" pos:end="1247:9">s</name><operator pos:start="1247:10" pos:end="1247:11">-&gt;</operator><name pos:start="1247:12" pos:end="1247:16">cc_op</name></name> <operator pos:start="1247:18" pos:end="1247:18">=</operator> <name pos:start="1247:20" pos:end="1247:31">CC_OP_LOGICB</name> <operator pos:start="1247:33" pos:end="1247:33">+</operator> <name pos:start="1247:35" pos:end="1247:36">ot</name></expr>;</expr_stmt>

        <break pos:start="1249:9" pos:end="1249:14">break;</break>



    <case pos:start="1253:5" pos:end="1253:14">case <expr pos:start="1253:10" pos:end="1253:13"><literal type="number" pos:start="1253:10" pos:end="1253:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="1253:16" pos:end="1253:33">/* test eAX, Iv */</comment>

    <case pos:start="1255:5" pos:end="1255:14">case <expr pos:start="1255:10" pos:end="1255:13"><literal type="number" pos:start="1255:10" pos:end="1255:13">0xa9</literal></expr>:</case>

        <if_stmt pos:start="1257:9" pos:end="1263:33"><if pos:start="1257:9" pos:end="1259:25">if <condition pos:start="1257:12" pos:end="1257:25">(<expr pos:start="1257:13" pos:end="1257:24"><operator pos:start="1257:13" pos:end="1257:13">(</operator><name pos:start="1257:14" pos:end="1257:14">b</name> <operator pos:start="1257:16" pos:end="1257:16">&amp;</operator> <literal type="number" pos:start="1257:18" pos:end="1257:18">1</literal><operator pos:start="1257:19" pos:end="1257:19">)</operator> <operator pos:start="1257:21" pos:end="1257:22">==</operator> <literal type="number" pos:start="1257:24" pos:end="1257:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1259:13" pos:end="1259:25"><block_content pos:start="1259:13" pos:end="1259:25">

            <expr_stmt pos:start="1259:13" pos:end="1259:25"><expr pos:start="1259:13" pos:end="1259:24"><name pos:start="1259:13" pos:end="1259:14">ot</name> <operator pos:start="1259:16" pos:end="1259:16">=</operator> <name pos:start="1259:18" pos:end="1259:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1261:9" pos:end="1263:33">else<block type="pseudo" pos:start="1263:13" pos:end="1263:33"><block_content pos:start="1263:13" pos:end="1263:33">

            <expr_stmt pos:start="1263:13" pos:end="1263:33"><expr pos:start="1263:13" pos:end="1263:32"><name pos:start="1263:13" pos:end="1263:14">ot</name> <operator pos:start="1263:16" pos:end="1263:16">=</operator> <name pos:start="1263:18" pos:end="1263:22">dflag</name> <operator pos:start="1263:24" pos:end="1263:24">+</operator> <name pos:start="1263:26" pos:end="1263:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1265:9" pos:end="1265:30"><expr pos:start="1265:9" pos:end="1265:29"><name pos:start="1265:9" pos:end="1265:11">val</name> <operator pos:start="1265:13" pos:end="1265:13">=</operator> <call pos:start="1265:15" pos:end="1265:29"><name pos:start="1265:15" pos:end="1265:22">insn_get</name><argument_list pos:start="1265:23" pos:end="1265:29">(<argument pos:start="1265:24" pos:end="1265:24"><expr pos:start="1265:24" pos:end="1265:24"><name pos:start="1265:24" pos:end="1265:24">s</name></expr></argument>, <argument pos:start="1265:27" pos:end="1265:28"><expr pos:start="1265:27" pos:end="1265:28"><name pos:start="1265:27" pos:end="1265:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="1269:9" pos:end="1269:41"><expr pos:start="1269:9" pos:end="1269:40"><call pos:start="1269:9" pos:end="1269:40"><name pos:start="1269:9" pos:end="1269:25">gen_op_mov_TN_reg</name><argument_list pos:start="1269:26" pos:end="1269:40">(<argument pos:start="1269:27" pos:end="1269:28"><expr pos:start="1269:27" pos:end="1269:28"><name pos:start="1269:27" pos:end="1269:28">ot</name></expr></argument>, <argument pos:start="1269:31" pos:end="1269:31"><expr pos:start="1269:31" pos:end="1269:31"><literal type="number" pos:start="1269:31" pos:end="1269:31">0</literal></expr></argument>, <argument pos:start="1269:34" pos:end="1269:39"><expr pos:start="1269:34" pos:end="1269:39"><name pos:start="1269:34" pos:end="1269:39">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1271:9" pos:end="1271:31"><expr pos:start="1271:9" pos:end="1271:30"><call pos:start="1271:9" pos:end="1271:30"><name pos:start="1271:9" pos:end="1271:25">gen_op_movl_T1_im</name><argument_list pos:start="1271:26" pos:end="1271:30">(<argument pos:start="1271:27" pos:end="1271:29"><expr pos:start="1271:27" pos:end="1271:29"><name pos:start="1271:27" pos:end="1271:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1273:9" pos:end="1273:32"><expr pos:start="1273:9" pos:end="1273:31"><call pos:start="1273:9" pos:end="1273:31"><name pos:start="1273:9" pos:end="1273:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="1273:30" pos:end="1273:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1275:9" pos:end="1275:37"><expr pos:start="1275:9" pos:end="1275:36"><name pos:start="1275:9" pos:end="1275:16"><name pos:start="1275:9" pos:end="1275:9">s</name><operator pos:start="1275:10" pos:end="1275:11">-&gt;</operator><name pos:start="1275:12" pos:end="1275:16">cc_op</name></name> <operator pos:start="1275:18" pos:end="1275:18">=</operator> <name pos:start="1275:20" pos:end="1275:31">CC_OP_LOGICB</name> <operator pos:start="1275:33" pos:end="1275:33">+</operator> <name pos:start="1275:35" pos:end="1275:36">ot</name></expr>;</expr_stmt>

        <break pos:start="1277:9" pos:end="1277:14">break;</break>



    <case pos:start="1281:5" pos:end="1284:0">case <expr pos:start="1281:10" pos:end="1281:13"><literal type="number" pos:start="1281:10" pos:end="1281:13">0x98</literal></expr>:</case> <comment type="block" pos:start="1281:16" pos:end="1281:29">/* CWDE/CBW */</comment>

<cpp:ifdef pos:start="1283:1" pos:end="1283:20">#<cpp:directive pos:start="1283:2" pos:end="1283:6">ifdef</cpp:directive> <name pos:start="1283:8" pos:end="1283:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1285:9" pos:end="1313:9"><if pos:start="1285:9" pos:end="1293:9">if <condition pos:start="1285:12" pos:end="1285:23">(<expr pos:start="1285:13" pos:end="1285:22"><name pos:start="1285:13" pos:end="1285:17">dflag</name> <operator pos:start="1285:19" pos:end="1285:20">==</operator> <literal type="number" pos:start="1285:22" pos:end="1285:22">2</literal></expr>)</condition> <block pos:start="1285:25" pos:end="1293:9">{<block_content pos:start="1287:13" pos:end="1291:46">

            <expr_stmt pos:start="1287:13" pos:end="1287:49"><expr pos:start="1287:13" pos:end="1287:48"><call pos:start="1287:13" pos:end="1287:48"><name pos:start="1287:13" pos:end="1287:29">gen_op_mov_TN_reg</name><argument_list pos:start="1287:30" pos:end="1287:48">(<argument pos:start="1287:31" pos:end="1287:37"><expr pos:start="1287:31" pos:end="1287:37"><name pos:start="1287:31" pos:end="1287:37">OT_LONG</name></expr></argument>, <argument pos:start="1287:40" pos:end="1287:40"><expr pos:start="1287:40" pos:end="1287:40"><literal type="number" pos:start="1287:40" pos:end="1287:40">0</literal></expr></argument>, <argument pos:start="1287:43" pos:end="1287:47"><expr pos:start="1287:43" pos:end="1287:47"><name pos:start="1287:43" pos:end="1287:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1289:13" pos:end="1289:50"><expr pos:start="1289:13" pos:end="1289:49"><call pos:start="1289:13" pos:end="1289:49"><name pos:start="1289:13" pos:end="1289:29">tcg_gen_ext32s_tl</name><argument_list pos:start="1289:30" pos:end="1289:49">(<argument pos:start="1289:31" pos:end="1289:38"><expr pos:start="1289:31" pos:end="1289:38"><name pos:start="1289:31" pos:end="1289:38"><name pos:start="1289:31" pos:end="1289:35">cpu_T</name><index pos:start="1289:36" pos:end="1289:38">[<expr pos:start="1289:37" pos:end="1289:37"><literal type="number" pos:start="1289:37" pos:end="1289:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1289:41" pos:end="1289:48"><expr pos:start="1289:41" pos:end="1289:48"><name pos:start="1289:41" pos:end="1289:48"><name pos:start="1289:41" pos:end="1289:45">cpu_T</name><index pos:start="1289:46" pos:end="1289:48">[<expr pos:start="1289:47" pos:end="1289:47"><literal type="number" pos:start="1289:47" pos:end="1289:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1291:13" pos:end="1291:46"><expr pos:start="1291:13" pos:end="1291:45"><call pos:start="1291:13" pos:end="1291:45"><name pos:start="1291:13" pos:end="1291:29">gen_op_mov_reg_T0</name><argument_list pos:start="1291:30" pos:end="1291:45">(<argument pos:start="1291:31" pos:end="1291:37"><expr pos:start="1291:31" pos:end="1291:37"><name pos:start="1291:31" pos:end="1291:37">OT_QUAD</name></expr></argument>, <argument pos:start="1291:40" pos:end="1291:44"><expr pos:start="1291:40" pos:end="1291:44"><name pos:start="1291:40" pos:end="1291:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1293:11" pos:end="1305:9">else

<cpp:endif pos:start="1295:1" pos:end="1295:6">#<cpp:directive pos:start="1295:2" pos:end="1295:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1297:12" pos:end="1297:23">(<expr pos:start="1297:13" pos:end="1297:22"><name pos:start="1297:13" pos:end="1297:17">dflag</name> <operator pos:start="1297:19" pos:end="1297:20">==</operator> <literal type="number" pos:start="1297:22" pos:end="1297:22">1</literal></expr>)</condition> <block pos:start="1297:25" pos:end="1305:9">{<block_content pos:start="1299:13" pos:end="1303:46">

            <expr_stmt pos:start="1299:13" pos:end="1299:49"><expr pos:start="1299:13" pos:end="1299:48"><call pos:start="1299:13" pos:end="1299:48"><name pos:start="1299:13" pos:end="1299:29">gen_op_mov_TN_reg</name><argument_list pos:start="1299:30" pos:end="1299:48">(<argument pos:start="1299:31" pos:end="1299:37"><expr pos:start="1299:31" pos:end="1299:37"><name pos:start="1299:31" pos:end="1299:37">OT_WORD</name></expr></argument>, <argument pos:start="1299:40" pos:end="1299:40"><expr pos:start="1299:40" pos:end="1299:40"><literal type="number" pos:start="1299:40" pos:end="1299:40">0</literal></expr></argument>, <argument pos:start="1299:43" pos:end="1299:47"><expr pos:start="1299:43" pos:end="1299:47"><name pos:start="1299:43" pos:end="1299:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1301:13" pos:end="1301:50"><expr pos:start="1301:13" pos:end="1301:49"><call pos:start="1301:13" pos:end="1301:49"><name pos:start="1301:13" pos:end="1301:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1301:30" pos:end="1301:49">(<argument pos:start="1301:31" pos:end="1301:38"><expr pos:start="1301:31" pos:end="1301:38"><name pos:start="1301:31" pos:end="1301:38"><name pos:start="1301:31" pos:end="1301:35">cpu_T</name><index pos:start="1301:36" pos:end="1301:38">[<expr pos:start="1301:37" pos:end="1301:37"><literal type="number" pos:start="1301:37" pos:end="1301:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1301:41" pos:end="1301:48"><expr pos:start="1301:41" pos:end="1301:48"><name pos:start="1301:41" pos:end="1301:48"><name pos:start="1301:41" pos:end="1301:45">cpu_T</name><index pos:start="1301:46" pos:end="1301:48">[<expr pos:start="1301:47" pos:end="1301:47"><literal type="number" pos:start="1301:47" pos:end="1301:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1303:13" pos:end="1303:46"><expr pos:start="1303:13" pos:end="1303:45"><call pos:start="1303:13" pos:end="1303:45"><name pos:start="1303:13" pos:end="1303:29">gen_op_mov_reg_T0</name><argument_list pos:start="1303:30" pos:end="1303:45">(<argument pos:start="1303:31" pos:end="1303:37"><expr pos:start="1303:31" pos:end="1303:37"><name pos:start="1303:31" pos:end="1303:37">OT_LONG</name></expr></argument>, <argument pos:start="1303:40" pos:end="1303:44"><expr pos:start="1303:40" pos:end="1303:44"><name pos:start="1303:40" pos:end="1303:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1305:11" pos:end="1313:9">else <block pos:start="1305:16" pos:end="1313:9">{<block_content pos:start="1307:13" pos:end="1311:46">

            <expr_stmt pos:start="1307:13" pos:end="1307:49"><expr pos:start="1307:13" pos:end="1307:48"><call pos:start="1307:13" pos:end="1307:48"><name pos:start="1307:13" pos:end="1307:29">gen_op_mov_TN_reg</name><argument_list pos:start="1307:30" pos:end="1307:48">(<argument pos:start="1307:31" pos:end="1307:37"><expr pos:start="1307:31" pos:end="1307:37"><name pos:start="1307:31" pos:end="1307:37">OT_BYTE</name></expr></argument>, <argument pos:start="1307:40" pos:end="1307:40"><expr pos:start="1307:40" pos:end="1307:40"><literal type="number" pos:start="1307:40" pos:end="1307:40">0</literal></expr></argument>, <argument pos:start="1307:43" pos:end="1307:47"><expr pos:start="1307:43" pos:end="1307:47"><name pos:start="1307:43" pos:end="1307:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1309:13" pos:end="1309:49"><expr pos:start="1309:13" pos:end="1309:48"><call pos:start="1309:13" pos:end="1309:48"><name pos:start="1309:13" pos:end="1309:28">tcg_gen_ext8s_tl</name><argument_list pos:start="1309:29" pos:end="1309:48">(<argument pos:start="1309:30" pos:end="1309:37"><expr pos:start="1309:30" pos:end="1309:37"><name pos:start="1309:30" pos:end="1309:37"><name pos:start="1309:30" pos:end="1309:34">cpu_T</name><index pos:start="1309:35" pos:end="1309:37">[<expr pos:start="1309:36" pos:end="1309:36"><literal type="number" pos:start="1309:36" pos:end="1309:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1309:40" pos:end="1309:47"><expr pos:start="1309:40" pos:end="1309:47"><name pos:start="1309:40" pos:end="1309:47"><name pos:start="1309:40" pos:end="1309:44">cpu_T</name><index pos:start="1309:45" pos:end="1309:47">[<expr pos:start="1309:46" pos:end="1309:46"><literal type="number" pos:start="1309:46" pos:end="1309:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1311:13" pos:end="1311:46"><expr pos:start="1311:13" pos:end="1311:45"><call pos:start="1311:13" pos:end="1311:45"><name pos:start="1311:13" pos:end="1311:29">gen_op_mov_reg_T0</name><argument_list pos:start="1311:30" pos:end="1311:45">(<argument pos:start="1311:31" pos:end="1311:37"><expr pos:start="1311:31" pos:end="1311:37"><name pos:start="1311:31" pos:end="1311:37">OT_WORD</name></expr></argument>, <argument pos:start="1311:40" pos:end="1311:44"><expr pos:start="1311:40" pos:end="1311:44"><name pos:start="1311:40" pos:end="1311:44">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1315:9" pos:end="1315:14">break;</break>

    <case pos:start="1317:5" pos:end="1320:0">case <expr pos:start="1317:10" pos:end="1317:13"><literal type="number" pos:start="1317:10" pos:end="1317:13">0x99</literal></expr>:</case> <comment type="block" pos:start="1317:16" pos:end="1317:28">/* CDQ/CWD */</comment>

<cpp:ifdef pos:start="1319:1" pos:end="1319:20">#<cpp:directive pos:start="1319:2" pos:end="1319:6">ifdef</cpp:directive> <name pos:start="1319:8" pos:end="1319:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1321:9" pos:end="1353:9"><if pos:start="1321:9" pos:end="1329:9">if <condition pos:start="1321:12" pos:end="1321:23">(<expr pos:start="1321:13" pos:end="1321:22"><name pos:start="1321:13" pos:end="1321:17">dflag</name> <operator pos:start="1321:19" pos:end="1321:20">==</operator> <literal type="number" pos:start="1321:22" pos:end="1321:22">2</literal></expr>)</condition> <block pos:start="1321:25" pos:end="1329:9">{<block_content pos:start="1323:13" pos:end="1327:46">

            <expr_stmt pos:start="1323:13" pos:end="1323:49"><expr pos:start="1323:13" pos:end="1323:48"><call pos:start="1323:13" pos:end="1323:48"><name pos:start="1323:13" pos:end="1323:29">gen_op_mov_TN_reg</name><argument_list pos:start="1323:30" pos:end="1323:48">(<argument pos:start="1323:31" pos:end="1323:37"><expr pos:start="1323:31" pos:end="1323:37"><name pos:start="1323:31" pos:end="1323:37">OT_QUAD</name></expr></argument>, <argument pos:start="1323:40" pos:end="1323:40"><expr pos:start="1323:40" pos:end="1323:40"><literal type="number" pos:start="1323:40" pos:end="1323:40">0</literal></expr></argument>, <argument pos:start="1323:43" pos:end="1323:47"><expr pos:start="1323:43" pos:end="1323:47"><name pos:start="1323:43" pos:end="1323:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1325:13" pos:end="1325:52"><expr pos:start="1325:13" pos:end="1325:51"><call pos:start="1325:13" pos:end="1325:51"><name pos:start="1325:13" pos:end="1325:27">tcg_gen_sari_tl</name><argument_list pos:start="1325:28" pos:end="1325:51">(<argument pos:start="1325:29" pos:end="1325:36"><expr pos:start="1325:29" pos:end="1325:36"><name pos:start="1325:29" pos:end="1325:36"><name pos:start="1325:29" pos:end="1325:33">cpu_T</name><index pos:start="1325:34" pos:end="1325:36">[<expr pos:start="1325:35" pos:end="1325:35"><literal type="number" pos:start="1325:35" pos:end="1325:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1325:39" pos:end="1325:46"><expr pos:start="1325:39" pos:end="1325:46"><name pos:start="1325:39" pos:end="1325:46"><name pos:start="1325:39" pos:end="1325:43">cpu_T</name><index pos:start="1325:44" pos:end="1325:46">[<expr pos:start="1325:45" pos:end="1325:45"><literal type="number" pos:start="1325:45" pos:end="1325:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1325:49" pos:end="1325:50"><expr pos:start="1325:49" pos:end="1325:50"><literal type="number" pos:start="1325:49" pos:end="1325:50">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1327:13" pos:end="1327:46"><expr pos:start="1327:13" pos:end="1327:45"><call pos:start="1327:13" pos:end="1327:45"><name pos:start="1327:13" pos:end="1327:29">gen_op_mov_reg_T0</name><argument_list pos:start="1327:30" pos:end="1327:45">(<argument pos:start="1327:31" pos:end="1327:37"><expr pos:start="1327:31" pos:end="1327:37"><name pos:start="1327:31" pos:end="1327:37">OT_QUAD</name></expr></argument>, <argument pos:start="1327:40" pos:end="1327:44"><expr pos:start="1327:40" pos:end="1327:44"><name pos:start="1327:40" pos:end="1327:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1329:11" pos:end="1343:9">else

<cpp:endif pos:start="1331:1" pos:end="1331:6">#<cpp:directive pos:start="1331:2" pos:end="1331:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1333:12" pos:end="1333:23">(<expr pos:start="1333:13" pos:end="1333:22"><name pos:start="1333:13" pos:end="1333:17">dflag</name> <operator pos:start="1333:19" pos:end="1333:20">==</operator> <literal type="number" pos:start="1333:22" pos:end="1333:22">1</literal></expr>)</condition> <block pos:start="1333:25" pos:end="1343:9">{<block_content pos:start="1335:13" pos:end="1341:46">

            <expr_stmt pos:start="1335:13" pos:end="1335:49"><expr pos:start="1335:13" pos:end="1335:48"><call pos:start="1335:13" pos:end="1335:48"><name pos:start="1335:13" pos:end="1335:29">gen_op_mov_TN_reg</name><argument_list pos:start="1335:30" pos:end="1335:48">(<argument pos:start="1335:31" pos:end="1335:37"><expr pos:start="1335:31" pos:end="1335:37"><name pos:start="1335:31" pos:end="1335:37">OT_LONG</name></expr></argument>, <argument pos:start="1335:40" pos:end="1335:40"><expr pos:start="1335:40" pos:end="1335:40"><literal type="number" pos:start="1335:40" pos:end="1335:40">0</literal></expr></argument>, <argument pos:start="1335:43" pos:end="1335:47"><expr pos:start="1335:43" pos:end="1335:47"><name pos:start="1335:43" pos:end="1335:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1337:13" pos:end="1337:50"><expr pos:start="1337:13" pos:end="1337:49"><call pos:start="1337:13" pos:end="1337:49"><name pos:start="1337:13" pos:end="1337:29">tcg_gen_ext32s_tl</name><argument_list pos:start="1337:30" pos:end="1337:49">(<argument pos:start="1337:31" pos:end="1337:38"><expr pos:start="1337:31" pos:end="1337:38"><name pos:start="1337:31" pos:end="1337:38"><name pos:start="1337:31" pos:end="1337:35">cpu_T</name><index pos:start="1337:36" pos:end="1337:38">[<expr pos:start="1337:37" pos:end="1337:37"><literal type="number" pos:start="1337:37" pos:end="1337:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1337:41" pos:end="1337:48"><expr pos:start="1337:41" pos:end="1337:48"><name pos:start="1337:41" pos:end="1337:48"><name pos:start="1337:41" pos:end="1337:45">cpu_T</name><index pos:start="1337:46" pos:end="1337:48">[<expr pos:start="1337:47" pos:end="1337:47"><literal type="number" pos:start="1337:47" pos:end="1337:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1339:13" pos:end="1339:52"><expr pos:start="1339:13" pos:end="1339:51"><call pos:start="1339:13" pos:end="1339:51"><name pos:start="1339:13" pos:end="1339:27">tcg_gen_sari_tl</name><argument_list pos:start="1339:28" pos:end="1339:51">(<argument pos:start="1339:29" pos:end="1339:36"><expr pos:start="1339:29" pos:end="1339:36"><name pos:start="1339:29" pos:end="1339:36"><name pos:start="1339:29" pos:end="1339:33">cpu_T</name><index pos:start="1339:34" pos:end="1339:36">[<expr pos:start="1339:35" pos:end="1339:35"><literal type="number" pos:start="1339:35" pos:end="1339:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1339:39" pos:end="1339:46"><expr pos:start="1339:39" pos:end="1339:46"><name pos:start="1339:39" pos:end="1339:46"><name pos:start="1339:39" pos:end="1339:43">cpu_T</name><index pos:start="1339:44" pos:end="1339:46">[<expr pos:start="1339:45" pos:end="1339:45"><literal type="number" pos:start="1339:45" pos:end="1339:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1339:49" pos:end="1339:50"><expr pos:start="1339:49" pos:end="1339:50"><literal type="number" pos:start="1339:49" pos:end="1339:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1341:13" pos:end="1341:46"><expr pos:start="1341:13" pos:end="1341:45"><call pos:start="1341:13" pos:end="1341:45"><name pos:start="1341:13" pos:end="1341:29">gen_op_mov_reg_T0</name><argument_list pos:start="1341:30" pos:end="1341:45">(<argument pos:start="1341:31" pos:end="1341:37"><expr pos:start="1341:31" pos:end="1341:37"><name pos:start="1341:31" pos:end="1341:37">OT_LONG</name></expr></argument>, <argument pos:start="1341:40" pos:end="1341:44"><expr pos:start="1341:40" pos:end="1341:44"><name pos:start="1341:40" pos:end="1341:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1343:11" pos:end="1353:9">else <block pos:start="1343:16" pos:end="1353:9">{<block_content pos:start="1345:13" pos:end="1351:46">

            <expr_stmt pos:start="1345:13" pos:end="1345:49"><expr pos:start="1345:13" pos:end="1345:48"><call pos:start="1345:13" pos:end="1345:48"><name pos:start="1345:13" pos:end="1345:29">gen_op_mov_TN_reg</name><argument_list pos:start="1345:30" pos:end="1345:48">(<argument pos:start="1345:31" pos:end="1345:37"><expr pos:start="1345:31" pos:end="1345:37"><name pos:start="1345:31" pos:end="1345:37">OT_WORD</name></expr></argument>, <argument pos:start="1345:40" pos:end="1345:40"><expr pos:start="1345:40" pos:end="1345:40"><literal type="number" pos:start="1345:40" pos:end="1345:40">0</literal></expr></argument>, <argument pos:start="1345:43" pos:end="1345:47"><expr pos:start="1345:43" pos:end="1345:47"><name pos:start="1345:43" pos:end="1345:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1347:13" pos:end="1347:50"><expr pos:start="1347:13" pos:end="1347:49"><call pos:start="1347:13" pos:end="1347:49"><name pos:start="1347:13" pos:end="1347:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1347:30" pos:end="1347:49">(<argument pos:start="1347:31" pos:end="1347:38"><expr pos:start="1347:31" pos:end="1347:38"><name pos:start="1347:31" pos:end="1347:38"><name pos:start="1347:31" pos:end="1347:35">cpu_T</name><index pos:start="1347:36" pos:end="1347:38">[<expr pos:start="1347:37" pos:end="1347:37"><literal type="number" pos:start="1347:37" pos:end="1347:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1347:41" pos:end="1347:48"><expr pos:start="1347:41" pos:end="1347:48"><name pos:start="1347:41" pos:end="1347:48"><name pos:start="1347:41" pos:end="1347:45">cpu_T</name><index pos:start="1347:46" pos:end="1347:48">[<expr pos:start="1347:47" pos:end="1347:47"><literal type="number" pos:start="1347:47" pos:end="1347:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1349:13" pos:end="1349:52"><expr pos:start="1349:13" pos:end="1349:51"><call pos:start="1349:13" pos:end="1349:51"><name pos:start="1349:13" pos:end="1349:27">tcg_gen_sari_tl</name><argument_list pos:start="1349:28" pos:end="1349:51">(<argument pos:start="1349:29" pos:end="1349:36"><expr pos:start="1349:29" pos:end="1349:36"><name pos:start="1349:29" pos:end="1349:36"><name pos:start="1349:29" pos:end="1349:33">cpu_T</name><index pos:start="1349:34" pos:end="1349:36">[<expr pos:start="1349:35" pos:end="1349:35"><literal type="number" pos:start="1349:35" pos:end="1349:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1349:39" pos:end="1349:46"><expr pos:start="1349:39" pos:end="1349:46"><name pos:start="1349:39" pos:end="1349:46"><name pos:start="1349:39" pos:end="1349:43">cpu_T</name><index pos:start="1349:44" pos:end="1349:46">[<expr pos:start="1349:45" pos:end="1349:45"><literal type="number" pos:start="1349:45" pos:end="1349:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1349:49" pos:end="1349:50"><expr pos:start="1349:49" pos:end="1349:50"><literal type="number" pos:start="1349:49" pos:end="1349:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1351:13" pos:end="1351:46"><expr pos:start="1351:13" pos:end="1351:45"><call pos:start="1351:13" pos:end="1351:45"><name pos:start="1351:13" pos:end="1351:29">gen_op_mov_reg_T0</name><argument_list pos:start="1351:30" pos:end="1351:45">(<argument pos:start="1351:31" pos:end="1351:37"><expr pos:start="1351:31" pos:end="1351:37"><name pos:start="1351:31" pos:end="1351:37">OT_WORD</name></expr></argument>, <argument pos:start="1351:40" pos:end="1351:44"><expr pos:start="1351:40" pos:end="1351:44"><name pos:start="1351:40" pos:end="1351:44">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1355:9" pos:end="1355:14">break;</break>

    <case pos:start="1357:5" pos:end="1357:15">case <expr pos:start="1357:10" pos:end="1357:14"><literal type="number" pos:start="1357:10" pos:end="1357:14">0x1af</literal></expr>:</case> <comment type="block" pos:start="1357:17" pos:end="1357:33">/* imul Gv, Ev */</comment>

    <case pos:start="1359:5" pos:end="1359:14">case <expr pos:start="1359:10" pos:end="1359:13"><literal type="number" pos:start="1359:10" pos:end="1359:13">0x69</literal></expr>:</case> <comment type="block" pos:start="1359:16" pos:end="1359:35">/* imul Gv, Ev, I */</comment>

    <case pos:start="1361:5" pos:end="1361:14">case <expr pos:start="1361:10" pos:end="1361:13"><literal type="number" pos:start="1361:10" pos:end="1361:13">0x6b</literal></expr>:</case>

        <expr_stmt pos:start="1363:9" pos:end="1363:29"><expr pos:start="1363:9" pos:end="1363:28"><name pos:start="1363:9" pos:end="1363:10">ot</name> <operator pos:start="1363:12" pos:end="1363:12">=</operator> <name pos:start="1363:14" pos:end="1363:18">dflag</name> <operator pos:start="1363:20" pos:end="1363:20">+</operator> <name pos:start="1363:22" pos:end="1363:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1365:9" pos:end="1365:55"><expr pos:start="1365:9" pos:end="1365:54"><name pos:start="1365:9" pos:end="1365:13">modrm</name> <operator pos:start="1365:15" pos:end="1365:15">=</operator> <call pos:start="1365:17" pos:end="1365:54"><name pos:start="1365:17" pos:end="1365:29">cpu_ldub_code</name><argument_list pos:start="1365:30" pos:end="1365:54">(<argument pos:start="1365:31" pos:end="1365:44"><expr pos:start="1365:31" pos:end="1365:44"><name pos:start="1365:31" pos:end="1365:44">cpu_single_env</name></expr></argument>, <argument pos:start="1365:47" pos:end="1365:53"><expr pos:start="1365:47" pos:end="1365:53"><name pos:start="1365:47" pos:end="1365:51"><name pos:start="1365:47" pos:end="1365:47">s</name><operator pos:start="1365:48" pos:end="1365:49">-&gt;</operator><name pos:start="1365:50" pos:end="1365:51">pc</name></name><operator pos:start="1365:52" pos:end="1365:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1367:9" pos:end="1367:41"><expr pos:start="1367:9" pos:end="1367:40"><name pos:start="1367:9" pos:end="1367:11">reg</name> <operator pos:start="1367:13" pos:end="1367:13">=</operator> <operator pos:start="1367:15" pos:end="1367:15">(</operator><operator pos:start="1367:16" pos:end="1367:16">(</operator><name pos:start="1367:17" pos:end="1367:21">modrm</name> <operator pos:start="1367:23" pos:end="1367:24">&gt;&gt;</operator> <literal type="number" pos:start="1367:26" pos:end="1367:26">3</literal><operator pos:start="1367:27" pos:end="1367:27">)</operator> <operator pos:start="1367:29" pos:end="1367:29">&amp;</operator> <literal type="number" pos:start="1367:31" pos:end="1367:31">7</literal><operator pos:start="1367:32" pos:end="1367:32">)</operator> <operator pos:start="1367:34" pos:end="1367:34">|</operator> <name pos:start="1367:36" pos:end="1367:40">rex_r</name></expr>;</expr_stmt>

        <if_stmt pos:start="1369:9" pos:end="1375:30"><if pos:start="1369:9" pos:end="1371:48">if <condition pos:start="1369:12" pos:end="1369:22">(<expr pos:start="1369:13" pos:end="1369:21"><name pos:start="1369:13" pos:end="1369:13">b</name> <operator pos:start="1369:15" pos:end="1369:16">==</operator> <literal type="number" pos:start="1369:18" pos:end="1369:21">0x69</literal></expr>)</condition><block type="pseudo" pos:start="1371:13" pos:end="1371:48"><block_content pos:start="1371:13" pos:end="1371:48">

            <expr_stmt pos:start="1371:13" pos:end="1371:48"><expr pos:start="1371:13" pos:end="1371:47"><name pos:start="1371:13" pos:end="1371:25"><name pos:start="1371:13" pos:end="1371:13">s</name><operator pos:start="1371:14" pos:end="1371:15">-&gt;</operator><name pos:start="1371:16" pos:end="1371:25">rip_offset</name></name> <operator pos:start="1371:27" pos:end="1371:27">=</operator> <call pos:start="1371:29" pos:end="1371:47"><name pos:start="1371:29" pos:end="1371:43">insn_const_size</name><argument_list pos:start="1371:44" pos:end="1371:47">(<argument pos:start="1371:45" pos:end="1371:46"><expr pos:start="1371:45" pos:end="1371:46"><name pos:start="1371:45" pos:end="1371:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="1373:9" pos:end="1375:30">else if <condition pos:start="1373:17" pos:end="1373:27">(<expr pos:start="1373:18" pos:end="1373:26"><name pos:start="1373:18" pos:end="1373:18">b</name> <operator pos:start="1373:20" pos:end="1373:21">==</operator> <literal type="number" pos:start="1373:23" pos:end="1373:26">0x6b</literal></expr>)</condition><block type="pseudo" pos:start="1375:13" pos:end="1375:30"><block_content pos:start="1375:13" pos:end="1375:30">

            <expr_stmt pos:start="1375:13" pos:end="1375:30"><expr pos:start="1375:13" pos:end="1375:29"><name pos:start="1375:13" pos:end="1375:25"><name pos:start="1375:13" pos:end="1375:13">s</name><operator pos:start="1375:14" pos:end="1375:15">-&gt;</operator><name pos:start="1375:16" pos:end="1375:25">rip_offset</name></name> <operator pos:start="1375:27" pos:end="1375:27">=</operator> <literal type="number" pos:start="1375:29" pos:end="1375:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1377:9" pos:end="1377:49"><expr pos:start="1377:9" pos:end="1377:48"><call pos:start="1377:9" pos:end="1377:48"><name pos:start="1377:9" pos:end="1377:22">gen_ldst_modrm</name><argument_list pos:start="1377:23" pos:end="1377:48">(<argument pos:start="1377:24" pos:end="1377:24"><expr pos:start="1377:24" pos:end="1377:24"><name pos:start="1377:24" pos:end="1377:24">s</name></expr></argument>, <argument pos:start="1377:27" pos:end="1377:31"><expr pos:start="1377:27" pos:end="1377:31"><name pos:start="1377:27" pos:end="1377:31">modrm</name></expr></argument>, <argument pos:start="1377:34" pos:end="1377:35"><expr pos:start="1377:34" pos:end="1377:35"><name pos:start="1377:34" pos:end="1377:35">ot</name></expr></argument>, <argument pos:start="1377:38" pos:end="1377:44"><expr pos:start="1377:38" pos:end="1377:44"><name pos:start="1377:38" pos:end="1377:44">OR_TMP0</name></expr></argument>, <argument pos:start="1377:47" pos:end="1377:47"><expr pos:start="1377:47" pos:end="1377:47"><literal type="number" pos:start="1377:47" pos:end="1377:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1379:9" pos:end="1400:0"><if pos:start="1379:9" pos:end="1385:9">if <condition pos:start="1379:12" pos:end="1379:22">(<expr pos:start="1379:13" pos:end="1379:21"><name pos:start="1379:13" pos:end="1379:13">b</name> <operator pos:start="1379:15" pos:end="1379:16">==</operator> <literal type="number" pos:start="1379:18" pos:end="1379:21">0x69</literal></expr>)</condition> <block pos:start="1379:24" pos:end="1385:9">{<block_content pos:start="1381:13" pos:end="1383:35">

            <expr_stmt pos:start="1381:13" pos:end="1381:34"><expr pos:start="1381:13" pos:end="1381:33"><name pos:start="1381:13" pos:end="1381:15">val</name> <operator pos:start="1381:17" pos:end="1381:17">=</operator> <call pos:start="1381:19" pos:end="1381:33"><name pos:start="1381:19" pos:end="1381:26">insn_get</name><argument_list pos:start="1381:27" pos:end="1381:33">(<argument pos:start="1381:28" pos:end="1381:28"><expr pos:start="1381:28" pos:end="1381:28"><name pos:start="1381:28" pos:end="1381:28">s</name></expr></argument>, <argument pos:start="1381:31" pos:end="1381:32"><expr pos:start="1381:31" pos:end="1381:32"><name pos:start="1381:31" pos:end="1381:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1383:13" pos:end="1383:35"><expr pos:start="1383:13" pos:end="1383:34"><call pos:start="1383:13" pos:end="1383:34"><name pos:start="1383:13" pos:end="1383:29">gen_op_movl_T1_im</name><argument_list pos:start="1383:30" pos:end="1383:34">(<argument pos:start="1383:31" pos:end="1383:33"><expr pos:start="1383:31" pos:end="1383:33"><name pos:start="1383:31" pos:end="1383:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1385:11" pos:end="1391:9">else if <condition pos:start="1385:19" pos:end="1385:29">(<expr pos:start="1385:20" pos:end="1385:28"><name pos:start="1385:20" pos:end="1385:20">b</name> <operator pos:start="1385:22" pos:end="1385:23">==</operator> <literal type="number" pos:start="1385:25" pos:end="1385:28">0x6b</literal></expr>)</condition> <block pos:start="1385:31" pos:end="1391:9">{<block_content pos:start="1387:13" pos:end="1389:35">

            <expr_stmt pos:start="1387:13" pos:end="1387:47"><expr pos:start="1387:13" pos:end="1387:46"><name pos:start="1387:13" pos:end="1387:15">val</name> <operator pos:start="1387:17" pos:end="1387:17">=</operator> <operator pos:start="1387:19" pos:end="1387:19">(</operator><name pos:start="1387:20" pos:end="1387:25">int8_t</name><operator pos:start="1387:26" pos:end="1387:26">)</operator><call pos:start="1387:27" pos:end="1387:46"><name pos:start="1387:27" pos:end="1387:34">insn_get</name><argument_list pos:start="1387:35" pos:end="1387:46">(<argument pos:start="1387:36" pos:end="1387:36"><expr pos:start="1387:36" pos:end="1387:36"><name pos:start="1387:36" pos:end="1387:36">s</name></expr></argument>, <argument pos:start="1387:39" pos:end="1387:45"><expr pos:start="1387:39" pos:end="1387:45"><name pos:start="1387:39" pos:end="1387:45">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1389:13" pos:end="1389:35"><expr pos:start="1389:13" pos:end="1389:34"><call pos:start="1389:13" pos:end="1389:34"><name pos:start="1389:13" pos:end="1389:29">gen_op_movl_T1_im</name><argument_list pos:start="1389:30" pos:end="1389:34">(<argument pos:start="1389:31" pos:end="1389:33"><expr pos:start="1389:31" pos:end="1389:33"><name pos:start="1389:31" pos:end="1389:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1391:11" pos:end="1400:0">else <block pos:start="1391:16" pos:end="1400:0">{<block_content pos:start="1393:13" pos:end="1393:42">

            <expr_stmt pos:start="1393:13" pos:end="1393:42"><expr pos:start="1393:13" pos:end="1393:41"><call pos:start="1393:13" pos:end="1393:41"><name pos:start="1393:13" pos:end="1393:29">gen_op_mov_TN_reg</name><argument_list pos:start="1393:30" pos:end="1393:41">(<argument pos:start="1393:31" pos:end="1393:32"><expr pos:start="1393:31" pos:end="1393:32"><name pos:start="1393:31" pos:end="1393:32">ot</name></expr></argument>, <argument pos:start="1393:35" pos:end="1393:35"><expr pos:start="1393:35" pos:end="1393:35"><literal type="number" pos:start="1393:35" pos:end="1393:35">1</literal></expr></argument>, <argument pos:start="1393:38" pos:end="1393:40"><expr pos:start="1393:38" pos:end="1393:40"><name pos:start="1393:38" pos:end="1393:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="1399:1" pos:end="1399:20">#<cpp:directive pos:start="1399:2" pos:end="1399:6">ifdef</cpp:directive> <name pos:start="1399:8" pos:end="1399:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1401:9" pos:end="1473:9"><if pos:start="1401:9" pos:end="1405:9">if <condition pos:start="1401:12" pos:end="1401:26">(<expr pos:start="1401:13" pos:end="1401:25"><name pos:start="1401:13" pos:end="1401:14">ot</name> <operator pos:start="1401:16" pos:end="1401:17">==</operator> <name pos:start="1401:19" pos:end="1401:25">OT_QUAD</name></expr>)</condition> <block pos:start="1401:28" pos:end="1405:9">{<block_content pos:start="1403:13" pos:end="1403:74">

            <expr_stmt pos:start="1403:13" pos:end="1403:74"><expr pos:start="1403:13" pos:end="1403:73"><call pos:start="1403:13" pos:end="1403:73"><name pos:start="1403:13" pos:end="1403:34">gen_helper_imulq_T0_T1</name><argument_list pos:start="1403:35" pos:end="1403:73">(<argument pos:start="1403:36" pos:end="1403:43"><expr pos:start="1403:36" pos:end="1403:43"><name pos:start="1403:36" pos:end="1403:43"><name pos:start="1403:36" pos:end="1403:40">cpu_T</name><index pos:start="1403:41" pos:end="1403:43">[<expr pos:start="1403:42" pos:end="1403:42"><literal type="number" pos:start="1403:42" pos:end="1403:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1403:46" pos:end="1403:52"><expr pos:start="1403:46" pos:end="1403:52"><name pos:start="1403:46" pos:end="1403:52">cpu_env</name></expr></argument>, <argument pos:start="1403:55" pos:end="1403:62"><expr pos:start="1403:55" pos:end="1403:62"><name pos:start="1403:55" pos:end="1403:62"><name pos:start="1403:55" pos:end="1403:59">cpu_T</name><index pos:start="1403:60" pos:end="1403:62">[<expr pos:start="1403:61" pos:end="1403:61"><literal type="number" pos:start="1403:61" pos:end="1403:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1403:65" pos:end="1403:72"><expr pos:start="1403:65" pos:end="1403:72"><name pos:start="1403:65" pos:end="1403:72"><name pos:start="1403:65" pos:end="1403:69">cpu_T</name><index pos:start="1403:70" pos:end="1403:72">[<expr pos:start="1403:71" pos:end="1403:71"><literal type="number" pos:start="1403:71" pos:end="1403:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1405:11" pos:end="1457:9">else

<cpp:endif pos:start="1407:1" pos:end="1407:6">#<cpp:directive pos:start="1407:2" pos:end="1407:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="1409:12" pos:end="1409:26">(<expr pos:start="1409:13" pos:end="1409:25"><name pos:start="1409:13" pos:end="1409:14">ot</name> <operator pos:start="1409:16" pos:end="1409:17">==</operator> <name pos:start="1409:19" pos:end="1409:25">OT_LONG</name></expr>)</condition> <block pos:start="1409:28" pos:end="1457:9">{<block_content pos:start="1413:17" pos:end="1456:0">

<cpp:ifdef pos:start="1411:1" pos:end="1411:20">#<cpp:directive pos:start="1411:2" pos:end="1411:6">ifdef</cpp:directive> <name pos:start="1411:8" pos:end="1411:20">TARGET_X86_64</name></cpp:ifdef>

                <expr_stmt pos:start="1413:17" pos:end="1413:54"><expr pos:start="1413:17" pos:end="1413:53"><call pos:start="1413:17" pos:end="1413:53"><name pos:start="1413:17" pos:end="1413:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1413:34" pos:end="1413:53">(<argument pos:start="1413:35" pos:end="1413:42"><expr pos:start="1413:35" pos:end="1413:42"><name pos:start="1413:35" pos:end="1413:42"><name pos:start="1413:35" pos:end="1413:39">cpu_T</name><index pos:start="1413:40" pos:end="1413:42">[<expr pos:start="1413:41" pos:end="1413:41"><literal type="number" pos:start="1413:41" pos:end="1413:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1413:45" pos:end="1413:52"><expr pos:start="1413:45" pos:end="1413:52"><name pos:start="1413:45" pos:end="1413:52"><name pos:start="1413:45" pos:end="1413:49">cpu_T</name><index pos:start="1413:50" pos:end="1413:52">[<expr pos:start="1413:51" pos:end="1413:51"><literal type="number" pos:start="1413:51" pos:end="1413:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1415:17" pos:end="1415:54"><expr pos:start="1415:17" pos:end="1415:53"><call pos:start="1415:17" pos:end="1415:53"><name pos:start="1415:17" pos:end="1415:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1415:34" pos:end="1415:53">(<argument pos:start="1415:35" pos:end="1415:42"><expr pos:start="1415:35" pos:end="1415:42"><name pos:start="1415:35" pos:end="1415:42"><name pos:start="1415:35" pos:end="1415:39">cpu_T</name><index pos:start="1415:40" pos:end="1415:42">[<expr pos:start="1415:41" pos:end="1415:41"><literal type="number" pos:start="1415:41" pos:end="1415:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1415:45" pos:end="1415:52"><expr pos:start="1415:45" pos:end="1415:52"><name pos:start="1415:45" pos:end="1415:52"><name pos:start="1415:45" pos:end="1415:49">cpu_T</name><index pos:start="1415:50" pos:end="1415:52">[<expr pos:start="1415:51" pos:end="1415:51"><literal type="number" pos:start="1415:51" pos:end="1415:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1417:17" pos:end="1417:61"><expr pos:start="1417:17" pos:end="1417:60"><call pos:start="1417:17" pos:end="1417:60"><name pos:start="1417:17" pos:end="1417:30">tcg_gen_mul_tl</name><argument_list pos:start="1417:31" pos:end="1417:60">(<argument pos:start="1417:32" pos:end="1417:39"><expr pos:start="1417:32" pos:end="1417:39"><name pos:start="1417:32" pos:end="1417:39"><name pos:start="1417:32" pos:end="1417:36">cpu_T</name><index pos:start="1417:37" pos:end="1417:39">[<expr pos:start="1417:38" pos:end="1417:38"><literal type="number" pos:start="1417:38" pos:end="1417:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1417:42" pos:end="1417:49"><expr pos:start="1417:42" pos:end="1417:49"><name pos:start="1417:42" pos:end="1417:49"><name pos:start="1417:42" pos:end="1417:46">cpu_T</name><index pos:start="1417:47" pos:end="1417:49">[<expr pos:start="1417:48" pos:end="1417:48"><literal type="number" pos:start="1417:48" pos:end="1417:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1417:52" pos:end="1417:59"><expr pos:start="1417:52" pos:end="1417:59"><name pos:start="1417:52" pos:end="1417:59"><name pos:start="1417:52" pos:end="1417:56">cpu_T</name><index pos:start="1417:57" pos:end="1417:59">[<expr pos:start="1417:58" pos:end="1417:58"><literal type="number" pos:start="1417:58" pos:end="1417:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1419:17" pos:end="1419:53"><expr pos:start="1419:17" pos:end="1419:52"><call pos:start="1419:17" pos:end="1419:52"><name pos:start="1419:17" pos:end="1419:30">tcg_gen_mov_tl</name><argument_list pos:start="1419:31" pos:end="1419:52">(<argument pos:start="1419:32" pos:end="1419:41"><expr pos:start="1419:32" pos:end="1419:41"><name pos:start="1419:32" pos:end="1419:41">cpu_cc_dst</name></expr></argument>, <argument pos:start="1419:44" pos:end="1419:51"><expr pos:start="1419:44" pos:end="1419:51"><name pos:start="1419:44" pos:end="1419:51"><name pos:start="1419:44" pos:end="1419:48">cpu_T</name><index pos:start="1419:49" pos:end="1419:51">[<expr pos:start="1419:50" pos:end="1419:50"><literal type="number" pos:start="1419:50" pos:end="1419:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1421:17" pos:end="1421:54"><expr pos:start="1421:17" pos:end="1421:53"><call pos:start="1421:17" pos:end="1421:53"><name pos:start="1421:17" pos:end="1421:33">tcg_gen_ext32s_tl</name><argument_list pos:start="1421:34" pos:end="1421:53">(<argument pos:start="1421:35" pos:end="1421:42"><expr pos:start="1421:35" pos:end="1421:42"><name pos:start="1421:35" pos:end="1421:42">cpu_tmp0</name></expr></argument>, <argument pos:start="1421:45" pos:end="1421:52"><expr pos:start="1421:45" pos:end="1421:52"><name pos:start="1421:45" pos:end="1421:52"><name pos:start="1421:45" pos:end="1421:49">cpu_T</name><index pos:start="1421:50" pos:end="1421:52">[<expr pos:start="1421:51" pos:end="1421:51"><literal type="number" pos:start="1421:51" pos:end="1421:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1423:17" pos:end="1426:0"><expr pos:start="1423:17" pos:end="1423:62"><call pos:start="1423:17" pos:end="1423:62"><name pos:start="1423:17" pos:end="1423:30">tcg_gen_sub_tl</name><argument_list pos:start="1423:31" pos:end="1423:62">(<argument pos:start="1423:32" pos:end="1423:41"><expr pos:start="1423:32" pos:end="1423:41"><name pos:start="1423:32" pos:end="1423:41">cpu_cc_src</name></expr></argument>, <argument pos:start="1423:44" pos:end="1423:51"><expr pos:start="1423:44" pos:end="1423:51"><name pos:start="1423:44" pos:end="1423:51"><name pos:start="1423:44" pos:end="1423:48">cpu_T</name><index pos:start="1423:49" pos:end="1423:51">[<expr pos:start="1423:50" pos:end="1423:50"><literal type="number" pos:start="1423:50" pos:end="1423:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1423:54" pos:end="1423:61"><expr pos:start="1423:54" pos:end="1423:61"><name pos:start="1423:54" pos:end="1423:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1425:1" pos:end="1425:5">#<cpp:directive pos:start="1425:2" pos:end="1425:5">else</cpp:directive></cpp:else>

                <block pos:start="1427:17" pos:end="1456:0">{<block_content pos:start="1429:21" pos:end="1451:67">

                    <decl_stmt pos:start="1429:21" pos:end="1429:36"><decl pos:start="1429:21" pos:end="1429:31"><type pos:start="1429:21" pos:end="1429:28"><name pos:start="1429:21" pos:end="1429:28">TCGv_i64</name></type> <name pos:start="1429:30" pos:end="1429:31">t0</name></decl>, <decl pos:start="1429:34" pos:end="1429:35"><type ref="prev" pos:start="1429:21" pos:end="1429:28"/><name pos:start="1429:34" pos:end="1429:35">t1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="1431:21" pos:end="1431:44"><expr pos:start="1431:21" pos:end="1431:43"><name pos:start="1431:21" pos:end="1431:22">t0</name> <operator pos:start="1431:24" pos:end="1431:24">=</operator> <call pos:start="1431:26" pos:end="1431:43"><name pos:start="1431:26" pos:end="1431:41">tcg_temp_new_i64</name><argument_list pos:start="1431:42" pos:end="1431:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1433:21" pos:end="1433:44"><expr pos:start="1433:21" pos:end="1433:43"><name pos:start="1433:21" pos:end="1433:22">t1</name> <operator pos:start="1433:24" pos:end="1433:24">=</operator> <call pos:start="1433:26" pos:end="1433:43"><name pos:start="1433:26" pos:end="1433:41">tcg_temp_new_i64</name><argument_list pos:start="1433:42" pos:end="1433:43">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1435:21" pos:end="1435:54"><expr pos:start="1435:21" pos:end="1435:53"><call pos:start="1435:21" pos:end="1435:53"><name pos:start="1435:21" pos:end="1435:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="1435:40" pos:end="1435:53">(<argument pos:start="1435:41" pos:end="1435:42"><expr pos:start="1435:41" pos:end="1435:42"><name pos:start="1435:41" pos:end="1435:42">t0</name></expr></argument>, <argument pos:start="1435:45" pos:end="1435:52"><expr pos:start="1435:45" pos:end="1435:52"><name pos:start="1435:45" pos:end="1435:52"><name pos:start="1435:45" pos:end="1435:49">cpu_T</name><index pos:start="1435:50" pos:end="1435:52">[<expr pos:start="1435:51" pos:end="1435:51"><literal type="number" pos:start="1435:51" pos:end="1435:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1437:21" pos:end="1437:54"><expr pos:start="1437:21" pos:end="1437:53"><call pos:start="1437:21" pos:end="1437:53"><name pos:start="1437:21" pos:end="1437:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="1437:40" pos:end="1437:53">(<argument pos:start="1437:41" pos:end="1437:42"><expr pos:start="1437:41" pos:end="1437:42"><name pos:start="1437:41" pos:end="1437:42">t1</name></expr></argument>, <argument pos:start="1437:45" pos:end="1437:52"><expr pos:start="1437:45" pos:end="1437:52"><name pos:start="1437:45" pos:end="1437:52"><name pos:start="1437:45" pos:end="1437:49">cpu_T</name><index pos:start="1437:50" pos:end="1437:52">[<expr pos:start="1437:51" pos:end="1437:51"><literal type="number" pos:start="1437:51" pos:end="1437:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1439:21" pos:end="1439:48"><expr pos:start="1439:21" pos:end="1439:47"><call pos:start="1439:21" pos:end="1439:47"><name pos:start="1439:21" pos:end="1439:35">tcg_gen_mul_i64</name><argument_list pos:start="1439:36" pos:end="1439:47">(<argument pos:start="1439:37" pos:end="1439:38"><expr pos:start="1439:37" pos:end="1439:38"><name pos:start="1439:37" pos:end="1439:38">t0</name></expr></argument>, <argument pos:start="1439:41" pos:end="1439:42"><expr pos:start="1439:41" pos:end="1439:42"><name pos:start="1439:41" pos:end="1439:42">t0</name></expr></argument>, <argument pos:start="1439:45" pos:end="1439:46"><expr pos:start="1439:45" pos:end="1439:46"><name pos:start="1439:45" pos:end="1439:46">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1441:21" pos:end="1441:56"><expr pos:start="1441:21" pos:end="1441:55"><call pos:start="1441:21" pos:end="1441:55"><name pos:start="1441:21" pos:end="1441:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1441:42" pos:end="1441:55">(<argument pos:start="1441:43" pos:end="1441:50"><expr pos:start="1441:43" pos:end="1441:50"><name pos:start="1441:43" pos:end="1441:50"><name pos:start="1441:43" pos:end="1441:47">cpu_T</name><index pos:start="1441:48" pos:end="1441:50">[<expr pos:start="1441:49" pos:end="1441:49"><literal type="number" pos:start="1441:49" pos:end="1441:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1441:53" pos:end="1441:54"><expr pos:start="1441:53" pos:end="1441:54"><name pos:start="1441:53" pos:end="1441:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1443:21" pos:end="1443:57"><expr pos:start="1443:21" pos:end="1443:56"><call pos:start="1443:21" pos:end="1443:56"><name pos:start="1443:21" pos:end="1443:34">tcg_gen_mov_tl</name><argument_list pos:start="1443:35" pos:end="1443:56">(<argument pos:start="1443:36" pos:end="1443:45"><expr pos:start="1443:36" pos:end="1443:45"><name pos:start="1443:36" pos:end="1443:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="1443:48" pos:end="1443:55"><expr pos:start="1443:48" pos:end="1443:55"><name pos:start="1443:48" pos:end="1443:55"><name pos:start="1443:48" pos:end="1443:52">cpu_T</name><index pos:start="1443:53" pos:end="1443:55">[<expr pos:start="1443:54" pos:end="1443:54"><literal type="number" pos:start="1443:54" pos:end="1443:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1445:21" pos:end="1445:60"><expr pos:start="1445:21" pos:end="1445:59"><call pos:start="1445:21" pos:end="1445:59"><name pos:start="1445:21" pos:end="1445:35">tcg_gen_sari_tl</name><argument_list pos:start="1445:36" pos:end="1445:59">(<argument pos:start="1445:37" pos:end="1445:44"><expr pos:start="1445:37" pos:end="1445:44"><name pos:start="1445:37" pos:end="1445:44">cpu_tmp0</name></expr></argument>, <argument pos:start="1445:47" pos:end="1445:54"><expr pos:start="1445:47" pos:end="1445:54"><name pos:start="1445:47" pos:end="1445:54"><name pos:start="1445:47" pos:end="1445:51">cpu_T</name><index pos:start="1445:52" pos:end="1445:54">[<expr pos:start="1445:53" pos:end="1445:53"><literal type="number" pos:start="1445:53" pos:end="1445:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1445:57" pos:end="1445:58"><expr pos:start="1445:57" pos:end="1445:58"><literal type="number" pos:start="1445:57" pos:end="1445:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1447:21" pos:end="1447:49"><expr pos:start="1447:21" pos:end="1447:48"><call pos:start="1447:21" pos:end="1447:48"><name pos:start="1447:21" pos:end="1447:36">tcg_gen_shri_i64</name><argument_list pos:start="1447:37" pos:end="1447:48">(<argument pos:start="1447:38" pos:end="1447:39"><expr pos:start="1447:38" pos:end="1447:39"><name pos:start="1447:38" pos:end="1447:39">t0</name></expr></argument>, <argument pos:start="1447:42" pos:end="1447:43"><expr pos:start="1447:42" pos:end="1447:43"><name pos:start="1447:42" pos:end="1447:43">t0</name></expr></argument>, <argument pos:start="1447:46" pos:end="1447:47"><expr pos:start="1447:46" pos:end="1447:47"><literal type="number" pos:start="1447:46" pos:end="1447:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1449:21" pos:end="1449:56"><expr pos:start="1449:21" pos:end="1449:55"><call pos:start="1449:21" pos:end="1449:55"><name pos:start="1449:21" pos:end="1449:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1449:42" pos:end="1449:55">(<argument pos:start="1449:43" pos:end="1449:50"><expr pos:start="1449:43" pos:end="1449:50"><name pos:start="1449:43" pos:end="1449:50"><name pos:start="1449:43" pos:end="1449:47">cpu_T</name><index pos:start="1449:48" pos:end="1449:50">[<expr pos:start="1449:49" pos:end="1449:49"><literal type="number" pos:start="1449:49" pos:end="1449:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1449:53" pos:end="1449:54"><expr pos:start="1449:53" pos:end="1449:54"><name pos:start="1449:53" pos:end="1449:54">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1451:21" pos:end="1451:67"><expr pos:start="1451:21" pos:end="1451:66"><call pos:start="1451:21" pos:end="1451:66"><name pos:start="1451:21" pos:end="1451:34">tcg_gen_sub_tl</name><argument_list pos:start="1451:35" pos:end="1451:66">(<argument pos:start="1451:36" pos:end="1451:45"><expr pos:start="1451:36" pos:end="1451:45"><name pos:start="1451:36" pos:end="1451:45">cpu_cc_src</name></expr></argument>, <argument pos:start="1451:48" pos:end="1451:55"><expr pos:start="1451:48" pos:end="1451:55"><name pos:start="1451:48" pos:end="1451:55"><name pos:start="1451:48" pos:end="1451:52">cpu_T</name><index pos:start="1451:53" pos:end="1451:55">[<expr pos:start="1451:54" pos:end="1451:54"><literal type="number" pos:start="1451:54" pos:end="1451:54">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1451:58" pos:end="1451:65"><expr pos:start="1451:58" pos:end="1451:65"><name pos:start="1451:58" pos:end="1451:65">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

<cpp:endif pos:start="1455:1" pos:end="1455:6">#<cpp:directive pos:start="1455:2" pos:end="1455:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="1457:11" pos:end="1473:9">else <block pos:start="1457:16" pos:end="1473:9">{<block_content pos:start="1459:13" pos:end="1471:59">

            <expr_stmt pos:start="1459:13" pos:end="1459:50"><expr pos:start="1459:13" pos:end="1459:49"><call pos:start="1459:13" pos:end="1459:49"><name pos:start="1459:13" pos:end="1459:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1459:30" pos:end="1459:49">(<argument pos:start="1459:31" pos:end="1459:38"><expr pos:start="1459:31" pos:end="1459:38"><name pos:start="1459:31" pos:end="1459:38"><name pos:start="1459:31" pos:end="1459:35">cpu_T</name><index pos:start="1459:36" pos:end="1459:38">[<expr pos:start="1459:37" pos:end="1459:37"><literal type="number" pos:start="1459:37" pos:end="1459:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1459:41" pos:end="1459:48"><expr pos:start="1459:41" pos:end="1459:48"><name pos:start="1459:41" pos:end="1459:48"><name pos:start="1459:41" pos:end="1459:45">cpu_T</name><index pos:start="1459:46" pos:end="1459:48">[<expr pos:start="1459:47" pos:end="1459:47"><literal type="number" pos:start="1459:47" pos:end="1459:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1461:13" pos:end="1461:50"><expr pos:start="1461:13" pos:end="1461:49"><call pos:start="1461:13" pos:end="1461:49"><name pos:start="1461:13" pos:end="1461:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1461:30" pos:end="1461:49">(<argument pos:start="1461:31" pos:end="1461:38"><expr pos:start="1461:31" pos:end="1461:38"><name pos:start="1461:31" pos:end="1461:38"><name pos:start="1461:31" pos:end="1461:35">cpu_T</name><index pos:start="1461:36" pos:end="1461:38">[<expr pos:start="1461:37" pos:end="1461:37"><literal type="number" pos:start="1461:37" pos:end="1461:37">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1461:41" pos:end="1461:48"><expr pos:start="1461:41" pos:end="1461:48"><name pos:start="1461:41" pos:end="1461:48"><name pos:start="1461:41" pos:end="1461:45">cpu_T</name><index pos:start="1461:46" pos:end="1461:48">[<expr pos:start="1461:47" pos:end="1461:47"><literal type="number" pos:start="1461:47" pos:end="1461:47">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1463:13" pos:end="1463:59">/* XXX: use 32 bit mul which could be faster */</comment>

            <expr_stmt pos:start="1465:13" pos:end="1465:57"><expr pos:start="1465:13" pos:end="1465:56"><call pos:start="1465:13" pos:end="1465:56"><name pos:start="1465:13" pos:end="1465:26">tcg_gen_mul_tl</name><argument_list pos:start="1465:27" pos:end="1465:56">(<argument pos:start="1465:28" pos:end="1465:35"><expr pos:start="1465:28" pos:end="1465:35"><name pos:start="1465:28" pos:end="1465:35"><name pos:start="1465:28" pos:end="1465:32">cpu_T</name><index pos:start="1465:33" pos:end="1465:35">[<expr pos:start="1465:34" pos:end="1465:34"><literal type="number" pos:start="1465:34" pos:end="1465:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1465:38" pos:end="1465:45"><expr pos:start="1465:38" pos:end="1465:45"><name pos:start="1465:38" pos:end="1465:45"><name pos:start="1465:38" pos:end="1465:42">cpu_T</name><index pos:start="1465:43" pos:end="1465:45">[<expr pos:start="1465:44" pos:end="1465:44"><literal type="number" pos:start="1465:44" pos:end="1465:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1465:48" pos:end="1465:55"><expr pos:start="1465:48" pos:end="1465:55"><name pos:start="1465:48" pos:end="1465:55"><name pos:start="1465:48" pos:end="1465:52">cpu_T</name><index pos:start="1465:53" pos:end="1465:55">[<expr pos:start="1465:54" pos:end="1465:54"><literal type="number" pos:start="1465:54" pos:end="1465:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1467:13" pos:end="1467:49"><expr pos:start="1467:13" pos:end="1467:48"><call pos:start="1467:13" pos:end="1467:48"><name pos:start="1467:13" pos:end="1467:26">tcg_gen_mov_tl</name><argument_list pos:start="1467:27" pos:end="1467:48">(<argument pos:start="1467:28" pos:end="1467:37"><expr pos:start="1467:28" pos:end="1467:37"><name pos:start="1467:28" pos:end="1467:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1467:40" pos:end="1467:47"><expr pos:start="1467:40" pos:end="1467:47"><name pos:start="1467:40" pos:end="1467:47"><name pos:start="1467:40" pos:end="1467:44">cpu_T</name><index pos:start="1467:45" pos:end="1467:47">[<expr pos:start="1467:46" pos:end="1467:46"><literal type="number" pos:start="1467:46" pos:end="1467:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1469:13" pos:end="1469:50"><expr pos:start="1469:13" pos:end="1469:49"><call pos:start="1469:13" pos:end="1469:49"><name pos:start="1469:13" pos:end="1469:29">tcg_gen_ext16s_tl</name><argument_list pos:start="1469:30" pos:end="1469:49">(<argument pos:start="1469:31" pos:end="1469:38"><expr pos:start="1469:31" pos:end="1469:38"><name pos:start="1469:31" pos:end="1469:38">cpu_tmp0</name></expr></argument>, <argument pos:start="1469:41" pos:end="1469:48"><expr pos:start="1469:41" pos:end="1469:48"><name pos:start="1469:41" pos:end="1469:48"><name pos:start="1469:41" pos:end="1469:45">cpu_T</name><index pos:start="1469:46" pos:end="1469:48">[<expr pos:start="1469:47" pos:end="1469:47"><literal type="number" pos:start="1469:47" pos:end="1469:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1471:13" pos:end="1471:59"><expr pos:start="1471:13" pos:end="1471:58"><call pos:start="1471:13" pos:end="1471:58"><name pos:start="1471:13" pos:end="1471:26">tcg_gen_sub_tl</name><argument_list pos:start="1471:27" pos:end="1471:58">(<argument pos:start="1471:28" pos:end="1471:37"><expr pos:start="1471:28" pos:end="1471:37"><name pos:start="1471:28" pos:end="1471:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1471:40" pos:end="1471:47"><expr pos:start="1471:40" pos:end="1471:47"><name pos:start="1471:40" pos:end="1471:47"><name pos:start="1471:40" pos:end="1471:44">cpu_T</name><index pos:start="1471:45" pos:end="1471:47">[<expr pos:start="1471:46" pos:end="1471:46"><literal type="number" pos:start="1471:46" pos:end="1471:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1471:50" pos:end="1471:57"><expr pos:start="1471:50" pos:end="1471:57"><name pos:start="1471:50" pos:end="1471:57">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1475:9" pos:end="1475:35"><expr pos:start="1475:9" pos:end="1475:34"><call pos:start="1475:9" pos:end="1475:34"><name pos:start="1475:9" pos:end="1475:25">gen_op_mov_reg_T0</name><argument_list pos:start="1475:26" pos:end="1475:34">(<argument pos:start="1475:27" pos:end="1475:28"><expr pos:start="1475:27" pos:end="1475:28"><name pos:start="1475:27" pos:end="1475:28">ot</name></expr></argument>, <argument pos:start="1475:31" pos:end="1475:33"><expr pos:start="1475:31" pos:end="1475:33"><name pos:start="1475:31" pos:end="1475:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1477:9" pos:end="1477:35"><expr pos:start="1477:9" pos:end="1477:34"><name pos:start="1477:9" pos:end="1477:16"><name pos:start="1477:9" pos:end="1477:9">s</name><operator pos:start="1477:10" pos:end="1477:11">-&gt;</operator><name pos:start="1477:12" pos:end="1477:16">cc_op</name></name> <operator pos:start="1477:18" pos:end="1477:18">=</operator> <name pos:start="1477:20" pos:end="1477:29">CC_OP_MULB</name> <operator pos:start="1477:31" pos:end="1477:31">+</operator> <name pos:start="1477:33" pos:end="1477:34">ot</name></expr>;</expr_stmt>

        <break pos:start="1479:9" pos:end="1479:14">break;</break>

    <case pos:start="1481:5" pos:end="1481:15">case <expr pos:start="1481:10" pos:end="1481:14"><literal type="number" pos:start="1481:10" pos:end="1481:14">0x1c0</literal></expr>:</case>

    <case pos:start="1483:5" pos:end="1483:15">case <expr pos:start="1483:10" pos:end="1483:14"><literal type="number" pos:start="1483:10" pos:end="1483:14">0x1c1</literal></expr>:</case> <comment type="block" pos:start="1483:17" pos:end="1483:33">/* xadd Ev, Gv */</comment>

        <if_stmt pos:start="1485:9" pos:end="1491:33"><if pos:start="1485:9" pos:end="1487:25">if <condition pos:start="1485:12" pos:end="1485:25">(<expr pos:start="1485:13" pos:end="1485:24"><operator pos:start="1485:13" pos:end="1485:13">(</operator><name pos:start="1485:14" pos:end="1485:14">b</name> <operator pos:start="1485:16" pos:end="1485:16">&amp;</operator> <literal type="number" pos:start="1485:18" pos:end="1485:18">1</literal><operator pos:start="1485:19" pos:end="1485:19">)</operator> <operator pos:start="1485:21" pos:end="1485:22">==</operator> <literal type="number" pos:start="1485:24" pos:end="1485:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1487:13" pos:end="1487:25"><block_content pos:start="1487:13" pos:end="1487:25">

            <expr_stmt pos:start="1487:13" pos:end="1487:25"><expr pos:start="1487:13" pos:end="1487:24"><name pos:start="1487:13" pos:end="1487:14">ot</name> <operator pos:start="1487:16" pos:end="1487:16">=</operator> <name pos:start="1487:18" pos:end="1487:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1489:9" pos:end="1491:33">else<block type="pseudo" pos:start="1491:13" pos:end="1491:33"><block_content pos:start="1491:13" pos:end="1491:33">

            <expr_stmt pos:start="1491:13" pos:end="1491:33"><expr pos:start="1491:13" pos:end="1491:32"><name pos:start="1491:13" pos:end="1491:14">ot</name> <operator pos:start="1491:16" pos:end="1491:16">=</operator> <name pos:start="1491:18" pos:end="1491:22">dflag</name> <operator pos:start="1491:24" pos:end="1491:24">+</operator> <name pos:start="1491:26" pos:end="1491:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1493:9" pos:end="1493:55"><expr pos:start="1493:9" pos:end="1493:54"><name pos:start="1493:9" pos:end="1493:13">modrm</name> <operator pos:start="1493:15" pos:end="1493:15">=</operator> <call pos:start="1493:17" pos:end="1493:54"><name pos:start="1493:17" pos:end="1493:29">cpu_ldub_code</name><argument_list pos:start="1493:30" pos:end="1493:54">(<argument pos:start="1493:31" pos:end="1493:44"><expr pos:start="1493:31" pos:end="1493:44"><name pos:start="1493:31" pos:end="1493:44">cpu_single_env</name></expr></argument>, <argument pos:start="1493:47" pos:end="1493:53"><expr pos:start="1493:47" pos:end="1493:53"><name pos:start="1493:47" pos:end="1493:51"><name pos:start="1493:47" pos:end="1493:47">s</name><operator pos:start="1493:48" pos:end="1493:49">-&gt;</operator><name pos:start="1493:50" pos:end="1493:51">pc</name></name><operator pos:start="1493:52" pos:end="1493:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1495:9" pos:end="1495:41"><expr pos:start="1495:9" pos:end="1495:40"><name pos:start="1495:9" pos:end="1495:11">reg</name> <operator pos:start="1495:13" pos:end="1495:13">=</operator> <operator pos:start="1495:15" pos:end="1495:15">(</operator><operator pos:start="1495:16" pos:end="1495:16">(</operator><name pos:start="1495:17" pos:end="1495:21">modrm</name> <operator pos:start="1495:23" pos:end="1495:24">&gt;&gt;</operator> <literal type="number" pos:start="1495:26" pos:end="1495:26">3</literal><operator pos:start="1495:27" pos:end="1495:27">)</operator> <operator pos:start="1495:29" pos:end="1495:29">&amp;</operator> <literal type="number" pos:start="1495:31" pos:end="1495:31">7</literal><operator pos:start="1495:32" pos:end="1495:32">)</operator> <operator pos:start="1495:34" pos:end="1495:34">|</operator> <name pos:start="1495:36" pos:end="1495:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1497:9" pos:end="1497:31"><expr pos:start="1497:9" pos:end="1497:30"><name pos:start="1497:9" pos:end="1497:11">mod</name> <operator pos:start="1497:13" pos:end="1497:13">=</operator> <operator pos:start="1497:15" pos:end="1497:15">(</operator><name pos:start="1497:16" pos:end="1497:20">modrm</name> <operator pos:start="1497:22" pos:end="1497:23">&gt;&gt;</operator> <literal type="number" pos:start="1497:25" pos:end="1497:25">6</literal><operator pos:start="1497:26" pos:end="1497:26">)</operator> <operator pos:start="1497:28" pos:end="1497:28">&amp;</operator> <literal type="number" pos:start="1497:30" pos:end="1497:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1499:9" pos:end="1527:9"><if pos:start="1499:9" pos:end="1513:9">if <condition pos:start="1499:12" pos:end="1499:21">(<expr pos:start="1499:13" pos:end="1499:20"><name pos:start="1499:13" pos:end="1499:15">mod</name> <operator pos:start="1499:17" pos:end="1499:18">==</operator> <literal type="number" pos:start="1499:20" pos:end="1499:20">3</literal></expr>)</condition> <block pos:start="1499:23" pos:end="1513:9">{<block_content pos:start="1501:13" pos:end="1511:38">

            <expr_stmt pos:start="1501:13" pos:end="1501:40"><expr pos:start="1501:13" pos:end="1501:39"><name pos:start="1501:13" pos:end="1501:14">rm</name> <operator pos:start="1501:16" pos:end="1501:16">=</operator> <operator pos:start="1501:18" pos:end="1501:18">(</operator><name pos:start="1501:19" pos:end="1501:23">modrm</name> <operator pos:start="1501:25" pos:end="1501:25">&amp;</operator> <literal type="number" pos:start="1501:27" pos:end="1501:27">7</literal><operator pos:start="1501:28" pos:end="1501:28">)</operator> <operator pos:start="1501:30" pos:end="1501:30">|</operator> <call pos:start="1501:32" pos:end="1501:39"><name pos:start="1501:32" pos:end="1501:36">REX_B</name><argument_list pos:start="1501:37" pos:end="1501:39">(<argument pos:start="1501:38" pos:end="1501:38"><expr pos:start="1501:38" pos:end="1501:38"><name pos:start="1501:38" pos:end="1501:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1503:13" pos:end="1503:42"><expr pos:start="1503:13" pos:end="1503:41"><call pos:start="1503:13" pos:end="1503:41"><name pos:start="1503:13" pos:end="1503:29">gen_op_mov_TN_reg</name><argument_list pos:start="1503:30" pos:end="1503:41">(<argument pos:start="1503:31" pos:end="1503:32"><expr pos:start="1503:31" pos:end="1503:32"><name pos:start="1503:31" pos:end="1503:32">ot</name></expr></argument>, <argument pos:start="1503:35" pos:end="1503:35"><expr pos:start="1503:35" pos:end="1503:35"><literal type="number" pos:start="1503:35" pos:end="1503:35">0</literal></expr></argument>, <argument pos:start="1503:38" pos:end="1503:40"><expr pos:start="1503:38" pos:end="1503:40"><name pos:start="1503:38" pos:end="1503:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1505:13" pos:end="1505:41"><expr pos:start="1505:13" pos:end="1505:40"><call pos:start="1505:13" pos:end="1505:40"><name pos:start="1505:13" pos:end="1505:29">gen_op_mov_TN_reg</name><argument_list pos:start="1505:30" pos:end="1505:40">(<argument pos:start="1505:31" pos:end="1505:32"><expr pos:start="1505:31" pos:end="1505:32"><name pos:start="1505:31" pos:end="1505:32">ot</name></expr></argument>, <argument pos:start="1505:35" pos:end="1505:35"><expr pos:start="1505:35" pos:end="1505:35"><literal type="number" pos:start="1505:35" pos:end="1505:35">1</literal></expr></argument>, <argument pos:start="1505:38" pos:end="1505:39"><expr pos:start="1505:38" pos:end="1505:39"><name pos:start="1505:38" pos:end="1505:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1507:13" pos:end="1507:32"><expr pos:start="1507:13" pos:end="1507:31"><call pos:start="1507:13" pos:end="1507:31"><name pos:start="1507:13" pos:end="1507:29">gen_op_addl_T0_T1</name><argument_list pos:start="1507:30" pos:end="1507:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1509:13" pos:end="1509:39"><expr pos:start="1509:13" pos:end="1509:38"><call pos:start="1509:13" pos:end="1509:38"><name pos:start="1509:13" pos:end="1509:29">gen_op_mov_reg_T1</name><argument_list pos:start="1509:30" pos:end="1509:38">(<argument pos:start="1509:31" pos:end="1509:32"><expr pos:start="1509:31" pos:end="1509:32"><name pos:start="1509:31" pos:end="1509:32">ot</name></expr></argument>, <argument pos:start="1509:35" pos:end="1509:37"><expr pos:start="1509:35" pos:end="1509:37"><name pos:start="1509:35" pos:end="1509:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1511:13" pos:end="1511:38"><expr pos:start="1511:13" pos:end="1511:37"><call pos:start="1511:13" pos:end="1511:37"><name pos:start="1511:13" pos:end="1511:29">gen_op_mov_reg_T0</name><argument_list pos:start="1511:30" pos:end="1511:37">(<argument pos:start="1511:31" pos:end="1511:32"><expr pos:start="1511:31" pos:end="1511:32"><name pos:start="1511:31" pos:end="1511:32">ot</name></expr></argument>, <argument pos:start="1511:35" pos:end="1511:36"><expr pos:start="1511:35" pos:end="1511:36"><name pos:start="1511:35" pos:end="1511:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1513:11" pos:end="1527:9">else <block pos:start="1513:16" pos:end="1527:9">{<block_content pos:start="1515:13" pos:end="1525:39">

            <expr_stmt pos:start="1515:13" pos:end="1515:61"><expr pos:start="1515:13" pos:end="1515:60"><call pos:start="1515:13" pos:end="1515:60"><name pos:start="1515:13" pos:end="1515:25">gen_lea_modrm</name><argument_list pos:start="1515:26" pos:end="1515:60">(<argument pos:start="1515:27" pos:end="1515:27"><expr pos:start="1515:27" pos:end="1515:27"><name pos:start="1515:27" pos:end="1515:27">s</name></expr></argument>, <argument pos:start="1515:30" pos:end="1515:34"><expr pos:start="1515:30" pos:end="1515:34"><name pos:start="1515:30" pos:end="1515:34">modrm</name></expr></argument>, <argument pos:start="1515:37" pos:end="1515:45"><expr pos:start="1515:37" pos:end="1515:45"><operator pos:start="1515:37" pos:end="1515:37">&amp;</operator><name pos:start="1515:38" pos:end="1515:45">reg_addr</name></expr></argument>, <argument pos:start="1515:48" pos:end="1515:59"><expr pos:start="1515:48" pos:end="1515:59"><operator pos:start="1515:48" pos:end="1515:48">&amp;</operator><name pos:start="1515:49" pos:end="1515:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1517:13" pos:end="1517:42"><expr pos:start="1517:13" pos:end="1517:41"><call pos:start="1517:13" pos:end="1517:41"><name pos:start="1517:13" pos:end="1517:29">gen_op_mov_TN_reg</name><argument_list pos:start="1517:30" pos:end="1517:41">(<argument pos:start="1517:31" pos:end="1517:32"><expr pos:start="1517:31" pos:end="1517:32"><name pos:start="1517:31" pos:end="1517:32">ot</name></expr></argument>, <argument pos:start="1517:35" pos:end="1517:35"><expr pos:start="1517:35" pos:end="1517:35"><literal type="number" pos:start="1517:35" pos:end="1517:35">0</literal></expr></argument>, <argument pos:start="1517:38" pos:end="1517:40"><expr pos:start="1517:38" pos:end="1517:40"><name pos:start="1517:38" pos:end="1517:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1519:13" pos:end="1519:47"><expr pos:start="1519:13" pos:end="1519:46"><call pos:start="1519:13" pos:end="1519:46"><name pos:start="1519:13" pos:end="1519:27">gen_op_ld_T1_A0</name><argument_list pos:start="1519:28" pos:end="1519:46">(<argument pos:start="1519:29" pos:end="1519:45"><expr pos:start="1519:29" pos:end="1519:45"><name pos:start="1519:29" pos:end="1519:30">ot</name> <operator pos:start="1519:32" pos:end="1519:32">+</operator> <name pos:start="1519:34" pos:end="1519:45"><name pos:start="1519:34" pos:end="1519:34">s</name><operator pos:start="1519:35" pos:end="1519:36">-&gt;</operator><name pos:start="1519:37" pos:end="1519:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1521:13" pos:end="1521:32"><expr pos:start="1521:13" pos:end="1521:31"><call pos:start="1521:13" pos:end="1521:31"><name pos:start="1521:13" pos:end="1521:29">gen_op_addl_T0_T1</name><argument_list pos:start="1521:30" pos:end="1521:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1523:13" pos:end="1523:47"><expr pos:start="1523:13" pos:end="1523:46"><call pos:start="1523:13" pos:end="1523:46"><name pos:start="1523:13" pos:end="1523:27">gen_op_st_T0_A0</name><argument_list pos:start="1523:28" pos:end="1523:46">(<argument pos:start="1523:29" pos:end="1523:45"><expr pos:start="1523:29" pos:end="1523:45"><name pos:start="1523:29" pos:end="1523:30">ot</name> <operator pos:start="1523:32" pos:end="1523:32">+</operator> <name pos:start="1523:34" pos:end="1523:45"><name pos:start="1523:34" pos:end="1523:34">s</name><operator pos:start="1523:35" pos:end="1523:36">-&gt;</operator><name pos:start="1523:37" pos:end="1523:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1525:13" pos:end="1525:39"><expr pos:start="1525:13" pos:end="1525:38"><call pos:start="1525:13" pos:end="1525:38"><name pos:start="1525:13" pos:end="1525:29">gen_op_mov_reg_T1</name><argument_list pos:start="1525:30" pos:end="1525:38">(<argument pos:start="1525:31" pos:end="1525:32"><expr pos:start="1525:31" pos:end="1525:32"><name pos:start="1525:31" pos:end="1525:32">ot</name></expr></argument>, <argument pos:start="1525:35" pos:end="1525:37"><expr pos:start="1525:35" pos:end="1525:37"><name pos:start="1525:35" pos:end="1525:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1529:9" pos:end="1529:28"><expr pos:start="1529:9" pos:end="1529:27"><call pos:start="1529:9" pos:end="1529:27"><name pos:start="1529:9" pos:end="1529:25">gen_op_update2_cc</name><argument_list pos:start="1529:26" pos:end="1529:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1531:9" pos:end="1531:35"><expr pos:start="1531:9" pos:end="1531:34"><name pos:start="1531:9" pos:end="1531:16"><name pos:start="1531:9" pos:end="1531:9">s</name><operator pos:start="1531:10" pos:end="1531:11">-&gt;</operator><name pos:start="1531:12" pos:end="1531:16">cc_op</name></name> <operator pos:start="1531:18" pos:end="1531:18">=</operator> <name pos:start="1531:20" pos:end="1531:29">CC_OP_ADDB</name> <operator pos:start="1531:31" pos:end="1531:31">+</operator> <name pos:start="1531:33" pos:end="1531:34">ot</name></expr>;</expr_stmt>

        <break pos:start="1533:9" pos:end="1533:14">break;</break>

    <case pos:start="1535:5" pos:end="1535:15">case <expr pos:start="1535:10" pos:end="1535:14"><literal type="number" pos:start="1535:10" pos:end="1535:14">0x1b0</literal></expr>:</case>

    <case pos:start="1537:5" pos:end="1537:15">case <expr pos:start="1537:10" pos:end="1537:14"><literal type="number" pos:start="1537:10" pos:end="1537:14">0x1b1</literal></expr>:</case> <comment type="block" pos:start="1537:17" pos:end="1537:36">/* cmpxchg Ev, Gv */</comment>

        <block pos:start="1539:9" pos:end="1645:9">{<block_content pos:start="1541:13" pos:end="1643:30">

            <decl_stmt pos:start="1541:13" pos:end="1541:31"><decl pos:start="1541:13" pos:end="1541:22"><type pos:start="1541:13" pos:end="1541:15"><name pos:start="1541:13" pos:end="1541:15">int</name></type> <name pos:start="1541:17" pos:end="1541:22">label1</name></decl>, <decl pos:start="1541:25" pos:end="1541:30"><type ref="prev" pos:start="1541:13" pos:end="1541:15"/><name pos:start="1541:25" pos:end="1541:30">label2</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1543:13" pos:end="1543:32"><decl pos:start="1543:13" pos:end="1543:19"><type pos:start="1543:13" pos:end="1543:16"><name pos:start="1543:13" pos:end="1543:16">TCGv</name></type> <name pos:start="1543:18" pos:end="1543:19">t0</name></decl>, <decl pos:start="1543:22" pos:end="1543:23"><type ref="prev" pos:start="1543:13" pos:end="1543:16"/><name pos:start="1543:22" pos:end="1543:23">t1</name></decl>, <decl pos:start="1543:26" pos:end="1543:27"><type ref="prev" pos:start="1543:13" pos:end="1543:16"/><name pos:start="1543:26" pos:end="1543:27">t2</name></decl>, <decl pos:start="1543:30" pos:end="1543:31"><type ref="prev" pos:start="1543:13" pos:end="1543:16"/><name pos:start="1543:30" pos:end="1543:31">a0</name></decl>;</decl_stmt>



            <if_stmt pos:start="1547:13" pos:end="1553:37"><if pos:start="1547:13" pos:end="1549:29">if <condition pos:start="1547:16" pos:end="1547:29">(<expr pos:start="1547:17" pos:end="1547:28"><operator pos:start="1547:17" pos:end="1547:17">(</operator><name pos:start="1547:18" pos:end="1547:18">b</name> <operator pos:start="1547:20" pos:end="1547:20">&amp;</operator> <literal type="number" pos:start="1547:22" pos:end="1547:22">1</literal><operator pos:start="1547:23" pos:end="1547:23">)</operator> <operator pos:start="1547:25" pos:end="1547:26">==</operator> <literal type="number" pos:start="1547:28" pos:end="1547:28">0</literal></expr>)</condition><block type="pseudo" pos:start="1549:17" pos:end="1549:29"><block_content pos:start="1549:17" pos:end="1549:29">

                <expr_stmt pos:start="1549:17" pos:end="1549:29"><expr pos:start="1549:17" pos:end="1549:28"><name pos:start="1549:17" pos:end="1549:18">ot</name> <operator pos:start="1549:20" pos:end="1549:20">=</operator> <name pos:start="1549:22" pos:end="1549:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1551:13" pos:end="1553:37">else<block type="pseudo" pos:start="1553:17" pos:end="1553:37"><block_content pos:start="1553:17" pos:end="1553:37">

                <expr_stmt pos:start="1553:17" pos:end="1553:37"><expr pos:start="1553:17" pos:end="1553:36"><name pos:start="1553:17" pos:end="1553:18">ot</name> <operator pos:start="1553:20" pos:end="1553:20">=</operator> <name pos:start="1553:22" pos:end="1553:26">dflag</name> <operator pos:start="1553:28" pos:end="1553:28">+</operator> <name pos:start="1553:30" pos:end="1553:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1555:13" pos:end="1555:59"><expr pos:start="1555:13" pos:end="1555:58"><name pos:start="1555:13" pos:end="1555:17">modrm</name> <operator pos:start="1555:19" pos:end="1555:19">=</operator> <call pos:start="1555:21" pos:end="1555:58"><name pos:start="1555:21" pos:end="1555:33">cpu_ldub_code</name><argument_list pos:start="1555:34" pos:end="1555:58">(<argument pos:start="1555:35" pos:end="1555:48"><expr pos:start="1555:35" pos:end="1555:48"><name pos:start="1555:35" pos:end="1555:48">cpu_single_env</name></expr></argument>, <argument pos:start="1555:51" pos:end="1555:57"><expr pos:start="1555:51" pos:end="1555:57"><name pos:start="1555:51" pos:end="1555:55"><name pos:start="1555:51" pos:end="1555:51">s</name><operator pos:start="1555:52" pos:end="1555:53">-&gt;</operator><name pos:start="1555:54" pos:end="1555:55">pc</name></name><operator pos:start="1555:56" pos:end="1555:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1557:13" pos:end="1557:45"><expr pos:start="1557:13" pos:end="1557:44"><name pos:start="1557:13" pos:end="1557:15">reg</name> <operator pos:start="1557:17" pos:end="1557:17">=</operator> <operator pos:start="1557:19" pos:end="1557:19">(</operator><operator pos:start="1557:20" pos:end="1557:20">(</operator><name pos:start="1557:21" pos:end="1557:25">modrm</name> <operator pos:start="1557:27" pos:end="1557:28">&gt;&gt;</operator> <literal type="number" pos:start="1557:30" pos:end="1557:30">3</literal><operator pos:start="1557:31" pos:end="1557:31">)</operator> <operator pos:start="1557:33" pos:end="1557:33">&amp;</operator> <literal type="number" pos:start="1557:35" pos:end="1557:35">7</literal><operator pos:start="1557:36" pos:end="1557:36">)</operator> <operator pos:start="1557:38" pos:end="1557:38">|</operator> <name pos:start="1557:40" pos:end="1557:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1559:13" pos:end="1559:35"><expr pos:start="1559:13" pos:end="1559:34"><name pos:start="1559:13" pos:end="1559:15">mod</name> <operator pos:start="1559:17" pos:end="1559:17">=</operator> <operator pos:start="1559:19" pos:end="1559:19">(</operator><name pos:start="1559:20" pos:end="1559:24">modrm</name> <operator pos:start="1559:26" pos:end="1559:27">&gt;&gt;</operator> <literal type="number" pos:start="1559:29" pos:end="1559:29">6</literal><operator pos:start="1559:30" pos:end="1559:30">)</operator> <operator pos:start="1559:32" pos:end="1559:32">&amp;</operator> <literal type="number" pos:start="1559:34" pos:end="1559:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1561:13" pos:end="1561:38"><expr pos:start="1561:13" pos:end="1561:37"><name pos:start="1561:13" pos:end="1561:14">t0</name> <operator pos:start="1561:16" pos:end="1561:16">=</operator> <call pos:start="1561:18" pos:end="1561:37"><name pos:start="1561:18" pos:end="1561:35">tcg_temp_local_new</name><argument_list pos:start="1561:36" pos:end="1561:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1563:13" pos:end="1563:38"><expr pos:start="1563:13" pos:end="1563:37"><name pos:start="1563:13" pos:end="1563:14">t1</name> <operator pos:start="1563:16" pos:end="1563:16">=</operator> <call pos:start="1563:18" pos:end="1563:37"><name pos:start="1563:18" pos:end="1563:35">tcg_temp_local_new</name><argument_list pos:start="1563:36" pos:end="1563:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1565:13" pos:end="1565:38"><expr pos:start="1565:13" pos:end="1565:37"><name pos:start="1565:13" pos:end="1565:14">t2</name> <operator pos:start="1565:16" pos:end="1565:16">=</operator> <call pos:start="1565:18" pos:end="1565:37"><name pos:start="1565:18" pos:end="1565:35">tcg_temp_local_new</name><argument_list pos:start="1565:36" pos:end="1565:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1567:13" pos:end="1567:38"><expr pos:start="1567:13" pos:end="1567:37"><name pos:start="1567:13" pos:end="1567:14">a0</name> <operator pos:start="1567:16" pos:end="1567:16">=</operator> <call pos:start="1567:18" pos:end="1567:37"><name pos:start="1567:18" pos:end="1567:35">tcg_temp_local_new</name><argument_list pos:start="1567:36" pos:end="1567:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1569:13" pos:end="1569:42"><expr pos:start="1569:13" pos:end="1569:41"><call pos:start="1569:13" pos:end="1569:41"><name pos:start="1569:13" pos:end="1569:28">gen_op_mov_v_reg</name><argument_list pos:start="1569:29" pos:end="1569:41">(<argument pos:start="1569:30" pos:end="1569:31"><expr pos:start="1569:30" pos:end="1569:31"><name pos:start="1569:30" pos:end="1569:31">ot</name></expr></argument>, <argument pos:start="1569:34" pos:end="1569:35"><expr pos:start="1569:34" pos:end="1569:35"><name pos:start="1569:34" pos:end="1569:35">t1</name></expr></argument>, <argument pos:start="1569:38" pos:end="1569:40"><expr pos:start="1569:38" pos:end="1569:40"><name pos:start="1569:38" pos:end="1569:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1571:13" pos:end="1587:13"><if pos:start="1571:13" pos:end="1577:13">if <condition pos:start="1571:16" pos:end="1571:25">(<expr pos:start="1571:17" pos:end="1571:24"><name pos:start="1571:17" pos:end="1571:19">mod</name> <operator pos:start="1571:21" pos:end="1571:22">==</operator> <literal type="number" pos:start="1571:24" pos:end="1571:24">3</literal></expr>)</condition> <block pos:start="1571:27" pos:end="1577:13">{<block_content pos:start="1573:17" pos:end="1575:45">

                <expr_stmt pos:start="1573:17" pos:end="1573:44"><expr pos:start="1573:17" pos:end="1573:43"><name pos:start="1573:17" pos:end="1573:18">rm</name> <operator pos:start="1573:20" pos:end="1573:20">=</operator> <operator pos:start="1573:22" pos:end="1573:22">(</operator><name pos:start="1573:23" pos:end="1573:27">modrm</name> <operator pos:start="1573:29" pos:end="1573:29">&amp;</operator> <literal type="number" pos:start="1573:31" pos:end="1573:31">7</literal><operator pos:start="1573:32" pos:end="1573:32">)</operator> <operator pos:start="1573:34" pos:end="1573:34">|</operator> <call pos:start="1573:36" pos:end="1573:43"><name pos:start="1573:36" pos:end="1573:40">REX_B</name><argument_list pos:start="1573:41" pos:end="1573:43">(<argument pos:start="1573:42" pos:end="1573:42"><expr pos:start="1573:42" pos:end="1573:42"><name pos:start="1573:42" pos:end="1573:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1575:17" pos:end="1575:45"><expr pos:start="1575:17" pos:end="1575:44"><call pos:start="1575:17" pos:end="1575:44"><name pos:start="1575:17" pos:end="1575:32">gen_op_mov_v_reg</name><argument_list pos:start="1575:33" pos:end="1575:44">(<argument pos:start="1575:34" pos:end="1575:35"><expr pos:start="1575:34" pos:end="1575:35"><name pos:start="1575:34" pos:end="1575:35">ot</name></expr></argument>, <argument pos:start="1575:38" pos:end="1575:39"><expr pos:start="1575:38" pos:end="1575:39"><name pos:start="1575:38" pos:end="1575:39">t0</name></expr></argument>, <argument pos:start="1575:42" pos:end="1575:43"><expr pos:start="1575:42" pos:end="1575:43"><name pos:start="1575:42" pos:end="1575:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1577:15" pos:end="1587:13">else <block pos:start="1577:20" pos:end="1587:13">{<block_content pos:start="1579:17" pos:end="1585:23">

                <expr_stmt pos:start="1579:17" pos:end="1579:65"><expr pos:start="1579:17" pos:end="1579:64"><call pos:start="1579:17" pos:end="1579:64"><name pos:start="1579:17" pos:end="1579:29">gen_lea_modrm</name><argument_list pos:start="1579:30" pos:end="1579:64">(<argument pos:start="1579:31" pos:end="1579:31"><expr pos:start="1579:31" pos:end="1579:31"><name pos:start="1579:31" pos:end="1579:31">s</name></expr></argument>, <argument pos:start="1579:34" pos:end="1579:38"><expr pos:start="1579:34" pos:end="1579:38"><name pos:start="1579:34" pos:end="1579:38">modrm</name></expr></argument>, <argument pos:start="1579:41" pos:end="1579:49"><expr pos:start="1579:41" pos:end="1579:49"><operator pos:start="1579:41" pos:end="1579:41">&amp;</operator><name pos:start="1579:42" pos:end="1579:49">reg_addr</name></expr></argument>, <argument pos:start="1579:52" pos:end="1579:63"><expr pos:start="1579:52" pos:end="1579:63"><operator pos:start="1579:52" pos:end="1579:52">&amp;</operator><name pos:start="1579:53" pos:end="1579:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1581:17" pos:end="1581:43"><expr pos:start="1581:17" pos:end="1581:42"><call pos:start="1581:17" pos:end="1581:42"><name pos:start="1581:17" pos:end="1581:30">tcg_gen_mov_tl</name><argument_list pos:start="1581:31" pos:end="1581:42">(<argument pos:start="1581:32" pos:end="1581:33"><expr pos:start="1581:32" pos:end="1581:33"><name pos:start="1581:32" pos:end="1581:33">a0</name></expr></argument>, <argument pos:start="1581:36" pos:end="1581:41"><expr pos:start="1581:36" pos:end="1581:41"><name pos:start="1581:36" pos:end="1581:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1583:17" pos:end="1583:55"><expr pos:start="1583:17" pos:end="1583:54"><call pos:start="1583:17" pos:end="1583:54"><name pos:start="1583:17" pos:end="1583:27">gen_op_ld_v</name><argument_list pos:start="1583:28" pos:end="1583:54">(<argument pos:start="1583:29" pos:end="1583:45"><expr pos:start="1583:29" pos:end="1583:45"><name pos:start="1583:29" pos:end="1583:30">ot</name> <operator pos:start="1583:32" pos:end="1583:32">+</operator> <name pos:start="1583:34" pos:end="1583:45"><name pos:start="1583:34" pos:end="1583:34">s</name><operator pos:start="1583:35" pos:end="1583:36">-&gt;</operator><name pos:start="1583:37" pos:end="1583:45">mem_index</name></name></expr></argument>, <argument pos:start="1583:48" pos:end="1583:49"><expr pos:start="1583:48" pos:end="1583:49"><name pos:start="1583:48" pos:end="1583:49">t0</name></expr></argument>, <argument pos:start="1583:52" pos:end="1583:53"><expr pos:start="1583:52" pos:end="1583:53"><name pos:start="1583:52" pos:end="1583:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1585:17" pos:end="1585:23"><expr pos:start="1585:17" pos:end="1585:22"><name pos:start="1585:17" pos:end="1585:18">rm</name> <operator pos:start="1585:20" pos:end="1585:20">=</operator> <literal type="number" pos:start="1585:22" pos:end="1585:22">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="1585:25" pos:end="1585:43">/* avoid warning */</comment>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1589:13" pos:end="1589:37"><expr pos:start="1589:13" pos:end="1589:36"><name pos:start="1589:13" pos:end="1589:18">label1</name> <operator pos:start="1589:20" pos:end="1589:20">=</operator> <call pos:start="1589:22" pos:end="1589:36"><name pos:start="1589:22" pos:end="1589:34">gen_new_label</name><argument_list pos:start="1589:35" pos:end="1589:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1591:13" pos:end="1591:52"><expr pos:start="1591:13" pos:end="1591:51"><call pos:start="1591:13" pos:end="1591:51"><name pos:start="1591:13" pos:end="1591:26">tcg_gen_sub_tl</name><argument_list pos:start="1591:27" pos:end="1591:51">(<argument pos:start="1591:28" pos:end="1591:29"><expr pos:start="1591:28" pos:end="1591:29"><name pos:start="1591:28" pos:end="1591:29">t2</name></expr></argument>, <argument pos:start="1591:32" pos:end="1591:46"><expr pos:start="1591:32" pos:end="1591:46"><name pos:start="1591:32" pos:end="1591:46"><name pos:start="1591:32" pos:end="1591:39">cpu_regs</name><index pos:start="1591:40" pos:end="1591:46">[<expr pos:start="1591:41" pos:end="1591:45"><name pos:start="1591:41" pos:end="1591:45">R_EAX</name></expr>]</index></name></expr></argument>, <argument pos:start="1591:49" pos:end="1591:50"><expr pos:start="1591:49" pos:end="1591:50"><name pos:start="1591:49" pos:end="1591:50">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1593:13" pos:end="1593:29"><expr pos:start="1593:13" pos:end="1593:28"><call pos:start="1593:13" pos:end="1593:28"><name pos:start="1593:13" pos:end="1593:20">gen_extu</name><argument_list pos:start="1593:21" pos:end="1593:28">(<argument pos:start="1593:22" pos:end="1593:23"><expr pos:start="1593:22" pos:end="1593:23"><name pos:start="1593:22" pos:end="1593:23">ot</name></expr></argument>, <argument pos:start="1593:26" pos:end="1593:27"><expr pos:start="1593:26" pos:end="1593:27"><name pos:start="1593:26" pos:end="1593:27">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1595:13" pos:end="1595:59"><expr pos:start="1595:13" pos:end="1595:58"><call pos:start="1595:13" pos:end="1595:58"><name pos:start="1595:13" pos:end="1595:30">tcg_gen_brcondi_tl</name><argument_list pos:start="1595:31" pos:end="1595:58">(<argument pos:start="1595:32" pos:end="1595:42"><expr pos:start="1595:32" pos:end="1595:42"><name pos:start="1595:32" pos:end="1595:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="1595:45" pos:end="1595:46"><expr pos:start="1595:45" pos:end="1595:46"><name pos:start="1595:45" pos:end="1595:46">t2</name></expr></argument>, <argument pos:start="1595:49" pos:end="1595:49"><expr pos:start="1595:49" pos:end="1595:49"><literal type="number" pos:start="1595:49" pos:end="1595:49">0</literal></expr></argument>, <argument pos:start="1595:52" pos:end="1595:57"><expr pos:start="1595:52" pos:end="1595:57"><name pos:start="1595:52" pos:end="1595:57">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1597:13" pos:end="1597:37"><expr pos:start="1597:13" pos:end="1597:36"><name pos:start="1597:13" pos:end="1597:18">label2</name> <operator pos:start="1597:20" pos:end="1597:20">=</operator> <call pos:start="1597:22" pos:end="1597:36"><name pos:start="1597:22" pos:end="1597:34">gen_new_label</name><argument_list pos:start="1597:35" pos:end="1597:36">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1599:13" pos:end="1627:13"><if pos:start="1599:13" pos:end="1609:13">if <condition pos:start="1599:16" pos:end="1599:25">(<expr pos:start="1599:17" pos:end="1599:24"><name pos:start="1599:17" pos:end="1599:19">mod</name> <operator pos:start="1599:21" pos:end="1599:22">==</operator> <literal type="number" pos:start="1599:24" pos:end="1599:24">3</literal></expr>)</condition> <block pos:start="1599:27" pos:end="1609:13">{<block_content pos:start="1601:17" pos:end="1607:45">

                <expr_stmt pos:start="1601:17" pos:end="1601:48"><expr pos:start="1601:17" pos:end="1601:47"><call pos:start="1601:17" pos:end="1601:47"><name pos:start="1601:17" pos:end="1601:32">gen_op_mov_reg_v</name><argument_list pos:start="1601:33" pos:end="1601:47">(<argument pos:start="1601:34" pos:end="1601:35"><expr pos:start="1601:34" pos:end="1601:35"><name pos:start="1601:34" pos:end="1601:35">ot</name></expr></argument>, <argument pos:start="1601:38" pos:end="1601:42"><expr pos:start="1601:38" pos:end="1601:42"><name pos:start="1601:38" pos:end="1601:42">R_EAX</name></expr></argument>, <argument pos:start="1601:45" pos:end="1601:46"><expr pos:start="1601:45" pos:end="1601:46"><name pos:start="1601:45" pos:end="1601:46">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1603:17" pos:end="1603:35"><expr pos:start="1603:17" pos:end="1603:34"><call pos:start="1603:17" pos:end="1603:34"><name pos:start="1603:17" pos:end="1603:26">tcg_gen_br</name><argument_list pos:start="1603:27" pos:end="1603:34">(<argument pos:start="1603:28" pos:end="1603:33"><expr pos:start="1603:28" pos:end="1603:33"><name pos:start="1603:28" pos:end="1603:33">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1605:17" pos:end="1605:38"><expr pos:start="1605:17" pos:end="1605:37"><call pos:start="1605:17" pos:end="1605:37"><name pos:start="1605:17" pos:end="1605:29">gen_set_label</name><argument_list pos:start="1605:30" pos:end="1605:37">(<argument pos:start="1605:31" pos:end="1605:36"><expr pos:start="1605:31" pos:end="1605:36"><name pos:start="1605:31" pos:end="1605:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1607:17" pos:end="1607:45"><expr pos:start="1607:17" pos:end="1607:44"><call pos:start="1607:17" pos:end="1607:44"><name pos:start="1607:17" pos:end="1607:32">gen_op_mov_reg_v</name><argument_list pos:start="1607:33" pos:end="1607:44">(<argument pos:start="1607:34" pos:end="1607:35"><expr pos:start="1607:34" pos:end="1607:35"><name pos:start="1607:34" pos:end="1607:35">ot</name></expr></argument>, <argument pos:start="1607:38" pos:end="1607:39"><expr pos:start="1607:38" pos:end="1607:39"><name pos:start="1607:38" pos:end="1607:39">rm</name></expr></argument>, <argument pos:start="1607:42" pos:end="1607:43"><expr pos:start="1607:42" pos:end="1607:43"><name pos:start="1607:42" pos:end="1607:43">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1609:15" pos:end="1627:13">else <block pos:start="1609:20" pos:end="1627:13">{<block_content pos:start="1617:17" pos:end="1625:55">

                <comment type="block" pos:start="1611:17" pos:end="1615:71">/* perform no-op store cycle like physical cpu; must be

                   before changing accumulator to ensure idempotency if

                   the store faults and the instruction is restarted */</comment>

                <expr_stmt pos:start="1617:17" pos:end="1617:55"><expr pos:start="1617:17" pos:end="1617:54"><call pos:start="1617:17" pos:end="1617:54"><name pos:start="1617:17" pos:end="1617:27">gen_op_st_v</name><argument_list pos:start="1617:28" pos:end="1617:54">(<argument pos:start="1617:29" pos:end="1617:45"><expr pos:start="1617:29" pos:end="1617:45"><name pos:start="1617:29" pos:end="1617:30">ot</name> <operator pos:start="1617:32" pos:end="1617:32">+</operator> <name pos:start="1617:34" pos:end="1617:45"><name pos:start="1617:34" pos:end="1617:34">s</name><operator pos:start="1617:35" pos:end="1617:36">-&gt;</operator><name pos:start="1617:37" pos:end="1617:45">mem_index</name></name></expr></argument>, <argument pos:start="1617:48" pos:end="1617:49"><expr pos:start="1617:48" pos:end="1617:49"><name pos:start="1617:48" pos:end="1617:49">t0</name></expr></argument>, <argument pos:start="1617:52" pos:end="1617:53"><expr pos:start="1617:52" pos:end="1617:53"><name pos:start="1617:52" pos:end="1617:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1619:17" pos:end="1619:48"><expr pos:start="1619:17" pos:end="1619:47"><call pos:start="1619:17" pos:end="1619:47"><name pos:start="1619:17" pos:end="1619:32">gen_op_mov_reg_v</name><argument_list pos:start="1619:33" pos:end="1619:47">(<argument pos:start="1619:34" pos:end="1619:35"><expr pos:start="1619:34" pos:end="1619:35"><name pos:start="1619:34" pos:end="1619:35">ot</name></expr></argument>, <argument pos:start="1619:38" pos:end="1619:42"><expr pos:start="1619:38" pos:end="1619:42"><name pos:start="1619:38" pos:end="1619:42">R_EAX</name></expr></argument>, <argument pos:start="1619:45" pos:end="1619:46"><expr pos:start="1619:45" pos:end="1619:46"><name pos:start="1619:45" pos:end="1619:46">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1621:17" pos:end="1621:35"><expr pos:start="1621:17" pos:end="1621:34"><call pos:start="1621:17" pos:end="1621:34"><name pos:start="1621:17" pos:end="1621:26">tcg_gen_br</name><argument_list pos:start="1621:27" pos:end="1621:34">(<argument pos:start="1621:28" pos:end="1621:33"><expr pos:start="1621:28" pos:end="1621:33"><name pos:start="1621:28" pos:end="1621:33">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1623:17" pos:end="1623:38"><expr pos:start="1623:17" pos:end="1623:37"><call pos:start="1623:17" pos:end="1623:37"><name pos:start="1623:17" pos:end="1623:29">gen_set_label</name><argument_list pos:start="1623:30" pos:end="1623:37">(<argument pos:start="1623:31" pos:end="1623:36"><expr pos:start="1623:31" pos:end="1623:36"><name pos:start="1623:31" pos:end="1623:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1625:17" pos:end="1625:55"><expr pos:start="1625:17" pos:end="1625:54"><call pos:start="1625:17" pos:end="1625:54"><name pos:start="1625:17" pos:end="1625:27">gen_op_st_v</name><argument_list pos:start="1625:28" pos:end="1625:54">(<argument pos:start="1625:29" pos:end="1625:45"><expr pos:start="1625:29" pos:end="1625:45"><name pos:start="1625:29" pos:end="1625:30">ot</name> <operator pos:start="1625:32" pos:end="1625:32">+</operator> <name pos:start="1625:34" pos:end="1625:45"><name pos:start="1625:34" pos:end="1625:34">s</name><operator pos:start="1625:35" pos:end="1625:36">-&gt;</operator><name pos:start="1625:37" pos:end="1625:45">mem_index</name></name></expr></argument>, <argument pos:start="1625:48" pos:end="1625:49"><expr pos:start="1625:48" pos:end="1625:49"><name pos:start="1625:48" pos:end="1625:49">t1</name></expr></argument>, <argument pos:start="1625:52" pos:end="1625:53"><expr pos:start="1625:52" pos:end="1625:53"><name pos:start="1625:52" pos:end="1625:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1629:13" pos:end="1629:34"><expr pos:start="1629:13" pos:end="1629:33"><call pos:start="1629:13" pos:end="1629:33"><name pos:start="1629:13" pos:end="1629:25">gen_set_label</name><argument_list pos:start="1629:26" pos:end="1629:33">(<argument pos:start="1629:27" pos:end="1629:32"><expr pos:start="1629:27" pos:end="1629:32"><name pos:start="1629:27" pos:end="1629:32">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1631:13" pos:end="1631:43"><expr pos:start="1631:13" pos:end="1631:42"><call pos:start="1631:13" pos:end="1631:42"><name pos:start="1631:13" pos:end="1631:26">tcg_gen_mov_tl</name><argument_list pos:start="1631:27" pos:end="1631:42">(<argument pos:start="1631:28" pos:end="1631:37"><expr pos:start="1631:28" pos:end="1631:37"><name pos:start="1631:28" pos:end="1631:37">cpu_cc_src</name></expr></argument>, <argument pos:start="1631:40" pos:end="1631:41"><expr pos:start="1631:40" pos:end="1631:41"><name pos:start="1631:40" pos:end="1631:41">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1633:13" pos:end="1633:43"><expr pos:start="1633:13" pos:end="1633:42"><call pos:start="1633:13" pos:end="1633:42"><name pos:start="1633:13" pos:end="1633:26">tcg_gen_mov_tl</name><argument_list pos:start="1633:27" pos:end="1633:42">(<argument pos:start="1633:28" pos:end="1633:37"><expr pos:start="1633:28" pos:end="1633:37"><name pos:start="1633:28" pos:end="1633:37">cpu_cc_dst</name></expr></argument>, <argument pos:start="1633:40" pos:end="1633:41"><expr pos:start="1633:40" pos:end="1633:41"><name pos:start="1633:40" pos:end="1633:41">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1635:13" pos:end="1635:39"><expr pos:start="1635:13" pos:end="1635:38"><name pos:start="1635:13" pos:end="1635:20"><name pos:start="1635:13" pos:end="1635:13">s</name><operator pos:start="1635:14" pos:end="1635:15">-&gt;</operator><name pos:start="1635:16" pos:end="1635:20">cc_op</name></name> <operator pos:start="1635:22" pos:end="1635:22">=</operator> <name pos:start="1635:24" pos:end="1635:33">CC_OP_SUBB</name> <operator pos:start="1635:35" pos:end="1635:35">+</operator> <name pos:start="1635:37" pos:end="1635:38">ot</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1637:13" pos:end="1637:30"><expr pos:start="1637:13" pos:end="1637:29"><call pos:start="1637:13" pos:end="1637:29"><name pos:start="1637:13" pos:end="1637:25">tcg_temp_free</name><argument_list pos:start="1637:26" pos:end="1637:29">(<argument pos:start="1637:27" pos:end="1637:28"><expr pos:start="1637:27" pos:end="1637:28"><name pos:start="1637:27" pos:end="1637:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1639:13" pos:end="1639:30"><expr pos:start="1639:13" pos:end="1639:29"><call pos:start="1639:13" pos:end="1639:29"><name pos:start="1639:13" pos:end="1639:25">tcg_temp_free</name><argument_list pos:start="1639:26" pos:end="1639:29">(<argument pos:start="1639:27" pos:end="1639:28"><expr pos:start="1639:27" pos:end="1639:28"><name pos:start="1639:27" pos:end="1639:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1641:13" pos:end="1641:30"><expr pos:start="1641:13" pos:end="1641:29"><call pos:start="1641:13" pos:end="1641:29"><name pos:start="1641:13" pos:end="1641:25">tcg_temp_free</name><argument_list pos:start="1641:26" pos:end="1641:29">(<argument pos:start="1641:27" pos:end="1641:28"><expr pos:start="1641:27" pos:end="1641:28"><name pos:start="1641:27" pos:end="1641:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1643:13" pos:end="1643:30"><expr pos:start="1643:13" pos:end="1643:29"><call pos:start="1643:13" pos:end="1643:29"><name pos:start="1643:13" pos:end="1643:25">tcg_temp_free</name><argument_list pos:start="1643:26" pos:end="1643:29">(<argument pos:start="1643:27" pos:end="1643:28"><expr pos:start="1643:27" pos:end="1643:28"><name pos:start="1643:27" pos:end="1643:28">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1647:9" pos:end="1647:14">break;</break>

    <case pos:start="1649:5" pos:end="1649:15">case <expr pos:start="1649:10" pos:end="1649:14"><literal type="number" pos:start="1649:10" pos:end="1649:14">0x1c7</literal></expr>:</case> <comment type="block" pos:start="1649:17" pos:end="1649:31">/* cmpxchg8b */</comment>

        <expr_stmt pos:start="1651:9" pos:end="1651:55"><expr pos:start="1651:9" pos:end="1651:54"><name pos:start="1651:9" pos:end="1651:13">modrm</name> <operator pos:start="1651:15" pos:end="1651:15">=</operator> <call pos:start="1651:17" pos:end="1651:54"><name pos:start="1651:17" pos:end="1651:29">cpu_ldub_code</name><argument_list pos:start="1651:30" pos:end="1651:54">(<argument pos:start="1651:31" pos:end="1651:44"><expr pos:start="1651:31" pos:end="1651:44"><name pos:start="1651:31" pos:end="1651:44">cpu_single_env</name></expr></argument>, <argument pos:start="1651:47" pos:end="1651:53"><expr pos:start="1651:47" pos:end="1651:53"><name pos:start="1651:47" pos:end="1651:51"><name pos:start="1651:47" pos:end="1651:47">s</name><operator pos:start="1651:48" pos:end="1651:49">-&gt;</operator><name pos:start="1651:50" pos:end="1651:51">pc</name></name><operator pos:start="1651:52" pos:end="1651:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1653:9" pos:end="1653:31"><expr pos:start="1653:9" pos:end="1653:30"><name pos:start="1653:9" pos:end="1653:11">mod</name> <operator pos:start="1653:13" pos:end="1653:13">=</operator> <operator pos:start="1653:15" pos:end="1653:15">(</operator><name pos:start="1653:16" pos:end="1653:20">modrm</name> <operator pos:start="1653:22" pos:end="1653:23">&gt;&gt;</operator> <literal type="number" pos:start="1653:25" pos:end="1653:25">6</literal><operator pos:start="1653:26" pos:end="1653:26">)</operator> <operator pos:start="1653:28" pos:end="1653:28">&amp;</operator> <literal type="number" pos:start="1653:30" pos:end="1653:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1655:9" pos:end="1660:0"><if pos:start="1655:9" pos:end="1660:0">if <condition pos:start="1655:12" pos:end="1655:50">(<expr pos:start="1655:13" pos:end="1655:49"><operator pos:start="1655:13" pos:end="1655:13">(</operator><name pos:start="1655:14" pos:end="1655:16">mod</name> <operator pos:start="1655:18" pos:end="1655:19">==</operator> <literal type="number" pos:start="1655:21" pos:end="1655:21">3</literal><operator pos:start="1655:22" pos:end="1655:22">)</operator> <operator pos:start="1655:24" pos:end="1655:25">||</operator> <operator pos:start="1655:27" pos:end="1655:27">(</operator><operator pos:start="1655:28" pos:end="1655:28">(</operator><name pos:start="1655:29" pos:end="1655:33">modrm</name> <operator pos:start="1655:35" pos:end="1655:35">&amp;</operator> <literal type="number" pos:start="1655:37" pos:end="1655:40">0x38</literal><operator pos:start="1655:41" pos:end="1655:41">)</operator> <operator pos:start="1655:43" pos:end="1655:44">!=</operator> <literal type="number" pos:start="1655:46" pos:end="1655:48">0x8</literal><operator pos:start="1655:49" pos:end="1655:49">)</operator></expr>)</condition><block type="pseudo" pos:start="1657:13" pos:end="1660:0"><block_content pos:start="1657:13" pos:end="1660:0">

            <goto pos:start="1657:13" pos:end="1660:0">goto <name pos:start="1657:18" pos:end="1657:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="1659:1" pos:end="1659:20">#<cpp:directive pos:start="1659:2" pos:end="1659:6">ifdef</cpp:directive> <name pos:start="1659:8" pos:end="1659:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="1661:9" pos:end="1697:9"><if pos:start="1661:9" pos:end="1677:9">if <condition pos:start="1661:12" pos:end="1661:23">(<expr pos:start="1661:13" pos:end="1661:22"><name pos:start="1661:13" pos:end="1661:17">dflag</name> <operator pos:start="1661:19" pos:end="1661:20">==</operator> <literal type="number" pos:start="1661:22" pos:end="1661:22">2</literal></expr>)</condition> <block pos:start="1661:25" pos:end="1677:9">{<block_content pos:start="1663:13" pos:end="1675:51">

            <if_stmt pos:start="1663:13" pos:end="1665:32"><if pos:start="1663:13" pos:end="1665:32">if <condition pos:start="1663:16" pos:end="1663:58">(<expr pos:start="1663:17" pos:end="1663:57"><operator pos:start="1663:17" pos:end="1663:17">!</operator><operator pos:start="1663:18" pos:end="1663:18">(</operator><name pos:start="1663:19" pos:end="1663:39"><name pos:start="1663:19" pos:end="1663:19">s</name><operator pos:start="1663:20" pos:end="1663:21">-&gt;</operator><name pos:start="1663:22" pos:end="1663:39">cpuid_ext_features</name></name> <operator pos:start="1663:41" pos:end="1663:41">&amp;</operator> <name pos:start="1663:43" pos:end="1663:56">CPUID_EXT_CX16</name><operator pos:start="1663:57" pos:end="1663:57">)</operator></expr>)</condition><block type="pseudo" pos:start="1665:17" pos:end="1665:32"><block_content pos:start="1665:17" pos:end="1665:32">

                <goto pos:start="1665:17" pos:end="1665:32">goto <name pos:start="1665:22" pos:end="1665:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1667:13" pos:end="1667:46"><expr pos:start="1667:13" pos:end="1667:45"><call pos:start="1667:13" pos:end="1667:45"><name pos:start="1667:13" pos:end="1667:22">gen_jmp_im</name><argument_list pos:start="1667:23" pos:end="1667:45">(<argument pos:start="1667:24" pos:end="1667:44"><expr pos:start="1667:24" pos:end="1667:44"><name pos:start="1667:24" pos:end="1667:31">pc_start</name> <operator pos:start="1667:33" pos:end="1667:33">-</operator> <name pos:start="1667:35" pos:end="1667:44"><name pos:start="1667:35" pos:end="1667:35">s</name><operator pos:start="1667:36" pos:end="1667:37">-&gt;</operator><name pos:start="1667:38" pos:end="1667:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1669:13" pos:end="1671:43"><if pos:start="1669:13" pos:end="1671:43">if <condition pos:start="1669:16" pos:end="1669:42">(<expr pos:start="1669:17" pos:end="1669:41"><name pos:start="1669:17" pos:end="1669:24"><name pos:start="1669:17" pos:end="1669:17">s</name><operator pos:start="1669:18" pos:end="1669:19">-&gt;</operator><name pos:start="1669:20" pos:end="1669:24">cc_op</name></name> <operator pos:start="1669:26" pos:end="1669:27">!=</operator> <name pos:start="1669:29" pos:end="1669:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1671:17" pos:end="1671:43"><block_content pos:start="1671:17" pos:end="1671:43">

                <expr_stmt pos:start="1671:17" pos:end="1671:43"><expr pos:start="1671:17" pos:end="1671:42"><call pos:start="1671:17" pos:end="1671:42"><name pos:start="1671:17" pos:end="1671:32">gen_op_set_cc_op</name><argument_list pos:start="1671:33" pos:end="1671:42">(<argument pos:start="1671:34" pos:end="1671:41"><expr pos:start="1671:34" pos:end="1671:41"><name pos:start="1671:34" pos:end="1671:41"><name pos:start="1671:34" pos:end="1671:34">s</name><operator pos:start="1671:35" pos:end="1671:36">-&gt;</operator><name pos:start="1671:37" pos:end="1671:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1673:13" pos:end="1673:61"><expr pos:start="1673:13" pos:end="1673:60"><call pos:start="1673:13" pos:end="1673:60"><name pos:start="1673:13" pos:end="1673:25">gen_lea_modrm</name><argument_list pos:start="1673:26" pos:end="1673:60">(<argument pos:start="1673:27" pos:end="1673:27"><expr pos:start="1673:27" pos:end="1673:27"><name pos:start="1673:27" pos:end="1673:27">s</name></expr></argument>, <argument pos:start="1673:30" pos:end="1673:34"><expr pos:start="1673:30" pos:end="1673:34"><name pos:start="1673:30" pos:end="1673:34">modrm</name></expr></argument>, <argument pos:start="1673:37" pos:end="1673:45"><expr pos:start="1673:37" pos:end="1673:45"><operator pos:start="1673:37" pos:end="1673:37">&amp;</operator><name pos:start="1673:38" pos:end="1673:45">reg_addr</name></expr></argument>, <argument pos:start="1673:48" pos:end="1673:59"><expr pos:start="1673:48" pos:end="1673:59"><operator pos:start="1673:48" pos:end="1673:48">&amp;</operator><name pos:start="1673:49" pos:end="1673:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1675:13" pos:end="1675:51"><expr pos:start="1675:13" pos:end="1675:50"><call pos:start="1675:13" pos:end="1675:50"><name pos:start="1675:13" pos:end="1675:33">gen_helper_cmpxchg16b</name><argument_list pos:start="1675:34" pos:end="1675:50">(<argument pos:start="1675:35" pos:end="1675:41"><expr pos:start="1675:35" pos:end="1675:41"><name pos:start="1675:35" pos:end="1675:41">cpu_env</name></expr></argument>, <argument pos:start="1675:44" pos:end="1675:49"><expr pos:start="1675:44" pos:end="1675:49"><name pos:start="1675:44" pos:end="1675:49">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1677:11" pos:end="1697:9">else

<cpp:endif pos:start="1679:1" pos:end="1679:6">#<cpp:directive pos:start="1679:2" pos:end="1679:6">endif</cpp:directive></cpp:endif>        

        <block pos:start="1681:9" pos:end="1697:9">{<block_content pos:start="1683:13" pos:end="1695:50">

            <if_stmt pos:start="1683:13" pos:end="1685:32"><if pos:start="1683:13" pos:end="1685:32">if <condition pos:start="1683:16" pos:end="1683:49">(<expr pos:start="1683:17" pos:end="1683:48"><operator pos:start="1683:17" pos:end="1683:17">!</operator><operator pos:start="1683:18" pos:end="1683:18">(</operator><name pos:start="1683:19" pos:end="1683:35"><name pos:start="1683:19" pos:end="1683:19">s</name><operator pos:start="1683:20" pos:end="1683:21">-&gt;</operator><name pos:start="1683:22" pos:end="1683:35">cpuid_features</name></name> <operator pos:start="1683:37" pos:end="1683:37">&amp;</operator> <name pos:start="1683:39" pos:end="1683:47">CPUID_CX8</name><operator pos:start="1683:48" pos:end="1683:48">)</operator></expr>)</condition><block type="pseudo" pos:start="1685:17" pos:end="1685:32"><block_content pos:start="1685:17" pos:end="1685:32">

                <goto pos:start="1685:17" pos:end="1685:32">goto <name pos:start="1685:22" pos:end="1685:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1687:13" pos:end="1687:46"><expr pos:start="1687:13" pos:end="1687:45"><call pos:start="1687:13" pos:end="1687:45"><name pos:start="1687:13" pos:end="1687:22">gen_jmp_im</name><argument_list pos:start="1687:23" pos:end="1687:45">(<argument pos:start="1687:24" pos:end="1687:44"><expr pos:start="1687:24" pos:end="1687:44"><name pos:start="1687:24" pos:end="1687:31">pc_start</name> <operator pos:start="1687:33" pos:end="1687:33">-</operator> <name pos:start="1687:35" pos:end="1687:44"><name pos:start="1687:35" pos:end="1687:35">s</name><operator pos:start="1687:36" pos:end="1687:37">-&gt;</operator><name pos:start="1687:38" pos:end="1687:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1689:13" pos:end="1691:43"><if pos:start="1689:13" pos:end="1691:43">if <condition pos:start="1689:16" pos:end="1689:42">(<expr pos:start="1689:17" pos:end="1689:41"><name pos:start="1689:17" pos:end="1689:24"><name pos:start="1689:17" pos:end="1689:17">s</name><operator pos:start="1689:18" pos:end="1689:19">-&gt;</operator><name pos:start="1689:20" pos:end="1689:24">cc_op</name></name> <operator pos:start="1689:26" pos:end="1689:27">!=</operator> <name pos:start="1689:29" pos:end="1689:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1691:17" pos:end="1691:43"><block_content pos:start="1691:17" pos:end="1691:43">

                <expr_stmt pos:start="1691:17" pos:end="1691:43"><expr pos:start="1691:17" pos:end="1691:42"><call pos:start="1691:17" pos:end="1691:42"><name pos:start="1691:17" pos:end="1691:32">gen_op_set_cc_op</name><argument_list pos:start="1691:33" pos:end="1691:42">(<argument pos:start="1691:34" pos:end="1691:41"><expr pos:start="1691:34" pos:end="1691:41"><name pos:start="1691:34" pos:end="1691:41"><name pos:start="1691:34" pos:end="1691:34">s</name><operator pos:start="1691:35" pos:end="1691:36">-&gt;</operator><name pos:start="1691:37" pos:end="1691:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1693:13" pos:end="1693:61"><expr pos:start="1693:13" pos:end="1693:60"><call pos:start="1693:13" pos:end="1693:60"><name pos:start="1693:13" pos:end="1693:25">gen_lea_modrm</name><argument_list pos:start="1693:26" pos:end="1693:60">(<argument pos:start="1693:27" pos:end="1693:27"><expr pos:start="1693:27" pos:end="1693:27"><name pos:start="1693:27" pos:end="1693:27">s</name></expr></argument>, <argument pos:start="1693:30" pos:end="1693:34"><expr pos:start="1693:30" pos:end="1693:34"><name pos:start="1693:30" pos:end="1693:34">modrm</name></expr></argument>, <argument pos:start="1693:37" pos:end="1693:45"><expr pos:start="1693:37" pos:end="1693:45"><operator pos:start="1693:37" pos:end="1693:37">&amp;</operator><name pos:start="1693:38" pos:end="1693:45">reg_addr</name></expr></argument>, <argument pos:start="1693:48" pos:end="1693:59"><expr pos:start="1693:48" pos:end="1693:59"><operator pos:start="1693:48" pos:end="1693:48">&amp;</operator><name pos:start="1693:49" pos:end="1693:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1695:13" pos:end="1695:50"><expr pos:start="1695:13" pos:end="1695:49"><call pos:start="1695:13" pos:end="1695:49"><name pos:start="1695:13" pos:end="1695:32">gen_helper_cmpxchg8b</name><argument_list pos:start="1695:33" pos:end="1695:49">(<argument pos:start="1695:34" pos:end="1695:40"><expr pos:start="1695:34" pos:end="1695:40"><name pos:start="1695:34" pos:end="1695:40">cpu_env</name></expr></argument>, <argument pos:start="1695:43" pos:end="1695:48"><expr pos:start="1695:43" pos:end="1695:48"><name pos:start="1695:43" pos:end="1695:48">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1699:9" pos:end="1699:32"><expr pos:start="1699:9" pos:end="1699:31"><name pos:start="1699:9" pos:end="1699:16"><name pos:start="1699:9" pos:end="1699:9">s</name><operator pos:start="1699:10" pos:end="1699:11">-&gt;</operator><name pos:start="1699:12" pos:end="1699:16">cc_op</name></name> <operator pos:start="1699:18" pos:end="1699:18">=</operator> <name pos:start="1699:20" pos:end="1699:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="1701:9" pos:end="1701:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1705:9" pos:end="1705:36">/**************************/</comment>

        <comment type="block" pos:start="1707:9" pos:end="1707:22">/* push/pop */</comment>

    <case pos:start="1709:5" pos:end="1709:23">case <expr pos:start="1709:10" pos:end="1709:22"><literal type="number" pos:start="1709:10" pos:end="1709:13">0x50</literal> <operator pos:start="1709:15" pos:end="1709:17">...</operator> <literal type="number" pos:start="1709:19" pos:end="1709:22">0x57</literal></expr>:</case> <comment type="block" pos:start="1709:25" pos:end="1709:34">/* push */</comment>

        <expr_stmt pos:start="1711:9" pos:end="1711:58"><expr pos:start="1711:9" pos:end="1711:57"><call pos:start="1711:9" pos:end="1711:57"><name pos:start="1711:9" pos:end="1711:25">gen_op_mov_TN_reg</name><argument_list pos:start="1711:26" pos:end="1711:57">(<argument pos:start="1711:27" pos:end="1711:33"><expr pos:start="1711:27" pos:end="1711:33"><name pos:start="1711:27" pos:end="1711:33">OT_LONG</name></expr></argument>, <argument pos:start="1711:36" pos:end="1711:36"><expr pos:start="1711:36" pos:end="1711:36"><literal type="number" pos:start="1711:36" pos:end="1711:36">0</literal></expr></argument>, <argument pos:start="1711:39" pos:end="1711:56"><expr pos:start="1711:39" pos:end="1711:56"><operator pos:start="1711:39" pos:end="1711:39">(</operator><name pos:start="1711:40" pos:end="1711:40">b</name> <operator pos:start="1711:42" pos:end="1711:42">&amp;</operator> <literal type="number" pos:start="1711:44" pos:end="1711:44">7</literal><operator pos:start="1711:45" pos:end="1711:45">)</operator> <operator pos:start="1711:47" pos:end="1711:47">|</operator> <call pos:start="1711:49" pos:end="1711:56"><name pos:start="1711:49" pos:end="1711:53">REX_B</name><argument_list pos:start="1711:54" pos:end="1711:56">(<argument pos:start="1711:55" pos:end="1711:55"><expr pos:start="1711:55" pos:end="1711:55"><name pos:start="1711:55" pos:end="1711:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1713:9" pos:end="1713:23"><expr pos:start="1713:9" pos:end="1713:22"><call pos:start="1713:9" pos:end="1713:22"><name pos:start="1713:9" pos:end="1713:19">gen_push_T0</name><argument_list pos:start="1713:20" pos:end="1713:22">(<argument pos:start="1713:21" pos:end="1713:21"><expr pos:start="1713:21" pos:end="1713:21"><name pos:start="1713:21" pos:end="1713:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1715:9" pos:end="1715:14">break;</break>

    <case pos:start="1717:5" pos:end="1717:23">case <expr pos:start="1717:10" pos:end="1717:22"><literal type="number" pos:start="1717:10" pos:end="1717:13">0x58</literal> <operator pos:start="1717:15" pos:end="1717:17">...</operator> <literal type="number" pos:start="1717:19" pos:end="1717:22">0x5f</literal></expr>:</case> <comment type="block" pos:start="1717:25" pos:end="1717:33">/* pop */</comment>

        <if_stmt pos:start="1719:9" pos:end="1727:9"><if pos:start="1719:9" pos:end="1723:9">if <condition pos:start="1719:12" pos:end="1719:22">(<expr pos:start="1719:13" pos:end="1719:21"><call pos:start="1719:13" pos:end="1719:21"><name pos:start="1719:13" pos:end="1719:18">CODE64</name><argument_list pos:start="1719:19" pos:end="1719:21">(<argument pos:start="1719:20" pos:end="1719:20"><expr pos:start="1719:20" pos:end="1719:20"><name pos:start="1719:20" pos:end="1719:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1719:24" pos:end="1723:9">{<block_content pos:start="1721:13" pos:end="1721:43">

            <expr_stmt pos:start="1721:13" pos:end="1721:43"><expr pos:start="1721:13" pos:end="1721:42"><name pos:start="1721:13" pos:end="1721:14">ot</name> <operator pos:start="1721:16" pos:end="1721:16">=</operator> <ternary pos:start="1721:18" pos:end="1721:42"><condition pos:start="1721:18" pos:end="1721:24"><expr pos:start="1721:18" pos:end="1721:22"><name pos:start="1721:18" pos:end="1721:22">dflag</name></expr> ?</condition><then pos:start="1721:26" pos:end="1721:32"> <expr pos:start="1721:26" pos:end="1721:32"><name pos:start="1721:26" pos:end="1721:32">OT_QUAD</name></expr> </then><else pos:start="1721:34" pos:end="1721:42">: <expr pos:start="1721:36" pos:end="1721:42"><name pos:start="1721:36" pos:end="1721:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1723:11" pos:end="1727:9">else <block pos:start="1723:16" pos:end="1727:9">{<block_content pos:start="1725:13" pos:end="1725:33">

            <expr_stmt pos:start="1725:13" pos:end="1725:33"><expr pos:start="1725:13" pos:end="1725:32"><name pos:start="1725:13" pos:end="1725:14">ot</name> <operator pos:start="1725:16" pos:end="1725:16">=</operator> <name pos:start="1725:18" pos:end="1725:22">dflag</name> <operator pos:start="1725:24" pos:end="1725:24">+</operator> <name pos:start="1725:26" pos:end="1725:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1729:9" pos:end="1729:22"><expr pos:start="1729:9" pos:end="1729:21"><call pos:start="1729:9" pos:end="1729:21"><name pos:start="1729:9" pos:end="1729:18">gen_pop_T0</name><argument_list pos:start="1729:19" pos:end="1729:21">(<argument pos:start="1729:20" pos:end="1729:20"><expr pos:start="1729:20" pos:end="1729:20"><name pos:start="1729:20" pos:end="1729:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1731:9" pos:end="1731:50">/* NOTE: order is important for pop %sp */</comment>

        <expr_stmt pos:start="1733:9" pos:end="1733:26"><expr pos:start="1733:9" pos:end="1733:25"><call pos:start="1733:9" pos:end="1733:25"><name pos:start="1733:9" pos:end="1733:22">gen_pop_update</name><argument_list pos:start="1733:23" pos:end="1733:25">(<argument pos:start="1733:24" pos:end="1733:24"><expr pos:start="1733:24" pos:end="1733:24"><name pos:start="1733:24" pos:end="1733:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1735:9" pos:end="1735:50"><expr pos:start="1735:9" pos:end="1735:49"><call pos:start="1735:9" pos:end="1735:49"><name pos:start="1735:9" pos:end="1735:25">gen_op_mov_reg_T0</name><argument_list pos:start="1735:26" pos:end="1735:49">(<argument pos:start="1735:27" pos:end="1735:28"><expr pos:start="1735:27" pos:end="1735:28"><name pos:start="1735:27" pos:end="1735:28">ot</name></expr></argument>, <argument pos:start="1735:31" pos:end="1735:48"><expr pos:start="1735:31" pos:end="1735:48"><operator pos:start="1735:31" pos:end="1735:31">(</operator><name pos:start="1735:32" pos:end="1735:32">b</name> <operator pos:start="1735:34" pos:end="1735:34">&amp;</operator> <literal type="number" pos:start="1735:36" pos:end="1735:36">7</literal><operator pos:start="1735:37" pos:end="1735:37">)</operator> <operator pos:start="1735:39" pos:end="1735:39">|</operator> <call pos:start="1735:41" pos:end="1735:48"><name pos:start="1735:41" pos:end="1735:45">REX_B</name><argument_list pos:start="1735:46" pos:end="1735:48">(<argument pos:start="1735:47" pos:end="1735:47"><expr pos:start="1735:47" pos:end="1735:47"><name pos:start="1735:47" pos:end="1735:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1737:9" pos:end="1737:14">break;</break>

    <case pos:start="1739:5" pos:end="1739:14">case <expr pos:start="1739:10" pos:end="1739:13"><literal type="number" pos:start="1739:10" pos:end="1739:13">0x60</literal></expr>:</case> <comment type="block" pos:start="1739:16" pos:end="1739:26">/* pusha */</comment>

        <if_stmt pos:start="1741:9" pos:end="1743:28"><if pos:start="1741:9" pos:end="1743:28">if <condition pos:start="1741:12" pos:end="1741:22">(<expr pos:start="1741:13" pos:end="1741:21"><call pos:start="1741:13" pos:end="1741:21"><name pos:start="1741:13" pos:end="1741:18">CODE64</name><argument_list pos:start="1741:19" pos:end="1741:21">(<argument pos:start="1741:20" pos:end="1741:20"><expr pos:start="1741:20" pos:end="1741:20"><name pos:start="1741:20" pos:end="1741:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1743:13" pos:end="1743:28"><block_content pos:start="1743:13" pos:end="1743:28">

            <goto pos:start="1743:13" pos:end="1743:28">goto <name pos:start="1743:18" pos:end="1743:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1745:9" pos:end="1745:21"><expr pos:start="1745:9" pos:end="1745:20"><call pos:start="1745:9" pos:end="1745:20"><name pos:start="1745:9" pos:end="1745:17">gen_pusha</name><argument_list pos:start="1745:18" pos:end="1745:20">(<argument pos:start="1745:19" pos:end="1745:19"><expr pos:start="1745:19" pos:end="1745:19"><name pos:start="1745:19" pos:end="1745:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1747:9" pos:end="1747:14">break;</break>

    <case pos:start="1749:5" pos:end="1749:14">case <expr pos:start="1749:10" pos:end="1749:13"><literal type="number" pos:start="1749:10" pos:end="1749:13">0x61</literal></expr>:</case> <comment type="block" pos:start="1749:16" pos:end="1749:25">/* popa */</comment>

        <if_stmt pos:start="1751:9" pos:end="1753:28"><if pos:start="1751:9" pos:end="1753:28">if <condition pos:start="1751:12" pos:end="1751:22">(<expr pos:start="1751:13" pos:end="1751:21"><call pos:start="1751:13" pos:end="1751:21"><name pos:start="1751:13" pos:end="1751:18">CODE64</name><argument_list pos:start="1751:19" pos:end="1751:21">(<argument pos:start="1751:20" pos:end="1751:20"><expr pos:start="1751:20" pos:end="1751:20"><name pos:start="1751:20" pos:end="1751:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1753:13" pos:end="1753:28"><block_content pos:start="1753:13" pos:end="1753:28">

            <goto pos:start="1753:13" pos:end="1753:28">goto <name pos:start="1753:18" pos:end="1753:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1755:9" pos:end="1755:20"><expr pos:start="1755:9" pos:end="1755:19"><call pos:start="1755:9" pos:end="1755:19"><name pos:start="1755:9" pos:end="1755:16">gen_popa</name><argument_list pos:start="1755:17" pos:end="1755:19">(<argument pos:start="1755:18" pos:end="1755:18"><expr pos:start="1755:18" pos:end="1755:18"><name pos:start="1755:18" pos:end="1755:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1757:9" pos:end="1757:14">break;</break>

    <case pos:start="1759:5" pos:end="1759:14">case <expr pos:start="1759:10" pos:end="1759:13"><literal type="number" pos:start="1759:10" pos:end="1759:13">0x68</literal></expr>:</case> <comment type="block" pos:start="1759:16" pos:end="1759:28">/* push Iv */</comment>

    <case pos:start="1761:5" pos:end="1761:14">case <expr pos:start="1761:10" pos:end="1761:13"><literal type="number" pos:start="1761:10" pos:end="1761:13">0x6a</literal></expr>:</case>

        <if_stmt pos:start="1763:9" pos:end="1771:9"><if pos:start="1763:9" pos:end="1767:9">if <condition pos:start="1763:12" pos:end="1763:22">(<expr pos:start="1763:13" pos:end="1763:21"><call pos:start="1763:13" pos:end="1763:21"><name pos:start="1763:13" pos:end="1763:18">CODE64</name><argument_list pos:start="1763:19" pos:end="1763:21">(<argument pos:start="1763:20" pos:end="1763:20"><expr pos:start="1763:20" pos:end="1763:20"><name pos:start="1763:20" pos:end="1763:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1763:24" pos:end="1767:9">{<block_content pos:start="1765:13" pos:end="1765:43">

            <expr_stmt pos:start="1765:13" pos:end="1765:43"><expr pos:start="1765:13" pos:end="1765:42"><name pos:start="1765:13" pos:end="1765:14">ot</name> <operator pos:start="1765:16" pos:end="1765:16">=</operator> <ternary pos:start="1765:18" pos:end="1765:42"><condition pos:start="1765:18" pos:end="1765:24"><expr pos:start="1765:18" pos:end="1765:22"><name pos:start="1765:18" pos:end="1765:22">dflag</name></expr> ?</condition><then pos:start="1765:26" pos:end="1765:32"> <expr pos:start="1765:26" pos:end="1765:32"><name pos:start="1765:26" pos:end="1765:32">OT_QUAD</name></expr> </then><else pos:start="1765:34" pos:end="1765:42">: <expr pos:start="1765:36" pos:end="1765:42"><name pos:start="1765:36" pos:end="1765:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1767:11" pos:end="1771:9">else <block pos:start="1767:16" pos:end="1771:9">{<block_content pos:start="1769:13" pos:end="1769:33">

            <expr_stmt pos:start="1769:13" pos:end="1769:33"><expr pos:start="1769:13" pos:end="1769:32"><name pos:start="1769:13" pos:end="1769:14">ot</name> <operator pos:start="1769:16" pos:end="1769:16">=</operator> <name pos:start="1769:18" pos:end="1769:22">dflag</name> <operator pos:start="1769:24" pos:end="1769:24">+</operator> <name pos:start="1769:26" pos:end="1769:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="1773:9" pos:end="1779:47"><if pos:start="1773:9" pos:end="1775:34">if <condition pos:start="1773:12" pos:end="1773:22">(<expr pos:start="1773:13" pos:end="1773:21"><name pos:start="1773:13" pos:end="1773:13">b</name> <operator pos:start="1773:15" pos:end="1773:16">==</operator> <literal type="number" pos:start="1773:18" pos:end="1773:21">0x68</literal></expr>)</condition><block type="pseudo" pos:start="1775:13" pos:end="1775:34"><block_content pos:start="1775:13" pos:end="1775:34">

            <expr_stmt pos:start="1775:13" pos:end="1775:34"><expr pos:start="1775:13" pos:end="1775:33"><name pos:start="1775:13" pos:end="1775:15">val</name> <operator pos:start="1775:17" pos:end="1775:17">=</operator> <call pos:start="1775:19" pos:end="1775:33"><name pos:start="1775:19" pos:end="1775:26">insn_get</name><argument_list pos:start="1775:27" pos:end="1775:33">(<argument pos:start="1775:28" pos:end="1775:28"><expr pos:start="1775:28" pos:end="1775:28"><name pos:start="1775:28" pos:end="1775:28">s</name></expr></argument>, <argument pos:start="1775:31" pos:end="1775:32"><expr pos:start="1775:31" pos:end="1775:32"><name pos:start="1775:31" pos:end="1775:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1777:9" pos:end="1779:47">else<block type="pseudo" pos:start="1779:13" pos:end="1779:47"><block_content pos:start="1779:13" pos:end="1779:47">

            <expr_stmt pos:start="1779:13" pos:end="1779:47"><expr pos:start="1779:13" pos:end="1779:46"><name pos:start="1779:13" pos:end="1779:15">val</name> <operator pos:start="1779:17" pos:end="1779:17">=</operator> <operator pos:start="1779:19" pos:end="1779:19">(</operator><name pos:start="1779:20" pos:end="1779:25">int8_t</name><operator pos:start="1779:26" pos:end="1779:26">)</operator><call pos:start="1779:27" pos:end="1779:46"><name pos:start="1779:27" pos:end="1779:34">insn_get</name><argument_list pos:start="1779:35" pos:end="1779:46">(<argument pos:start="1779:36" pos:end="1779:36"><expr pos:start="1779:36" pos:end="1779:36"><name pos:start="1779:36" pos:end="1779:36">s</name></expr></argument>, <argument pos:start="1779:39" pos:end="1779:45"><expr pos:start="1779:39" pos:end="1779:45"><name pos:start="1779:39" pos:end="1779:45">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1781:9" pos:end="1781:31"><expr pos:start="1781:9" pos:end="1781:30"><call pos:start="1781:9" pos:end="1781:30"><name pos:start="1781:9" pos:end="1781:25">gen_op_movl_T0_im</name><argument_list pos:start="1781:26" pos:end="1781:30">(<argument pos:start="1781:27" pos:end="1781:29"><expr pos:start="1781:27" pos:end="1781:29"><name pos:start="1781:27" pos:end="1781:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1783:9" pos:end="1783:23"><expr pos:start="1783:9" pos:end="1783:22"><call pos:start="1783:9" pos:end="1783:22"><name pos:start="1783:9" pos:end="1783:19">gen_push_T0</name><argument_list pos:start="1783:20" pos:end="1783:22">(<argument pos:start="1783:21" pos:end="1783:21"><expr pos:start="1783:21" pos:end="1783:21"><name pos:start="1783:21" pos:end="1783:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1785:9" pos:end="1785:14">break;</break>

    <case pos:start="1787:5" pos:end="1787:14">case <expr pos:start="1787:10" pos:end="1787:13"><literal type="number" pos:start="1787:10" pos:end="1787:13">0x8f</literal></expr>:</case> <comment type="block" pos:start="1787:16" pos:end="1787:27">/* pop Ev */</comment>

        <if_stmt pos:start="1789:9" pos:end="1797:9"><if pos:start="1789:9" pos:end="1793:9">if <condition pos:start="1789:12" pos:end="1789:22">(<expr pos:start="1789:13" pos:end="1789:21"><call pos:start="1789:13" pos:end="1789:21"><name pos:start="1789:13" pos:end="1789:18">CODE64</name><argument_list pos:start="1789:19" pos:end="1789:21">(<argument pos:start="1789:20" pos:end="1789:20"><expr pos:start="1789:20" pos:end="1789:20"><name pos:start="1789:20" pos:end="1789:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1789:24" pos:end="1793:9">{<block_content pos:start="1791:13" pos:end="1791:43">

            <expr_stmt pos:start="1791:13" pos:end="1791:43"><expr pos:start="1791:13" pos:end="1791:42"><name pos:start="1791:13" pos:end="1791:14">ot</name> <operator pos:start="1791:16" pos:end="1791:16">=</operator> <ternary pos:start="1791:18" pos:end="1791:42"><condition pos:start="1791:18" pos:end="1791:24"><expr pos:start="1791:18" pos:end="1791:22"><name pos:start="1791:18" pos:end="1791:22">dflag</name></expr> ?</condition><then pos:start="1791:26" pos:end="1791:32"> <expr pos:start="1791:26" pos:end="1791:32"><name pos:start="1791:26" pos:end="1791:32">OT_QUAD</name></expr> </then><else pos:start="1791:34" pos:end="1791:42">: <expr pos:start="1791:36" pos:end="1791:42"><name pos:start="1791:36" pos:end="1791:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1793:11" pos:end="1797:9">else <block pos:start="1793:16" pos:end="1797:9">{<block_content pos:start="1795:13" pos:end="1795:33">

            <expr_stmt pos:start="1795:13" pos:end="1795:33"><expr pos:start="1795:13" pos:end="1795:32"><name pos:start="1795:13" pos:end="1795:14">ot</name> <operator pos:start="1795:16" pos:end="1795:16">=</operator> <name pos:start="1795:18" pos:end="1795:22">dflag</name> <operator pos:start="1795:24" pos:end="1795:24">+</operator> <name pos:start="1795:26" pos:end="1795:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1799:9" pos:end="1799:55"><expr pos:start="1799:9" pos:end="1799:54"><name pos:start="1799:9" pos:end="1799:13">modrm</name> <operator pos:start="1799:15" pos:end="1799:15">=</operator> <call pos:start="1799:17" pos:end="1799:54"><name pos:start="1799:17" pos:end="1799:29">cpu_ldub_code</name><argument_list pos:start="1799:30" pos:end="1799:54">(<argument pos:start="1799:31" pos:end="1799:44"><expr pos:start="1799:31" pos:end="1799:44"><name pos:start="1799:31" pos:end="1799:44">cpu_single_env</name></expr></argument>, <argument pos:start="1799:47" pos:end="1799:53"><expr pos:start="1799:47" pos:end="1799:53"><name pos:start="1799:47" pos:end="1799:51"><name pos:start="1799:47" pos:end="1799:47">s</name><operator pos:start="1799:48" pos:end="1799:49">-&gt;</operator><name pos:start="1799:50" pos:end="1799:51">pc</name></name><operator pos:start="1799:52" pos:end="1799:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1801:9" pos:end="1801:31"><expr pos:start="1801:9" pos:end="1801:30"><name pos:start="1801:9" pos:end="1801:11">mod</name> <operator pos:start="1801:13" pos:end="1801:13">=</operator> <operator pos:start="1801:15" pos:end="1801:15">(</operator><name pos:start="1801:16" pos:end="1801:20">modrm</name> <operator pos:start="1801:22" pos:end="1801:23">&gt;&gt;</operator> <literal type="number" pos:start="1801:25" pos:end="1801:25">6</literal><operator pos:start="1801:26" pos:end="1801:26">)</operator> <operator pos:start="1801:28" pos:end="1801:28">&amp;</operator> <literal type="number" pos:start="1801:30" pos:end="1801:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1803:9" pos:end="1803:22"><expr pos:start="1803:9" pos:end="1803:21"><call pos:start="1803:9" pos:end="1803:21"><name pos:start="1803:9" pos:end="1803:18">gen_pop_T0</name><argument_list pos:start="1803:19" pos:end="1803:21">(<argument pos:start="1803:20" pos:end="1803:20"><expr pos:start="1803:20" pos:end="1803:20"><name pos:start="1803:20" pos:end="1803:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1805:9" pos:end="1827:9"><if pos:start="1805:9" pos:end="1815:9">if <condition pos:start="1805:12" pos:end="1805:21">(<expr pos:start="1805:13" pos:end="1805:20"><name pos:start="1805:13" pos:end="1805:15">mod</name> <operator pos:start="1805:17" pos:end="1805:18">==</operator> <literal type="number" pos:start="1805:20" pos:end="1805:20">3</literal></expr>)</condition> <block pos:start="1805:23" pos:end="1815:9">{<block_content pos:start="1809:13" pos:end="1813:38">

            <comment type="block" pos:start="1807:13" pos:end="1807:54">/* NOTE: order is important for pop %sp */</comment>

            <expr_stmt pos:start="1809:13" pos:end="1809:30"><expr pos:start="1809:13" pos:end="1809:29"><call pos:start="1809:13" pos:end="1809:29"><name pos:start="1809:13" pos:end="1809:26">gen_pop_update</name><argument_list pos:start="1809:27" pos:end="1809:29">(<argument pos:start="1809:28" pos:end="1809:28"><expr pos:start="1809:28" pos:end="1809:28"><name pos:start="1809:28" pos:end="1809:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1811:13" pos:end="1811:40"><expr pos:start="1811:13" pos:end="1811:39"><name pos:start="1811:13" pos:end="1811:14">rm</name> <operator pos:start="1811:16" pos:end="1811:16">=</operator> <operator pos:start="1811:18" pos:end="1811:18">(</operator><name pos:start="1811:19" pos:end="1811:23">modrm</name> <operator pos:start="1811:25" pos:end="1811:25">&amp;</operator> <literal type="number" pos:start="1811:27" pos:end="1811:27">7</literal><operator pos:start="1811:28" pos:end="1811:28">)</operator> <operator pos:start="1811:30" pos:end="1811:30">|</operator> <call pos:start="1811:32" pos:end="1811:39"><name pos:start="1811:32" pos:end="1811:36">REX_B</name><argument_list pos:start="1811:37" pos:end="1811:39">(<argument pos:start="1811:38" pos:end="1811:38"><expr pos:start="1811:38" pos:end="1811:38"><name pos:start="1811:38" pos:end="1811:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1813:13" pos:end="1813:38"><expr pos:start="1813:13" pos:end="1813:37"><call pos:start="1813:13" pos:end="1813:37"><name pos:start="1813:13" pos:end="1813:29">gen_op_mov_reg_T0</name><argument_list pos:start="1813:30" pos:end="1813:37">(<argument pos:start="1813:31" pos:end="1813:32"><expr pos:start="1813:31" pos:end="1813:32"><name pos:start="1813:31" pos:end="1813:32">ot</name></expr></argument>, <argument pos:start="1813:35" pos:end="1813:36"><expr pos:start="1813:35" pos:end="1813:36"><name pos:start="1813:35" pos:end="1813:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1815:11" pos:end="1827:9">else <block pos:start="1815:16" pos:end="1827:9">{<block_content pos:start="1819:13" pos:end="1825:30">

            <comment type="block" pos:start="1817:13" pos:end="1817:65">/* NOTE: order is important too for MMU exceptions */</comment>

            <expr_stmt pos:start="1819:13" pos:end="1819:39"><expr pos:start="1819:13" pos:end="1819:38"><name pos:start="1819:13" pos:end="1819:28"><name pos:start="1819:13" pos:end="1819:13">s</name><operator pos:start="1819:14" pos:end="1819:15">-&gt;</operator><name pos:start="1819:16" pos:end="1819:28">popl_esp_hack</name></name> <operator pos:start="1819:30" pos:end="1819:30">=</operator> <literal type="number" pos:start="1819:32" pos:end="1819:32">1</literal> <operator pos:start="1819:34" pos:end="1819:35">&lt;&lt;</operator> <name pos:start="1819:37" pos:end="1819:38">ot</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1821:13" pos:end="1821:53"><expr pos:start="1821:13" pos:end="1821:52"><call pos:start="1821:13" pos:end="1821:52"><name pos:start="1821:13" pos:end="1821:26">gen_ldst_modrm</name><argument_list pos:start="1821:27" pos:end="1821:52">(<argument pos:start="1821:28" pos:end="1821:28"><expr pos:start="1821:28" pos:end="1821:28"><name pos:start="1821:28" pos:end="1821:28">s</name></expr></argument>, <argument pos:start="1821:31" pos:end="1821:35"><expr pos:start="1821:31" pos:end="1821:35"><name pos:start="1821:31" pos:end="1821:35">modrm</name></expr></argument>, <argument pos:start="1821:38" pos:end="1821:39"><expr pos:start="1821:38" pos:end="1821:39"><name pos:start="1821:38" pos:end="1821:39">ot</name></expr></argument>, <argument pos:start="1821:42" pos:end="1821:48"><expr pos:start="1821:42" pos:end="1821:48"><name pos:start="1821:42" pos:end="1821:48">OR_TMP0</name></expr></argument>, <argument pos:start="1821:51" pos:end="1821:51"><expr pos:start="1821:51" pos:end="1821:51"><literal type="number" pos:start="1821:51" pos:end="1821:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1823:13" pos:end="1823:33"><expr pos:start="1823:13" pos:end="1823:32"><name pos:start="1823:13" pos:end="1823:28"><name pos:start="1823:13" pos:end="1823:13">s</name><operator pos:start="1823:14" pos:end="1823:15">-&gt;</operator><name pos:start="1823:16" pos:end="1823:28">popl_esp_hack</name></name> <operator pos:start="1823:30" pos:end="1823:30">=</operator> <literal type="number" pos:start="1823:32" pos:end="1823:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1825:13" pos:end="1825:30"><expr pos:start="1825:13" pos:end="1825:29"><call pos:start="1825:13" pos:end="1825:29"><name pos:start="1825:13" pos:end="1825:26">gen_pop_update</name><argument_list pos:start="1825:27" pos:end="1825:29">(<argument pos:start="1825:28" pos:end="1825:28"><expr pos:start="1825:28" pos:end="1825:28"><name pos:start="1825:28" pos:end="1825:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1829:9" pos:end="1829:14">break;</break>

    <case pos:start="1831:5" pos:end="1831:14">case <expr pos:start="1831:10" pos:end="1831:13"><literal type="number" pos:start="1831:10" pos:end="1831:13">0xc8</literal></expr>:</case> <comment type="block" pos:start="1831:16" pos:end="1831:26">/* enter */</comment>

        <block pos:start="1833:9" pos:end="1845:9">{<block_content pos:start="1835:13" pos:end="1843:37">

            <decl_stmt pos:start="1835:13" pos:end="1835:22"><decl pos:start="1835:13" pos:end="1835:21"><type pos:start="1835:13" pos:end="1835:15"><name pos:start="1835:13" pos:end="1835:15">int</name></type> <name pos:start="1835:17" pos:end="1835:21">level</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1837:13" pos:end="1837:55"><expr pos:start="1837:13" pos:end="1837:54"><name pos:start="1837:13" pos:end="1837:15">val</name> <operator pos:start="1837:17" pos:end="1837:17">=</operator> <call pos:start="1837:19" pos:end="1837:54"><name pos:start="1837:19" pos:end="1837:31">cpu_lduw_code</name><argument_list pos:start="1837:32" pos:end="1837:54">(<argument pos:start="1837:33" pos:end="1837:46"><expr pos:start="1837:33" pos:end="1837:46"><name pos:start="1837:33" pos:end="1837:46">cpu_single_env</name></expr></argument>, <argument pos:start="1837:49" pos:end="1837:53"><expr pos:start="1837:49" pos:end="1837:53"><name pos:start="1837:49" pos:end="1837:53"><name pos:start="1837:49" pos:end="1837:49">s</name><operator pos:start="1837:50" pos:end="1837:51">-&gt;</operator><name pos:start="1837:52" pos:end="1837:53">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1839:13" pos:end="1839:23"><expr pos:start="1839:13" pos:end="1839:22"><name pos:start="1839:13" pos:end="1839:17"><name pos:start="1839:13" pos:end="1839:13">s</name><operator pos:start="1839:14" pos:end="1839:15">-&gt;</operator><name pos:start="1839:16" pos:end="1839:17">pc</name></name> <operator pos:start="1839:19" pos:end="1839:20">+=</operator> <literal type="number" pos:start="1839:22" pos:end="1839:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1841:13" pos:end="1841:59"><expr pos:start="1841:13" pos:end="1841:58"><name pos:start="1841:13" pos:end="1841:17">level</name> <operator pos:start="1841:19" pos:end="1841:19">=</operator> <call pos:start="1841:21" pos:end="1841:58"><name pos:start="1841:21" pos:end="1841:33">cpu_ldub_code</name><argument_list pos:start="1841:34" pos:end="1841:58">(<argument pos:start="1841:35" pos:end="1841:48"><expr pos:start="1841:35" pos:end="1841:48"><name pos:start="1841:35" pos:end="1841:48">cpu_single_env</name></expr></argument>, <argument pos:start="1841:51" pos:end="1841:57"><expr pos:start="1841:51" pos:end="1841:57"><name pos:start="1841:51" pos:end="1841:55"><name pos:start="1841:51" pos:end="1841:51">s</name><operator pos:start="1841:52" pos:end="1841:53">-&gt;</operator><name pos:start="1841:54" pos:end="1841:55">pc</name></name><operator pos:start="1841:56" pos:end="1841:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1843:13" pos:end="1843:37"><expr pos:start="1843:13" pos:end="1843:36"><call pos:start="1843:13" pos:end="1843:36"><name pos:start="1843:13" pos:end="1843:21">gen_enter</name><argument_list pos:start="1843:22" pos:end="1843:36">(<argument pos:start="1843:23" pos:end="1843:23"><expr pos:start="1843:23" pos:end="1843:23"><name pos:start="1843:23" pos:end="1843:23">s</name></expr></argument>, <argument pos:start="1843:26" pos:end="1843:28"><expr pos:start="1843:26" pos:end="1843:28"><name pos:start="1843:26" pos:end="1843:28">val</name></expr></argument>, <argument pos:start="1843:31" pos:end="1843:35"><expr pos:start="1843:31" pos:end="1843:35"><name pos:start="1843:31" pos:end="1843:35">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1847:9" pos:end="1847:14">break;</break>

    <case pos:start="1849:5" pos:end="1849:14">case <expr pos:start="1849:10" pos:end="1849:13"><literal type="number" pos:start="1849:10" pos:end="1849:13">0xc9</literal></expr>:</case> <comment type="block" pos:start="1849:16" pos:end="1849:26">/* leave */</comment>

        <comment type="block" pos:start="1851:9" pos:end="1851:84">/* XXX: exception not precise (ESP is updated before potential exception) */</comment>

        <if_stmt pos:start="1853:9" pos:end="1871:9"><if pos:start="1853:9" pos:end="1859:9">if <condition pos:start="1853:12" pos:end="1853:22">(<expr pos:start="1853:13" pos:end="1853:21"><call pos:start="1853:13" pos:end="1853:21"><name pos:start="1853:13" pos:end="1853:18">CODE64</name><argument_list pos:start="1853:19" pos:end="1853:21">(<argument pos:start="1853:20" pos:end="1853:20"><expr pos:start="1853:20" pos:end="1853:20"><name pos:start="1853:20" pos:end="1853:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1853:24" pos:end="1859:9">{<block_content pos:start="1855:13" pos:end="1857:46">

            <expr_stmt pos:start="1855:13" pos:end="1855:49"><expr pos:start="1855:13" pos:end="1855:48"><call pos:start="1855:13" pos:end="1855:48"><name pos:start="1855:13" pos:end="1855:29">gen_op_mov_TN_reg</name><argument_list pos:start="1855:30" pos:end="1855:48">(<argument pos:start="1855:31" pos:end="1855:37"><expr pos:start="1855:31" pos:end="1855:37"><name pos:start="1855:31" pos:end="1855:37">OT_QUAD</name></expr></argument>, <argument pos:start="1855:40" pos:end="1855:40"><expr pos:start="1855:40" pos:end="1855:40"><literal type="number" pos:start="1855:40" pos:end="1855:40">0</literal></expr></argument>, <argument pos:start="1855:43" pos:end="1855:47"><expr pos:start="1855:43" pos:end="1855:47"><name pos:start="1855:43" pos:end="1855:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1857:13" pos:end="1857:46"><expr pos:start="1857:13" pos:end="1857:45"><call pos:start="1857:13" pos:end="1857:45"><name pos:start="1857:13" pos:end="1857:29">gen_op_mov_reg_T0</name><argument_list pos:start="1857:30" pos:end="1857:45">(<argument pos:start="1857:31" pos:end="1857:37"><expr pos:start="1857:31" pos:end="1857:37"><name pos:start="1857:31" pos:end="1857:37">OT_QUAD</name></expr></argument>, <argument pos:start="1857:40" pos:end="1857:44"><expr pos:start="1857:40" pos:end="1857:44"><name pos:start="1857:40" pos:end="1857:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1859:11" pos:end="1865:9">else if <condition pos:start="1859:19" pos:end="1859:27">(<expr pos:start="1859:20" pos:end="1859:26"><name pos:start="1859:20" pos:end="1859:26"><name pos:start="1859:20" pos:end="1859:20">s</name><operator pos:start="1859:21" pos:end="1859:22">-&gt;</operator><name pos:start="1859:23" pos:end="1859:26">ss32</name></name></expr>)</condition> <block pos:start="1859:29" pos:end="1865:9">{<block_content pos:start="1861:13" pos:end="1863:46">

            <expr_stmt pos:start="1861:13" pos:end="1861:49"><expr pos:start="1861:13" pos:end="1861:48"><call pos:start="1861:13" pos:end="1861:48"><name pos:start="1861:13" pos:end="1861:29">gen_op_mov_TN_reg</name><argument_list pos:start="1861:30" pos:end="1861:48">(<argument pos:start="1861:31" pos:end="1861:37"><expr pos:start="1861:31" pos:end="1861:37"><name pos:start="1861:31" pos:end="1861:37">OT_LONG</name></expr></argument>, <argument pos:start="1861:40" pos:end="1861:40"><expr pos:start="1861:40" pos:end="1861:40"><literal type="number" pos:start="1861:40" pos:end="1861:40">0</literal></expr></argument>, <argument pos:start="1861:43" pos:end="1861:47"><expr pos:start="1861:43" pos:end="1861:47"><name pos:start="1861:43" pos:end="1861:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1863:13" pos:end="1863:46"><expr pos:start="1863:13" pos:end="1863:45"><call pos:start="1863:13" pos:end="1863:45"><name pos:start="1863:13" pos:end="1863:29">gen_op_mov_reg_T0</name><argument_list pos:start="1863:30" pos:end="1863:45">(<argument pos:start="1863:31" pos:end="1863:37"><expr pos:start="1863:31" pos:end="1863:37"><name pos:start="1863:31" pos:end="1863:37">OT_LONG</name></expr></argument>, <argument pos:start="1863:40" pos:end="1863:44"><expr pos:start="1863:40" pos:end="1863:44"><name pos:start="1863:40" pos:end="1863:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1865:11" pos:end="1871:9">else <block pos:start="1865:16" pos:end="1871:9">{<block_content pos:start="1867:13" pos:end="1869:46">

            <expr_stmt pos:start="1867:13" pos:end="1867:49"><expr pos:start="1867:13" pos:end="1867:48"><call pos:start="1867:13" pos:end="1867:48"><name pos:start="1867:13" pos:end="1867:29">gen_op_mov_TN_reg</name><argument_list pos:start="1867:30" pos:end="1867:48">(<argument pos:start="1867:31" pos:end="1867:37"><expr pos:start="1867:31" pos:end="1867:37"><name pos:start="1867:31" pos:end="1867:37">OT_WORD</name></expr></argument>, <argument pos:start="1867:40" pos:end="1867:40"><expr pos:start="1867:40" pos:end="1867:40"><literal type="number" pos:start="1867:40" pos:end="1867:40">0</literal></expr></argument>, <argument pos:start="1867:43" pos:end="1867:47"><expr pos:start="1867:43" pos:end="1867:47"><name pos:start="1867:43" pos:end="1867:47">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1869:13" pos:end="1869:46"><expr pos:start="1869:13" pos:end="1869:45"><call pos:start="1869:13" pos:end="1869:45"><name pos:start="1869:13" pos:end="1869:29">gen_op_mov_reg_T0</name><argument_list pos:start="1869:30" pos:end="1869:45">(<argument pos:start="1869:31" pos:end="1869:37"><expr pos:start="1869:31" pos:end="1869:37"><name pos:start="1869:31" pos:end="1869:37">OT_WORD</name></expr></argument>, <argument pos:start="1869:40" pos:end="1869:44"><expr pos:start="1869:40" pos:end="1869:44"><name pos:start="1869:40" pos:end="1869:44">R_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1873:9" pos:end="1873:22"><expr pos:start="1873:9" pos:end="1873:21"><call pos:start="1873:9" pos:end="1873:21"><name pos:start="1873:9" pos:end="1873:18">gen_pop_T0</name><argument_list pos:start="1873:19" pos:end="1873:21">(<argument pos:start="1873:20" pos:end="1873:20"><expr pos:start="1873:20" pos:end="1873:20"><name pos:start="1873:20" pos:end="1873:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1875:9" pos:end="1883:9"><if pos:start="1875:9" pos:end="1879:9">if <condition pos:start="1875:12" pos:end="1875:22">(<expr pos:start="1875:13" pos:end="1875:21"><call pos:start="1875:13" pos:end="1875:21"><name pos:start="1875:13" pos:end="1875:18">CODE64</name><argument_list pos:start="1875:19" pos:end="1875:21">(<argument pos:start="1875:20" pos:end="1875:20"><expr pos:start="1875:20" pos:end="1875:20"><name pos:start="1875:20" pos:end="1875:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1875:24" pos:end="1879:9">{<block_content pos:start="1877:13" pos:end="1877:43">

            <expr_stmt pos:start="1877:13" pos:end="1877:43"><expr pos:start="1877:13" pos:end="1877:42"><name pos:start="1877:13" pos:end="1877:14">ot</name> <operator pos:start="1877:16" pos:end="1877:16">=</operator> <ternary pos:start="1877:18" pos:end="1877:42"><condition pos:start="1877:18" pos:end="1877:24"><expr pos:start="1877:18" pos:end="1877:22"><name pos:start="1877:18" pos:end="1877:22">dflag</name></expr> ?</condition><then pos:start="1877:26" pos:end="1877:32"> <expr pos:start="1877:26" pos:end="1877:32"><name pos:start="1877:26" pos:end="1877:32">OT_QUAD</name></expr> </then><else pos:start="1877:34" pos:end="1877:42">: <expr pos:start="1877:36" pos:end="1877:42"><name pos:start="1877:36" pos:end="1877:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1879:11" pos:end="1883:9">else <block pos:start="1879:16" pos:end="1883:9">{<block_content pos:start="1881:13" pos:end="1881:33">

            <expr_stmt pos:start="1881:13" pos:end="1881:33"><expr pos:start="1881:13" pos:end="1881:32"><name pos:start="1881:13" pos:end="1881:14">ot</name> <operator pos:start="1881:16" pos:end="1881:16">=</operator> <name pos:start="1881:18" pos:end="1881:22">dflag</name> <operator pos:start="1881:24" pos:end="1881:24">+</operator> <name pos:start="1881:26" pos:end="1881:32">OT_WORD</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1885:9" pos:end="1885:37"><expr pos:start="1885:9" pos:end="1885:36"><call pos:start="1885:9" pos:end="1885:36"><name pos:start="1885:9" pos:end="1885:25">gen_op_mov_reg_T0</name><argument_list pos:start="1885:26" pos:end="1885:36">(<argument pos:start="1885:27" pos:end="1885:28"><expr pos:start="1885:27" pos:end="1885:28"><name pos:start="1885:27" pos:end="1885:28">ot</name></expr></argument>, <argument pos:start="1885:31" pos:end="1885:35"><expr pos:start="1885:31" pos:end="1885:35"><name pos:start="1885:31" pos:end="1885:35">R_EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1887:9" pos:end="1887:26"><expr pos:start="1887:9" pos:end="1887:25"><call pos:start="1887:9" pos:end="1887:25"><name pos:start="1887:9" pos:end="1887:22">gen_pop_update</name><argument_list pos:start="1887:23" pos:end="1887:25">(<argument pos:start="1887:24" pos:end="1887:24"><expr pos:start="1887:24" pos:end="1887:24"><name pos:start="1887:24" pos:end="1887:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1889:9" pos:end="1889:14">break;</break>

    <case pos:start="1891:5" pos:end="1891:14">case <expr pos:start="1891:10" pos:end="1891:13"><literal type="number" pos:start="1891:10" pos:end="1891:13">0x06</literal></expr>:</case> <comment type="block" pos:start="1891:16" pos:end="1891:28">/* push es */</comment>

    <case pos:start="1893:5" pos:end="1893:14">case <expr pos:start="1893:10" pos:end="1893:13"><literal type="number" pos:start="1893:10" pos:end="1893:13">0x0e</literal></expr>:</case> <comment type="block" pos:start="1893:16" pos:end="1893:28">/* push cs */</comment>

    <case pos:start="1895:5" pos:end="1895:14">case <expr pos:start="1895:10" pos:end="1895:13"><literal type="number" pos:start="1895:10" pos:end="1895:13">0x16</literal></expr>:</case> <comment type="block" pos:start="1895:16" pos:end="1895:28">/* push ss */</comment>

    <case pos:start="1897:5" pos:end="1897:14">case <expr pos:start="1897:10" pos:end="1897:13"><literal type="number" pos:start="1897:10" pos:end="1897:13">0x1e</literal></expr>:</case> <comment type="block" pos:start="1897:16" pos:end="1897:28">/* push ds */</comment>

        <if_stmt pos:start="1899:9" pos:end="1901:28"><if pos:start="1899:9" pos:end="1901:28">if <condition pos:start="1899:12" pos:end="1899:22">(<expr pos:start="1899:13" pos:end="1899:21"><call pos:start="1899:13" pos:end="1899:21"><name pos:start="1899:13" pos:end="1899:18">CODE64</name><argument_list pos:start="1899:19" pos:end="1899:21">(<argument pos:start="1899:20" pos:end="1899:20"><expr pos:start="1899:20" pos:end="1899:20"><name pos:start="1899:20" pos:end="1899:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1901:13" pos:end="1901:28"><block_content pos:start="1901:13" pos:end="1901:28">

            <goto pos:start="1901:13" pos:end="1901:28">goto <name pos:start="1901:18" pos:end="1901:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1903:9" pos:end="1903:35"><expr pos:start="1903:9" pos:end="1903:34"><call pos:start="1903:9" pos:end="1903:34"><name pos:start="1903:9" pos:end="1903:26">gen_op_movl_T0_seg</name><argument_list pos:start="1903:27" pos:end="1903:34">(<argument pos:start="1903:28" pos:end="1903:33"><expr pos:start="1903:28" pos:end="1903:33"><name pos:start="1903:28" pos:end="1903:28">b</name> <operator pos:start="1903:30" pos:end="1903:31">&gt;&gt;</operator> <literal type="number" pos:start="1903:33" pos:end="1903:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1905:9" pos:end="1905:23"><expr pos:start="1905:9" pos:end="1905:22"><call pos:start="1905:9" pos:end="1905:22"><name pos:start="1905:9" pos:end="1905:19">gen_push_T0</name><argument_list pos:start="1905:20" pos:end="1905:22">(<argument pos:start="1905:21" pos:end="1905:21"><expr pos:start="1905:21" pos:end="1905:21"><name pos:start="1905:21" pos:end="1905:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1907:9" pos:end="1907:14">break;</break>

    <case pos:start="1909:5" pos:end="1909:15">case <expr pos:start="1909:10" pos:end="1909:14"><literal type="number" pos:start="1909:10" pos:end="1909:14">0x1a0</literal></expr>:</case> <comment type="block" pos:start="1909:17" pos:end="1909:29">/* push fs */</comment>

    <case pos:start="1911:5" pos:end="1911:15">case <expr pos:start="1911:10" pos:end="1911:14"><literal type="number" pos:start="1911:10" pos:end="1911:14">0x1a8</literal></expr>:</case> <comment type="block" pos:start="1911:17" pos:end="1911:29">/* push gs */</comment>

        <expr_stmt pos:start="1913:9" pos:end="1913:41"><expr pos:start="1913:9" pos:end="1913:40"><call pos:start="1913:9" pos:end="1913:40"><name pos:start="1913:9" pos:end="1913:26">gen_op_movl_T0_seg</name><argument_list pos:start="1913:27" pos:end="1913:40">(<argument pos:start="1913:28" pos:end="1913:39"><expr pos:start="1913:28" pos:end="1913:39"><operator pos:start="1913:28" pos:end="1913:28">(</operator><name pos:start="1913:29" pos:end="1913:29">b</name> <operator pos:start="1913:31" pos:end="1913:32">&gt;&gt;</operator> <literal type="number" pos:start="1913:34" pos:end="1913:34">3</literal><operator pos:start="1913:35" pos:end="1913:35">)</operator> <operator pos:start="1913:37" pos:end="1913:37">&amp;</operator> <literal type="number" pos:start="1913:39" pos:end="1913:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1915:9" pos:end="1915:23"><expr pos:start="1915:9" pos:end="1915:22"><call pos:start="1915:9" pos:end="1915:22"><name pos:start="1915:9" pos:end="1915:19">gen_push_T0</name><argument_list pos:start="1915:20" pos:end="1915:22">(<argument pos:start="1915:21" pos:end="1915:21"><expr pos:start="1915:21" pos:end="1915:21"><name pos:start="1915:21" pos:end="1915:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1917:9" pos:end="1917:14">break;</break>

    <case pos:start="1919:5" pos:end="1919:14">case <expr pos:start="1919:10" pos:end="1919:13"><literal type="number" pos:start="1919:10" pos:end="1919:13">0x07</literal></expr>:</case> <comment type="block" pos:start="1919:16" pos:end="1919:27">/* pop es */</comment>

    <case pos:start="1921:5" pos:end="1921:14">case <expr pos:start="1921:10" pos:end="1921:13"><literal type="number" pos:start="1921:10" pos:end="1921:13">0x17</literal></expr>:</case> <comment type="block" pos:start="1921:16" pos:end="1921:27">/* pop ss */</comment>

    <case pos:start="1923:5" pos:end="1923:14">case <expr pos:start="1923:10" pos:end="1923:13"><literal type="number" pos:start="1923:10" pos:end="1923:13">0x1f</literal></expr>:</case> <comment type="block" pos:start="1923:16" pos:end="1923:27">/* pop ds */</comment>

        <if_stmt pos:start="1925:9" pos:end="1927:28"><if pos:start="1925:9" pos:end="1927:28">if <condition pos:start="1925:12" pos:end="1925:22">(<expr pos:start="1925:13" pos:end="1925:21"><call pos:start="1925:13" pos:end="1925:21"><name pos:start="1925:13" pos:end="1925:18">CODE64</name><argument_list pos:start="1925:19" pos:end="1925:21">(<argument pos:start="1925:20" pos:end="1925:20"><expr pos:start="1925:20" pos:end="1925:20"><name pos:start="1925:20" pos:end="1925:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1927:13" pos:end="1927:28"><block_content pos:start="1927:13" pos:end="1927:28">

            <goto pos:start="1927:13" pos:end="1927:28">goto <name pos:start="1927:18" pos:end="1927:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1929:9" pos:end="1929:21"><expr pos:start="1929:9" pos:end="1929:20"><name pos:start="1929:9" pos:end="1929:11">reg</name> <operator pos:start="1929:13" pos:end="1929:13">=</operator> <name pos:start="1929:15" pos:end="1929:15">b</name> <operator pos:start="1929:17" pos:end="1929:18">&gt;&gt;</operator> <literal type="number" pos:start="1929:20" pos:end="1929:20">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1931:9" pos:end="1931:22"><expr pos:start="1931:9" pos:end="1931:21"><call pos:start="1931:9" pos:end="1931:21"><name pos:start="1931:9" pos:end="1931:18">gen_pop_T0</name><argument_list pos:start="1931:19" pos:end="1931:21">(<argument pos:start="1931:20" pos:end="1931:20"><expr pos:start="1931:20" pos:end="1931:20"><name pos:start="1931:20" pos:end="1931:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1933:9" pos:end="1933:55"><expr pos:start="1933:9" pos:end="1933:54"><call pos:start="1933:9" pos:end="1933:54"><name pos:start="1933:9" pos:end="1933:23">gen_movl_seg_T0</name><argument_list pos:start="1933:24" pos:end="1933:54">(<argument pos:start="1933:25" pos:end="1933:25"><expr pos:start="1933:25" pos:end="1933:25"><name pos:start="1933:25" pos:end="1933:25">s</name></expr></argument>, <argument pos:start="1933:28" pos:end="1933:30"><expr pos:start="1933:28" pos:end="1933:30"><name pos:start="1933:28" pos:end="1933:30">reg</name></expr></argument>, <argument pos:start="1933:33" pos:end="1933:53"><expr pos:start="1933:33" pos:end="1933:53"><name pos:start="1933:33" pos:end="1933:40">pc_start</name> <operator pos:start="1933:42" pos:end="1933:42">-</operator> <name pos:start="1933:44" pos:end="1933:53"><name pos:start="1933:44" pos:end="1933:44">s</name><operator pos:start="1933:45" pos:end="1933:46">-&gt;</operator><name pos:start="1933:47" pos:end="1933:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1935:9" pos:end="1935:26"><expr pos:start="1935:9" pos:end="1935:25"><call pos:start="1935:9" pos:end="1935:25"><name pos:start="1935:9" pos:end="1935:22">gen_pop_update</name><argument_list pos:start="1935:23" pos:end="1935:25">(<argument pos:start="1935:24" pos:end="1935:24"><expr pos:start="1935:24" pos:end="1935:24"><name pos:start="1935:24" pos:end="1935:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1937:9" pos:end="1951:9"><if pos:start="1937:9" pos:end="1951:9">if <condition pos:start="1937:12" pos:end="1937:24">(<expr pos:start="1937:13" pos:end="1937:23"><name pos:start="1937:13" pos:end="1937:15">reg</name> <operator pos:start="1937:17" pos:end="1937:18">==</operator> <name pos:start="1937:20" pos:end="1937:23">R_SS</name></expr>)</condition> <block pos:start="1937:26" pos:end="1951:9">{<block_content pos:start="1945:13" pos:end="1949:22">

            <comment type="block" pos:start="1939:13" pos:end="1939:57">/* if reg == SS, inhibit interrupts/trace. */</comment>

            <comment type="block" pos:start="1941:13" pos:end="1943:33">/* If several instructions disable interrupts, only the

               _first_ does it */</comment>

            <if_stmt pos:start="1945:13" pos:end="1947:52"><if pos:start="1945:13" pos:end="1947:52">if <condition pos:start="1945:16" pos:end="1945:54">(<expr pos:start="1945:17" pos:end="1945:53"><operator pos:start="1945:17" pos:end="1945:17">!</operator><operator pos:start="1945:18" pos:end="1945:18">(</operator><name pos:start="1945:19" pos:end="1945:30"><name pos:start="1945:19" pos:end="1945:19">s</name><operator pos:start="1945:20" pos:end="1945:21">-&gt;</operator><name pos:start="1945:22" pos:end="1945:23">tb</name><operator pos:start="1945:24" pos:end="1945:25">-&gt;</operator><name pos:start="1945:26" pos:end="1945:30">flags</name></name> <operator pos:start="1945:32" pos:end="1945:32">&amp;</operator> <name pos:start="1945:34" pos:end="1945:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="1945:53" pos:end="1945:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1947:17" pos:end="1947:52"><block_content pos:start="1947:17" pos:end="1947:52">

                <expr_stmt pos:start="1947:17" pos:end="1947:52"><expr pos:start="1947:17" pos:end="1947:51"><call pos:start="1947:17" pos:end="1947:51"><name pos:start="1947:17" pos:end="1947:42">gen_helper_set_inhibit_irq</name><argument_list pos:start="1947:43" pos:end="1947:51">(<argument pos:start="1947:44" pos:end="1947:50"><expr pos:start="1947:44" pos:end="1947:50"><name pos:start="1947:44" pos:end="1947:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1949:13" pos:end="1949:22"><expr pos:start="1949:13" pos:end="1949:21"><name pos:start="1949:13" pos:end="1949:17"><name pos:start="1949:13" pos:end="1949:13">s</name><operator pos:start="1949:14" pos:end="1949:15">-&gt;</operator><name pos:start="1949:16" pos:end="1949:17">tf</name></name> <operator pos:start="1949:19" pos:end="1949:19">=</operator> <literal type="number" pos:start="1949:21" pos:end="1949:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1953:9" pos:end="1959:9"><if pos:start="1953:9" pos:end="1959:9">if <condition pos:start="1953:12" pos:end="1953:22">(<expr pos:start="1953:13" pos:end="1953:21"><name pos:start="1953:13" pos:end="1953:21"><name pos:start="1953:13" pos:end="1953:13">s</name><operator pos:start="1953:14" pos:end="1953:15">-&gt;</operator><name pos:start="1953:16" pos:end="1953:21">is_jmp</name></name></expr>)</condition> <block pos:start="1953:24" pos:end="1959:9">{<block_content pos:start="1955:13" pos:end="1957:23">

            <expr_stmt pos:start="1955:13" pos:end="1955:43"><expr pos:start="1955:13" pos:end="1955:42"><call pos:start="1955:13" pos:end="1955:42"><name pos:start="1955:13" pos:end="1955:22">gen_jmp_im</name><argument_list pos:start="1955:23" pos:end="1955:42">(<argument pos:start="1955:24" pos:end="1955:41"><expr pos:start="1955:24" pos:end="1955:41"><name pos:start="1955:24" pos:end="1955:28"><name pos:start="1955:24" pos:end="1955:24">s</name><operator pos:start="1955:25" pos:end="1955:26">-&gt;</operator><name pos:start="1955:27" pos:end="1955:28">pc</name></name> <operator pos:start="1955:30" pos:end="1955:30">-</operator> <name pos:start="1955:32" pos:end="1955:41"><name pos:start="1955:32" pos:end="1955:32">s</name><operator pos:start="1955:33" pos:end="1955:34">-&gt;</operator><name pos:start="1955:35" pos:end="1955:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1957:13" pos:end="1957:23"><expr pos:start="1957:13" pos:end="1957:22"><call pos:start="1957:13" pos:end="1957:22"><name pos:start="1957:13" pos:end="1957:19">gen_eob</name><argument_list pos:start="1957:20" pos:end="1957:22">(<argument pos:start="1957:21" pos:end="1957:21"><expr pos:start="1957:21" pos:end="1957:21"><name pos:start="1957:21" pos:end="1957:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1961:9" pos:end="1961:14">break;</break>

    <case pos:start="1963:5" pos:end="1963:15">case <expr pos:start="1963:10" pos:end="1963:14"><literal type="number" pos:start="1963:10" pos:end="1963:14">0x1a1</literal></expr>:</case> <comment type="block" pos:start="1963:17" pos:end="1963:28">/* pop fs */</comment>

    <case pos:start="1965:5" pos:end="1965:15">case <expr pos:start="1965:10" pos:end="1965:14"><literal type="number" pos:start="1965:10" pos:end="1965:14">0x1a9</literal></expr>:</case> <comment type="block" pos:start="1965:17" pos:end="1965:28">/* pop gs */</comment>

        <expr_stmt pos:start="1967:9" pos:end="1967:22"><expr pos:start="1967:9" pos:end="1967:21"><call pos:start="1967:9" pos:end="1967:21"><name pos:start="1967:9" pos:end="1967:18">gen_pop_T0</name><argument_list pos:start="1967:19" pos:end="1967:21">(<argument pos:start="1967:20" pos:end="1967:20"><expr pos:start="1967:20" pos:end="1967:20"><name pos:start="1967:20" pos:end="1967:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1969:9" pos:end="1969:64"><expr pos:start="1969:9" pos:end="1969:63"><call pos:start="1969:9" pos:end="1969:63"><name pos:start="1969:9" pos:end="1969:23">gen_movl_seg_T0</name><argument_list pos:start="1969:24" pos:end="1969:63">(<argument pos:start="1969:25" pos:end="1969:25"><expr pos:start="1969:25" pos:end="1969:25"><name pos:start="1969:25" pos:end="1969:25">s</name></expr></argument>, <argument pos:start="1969:28" pos:end="1969:39"><expr pos:start="1969:28" pos:end="1969:39"><operator pos:start="1969:28" pos:end="1969:28">(</operator><name pos:start="1969:29" pos:end="1969:29">b</name> <operator pos:start="1969:31" pos:end="1969:32">&gt;&gt;</operator> <literal type="number" pos:start="1969:34" pos:end="1969:34">3</literal><operator pos:start="1969:35" pos:end="1969:35">)</operator> <operator pos:start="1969:37" pos:end="1969:37">&amp;</operator> <literal type="number" pos:start="1969:39" pos:end="1969:39">7</literal></expr></argument>, <argument pos:start="1969:42" pos:end="1969:62"><expr pos:start="1969:42" pos:end="1969:62"><name pos:start="1969:42" pos:end="1969:49">pc_start</name> <operator pos:start="1969:51" pos:end="1969:51">-</operator> <name pos:start="1969:53" pos:end="1969:62"><name pos:start="1969:53" pos:end="1969:53">s</name><operator pos:start="1969:54" pos:end="1969:55">-&gt;</operator><name pos:start="1969:56" pos:end="1969:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1971:9" pos:end="1971:26"><expr pos:start="1971:9" pos:end="1971:25"><call pos:start="1971:9" pos:end="1971:25"><name pos:start="1971:9" pos:end="1971:22">gen_pop_update</name><argument_list pos:start="1971:23" pos:end="1971:25">(<argument pos:start="1971:24" pos:end="1971:24"><expr pos:start="1971:24" pos:end="1971:24"><name pos:start="1971:24" pos:end="1971:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1973:9" pos:end="1979:9"><if pos:start="1973:9" pos:end="1979:9">if <condition pos:start="1973:12" pos:end="1973:22">(<expr pos:start="1973:13" pos:end="1973:21"><name pos:start="1973:13" pos:end="1973:21"><name pos:start="1973:13" pos:end="1973:13">s</name><operator pos:start="1973:14" pos:end="1973:15">-&gt;</operator><name pos:start="1973:16" pos:end="1973:21">is_jmp</name></name></expr>)</condition> <block pos:start="1973:24" pos:end="1979:9">{<block_content pos:start="1975:13" pos:end="1977:23">

            <expr_stmt pos:start="1975:13" pos:end="1975:43"><expr pos:start="1975:13" pos:end="1975:42"><call pos:start="1975:13" pos:end="1975:42"><name pos:start="1975:13" pos:end="1975:22">gen_jmp_im</name><argument_list pos:start="1975:23" pos:end="1975:42">(<argument pos:start="1975:24" pos:end="1975:41"><expr pos:start="1975:24" pos:end="1975:41"><name pos:start="1975:24" pos:end="1975:28"><name pos:start="1975:24" pos:end="1975:24">s</name><operator pos:start="1975:25" pos:end="1975:26">-&gt;</operator><name pos:start="1975:27" pos:end="1975:28">pc</name></name> <operator pos:start="1975:30" pos:end="1975:30">-</operator> <name pos:start="1975:32" pos:end="1975:41"><name pos:start="1975:32" pos:end="1975:32">s</name><operator pos:start="1975:33" pos:end="1975:34">-&gt;</operator><name pos:start="1975:35" pos:end="1975:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1977:13" pos:end="1977:23"><expr pos:start="1977:13" pos:end="1977:22"><call pos:start="1977:13" pos:end="1977:22"><name pos:start="1977:13" pos:end="1977:19">gen_eob</name><argument_list pos:start="1977:20" pos:end="1977:22">(<argument pos:start="1977:21" pos:end="1977:21"><expr pos:start="1977:21" pos:end="1977:21"><name pos:start="1977:21" pos:end="1977:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1981:9" pos:end="1981:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1985:9" pos:end="1985:36">/**************************/</comment>

        <comment type="block" pos:start="1987:9" pos:end="1987:17">/* mov */</comment>

    <case pos:start="1989:5" pos:end="1989:14">case <expr pos:start="1989:10" pos:end="1989:13"><literal type="number" pos:start="1989:10" pos:end="1989:13">0x88</literal></expr>:</case>

    <case pos:start="1991:5" pos:end="1991:14">case <expr pos:start="1991:10" pos:end="1991:13"><literal type="number" pos:start="1991:10" pos:end="1991:13">0x89</literal></expr>:</case> <comment type="block" pos:start="1991:16" pos:end="1991:31">/* mov Gv, Ev */</comment>

        <if_stmt pos:start="1993:9" pos:end="1999:33"><if pos:start="1993:9" pos:end="1995:25">if <condition pos:start="1993:12" pos:end="1993:25">(<expr pos:start="1993:13" pos:end="1993:24"><operator pos:start="1993:13" pos:end="1993:13">(</operator><name pos:start="1993:14" pos:end="1993:14">b</name> <operator pos:start="1993:16" pos:end="1993:16">&amp;</operator> <literal type="number" pos:start="1993:18" pos:end="1993:18">1</literal><operator pos:start="1993:19" pos:end="1993:19">)</operator> <operator pos:start="1993:21" pos:end="1993:22">==</operator> <literal type="number" pos:start="1993:24" pos:end="1993:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1995:13" pos:end="1995:25"><block_content pos:start="1995:13" pos:end="1995:25">

            <expr_stmt pos:start="1995:13" pos:end="1995:25"><expr pos:start="1995:13" pos:end="1995:24"><name pos:start="1995:13" pos:end="1995:14">ot</name> <operator pos:start="1995:16" pos:end="1995:16">=</operator> <name pos:start="1995:18" pos:end="1995:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1997:9" pos:end="1999:33">else<block type="pseudo" pos:start="1999:13" pos:end="1999:33"><block_content pos:start="1999:13" pos:end="1999:33">

            <expr_stmt pos:start="1999:13" pos:end="1999:33"><expr pos:start="1999:13" pos:end="1999:32"><name pos:start="1999:13" pos:end="1999:14">ot</name> <operator pos:start="1999:16" pos:end="1999:16">=</operator> <name pos:start="1999:18" pos:end="1999:22">dflag</name> <operator pos:start="1999:24" pos:end="1999:24">+</operator> <name pos:start="1999:26" pos:end="1999:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2001:9" pos:end="2001:55"><expr pos:start="2001:9" pos:end="2001:54"><name pos:start="2001:9" pos:end="2001:13">modrm</name> <operator pos:start="2001:15" pos:end="2001:15">=</operator> <call pos:start="2001:17" pos:end="2001:54"><name pos:start="2001:17" pos:end="2001:29">cpu_ldub_code</name><argument_list pos:start="2001:30" pos:end="2001:54">(<argument pos:start="2001:31" pos:end="2001:44"><expr pos:start="2001:31" pos:end="2001:44"><name pos:start="2001:31" pos:end="2001:44">cpu_single_env</name></expr></argument>, <argument pos:start="2001:47" pos:end="2001:53"><expr pos:start="2001:47" pos:end="2001:53"><name pos:start="2001:47" pos:end="2001:51"><name pos:start="2001:47" pos:end="2001:47">s</name><operator pos:start="2001:48" pos:end="2001:49">-&gt;</operator><name pos:start="2001:50" pos:end="2001:51">pc</name></name><operator pos:start="2001:52" pos:end="2001:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2003:9" pos:end="2003:41"><expr pos:start="2003:9" pos:end="2003:40"><name pos:start="2003:9" pos:end="2003:11">reg</name> <operator pos:start="2003:13" pos:end="2003:13">=</operator> <operator pos:start="2003:15" pos:end="2003:15">(</operator><operator pos:start="2003:16" pos:end="2003:16">(</operator><name pos:start="2003:17" pos:end="2003:21">modrm</name> <operator pos:start="2003:23" pos:end="2003:24">&gt;&gt;</operator> <literal type="number" pos:start="2003:26" pos:end="2003:26">3</literal><operator pos:start="2003:27" pos:end="2003:27">)</operator> <operator pos:start="2003:29" pos:end="2003:29">&amp;</operator> <literal type="number" pos:start="2003:31" pos:end="2003:31">7</literal><operator pos:start="2003:32" pos:end="2003:32">)</operator> <operator pos:start="2003:34" pos:end="2003:34">|</operator> <name pos:start="2003:36" pos:end="2003:40">rex_r</name></expr>;</expr_stmt>



        <comment type="block" pos:start="2007:9" pos:end="2007:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="2009:9" pos:end="2009:45"><expr pos:start="2009:9" pos:end="2009:44"><call pos:start="2009:9" pos:end="2009:44"><name pos:start="2009:9" pos:end="2009:22">gen_ldst_modrm</name><argument_list pos:start="2009:23" pos:end="2009:44">(<argument pos:start="2009:24" pos:end="2009:24"><expr pos:start="2009:24" pos:end="2009:24"><name pos:start="2009:24" pos:end="2009:24">s</name></expr></argument>, <argument pos:start="2009:27" pos:end="2009:31"><expr pos:start="2009:27" pos:end="2009:31"><name pos:start="2009:27" pos:end="2009:31">modrm</name></expr></argument>, <argument pos:start="2009:34" pos:end="2009:35"><expr pos:start="2009:34" pos:end="2009:35"><name pos:start="2009:34" pos:end="2009:35">ot</name></expr></argument>, <argument pos:start="2009:38" pos:end="2009:40"><expr pos:start="2009:38" pos:end="2009:40"><name pos:start="2009:38" pos:end="2009:40">reg</name></expr></argument>, <argument pos:start="2009:43" pos:end="2009:43"><expr pos:start="2009:43" pos:end="2009:43"><literal type="number" pos:start="2009:43" pos:end="2009:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2011:9" pos:end="2011:14">break;</break>

    <case pos:start="2013:5" pos:end="2013:14">case <expr pos:start="2013:10" pos:end="2013:13"><literal type="number" pos:start="2013:10" pos:end="2013:13">0xc6</literal></expr>:</case>

    <case pos:start="2015:5" pos:end="2015:14">case <expr pos:start="2015:10" pos:end="2015:13"><literal type="number" pos:start="2015:10" pos:end="2015:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="2015:16" pos:end="2015:31">/* mov Ev, Iv */</comment>

        <if_stmt pos:start="2017:9" pos:end="2023:33"><if pos:start="2017:9" pos:end="2019:25">if <condition pos:start="2017:12" pos:end="2017:25">(<expr pos:start="2017:13" pos:end="2017:24"><operator pos:start="2017:13" pos:end="2017:13">(</operator><name pos:start="2017:14" pos:end="2017:14">b</name> <operator pos:start="2017:16" pos:end="2017:16">&amp;</operator> <literal type="number" pos:start="2017:18" pos:end="2017:18">1</literal><operator pos:start="2017:19" pos:end="2017:19">)</operator> <operator pos:start="2017:21" pos:end="2017:22">==</operator> <literal type="number" pos:start="2017:24" pos:end="2017:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2019:13" pos:end="2019:25"><block_content pos:start="2019:13" pos:end="2019:25">

            <expr_stmt pos:start="2019:13" pos:end="2019:25"><expr pos:start="2019:13" pos:end="2019:24"><name pos:start="2019:13" pos:end="2019:14">ot</name> <operator pos:start="2019:16" pos:end="2019:16">=</operator> <name pos:start="2019:18" pos:end="2019:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2021:9" pos:end="2023:33">else<block type="pseudo" pos:start="2023:13" pos:end="2023:33"><block_content pos:start="2023:13" pos:end="2023:33">

            <expr_stmt pos:start="2023:13" pos:end="2023:33"><expr pos:start="2023:13" pos:end="2023:32"><name pos:start="2023:13" pos:end="2023:14">ot</name> <operator pos:start="2023:16" pos:end="2023:16">=</operator> <name pos:start="2023:18" pos:end="2023:22">dflag</name> <operator pos:start="2023:24" pos:end="2023:24">+</operator> <name pos:start="2023:26" pos:end="2023:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2025:9" pos:end="2025:55"><expr pos:start="2025:9" pos:end="2025:54"><name pos:start="2025:9" pos:end="2025:13">modrm</name> <operator pos:start="2025:15" pos:end="2025:15">=</operator> <call pos:start="2025:17" pos:end="2025:54"><name pos:start="2025:17" pos:end="2025:29">cpu_ldub_code</name><argument_list pos:start="2025:30" pos:end="2025:54">(<argument pos:start="2025:31" pos:end="2025:44"><expr pos:start="2025:31" pos:end="2025:44"><name pos:start="2025:31" pos:end="2025:44">cpu_single_env</name></expr></argument>, <argument pos:start="2025:47" pos:end="2025:53"><expr pos:start="2025:47" pos:end="2025:53"><name pos:start="2025:47" pos:end="2025:51"><name pos:start="2025:47" pos:end="2025:47">s</name><operator pos:start="2025:48" pos:end="2025:49">-&gt;</operator><name pos:start="2025:50" pos:end="2025:51">pc</name></name><operator pos:start="2025:52" pos:end="2025:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2027:9" pos:end="2027:31"><expr pos:start="2027:9" pos:end="2027:30"><name pos:start="2027:9" pos:end="2027:11">mod</name> <operator pos:start="2027:13" pos:end="2027:13">=</operator> <operator pos:start="2027:15" pos:end="2027:15">(</operator><name pos:start="2027:16" pos:end="2027:20">modrm</name> <operator pos:start="2027:22" pos:end="2027:23">&gt;&gt;</operator> <literal type="number" pos:start="2027:25" pos:end="2027:25">6</literal><operator pos:start="2027:26" pos:end="2027:26">)</operator> <operator pos:start="2027:28" pos:end="2027:28">&amp;</operator> <literal type="number" pos:start="2027:30" pos:end="2027:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2029:9" pos:end="2035:9"><if pos:start="2029:9" pos:end="2035:9">if <condition pos:start="2029:12" pos:end="2029:21">(<expr pos:start="2029:13" pos:end="2029:20"><name pos:start="2029:13" pos:end="2029:15">mod</name> <operator pos:start="2029:17" pos:end="2029:18">!=</operator> <literal type="number" pos:start="2029:20" pos:end="2029:20">3</literal></expr>)</condition> <block pos:start="2029:23" pos:end="2035:9">{<block_content pos:start="2031:13" pos:end="2033:61">

            <expr_stmt pos:start="2031:13" pos:end="2031:48"><expr pos:start="2031:13" pos:end="2031:47"><name pos:start="2031:13" pos:end="2031:25"><name pos:start="2031:13" pos:end="2031:13">s</name><operator pos:start="2031:14" pos:end="2031:15">-&gt;</operator><name pos:start="2031:16" pos:end="2031:25">rip_offset</name></name> <operator pos:start="2031:27" pos:end="2031:27">=</operator> <call pos:start="2031:29" pos:end="2031:47"><name pos:start="2031:29" pos:end="2031:43">insn_const_size</name><argument_list pos:start="2031:44" pos:end="2031:47">(<argument pos:start="2031:45" pos:end="2031:46"><expr pos:start="2031:45" pos:end="2031:46"><name pos:start="2031:45" pos:end="2031:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2033:13" pos:end="2033:61"><expr pos:start="2033:13" pos:end="2033:60"><call pos:start="2033:13" pos:end="2033:60"><name pos:start="2033:13" pos:end="2033:25">gen_lea_modrm</name><argument_list pos:start="2033:26" pos:end="2033:60">(<argument pos:start="2033:27" pos:end="2033:27"><expr pos:start="2033:27" pos:end="2033:27"><name pos:start="2033:27" pos:end="2033:27">s</name></expr></argument>, <argument pos:start="2033:30" pos:end="2033:34"><expr pos:start="2033:30" pos:end="2033:34"><name pos:start="2033:30" pos:end="2033:34">modrm</name></expr></argument>, <argument pos:start="2033:37" pos:end="2033:45"><expr pos:start="2033:37" pos:end="2033:45"><operator pos:start="2033:37" pos:end="2033:37">&amp;</operator><name pos:start="2033:38" pos:end="2033:45">reg_addr</name></expr></argument>, <argument pos:start="2033:48" pos:end="2033:59"><expr pos:start="2033:48" pos:end="2033:59"><operator pos:start="2033:48" pos:end="2033:48">&amp;</operator><name pos:start="2033:49" pos:end="2033:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2037:9" pos:end="2037:30"><expr pos:start="2037:9" pos:end="2037:29"><name pos:start="2037:9" pos:end="2037:11">val</name> <operator pos:start="2037:13" pos:end="2037:13">=</operator> <call pos:start="2037:15" pos:end="2037:29"><name pos:start="2037:15" pos:end="2037:22">insn_get</name><argument_list pos:start="2037:23" pos:end="2037:29">(<argument pos:start="2037:24" pos:end="2037:24"><expr pos:start="2037:24" pos:end="2037:24"><name pos:start="2037:24" pos:end="2037:24">s</name></expr></argument>, <argument pos:start="2037:27" pos:end="2037:28"><expr pos:start="2037:27" pos:end="2037:28"><name pos:start="2037:27" pos:end="2037:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2039:9" pos:end="2039:31"><expr pos:start="2039:9" pos:end="2039:30"><call pos:start="2039:9" pos:end="2039:30"><name pos:start="2039:9" pos:end="2039:25">gen_op_movl_T0_im</name><argument_list pos:start="2039:26" pos:end="2039:30">(<argument pos:start="2039:27" pos:end="2039:29"><expr pos:start="2039:27" pos:end="2039:29"><name pos:start="2039:27" pos:end="2039:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2041:9" pos:end="2047:58"><if pos:start="2041:9" pos:end="2043:47">if <condition pos:start="2041:12" pos:end="2041:21">(<expr pos:start="2041:13" pos:end="2041:20"><name pos:start="2041:13" pos:end="2041:15">mod</name> <operator pos:start="2041:17" pos:end="2041:18">!=</operator> <literal type="number" pos:start="2041:20" pos:end="2041:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2043:13" pos:end="2043:47"><block_content pos:start="2043:13" pos:end="2043:47">

            <expr_stmt pos:start="2043:13" pos:end="2043:47"><expr pos:start="2043:13" pos:end="2043:46"><call pos:start="2043:13" pos:end="2043:46"><name pos:start="2043:13" pos:end="2043:27">gen_op_st_T0_A0</name><argument_list pos:start="2043:28" pos:end="2043:46">(<argument pos:start="2043:29" pos:end="2043:45"><expr pos:start="2043:29" pos:end="2043:45"><name pos:start="2043:29" pos:end="2043:30">ot</name> <operator pos:start="2043:32" pos:end="2043:32">+</operator> <name pos:start="2043:34" pos:end="2043:45"><name pos:start="2043:34" pos:end="2043:34">s</name><operator pos:start="2043:35" pos:end="2043:36">-&gt;</operator><name pos:start="2043:37" pos:end="2043:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2045:9" pos:end="2047:58">else<block type="pseudo" pos:start="2047:13" pos:end="2047:58"><block_content pos:start="2047:13" pos:end="2047:58">

            <expr_stmt pos:start="2047:13" pos:end="2047:58"><expr pos:start="2047:13" pos:end="2047:57"><call pos:start="2047:13" pos:end="2047:57"><name pos:start="2047:13" pos:end="2047:29">gen_op_mov_reg_T0</name><argument_list pos:start="2047:30" pos:end="2047:57">(<argument pos:start="2047:31" pos:end="2047:32"><expr pos:start="2047:31" pos:end="2047:32"><name pos:start="2047:31" pos:end="2047:32">ot</name></expr></argument>, <argument pos:start="2047:35" pos:end="2047:56"><expr pos:start="2047:35" pos:end="2047:56"><operator pos:start="2047:35" pos:end="2047:35">(</operator><name pos:start="2047:36" pos:end="2047:40">modrm</name> <operator pos:start="2047:42" pos:end="2047:42">&amp;</operator> <literal type="number" pos:start="2047:44" pos:end="2047:44">7</literal><operator pos:start="2047:45" pos:end="2047:45">)</operator> <operator pos:start="2047:47" pos:end="2047:47">|</operator> <call pos:start="2047:49" pos:end="2047:56"><name pos:start="2047:49" pos:end="2047:53">REX_B</name><argument_list pos:start="2047:54" pos:end="2047:56">(<argument pos:start="2047:55" pos:end="2047:55"><expr pos:start="2047:55" pos:end="2047:55"><name pos:start="2047:55" pos:end="2047:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="2049:9" pos:end="2049:14">break;</break>

    <case pos:start="2051:5" pos:end="2051:14">case <expr pos:start="2051:10" pos:end="2051:13"><literal type="number" pos:start="2051:10" pos:end="2051:13">0x8a</literal></expr>:</case>

    <case pos:start="2053:5" pos:end="2053:14">case <expr pos:start="2053:10" pos:end="2053:13"><literal type="number" pos:start="2053:10" pos:end="2053:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="2053:16" pos:end="2053:31">/* mov Ev, Gv */</comment>

        <if_stmt pos:start="2055:9" pos:end="2061:33"><if pos:start="2055:9" pos:end="2057:25">if <condition pos:start="2055:12" pos:end="2055:25">(<expr pos:start="2055:13" pos:end="2055:24"><operator pos:start="2055:13" pos:end="2055:13">(</operator><name pos:start="2055:14" pos:end="2055:14">b</name> <operator pos:start="2055:16" pos:end="2055:16">&amp;</operator> <literal type="number" pos:start="2055:18" pos:end="2055:18">1</literal><operator pos:start="2055:19" pos:end="2055:19">)</operator> <operator pos:start="2055:21" pos:end="2055:22">==</operator> <literal type="number" pos:start="2055:24" pos:end="2055:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2057:13" pos:end="2057:25"><block_content pos:start="2057:13" pos:end="2057:25">

            <expr_stmt pos:start="2057:13" pos:end="2057:25"><expr pos:start="2057:13" pos:end="2057:24"><name pos:start="2057:13" pos:end="2057:14">ot</name> <operator pos:start="2057:16" pos:end="2057:16">=</operator> <name pos:start="2057:18" pos:end="2057:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2059:9" pos:end="2061:33">else<block type="pseudo" pos:start="2061:13" pos:end="2061:33"><block_content pos:start="2061:13" pos:end="2061:33">

            <expr_stmt pos:start="2061:13" pos:end="2061:33"><expr pos:start="2061:13" pos:end="2061:32"><name pos:start="2061:13" pos:end="2061:14">ot</name> <operator pos:start="2061:16" pos:end="2061:16">=</operator> <name pos:start="2061:18" pos:end="2061:24">OT_WORD</name> <operator pos:start="2061:26" pos:end="2061:26">+</operator> <name pos:start="2061:28" pos:end="2061:32">dflag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2063:9" pos:end="2063:55"><expr pos:start="2063:9" pos:end="2063:54"><name pos:start="2063:9" pos:end="2063:13">modrm</name> <operator pos:start="2063:15" pos:end="2063:15">=</operator> <call pos:start="2063:17" pos:end="2063:54"><name pos:start="2063:17" pos:end="2063:29">cpu_ldub_code</name><argument_list pos:start="2063:30" pos:end="2063:54">(<argument pos:start="2063:31" pos:end="2063:44"><expr pos:start="2063:31" pos:end="2063:44"><name pos:start="2063:31" pos:end="2063:44">cpu_single_env</name></expr></argument>, <argument pos:start="2063:47" pos:end="2063:53"><expr pos:start="2063:47" pos:end="2063:53"><name pos:start="2063:47" pos:end="2063:51"><name pos:start="2063:47" pos:end="2063:47">s</name><operator pos:start="2063:48" pos:end="2063:49">-&gt;</operator><name pos:start="2063:50" pos:end="2063:51">pc</name></name><operator pos:start="2063:52" pos:end="2063:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2065:9" pos:end="2065:41"><expr pos:start="2065:9" pos:end="2065:40"><name pos:start="2065:9" pos:end="2065:11">reg</name> <operator pos:start="2065:13" pos:end="2065:13">=</operator> <operator pos:start="2065:15" pos:end="2065:15">(</operator><operator pos:start="2065:16" pos:end="2065:16">(</operator><name pos:start="2065:17" pos:end="2065:21">modrm</name> <operator pos:start="2065:23" pos:end="2065:24">&gt;&gt;</operator> <literal type="number" pos:start="2065:26" pos:end="2065:26">3</literal><operator pos:start="2065:27" pos:end="2065:27">)</operator> <operator pos:start="2065:29" pos:end="2065:29">&amp;</operator> <literal type="number" pos:start="2065:31" pos:end="2065:31">7</literal><operator pos:start="2065:32" pos:end="2065:32">)</operator> <operator pos:start="2065:34" pos:end="2065:34">|</operator> <name pos:start="2065:36" pos:end="2065:40">rex_r</name></expr>;</expr_stmt>



        <expr_stmt pos:start="2069:9" pos:end="2069:49"><expr pos:start="2069:9" pos:end="2069:48"><call pos:start="2069:9" pos:end="2069:48"><name pos:start="2069:9" pos:end="2069:22">gen_ldst_modrm</name><argument_list pos:start="2069:23" pos:end="2069:48">(<argument pos:start="2069:24" pos:end="2069:24"><expr pos:start="2069:24" pos:end="2069:24"><name pos:start="2069:24" pos:end="2069:24">s</name></expr></argument>, <argument pos:start="2069:27" pos:end="2069:31"><expr pos:start="2069:27" pos:end="2069:31"><name pos:start="2069:27" pos:end="2069:31">modrm</name></expr></argument>, <argument pos:start="2069:34" pos:end="2069:35"><expr pos:start="2069:34" pos:end="2069:35"><name pos:start="2069:34" pos:end="2069:35">ot</name></expr></argument>, <argument pos:start="2069:38" pos:end="2069:44"><expr pos:start="2069:38" pos:end="2069:44"><name pos:start="2069:38" pos:end="2069:44">OR_TMP0</name></expr></argument>, <argument pos:start="2069:47" pos:end="2069:47"><expr pos:start="2069:47" pos:end="2069:47"><literal type="number" pos:start="2069:47" pos:end="2069:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2071:9" pos:end="2071:35"><expr pos:start="2071:9" pos:end="2071:34"><call pos:start="2071:9" pos:end="2071:34"><name pos:start="2071:9" pos:end="2071:25">gen_op_mov_reg_T0</name><argument_list pos:start="2071:26" pos:end="2071:34">(<argument pos:start="2071:27" pos:end="2071:28"><expr pos:start="2071:27" pos:end="2071:28"><name pos:start="2071:27" pos:end="2071:28">ot</name></expr></argument>, <argument pos:start="2071:31" pos:end="2071:33"><expr pos:start="2071:31" pos:end="2071:33"><name pos:start="2071:31" pos:end="2071:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2073:9" pos:end="2073:14">break;</break>

    <case pos:start="2075:5" pos:end="2075:14">case <expr pos:start="2075:10" pos:end="2075:13"><literal type="number" pos:start="2075:10" pos:end="2075:13">0x8e</literal></expr>:</case> <comment type="block" pos:start="2075:16" pos:end="2075:32">/* mov seg, Gv */</comment>

        <expr_stmt pos:start="2077:9" pos:end="2077:55"><expr pos:start="2077:9" pos:end="2077:54"><name pos:start="2077:9" pos:end="2077:13">modrm</name> <operator pos:start="2077:15" pos:end="2077:15">=</operator> <call pos:start="2077:17" pos:end="2077:54"><name pos:start="2077:17" pos:end="2077:29">cpu_ldub_code</name><argument_list pos:start="2077:30" pos:end="2077:54">(<argument pos:start="2077:31" pos:end="2077:44"><expr pos:start="2077:31" pos:end="2077:44"><name pos:start="2077:31" pos:end="2077:44">cpu_single_env</name></expr></argument>, <argument pos:start="2077:47" pos:end="2077:53"><expr pos:start="2077:47" pos:end="2077:53"><name pos:start="2077:47" pos:end="2077:51"><name pos:start="2077:47" pos:end="2077:47">s</name><operator pos:start="2077:48" pos:end="2077:49">-&gt;</operator><name pos:start="2077:50" pos:end="2077:51">pc</name></name><operator pos:start="2077:52" pos:end="2077:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2079:9" pos:end="2079:31"><expr pos:start="2079:9" pos:end="2079:30"><name pos:start="2079:9" pos:end="2079:11">reg</name> <operator pos:start="2079:13" pos:end="2079:13">=</operator> <operator pos:start="2079:15" pos:end="2079:15">(</operator><name pos:start="2079:16" pos:end="2079:20">modrm</name> <operator pos:start="2079:22" pos:end="2079:23">&gt;&gt;</operator> <literal type="number" pos:start="2079:25" pos:end="2079:25">3</literal><operator pos:start="2079:26" pos:end="2079:26">)</operator> <operator pos:start="2079:28" pos:end="2079:28">&amp;</operator> <literal type="number" pos:start="2079:30" pos:end="2079:30">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2081:9" pos:end="2083:28"><if pos:start="2081:9" pos:end="2083:28">if <condition pos:start="2081:12" pos:end="2081:36">(<expr pos:start="2081:13" pos:end="2081:35"><name pos:start="2081:13" pos:end="2081:15">reg</name> <operator pos:start="2081:17" pos:end="2081:18">&gt;=</operator> <literal type="number" pos:start="2081:20" pos:end="2081:20">6</literal> <operator pos:start="2081:22" pos:end="2081:23">||</operator> <name pos:start="2081:25" pos:end="2081:27">reg</name> <operator pos:start="2081:29" pos:end="2081:30">==</operator> <name pos:start="2081:32" pos:end="2081:35">R_CS</name></expr>)</condition><block type="pseudo" pos:start="2083:13" pos:end="2083:28"><block_content pos:start="2083:13" pos:end="2083:28">

            <goto pos:start="2083:13" pos:end="2083:28">goto <name pos:start="2083:18" pos:end="2083:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2085:9" pos:end="2085:54"><expr pos:start="2085:9" pos:end="2085:53"><call pos:start="2085:9" pos:end="2085:53"><name pos:start="2085:9" pos:end="2085:22">gen_ldst_modrm</name><argument_list pos:start="2085:23" pos:end="2085:53">(<argument pos:start="2085:24" pos:end="2085:24"><expr pos:start="2085:24" pos:end="2085:24"><name pos:start="2085:24" pos:end="2085:24">s</name></expr></argument>, <argument pos:start="2085:27" pos:end="2085:31"><expr pos:start="2085:27" pos:end="2085:31"><name pos:start="2085:27" pos:end="2085:31">modrm</name></expr></argument>, <argument pos:start="2085:34" pos:end="2085:40"><expr pos:start="2085:34" pos:end="2085:40"><name pos:start="2085:34" pos:end="2085:40">OT_WORD</name></expr></argument>, <argument pos:start="2085:43" pos:end="2085:49"><expr pos:start="2085:43" pos:end="2085:49"><name pos:start="2085:43" pos:end="2085:49">OR_TMP0</name></expr></argument>, <argument pos:start="2085:52" pos:end="2085:52"><expr pos:start="2085:52" pos:end="2085:52"><literal type="number" pos:start="2085:52" pos:end="2085:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2087:9" pos:end="2087:55"><expr pos:start="2087:9" pos:end="2087:54"><call pos:start="2087:9" pos:end="2087:54"><name pos:start="2087:9" pos:end="2087:23">gen_movl_seg_T0</name><argument_list pos:start="2087:24" pos:end="2087:54">(<argument pos:start="2087:25" pos:end="2087:25"><expr pos:start="2087:25" pos:end="2087:25"><name pos:start="2087:25" pos:end="2087:25">s</name></expr></argument>, <argument pos:start="2087:28" pos:end="2087:30"><expr pos:start="2087:28" pos:end="2087:30"><name pos:start="2087:28" pos:end="2087:30">reg</name></expr></argument>, <argument pos:start="2087:33" pos:end="2087:53"><expr pos:start="2087:33" pos:end="2087:53"><name pos:start="2087:33" pos:end="2087:40">pc_start</name> <operator pos:start="2087:42" pos:end="2087:42">-</operator> <name pos:start="2087:44" pos:end="2087:53"><name pos:start="2087:44" pos:end="2087:44">s</name><operator pos:start="2087:45" pos:end="2087:46">-&gt;</operator><name pos:start="2087:47" pos:end="2087:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2089:9" pos:end="2103:9"><if pos:start="2089:9" pos:end="2103:9">if <condition pos:start="2089:12" pos:end="2089:24">(<expr pos:start="2089:13" pos:end="2089:23"><name pos:start="2089:13" pos:end="2089:15">reg</name> <operator pos:start="2089:17" pos:end="2089:18">==</operator> <name pos:start="2089:20" pos:end="2089:23">R_SS</name></expr>)</condition> <block pos:start="2089:26" pos:end="2103:9">{<block_content pos:start="2097:13" pos:end="2101:22">

            <comment type="block" pos:start="2091:13" pos:end="2091:56">/* if reg == SS, inhibit interrupts/trace */</comment>

            <comment type="block" pos:start="2093:13" pos:end="2095:33">/* If several instructions disable interrupts, only the

               _first_ does it */</comment>

            <if_stmt pos:start="2097:13" pos:end="2099:52"><if pos:start="2097:13" pos:end="2099:52">if <condition pos:start="2097:16" pos:end="2097:54">(<expr pos:start="2097:17" pos:end="2097:53"><operator pos:start="2097:17" pos:end="2097:17">!</operator><operator pos:start="2097:18" pos:end="2097:18">(</operator><name pos:start="2097:19" pos:end="2097:30"><name pos:start="2097:19" pos:end="2097:19">s</name><operator pos:start="2097:20" pos:end="2097:21">-&gt;</operator><name pos:start="2097:22" pos:end="2097:23">tb</name><operator pos:start="2097:24" pos:end="2097:25">-&gt;</operator><name pos:start="2097:26" pos:end="2097:30">flags</name></name> <operator pos:start="2097:32" pos:end="2097:32">&amp;</operator> <name pos:start="2097:34" pos:end="2097:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="2097:53" pos:end="2097:53">)</operator></expr>)</condition><block type="pseudo" pos:start="2099:17" pos:end="2099:52"><block_content pos:start="2099:17" pos:end="2099:52">

                <expr_stmt pos:start="2099:17" pos:end="2099:52"><expr pos:start="2099:17" pos:end="2099:51"><call pos:start="2099:17" pos:end="2099:51"><name pos:start="2099:17" pos:end="2099:42">gen_helper_set_inhibit_irq</name><argument_list pos:start="2099:43" pos:end="2099:51">(<argument pos:start="2099:44" pos:end="2099:50"><expr pos:start="2099:44" pos:end="2099:50"><name pos:start="2099:44" pos:end="2099:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2101:13" pos:end="2101:22"><expr pos:start="2101:13" pos:end="2101:21"><name pos:start="2101:13" pos:end="2101:17"><name pos:start="2101:13" pos:end="2101:13">s</name><operator pos:start="2101:14" pos:end="2101:15">-&gt;</operator><name pos:start="2101:16" pos:end="2101:17">tf</name></name> <operator pos:start="2101:19" pos:end="2101:19">=</operator> <literal type="number" pos:start="2101:21" pos:end="2101:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="2105:9" pos:end="2111:9"><if pos:start="2105:9" pos:end="2111:9">if <condition pos:start="2105:12" pos:end="2105:22">(<expr pos:start="2105:13" pos:end="2105:21"><name pos:start="2105:13" pos:end="2105:21"><name pos:start="2105:13" pos:end="2105:13">s</name><operator pos:start="2105:14" pos:end="2105:15">-&gt;</operator><name pos:start="2105:16" pos:end="2105:21">is_jmp</name></name></expr>)</condition> <block pos:start="2105:24" pos:end="2111:9">{<block_content pos:start="2107:13" pos:end="2109:23">

            <expr_stmt pos:start="2107:13" pos:end="2107:43"><expr pos:start="2107:13" pos:end="2107:42"><call pos:start="2107:13" pos:end="2107:42"><name pos:start="2107:13" pos:end="2107:22">gen_jmp_im</name><argument_list pos:start="2107:23" pos:end="2107:42">(<argument pos:start="2107:24" pos:end="2107:41"><expr pos:start="2107:24" pos:end="2107:41"><name pos:start="2107:24" pos:end="2107:28"><name pos:start="2107:24" pos:end="2107:24">s</name><operator pos:start="2107:25" pos:end="2107:26">-&gt;</operator><name pos:start="2107:27" pos:end="2107:28">pc</name></name> <operator pos:start="2107:30" pos:end="2107:30">-</operator> <name pos:start="2107:32" pos:end="2107:41"><name pos:start="2107:32" pos:end="2107:32">s</name><operator pos:start="2107:33" pos:end="2107:34">-&gt;</operator><name pos:start="2107:35" pos:end="2107:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2109:13" pos:end="2109:23"><expr pos:start="2109:13" pos:end="2109:22"><call pos:start="2109:13" pos:end="2109:22"><name pos:start="2109:13" pos:end="2109:19">gen_eob</name><argument_list pos:start="2109:20" pos:end="2109:22">(<argument pos:start="2109:21" pos:end="2109:21"><expr pos:start="2109:21" pos:end="2109:21"><name pos:start="2109:21" pos:end="2109:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2113:9" pos:end="2113:14">break;</break>

    <case pos:start="2115:5" pos:end="2115:14">case <expr pos:start="2115:10" pos:end="2115:13"><literal type="number" pos:start="2115:10" pos:end="2115:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="2115:16" pos:end="2115:32">/* mov Gv, seg */</comment>

        <expr_stmt pos:start="2117:9" pos:end="2117:55"><expr pos:start="2117:9" pos:end="2117:54"><name pos:start="2117:9" pos:end="2117:13">modrm</name> <operator pos:start="2117:15" pos:end="2117:15">=</operator> <call pos:start="2117:17" pos:end="2117:54"><name pos:start="2117:17" pos:end="2117:29">cpu_ldub_code</name><argument_list pos:start="2117:30" pos:end="2117:54">(<argument pos:start="2117:31" pos:end="2117:44"><expr pos:start="2117:31" pos:end="2117:44"><name pos:start="2117:31" pos:end="2117:44">cpu_single_env</name></expr></argument>, <argument pos:start="2117:47" pos:end="2117:53"><expr pos:start="2117:47" pos:end="2117:53"><name pos:start="2117:47" pos:end="2117:51"><name pos:start="2117:47" pos:end="2117:47">s</name><operator pos:start="2117:48" pos:end="2117:49">-&gt;</operator><name pos:start="2117:50" pos:end="2117:51">pc</name></name><operator pos:start="2117:52" pos:end="2117:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2119:9" pos:end="2119:31"><expr pos:start="2119:9" pos:end="2119:30"><name pos:start="2119:9" pos:end="2119:11">reg</name> <operator pos:start="2119:13" pos:end="2119:13">=</operator> <operator pos:start="2119:15" pos:end="2119:15">(</operator><name pos:start="2119:16" pos:end="2119:20">modrm</name> <operator pos:start="2119:22" pos:end="2119:23">&gt;&gt;</operator> <literal type="number" pos:start="2119:25" pos:end="2119:25">3</literal><operator pos:start="2119:26" pos:end="2119:26">)</operator> <operator pos:start="2119:28" pos:end="2119:28">&amp;</operator> <literal type="number" pos:start="2119:30" pos:end="2119:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2121:9" pos:end="2121:31"><expr pos:start="2121:9" pos:end="2121:30"><name pos:start="2121:9" pos:end="2121:11">mod</name> <operator pos:start="2121:13" pos:end="2121:13">=</operator> <operator pos:start="2121:15" pos:end="2121:15">(</operator><name pos:start="2121:16" pos:end="2121:20">modrm</name> <operator pos:start="2121:22" pos:end="2121:23">&gt;&gt;</operator> <literal type="number" pos:start="2121:25" pos:end="2121:25">6</literal><operator pos:start="2121:26" pos:end="2121:26">)</operator> <operator pos:start="2121:28" pos:end="2121:28">&amp;</operator> <literal type="number" pos:start="2121:30" pos:end="2121:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2123:9" pos:end="2125:28"><if pos:start="2123:9" pos:end="2125:28">if <condition pos:start="2123:12" pos:end="2123:21">(<expr pos:start="2123:13" pos:end="2123:20"><name pos:start="2123:13" pos:end="2123:15">reg</name> <operator pos:start="2123:17" pos:end="2123:18">&gt;=</operator> <literal type="number" pos:start="2123:20" pos:end="2123:20">6</literal></expr>)</condition><block type="pseudo" pos:start="2125:13" pos:end="2125:28"><block_content pos:start="2125:13" pos:end="2125:28">

            <goto pos:start="2125:13" pos:end="2125:28">goto <name pos:start="2125:18" pos:end="2125:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2127:9" pos:end="2127:32"><expr pos:start="2127:9" pos:end="2127:31"><call pos:start="2127:9" pos:end="2127:31"><name pos:start="2127:9" pos:end="2127:26">gen_op_movl_T0_seg</name><argument_list pos:start="2127:27" pos:end="2127:31">(<argument pos:start="2127:28" pos:end="2127:30"><expr pos:start="2127:28" pos:end="2127:30"><name pos:start="2127:28" pos:end="2127:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2129:9" pos:end="2135:25"><if pos:start="2129:9" pos:end="2131:33">if <condition pos:start="2129:12" pos:end="2129:21">(<expr pos:start="2129:13" pos:end="2129:20"><name pos:start="2129:13" pos:end="2129:15">mod</name> <operator pos:start="2129:17" pos:end="2129:18">==</operator> <literal type="number" pos:start="2129:20" pos:end="2129:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2131:13" pos:end="2131:33"><block_content pos:start="2131:13" pos:end="2131:33">

            <expr_stmt pos:start="2131:13" pos:end="2131:33"><expr pos:start="2131:13" pos:end="2131:32"><name pos:start="2131:13" pos:end="2131:14">ot</name> <operator pos:start="2131:16" pos:end="2131:16">=</operator> <name pos:start="2131:18" pos:end="2131:24">OT_WORD</name> <operator pos:start="2131:26" pos:end="2131:26">+</operator> <name pos:start="2131:28" pos:end="2131:32">dflag</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2133:9" pos:end="2135:25">else<block type="pseudo" pos:start="2135:13" pos:end="2135:25"><block_content pos:start="2135:13" pos:end="2135:25">

            <expr_stmt pos:start="2135:13" pos:end="2135:25"><expr pos:start="2135:13" pos:end="2135:24"><name pos:start="2135:13" pos:end="2135:14">ot</name> <operator pos:start="2135:16" pos:end="2135:16">=</operator> <name pos:start="2135:18" pos:end="2135:24">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2137:9" pos:end="2137:49"><expr pos:start="2137:9" pos:end="2137:48"><call pos:start="2137:9" pos:end="2137:48"><name pos:start="2137:9" pos:end="2137:22">gen_ldst_modrm</name><argument_list pos:start="2137:23" pos:end="2137:48">(<argument pos:start="2137:24" pos:end="2137:24"><expr pos:start="2137:24" pos:end="2137:24"><name pos:start="2137:24" pos:end="2137:24">s</name></expr></argument>, <argument pos:start="2137:27" pos:end="2137:31"><expr pos:start="2137:27" pos:end="2137:31"><name pos:start="2137:27" pos:end="2137:31">modrm</name></expr></argument>, <argument pos:start="2137:34" pos:end="2137:35"><expr pos:start="2137:34" pos:end="2137:35"><name pos:start="2137:34" pos:end="2137:35">ot</name></expr></argument>, <argument pos:start="2137:38" pos:end="2137:44"><expr pos:start="2137:38" pos:end="2137:44"><name pos:start="2137:38" pos:end="2137:44">OR_TMP0</name></expr></argument>, <argument pos:start="2137:47" pos:end="2137:47"><expr pos:start="2137:47" pos:end="2137:47"><literal type="number" pos:start="2137:47" pos:end="2137:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2139:9" pos:end="2139:14">break;</break>



    <case pos:start="2143:5" pos:end="2143:15">case <expr pos:start="2143:10" pos:end="2143:14"><literal type="number" pos:start="2143:10" pos:end="2143:14">0x1b6</literal></expr>:</case> <comment type="block" pos:start="2143:17" pos:end="2143:35">/* movzbS Gv, Eb */</comment>

    <case pos:start="2145:5" pos:end="2145:15">case <expr pos:start="2145:10" pos:end="2145:14"><literal type="number" pos:start="2145:10" pos:end="2145:14">0x1b7</literal></expr>:</case> <comment type="block" pos:start="2145:17" pos:end="2145:35">/* movzwS Gv, Eb */</comment>

    <case pos:start="2147:5" pos:end="2147:15">case <expr pos:start="2147:10" pos:end="2147:14"><literal type="number" pos:start="2147:10" pos:end="2147:14">0x1be</literal></expr>:</case> <comment type="block" pos:start="2147:17" pos:end="2147:35">/* movsbS Gv, Eb */</comment>

    <case pos:start="2149:5" pos:end="2149:15">case <expr pos:start="2149:10" pos:end="2149:14"><literal type="number" pos:start="2149:10" pos:end="2149:14">0x1bf</literal></expr>:</case> <comment type="block" pos:start="2149:17" pos:end="2149:35">/* movswS Gv, Eb */</comment>

        <block pos:start="2151:9" pos:end="2227:9">{<block_content pos:start="2153:13" pos:end="2225:13">

            <decl_stmt pos:start="2153:13" pos:end="2153:21"><decl pos:start="2153:13" pos:end="2153:20"><type pos:start="2153:13" pos:end="2153:15"><name pos:start="2153:13" pos:end="2153:15">int</name></type> <name pos:start="2153:17" pos:end="2153:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="2155:13" pos:end="2155:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="2157:13" pos:end="2157:35"><expr pos:start="2157:13" pos:end="2157:34"><name pos:start="2157:13" pos:end="2157:16">d_ot</name> <operator pos:start="2157:18" pos:end="2157:18">=</operator> <name pos:start="2157:20" pos:end="2157:24">dflag</name> <operator pos:start="2157:26" pos:end="2157:26">+</operator> <name pos:start="2157:28" pos:end="2157:34">OT_WORD</name></expr>;</expr_stmt>

            <comment type="block" pos:start="2159:13" pos:end="2159:42">/* ot is the size of source */</comment>

            <expr_stmt pos:start="2161:13" pos:end="2161:35"><expr pos:start="2161:13" pos:end="2161:34"><name pos:start="2161:13" pos:end="2161:14">ot</name> <operator pos:start="2161:16" pos:end="2161:16">=</operator> <operator pos:start="2161:18" pos:end="2161:18">(</operator><name pos:start="2161:19" pos:end="2161:19">b</name> <operator pos:start="2161:21" pos:end="2161:21">&amp;</operator> <literal type="number" pos:start="2161:23" pos:end="2161:23">1</literal><operator pos:start="2161:24" pos:end="2161:24">)</operator> <operator pos:start="2161:26" pos:end="2161:26">+</operator> <name pos:start="2161:28" pos:end="2161:34">OT_BYTE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2163:13" pos:end="2163:59"><expr pos:start="2163:13" pos:end="2163:58"><name pos:start="2163:13" pos:end="2163:17">modrm</name> <operator pos:start="2163:19" pos:end="2163:19">=</operator> <call pos:start="2163:21" pos:end="2163:58"><name pos:start="2163:21" pos:end="2163:33">cpu_ldub_code</name><argument_list pos:start="2163:34" pos:end="2163:58">(<argument pos:start="2163:35" pos:end="2163:48"><expr pos:start="2163:35" pos:end="2163:48"><name pos:start="2163:35" pos:end="2163:48">cpu_single_env</name></expr></argument>, <argument pos:start="2163:51" pos:end="2163:57"><expr pos:start="2163:51" pos:end="2163:57"><name pos:start="2163:51" pos:end="2163:55"><name pos:start="2163:51" pos:end="2163:51">s</name><operator pos:start="2163:52" pos:end="2163:53">-&gt;</operator><name pos:start="2163:54" pos:end="2163:55">pc</name></name><operator pos:start="2163:56" pos:end="2163:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2165:13" pos:end="2165:45"><expr pos:start="2165:13" pos:end="2165:44"><name pos:start="2165:13" pos:end="2165:15">reg</name> <operator pos:start="2165:17" pos:end="2165:17">=</operator> <operator pos:start="2165:19" pos:end="2165:19">(</operator><operator pos:start="2165:20" pos:end="2165:20">(</operator><name pos:start="2165:21" pos:end="2165:25">modrm</name> <operator pos:start="2165:27" pos:end="2165:28">&gt;&gt;</operator> <literal type="number" pos:start="2165:30" pos:end="2165:30">3</literal><operator pos:start="2165:31" pos:end="2165:31">)</operator> <operator pos:start="2165:33" pos:end="2165:33">&amp;</operator> <literal type="number" pos:start="2165:35" pos:end="2165:35">7</literal><operator pos:start="2165:36" pos:end="2165:36">)</operator> <operator pos:start="2165:38" pos:end="2165:38">|</operator> <name pos:start="2165:40" pos:end="2165:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2167:13" pos:end="2167:35"><expr pos:start="2167:13" pos:end="2167:34"><name pos:start="2167:13" pos:end="2167:15">mod</name> <operator pos:start="2167:17" pos:end="2167:17">=</operator> <operator pos:start="2167:19" pos:end="2167:19">(</operator><name pos:start="2167:20" pos:end="2167:24">modrm</name> <operator pos:start="2167:26" pos:end="2167:27">&gt;&gt;</operator> <literal type="number" pos:start="2167:29" pos:end="2167:29">6</literal><operator pos:start="2167:30" pos:end="2167:30">)</operator> <operator pos:start="2167:32" pos:end="2167:32">&amp;</operator> <literal type="number" pos:start="2167:34" pos:end="2167:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2169:13" pos:end="2169:40"><expr pos:start="2169:13" pos:end="2169:39"><name pos:start="2169:13" pos:end="2169:14">rm</name> <operator pos:start="2169:16" pos:end="2169:16">=</operator> <operator pos:start="2169:18" pos:end="2169:18">(</operator><name pos:start="2169:19" pos:end="2169:23">modrm</name> <operator pos:start="2169:25" pos:end="2169:25">&amp;</operator> <literal type="number" pos:start="2169:27" pos:end="2169:27">7</literal><operator pos:start="2169:28" pos:end="2169:28">)</operator> <operator pos:start="2169:30" pos:end="2169:30">|</operator> <call pos:start="2169:32" pos:end="2169:39"><name pos:start="2169:32" pos:end="2169:36">REX_B</name><argument_list pos:start="2169:37" pos:end="2169:39">(<argument pos:start="2169:38" pos:end="2169:38"><expr pos:start="2169:38" pos:end="2169:38"><name pos:start="2169:38" pos:end="2169:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="2173:13" pos:end="2225:13"><if pos:start="2173:13" pos:end="2209:13">if <condition pos:start="2173:16" pos:end="2173:25">(<expr pos:start="2173:17" pos:end="2173:24"><name pos:start="2173:17" pos:end="2173:19">mod</name> <operator pos:start="2173:21" pos:end="2173:22">==</operator> <literal type="number" pos:start="2173:24" pos:end="2173:24">3</literal></expr>)</condition> <block pos:start="2173:27" pos:end="2209:13">{<block_content pos:start="2175:17" pos:end="2207:45">

                <expr_stmt pos:start="2175:17" pos:end="2175:45"><expr pos:start="2175:17" pos:end="2175:44"><call pos:start="2175:17" pos:end="2175:44"><name pos:start="2175:17" pos:end="2175:33">gen_op_mov_TN_reg</name><argument_list pos:start="2175:34" pos:end="2175:44">(<argument pos:start="2175:35" pos:end="2175:36"><expr pos:start="2175:35" pos:end="2175:36"><name pos:start="2175:35" pos:end="2175:36">ot</name></expr></argument>, <argument pos:start="2175:39" pos:end="2175:39"><expr pos:start="2175:39" pos:end="2175:39"><literal type="number" pos:start="2175:39" pos:end="2175:39">0</literal></expr></argument>, <argument pos:start="2175:42" pos:end="2175:43"><expr pos:start="2175:42" pos:end="2175:43"><name pos:start="2175:42" pos:end="2175:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="2177:17" pos:end="2205:17">switch<condition pos:start="2177:23" pos:end="2177:36">(<expr pos:start="2177:24" pos:end="2177:35"><name pos:start="2177:24" pos:end="2177:25">ot</name> <operator pos:start="2177:27" pos:end="2177:27">|</operator> <operator pos:start="2177:29" pos:end="2177:29">(</operator><name pos:start="2177:30" pos:end="2177:30">b</name> <operator pos:start="2177:32" pos:end="2177:32">&amp;</operator> <literal type="number" pos:start="2177:34" pos:end="2177:34">8</literal><operator pos:start="2177:35" pos:end="2177:35">)</operator></expr>)</condition> <block pos:start="2177:38" pos:end="2205:17">{<block_content pos:start="2179:17" pos:end="2203:26">

                <case pos:start="2179:17" pos:end="2179:29">case <expr pos:start="2179:22" pos:end="2179:28"><name pos:start="2179:22" pos:end="2179:28">OT_BYTE</name></expr>:</case>

                    <expr_stmt pos:start="2181:21" pos:end="2181:57"><expr pos:start="2181:21" pos:end="2181:56"><call pos:start="2181:21" pos:end="2181:56"><name pos:start="2181:21" pos:end="2181:36">tcg_gen_ext8u_tl</name><argument_list pos:start="2181:37" pos:end="2181:56">(<argument pos:start="2181:38" pos:end="2181:45"><expr pos:start="2181:38" pos:end="2181:45"><name pos:start="2181:38" pos:end="2181:45"><name pos:start="2181:38" pos:end="2181:42">cpu_T</name><index pos:start="2181:43" pos:end="2181:45">[<expr pos:start="2181:44" pos:end="2181:44"><literal type="number" pos:start="2181:44" pos:end="2181:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2181:48" pos:end="2181:55"><expr pos:start="2181:48" pos:end="2181:55"><name pos:start="2181:48" pos:end="2181:55"><name pos:start="2181:48" pos:end="2181:52">cpu_T</name><index pos:start="2181:53" pos:end="2181:55">[<expr pos:start="2181:54" pos:end="2181:54"><literal type="number" pos:start="2181:54" pos:end="2181:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2183:21" pos:end="2183:26">break;</break>

                <case pos:start="2185:17" pos:end="2185:33">case <expr pos:start="2185:22" pos:end="2185:32"><name pos:start="2185:22" pos:end="2185:28">OT_BYTE</name> <operator pos:start="2185:30" pos:end="2185:30">|</operator> <literal type="number" pos:start="2185:32" pos:end="2185:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="2187:21" pos:end="2187:57"><expr pos:start="2187:21" pos:end="2187:56"><call pos:start="2187:21" pos:end="2187:56"><name pos:start="2187:21" pos:end="2187:36">tcg_gen_ext8s_tl</name><argument_list pos:start="2187:37" pos:end="2187:56">(<argument pos:start="2187:38" pos:end="2187:45"><expr pos:start="2187:38" pos:end="2187:45"><name pos:start="2187:38" pos:end="2187:45"><name pos:start="2187:38" pos:end="2187:42">cpu_T</name><index pos:start="2187:43" pos:end="2187:45">[<expr pos:start="2187:44" pos:end="2187:44"><literal type="number" pos:start="2187:44" pos:end="2187:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2187:48" pos:end="2187:55"><expr pos:start="2187:48" pos:end="2187:55"><name pos:start="2187:48" pos:end="2187:55"><name pos:start="2187:48" pos:end="2187:52">cpu_T</name><index pos:start="2187:53" pos:end="2187:55">[<expr pos:start="2187:54" pos:end="2187:54"><literal type="number" pos:start="2187:54" pos:end="2187:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2189:21" pos:end="2189:26">break;</break>

                <case pos:start="2191:17" pos:end="2191:29">case <expr pos:start="2191:22" pos:end="2191:28"><name pos:start="2191:22" pos:end="2191:28">OT_WORD</name></expr>:</case>

                    <expr_stmt pos:start="2193:21" pos:end="2193:58"><expr pos:start="2193:21" pos:end="2193:57"><call pos:start="2193:21" pos:end="2193:57"><name pos:start="2193:21" pos:end="2193:37">tcg_gen_ext16u_tl</name><argument_list pos:start="2193:38" pos:end="2193:57">(<argument pos:start="2193:39" pos:end="2193:46"><expr pos:start="2193:39" pos:end="2193:46"><name pos:start="2193:39" pos:end="2193:46"><name pos:start="2193:39" pos:end="2193:43">cpu_T</name><index pos:start="2193:44" pos:end="2193:46">[<expr pos:start="2193:45" pos:end="2193:45"><literal type="number" pos:start="2193:45" pos:end="2193:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2193:49" pos:end="2193:56"><expr pos:start="2193:49" pos:end="2193:56"><name pos:start="2193:49" pos:end="2193:56"><name pos:start="2193:49" pos:end="2193:53">cpu_T</name><index pos:start="2193:54" pos:end="2193:56">[<expr pos:start="2193:55" pos:end="2193:55"><literal type="number" pos:start="2193:55" pos:end="2193:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2195:21" pos:end="2195:26">break;</break>

                <default pos:start="2197:17" pos:end="2197:24">default:</default>

                <case pos:start="2199:17" pos:end="2199:33">case <expr pos:start="2199:22" pos:end="2199:32"><name pos:start="2199:22" pos:end="2199:28">OT_WORD</name> <operator pos:start="2199:30" pos:end="2199:30">|</operator> <literal type="number" pos:start="2199:32" pos:end="2199:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="2201:21" pos:end="2201:58"><expr pos:start="2201:21" pos:end="2201:57"><call pos:start="2201:21" pos:end="2201:57"><name pos:start="2201:21" pos:end="2201:37">tcg_gen_ext16s_tl</name><argument_list pos:start="2201:38" pos:end="2201:57">(<argument pos:start="2201:39" pos:end="2201:46"><expr pos:start="2201:39" pos:end="2201:46"><name pos:start="2201:39" pos:end="2201:46"><name pos:start="2201:39" pos:end="2201:43">cpu_T</name><index pos:start="2201:44" pos:end="2201:46">[<expr pos:start="2201:45" pos:end="2201:45"><literal type="number" pos:start="2201:45" pos:end="2201:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2201:49" pos:end="2201:56"><expr pos:start="2201:49" pos:end="2201:56"><name pos:start="2201:49" pos:end="2201:56"><name pos:start="2201:49" pos:end="2201:53">cpu_T</name><index pos:start="2201:54" pos:end="2201:56">[<expr pos:start="2201:55" pos:end="2201:55"><literal type="number" pos:start="2201:55" pos:end="2201:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2203:21" pos:end="2203:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="2207:17" pos:end="2207:45"><expr pos:start="2207:17" pos:end="2207:44"><call pos:start="2207:17" pos:end="2207:44"><name pos:start="2207:17" pos:end="2207:33">gen_op_mov_reg_T0</name><argument_list pos:start="2207:34" pos:end="2207:44">(<argument pos:start="2207:35" pos:end="2207:38"><expr pos:start="2207:35" pos:end="2207:38"><name pos:start="2207:35" pos:end="2207:38">d_ot</name></expr></argument>, <argument pos:start="2207:41" pos:end="2207:43"><expr pos:start="2207:41" pos:end="2207:43"><name pos:start="2207:41" pos:end="2207:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2209:15" pos:end="2225:13">else <block pos:start="2209:20" pos:end="2225:13">{<block_content pos:start="2211:17" pos:end="2223:45">

                <expr_stmt pos:start="2211:17" pos:end="2211:65"><expr pos:start="2211:17" pos:end="2211:64"><call pos:start="2211:17" pos:end="2211:64"><name pos:start="2211:17" pos:end="2211:29">gen_lea_modrm</name><argument_list pos:start="2211:30" pos:end="2211:64">(<argument pos:start="2211:31" pos:end="2211:31"><expr pos:start="2211:31" pos:end="2211:31"><name pos:start="2211:31" pos:end="2211:31">s</name></expr></argument>, <argument pos:start="2211:34" pos:end="2211:38"><expr pos:start="2211:34" pos:end="2211:38"><name pos:start="2211:34" pos:end="2211:38">modrm</name></expr></argument>, <argument pos:start="2211:41" pos:end="2211:49"><expr pos:start="2211:41" pos:end="2211:49"><operator pos:start="2211:41" pos:end="2211:41">&amp;</operator><name pos:start="2211:42" pos:end="2211:49">reg_addr</name></expr></argument>, <argument pos:start="2211:52" pos:end="2211:63"><expr pos:start="2211:52" pos:end="2211:63"><operator pos:start="2211:52" pos:end="2211:52">&amp;</operator><name pos:start="2211:53" pos:end="2211:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2213:17" pos:end="2221:17"><if pos:start="2213:17" pos:end="2217:17">if <condition pos:start="2213:20" pos:end="2213:26">(<expr pos:start="2213:21" pos:end="2213:25"><name pos:start="2213:21" pos:end="2213:21">b</name> <operator pos:start="2213:23" pos:end="2213:23">&amp;</operator> <literal type="number" pos:start="2213:25" pos:end="2213:25">8</literal></expr>)</condition> <block pos:start="2213:28" pos:end="2217:17">{<block_content pos:start="2215:21" pos:end="2215:56">

                    <expr_stmt pos:start="2215:21" pos:end="2215:56"><expr pos:start="2215:21" pos:end="2215:55"><call pos:start="2215:21" pos:end="2215:55"><name pos:start="2215:21" pos:end="2215:36">gen_op_lds_T0_A0</name><argument_list pos:start="2215:37" pos:end="2215:55">(<argument pos:start="2215:38" pos:end="2215:54"><expr pos:start="2215:38" pos:end="2215:54"><name pos:start="2215:38" pos:end="2215:39">ot</name> <operator pos:start="2215:41" pos:end="2215:41">+</operator> <name pos:start="2215:43" pos:end="2215:54"><name pos:start="2215:43" pos:end="2215:43">s</name><operator pos:start="2215:44" pos:end="2215:45">-&gt;</operator><name pos:start="2215:46" pos:end="2215:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2217:19" pos:end="2221:17">else <block pos:start="2217:24" pos:end="2221:17">{<block_content pos:start="2219:21" pos:end="2219:56">

                    <expr_stmt pos:start="2219:21" pos:end="2219:56"><expr pos:start="2219:21" pos:end="2219:55"><call pos:start="2219:21" pos:end="2219:55"><name pos:start="2219:21" pos:end="2219:36">gen_op_ldu_T0_A0</name><argument_list pos:start="2219:37" pos:end="2219:55">(<argument pos:start="2219:38" pos:end="2219:54"><expr pos:start="2219:38" pos:end="2219:54"><name pos:start="2219:38" pos:end="2219:39">ot</name> <operator pos:start="2219:41" pos:end="2219:41">+</operator> <name pos:start="2219:43" pos:end="2219:54"><name pos:start="2219:43" pos:end="2219:43">s</name><operator pos:start="2219:44" pos:end="2219:45">-&gt;</operator><name pos:start="2219:46" pos:end="2219:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2223:17" pos:end="2223:45"><expr pos:start="2223:17" pos:end="2223:44"><call pos:start="2223:17" pos:end="2223:44"><name pos:start="2223:17" pos:end="2223:33">gen_op_mov_reg_T0</name><argument_list pos:start="2223:34" pos:end="2223:44">(<argument pos:start="2223:35" pos:end="2223:38"><expr pos:start="2223:35" pos:end="2223:38"><name pos:start="2223:35" pos:end="2223:38">d_ot</name></expr></argument>, <argument pos:start="2223:41" pos:end="2223:43"><expr pos:start="2223:41" pos:end="2223:43"><name pos:start="2223:41" pos:end="2223:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2229:9" pos:end="2229:14">break;</break>



    <case pos:start="2233:5" pos:end="2233:14">case <expr pos:start="2233:10" pos:end="2233:13"><literal type="number" pos:start="2233:10" pos:end="2233:13">0x8d</literal></expr>:</case> <comment type="block" pos:start="2233:16" pos:end="2233:24">/* lea */</comment>

        <expr_stmt pos:start="2235:9" pos:end="2235:29"><expr pos:start="2235:9" pos:end="2235:28"><name pos:start="2235:9" pos:end="2235:10">ot</name> <operator pos:start="2235:12" pos:end="2235:12">=</operator> <name pos:start="2235:14" pos:end="2235:18">dflag</name> <operator pos:start="2235:20" pos:end="2235:20">+</operator> <name pos:start="2235:22" pos:end="2235:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2237:9" pos:end="2237:55"><expr pos:start="2237:9" pos:end="2237:54"><name pos:start="2237:9" pos:end="2237:13">modrm</name> <operator pos:start="2237:15" pos:end="2237:15">=</operator> <call pos:start="2237:17" pos:end="2237:54"><name pos:start="2237:17" pos:end="2237:29">cpu_ldub_code</name><argument_list pos:start="2237:30" pos:end="2237:54">(<argument pos:start="2237:31" pos:end="2237:44"><expr pos:start="2237:31" pos:end="2237:44"><name pos:start="2237:31" pos:end="2237:44">cpu_single_env</name></expr></argument>, <argument pos:start="2237:47" pos:end="2237:53"><expr pos:start="2237:47" pos:end="2237:53"><name pos:start="2237:47" pos:end="2237:51"><name pos:start="2237:47" pos:end="2237:47">s</name><operator pos:start="2237:48" pos:end="2237:49">-&gt;</operator><name pos:start="2237:50" pos:end="2237:51">pc</name></name><operator pos:start="2237:52" pos:end="2237:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2239:9" pos:end="2239:31"><expr pos:start="2239:9" pos:end="2239:30"><name pos:start="2239:9" pos:end="2239:11">mod</name> <operator pos:start="2239:13" pos:end="2239:13">=</operator> <operator pos:start="2239:15" pos:end="2239:15">(</operator><name pos:start="2239:16" pos:end="2239:20">modrm</name> <operator pos:start="2239:22" pos:end="2239:23">&gt;&gt;</operator> <literal type="number" pos:start="2239:25" pos:end="2239:25">6</literal><operator pos:start="2239:26" pos:end="2239:26">)</operator> <operator pos:start="2239:28" pos:end="2239:28">&amp;</operator> <literal type="number" pos:start="2239:30" pos:end="2239:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2241:9" pos:end="2243:28"><if pos:start="2241:9" pos:end="2243:28">if <condition pos:start="2241:12" pos:end="2241:21">(<expr pos:start="2241:13" pos:end="2241:20"><name pos:start="2241:13" pos:end="2241:15">mod</name> <operator pos:start="2241:17" pos:end="2241:18">==</operator> <literal type="number" pos:start="2241:20" pos:end="2241:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2243:13" pos:end="2243:28"><block_content pos:start="2243:13" pos:end="2243:28">

            <goto pos:start="2243:13" pos:end="2243:28">goto <name pos:start="2243:18" pos:end="2243:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2245:9" pos:end="2245:41"><expr pos:start="2245:9" pos:end="2245:40"><name pos:start="2245:9" pos:end="2245:11">reg</name> <operator pos:start="2245:13" pos:end="2245:13">=</operator> <operator pos:start="2245:15" pos:end="2245:15">(</operator><operator pos:start="2245:16" pos:end="2245:16">(</operator><name pos:start="2245:17" pos:end="2245:21">modrm</name> <operator pos:start="2245:23" pos:end="2245:24">&gt;&gt;</operator> <literal type="number" pos:start="2245:26" pos:end="2245:26">3</literal><operator pos:start="2245:27" pos:end="2245:27">)</operator> <operator pos:start="2245:29" pos:end="2245:29">&amp;</operator> <literal type="number" pos:start="2245:31" pos:end="2245:31">7</literal><operator pos:start="2245:32" pos:end="2245:32">)</operator> <operator pos:start="2245:34" pos:end="2245:34">|</operator> <name pos:start="2245:36" pos:end="2245:40">rex_r</name></expr>;</expr_stmt>

        <comment type="block" pos:start="2247:9" pos:end="2247:53">/* we must ensure that no segment is added */</comment>

        <expr_stmt pos:start="2249:9" pos:end="2249:25"><expr pos:start="2249:9" pos:end="2249:24"><name pos:start="2249:9" pos:end="2249:19"><name pos:start="2249:9" pos:end="2249:9">s</name><operator pos:start="2249:10" pos:end="2249:11">-&gt;</operator><name pos:start="2249:12" pos:end="2249:19">override</name></name> <operator pos:start="2249:21" pos:end="2249:21">=</operator> <operator pos:start="2249:23" pos:end="2249:23">-</operator><literal type="number" pos:start="2249:24" pos:end="2249:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2251:9" pos:end="2251:24"><expr pos:start="2251:9" pos:end="2251:23"><name pos:start="2251:9" pos:end="2251:11">val</name> <operator pos:start="2251:13" pos:end="2251:13">=</operator> <name pos:start="2251:15" pos:end="2251:23"><name pos:start="2251:15" pos:end="2251:15">s</name><operator pos:start="2251:16" pos:end="2251:17">-&gt;</operator><name pos:start="2251:18" pos:end="2251:23">addseg</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="2253:9" pos:end="2253:22"><expr pos:start="2253:9" pos:end="2253:21"><name pos:start="2253:9" pos:end="2253:17"><name pos:start="2253:9" pos:end="2253:9">s</name><operator pos:start="2253:10" pos:end="2253:11">-&gt;</operator><name pos:start="2253:12" pos:end="2253:17">addseg</name></name> <operator pos:start="2253:19" pos:end="2253:19">=</operator> <literal type="number" pos:start="2253:21" pos:end="2253:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2255:9" pos:end="2255:57"><expr pos:start="2255:9" pos:end="2255:56"><call pos:start="2255:9" pos:end="2255:56"><name pos:start="2255:9" pos:end="2255:21">gen_lea_modrm</name><argument_list pos:start="2255:22" pos:end="2255:56">(<argument pos:start="2255:23" pos:end="2255:23"><expr pos:start="2255:23" pos:end="2255:23"><name pos:start="2255:23" pos:end="2255:23">s</name></expr></argument>, <argument pos:start="2255:26" pos:end="2255:30"><expr pos:start="2255:26" pos:end="2255:30"><name pos:start="2255:26" pos:end="2255:30">modrm</name></expr></argument>, <argument pos:start="2255:33" pos:end="2255:41"><expr pos:start="2255:33" pos:end="2255:41"><operator pos:start="2255:33" pos:end="2255:33">&amp;</operator><name pos:start="2255:34" pos:end="2255:41">reg_addr</name></expr></argument>, <argument pos:start="2255:44" pos:end="2255:55"><expr pos:start="2255:44" pos:end="2255:55"><operator pos:start="2255:44" pos:end="2255:44">&amp;</operator><name pos:start="2255:45" pos:end="2255:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2257:9" pos:end="2257:24"><expr pos:start="2257:9" pos:end="2257:23"><name pos:start="2257:9" pos:end="2257:17"><name pos:start="2257:9" pos:end="2257:9">s</name><operator pos:start="2257:10" pos:end="2257:11">-&gt;</operator><name pos:start="2257:12" pos:end="2257:17">addseg</name></name> <operator pos:start="2257:19" pos:end="2257:19">=</operator> <name pos:start="2257:21" pos:end="2257:23">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2259:9" pos:end="2259:45"><expr pos:start="2259:9" pos:end="2259:44"><call pos:start="2259:9" pos:end="2259:44"><name pos:start="2259:9" pos:end="2259:25">gen_op_mov_reg_A0</name><argument_list pos:start="2259:26" pos:end="2259:44">(<argument pos:start="2259:27" pos:end="2259:38"><expr pos:start="2259:27" pos:end="2259:38"><name pos:start="2259:27" pos:end="2259:28">ot</name> <operator pos:start="2259:30" pos:end="2259:30">-</operator> <name pos:start="2259:32" pos:end="2259:38">OT_WORD</name></expr></argument>, <argument pos:start="2259:41" pos:end="2259:43"><expr pos:start="2259:41" pos:end="2259:43"><name pos:start="2259:41" pos:end="2259:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2261:9" pos:end="2261:14">break;</break>



    <case pos:start="2265:5" pos:end="2265:14">case <expr pos:start="2265:10" pos:end="2265:13"><literal type="number" pos:start="2265:10" pos:end="2265:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="2265:16" pos:end="2265:32">/* mov EAX, Ov */</comment>

    <case pos:start="2267:5" pos:end="2267:14">case <expr pos:start="2267:10" pos:end="2267:13"><literal type="number" pos:start="2267:10" pos:end="2267:13">0xa1</literal></expr>:</case>

    <case pos:start="2269:5" pos:end="2269:14">case <expr pos:start="2269:10" pos:end="2269:13"><literal type="number" pos:start="2269:10" pos:end="2269:13">0xa2</literal></expr>:</case> <comment type="block" pos:start="2269:16" pos:end="2269:32">/* mov Ov, EAX */</comment>

    <case pos:start="2271:5" pos:end="2271:14">case <expr pos:start="2271:10" pos:end="2271:13"><literal type="number" pos:start="2271:10" pos:end="2271:13">0xa3</literal></expr>:</case>

        <block pos:start="2273:9" pos:end="2333:9">{<block_content pos:start="2275:13" pos:end="2331:13">

            <decl_stmt pos:start="2275:13" pos:end="2275:37"><decl pos:start="2275:13" pos:end="2275:36"><type pos:start="2275:13" pos:end="2275:24"><name pos:start="2275:13" pos:end="2275:24">target_ulong</name></type> <name pos:start="2275:26" pos:end="2275:36">offset_addr</name></decl>;</decl_stmt>



            <if_stmt pos:start="2279:13" pos:end="2288:0"><if pos:start="2279:13" pos:end="2281:29">if <condition pos:start="2279:16" pos:end="2279:29">(<expr pos:start="2279:17" pos:end="2279:28"><operator pos:start="2279:17" pos:end="2279:17">(</operator><name pos:start="2279:18" pos:end="2279:18">b</name> <operator pos:start="2279:20" pos:end="2279:20">&amp;</operator> <literal type="number" pos:start="2279:22" pos:end="2279:22">1</literal><operator pos:start="2279:23" pos:end="2279:23">)</operator> <operator pos:start="2279:25" pos:end="2279:26">==</operator> <literal type="number" pos:start="2279:28" pos:end="2279:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2281:17" pos:end="2281:29"><block_content pos:start="2281:17" pos:end="2281:29">

                <expr_stmt pos:start="2281:17" pos:end="2281:29"><expr pos:start="2281:17" pos:end="2281:28"><name pos:start="2281:17" pos:end="2281:18">ot</name> <operator pos:start="2281:20" pos:end="2281:20">=</operator> <name pos:start="2281:22" pos:end="2281:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2283:13" pos:end="2288:0">else<block type="pseudo" pos:start="2285:17" pos:end="2288:0"><block_content pos:start="2285:17" pos:end="2288:0">

                <expr_stmt pos:start="2285:17" pos:end="2288:0"><expr pos:start="2285:17" pos:end="2285:36"><name pos:start="2285:17" pos:end="2285:18">ot</name> <operator pos:start="2285:20" pos:end="2285:20">=</operator> <name pos:start="2285:22" pos:end="2285:26">dflag</name> <operator pos:start="2285:28" pos:end="2285:28">+</operator> <name pos:start="2285:30" pos:end="2285:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef pos:start="2287:1" pos:end="2287:20">#<cpp:directive pos:start="2287:2" pos:end="2287:6">ifdef</cpp:directive> <name pos:start="2287:8" pos:end="2287:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="2289:13" pos:end="2315:13"><if pos:start="2289:13" pos:end="2297:13">if <condition pos:start="2289:16" pos:end="2289:30">(<expr pos:start="2289:17" pos:end="2289:29"><name pos:start="2289:17" pos:end="2289:24"><name pos:start="2289:17" pos:end="2289:17">s</name><operator pos:start="2289:18" pos:end="2289:19">-&gt;</operator><name pos:start="2289:20" pos:end="2289:24">aflag</name></name> <operator pos:start="2289:26" pos:end="2289:27">==</operator> <literal type="number" pos:start="2289:29" pos:end="2289:29">2</literal></expr>)</condition> <block pos:start="2289:32" pos:end="2297:13">{<block_content pos:start="2291:17" pos:end="2295:47">

                <expr_stmt pos:start="2291:17" pos:end="2291:66"><expr pos:start="2291:17" pos:end="2291:65"><name pos:start="2291:17" pos:end="2291:27">offset_addr</name> <operator pos:start="2291:29" pos:end="2291:29">=</operator> <call pos:start="2291:31" pos:end="2291:65"><name pos:start="2291:31" pos:end="2291:42">cpu_ldq_code</name><argument_list pos:start="2291:43" pos:end="2291:65">(<argument pos:start="2291:44" pos:end="2291:57"><expr pos:start="2291:44" pos:end="2291:57"><name pos:start="2291:44" pos:end="2291:57">cpu_single_env</name></expr></argument>, <argument pos:start="2291:60" pos:end="2291:64"><expr pos:start="2291:60" pos:end="2291:64"><name pos:start="2291:60" pos:end="2291:64"><name pos:start="2291:60" pos:end="2291:60">s</name><operator pos:start="2291:61" pos:end="2291:62">-&gt;</operator><name pos:start="2291:63" pos:end="2291:64">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2293:17" pos:end="2293:27"><expr pos:start="2293:17" pos:end="2293:26"><name pos:start="2293:17" pos:end="2293:21"><name pos:start="2293:17" pos:end="2293:17">s</name><operator pos:start="2293:18" pos:end="2293:19">-&gt;</operator><name pos:start="2293:20" pos:end="2293:21">pc</name></name> <operator pos:start="2293:23" pos:end="2293:24">+=</operator> <literal type="number" pos:start="2293:26" pos:end="2293:26">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="2295:17" pos:end="2295:47"><expr pos:start="2295:17" pos:end="2295:46"><call pos:start="2295:17" pos:end="2295:46"><name pos:start="2295:17" pos:end="2295:33">gen_op_movq_A0_im</name><argument_list pos:start="2295:34" pos:end="2295:46">(<argument pos:start="2295:35" pos:end="2295:45"><expr pos:start="2295:35" pos:end="2295:45"><name pos:start="2295:35" pos:end="2295:45">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2297:15" pos:end="2315:13">else

<cpp:endif pos:start="2299:1" pos:end="2299:6">#<cpp:directive pos:start="2299:2" pos:end="2299:6">endif</cpp:directive></cpp:endif>

            <block pos:start="2301:13" pos:end="2315:13">{<block_content pos:start="2303:17" pos:end="2313:47">

                <if_stmt pos:start="2303:17" pos:end="2311:17"><if pos:start="2303:17" pos:end="2307:17">if <condition pos:start="2303:20" pos:end="2303:29">(<expr pos:start="2303:21" pos:end="2303:28"><name pos:start="2303:21" pos:end="2303:28"><name pos:start="2303:21" pos:end="2303:21">s</name><operator pos:start="2303:22" pos:end="2303:23">-&gt;</operator><name pos:start="2303:24" pos:end="2303:28">aflag</name></name></expr>)</condition> <block pos:start="2303:31" pos:end="2307:17">{<block_content pos:start="2305:21" pos:end="2305:55">

                    <expr_stmt pos:start="2305:21" pos:end="2305:55"><expr pos:start="2305:21" pos:end="2305:54"><name pos:start="2305:21" pos:end="2305:31">offset_addr</name> <operator pos:start="2305:33" pos:end="2305:33">=</operator> <call pos:start="2305:35" pos:end="2305:54"><name pos:start="2305:35" pos:end="2305:42">insn_get</name><argument_list pos:start="2305:43" pos:end="2305:54">(<argument pos:start="2305:44" pos:end="2305:44"><expr pos:start="2305:44" pos:end="2305:44"><name pos:start="2305:44" pos:end="2305:44">s</name></expr></argument>, <argument pos:start="2305:47" pos:end="2305:53"><expr pos:start="2305:47" pos:end="2305:53"><name pos:start="2305:47" pos:end="2305:53">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2307:19" pos:end="2311:17">else <block pos:start="2307:24" pos:end="2311:17">{<block_content pos:start="2309:21" pos:end="2309:55">

                    <expr_stmt pos:start="2309:21" pos:end="2309:55"><expr pos:start="2309:21" pos:end="2309:54"><name pos:start="2309:21" pos:end="2309:31">offset_addr</name> <operator pos:start="2309:33" pos:end="2309:33">=</operator> <call pos:start="2309:35" pos:end="2309:54"><name pos:start="2309:35" pos:end="2309:42">insn_get</name><argument_list pos:start="2309:43" pos:end="2309:54">(<argument pos:start="2309:44" pos:end="2309:44"><expr pos:start="2309:44" pos:end="2309:44"><name pos:start="2309:44" pos:end="2309:44">s</name></expr></argument>, <argument pos:start="2309:47" pos:end="2309:53"><expr pos:start="2309:47" pos:end="2309:53"><name pos:start="2309:47" pos:end="2309:53">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2313:17" pos:end="2313:47"><expr pos:start="2313:17" pos:end="2313:46"><call pos:start="2313:17" pos:end="2313:46"><name pos:start="2313:17" pos:end="2313:33">gen_op_movl_A0_im</name><argument_list pos:start="2313:34" pos:end="2313:46">(<argument pos:start="2313:35" pos:end="2313:45"><expr pos:start="2313:35" pos:end="2313:45"><name pos:start="2313:35" pos:end="2313:45">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="2317:13" pos:end="2317:33"><expr pos:start="2317:13" pos:end="2317:32"><call pos:start="2317:13" pos:end="2317:32"><name pos:start="2317:13" pos:end="2317:29">gen_add_A0_ds_seg</name><argument_list pos:start="2317:30" pos:end="2317:32">(<argument pos:start="2317:31" pos:end="2317:31"><expr pos:start="2317:31" pos:end="2317:31"><name pos:start="2317:31" pos:end="2317:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2319:13" pos:end="2331:13"><if pos:start="2319:13" pos:end="2325:13">if <condition pos:start="2319:16" pos:end="2319:29">(<expr pos:start="2319:17" pos:end="2319:28"><operator pos:start="2319:17" pos:end="2319:17">(</operator><name pos:start="2319:18" pos:end="2319:18">b</name> <operator pos:start="2319:20" pos:end="2319:20">&amp;</operator> <literal type="number" pos:start="2319:22" pos:end="2319:22">2</literal><operator pos:start="2319:23" pos:end="2319:23">)</operator> <operator pos:start="2319:25" pos:end="2319:26">==</operator> <literal type="number" pos:start="2319:28" pos:end="2319:28">0</literal></expr>)</condition> <block pos:start="2319:31" pos:end="2325:13">{<block_content pos:start="2321:17" pos:end="2323:45">

                <expr_stmt pos:start="2321:17" pos:end="2321:51"><expr pos:start="2321:17" pos:end="2321:50"><call pos:start="2321:17" pos:end="2321:50"><name pos:start="2321:17" pos:end="2321:31">gen_op_ld_T0_A0</name><argument_list pos:start="2321:32" pos:end="2321:50">(<argument pos:start="2321:33" pos:end="2321:49"><expr pos:start="2321:33" pos:end="2321:49"><name pos:start="2321:33" pos:end="2321:34">ot</name> <operator pos:start="2321:36" pos:end="2321:36">+</operator> <name pos:start="2321:38" pos:end="2321:49"><name pos:start="2321:38" pos:end="2321:38">s</name><operator pos:start="2321:39" pos:end="2321:40">-&gt;</operator><name pos:start="2321:41" pos:end="2321:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2323:17" pos:end="2323:45"><expr pos:start="2323:17" pos:end="2323:44"><call pos:start="2323:17" pos:end="2323:44"><name pos:start="2323:17" pos:end="2323:33">gen_op_mov_reg_T0</name><argument_list pos:start="2323:34" pos:end="2323:44">(<argument pos:start="2323:35" pos:end="2323:36"><expr pos:start="2323:35" pos:end="2323:36"><name pos:start="2323:35" pos:end="2323:36">ot</name></expr></argument>, <argument pos:start="2323:39" pos:end="2323:43"><expr pos:start="2323:39" pos:end="2323:43"><name pos:start="2323:39" pos:end="2323:43">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2325:15" pos:end="2331:13">else <block pos:start="2325:20" pos:end="2331:13">{<block_content pos:start="2327:17" pos:end="2329:51">

                <expr_stmt pos:start="2327:17" pos:end="2327:48"><expr pos:start="2327:17" pos:end="2327:47"><call pos:start="2327:17" pos:end="2327:47"><name pos:start="2327:17" pos:end="2327:33">gen_op_mov_TN_reg</name><argument_list pos:start="2327:34" pos:end="2327:47">(<argument pos:start="2327:35" pos:end="2327:36"><expr pos:start="2327:35" pos:end="2327:36"><name pos:start="2327:35" pos:end="2327:36">ot</name></expr></argument>, <argument pos:start="2327:39" pos:end="2327:39"><expr pos:start="2327:39" pos:end="2327:39"><literal type="number" pos:start="2327:39" pos:end="2327:39">0</literal></expr></argument>, <argument pos:start="2327:42" pos:end="2327:46"><expr pos:start="2327:42" pos:end="2327:46"><name pos:start="2327:42" pos:end="2327:46">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2329:17" pos:end="2329:51"><expr pos:start="2329:17" pos:end="2329:50"><call pos:start="2329:17" pos:end="2329:50"><name pos:start="2329:17" pos:end="2329:31">gen_op_st_T0_A0</name><argument_list pos:start="2329:32" pos:end="2329:50">(<argument pos:start="2329:33" pos:end="2329:49"><expr pos:start="2329:33" pos:end="2329:49"><name pos:start="2329:33" pos:end="2329:34">ot</name> <operator pos:start="2329:36" pos:end="2329:36">+</operator> <name pos:start="2329:38" pos:end="2329:49"><name pos:start="2329:38" pos:end="2329:38">s</name><operator pos:start="2329:39" pos:end="2329:40">-&gt;</operator><name pos:start="2329:41" pos:end="2329:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2335:9" pos:end="2335:14">break;</break>

    <case pos:start="2337:5" pos:end="2340:0">case <expr pos:start="2337:10" pos:end="2337:13"><literal type="number" pos:start="2337:10" pos:end="2337:13">0xd7</literal></expr>:</case> <comment type="block" pos:start="2337:16" pos:end="2337:25">/* xlat */</comment>

<cpp:ifdef pos:start="2339:1" pos:end="2339:20">#<cpp:directive pos:start="2339:2" pos:end="2339:6">ifdef</cpp:directive> <name pos:start="2339:8" pos:end="2339:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="2341:9" pos:end="2373:9"><if pos:start="2341:9" pos:end="2351:9">if <condition pos:start="2341:12" pos:end="2341:26">(<expr pos:start="2341:13" pos:end="2341:25"><name pos:start="2341:13" pos:end="2341:20"><name pos:start="2341:13" pos:end="2341:13">s</name><operator pos:start="2341:14" pos:end="2341:15">-&gt;</operator><name pos:start="2341:16" pos:end="2341:20">aflag</name></name> <operator pos:start="2341:22" pos:end="2341:23">==</operator> <literal type="number" pos:start="2341:25" pos:end="2341:25">2</literal></expr>)</condition> <block pos:start="2341:28" pos:end="2351:9">{<block_content pos:start="2343:13" pos:end="2349:53">

            <expr_stmt pos:start="2343:13" pos:end="2343:38"><expr pos:start="2343:13" pos:end="2343:37"><call pos:start="2343:13" pos:end="2343:37"><name pos:start="2343:13" pos:end="2343:30">gen_op_movq_A0_reg</name><argument_list pos:start="2343:31" pos:end="2343:37">(<argument pos:start="2343:32" pos:end="2343:36"><expr pos:start="2343:32" pos:end="2343:36"><name pos:start="2343:32" pos:end="2343:36">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2345:13" pos:end="2345:49"><expr pos:start="2345:13" pos:end="2345:48"><call pos:start="2345:13" pos:end="2345:48"><name pos:start="2345:13" pos:end="2345:29">gen_op_mov_TN_reg</name><argument_list pos:start="2345:30" pos:end="2345:48">(<argument pos:start="2345:31" pos:end="2345:37"><expr pos:start="2345:31" pos:end="2345:37"><name pos:start="2345:31" pos:end="2345:37">OT_QUAD</name></expr></argument>, <argument pos:start="2345:40" pos:end="2345:40"><expr pos:start="2345:40" pos:end="2345:40"><literal type="number" pos:start="2345:40" pos:end="2345:40">0</literal></expr></argument>, <argument pos:start="2345:43" pos:end="2345:47"><expr pos:start="2345:43" pos:end="2345:47"><name pos:start="2345:43" pos:end="2345:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2347:13" pos:end="2347:54"><expr pos:start="2347:13" pos:end="2347:53"><call pos:start="2347:13" pos:end="2347:53"><name pos:start="2347:13" pos:end="2347:27">tcg_gen_andi_tl</name><argument_list pos:start="2347:28" pos:end="2347:53">(<argument pos:start="2347:29" pos:end="2347:36"><expr pos:start="2347:29" pos:end="2347:36"><name pos:start="2347:29" pos:end="2347:36"><name pos:start="2347:29" pos:end="2347:33">cpu_T</name><index pos:start="2347:34" pos:end="2347:36">[<expr pos:start="2347:35" pos:end="2347:35"><literal type="number" pos:start="2347:35" pos:end="2347:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2347:39" pos:end="2347:46"><expr pos:start="2347:39" pos:end="2347:46"><name pos:start="2347:39" pos:end="2347:46"><name pos:start="2347:39" pos:end="2347:43">cpu_T</name><index pos:start="2347:44" pos:end="2347:46">[<expr pos:start="2347:45" pos:end="2347:45"><literal type="number" pos:start="2347:45" pos:end="2347:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2347:49" pos:end="2347:52"><expr pos:start="2347:49" pos:end="2347:52"><literal type="number" pos:start="2347:49" pos:end="2347:52">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2349:13" pos:end="2349:53"><expr pos:start="2349:13" pos:end="2349:52"><call pos:start="2349:13" pos:end="2349:52"><name pos:start="2349:13" pos:end="2349:26">tcg_gen_add_tl</name><argument_list pos:start="2349:27" pos:end="2349:52">(<argument pos:start="2349:28" pos:end="2349:33"><expr pos:start="2349:28" pos:end="2349:33"><name pos:start="2349:28" pos:end="2349:33">cpu_A0</name></expr></argument>, <argument pos:start="2349:36" pos:end="2349:41"><expr pos:start="2349:36" pos:end="2349:41"><name pos:start="2349:36" pos:end="2349:41">cpu_A0</name></expr></argument>, <argument pos:start="2349:44" pos:end="2349:51"><expr pos:start="2349:44" pos:end="2349:51"><name pos:start="2349:44" pos:end="2349:51"><name pos:start="2349:44" pos:end="2349:48">cpu_T</name><index pos:start="2349:49" pos:end="2349:51">[<expr pos:start="2349:50" pos:end="2349:50"><literal type="number" pos:start="2349:50" pos:end="2349:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2351:11" pos:end="2373:9">else

<cpp:endif pos:start="2353:1" pos:end="2353:6">#<cpp:directive pos:start="2353:2" pos:end="2353:6">endif</cpp:directive></cpp:endif>

        <block pos:start="2355:9" pos:end="2373:9">{<block_content pos:start="2357:13" pos:end="2371:60">

            <expr_stmt pos:start="2357:13" pos:end="2357:38"><expr pos:start="2357:13" pos:end="2357:37"><call pos:start="2357:13" pos:end="2357:37"><name pos:start="2357:13" pos:end="2357:30">gen_op_movl_A0_reg</name><argument_list pos:start="2357:31" pos:end="2357:37">(<argument pos:start="2357:32" pos:end="2357:36"><expr pos:start="2357:32" pos:end="2357:36"><name pos:start="2357:32" pos:end="2357:36">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2359:13" pos:end="2359:49"><expr pos:start="2359:13" pos:end="2359:48"><call pos:start="2359:13" pos:end="2359:48"><name pos:start="2359:13" pos:end="2359:29">gen_op_mov_TN_reg</name><argument_list pos:start="2359:30" pos:end="2359:48">(<argument pos:start="2359:31" pos:end="2359:37"><expr pos:start="2359:31" pos:end="2359:37"><name pos:start="2359:31" pos:end="2359:37">OT_LONG</name></expr></argument>, <argument pos:start="2359:40" pos:end="2359:40"><expr pos:start="2359:40" pos:end="2359:40"><literal type="number" pos:start="2359:40" pos:end="2359:40">0</literal></expr></argument>, <argument pos:start="2359:43" pos:end="2359:47"><expr pos:start="2359:43" pos:end="2359:47"><name pos:start="2359:43" pos:end="2359:47">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2361:13" pos:end="2361:54"><expr pos:start="2361:13" pos:end="2361:53"><call pos:start="2361:13" pos:end="2361:53"><name pos:start="2361:13" pos:end="2361:27">tcg_gen_andi_tl</name><argument_list pos:start="2361:28" pos:end="2361:53">(<argument pos:start="2361:29" pos:end="2361:36"><expr pos:start="2361:29" pos:end="2361:36"><name pos:start="2361:29" pos:end="2361:36"><name pos:start="2361:29" pos:end="2361:33">cpu_T</name><index pos:start="2361:34" pos:end="2361:36">[<expr pos:start="2361:35" pos:end="2361:35"><literal type="number" pos:start="2361:35" pos:end="2361:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2361:39" pos:end="2361:46"><expr pos:start="2361:39" pos:end="2361:46"><name pos:start="2361:39" pos:end="2361:46"><name pos:start="2361:39" pos:end="2361:43">cpu_T</name><index pos:start="2361:44" pos:end="2361:46">[<expr pos:start="2361:45" pos:end="2361:45"><literal type="number" pos:start="2361:45" pos:end="2361:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2361:49" pos:end="2361:52"><expr pos:start="2361:49" pos:end="2361:52"><literal type="number" pos:start="2361:49" pos:end="2361:52">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2363:13" pos:end="2363:53"><expr pos:start="2363:13" pos:end="2363:52"><call pos:start="2363:13" pos:end="2363:52"><name pos:start="2363:13" pos:end="2363:26">tcg_gen_add_tl</name><argument_list pos:start="2363:27" pos:end="2363:52">(<argument pos:start="2363:28" pos:end="2363:33"><expr pos:start="2363:28" pos:end="2363:33"><name pos:start="2363:28" pos:end="2363:33">cpu_A0</name></expr></argument>, <argument pos:start="2363:36" pos:end="2363:41"><expr pos:start="2363:36" pos:end="2363:41"><name pos:start="2363:36" pos:end="2363:41">cpu_A0</name></expr></argument>, <argument pos:start="2363:44" pos:end="2363:51"><expr pos:start="2363:44" pos:end="2363:51"><name pos:start="2363:44" pos:end="2363:51"><name pos:start="2363:44" pos:end="2363:48">cpu_T</name><index pos:start="2363:49" pos:end="2363:51">[<expr pos:start="2363:50" pos:end="2363:50"><literal type="number" pos:start="2363:50" pos:end="2363:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2365:13" pos:end="2371:60"><if pos:start="2365:13" pos:end="2367:38">if <condition pos:start="2365:16" pos:end="2365:30">(<expr pos:start="2365:17" pos:end="2365:29"><name pos:start="2365:17" pos:end="2365:24"><name pos:start="2365:17" pos:end="2365:17">s</name><operator pos:start="2365:18" pos:end="2365:19">-&gt;</operator><name pos:start="2365:20" pos:end="2365:24">aflag</name></name> <operator pos:start="2365:26" pos:end="2365:27">==</operator> <literal type="number" pos:start="2365:29" pos:end="2365:29">0</literal></expr>)</condition><block type="pseudo" pos:start="2367:17" pos:end="2367:38"><block_content pos:start="2367:17" pos:end="2367:38">

                <expr_stmt pos:start="2367:17" pos:end="2367:38"><expr pos:start="2367:17" pos:end="2367:37"><call pos:start="2367:17" pos:end="2367:37"><name pos:start="2367:17" pos:end="2367:35">gen_op_andl_A0_ffff</name><argument_list pos:start="2367:36" pos:end="2367:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2369:13" pos:end="2371:60">else<block type="pseudo" pos:start="2371:17" pos:end="2371:60"><block_content pos:start="2371:17" pos:end="2371:60">

                <expr_stmt pos:start="2371:17" pos:end="2371:60"><expr pos:start="2371:17" pos:end="2371:59"><call pos:start="2371:17" pos:end="2371:59"><name pos:start="2371:17" pos:end="2371:31">tcg_gen_andi_tl</name><argument_list pos:start="2371:32" pos:end="2371:59">(<argument pos:start="2371:33" pos:end="2371:38"><expr pos:start="2371:33" pos:end="2371:38"><name pos:start="2371:33" pos:end="2371:38">cpu_A0</name></expr></argument>, <argument pos:start="2371:41" pos:end="2371:46"><expr pos:start="2371:41" pos:end="2371:46"><name pos:start="2371:41" pos:end="2371:46">cpu_A0</name></expr></argument>, <argument pos:start="2371:49" pos:end="2371:58"><expr pos:start="2371:49" pos:end="2371:58"><literal type="number" pos:start="2371:49" pos:end="2371:58">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2375:9" pos:end="2375:29"><expr pos:start="2375:9" pos:end="2375:28"><call pos:start="2375:9" pos:end="2375:28"><name pos:start="2375:9" pos:end="2375:25">gen_add_A0_ds_seg</name><argument_list pos:start="2375:26" pos:end="2375:28">(<argument pos:start="2375:27" pos:end="2375:27"><expr pos:start="2375:27" pos:end="2375:27"><name pos:start="2375:27" pos:end="2375:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2377:9" pos:end="2377:49"><expr pos:start="2377:9" pos:end="2377:48"><call pos:start="2377:9" pos:end="2377:48"><name pos:start="2377:9" pos:end="2377:24">gen_op_ldu_T0_A0</name><argument_list pos:start="2377:25" pos:end="2377:48">(<argument pos:start="2377:26" pos:end="2377:47"><expr pos:start="2377:26" pos:end="2377:47"><name pos:start="2377:26" pos:end="2377:32">OT_BYTE</name> <operator pos:start="2377:34" pos:end="2377:34">+</operator> <name pos:start="2377:36" pos:end="2377:47"><name pos:start="2377:36" pos:end="2377:36">s</name><operator pos:start="2377:37" pos:end="2377:38">-&gt;</operator><name pos:start="2377:39" pos:end="2377:47">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2379:9" pos:end="2379:42"><expr pos:start="2379:9" pos:end="2379:41"><call pos:start="2379:9" pos:end="2379:41"><name pos:start="2379:9" pos:end="2379:25">gen_op_mov_reg_T0</name><argument_list pos:start="2379:26" pos:end="2379:41">(<argument pos:start="2379:27" pos:end="2379:33"><expr pos:start="2379:27" pos:end="2379:33"><name pos:start="2379:27" pos:end="2379:33">OT_BYTE</name></expr></argument>, <argument pos:start="2379:36" pos:end="2379:40"><expr pos:start="2379:36" pos:end="2379:40"><name pos:start="2379:36" pos:end="2379:40">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2381:9" pos:end="2381:14">break;</break>

    <case pos:start="2383:5" pos:end="2383:23">case <expr pos:start="2383:10" pos:end="2383:22"><literal type="number" pos:start="2383:10" pos:end="2383:13">0xb0</literal> <operator pos:start="2383:15" pos:end="2383:17">...</operator> <literal type="number" pos:start="2383:19" pos:end="2383:22">0xb7</literal></expr>:</case> <comment type="block" pos:start="2383:25" pos:end="2383:39">/* mov R, Ib */</comment>

        <expr_stmt pos:start="2385:9" pos:end="2385:35"><expr pos:start="2385:9" pos:end="2385:34"><name pos:start="2385:9" pos:end="2385:11">val</name> <operator pos:start="2385:13" pos:end="2385:13">=</operator> <call pos:start="2385:15" pos:end="2385:34"><name pos:start="2385:15" pos:end="2385:22">insn_get</name><argument_list pos:start="2385:23" pos:end="2385:34">(<argument pos:start="2385:24" pos:end="2385:24"><expr pos:start="2385:24" pos:end="2385:24"><name pos:start="2385:24" pos:end="2385:24">s</name></expr></argument>, <argument pos:start="2385:27" pos:end="2385:33"><expr pos:start="2385:27" pos:end="2385:33"><name pos:start="2385:27" pos:end="2385:33">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2387:9" pos:end="2387:31"><expr pos:start="2387:9" pos:end="2387:30"><call pos:start="2387:9" pos:end="2387:30"><name pos:start="2387:9" pos:end="2387:25">gen_op_movl_T0_im</name><argument_list pos:start="2387:26" pos:end="2387:30">(<argument pos:start="2387:27" pos:end="2387:29"><expr pos:start="2387:27" pos:end="2387:29"><name pos:start="2387:27" pos:end="2387:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2389:9" pos:end="2389:55"><expr pos:start="2389:9" pos:end="2389:54"><call pos:start="2389:9" pos:end="2389:54"><name pos:start="2389:9" pos:end="2389:25">gen_op_mov_reg_T0</name><argument_list pos:start="2389:26" pos:end="2389:54">(<argument pos:start="2389:27" pos:end="2389:33"><expr pos:start="2389:27" pos:end="2389:33"><name pos:start="2389:27" pos:end="2389:33">OT_BYTE</name></expr></argument>, <argument pos:start="2389:36" pos:end="2389:53"><expr pos:start="2389:36" pos:end="2389:53"><operator pos:start="2389:36" pos:end="2389:36">(</operator><name pos:start="2389:37" pos:end="2389:37">b</name> <operator pos:start="2389:39" pos:end="2389:39">&amp;</operator> <literal type="number" pos:start="2389:41" pos:end="2389:41">7</literal><operator pos:start="2389:42" pos:end="2389:42">)</operator> <operator pos:start="2389:44" pos:end="2389:44">|</operator> <call pos:start="2389:46" pos:end="2389:53"><name pos:start="2389:46" pos:end="2389:50">REX_B</name><argument_list pos:start="2389:51" pos:end="2389:53">(<argument pos:start="2389:52" pos:end="2389:52"><expr pos:start="2389:52" pos:end="2389:52"><name pos:start="2389:52" pos:end="2389:52">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2391:9" pos:end="2391:14">break;</break>

    <case pos:start="2393:5" pos:end="2396:0">case <expr pos:start="2393:10" pos:end="2393:22"><literal type="number" pos:start="2393:10" pos:end="2393:13">0xb8</literal> <operator pos:start="2393:15" pos:end="2393:17">...</operator> <literal type="number" pos:start="2393:19" pos:end="2393:22">0xbf</literal></expr>:</case> <comment type="block" pos:start="2393:25" pos:end="2393:39">/* mov R, Iv */</comment>

<cpp:ifdef pos:start="2395:1" pos:end="2395:20">#<cpp:directive pos:start="2395:2" pos:end="2395:6">ifdef</cpp:directive> <name pos:start="2395:8" pos:end="2395:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="2397:9" pos:end="2429:9"><if pos:start="2397:9" pos:end="2413:9">if <condition pos:start="2397:12" pos:end="2397:23">(<expr pos:start="2397:13" pos:end="2397:22"><name pos:start="2397:13" pos:end="2397:17">dflag</name> <operator pos:start="2397:19" pos:end="2397:20">==</operator> <literal type="number" pos:start="2397:22" pos:end="2397:22">2</literal></expr>)</condition> <block pos:start="2397:25" pos:end="2413:9">{<block_content pos:start="2399:13" pos:end="2411:44">

            <decl_stmt pos:start="2399:13" pos:end="2399:25"><decl pos:start="2399:13" pos:end="2399:24"><type pos:start="2399:13" pos:end="2399:20"><name pos:start="2399:13" pos:end="2399:20">uint64_t</name></type> <name pos:start="2399:22" pos:end="2399:24">tmp</name></decl>;</decl_stmt>

            <comment type="block" pos:start="2401:13" pos:end="2401:29">/* 64 bit case */</comment>

            <expr_stmt pos:start="2403:13" pos:end="2403:54"><expr pos:start="2403:13" pos:end="2403:53"><name pos:start="2403:13" pos:end="2403:15">tmp</name> <operator pos:start="2403:17" pos:end="2403:17">=</operator> <call pos:start="2403:19" pos:end="2403:53"><name pos:start="2403:19" pos:end="2403:30">cpu_ldq_code</name><argument_list pos:start="2403:31" pos:end="2403:53">(<argument pos:start="2403:32" pos:end="2403:45"><expr pos:start="2403:32" pos:end="2403:45"><name pos:start="2403:32" pos:end="2403:45">cpu_single_env</name></expr></argument>, <argument pos:start="2403:48" pos:end="2403:52"><expr pos:start="2403:48" pos:end="2403:52"><name pos:start="2403:48" pos:end="2403:52"><name pos:start="2403:48" pos:end="2403:48">s</name><operator pos:start="2403:49" pos:end="2403:50">-&gt;</operator><name pos:start="2403:51" pos:end="2403:52">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2405:13" pos:end="2405:23"><expr pos:start="2405:13" pos:end="2405:22"><name pos:start="2405:13" pos:end="2405:17"><name pos:start="2405:13" pos:end="2405:13">s</name><operator pos:start="2405:14" pos:end="2405:15">-&gt;</operator><name pos:start="2405:16" pos:end="2405:17">pc</name></name> <operator pos:start="2405:19" pos:end="2405:20">+=</operator> <literal type="number" pos:start="2405:22" pos:end="2405:22">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2407:13" pos:end="2407:37"><expr pos:start="2407:13" pos:end="2407:36"><name pos:start="2407:13" pos:end="2407:15">reg</name> <operator pos:start="2407:17" pos:end="2407:17">=</operator> <operator pos:start="2407:19" pos:end="2407:19">(</operator><name pos:start="2407:20" pos:end="2407:20">b</name> <operator pos:start="2407:22" pos:end="2407:22">&amp;</operator> <literal type="number" pos:start="2407:24" pos:end="2407:24">7</literal><operator pos:start="2407:25" pos:end="2407:25">)</operator> <operator pos:start="2407:27" pos:end="2407:27">|</operator> <call pos:start="2407:29" pos:end="2407:36"><name pos:start="2407:29" pos:end="2407:33">REX_B</name><argument_list pos:start="2407:34" pos:end="2407:36">(<argument pos:start="2407:35" pos:end="2407:35"><expr pos:start="2407:35" pos:end="2407:35"><name pos:start="2407:35" pos:end="2407:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2409:13" pos:end="2409:33"><expr pos:start="2409:13" pos:end="2409:32"><call pos:start="2409:13" pos:end="2409:32"><name pos:start="2409:13" pos:end="2409:27">gen_movtl_T0_im</name><argument_list pos:start="2409:28" pos:end="2409:32">(<argument pos:start="2409:29" pos:end="2409:31"><expr pos:start="2409:29" pos:end="2409:31"><name pos:start="2409:29" pos:end="2409:31">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2411:13" pos:end="2411:44"><expr pos:start="2411:13" pos:end="2411:43"><call pos:start="2411:13" pos:end="2411:43"><name pos:start="2411:13" pos:end="2411:29">gen_op_mov_reg_T0</name><argument_list pos:start="2411:30" pos:end="2411:43">(<argument pos:start="2411:31" pos:end="2411:37"><expr pos:start="2411:31" pos:end="2411:37"><name pos:start="2411:31" pos:end="2411:37">OT_QUAD</name></expr></argument>, <argument pos:start="2411:40" pos:end="2411:42"><expr pos:start="2411:40" pos:end="2411:42"><name pos:start="2411:40" pos:end="2411:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2413:11" pos:end="2429:9">else

<cpp:endif pos:start="2415:1" pos:end="2415:6">#<cpp:directive pos:start="2415:2" pos:end="2415:6">endif</cpp:directive></cpp:endif>

        <block pos:start="2417:9" pos:end="2429:9">{<block_content pos:start="2419:13" pos:end="2427:39">

            <expr_stmt pos:start="2419:13" pos:end="2419:43"><expr pos:start="2419:13" pos:end="2419:42"><name pos:start="2419:13" pos:end="2419:14">ot</name> <operator pos:start="2419:16" pos:end="2419:16">=</operator> <ternary pos:start="2419:18" pos:end="2419:42"><condition pos:start="2419:18" pos:end="2419:24"><expr pos:start="2419:18" pos:end="2419:22"><name pos:start="2419:18" pos:end="2419:22">dflag</name></expr> ?</condition><then pos:start="2419:26" pos:end="2419:32"> <expr pos:start="2419:26" pos:end="2419:32"><name pos:start="2419:26" pos:end="2419:32">OT_LONG</name></expr> </then><else pos:start="2419:34" pos:end="2419:42">: <expr pos:start="2419:36" pos:end="2419:42"><name pos:start="2419:36" pos:end="2419:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="2421:13" pos:end="2421:34"><expr pos:start="2421:13" pos:end="2421:33"><name pos:start="2421:13" pos:end="2421:15">val</name> <operator pos:start="2421:17" pos:end="2421:17">=</operator> <call pos:start="2421:19" pos:end="2421:33"><name pos:start="2421:19" pos:end="2421:26">insn_get</name><argument_list pos:start="2421:27" pos:end="2421:33">(<argument pos:start="2421:28" pos:end="2421:28"><expr pos:start="2421:28" pos:end="2421:28"><name pos:start="2421:28" pos:end="2421:28">s</name></expr></argument>, <argument pos:start="2421:31" pos:end="2421:32"><expr pos:start="2421:31" pos:end="2421:32"><name pos:start="2421:31" pos:end="2421:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2423:13" pos:end="2423:37"><expr pos:start="2423:13" pos:end="2423:36"><name pos:start="2423:13" pos:end="2423:15">reg</name> <operator pos:start="2423:17" pos:end="2423:17">=</operator> <operator pos:start="2423:19" pos:end="2423:19">(</operator><name pos:start="2423:20" pos:end="2423:20">b</name> <operator pos:start="2423:22" pos:end="2423:22">&amp;</operator> <literal type="number" pos:start="2423:24" pos:end="2423:24">7</literal><operator pos:start="2423:25" pos:end="2423:25">)</operator> <operator pos:start="2423:27" pos:end="2423:27">|</operator> <call pos:start="2423:29" pos:end="2423:36"><name pos:start="2423:29" pos:end="2423:33">REX_B</name><argument_list pos:start="2423:34" pos:end="2423:36">(<argument pos:start="2423:35" pos:end="2423:35"><expr pos:start="2423:35" pos:end="2423:35"><name pos:start="2423:35" pos:end="2423:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2425:13" pos:end="2425:35"><expr pos:start="2425:13" pos:end="2425:34"><call pos:start="2425:13" pos:end="2425:34"><name pos:start="2425:13" pos:end="2425:29">gen_op_movl_T0_im</name><argument_list pos:start="2425:30" pos:end="2425:34">(<argument pos:start="2425:31" pos:end="2425:33"><expr pos:start="2425:31" pos:end="2425:33"><name pos:start="2425:31" pos:end="2425:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2427:13" pos:end="2427:39"><expr pos:start="2427:13" pos:end="2427:38"><call pos:start="2427:13" pos:end="2427:38"><name pos:start="2427:13" pos:end="2427:29">gen_op_mov_reg_T0</name><argument_list pos:start="2427:30" pos:end="2427:38">(<argument pos:start="2427:31" pos:end="2427:32"><expr pos:start="2427:31" pos:end="2427:32"><name pos:start="2427:31" pos:end="2427:32">ot</name></expr></argument>, <argument pos:start="2427:35" pos:end="2427:37"><expr pos:start="2427:35" pos:end="2427:37"><name pos:start="2427:35" pos:end="2427:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2431:9" pos:end="2431:14">break;</break>



    <case pos:start="2435:5" pos:end="2435:23">case <expr pos:start="2435:10" pos:end="2435:22"><literal type="number" pos:start="2435:10" pos:end="2435:13">0x91</literal> <operator pos:start="2435:15" pos:end="2435:17">...</operator> <literal type="number" pos:start="2435:19" pos:end="2435:22">0x97</literal></expr>:</case> <comment type="block" pos:start="2435:25" pos:end="2435:41">/* xchg R, EAX */</comment>

    <label pos:start="2437:5" pos:end="2437:20"><name pos:start="2437:5" pos:end="2437:19">do_xchg_reg_eax</name>:</label>

        <expr_stmt pos:start="2439:9" pos:end="2439:29"><expr pos:start="2439:9" pos:end="2439:28"><name pos:start="2439:9" pos:end="2439:10">ot</name> <operator pos:start="2439:12" pos:end="2439:12">=</operator> <name pos:start="2439:14" pos:end="2439:18">dflag</name> <operator pos:start="2439:20" pos:end="2439:20">+</operator> <name pos:start="2439:22" pos:end="2439:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2441:9" pos:end="2441:33"><expr pos:start="2441:9" pos:end="2441:32"><name pos:start="2441:9" pos:end="2441:11">reg</name> <operator pos:start="2441:13" pos:end="2441:13">=</operator> <operator pos:start="2441:15" pos:end="2441:15">(</operator><name pos:start="2441:16" pos:end="2441:16">b</name> <operator pos:start="2441:18" pos:end="2441:18">&amp;</operator> <literal type="number" pos:start="2441:20" pos:end="2441:20">7</literal><operator pos:start="2441:21" pos:end="2441:21">)</operator> <operator pos:start="2441:23" pos:end="2441:23">|</operator> <call pos:start="2441:25" pos:end="2441:32"><name pos:start="2441:25" pos:end="2441:29">REX_B</name><argument_list pos:start="2441:30" pos:end="2441:32">(<argument pos:start="2441:31" pos:end="2441:31"><expr pos:start="2441:31" pos:end="2441:31"><name pos:start="2441:31" pos:end="2441:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2443:9" pos:end="2443:19"><expr pos:start="2443:9" pos:end="2443:18"><name pos:start="2443:9" pos:end="2443:10">rm</name> <operator pos:start="2443:12" pos:end="2443:12">=</operator> <name pos:start="2443:14" pos:end="2443:18">R_EAX</name></expr>;</expr_stmt>

        <goto pos:start="2445:9" pos:end="2445:25">goto <name pos:start="2445:14" pos:end="2445:24">do_xchg_reg</name>;</goto>

    <case pos:start="2447:5" pos:end="2447:14">case <expr pos:start="2447:10" pos:end="2447:13"><literal type="number" pos:start="2447:10" pos:end="2447:13">0x86</literal></expr>:</case>

    <case pos:start="2449:5" pos:end="2449:14">case <expr pos:start="2449:10" pos:end="2449:13"><literal type="number" pos:start="2449:10" pos:end="2449:13">0x87</literal></expr>:</case> <comment type="block" pos:start="2449:16" pos:end="2449:32">/* xchg Ev, Gv */</comment>

        <if_stmt pos:start="2451:9" pos:end="2457:33"><if pos:start="2451:9" pos:end="2453:25">if <condition pos:start="2451:12" pos:end="2451:25">(<expr pos:start="2451:13" pos:end="2451:24"><operator pos:start="2451:13" pos:end="2451:13">(</operator><name pos:start="2451:14" pos:end="2451:14">b</name> <operator pos:start="2451:16" pos:end="2451:16">&amp;</operator> <literal type="number" pos:start="2451:18" pos:end="2451:18">1</literal><operator pos:start="2451:19" pos:end="2451:19">)</operator> <operator pos:start="2451:21" pos:end="2451:22">==</operator> <literal type="number" pos:start="2451:24" pos:end="2451:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2453:13" pos:end="2453:25"><block_content pos:start="2453:13" pos:end="2453:25">

            <expr_stmt pos:start="2453:13" pos:end="2453:25"><expr pos:start="2453:13" pos:end="2453:24"><name pos:start="2453:13" pos:end="2453:14">ot</name> <operator pos:start="2453:16" pos:end="2453:16">=</operator> <name pos:start="2453:18" pos:end="2453:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2455:9" pos:end="2457:33">else<block type="pseudo" pos:start="2457:13" pos:end="2457:33"><block_content pos:start="2457:13" pos:end="2457:33">

            <expr_stmt pos:start="2457:13" pos:end="2457:33"><expr pos:start="2457:13" pos:end="2457:32"><name pos:start="2457:13" pos:end="2457:14">ot</name> <operator pos:start="2457:16" pos:end="2457:16">=</operator> <name pos:start="2457:18" pos:end="2457:22">dflag</name> <operator pos:start="2457:24" pos:end="2457:24">+</operator> <name pos:start="2457:26" pos:end="2457:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2459:9" pos:end="2459:55"><expr pos:start="2459:9" pos:end="2459:54"><name pos:start="2459:9" pos:end="2459:13">modrm</name> <operator pos:start="2459:15" pos:end="2459:15">=</operator> <call pos:start="2459:17" pos:end="2459:54"><name pos:start="2459:17" pos:end="2459:29">cpu_ldub_code</name><argument_list pos:start="2459:30" pos:end="2459:54">(<argument pos:start="2459:31" pos:end="2459:44"><expr pos:start="2459:31" pos:end="2459:44"><name pos:start="2459:31" pos:end="2459:44">cpu_single_env</name></expr></argument>, <argument pos:start="2459:47" pos:end="2459:53"><expr pos:start="2459:47" pos:end="2459:53"><name pos:start="2459:47" pos:end="2459:51"><name pos:start="2459:47" pos:end="2459:47">s</name><operator pos:start="2459:48" pos:end="2459:49">-&gt;</operator><name pos:start="2459:50" pos:end="2459:51">pc</name></name><operator pos:start="2459:52" pos:end="2459:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2461:9" pos:end="2461:41"><expr pos:start="2461:9" pos:end="2461:40"><name pos:start="2461:9" pos:end="2461:11">reg</name> <operator pos:start="2461:13" pos:end="2461:13">=</operator> <operator pos:start="2461:15" pos:end="2461:15">(</operator><operator pos:start="2461:16" pos:end="2461:16">(</operator><name pos:start="2461:17" pos:end="2461:21">modrm</name> <operator pos:start="2461:23" pos:end="2461:24">&gt;&gt;</operator> <literal type="number" pos:start="2461:26" pos:end="2461:26">3</literal><operator pos:start="2461:27" pos:end="2461:27">)</operator> <operator pos:start="2461:29" pos:end="2461:29">&amp;</operator> <literal type="number" pos:start="2461:31" pos:end="2461:31">7</literal><operator pos:start="2461:32" pos:end="2461:32">)</operator> <operator pos:start="2461:34" pos:end="2461:34">|</operator> <name pos:start="2461:36" pos:end="2461:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2463:9" pos:end="2463:31"><expr pos:start="2463:9" pos:end="2463:30"><name pos:start="2463:9" pos:end="2463:11">mod</name> <operator pos:start="2463:13" pos:end="2463:13">=</operator> <operator pos:start="2463:15" pos:end="2463:15">(</operator><name pos:start="2463:16" pos:end="2463:20">modrm</name> <operator pos:start="2463:22" pos:end="2463:23">&gt;&gt;</operator> <literal type="number" pos:start="2463:25" pos:end="2463:25">6</literal><operator pos:start="2463:26" pos:end="2463:26">)</operator> <operator pos:start="2463:28" pos:end="2463:28">&amp;</operator> <literal type="number" pos:start="2463:30" pos:end="2463:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2465:9" pos:end="2501:9"><if pos:start="2465:9" pos:end="2479:9">if <condition pos:start="2465:12" pos:end="2465:21">(<expr pos:start="2465:13" pos:end="2465:20"><name pos:start="2465:13" pos:end="2465:15">mod</name> <operator pos:start="2465:17" pos:end="2465:18">==</operator> <literal type="number" pos:start="2465:20" pos:end="2465:20">3</literal></expr>)</condition> <block pos:start="2465:23" pos:end="2479:9">{<block_content pos:start="2467:13" pos:end="2477:39">

            <expr_stmt pos:start="2467:13" pos:end="2467:40"><expr pos:start="2467:13" pos:end="2467:39"><name pos:start="2467:13" pos:end="2467:14">rm</name> <operator pos:start="2467:16" pos:end="2467:16">=</operator> <operator pos:start="2467:18" pos:end="2467:18">(</operator><name pos:start="2467:19" pos:end="2467:23">modrm</name> <operator pos:start="2467:25" pos:end="2467:25">&amp;</operator> <literal type="number" pos:start="2467:27" pos:end="2467:27">7</literal><operator pos:start="2467:28" pos:end="2467:28">)</operator> <operator pos:start="2467:30" pos:end="2467:30">|</operator> <call pos:start="2467:32" pos:end="2467:39"><name pos:start="2467:32" pos:end="2467:36">REX_B</name><argument_list pos:start="2467:37" pos:end="2467:39">(<argument pos:start="2467:38" pos:end="2467:38"><expr pos:start="2467:38" pos:end="2467:38"><name pos:start="2467:38" pos:end="2467:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="2469:9" pos:end="2469:20"><name pos:start="2469:9" pos:end="2469:19">do_xchg_reg</name>:</label>

            <expr_stmt pos:start="2471:13" pos:end="2471:42"><expr pos:start="2471:13" pos:end="2471:41"><call pos:start="2471:13" pos:end="2471:41"><name pos:start="2471:13" pos:end="2471:29">gen_op_mov_TN_reg</name><argument_list pos:start="2471:30" pos:end="2471:41">(<argument pos:start="2471:31" pos:end="2471:32"><expr pos:start="2471:31" pos:end="2471:32"><name pos:start="2471:31" pos:end="2471:32">ot</name></expr></argument>, <argument pos:start="2471:35" pos:end="2471:35"><expr pos:start="2471:35" pos:end="2471:35"><literal type="number" pos:start="2471:35" pos:end="2471:35">0</literal></expr></argument>, <argument pos:start="2471:38" pos:end="2471:40"><expr pos:start="2471:38" pos:end="2471:40"><name pos:start="2471:38" pos:end="2471:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2473:13" pos:end="2473:41"><expr pos:start="2473:13" pos:end="2473:40"><call pos:start="2473:13" pos:end="2473:40"><name pos:start="2473:13" pos:end="2473:29">gen_op_mov_TN_reg</name><argument_list pos:start="2473:30" pos:end="2473:40">(<argument pos:start="2473:31" pos:end="2473:32"><expr pos:start="2473:31" pos:end="2473:32"><name pos:start="2473:31" pos:end="2473:32">ot</name></expr></argument>, <argument pos:start="2473:35" pos:end="2473:35"><expr pos:start="2473:35" pos:end="2473:35"><literal type="number" pos:start="2473:35" pos:end="2473:35">1</literal></expr></argument>, <argument pos:start="2473:38" pos:end="2473:39"><expr pos:start="2473:38" pos:end="2473:39"><name pos:start="2473:38" pos:end="2473:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2475:13" pos:end="2475:38"><expr pos:start="2475:13" pos:end="2475:37"><call pos:start="2475:13" pos:end="2475:37"><name pos:start="2475:13" pos:end="2475:29">gen_op_mov_reg_T0</name><argument_list pos:start="2475:30" pos:end="2475:37">(<argument pos:start="2475:31" pos:end="2475:32"><expr pos:start="2475:31" pos:end="2475:32"><name pos:start="2475:31" pos:end="2475:32">ot</name></expr></argument>, <argument pos:start="2475:35" pos:end="2475:36"><expr pos:start="2475:35" pos:end="2475:36"><name pos:start="2475:35" pos:end="2475:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2477:13" pos:end="2477:39"><expr pos:start="2477:13" pos:end="2477:38"><call pos:start="2477:13" pos:end="2477:38"><name pos:start="2477:13" pos:end="2477:29">gen_op_mov_reg_T1</name><argument_list pos:start="2477:30" pos:end="2477:38">(<argument pos:start="2477:31" pos:end="2477:32"><expr pos:start="2477:31" pos:end="2477:32"><name pos:start="2477:31" pos:end="2477:32">ot</name></expr></argument>, <argument pos:start="2477:35" pos:end="2477:37"><expr pos:start="2477:35" pos:end="2477:37"><name pos:start="2477:35" pos:end="2477:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2479:11" pos:end="2501:9">else <block pos:start="2479:16" pos:end="2501:9">{<block_content pos:start="2481:13" pos:end="2499:39">

            <expr_stmt pos:start="2481:13" pos:end="2481:61"><expr pos:start="2481:13" pos:end="2481:60"><call pos:start="2481:13" pos:end="2481:60"><name pos:start="2481:13" pos:end="2481:25">gen_lea_modrm</name><argument_list pos:start="2481:26" pos:end="2481:60">(<argument pos:start="2481:27" pos:end="2481:27"><expr pos:start="2481:27" pos:end="2481:27"><name pos:start="2481:27" pos:end="2481:27">s</name></expr></argument>, <argument pos:start="2481:30" pos:end="2481:34"><expr pos:start="2481:30" pos:end="2481:34"><name pos:start="2481:30" pos:end="2481:34">modrm</name></expr></argument>, <argument pos:start="2481:37" pos:end="2481:45"><expr pos:start="2481:37" pos:end="2481:45"><operator pos:start="2481:37" pos:end="2481:37">&amp;</operator><name pos:start="2481:38" pos:end="2481:45">reg_addr</name></expr></argument>, <argument pos:start="2481:48" pos:end="2481:59"><expr pos:start="2481:48" pos:end="2481:59"><operator pos:start="2481:48" pos:end="2481:48">&amp;</operator><name pos:start="2481:49" pos:end="2481:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2483:13" pos:end="2483:42"><expr pos:start="2483:13" pos:end="2483:41"><call pos:start="2483:13" pos:end="2483:41"><name pos:start="2483:13" pos:end="2483:29">gen_op_mov_TN_reg</name><argument_list pos:start="2483:30" pos:end="2483:41">(<argument pos:start="2483:31" pos:end="2483:32"><expr pos:start="2483:31" pos:end="2483:32"><name pos:start="2483:31" pos:end="2483:32">ot</name></expr></argument>, <argument pos:start="2483:35" pos:end="2483:35"><expr pos:start="2483:35" pos:end="2483:35"><literal type="number" pos:start="2483:35" pos:end="2483:35">0</literal></expr></argument>, <argument pos:start="2483:38" pos:end="2483:40"><expr pos:start="2483:38" pos:end="2483:40"><name pos:start="2483:38" pos:end="2483:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2485:13" pos:end="2485:44">/* for xchg, lock is implicit */</comment>

            <if_stmt pos:start="2487:13" pos:end="2489:34"><if pos:start="2487:13" pos:end="2489:34">if <condition pos:start="2487:16" pos:end="2487:42">(<expr pos:start="2487:17" pos:end="2487:41"><operator pos:start="2487:17" pos:end="2487:17">!</operator><operator pos:start="2487:18" pos:end="2487:18">(</operator><name pos:start="2487:19" pos:end="2487:26">prefixes</name> <operator pos:start="2487:28" pos:end="2487:28">&amp;</operator> <name pos:start="2487:30" pos:end="2487:40">PREFIX_LOCK</name><operator pos:start="2487:41" pos:end="2487:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2489:17" pos:end="2489:34"><block_content pos:start="2489:17" pos:end="2489:34">

                <expr_stmt pos:start="2489:17" pos:end="2489:34"><expr pos:start="2489:17" pos:end="2489:33"><call pos:start="2489:17" pos:end="2489:33"><name pos:start="2489:17" pos:end="2489:31">gen_helper_lock</name><argument_list pos:start="2489:32" pos:end="2489:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2491:13" pos:end="2491:47"><expr pos:start="2491:13" pos:end="2491:46"><call pos:start="2491:13" pos:end="2491:46"><name pos:start="2491:13" pos:end="2491:27">gen_op_ld_T1_A0</name><argument_list pos:start="2491:28" pos:end="2491:46">(<argument pos:start="2491:29" pos:end="2491:45"><expr pos:start="2491:29" pos:end="2491:45"><name pos:start="2491:29" pos:end="2491:30">ot</name> <operator pos:start="2491:32" pos:end="2491:32">+</operator> <name pos:start="2491:34" pos:end="2491:45"><name pos:start="2491:34" pos:end="2491:34">s</name><operator pos:start="2491:35" pos:end="2491:36">-&gt;</operator><name pos:start="2491:37" pos:end="2491:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2493:13" pos:end="2493:47"><expr pos:start="2493:13" pos:end="2493:46"><call pos:start="2493:13" pos:end="2493:46"><name pos:start="2493:13" pos:end="2493:27">gen_op_st_T0_A0</name><argument_list pos:start="2493:28" pos:end="2493:46">(<argument pos:start="2493:29" pos:end="2493:45"><expr pos:start="2493:29" pos:end="2493:45"><name pos:start="2493:29" pos:end="2493:30">ot</name> <operator pos:start="2493:32" pos:end="2493:32">+</operator> <name pos:start="2493:34" pos:end="2493:45"><name pos:start="2493:34" pos:end="2493:34">s</name><operator pos:start="2493:35" pos:end="2493:36">-&gt;</operator><name pos:start="2493:37" pos:end="2493:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2495:13" pos:end="2497:36"><if pos:start="2495:13" pos:end="2497:36">if <condition pos:start="2495:16" pos:end="2495:42">(<expr pos:start="2495:17" pos:end="2495:41"><operator pos:start="2495:17" pos:end="2495:17">!</operator><operator pos:start="2495:18" pos:end="2495:18">(</operator><name pos:start="2495:19" pos:end="2495:26">prefixes</name> <operator pos:start="2495:28" pos:end="2495:28">&amp;</operator> <name pos:start="2495:30" pos:end="2495:40">PREFIX_LOCK</name><operator pos:start="2495:41" pos:end="2495:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2497:17" pos:end="2497:36"><block_content pos:start="2497:17" pos:end="2497:36">

                <expr_stmt pos:start="2497:17" pos:end="2497:36"><expr pos:start="2497:17" pos:end="2497:35"><call pos:start="2497:17" pos:end="2497:35"><name pos:start="2497:17" pos:end="2497:33">gen_helper_unlock</name><argument_list pos:start="2497:34" pos:end="2497:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2499:13" pos:end="2499:39"><expr pos:start="2499:13" pos:end="2499:38"><call pos:start="2499:13" pos:end="2499:38"><name pos:start="2499:13" pos:end="2499:29">gen_op_mov_reg_T1</name><argument_list pos:start="2499:30" pos:end="2499:38">(<argument pos:start="2499:31" pos:end="2499:32"><expr pos:start="2499:31" pos:end="2499:32"><name pos:start="2499:31" pos:end="2499:32">ot</name></expr></argument>, <argument pos:start="2499:35" pos:end="2499:37"><expr pos:start="2499:35" pos:end="2499:37"><name pos:start="2499:35" pos:end="2499:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2503:9" pos:end="2503:14">break;</break>

    <case pos:start="2505:5" pos:end="2505:14">case <expr pos:start="2505:10" pos:end="2505:13"><literal type="number" pos:start="2505:10" pos:end="2505:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="2505:16" pos:end="2505:27">/* les Gv */</comment>

        <if_stmt pos:start="2507:9" pos:end="2509:28"><if pos:start="2507:9" pos:end="2509:28">if <condition pos:start="2507:12" pos:end="2507:22">(<expr pos:start="2507:13" pos:end="2507:21"><call pos:start="2507:13" pos:end="2507:21"><name pos:start="2507:13" pos:end="2507:18">CODE64</name><argument_list pos:start="2507:19" pos:end="2507:21">(<argument pos:start="2507:20" pos:end="2507:20"><expr pos:start="2507:20" pos:end="2507:20"><name pos:start="2507:20" pos:end="2507:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2509:13" pos:end="2509:28"><block_content pos:start="2509:13" pos:end="2509:28">

            <goto pos:start="2509:13" pos:end="2509:28">goto <name pos:start="2509:18" pos:end="2509:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2511:9" pos:end="2511:18"><expr pos:start="2511:9" pos:end="2511:17"><name pos:start="2511:9" pos:end="2511:10">op</name> <operator pos:start="2511:12" pos:end="2511:12">=</operator> <name pos:start="2511:14" pos:end="2511:17">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="2513:9" pos:end="2513:20">goto <name pos:start="2513:14" pos:end="2513:19">do_lxx</name>;</goto>

    <case pos:start="2515:5" pos:end="2515:14">case <expr pos:start="2515:10" pos:end="2515:13"><literal type="number" pos:start="2515:10" pos:end="2515:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="2515:16" pos:end="2515:27">/* lds Gv */</comment>

        <if_stmt pos:start="2517:9" pos:end="2519:28"><if pos:start="2517:9" pos:end="2519:28">if <condition pos:start="2517:12" pos:end="2517:22">(<expr pos:start="2517:13" pos:end="2517:21"><call pos:start="2517:13" pos:end="2517:21"><name pos:start="2517:13" pos:end="2517:18">CODE64</name><argument_list pos:start="2517:19" pos:end="2517:21">(<argument pos:start="2517:20" pos:end="2517:20"><expr pos:start="2517:20" pos:end="2517:20"><name pos:start="2517:20" pos:end="2517:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2519:13" pos:end="2519:28"><block_content pos:start="2519:13" pos:end="2519:28">

            <goto pos:start="2519:13" pos:end="2519:28">goto <name pos:start="2519:18" pos:end="2519:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2521:9" pos:end="2521:18"><expr pos:start="2521:9" pos:end="2521:17"><name pos:start="2521:9" pos:end="2521:10">op</name> <operator pos:start="2521:12" pos:end="2521:12">=</operator> <name pos:start="2521:14" pos:end="2521:17">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="2523:9" pos:end="2523:20">goto <name pos:start="2523:14" pos:end="2523:19">do_lxx</name>;</goto>

    <case pos:start="2525:5" pos:end="2525:15">case <expr pos:start="2525:10" pos:end="2525:14"><literal type="number" pos:start="2525:10" pos:end="2525:14">0x1b2</literal></expr>:</case> <comment type="block" pos:start="2525:17" pos:end="2525:28">/* lss Gv */</comment>

        <expr_stmt pos:start="2527:9" pos:end="2527:18"><expr pos:start="2527:9" pos:end="2527:17"><name pos:start="2527:9" pos:end="2527:10">op</name> <operator pos:start="2527:12" pos:end="2527:12">=</operator> <name pos:start="2527:14" pos:end="2527:17">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="2529:9" pos:end="2529:20">goto <name pos:start="2529:14" pos:end="2529:19">do_lxx</name>;</goto>

    <case pos:start="2531:5" pos:end="2531:15">case <expr pos:start="2531:10" pos:end="2531:14"><literal type="number" pos:start="2531:10" pos:end="2531:14">0x1b4</literal></expr>:</case> <comment type="block" pos:start="2531:17" pos:end="2531:28">/* lfs Gv */</comment>

        <expr_stmt pos:start="2533:9" pos:end="2533:18"><expr pos:start="2533:9" pos:end="2533:17"><name pos:start="2533:9" pos:end="2533:10">op</name> <operator pos:start="2533:12" pos:end="2533:12">=</operator> <name pos:start="2533:14" pos:end="2533:17">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="2535:9" pos:end="2535:20">goto <name pos:start="2535:14" pos:end="2535:19">do_lxx</name>;</goto>

    <case pos:start="2537:5" pos:end="2537:15">case <expr pos:start="2537:10" pos:end="2537:14"><literal type="number" pos:start="2537:10" pos:end="2537:14">0x1b5</literal></expr>:</case> <comment type="block" pos:start="2537:17" pos:end="2537:28">/* lgs Gv */</comment>

        <expr_stmt pos:start="2539:9" pos:end="2539:18"><expr pos:start="2539:9" pos:end="2539:17"><name pos:start="2539:9" pos:end="2539:10">op</name> <operator pos:start="2539:12" pos:end="2539:12">=</operator> <name pos:start="2539:14" pos:end="2539:17">R_GS</name></expr>;</expr_stmt>

    <label pos:start="2541:5" pos:end="2541:11"><name pos:start="2541:5" pos:end="2541:10">do_lxx</name>:</label>

        <expr_stmt pos:start="2543:9" pos:end="2543:39"><expr pos:start="2543:9" pos:end="2543:38"><name pos:start="2543:9" pos:end="2543:10">ot</name> <operator pos:start="2543:12" pos:end="2543:12">=</operator> <ternary pos:start="2543:14" pos:end="2543:38"><condition pos:start="2543:14" pos:end="2543:20"><expr pos:start="2543:14" pos:end="2543:18"><name pos:start="2543:14" pos:end="2543:18">dflag</name></expr> ?</condition><then pos:start="2543:22" pos:end="2543:28"> <expr pos:start="2543:22" pos:end="2543:28"><name pos:start="2543:22" pos:end="2543:28">OT_LONG</name></expr> </then><else pos:start="2543:30" pos:end="2543:38">: <expr pos:start="2543:32" pos:end="2543:38"><name pos:start="2543:32" pos:end="2543:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="2545:9" pos:end="2545:55"><expr pos:start="2545:9" pos:end="2545:54"><name pos:start="2545:9" pos:end="2545:13">modrm</name> <operator pos:start="2545:15" pos:end="2545:15">=</operator> <call pos:start="2545:17" pos:end="2545:54"><name pos:start="2545:17" pos:end="2545:29">cpu_ldub_code</name><argument_list pos:start="2545:30" pos:end="2545:54">(<argument pos:start="2545:31" pos:end="2545:44"><expr pos:start="2545:31" pos:end="2545:44"><name pos:start="2545:31" pos:end="2545:44">cpu_single_env</name></expr></argument>, <argument pos:start="2545:47" pos:end="2545:53"><expr pos:start="2545:47" pos:end="2545:53"><name pos:start="2545:47" pos:end="2545:51"><name pos:start="2545:47" pos:end="2545:47">s</name><operator pos:start="2545:48" pos:end="2545:49">-&gt;</operator><name pos:start="2545:50" pos:end="2545:51">pc</name></name><operator pos:start="2545:52" pos:end="2545:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2547:9" pos:end="2547:41"><expr pos:start="2547:9" pos:end="2547:40"><name pos:start="2547:9" pos:end="2547:11">reg</name> <operator pos:start="2547:13" pos:end="2547:13">=</operator> <operator pos:start="2547:15" pos:end="2547:15">(</operator><operator pos:start="2547:16" pos:end="2547:16">(</operator><name pos:start="2547:17" pos:end="2547:21">modrm</name> <operator pos:start="2547:23" pos:end="2547:24">&gt;&gt;</operator> <literal type="number" pos:start="2547:26" pos:end="2547:26">3</literal><operator pos:start="2547:27" pos:end="2547:27">)</operator> <operator pos:start="2547:29" pos:end="2547:29">&amp;</operator> <literal type="number" pos:start="2547:31" pos:end="2547:31">7</literal><operator pos:start="2547:32" pos:end="2547:32">)</operator> <operator pos:start="2547:34" pos:end="2547:34">|</operator> <name pos:start="2547:36" pos:end="2547:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2549:9" pos:end="2549:31"><expr pos:start="2549:9" pos:end="2549:30"><name pos:start="2549:9" pos:end="2549:11">mod</name> <operator pos:start="2549:13" pos:end="2549:13">=</operator> <operator pos:start="2549:15" pos:end="2549:15">(</operator><name pos:start="2549:16" pos:end="2549:20">modrm</name> <operator pos:start="2549:22" pos:end="2549:23">&gt;&gt;</operator> <literal type="number" pos:start="2549:25" pos:end="2549:25">6</literal><operator pos:start="2549:26" pos:end="2549:26">)</operator> <operator pos:start="2549:28" pos:end="2549:28">&amp;</operator> <literal type="number" pos:start="2549:30" pos:end="2549:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2551:9" pos:end="2553:28"><if pos:start="2551:9" pos:end="2553:28">if <condition pos:start="2551:12" pos:end="2551:21">(<expr pos:start="2551:13" pos:end="2551:20"><name pos:start="2551:13" pos:end="2551:15">mod</name> <operator pos:start="2551:17" pos:end="2551:18">==</operator> <literal type="number" pos:start="2551:20" pos:end="2551:20">3</literal></expr>)</condition><block type="pseudo" pos:start="2553:13" pos:end="2553:28"><block_content pos:start="2553:13" pos:end="2553:28">

            <goto pos:start="2553:13" pos:end="2553:28">goto <name pos:start="2553:18" pos:end="2553:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2555:9" pos:end="2555:57"><expr pos:start="2555:9" pos:end="2555:56"><call pos:start="2555:9" pos:end="2555:56"><name pos:start="2555:9" pos:end="2555:21">gen_lea_modrm</name><argument_list pos:start="2555:22" pos:end="2555:56">(<argument pos:start="2555:23" pos:end="2555:23"><expr pos:start="2555:23" pos:end="2555:23"><name pos:start="2555:23" pos:end="2555:23">s</name></expr></argument>, <argument pos:start="2555:26" pos:end="2555:30"><expr pos:start="2555:26" pos:end="2555:30"><name pos:start="2555:26" pos:end="2555:30">modrm</name></expr></argument>, <argument pos:start="2555:33" pos:end="2555:41"><expr pos:start="2555:33" pos:end="2555:41"><operator pos:start="2555:33" pos:end="2555:33">&amp;</operator><name pos:start="2555:34" pos:end="2555:41">reg_addr</name></expr></argument>, <argument pos:start="2555:44" pos:end="2555:55"><expr pos:start="2555:44" pos:end="2555:55"><operator pos:start="2555:44" pos:end="2555:44">&amp;</operator><name pos:start="2555:45" pos:end="2555:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2557:9" pos:end="2557:43"><expr pos:start="2557:9" pos:end="2557:42"><call pos:start="2557:9" pos:end="2557:42"><name pos:start="2557:9" pos:end="2557:23">gen_op_ld_T1_A0</name><argument_list pos:start="2557:24" pos:end="2557:42">(<argument pos:start="2557:25" pos:end="2557:41"><expr pos:start="2557:25" pos:end="2557:41"><name pos:start="2557:25" pos:end="2557:26">ot</name> <operator pos:start="2557:28" pos:end="2557:28">+</operator> <name pos:start="2557:30" pos:end="2557:41"><name pos:start="2557:30" pos:end="2557:30">s</name><operator pos:start="2557:31" pos:end="2557:32">-&gt;</operator><name pos:start="2557:33" pos:end="2557:41">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2559:9" pos:end="2559:50"><expr pos:start="2559:9" pos:end="2559:49"><call pos:start="2559:9" pos:end="2559:49"><name pos:start="2559:9" pos:end="2559:21">gen_add_A0_im</name><argument_list pos:start="2559:22" pos:end="2559:49">(<argument pos:start="2559:23" pos:end="2559:23"><expr pos:start="2559:23" pos:end="2559:23"><name pos:start="2559:23" pos:end="2559:23">s</name></expr></argument>, <argument pos:start="2559:26" pos:end="2559:48"><expr pos:start="2559:26" pos:end="2559:48"><literal type="number" pos:start="2559:26" pos:end="2559:26">1</literal> <operator pos:start="2559:28" pos:end="2559:29">&lt;&lt;</operator> <operator pos:start="2559:31" pos:end="2559:31">(</operator><name pos:start="2559:32" pos:end="2559:33">ot</name> <operator pos:start="2559:35" pos:end="2559:35">-</operator> <name pos:start="2559:37" pos:end="2559:43">OT_WORD</name> <operator pos:start="2559:45" pos:end="2559:45">+</operator> <literal type="number" pos:start="2559:47" pos:end="2559:47">1</literal><operator pos:start="2559:48" pos:end="2559:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2561:9" pos:end="2561:66">/* load the segment first to handle exceptions properly */</comment>

        <expr_stmt pos:start="2563:9" pos:end="2563:49"><expr pos:start="2563:9" pos:end="2563:48"><call pos:start="2563:9" pos:end="2563:48"><name pos:start="2563:9" pos:end="2563:24">gen_op_ldu_T0_A0</name><argument_list pos:start="2563:25" pos:end="2563:48">(<argument pos:start="2563:26" pos:end="2563:47"><expr pos:start="2563:26" pos:end="2563:47"><name pos:start="2563:26" pos:end="2563:32">OT_WORD</name> <operator pos:start="2563:34" pos:end="2563:34">+</operator> <name pos:start="2563:36" pos:end="2563:47"><name pos:start="2563:36" pos:end="2563:36">s</name><operator pos:start="2563:37" pos:end="2563:38">-&gt;</operator><name pos:start="2563:39" pos:end="2563:47">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2565:9" pos:end="2565:54"><expr pos:start="2565:9" pos:end="2565:53"><call pos:start="2565:9" pos:end="2565:53"><name pos:start="2565:9" pos:end="2565:23">gen_movl_seg_T0</name><argument_list pos:start="2565:24" pos:end="2565:53">(<argument pos:start="2565:25" pos:end="2565:25"><expr pos:start="2565:25" pos:end="2565:25"><name pos:start="2565:25" pos:end="2565:25">s</name></expr></argument>, <argument pos:start="2565:28" pos:end="2565:29"><expr pos:start="2565:28" pos:end="2565:29"><name pos:start="2565:28" pos:end="2565:29">op</name></expr></argument>, <argument pos:start="2565:32" pos:end="2565:52"><expr pos:start="2565:32" pos:end="2565:52"><name pos:start="2565:32" pos:end="2565:39">pc_start</name> <operator pos:start="2565:41" pos:end="2565:41">-</operator> <name pos:start="2565:43" pos:end="2565:52"><name pos:start="2565:43" pos:end="2565:43">s</name><operator pos:start="2565:44" pos:end="2565:45">-&gt;</operator><name pos:start="2565:46" pos:end="2565:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2567:9" pos:end="2567:31">/* then put the data */</comment>

        <expr_stmt pos:start="2569:9" pos:end="2569:35"><expr pos:start="2569:9" pos:end="2569:34"><call pos:start="2569:9" pos:end="2569:34"><name pos:start="2569:9" pos:end="2569:25">gen_op_mov_reg_T1</name><argument_list pos:start="2569:26" pos:end="2569:34">(<argument pos:start="2569:27" pos:end="2569:28"><expr pos:start="2569:27" pos:end="2569:28"><name pos:start="2569:27" pos:end="2569:28">ot</name></expr></argument>, <argument pos:start="2569:31" pos:end="2569:33"><expr pos:start="2569:31" pos:end="2569:33"><name pos:start="2569:31" pos:end="2569:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2571:9" pos:end="2577:9"><if pos:start="2571:9" pos:end="2577:9">if <condition pos:start="2571:12" pos:end="2571:22">(<expr pos:start="2571:13" pos:end="2571:21"><name pos:start="2571:13" pos:end="2571:21"><name pos:start="2571:13" pos:end="2571:13">s</name><operator pos:start="2571:14" pos:end="2571:15">-&gt;</operator><name pos:start="2571:16" pos:end="2571:21">is_jmp</name></name></expr>)</condition> <block pos:start="2571:24" pos:end="2577:9">{<block_content pos:start="2573:13" pos:end="2575:23">

            <expr_stmt pos:start="2573:13" pos:end="2573:43"><expr pos:start="2573:13" pos:end="2573:42"><call pos:start="2573:13" pos:end="2573:42"><name pos:start="2573:13" pos:end="2573:22">gen_jmp_im</name><argument_list pos:start="2573:23" pos:end="2573:42">(<argument pos:start="2573:24" pos:end="2573:41"><expr pos:start="2573:24" pos:end="2573:41"><name pos:start="2573:24" pos:end="2573:28"><name pos:start="2573:24" pos:end="2573:24">s</name><operator pos:start="2573:25" pos:end="2573:26">-&gt;</operator><name pos:start="2573:27" pos:end="2573:28">pc</name></name> <operator pos:start="2573:30" pos:end="2573:30">-</operator> <name pos:start="2573:32" pos:end="2573:41"><name pos:start="2573:32" pos:end="2573:32">s</name><operator pos:start="2573:33" pos:end="2573:34">-&gt;</operator><name pos:start="2573:35" pos:end="2573:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2575:13" pos:end="2575:23"><expr pos:start="2575:13" pos:end="2575:22"><call pos:start="2575:13" pos:end="2575:22"><name pos:start="2575:13" pos:end="2575:19">gen_eob</name><argument_list pos:start="2575:20" pos:end="2575:22">(<argument pos:start="2575:21" pos:end="2575:21"><expr pos:start="2575:21" pos:end="2575:21"><name pos:start="2575:21" pos:end="2575:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2579:9" pos:end="2579:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2583:9" pos:end="2583:34">/************************/</comment>

        <comment type="block" pos:start="2585:9" pos:end="2585:20">/* shifts */</comment>

    <case pos:start="2587:5" pos:end="2587:14">case <expr pos:start="2587:10" pos:end="2587:13"><literal type="number" pos:start="2587:10" pos:end="2587:13">0xc0</literal></expr>:</case>

    <case pos:start="2589:5" pos:end="2589:14">case <expr pos:start="2589:10" pos:end="2589:13"><literal type="number" pos:start="2589:10" pos:end="2589:13">0xc1</literal></expr>:</case>

        <comment type="block" pos:start="2591:9" pos:end="2591:25">/* shift Ev,Ib */</comment>

        <expr_stmt pos:start="2593:9" pos:end="2593:18"><expr pos:start="2593:9" pos:end="2593:17"><name pos:start="2593:9" pos:end="2593:13">shift</name> <operator pos:start="2593:15" pos:end="2593:15">=</operator> <literal type="number" pos:start="2593:17" pos:end="2593:17">2</literal></expr>;</expr_stmt>

    <label pos:start="2595:5" pos:end="2595:9"><name pos:start="2595:5" pos:end="2595:8">grp2</name>:</label>

        <block pos:start="2597:9" pos:end="2655:9">{<block_content pos:start="2599:13" pos:end="2653:13">

            <if_stmt pos:start="2599:13" pos:end="2605:37"><if pos:start="2599:13" pos:end="2601:29">if <condition pos:start="2599:16" pos:end="2599:29">(<expr pos:start="2599:17" pos:end="2599:28"><operator pos:start="2599:17" pos:end="2599:17">(</operator><name pos:start="2599:18" pos:end="2599:18">b</name> <operator pos:start="2599:20" pos:end="2599:20">&amp;</operator> <literal type="number" pos:start="2599:22" pos:end="2599:22">1</literal><operator pos:start="2599:23" pos:end="2599:23">)</operator> <operator pos:start="2599:25" pos:end="2599:26">==</operator> <literal type="number" pos:start="2599:28" pos:end="2599:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2601:17" pos:end="2601:29"><block_content pos:start="2601:17" pos:end="2601:29">

                <expr_stmt pos:start="2601:17" pos:end="2601:29"><expr pos:start="2601:17" pos:end="2601:28"><name pos:start="2601:17" pos:end="2601:18">ot</name> <operator pos:start="2601:20" pos:end="2601:20">=</operator> <name pos:start="2601:22" pos:end="2601:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2603:13" pos:end="2605:37">else<block type="pseudo" pos:start="2605:17" pos:end="2605:37"><block_content pos:start="2605:17" pos:end="2605:37">

                <expr_stmt pos:start="2605:17" pos:end="2605:37"><expr pos:start="2605:17" pos:end="2605:36"><name pos:start="2605:17" pos:end="2605:18">ot</name> <operator pos:start="2605:20" pos:end="2605:20">=</operator> <name pos:start="2605:22" pos:end="2605:26">dflag</name> <operator pos:start="2605:28" pos:end="2605:28">+</operator> <name pos:start="2605:30" pos:end="2605:36">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="2609:13" pos:end="2609:59"><expr pos:start="2609:13" pos:end="2609:58"><name pos:start="2609:13" pos:end="2609:17">modrm</name> <operator pos:start="2609:19" pos:end="2609:19">=</operator> <call pos:start="2609:21" pos:end="2609:58"><name pos:start="2609:21" pos:end="2609:33">cpu_ldub_code</name><argument_list pos:start="2609:34" pos:end="2609:58">(<argument pos:start="2609:35" pos:end="2609:48"><expr pos:start="2609:35" pos:end="2609:48"><name pos:start="2609:35" pos:end="2609:48">cpu_single_env</name></expr></argument>, <argument pos:start="2609:51" pos:end="2609:57"><expr pos:start="2609:51" pos:end="2609:57"><name pos:start="2609:51" pos:end="2609:55"><name pos:start="2609:51" pos:end="2609:51">s</name><operator pos:start="2609:52" pos:end="2609:53">-&gt;</operator><name pos:start="2609:54" pos:end="2609:55">pc</name></name><operator pos:start="2609:56" pos:end="2609:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2611:13" pos:end="2611:35"><expr pos:start="2611:13" pos:end="2611:34"><name pos:start="2611:13" pos:end="2611:15">mod</name> <operator pos:start="2611:17" pos:end="2611:17">=</operator> <operator pos:start="2611:19" pos:end="2611:19">(</operator><name pos:start="2611:20" pos:end="2611:24">modrm</name> <operator pos:start="2611:26" pos:end="2611:27">&gt;&gt;</operator> <literal type="number" pos:start="2611:29" pos:end="2611:29">6</literal><operator pos:start="2611:30" pos:end="2611:30">)</operator> <operator pos:start="2611:32" pos:end="2611:32">&amp;</operator> <literal type="number" pos:start="2611:34" pos:end="2611:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2613:13" pos:end="2613:34"><expr pos:start="2613:13" pos:end="2613:33"><name pos:start="2613:13" pos:end="2613:14">op</name> <operator pos:start="2613:16" pos:end="2613:16">=</operator> <operator pos:start="2613:18" pos:end="2613:18">(</operator><name pos:start="2613:19" pos:end="2613:23">modrm</name> <operator pos:start="2613:25" pos:end="2613:26">&gt;&gt;</operator> <literal type="number" pos:start="2613:28" pos:end="2613:28">3</literal><operator pos:start="2613:29" pos:end="2613:29">)</operator> <operator pos:start="2613:31" pos:end="2613:31">&amp;</operator> <literal type="number" pos:start="2613:33" pos:end="2613:33">7</literal></expr>;</expr_stmt>



            <if_stmt pos:start="2617:13" pos:end="2633:13"><if pos:start="2617:13" pos:end="2629:13">if <condition pos:start="2617:16" pos:end="2617:25">(<expr pos:start="2617:17" pos:end="2617:24"><name pos:start="2617:17" pos:end="2617:19">mod</name> <operator pos:start="2617:21" pos:end="2617:22">!=</operator> <literal type="number" pos:start="2617:24" pos:end="2617:24">3</literal></expr>)</condition> <block pos:start="2617:27" pos:end="2629:13">{<block_content pos:start="2619:17" pos:end="2627:32">

                <if_stmt pos:start="2619:17" pos:end="2623:17"><if pos:start="2619:17" pos:end="2623:17">if <condition pos:start="2619:20" pos:end="2619:31">(<expr pos:start="2619:21" pos:end="2619:30"><name pos:start="2619:21" pos:end="2619:25">shift</name> <operator pos:start="2619:27" pos:end="2619:28">==</operator> <literal type="number" pos:start="2619:30" pos:end="2619:30">2</literal></expr>)</condition> <block pos:start="2619:33" pos:end="2623:17">{<block_content pos:start="2621:21" pos:end="2621:38">

                    <expr_stmt pos:start="2621:21" pos:end="2621:38"><expr pos:start="2621:21" pos:end="2621:37"><name pos:start="2621:21" pos:end="2621:33"><name pos:start="2621:21" pos:end="2621:21">s</name><operator pos:start="2621:22" pos:end="2621:23">-&gt;</operator><name pos:start="2621:24" pos:end="2621:33">rip_offset</name></name> <operator pos:start="2621:35" pos:end="2621:35">=</operator> <literal type="number" pos:start="2621:37" pos:end="2621:37">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2625:17" pos:end="2625:65"><expr pos:start="2625:17" pos:end="2625:64"><call pos:start="2625:17" pos:end="2625:64"><name pos:start="2625:17" pos:end="2625:29">gen_lea_modrm</name><argument_list pos:start="2625:30" pos:end="2625:64">(<argument pos:start="2625:31" pos:end="2625:31"><expr pos:start="2625:31" pos:end="2625:31"><name pos:start="2625:31" pos:end="2625:31">s</name></expr></argument>, <argument pos:start="2625:34" pos:end="2625:38"><expr pos:start="2625:34" pos:end="2625:38"><name pos:start="2625:34" pos:end="2625:38">modrm</name></expr></argument>, <argument pos:start="2625:41" pos:end="2625:49"><expr pos:start="2625:41" pos:end="2625:49"><operator pos:start="2625:41" pos:end="2625:41">&amp;</operator><name pos:start="2625:42" pos:end="2625:49">reg_addr</name></expr></argument>, <argument pos:start="2625:52" pos:end="2625:63"><expr pos:start="2625:52" pos:end="2625:63"><operator pos:start="2625:52" pos:end="2625:52">&amp;</operator><name pos:start="2625:53" pos:end="2625:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2627:17" pos:end="2627:32"><expr pos:start="2627:17" pos:end="2627:31"><name pos:start="2627:17" pos:end="2627:21">opreg</name> <operator pos:start="2627:23" pos:end="2627:23">=</operator> <name pos:start="2627:25" pos:end="2627:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2629:15" pos:end="2633:13">else <block pos:start="2629:20" pos:end="2633:13">{<block_content pos:start="2631:17" pos:end="2631:47">

                <expr_stmt pos:start="2631:17" pos:end="2631:47"><expr pos:start="2631:17" pos:end="2631:46"><name pos:start="2631:17" pos:end="2631:21">opreg</name> <operator pos:start="2631:23" pos:end="2631:23">=</operator> <operator pos:start="2631:25" pos:end="2631:25">(</operator><name pos:start="2631:26" pos:end="2631:30">modrm</name> <operator pos:start="2631:32" pos:end="2631:32">&amp;</operator> <literal type="number" pos:start="2631:34" pos:end="2631:34">7</literal><operator pos:start="2631:35" pos:end="2631:35">)</operator> <operator pos:start="2631:37" pos:end="2631:37">|</operator> <call pos:start="2631:39" pos:end="2631:46"><name pos:start="2631:39" pos:end="2631:43">REX_B</name><argument_list pos:start="2631:44" pos:end="2631:46">(<argument pos:start="2631:45" pos:end="2631:45"><expr pos:start="2631:45" pos:end="2631:45"><name pos:start="2631:45" pos:end="2631:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="2637:13" pos:end="2637:28">/* simpler op */</comment>

            <if_stmt pos:start="2639:13" pos:end="2653:13"><if pos:start="2639:13" pos:end="2643:13">if <condition pos:start="2639:16" pos:end="2639:27">(<expr pos:start="2639:17" pos:end="2639:26"><name pos:start="2639:17" pos:end="2639:21">shift</name> <operator pos:start="2639:23" pos:end="2639:24">==</operator> <literal type="number" pos:start="2639:26" pos:end="2639:26">0</literal></expr>)</condition> <block pos:start="2639:29" pos:end="2643:13">{<block_content pos:start="2641:17" pos:end="2641:52">

                <expr_stmt pos:start="2641:17" pos:end="2641:52"><expr pos:start="2641:17" pos:end="2641:51"><call pos:start="2641:17" pos:end="2641:51"><name pos:start="2641:17" pos:end="2641:25">gen_shift</name><argument_list pos:start="2641:26" pos:end="2641:51">(<argument pos:start="2641:27" pos:end="2641:27"><expr pos:start="2641:27" pos:end="2641:27"><name pos:start="2641:27" pos:end="2641:27">s</name></expr></argument>, <argument pos:start="2641:30" pos:end="2641:31"><expr pos:start="2641:30" pos:end="2641:31"><name pos:start="2641:30" pos:end="2641:31">op</name></expr></argument>, <argument pos:start="2641:34" pos:end="2641:35"><expr pos:start="2641:34" pos:end="2641:35"><name pos:start="2641:34" pos:end="2641:35">ot</name></expr></argument>, <argument pos:start="2641:38" pos:end="2641:42"><expr pos:start="2641:38" pos:end="2641:42"><name pos:start="2641:38" pos:end="2641:42">opreg</name></expr></argument>, <argument pos:start="2641:45" pos:end="2641:50"><expr pos:start="2641:45" pos:end="2641:50"><name pos:start="2641:45" pos:end="2641:50">OR_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2643:15" pos:end="2653:13">else <block pos:start="2643:20" pos:end="2653:13">{<block_content pos:start="2645:17" pos:end="2651:52">

                <if_stmt pos:start="2645:17" pos:end="2649:17"><if pos:start="2645:17" pos:end="2649:17">if <condition pos:start="2645:20" pos:end="2645:31">(<expr pos:start="2645:21" pos:end="2645:30"><name pos:start="2645:21" pos:end="2645:25">shift</name> <operator pos:start="2645:27" pos:end="2645:28">==</operator> <literal type="number" pos:start="2645:30" pos:end="2645:30">2</literal></expr>)</condition> <block pos:start="2645:33" pos:end="2649:17">{<block_content pos:start="2647:21" pos:end="2647:67">

                    <expr_stmt pos:start="2647:21" pos:end="2647:67"><expr pos:start="2647:21" pos:end="2647:66"><name pos:start="2647:21" pos:end="2647:25">shift</name> <operator pos:start="2647:27" pos:end="2647:27">=</operator> <call pos:start="2647:29" pos:end="2647:66"><name pos:start="2647:29" pos:end="2647:41">cpu_ldub_code</name><argument_list pos:start="2647:42" pos:end="2647:66">(<argument pos:start="2647:43" pos:end="2647:56"><expr pos:start="2647:43" pos:end="2647:56"><name pos:start="2647:43" pos:end="2647:56">cpu_single_env</name></expr></argument>, <argument pos:start="2647:59" pos:end="2647:65"><expr pos:start="2647:59" pos:end="2647:65"><name pos:start="2647:59" pos:end="2647:63"><name pos:start="2647:59" pos:end="2647:59">s</name><operator pos:start="2647:60" pos:end="2647:61">-&gt;</operator><name pos:start="2647:62" pos:end="2647:63">pc</name></name><operator pos:start="2647:64" pos:end="2647:65">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2651:17" pos:end="2651:52"><expr pos:start="2651:17" pos:end="2651:51"><call pos:start="2651:17" pos:end="2651:51"><name pos:start="2651:17" pos:end="2651:26">gen_shifti</name><argument_list pos:start="2651:27" pos:end="2651:51">(<argument pos:start="2651:28" pos:end="2651:28"><expr pos:start="2651:28" pos:end="2651:28"><name pos:start="2651:28" pos:end="2651:28">s</name></expr></argument>, <argument pos:start="2651:31" pos:end="2651:32"><expr pos:start="2651:31" pos:end="2651:32"><name pos:start="2651:31" pos:end="2651:32">op</name></expr></argument>, <argument pos:start="2651:35" pos:end="2651:36"><expr pos:start="2651:35" pos:end="2651:36"><name pos:start="2651:35" pos:end="2651:36">ot</name></expr></argument>, <argument pos:start="2651:39" pos:end="2651:43"><expr pos:start="2651:39" pos:end="2651:43"><name pos:start="2651:39" pos:end="2651:43">opreg</name></expr></argument>, <argument pos:start="2651:46" pos:end="2651:50"><expr pos:start="2651:46" pos:end="2651:50"><name pos:start="2651:46" pos:end="2651:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2657:9" pos:end="2657:14">break;</break>

    <case pos:start="2659:5" pos:end="2659:14">case <expr pos:start="2659:10" pos:end="2659:13"><literal type="number" pos:start="2659:10" pos:end="2659:13">0xd0</literal></expr>:</case>

    <case pos:start="2661:5" pos:end="2661:14">case <expr pos:start="2661:10" pos:end="2661:13"><literal type="number" pos:start="2661:10" pos:end="2661:13">0xd1</literal></expr>:</case>

        <comment type="block" pos:start="2663:9" pos:end="2663:24">/* shift Ev,1 */</comment>

        <expr_stmt pos:start="2665:9" pos:end="2665:18"><expr pos:start="2665:9" pos:end="2665:17"><name pos:start="2665:9" pos:end="2665:13">shift</name> <operator pos:start="2665:15" pos:end="2665:15">=</operator> <literal type="number" pos:start="2665:17" pos:end="2665:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2667:9" pos:end="2667:18">goto <name pos:start="2667:14" pos:end="2667:17">grp2</name>;</goto>

    <case pos:start="2669:5" pos:end="2669:14">case <expr pos:start="2669:10" pos:end="2669:13"><literal type="number" pos:start="2669:10" pos:end="2669:13">0xd2</literal></expr>:</case>

    <case pos:start="2671:5" pos:end="2671:14">case <expr pos:start="2671:10" pos:end="2671:13"><literal type="number" pos:start="2671:10" pos:end="2671:13">0xd3</literal></expr>:</case>

        <comment type="block" pos:start="2673:9" pos:end="2673:25">/* shift Ev,cl */</comment>

        <expr_stmt pos:start="2675:9" pos:end="2675:18"><expr pos:start="2675:9" pos:end="2675:17"><name pos:start="2675:9" pos:end="2675:13">shift</name> <operator pos:start="2675:15" pos:end="2675:15">=</operator> <literal type="number" pos:start="2675:17" pos:end="2675:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="2677:9" pos:end="2677:18">goto <name pos:start="2677:14" pos:end="2677:17">grp2</name>;</goto>



    <case pos:start="2681:5" pos:end="2681:15">case <expr pos:start="2681:10" pos:end="2681:14"><literal type="number" pos:start="2681:10" pos:end="2681:14">0x1a4</literal></expr>:</case> <comment type="block" pos:start="2681:17" pos:end="2681:30">/* shld imm */</comment>

        <expr_stmt pos:start="2683:9" pos:end="2683:15"><expr pos:start="2683:9" pos:end="2683:14"><name pos:start="2683:9" pos:end="2683:10">op</name> <operator pos:start="2683:12" pos:end="2683:12">=</operator> <literal type="number" pos:start="2683:14" pos:end="2683:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2685:9" pos:end="2685:18"><expr pos:start="2685:9" pos:end="2685:17"><name pos:start="2685:9" pos:end="2685:13">shift</name> <operator pos:start="2685:15" pos:end="2685:15">=</operator> <literal type="number" pos:start="2685:17" pos:end="2685:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2687:9" pos:end="2687:23">goto <name pos:start="2687:14" pos:end="2687:22">do_shiftd</name>;</goto>

    <case pos:start="2689:5" pos:end="2689:15">case <expr pos:start="2689:10" pos:end="2689:14"><literal type="number" pos:start="2689:10" pos:end="2689:14">0x1a5</literal></expr>:</case> <comment type="block" pos:start="2689:17" pos:end="2689:29">/* shld cl */</comment>

        <expr_stmt pos:start="2691:9" pos:end="2691:15"><expr pos:start="2691:9" pos:end="2691:14"><name pos:start="2691:9" pos:end="2691:10">op</name> <operator pos:start="2691:12" pos:end="2691:12">=</operator> <literal type="number" pos:start="2691:14" pos:end="2691:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2693:9" pos:end="2693:18"><expr pos:start="2693:9" pos:end="2693:17"><name pos:start="2693:9" pos:end="2693:13">shift</name> <operator pos:start="2693:15" pos:end="2693:15">=</operator> <literal type="number" pos:start="2693:17" pos:end="2693:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="2695:9" pos:end="2695:23">goto <name pos:start="2695:14" pos:end="2695:22">do_shiftd</name>;</goto>

    <case pos:start="2697:5" pos:end="2697:15">case <expr pos:start="2697:10" pos:end="2697:14"><literal type="number" pos:start="2697:10" pos:end="2697:14">0x1ac</literal></expr>:</case> <comment type="block" pos:start="2697:17" pos:end="2697:30">/* shrd imm */</comment>

        <expr_stmt pos:start="2699:9" pos:end="2699:15"><expr pos:start="2699:9" pos:end="2699:14"><name pos:start="2699:9" pos:end="2699:10">op</name> <operator pos:start="2699:12" pos:end="2699:12">=</operator> <literal type="number" pos:start="2699:14" pos:end="2699:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2701:9" pos:end="2701:18"><expr pos:start="2701:9" pos:end="2701:17"><name pos:start="2701:9" pos:end="2701:13">shift</name> <operator pos:start="2701:15" pos:end="2701:15">=</operator> <literal type="number" pos:start="2701:17" pos:end="2701:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="2703:9" pos:end="2703:23">goto <name pos:start="2703:14" pos:end="2703:22">do_shiftd</name>;</goto>

    <case pos:start="2705:5" pos:end="2705:15">case <expr pos:start="2705:10" pos:end="2705:14"><literal type="number" pos:start="2705:10" pos:end="2705:14">0x1ad</literal></expr>:</case> <comment type="block" pos:start="2705:17" pos:end="2705:29">/* shrd cl */</comment>

        <expr_stmt pos:start="2707:9" pos:end="2707:15"><expr pos:start="2707:9" pos:end="2707:14"><name pos:start="2707:9" pos:end="2707:10">op</name> <operator pos:start="2707:12" pos:end="2707:12">=</operator> <literal type="number" pos:start="2707:14" pos:end="2707:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2709:9" pos:end="2709:18"><expr pos:start="2709:9" pos:end="2709:17"><name pos:start="2709:9" pos:end="2709:13">shift</name> <operator pos:start="2709:15" pos:end="2709:15">=</operator> <literal type="number" pos:start="2709:17" pos:end="2709:17">0</literal></expr>;</expr_stmt>

    <label pos:start="2711:5" pos:end="2711:14"><name pos:start="2711:5" pos:end="2711:13">do_shiftd</name>:</label>

        <expr_stmt pos:start="2713:9" pos:end="2713:29"><expr pos:start="2713:9" pos:end="2713:28"><name pos:start="2713:9" pos:end="2713:10">ot</name> <operator pos:start="2713:12" pos:end="2713:12">=</operator> <name pos:start="2713:14" pos:end="2713:18">dflag</name> <operator pos:start="2713:20" pos:end="2713:20">+</operator> <name pos:start="2713:22" pos:end="2713:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2715:9" pos:end="2715:55"><expr pos:start="2715:9" pos:end="2715:54"><name pos:start="2715:9" pos:end="2715:13">modrm</name> <operator pos:start="2715:15" pos:end="2715:15">=</operator> <call pos:start="2715:17" pos:end="2715:54"><name pos:start="2715:17" pos:end="2715:29">cpu_ldub_code</name><argument_list pos:start="2715:30" pos:end="2715:54">(<argument pos:start="2715:31" pos:end="2715:44"><expr pos:start="2715:31" pos:end="2715:44"><name pos:start="2715:31" pos:end="2715:44">cpu_single_env</name></expr></argument>, <argument pos:start="2715:47" pos:end="2715:53"><expr pos:start="2715:47" pos:end="2715:53"><name pos:start="2715:47" pos:end="2715:51"><name pos:start="2715:47" pos:end="2715:47">s</name><operator pos:start="2715:48" pos:end="2715:49">-&gt;</operator><name pos:start="2715:50" pos:end="2715:51">pc</name></name><operator pos:start="2715:52" pos:end="2715:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2717:9" pos:end="2717:31"><expr pos:start="2717:9" pos:end="2717:30"><name pos:start="2717:9" pos:end="2717:11">mod</name> <operator pos:start="2717:13" pos:end="2717:13">=</operator> <operator pos:start="2717:15" pos:end="2717:15">(</operator><name pos:start="2717:16" pos:end="2717:20">modrm</name> <operator pos:start="2717:22" pos:end="2717:23">&gt;&gt;</operator> <literal type="number" pos:start="2717:25" pos:end="2717:25">6</literal><operator pos:start="2717:26" pos:end="2717:26">)</operator> <operator pos:start="2717:28" pos:end="2717:28">&amp;</operator> <literal type="number" pos:start="2717:30" pos:end="2717:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2719:9" pos:end="2719:36"><expr pos:start="2719:9" pos:end="2719:35"><name pos:start="2719:9" pos:end="2719:10">rm</name> <operator pos:start="2719:12" pos:end="2719:12">=</operator> <operator pos:start="2719:14" pos:end="2719:14">(</operator><name pos:start="2719:15" pos:end="2719:19">modrm</name> <operator pos:start="2719:21" pos:end="2719:21">&amp;</operator> <literal type="number" pos:start="2719:23" pos:end="2719:23">7</literal><operator pos:start="2719:24" pos:end="2719:24">)</operator> <operator pos:start="2719:26" pos:end="2719:26">|</operator> <call pos:start="2719:28" pos:end="2719:35"><name pos:start="2719:28" pos:end="2719:32">REX_B</name><argument_list pos:start="2719:33" pos:end="2719:35">(<argument pos:start="2719:34" pos:end="2719:34"><expr pos:start="2719:34" pos:end="2719:34"><name pos:start="2719:34" pos:end="2719:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2721:9" pos:end="2721:41"><expr pos:start="2721:9" pos:end="2721:40"><name pos:start="2721:9" pos:end="2721:11">reg</name> <operator pos:start="2721:13" pos:end="2721:13">=</operator> <operator pos:start="2721:15" pos:end="2721:15">(</operator><operator pos:start="2721:16" pos:end="2721:16">(</operator><name pos:start="2721:17" pos:end="2721:21">modrm</name> <operator pos:start="2721:23" pos:end="2721:24">&gt;&gt;</operator> <literal type="number" pos:start="2721:26" pos:end="2721:26">3</literal><operator pos:start="2721:27" pos:end="2721:27">)</operator> <operator pos:start="2721:29" pos:end="2721:29">&amp;</operator> <literal type="number" pos:start="2721:31" pos:end="2721:31">7</literal><operator pos:start="2721:32" pos:end="2721:32">)</operator> <operator pos:start="2721:34" pos:end="2721:34">|</operator> <name pos:start="2721:36" pos:end="2721:40">rex_r</name></expr>;</expr_stmt>

        <if_stmt pos:start="2723:9" pos:end="2733:9"><if pos:start="2723:9" pos:end="2729:9">if <condition pos:start="2723:12" pos:end="2723:21">(<expr pos:start="2723:13" pos:end="2723:20"><name pos:start="2723:13" pos:end="2723:15">mod</name> <operator pos:start="2723:17" pos:end="2723:18">!=</operator> <literal type="number" pos:start="2723:20" pos:end="2723:20">3</literal></expr>)</condition> <block pos:start="2723:23" pos:end="2729:9">{<block_content pos:start="2725:13" pos:end="2727:28">

            <expr_stmt pos:start="2725:13" pos:end="2725:61"><expr pos:start="2725:13" pos:end="2725:60"><call pos:start="2725:13" pos:end="2725:60"><name pos:start="2725:13" pos:end="2725:25">gen_lea_modrm</name><argument_list pos:start="2725:26" pos:end="2725:60">(<argument pos:start="2725:27" pos:end="2725:27"><expr pos:start="2725:27" pos:end="2725:27"><name pos:start="2725:27" pos:end="2725:27">s</name></expr></argument>, <argument pos:start="2725:30" pos:end="2725:34"><expr pos:start="2725:30" pos:end="2725:34"><name pos:start="2725:30" pos:end="2725:34">modrm</name></expr></argument>, <argument pos:start="2725:37" pos:end="2725:45"><expr pos:start="2725:37" pos:end="2725:45"><operator pos:start="2725:37" pos:end="2725:37">&amp;</operator><name pos:start="2725:38" pos:end="2725:45">reg_addr</name></expr></argument>, <argument pos:start="2725:48" pos:end="2725:59"><expr pos:start="2725:48" pos:end="2725:59"><operator pos:start="2725:48" pos:end="2725:48">&amp;</operator><name pos:start="2725:49" pos:end="2725:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2727:13" pos:end="2727:28"><expr pos:start="2727:13" pos:end="2727:27"><name pos:start="2727:13" pos:end="2727:17">opreg</name> <operator pos:start="2727:19" pos:end="2727:19">=</operator> <name pos:start="2727:21" pos:end="2727:27">OR_TMP0</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2729:11" pos:end="2733:9">else <block pos:start="2729:16" pos:end="2733:9">{<block_content pos:start="2731:13" pos:end="2731:23">

            <expr_stmt pos:start="2731:13" pos:end="2731:23"><expr pos:start="2731:13" pos:end="2731:22"><name pos:start="2731:13" pos:end="2731:17">opreg</name> <operator pos:start="2731:19" pos:end="2731:19">=</operator> <name pos:start="2731:21" pos:end="2731:22">rm</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2735:9" pos:end="2735:38"><expr pos:start="2735:9" pos:end="2735:37"><call pos:start="2735:9" pos:end="2735:37"><name pos:start="2735:9" pos:end="2735:25">gen_op_mov_TN_reg</name><argument_list pos:start="2735:26" pos:end="2735:37">(<argument pos:start="2735:27" pos:end="2735:28"><expr pos:start="2735:27" pos:end="2735:28"><name pos:start="2735:27" pos:end="2735:28">ot</name></expr></argument>, <argument pos:start="2735:31" pos:end="2735:31"><expr pos:start="2735:31" pos:end="2735:31"><literal type="number" pos:start="2735:31" pos:end="2735:31">1</literal></expr></argument>, <argument pos:start="2735:34" pos:end="2735:36"><expr pos:start="2735:34" pos:end="2735:36"><name pos:start="2735:34" pos:end="2735:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="2739:9" pos:end="2749:9"><if pos:start="2739:9" pos:end="2745:9">if <condition pos:start="2739:12" pos:end="2739:18">(<expr pos:start="2739:13" pos:end="2739:17"><name pos:start="2739:13" pos:end="2739:17">shift</name></expr>)</condition> <block pos:start="2739:20" pos:end="2745:9">{<block_content pos:start="2741:13" pos:end="2743:41">

            <expr_stmt pos:start="2741:13" pos:end="2741:57"><expr pos:start="2741:13" pos:end="2741:56"><name pos:start="2741:13" pos:end="2741:15">val</name> <operator pos:start="2741:17" pos:end="2741:17">=</operator> <call pos:start="2741:19" pos:end="2741:56"><name pos:start="2741:19" pos:end="2741:31">cpu_ldub_code</name><argument_list pos:start="2741:32" pos:end="2741:56">(<argument pos:start="2741:33" pos:end="2741:46"><expr pos:start="2741:33" pos:end="2741:46"><name pos:start="2741:33" pos:end="2741:46">cpu_single_env</name></expr></argument>, <argument pos:start="2741:49" pos:end="2741:55"><expr pos:start="2741:49" pos:end="2741:55"><name pos:start="2741:49" pos:end="2741:53"><name pos:start="2741:49" pos:end="2741:49">s</name><operator pos:start="2741:50" pos:end="2741:51">-&gt;</operator><name pos:start="2741:52" pos:end="2741:53">pc</name></name><operator pos:start="2741:54" pos:end="2741:55">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2743:13" pos:end="2743:41"><expr pos:start="2743:13" pos:end="2743:40"><call pos:start="2743:13" pos:end="2743:40"><name pos:start="2743:13" pos:end="2743:27">tcg_gen_movi_tl</name><argument_list pos:start="2743:28" pos:end="2743:40">(<argument pos:start="2743:29" pos:end="2743:34"><expr pos:start="2743:29" pos:end="2743:34"><name pos:start="2743:29" pos:end="2743:34">cpu_T3</name></expr></argument>, <argument pos:start="2743:37" pos:end="2743:39"><expr pos:start="2743:37" pos:end="2743:39"><name pos:start="2743:37" pos:end="2743:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2745:11" pos:end="2749:9">else <block pos:start="2745:16" pos:end="2749:9">{<block_content pos:start="2747:13" pos:end="2747:52">

            <expr_stmt pos:start="2747:13" pos:end="2747:52"><expr pos:start="2747:13" pos:end="2747:51"><call pos:start="2747:13" pos:end="2747:51"><name pos:start="2747:13" pos:end="2747:26">tcg_gen_mov_tl</name><argument_list pos:start="2747:27" pos:end="2747:51">(<argument pos:start="2747:28" pos:end="2747:33"><expr pos:start="2747:28" pos:end="2747:33"><name pos:start="2747:28" pos:end="2747:33">cpu_T3</name></expr></argument>, <argument pos:start="2747:36" pos:end="2747:50"><expr pos:start="2747:36" pos:end="2747:50"><name pos:start="2747:36" pos:end="2747:50"><name pos:start="2747:36" pos:end="2747:43">cpu_regs</name><index pos:start="2747:44" pos:end="2747:50">[<expr pos:start="2747:45" pos:end="2747:49"><name pos:start="2747:45" pos:end="2747:49">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2751:9" pos:end="2751:46"><expr pos:start="2751:9" pos:end="2751:45"><call pos:start="2751:9" pos:end="2751:45"><name pos:start="2751:9" pos:end="2751:27">gen_shiftd_rm_T1_T3</name><argument_list pos:start="2751:28" pos:end="2751:45">(<argument pos:start="2751:29" pos:end="2751:29"><expr pos:start="2751:29" pos:end="2751:29"><name pos:start="2751:29" pos:end="2751:29">s</name></expr></argument>, <argument pos:start="2751:32" pos:end="2751:33"><expr pos:start="2751:32" pos:end="2751:33"><name pos:start="2751:32" pos:end="2751:33">ot</name></expr></argument>, <argument pos:start="2751:36" pos:end="2751:40"><expr pos:start="2751:36" pos:end="2751:40"><name pos:start="2751:36" pos:end="2751:40">opreg</name></expr></argument>, <argument pos:start="2751:43" pos:end="2751:44"><expr pos:start="2751:43" pos:end="2751:44"><name pos:start="2751:43" pos:end="2751:44">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2753:9" pos:end="2753:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2757:9" pos:end="2757:34">/************************/</comment>

        <comment type="block" pos:start="2759:9" pos:end="2759:20">/* floats */</comment>

    <case pos:start="2761:5" pos:end="2761:23">case <expr pos:start="2761:10" pos:end="2761:22"><literal type="number" pos:start="2761:10" pos:end="2761:13">0xd8</literal> <operator pos:start="2761:15" pos:end="2761:17">...</operator> <literal type="number" pos:start="2761:19" pos:end="2761:22">0xdf</literal></expr>:</case>

        <if_stmt pos:start="2763:9" pos:end="2773:9"><if pos:start="2763:9" pos:end="2773:9">if <condition pos:start="2763:12" pos:end="2763:49">(<expr pos:start="2763:13" pos:end="2763:48"><name pos:start="2763:13" pos:end="2763:20"><name pos:start="2763:13" pos:end="2763:13">s</name><operator pos:start="2763:14" pos:end="2763:15">-&gt;</operator><name pos:start="2763:16" pos:end="2763:20">flags</name></name> <operator pos:start="2763:22" pos:end="2763:22">&amp;</operator> <operator pos:start="2763:24" pos:end="2763:24">(</operator><name pos:start="2763:25" pos:end="2763:34">HF_EM_MASK</name> <operator pos:start="2763:36" pos:end="2763:36">|</operator> <name pos:start="2763:38" pos:end="2763:47">HF_TS_MASK</name><operator pos:start="2763:48" pos:end="2763:48">)</operator></expr>)</condition> <block pos:start="2763:51" pos:end="2773:9">{<block_content pos:start="2769:13" pos:end="2771:18">

            <comment type="block" pos:start="2765:13" pos:end="2765:72">/* if CR0.EM or CR0.TS are set, generate an FPU exception */</comment>

            <comment type="block" pos:start="2767:13" pos:end="2767:49">/* XXX: what to do if illegal op ? */</comment>

            <expr_stmt pos:start="2769:13" pos:end="2769:65"><expr pos:start="2769:13" pos:end="2769:64"><call pos:start="2769:13" pos:end="2769:64"><name pos:start="2769:13" pos:end="2769:25">gen_exception</name><argument_list pos:start="2769:26" pos:end="2769:64">(<argument pos:start="2769:27" pos:end="2769:27"><expr pos:start="2769:27" pos:end="2769:27"><name pos:start="2769:27" pos:end="2769:27">s</name></expr></argument>, <argument pos:start="2769:30" pos:end="2769:40"><expr pos:start="2769:30" pos:end="2769:40"><name pos:start="2769:30" pos:end="2769:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="2769:43" pos:end="2769:63"><expr pos:start="2769:43" pos:end="2769:63"><name pos:start="2769:43" pos:end="2769:50">pc_start</name> <operator pos:start="2769:52" pos:end="2769:52">-</operator> <name pos:start="2769:54" pos:end="2769:63"><name pos:start="2769:54" pos:end="2769:54">s</name><operator pos:start="2769:55" pos:end="2769:56">-&gt;</operator><name pos:start="2769:57" pos:end="2769:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2771:13" pos:end="2771:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2775:9" pos:end="2775:55"><expr pos:start="2775:9" pos:end="2775:54"><name pos:start="2775:9" pos:end="2775:13">modrm</name> <operator pos:start="2775:15" pos:end="2775:15">=</operator> <call pos:start="2775:17" pos:end="2775:54"><name pos:start="2775:17" pos:end="2775:29">cpu_ldub_code</name><argument_list pos:start="2775:30" pos:end="2775:54">(<argument pos:start="2775:31" pos:end="2775:44"><expr pos:start="2775:31" pos:end="2775:44"><name pos:start="2775:31" pos:end="2775:44">cpu_single_env</name></expr></argument>, <argument pos:start="2775:47" pos:end="2775:53"><expr pos:start="2775:47" pos:end="2775:53"><name pos:start="2775:47" pos:end="2775:51"><name pos:start="2775:47" pos:end="2775:47">s</name><operator pos:start="2775:48" pos:end="2775:49">-&gt;</operator><name pos:start="2775:50" pos:end="2775:51">pc</name></name><operator pos:start="2775:52" pos:end="2775:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2777:9" pos:end="2777:31"><expr pos:start="2777:9" pos:end="2777:30"><name pos:start="2777:9" pos:end="2777:11">mod</name> <operator pos:start="2777:13" pos:end="2777:13">=</operator> <operator pos:start="2777:15" pos:end="2777:15">(</operator><name pos:start="2777:16" pos:end="2777:20">modrm</name> <operator pos:start="2777:22" pos:end="2777:23">&gt;&gt;</operator> <literal type="number" pos:start="2777:25" pos:end="2777:25">6</literal><operator pos:start="2777:26" pos:end="2777:26">)</operator> <operator pos:start="2777:28" pos:end="2777:28">&amp;</operator> <literal type="number" pos:start="2777:30" pos:end="2777:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2779:9" pos:end="2779:23"><expr pos:start="2779:9" pos:end="2779:22"><name pos:start="2779:9" pos:end="2779:10">rm</name> <operator pos:start="2779:12" pos:end="2779:12">=</operator> <name pos:start="2779:14" pos:end="2779:18">modrm</name> <operator pos:start="2779:20" pos:end="2779:20">&amp;</operator> <literal type="number" pos:start="2779:22" pos:end="2779:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2781:9" pos:end="2781:49"><expr pos:start="2781:9" pos:end="2781:48"><name pos:start="2781:9" pos:end="2781:10">op</name> <operator pos:start="2781:12" pos:end="2781:12">=</operator> <operator pos:start="2781:14" pos:end="2781:14">(</operator><operator pos:start="2781:15" pos:end="2781:15">(</operator><name pos:start="2781:16" pos:end="2781:16">b</name> <operator pos:start="2781:18" pos:end="2781:18">&amp;</operator> <literal type="number" pos:start="2781:20" pos:end="2781:20">7</literal><operator pos:start="2781:21" pos:end="2781:21">)</operator> <operator pos:start="2781:23" pos:end="2781:24">&lt;&lt;</operator> <literal type="number" pos:start="2781:26" pos:end="2781:26">3</literal><operator pos:start="2781:27" pos:end="2781:27">)</operator> <operator pos:start="2781:29" pos:end="2781:29">|</operator> <operator pos:start="2781:31" pos:end="2781:31">(</operator><operator pos:start="2781:32" pos:end="2781:32">(</operator><name pos:start="2781:33" pos:end="2781:37">modrm</name> <operator pos:start="2781:39" pos:end="2781:40">&gt;&gt;</operator> <literal type="number" pos:start="2781:42" pos:end="2781:42">3</literal><operator pos:start="2781:43" pos:end="2781:43">)</operator> <operator pos:start="2781:45" pos:end="2781:45">&amp;</operator> <literal type="number" pos:start="2781:47" pos:end="2781:47">7</literal><operator pos:start="2781:48" pos:end="2781:48">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2783:9" pos:end="3791:9"><if pos:start="2783:9" pos:end="3193:9">if <condition pos:start="2783:12" pos:end="2783:21">(<expr pos:start="2783:13" pos:end="2783:20"><name pos:start="2783:13" pos:end="2783:15">mod</name> <operator pos:start="2783:17" pos:end="2783:18">!=</operator> <literal type="number" pos:start="2783:20" pos:end="2783:20">3</literal></expr>)</condition> <block pos:start="2783:23" pos:end="3193:9">{<block_content pos:start="2787:13" pos:end="3191:13">

            <comment type="block" pos:start="2785:13" pos:end="2785:27">/* memory op */</comment>

            <expr_stmt pos:start="2787:13" pos:end="2787:61"><expr pos:start="2787:13" pos:end="2787:60"><call pos:start="2787:13" pos:end="2787:60"><name pos:start="2787:13" pos:end="2787:25">gen_lea_modrm</name><argument_list pos:start="2787:26" pos:end="2787:60">(<argument pos:start="2787:27" pos:end="2787:27"><expr pos:start="2787:27" pos:end="2787:27"><name pos:start="2787:27" pos:end="2787:27">s</name></expr></argument>, <argument pos:start="2787:30" pos:end="2787:34"><expr pos:start="2787:30" pos:end="2787:34"><name pos:start="2787:30" pos:end="2787:34">modrm</name></expr></argument>, <argument pos:start="2787:37" pos:end="2787:45"><expr pos:start="2787:37" pos:end="2787:45"><operator pos:start="2787:37" pos:end="2787:37">&amp;</operator><name pos:start="2787:38" pos:end="2787:45">reg_addr</name></expr></argument>, <argument pos:start="2787:48" pos:end="2787:59"><expr pos:start="2787:48" pos:end="2787:59"><operator pos:start="2787:48" pos:end="2787:48">&amp;</operator><name pos:start="2787:49" pos:end="2787:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2789:13" pos:end="3191:13">switch<condition pos:start="2789:19" pos:end="2789:22">(<expr pos:start="2789:20" pos:end="2789:21"><name pos:start="2789:20" pos:end="2789:21">op</name></expr>)</condition> <block pos:start="2789:24" pos:end="3191:13">{<block_content pos:start="2791:13" pos:end="3189:32">

            <case pos:start="2791:13" pos:end="2791:31">case <expr pos:start="2791:18" pos:end="2791:30"><literal type="number" pos:start="2791:18" pos:end="2791:21">0x00</literal> <operator pos:start="2791:23" pos:end="2791:25">...</operator> <literal type="number" pos:start="2791:27" pos:end="2791:30">0x07</literal></expr>:</case> <comment type="block" pos:start="2791:33" pos:end="2791:43">/* fxxxs */</comment>

            <case pos:start="2793:13" pos:end="2793:31">case <expr pos:start="2793:18" pos:end="2793:30"><literal type="number" pos:start="2793:18" pos:end="2793:21">0x10</literal> <operator pos:start="2793:23" pos:end="2793:25">...</operator> <literal type="number" pos:start="2793:27" pos:end="2793:30">0x17</literal></expr>:</case> <comment type="block" pos:start="2793:33" pos:end="2793:44">/* fixxxl */</comment>

            <case pos:start="2795:13" pos:end="2795:31">case <expr pos:start="2795:18" pos:end="2795:30"><literal type="number" pos:start="2795:18" pos:end="2795:21">0x20</literal> <operator pos:start="2795:23" pos:end="2795:25">...</operator> <literal type="number" pos:start="2795:27" pos:end="2795:30">0x27</literal></expr>:</case> <comment type="block" pos:start="2795:33" pos:end="2795:43">/* fxxxl */</comment>

            <case pos:start="2797:13" pos:end="2797:31">case <expr pos:start="2797:18" pos:end="2797:30"><literal type="number" pos:start="2797:18" pos:end="2797:21">0x30</literal> <operator pos:start="2797:23" pos:end="2797:25">...</operator> <literal type="number" pos:start="2797:27" pos:end="2797:30">0x37</literal></expr>:</case> <comment type="block" pos:start="2797:33" pos:end="2797:43">/* fixxx */</comment>

                <block pos:start="2799:17" pos:end="2865:17">{<block_content pos:start="2801:21" pos:end="2863:21">

                    <decl_stmt pos:start="2801:21" pos:end="2801:28"><decl pos:start="2801:21" pos:end="2801:27"><type pos:start="2801:21" pos:end="2801:23"><name pos:start="2801:21" pos:end="2801:23">int</name></type> <name pos:start="2801:25" pos:end="2801:27">op1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="2803:21" pos:end="2803:33"><expr pos:start="2803:21" pos:end="2803:32"><name pos:start="2803:21" pos:end="2803:23">op1</name> <operator pos:start="2803:25" pos:end="2803:25">=</operator> <name pos:start="2803:27" pos:end="2803:28">op</name> <operator pos:start="2803:30" pos:end="2803:30">&amp;</operator> <literal type="number" pos:start="2803:32" pos:end="2803:32">7</literal></expr>;</expr_stmt>



                    <switch pos:start="2807:21" pos:end="2851:21">switch<condition pos:start="2807:27" pos:end="2807:35">(<expr pos:start="2807:28" pos:end="2807:34"><name pos:start="2807:28" pos:end="2807:29">op</name> <operator pos:start="2807:31" pos:end="2807:32">&gt;&gt;</operator> <literal type="number" pos:start="2807:34" pos:end="2807:34">4</literal></expr>)</condition> <block pos:start="2807:37" pos:end="2851:21">{<block_content pos:start="2809:21" pos:end="2849:30">

                    <case pos:start="2809:21" pos:end="2809:27">case <expr pos:start="2809:26" pos:end="2809:26"><literal type="number" pos:start="2809:26" pos:end="2809:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2811:25" pos:end="2811:64"><expr pos:start="2811:25" pos:end="2811:63"><call pos:start="2811:25" pos:end="2811:63"><name pos:start="2811:25" pos:end="2811:39">gen_op_ld_T0_A0</name><argument_list pos:start="2811:40" pos:end="2811:63">(<argument pos:start="2811:41" pos:end="2811:62"><expr pos:start="2811:41" pos:end="2811:62"><name pos:start="2811:41" pos:end="2811:47">OT_LONG</name> <operator pos:start="2811:49" pos:end="2811:49">+</operator> <name pos:start="2811:51" pos:end="2811:62"><name pos:start="2811:51" pos:end="2811:51">s</name><operator pos:start="2811:52" pos:end="2811:53">-&gt;</operator><name pos:start="2811:54" pos:end="2811:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2813:25" pos:end="2813:69"><expr pos:start="2813:25" pos:end="2813:68"><call pos:start="2813:25" pos:end="2813:68"><name pos:start="2813:25" pos:end="2813:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2813:45" pos:end="2813:68">(<argument pos:start="2813:46" pos:end="2813:57"><expr pos:start="2813:46" pos:end="2813:57"><name pos:start="2813:46" pos:end="2813:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2813:60" pos:end="2813:67"><expr pos:start="2813:60" pos:end="2813:67"><name pos:start="2813:60" pos:end="2813:67"><name pos:start="2813:60" pos:end="2813:64">cpu_T</name><index pos:start="2813:65" pos:end="2813:67">[<expr pos:start="2813:66" pos:end="2813:66"><literal type="number" pos:start="2813:66" pos:end="2813:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2815:25" pos:end="2815:67"><expr pos:start="2815:25" pos:end="2815:66"><call pos:start="2815:25" pos:end="2815:66"><name pos:start="2815:25" pos:end="2815:43">gen_helper_flds_FT0</name><argument_list pos:start="2815:44" pos:end="2815:66">(<argument pos:start="2815:45" pos:end="2815:51"><expr pos:start="2815:45" pos:end="2815:51"><name pos:start="2815:45" pos:end="2815:51">cpu_env</name></expr></argument>, <argument pos:start="2815:54" pos:end="2815:65"><expr pos:start="2815:54" pos:end="2815:65"><name pos:start="2815:54" pos:end="2815:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2817:25" pos:end="2817:30">break;</break>

                    <case pos:start="2819:21" pos:end="2819:27">case <expr pos:start="2819:26" pos:end="2819:26"><literal type="number" pos:start="2819:26" pos:end="2819:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2821:25" pos:end="2821:64"><expr pos:start="2821:25" pos:end="2821:63"><call pos:start="2821:25" pos:end="2821:63"><name pos:start="2821:25" pos:end="2821:39">gen_op_ld_T0_A0</name><argument_list pos:start="2821:40" pos:end="2821:63">(<argument pos:start="2821:41" pos:end="2821:62"><expr pos:start="2821:41" pos:end="2821:62"><name pos:start="2821:41" pos:end="2821:47">OT_LONG</name> <operator pos:start="2821:49" pos:end="2821:49">+</operator> <name pos:start="2821:51" pos:end="2821:62"><name pos:start="2821:51" pos:end="2821:51">s</name><operator pos:start="2821:52" pos:end="2821:53">-&gt;</operator><name pos:start="2821:54" pos:end="2821:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2823:25" pos:end="2823:69"><expr pos:start="2823:25" pos:end="2823:68"><call pos:start="2823:25" pos:end="2823:68"><name pos:start="2823:25" pos:end="2823:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2823:45" pos:end="2823:68">(<argument pos:start="2823:46" pos:end="2823:57"><expr pos:start="2823:46" pos:end="2823:57"><name pos:start="2823:46" pos:end="2823:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2823:60" pos:end="2823:67"><expr pos:start="2823:60" pos:end="2823:67"><name pos:start="2823:60" pos:end="2823:67"><name pos:start="2823:60" pos:end="2823:64">cpu_T</name><index pos:start="2823:65" pos:end="2823:67">[<expr pos:start="2823:66" pos:end="2823:66"><literal type="number" pos:start="2823:66" pos:end="2823:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2825:25" pos:end="2825:68"><expr pos:start="2825:25" pos:end="2825:67"><call pos:start="2825:25" pos:end="2825:67"><name pos:start="2825:25" pos:end="2825:44">gen_helper_fildl_FT0</name><argument_list pos:start="2825:45" pos:end="2825:67">(<argument pos:start="2825:46" pos:end="2825:52"><expr pos:start="2825:46" pos:end="2825:52"><name pos:start="2825:46" pos:end="2825:52">cpu_env</name></expr></argument>, <argument pos:start="2825:55" pos:end="2825:66"><expr pos:start="2825:55" pos:end="2825:66"><name pos:start="2825:55" pos:end="2825:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2827:25" pos:end="2827:30">break;</break>

                    <case pos:start="2829:21" pos:end="2829:27">case <expr pos:start="2829:26" pos:end="2829:26"><literal type="number" pos:start="2829:26" pos:end="2829:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2831:25" pos:end="2833:67"><expr pos:start="2831:25" pos:end="2833:66"><call pos:start="2831:25" pos:end="2833:66"><name pos:start="2831:25" pos:end="2831:41">tcg_gen_qemu_ld64</name><argument_list pos:start="2831:42" pos:end="2833:66">(<argument pos:start="2831:43" pos:end="2831:54"><expr pos:start="2831:43" pos:end="2831:54"><name pos:start="2831:43" pos:end="2831:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2831:57" pos:end="2831:62"><expr pos:start="2831:57" pos:end="2831:62"><name pos:start="2831:57" pos:end="2831:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2833:43" pos:end="2833:65"><expr pos:start="2833:43" pos:end="2833:65"><operator pos:start="2833:43" pos:end="2833:43">(</operator><name pos:start="2833:44" pos:end="2833:55"><name pos:start="2833:44" pos:end="2833:44">s</name><operator pos:start="2833:45" pos:end="2833:46">-&gt;</operator><name pos:start="2833:47" pos:end="2833:55">mem_index</name></name> <operator pos:start="2833:57" pos:end="2833:58">&gt;&gt;</operator> <literal type="number" pos:start="2833:60" pos:end="2833:60">2</literal><operator pos:start="2833:61" pos:end="2833:61">)</operator> <operator pos:start="2833:63" pos:end="2833:63">-</operator> <literal type="number" pos:start="2833:65" pos:end="2833:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2835:25" pos:end="2835:67"><expr pos:start="2835:25" pos:end="2835:66"><call pos:start="2835:25" pos:end="2835:66"><name pos:start="2835:25" pos:end="2835:43">gen_helper_fldl_FT0</name><argument_list pos:start="2835:44" pos:end="2835:66">(<argument pos:start="2835:45" pos:end="2835:51"><expr pos:start="2835:45" pos:end="2835:51"><name pos:start="2835:45" pos:end="2835:51">cpu_env</name></expr></argument>, <argument pos:start="2835:54" pos:end="2835:65"><expr pos:start="2835:54" pos:end="2835:65"><name pos:start="2835:54" pos:end="2835:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2837:25" pos:end="2837:30">break;</break>

                    <case pos:start="2839:21" pos:end="2839:27">case <expr pos:start="2839:26" pos:end="2839:26"><literal type="number" pos:start="2839:26" pos:end="2839:26">3</literal></expr>:</case>

                    <default pos:start="2841:21" pos:end="2841:28">default:</default>

                        <expr_stmt pos:start="2843:25" pos:end="2843:65"><expr pos:start="2843:25" pos:end="2843:64"><call pos:start="2843:25" pos:end="2843:64"><name pos:start="2843:25" pos:end="2843:40">gen_op_lds_T0_A0</name><argument_list pos:start="2843:41" pos:end="2843:64">(<argument pos:start="2843:42" pos:end="2843:63"><expr pos:start="2843:42" pos:end="2843:63"><name pos:start="2843:42" pos:end="2843:48">OT_WORD</name> <operator pos:start="2843:50" pos:end="2843:50">+</operator> <name pos:start="2843:52" pos:end="2843:63"><name pos:start="2843:52" pos:end="2843:52">s</name><operator pos:start="2843:53" pos:end="2843:54">-&gt;</operator><name pos:start="2843:55" pos:end="2843:63">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2845:25" pos:end="2845:69"><expr pos:start="2845:25" pos:end="2845:68"><call pos:start="2845:25" pos:end="2845:68"><name pos:start="2845:25" pos:end="2845:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2845:45" pos:end="2845:68">(<argument pos:start="2845:46" pos:end="2845:57"><expr pos:start="2845:46" pos:end="2845:57"><name pos:start="2845:46" pos:end="2845:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2845:60" pos:end="2845:67"><expr pos:start="2845:60" pos:end="2845:67"><name pos:start="2845:60" pos:end="2845:67"><name pos:start="2845:60" pos:end="2845:64">cpu_T</name><index pos:start="2845:65" pos:end="2845:67">[<expr pos:start="2845:66" pos:end="2845:66"><literal type="number" pos:start="2845:66" pos:end="2845:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2847:25" pos:end="2847:68"><expr pos:start="2847:25" pos:end="2847:67"><call pos:start="2847:25" pos:end="2847:67"><name pos:start="2847:25" pos:end="2847:44">gen_helper_fildl_FT0</name><argument_list pos:start="2847:45" pos:end="2847:67">(<argument pos:start="2847:46" pos:end="2847:52"><expr pos:start="2847:46" pos:end="2847:52"><name pos:start="2847:46" pos:end="2847:52">cpu_env</name></expr></argument>, <argument pos:start="2847:55" pos:end="2847:66"><expr pos:start="2847:55" pos:end="2847:66"><name pos:start="2847:55" pos:end="2847:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2849:25" pos:end="2849:30">break;</break>

                    </block_content>}</block></switch>



                    <expr_stmt pos:start="2855:21" pos:end="2855:53"><expr pos:start="2855:21" pos:end="2855:52"><call pos:start="2855:21" pos:end="2855:52"><name pos:start="2855:21" pos:end="2855:47">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="2855:48" pos:end="2855:52">(<argument pos:start="2855:49" pos:end="2855:51"><expr pos:start="2855:49" pos:end="2855:51"><name pos:start="2855:49" pos:end="2855:51">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2857:21" pos:end="2863:21"><if pos:start="2857:21" pos:end="2863:21">if <condition pos:start="2857:24" pos:end="2857:33">(<expr pos:start="2857:25" pos:end="2857:32"><name pos:start="2857:25" pos:end="2857:27">op1</name> <operator pos:start="2857:29" pos:end="2857:30">==</operator> <literal type="number" pos:start="2857:32" pos:end="2857:32">3</literal></expr>)</condition> <block pos:start="2857:35" pos:end="2863:21">{<block_content pos:start="2861:25" pos:end="2861:49">

                        <comment type="block" pos:start="2859:25" pos:end="2859:45">/* fcomp needs pop */</comment>

                        <expr_stmt pos:start="2861:25" pos:end="2861:49"><expr pos:start="2861:25" pos:end="2861:48"><call pos:start="2861:25" pos:end="2861:48"><name pos:start="2861:25" pos:end="2861:39">gen_helper_fpop</name><argument_list pos:start="2861:40" pos:end="2861:48">(<argument pos:start="2861:41" pos:end="2861:47"><expr pos:start="2861:41" pos:end="2861:47"><name pos:start="2861:41" pos:end="2861:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="2867:17" pos:end="2867:22">break;</break>

            <case pos:start="2869:13" pos:end="2869:22">case <expr pos:start="2869:18" pos:end="2869:21"><literal type="number" pos:start="2869:18" pos:end="2869:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2869:24" pos:end="2869:33">/* flds */</comment>

            <case pos:start="2871:13" pos:end="2871:22">case <expr pos:start="2871:18" pos:end="2871:21"><literal type="number" pos:start="2871:18" pos:end="2871:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2871:24" pos:end="2871:33">/* fsts */</comment>

            <case pos:start="2873:13" pos:end="2873:22">case <expr pos:start="2873:18" pos:end="2873:21"><literal type="number" pos:start="2873:18" pos:end="2873:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="2873:24" pos:end="2873:34">/* fstps */</comment>

            <case pos:start="2875:13" pos:end="2875:31">case <expr pos:start="2875:18" pos:end="2875:30"><literal type="number" pos:start="2875:18" pos:end="2875:21">0x18</literal> <operator pos:start="2875:23" pos:end="2875:25">...</operator> <literal type="number" pos:start="2875:27" pos:end="2875:30">0x1b</literal></expr>:</case> <comment type="block" pos:start="2875:33" pos:end="2875:67">/* fildl, fisttpl, fistl, fistpl */</comment>

            <case pos:start="2877:13" pos:end="2877:31">case <expr pos:start="2877:18" pos:end="2877:30"><literal type="number" pos:start="2877:18" pos:end="2877:21">0x28</literal> <operator pos:start="2877:23" pos:end="2877:25">...</operator> <literal type="number" pos:start="2877:27" pos:end="2877:30">0x2b</literal></expr>:</case> <comment type="block" pos:start="2877:33" pos:end="2877:65">/* fldl, fisttpll, fstl, fstpl */</comment>

            <case pos:start="2879:13" pos:end="2879:31">case <expr pos:start="2879:18" pos:end="2879:30"><literal type="number" pos:start="2879:18" pos:end="2879:21">0x38</literal> <operator pos:start="2879:23" pos:end="2879:25">...</operator> <literal type="number" pos:start="2879:27" pos:end="2879:30">0x3b</literal></expr>:</case> <comment type="block" pos:start="2879:33" pos:end="2879:67">/* filds, fisttps, fists, fistps */</comment>

                <switch pos:start="2881:17" pos:end="3031:17">switch<condition pos:start="2881:23" pos:end="2881:30">(<expr pos:start="2881:24" pos:end="2881:29"><name pos:start="2881:24" pos:end="2881:25">op</name> <operator pos:start="2881:27" pos:end="2881:27">&amp;</operator> <literal type="number" pos:start="2881:29" pos:end="2881:29">7</literal></expr>)</condition> <block pos:start="2881:32" pos:end="3031:17">{<block_content pos:start="2883:17" pos:end="3029:26">

                <case pos:start="2883:17" pos:end="2883:23">case <expr pos:start="2883:22" pos:end="2883:22"><literal type="number" pos:start="2883:22" pos:end="2883:22">0</literal></expr>:</case>

                    <switch pos:start="2885:21" pos:end="2929:21">switch<condition pos:start="2885:27" pos:end="2885:35">(<expr pos:start="2885:28" pos:end="2885:34"><name pos:start="2885:28" pos:end="2885:29">op</name> <operator pos:start="2885:31" pos:end="2885:32">&gt;&gt;</operator> <literal type="number" pos:start="2885:34" pos:end="2885:34">4</literal></expr>)</condition> <block pos:start="2885:37" pos:end="2929:21">{<block_content pos:start="2887:21" pos:end="2927:30">

                    <case pos:start="2887:21" pos:end="2887:27">case <expr pos:start="2887:26" pos:end="2887:26"><literal type="number" pos:start="2887:26" pos:end="2887:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2889:25" pos:end="2889:64"><expr pos:start="2889:25" pos:end="2889:63"><call pos:start="2889:25" pos:end="2889:63"><name pos:start="2889:25" pos:end="2889:39">gen_op_ld_T0_A0</name><argument_list pos:start="2889:40" pos:end="2889:63">(<argument pos:start="2889:41" pos:end="2889:62"><expr pos:start="2889:41" pos:end="2889:62"><name pos:start="2889:41" pos:end="2889:47">OT_LONG</name> <operator pos:start="2889:49" pos:end="2889:49">+</operator> <name pos:start="2889:51" pos:end="2889:62"><name pos:start="2889:51" pos:end="2889:51">s</name><operator pos:start="2889:52" pos:end="2889:53">-&gt;</operator><name pos:start="2889:54" pos:end="2889:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2891:25" pos:end="2891:69"><expr pos:start="2891:25" pos:end="2891:68"><call pos:start="2891:25" pos:end="2891:68"><name pos:start="2891:25" pos:end="2891:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2891:45" pos:end="2891:68">(<argument pos:start="2891:46" pos:end="2891:57"><expr pos:start="2891:46" pos:end="2891:57"><name pos:start="2891:46" pos:end="2891:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2891:60" pos:end="2891:67"><expr pos:start="2891:60" pos:end="2891:67"><name pos:start="2891:60" pos:end="2891:67"><name pos:start="2891:60" pos:end="2891:64">cpu_T</name><index pos:start="2891:65" pos:end="2891:67">[<expr pos:start="2891:66" pos:end="2891:66"><literal type="number" pos:start="2891:66" pos:end="2891:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2893:25" pos:end="2893:67"><expr pos:start="2893:25" pos:end="2893:66"><call pos:start="2893:25" pos:end="2893:66"><name pos:start="2893:25" pos:end="2893:43">gen_helper_flds_ST0</name><argument_list pos:start="2893:44" pos:end="2893:66">(<argument pos:start="2893:45" pos:end="2893:51"><expr pos:start="2893:45" pos:end="2893:51"><name pos:start="2893:45" pos:end="2893:51">cpu_env</name></expr></argument>, <argument pos:start="2893:54" pos:end="2893:65"><expr pos:start="2893:54" pos:end="2893:65"><name pos:start="2893:54" pos:end="2893:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2895:25" pos:end="2895:30">break;</break>

                    <case pos:start="2897:21" pos:end="2897:27">case <expr pos:start="2897:26" pos:end="2897:26"><literal type="number" pos:start="2897:26" pos:end="2897:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2899:25" pos:end="2899:64"><expr pos:start="2899:25" pos:end="2899:63"><call pos:start="2899:25" pos:end="2899:63"><name pos:start="2899:25" pos:end="2899:39">gen_op_ld_T0_A0</name><argument_list pos:start="2899:40" pos:end="2899:63">(<argument pos:start="2899:41" pos:end="2899:62"><expr pos:start="2899:41" pos:end="2899:62"><name pos:start="2899:41" pos:end="2899:47">OT_LONG</name> <operator pos:start="2899:49" pos:end="2899:49">+</operator> <name pos:start="2899:51" pos:end="2899:62"><name pos:start="2899:51" pos:end="2899:51">s</name><operator pos:start="2899:52" pos:end="2899:53">-&gt;</operator><name pos:start="2899:54" pos:end="2899:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2901:25" pos:end="2901:69"><expr pos:start="2901:25" pos:end="2901:68"><call pos:start="2901:25" pos:end="2901:68"><name pos:start="2901:25" pos:end="2901:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2901:45" pos:end="2901:68">(<argument pos:start="2901:46" pos:end="2901:57"><expr pos:start="2901:46" pos:end="2901:57"><name pos:start="2901:46" pos:end="2901:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2901:60" pos:end="2901:67"><expr pos:start="2901:60" pos:end="2901:67"><name pos:start="2901:60" pos:end="2901:67"><name pos:start="2901:60" pos:end="2901:64">cpu_T</name><index pos:start="2901:65" pos:end="2901:67">[<expr pos:start="2901:66" pos:end="2901:66"><literal type="number" pos:start="2901:66" pos:end="2901:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2903:25" pos:end="2903:68"><expr pos:start="2903:25" pos:end="2903:67"><call pos:start="2903:25" pos:end="2903:67"><name pos:start="2903:25" pos:end="2903:44">gen_helper_fildl_ST0</name><argument_list pos:start="2903:45" pos:end="2903:67">(<argument pos:start="2903:46" pos:end="2903:52"><expr pos:start="2903:46" pos:end="2903:52"><name pos:start="2903:46" pos:end="2903:52">cpu_env</name></expr></argument>, <argument pos:start="2903:55" pos:end="2903:66"><expr pos:start="2903:55" pos:end="2903:66"><name pos:start="2903:55" pos:end="2903:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2905:25" pos:end="2905:30">break;</break>

                    <case pos:start="2907:21" pos:end="2907:27">case <expr pos:start="2907:26" pos:end="2907:26"><literal type="number" pos:start="2907:26" pos:end="2907:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2909:25" pos:end="2911:67"><expr pos:start="2909:25" pos:end="2911:66"><call pos:start="2909:25" pos:end="2911:66"><name pos:start="2909:25" pos:end="2909:41">tcg_gen_qemu_ld64</name><argument_list pos:start="2909:42" pos:end="2911:66">(<argument pos:start="2909:43" pos:end="2909:54"><expr pos:start="2909:43" pos:end="2909:54"><name pos:start="2909:43" pos:end="2909:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2909:57" pos:end="2909:62"><expr pos:start="2909:57" pos:end="2909:62"><name pos:start="2909:57" pos:end="2909:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2911:43" pos:end="2911:65"><expr pos:start="2911:43" pos:end="2911:65"><operator pos:start="2911:43" pos:end="2911:43">(</operator><name pos:start="2911:44" pos:end="2911:55"><name pos:start="2911:44" pos:end="2911:44">s</name><operator pos:start="2911:45" pos:end="2911:46">-&gt;</operator><name pos:start="2911:47" pos:end="2911:55">mem_index</name></name> <operator pos:start="2911:57" pos:end="2911:58">&gt;&gt;</operator> <literal type="number" pos:start="2911:60" pos:end="2911:60">2</literal><operator pos:start="2911:61" pos:end="2911:61">)</operator> <operator pos:start="2911:63" pos:end="2911:63">-</operator> <literal type="number" pos:start="2911:65" pos:end="2911:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2913:25" pos:end="2913:67"><expr pos:start="2913:25" pos:end="2913:66"><call pos:start="2913:25" pos:end="2913:66"><name pos:start="2913:25" pos:end="2913:43">gen_helper_fldl_ST0</name><argument_list pos:start="2913:44" pos:end="2913:66">(<argument pos:start="2913:45" pos:end="2913:51"><expr pos:start="2913:45" pos:end="2913:51"><name pos:start="2913:45" pos:end="2913:51">cpu_env</name></expr></argument>, <argument pos:start="2913:54" pos:end="2913:65"><expr pos:start="2913:54" pos:end="2913:65"><name pos:start="2913:54" pos:end="2913:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2915:25" pos:end="2915:30">break;</break>

                    <case pos:start="2917:21" pos:end="2917:27">case <expr pos:start="2917:26" pos:end="2917:26"><literal type="number" pos:start="2917:26" pos:end="2917:26">3</literal></expr>:</case>

                    <default pos:start="2919:21" pos:end="2919:28">default:</default>

                        <expr_stmt pos:start="2921:25" pos:end="2921:65"><expr pos:start="2921:25" pos:end="2921:64"><call pos:start="2921:25" pos:end="2921:64"><name pos:start="2921:25" pos:end="2921:40">gen_op_lds_T0_A0</name><argument_list pos:start="2921:41" pos:end="2921:64">(<argument pos:start="2921:42" pos:end="2921:63"><expr pos:start="2921:42" pos:end="2921:63"><name pos:start="2921:42" pos:end="2921:48">OT_WORD</name> <operator pos:start="2921:50" pos:end="2921:50">+</operator> <name pos:start="2921:52" pos:end="2921:63"><name pos:start="2921:52" pos:end="2921:52">s</name><operator pos:start="2921:53" pos:end="2921:54">-&gt;</operator><name pos:start="2921:55" pos:end="2921:63">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2923:25" pos:end="2923:69"><expr pos:start="2923:25" pos:end="2923:68"><call pos:start="2923:25" pos:end="2923:68"><name pos:start="2923:25" pos:end="2923:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2923:45" pos:end="2923:68">(<argument pos:start="2923:46" pos:end="2923:57"><expr pos:start="2923:46" pos:end="2923:57"><name pos:start="2923:46" pos:end="2923:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2923:60" pos:end="2923:67"><expr pos:start="2923:60" pos:end="2923:67"><name pos:start="2923:60" pos:end="2923:67"><name pos:start="2923:60" pos:end="2923:64">cpu_T</name><index pos:start="2923:65" pos:end="2923:67">[<expr pos:start="2923:66" pos:end="2923:66"><literal type="number" pos:start="2923:66" pos:end="2923:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2925:25" pos:end="2925:68"><expr pos:start="2925:25" pos:end="2925:67"><call pos:start="2925:25" pos:end="2925:67"><name pos:start="2925:25" pos:end="2925:44">gen_helper_fildl_ST0</name><argument_list pos:start="2925:45" pos:end="2925:67">(<argument pos:start="2925:46" pos:end="2925:52"><expr pos:start="2925:46" pos:end="2925:52"><name pos:start="2925:46" pos:end="2925:52">cpu_env</name></expr></argument>, <argument pos:start="2925:55" pos:end="2925:66"><expr pos:start="2925:55" pos:end="2925:66"><name pos:start="2925:55" pos:end="2925:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2927:25" pos:end="2927:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="2931:21" pos:end="2931:26">break;</break>

                <case pos:start="2933:17" pos:end="2933:23">case <expr pos:start="2933:22" pos:end="2933:22"><literal type="number" pos:start="2933:22" pos:end="2933:22">1</literal></expr>:</case>

                    <comment type="block" pos:start="2935:21" pos:end="2935:75">/* XXX: the corresponding CPUID bit must be tested ! */</comment>

                    <switch pos:start="2937:21" pos:end="2971:21">switch<condition pos:start="2937:27" pos:end="2937:35">(<expr pos:start="2937:28" pos:end="2937:34"><name pos:start="2937:28" pos:end="2937:29">op</name> <operator pos:start="2937:31" pos:end="2937:32">&gt;&gt;</operator> <literal type="number" pos:start="2937:34" pos:end="2937:34">4</literal></expr>)</condition> <block pos:start="2937:37" pos:end="2971:21">{<block_content pos:start="2939:21" pos:end="2969:30">

                    <case pos:start="2939:21" pos:end="2939:27">case <expr pos:start="2939:26" pos:end="2939:26"><literal type="number" pos:start="2939:26" pos:end="2939:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2941:25" pos:end="2941:69"><expr pos:start="2941:25" pos:end="2941:68"><call pos:start="2941:25" pos:end="2941:68"><name pos:start="2941:25" pos:end="2941:45">gen_helper_fisttl_ST0</name><argument_list pos:start="2941:46" pos:end="2941:68">(<argument pos:start="2941:47" pos:end="2941:58"><expr pos:start="2941:47" pos:end="2941:58"><name pos:start="2941:47" pos:end="2941:58">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2941:61" pos:end="2941:67"><expr pos:start="2941:61" pos:end="2941:67"><name pos:start="2941:61" pos:end="2941:67">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2943:25" pos:end="2943:68"><expr pos:start="2943:25" pos:end="2943:67"><call pos:start="2943:25" pos:end="2943:67"><name pos:start="2943:25" pos:end="2943:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2943:44" pos:end="2943:67">(<argument pos:start="2943:45" pos:end="2943:52"><expr pos:start="2943:45" pos:end="2943:52"><name pos:start="2943:45" pos:end="2943:52"><name pos:start="2943:45" pos:end="2943:49">cpu_T</name><index pos:start="2943:50" pos:end="2943:52">[<expr pos:start="2943:51" pos:end="2943:51"><literal type="number" pos:start="2943:51" pos:end="2943:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2943:55" pos:end="2943:66"><expr pos:start="2943:55" pos:end="2943:66"><name pos:start="2943:55" pos:end="2943:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2945:25" pos:end="2945:64"><expr pos:start="2945:25" pos:end="2945:63"><call pos:start="2945:25" pos:end="2945:63"><name pos:start="2945:25" pos:end="2945:39">gen_op_st_T0_A0</name><argument_list pos:start="2945:40" pos:end="2945:63">(<argument pos:start="2945:41" pos:end="2945:62"><expr pos:start="2945:41" pos:end="2945:62"><name pos:start="2945:41" pos:end="2945:47">OT_LONG</name> <operator pos:start="2945:49" pos:end="2945:49">+</operator> <name pos:start="2945:51" pos:end="2945:62"><name pos:start="2945:51" pos:end="2945:51">s</name><operator pos:start="2945:52" pos:end="2945:53">-&gt;</operator><name pos:start="2945:54" pos:end="2945:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2947:25" pos:end="2947:30">break;</break>

                    <case pos:start="2949:21" pos:end="2949:27">case <expr pos:start="2949:26" pos:end="2949:26"><literal type="number" pos:start="2949:26" pos:end="2949:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2951:25" pos:end="2951:70"><expr pos:start="2951:25" pos:end="2951:69"><call pos:start="2951:25" pos:end="2951:69"><name pos:start="2951:25" pos:end="2951:46">gen_helper_fisttll_ST0</name><argument_list pos:start="2951:47" pos:end="2951:69">(<argument pos:start="2951:48" pos:end="2951:59"><expr pos:start="2951:48" pos:end="2951:59"><name pos:start="2951:48" pos:end="2951:59">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2951:62" pos:end="2951:68"><expr pos:start="2951:62" pos:end="2951:68"><name pos:start="2951:62" pos:end="2951:68">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2953:25" pos:end="2955:67"><expr pos:start="2953:25" pos:end="2955:66"><call pos:start="2953:25" pos:end="2955:66"><name pos:start="2953:25" pos:end="2953:41">tcg_gen_qemu_st64</name><argument_list pos:start="2953:42" pos:end="2955:66">(<argument pos:start="2953:43" pos:end="2953:54"><expr pos:start="2953:43" pos:end="2953:54"><name pos:start="2953:43" pos:end="2953:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2953:57" pos:end="2953:62"><expr pos:start="2953:57" pos:end="2953:62"><name pos:start="2953:57" pos:end="2953:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="2955:43" pos:end="2955:65"><expr pos:start="2955:43" pos:end="2955:65"><operator pos:start="2955:43" pos:end="2955:43">(</operator><name pos:start="2955:44" pos:end="2955:55"><name pos:start="2955:44" pos:end="2955:44">s</name><operator pos:start="2955:45" pos:end="2955:46">-&gt;</operator><name pos:start="2955:47" pos:end="2955:55">mem_index</name></name> <operator pos:start="2955:57" pos:end="2955:58">&gt;&gt;</operator> <literal type="number" pos:start="2955:60" pos:end="2955:60">2</literal><operator pos:start="2955:61" pos:end="2955:61">)</operator> <operator pos:start="2955:63" pos:end="2955:63">-</operator> <literal type="number" pos:start="2955:65" pos:end="2955:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2957:25" pos:end="2957:30">break;</break>

                    <case pos:start="2959:21" pos:end="2959:27">case <expr pos:start="2959:26" pos:end="2959:26"><literal type="number" pos:start="2959:26" pos:end="2959:26">3</literal></expr>:</case>

                    <default pos:start="2961:21" pos:end="2961:28">default:</default>

                        <expr_stmt pos:start="2963:25" pos:end="2963:68"><expr pos:start="2963:25" pos:end="2963:67"><call pos:start="2963:25" pos:end="2963:67"><name pos:start="2963:25" pos:end="2963:44">gen_helper_fistt_ST0</name><argument_list pos:start="2963:45" pos:end="2963:67">(<argument pos:start="2963:46" pos:end="2963:57"><expr pos:start="2963:46" pos:end="2963:57"><name pos:start="2963:46" pos:end="2963:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2963:60" pos:end="2963:66"><expr pos:start="2963:60" pos:end="2963:66"><name pos:start="2963:60" pos:end="2963:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2965:25" pos:end="2965:68"><expr pos:start="2965:25" pos:end="2965:67"><call pos:start="2965:25" pos:end="2965:67"><name pos:start="2965:25" pos:end="2965:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2965:44" pos:end="2965:67">(<argument pos:start="2965:45" pos:end="2965:52"><expr pos:start="2965:45" pos:end="2965:52"><name pos:start="2965:45" pos:end="2965:52"><name pos:start="2965:45" pos:end="2965:49">cpu_T</name><index pos:start="2965:50" pos:end="2965:52">[<expr pos:start="2965:51" pos:end="2965:51"><literal type="number" pos:start="2965:51" pos:end="2965:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2965:55" pos:end="2965:66"><expr pos:start="2965:55" pos:end="2965:66"><name pos:start="2965:55" pos:end="2965:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2967:25" pos:end="2967:64"><expr pos:start="2967:25" pos:end="2967:63"><call pos:start="2967:25" pos:end="2967:63"><name pos:start="2967:25" pos:end="2967:39">gen_op_st_T0_A0</name><argument_list pos:start="2967:40" pos:end="2967:63">(<argument pos:start="2967:41" pos:end="2967:62"><expr pos:start="2967:41" pos:end="2967:62"><name pos:start="2967:41" pos:end="2967:47">OT_WORD</name> <operator pos:start="2967:49" pos:end="2967:49">+</operator> <name pos:start="2967:51" pos:end="2967:62"><name pos:start="2967:51" pos:end="2967:51">s</name><operator pos:start="2967:52" pos:end="2967:53">-&gt;</operator><name pos:start="2967:54" pos:end="2967:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2969:25" pos:end="2969:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="2973:21" pos:end="2973:45"><expr pos:start="2973:21" pos:end="2973:44"><call pos:start="2973:21" pos:end="2973:44"><name pos:start="2973:21" pos:end="2973:35">gen_helper_fpop</name><argument_list pos:start="2973:36" pos:end="2973:44">(<argument pos:start="2973:37" pos:end="2973:43"><expr pos:start="2973:37" pos:end="2973:43"><name pos:start="2973:37" pos:end="2973:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2975:21" pos:end="2975:26">break;</break>

                <default pos:start="2977:17" pos:end="2977:24">default:</default>

                    <switch pos:start="2979:21" pos:end="3023:21">switch<condition pos:start="2979:27" pos:end="2979:35">(<expr pos:start="2979:28" pos:end="2979:34"><name pos:start="2979:28" pos:end="2979:29">op</name> <operator pos:start="2979:31" pos:end="2979:32">&gt;&gt;</operator> <literal type="number" pos:start="2979:34" pos:end="2979:34">4</literal></expr>)</condition> <block pos:start="2979:37" pos:end="3023:21">{<block_content pos:start="2981:21" pos:end="3021:30">

                    <case pos:start="2981:21" pos:end="2981:27">case <expr pos:start="2981:26" pos:end="2981:26"><literal type="number" pos:start="2981:26" pos:end="2981:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2983:25" pos:end="2983:67"><expr pos:start="2983:25" pos:end="2983:66"><call pos:start="2983:25" pos:end="2983:66"><name pos:start="2983:25" pos:end="2983:43">gen_helper_fsts_ST0</name><argument_list pos:start="2983:44" pos:end="2983:66">(<argument pos:start="2983:45" pos:end="2983:56"><expr pos:start="2983:45" pos:end="2983:56"><name pos:start="2983:45" pos:end="2983:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2983:59" pos:end="2983:65"><expr pos:start="2983:59" pos:end="2983:65"><name pos:start="2983:59" pos:end="2983:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2985:25" pos:end="2985:68"><expr pos:start="2985:25" pos:end="2985:67"><call pos:start="2985:25" pos:end="2985:67"><name pos:start="2985:25" pos:end="2985:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2985:44" pos:end="2985:67">(<argument pos:start="2985:45" pos:end="2985:52"><expr pos:start="2985:45" pos:end="2985:52"><name pos:start="2985:45" pos:end="2985:52"><name pos:start="2985:45" pos:end="2985:49">cpu_T</name><index pos:start="2985:50" pos:end="2985:52">[<expr pos:start="2985:51" pos:end="2985:51"><literal type="number" pos:start="2985:51" pos:end="2985:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2985:55" pos:end="2985:66"><expr pos:start="2985:55" pos:end="2985:66"><name pos:start="2985:55" pos:end="2985:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2987:25" pos:end="2987:64"><expr pos:start="2987:25" pos:end="2987:63"><call pos:start="2987:25" pos:end="2987:63"><name pos:start="2987:25" pos:end="2987:39">gen_op_st_T0_A0</name><argument_list pos:start="2987:40" pos:end="2987:63">(<argument pos:start="2987:41" pos:end="2987:62"><expr pos:start="2987:41" pos:end="2987:62"><name pos:start="2987:41" pos:end="2987:47">OT_LONG</name> <operator pos:start="2987:49" pos:end="2987:49">+</operator> <name pos:start="2987:51" pos:end="2987:62"><name pos:start="2987:51" pos:end="2987:51">s</name><operator pos:start="2987:52" pos:end="2987:53">-&gt;</operator><name pos:start="2987:54" pos:end="2987:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2989:25" pos:end="2989:30">break;</break>

                    <case pos:start="2991:21" pos:end="2991:27">case <expr pos:start="2991:26" pos:end="2991:26"><literal type="number" pos:start="2991:26" pos:end="2991:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2993:25" pos:end="2993:68"><expr pos:start="2993:25" pos:end="2993:67"><call pos:start="2993:25" pos:end="2993:67"><name pos:start="2993:25" pos:end="2993:44">gen_helper_fistl_ST0</name><argument_list pos:start="2993:45" pos:end="2993:67">(<argument pos:start="2993:46" pos:end="2993:57"><expr pos:start="2993:46" pos:end="2993:57"><name pos:start="2993:46" pos:end="2993:57">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2993:60" pos:end="2993:66"><expr pos:start="2993:60" pos:end="2993:66"><name pos:start="2993:60" pos:end="2993:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2995:25" pos:end="2995:68"><expr pos:start="2995:25" pos:end="2995:67"><call pos:start="2995:25" pos:end="2995:67"><name pos:start="2995:25" pos:end="2995:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="2995:44" pos:end="2995:67">(<argument pos:start="2995:45" pos:end="2995:52"><expr pos:start="2995:45" pos:end="2995:52"><name pos:start="2995:45" pos:end="2995:52"><name pos:start="2995:45" pos:end="2995:49">cpu_T</name><index pos:start="2995:50" pos:end="2995:52">[<expr pos:start="2995:51" pos:end="2995:51"><literal type="number" pos:start="2995:51" pos:end="2995:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2995:55" pos:end="2995:66"><expr pos:start="2995:55" pos:end="2995:66"><name pos:start="2995:55" pos:end="2995:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2997:25" pos:end="2997:64"><expr pos:start="2997:25" pos:end="2997:63"><call pos:start="2997:25" pos:end="2997:63"><name pos:start="2997:25" pos:end="2997:39">gen_op_st_T0_A0</name><argument_list pos:start="2997:40" pos:end="2997:63">(<argument pos:start="2997:41" pos:end="2997:62"><expr pos:start="2997:41" pos:end="2997:62"><name pos:start="2997:41" pos:end="2997:47">OT_LONG</name> <operator pos:start="2997:49" pos:end="2997:49">+</operator> <name pos:start="2997:51" pos:end="2997:62"><name pos:start="2997:51" pos:end="2997:51">s</name><operator pos:start="2997:52" pos:end="2997:53">-&gt;</operator><name pos:start="2997:54" pos:end="2997:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2999:25" pos:end="2999:30">break;</break>

                    <case pos:start="3001:21" pos:end="3001:27">case <expr pos:start="3001:26" pos:end="3001:26"><literal type="number" pos:start="3001:26" pos:end="3001:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="3003:25" pos:end="3003:67"><expr pos:start="3003:25" pos:end="3003:66"><call pos:start="3003:25" pos:end="3003:66"><name pos:start="3003:25" pos:end="3003:43">gen_helper_fstl_ST0</name><argument_list pos:start="3003:44" pos:end="3003:66">(<argument pos:start="3003:45" pos:end="3003:56"><expr pos:start="3003:45" pos:end="3003:56"><name pos:start="3003:45" pos:end="3003:56">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3003:59" pos:end="3003:65"><expr pos:start="3003:59" pos:end="3003:65"><name pos:start="3003:59" pos:end="3003:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3005:25" pos:end="3007:67"><expr pos:start="3005:25" pos:end="3007:66"><call pos:start="3005:25" pos:end="3007:66"><name pos:start="3005:25" pos:end="3005:41">tcg_gen_qemu_st64</name><argument_list pos:start="3005:42" pos:end="3007:66">(<argument pos:start="3005:43" pos:end="3005:54"><expr pos:start="3005:43" pos:end="3005:54"><name pos:start="3005:43" pos:end="3005:54">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3005:57" pos:end="3005:62"><expr pos:start="3005:57" pos:end="3005:62"><name pos:start="3005:57" pos:end="3005:62">cpu_A0</name></expr></argument>, 

                                          <argument pos:start="3007:43" pos:end="3007:65"><expr pos:start="3007:43" pos:end="3007:65"><operator pos:start="3007:43" pos:end="3007:43">(</operator><name pos:start="3007:44" pos:end="3007:55"><name pos:start="3007:44" pos:end="3007:44">s</name><operator pos:start="3007:45" pos:end="3007:46">-&gt;</operator><name pos:start="3007:47" pos:end="3007:55">mem_index</name></name> <operator pos:start="3007:57" pos:end="3007:58">&gt;&gt;</operator> <literal type="number" pos:start="3007:60" pos:end="3007:60">2</literal><operator pos:start="3007:61" pos:end="3007:61">)</operator> <operator pos:start="3007:63" pos:end="3007:63">-</operator> <literal type="number" pos:start="3007:65" pos:end="3007:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3009:25" pos:end="3009:30">break;</break>

                    <case pos:start="3011:21" pos:end="3011:27">case <expr pos:start="3011:26" pos:end="3011:26"><literal type="number" pos:start="3011:26" pos:end="3011:26">3</literal></expr>:</case>

                    <default pos:start="3013:21" pos:end="3013:28">default:</default>

                        <expr_stmt pos:start="3015:25" pos:end="3015:67"><expr pos:start="3015:25" pos:end="3015:66"><call pos:start="3015:25" pos:end="3015:66"><name pos:start="3015:25" pos:end="3015:43">gen_helper_fist_ST0</name><argument_list pos:start="3015:44" pos:end="3015:66">(<argument pos:start="3015:45" pos:end="3015:56"><expr pos:start="3015:45" pos:end="3015:56"><name pos:start="3015:45" pos:end="3015:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3015:59" pos:end="3015:65"><expr pos:start="3015:59" pos:end="3015:65"><name pos:start="3015:59" pos:end="3015:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3017:25" pos:end="3017:68"><expr pos:start="3017:25" pos:end="3017:67"><call pos:start="3017:25" pos:end="3017:67"><name pos:start="3017:25" pos:end="3017:43">tcg_gen_extu_i32_tl</name><argument_list pos:start="3017:44" pos:end="3017:67">(<argument pos:start="3017:45" pos:end="3017:52"><expr pos:start="3017:45" pos:end="3017:52"><name pos:start="3017:45" pos:end="3017:52"><name pos:start="3017:45" pos:end="3017:49">cpu_T</name><index pos:start="3017:50" pos:end="3017:52">[<expr pos:start="3017:51" pos:end="3017:51"><literal type="number" pos:start="3017:51" pos:end="3017:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3017:55" pos:end="3017:66"><expr pos:start="3017:55" pos:end="3017:66"><name pos:start="3017:55" pos:end="3017:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3019:25" pos:end="3019:64"><expr pos:start="3019:25" pos:end="3019:63"><call pos:start="3019:25" pos:end="3019:63"><name pos:start="3019:25" pos:end="3019:39">gen_op_st_T0_A0</name><argument_list pos:start="3019:40" pos:end="3019:63">(<argument pos:start="3019:41" pos:end="3019:62"><expr pos:start="3019:41" pos:end="3019:62"><name pos:start="3019:41" pos:end="3019:47">OT_WORD</name> <operator pos:start="3019:49" pos:end="3019:49">+</operator> <name pos:start="3019:51" pos:end="3019:62"><name pos:start="3019:51" pos:end="3019:51">s</name><operator pos:start="3019:52" pos:end="3019:53">-&gt;</operator><name pos:start="3019:54" pos:end="3019:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3021:25" pos:end="3021:30">break;</break>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="3025:21" pos:end="3027:49"><if pos:start="3025:21" pos:end="3027:49">if <condition pos:start="3025:24" pos:end="3025:38">(<expr pos:start="3025:25" pos:end="3025:37"><operator pos:start="3025:25" pos:end="3025:25">(</operator><name pos:start="3025:26" pos:end="3025:27">op</name> <operator pos:start="3025:29" pos:end="3025:29">&amp;</operator> <literal type="number" pos:start="3025:31" pos:end="3025:31">7</literal><operator pos:start="3025:32" pos:end="3025:32">)</operator> <operator pos:start="3025:34" pos:end="3025:35">==</operator> <literal type="number" pos:start="3025:37" pos:end="3025:37">3</literal></expr>)</condition><block type="pseudo" pos:start="3027:25" pos:end="3027:49"><block_content pos:start="3027:25" pos:end="3027:49">

                        <expr_stmt pos:start="3027:25" pos:end="3027:49"><expr pos:start="3027:25" pos:end="3027:48"><call pos:start="3027:25" pos:end="3027:48"><name pos:start="3027:25" pos:end="3027:39">gen_helper_fpop</name><argument_list pos:start="3027:40" pos:end="3027:48">(<argument pos:start="3027:41" pos:end="3027:47"><expr pos:start="3027:41" pos:end="3027:47"><name pos:start="3027:41" pos:end="3027:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="3029:21" pos:end="3029:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3033:17" pos:end="3033:22">break;</break>

            <case pos:start="3035:13" pos:end="3035:22">case <expr pos:start="3035:18" pos:end="3035:21"><literal type="number" pos:start="3035:18" pos:end="3035:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="3035:24" pos:end="3035:39">/* fldenv mem */</comment>

                <if_stmt pos:start="3037:17" pos:end="3039:47"><if pos:start="3037:17" pos:end="3039:47">if <condition pos:start="3037:20" pos:end="3037:46">(<expr pos:start="3037:21" pos:end="3037:45"><name pos:start="3037:21" pos:end="3037:28"><name pos:start="3037:21" pos:end="3037:21">s</name><operator pos:start="3037:22" pos:end="3037:23">-&gt;</operator><name pos:start="3037:24" pos:end="3037:28">cc_op</name></name> <operator pos:start="3037:30" pos:end="3037:31">!=</operator> <name pos:start="3037:33" pos:end="3037:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3039:21" pos:end="3039:47"><block_content pos:start="3039:21" pos:end="3039:47">

                    <expr_stmt pos:start="3039:21" pos:end="3039:47"><expr pos:start="3039:21" pos:end="3039:46"><call pos:start="3039:21" pos:end="3039:46"><name pos:start="3039:21" pos:end="3039:36">gen_op_set_cc_op</name><argument_list pos:start="3039:37" pos:end="3039:46">(<argument pos:start="3039:38" pos:end="3039:45"><expr pos:start="3039:38" pos:end="3039:45"><name pos:start="3039:38" pos:end="3039:45"><name pos:start="3039:38" pos:end="3039:38">s</name><operator pos:start="3039:39" pos:end="3039:40">-&gt;</operator><name pos:start="3039:41" pos:end="3039:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3041:17" pos:end="3041:50"><expr pos:start="3041:17" pos:end="3041:49"><call pos:start="3041:17" pos:end="3041:49"><name pos:start="3041:17" pos:end="3041:26">gen_jmp_im</name><argument_list pos:start="3041:27" pos:end="3041:49">(<argument pos:start="3041:28" pos:end="3041:48"><expr pos:start="3041:28" pos:end="3041:48"><name pos:start="3041:28" pos:end="3041:35">pc_start</name> <operator pos:start="3041:37" pos:end="3041:37">-</operator> <name pos:start="3041:39" pos:end="3041:48"><name pos:start="3041:39" pos:end="3041:39">s</name><operator pos:start="3041:40" pos:end="3041:41">-&gt;</operator><name pos:start="3041:42" pos:end="3041:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3043:17" pos:end="3043:76"><expr pos:start="3043:17" pos:end="3043:75"><call pos:start="3043:17" pos:end="3043:75"><name pos:start="3043:17" pos:end="3043:33">gen_helper_fldenv</name><argument_list pos:start="3043:34" pos:end="3043:75">(<argument pos:start="3043:35" pos:end="3043:41"><expr pos:start="3043:35" pos:end="3043:41"><name pos:start="3043:35" pos:end="3043:41">cpu_env</name></expr></argument>, <argument pos:start="3043:44" pos:end="3043:49"><expr pos:start="3043:44" pos:end="3043:49"><name pos:start="3043:44" pos:end="3043:49">cpu_A0</name></expr></argument>, <argument pos:start="3043:52" pos:end="3043:74"><expr pos:start="3043:52" pos:end="3043:74"><call pos:start="3043:52" pos:end="3043:74"><name pos:start="3043:52" pos:end="3043:64">tcg_const_i32</name><argument_list pos:start="3043:65" pos:end="3043:74">(<argument pos:start="3043:66" pos:end="3043:73"><expr pos:start="3043:66" pos:end="3043:73"><name pos:start="3043:66" pos:end="3043:73"><name pos:start="3043:66" pos:end="3043:66">s</name><operator pos:start="3043:67" pos:end="3043:68">-&gt;</operator><name pos:start="3043:69" pos:end="3043:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3045:17" pos:end="3045:22">break;</break>

            <case pos:start="3047:13" pos:end="3047:22">case <expr pos:start="3047:18" pos:end="3047:21"><literal type="number" pos:start="3047:18" pos:end="3047:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="3047:24" pos:end="3047:38">/* fldcw mem */</comment>

                <expr_stmt pos:start="3049:17" pos:end="3049:56"><expr pos:start="3049:17" pos:end="3049:55"><call pos:start="3049:17" pos:end="3049:55"><name pos:start="3049:17" pos:end="3049:31">gen_op_ld_T0_A0</name><argument_list pos:start="3049:32" pos:end="3049:55">(<argument pos:start="3049:33" pos:end="3049:54"><expr pos:start="3049:33" pos:end="3049:54"><name pos:start="3049:33" pos:end="3049:39">OT_WORD</name> <operator pos:start="3049:41" pos:end="3049:41">+</operator> <name pos:start="3049:43" pos:end="3049:54"><name pos:start="3049:43" pos:end="3049:43">s</name><operator pos:start="3049:44" pos:end="3049:45">-&gt;</operator><name pos:start="3049:46" pos:end="3049:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3051:17" pos:end="3051:61"><expr pos:start="3051:17" pos:end="3051:60"><call pos:start="3051:17" pos:end="3051:60"><name pos:start="3051:17" pos:end="3051:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="3051:37" pos:end="3051:60">(<argument pos:start="3051:38" pos:end="3051:49"><expr pos:start="3051:38" pos:end="3051:49"><name pos:start="3051:38" pos:end="3051:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3051:52" pos:end="3051:59"><expr pos:start="3051:52" pos:end="3051:59"><name pos:start="3051:52" pos:end="3051:59"><name pos:start="3051:52" pos:end="3051:56">cpu_T</name><index pos:start="3051:57" pos:end="3051:59">[<expr pos:start="3051:58" pos:end="3051:58"><literal type="number" pos:start="3051:58" pos:end="3051:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3053:17" pos:end="3053:56"><expr pos:start="3053:17" pos:end="3053:55"><call pos:start="3053:17" pos:end="3053:55"><name pos:start="3053:17" pos:end="3053:32">gen_helper_fldcw</name><argument_list pos:start="3053:33" pos:end="3053:55">(<argument pos:start="3053:34" pos:end="3053:40"><expr pos:start="3053:34" pos:end="3053:40"><name pos:start="3053:34" pos:end="3053:40">cpu_env</name></expr></argument>, <argument pos:start="3053:43" pos:end="3053:54"><expr pos:start="3053:43" pos:end="3053:54"><name pos:start="3053:43" pos:end="3053:54">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3055:17" pos:end="3055:22">break;</break>

            <case pos:start="3057:13" pos:end="3057:22">case <expr pos:start="3057:18" pos:end="3057:21"><literal type="number" pos:start="3057:18" pos:end="3057:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="3057:24" pos:end="3057:40">/* fnstenv mem */</comment>

                <if_stmt pos:start="3059:17" pos:end="3061:47"><if pos:start="3059:17" pos:end="3061:47">if <condition pos:start="3059:20" pos:end="3059:46">(<expr pos:start="3059:21" pos:end="3059:45"><name pos:start="3059:21" pos:end="3059:28"><name pos:start="3059:21" pos:end="3059:21">s</name><operator pos:start="3059:22" pos:end="3059:23">-&gt;</operator><name pos:start="3059:24" pos:end="3059:28">cc_op</name></name> <operator pos:start="3059:30" pos:end="3059:31">!=</operator> <name pos:start="3059:33" pos:end="3059:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3061:21" pos:end="3061:47"><block_content pos:start="3061:21" pos:end="3061:47">

                    <expr_stmt pos:start="3061:21" pos:end="3061:47"><expr pos:start="3061:21" pos:end="3061:46"><call pos:start="3061:21" pos:end="3061:46"><name pos:start="3061:21" pos:end="3061:36">gen_op_set_cc_op</name><argument_list pos:start="3061:37" pos:end="3061:46">(<argument pos:start="3061:38" pos:end="3061:45"><expr pos:start="3061:38" pos:end="3061:45"><name pos:start="3061:38" pos:end="3061:45"><name pos:start="3061:38" pos:end="3061:38">s</name><operator pos:start="3061:39" pos:end="3061:40">-&gt;</operator><name pos:start="3061:41" pos:end="3061:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3063:17" pos:end="3063:50"><expr pos:start="3063:17" pos:end="3063:49"><call pos:start="3063:17" pos:end="3063:49"><name pos:start="3063:17" pos:end="3063:26">gen_jmp_im</name><argument_list pos:start="3063:27" pos:end="3063:49">(<argument pos:start="3063:28" pos:end="3063:48"><expr pos:start="3063:28" pos:end="3063:48"><name pos:start="3063:28" pos:end="3063:35">pc_start</name> <operator pos:start="3063:37" pos:end="3063:37">-</operator> <name pos:start="3063:39" pos:end="3063:48"><name pos:start="3063:39" pos:end="3063:39">s</name><operator pos:start="3063:40" pos:end="3063:41">-&gt;</operator><name pos:start="3063:42" pos:end="3063:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3065:17" pos:end="3065:76"><expr pos:start="3065:17" pos:end="3065:75"><call pos:start="3065:17" pos:end="3065:75"><name pos:start="3065:17" pos:end="3065:33">gen_helper_fstenv</name><argument_list pos:start="3065:34" pos:end="3065:75">(<argument pos:start="3065:35" pos:end="3065:41"><expr pos:start="3065:35" pos:end="3065:41"><name pos:start="3065:35" pos:end="3065:41">cpu_env</name></expr></argument>, <argument pos:start="3065:44" pos:end="3065:49"><expr pos:start="3065:44" pos:end="3065:49"><name pos:start="3065:44" pos:end="3065:49">cpu_A0</name></expr></argument>, <argument pos:start="3065:52" pos:end="3065:74"><expr pos:start="3065:52" pos:end="3065:74"><call pos:start="3065:52" pos:end="3065:74"><name pos:start="3065:52" pos:end="3065:64">tcg_const_i32</name><argument_list pos:start="3065:65" pos:end="3065:74">(<argument pos:start="3065:66" pos:end="3065:73"><expr pos:start="3065:66" pos:end="3065:73"><name pos:start="3065:66" pos:end="3065:73"><name pos:start="3065:66" pos:end="3065:66">s</name><operator pos:start="3065:67" pos:end="3065:68">-&gt;</operator><name pos:start="3065:69" pos:end="3065:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3067:17" pos:end="3067:22">break;</break>

            <case pos:start="3069:13" pos:end="3069:22">case <expr pos:start="3069:18" pos:end="3069:21"><literal type="number" pos:start="3069:18" pos:end="3069:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="3069:24" pos:end="3069:39">/* fnstcw mem */</comment>

                <expr_stmt pos:start="3071:17" pos:end="3071:57"><expr pos:start="3071:17" pos:end="3071:56"><call pos:start="3071:17" pos:end="3071:56"><name pos:start="3071:17" pos:end="3071:33">gen_helper_fnstcw</name><argument_list pos:start="3071:34" pos:end="3071:56">(<argument pos:start="3071:35" pos:end="3071:46"><expr pos:start="3071:35" pos:end="3071:46"><name pos:start="3071:35" pos:end="3071:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3071:49" pos:end="3071:55"><expr pos:start="3071:49" pos:end="3071:55"><name pos:start="3071:49" pos:end="3071:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3073:17" pos:end="3073:60"><expr pos:start="3073:17" pos:end="3073:59"><call pos:start="3073:17" pos:end="3073:59"><name pos:start="3073:17" pos:end="3073:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="3073:36" pos:end="3073:59">(<argument pos:start="3073:37" pos:end="3073:44"><expr pos:start="3073:37" pos:end="3073:44"><name pos:start="3073:37" pos:end="3073:44"><name pos:start="3073:37" pos:end="3073:41">cpu_T</name><index pos:start="3073:42" pos:end="3073:44">[<expr pos:start="3073:43" pos:end="3073:43"><literal type="number" pos:start="3073:43" pos:end="3073:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3073:47" pos:end="3073:58"><expr pos:start="3073:47" pos:end="3073:58"><name pos:start="3073:47" pos:end="3073:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3075:17" pos:end="3075:56"><expr pos:start="3075:17" pos:end="3075:55"><call pos:start="3075:17" pos:end="3075:55"><name pos:start="3075:17" pos:end="3075:31">gen_op_st_T0_A0</name><argument_list pos:start="3075:32" pos:end="3075:55">(<argument pos:start="3075:33" pos:end="3075:54"><expr pos:start="3075:33" pos:end="3075:54"><name pos:start="3075:33" pos:end="3075:39">OT_WORD</name> <operator pos:start="3075:41" pos:end="3075:41">+</operator> <name pos:start="3075:43" pos:end="3075:54"><name pos:start="3075:43" pos:end="3075:43">s</name><operator pos:start="3075:44" pos:end="3075:45">-&gt;</operator><name pos:start="3075:46" pos:end="3075:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3077:17" pos:end="3077:22">break;</break>

            <case pos:start="3079:13" pos:end="3079:22">case <expr pos:start="3079:18" pos:end="3079:21"><literal type="number" pos:start="3079:18" pos:end="3079:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="3079:24" pos:end="3079:37">/* fldt mem */</comment>

                <if_stmt pos:start="3081:17" pos:end="3083:47"><if pos:start="3081:17" pos:end="3083:47">if <condition pos:start="3081:20" pos:end="3081:46">(<expr pos:start="3081:21" pos:end="3081:45"><name pos:start="3081:21" pos:end="3081:28"><name pos:start="3081:21" pos:end="3081:21">s</name><operator pos:start="3081:22" pos:end="3081:23">-&gt;</operator><name pos:start="3081:24" pos:end="3081:28">cc_op</name></name> <operator pos:start="3081:30" pos:end="3081:31">!=</operator> <name pos:start="3081:33" pos:end="3081:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3083:21" pos:end="3083:47"><block_content pos:start="3083:21" pos:end="3083:47">

                    <expr_stmt pos:start="3083:21" pos:end="3083:47"><expr pos:start="3083:21" pos:end="3083:46"><call pos:start="3083:21" pos:end="3083:46"><name pos:start="3083:21" pos:end="3083:36">gen_op_set_cc_op</name><argument_list pos:start="3083:37" pos:end="3083:46">(<argument pos:start="3083:38" pos:end="3083:45"><expr pos:start="3083:38" pos:end="3083:45"><name pos:start="3083:38" pos:end="3083:45"><name pos:start="3083:38" pos:end="3083:38">s</name><operator pos:start="3083:39" pos:end="3083:40">-&gt;</operator><name pos:start="3083:41" pos:end="3083:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3085:17" pos:end="3085:50"><expr pos:start="3085:17" pos:end="3085:49"><call pos:start="3085:17" pos:end="3085:49"><name pos:start="3085:17" pos:end="3085:26">gen_jmp_im</name><argument_list pos:start="3085:27" pos:end="3085:49">(<argument pos:start="3085:28" pos:end="3085:48"><expr pos:start="3085:28" pos:end="3085:48"><name pos:start="3085:28" pos:end="3085:35">pc_start</name> <operator pos:start="3085:37" pos:end="3085:37">-</operator> <name pos:start="3085:39" pos:end="3085:48"><name pos:start="3085:39" pos:end="3085:39">s</name><operator pos:start="3085:40" pos:end="3085:41">-&gt;</operator><name pos:start="3085:42" pos:end="3085:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3087:17" pos:end="3087:53"><expr pos:start="3087:17" pos:end="3087:52"><call pos:start="3087:17" pos:end="3087:52"><name pos:start="3087:17" pos:end="3087:35">gen_helper_fldt_ST0</name><argument_list pos:start="3087:36" pos:end="3087:52">(<argument pos:start="3087:37" pos:end="3087:43"><expr pos:start="3087:37" pos:end="3087:43"><name pos:start="3087:37" pos:end="3087:43">cpu_env</name></expr></argument>, <argument pos:start="3087:46" pos:end="3087:51"><expr pos:start="3087:46" pos:end="3087:51"><name pos:start="3087:46" pos:end="3087:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3089:17" pos:end="3089:22">break;</break>

            <case pos:start="3091:13" pos:end="3091:22">case <expr pos:start="3091:18" pos:end="3091:21"><literal type="number" pos:start="3091:18" pos:end="3091:21">0x1f</literal></expr>:</case> <comment type="block" pos:start="3091:24" pos:end="3091:38">/* fstpt mem */</comment>

                <if_stmt pos:start="3093:17" pos:end="3095:47"><if pos:start="3093:17" pos:end="3095:47">if <condition pos:start="3093:20" pos:end="3093:46">(<expr pos:start="3093:21" pos:end="3093:45"><name pos:start="3093:21" pos:end="3093:28"><name pos:start="3093:21" pos:end="3093:21">s</name><operator pos:start="3093:22" pos:end="3093:23">-&gt;</operator><name pos:start="3093:24" pos:end="3093:28">cc_op</name></name> <operator pos:start="3093:30" pos:end="3093:31">!=</operator> <name pos:start="3093:33" pos:end="3093:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3095:21" pos:end="3095:47"><block_content pos:start="3095:21" pos:end="3095:47">

                    <expr_stmt pos:start="3095:21" pos:end="3095:47"><expr pos:start="3095:21" pos:end="3095:46"><call pos:start="3095:21" pos:end="3095:46"><name pos:start="3095:21" pos:end="3095:36">gen_op_set_cc_op</name><argument_list pos:start="3095:37" pos:end="3095:46">(<argument pos:start="3095:38" pos:end="3095:45"><expr pos:start="3095:38" pos:end="3095:45"><name pos:start="3095:38" pos:end="3095:45"><name pos:start="3095:38" pos:end="3095:38">s</name><operator pos:start="3095:39" pos:end="3095:40">-&gt;</operator><name pos:start="3095:41" pos:end="3095:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3097:17" pos:end="3097:50"><expr pos:start="3097:17" pos:end="3097:49"><call pos:start="3097:17" pos:end="3097:49"><name pos:start="3097:17" pos:end="3097:26">gen_jmp_im</name><argument_list pos:start="3097:27" pos:end="3097:49">(<argument pos:start="3097:28" pos:end="3097:48"><expr pos:start="3097:28" pos:end="3097:48"><name pos:start="3097:28" pos:end="3097:35">pc_start</name> <operator pos:start="3097:37" pos:end="3097:37">-</operator> <name pos:start="3097:39" pos:end="3097:48"><name pos:start="3097:39" pos:end="3097:39">s</name><operator pos:start="3097:40" pos:end="3097:41">-&gt;</operator><name pos:start="3097:42" pos:end="3097:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3099:17" pos:end="3099:53"><expr pos:start="3099:17" pos:end="3099:52"><call pos:start="3099:17" pos:end="3099:52"><name pos:start="3099:17" pos:end="3099:35">gen_helper_fstt_ST0</name><argument_list pos:start="3099:36" pos:end="3099:52">(<argument pos:start="3099:37" pos:end="3099:43"><expr pos:start="3099:37" pos:end="3099:43"><name pos:start="3099:37" pos:end="3099:43">cpu_env</name></expr></argument>, <argument pos:start="3099:46" pos:end="3099:51"><expr pos:start="3099:46" pos:end="3099:51"><name pos:start="3099:46" pos:end="3099:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3101:17" pos:end="3101:41"><expr pos:start="3101:17" pos:end="3101:40"><call pos:start="3101:17" pos:end="3101:40"><name pos:start="3101:17" pos:end="3101:31">gen_helper_fpop</name><argument_list pos:start="3101:32" pos:end="3101:40">(<argument pos:start="3101:33" pos:end="3101:39"><expr pos:start="3101:33" pos:end="3101:39"><name pos:start="3101:33" pos:end="3101:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3103:17" pos:end="3103:22">break;</break>

            <case pos:start="3105:13" pos:end="3105:22">case <expr pos:start="3105:18" pos:end="3105:21"><literal type="number" pos:start="3105:18" pos:end="3105:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="3105:24" pos:end="3105:39">/* frstor mem */</comment>

                <if_stmt pos:start="3107:17" pos:end="3109:47"><if pos:start="3107:17" pos:end="3109:47">if <condition pos:start="3107:20" pos:end="3107:46">(<expr pos:start="3107:21" pos:end="3107:45"><name pos:start="3107:21" pos:end="3107:28"><name pos:start="3107:21" pos:end="3107:21">s</name><operator pos:start="3107:22" pos:end="3107:23">-&gt;</operator><name pos:start="3107:24" pos:end="3107:28">cc_op</name></name> <operator pos:start="3107:30" pos:end="3107:31">!=</operator> <name pos:start="3107:33" pos:end="3107:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3109:21" pos:end="3109:47"><block_content pos:start="3109:21" pos:end="3109:47">

                    <expr_stmt pos:start="3109:21" pos:end="3109:47"><expr pos:start="3109:21" pos:end="3109:46"><call pos:start="3109:21" pos:end="3109:46"><name pos:start="3109:21" pos:end="3109:36">gen_op_set_cc_op</name><argument_list pos:start="3109:37" pos:end="3109:46">(<argument pos:start="3109:38" pos:end="3109:45"><expr pos:start="3109:38" pos:end="3109:45"><name pos:start="3109:38" pos:end="3109:45"><name pos:start="3109:38" pos:end="3109:38">s</name><operator pos:start="3109:39" pos:end="3109:40">-&gt;</operator><name pos:start="3109:41" pos:end="3109:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3111:17" pos:end="3111:50"><expr pos:start="3111:17" pos:end="3111:49"><call pos:start="3111:17" pos:end="3111:49"><name pos:start="3111:17" pos:end="3111:26">gen_jmp_im</name><argument_list pos:start="3111:27" pos:end="3111:49">(<argument pos:start="3111:28" pos:end="3111:48"><expr pos:start="3111:28" pos:end="3111:48"><name pos:start="3111:28" pos:end="3111:35">pc_start</name> <operator pos:start="3111:37" pos:end="3111:37">-</operator> <name pos:start="3111:39" pos:end="3111:48"><name pos:start="3111:39" pos:end="3111:39">s</name><operator pos:start="3111:40" pos:end="3111:41">-&gt;</operator><name pos:start="3111:42" pos:end="3111:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3113:17" pos:end="3113:76"><expr pos:start="3113:17" pos:end="3113:75"><call pos:start="3113:17" pos:end="3113:75"><name pos:start="3113:17" pos:end="3113:33">gen_helper_frstor</name><argument_list pos:start="3113:34" pos:end="3113:75">(<argument pos:start="3113:35" pos:end="3113:41"><expr pos:start="3113:35" pos:end="3113:41"><name pos:start="3113:35" pos:end="3113:41">cpu_env</name></expr></argument>, <argument pos:start="3113:44" pos:end="3113:49"><expr pos:start="3113:44" pos:end="3113:49"><name pos:start="3113:44" pos:end="3113:49">cpu_A0</name></expr></argument>, <argument pos:start="3113:52" pos:end="3113:74"><expr pos:start="3113:52" pos:end="3113:74"><call pos:start="3113:52" pos:end="3113:74"><name pos:start="3113:52" pos:end="3113:64">tcg_const_i32</name><argument_list pos:start="3113:65" pos:end="3113:74">(<argument pos:start="3113:66" pos:end="3113:73"><expr pos:start="3113:66" pos:end="3113:73"><name pos:start="3113:66" pos:end="3113:73"><name pos:start="3113:66" pos:end="3113:66">s</name><operator pos:start="3113:67" pos:end="3113:68">-&gt;</operator><name pos:start="3113:69" pos:end="3113:73">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3115:17" pos:end="3115:22">break;</break>

            <case pos:start="3117:13" pos:end="3117:22">case <expr pos:start="3117:18" pos:end="3117:21"><literal type="number" pos:start="3117:18" pos:end="3117:21">0x2e</literal></expr>:</case> <comment type="block" pos:start="3117:24" pos:end="3117:39">/* fnsave mem */</comment>

                <if_stmt pos:start="3119:17" pos:end="3121:47"><if pos:start="3119:17" pos:end="3121:47">if <condition pos:start="3119:20" pos:end="3119:46">(<expr pos:start="3119:21" pos:end="3119:45"><name pos:start="3119:21" pos:end="3119:28"><name pos:start="3119:21" pos:end="3119:21">s</name><operator pos:start="3119:22" pos:end="3119:23">-&gt;</operator><name pos:start="3119:24" pos:end="3119:28">cc_op</name></name> <operator pos:start="3119:30" pos:end="3119:31">!=</operator> <name pos:start="3119:33" pos:end="3119:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3121:21" pos:end="3121:47"><block_content pos:start="3121:21" pos:end="3121:47">

                    <expr_stmt pos:start="3121:21" pos:end="3121:47"><expr pos:start="3121:21" pos:end="3121:46"><call pos:start="3121:21" pos:end="3121:46"><name pos:start="3121:21" pos:end="3121:36">gen_op_set_cc_op</name><argument_list pos:start="3121:37" pos:end="3121:46">(<argument pos:start="3121:38" pos:end="3121:45"><expr pos:start="3121:38" pos:end="3121:45"><name pos:start="3121:38" pos:end="3121:45"><name pos:start="3121:38" pos:end="3121:38">s</name><operator pos:start="3121:39" pos:end="3121:40">-&gt;</operator><name pos:start="3121:41" pos:end="3121:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3123:17" pos:end="3123:50"><expr pos:start="3123:17" pos:end="3123:49"><call pos:start="3123:17" pos:end="3123:49"><name pos:start="3123:17" pos:end="3123:26">gen_jmp_im</name><argument_list pos:start="3123:27" pos:end="3123:49">(<argument pos:start="3123:28" pos:end="3123:48"><expr pos:start="3123:28" pos:end="3123:48"><name pos:start="3123:28" pos:end="3123:35">pc_start</name> <operator pos:start="3123:37" pos:end="3123:37">-</operator> <name pos:start="3123:39" pos:end="3123:48"><name pos:start="3123:39" pos:end="3123:39">s</name><operator pos:start="3123:40" pos:end="3123:41">-&gt;</operator><name pos:start="3123:42" pos:end="3123:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3125:17" pos:end="3125:75"><expr pos:start="3125:17" pos:end="3125:74"><call pos:start="3125:17" pos:end="3125:74"><name pos:start="3125:17" pos:end="3125:32">gen_helper_fsave</name><argument_list pos:start="3125:33" pos:end="3125:74">(<argument pos:start="3125:34" pos:end="3125:40"><expr pos:start="3125:34" pos:end="3125:40"><name pos:start="3125:34" pos:end="3125:40">cpu_env</name></expr></argument>, <argument pos:start="3125:43" pos:end="3125:48"><expr pos:start="3125:43" pos:end="3125:48"><name pos:start="3125:43" pos:end="3125:48">cpu_A0</name></expr></argument>, <argument pos:start="3125:51" pos:end="3125:73"><expr pos:start="3125:51" pos:end="3125:73"><call pos:start="3125:51" pos:end="3125:73"><name pos:start="3125:51" pos:end="3125:63">tcg_const_i32</name><argument_list pos:start="3125:64" pos:end="3125:73">(<argument pos:start="3125:65" pos:end="3125:72"><expr pos:start="3125:65" pos:end="3125:72"><name pos:start="3125:65" pos:end="3125:72"><name pos:start="3125:65" pos:end="3125:65">s</name><operator pos:start="3125:66" pos:end="3125:67">-&gt;</operator><name pos:start="3125:68" pos:end="3125:72">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3127:17" pos:end="3127:22">break;</break>

            <case pos:start="3129:13" pos:end="3129:22">case <expr pos:start="3129:18" pos:end="3129:21"><literal type="number" pos:start="3129:18" pos:end="3129:21">0x2f</literal></expr>:</case> <comment type="block" pos:start="3129:24" pos:end="3129:39">/* fnstsw mem */</comment>

                <expr_stmt pos:start="3131:17" pos:end="3131:57"><expr pos:start="3131:17" pos:end="3131:56"><call pos:start="3131:17" pos:end="3131:56"><name pos:start="3131:17" pos:end="3131:33">gen_helper_fnstsw</name><argument_list pos:start="3131:34" pos:end="3131:56">(<argument pos:start="3131:35" pos:end="3131:46"><expr pos:start="3131:35" pos:end="3131:46"><name pos:start="3131:35" pos:end="3131:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3131:49" pos:end="3131:55"><expr pos:start="3131:49" pos:end="3131:55"><name pos:start="3131:49" pos:end="3131:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3133:17" pos:end="3133:60"><expr pos:start="3133:17" pos:end="3133:59"><call pos:start="3133:17" pos:end="3133:59"><name pos:start="3133:17" pos:end="3133:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="3133:36" pos:end="3133:59">(<argument pos:start="3133:37" pos:end="3133:44"><expr pos:start="3133:37" pos:end="3133:44"><name pos:start="3133:37" pos:end="3133:44"><name pos:start="3133:37" pos:end="3133:41">cpu_T</name><index pos:start="3133:42" pos:end="3133:44">[<expr pos:start="3133:43" pos:end="3133:43"><literal type="number" pos:start="3133:43" pos:end="3133:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3133:47" pos:end="3133:58"><expr pos:start="3133:47" pos:end="3133:58"><name pos:start="3133:47" pos:end="3133:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3135:17" pos:end="3135:56"><expr pos:start="3135:17" pos:end="3135:55"><call pos:start="3135:17" pos:end="3135:55"><name pos:start="3135:17" pos:end="3135:31">gen_op_st_T0_A0</name><argument_list pos:start="3135:32" pos:end="3135:55">(<argument pos:start="3135:33" pos:end="3135:54"><expr pos:start="3135:33" pos:end="3135:54"><name pos:start="3135:33" pos:end="3135:39">OT_WORD</name> <operator pos:start="3135:41" pos:end="3135:41">+</operator> <name pos:start="3135:43" pos:end="3135:54"><name pos:start="3135:43" pos:end="3135:43">s</name><operator pos:start="3135:44" pos:end="3135:45">-&gt;</operator><name pos:start="3135:46" pos:end="3135:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3137:17" pos:end="3137:22">break;</break>

            <case pos:start="3139:13" pos:end="3139:22">case <expr pos:start="3139:18" pos:end="3139:21"><literal type="number" pos:start="3139:18" pos:end="3139:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="3139:24" pos:end="3139:33">/* fbld */</comment>

                <if_stmt pos:start="3141:17" pos:end="3143:47"><if pos:start="3141:17" pos:end="3143:47">if <condition pos:start="3141:20" pos:end="3141:46">(<expr pos:start="3141:21" pos:end="3141:45"><name pos:start="3141:21" pos:end="3141:28"><name pos:start="3141:21" pos:end="3141:21">s</name><operator pos:start="3141:22" pos:end="3141:23">-&gt;</operator><name pos:start="3141:24" pos:end="3141:28">cc_op</name></name> <operator pos:start="3141:30" pos:end="3141:31">!=</operator> <name pos:start="3141:33" pos:end="3141:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3143:21" pos:end="3143:47"><block_content pos:start="3143:21" pos:end="3143:47">

                    <expr_stmt pos:start="3143:21" pos:end="3143:47"><expr pos:start="3143:21" pos:end="3143:46"><call pos:start="3143:21" pos:end="3143:46"><name pos:start="3143:21" pos:end="3143:36">gen_op_set_cc_op</name><argument_list pos:start="3143:37" pos:end="3143:46">(<argument pos:start="3143:38" pos:end="3143:45"><expr pos:start="3143:38" pos:end="3143:45"><name pos:start="3143:38" pos:end="3143:45"><name pos:start="3143:38" pos:end="3143:38">s</name><operator pos:start="3143:39" pos:end="3143:40">-&gt;</operator><name pos:start="3143:41" pos:end="3143:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3145:17" pos:end="3145:50"><expr pos:start="3145:17" pos:end="3145:49"><call pos:start="3145:17" pos:end="3145:49"><name pos:start="3145:17" pos:end="3145:26">gen_jmp_im</name><argument_list pos:start="3145:27" pos:end="3145:49">(<argument pos:start="3145:28" pos:end="3145:48"><expr pos:start="3145:28" pos:end="3145:48"><name pos:start="3145:28" pos:end="3145:35">pc_start</name> <operator pos:start="3145:37" pos:end="3145:37">-</operator> <name pos:start="3145:39" pos:end="3145:48"><name pos:start="3145:39" pos:end="3145:39">s</name><operator pos:start="3145:40" pos:end="3145:41">-&gt;</operator><name pos:start="3145:42" pos:end="3145:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3147:17" pos:end="3147:53"><expr pos:start="3147:17" pos:end="3147:52"><call pos:start="3147:17" pos:end="3147:52"><name pos:start="3147:17" pos:end="3147:35">gen_helper_fbld_ST0</name><argument_list pos:start="3147:36" pos:end="3147:52">(<argument pos:start="3147:37" pos:end="3147:43"><expr pos:start="3147:37" pos:end="3147:43"><name pos:start="3147:37" pos:end="3147:43">cpu_env</name></expr></argument>, <argument pos:start="3147:46" pos:end="3147:51"><expr pos:start="3147:46" pos:end="3147:51"><name pos:start="3147:46" pos:end="3147:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3149:17" pos:end="3149:22">break;</break>

            <case pos:start="3151:13" pos:end="3151:22">case <expr pos:start="3151:18" pos:end="3151:21"><literal type="number" pos:start="3151:18" pos:end="3151:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="3151:24" pos:end="3151:34">/* fbstp */</comment>

                <if_stmt pos:start="3153:17" pos:end="3155:47"><if pos:start="3153:17" pos:end="3155:47">if <condition pos:start="3153:20" pos:end="3153:46">(<expr pos:start="3153:21" pos:end="3153:45"><name pos:start="3153:21" pos:end="3153:28"><name pos:start="3153:21" pos:end="3153:21">s</name><operator pos:start="3153:22" pos:end="3153:23">-&gt;</operator><name pos:start="3153:24" pos:end="3153:28">cc_op</name></name> <operator pos:start="3153:30" pos:end="3153:31">!=</operator> <name pos:start="3153:33" pos:end="3153:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3155:21" pos:end="3155:47"><block_content pos:start="3155:21" pos:end="3155:47">

                    <expr_stmt pos:start="3155:21" pos:end="3155:47"><expr pos:start="3155:21" pos:end="3155:46"><call pos:start="3155:21" pos:end="3155:46"><name pos:start="3155:21" pos:end="3155:36">gen_op_set_cc_op</name><argument_list pos:start="3155:37" pos:end="3155:46">(<argument pos:start="3155:38" pos:end="3155:45"><expr pos:start="3155:38" pos:end="3155:45"><name pos:start="3155:38" pos:end="3155:45"><name pos:start="3155:38" pos:end="3155:38">s</name><operator pos:start="3155:39" pos:end="3155:40">-&gt;</operator><name pos:start="3155:41" pos:end="3155:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3157:17" pos:end="3157:50"><expr pos:start="3157:17" pos:end="3157:49"><call pos:start="3157:17" pos:end="3157:49"><name pos:start="3157:17" pos:end="3157:26">gen_jmp_im</name><argument_list pos:start="3157:27" pos:end="3157:49">(<argument pos:start="3157:28" pos:end="3157:48"><expr pos:start="3157:28" pos:end="3157:48"><name pos:start="3157:28" pos:end="3157:35">pc_start</name> <operator pos:start="3157:37" pos:end="3157:37">-</operator> <name pos:start="3157:39" pos:end="3157:48"><name pos:start="3157:39" pos:end="3157:39">s</name><operator pos:start="3157:40" pos:end="3157:41">-&gt;</operator><name pos:start="3157:42" pos:end="3157:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3159:17" pos:end="3159:53"><expr pos:start="3159:17" pos:end="3159:52"><call pos:start="3159:17" pos:end="3159:52"><name pos:start="3159:17" pos:end="3159:35">gen_helper_fbst_ST0</name><argument_list pos:start="3159:36" pos:end="3159:52">(<argument pos:start="3159:37" pos:end="3159:43"><expr pos:start="3159:37" pos:end="3159:43"><name pos:start="3159:37" pos:end="3159:43">cpu_env</name></expr></argument>, <argument pos:start="3159:46" pos:end="3159:51"><expr pos:start="3159:46" pos:end="3159:51"><name pos:start="3159:46" pos:end="3159:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3161:17" pos:end="3161:41"><expr pos:start="3161:17" pos:end="3161:40"><call pos:start="3161:17" pos:end="3161:40"><name pos:start="3161:17" pos:end="3161:31">gen_helper_fpop</name><argument_list pos:start="3161:32" pos:end="3161:40">(<argument pos:start="3161:33" pos:end="3161:39"><expr pos:start="3161:33" pos:end="3161:39"><name pos:start="3161:33" pos:end="3161:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3163:17" pos:end="3163:22">break;</break>

            <case pos:start="3165:13" pos:end="3165:22">case <expr pos:start="3165:18" pos:end="3165:21"><literal type="number" pos:start="3165:18" pos:end="3165:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="3165:24" pos:end="3165:35">/* fildll */</comment>

                <expr_stmt pos:start="3167:17" pos:end="3169:59"><expr pos:start="3167:17" pos:end="3169:58"><call pos:start="3167:17" pos:end="3169:58"><name pos:start="3167:17" pos:end="3167:33">tcg_gen_qemu_ld64</name><argument_list pos:start="3167:34" pos:end="3169:58">(<argument pos:start="3167:35" pos:end="3167:46"><expr pos:start="3167:35" pos:end="3167:46"><name pos:start="3167:35" pos:end="3167:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3167:49" pos:end="3167:54"><expr pos:start="3167:49" pos:end="3167:54"><name pos:start="3167:49" pos:end="3167:54">cpu_A0</name></expr></argument>, 

                                  <argument pos:start="3169:35" pos:end="3169:57"><expr pos:start="3169:35" pos:end="3169:57"><operator pos:start="3169:35" pos:end="3169:35">(</operator><name pos:start="3169:36" pos:end="3169:47"><name pos:start="3169:36" pos:end="3169:36">s</name><operator pos:start="3169:37" pos:end="3169:38">-&gt;</operator><name pos:start="3169:39" pos:end="3169:47">mem_index</name></name> <operator pos:start="3169:49" pos:end="3169:50">&gt;&gt;</operator> <literal type="number" pos:start="3169:52" pos:end="3169:52">2</literal><operator pos:start="3169:53" pos:end="3169:53">)</operator> <operator pos:start="3169:55" pos:end="3169:55">-</operator> <literal type="number" pos:start="3169:57" pos:end="3169:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3171:17" pos:end="3171:61"><expr pos:start="3171:17" pos:end="3171:60"><call pos:start="3171:17" pos:end="3171:60"><name pos:start="3171:17" pos:end="3171:37">gen_helper_fildll_ST0</name><argument_list pos:start="3171:38" pos:end="3171:60">(<argument pos:start="3171:39" pos:end="3171:45"><expr pos:start="3171:39" pos:end="3171:45"><name pos:start="3171:39" pos:end="3171:45">cpu_env</name></expr></argument>, <argument pos:start="3171:48" pos:end="3171:59"><expr pos:start="3171:48" pos:end="3171:59"><name pos:start="3171:48" pos:end="3171:59">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3173:17" pos:end="3173:22">break;</break>

            <case pos:start="3175:13" pos:end="3175:22">case <expr pos:start="3175:18" pos:end="3175:21"><literal type="number" pos:start="3175:18" pos:end="3175:21">0x3f</literal></expr>:</case> <comment type="block" pos:start="3175:24" pos:end="3175:36">/* fistpll */</comment>

                <expr_stmt pos:start="3177:17" pos:end="3177:61"><expr pos:start="3177:17" pos:end="3177:60"><call pos:start="3177:17" pos:end="3177:60"><name pos:start="3177:17" pos:end="3177:37">gen_helper_fistll_ST0</name><argument_list pos:start="3177:38" pos:end="3177:60">(<argument pos:start="3177:39" pos:end="3177:50"><expr pos:start="3177:39" pos:end="3177:50"><name pos:start="3177:39" pos:end="3177:50">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3177:53" pos:end="3177:59"><expr pos:start="3177:53" pos:end="3177:59"><name pos:start="3177:53" pos:end="3177:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3179:17" pos:end="3181:59"><expr pos:start="3179:17" pos:end="3181:58"><call pos:start="3179:17" pos:end="3181:58"><name pos:start="3179:17" pos:end="3179:33">tcg_gen_qemu_st64</name><argument_list pos:start="3179:34" pos:end="3181:58">(<argument pos:start="3179:35" pos:end="3179:46"><expr pos:start="3179:35" pos:end="3179:46"><name pos:start="3179:35" pos:end="3179:46">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="3179:49" pos:end="3179:54"><expr pos:start="3179:49" pos:end="3179:54"><name pos:start="3179:49" pos:end="3179:54">cpu_A0</name></expr></argument>, 

                                  <argument pos:start="3181:35" pos:end="3181:57"><expr pos:start="3181:35" pos:end="3181:57"><operator pos:start="3181:35" pos:end="3181:35">(</operator><name pos:start="3181:36" pos:end="3181:47"><name pos:start="3181:36" pos:end="3181:36">s</name><operator pos:start="3181:37" pos:end="3181:38">-&gt;</operator><name pos:start="3181:39" pos:end="3181:47">mem_index</name></name> <operator pos:start="3181:49" pos:end="3181:50">&gt;&gt;</operator> <literal type="number" pos:start="3181:52" pos:end="3181:52">2</literal><operator pos:start="3181:53" pos:end="3181:53">)</operator> <operator pos:start="3181:55" pos:end="3181:55">-</operator> <literal type="number" pos:start="3181:57" pos:end="3181:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3183:17" pos:end="3183:41"><expr pos:start="3183:17" pos:end="3183:40"><call pos:start="3183:17" pos:end="3183:40"><name pos:start="3183:17" pos:end="3183:31">gen_helper_fpop</name><argument_list pos:start="3183:32" pos:end="3183:40">(<argument pos:start="3183:33" pos:end="3183:39"><expr pos:start="3183:33" pos:end="3183:39"><name pos:start="3183:33" pos:end="3183:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3185:17" pos:end="3185:22">break;</break>

            <default pos:start="3187:13" pos:end="3187:20">default:</default>

                <goto pos:start="3189:17" pos:end="3189:32">goto <name pos:start="3189:22" pos:end="3189:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="3193:11" pos:end="3791:9">else <block pos:start="3193:16" pos:end="3791:9">{<block_content pos:start="3197:13" pos:end="3789:13">

            <comment type="block" pos:start="3195:13" pos:end="3195:36">/* register float ops */</comment>

            <expr_stmt pos:start="3197:13" pos:end="3197:23"><expr pos:start="3197:13" pos:end="3197:22"><name pos:start="3197:13" pos:end="3197:17">opreg</name> <operator pos:start="3197:19" pos:end="3197:19">=</operator> <name pos:start="3197:21" pos:end="3197:22">rm</name></expr>;</expr_stmt>



            <switch pos:start="3201:13" pos:end="3789:13">switch<condition pos:start="3201:19" pos:end="3201:22">(<expr pos:start="3201:20" pos:end="3201:21"><name pos:start="3201:20" pos:end="3201:21">op</name></expr>)</condition> <block pos:start="3201:24" pos:end="3789:13">{<block_content pos:start="3203:13" pos:end="3787:32">

            <case pos:start="3203:13" pos:end="3203:22">case <expr pos:start="3203:18" pos:end="3203:21"><literal type="number" pos:start="3203:18" pos:end="3203:21">0x08</literal></expr>:</case> <comment type="block" pos:start="3203:24" pos:end="3203:36">/* fld sti */</comment>

                <expr_stmt pos:start="3205:17" pos:end="3205:42"><expr pos:start="3205:17" pos:end="3205:41"><call pos:start="3205:17" pos:end="3205:41"><name pos:start="3205:17" pos:end="3205:32">gen_helper_fpush</name><argument_list pos:start="3205:33" pos:end="3205:41">(<argument pos:start="3205:34" pos:end="3205:40"><expr pos:start="3205:34" pos:end="3205:40"><name pos:start="3205:34" pos:end="3205:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3207:17" pos:end="3209:72"><expr pos:start="3207:17" pos:end="3209:71"><call pos:start="3207:17" pos:end="3209:71"><name pos:start="3207:17" pos:end="3207:39">gen_helper_fmov_ST0_STN</name><argument_list pos:start="3207:40" pos:end="3209:71">(<argument pos:start="3207:41" pos:end="3207:47"><expr pos:start="3207:41" pos:end="3207:47"><name pos:start="3207:41" pos:end="3207:47">cpu_env</name></expr></argument>,

                                        <argument pos:start="3209:41" pos:end="3209:70"><expr pos:start="3209:41" pos:end="3209:70"><call pos:start="3209:41" pos:end="3209:70"><name pos:start="3209:41" pos:end="3209:53">tcg_const_i32</name><argument_list pos:start="3209:54" pos:end="3209:70">(<argument pos:start="3209:55" pos:end="3209:69"><expr pos:start="3209:55" pos:end="3209:69"><operator pos:start="3209:55" pos:end="3209:55">(</operator><name pos:start="3209:56" pos:end="3209:60">opreg</name> <operator pos:start="3209:62" pos:end="3209:62">+</operator> <literal type="number" pos:start="3209:64" pos:end="3209:64">1</literal><operator pos:start="3209:65" pos:end="3209:65">)</operator> <operator pos:start="3209:67" pos:end="3209:67">&amp;</operator> <literal type="number" pos:start="3209:69" pos:end="3209:69">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3211:17" pos:end="3211:22">break;</break>

            <case pos:start="3213:13" pos:end="3213:22">case <expr pos:start="3213:18" pos:end="3213:21"><literal type="number" pos:start="3213:18" pos:end="3213:21">0x09</literal></expr>:</case> <comment type="block" pos:start="3213:24" pos:end="3213:38">/* fxchg sti */</comment>

            <case pos:start="3215:13" pos:end="3215:22">case <expr pos:start="3215:18" pos:end="3215:21"><literal type="number" pos:start="3215:18" pos:end="3215:21">0x29</literal></expr>:</case> <comment type="block" pos:start="3215:24" pos:end="3215:56">/* fxchg4 sti, undocumented op */</comment>

            <case pos:start="3217:13" pos:end="3217:22">case <expr pos:start="3217:18" pos:end="3217:21"><literal type="number" pos:start="3217:18" pos:end="3217:21">0x39</literal></expr>:</case> <comment type="block" pos:start="3217:24" pos:end="3217:56">/* fxchg7 sti, undocumented op */</comment>

                <expr_stmt pos:start="3219:17" pos:end="3219:72"><expr pos:start="3219:17" pos:end="3219:71"><call pos:start="3219:17" pos:end="3219:71"><name pos:start="3219:17" pos:end="3219:40">gen_helper_fxchg_ST0_STN</name><argument_list pos:start="3219:41" pos:end="3219:71">(<argument pos:start="3219:42" pos:end="3219:48"><expr pos:start="3219:42" pos:end="3219:48"><name pos:start="3219:42" pos:end="3219:48">cpu_env</name></expr></argument>, <argument pos:start="3219:51" pos:end="3219:70"><expr pos:start="3219:51" pos:end="3219:70"><call pos:start="3219:51" pos:end="3219:70"><name pos:start="3219:51" pos:end="3219:63">tcg_const_i32</name><argument_list pos:start="3219:64" pos:end="3219:70">(<argument pos:start="3219:65" pos:end="3219:69"><expr pos:start="3219:65" pos:end="3219:69"><name pos:start="3219:65" pos:end="3219:69">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3221:17" pos:end="3221:22">break;</break>

            <case pos:start="3223:13" pos:end="3223:22">case <expr pos:start="3223:18" pos:end="3223:21"><literal type="number" pos:start="3223:18" pos:end="3223:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="3223:24" pos:end="3223:37">/* grp d9/2 */</comment>

                <switch pos:start="3225:17" pos:end="3245:17">switch<condition pos:start="3225:23" pos:end="3225:26">(<expr pos:start="3225:24" pos:end="3225:25"><name pos:start="3225:24" pos:end="3225:25">rm</name></expr>)</condition> <block pos:start="3225:28" pos:end="3245:17">{<block_content pos:start="3227:17" pos:end="3243:36">

                <case pos:start="3227:17" pos:end="3227:23">case <expr pos:start="3227:22" pos:end="3227:22"><literal type="number" pos:start="3227:22" pos:end="3227:22">0</literal></expr>:</case> <comment type="block" pos:start="3227:25" pos:end="3227:34">/* fnop */</comment>

                    <comment type="block" pos:start="3229:21" pos:end="3229:62">/* check exceptions (FreeBSD FPU probe) */</comment>

                    <if_stmt pos:start="3231:21" pos:end="3233:51"><if pos:start="3231:21" pos:end="3233:51">if <condition pos:start="3231:24" pos:end="3231:50">(<expr pos:start="3231:25" pos:end="3231:49"><name pos:start="3231:25" pos:end="3231:32"><name pos:start="3231:25" pos:end="3231:25">s</name><operator pos:start="3231:26" pos:end="3231:27">-&gt;</operator><name pos:start="3231:28" pos:end="3231:32">cc_op</name></name> <operator pos:start="3231:34" pos:end="3231:35">!=</operator> <name pos:start="3231:37" pos:end="3231:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3233:25" pos:end="3233:51"><block_content pos:start="3233:25" pos:end="3233:51">

                        <expr_stmt pos:start="3233:25" pos:end="3233:51"><expr pos:start="3233:25" pos:end="3233:50"><call pos:start="3233:25" pos:end="3233:50"><name pos:start="3233:25" pos:end="3233:40">gen_op_set_cc_op</name><argument_list pos:start="3233:41" pos:end="3233:50">(<argument pos:start="3233:42" pos:end="3233:49"><expr pos:start="3233:42" pos:end="3233:49"><name pos:start="3233:42" pos:end="3233:49"><name pos:start="3233:42" pos:end="3233:42">s</name><operator pos:start="3233:43" pos:end="3233:44">-&gt;</operator><name pos:start="3233:45" pos:end="3233:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="3235:21" pos:end="3235:54"><expr pos:start="3235:21" pos:end="3235:53"><call pos:start="3235:21" pos:end="3235:53"><name pos:start="3235:21" pos:end="3235:30">gen_jmp_im</name><argument_list pos:start="3235:31" pos:end="3235:53">(<argument pos:start="3235:32" pos:end="3235:52"><expr pos:start="3235:32" pos:end="3235:52"><name pos:start="3235:32" pos:end="3235:39">pc_start</name> <operator pos:start="3235:41" pos:end="3235:41">-</operator> <name pos:start="3235:43" pos:end="3235:52"><name pos:start="3235:43" pos:end="3235:43">s</name><operator pos:start="3235:44" pos:end="3235:45">-&gt;</operator><name pos:start="3235:46" pos:end="3235:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3237:21" pos:end="3237:46"><expr pos:start="3237:21" pos:end="3237:45"><call pos:start="3237:21" pos:end="3237:45"><name pos:start="3237:21" pos:end="3237:36">gen_helper_fwait</name><argument_list pos:start="3237:37" pos:end="3237:45">(<argument pos:start="3237:38" pos:end="3237:44"><expr pos:start="3237:38" pos:end="3237:44"><name pos:start="3237:38" pos:end="3237:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3239:21" pos:end="3239:26">break;</break>

                <default pos:start="3241:17" pos:end="3241:24">default:</default>

                    <goto pos:start="3243:21" pos:end="3243:36">goto <name pos:start="3243:26" pos:end="3243:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3247:17" pos:end="3247:22">break;</break>

            <case pos:start="3249:13" pos:end="3249:22">case <expr pos:start="3249:18" pos:end="3249:21"><literal type="number" pos:start="3249:18" pos:end="3249:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="3249:24" pos:end="3249:37">/* grp d9/4 */</comment>

                <switch pos:start="3251:17" pos:end="3283:17">switch<condition pos:start="3251:23" pos:end="3251:26">(<expr pos:start="3251:24" pos:end="3251:25"><name pos:start="3251:24" pos:end="3251:25">rm</name></expr>)</condition> <block pos:start="3251:28" pos:end="3283:17">{<block_content pos:start="3253:17" pos:end="3281:36">

                <case pos:start="3253:17" pos:end="3253:23">case <expr pos:start="3253:22" pos:end="3253:22"><literal type="number" pos:start="3253:22" pos:end="3253:22">0</literal></expr>:</case> <comment type="block" pos:start="3253:25" pos:end="3253:34">/* fchs */</comment>

                    <expr_stmt pos:start="3255:21" pos:end="3255:49"><expr pos:start="3255:21" pos:end="3255:48"><call pos:start="3255:21" pos:end="3255:48"><name pos:start="3255:21" pos:end="3255:39">gen_helper_fchs_ST0</name><argument_list pos:start="3255:40" pos:end="3255:48">(<argument pos:start="3255:41" pos:end="3255:47"><expr pos:start="3255:41" pos:end="3255:47"><name pos:start="3255:41" pos:end="3255:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3257:21" pos:end="3257:26">break;</break>

                <case pos:start="3259:17" pos:end="3259:23">case <expr pos:start="3259:22" pos:end="3259:22"><literal type="number" pos:start="3259:22" pos:end="3259:22">1</literal></expr>:</case> <comment type="block" pos:start="3259:25" pos:end="3259:34">/* fabs */</comment>

                    <expr_stmt pos:start="3261:21" pos:end="3261:49"><expr pos:start="3261:21" pos:end="3261:48"><call pos:start="3261:21" pos:end="3261:48"><name pos:start="3261:21" pos:end="3261:39">gen_helper_fabs_ST0</name><argument_list pos:start="3261:40" pos:end="3261:48">(<argument pos:start="3261:41" pos:end="3261:47"><expr pos:start="3261:41" pos:end="3261:47"><name pos:start="3261:41" pos:end="3261:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3263:21" pos:end="3263:26">break;</break>

                <case pos:start="3265:17" pos:end="3265:23">case <expr pos:start="3265:22" pos:end="3265:22"><literal type="number" pos:start="3265:22" pos:end="3265:22">4</literal></expr>:</case> <comment type="block" pos:start="3265:25" pos:end="3265:34">/* ftst */</comment>

                    <expr_stmt pos:start="3267:21" pos:end="3267:49"><expr pos:start="3267:21" pos:end="3267:48"><call pos:start="3267:21" pos:end="3267:48"><name pos:start="3267:21" pos:end="3267:39">gen_helper_fldz_FT0</name><argument_list pos:start="3267:40" pos:end="3267:48">(<argument pos:start="3267:41" pos:end="3267:47"><expr pos:start="3267:41" pos:end="3267:47"><name pos:start="3267:41" pos:end="3267:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3269:21" pos:end="3269:53"><expr pos:start="3269:21" pos:end="3269:52"><call pos:start="3269:21" pos:end="3269:52"><name pos:start="3269:21" pos:end="3269:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3269:44" pos:end="3269:52">(<argument pos:start="3269:45" pos:end="3269:51"><expr pos:start="3269:45" pos:end="3269:51"><name pos:start="3269:45" pos:end="3269:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3271:21" pos:end="3271:26">break;</break>

                <case pos:start="3273:17" pos:end="3273:23">case <expr pos:start="3273:22" pos:end="3273:22"><literal type="number" pos:start="3273:22" pos:end="3273:22">5</literal></expr>:</case> <comment type="block" pos:start="3273:25" pos:end="3273:34">/* fxam */</comment>

                    <expr_stmt pos:start="3275:21" pos:end="3275:49"><expr pos:start="3275:21" pos:end="3275:48"><call pos:start="3275:21" pos:end="3275:48"><name pos:start="3275:21" pos:end="3275:39">gen_helper_fxam_ST0</name><argument_list pos:start="3275:40" pos:end="3275:48">(<argument pos:start="3275:41" pos:end="3275:47"><expr pos:start="3275:41" pos:end="3275:47"><name pos:start="3275:41" pos:end="3275:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3277:21" pos:end="3277:26">break;</break>

                <default pos:start="3279:17" pos:end="3279:24">default:</default>

                    <goto pos:start="3281:21" pos:end="3281:36">goto <name pos:start="3281:26" pos:end="3281:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3285:17" pos:end="3285:22">break;</break>

            <case pos:start="3287:13" pos:end="3287:22">case <expr pos:start="3287:18" pos:end="3287:21"><literal type="number" pos:start="3287:18" pos:end="3287:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="3287:24" pos:end="3287:37">/* grp d9/5 */</comment>

                <block pos:start="3289:17" pos:end="3355:17">{<block_content pos:start="3291:21" pos:end="3353:21">

                    <switch pos:start="3291:21" pos:end="3353:21">switch<condition pos:start="3291:27" pos:end="3291:30">(<expr pos:start="3291:28" pos:end="3291:29"><name pos:start="3291:28" pos:end="3291:29">rm</name></expr>)</condition> <block pos:start="3291:32" pos:end="3353:21">{<block_content pos:start="3293:21" pos:end="3351:40">

                    <case pos:start="3293:21" pos:end="3293:27">case <expr pos:start="3293:26" pos:end="3293:26"><literal type="number" pos:start="3293:26" pos:end="3293:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="3295:25" pos:end="3295:50"><expr pos:start="3295:25" pos:end="3295:49"><call pos:start="3295:25" pos:end="3295:49"><name pos:start="3295:25" pos:end="3295:40">gen_helper_fpush</name><argument_list pos:start="3295:41" pos:end="3295:49">(<argument pos:start="3295:42" pos:end="3295:48"><expr pos:start="3295:42" pos:end="3295:48"><name pos:start="3295:42" pos:end="3295:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3297:25" pos:end="3297:53"><expr pos:start="3297:25" pos:end="3297:52"><call pos:start="3297:25" pos:end="3297:52"><name pos:start="3297:25" pos:end="3297:43">gen_helper_fld1_ST0</name><argument_list pos:start="3297:44" pos:end="3297:52">(<argument pos:start="3297:45" pos:end="3297:51"><expr pos:start="3297:45" pos:end="3297:51"><name pos:start="3297:45" pos:end="3297:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3299:25" pos:end="3299:30">break;</break>

                    <case pos:start="3301:21" pos:end="3301:27">case <expr pos:start="3301:26" pos:end="3301:26"><literal type="number" pos:start="3301:26" pos:end="3301:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="3303:25" pos:end="3303:50"><expr pos:start="3303:25" pos:end="3303:49"><call pos:start="3303:25" pos:end="3303:49"><name pos:start="3303:25" pos:end="3303:40">gen_helper_fpush</name><argument_list pos:start="3303:41" pos:end="3303:49">(<argument pos:start="3303:42" pos:end="3303:48"><expr pos:start="3303:42" pos:end="3303:48"><name pos:start="3303:42" pos:end="3303:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3305:25" pos:end="3305:55"><expr pos:start="3305:25" pos:end="3305:54"><call pos:start="3305:25" pos:end="3305:54"><name pos:start="3305:25" pos:end="3305:45">gen_helper_fldl2t_ST0</name><argument_list pos:start="3305:46" pos:end="3305:54">(<argument pos:start="3305:47" pos:end="3305:53"><expr pos:start="3305:47" pos:end="3305:53"><name pos:start="3305:47" pos:end="3305:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3307:25" pos:end="3307:30">break;</break>

                    <case pos:start="3309:21" pos:end="3309:27">case <expr pos:start="3309:26" pos:end="3309:26"><literal type="number" pos:start="3309:26" pos:end="3309:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="3311:25" pos:end="3311:50"><expr pos:start="3311:25" pos:end="3311:49"><call pos:start="3311:25" pos:end="3311:49"><name pos:start="3311:25" pos:end="3311:40">gen_helper_fpush</name><argument_list pos:start="3311:41" pos:end="3311:49">(<argument pos:start="3311:42" pos:end="3311:48"><expr pos:start="3311:42" pos:end="3311:48"><name pos:start="3311:42" pos:end="3311:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3313:25" pos:end="3313:55"><expr pos:start="3313:25" pos:end="3313:54"><call pos:start="3313:25" pos:end="3313:54"><name pos:start="3313:25" pos:end="3313:45">gen_helper_fldl2e_ST0</name><argument_list pos:start="3313:46" pos:end="3313:54">(<argument pos:start="3313:47" pos:end="3313:53"><expr pos:start="3313:47" pos:end="3313:53"><name pos:start="3313:47" pos:end="3313:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3315:25" pos:end="3315:30">break;</break>

                    <case pos:start="3317:21" pos:end="3317:27">case <expr pos:start="3317:26" pos:end="3317:26"><literal type="number" pos:start="3317:26" pos:end="3317:26">3</literal></expr>:</case>

                        <expr_stmt pos:start="3319:25" pos:end="3319:50"><expr pos:start="3319:25" pos:end="3319:49"><call pos:start="3319:25" pos:end="3319:49"><name pos:start="3319:25" pos:end="3319:40">gen_helper_fpush</name><argument_list pos:start="3319:41" pos:end="3319:49">(<argument pos:start="3319:42" pos:end="3319:48"><expr pos:start="3319:42" pos:end="3319:48"><name pos:start="3319:42" pos:end="3319:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3321:25" pos:end="3321:54"><expr pos:start="3321:25" pos:end="3321:53"><call pos:start="3321:25" pos:end="3321:53"><name pos:start="3321:25" pos:end="3321:44">gen_helper_fldpi_ST0</name><argument_list pos:start="3321:45" pos:end="3321:53">(<argument pos:start="3321:46" pos:end="3321:52"><expr pos:start="3321:46" pos:end="3321:52"><name pos:start="3321:46" pos:end="3321:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3323:25" pos:end="3323:30">break;</break>

                    <case pos:start="3325:21" pos:end="3325:27">case <expr pos:start="3325:26" pos:end="3325:26"><literal type="number" pos:start="3325:26" pos:end="3325:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="3327:25" pos:end="3327:50"><expr pos:start="3327:25" pos:end="3327:49"><call pos:start="3327:25" pos:end="3327:49"><name pos:start="3327:25" pos:end="3327:40">gen_helper_fpush</name><argument_list pos:start="3327:41" pos:end="3327:49">(<argument pos:start="3327:42" pos:end="3327:48"><expr pos:start="3327:42" pos:end="3327:48"><name pos:start="3327:42" pos:end="3327:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3329:25" pos:end="3329:55"><expr pos:start="3329:25" pos:end="3329:54"><call pos:start="3329:25" pos:end="3329:54"><name pos:start="3329:25" pos:end="3329:45">gen_helper_fldlg2_ST0</name><argument_list pos:start="3329:46" pos:end="3329:54">(<argument pos:start="3329:47" pos:end="3329:53"><expr pos:start="3329:47" pos:end="3329:53"><name pos:start="3329:47" pos:end="3329:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3331:25" pos:end="3331:30">break;</break>

                    <case pos:start="3333:21" pos:end="3333:27">case <expr pos:start="3333:26" pos:end="3333:26"><literal type="number" pos:start="3333:26" pos:end="3333:26">5</literal></expr>:</case>

                        <expr_stmt pos:start="3335:25" pos:end="3335:50"><expr pos:start="3335:25" pos:end="3335:49"><call pos:start="3335:25" pos:end="3335:49"><name pos:start="3335:25" pos:end="3335:40">gen_helper_fpush</name><argument_list pos:start="3335:41" pos:end="3335:49">(<argument pos:start="3335:42" pos:end="3335:48"><expr pos:start="3335:42" pos:end="3335:48"><name pos:start="3335:42" pos:end="3335:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3337:25" pos:end="3337:55"><expr pos:start="3337:25" pos:end="3337:54"><call pos:start="3337:25" pos:end="3337:54"><name pos:start="3337:25" pos:end="3337:45">gen_helper_fldln2_ST0</name><argument_list pos:start="3337:46" pos:end="3337:54">(<argument pos:start="3337:47" pos:end="3337:53"><expr pos:start="3337:47" pos:end="3337:53"><name pos:start="3337:47" pos:end="3337:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3339:25" pos:end="3339:30">break;</break>

                    <case pos:start="3341:21" pos:end="3341:27">case <expr pos:start="3341:26" pos:end="3341:26"><literal type="number" pos:start="3341:26" pos:end="3341:26">6</literal></expr>:</case>

                        <expr_stmt pos:start="3343:25" pos:end="3343:50"><expr pos:start="3343:25" pos:end="3343:49"><call pos:start="3343:25" pos:end="3343:49"><name pos:start="3343:25" pos:end="3343:40">gen_helper_fpush</name><argument_list pos:start="3343:41" pos:end="3343:49">(<argument pos:start="3343:42" pos:end="3343:48"><expr pos:start="3343:42" pos:end="3343:48"><name pos:start="3343:42" pos:end="3343:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3345:25" pos:end="3345:53"><expr pos:start="3345:25" pos:end="3345:52"><call pos:start="3345:25" pos:end="3345:52"><name pos:start="3345:25" pos:end="3345:43">gen_helper_fldz_ST0</name><argument_list pos:start="3345:44" pos:end="3345:52">(<argument pos:start="3345:45" pos:end="3345:51"><expr pos:start="3345:45" pos:end="3345:51"><name pos:start="3345:45" pos:end="3345:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3347:25" pos:end="3347:30">break;</break>

                    <default pos:start="3349:21" pos:end="3349:28">default:</default>

                        <goto pos:start="3351:25" pos:end="3351:40">goto <name pos:start="3351:30" pos:end="3351:39">illegal_op</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block>

                <break pos:start="3357:17" pos:end="3357:22">break;</break>

            <case pos:start="3359:13" pos:end="3359:22">case <expr pos:start="3359:18" pos:end="3359:21"><literal type="number" pos:start="3359:18" pos:end="3359:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="3359:24" pos:end="3359:37">/* grp d9/6 */</comment>

                <switch pos:start="3361:17" pos:end="3413:17">switch<condition pos:start="3361:23" pos:end="3361:26">(<expr pos:start="3361:24" pos:end="3361:25"><name pos:start="3361:24" pos:end="3361:25">rm</name></expr>)</condition> <block pos:start="3361:28" pos:end="3413:17">{<block_content pos:start="3363:17" pos:end="3411:26">

                <case pos:start="3363:17" pos:end="3363:23">case <expr pos:start="3363:22" pos:end="3363:22"><literal type="number" pos:start="3363:22" pos:end="3363:22">0</literal></expr>:</case> <comment type="block" pos:start="3363:25" pos:end="3363:35">/* f2xm1 */</comment>

                    <expr_stmt pos:start="3365:21" pos:end="3365:46"><expr pos:start="3365:21" pos:end="3365:45"><call pos:start="3365:21" pos:end="3365:45"><name pos:start="3365:21" pos:end="3365:36">gen_helper_f2xm1</name><argument_list pos:start="3365:37" pos:end="3365:45">(<argument pos:start="3365:38" pos:end="3365:44"><expr pos:start="3365:38" pos:end="3365:44"><name pos:start="3365:38" pos:end="3365:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3367:21" pos:end="3367:26">break;</break>

                <case pos:start="3369:17" pos:end="3369:23">case <expr pos:start="3369:22" pos:end="3369:22"><literal type="number" pos:start="3369:22" pos:end="3369:22">1</literal></expr>:</case> <comment type="block" pos:start="3369:25" pos:end="3369:35">/* fyl2x */</comment>

                    <expr_stmt pos:start="3371:21" pos:end="3371:46"><expr pos:start="3371:21" pos:end="3371:45"><call pos:start="3371:21" pos:end="3371:45"><name pos:start="3371:21" pos:end="3371:36">gen_helper_fyl2x</name><argument_list pos:start="3371:37" pos:end="3371:45">(<argument pos:start="3371:38" pos:end="3371:44"><expr pos:start="3371:38" pos:end="3371:44"><name pos:start="3371:38" pos:end="3371:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3373:21" pos:end="3373:26">break;</break>

                <case pos:start="3375:17" pos:end="3375:23">case <expr pos:start="3375:22" pos:end="3375:22"><literal type="number" pos:start="3375:22" pos:end="3375:22">2</literal></expr>:</case> <comment type="block" pos:start="3375:25" pos:end="3375:35">/* fptan */</comment>

                    <expr_stmt pos:start="3377:21" pos:end="3377:46"><expr pos:start="3377:21" pos:end="3377:45"><call pos:start="3377:21" pos:end="3377:45"><name pos:start="3377:21" pos:end="3377:36">gen_helper_fptan</name><argument_list pos:start="3377:37" pos:end="3377:45">(<argument pos:start="3377:38" pos:end="3377:44"><expr pos:start="3377:38" pos:end="3377:44"><name pos:start="3377:38" pos:end="3377:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3379:21" pos:end="3379:26">break;</break>

                <case pos:start="3381:17" pos:end="3381:23">case <expr pos:start="3381:22" pos:end="3381:22"><literal type="number" pos:start="3381:22" pos:end="3381:22">3</literal></expr>:</case> <comment type="block" pos:start="3381:25" pos:end="3381:36">/* fpatan */</comment>

                    <expr_stmt pos:start="3383:21" pos:end="3383:47"><expr pos:start="3383:21" pos:end="3383:46"><call pos:start="3383:21" pos:end="3383:46"><name pos:start="3383:21" pos:end="3383:37">gen_helper_fpatan</name><argument_list pos:start="3383:38" pos:end="3383:46">(<argument pos:start="3383:39" pos:end="3383:45"><expr pos:start="3383:39" pos:end="3383:45"><name pos:start="3383:39" pos:end="3383:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3385:21" pos:end="3385:26">break;</break>

                <case pos:start="3387:17" pos:end="3387:23">case <expr pos:start="3387:22" pos:end="3387:22"><literal type="number" pos:start="3387:22" pos:end="3387:22">4</literal></expr>:</case> <comment type="block" pos:start="3387:25" pos:end="3387:37">/* fxtract */</comment>

                    <expr_stmt pos:start="3389:21" pos:end="3389:48"><expr pos:start="3389:21" pos:end="3389:47"><call pos:start="3389:21" pos:end="3389:47"><name pos:start="3389:21" pos:end="3389:38">gen_helper_fxtract</name><argument_list pos:start="3389:39" pos:end="3389:47">(<argument pos:start="3389:40" pos:end="3389:46"><expr pos:start="3389:40" pos:end="3389:46"><name pos:start="3389:40" pos:end="3389:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3391:21" pos:end="3391:26">break;</break>

                <case pos:start="3393:17" pos:end="3393:23">case <expr pos:start="3393:22" pos:end="3393:22"><literal type="number" pos:start="3393:22" pos:end="3393:22">5</literal></expr>:</case> <comment type="block" pos:start="3393:25" pos:end="3393:36">/* fprem1 */</comment>

                    <expr_stmt pos:start="3395:21" pos:end="3395:47"><expr pos:start="3395:21" pos:end="3395:46"><call pos:start="3395:21" pos:end="3395:46"><name pos:start="3395:21" pos:end="3395:37">gen_helper_fprem1</name><argument_list pos:start="3395:38" pos:end="3395:46">(<argument pos:start="3395:39" pos:end="3395:45"><expr pos:start="3395:39" pos:end="3395:45"><name pos:start="3395:39" pos:end="3395:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3397:21" pos:end="3397:26">break;</break>

                <case pos:start="3399:17" pos:end="3399:23">case <expr pos:start="3399:22" pos:end="3399:22"><literal type="number" pos:start="3399:22" pos:end="3399:22">6</literal></expr>:</case> <comment type="block" pos:start="3399:25" pos:end="3399:37">/* fdecstp */</comment>

                    <expr_stmt pos:start="3401:21" pos:end="3401:48"><expr pos:start="3401:21" pos:end="3401:47"><call pos:start="3401:21" pos:end="3401:47"><name pos:start="3401:21" pos:end="3401:38">gen_helper_fdecstp</name><argument_list pos:start="3401:39" pos:end="3401:47">(<argument pos:start="3401:40" pos:end="3401:46"><expr pos:start="3401:40" pos:end="3401:46"><name pos:start="3401:40" pos:end="3401:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3403:21" pos:end="3403:26">break;</break>

                <default pos:start="3405:17" pos:end="3405:24">default:</default>

                <case pos:start="3407:17" pos:end="3407:23">case <expr pos:start="3407:22" pos:end="3407:22"><literal type="number" pos:start="3407:22" pos:end="3407:22">7</literal></expr>:</case> <comment type="block" pos:start="3407:25" pos:end="3407:37">/* fincstp */</comment>

                    <expr_stmt pos:start="3409:21" pos:end="3409:48"><expr pos:start="3409:21" pos:end="3409:47"><call pos:start="3409:21" pos:end="3409:47"><name pos:start="3409:21" pos:end="3409:38">gen_helper_fincstp</name><argument_list pos:start="3409:39" pos:end="3409:47">(<argument pos:start="3409:40" pos:end="3409:46"><expr pos:start="3409:40" pos:end="3409:46"><name pos:start="3409:40" pos:end="3409:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3411:21" pos:end="3411:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3415:17" pos:end="3415:22">break;</break>

            <case pos:start="3417:13" pos:end="3417:22">case <expr pos:start="3417:18" pos:end="3417:21"><literal type="number" pos:start="3417:18" pos:end="3417:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="3417:24" pos:end="3417:37">/* grp d9/7 */</comment>

                <switch pos:start="3419:17" pos:end="3471:17">switch<condition pos:start="3419:23" pos:end="3419:26">(<expr pos:start="3419:24" pos:end="3419:25"><name pos:start="3419:24" pos:end="3419:25">rm</name></expr>)</condition> <block pos:start="3419:28" pos:end="3471:17">{<block_content pos:start="3421:17" pos:end="3469:26">

                <case pos:start="3421:17" pos:end="3421:23">case <expr pos:start="3421:22" pos:end="3421:22"><literal type="number" pos:start="3421:22" pos:end="3421:22">0</literal></expr>:</case> <comment type="block" pos:start="3421:25" pos:end="3421:35">/* fprem */</comment>

                    <expr_stmt pos:start="3423:21" pos:end="3423:46"><expr pos:start="3423:21" pos:end="3423:45"><call pos:start="3423:21" pos:end="3423:45"><name pos:start="3423:21" pos:end="3423:36">gen_helper_fprem</name><argument_list pos:start="3423:37" pos:end="3423:45">(<argument pos:start="3423:38" pos:end="3423:44"><expr pos:start="3423:38" pos:end="3423:44"><name pos:start="3423:38" pos:end="3423:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3425:21" pos:end="3425:26">break;</break>

                <case pos:start="3427:17" pos:end="3427:23">case <expr pos:start="3427:22" pos:end="3427:22"><literal type="number" pos:start="3427:22" pos:end="3427:22">1</literal></expr>:</case> <comment type="block" pos:start="3427:25" pos:end="3427:37">/* fyl2xp1 */</comment>

                    <expr_stmt pos:start="3429:21" pos:end="3429:48"><expr pos:start="3429:21" pos:end="3429:47"><call pos:start="3429:21" pos:end="3429:47"><name pos:start="3429:21" pos:end="3429:38">gen_helper_fyl2xp1</name><argument_list pos:start="3429:39" pos:end="3429:47">(<argument pos:start="3429:40" pos:end="3429:46"><expr pos:start="3429:40" pos:end="3429:46"><name pos:start="3429:40" pos:end="3429:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3431:21" pos:end="3431:26">break;</break>

                <case pos:start="3433:17" pos:end="3433:23">case <expr pos:start="3433:22" pos:end="3433:22"><literal type="number" pos:start="3433:22" pos:end="3433:22">2</literal></expr>:</case> <comment type="block" pos:start="3433:25" pos:end="3433:35">/* fsqrt */</comment>

                    <expr_stmt pos:start="3435:21" pos:end="3435:46"><expr pos:start="3435:21" pos:end="3435:45"><call pos:start="3435:21" pos:end="3435:45"><name pos:start="3435:21" pos:end="3435:36">gen_helper_fsqrt</name><argument_list pos:start="3435:37" pos:end="3435:45">(<argument pos:start="3435:38" pos:end="3435:44"><expr pos:start="3435:38" pos:end="3435:44"><name pos:start="3435:38" pos:end="3435:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3437:21" pos:end="3437:26">break;</break>

                <case pos:start="3439:17" pos:end="3439:23">case <expr pos:start="3439:22" pos:end="3439:22"><literal type="number" pos:start="3439:22" pos:end="3439:22">3</literal></expr>:</case> <comment type="block" pos:start="3439:25" pos:end="3439:37">/* fsincos */</comment>

                    <expr_stmt pos:start="3441:21" pos:end="3441:48"><expr pos:start="3441:21" pos:end="3441:47"><call pos:start="3441:21" pos:end="3441:47"><name pos:start="3441:21" pos:end="3441:38">gen_helper_fsincos</name><argument_list pos:start="3441:39" pos:end="3441:47">(<argument pos:start="3441:40" pos:end="3441:46"><expr pos:start="3441:40" pos:end="3441:46"><name pos:start="3441:40" pos:end="3441:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3443:21" pos:end="3443:26">break;</break>

                <case pos:start="3445:17" pos:end="3445:23">case <expr pos:start="3445:22" pos:end="3445:22"><literal type="number" pos:start="3445:22" pos:end="3445:22">5</literal></expr>:</case> <comment type="block" pos:start="3445:25" pos:end="3445:36">/* fscale */</comment>

                    <expr_stmt pos:start="3447:21" pos:end="3447:47"><expr pos:start="3447:21" pos:end="3447:46"><call pos:start="3447:21" pos:end="3447:46"><name pos:start="3447:21" pos:end="3447:37">gen_helper_fscale</name><argument_list pos:start="3447:38" pos:end="3447:46">(<argument pos:start="3447:39" pos:end="3447:45"><expr pos:start="3447:39" pos:end="3447:45"><name pos:start="3447:39" pos:end="3447:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3449:21" pos:end="3449:26">break;</break>

                <case pos:start="3451:17" pos:end="3451:23">case <expr pos:start="3451:22" pos:end="3451:22"><literal type="number" pos:start="3451:22" pos:end="3451:22">4</literal></expr>:</case> <comment type="block" pos:start="3451:25" pos:end="3451:37">/* frndint */</comment>

                    <expr_stmt pos:start="3453:21" pos:end="3453:48"><expr pos:start="3453:21" pos:end="3453:47"><call pos:start="3453:21" pos:end="3453:47"><name pos:start="3453:21" pos:end="3453:38">gen_helper_frndint</name><argument_list pos:start="3453:39" pos:end="3453:47">(<argument pos:start="3453:40" pos:end="3453:46"><expr pos:start="3453:40" pos:end="3453:46"><name pos:start="3453:40" pos:end="3453:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3455:21" pos:end="3455:26">break;</break>

                <case pos:start="3457:17" pos:end="3457:23">case <expr pos:start="3457:22" pos:end="3457:22"><literal type="number" pos:start="3457:22" pos:end="3457:22">6</literal></expr>:</case> <comment type="block" pos:start="3457:25" pos:end="3457:34">/* fsin */</comment>

                    <expr_stmt pos:start="3459:21" pos:end="3459:45"><expr pos:start="3459:21" pos:end="3459:44"><call pos:start="3459:21" pos:end="3459:44"><name pos:start="3459:21" pos:end="3459:35">gen_helper_fsin</name><argument_list pos:start="3459:36" pos:end="3459:44">(<argument pos:start="3459:37" pos:end="3459:43"><expr pos:start="3459:37" pos:end="3459:43"><name pos:start="3459:37" pos:end="3459:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3461:21" pos:end="3461:26">break;</break>

                <default pos:start="3463:17" pos:end="3463:24">default:</default>

                <case pos:start="3465:17" pos:end="3465:23">case <expr pos:start="3465:22" pos:end="3465:22"><literal type="number" pos:start="3465:22" pos:end="3465:22">7</literal></expr>:</case> <comment type="block" pos:start="3465:25" pos:end="3465:34">/* fcos */</comment>

                    <expr_stmt pos:start="3467:21" pos:end="3467:45"><expr pos:start="3467:21" pos:end="3467:44"><call pos:start="3467:21" pos:end="3467:44"><name pos:start="3467:21" pos:end="3467:35">gen_helper_fcos</name><argument_list pos:start="3467:36" pos:end="3467:44">(<argument pos:start="3467:37" pos:end="3467:43"><expr pos:start="3467:37" pos:end="3467:43"><name pos:start="3467:37" pos:end="3467:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3469:21" pos:end="3469:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="3473:17" pos:end="3473:22">break;</break>

            <case pos:start="3475:13" pos:end="3475:22">case <expr pos:start="3475:18" pos:end="3475:21"><literal type="number" pos:start="3475:18" pos:end="3475:21">0x00</literal></expr>:</case> <case pos:start="3475:24" pos:end="3475:33">case <expr pos:start="3475:29" pos:end="3475:32"><literal type="number" pos:start="3475:29" pos:end="3475:32">0x01</literal></expr>:</case> <case pos:start="3475:35" pos:end="3475:53">case <expr pos:start="3475:40" pos:end="3475:52"><literal type="number" pos:start="3475:40" pos:end="3475:43">0x04</literal> <operator pos:start="3475:45" pos:end="3475:47">...</operator> <literal type="number" pos:start="3475:49" pos:end="3475:52">0x07</literal></expr>:</case> <comment type="block" pos:start="3475:55" pos:end="3475:72">/* fxxx st, sti */</comment>

            <case pos:start="3477:13" pos:end="3477:22">case <expr pos:start="3477:18" pos:end="3477:21"><literal type="number" pos:start="3477:18" pos:end="3477:21">0x20</literal></expr>:</case> <case pos:start="3477:24" pos:end="3477:33">case <expr pos:start="3477:29" pos:end="3477:32"><literal type="number" pos:start="3477:29" pos:end="3477:32">0x21</literal></expr>:</case> <case pos:start="3477:35" pos:end="3477:53">case <expr pos:start="3477:40" pos:end="3477:52"><literal type="number" pos:start="3477:40" pos:end="3477:43">0x24</literal> <operator pos:start="3477:45" pos:end="3477:47">...</operator> <literal type="number" pos:start="3477:49" pos:end="3477:52">0x27</literal></expr>:</case> <comment type="block" pos:start="3477:55" pos:end="3477:72">/* fxxx sti, st */</comment>

            <case pos:start="3479:13" pos:end="3479:22">case <expr pos:start="3479:18" pos:end="3479:21"><literal type="number" pos:start="3479:18" pos:end="3479:21">0x30</literal></expr>:</case> <case pos:start="3479:24" pos:end="3479:33">case <expr pos:start="3479:29" pos:end="3479:32"><literal type="number" pos:start="3479:29" pos:end="3479:32">0x31</literal></expr>:</case> <case pos:start="3479:35" pos:end="3479:53">case <expr pos:start="3479:40" pos:end="3479:52"><literal type="number" pos:start="3479:40" pos:end="3479:43">0x34</literal> <operator pos:start="3479:45" pos:end="3479:47">...</operator> <literal type="number" pos:start="3479:49" pos:end="3479:52">0x37</literal></expr>:</case> <comment type="block" pos:start="3479:55" pos:end="3479:73">/* fxxxp sti, st */</comment>

                <block pos:start="3481:17" pos:end="3505:17">{<block_content pos:start="3483:21" pos:end="3503:21">

                    <decl_stmt pos:start="3483:21" pos:end="3483:28"><decl pos:start="3483:21" pos:end="3483:27"><type pos:start="3483:21" pos:end="3483:23"><name pos:start="3483:21" pos:end="3483:23">int</name></type> <name pos:start="3483:25" pos:end="3483:27">op1</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="3487:21" pos:end="3487:33"><expr pos:start="3487:21" pos:end="3487:32"><name pos:start="3487:21" pos:end="3487:23">op1</name> <operator pos:start="3487:25" pos:end="3487:25">=</operator> <name pos:start="3487:27" pos:end="3487:28">op</name> <operator pos:start="3487:30" pos:end="3487:30">&amp;</operator> <literal type="number" pos:start="3487:32" pos:end="3487:32">7</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="3489:21" pos:end="3503:21"><if pos:start="3489:21" pos:end="3497:21">if <condition pos:start="3489:24" pos:end="3489:35">(<expr pos:start="3489:25" pos:end="3489:34"><name pos:start="3489:25" pos:end="3489:26">op</name> <operator pos:start="3489:28" pos:end="3489:29">&gt;=</operator> <literal type="number" pos:start="3489:31" pos:end="3489:34">0x20</literal></expr>)</condition> <block pos:start="3489:37" pos:end="3497:21">{<block_content pos:start="3491:25" pos:end="3495:53">

                        <expr_stmt pos:start="3491:25" pos:end="3491:64"><expr pos:start="3491:25" pos:end="3491:63"><call pos:start="3491:25" pos:end="3491:63"><name pos:start="3491:25" pos:end="3491:51">gen_helper_fp_arith_STN_ST0</name><argument_list pos:start="3491:52" pos:end="3491:63">(<argument pos:start="3491:53" pos:end="3491:55"><expr pos:start="3491:53" pos:end="3491:55"><name pos:start="3491:53" pos:end="3491:55">op1</name></expr></argument>, <argument pos:start="3491:58" pos:end="3491:62"><expr pos:start="3491:58" pos:end="3491:62"><name pos:start="3491:58" pos:end="3491:62">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="3493:25" pos:end="3495:53"><if pos:start="3493:25" pos:end="3495:53">if <condition pos:start="3493:28" pos:end="3493:39">(<expr pos:start="3493:29" pos:end="3493:38"><name pos:start="3493:29" pos:end="3493:30">op</name> <operator pos:start="3493:32" pos:end="3493:33">&gt;=</operator> <literal type="number" pos:start="3493:35" pos:end="3493:38">0x30</literal></expr>)</condition><block type="pseudo" pos:start="3495:29" pos:end="3495:53"><block_content pos:start="3495:29" pos:end="3495:53">

                            <expr_stmt pos:start="3495:29" pos:end="3495:53"><expr pos:start="3495:29" pos:end="3495:52"><call pos:start="3495:29" pos:end="3495:52"><name pos:start="3495:29" pos:end="3495:43">gen_helper_fpop</name><argument_list pos:start="3495:44" pos:end="3495:52">(<argument pos:start="3495:45" pos:end="3495:51"><expr pos:start="3495:45" pos:end="3495:51"><name pos:start="3495:45" pos:end="3495:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="3497:23" pos:end="3503:21">else <block pos:start="3497:28" pos:end="3503:21">{<block_content pos:start="3499:25" pos:end="3501:57">

                        <expr_stmt pos:start="3499:25" pos:end="3499:79"><expr pos:start="3499:25" pos:end="3499:78"><call pos:start="3499:25" pos:end="3499:78"><name pos:start="3499:25" pos:end="3499:47">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3499:48" pos:end="3499:78">(<argument pos:start="3499:49" pos:end="3499:55"><expr pos:start="3499:49" pos:end="3499:55"><name pos:start="3499:49" pos:end="3499:55">cpu_env</name></expr></argument>, <argument pos:start="3499:58" pos:end="3499:77"><expr pos:start="3499:58" pos:end="3499:77"><call pos:start="3499:58" pos:end="3499:77"><name pos:start="3499:58" pos:end="3499:70">tcg_const_i32</name><argument_list pos:start="3499:71" pos:end="3499:77">(<argument pos:start="3499:72" pos:end="3499:76"><expr pos:start="3499:72" pos:end="3499:76"><name pos:start="3499:72" pos:end="3499:76">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3501:25" pos:end="3501:57"><expr pos:start="3501:25" pos:end="3501:56"><call pos:start="3501:25" pos:end="3501:56"><name pos:start="3501:25" pos:end="3501:51">gen_helper_fp_arith_ST0_FT0</name><argument_list pos:start="3501:52" pos:end="3501:56">(<argument pos:start="3501:53" pos:end="3501:55"><expr pos:start="3501:53" pos:end="3501:55"><name pos:start="3501:53" pos:end="3501:55">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="3507:17" pos:end="3507:22">break;</break>

            <case pos:start="3509:13" pos:end="3509:22">case <expr pos:start="3509:18" pos:end="3509:21"><literal type="number" pos:start="3509:18" pos:end="3509:21">0x02</literal></expr>:</case> <comment type="block" pos:start="3509:24" pos:end="3509:33">/* fcom */</comment>

            <case pos:start="3511:13" pos:end="3511:22">case <expr pos:start="3511:18" pos:end="3511:21"><literal type="number" pos:start="3511:18" pos:end="3511:21">0x22</literal></expr>:</case> <comment type="block" pos:start="3511:24" pos:end="3511:51">/* fcom2, undocumented op */</comment>

                <expr_stmt pos:start="3513:17" pos:end="3513:71"><expr pos:start="3513:17" pos:end="3513:70"><call pos:start="3513:17" pos:end="3513:70"><name pos:start="3513:17" pos:end="3513:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3513:40" pos:end="3513:70">(<argument pos:start="3513:41" pos:end="3513:47"><expr pos:start="3513:41" pos:end="3513:47"><name pos:start="3513:41" pos:end="3513:47">cpu_env</name></expr></argument>, <argument pos:start="3513:50" pos:end="3513:69"><expr pos:start="3513:50" pos:end="3513:69"><call pos:start="3513:50" pos:end="3513:69"><name pos:start="3513:50" pos:end="3513:62">tcg_const_i32</name><argument_list pos:start="3513:63" pos:end="3513:69">(<argument pos:start="3513:64" pos:end="3513:68"><expr pos:start="3513:64" pos:end="3513:68"><name pos:start="3513:64" pos:end="3513:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3515:17" pos:end="3515:49"><expr pos:start="3515:17" pos:end="3515:48"><call pos:start="3515:17" pos:end="3515:48"><name pos:start="3515:17" pos:end="3515:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3515:40" pos:end="3515:48">(<argument pos:start="3515:41" pos:end="3515:47"><expr pos:start="3515:41" pos:end="3515:47"><name pos:start="3515:41" pos:end="3515:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3517:17" pos:end="3517:22">break;</break>

            <case pos:start="3519:13" pos:end="3519:22">case <expr pos:start="3519:18" pos:end="3519:21"><literal type="number" pos:start="3519:18" pos:end="3519:21">0x03</literal></expr>:</case> <comment type="block" pos:start="3519:24" pos:end="3519:34">/* fcomp */</comment>

            <case pos:start="3521:13" pos:end="3521:22">case <expr pos:start="3521:18" pos:end="3521:21"><literal type="number" pos:start="3521:18" pos:end="3521:21">0x23</literal></expr>:</case> <comment type="block" pos:start="3521:24" pos:end="3521:52">/* fcomp3, undocumented op */</comment>

            <case pos:start="3523:13" pos:end="3523:22">case <expr pos:start="3523:18" pos:end="3523:21"><literal type="number" pos:start="3523:18" pos:end="3523:21">0x32</literal></expr>:</case> <comment type="block" pos:start="3523:24" pos:end="3523:52">/* fcomp5, undocumented op */</comment>

                <expr_stmt pos:start="3525:17" pos:end="3525:71"><expr pos:start="3525:17" pos:end="3525:70"><call pos:start="3525:17" pos:end="3525:70"><name pos:start="3525:17" pos:end="3525:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3525:40" pos:end="3525:70">(<argument pos:start="3525:41" pos:end="3525:47"><expr pos:start="3525:41" pos:end="3525:47"><name pos:start="3525:41" pos:end="3525:47">cpu_env</name></expr></argument>, <argument pos:start="3525:50" pos:end="3525:69"><expr pos:start="3525:50" pos:end="3525:69"><call pos:start="3525:50" pos:end="3525:69"><name pos:start="3525:50" pos:end="3525:62">tcg_const_i32</name><argument_list pos:start="3525:63" pos:end="3525:69">(<argument pos:start="3525:64" pos:end="3525:68"><expr pos:start="3525:64" pos:end="3525:68"><name pos:start="3525:64" pos:end="3525:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3527:17" pos:end="3527:49"><expr pos:start="3527:17" pos:end="3527:48"><call pos:start="3527:17" pos:end="3527:48"><name pos:start="3527:17" pos:end="3527:39">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3527:40" pos:end="3527:48">(<argument pos:start="3527:41" pos:end="3527:47"><expr pos:start="3527:41" pos:end="3527:47"><name pos:start="3527:41" pos:end="3527:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3529:17" pos:end="3529:41"><expr pos:start="3529:17" pos:end="3529:40"><call pos:start="3529:17" pos:end="3529:40"><name pos:start="3529:17" pos:end="3529:31">gen_helper_fpop</name><argument_list pos:start="3529:32" pos:end="3529:40">(<argument pos:start="3529:33" pos:end="3529:39"><expr pos:start="3529:33" pos:end="3529:39"><name pos:start="3529:33" pos:end="3529:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3531:17" pos:end="3531:22">break;</break>

            <case pos:start="3533:13" pos:end="3533:22">case <expr pos:start="3533:18" pos:end="3533:21"><literal type="number" pos:start="3533:18" pos:end="3533:21">0x15</literal></expr>:</case> <comment type="block" pos:start="3533:24" pos:end="3533:33">/* da/5 */</comment>

                <switch pos:start="3535:17" pos:end="3553:17">switch<condition pos:start="3535:23" pos:end="3535:26">(<expr pos:start="3535:24" pos:end="3535:25"><name pos:start="3535:24" pos:end="3535:25">rm</name></expr>)</condition> <block pos:start="3535:28" pos:end="3553:17">{<block_content pos:start="3537:17" pos:end="3551:36">

                <case pos:start="3537:17" pos:end="3537:23">case <expr pos:start="3537:22" pos:end="3537:22"><literal type="number" pos:start="3537:22" pos:end="3537:22">1</literal></expr>:</case> <comment type="block" pos:start="3537:25" pos:end="3537:37">/* fucompp */</comment>

                    <expr_stmt pos:start="3539:21" pos:end="3539:71"><expr pos:start="3539:21" pos:end="3539:70"><call pos:start="3539:21" pos:end="3539:70"><name pos:start="3539:21" pos:end="3539:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3539:44" pos:end="3539:70">(<argument pos:start="3539:45" pos:end="3539:51"><expr pos:start="3539:45" pos:end="3539:51"><name pos:start="3539:45" pos:end="3539:51">cpu_env</name></expr></argument>, <argument pos:start="3539:54" pos:end="3539:69"><expr pos:start="3539:54" pos:end="3539:69"><call pos:start="3539:54" pos:end="3539:69"><name pos:start="3539:54" pos:end="3539:66">tcg_const_i32</name><argument_list pos:start="3539:67" pos:end="3539:69">(<argument pos:start="3539:68" pos:end="3539:68"><expr pos:start="3539:68" pos:end="3539:68"><literal type="number" pos:start="3539:68" pos:end="3539:68">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3541:21" pos:end="3541:54"><expr pos:start="3541:21" pos:end="3541:53"><call pos:start="3541:21" pos:end="3541:53"><name pos:start="3541:21" pos:end="3541:44">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3541:45" pos:end="3541:53">(<argument pos:start="3541:46" pos:end="3541:52"><expr pos:start="3541:46" pos:end="3541:52"><name pos:start="3541:46" pos:end="3541:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3543:21" pos:end="3543:45"><expr pos:start="3543:21" pos:end="3543:44"><call pos:start="3543:21" pos:end="3543:44"><name pos:start="3543:21" pos:end="3543:35">gen_helper_fpop</name><argument_list pos:start="3543:36" pos:end="3543:44">(<argument pos:start="3543:37" pos:end="3543:43"><expr pos:start="3543:37" pos:end="3543:43"><name pos:start="3543:37" pos:end="3543:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3545:21" pos:end="3545:45"><expr pos:start="3545:21" pos:end="3545:44"><call pos:start="3545:21" pos:end="3545:44"><name pos:start="3545:21" pos:end="3545:35">gen_helper_fpop</name><argument_list pos:start="3545:36" pos:end="3545:44">(<argument pos:start="3545:37" pos:end="3545:43"><expr pos:start="3545:37" pos:end="3545:43"><name pos:start="3545:37" pos:end="3545:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3547:21" pos:end="3547:26">break;</break>

                <default pos:start="3549:17" pos:end="3549:24">default:</default>

                    <goto pos:start="3551:21" pos:end="3551:36">goto <name pos:start="3551:26" pos:end="3551:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3555:17" pos:end="3555:22">break;</break>

            <case pos:start="3557:13" pos:end="3557:22">case <expr pos:start="3557:18" pos:end="3557:21"><literal type="number" pos:start="3557:18" pos:end="3557:21">0x1c</literal></expr>:</case>

                <switch pos:start="3559:17" pos:end="3589:17">switch<condition pos:start="3559:23" pos:end="3559:26">(<expr pos:start="3559:24" pos:end="3559:25"><name pos:start="3559:24" pos:end="3559:25">rm</name></expr>)</condition> <block pos:start="3559:28" pos:end="3589:17">{<block_content pos:start="3561:17" pos:end="3587:36">

                <case pos:start="3561:17" pos:end="3561:23">case <expr pos:start="3561:22" pos:end="3561:22"><literal type="number" pos:start="3561:22" pos:end="3561:22">0</literal></expr>:</case> <comment type="block" pos:start="3561:25" pos:end="3561:63">/* feni (287 only, just do nop here) */</comment>

                    <break pos:start="3563:21" pos:end="3563:26">break;</break>

                <case pos:start="3565:17" pos:end="3565:23">case <expr pos:start="3565:22" pos:end="3565:22"><literal type="number" pos:start="3565:22" pos:end="3565:22">1</literal></expr>:</case> <comment type="block" pos:start="3565:25" pos:end="3565:64">/* fdisi (287 only, just do nop here) */</comment>

                    <break pos:start="3567:21" pos:end="3567:26">break;</break>

                <case pos:start="3569:17" pos:end="3569:23">case <expr pos:start="3569:22" pos:end="3569:22"><literal type="number" pos:start="3569:22" pos:end="3569:22">2</literal></expr>:</case> <comment type="block" pos:start="3569:25" pos:end="3569:35">/* fclex */</comment>

                    <expr_stmt pos:start="3571:21" pos:end="3571:46"><expr pos:start="3571:21" pos:end="3571:45"><call pos:start="3571:21" pos:end="3571:45"><name pos:start="3571:21" pos:end="3571:36">gen_helper_fclex</name><argument_list pos:start="3571:37" pos:end="3571:45">(<argument pos:start="3571:38" pos:end="3571:44"><expr pos:start="3571:38" pos:end="3571:44"><name pos:start="3571:38" pos:end="3571:44">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3573:21" pos:end="3573:26">break;</break>

                <case pos:start="3575:17" pos:end="3575:23">case <expr pos:start="3575:22" pos:end="3575:22"><literal type="number" pos:start="3575:22" pos:end="3575:22">3</literal></expr>:</case> <comment type="block" pos:start="3575:25" pos:end="3575:36">/* fninit */</comment>

                    <expr_stmt pos:start="3577:21" pos:end="3577:47"><expr pos:start="3577:21" pos:end="3577:46"><call pos:start="3577:21" pos:end="3577:46"><name pos:start="3577:21" pos:end="3577:37">gen_helper_fninit</name><argument_list pos:start="3577:38" pos:end="3577:46">(<argument pos:start="3577:39" pos:end="3577:45"><expr pos:start="3577:39" pos:end="3577:45"><name pos:start="3577:39" pos:end="3577:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3579:21" pos:end="3579:26">break;</break>

                <case pos:start="3581:17" pos:end="3581:23">case <expr pos:start="3581:22" pos:end="3581:22"><literal type="number" pos:start="3581:22" pos:end="3581:22">4</literal></expr>:</case> <comment type="block" pos:start="3581:25" pos:end="3581:65">/* fsetpm (287 only, just do nop here) */</comment>

                    <break pos:start="3583:21" pos:end="3583:26">break;</break>

                <default pos:start="3585:17" pos:end="3585:24">default:</default>

                    <goto pos:start="3587:21" pos:end="3587:36">goto <name pos:start="3587:26" pos:end="3587:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3591:17" pos:end="3591:22">break;</break>

            <case pos:start="3593:13" pos:end="3593:22">case <expr pos:start="3593:18" pos:end="3593:21"><literal type="number" pos:start="3593:18" pos:end="3593:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="3593:24" pos:end="3593:35">/* fucomi */</comment>

                <if_stmt pos:start="3595:17" pos:end="3597:47"><if pos:start="3595:17" pos:end="3597:47">if <condition pos:start="3595:20" pos:end="3595:46">(<expr pos:start="3595:21" pos:end="3595:45"><name pos:start="3595:21" pos:end="3595:28"><name pos:start="3595:21" pos:end="3595:21">s</name><operator pos:start="3595:22" pos:end="3595:23">-&gt;</operator><name pos:start="3595:24" pos:end="3595:28">cc_op</name></name> <operator pos:start="3595:30" pos:end="3595:31">!=</operator> <name pos:start="3595:33" pos:end="3595:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3597:21" pos:end="3597:47"><block_content pos:start="3597:21" pos:end="3597:47">

                    <expr_stmt pos:start="3597:21" pos:end="3597:47"><expr pos:start="3597:21" pos:end="3597:46"><call pos:start="3597:21" pos:end="3597:46"><name pos:start="3597:21" pos:end="3597:36">gen_op_set_cc_op</name><argument_list pos:start="3597:37" pos:end="3597:46">(<argument pos:start="3597:38" pos:end="3597:45"><expr pos:start="3597:38" pos:end="3597:45"><name pos:start="3597:38" pos:end="3597:45"><name pos:start="3597:38" pos:end="3597:38">s</name><operator pos:start="3597:39" pos:end="3597:40">-&gt;</operator><name pos:start="3597:41" pos:end="3597:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3599:17" pos:end="3599:71"><expr pos:start="3599:17" pos:end="3599:70"><call pos:start="3599:17" pos:end="3599:70"><name pos:start="3599:17" pos:end="3599:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3599:40" pos:end="3599:70">(<argument pos:start="3599:41" pos:end="3599:47"><expr pos:start="3599:41" pos:end="3599:47"><name pos:start="3599:41" pos:end="3599:47">cpu_env</name></expr></argument>, <argument pos:start="3599:50" pos:end="3599:69"><expr pos:start="3599:50" pos:end="3599:69"><call pos:start="3599:50" pos:end="3599:69"><name pos:start="3599:50" pos:end="3599:62">tcg_const_i32</name><argument_list pos:start="3599:63" pos:end="3599:69">(<argument pos:start="3599:64" pos:end="3599:68"><expr pos:start="3599:64" pos:end="3599:68"><name pos:start="3599:64" pos:end="3599:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3601:17" pos:end="3601:51"><expr pos:start="3601:17" pos:end="3601:50"><call pos:start="3601:17" pos:end="3601:50"><name pos:start="3601:17" pos:end="3601:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="3601:42" pos:end="3601:50">(<argument pos:start="3601:43" pos:end="3601:49"><expr pos:start="3601:43" pos:end="3601:49"><name pos:start="3601:43" pos:end="3601:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3603:17" pos:end="3603:40"><expr pos:start="3603:17" pos:end="3603:39"><name pos:start="3603:17" pos:end="3603:24"><name pos:start="3603:17" pos:end="3603:17">s</name><operator pos:start="3603:18" pos:end="3603:19">-&gt;</operator><name pos:start="3603:20" pos:end="3603:24">cc_op</name></name> <operator pos:start="3603:26" pos:end="3603:26">=</operator> <name pos:start="3603:28" pos:end="3603:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3605:17" pos:end="3605:22">break;</break>

            <case pos:start="3607:13" pos:end="3607:22">case <expr pos:start="3607:18" pos:end="3607:21"><literal type="number" pos:start="3607:18" pos:end="3607:21">0x1e</literal></expr>:</case> <comment type="block" pos:start="3607:24" pos:end="3607:34">/* fcomi */</comment>

                <if_stmt pos:start="3609:17" pos:end="3611:47"><if pos:start="3609:17" pos:end="3611:47">if <condition pos:start="3609:20" pos:end="3609:46">(<expr pos:start="3609:21" pos:end="3609:45"><name pos:start="3609:21" pos:end="3609:28"><name pos:start="3609:21" pos:end="3609:21">s</name><operator pos:start="3609:22" pos:end="3609:23">-&gt;</operator><name pos:start="3609:24" pos:end="3609:28">cc_op</name></name> <operator pos:start="3609:30" pos:end="3609:31">!=</operator> <name pos:start="3609:33" pos:end="3609:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3611:21" pos:end="3611:47"><block_content pos:start="3611:21" pos:end="3611:47">

                    <expr_stmt pos:start="3611:21" pos:end="3611:47"><expr pos:start="3611:21" pos:end="3611:46"><call pos:start="3611:21" pos:end="3611:46"><name pos:start="3611:21" pos:end="3611:36">gen_op_set_cc_op</name><argument_list pos:start="3611:37" pos:end="3611:46">(<argument pos:start="3611:38" pos:end="3611:45"><expr pos:start="3611:38" pos:end="3611:45"><name pos:start="3611:38" pos:end="3611:45"><name pos:start="3611:38" pos:end="3611:38">s</name><operator pos:start="3611:39" pos:end="3611:40">-&gt;</operator><name pos:start="3611:41" pos:end="3611:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3613:17" pos:end="3613:71"><expr pos:start="3613:17" pos:end="3613:70"><call pos:start="3613:17" pos:end="3613:70"><name pos:start="3613:17" pos:end="3613:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3613:40" pos:end="3613:70">(<argument pos:start="3613:41" pos:end="3613:47"><expr pos:start="3613:41" pos:end="3613:47"><name pos:start="3613:41" pos:end="3613:47">cpu_env</name></expr></argument>, <argument pos:start="3613:50" pos:end="3613:69"><expr pos:start="3613:50" pos:end="3613:69"><call pos:start="3613:50" pos:end="3613:69"><name pos:start="3613:50" pos:end="3613:62">tcg_const_i32</name><argument_list pos:start="3613:63" pos:end="3613:69">(<argument pos:start="3613:64" pos:end="3613:68"><expr pos:start="3613:64" pos:end="3613:68"><name pos:start="3613:64" pos:end="3613:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3615:17" pos:end="3615:50"><expr pos:start="3615:17" pos:end="3615:49"><call pos:start="3615:17" pos:end="3615:49"><name pos:start="3615:17" pos:end="3615:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="3615:41" pos:end="3615:49">(<argument pos:start="3615:42" pos:end="3615:48"><expr pos:start="3615:42" pos:end="3615:48"><name pos:start="3615:42" pos:end="3615:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3617:17" pos:end="3617:40"><expr pos:start="3617:17" pos:end="3617:39"><name pos:start="3617:17" pos:end="3617:24"><name pos:start="3617:17" pos:end="3617:17">s</name><operator pos:start="3617:18" pos:end="3617:19">-&gt;</operator><name pos:start="3617:20" pos:end="3617:24">cc_op</name></name> <operator pos:start="3617:26" pos:end="3617:26">=</operator> <name pos:start="3617:28" pos:end="3617:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3619:17" pos:end="3619:22">break;</break>

            <case pos:start="3621:13" pos:end="3621:22">case <expr pos:start="3621:18" pos:end="3621:21"><literal type="number" pos:start="3621:18" pos:end="3621:21">0x28</literal></expr>:</case> <comment type="block" pos:start="3621:24" pos:end="3621:38">/* ffree sti */</comment>

                <expr_stmt pos:start="3623:17" pos:end="3623:68"><expr pos:start="3623:17" pos:end="3623:67"><call pos:start="3623:17" pos:end="3623:67"><name pos:start="3623:17" pos:end="3623:36">gen_helper_ffree_STN</name><argument_list pos:start="3623:37" pos:end="3623:67">(<argument pos:start="3623:38" pos:end="3623:44"><expr pos:start="3623:38" pos:end="3623:44"><name pos:start="3623:38" pos:end="3623:44">cpu_env</name></expr></argument>, <argument pos:start="3623:47" pos:end="3623:66"><expr pos:start="3623:47" pos:end="3623:66"><call pos:start="3623:47" pos:end="3623:66"><name pos:start="3623:47" pos:end="3623:59">tcg_const_i32</name><argument_list pos:start="3623:60" pos:end="3623:66">(<argument pos:start="3623:61" pos:end="3623:65"><expr pos:start="3623:61" pos:end="3623:65"><name pos:start="3623:61" pos:end="3623:65">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3625:17" pos:end="3625:22">break;</break>

            <case pos:start="3627:13" pos:end="3627:22">case <expr pos:start="3627:18" pos:end="3627:21"><literal type="number" pos:start="3627:18" pos:end="3627:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="3627:24" pos:end="3627:36">/* fst sti */</comment>

                <expr_stmt pos:start="3629:17" pos:end="3629:71"><expr pos:start="3629:17" pos:end="3629:70"><call pos:start="3629:17" pos:end="3629:70"><name pos:start="3629:17" pos:end="3629:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="3629:40" pos:end="3629:70">(<argument pos:start="3629:41" pos:end="3629:47"><expr pos:start="3629:41" pos:end="3629:47"><name pos:start="3629:41" pos:end="3629:47">cpu_env</name></expr></argument>, <argument pos:start="3629:50" pos:end="3629:69"><expr pos:start="3629:50" pos:end="3629:69"><call pos:start="3629:50" pos:end="3629:69"><name pos:start="3629:50" pos:end="3629:62">tcg_const_i32</name><argument_list pos:start="3629:63" pos:end="3629:69">(<argument pos:start="3629:64" pos:end="3629:68"><expr pos:start="3629:64" pos:end="3629:68"><name pos:start="3629:64" pos:end="3629:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3631:17" pos:end="3631:22">break;</break>

            <case pos:start="3633:13" pos:end="3633:22">case <expr pos:start="3633:18" pos:end="3633:21"><literal type="number" pos:start="3633:18" pos:end="3633:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="3633:24" pos:end="3633:37">/* fstp sti */</comment>

            <case pos:start="3635:13" pos:end="3635:22">case <expr pos:start="3635:18" pos:end="3635:21"><literal type="number" pos:start="3635:18" pos:end="3635:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="3635:24" pos:end="3635:55">/* fstp1 sti, undocumented op */</comment>

            <case pos:start="3637:13" pos:end="3637:22">case <expr pos:start="3637:18" pos:end="3637:21"><literal type="number" pos:start="3637:18" pos:end="3637:21">0x3a</literal></expr>:</case> <comment type="block" pos:start="3637:24" pos:end="3637:55">/* fstp8 sti, undocumented op */</comment>

            <case pos:start="3639:13" pos:end="3639:22">case <expr pos:start="3639:18" pos:end="3639:21"><literal type="number" pos:start="3639:18" pos:end="3639:21">0x3b</literal></expr>:</case> <comment type="block" pos:start="3639:24" pos:end="3639:55">/* fstp9 sti, undocumented op */</comment>

                <expr_stmt pos:start="3641:17" pos:end="3641:71"><expr pos:start="3641:17" pos:end="3641:70"><call pos:start="3641:17" pos:end="3641:70"><name pos:start="3641:17" pos:end="3641:39">gen_helper_fmov_STN_ST0</name><argument_list pos:start="3641:40" pos:end="3641:70">(<argument pos:start="3641:41" pos:end="3641:47"><expr pos:start="3641:41" pos:end="3641:47"><name pos:start="3641:41" pos:end="3641:47">cpu_env</name></expr></argument>, <argument pos:start="3641:50" pos:end="3641:69"><expr pos:start="3641:50" pos:end="3641:69"><call pos:start="3641:50" pos:end="3641:69"><name pos:start="3641:50" pos:end="3641:62">tcg_const_i32</name><argument_list pos:start="3641:63" pos:end="3641:69">(<argument pos:start="3641:64" pos:end="3641:68"><expr pos:start="3641:64" pos:end="3641:68"><name pos:start="3641:64" pos:end="3641:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3643:17" pos:end="3643:41"><expr pos:start="3643:17" pos:end="3643:40"><call pos:start="3643:17" pos:end="3643:40"><name pos:start="3643:17" pos:end="3643:31">gen_helper_fpop</name><argument_list pos:start="3643:32" pos:end="3643:40">(<argument pos:start="3643:33" pos:end="3643:39"><expr pos:start="3643:33" pos:end="3643:39"><name pos:start="3643:33" pos:end="3643:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3645:17" pos:end="3645:22">break;</break>

            <case pos:start="3647:13" pos:end="3647:22">case <expr pos:start="3647:18" pos:end="3647:21"><literal type="number" pos:start="3647:18" pos:end="3647:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="3647:24" pos:end="3647:40">/* fucom st(i) */</comment>

                <expr_stmt pos:start="3649:17" pos:end="3649:71"><expr pos:start="3649:17" pos:end="3649:70"><call pos:start="3649:17" pos:end="3649:70"><name pos:start="3649:17" pos:end="3649:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3649:40" pos:end="3649:70">(<argument pos:start="3649:41" pos:end="3649:47"><expr pos:start="3649:41" pos:end="3649:47"><name pos:start="3649:41" pos:end="3649:47">cpu_env</name></expr></argument>, <argument pos:start="3649:50" pos:end="3649:69"><expr pos:start="3649:50" pos:end="3649:69"><call pos:start="3649:50" pos:end="3649:69"><name pos:start="3649:50" pos:end="3649:62">tcg_const_i32</name><argument_list pos:start="3649:63" pos:end="3649:69">(<argument pos:start="3649:64" pos:end="3649:68"><expr pos:start="3649:64" pos:end="3649:68"><name pos:start="3649:64" pos:end="3649:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3651:17" pos:end="3651:50"><expr pos:start="3651:17" pos:end="3651:49"><call pos:start="3651:17" pos:end="3651:49"><name pos:start="3651:17" pos:end="3651:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3651:41" pos:end="3651:49">(<argument pos:start="3651:42" pos:end="3651:48"><expr pos:start="3651:42" pos:end="3651:48"><name pos:start="3651:42" pos:end="3651:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3653:17" pos:end="3653:22">break;</break>

            <case pos:start="3655:13" pos:end="3655:22">case <expr pos:start="3655:18" pos:end="3655:21"><literal type="number" pos:start="3655:18" pos:end="3655:21">0x2d</literal></expr>:</case> <comment type="block" pos:start="3655:24" pos:end="3655:41">/* fucomp st(i) */</comment>

                <expr_stmt pos:start="3657:17" pos:end="3657:71"><expr pos:start="3657:17" pos:end="3657:70"><call pos:start="3657:17" pos:end="3657:70"><name pos:start="3657:17" pos:end="3657:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3657:40" pos:end="3657:70">(<argument pos:start="3657:41" pos:end="3657:47"><expr pos:start="3657:41" pos:end="3657:47"><name pos:start="3657:41" pos:end="3657:47">cpu_env</name></expr></argument>, <argument pos:start="3657:50" pos:end="3657:69"><expr pos:start="3657:50" pos:end="3657:69"><call pos:start="3657:50" pos:end="3657:69"><name pos:start="3657:50" pos:end="3657:62">tcg_const_i32</name><argument_list pos:start="3657:63" pos:end="3657:69">(<argument pos:start="3657:64" pos:end="3657:68"><expr pos:start="3657:64" pos:end="3657:68"><name pos:start="3657:64" pos:end="3657:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3659:17" pos:end="3659:50"><expr pos:start="3659:17" pos:end="3659:49"><call pos:start="3659:17" pos:end="3659:49"><name pos:start="3659:17" pos:end="3659:40">gen_helper_fucom_ST0_FT0</name><argument_list pos:start="3659:41" pos:end="3659:49">(<argument pos:start="3659:42" pos:end="3659:48"><expr pos:start="3659:42" pos:end="3659:48"><name pos:start="3659:42" pos:end="3659:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3661:17" pos:end="3661:41"><expr pos:start="3661:17" pos:end="3661:40"><call pos:start="3661:17" pos:end="3661:40"><name pos:start="3661:17" pos:end="3661:31">gen_helper_fpop</name><argument_list pos:start="3661:32" pos:end="3661:40">(<argument pos:start="3661:33" pos:end="3661:39"><expr pos:start="3661:33" pos:end="3661:39"><name pos:start="3661:33" pos:end="3661:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3663:17" pos:end="3663:22">break;</break>

            <case pos:start="3665:13" pos:end="3665:22">case <expr pos:start="3665:18" pos:end="3665:21"><literal type="number" pos:start="3665:18" pos:end="3665:21">0x33</literal></expr>:</case> <comment type="block" pos:start="3665:24" pos:end="3665:33">/* de/3 */</comment>

                <switch pos:start="3667:17" pos:end="3685:17">switch<condition pos:start="3667:23" pos:end="3667:26">(<expr pos:start="3667:24" pos:end="3667:25"><name pos:start="3667:24" pos:end="3667:25">rm</name></expr>)</condition> <block pos:start="3667:28" pos:end="3685:17">{<block_content pos:start="3669:17" pos:end="3683:36">

                <case pos:start="3669:17" pos:end="3669:23">case <expr pos:start="3669:22" pos:end="3669:22"><literal type="number" pos:start="3669:22" pos:end="3669:22">1</literal></expr>:</case> <comment type="block" pos:start="3669:25" pos:end="3669:36">/* fcompp */</comment>

                    <expr_stmt pos:start="3671:21" pos:end="3671:71"><expr pos:start="3671:21" pos:end="3671:70"><call pos:start="3671:21" pos:end="3671:70"><name pos:start="3671:21" pos:end="3671:43">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3671:44" pos:end="3671:70">(<argument pos:start="3671:45" pos:end="3671:51"><expr pos:start="3671:45" pos:end="3671:51"><name pos:start="3671:45" pos:end="3671:51">cpu_env</name></expr></argument>, <argument pos:start="3671:54" pos:end="3671:69"><expr pos:start="3671:54" pos:end="3671:69"><call pos:start="3671:54" pos:end="3671:69"><name pos:start="3671:54" pos:end="3671:66">tcg_const_i32</name><argument_list pos:start="3671:67" pos:end="3671:69">(<argument pos:start="3671:68" pos:end="3671:68"><expr pos:start="3671:68" pos:end="3671:68"><literal type="number" pos:start="3671:68" pos:end="3671:68">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3673:21" pos:end="3673:53"><expr pos:start="3673:21" pos:end="3673:52"><call pos:start="3673:21" pos:end="3673:52"><name pos:start="3673:21" pos:end="3673:43">gen_helper_fcom_ST0_FT0</name><argument_list pos:start="3673:44" pos:end="3673:52">(<argument pos:start="3673:45" pos:end="3673:51"><expr pos:start="3673:45" pos:end="3673:51"><name pos:start="3673:45" pos:end="3673:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3675:21" pos:end="3675:45"><expr pos:start="3675:21" pos:end="3675:44"><call pos:start="3675:21" pos:end="3675:44"><name pos:start="3675:21" pos:end="3675:35">gen_helper_fpop</name><argument_list pos:start="3675:36" pos:end="3675:44">(<argument pos:start="3675:37" pos:end="3675:43"><expr pos:start="3675:37" pos:end="3675:43"><name pos:start="3675:37" pos:end="3675:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3677:21" pos:end="3677:45"><expr pos:start="3677:21" pos:end="3677:44"><call pos:start="3677:21" pos:end="3677:44"><name pos:start="3677:21" pos:end="3677:35">gen_helper_fpop</name><argument_list pos:start="3677:36" pos:end="3677:44">(<argument pos:start="3677:37" pos:end="3677:43"><expr pos:start="3677:37" pos:end="3677:43"><name pos:start="3677:37" pos:end="3677:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3679:21" pos:end="3679:26">break;</break>

                <default pos:start="3681:17" pos:end="3681:24">default:</default>

                    <goto pos:start="3683:21" pos:end="3683:36">goto <name pos:start="3683:26" pos:end="3683:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3687:17" pos:end="3687:22">break;</break>

            <case pos:start="3689:13" pos:end="3689:22">case <expr pos:start="3689:18" pos:end="3689:21"><literal type="number" pos:start="3689:18" pos:end="3689:21">0x38</literal></expr>:</case> <comment type="block" pos:start="3689:24" pos:end="3689:56">/* ffreep sti, undocumented op */</comment>

                <expr_stmt pos:start="3691:17" pos:end="3691:68"><expr pos:start="3691:17" pos:end="3691:67"><call pos:start="3691:17" pos:end="3691:67"><name pos:start="3691:17" pos:end="3691:36">gen_helper_ffree_STN</name><argument_list pos:start="3691:37" pos:end="3691:67">(<argument pos:start="3691:38" pos:end="3691:44"><expr pos:start="3691:38" pos:end="3691:44"><name pos:start="3691:38" pos:end="3691:44">cpu_env</name></expr></argument>, <argument pos:start="3691:47" pos:end="3691:66"><expr pos:start="3691:47" pos:end="3691:66"><call pos:start="3691:47" pos:end="3691:66"><name pos:start="3691:47" pos:end="3691:59">tcg_const_i32</name><argument_list pos:start="3691:60" pos:end="3691:66">(<argument pos:start="3691:61" pos:end="3691:65"><expr pos:start="3691:61" pos:end="3691:65"><name pos:start="3691:61" pos:end="3691:65">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3693:17" pos:end="3693:41"><expr pos:start="3693:17" pos:end="3693:40"><call pos:start="3693:17" pos:end="3693:40"><name pos:start="3693:17" pos:end="3693:31">gen_helper_fpop</name><argument_list pos:start="3693:32" pos:end="3693:40">(<argument pos:start="3693:33" pos:end="3693:39"><expr pos:start="3693:33" pos:end="3693:39"><name pos:start="3693:33" pos:end="3693:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3695:17" pos:end="3695:22">break;</break>

            <case pos:start="3697:13" pos:end="3697:22">case <expr pos:start="3697:18" pos:end="3697:21"><literal type="number" pos:start="3697:18" pos:end="3697:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="3697:24" pos:end="3697:33">/* df/4 */</comment>

                <switch pos:start="3699:17" pos:end="3715:17">switch<condition pos:start="3699:23" pos:end="3699:26">(<expr pos:start="3699:24" pos:end="3699:25"><name pos:start="3699:24" pos:end="3699:25">rm</name></expr>)</condition> <block pos:start="3699:28" pos:end="3715:17">{<block_content pos:start="3701:17" pos:end="3713:36">

                <case pos:start="3701:17" pos:end="3701:23">case <expr pos:start="3701:22" pos:end="3701:22"><literal type="number" pos:start="3701:22" pos:end="3701:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="3703:21" pos:end="3703:61"><expr pos:start="3703:21" pos:end="3703:60"><call pos:start="3703:21" pos:end="3703:60"><name pos:start="3703:21" pos:end="3703:37">gen_helper_fnstsw</name><argument_list pos:start="3703:38" pos:end="3703:60">(<argument pos:start="3703:39" pos:end="3703:50"><expr pos:start="3703:39" pos:end="3703:50"><name pos:start="3703:39" pos:end="3703:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="3703:53" pos:end="3703:59"><expr pos:start="3703:53" pos:end="3703:59"><name pos:start="3703:53" pos:end="3703:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3705:21" pos:end="3705:64"><expr pos:start="3705:21" pos:end="3705:63"><call pos:start="3705:21" pos:end="3705:63"><name pos:start="3705:21" pos:end="3705:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="3705:40" pos:end="3705:63">(<argument pos:start="3705:41" pos:end="3705:48"><expr pos:start="3705:41" pos:end="3705:48"><name pos:start="3705:41" pos:end="3705:48"><name pos:start="3705:41" pos:end="3705:45">cpu_T</name><index pos:start="3705:46" pos:end="3705:48">[<expr pos:start="3705:47" pos:end="3705:47"><literal type="number" pos:start="3705:47" pos:end="3705:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3705:51" pos:end="3705:62"><expr pos:start="3705:51" pos:end="3705:62"><name pos:start="3705:51" pos:end="3705:62">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3707:21" pos:end="3707:54"><expr pos:start="3707:21" pos:end="3707:53"><call pos:start="3707:21" pos:end="3707:53"><name pos:start="3707:21" pos:end="3707:37">gen_op_mov_reg_T0</name><argument_list pos:start="3707:38" pos:end="3707:53">(<argument pos:start="3707:39" pos:end="3707:45"><expr pos:start="3707:39" pos:end="3707:45"><name pos:start="3707:39" pos:end="3707:45">OT_WORD</name></expr></argument>, <argument pos:start="3707:48" pos:end="3707:52"><expr pos:start="3707:48" pos:end="3707:52"><name pos:start="3707:48" pos:end="3707:52">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3709:21" pos:end="3709:26">break;</break>

                <default pos:start="3711:17" pos:end="3711:24">default:</default>

                    <goto pos:start="3713:21" pos:end="3713:36">goto <name pos:start="3713:26" pos:end="3713:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="3717:17" pos:end="3717:22">break;</break>

            <case pos:start="3719:13" pos:end="3719:22">case <expr pos:start="3719:18" pos:end="3719:21"><literal type="number" pos:start="3719:18" pos:end="3719:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="3719:24" pos:end="3719:36">/* fucomip */</comment>

                <if_stmt pos:start="3721:17" pos:end="3723:47"><if pos:start="3721:17" pos:end="3723:47">if <condition pos:start="3721:20" pos:end="3721:46">(<expr pos:start="3721:21" pos:end="3721:45"><name pos:start="3721:21" pos:end="3721:28"><name pos:start="3721:21" pos:end="3721:21">s</name><operator pos:start="3721:22" pos:end="3721:23">-&gt;</operator><name pos:start="3721:24" pos:end="3721:28">cc_op</name></name> <operator pos:start="3721:30" pos:end="3721:31">!=</operator> <name pos:start="3721:33" pos:end="3721:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3723:21" pos:end="3723:47"><block_content pos:start="3723:21" pos:end="3723:47">

                    <expr_stmt pos:start="3723:21" pos:end="3723:47"><expr pos:start="3723:21" pos:end="3723:46"><call pos:start="3723:21" pos:end="3723:46"><name pos:start="3723:21" pos:end="3723:36">gen_op_set_cc_op</name><argument_list pos:start="3723:37" pos:end="3723:46">(<argument pos:start="3723:38" pos:end="3723:45"><expr pos:start="3723:38" pos:end="3723:45"><name pos:start="3723:38" pos:end="3723:45"><name pos:start="3723:38" pos:end="3723:38">s</name><operator pos:start="3723:39" pos:end="3723:40">-&gt;</operator><name pos:start="3723:41" pos:end="3723:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3725:17" pos:end="3725:71"><expr pos:start="3725:17" pos:end="3725:70"><call pos:start="3725:17" pos:end="3725:70"><name pos:start="3725:17" pos:end="3725:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3725:40" pos:end="3725:70">(<argument pos:start="3725:41" pos:end="3725:47"><expr pos:start="3725:41" pos:end="3725:47"><name pos:start="3725:41" pos:end="3725:47">cpu_env</name></expr></argument>, <argument pos:start="3725:50" pos:end="3725:69"><expr pos:start="3725:50" pos:end="3725:69"><call pos:start="3725:50" pos:end="3725:69"><name pos:start="3725:50" pos:end="3725:62">tcg_const_i32</name><argument_list pos:start="3725:63" pos:end="3725:69">(<argument pos:start="3725:64" pos:end="3725:68"><expr pos:start="3725:64" pos:end="3725:68"><name pos:start="3725:64" pos:end="3725:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3727:17" pos:end="3727:51"><expr pos:start="3727:17" pos:end="3727:50"><call pos:start="3727:17" pos:end="3727:50"><name pos:start="3727:17" pos:end="3727:41">gen_helper_fucomi_ST0_FT0</name><argument_list pos:start="3727:42" pos:end="3727:50">(<argument pos:start="3727:43" pos:end="3727:49"><expr pos:start="3727:43" pos:end="3727:49"><name pos:start="3727:43" pos:end="3727:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3729:17" pos:end="3729:41"><expr pos:start="3729:17" pos:end="3729:40"><call pos:start="3729:17" pos:end="3729:40"><name pos:start="3729:17" pos:end="3729:31">gen_helper_fpop</name><argument_list pos:start="3729:32" pos:end="3729:40">(<argument pos:start="3729:33" pos:end="3729:39"><expr pos:start="3729:33" pos:end="3729:39"><name pos:start="3729:33" pos:end="3729:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3731:17" pos:end="3731:40"><expr pos:start="3731:17" pos:end="3731:39"><name pos:start="3731:17" pos:end="3731:24"><name pos:start="3731:17" pos:end="3731:17">s</name><operator pos:start="3731:18" pos:end="3731:19">-&gt;</operator><name pos:start="3731:20" pos:end="3731:24">cc_op</name></name> <operator pos:start="3731:26" pos:end="3731:26">=</operator> <name pos:start="3731:28" pos:end="3731:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3733:17" pos:end="3733:22">break;</break>

            <case pos:start="3735:13" pos:end="3735:22">case <expr pos:start="3735:18" pos:end="3735:21"><literal type="number" pos:start="3735:18" pos:end="3735:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="3735:24" pos:end="3735:35">/* fcomip */</comment>

                <if_stmt pos:start="3737:17" pos:end="3739:47"><if pos:start="3737:17" pos:end="3739:47">if <condition pos:start="3737:20" pos:end="3737:46">(<expr pos:start="3737:21" pos:end="3737:45"><name pos:start="3737:21" pos:end="3737:28"><name pos:start="3737:21" pos:end="3737:21">s</name><operator pos:start="3737:22" pos:end="3737:23">-&gt;</operator><name pos:start="3737:24" pos:end="3737:28">cc_op</name></name> <operator pos:start="3737:30" pos:end="3737:31">!=</operator> <name pos:start="3737:33" pos:end="3737:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3739:21" pos:end="3739:47"><block_content pos:start="3739:21" pos:end="3739:47">

                    <expr_stmt pos:start="3739:21" pos:end="3739:47"><expr pos:start="3739:21" pos:end="3739:46"><call pos:start="3739:21" pos:end="3739:46"><name pos:start="3739:21" pos:end="3739:36">gen_op_set_cc_op</name><argument_list pos:start="3739:37" pos:end="3739:46">(<argument pos:start="3739:38" pos:end="3739:45"><expr pos:start="3739:38" pos:end="3739:45"><name pos:start="3739:38" pos:end="3739:45"><name pos:start="3739:38" pos:end="3739:38">s</name><operator pos:start="3739:39" pos:end="3739:40">-&gt;</operator><name pos:start="3739:41" pos:end="3739:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3741:17" pos:end="3741:71"><expr pos:start="3741:17" pos:end="3741:70"><call pos:start="3741:17" pos:end="3741:70"><name pos:start="3741:17" pos:end="3741:39">gen_helper_fmov_FT0_STN</name><argument_list pos:start="3741:40" pos:end="3741:70">(<argument pos:start="3741:41" pos:end="3741:47"><expr pos:start="3741:41" pos:end="3741:47"><name pos:start="3741:41" pos:end="3741:47">cpu_env</name></expr></argument>, <argument pos:start="3741:50" pos:end="3741:69"><expr pos:start="3741:50" pos:end="3741:69"><call pos:start="3741:50" pos:end="3741:69"><name pos:start="3741:50" pos:end="3741:62">tcg_const_i32</name><argument_list pos:start="3741:63" pos:end="3741:69">(<argument pos:start="3741:64" pos:end="3741:68"><expr pos:start="3741:64" pos:end="3741:68"><name pos:start="3741:64" pos:end="3741:68">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3743:17" pos:end="3743:50"><expr pos:start="3743:17" pos:end="3743:49"><call pos:start="3743:17" pos:end="3743:49"><name pos:start="3743:17" pos:end="3743:40">gen_helper_fcomi_ST0_FT0</name><argument_list pos:start="3743:41" pos:end="3743:49">(<argument pos:start="3743:42" pos:end="3743:48"><expr pos:start="3743:42" pos:end="3743:48"><name pos:start="3743:42" pos:end="3743:48">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3745:17" pos:end="3745:41"><expr pos:start="3745:17" pos:end="3745:40"><call pos:start="3745:17" pos:end="3745:40"><name pos:start="3745:17" pos:end="3745:31">gen_helper_fpop</name><argument_list pos:start="3745:32" pos:end="3745:40">(<argument pos:start="3745:33" pos:end="3745:39"><expr pos:start="3745:33" pos:end="3745:39"><name pos:start="3745:33" pos:end="3745:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3747:17" pos:end="3747:40"><expr pos:start="3747:17" pos:end="3747:39"><name pos:start="3747:17" pos:end="3747:24"><name pos:start="3747:17" pos:end="3747:17">s</name><operator pos:start="3747:18" pos:end="3747:19">-&gt;</operator><name pos:start="3747:20" pos:end="3747:24">cc_op</name></name> <operator pos:start="3747:26" pos:end="3747:26">=</operator> <name pos:start="3747:28" pos:end="3747:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="3749:17" pos:end="3749:22">break;</break>

            <case pos:start="3751:13" pos:end="3751:31">case <expr pos:start="3751:18" pos:end="3751:30"><literal type="number" pos:start="3751:18" pos:end="3751:21">0x10</literal> <operator pos:start="3751:23" pos:end="3751:25">...</operator> <literal type="number" pos:start="3751:27" pos:end="3751:30">0x13</literal></expr>:</case> <comment type="block" pos:start="3751:33" pos:end="3751:45">/* fcmovxx */</comment>

            <case pos:start="3753:13" pos:end="3753:31">case <expr pos:start="3753:18" pos:end="3753:30"><literal type="number" pos:start="3753:18" pos:end="3753:21">0x18</literal> <operator pos:start="3753:23" pos:end="3753:25">...</operator> <literal type="number" pos:start="3753:27" pos:end="3753:30">0x1b</literal></expr>:</case>

                <block pos:start="3755:17" pos:end="3781:17">{<block_content pos:start="3757:21" pos:end="3779:38">

                    <decl_stmt pos:start="3757:21" pos:end="3757:32"><decl pos:start="3757:21" pos:end="3757:27"><type pos:start="3757:21" pos:end="3757:23"><name pos:start="3757:21" pos:end="3757:23">int</name></type> <name pos:start="3757:25" pos:end="3757:27">op1</name></decl>, <decl pos:start="3757:30" pos:end="3757:31"><type ref="prev" pos:start="3757:21" pos:end="3757:23"/><name pos:start="3757:30" pos:end="3757:31">l1</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="3759:21" pos:end="3769:22"><decl pos:start="3759:21" pos:end="3769:21"><type pos:start="3759:21" pos:end="3759:40"><specifier pos:start="3759:21" pos:end="3759:26">static</specifier> <specifier pos:start="3759:28" pos:end="3759:32">const</specifier> <name pos:start="3759:34" pos:end="3759:40">uint8_t</name></type> <name pos:start="3759:42" pos:end="3759:52"><name pos:start="3759:42" pos:end="3759:49">fcmov_cc</name><index pos:start="3759:50" pos:end="3759:52">[<expr pos:start="3759:51" pos:end="3759:51"><literal type="number" pos:start="3759:51" pos:end="3759:51">8</literal></expr>]</index></name> <init pos:start="3759:54" pos:end="3769:21">= <expr pos:start="3759:56" pos:end="3769:21"><block pos:start="3759:56" pos:end="3769:21">{

                        <expr pos:start="3761:25" pos:end="3761:36"><operator pos:start="3761:25" pos:end="3761:25">(</operator><name pos:start="3761:26" pos:end="3761:30">JCC_B</name> <operator pos:start="3761:32" pos:end="3761:33">&lt;&lt;</operator> <literal type="number" pos:start="3761:35" pos:end="3761:35">1</literal><operator pos:start="3761:36" pos:end="3761:36">)</operator></expr>,

                        <expr pos:start="3763:25" pos:end="3763:36"><operator pos:start="3763:25" pos:end="3763:25">(</operator><name pos:start="3763:26" pos:end="3763:30">JCC_Z</name> <operator pos:start="3763:32" pos:end="3763:33">&lt;&lt;</operator> <literal type="number" pos:start="3763:35" pos:end="3763:35">1</literal><operator pos:start="3763:36" pos:end="3763:36">)</operator></expr>,

                        <expr pos:start="3765:25" pos:end="3765:37"><operator pos:start="3765:25" pos:end="3765:25">(</operator><name pos:start="3765:26" pos:end="3765:31">JCC_BE</name> <operator pos:start="3765:33" pos:end="3765:34">&lt;&lt;</operator> <literal type="number" pos:start="3765:36" pos:end="3765:36">1</literal><operator pos:start="3765:37" pos:end="3765:37">)</operator></expr>,

                        <expr pos:start="3767:25" pos:end="3767:36"><operator pos:start="3767:25" pos:end="3767:25">(</operator><name pos:start="3767:26" pos:end="3767:30">JCC_P</name> <operator pos:start="3767:32" pos:end="3767:33">&lt;&lt;</operator> <literal type="number" pos:start="3767:35" pos:end="3767:35">1</literal><operator pos:start="3767:36" pos:end="3767:36">)</operator></expr>,

                    }</block></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3771:21" pos:end="3771:67"><expr pos:start="3771:21" pos:end="3771:66"><name pos:start="3771:21" pos:end="3771:23">op1</name> <operator pos:start="3771:25" pos:end="3771:25">=</operator> <name pos:start="3771:27" pos:end="3771:42"><name pos:start="3771:27" pos:end="3771:34">fcmov_cc</name><index pos:start="3771:35" pos:end="3771:42">[<expr pos:start="3771:36" pos:end="3771:41"><name pos:start="3771:36" pos:end="3771:37">op</name> <operator pos:start="3771:39" pos:end="3771:39">&amp;</operator> <literal type="number" pos:start="3771:41" pos:end="3771:41">3</literal></expr>]</index></name> <operator pos:start="3771:44" pos:end="3771:44">|</operator> <operator pos:start="3771:46" pos:end="3771:46">(</operator><operator pos:start="3771:47" pos:end="3771:47">(</operator><operator pos:start="3771:48" pos:end="3771:48">(</operator><name pos:start="3771:49" pos:end="3771:50">op</name> <operator pos:start="3771:52" pos:end="3771:53">&gt;&gt;</operator> <literal type="number" pos:start="3771:55" pos:end="3771:55">3</literal><operator pos:start="3771:56" pos:end="3771:56">)</operator> <operator pos:start="3771:58" pos:end="3771:58">&amp;</operator> <literal type="number" pos:start="3771:60" pos:end="3771:60">1</literal><operator pos:start="3771:61" pos:end="3771:61">)</operator> <operator pos:start="3771:63" pos:end="3771:63">^</operator> <literal type="number" pos:start="3771:65" pos:end="3771:65">1</literal><operator pos:start="3771:66" pos:end="3771:66">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="3773:21" pos:end="3773:41"><expr pos:start="3773:21" pos:end="3773:40"><name pos:start="3773:21" pos:end="3773:22">l1</name> <operator pos:start="3773:24" pos:end="3773:24">=</operator> <call pos:start="3773:26" pos:end="3773:40"><name pos:start="3773:26" pos:end="3773:38">gen_new_label</name><argument_list pos:start="3773:39" pos:end="3773:40">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3775:21" pos:end="3775:51"><expr pos:start="3775:21" pos:end="3775:50"><call pos:start="3775:21" pos:end="3775:50"><name pos:start="3775:21" pos:end="3775:28">gen_jcc1</name><argument_list pos:start="3775:29" pos:end="3775:50">(<argument pos:start="3775:30" pos:end="3775:30"><expr pos:start="3775:30" pos:end="3775:30"><name pos:start="3775:30" pos:end="3775:30">s</name></expr></argument>, <argument pos:start="3775:33" pos:end="3775:40"><expr pos:start="3775:33" pos:end="3775:40"><name pos:start="3775:33" pos:end="3775:40"><name pos:start="3775:33" pos:end="3775:33">s</name><operator pos:start="3775:34" pos:end="3775:35">-&gt;</operator><name pos:start="3775:36" pos:end="3775:40">cc_op</name></name></expr></argument>, <argument pos:start="3775:43" pos:end="3775:45"><expr pos:start="3775:43" pos:end="3775:45"><name pos:start="3775:43" pos:end="3775:45">op1</name></expr></argument>, <argument pos:start="3775:48" pos:end="3775:49"><expr pos:start="3775:48" pos:end="3775:49"><name pos:start="3775:48" pos:end="3775:49">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3777:21" pos:end="3777:75"><expr pos:start="3777:21" pos:end="3777:74"><call pos:start="3777:21" pos:end="3777:74"><name pos:start="3777:21" pos:end="3777:43">gen_helper_fmov_ST0_STN</name><argument_list pos:start="3777:44" pos:end="3777:74">(<argument pos:start="3777:45" pos:end="3777:51"><expr pos:start="3777:45" pos:end="3777:51"><name pos:start="3777:45" pos:end="3777:51">cpu_env</name></expr></argument>, <argument pos:start="3777:54" pos:end="3777:73"><expr pos:start="3777:54" pos:end="3777:73"><call pos:start="3777:54" pos:end="3777:73"><name pos:start="3777:54" pos:end="3777:66">tcg_const_i32</name><argument_list pos:start="3777:67" pos:end="3777:73">(<argument pos:start="3777:68" pos:end="3777:72"><expr pos:start="3777:68" pos:end="3777:72"><name pos:start="3777:68" pos:end="3777:72">opreg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3779:21" pos:end="3779:38"><expr pos:start="3779:21" pos:end="3779:37"><call pos:start="3779:21" pos:end="3779:37"><name pos:start="3779:21" pos:end="3779:33">gen_set_label</name><argument_list pos:start="3779:34" pos:end="3779:37">(<argument pos:start="3779:35" pos:end="3779:36"><expr pos:start="3779:35" pos:end="3779:36"><name pos:start="3779:35" pos:end="3779:36">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3783:17" pos:end="3783:22">break;</break>

            <default pos:start="3785:13" pos:end="3785:20">default:</default>

                <goto pos:start="3787:17" pos:end="3787:32">goto <name pos:start="3787:22" pos:end="3787:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3793:9" pos:end="3793:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3795:9" pos:end="3795:34">/************************/</comment>

        <comment type="block" pos:start="3797:9" pos:end="3797:24">/* string ops */</comment>



    <case pos:start="3801:5" pos:end="3801:14">case <expr pos:start="3801:10" pos:end="3801:13"><literal type="number" pos:start="3801:10" pos:end="3801:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="3801:16" pos:end="3801:26">/* movsS */</comment>

    <case pos:start="3803:5" pos:end="3803:14">case <expr pos:start="3803:10" pos:end="3803:13"><literal type="number" pos:start="3803:10" pos:end="3803:13">0xa5</literal></expr>:</case>

        <if_stmt pos:start="3805:9" pos:end="3811:33"><if pos:start="3805:9" pos:end="3807:25">if <condition pos:start="3805:12" pos:end="3805:25">(<expr pos:start="3805:13" pos:end="3805:24"><operator pos:start="3805:13" pos:end="3805:13">(</operator><name pos:start="3805:14" pos:end="3805:14">b</name> <operator pos:start="3805:16" pos:end="3805:16">&amp;</operator> <literal type="number" pos:start="3805:18" pos:end="3805:18">1</literal><operator pos:start="3805:19" pos:end="3805:19">)</operator> <operator pos:start="3805:21" pos:end="3805:22">==</operator> <literal type="number" pos:start="3805:24" pos:end="3805:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3807:13" pos:end="3807:25"><block_content pos:start="3807:13" pos:end="3807:25">

            <expr_stmt pos:start="3807:13" pos:end="3807:25"><expr pos:start="3807:13" pos:end="3807:24"><name pos:start="3807:13" pos:end="3807:14">ot</name> <operator pos:start="3807:16" pos:end="3807:16">=</operator> <name pos:start="3807:18" pos:end="3807:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3809:9" pos:end="3811:33">else<block type="pseudo" pos:start="3811:13" pos:end="3811:33"><block_content pos:start="3811:13" pos:end="3811:33">

            <expr_stmt pos:start="3811:13" pos:end="3811:33"><expr pos:start="3811:13" pos:end="3811:32"><name pos:start="3811:13" pos:end="3811:14">ot</name> <operator pos:start="3811:16" pos:end="3811:16">=</operator> <name pos:start="3811:18" pos:end="3811:22">dflag</name> <operator pos:start="3811:24" pos:end="3811:24">+</operator> <name pos:start="3811:26" pos:end="3811:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="3815:9" pos:end="3823:9"><if pos:start="3815:9" pos:end="3819:9">if <condition pos:start="3815:12" pos:end="3815:52">(<expr pos:start="3815:13" pos:end="3815:51"><name pos:start="3815:13" pos:end="3815:20">prefixes</name> <operator pos:start="3815:22" pos:end="3815:22">&amp;</operator> <operator pos:start="3815:24" pos:end="3815:24">(</operator><name pos:start="3815:25" pos:end="3815:35">PREFIX_REPZ</name> <operator pos:start="3815:37" pos:end="3815:37">|</operator> <name pos:start="3815:39" pos:end="3815:50">PREFIX_REPNZ</name><operator pos:start="3815:51" pos:end="3815:51">)</operator></expr>)</condition> <block pos:start="3815:54" pos:end="3819:9">{<block_content pos:start="3817:13" pos:end="3817:76">

            <expr_stmt pos:start="3817:13" pos:end="3817:76"><expr pos:start="3817:13" pos:end="3817:75"><call pos:start="3817:13" pos:end="3817:75"><name pos:start="3817:13" pos:end="3817:25">gen_repz_movs</name><argument_list pos:start="3817:26" pos:end="3817:75">(<argument pos:start="3817:27" pos:end="3817:27"><expr pos:start="3817:27" pos:end="3817:27"><name pos:start="3817:27" pos:end="3817:27">s</name></expr></argument>, <argument pos:start="3817:30" pos:end="3817:31"><expr pos:start="3817:30" pos:end="3817:31"><name pos:start="3817:30" pos:end="3817:31">ot</name></expr></argument>, <argument pos:start="3817:34" pos:end="3817:54"><expr pos:start="3817:34" pos:end="3817:54"><name pos:start="3817:34" pos:end="3817:41">pc_start</name> <operator pos:start="3817:43" pos:end="3817:43">-</operator> <name pos:start="3817:45" pos:end="3817:54"><name pos:start="3817:45" pos:end="3817:45">s</name><operator pos:start="3817:46" pos:end="3817:47">-&gt;</operator><name pos:start="3817:48" pos:end="3817:54">cs_base</name></name></expr></argument>, <argument pos:start="3817:57" pos:end="3817:74"><expr pos:start="3817:57" pos:end="3817:74"><name pos:start="3817:57" pos:end="3817:61"><name pos:start="3817:57" pos:end="3817:57">s</name><operator pos:start="3817:58" pos:end="3817:59">-&gt;</operator><name pos:start="3817:60" pos:end="3817:61">pc</name></name> <operator pos:start="3817:63" pos:end="3817:63">-</operator> <name pos:start="3817:65" pos:end="3817:74"><name pos:start="3817:65" pos:end="3817:65">s</name><operator pos:start="3817:66" pos:end="3817:67">-&gt;</operator><name pos:start="3817:68" pos:end="3817:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3819:11" pos:end="3823:9">else <block pos:start="3819:16" pos:end="3823:9">{<block_content pos:start="3821:13" pos:end="3821:28">

            <expr_stmt pos:start="3821:13" pos:end="3821:28"><expr pos:start="3821:13" pos:end="3821:27"><call pos:start="3821:13" pos:end="3821:27"><name pos:start="3821:13" pos:end="3821:20">gen_movs</name><argument_list pos:start="3821:21" pos:end="3821:27">(<argument pos:start="3821:22" pos:end="3821:22"><expr pos:start="3821:22" pos:end="3821:22"><name pos:start="3821:22" pos:end="3821:22">s</name></expr></argument>, <argument pos:start="3821:25" pos:end="3821:26"><expr pos:start="3821:25" pos:end="3821:26"><name pos:start="3821:25" pos:end="3821:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3825:9" pos:end="3825:14">break;</break>



    <case pos:start="3829:5" pos:end="3829:14">case <expr pos:start="3829:10" pos:end="3829:13"><literal type="number" pos:start="3829:10" pos:end="3829:13">0xaa</literal></expr>:</case> <comment type="block" pos:start="3829:16" pos:end="3829:26">/* stosS */</comment>

    <case pos:start="3831:5" pos:end="3831:14">case <expr pos:start="3831:10" pos:end="3831:13"><literal type="number" pos:start="3831:10" pos:end="3831:13">0xab</literal></expr>:</case>

        <if_stmt pos:start="3833:9" pos:end="3839:33"><if pos:start="3833:9" pos:end="3835:25">if <condition pos:start="3833:12" pos:end="3833:25">(<expr pos:start="3833:13" pos:end="3833:24"><operator pos:start="3833:13" pos:end="3833:13">(</operator><name pos:start="3833:14" pos:end="3833:14">b</name> <operator pos:start="3833:16" pos:end="3833:16">&amp;</operator> <literal type="number" pos:start="3833:18" pos:end="3833:18">1</literal><operator pos:start="3833:19" pos:end="3833:19">)</operator> <operator pos:start="3833:21" pos:end="3833:22">==</operator> <literal type="number" pos:start="3833:24" pos:end="3833:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3835:13" pos:end="3835:25"><block_content pos:start="3835:13" pos:end="3835:25">

            <expr_stmt pos:start="3835:13" pos:end="3835:25"><expr pos:start="3835:13" pos:end="3835:24"><name pos:start="3835:13" pos:end="3835:14">ot</name> <operator pos:start="3835:16" pos:end="3835:16">=</operator> <name pos:start="3835:18" pos:end="3835:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3837:9" pos:end="3839:33">else<block type="pseudo" pos:start="3839:13" pos:end="3839:33"><block_content pos:start="3839:13" pos:end="3839:33">

            <expr_stmt pos:start="3839:13" pos:end="3839:33"><expr pos:start="3839:13" pos:end="3839:32"><name pos:start="3839:13" pos:end="3839:14">ot</name> <operator pos:start="3839:16" pos:end="3839:16">=</operator> <name pos:start="3839:18" pos:end="3839:22">dflag</name> <operator pos:start="3839:24" pos:end="3839:24">+</operator> <name pos:start="3839:26" pos:end="3839:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="3843:9" pos:end="3851:9"><if pos:start="3843:9" pos:end="3847:9">if <condition pos:start="3843:12" pos:end="3843:52">(<expr pos:start="3843:13" pos:end="3843:51"><name pos:start="3843:13" pos:end="3843:20">prefixes</name> <operator pos:start="3843:22" pos:end="3843:22">&amp;</operator> <operator pos:start="3843:24" pos:end="3843:24">(</operator><name pos:start="3843:25" pos:end="3843:35">PREFIX_REPZ</name> <operator pos:start="3843:37" pos:end="3843:37">|</operator> <name pos:start="3843:39" pos:end="3843:50">PREFIX_REPNZ</name><operator pos:start="3843:51" pos:end="3843:51">)</operator></expr>)</condition> <block pos:start="3843:54" pos:end="3847:9">{<block_content pos:start="3845:13" pos:end="3845:76">

            <expr_stmt pos:start="3845:13" pos:end="3845:76"><expr pos:start="3845:13" pos:end="3845:75"><call pos:start="3845:13" pos:end="3845:75"><name pos:start="3845:13" pos:end="3845:25">gen_repz_stos</name><argument_list pos:start="3845:26" pos:end="3845:75">(<argument pos:start="3845:27" pos:end="3845:27"><expr pos:start="3845:27" pos:end="3845:27"><name pos:start="3845:27" pos:end="3845:27">s</name></expr></argument>, <argument pos:start="3845:30" pos:end="3845:31"><expr pos:start="3845:30" pos:end="3845:31"><name pos:start="3845:30" pos:end="3845:31">ot</name></expr></argument>, <argument pos:start="3845:34" pos:end="3845:54"><expr pos:start="3845:34" pos:end="3845:54"><name pos:start="3845:34" pos:end="3845:41">pc_start</name> <operator pos:start="3845:43" pos:end="3845:43">-</operator> <name pos:start="3845:45" pos:end="3845:54"><name pos:start="3845:45" pos:end="3845:45">s</name><operator pos:start="3845:46" pos:end="3845:47">-&gt;</operator><name pos:start="3845:48" pos:end="3845:54">cs_base</name></name></expr></argument>, <argument pos:start="3845:57" pos:end="3845:74"><expr pos:start="3845:57" pos:end="3845:74"><name pos:start="3845:57" pos:end="3845:61"><name pos:start="3845:57" pos:end="3845:57">s</name><operator pos:start="3845:58" pos:end="3845:59">-&gt;</operator><name pos:start="3845:60" pos:end="3845:61">pc</name></name> <operator pos:start="3845:63" pos:end="3845:63">-</operator> <name pos:start="3845:65" pos:end="3845:74"><name pos:start="3845:65" pos:end="3845:65">s</name><operator pos:start="3845:66" pos:end="3845:67">-&gt;</operator><name pos:start="3845:68" pos:end="3845:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3847:11" pos:end="3851:9">else <block pos:start="3847:16" pos:end="3851:9">{<block_content pos:start="3849:13" pos:end="3849:28">

            <expr_stmt pos:start="3849:13" pos:end="3849:28"><expr pos:start="3849:13" pos:end="3849:27"><call pos:start="3849:13" pos:end="3849:27"><name pos:start="3849:13" pos:end="3849:20">gen_stos</name><argument_list pos:start="3849:21" pos:end="3849:27">(<argument pos:start="3849:22" pos:end="3849:22"><expr pos:start="3849:22" pos:end="3849:22"><name pos:start="3849:22" pos:end="3849:22">s</name></expr></argument>, <argument pos:start="3849:25" pos:end="3849:26"><expr pos:start="3849:25" pos:end="3849:26"><name pos:start="3849:25" pos:end="3849:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3853:9" pos:end="3853:14">break;</break>

    <case pos:start="3855:5" pos:end="3855:14">case <expr pos:start="3855:10" pos:end="3855:13"><literal type="number" pos:start="3855:10" pos:end="3855:13">0xac</literal></expr>:</case> <comment type="block" pos:start="3855:16" pos:end="3855:26">/* lodsS */</comment>

    <case pos:start="3857:5" pos:end="3857:14">case <expr pos:start="3857:10" pos:end="3857:13"><literal type="number" pos:start="3857:10" pos:end="3857:13">0xad</literal></expr>:</case>

        <if_stmt pos:start="3859:9" pos:end="3865:33"><if pos:start="3859:9" pos:end="3861:25">if <condition pos:start="3859:12" pos:end="3859:25">(<expr pos:start="3859:13" pos:end="3859:24"><operator pos:start="3859:13" pos:end="3859:13">(</operator><name pos:start="3859:14" pos:end="3859:14">b</name> <operator pos:start="3859:16" pos:end="3859:16">&amp;</operator> <literal type="number" pos:start="3859:18" pos:end="3859:18">1</literal><operator pos:start="3859:19" pos:end="3859:19">)</operator> <operator pos:start="3859:21" pos:end="3859:22">==</operator> <literal type="number" pos:start="3859:24" pos:end="3859:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3861:13" pos:end="3861:25"><block_content pos:start="3861:13" pos:end="3861:25">

            <expr_stmt pos:start="3861:13" pos:end="3861:25"><expr pos:start="3861:13" pos:end="3861:24"><name pos:start="3861:13" pos:end="3861:14">ot</name> <operator pos:start="3861:16" pos:end="3861:16">=</operator> <name pos:start="3861:18" pos:end="3861:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3863:9" pos:end="3865:33">else<block type="pseudo" pos:start="3865:13" pos:end="3865:33"><block_content pos:start="3865:13" pos:end="3865:33">

            <expr_stmt pos:start="3865:13" pos:end="3865:33"><expr pos:start="3865:13" pos:end="3865:32"><name pos:start="3865:13" pos:end="3865:14">ot</name> <operator pos:start="3865:16" pos:end="3865:16">=</operator> <name pos:start="3865:18" pos:end="3865:22">dflag</name> <operator pos:start="3865:24" pos:end="3865:24">+</operator> <name pos:start="3865:26" pos:end="3865:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3867:9" pos:end="3875:9"><if pos:start="3867:9" pos:end="3871:9">if <condition pos:start="3867:12" pos:end="3867:52">(<expr pos:start="3867:13" pos:end="3867:51"><name pos:start="3867:13" pos:end="3867:20">prefixes</name> <operator pos:start="3867:22" pos:end="3867:22">&amp;</operator> <operator pos:start="3867:24" pos:end="3867:24">(</operator><name pos:start="3867:25" pos:end="3867:35">PREFIX_REPZ</name> <operator pos:start="3867:37" pos:end="3867:37">|</operator> <name pos:start="3867:39" pos:end="3867:50">PREFIX_REPNZ</name><operator pos:start="3867:51" pos:end="3867:51">)</operator></expr>)</condition> <block pos:start="3867:54" pos:end="3871:9">{<block_content pos:start="3869:13" pos:end="3869:76">

            <expr_stmt pos:start="3869:13" pos:end="3869:76"><expr pos:start="3869:13" pos:end="3869:75"><call pos:start="3869:13" pos:end="3869:75"><name pos:start="3869:13" pos:end="3869:25">gen_repz_lods</name><argument_list pos:start="3869:26" pos:end="3869:75">(<argument pos:start="3869:27" pos:end="3869:27"><expr pos:start="3869:27" pos:end="3869:27"><name pos:start="3869:27" pos:end="3869:27">s</name></expr></argument>, <argument pos:start="3869:30" pos:end="3869:31"><expr pos:start="3869:30" pos:end="3869:31"><name pos:start="3869:30" pos:end="3869:31">ot</name></expr></argument>, <argument pos:start="3869:34" pos:end="3869:54"><expr pos:start="3869:34" pos:end="3869:54"><name pos:start="3869:34" pos:end="3869:41">pc_start</name> <operator pos:start="3869:43" pos:end="3869:43">-</operator> <name pos:start="3869:45" pos:end="3869:54"><name pos:start="3869:45" pos:end="3869:45">s</name><operator pos:start="3869:46" pos:end="3869:47">-&gt;</operator><name pos:start="3869:48" pos:end="3869:54">cs_base</name></name></expr></argument>, <argument pos:start="3869:57" pos:end="3869:74"><expr pos:start="3869:57" pos:end="3869:74"><name pos:start="3869:57" pos:end="3869:61"><name pos:start="3869:57" pos:end="3869:57">s</name><operator pos:start="3869:58" pos:end="3869:59">-&gt;</operator><name pos:start="3869:60" pos:end="3869:61">pc</name></name> <operator pos:start="3869:63" pos:end="3869:63">-</operator> <name pos:start="3869:65" pos:end="3869:74"><name pos:start="3869:65" pos:end="3869:65">s</name><operator pos:start="3869:66" pos:end="3869:67">-&gt;</operator><name pos:start="3869:68" pos:end="3869:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3871:11" pos:end="3875:9">else <block pos:start="3871:16" pos:end="3875:9">{<block_content pos:start="3873:13" pos:end="3873:28">

            <expr_stmt pos:start="3873:13" pos:end="3873:28"><expr pos:start="3873:13" pos:end="3873:27"><call pos:start="3873:13" pos:end="3873:27"><name pos:start="3873:13" pos:end="3873:20">gen_lods</name><argument_list pos:start="3873:21" pos:end="3873:27">(<argument pos:start="3873:22" pos:end="3873:22"><expr pos:start="3873:22" pos:end="3873:22"><name pos:start="3873:22" pos:end="3873:22">s</name></expr></argument>, <argument pos:start="3873:25" pos:end="3873:26"><expr pos:start="3873:25" pos:end="3873:26"><name pos:start="3873:25" pos:end="3873:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3877:9" pos:end="3877:14">break;</break>

    <case pos:start="3879:5" pos:end="3879:14">case <expr pos:start="3879:10" pos:end="3879:13"><literal type="number" pos:start="3879:10" pos:end="3879:13">0xae</literal></expr>:</case> <comment type="block" pos:start="3879:16" pos:end="3879:26">/* scasS */</comment>

    <case pos:start="3881:5" pos:end="3881:14">case <expr pos:start="3881:10" pos:end="3881:13"><literal type="number" pos:start="3881:10" pos:end="3881:13">0xaf</literal></expr>:</case>

        <if_stmt pos:start="3883:9" pos:end="3889:33"><if pos:start="3883:9" pos:end="3885:25">if <condition pos:start="3883:12" pos:end="3883:25">(<expr pos:start="3883:13" pos:end="3883:24"><operator pos:start="3883:13" pos:end="3883:13">(</operator><name pos:start="3883:14" pos:end="3883:14">b</name> <operator pos:start="3883:16" pos:end="3883:16">&amp;</operator> <literal type="number" pos:start="3883:18" pos:end="3883:18">1</literal><operator pos:start="3883:19" pos:end="3883:19">)</operator> <operator pos:start="3883:21" pos:end="3883:22">==</operator> <literal type="number" pos:start="3883:24" pos:end="3883:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3885:13" pos:end="3885:25"><block_content pos:start="3885:13" pos:end="3885:25">

            <expr_stmt pos:start="3885:13" pos:end="3885:25"><expr pos:start="3885:13" pos:end="3885:24"><name pos:start="3885:13" pos:end="3885:14">ot</name> <operator pos:start="3885:16" pos:end="3885:16">=</operator> <name pos:start="3885:18" pos:end="3885:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3887:9" pos:end="3889:33">else<block type="pseudo" pos:start="3889:13" pos:end="3889:33"><block_content pos:start="3889:13" pos:end="3889:33">

            <expr_stmt pos:start="3889:13" pos:end="3889:33"><expr pos:start="3889:13" pos:end="3889:32"><name pos:start="3889:13" pos:end="3889:14">ot</name> <operator pos:start="3889:16" pos:end="3889:16">=</operator> <name pos:start="3889:18" pos:end="3889:22">dflag</name> <operator pos:start="3889:24" pos:end="3889:24">+</operator> <name pos:start="3889:26" pos:end="3889:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3891:9" pos:end="3905:9"><if pos:start="3891:9" pos:end="3895:9">if <condition pos:start="3891:12" pos:end="3891:36">(<expr pos:start="3891:13" pos:end="3891:35"><name pos:start="3891:13" pos:end="3891:20">prefixes</name> <operator pos:start="3891:22" pos:end="3891:22">&amp;</operator> <name pos:start="3891:24" pos:end="3891:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3891:38" pos:end="3895:9">{<block_content pos:start="3893:13" pos:end="3893:79">

            <expr_stmt pos:start="3893:13" pos:end="3893:79"><expr pos:start="3893:13" pos:end="3893:78"><call pos:start="3893:13" pos:end="3893:78"><name pos:start="3893:13" pos:end="3893:25">gen_repz_scas</name><argument_list pos:start="3893:26" pos:end="3893:78">(<argument pos:start="3893:27" pos:end="3893:27"><expr pos:start="3893:27" pos:end="3893:27"><name pos:start="3893:27" pos:end="3893:27">s</name></expr></argument>, <argument pos:start="3893:30" pos:end="3893:31"><expr pos:start="3893:30" pos:end="3893:31"><name pos:start="3893:30" pos:end="3893:31">ot</name></expr></argument>, <argument pos:start="3893:34" pos:end="3893:54"><expr pos:start="3893:34" pos:end="3893:54"><name pos:start="3893:34" pos:end="3893:41">pc_start</name> <operator pos:start="3893:43" pos:end="3893:43">-</operator> <name pos:start="3893:45" pos:end="3893:54"><name pos:start="3893:45" pos:end="3893:45">s</name><operator pos:start="3893:46" pos:end="3893:47">-&gt;</operator><name pos:start="3893:48" pos:end="3893:54">cs_base</name></name></expr></argument>, <argument pos:start="3893:57" pos:end="3893:74"><expr pos:start="3893:57" pos:end="3893:74"><name pos:start="3893:57" pos:end="3893:61"><name pos:start="3893:57" pos:end="3893:57">s</name><operator pos:start="3893:58" pos:end="3893:59">-&gt;</operator><name pos:start="3893:60" pos:end="3893:61">pc</name></name> <operator pos:start="3893:63" pos:end="3893:63">-</operator> <name pos:start="3893:65" pos:end="3893:74"><name pos:start="3893:65" pos:end="3893:65">s</name><operator pos:start="3893:66" pos:end="3893:67">-&gt;</operator><name pos:start="3893:68" pos:end="3893:74">cs_base</name></name></expr></argument>, <argument pos:start="3893:77" pos:end="3893:77"><expr pos:start="3893:77" pos:end="3893:77"><literal type="number" pos:start="3893:77" pos:end="3893:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3895:11" pos:end="3899:9">else if <condition pos:start="3895:19" pos:end="3895:42">(<expr pos:start="3895:20" pos:end="3895:41"><name pos:start="3895:20" pos:end="3895:27">prefixes</name> <operator pos:start="3895:29" pos:end="3895:29">&amp;</operator> <name pos:start="3895:31" pos:end="3895:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3895:44" pos:end="3899:9">{<block_content pos:start="3897:13" pos:end="3897:79">

            <expr_stmt pos:start="3897:13" pos:end="3897:79"><expr pos:start="3897:13" pos:end="3897:78"><call pos:start="3897:13" pos:end="3897:78"><name pos:start="3897:13" pos:end="3897:25">gen_repz_scas</name><argument_list pos:start="3897:26" pos:end="3897:78">(<argument pos:start="3897:27" pos:end="3897:27"><expr pos:start="3897:27" pos:end="3897:27"><name pos:start="3897:27" pos:end="3897:27">s</name></expr></argument>, <argument pos:start="3897:30" pos:end="3897:31"><expr pos:start="3897:30" pos:end="3897:31"><name pos:start="3897:30" pos:end="3897:31">ot</name></expr></argument>, <argument pos:start="3897:34" pos:end="3897:54"><expr pos:start="3897:34" pos:end="3897:54"><name pos:start="3897:34" pos:end="3897:41">pc_start</name> <operator pos:start="3897:43" pos:end="3897:43">-</operator> <name pos:start="3897:45" pos:end="3897:54"><name pos:start="3897:45" pos:end="3897:45">s</name><operator pos:start="3897:46" pos:end="3897:47">-&gt;</operator><name pos:start="3897:48" pos:end="3897:54">cs_base</name></name></expr></argument>, <argument pos:start="3897:57" pos:end="3897:74"><expr pos:start="3897:57" pos:end="3897:74"><name pos:start="3897:57" pos:end="3897:61"><name pos:start="3897:57" pos:end="3897:57">s</name><operator pos:start="3897:58" pos:end="3897:59">-&gt;</operator><name pos:start="3897:60" pos:end="3897:61">pc</name></name> <operator pos:start="3897:63" pos:end="3897:63">-</operator> <name pos:start="3897:65" pos:end="3897:74"><name pos:start="3897:65" pos:end="3897:65">s</name><operator pos:start="3897:66" pos:end="3897:67">-&gt;</operator><name pos:start="3897:68" pos:end="3897:74">cs_base</name></name></expr></argument>, <argument pos:start="3897:77" pos:end="3897:77"><expr pos:start="3897:77" pos:end="3897:77"><literal type="number" pos:start="3897:77" pos:end="3897:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3899:11" pos:end="3905:9">else <block pos:start="3899:16" pos:end="3905:9">{<block_content pos:start="3901:13" pos:end="3903:39">

            <expr_stmt pos:start="3901:13" pos:end="3901:28"><expr pos:start="3901:13" pos:end="3901:27"><call pos:start="3901:13" pos:end="3901:27"><name pos:start="3901:13" pos:end="3901:20">gen_scas</name><argument_list pos:start="3901:21" pos:end="3901:27">(<argument pos:start="3901:22" pos:end="3901:22"><expr pos:start="3901:22" pos:end="3901:22"><name pos:start="3901:22" pos:end="3901:22">s</name></expr></argument>, <argument pos:start="3901:25" pos:end="3901:26"><expr pos:start="3901:25" pos:end="3901:26"><name pos:start="3901:25" pos:end="3901:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3903:13" pos:end="3903:39"><expr pos:start="3903:13" pos:end="3903:38"><name pos:start="3903:13" pos:end="3903:20"><name pos:start="3903:13" pos:end="3903:13">s</name><operator pos:start="3903:14" pos:end="3903:15">-&gt;</operator><name pos:start="3903:16" pos:end="3903:20">cc_op</name></name> <operator pos:start="3903:22" pos:end="3903:22">=</operator> <name pos:start="3903:24" pos:end="3903:33">CC_OP_SUBB</name> <operator pos:start="3903:35" pos:end="3903:35">+</operator> <name pos:start="3903:37" pos:end="3903:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3907:9" pos:end="3907:14">break;</break>



    <case pos:start="3911:5" pos:end="3911:14">case <expr pos:start="3911:10" pos:end="3911:13"><literal type="number" pos:start="3911:10" pos:end="3911:13">0xa6</literal></expr>:</case> <comment type="block" pos:start="3911:16" pos:end="3911:26">/* cmpsS */</comment>

    <case pos:start="3913:5" pos:end="3913:14">case <expr pos:start="3913:10" pos:end="3913:13"><literal type="number" pos:start="3913:10" pos:end="3913:13">0xa7</literal></expr>:</case>

        <if_stmt pos:start="3915:9" pos:end="3921:33"><if pos:start="3915:9" pos:end="3917:25">if <condition pos:start="3915:12" pos:end="3915:25">(<expr pos:start="3915:13" pos:end="3915:24"><operator pos:start="3915:13" pos:end="3915:13">(</operator><name pos:start="3915:14" pos:end="3915:14">b</name> <operator pos:start="3915:16" pos:end="3915:16">&amp;</operator> <literal type="number" pos:start="3915:18" pos:end="3915:18">1</literal><operator pos:start="3915:19" pos:end="3915:19">)</operator> <operator pos:start="3915:21" pos:end="3915:22">==</operator> <literal type="number" pos:start="3915:24" pos:end="3915:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3917:13" pos:end="3917:25"><block_content pos:start="3917:13" pos:end="3917:25">

            <expr_stmt pos:start="3917:13" pos:end="3917:25"><expr pos:start="3917:13" pos:end="3917:24"><name pos:start="3917:13" pos:end="3917:14">ot</name> <operator pos:start="3917:16" pos:end="3917:16">=</operator> <name pos:start="3917:18" pos:end="3917:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3919:9" pos:end="3921:33">else<block type="pseudo" pos:start="3921:13" pos:end="3921:33"><block_content pos:start="3921:13" pos:end="3921:33">

            <expr_stmt pos:start="3921:13" pos:end="3921:33"><expr pos:start="3921:13" pos:end="3921:32"><name pos:start="3921:13" pos:end="3921:14">ot</name> <operator pos:start="3921:16" pos:end="3921:16">=</operator> <name pos:start="3921:18" pos:end="3921:22">dflag</name> <operator pos:start="3921:24" pos:end="3921:24">+</operator> <name pos:start="3921:26" pos:end="3921:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3923:9" pos:end="3937:9"><if pos:start="3923:9" pos:end="3927:9">if <condition pos:start="3923:12" pos:end="3923:36">(<expr pos:start="3923:13" pos:end="3923:35"><name pos:start="3923:13" pos:end="3923:20">prefixes</name> <operator pos:start="3923:22" pos:end="3923:22">&amp;</operator> <name pos:start="3923:24" pos:end="3923:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3923:38" pos:end="3927:9">{<block_content pos:start="3925:13" pos:end="3925:79">

            <expr_stmt pos:start="3925:13" pos:end="3925:79"><expr pos:start="3925:13" pos:end="3925:78"><call pos:start="3925:13" pos:end="3925:78"><name pos:start="3925:13" pos:end="3925:25">gen_repz_cmps</name><argument_list pos:start="3925:26" pos:end="3925:78">(<argument pos:start="3925:27" pos:end="3925:27"><expr pos:start="3925:27" pos:end="3925:27"><name pos:start="3925:27" pos:end="3925:27">s</name></expr></argument>, <argument pos:start="3925:30" pos:end="3925:31"><expr pos:start="3925:30" pos:end="3925:31"><name pos:start="3925:30" pos:end="3925:31">ot</name></expr></argument>, <argument pos:start="3925:34" pos:end="3925:54"><expr pos:start="3925:34" pos:end="3925:54"><name pos:start="3925:34" pos:end="3925:41">pc_start</name> <operator pos:start="3925:43" pos:end="3925:43">-</operator> <name pos:start="3925:45" pos:end="3925:54"><name pos:start="3925:45" pos:end="3925:45">s</name><operator pos:start="3925:46" pos:end="3925:47">-&gt;</operator><name pos:start="3925:48" pos:end="3925:54">cs_base</name></name></expr></argument>, <argument pos:start="3925:57" pos:end="3925:74"><expr pos:start="3925:57" pos:end="3925:74"><name pos:start="3925:57" pos:end="3925:61"><name pos:start="3925:57" pos:end="3925:57">s</name><operator pos:start="3925:58" pos:end="3925:59">-&gt;</operator><name pos:start="3925:60" pos:end="3925:61">pc</name></name> <operator pos:start="3925:63" pos:end="3925:63">-</operator> <name pos:start="3925:65" pos:end="3925:74"><name pos:start="3925:65" pos:end="3925:65">s</name><operator pos:start="3925:66" pos:end="3925:67">-&gt;</operator><name pos:start="3925:68" pos:end="3925:74">cs_base</name></name></expr></argument>, <argument pos:start="3925:77" pos:end="3925:77"><expr pos:start="3925:77" pos:end="3925:77"><literal type="number" pos:start="3925:77" pos:end="3925:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3927:11" pos:end="3931:9">else if <condition pos:start="3927:19" pos:end="3927:42">(<expr pos:start="3927:20" pos:end="3927:41"><name pos:start="3927:20" pos:end="3927:27">prefixes</name> <operator pos:start="3927:29" pos:end="3927:29">&amp;</operator> <name pos:start="3927:31" pos:end="3927:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3927:44" pos:end="3931:9">{<block_content pos:start="3929:13" pos:end="3929:79">

            <expr_stmt pos:start="3929:13" pos:end="3929:79"><expr pos:start="3929:13" pos:end="3929:78"><call pos:start="3929:13" pos:end="3929:78"><name pos:start="3929:13" pos:end="3929:25">gen_repz_cmps</name><argument_list pos:start="3929:26" pos:end="3929:78">(<argument pos:start="3929:27" pos:end="3929:27"><expr pos:start="3929:27" pos:end="3929:27"><name pos:start="3929:27" pos:end="3929:27">s</name></expr></argument>, <argument pos:start="3929:30" pos:end="3929:31"><expr pos:start="3929:30" pos:end="3929:31"><name pos:start="3929:30" pos:end="3929:31">ot</name></expr></argument>, <argument pos:start="3929:34" pos:end="3929:54"><expr pos:start="3929:34" pos:end="3929:54"><name pos:start="3929:34" pos:end="3929:41">pc_start</name> <operator pos:start="3929:43" pos:end="3929:43">-</operator> <name pos:start="3929:45" pos:end="3929:54"><name pos:start="3929:45" pos:end="3929:45">s</name><operator pos:start="3929:46" pos:end="3929:47">-&gt;</operator><name pos:start="3929:48" pos:end="3929:54">cs_base</name></name></expr></argument>, <argument pos:start="3929:57" pos:end="3929:74"><expr pos:start="3929:57" pos:end="3929:74"><name pos:start="3929:57" pos:end="3929:61"><name pos:start="3929:57" pos:end="3929:57">s</name><operator pos:start="3929:58" pos:end="3929:59">-&gt;</operator><name pos:start="3929:60" pos:end="3929:61">pc</name></name> <operator pos:start="3929:63" pos:end="3929:63">-</operator> <name pos:start="3929:65" pos:end="3929:74"><name pos:start="3929:65" pos:end="3929:65">s</name><operator pos:start="3929:66" pos:end="3929:67">-&gt;</operator><name pos:start="3929:68" pos:end="3929:74">cs_base</name></name></expr></argument>, <argument pos:start="3929:77" pos:end="3929:77"><expr pos:start="3929:77" pos:end="3929:77"><literal type="number" pos:start="3929:77" pos:end="3929:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3931:11" pos:end="3937:9">else <block pos:start="3931:16" pos:end="3937:9">{<block_content pos:start="3933:13" pos:end="3935:39">

            <expr_stmt pos:start="3933:13" pos:end="3933:28"><expr pos:start="3933:13" pos:end="3933:27"><call pos:start="3933:13" pos:end="3933:27"><name pos:start="3933:13" pos:end="3933:20">gen_cmps</name><argument_list pos:start="3933:21" pos:end="3933:27">(<argument pos:start="3933:22" pos:end="3933:22"><expr pos:start="3933:22" pos:end="3933:22"><name pos:start="3933:22" pos:end="3933:22">s</name></expr></argument>, <argument pos:start="3933:25" pos:end="3933:26"><expr pos:start="3933:25" pos:end="3933:26"><name pos:start="3933:25" pos:end="3933:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3935:13" pos:end="3935:39"><expr pos:start="3935:13" pos:end="3935:38"><name pos:start="3935:13" pos:end="3935:20"><name pos:start="3935:13" pos:end="3935:13">s</name><operator pos:start="3935:14" pos:end="3935:15">-&gt;</operator><name pos:start="3935:16" pos:end="3935:20">cc_op</name></name> <operator pos:start="3935:22" pos:end="3935:22">=</operator> <name pos:start="3935:24" pos:end="3935:33">CC_OP_SUBB</name> <operator pos:start="3935:35" pos:end="3935:35">+</operator> <name pos:start="3935:37" pos:end="3935:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3939:9" pos:end="3939:14">break;</break>

    <case pos:start="3941:5" pos:end="3941:14">case <expr pos:start="3941:10" pos:end="3941:13"><literal type="number" pos:start="3941:10" pos:end="3941:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="3941:16" pos:end="3941:25">/* insS */</comment>

    <case pos:start="3943:5" pos:end="3943:14">case <expr pos:start="3943:10" pos:end="3943:13"><literal type="number" pos:start="3943:10" pos:end="3943:13">0x6d</literal></expr>:</case>

        <if_stmt pos:start="3945:9" pos:end="3951:43"><if pos:start="3945:9" pos:end="3947:25">if <condition pos:start="3945:12" pos:end="3945:25">(<expr pos:start="3945:13" pos:end="3945:24"><operator pos:start="3945:13" pos:end="3945:13">(</operator><name pos:start="3945:14" pos:end="3945:14">b</name> <operator pos:start="3945:16" pos:end="3945:16">&amp;</operator> <literal type="number" pos:start="3945:18" pos:end="3945:18">1</literal><operator pos:start="3945:19" pos:end="3945:19">)</operator> <operator pos:start="3945:21" pos:end="3945:22">==</operator> <literal type="number" pos:start="3945:24" pos:end="3945:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3947:13" pos:end="3947:25"><block_content pos:start="3947:13" pos:end="3947:25">

            <expr_stmt pos:start="3947:13" pos:end="3947:25"><expr pos:start="3947:13" pos:end="3947:24"><name pos:start="3947:13" pos:end="3947:14">ot</name> <operator pos:start="3947:16" pos:end="3947:16">=</operator> <name pos:start="3947:18" pos:end="3947:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3949:9" pos:end="3951:43">else<block type="pseudo" pos:start="3951:13" pos:end="3951:43"><block_content pos:start="3951:13" pos:end="3951:43">

            <expr_stmt pos:start="3951:13" pos:end="3951:43"><expr pos:start="3951:13" pos:end="3951:42"><name pos:start="3951:13" pos:end="3951:14">ot</name> <operator pos:start="3951:16" pos:end="3951:16">=</operator> <ternary pos:start="3951:18" pos:end="3951:42"><condition pos:start="3951:18" pos:end="3951:24"><expr pos:start="3951:18" pos:end="3951:22"><name pos:start="3951:18" pos:end="3951:22">dflag</name></expr> ?</condition><then pos:start="3951:26" pos:end="3951:32"> <expr pos:start="3951:26" pos:end="3951:32"><name pos:start="3951:26" pos:end="3951:32">OT_LONG</name></expr> </then><else pos:start="3951:34" pos:end="3951:42">: <expr pos:start="3951:36" pos:end="3951:42"><name pos:start="3951:36" pos:end="3951:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3953:9" pos:end="3953:45"><expr pos:start="3953:9" pos:end="3953:44"><call pos:start="3953:9" pos:end="3953:44"><name pos:start="3953:9" pos:end="3953:25">gen_op_mov_TN_reg</name><argument_list pos:start="3953:26" pos:end="3953:44">(<argument pos:start="3953:27" pos:end="3953:33"><expr pos:start="3953:27" pos:end="3953:33"><name pos:start="3953:27" pos:end="3953:33">OT_WORD</name></expr></argument>, <argument pos:start="3953:36" pos:end="3953:36"><expr pos:start="3953:36" pos:end="3953:36"><literal type="number" pos:start="3953:36" pos:end="3953:36">0</literal></expr></argument>, <argument pos:start="3953:39" pos:end="3953:43"><expr pos:start="3953:39" pos:end="3953:43"><name pos:start="3953:39" pos:end="3953:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3955:9" pos:end="3955:30"><expr pos:start="3955:9" pos:end="3955:29"><call pos:start="3955:9" pos:end="3955:29"><name pos:start="3955:9" pos:end="3955:27">gen_op_andl_T0_ffff</name><argument_list pos:start="3955:28" pos:end="3955:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3957:9" pos:end="3959:68"><expr pos:start="3957:9" pos:end="3959:67"><call pos:start="3957:9" pos:end="3959:67"><name pos:start="3957:9" pos:end="3957:20">gen_check_io</name><argument_list pos:start="3957:21" pos:end="3959:67">(<argument pos:start="3957:22" pos:end="3957:22"><expr pos:start="3957:22" pos:end="3957:22"><name pos:start="3957:22" pos:end="3957:22">s</name></expr></argument>, <argument pos:start="3957:25" pos:end="3957:26"><expr pos:start="3957:25" pos:end="3957:26"><name pos:start="3957:25" pos:end="3957:26">ot</name></expr></argument>, <argument pos:start="3957:29" pos:end="3957:49"><expr pos:start="3957:29" pos:end="3957:49"><name pos:start="3957:29" pos:end="3957:36">pc_start</name> <operator pos:start="3957:38" pos:end="3957:38">-</operator> <name pos:start="3957:40" pos:end="3957:49"><name pos:start="3957:40" pos:end="3957:40">s</name><operator pos:start="3957:41" pos:end="3957:42">-&gt;</operator><name pos:start="3957:43" pos:end="3957:49">cs_base</name></name></expr></argument>, 

                     <argument pos:start="3959:22" pos:end="3959:66"><expr pos:start="3959:22" pos:end="3959:66"><name pos:start="3959:22" pos:end="3959:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="3959:41" pos:end="3959:41">|</operator> <call pos:start="3959:43" pos:end="3959:62"><name pos:start="3959:43" pos:end="3959:52">svm_is_rep</name><argument_list pos:start="3959:53" pos:end="3959:62">(<argument pos:start="3959:54" pos:end="3959:61"><expr pos:start="3959:54" pos:end="3959:61"><name pos:start="3959:54" pos:end="3959:61">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="3959:64" pos:end="3959:64">|</operator> <literal type="number" pos:start="3959:66" pos:end="3959:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3961:9" pos:end="3975:9"><if pos:start="3961:9" pos:end="3965:9">if <condition pos:start="3961:12" pos:end="3961:52">(<expr pos:start="3961:13" pos:end="3961:51"><name pos:start="3961:13" pos:end="3961:20">prefixes</name> <operator pos:start="3961:22" pos:end="3961:22">&amp;</operator> <operator pos:start="3961:24" pos:end="3961:24">(</operator><name pos:start="3961:25" pos:end="3961:35">PREFIX_REPZ</name> <operator pos:start="3961:37" pos:end="3961:37">|</operator> <name pos:start="3961:39" pos:end="3961:50">PREFIX_REPNZ</name><operator pos:start="3961:51" pos:end="3961:51">)</operator></expr>)</condition> <block pos:start="3961:54" pos:end="3965:9">{<block_content pos:start="3963:13" pos:end="3963:75">

            <expr_stmt pos:start="3963:13" pos:end="3963:75"><expr pos:start="3963:13" pos:end="3963:74"><call pos:start="3963:13" pos:end="3963:74"><name pos:start="3963:13" pos:end="3963:24">gen_repz_ins</name><argument_list pos:start="3963:25" pos:end="3963:74">(<argument pos:start="3963:26" pos:end="3963:26"><expr pos:start="3963:26" pos:end="3963:26"><name pos:start="3963:26" pos:end="3963:26">s</name></expr></argument>, <argument pos:start="3963:29" pos:end="3963:30"><expr pos:start="3963:29" pos:end="3963:30"><name pos:start="3963:29" pos:end="3963:30">ot</name></expr></argument>, <argument pos:start="3963:33" pos:end="3963:53"><expr pos:start="3963:33" pos:end="3963:53"><name pos:start="3963:33" pos:end="3963:40">pc_start</name> <operator pos:start="3963:42" pos:end="3963:42">-</operator> <name pos:start="3963:44" pos:end="3963:53"><name pos:start="3963:44" pos:end="3963:44">s</name><operator pos:start="3963:45" pos:end="3963:46">-&gt;</operator><name pos:start="3963:47" pos:end="3963:53">cs_base</name></name></expr></argument>, <argument pos:start="3963:56" pos:end="3963:73"><expr pos:start="3963:56" pos:end="3963:73"><name pos:start="3963:56" pos:end="3963:60"><name pos:start="3963:56" pos:end="3963:56">s</name><operator pos:start="3963:57" pos:end="3963:58">-&gt;</operator><name pos:start="3963:59" pos:end="3963:60">pc</name></name> <operator pos:start="3963:62" pos:end="3963:62">-</operator> <name pos:start="3963:64" pos:end="3963:73"><name pos:start="3963:64" pos:end="3963:64">s</name><operator pos:start="3963:65" pos:end="3963:66">-&gt;</operator><name pos:start="3963:67" pos:end="3963:73">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3965:11" pos:end="3975:9">else <block pos:start="3965:16" pos:end="3975:9">{<block_content pos:start="3967:13" pos:end="3973:13">

            <expr_stmt pos:start="3967:13" pos:end="3967:27"><expr pos:start="3967:13" pos:end="3967:26"><call pos:start="3967:13" pos:end="3967:26"><name pos:start="3967:13" pos:end="3967:19">gen_ins</name><argument_list pos:start="3967:20" pos:end="3967:26">(<argument pos:start="3967:21" pos:end="3967:21"><expr pos:start="3967:21" pos:end="3967:21"><name pos:start="3967:21" pos:end="3967:21">s</name></expr></argument>, <argument pos:start="3967:24" pos:end="3967:25"><expr pos:start="3967:24" pos:end="3967:25"><name pos:start="3967:24" pos:end="3967:25">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3969:13" pos:end="3973:13"><if pos:start="3969:13" pos:end="3973:13">if <condition pos:start="3969:16" pos:end="3969:27">(<expr pos:start="3969:17" pos:end="3969:26"><name pos:start="3969:17" pos:end="3969:26">use_icount</name></expr>)</condition> <block pos:start="3969:29" pos:end="3973:13">{<block_content pos:start="3971:17" pos:end="3971:47">

                <expr_stmt pos:start="3971:17" pos:end="3971:47"><expr pos:start="3971:17" pos:end="3971:46"><call pos:start="3971:17" pos:end="3971:46"><name pos:start="3971:17" pos:end="3971:23">gen_jmp</name><argument_list pos:start="3971:24" pos:end="3971:46">(<argument pos:start="3971:25" pos:end="3971:25"><expr pos:start="3971:25" pos:end="3971:25"><name pos:start="3971:25" pos:end="3971:25">s</name></expr></argument>, <argument pos:start="3971:28" pos:end="3971:45"><expr pos:start="3971:28" pos:end="3971:45"><name pos:start="3971:28" pos:end="3971:32"><name pos:start="3971:28" pos:end="3971:28">s</name><operator pos:start="3971:29" pos:end="3971:30">-&gt;</operator><name pos:start="3971:31" pos:end="3971:32">pc</name></name> <operator pos:start="3971:34" pos:end="3971:34">-</operator> <name pos:start="3971:36" pos:end="3971:45"><name pos:start="3971:36" pos:end="3971:36">s</name><operator pos:start="3971:37" pos:end="3971:38">-&gt;</operator><name pos:start="3971:39" pos:end="3971:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3977:9" pos:end="3977:14">break;</break>

    <case pos:start="3979:5" pos:end="3979:14">case <expr pos:start="3979:10" pos:end="3979:13"><literal type="number" pos:start="3979:10" pos:end="3979:13">0x6e</literal></expr>:</case> <comment type="block" pos:start="3979:16" pos:end="3979:26">/* outsS */</comment>

    <case pos:start="3981:5" pos:end="3981:14">case <expr pos:start="3981:10" pos:end="3981:13"><literal type="number" pos:start="3981:10" pos:end="3981:13">0x6f</literal></expr>:</case>

        <if_stmt pos:start="3983:9" pos:end="3989:43"><if pos:start="3983:9" pos:end="3985:25">if <condition pos:start="3983:12" pos:end="3983:25">(<expr pos:start="3983:13" pos:end="3983:24"><operator pos:start="3983:13" pos:end="3983:13">(</operator><name pos:start="3983:14" pos:end="3983:14">b</name> <operator pos:start="3983:16" pos:end="3983:16">&amp;</operator> <literal type="number" pos:start="3983:18" pos:end="3983:18">1</literal><operator pos:start="3983:19" pos:end="3983:19">)</operator> <operator pos:start="3983:21" pos:end="3983:22">==</operator> <literal type="number" pos:start="3983:24" pos:end="3983:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3985:13" pos:end="3985:25"><block_content pos:start="3985:13" pos:end="3985:25">

            <expr_stmt pos:start="3985:13" pos:end="3985:25"><expr pos:start="3985:13" pos:end="3985:24"><name pos:start="3985:13" pos:end="3985:14">ot</name> <operator pos:start="3985:16" pos:end="3985:16">=</operator> <name pos:start="3985:18" pos:end="3985:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3987:9" pos:end="3989:43">else<block type="pseudo" pos:start="3989:13" pos:end="3989:43"><block_content pos:start="3989:13" pos:end="3989:43">

            <expr_stmt pos:start="3989:13" pos:end="3989:43"><expr pos:start="3989:13" pos:end="3989:42"><name pos:start="3989:13" pos:end="3989:14">ot</name> <operator pos:start="3989:16" pos:end="3989:16">=</operator> <ternary pos:start="3989:18" pos:end="3989:42"><condition pos:start="3989:18" pos:end="3989:24"><expr pos:start="3989:18" pos:end="3989:22"><name pos:start="3989:18" pos:end="3989:22">dflag</name></expr> ?</condition><then pos:start="3989:26" pos:end="3989:32"> <expr pos:start="3989:26" pos:end="3989:32"><name pos:start="3989:26" pos:end="3989:32">OT_LONG</name></expr> </then><else pos:start="3989:34" pos:end="3989:42">: <expr pos:start="3989:36" pos:end="3989:42"><name pos:start="3989:36" pos:end="3989:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3991:9" pos:end="3991:45"><expr pos:start="3991:9" pos:end="3991:44"><call pos:start="3991:9" pos:end="3991:44"><name pos:start="3991:9" pos:end="3991:25">gen_op_mov_TN_reg</name><argument_list pos:start="3991:26" pos:end="3991:44">(<argument pos:start="3991:27" pos:end="3991:33"><expr pos:start="3991:27" pos:end="3991:33"><name pos:start="3991:27" pos:end="3991:33">OT_WORD</name></expr></argument>, <argument pos:start="3991:36" pos:end="3991:36"><expr pos:start="3991:36" pos:end="3991:36"><literal type="number" pos:start="3991:36" pos:end="3991:36">0</literal></expr></argument>, <argument pos:start="3991:39" pos:end="3991:43"><expr pos:start="3991:39" pos:end="3991:43"><name pos:start="3991:39" pos:end="3991:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3993:9" pos:end="3993:30"><expr pos:start="3993:9" pos:end="3993:29"><call pos:start="3993:9" pos:end="3993:29"><name pos:start="3993:9" pos:end="3993:27">gen_op_andl_T0_ffff</name><argument_list pos:start="3993:28" pos:end="3993:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3995:9" pos:end="3997:47"><expr pos:start="3995:9" pos:end="3997:46"><call pos:start="3995:9" pos:end="3997:46"><name pos:start="3995:9" pos:end="3995:20">gen_check_io</name><argument_list pos:start="3995:21" pos:end="3997:46">(<argument pos:start="3995:22" pos:end="3995:22"><expr pos:start="3995:22" pos:end="3995:22"><name pos:start="3995:22" pos:end="3995:22">s</name></expr></argument>, <argument pos:start="3995:25" pos:end="3995:26"><expr pos:start="3995:25" pos:end="3995:26"><name pos:start="3995:25" pos:end="3995:26">ot</name></expr></argument>, <argument pos:start="3995:29" pos:end="3995:49"><expr pos:start="3995:29" pos:end="3995:49"><name pos:start="3995:29" pos:end="3995:36">pc_start</name> <operator pos:start="3995:38" pos:end="3995:38">-</operator> <name pos:start="3995:40" pos:end="3995:49"><name pos:start="3995:40" pos:end="3995:40">s</name><operator pos:start="3995:41" pos:end="3995:42">-&gt;</operator><name pos:start="3995:43" pos:end="3995:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="3997:22" pos:end="3997:45"><expr pos:start="3997:22" pos:end="3997:45"><call pos:start="3997:22" pos:end="3997:41"><name pos:start="3997:22" pos:end="3997:31">svm_is_rep</name><argument_list pos:start="3997:32" pos:end="3997:41">(<argument pos:start="3997:33" pos:end="3997:40"><expr pos:start="3997:33" pos:end="3997:40"><name pos:start="3997:33" pos:end="3997:40">prefixes</name></expr></argument>)</argument_list></call> <operator pos:start="3997:43" pos:end="3997:43">|</operator> <literal type="number" pos:start="3997:45" pos:end="3997:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3999:9" pos:end="4013:9"><if pos:start="3999:9" pos:end="4003:9">if <condition pos:start="3999:12" pos:end="3999:52">(<expr pos:start="3999:13" pos:end="3999:51"><name pos:start="3999:13" pos:end="3999:20">prefixes</name> <operator pos:start="3999:22" pos:end="3999:22">&amp;</operator> <operator pos:start="3999:24" pos:end="3999:24">(</operator><name pos:start="3999:25" pos:end="3999:35">PREFIX_REPZ</name> <operator pos:start="3999:37" pos:end="3999:37">|</operator> <name pos:start="3999:39" pos:end="3999:50">PREFIX_REPNZ</name><operator pos:start="3999:51" pos:end="3999:51">)</operator></expr>)</condition> <block pos:start="3999:54" pos:end="4003:9">{<block_content pos:start="4001:13" pos:end="4001:76">

            <expr_stmt pos:start="4001:13" pos:end="4001:76"><expr pos:start="4001:13" pos:end="4001:75"><call pos:start="4001:13" pos:end="4001:75"><name pos:start="4001:13" pos:end="4001:25">gen_repz_outs</name><argument_list pos:start="4001:26" pos:end="4001:75">(<argument pos:start="4001:27" pos:end="4001:27"><expr pos:start="4001:27" pos:end="4001:27"><name pos:start="4001:27" pos:end="4001:27">s</name></expr></argument>, <argument pos:start="4001:30" pos:end="4001:31"><expr pos:start="4001:30" pos:end="4001:31"><name pos:start="4001:30" pos:end="4001:31">ot</name></expr></argument>, <argument pos:start="4001:34" pos:end="4001:54"><expr pos:start="4001:34" pos:end="4001:54"><name pos:start="4001:34" pos:end="4001:41">pc_start</name> <operator pos:start="4001:43" pos:end="4001:43">-</operator> <name pos:start="4001:45" pos:end="4001:54"><name pos:start="4001:45" pos:end="4001:45">s</name><operator pos:start="4001:46" pos:end="4001:47">-&gt;</operator><name pos:start="4001:48" pos:end="4001:54">cs_base</name></name></expr></argument>, <argument pos:start="4001:57" pos:end="4001:74"><expr pos:start="4001:57" pos:end="4001:74"><name pos:start="4001:57" pos:end="4001:61"><name pos:start="4001:57" pos:end="4001:57">s</name><operator pos:start="4001:58" pos:end="4001:59">-&gt;</operator><name pos:start="4001:60" pos:end="4001:61">pc</name></name> <operator pos:start="4001:63" pos:end="4001:63">-</operator> <name pos:start="4001:65" pos:end="4001:74"><name pos:start="4001:65" pos:end="4001:65">s</name><operator pos:start="4001:66" pos:end="4001:67">-&gt;</operator><name pos:start="4001:68" pos:end="4001:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4003:11" pos:end="4013:9">else <block pos:start="4003:16" pos:end="4013:9">{<block_content pos:start="4005:13" pos:end="4011:13">

            <expr_stmt pos:start="4005:13" pos:end="4005:28"><expr pos:start="4005:13" pos:end="4005:27"><call pos:start="4005:13" pos:end="4005:27"><name pos:start="4005:13" pos:end="4005:20">gen_outs</name><argument_list pos:start="4005:21" pos:end="4005:27">(<argument pos:start="4005:22" pos:end="4005:22"><expr pos:start="4005:22" pos:end="4005:22"><name pos:start="4005:22" pos:end="4005:22">s</name></expr></argument>, <argument pos:start="4005:25" pos:end="4005:26"><expr pos:start="4005:25" pos:end="4005:26"><name pos:start="4005:25" pos:end="4005:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4007:13" pos:end="4011:13"><if pos:start="4007:13" pos:end="4011:13">if <condition pos:start="4007:16" pos:end="4007:27">(<expr pos:start="4007:17" pos:end="4007:26"><name pos:start="4007:17" pos:end="4007:26">use_icount</name></expr>)</condition> <block pos:start="4007:29" pos:end="4011:13">{<block_content pos:start="4009:17" pos:end="4009:47">

                <expr_stmt pos:start="4009:17" pos:end="4009:47"><expr pos:start="4009:17" pos:end="4009:46"><call pos:start="4009:17" pos:end="4009:46"><name pos:start="4009:17" pos:end="4009:23">gen_jmp</name><argument_list pos:start="4009:24" pos:end="4009:46">(<argument pos:start="4009:25" pos:end="4009:25"><expr pos:start="4009:25" pos:end="4009:25"><name pos:start="4009:25" pos:end="4009:25">s</name></expr></argument>, <argument pos:start="4009:28" pos:end="4009:45"><expr pos:start="4009:28" pos:end="4009:45"><name pos:start="4009:28" pos:end="4009:32"><name pos:start="4009:28" pos:end="4009:28">s</name><operator pos:start="4009:29" pos:end="4009:30">-&gt;</operator><name pos:start="4009:31" pos:end="4009:32">pc</name></name> <operator pos:start="4009:34" pos:end="4009:34">-</operator> <name pos:start="4009:36" pos:end="4009:45"><name pos:start="4009:36" pos:end="4009:36">s</name><operator pos:start="4009:37" pos:end="4009:38">-&gt;</operator><name pos:start="4009:39" pos:end="4009:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4015:9" pos:end="4015:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4019:9" pos:end="4019:34">/************************/</comment>

        <comment type="block" pos:start="4021:9" pos:end="4021:22">/* port I/O */</comment>



    <case pos:start="4025:5" pos:end="4025:14">case <expr pos:start="4025:10" pos:end="4025:13"><literal type="number" pos:start="4025:10" pos:end="4025:13">0xe4</literal></expr>:</case>

    <case pos:start="4027:5" pos:end="4027:14">case <expr pos:start="4027:10" pos:end="4027:13"><literal type="number" pos:start="4027:10" pos:end="4027:13">0xe5</literal></expr>:</case>

        <if_stmt pos:start="4029:9" pos:end="4035:43"><if pos:start="4029:9" pos:end="4031:25">if <condition pos:start="4029:12" pos:end="4029:25">(<expr pos:start="4029:13" pos:end="4029:24"><operator pos:start="4029:13" pos:end="4029:13">(</operator><name pos:start="4029:14" pos:end="4029:14">b</name> <operator pos:start="4029:16" pos:end="4029:16">&amp;</operator> <literal type="number" pos:start="4029:18" pos:end="4029:18">1</literal><operator pos:start="4029:19" pos:end="4029:19">)</operator> <operator pos:start="4029:21" pos:end="4029:22">==</operator> <literal type="number" pos:start="4029:24" pos:end="4029:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4031:13" pos:end="4031:25"><block_content pos:start="4031:13" pos:end="4031:25">

            <expr_stmt pos:start="4031:13" pos:end="4031:25"><expr pos:start="4031:13" pos:end="4031:24"><name pos:start="4031:13" pos:end="4031:14">ot</name> <operator pos:start="4031:16" pos:end="4031:16">=</operator> <name pos:start="4031:18" pos:end="4031:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4033:9" pos:end="4035:43">else<block type="pseudo" pos:start="4035:13" pos:end="4035:43"><block_content pos:start="4035:13" pos:end="4035:43">

            <expr_stmt pos:start="4035:13" pos:end="4035:43"><expr pos:start="4035:13" pos:end="4035:42"><name pos:start="4035:13" pos:end="4035:14">ot</name> <operator pos:start="4035:16" pos:end="4035:16">=</operator> <ternary pos:start="4035:18" pos:end="4035:42"><condition pos:start="4035:18" pos:end="4035:24"><expr pos:start="4035:18" pos:end="4035:22"><name pos:start="4035:18" pos:end="4035:22">dflag</name></expr> ?</condition><then pos:start="4035:26" pos:end="4035:32"> <expr pos:start="4035:26" pos:end="4035:32"><name pos:start="4035:26" pos:end="4035:32">OT_LONG</name></expr> </then><else pos:start="4035:34" pos:end="4035:42">: <expr pos:start="4035:36" pos:end="4035:42"><name pos:start="4035:36" pos:end="4035:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4037:9" pos:end="4037:53"><expr pos:start="4037:9" pos:end="4037:52"><name pos:start="4037:9" pos:end="4037:11">val</name> <operator pos:start="4037:13" pos:end="4037:13">=</operator> <call pos:start="4037:15" pos:end="4037:52"><name pos:start="4037:15" pos:end="4037:27">cpu_ldub_code</name><argument_list pos:start="4037:28" pos:end="4037:52">(<argument pos:start="4037:29" pos:end="4037:42"><expr pos:start="4037:29" pos:end="4037:42"><name pos:start="4037:29" pos:end="4037:42">cpu_single_env</name></expr></argument>, <argument pos:start="4037:45" pos:end="4037:51"><expr pos:start="4037:45" pos:end="4037:51"><name pos:start="4037:45" pos:end="4037:49"><name pos:start="4037:45" pos:end="4037:45">s</name><operator pos:start="4037:46" pos:end="4037:47">-&gt;</operator><name pos:start="4037:48" pos:end="4037:49">pc</name></name><operator pos:start="4037:50" pos:end="4037:51">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4039:9" pos:end="4039:31"><expr pos:start="4039:9" pos:end="4039:30"><call pos:start="4039:9" pos:end="4039:30"><name pos:start="4039:9" pos:end="4039:25">gen_op_movl_T0_im</name><argument_list pos:start="4039:26" pos:end="4039:30">(<argument pos:start="4039:27" pos:end="4039:29"><expr pos:start="4039:27" pos:end="4039:29"><name pos:start="4039:27" pos:end="4039:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4041:9" pos:end="4043:64"><expr pos:start="4041:9" pos:end="4043:63"><call pos:start="4041:9" pos:end="4043:63"><name pos:start="4041:9" pos:end="4041:20">gen_check_io</name><argument_list pos:start="4041:21" pos:end="4043:63">(<argument pos:start="4041:22" pos:end="4041:22"><expr pos:start="4041:22" pos:end="4041:22"><name pos:start="4041:22" pos:end="4041:22">s</name></expr></argument>, <argument pos:start="4041:25" pos:end="4041:26"><expr pos:start="4041:25" pos:end="4041:26"><name pos:start="4041:25" pos:end="4041:26">ot</name></expr></argument>, <argument pos:start="4041:29" pos:end="4041:49"><expr pos:start="4041:29" pos:end="4041:49"><name pos:start="4041:29" pos:end="4041:36">pc_start</name> <operator pos:start="4041:38" pos:end="4041:38">-</operator> <name pos:start="4041:40" pos:end="4041:49"><name pos:start="4041:40" pos:end="4041:40">s</name><operator pos:start="4041:41" pos:end="4041:42">-&gt;</operator><name pos:start="4041:43" pos:end="4041:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4043:22" pos:end="4043:62"><expr pos:start="4043:22" pos:end="4043:62"><name pos:start="4043:22" pos:end="4043:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="4043:41" pos:end="4043:41">|</operator> <call pos:start="4043:43" pos:end="4043:62"><name pos:start="4043:43" pos:end="4043:52">svm_is_rep</name><argument_list pos:start="4043:53" pos:end="4043:62">(<argument pos:start="4043:54" pos:end="4043:61"><expr pos:start="4043:54" pos:end="4043:61"><name pos:start="4043:54" pos:end="4043:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4045:9" pos:end="4047:27"><if pos:start="4045:9" pos:end="4047:27">if <condition pos:start="4045:12" pos:end="4045:23">(<expr pos:start="4045:13" pos:end="4045:22"><name pos:start="4045:13" pos:end="4045:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4047:13" pos:end="4047:27"><block_content pos:start="4047:13" pos:end="4047:27">

            <expr_stmt pos:start="4047:13" pos:end="4047:27"><expr pos:start="4047:13" pos:end="4047:26"><call pos:start="4047:13" pos:end="4047:26"><name pos:start="4047:13" pos:end="4047:24">gen_io_start</name><argument_list pos:start="4047:25" pos:end="4047:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4049:9" pos:end="4049:53"><expr pos:start="4049:9" pos:end="4049:52"><call pos:start="4049:9" pos:end="4049:52"><name pos:start="4049:9" pos:end="4049:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4049:29" pos:end="4049:52">(<argument pos:start="4049:30" pos:end="4049:41"><expr pos:start="4049:30" pos:end="4049:41"><name pos:start="4049:30" pos:end="4049:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4049:44" pos:end="4049:51"><expr pos:start="4049:44" pos:end="4049:51"><name pos:start="4049:44" pos:end="4049:51"><name pos:start="4049:44" pos:end="4049:48">cpu_T</name><index pos:start="4049:49" pos:end="4049:51">[<expr pos:start="4049:50" pos:end="4049:50"><literal type="number" pos:start="4049:50" pos:end="4049:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4051:9" pos:end="4051:55"><expr pos:start="4051:9" pos:end="4051:54"><call pos:start="4051:9" pos:end="4051:54"><name pos:start="4051:9" pos:end="4051:26">gen_helper_in_func</name><argument_list pos:start="4051:27" pos:end="4051:54">(<argument pos:start="4051:28" pos:end="4051:29"><expr pos:start="4051:28" pos:end="4051:29"><name pos:start="4051:28" pos:end="4051:29">ot</name></expr></argument>, <argument pos:start="4051:32" pos:end="4051:39"><expr pos:start="4051:32" pos:end="4051:39"><name pos:start="4051:32" pos:end="4051:39"><name pos:start="4051:32" pos:end="4051:36">cpu_T</name><index pos:start="4051:37" pos:end="4051:39">[<expr pos:start="4051:38" pos:end="4051:38"><literal type="number" pos:start="4051:38" pos:end="4051:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4051:42" pos:end="4051:53"><expr pos:start="4051:42" pos:end="4051:53"><name pos:start="4051:42" pos:end="4051:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4053:9" pos:end="4053:37"><expr pos:start="4053:9" pos:end="4053:36"><call pos:start="4053:9" pos:end="4053:36"><name pos:start="4053:9" pos:end="4053:25">gen_op_mov_reg_T1</name><argument_list pos:start="4053:26" pos:end="4053:36">(<argument pos:start="4053:27" pos:end="4053:28"><expr pos:start="4053:27" pos:end="4053:28"><name pos:start="4053:27" pos:end="4053:28">ot</name></expr></argument>, <argument pos:start="4053:31" pos:end="4053:35"><expr pos:start="4053:31" pos:end="4053:35"><name pos:start="4053:31" pos:end="4053:35">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4055:9" pos:end="4061:9"><if pos:start="4055:9" pos:end="4061:9">if <condition pos:start="4055:12" pos:end="4055:23">(<expr pos:start="4055:13" pos:end="4055:22"><name pos:start="4055:13" pos:end="4055:22">use_icount</name></expr>)</condition> <block pos:start="4055:25" pos:end="4061:9">{<block_content pos:start="4057:13" pos:end="4059:43">

            <expr_stmt pos:start="4057:13" pos:end="4057:25"><expr pos:start="4057:13" pos:end="4057:24"><call pos:start="4057:13" pos:end="4057:24"><name pos:start="4057:13" pos:end="4057:22">gen_io_end</name><argument_list pos:start="4057:23" pos:end="4057:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4059:13" pos:end="4059:43"><expr pos:start="4059:13" pos:end="4059:42"><call pos:start="4059:13" pos:end="4059:42"><name pos:start="4059:13" pos:end="4059:19">gen_jmp</name><argument_list pos:start="4059:20" pos:end="4059:42">(<argument pos:start="4059:21" pos:end="4059:21"><expr pos:start="4059:21" pos:end="4059:21"><name pos:start="4059:21" pos:end="4059:21">s</name></expr></argument>, <argument pos:start="4059:24" pos:end="4059:41"><expr pos:start="4059:24" pos:end="4059:41"><name pos:start="4059:24" pos:end="4059:28"><name pos:start="4059:24" pos:end="4059:24">s</name><operator pos:start="4059:25" pos:end="4059:26">-&gt;</operator><name pos:start="4059:27" pos:end="4059:28">pc</name></name> <operator pos:start="4059:30" pos:end="4059:30">-</operator> <name pos:start="4059:32" pos:end="4059:41"><name pos:start="4059:32" pos:end="4059:32">s</name><operator pos:start="4059:33" pos:end="4059:34">-&gt;</operator><name pos:start="4059:35" pos:end="4059:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4063:9" pos:end="4063:14">break;</break>

    <case pos:start="4065:5" pos:end="4065:14">case <expr pos:start="4065:10" pos:end="4065:13"><literal type="number" pos:start="4065:10" pos:end="4065:13">0xe6</literal></expr>:</case>

    <case pos:start="4067:5" pos:end="4067:14">case <expr pos:start="4067:10" pos:end="4067:13"><literal type="number" pos:start="4067:10" pos:end="4067:13">0xe7</literal></expr>:</case>

        <if_stmt pos:start="4069:9" pos:end="4075:43"><if pos:start="4069:9" pos:end="4071:25">if <condition pos:start="4069:12" pos:end="4069:25">(<expr pos:start="4069:13" pos:end="4069:24"><operator pos:start="4069:13" pos:end="4069:13">(</operator><name pos:start="4069:14" pos:end="4069:14">b</name> <operator pos:start="4069:16" pos:end="4069:16">&amp;</operator> <literal type="number" pos:start="4069:18" pos:end="4069:18">1</literal><operator pos:start="4069:19" pos:end="4069:19">)</operator> <operator pos:start="4069:21" pos:end="4069:22">==</operator> <literal type="number" pos:start="4069:24" pos:end="4069:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4071:13" pos:end="4071:25"><block_content pos:start="4071:13" pos:end="4071:25">

            <expr_stmt pos:start="4071:13" pos:end="4071:25"><expr pos:start="4071:13" pos:end="4071:24"><name pos:start="4071:13" pos:end="4071:14">ot</name> <operator pos:start="4071:16" pos:end="4071:16">=</operator> <name pos:start="4071:18" pos:end="4071:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4073:9" pos:end="4075:43">else<block type="pseudo" pos:start="4075:13" pos:end="4075:43"><block_content pos:start="4075:13" pos:end="4075:43">

            <expr_stmt pos:start="4075:13" pos:end="4075:43"><expr pos:start="4075:13" pos:end="4075:42"><name pos:start="4075:13" pos:end="4075:14">ot</name> <operator pos:start="4075:16" pos:end="4075:16">=</operator> <ternary pos:start="4075:18" pos:end="4075:42"><condition pos:start="4075:18" pos:end="4075:24"><expr pos:start="4075:18" pos:end="4075:22"><name pos:start="4075:18" pos:end="4075:22">dflag</name></expr> ?</condition><then pos:start="4075:26" pos:end="4075:32"> <expr pos:start="4075:26" pos:end="4075:32"><name pos:start="4075:26" pos:end="4075:32">OT_LONG</name></expr> </then><else pos:start="4075:34" pos:end="4075:42">: <expr pos:start="4075:36" pos:end="4075:42"><name pos:start="4075:36" pos:end="4075:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4077:9" pos:end="4077:53"><expr pos:start="4077:9" pos:end="4077:52"><name pos:start="4077:9" pos:end="4077:11">val</name> <operator pos:start="4077:13" pos:end="4077:13">=</operator> <call pos:start="4077:15" pos:end="4077:52"><name pos:start="4077:15" pos:end="4077:27">cpu_ldub_code</name><argument_list pos:start="4077:28" pos:end="4077:52">(<argument pos:start="4077:29" pos:end="4077:42"><expr pos:start="4077:29" pos:end="4077:42"><name pos:start="4077:29" pos:end="4077:42">cpu_single_env</name></expr></argument>, <argument pos:start="4077:45" pos:end="4077:51"><expr pos:start="4077:45" pos:end="4077:51"><name pos:start="4077:45" pos:end="4077:49"><name pos:start="4077:45" pos:end="4077:45">s</name><operator pos:start="4077:46" pos:end="4077:47">-&gt;</operator><name pos:start="4077:48" pos:end="4077:49">pc</name></name><operator pos:start="4077:50" pos:end="4077:51">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4079:9" pos:end="4079:31"><expr pos:start="4079:9" pos:end="4079:30"><call pos:start="4079:9" pos:end="4079:30"><name pos:start="4079:9" pos:end="4079:25">gen_op_movl_T0_im</name><argument_list pos:start="4079:26" pos:end="4079:30">(<argument pos:start="4079:27" pos:end="4079:29"><expr pos:start="4079:27" pos:end="4079:29"><name pos:start="4079:27" pos:end="4079:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4081:9" pos:end="4083:43"><expr pos:start="4081:9" pos:end="4083:42"><call pos:start="4081:9" pos:end="4083:42"><name pos:start="4081:9" pos:end="4081:20">gen_check_io</name><argument_list pos:start="4081:21" pos:end="4083:42">(<argument pos:start="4081:22" pos:end="4081:22"><expr pos:start="4081:22" pos:end="4081:22"><name pos:start="4081:22" pos:end="4081:22">s</name></expr></argument>, <argument pos:start="4081:25" pos:end="4081:26"><expr pos:start="4081:25" pos:end="4081:26"><name pos:start="4081:25" pos:end="4081:26">ot</name></expr></argument>, <argument pos:start="4081:29" pos:end="4081:49"><expr pos:start="4081:29" pos:end="4081:49"><name pos:start="4081:29" pos:end="4081:36">pc_start</name> <operator pos:start="4081:38" pos:end="4081:38">-</operator> <name pos:start="4081:40" pos:end="4081:49"><name pos:start="4081:40" pos:end="4081:40">s</name><operator pos:start="4081:41" pos:end="4081:42">-&gt;</operator><name pos:start="4081:43" pos:end="4081:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4083:22" pos:end="4083:41"><expr pos:start="4083:22" pos:end="4083:41"><call pos:start="4083:22" pos:end="4083:41"><name pos:start="4083:22" pos:end="4083:31">svm_is_rep</name><argument_list pos:start="4083:32" pos:end="4083:41">(<argument pos:start="4083:33" pos:end="4083:40"><expr pos:start="4083:33" pos:end="4083:40"><name pos:start="4083:33" pos:end="4083:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4085:9" pos:end="4085:40"><expr pos:start="4085:9" pos:end="4085:39"><call pos:start="4085:9" pos:end="4085:39"><name pos:start="4085:9" pos:end="4085:25">gen_op_mov_TN_reg</name><argument_list pos:start="4085:26" pos:end="4085:39">(<argument pos:start="4085:27" pos:end="4085:28"><expr pos:start="4085:27" pos:end="4085:28"><name pos:start="4085:27" pos:end="4085:28">ot</name></expr></argument>, <argument pos:start="4085:31" pos:end="4085:31"><expr pos:start="4085:31" pos:end="4085:31"><literal type="number" pos:start="4085:31" pos:end="4085:31">1</literal></expr></argument>, <argument pos:start="4085:34" pos:end="4085:38"><expr pos:start="4085:34" pos:end="4085:38"><name pos:start="4085:34" pos:end="4085:38">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="4089:9" pos:end="4091:27"><if pos:start="4089:9" pos:end="4091:27">if <condition pos:start="4089:12" pos:end="4089:23">(<expr pos:start="4089:13" pos:end="4089:22"><name pos:start="4089:13" pos:end="4089:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4091:13" pos:end="4091:27"><block_content pos:start="4091:13" pos:end="4091:27">

            <expr_stmt pos:start="4091:13" pos:end="4091:27"><expr pos:start="4091:13" pos:end="4091:26"><call pos:start="4091:13" pos:end="4091:26"><name pos:start="4091:13" pos:end="4091:24">gen_io_start</name><argument_list pos:start="4091:25" pos:end="4091:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4093:9" pos:end="4093:53"><expr pos:start="4093:9" pos:end="4093:52"><call pos:start="4093:9" pos:end="4093:52"><name pos:start="4093:9" pos:end="4093:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4093:29" pos:end="4093:52">(<argument pos:start="4093:30" pos:end="4093:41"><expr pos:start="4093:30" pos:end="4093:41"><name pos:start="4093:30" pos:end="4093:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4093:44" pos:end="4093:51"><expr pos:start="4093:44" pos:end="4093:51"><name pos:start="4093:44" pos:end="4093:51"><name pos:start="4093:44" pos:end="4093:48">cpu_T</name><index pos:start="4093:49" pos:end="4093:51">[<expr pos:start="4093:50" pos:end="4093:50"><literal type="number" pos:start="4093:50" pos:end="4093:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4095:9" pos:end="4095:53"><expr pos:start="4095:9" pos:end="4095:52"><call pos:start="4095:9" pos:end="4095:52"><name pos:start="4095:9" pos:end="4095:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4095:29" pos:end="4095:52">(<argument pos:start="4095:30" pos:end="4095:41"><expr pos:start="4095:30" pos:end="4095:41"><name pos:start="4095:30" pos:end="4095:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="4095:44" pos:end="4095:51"><expr pos:start="4095:44" pos:end="4095:51"><name pos:start="4095:44" pos:end="4095:51"><name pos:start="4095:44" pos:end="4095:48">cpu_T</name><index pos:start="4095:49" pos:end="4095:51">[<expr pos:start="4095:50" pos:end="4095:50"><literal type="number" pos:start="4095:50" pos:end="4095:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4097:9" pos:end="4097:60"><expr pos:start="4097:9" pos:end="4097:59"><call pos:start="4097:9" pos:end="4097:59"><name pos:start="4097:9" pos:end="4097:27">gen_helper_out_func</name><argument_list pos:start="4097:28" pos:end="4097:59">(<argument pos:start="4097:29" pos:end="4097:30"><expr pos:start="4097:29" pos:end="4097:30"><name pos:start="4097:29" pos:end="4097:30">ot</name></expr></argument>, <argument pos:start="4097:33" pos:end="4097:44"><expr pos:start="4097:33" pos:end="4097:44"><name pos:start="4097:33" pos:end="4097:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4097:47" pos:end="4097:58"><expr pos:start="4097:47" pos:end="4097:58"><name pos:start="4097:47" pos:end="4097:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4099:9" pos:end="4105:9"><if pos:start="4099:9" pos:end="4105:9">if <condition pos:start="4099:12" pos:end="4099:23">(<expr pos:start="4099:13" pos:end="4099:22"><name pos:start="4099:13" pos:end="4099:22">use_icount</name></expr>)</condition> <block pos:start="4099:25" pos:end="4105:9">{<block_content pos:start="4101:13" pos:end="4103:43">

            <expr_stmt pos:start="4101:13" pos:end="4101:25"><expr pos:start="4101:13" pos:end="4101:24"><call pos:start="4101:13" pos:end="4101:24"><name pos:start="4101:13" pos:end="4101:22">gen_io_end</name><argument_list pos:start="4101:23" pos:end="4101:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4103:13" pos:end="4103:43"><expr pos:start="4103:13" pos:end="4103:42"><call pos:start="4103:13" pos:end="4103:42"><name pos:start="4103:13" pos:end="4103:19">gen_jmp</name><argument_list pos:start="4103:20" pos:end="4103:42">(<argument pos:start="4103:21" pos:end="4103:21"><expr pos:start="4103:21" pos:end="4103:21"><name pos:start="4103:21" pos:end="4103:21">s</name></expr></argument>, <argument pos:start="4103:24" pos:end="4103:41"><expr pos:start="4103:24" pos:end="4103:41"><name pos:start="4103:24" pos:end="4103:28"><name pos:start="4103:24" pos:end="4103:24">s</name><operator pos:start="4103:25" pos:end="4103:26">-&gt;</operator><name pos:start="4103:27" pos:end="4103:28">pc</name></name> <operator pos:start="4103:30" pos:end="4103:30">-</operator> <name pos:start="4103:32" pos:end="4103:41"><name pos:start="4103:32" pos:end="4103:32">s</name><operator pos:start="4103:33" pos:end="4103:34">-&gt;</operator><name pos:start="4103:35" pos:end="4103:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4107:9" pos:end="4107:14">break;</break>

    <case pos:start="4109:5" pos:end="4109:14">case <expr pos:start="4109:10" pos:end="4109:13"><literal type="number" pos:start="4109:10" pos:end="4109:13">0xec</literal></expr>:</case>

    <case pos:start="4111:5" pos:end="4111:14">case <expr pos:start="4111:10" pos:end="4111:13"><literal type="number" pos:start="4111:10" pos:end="4111:13">0xed</literal></expr>:</case>

        <if_stmt pos:start="4113:9" pos:end="4119:43"><if pos:start="4113:9" pos:end="4115:25">if <condition pos:start="4113:12" pos:end="4113:25">(<expr pos:start="4113:13" pos:end="4113:24"><operator pos:start="4113:13" pos:end="4113:13">(</operator><name pos:start="4113:14" pos:end="4113:14">b</name> <operator pos:start="4113:16" pos:end="4113:16">&amp;</operator> <literal type="number" pos:start="4113:18" pos:end="4113:18">1</literal><operator pos:start="4113:19" pos:end="4113:19">)</operator> <operator pos:start="4113:21" pos:end="4113:22">==</operator> <literal type="number" pos:start="4113:24" pos:end="4113:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4115:13" pos:end="4115:25"><block_content pos:start="4115:13" pos:end="4115:25">

            <expr_stmt pos:start="4115:13" pos:end="4115:25"><expr pos:start="4115:13" pos:end="4115:24"><name pos:start="4115:13" pos:end="4115:14">ot</name> <operator pos:start="4115:16" pos:end="4115:16">=</operator> <name pos:start="4115:18" pos:end="4115:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4117:9" pos:end="4119:43">else<block type="pseudo" pos:start="4119:13" pos:end="4119:43"><block_content pos:start="4119:13" pos:end="4119:43">

            <expr_stmt pos:start="4119:13" pos:end="4119:43"><expr pos:start="4119:13" pos:end="4119:42"><name pos:start="4119:13" pos:end="4119:14">ot</name> <operator pos:start="4119:16" pos:end="4119:16">=</operator> <ternary pos:start="4119:18" pos:end="4119:42"><condition pos:start="4119:18" pos:end="4119:24"><expr pos:start="4119:18" pos:end="4119:22"><name pos:start="4119:18" pos:end="4119:22">dflag</name></expr> ?</condition><then pos:start="4119:26" pos:end="4119:32"> <expr pos:start="4119:26" pos:end="4119:32"><name pos:start="4119:26" pos:end="4119:32">OT_LONG</name></expr> </then><else pos:start="4119:34" pos:end="4119:42">: <expr pos:start="4119:36" pos:end="4119:42"><name pos:start="4119:36" pos:end="4119:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4121:9" pos:end="4121:45"><expr pos:start="4121:9" pos:end="4121:44"><call pos:start="4121:9" pos:end="4121:44"><name pos:start="4121:9" pos:end="4121:25">gen_op_mov_TN_reg</name><argument_list pos:start="4121:26" pos:end="4121:44">(<argument pos:start="4121:27" pos:end="4121:33"><expr pos:start="4121:27" pos:end="4121:33"><name pos:start="4121:27" pos:end="4121:33">OT_WORD</name></expr></argument>, <argument pos:start="4121:36" pos:end="4121:36"><expr pos:start="4121:36" pos:end="4121:36"><literal type="number" pos:start="4121:36" pos:end="4121:36">0</literal></expr></argument>, <argument pos:start="4121:39" pos:end="4121:43"><expr pos:start="4121:39" pos:end="4121:43"><name pos:start="4121:39" pos:end="4121:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4123:9" pos:end="4123:30"><expr pos:start="4123:9" pos:end="4123:29"><call pos:start="4123:9" pos:end="4123:29"><name pos:start="4123:9" pos:end="4123:27">gen_op_andl_T0_ffff</name><argument_list pos:start="4123:28" pos:end="4123:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4125:9" pos:end="4127:64"><expr pos:start="4125:9" pos:end="4127:63"><call pos:start="4125:9" pos:end="4127:63"><name pos:start="4125:9" pos:end="4125:20">gen_check_io</name><argument_list pos:start="4125:21" pos:end="4127:63">(<argument pos:start="4125:22" pos:end="4125:22"><expr pos:start="4125:22" pos:end="4125:22"><name pos:start="4125:22" pos:end="4125:22">s</name></expr></argument>, <argument pos:start="4125:25" pos:end="4125:26"><expr pos:start="4125:25" pos:end="4125:26"><name pos:start="4125:25" pos:end="4125:26">ot</name></expr></argument>, <argument pos:start="4125:29" pos:end="4125:49"><expr pos:start="4125:29" pos:end="4125:49"><name pos:start="4125:29" pos:end="4125:36">pc_start</name> <operator pos:start="4125:38" pos:end="4125:38">-</operator> <name pos:start="4125:40" pos:end="4125:49"><name pos:start="4125:40" pos:end="4125:40">s</name><operator pos:start="4125:41" pos:end="4125:42">-&gt;</operator><name pos:start="4125:43" pos:end="4125:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4127:22" pos:end="4127:62"><expr pos:start="4127:22" pos:end="4127:62"><name pos:start="4127:22" pos:end="4127:39">SVM_IOIO_TYPE_MASK</name> <operator pos:start="4127:41" pos:end="4127:41">|</operator> <call pos:start="4127:43" pos:end="4127:62"><name pos:start="4127:43" pos:end="4127:52">svm_is_rep</name><argument_list pos:start="4127:53" pos:end="4127:62">(<argument pos:start="4127:54" pos:end="4127:61"><expr pos:start="4127:54" pos:end="4127:61"><name pos:start="4127:54" pos:end="4127:61">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4129:9" pos:end="4131:27"><if pos:start="4129:9" pos:end="4131:27">if <condition pos:start="4129:12" pos:end="4129:23">(<expr pos:start="4129:13" pos:end="4129:22"><name pos:start="4129:13" pos:end="4129:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4131:13" pos:end="4131:27"><block_content pos:start="4131:13" pos:end="4131:27">

            <expr_stmt pos:start="4131:13" pos:end="4131:27"><expr pos:start="4131:13" pos:end="4131:26"><call pos:start="4131:13" pos:end="4131:26"><name pos:start="4131:13" pos:end="4131:24">gen_io_start</name><argument_list pos:start="4131:25" pos:end="4131:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4133:9" pos:end="4133:53"><expr pos:start="4133:9" pos:end="4133:52"><call pos:start="4133:9" pos:end="4133:52"><name pos:start="4133:9" pos:end="4133:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4133:29" pos:end="4133:52">(<argument pos:start="4133:30" pos:end="4133:41"><expr pos:start="4133:30" pos:end="4133:41"><name pos:start="4133:30" pos:end="4133:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4133:44" pos:end="4133:51"><expr pos:start="4133:44" pos:end="4133:51"><name pos:start="4133:44" pos:end="4133:51"><name pos:start="4133:44" pos:end="4133:48">cpu_T</name><index pos:start="4133:49" pos:end="4133:51">[<expr pos:start="4133:50" pos:end="4133:50"><literal type="number" pos:start="4133:50" pos:end="4133:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4135:9" pos:end="4135:55"><expr pos:start="4135:9" pos:end="4135:54"><call pos:start="4135:9" pos:end="4135:54"><name pos:start="4135:9" pos:end="4135:26">gen_helper_in_func</name><argument_list pos:start="4135:27" pos:end="4135:54">(<argument pos:start="4135:28" pos:end="4135:29"><expr pos:start="4135:28" pos:end="4135:29"><name pos:start="4135:28" pos:end="4135:29">ot</name></expr></argument>, <argument pos:start="4135:32" pos:end="4135:39"><expr pos:start="4135:32" pos:end="4135:39"><name pos:start="4135:32" pos:end="4135:39"><name pos:start="4135:32" pos:end="4135:36">cpu_T</name><index pos:start="4135:37" pos:end="4135:39">[<expr pos:start="4135:38" pos:end="4135:38"><literal type="number" pos:start="4135:38" pos:end="4135:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4135:42" pos:end="4135:53"><expr pos:start="4135:42" pos:end="4135:53"><name pos:start="4135:42" pos:end="4135:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4137:9" pos:end="4137:37"><expr pos:start="4137:9" pos:end="4137:36"><call pos:start="4137:9" pos:end="4137:36"><name pos:start="4137:9" pos:end="4137:25">gen_op_mov_reg_T1</name><argument_list pos:start="4137:26" pos:end="4137:36">(<argument pos:start="4137:27" pos:end="4137:28"><expr pos:start="4137:27" pos:end="4137:28"><name pos:start="4137:27" pos:end="4137:28">ot</name></expr></argument>, <argument pos:start="4137:31" pos:end="4137:35"><expr pos:start="4137:31" pos:end="4137:35"><name pos:start="4137:31" pos:end="4137:35">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4139:9" pos:end="4145:9"><if pos:start="4139:9" pos:end="4145:9">if <condition pos:start="4139:12" pos:end="4139:23">(<expr pos:start="4139:13" pos:end="4139:22"><name pos:start="4139:13" pos:end="4139:22">use_icount</name></expr>)</condition> <block pos:start="4139:25" pos:end="4145:9">{<block_content pos:start="4141:13" pos:end="4143:43">

            <expr_stmt pos:start="4141:13" pos:end="4141:25"><expr pos:start="4141:13" pos:end="4141:24"><call pos:start="4141:13" pos:end="4141:24"><name pos:start="4141:13" pos:end="4141:22">gen_io_end</name><argument_list pos:start="4141:23" pos:end="4141:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4143:13" pos:end="4143:43"><expr pos:start="4143:13" pos:end="4143:42"><call pos:start="4143:13" pos:end="4143:42"><name pos:start="4143:13" pos:end="4143:19">gen_jmp</name><argument_list pos:start="4143:20" pos:end="4143:42">(<argument pos:start="4143:21" pos:end="4143:21"><expr pos:start="4143:21" pos:end="4143:21"><name pos:start="4143:21" pos:end="4143:21">s</name></expr></argument>, <argument pos:start="4143:24" pos:end="4143:41"><expr pos:start="4143:24" pos:end="4143:41"><name pos:start="4143:24" pos:end="4143:28"><name pos:start="4143:24" pos:end="4143:24">s</name><operator pos:start="4143:25" pos:end="4143:26">-&gt;</operator><name pos:start="4143:27" pos:end="4143:28">pc</name></name> <operator pos:start="4143:30" pos:end="4143:30">-</operator> <name pos:start="4143:32" pos:end="4143:41"><name pos:start="4143:32" pos:end="4143:32">s</name><operator pos:start="4143:33" pos:end="4143:34">-&gt;</operator><name pos:start="4143:35" pos:end="4143:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4147:9" pos:end="4147:14">break;</break>

    <case pos:start="4149:5" pos:end="4149:14">case <expr pos:start="4149:10" pos:end="4149:13"><literal type="number" pos:start="4149:10" pos:end="4149:13">0xee</literal></expr>:</case>

    <case pos:start="4151:5" pos:end="4151:14">case <expr pos:start="4151:10" pos:end="4151:13"><literal type="number" pos:start="4151:10" pos:end="4151:13">0xef</literal></expr>:</case>

        <if_stmt pos:start="4153:9" pos:end="4159:43"><if pos:start="4153:9" pos:end="4155:25">if <condition pos:start="4153:12" pos:end="4153:25">(<expr pos:start="4153:13" pos:end="4153:24"><operator pos:start="4153:13" pos:end="4153:13">(</operator><name pos:start="4153:14" pos:end="4153:14">b</name> <operator pos:start="4153:16" pos:end="4153:16">&amp;</operator> <literal type="number" pos:start="4153:18" pos:end="4153:18">1</literal><operator pos:start="4153:19" pos:end="4153:19">)</operator> <operator pos:start="4153:21" pos:end="4153:22">==</operator> <literal type="number" pos:start="4153:24" pos:end="4153:24">0</literal></expr>)</condition><block type="pseudo" pos:start="4155:13" pos:end="4155:25"><block_content pos:start="4155:13" pos:end="4155:25">

            <expr_stmt pos:start="4155:13" pos:end="4155:25"><expr pos:start="4155:13" pos:end="4155:24"><name pos:start="4155:13" pos:end="4155:14">ot</name> <operator pos:start="4155:16" pos:end="4155:16">=</operator> <name pos:start="4155:18" pos:end="4155:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4157:9" pos:end="4159:43">else<block type="pseudo" pos:start="4159:13" pos:end="4159:43"><block_content pos:start="4159:13" pos:end="4159:43">

            <expr_stmt pos:start="4159:13" pos:end="4159:43"><expr pos:start="4159:13" pos:end="4159:42"><name pos:start="4159:13" pos:end="4159:14">ot</name> <operator pos:start="4159:16" pos:end="4159:16">=</operator> <ternary pos:start="4159:18" pos:end="4159:42"><condition pos:start="4159:18" pos:end="4159:24"><expr pos:start="4159:18" pos:end="4159:22"><name pos:start="4159:18" pos:end="4159:22">dflag</name></expr> ?</condition><then pos:start="4159:26" pos:end="4159:32"> <expr pos:start="4159:26" pos:end="4159:32"><name pos:start="4159:26" pos:end="4159:32">OT_LONG</name></expr> </then><else pos:start="4159:34" pos:end="4159:42">: <expr pos:start="4159:36" pos:end="4159:42"><name pos:start="4159:36" pos:end="4159:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4161:9" pos:end="4161:45"><expr pos:start="4161:9" pos:end="4161:44"><call pos:start="4161:9" pos:end="4161:44"><name pos:start="4161:9" pos:end="4161:25">gen_op_mov_TN_reg</name><argument_list pos:start="4161:26" pos:end="4161:44">(<argument pos:start="4161:27" pos:end="4161:33"><expr pos:start="4161:27" pos:end="4161:33"><name pos:start="4161:27" pos:end="4161:33">OT_WORD</name></expr></argument>, <argument pos:start="4161:36" pos:end="4161:36"><expr pos:start="4161:36" pos:end="4161:36"><literal type="number" pos:start="4161:36" pos:end="4161:36">0</literal></expr></argument>, <argument pos:start="4161:39" pos:end="4161:43"><expr pos:start="4161:39" pos:end="4161:43"><name pos:start="4161:39" pos:end="4161:43">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4163:9" pos:end="4163:30"><expr pos:start="4163:9" pos:end="4163:29"><call pos:start="4163:9" pos:end="4163:29"><name pos:start="4163:9" pos:end="4163:27">gen_op_andl_T0_ffff</name><argument_list pos:start="4163:28" pos:end="4163:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4165:9" pos:end="4167:43"><expr pos:start="4165:9" pos:end="4167:42"><call pos:start="4165:9" pos:end="4167:42"><name pos:start="4165:9" pos:end="4165:20">gen_check_io</name><argument_list pos:start="4165:21" pos:end="4167:42">(<argument pos:start="4165:22" pos:end="4165:22"><expr pos:start="4165:22" pos:end="4165:22"><name pos:start="4165:22" pos:end="4165:22">s</name></expr></argument>, <argument pos:start="4165:25" pos:end="4165:26"><expr pos:start="4165:25" pos:end="4165:26"><name pos:start="4165:25" pos:end="4165:26">ot</name></expr></argument>, <argument pos:start="4165:29" pos:end="4165:49"><expr pos:start="4165:29" pos:end="4165:49"><name pos:start="4165:29" pos:end="4165:36">pc_start</name> <operator pos:start="4165:38" pos:end="4165:38">-</operator> <name pos:start="4165:40" pos:end="4165:49"><name pos:start="4165:40" pos:end="4165:40">s</name><operator pos:start="4165:41" pos:end="4165:42">-&gt;</operator><name pos:start="4165:43" pos:end="4165:49">cs_base</name></name></expr></argument>,

                     <argument pos:start="4167:22" pos:end="4167:41"><expr pos:start="4167:22" pos:end="4167:41"><call pos:start="4167:22" pos:end="4167:41"><name pos:start="4167:22" pos:end="4167:31">svm_is_rep</name><argument_list pos:start="4167:32" pos:end="4167:41">(<argument pos:start="4167:33" pos:end="4167:40"><expr pos:start="4167:33" pos:end="4167:40"><name pos:start="4167:33" pos:end="4167:40">prefixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4169:9" pos:end="4169:40"><expr pos:start="4169:9" pos:end="4169:39"><call pos:start="4169:9" pos:end="4169:39"><name pos:start="4169:9" pos:end="4169:25">gen_op_mov_TN_reg</name><argument_list pos:start="4169:26" pos:end="4169:39">(<argument pos:start="4169:27" pos:end="4169:28"><expr pos:start="4169:27" pos:end="4169:28"><name pos:start="4169:27" pos:end="4169:28">ot</name></expr></argument>, <argument pos:start="4169:31" pos:end="4169:31"><expr pos:start="4169:31" pos:end="4169:31"><literal type="number" pos:start="4169:31" pos:end="4169:31">1</literal></expr></argument>, <argument pos:start="4169:34" pos:end="4169:38"><expr pos:start="4169:34" pos:end="4169:38"><name pos:start="4169:34" pos:end="4169:38">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="4173:9" pos:end="4175:27"><if pos:start="4173:9" pos:end="4175:27">if <condition pos:start="4173:12" pos:end="4173:23">(<expr pos:start="4173:13" pos:end="4173:22"><name pos:start="4173:13" pos:end="4173:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="4175:13" pos:end="4175:27"><block_content pos:start="4175:13" pos:end="4175:27">

            <expr_stmt pos:start="4175:13" pos:end="4175:27"><expr pos:start="4175:13" pos:end="4175:26"><call pos:start="4175:13" pos:end="4175:26"><name pos:start="4175:13" pos:end="4175:24">gen_io_start</name><argument_list pos:start="4175:25" pos:end="4175:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4177:9" pos:end="4177:53"><expr pos:start="4177:9" pos:end="4177:52"><call pos:start="4177:9" pos:end="4177:52"><name pos:start="4177:9" pos:end="4177:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4177:29" pos:end="4177:52">(<argument pos:start="4177:30" pos:end="4177:41"><expr pos:start="4177:30" pos:end="4177:41"><name pos:start="4177:30" pos:end="4177:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4177:44" pos:end="4177:51"><expr pos:start="4177:44" pos:end="4177:51"><name pos:start="4177:44" pos:end="4177:51"><name pos:start="4177:44" pos:end="4177:48">cpu_T</name><index pos:start="4177:49" pos:end="4177:51">[<expr pos:start="4177:50" pos:end="4177:50"><literal type="number" pos:start="4177:50" pos:end="4177:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4179:9" pos:end="4179:53"><expr pos:start="4179:9" pos:end="4179:52"><call pos:start="4179:9" pos:end="4179:52"><name pos:start="4179:9" pos:end="4179:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4179:29" pos:end="4179:52">(<argument pos:start="4179:30" pos:end="4179:41"><expr pos:start="4179:30" pos:end="4179:41"><name pos:start="4179:30" pos:end="4179:41">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="4179:44" pos:end="4179:51"><expr pos:start="4179:44" pos:end="4179:51"><name pos:start="4179:44" pos:end="4179:51"><name pos:start="4179:44" pos:end="4179:48">cpu_T</name><index pos:start="4179:49" pos:end="4179:51">[<expr pos:start="4179:50" pos:end="4179:50"><literal type="number" pos:start="4179:50" pos:end="4179:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4181:9" pos:end="4181:60"><expr pos:start="4181:9" pos:end="4181:59"><call pos:start="4181:9" pos:end="4181:59"><name pos:start="4181:9" pos:end="4181:27">gen_helper_out_func</name><argument_list pos:start="4181:28" pos:end="4181:59">(<argument pos:start="4181:29" pos:end="4181:30"><expr pos:start="4181:29" pos:end="4181:30"><name pos:start="4181:29" pos:end="4181:30">ot</name></expr></argument>, <argument pos:start="4181:33" pos:end="4181:44"><expr pos:start="4181:33" pos:end="4181:44"><name pos:start="4181:33" pos:end="4181:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4181:47" pos:end="4181:58"><expr pos:start="4181:47" pos:end="4181:58"><name pos:start="4181:47" pos:end="4181:58">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4183:9" pos:end="4189:9"><if pos:start="4183:9" pos:end="4189:9">if <condition pos:start="4183:12" pos:end="4183:23">(<expr pos:start="4183:13" pos:end="4183:22"><name pos:start="4183:13" pos:end="4183:22">use_icount</name></expr>)</condition> <block pos:start="4183:25" pos:end="4189:9">{<block_content pos:start="4185:13" pos:end="4187:43">

            <expr_stmt pos:start="4185:13" pos:end="4185:25"><expr pos:start="4185:13" pos:end="4185:24"><call pos:start="4185:13" pos:end="4185:24"><name pos:start="4185:13" pos:end="4185:22">gen_io_end</name><argument_list pos:start="4185:23" pos:end="4185:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4187:13" pos:end="4187:43"><expr pos:start="4187:13" pos:end="4187:42"><call pos:start="4187:13" pos:end="4187:42"><name pos:start="4187:13" pos:end="4187:19">gen_jmp</name><argument_list pos:start="4187:20" pos:end="4187:42">(<argument pos:start="4187:21" pos:end="4187:21"><expr pos:start="4187:21" pos:end="4187:21"><name pos:start="4187:21" pos:end="4187:21">s</name></expr></argument>, <argument pos:start="4187:24" pos:end="4187:41"><expr pos:start="4187:24" pos:end="4187:41"><name pos:start="4187:24" pos:end="4187:28"><name pos:start="4187:24" pos:end="4187:24">s</name><operator pos:start="4187:25" pos:end="4187:26">-&gt;</operator><name pos:start="4187:27" pos:end="4187:28">pc</name></name> <operator pos:start="4187:30" pos:end="4187:30">-</operator> <name pos:start="4187:32" pos:end="4187:41"><name pos:start="4187:32" pos:end="4187:32">s</name><operator pos:start="4187:33" pos:end="4187:34">-&gt;</operator><name pos:start="4187:35" pos:end="4187:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4191:9" pos:end="4191:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4195:9" pos:end="4195:34">/************************/</comment>

        <comment type="block" pos:start="4197:9" pos:end="4197:21">/* control */</comment>

    <case pos:start="4199:5" pos:end="4199:14">case <expr pos:start="4199:10" pos:end="4199:13"><literal type="number" pos:start="4199:10" pos:end="4199:13">0xc2</literal></expr>:</case> <comment type="block" pos:start="4199:16" pos:end="4199:27">/* ret im */</comment>

        <expr_stmt pos:start="4201:9" pos:end="4201:51"><expr pos:start="4201:9" pos:end="4201:50"><name pos:start="4201:9" pos:end="4201:11">val</name> <operator pos:start="4201:13" pos:end="4201:13">=</operator> <call pos:start="4201:15" pos:end="4201:50"><name pos:start="4201:15" pos:end="4201:27">cpu_ldsw_code</name><argument_list pos:start="4201:28" pos:end="4201:50">(<argument pos:start="4201:29" pos:end="4201:42"><expr pos:start="4201:29" pos:end="4201:42"><name pos:start="4201:29" pos:end="4201:42">cpu_single_env</name></expr></argument>, <argument pos:start="4201:45" pos:end="4201:49"><expr pos:start="4201:45" pos:end="4201:49"><name pos:start="4201:45" pos:end="4201:49"><name pos:start="4201:45" pos:end="4201:45">s</name><operator pos:start="4201:46" pos:end="4201:47">-&gt;</operator><name pos:start="4201:48" pos:end="4201:49">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4203:9" pos:end="4203:19"><expr pos:start="4203:9" pos:end="4203:18"><name pos:start="4203:9" pos:end="4203:13"><name pos:start="4203:9" pos:end="4203:9">s</name><operator pos:start="4203:10" pos:end="4203:11">-&gt;</operator><name pos:start="4203:12" pos:end="4203:13">pc</name></name> <operator pos:start="4203:15" pos:end="4203:16">+=</operator> <literal type="number" pos:start="4203:18" pos:end="4203:18">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4205:9" pos:end="4205:22"><expr pos:start="4205:9" pos:end="4205:21"><call pos:start="4205:9" pos:end="4205:21"><name pos:start="4205:9" pos:end="4205:18">gen_pop_T0</name><argument_list pos:start="4205:19" pos:end="4205:21">(<argument pos:start="4205:20" pos:end="4205:20"><expr pos:start="4205:20" pos:end="4205:20"><name pos:start="4205:20" pos:end="4205:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4207:9" pos:end="4209:25"><if pos:start="4207:9" pos:end="4209:25">if <condition pos:start="4207:12" pos:end="4207:34">(<expr pos:start="4207:13" pos:end="4207:33"><call pos:start="4207:13" pos:end="4207:21"><name pos:start="4207:13" pos:end="4207:18">CODE64</name><argument_list pos:start="4207:19" pos:end="4207:21">(<argument pos:start="4207:20" pos:end="4207:20"><expr pos:start="4207:20" pos:end="4207:20"><name pos:start="4207:20" pos:end="4207:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4207:23" pos:end="4207:24">&amp;&amp;</operator> <name pos:start="4207:26" pos:end="4207:33"><name pos:start="4207:26" pos:end="4207:26">s</name><operator pos:start="4207:27" pos:end="4207:28">-&gt;</operator><name pos:start="4207:29" pos:end="4207:33">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="4209:13" pos:end="4209:25"><block_content pos:start="4209:13" pos:end="4209:25">

            <expr_stmt pos:start="4209:13" pos:end="4209:25"><expr pos:start="4209:13" pos:end="4209:24"><name pos:start="4209:13" pos:end="4209:20"><name pos:start="4209:13" pos:end="4209:13">s</name><operator pos:start="4209:14" pos:end="4209:15">-&gt;</operator><name pos:start="4209:16" pos:end="4209:20">dflag</name></name> <operator pos:start="4209:22" pos:end="4209:22">=</operator> <literal type="number" pos:start="4209:24" pos:end="4209:24">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4211:9" pos:end="4211:51"><expr pos:start="4211:9" pos:end="4211:50"><call pos:start="4211:9" pos:end="4211:50"><name pos:start="4211:9" pos:end="4211:24">gen_stack_update</name><argument_list pos:start="4211:25" pos:end="4211:50">(<argument pos:start="4211:26" pos:end="4211:26"><expr pos:start="4211:26" pos:end="4211:26"><name pos:start="4211:26" pos:end="4211:26">s</name></expr></argument>, <argument pos:start="4211:29" pos:end="4211:49"><expr pos:start="4211:29" pos:end="4211:49"><name pos:start="4211:29" pos:end="4211:31">val</name> <operator pos:start="4211:33" pos:end="4211:33">+</operator> <operator pos:start="4211:35" pos:end="4211:35">(</operator><literal type="number" pos:start="4211:36" pos:end="4211:36">2</literal> <operator pos:start="4211:38" pos:end="4211:39">&lt;&lt;</operator> <name pos:start="4211:41" pos:end="4211:48"><name pos:start="4211:41" pos:end="4211:41">s</name><operator pos:start="4211:42" pos:end="4211:43">-&gt;</operator><name pos:start="4211:44" pos:end="4211:48">dflag</name></name><operator pos:start="4211:49" pos:end="4211:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4213:9" pos:end="4215:34"><if pos:start="4213:9" pos:end="4215:34">if <condition pos:start="4213:12" pos:end="4213:26">(<expr pos:start="4213:13" pos:end="4213:25"><name pos:start="4213:13" pos:end="4213:20"><name pos:start="4213:13" pos:end="4213:13">s</name><operator pos:start="4213:14" pos:end="4213:15">-&gt;</operator><name pos:start="4213:16" pos:end="4213:20">dflag</name></name> <operator pos:start="4213:22" pos:end="4213:23">==</operator> <literal type="number" pos:start="4213:25" pos:end="4213:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4215:13" pos:end="4215:34"><block_content pos:start="4215:13" pos:end="4215:34">

            <expr_stmt pos:start="4215:13" pos:end="4215:34"><expr pos:start="4215:13" pos:end="4215:33"><call pos:start="4215:13" pos:end="4215:33"><name pos:start="4215:13" pos:end="4215:31">gen_op_andl_T0_ffff</name><argument_list pos:start="4215:32" pos:end="4215:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4217:9" pos:end="4217:24"><expr pos:start="4217:9" pos:end="4217:23"><call pos:start="4217:9" pos:end="4217:23"><name pos:start="4217:9" pos:end="4217:21">gen_op_jmp_T0</name><argument_list pos:start="4217:22" pos:end="4217:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4219:9" pos:end="4219:19"><expr pos:start="4219:9" pos:end="4219:18"><call pos:start="4219:9" pos:end="4219:18"><name pos:start="4219:9" pos:end="4219:15">gen_eob</name><argument_list pos:start="4219:16" pos:end="4219:18">(<argument pos:start="4219:17" pos:end="4219:17"><expr pos:start="4219:17" pos:end="4219:17"><name pos:start="4219:17" pos:end="4219:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4221:9" pos:end="4221:14">break;</break>

    <case pos:start="4223:5" pos:end="4223:14">case <expr pos:start="4223:10" pos:end="4223:13"><literal type="number" pos:start="4223:10" pos:end="4223:13">0xc3</literal></expr>:</case> <comment type="block" pos:start="4223:16" pos:end="4223:24">/* ret */</comment>

        <expr_stmt pos:start="4225:9" pos:end="4225:22"><expr pos:start="4225:9" pos:end="4225:21"><call pos:start="4225:9" pos:end="4225:21"><name pos:start="4225:9" pos:end="4225:18">gen_pop_T0</name><argument_list pos:start="4225:19" pos:end="4225:21">(<argument pos:start="4225:20" pos:end="4225:20"><expr pos:start="4225:20" pos:end="4225:20"><name pos:start="4225:20" pos:end="4225:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4227:9" pos:end="4227:26"><expr pos:start="4227:9" pos:end="4227:25"><call pos:start="4227:9" pos:end="4227:25"><name pos:start="4227:9" pos:end="4227:22">gen_pop_update</name><argument_list pos:start="4227:23" pos:end="4227:25">(<argument pos:start="4227:24" pos:end="4227:24"><expr pos:start="4227:24" pos:end="4227:24"><name pos:start="4227:24" pos:end="4227:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4229:9" pos:end="4231:34"><if pos:start="4229:9" pos:end="4231:34">if <condition pos:start="4229:12" pos:end="4229:26">(<expr pos:start="4229:13" pos:end="4229:25"><name pos:start="4229:13" pos:end="4229:20"><name pos:start="4229:13" pos:end="4229:13">s</name><operator pos:start="4229:14" pos:end="4229:15">-&gt;</operator><name pos:start="4229:16" pos:end="4229:20">dflag</name></name> <operator pos:start="4229:22" pos:end="4229:23">==</operator> <literal type="number" pos:start="4229:25" pos:end="4229:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4231:13" pos:end="4231:34"><block_content pos:start="4231:13" pos:end="4231:34">

            <expr_stmt pos:start="4231:13" pos:end="4231:34"><expr pos:start="4231:13" pos:end="4231:33"><call pos:start="4231:13" pos:end="4231:33"><name pos:start="4231:13" pos:end="4231:31">gen_op_andl_T0_ffff</name><argument_list pos:start="4231:32" pos:end="4231:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4233:9" pos:end="4233:24"><expr pos:start="4233:9" pos:end="4233:23"><call pos:start="4233:9" pos:end="4233:23"><name pos:start="4233:9" pos:end="4233:21">gen_op_jmp_T0</name><argument_list pos:start="4233:22" pos:end="4233:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4235:9" pos:end="4235:19"><expr pos:start="4235:9" pos:end="4235:18"><call pos:start="4235:9" pos:end="4235:18"><name pos:start="4235:9" pos:end="4235:15">gen_eob</name><argument_list pos:start="4235:16" pos:end="4235:18">(<argument pos:start="4235:17" pos:end="4235:17"><expr pos:start="4235:17" pos:end="4235:17"><name pos:start="4235:17" pos:end="4235:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4237:9" pos:end="4237:14">break;</break>

    <case pos:start="4239:5" pos:end="4239:14">case <expr pos:start="4239:10" pos:end="4239:13"><literal type="number" pos:start="4239:10" pos:end="4239:13">0xca</literal></expr>:</case> <comment type="block" pos:start="4239:16" pos:end="4239:28">/* lret im */</comment>

        <expr_stmt pos:start="4241:9" pos:end="4241:51"><expr pos:start="4241:9" pos:end="4241:50"><name pos:start="4241:9" pos:end="4241:11">val</name> <operator pos:start="4241:13" pos:end="4241:13">=</operator> <call pos:start="4241:15" pos:end="4241:50"><name pos:start="4241:15" pos:end="4241:27">cpu_ldsw_code</name><argument_list pos:start="4241:28" pos:end="4241:50">(<argument pos:start="4241:29" pos:end="4241:42"><expr pos:start="4241:29" pos:end="4241:42"><name pos:start="4241:29" pos:end="4241:42">cpu_single_env</name></expr></argument>, <argument pos:start="4241:45" pos:end="4241:49"><expr pos:start="4241:45" pos:end="4241:49"><name pos:start="4241:45" pos:end="4241:49"><name pos:start="4241:45" pos:end="4241:45">s</name><operator pos:start="4241:46" pos:end="4241:47">-&gt;</operator><name pos:start="4241:48" pos:end="4241:49">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4243:9" pos:end="4243:19"><expr pos:start="4243:9" pos:end="4243:18"><name pos:start="4243:9" pos:end="4243:13"><name pos:start="4243:9" pos:end="4243:9">s</name><operator pos:start="4243:10" pos:end="4243:11">-&gt;</operator><name pos:start="4243:12" pos:end="4243:13">pc</name></name> <operator pos:start="4243:15" pos:end="4243:16">+=</operator> <literal type="number" pos:start="4243:18" pos:end="4243:18">2</literal></expr>;</expr_stmt>

    <label pos:start="4245:5" pos:end="4245:12"><name pos:start="4245:5" pos:end="4245:11">do_lret</name>:</label>

        <if_stmt pos:start="4247:9" pos:end="4289:9"><if pos:start="4247:9" pos:end="4259:9">if <condition pos:start="4247:12" pos:end="4247:30">(<expr pos:start="4247:13" pos:end="4247:29"><name pos:start="4247:13" pos:end="4247:17"><name pos:start="4247:13" pos:end="4247:13">s</name><operator pos:start="4247:14" pos:end="4247:15">-&gt;</operator><name pos:start="4247:16" pos:end="4247:17">pe</name></name> <operator pos:start="4247:19" pos:end="4247:20">&amp;&amp;</operator> <operator pos:start="4247:22" pos:end="4247:22">!</operator><name pos:start="4247:23" pos:end="4247:29"><name pos:start="4247:23" pos:end="4247:23">s</name><operator pos:start="4247:24" pos:end="4247:25">-&gt;</operator><name pos:start="4247:26" pos:end="4247:29">vm86</name></name></expr>)</condition> <block pos:start="4247:32" pos:end="4259:9">{<block_content pos:start="4249:13" pos:end="4257:58">

            <if_stmt pos:start="4249:13" pos:end="4251:43"><if pos:start="4249:13" pos:end="4251:43">if <condition pos:start="4249:16" pos:end="4249:42">(<expr pos:start="4249:17" pos:end="4249:41"><name pos:start="4249:17" pos:end="4249:24"><name pos:start="4249:17" pos:end="4249:17">s</name><operator pos:start="4249:18" pos:end="4249:19">-&gt;</operator><name pos:start="4249:20" pos:end="4249:24">cc_op</name></name> <operator pos:start="4249:26" pos:end="4249:27">!=</operator> <name pos:start="4249:29" pos:end="4249:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4251:17" pos:end="4251:43"><block_content pos:start="4251:17" pos:end="4251:43">

                <expr_stmt pos:start="4251:17" pos:end="4251:43"><expr pos:start="4251:17" pos:end="4251:42"><call pos:start="4251:17" pos:end="4251:42"><name pos:start="4251:17" pos:end="4251:32">gen_op_set_cc_op</name><argument_list pos:start="4251:33" pos:end="4251:42">(<argument pos:start="4251:34" pos:end="4251:41"><expr pos:start="4251:34" pos:end="4251:41"><name pos:start="4251:34" pos:end="4251:41"><name pos:start="4251:34" pos:end="4251:34">s</name><operator pos:start="4251:35" pos:end="4251:36">-&gt;</operator><name pos:start="4251:37" pos:end="4251:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4253:13" pos:end="4253:46"><expr pos:start="4253:13" pos:end="4253:45"><call pos:start="4253:13" pos:end="4253:45"><name pos:start="4253:13" pos:end="4253:22">gen_jmp_im</name><argument_list pos:start="4253:23" pos:end="4253:45">(<argument pos:start="4253:24" pos:end="4253:44"><expr pos:start="4253:24" pos:end="4253:44"><name pos:start="4253:24" pos:end="4253:31">pc_start</name> <operator pos:start="4253:33" pos:end="4253:33">-</operator> <name pos:start="4253:35" pos:end="4253:44"><name pos:start="4253:35" pos:end="4253:35">s</name><operator pos:start="4253:36" pos:end="4253:37">-&gt;</operator><name pos:start="4253:38" pos:end="4253:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4255:13" pos:end="4257:58"><expr pos:start="4255:13" pos:end="4257:57"><call pos:start="4255:13" pos:end="4257:57"><name pos:start="4255:13" pos:end="4255:37">gen_helper_lret_protected</name><argument_list pos:start="4255:38" pos:end="4257:57">(<argument pos:start="4255:39" pos:end="4255:45"><expr pos:start="4255:39" pos:end="4255:45"><name pos:start="4255:39" pos:end="4255:45">cpu_env</name></expr></argument>, <argument pos:start="4255:48" pos:end="4255:70"><expr pos:start="4255:48" pos:end="4255:70"><call pos:start="4255:48" pos:end="4255:70"><name pos:start="4255:48" pos:end="4255:60">tcg_const_i32</name><argument_list pos:start="4255:61" pos:end="4255:70">(<argument pos:start="4255:62" pos:end="4255:69"><expr pos:start="4255:62" pos:end="4255:69"><name pos:start="4255:62" pos:end="4255:69"><name pos:start="4255:62" pos:end="4255:62">s</name><operator pos:start="4255:63" pos:end="4255:64">-&gt;</operator><name pos:start="4255:65" pos:end="4255:69">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="4257:39" pos:end="4257:56"><expr pos:start="4257:39" pos:end="4257:56"><call pos:start="4257:39" pos:end="4257:56"><name pos:start="4257:39" pos:end="4257:51">tcg_const_i32</name><argument_list pos:start="4257:52" pos:end="4257:56">(<argument pos:start="4257:53" pos:end="4257:55"><expr pos:start="4257:53" pos:end="4257:55"><name pos:start="4257:53" pos:end="4257:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4259:11" pos:end="4289:9">else <block pos:start="4259:16" pos:end="4289:9">{<block_content pos:start="4261:13" pos:end="4287:55">

            <expr_stmt pos:start="4261:13" pos:end="4261:28"><expr pos:start="4261:13" pos:end="4261:27"><call pos:start="4261:13" pos:end="4261:27"><name pos:start="4261:13" pos:end="4261:24">gen_stack_A0</name><argument_list pos:start="4261:25" pos:end="4261:27">(<argument pos:start="4261:26" pos:end="4261:26"><expr pos:start="4261:26" pos:end="4261:26"><name pos:start="4261:26" pos:end="4261:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4263:13" pos:end="4263:28">/* pop offset */</comment>

            <expr_stmt pos:start="4265:13" pos:end="4265:57"><expr pos:start="4265:13" pos:end="4265:56"><call pos:start="4265:13" pos:end="4265:56"><name pos:start="4265:13" pos:end="4265:27">gen_op_ld_T0_A0</name><argument_list pos:start="4265:28" pos:end="4265:56">(<argument pos:start="4265:29" pos:end="4265:55"><expr pos:start="4265:29" pos:end="4265:55"><literal type="number" pos:start="4265:29" pos:end="4265:31">1</literal> <operator pos:start="4265:31" pos:end="4265:31">+</operator> <name pos:start="4265:33" pos:end="4265:40"><name pos:start="4265:33" pos:end="4265:33">s</name><operator pos:start="4265:34" pos:end="4265:35">-&gt;</operator><name pos:start="4265:36" pos:end="4265:40">dflag</name></name> <operator pos:start="4265:42" pos:end="4265:42">+</operator> <name pos:start="4265:44" pos:end="4265:55"><name pos:start="4265:44" pos:end="4265:44">s</name><operator pos:start="4265:45" pos:end="4265:46">-&gt;</operator><name pos:start="4265:47" pos:end="4265:55">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4267:13" pos:end="4269:38"><if pos:start="4267:13" pos:end="4269:38">if <condition pos:start="4267:16" pos:end="4267:30">(<expr pos:start="4267:17" pos:end="4267:29"><name pos:start="4267:17" pos:end="4267:24"><name pos:start="4267:17" pos:end="4267:17">s</name><operator pos:start="4267:18" pos:end="4267:19">-&gt;</operator><name pos:start="4267:20" pos:end="4267:24">dflag</name></name> <operator pos:start="4267:26" pos:end="4267:27">==</operator> <literal type="number" pos:start="4267:29" pos:end="4267:29">0</literal></expr>)</condition><block type="pseudo" pos:start="4269:17" pos:end="4269:38"><block_content pos:start="4269:17" pos:end="4269:38">

                <expr_stmt pos:start="4269:17" pos:end="4269:38"><expr pos:start="4269:17" pos:end="4269:37"><call pos:start="4269:17" pos:end="4269:37"><name pos:start="4269:17" pos:end="4269:35">gen_op_andl_T0_ffff</name><argument_list pos:start="4269:36" pos:end="4269:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="4271:13" pos:end="4273:27">/* NOTE: keeping EIP updated is not a problem in case of

               exception */</comment>

            <expr_stmt pos:start="4275:13" pos:end="4275:28"><expr pos:start="4275:13" pos:end="4275:27"><call pos:start="4275:13" pos:end="4275:27"><name pos:start="4275:13" pos:end="4275:25">gen_op_jmp_T0</name><argument_list pos:start="4275:26" pos:end="4275:27">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4277:13" pos:end="4277:30">/* pop selector */</comment>

            <expr_stmt pos:start="4279:13" pos:end="4279:45"><expr pos:start="4279:13" pos:end="4279:44"><call pos:start="4279:13" pos:end="4279:44"><name pos:start="4279:13" pos:end="4279:29">gen_op_addl_A0_im</name><argument_list pos:start="4279:30" pos:end="4279:44">(<argument pos:start="4279:31" pos:end="4279:43"><expr pos:start="4279:31" pos:end="4279:43"><literal type="number" pos:start="4279:31" pos:end="4279:31">2</literal> <operator pos:start="4279:33" pos:end="4279:34">&lt;&lt;</operator> <name pos:start="4279:36" pos:end="4279:43"><name pos:start="4279:36" pos:end="4279:36">s</name><operator pos:start="4279:37" pos:end="4279:38">-&gt;</operator><name pos:start="4279:39" pos:end="4279:43">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4281:13" pos:end="4281:57"><expr pos:start="4281:13" pos:end="4281:56"><call pos:start="4281:13" pos:end="4281:56"><name pos:start="4281:13" pos:end="4281:27">gen_op_ld_T0_A0</name><argument_list pos:start="4281:28" pos:end="4281:56">(<argument pos:start="4281:29" pos:end="4281:55"><expr pos:start="4281:29" pos:end="4281:55"><literal type="number" pos:start="4281:29" pos:end="4281:31">1</literal> <operator pos:start="4281:31" pos:end="4281:31">+</operator> <name pos:start="4281:33" pos:end="4281:40"><name pos:start="4281:33" pos:end="4281:33">s</name><operator pos:start="4281:34" pos:end="4281:35">-&gt;</operator><name pos:start="4281:36" pos:end="4281:40">dflag</name></name> <operator pos:start="4281:42" pos:end="4281:42">+</operator> <name pos:start="4281:44" pos:end="4281:55"><name pos:start="4281:44" pos:end="4281:44">s</name><operator pos:start="4281:45" pos:end="4281:46">-&gt;</operator><name pos:start="4281:47" pos:end="4281:55">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4283:13" pos:end="4283:40"><expr pos:start="4283:13" pos:end="4283:39"><call pos:start="4283:13" pos:end="4283:39"><name pos:start="4283:13" pos:end="4283:33">gen_op_movl_seg_T0_vm</name><argument_list pos:start="4283:34" pos:end="4283:39">(<argument pos:start="4283:35" pos:end="4283:38"><expr pos:start="4283:35" pos:end="4283:38"><name pos:start="4283:35" pos:end="4283:38">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4285:13" pos:end="4285:34">/* add stack offset */</comment>

            <expr_stmt pos:start="4287:13" pos:end="4287:55"><expr pos:start="4287:13" pos:end="4287:54"><call pos:start="4287:13" pos:end="4287:54"><name pos:start="4287:13" pos:end="4287:28">gen_stack_update</name><argument_list pos:start="4287:29" pos:end="4287:54">(<argument pos:start="4287:30" pos:end="4287:30"><expr pos:start="4287:30" pos:end="4287:30"><name pos:start="4287:30" pos:end="4287:30">s</name></expr></argument>, <argument pos:start="4287:33" pos:end="4287:53"><expr pos:start="4287:33" pos:end="4287:53"><name pos:start="4287:33" pos:end="4287:35">val</name> <operator pos:start="4287:37" pos:end="4287:37">+</operator> <operator pos:start="4287:39" pos:end="4287:39">(</operator><literal type="number" pos:start="4287:40" pos:end="4287:40">4</literal> <operator pos:start="4287:42" pos:end="4287:43">&lt;&lt;</operator> <name pos:start="4287:45" pos:end="4287:52"><name pos:start="4287:45" pos:end="4287:45">s</name><operator pos:start="4287:46" pos:end="4287:47">-&gt;</operator><name pos:start="4287:48" pos:end="4287:52">dflag</name></name><operator pos:start="4287:53" pos:end="4287:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4291:9" pos:end="4291:19"><expr pos:start="4291:9" pos:end="4291:18"><call pos:start="4291:9" pos:end="4291:18"><name pos:start="4291:9" pos:end="4291:15">gen_eob</name><argument_list pos:start="4291:16" pos:end="4291:18">(<argument pos:start="4291:17" pos:end="4291:17"><expr pos:start="4291:17" pos:end="4291:17"><name pos:start="4291:17" pos:end="4291:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4293:9" pos:end="4293:14">break;</break>

    <case pos:start="4295:5" pos:end="4295:14">case <expr pos:start="4295:10" pos:end="4295:13"><literal type="number" pos:start="4295:10" pos:end="4295:13">0xcb</literal></expr>:</case> <comment type="block" pos:start="4295:16" pos:end="4295:25">/* lret */</comment>

        <expr_stmt pos:start="4297:9" pos:end="4297:16"><expr pos:start="4297:9" pos:end="4297:15"><name pos:start="4297:9" pos:end="4297:11">val</name> <operator pos:start="4297:13" pos:end="4297:13">=</operator> <literal type="number" pos:start="4297:15" pos:end="4297:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="4299:9" pos:end="4299:21">goto <name pos:start="4299:14" pos:end="4299:20">do_lret</name>;</goto>

    <case pos:start="4301:5" pos:end="4301:14">case <expr pos:start="4301:10" pos:end="4301:13"><literal type="number" pos:start="4301:10" pos:end="4301:13">0xcf</literal></expr>:</case> <comment type="block" pos:start="4301:16" pos:end="4301:25">/* iret */</comment>

        <expr_stmt pos:start="4303:9" pos:end="4303:60"><expr pos:start="4303:9" pos:end="4303:59"><call pos:start="4303:9" pos:end="4303:59"><name pos:start="4303:9" pos:end="4303:31">gen_svm_check_intercept</name><argument_list pos:start="4303:32" pos:end="4303:59">(<argument pos:start="4303:33" pos:end="4303:33"><expr pos:start="4303:33" pos:end="4303:33"><name pos:start="4303:33" pos:end="4303:33">s</name></expr></argument>, <argument pos:start="4303:36" pos:end="4303:43"><expr pos:start="4303:36" pos:end="4303:43"><name pos:start="4303:36" pos:end="4303:43">pc_start</name></expr></argument>, <argument pos:start="4303:46" pos:end="4303:58"><expr pos:start="4303:46" pos:end="4303:58"><name pos:start="4303:46" pos:end="4303:58">SVM_EXIT_IRET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4305:9" pos:end="4341:9"><if pos:start="4305:9" pos:end="4313:9">if <condition pos:start="4305:12" pos:end="4305:19">(<expr pos:start="4305:13" pos:end="4305:18"><operator pos:start="4305:13" pos:end="4305:13">!</operator><name pos:start="4305:14" pos:end="4305:18"><name pos:start="4305:14" pos:end="4305:14">s</name><operator pos:start="4305:15" pos:end="4305:16">-&gt;</operator><name pos:start="4305:17" pos:end="4305:18">pe</name></name></expr>)</condition> <block pos:start="4305:21" pos:end="4313:9">{<block_content pos:start="4309:13" pos:end="4311:36">

            <comment type="block" pos:start="4307:13" pos:end="4307:27">/* real mode */</comment>

            <expr_stmt pos:start="4309:13" pos:end="4309:67"><expr pos:start="4309:13" pos:end="4309:66"><call pos:start="4309:13" pos:end="4309:66"><name pos:start="4309:13" pos:end="4309:32">gen_helper_iret_real</name><argument_list pos:start="4309:33" pos:end="4309:66">(<argument pos:start="4309:34" pos:end="4309:40"><expr pos:start="4309:34" pos:end="4309:40"><name pos:start="4309:34" pos:end="4309:40">cpu_env</name></expr></argument>, <argument pos:start="4309:43" pos:end="4309:65"><expr pos:start="4309:43" pos:end="4309:65"><call pos:start="4309:43" pos:end="4309:65"><name pos:start="4309:43" pos:end="4309:55">tcg_const_i32</name><argument_list pos:start="4309:56" pos:end="4309:65">(<argument pos:start="4309:57" pos:end="4309:64"><expr pos:start="4309:57" pos:end="4309:64"><name pos:start="4309:57" pos:end="4309:64"><name pos:start="4309:57" pos:end="4309:57">s</name><operator pos:start="4309:58" pos:end="4309:59">-&gt;</operator><name pos:start="4309:60" pos:end="4309:64">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4311:13" pos:end="4311:36"><expr pos:start="4311:13" pos:end="4311:35"><name pos:start="4311:13" pos:end="4311:20"><name pos:start="4311:13" pos:end="4311:13">s</name><operator pos:start="4311:14" pos:end="4311:15">-&gt;</operator><name pos:start="4311:16" pos:end="4311:20">cc_op</name></name> <operator pos:start="4311:22" pos:end="4311:22">=</operator> <name pos:start="4311:24" pos:end="4311:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="4313:11" pos:end="4327:9">else if <condition pos:start="4313:19" pos:end="4313:27">(<expr pos:start="4313:20" pos:end="4313:26"><name pos:start="4313:20" pos:end="4313:26"><name pos:start="4313:20" pos:end="4313:20">s</name><operator pos:start="4313:21" pos:end="4313:22">-&gt;</operator><name pos:start="4313:23" pos:end="4313:26">vm86</name></name></expr>)</condition> <block pos:start="4313:29" pos:end="4327:9">{<block_content pos:start="4315:13" pos:end="4325:13">

            <if_stmt pos:start="4315:13" pos:end="4325:13"><if pos:start="4315:13" pos:end="4319:13">if <condition pos:start="4315:16" pos:end="4315:29">(<expr pos:start="4315:17" pos:end="4315:28"><name pos:start="4315:17" pos:end="4315:23"><name pos:start="4315:17" pos:end="4315:17">s</name><operator pos:start="4315:18" pos:end="4315:19">-&gt;</operator><name pos:start="4315:20" pos:end="4315:23">iopl</name></name> <operator pos:start="4315:25" pos:end="4315:26">!=</operator> <literal type="number" pos:start="4315:28" pos:end="4315:28">3</literal></expr>)</condition> <block pos:start="4315:31" pos:end="4319:13">{<block_content pos:start="4317:17" pos:end="4317:68">

                <expr_stmt pos:start="4317:17" pos:end="4317:68"><expr pos:start="4317:17" pos:end="4317:67"><call pos:start="4317:17" pos:end="4317:67"><name pos:start="4317:17" pos:end="4317:29">gen_exception</name><argument_list pos:start="4317:30" pos:end="4317:67">(<argument pos:start="4317:31" pos:end="4317:31"><expr pos:start="4317:31" pos:end="4317:31"><name pos:start="4317:31" pos:end="4317:31">s</name></expr></argument>, <argument pos:start="4317:34" pos:end="4317:43"><expr pos:start="4317:34" pos:end="4317:43"><name pos:start="4317:34" pos:end="4317:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4317:46" pos:end="4317:66"><expr pos:start="4317:46" pos:end="4317:66"><name pos:start="4317:46" pos:end="4317:53">pc_start</name> <operator pos:start="4317:55" pos:end="4317:55">-</operator> <name pos:start="4317:57" pos:end="4317:66"><name pos:start="4317:57" pos:end="4317:57">s</name><operator pos:start="4317:58" pos:end="4317:59">-&gt;</operator><name pos:start="4317:60" pos:end="4317:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4319:15" pos:end="4325:13">else <block pos:start="4319:20" pos:end="4325:13">{<block_content pos:start="4321:17" pos:end="4323:40">

                <expr_stmt pos:start="4321:17" pos:end="4321:71"><expr pos:start="4321:17" pos:end="4321:70"><call pos:start="4321:17" pos:end="4321:70"><name pos:start="4321:17" pos:end="4321:36">gen_helper_iret_real</name><argument_list pos:start="4321:37" pos:end="4321:70">(<argument pos:start="4321:38" pos:end="4321:44"><expr pos:start="4321:38" pos:end="4321:44"><name pos:start="4321:38" pos:end="4321:44">cpu_env</name></expr></argument>, <argument pos:start="4321:47" pos:end="4321:69"><expr pos:start="4321:47" pos:end="4321:69"><call pos:start="4321:47" pos:end="4321:69"><name pos:start="4321:47" pos:end="4321:59">tcg_const_i32</name><argument_list pos:start="4321:60" pos:end="4321:69">(<argument pos:start="4321:61" pos:end="4321:68"><expr pos:start="4321:61" pos:end="4321:68"><name pos:start="4321:61" pos:end="4321:68"><name pos:start="4321:61" pos:end="4321:61">s</name><operator pos:start="4321:62" pos:end="4321:63">-&gt;</operator><name pos:start="4321:64" pos:end="4321:68">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4323:17" pos:end="4323:40"><expr pos:start="4323:17" pos:end="4323:39"><name pos:start="4323:17" pos:end="4323:24"><name pos:start="4323:17" pos:end="4323:17">s</name><operator pos:start="4323:18" pos:end="4323:19">-&gt;</operator><name pos:start="4323:20" pos:end="4323:24">cc_op</name></name> <operator pos:start="4323:26" pos:end="4323:26">=</operator> <name pos:start="4323:28" pos:end="4323:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="4327:11" pos:end="4341:9">else <block pos:start="4327:16" pos:end="4341:9">{<block_content pos:start="4329:13" pos:end="4339:36">

            <if_stmt pos:start="4329:13" pos:end="4331:43"><if pos:start="4329:13" pos:end="4331:43">if <condition pos:start="4329:16" pos:end="4329:42">(<expr pos:start="4329:17" pos:end="4329:41"><name pos:start="4329:17" pos:end="4329:24"><name pos:start="4329:17" pos:end="4329:17">s</name><operator pos:start="4329:18" pos:end="4329:19">-&gt;</operator><name pos:start="4329:20" pos:end="4329:24">cc_op</name></name> <operator pos:start="4329:26" pos:end="4329:27">!=</operator> <name pos:start="4329:29" pos:end="4329:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4331:17" pos:end="4331:43"><block_content pos:start="4331:17" pos:end="4331:43">

                <expr_stmt pos:start="4331:17" pos:end="4331:43"><expr pos:start="4331:17" pos:end="4331:42"><call pos:start="4331:17" pos:end="4331:42"><name pos:start="4331:17" pos:end="4331:32">gen_op_set_cc_op</name><argument_list pos:start="4331:33" pos:end="4331:42">(<argument pos:start="4331:34" pos:end="4331:41"><expr pos:start="4331:34" pos:end="4331:41"><name pos:start="4331:34" pos:end="4331:41"><name pos:start="4331:34" pos:end="4331:34">s</name><operator pos:start="4331:35" pos:end="4331:36">-&gt;</operator><name pos:start="4331:37" pos:end="4331:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4333:13" pos:end="4333:46"><expr pos:start="4333:13" pos:end="4333:45"><call pos:start="4333:13" pos:end="4333:45"><name pos:start="4333:13" pos:end="4333:22">gen_jmp_im</name><argument_list pos:start="4333:23" pos:end="4333:45">(<argument pos:start="4333:24" pos:end="4333:44"><expr pos:start="4333:24" pos:end="4333:44"><name pos:start="4333:24" pos:end="4333:31">pc_start</name> <operator pos:start="4333:33" pos:end="4333:33">-</operator> <name pos:start="4333:35" pos:end="4333:44"><name pos:start="4333:35" pos:end="4333:35">s</name><operator pos:start="4333:36" pos:end="4333:37">-&gt;</operator><name pos:start="4333:38" pos:end="4333:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4335:13" pos:end="4337:73"><expr pos:start="4335:13" pos:end="4337:72"><call pos:start="4335:13" pos:end="4337:72"><name pos:start="4335:13" pos:end="4335:37">gen_helper_iret_protected</name><argument_list pos:start="4335:38" pos:end="4337:72">(<argument pos:start="4335:39" pos:end="4335:45"><expr pos:start="4335:39" pos:end="4335:45"><name pos:start="4335:39" pos:end="4335:45">cpu_env</name></expr></argument>, <argument pos:start="4335:48" pos:end="4335:70"><expr pos:start="4335:48" pos:end="4335:70"><call pos:start="4335:48" pos:end="4335:70"><name pos:start="4335:48" pos:end="4335:60">tcg_const_i32</name><argument_list pos:start="4335:61" pos:end="4335:70">(<argument pos:start="4335:62" pos:end="4335:69"><expr pos:start="4335:62" pos:end="4335:69"><name pos:start="4335:62" pos:end="4335:69"><name pos:start="4335:62" pos:end="4335:62">s</name><operator pos:start="4335:63" pos:end="4335:64">-&gt;</operator><name pos:start="4335:65" pos:end="4335:69">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="4337:39" pos:end="4337:71"><expr pos:start="4337:39" pos:end="4337:71"><call pos:start="4337:39" pos:end="4337:71"><name pos:start="4337:39" pos:end="4337:51">tcg_const_i32</name><argument_list pos:start="4337:52" pos:end="4337:71">(<argument pos:start="4337:53" pos:end="4337:70"><expr pos:start="4337:53" pos:end="4337:70"><name pos:start="4337:53" pos:end="4337:57"><name pos:start="4337:53" pos:end="4337:53">s</name><operator pos:start="4337:54" pos:end="4337:55">-&gt;</operator><name pos:start="4337:56" pos:end="4337:57">pc</name></name> <operator pos:start="4337:59" pos:end="4337:59">-</operator> <name pos:start="4337:61" pos:end="4337:70"><name pos:start="4337:61" pos:end="4337:61">s</name><operator pos:start="4337:62" pos:end="4337:63">-&gt;</operator><name pos:start="4337:64" pos:end="4337:70">cs_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4339:13" pos:end="4339:36"><expr pos:start="4339:13" pos:end="4339:35"><name pos:start="4339:13" pos:end="4339:20"><name pos:start="4339:13" pos:end="4339:13">s</name><operator pos:start="4339:14" pos:end="4339:15">-&gt;</operator><name pos:start="4339:16" pos:end="4339:20">cc_op</name></name> <operator pos:start="4339:22" pos:end="4339:22">=</operator> <name pos:start="4339:24" pos:end="4339:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4343:9" pos:end="4343:19"><expr pos:start="4343:9" pos:end="4343:18"><call pos:start="4343:9" pos:end="4343:18"><name pos:start="4343:9" pos:end="4343:15">gen_eob</name><argument_list pos:start="4343:16" pos:end="4343:18">(<argument pos:start="4343:17" pos:end="4343:17"><expr pos:start="4343:17" pos:end="4343:17"><name pos:start="4343:17" pos:end="4343:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4345:9" pos:end="4345:14">break;</break>

    <case pos:start="4347:5" pos:end="4347:14">case <expr pos:start="4347:10" pos:end="4347:13"><literal type="number" pos:start="4347:10" pos:end="4347:13">0xe8</literal></expr>:</case> <comment type="block" pos:start="4347:16" pos:end="4347:28">/* call im */</comment>

        <block pos:start="4349:9" pos:end="4377:9">{<block_content pos:start="4351:13" pos:end="4375:29">

            <if_stmt pos:start="4351:13" pos:end="4357:53"><if pos:start="4351:13" pos:end="4353:53">if <condition pos:start="4351:16" pos:end="4351:22">(<expr pos:start="4351:17" pos:end="4351:21"><name pos:start="4351:17" pos:end="4351:21">dflag</name></expr>)</condition><block type="pseudo" pos:start="4353:17" pos:end="4353:53"><block_content pos:start="4353:17" pos:end="4353:53">

                <expr_stmt pos:start="4353:17" pos:end="4353:53"><expr pos:start="4353:17" pos:end="4353:52"><name pos:start="4353:17" pos:end="4353:20">tval</name> <operator pos:start="4353:22" pos:end="4353:22">=</operator> <operator pos:start="4353:24" pos:end="4353:24">(</operator><name pos:start="4353:25" pos:end="4353:31">int32_t</name><operator pos:start="4353:32" pos:end="4353:32">)</operator><call pos:start="4353:33" pos:end="4353:52"><name pos:start="4353:33" pos:end="4353:40">insn_get</name><argument_list pos:start="4353:41" pos:end="4353:52">(<argument pos:start="4353:42" pos:end="4353:42"><expr pos:start="4353:42" pos:end="4353:42"><name pos:start="4353:42" pos:end="4353:42">s</name></expr></argument>, <argument pos:start="4353:45" pos:end="4353:51"><expr pos:start="4353:45" pos:end="4353:51"><name pos:start="4353:45" pos:end="4353:51">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="4355:13" pos:end="4357:53">else<block type="pseudo" pos:start="4357:17" pos:end="4357:53"><block_content pos:start="4357:17" pos:end="4357:53">

                <expr_stmt pos:start="4357:17" pos:end="4357:53"><expr pos:start="4357:17" pos:end="4357:52"><name pos:start="4357:17" pos:end="4357:20">tval</name> <operator pos:start="4357:22" pos:end="4357:22">=</operator> <operator pos:start="4357:24" pos:end="4357:24">(</operator><name pos:start="4357:25" pos:end="4357:31">int16_t</name><operator pos:start="4357:32" pos:end="4357:32">)</operator><call pos:start="4357:33" pos:end="4357:52"><name pos:start="4357:33" pos:end="4357:40">insn_get</name><argument_list pos:start="4357:41" pos:end="4357:52">(<argument pos:start="4357:42" pos:end="4357:42"><expr pos:start="4357:42" pos:end="4357:42"><name pos:start="4357:42" pos:end="4357:42">s</name></expr></argument>, <argument pos:start="4357:45" pos:end="4357:51"><expr pos:start="4357:45" pos:end="4357:51"><name pos:start="4357:45" pos:end="4357:51">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="4359:13" pos:end="4359:42"><expr pos:start="4359:13" pos:end="4359:41"><name pos:start="4359:13" pos:end="4359:20">next_eip</name> <operator pos:start="4359:22" pos:end="4359:22">=</operator> <name pos:start="4359:24" pos:end="4359:28"><name pos:start="4359:24" pos:end="4359:24">s</name><operator pos:start="4359:25" pos:end="4359:26">-&gt;</operator><name pos:start="4359:27" pos:end="4359:28">pc</name></name> <operator pos:start="4359:30" pos:end="4359:30">-</operator> <name pos:start="4359:32" pos:end="4359:41"><name pos:start="4359:32" pos:end="4359:32">s</name><operator pos:start="4359:33" pos:end="4359:34">-&gt;</operator><name pos:start="4359:35" pos:end="4359:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="4361:13" pos:end="4361:29"><expr pos:start="4361:13" pos:end="4361:28"><name pos:start="4361:13" pos:end="4361:16">tval</name> <operator pos:start="4361:18" pos:end="4361:19">+=</operator> <name pos:start="4361:21" pos:end="4361:28">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="4363:13" pos:end="4369:35"><if pos:start="4363:13" pos:end="4365:31">if <condition pos:start="4363:16" pos:end="4363:30">(<expr pos:start="4363:17" pos:end="4363:29"><name pos:start="4363:17" pos:end="4363:24"><name pos:start="4363:17" pos:end="4363:17">s</name><operator pos:start="4363:18" pos:end="4363:19">-&gt;</operator><name pos:start="4363:20" pos:end="4363:24">dflag</name></name> <operator pos:start="4363:26" pos:end="4363:27">==</operator> <literal type="number" pos:start="4363:29" pos:end="4363:29">0</literal></expr>)</condition><block type="pseudo" pos:start="4365:17" pos:end="4365:31"><block_content pos:start="4365:17" pos:end="4365:31">

                <expr_stmt pos:start="4365:17" pos:end="4365:31"><expr pos:start="4365:17" pos:end="4365:30"><name pos:start="4365:17" pos:end="4365:20">tval</name> <operator pos:start="4365:22" pos:end="4365:23">&amp;=</operator> <literal type="number" pos:start="4365:25" pos:end="4365:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="4367:13" pos:end="4369:35">else if<condition pos:start="4367:20" pos:end="4367:31">(<expr pos:start="4367:21" pos:end="4367:30"><operator pos:start="4367:21" pos:end="4367:21">!</operator><call pos:start="4367:22" pos:end="4367:30"><name pos:start="4367:22" pos:end="4367:27">CODE64</name><argument_list pos:start="4367:28" pos:end="4367:30">(<argument pos:start="4367:29" pos:end="4367:29"><expr pos:start="4367:29" pos:end="4367:29"><name pos:start="4367:29" pos:end="4367:29">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4369:17" pos:end="4369:35"><block_content pos:start="4369:17" pos:end="4369:35">

                <expr_stmt pos:start="4369:17" pos:end="4369:35"><expr pos:start="4369:17" pos:end="4369:34"><name pos:start="4369:17" pos:end="4369:20">tval</name> <operator pos:start="4369:22" pos:end="4369:23">&amp;=</operator> <literal type="number" pos:start="4369:25" pos:end="4369:34">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4371:13" pos:end="4371:38"><expr pos:start="4371:13" pos:end="4371:37"><call pos:start="4371:13" pos:end="4371:37"><name pos:start="4371:13" pos:end="4371:27">gen_movtl_T0_im</name><argument_list pos:start="4371:28" pos:end="4371:37">(<argument pos:start="4371:29" pos:end="4371:36"><expr pos:start="4371:29" pos:end="4371:36"><name pos:start="4371:29" pos:end="4371:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4373:13" pos:end="4373:27"><expr pos:start="4373:13" pos:end="4373:26"><call pos:start="4373:13" pos:end="4373:26"><name pos:start="4373:13" pos:end="4373:23">gen_push_T0</name><argument_list pos:start="4373:24" pos:end="4373:26">(<argument pos:start="4373:25" pos:end="4373:25"><expr pos:start="4373:25" pos:end="4373:25"><name pos:start="4373:25" pos:end="4373:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4375:13" pos:end="4375:29"><expr pos:start="4375:13" pos:end="4375:28"><call pos:start="4375:13" pos:end="4375:28"><name pos:start="4375:13" pos:end="4375:19">gen_jmp</name><argument_list pos:start="4375:20" pos:end="4375:28">(<argument pos:start="4375:21" pos:end="4375:21"><expr pos:start="4375:21" pos:end="4375:21"><name pos:start="4375:21" pos:end="4375:21">s</name></expr></argument>, <argument pos:start="4375:24" pos:end="4375:27"><expr pos:start="4375:24" pos:end="4375:27"><name pos:start="4375:24" pos:end="4375:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4379:9" pos:end="4379:14">break;</break>

    <case pos:start="4381:5" pos:end="4381:14">case <expr pos:start="4381:10" pos:end="4381:13"><literal type="number" pos:start="4381:10" pos:end="4381:13">0x9a</literal></expr>:</case> <comment type="block" pos:start="4381:16" pos:end="4381:29">/* lcall im */</comment>

        <block pos:start="4383:9" pos:end="4405:9">{<block_content pos:start="4385:13" pos:end="4403:39">

            <decl_stmt pos:start="4385:13" pos:end="4385:42"><decl pos:start="4385:13" pos:end="4385:33"><type pos:start="4385:13" pos:end="4385:24"><name pos:start="4385:13" pos:end="4385:20">unsigned</name> <name pos:start="4385:22" pos:end="4385:24">int</name></type> <name pos:start="4385:26" pos:end="4385:33">selector</name></decl>, <decl pos:start="4385:36" pos:end="4385:41"><type ref="prev" pos:start="4385:13" pos:end="4385:24"/><name pos:start="4385:36" pos:end="4385:41">offset</name></decl>;</decl_stmt>



            <if_stmt pos:start="4389:13" pos:end="4391:32"><if pos:start="4389:13" pos:end="4391:32">if <condition pos:start="4389:16" pos:end="4389:26">(<expr pos:start="4389:17" pos:end="4389:25"><call pos:start="4389:17" pos:end="4389:25"><name pos:start="4389:17" pos:end="4389:22">CODE64</name><argument_list pos:start="4389:23" pos:end="4389:25">(<argument pos:start="4389:24" pos:end="4389:24"><expr pos:start="4389:24" pos:end="4389:24"><name pos:start="4389:24" pos:end="4389:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4391:17" pos:end="4391:32"><block_content pos:start="4391:17" pos:end="4391:32">

                <goto pos:start="4391:17" pos:end="4391:32">goto <name pos:start="4391:22" pos:end="4391:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4393:13" pos:end="4393:43"><expr pos:start="4393:13" pos:end="4393:42"><name pos:start="4393:13" pos:end="4393:14">ot</name> <operator pos:start="4393:16" pos:end="4393:16">=</operator> <ternary pos:start="4393:18" pos:end="4393:42"><condition pos:start="4393:18" pos:end="4393:24"><expr pos:start="4393:18" pos:end="4393:22"><name pos:start="4393:18" pos:end="4393:22">dflag</name></expr> ?</condition><then pos:start="4393:26" pos:end="4393:32"> <expr pos:start="4393:26" pos:end="4393:32"><name pos:start="4393:26" pos:end="4393:32">OT_LONG</name></expr> </then><else pos:start="4393:34" pos:end="4393:42">: <expr pos:start="4393:36" pos:end="4393:42"><name pos:start="4393:36" pos:end="4393:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="4395:13" pos:end="4395:37"><expr pos:start="4395:13" pos:end="4395:36"><name pos:start="4395:13" pos:end="4395:18">offset</name> <operator pos:start="4395:20" pos:end="4395:20">=</operator> <call pos:start="4395:22" pos:end="4395:36"><name pos:start="4395:22" pos:end="4395:29">insn_get</name><argument_list pos:start="4395:30" pos:end="4395:36">(<argument pos:start="4395:31" pos:end="4395:31"><expr pos:start="4395:31" pos:end="4395:31"><name pos:start="4395:31" pos:end="4395:31">s</name></expr></argument>, <argument pos:start="4395:34" pos:end="4395:35"><expr pos:start="4395:34" pos:end="4395:35"><name pos:start="4395:34" pos:end="4395:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4397:13" pos:end="4397:44"><expr pos:start="4397:13" pos:end="4397:43"><name pos:start="4397:13" pos:end="4397:20">selector</name> <operator pos:start="4397:22" pos:end="4397:22">=</operator> <call pos:start="4397:24" pos:end="4397:43"><name pos:start="4397:24" pos:end="4397:31">insn_get</name><argument_list pos:start="4397:32" pos:end="4397:43">(<argument pos:start="4397:33" pos:end="4397:33"><expr pos:start="4397:33" pos:end="4397:33"><name pos:start="4397:33" pos:end="4397:33">s</name></expr></argument>, <argument pos:start="4397:36" pos:end="4397:42"><expr pos:start="4397:36" pos:end="4397:42"><name pos:start="4397:36" pos:end="4397:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4401:13" pos:end="4401:40"><expr pos:start="4401:13" pos:end="4401:39"><call pos:start="4401:13" pos:end="4401:39"><name pos:start="4401:13" pos:end="4401:29">gen_op_movl_T0_im</name><argument_list pos:start="4401:30" pos:end="4401:39">(<argument pos:start="4401:31" pos:end="4401:38"><expr pos:start="4401:31" pos:end="4401:38"><name pos:start="4401:31" pos:end="4401:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4403:13" pos:end="4403:39"><expr pos:start="4403:13" pos:end="4403:38"><call pos:start="4403:13" pos:end="4403:38"><name pos:start="4403:13" pos:end="4403:30">gen_op_movl_T1_imu</name><argument_list pos:start="4403:31" pos:end="4403:38">(<argument pos:start="4403:32" pos:end="4403:37"><expr pos:start="4403:32" pos:end="4403:37"><name pos:start="4403:32" pos:end="4403:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="4407:9" pos:end="4407:22">goto <name pos:start="4407:14" pos:end="4407:21">do_lcall</name>;</goto>

    <case pos:start="4409:5" pos:end="4409:14">case <expr pos:start="4409:10" pos:end="4409:13"><literal type="number" pos:start="4409:10" pos:end="4409:13">0xe9</literal></expr>:</case> <comment type="block" pos:start="4409:16" pos:end="4409:27">/* jmp im */</comment>

        <if_stmt pos:start="4411:9" pos:end="4417:49"><if pos:start="4411:9" pos:end="4413:49">if <condition pos:start="4411:12" pos:end="4411:18">(<expr pos:start="4411:13" pos:end="4411:17"><name pos:start="4411:13" pos:end="4411:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="4413:13" pos:end="4413:49"><block_content pos:start="4413:13" pos:end="4413:49">

            <expr_stmt pos:start="4413:13" pos:end="4413:49"><expr pos:start="4413:13" pos:end="4413:48"><name pos:start="4413:13" pos:end="4413:16">tval</name> <operator pos:start="4413:18" pos:end="4413:18">=</operator> <operator pos:start="4413:20" pos:end="4413:20">(</operator><name pos:start="4413:21" pos:end="4413:27">int32_t</name><operator pos:start="4413:28" pos:end="4413:28">)</operator><call pos:start="4413:29" pos:end="4413:48"><name pos:start="4413:29" pos:end="4413:36">insn_get</name><argument_list pos:start="4413:37" pos:end="4413:48">(<argument pos:start="4413:38" pos:end="4413:38"><expr pos:start="4413:38" pos:end="4413:38"><name pos:start="4413:38" pos:end="4413:38">s</name></expr></argument>, <argument pos:start="4413:41" pos:end="4413:47"><expr pos:start="4413:41" pos:end="4413:47"><name pos:start="4413:41" pos:end="4413:47">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4415:9" pos:end="4417:49">else<block type="pseudo" pos:start="4417:13" pos:end="4417:49"><block_content pos:start="4417:13" pos:end="4417:49">

            <expr_stmt pos:start="4417:13" pos:end="4417:49"><expr pos:start="4417:13" pos:end="4417:48"><name pos:start="4417:13" pos:end="4417:16">tval</name> <operator pos:start="4417:18" pos:end="4417:18">=</operator> <operator pos:start="4417:20" pos:end="4417:20">(</operator><name pos:start="4417:21" pos:end="4417:27">int16_t</name><operator pos:start="4417:28" pos:end="4417:28">)</operator><call pos:start="4417:29" pos:end="4417:48"><name pos:start="4417:29" pos:end="4417:36">insn_get</name><argument_list pos:start="4417:37" pos:end="4417:48">(<argument pos:start="4417:38" pos:end="4417:38"><expr pos:start="4417:38" pos:end="4417:38"><name pos:start="4417:38" pos:end="4417:38">s</name></expr></argument>, <argument pos:start="4417:41" pos:end="4417:47"><expr pos:start="4417:41" pos:end="4417:47"><name pos:start="4417:41" pos:end="4417:47">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4419:9" pos:end="4419:35"><expr pos:start="4419:9" pos:end="4419:34"><name pos:start="4419:9" pos:end="4419:12">tval</name> <operator pos:start="4419:14" pos:end="4419:15">+=</operator> <name pos:start="4419:17" pos:end="4419:21"><name pos:start="4419:17" pos:end="4419:17">s</name><operator pos:start="4419:18" pos:end="4419:19">-&gt;</operator><name pos:start="4419:20" pos:end="4419:21">pc</name></name> <operator pos:start="4419:23" pos:end="4419:23">-</operator> <name pos:start="4419:25" pos:end="4419:34"><name pos:start="4419:25" pos:end="4419:25">s</name><operator pos:start="4419:26" pos:end="4419:27">-&gt;</operator><name pos:start="4419:28" pos:end="4419:34">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="4421:9" pos:end="4427:31"><if pos:start="4421:9" pos:end="4423:27">if <condition pos:start="4421:12" pos:end="4421:26">(<expr pos:start="4421:13" pos:end="4421:25"><name pos:start="4421:13" pos:end="4421:20"><name pos:start="4421:13" pos:end="4421:13">s</name><operator pos:start="4421:14" pos:end="4421:15">-&gt;</operator><name pos:start="4421:16" pos:end="4421:20">dflag</name></name> <operator pos:start="4421:22" pos:end="4421:23">==</operator> <literal type="number" pos:start="4421:25" pos:end="4421:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4423:13" pos:end="4423:27"><block_content pos:start="4423:13" pos:end="4423:27">

            <expr_stmt pos:start="4423:13" pos:end="4423:27"><expr pos:start="4423:13" pos:end="4423:26"><name pos:start="4423:13" pos:end="4423:16">tval</name> <operator pos:start="4423:18" pos:end="4423:19">&amp;=</operator> <literal type="number" pos:start="4423:21" pos:end="4423:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="4425:9" pos:end="4427:31">else if<condition pos:start="4425:16" pos:end="4425:27">(<expr pos:start="4425:17" pos:end="4425:26"><operator pos:start="4425:17" pos:end="4425:17">!</operator><call pos:start="4425:18" pos:end="4425:26"><name pos:start="4425:18" pos:end="4425:23">CODE64</name><argument_list pos:start="4425:24" pos:end="4425:26">(<argument pos:start="4425:25" pos:end="4425:25"><expr pos:start="4425:25" pos:end="4425:25"><name pos:start="4425:25" pos:end="4425:25">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4427:13" pos:end="4427:31"><block_content pos:start="4427:13" pos:end="4427:31">

            <expr_stmt pos:start="4427:13" pos:end="4427:31"><expr pos:start="4427:13" pos:end="4427:30"><name pos:start="4427:13" pos:end="4427:16">tval</name> <operator pos:start="4427:18" pos:end="4427:19">&amp;=</operator> <literal type="number" pos:start="4427:21" pos:end="4427:30">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4429:9" pos:end="4429:25"><expr pos:start="4429:9" pos:end="4429:24"><call pos:start="4429:9" pos:end="4429:24"><name pos:start="4429:9" pos:end="4429:15">gen_jmp</name><argument_list pos:start="4429:16" pos:end="4429:24">(<argument pos:start="4429:17" pos:end="4429:17"><expr pos:start="4429:17" pos:end="4429:17"><name pos:start="4429:17" pos:end="4429:17">s</name></expr></argument>, <argument pos:start="4429:20" pos:end="4429:23"><expr pos:start="4429:20" pos:end="4429:23"><name pos:start="4429:20" pos:end="4429:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4431:9" pos:end="4431:14">break;</break>

    <case pos:start="4433:5" pos:end="4433:14">case <expr pos:start="4433:10" pos:end="4433:13"><literal type="number" pos:start="4433:10" pos:end="4433:13">0xea</literal></expr>:</case> <comment type="block" pos:start="4433:16" pos:end="4433:28">/* ljmp im */</comment>

        <block pos:start="4435:9" pos:end="4457:9">{<block_content pos:start="4437:13" pos:end="4455:39">

            <decl_stmt pos:start="4437:13" pos:end="4437:42"><decl pos:start="4437:13" pos:end="4437:33"><type pos:start="4437:13" pos:end="4437:24"><name pos:start="4437:13" pos:end="4437:20">unsigned</name> <name pos:start="4437:22" pos:end="4437:24">int</name></type> <name pos:start="4437:26" pos:end="4437:33">selector</name></decl>, <decl pos:start="4437:36" pos:end="4437:41"><type ref="prev" pos:start="4437:13" pos:end="4437:24"/><name pos:start="4437:36" pos:end="4437:41">offset</name></decl>;</decl_stmt>



            <if_stmt pos:start="4441:13" pos:end="4443:32"><if pos:start="4441:13" pos:end="4443:32">if <condition pos:start="4441:16" pos:end="4441:26">(<expr pos:start="4441:17" pos:end="4441:25"><call pos:start="4441:17" pos:end="4441:25"><name pos:start="4441:17" pos:end="4441:22">CODE64</name><argument_list pos:start="4441:23" pos:end="4441:25">(<argument pos:start="4441:24" pos:end="4441:24"><expr pos:start="4441:24" pos:end="4441:24"><name pos:start="4441:24" pos:end="4441:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4443:17" pos:end="4443:32"><block_content pos:start="4443:17" pos:end="4443:32">

                <goto pos:start="4443:17" pos:end="4443:32">goto <name pos:start="4443:22" pos:end="4443:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4445:13" pos:end="4445:43"><expr pos:start="4445:13" pos:end="4445:42"><name pos:start="4445:13" pos:end="4445:14">ot</name> <operator pos:start="4445:16" pos:end="4445:16">=</operator> <ternary pos:start="4445:18" pos:end="4445:42"><condition pos:start="4445:18" pos:end="4445:24"><expr pos:start="4445:18" pos:end="4445:22"><name pos:start="4445:18" pos:end="4445:22">dflag</name></expr> ?</condition><then pos:start="4445:26" pos:end="4445:32"> <expr pos:start="4445:26" pos:end="4445:32"><name pos:start="4445:26" pos:end="4445:32">OT_LONG</name></expr> </then><else pos:start="4445:34" pos:end="4445:42">: <expr pos:start="4445:36" pos:end="4445:42"><name pos:start="4445:36" pos:end="4445:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="4447:13" pos:end="4447:37"><expr pos:start="4447:13" pos:end="4447:36"><name pos:start="4447:13" pos:end="4447:18">offset</name> <operator pos:start="4447:20" pos:end="4447:20">=</operator> <call pos:start="4447:22" pos:end="4447:36"><name pos:start="4447:22" pos:end="4447:29">insn_get</name><argument_list pos:start="4447:30" pos:end="4447:36">(<argument pos:start="4447:31" pos:end="4447:31"><expr pos:start="4447:31" pos:end="4447:31"><name pos:start="4447:31" pos:end="4447:31">s</name></expr></argument>, <argument pos:start="4447:34" pos:end="4447:35"><expr pos:start="4447:34" pos:end="4447:35"><name pos:start="4447:34" pos:end="4447:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4449:13" pos:end="4449:44"><expr pos:start="4449:13" pos:end="4449:43"><name pos:start="4449:13" pos:end="4449:20">selector</name> <operator pos:start="4449:22" pos:end="4449:22">=</operator> <call pos:start="4449:24" pos:end="4449:43"><name pos:start="4449:24" pos:end="4449:31">insn_get</name><argument_list pos:start="4449:32" pos:end="4449:43">(<argument pos:start="4449:33" pos:end="4449:33"><expr pos:start="4449:33" pos:end="4449:33"><name pos:start="4449:33" pos:end="4449:33">s</name></expr></argument>, <argument pos:start="4449:36" pos:end="4449:42"><expr pos:start="4449:36" pos:end="4449:42"><name pos:start="4449:36" pos:end="4449:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4453:13" pos:end="4453:40"><expr pos:start="4453:13" pos:end="4453:39"><call pos:start="4453:13" pos:end="4453:39"><name pos:start="4453:13" pos:end="4453:29">gen_op_movl_T0_im</name><argument_list pos:start="4453:30" pos:end="4453:39">(<argument pos:start="4453:31" pos:end="4453:38"><expr pos:start="4453:31" pos:end="4453:38"><name pos:start="4453:31" pos:end="4453:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4455:13" pos:end="4455:39"><expr pos:start="4455:13" pos:end="4455:38"><call pos:start="4455:13" pos:end="4455:38"><name pos:start="4455:13" pos:end="4455:30">gen_op_movl_T1_imu</name><argument_list pos:start="4455:31" pos:end="4455:38">(<argument pos:start="4455:32" pos:end="4455:37"><expr pos:start="4455:32" pos:end="4455:37"><name pos:start="4455:32" pos:end="4455:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="4459:9" pos:end="4459:21">goto <name pos:start="4459:14" pos:end="4459:20">do_ljmp</name>;</goto>

    <case pos:start="4461:5" pos:end="4461:14">case <expr pos:start="4461:10" pos:end="4461:13"><literal type="number" pos:start="4461:10" pos:end="4461:13">0xeb</literal></expr>:</case> <comment type="block" pos:start="4461:16" pos:end="4461:27">/* jmp Jb */</comment>

        <expr_stmt pos:start="4463:9" pos:end="4463:44"><expr pos:start="4463:9" pos:end="4463:43"><name pos:start="4463:9" pos:end="4463:12">tval</name> <operator pos:start="4463:14" pos:end="4463:14">=</operator> <operator pos:start="4463:16" pos:end="4463:16">(</operator><name pos:start="4463:17" pos:end="4463:22">int8_t</name><operator pos:start="4463:23" pos:end="4463:23">)</operator><call pos:start="4463:24" pos:end="4463:43"><name pos:start="4463:24" pos:end="4463:31">insn_get</name><argument_list pos:start="4463:32" pos:end="4463:43">(<argument pos:start="4463:33" pos:end="4463:33"><expr pos:start="4463:33" pos:end="4463:33"><name pos:start="4463:33" pos:end="4463:33">s</name></expr></argument>, <argument pos:start="4463:36" pos:end="4463:42"><expr pos:start="4463:36" pos:end="4463:42"><name pos:start="4463:36" pos:end="4463:42">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4465:9" pos:end="4465:35"><expr pos:start="4465:9" pos:end="4465:34"><name pos:start="4465:9" pos:end="4465:12">tval</name> <operator pos:start="4465:14" pos:end="4465:15">+=</operator> <name pos:start="4465:17" pos:end="4465:21"><name pos:start="4465:17" pos:end="4465:17">s</name><operator pos:start="4465:18" pos:end="4465:19">-&gt;</operator><name pos:start="4465:20" pos:end="4465:21">pc</name></name> <operator pos:start="4465:23" pos:end="4465:23">-</operator> <name pos:start="4465:25" pos:end="4465:34"><name pos:start="4465:25" pos:end="4465:25">s</name><operator pos:start="4465:26" pos:end="4465:27">-&gt;</operator><name pos:start="4465:28" pos:end="4465:34">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="4467:9" pos:end="4469:27"><if pos:start="4467:9" pos:end="4469:27">if <condition pos:start="4467:12" pos:end="4467:26">(<expr pos:start="4467:13" pos:end="4467:25"><name pos:start="4467:13" pos:end="4467:20"><name pos:start="4467:13" pos:end="4467:13">s</name><operator pos:start="4467:14" pos:end="4467:15">-&gt;</operator><name pos:start="4467:16" pos:end="4467:20">dflag</name></name> <operator pos:start="4467:22" pos:end="4467:23">==</operator> <literal type="number" pos:start="4467:25" pos:end="4467:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4469:13" pos:end="4469:27"><block_content pos:start="4469:13" pos:end="4469:27">

            <expr_stmt pos:start="4469:13" pos:end="4469:27"><expr pos:start="4469:13" pos:end="4469:26"><name pos:start="4469:13" pos:end="4469:16">tval</name> <operator pos:start="4469:18" pos:end="4469:19">&amp;=</operator> <literal type="number" pos:start="4469:21" pos:end="4469:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4471:9" pos:end="4471:25"><expr pos:start="4471:9" pos:end="4471:24"><call pos:start="4471:9" pos:end="4471:24"><name pos:start="4471:9" pos:end="4471:15">gen_jmp</name><argument_list pos:start="4471:16" pos:end="4471:24">(<argument pos:start="4471:17" pos:end="4471:17"><expr pos:start="4471:17" pos:end="4471:17"><name pos:start="4471:17" pos:end="4471:17">s</name></expr></argument>, <argument pos:start="4471:20" pos:end="4471:23"><expr pos:start="4471:20" pos:end="4471:23"><name pos:start="4471:20" pos:end="4471:23">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4473:9" pos:end="4473:14">break;</break>

    <case pos:start="4475:5" pos:end="4475:23">case <expr pos:start="4475:10" pos:end="4475:22"><literal type="number" pos:start="4475:10" pos:end="4475:13">0x70</literal> <operator pos:start="4475:15" pos:end="4475:17">...</operator> <literal type="number" pos:start="4475:19" pos:end="4475:22">0x7f</literal></expr>:</case> <comment type="block" pos:start="4475:25" pos:end="4475:36">/* jcc Jb */</comment>

        <expr_stmt pos:start="4477:9" pos:end="4477:44"><expr pos:start="4477:9" pos:end="4477:43"><name pos:start="4477:9" pos:end="4477:12">tval</name> <operator pos:start="4477:14" pos:end="4477:14">=</operator> <operator pos:start="4477:16" pos:end="4477:16">(</operator><name pos:start="4477:17" pos:end="4477:22">int8_t</name><operator pos:start="4477:23" pos:end="4477:23">)</operator><call pos:start="4477:24" pos:end="4477:43"><name pos:start="4477:24" pos:end="4477:31">insn_get</name><argument_list pos:start="4477:32" pos:end="4477:43">(<argument pos:start="4477:33" pos:end="4477:33"><expr pos:start="4477:33" pos:end="4477:33"><name pos:start="4477:33" pos:end="4477:33">s</name></expr></argument>, <argument pos:start="4477:36" pos:end="4477:42"><expr pos:start="4477:36" pos:end="4477:42"><name pos:start="4477:36" pos:end="4477:42">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="4479:9" pos:end="4479:20">goto <name pos:start="4479:14" pos:end="4479:19">do_jcc</name>;</goto>

    <case pos:start="4481:5" pos:end="4481:25">case <expr pos:start="4481:10" pos:end="4481:24"><literal type="number" pos:start="4481:10" pos:end="4481:14">0x180</literal> <operator pos:start="4481:16" pos:end="4481:18">...</operator> <literal type="number" pos:start="4481:20" pos:end="4481:24">0x18f</literal></expr>:</case> <comment type="block" pos:start="4481:27" pos:end="4481:38">/* jcc Jv */</comment>

        <if_stmt pos:start="4483:9" pos:end="4491:9"><if pos:start="4483:9" pos:end="4487:9">if <condition pos:start="4483:12" pos:end="4483:18">(<expr pos:start="4483:13" pos:end="4483:17"><name pos:start="4483:13" pos:end="4483:17">dflag</name></expr>)</condition> <block pos:start="4483:20" pos:end="4487:9">{<block_content pos:start="4485:13" pos:end="4485:49">

            <expr_stmt pos:start="4485:13" pos:end="4485:49"><expr pos:start="4485:13" pos:end="4485:48"><name pos:start="4485:13" pos:end="4485:16">tval</name> <operator pos:start="4485:18" pos:end="4485:18">=</operator> <operator pos:start="4485:20" pos:end="4485:20">(</operator><name pos:start="4485:21" pos:end="4485:27">int32_t</name><operator pos:start="4485:28" pos:end="4485:28">)</operator><call pos:start="4485:29" pos:end="4485:48"><name pos:start="4485:29" pos:end="4485:36">insn_get</name><argument_list pos:start="4485:37" pos:end="4485:48">(<argument pos:start="4485:38" pos:end="4485:38"><expr pos:start="4485:38" pos:end="4485:38"><name pos:start="4485:38" pos:end="4485:38">s</name></expr></argument>, <argument pos:start="4485:41" pos:end="4485:47"><expr pos:start="4485:41" pos:end="4485:47"><name pos:start="4485:41" pos:end="4485:47">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4487:11" pos:end="4491:9">else <block pos:start="4487:16" pos:end="4491:9">{<block_content pos:start="4489:13" pos:end="4489:49">

            <expr_stmt pos:start="4489:13" pos:end="4489:49"><expr pos:start="4489:13" pos:end="4489:48"><name pos:start="4489:13" pos:end="4489:16">tval</name> <operator pos:start="4489:18" pos:end="4489:18">=</operator> <operator pos:start="4489:20" pos:end="4489:20">(</operator><name pos:start="4489:21" pos:end="4489:27">int16_t</name><operator pos:start="4489:28" pos:end="4489:28">)</operator><call pos:start="4489:29" pos:end="4489:48"><name pos:start="4489:29" pos:end="4489:36">insn_get</name><argument_list pos:start="4489:37" pos:end="4489:48">(<argument pos:start="4489:38" pos:end="4489:38"><expr pos:start="4489:38" pos:end="4489:38"><name pos:start="4489:38" pos:end="4489:38">s</name></expr></argument>, <argument pos:start="4489:41" pos:end="4489:47"><expr pos:start="4489:41" pos:end="4489:47"><name pos:start="4489:41" pos:end="4489:47">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="4493:5" pos:end="4493:11"><name pos:start="4493:5" pos:end="4493:10">do_jcc</name>:</label>

        <expr_stmt pos:start="4495:9" pos:end="4495:38"><expr pos:start="4495:9" pos:end="4495:37"><name pos:start="4495:9" pos:end="4495:16">next_eip</name> <operator pos:start="4495:18" pos:end="4495:18">=</operator> <name pos:start="4495:20" pos:end="4495:24"><name pos:start="4495:20" pos:end="4495:20">s</name><operator pos:start="4495:21" pos:end="4495:22">-&gt;</operator><name pos:start="4495:23" pos:end="4495:24">pc</name></name> <operator pos:start="4495:26" pos:end="4495:26">-</operator> <name pos:start="4495:28" pos:end="4495:37"><name pos:start="4495:28" pos:end="4495:28">s</name><operator pos:start="4495:29" pos:end="4495:30">-&gt;</operator><name pos:start="4495:31" pos:end="4495:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="4497:9" pos:end="4497:25"><expr pos:start="4497:9" pos:end="4497:24"><name pos:start="4497:9" pos:end="4497:12">tval</name> <operator pos:start="4497:14" pos:end="4497:15">+=</operator> <name pos:start="4497:17" pos:end="4497:24">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="4499:9" pos:end="4501:27"><if pos:start="4499:9" pos:end="4501:27">if <condition pos:start="4499:12" pos:end="4499:26">(<expr pos:start="4499:13" pos:end="4499:25"><name pos:start="4499:13" pos:end="4499:20"><name pos:start="4499:13" pos:end="4499:13">s</name><operator pos:start="4499:14" pos:end="4499:15">-&gt;</operator><name pos:start="4499:16" pos:end="4499:20">dflag</name></name> <operator pos:start="4499:22" pos:end="4499:23">==</operator> <literal type="number" pos:start="4499:25" pos:end="4499:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4501:13" pos:end="4501:27"><block_content pos:start="4501:13" pos:end="4501:27">

            <expr_stmt pos:start="4501:13" pos:end="4501:27"><expr pos:start="4501:13" pos:end="4501:26"><name pos:start="4501:13" pos:end="4501:16">tval</name> <operator pos:start="4501:18" pos:end="4501:19">&amp;=</operator> <literal type="number" pos:start="4501:21" pos:end="4501:26">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4503:9" pos:end="4503:38"><expr pos:start="4503:9" pos:end="4503:37"><call pos:start="4503:9" pos:end="4503:37"><name pos:start="4503:9" pos:end="4503:15">gen_jcc</name><argument_list pos:start="4503:16" pos:end="4503:37">(<argument pos:start="4503:17" pos:end="4503:17"><expr pos:start="4503:17" pos:end="4503:17"><name pos:start="4503:17" pos:end="4503:17">s</name></expr></argument>, <argument pos:start="4503:20" pos:end="4503:20"><expr pos:start="4503:20" pos:end="4503:20"><name pos:start="4503:20" pos:end="4503:20">b</name></expr></argument>, <argument pos:start="4503:23" pos:end="4503:26"><expr pos:start="4503:23" pos:end="4503:26"><name pos:start="4503:23" pos:end="4503:26">tval</name></expr></argument>, <argument pos:start="4503:29" pos:end="4503:36"><expr pos:start="4503:29" pos:end="4503:36"><name pos:start="4503:29" pos:end="4503:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4505:9" pos:end="4505:14">break;</break>



    <case pos:start="4509:5" pos:end="4509:25">case <expr pos:start="4509:10" pos:end="4509:24"><literal type="number" pos:start="4509:10" pos:end="4509:14">0x190</literal> <operator pos:start="4509:16" pos:end="4509:18">...</operator> <literal type="number" pos:start="4509:20" pos:end="4509:24">0x19f</literal></expr>:</case> <comment type="block" pos:start="4509:27" pos:end="4509:40">/* setcc Gv */</comment>

        <expr_stmt pos:start="4511:9" pos:end="4511:55"><expr pos:start="4511:9" pos:end="4511:54"><name pos:start="4511:9" pos:end="4511:13">modrm</name> <operator pos:start="4511:15" pos:end="4511:15">=</operator> <call pos:start="4511:17" pos:end="4511:54"><name pos:start="4511:17" pos:end="4511:29">cpu_ldub_code</name><argument_list pos:start="4511:30" pos:end="4511:54">(<argument pos:start="4511:31" pos:end="4511:44"><expr pos:start="4511:31" pos:end="4511:44"><name pos:start="4511:31" pos:end="4511:44">cpu_single_env</name></expr></argument>, <argument pos:start="4511:47" pos:end="4511:53"><expr pos:start="4511:47" pos:end="4511:53"><name pos:start="4511:47" pos:end="4511:51"><name pos:start="4511:47" pos:end="4511:47">s</name><operator pos:start="4511:48" pos:end="4511:49">-&gt;</operator><name pos:start="4511:50" pos:end="4511:51">pc</name></name><operator pos:start="4511:52" pos:end="4511:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4513:9" pos:end="4513:24"><expr pos:start="4513:9" pos:end="4513:23"><call pos:start="4513:9" pos:end="4513:23"><name pos:start="4513:9" pos:end="4513:17">gen_setcc</name><argument_list pos:start="4513:18" pos:end="4513:23">(<argument pos:start="4513:19" pos:end="4513:19"><expr pos:start="4513:19" pos:end="4513:19"><name pos:start="4513:19" pos:end="4513:19">s</name></expr></argument>, <argument pos:start="4513:22" pos:end="4513:22"><expr pos:start="4513:22" pos:end="4513:22"><name pos:start="4513:22" pos:end="4513:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4515:9" pos:end="4515:54"><expr pos:start="4515:9" pos:end="4515:53"><call pos:start="4515:9" pos:end="4515:53"><name pos:start="4515:9" pos:end="4515:22">gen_ldst_modrm</name><argument_list pos:start="4515:23" pos:end="4515:53">(<argument pos:start="4515:24" pos:end="4515:24"><expr pos:start="4515:24" pos:end="4515:24"><name pos:start="4515:24" pos:end="4515:24">s</name></expr></argument>, <argument pos:start="4515:27" pos:end="4515:31"><expr pos:start="4515:27" pos:end="4515:31"><name pos:start="4515:27" pos:end="4515:31">modrm</name></expr></argument>, <argument pos:start="4515:34" pos:end="4515:40"><expr pos:start="4515:34" pos:end="4515:40"><name pos:start="4515:34" pos:end="4515:40">OT_BYTE</name></expr></argument>, <argument pos:start="4515:43" pos:end="4515:49"><expr pos:start="4515:43" pos:end="4515:49"><name pos:start="4515:43" pos:end="4515:49">OR_TMP0</name></expr></argument>, <argument pos:start="4515:52" pos:end="4515:52"><expr pos:start="4515:52" pos:end="4515:52"><literal type="number" pos:start="4515:52" pos:end="4515:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4517:9" pos:end="4517:14">break;</break>

    <case pos:start="4519:5" pos:end="4519:25">case <expr pos:start="4519:10" pos:end="4519:24"><literal type="number" pos:start="4519:10" pos:end="4519:14">0x140</literal> <operator pos:start="4519:16" pos:end="4519:18">...</operator> <literal type="number" pos:start="4519:20" pos:end="4519:24">0x14f</literal></expr>:</case> <comment type="block" pos:start="4519:27" pos:end="4519:43">/* cmov Gv, Ev */</comment>

        <block pos:start="4521:9" pos:end="4587:9">{<block_content pos:start="4523:13" pos:end="4585:30">

            <decl_stmt pos:start="4523:13" pos:end="4523:19"><decl pos:start="4523:13" pos:end="4523:18"><type pos:start="4523:13" pos:end="4523:15"><name pos:start="4523:13" pos:end="4523:15">int</name></type> <name pos:start="4523:17" pos:end="4523:18">l1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4525:13" pos:end="4525:20"><decl pos:start="4525:13" pos:end="4525:19"><type pos:start="4525:13" pos:end="4525:16"><name pos:start="4525:13" pos:end="4525:16">TCGv</name></type> <name pos:start="4525:18" pos:end="4525:19">t0</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4529:13" pos:end="4529:33"><expr pos:start="4529:13" pos:end="4529:32"><name pos:start="4529:13" pos:end="4529:14">ot</name> <operator pos:start="4529:16" pos:end="4529:16">=</operator> <name pos:start="4529:18" pos:end="4529:22">dflag</name> <operator pos:start="4529:24" pos:end="4529:24">+</operator> <name pos:start="4529:26" pos:end="4529:32">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4531:13" pos:end="4531:59"><expr pos:start="4531:13" pos:end="4531:58"><name pos:start="4531:13" pos:end="4531:17">modrm</name> <operator pos:start="4531:19" pos:end="4531:19">=</operator> <call pos:start="4531:21" pos:end="4531:58"><name pos:start="4531:21" pos:end="4531:33">cpu_ldub_code</name><argument_list pos:start="4531:34" pos:end="4531:58">(<argument pos:start="4531:35" pos:end="4531:48"><expr pos:start="4531:35" pos:end="4531:48"><name pos:start="4531:35" pos:end="4531:48">cpu_single_env</name></expr></argument>, <argument pos:start="4531:51" pos:end="4531:57"><expr pos:start="4531:51" pos:end="4531:57"><name pos:start="4531:51" pos:end="4531:55"><name pos:start="4531:51" pos:end="4531:51">s</name><operator pos:start="4531:52" pos:end="4531:53">-&gt;</operator><name pos:start="4531:54" pos:end="4531:55">pc</name></name><operator pos:start="4531:56" pos:end="4531:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4533:13" pos:end="4533:45"><expr pos:start="4533:13" pos:end="4533:44"><name pos:start="4533:13" pos:end="4533:15">reg</name> <operator pos:start="4533:17" pos:end="4533:17">=</operator> <operator pos:start="4533:19" pos:end="4533:19">(</operator><operator pos:start="4533:20" pos:end="4533:20">(</operator><name pos:start="4533:21" pos:end="4533:25">modrm</name> <operator pos:start="4533:27" pos:end="4533:28">&gt;&gt;</operator> <literal type="number" pos:start="4533:30" pos:end="4533:30">3</literal><operator pos:start="4533:31" pos:end="4533:31">)</operator> <operator pos:start="4533:33" pos:end="4533:33">&amp;</operator> <literal type="number" pos:start="4533:35" pos:end="4533:35">7</literal><operator pos:start="4533:36" pos:end="4533:36">)</operator> <operator pos:start="4533:38" pos:end="4533:38">|</operator> <name pos:start="4533:40" pos:end="4533:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4535:13" pos:end="4535:35"><expr pos:start="4535:13" pos:end="4535:34"><name pos:start="4535:13" pos:end="4535:15">mod</name> <operator pos:start="4535:17" pos:end="4535:17">=</operator> <operator pos:start="4535:19" pos:end="4535:19">(</operator><name pos:start="4535:20" pos:end="4535:24">modrm</name> <operator pos:start="4535:26" pos:end="4535:27">&gt;&gt;</operator> <literal type="number" pos:start="4535:29" pos:end="4535:29">6</literal><operator pos:start="4535:30" pos:end="4535:30">)</operator> <operator pos:start="4535:32" pos:end="4535:32">&amp;</operator> <literal type="number" pos:start="4535:34" pos:end="4535:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4537:13" pos:end="4537:38"><expr pos:start="4537:13" pos:end="4537:37"><name pos:start="4537:13" pos:end="4537:14">t0</name> <operator pos:start="4537:16" pos:end="4537:16">=</operator> <call pos:start="4537:18" pos:end="4537:37"><name pos:start="4537:18" pos:end="4537:35">tcg_temp_local_new</name><argument_list pos:start="4537:36" pos:end="4537:37">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4539:13" pos:end="4554:0"><if pos:start="4539:13" pos:end="4545:13">if <condition pos:start="4539:16" pos:end="4539:25">(<expr pos:start="4539:17" pos:end="4539:24"><name pos:start="4539:17" pos:end="4539:19">mod</name> <operator pos:start="4539:21" pos:end="4539:22">!=</operator> <literal type="number" pos:start="4539:24" pos:end="4539:24">3</literal></expr>)</condition> <block pos:start="4539:27" pos:end="4545:13">{<block_content pos:start="4541:17" pos:end="4543:59">

                <expr_stmt pos:start="4541:17" pos:end="4541:65"><expr pos:start="4541:17" pos:end="4541:64"><call pos:start="4541:17" pos:end="4541:64"><name pos:start="4541:17" pos:end="4541:29">gen_lea_modrm</name><argument_list pos:start="4541:30" pos:end="4541:64">(<argument pos:start="4541:31" pos:end="4541:31"><expr pos:start="4541:31" pos:end="4541:31"><name pos:start="4541:31" pos:end="4541:31">s</name></expr></argument>, <argument pos:start="4541:34" pos:end="4541:38"><expr pos:start="4541:34" pos:end="4541:38"><name pos:start="4541:34" pos:end="4541:38">modrm</name></expr></argument>, <argument pos:start="4541:41" pos:end="4541:49"><expr pos:start="4541:41" pos:end="4541:49"><operator pos:start="4541:41" pos:end="4541:41">&amp;</operator><name pos:start="4541:42" pos:end="4541:49">reg_addr</name></expr></argument>, <argument pos:start="4541:52" pos:end="4541:63"><expr pos:start="4541:52" pos:end="4541:63"><operator pos:start="4541:52" pos:end="4541:52">&amp;</operator><name pos:start="4541:53" pos:end="4541:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4543:17" pos:end="4543:59"><expr pos:start="4543:17" pos:end="4543:58"><call pos:start="4543:17" pos:end="4543:58"><name pos:start="4543:17" pos:end="4543:27">gen_op_ld_v</name><argument_list pos:start="4543:28" pos:end="4543:58">(<argument pos:start="4543:29" pos:end="4543:45"><expr pos:start="4543:29" pos:end="4543:45"><name pos:start="4543:29" pos:end="4543:30">ot</name> <operator pos:start="4543:32" pos:end="4543:32">+</operator> <name pos:start="4543:34" pos:end="4543:45"><name pos:start="4543:34" pos:end="4543:34">s</name><operator pos:start="4543:35" pos:end="4543:36">-&gt;</operator><name pos:start="4543:37" pos:end="4543:45">mem_index</name></name></expr></argument>, <argument pos:start="4543:48" pos:end="4543:49"><expr pos:start="4543:48" pos:end="4543:49"><name pos:start="4543:48" pos:end="4543:49">t0</name></expr></argument>, <argument pos:start="4543:52" pos:end="4543:57"><expr pos:start="4543:52" pos:end="4543:57"><name pos:start="4543:52" pos:end="4543:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4545:15" pos:end="4554:0">else <block pos:start="4545:20" pos:end="4554:0">{<block_content pos:start="4547:17" pos:end="4549:45">

                <expr_stmt pos:start="4547:17" pos:end="4547:44"><expr pos:start="4547:17" pos:end="4547:43"><name pos:start="4547:17" pos:end="4547:18">rm</name> <operator pos:start="4547:20" pos:end="4547:20">=</operator> <operator pos:start="4547:22" pos:end="4547:22">(</operator><name pos:start="4547:23" pos:end="4547:27">modrm</name> <operator pos:start="4547:29" pos:end="4547:29">&amp;</operator> <literal type="number" pos:start="4547:31" pos:end="4547:31">7</literal><operator pos:start="4547:32" pos:end="4547:32">)</operator> <operator pos:start="4547:34" pos:end="4547:34">|</operator> <call pos:start="4547:36" pos:end="4547:43"><name pos:start="4547:36" pos:end="4547:40">REX_B</name><argument_list pos:start="4547:41" pos:end="4547:43">(<argument pos:start="4547:42" pos:end="4547:42"><expr pos:start="4547:42" pos:end="4547:42"><name pos:start="4547:42" pos:end="4547:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4549:17" pos:end="4549:45"><expr pos:start="4549:17" pos:end="4549:44"><call pos:start="4549:17" pos:end="4549:44"><name pos:start="4549:17" pos:end="4549:32">gen_op_mov_v_reg</name><argument_list pos:start="4549:33" pos:end="4549:44">(<argument pos:start="4549:34" pos:end="4549:35"><expr pos:start="4549:34" pos:end="4549:35"><name pos:start="4549:34" pos:end="4549:35">ot</name></expr></argument>, <argument pos:start="4549:38" pos:end="4549:39"><expr pos:start="4549:38" pos:end="4549:39"><name pos:start="4549:38" pos:end="4549:39">t0</name></expr></argument>, <argument pos:start="4549:42" pos:end="4549:43"><expr pos:start="4549:42" pos:end="4549:43"><name pos:start="4549:42" pos:end="4549:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="4553:1" pos:end="4553:20">#<cpp:directive pos:start="4553:2" pos:end="4553:6">ifdef</cpp:directive> <name pos:start="4553:8" pos:end="4553:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="4555:13" pos:end="4583:13"><if pos:start="4555:13" pos:end="4569:13">if <condition pos:start="4555:16" pos:end="4555:30">(<expr pos:start="4555:17" pos:end="4555:29"><name pos:start="4555:17" pos:end="4555:18">ot</name> <operator pos:start="4555:20" pos:end="4555:21">==</operator> <name pos:start="4555:23" pos:end="4555:29">OT_LONG</name></expr>)</condition> <block pos:start="4555:32" pos:end="4569:13">{<block_content pos:start="4559:17" pos:end="4567:64">

                <comment type="block" pos:start="4557:17" pos:end="4557:53">/* XXX: specific Intel behaviour ? */</comment>

                <expr_stmt pos:start="4559:17" pos:end="4559:37"><expr pos:start="4559:17" pos:end="4559:36"><name pos:start="4559:17" pos:end="4559:18">l1</name> <operator pos:start="4559:20" pos:end="4559:20">=</operator> <call pos:start="4559:22" pos:end="4559:36"><name pos:start="4559:22" pos:end="4559:34">gen_new_label</name><argument_list pos:start="4559:35" pos:end="4559:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4561:17" pos:end="4561:49"><expr pos:start="4561:17" pos:end="4561:48"><call pos:start="4561:17" pos:end="4561:48"><name pos:start="4561:17" pos:end="4561:24">gen_jcc1</name><argument_list pos:start="4561:25" pos:end="4561:48">(<argument pos:start="4561:26" pos:end="4561:26"><expr pos:start="4561:26" pos:end="4561:26"><name pos:start="4561:26" pos:end="4561:26">s</name></expr></argument>, <argument pos:start="4561:29" pos:end="4561:36"><expr pos:start="4561:29" pos:end="4561:36"><name pos:start="4561:29" pos:end="4561:36"><name pos:start="4561:29" pos:end="4561:29">s</name><operator pos:start="4561:30" pos:end="4561:31">-&gt;</operator><name pos:start="4561:32" pos:end="4561:36">cc_op</name></name></expr></argument>, <argument pos:start="4561:39" pos:end="4561:43"><expr pos:start="4561:39" pos:end="4561:43"><name pos:start="4561:39" pos:end="4561:39">b</name> <operator pos:start="4561:41" pos:end="4561:41">^</operator> <literal type="number" pos:start="4561:43" pos:end="4561:43">1</literal></expr></argument>, <argument pos:start="4561:46" pos:end="4561:47"><expr pos:start="4561:46" pos:end="4561:47"><name pos:start="4561:46" pos:end="4561:47">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4563:17" pos:end="4563:50"><expr pos:start="4563:17" pos:end="4563:49"><call pos:start="4563:17" pos:end="4563:49"><name pos:start="4563:17" pos:end="4563:30">tcg_gen_mov_tl</name><argument_list pos:start="4563:31" pos:end="4563:49">(<argument pos:start="4563:32" pos:end="4563:44"><expr pos:start="4563:32" pos:end="4563:44"><name pos:start="4563:32" pos:end="4563:44"><name pos:start="4563:32" pos:end="4563:39">cpu_regs</name><index pos:start="4563:40" pos:end="4563:44">[<expr pos:start="4563:41" pos:end="4563:43"><name pos:start="4563:41" pos:end="4563:43">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="4563:47" pos:end="4563:48"><expr pos:start="4563:47" pos:end="4563:48"><name pos:start="4563:47" pos:end="4563:48">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4565:17" pos:end="4565:34"><expr pos:start="4565:17" pos:end="4565:33"><call pos:start="4565:17" pos:end="4565:33"><name pos:start="4565:17" pos:end="4565:29">gen_set_label</name><argument_list pos:start="4565:30" pos:end="4565:33">(<argument pos:start="4565:31" pos:end="4565:32"><expr pos:start="4565:31" pos:end="4565:32"><name pos:start="4565:31" pos:end="4565:32">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4567:17" pos:end="4567:64"><expr pos:start="4567:17" pos:end="4567:63"><call pos:start="4567:17" pos:end="4567:63"><name pos:start="4567:17" pos:end="4567:33">tcg_gen_ext32u_tl</name><argument_list pos:start="4567:34" pos:end="4567:63">(<argument pos:start="4567:35" pos:end="4567:47"><expr pos:start="4567:35" pos:end="4567:47"><name pos:start="4567:35" pos:end="4567:47"><name pos:start="4567:35" pos:end="4567:42">cpu_regs</name><index pos:start="4567:43" pos:end="4567:47">[<expr pos:start="4567:44" pos:end="4567:46"><name pos:start="4567:44" pos:end="4567:46">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="4567:50" pos:end="4567:62"><expr pos:start="4567:50" pos:end="4567:62"><name pos:start="4567:50" pos:end="4567:62"><name pos:start="4567:50" pos:end="4567:57">cpu_regs</name><index pos:start="4567:58" pos:end="4567:62">[<expr pos:start="4567:59" pos:end="4567:61"><name pos:start="4567:59" pos:end="4567:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4569:15" pos:end="4583:13">else

<cpp:endif pos:start="4571:1" pos:end="4571:6">#<cpp:directive pos:start="4571:2" pos:end="4571:6">endif</cpp:directive></cpp:endif>

            <block pos:start="4573:13" pos:end="4583:13">{<block_content pos:start="4575:17" pos:end="4581:34">

                <expr_stmt pos:start="4575:17" pos:end="4575:37"><expr pos:start="4575:17" pos:end="4575:36"><name pos:start="4575:17" pos:end="4575:18">l1</name> <operator pos:start="4575:20" pos:end="4575:20">=</operator> <call pos:start="4575:22" pos:end="4575:36"><name pos:start="4575:22" pos:end="4575:34">gen_new_label</name><argument_list pos:start="4575:35" pos:end="4575:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4577:17" pos:end="4577:49"><expr pos:start="4577:17" pos:end="4577:48"><call pos:start="4577:17" pos:end="4577:48"><name pos:start="4577:17" pos:end="4577:24">gen_jcc1</name><argument_list pos:start="4577:25" pos:end="4577:48">(<argument pos:start="4577:26" pos:end="4577:26"><expr pos:start="4577:26" pos:end="4577:26"><name pos:start="4577:26" pos:end="4577:26">s</name></expr></argument>, <argument pos:start="4577:29" pos:end="4577:36"><expr pos:start="4577:29" pos:end="4577:36"><name pos:start="4577:29" pos:end="4577:36"><name pos:start="4577:29" pos:end="4577:29">s</name><operator pos:start="4577:30" pos:end="4577:31">-&gt;</operator><name pos:start="4577:32" pos:end="4577:36">cc_op</name></name></expr></argument>, <argument pos:start="4577:39" pos:end="4577:43"><expr pos:start="4577:39" pos:end="4577:43"><name pos:start="4577:39" pos:end="4577:39">b</name> <operator pos:start="4577:41" pos:end="4577:41">^</operator> <literal type="number" pos:start="4577:43" pos:end="4577:43">1</literal></expr></argument>, <argument pos:start="4577:46" pos:end="4577:47"><expr pos:start="4577:46" pos:end="4577:47"><name pos:start="4577:46" pos:end="4577:47">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4579:17" pos:end="4579:46"><expr pos:start="4579:17" pos:end="4579:45"><call pos:start="4579:17" pos:end="4579:45"><name pos:start="4579:17" pos:end="4579:32">gen_op_mov_reg_v</name><argument_list pos:start="4579:33" pos:end="4579:45">(<argument pos:start="4579:34" pos:end="4579:35"><expr pos:start="4579:34" pos:end="4579:35"><name pos:start="4579:34" pos:end="4579:35">ot</name></expr></argument>, <argument pos:start="4579:38" pos:end="4579:40"><expr pos:start="4579:38" pos:end="4579:40"><name pos:start="4579:38" pos:end="4579:40">reg</name></expr></argument>, <argument pos:start="4579:43" pos:end="4579:44"><expr pos:start="4579:43" pos:end="4579:44"><name pos:start="4579:43" pos:end="4579:44">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4581:17" pos:end="4581:34"><expr pos:start="4581:17" pos:end="4581:33"><call pos:start="4581:17" pos:end="4581:33"><name pos:start="4581:17" pos:end="4581:29">gen_set_label</name><argument_list pos:start="4581:30" pos:end="4581:33">(<argument pos:start="4581:31" pos:end="4581:32"><expr pos:start="4581:31" pos:end="4581:32"><name pos:start="4581:31" pos:end="4581:32">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="4585:13" pos:end="4585:30"><expr pos:start="4585:13" pos:end="4585:29"><call pos:start="4585:13" pos:end="4585:29"><name pos:start="4585:13" pos:end="4585:25">tcg_temp_free</name><argument_list pos:start="4585:26" pos:end="4585:29">(<argument pos:start="4585:27" pos:end="4585:28"><expr pos:start="4585:27" pos:end="4585:28"><name pos:start="4585:27" pos:end="4585:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4589:9" pos:end="4589:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4593:9" pos:end="4593:34">/************************/</comment>

        <comment type="block" pos:start="4595:9" pos:end="4595:19">/* flags */</comment>

    <case pos:start="4597:5" pos:end="4597:14">case <expr pos:start="4597:10" pos:end="4597:13"><literal type="number" pos:start="4597:10" pos:end="4597:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="4597:16" pos:end="4597:26">/* pushf */</comment>

        <expr_stmt pos:start="4599:9" pos:end="4599:61"><expr pos:start="4599:9" pos:end="4599:60"><call pos:start="4599:9" pos:end="4599:60"><name pos:start="4599:9" pos:end="4599:31">gen_svm_check_intercept</name><argument_list pos:start="4599:32" pos:end="4599:60">(<argument pos:start="4599:33" pos:end="4599:33"><expr pos:start="4599:33" pos:end="4599:33"><name pos:start="4599:33" pos:end="4599:33">s</name></expr></argument>, <argument pos:start="4599:36" pos:end="4599:43"><expr pos:start="4599:36" pos:end="4599:43"><name pos:start="4599:36" pos:end="4599:43">pc_start</name></expr></argument>, <argument pos:start="4599:46" pos:end="4599:59"><expr pos:start="4599:46" pos:end="4599:59"><name pos:start="4599:46" pos:end="4599:59">SVM_EXIT_PUSHF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4601:9" pos:end="4615:9"><if pos:start="4601:9" pos:end="4605:9">if <condition pos:start="4601:12" pos:end="4601:36">(<expr pos:start="4601:13" pos:end="4601:35"><name pos:start="4601:13" pos:end="4601:19"><name pos:start="4601:13" pos:end="4601:13">s</name><operator pos:start="4601:14" pos:end="4601:15">-&gt;</operator><name pos:start="4601:16" pos:end="4601:19">vm86</name></name> <operator pos:start="4601:21" pos:end="4601:22">&amp;&amp;</operator> <name pos:start="4601:24" pos:end="4601:30"><name pos:start="4601:24" pos:end="4601:24">s</name><operator pos:start="4601:25" pos:end="4601:26">-&gt;</operator><name pos:start="4601:27" pos:end="4601:30">iopl</name></name> <operator pos:start="4601:32" pos:end="4601:33">!=</operator> <literal type="number" pos:start="4601:35" pos:end="4601:35">3</literal></expr>)</condition> <block pos:start="4601:38" pos:end="4605:9">{<block_content pos:start="4603:13" pos:end="4603:64">

            <expr_stmt pos:start="4603:13" pos:end="4603:64"><expr pos:start="4603:13" pos:end="4603:63"><call pos:start="4603:13" pos:end="4603:63"><name pos:start="4603:13" pos:end="4603:25">gen_exception</name><argument_list pos:start="4603:26" pos:end="4603:63">(<argument pos:start="4603:27" pos:end="4603:27"><expr pos:start="4603:27" pos:end="4603:27"><name pos:start="4603:27" pos:end="4603:27">s</name></expr></argument>, <argument pos:start="4603:30" pos:end="4603:39"><expr pos:start="4603:30" pos:end="4603:39"><name pos:start="4603:30" pos:end="4603:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4603:42" pos:end="4603:62"><expr pos:start="4603:42" pos:end="4603:62"><name pos:start="4603:42" pos:end="4603:49">pc_start</name> <operator pos:start="4603:51" pos:end="4603:51">-</operator> <name pos:start="4603:53" pos:end="4603:62"><name pos:start="4603:53" pos:end="4603:53">s</name><operator pos:start="4603:54" pos:end="4603:55">-&gt;</operator><name pos:start="4603:56" pos:end="4603:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4605:11" pos:end="4615:9">else <block pos:start="4605:16" pos:end="4615:9">{<block_content pos:start="4607:13" pos:end="4613:27">

            <if_stmt pos:start="4607:13" pos:end="4609:43"><if pos:start="4607:13" pos:end="4609:43">if <condition pos:start="4607:16" pos:end="4607:42">(<expr pos:start="4607:17" pos:end="4607:41"><name pos:start="4607:17" pos:end="4607:24"><name pos:start="4607:17" pos:end="4607:17">s</name><operator pos:start="4607:18" pos:end="4607:19">-&gt;</operator><name pos:start="4607:20" pos:end="4607:24">cc_op</name></name> <operator pos:start="4607:26" pos:end="4607:27">!=</operator> <name pos:start="4607:29" pos:end="4607:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4609:17" pos:end="4609:43"><block_content pos:start="4609:17" pos:end="4609:43">

                <expr_stmt pos:start="4609:17" pos:end="4609:43"><expr pos:start="4609:17" pos:end="4609:42"><call pos:start="4609:17" pos:end="4609:42"><name pos:start="4609:17" pos:end="4609:32">gen_op_set_cc_op</name><argument_list pos:start="4609:33" pos:end="4609:42">(<argument pos:start="4609:34" pos:end="4609:41"><expr pos:start="4609:34" pos:end="4609:41"><name pos:start="4609:34" pos:end="4609:41"><name pos:start="4609:34" pos:end="4609:34">s</name><operator pos:start="4609:35" pos:end="4609:36">-&gt;</operator><name pos:start="4609:37" pos:end="4609:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4611:13" pos:end="4611:54"><expr pos:start="4611:13" pos:end="4611:53"><call pos:start="4611:13" pos:end="4611:53"><name pos:start="4611:13" pos:end="4611:34">gen_helper_read_eflags</name><argument_list pos:start="4611:35" pos:end="4611:53">(<argument pos:start="4611:36" pos:end="4611:43"><expr pos:start="4611:36" pos:end="4611:43"><name pos:start="4611:36" pos:end="4611:43"><name pos:start="4611:36" pos:end="4611:40">cpu_T</name><index pos:start="4611:41" pos:end="4611:43">[<expr pos:start="4611:42" pos:end="4611:42"><literal type="number" pos:start="4611:42" pos:end="4611:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4611:46" pos:end="4611:52"><expr pos:start="4611:46" pos:end="4611:52"><name pos:start="4611:46" pos:end="4611:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4613:13" pos:end="4613:27"><expr pos:start="4613:13" pos:end="4613:26"><call pos:start="4613:13" pos:end="4613:26"><name pos:start="4613:13" pos:end="4613:23">gen_push_T0</name><argument_list pos:start="4613:24" pos:end="4613:26">(<argument pos:start="4613:25" pos:end="4613:25"><expr pos:start="4613:25" pos:end="4613:25"><name pos:start="4613:25" pos:end="4613:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4617:9" pos:end="4617:14">break;</break>

    <case pos:start="4619:5" pos:end="4619:14">case <expr pos:start="4619:10" pos:end="4619:13"><literal type="number" pos:start="4619:10" pos:end="4619:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="4619:16" pos:end="4619:25">/* popf */</comment>

        <expr_stmt pos:start="4621:9" pos:end="4621:60"><expr pos:start="4621:9" pos:end="4621:59"><call pos:start="4621:9" pos:end="4621:59"><name pos:start="4621:9" pos:end="4621:31">gen_svm_check_intercept</name><argument_list pos:start="4621:32" pos:end="4621:59">(<argument pos:start="4621:33" pos:end="4621:33"><expr pos:start="4621:33" pos:end="4621:33"><name pos:start="4621:33" pos:end="4621:33">s</name></expr></argument>, <argument pos:start="4621:36" pos:end="4621:43"><expr pos:start="4621:36" pos:end="4621:43"><name pos:start="4621:36" pos:end="4621:43">pc_start</name></expr></argument>, <argument pos:start="4621:46" pos:end="4621:58"><expr pos:start="4621:46" pos:end="4621:58"><name pos:start="4621:46" pos:end="4621:58">SVM_EXIT_POPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4623:9" pos:end="4731:9"><if pos:start="4623:9" pos:end="4627:9">if <condition pos:start="4623:12" pos:end="4623:36">(<expr pos:start="4623:13" pos:end="4623:35"><name pos:start="4623:13" pos:end="4623:19"><name pos:start="4623:13" pos:end="4623:13">s</name><operator pos:start="4623:14" pos:end="4623:15">-&gt;</operator><name pos:start="4623:16" pos:end="4623:19">vm86</name></name> <operator pos:start="4623:21" pos:end="4623:22">&amp;&amp;</operator> <name pos:start="4623:24" pos:end="4623:30"><name pos:start="4623:24" pos:end="4623:24">s</name><operator pos:start="4623:25" pos:end="4623:26">-&gt;</operator><name pos:start="4623:27" pos:end="4623:30">iopl</name></name> <operator pos:start="4623:32" pos:end="4623:33">!=</operator> <literal type="number" pos:start="4623:35" pos:end="4623:35">3</literal></expr>)</condition> <block pos:start="4623:38" pos:end="4627:9">{<block_content pos:start="4625:13" pos:end="4625:64">

            <expr_stmt pos:start="4625:13" pos:end="4625:64"><expr pos:start="4625:13" pos:end="4625:63"><call pos:start="4625:13" pos:end="4625:63"><name pos:start="4625:13" pos:end="4625:25">gen_exception</name><argument_list pos:start="4625:26" pos:end="4625:63">(<argument pos:start="4625:27" pos:end="4625:27"><expr pos:start="4625:27" pos:end="4625:27"><name pos:start="4625:27" pos:end="4625:27">s</name></expr></argument>, <argument pos:start="4625:30" pos:end="4625:39"><expr pos:start="4625:30" pos:end="4625:39"><name pos:start="4625:30" pos:end="4625:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4625:42" pos:end="4625:62"><expr pos:start="4625:42" pos:end="4625:62"><name pos:start="4625:42" pos:end="4625:49">pc_start</name> <operator pos:start="4625:51" pos:end="4625:51">-</operator> <name pos:start="4625:53" pos:end="4625:62"><name pos:start="4625:53" pos:end="4625:53">s</name><operator pos:start="4625:54" pos:end="4625:55">-&gt;</operator><name pos:start="4625:56" pos:end="4625:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4627:11" pos:end="4731:9">else <block pos:start="4627:16" pos:end="4731:9">{<block_content pos:start="4629:13" pos:end="4729:23">

            <expr_stmt pos:start="4629:13" pos:end="4629:26"><expr pos:start="4629:13" pos:end="4629:25"><call pos:start="4629:13" pos:end="4629:25"><name pos:start="4629:13" pos:end="4629:22">gen_pop_T0</name><argument_list pos:start="4629:23" pos:end="4629:25">(<argument pos:start="4629:24" pos:end="4629:24"><expr pos:start="4629:24" pos:end="4629:24"><name pos:start="4629:24" pos:end="4629:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4631:13" pos:end="4719:13"><if pos:start="4631:13" pos:end="4659:13">if <condition pos:start="4631:16" pos:end="4631:28">(<expr pos:start="4631:17" pos:end="4631:27"><name pos:start="4631:17" pos:end="4631:22"><name pos:start="4631:17" pos:end="4631:17">s</name><operator pos:start="4631:18" pos:end="4631:19">-&gt;</operator><name pos:start="4631:20" pos:end="4631:22">cpl</name></name> <operator pos:start="4631:24" pos:end="4631:25">==</operator> <literal type="number" pos:start="4631:27" pos:end="4631:27">0</literal></expr>)</condition> <block pos:start="4631:30" pos:end="4659:13">{<block_content pos:start="4633:17" pos:end="4657:17">

                <if_stmt pos:start="4633:17" pos:end="4657:17"><if pos:start="4633:17" pos:end="4645:17">if <condition pos:start="4633:20" pos:end="4633:29">(<expr pos:start="4633:21" pos:end="4633:28"><name pos:start="4633:21" pos:end="4633:28"><name pos:start="4633:21" pos:end="4633:21">s</name><operator pos:start="4633:22" pos:end="4633:23">-&gt;</operator><name pos:start="4633:24" pos:end="4633:28">dflag</name></name></expr>)</condition> <block pos:start="4633:31" pos:end="4645:17">{<block_content pos:start="4635:21" pos:end="4643:72">

                    <expr_stmt pos:start="4635:21" pos:end="4643:72"><expr pos:start="4635:21" pos:end="4643:71"><call pos:start="4635:21" pos:end="4643:71"><name pos:start="4635:21" pos:end="4635:43">gen_helper_write_eflags</name><argument_list pos:start="4635:44" pos:end="4643:71">(<argument pos:start="4635:45" pos:end="4635:51"><expr pos:start="4635:45" pos:end="4635:51"><name pos:start="4635:45" pos:end="4635:51">cpu_env</name></expr></argument>, <argument pos:start="4635:54" pos:end="4635:61"><expr pos:start="4635:54" pos:end="4635:61"><name pos:start="4635:54" pos:end="4635:61"><name pos:start="4635:54" pos:end="4635:58">cpu_T</name><index pos:start="4635:59" pos:end="4635:61">[<expr pos:start="4635:60" pos:end="4635:60"><literal type="number" pos:start="4635:60" pos:end="4635:60">0</literal></expr>]</index></name></expr></argument>,

                                            <argument pos:start="4637:45" pos:end="4643:70"><expr pos:start="4637:45" pos:end="4643:70"><call pos:start="4637:45" pos:end="4643:70"><name pos:start="4637:45" pos:end="4637:57">tcg_const_i32</name><argument_list pos:start="4637:58" pos:end="4643:70">(<argument pos:start="4637:59" pos:end="4643:69"><expr pos:start="4637:59" pos:end="4643:69"><operator pos:start="4637:59" pos:end="4637:59">(</operator><name pos:start="4637:60" pos:end="4637:66">TF_MASK</name> <operator pos:start="4637:68" pos:end="4637:68">|</operator> <name pos:start="4637:70" pos:end="4637:76">AC_MASK</name> <operator pos:start="4637:78" pos:end="4637:78">|</operator>

                                                           <name pos:start="4639:60" pos:end="4639:66">ID_MASK</name> <operator pos:start="4639:68" pos:end="4639:68">|</operator> <name pos:start="4639:70" pos:end="4639:76">NT_MASK</name> <operator pos:start="4639:78" pos:end="4639:78">|</operator>

                                                           <name pos:start="4641:60" pos:end="4641:66">IF_MASK</name> <operator pos:start="4641:68" pos:end="4641:68">|</operator>

                                                           <name pos:start="4643:60" pos:end="4643:68">IOPL_MASK</name><operator pos:start="4643:69" pos:end="4643:69">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4645:19" pos:end="4657:17">else <block pos:start="4645:24" pos:end="4657:17">{<block_content pos:start="4647:21" pos:end="4655:69">

                    <expr_stmt pos:start="4647:21" pos:end="4655:69"><expr pos:start="4647:21" pos:end="4655:68"><call pos:start="4647:21" pos:end="4655:68"><name pos:start="4647:21" pos:end="4647:43">gen_helper_write_eflags</name><argument_list pos:start="4647:44" pos:end="4655:68">(<argument pos:start="4647:45" pos:end="4647:51"><expr pos:start="4647:45" pos:end="4647:51"><name pos:start="4647:45" pos:end="4647:51">cpu_env</name></expr></argument>, <argument pos:start="4647:54" pos:end="4647:61"><expr pos:start="4647:54" pos:end="4647:61"><name pos:start="4647:54" pos:end="4647:61"><name pos:start="4647:54" pos:end="4647:58">cpu_T</name><index pos:start="4647:59" pos:end="4647:61">[<expr pos:start="4647:60" pos:end="4647:60"><literal type="number" pos:start="4647:60" pos:end="4647:60">0</literal></expr>]</index></name></expr></argument>,

                                            <argument pos:start="4649:45" pos:end="4655:67"><expr pos:start="4649:45" pos:end="4655:67"><call pos:start="4649:45" pos:end="4655:67"><name pos:start="4649:45" pos:end="4649:57">tcg_const_i32</name><argument_list pos:start="4649:58" pos:end="4655:67">(<argument pos:start="4649:59" pos:end="4655:66"><expr pos:start="4649:59" pos:end="4655:66"><operator pos:start="4649:59" pos:end="4649:59">(</operator><name pos:start="4649:60" pos:end="4649:66">TF_MASK</name> <operator pos:start="4649:68" pos:end="4649:68">|</operator> <name pos:start="4649:70" pos:end="4649:76">AC_MASK</name> <operator pos:start="4649:78" pos:end="4649:78">|</operator>

                                                           <name pos:start="4651:60" pos:end="4651:66">ID_MASK</name> <operator pos:start="4651:68" pos:end="4651:68">|</operator> <name pos:start="4651:70" pos:end="4651:76">NT_MASK</name> <operator pos:start="4651:78" pos:end="4651:78">|</operator>

                                                           <name pos:start="4653:60" pos:end="4653:66">IF_MASK</name> <operator pos:start="4653:68" pos:end="4653:68">|</operator> <name pos:start="4653:70" pos:end="4653:78">IOPL_MASK</name><operator pos:start="4653:79" pos:end="4653:79">)</operator>

                                                          <operator pos:start="4655:59" pos:end="4655:59">&amp;</operator> <literal type="number" pos:start="4655:61" pos:end="4655:66">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="4659:15" pos:end="4719:13">else <block pos:start="4659:20" pos:end="4719:13">{<block_content pos:start="4661:17" pos:end="4717:17">

                <if_stmt pos:start="4661:17" pos:end="4717:17"><if pos:start="4661:17" pos:end="4695:17">if <condition pos:start="4661:20" pos:end="4661:38">(<expr pos:start="4661:21" pos:end="4661:37"><name pos:start="4661:21" pos:end="4661:26"><name pos:start="4661:21" pos:end="4661:21">s</name><operator pos:start="4661:22" pos:end="4661:23">-&gt;</operator><name pos:start="4661:24" pos:end="4661:26">cpl</name></name> <operator pos:start="4661:28" pos:end="4661:29">&lt;=</operator> <name pos:start="4661:31" pos:end="4661:37"><name pos:start="4661:31" pos:end="4661:31">s</name><operator pos:start="4661:32" pos:end="4661:33">-&gt;</operator><name pos:start="4661:34" pos:end="4661:37">iopl</name></name></expr>)</condition> <block pos:start="4661:40" pos:end="4695:17">{<block_content pos:start="4663:21" pos:end="4693:21">

                    <if_stmt pos:start="4663:21" pos:end="4693:21"><if pos:start="4663:21" pos:end="4677:21">if <condition pos:start="4663:24" pos:end="4663:33">(<expr pos:start="4663:25" pos:end="4663:32"><name pos:start="4663:25" pos:end="4663:32"><name pos:start="4663:25" pos:end="4663:25">s</name><operator pos:start="4663:26" pos:end="4663:27">-&gt;</operator><name pos:start="4663:28" pos:end="4663:32">dflag</name></name></expr>)</condition> <block pos:start="4663:35" pos:end="4677:21">{<block_content pos:start="4665:25" pos:end="4675:74">

                        <expr_stmt pos:start="4665:25" pos:end="4675:74"><expr pos:start="4665:25" pos:end="4675:73"><call pos:start="4665:25" pos:end="4675:73"><name pos:start="4665:25" pos:end="4665:47">gen_helper_write_eflags</name><argument_list pos:start="4665:48" pos:end="4675:73">(<argument pos:start="4665:49" pos:end="4665:55"><expr pos:start="4665:49" pos:end="4665:55"><name pos:start="4665:49" pos:end="4665:55">cpu_env</name></expr></argument>, <argument pos:start="4665:58" pos:end="4665:65"><expr pos:start="4665:58" pos:end="4665:65"><name pos:start="4665:58" pos:end="4665:65"><name pos:start="4665:58" pos:end="4665:62">cpu_T</name><index pos:start="4665:63" pos:end="4665:65">[<expr pos:start="4665:64" pos:end="4665:64"><literal type="number" pos:start="4665:64" pos:end="4665:64">0</literal></expr>]</index></name></expr></argument>,

                                                <argument pos:start="4667:49" pos:end="4675:72"><expr pos:start="4667:49" pos:end="4675:72"><call pos:start="4667:49" pos:end="4675:72"><name pos:start="4667:49" pos:end="4667:61">tcg_const_i32</name><argument_list pos:start="4667:62" pos:end="4675:72">(<argument pos:start="4667:63" pos:end="4675:71"><expr pos:start="4667:63" pos:end="4675:71"><operator pos:start="4667:63" pos:end="4667:63">(</operator><name pos:start="4667:64" pos:end="4667:70">TF_MASK</name> <operator pos:start="4667:72" pos:end="4667:72">|</operator>

                                                               <name pos:start="4669:64" pos:end="4669:70">AC_MASK</name> <operator pos:start="4669:72" pos:end="4669:72">|</operator>

                                                               <name pos:start="4671:64" pos:end="4671:70">ID_MASK</name> <operator pos:start="4671:72" pos:end="4671:72">|</operator>

                                                               <name pos:start="4673:64" pos:end="4673:70">NT_MASK</name> <operator pos:start="4673:72" pos:end="4673:72">|</operator>

                                                               <name pos:start="4675:64" pos:end="4675:70">IF_MASK</name><operator pos:start="4675:71" pos:end="4675:71">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4677:23" pos:end="4693:21">else <block pos:start="4677:28" pos:end="4693:21">{<block_content pos:start="4679:25" pos:end="4691:73">

                        <expr_stmt pos:start="4679:25" pos:end="4691:73"><expr pos:start="4679:25" pos:end="4691:72"><call pos:start="4679:25" pos:end="4691:72"><name pos:start="4679:25" pos:end="4679:47">gen_helper_write_eflags</name><argument_list pos:start="4679:48" pos:end="4691:72">(<argument pos:start="4679:49" pos:end="4679:55"><expr pos:start="4679:49" pos:end="4679:55"><name pos:start="4679:49" pos:end="4679:55">cpu_env</name></expr></argument>, <argument pos:start="4679:58" pos:end="4679:65"><expr pos:start="4679:58" pos:end="4679:65"><name pos:start="4679:58" pos:end="4679:65"><name pos:start="4679:58" pos:end="4679:62">cpu_T</name><index pos:start="4679:63" pos:end="4679:65">[<expr pos:start="4679:64" pos:end="4679:64"><literal type="number" pos:start="4679:64" pos:end="4679:64">0</literal></expr>]</index></name></expr></argument>,

                                                <argument pos:start="4681:49" pos:end="4691:71"><expr pos:start="4681:49" pos:end="4691:71"><call pos:start="4681:49" pos:end="4691:71"><name pos:start="4681:49" pos:end="4681:61">tcg_const_i32</name><argument_list pos:start="4681:62" pos:end="4691:71">(<argument pos:start="4681:63" pos:end="4691:70"><expr pos:start="4681:63" pos:end="4691:70"><operator pos:start="4681:63" pos:end="4681:63">(</operator><name pos:start="4681:64" pos:end="4681:70">TF_MASK</name> <operator pos:start="4681:72" pos:end="4681:72">|</operator>

                                                               <name pos:start="4683:64" pos:end="4683:70">AC_MASK</name> <operator pos:start="4683:72" pos:end="4683:72">|</operator>

                                                               <name pos:start="4685:64" pos:end="4685:70">ID_MASK</name> <operator pos:start="4685:72" pos:end="4685:72">|</operator>

                                                               <name pos:start="4687:64" pos:end="4687:70">NT_MASK</name> <operator pos:start="4687:72" pos:end="4687:72">|</operator>

                                                               <name pos:start="4689:64" pos:end="4689:70">IF_MASK</name><operator pos:start="4689:71" pos:end="4689:71">)</operator>

                                                              <operator pos:start="4691:63" pos:end="4691:63">&amp;</operator> <literal type="number" pos:start="4691:65" pos:end="4691:70">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="4695:19" pos:end="4717:17">else <block pos:start="4695:24" pos:end="4717:17">{<block_content pos:start="4697:21" pos:end="4715:21">

                    <if_stmt pos:start="4697:21" pos:end="4715:21"><if pos:start="4697:21" pos:end="4705:21">if <condition pos:start="4697:24" pos:end="4697:33">(<expr pos:start="4697:25" pos:end="4697:32"><name pos:start="4697:25" pos:end="4697:32"><name pos:start="4697:25" pos:end="4697:25">s</name><operator pos:start="4697:26" pos:end="4697:27">-&gt;</operator><name pos:start="4697:28" pos:end="4697:32">dflag</name></name></expr>)</condition> <block pos:start="4697:35" pos:end="4705:21">{<block_content pos:start="4699:25" pos:end="4703:79">

                        <expr_stmt pos:start="4699:25" pos:end="4703:79"><expr pos:start="4699:25" pos:end="4703:78"><call pos:start="4699:25" pos:end="4703:78"><name pos:start="4699:25" pos:end="4699:47">gen_helper_write_eflags</name><argument_list pos:start="4699:48" pos:end="4703:78">(<argument pos:start="4699:49" pos:end="4699:55"><expr pos:start="4699:49" pos:end="4699:55"><name pos:start="4699:49" pos:end="4699:55">cpu_env</name></expr></argument>, <argument pos:start="4699:58" pos:end="4699:65"><expr pos:start="4699:58" pos:end="4699:65"><name pos:start="4699:58" pos:end="4699:65"><name pos:start="4699:58" pos:end="4699:62">cpu_T</name><index pos:start="4699:63" pos:end="4699:65">[<expr pos:start="4699:64" pos:end="4699:64"><literal type="number" pos:start="4699:64" pos:end="4699:64">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="4701:44" pos:end="4703:77"><expr pos:start="4701:44" pos:end="4703:77"><call pos:start="4701:44" pos:end="4703:77"><name pos:start="4701:44" pos:end="4701:56">tcg_const_i32</name><argument_list pos:start="4701:57" pos:end="4703:77">(<argument pos:start="4701:58" pos:end="4703:76"><expr pos:start="4701:58" pos:end="4703:76"><operator pos:start="4701:58" pos:end="4701:58">(</operator><name pos:start="4701:59" pos:end="4701:65">TF_MASK</name> <operator pos:start="4701:67" pos:end="4701:67">|</operator> <name pos:start="4701:69" pos:end="4701:75">AC_MASK</name> <operator pos:start="4701:77" pos:end="4701:77">|</operator>

                                                          <name pos:start="4703:59" pos:end="4703:65">ID_MASK</name> <operator pos:start="4703:67" pos:end="4703:67">|</operator> <name pos:start="4703:69" pos:end="4703:75">NT_MASK</name><operator pos:start="4703:76" pos:end="4703:76">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4705:23" pos:end="4715:21">else <block pos:start="4705:28" pos:end="4715:21">{<block_content pos:start="4707:25" pos:end="4713:68">

                        <expr_stmt pos:start="4707:25" pos:end="4713:68"><expr pos:start="4707:25" pos:end="4713:67"><call pos:start="4707:25" pos:end="4713:67"><name pos:start="4707:25" pos:end="4707:47">gen_helper_write_eflags</name><argument_list pos:start="4707:48" pos:end="4713:67">(<argument pos:start="4707:49" pos:end="4707:55"><expr pos:start="4707:49" pos:end="4707:55"><name pos:start="4707:49" pos:end="4707:55">cpu_env</name></expr></argument>, <argument pos:start="4707:58" pos:end="4707:65"><expr pos:start="4707:58" pos:end="4707:65"><name pos:start="4707:58" pos:end="4707:65"><name pos:start="4707:58" pos:end="4707:62">cpu_T</name><index pos:start="4707:63" pos:end="4707:65">[<expr pos:start="4707:64" pos:end="4707:64"><literal type="number" pos:start="4707:64" pos:end="4707:64">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="4709:44" pos:end="4713:66"><expr pos:start="4709:44" pos:end="4713:66"><call pos:start="4709:44" pos:end="4713:66"><name pos:start="4709:44" pos:end="4709:56">tcg_const_i32</name><argument_list pos:start="4709:57" pos:end="4713:66">(<argument pos:start="4709:58" pos:end="4713:65"><expr pos:start="4709:58" pos:end="4713:65"><operator pos:start="4709:58" pos:end="4709:58">(</operator><name pos:start="4709:59" pos:end="4709:65">TF_MASK</name> <operator pos:start="4709:67" pos:end="4709:67">|</operator> <name pos:start="4709:69" pos:end="4709:75">AC_MASK</name> <operator pos:start="4709:77" pos:end="4709:77">|</operator>

                                                          <name pos:start="4711:59" pos:end="4711:65">ID_MASK</name> <operator pos:start="4711:67" pos:end="4711:67">|</operator> <name pos:start="4711:69" pos:end="4711:75">NT_MASK</name><operator pos:start="4711:76" pos:end="4711:76">)</operator>

                                                         <operator pos:start="4713:58" pos:end="4713:58">&amp;</operator> <literal type="number" pos:start="4713:60" pos:end="4713:65">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="4721:13" pos:end="4721:30"><expr pos:start="4721:13" pos:end="4721:29"><call pos:start="4721:13" pos:end="4721:29"><name pos:start="4721:13" pos:end="4721:26">gen_pop_update</name><argument_list pos:start="4721:27" pos:end="4721:29">(<argument pos:start="4721:28" pos:end="4721:28"><expr pos:start="4721:28" pos:end="4721:28"><name pos:start="4721:28" pos:end="4721:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4723:13" pos:end="4723:36"><expr pos:start="4723:13" pos:end="4723:35"><name pos:start="4723:13" pos:end="4723:20"><name pos:start="4723:13" pos:end="4723:13">s</name><operator pos:start="4723:14" pos:end="4723:15">-&gt;</operator><name pos:start="4723:16" pos:end="4723:20">cc_op</name></name> <operator pos:start="4723:22" pos:end="4723:22">=</operator> <name pos:start="4723:24" pos:end="4723:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <comment type="block" pos:start="4725:13" pos:end="4725:62">/* abort translation because TF flag may change */</comment>

            <expr_stmt pos:start="4727:13" pos:end="4727:43"><expr pos:start="4727:13" pos:end="4727:42"><call pos:start="4727:13" pos:end="4727:42"><name pos:start="4727:13" pos:end="4727:22">gen_jmp_im</name><argument_list pos:start="4727:23" pos:end="4727:42">(<argument pos:start="4727:24" pos:end="4727:41"><expr pos:start="4727:24" pos:end="4727:41"><name pos:start="4727:24" pos:end="4727:28"><name pos:start="4727:24" pos:end="4727:24">s</name><operator pos:start="4727:25" pos:end="4727:26">-&gt;</operator><name pos:start="4727:27" pos:end="4727:28">pc</name></name> <operator pos:start="4727:30" pos:end="4727:30">-</operator> <name pos:start="4727:32" pos:end="4727:41"><name pos:start="4727:32" pos:end="4727:32">s</name><operator pos:start="4727:33" pos:end="4727:34">-&gt;</operator><name pos:start="4727:35" pos:end="4727:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4729:13" pos:end="4729:23"><expr pos:start="4729:13" pos:end="4729:22"><call pos:start="4729:13" pos:end="4729:22"><name pos:start="4729:13" pos:end="4729:19">gen_eob</name><argument_list pos:start="4729:20" pos:end="4729:22">(<argument pos:start="4729:21" pos:end="4729:21"><expr pos:start="4729:21" pos:end="4729:21"><name pos:start="4729:21" pos:end="4729:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4733:9" pos:end="4733:14">break;</break>

    <case pos:start="4735:5" pos:end="4735:14">case <expr pos:start="4735:10" pos:end="4735:13"><literal type="number" pos:start="4735:10" pos:end="4735:13">0x9e</literal></expr>:</case> <comment type="block" pos:start="4735:16" pos:end="4735:25">/* sahf */</comment>

        <if_stmt pos:start="4737:9" pos:end="4739:28"><if pos:start="4737:9" pos:end="4739:28">if <condition pos:start="4737:12" pos:end="4737:72">(<expr pos:start="4737:13" pos:end="4737:71"><call pos:start="4737:13" pos:end="4737:21"><name pos:start="4737:13" pos:end="4737:18">CODE64</name><argument_list pos:start="4737:19" pos:end="4737:21">(<argument pos:start="4737:20" pos:end="4737:20"><expr pos:start="4737:20" pos:end="4737:20"><name pos:start="4737:20" pos:end="4737:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4737:23" pos:end="4737:24">&amp;&amp;</operator> <operator pos:start="4737:26" pos:end="4737:26">!</operator><operator pos:start="4737:27" pos:end="4737:27">(</operator><name pos:start="4737:28" pos:end="4737:49"><name pos:start="4737:28" pos:end="4737:28">s</name><operator pos:start="4737:29" pos:end="4737:30">-&gt;</operator><name pos:start="4737:31" pos:end="4737:49">cpuid_ext3_features</name></name> <operator pos:start="4737:51" pos:end="4737:51">&amp;</operator> <name pos:start="4737:53" pos:end="4737:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="4737:71" pos:end="4737:71">)</operator></expr>)</condition><block type="pseudo" pos:start="4739:13" pos:end="4739:28"><block_content pos:start="4739:13" pos:end="4739:28">

            <goto pos:start="4739:13" pos:end="4739:28">goto <name pos:start="4739:18" pos:end="4739:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4741:9" pos:end="4741:44"><expr pos:start="4741:9" pos:end="4741:43"><call pos:start="4741:9" pos:end="4741:43"><name pos:start="4741:9" pos:end="4741:25">gen_op_mov_TN_reg</name><argument_list pos:start="4741:26" pos:end="4741:43">(<argument pos:start="4741:27" pos:end="4741:33"><expr pos:start="4741:27" pos:end="4741:33"><name pos:start="4741:27" pos:end="4741:33">OT_BYTE</name></expr></argument>, <argument pos:start="4741:36" pos:end="4741:36"><expr pos:start="4741:36" pos:end="4741:36"><literal type="number" pos:start="4741:36" pos:end="4741:36">0</literal></expr></argument>, <argument pos:start="4741:39" pos:end="4741:42"><expr pos:start="4741:39" pos:end="4741:42"><name pos:start="4741:39" pos:end="4741:42">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4743:9" pos:end="4745:39"><if pos:start="4743:9" pos:end="4745:39">if <condition pos:start="4743:12" pos:end="4743:38">(<expr pos:start="4743:13" pos:end="4743:37"><name pos:start="4743:13" pos:end="4743:20"><name pos:start="4743:13" pos:end="4743:13">s</name><operator pos:start="4743:14" pos:end="4743:15">-&gt;</operator><name pos:start="4743:16" pos:end="4743:20">cc_op</name></name> <operator pos:start="4743:22" pos:end="4743:23">!=</operator> <name pos:start="4743:25" pos:end="4743:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4745:13" pos:end="4745:39"><block_content pos:start="4745:13" pos:end="4745:39">

            <expr_stmt pos:start="4745:13" pos:end="4745:39"><expr pos:start="4745:13" pos:end="4745:38"><call pos:start="4745:13" pos:end="4745:38"><name pos:start="4745:13" pos:end="4745:28">gen_op_set_cc_op</name><argument_list pos:start="4745:29" pos:end="4745:38">(<argument pos:start="4745:30" pos:end="4745:37"><expr pos:start="4745:30" pos:end="4745:37"><name pos:start="4745:30" pos:end="4745:37"><name pos:start="4745:30" pos:end="4745:30">s</name><operator pos:start="4745:31" pos:end="4745:32">-&gt;</operator><name pos:start="4745:33" pos:end="4745:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4747:9" pos:end="4747:39"><expr pos:start="4747:9" pos:end="4747:38"><call pos:start="4747:9" pos:end="4747:38"><name pos:start="4747:9" pos:end="4747:26">gen_compute_eflags</name><argument_list pos:start="4747:27" pos:end="4747:38">(<argument pos:start="4747:28" pos:end="4747:37"><expr pos:start="4747:28" pos:end="4747:37"><name pos:start="4747:28" pos:end="4747:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4749:9" pos:end="4749:54"><expr pos:start="4749:9" pos:end="4749:53"><call pos:start="4749:9" pos:end="4749:53"><name pos:start="4749:9" pos:end="4749:23">tcg_gen_andi_tl</name><argument_list pos:start="4749:24" pos:end="4749:53">(<argument pos:start="4749:25" pos:end="4749:34"><expr pos:start="4749:25" pos:end="4749:34"><name pos:start="4749:25" pos:end="4749:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4749:37" pos:end="4749:46"><expr pos:start="4749:37" pos:end="4749:46"><name pos:start="4749:37" pos:end="4749:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4749:49" pos:end="4749:52"><expr pos:start="4749:49" pos:end="4749:52"><name pos:start="4749:49" pos:end="4749:52">CC_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4751:9" pos:end="4751:78"><expr pos:start="4751:9" pos:end="4751:77"><call pos:start="4751:9" pos:end="4751:77"><name pos:start="4751:9" pos:end="4751:23">tcg_gen_andi_tl</name><argument_list pos:start="4751:24" pos:end="4751:77">(<argument pos:start="4751:25" pos:end="4751:32"><expr pos:start="4751:25" pos:end="4751:32"><name pos:start="4751:25" pos:end="4751:32"><name pos:start="4751:25" pos:end="4751:29">cpu_T</name><index pos:start="4751:30" pos:end="4751:32">[<expr pos:start="4751:31" pos:end="4751:31"><literal type="number" pos:start="4751:31" pos:end="4751:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4751:35" pos:end="4751:42"><expr pos:start="4751:35" pos:end="4751:42"><name pos:start="4751:35" pos:end="4751:42"><name pos:start="4751:35" pos:end="4751:39">cpu_T</name><index pos:start="4751:40" pos:end="4751:42">[<expr pos:start="4751:41" pos:end="4751:41"><literal type="number" pos:start="4751:41" pos:end="4751:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4751:45" pos:end="4751:76"><expr pos:start="4751:45" pos:end="4751:76"><name pos:start="4751:45" pos:end="4751:48">CC_S</name> <operator pos:start="4751:50" pos:end="4751:50">|</operator> <name pos:start="4751:52" pos:end="4751:55">CC_Z</name> <operator pos:start="4751:57" pos:end="4751:57">|</operator> <name pos:start="4751:59" pos:end="4751:62">CC_A</name> <operator pos:start="4751:64" pos:end="4751:64">|</operator> <name pos:start="4751:66" pos:end="4751:69">CC_P</name> <operator pos:start="4751:71" pos:end="4751:71">|</operator> <name pos:start="4751:73" pos:end="4751:76">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4753:9" pos:end="4753:56"><expr pos:start="4753:9" pos:end="4753:55"><call pos:start="4753:9" pos:end="4753:55"><name pos:start="4753:9" pos:end="4753:21">tcg_gen_or_tl</name><argument_list pos:start="4753:22" pos:end="4753:55">(<argument pos:start="4753:23" pos:end="4753:32"><expr pos:start="4753:23" pos:end="4753:32"><name pos:start="4753:23" pos:end="4753:32">cpu_cc_src</name></expr></argument>, <argument pos:start="4753:35" pos:end="4753:44"><expr pos:start="4753:35" pos:end="4753:44"><name pos:start="4753:35" pos:end="4753:44">cpu_cc_src</name></expr></argument>, <argument pos:start="4753:47" pos:end="4753:54"><expr pos:start="4753:47" pos:end="4753:54"><name pos:start="4753:47" pos:end="4753:54"><name pos:start="4753:47" pos:end="4753:51">cpu_T</name><index pos:start="4753:52" pos:end="4753:54">[<expr pos:start="4753:53" pos:end="4753:53"><literal type="number" pos:start="4753:53" pos:end="4753:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4755:9" pos:end="4755:32"><expr pos:start="4755:9" pos:end="4755:31"><name pos:start="4755:9" pos:end="4755:16"><name pos:start="4755:9" pos:end="4755:9">s</name><operator pos:start="4755:10" pos:end="4755:11">-&gt;</operator><name pos:start="4755:12" pos:end="4755:16">cc_op</name></name> <operator pos:start="4755:18" pos:end="4755:18">=</operator> <name pos:start="4755:20" pos:end="4755:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4757:9" pos:end="4757:14">break;</break>

    <case pos:start="4759:5" pos:end="4759:14">case <expr pos:start="4759:10" pos:end="4759:13"><literal type="number" pos:start="4759:10" pos:end="4759:13">0x9f</literal></expr>:</case> <comment type="block" pos:start="4759:16" pos:end="4759:25">/* lahf */</comment>

        <if_stmt pos:start="4761:9" pos:end="4763:28"><if pos:start="4761:9" pos:end="4763:28">if <condition pos:start="4761:12" pos:end="4761:72">(<expr pos:start="4761:13" pos:end="4761:71"><call pos:start="4761:13" pos:end="4761:21"><name pos:start="4761:13" pos:end="4761:18">CODE64</name><argument_list pos:start="4761:19" pos:end="4761:21">(<argument pos:start="4761:20" pos:end="4761:20"><expr pos:start="4761:20" pos:end="4761:20"><name pos:start="4761:20" pos:end="4761:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="4761:23" pos:end="4761:24">&amp;&amp;</operator> <operator pos:start="4761:26" pos:end="4761:26">!</operator><operator pos:start="4761:27" pos:end="4761:27">(</operator><name pos:start="4761:28" pos:end="4761:49"><name pos:start="4761:28" pos:end="4761:28">s</name><operator pos:start="4761:29" pos:end="4761:30">-&gt;</operator><name pos:start="4761:31" pos:end="4761:49">cpuid_ext3_features</name></name> <operator pos:start="4761:51" pos:end="4761:51">&amp;</operator> <name pos:start="4761:53" pos:end="4761:70">CPUID_EXT3_LAHF_LM</name><operator pos:start="4761:71" pos:end="4761:71">)</operator></expr>)</condition><block type="pseudo" pos:start="4763:13" pos:end="4763:28"><block_content pos:start="4763:13" pos:end="4763:28">

            <goto pos:start="4763:13" pos:end="4763:28">goto <name pos:start="4763:18" pos:end="4763:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="4765:9" pos:end="4767:39"><if pos:start="4765:9" pos:end="4767:39">if <condition pos:start="4765:12" pos:end="4765:38">(<expr pos:start="4765:13" pos:end="4765:37"><name pos:start="4765:13" pos:end="4765:20"><name pos:start="4765:13" pos:end="4765:13">s</name><operator pos:start="4765:14" pos:end="4765:15">-&gt;</operator><name pos:start="4765:16" pos:end="4765:20">cc_op</name></name> <operator pos:start="4765:22" pos:end="4765:23">!=</operator> <name pos:start="4765:25" pos:end="4765:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4767:13" pos:end="4767:39"><block_content pos:start="4767:13" pos:end="4767:39">

            <expr_stmt pos:start="4767:13" pos:end="4767:39"><expr pos:start="4767:13" pos:end="4767:38"><call pos:start="4767:13" pos:end="4767:38"><name pos:start="4767:13" pos:end="4767:28">gen_op_set_cc_op</name><argument_list pos:start="4767:29" pos:end="4767:38">(<argument pos:start="4767:30" pos:end="4767:37"><expr pos:start="4767:30" pos:end="4767:37"><name pos:start="4767:30" pos:end="4767:37"><name pos:start="4767:30" pos:end="4767:30">s</name><operator pos:start="4767:31" pos:end="4767:32">-&gt;</operator><name pos:start="4767:33" pos:end="4767:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4769:9" pos:end="4769:37"><expr pos:start="4769:9" pos:end="4769:36"><call pos:start="4769:9" pos:end="4769:36"><name pos:start="4769:9" pos:end="4769:26">gen_compute_eflags</name><argument_list pos:start="4769:27" pos:end="4769:36">(<argument pos:start="4769:28" pos:end="4769:35"><expr pos:start="4769:28" pos:end="4769:35"><name pos:start="4769:28" pos:end="4769:35"><name pos:start="4769:28" pos:end="4769:32">cpu_T</name><index pos:start="4769:33" pos:end="4769:35">[<expr pos:start="4769:34" pos:end="4769:34"><literal type="number" pos:start="4769:34" pos:end="4769:34">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="4771:9" pos:end="4771:71">/* Note: gen_compute_eflags() only gives the condition codes */</comment>

        <expr_stmt pos:start="4773:9" pos:end="4773:49"><expr pos:start="4773:9" pos:end="4773:48"><call pos:start="4773:9" pos:end="4773:48"><name pos:start="4773:9" pos:end="4773:22">tcg_gen_ori_tl</name><argument_list pos:start="4773:23" pos:end="4773:48">(<argument pos:start="4773:24" pos:end="4773:31"><expr pos:start="4773:24" pos:end="4773:31"><name pos:start="4773:24" pos:end="4773:31"><name pos:start="4773:24" pos:end="4773:28">cpu_T</name><index pos:start="4773:29" pos:end="4773:31">[<expr pos:start="4773:30" pos:end="4773:30"><literal type="number" pos:start="4773:30" pos:end="4773:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4773:34" pos:end="4773:41"><expr pos:start="4773:34" pos:end="4773:41"><name pos:start="4773:34" pos:end="4773:41"><name pos:start="4773:34" pos:end="4773:38">cpu_T</name><index pos:start="4773:39" pos:end="4773:41">[<expr pos:start="4773:40" pos:end="4773:40"><literal type="number" pos:start="4773:40" pos:end="4773:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4773:44" pos:end="4773:47"><expr pos:start="4773:44" pos:end="4773:47"><literal type="number" pos:start="4773:44" pos:end="4773:47">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4775:9" pos:end="4775:41"><expr pos:start="4775:9" pos:end="4775:40"><call pos:start="4775:9" pos:end="4775:40"><name pos:start="4775:9" pos:end="4775:25">gen_op_mov_reg_T0</name><argument_list pos:start="4775:26" pos:end="4775:40">(<argument pos:start="4775:27" pos:end="4775:33"><expr pos:start="4775:27" pos:end="4775:33"><name pos:start="4775:27" pos:end="4775:33">OT_BYTE</name></expr></argument>, <argument pos:start="4775:36" pos:end="4775:39"><expr pos:start="4775:36" pos:end="4775:39"><name pos:start="4775:36" pos:end="4775:39">R_AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4777:9" pos:end="4777:14">break;</break>

    <case pos:start="4779:5" pos:end="4779:14">case <expr pos:start="4779:10" pos:end="4779:13"><literal type="number" pos:start="4779:10" pos:end="4779:13">0xf5</literal></expr>:</case> <comment type="block" pos:start="4779:16" pos:end="4779:24">/* cmc */</comment>

        <if_stmt pos:start="4781:9" pos:end="4783:39"><if pos:start="4781:9" pos:end="4783:39">if <condition pos:start="4781:12" pos:end="4781:38">(<expr pos:start="4781:13" pos:end="4781:37"><name pos:start="4781:13" pos:end="4781:20"><name pos:start="4781:13" pos:end="4781:13">s</name><operator pos:start="4781:14" pos:end="4781:15">-&gt;</operator><name pos:start="4781:16" pos:end="4781:20">cc_op</name></name> <operator pos:start="4781:22" pos:end="4781:23">!=</operator> <name pos:start="4781:25" pos:end="4781:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4783:13" pos:end="4783:39"><block_content pos:start="4783:13" pos:end="4783:39">

            <expr_stmt pos:start="4783:13" pos:end="4783:39"><expr pos:start="4783:13" pos:end="4783:38"><call pos:start="4783:13" pos:end="4783:38"><name pos:start="4783:13" pos:end="4783:28">gen_op_set_cc_op</name><argument_list pos:start="4783:29" pos:end="4783:38">(<argument pos:start="4783:30" pos:end="4783:37"><expr pos:start="4783:30" pos:end="4783:37"><name pos:start="4783:30" pos:end="4783:37"><name pos:start="4783:30" pos:end="4783:30">s</name><operator pos:start="4783:31" pos:end="4783:32">-&gt;</operator><name pos:start="4783:33" pos:end="4783:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4785:9" pos:end="4785:39"><expr pos:start="4785:9" pos:end="4785:38"><call pos:start="4785:9" pos:end="4785:38"><name pos:start="4785:9" pos:end="4785:26">gen_compute_eflags</name><argument_list pos:start="4785:27" pos:end="4785:38">(<argument pos:start="4785:28" pos:end="4785:37"><expr pos:start="4785:28" pos:end="4785:37"><name pos:start="4785:28" pos:end="4785:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4787:9" pos:end="4787:54"><expr pos:start="4787:9" pos:end="4787:53"><call pos:start="4787:9" pos:end="4787:53"><name pos:start="4787:9" pos:end="4787:23">tcg_gen_xori_tl</name><argument_list pos:start="4787:24" pos:end="4787:53">(<argument pos:start="4787:25" pos:end="4787:34"><expr pos:start="4787:25" pos:end="4787:34"><name pos:start="4787:25" pos:end="4787:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4787:37" pos:end="4787:46"><expr pos:start="4787:37" pos:end="4787:46"><name pos:start="4787:37" pos:end="4787:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4787:49" pos:end="4787:52"><expr pos:start="4787:49" pos:end="4787:52"><name pos:start="4787:49" pos:end="4787:52">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4789:9" pos:end="4789:32"><expr pos:start="4789:9" pos:end="4789:31"><name pos:start="4789:9" pos:end="4789:16"><name pos:start="4789:9" pos:end="4789:9">s</name><operator pos:start="4789:10" pos:end="4789:11">-&gt;</operator><name pos:start="4789:12" pos:end="4789:16">cc_op</name></name> <operator pos:start="4789:18" pos:end="4789:18">=</operator> <name pos:start="4789:20" pos:end="4789:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4791:9" pos:end="4791:14">break;</break>

    <case pos:start="4793:5" pos:end="4793:14">case <expr pos:start="4793:10" pos:end="4793:13"><literal type="number" pos:start="4793:10" pos:end="4793:13">0xf8</literal></expr>:</case> <comment type="block" pos:start="4793:16" pos:end="4793:24">/* clc */</comment>

        <if_stmt pos:start="4795:9" pos:end="4797:39"><if pos:start="4795:9" pos:end="4797:39">if <condition pos:start="4795:12" pos:end="4795:38">(<expr pos:start="4795:13" pos:end="4795:37"><name pos:start="4795:13" pos:end="4795:20"><name pos:start="4795:13" pos:end="4795:13">s</name><operator pos:start="4795:14" pos:end="4795:15">-&gt;</operator><name pos:start="4795:16" pos:end="4795:20">cc_op</name></name> <operator pos:start="4795:22" pos:end="4795:23">!=</operator> <name pos:start="4795:25" pos:end="4795:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4797:13" pos:end="4797:39"><block_content pos:start="4797:13" pos:end="4797:39">

            <expr_stmt pos:start="4797:13" pos:end="4797:39"><expr pos:start="4797:13" pos:end="4797:38"><call pos:start="4797:13" pos:end="4797:38"><name pos:start="4797:13" pos:end="4797:28">gen_op_set_cc_op</name><argument_list pos:start="4797:29" pos:end="4797:38">(<argument pos:start="4797:30" pos:end="4797:37"><expr pos:start="4797:30" pos:end="4797:37"><name pos:start="4797:30" pos:end="4797:37"><name pos:start="4797:30" pos:end="4797:30">s</name><operator pos:start="4797:31" pos:end="4797:32">-&gt;</operator><name pos:start="4797:33" pos:end="4797:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4799:9" pos:end="4799:39"><expr pos:start="4799:9" pos:end="4799:38"><call pos:start="4799:9" pos:end="4799:38"><name pos:start="4799:9" pos:end="4799:26">gen_compute_eflags</name><argument_list pos:start="4799:27" pos:end="4799:38">(<argument pos:start="4799:28" pos:end="4799:37"><expr pos:start="4799:28" pos:end="4799:37"><name pos:start="4799:28" pos:end="4799:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4801:9" pos:end="4801:55"><expr pos:start="4801:9" pos:end="4801:54"><call pos:start="4801:9" pos:end="4801:54"><name pos:start="4801:9" pos:end="4801:23">tcg_gen_andi_tl</name><argument_list pos:start="4801:24" pos:end="4801:54">(<argument pos:start="4801:25" pos:end="4801:34"><expr pos:start="4801:25" pos:end="4801:34"><name pos:start="4801:25" pos:end="4801:34">cpu_cc_src</name></expr></argument>, <argument pos:start="4801:37" pos:end="4801:46"><expr pos:start="4801:37" pos:end="4801:46"><name pos:start="4801:37" pos:end="4801:46">cpu_cc_src</name></expr></argument>, <argument pos:start="4801:49" pos:end="4801:53"><expr pos:start="4801:49" pos:end="4801:53"><operator pos:start="4801:49" pos:end="4801:49">~</operator><name pos:start="4801:50" pos:end="4801:53">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4803:9" pos:end="4803:32"><expr pos:start="4803:9" pos:end="4803:31"><name pos:start="4803:9" pos:end="4803:16"><name pos:start="4803:9" pos:end="4803:9">s</name><operator pos:start="4803:10" pos:end="4803:11">-&gt;</operator><name pos:start="4803:12" pos:end="4803:16">cc_op</name></name> <operator pos:start="4803:18" pos:end="4803:18">=</operator> <name pos:start="4803:20" pos:end="4803:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4805:9" pos:end="4805:14">break;</break>

    <case pos:start="4807:5" pos:end="4807:14">case <expr pos:start="4807:10" pos:end="4807:13"><literal type="number" pos:start="4807:10" pos:end="4807:13">0xf9</literal></expr>:</case> <comment type="block" pos:start="4807:16" pos:end="4807:24">/* stc */</comment>

        <if_stmt pos:start="4809:9" pos:end="4811:39"><if pos:start="4809:9" pos:end="4811:39">if <condition pos:start="4809:12" pos:end="4809:38">(<expr pos:start="4809:13" pos:end="4809:37"><name pos:start="4809:13" pos:end="4809:20"><name pos:start="4809:13" pos:end="4809:13">s</name><operator pos:start="4809:14" pos:end="4809:15">-&gt;</operator><name pos:start="4809:16" pos:end="4809:20">cc_op</name></name> <operator pos:start="4809:22" pos:end="4809:23">!=</operator> <name pos:start="4809:25" pos:end="4809:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4811:13" pos:end="4811:39"><block_content pos:start="4811:13" pos:end="4811:39">

            <expr_stmt pos:start="4811:13" pos:end="4811:39"><expr pos:start="4811:13" pos:end="4811:38"><call pos:start="4811:13" pos:end="4811:38"><name pos:start="4811:13" pos:end="4811:28">gen_op_set_cc_op</name><argument_list pos:start="4811:29" pos:end="4811:38">(<argument pos:start="4811:30" pos:end="4811:37"><expr pos:start="4811:30" pos:end="4811:37"><name pos:start="4811:30" pos:end="4811:37"><name pos:start="4811:30" pos:end="4811:30">s</name><operator pos:start="4811:31" pos:end="4811:32">-&gt;</operator><name pos:start="4811:33" pos:end="4811:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4813:9" pos:end="4813:39"><expr pos:start="4813:9" pos:end="4813:38"><call pos:start="4813:9" pos:end="4813:38"><name pos:start="4813:9" pos:end="4813:26">gen_compute_eflags</name><argument_list pos:start="4813:27" pos:end="4813:38">(<argument pos:start="4813:28" pos:end="4813:37"><expr pos:start="4813:28" pos:end="4813:37"><name pos:start="4813:28" pos:end="4813:37">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4815:9" pos:end="4815:53"><expr pos:start="4815:9" pos:end="4815:52"><call pos:start="4815:9" pos:end="4815:52"><name pos:start="4815:9" pos:end="4815:22">tcg_gen_ori_tl</name><argument_list pos:start="4815:23" pos:end="4815:52">(<argument pos:start="4815:24" pos:end="4815:33"><expr pos:start="4815:24" pos:end="4815:33"><name pos:start="4815:24" pos:end="4815:33">cpu_cc_src</name></expr></argument>, <argument pos:start="4815:36" pos:end="4815:45"><expr pos:start="4815:36" pos:end="4815:45"><name pos:start="4815:36" pos:end="4815:45">cpu_cc_src</name></expr></argument>, <argument pos:start="4815:48" pos:end="4815:51"><expr pos:start="4815:48" pos:end="4815:51"><name pos:start="4815:48" pos:end="4815:51">CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4817:9" pos:end="4817:32"><expr pos:start="4817:9" pos:end="4817:31"><name pos:start="4817:9" pos:end="4817:16"><name pos:start="4817:9" pos:end="4817:9">s</name><operator pos:start="4817:10" pos:end="4817:11">-&gt;</operator><name pos:start="4817:12" pos:end="4817:16">cc_op</name></name> <operator pos:start="4817:18" pos:end="4817:18">=</operator> <name pos:start="4817:20" pos:end="4817:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="4819:9" pos:end="4819:14">break;</break>

    <case pos:start="4821:5" pos:end="4821:14">case <expr pos:start="4821:10" pos:end="4821:13"><literal type="number" pos:start="4821:10" pos:end="4821:13">0xfc</literal></expr>:</case> <comment type="block" pos:start="4821:16" pos:end="4821:24">/* cld */</comment>

        <expr_stmt pos:start="4823:9" pos:end="4823:42"><expr pos:start="4823:9" pos:end="4823:41"><call pos:start="4823:9" pos:end="4823:41"><name pos:start="4823:9" pos:end="4823:24">tcg_gen_movi_i32</name><argument_list pos:start="4823:25" pos:end="4823:41">(<argument pos:start="4823:26" pos:end="4823:37"><expr pos:start="4823:26" pos:end="4823:37"><name pos:start="4823:26" pos:end="4823:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4823:40" pos:end="4823:40"><expr pos:start="4823:40" pos:end="4823:40"><literal type="number" pos:start="4823:40" pos:end="4823:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4825:9" pos:end="4825:73"><expr pos:start="4825:9" pos:end="4825:72"><call pos:start="4825:9" pos:end="4825:72"><name pos:start="4825:9" pos:end="4825:22">tcg_gen_st_i32</name><argument_list pos:start="4825:23" pos:end="4825:72">(<argument pos:start="4825:24" pos:end="4825:35"><expr pos:start="4825:24" pos:end="4825:35"><name pos:start="4825:24" pos:end="4825:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4825:38" pos:end="4825:44"><expr pos:start="4825:38" pos:end="4825:44"><name pos:start="4825:38" pos:end="4825:44">cpu_env</name></expr></argument>, <argument pos:start="4825:47" pos:end="4825:71"><expr pos:start="4825:47" pos:end="4825:71"><call pos:start="4825:47" pos:end="4825:71"><name pos:start="4825:47" pos:end="4825:54">offsetof</name><argument_list pos:start="4825:55" pos:end="4825:71">(<argument pos:start="4825:56" pos:end="4825:66"><expr pos:start="4825:56" pos:end="4825:66"><name pos:start="4825:56" pos:end="4825:66">CPUX86State</name></expr></argument>, <argument pos:start="4825:69" pos:end="4825:70"><expr pos:start="4825:69" pos:end="4825:70"><name pos:start="4825:69" pos:end="4825:70">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4827:9" pos:end="4827:14">break;</break>

    <case pos:start="4829:5" pos:end="4829:14">case <expr pos:start="4829:10" pos:end="4829:13"><literal type="number" pos:start="4829:10" pos:end="4829:13">0xfd</literal></expr>:</case> <comment type="block" pos:start="4829:16" pos:end="4829:24">/* std */</comment>

        <expr_stmt pos:start="4831:9" pos:end="4831:43"><expr pos:start="4831:9" pos:end="4831:42"><call pos:start="4831:9" pos:end="4831:42"><name pos:start="4831:9" pos:end="4831:24">tcg_gen_movi_i32</name><argument_list pos:start="4831:25" pos:end="4831:42">(<argument pos:start="4831:26" pos:end="4831:37"><expr pos:start="4831:26" pos:end="4831:37"><name pos:start="4831:26" pos:end="4831:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4831:40" pos:end="4831:41"><expr pos:start="4831:40" pos:end="4831:41"><operator pos:start="4831:40" pos:end="4831:40">-</operator><literal type="number" pos:start="4831:41" pos:end="4831:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4833:9" pos:end="4833:73"><expr pos:start="4833:9" pos:end="4833:72"><call pos:start="4833:9" pos:end="4833:72"><name pos:start="4833:9" pos:end="4833:22">tcg_gen_st_i32</name><argument_list pos:start="4833:23" pos:end="4833:72">(<argument pos:start="4833:24" pos:end="4833:35"><expr pos:start="4833:24" pos:end="4833:35"><name pos:start="4833:24" pos:end="4833:35">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="4833:38" pos:end="4833:44"><expr pos:start="4833:38" pos:end="4833:44"><name pos:start="4833:38" pos:end="4833:44">cpu_env</name></expr></argument>, <argument pos:start="4833:47" pos:end="4833:71"><expr pos:start="4833:47" pos:end="4833:71"><call pos:start="4833:47" pos:end="4833:71"><name pos:start="4833:47" pos:end="4833:54">offsetof</name><argument_list pos:start="4833:55" pos:end="4833:71">(<argument pos:start="4833:56" pos:end="4833:66"><expr pos:start="4833:56" pos:end="4833:66"><name pos:start="4833:56" pos:end="4833:66">CPUX86State</name></expr></argument>, <argument pos:start="4833:69" pos:end="4833:70"><expr pos:start="4833:69" pos:end="4833:70"><name pos:start="4833:69" pos:end="4833:70">df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4835:9" pos:end="4835:14">break;</break>



        <comment type="block" format="doxygen" pos:start="4839:9" pos:end="4839:34">/************************/</comment>

        <comment type="block" pos:start="4841:9" pos:end="4841:28">/* bit operations */</comment>

    <case pos:start="4843:5" pos:end="4843:15">case <expr pos:start="4843:10" pos:end="4843:14"><literal type="number" pos:start="4843:10" pos:end="4843:14">0x1ba</literal></expr>:</case> <comment type="block" pos:start="4843:17" pos:end="4843:43">/* bt/bts/btr/btc Gv, im */</comment>

        <expr_stmt pos:start="4845:9" pos:end="4845:29"><expr pos:start="4845:9" pos:end="4845:28"><name pos:start="4845:9" pos:end="4845:10">ot</name> <operator pos:start="4845:12" pos:end="4845:12">=</operator> <name pos:start="4845:14" pos:end="4845:18">dflag</name> <operator pos:start="4845:20" pos:end="4845:20">+</operator> <name pos:start="4845:22" pos:end="4845:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4847:9" pos:end="4847:55"><expr pos:start="4847:9" pos:end="4847:54"><name pos:start="4847:9" pos:end="4847:13">modrm</name> <operator pos:start="4847:15" pos:end="4847:15">=</operator> <call pos:start="4847:17" pos:end="4847:54"><name pos:start="4847:17" pos:end="4847:29">cpu_ldub_code</name><argument_list pos:start="4847:30" pos:end="4847:54">(<argument pos:start="4847:31" pos:end="4847:44"><expr pos:start="4847:31" pos:end="4847:44"><name pos:start="4847:31" pos:end="4847:44">cpu_single_env</name></expr></argument>, <argument pos:start="4847:47" pos:end="4847:53"><expr pos:start="4847:47" pos:end="4847:53"><name pos:start="4847:47" pos:end="4847:51"><name pos:start="4847:47" pos:end="4847:47">s</name><operator pos:start="4847:48" pos:end="4847:49">-&gt;</operator><name pos:start="4847:50" pos:end="4847:51">pc</name></name><operator pos:start="4847:52" pos:end="4847:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4849:9" pos:end="4849:30"><expr pos:start="4849:9" pos:end="4849:29"><name pos:start="4849:9" pos:end="4849:10">op</name> <operator pos:start="4849:12" pos:end="4849:12">=</operator> <operator pos:start="4849:14" pos:end="4849:14">(</operator><name pos:start="4849:15" pos:end="4849:19">modrm</name> <operator pos:start="4849:21" pos:end="4849:22">&gt;&gt;</operator> <literal type="number" pos:start="4849:24" pos:end="4849:24">3</literal><operator pos:start="4849:25" pos:end="4849:25">)</operator> <operator pos:start="4849:27" pos:end="4849:27">&amp;</operator> <literal type="number" pos:start="4849:29" pos:end="4849:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4851:9" pos:end="4851:31"><expr pos:start="4851:9" pos:end="4851:30"><name pos:start="4851:9" pos:end="4851:11">mod</name> <operator pos:start="4851:13" pos:end="4851:13">=</operator> <operator pos:start="4851:15" pos:end="4851:15">(</operator><name pos:start="4851:16" pos:end="4851:20">modrm</name> <operator pos:start="4851:22" pos:end="4851:23">&gt;&gt;</operator> <literal type="number" pos:start="4851:25" pos:end="4851:25">6</literal><operator pos:start="4851:26" pos:end="4851:26">)</operator> <operator pos:start="4851:28" pos:end="4851:28">&amp;</operator> <literal type="number" pos:start="4851:30" pos:end="4851:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4853:9" pos:end="4853:36"><expr pos:start="4853:9" pos:end="4853:35"><name pos:start="4853:9" pos:end="4853:10">rm</name> <operator pos:start="4853:12" pos:end="4853:12">=</operator> <operator pos:start="4853:14" pos:end="4853:14">(</operator><name pos:start="4853:15" pos:end="4853:19">modrm</name> <operator pos:start="4853:21" pos:end="4853:21">&amp;</operator> <literal type="number" pos:start="4853:23" pos:end="4853:23">7</literal><operator pos:start="4853:24" pos:end="4853:24">)</operator> <operator pos:start="4853:26" pos:end="4853:26">|</operator> <call pos:start="4853:28" pos:end="4853:35"><name pos:start="4853:28" pos:end="4853:32">REX_B</name><argument_list pos:start="4853:33" pos:end="4853:35">(<argument pos:start="4853:34" pos:end="4853:34"><expr pos:start="4853:34" pos:end="4853:34"><name pos:start="4853:34" pos:end="4853:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4855:9" pos:end="4867:9"><if pos:start="4855:9" pos:end="4863:9">if <condition pos:start="4855:12" pos:end="4855:21">(<expr pos:start="4855:13" pos:end="4855:20"><name pos:start="4855:13" pos:end="4855:15">mod</name> <operator pos:start="4855:17" pos:end="4855:18">!=</operator> <literal type="number" pos:start="4855:20" pos:end="4855:20">3</literal></expr>)</condition> <block pos:start="4855:23" pos:end="4863:9">{<block_content pos:start="4857:13" pos:end="4861:47">

            <expr_stmt pos:start="4857:13" pos:end="4857:30"><expr pos:start="4857:13" pos:end="4857:29"><name pos:start="4857:13" pos:end="4857:25"><name pos:start="4857:13" pos:end="4857:13">s</name><operator pos:start="4857:14" pos:end="4857:15">-&gt;</operator><name pos:start="4857:16" pos:end="4857:25">rip_offset</name></name> <operator pos:start="4857:27" pos:end="4857:27">=</operator> <literal type="number" pos:start="4857:29" pos:end="4857:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4859:13" pos:end="4859:61"><expr pos:start="4859:13" pos:end="4859:60"><call pos:start="4859:13" pos:end="4859:60"><name pos:start="4859:13" pos:end="4859:25">gen_lea_modrm</name><argument_list pos:start="4859:26" pos:end="4859:60">(<argument pos:start="4859:27" pos:end="4859:27"><expr pos:start="4859:27" pos:end="4859:27"><name pos:start="4859:27" pos:end="4859:27">s</name></expr></argument>, <argument pos:start="4859:30" pos:end="4859:34"><expr pos:start="4859:30" pos:end="4859:34"><name pos:start="4859:30" pos:end="4859:34">modrm</name></expr></argument>, <argument pos:start="4859:37" pos:end="4859:45"><expr pos:start="4859:37" pos:end="4859:45"><operator pos:start="4859:37" pos:end="4859:37">&amp;</operator><name pos:start="4859:38" pos:end="4859:45">reg_addr</name></expr></argument>, <argument pos:start="4859:48" pos:end="4859:59"><expr pos:start="4859:48" pos:end="4859:59"><operator pos:start="4859:48" pos:end="4859:48">&amp;</operator><name pos:start="4859:49" pos:end="4859:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4861:13" pos:end="4861:47"><expr pos:start="4861:13" pos:end="4861:46"><call pos:start="4861:13" pos:end="4861:46"><name pos:start="4861:13" pos:end="4861:27">gen_op_ld_T0_A0</name><argument_list pos:start="4861:28" pos:end="4861:46">(<argument pos:start="4861:29" pos:end="4861:45"><expr pos:start="4861:29" pos:end="4861:45"><name pos:start="4861:29" pos:end="4861:30">ot</name> <operator pos:start="4861:32" pos:end="4861:32">+</operator> <name pos:start="4861:34" pos:end="4861:45"><name pos:start="4861:34" pos:end="4861:34">s</name><operator pos:start="4861:35" pos:end="4861:36">-&gt;</operator><name pos:start="4861:37" pos:end="4861:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4863:11" pos:end="4867:9">else <block pos:start="4863:16" pos:end="4867:9">{<block_content pos:start="4865:13" pos:end="4865:41">

            <expr_stmt pos:start="4865:13" pos:end="4865:41"><expr pos:start="4865:13" pos:end="4865:40"><call pos:start="4865:13" pos:end="4865:40"><name pos:start="4865:13" pos:end="4865:29">gen_op_mov_TN_reg</name><argument_list pos:start="4865:30" pos:end="4865:40">(<argument pos:start="4865:31" pos:end="4865:32"><expr pos:start="4865:31" pos:end="4865:32"><name pos:start="4865:31" pos:end="4865:32">ot</name></expr></argument>, <argument pos:start="4865:35" pos:end="4865:35"><expr pos:start="4865:35" pos:end="4865:35"><literal type="number" pos:start="4865:35" pos:end="4865:35">0</literal></expr></argument>, <argument pos:start="4865:38" pos:end="4865:39"><expr pos:start="4865:38" pos:end="4865:39"><name pos:start="4865:38" pos:end="4865:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="4869:9" pos:end="4869:24">/* load shift */</comment>

        <expr_stmt pos:start="4871:9" pos:end="4871:53"><expr pos:start="4871:9" pos:end="4871:52"><name pos:start="4871:9" pos:end="4871:11">val</name> <operator pos:start="4871:13" pos:end="4871:13">=</operator> <call pos:start="4871:15" pos:end="4871:52"><name pos:start="4871:15" pos:end="4871:27">cpu_ldub_code</name><argument_list pos:start="4871:28" pos:end="4871:52">(<argument pos:start="4871:29" pos:end="4871:42"><expr pos:start="4871:29" pos:end="4871:42"><name pos:start="4871:29" pos:end="4871:42">cpu_single_env</name></expr></argument>, <argument pos:start="4871:45" pos:end="4871:51"><expr pos:start="4871:45" pos:end="4871:51"><name pos:start="4871:45" pos:end="4871:49"><name pos:start="4871:45" pos:end="4871:45">s</name><operator pos:start="4871:46" pos:end="4871:47">-&gt;</operator><name pos:start="4871:48" pos:end="4871:49">pc</name></name><operator pos:start="4871:50" pos:end="4871:51">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4873:9" pos:end="4873:31"><expr pos:start="4873:9" pos:end="4873:30"><call pos:start="4873:9" pos:end="4873:30"><name pos:start="4873:9" pos:end="4873:25">gen_op_movl_T1_im</name><argument_list pos:start="4873:26" pos:end="4873:30">(<argument pos:start="4873:27" pos:end="4873:29"><expr pos:start="4873:27" pos:end="4873:29"><name pos:start="4873:27" pos:end="4873:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4875:9" pos:end="4877:28"><if pos:start="4875:9" pos:end="4877:28">if <condition pos:start="4875:12" pos:end="4875:19">(<expr pos:start="4875:13" pos:end="4875:18"><name pos:start="4875:13" pos:end="4875:14">op</name> <operator pos:start="4875:16" pos:end="4875:16">&lt;</operator> <literal type="number" pos:start="4875:18" pos:end="4875:18">4</literal></expr>)</condition><block type="pseudo" pos:start="4877:13" pos:end="4877:28"><block_content pos:start="4877:13" pos:end="4877:28">

            <goto pos:start="4877:13" pos:end="4877:28">goto <name pos:start="4877:18" pos:end="4877:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4879:9" pos:end="4879:16"><expr pos:start="4879:9" pos:end="4879:15"><name pos:start="4879:9" pos:end="4879:10">op</name> <operator pos:start="4879:12" pos:end="4879:13">-=</operator> <literal type="number" pos:start="4879:15" pos:end="4879:15">4</literal></expr>;</expr_stmt>

        <goto pos:start="4881:9" pos:end="4881:19">goto <name pos:start="4881:14" pos:end="4881:18">bt_op</name>;</goto>

    <case pos:start="4883:5" pos:end="4883:15">case <expr pos:start="4883:10" pos:end="4883:14"><literal type="number" pos:start="4883:10" pos:end="4883:14">0x1a3</literal></expr>:</case> <comment type="block" pos:start="4883:17" pos:end="4883:31">/* bt Gv, Ev */</comment>

        <expr_stmt pos:start="4885:9" pos:end="4885:15"><expr pos:start="4885:9" pos:end="4885:14"><name pos:start="4885:9" pos:end="4885:10">op</name> <operator pos:start="4885:12" pos:end="4885:12">=</operator> <literal type="number" pos:start="4885:14" pos:end="4885:14">0</literal></expr>;</expr_stmt>

        <goto pos:start="4887:9" pos:end="4887:20">goto <name pos:start="4887:14" pos:end="4887:19">do_btx</name>;</goto>

    <case pos:start="4889:5" pos:end="4889:15">case <expr pos:start="4889:10" pos:end="4889:14"><literal type="number" pos:start="4889:10" pos:end="4889:14">0x1ab</literal></expr>:</case> <comment type="block" pos:start="4889:17" pos:end="4889:25">/* bts */</comment>

        <expr_stmt pos:start="4891:9" pos:end="4891:15"><expr pos:start="4891:9" pos:end="4891:14"><name pos:start="4891:9" pos:end="4891:10">op</name> <operator pos:start="4891:12" pos:end="4891:12">=</operator> <literal type="number" pos:start="4891:14" pos:end="4891:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="4893:9" pos:end="4893:20">goto <name pos:start="4893:14" pos:end="4893:19">do_btx</name>;</goto>

    <case pos:start="4895:5" pos:end="4895:15">case <expr pos:start="4895:10" pos:end="4895:14"><literal type="number" pos:start="4895:10" pos:end="4895:14">0x1b3</literal></expr>:</case> <comment type="block" pos:start="4895:17" pos:end="4895:25">/* btr */</comment>

        <expr_stmt pos:start="4897:9" pos:end="4897:15"><expr pos:start="4897:9" pos:end="4897:14"><name pos:start="4897:9" pos:end="4897:10">op</name> <operator pos:start="4897:12" pos:end="4897:12">=</operator> <literal type="number" pos:start="4897:14" pos:end="4897:14">2</literal></expr>;</expr_stmt>

        <goto pos:start="4899:9" pos:end="4899:20">goto <name pos:start="4899:14" pos:end="4899:19">do_btx</name>;</goto>

    <case pos:start="4901:5" pos:end="4901:15">case <expr pos:start="4901:10" pos:end="4901:14"><literal type="number" pos:start="4901:10" pos:end="4901:14">0x1bb</literal></expr>:</case> <comment type="block" pos:start="4901:17" pos:end="4901:25">/* btc */</comment>

        <expr_stmt pos:start="4903:9" pos:end="4903:15"><expr pos:start="4903:9" pos:end="4903:14"><name pos:start="4903:9" pos:end="4903:10">op</name> <operator pos:start="4903:12" pos:end="4903:12">=</operator> <literal type="number" pos:start="4903:14" pos:end="4903:14">3</literal></expr>;</expr_stmt>

    <label pos:start="4905:5" pos:end="4905:11"><name pos:start="4905:5" pos:end="4905:10">do_btx</name>:</label>

        <expr_stmt pos:start="4907:9" pos:end="4907:29"><expr pos:start="4907:9" pos:end="4907:28"><name pos:start="4907:9" pos:end="4907:10">ot</name> <operator pos:start="4907:12" pos:end="4907:12">=</operator> <name pos:start="4907:14" pos:end="4907:18">dflag</name> <operator pos:start="4907:20" pos:end="4907:20">+</operator> <name pos:start="4907:22" pos:end="4907:28">OT_WORD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4909:9" pos:end="4909:55"><expr pos:start="4909:9" pos:end="4909:54"><name pos:start="4909:9" pos:end="4909:13">modrm</name> <operator pos:start="4909:15" pos:end="4909:15">=</operator> <call pos:start="4909:17" pos:end="4909:54"><name pos:start="4909:17" pos:end="4909:29">cpu_ldub_code</name><argument_list pos:start="4909:30" pos:end="4909:54">(<argument pos:start="4909:31" pos:end="4909:44"><expr pos:start="4909:31" pos:end="4909:44"><name pos:start="4909:31" pos:end="4909:44">cpu_single_env</name></expr></argument>, <argument pos:start="4909:47" pos:end="4909:53"><expr pos:start="4909:47" pos:end="4909:53"><name pos:start="4909:47" pos:end="4909:51"><name pos:start="4909:47" pos:end="4909:47">s</name><operator pos:start="4909:48" pos:end="4909:49">-&gt;</operator><name pos:start="4909:50" pos:end="4909:51">pc</name></name><operator pos:start="4909:52" pos:end="4909:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4911:9" pos:end="4911:41"><expr pos:start="4911:9" pos:end="4911:40"><name pos:start="4911:9" pos:end="4911:11">reg</name> <operator pos:start="4911:13" pos:end="4911:13">=</operator> <operator pos:start="4911:15" pos:end="4911:15">(</operator><operator pos:start="4911:16" pos:end="4911:16">(</operator><name pos:start="4911:17" pos:end="4911:21">modrm</name> <operator pos:start="4911:23" pos:end="4911:24">&gt;&gt;</operator> <literal type="number" pos:start="4911:26" pos:end="4911:26">3</literal><operator pos:start="4911:27" pos:end="4911:27">)</operator> <operator pos:start="4911:29" pos:end="4911:29">&amp;</operator> <literal type="number" pos:start="4911:31" pos:end="4911:31">7</literal><operator pos:start="4911:32" pos:end="4911:32">)</operator> <operator pos:start="4911:34" pos:end="4911:34">|</operator> <name pos:start="4911:36" pos:end="4911:40">rex_r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4913:9" pos:end="4913:31"><expr pos:start="4913:9" pos:end="4913:30"><name pos:start="4913:9" pos:end="4913:11">mod</name> <operator pos:start="4913:13" pos:end="4913:13">=</operator> <operator pos:start="4913:15" pos:end="4913:15">(</operator><name pos:start="4913:16" pos:end="4913:20">modrm</name> <operator pos:start="4913:22" pos:end="4913:23">&gt;&gt;</operator> <literal type="number" pos:start="4913:25" pos:end="4913:25">6</literal><operator pos:start="4913:26" pos:end="4913:26">)</operator> <operator pos:start="4913:28" pos:end="4913:28">&amp;</operator> <literal type="number" pos:start="4913:30" pos:end="4913:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4915:9" pos:end="4915:36"><expr pos:start="4915:9" pos:end="4915:35"><name pos:start="4915:9" pos:end="4915:10">rm</name> <operator pos:start="4915:12" pos:end="4915:12">=</operator> <operator pos:start="4915:14" pos:end="4915:14">(</operator><name pos:start="4915:15" pos:end="4915:19">modrm</name> <operator pos:start="4915:21" pos:end="4915:21">&amp;</operator> <literal type="number" pos:start="4915:23" pos:end="4915:23">7</literal><operator pos:start="4915:24" pos:end="4915:24">)</operator> <operator pos:start="4915:26" pos:end="4915:26">|</operator> <call pos:start="4915:28" pos:end="4915:35"><name pos:start="4915:28" pos:end="4915:32">REX_B</name><argument_list pos:start="4915:33" pos:end="4915:35">(<argument pos:start="4915:34" pos:end="4915:34"><expr pos:start="4915:34" pos:end="4915:34"><name pos:start="4915:34" pos:end="4915:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4917:9" pos:end="4917:43"><expr pos:start="4917:9" pos:end="4917:42"><call pos:start="4917:9" pos:end="4917:42"><name pos:start="4917:9" pos:end="4917:25">gen_op_mov_TN_reg</name><argument_list pos:start="4917:26" pos:end="4917:42">(<argument pos:start="4917:27" pos:end="4917:33"><expr pos:start="4917:27" pos:end="4917:33"><name pos:start="4917:27" pos:end="4917:33">OT_LONG</name></expr></argument>, <argument pos:start="4917:36" pos:end="4917:36"><expr pos:start="4917:36" pos:end="4917:36"><literal type="number" pos:start="4917:36" pos:end="4917:36">1</literal></expr></argument>, <argument pos:start="4917:39" pos:end="4917:41"><expr pos:start="4917:39" pos:end="4917:41"><name pos:start="4917:39" pos:end="4917:41">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4919:9" pos:end="4939:9"><if pos:start="4919:9" pos:end="4935:9">if <condition pos:start="4919:12" pos:end="4919:21">(<expr pos:start="4919:13" pos:end="4919:20"><name pos:start="4919:13" pos:end="4919:15">mod</name> <operator pos:start="4919:17" pos:end="4919:18">!=</operator> <literal type="number" pos:start="4919:20" pos:end="4919:20">3</literal></expr>)</condition> <block pos:start="4919:23" pos:end="4935:9">{<block_content pos:start="4921:13" pos:end="4933:47">

            <expr_stmt pos:start="4921:13" pos:end="4921:61"><expr pos:start="4921:13" pos:end="4921:60"><call pos:start="4921:13" pos:end="4921:60"><name pos:start="4921:13" pos:end="4921:25">gen_lea_modrm</name><argument_list pos:start="4921:26" pos:end="4921:60">(<argument pos:start="4921:27" pos:end="4921:27"><expr pos:start="4921:27" pos:end="4921:27"><name pos:start="4921:27" pos:end="4921:27">s</name></expr></argument>, <argument pos:start="4921:30" pos:end="4921:34"><expr pos:start="4921:30" pos:end="4921:34"><name pos:start="4921:30" pos:end="4921:34">modrm</name></expr></argument>, <argument pos:start="4921:37" pos:end="4921:45"><expr pos:start="4921:37" pos:end="4921:45"><operator pos:start="4921:37" pos:end="4921:37">&amp;</operator><name pos:start="4921:38" pos:end="4921:45">reg_addr</name></expr></argument>, <argument pos:start="4921:48" pos:end="4921:59"><expr pos:start="4921:48" pos:end="4921:59"><operator pos:start="4921:48" pos:end="4921:48">&amp;</operator><name pos:start="4921:49" pos:end="4921:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4923:13" pos:end="4923:62">/* specific case: we need to add a displacement */</comment>

            <expr_stmt pos:start="4925:13" pos:end="4925:35"><expr pos:start="4925:13" pos:end="4925:34"><call pos:start="4925:13" pos:end="4925:34"><name pos:start="4925:13" pos:end="4925:20">gen_exts</name><argument_list pos:start="4925:21" pos:end="4925:34">(<argument pos:start="4925:22" pos:end="4925:23"><expr pos:start="4925:22" pos:end="4925:23"><name pos:start="4925:22" pos:end="4925:23">ot</name></expr></argument>, <argument pos:start="4925:26" pos:end="4925:33"><expr pos:start="4925:26" pos:end="4925:33"><name pos:start="4925:26" pos:end="4925:33"><name pos:start="4925:26" pos:end="4925:30">cpu_T</name><index pos:start="4925:31" pos:end="4925:33">[<expr pos:start="4925:32" pos:end="4925:32"><literal type="number" pos:start="4925:32" pos:end="4925:32">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4927:13" pos:end="4927:56"><expr pos:start="4927:13" pos:end="4927:55"><call pos:start="4927:13" pos:end="4927:55"><name pos:start="4927:13" pos:end="4927:27">tcg_gen_sari_tl</name><argument_list pos:start="4927:28" pos:end="4927:55">(<argument pos:start="4927:29" pos:end="4927:36"><expr pos:start="4927:29" pos:end="4927:36"><name pos:start="4927:29" pos:end="4927:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4927:39" pos:end="4927:46"><expr pos:start="4927:39" pos:end="4927:46"><name pos:start="4927:39" pos:end="4927:46"><name pos:start="4927:39" pos:end="4927:43">cpu_T</name><index pos:start="4927:44" pos:end="4927:46">[<expr pos:start="4927:45" pos:end="4927:45"><literal type="number" pos:start="4927:45" pos:end="4927:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4927:49" pos:end="4927:54"><expr pos:start="4927:49" pos:end="4927:54"><literal type="number" pos:start="4927:49" pos:end="4927:51">3</literal> <operator pos:start="4927:51" pos:end="4927:51">+</operator> <name pos:start="4927:53" pos:end="4927:54">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4929:13" pos:end="4929:52"><expr pos:start="4929:13" pos:end="4929:51"><call pos:start="4929:13" pos:end="4929:51"><name pos:start="4929:13" pos:end="4929:27">tcg_gen_shli_tl</name><argument_list pos:start="4929:28" pos:end="4929:51">(<argument pos:start="4929:29" pos:end="4929:36"><expr pos:start="4929:29" pos:end="4929:36"><name pos:start="4929:29" pos:end="4929:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4929:39" pos:end="4929:46"><expr pos:start="4929:39" pos:end="4929:46"><name pos:start="4929:39" pos:end="4929:46">cpu_tmp0</name></expr></argument>, <argument pos:start="4929:49" pos:end="4929:50"><expr pos:start="4929:49" pos:end="4929:50"><name pos:start="4929:49" pos:end="4929:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4931:13" pos:end="4931:53"><expr pos:start="4931:13" pos:end="4931:52"><call pos:start="4931:13" pos:end="4931:52"><name pos:start="4931:13" pos:end="4931:26">tcg_gen_add_tl</name><argument_list pos:start="4931:27" pos:end="4931:52">(<argument pos:start="4931:28" pos:end="4931:33"><expr pos:start="4931:28" pos:end="4931:33"><name pos:start="4931:28" pos:end="4931:33">cpu_A0</name></expr></argument>, <argument pos:start="4931:36" pos:end="4931:41"><expr pos:start="4931:36" pos:end="4931:41"><name pos:start="4931:36" pos:end="4931:41">cpu_A0</name></expr></argument>, <argument pos:start="4931:44" pos:end="4931:51"><expr pos:start="4931:44" pos:end="4931:51"><name pos:start="4931:44" pos:end="4931:51">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4933:13" pos:end="4933:47"><expr pos:start="4933:13" pos:end="4933:46"><call pos:start="4933:13" pos:end="4933:46"><name pos:start="4933:13" pos:end="4933:27">gen_op_ld_T0_A0</name><argument_list pos:start="4933:28" pos:end="4933:46">(<argument pos:start="4933:29" pos:end="4933:45"><expr pos:start="4933:29" pos:end="4933:45"><name pos:start="4933:29" pos:end="4933:30">ot</name> <operator pos:start="4933:32" pos:end="4933:32">+</operator> <name pos:start="4933:34" pos:end="4933:45"><name pos:start="4933:34" pos:end="4933:34">s</name><operator pos:start="4933:35" pos:end="4933:36">-&gt;</operator><name pos:start="4933:37" pos:end="4933:45">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4935:11" pos:end="4939:9">else <block pos:start="4935:16" pos:end="4939:9">{<block_content pos:start="4937:13" pos:end="4937:41">

            <expr_stmt pos:start="4937:13" pos:end="4937:41"><expr pos:start="4937:13" pos:end="4937:40"><call pos:start="4937:13" pos:end="4937:40"><name pos:start="4937:13" pos:end="4937:29">gen_op_mov_TN_reg</name><argument_list pos:start="4937:30" pos:end="4937:40">(<argument pos:start="4937:31" pos:end="4937:32"><expr pos:start="4937:31" pos:end="4937:32"><name pos:start="4937:31" pos:end="4937:32">ot</name></expr></argument>, <argument pos:start="4937:35" pos:end="4937:35"><expr pos:start="4937:35" pos:end="4937:35"><literal type="number" pos:start="4937:35" pos:end="4937:35">0</literal></expr></argument>, <argument pos:start="4937:38" pos:end="4937:39"><expr pos:start="4937:38" pos:end="4937:39"><name pos:start="4937:38" pos:end="4937:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="4941:5" pos:end="4941:10"><name pos:start="4941:5" pos:end="4941:9">bt_op</name>:</label>

        <expr_stmt pos:start="4943:9" pos:end="4943:65"><expr pos:start="4943:9" pos:end="4943:64"><call pos:start="4943:9" pos:end="4943:64"><name pos:start="4943:9" pos:end="4943:23">tcg_gen_andi_tl</name><argument_list pos:start="4943:24" pos:end="4943:64">(<argument pos:start="4943:25" pos:end="4943:32"><expr pos:start="4943:25" pos:end="4943:32"><name pos:start="4943:25" pos:end="4943:32"><name pos:start="4943:25" pos:end="4943:29">cpu_T</name><index pos:start="4943:30" pos:end="4943:32">[<expr pos:start="4943:31" pos:end="4943:31"><literal type="number" pos:start="4943:31" pos:end="4943:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4943:35" pos:end="4943:42"><expr pos:start="4943:35" pos:end="4943:42"><name pos:start="4943:35" pos:end="4943:42"><name pos:start="4943:35" pos:end="4943:39">cpu_T</name><index pos:start="4943:40" pos:end="4943:42">[<expr pos:start="4943:41" pos:end="4943:41"><literal type="number" pos:start="4943:41" pos:end="4943:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="4943:45" pos:end="4943:63"><expr pos:start="4943:45" pos:end="4943:63"><operator pos:start="4943:45" pos:end="4943:45">(</operator><literal type="number" pos:start="4943:46" pos:end="4943:46">1</literal> <operator pos:start="4943:48" pos:end="4943:49">&lt;&lt;</operator> <operator pos:start="4943:51" pos:end="4943:51">(</operator><literal type="number" pos:start="4943:52" pos:end="4943:54">3</literal> <operator pos:start="4943:54" pos:end="4943:54">+</operator> <name pos:start="4943:56" pos:end="4943:57">ot</name><operator pos:start="4943:58" pos:end="4943:58">)</operator><operator pos:start="4943:59" pos:end="4943:59">)</operator> <operator pos:start="4943:61" pos:end="4943:61">-</operator> <literal type="number" pos:start="4943:63" pos:end="4943:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="4945:9" pos:end="4995:9">switch<condition pos:start="4945:15" pos:end="4945:18">(<expr pos:start="4945:16" pos:end="4945:17"><name pos:start="4945:16" pos:end="4945:17">op</name></expr>)</condition> <block pos:start="4945:20" pos:end="4995:9">{<block_content pos:start="4947:9" pos:end="4993:18">

        <case pos:start="4947:9" pos:end="4947:15">case <expr pos:start="4947:14" pos:end="4947:14"><literal type="number" pos:start="4947:14" pos:end="4947:14">0</literal></expr>:</case>

            <expr_stmt pos:start="4949:13" pos:end="4949:59"><expr pos:start="4949:13" pos:end="4949:58"><call pos:start="4949:13" pos:end="4949:58"><name pos:start="4949:13" pos:end="4949:26">tcg_gen_shr_tl</name><argument_list pos:start="4949:27" pos:end="4949:58">(<argument pos:start="4949:28" pos:end="4949:37"><expr pos:start="4949:28" pos:end="4949:37"><name pos:start="4949:28" pos:end="4949:37">cpu_cc_src</name></expr></argument>, <argument pos:start="4949:40" pos:end="4949:47"><expr pos:start="4949:40" pos:end="4949:47"><name pos:start="4949:40" pos:end="4949:47"><name pos:start="4949:40" pos:end="4949:44">cpu_T</name><index pos:start="4949:45" pos:end="4949:47">[<expr pos:start="4949:46" pos:end="4949:46"><literal type="number" pos:start="4949:46" pos:end="4949:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4949:50" pos:end="4949:57"><expr pos:start="4949:50" pos:end="4949:57"><name pos:start="4949:50" pos:end="4949:57"><name pos:start="4949:50" pos:end="4949:54">cpu_T</name><index pos:start="4949:55" pos:end="4949:57">[<expr pos:start="4949:56" pos:end="4949:56"><literal type="number" pos:start="4949:56" pos:end="4949:56">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4951:13" pos:end="4951:43"><expr pos:start="4951:13" pos:end="4951:42"><call pos:start="4951:13" pos:end="4951:42"><name pos:start="4951:13" pos:end="4951:27">tcg_gen_movi_tl</name><argument_list pos:start="4951:28" pos:end="4951:42">(<argument pos:start="4951:29" pos:end="4951:38"><expr pos:start="4951:29" pos:end="4951:38"><name pos:start="4951:29" pos:end="4951:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="4951:41" pos:end="4951:41"><expr pos:start="4951:41" pos:end="4951:41"><literal type="number" pos:start="4951:41" pos:end="4951:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4953:13" pos:end="4953:18">break;</break>

        <case pos:start="4955:9" pos:end="4955:15">case <expr pos:start="4955:14" pos:end="4955:14"><literal type="number" pos:start="4955:14" pos:end="4955:14">1</literal></expr>:</case>

            <expr_stmt pos:start="4957:13" pos:end="4957:57"><expr pos:start="4957:13" pos:end="4957:56"><call pos:start="4957:13" pos:end="4957:56"><name pos:start="4957:13" pos:end="4957:26">tcg_gen_shr_tl</name><argument_list pos:start="4957:27" pos:end="4957:56">(<argument pos:start="4957:28" pos:end="4957:35"><expr pos:start="4957:28" pos:end="4957:35"><name pos:start="4957:28" pos:end="4957:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4957:38" pos:end="4957:45"><expr pos:start="4957:38" pos:end="4957:45"><name pos:start="4957:38" pos:end="4957:45"><name pos:start="4957:38" pos:end="4957:42">cpu_T</name><index pos:start="4957:43" pos:end="4957:45">[<expr pos:start="4957:44" pos:end="4957:44"><literal type="number" pos:start="4957:44" pos:end="4957:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4957:48" pos:end="4957:55"><expr pos:start="4957:48" pos:end="4957:55"><name pos:start="4957:48" pos:end="4957:55"><name pos:start="4957:48" pos:end="4957:52">cpu_T</name><index pos:start="4957:53" pos:end="4957:55">[<expr pos:start="4957:54" pos:end="4957:54"><literal type="number" pos:start="4957:54" pos:end="4957:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4959:13" pos:end="4959:41"><expr pos:start="4959:13" pos:end="4959:40"><call pos:start="4959:13" pos:end="4959:40"><name pos:start="4959:13" pos:end="4959:27">tcg_gen_movi_tl</name><argument_list pos:start="4959:28" pos:end="4959:40">(<argument pos:start="4959:29" pos:end="4959:36"><expr pos:start="4959:29" pos:end="4959:36"><name pos:start="4959:29" pos:end="4959:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4959:39" pos:end="4959:39"><expr pos:start="4959:39" pos:end="4959:39"><literal type="number" pos:start="4959:39" pos:end="4959:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4961:13" pos:end="4961:57"><expr pos:start="4961:13" pos:end="4961:56"><call pos:start="4961:13" pos:end="4961:56"><name pos:start="4961:13" pos:end="4961:26">tcg_gen_shl_tl</name><argument_list pos:start="4961:27" pos:end="4961:56">(<argument pos:start="4961:28" pos:end="4961:35"><expr pos:start="4961:28" pos:end="4961:35"><name pos:start="4961:28" pos:end="4961:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4961:38" pos:end="4961:45"><expr pos:start="4961:38" pos:end="4961:45"><name pos:start="4961:38" pos:end="4961:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4961:48" pos:end="4961:55"><expr pos:start="4961:48" pos:end="4961:55"><name pos:start="4961:48" pos:end="4961:55"><name pos:start="4961:48" pos:end="4961:52">cpu_T</name><index pos:start="4961:53" pos:end="4961:55">[<expr pos:start="4961:54" pos:end="4961:54"><literal type="number" pos:start="4961:54" pos:end="4961:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4963:13" pos:end="4963:56"><expr pos:start="4963:13" pos:end="4963:55"><call pos:start="4963:13" pos:end="4963:55"><name pos:start="4963:13" pos:end="4963:25">tcg_gen_or_tl</name><argument_list pos:start="4963:26" pos:end="4963:55">(<argument pos:start="4963:27" pos:end="4963:34"><expr pos:start="4963:27" pos:end="4963:34"><name pos:start="4963:27" pos:end="4963:34"><name pos:start="4963:27" pos:end="4963:31">cpu_T</name><index pos:start="4963:32" pos:end="4963:34">[<expr pos:start="4963:33" pos:end="4963:33"><literal type="number" pos:start="4963:33" pos:end="4963:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4963:37" pos:end="4963:44"><expr pos:start="4963:37" pos:end="4963:44"><name pos:start="4963:37" pos:end="4963:44"><name pos:start="4963:37" pos:end="4963:41">cpu_T</name><index pos:start="4963:42" pos:end="4963:44">[<expr pos:start="4963:43" pos:end="4963:43"><literal type="number" pos:start="4963:43" pos:end="4963:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4963:47" pos:end="4963:54"><expr pos:start="4963:47" pos:end="4963:54"><name pos:start="4963:47" pos:end="4963:54">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4965:13" pos:end="4965:18">break;</break>

        <case pos:start="4967:9" pos:end="4967:15">case <expr pos:start="4967:14" pos:end="4967:14"><literal type="number" pos:start="4967:14" pos:end="4967:14">2</literal></expr>:</case>

            <expr_stmt pos:start="4969:13" pos:end="4969:57"><expr pos:start="4969:13" pos:end="4969:56"><call pos:start="4969:13" pos:end="4969:56"><name pos:start="4969:13" pos:end="4969:26">tcg_gen_shr_tl</name><argument_list pos:start="4969:27" pos:end="4969:56">(<argument pos:start="4969:28" pos:end="4969:35"><expr pos:start="4969:28" pos:end="4969:35"><name pos:start="4969:28" pos:end="4969:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4969:38" pos:end="4969:45"><expr pos:start="4969:38" pos:end="4969:45"><name pos:start="4969:38" pos:end="4969:45"><name pos:start="4969:38" pos:end="4969:42">cpu_T</name><index pos:start="4969:43" pos:end="4969:45">[<expr pos:start="4969:44" pos:end="4969:44"><literal type="number" pos:start="4969:44" pos:end="4969:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4969:48" pos:end="4969:55"><expr pos:start="4969:48" pos:end="4969:55"><name pos:start="4969:48" pos:end="4969:55"><name pos:start="4969:48" pos:end="4969:52">cpu_T</name><index pos:start="4969:53" pos:end="4969:55">[<expr pos:start="4969:54" pos:end="4969:54"><literal type="number" pos:start="4969:54" pos:end="4969:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4971:13" pos:end="4971:41"><expr pos:start="4971:13" pos:end="4971:40"><call pos:start="4971:13" pos:end="4971:40"><name pos:start="4971:13" pos:end="4971:27">tcg_gen_movi_tl</name><argument_list pos:start="4971:28" pos:end="4971:40">(<argument pos:start="4971:29" pos:end="4971:36"><expr pos:start="4971:29" pos:end="4971:36"><name pos:start="4971:29" pos:end="4971:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4971:39" pos:end="4971:39"><expr pos:start="4971:39" pos:end="4971:39"><literal type="number" pos:start="4971:39" pos:end="4971:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4973:13" pos:end="4973:57"><expr pos:start="4973:13" pos:end="4973:56"><call pos:start="4973:13" pos:end="4973:56"><name pos:start="4973:13" pos:end="4973:26">tcg_gen_shl_tl</name><argument_list pos:start="4973:27" pos:end="4973:56">(<argument pos:start="4973:28" pos:end="4973:35"><expr pos:start="4973:28" pos:end="4973:35"><name pos:start="4973:28" pos:end="4973:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4973:38" pos:end="4973:45"><expr pos:start="4973:38" pos:end="4973:45"><name pos:start="4973:38" pos:end="4973:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4973:48" pos:end="4973:55"><expr pos:start="4973:48" pos:end="4973:55"><name pos:start="4973:48" pos:end="4973:55"><name pos:start="4973:48" pos:end="4973:52">cpu_T</name><index pos:start="4973:53" pos:end="4973:55">[<expr pos:start="4973:54" pos:end="4973:54"><literal type="number" pos:start="4973:54" pos:end="4973:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4975:13" pos:end="4975:47"><expr pos:start="4975:13" pos:end="4975:46"><call pos:start="4975:13" pos:end="4975:46"><name pos:start="4975:13" pos:end="4975:26">tcg_gen_not_tl</name><argument_list pos:start="4975:27" pos:end="4975:46">(<argument pos:start="4975:28" pos:end="4975:35"><expr pos:start="4975:28" pos:end="4975:35"><name pos:start="4975:28" pos:end="4975:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4975:38" pos:end="4975:45"><expr pos:start="4975:38" pos:end="4975:45"><name pos:start="4975:38" pos:end="4975:45">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4977:13" pos:end="4977:57"><expr pos:start="4977:13" pos:end="4977:56"><call pos:start="4977:13" pos:end="4977:56"><name pos:start="4977:13" pos:end="4977:26">tcg_gen_and_tl</name><argument_list pos:start="4977:27" pos:end="4977:56">(<argument pos:start="4977:28" pos:end="4977:35"><expr pos:start="4977:28" pos:end="4977:35"><name pos:start="4977:28" pos:end="4977:35"><name pos:start="4977:28" pos:end="4977:32">cpu_T</name><index pos:start="4977:33" pos:end="4977:35">[<expr pos:start="4977:34" pos:end="4977:34"><literal type="number" pos:start="4977:34" pos:end="4977:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4977:38" pos:end="4977:45"><expr pos:start="4977:38" pos:end="4977:45"><name pos:start="4977:38" pos:end="4977:45"><name pos:start="4977:38" pos:end="4977:42">cpu_T</name><index pos:start="4977:43" pos:end="4977:45">[<expr pos:start="4977:44" pos:end="4977:44"><literal type="number" pos:start="4977:44" pos:end="4977:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4977:48" pos:end="4977:55"><expr pos:start="4977:48" pos:end="4977:55"><name pos:start="4977:48" pos:end="4977:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4979:13" pos:end="4979:18">break;</break>

        <default pos:start="4981:9" pos:end="4981:16">default:</default>

        <case pos:start="4983:9" pos:end="4983:15">case <expr pos:start="4983:14" pos:end="4983:14"><literal type="number" pos:start="4983:14" pos:end="4983:14">3</literal></expr>:</case>

            <expr_stmt pos:start="4985:13" pos:end="4985:57"><expr pos:start="4985:13" pos:end="4985:56"><call pos:start="4985:13" pos:end="4985:56"><name pos:start="4985:13" pos:end="4985:26">tcg_gen_shr_tl</name><argument_list pos:start="4985:27" pos:end="4985:56">(<argument pos:start="4985:28" pos:end="4985:35"><expr pos:start="4985:28" pos:end="4985:35"><name pos:start="4985:28" pos:end="4985:35">cpu_tmp4</name></expr></argument>, <argument pos:start="4985:38" pos:end="4985:45"><expr pos:start="4985:38" pos:end="4985:45"><name pos:start="4985:38" pos:end="4985:45"><name pos:start="4985:38" pos:end="4985:42">cpu_T</name><index pos:start="4985:43" pos:end="4985:45">[<expr pos:start="4985:44" pos:end="4985:44"><literal type="number" pos:start="4985:44" pos:end="4985:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4985:48" pos:end="4985:55"><expr pos:start="4985:48" pos:end="4985:55"><name pos:start="4985:48" pos:end="4985:55"><name pos:start="4985:48" pos:end="4985:52">cpu_T</name><index pos:start="4985:53" pos:end="4985:55">[<expr pos:start="4985:54" pos:end="4985:54"><literal type="number" pos:start="4985:54" pos:end="4985:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4987:13" pos:end="4987:41"><expr pos:start="4987:13" pos:end="4987:40"><call pos:start="4987:13" pos:end="4987:40"><name pos:start="4987:13" pos:end="4987:27">tcg_gen_movi_tl</name><argument_list pos:start="4987:28" pos:end="4987:40">(<argument pos:start="4987:29" pos:end="4987:36"><expr pos:start="4987:29" pos:end="4987:36"><name pos:start="4987:29" pos:end="4987:36">cpu_tmp0</name></expr></argument>, <argument pos:start="4987:39" pos:end="4987:39"><expr pos:start="4987:39" pos:end="4987:39"><literal type="number" pos:start="4987:39" pos:end="4987:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4989:13" pos:end="4989:57"><expr pos:start="4989:13" pos:end="4989:56"><call pos:start="4989:13" pos:end="4989:56"><name pos:start="4989:13" pos:end="4989:26">tcg_gen_shl_tl</name><argument_list pos:start="4989:27" pos:end="4989:56">(<argument pos:start="4989:28" pos:end="4989:35"><expr pos:start="4989:28" pos:end="4989:35"><name pos:start="4989:28" pos:end="4989:35">cpu_tmp0</name></expr></argument>, <argument pos:start="4989:38" pos:end="4989:45"><expr pos:start="4989:38" pos:end="4989:45"><name pos:start="4989:38" pos:end="4989:45">cpu_tmp0</name></expr></argument>, <argument pos:start="4989:48" pos:end="4989:55"><expr pos:start="4989:48" pos:end="4989:55"><name pos:start="4989:48" pos:end="4989:55"><name pos:start="4989:48" pos:end="4989:52">cpu_T</name><index pos:start="4989:53" pos:end="4989:55">[<expr pos:start="4989:54" pos:end="4989:54"><literal type="number" pos:start="4989:54" pos:end="4989:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4991:13" pos:end="4991:57"><expr pos:start="4991:13" pos:end="4991:56"><call pos:start="4991:13" pos:end="4991:56"><name pos:start="4991:13" pos:end="4991:26">tcg_gen_xor_tl</name><argument_list pos:start="4991:27" pos:end="4991:56">(<argument pos:start="4991:28" pos:end="4991:35"><expr pos:start="4991:28" pos:end="4991:35"><name pos:start="4991:28" pos:end="4991:35"><name pos:start="4991:28" pos:end="4991:32">cpu_T</name><index pos:start="4991:33" pos:end="4991:35">[<expr pos:start="4991:34" pos:end="4991:34"><literal type="number" pos:start="4991:34" pos:end="4991:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4991:38" pos:end="4991:45"><expr pos:start="4991:38" pos:end="4991:45"><name pos:start="4991:38" pos:end="4991:45"><name pos:start="4991:38" pos:end="4991:42">cpu_T</name><index pos:start="4991:43" pos:end="4991:45">[<expr pos:start="4991:44" pos:end="4991:44"><literal type="number" pos:start="4991:44" pos:end="4991:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="4991:48" pos:end="4991:55"><expr pos:start="4991:48" pos:end="4991:55"><name pos:start="4991:48" pos:end="4991:55">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4993:13" pos:end="4993:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="4997:9" pos:end="4997:35"><expr pos:start="4997:9" pos:end="4997:34"><name pos:start="4997:9" pos:end="4997:16"><name pos:start="4997:9" pos:end="4997:9">s</name><operator pos:start="4997:10" pos:end="4997:11">-&gt;</operator><name pos:start="4997:12" pos:end="4997:16">cc_op</name></name> <operator pos:start="4997:18" pos:end="4997:18">=</operator> <name pos:start="4997:20" pos:end="4997:29">CC_OP_SARB</name> <operator pos:start="4997:31" pos:end="4997:31">+</operator> <name pos:start="4997:33" pos:end="4997:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="4999:9" pos:end="5013:9"><if pos:start="4999:9" pos:end="5013:9">if <condition pos:start="4999:12" pos:end="4999:20">(<expr pos:start="4999:13" pos:end="4999:19"><name pos:start="4999:13" pos:end="4999:14">op</name> <operator pos:start="4999:16" pos:end="4999:17">!=</operator> <literal type="number" pos:start="4999:19" pos:end="4999:19">0</literal></expr>)</condition> <block pos:start="4999:22" pos:end="5013:9">{<block_content pos:start="5001:13" pos:end="5011:43">

            <if_stmt pos:start="5001:13" pos:end="5007:42"><if pos:start="5001:13" pos:end="5003:51">if <condition pos:start="5001:16" pos:end="5001:25">(<expr pos:start="5001:17" pos:end="5001:24"><name pos:start="5001:17" pos:end="5001:19">mod</name> <operator pos:start="5001:21" pos:end="5001:22">!=</operator> <literal type="number" pos:start="5001:24" pos:end="5001:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5003:17" pos:end="5003:51"><block_content pos:start="5003:17" pos:end="5003:51">

                <expr_stmt pos:start="5003:17" pos:end="5003:51"><expr pos:start="5003:17" pos:end="5003:50"><call pos:start="5003:17" pos:end="5003:50"><name pos:start="5003:17" pos:end="5003:31">gen_op_st_T0_A0</name><argument_list pos:start="5003:32" pos:end="5003:50">(<argument pos:start="5003:33" pos:end="5003:49"><expr pos:start="5003:33" pos:end="5003:49"><name pos:start="5003:33" pos:end="5003:34">ot</name> <operator pos:start="5003:36" pos:end="5003:36">+</operator> <name pos:start="5003:38" pos:end="5003:49"><name pos:start="5003:38" pos:end="5003:38">s</name><operator pos:start="5003:39" pos:end="5003:40">-&gt;</operator><name pos:start="5003:41" pos:end="5003:49">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="5005:13" pos:end="5007:42">else<block type="pseudo" pos:start="5007:17" pos:end="5007:42"><block_content pos:start="5007:17" pos:end="5007:42">

                <expr_stmt pos:start="5007:17" pos:end="5007:42"><expr pos:start="5007:17" pos:end="5007:41"><call pos:start="5007:17" pos:end="5007:41"><name pos:start="5007:17" pos:end="5007:33">gen_op_mov_reg_T0</name><argument_list pos:start="5007:34" pos:end="5007:41">(<argument pos:start="5007:35" pos:end="5007:36"><expr pos:start="5007:35" pos:end="5007:36"><name pos:start="5007:35" pos:end="5007:36">ot</name></expr></argument>, <argument pos:start="5007:39" pos:end="5007:40"><expr pos:start="5007:39" pos:end="5007:40"><name pos:start="5007:39" pos:end="5007:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="5009:13" pos:end="5009:49"><expr pos:start="5009:13" pos:end="5009:48"><call pos:start="5009:13" pos:end="5009:48"><name pos:start="5009:13" pos:end="5009:26">tcg_gen_mov_tl</name><argument_list pos:start="5009:27" pos:end="5009:48">(<argument pos:start="5009:28" pos:end="5009:37"><expr pos:start="5009:28" pos:end="5009:37"><name pos:start="5009:28" pos:end="5009:37">cpu_cc_src</name></expr></argument>, <argument pos:start="5009:40" pos:end="5009:47"><expr pos:start="5009:40" pos:end="5009:47"><name pos:start="5009:40" pos:end="5009:47">cpu_tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5011:13" pos:end="5011:43"><expr pos:start="5011:13" pos:end="5011:42"><call pos:start="5011:13" pos:end="5011:42"><name pos:start="5011:13" pos:end="5011:27">tcg_gen_movi_tl</name><argument_list pos:start="5011:28" pos:end="5011:42">(<argument pos:start="5011:29" pos:end="5011:38"><expr pos:start="5011:29" pos:end="5011:38"><name pos:start="5011:29" pos:end="5011:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="5011:41" pos:end="5011:41"><expr pos:start="5011:41" pos:end="5011:41"><literal type="number" pos:start="5011:41" pos:end="5011:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5015:9" pos:end="5015:14">break;</break>

    <case pos:start="5017:5" pos:end="5017:15">case <expr pos:start="5017:10" pos:end="5017:14"><literal type="number" pos:start="5017:10" pos:end="5017:14">0x1bc</literal></expr>:</case> <comment type="block" pos:start="5017:17" pos:end="5017:25">/* bsf */</comment>

    <case pos:start="5019:5" pos:end="5019:15">case <expr pos:start="5019:10" pos:end="5019:14"><literal type="number" pos:start="5019:10" pos:end="5019:14">0x1bd</literal></expr>:</case> <comment type="block" pos:start="5019:17" pos:end="5019:25">/* bsr */</comment>

        <block pos:start="5021:9" pos:end="5097:9">{<block_content pos:start="5023:13" pos:end="5095:30">

            <decl_stmt pos:start="5023:13" pos:end="5023:23"><decl pos:start="5023:13" pos:end="5023:22"><type pos:start="5023:13" pos:end="5023:15"><name pos:start="5023:13" pos:end="5023:15">int</name></type> <name pos:start="5023:17" pos:end="5023:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5025:13" pos:end="5025:20"><decl pos:start="5025:13" pos:end="5025:19"><type pos:start="5025:13" pos:end="5025:16"><name pos:start="5025:13" pos:end="5025:16">TCGv</name></type> <name pos:start="5025:18" pos:end="5025:19">t0</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5029:13" pos:end="5029:33"><expr pos:start="5029:13" pos:end="5029:32"><name pos:start="5029:13" pos:end="5029:14">ot</name> <operator pos:start="5029:16" pos:end="5029:16">=</operator> <name pos:start="5029:18" pos:end="5029:22">dflag</name> <operator pos:start="5029:24" pos:end="5029:24">+</operator> <name pos:start="5029:26" pos:end="5029:32">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="5031:13" pos:end="5031:59"><expr pos:start="5031:13" pos:end="5031:58"><name pos:start="5031:13" pos:end="5031:17">modrm</name> <operator pos:start="5031:19" pos:end="5031:19">=</operator> <call pos:start="5031:21" pos:end="5031:58"><name pos:start="5031:21" pos:end="5031:33">cpu_ldub_code</name><argument_list pos:start="5031:34" pos:end="5031:58">(<argument pos:start="5031:35" pos:end="5031:48"><expr pos:start="5031:35" pos:end="5031:48"><name pos:start="5031:35" pos:end="5031:48">cpu_single_env</name></expr></argument>, <argument pos:start="5031:51" pos:end="5031:57"><expr pos:start="5031:51" pos:end="5031:57"><name pos:start="5031:51" pos:end="5031:55"><name pos:start="5031:51" pos:end="5031:51">s</name><operator pos:start="5031:52" pos:end="5031:53">-&gt;</operator><name pos:start="5031:54" pos:end="5031:55">pc</name></name><operator pos:start="5031:56" pos:end="5031:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5033:13" pos:end="5033:45"><expr pos:start="5033:13" pos:end="5033:44"><name pos:start="5033:13" pos:end="5033:15">reg</name> <operator pos:start="5033:17" pos:end="5033:17">=</operator> <operator pos:start="5033:19" pos:end="5033:19">(</operator><operator pos:start="5033:20" pos:end="5033:20">(</operator><name pos:start="5033:21" pos:end="5033:25">modrm</name> <operator pos:start="5033:27" pos:end="5033:28">&gt;&gt;</operator> <literal type="number" pos:start="5033:30" pos:end="5033:30">3</literal><operator pos:start="5033:31" pos:end="5033:31">)</operator> <operator pos:start="5033:33" pos:end="5033:33">&amp;</operator> <literal type="number" pos:start="5033:35" pos:end="5033:35">7</literal><operator pos:start="5033:36" pos:end="5033:36">)</operator> <operator pos:start="5033:38" pos:end="5033:38">|</operator> <name pos:start="5033:40" pos:end="5033:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="5035:13" pos:end="5035:52"><expr pos:start="5035:13" pos:end="5035:51"><call pos:start="5035:13" pos:end="5035:51"><name pos:start="5035:13" pos:end="5035:26">gen_ldst_modrm</name><argument_list pos:start="5035:27" pos:end="5035:51">(<argument pos:start="5035:28" pos:end="5035:28"><expr pos:start="5035:28" pos:end="5035:28"><name pos:start="5035:28" pos:end="5035:28">s</name></expr></argument>,<argument pos:start="5035:30" pos:end="5035:34"><expr pos:start="5035:30" pos:end="5035:34"><name pos:start="5035:30" pos:end="5035:34">modrm</name></expr></argument>, <argument pos:start="5035:37" pos:end="5035:38"><expr pos:start="5035:37" pos:end="5035:38"><name pos:start="5035:37" pos:end="5035:38">ot</name></expr></argument>, <argument pos:start="5035:41" pos:end="5035:47"><expr pos:start="5035:41" pos:end="5035:47"><name pos:start="5035:41" pos:end="5035:47">OR_TMP0</name></expr></argument>, <argument pos:start="5035:50" pos:end="5035:50"><expr pos:start="5035:50" pos:end="5035:50"><literal type="number" pos:start="5035:50" pos:end="5035:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5037:13" pos:end="5037:35"><expr pos:start="5037:13" pos:end="5037:34"><call pos:start="5037:13" pos:end="5037:34"><name pos:start="5037:13" pos:end="5037:20">gen_extu</name><argument_list pos:start="5037:21" pos:end="5037:34">(<argument pos:start="5037:22" pos:end="5037:23"><expr pos:start="5037:22" pos:end="5037:23"><name pos:start="5037:22" pos:end="5037:23">ot</name></expr></argument>, <argument pos:start="5037:26" pos:end="5037:33"><expr pos:start="5037:26" pos:end="5037:33"><name pos:start="5037:26" pos:end="5037:33"><name pos:start="5037:26" pos:end="5037:30">cpu_T</name><index pos:start="5037:31" pos:end="5037:33">[<expr pos:start="5037:32" pos:end="5037:32"><literal type="number" pos:start="5037:32" pos:end="5037:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5039:13" pos:end="5039:38"><expr pos:start="5039:13" pos:end="5039:37"><name pos:start="5039:13" pos:end="5039:14">t0</name> <operator pos:start="5039:16" pos:end="5039:16">=</operator> <call pos:start="5039:18" pos:end="5039:37"><name pos:start="5039:18" pos:end="5039:35">tcg_temp_local_new</name><argument_list pos:start="5039:36" pos:end="5039:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5041:13" pos:end="5041:41"><expr pos:start="5041:13" pos:end="5041:40"><call pos:start="5041:13" pos:end="5041:40"><name pos:start="5041:13" pos:end="5041:26">tcg_gen_mov_tl</name><argument_list pos:start="5041:27" pos:end="5041:40">(<argument pos:start="5041:28" pos:end="5041:29"><expr pos:start="5041:28" pos:end="5041:29"><name pos:start="5041:28" pos:end="5041:29">t0</name></expr></argument>, <argument pos:start="5041:32" pos:end="5041:39"><expr pos:start="5041:32" pos:end="5041:39"><name pos:start="5041:32" pos:end="5041:39"><name pos:start="5041:32" pos:end="5041:36">cpu_T</name><index pos:start="5041:37" pos:end="5041:39">[<expr pos:start="5041:38" pos:end="5041:38"><literal type="number" pos:start="5041:38" pos:end="5041:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5043:13" pos:end="5093:13"><if pos:start="5043:13" pos:end="5065:13">if <condition pos:start="5043:16" pos:end="5045:58">(<expr pos:start="5043:17" pos:end="5045:57"><operator pos:start="5043:17" pos:end="5043:17">(</operator><name pos:start="5043:18" pos:end="5043:18">b</name> <operator pos:start="5043:20" pos:end="5043:20">&amp;</operator> <literal type="number" pos:start="5043:22" pos:end="5043:22">1</literal><operator pos:start="5043:23" pos:end="5043:23">)</operator> <operator pos:start="5043:25" pos:end="5043:26">&amp;&amp;</operator> <operator pos:start="5043:28" pos:end="5043:28">(</operator><name pos:start="5043:29" pos:end="5043:36">prefixes</name> <operator pos:start="5043:38" pos:end="5043:38">&amp;</operator> <name pos:start="5043:40" pos:end="5043:50">PREFIX_REPZ</name><operator pos:start="5043:51" pos:end="5043:51">)</operator> <operator pos:start="5043:53" pos:end="5043:54">&amp;&amp;</operator>

                <operator pos:start="5045:17" pos:end="5045:17">(</operator><name pos:start="5045:18" pos:end="5045:39"><name pos:start="5045:18" pos:end="5045:18">s</name><operator pos:start="5045:19" pos:end="5045:20">-&gt;</operator><name pos:start="5045:21" pos:end="5045:39">cpuid_ext3_features</name></name> <operator pos:start="5045:41" pos:end="5045:41">&amp;</operator> <name pos:start="5045:43" pos:end="5045:56">CPUID_EXT3_ABM</name><operator pos:start="5045:57" pos:end="5045:57">)</operator></expr>)</condition> <block pos:start="5045:60" pos:end="5065:13">{<block_content pos:start="5047:17" pos:end="5063:43">

                <switch pos:start="5047:17" pos:end="5061:17">switch<condition pos:start="5047:23" pos:end="5047:26">(<expr pos:start="5047:24" pos:end="5047:25"><name pos:start="5047:24" pos:end="5047:25">ot</name></expr>)</condition> <block pos:start="5047:28" pos:end="5061:17">{<block_content pos:start="5049:17" pos:end="5059:46">

                <case pos:start="5049:17" pos:end="5049:29">case <expr pos:start="5049:22" pos:end="5049:28"><name pos:start="5049:22" pos:end="5049:28">OT_WORD</name></expr>:</case> <expr_stmt pos:start="5049:31" pos:end="5051:39"><expr pos:start="5049:31" pos:end="5051:38"><call pos:start="5049:31" pos:end="5051:38"><name pos:start="5049:31" pos:end="5049:46">gen_helper_lzcnt</name><argument_list pos:start="5049:47" pos:end="5051:38">(<argument pos:start="5049:48" pos:end="5049:55"><expr pos:start="5049:48" pos:end="5049:55"><name pos:start="5049:48" pos:end="5049:55"><name pos:start="5049:48" pos:end="5049:52">cpu_T</name><index pos:start="5049:53" pos:end="5049:55">[<expr pos:start="5049:54" pos:end="5049:54"><literal type="number" pos:start="5049:54" pos:end="5049:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5049:58" pos:end="5049:59"><expr pos:start="5049:58" pos:end="5049:59"><name pos:start="5049:58" pos:end="5049:59">t0</name></expr></argument>,

                    <argument pos:start="5051:21" pos:end="5051:37"><expr pos:start="5051:21" pos:end="5051:37"><call pos:start="5051:21" pos:end="5051:37"><name pos:start="5051:21" pos:end="5051:33">tcg_const_i32</name><argument_list pos:start="5051:34" pos:end="5051:37">(<argument pos:start="5051:35" pos:end="5051:36"><expr pos:start="5051:35" pos:end="5051:36"><literal type="number" pos:start="5051:35" pos:end="5051:36">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="5051:41" pos:end="5051:46">break;</break>

                <case pos:start="5053:17" pos:end="5053:29">case <expr pos:start="5053:22" pos:end="5053:28"><name pos:start="5053:22" pos:end="5053:28">OT_LONG</name></expr>:</case> <expr_stmt pos:start="5053:31" pos:end="5055:39"><expr pos:start="5053:31" pos:end="5055:38"><call pos:start="5053:31" pos:end="5055:38"><name pos:start="5053:31" pos:end="5053:46">gen_helper_lzcnt</name><argument_list pos:start="5053:47" pos:end="5055:38">(<argument pos:start="5053:48" pos:end="5053:55"><expr pos:start="5053:48" pos:end="5053:55"><name pos:start="5053:48" pos:end="5053:55"><name pos:start="5053:48" pos:end="5053:52">cpu_T</name><index pos:start="5053:53" pos:end="5053:55">[<expr pos:start="5053:54" pos:end="5053:54"><literal type="number" pos:start="5053:54" pos:end="5053:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5053:58" pos:end="5053:59"><expr pos:start="5053:58" pos:end="5053:59"><name pos:start="5053:58" pos:end="5053:59">t0</name></expr></argument>,

                    <argument pos:start="5055:21" pos:end="5055:37"><expr pos:start="5055:21" pos:end="5055:37"><call pos:start="5055:21" pos:end="5055:37"><name pos:start="5055:21" pos:end="5055:33">tcg_const_i32</name><argument_list pos:start="5055:34" pos:end="5055:37">(<argument pos:start="5055:35" pos:end="5055:36"><expr pos:start="5055:35" pos:end="5055:36"><literal type="number" pos:start="5055:35" pos:end="5055:36">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="5055:41" pos:end="5055:46">break;</break>

                <case pos:start="5057:17" pos:end="5057:29">case <expr pos:start="5057:22" pos:end="5057:28"><name pos:start="5057:22" pos:end="5057:28">OT_QUAD</name></expr>:</case> <expr_stmt pos:start="5057:31" pos:end="5059:39"><expr pos:start="5057:31" pos:end="5059:38"><call pos:start="5057:31" pos:end="5059:38"><name pos:start="5057:31" pos:end="5057:46">gen_helper_lzcnt</name><argument_list pos:start="5057:47" pos:end="5059:38">(<argument pos:start="5057:48" pos:end="5057:55"><expr pos:start="5057:48" pos:end="5057:55"><name pos:start="5057:48" pos:end="5057:55"><name pos:start="5057:48" pos:end="5057:52">cpu_T</name><index pos:start="5057:53" pos:end="5057:55">[<expr pos:start="5057:54" pos:end="5057:54"><literal type="number" pos:start="5057:54" pos:end="5057:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5057:58" pos:end="5057:59"><expr pos:start="5057:58" pos:end="5057:59"><name pos:start="5057:58" pos:end="5057:59">t0</name></expr></argument>,

                    <argument pos:start="5059:21" pos:end="5059:37"><expr pos:start="5059:21" pos:end="5059:37"><call pos:start="5059:21" pos:end="5059:37"><name pos:start="5059:21" pos:end="5059:33">tcg_const_i32</name><argument_list pos:start="5059:34" pos:end="5059:37">(<argument pos:start="5059:35" pos:end="5059:36"><expr pos:start="5059:35" pos:end="5059:36"><literal type="number" pos:start="5059:35" pos:end="5059:36">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="5059:41" pos:end="5059:46">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="5063:17" pos:end="5063:43"><expr pos:start="5063:17" pos:end="5063:42"><call pos:start="5063:17" pos:end="5063:42"><name pos:start="5063:17" pos:end="5063:33">gen_op_mov_reg_T0</name><argument_list pos:start="5063:34" pos:end="5063:42">(<argument pos:start="5063:35" pos:end="5063:36"><expr pos:start="5063:35" pos:end="5063:36"><name pos:start="5063:35" pos:end="5063:36">ot</name></expr></argument>, <argument pos:start="5063:39" pos:end="5063:41"><expr pos:start="5063:39" pos:end="5063:41"><name pos:start="5063:39" pos:end="5063:41">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5065:15" pos:end="5093:13">else <block pos:start="5065:20" pos:end="5093:13">{<block_content pos:start="5067:17" pos:end="5091:45">

                <expr_stmt pos:start="5067:17" pos:end="5067:41"><expr pos:start="5067:17" pos:end="5067:40"><name pos:start="5067:17" pos:end="5067:22">label1</name> <operator pos:start="5067:24" pos:end="5067:24">=</operator> <call pos:start="5067:26" pos:end="5067:40"><name pos:start="5067:26" pos:end="5067:38">gen_new_label</name><argument_list pos:start="5067:39" pos:end="5067:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5069:17" pos:end="5069:47"><expr pos:start="5069:17" pos:end="5069:46"><call pos:start="5069:17" pos:end="5069:46"><name pos:start="5069:17" pos:end="5069:31">tcg_gen_movi_tl</name><argument_list pos:start="5069:32" pos:end="5069:46">(<argument pos:start="5069:33" pos:end="5069:42"><expr pos:start="5069:33" pos:end="5069:42"><name pos:start="5069:33" pos:end="5069:42">cpu_cc_dst</name></expr></argument>, <argument pos:start="5069:45" pos:end="5069:45"><expr pos:start="5069:45" pos:end="5069:45"><literal type="number" pos:start="5069:45" pos:end="5069:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5071:17" pos:end="5071:63"><expr pos:start="5071:17" pos:end="5071:62"><call pos:start="5071:17" pos:end="5071:62"><name pos:start="5071:17" pos:end="5071:34">tcg_gen_brcondi_tl</name><argument_list pos:start="5071:35" pos:end="5071:62">(<argument pos:start="5071:36" pos:end="5071:46"><expr pos:start="5071:36" pos:end="5071:46"><name pos:start="5071:36" pos:end="5071:46">TCG_COND_EQ</name></expr></argument>, <argument pos:start="5071:49" pos:end="5071:50"><expr pos:start="5071:49" pos:end="5071:50"><name pos:start="5071:49" pos:end="5071:50">t0</name></expr></argument>, <argument pos:start="5071:53" pos:end="5071:53"><expr pos:start="5071:53" pos:end="5071:53"><literal type="number" pos:start="5071:53" pos:end="5071:53">0</literal></expr></argument>, <argument pos:start="5071:56" pos:end="5071:61"><expr pos:start="5071:56" pos:end="5071:61"><name pos:start="5071:56" pos:end="5071:61">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5073:17" pos:end="5081:17"><if pos:start="5073:17" pos:end="5077:17">if <condition pos:start="5073:20" pos:end="5073:26">(<expr pos:start="5073:21" pos:end="5073:25"><name pos:start="5073:21" pos:end="5073:21">b</name> <operator pos:start="5073:23" pos:end="5073:23">&amp;</operator> <literal type="number" pos:start="5073:25" pos:end="5073:25">1</literal></expr>)</condition> <block pos:start="5073:28" pos:end="5077:17">{<block_content pos:start="5075:21" pos:end="5075:49">

                    <expr_stmt pos:start="5075:21" pos:end="5075:49"><expr pos:start="5075:21" pos:end="5075:48"><call pos:start="5075:21" pos:end="5075:48"><name pos:start="5075:21" pos:end="5075:34">gen_helper_bsr</name><argument_list pos:start="5075:35" pos:end="5075:48">(<argument pos:start="5075:36" pos:end="5075:43"><expr pos:start="5075:36" pos:end="5075:43"><name pos:start="5075:36" pos:end="5075:43"><name pos:start="5075:36" pos:end="5075:40">cpu_T</name><index pos:start="5075:41" pos:end="5075:43">[<expr pos:start="5075:42" pos:end="5075:42"><literal type="number" pos:start="5075:42" pos:end="5075:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5075:46" pos:end="5075:47"><expr pos:start="5075:46" pos:end="5075:47"><name pos:start="5075:46" pos:end="5075:47">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="5077:19" pos:end="5081:17">else <block pos:start="5077:24" pos:end="5081:17">{<block_content pos:start="5079:21" pos:end="5079:49">

                    <expr_stmt pos:start="5079:21" pos:end="5079:49"><expr pos:start="5079:21" pos:end="5079:48"><call pos:start="5079:21" pos:end="5079:48"><name pos:start="5079:21" pos:end="5079:34">gen_helper_bsf</name><argument_list pos:start="5079:35" pos:end="5079:48">(<argument pos:start="5079:36" pos:end="5079:43"><expr pos:start="5079:36" pos:end="5079:43"><name pos:start="5079:36" pos:end="5079:43"><name pos:start="5079:36" pos:end="5079:40">cpu_T</name><index pos:start="5079:41" pos:end="5079:43">[<expr pos:start="5079:42" pos:end="5079:42"><literal type="number" pos:start="5079:42" pos:end="5079:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5079:46" pos:end="5079:47"><expr pos:start="5079:46" pos:end="5079:47"><name pos:start="5079:46" pos:end="5079:47">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="5083:17" pos:end="5083:43"><expr pos:start="5083:17" pos:end="5083:42"><call pos:start="5083:17" pos:end="5083:42"><name pos:start="5083:17" pos:end="5083:33">gen_op_mov_reg_T0</name><argument_list pos:start="5083:34" pos:end="5083:42">(<argument pos:start="5083:35" pos:end="5083:36"><expr pos:start="5083:35" pos:end="5083:36"><name pos:start="5083:35" pos:end="5083:36">ot</name></expr></argument>, <argument pos:start="5083:39" pos:end="5083:41"><expr pos:start="5083:39" pos:end="5083:41"><name pos:start="5083:39" pos:end="5083:41">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5085:17" pos:end="5085:47"><expr pos:start="5085:17" pos:end="5085:46"><call pos:start="5085:17" pos:end="5085:46"><name pos:start="5085:17" pos:end="5085:31">tcg_gen_movi_tl</name><argument_list pos:start="5085:32" pos:end="5085:46">(<argument pos:start="5085:33" pos:end="5085:42"><expr pos:start="5085:33" pos:end="5085:42"><name pos:start="5085:33" pos:end="5085:42">cpu_cc_dst</name></expr></argument>, <argument pos:start="5085:45" pos:end="5085:45"><expr pos:start="5085:45" pos:end="5085:45"><literal type="number" pos:start="5085:45" pos:end="5085:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5087:17" pos:end="5087:38"><expr pos:start="5087:17" pos:end="5087:37"><call pos:start="5087:17" pos:end="5087:37"><name pos:start="5087:17" pos:end="5087:29">gen_set_label</name><argument_list pos:start="5087:30" pos:end="5087:37">(<argument pos:start="5087:31" pos:end="5087:36"><expr pos:start="5087:31" pos:end="5087:36"><name pos:start="5087:31" pos:end="5087:36">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5089:17" pos:end="5089:47"><expr pos:start="5089:17" pos:end="5089:46"><call pos:start="5089:17" pos:end="5089:46"><name pos:start="5089:17" pos:end="5089:34">tcg_gen_discard_tl</name><argument_list pos:start="5089:35" pos:end="5089:46">(<argument pos:start="5089:36" pos:end="5089:45"><expr pos:start="5089:36" pos:end="5089:45"><name pos:start="5089:36" pos:end="5089:45">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5091:17" pos:end="5091:45"><expr pos:start="5091:17" pos:end="5091:44"><name pos:start="5091:17" pos:end="5091:24"><name pos:start="5091:17" pos:end="5091:17">s</name><operator pos:start="5091:18" pos:end="5091:19">-&gt;</operator><name pos:start="5091:20" pos:end="5091:24">cc_op</name></name> <operator pos:start="5091:26" pos:end="5091:26">=</operator> <name pos:start="5091:28" pos:end="5091:39">CC_OP_LOGICB</name> <operator pos:start="5091:41" pos:end="5091:41">+</operator> <name pos:start="5091:43" pos:end="5091:44">ot</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="5095:13" pos:end="5095:30"><expr pos:start="5095:13" pos:end="5095:29"><call pos:start="5095:13" pos:end="5095:29"><name pos:start="5095:13" pos:end="5095:25">tcg_temp_free</name><argument_list pos:start="5095:26" pos:end="5095:29">(<argument pos:start="5095:27" pos:end="5095:28"><expr pos:start="5095:27" pos:end="5095:28"><name pos:start="5095:27" pos:end="5095:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5099:9" pos:end="5099:14">break;</break>

        <comment type="block" format="doxygen" pos:start="5101:9" pos:end="5101:34">/************************/</comment>

        <comment type="block" pos:start="5103:9" pos:end="5103:17">/* bcd */</comment>

    <case pos:start="5105:5" pos:end="5105:14">case <expr pos:start="5105:10" pos:end="5105:13"><literal type="number" pos:start="5105:10" pos:end="5105:13">0x27</literal></expr>:</case> <comment type="block" pos:start="5105:16" pos:end="5105:24">/* daa */</comment>

        <if_stmt pos:start="5107:9" pos:end="5109:28"><if pos:start="5107:9" pos:end="5109:28">if <condition pos:start="5107:12" pos:end="5107:22">(<expr pos:start="5107:13" pos:end="5107:21"><call pos:start="5107:13" pos:end="5107:21"><name pos:start="5107:13" pos:end="5107:18">CODE64</name><argument_list pos:start="5107:19" pos:end="5107:21">(<argument pos:start="5107:20" pos:end="5107:20"><expr pos:start="5107:20" pos:end="5107:20"><name pos:start="5107:20" pos:end="5107:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5109:13" pos:end="5109:28"><block_content pos:start="5109:13" pos:end="5109:28">

            <goto pos:start="5109:13" pos:end="5109:28">goto <name pos:start="5109:18" pos:end="5109:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5111:9" pos:end="5113:39"><if pos:start="5111:9" pos:end="5113:39">if <condition pos:start="5111:12" pos:end="5111:38">(<expr pos:start="5111:13" pos:end="5111:37"><name pos:start="5111:13" pos:end="5111:20"><name pos:start="5111:13" pos:end="5111:13">s</name><operator pos:start="5111:14" pos:end="5111:15">-&gt;</operator><name pos:start="5111:16" pos:end="5111:20">cc_op</name></name> <operator pos:start="5111:22" pos:end="5111:23">!=</operator> <name pos:start="5111:25" pos:end="5111:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5113:13" pos:end="5113:39"><block_content pos:start="5113:13" pos:end="5113:39">

            <expr_stmt pos:start="5113:13" pos:end="5113:39"><expr pos:start="5113:13" pos:end="5113:38"><call pos:start="5113:13" pos:end="5113:38"><name pos:start="5113:13" pos:end="5113:28">gen_op_set_cc_op</name><argument_list pos:start="5113:29" pos:end="5113:38">(<argument pos:start="5113:30" pos:end="5113:37"><expr pos:start="5113:30" pos:end="5113:37"><name pos:start="5113:30" pos:end="5113:37"><name pos:start="5113:30" pos:end="5113:30">s</name><operator pos:start="5113:31" pos:end="5113:32">-&gt;</operator><name pos:start="5113:33" pos:end="5113:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5115:9" pos:end="5115:32"><expr pos:start="5115:9" pos:end="5115:31"><call pos:start="5115:9" pos:end="5115:31"><name pos:start="5115:9" pos:end="5115:22">gen_helper_daa</name><argument_list pos:start="5115:23" pos:end="5115:31">(<argument pos:start="5115:24" pos:end="5115:30"><expr pos:start="5115:24" pos:end="5115:30"><name pos:start="5115:24" pos:end="5115:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5117:9" pos:end="5117:32"><expr pos:start="5117:9" pos:end="5117:31"><name pos:start="5117:9" pos:end="5117:16"><name pos:start="5117:9" pos:end="5117:9">s</name><operator pos:start="5117:10" pos:end="5117:11">-&gt;</operator><name pos:start="5117:12" pos:end="5117:16">cc_op</name></name> <operator pos:start="5117:18" pos:end="5117:18">=</operator> <name pos:start="5117:20" pos:end="5117:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5119:9" pos:end="5119:14">break;</break>

    <case pos:start="5121:5" pos:end="5121:14">case <expr pos:start="5121:10" pos:end="5121:13"><literal type="number" pos:start="5121:10" pos:end="5121:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="5121:16" pos:end="5121:24">/* das */</comment>

        <if_stmt pos:start="5123:9" pos:end="5125:28"><if pos:start="5123:9" pos:end="5125:28">if <condition pos:start="5123:12" pos:end="5123:22">(<expr pos:start="5123:13" pos:end="5123:21"><call pos:start="5123:13" pos:end="5123:21"><name pos:start="5123:13" pos:end="5123:18">CODE64</name><argument_list pos:start="5123:19" pos:end="5123:21">(<argument pos:start="5123:20" pos:end="5123:20"><expr pos:start="5123:20" pos:end="5123:20"><name pos:start="5123:20" pos:end="5123:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5125:13" pos:end="5125:28"><block_content pos:start="5125:13" pos:end="5125:28">

            <goto pos:start="5125:13" pos:end="5125:28">goto <name pos:start="5125:18" pos:end="5125:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5127:9" pos:end="5129:39"><if pos:start="5127:9" pos:end="5129:39">if <condition pos:start="5127:12" pos:end="5127:38">(<expr pos:start="5127:13" pos:end="5127:37"><name pos:start="5127:13" pos:end="5127:20"><name pos:start="5127:13" pos:end="5127:13">s</name><operator pos:start="5127:14" pos:end="5127:15">-&gt;</operator><name pos:start="5127:16" pos:end="5127:20">cc_op</name></name> <operator pos:start="5127:22" pos:end="5127:23">!=</operator> <name pos:start="5127:25" pos:end="5127:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5129:13" pos:end="5129:39"><block_content pos:start="5129:13" pos:end="5129:39">

            <expr_stmt pos:start="5129:13" pos:end="5129:39"><expr pos:start="5129:13" pos:end="5129:38"><call pos:start="5129:13" pos:end="5129:38"><name pos:start="5129:13" pos:end="5129:28">gen_op_set_cc_op</name><argument_list pos:start="5129:29" pos:end="5129:38">(<argument pos:start="5129:30" pos:end="5129:37"><expr pos:start="5129:30" pos:end="5129:37"><name pos:start="5129:30" pos:end="5129:37"><name pos:start="5129:30" pos:end="5129:30">s</name><operator pos:start="5129:31" pos:end="5129:32">-&gt;</operator><name pos:start="5129:33" pos:end="5129:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5131:9" pos:end="5131:32"><expr pos:start="5131:9" pos:end="5131:31"><call pos:start="5131:9" pos:end="5131:31"><name pos:start="5131:9" pos:end="5131:22">gen_helper_das</name><argument_list pos:start="5131:23" pos:end="5131:31">(<argument pos:start="5131:24" pos:end="5131:30"><expr pos:start="5131:24" pos:end="5131:30"><name pos:start="5131:24" pos:end="5131:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5133:9" pos:end="5133:32"><expr pos:start="5133:9" pos:end="5133:31"><name pos:start="5133:9" pos:end="5133:16"><name pos:start="5133:9" pos:end="5133:9">s</name><operator pos:start="5133:10" pos:end="5133:11">-&gt;</operator><name pos:start="5133:12" pos:end="5133:16">cc_op</name></name> <operator pos:start="5133:18" pos:end="5133:18">=</operator> <name pos:start="5133:20" pos:end="5133:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5135:9" pos:end="5135:14">break;</break>

    <case pos:start="5137:5" pos:end="5137:14">case <expr pos:start="5137:10" pos:end="5137:13"><literal type="number" pos:start="5137:10" pos:end="5137:13">0x37</literal></expr>:</case> <comment type="block" pos:start="5137:16" pos:end="5137:24">/* aaa */</comment>

        <if_stmt pos:start="5139:9" pos:end="5141:28"><if pos:start="5139:9" pos:end="5141:28">if <condition pos:start="5139:12" pos:end="5139:22">(<expr pos:start="5139:13" pos:end="5139:21"><call pos:start="5139:13" pos:end="5139:21"><name pos:start="5139:13" pos:end="5139:18">CODE64</name><argument_list pos:start="5139:19" pos:end="5139:21">(<argument pos:start="5139:20" pos:end="5139:20"><expr pos:start="5139:20" pos:end="5139:20"><name pos:start="5139:20" pos:end="5139:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5141:13" pos:end="5141:28"><block_content pos:start="5141:13" pos:end="5141:28">

            <goto pos:start="5141:13" pos:end="5141:28">goto <name pos:start="5141:18" pos:end="5141:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5143:9" pos:end="5145:39"><if pos:start="5143:9" pos:end="5145:39">if <condition pos:start="5143:12" pos:end="5143:38">(<expr pos:start="5143:13" pos:end="5143:37"><name pos:start="5143:13" pos:end="5143:20"><name pos:start="5143:13" pos:end="5143:13">s</name><operator pos:start="5143:14" pos:end="5143:15">-&gt;</operator><name pos:start="5143:16" pos:end="5143:20">cc_op</name></name> <operator pos:start="5143:22" pos:end="5143:23">!=</operator> <name pos:start="5143:25" pos:end="5143:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5145:13" pos:end="5145:39"><block_content pos:start="5145:13" pos:end="5145:39">

            <expr_stmt pos:start="5145:13" pos:end="5145:39"><expr pos:start="5145:13" pos:end="5145:38"><call pos:start="5145:13" pos:end="5145:38"><name pos:start="5145:13" pos:end="5145:28">gen_op_set_cc_op</name><argument_list pos:start="5145:29" pos:end="5145:38">(<argument pos:start="5145:30" pos:end="5145:37"><expr pos:start="5145:30" pos:end="5145:37"><name pos:start="5145:30" pos:end="5145:37"><name pos:start="5145:30" pos:end="5145:30">s</name><operator pos:start="5145:31" pos:end="5145:32">-&gt;</operator><name pos:start="5145:33" pos:end="5145:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5147:9" pos:end="5147:32"><expr pos:start="5147:9" pos:end="5147:31"><call pos:start="5147:9" pos:end="5147:31"><name pos:start="5147:9" pos:end="5147:22">gen_helper_aaa</name><argument_list pos:start="5147:23" pos:end="5147:31">(<argument pos:start="5147:24" pos:end="5147:30"><expr pos:start="5147:24" pos:end="5147:30"><name pos:start="5147:24" pos:end="5147:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5149:9" pos:end="5149:32"><expr pos:start="5149:9" pos:end="5149:31"><name pos:start="5149:9" pos:end="5149:16"><name pos:start="5149:9" pos:end="5149:9">s</name><operator pos:start="5149:10" pos:end="5149:11">-&gt;</operator><name pos:start="5149:12" pos:end="5149:16">cc_op</name></name> <operator pos:start="5149:18" pos:end="5149:18">=</operator> <name pos:start="5149:20" pos:end="5149:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5151:9" pos:end="5151:14">break;</break>

    <case pos:start="5153:5" pos:end="5153:14">case <expr pos:start="5153:10" pos:end="5153:13"><literal type="number" pos:start="5153:10" pos:end="5153:13">0x3f</literal></expr>:</case> <comment type="block" pos:start="5153:16" pos:end="5153:24">/* aas */</comment>

        <if_stmt pos:start="5155:9" pos:end="5157:28"><if pos:start="5155:9" pos:end="5157:28">if <condition pos:start="5155:12" pos:end="5155:22">(<expr pos:start="5155:13" pos:end="5155:21"><call pos:start="5155:13" pos:end="5155:21"><name pos:start="5155:13" pos:end="5155:18">CODE64</name><argument_list pos:start="5155:19" pos:end="5155:21">(<argument pos:start="5155:20" pos:end="5155:20"><expr pos:start="5155:20" pos:end="5155:20"><name pos:start="5155:20" pos:end="5155:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5157:13" pos:end="5157:28"><block_content pos:start="5157:13" pos:end="5157:28">

            <goto pos:start="5157:13" pos:end="5157:28">goto <name pos:start="5157:18" pos:end="5157:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5159:9" pos:end="5161:39"><if pos:start="5159:9" pos:end="5161:39">if <condition pos:start="5159:12" pos:end="5159:38">(<expr pos:start="5159:13" pos:end="5159:37"><name pos:start="5159:13" pos:end="5159:20"><name pos:start="5159:13" pos:end="5159:13">s</name><operator pos:start="5159:14" pos:end="5159:15">-&gt;</operator><name pos:start="5159:16" pos:end="5159:20">cc_op</name></name> <operator pos:start="5159:22" pos:end="5159:23">!=</operator> <name pos:start="5159:25" pos:end="5159:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5161:13" pos:end="5161:39"><block_content pos:start="5161:13" pos:end="5161:39">

            <expr_stmt pos:start="5161:13" pos:end="5161:39"><expr pos:start="5161:13" pos:end="5161:38"><call pos:start="5161:13" pos:end="5161:38"><name pos:start="5161:13" pos:end="5161:28">gen_op_set_cc_op</name><argument_list pos:start="5161:29" pos:end="5161:38">(<argument pos:start="5161:30" pos:end="5161:37"><expr pos:start="5161:30" pos:end="5161:37"><name pos:start="5161:30" pos:end="5161:37"><name pos:start="5161:30" pos:end="5161:30">s</name><operator pos:start="5161:31" pos:end="5161:32">-&gt;</operator><name pos:start="5161:33" pos:end="5161:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5163:9" pos:end="5163:32"><expr pos:start="5163:9" pos:end="5163:31"><call pos:start="5163:9" pos:end="5163:31"><name pos:start="5163:9" pos:end="5163:22">gen_helper_aas</name><argument_list pos:start="5163:23" pos:end="5163:31">(<argument pos:start="5163:24" pos:end="5163:30"><expr pos:start="5163:24" pos:end="5163:30"><name pos:start="5163:24" pos:end="5163:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5165:9" pos:end="5165:32"><expr pos:start="5165:9" pos:end="5165:31"><name pos:start="5165:9" pos:end="5165:16"><name pos:start="5165:9" pos:end="5165:9">s</name><operator pos:start="5165:10" pos:end="5165:11">-&gt;</operator><name pos:start="5165:12" pos:end="5165:16">cc_op</name></name> <operator pos:start="5165:18" pos:end="5165:18">=</operator> <name pos:start="5165:20" pos:end="5165:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="5167:9" pos:end="5167:14">break;</break>

    <case pos:start="5169:5" pos:end="5169:14">case <expr pos:start="5169:10" pos:end="5169:13"><literal type="number" pos:start="5169:10" pos:end="5169:13">0xd4</literal></expr>:</case> <comment type="block" pos:start="5169:16" pos:end="5169:24">/* aam */</comment>

        <if_stmt pos:start="5171:9" pos:end="5173:28"><if pos:start="5171:9" pos:end="5173:28">if <condition pos:start="5171:12" pos:end="5171:22">(<expr pos:start="5171:13" pos:end="5171:21"><call pos:start="5171:13" pos:end="5171:21"><name pos:start="5171:13" pos:end="5171:18">CODE64</name><argument_list pos:start="5171:19" pos:end="5171:21">(<argument pos:start="5171:20" pos:end="5171:20"><expr pos:start="5171:20" pos:end="5171:20"><name pos:start="5171:20" pos:end="5171:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5173:13" pos:end="5173:28"><block_content pos:start="5173:13" pos:end="5173:28">

            <goto pos:start="5173:13" pos:end="5173:28">goto <name pos:start="5173:18" pos:end="5173:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5175:9" pos:end="5175:53"><expr pos:start="5175:9" pos:end="5175:52"><name pos:start="5175:9" pos:end="5175:11">val</name> <operator pos:start="5175:13" pos:end="5175:13">=</operator> <call pos:start="5175:15" pos:end="5175:52"><name pos:start="5175:15" pos:end="5175:27">cpu_ldub_code</name><argument_list pos:start="5175:28" pos:end="5175:52">(<argument pos:start="5175:29" pos:end="5175:42"><expr pos:start="5175:29" pos:end="5175:42"><name pos:start="5175:29" pos:end="5175:42">cpu_single_env</name></expr></argument>, <argument pos:start="5175:45" pos:end="5175:51"><expr pos:start="5175:45" pos:end="5175:51"><name pos:start="5175:45" pos:end="5175:49"><name pos:start="5175:45" pos:end="5175:45">s</name><operator pos:start="5175:46" pos:end="5175:47">-&gt;</operator><name pos:start="5175:48" pos:end="5175:49">pc</name></name><operator pos:start="5175:50" pos:end="5175:51">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5177:9" pos:end="5187:9"><if pos:start="5177:9" pos:end="5181:9">if <condition pos:start="5177:12" pos:end="5177:21">(<expr pos:start="5177:13" pos:end="5177:20"><name pos:start="5177:13" pos:end="5177:15">val</name> <operator pos:start="5177:17" pos:end="5177:18">==</operator> <literal type="number" pos:start="5177:20" pos:end="5177:20">0</literal></expr>)</condition> <block pos:start="5177:23" pos:end="5181:9">{<block_content pos:start="5179:13" pos:end="5179:65">

            <expr_stmt pos:start="5179:13" pos:end="5179:65"><expr pos:start="5179:13" pos:end="5179:64"><call pos:start="5179:13" pos:end="5179:64"><name pos:start="5179:13" pos:end="5179:25">gen_exception</name><argument_list pos:start="5179:26" pos:end="5179:64">(<argument pos:start="5179:27" pos:end="5179:27"><expr pos:start="5179:27" pos:end="5179:27"><name pos:start="5179:27" pos:end="5179:27">s</name></expr></argument>, <argument pos:start="5179:30" pos:end="5179:40"><expr pos:start="5179:30" pos:end="5179:40"><name pos:start="5179:30" pos:end="5179:40">EXCP00_DIVZ</name></expr></argument>, <argument pos:start="5179:43" pos:end="5179:63"><expr pos:start="5179:43" pos:end="5179:63"><name pos:start="5179:43" pos:end="5179:50">pc_start</name> <operator pos:start="5179:52" pos:end="5179:52">-</operator> <name pos:start="5179:54" pos:end="5179:63"><name pos:start="5179:54" pos:end="5179:54">s</name><operator pos:start="5179:55" pos:end="5179:56">-&gt;</operator><name pos:start="5179:57" pos:end="5179:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5181:11" pos:end="5187:9">else <block pos:start="5181:16" pos:end="5187:9">{<block_content pos:start="5183:13" pos:end="5185:36">

            <expr_stmt pos:start="5183:13" pos:end="5183:56"><expr pos:start="5183:13" pos:end="5183:55"><call pos:start="5183:13" pos:end="5183:55"><name pos:start="5183:13" pos:end="5183:26">gen_helper_aam</name><argument_list pos:start="5183:27" pos:end="5183:55">(<argument pos:start="5183:28" pos:end="5183:34"><expr pos:start="5183:28" pos:end="5183:34"><name pos:start="5183:28" pos:end="5183:34">cpu_env</name></expr></argument>, <argument pos:start="5183:37" pos:end="5183:54"><expr pos:start="5183:37" pos:end="5183:54"><call pos:start="5183:37" pos:end="5183:54"><name pos:start="5183:37" pos:end="5183:49">tcg_const_i32</name><argument_list pos:start="5183:50" pos:end="5183:54">(<argument pos:start="5183:51" pos:end="5183:53"><expr pos:start="5183:51" pos:end="5183:53"><name pos:start="5183:51" pos:end="5183:53">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5185:13" pos:end="5185:36"><expr pos:start="5185:13" pos:end="5185:35"><name pos:start="5185:13" pos:end="5185:20"><name pos:start="5185:13" pos:end="5185:13">s</name><operator pos:start="5185:14" pos:end="5185:15">-&gt;</operator><name pos:start="5185:16" pos:end="5185:20">cc_op</name></name> <operator pos:start="5185:22" pos:end="5185:22">=</operator> <name pos:start="5185:24" pos:end="5185:35">CC_OP_LOGICB</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5189:9" pos:end="5189:14">break;</break>

    <case pos:start="5191:5" pos:end="5191:14">case <expr pos:start="5191:10" pos:end="5191:13"><literal type="number" pos:start="5191:10" pos:end="5191:13">0xd5</literal></expr>:</case> <comment type="block" pos:start="5191:16" pos:end="5191:24">/* aad */</comment>

        <if_stmt pos:start="5193:9" pos:end="5195:28"><if pos:start="5193:9" pos:end="5195:28">if <condition pos:start="5193:12" pos:end="5193:22">(<expr pos:start="5193:13" pos:end="5193:21"><call pos:start="5193:13" pos:end="5193:21"><name pos:start="5193:13" pos:end="5193:18">CODE64</name><argument_list pos:start="5193:19" pos:end="5193:21">(<argument pos:start="5193:20" pos:end="5193:20"><expr pos:start="5193:20" pos:end="5193:20"><name pos:start="5193:20" pos:end="5193:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5195:13" pos:end="5195:28"><block_content pos:start="5195:13" pos:end="5195:28">

            <goto pos:start="5195:13" pos:end="5195:28">goto <name pos:start="5195:18" pos:end="5195:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5197:9" pos:end="5197:53"><expr pos:start="5197:9" pos:end="5197:52"><name pos:start="5197:9" pos:end="5197:11">val</name> <operator pos:start="5197:13" pos:end="5197:13">=</operator> <call pos:start="5197:15" pos:end="5197:52"><name pos:start="5197:15" pos:end="5197:27">cpu_ldub_code</name><argument_list pos:start="5197:28" pos:end="5197:52">(<argument pos:start="5197:29" pos:end="5197:42"><expr pos:start="5197:29" pos:end="5197:42"><name pos:start="5197:29" pos:end="5197:42">cpu_single_env</name></expr></argument>, <argument pos:start="5197:45" pos:end="5197:51"><expr pos:start="5197:45" pos:end="5197:51"><name pos:start="5197:45" pos:end="5197:49"><name pos:start="5197:45" pos:end="5197:45">s</name><operator pos:start="5197:46" pos:end="5197:47">-&gt;</operator><name pos:start="5197:48" pos:end="5197:49">pc</name></name><operator pos:start="5197:50" pos:end="5197:51">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5199:9" pos:end="5199:52"><expr pos:start="5199:9" pos:end="5199:51"><call pos:start="5199:9" pos:end="5199:51"><name pos:start="5199:9" pos:end="5199:22">gen_helper_aad</name><argument_list pos:start="5199:23" pos:end="5199:51">(<argument pos:start="5199:24" pos:end="5199:30"><expr pos:start="5199:24" pos:end="5199:30"><name pos:start="5199:24" pos:end="5199:30">cpu_env</name></expr></argument>, <argument pos:start="5199:33" pos:end="5199:50"><expr pos:start="5199:33" pos:end="5199:50"><call pos:start="5199:33" pos:end="5199:50"><name pos:start="5199:33" pos:end="5199:45">tcg_const_i32</name><argument_list pos:start="5199:46" pos:end="5199:50">(<argument pos:start="5199:47" pos:end="5199:49"><expr pos:start="5199:47" pos:end="5199:49"><name pos:start="5199:47" pos:end="5199:49">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5201:9" pos:end="5201:32"><expr pos:start="5201:9" pos:end="5201:31"><name pos:start="5201:9" pos:end="5201:16"><name pos:start="5201:9" pos:end="5201:9">s</name><operator pos:start="5201:10" pos:end="5201:11">-&gt;</operator><name pos:start="5201:12" pos:end="5201:16">cc_op</name></name> <operator pos:start="5201:18" pos:end="5201:18">=</operator> <name pos:start="5201:20" pos:end="5201:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="5203:9" pos:end="5203:14">break;</break>

        <comment type="block" format="doxygen" pos:start="5205:9" pos:end="5205:34">/************************/</comment>

        <comment type="block" pos:start="5207:9" pos:end="5207:18">/* misc */</comment>

    <case pos:start="5209:5" pos:end="5209:14">case <expr pos:start="5209:10" pos:end="5209:13"><literal type="number" pos:start="5209:10" pos:end="5209:13">0x90</literal></expr>:</case> <comment type="block" pos:start="5209:16" pos:end="5209:24">/* nop */</comment>

        <comment type="block" pos:start="5211:9" pos:end="5211:49">/* XXX: correct lock test for all insn */</comment>

        <if_stmt pos:start="5213:9" pos:end="5217:9"><if pos:start="5213:9" pos:end="5217:9">if <condition pos:start="5213:12" pos:end="5213:35">(<expr pos:start="5213:13" pos:end="5213:34"><name pos:start="5213:13" pos:end="5213:20">prefixes</name> <operator pos:start="5213:22" pos:end="5213:22">&amp;</operator> <name pos:start="5213:24" pos:end="5213:34">PREFIX_LOCK</name></expr>)</condition> <block pos:start="5213:37" pos:end="5217:9">{<block_content pos:start="5215:13" pos:end="5215:28">

            <goto pos:start="5215:13" pos:end="5215:28">goto <name pos:start="5215:18" pos:end="5215:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="5219:9" pos:end="5219:70">/* If REX_B is set, then this is xchg eax, r8d, not a nop.  */</comment>

        <if_stmt pos:start="5221:9" pos:end="5225:9"><if pos:start="5221:9" pos:end="5225:9">if <condition pos:start="5221:12" pos:end="5221:21">(<expr pos:start="5221:13" pos:end="5221:20"><call pos:start="5221:13" pos:end="5221:20"><name pos:start="5221:13" pos:end="5221:17">REX_B</name><argument_list pos:start="5221:18" pos:end="5221:20">(<argument pos:start="5221:19" pos:end="5221:19"><expr pos:start="5221:19" pos:end="5221:19"><name pos:start="5221:19" pos:end="5221:19">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5221:23" pos:end="5225:9">{<block_content pos:start="5223:13" pos:end="5223:33">

            <goto pos:start="5223:13" pos:end="5223:33">goto <name pos:start="5223:18" pos:end="5223:32">do_xchg_reg_eax</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="5227:9" pos:end="5231:9"><if pos:start="5227:9" pos:end="5231:9">if <condition pos:start="5227:12" pos:end="5227:35">(<expr pos:start="5227:13" pos:end="5227:34"><name pos:start="5227:13" pos:end="5227:20">prefixes</name> <operator pos:start="5227:22" pos:end="5227:22">&amp;</operator> <name pos:start="5227:24" pos:end="5227:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="5227:37" pos:end="5231:9">{<block_content pos:start="5229:13" pos:end="5229:65">

            <expr_stmt pos:start="5229:13" pos:end="5229:65"><expr pos:start="5229:13" pos:end="5229:64"><call pos:start="5229:13" pos:end="5229:64"><name pos:start="5229:13" pos:end="5229:35">gen_svm_check_intercept</name><argument_list pos:start="5229:36" pos:end="5229:64">(<argument pos:start="5229:37" pos:end="5229:37"><expr pos:start="5229:37" pos:end="5229:37"><name pos:start="5229:37" pos:end="5229:37">s</name></expr></argument>, <argument pos:start="5229:40" pos:end="5229:47"><expr pos:start="5229:40" pos:end="5229:47"><name pos:start="5229:40" pos:end="5229:47">pc_start</name></expr></argument>, <argument pos:start="5229:50" pos:end="5229:63"><expr pos:start="5229:50" pos:end="5229:63"><name pos:start="5229:50" pos:end="5229:63">SVM_EXIT_PAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5233:9" pos:end="5233:14">break;</break>

    <case pos:start="5235:5" pos:end="5235:14">case <expr pos:start="5235:10" pos:end="5235:13"><literal type="number" pos:start="5235:10" pos:end="5235:13">0x9b</literal></expr>:</case> <comment type="block" pos:start="5235:16" pos:end="5235:26">/* fwait */</comment>

        <if_stmt pos:start="5237:9" pos:end="5253:9"><if pos:start="5237:9" pos:end="5243:9">if <condition pos:start="5237:12" pos:end="5239:38">(<expr pos:start="5237:13" pos:end="5239:37"><operator pos:start="5237:13" pos:end="5237:13">(</operator><name pos:start="5237:14" pos:end="5237:21"><name pos:start="5237:14" pos:end="5237:14">s</name><operator pos:start="5237:15" pos:end="5237:16">-&gt;</operator><name pos:start="5237:17" pos:end="5237:21">flags</name></name> <operator pos:start="5237:23" pos:end="5237:23">&amp;</operator> <operator pos:start="5237:25" pos:end="5237:25">(</operator><name pos:start="5237:26" pos:end="5237:35">HF_MP_MASK</name> <operator pos:start="5237:37" pos:end="5237:37">|</operator> <name pos:start="5237:39" pos:end="5237:48">HF_TS_MASK</name><operator pos:start="5237:49" pos:end="5237:49">)</operator><operator pos:start="5237:50" pos:end="5237:50">)</operator> <operator pos:start="5237:52" pos:end="5237:53">==</operator>

            <operator pos:start="5239:13" pos:end="5239:13">(</operator><name pos:start="5239:14" pos:end="5239:23">HF_MP_MASK</name> <operator pos:start="5239:25" pos:end="5239:25">|</operator> <name pos:start="5239:27" pos:end="5239:36">HF_TS_MASK</name><operator pos:start="5239:37" pos:end="5239:37">)</operator></expr>)</condition> <block pos:start="5239:40" pos:end="5243:9">{<block_content pos:start="5241:13" pos:end="5241:65">

            <expr_stmt pos:start="5241:13" pos:end="5241:65"><expr pos:start="5241:13" pos:end="5241:64"><call pos:start="5241:13" pos:end="5241:64"><name pos:start="5241:13" pos:end="5241:25">gen_exception</name><argument_list pos:start="5241:26" pos:end="5241:64">(<argument pos:start="5241:27" pos:end="5241:27"><expr pos:start="5241:27" pos:end="5241:27"><name pos:start="5241:27" pos:end="5241:27">s</name></expr></argument>, <argument pos:start="5241:30" pos:end="5241:40"><expr pos:start="5241:30" pos:end="5241:40"><name pos:start="5241:30" pos:end="5241:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="5241:43" pos:end="5241:63"><expr pos:start="5241:43" pos:end="5241:63"><name pos:start="5241:43" pos:end="5241:50">pc_start</name> <operator pos:start="5241:52" pos:end="5241:52">-</operator> <name pos:start="5241:54" pos:end="5241:63"><name pos:start="5241:54" pos:end="5241:54">s</name><operator pos:start="5241:55" pos:end="5241:56">-&gt;</operator><name pos:start="5241:57" pos:end="5241:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5243:11" pos:end="5253:9">else <block pos:start="5243:16" pos:end="5253:9">{<block_content pos:start="5245:13" pos:end="5251:38">

            <if_stmt pos:start="5245:13" pos:end="5247:43"><if pos:start="5245:13" pos:end="5247:43">if <condition pos:start="5245:16" pos:end="5245:42">(<expr pos:start="5245:17" pos:end="5245:41"><name pos:start="5245:17" pos:end="5245:24"><name pos:start="5245:17" pos:end="5245:17">s</name><operator pos:start="5245:18" pos:end="5245:19">-&gt;</operator><name pos:start="5245:20" pos:end="5245:24">cc_op</name></name> <operator pos:start="5245:26" pos:end="5245:27">!=</operator> <name pos:start="5245:29" pos:end="5245:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5247:17" pos:end="5247:43"><block_content pos:start="5247:17" pos:end="5247:43">

                <expr_stmt pos:start="5247:17" pos:end="5247:43"><expr pos:start="5247:17" pos:end="5247:42"><call pos:start="5247:17" pos:end="5247:42"><name pos:start="5247:17" pos:end="5247:32">gen_op_set_cc_op</name><argument_list pos:start="5247:33" pos:end="5247:42">(<argument pos:start="5247:34" pos:end="5247:41"><expr pos:start="5247:34" pos:end="5247:41"><name pos:start="5247:34" pos:end="5247:41"><name pos:start="5247:34" pos:end="5247:34">s</name><operator pos:start="5247:35" pos:end="5247:36">-&gt;</operator><name pos:start="5247:37" pos:end="5247:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5249:13" pos:end="5249:46"><expr pos:start="5249:13" pos:end="5249:45"><call pos:start="5249:13" pos:end="5249:45"><name pos:start="5249:13" pos:end="5249:22">gen_jmp_im</name><argument_list pos:start="5249:23" pos:end="5249:45">(<argument pos:start="5249:24" pos:end="5249:44"><expr pos:start="5249:24" pos:end="5249:44"><name pos:start="5249:24" pos:end="5249:31">pc_start</name> <operator pos:start="5249:33" pos:end="5249:33">-</operator> <name pos:start="5249:35" pos:end="5249:44"><name pos:start="5249:35" pos:end="5249:35">s</name><operator pos:start="5249:36" pos:end="5249:37">-&gt;</operator><name pos:start="5249:38" pos:end="5249:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5251:13" pos:end="5251:38"><expr pos:start="5251:13" pos:end="5251:37"><call pos:start="5251:13" pos:end="5251:37"><name pos:start="5251:13" pos:end="5251:28">gen_helper_fwait</name><argument_list pos:start="5251:29" pos:end="5251:37">(<argument pos:start="5251:30" pos:end="5251:36"><expr pos:start="5251:30" pos:end="5251:36"><name pos:start="5251:30" pos:end="5251:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5255:9" pos:end="5255:14">break;</break>

    <case pos:start="5257:5" pos:end="5257:14">case <expr pos:start="5257:10" pos:end="5257:13"><literal type="number" pos:start="5257:10" pos:end="5257:13">0xcc</literal></expr>:</case> <comment type="block" pos:start="5257:16" pos:end="5257:25">/* int3 */</comment>

        <expr_stmt pos:start="5259:9" pos:end="5259:81"><expr pos:start="5259:9" pos:end="5259:80"><call pos:start="5259:9" pos:end="5259:80"><name pos:start="5259:9" pos:end="5259:21">gen_interrupt</name><argument_list pos:start="5259:22" pos:end="5259:80">(<argument pos:start="5259:23" pos:end="5259:23"><expr pos:start="5259:23" pos:end="5259:23"><name pos:start="5259:23" pos:end="5259:23">s</name></expr></argument>, <argument pos:start="5259:26" pos:end="5259:36"><expr pos:start="5259:26" pos:end="5259:36"><name pos:start="5259:26" pos:end="5259:36">EXCP03_INT3</name></expr></argument>, <argument pos:start="5259:39" pos:end="5259:59"><expr pos:start="5259:39" pos:end="5259:59"><name pos:start="5259:39" pos:end="5259:46">pc_start</name> <operator pos:start="5259:48" pos:end="5259:48">-</operator> <name pos:start="5259:50" pos:end="5259:59"><name pos:start="5259:50" pos:end="5259:50">s</name><operator pos:start="5259:51" pos:end="5259:52">-&gt;</operator><name pos:start="5259:53" pos:end="5259:59">cs_base</name></name></expr></argument>, <argument pos:start="5259:62" pos:end="5259:79"><expr pos:start="5259:62" pos:end="5259:79"><name pos:start="5259:62" pos:end="5259:66"><name pos:start="5259:62" pos:end="5259:62">s</name><operator pos:start="5259:63" pos:end="5259:64">-&gt;</operator><name pos:start="5259:65" pos:end="5259:66">pc</name></name> <operator pos:start="5259:68" pos:end="5259:68">-</operator> <name pos:start="5259:70" pos:end="5259:79"><name pos:start="5259:70" pos:end="5259:70">s</name><operator pos:start="5259:71" pos:end="5259:72">-&gt;</operator><name pos:start="5259:73" pos:end="5259:79">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5261:9" pos:end="5261:14">break;</break>

    <case pos:start="5263:5" pos:end="5263:14">case <expr pos:start="5263:10" pos:end="5263:13"><literal type="number" pos:start="5263:10" pos:end="5263:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="5263:16" pos:end="5263:26">/* int N */</comment>

        <expr_stmt pos:start="5265:9" pos:end="5265:53"><expr pos:start="5265:9" pos:end="5265:52"><name pos:start="5265:9" pos:end="5265:11">val</name> <operator pos:start="5265:13" pos:end="5265:13">=</operator> <call pos:start="5265:15" pos:end="5265:52"><name pos:start="5265:15" pos:end="5265:27">cpu_ldub_code</name><argument_list pos:start="5265:28" pos:end="5265:52">(<argument pos:start="5265:29" pos:end="5265:42"><expr pos:start="5265:29" pos:end="5265:42"><name pos:start="5265:29" pos:end="5265:42">cpu_single_env</name></expr></argument>, <argument pos:start="5265:45" pos:end="5265:51"><expr pos:start="5265:45" pos:end="5265:51"><name pos:start="5265:45" pos:end="5265:49"><name pos:start="5265:45" pos:end="5265:45">s</name><operator pos:start="5265:46" pos:end="5265:47">-&gt;</operator><name pos:start="5265:48" pos:end="5265:49">pc</name></name><operator pos:start="5265:50" pos:end="5265:51">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5267:9" pos:end="5275:9"><if pos:start="5267:9" pos:end="5271:9">if <condition pos:start="5267:12" pos:end="5267:36">(<expr pos:start="5267:13" pos:end="5267:35"><name pos:start="5267:13" pos:end="5267:19"><name pos:start="5267:13" pos:end="5267:13">s</name><operator pos:start="5267:14" pos:end="5267:15">-&gt;</operator><name pos:start="5267:16" pos:end="5267:19">vm86</name></name> <operator pos:start="5267:21" pos:end="5267:22">&amp;&amp;</operator> <name pos:start="5267:24" pos:end="5267:30"><name pos:start="5267:24" pos:end="5267:24">s</name><operator pos:start="5267:25" pos:end="5267:26">-&gt;</operator><name pos:start="5267:27" pos:end="5267:30">iopl</name></name> <operator pos:start="5267:32" pos:end="5267:33">!=</operator> <literal type="number" pos:start="5267:35" pos:end="5267:35">3</literal></expr>)</condition> <block pos:start="5267:38" pos:end="5271:9">{<block_content pos:start="5269:13" pos:end="5269:64">

            <expr_stmt pos:start="5269:13" pos:end="5269:64"><expr pos:start="5269:13" pos:end="5269:63"><call pos:start="5269:13" pos:end="5269:63"><name pos:start="5269:13" pos:end="5269:25">gen_exception</name><argument_list pos:start="5269:26" pos:end="5269:63">(<argument pos:start="5269:27" pos:end="5269:27"><expr pos:start="5269:27" pos:end="5269:27"><name pos:start="5269:27" pos:end="5269:27">s</name></expr></argument>, <argument pos:start="5269:30" pos:end="5269:39"><expr pos:start="5269:30" pos:end="5269:39"><name pos:start="5269:30" pos:end="5269:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5269:42" pos:end="5269:62"><expr pos:start="5269:42" pos:end="5269:62"><name pos:start="5269:42" pos:end="5269:49">pc_start</name> <operator pos:start="5269:51" pos:end="5269:51">-</operator> <name pos:start="5269:53" pos:end="5269:62"><name pos:start="5269:53" pos:end="5269:53">s</name><operator pos:start="5269:54" pos:end="5269:55">-&gt;</operator><name pos:start="5269:56" pos:end="5269:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5271:11" pos:end="5275:9">else <block pos:start="5271:16" pos:end="5275:9">{<block_content pos:start="5273:13" pos:end="5273:77">

            <expr_stmt pos:start="5273:13" pos:end="5273:77"><expr pos:start="5273:13" pos:end="5273:76"><call pos:start="5273:13" pos:end="5273:76"><name pos:start="5273:13" pos:end="5273:25">gen_interrupt</name><argument_list pos:start="5273:26" pos:end="5273:76">(<argument pos:start="5273:27" pos:end="5273:27"><expr pos:start="5273:27" pos:end="5273:27"><name pos:start="5273:27" pos:end="5273:27">s</name></expr></argument>, <argument pos:start="5273:30" pos:end="5273:32"><expr pos:start="5273:30" pos:end="5273:32"><name pos:start="5273:30" pos:end="5273:32">val</name></expr></argument>, <argument pos:start="5273:35" pos:end="5273:55"><expr pos:start="5273:35" pos:end="5273:55"><name pos:start="5273:35" pos:end="5273:42">pc_start</name> <operator pos:start="5273:44" pos:end="5273:44">-</operator> <name pos:start="5273:46" pos:end="5273:55"><name pos:start="5273:46" pos:end="5273:46">s</name><operator pos:start="5273:47" pos:end="5273:48">-&gt;</operator><name pos:start="5273:49" pos:end="5273:55">cs_base</name></name></expr></argument>, <argument pos:start="5273:58" pos:end="5273:75"><expr pos:start="5273:58" pos:end="5273:75"><name pos:start="5273:58" pos:end="5273:62"><name pos:start="5273:58" pos:end="5273:58">s</name><operator pos:start="5273:59" pos:end="5273:60">-&gt;</operator><name pos:start="5273:61" pos:end="5273:62">pc</name></name> <operator pos:start="5273:64" pos:end="5273:64">-</operator> <name pos:start="5273:66" pos:end="5273:75"><name pos:start="5273:66" pos:end="5273:66">s</name><operator pos:start="5273:67" pos:end="5273:68">-&gt;</operator><name pos:start="5273:69" pos:end="5273:75">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5277:9" pos:end="5277:14">break;</break>

    <case pos:start="5279:5" pos:end="5279:14">case <expr pos:start="5279:10" pos:end="5279:13"><literal type="number" pos:start="5279:10" pos:end="5279:13">0xce</literal></expr>:</case> <comment type="block" pos:start="5279:16" pos:end="5279:25">/* into */</comment>

        <if_stmt pos:start="5281:9" pos:end="5283:28"><if pos:start="5281:9" pos:end="5283:28">if <condition pos:start="5281:12" pos:end="5281:22">(<expr pos:start="5281:13" pos:end="5281:21"><call pos:start="5281:13" pos:end="5281:21"><name pos:start="5281:13" pos:end="5281:18">CODE64</name><argument_list pos:start="5281:19" pos:end="5281:21">(<argument pos:start="5281:20" pos:end="5281:20"><expr pos:start="5281:20" pos:end="5281:20"><name pos:start="5281:20" pos:end="5281:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5283:13" pos:end="5283:28"><block_content pos:start="5283:13" pos:end="5283:28">

            <goto pos:start="5283:13" pos:end="5283:28">goto <name pos:start="5283:18" pos:end="5283:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5285:9" pos:end="5287:39"><if pos:start="5285:9" pos:end="5287:39">if <condition pos:start="5285:12" pos:end="5285:38">(<expr pos:start="5285:13" pos:end="5285:37"><name pos:start="5285:13" pos:end="5285:20"><name pos:start="5285:13" pos:end="5285:13">s</name><operator pos:start="5285:14" pos:end="5285:15">-&gt;</operator><name pos:start="5285:16" pos:end="5285:20">cc_op</name></name> <operator pos:start="5285:22" pos:end="5285:23">!=</operator> <name pos:start="5285:25" pos:end="5285:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5287:13" pos:end="5287:39"><block_content pos:start="5287:13" pos:end="5287:39">

            <expr_stmt pos:start="5287:13" pos:end="5287:39"><expr pos:start="5287:13" pos:end="5287:38"><call pos:start="5287:13" pos:end="5287:38"><name pos:start="5287:13" pos:end="5287:28">gen_op_set_cc_op</name><argument_list pos:start="5287:29" pos:end="5287:38">(<argument pos:start="5287:30" pos:end="5287:37"><expr pos:start="5287:30" pos:end="5287:37"><name pos:start="5287:30" pos:end="5287:37"><name pos:start="5287:30" pos:end="5287:30">s</name><operator pos:start="5287:31" pos:end="5287:32">-&gt;</operator><name pos:start="5287:33" pos:end="5287:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5289:9" pos:end="5289:42"><expr pos:start="5289:9" pos:end="5289:41"><call pos:start="5289:9" pos:end="5289:41"><name pos:start="5289:9" pos:end="5289:18">gen_jmp_im</name><argument_list pos:start="5289:19" pos:end="5289:41">(<argument pos:start="5289:20" pos:end="5289:40"><expr pos:start="5289:20" pos:end="5289:40"><name pos:start="5289:20" pos:end="5289:27">pc_start</name> <operator pos:start="5289:29" pos:end="5289:29">-</operator> <name pos:start="5289:31" pos:end="5289:40"><name pos:start="5289:31" pos:end="5289:31">s</name><operator pos:start="5289:32" pos:end="5289:33">-&gt;</operator><name pos:start="5289:34" pos:end="5289:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5291:9" pos:end="5291:66"><expr pos:start="5291:9" pos:end="5291:65"><call pos:start="5291:9" pos:end="5291:65"><name pos:start="5291:9" pos:end="5291:23">gen_helper_into</name><argument_list pos:start="5291:24" pos:end="5291:65">(<argument pos:start="5291:25" pos:end="5291:31"><expr pos:start="5291:25" pos:end="5291:31"><name pos:start="5291:25" pos:end="5291:31">cpu_env</name></expr></argument>, <argument pos:start="5291:34" pos:end="5291:64"><expr pos:start="5291:34" pos:end="5291:64"><call pos:start="5291:34" pos:end="5291:64"><name pos:start="5291:34" pos:end="5291:46">tcg_const_i32</name><argument_list pos:start="5291:47" pos:end="5291:64">(<argument pos:start="5291:48" pos:end="5291:63"><expr pos:start="5291:48" pos:end="5291:63"><name pos:start="5291:48" pos:end="5291:52"><name pos:start="5291:48" pos:end="5291:48">s</name><operator pos:start="5291:49" pos:end="5291:50">-&gt;</operator><name pos:start="5291:51" pos:end="5291:52">pc</name></name> <operator pos:start="5291:54" pos:end="5291:54">-</operator> <name pos:start="5291:56" pos:end="5291:63">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5293:9" pos:end="5296:0">break;</break>

<cpp:ifdef pos:start="5295:1" pos:end="5295:17">#<cpp:directive pos:start="5295:2" pos:end="5295:6">ifdef</cpp:directive> <name pos:start="5295:8" pos:end="5295:17">WANT_ICEBP</name></cpp:ifdef>

    <case pos:start="5297:5" pos:end="5297:14">case <expr pos:start="5297:10" pos:end="5297:13"><literal type="number" pos:start="5297:10" pos:end="5297:13">0xf1</literal></expr>:</case> <comment type="block" pos:start="5297:16" pos:end="5297:69">/* icebp (undocumented, exits to external debugger) */</comment>

        <expr_stmt pos:start="5299:9" pos:end="5302:0"><expr pos:start="5299:9" pos:end="5299:60"><call pos:start="5299:9" pos:end="5299:60"><name pos:start="5299:9" pos:end="5299:31">gen_svm_check_intercept</name><argument_list pos:start="5299:32" pos:end="5299:60">(<argument pos:start="5299:33" pos:end="5299:33"><expr pos:start="5299:33" pos:end="5299:33"><name pos:start="5299:33" pos:end="5299:33">s</name></expr></argument>, <argument pos:start="5299:36" pos:end="5299:43"><expr pos:start="5299:36" pos:end="5299:43"><name pos:start="5299:36" pos:end="5299:43">pc_start</name></expr></argument>, <argument pos:start="5299:46" pos:end="5299:59"><expr pos:start="5299:46" pos:end="5299:59"><name pos:start="5299:46" pos:end="5299:59">SVM_EXIT_ICEBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="5301:1" pos:end="5301:5">#<cpp:directive pos:start="5301:2" pos:end="5301:3">if</cpp:directive> <expr pos:start="5301:5" pos:end="5301:5"><literal type="number" pos:start="5301:5" pos:end="5301:5">1</literal></expr></cpp:if>

        <expr_stmt pos:start="5303:9" pos:end="5306:0"><expr pos:start="5303:9" pos:end="5303:43"><call pos:start="5303:9" pos:end="5303:43"><name pos:start="5303:9" pos:end="5303:17">gen_debug</name><argument_list pos:start="5303:18" pos:end="5303:43">(<argument pos:start="5303:19" pos:end="5303:19"><expr pos:start="5303:19" pos:end="5303:19"><name pos:start="5303:19" pos:end="5303:19">s</name></expr></argument>, <argument pos:start="5303:22" pos:end="5303:42"><expr pos:start="5303:22" pos:end="5303:42"><name pos:start="5303:22" pos:end="5303:29">pc_start</name> <operator pos:start="5303:31" pos:end="5303:31">-</operator> <name pos:start="5303:33" pos:end="5303:42"><name pos:start="5303:33" pos:end="5303:33">s</name><operator pos:start="5303:34" pos:end="5303:35">-&gt;</operator><name pos:start="5303:36" pos:end="5303:42">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="5305:1" pos:end="5305:5">#<cpp:directive pos:start="5305:2" pos:end="5305:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="5307:9" pos:end="5307:25">/* start debug */</comment>

        <expr_stmt pos:start="5309:9" pos:end="5309:33"><expr pos:start="5309:9" pos:end="5309:32"><call pos:start="5309:9" pos:end="5309:32"><name pos:start="5309:9" pos:end="5309:16">tb_flush</name><argument_list pos:start="5309:17" pos:end="5309:32">(<argument pos:start="5309:18" pos:end="5309:31"><expr pos:start="5309:18" pos:end="5309:31"><name pos:start="5309:18" pos:end="5309:31">cpu_single_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5311:9" pos:end="5314:0"><expr pos:start="5311:9" pos:end="5311:52"><call pos:start="5311:9" pos:end="5311:52"><name pos:start="5311:9" pos:end="5311:19">cpu_set_log</name><argument_list pos:start="5311:20" pos:end="5311:52">(<argument pos:start="5311:21" pos:end="5311:51"><expr pos:start="5311:21" pos:end="5311:51"><name pos:start="5311:21" pos:end="5311:31">CPU_LOG_INT</name> <operator pos:start="5311:33" pos:end="5311:33">|</operator> <name pos:start="5311:35" pos:end="5311:51">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="5313:1" pos:end="5313:6">#<cpp:directive pos:start="5313:2" pos:end="5313:6">endif</cpp:directive></cpp:endif>

        <break pos:start="5315:9" pos:end="5318:0">break;</break>

<cpp:endif pos:start="5317:1" pos:end="5317:6">#<cpp:directive pos:start="5317:2" pos:end="5317:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5319:5" pos:end="5319:14">case <expr pos:start="5319:10" pos:end="5319:13"><literal type="number" pos:start="5319:10" pos:end="5319:13">0xfa</literal></expr>:</case> <comment type="block" pos:start="5319:16" pos:end="5319:24">/* cli */</comment>

        <if_stmt pos:start="5321:9" pos:end="5345:9"><if pos:start="5321:9" pos:end="5333:9">if <condition pos:start="5321:12" pos:end="5321:21">(<expr pos:start="5321:13" pos:end="5321:20"><operator pos:start="5321:13" pos:end="5321:13">!</operator><name pos:start="5321:14" pos:end="5321:20"><name pos:start="5321:14" pos:end="5321:14">s</name><operator pos:start="5321:15" pos:end="5321:16">-&gt;</operator><name pos:start="5321:17" pos:end="5321:20">vm86</name></name></expr>)</condition> <block pos:start="5321:23" pos:end="5333:9">{<block_content pos:start="5323:13" pos:end="5331:13">

            <if_stmt pos:start="5323:13" pos:end="5331:13"><if pos:start="5323:13" pos:end="5327:13">if <condition pos:start="5323:16" pos:end="5323:34">(<expr pos:start="5323:17" pos:end="5323:33"><name pos:start="5323:17" pos:end="5323:22"><name pos:start="5323:17" pos:end="5323:17">s</name><operator pos:start="5323:18" pos:end="5323:19">-&gt;</operator><name pos:start="5323:20" pos:end="5323:22">cpl</name></name> <operator pos:start="5323:24" pos:end="5323:25">&lt;=</operator> <name pos:start="5323:27" pos:end="5323:33"><name pos:start="5323:27" pos:end="5323:27">s</name><operator pos:start="5323:28" pos:end="5323:29">-&gt;</operator><name pos:start="5323:30" pos:end="5323:33">iopl</name></name></expr>)</condition> <block pos:start="5323:36" pos:end="5327:13">{<block_content pos:start="5325:17" pos:end="5325:40">

                <expr_stmt pos:start="5325:17" pos:end="5325:40"><expr pos:start="5325:17" pos:end="5325:39"><call pos:start="5325:17" pos:end="5325:39"><name pos:start="5325:17" pos:end="5325:30">gen_helper_cli</name><argument_list pos:start="5325:31" pos:end="5325:39">(<argument pos:start="5325:32" pos:end="5325:38"><expr pos:start="5325:32" pos:end="5325:38"><name pos:start="5325:32" pos:end="5325:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5327:15" pos:end="5331:13">else <block pos:start="5327:20" pos:end="5331:13">{<block_content pos:start="5329:17" pos:end="5329:68">

                <expr_stmt pos:start="5329:17" pos:end="5329:68"><expr pos:start="5329:17" pos:end="5329:67"><call pos:start="5329:17" pos:end="5329:67"><name pos:start="5329:17" pos:end="5329:29">gen_exception</name><argument_list pos:start="5329:30" pos:end="5329:67">(<argument pos:start="5329:31" pos:end="5329:31"><expr pos:start="5329:31" pos:end="5329:31"><name pos:start="5329:31" pos:end="5329:31">s</name></expr></argument>, <argument pos:start="5329:34" pos:end="5329:43"><expr pos:start="5329:34" pos:end="5329:43"><name pos:start="5329:34" pos:end="5329:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5329:46" pos:end="5329:66"><expr pos:start="5329:46" pos:end="5329:66"><name pos:start="5329:46" pos:end="5329:53">pc_start</name> <operator pos:start="5329:55" pos:end="5329:55">-</operator> <name pos:start="5329:57" pos:end="5329:66"><name pos:start="5329:57" pos:end="5329:57">s</name><operator pos:start="5329:58" pos:end="5329:59">-&gt;</operator><name pos:start="5329:60" pos:end="5329:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="5333:11" pos:end="5345:9">else <block pos:start="5333:16" pos:end="5345:9">{<block_content pos:start="5335:13" pos:end="5343:13">

            <if_stmt pos:start="5335:13" pos:end="5343:13"><if pos:start="5335:13" pos:end="5339:13">if <condition pos:start="5335:16" pos:end="5335:29">(<expr pos:start="5335:17" pos:end="5335:28"><name pos:start="5335:17" pos:end="5335:23"><name pos:start="5335:17" pos:end="5335:17">s</name><operator pos:start="5335:18" pos:end="5335:19">-&gt;</operator><name pos:start="5335:20" pos:end="5335:23">iopl</name></name> <operator pos:start="5335:25" pos:end="5335:26">==</operator> <literal type="number" pos:start="5335:28" pos:end="5335:28">3</literal></expr>)</condition> <block pos:start="5335:31" pos:end="5339:13">{<block_content pos:start="5337:17" pos:end="5337:40">

                <expr_stmt pos:start="5337:17" pos:end="5337:40"><expr pos:start="5337:17" pos:end="5337:39"><call pos:start="5337:17" pos:end="5337:39"><name pos:start="5337:17" pos:end="5337:30">gen_helper_cli</name><argument_list pos:start="5337:31" pos:end="5337:39">(<argument pos:start="5337:32" pos:end="5337:38"><expr pos:start="5337:32" pos:end="5337:38"><name pos:start="5337:32" pos:end="5337:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5339:15" pos:end="5343:13">else <block pos:start="5339:20" pos:end="5343:13">{<block_content pos:start="5341:17" pos:end="5341:68">

                <expr_stmt pos:start="5341:17" pos:end="5341:68"><expr pos:start="5341:17" pos:end="5341:67"><call pos:start="5341:17" pos:end="5341:67"><name pos:start="5341:17" pos:end="5341:29">gen_exception</name><argument_list pos:start="5341:30" pos:end="5341:67">(<argument pos:start="5341:31" pos:end="5341:31"><expr pos:start="5341:31" pos:end="5341:31"><name pos:start="5341:31" pos:end="5341:31">s</name></expr></argument>, <argument pos:start="5341:34" pos:end="5341:43"><expr pos:start="5341:34" pos:end="5341:43"><name pos:start="5341:34" pos:end="5341:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5341:46" pos:end="5341:66"><expr pos:start="5341:46" pos:end="5341:66"><name pos:start="5341:46" pos:end="5341:53">pc_start</name> <operator pos:start="5341:55" pos:end="5341:55">-</operator> <name pos:start="5341:57" pos:end="5341:66"><name pos:start="5341:57" pos:end="5341:57">s</name><operator pos:start="5341:58" pos:end="5341:59">-&gt;</operator><name pos:start="5341:60" pos:end="5341:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5347:9" pos:end="5347:14">break;</break>

    <case pos:start="5349:5" pos:end="5349:14">case <expr pos:start="5349:10" pos:end="5349:13"><literal type="number" pos:start="5349:10" pos:end="5349:13">0xfb</literal></expr>:</case> <comment type="block" pos:start="5349:16" pos:end="5349:24">/* sti */</comment>

        <if_stmt pos:start="5351:9" pos:end="5393:9"><if pos:start="5351:9" pos:end="5381:9">if <condition pos:start="5351:12" pos:end="5351:21">(<expr pos:start="5351:13" pos:end="5351:20"><operator pos:start="5351:13" pos:end="5351:13">!</operator><name pos:start="5351:14" pos:end="5351:20"><name pos:start="5351:14" pos:end="5351:14">s</name><operator pos:start="5351:15" pos:end="5351:16">-&gt;</operator><name pos:start="5351:17" pos:end="5351:20">vm86</name></name></expr>)</condition> <block pos:start="5351:23" pos:end="5381:9">{<block_content pos:start="5353:13" pos:end="5379:13">

            <if_stmt pos:start="5353:13" pos:end="5379:13"><if pos:start="5353:13" pos:end="5375:13">if <condition pos:start="5353:16" pos:end="5353:34">(<expr pos:start="5353:17" pos:end="5353:33"><name pos:start="5353:17" pos:end="5353:22"><name pos:start="5353:17" pos:end="5353:17">s</name><operator pos:start="5353:18" pos:end="5353:19">-&gt;</operator><name pos:start="5353:20" pos:end="5353:22">cpl</name></name> <operator pos:start="5353:24" pos:end="5353:25">&lt;=</operator> <name pos:start="5353:27" pos:end="5353:33"><name pos:start="5353:27" pos:end="5353:27">s</name><operator pos:start="5353:28" pos:end="5353:29">-&gt;</operator><name pos:start="5353:30" pos:end="5353:33">iopl</name></name></expr>)</condition> <block pos:start="5353:36" pos:end="5375:13">{<block_content pos:start="5355:13" pos:end="5373:27">

            <label pos:start="5355:13" pos:end="5355:20"><name pos:start="5355:13" pos:end="5355:19">gen_sti</name>:</label>

                <expr_stmt pos:start="5357:17" pos:end="5357:40"><expr pos:start="5357:17" pos:end="5357:39"><call pos:start="5357:17" pos:end="5357:39"><name pos:start="5357:17" pos:end="5357:30">gen_helper_sti</name><argument_list pos:start="5357:31" pos:end="5357:39">(<argument pos:start="5357:32" pos:end="5357:38"><expr pos:start="5357:32" pos:end="5357:38"><name pos:start="5357:32" pos:end="5357:38">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="5359:17" pos:end="5359:77">/* interruptions are enabled only the first insn after sti */</comment>

                <comment type="block" pos:start="5361:17" pos:end="5363:37">/* If several instructions disable interrupts, only the

                   _first_ does it */</comment>

                <if_stmt pos:start="5365:17" pos:end="5367:56"><if pos:start="5365:17" pos:end="5367:56">if <condition pos:start="5365:20" pos:end="5365:58">(<expr pos:start="5365:21" pos:end="5365:57"><operator pos:start="5365:21" pos:end="5365:21">!</operator><operator pos:start="5365:22" pos:end="5365:22">(</operator><name pos:start="5365:23" pos:end="5365:34"><name pos:start="5365:23" pos:end="5365:23">s</name><operator pos:start="5365:24" pos:end="5365:25">-&gt;</operator><name pos:start="5365:26" pos:end="5365:27">tb</name><operator pos:start="5365:28" pos:end="5365:29">-&gt;</operator><name pos:start="5365:30" pos:end="5365:34">flags</name></name> <operator pos:start="5365:36" pos:end="5365:36">&amp;</operator> <name pos:start="5365:38" pos:end="5365:56">HF_INHIBIT_IRQ_MASK</name><operator pos:start="5365:57" pos:end="5365:57">)</operator></expr>)</condition><block type="pseudo" pos:start="5367:21" pos:end="5367:56"><block_content pos:start="5367:21" pos:end="5367:56">

                    <expr_stmt pos:start="5367:21" pos:end="5367:56"><expr pos:start="5367:21" pos:end="5367:55"><call pos:start="5367:21" pos:end="5367:55"><name pos:start="5367:21" pos:end="5367:46">gen_helper_set_inhibit_irq</name><argument_list pos:start="5367:47" pos:end="5367:55">(<argument pos:start="5367:48" pos:end="5367:54"><expr pos:start="5367:48" pos:end="5367:54"><name pos:start="5367:48" pos:end="5367:54">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="5369:17" pos:end="5369:58">/* give a chance to handle pending irqs */</comment>

                <expr_stmt pos:start="5371:17" pos:end="5371:47"><expr pos:start="5371:17" pos:end="5371:46"><call pos:start="5371:17" pos:end="5371:46"><name pos:start="5371:17" pos:end="5371:26">gen_jmp_im</name><argument_list pos:start="5371:27" pos:end="5371:46">(<argument pos:start="5371:28" pos:end="5371:45"><expr pos:start="5371:28" pos:end="5371:45"><name pos:start="5371:28" pos:end="5371:32"><name pos:start="5371:28" pos:end="5371:28">s</name><operator pos:start="5371:29" pos:end="5371:30">-&gt;</operator><name pos:start="5371:31" pos:end="5371:32">pc</name></name> <operator pos:start="5371:34" pos:end="5371:34">-</operator> <name pos:start="5371:36" pos:end="5371:45"><name pos:start="5371:36" pos:end="5371:36">s</name><operator pos:start="5371:37" pos:end="5371:38">-&gt;</operator><name pos:start="5371:39" pos:end="5371:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5373:17" pos:end="5373:27"><expr pos:start="5373:17" pos:end="5373:26"><call pos:start="5373:17" pos:end="5373:26"><name pos:start="5373:17" pos:end="5373:23">gen_eob</name><argument_list pos:start="5373:24" pos:end="5373:26">(<argument pos:start="5373:25" pos:end="5373:25"><expr pos:start="5373:25" pos:end="5373:25"><name pos:start="5373:25" pos:end="5373:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5375:15" pos:end="5379:13">else <block pos:start="5375:20" pos:end="5379:13">{<block_content pos:start="5377:17" pos:end="5377:68">

                <expr_stmt pos:start="5377:17" pos:end="5377:68"><expr pos:start="5377:17" pos:end="5377:67"><call pos:start="5377:17" pos:end="5377:67"><name pos:start="5377:17" pos:end="5377:29">gen_exception</name><argument_list pos:start="5377:30" pos:end="5377:67">(<argument pos:start="5377:31" pos:end="5377:31"><expr pos:start="5377:31" pos:end="5377:31"><name pos:start="5377:31" pos:end="5377:31">s</name></expr></argument>, <argument pos:start="5377:34" pos:end="5377:43"><expr pos:start="5377:34" pos:end="5377:43"><name pos:start="5377:34" pos:end="5377:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5377:46" pos:end="5377:66"><expr pos:start="5377:46" pos:end="5377:66"><name pos:start="5377:46" pos:end="5377:53">pc_start</name> <operator pos:start="5377:55" pos:end="5377:55">-</operator> <name pos:start="5377:57" pos:end="5377:66"><name pos:start="5377:57" pos:end="5377:57">s</name><operator pos:start="5377:58" pos:end="5377:59">-&gt;</operator><name pos:start="5377:60" pos:end="5377:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="5381:11" pos:end="5393:9">else <block pos:start="5381:16" pos:end="5393:9">{<block_content pos:start="5383:13" pos:end="5391:13">

            <if_stmt pos:start="5383:13" pos:end="5391:13"><if pos:start="5383:13" pos:end="5387:13">if <condition pos:start="5383:16" pos:end="5383:29">(<expr pos:start="5383:17" pos:end="5383:28"><name pos:start="5383:17" pos:end="5383:23"><name pos:start="5383:17" pos:end="5383:17">s</name><operator pos:start="5383:18" pos:end="5383:19">-&gt;</operator><name pos:start="5383:20" pos:end="5383:23">iopl</name></name> <operator pos:start="5383:25" pos:end="5383:26">==</operator> <literal type="number" pos:start="5383:28" pos:end="5383:28">3</literal></expr>)</condition> <block pos:start="5383:31" pos:end="5387:13">{<block_content pos:start="5385:17" pos:end="5385:29">

                <goto pos:start="5385:17" pos:end="5385:29">goto <name pos:start="5385:22" pos:end="5385:28">gen_sti</name>;</goto>

            </block_content>}</block></if> <else pos:start="5387:15" pos:end="5391:13">else <block pos:start="5387:20" pos:end="5391:13">{<block_content pos:start="5389:17" pos:end="5389:68">

                <expr_stmt pos:start="5389:17" pos:end="5389:68"><expr pos:start="5389:17" pos:end="5389:67"><call pos:start="5389:17" pos:end="5389:67"><name pos:start="5389:17" pos:end="5389:29">gen_exception</name><argument_list pos:start="5389:30" pos:end="5389:67">(<argument pos:start="5389:31" pos:end="5389:31"><expr pos:start="5389:31" pos:end="5389:31"><name pos:start="5389:31" pos:end="5389:31">s</name></expr></argument>, <argument pos:start="5389:34" pos:end="5389:43"><expr pos:start="5389:34" pos:end="5389:43"><name pos:start="5389:34" pos:end="5389:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5389:46" pos:end="5389:66"><expr pos:start="5389:46" pos:end="5389:66"><name pos:start="5389:46" pos:end="5389:53">pc_start</name> <operator pos:start="5389:55" pos:end="5389:55">-</operator> <name pos:start="5389:57" pos:end="5389:66"><name pos:start="5389:57" pos:end="5389:57">s</name><operator pos:start="5389:58" pos:end="5389:59">-&gt;</operator><name pos:start="5389:60" pos:end="5389:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5395:9" pos:end="5395:14">break;</break>

    <case pos:start="5397:5" pos:end="5397:14">case <expr pos:start="5397:10" pos:end="5397:13"><literal type="number" pos:start="5397:10" pos:end="5397:13">0x62</literal></expr>:</case> <comment type="block" pos:start="5397:16" pos:end="5397:26">/* bound */</comment>

        <if_stmt pos:start="5399:9" pos:end="5401:28"><if pos:start="5399:9" pos:end="5401:28">if <condition pos:start="5399:12" pos:end="5399:22">(<expr pos:start="5399:13" pos:end="5399:21"><call pos:start="5399:13" pos:end="5399:21"><name pos:start="5399:13" pos:end="5399:18">CODE64</name><argument_list pos:start="5399:19" pos:end="5399:21">(<argument pos:start="5399:20" pos:end="5399:20"><expr pos:start="5399:20" pos:end="5399:20"><name pos:start="5399:20" pos:end="5399:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5401:13" pos:end="5401:28"><block_content pos:start="5401:13" pos:end="5401:28">

            <goto pos:start="5401:13" pos:end="5401:28">goto <name pos:start="5401:18" pos:end="5401:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5403:9" pos:end="5403:39"><expr pos:start="5403:9" pos:end="5403:38"><name pos:start="5403:9" pos:end="5403:10">ot</name> <operator pos:start="5403:12" pos:end="5403:12">=</operator> <ternary pos:start="5403:14" pos:end="5403:38"><condition pos:start="5403:14" pos:end="5403:20"><expr pos:start="5403:14" pos:end="5403:18"><name pos:start="5403:14" pos:end="5403:18">dflag</name></expr> ?</condition><then pos:start="5403:22" pos:end="5403:28"> <expr pos:start="5403:22" pos:end="5403:28"><name pos:start="5403:22" pos:end="5403:28">OT_LONG</name></expr> </then><else pos:start="5403:30" pos:end="5403:38">: <expr pos:start="5403:32" pos:end="5403:38"><name pos:start="5403:32" pos:end="5403:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="5405:9" pos:end="5405:55"><expr pos:start="5405:9" pos:end="5405:54"><name pos:start="5405:9" pos:end="5405:13">modrm</name> <operator pos:start="5405:15" pos:end="5405:15">=</operator> <call pos:start="5405:17" pos:end="5405:54"><name pos:start="5405:17" pos:end="5405:29">cpu_ldub_code</name><argument_list pos:start="5405:30" pos:end="5405:54">(<argument pos:start="5405:31" pos:end="5405:44"><expr pos:start="5405:31" pos:end="5405:44"><name pos:start="5405:31" pos:end="5405:44">cpu_single_env</name></expr></argument>, <argument pos:start="5405:47" pos:end="5405:53"><expr pos:start="5405:47" pos:end="5405:53"><name pos:start="5405:47" pos:end="5405:51"><name pos:start="5405:47" pos:end="5405:47">s</name><operator pos:start="5405:48" pos:end="5405:49">-&gt;</operator><name pos:start="5405:50" pos:end="5405:51">pc</name></name><operator pos:start="5405:52" pos:end="5405:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5407:9" pos:end="5407:31"><expr pos:start="5407:9" pos:end="5407:30"><name pos:start="5407:9" pos:end="5407:11">reg</name> <operator pos:start="5407:13" pos:end="5407:13">=</operator> <operator pos:start="5407:15" pos:end="5407:15">(</operator><name pos:start="5407:16" pos:end="5407:20">modrm</name> <operator pos:start="5407:22" pos:end="5407:23">&gt;&gt;</operator> <literal type="number" pos:start="5407:25" pos:end="5407:25">3</literal><operator pos:start="5407:26" pos:end="5407:26">)</operator> <operator pos:start="5407:28" pos:end="5407:28">&amp;</operator> <literal type="number" pos:start="5407:30" pos:end="5407:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5409:9" pos:end="5409:31"><expr pos:start="5409:9" pos:end="5409:30"><name pos:start="5409:9" pos:end="5409:11">mod</name> <operator pos:start="5409:13" pos:end="5409:13">=</operator> <operator pos:start="5409:15" pos:end="5409:15">(</operator><name pos:start="5409:16" pos:end="5409:20">modrm</name> <operator pos:start="5409:22" pos:end="5409:23">&gt;&gt;</operator> <literal type="number" pos:start="5409:25" pos:end="5409:25">6</literal><operator pos:start="5409:26" pos:end="5409:26">)</operator> <operator pos:start="5409:28" pos:end="5409:28">&amp;</operator> <literal type="number" pos:start="5409:30" pos:end="5409:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="5411:9" pos:end="5413:28"><if pos:start="5411:9" pos:end="5413:28">if <condition pos:start="5411:12" pos:end="5411:21">(<expr pos:start="5411:13" pos:end="5411:20"><name pos:start="5411:13" pos:end="5411:15">mod</name> <operator pos:start="5411:17" pos:end="5411:18">==</operator> <literal type="number" pos:start="5411:20" pos:end="5411:20">3</literal></expr>)</condition><block type="pseudo" pos:start="5413:13" pos:end="5413:28"><block_content pos:start="5413:13" pos:end="5413:28">

            <goto pos:start="5413:13" pos:end="5413:28">goto <name pos:start="5413:18" pos:end="5413:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5415:9" pos:end="5415:38"><expr pos:start="5415:9" pos:end="5415:37"><call pos:start="5415:9" pos:end="5415:37"><name pos:start="5415:9" pos:end="5415:25">gen_op_mov_TN_reg</name><argument_list pos:start="5415:26" pos:end="5415:37">(<argument pos:start="5415:27" pos:end="5415:28"><expr pos:start="5415:27" pos:end="5415:28"><name pos:start="5415:27" pos:end="5415:28">ot</name></expr></argument>, <argument pos:start="5415:31" pos:end="5415:31"><expr pos:start="5415:31" pos:end="5415:31"><literal type="number" pos:start="5415:31" pos:end="5415:31">0</literal></expr></argument>, <argument pos:start="5415:34" pos:end="5415:36"><expr pos:start="5415:34" pos:end="5415:36"><name pos:start="5415:34" pos:end="5415:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5417:9" pos:end="5417:57"><expr pos:start="5417:9" pos:end="5417:56"><call pos:start="5417:9" pos:end="5417:56"><name pos:start="5417:9" pos:end="5417:21">gen_lea_modrm</name><argument_list pos:start="5417:22" pos:end="5417:56">(<argument pos:start="5417:23" pos:end="5417:23"><expr pos:start="5417:23" pos:end="5417:23"><name pos:start="5417:23" pos:end="5417:23">s</name></expr></argument>, <argument pos:start="5417:26" pos:end="5417:30"><expr pos:start="5417:26" pos:end="5417:30"><name pos:start="5417:26" pos:end="5417:30">modrm</name></expr></argument>, <argument pos:start="5417:33" pos:end="5417:41"><expr pos:start="5417:33" pos:end="5417:41"><operator pos:start="5417:33" pos:end="5417:33">&amp;</operator><name pos:start="5417:34" pos:end="5417:41">reg_addr</name></expr></argument>, <argument pos:start="5417:44" pos:end="5417:55"><expr pos:start="5417:44" pos:end="5417:55"><operator pos:start="5417:44" pos:end="5417:44">&amp;</operator><name pos:start="5417:45" pos:end="5417:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5419:9" pos:end="5419:42"><expr pos:start="5419:9" pos:end="5419:41"><call pos:start="5419:9" pos:end="5419:41"><name pos:start="5419:9" pos:end="5419:18">gen_jmp_im</name><argument_list pos:start="5419:19" pos:end="5419:41">(<argument pos:start="5419:20" pos:end="5419:40"><expr pos:start="5419:20" pos:end="5419:40"><name pos:start="5419:20" pos:end="5419:27">pc_start</name> <operator pos:start="5419:29" pos:end="5419:29">-</operator> <name pos:start="5419:31" pos:end="5419:40"><name pos:start="5419:31" pos:end="5419:31">s</name><operator pos:start="5419:32" pos:end="5419:33">-&gt;</operator><name pos:start="5419:34" pos:end="5419:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5421:9" pos:end="5421:53"><expr pos:start="5421:9" pos:end="5421:52"><call pos:start="5421:9" pos:end="5421:52"><name pos:start="5421:9" pos:end="5421:28">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5421:29" pos:end="5421:52">(<argument pos:start="5421:30" pos:end="5421:41"><expr pos:start="5421:30" pos:end="5421:41"><name pos:start="5421:30" pos:end="5421:41">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5421:44" pos:end="5421:51"><expr pos:start="5421:44" pos:end="5421:51"><name pos:start="5421:44" pos:end="5421:51"><name pos:start="5421:44" pos:end="5421:48">cpu_T</name><index pos:start="5421:49" pos:end="5421:51">[<expr pos:start="5421:50" pos:end="5421:50"><literal type="number" pos:start="5421:50" pos:end="5421:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5423:9" pos:end="5431:9"><if pos:start="5423:9" pos:end="5427:9">if <condition pos:start="5423:12" pos:end="5423:26">(<expr pos:start="5423:13" pos:end="5423:25"><name pos:start="5423:13" pos:end="5423:14">ot</name> <operator pos:start="5423:16" pos:end="5423:17">==</operator> <name pos:start="5423:19" pos:end="5423:25">OT_WORD</name></expr>)</condition> <block pos:start="5423:28" pos:end="5427:9">{<block_content pos:start="5425:13" pos:end="5425:61">

            <expr_stmt pos:start="5425:13" pos:end="5425:61"><expr pos:start="5425:13" pos:end="5425:60"><call pos:start="5425:13" pos:end="5425:60"><name pos:start="5425:13" pos:end="5425:29">gen_helper_boundw</name><argument_list pos:start="5425:30" pos:end="5425:60">(<argument pos:start="5425:31" pos:end="5425:37"><expr pos:start="5425:31" pos:end="5425:37"><name pos:start="5425:31" pos:end="5425:37">cpu_env</name></expr></argument>, <argument pos:start="5425:40" pos:end="5425:45"><expr pos:start="5425:40" pos:end="5425:45"><name pos:start="5425:40" pos:end="5425:45">cpu_A0</name></expr></argument>, <argument pos:start="5425:48" pos:end="5425:59"><expr pos:start="5425:48" pos:end="5425:59"><name pos:start="5425:48" pos:end="5425:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5427:11" pos:end="5431:9">else <block pos:start="5427:16" pos:end="5431:9">{<block_content pos:start="5429:13" pos:end="5429:61">

            <expr_stmt pos:start="5429:13" pos:end="5429:61"><expr pos:start="5429:13" pos:end="5429:60"><call pos:start="5429:13" pos:end="5429:60"><name pos:start="5429:13" pos:end="5429:29">gen_helper_boundl</name><argument_list pos:start="5429:30" pos:end="5429:60">(<argument pos:start="5429:31" pos:end="5429:37"><expr pos:start="5429:31" pos:end="5429:37"><name pos:start="5429:31" pos:end="5429:37">cpu_env</name></expr></argument>, <argument pos:start="5429:40" pos:end="5429:45"><expr pos:start="5429:40" pos:end="5429:45"><name pos:start="5429:40" pos:end="5429:45">cpu_A0</name></expr></argument>, <argument pos:start="5429:48" pos:end="5429:59"><expr pos:start="5429:48" pos:end="5429:59"><name pos:start="5429:48" pos:end="5429:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5433:9" pos:end="5433:14">break;</break>

    <case pos:start="5435:5" pos:end="5435:25">case <expr pos:start="5435:10" pos:end="5435:24"><literal type="number" pos:start="5435:10" pos:end="5435:14">0x1c8</literal> <operator pos:start="5435:16" pos:end="5435:18">...</operator> <literal type="number" pos:start="5435:20" pos:end="5435:24">0x1cf</literal></expr>:</case> <comment type="block" pos:start="5435:27" pos:end="5435:41">/* bswap reg */</comment>

        <expr_stmt pos:start="5437:9" pos:end="5440:0"><expr pos:start="5437:9" pos:end="5437:32"><name pos:start="5437:9" pos:end="5437:11">reg</name> <operator pos:start="5437:13" pos:end="5437:13">=</operator> <operator pos:start="5437:15" pos:end="5437:15">(</operator><name pos:start="5437:16" pos:end="5437:16">b</name> <operator pos:start="5437:18" pos:end="5437:18">&amp;</operator> <literal type="number" pos:start="5437:20" pos:end="5437:20">7</literal><operator pos:start="5437:21" pos:end="5437:21">)</operator> <operator pos:start="5437:23" pos:end="5437:23">|</operator> <call pos:start="5437:25" pos:end="5437:32"><name pos:start="5437:25" pos:end="5437:29">REX_B</name><argument_list pos:start="5437:30" pos:end="5437:32">(<argument pos:start="5437:31" pos:end="5437:31"><expr pos:start="5437:31" pos:end="5437:31"><name pos:start="5437:31" pos:end="5437:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="5439:1" pos:end="5439:20">#<cpp:directive pos:start="5439:2" pos:end="5439:6">ifdef</cpp:directive> <name pos:start="5439:8" pos:end="5439:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="5441:9" pos:end="5463:9"><if pos:start="5441:9" pos:end="5449:9">if <condition pos:start="5441:12" pos:end="5441:23">(<expr pos:start="5441:13" pos:end="5441:22"><name pos:start="5441:13" pos:end="5441:17">dflag</name> <operator pos:start="5441:19" pos:end="5441:20">==</operator> <literal type="number" pos:start="5441:22" pos:end="5441:22">2</literal></expr>)</condition> <block pos:start="5441:25" pos:end="5449:9">{<block_content pos:start="5443:13" pos:end="5447:44">

            <expr_stmt pos:start="5443:13" pos:end="5443:47"><expr pos:start="5443:13" pos:end="5443:46"><call pos:start="5443:13" pos:end="5443:46"><name pos:start="5443:13" pos:end="5443:29">gen_op_mov_TN_reg</name><argument_list pos:start="5443:30" pos:end="5443:46">(<argument pos:start="5443:31" pos:end="5443:37"><expr pos:start="5443:31" pos:end="5443:37"><name pos:start="5443:31" pos:end="5443:37">OT_QUAD</name></expr></argument>, <argument pos:start="5443:40" pos:end="5443:40"><expr pos:start="5443:40" pos:end="5443:40"><literal type="number" pos:start="5443:40" pos:end="5443:40">0</literal></expr></argument>, <argument pos:start="5443:43" pos:end="5443:45"><expr pos:start="5443:43" pos:end="5443:45"><name pos:start="5443:43" pos:end="5443:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5445:13" pos:end="5445:52"><expr pos:start="5445:13" pos:end="5445:51"><call pos:start="5445:13" pos:end="5445:51"><name pos:start="5445:13" pos:end="5445:31">tcg_gen_bswap64_i64</name><argument_list pos:start="5445:32" pos:end="5445:51">(<argument pos:start="5445:33" pos:end="5445:40"><expr pos:start="5445:33" pos:end="5445:40"><name pos:start="5445:33" pos:end="5445:40"><name pos:start="5445:33" pos:end="5445:37">cpu_T</name><index pos:start="5445:38" pos:end="5445:40">[<expr pos:start="5445:39" pos:end="5445:39"><literal type="number" pos:start="5445:39" pos:end="5445:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5445:43" pos:end="5445:50"><expr pos:start="5445:43" pos:end="5445:50"><name pos:start="5445:43" pos:end="5445:50"><name pos:start="5445:43" pos:end="5445:47">cpu_T</name><index pos:start="5445:48" pos:end="5445:50">[<expr pos:start="5445:49" pos:end="5445:49"><literal type="number" pos:start="5445:49" pos:end="5445:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5447:13" pos:end="5447:44"><expr pos:start="5447:13" pos:end="5447:43"><call pos:start="5447:13" pos:end="5447:43"><name pos:start="5447:13" pos:end="5447:29">gen_op_mov_reg_T0</name><argument_list pos:start="5447:30" pos:end="5447:43">(<argument pos:start="5447:31" pos:end="5447:37"><expr pos:start="5447:31" pos:end="5447:37"><name pos:start="5447:31" pos:end="5447:37">OT_QUAD</name></expr></argument>, <argument pos:start="5447:40" pos:end="5447:42"><expr pos:start="5447:40" pos:end="5447:42"><name pos:start="5447:40" pos:end="5447:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5449:11" pos:end="5463:9">else

<cpp:endif pos:start="5451:1" pos:end="5451:6">#<cpp:directive pos:start="5451:2" pos:end="5451:6">endif</cpp:directive></cpp:endif>

        <block pos:start="5453:9" pos:end="5463:9">{<block_content pos:start="5455:13" pos:end="5461:44">

            <expr_stmt pos:start="5455:13" pos:end="5455:47"><expr pos:start="5455:13" pos:end="5455:46"><call pos:start="5455:13" pos:end="5455:46"><name pos:start="5455:13" pos:end="5455:29">gen_op_mov_TN_reg</name><argument_list pos:start="5455:30" pos:end="5455:46">(<argument pos:start="5455:31" pos:end="5455:37"><expr pos:start="5455:31" pos:end="5455:37"><name pos:start="5455:31" pos:end="5455:37">OT_LONG</name></expr></argument>, <argument pos:start="5455:40" pos:end="5455:40"><expr pos:start="5455:40" pos:end="5455:40"><literal type="number" pos:start="5455:40" pos:end="5455:40">0</literal></expr></argument>, <argument pos:start="5455:43" pos:end="5455:45"><expr pos:start="5455:43" pos:end="5455:45"><name pos:start="5455:43" pos:end="5455:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5457:13" pos:end="5457:50"><expr pos:start="5457:13" pos:end="5457:49"><call pos:start="5457:13" pos:end="5457:49"><name pos:start="5457:13" pos:end="5457:29">tcg_gen_ext32u_tl</name><argument_list pos:start="5457:30" pos:end="5457:49">(<argument pos:start="5457:31" pos:end="5457:38"><expr pos:start="5457:31" pos:end="5457:38"><name pos:start="5457:31" pos:end="5457:38"><name pos:start="5457:31" pos:end="5457:35">cpu_T</name><index pos:start="5457:36" pos:end="5457:38">[<expr pos:start="5457:37" pos:end="5457:37"><literal type="number" pos:start="5457:37" pos:end="5457:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5457:41" pos:end="5457:48"><expr pos:start="5457:41" pos:end="5457:48"><name pos:start="5457:41" pos:end="5457:48"><name pos:start="5457:41" pos:end="5457:45">cpu_T</name><index pos:start="5457:46" pos:end="5457:48">[<expr pos:start="5457:47" pos:end="5457:47"><literal type="number" pos:start="5457:47" pos:end="5457:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5459:13" pos:end="5459:51"><expr pos:start="5459:13" pos:end="5459:50"><call pos:start="5459:13" pos:end="5459:50"><name pos:start="5459:13" pos:end="5459:30">tcg_gen_bswap32_tl</name><argument_list pos:start="5459:31" pos:end="5459:50">(<argument pos:start="5459:32" pos:end="5459:39"><expr pos:start="5459:32" pos:end="5459:39"><name pos:start="5459:32" pos:end="5459:39"><name pos:start="5459:32" pos:end="5459:36">cpu_T</name><index pos:start="5459:37" pos:end="5459:39">[<expr pos:start="5459:38" pos:end="5459:38"><literal type="number" pos:start="5459:38" pos:end="5459:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5459:42" pos:end="5459:49"><expr pos:start="5459:42" pos:end="5459:49"><name pos:start="5459:42" pos:end="5459:49"><name pos:start="5459:42" pos:end="5459:46">cpu_T</name><index pos:start="5459:47" pos:end="5459:49">[<expr pos:start="5459:48" pos:end="5459:48"><literal type="number" pos:start="5459:48" pos:end="5459:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5461:13" pos:end="5461:44"><expr pos:start="5461:13" pos:end="5461:43"><call pos:start="5461:13" pos:end="5461:43"><name pos:start="5461:13" pos:end="5461:29">gen_op_mov_reg_T0</name><argument_list pos:start="5461:30" pos:end="5461:43">(<argument pos:start="5461:31" pos:end="5461:37"><expr pos:start="5461:31" pos:end="5461:37"><name pos:start="5461:31" pos:end="5461:37">OT_LONG</name></expr></argument>, <argument pos:start="5461:40" pos:end="5461:42"><expr pos:start="5461:40" pos:end="5461:42"><name pos:start="5461:40" pos:end="5461:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5465:9" pos:end="5465:14">break;</break>

    <case pos:start="5467:5" pos:end="5467:14">case <expr pos:start="5467:10" pos:end="5467:13"><literal type="number" pos:start="5467:10" pos:end="5467:13">0xd6</literal></expr>:</case> <comment type="block" pos:start="5467:16" pos:end="5467:25">/* salc */</comment>

        <if_stmt pos:start="5469:9" pos:end="5471:28"><if pos:start="5469:9" pos:end="5471:28">if <condition pos:start="5469:12" pos:end="5469:22">(<expr pos:start="5469:13" pos:end="5469:21"><call pos:start="5469:13" pos:end="5469:21"><name pos:start="5469:13" pos:end="5469:18">CODE64</name><argument_list pos:start="5469:19" pos:end="5469:21">(<argument pos:start="5469:20" pos:end="5469:20"><expr pos:start="5469:20" pos:end="5469:20"><name pos:start="5469:20" pos:end="5469:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5471:13" pos:end="5471:28"><block_content pos:start="5471:13" pos:end="5471:28">

            <goto pos:start="5471:13" pos:end="5471:28">goto <name pos:start="5471:18" pos:end="5471:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5473:9" pos:end="5475:39"><if pos:start="5473:9" pos:end="5475:39">if <condition pos:start="5473:12" pos:end="5473:38">(<expr pos:start="5473:13" pos:end="5473:37"><name pos:start="5473:13" pos:end="5473:20"><name pos:start="5473:13" pos:end="5473:13">s</name><operator pos:start="5473:14" pos:end="5473:15">-&gt;</operator><name pos:start="5473:16" pos:end="5473:20">cc_op</name></name> <operator pos:start="5473:22" pos:end="5473:23">!=</operator> <name pos:start="5473:25" pos:end="5473:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5475:13" pos:end="5475:39"><block_content pos:start="5475:13" pos:end="5475:39">

            <expr_stmt pos:start="5475:13" pos:end="5475:39"><expr pos:start="5475:13" pos:end="5475:38"><call pos:start="5475:13" pos:end="5475:38"><name pos:start="5475:13" pos:end="5475:28">gen_op_set_cc_op</name><argument_list pos:start="5475:29" pos:end="5475:38">(<argument pos:start="5475:30" pos:end="5475:37"><expr pos:start="5475:30" pos:end="5475:37"><name pos:start="5475:30" pos:end="5475:37"><name pos:start="5475:30" pos:end="5475:30">s</name><operator pos:start="5475:31" pos:end="5475:32">-&gt;</operator><name pos:start="5475:33" pos:end="5475:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5477:9" pos:end="5477:39"><expr pos:start="5477:9" pos:end="5477:38"><call pos:start="5477:9" pos:end="5477:38"><name pos:start="5477:9" pos:end="5477:28">gen_compute_eflags_c</name><argument_list pos:start="5477:29" pos:end="5477:38">(<argument pos:start="5477:30" pos:end="5477:37"><expr pos:start="5477:30" pos:end="5477:37"><name pos:start="5477:30" pos:end="5477:37"><name pos:start="5477:30" pos:end="5477:34">cpu_T</name><index pos:start="5477:35" pos:end="5477:37">[<expr pos:start="5477:36" pos:end="5477:36"><literal type="number" pos:start="5477:36" pos:end="5477:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5479:9" pos:end="5479:43"><expr pos:start="5479:9" pos:end="5479:42"><call pos:start="5479:9" pos:end="5479:42"><name pos:start="5479:9" pos:end="5479:22">tcg_gen_neg_tl</name><argument_list pos:start="5479:23" pos:end="5479:42">(<argument pos:start="5479:24" pos:end="5479:31"><expr pos:start="5479:24" pos:end="5479:31"><name pos:start="5479:24" pos:end="5479:31"><name pos:start="5479:24" pos:end="5479:28">cpu_T</name><index pos:start="5479:29" pos:end="5479:31">[<expr pos:start="5479:30" pos:end="5479:30"><literal type="number" pos:start="5479:30" pos:end="5479:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5479:34" pos:end="5479:41"><expr pos:start="5479:34" pos:end="5479:41"><name pos:start="5479:34" pos:end="5479:41"><name pos:start="5479:34" pos:end="5479:38">cpu_T</name><index pos:start="5479:39" pos:end="5479:41">[<expr pos:start="5479:40" pos:end="5479:40"><literal type="number" pos:start="5479:40" pos:end="5479:40">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5481:9" pos:end="5481:42"><expr pos:start="5481:9" pos:end="5481:41"><call pos:start="5481:9" pos:end="5481:41"><name pos:start="5481:9" pos:end="5481:25">gen_op_mov_reg_T0</name><argument_list pos:start="5481:26" pos:end="5481:41">(<argument pos:start="5481:27" pos:end="5481:33"><expr pos:start="5481:27" pos:end="5481:33"><name pos:start="5481:27" pos:end="5481:33">OT_BYTE</name></expr></argument>, <argument pos:start="5481:36" pos:end="5481:40"><expr pos:start="5481:36" pos:end="5481:40"><name pos:start="5481:36" pos:end="5481:40">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5483:9" pos:end="5483:14">break;</break>

    <case pos:start="5485:5" pos:end="5485:14">case <expr pos:start="5485:10" pos:end="5485:13"><literal type="number" pos:start="5485:10" pos:end="5485:13">0xe0</literal></expr>:</case> <comment type="block" pos:start="5485:16" pos:end="5485:27">/* loopnz */</comment>

    <case pos:start="5487:5" pos:end="5487:14">case <expr pos:start="5487:10" pos:end="5487:13"><literal type="number" pos:start="5487:10" pos:end="5487:13">0xe1</literal></expr>:</case> <comment type="block" pos:start="5487:16" pos:end="5487:26">/* loopz */</comment>

    <case pos:start="5489:5" pos:end="5489:14">case <expr pos:start="5489:10" pos:end="5489:13"><literal type="number" pos:start="5489:10" pos:end="5489:13">0xe2</literal></expr>:</case> <comment type="block" pos:start="5489:16" pos:end="5489:25">/* loop */</comment>

    <case pos:start="5491:5" pos:end="5491:14">case <expr pos:start="5491:10" pos:end="5491:13"><literal type="number" pos:start="5491:10" pos:end="5491:13">0xe3</literal></expr>:</case> <comment type="block" pos:start="5491:16" pos:end="5491:26">/* jecxz */</comment>

        <block pos:start="5493:9" pos:end="5585:9">{<block_content pos:start="5495:13" pos:end="5583:23">

            <decl_stmt pos:start="5495:13" pos:end="5495:27"><decl pos:start="5495:13" pos:end="5495:18"><type pos:start="5495:13" pos:end="5495:15"><name pos:start="5495:13" pos:end="5495:15">int</name></type> <name pos:start="5495:17" pos:end="5495:18">l1</name></decl>, <decl pos:start="5495:21" pos:end="5495:22"><type ref="prev" pos:start="5495:13" pos:end="5495:15"/><name pos:start="5495:21" pos:end="5495:22">l2</name></decl>, <decl pos:start="5495:25" pos:end="5495:26"><type ref="prev" pos:start="5495:13" pos:end="5495:15"/><name pos:start="5495:25" pos:end="5495:26">l3</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5499:13" pos:end="5499:48"><expr pos:start="5499:13" pos:end="5499:47"><name pos:start="5499:13" pos:end="5499:16">tval</name> <operator pos:start="5499:18" pos:end="5499:18">=</operator> <operator pos:start="5499:20" pos:end="5499:20">(</operator><name pos:start="5499:21" pos:end="5499:26">int8_t</name><operator pos:start="5499:27" pos:end="5499:27">)</operator><call pos:start="5499:28" pos:end="5499:47"><name pos:start="5499:28" pos:end="5499:35">insn_get</name><argument_list pos:start="5499:36" pos:end="5499:47">(<argument pos:start="5499:37" pos:end="5499:37"><expr pos:start="5499:37" pos:end="5499:37"><name pos:start="5499:37" pos:end="5499:37">s</name></expr></argument>, <argument pos:start="5499:40" pos:end="5499:46"><expr pos:start="5499:40" pos:end="5499:46"><name pos:start="5499:40" pos:end="5499:46">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5501:13" pos:end="5501:42"><expr pos:start="5501:13" pos:end="5501:41"><name pos:start="5501:13" pos:end="5501:20">next_eip</name> <operator pos:start="5501:22" pos:end="5501:22">=</operator> <name pos:start="5501:24" pos:end="5501:28"><name pos:start="5501:24" pos:end="5501:24">s</name><operator pos:start="5501:25" pos:end="5501:26">-&gt;</operator><name pos:start="5501:27" pos:end="5501:28">pc</name></name> <operator pos:start="5501:30" pos:end="5501:30">-</operator> <name pos:start="5501:32" pos:end="5501:41"><name pos:start="5501:32" pos:end="5501:32">s</name><operator pos:start="5501:33" pos:end="5501:34">-&gt;</operator><name pos:start="5501:35" pos:end="5501:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="5503:13" pos:end="5503:29"><expr pos:start="5503:13" pos:end="5503:28"><name pos:start="5503:13" pos:end="5503:16">tval</name> <operator pos:start="5503:18" pos:end="5503:19">+=</operator> <name pos:start="5503:21" pos:end="5503:28">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="5505:13" pos:end="5507:31"><if pos:start="5505:13" pos:end="5507:31">if <condition pos:start="5505:16" pos:end="5505:30">(<expr pos:start="5505:17" pos:end="5505:29"><name pos:start="5505:17" pos:end="5505:24"><name pos:start="5505:17" pos:end="5505:17">s</name><operator pos:start="5505:18" pos:end="5505:19">-&gt;</operator><name pos:start="5505:20" pos:end="5505:24">dflag</name></name> <operator pos:start="5505:26" pos:end="5505:27">==</operator> <literal type="number" pos:start="5505:29" pos:end="5505:29">0</literal></expr>)</condition><block type="pseudo" pos:start="5507:17" pos:end="5507:31"><block_content pos:start="5507:17" pos:end="5507:31">

                <expr_stmt pos:start="5507:17" pos:end="5507:31"><expr pos:start="5507:17" pos:end="5507:30"><name pos:start="5507:17" pos:end="5507:20">tval</name> <operator pos:start="5507:22" pos:end="5507:23">&amp;=</operator> <literal type="number" pos:start="5507:25" pos:end="5507:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="5511:13" pos:end="5511:33"><expr pos:start="5511:13" pos:end="5511:32"><name pos:start="5511:13" pos:end="5511:14">l1</name> <operator pos:start="5511:16" pos:end="5511:16">=</operator> <call pos:start="5511:18" pos:end="5511:32"><name pos:start="5511:18" pos:end="5511:30">gen_new_label</name><argument_list pos:start="5511:31" pos:end="5511:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5513:13" pos:end="5513:33"><expr pos:start="5513:13" pos:end="5513:32"><name pos:start="5513:13" pos:end="5513:14">l2</name> <operator pos:start="5513:16" pos:end="5513:16">=</operator> <call pos:start="5513:18" pos:end="5513:32"><name pos:start="5513:18" pos:end="5513:30">gen_new_label</name><argument_list pos:start="5513:31" pos:end="5513:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5515:13" pos:end="5515:33"><expr pos:start="5515:13" pos:end="5515:32"><name pos:start="5515:13" pos:end="5515:14">l3</name> <operator pos:start="5515:16" pos:end="5515:16">=</operator> <call pos:start="5515:18" pos:end="5515:32"><name pos:start="5515:18" pos:end="5515:30">gen_new_label</name><argument_list pos:start="5515:31" pos:end="5515:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5517:13" pos:end="5517:19"><expr pos:start="5517:13" pos:end="5517:18"><name pos:start="5517:13" pos:end="5517:13">b</name> <operator pos:start="5517:15" pos:end="5517:16">&amp;=</operator> <literal type="number" pos:start="5517:18" pos:end="5517:18">3</literal></expr>;</expr_stmt>

            <switch pos:start="5519:13" pos:end="5565:13">switch<condition pos:start="5519:19" pos:end="5519:21">(<expr pos:start="5519:20" pos:end="5519:20"><name pos:start="5519:20" pos:end="5519:20">b</name></expr>)</condition> <block pos:start="5519:23" pos:end="5565:13">{<block_content pos:start="5521:13" pos:end="5563:22">

            <case pos:start="5521:13" pos:end="5521:19">case <expr pos:start="5521:18" pos:end="5521:18"><literal type="number" pos:start="5521:18" pos:end="5521:18">0</literal></expr>:</case> <comment type="block" pos:start="5521:21" pos:end="5521:32">/* loopnz */</comment>

            <case pos:start="5523:13" pos:end="5523:19">case <expr pos:start="5523:18" pos:end="5523:18"><literal type="number" pos:start="5523:18" pos:end="5523:18">1</literal></expr>:</case> <comment type="block" pos:start="5523:21" pos:end="5523:31">/* loopz */</comment>

                <if_stmt pos:start="5525:17" pos:end="5527:47"><if pos:start="5525:17" pos:end="5527:47">if <condition pos:start="5525:20" pos:end="5525:46">(<expr pos:start="5525:21" pos:end="5525:45"><name pos:start="5525:21" pos:end="5525:28"><name pos:start="5525:21" pos:end="5525:21">s</name><operator pos:start="5525:22" pos:end="5525:23">-&gt;</operator><name pos:start="5525:24" pos:end="5525:28">cc_op</name></name> <operator pos:start="5525:30" pos:end="5525:31">!=</operator> <name pos:start="5525:33" pos:end="5525:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5527:21" pos:end="5527:47"><block_content pos:start="5527:21" pos:end="5527:47">

                    <expr_stmt pos:start="5527:21" pos:end="5527:47"><expr pos:start="5527:21" pos:end="5527:46"><call pos:start="5527:21" pos:end="5527:46"><name pos:start="5527:21" pos:end="5527:36">gen_op_set_cc_op</name><argument_list pos:start="5527:37" pos:end="5527:46">(<argument pos:start="5527:38" pos:end="5527:45"><expr pos:start="5527:38" pos:end="5527:45"><name pos:start="5527:38" pos:end="5527:45"><name pos:start="5527:38" pos:end="5527:38">s</name><operator pos:start="5527:39" pos:end="5527:40">-&gt;</operator><name pos:start="5527:41" pos:end="5527:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="5529:17" pos:end="5529:55"><expr pos:start="5529:17" pos:end="5529:54"><call pos:start="5529:17" pos:end="5529:54"><name pos:start="5529:17" pos:end="5529:33">gen_op_add_reg_im</name><argument_list pos:start="5529:34" pos:end="5529:54">(<argument pos:start="5529:35" pos:end="5529:42"><expr pos:start="5529:35" pos:end="5529:42"><name pos:start="5529:35" pos:end="5529:42"><name pos:start="5529:35" pos:end="5529:35">s</name><operator pos:start="5529:36" pos:end="5529:37">-&gt;</operator><name pos:start="5529:38" pos:end="5529:42">aflag</name></name></expr></argument>, <argument pos:start="5529:45" pos:end="5529:49"><expr pos:start="5529:45" pos:end="5529:49"><name pos:start="5529:45" pos:end="5529:49">R_ECX</name></expr></argument>, <argument pos:start="5529:52" pos:end="5529:53"><expr pos:start="5529:52" pos:end="5529:53"><operator pos:start="5529:52" pos:end="5529:52">-</operator><literal type="number" pos:start="5529:53" pos:end="5529:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5531:17" pos:end="5531:44"><expr pos:start="5531:17" pos:end="5531:43"><call pos:start="5531:17" pos:end="5531:43"><name pos:start="5531:17" pos:end="5531:29">gen_op_jz_ecx</name><argument_list pos:start="5531:30" pos:end="5531:43">(<argument pos:start="5531:31" pos:end="5531:38"><expr pos:start="5531:31" pos:end="5531:38"><name pos:start="5531:31" pos:end="5531:38"><name pos:start="5531:31" pos:end="5531:31">s</name><operator pos:start="5531:32" pos:end="5531:33">-&gt;</operator><name pos:start="5531:34" pos:end="5531:38">aflag</name></name></expr></argument>, <argument pos:start="5531:41" pos:end="5531:42"><expr pos:start="5531:41" pos:end="5531:42"><name pos:start="5531:41" pos:end="5531:42">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5533:17" pos:end="5533:45"><expr pos:start="5533:17" pos:end="5533:44"><call pos:start="5533:17" pos:end="5533:44"><name pos:start="5533:17" pos:end="5533:34">gen_compute_eflags</name><argument_list pos:start="5533:35" pos:end="5533:44">(<argument pos:start="5533:36" pos:end="5533:43"><expr pos:start="5533:36" pos:end="5533:43"><name pos:start="5533:36" pos:end="5533:43">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5535:17" pos:end="5535:58"><expr pos:start="5535:17" pos:end="5535:57"><call pos:start="5535:17" pos:end="5535:57"><name pos:start="5535:17" pos:end="5535:31">tcg_gen_andi_tl</name><argument_list pos:start="5535:32" pos:end="5535:57">(<argument pos:start="5535:33" pos:end="5535:40"><expr pos:start="5535:33" pos:end="5535:40"><name pos:start="5535:33" pos:end="5535:40">cpu_tmp0</name></expr></argument>, <argument pos:start="5535:43" pos:end="5535:50"><expr pos:start="5535:43" pos:end="5535:50"><name pos:start="5535:43" pos:end="5535:50">cpu_tmp0</name></expr></argument>, <argument pos:start="5535:53" pos:end="5535:56"><expr pos:start="5535:53" pos:end="5535:56"><name pos:start="5535:53" pos:end="5535:56">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5537:17" pos:end="5545:17"><if pos:start="5537:17" pos:end="5541:17">if <condition pos:start="5537:20" pos:end="5537:27">(<expr pos:start="5537:21" pos:end="5537:26"><name pos:start="5537:21" pos:end="5537:21">b</name> <operator pos:start="5537:23" pos:end="5537:24">==</operator> <literal type="number" pos:start="5537:26" pos:end="5537:26">0</literal></expr>)</condition> <block pos:start="5537:29" pos:end="5541:17">{<block_content pos:start="5539:21" pos:end="5539:69">

                    <expr_stmt pos:start="5539:21" pos:end="5539:69"><expr pos:start="5539:21" pos:end="5539:68"><call pos:start="5539:21" pos:end="5539:68"><name pos:start="5539:21" pos:end="5539:38">tcg_gen_brcondi_tl</name><argument_list pos:start="5539:39" pos:end="5539:68">(<argument pos:start="5539:40" pos:end="5539:50"><expr pos:start="5539:40" pos:end="5539:50"><name pos:start="5539:40" pos:end="5539:50">TCG_COND_EQ</name></expr></argument>, <argument pos:start="5539:53" pos:end="5539:60"><expr pos:start="5539:53" pos:end="5539:60"><name pos:start="5539:53" pos:end="5539:60">cpu_tmp0</name></expr></argument>, <argument pos:start="5539:63" pos:end="5539:63"><expr pos:start="5539:63" pos:end="5539:63"><literal type="number" pos:start="5539:63" pos:end="5539:63">0</literal></expr></argument>, <argument pos:start="5539:66" pos:end="5539:67"><expr pos:start="5539:66" pos:end="5539:67"><name pos:start="5539:66" pos:end="5539:67">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="5541:19" pos:end="5545:17">else <block pos:start="5541:24" pos:end="5545:17">{<block_content pos:start="5543:21" pos:end="5543:69">

                    <expr_stmt pos:start="5543:21" pos:end="5543:69"><expr pos:start="5543:21" pos:end="5543:68"><call pos:start="5543:21" pos:end="5543:68"><name pos:start="5543:21" pos:end="5543:38">tcg_gen_brcondi_tl</name><argument_list pos:start="5543:39" pos:end="5543:68">(<argument pos:start="5543:40" pos:end="5543:50"><expr pos:start="5543:40" pos:end="5543:50"><name pos:start="5543:40" pos:end="5543:50">TCG_COND_NE</name></expr></argument>, <argument pos:start="5543:53" pos:end="5543:60"><expr pos:start="5543:53" pos:end="5543:60"><name pos:start="5543:53" pos:end="5543:60">cpu_tmp0</name></expr></argument>, <argument pos:start="5543:63" pos:end="5543:63"><expr pos:start="5543:63" pos:end="5543:63"><literal type="number" pos:start="5543:63" pos:end="5543:63">0</literal></expr></argument>, <argument pos:start="5543:66" pos:end="5543:67"><expr pos:start="5543:66" pos:end="5543:67"><name pos:start="5543:66" pos:end="5543:67">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="5547:17" pos:end="5547:22">break;</break>

            <case pos:start="5549:13" pos:end="5549:19">case <expr pos:start="5549:18" pos:end="5549:18"><literal type="number" pos:start="5549:18" pos:end="5549:18">2</literal></expr>:</case> <comment type="block" pos:start="5549:21" pos:end="5549:30">/* loop */</comment>

                <expr_stmt pos:start="5551:17" pos:end="5551:55"><expr pos:start="5551:17" pos:end="5551:54"><call pos:start="5551:17" pos:end="5551:54"><name pos:start="5551:17" pos:end="5551:33">gen_op_add_reg_im</name><argument_list pos:start="5551:34" pos:end="5551:54">(<argument pos:start="5551:35" pos:end="5551:42"><expr pos:start="5551:35" pos:end="5551:42"><name pos:start="5551:35" pos:end="5551:42"><name pos:start="5551:35" pos:end="5551:35">s</name><operator pos:start="5551:36" pos:end="5551:37">-&gt;</operator><name pos:start="5551:38" pos:end="5551:42">aflag</name></name></expr></argument>, <argument pos:start="5551:45" pos:end="5551:49"><expr pos:start="5551:45" pos:end="5551:49"><name pos:start="5551:45" pos:end="5551:49">R_ECX</name></expr></argument>, <argument pos:start="5551:52" pos:end="5551:53"><expr pos:start="5551:52" pos:end="5551:53"><operator pos:start="5551:52" pos:end="5551:52">-</operator><literal type="number" pos:start="5551:53" pos:end="5551:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5553:17" pos:end="5553:45"><expr pos:start="5553:17" pos:end="5553:44"><call pos:start="5553:17" pos:end="5553:44"><name pos:start="5553:17" pos:end="5553:30">gen_op_jnz_ecx</name><argument_list pos:start="5553:31" pos:end="5553:44">(<argument pos:start="5553:32" pos:end="5553:39"><expr pos:start="5553:32" pos:end="5553:39"><name pos:start="5553:32" pos:end="5553:39"><name pos:start="5553:32" pos:end="5553:32">s</name><operator pos:start="5553:33" pos:end="5553:34">-&gt;</operator><name pos:start="5553:35" pos:end="5553:39">aflag</name></name></expr></argument>, <argument pos:start="5553:42" pos:end="5553:43"><expr pos:start="5553:42" pos:end="5553:43"><name pos:start="5553:42" pos:end="5553:43">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5555:17" pos:end="5555:22">break;</break>

            <default pos:start="5557:13" pos:end="5557:20">default:</default>

            <case pos:start="5559:13" pos:end="5559:19">case <expr pos:start="5559:18" pos:end="5559:18"><literal type="number" pos:start="5559:18" pos:end="5559:18">3</literal></expr>:</case> <comment type="block" pos:start="5559:21" pos:end="5559:30">/* jcxz */</comment>

                <expr_stmt pos:start="5561:17" pos:end="5561:44"><expr pos:start="5561:17" pos:end="5561:43"><call pos:start="5561:17" pos:end="5561:43"><name pos:start="5561:17" pos:end="5561:29">gen_op_jz_ecx</name><argument_list pos:start="5561:30" pos:end="5561:43">(<argument pos:start="5561:31" pos:end="5561:38"><expr pos:start="5561:31" pos:end="5561:38"><name pos:start="5561:31" pos:end="5561:38"><name pos:start="5561:31" pos:end="5561:31">s</name><operator pos:start="5561:32" pos:end="5561:33">-&gt;</operator><name pos:start="5561:34" pos:end="5561:38">aflag</name></name></expr></argument>, <argument pos:start="5561:41" pos:end="5561:42"><expr pos:start="5561:41" pos:end="5561:42"><name pos:start="5561:41" pos:end="5561:42">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="5563:17" pos:end="5563:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="5569:13" pos:end="5569:30"><expr pos:start="5569:13" pos:end="5569:29"><call pos:start="5569:13" pos:end="5569:29"><name pos:start="5569:13" pos:end="5569:25">gen_set_label</name><argument_list pos:start="5569:26" pos:end="5569:29">(<argument pos:start="5569:27" pos:end="5569:28"><expr pos:start="5569:27" pos:end="5569:28"><name pos:start="5569:27" pos:end="5569:28">l3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5571:13" pos:end="5571:33"><expr pos:start="5571:13" pos:end="5571:32"><call pos:start="5571:13" pos:end="5571:32"><name pos:start="5571:13" pos:end="5571:22">gen_jmp_im</name><argument_list pos:start="5571:23" pos:end="5571:32">(<argument pos:start="5571:24" pos:end="5571:31"><expr pos:start="5571:24" pos:end="5571:31"><name pos:start="5571:24" pos:end="5571:31">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5573:13" pos:end="5573:27"><expr pos:start="5573:13" pos:end="5573:26"><call pos:start="5573:13" pos:end="5573:26"><name pos:start="5573:13" pos:end="5573:22">tcg_gen_br</name><argument_list pos:start="5573:23" pos:end="5573:26">(<argument pos:start="5573:24" pos:end="5573:25"><expr pos:start="5573:24" pos:end="5573:25"><name pos:start="5573:24" pos:end="5573:25">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="5577:13" pos:end="5577:30"><expr pos:start="5577:13" pos:end="5577:29"><call pos:start="5577:13" pos:end="5577:29"><name pos:start="5577:13" pos:end="5577:25">gen_set_label</name><argument_list pos:start="5577:26" pos:end="5577:29">(<argument pos:start="5577:27" pos:end="5577:28"><expr pos:start="5577:27" pos:end="5577:28"><name pos:start="5577:27" pos:end="5577:28">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5579:13" pos:end="5579:29"><expr pos:start="5579:13" pos:end="5579:28"><call pos:start="5579:13" pos:end="5579:28"><name pos:start="5579:13" pos:end="5579:22">gen_jmp_im</name><argument_list pos:start="5579:23" pos:end="5579:28">(<argument pos:start="5579:24" pos:end="5579:27"><expr pos:start="5579:24" pos:end="5579:27"><name pos:start="5579:24" pos:end="5579:27">tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5581:13" pos:end="5581:30"><expr pos:start="5581:13" pos:end="5581:29"><call pos:start="5581:13" pos:end="5581:29"><name pos:start="5581:13" pos:end="5581:25">gen_set_label</name><argument_list pos:start="5581:26" pos:end="5581:29">(<argument pos:start="5581:27" pos:end="5581:28"><expr pos:start="5581:27" pos:end="5581:28"><name pos:start="5581:27" pos:end="5581:28">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5583:13" pos:end="5583:23"><expr pos:start="5583:13" pos:end="5583:22"><call pos:start="5583:13" pos:end="5583:22"><name pos:start="5583:13" pos:end="5583:19">gen_eob</name><argument_list pos:start="5583:20" pos:end="5583:22">(<argument pos:start="5583:21" pos:end="5583:21"><expr pos:start="5583:21" pos:end="5583:21"><name pos:start="5583:21" pos:end="5583:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5587:9" pos:end="5587:14">break;</break>

    <case pos:start="5589:5" pos:end="5589:15">case <expr pos:start="5589:10" pos:end="5589:14"><literal type="number" pos:start="5589:10" pos:end="5589:14">0x130</literal></expr>:</case> <comment type="block" pos:start="5589:17" pos:end="5589:27">/* wrmsr */</comment>

    <case pos:start="5591:5" pos:end="5591:15">case <expr pos:start="5591:10" pos:end="5591:14"><literal type="number" pos:start="5591:10" pos:end="5591:14">0x132</literal></expr>:</case> <comment type="block" pos:start="5591:17" pos:end="5591:27">/* rdmsr */</comment>

        <if_stmt pos:start="5593:9" pos:end="5615:9"><if pos:start="5593:9" pos:end="5597:9">if <condition pos:start="5593:12" pos:end="5593:24">(<expr pos:start="5593:13" pos:end="5593:23"><name pos:start="5593:13" pos:end="5593:18"><name pos:start="5593:13" pos:end="5593:13">s</name><operator pos:start="5593:14" pos:end="5593:15">-&gt;</operator><name pos:start="5593:16" pos:end="5593:18">cpl</name></name> <operator pos:start="5593:20" pos:end="5593:21">!=</operator> <literal type="number" pos:start="5593:23" pos:end="5593:23">0</literal></expr>)</condition> <block pos:start="5593:26" pos:end="5597:9">{<block_content pos:start="5595:13" pos:end="5595:64">

            <expr_stmt pos:start="5595:13" pos:end="5595:64"><expr pos:start="5595:13" pos:end="5595:63"><call pos:start="5595:13" pos:end="5595:63"><name pos:start="5595:13" pos:end="5595:25">gen_exception</name><argument_list pos:start="5595:26" pos:end="5595:63">(<argument pos:start="5595:27" pos:end="5595:27"><expr pos:start="5595:27" pos:end="5595:27"><name pos:start="5595:27" pos:end="5595:27">s</name></expr></argument>, <argument pos:start="5595:30" pos:end="5595:39"><expr pos:start="5595:30" pos:end="5595:39"><name pos:start="5595:30" pos:end="5595:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5595:42" pos:end="5595:62"><expr pos:start="5595:42" pos:end="5595:62"><name pos:start="5595:42" pos:end="5595:49">pc_start</name> <operator pos:start="5595:51" pos:end="5595:51">-</operator> <name pos:start="5595:53" pos:end="5595:62"><name pos:start="5595:53" pos:end="5595:53">s</name><operator pos:start="5595:54" pos:end="5595:55">-&gt;</operator><name pos:start="5595:56" pos:end="5595:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5597:11" pos:end="5615:9">else <block pos:start="5597:16" pos:end="5615:9">{<block_content pos:start="5599:13" pos:end="5613:13">

            <if_stmt pos:start="5599:13" pos:end="5601:43"><if pos:start="5599:13" pos:end="5601:43">if <condition pos:start="5599:16" pos:end="5599:42">(<expr pos:start="5599:17" pos:end="5599:41"><name pos:start="5599:17" pos:end="5599:24"><name pos:start="5599:17" pos:end="5599:17">s</name><operator pos:start="5599:18" pos:end="5599:19">-&gt;</operator><name pos:start="5599:20" pos:end="5599:24">cc_op</name></name> <operator pos:start="5599:26" pos:end="5599:27">!=</operator> <name pos:start="5599:29" pos:end="5599:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5601:17" pos:end="5601:43"><block_content pos:start="5601:17" pos:end="5601:43">

                <expr_stmt pos:start="5601:17" pos:end="5601:43"><expr pos:start="5601:17" pos:end="5601:42"><call pos:start="5601:17" pos:end="5601:42"><name pos:start="5601:17" pos:end="5601:32">gen_op_set_cc_op</name><argument_list pos:start="5601:33" pos:end="5601:42">(<argument pos:start="5601:34" pos:end="5601:41"><expr pos:start="5601:34" pos:end="5601:41"><name pos:start="5601:34" pos:end="5601:41"><name pos:start="5601:34" pos:end="5601:34">s</name><operator pos:start="5601:35" pos:end="5601:36">-&gt;</operator><name pos:start="5601:37" pos:end="5601:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5603:13" pos:end="5603:46"><expr pos:start="5603:13" pos:end="5603:45"><call pos:start="5603:13" pos:end="5603:45"><name pos:start="5603:13" pos:end="5603:22">gen_jmp_im</name><argument_list pos:start="5603:23" pos:end="5603:45">(<argument pos:start="5603:24" pos:end="5603:44"><expr pos:start="5603:24" pos:end="5603:44"><name pos:start="5603:24" pos:end="5603:31">pc_start</name> <operator pos:start="5603:33" pos:end="5603:33">-</operator> <name pos:start="5603:35" pos:end="5603:44"><name pos:start="5603:35" pos:end="5603:35">s</name><operator pos:start="5603:36" pos:end="5603:37">-&gt;</operator><name pos:start="5603:38" pos:end="5603:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5605:13" pos:end="5613:13"><if pos:start="5605:13" pos:end="5609:13">if <condition pos:start="5605:16" pos:end="5605:22">(<expr pos:start="5605:17" pos:end="5605:21"><name pos:start="5605:17" pos:end="5605:17">b</name> <operator pos:start="5605:19" pos:end="5605:19">&amp;</operator> <literal type="number" pos:start="5605:21" pos:end="5605:21">2</literal></expr>)</condition> <block pos:start="5605:24" pos:end="5609:13">{<block_content pos:start="5607:17" pos:end="5607:42">

                <expr_stmt pos:start="5607:17" pos:end="5607:42"><expr pos:start="5607:17" pos:end="5607:41"><call pos:start="5607:17" pos:end="5607:41"><name pos:start="5607:17" pos:end="5607:32">gen_helper_rdmsr</name><argument_list pos:start="5607:33" pos:end="5607:41">(<argument pos:start="5607:34" pos:end="5607:40"><expr pos:start="5607:34" pos:end="5607:40"><name pos:start="5607:34" pos:end="5607:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5609:15" pos:end="5613:13">else <block pos:start="5609:20" pos:end="5613:13">{<block_content pos:start="5611:17" pos:end="5611:42">

                <expr_stmt pos:start="5611:17" pos:end="5611:42"><expr pos:start="5611:17" pos:end="5611:41"><call pos:start="5611:17" pos:end="5611:41"><name pos:start="5611:17" pos:end="5611:32">gen_helper_wrmsr</name><argument_list pos:start="5611:33" pos:end="5611:41">(<argument pos:start="5611:34" pos:end="5611:40"><expr pos:start="5611:34" pos:end="5611:40"><name pos:start="5611:34" pos:end="5611:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5617:9" pos:end="5617:14">break;</break>

    <case pos:start="5619:5" pos:end="5619:15">case <expr pos:start="5619:10" pos:end="5619:14"><literal type="number" pos:start="5619:10" pos:end="5619:14">0x131</literal></expr>:</case> <comment type="block" pos:start="5619:17" pos:end="5619:27">/* rdtsc */</comment>

        <if_stmt pos:start="5621:9" pos:end="5623:39"><if pos:start="5621:9" pos:end="5623:39">if <condition pos:start="5621:12" pos:end="5621:38">(<expr pos:start="5621:13" pos:end="5621:37"><name pos:start="5621:13" pos:end="5621:20"><name pos:start="5621:13" pos:end="5621:13">s</name><operator pos:start="5621:14" pos:end="5621:15">-&gt;</operator><name pos:start="5621:16" pos:end="5621:20">cc_op</name></name> <operator pos:start="5621:22" pos:end="5621:23">!=</operator> <name pos:start="5621:25" pos:end="5621:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5623:13" pos:end="5623:39"><block_content pos:start="5623:13" pos:end="5623:39">

            <expr_stmt pos:start="5623:13" pos:end="5623:39"><expr pos:start="5623:13" pos:end="5623:38"><call pos:start="5623:13" pos:end="5623:38"><name pos:start="5623:13" pos:end="5623:28">gen_op_set_cc_op</name><argument_list pos:start="5623:29" pos:end="5623:38">(<argument pos:start="5623:30" pos:end="5623:37"><expr pos:start="5623:30" pos:end="5623:37"><name pos:start="5623:30" pos:end="5623:37"><name pos:start="5623:30" pos:end="5623:30">s</name><operator pos:start="5623:31" pos:end="5623:32">-&gt;</operator><name pos:start="5623:33" pos:end="5623:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5625:9" pos:end="5625:42"><expr pos:start="5625:9" pos:end="5625:41"><call pos:start="5625:9" pos:end="5625:41"><name pos:start="5625:9" pos:end="5625:18">gen_jmp_im</name><argument_list pos:start="5625:19" pos:end="5625:41">(<argument pos:start="5625:20" pos:end="5625:40"><expr pos:start="5625:20" pos:end="5625:40"><name pos:start="5625:20" pos:end="5625:27">pc_start</name> <operator pos:start="5625:29" pos:end="5625:29">-</operator> <name pos:start="5625:31" pos:end="5625:40"><name pos:start="5625:31" pos:end="5625:31">s</name><operator pos:start="5625:32" pos:end="5625:33">-&gt;</operator><name pos:start="5625:34" pos:end="5625:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5627:9" pos:end="5629:27"><if pos:start="5627:9" pos:end="5629:27">if <condition pos:start="5627:12" pos:end="5627:23">(<expr pos:start="5627:13" pos:end="5627:22"><name pos:start="5627:13" pos:end="5627:22">use_icount</name></expr>)</condition><block type="pseudo" pos:start="5629:13" pos:end="5629:27"><block_content pos:start="5629:13" pos:end="5629:27">

            <expr_stmt pos:start="5629:13" pos:end="5629:27"><expr pos:start="5629:13" pos:end="5629:26"><call pos:start="5629:13" pos:end="5629:26"><name pos:start="5629:13" pos:end="5629:24">gen_io_start</name><argument_list pos:start="5629:25" pos:end="5629:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5631:9" pos:end="5631:34"><expr pos:start="5631:9" pos:end="5631:33"><call pos:start="5631:9" pos:end="5631:33"><name pos:start="5631:9" pos:end="5631:24">gen_helper_rdtsc</name><argument_list pos:start="5631:25" pos:end="5631:33">(<argument pos:start="5631:26" pos:end="5631:32"><expr pos:start="5631:26" pos:end="5631:32"><name pos:start="5631:26" pos:end="5631:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5633:9" pos:end="5639:9"><if pos:start="5633:9" pos:end="5639:9">if <condition pos:start="5633:12" pos:end="5633:23">(<expr pos:start="5633:13" pos:end="5633:22"><name pos:start="5633:13" pos:end="5633:22">use_icount</name></expr>)</condition> <block pos:start="5633:25" pos:end="5639:9">{<block_content pos:start="5635:13" pos:end="5637:43">

            <expr_stmt pos:start="5635:13" pos:end="5635:25"><expr pos:start="5635:13" pos:end="5635:24"><call pos:start="5635:13" pos:end="5635:24"><name pos:start="5635:13" pos:end="5635:22">gen_io_end</name><argument_list pos:start="5635:23" pos:end="5635:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5637:13" pos:end="5637:43"><expr pos:start="5637:13" pos:end="5637:42"><call pos:start="5637:13" pos:end="5637:42"><name pos:start="5637:13" pos:end="5637:19">gen_jmp</name><argument_list pos:start="5637:20" pos:end="5637:42">(<argument pos:start="5637:21" pos:end="5637:21"><expr pos:start="5637:21" pos:end="5637:21"><name pos:start="5637:21" pos:end="5637:21">s</name></expr></argument>, <argument pos:start="5637:24" pos:end="5637:41"><expr pos:start="5637:24" pos:end="5637:41"><name pos:start="5637:24" pos:end="5637:28"><name pos:start="5637:24" pos:end="5637:24">s</name><operator pos:start="5637:25" pos:end="5637:26">-&gt;</operator><name pos:start="5637:27" pos:end="5637:28">pc</name></name> <operator pos:start="5637:30" pos:end="5637:30">-</operator> <name pos:start="5637:32" pos:end="5637:41"><name pos:start="5637:32" pos:end="5637:32">s</name><operator pos:start="5637:33" pos:end="5637:34">-&gt;</operator><name pos:start="5637:35" pos:end="5637:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="5641:9" pos:end="5641:14">break;</break>

    <case pos:start="5643:5" pos:end="5643:15">case <expr pos:start="5643:10" pos:end="5643:14"><literal type="number" pos:start="5643:10" pos:end="5643:14">0x133</literal></expr>:</case> <comment type="block" pos:start="5643:17" pos:end="5643:27">/* rdpmc */</comment>

        <if_stmt pos:start="5645:9" pos:end="5647:39"><if pos:start="5645:9" pos:end="5647:39">if <condition pos:start="5645:12" pos:end="5645:38">(<expr pos:start="5645:13" pos:end="5645:37"><name pos:start="5645:13" pos:end="5645:20"><name pos:start="5645:13" pos:end="5645:13">s</name><operator pos:start="5645:14" pos:end="5645:15">-&gt;</operator><name pos:start="5645:16" pos:end="5645:20">cc_op</name></name> <operator pos:start="5645:22" pos:end="5645:23">!=</operator> <name pos:start="5645:25" pos:end="5645:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5647:13" pos:end="5647:39"><block_content pos:start="5647:13" pos:end="5647:39">

            <expr_stmt pos:start="5647:13" pos:end="5647:39"><expr pos:start="5647:13" pos:end="5647:38"><call pos:start="5647:13" pos:end="5647:38"><name pos:start="5647:13" pos:end="5647:28">gen_op_set_cc_op</name><argument_list pos:start="5647:29" pos:end="5647:38">(<argument pos:start="5647:30" pos:end="5647:37"><expr pos:start="5647:30" pos:end="5647:37"><name pos:start="5647:30" pos:end="5647:37"><name pos:start="5647:30" pos:end="5647:30">s</name><operator pos:start="5647:31" pos:end="5647:32">-&gt;</operator><name pos:start="5647:33" pos:end="5647:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5649:9" pos:end="5649:42"><expr pos:start="5649:9" pos:end="5649:41"><call pos:start="5649:9" pos:end="5649:41"><name pos:start="5649:9" pos:end="5649:18">gen_jmp_im</name><argument_list pos:start="5649:19" pos:end="5649:41">(<argument pos:start="5649:20" pos:end="5649:40"><expr pos:start="5649:20" pos:end="5649:40"><name pos:start="5649:20" pos:end="5649:27">pc_start</name> <operator pos:start="5649:29" pos:end="5649:29">-</operator> <name pos:start="5649:31" pos:end="5649:40"><name pos:start="5649:31" pos:end="5649:31">s</name><operator pos:start="5649:32" pos:end="5649:33">-&gt;</operator><name pos:start="5649:34" pos:end="5649:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5651:9" pos:end="5651:34"><expr pos:start="5651:9" pos:end="5651:33"><call pos:start="5651:9" pos:end="5651:33"><name pos:start="5651:9" pos:end="5651:24">gen_helper_rdpmc</name><argument_list pos:start="5651:25" pos:end="5651:33">(<argument pos:start="5651:26" pos:end="5651:32"><expr pos:start="5651:26" pos:end="5651:32"><name pos:start="5651:26" pos:end="5651:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5653:9" pos:end="5653:14">break;</break>

    <case pos:start="5655:5" pos:end="5655:15">case <expr pos:start="5655:10" pos:end="5655:14"><literal type="number" pos:start="5655:10" pos:end="5655:14">0x134</literal></expr>:</case> <comment type="block" pos:start="5655:17" pos:end="5655:30">/* sysenter */</comment>

        <comment type="block" pos:start="5657:9" pos:end="5657:51">/* For Intel SYSENTER is valid on 64-bit */</comment>

        <if_stmt pos:start="5659:9" pos:end="5661:28"><if pos:start="5659:9" pos:end="5661:28">if <condition pos:start="5659:12" pos:end="5659:79">(<expr pos:start="5659:13" pos:end="5659:78"><call pos:start="5659:13" pos:end="5659:21"><name pos:start="5659:13" pos:end="5659:18">CODE64</name><argument_list pos:start="5659:19" pos:end="5659:21">(<argument pos:start="5659:20" pos:end="5659:20"><expr pos:start="5659:20" pos:end="5659:20"><name pos:start="5659:20" pos:end="5659:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="5659:23" pos:end="5659:24">&amp;&amp;</operator> <name pos:start="5659:26" pos:end="5659:54"><name pos:start="5659:26" pos:end="5659:39">cpu_single_env</name><operator pos:start="5659:40" pos:end="5659:41">-&gt;</operator><name pos:start="5659:42" pos:end="5659:54">cpuid_vendor1</name></name> <operator pos:start="5659:56" pos:end="5659:57">!=</operator> <name pos:start="5659:59" pos:end="5659:78">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="5661:13" pos:end="5661:28"><block_content pos:start="5661:13" pos:end="5661:28">

            <goto pos:start="5661:13" pos:end="5661:28">goto <name pos:start="5661:18" pos:end="5661:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5663:9" pos:end="5677:9"><if pos:start="5663:9" pos:end="5667:9">if <condition pos:start="5663:12" pos:end="5663:19">(<expr pos:start="5663:13" pos:end="5663:18"><operator pos:start="5663:13" pos:end="5663:13">!</operator><name pos:start="5663:14" pos:end="5663:18"><name pos:start="5663:14" pos:end="5663:14">s</name><operator pos:start="5663:15" pos:end="5663:16">-&gt;</operator><name pos:start="5663:17" pos:end="5663:18">pe</name></name></expr>)</condition> <block pos:start="5663:21" pos:end="5667:9">{<block_content pos:start="5665:13" pos:end="5665:64">

            <expr_stmt pos:start="5665:13" pos:end="5665:64"><expr pos:start="5665:13" pos:end="5665:63"><call pos:start="5665:13" pos:end="5665:63"><name pos:start="5665:13" pos:end="5665:25">gen_exception</name><argument_list pos:start="5665:26" pos:end="5665:63">(<argument pos:start="5665:27" pos:end="5665:27"><expr pos:start="5665:27" pos:end="5665:27"><name pos:start="5665:27" pos:end="5665:27">s</name></expr></argument>, <argument pos:start="5665:30" pos:end="5665:39"><expr pos:start="5665:30" pos:end="5665:39"><name pos:start="5665:30" pos:end="5665:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5665:42" pos:end="5665:62"><expr pos:start="5665:42" pos:end="5665:62"><name pos:start="5665:42" pos:end="5665:49">pc_start</name> <operator pos:start="5665:51" pos:end="5665:51">-</operator> <name pos:start="5665:53" pos:end="5665:62"><name pos:start="5665:53" pos:end="5665:53">s</name><operator pos:start="5665:54" pos:end="5665:55">-&gt;</operator><name pos:start="5665:56" pos:end="5665:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5667:11" pos:end="5677:9">else <block pos:start="5667:16" pos:end="5677:9">{<block_content pos:start="5669:13" pos:end="5675:23">

            <expr_stmt pos:start="5669:13" pos:end="5669:32"><expr pos:start="5669:13" pos:end="5669:31"><call pos:start="5669:13" pos:end="5669:31"><name pos:start="5669:13" pos:end="5669:28">gen_update_cc_op</name><argument_list pos:start="5669:29" pos:end="5669:31">(<argument pos:start="5669:30" pos:end="5669:30"><expr pos:start="5669:30" pos:end="5669:30"><name pos:start="5669:30" pos:end="5669:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5671:13" pos:end="5671:46"><expr pos:start="5671:13" pos:end="5671:45"><call pos:start="5671:13" pos:end="5671:45"><name pos:start="5671:13" pos:end="5671:22">gen_jmp_im</name><argument_list pos:start="5671:23" pos:end="5671:45">(<argument pos:start="5671:24" pos:end="5671:44"><expr pos:start="5671:24" pos:end="5671:44"><name pos:start="5671:24" pos:end="5671:31">pc_start</name> <operator pos:start="5671:33" pos:end="5671:33">-</operator> <name pos:start="5671:35" pos:end="5671:44"><name pos:start="5671:35" pos:end="5671:35">s</name><operator pos:start="5671:36" pos:end="5671:37">-&gt;</operator><name pos:start="5671:38" pos:end="5671:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5673:13" pos:end="5673:41"><expr pos:start="5673:13" pos:end="5673:40"><call pos:start="5673:13" pos:end="5673:40"><name pos:start="5673:13" pos:end="5673:31">gen_helper_sysenter</name><argument_list pos:start="5673:32" pos:end="5673:40">(<argument pos:start="5673:33" pos:end="5673:39"><expr pos:start="5673:33" pos:end="5673:39"><name pos:start="5673:33" pos:end="5673:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5675:13" pos:end="5675:23"><expr pos:start="5675:13" pos:end="5675:22"><call pos:start="5675:13" pos:end="5675:22"><name pos:start="5675:13" pos:end="5675:19">gen_eob</name><argument_list pos:start="5675:20" pos:end="5675:22">(<argument pos:start="5675:21" pos:end="5675:21"><expr pos:start="5675:21" pos:end="5675:21"><name pos:start="5675:21" pos:end="5675:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5679:9" pos:end="5679:14">break;</break>

    <case pos:start="5681:5" pos:end="5681:15">case <expr pos:start="5681:10" pos:end="5681:14"><literal type="number" pos:start="5681:10" pos:end="5681:14">0x135</literal></expr>:</case> <comment type="block" pos:start="5681:17" pos:end="5681:29">/* sysexit */</comment>

        <comment type="block" pos:start="5683:9" pos:end="5683:50">/* For Intel SYSEXIT is valid on 64-bit */</comment>

        <if_stmt pos:start="5685:9" pos:end="5687:28"><if pos:start="5685:9" pos:end="5687:28">if <condition pos:start="5685:12" pos:end="5685:79">(<expr pos:start="5685:13" pos:end="5685:78"><call pos:start="5685:13" pos:end="5685:21"><name pos:start="5685:13" pos:end="5685:18">CODE64</name><argument_list pos:start="5685:19" pos:end="5685:21">(<argument pos:start="5685:20" pos:end="5685:20"><expr pos:start="5685:20" pos:end="5685:20"><name pos:start="5685:20" pos:end="5685:20">s</name></expr></argument>)</argument_list></call> <operator pos:start="5685:23" pos:end="5685:24">&amp;&amp;</operator> <name pos:start="5685:26" pos:end="5685:54"><name pos:start="5685:26" pos:end="5685:39">cpu_single_env</name><operator pos:start="5685:40" pos:end="5685:41">-&gt;</operator><name pos:start="5685:42" pos:end="5685:54">cpuid_vendor1</name></name> <operator pos:start="5685:56" pos:end="5685:57">!=</operator> <name pos:start="5685:59" pos:end="5685:78">CPUID_VENDOR_INTEL_1</name></expr>)</condition><block type="pseudo" pos:start="5687:13" pos:end="5687:28"><block_content pos:start="5687:13" pos:end="5687:28">

            <goto pos:start="5687:13" pos:end="5687:28">goto <name pos:start="5687:18" pos:end="5687:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="5689:9" pos:end="5703:9"><if pos:start="5689:9" pos:end="5693:9">if <condition pos:start="5689:12" pos:end="5689:19">(<expr pos:start="5689:13" pos:end="5689:18"><operator pos:start="5689:13" pos:end="5689:13">!</operator><name pos:start="5689:14" pos:end="5689:18"><name pos:start="5689:14" pos:end="5689:14">s</name><operator pos:start="5689:15" pos:end="5689:16">-&gt;</operator><name pos:start="5689:17" pos:end="5689:18">pe</name></name></expr>)</condition> <block pos:start="5689:21" pos:end="5693:9">{<block_content pos:start="5691:13" pos:end="5691:64">

            <expr_stmt pos:start="5691:13" pos:end="5691:64"><expr pos:start="5691:13" pos:end="5691:63"><call pos:start="5691:13" pos:end="5691:63"><name pos:start="5691:13" pos:end="5691:25">gen_exception</name><argument_list pos:start="5691:26" pos:end="5691:63">(<argument pos:start="5691:27" pos:end="5691:27"><expr pos:start="5691:27" pos:end="5691:27"><name pos:start="5691:27" pos:end="5691:27">s</name></expr></argument>, <argument pos:start="5691:30" pos:end="5691:39"><expr pos:start="5691:30" pos:end="5691:39"><name pos:start="5691:30" pos:end="5691:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5691:42" pos:end="5691:62"><expr pos:start="5691:42" pos:end="5691:62"><name pos:start="5691:42" pos:end="5691:49">pc_start</name> <operator pos:start="5691:51" pos:end="5691:51">-</operator> <name pos:start="5691:53" pos:end="5691:62"><name pos:start="5691:53" pos:end="5691:53">s</name><operator pos:start="5691:54" pos:end="5691:55">-&gt;</operator><name pos:start="5691:56" pos:end="5691:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5693:11" pos:end="5703:9">else <block pos:start="5693:16" pos:end="5703:9">{<block_content pos:start="5695:13" pos:end="5701:23">

            <expr_stmt pos:start="5695:13" pos:end="5695:32"><expr pos:start="5695:13" pos:end="5695:31"><call pos:start="5695:13" pos:end="5695:31"><name pos:start="5695:13" pos:end="5695:28">gen_update_cc_op</name><argument_list pos:start="5695:29" pos:end="5695:31">(<argument pos:start="5695:30" pos:end="5695:30"><expr pos:start="5695:30" pos:end="5695:30"><name pos:start="5695:30" pos:end="5695:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5697:13" pos:end="5697:46"><expr pos:start="5697:13" pos:end="5697:45"><call pos:start="5697:13" pos:end="5697:45"><name pos:start="5697:13" pos:end="5697:22">gen_jmp_im</name><argument_list pos:start="5697:23" pos:end="5697:45">(<argument pos:start="5697:24" pos:end="5697:44"><expr pos:start="5697:24" pos:end="5697:44"><name pos:start="5697:24" pos:end="5697:31">pc_start</name> <operator pos:start="5697:33" pos:end="5697:33">-</operator> <name pos:start="5697:35" pos:end="5697:44"><name pos:start="5697:35" pos:end="5697:35">s</name><operator pos:start="5697:36" pos:end="5697:37">-&gt;</operator><name pos:start="5697:38" pos:end="5697:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5699:13" pos:end="5699:62"><expr pos:start="5699:13" pos:end="5699:61"><call pos:start="5699:13" pos:end="5699:61"><name pos:start="5699:13" pos:end="5699:30">gen_helper_sysexit</name><argument_list pos:start="5699:31" pos:end="5699:61">(<argument pos:start="5699:32" pos:end="5699:38"><expr pos:start="5699:32" pos:end="5699:38"><name pos:start="5699:32" pos:end="5699:38">cpu_env</name></expr></argument>, <argument pos:start="5699:41" pos:end="5699:60"><expr pos:start="5699:41" pos:end="5699:60"><call pos:start="5699:41" pos:end="5699:60"><name pos:start="5699:41" pos:end="5699:53">tcg_const_i32</name><argument_list pos:start="5699:54" pos:end="5699:60">(<argument pos:start="5699:55" pos:end="5699:59"><expr pos:start="5699:55" pos:end="5699:59"><name pos:start="5699:55" pos:end="5699:59">dflag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5701:13" pos:end="5701:23"><expr pos:start="5701:13" pos:end="5701:22"><call pos:start="5701:13" pos:end="5701:22"><name pos:start="5701:13" pos:end="5701:19">gen_eob</name><argument_list pos:start="5701:20" pos:end="5701:22">(<argument pos:start="5701:21" pos:end="5701:21"><expr pos:start="5701:21" pos:end="5701:21"><name pos:start="5701:21" pos:end="5701:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5705:9" pos:end="5708:0">break;</break>

<cpp:ifdef pos:start="5707:1" pos:end="5707:20">#<cpp:directive pos:start="5707:2" pos:end="5707:6">ifdef</cpp:directive> <name pos:start="5707:8" pos:end="5707:20">TARGET_X86_64</name></cpp:ifdef>

    <case pos:start="5709:5" pos:end="5709:15">case <expr pos:start="5709:10" pos:end="5709:14"><literal type="number" pos:start="5709:10" pos:end="5709:14">0x105</literal></expr>:</case> <comment type="block" pos:start="5709:17" pos:end="5709:29">/* syscall */</comment>

        <comment type="block" pos:start="5711:9" pos:end="5711:46">/* XXX: is it usable in real mode ? */</comment>

        <expr_stmt pos:start="5713:9" pos:end="5713:28"><expr pos:start="5713:9" pos:end="5713:27"><call pos:start="5713:9" pos:end="5713:27"><name pos:start="5713:9" pos:end="5713:24">gen_update_cc_op</name><argument_list pos:start="5713:25" pos:end="5713:27">(<argument pos:start="5713:26" pos:end="5713:26"><expr pos:start="5713:26" pos:end="5713:26"><name pos:start="5713:26" pos:end="5713:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5715:9" pos:end="5715:42"><expr pos:start="5715:9" pos:end="5715:41"><call pos:start="5715:9" pos:end="5715:41"><name pos:start="5715:9" pos:end="5715:18">gen_jmp_im</name><argument_list pos:start="5715:19" pos:end="5715:41">(<argument pos:start="5715:20" pos:end="5715:40"><expr pos:start="5715:20" pos:end="5715:40"><name pos:start="5715:20" pos:end="5715:27">pc_start</name> <operator pos:start="5715:29" pos:end="5715:29">-</operator> <name pos:start="5715:31" pos:end="5715:40"><name pos:start="5715:31" pos:end="5715:31">s</name><operator pos:start="5715:32" pos:end="5715:33">-&gt;</operator><name pos:start="5715:34" pos:end="5715:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5717:9" pos:end="5717:69"><expr pos:start="5717:9" pos:end="5717:68"><call pos:start="5717:9" pos:end="5717:68"><name pos:start="5717:9" pos:end="5717:26">gen_helper_syscall</name><argument_list pos:start="5717:27" pos:end="5717:68">(<argument pos:start="5717:28" pos:end="5717:34"><expr pos:start="5717:28" pos:end="5717:34"><name pos:start="5717:28" pos:end="5717:34">cpu_env</name></expr></argument>, <argument pos:start="5717:37" pos:end="5717:67"><expr pos:start="5717:37" pos:end="5717:67"><call pos:start="5717:37" pos:end="5717:67"><name pos:start="5717:37" pos:end="5717:49">tcg_const_i32</name><argument_list pos:start="5717:50" pos:end="5717:67">(<argument pos:start="5717:51" pos:end="5717:66"><expr pos:start="5717:51" pos:end="5717:66"><name pos:start="5717:51" pos:end="5717:55"><name pos:start="5717:51" pos:end="5717:51">s</name><operator pos:start="5717:52" pos:end="5717:53">-&gt;</operator><name pos:start="5717:54" pos:end="5717:55">pc</name></name> <operator pos:start="5717:57" pos:end="5717:57">-</operator> <name pos:start="5717:59" pos:end="5717:66">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5719:9" pos:end="5719:19"><expr pos:start="5719:9" pos:end="5719:18"><call pos:start="5719:9" pos:end="5719:18"><name pos:start="5719:9" pos:end="5719:15">gen_eob</name><argument_list pos:start="5719:16" pos:end="5719:18">(<argument pos:start="5719:17" pos:end="5719:17"><expr pos:start="5719:17" pos:end="5719:17"><name pos:start="5719:17" pos:end="5719:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5721:9" pos:end="5721:14">break;</break>

    <case pos:start="5723:5" pos:end="5723:15">case <expr pos:start="5723:10" pos:end="5723:14"><literal type="number" pos:start="5723:10" pos:end="5723:14">0x107</literal></expr>:</case> <comment type="block" pos:start="5723:17" pos:end="5723:28">/* sysret */</comment>

        <if_stmt pos:start="5725:9" pos:end="5745:9"><if pos:start="5725:9" pos:end="5729:9">if <condition pos:start="5725:12" pos:end="5725:19">(<expr pos:start="5725:13" pos:end="5725:18"><operator pos:start="5725:13" pos:end="5725:13">!</operator><name pos:start="5725:14" pos:end="5725:18"><name pos:start="5725:14" pos:end="5725:14">s</name><operator pos:start="5725:15" pos:end="5725:16">-&gt;</operator><name pos:start="5725:17" pos:end="5725:18">pe</name></name></expr>)</condition> <block pos:start="5725:21" pos:end="5729:9">{<block_content pos:start="5727:13" pos:end="5727:64">

            <expr_stmt pos:start="5727:13" pos:end="5727:64"><expr pos:start="5727:13" pos:end="5727:63"><call pos:start="5727:13" pos:end="5727:63"><name pos:start="5727:13" pos:end="5727:25">gen_exception</name><argument_list pos:start="5727:26" pos:end="5727:63">(<argument pos:start="5727:27" pos:end="5727:27"><expr pos:start="5727:27" pos:end="5727:27"><name pos:start="5727:27" pos:end="5727:27">s</name></expr></argument>, <argument pos:start="5727:30" pos:end="5727:39"><expr pos:start="5727:30" pos:end="5727:39"><name pos:start="5727:30" pos:end="5727:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5727:42" pos:end="5727:62"><expr pos:start="5727:42" pos:end="5727:62"><name pos:start="5727:42" pos:end="5727:49">pc_start</name> <operator pos:start="5727:51" pos:end="5727:51">-</operator> <name pos:start="5727:53" pos:end="5727:62"><name pos:start="5727:53" pos:end="5727:53">s</name><operator pos:start="5727:54" pos:end="5727:55">-&gt;</operator><name pos:start="5727:56" pos:end="5727:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5729:11" pos:end="5745:9">else <block pos:start="5729:16" pos:end="5745:9">{<block_content pos:start="5731:13" pos:end="5743:23">

            <expr_stmt pos:start="5731:13" pos:end="5731:32"><expr pos:start="5731:13" pos:end="5731:31"><call pos:start="5731:13" pos:end="5731:31"><name pos:start="5731:13" pos:end="5731:28">gen_update_cc_op</name><argument_list pos:start="5731:29" pos:end="5731:31">(<argument pos:start="5731:30" pos:end="5731:30"><expr pos:start="5731:30" pos:end="5731:30"><name pos:start="5731:30" pos:end="5731:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5733:13" pos:end="5733:46"><expr pos:start="5733:13" pos:end="5733:45"><call pos:start="5733:13" pos:end="5733:45"><name pos:start="5733:13" pos:end="5733:22">gen_jmp_im</name><argument_list pos:start="5733:23" pos:end="5733:45">(<argument pos:start="5733:24" pos:end="5733:44"><expr pos:start="5733:24" pos:end="5733:44"><name pos:start="5733:24" pos:end="5733:31">pc_start</name> <operator pos:start="5733:33" pos:end="5733:33">-</operator> <name pos:start="5733:35" pos:end="5733:44"><name pos:start="5733:35" pos:end="5733:35">s</name><operator pos:start="5733:36" pos:end="5733:37">-&gt;</operator><name pos:start="5733:38" pos:end="5733:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5735:13" pos:end="5735:64"><expr pos:start="5735:13" pos:end="5735:63"><call pos:start="5735:13" pos:end="5735:63"><name pos:start="5735:13" pos:end="5735:29">gen_helper_sysret</name><argument_list pos:start="5735:30" pos:end="5735:63">(<argument pos:start="5735:31" pos:end="5735:37"><expr pos:start="5735:31" pos:end="5735:37"><name pos:start="5735:31" pos:end="5735:37">cpu_env</name></expr></argument>, <argument pos:start="5735:40" pos:end="5735:62"><expr pos:start="5735:40" pos:end="5735:62"><call pos:start="5735:40" pos:end="5735:62"><name pos:start="5735:40" pos:end="5735:52">tcg_const_i32</name><argument_list pos:start="5735:53" pos:end="5735:62">(<argument pos:start="5735:54" pos:end="5735:61"><expr pos:start="5735:54" pos:end="5735:61"><name pos:start="5735:54" pos:end="5735:61"><name pos:start="5735:54" pos:end="5735:54">s</name><operator pos:start="5735:55" pos:end="5735:56">-&gt;</operator><name pos:start="5735:57" pos:end="5735:61">dflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="5737:13" pos:end="5737:64">/* condition codes are modified only in long mode */</comment>

            <if_stmt pos:start="5739:13" pos:end="5741:40"><if pos:start="5739:13" pos:end="5741:40">if <condition pos:start="5739:16" pos:end="5739:23">(<expr pos:start="5739:17" pos:end="5739:22"><name pos:start="5739:17" pos:end="5739:22"><name pos:start="5739:17" pos:end="5739:17">s</name><operator pos:start="5739:18" pos:end="5739:19">-&gt;</operator><name pos:start="5739:20" pos:end="5739:22">lma</name></name></expr>)</condition><block type="pseudo" pos:start="5741:17" pos:end="5741:40"><block_content pos:start="5741:17" pos:end="5741:40">

                <expr_stmt pos:start="5741:17" pos:end="5741:40"><expr pos:start="5741:17" pos:end="5741:39"><name pos:start="5741:17" pos:end="5741:24"><name pos:start="5741:17" pos:end="5741:17">s</name><operator pos:start="5741:18" pos:end="5741:19">-&gt;</operator><name pos:start="5741:20" pos:end="5741:24">cc_op</name></name> <operator pos:start="5741:26" pos:end="5741:26">=</operator> <name pos:start="5741:28" pos:end="5741:39">CC_OP_EFLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5743:13" pos:end="5743:23"><expr pos:start="5743:13" pos:end="5743:22"><call pos:start="5743:13" pos:end="5743:22"><name pos:start="5743:13" pos:end="5743:19">gen_eob</name><argument_list pos:start="5743:20" pos:end="5743:22">(<argument pos:start="5743:21" pos:end="5743:21"><expr pos:start="5743:21" pos:end="5743:21"><name pos:start="5743:21" pos:end="5743:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5747:9" pos:end="5750:0">break;</break>

<cpp:endif pos:start="5749:1" pos:end="5749:6">#<cpp:directive pos:start="5749:2" pos:end="5749:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5751:5" pos:end="5751:15">case <expr pos:start="5751:10" pos:end="5751:14"><literal type="number" pos:start="5751:10" pos:end="5751:14">0x1a2</literal></expr>:</case> <comment type="block" pos:start="5751:17" pos:end="5751:27">/* cpuid */</comment>

        <if_stmt pos:start="5753:9" pos:end="5755:39"><if pos:start="5753:9" pos:end="5755:39">if <condition pos:start="5753:12" pos:end="5753:38">(<expr pos:start="5753:13" pos:end="5753:37"><name pos:start="5753:13" pos:end="5753:20"><name pos:start="5753:13" pos:end="5753:13">s</name><operator pos:start="5753:14" pos:end="5753:15">-&gt;</operator><name pos:start="5753:16" pos:end="5753:20">cc_op</name></name> <operator pos:start="5753:22" pos:end="5753:23">!=</operator> <name pos:start="5753:25" pos:end="5753:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5755:13" pos:end="5755:39"><block_content pos:start="5755:13" pos:end="5755:39">

            <expr_stmt pos:start="5755:13" pos:end="5755:39"><expr pos:start="5755:13" pos:end="5755:38"><call pos:start="5755:13" pos:end="5755:38"><name pos:start="5755:13" pos:end="5755:28">gen_op_set_cc_op</name><argument_list pos:start="5755:29" pos:end="5755:38">(<argument pos:start="5755:30" pos:end="5755:37"><expr pos:start="5755:30" pos:end="5755:37"><name pos:start="5755:30" pos:end="5755:37"><name pos:start="5755:30" pos:end="5755:30">s</name><operator pos:start="5755:31" pos:end="5755:32">-&gt;</operator><name pos:start="5755:33" pos:end="5755:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5757:9" pos:end="5757:42"><expr pos:start="5757:9" pos:end="5757:41"><call pos:start="5757:9" pos:end="5757:41"><name pos:start="5757:9" pos:end="5757:18">gen_jmp_im</name><argument_list pos:start="5757:19" pos:end="5757:41">(<argument pos:start="5757:20" pos:end="5757:40"><expr pos:start="5757:20" pos:end="5757:40"><name pos:start="5757:20" pos:end="5757:27">pc_start</name> <operator pos:start="5757:29" pos:end="5757:29">-</operator> <name pos:start="5757:31" pos:end="5757:40"><name pos:start="5757:31" pos:end="5757:31">s</name><operator pos:start="5757:32" pos:end="5757:33">-&gt;</operator><name pos:start="5757:34" pos:end="5757:40">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5759:9" pos:end="5759:34"><expr pos:start="5759:9" pos:end="5759:33"><call pos:start="5759:9" pos:end="5759:33"><name pos:start="5759:9" pos:end="5759:24">gen_helper_cpuid</name><argument_list pos:start="5759:25" pos:end="5759:33">(<argument pos:start="5759:26" pos:end="5759:32"><expr pos:start="5759:26" pos:end="5759:32"><name pos:start="5759:26" pos:end="5759:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5761:9" pos:end="5761:14">break;</break>

    <case pos:start="5763:5" pos:end="5763:14">case <expr pos:start="5763:10" pos:end="5763:13"><literal type="number" pos:start="5763:10" pos:end="5763:13">0xf4</literal></expr>:</case> <comment type="block" pos:start="5763:16" pos:end="5763:24">/* hlt */</comment>

        <if_stmt pos:start="5765:9" pos:end="5781:9"><if pos:start="5765:9" pos:end="5769:9">if <condition pos:start="5765:12" pos:end="5765:24">(<expr pos:start="5765:13" pos:end="5765:23"><name pos:start="5765:13" pos:end="5765:18"><name pos:start="5765:13" pos:end="5765:13">s</name><operator pos:start="5765:14" pos:end="5765:15">-&gt;</operator><name pos:start="5765:16" pos:end="5765:18">cpl</name></name> <operator pos:start="5765:20" pos:end="5765:21">!=</operator> <literal type="number" pos:start="5765:23" pos:end="5765:23">0</literal></expr>)</condition> <block pos:start="5765:26" pos:end="5769:9">{<block_content pos:start="5767:13" pos:end="5767:64">

            <expr_stmt pos:start="5767:13" pos:end="5767:64"><expr pos:start="5767:13" pos:end="5767:63"><call pos:start="5767:13" pos:end="5767:63"><name pos:start="5767:13" pos:end="5767:25">gen_exception</name><argument_list pos:start="5767:26" pos:end="5767:63">(<argument pos:start="5767:27" pos:end="5767:27"><expr pos:start="5767:27" pos:end="5767:27"><name pos:start="5767:27" pos:end="5767:27">s</name></expr></argument>, <argument pos:start="5767:30" pos:end="5767:39"><expr pos:start="5767:30" pos:end="5767:39"><name pos:start="5767:30" pos:end="5767:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5767:42" pos:end="5767:62"><expr pos:start="5767:42" pos:end="5767:62"><name pos:start="5767:42" pos:end="5767:49">pc_start</name> <operator pos:start="5767:51" pos:end="5767:51">-</operator> <name pos:start="5767:53" pos:end="5767:62"><name pos:start="5767:53" pos:end="5767:53">s</name><operator pos:start="5767:54" pos:end="5767:55">-&gt;</operator><name pos:start="5767:56" pos:end="5767:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="5769:11" pos:end="5781:9">else <block pos:start="5769:16" pos:end="5781:9">{<block_content pos:start="5771:13" pos:end="5779:38">

            <if_stmt pos:start="5771:13" pos:end="5773:43"><if pos:start="5771:13" pos:end="5773:43">if <condition pos:start="5771:16" pos:end="5771:42">(<expr pos:start="5771:17" pos:end="5771:41"><name pos:start="5771:17" pos:end="5771:24"><name pos:start="5771:17" pos:end="5771:17">s</name><operator pos:start="5771:18" pos:end="5771:19">-&gt;</operator><name pos:start="5771:20" pos:end="5771:24">cc_op</name></name> <operator pos:start="5771:26" pos:end="5771:27">!=</operator> <name pos:start="5771:29" pos:end="5771:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5773:17" pos:end="5773:43"><block_content pos:start="5773:17" pos:end="5773:43">

                <expr_stmt pos:start="5773:17" pos:end="5773:43"><expr pos:start="5773:17" pos:end="5773:42"><call pos:start="5773:17" pos:end="5773:42"><name pos:start="5773:17" pos:end="5773:32">gen_op_set_cc_op</name><argument_list pos:start="5773:33" pos:end="5773:42">(<argument pos:start="5773:34" pos:end="5773:41"><expr pos:start="5773:34" pos:end="5773:41"><name pos:start="5773:34" pos:end="5773:41"><name pos:start="5773:34" pos:end="5773:34">s</name><operator pos:start="5773:35" pos:end="5773:36">-&gt;</operator><name pos:start="5773:37" pos:end="5773:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5775:13" pos:end="5775:46"><expr pos:start="5775:13" pos:end="5775:45"><call pos:start="5775:13" pos:end="5775:45"><name pos:start="5775:13" pos:end="5775:22">gen_jmp_im</name><argument_list pos:start="5775:23" pos:end="5775:45">(<argument pos:start="5775:24" pos:end="5775:44"><expr pos:start="5775:24" pos:end="5775:44"><name pos:start="5775:24" pos:end="5775:31">pc_start</name> <operator pos:start="5775:33" pos:end="5775:33">-</operator> <name pos:start="5775:35" pos:end="5775:44"><name pos:start="5775:35" pos:end="5775:35">s</name><operator pos:start="5775:36" pos:end="5775:37">-&gt;</operator><name pos:start="5775:38" pos:end="5775:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5777:13" pos:end="5777:69"><expr pos:start="5777:13" pos:end="5777:68"><call pos:start="5777:13" pos:end="5777:68"><name pos:start="5777:13" pos:end="5777:26">gen_helper_hlt</name><argument_list pos:start="5777:27" pos:end="5777:68">(<argument pos:start="5777:28" pos:end="5777:34"><expr pos:start="5777:28" pos:end="5777:34"><name pos:start="5777:28" pos:end="5777:34">cpu_env</name></expr></argument>, <argument pos:start="5777:37" pos:end="5777:67"><expr pos:start="5777:37" pos:end="5777:67"><call pos:start="5777:37" pos:end="5777:67"><name pos:start="5777:37" pos:end="5777:49">tcg_const_i32</name><argument_list pos:start="5777:50" pos:end="5777:67">(<argument pos:start="5777:51" pos:end="5777:66"><expr pos:start="5777:51" pos:end="5777:66"><name pos:start="5777:51" pos:end="5777:55"><name pos:start="5777:51" pos:end="5777:51">s</name><operator pos:start="5777:52" pos:end="5777:53">-&gt;</operator><name pos:start="5777:54" pos:end="5777:55">pc</name></name> <operator pos:start="5777:57" pos:end="5777:57">-</operator> <name pos:start="5777:59" pos:end="5777:66">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5779:13" pos:end="5779:38"><expr pos:start="5779:13" pos:end="5779:37"><name pos:start="5779:13" pos:end="5779:21"><name pos:start="5779:13" pos:end="5779:13">s</name><operator pos:start="5779:14" pos:end="5779:15">-&gt;</operator><name pos:start="5779:16" pos:end="5779:21">is_jmp</name></name> <operator pos:start="5779:23" pos:end="5779:23">=</operator> <name pos:start="5779:25" pos:end="5779:37">DISAS_TB_JUMP</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="5783:9" pos:end="5783:14">break;</break>

    <case pos:start="5785:5" pos:end="5785:15">case <expr pos:start="5785:10" pos:end="5785:14"><literal type="number" pos:start="5785:10" pos:end="5785:14">0x100</literal></expr>:</case>

        <expr_stmt pos:start="5787:9" pos:end="5787:55"><expr pos:start="5787:9" pos:end="5787:54"><name pos:start="5787:9" pos:end="5787:13">modrm</name> <operator pos:start="5787:15" pos:end="5787:15">=</operator> <call pos:start="5787:17" pos:end="5787:54"><name pos:start="5787:17" pos:end="5787:29">cpu_ldub_code</name><argument_list pos:start="5787:30" pos:end="5787:54">(<argument pos:start="5787:31" pos:end="5787:44"><expr pos:start="5787:31" pos:end="5787:44"><name pos:start="5787:31" pos:end="5787:44">cpu_single_env</name></expr></argument>, <argument pos:start="5787:47" pos:end="5787:53"><expr pos:start="5787:47" pos:end="5787:53"><name pos:start="5787:47" pos:end="5787:51"><name pos:start="5787:47" pos:end="5787:47">s</name><operator pos:start="5787:48" pos:end="5787:49">-&gt;</operator><name pos:start="5787:50" pos:end="5787:51">pc</name></name><operator pos:start="5787:52" pos:end="5787:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5789:9" pos:end="5789:31"><expr pos:start="5789:9" pos:end="5789:30"><name pos:start="5789:9" pos:end="5789:11">mod</name> <operator pos:start="5789:13" pos:end="5789:13">=</operator> <operator pos:start="5789:15" pos:end="5789:15">(</operator><name pos:start="5789:16" pos:end="5789:20">modrm</name> <operator pos:start="5789:22" pos:end="5789:23">&gt;&gt;</operator> <literal type="number" pos:start="5789:25" pos:end="5789:25">6</literal><operator pos:start="5789:26" pos:end="5789:26">)</operator> <operator pos:start="5789:28" pos:end="5789:28">&amp;</operator> <literal type="number" pos:start="5789:30" pos:end="5789:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5791:9" pos:end="5791:30"><expr pos:start="5791:9" pos:end="5791:29"><name pos:start="5791:9" pos:end="5791:10">op</name> <operator pos:start="5791:12" pos:end="5791:12">=</operator> <operator pos:start="5791:14" pos:end="5791:14">(</operator><name pos:start="5791:15" pos:end="5791:19">modrm</name> <operator pos:start="5791:21" pos:end="5791:22">&gt;&gt;</operator> <literal type="number" pos:start="5791:24" pos:end="5791:24">3</literal><operator pos:start="5791:25" pos:end="5791:25">)</operator> <operator pos:start="5791:27" pos:end="5791:27">&amp;</operator> <literal type="number" pos:start="5791:29" pos:end="5791:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="5793:9" pos:end="5919:9">switch<condition pos:start="5793:15" pos:end="5793:18">(<expr pos:start="5793:16" pos:end="5793:17"><name pos:start="5793:16" pos:end="5793:17">op</name></expr>)</condition> <block pos:start="5793:20" pos:end="5919:9">{<block_content pos:start="5795:9" pos:end="5917:28">

        <case pos:start="5795:9" pos:end="5795:15">case <expr pos:start="5795:14" pos:end="5795:14"><literal type="number" pos:start="5795:14" pos:end="5795:14">0</literal></expr>:</case> <comment type="block" pos:start="5795:17" pos:end="5795:26">/* sldt */</comment>

            <if_stmt pos:start="5797:13" pos:end="5799:32"><if pos:start="5797:13" pos:end="5799:32">if <condition pos:start="5797:16" pos:end="5797:34">(<expr pos:start="5797:17" pos:end="5797:33"><operator pos:start="5797:17" pos:end="5797:17">!</operator><name pos:start="5797:18" pos:end="5797:22"><name pos:start="5797:18" pos:end="5797:18">s</name><operator pos:start="5797:19" pos:end="5797:20">-&gt;</operator><name pos:start="5797:21" pos:end="5797:22">pe</name></name> <operator pos:start="5797:24" pos:end="5797:25">||</operator> <name pos:start="5797:27" pos:end="5797:33"><name pos:start="5797:27" pos:end="5797:27">s</name><operator pos:start="5797:28" pos:end="5797:29">-&gt;</operator><name pos:start="5797:30" pos:end="5797:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5799:17" pos:end="5799:32"><block_content pos:start="5799:17" pos:end="5799:32">

                <goto pos:start="5799:17" pos:end="5799:32">goto <name pos:start="5799:22" pos:end="5799:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5801:13" pos:end="5801:69"><expr pos:start="5801:13" pos:end="5801:68"><call pos:start="5801:13" pos:end="5801:68"><name pos:start="5801:13" pos:end="5801:35">gen_svm_check_intercept</name><argument_list pos:start="5801:36" pos:end="5801:68">(<argument pos:start="5801:37" pos:end="5801:37"><expr pos:start="5801:37" pos:end="5801:37"><name pos:start="5801:37" pos:end="5801:37">s</name></expr></argument>, <argument pos:start="5801:40" pos:end="5801:47"><expr pos:start="5801:40" pos:end="5801:47"><name pos:start="5801:40" pos:end="5801:47">pc_start</name></expr></argument>, <argument pos:start="5801:50" pos:end="5801:67"><expr pos:start="5801:50" pos:end="5801:67"><name pos:start="5801:50" pos:end="5801:67">SVM_EXIT_LDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5803:13" pos:end="5803:84"><expr pos:start="5803:13" pos:end="5803:83"><call pos:start="5803:13" pos:end="5803:83"><name pos:start="5803:13" pos:end="5803:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5803:29" pos:end="5803:83">(<argument pos:start="5803:30" pos:end="5803:37"><expr pos:start="5803:30" pos:end="5803:37"><name pos:start="5803:30" pos:end="5803:37"><name pos:start="5803:30" pos:end="5803:34">cpu_T</name><index pos:start="5803:35" pos:end="5803:37">[<expr pos:start="5803:36" pos:end="5803:36"><literal type="number" pos:start="5803:36" pos:end="5803:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5803:40" pos:end="5803:46"><expr pos:start="5803:40" pos:end="5803:46"><name pos:start="5803:40" pos:end="5803:46">cpu_env</name></expr></argument>, <argument pos:start="5803:49" pos:end="5803:82"><expr pos:start="5803:49" pos:end="5803:82"><call pos:start="5803:49" pos:end="5803:82"><name pos:start="5803:49" pos:end="5803:56">offsetof</name><argument_list pos:start="5803:57" pos:end="5803:82">(<argument pos:start="5803:58" pos:end="5803:68"><expr pos:start="5803:58" pos:end="5803:68"><name pos:start="5803:58" pos:end="5803:68">CPUX86State</name></expr></argument>,<argument pos:start="5803:70" pos:end="5803:81"><expr pos:start="5803:70" pos:end="5803:81"><name pos:start="5803:70" pos:end="5803:81"><name pos:start="5803:70" pos:end="5803:72">ldt</name><operator pos:start="5803:73" pos:end="5803:73">.</operator><name pos:start="5803:74" pos:end="5803:81">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5805:13" pos:end="5805:25"><expr pos:start="5805:13" pos:end="5805:24"><name pos:start="5805:13" pos:end="5805:14">ot</name> <operator pos:start="5805:16" pos:end="5805:16">=</operator> <name pos:start="5805:18" pos:end="5805:24">OT_WORD</name></expr>;</expr_stmt>

            <if_stmt pos:start="5807:13" pos:end="5809:31"><if pos:start="5807:13" pos:end="5809:31">if <condition pos:start="5807:16" pos:end="5807:25">(<expr pos:start="5807:17" pos:end="5807:24"><name pos:start="5807:17" pos:end="5807:19">mod</name> <operator pos:start="5807:21" pos:end="5807:22">==</operator> <literal type="number" pos:start="5807:24" pos:end="5807:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5809:17" pos:end="5809:31"><block_content pos:start="5809:17" pos:end="5809:31">

                <expr_stmt pos:start="5809:17" pos:end="5809:31"><expr pos:start="5809:17" pos:end="5809:30"><name pos:start="5809:17" pos:end="5809:18">ot</name> <operator pos:start="5809:20" pos:end="5809:21">+=</operator> <name pos:start="5809:23" pos:end="5809:30"><name pos:start="5809:23" pos:end="5809:23">s</name><operator pos:start="5809:24" pos:end="5809:25">-&gt;</operator><name pos:start="5809:26" pos:end="5809:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5811:13" pos:end="5811:53"><expr pos:start="5811:13" pos:end="5811:52"><call pos:start="5811:13" pos:end="5811:52"><name pos:start="5811:13" pos:end="5811:26">gen_ldst_modrm</name><argument_list pos:start="5811:27" pos:end="5811:52">(<argument pos:start="5811:28" pos:end="5811:28"><expr pos:start="5811:28" pos:end="5811:28"><name pos:start="5811:28" pos:end="5811:28">s</name></expr></argument>, <argument pos:start="5811:31" pos:end="5811:35"><expr pos:start="5811:31" pos:end="5811:35"><name pos:start="5811:31" pos:end="5811:35">modrm</name></expr></argument>, <argument pos:start="5811:38" pos:end="5811:39"><expr pos:start="5811:38" pos:end="5811:39"><name pos:start="5811:38" pos:end="5811:39">ot</name></expr></argument>, <argument pos:start="5811:42" pos:end="5811:48"><expr pos:start="5811:42" pos:end="5811:48"><name pos:start="5811:42" pos:end="5811:48">OR_TMP0</name></expr></argument>, <argument pos:start="5811:51" pos:end="5811:51"><expr pos:start="5811:51" pos:end="5811:51"><literal type="number" pos:start="5811:51" pos:end="5811:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5813:13" pos:end="5813:18">break;</break>

        <case pos:start="5815:9" pos:end="5815:15">case <expr pos:start="5815:14" pos:end="5815:14"><literal type="number" pos:start="5815:14" pos:end="5815:14">2</literal></expr>:</case> <comment type="block" pos:start="5815:17" pos:end="5815:26">/* lldt */</comment>

            <if_stmt pos:start="5817:13" pos:end="5819:32"><if pos:start="5817:13" pos:end="5819:32">if <condition pos:start="5817:16" pos:end="5817:34">(<expr pos:start="5817:17" pos:end="5817:33"><operator pos:start="5817:17" pos:end="5817:17">!</operator><name pos:start="5817:18" pos:end="5817:22"><name pos:start="5817:18" pos:end="5817:18">s</name><operator pos:start="5817:19" pos:end="5817:20">-&gt;</operator><name pos:start="5817:21" pos:end="5817:22">pe</name></name> <operator pos:start="5817:24" pos:end="5817:25">||</operator> <name pos:start="5817:27" pos:end="5817:33"><name pos:start="5817:27" pos:end="5817:27">s</name><operator pos:start="5817:28" pos:end="5817:29">-&gt;</operator><name pos:start="5817:30" pos:end="5817:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5819:17" pos:end="5819:32"><block_content pos:start="5819:17" pos:end="5819:32">

                <goto pos:start="5819:17" pos:end="5819:32">goto <name pos:start="5819:22" pos:end="5819:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5821:13" pos:end="5837:13"><if pos:start="5821:13" pos:end="5825:13">if <condition pos:start="5821:16" pos:end="5821:28">(<expr pos:start="5821:17" pos:end="5821:27"><name pos:start="5821:17" pos:end="5821:22"><name pos:start="5821:17" pos:end="5821:17">s</name><operator pos:start="5821:18" pos:end="5821:19">-&gt;</operator><name pos:start="5821:20" pos:end="5821:22">cpl</name></name> <operator pos:start="5821:24" pos:end="5821:25">!=</operator> <literal type="number" pos:start="5821:27" pos:end="5821:27">0</literal></expr>)</condition> <block pos:start="5821:30" pos:end="5825:13">{<block_content pos:start="5823:17" pos:end="5823:68">

                <expr_stmt pos:start="5823:17" pos:end="5823:68"><expr pos:start="5823:17" pos:end="5823:67"><call pos:start="5823:17" pos:end="5823:67"><name pos:start="5823:17" pos:end="5823:29">gen_exception</name><argument_list pos:start="5823:30" pos:end="5823:67">(<argument pos:start="5823:31" pos:end="5823:31"><expr pos:start="5823:31" pos:end="5823:31"><name pos:start="5823:31" pos:end="5823:31">s</name></expr></argument>, <argument pos:start="5823:34" pos:end="5823:43"><expr pos:start="5823:34" pos:end="5823:43"><name pos:start="5823:34" pos:end="5823:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5823:46" pos:end="5823:66"><expr pos:start="5823:46" pos:end="5823:66"><name pos:start="5823:46" pos:end="5823:53">pc_start</name> <operator pos:start="5823:55" pos:end="5823:55">-</operator> <name pos:start="5823:57" pos:end="5823:66"><name pos:start="5823:57" pos:end="5823:57">s</name><operator pos:start="5823:58" pos:end="5823:59">-&gt;</operator><name pos:start="5823:60" pos:end="5823:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5825:15" pos:end="5837:13">else <block pos:start="5825:20" pos:end="5837:13">{<block_content pos:start="5827:17" pos:end="5835:55">

                <expr_stmt pos:start="5827:17" pos:end="5827:74"><expr pos:start="5827:17" pos:end="5827:73"><call pos:start="5827:17" pos:end="5827:73"><name pos:start="5827:17" pos:end="5827:39">gen_svm_check_intercept</name><argument_list pos:start="5827:40" pos:end="5827:73">(<argument pos:start="5827:41" pos:end="5827:41"><expr pos:start="5827:41" pos:end="5827:41"><name pos:start="5827:41" pos:end="5827:41">s</name></expr></argument>, <argument pos:start="5827:44" pos:end="5827:51"><expr pos:start="5827:44" pos:end="5827:51"><name pos:start="5827:44" pos:end="5827:51">pc_start</name></expr></argument>, <argument pos:start="5827:54" pos:end="5827:72"><expr pos:start="5827:54" pos:end="5827:72"><name pos:start="5827:54" pos:end="5827:72">SVM_EXIT_LDTR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5829:17" pos:end="5829:62"><expr pos:start="5829:17" pos:end="5829:61"><call pos:start="5829:17" pos:end="5829:61"><name pos:start="5829:17" pos:end="5829:30">gen_ldst_modrm</name><argument_list pos:start="5829:31" pos:end="5829:61">(<argument pos:start="5829:32" pos:end="5829:32"><expr pos:start="5829:32" pos:end="5829:32"><name pos:start="5829:32" pos:end="5829:32">s</name></expr></argument>, <argument pos:start="5829:35" pos:end="5829:39"><expr pos:start="5829:35" pos:end="5829:39"><name pos:start="5829:35" pos:end="5829:39">modrm</name></expr></argument>, <argument pos:start="5829:42" pos:end="5829:48"><expr pos:start="5829:42" pos:end="5829:48"><name pos:start="5829:42" pos:end="5829:48">OT_WORD</name></expr></argument>, <argument pos:start="5829:51" pos:end="5829:57"><expr pos:start="5829:51" pos:end="5829:57"><name pos:start="5829:51" pos:end="5829:57">OR_TMP0</name></expr></argument>, <argument pos:start="5829:60" pos:end="5829:60"><expr pos:start="5829:60" pos:end="5829:60"><literal type="number" pos:start="5829:60" pos:end="5829:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5831:17" pos:end="5831:50"><expr pos:start="5831:17" pos:end="5831:49"><call pos:start="5831:17" pos:end="5831:49"><name pos:start="5831:17" pos:end="5831:26">gen_jmp_im</name><argument_list pos:start="5831:27" pos:end="5831:49">(<argument pos:start="5831:28" pos:end="5831:48"><expr pos:start="5831:28" pos:end="5831:48"><name pos:start="5831:28" pos:end="5831:35">pc_start</name> <operator pos:start="5831:37" pos:end="5831:37">-</operator> <name pos:start="5831:39" pos:end="5831:48"><name pos:start="5831:39" pos:end="5831:39">s</name><operator pos:start="5831:40" pos:end="5831:41">-&gt;</operator><name pos:start="5831:42" pos:end="5831:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5833:17" pos:end="5833:61"><expr pos:start="5833:17" pos:end="5833:60"><call pos:start="5833:17" pos:end="5833:60"><name pos:start="5833:17" pos:end="5833:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5833:37" pos:end="5833:60">(<argument pos:start="5833:38" pos:end="5833:49"><expr pos:start="5833:38" pos:end="5833:49"><name pos:start="5833:38" pos:end="5833:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5833:52" pos:end="5833:59"><expr pos:start="5833:52" pos:end="5833:59"><name pos:start="5833:52" pos:end="5833:59"><name pos:start="5833:52" pos:end="5833:56">cpu_T</name><index pos:start="5833:57" pos:end="5833:59">[<expr pos:start="5833:58" pos:end="5833:58"><literal type="number" pos:start="5833:58" pos:end="5833:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5835:17" pos:end="5835:55"><expr pos:start="5835:17" pos:end="5835:54"><call pos:start="5835:17" pos:end="5835:54"><name pos:start="5835:17" pos:end="5835:31">gen_helper_lldt</name><argument_list pos:start="5835:32" pos:end="5835:54">(<argument pos:start="5835:33" pos:end="5835:39"><expr pos:start="5835:33" pos:end="5835:39"><name pos:start="5835:33" pos:end="5835:39">cpu_env</name></expr></argument>, <argument pos:start="5835:42" pos:end="5835:53"><expr pos:start="5835:42" pos:end="5835:53"><name pos:start="5835:42" pos:end="5835:53">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="5839:13" pos:end="5839:18">break;</break>

        <case pos:start="5841:9" pos:end="5841:15">case <expr pos:start="5841:14" pos:end="5841:14"><literal type="number" pos:start="5841:14" pos:end="5841:14">1</literal></expr>:</case> <comment type="block" pos:start="5841:17" pos:end="5841:25">/* str */</comment>

            <if_stmt pos:start="5843:13" pos:end="5845:32"><if pos:start="5843:13" pos:end="5845:32">if <condition pos:start="5843:16" pos:end="5843:34">(<expr pos:start="5843:17" pos:end="5843:33"><operator pos:start="5843:17" pos:end="5843:17">!</operator><name pos:start="5843:18" pos:end="5843:22"><name pos:start="5843:18" pos:end="5843:18">s</name><operator pos:start="5843:19" pos:end="5843:20">-&gt;</operator><name pos:start="5843:21" pos:end="5843:22">pe</name></name> <operator pos:start="5843:24" pos:end="5843:25">||</operator> <name pos:start="5843:27" pos:end="5843:33"><name pos:start="5843:27" pos:end="5843:27">s</name><operator pos:start="5843:28" pos:end="5843:29">-&gt;</operator><name pos:start="5843:30" pos:end="5843:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5845:17" pos:end="5845:32"><block_content pos:start="5845:17" pos:end="5845:32">

                <goto pos:start="5845:17" pos:end="5845:32">goto <name pos:start="5845:22" pos:end="5845:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5847:13" pos:end="5847:67"><expr pos:start="5847:13" pos:end="5847:66"><call pos:start="5847:13" pos:end="5847:66"><name pos:start="5847:13" pos:end="5847:35">gen_svm_check_intercept</name><argument_list pos:start="5847:36" pos:end="5847:66">(<argument pos:start="5847:37" pos:end="5847:37"><expr pos:start="5847:37" pos:end="5847:37"><name pos:start="5847:37" pos:end="5847:37">s</name></expr></argument>, <argument pos:start="5847:40" pos:end="5847:47"><expr pos:start="5847:40" pos:end="5847:47"><name pos:start="5847:40" pos:end="5847:47">pc_start</name></expr></argument>, <argument pos:start="5847:50" pos:end="5847:65"><expr pos:start="5847:50" pos:end="5847:65"><name pos:start="5847:50" pos:end="5847:65">SVM_EXIT_TR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5849:13" pos:end="5849:83"><expr pos:start="5849:13" pos:end="5849:82"><call pos:start="5849:13" pos:end="5849:82"><name pos:start="5849:13" pos:end="5849:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5849:29" pos:end="5849:82">(<argument pos:start="5849:30" pos:end="5849:37"><expr pos:start="5849:30" pos:end="5849:37"><name pos:start="5849:30" pos:end="5849:37"><name pos:start="5849:30" pos:end="5849:34">cpu_T</name><index pos:start="5849:35" pos:end="5849:37">[<expr pos:start="5849:36" pos:end="5849:36"><literal type="number" pos:start="5849:36" pos:end="5849:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5849:40" pos:end="5849:46"><expr pos:start="5849:40" pos:end="5849:46"><name pos:start="5849:40" pos:end="5849:46">cpu_env</name></expr></argument>, <argument pos:start="5849:49" pos:end="5849:81"><expr pos:start="5849:49" pos:end="5849:81"><call pos:start="5849:49" pos:end="5849:81"><name pos:start="5849:49" pos:end="5849:56">offsetof</name><argument_list pos:start="5849:57" pos:end="5849:81">(<argument pos:start="5849:58" pos:end="5849:68"><expr pos:start="5849:58" pos:end="5849:68"><name pos:start="5849:58" pos:end="5849:68">CPUX86State</name></expr></argument>,<argument pos:start="5849:70" pos:end="5849:80"><expr pos:start="5849:70" pos:end="5849:80"><name pos:start="5849:70" pos:end="5849:80"><name pos:start="5849:70" pos:end="5849:71">tr</name><operator pos:start="5849:72" pos:end="5849:72">.</operator><name pos:start="5849:73" pos:end="5849:80">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5851:13" pos:end="5851:25"><expr pos:start="5851:13" pos:end="5851:24"><name pos:start="5851:13" pos:end="5851:14">ot</name> <operator pos:start="5851:16" pos:end="5851:16">=</operator> <name pos:start="5851:18" pos:end="5851:24">OT_WORD</name></expr>;</expr_stmt>

            <if_stmt pos:start="5853:13" pos:end="5855:31"><if pos:start="5853:13" pos:end="5855:31">if <condition pos:start="5853:16" pos:end="5853:25">(<expr pos:start="5853:17" pos:end="5853:24"><name pos:start="5853:17" pos:end="5853:19">mod</name> <operator pos:start="5853:21" pos:end="5853:22">==</operator> <literal type="number" pos:start="5853:24" pos:end="5853:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5855:17" pos:end="5855:31"><block_content pos:start="5855:17" pos:end="5855:31">

                <expr_stmt pos:start="5855:17" pos:end="5855:31"><expr pos:start="5855:17" pos:end="5855:30"><name pos:start="5855:17" pos:end="5855:18">ot</name> <operator pos:start="5855:20" pos:end="5855:21">+=</operator> <name pos:start="5855:23" pos:end="5855:30"><name pos:start="5855:23" pos:end="5855:23">s</name><operator pos:start="5855:24" pos:end="5855:25">-&gt;</operator><name pos:start="5855:26" pos:end="5855:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5857:13" pos:end="5857:53"><expr pos:start="5857:13" pos:end="5857:52"><call pos:start="5857:13" pos:end="5857:52"><name pos:start="5857:13" pos:end="5857:26">gen_ldst_modrm</name><argument_list pos:start="5857:27" pos:end="5857:52">(<argument pos:start="5857:28" pos:end="5857:28"><expr pos:start="5857:28" pos:end="5857:28"><name pos:start="5857:28" pos:end="5857:28">s</name></expr></argument>, <argument pos:start="5857:31" pos:end="5857:35"><expr pos:start="5857:31" pos:end="5857:35"><name pos:start="5857:31" pos:end="5857:35">modrm</name></expr></argument>, <argument pos:start="5857:38" pos:end="5857:39"><expr pos:start="5857:38" pos:end="5857:39"><name pos:start="5857:38" pos:end="5857:39">ot</name></expr></argument>, <argument pos:start="5857:42" pos:end="5857:48"><expr pos:start="5857:42" pos:end="5857:48"><name pos:start="5857:42" pos:end="5857:48">OR_TMP0</name></expr></argument>, <argument pos:start="5857:51" pos:end="5857:51"><expr pos:start="5857:51" pos:end="5857:51"><literal type="number" pos:start="5857:51" pos:end="5857:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5859:13" pos:end="5859:18">break;</break>

        <case pos:start="5861:9" pos:end="5861:15">case <expr pos:start="5861:14" pos:end="5861:14"><literal type="number" pos:start="5861:14" pos:end="5861:14">3</literal></expr>:</case> <comment type="block" pos:start="5861:17" pos:end="5861:25">/* ltr */</comment>

            <if_stmt pos:start="5863:13" pos:end="5865:32"><if pos:start="5863:13" pos:end="5865:32">if <condition pos:start="5863:16" pos:end="5863:34">(<expr pos:start="5863:17" pos:end="5863:33"><operator pos:start="5863:17" pos:end="5863:17">!</operator><name pos:start="5863:18" pos:end="5863:22"><name pos:start="5863:18" pos:end="5863:18">s</name><operator pos:start="5863:19" pos:end="5863:20">-&gt;</operator><name pos:start="5863:21" pos:end="5863:22">pe</name></name> <operator pos:start="5863:24" pos:end="5863:25">||</operator> <name pos:start="5863:27" pos:end="5863:33"><name pos:start="5863:27" pos:end="5863:27">s</name><operator pos:start="5863:28" pos:end="5863:29">-&gt;</operator><name pos:start="5863:30" pos:end="5863:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5865:17" pos:end="5865:32"><block_content pos:start="5865:17" pos:end="5865:32">

                <goto pos:start="5865:17" pos:end="5865:32">goto <name pos:start="5865:22" pos:end="5865:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="5867:13" pos:end="5883:13"><if pos:start="5867:13" pos:end="5871:13">if <condition pos:start="5867:16" pos:end="5867:28">(<expr pos:start="5867:17" pos:end="5867:27"><name pos:start="5867:17" pos:end="5867:22"><name pos:start="5867:17" pos:end="5867:17">s</name><operator pos:start="5867:18" pos:end="5867:19">-&gt;</operator><name pos:start="5867:20" pos:end="5867:22">cpl</name></name> <operator pos:start="5867:24" pos:end="5867:25">!=</operator> <literal type="number" pos:start="5867:27" pos:end="5867:27">0</literal></expr>)</condition> <block pos:start="5867:30" pos:end="5871:13">{<block_content pos:start="5869:17" pos:end="5869:68">

                <expr_stmt pos:start="5869:17" pos:end="5869:68"><expr pos:start="5869:17" pos:end="5869:67"><call pos:start="5869:17" pos:end="5869:67"><name pos:start="5869:17" pos:end="5869:29">gen_exception</name><argument_list pos:start="5869:30" pos:end="5869:67">(<argument pos:start="5869:31" pos:end="5869:31"><expr pos:start="5869:31" pos:end="5869:31"><name pos:start="5869:31" pos:end="5869:31">s</name></expr></argument>, <argument pos:start="5869:34" pos:end="5869:43"><expr pos:start="5869:34" pos:end="5869:43"><name pos:start="5869:34" pos:end="5869:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="5869:46" pos:end="5869:66"><expr pos:start="5869:46" pos:end="5869:66"><name pos:start="5869:46" pos:end="5869:53">pc_start</name> <operator pos:start="5869:55" pos:end="5869:55">-</operator> <name pos:start="5869:57" pos:end="5869:66"><name pos:start="5869:57" pos:end="5869:57">s</name><operator pos:start="5869:58" pos:end="5869:59">-&gt;</operator><name pos:start="5869:60" pos:end="5869:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5871:15" pos:end="5883:13">else <block pos:start="5871:20" pos:end="5883:13">{<block_content pos:start="5873:17" pos:end="5881:54">

                <expr_stmt pos:start="5873:17" pos:end="5873:72"><expr pos:start="5873:17" pos:end="5873:71"><call pos:start="5873:17" pos:end="5873:71"><name pos:start="5873:17" pos:end="5873:39">gen_svm_check_intercept</name><argument_list pos:start="5873:40" pos:end="5873:71">(<argument pos:start="5873:41" pos:end="5873:41"><expr pos:start="5873:41" pos:end="5873:41"><name pos:start="5873:41" pos:end="5873:41">s</name></expr></argument>, <argument pos:start="5873:44" pos:end="5873:51"><expr pos:start="5873:44" pos:end="5873:51"><name pos:start="5873:44" pos:end="5873:51">pc_start</name></expr></argument>, <argument pos:start="5873:54" pos:end="5873:70"><expr pos:start="5873:54" pos:end="5873:70"><name pos:start="5873:54" pos:end="5873:70">SVM_EXIT_TR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5875:17" pos:end="5875:62"><expr pos:start="5875:17" pos:end="5875:61"><call pos:start="5875:17" pos:end="5875:61"><name pos:start="5875:17" pos:end="5875:30">gen_ldst_modrm</name><argument_list pos:start="5875:31" pos:end="5875:61">(<argument pos:start="5875:32" pos:end="5875:32"><expr pos:start="5875:32" pos:end="5875:32"><name pos:start="5875:32" pos:end="5875:32">s</name></expr></argument>, <argument pos:start="5875:35" pos:end="5875:39"><expr pos:start="5875:35" pos:end="5875:39"><name pos:start="5875:35" pos:end="5875:39">modrm</name></expr></argument>, <argument pos:start="5875:42" pos:end="5875:48"><expr pos:start="5875:42" pos:end="5875:48"><name pos:start="5875:42" pos:end="5875:48">OT_WORD</name></expr></argument>, <argument pos:start="5875:51" pos:end="5875:57"><expr pos:start="5875:51" pos:end="5875:57"><name pos:start="5875:51" pos:end="5875:57">OR_TMP0</name></expr></argument>, <argument pos:start="5875:60" pos:end="5875:60"><expr pos:start="5875:60" pos:end="5875:60"><literal type="number" pos:start="5875:60" pos:end="5875:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5877:17" pos:end="5877:50"><expr pos:start="5877:17" pos:end="5877:49"><call pos:start="5877:17" pos:end="5877:49"><name pos:start="5877:17" pos:end="5877:26">gen_jmp_im</name><argument_list pos:start="5877:27" pos:end="5877:49">(<argument pos:start="5877:28" pos:end="5877:48"><expr pos:start="5877:28" pos:end="5877:48"><name pos:start="5877:28" pos:end="5877:35">pc_start</name> <operator pos:start="5877:37" pos:end="5877:37">-</operator> <name pos:start="5877:39" pos:end="5877:48"><name pos:start="5877:39" pos:end="5877:39">s</name><operator pos:start="5877:40" pos:end="5877:41">-&gt;</operator><name pos:start="5877:42" pos:end="5877:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5879:17" pos:end="5879:61"><expr pos:start="5879:17" pos:end="5879:60"><call pos:start="5879:17" pos:end="5879:60"><name pos:start="5879:17" pos:end="5879:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="5879:37" pos:end="5879:60">(<argument pos:start="5879:38" pos:end="5879:49"><expr pos:start="5879:38" pos:end="5879:49"><name pos:start="5879:38" pos:end="5879:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="5879:52" pos:end="5879:59"><expr pos:start="5879:52" pos:end="5879:59"><name pos:start="5879:52" pos:end="5879:59"><name pos:start="5879:52" pos:end="5879:56">cpu_T</name><index pos:start="5879:57" pos:end="5879:59">[<expr pos:start="5879:58" pos:end="5879:58"><literal type="number" pos:start="5879:58" pos:end="5879:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5881:17" pos:end="5881:54"><expr pos:start="5881:17" pos:end="5881:53"><call pos:start="5881:17" pos:end="5881:53"><name pos:start="5881:17" pos:end="5881:30">gen_helper_ltr</name><argument_list pos:start="5881:31" pos:end="5881:53">(<argument pos:start="5881:32" pos:end="5881:38"><expr pos:start="5881:32" pos:end="5881:38"><name pos:start="5881:32" pos:end="5881:38">cpu_env</name></expr></argument>, <argument pos:start="5881:41" pos:end="5881:52"><expr pos:start="5881:41" pos:end="5881:52"><name pos:start="5881:41" pos:end="5881:52">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="5885:13" pos:end="5885:18">break;</break>

        <case pos:start="5887:9" pos:end="5887:15">case <expr pos:start="5887:14" pos:end="5887:14"><literal type="number" pos:start="5887:14" pos:end="5887:14">4</literal></expr>:</case> <comment type="block" pos:start="5887:17" pos:end="5887:26">/* verr */</comment>

        <case pos:start="5889:9" pos:end="5889:15">case <expr pos:start="5889:14" pos:end="5889:14"><literal type="number" pos:start="5889:14" pos:end="5889:14">5</literal></expr>:</case> <comment type="block" pos:start="5889:17" pos:end="5889:26">/* verw */</comment>

            <if_stmt pos:start="5891:13" pos:end="5893:32"><if pos:start="5891:13" pos:end="5893:32">if <condition pos:start="5891:16" pos:end="5891:34">(<expr pos:start="5891:17" pos:end="5891:33"><operator pos:start="5891:17" pos:end="5891:17">!</operator><name pos:start="5891:18" pos:end="5891:22"><name pos:start="5891:18" pos:end="5891:18">s</name><operator pos:start="5891:19" pos:end="5891:20">-&gt;</operator><name pos:start="5891:21" pos:end="5891:22">pe</name></name> <operator pos:start="5891:24" pos:end="5891:25">||</operator> <name pos:start="5891:27" pos:end="5891:33"><name pos:start="5891:27" pos:end="5891:27">s</name><operator pos:start="5891:28" pos:end="5891:29">-&gt;</operator><name pos:start="5891:30" pos:end="5891:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="5893:17" pos:end="5893:32"><block_content pos:start="5893:17" pos:end="5893:32">

                <goto pos:start="5893:17" pos:end="5893:32">goto <name pos:start="5893:22" pos:end="5893:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5895:13" pos:end="5895:58"><expr pos:start="5895:13" pos:end="5895:57"><call pos:start="5895:13" pos:end="5895:57"><name pos:start="5895:13" pos:end="5895:26">gen_ldst_modrm</name><argument_list pos:start="5895:27" pos:end="5895:57">(<argument pos:start="5895:28" pos:end="5895:28"><expr pos:start="5895:28" pos:end="5895:28"><name pos:start="5895:28" pos:end="5895:28">s</name></expr></argument>, <argument pos:start="5895:31" pos:end="5895:35"><expr pos:start="5895:31" pos:end="5895:35"><name pos:start="5895:31" pos:end="5895:35">modrm</name></expr></argument>, <argument pos:start="5895:38" pos:end="5895:44"><expr pos:start="5895:38" pos:end="5895:44"><name pos:start="5895:38" pos:end="5895:44">OT_WORD</name></expr></argument>, <argument pos:start="5895:47" pos:end="5895:53"><expr pos:start="5895:47" pos:end="5895:53"><name pos:start="5895:47" pos:end="5895:53">OR_TMP0</name></expr></argument>, <argument pos:start="5895:56" pos:end="5895:56"><expr pos:start="5895:56" pos:end="5895:56"><literal type="number" pos:start="5895:56" pos:end="5895:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5897:13" pos:end="5899:43"><if pos:start="5897:13" pos:end="5899:43">if <condition pos:start="5897:16" pos:end="5897:42">(<expr pos:start="5897:17" pos:end="5897:41"><name pos:start="5897:17" pos:end="5897:24"><name pos:start="5897:17" pos:end="5897:17">s</name><operator pos:start="5897:18" pos:end="5897:19">-&gt;</operator><name pos:start="5897:20" pos:end="5897:24">cc_op</name></name> <operator pos:start="5897:26" pos:end="5897:27">!=</operator> <name pos:start="5897:29" pos:end="5897:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5899:17" pos:end="5899:43"><block_content pos:start="5899:17" pos:end="5899:43">

                <expr_stmt pos:start="5899:17" pos:end="5899:43"><expr pos:start="5899:17" pos:end="5899:42"><call pos:start="5899:17" pos:end="5899:42"><name pos:start="5899:17" pos:end="5899:32">gen_op_set_cc_op</name><argument_list pos:start="5899:33" pos:end="5899:42">(<argument pos:start="5899:34" pos:end="5899:41"><expr pos:start="5899:34" pos:end="5899:41"><name pos:start="5899:34" pos:end="5899:41"><name pos:start="5899:34" pos:end="5899:34">s</name><operator pos:start="5899:35" pos:end="5899:36">-&gt;</operator><name pos:start="5899:37" pos:end="5899:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="5901:13" pos:end="5909:13"><if pos:start="5901:13" pos:end="5905:13">if <condition pos:start="5901:16" pos:end="5901:24">(<expr pos:start="5901:17" pos:end="5901:23"><name pos:start="5901:17" pos:end="5901:18">op</name> <operator pos:start="5901:20" pos:end="5901:21">==</operator> <literal type="number" pos:start="5901:23" pos:end="5901:23">4</literal></expr>)</condition> <block pos:start="5901:26" pos:end="5905:13">{<block_content pos:start="5903:17" pos:end="5903:51">

                <expr_stmt pos:start="5903:17" pos:end="5903:51"><expr pos:start="5903:17" pos:end="5903:50"><call pos:start="5903:17" pos:end="5903:50"><name pos:start="5903:17" pos:end="5903:31">gen_helper_verr</name><argument_list pos:start="5903:32" pos:end="5903:50">(<argument pos:start="5903:33" pos:end="5903:39"><expr pos:start="5903:33" pos:end="5903:39"><name pos:start="5903:33" pos:end="5903:39">cpu_env</name></expr></argument>, <argument pos:start="5903:42" pos:end="5903:49"><expr pos:start="5903:42" pos:end="5903:49"><name pos:start="5903:42" pos:end="5903:49"><name pos:start="5903:42" pos:end="5903:46">cpu_T</name><index pos:start="5903:47" pos:end="5903:49">[<expr pos:start="5903:48" pos:end="5903:48"><literal type="number" pos:start="5903:48" pos:end="5903:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="5905:15" pos:end="5909:13">else <block pos:start="5905:20" pos:end="5909:13">{<block_content pos:start="5907:17" pos:end="5907:51">

                <expr_stmt pos:start="5907:17" pos:end="5907:51"><expr pos:start="5907:17" pos:end="5907:50"><call pos:start="5907:17" pos:end="5907:50"><name pos:start="5907:17" pos:end="5907:31">gen_helper_verw</name><argument_list pos:start="5907:32" pos:end="5907:50">(<argument pos:start="5907:33" pos:end="5907:39"><expr pos:start="5907:33" pos:end="5907:39"><name pos:start="5907:33" pos:end="5907:39">cpu_env</name></expr></argument>, <argument pos:start="5907:42" pos:end="5907:49"><expr pos:start="5907:42" pos:end="5907:49"><name pos:start="5907:42" pos:end="5907:49"><name pos:start="5907:42" pos:end="5907:46">cpu_T</name><index pos:start="5907:47" pos:end="5907:49">[<expr pos:start="5907:48" pos:end="5907:48"><literal type="number" pos:start="5907:48" pos:end="5907:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="5911:13" pos:end="5911:36"><expr pos:start="5911:13" pos:end="5911:35"><name pos:start="5911:13" pos:end="5911:20"><name pos:start="5911:13" pos:end="5911:13">s</name><operator pos:start="5911:14" pos:end="5911:15">-&gt;</operator><name pos:start="5911:16" pos:end="5911:20">cc_op</name></name> <operator pos:start="5911:22" pos:end="5911:22">=</operator> <name pos:start="5911:24" pos:end="5911:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <break pos:start="5913:13" pos:end="5913:18">break;</break>

        <default pos:start="5915:9" pos:end="5915:16">default:</default>

            <goto pos:start="5917:13" pos:end="5917:28">goto <name pos:start="5917:18" pos:end="5917:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="5921:9" pos:end="5921:14">break;</break>

    <case pos:start="5923:5" pos:end="5923:15">case <expr pos:start="5923:10" pos:end="5923:14"><literal type="number" pos:start="5923:10" pos:end="5923:14">0x101</literal></expr>:</case>

        <expr_stmt pos:start="5925:9" pos:end="5925:55"><expr pos:start="5925:9" pos:end="5925:54"><name pos:start="5925:9" pos:end="5925:13">modrm</name> <operator pos:start="5925:15" pos:end="5925:15">=</operator> <call pos:start="5925:17" pos:end="5925:54"><name pos:start="5925:17" pos:end="5925:29">cpu_ldub_code</name><argument_list pos:start="5925:30" pos:end="5925:54">(<argument pos:start="5925:31" pos:end="5925:44"><expr pos:start="5925:31" pos:end="5925:44"><name pos:start="5925:31" pos:end="5925:44">cpu_single_env</name></expr></argument>, <argument pos:start="5925:47" pos:end="5925:53"><expr pos:start="5925:47" pos:end="5925:53"><name pos:start="5925:47" pos:end="5925:51"><name pos:start="5925:47" pos:end="5925:47">s</name><operator pos:start="5925:48" pos:end="5925:49">-&gt;</operator><name pos:start="5925:50" pos:end="5925:51">pc</name></name><operator pos:start="5925:52" pos:end="5925:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5927:9" pos:end="5927:31"><expr pos:start="5927:9" pos:end="5927:30"><name pos:start="5927:9" pos:end="5927:11">mod</name> <operator pos:start="5927:13" pos:end="5927:13">=</operator> <operator pos:start="5927:15" pos:end="5927:15">(</operator><name pos:start="5927:16" pos:end="5927:20">modrm</name> <operator pos:start="5927:22" pos:end="5927:23">&gt;&gt;</operator> <literal type="number" pos:start="5927:25" pos:end="5927:25">6</literal><operator pos:start="5927:26" pos:end="5927:26">)</operator> <operator pos:start="5927:28" pos:end="5927:28">&amp;</operator> <literal type="number" pos:start="5927:30" pos:end="5927:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5929:9" pos:end="5929:30"><expr pos:start="5929:9" pos:end="5929:29"><name pos:start="5929:9" pos:end="5929:10">op</name> <operator pos:start="5929:12" pos:end="5929:12">=</operator> <operator pos:start="5929:14" pos:end="5929:14">(</operator><name pos:start="5929:15" pos:end="5929:19">modrm</name> <operator pos:start="5929:21" pos:end="5929:22">&gt;&gt;</operator> <literal type="number" pos:start="5929:24" pos:end="5929:24">3</literal><operator pos:start="5929:25" pos:end="5929:25">)</operator> <operator pos:start="5929:27" pos:end="5929:27">&amp;</operator> <literal type="number" pos:start="5929:29" pos:end="5929:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="5931:9" pos:end="5931:23"><expr pos:start="5931:9" pos:end="5931:22"><name pos:start="5931:9" pos:end="5931:10">rm</name> <operator pos:start="5931:12" pos:end="5931:12">=</operator> <name pos:start="5931:14" pos:end="5931:18">modrm</name> <operator pos:start="5931:20" pos:end="5931:20">&amp;</operator> <literal type="number" pos:start="5931:22" pos:end="5931:22">7</literal></expr>;</expr_stmt>

        <switch pos:start="5933:9" pos:end="6423:9">switch<condition pos:start="5933:15" pos:end="5933:18">(<expr pos:start="5933:16" pos:end="5933:17"><name pos:start="5933:16" pos:end="5933:17">op</name></expr>)</condition> <block pos:start="5933:20" pos:end="6423:9">{<block_content pos:start="5935:9" pos:end="6421:28">

        <case pos:start="5935:9" pos:end="5935:15">case <expr pos:start="5935:14" pos:end="5935:14"><literal type="number" pos:start="5935:14" pos:end="5935:14">0</literal></expr>:</case> <comment type="block" pos:start="5935:17" pos:end="5935:26">/* sgdt */</comment>

            <if_stmt pos:start="5937:13" pos:end="5939:32"><if pos:start="5937:13" pos:end="5939:32">if <condition pos:start="5937:16" pos:end="5937:25">(<expr pos:start="5937:17" pos:end="5937:24"><name pos:start="5937:17" pos:end="5937:19">mod</name> <operator pos:start="5937:21" pos:end="5937:22">==</operator> <literal type="number" pos:start="5937:24" pos:end="5937:24">3</literal></expr>)</condition><block type="pseudo" pos:start="5939:17" pos:end="5939:32"><block_content pos:start="5939:17" pos:end="5939:32">

                <goto pos:start="5939:17" pos:end="5939:32">goto <name pos:start="5939:22" pos:end="5939:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5941:13" pos:end="5941:69"><expr pos:start="5941:13" pos:end="5941:68"><call pos:start="5941:13" pos:end="5941:68"><name pos:start="5941:13" pos:end="5941:35">gen_svm_check_intercept</name><argument_list pos:start="5941:36" pos:end="5941:68">(<argument pos:start="5941:37" pos:end="5941:37"><expr pos:start="5941:37" pos:end="5941:37"><name pos:start="5941:37" pos:end="5941:37">s</name></expr></argument>, <argument pos:start="5941:40" pos:end="5941:47"><expr pos:start="5941:40" pos:end="5941:47"><name pos:start="5941:40" pos:end="5941:47">pc_start</name></expr></argument>, <argument pos:start="5941:50" pos:end="5941:67"><expr pos:start="5941:50" pos:end="5941:67"><name pos:start="5941:50" pos:end="5941:67">SVM_EXIT_GDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5943:13" pos:end="5943:61"><expr pos:start="5943:13" pos:end="5943:60"><call pos:start="5943:13" pos:end="5943:60"><name pos:start="5943:13" pos:end="5943:25">gen_lea_modrm</name><argument_list pos:start="5943:26" pos:end="5943:60">(<argument pos:start="5943:27" pos:end="5943:27"><expr pos:start="5943:27" pos:end="5943:27"><name pos:start="5943:27" pos:end="5943:27">s</name></expr></argument>, <argument pos:start="5943:30" pos:end="5943:34"><expr pos:start="5943:30" pos:end="5943:34"><name pos:start="5943:30" pos:end="5943:34">modrm</name></expr></argument>, <argument pos:start="5943:37" pos:end="5943:45"><expr pos:start="5943:37" pos:end="5943:45"><operator pos:start="5943:37" pos:end="5943:37">&amp;</operator><name pos:start="5943:38" pos:end="5943:45">reg_addr</name></expr></argument>, <argument pos:start="5943:48" pos:end="5943:59"><expr pos:start="5943:48" pos:end="5943:59"><operator pos:start="5943:48" pos:end="5943:48">&amp;</operator><name pos:start="5943:49" pos:end="5943:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5945:13" pos:end="5945:82"><expr pos:start="5945:13" pos:end="5945:81"><call pos:start="5945:13" pos:end="5945:81"><name pos:start="5945:13" pos:end="5945:28">tcg_gen_ld32u_tl</name><argument_list pos:start="5945:29" pos:end="5945:81">(<argument pos:start="5945:30" pos:end="5945:37"><expr pos:start="5945:30" pos:end="5945:37"><name pos:start="5945:30" pos:end="5945:37"><name pos:start="5945:30" pos:end="5945:34">cpu_T</name><index pos:start="5945:35" pos:end="5945:37">[<expr pos:start="5945:36" pos:end="5945:36"><literal type="number" pos:start="5945:36" pos:end="5945:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5945:40" pos:end="5945:46"><expr pos:start="5945:40" pos:end="5945:46"><name pos:start="5945:40" pos:end="5945:46">cpu_env</name></expr></argument>, <argument pos:start="5945:49" pos:end="5945:80"><expr pos:start="5945:49" pos:end="5945:80"><call pos:start="5945:49" pos:end="5945:80"><name pos:start="5945:49" pos:end="5945:56">offsetof</name><argument_list pos:start="5945:57" pos:end="5945:80">(<argument pos:start="5945:58" pos:end="5945:68"><expr pos:start="5945:58" pos:end="5945:68"><name pos:start="5945:58" pos:end="5945:68">CPUX86State</name></expr></argument>, <argument pos:start="5945:71" pos:end="5945:79"><expr pos:start="5945:71" pos:end="5945:79"><name pos:start="5945:71" pos:end="5945:79"><name pos:start="5945:71" pos:end="5945:73">gdt</name><operator pos:start="5945:74" pos:end="5945:74">.</operator><name pos:start="5945:75" pos:end="5945:79">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5947:13" pos:end="5947:52"><expr pos:start="5947:13" pos:end="5947:51"><call pos:start="5947:13" pos:end="5947:51"><name pos:start="5947:13" pos:end="5947:27">gen_op_st_T0_A0</name><argument_list pos:start="5947:28" pos:end="5947:51">(<argument pos:start="5947:29" pos:end="5947:50"><expr pos:start="5947:29" pos:end="5947:50"><name pos:start="5947:29" pos:end="5947:35">OT_WORD</name> <operator pos:start="5947:37" pos:end="5947:37">+</operator> <name pos:start="5947:39" pos:end="5947:50"><name pos:start="5947:39" pos:end="5947:39">s</name><operator pos:start="5947:40" pos:end="5947:41">-&gt;</operator><name pos:start="5947:42" pos:end="5947:50">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5949:13" pos:end="5949:32"><expr pos:start="5949:13" pos:end="5949:31"><call pos:start="5949:13" pos:end="5949:31"><name pos:start="5949:13" pos:end="5949:25">gen_add_A0_im</name><argument_list pos:start="5949:26" pos:end="5949:31">(<argument pos:start="5949:27" pos:end="5949:27"><expr pos:start="5949:27" pos:end="5949:27"><name pos:start="5949:27" pos:end="5949:27">s</name></expr></argument>, <argument pos:start="5949:30" pos:end="5949:30"><expr pos:start="5949:30" pos:end="5949:30"><literal type="number" pos:start="5949:30" pos:end="5949:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5951:13" pos:end="5951:78"><expr pos:start="5951:13" pos:end="5951:77"><call pos:start="5951:13" pos:end="5951:77"><name pos:start="5951:13" pos:end="5951:25">tcg_gen_ld_tl</name><argument_list pos:start="5951:26" pos:end="5951:77">(<argument pos:start="5951:27" pos:end="5951:34"><expr pos:start="5951:27" pos:end="5951:34"><name pos:start="5951:27" pos:end="5951:34"><name pos:start="5951:27" pos:end="5951:31">cpu_T</name><index pos:start="5951:32" pos:end="5951:34">[<expr pos:start="5951:33" pos:end="5951:33"><literal type="number" pos:start="5951:33" pos:end="5951:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5951:37" pos:end="5951:43"><expr pos:start="5951:37" pos:end="5951:43"><name pos:start="5951:37" pos:end="5951:43">cpu_env</name></expr></argument>, <argument pos:start="5951:46" pos:end="5951:76"><expr pos:start="5951:46" pos:end="5951:76"><call pos:start="5951:46" pos:end="5951:76"><name pos:start="5951:46" pos:end="5951:53">offsetof</name><argument_list pos:start="5951:54" pos:end="5951:76">(<argument pos:start="5951:55" pos:end="5951:65"><expr pos:start="5951:55" pos:end="5951:65"><name pos:start="5951:55" pos:end="5951:65">CPUX86State</name></expr></argument>, <argument pos:start="5951:68" pos:end="5951:75"><expr pos:start="5951:68" pos:end="5951:75"><name pos:start="5951:68" pos:end="5951:75"><name pos:start="5951:68" pos:end="5951:70">gdt</name><operator pos:start="5951:71" pos:end="5951:71">.</operator><name pos:start="5951:72" pos:end="5951:75">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5953:13" pos:end="5955:44"><if pos:start="5953:13" pos:end="5955:44">if <condition pos:start="5953:16" pos:end="5953:26">(<expr pos:start="5953:17" pos:end="5953:25"><operator pos:start="5953:17" pos:end="5953:17">!</operator><name pos:start="5953:18" pos:end="5953:25"><name pos:start="5953:18" pos:end="5953:18">s</name><operator pos:start="5953:19" pos:end="5953:20">-&gt;</operator><name pos:start="5953:21" pos:end="5953:25">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="5955:17" pos:end="5955:44"><block_content pos:start="5955:17" pos:end="5955:44">

                <expr_stmt pos:start="5955:17" pos:end="5955:44"><expr pos:start="5955:17" pos:end="5955:43"><call pos:start="5955:17" pos:end="5955:43"><name pos:start="5955:17" pos:end="5955:33">gen_op_andl_T0_im</name><argument_list pos:start="5955:34" pos:end="5955:43">(<argument pos:start="5955:35" pos:end="5955:42"><expr pos:start="5955:35" pos:end="5955:42"><literal type="number" pos:start="5955:35" pos:end="5955:42">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="5957:13" pos:end="5957:64"><expr pos:start="5957:13" pos:end="5957:63"><call pos:start="5957:13" pos:end="5957:63"><name pos:start="5957:13" pos:end="5957:27">gen_op_st_T0_A0</name><argument_list pos:start="5957:28" pos:end="5957:63">(<argument pos:start="5957:29" pos:end="5957:62"><expr pos:start="5957:29" pos:end="5957:62"><call pos:start="5957:29" pos:end="5957:37"><name pos:start="5957:29" pos:end="5957:34">CODE64</name><argument_list pos:start="5957:35" pos:end="5957:37">(<argument pos:start="5957:36" pos:end="5957:36"><expr pos:start="5957:36" pos:end="5957:36"><name pos:start="5957:36" pos:end="5957:36">s</name></expr></argument>)</argument_list></call> <operator pos:start="5957:39" pos:end="5957:39">+</operator> <name pos:start="5957:41" pos:end="5957:47">OT_LONG</name> <operator pos:start="5957:49" pos:end="5957:49">+</operator> <name pos:start="5957:51" pos:end="5957:62"><name pos:start="5957:51" pos:end="5957:51">s</name><operator pos:start="5957:52" pos:end="5957:53">-&gt;</operator><name pos:start="5957:54" pos:end="5957:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="5959:13" pos:end="5959:18">break;</break>

        <case pos:start="5961:9" pos:end="5961:15">case <expr pos:start="5961:14" pos:end="5961:14"><literal type="number" pos:start="5961:14" pos:end="5961:14">1</literal></expr>:</case>

            <if_stmt pos:start="5963:13" pos:end="6051:13"><if pos:start="5963:13" pos:end="6031:13">if <condition pos:start="5963:16" pos:end="5963:25">(<expr pos:start="5963:17" pos:end="5963:24"><name pos:start="5963:17" pos:end="5963:19">mod</name> <operator pos:start="5963:21" pos:end="5963:22">==</operator> <literal type="number" pos:start="5963:24" pos:end="5963:24">3</literal></expr>)</condition> <block pos:start="5963:27" pos:end="6031:13">{<block_content pos:start="5965:17" pos:end="6029:17">

                <switch pos:start="5965:17" pos:end="6029:17">switch <condition pos:start="5965:24" pos:end="5965:27">(<expr pos:start="5965:25" pos:end="5965:26"><name pos:start="5965:25" pos:end="5965:26">rm</name></expr>)</condition> <block pos:start="5965:29" pos:end="6029:17">{<block_content pos:start="5967:17" pos:end="6027:36">

                <case pos:start="5967:17" pos:end="5967:23">case <expr pos:start="5967:22" pos:end="5967:22"><literal type="number" pos:start="5967:22" pos:end="5967:22">0</literal></expr>:</case> <comment type="block" pos:start="5967:25" pos:end="5967:37">/* monitor */</comment>

                    <if_stmt pos:start="5969:21" pos:end="5973:40"><if pos:start="5969:21" pos:end="5973:40">if <condition pos:start="5969:24" pos:end="5971:36">(<expr pos:start="5969:25" pos:end="5971:35"><operator pos:start="5969:25" pos:end="5969:25">!</operator><operator pos:start="5969:26" pos:end="5969:26">(</operator><name pos:start="5969:27" pos:end="5969:47"><name pos:start="5969:27" pos:end="5969:27">s</name><operator pos:start="5969:28" pos:end="5969:29">-&gt;</operator><name pos:start="5969:30" pos:end="5969:47">cpuid_ext_features</name></name> <operator pos:start="5969:49" pos:end="5969:49">&amp;</operator> <name pos:start="5969:51" pos:end="5969:67">CPUID_EXT_MONITOR</name><operator pos:start="5969:68" pos:end="5969:68">)</operator> <operator pos:start="5969:70" pos:end="5969:71">||</operator>

                        <name pos:start="5971:25" pos:end="5971:30"><name pos:start="5971:25" pos:end="5971:25">s</name><operator pos:start="5971:26" pos:end="5971:27">-&gt;</operator><name pos:start="5971:28" pos:end="5971:30">cpl</name></name> <operator pos:start="5971:32" pos:end="5971:33">!=</operator> <literal type="number" pos:start="5971:35" pos:end="5971:35">0</literal></expr>)</condition><block type="pseudo" pos:start="5973:25" pos:end="5973:40"><block_content pos:start="5973:25" pos:end="5973:40">

                        <goto pos:start="5973:25" pos:end="5973:40">goto <name pos:start="5973:30" pos:end="5973:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="5975:21" pos:end="5977:51"><if pos:start="5975:21" pos:end="5977:51">if <condition pos:start="5975:24" pos:end="5975:50">(<expr pos:start="5975:25" pos:end="5975:49"><name pos:start="5975:25" pos:end="5975:32"><name pos:start="5975:25" pos:end="5975:25">s</name><operator pos:start="5975:26" pos:end="5975:27">-&gt;</operator><name pos:start="5975:28" pos:end="5975:32">cc_op</name></name> <operator pos:start="5975:34" pos:end="5975:35">!=</operator> <name pos:start="5975:37" pos:end="5975:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="5977:25" pos:end="5977:51"><block_content pos:start="5977:25" pos:end="5977:51">

                        <expr_stmt pos:start="5977:25" pos:end="5977:51"><expr pos:start="5977:25" pos:end="5977:50"><call pos:start="5977:25" pos:end="5977:50"><name pos:start="5977:25" pos:end="5977:40">gen_op_set_cc_op</name><argument_list pos:start="5977:41" pos:end="5977:50">(<argument pos:start="5977:42" pos:end="5977:49"><expr pos:start="5977:42" pos:end="5977:49"><name pos:start="5977:42" pos:end="5977:49"><name pos:start="5977:42" pos:end="5977:42">s</name><operator pos:start="5977:43" pos:end="5977:44">-&gt;</operator><name pos:start="5977:45" pos:end="5977:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="5979:21" pos:end="5982:0"><expr pos:start="5979:21" pos:end="5979:53"><call pos:start="5979:21" pos:end="5979:53"><name pos:start="5979:21" pos:end="5979:30">gen_jmp_im</name><argument_list pos:start="5979:31" pos:end="5979:53">(<argument pos:start="5979:32" pos:end="5979:52"><expr pos:start="5979:32" pos:end="5979:52"><name pos:start="5979:32" pos:end="5979:39">pc_start</name> <operator pos:start="5979:41" pos:end="5979:41">-</operator> <name pos:start="5979:43" pos:end="5979:52"><name pos:start="5979:43" pos:end="5979:43">s</name><operator pos:start="5979:44" pos:end="5979:45">-&gt;</operator><name pos:start="5979:46" pos:end="5979:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="5981:1" pos:end="5981:20">#<cpp:directive pos:start="5981:2" pos:end="5981:6">ifdef</cpp:directive> <name pos:start="5981:8" pos:end="5981:20">TARGET_X86_64</name></cpp:ifdef>

                    <if_stmt pos:start="5983:21" pos:end="5999:21"><if pos:start="5983:21" pos:end="5987:21">if <condition pos:start="5983:24" pos:end="5983:38">(<expr pos:start="5983:25" pos:end="5983:37"><name pos:start="5983:25" pos:end="5983:32"><name pos:start="5983:25" pos:end="5983:25">s</name><operator pos:start="5983:26" pos:end="5983:27">-&gt;</operator><name pos:start="5983:28" pos:end="5983:32">aflag</name></name> <operator pos:start="5983:34" pos:end="5983:35">==</operator> <literal type="number" pos:start="5983:37" pos:end="5983:37">2</literal></expr>)</condition> <block pos:start="5983:40" pos:end="5987:21">{<block_content pos:start="5985:25" pos:end="5985:50">

                        <expr_stmt pos:start="5985:25" pos:end="5985:50"><expr pos:start="5985:25" pos:end="5985:49"><call pos:start="5985:25" pos:end="5985:49"><name pos:start="5985:25" pos:end="5985:42">gen_op_movq_A0_reg</name><argument_list pos:start="5985:43" pos:end="5985:49">(<argument pos:start="5985:44" pos:end="5985:48"><expr pos:start="5985:44" pos:end="5985:48"><name pos:start="5985:44" pos:end="5985:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="5987:23" pos:end="5999:21">else

<cpp:endif pos:start="5989:1" pos:end="5989:6">#<cpp:directive pos:start="5989:2" pos:end="5989:6">endif</cpp:directive></cpp:endif>

                    <block pos:start="5991:21" pos:end="5999:21">{<block_content pos:start="5993:25" pos:end="5997:50">

                        <expr_stmt pos:start="5993:25" pos:end="5993:50"><expr pos:start="5993:25" pos:end="5993:49"><call pos:start="5993:25" pos:end="5993:49"><name pos:start="5993:25" pos:end="5993:42">gen_op_movl_A0_reg</name><argument_list pos:start="5993:43" pos:end="5993:49">(<argument pos:start="5993:44" pos:end="5993:48"><expr pos:start="5993:44" pos:end="5993:48"><name pos:start="5993:44" pos:end="5993:48">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="5995:25" pos:end="5997:50"><if pos:start="5995:25" pos:end="5997:50">if <condition pos:start="5995:28" pos:end="5995:42">(<expr pos:start="5995:29" pos:end="5995:41"><name pos:start="5995:29" pos:end="5995:36"><name pos:start="5995:29" pos:end="5995:29">s</name><operator pos:start="5995:30" pos:end="5995:31">-&gt;</operator><name pos:start="5995:32" pos:end="5995:36">aflag</name></name> <operator pos:start="5995:38" pos:end="5995:39">==</operator> <literal type="number" pos:start="5995:41" pos:end="5995:41">0</literal></expr>)</condition><block type="pseudo" pos:start="5997:29" pos:end="5997:50"><block_content pos:start="5997:29" pos:end="5997:50">

                            <expr_stmt pos:start="5997:29" pos:end="5997:50"><expr pos:start="5997:29" pos:end="5997:49"><call pos:start="5997:29" pos:end="5997:49"><name pos:start="5997:29" pos:end="5997:47">gen_op_andl_A0_ffff</name><argument_list pos:start="5997:48" pos:end="5997:49">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="6001:21" pos:end="6001:41"><expr pos:start="6001:21" pos:end="6001:40"><call pos:start="6001:21" pos:end="6001:40"><name pos:start="6001:21" pos:end="6001:37">gen_add_A0_ds_seg</name><argument_list pos:start="6001:38" pos:end="6001:40">(<argument pos:start="6001:39" pos:end="6001:39"><expr pos:start="6001:39" pos:end="6001:39"><name pos:start="6001:39" pos:end="6001:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6003:21" pos:end="6003:56"><expr pos:start="6003:21" pos:end="6003:55"><call pos:start="6003:21" pos:end="6003:55"><name pos:start="6003:21" pos:end="6003:38">gen_helper_monitor</name><argument_list pos:start="6003:39" pos:end="6003:55">(<argument pos:start="6003:40" pos:end="6003:46"><expr pos:start="6003:40" pos:end="6003:46"><name pos:start="6003:40" pos:end="6003:46">cpu_env</name></expr></argument>, <argument pos:start="6003:49" pos:end="6003:54"><expr pos:start="6003:49" pos:end="6003:54"><name pos:start="6003:49" pos:end="6003:54">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6005:21" pos:end="6005:26">break;</break>

                <case pos:start="6007:17" pos:end="6007:23">case <expr pos:start="6007:22" pos:end="6007:22"><literal type="number" pos:start="6007:22" pos:end="6007:22">1</literal></expr>:</case> <comment type="block" pos:start="6007:25" pos:end="6007:35">/* mwait */</comment>

                    <if_stmt pos:start="6009:21" pos:end="6013:40"><if pos:start="6009:21" pos:end="6013:40">if <condition pos:start="6009:24" pos:end="6011:36">(<expr pos:start="6009:25" pos:end="6011:35"><operator pos:start="6009:25" pos:end="6009:25">!</operator><operator pos:start="6009:26" pos:end="6009:26">(</operator><name pos:start="6009:27" pos:end="6009:47"><name pos:start="6009:27" pos:end="6009:27">s</name><operator pos:start="6009:28" pos:end="6009:29">-&gt;</operator><name pos:start="6009:30" pos:end="6009:47">cpuid_ext_features</name></name> <operator pos:start="6009:49" pos:end="6009:49">&amp;</operator> <name pos:start="6009:51" pos:end="6009:67">CPUID_EXT_MONITOR</name><operator pos:start="6009:68" pos:end="6009:68">)</operator> <operator pos:start="6009:70" pos:end="6009:71">||</operator>

                        <name pos:start="6011:25" pos:end="6011:30"><name pos:start="6011:25" pos:end="6011:25">s</name><operator pos:start="6011:26" pos:end="6011:27">-&gt;</operator><name pos:start="6011:28" pos:end="6011:30">cpl</name></name> <operator pos:start="6011:32" pos:end="6011:33">!=</operator> <literal type="number" pos:start="6011:35" pos:end="6011:35">0</literal></expr>)</condition><block type="pseudo" pos:start="6013:25" pos:end="6013:40"><block_content pos:start="6013:25" pos:end="6013:40">

                        <goto pos:start="6013:25" pos:end="6013:40">goto <name pos:start="6013:30" pos:end="6013:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6015:21" pos:end="6015:40"><expr pos:start="6015:21" pos:end="6015:39"><call pos:start="6015:21" pos:end="6015:39"><name pos:start="6015:21" pos:end="6015:36">gen_update_cc_op</name><argument_list pos:start="6015:37" pos:end="6015:39">(<argument pos:start="6015:38" pos:end="6015:38"><expr pos:start="6015:38" pos:end="6015:38"><name pos:start="6015:38" pos:end="6015:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6017:21" pos:end="6017:54"><expr pos:start="6017:21" pos:end="6017:53"><call pos:start="6017:21" pos:end="6017:53"><name pos:start="6017:21" pos:end="6017:30">gen_jmp_im</name><argument_list pos:start="6017:31" pos:end="6017:53">(<argument pos:start="6017:32" pos:end="6017:52"><expr pos:start="6017:32" pos:end="6017:52"><name pos:start="6017:32" pos:end="6017:39">pc_start</name> <operator pos:start="6017:41" pos:end="6017:41">-</operator> <name pos:start="6017:43" pos:end="6017:52"><name pos:start="6017:43" pos:end="6017:43">s</name><operator pos:start="6017:44" pos:end="6017:45">-&gt;</operator><name pos:start="6017:46" pos:end="6017:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6019:21" pos:end="6019:79"><expr pos:start="6019:21" pos:end="6019:78"><call pos:start="6019:21" pos:end="6019:78"><name pos:start="6019:21" pos:end="6019:36">gen_helper_mwait</name><argument_list pos:start="6019:37" pos:end="6019:78">(<argument pos:start="6019:38" pos:end="6019:44"><expr pos:start="6019:38" pos:end="6019:44"><name pos:start="6019:38" pos:end="6019:44">cpu_env</name></expr></argument>, <argument pos:start="6019:47" pos:end="6019:77"><expr pos:start="6019:47" pos:end="6019:77"><call pos:start="6019:47" pos:end="6019:77"><name pos:start="6019:47" pos:end="6019:59">tcg_const_i32</name><argument_list pos:start="6019:60" pos:end="6019:77">(<argument pos:start="6019:61" pos:end="6019:76"><expr pos:start="6019:61" pos:end="6019:76"><name pos:start="6019:61" pos:end="6019:65"><name pos:start="6019:61" pos:end="6019:61">s</name><operator pos:start="6019:62" pos:end="6019:63">-&gt;</operator><name pos:start="6019:64" pos:end="6019:65">pc</name></name> <operator pos:start="6019:67" pos:end="6019:67">-</operator> <name pos:start="6019:69" pos:end="6019:76">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6021:21" pos:end="6021:31"><expr pos:start="6021:21" pos:end="6021:30"><call pos:start="6021:21" pos:end="6021:30"><name pos:start="6021:21" pos:end="6021:27">gen_eob</name><argument_list pos:start="6021:28" pos:end="6021:30">(<argument pos:start="6021:29" pos:end="6021:29"><expr pos:start="6021:29" pos:end="6021:29"><name pos:start="6021:29" pos:end="6021:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6023:21" pos:end="6023:26">break;</break>

                <default pos:start="6025:17" pos:end="6025:24">default:</default>

                    <goto pos:start="6027:21" pos:end="6027:36">goto <name pos:start="6027:26" pos:end="6027:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="6031:15" pos:end="6051:13">else <block pos:start="6031:20" pos:end="6051:13">{<block_content pos:start="6033:17" pos:end="6049:68"> <comment type="block" pos:start="6031:22" pos:end="6031:31">/* sidt */</comment>

                <expr_stmt pos:start="6033:17" pos:end="6033:73"><expr pos:start="6033:17" pos:end="6033:72"><call pos:start="6033:17" pos:end="6033:72"><name pos:start="6033:17" pos:end="6033:39">gen_svm_check_intercept</name><argument_list pos:start="6033:40" pos:end="6033:72">(<argument pos:start="6033:41" pos:end="6033:41"><expr pos:start="6033:41" pos:end="6033:41"><name pos:start="6033:41" pos:end="6033:41">s</name></expr></argument>, <argument pos:start="6033:44" pos:end="6033:51"><expr pos:start="6033:44" pos:end="6033:51"><name pos:start="6033:44" pos:end="6033:51">pc_start</name></expr></argument>, <argument pos:start="6033:54" pos:end="6033:71"><expr pos:start="6033:54" pos:end="6033:71"><name pos:start="6033:54" pos:end="6033:71">SVM_EXIT_IDTR_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6035:17" pos:end="6035:65"><expr pos:start="6035:17" pos:end="6035:64"><call pos:start="6035:17" pos:end="6035:64"><name pos:start="6035:17" pos:end="6035:29">gen_lea_modrm</name><argument_list pos:start="6035:30" pos:end="6035:64">(<argument pos:start="6035:31" pos:end="6035:31"><expr pos:start="6035:31" pos:end="6035:31"><name pos:start="6035:31" pos:end="6035:31">s</name></expr></argument>, <argument pos:start="6035:34" pos:end="6035:38"><expr pos:start="6035:34" pos:end="6035:38"><name pos:start="6035:34" pos:end="6035:38">modrm</name></expr></argument>, <argument pos:start="6035:41" pos:end="6035:49"><expr pos:start="6035:41" pos:end="6035:49"><operator pos:start="6035:41" pos:end="6035:41">&amp;</operator><name pos:start="6035:42" pos:end="6035:49">reg_addr</name></expr></argument>, <argument pos:start="6035:52" pos:end="6035:63"><expr pos:start="6035:52" pos:end="6035:63"><operator pos:start="6035:52" pos:end="6035:52">&amp;</operator><name pos:start="6035:53" pos:end="6035:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6037:17" pos:end="6037:86"><expr pos:start="6037:17" pos:end="6037:85"><call pos:start="6037:17" pos:end="6037:85"><name pos:start="6037:17" pos:end="6037:32">tcg_gen_ld32u_tl</name><argument_list pos:start="6037:33" pos:end="6037:85">(<argument pos:start="6037:34" pos:end="6037:41"><expr pos:start="6037:34" pos:end="6037:41"><name pos:start="6037:34" pos:end="6037:41"><name pos:start="6037:34" pos:end="6037:38">cpu_T</name><index pos:start="6037:39" pos:end="6037:41">[<expr pos:start="6037:40" pos:end="6037:40"><literal type="number" pos:start="6037:40" pos:end="6037:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6037:44" pos:end="6037:50"><expr pos:start="6037:44" pos:end="6037:50"><name pos:start="6037:44" pos:end="6037:50">cpu_env</name></expr></argument>, <argument pos:start="6037:53" pos:end="6037:84"><expr pos:start="6037:53" pos:end="6037:84"><call pos:start="6037:53" pos:end="6037:84"><name pos:start="6037:53" pos:end="6037:60">offsetof</name><argument_list pos:start="6037:61" pos:end="6037:84">(<argument pos:start="6037:62" pos:end="6037:72"><expr pos:start="6037:62" pos:end="6037:72"><name pos:start="6037:62" pos:end="6037:72">CPUX86State</name></expr></argument>, <argument pos:start="6037:75" pos:end="6037:83"><expr pos:start="6037:75" pos:end="6037:83"><name pos:start="6037:75" pos:end="6037:83"><name pos:start="6037:75" pos:end="6037:77">idt</name><operator pos:start="6037:78" pos:end="6037:78">.</operator><name pos:start="6037:79" pos:end="6037:83">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6039:17" pos:end="6039:56"><expr pos:start="6039:17" pos:end="6039:55"><call pos:start="6039:17" pos:end="6039:55"><name pos:start="6039:17" pos:end="6039:31">gen_op_st_T0_A0</name><argument_list pos:start="6039:32" pos:end="6039:55">(<argument pos:start="6039:33" pos:end="6039:54"><expr pos:start="6039:33" pos:end="6039:54"><name pos:start="6039:33" pos:end="6039:39">OT_WORD</name> <operator pos:start="6039:41" pos:end="6039:41">+</operator> <name pos:start="6039:43" pos:end="6039:54"><name pos:start="6039:43" pos:end="6039:43">s</name><operator pos:start="6039:44" pos:end="6039:45">-&gt;</operator><name pos:start="6039:46" pos:end="6039:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6041:17" pos:end="6041:36"><expr pos:start="6041:17" pos:end="6041:35"><call pos:start="6041:17" pos:end="6041:35"><name pos:start="6041:17" pos:end="6041:29">gen_add_A0_im</name><argument_list pos:start="6041:30" pos:end="6041:35">(<argument pos:start="6041:31" pos:end="6041:31"><expr pos:start="6041:31" pos:end="6041:31"><name pos:start="6041:31" pos:end="6041:31">s</name></expr></argument>, <argument pos:start="6041:34" pos:end="6041:34"><expr pos:start="6041:34" pos:end="6041:34"><literal type="number" pos:start="6041:34" pos:end="6041:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6043:17" pos:end="6043:82"><expr pos:start="6043:17" pos:end="6043:81"><call pos:start="6043:17" pos:end="6043:81"><name pos:start="6043:17" pos:end="6043:29">tcg_gen_ld_tl</name><argument_list pos:start="6043:30" pos:end="6043:81">(<argument pos:start="6043:31" pos:end="6043:38"><expr pos:start="6043:31" pos:end="6043:38"><name pos:start="6043:31" pos:end="6043:38"><name pos:start="6043:31" pos:end="6043:35">cpu_T</name><index pos:start="6043:36" pos:end="6043:38">[<expr pos:start="6043:37" pos:end="6043:37"><literal type="number" pos:start="6043:37" pos:end="6043:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6043:41" pos:end="6043:47"><expr pos:start="6043:41" pos:end="6043:47"><name pos:start="6043:41" pos:end="6043:47">cpu_env</name></expr></argument>, <argument pos:start="6043:50" pos:end="6043:80"><expr pos:start="6043:50" pos:end="6043:80"><call pos:start="6043:50" pos:end="6043:80"><name pos:start="6043:50" pos:end="6043:57">offsetof</name><argument_list pos:start="6043:58" pos:end="6043:80">(<argument pos:start="6043:59" pos:end="6043:69"><expr pos:start="6043:59" pos:end="6043:69"><name pos:start="6043:59" pos:end="6043:69">CPUX86State</name></expr></argument>, <argument pos:start="6043:72" pos:end="6043:79"><expr pos:start="6043:72" pos:end="6043:79"><name pos:start="6043:72" pos:end="6043:79"><name pos:start="6043:72" pos:end="6043:74">idt</name><operator pos:start="6043:75" pos:end="6043:75">.</operator><name pos:start="6043:76" pos:end="6043:79">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6045:17" pos:end="6047:48"><if pos:start="6045:17" pos:end="6047:48">if <condition pos:start="6045:20" pos:end="6045:30">(<expr pos:start="6045:21" pos:end="6045:29"><operator pos:start="6045:21" pos:end="6045:21">!</operator><name pos:start="6045:22" pos:end="6045:29"><name pos:start="6045:22" pos:end="6045:22">s</name><operator pos:start="6045:23" pos:end="6045:24">-&gt;</operator><name pos:start="6045:25" pos:end="6045:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="6047:21" pos:end="6047:48"><block_content pos:start="6047:21" pos:end="6047:48">

                    <expr_stmt pos:start="6047:21" pos:end="6047:48"><expr pos:start="6047:21" pos:end="6047:47"><call pos:start="6047:21" pos:end="6047:47"><name pos:start="6047:21" pos:end="6047:37">gen_op_andl_T0_im</name><argument_list pos:start="6047:38" pos:end="6047:47">(<argument pos:start="6047:39" pos:end="6047:46"><expr pos:start="6047:39" pos:end="6047:46"><literal type="number" pos:start="6047:39" pos:end="6047:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6049:17" pos:end="6049:68"><expr pos:start="6049:17" pos:end="6049:67"><call pos:start="6049:17" pos:end="6049:67"><name pos:start="6049:17" pos:end="6049:31">gen_op_st_T0_A0</name><argument_list pos:start="6049:32" pos:end="6049:67">(<argument pos:start="6049:33" pos:end="6049:66"><expr pos:start="6049:33" pos:end="6049:66"><call pos:start="6049:33" pos:end="6049:41"><name pos:start="6049:33" pos:end="6049:38">CODE64</name><argument_list pos:start="6049:39" pos:end="6049:41">(<argument pos:start="6049:40" pos:end="6049:40"><expr pos:start="6049:40" pos:end="6049:40"><name pos:start="6049:40" pos:end="6049:40">s</name></expr></argument>)</argument_list></call> <operator pos:start="6049:43" pos:end="6049:43">+</operator> <name pos:start="6049:45" pos:end="6049:51">OT_LONG</name> <operator pos:start="6049:53" pos:end="6049:53">+</operator> <name pos:start="6049:55" pos:end="6049:66"><name pos:start="6049:55" pos:end="6049:55">s</name><operator pos:start="6049:56" pos:end="6049:57">-&gt;</operator><name pos:start="6049:58" pos:end="6049:66">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6053:13" pos:end="6053:18">break;</break>

        <case pos:start="6055:9" pos:end="6055:15">case <expr pos:start="6055:14" pos:end="6055:14"><literal type="number" pos:start="6055:14" pos:end="6055:14">2</literal></expr>:</case> <comment type="block" pos:start="6055:17" pos:end="6055:26">/* lgdt */</comment>

        <case pos:start="6057:9" pos:end="6057:15">case <expr pos:start="6057:14" pos:end="6057:14"><literal type="number" pos:start="6057:14" pos:end="6057:14">3</literal></expr>:</case> <comment type="block" pos:start="6057:17" pos:end="6057:26">/* lidt */</comment>

            <if_stmt pos:start="6059:13" pos:end="6265:13"><if pos:start="6059:13" pos:end="6229:13">if <condition pos:start="6059:16" pos:end="6059:25">(<expr pos:start="6059:17" pos:end="6059:24"><name pos:start="6059:17" pos:end="6059:19">mod</name> <operator pos:start="6059:21" pos:end="6059:22">==</operator> <literal type="number" pos:start="6059:24" pos:end="6059:24">3</literal></expr>)</condition> <block pos:start="6059:27" pos:end="6229:13">{<block_content pos:start="6061:17" pos:end="6227:17">

                <if_stmt pos:start="6061:17" pos:end="6063:47"><if pos:start="6061:17" pos:end="6063:47">if <condition pos:start="6061:20" pos:end="6061:46">(<expr pos:start="6061:21" pos:end="6061:45"><name pos:start="6061:21" pos:end="6061:28"><name pos:start="6061:21" pos:end="6061:21">s</name><operator pos:start="6061:22" pos:end="6061:23">-&gt;</operator><name pos:start="6061:24" pos:end="6061:28">cc_op</name></name> <operator pos:start="6061:30" pos:end="6061:31">!=</operator> <name pos:start="6061:33" pos:end="6061:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6063:21" pos:end="6063:47"><block_content pos:start="6063:21" pos:end="6063:47">

                    <expr_stmt pos:start="6063:21" pos:end="6063:47"><expr pos:start="6063:21" pos:end="6063:46"><call pos:start="6063:21" pos:end="6063:46"><name pos:start="6063:21" pos:end="6063:36">gen_op_set_cc_op</name><argument_list pos:start="6063:37" pos:end="6063:46">(<argument pos:start="6063:38" pos:end="6063:45"><expr pos:start="6063:38" pos:end="6063:45"><name pos:start="6063:38" pos:end="6063:45"><name pos:start="6063:38" pos:end="6063:38">s</name><operator pos:start="6063:39" pos:end="6063:40">-&gt;</operator><name pos:start="6063:41" pos:end="6063:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6065:17" pos:end="6065:50"><expr pos:start="6065:17" pos:end="6065:49"><call pos:start="6065:17" pos:end="6065:49"><name pos:start="6065:17" pos:end="6065:26">gen_jmp_im</name><argument_list pos:start="6065:27" pos:end="6065:49">(<argument pos:start="6065:28" pos:end="6065:48"><expr pos:start="6065:28" pos:end="6065:48"><name pos:start="6065:28" pos:end="6065:35">pc_start</name> <operator pos:start="6065:37" pos:end="6065:37">-</operator> <name pos:start="6065:39" pos:end="6065:48"><name pos:start="6065:39" pos:end="6065:39">s</name><operator pos:start="6065:40" pos:end="6065:41">-&gt;</operator><name pos:start="6065:42" pos:end="6065:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="6067:17" pos:end="6227:17">switch<condition pos:start="6067:23" pos:end="6067:26">(<expr pos:start="6067:24" pos:end="6067:25"><name pos:start="6067:24" pos:end="6067:25">rm</name></expr>)</condition> <block pos:start="6067:28" pos:end="6227:17">{<block_content pos:start="6069:17" pos:end="6225:36">

                <case pos:start="6069:17" pos:end="6069:23">case <expr pos:start="6069:22" pos:end="6069:22"><literal type="number" pos:start="6069:22" pos:end="6069:22">0</literal></expr>:</case> <comment type="block" pos:start="6069:25" pos:end="6069:35">/* VMRUN */</comment>

                    <if_stmt pos:start="6071:21" pos:end="6073:40"><if pos:start="6071:21" pos:end="6073:40">if <condition pos:start="6071:24" pos:end="6071:61">(<expr pos:start="6071:25" pos:end="6071:60"><operator pos:start="6071:25" pos:end="6071:25">!</operator><operator pos:start="6071:26" pos:end="6071:26">(</operator><name pos:start="6071:27" pos:end="6071:34"><name pos:start="6071:27" pos:end="6071:27">s</name><operator pos:start="6071:28" pos:end="6071:29">-&gt;</operator><name pos:start="6071:30" pos:end="6071:34">flags</name></name> <operator pos:start="6071:36" pos:end="6071:36">&amp;</operator> <name pos:start="6071:38" pos:end="6071:49">HF_SVME_MASK</name><operator pos:start="6071:50" pos:end="6071:50">)</operator> <operator pos:start="6071:52" pos:end="6071:53">||</operator> <operator pos:start="6071:55" pos:end="6071:55">!</operator><name pos:start="6071:56" pos:end="6071:60"><name pos:start="6071:56" pos:end="6071:56">s</name><operator pos:start="6071:57" pos:end="6071:58">-&gt;</operator><name pos:start="6071:59" pos:end="6071:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6073:25" pos:end="6073:40"><block_content pos:start="6073:25" pos:end="6073:40">

                        <goto pos:start="6073:25" pos:end="6073:40">goto <name pos:start="6073:30" pos:end="6073:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6075:21" pos:end="6091:21"><if pos:start="6075:21" pos:end="6081:21">if <condition pos:start="6075:24" pos:end="6075:36">(<expr pos:start="6075:25" pos:end="6075:35"><name pos:start="6075:25" pos:end="6075:30"><name pos:start="6075:25" pos:end="6075:25">s</name><operator pos:start="6075:26" pos:end="6075:27">-&gt;</operator><name pos:start="6075:28" pos:end="6075:30">cpl</name></name> <operator pos:start="6075:32" pos:end="6075:33">!=</operator> <literal type="number" pos:start="6075:35" pos:end="6075:35">0</literal></expr>)</condition> <block pos:start="6075:38" pos:end="6081:21">{<block_content pos:start="6077:25" pos:end="6079:30">

                        <expr_stmt pos:start="6077:25" pos:end="6077:76"><expr pos:start="6077:25" pos:end="6077:75"><call pos:start="6077:25" pos:end="6077:75"><name pos:start="6077:25" pos:end="6077:37">gen_exception</name><argument_list pos:start="6077:38" pos:end="6077:75">(<argument pos:start="6077:39" pos:end="6077:39"><expr pos:start="6077:39" pos:end="6077:39"><name pos:start="6077:39" pos:end="6077:39">s</name></expr></argument>, <argument pos:start="6077:42" pos:end="6077:51"><expr pos:start="6077:42" pos:end="6077:51"><name pos:start="6077:42" pos:end="6077:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6077:54" pos:end="6077:74"><expr pos:start="6077:54" pos:end="6077:74"><name pos:start="6077:54" pos:end="6077:61">pc_start</name> <operator pos:start="6077:63" pos:end="6077:63">-</operator> <name pos:start="6077:65" pos:end="6077:74"><name pos:start="6077:65" pos:end="6077:65">s</name><operator pos:start="6077:66" pos:end="6077:67">-&gt;</operator><name pos:start="6077:68" pos:end="6077:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6079:25" pos:end="6079:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6081:23" pos:end="6091:21">else <block pos:start="6081:28" pos:end="6091:21">{<block_content pos:start="6083:25" pos:end="6089:50">

                        <expr_stmt pos:start="6083:25" pos:end="6085:74"><expr pos:start="6083:25" pos:end="6085:73"><call pos:start="6083:25" pos:end="6085:73"><name pos:start="6083:25" pos:end="6083:40">gen_helper_vmrun</name><argument_list pos:start="6083:41" pos:end="6085:73">(<argument pos:start="6083:42" pos:end="6083:48"><expr pos:start="6083:42" pos:end="6083:48"><name pos:start="6083:42" pos:end="6083:48">cpu_env</name></expr></argument>, <argument pos:start="6083:51" pos:end="6083:73"><expr pos:start="6083:51" pos:end="6083:73"><call pos:start="6083:51" pos:end="6083:73"><name pos:start="6083:51" pos:end="6083:63">tcg_const_i32</name><argument_list pos:start="6083:64" pos:end="6083:73">(<argument pos:start="6083:65" pos:end="6083:72"><expr pos:start="6083:65" pos:end="6083:72"><name pos:start="6083:65" pos:end="6083:72"><name pos:start="6083:65" pos:end="6083:65">s</name><operator pos:start="6083:66" pos:end="6083:67">-&gt;</operator><name pos:start="6083:68" pos:end="6083:72">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="6085:42" pos:end="6085:72"><expr pos:start="6085:42" pos:end="6085:72"><call pos:start="6085:42" pos:end="6085:72"><name pos:start="6085:42" pos:end="6085:54">tcg_const_i32</name><argument_list pos:start="6085:55" pos:end="6085:72">(<argument pos:start="6085:56" pos:end="6085:71"><expr pos:start="6085:56" pos:end="6085:71"><name pos:start="6085:56" pos:end="6085:60"><name pos:start="6085:56" pos:end="6085:56">s</name><operator pos:start="6085:57" pos:end="6085:58">-&gt;</operator><name pos:start="6085:59" pos:end="6085:60">pc</name></name> <operator pos:start="6085:62" pos:end="6085:62">-</operator> <name pos:start="6085:64" pos:end="6085:71">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6087:25" pos:end="6087:43"><expr pos:start="6087:25" pos:end="6087:42"><call pos:start="6087:25" pos:end="6087:42"><name pos:start="6087:25" pos:end="6087:39">tcg_gen_exit_tb</name><argument_list pos:start="6087:40" pos:end="6087:42">(<argument pos:start="6087:41" pos:end="6087:41"><expr pos:start="6087:41" pos:end="6087:41"><literal type="number" pos:start="6087:41" pos:end="6087:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6089:25" pos:end="6089:50"><expr pos:start="6089:25" pos:end="6089:49"><name pos:start="6089:25" pos:end="6089:33"><name pos:start="6089:25" pos:end="6089:25">s</name><operator pos:start="6089:26" pos:end="6089:27">-&gt;</operator><name pos:start="6089:28" pos:end="6089:33">is_jmp</name></name> <operator pos:start="6089:35" pos:end="6089:35">=</operator> <name pos:start="6089:37" pos:end="6089:49">DISAS_TB_JUMP</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6093:21" pos:end="6093:26">break;</break>

                <case pos:start="6095:17" pos:end="6095:23">case <expr pos:start="6095:22" pos:end="6095:22"><literal type="number" pos:start="6095:22" pos:end="6095:22">1</literal></expr>:</case> <comment type="block" pos:start="6095:25" pos:end="6095:37">/* VMMCALL */</comment>

                    <if_stmt pos:start="6097:21" pos:end="6099:40"><if pos:start="6097:21" pos:end="6099:40">if <condition pos:start="6097:24" pos:end="6097:51">(<expr pos:start="6097:25" pos:end="6097:50"><operator pos:start="6097:25" pos:end="6097:25">!</operator><operator pos:start="6097:26" pos:end="6097:26">(</operator><name pos:start="6097:27" pos:end="6097:34"><name pos:start="6097:27" pos:end="6097:27">s</name><operator pos:start="6097:28" pos:end="6097:29">-&gt;</operator><name pos:start="6097:30" pos:end="6097:34">flags</name></name> <operator pos:start="6097:36" pos:end="6097:36">&amp;</operator> <name pos:start="6097:38" pos:end="6097:49">HF_SVME_MASK</name><operator pos:start="6097:50" pos:end="6097:50">)</operator></expr>)</condition><block type="pseudo" pos:start="6099:25" pos:end="6099:40"><block_content pos:start="6099:25" pos:end="6099:40">

                        <goto pos:start="6099:25" pos:end="6099:40">goto <name pos:start="6099:30" pos:end="6099:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6101:21" pos:end="6101:48"><expr pos:start="6101:21" pos:end="6101:47"><call pos:start="6101:21" pos:end="6101:47"><name pos:start="6101:21" pos:end="6101:38">gen_helper_vmmcall</name><argument_list pos:start="6101:39" pos:end="6101:47">(<argument pos:start="6101:40" pos:end="6101:46"><expr pos:start="6101:40" pos:end="6101:46"><name pos:start="6101:40" pos:end="6101:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6103:21" pos:end="6103:26">break;</break>

                <case pos:start="6105:17" pos:end="6105:23">case <expr pos:start="6105:22" pos:end="6105:22"><literal type="number" pos:start="6105:22" pos:end="6105:22">2</literal></expr>:</case> <comment type="block" pos:start="6105:25" pos:end="6105:36">/* VMLOAD */</comment>

                    <if_stmt pos:start="6107:21" pos:end="6109:40"><if pos:start="6107:21" pos:end="6109:40">if <condition pos:start="6107:24" pos:end="6107:61">(<expr pos:start="6107:25" pos:end="6107:60"><operator pos:start="6107:25" pos:end="6107:25">!</operator><operator pos:start="6107:26" pos:end="6107:26">(</operator><name pos:start="6107:27" pos:end="6107:34"><name pos:start="6107:27" pos:end="6107:27">s</name><operator pos:start="6107:28" pos:end="6107:29">-&gt;</operator><name pos:start="6107:30" pos:end="6107:34">flags</name></name> <operator pos:start="6107:36" pos:end="6107:36">&amp;</operator> <name pos:start="6107:38" pos:end="6107:49">HF_SVME_MASK</name><operator pos:start="6107:50" pos:end="6107:50">)</operator> <operator pos:start="6107:52" pos:end="6107:53">||</operator> <operator pos:start="6107:55" pos:end="6107:55">!</operator><name pos:start="6107:56" pos:end="6107:60"><name pos:start="6107:56" pos:end="6107:56">s</name><operator pos:start="6107:57" pos:end="6107:58">-&gt;</operator><name pos:start="6107:59" pos:end="6107:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6109:25" pos:end="6109:40"><block_content pos:start="6109:25" pos:end="6109:40">

                        <goto pos:start="6109:25" pos:end="6109:40">goto <name pos:start="6109:30" pos:end="6109:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6111:21" pos:end="6121:21"><if pos:start="6111:21" pos:end="6117:21">if <condition pos:start="6111:24" pos:end="6111:36">(<expr pos:start="6111:25" pos:end="6111:35"><name pos:start="6111:25" pos:end="6111:30"><name pos:start="6111:25" pos:end="6111:25">s</name><operator pos:start="6111:26" pos:end="6111:27">-&gt;</operator><name pos:start="6111:28" pos:end="6111:30">cpl</name></name> <operator pos:start="6111:32" pos:end="6111:33">!=</operator> <literal type="number" pos:start="6111:35" pos:end="6111:35">0</literal></expr>)</condition> <block pos:start="6111:38" pos:end="6117:21">{<block_content pos:start="6113:25" pos:end="6115:30">

                        <expr_stmt pos:start="6113:25" pos:end="6113:76"><expr pos:start="6113:25" pos:end="6113:75"><call pos:start="6113:25" pos:end="6113:75"><name pos:start="6113:25" pos:end="6113:37">gen_exception</name><argument_list pos:start="6113:38" pos:end="6113:75">(<argument pos:start="6113:39" pos:end="6113:39"><expr pos:start="6113:39" pos:end="6113:39"><name pos:start="6113:39" pos:end="6113:39">s</name></expr></argument>, <argument pos:start="6113:42" pos:end="6113:51"><expr pos:start="6113:42" pos:end="6113:51"><name pos:start="6113:42" pos:end="6113:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6113:54" pos:end="6113:74"><expr pos:start="6113:54" pos:end="6113:74"><name pos:start="6113:54" pos:end="6113:61">pc_start</name> <operator pos:start="6113:63" pos:end="6113:63">-</operator> <name pos:start="6113:65" pos:end="6113:74"><name pos:start="6113:65" pos:end="6113:65">s</name><operator pos:start="6113:66" pos:end="6113:67">-&gt;</operator><name pos:start="6113:68" pos:end="6113:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6115:25" pos:end="6115:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6117:23" pos:end="6121:21">else <block pos:start="6117:28" pos:end="6121:21">{<block_content pos:start="6119:25" pos:end="6119:76">

                        <expr_stmt pos:start="6119:25" pos:end="6119:76"><expr pos:start="6119:25" pos:end="6119:75"><call pos:start="6119:25" pos:end="6119:75"><name pos:start="6119:25" pos:end="6119:41">gen_helper_vmload</name><argument_list pos:start="6119:42" pos:end="6119:75">(<argument pos:start="6119:43" pos:end="6119:49"><expr pos:start="6119:43" pos:end="6119:49"><name pos:start="6119:43" pos:end="6119:49">cpu_env</name></expr></argument>, <argument pos:start="6119:52" pos:end="6119:74"><expr pos:start="6119:52" pos:end="6119:74"><call pos:start="6119:52" pos:end="6119:74"><name pos:start="6119:52" pos:end="6119:64">tcg_const_i32</name><argument_list pos:start="6119:65" pos:end="6119:74">(<argument pos:start="6119:66" pos:end="6119:73"><expr pos:start="6119:66" pos:end="6119:73"><name pos:start="6119:66" pos:end="6119:73"><name pos:start="6119:66" pos:end="6119:66">s</name><operator pos:start="6119:67" pos:end="6119:68">-&gt;</operator><name pos:start="6119:69" pos:end="6119:73">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6123:21" pos:end="6123:26">break;</break>

                <case pos:start="6125:17" pos:end="6125:23">case <expr pos:start="6125:22" pos:end="6125:22"><literal type="number" pos:start="6125:22" pos:end="6125:22">3</literal></expr>:</case> <comment type="block" pos:start="6125:25" pos:end="6125:36">/* VMSAVE */</comment>

                    <if_stmt pos:start="6127:21" pos:end="6129:40"><if pos:start="6127:21" pos:end="6129:40">if <condition pos:start="6127:24" pos:end="6127:61">(<expr pos:start="6127:25" pos:end="6127:60"><operator pos:start="6127:25" pos:end="6127:25">!</operator><operator pos:start="6127:26" pos:end="6127:26">(</operator><name pos:start="6127:27" pos:end="6127:34"><name pos:start="6127:27" pos:end="6127:27">s</name><operator pos:start="6127:28" pos:end="6127:29">-&gt;</operator><name pos:start="6127:30" pos:end="6127:34">flags</name></name> <operator pos:start="6127:36" pos:end="6127:36">&amp;</operator> <name pos:start="6127:38" pos:end="6127:49">HF_SVME_MASK</name><operator pos:start="6127:50" pos:end="6127:50">)</operator> <operator pos:start="6127:52" pos:end="6127:53">||</operator> <operator pos:start="6127:55" pos:end="6127:55">!</operator><name pos:start="6127:56" pos:end="6127:60"><name pos:start="6127:56" pos:end="6127:56">s</name><operator pos:start="6127:57" pos:end="6127:58">-&gt;</operator><name pos:start="6127:59" pos:end="6127:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6129:25" pos:end="6129:40"><block_content pos:start="6129:25" pos:end="6129:40">

                        <goto pos:start="6129:25" pos:end="6129:40">goto <name pos:start="6129:30" pos:end="6129:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6131:21" pos:end="6141:21"><if pos:start="6131:21" pos:end="6137:21">if <condition pos:start="6131:24" pos:end="6131:36">(<expr pos:start="6131:25" pos:end="6131:35"><name pos:start="6131:25" pos:end="6131:30"><name pos:start="6131:25" pos:end="6131:25">s</name><operator pos:start="6131:26" pos:end="6131:27">-&gt;</operator><name pos:start="6131:28" pos:end="6131:30">cpl</name></name> <operator pos:start="6131:32" pos:end="6131:33">!=</operator> <literal type="number" pos:start="6131:35" pos:end="6131:35">0</literal></expr>)</condition> <block pos:start="6131:38" pos:end="6137:21">{<block_content pos:start="6133:25" pos:end="6135:30">

                        <expr_stmt pos:start="6133:25" pos:end="6133:76"><expr pos:start="6133:25" pos:end="6133:75"><call pos:start="6133:25" pos:end="6133:75"><name pos:start="6133:25" pos:end="6133:37">gen_exception</name><argument_list pos:start="6133:38" pos:end="6133:75">(<argument pos:start="6133:39" pos:end="6133:39"><expr pos:start="6133:39" pos:end="6133:39"><name pos:start="6133:39" pos:end="6133:39">s</name></expr></argument>, <argument pos:start="6133:42" pos:end="6133:51"><expr pos:start="6133:42" pos:end="6133:51"><name pos:start="6133:42" pos:end="6133:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6133:54" pos:end="6133:74"><expr pos:start="6133:54" pos:end="6133:74"><name pos:start="6133:54" pos:end="6133:61">pc_start</name> <operator pos:start="6133:63" pos:end="6133:63">-</operator> <name pos:start="6133:65" pos:end="6133:74"><name pos:start="6133:65" pos:end="6133:65">s</name><operator pos:start="6133:66" pos:end="6133:67">-&gt;</operator><name pos:start="6133:68" pos:end="6133:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6135:25" pos:end="6135:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6137:23" pos:end="6141:21">else <block pos:start="6137:28" pos:end="6141:21">{<block_content pos:start="6139:25" pos:end="6139:76">

                        <expr_stmt pos:start="6139:25" pos:end="6139:76"><expr pos:start="6139:25" pos:end="6139:75"><call pos:start="6139:25" pos:end="6139:75"><name pos:start="6139:25" pos:end="6139:41">gen_helper_vmsave</name><argument_list pos:start="6139:42" pos:end="6139:75">(<argument pos:start="6139:43" pos:end="6139:49"><expr pos:start="6139:43" pos:end="6139:49"><name pos:start="6139:43" pos:end="6139:49">cpu_env</name></expr></argument>, <argument pos:start="6139:52" pos:end="6139:74"><expr pos:start="6139:52" pos:end="6139:74"><call pos:start="6139:52" pos:end="6139:74"><name pos:start="6139:52" pos:end="6139:64">tcg_const_i32</name><argument_list pos:start="6139:65" pos:end="6139:74">(<argument pos:start="6139:66" pos:end="6139:73"><expr pos:start="6139:66" pos:end="6139:73"><name pos:start="6139:66" pos:end="6139:73"><name pos:start="6139:66" pos:end="6139:66">s</name><operator pos:start="6139:67" pos:end="6139:68">-&gt;</operator><name pos:start="6139:69" pos:end="6139:73">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6143:21" pos:end="6143:26">break;</break>

                <case pos:start="6145:17" pos:end="6145:23">case <expr pos:start="6145:22" pos:end="6145:22"><literal type="number" pos:start="6145:22" pos:end="6145:22">4</literal></expr>:</case> <comment type="block" pos:start="6145:25" pos:end="6145:34">/* STGI */</comment>

                    <if_stmt pos:start="6147:21" pos:end="6153:40"><if pos:start="6147:21" pos:end="6153:40">if <condition pos:start="6147:24" pos:end="6151:31">(<expr pos:start="6147:25" pos:end="6151:30"><operator pos:start="6147:25" pos:end="6147:25">(</operator><operator pos:start="6147:26" pos:end="6147:26">!</operator><operator pos:start="6147:27" pos:end="6147:27">(</operator><name pos:start="6147:28" pos:end="6147:35"><name pos:start="6147:28" pos:end="6147:28">s</name><operator pos:start="6147:29" pos:end="6147:30">-&gt;</operator><name pos:start="6147:31" pos:end="6147:35">flags</name></name> <operator pos:start="6147:37" pos:end="6147:37">&amp;</operator> <name pos:start="6147:39" pos:end="6147:50">HF_SVME_MASK</name><operator pos:start="6147:51" pos:end="6147:51">)</operator> <operator pos:start="6147:53" pos:end="6147:54">&amp;&amp;</operator>

                         <operator pos:start="6149:26" pos:end="6149:26">!</operator><operator pos:start="6149:27" pos:end="6149:27">(</operator><name pos:start="6149:28" pos:end="6149:49"><name pos:start="6149:28" pos:end="6149:28">s</name><operator pos:start="6149:29" pos:end="6149:30">-&gt;</operator><name pos:start="6149:31" pos:end="6149:49">cpuid_ext3_features</name></name> <operator pos:start="6149:51" pos:end="6149:51">&amp;</operator> <name pos:start="6149:53" pos:end="6149:69">CPUID_EXT3_SKINIT</name><operator pos:start="6149:70" pos:end="6149:70">)</operator><operator pos:start="6149:71" pos:end="6149:71">)</operator> <operator pos:start="6149:73" pos:end="6149:74">||</operator> 

                        <operator pos:start="6151:25" pos:end="6151:25">!</operator><name pos:start="6151:26" pos:end="6151:30"><name pos:start="6151:26" pos:end="6151:26">s</name><operator pos:start="6151:27" pos:end="6151:28">-&gt;</operator><name pos:start="6151:29" pos:end="6151:30">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6153:25" pos:end="6153:40"><block_content pos:start="6153:25" pos:end="6153:40">

                        <goto pos:start="6153:25" pos:end="6153:40">goto <name pos:start="6153:30" pos:end="6153:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6155:21" pos:end="6165:21"><if pos:start="6155:21" pos:end="6161:21">if <condition pos:start="6155:24" pos:end="6155:36">(<expr pos:start="6155:25" pos:end="6155:35"><name pos:start="6155:25" pos:end="6155:30"><name pos:start="6155:25" pos:end="6155:25">s</name><operator pos:start="6155:26" pos:end="6155:27">-&gt;</operator><name pos:start="6155:28" pos:end="6155:30">cpl</name></name> <operator pos:start="6155:32" pos:end="6155:33">!=</operator> <literal type="number" pos:start="6155:35" pos:end="6155:35">0</literal></expr>)</condition> <block pos:start="6155:38" pos:end="6161:21">{<block_content pos:start="6157:25" pos:end="6159:30">

                        <expr_stmt pos:start="6157:25" pos:end="6157:76"><expr pos:start="6157:25" pos:end="6157:75"><call pos:start="6157:25" pos:end="6157:75"><name pos:start="6157:25" pos:end="6157:37">gen_exception</name><argument_list pos:start="6157:38" pos:end="6157:75">(<argument pos:start="6157:39" pos:end="6157:39"><expr pos:start="6157:39" pos:end="6157:39"><name pos:start="6157:39" pos:end="6157:39">s</name></expr></argument>, <argument pos:start="6157:42" pos:end="6157:51"><expr pos:start="6157:42" pos:end="6157:51"><name pos:start="6157:42" pos:end="6157:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6157:54" pos:end="6157:74"><expr pos:start="6157:54" pos:end="6157:74"><name pos:start="6157:54" pos:end="6157:61">pc_start</name> <operator pos:start="6157:63" pos:end="6157:63">-</operator> <name pos:start="6157:65" pos:end="6157:74"><name pos:start="6157:65" pos:end="6157:65">s</name><operator pos:start="6157:66" pos:end="6157:67">-&gt;</operator><name pos:start="6157:68" pos:end="6157:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6159:25" pos:end="6159:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6161:23" pos:end="6165:21">else <block pos:start="6161:28" pos:end="6165:21">{<block_content pos:start="6163:25" pos:end="6163:49">

                        <expr_stmt pos:start="6163:25" pos:end="6163:49"><expr pos:start="6163:25" pos:end="6163:48"><call pos:start="6163:25" pos:end="6163:48"><name pos:start="6163:25" pos:end="6163:39">gen_helper_stgi</name><argument_list pos:start="6163:40" pos:end="6163:48">(<argument pos:start="6163:41" pos:end="6163:47"><expr pos:start="6163:41" pos:end="6163:47"><name pos:start="6163:41" pos:end="6163:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6167:21" pos:end="6167:26">break;</break>

                <case pos:start="6169:17" pos:end="6169:23">case <expr pos:start="6169:22" pos:end="6169:22"><literal type="number" pos:start="6169:22" pos:end="6169:22">5</literal></expr>:</case> <comment type="block" pos:start="6169:25" pos:end="6169:34">/* CLGI */</comment>

                    <if_stmt pos:start="6171:21" pos:end="6173:40"><if pos:start="6171:21" pos:end="6173:40">if <condition pos:start="6171:24" pos:end="6171:61">(<expr pos:start="6171:25" pos:end="6171:60"><operator pos:start="6171:25" pos:end="6171:25">!</operator><operator pos:start="6171:26" pos:end="6171:26">(</operator><name pos:start="6171:27" pos:end="6171:34"><name pos:start="6171:27" pos:end="6171:27">s</name><operator pos:start="6171:28" pos:end="6171:29">-&gt;</operator><name pos:start="6171:30" pos:end="6171:34">flags</name></name> <operator pos:start="6171:36" pos:end="6171:36">&amp;</operator> <name pos:start="6171:38" pos:end="6171:49">HF_SVME_MASK</name><operator pos:start="6171:50" pos:end="6171:50">)</operator> <operator pos:start="6171:52" pos:end="6171:53">||</operator> <operator pos:start="6171:55" pos:end="6171:55">!</operator><name pos:start="6171:56" pos:end="6171:60"><name pos:start="6171:56" pos:end="6171:56">s</name><operator pos:start="6171:57" pos:end="6171:58">-&gt;</operator><name pos:start="6171:59" pos:end="6171:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6173:25" pos:end="6173:40"><block_content pos:start="6173:25" pos:end="6173:40">

                        <goto pos:start="6173:25" pos:end="6173:40">goto <name pos:start="6173:30" pos:end="6173:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6175:21" pos:end="6185:21"><if pos:start="6175:21" pos:end="6181:21">if <condition pos:start="6175:24" pos:end="6175:36">(<expr pos:start="6175:25" pos:end="6175:35"><name pos:start="6175:25" pos:end="6175:30"><name pos:start="6175:25" pos:end="6175:25">s</name><operator pos:start="6175:26" pos:end="6175:27">-&gt;</operator><name pos:start="6175:28" pos:end="6175:30">cpl</name></name> <operator pos:start="6175:32" pos:end="6175:33">!=</operator> <literal type="number" pos:start="6175:35" pos:end="6175:35">0</literal></expr>)</condition> <block pos:start="6175:38" pos:end="6181:21">{<block_content pos:start="6177:25" pos:end="6179:30">

                        <expr_stmt pos:start="6177:25" pos:end="6177:76"><expr pos:start="6177:25" pos:end="6177:75"><call pos:start="6177:25" pos:end="6177:75"><name pos:start="6177:25" pos:end="6177:37">gen_exception</name><argument_list pos:start="6177:38" pos:end="6177:75">(<argument pos:start="6177:39" pos:end="6177:39"><expr pos:start="6177:39" pos:end="6177:39"><name pos:start="6177:39" pos:end="6177:39">s</name></expr></argument>, <argument pos:start="6177:42" pos:end="6177:51"><expr pos:start="6177:42" pos:end="6177:51"><name pos:start="6177:42" pos:end="6177:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6177:54" pos:end="6177:74"><expr pos:start="6177:54" pos:end="6177:74"><name pos:start="6177:54" pos:end="6177:61">pc_start</name> <operator pos:start="6177:63" pos:end="6177:63">-</operator> <name pos:start="6177:65" pos:end="6177:74"><name pos:start="6177:65" pos:end="6177:65">s</name><operator pos:start="6177:66" pos:end="6177:67">-&gt;</operator><name pos:start="6177:68" pos:end="6177:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6179:25" pos:end="6179:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6181:23" pos:end="6185:21">else <block pos:start="6181:28" pos:end="6185:21">{<block_content pos:start="6183:25" pos:end="6183:49">

                        <expr_stmt pos:start="6183:25" pos:end="6183:49"><expr pos:start="6183:25" pos:end="6183:48"><call pos:start="6183:25" pos:end="6183:48"><name pos:start="6183:25" pos:end="6183:39">gen_helper_clgi</name><argument_list pos:start="6183:40" pos:end="6183:48">(<argument pos:start="6183:41" pos:end="6183:47"><expr pos:start="6183:41" pos:end="6183:47"><name pos:start="6183:41" pos:end="6183:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6187:21" pos:end="6187:26">break;</break>

                <case pos:start="6189:17" pos:end="6189:23">case <expr pos:start="6189:22" pos:end="6189:22"><literal type="number" pos:start="6189:22" pos:end="6189:22">6</literal></expr>:</case> <comment type="block" pos:start="6189:25" pos:end="6189:36">/* SKINIT */</comment>

                    <if_stmt pos:start="6191:21" pos:end="6197:40"><if pos:start="6191:21" pos:end="6197:40">if <condition pos:start="6191:24" pos:end="6195:31">(<expr pos:start="6191:25" pos:end="6195:30"><operator pos:start="6191:25" pos:end="6191:25">(</operator><operator pos:start="6191:26" pos:end="6191:26">!</operator><operator pos:start="6191:27" pos:end="6191:27">(</operator><name pos:start="6191:28" pos:end="6191:35"><name pos:start="6191:28" pos:end="6191:28">s</name><operator pos:start="6191:29" pos:end="6191:30">-&gt;</operator><name pos:start="6191:31" pos:end="6191:35">flags</name></name> <operator pos:start="6191:37" pos:end="6191:37">&amp;</operator> <name pos:start="6191:39" pos:end="6191:50">HF_SVME_MASK</name><operator pos:start="6191:51" pos:end="6191:51">)</operator> <operator pos:start="6191:53" pos:end="6191:54">&amp;&amp;</operator> 

                         <operator pos:start="6193:26" pos:end="6193:26">!</operator><operator pos:start="6193:27" pos:end="6193:27">(</operator><name pos:start="6193:28" pos:end="6193:49"><name pos:start="6193:28" pos:end="6193:28">s</name><operator pos:start="6193:29" pos:end="6193:30">-&gt;</operator><name pos:start="6193:31" pos:end="6193:49">cpuid_ext3_features</name></name> <operator pos:start="6193:51" pos:end="6193:51">&amp;</operator> <name pos:start="6193:53" pos:end="6193:69">CPUID_EXT3_SKINIT</name><operator pos:start="6193:70" pos:end="6193:70">)</operator><operator pos:start="6193:71" pos:end="6193:71">)</operator> <operator pos:start="6193:73" pos:end="6193:74">||</operator> 

                        <operator pos:start="6195:25" pos:end="6195:25">!</operator><name pos:start="6195:26" pos:end="6195:30"><name pos:start="6195:26" pos:end="6195:26">s</name><operator pos:start="6195:27" pos:end="6195:28">-&gt;</operator><name pos:start="6195:29" pos:end="6195:30">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6197:25" pos:end="6197:40"><block_content pos:start="6197:25" pos:end="6197:40">

                        <goto pos:start="6197:25" pos:end="6197:40">goto <name pos:start="6197:30" pos:end="6197:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6199:21" pos:end="6199:47"><expr pos:start="6199:21" pos:end="6199:46"><call pos:start="6199:21" pos:end="6199:46"><name pos:start="6199:21" pos:end="6199:37">gen_helper_skinit</name><argument_list pos:start="6199:38" pos:end="6199:46">(<argument pos:start="6199:39" pos:end="6199:45"><expr pos:start="6199:39" pos:end="6199:45"><name pos:start="6199:39" pos:end="6199:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="6201:21" pos:end="6201:26">break;</break>

                <case pos:start="6203:17" pos:end="6203:23">case <expr pos:start="6203:22" pos:end="6203:22"><literal type="number" pos:start="6203:22" pos:end="6203:22">7</literal></expr>:</case> <comment type="block" pos:start="6203:25" pos:end="6203:37">/* INVLPGA */</comment>

                    <if_stmt pos:start="6205:21" pos:end="6207:40"><if pos:start="6205:21" pos:end="6207:40">if <condition pos:start="6205:24" pos:end="6205:61">(<expr pos:start="6205:25" pos:end="6205:60"><operator pos:start="6205:25" pos:end="6205:25">!</operator><operator pos:start="6205:26" pos:end="6205:26">(</operator><name pos:start="6205:27" pos:end="6205:34"><name pos:start="6205:27" pos:end="6205:27">s</name><operator pos:start="6205:28" pos:end="6205:29">-&gt;</operator><name pos:start="6205:30" pos:end="6205:34">flags</name></name> <operator pos:start="6205:36" pos:end="6205:36">&amp;</operator> <name pos:start="6205:38" pos:end="6205:49">HF_SVME_MASK</name><operator pos:start="6205:50" pos:end="6205:50">)</operator> <operator pos:start="6205:52" pos:end="6205:53">||</operator> <operator pos:start="6205:55" pos:end="6205:55">!</operator><name pos:start="6205:56" pos:end="6205:60"><name pos:start="6205:56" pos:end="6205:56">s</name><operator pos:start="6205:57" pos:end="6205:58">-&gt;</operator><name pos:start="6205:59" pos:end="6205:60">pe</name></name></expr>)</condition><block type="pseudo" pos:start="6207:25" pos:end="6207:40"><block_content pos:start="6207:25" pos:end="6207:40">

                        <goto pos:start="6207:25" pos:end="6207:40">goto <name pos:start="6207:30" pos:end="6207:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6209:21" pos:end="6219:21"><if pos:start="6209:21" pos:end="6215:21">if <condition pos:start="6209:24" pos:end="6209:36">(<expr pos:start="6209:25" pos:end="6209:35"><name pos:start="6209:25" pos:end="6209:30"><name pos:start="6209:25" pos:end="6209:25">s</name><operator pos:start="6209:26" pos:end="6209:27">-&gt;</operator><name pos:start="6209:28" pos:end="6209:30">cpl</name></name> <operator pos:start="6209:32" pos:end="6209:33">!=</operator> <literal type="number" pos:start="6209:35" pos:end="6209:35">0</literal></expr>)</condition> <block pos:start="6209:38" pos:end="6215:21">{<block_content pos:start="6211:25" pos:end="6213:30">

                        <expr_stmt pos:start="6211:25" pos:end="6211:76"><expr pos:start="6211:25" pos:end="6211:75"><call pos:start="6211:25" pos:end="6211:75"><name pos:start="6211:25" pos:end="6211:37">gen_exception</name><argument_list pos:start="6211:38" pos:end="6211:75">(<argument pos:start="6211:39" pos:end="6211:39"><expr pos:start="6211:39" pos:end="6211:39"><name pos:start="6211:39" pos:end="6211:39">s</name></expr></argument>, <argument pos:start="6211:42" pos:end="6211:51"><expr pos:start="6211:42" pos:end="6211:51"><name pos:start="6211:42" pos:end="6211:51">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6211:54" pos:end="6211:74"><expr pos:start="6211:54" pos:end="6211:74"><name pos:start="6211:54" pos:end="6211:61">pc_start</name> <operator pos:start="6211:63" pos:end="6211:63">-</operator> <name pos:start="6211:65" pos:end="6211:74"><name pos:start="6211:65" pos:end="6211:65">s</name><operator pos:start="6211:66" pos:end="6211:67">-&gt;</operator><name pos:start="6211:68" pos:end="6211:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="6213:25" pos:end="6213:30">break;</break>

                    </block_content>}</block></if> <else pos:start="6215:23" pos:end="6219:21">else <block pos:start="6215:28" pos:end="6219:21">{<block_content pos:start="6217:25" pos:end="6217:77">

                        <expr_stmt pos:start="6217:25" pos:end="6217:77"><expr pos:start="6217:25" pos:end="6217:76"><call pos:start="6217:25" pos:end="6217:76"><name pos:start="6217:25" pos:end="6217:42">gen_helper_invlpga</name><argument_list pos:start="6217:43" pos:end="6217:76">(<argument pos:start="6217:44" pos:end="6217:50"><expr pos:start="6217:44" pos:end="6217:50"><name pos:start="6217:44" pos:end="6217:50">cpu_env</name></expr></argument>, <argument pos:start="6217:53" pos:end="6217:75"><expr pos:start="6217:53" pos:end="6217:75"><call pos:start="6217:53" pos:end="6217:75"><name pos:start="6217:53" pos:end="6217:65">tcg_const_i32</name><argument_list pos:start="6217:66" pos:end="6217:75">(<argument pos:start="6217:67" pos:end="6217:74"><expr pos:start="6217:67" pos:end="6217:74"><name pos:start="6217:67" pos:end="6217:74"><name pos:start="6217:67" pos:end="6217:67">s</name><operator pos:start="6217:68" pos:end="6217:69">-&gt;</operator><name pos:start="6217:70" pos:end="6217:74">aflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6221:21" pos:end="6221:26">break;</break>

                <default pos:start="6223:17" pos:end="6223:24">default:</default>

                    <goto pos:start="6225:21" pos:end="6225:36">goto <name pos:start="6225:26" pos:end="6225:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="6229:15" pos:end="6233:13">else if <condition pos:start="6229:23" pos:end="6229:35">(<expr pos:start="6229:24" pos:end="6229:34"><name pos:start="6229:24" pos:end="6229:29"><name pos:start="6229:24" pos:end="6229:24">s</name><operator pos:start="6229:25" pos:end="6229:26">-&gt;</operator><name pos:start="6229:27" pos:end="6229:29">cpl</name></name> <operator pos:start="6229:31" pos:end="6229:32">!=</operator> <literal type="number" pos:start="6229:34" pos:end="6229:34">0</literal></expr>)</condition> <block pos:start="6229:37" pos:end="6233:13">{<block_content pos:start="6231:17" pos:end="6231:68">

                <expr_stmt pos:start="6231:17" pos:end="6231:68"><expr pos:start="6231:17" pos:end="6231:67"><call pos:start="6231:17" pos:end="6231:67"><name pos:start="6231:17" pos:end="6231:29">gen_exception</name><argument_list pos:start="6231:30" pos:end="6231:67">(<argument pos:start="6231:31" pos:end="6231:31"><expr pos:start="6231:31" pos:end="6231:31"><name pos:start="6231:31" pos:end="6231:31">s</name></expr></argument>, <argument pos:start="6231:34" pos:end="6231:43"><expr pos:start="6231:34" pos:end="6231:43"><name pos:start="6231:34" pos:end="6231:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6231:46" pos:end="6231:66"><expr pos:start="6231:46" pos:end="6231:66"><name pos:start="6231:46" pos:end="6231:53">pc_start</name> <operator pos:start="6231:55" pos:end="6231:55">-</operator> <name pos:start="6231:57" pos:end="6231:66"><name pos:start="6231:57" pos:end="6231:57">s</name><operator pos:start="6231:58" pos:end="6231:59">-&gt;</operator><name pos:start="6231:60" pos:end="6231:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6233:15" pos:end="6265:13">else <block pos:start="6233:20" pos:end="6265:13">{<block_content pos:start="6235:17" pos:end="6263:17">

                <expr_stmt pos:start="6235:17" pos:end="6237:91"><expr pos:start="6235:17" pos:end="6237:90"><call pos:start="6235:17" pos:end="6237:90"><name pos:start="6235:17" pos:end="6235:39">gen_svm_check_intercept</name><argument_list pos:start="6235:40" pos:end="6237:90">(<argument pos:start="6235:41" pos:end="6235:41"><expr pos:start="6235:41" pos:end="6235:41"><name pos:start="6235:41" pos:end="6235:41">s</name></expr></argument>, <argument pos:start="6235:44" pos:end="6235:51"><expr pos:start="6235:44" pos:end="6235:51"><name pos:start="6235:44" pos:end="6235:51">pc_start</name></expr></argument>,

                                        <argument pos:start="6237:41" pos:end="6237:89"><expr pos:start="6237:41" pos:end="6237:89"><ternary pos:start="6237:41" pos:end="6237:89"><condition pos:start="6237:41" pos:end="6237:47"><expr pos:start="6237:41" pos:end="6237:45"><name pos:start="6237:41" pos:end="6237:42">op</name><operator pos:start="6237:43" pos:end="6237:44">==</operator><literal type="number" pos:start="6237:45" pos:end="6237:45">2</literal></expr> ?</condition><then pos:start="6237:49" pos:end="6237:67"> <expr pos:start="6237:49" pos:end="6237:67"><name pos:start="6237:49" pos:end="6237:67">SVM_EXIT_GDTR_WRITE</name></expr> </then><else pos:start="6237:69" pos:end="6237:89">: <expr pos:start="6237:71" pos:end="6237:89"><name pos:start="6237:71" pos:end="6237:89">SVM_EXIT_IDTR_WRITE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6239:17" pos:end="6239:65"><expr pos:start="6239:17" pos:end="6239:64"><call pos:start="6239:17" pos:end="6239:64"><name pos:start="6239:17" pos:end="6239:29">gen_lea_modrm</name><argument_list pos:start="6239:30" pos:end="6239:64">(<argument pos:start="6239:31" pos:end="6239:31"><expr pos:start="6239:31" pos:end="6239:31"><name pos:start="6239:31" pos:end="6239:31">s</name></expr></argument>, <argument pos:start="6239:34" pos:end="6239:38"><expr pos:start="6239:34" pos:end="6239:38"><name pos:start="6239:34" pos:end="6239:38">modrm</name></expr></argument>, <argument pos:start="6239:41" pos:end="6239:49"><expr pos:start="6239:41" pos:end="6239:49"><operator pos:start="6239:41" pos:end="6239:41">&amp;</operator><name pos:start="6239:42" pos:end="6239:49">reg_addr</name></expr></argument>, <argument pos:start="6239:52" pos:end="6239:63"><expr pos:start="6239:52" pos:end="6239:63"><operator pos:start="6239:52" pos:end="6239:52">&amp;</operator><name pos:start="6239:53" pos:end="6239:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6241:17" pos:end="6241:56"><expr pos:start="6241:17" pos:end="6241:55"><call pos:start="6241:17" pos:end="6241:55"><name pos:start="6241:17" pos:end="6241:31">gen_op_ld_T1_A0</name><argument_list pos:start="6241:32" pos:end="6241:55">(<argument pos:start="6241:33" pos:end="6241:54"><expr pos:start="6241:33" pos:end="6241:54"><name pos:start="6241:33" pos:end="6241:39">OT_WORD</name> <operator pos:start="6241:41" pos:end="6241:41">+</operator> <name pos:start="6241:43" pos:end="6241:54"><name pos:start="6241:43" pos:end="6241:43">s</name><operator pos:start="6241:44" pos:end="6241:45">-&gt;</operator><name pos:start="6241:46" pos:end="6241:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6243:17" pos:end="6243:36"><expr pos:start="6243:17" pos:end="6243:35"><call pos:start="6243:17" pos:end="6243:35"><name pos:start="6243:17" pos:end="6243:29">gen_add_A0_im</name><argument_list pos:start="6243:30" pos:end="6243:35">(<argument pos:start="6243:31" pos:end="6243:31"><expr pos:start="6243:31" pos:end="6243:31"><name pos:start="6243:31" pos:end="6243:31">s</name></expr></argument>, <argument pos:start="6243:34" pos:end="6243:34"><expr pos:start="6243:34" pos:end="6243:34"><literal type="number" pos:start="6243:34" pos:end="6243:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6245:17" pos:end="6245:68"><expr pos:start="6245:17" pos:end="6245:67"><call pos:start="6245:17" pos:end="6245:67"><name pos:start="6245:17" pos:end="6245:31">gen_op_ld_T0_A0</name><argument_list pos:start="6245:32" pos:end="6245:67">(<argument pos:start="6245:33" pos:end="6245:66"><expr pos:start="6245:33" pos:end="6245:66"><call pos:start="6245:33" pos:end="6245:41"><name pos:start="6245:33" pos:end="6245:38">CODE64</name><argument_list pos:start="6245:39" pos:end="6245:41">(<argument pos:start="6245:40" pos:end="6245:40"><expr pos:start="6245:40" pos:end="6245:40"><name pos:start="6245:40" pos:end="6245:40">s</name></expr></argument>)</argument_list></call> <operator pos:start="6245:43" pos:end="6245:43">+</operator> <name pos:start="6245:45" pos:end="6245:51">OT_LONG</name> <operator pos:start="6245:53" pos:end="6245:53">+</operator> <name pos:start="6245:55" pos:end="6245:66"><name pos:start="6245:55" pos:end="6245:55">s</name><operator pos:start="6245:56" pos:end="6245:57">-&gt;</operator><name pos:start="6245:58" pos:end="6245:66">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6247:17" pos:end="6249:48"><if pos:start="6247:17" pos:end="6249:48">if <condition pos:start="6247:20" pos:end="6247:30">(<expr pos:start="6247:21" pos:end="6247:29"><operator pos:start="6247:21" pos:end="6247:21">!</operator><name pos:start="6247:22" pos:end="6247:29"><name pos:start="6247:22" pos:end="6247:22">s</name><operator pos:start="6247:23" pos:end="6247:24">-&gt;</operator><name pos:start="6247:25" pos:end="6247:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="6249:21" pos:end="6249:48"><block_content pos:start="6249:21" pos:end="6249:48">

                    <expr_stmt pos:start="6249:21" pos:end="6249:48"><expr pos:start="6249:21" pos:end="6249:47"><call pos:start="6249:21" pos:end="6249:47"><name pos:start="6249:21" pos:end="6249:37">gen_op_andl_T0_im</name><argument_list pos:start="6249:38" pos:end="6249:47">(<argument pos:start="6249:39" pos:end="6249:46"><expr pos:start="6249:39" pos:end="6249:46"><literal type="number" pos:start="6249:39" pos:end="6249:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="6251:17" pos:end="6263:17"><if pos:start="6251:17" pos:end="6257:17">if <condition pos:start="6251:20" pos:end="6251:28">(<expr pos:start="6251:21" pos:end="6251:27"><name pos:start="6251:21" pos:end="6251:22">op</name> <operator pos:start="6251:24" pos:end="6251:25">==</operator> <literal type="number" pos:start="6251:27" pos:end="6251:27">2</literal></expr>)</condition> <block pos:start="6251:30" pos:end="6257:17">{<block_content pos:start="6253:21" pos:end="6255:88">

                    <expr_stmt pos:start="6253:21" pos:end="6253:85"><expr pos:start="6253:21" pos:end="6253:84"><call pos:start="6253:21" pos:end="6253:84"><name pos:start="6253:21" pos:end="6253:33">tcg_gen_st_tl</name><argument_list pos:start="6253:34" pos:end="6253:84">(<argument pos:start="6253:35" pos:end="6253:42"><expr pos:start="6253:35" pos:end="6253:42"><name pos:start="6253:35" pos:end="6253:42"><name pos:start="6253:35" pos:end="6253:39">cpu_T</name><index pos:start="6253:40" pos:end="6253:42">[<expr pos:start="6253:41" pos:end="6253:41"><literal type="number" pos:start="6253:41" pos:end="6253:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6253:45" pos:end="6253:51"><expr pos:start="6253:45" pos:end="6253:51"><name pos:start="6253:45" pos:end="6253:51">cpu_env</name></expr></argument>, <argument pos:start="6253:54" pos:end="6253:83"><expr pos:start="6253:54" pos:end="6253:83"><call pos:start="6253:54" pos:end="6253:83"><name pos:start="6253:54" pos:end="6253:61">offsetof</name><argument_list pos:start="6253:62" pos:end="6253:83">(<argument pos:start="6253:63" pos:end="6253:73"><expr pos:start="6253:63" pos:end="6253:73"><name pos:start="6253:63" pos:end="6253:73">CPUX86State</name></expr></argument>,<argument pos:start="6253:75" pos:end="6253:82"><expr pos:start="6253:75" pos:end="6253:82"><name pos:start="6253:75" pos:end="6253:82"><name pos:start="6253:75" pos:end="6253:77">gdt</name><operator pos:start="6253:78" pos:end="6253:78">.</operator><name pos:start="6253:79" pos:end="6253:82">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6255:21" pos:end="6255:88"><expr pos:start="6255:21" pos:end="6255:87"><call pos:start="6255:21" pos:end="6255:87"><name pos:start="6255:21" pos:end="6255:35">tcg_gen_st32_tl</name><argument_list pos:start="6255:36" pos:end="6255:87">(<argument pos:start="6255:37" pos:end="6255:44"><expr pos:start="6255:37" pos:end="6255:44"><name pos:start="6255:37" pos:end="6255:44"><name pos:start="6255:37" pos:end="6255:41">cpu_T</name><index pos:start="6255:42" pos:end="6255:44">[<expr pos:start="6255:43" pos:end="6255:43"><literal type="number" pos:start="6255:43" pos:end="6255:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6255:47" pos:end="6255:53"><expr pos:start="6255:47" pos:end="6255:53"><name pos:start="6255:47" pos:end="6255:53">cpu_env</name></expr></argument>, <argument pos:start="6255:56" pos:end="6255:86"><expr pos:start="6255:56" pos:end="6255:86"><call pos:start="6255:56" pos:end="6255:86"><name pos:start="6255:56" pos:end="6255:63">offsetof</name><argument_list pos:start="6255:64" pos:end="6255:86">(<argument pos:start="6255:65" pos:end="6255:75"><expr pos:start="6255:65" pos:end="6255:75"><name pos:start="6255:65" pos:end="6255:75">CPUX86State</name></expr></argument>,<argument pos:start="6255:77" pos:end="6255:85"><expr pos:start="6255:77" pos:end="6255:85"><name pos:start="6255:77" pos:end="6255:85"><name pos:start="6255:77" pos:end="6255:79">gdt</name><operator pos:start="6255:80" pos:end="6255:80">.</operator><name pos:start="6255:81" pos:end="6255:85">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6257:19" pos:end="6263:17">else <block pos:start="6257:24" pos:end="6263:17">{<block_content pos:start="6259:21" pos:end="6261:88">

                    <expr_stmt pos:start="6259:21" pos:end="6259:85"><expr pos:start="6259:21" pos:end="6259:84"><call pos:start="6259:21" pos:end="6259:84"><name pos:start="6259:21" pos:end="6259:33">tcg_gen_st_tl</name><argument_list pos:start="6259:34" pos:end="6259:84">(<argument pos:start="6259:35" pos:end="6259:42"><expr pos:start="6259:35" pos:end="6259:42"><name pos:start="6259:35" pos:end="6259:42"><name pos:start="6259:35" pos:end="6259:39">cpu_T</name><index pos:start="6259:40" pos:end="6259:42">[<expr pos:start="6259:41" pos:end="6259:41"><literal type="number" pos:start="6259:41" pos:end="6259:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6259:45" pos:end="6259:51"><expr pos:start="6259:45" pos:end="6259:51"><name pos:start="6259:45" pos:end="6259:51">cpu_env</name></expr></argument>, <argument pos:start="6259:54" pos:end="6259:83"><expr pos:start="6259:54" pos:end="6259:83"><call pos:start="6259:54" pos:end="6259:83"><name pos:start="6259:54" pos:end="6259:61">offsetof</name><argument_list pos:start="6259:62" pos:end="6259:83">(<argument pos:start="6259:63" pos:end="6259:73"><expr pos:start="6259:63" pos:end="6259:73"><name pos:start="6259:63" pos:end="6259:73">CPUX86State</name></expr></argument>,<argument pos:start="6259:75" pos:end="6259:82"><expr pos:start="6259:75" pos:end="6259:82"><name pos:start="6259:75" pos:end="6259:82"><name pos:start="6259:75" pos:end="6259:77">idt</name><operator pos:start="6259:78" pos:end="6259:78">.</operator><name pos:start="6259:79" pos:end="6259:82">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6261:21" pos:end="6261:88"><expr pos:start="6261:21" pos:end="6261:87"><call pos:start="6261:21" pos:end="6261:87"><name pos:start="6261:21" pos:end="6261:35">tcg_gen_st32_tl</name><argument_list pos:start="6261:36" pos:end="6261:87">(<argument pos:start="6261:37" pos:end="6261:44"><expr pos:start="6261:37" pos:end="6261:44"><name pos:start="6261:37" pos:end="6261:44"><name pos:start="6261:37" pos:end="6261:41">cpu_T</name><index pos:start="6261:42" pos:end="6261:44">[<expr pos:start="6261:43" pos:end="6261:43"><literal type="number" pos:start="6261:43" pos:end="6261:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6261:47" pos:end="6261:53"><expr pos:start="6261:47" pos:end="6261:53"><name pos:start="6261:47" pos:end="6261:53">cpu_env</name></expr></argument>, <argument pos:start="6261:56" pos:end="6261:86"><expr pos:start="6261:56" pos:end="6261:86"><call pos:start="6261:56" pos:end="6261:86"><name pos:start="6261:56" pos:end="6261:63">offsetof</name><argument_list pos:start="6261:64" pos:end="6261:86">(<argument pos:start="6261:65" pos:end="6261:75"><expr pos:start="6261:65" pos:end="6261:75"><name pos:start="6261:65" pos:end="6261:75">CPUX86State</name></expr></argument>,<argument pos:start="6261:77" pos:end="6261:85"><expr pos:start="6261:77" pos:end="6261:85"><name pos:start="6261:77" pos:end="6261:85"><name pos:start="6261:77" pos:end="6261:79">idt</name><operator pos:start="6261:80" pos:end="6261:80">.</operator><name pos:start="6261:81" pos:end="6261:85">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6267:13" pos:end="6267:18">break;</break>

        <case pos:start="6269:9" pos:end="6269:15">case <expr pos:start="6269:14" pos:end="6269:14"><literal type="number" pos:start="6269:14" pos:end="6269:14">4</literal></expr>:</case> <comment type="block" pos:start="6269:17" pos:end="6269:26">/* smsw */</comment>

            <expr_stmt pos:start="6271:13" pos:end="6274:0"><expr pos:start="6271:13" pos:end="6271:67"><call pos:start="6271:13" pos:end="6271:67"><name pos:start="6271:13" pos:end="6271:35">gen_svm_check_intercept</name><argument_list pos:start="6271:36" pos:end="6271:67">(<argument pos:start="6271:37" pos:end="6271:37"><expr pos:start="6271:37" pos:end="6271:37"><name pos:start="6271:37" pos:end="6271:37">s</name></expr></argument>, <argument pos:start="6271:40" pos:end="6271:47"><expr pos:start="6271:40" pos:end="6271:47"><name pos:start="6271:40" pos:end="6271:47">pc_start</name></expr></argument>, <argument pos:start="6271:50" pos:end="6271:66"><expr pos:start="6271:50" pos:end="6271:66"><name pos:start="6271:50" pos:end="6271:66">SVM_EXIT_READ_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="6273:1" pos:end="6273:57">#<cpp:directive pos:start="6273:2" pos:end="6273:3">if</cpp:directive> <expr pos:start="6273:5" pos:end="6273:57"><name pos:start="6273:5" pos:end="6273:11">defined</name> <name pos:start="6273:13" pos:end="6273:25">TARGET_X86_64</name> <operator pos:start="6273:27" pos:end="6273:28">&amp;&amp;</operator> <name pos:start="6273:30" pos:end="6273:36">defined</name> <name pos:start="6273:38" pos:end="6273:57">HOST_WORDS_BIGENDIAN</name></expr></cpp:if>

            <expr_stmt pos:start="6275:13" pos:end="6278:0"><expr pos:start="6275:13" pos:end="6275:80"><call pos:start="6275:13" pos:end="6275:80"><name pos:start="6275:13" pos:end="6275:28">tcg_gen_ld32u_tl</name><argument_list pos:start="6275:29" pos:end="6275:80">(<argument pos:start="6275:30" pos:end="6275:37"><expr pos:start="6275:30" pos:end="6275:37"><name pos:start="6275:30" pos:end="6275:37"><name pos:start="6275:30" pos:end="6275:34">cpu_T</name><index pos:start="6275:35" pos:end="6275:37">[<expr pos:start="6275:36" pos:end="6275:36"><literal type="number" pos:start="6275:36" pos:end="6275:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6275:40" pos:end="6275:46"><expr pos:start="6275:40" pos:end="6275:46"><name pos:start="6275:40" pos:end="6275:46">cpu_env</name></expr></argument>, <argument pos:start="6275:49" pos:end="6275:79"><expr pos:start="6275:49" pos:end="6275:79"><call pos:start="6275:49" pos:end="6275:75"><name pos:start="6275:49" pos:end="6275:56">offsetof</name><argument_list pos:start="6275:57" pos:end="6275:75">(<argument pos:start="6275:58" pos:end="6275:68"><expr pos:start="6275:58" pos:end="6275:68"><name pos:start="6275:58" pos:end="6275:68">CPUX86State</name></expr></argument>,<argument pos:start="6275:70" pos:end="6275:74"><expr pos:start="6275:70" pos:end="6275:74"><name pos:start="6275:70" pos:end="6275:74"><name pos:start="6275:70" pos:end="6275:71">cr</name><index pos:start="6275:72" pos:end="6275:74">[<expr pos:start="6275:73" pos:end="6275:73"><literal type="number" pos:start="6275:73" pos:end="6275:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="6275:77" pos:end="6275:77">+</operator> <literal type="number" pos:start="6275:79" pos:end="6275:79">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="6277:1" pos:end="6277:5">#<cpp:directive pos:start="6277:2" pos:end="6277:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="6279:13" pos:end="6282:0"><expr pos:start="6279:13" pos:end="6279:76"><call pos:start="6279:13" pos:end="6279:76"><name pos:start="6279:13" pos:end="6279:28">tcg_gen_ld32u_tl</name><argument_list pos:start="6279:29" pos:end="6279:76">(<argument pos:start="6279:30" pos:end="6279:37"><expr pos:start="6279:30" pos:end="6279:37"><name pos:start="6279:30" pos:end="6279:37"><name pos:start="6279:30" pos:end="6279:34">cpu_T</name><index pos:start="6279:35" pos:end="6279:37">[<expr pos:start="6279:36" pos:end="6279:36"><literal type="number" pos:start="6279:36" pos:end="6279:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6279:40" pos:end="6279:46"><expr pos:start="6279:40" pos:end="6279:46"><name pos:start="6279:40" pos:end="6279:46">cpu_env</name></expr></argument>, <argument pos:start="6279:49" pos:end="6279:75"><expr pos:start="6279:49" pos:end="6279:75"><call pos:start="6279:49" pos:end="6279:75"><name pos:start="6279:49" pos:end="6279:56">offsetof</name><argument_list pos:start="6279:57" pos:end="6279:75">(<argument pos:start="6279:58" pos:end="6279:68"><expr pos:start="6279:58" pos:end="6279:68"><name pos:start="6279:58" pos:end="6279:68">CPUX86State</name></expr></argument>,<argument pos:start="6279:70" pos:end="6279:74"><expr pos:start="6279:70" pos:end="6279:74"><name pos:start="6279:70" pos:end="6279:74"><name pos:start="6279:70" pos:end="6279:71">cr</name><index pos:start="6279:72" pos:end="6279:74">[<expr pos:start="6279:73" pos:end="6279:73"><literal type="number" pos:start="6279:73" pos:end="6279:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="6281:1" pos:end="6281:6">#<cpp:directive pos:start="6281:2" pos:end="6281:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="6283:13" pos:end="6283:58"><expr pos:start="6283:13" pos:end="6283:57"><call pos:start="6283:13" pos:end="6283:57"><name pos:start="6283:13" pos:end="6283:26">gen_ldst_modrm</name><argument_list pos:start="6283:27" pos:end="6283:57">(<argument pos:start="6283:28" pos:end="6283:28"><expr pos:start="6283:28" pos:end="6283:28"><name pos:start="6283:28" pos:end="6283:28">s</name></expr></argument>, <argument pos:start="6283:31" pos:end="6283:35"><expr pos:start="6283:31" pos:end="6283:35"><name pos:start="6283:31" pos:end="6283:35">modrm</name></expr></argument>, <argument pos:start="6283:38" pos:end="6283:44"><expr pos:start="6283:38" pos:end="6283:44"><name pos:start="6283:38" pos:end="6283:44">OT_WORD</name></expr></argument>, <argument pos:start="6283:47" pos:end="6283:53"><expr pos:start="6283:47" pos:end="6283:53"><name pos:start="6283:47" pos:end="6283:53">OR_TMP0</name></expr></argument>, <argument pos:start="6283:56" pos:end="6283:56"><expr pos:start="6283:56" pos:end="6283:56"><literal type="number" pos:start="6283:56" pos:end="6283:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6285:13" pos:end="6285:18">break;</break>

        <case pos:start="6287:9" pos:end="6287:15">case <expr pos:start="6287:14" pos:end="6287:14"><literal type="number" pos:start="6287:14" pos:end="6287:14">6</literal></expr>:</case> <comment type="block" pos:start="6287:17" pos:end="6287:26">/* lmsw */</comment>

            <if_stmt pos:start="6289:13" pos:end="6305:13"><if pos:start="6289:13" pos:end="6293:13">if <condition pos:start="6289:16" pos:end="6289:28">(<expr pos:start="6289:17" pos:end="6289:27"><name pos:start="6289:17" pos:end="6289:22"><name pos:start="6289:17" pos:end="6289:17">s</name><operator pos:start="6289:18" pos:end="6289:19">-&gt;</operator><name pos:start="6289:20" pos:end="6289:22">cpl</name></name> <operator pos:start="6289:24" pos:end="6289:25">!=</operator> <literal type="number" pos:start="6289:27" pos:end="6289:27">0</literal></expr>)</condition> <block pos:start="6289:30" pos:end="6293:13">{<block_content pos:start="6291:17" pos:end="6291:68">

                <expr_stmt pos:start="6291:17" pos:end="6291:68"><expr pos:start="6291:17" pos:end="6291:67"><call pos:start="6291:17" pos:end="6291:67"><name pos:start="6291:17" pos:end="6291:29">gen_exception</name><argument_list pos:start="6291:30" pos:end="6291:67">(<argument pos:start="6291:31" pos:end="6291:31"><expr pos:start="6291:31" pos:end="6291:31"><name pos:start="6291:31" pos:end="6291:31">s</name></expr></argument>, <argument pos:start="6291:34" pos:end="6291:43"><expr pos:start="6291:34" pos:end="6291:43"><name pos:start="6291:34" pos:end="6291:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6291:46" pos:end="6291:66"><expr pos:start="6291:46" pos:end="6291:66"><name pos:start="6291:46" pos:end="6291:53">pc_start</name> <operator pos:start="6291:55" pos:end="6291:55">-</operator> <name pos:start="6291:57" pos:end="6291:66"><name pos:start="6291:57" pos:end="6291:57">s</name><operator pos:start="6291:58" pos:end="6291:59">-&gt;</operator><name pos:start="6291:60" pos:end="6291:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6293:15" pos:end="6305:13">else <block pos:start="6293:20" pos:end="6305:13">{<block_content pos:start="6295:17" pos:end="6303:27">

                <expr_stmt pos:start="6295:17" pos:end="6295:73"><expr pos:start="6295:17" pos:end="6295:72"><call pos:start="6295:17" pos:end="6295:72"><name pos:start="6295:17" pos:end="6295:39">gen_svm_check_intercept</name><argument_list pos:start="6295:40" pos:end="6295:72">(<argument pos:start="6295:41" pos:end="6295:41"><expr pos:start="6295:41" pos:end="6295:41"><name pos:start="6295:41" pos:end="6295:41">s</name></expr></argument>, <argument pos:start="6295:44" pos:end="6295:51"><expr pos:start="6295:44" pos:end="6295:51"><name pos:start="6295:44" pos:end="6295:51">pc_start</name></expr></argument>, <argument pos:start="6295:54" pos:end="6295:71"><expr pos:start="6295:54" pos:end="6295:71"><name pos:start="6295:54" pos:end="6295:71">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6297:17" pos:end="6297:62"><expr pos:start="6297:17" pos:end="6297:61"><call pos:start="6297:17" pos:end="6297:61"><name pos:start="6297:17" pos:end="6297:30">gen_ldst_modrm</name><argument_list pos:start="6297:31" pos:end="6297:61">(<argument pos:start="6297:32" pos:end="6297:32"><expr pos:start="6297:32" pos:end="6297:32"><name pos:start="6297:32" pos:end="6297:32">s</name></expr></argument>, <argument pos:start="6297:35" pos:end="6297:39"><expr pos:start="6297:35" pos:end="6297:39"><name pos:start="6297:35" pos:end="6297:39">modrm</name></expr></argument>, <argument pos:start="6297:42" pos:end="6297:48"><expr pos:start="6297:42" pos:end="6297:48"><name pos:start="6297:42" pos:end="6297:48">OT_WORD</name></expr></argument>, <argument pos:start="6297:51" pos:end="6297:57"><expr pos:start="6297:51" pos:end="6297:57"><name pos:start="6297:51" pos:end="6297:57">OR_TMP0</name></expr></argument>, <argument pos:start="6297:60" pos:end="6297:60"><expr pos:start="6297:60" pos:end="6297:60"><literal type="number" pos:start="6297:60" pos:end="6297:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6299:17" pos:end="6299:51"><expr pos:start="6299:17" pos:end="6299:50"><call pos:start="6299:17" pos:end="6299:50"><name pos:start="6299:17" pos:end="6299:31">gen_helper_lmsw</name><argument_list pos:start="6299:32" pos:end="6299:50">(<argument pos:start="6299:33" pos:end="6299:39"><expr pos:start="6299:33" pos:end="6299:39"><name pos:start="6299:33" pos:end="6299:39">cpu_env</name></expr></argument>, <argument pos:start="6299:42" pos:end="6299:49"><expr pos:start="6299:42" pos:end="6299:49"><name pos:start="6299:42" pos:end="6299:49"><name pos:start="6299:42" pos:end="6299:46">cpu_T</name><index pos:start="6299:47" pos:end="6299:49">[<expr pos:start="6299:48" pos:end="6299:48"><literal type="number" pos:start="6299:48" pos:end="6299:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6301:17" pos:end="6301:47"><expr pos:start="6301:17" pos:end="6301:46"><call pos:start="6301:17" pos:end="6301:46"><name pos:start="6301:17" pos:end="6301:26">gen_jmp_im</name><argument_list pos:start="6301:27" pos:end="6301:46">(<argument pos:start="6301:28" pos:end="6301:45"><expr pos:start="6301:28" pos:end="6301:45"><name pos:start="6301:28" pos:end="6301:32"><name pos:start="6301:28" pos:end="6301:28">s</name><operator pos:start="6301:29" pos:end="6301:30">-&gt;</operator><name pos:start="6301:31" pos:end="6301:32">pc</name></name> <operator pos:start="6301:34" pos:end="6301:34">-</operator> <name pos:start="6301:36" pos:end="6301:45"><name pos:start="6301:36" pos:end="6301:36">s</name><operator pos:start="6301:37" pos:end="6301:38">-&gt;</operator><name pos:start="6301:39" pos:end="6301:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6303:17" pos:end="6303:27"><expr pos:start="6303:17" pos:end="6303:26"><call pos:start="6303:17" pos:end="6303:26"><name pos:start="6303:17" pos:end="6303:23">gen_eob</name><argument_list pos:start="6303:24" pos:end="6303:26">(<argument pos:start="6303:25" pos:end="6303:25"><expr pos:start="6303:25" pos:end="6303:25"><name pos:start="6303:25" pos:end="6303:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6307:13" pos:end="6307:18">break;</break>

        <case pos:start="6309:9" pos:end="6309:15">case <expr pos:start="6309:14" pos:end="6309:14"><literal type="number" pos:start="6309:14" pos:end="6309:14">7</literal></expr>:</case>

            <if_stmt pos:start="6311:13" pos:end="6415:13"><if pos:start="6311:13" pos:end="6335:13">if <condition pos:start="6311:16" pos:end="6311:25">(<expr pos:start="6311:17" pos:end="6311:24"><name pos:start="6311:17" pos:end="6311:19">mod</name> <operator pos:start="6311:21" pos:end="6311:22">!=</operator> <literal type="number" pos:start="6311:24" pos:end="6311:24">3</literal></expr>)</condition> <block pos:start="6311:27" pos:end="6335:13">{<block_content pos:start="6313:17" pos:end="6333:17"> <comment type="block" pos:start="6311:29" pos:end="6311:40">/* invlpg */</comment>

                <if_stmt pos:start="6313:17" pos:end="6333:17"><if pos:start="6313:17" pos:end="6317:17">if <condition pos:start="6313:20" pos:end="6313:32">(<expr pos:start="6313:21" pos:end="6313:31"><name pos:start="6313:21" pos:end="6313:26"><name pos:start="6313:21" pos:end="6313:21">s</name><operator pos:start="6313:22" pos:end="6313:23">-&gt;</operator><name pos:start="6313:24" pos:end="6313:26">cpl</name></name> <operator pos:start="6313:28" pos:end="6313:29">!=</operator> <literal type="number" pos:start="6313:31" pos:end="6313:31">0</literal></expr>)</condition> <block pos:start="6313:34" pos:end="6317:17">{<block_content pos:start="6315:21" pos:end="6315:72">

                    <expr_stmt pos:start="6315:21" pos:end="6315:72"><expr pos:start="6315:21" pos:end="6315:71"><call pos:start="6315:21" pos:end="6315:71"><name pos:start="6315:21" pos:end="6315:33">gen_exception</name><argument_list pos:start="6315:34" pos:end="6315:71">(<argument pos:start="6315:35" pos:end="6315:35"><expr pos:start="6315:35" pos:end="6315:35"><name pos:start="6315:35" pos:end="6315:35">s</name></expr></argument>, <argument pos:start="6315:38" pos:end="6315:47"><expr pos:start="6315:38" pos:end="6315:47"><name pos:start="6315:38" pos:end="6315:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6315:50" pos:end="6315:70"><expr pos:start="6315:50" pos:end="6315:70"><name pos:start="6315:50" pos:end="6315:57">pc_start</name> <operator pos:start="6315:59" pos:end="6315:59">-</operator> <name pos:start="6315:61" pos:end="6315:70"><name pos:start="6315:61" pos:end="6315:61">s</name><operator pos:start="6315:62" pos:end="6315:63">-&gt;</operator><name pos:start="6315:64" pos:end="6315:70">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6317:19" pos:end="6333:17">else <block pos:start="6317:24" pos:end="6333:17">{<block_content pos:start="6319:21" pos:end="6331:31">

                    <if_stmt pos:start="6319:21" pos:end="6321:51"><if pos:start="6319:21" pos:end="6321:51">if <condition pos:start="6319:24" pos:end="6319:50">(<expr pos:start="6319:25" pos:end="6319:49"><name pos:start="6319:25" pos:end="6319:32"><name pos:start="6319:25" pos:end="6319:25">s</name><operator pos:start="6319:26" pos:end="6319:27">-&gt;</operator><name pos:start="6319:28" pos:end="6319:32">cc_op</name></name> <operator pos:start="6319:34" pos:end="6319:35">!=</operator> <name pos:start="6319:37" pos:end="6319:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6321:25" pos:end="6321:51"><block_content pos:start="6321:25" pos:end="6321:51">

                        <expr_stmt pos:start="6321:25" pos:end="6321:51"><expr pos:start="6321:25" pos:end="6321:50"><call pos:start="6321:25" pos:end="6321:50"><name pos:start="6321:25" pos:end="6321:40">gen_op_set_cc_op</name><argument_list pos:start="6321:41" pos:end="6321:50">(<argument pos:start="6321:42" pos:end="6321:49"><expr pos:start="6321:42" pos:end="6321:49"><name pos:start="6321:42" pos:end="6321:49"><name pos:start="6321:42" pos:end="6321:42">s</name><operator pos:start="6321:43" pos:end="6321:44">-&gt;</operator><name pos:start="6321:45" pos:end="6321:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6323:21" pos:end="6323:54"><expr pos:start="6323:21" pos:end="6323:53"><call pos:start="6323:21" pos:end="6323:53"><name pos:start="6323:21" pos:end="6323:30">gen_jmp_im</name><argument_list pos:start="6323:31" pos:end="6323:53">(<argument pos:start="6323:32" pos:end="6323:52"><expr pos:start="6323:32" pos:end="6323:52"><name pos:start="6323:32" pos:end="6323:39">pc_start</name> <operator pos:start="6323:41" pos:end="6323:41">-</operator> <name pos:start="6323:43" pos:end="6323:52"><name pos:start="6323:43" pos:end="6323:43">s</name><operator pos:start="6323:44" pos:end="6323:45">-&gt;</operator><name pos:start="6323:46" pos:end="6323:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6325:21" pos:end="6325:69"><expr pos:start="6325:21" pos:end="6325:68"><call pos:start="6325:21" pos:end="6325:68"><name pos:start="6325:21" pos:end="6325:33">gen_lea_modrm</name><argument_list pos:start="6325:34" pos:end="6325:68">(<argument pos:start="6325:35" pos:end="6325:35"><expr pos:start="6325:35" pos:end="6325:35"><name pos:start="6325:35" pos:end="6325:35">s</name></expr></argument>, <argument pos:start="6325:38" pos:end="6325:42"><expr pos:start="6325:38" pos:end="6325:42"><name pos:start="6325:38" pos:end="6325:42">modrm</name></expr></argument>, <argument pos:start="6325:45" pos:end="6325:53"><expr pos:start="6325:45" pos:end="6325:53"><operator pos:start="6325:45" pos:end="6325:45">&amp;</operator><name pos:start="6325:46" pos:end="6325:53">reg_addr</name></expr></argument>, <argument pos:start="6325:56" pos:end="6325:67"><expr pos:start="6325:56" pos:end="6325:67"><operator pos:start="6325:56" pos:end="6325:56">&amp;</operator><name pos:start="6325:57" pos:end="6325:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6327:21" pos:end="6327:55"><expr pos:start="6327:21" pos:end="6327:54"><call pos:start="6327:21" pos:end="6327:54"><name pos:start="6327:21" pos:end="6327:37">gen_helper_invlpg</name><argument_list pos:start="6327:38" pos:end="6327:54">(<argument pos:start="6327:39" pos:end="6327:45"><expr pos:start="6327:39" pos:end="6327:45"><name pos:start="6327:39" pos:end="6327:45">cpu_env</name></expr></argument>, <argument pos:start="6327:48" pos:end="6327:53"><expr pos:start="6327:48" pos:end="6327:53"><name pos:start="6327:48" pos:end="6327:53">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6329:21" pos:end="6329:51"><expr pos:start="6329:21" pos:end="6329:50"><call pos:start="6329:21" pos:end="6329:50"><name pos:start="6329:21" pos:end="6329:30">gen_jmp_im</name><argument_list pos:start="6329:31" pos:end="6329:50">(<argument pos:start="6329:32" pos:end="6329:49"><expr pos:start="6329:32" pos:end="6329:49"><name pos:start="6329:32" pos:end="6329:36"><name pos:start="6329:32" pos:end="6329:32">s</name><operator pos:start="6329:33" pos:end="6329:34">-&gt;</operator><name pos:start="6329:35" pos:end="6329:36">pc</name></name> <operator pos:start="6329:38" pos:end="6329:38">-</operator> <name pos:start="6329:40" pos:end="6329:49"><name pos:start="6329:40" pos:end="6329:40">s</name><operator pos:start="6329:41" pos:end="6329:42">-&gt;</operator><name pos:start="6329:43" pos:end="6329:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6331:21" pos:end="6331:31"><expr pos:start="6331:21" pos:end="6331:30"><call pos:start="6331:21" pos:end="6331:30"><name pos:start="6331:21" pos:end="6331:27">gen_eob</name><argument_list pos:start="6331:28" pos:end="6331:30">(<argument pos:start="6331:29" pos:end="6331:29"><expr pos:start="6331:29" pos:end="6331:29"><name pos:start="6331:29" pos:end="6331:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="6335:15" pos:end="6415:13">else <block pos:start="6335:20" pos:end="6415:13">{<block_content pos:start="6337:17" pos:end="6413:17">

                <switch pos:start="6337:17" pos:end="6413:17">switch <condition pos:start="6337:24" pos:end="6337:27">(<expr pos:start="6337:25" pos:end="6337:26"><name pos:start="6337:25" pos:end="6337:26">rm</name></expr>)</condition> <block pos:start="6337:29" pos:end="6413:17">{<block_content pos:start="6339:17" pos:end="6411:36">

                <case pos:start="6339:17" pos:end="6342:0">case <expr pos:start="6339:22" pos:end="6339:22"><literal type="number" pos:start="6339:22" pos:end="6339:22">0</literal></expr>:</case> <comment type="block" pos:start="6339:25" pos:end="6339:36">/* swapgs */</comment>

<cpp:ifdef pos:start="6341:1" pos:end="6341:20">#<cpp:directive pos:start="6341:2" pos:end="6341:6">ifdef</cpp:directive> <name pos:start="6341:8" pos:end="6341:20">TARGET_X86_64</name></cpp:ifdef>

                    <if_stmt pos:start="6343:21" pos:end="6377:21"><if pos:start="6343:21" pos:end="6369:21">if <condition pos:start="6343:24" pos:end="6343:34">(<expr pos:start="6343:25" pos:end="6343:33"><call pos:start="6343:25" pos:end="6343:33"><name pos:start="6343:25" pos:end="6343:30">CODE64</name><argument_list pos:start="6343:31" pos:end="6343:33">(<argument pos:start="6343:32" pos:end="6343:32"><expr pos:start="6343:32" pos:end="6343:32"><name pos:start="6343:32" pos:end="6343:32">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6343:36" pos:end="6369:21">{<block_content pos:start="6345:25" pos:end="6367:25">

                        <if_stmt pos:start="6345:25" pos:end="6367:25"><if pos:start="6345:25" pos:end="6349:25">if <condition pos:start="6345:28" pos:end="6345:40">(<expr pos:start="6345:29" pos:end="6345:39"><name pos:start="6345:29" pos:end="6345:34"><name pos:start="6345:29" pos:end="6345:29">s</name><operator pos:start="6345:30" pos:end="6345:31">-&gt;</operator><name pos:start="6345:32" pos:end="6345:34">cpl</name></name> <operator pos:start="6345:36" pos:end="6345:37">!=</operator> <literal type="number" pos:start="6345:39" pos:end="6345:39">0</literal></expr>)</condition> <block pos:start="6345:42" pos:end="6349:25">{<block_content pos:start="6347:29" pos:end="6347:80">

                            <expr_stmt pos:start="6347:29" pos:end="6347:80"><expr pos:start="6347:29" pos:end="6347:79"><call pos:start="6347:29" pos:end="6347:79"><name pos:start="6347:29" pos:end="6347:41">gen_exception</name><argument_list pos:start="6347:42" pos:end="6347:79">(<argument pos:start="6347:43" pos:end="6347:43"><expr pos:start="6347:43" pos:end="6347:43"><name pos:start="6347:43" pos:end="6347:43">s</name></expr></argument>, <argument pos:start="6347:46" pos:end="6347:55"><expr pos:start="6347:46" pos:end="6347:55"><name pos:start="6347:46" pos:end="6347:55">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6347:58" pos:end="6347:78"><expr pos:start="6347:58" pos:end="6347:78"><name pos:start="6347:58" pos:end="6347:65">pc_start</name> <operator pos:start="6347:67" pos:end="6347:67">-</operator> <name pos:start="6347:69" pos:end="6347:78"><name pos:start="6347:69" pos:end="6347:69">s</name><operator pos:start="6347:70" pos:end="6347:71">-&gt;</operator><name pos:start="6347:72" pos:end="6347:78">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="6349:27" pos:end="6367:25">else <block pos:start="6349:32" pos:end="6367:25">{<block_content pos:start="6351:29" pos:end="6365:68">

                            <expr_stmt pos:start="6351:29" pos:end="6353:71"><expr pos:start="6351:29" pos:end="6353:70"><call pos:start="6351:29" pos:end="6353:70"><name pos:start="6351:29" pos:end="6351:41">tcg_gen_ld_tl</name><argument_list pos:start="6351:42" pos:end="6353:70">(<argument pos:start="6351:43" pos:end="6351:50"><expr pos:start="6351:43" pos:end="6351:50"><name pos:start="6351:43" pos:end="6351:50"><name pos:start="6351:43" pos:end="6351:47">cpu_T</name><index pos:start="6351:48" pos:end="6351:50">[<expr pos:start="6351:49" pos:end="6351:49"><literal type="number" pos:start="6351:49" pos:end="6351:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6351:53" pos:end="6351:59"><expr pos:start="6351:53" pos:end="6351:59"><name pos:start="6351:53" pos:end="6351:59">cpu_env</name></expr></argument>,

                                <argument pos:start="6353:33" pos:end="6353:69"><expr pos:start="6353:33" pos:end="6353:69"><call pos:start="6353:33" pos:end="6353:69"><name pos:start="6353:33" pos:end="6353:40">offsetof</name><argument_list pos:start="6353:41" pos:end="6353:69">(<argument pos:start="6353:42" pos:end="6353:52"><expr pos:start="6353:42" pos:end="6353:52"><name pos:start="6353:42" pos:end="6353:52">CPUX86State</name></expr></argument>,<argument pos:start="6353:54" pos:end="6353:68"><expr pos:start="6353:54" pos:end="6353:68"><name pos:start="6353:54" pos:end="6353:63"><name pos:start="6353:54" pos:end="6353:57">segs</name><index pos:start="6353:58" pos:end="6353:63">[<expr pos:start="6353:59" pos:end="6353:62"><name pos:start="6353:59" pos:end="6353:62">R_GS</name></expr>]</index></name><operator pos:start="6353:64" pos:end="6353:64">.</operator><name pos:start="6353:65" pos:end="6353:68">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="6355:29" pos:end="6357:68"><expr pos:start="6355:29" pos:end="6357:67"><call pos:start="6355:29" pos:end="6357:67"><name pos:start="6355:29" pos:end="6355:41">tcg_gen_ld_tl</name><argument_list pos:start="6355:42" pos:end="6357:67">(<argument pos:start="6355:43" pos:end="6355:50"><expr pos:start="6355:43" pos:end="6355:50"><name pos:start="6355:43" pos:end="6355:50"><name pos:start="6355:43" pos:end="6355:47">cpu_T</name><index pos:start="6355:48" pos:end="6355:50">[<expr pos:start="6355:49" pos:end="6355:49"><literal type="number" pos:start="6355:49" pos:end="6355:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6355:53" pos:end="6355:59"><expr pos:start="6355:53" pos:end="6355:59"><name pos:start="6355:53" pos:end="6355:59">cpu_env</name></expr></argument>,

                                <argument pos:start="6357:33" pos:end="6357:66"><expr pos:start="6357:33" pos:end="6357:66"><call pos:start="6357:33" pos:end="6357:66"><name pos:start="6357:33" pos:end="6357:40">offsetof</name><argument_list pos:start="6357:41" pos:end="6357:66">(<argument pos:start="6357:42" pos:end="6357:52"><expr pos:start="6357:42" pos:end="6357:52"><name pos:start="6357:42" pos:end="6357:52">CPUX86State</name></expr></argument>,<argument pos:start="6357:54" pos:end="6357:65"><expr pos:start="6357:54" pos:end="6357:65"><name pos:start="6357:54" pos:end="6357:65">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="6359:29" pos:end="6361:71"><expr pos:start="6359:29" pos:end="6361:70"><call pos:start="6359:29" pos:end="6361:70"><name pos:start="6359:29" pos:end="6359:41">tcg_gen_st_tl</name><argument_list pos:start="6359:42" pos:end="6361:70">(<argument pos:start="6359:43" pos:end="6359:50"><expr pos:start="6359:43" pos:end="6359:50"><name pos:start="6359:43" pos:end="6359:50"><name pos:start="6359:43" pos:end="6359:47">cpu_T</name><index pos:start="6359:48" pos:end="6359:50">[<expr pos:start="6359:49" pos:end="6359:49"><literal type="number" pos:start="6359:49" pos:end="6359:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="6359:53" pos:end="6359:59"><expr pos:start="6359:53" pos:end="6359:59"><name pos:start="6359:53" pos:end="6359:59">cpu_env</name></expr></argument>,

                                <argument pos:start="6361:33" pos:end="6361:69"><expr pos:start="6361:33" pos:end="6361:69"><call pos:start="6361:33" pos:end="6361:69"><name pos:start="6361:33" pos:end="6361:40">offsetof</name><argument_list pos:start="6361:41" pos:end="6361:69">(<argument pos:start="6361:42" pos:end="6361:52"><expr pos:start="6361:42" pos:end="6361:52"><name pos:start="6361:42" pos:end="6361:52">CPUX86State</name></expr></argument>,<argument pos:start="6361:54" pos:end="6361:68"><expr pos:start="6361:54" pos:end="6361:68"><name pos:start="6361:54" pos:end="6361:63"><name pos:start="6361:54" pos:end="6361:57">segs</name><index pos:start="6361:58" pos:end="6361:63">[<expr pos:start="6361:59" pos:end="6361:62"><name pos:start="6361:59" pos:end="6361:62">R_GS</name></expr>]</index></name><operator pos:start="6361:64" pos:end="6361:64">.</operator><name pos:start="6361:65" pos:end="6361:68">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="6363:29" pos:end="6365:68"><expr pos:start="6363:29" pos:end="6365:67"><call pos:start="6363:29" pos:end="6365:67"><name pos:start="6363:29" pos:end="6363:41">tcg_gen_st_tl</name><argument_list pos:start="6363:42" pos:end="6365:67">(<argument pos:start="6363:43" pos:end="6363:50"><expr pos:start="6363:43" pos:end="6363:50"><name pos:start="6363:43" pos:end="6363:50"><name pos:start="6363:43" pos:end="6363:47">cpu_T</name><index pos:start="6363:48" pos:end="6363:50">[<expr pos:start="6363:49" pos:end="6363:49"><literal type="number" pos:start="6363:49" pos:end="6363:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6363:53" pos:end="6363:59"><expr pos:start="6363:53" pos:end="6363:59"><name pos:start="6363:53" pos:end="6363:59">cpu_env</name></expr></argument>,

                                <argument pos:start="6365:33" pos:end="6365:66"><expr pos:start="6365:33" pos:end="6365:66"><call pos:start="6365:33" pos:end="6365:66"><name pos:start="6365:33" pos:end="6365:40">offsetof</name><argument_list pos:start="6365:41" pos:end="6365:66">(<argument pos:start="6365:42" pos:end="6365:52"><expr pos:start="6365:42" pos:end="6365:52"><name pos:start="6365:42" pos:end="6365:52">CPUX86State</name></expr></argument>,<argument pos:start="6365:54" pos:end="6365:65"><expr pos:start="6365:54" pos:end="6365:65"><name pos:start="6365:54" pos:end="6365:65">kernelgsbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="6369:23" pos:end="6377:21">else

<cpp:endif pos:start="6371:1" pos:end="6371:6">#<cpp:directive pos:start="6371:2" pos:end="6371:6">endif</cpp:directive></cpp:endif>

                    <block pos:start="6373:21" pos:end="6377:21">{<block_content pos:start="6375:25" pos:end="6375:40">

                        <goto pos:start="6375:25" pos:end="6375:40">goto <name pos:start="6375:30" pos:end="6375:39">illegal_op</name>;</goto>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="6379:21" pos:end="6379:26">break;</break>

                <case pos:start="6381:17" pos:end="6381:23">case <expr pos:start="6381:22" pos:end="6381:22"><literal type="number" pos:start="6381:22" pos:end="6381:22">1</literal></expr>:</case> <comment type="block" pos:start="6381:25" pos:end="6381:36">/* rdtscp */</comment>

                    <if_stmt pos:start="6383:21" pos:end="6385:40"><if pos:start="6383:21" pos:end="6385:40">if <condition pos:start="6383:24" pos:end="6383:70">(<expr pos:start="6383:25" pos:end="6383:69"><operator pos:start="6383:25" pos:end="6383:25">!</operator><operator pos:start="6383:26" pos:end="6383:26">(</operator><name pos:start="6383:27" pos:end="6383:48"><name pos:start="6383:27" pos:end="6383:27">s</name><operator pos:start="6383:28" pos:end="6383:29">-&gt;</operator><name pos:start="6383:30" pos:end="6383:48">cpuid_ext2_features</name></name> <operator pos:start="6383:50" pos:end="6383:50">&amp;</operator> <name pos:start="6383:52" pos:end="6383:68">CPUID_EXT2_RDTSCP</name><operator pos:start="6383:69" pos:end="6383:69">)</operator></expr>)</condition><block type="pseudo" pos:start="6385:25" pos:end="6385:40"><block_content pos:start="6385:25" pos:end="6385:40">

                        <goto pos:start="6385:25" pos:end="6385:40">goto <name pos:start="6385:30" pos:end="6385:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="6387:21" pos:end="6389:51"><if pos:start="6387:21" pos:end="6389:51">if <condition pos:start="6387:24" pos:end="6387:50">(<expr pos:start="6387:25" pos:end="6387:49"><name pos:start="6387:25" pos:end="6387:32"><name pos:start="6387:25" pos:end="6387:25">s</name><operator pos:start="6387:26" pos:end="6387:27">-&gt;</operator><name pos:start="6387:28" pos:end="6387:32">cc_op</name></name> <operator pos:start="6387:34" pos:end="6387:35">!=</operator> <name pos:start="6387:37" pos:end="6387:49">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6389:25" pos:end="6389:51"><block_content pos:start="6389:25" pos:end="6389:51">

                        <expr_stmt pos:start="6389:25" pos:end="6389:51"><expr pos:start="6389:25" pos:end="6389:50"><call pos:start="6389:25" pos:end="6389:50"><name pos:start="6389:25" pos:end="6389:40">gen_op_set_cc_op</name><argument_list pos:start="6389:41" pos:end="6389:50">(<argument pos:start="6389:42" pos:end="6389:49"><expr pos:start="6389:42" pos:end="6389:49"><name pos:start="6389:42" pos:end="6389:49"><name pos:start="6389:42" pos:end="6389:42">s</name><operator pos:start="6389:43" pos:end="6389:44">-&gt;</operator><name pos:start="6389:45" pos:end="6389:49">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6391:21" pos:end="6391:54"><expr pos:start="6391:21" pos:end="6391:53"><call pos:start="6391:21" pos:end="6391:53"><name pos:start="6391:21" pos:end="6391:30">gen_jmp_im</name><argument_list pos:start="6391:31" pos:end="6391:53">(<argument pos:start="6391:32" pos:end="6391:52"><expr pos:start="6391:32" pos:end="6391:52"><name pos:start="6391:32" pos:end="6391:39">pc_start</name> <operator pos:start="6391:41" pos:end="6391:41">-</operator> <name pos:start="6391:43" pos:end="6391:52"><name pos:start="6391:43" pos:end="6391:43">s</name><operator pos:start="6391:44" pos:end="6391:45">-&gt;</operator><name pos:start="6391:46" pos:end="6391:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="6393:21" pos:end="6395:39"><if pos:start="6393:21" pos:end="6395:39">if <condition pos:start="6393:24" pos:end="6393:35">(<expr pos:start="6393:25" pos:end="6393:34"><name pos:start="6393:25" pos:end="6393:34">use_icount</name></expr>)</condition><block type="pseudo" pos:start="6395:25" pos:end="6395:39"><block_content pos:start="6395:25" pos:end="6395:39">

                        <expr_stmt pos:start="6395:25" pos:end="6395:39"><expr pos:start="6395:25" pos:end="6395:38"><call pos:start="6395:25" pos:end="6395:38"><name pos:start="6395:25" pos:end="6395:36">gen_io_start</name><argument_list pos:start="6395:37" pos:end="6395:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6397:21" pos:end="6397:47"><expr pos:start="6397:21" pos:end="6397:46"><call pos:start="6397:21" pos:end="6397:46"><name pos:start="6397:21" pos:end="6397:37">gen_helper_rdtscp</name><argument_list pos:start="6397:38" pos:end="6397:46">(<argument pos:start="6397:39" pos:end="6397:45"><expr pos:start="6397:39" pos:end="6397:45"><name pos:start="6397:39" pos:end="6397:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="6399:21" pos:end="6405:21"><if pos:start="6399:21" pos:end="6405:21">if <condition pos:start="6399:24" pos:end="6399:35">(<expr pos:start="6399:25" pos:end="6399:34"><name pos:start="6399:25" pos:end="6399:34">use_icount</name></expr>)</condition> <block pos:start="6399:37" pos:end="6405:21">{<block_content pos:start="6401:25" pos:end="6403:55">

                        <expr_stmt pos:start="6401:25" pos:end="6401:37"><expr pos:start="6401:25" pos:end="6401:36"><call pos:start="6401:25" pos:end="6401:36"><name pos:start="6401:25" pos:end="6401:34">gen_io_end</name><argument_list pos:start="6401:35" pos:end="6401:36">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="6403:25" pos:end="6403:55"><expr pos:start="6403:25" pos:end="6403:54"><call pos:start="6403:25" pos:end="6403:54"><name pos:start="6403:25" pos:end="6403:31">gen_jmp</name><argument_list pos:start="6403:32" pos:end="6403:54">(<argument pos:start="6403:33" pos:end="6403:33"><expr pos:start="6403:33" pos:end="6403:33"><name pos:start="6403:33" pos:end="6403:33">s</name></expr></argument>, <argument pos:start="6403:36" pos:end="6403:53"><expr pos:start="6403:36" pos:end="6403:53"><name pos:start="6403:36" pos:end="6403:40"><name pos:start="6403:36" pos:end="6403:36">s</name><operator pos:start="6403:37" pos:end="6403:38">-&gt;</operator><name pos:start="6403:39" pos:end="6403:40">pc</name></name> <operator pos:start="6403:42" pos:end="6403:42">-</operator> <name pos:start="6403:44" pos:end="6403:53"><name pos:start="6403:44" pos:end="6403:44">s</name><operator pos:start="6403:45" pos:end="6403:46">-&gt;</operator><name pos:start="6403:47" pos:end="6403:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="6407:21" pos:end="6407:26">break;</break>

                <default pos:start="6409:17" pos:end="6409:24">default:</default>

                    <goto pos:start="6411:21" pos:end="6411:36">goto <name pos:start="6411:26" pos:end="6411:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="6417:13" pos:end="6417:18">break;</break>

        <default pos:start="6419:9" pos:end="6419:16">default:</default>

            <goto pos:start="6421:13" pos:end="6421:28">goto <name pos:start="6421:18" pos:end="6421:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="6425:9" pos:end="6425:14">break;</break>

    <case pos:start="6427:5" pos:end="6427:15">case <expr pos:start="6427:10" pos:end="6427:14"><literal type="number" pos:start="6427:10" pos:end="6427:14">0x108</literal></expr>:</case> <comment type="block" pos:start="6427:17" pos:end="6427:26">/* invd */</comment>

    <case pos:start="6429:5" pos:end="6429:15">case <expr pos:start="6429:10" pos:end="6429:14"><literal type="number" pos:start="6429:10" pos:end="6429:14">0x109</literal></expr>:</case> <comment type="block" pos:start="6429:17" pos:end="6429:28">/* wbinvd */</comment>

        <if_stmt pos:start="6431:9" pos:end="6441:9"><if pos:start="6431:9" pos:end="6435:9">if <condition pos:start="6431:12" pos:end="6431:24">(<expr pos:start="6431:13" pos:end="6431:23"><name pos:start="6431:13" pos:end="6431:18"><name pos:start="6431:13" pos:end="6431:13">s</name><operator pos:start="6431:14" pos:end="6431:15">-&gt;</operator><name pos:start="6431:16" pos:end="6431:18">cpl</name></name> <operator pos:start="6431:20" pos:end="6431:21">!=</operator> <literal type="number" pos:start="6431:23" pos:end="6431:23">0</literal></expr>)</condition> <block pos:start="6431:26" pos:end="6435:9">{<block_content pos:start="6433:13" pos:end="6433:64">

            <expr_stmt pos:start="6433:13" pos:end="6433:64"><expr pos:start="6433:13" pos:end="6433:63"><call pos:start="6433:13" pos:end="6433:63"><name pos:start="6433:13" pos:end="6433:25">gen_exception</name><argument_list pos:start="6433:26" pos:end="6433:63">(<argument pos:start="6433:27" pos:end="6433:27"><expr pos:start="6433:27" pos:end="6433:27"><name pos:start="6433:27" pos:end="6433:27">s</name></expr></argument>, <argument pos:start="6433:30" pos:end="6433:39"><expr pos:start="6433:30" pos:end="6433:39"><name pos:start="6433:30" pos:end="6433:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6433:42" pos:end="6433:62"><expr pos:start="6433:42" pos:end="6433:62"><name pos:start="6433:42" pos:end="6433:49">pc_start</name> <operator pos:start="6433:51" pos:end="6433:51">-</operator> <name pos:start="6433:53" pos:end="6433:62"><name pos:start="6433:53" pos:end="6433:53">s</name><operator pos:start="6433:54" pos:end="6433:55">-&gt;</operator><name pos:start="6433:56" pos:end="6433:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6435:11" pos:end="6441:9">else <block pos:start="6435:16" pos:end="6441:9">{<block_content pos:start="6437:13" pos:end="6437:92">

            <expr_stmt pos:start="6437:13" pos:end="6437:92"><expr pos:start="6437:13" pos:end="6437:91"><call pos:start="6437:13" pos:end="6437:91"><name pos:start="6437:13" pos:end="6437:35">gen_svm_check_intercept</name><argument_list pos:start="6437:36" pos:end="6437:91">(<argument pos:start="6437:37" pos:end="6437:37"><expr pos:start="6437:37" pos:end="6437:37"><name pos:start="6437:37" pos:end="6437:37">s</name></expr></argument>, <argument pos:start="6437:40" pos:end="6437:47"><expr pos:start="6437:40" pos:end="6437:47"><name pos:start="6437:40" pos:end="6437:47">pc_start</name></expr></argument>, <argument pos:start="6437:50" pos:end="6437:90"><expr pos:start="6437:50" pos:end="6437:90"><ternary pos:start="6437:50" pos:end="6437:90"><condition pos:start="6437:50" pos:end="6437:58"><expr pos:start="6437:50" pos:end="6437:56"><operator pos:start="6437:50" pos:end="6437:50">(</operator><name pos:start="6437:51" pos:end="6437:51">b</name> <operator pos:start="6437:53" pos:end="6437:53">&amp;</operator> <literal type="number" pos:start="6437:55" pos:end="6437:55">2</literal><operator pos:start="6437:56" pos:end="6437:56">)</operator></expr> ?</condition><then pos:start="6437:60" pos:end="6437:72"> <expr pos:start="6437:60" pos:end="6437:72"><name pos:start="6437:60" pos:end="6437:72">SVM_EXIT_INVD</name></expr> </then><else pos:start="6437:74" pos:end="6437:90">: <expr pos:start="6437:76" pos:end="6437:90"><name pos:start="6437:76" pos:end="6437:90">SVM_EXIT_WBINVD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6439:13" pos:end="6439:31">/* nothing to do */</comment>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6443:9" pos:end="6443:14">break;</break>

    <case pos:start="6445:5" pos:end="6448:0">case <expr pos:start="6445:10" pos:end="6445:13"><literal type="number" pos:start="6445:10" pos:end="6445:13">0x63</literal></expr>:</case> <comment type="block" pos:start="6445:16" pos:end="6445:44">/* arpl or movslS (x86_64) */</comment>

<cpp:ifdef pos:start="6447:1" pos:end="6447:20">#<cpp:directive pos:start="6447:2" pos:end="6447:6">ifdef</cpp:directive> <name pos:start="6447:8" pos:end="6447:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="6449:9" pos:end="6599:9"><if pos:start="6449:9" pos:end="6499:9">if <condition pos:start="6449:12" pos:end="6449:22">(<expr pos:start="6449:13" pos:end="6449:21"><call pos:start="6449:13" pos:end="6449:21"><name pos:start="6449:13" pos:end="6449:18">CODE64</name><argument_list pos:start="6449:19" pos:end="6449:21">(<argument pos:start="6449:20" pos:end="6449:20"><expr pos:start="6449:20" pos:end="6449:20"><name pos:start="6449:20" pos:end="6449:20">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6449:24" pos:end="6499:9">{<block_content pos:start="6451:13" pos:end="6497:13">

            <decl_stmt pos:start="6451:13" pos:end="6451:21"><decl pos:start="6451:13" pos:end="6451:20"><type pos:start="6451:13" pos:end="6451:15"><name pos:start="6451:13" pos:end="6451:15">int</name></type> <name pos:start="6451:17" pos:end="6451:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="6453:13" pos:end="6453:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="6455:13" pos:end="6455:35"><expr pos:start="6455:13" pos:end="6455:34"><name pos:start="6455:13" pos:end="6455:16">d_ot</name> <operator pos:start="6455:18" pos:end="6455:18">=</operator> <name pos:start="6455:20" pos:end="6455:24">dflag</name> <operator pos:start="6455:26" pos:end="6455:26">+</operator> <name pos:start="6455:28" pos:end="6455:34">OT_WORD</name></expr>;</expr_stmt>



            <expr_stmt pos:start="6459:13" pos:end="6459:59"><expr pos:start="6459:13" pos:end="6459:58"><name pos:start="6459:13" pos:end="6459:17">modrm</name> <operator pos:start="6459:19" pos:end="6459:19">=</operator> <call pos:start="6459:21" pos:end="6459:58"><name pos:start="6459:21" pos:end="6459:33">cpu_ldub_code</name><argument_list pos:start="6459:34" pos:end="6459:58">(<argument pos:start="6459:35" pos:end="6459:48"><expr pos:start="6459:35" pos:end="6459:48"><name pos:start="6459:35" pos:end="6459:48">cpu_single_env</name></expr></argument>, <argument pos:start="6459:51" pos:end="6459:57"><expr pos:start="6459:51" pos:end="6459:57"><name pos:start="6459:51" pos:end="6459:55"><name pos:start="6459:51" pos:end="6459:51">s</name><operator pos:start="6459:52" pos:end="6459:53">-&gt;</operator><name pos:start="6459:54" pos:end="6459:55">pc</name></name><operator pos:start="6459:56" pos:end="6459:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6461:13" pos:end="6461:45"><expr pos:start="6461:13" pos:end="6461:44"><name pos:start="6461:13" pos:end="6461:15">reg</name> <operator pos:start="6461:17" pos:end="6461:17">=</operator> <operator pos:start="6461:19" pos:end="6461:19">(</operator><operator pos:start="6461:20" pos:end="6461:20">(</operator><name pos:start="6461:21" pos:end="6461:25">modrm</name> <operator pos:start="6461:27" pos:end="6461:28">&gt;&gt;</operator> <literal type="number" pos:start="6461:30" pos:end="6461:30">3</literal><operator pos:start="6461:31" pos:end="6461:31">)</operator> <operator pos:start="6461:33" pos:end="6461:33">&amp;</operator> <literal type="number" pos:start="6461:35" pos:end="6461:35">7</literal><operator pos:start="6461:36" pos:end="6461:36">)</operator> <operator pos:start="6461:38" pos:end="6461:38">|</operator> <name pos:start="6461:40" pos:end="6461:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6463:13" pos:end="6463:35"><expr pos:start="6463:13" pos:end="6463:34"><name pos:start="6463:13" pos:end="6463:15">mod</name> <operator pos:start="6463:17" pos:end="6463:17">=</operator> <operator pos:start="6463:19" pos:end="6463:19">(</operator><name pos:start="6463:20" pos:end="6463:24">modrm</name> <operator pos:start="6463:26" pos:end="6463:27">&gt;&gt;</operator> <literal type="number" pos:start="6463:29" pos:end="6463:29">6</literal><operator pos:start="6463:30" pos:end="6463:30">)</operator> <operator pos:start="6463:32" pos:end="6463:32">&amp;</operator> <literal type="number" pos:start="6463:34" pos:end="6463:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6465:13" pos:end="6465:40"><expr pos:start="6465:13" pos:end="6465:39"><name pos:start="6465:13" pos:end="6465:14">rm</name> <operator pos:start="6465:16" pos:end="6465:16">=</operator> <operator pos:start="6465:18" pos:end="6465:18">(</operator><name pos:start="6465:19" pos:end="6465:23">modrm</name> <operator pos:start="6465:25" pos:end="6465:25">&amp;</operator> <literal type="number" pos:start="6465:27" pos:end="6465:27">7</literal><operator pos:start="6465:28" pos:end="6465:28">)</operator> <operator pos:start="6465:30" pos:end="6465:30">|</operator> <call pos:start="6465:32" pos:end="6465:39"><name pos:start="6465:32" pos:end="6465:36">REX_B</name><argument_list pos:start="6465:37" pos:end="6465:39">(<argument pos:start="6465:38" pos:end="6465:38"><expr pos:start="6465:38" pos:end="6465:38"><name pos:start="6465:38" pos:end="6465:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="6469:13" pos:end="6497:13"><if pos:start="6469:13" pos:end="6481:13">if <condition pos:start="6469:16" pos:end="6469:25">(<expr pos:start="6469:17" pos:end="6469:24"><name pos:start="6469:17" pos:end="6469:19">mod</name> <operator pos:start="6469:21" pos:end="6469:22">==</operator> <literal type="number" pos:start="6469:24" pos:end="6469:24">3</literal></expr>)</condition> <block pos:start="6469:27" pos:end="6481:13">{<block_content pos:start="6471:17" pos:end="6479:45">

                <expr_stmt pos:start="6471:17" pos:end="6471:50"><expr pos:start="6471:17" pos:end="6471:49"><call pos:start="6471:17" pos:end="6471:49"><name pos:start="6471:17" pos:end="6471:33">gen_op_mov_TN_reg</name><argument_list pos:start="6471:34" pos:end="6471:49">(<argument pos:start="6471:35" pos:end="6471:41"><expr pos:start="6471:35" pos:end="6471:41"><name pos:start="6471:35" pos:end="6471:41">OT_LONG</name></expr></argument>, <argument pos:start="6471:44" pos:end="6471:44"><expr pos:start="6471:44" pos:end="6471:44"><literal type="number" pos:start="6471:44" pos:end="6471:44">0</literal></expr></argument>, <argument pos:start="6471:47" pos:end="6471:48"><expr pos:start="6471:47" pos:end="6471:48"><name pos:start="6471:47" pos:end="6471:48">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="6473:17" pos:end="6473:33">/* sign extend */</comment>

                <if_stmt pos:start="6475:17" pos:end="6477:58"><if pos:start="6475:17" pos:end="6477:58">if <condition pos:start="6475:20" pos:end="6475:36">(<expr pos:start="6475:21" pos:end="6475:35"><name pos:start="6475:21" pos:end="6475:24">d_ot</name> <operator pos:start="6475:26" pos:end="6475:27">==</operator> <name pos:start="6475:29" pos:end="6475:35">OT_QUAD</name></expr>)</condition><block type="pseudo" pos:start="6477:21" pos:end="6477:58"><block_content pos:start="6477:21" pos:end="6477:58">

                    <expr_stmt pos:start="6477:21" pos:end="6477:58"><expr pos:start="6477:21" pos:end="6477:57"><call pos:start="6477:21" pos:end="6477:57"><name pos:start="6477:21" pos:end="6477:37">tcg_gen_ext32s_tl</name><argument_list pos:start="6477:38" pos:end="6477:57">(<argument pos:start="6477:39" pos:end="6477:46"><expr pos:start="6477:39" pos:end="6477:46"><name pos:start="6477:39" pos:end="6477:46"><name pos:start="6477:39" pos:end="6477:43">cpu_T</name><index pos:start="6477:44" pos:end="6477:46">[<expr pos:start="6477:45" pos:end="6477:45"><literal type="number" pos:start="6477:45" pos:end="6477:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6477:49" pos:end="6477:56"><expr pos:start="6477:49" pos:end="6477:56"><name pos:start="6477:49" pos:end="6477:56"><name pos:start="6477:49" pos:end="6477:53">cpu_T</name><index pos:start="6477:54" pos:end="6477:56">[<expr pos:start="6477:55" pos:end="6477:55"><literal type="number" pos:start="6477:55" pos:end="6477:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6479:17" pos:end="6479:45"><expr pos:start="6479:17" pos:end="6479:44"><call pos:start="6479:17" pos:end="6479:44"><name pos:start="6479:17" pos:end="6479:33">gen_op_mov_reg_T0</name><argument_list pos:start="6479:34" pos:end="6479:44">(<argument pos:start="6479:35" pos:end="6479:38"><expr pos:start="6479:35" pos:end="6479:38"><name pos:start="6479:35" pos:end="6479:38">d_ot</name></expr></argument>, <argument pos:start="6479:41" pos:end="6479:43"><expr pos:start="6479:41" pos:end="6479:43"><name pos:start="6479:41" pos:end="6479:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6481:15" pos:end="6497:13">else <block pos:start="6481:20" pos:end="6497:13">{<block_content pos:start="6483:17" pos:end="6495:45">

                <expr_stmt pos:start="6483:17" pos:end="6483:65"><expr pos:start="6483:17" pos:end="6483:64"><call pos:start="6483:17" pos:end="6483:64"><name pos:start="6483:17" pos:end="6483:29">gen_lea_modrm</name><argument_list pos:start="6483:30" pos:end="6483:64">(<argument pos:start="6483:31" pos:end="6483:31"><expr pos:start="6483:31" pos:end="6483:31"><name pos:start="6483:31" pos:end="6483:31">s</name></expr></argument>, <argument pos:start="6483:34" pos:end="6483:38"><expr pos:start="6483:34" pos:end="6483:38"><name pos:start="6483:34" pos:end="6483:38">modrm</name></expr></argument>, <argument pos:start="6483:41" pos:end="6483:49"><expr pos:start="6483:41" pos:end="6483:49"><operator pos:start="6483:41" pos:end="6483:41">&amp;</operator><name pos:start="6483:42" pos:end="6483:49">reg_addr</name></expr></argument>, <argument pos:start="6483:52" pos:end="6483:63"><expr pos:start="6483:52" pos:end="6483:63"><operator pos:start="6483:52" pos:end="6483:52">&amp;</operator><name pos:start="6483:53" pos:end="6483:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6485:17" pos:end="6493:17"><if pos:start="6485:17" pos:end="6489:17">if <condition pos:start="6485:20" pos:end="6485:36">(<expr pos:start="6485:21" pos:end="6485:35"><name pos:start="6485:21" pos:end="6485:24">d_ot</name> <operator pos:start="6485:26" pos:end="6485:27">==</operator> <name pos:start="6485:29" pos:end="6485:35">OT_QUAD</name></expr>)</condition> <block pos:start="6485:38" pos:end="6489:17">{<block_content pos:start="6487:21" pos:end="6487:61">

                    <expr_stmt pos:start="6487:21" pos:end="6487:61"><expr pos:start="6487:21" pos:end="6487:60"><call pos:start="6487:21" pos:end="6487:60"><name pos:start="6487:21" pos:end="6487:36">gen_op_lds_T0_A0</name><argument_list pos:start="6487:37" pos:end="6487:60">(<argument pos:start="6487:38" pos:end="6487:59"><expr pos:start="6487:38" pos:end="6487:59"><name pos:start="6487:38" pos:end="6487:44">OT_LONG</name> <operator pos:start="6487:46" pos:end="6487:46">+</operator> <name pos:start="6487:48" pos:end="6487:59"><name pos:start="6487:48" pos:end="6487:48">s</name><operator pos:start="6487:49" pos:end="6487:50">-&gt;</operator><name pos:start="6487:51" pos:end="6487:59">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6489:19" pos:end="6493:17">else <block pos:start="6489:24" pos:end="6493:17">{<block_content pos:start="6491:21" pos:end="6491:60">

                    <expr_stmt pos:start="6491:21" pos:end="6491:60"><expr pos:start="6491:21" pos:end="6491:59"><call pos:start="6491:21" pos:end="6491:59"><name pos:start="6491:21" pos:end="6491:35">gen_op_ld_T0_A0</name><argument_list pos:start="6491:36" pos:end="6491:59">(<argument pos:start="6491:37" pos:end="6491:58"><expr pos:start="6491:37" pos:end="6491:58"><name pos:start="6491:37" pos:end="6491:43">OT_LONG</name> <operator pos:start="6491:45" pos:end="6491:45">+</operator> <name pos:start="6491:47" pos:end="6491:58"><name pos:start="6491:47" pos:end="6491:47">s</name><operator pos:start="6491:48" pos:end="6491:49">-&gt;</operator><name pos:start="6491:50" pos:end="6491:58">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="6495:17" pos:end="6495:45"><expr pos:start="6495:17" pos:end="6495:44"><call pos:start="6495:17" pos:end="6495:44"><name pos:start="6495:17" pos:end="6495:33">gen_op_mov_reg_T0</name><argument_list pos:start="6495:34" pos:end="6495:44">(<argument pos:start="6495:35" pos:end="6495:38"><expr pos:start="6495:35" pos:end="6495:38"><name pos:start="6495:35" pos:end="6495:38">d_ot</name></expr></argument>, <argument pos:start="6495:41" pos:end="6495:43"><expr pos:start="6495:41" pos:end="6495:43"><name pos:start="6495:41" pos:end="6495:43">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="6499:11" pos:end="6599:9">else

<cpp:endif pos:start="6501:1" pos:end="6501:6">#<cpp:directive pos:start="6501:2" pos:end="6501:6">endif</cpp:directive></cpp:endif>

        <block pos:start="6503:9" pos:end="6599:9">{<block_content pos:start="6505:13" pos:end="6597:30">

            <decl_stmt pos:start="6505:13" pos:end="6505:23"><decl pos:start="6505:13" pos:end="6505:22"><type pos:start="6505:13" pos:end="6505:15"><name pos:start="6505:13" pos:end="6505:15">int</name></type> <name pos:start="6505:17" pos:end="6505:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6507:13" pos:end="6507:32"><decl pos:start="6507:13" pos:end="6507:19"><type pos:start="6507:13" pos:end="6507:16"><name pos:start="6507:13" pos:end="6507:16">TCGv</name></type> <name pos:start="6507:18" pos:end="6507:19">t0</name></decl>, <decl pos:start="6507:22" pos:end="6507:23"><type ref="prev" pos:start="6507:13" pos:end="6507:16"/><name pos:start="6507:22" pos:end="6507:23">t1</name></decl>, <decl pos:start="6507:26" pos:end="6507:27"><type ref="prev" pos:start="6507:13" pos:end="6507:16"/><name pos:start="6507:26" pos:end="6507:27">t2</name></decl>, <decl pos:start="6507:30" pos:end="6507:31"><type ref="prev" pos:start="6507:13" pos:end="6507:16"/><name pos:start="6507:30" pos:end="6507:31">a0</name></decl>;</decl_stmt>



            <if_stmt pos:start="6511:13" pos:end="6513:32"><if pos:start="6511:13" pos:end="6513:32">if <condition pos:start="6511:16" pos:end="6511:34">(<expr pos:start="6511:17" pos:end="6511:33"><operator pos:start="6511:17" pos:end="6511:17">!</operator><name pos:start="6511:18" pos:end="6511:22"><name pos:start="6511:18" pos:end="6511:18">s</name><operator pos:start="6511:19" pos:end="6511:20">-&gt;</operator><name pos:start="6511:21" pos:end="6511:22">pe</name></name> <operator pos:start="6511:24" pos:end="6511:25">||</operator> <name pos:start="6511:27" pos:end="6511:33"><name pos:start="6511:27" pos:end="6511:27">s</name><operator pos:start="6511:28" pos:end="6511:29">-&gt;</operator><name pos:start="6511:30" pos:end="6511:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="6513:17" pos:end="6513:32"><block_content pos:start="6513:17" pos:end="6513:32">

                <goto pos:start="6513:17" pos:end="6513:32">goto <name pos:start="6513:22" pos:end="6513:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6515:13" pos:end="6515:38"><expr pos:start="6515:13" pos:end="6515:37"><name pos:start="6515:13" pos:end="6515:14">t0</name> <operator pos:start="6515:16" pos:end="6515:16">=</operator> <call pos:start="6515:18" pos:end="6515:37"><name pos:start="6515:18" pos:end="6515:35">tcg_temp_local_new</name><argument_list pos:start="6515:36" pos:end="6515:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6517:13" pos:end="6517:38"><expr pos:start="6517:13" pos:end="6517:37"><name pos:start="6517:13" pos:end="6517:14">t1</name> <operator pos:start="6517:16" pos:end="6517:16">=</operator> <call pos:start="6517:18" pos:end="6517:37"><name pos:start="6517:18" pos:end="6517:35">tcg_temp_local_new</name><argument_list pos:start="6517:36" pos:end="6517:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6519:13" pos:end="6519:38"><expr pos:start="6519:13" pos:end="6519:37"><name pos:start="6519:13" pos:end="6519:14">t2</name> <operator pos:start="6519:16" pos:end="6519:16">=</operator> <call pos:start="6519:18" pos:end="6519:37"><name pos:start="6519:18" pos:end="6519:35">tcg_temp_local_new</name><argument_list pos:start="6519:36" pos:end="6519:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6521:13" pos:end="6521:25"><expr pos:start="6521:13" pos:end="6521:24"><name pos:start="6521:13" pos:end="6521:14">ot</name> <operator pos:start="6521:16" pos:end="6521:16">=</operator> <name pos:start="6521:18" pos:end="6521:24">OT_WORD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6523:13" pos:end="6523:59"><expr pos:start="6523:13" pos:end="6523:58"><name pos:start="6523:13" pos:end="6523:17">modrm</name> <operator pos:start="6523:19" pos:end="6523:19">=</operator> <call pos:start="6523:21" pos:end="6523:58"><name pos:start="6523:21" pos:end="6523:33">cpu_ldub_code</name><argument_list pos:start="6523:34" pos:end="6523:58">(<argument pos:start="6523:35" pos:end="6523:48"><expr pos:start="6523:35" pos:end="6523:48"><name pos:start="6523:35" pos:end="6523:48">cpu_single_env</name></expr></argument>, <argument pos:start="6523:51" pos:end="6523:57"><expr pos:start="6523:51" pos:end="6523:57"><name pos:start="6523:51" pos:end="6523:55"><name pos:start="6523:51" pos:end="6523:51">s</name><operator pos:start="6523:52" pos:end="6523:53">-&gt;</operator><name pos:start="6523:54" pos:end="6523:55">pc</name></name><operator pos:start="6523:56" pos:end="6523:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6525:13" pos:end="6525:35"><expr pos:start="6525:13" pos:end="6525:34"><name pos:start="6525:13" pos:end="6525:15">reg</name> <operator pos:start="6525:17" pos:end="6525:17">=</operator> <operator pos:start="6525:19" pos:end="6525:19">(</operator><name pos:start="6525:20" pos:end="6525:24">modrm</name> <operator pos:start="6525:26" pos:end="6525:27">&gt;&gt;</operator> <literal type="number" pos:start="6525:29" pos:end="6525:29">3</literal><operator pos:start="6525:30" pos:end="6525:30">)</operator> <operator pos:start="6525:32" pos:end="6525:32">&amp;</operator> <literal type="number" pos:start="6525:34" pos:end="6525:34">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6527:13" pos:end="6527:35"><expr pos:start="6527:13" pos:end="6527:34"><name pos:start="6527:13" pos:end="6527:15">mod</name> <operator pos:start="6527:17" pos:end="6527:17">=</operator> <operator pos:start="6527:19" pos:end="6527:19">(</operator><name pos:start="6527:20" pos:end="6527:24">modrm</name> <operator pos:start="6527:26" pos:end="6527:27">&gt;&gt;</operator> <literal type="number" pos:start="6527:29" pos:end="6527:29">6</literal><operator pos:start="6527:30" pos:end="6527:30">)</operator> <operator pos:start="6527:32" pos:end="6527:32">&amp;</operator> <literal type="number" pos:start="6527:34" pos:end="6527:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="6529:13" pos:end="6529:27"><expr pos:start="6529:13" pos:end="6529:26"><name pos:start="6529:13" pos:end="6529:14">rm</name> <operator pos:start="6529:16" pos:end="6529:16">=</operator> <name pos:start="6529:18" pos:end="6529:22">modrm</name> <operator pos:start="6529:24" pos:end="6529:24">&amp;</operator> <literal type="number" pos:start="6529:26" pos:end="6529:26">7</literal></expr>;</expr_stmt>

            <if_stmt pos:start="6531:13" pos:end="6547:13"><if pos:start="6531:13" pos:end="6541:13">if <condition pos:start="6531:16" pos:end="6531:25">(<expr pos:start="6531:17" pos:end="6531:24"><name pos:start="6531:17" pos:end="6531:19">mod</name> <operator pos:start="6531:21" pos:end="6531:22">!=</operator> <literal type="number" pos:start="6531:24" pos:end="6531:24">3</literal></expr>)</condition> <block pos:start="6531:27" pos:end="6541:13">{<block_content pos:start="6533:17" pos:end="6539:43">

                <expr_stmt pos:start="6533:17" pos:end="6533:65"><expr pos:start="6533:17" pos:end="6533:64"><call pos:start="6533:17" pos:end="6533:64"><name pos:start="6533:17" pos:end="6533:29">gen_lea_modrm</name><argument_list pos:start="6533:30" pos:end="6533:64">(<argument pos:start="6533:31" pos:end="6533:31"><expr pos:start="6533:31" pos:end="6533:31"><name pos:start="6533:31" pos:end="6533:31">s</name></expr></argument>, <argument pos:start="6533:34" pos:end="6533:38"><expr pos:start="6533:34" pos:end="6533:38"><name pos:start="6533:34" pos:end="6533:38">modrm</name></expr></argument>, <argument pos:start="6533:41" pos:end="6533:49"><expr pos:start="6533:41" pos:end="6533:49"><operator pos:start="6533:41" pos:end="6533:41">&amp;</operator><name pos:start="6533:42" pos:end="6533:49">reg_addr</name></expr></argument>, <argument pos:start="6533:52" pos:end="6533:63"><expr pos:start="6533:52" pos:end="6533:63"><operator pos:start="6533:52" pos:end="6533:52">&amp;</operator><name pos:start="6533:53" pos:end="6533:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6535:17" pos:end="6535:59"><expr pos:start="6535:17" pos:end="6535:58"><call pos:start="6535:17" pos:end="6535:58"><name pos:start="6535:17" pos:end="6535:27">gen_op_ld_v</name><argument_list pos:start="6535:28" pos:end="6535:58">(<argument pos:start="6535:29" pos:end="6535:45"><expr pos:start="6535:29" pos:end="6535:45"><name pos:start="6535:29" pos:end="6535:30">ot</name> <operator pos:start="6535:32" pos:end="6535:32">+</operator> <name pos:start="6535:34" pos:end="6535:45"><name pos:start="6535:34" pos:end="6535:34">s</name><operator pos:start="6535:35" pos:end="6535:36">-&gt;</operator><name pos:start="6535:37" pos:end="6535:45">mem_index</name></name></expr></argument>, <argument pos:start="6535:48" pos:end="6535:49"><expr pos:start="6535:48" pos:end="6535:49"><name pos:start="6535:48" pos:end="6535:49">t0</name></expr></argument>, <argument pos:start="6535:52" pos:end="6535:57"><expr pos:start="6535:52" pos:end="6535:57"><name pos:start="6535:52" pos:end="6535:57">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6537:17" pos:end="6537:42"><expr pos:start="6537:17" pos:end="6537:41"><name pos:start="6537:17" pos:end="6537:18">a0</name> <operator pos:start="6537:20" pos:end="6537:20">=</operator> <call pos:start="6537:22" pos:end="6537:41"><name pos:start="6537:22" pos:end="6537:39">tcg_temp_local_new</name><argument_list pos:start="6537:40" pos:end="6537:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6539:17" pos:end="6539:43"><expr pos:start="6539:17" pos:end="6539:42"><call pos:start="6539:17" pos:end="6539:42"><name pos:start="6539:17" pos:end="6539:30">tcg_gen_mov_tl</name><argument_list pos:start="6539:31" pos:end="6539:42">(<argument pos:start="6539:32" pos:end="6539:33"><expr pos:start="6539:32" pos:end="6539:33"><name pos:start="6539:32" pos:end="6539:33">a0</name></expr></argument>, <argument pos:start="6539:36" pos:end="6539:41"><expr pos:start="6539:36" pos:end="6539:41"><name pos:start="6539:36" pos:end="6539:41">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6541:15" pos:end="6547:13">else <block pos:start="6541:20" pos:end="6547:13">{<block_content pos:start="6543:17" pos:end="6545:32">

                <expr_stmt pos:start="6543:17" pos:end="6543:45"><expr pos:start="6543:17" pos:end="6543:44"><call pos:start="6543:17" pos:end="6543:44"><name pos:start="6543:17" pos:end="6543:32">gen_op_mov_v_reg</name><argument_list pos:start="6543:33" pos:end="6543:44">(<argument pos:start="6543:34" pos:end="6543:35"><expr pos:start="6543:34" pos:end="6543:35"><name pos:start="6543:34" pos:end="6543:35">ot</name></expr></argument>, <argument pos:start="6543:38" pos:end="6543:39"><expr pos:start="6543:38" pos:end="6543:39"><name pos:start="6543:38" pos:end="6543:39">t0</name></expr></argument>, <argument pos:start="6543:42" pos:end="6543:43"><expr pos:start="6543:42" pos:end="6543:43"><name pos:start="6543:42" pos:end="6543:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6545:17" pos:end="6545:32"><expr pos:start="6545:17" pos:end="6545:31"><call pos:start="6545:17" pos:end="6545:31"><name pos:start="6545:17" pos:end="6545:27">TCGV_UNUSED</name><argument_list pos:start="6545:28" pos:end="6545:31">(<argument pos:start="6545:29" pos:end="6545:30"><expr pos:start="6545:29" pos:end="6545:30"><name pos:start="6545:29" pos:end="6545:30">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6549:13" pos:end="6549:42"><expr pos:start="6549:13" pos:end="6549:41"><call pos:start="6549:13" pos:end="6549:41"><name pos:start="6549:13" pos:end="6549:28">gen_op_mov_v_reg</name><argument_list pos:start="6549:29" pos:end="6549:41">(<argument pos:start="6549:30" pos:end="6549:31"><expr pos:start="6549:30" pos:end="6549:31"><name pos:start="6549:30" pos:end="6549:31">ot</name></expr></argument>, <argument pos:start="6549:34" pos:end="6549:35"><expr pos:start="6549:34" pos:end="6549:35"><name pos:start="6549:34" pos:end="6549:35">t1</name></expr></argument>, <argument pos:start="6549:38" pos:end="6549:40"><expr pos:start="6549:38" pos:end="6549:40"><name pos:start="6549:38" pos:end="6549:40">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6551:13" pos:end="6551:45"><expr pos:start="6551:13" pos:end="6551:44"><call pos:start="6551:13" pos:end="6551:44"><name pos:start="6551:13" pos:end="6551:27">tcg_gen_andi_tl</name><argument_list pos:start="6551:28" pos:end="6551:44">(<argument pos:start="6551:29" pos:end="6551:36"><expr pos:start="6551:29" pos:end="6551:36"><name pos:start="6551:29" pos:end="6551:36">cpu_tmp0</name></expr></argument>, <argument pos:start="6551:39" pos:end="6551:40"><expr pos:start="6551:39" pos:end="6551:40"><name pos:start="6551:39" pos:end="6551:40">t0</name></expr></argument>, <argument pos:start="6551:43" pos:end="6551:43"><expr pos:start="6551:43" pos:end="6551:43"><literal type="number" pos:start="6551:43" pos:end="6551:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6553:13" pos:end="6553:39"><expr pos:start="6553:13" pos:end="6553:38"><call pos:start="6553:13" pos:end="6553:38"><name pos:start="6553:13" pos:end="6553:27">tcg_gen_andi_tl</name><argument_list pos:start="6553:28" pos:end="6553:38">(<argument pos:start="6553:29" pos:end="6553:30"><expr pos:start="6553:29" pos:end="6553:30"><name pos:start="6553:29" pos:end="6553:30">t1</name></expr></argument>, <argument pos:start="6553:33" pos:end="6553:34"><expr pos:start="6553:33" pos:end="6553:34"><name pos:start="6553:33" pos:end="6553:34">t1</name></expr></argument>, <argument pos:start="6553:37" pos:end="6553:37"><expr pos:start="6553:37" pos:end="6553:37"><literal type="number" pos:start="6553:37" pos:end="6553:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6555:13" pos:end="6555:35"><expr pos:start="6555:13" pos:end="6555:34"><call pos:start="6555:13" pos:end="6555:34"><name pos:start="6555:13" pos:end="6555:27">tcg_gen_movi_tl</name><argument_list pos:start="6555:28" pos:end="6555:34">(<argument pos:start="6555:29" pos:end="6555:30"><expr pos:start="6555:29" pos:end="6555:30"><name pos:start="6555:29" pos:end="6555:30">t2</name></expr></argument>, <argument pos:start="6555:33" pos:end="6555:33"><expr pos:start="6555:33" pos:end="6555:33"><literal type="number" pos:start="6555:33" pos:end="6555:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6557:13" pos:end="6557:37"><expr pos:start="6557:13" pos:end="6557:36"><name pos:start="6557:13" pos:end="6557:18">label1</name> <operator pos:start="6557:20" pos:end="6557:20">=</operator> <call pos:start="6557:22" pos:end="6557:36"><name pos:start="6557:22" pos:end="6557:34">gen_new_label</name><argument_list pos:start="6557:35" pos:end="6557:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6559:13" pos:end="6559:65"><expr pos:start="6559:13" pos:end="6559:64"><call pos:start="6559:13" pos:end="6559:64"><name pos:start="6559:13" pos:end="6559:29">tcg_gen_brcond_tl</name><argument_list pos:start="6559:30" pos:end="6559:64">(<argument pos:start="6559:31" pos:end="6559:41"><expr pos:start="6559:31" pos:end="6559:41"><name pos:start="6559:31" pos:end="6559:41">TCG_COND_GE</name></expr></argument>, <argument pos:start="6559:44" pos:end="6559:51"><expr pos:start="6559:44" pos:end="6559:51"><name pos:start="6559:44" pos:end="6559:51">cpu_tmp0</name></expr></argument>, <argument pos:start="6559:54" pos:end="6559:55"><expr pos:start="6559:54" pos:end="6559:55"><name pos:start="6559:54" pos:end="6559:55">t1</name></expr></argument>, <argument pos:start="6559:58" pos:end="6559:63"><expr pos:start="6559:58" pos:end="6559:63"><name pos:start="6559:58" pos:end="6559:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6561:13" pos:end="6561:40"><expr pos:start="6561:13" pos:end="6561:39"><call pos:start="6561:13" pos:end="6561:39"><name pos:start="6561:13" pos:end="6561:27">tcg_gen_andi_tl</name><argument_list pos:start="6561:28" pos:end="6561:39">(<argument pos:start="6561:29" pos:end="6561:30"><expr pos:start="6561:29" pos:end="6561:30"><name pos:start="6561:29" pos:end="6561:30">t0</name></expr></argument>, <argument pos:start="6561:33" pos:end="6561:34"><expr pos:start="6561:33" pos:end="6561:34"><name pos:start="6561:33" pos:end="6561:34">t0</name></expr></argument>, <argument pos:start="6561:37" pos:end="6561:38"><expr pos:start="6561:37" pos:end="6561:38"><operator pos:start="6561:37" pos:end="6561:37">~</operator><literal type="number" pos:start="6561:38" pos:end="6561:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6563:13" pos:end="6563:38"><expr pos:start="6563:13" pos:end="6563:37"><call pos:start="6563:13" pos:end="6563:37"><name pos:start="6563:13" pos:end="6563:25">tcg_gen_or_tl</name><argument_list pos:start="6563:26" pos:end="6563:37">(<argument pos:start="6563:27" pos:end="6563:28"><expr pos:start="6563:27" pos:end="6563:28"><name pos:start="6563:27" pos:end="6563:28">t0</name></expr></argument>, <argument pos:start="6563:31" pos:end="6563:32"><expr pos:start="6563:31" pos:end="6563:32"><name pos:start="6563:31" pos:end="6563:32">t0</name></expr></argument>, <argument pos:start="6563:35" pos:end="6563:36"><expr pos:start="6563:35" pos:end="6563:36"><name pos:start="6563:35" pos:end="6563:36">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6565:13" pos:end="6565:38"><expr pos:start="6565:13" pos:end="6565:37"><call pos:start="6565:13" pos:end="6565:37"><name pos:start="6565:13" pos:end="6565:27">tcg_gen_movi_tl</name><argument_list pos:start="6565:28" pos:end="6565:37">(<argument pos:start="6565:29" pos:end="6565:30"><expr pos:start="6565:29" pos:end="6565:30"><name pos:start="6565:29" pos:end="6565:30">t2</name></expr></argument>, <argument pos:start="6565:33" pos:end="6565:36"><expr pos:start="6565:33" pos:end="6565:36"><name pos:start="6565:33" pos:end="6565:36">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6567:13" pos:end="6567:34"><expr pos:start="6567:13" pos:end="6567:33"><call pos:start="6567:13" pos:end="6567:33"><name pos:start="6567:13" pos:end="6567:25">gen_set_label</name><argument_list pos:start="6567:26" pos:end="6567:33">(<argument pos:start="6567:27" pos:end="6567:32"><expr pos:start="6567:27" pos:end="6567:32"><name pos:start="6567:27" pos:end="6567:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6569:13" pos:end="6579:13"><if pos:start="6569:13" pos:end="6575:12">if <condition pos:start="6569:16" pos:end="6569:25">(<expr pos:start="6569:17" pos:end="6569:24"><name pos:start="6569:17" pos:end="6569:19">mod</name> <operator pos:start="6569:21" pos:end="6569:22">!=</operator> <literal type="number" pos:start="6569:24" pos:end="6569:24">3</literal></expr>)</condition> <block pos:start="6569:27" pos:end="6575:12">{<block_content pos:start="6571:17" pos:end="6573:34">

                <expr_stmt pos:start="6571:17" pos:end="6571:55"><expr pos:start="6571:17" pos:end="6571:54"><call pos:start="6571:17" pos:end="6571:54"><name pos:start="6571:17" pos:end="6571:27">gen_op_st_v</name><argument_list pos:start="6571:28" pos:end="6571:54">(<argument pos:start="6571:29" pos:end="6571:45"><expr pos:start="6571:29" pos:end="6571:45"><name pos:start="6571:29" pos:end="6571:30">ot</name> <operator pos:start="6571:32" pos:end="6571:32">+</operator> <name pos:start="6571:34" pos:end="6571:45"><name pos:start="6571:34" pos:end="6571:34">s</name><operator pos:start="6571:35" pos:end="6571:36">-&gt;</operator><name pos:start="6571:37" pos:end="6571:45">mem_index</name></name></expr></argument>, <argument pos:start="6571:48" pos:end="6571:49"><expr pos:start="6571:48" pos:end="6571:49"><name pos:start="6571:48" pos:end="6571:49">t0</name></expr></argument>, <argument pos:start="6571:52" pos:end="6571:53"><expr pos:start="6571:52" pos:end="6571:53"><name pos:start="6571:52" pos:end="6571:53">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6573:17" pos:end="6573:34"><expr pos:start="6573:17" pos:end="6573:33"><call pos:start="6573:17" pos:end="6573:33"><name pos:start="6573:17" pos:end="6573:29">tcg_temp_free</name><argument_list pos:start="6573:30" pos:end="6573:33">(<argument pos:start="6573:31" pos:end="6573:32"><expr pos:start="6573:31" pos:end="6573:32"><name pos:start="6573:31" pos:end="6573:32">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           </block_content>}</block></if> <else pos:start="6575:14" pos:end="6579:13">else <block pos:start="6575:19" pos:end="6579:13">{<block_content pos:start="6577:17" pos:end="6577:45">

                <expr_stmt pos:start="6577:17" pos:end="6577:45"><expr pos:start="6577:17" pos:end="6577:44"><call pos:start="6577:17" pos:end="6577:44"><name pos:start="6577:17" pos:end="6577:32">gen_op_mov_reg_v</name><argument_list pos:start="6577:33" pos:end="6577:44">(<argument pos:start="6577:34" pos:end="6577:35"><expr pos:start="6577:34" pos:end="6577:35"><name pos:start="6577:34" pos:end="6577:35">ot</name></expr></argument>, <argument pos:start="6577:38" pos:end="6577:39"><expr pos:start="6577:38" pos:end="6577:39"><name pos:start="6577:38" pos:end="6577:39">rm</name></expr></argument>, <argument pos:start="6577:42" pos:end="6577:43"><expr pos:start="6577:42" pos:end="6577:43"><name pos:start="6577:42" pos:end="6577:43">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="6581:13" pos:end="6583:43"><if pos:start="6581:13" pos:end="6583:43">if <condition pos:start="6581:16" pos:end="6581:42">(<expr pos:start="6581:17" pos:end="6581:41"><name pos:start="6581:17" pos:end="6581:24"><name pos:start="6581:17" pos:end="6581:17">s</name><operator pos:start="6581:18" pos:end="6581:19">-&gt;</operator><name pos:start="6581:20" pos:end="6581:24">cc_op</name></name> <operator pos:start="6581:26" pos:end="6581:27">!=</operator> <name pos:start="6581:29" pos:end="6581:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6583:17" pos:end="6583:43"><block_content pos:start="6583:17" pos:end="6583:43">

                <expr_stmt pos:start="6583:17" pos:end="6583:43"><expr pos:start="6583:17" pos:end="6583:42"><call pos:start="6583:17" pos:end="6583:42"><name pos:start="6583:17" pos:end="6583:32">gen_op_set_cc_op</name><argument_list pos:start="6583:33" pos:end="6583:42">(<argument pos:start="6583:34" pos:end="6583:41"><expr pos:start="6583:34" pos:end="6583:41"><name pos:start="6583:34" pos:end="6583:41"><name pos:start="6583:34" pos:end="6583:34">s</name><operator pos:start="6583:35" pos:end="6583:36">-&gt;</operator><name pos:start="6583:37" pos:end="6583:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6585:13" pos:end="6585:43"><expr pos:start="6585:13" pos:end="6585:42"><call pos:start="6585:13" pos:end="6585:42"><name pos:start="6585:13" pos:end="6585:30">gen_compute_eflags</name><argument_list pos:start="6585:31" pos:end="6585:42">(<argument pos:start="6585:32" pos:end="6585:41"><expr pos:start="6585:32" pos:end="6585:41"><name pos:start="6585:32" pos:end="6585:41">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6587:13" pos:end="6587:59"><expr pos:start="6587:13" pos:end="6587:58"><call pos:start="6587:13" pos:end="6587:58"><name pos:start="6587:13" pos:end="6587:27">tcg_gen_andi_tl</name><argument_list pos:start="6587:28" pos:end="6587:58">(<argument pos:start="6587:29" pos:end="6587:38"><expr pos:start="6587:29" pos:end="6587:38"><name pos:start="6587:29" pos:end="6587:38">cpu_cc_src</name></expr></argument>, <argument pos:start="6587:41" pos:end="6587:50"><expr pos:start="6587:41" pos:end="6587:50"><name pos:start="6587:41" pos:end="6587:50">cpu_cc_src</name></expr></argument>, <argument pos:start="6587:53" pos:end="6587:57"><expr pos:start="6587:53" pos:end="6587:57"><operator pos:start="6587:53" pos:end="6587:53">~</operator><name pos:start="6587:54" pos:end="6587:57">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6589:13" pos:end="6589:54"><expr pos:start="6589:13" pos:end="6589:53"><call pos:start="6589:13" pos:end="6589:53"><name pos:start="6589:13" pos:end="6589:25">tcg_gen_or_tl</name><argument_list pos:start="6589:26" pos:end="6589:53">(<argument pos:start="6589:27" pos:end="6589:36"><expr pos:start="6589:27" pos:end="6589:36"><name pos:start="6589:27" pos:end="6589:36">cpu_cc_src</name></expr></argument>, <argument pos:start="6589:39" pos:end="6589:48"><expr pos:start="6589:39" pos:end="6589:48"><name pos:start="6589:39" pos:end="6589:48">cpu_cc_src</name></expr></argument>, <argument pos:start="6589:51" pos:end="6589:52"><expr pos:start="6589:51" pos:end="6589:52"><name pos:start="6589:51" pos:end="6589:52">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6591:13" pos:end="6591:36"><expr pos:start="6591:13" pos:end="6591:35"><name pos:start="6591:13" pos:end="6591:20"><name pos:start="6591:13" pos:end="6591:13">s</name><operator pos:start="6591:14" pos:end="6591:15">-&gt;</operator><name pos:start="6591:16" pos:end="6591:20">cc_op</name></name> <operator pos:start="6591:22" pos:end="6591:22">=</operator> <name pos:start="6591:24" pos:end="6591:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6593:13" pos:end="6593:30"><expr pos:start="6593:13" pos:end="6593:29"><call pos:start="6593:13" pos:end="6593:29"><name pos:start="6593:13" pos:end="6593:25">tcg_temp_free</name><argument_list pos:start="6593:26" pos:end="6593:29">(<argument pos:start="6593:27" pos:end="6593:28"><expr pos:start="6593:27" pos:end="6593:28"><name pos:start="6593:27" pos:end="6593:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6595:13" pos:end="6595:30"><expr pos:start="6595:13" pos:end="6595:29"><call pos:start="6595:13" pos:end="6595:29"><name pos:start="6595:13" pos:end="6595:25">tcg_temp_free</name><argument_list pos:start="6595:26" pos:end="6595:29">(<argument pos:start="6595:27" pos:end="6595:28"><expr pos:start="6595:27" pos:end="6595:28"><name pos:start="6595:27" pos:end="6595:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6597:13" pos:end="6597:30"><expr pos:start="6597:13" pos:end="6597:29"><call pos:start="6597:13" pos:end="6597:29"><name pos:start="6597:13" pos:end="6597:25">tcg_temp_free</name><argument_list pos:start="6597:26" pos:end="6597:29">(<argument pos:start="6597:27" pos:end="6597:28"><expr pos:start="6597:27" pos:end="6597:28"><name pos:start="6597:27" pos:end="6597:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6601:9" pos:end="6601:14">break;</break>

    <case pos:start="6603:5" pos:end="6603:15">case <expr pos:start="6603:10" pos:end="6603:14"><literal type="number" pos:start="6603:10" pos:end="6603:14">0x102</literal></expr>:</case> <comment type="block" pos:start="6603:17" pos:end="6603:25">/* lar */</comment>

    <case pos:start="6605:5" pos:end="6605:15">case <expr pos:start="6605:10" pos:end="6605:14"><literal type="number" pos:start="6605:10" pos:end="6605:14">0x103</literal></expr>:</case> <comment type="block" pos:start="6605:17" pos:end="6605:25">/* lsl */</comment>

        <block pos:start="6607:9" pos:end="6655:9">{<block_content pos:start="6609:13" pos:end="6653:30">

            <decl_stmt pos:start="6609:13" pos:end="6609:23"><decl pos:start="6609:13" pos:end="6609:22"><type pos:start="6609:13" pos:end="6609:15"><name pos:start="6609:13" pos:end="6609:15">int</name></type> <name pos:start="6609:17" pos:end="6609:22">label1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="6611:13" pos:end="6611:20"><decl pos:start="6611:13" pos:end="6611:19"><type pos:start="6611:13" pos:end="6611:16"><name pos:start="6611:13" pos:end="6611:16">TCGv</name></type> <name pos:start="6611:18" pos:end="6611:19">t0</name></decl>;</decl_stmt>

            <if_stmt pos:start="6613:13" pos:end="6615:32"><if pos:start="6613:13" pos:end="6615:32">if <condition pos:start="6613:16" pos:end="6613:34">(<expr pos:start="6613:17" pos:end="6613:33"><operator pos:start="6613:17" pos:end="6613:17">!</operator><name pos:start="6613:18" pos:end="6613:22"><name pos:start="6613:18" pos:end="6613:18">s</name><operator pos:start="6613:19" pos:end="6613:20">-&gt;</operator><name pos:start="6613:21" pos:end="6613:22">pe</name></name> <operator pos:start="6613:24" pos:end="6613:25">||</operator> <name pos:start="6613:27" pos:end="6613:33"><name pos:start="6613:27" pos:end="6613:27">s</name><operator pos:start="6613:28" pos:end="6613:29">-&gt;</operator><name pos:start="6613:30" pos:end="6613:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="6615:17" pos:end="6615:32"><block_content pos:start="6615:17" pos:end="6615:32">

                <goto pos:start="6615:17" pos:end="6615:32">goto <name pos:start="6615:22" pos:end="6615:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6617:13" pos:end="6617:43"><expr pos:start="6617:13" pos:end="6617:42"><name pos:start="6617:13" pos:end="6617:14">ot</name> <operator pos:start="6617:16" pos:end="6617:16">=</operator> <ternary pos:start="6617:18" pos:end="6617:42"><condition pos:start="6617:18" pos:end="6617:24"><expr pos:start="6617:18" pos:end="6617:22"><name pos:start="6617:18" pos:end="6617:22">dflag</name></expr> ?</condition><then pos:start="6617:26" pos:end="6617:32"> <expr pos:start="6617:26" pos:end="6617:32"><name pos:start="6617:26" pos:end="6617:32">OT_LONG</name></expr> </then><else pos:start="6617:34" pos:end="6617:42">: <expr pos:start="6617:36" pos:end="6617:42"><name pos:start="6617:36" pos:end="6617:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="6619:13" pos:end="6619:59"><expr pos:start="6619:13" pos:end="6619:58"><name pos:start="6619:13" pos:end="6619:17">modrm</name> <operator pos:start="6619:19" pos:end="6619:19">=</operator> <call pos:start="6619:21" pos:end="6619:58"><name pos:start="6619:21" pos:end="6619:33">cpu_ldub_code</name><argument_list pos:start="6619:34" pos:end="6619:58">(<argument pos:start="6619:35" pos:end="6619:48"><expr pos:start="6619:35" pos:end="6619:48"><name pos:start="6619:35" pos:end="6619:48">cpu_single_env</name></expr></argument>, <argument pos:start="6619:51" pos:end="6619:57"><expr pos:start="6619:51" pos:end="6619:57"><name pos:start="6619:51" pos:end="6619:55"><name pos:start="6619:51" pos:end="6619:51">s</name><operator pos:start="6619:52" pos:end="6619:53">-&gt;</operator><name pos:start="6619:54" pos:end="6619:55">pc</name></name><operator pos:start="6619:56" pos:end="6619:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6621:13" pos:end="6621:45"><expr pos:start="6621:13" pos:end="6621:44"><name pos:start="6621:13" pos:end="6621:15">reg</name> <operator pos:start="6621:17" pos:end="6621:17">=</operator> <operator pos:start="6621:19" pos:end="6621:19">(</operator><operator pos:start="6621:20" pos:end="6621:20">(</operator><name pos:start="6621:21" pos:end="6621:25">modrm</name> <operator pos:start="6621:27" pos:end="6621:28">&gt;&gt;</operator> <literal type="number" pos:start="6621:30" pos:end="6621:30">3</literal><operator pos:start="6621:31" pos:end="6621:31">)</operator> <operator pos:start="6621:33" pos:end="6621:33">&amp;</operator> <literal type="number" pos:start="6621:35" pos:end="6621:35">7</literal><operator pos:start="6621:36" pos:end="6621:36">)</operator> <operator pos:start="6621:38" pos:end="6621:38">|</operator> <name pos:start="6621:40" pos:end="6621:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6623:13" pos:end="6623:58"><expr pos:start="6623:13" pos:end="6623:57"><call pos:start="6623:13" pos:end="6623:57"><name pos:start="6623:13" pos:end="6623:26">gen_ldst_modrm</name><argument_list pos:start="6623:27" pos:end="6623:57">(<argument pos:start="6623:28" pos:end="6623:28"><expr pos:start="6623:28" pos:end="6623:28"><name pos:start="6623:28" pos:end="6623:28">s</name></expr></argument>, <argument pos:start="6623:31" pos:end="6623:35"><expr pos:start="6623:31" pos:end="6623:35"><name pos:start="6623:31" pos:end="6623:35">modrm</name></expr></argument>, <argument pos:start="6623:38" pos:end="6623:44"><expr pos:start="6623:38" pos:end="6623:44"><name pos:start="6623:38" pos:end="6623:44">OT_WORD</name></expr></argument>, <argument pos:start="6623:47" pos:end="6623:53"><expr pos:start="6623:47" pos:end="6623:53"><name pos:start="6623:47" pos:end="6623:53">OR_TMP0</name></expr></argument>, <argument pos:start="6623:56" pos:end="6623:56"><expr pos:start="6623:56" pos:end="6623:56"><literal type="number" pos:start="6623:56" pos:end="6623:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6625:13" pos:end="6625:38"><expr pos:start="6625:13" pos:end="6625:37"><name pos:start="6625:13" pos:end="6625:14">t0</name> <operator pos:start="6625:16" pos:end="6625:16">=</operator> <call pos:start="6625:18" pos:end="6625:37"><name pos:start="6625:18" pos:end="6625:35">tcg_temp_local_new</name><argument_list pos:start="6625:36" pos:end="6625:37">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6627:13" pos:end="6629:43"><if pos:start="6627:13" pos:end="6629:43">if <condition pos:start="6627:16" pos:end="6627:42">(<expr pos:start="6627:17" pos:end="6627:41"><name pos:start="6627:17" pos:end="6627:24"><name pos:start="6627:17" pos:end="6627:17">s</name><operator pos:start="6627:18" pos:end="6627:19">-&gt;</operator><name pos:start="6627:20" pos:end="6627:24">cc_op</name></name> <operator pos:start="6627:26" pos:end="6627:27">!=</operator> <name pos:start="6627:29" pos:end="6627:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6629:17" pos:end="6629:43"><block_content pos:start="6629:17" pos:end="6629:43">

                <expr_stmt pos:start="6629:17" pos:end="6629:43"><expr pos:start="6629:17" pos:end="6629:42"><call pos:start="6629:17" pos:end="6629:42"><name pos:start="6629:17" pos:end="6629:32">gen_op_set_cc_op</name><argument_list pos:start="6629:33" pos:end="6629:42">(<argument pos:start="6629:34" pos:end="6629:41"><expr pos:start="6629:34" pos:end="6629:41"><name pos:start="6629:34" pos:end="6629:41"><name pos:start="6629:34" pos:end="6629:34">s</name><operator pos:start="6629:35" pos:end="6629:36">-&gt;</operator><name pos:start="6629:37" pos:end="6629:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="6631:13" pos:end="6639:13"><if pos:start="6631:13" pos:end="6635:13">if <condition pos:start="6631:16" pos:end="6631:27">(<expr pos:start="6631:17" pos:end="6631:26"><name pos:start="6631:17" pos:end="6631:17">b</name> <operator pos:start="6631:19" pos:end="6631:20">==</operator> <literal type="number" pos:start="6631:22" pos:end="6631:26">0x102</literal></expr>)</condition> <block pos:start="6631:29" pos:end="6635:13">{<block_content pos:start="6633:17" pos:end="6633:54">

                <expr_stmt pos:start="6633:17" pos:end="6633:54"><expr pos:start="6633:17" pos:end="6633:53"><call pos:start="6633:17" pos:end="6633:53"><name pos:start="6633:17" pos:end="6633:30">gen_helper_lar</name><argument_list pos:start="6633:31" pos:end="6633:53">(<argument pos:start="6633:32" pos:end="6633:33"><expr pos:start="6633:32" pos:end="6633:33"><name pos:start="6633:32" pos:end="6633:33">t0</name></expr></argument>, <argument pos:start="6633:36" pos:end="6633:42"><expr pos:start="6633:36" pos:end="6633:42"><name pos:start="6633:36" pos:end="6633:42">cpu_env</name></expr></argument>, <argument pos:start="6633:45" pos:end="6633:52"><expr pos:start="6633:45" pos:end="6633:52"><name pos:start="6633:45" pos:end="6633:52"><name pos:start="6633:45" pos:end="6633:49">cpu_T</name><index pos:start="6633:50" pos:end="6633:52">[<expr pos:start="6633:51" pos:end="6633:51"><literal type="number" pos:start="6633:51" pos:end="6633:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6635:15" pos:end="6639:13">else <block pos:start="6635:20" pos:end="6639:13">{<block_content pos:start="6637:17" pos:end="6637:54">

                <expr_stmt pos:start="6637:17" pos:end="6637:54"><expr pos:start="6637:17" pos:end="6637:53"><call pos:start="6637:17" pos:end="6637:53"><name pos:start="6637:17" pos:end="6637:30">gen_helper_lsl</name><argument_list pos:start="6637:31" pos:end="6637:53">(<argument pos:start="6637:32" pos:end="6637:33"><expr pos:start="6637:32" pos:end="6637:33"><name pos:start="6637:32" pos:end="6637:33">t0</name></expr></argument>, <argument pos:start="6637:36" pos:end="6637:42"><expr pos:start="6637:36" pos:end="6637:42"><name pos:start="6637:36" pos:end="6637:42">cpu_env</name></expr></argument>, <argument pos:start="6637:45" pos:end="6637:52"><expr pos:start="6637:45" pos:end="6637:52"><name pos:start="6637:45" pos:end="6637:52"><name pos:start="6637:45" pos:end="6637:49">cpu_T</name><index pos:start="6637:50" pos:end="6637:52">[<expr pos:start="6637:51" pos:end="6637:51"><literal type="number" pos:start="6637:51" pos:end="6637:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6641:13" pos:end="6641:56"><expr pos:start="6641:13" pos:end="6641:55"><call pos:start="6641:13" pos:end="6641:55"><name pos:start="6641:13" pos:end="6641:27">tcg_gen_andi_tl</name><argument_list pos:start="6641:28" pos:end="6641:55">(<argument pos:start="6641:29" pos:end="6641:36"><expr pos:start="6641:29" pos:end="6641:36"><name pos:start="6641:29" pos:end="6641:36">cpu_tmp0</name></expr></argument>, <argument pos:start="6641:39" pos:end="6641:48"><expr pos:start="6641:39" pos:end="6641:48"><name pos:start="6641:39" pos:end="6641:48">cpu_cc_src</name></expr></argument>, <argument pos:start="6641:51" pos:end="6641:54"><expr pos:start="6641:51" pos:end="6641:54"><name pos:start="6641:51" pos:end="6641:54">CC_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6643:13" pos:end="6643:37"><expr pos:start="6643:13" pos:end="6643:36"><name pos:start="6643:13" pos:end="6643:18">label1</name> <operator pos:start="6643:20" pos:end="6643:20">=</operator> <call pos:start="6643:22" pos:end="6643:36"><name pos:start="6643:22" pos:end="6643:34">gen_new_label</name><argument_list pos:start="6643:35" pos:end="6643:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6645:13" pos:end="6645:65"><expr pos:start="6645:13" pos:end="6645:64"><call pos:start="6645:13" pos:end="6645:64"><name pos:start="6645:13" pos:end="6645:30">tcg_gen_brcondi_tl</name><argument_list pos:start="6645:31" pos:end="6645:64">(<argument pos:start="6645:32" pos:end="6645:42"><expr pos:start="6645:32" pos:end="6645:42"><name pos:start="6645:32" pos:end="6645:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="6645:45" pos:end="6645:52"><expr pos:start="6645:45" pos:end="6645:52"><name pos:start="6645:45" pos:end="6645:52">cpu_tmp0</name></expr></argument>, <argument pos:start="6645:55" pos:end="6645:55"><expr pos:start="6645:55" pos:end="6645:55"><literal type="number" pos:start="6645:55" pos:end="6645:55">0</literal></expr></argument>, <argument pos:start="6645:58" pos:end="6645:63"><expr pos:start="6645:58" pos:end="6645:63"><name pos:start="6645:58" pos:end="6645:63">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6647:13" pos:end="6647:42"><expr pos:start="6647:13" pos:end="6647:41"><call pos:start="6647:13" pos:end="6647:41"><name pos:start="6647:13" pos:end="6647:28">gen_op_mov_reg_v</name><argument_list pos:start="6647:29" pos:end="6647:41">(<argument pos:start="6647:30" pos:end="6647:31"><expr pos:start="6647:30" pos:end="6647:31"><name pos:start="6647:30" pos:end="6647:31">ot</name></expr></argument>, <argument pos:start="6647:34" pos:end="6647:36"><expr pos:start="6647:34" pos:end="6647:36"><name pos:start="6647:34" pos:end="6647:36">reg</name></expr></argument>, <argument pos:start="6647:39" pos:end="6647:40"><expr pos:start="6647:39" pos:end="6647:40"><name pos:start="6647:39" pos:end="6647:40">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6649:13" pos:end="6649:34"><expr pos:start="6649:13" pos:end="6649:33"><call pos:start="6649:13" pos:end="6649:33"><name pos:start="6649:13" pos:end="6649:25">gen_set_label</name><argument_list pos:start="6649:26" pos:end="6649:33">(<argument pos:start="6649:27" pos:end="6649:32"><expr pos:start="6649:27" pos:end="6649:32"><name pos:start="6649:27" pos:end="6649:32">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6651:13" pos:end="6651:36"><expr pos:start="6651:13" pos:end="6651:35"><name pos:start="6651:13" pos:end="6651:20"><name pos:start="6651:13" pos:end="6651:13">s</name><operator pos:start="6651:14" pos:end="6651:15">-&gt;</operator><name pos:start="6651:16" pos:end="6651:20">cc_op</name></name> <operator pos:start="6651:22" pos:end="6651:22">=</operator> <name pos:start="6651:24" pos:end="6651:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6653:13" pos:end="6653:30"><expr pos:start="6653:13" pos:end="6653:29"><call pos:start="6653:13" pos:end="6653:29"><name pos:start="6653:13" pos:end="6653:25">tcg_temp_free</name><argument_list pos:start="6653:26" pos:end="6653:29">(<argument pos:start="6653:27" pos:end="6653:28"><expr pos:start="6653:27" pos:end="6653:28"><name pos:start="6653:27" pos:end="6653:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6657:9" pos:end="6657:14">break;</break>

    <case pos:start="6659:5" pos:end="6659:15">case <expr pos:start="6659:10" pos:end="6659:14"><literal type="number" pos:start="6659:10" pos:end="6659:14">0x118</literal></expr>:</case>

        <expr_stmt pos:start="6661:9" pos:end="6661:55"><expr pos:start="6661:9" pos:end="6661:54"><name pos:start="6661:9" pos:end="6661:13">modrm</name> <operator pos:start="6661:15" pos:end="6661:15">=</operator> <call pos:start="6661:17" pos:end="6661:54"><name pos:start="6661:17" pos:end="6661:29">cpu_ldub_code</name><argument_list pos:start="6661:30" pos:end="6661:54">(<argument pos:start="6661:31" pos:end="6661:44"><expr pos:start="6661:31" pos:end="6661:44"><name pos:start="6661:31" pos:end="6661:44">cpu_single_env</name></expr></argument>, <argument pos:start="6661:47" pos:end="6661:53"><expr pos:start="6661:47" pos:end="6661:53"><name pos:start="6661:47" pos:end="6661:51"><name pos:start="6661:47" pos:end="6661:47">s</name><operator pos:start="6661:48" pos:end="6661:49">-&gt;</operator><name pos:start="6661:50" pos:end="6661:51">pc</name></name><operator pos:start="6661:52" pos:end="6661:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6663:9" pos:end="6663:31"><expr pos:start="6663:9" pos:end="6663:30"><name pos:start="6663:9" pos:end="6663:11">mod</name> <operator pos:start="6663:13" pos:end="6663:13">=</operator> <operator pos:start="6663:15" pos:end="6663:15">(</operator><name pos:start="6663:16" pos:end="6663:20">modrm</name> <operator pos:start="6663:22" pos:end="6663:23">&gt;&gt;</operator> <literal type="number" pos:start="6663:25" pos:end="6663:25">6</literal><operator pos:start="6663:26" pos:end="6663:26">)</operator> <operator pos:start="6663:28" pos:end="6663:28">&amp;</operator> <literal type="number" pos:start="6663:30" pos:end="6663:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="6665:9" pos:end="6665:30"><expr pos:start="6665:9" pos:end="6665:29"><name pos:start="6665:9" pos:end="6665:10">op</name> <operator pos:start="6665:12" pos:end="6665:12">=</operator> <operator pos:start="6665:14" pos:end="6665:14">(</operator><name pos:start="6665:15" pos:end="6665:19">modrm</name> <operator pos:start="6665:21" pos:end="6665:22">&gt;&gt;</operator> <literal type="number" pos:start="6665:24" pos:end="6665:24">3</literal><operator pos:start="6665:25" pos:end="6665:25">)</operator> <operator pos:start="6665:27" pos:end="6665:27">&amp;</operator> <literal type="number" pos:start="6665:29" pos:end="6665:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="6667:9" pos:end="6693:9">switch<condition pos:start="6667:15" pos:end="6667:18">(<expr pos:start="6667:16" pos:end="6667:17"><name pos:start="6667:16" pos:end="6667:17">op</name></expr>)</condition> <block pos:start="6667:20" pos:end="6693:9">{<block_content pos:start="6669:9" pos:end="6691:18">

        <case pos:start="6669:9" pos:end="6669:15">case <expr pos:start="6669:14" pos:end="6669:14"><literal type="number" pos:start="6669:14" pos:end="6669:14">0</literal></expr>:</case> <comment type="block" pos:start="6669:17" pos:end="6669:33">/* prefetchnta */</comment>

        <case pos:start="6671:9" pos:end="6671:15">case <expr pos:start="6671:14" pos:end="6671:14"><literal type="number" pos:start="6671:14" pos:end="6671:14">1</literal></expr>:</case> <comment type="block" pos:start="6671:17" pos:end="6671:33">/* prefetchnt0 */</comment>

        <case pos:start="6673:9" pos:end="6673:15">case <expr pos:start="6673:14" pos:end="6673:14"><literal type="number" pos:start="6673:14" pos:end="6673:14">2</literal></expr>:</case> <comment type="block" pos:start="6673:17" pos:end="6673:33">/* prefetchnt0 */</comment>

        <case pos:start="6675:9" pos:end="6675:15">case <expr pos:start="6675:14" pos:end="6675:14"><literal type="number" pos:start="6675:14" pos:end="6675:14">3</literal></expr>:</case> <comment type="block" pos:start="6675:17" pos:end="6675:33">/* prefetchnt0 */</comment>

            <if_stmt pos:start="6677:13" pos:end="6679:32"><if pos:start="6677:13" pos:end="6679:32">if <condition pos:start="6677:16" pos:end="6677:25">(<expr pos:start="6677:17" pos:end="6677:24"><name pos:start="6677:17" pos:end="6677:19">mod</name> <operator pos:start="6677:21" pos:end="6677:22">==</operator> <literal type="number" pos:start="6677:24" pos:end="6677:24">3</literal></expr>)</condition><block type="pseudo" pos:start="6679:17" pos:end="6679:32"><block_content pos:start="6679:17" pos:end="6679:32">

                <goto pos:start="6679:17" pos:end="6679:32">goto <name pos:start="6679:22" pos:end="6679:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6681:13" pos:end="6681:61"><expr pos:start="6681:13" pos:end="6681:60"><call pos:start="6681:13" pos:end="6681:60"><name pos:start="6681:13" pos:end="6681:25">gen_lea_modrm</name><argument_list pos:start="6681:26" pos:end="6681:60">(<argument pos:start="6681:27" pos:end="6681:27"><expr pos:start="6681:27" pos:end="6681:27"><name pos:start="6681:27" pos:end="6681:27">s</name></expr></argument>, <argument pos:start="6681:30" pos:end="6681:34"><expr pos:start="6681:30" pos:end="6681:34"><name pos:start="6681:30" pos:end="6681:34">modrm</name></expr></argument>, <argument pos:start="6681:37" pos:end="6681:45"><expr pos:start="6681:37" pos:end="6681:45"><operator pos:start="6681:37" pos:end="6681:37">&amp;</operator><name pos:start="6681:38" pos:end="6681:45">reg_addr</name></expr></argument>, <argument pos:start="6681:48" pos:end="6681:59"><expr pos:start="6681:48" pos:end="6681:59"><operator pos:start="6681:48" pos:end="6681:48">&amp;</operator><name pos:start="6681:49" pos:end="6681:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6683:13" pos:end="6683:36">/* nothing more to do */</comment>

            <break pos:start="6685:13" pos:end="6685:18">break;</break>

        <default pos:start="6687:9" pos:end="6687:16">default:</default> <comment type="block" pos:start="6687:18" pos:end="6687:39">/* nop (multi byte) */</comment>

            <expr_stmt pos:start="6689:13" pos:end="6689:36"><expr pos:start="6689:13" pos:end="6689:35"><call pos:start="6689:13" pos:end="6689:35"><name pos:start="6689:13" pos:end="6689:25">gen_nop_modrm</name><argument_list pos:start="6689:26" pos:end="6689:35">(<argument pos:start="6689:27" pos:end="6689:27"><expr pos:start="6689:27" pos:end="6689:27"><name pos:start="6689:27" pos:end="6689:27">s</name></expr></argument>, <argument pos:start="6689:30" pos:end="6689:34"><expr pos:start="6689:30" pos:end="6689:34"><name pos:start="6689:30" pos:end="6689:34">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6691:13" pos:end="6691:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="6695:9" pos:end="6695:14">break;</break>

    <case pos:start="6697:5" pos:end="6697:25">case <expr pos:start="6697:10" pos:end="6697:24"><literal type="number" pos:start="6697:10" pos:end="6697:14">0x119</literal> <operator pos:start="6697:16" pos:end="6697:18">...</operator> <literal type="number" pos:start="6697:20" pos:end="6697:24">0x11f</literal></expr>:</case> <comment type="block" pos:start="6697:27" pos:end="6697:48">/* nop (multi byte) */</comment>

        <expr_stmt pos:start="6699:9" pos:end="6699:55"><expr pos:start="6699:9" pos:end="6699:54"><name pos:start="6699:9" pos:end="6699:13">modrm</name> <operator pos:start="6699:15" pos:end="6699:15">=</operator> <call pos:start="6699:17" pos:end="6699:54"><name pos:start="6699:17" pos:end="6699:29">cpu_ldub_code</name><argument_list pos:start="6699:30" pos:end="6699:54">(<argument pos:start="6699:31" pos:end="6699:44"><expr pos:start="6699:31" pos:end="6699:44"><name pos:start="6699:31" pos:end="6699:44">cpu_single_env</name></expr></argument>, <argument pos:start="6699:47" pos:end="6699:53"><expr pos:start="6699:47" pos:end="6699:53"><name pos:start="6699:47" pos:end="6699:51"><name pos:start="6699:47" pos:end="6699:47">s</name><operator pos:start="6699:48" pos:end="6699:49">-&gt;</operator><name pos:start="6699:50" pos:end="6699:51">pc</name></name><operator pos:start="6699:52" pos:end="6699:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6701:9" pos:end="6701:32"><expr pos:start="6701:9" pos:end="6701:31"><call pos:start="6701:9" pos:end="6701:31"><name pos:start="6701:9" pos:end="6701:21">gen_nop_modrm</name><argument_list pos:start="6701:22" pos:end="6701:31">(<argument pos:start="6701:23" pos:end="6701:23"><expr pos:start="6701:23" pos:end="6701:23"><name pos:start="6701:23" pos:end="6701:23">s</name></expr></argument>, <argument pos:start="6701:26" pos:end="6701:30"><expr pos:start="6701:26" pos:end="6701:30"><name pos:start="6701:26" pos:end="6701:30">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6703:9" pos:end="6703:14">break;</break>

    <case pos:start="6705:5" pos:end="6705:15">case <expr pos:start="6705:10" pos:end="6705:14"><literal type="number" pos:start="6705:10" pos:end="6705:14">0x120</literal></expr>:</case> <comment type="block" pos:start="6705:17" pos:end="6705:34">/* mov reg, crN */</comment>

    <case pos:start="6707:5" pos:end="6707:15">case <expr pos:start="6707:10" pos:end="6707:14"><literal type="number" pos:start="6707:10" pos:end="6707:14">0x122</literal></expr>:</case> <comment type="block" pos:start="6707:17" pos:end="6707:34">/* mov crN, reg */</comment>

        <if_stmt pos:start="6709:9" pos:end="6793:9"><if pos:start="6709:9" pos:end="6713:9">if <condition pos:start="6709:12" pos:end="6709:24">(<expr pos:start="6709:13" pos:end="6709:23"><name pos:start="6709:13" pos:end="6709:18"><name pos:start="6709:13" pos:end="6709:13">s</name><operator pos:start="6709:14" pos:end="6709:15">-&gt;</operator><name pos:start="6709:16" pos:end="6709:18">cpl</name></name> <operator pos:start="6709:20" pos:end="6709:21">!=</operator> <literal type="number" pos:start="6709:23" pos:end="6709:23">0</literal></expr>)</condition> <block pos:start="6709:26" pos:end="6713:9">{<block_content pos:start="6711:13" pos:end="6711:64">

            <expr_stmt pos:start="6711:13" pos:end="6711:64"><expr pos:start="6711:13" pos:end="6711:63"><call pos:start="6711:13" pos:end="6711:63"><name pos:start="6711:13" pos:end="6711:25">gen_exception</name><argument_list pos:start="6711:26" pos:end="6711:63">(<argument pos:start="6711:27" pos:end="6711:27"><expr pos:start="6711:27" pos:end="6711:27"><name pos:start="6711:27" pos:end="6711:27">s</name></expr></argument>, <argument pos:start="6711:30" pos:end="6711:39"><expr pos:start="6711:30" pos:end="6711:39"><name pos:start="6711:30" pos:end="6711:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6711:42" pos:end="6711:62"><expr pos:start="6711:42" pos:end="6711:62"><name pos:start="6711:42" pos:end="6711:49">pc_start</name> <operator pos:start="6711:51" pos:end="6711:51">-</operator> <name pos:start="6711:53" pos:end="6711:62"><name pos:start="6711:53" pos:end="6711:53">s</name><operator pos:start="6711:54" pos:end="6711:55">-&gt;</operator><name pos:start="6711:56" pos:end="6711:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6713:11" pos:end="6793:9">else <block pos:start="6713:16" pos:end="6793:9">{<block_content pos:start="6715:13" pos:end="6791:13">

            <expr_stmt pos:start="6715:13" pos:end="6715:59"><expr pos:start="6715:13" pos:end="6715:58"><name pos:start="6715:13" pos:end="6715:17">modrm</name> <operator pos:start="6715:19" pos:end="6715:19">=</operator> <call pos:start="6715:21" pos:end="6715:58"><name pos:start="6715:21" pos:end="6715:33">cpu_ldub_code</name><argument_list pos:start="6715:34" pos:end="6715:58">(<argument pos:start="6715:35" pos:end="6715:48"><expr pos:start="6715:35" pos:end="6715:48"><name pos:start="6715:35" pos:end="6715:48">cpu_single_env</name></expr></argument>, <argument pos:start="6715:51" pos:end="6715:57"><expr pos:start="6715:51" pos:end="6715:57"><name pos:start="6715:51" pos:end="6715:55"><name pos:start="6715:51" pos:end="6715:51">s</name><operator pos:start="6715:52" pos:end="6715:53">-&gt;</operator><name pos:start="6715:54" pos:end="6715:55">pc</name></name><operator pos:start="6715:56" pos:end="6715:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6717:13" pos:end="6725:15">/* Ignore the mod bits (assume (modrm&amp;0xc0)==0xc0).

             * AMD documentation (24594.pdf) and testing of

             * intel 386 and 486 processors all show that the mod bits

             * are assumed to be 1's, regardless of actual values.

             */</comment>

            <expr_stmt pos:start="6727:13" pos:end="6727:40"><expr pos:start="6727:13" pos:end="6727:39"><name pos:start="6727:13" pos:end="6727:14">rm</name> <operator pos:start="6727:16" pos:end="6727:16">=</operator> <operator pos:start="6727:18" pos:end="6727:18">(</operator><name pos:start="6727:19" pos:end="6727:23">modrm</name> <operator pos:start="6727:25" pos:end="6727:25">&amp;</operator> <literal type="number" pos:start="6727:27" pos:end="6727:27">7</literal><operator pos:start="6727:28" pos:end="6727:28">)</operator> <operator pos:start="6727:30" pos:end="6727:30">|</operator> <call pos:start="6727:32" pos:end="6727:39"><name pos:start="6727:32" pos:end="6727:36">REX_B</name><argument_list pos:start="6727:37" pos:end="6727:39">(<argument pos:start="6727:38" pos:end="6727:38"><expr pos:start="6727:38" pos:end="6727:38"><name pos:start="6727:38" pos:end="6727:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6729:13" pos:end="6729:45"><expr pos:start="6729:13" pos:end="6729:44"><name pos:start="6729:13" pos:end="6729:15">reg</name> <operator pos:start="6729:17" pos:end="6729:17">=</operator> <operator pos:start="6729:19" pos:end="6729:19">(</operator><operator pos:start="6729:20" pos:end="6729:20">(</operator><name pos:start="6729:21" pos:end="6729:25">modrm</name> <operator pos:start="6729:27" pos:end="6729:28">&gt;&gt;</operator> <literal type="number" pos:start="6729:30" pos:end="6729:30">3</literal><operator pos:start="6729:31" pos:end="6729:31">)</operator> <operator pos:start="6729:33" pos:end="6729:33">&amp;</operator> <literal type="number" pos:start="6729:35" pos:end="6729:35">7</literal><operator pos:start="6729:36" pos:end="6729:36">)</operator> <operator pos:start="6729:38" pos:end="6729:38">|</operator> <name pos:start="6729:40" pos:end="6729:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6731:13" pos:end="6737:29"><if pos:start="6731:13" pos:end="6733:29">if <condition pos:start="6731:16" pos:end="6731:26">(<expr pos:start="6731:17" pos:end="6731:25"><call pos:start="6731:17" pos:end="6731:25"><name pos:start="6731:17" pos:end="6731:22">CODE64</name><argument_list pos:start="6731:23" pos:end="6731:25">(<argument pos:start="6731:24" pos:end="6731:24"><expr pos:start="6731:24" pos:end="6731:24"><name pos:start="6731:24" pos:end="6731:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6733:17" pos:end="6733:29"><block_content pos:start="6733:17" pos:end="6733:29">

                <expr_stmt pos:start="6733:17" pos:end="6733:29"><expr pos:start="6733:17" pos:end="6733:28"><name pos:start="6733:17" pos:end="6733:18">ot</name> <operator pos:start="6733:20" pos:end="6733:20">=</operator> <name pos:start="6733:22" pos:end="6733:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="6735:13" pos:end="6737:29">else<block type="pseudo" pos:start="6737:17" pos:end="6737:29"><block_content pos:start="6737:17" pos:end="6737:29">

                <expr_stmt pos:start="6737:17" pos:end="6737:29"><expr pos:start="6737:17" pos:end="6737:28"><name pos:start="6737:17" pos:end="6737:18">ot</name> <operator pos:start="6737:20" pos:end="6737:20">=</operator> <name pos:start="6737:22" pos:end="6737:28">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="6739:13" pos:end="6745:13"><if pos:start="6739:13" pos:end="6745:13">if <condition pos:start="6739:16" pos:end="6741:61">(<expr pos:start="6739:17" pos:end="6741:60"><operator pos:start="6739:17" pos:end="6739:17">(</operator><name pos:start="6739:18" pos:end="6739:25">prefixes</name> <operator pos:start="6739:27" pos:end="6739:27">&amp;</operator> <name pos:start="6739:29" pos:end="6739:39">PREFIX_LOCK</name><operator pos:start="6739:40" pos:end="6739:40">)</operator> <operator pos:start="6739:42" pos:end="6739:43">&amp;&amp;</operator> <operator pos:start="6739:45" pos:end="6739:45">(</operator><name pos:start="6739:46" pos:end="6739:48">reg</name> <operator pos:start="6739:50" pos:end="6739:51">==</operator> <literal type="number" pos:start="6739:53" pos:end="6739:53">0</literal><operator pos:start="6739:54" pos:end="6739:54">)</operator> <operator pos:start="6739:56" pos:end="6739:57">&amp;&amp;</operator>

                <operator pos:start="6741:17" pos:end="6741:17">(</operator><name pos:start="6741:18" pos:end="6741:39"><name pos:start="6741:18" pos:end="6741:18">s</name><operator pos:start="6741:19" pos:end="6741:20">-&gt;</operator><name pos:start="6741:21" pos:end="6741:39">cpuid_ext3_features</name></name> <operator pos:start="6741:41" pos:end="6741:41">&amp;</operator> <name pos:start="6741:43" pos:end="6741:59">CPUID_EXT3_CR8LEG</name><operator pos:start="6741:60" pos:end="6741:60">)</operator></expr>)</condition> <block pos:start="6741:63" pos:end="6745:13">{<block_content pos:start="6743:17" pos:end="6743:24">

                <expr_stmt pos:start="6743:17" pos:end="6743:24"><expr pos:start="6743:17" pos:end="6743:23"><name pos:start="6743:17" pos:end="6743:19">reg</name> <operator pos:start="6743:21" pos:end="6743:21">=</operator> <literal type="number" pos:start="6743:23" pos:end="6743:23">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="6747:13" pos:end="6791:13">switch<condition pos:start="6747:19" pos:end="6747:23">(<expr pos:start="6747:20" pos:end="6747:22"><name pos:start="6747:20" pos:end="6747:22">reg</name></expr>)</condition> <block pos:start="6747:25" pos:end="6791:13">{<block_content pos:start="6749:13" pos:end="6789:32">

            <case pos:start="6749:13" pos:end="6749:19">case <expr pos:start="6749:18" pos:end="6749:18"><literal type="number" pos:start="6749:18" pos:end="6749:18">0</literal></expr>:</case>

            <case pos:start="6751:13" pos:end="6751:19">case <expr pos:start="6751:18" pos:end="6751:18"><literal type="number" pos:start="6751:18" pos:end="6751:18">2</literal></expr>:</case>

            <case pos:start="6753:13" pos:end="6753:19">case <expr pos:start="6753:18" pos:end="6753:18"><literal type="number" pos:start="6753:18" pos:end="6753:18">3</literal></expr>:</case>

            <case pos:start="6755:13" pos:end="6755:19">case <expr pos:start="6755:18" pos:end="6755:18"><literal type="number" pos:start="6755:18" pos:end="6755:18">4</literal></expr>:</case>

            <case pos:start="6757:13" pos:end="6757:19">case <expr pos:start="6757:18" pos:end="6757:18"><literal type="number" pos:start="6757:18" pos:end="6757:18">8</literal></expr>:</case>

                <if_stmt pos:start="6759:17" pos:end="6761:47"><if pos:start="6759:17" pos:end="6761:47">if <condition pos:start="6759:20" pos:end="6759:46">(<expr pos:start="6759:21" pos:end="6759:45"><name pos:start="6759:21" pos:end="6759:28"><name pos:start="6759:21" pos:end="6759:21">s</name><operator pos:start="6759:22" pos:end="6759:23">-&gt;</operator><name pos:start="6759:24" pos:end="6759:28">cc_op</name></name> <operator pos:start="6759:30" pos:end="6759:31">!=</operator> <name pos:start="6759:33" pos:end="6759:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6761:21" pos:end="6761:47"><block_content pos:start="6761:21" pos:end="6761:47">

                    <expr_stmt pos:start="6761:21" pos:end="6761:47"><expr pos:start="6761:21" pos:end="6761:46"><call pos:start="6761:21" pos:end="6761:46"><name pos:start="6761:21" pos:end="6761:36">gen_op_set_cc_op</name><argument_list pos:start="6761:37" pos:end="6761:46">(<argument pos:start="6761:38" pos:end="6761:45"><expr pos:start="6761:38" pos:end="6761:45"><name pos:start="6761:38" pos:end="6761:45"><name pos:start="6761:38" pos:end="6761:38">s</name><operator pos:start="6761:39" pos:end="6761:40">-&gt;</operator><name pos:start="6761:41" pos:end="6761:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6763:17" pos:end="6763:50"><expr pos:start="6763:17" pos:end="6763:49"><call pos:start="6763:17" pos:end="6763:49"><name pos:start="6763:17" pos:end="6763:26">gen_jmp_im</name><argument_list pos:start="6763:27" pos:end="6763:49">(<argument pos:start="6763:28" pos:end="6763:48"><expr pos:start="6763:28" pos:end="6763:48"><name pos:start="6763:28" pos:end="6763:35">pc_start</name> <operator pos:start="6763:37" pos:end="6763:37">-</operator> <name pos:start="6763:39" pos:end="6763:48"><name pos:start="6763:39" pos:end="6763:39">s</name><operator pos:start="6763:40" pos:end="6763:41">-&gt;</operator><name pos:start="6763:42" pos:end="6763:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6765:17" pos:end="6783:17"><if pos:start="6765:17" pos:end="6777:17">if <condition pos:start="6765:20" pos:end="6765:26">(<expr pos:start="6765:21" pos:end="6765:25"><name pos:start="6765:21" pos:end="6765:21">b</name> <operator pos:start="6765:23" pos:end="6765:23">&amp;</operator> <literal type="number" pos:start="6765:25" pos:end="6765:25">2</literal></expr>)</condition> <block pos:start="6765:28" pos:end="6777:17">{<block_content pos:start="6767:21" pos:end="6775:31">

                    <expr_stmt pos:start="6767:21" pos:end="6767:49"><expr pos:start="6767:21" pos:end="6767:48"><call pos:start="6767:21" pos:end="6767:48"><name pos:start="6767:21" pos:end="6767:37">gen_op_mov_TN_reg</name><argument_list pos:start="6767:38" pos:end="6767:48">(<argument pos:start="6767:39" pos:end="6767:40"><expr pos:start="6767:39" pos:end="6767:40"><name pos:start="6767:39" pos:end="6767:40">ot</name></expr></argument>, <argument pos:start="6767:43" pos:end="6767:43"><expr pos:start="6767:43" pos:end="6767:43"><literal type="number" pos:start="6767:43" pos:end="6767:43">0</literal></expr></argument>, <argument pos:start="6767:46" pos:end="6767:47"><expr pos:start="6767:46" pos:end="6767:47"><name pos:start="6767:46" pos:end="6767:47">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6769:21" pos:end="6771:51"><expr pos:start="6769:21" pos:end="6771:50"><call pos:start="6769:21" pos:end="6771:50"><name pos:start="6769:21" pos:end="6769:40">gen_helper_write_crN</name><argument_list pos:start="6769:41" pos:end="6771:50">(<argument pos:start="6769:42" pos:end="6769:48"><expr pos:start="6769:42" pos:end="6769:48"><name pos:start="6769:42" pos:end="6769:48">cpu_env</name></expr></argument>, <argument pos:start="6769:51" pos:end="6769:68"><expr pos:start="6769:51" pos:end="6769:68"><call pos:start="6769:51" pos:end="6769:68"><name pos:start="6769:51" pos:end="6769:63">tcg_const_i32</name><argument_list pos:start="6769:64" pos:end="6769:68">(<argument pos:start="6769:65" pos:end="6769:67"><expr pos:start="6769:65" pos:end="6769:67"><name pos:start="6769:65" pos:end="6769:67">reg</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="6771:42" pos:end="6771:49"><expr pos:start="6771:42" pos:end="6771:49"><name pos:start="6771:42" pos:end="6771:49"><name pos:start="6771:42" pos:end="6771:46">cpu_T</name><index pos:start="6771:47" pos:end="6771:49">[<expr pos:start="6771:48" pos:end="6771:48"><literal type="number" pos:start="6771:48" pos:end="6771:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6773:21" pos:end="6773:51"><expr pos:start="6773:21" pos:end="6773:50"><call pos:start="6773:21" pos:end="6773:50"><name pos:start="6773:21" pos:end="6773:30">gen_jmp_im</name><argument_list pos:start="6773:31" pos:end="6773:50">(<argument pos:start="6773:32" pos:end="6773:49"><expr pos:start="6773:32" pos:end="6773:49"><name pos:start="6773:32" pos:end="6773:36"><name pos:start="6773:32" pos:end="6773:32">s</name><operator pos:start="6773:33" pos:end="6773:34">-&gt;</operator><name pos:start="6773:35" pos:end="6773:36">pc</name></name> <operator pos:start="6773:38" pos:end="6773:38">-</operator> <name pos:start="6773:40" pos:end="6773:49"><name pos:start="6773:40" pos:end="6773:40">s</name><operator pos:start="6773:41" pos:end="6773:42">-&gt;</operator><name pos:start="6773:43" pos:end="6773:49">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6775:21" pos:end="6775:31"><expr pos:start="6775:21" pos:end="6775:30"><call pos:start="6775:21" pos:end="6775:30"><name pos:start="6775:21" pos:end="6775:27">gen_eob</name><argument_list pos:start="6775:28" pos:end="6775:30">(<argument pos:start="6775:29" pos:end="6775:29"><expr pos:start="6775:29" pos:end="6775:29"><name pos:start="6775:29" pos:end="6775:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6777:19" pos:end="6783:17">else <block pos:start="6777:24" pos:end="6783:17">{<block_content pos:start="6779:21" pos:end="6781:46">

                    <expr_stmt pos:start="6779:21" pos:end="6779:79"><expr pos:start="6779:21" pos:end="6779:78"><call pos:start="6779:21" pos:end="6779:78"><name pos:start="6779:21" pos:end="6779:39">gen_helper_read_crN</name><argument_list pos:start="6779:40" pos:end="6779:78">(<argument pos:start="6779:41" pos:end="6779:48"><expr pos:start="6779:41" pos:end="6779:48"><name pos:start="6779:41" pos:end="6779:48"><name pos:start="6779:41" pos:end="6779:45">cpu_T</name><index pos:start="6779:46" pos:end="6779:48">[<expr pos:start="6779:47" pos:end="6779:47"><literal type="number" pos:start="6779:47" pos:end="6779:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6779:51" pos:end="6779:57"><expr pos:start="6779:51" pos:end="6779:57"><name pos:start="6779:51" pos:end="6779:57">cpu_env</name></expr></argument>, <argument pos:start="6779:60" pos:end="6779:77"><expr pos:start="6779:60" pos:end="6779:77"><call pos:start="6779:60" pos:end="6779:77"><name pos:start="6779:60" pos:end="6779:72">tcg_const_i32</name><argument_list pos:start="6779:73" pos:end="6779:77">(<argument pos:start="6779:74" pos:end="6779:76"><expr pos:start="6779:74" pos:end="6779:76"><name pos:start="6779:74" pos:end="6779:76">reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6781:21" pos:end="6781:46"><expr pos:start="6781:21" pos:end="6781:45"><call pos:start="6781:21" pos:end="6781:45"><name pos:start="6781:21" pos:end="6781:37">gen_op_mov_reg_T0</name><argument_list pos:start="6781:38" pos:end="6781:45">(<argument pos:start="6781:39" pos:end="6781:40"><expr pos:start="6781:39" pos:end="6781:40"><name pos:start="6781:39" pos:end="6781:40">ot</name></expr></argument>, <argument pos:start="6781:43" pos:end="6781:44"><expr pos:start="6781:43" pos:end="6781:44"><name pos:start="6781:43" pos:end="6781:44">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="6785:17" pos:end="6785:22">break;</break>

            <default pos:start="6787:13" pos:end="6787:20">default:</default>

                <goto pos:start="6789:17" pos:end="6789:32">goto <name pos:start="6789:22" pos:end="6789:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6795:9" pos:end="6795:14">break;</break>

    <case pos:start="6797:5" pos:end="6797:15">case <expr pos:start="6797:10" pos:end="6797:14"><literal type="number" pos:start="6797:10" pos:end="6797:14">0x121</literal></expr>:</case> <comment type="block" pos:start="6797:17" pos:end="6797:34">/* mov reg, drN */</comment>

    <case pos:start="6799:5" pos:end="6799:15">case <expr pos:start="6799:10" pos:end="6799:14"><literal type="number" pos:start="6799:10" pos:end="6799:14">0x123</literal></expr>:</case> <comment type="block" pos:start="6799:17" pos:end="6799:34">/* mov drN, reg */</comment>

        <if_stmt pos:start="6801:9" pos:end="6859:9"><if pos:start="6801:9" pos:end="6805:9">if <condition pos:start="6801:12" pos:end="6801:24">(<expr pos:start="6801:13" pos:end="6801:23"><name pos:start="6801:13" pos:end="6801:18"><name pos:start="6801:13" pos:end="6801:13">s</name><operator pos:start="6801:14" pos:end="6801:15">-&gt;</operator><name pos:start="6801:16" pos:end="6801:18">cpl</name></name> <operator pos:start="6801:20" pos:end="6801:21">!=</operator> <literal type="number" pos:start="6801:23" pos:end="6801:23">0</literal></expr>)</condition> <block pos:start="6801:26" pos:end="6805:9">{<block_content pos:start="6803:13" pos:end="6803:64">

            <expr_stmt pos:start="6803:13" pos:end="6803:64"><expr pos:start="6803:13" pos:end="6803:63"><call pos:start="6803:13" pos:end="6803:63"><name pos:start="6803:13" pos:end="6803:25">gen_exception</name><argument_list pos:start="6803:26" pos:end="6803:63">(<argument pos:start="6803:27" pos:end="6803:27"><expr pos:start="6803:27" pos:end="6803:27"><name pos:start="6803:27" pos:end="6803:27">s</name></expr></argument>, <argument pos:start="6803:30" pos:end="6803:39"><expr pos:start="6803:30" pos:end="6803:39"><name pos:start="6803:30" pos:end="6803:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6803:42" pos:end="6803:62"><expr pos:start="6803:42" pos:end="6803:62"><name pos:start="6803:42" pos:end="6803:49">pc_start</name> <operator pos:start="6803:51" pos:end="6803:51">-</operator> <name pos:start="6803:53" pos:end="6803:62"><name pos:start="6803:53" pos:end="6803:53">s</name><operator pos:start="6803:54" pos:end="6803:55">-&gt;</operator><name pos:start="6803:56" pos:end="6803:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6805:11" pos:end="6859:9">else <block pos:start="6805:16" pos:end="6859:9">{<block_content pos:start="6807:13" pos:end="6857:13">

            <expr_stmt pos:start="6807:13" pos:end="6807:59"><expr pos:start="6807:13" pos:end="6807:58"><name pos:start="6807:13" pos:end="6807:17">modrm</name> <operator pos:start="6807:19" pos:end="6807:19">=</operator> <call pos:start="6807:21" pos:end="6807:58"><name pos:start="6807:21" pos:end="6807:33">cpu_ldub_code</name><argument_list pos:start="6807:34" pos:end="6807:58">(<argument pos:start="6807:35" pos:end="6807:48"><expr pos:start="6807:35" pos:end="6807:48"><name pos:start="6807:35" pos:end="6807:48">cpu_single_env</name></expr></argument>, <argument pos:start="6807:51" pos:end="6807:57"><expr pos:start="6807:51" pos:end="6807:57"><name pos:start="6807:51" pos:end="6807:55"><name pos:start="6807:51" pos:end="6807:51">s</name><operator pos:start="6807:52" pos:end="6807:53">-&gt;</operator><name pos:start="6807:54" pos:end="6807:55">pc</name></name><operator pos:start="6807:56" pos:end="6807:57">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6809:13" pos:end="6817:15">/* Ignore the mod bits (assume (modrm&amp;0xc0)==0xc0).

             * AMD documentation (24594.pdf) and testing of

             * intel 386 and 486 processors all show that the mod bits

             * are assumed to be 1's, regardless of actual values.

             */</comment>

            <expr_stmt pos:start="6819:13" pos:end="6819:40"><expr pos:start="6819:13" pos:end="6819:39"><name pos:start="6819:13" pos:end="6819:14">rm</name> <operator pos:start="6819:16" pos:end="6819:16">=</operator> <operator pos:start="6819:18" pos:end="6819:18">(</operator><name pos:start="6819:19" pos:end="6819:23">modrm</name> <operator pos:start="6819:25" pos:end="6819:25">&amp;</operator> <literal type="number" pos:start="6819:27" pos:end="6819:27">7</literal><operator pos:start="6819:28" pos:end="6819:28">)</operator> <operator pos:start="6819:30" pos:end="6819:30">|</operator> <call pos:start="6819:32" pos:end="6819:39"><name pos:start="6819:32" pos:end="6819:36">REX_B</name><argument_list pos:start="6819:37" pos:end="6819:39">(<argument pos:start="6819:38" pos:end="6819:38"><expr pos:start="6819:38" pos:end="6819:38"><name pos:start="6819:38" pos:end="6819:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6821:13" pos:end="6821:45"><expr pos:start="6821:13" pos:end="6821:44"><name pos:start="6821:13" pos:end="6821:15">reg</name> <operator pos:start="6821:17" pos:end="6821:17">=</operator> <operator pos:start="6821:19" pos:end="6821:19">(</operator><operator pos:start="6821:20" pos:end="6821:20">(</operator><name pos:start="6821:21" pos:end="6821:25">modrm</name> <operator pos:start="6821:27" pos:end="6821:28">&gt;&gt;</operator> <literal type="number" pos:start="6821:30" pos:end="6821:30">3</literal><operator pos:start="6821:31" pos:end="6821:31">)</operator> <operator pos:start="6821:33" pos:end="6821:33">&amp;</operator> <literal type="number" pos:start="6821:35" pos:end="6821:35">7</literal><operator pos:start="6821:36" pos:end="6821:36">)</operator> <operator pos:start="6821:38" pos:end="6821:38">|</operator> <name pos:start="6821:40" pos:end="6821:44">rex_r</name></expr>;</expr_stmt>

            <if_stmt pos:start="6823:13" pos:end="6829:29"><if pos:start="6823:13" pos:end="6825:29">if <condition pos:start="6823:16" pos:end="6823:26">(<expr pos:start="6823:17" pos:end="6823:25"><call pos:start="6823:17" pos:end="6823:25"><name pos:start="6823:17" pos:end="6823:22">CODE64</name><argument_list pos:start="6823:23" pos:end="6823:25">(<argument pos:start="6823:24" pos:end="6823:24"><expr pos:start="6823:24" pos:end="6823:24"><name pos:start="6823:24" pos:end="6823:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6825:17" pos:end="6825:29"><block_content pos:start="6825:17" pos:end="6825:29">

                <expr_stmt pos:start="6825:17" pos:end="6825:29"><expr pos:start="6825:17" pos:end="6825:28"><name pos:start="6825:17" pos:end="6825:18">ot</name> <operator pos:start="6825:20" pos:end="6825:20">=</operator> <name pos:start="6825:22" pos:end="6825:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="6827:13" pos:end="6829:29">else<block type="pseudo" pos:start="6829:17" pos:end="6829:29"><block_content pos:start="6829:17" pos:end="6829:29">

                <expr_stmt pos:start="6829:17" pos:end="6829:29"><expr pos:start="6829:17" pos:end="6829:28"><name pos:start="6829:17" pos:end="6829:18">ot</name> <operator pos:start="6829:20" pos:end="6829:20">=</operator> <name pos:start="6829:22" pos:end="6829:28">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <comment type="block" pos:start="6831:13" pos:end="6831:56">/* XXX: do it dynamically with CR4.DE bit */</comment>

            <if_stmt pos:start="6833:13" pos:end="6835:32"><if pos:start="6833:13" pos:end="6835:32">if <condition pos:start="6833:16" pos:end="6833:49">(<expr pos:start="6833:17" pos:end="6833:48"><name pos:start="6833:17" pos:end="6833:19">reg</name> <operator pos:start="6833:21" pos:end="6833:22">==</operator> <literal type="number" pos:start="6833:24" pos:end="6833:24">4</literal> <operator pos:start="6833:26" pos:end="6833:27">||</operator> <name pos:start="6833:29" pos:end="6833:31">reg</name> <operator pos:start="6833:33" pos:end="6833:34">==</operator> <literal type="number" pos:start="6833:36" pos:end="6833:36">5</literal> <operator pos:start="6833:38" pos:end="6833:39">||</operator> <name pos:start="6833:41" pos:end="6833:43">reg</name> <operator pos:start="6833:45" pos:end="6833:46">&gt;=</operator> <literal type="number" pos:start="6833:48" pos:end="6833:48">8</literal></expr>)</condition><block type="pseudo" pos:start="6835:17" pos:end="6835:32"><block_content pos:start="6835:17" pos:end="6835:32">

                <goto pos:start="6835:17" pos:end="6835:32">goto <name pos:start="6835:22" pos:end="6835:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6837:13" pos:end="6857:13"><if pos:start="6837:13" pos:end="6849:13">if <condition pos:start="6837:16" pos:end="6837:22">(<expr pos:start="6837:17" pos:end="6837:21"><name pos:start="6837:17" pos:end="6837:17">b</name> <operator pos:start="6837:19" pos:end="6837:19">&amp;</operator> <literal type="number" pos:start="6837:21" pos:end="6837:21">2</literal></expr>)</condition> <block pos:start="6837:24" pos:end="6849:13">{<block_content pos:start="6839:17" pos:end="6847:27">

                <expr_stmt pos:start="6839:17" pos:end="6839:79"><expr pos:start="6839:17" pos:end="6839:78"><call pos:start="6839:17" pos:end="6839:78"><name pos:start="6839:17" pos:end="6839:39">gen_svm_check_intercept</name><argument_list pos:start="6839:40" pos:end="6839:78">(<argument pos:start="6839:41" pos:end="6839:41"><expr pos:start="6839:41" pos:end="6839:41"><name pos:start="6839:41" pos:end="6839:41">s</name></expr></argument>, <argument pos:start="6839:44" pos:end="6839:51"><expr pos:start="6839:44" pos:end="6839:51"><name pos:start="6839:44" pos:end="6839:51">pc_start</name></expr></argument>, <argument pos:start="6839:54" pos:end="6839:77"><expr pos:start="6839:54" pos:end="6839:77"><name pos:start="6839:54" pos:end="6839:71">SVM_EXIT_WRITE_DR0</name> <operator pos:start="6839:73" pos:end="6839:73">+</operator> <name pos:start="6839:75" pos:end="6839:77">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6841:17" pos:end="6841:45"><expr pos:start="6841:17" pos:end="6841:44"><call pos:start="6841:17" pos:end="6841:44"><name pos:start="6841:17" pos:end="6841:33">gen_op_mov_TN_reg</name><argument_list pos:start="6841:34" pos:end="6841:44">(<argument pos:start="6841:35" pos:end="6841:36"><expr pos:start="6841:35" pos:end="6841:36"><name pos:start="6841:35" pos:end="6841:36">ot</name></expr></argument>, <argument pos:start="6841:39" pos:end="6841:39"><expr pos:start="6841:39" pos:end="6841:39"><literal type="number" pos:start="6841:39" pos:end="6841:39">0</literal></expr></argument>, <argument pos:start="6841:42" pos:end="6841:43"><expr pos:start="6841:42" pos:end="6841:43"><name pos:start="6841:42" pos:end="6841:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6843:17" pos:end="6843:78"><expr pos:start="6843:17" pos:end="6843:77"><call pos:start="6843:17" pos:end="6843:77"><name pos:start="6843:17" pos:end="6843:38">gen_helper_movl_drN_T0</name><argument_list pos:start="6843:39" pos:end="6843:77">(<argument pos:start="6843:40" pos:end="6843:46"><expr pos:start="6843:40" pos:end="6843:46"><name pos:start="6843:40" pos:end="6843:46">cpu_env</name></expr></argument>, <argument pos:start="6843:49" pos:end="6843:66"><expr pos:start="6843:49" pos:end="6843:66"><call pos:start="6843:49" pos:end="6843:66"><name pos:start="6843:49" pos:end="6843:61">tcg_const_i32</name><argument_list pos:start="6843:62" pos:end="6843:66">(<argument pos:start="6843:63" pos:end="6843:65"><expr pos:start="6843:63" pos:end="6843:65"><name pos:start="6843:63" pos:end="6843:65">reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="6843:69" pos:end="6843:76"><expr pos:start="6843:69" pos:end="6843:76"><name pos:start="6843:69" pos:end="6843:76"><name pos:start="6843:69" pos:end="6843:73">cpu_T</name><index pos:start="6843:74" pos:end="6843:76">[<expr pos:start="6843:75" pos:end="6843:75"><literal type="number" pos:start="6843:75" pos:end="6843:75">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6845:17" pos:end="6845:47"><expr pos:start="6845:17" pos:end="6845:46"><call pos:start="6845:17" pos:end="6845:46"><name pos:start="6845:17" pos:end="6845:26">gen_jmp_im</name><argument_list pos:start="6845:27" pos:end="6845:46">(<argument pos:start="6845:28" pos:end="6845:45"><expr pos:start="6845:28" pos:end="6845:45"><name pos:start="6845:28" pos:end="6845:32"><name pos:start="6845:28" pos:end="6845:28">s</name><operator pos:start="6845:29" pos:end="6845:30">-&gt;</operator><name pos:start="6845:31" pos:end="6845:32">pc</name></name> <operator pos:start="6845:34" pos:end="6845:34">-</operator> <name pos:start="6845:36" pos:end="6845:45"><name pos:start="6845:36" pos:end="6845:36">s</name><operator pos:start="6845:37" pos:end="6845:38">-&gt;</operator><name pos:start="6845:39" pos:end="6845:45">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6847:17" pos:end="6847:27"><expr pos:start="6847:17" pos:end="6847:26"><call pos:start="6847:17" pos:end="6847:26"><name pos:start="6847:17" pos:end="6847:23">gen_eob</name><argument_list pos:start="6847:24" pos:end="6847:26">(<argument pos:start="6847:25" pos:end="6847:25"><expr pos:start="6847:25" pos:end="6847:25"><name pos:start="6847:25" pos:end="6847:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6849:15" pos:end="6857:13">else <block pos:start="6849:20" pos:end="6857:13">{<block_content pos:start="6851:17" pos:end="6855:42">

                <expr_stmt pos:start="6851:17" pos:end="6851:78"><expr pos:start="6851:17" pos:end="6851:77"><call pos:start="6851:17" pos:end="6851:77"><name pos:start="6851:17" pos:end="6851:39">gen_svm_check_intercept</name><argument_list pos:start="6851:40" pos:end="6851:77">(<argument pos:start="6851:41" pos:end="6851:41"><expr pos:start="6851:41" pos:end="6851:41"><name pos:start="6851:41" pos:end="6851:41">s</name></expr></argument>, <argument pos:start="6851:44" pos:end="6851:51"><expr pos:start="6851:44" pos:end="6851:51"><name pos:start="6851:44" pos:end="6851:51">pc_start</name></expr></argument>, <argument pos:start="6851:54" pos:end="6851:76"><expr pos:start="6851:54" pos:end="6851:76"><name pos:start="6851:54" pos:end="6851:70">SVM_EXIT_READ_DR0</name> <operator pos:start="6851:72" pos:end="6851:72">+</operator> <name pos:start="6851:74" pos:end="6851:76">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6853:17" pos:end="6853:80"><expr pos:start="6853:17" pos:end="6853:79"><call pos:start="6853:17" pos:end="6853:79"><name pos:start="6853:17" pos:end="6853:29">tcg_gen_ld_tl</name><argument_list pos:start="6853:30" pos:end="6853:79">(<argument pos:start="6853:31" pos:end="6853:38"><expr pos:start="6853:31" pos:end="6853:38"><name pos:start="6853:31" pos:end="6853:38"><name pos:start="6853:31" pos:end="6853:35">cpu_T</name><index pos:start="6853:36" pos:end="6853:38">[<expr pos:start="6853:37" pos:end="6853:37"><literal type="number" pos:start="6853:37" pos:end="6853:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="6853:41" pos:end="6853:47"><expr pos:start="6853:41" pos:end="6853:47"><name pos:start="6853:41" pos:end="6853:47">cpu_env</name></expr></argument>, <argument pos:start="6853:50" pos:end="6853:78"><expr pos:start="6853:50" pos:end="6853:78"><call pos:start="6853:50" pos:end="6853:78"><name pos:start="6853:50" pos:end="6853:57">offsetof</name><argument_list pos:start="6853:58" pos:end="6853:78">(<argument pos:start="6853:59" pos:end="6853:69"><expr pos:start="6853:59" pos:end="6853:69"><name pos:start="6853:59" pos:end="6853:69">CPUX86State</name></expr></argument>,<argument pos:start="6853:71" pos:end="6853:77"><expr pos:start="6853:71" pos:end="6853:77"><name pos:start="6853:71" pos:end="6853:77"><name pos:start="6853:71" pos:end="6853:72">dr</name><index pos:start="6853:73" pos:end="6853:77">[<expr pos:start="6853:74" pos:end="6853:76"><name pos:start="6853:74" pos:end="6853:76">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6855:17" pos:end="6855:42"><expr pos:start="6855:17" pos:end="6855:41"><call pos:start="6855:17" pos:end="6855:41"><name pos:start="6855:17" pos:end="6855:33">gen_op_mov_reg_T0</name><argument_list pos:start="6855:34" pos:end="6855:41">(<argument pos:start="6855:35" pos:end="6855:36"><expr pos:start="6855:35" pos:end="6855:36"><name pos:start="6855:35" pos:end="6855:36">ot</name></expr></argument>, <argument pos:start="6855:39" pos:end="6855:40"><expr pos:start="6855:39" pos:end="6855:40"><name pos:start="6855:39" pos:end="6855:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6861:9" pos:end="6861:14">break;</break>

    <case pos:start="6863:5" pos:end="6863:15">case <expr pos:start="6863:10" pos:end="6863:14"><literal type="number" pos:start="6863:10" pos:end="6863:14">0x106</literal></expr>:</case> <comment type="block" pos:start="6863:17" pos:end="6863:26">/* clts */</comment>

        <if_stmt pos:start="6865:9" pos:end="6881:9"><if pos:start="6865:9" pos:end="6869:9">if <condition pos:start="6865:12" pos:end="6865:24">(<expr pos:start="6865:13" pos:end="6865:23"><name pos:start="6865:13" pos:end="6865:18"><name pos:start="6865:13" pos:end="6865:13">s</name><operator pos:start="6865:14" pos:end="6865:15">-&gt;</operator><name pos:start="6865:16" pos:end="6865:18">cpl</name></name> <operator pos:start="6865:20" pos:end="6865:21">!=</operator> <literal type="number" pos:start="6865:23" pos:end="6865:23">0</literal></expr>)</condition> <block pos:start="6865:26" pos:end="6869:9">{<block_content pos:start="6867:13" pos:end="6867:64">

            <expr_stmt pos:start="6867:13" pos:end="6867:64"><expr pos:start="6867:13" pos:end="6867:63"><call pos:start="6867:13" pos:end="6867:63"><name pos:start="6867:13" pos:end="6867:25">gen_exception</name><argument_list pos:start="6867:26" pos:end="6867:63">(<argument pos:start="6867:27" pos:end="6867:27"><expr pos:start="6867:27" pos:end="6867:27"><name pos:start="6867:27" pos:end="6867:27">s</name></expr></argument>, <argument pos:start="6867:30" pos:end="6867:39"><expr pos:start="6867:30" pos:end="6867:39"><name pos:start="6867:30" pos:end="6867:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="6867:42" pos:end="6867:62"><expr pos:start="6867:42" pos:end="6867:62"><name pos:start="6867:42" pos:end="6867:49">pc_start</name> <operator pos:start="6867:51" pos:end="6867:51">-</operator> <name pos:start="6867:53" pos:end="6867:62"><name pos:start="6867:53" pos:end="6867:53">s</name><operator pos:start="6867:54" pos:end="6867:55">-&gt;</operator><name pos:start="6867:56" pos:end="6867:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="6869:11" pos:end="6881:9">else <block pos:start="6869:16" pos:end="6881:9">{<block_content pos:start="6871:13" pos:end="6879:23">

            <expr_stmt pos:start="6871:13" pos:end="6871:69"><expr pos:start="6871:13" pos:end="6871:68"><call pos:start="6871:13" pos:end="6871:68"><name pos:start="6871:13" pos:end="6871:35">gen_svm_check_intercept</name><argument_list pos:start="6871:36" pos:end="6871:68">(<argument pos:start="6871:37" pos:end="6871:37"><expr pos:start="6871:37" pos:end="6871:37"><name pos:start="6871:37" pos:end="6871:37">s</name></expr></argument>, <argument pos:start="6871:40" pos:end="6871:47"><expr pos:start="6871:40" pos:end="6871:47"><name pos:start="6871:40" pos:end="6871:47">pc_start</name></expr></argument>, <argument pos:start="6871:50" pos:end="6871:67"><expr pos:start="6871:50" pos:end="6871:67"><name pos:start="6871:50" pos:end="6871:67">SVM_EXIT_WRITE_CR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6873:13" pos:end="6873:37"><expr pos:start="6873:13" pos:end="6873:36"><call pos:start="6873:13" pos:end="6873:36"><name pos:start="6873:13" pos:end="6873:27">gen_helper_clts</name><argument_list pos:start="6873:28" pos:end="6873:36">(<argument pos:start="6873:29" pos:end="6873:35"><expr pos:start="6873:29" pos:end="6873:35"><name pos:start="6873:29" pos:end="6873:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="6875:13" pos:end="6875:62">/* abort block because static cpu state changed */</comment>

            <expr_stmt pos:start="6877:13" pos:end="6877:43"><expr pos:start="6877:13" pos:end="6877:42"><call pos:start="6877:13" pos:end="6877:42"><name pos:start="6877:13" pos:end="6877:22">gen_jmp_im</name><argument_list pos:start="6877:23" pos:end="6877:42">(<argument pos:start="6877:24" pos:end="6877:41"><expr pos:start="6877:24" pos:end="6877:41"><name pos:start="6877:24" pos:end="6877:28"><name pos:start="6877:24" pos:end="6877:24">s</name><operator pos:start="6877:25" pos:end="6877:26">-&gt;</operator><name pos:start="6877:27" pos:end="6877:28">pc</name></name> <operator pos:start="6877:30" pos:end="6877:30">-</operator> <name pos:start="6877:32" pos:end="6877:41"><name pos:start="6877:32" pos:end="6877:32">s</name><operator pos:start="6877:33" pos:end="6877:34">-&gt;</operator><name pos:start="6877:35" pos:end="6877:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6879:13" pos:end="6879:23"><expr pos:start="6879:13" pos:end="6879:22"><call pos:start="6879:13" pos:end="6879:22"><name pos:start="6879:13" pos:end="6879:19">gen_eob</name><argument_list pos:start="6879:20" pos:end="6879:22">(<argument pos:start="6879:21" pos:end="6879:21"><expr pos:start="6879:21" pos:end="6879:21"><name pos:start="6879:21" pos:end="6879:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="6883:9" pos:end="6883:14">break;</break>

    <comment type="block" pos:start="6885:5" pos:end="6885:53">/* MMX/3DNow!/SSE/SSE2/SSE3/SSSE3/SSE4 support */</comment>

    <case pos:start="6887:5" pos:end="6887:15">case <expr pos:start="6887:10" pos:end="6887:14"><literal type="number" pos:start="6887:10" pos:end="6887:14">0x1c3</literal></expr>:</case> <comment type="block" pos:start="6887:17" pos:end="6887:37">/* MOVNTI reg, mem */</comment>

        <if_stmt pos:start="6889:9" pos:end="6891:28"><if pos:start="6889:9" pos:end="6891:28">if <condition pos:start="6889:12" pos:end="6889:46">(<expr pos:start="6889:13" pos:end="6889:45"><operator pos:start="6889:13" pos:end="6889:13">!</operator><operator pos:start="6889:14" pos:end="6889:14">(</operator><name pos:start="6889:15" pos:end="6889:31"><name pos:start="6889:15" pos:end="6889:15">s</name><operator pos:start="6889:16" pos:end="6889:17">-&gt;</operator><name pos:start="6889:18" pos:end="6889:31">cpuid_features</name></name> <operator pos:start="6889:33" pos:end="6889:33">&amp;</operator> <name pos:start="6889:35" pos:end="6889:44">CPUID_SSE2</name><operator pos:start="6889:45" pos:end="6889:45">)</operator></expr>)</condition><block type="pseudo" pos:start="6891:13" pos:end="6891:28"><block_content pos:start="6891:13" pos:end="6891:28">

            <goto pos:start="6891:13" pos:end="6891:28">goto <name pos:start="6891:18" pos:end="6891:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="6893:9" pos:end="6893:47"><expr pos:start="6893:9" pos:end="6893:46"><name pos:start="6893:9" pos:end="6893:10">ot</name> <operator pos:start="6893:12" pos:end="6893:12">=</operator> <ternary pos:start="6893:14" pos:end="6893:46"><condition pos:start="6893:14" pos:end="6893:28"><expr pos:start="6893:14" pos:end="6893:26"><name pos:start="6893:14" pos:end="6893:21"><name pos:start="6893:14" pos:end="6893:14">s</name><operator pos:start="6893:15" pos:end="6893:16">-&gt;</operator><name pos:start="6893:17" pos:end="6893:21">dflag</name></name> <operator pos:start="6893:23" pos:end="6893:24">==</operator> <literal type="number" pos:start="6893:26" pos:end="6893:26">2</literal></expr> ?</condition><then pos:start="6893:30" pos:end="6893:36"> <expr pos:start="6893:30" pos:end="6893:36"><name pos:start="6893:30" pos:end="6893:36">OT_QUAD</name></expr> </then><else pos:start="6893:38" pos:end="6893:46">: <expr pos:start="6893:40" pos:end="6893:46"><name pos:start="6893:40" pos:end="6893:46">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="6895:9" pos:end="6895:55"><expr pos:start="6895:9" pos:end="6895:54"><name pos:start="6895:9" pos:end="6895:13">modrm</name> <operator pos:start="6895:15" pos:end="6895:15">=</operator> <call pos:start="6895:17" pos:end="6895:54"><name pos:start="6895:17" pos:end="6895:29">cpu_ldub_code</name><argument_list pos:start="6895:30" pos:end="6895:54">(<argument pos:start="6895:31" pos:end="6895:44"><expr pos:start="6895:31" pos:end="6895:44"><name pos:start="6895:31" pos:end="6895:44">cpu_single_env</name></expr></argument>, <argument pos:start="6895:47" pos:end="6895:53"><expr pos:start="6895:47" pos:end="6895:53"><name pos:start="6895:47" pos:end="6895:51"><name pos:start="6895:47" pos:end="6895:47">s</name><operator pos:start="6895:48" pos:end="6895:49">-&gt;</operator><name pos:start="6895:50" pos:end="6895:51">pc</name></name><operator pos:start="6895:52" pos:end="6895:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6897:9" pos:end="6897:31"><expr pos:start="6897:9" pos:end="6897:30"><name pos:start="6897:9" pos:end="6897:11">mod</name> <operator pos:start="6897:13" pos:end="6897:13">=</operator> <operator pos:start="6897:15" pos:end="6897:15">(</operator><name pos:start="6897:16" pos:end="6897:20">modrm</name> <operator pos:start="6897:22" pos:end="6897:23">&gt;&gt;</operator> <literal type="number" pos:start="6897:25" pos:end="6897:25">6</literal><operator pos:start="6897:26" pos:end="6897:26">)</operator> <operator pos:start="6897:28" pos:end="6897:28">&amp;</operator> <literal type="number" pos:start="6897:30" pos:end="6897:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="6899:9" pos:end="6901:28"><if pos:start="6899:9" pos:end="6901:28">if <condition pos:start="6899:12" pos:end="6899:21">(<expr pos:start="6899:13" pos:end="6899:20"><name pos:start="6899:13" pos:end="6899:15">mod</name> <operator pos:start="6899:17" pos:end="6899:18">==</operator> <literal type="number" pos:start="6899:20" pos:end="6899:20">3</literal></expr>)</condition><block type="pseudo" pos:start="6901:13" pos:end="6901:28"><block_content pos:start="6901:13" pos:end="6901:28">

            <goto pos:start="6901:13" pos:end="6901:28">goto <name pos:start="6901:18" pos:end="6901:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="6903:9" pos:end="6903:41"><expr pos:start="6903:9" pos:end="6903:40"><name pos:start="6903:9" pos:end="6903:11">reg</name> <operator pos:start="6903:13" pos:end="6903:13">=</operator> <operator pos:start="6903:15" pos:end="6903:15">(</operator><operator pos:start="6903:16" pos:end="6903:16">(</operator><name pos:start="6903:17" pos:end="6903:21">modrm</name> <operator pos:start="6903:23" pos:end="6903:24">&gt;&gt;</operator> <literal type="number" pos:start="6903:26" pos:end="6903:26">3</literal><operator pos:start="6903:27" pos:end="6903:27">)</operator> <operator pos:start="6903:29" pos:end="6903:29">&amp;</operator> <literal type="number" pos:start="6903:31" pos:end="6903:31">7</literal><operator pos:start="6903:32" pos:end="6903:32">)</operator> <operator pos:start="6903:34" pos:end="6903:34">|</operator> <name pos:start="6903:36" pos:end="6903:40">rex_r</name></expr>;</expr_stmt>

        <comment type="block" pos:start="6905:9" pos:end="6905:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="6907:9" pos:end="6907:45"><expr pos:start="6907:9" pos:end="6907:44"><call pos:start="6907:9" pos:end="6907:44"><name pos:start="6907:9" pos:end="6907:22">gen_ldst_modrm</name><argument_list pos:start="6907:23" pos:end="6907:44">(<argument pos:start="6907:24" pos:end="6907:24"><expr pos:start="6907:24" pos:end="6907:24"><name pos:start="6907:24" pos:end="6907:24">s</name></expr></argument>, <argument pos:start="6907:27" pos:end="6907:31"><expr pos:start="6907:27" pos:end="6907:31"><name pos:start="6907:27" pos:end="6907:31">modrm</name></expr></argument>, <argument pos:start="6907:34" pos:end="6907:35"><expr pos:start="6907:34" pos:end="6907:35"><name pos:start="6907:34" pos:end="6907:35">ot</name></expr></argument>, <argument pos:start="6907:38" pos:end="6907:40"><expr pos:start="6907:38" pos:end="6907:40"><name pos:start="6907:38" pos:end="6907:40">reg</name></expr></argument>, <argument pos:start="6907:43" pos:end="6907:43"><expr pos:start="6907:43" pos:end="6907:43"><literal type="number" pos:start="6907:43" pos:end="6907:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6909:9" pos:end="6909:14">break;</break>

    <case pos:start="6911:5" pos:end="6911:15">case <expr pos:start="6911:10" pos:end="6911:14"><literal type="number" pos:start="6911:10" pos:end="6911:14">0x1ae</literal></expr>:</case>

        <expr_stmt pos:start="6913:9" pos:end="6913:55"><expr pos:start="6913:9" pos:end="6913:54"><name pos:start="6913:9" pos:end="6913:13">modrm</name> <operator pos:start="6913:15" pos:end="6913:15">=</operator> <call pos:start="6913:17" pos:end="6913:54"><name pos:start="6913:17" pos:end="6913:29">cpu_ldub_code</name><argument_list pos:start="6913:30" pos:end="6913:54">(<argument pos:start="6913:31" pos:end="6913:44"><expr pos:start="6913:31" pos:end="6913:44"><name pos:start="6913:31" pos:end="6913:44">cpu_single_env</name></expr></argument>, <argument pos:start="6913:47" pos:end="6913:53"><expr pos:start="6913:47" pos:end="6913:53"><name pos:start="6913:47" pos:end="6913:51"><name pos:start="6913:47" pos:end="6913:47">s</name><operator pos:start="6913:48" pos:end="6913:49">-&gt;</operator><name pos:start="6913:50" pos:end="6913:51">pc</name></name><operator pos:start="6913:52" pos:end="6913:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6915:9" pos:end="6915:31"><expr pos:start="6915:9" pos:end="6915:30"><name pos:start="6915:9" pos:end="6915:11">mod</name> <operator pos:start="6915:13" pos:end="6915:13">=</operator> <operator pos:start="6915:15" pos:end="6915:15">(</operator><name pos:start="6915:16" pos:end="6915:20">modrm</name> <operator pos:start="6915:22" pos:end="6915:23">&gt;&gt;</operator> <literal type="number" pos:start="6915:25" pos:end="6915:25">6</literal><operator pos:start="6915:26" pos:end="6915:26">)</operator> <operator pos:start="6915:28" pos:end="6915:28">&amp;</operator> <literal type="number" pos:start="6915:30" pos:end="6915:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="6917:9" pos:end="6917:30"><expr pos:start="6917:9" pos:end="6917:29"><name pos:start="6917:9" pos:end="6917:10">op</name> <operator pos:start="6917:12" pos:end="6917:12">=</operator> <operator pos:start="6917:14" pos:end="6917:14">(</operator><name pos:start="6917:15" pos:end="6917:19">modrm</name> <operator pos:start="6917:21" pos:end="6917:22">&gt;&gt;</operator> <literal type="number" pos:start="6917:24" pos:end="6917:24">3</literal><operator pos:start="6917:25" pos:end="6917:25">)</operator> <operator pos:start="6917:27" pos:end="6917:27">&amp;</operator> <literal type="number" pos:start="6917:29" pos:end="6917:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="6919:9" pos:end="7057:9">switch<condition pos:start="6919:15" pos:end="6919:18">(<expr pos:start="6919:16" pos:end="6919:17"><name pos:start="6919:16" pos:end="6919:17">op</name></expr>)</condition> <block pos:start="6919:20" pos:end="7057:9">{<block_content pos:start="6921:9" pos:end="7055:28">

        <case pos:start="6921:9" pos:end="6921:15">case <expr pos:start="6921:14" pos:end="6921:14"><literal type="number" pos:start="6921:14" pos:end="6921:14">0</literal></expr>:</case> <comment type="block" pos:start="6921:17" pos:end="6921:28">/* fxsave */</comment>

            <if_stmt pos:start="6923:13" pos:end="6927:32"><if pos:start="6923:13" pos:end="6927:32">if <condition pos:start="6923:16" pos:end="6925:42">(<expr pos:start="6923:17" pos:end="6925:41"><name pos:start="6923:17" pos:end="6923:19">mod</name> <operator pos:start="6923:21" pos:end="6923:22">==</operator> <literal type="number" pos:start="6923:24" pos:end="6923:24">3</literal> <operator pos:start="6923:26" pos:end="6923:27">||</operator> <operator pos:start="6923:29" pos:end="6923:29">!</operator><operator pos:start="6923:30" pos:end="6923:30">(</operator><name pos:start="6923:31" pos:end="6923:47"><name pos:start="6923:31" pos:end="6923:31">s</name><operator pos:start="6923:32" pos:end="6923:33">-&gt;</operator><name pos:start="6923:34" pos:end="6923:47">cpuid_features</name></name> <operator pos:start="6923:49" pos:end="6923:49">&amp;</operator> <name pos:start="6923:51" pos:end="6923:60">CPUID_FXSR</name><operator pos:start="6923:61" pos:end="6923:61">)</operator> <operator pos:start="6923:63" pos:end="6923:64">||</operator>

                <operator pos:start="6925:17" pos:end="6925:17">(</operator><name pos:start="6925:18" pos:end="6925:26"><name pos:start="6925:18" pos:end="6925:18">s</name><operator pos:start="6925:19" pos:end="6925:20">-&gt;</operator><name pos:start="6925:21" pos:end="6925:26">prefix</name></name> <operator pos:start="6925:28" pos:end="6925:28">&amp;</operator> <name pos:start="6925:30" pos:end="6925:40">PREFIX_LOCK</name><operator pos:start="6925:41" pos:end="6925:41">)</operator></expr>)</condition><block type="pseudo" pos:start="6927:17" pos:end="6927:32"><block_content pos:start="6927:17" pos:end="6927:32">

                <goto pos:start="6927:17" pos:end="6927:32">goto <name pos:start="6927:22" pos:end="6927:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6929:13" pos:end="6935:13"><if pos:start="6929:13" pos:end="6935:13">if <condition pos:start="6929:16" pos:end="6929:67">(<expr pos:start="6929:17" pos:end="6929:66"><operator pos:start="6929:17" pos:end="6929:17">(</operator><name pos:start="6929:18" pos:end="6929:25"><name pos:start="6929:18" pos:end="6929:18">s</name><operator pos:start="6929:19" pos:end="6929:20">-&gt;</operator><name pos:start="6929:21" pos:end="6929:25">flags</name></name> <operator pos:start="6929:27" pos:end="6929:27">&amp;</operator> <name pos:start="6929:29" pos:end="6929:38">HF_EM_MASK</name><operator pos:start="6929:39" pos:end="6929:39">)</operator> <operator pos:start="6929:41" pos:end="6929:42">||</operator> <operator pos:start="6929:44" pos:end="6929:44">(</operator><name pos:start="6929:45" pos:end="6929:52"><name pos:start="6929:45" pos:end="6929:45">s</name><operator pos:start="6929:46" pos:end="6929:47">-&gt;</operator><name pos:start="6929:48" pos:end="6929:52">flags</name></name> <operator pos:start="6929:54" pos:end="6929:54">&amp;</operator> <name pos:start="6929:56" pos:end="6929:65">HF_TS_MASK</name><operator pos:start="6929:66" pos:end="6929:66">)</operator></expr>)</condition> <block pos:start="6929:69" pos:end="6935:13">{<block_content pos:start="6931:17" pos:end="6933:22">

                <expr_stmt pos:start="6931:17" pos:end="6931:69"><expr pos:start="6931:17" pos:end="6931:68"><call pos:start="6931:17" pos:end="6931:68"><name pos:start="6931:17" pos:end="6931:29">gen_exception</name><argument_list pos:start="6931:30" pos:end="6931:68">(<argument pos:start="6931:31" pos:end="6931:31"><expr pos:start="6931:31" pos:end="6931:31"><name pos:start="6931:31" pos:end="6931:31">s</name></expr></argument>, <argument pos:start="6931:34" pos:end="6931:44"><expr pos:start="6931:34" pos:end="6931:44"><name pos:start="6931:34" pos:end="6931:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="6931:47" pos:end="6931:67"><expr pos:start="6931:47" pos:end="6931:67"><name pos:start="6931:47" pos:end="6931:54">pc_start</name> <operator pos:start="6931:56" pos:end="6931:56">-</operator> <name pos:start="6931:58" pos:end="6931:67"><name pos:start="6931:58" pos:end="6931:58">s</name><operator pos:start="6931:59" pos:end="6931:60">-&gt;</operator><name pos:start="6931:61" pos:end="6931:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6933:17" pos:end="6933:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6937:13" pos:end="6937:61"><expr pos:start="6937:13" pos:end="6937:60"><call pos:start="6937:13" pos:end="6937:60"><name pos:start="6937:13" pos:end="6937:25">gen_lea_modrm</name><argument_list pos:start="6937:26" pos:end="6937:60">(<argument pos:start="6937:27" pos:end="6937:27"><expr pos:start="6937:27" pos:end="6937:27"><name pos:start="6937:27" pos:end="6937:27">s</name></expr></argument>, <argument pos:start="6937:30" pos:end="6937:34"><expr pos:start="6937:30" pos:end="6937:34"><name pos:start="6937:30" pos:end="6937:34">modrm</name></expr></argument>, <argument pos:start="6937:37" pos:end="6937:45"><expr pos:start="6937:37" pos:end="6937:45"><operator pos:start="6937:37" pos:end="6937:37">&amp;</operator><name pos:start="6937:38" pos:end="6937:45">reg_addr</name></expr></argument>, <argument pos:start="6937:48" pos:end="6937:59"><expr pos:start="6937:48" pos:end="6937:59"><operator pos:start="6937:48" pos:end="6937:48">&amp;</operator><name pos:start="6937:49" pos:end="6937:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6939:13" pos:end="6941:43"><if pos:start="6939:13" pos:end="6941:43">if <condition pos:start="6939:16" pos:end="6939:42">(<expr pos:start="6939:17" pos:end="6939:41"><name pos:start="6939:17" pos:end="6939:24"><name pos:start="6939:17" pos:end="6939:17">s</name><operator pos:start="6939:18" pos:end="6939:19">-&gt;</operator><name pos:start="6939:20" pos:end="6939:24">cc_op</name></name> <operator pos:start="6939:26" pos:end="6939:27">!=</operator> <name pos:start="6939:29" pos:end="6939:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6941:17" pos:end="6941:43"><block_content pos:start="6941:17" pos:end="6941:43">

                <expr_stmt pos:start="6941:17" pos:end="6941:43"><expr pos:start="6941:17" pos:end="6941:42"><call pos:start="6941:17" pos:end="6941:42"><name pos:start="6941:17" pos:end="6941:32">gen_op_set_cc_op</name><argument_list pos:start="6941:33" pos:end="6941:42">(<argument pos:start="6941:34" pos:end="6941:41"><expr pos:start="6941:34" pos:end="6941:41"><name pos:start="6941:34" pos:end="6941:41"><name pos:start="6941:34" pos:end="6941:34">s</name><operator pos:start="6941:35" pos:end="6941:36">-&gt;</operator><name pos:start="6941:37" pos:end="6941:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6943:13" pos:end="6943:46"><expr pos:start="6943:13" pos:end="6943:45"><call pos:start="6943:13" pos:end="6943:45"><name pos:start="6943:13" pos:end="6943:22">gen_jmp_im</name><argument_list pos:start="6943:23" pos:end="6943:45">(<argument pos:start="6943:24" pos:end="6943:44"><expr pos:start="6943:24" pos:end="6943:44"><name pos:start="6943:24" pos:end="6943:31">pc_start</name> <operator pos:start="6943:33" pos:end="6943:33">-</operator> <name pos:start="6943:35" pos:end="6943:44"><name pos:start="6943:35" pos:end="6943:35">s</name><operator pos:start="6943:36" pos:end="6943:37">-&gt;</operator><name pos:start="6943:38" pos:end="6943:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6945:13" pos:end="6945:79"><expr pos:start="6945:13" pos:end="6945:78"><call pos:start="6945:13" pos:end="6945:78"><name pos:start="6945:13" pos:end="6945:29">gen_helper_fxsave</name><argument_list pos:start="6945:30" pos:end="6945:78">(<argument pos:start="6945:31" pos:end="6945:37"><expr pos:start="6945:31" pos:end="6945:37"><name pos:start="6945:31" pos:end="6945:37">cpu_env</name></expr></argument>, <argument pos:start="6945:40" pos:end="6945:45"><expr pos:start="6945:40" pos:end="6945:45"><name pos:start="6945:40" pos:end="6945:45">cpu_A0</name></expr></argument>, <argument pos:start="6945:48" pos:end="6945:77"><expr pos:start="6945:48" pos:end="6945:77"><call pos:start="6945:48" pos:end="6945:77"><name pos:start="6945:48" pos:end="6945:60">tcg_const_i32</name><argument_list pos:start="6945:61" pos:end="6945:77">(<argument pos:start="6945:62" pos:end="6945:76"><expr pos:start="6945:62" pos:end="6945:76"><operator pos:start="6945:62" pos:end="6945:62">(</operator><name pos:start="6945:63" pos:end="6945:70"><name pos:start="6945:63" pos:end="6945:63">s</name><operator pos:start="6945:64" pos:end="6945:65">-&gt;</operator><name pos:start="6945:66" pos:end="6945:70">dflag</name></name> <operator pos:start="6945:72" pos:end="6945:73">==</operator> <literal type="number" pos:start="6945:75" pos:end="6945:75">2</literal><operator pos:start="6945:76" pos:end="6945:76">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6947:13" pos:end="6947:18">break;</break>

        <case pos:start="6949:9" pos:end="6949:15">case <expr pos:start="6949:14" pos:end="6949:14"><literal type="number" pos:start="6949:14" pos:end="6949:14">1</literal></expr>:</case> <comment type="block" pos:start="6949:17" pos:end="6949:29">/* fxrstor */</comment>

            <if_stmt pos:start="6951:13" pos:end="6955:32"><if pos:start="6951:13" pos:end="6955:32">if <condition pos:start="6951:16" pos:end="6953:42">(<expr pos:start="6951:17" pos:end="6953:41"><name pos:start="6951:17" pos:end="6951:19">mod</name> <operator pos:start="6951:21" pos:end="6951:22">==</operator> <literal type="number" pos:start="6951:24" pos:end="6951:24">3</literal> <operator pos:start="6951:26" pos:end="6951:27">||</operator> <operator pos:start="6951:29" pos:end="6951:29">!</operator><operator pos:start="6951:30" pos:end="6951:30">(</operator><name pos:start="6951:31" pos:end="6951:47"><name pos:start="6951:31" pos:end="6951:31">s</name><operator pos:start="6951:32" pos:end="6951:33">-&gt;</operator><name pos:start="6951:34" pos:end="6951:47">cpuid_features</name></name> <operator pos:start="6951:49" pos:end="6951:49">&amp;</operator> <name pos:start="6951:51" pos:end="6951:60">CPUID_FXSR</name><operator pos:start="6951:61" pos:end="6951:61">)</operator> <operator pos:start="6951:63" pos:end="6951:64">||</operator>

                <operator pos:start="6953:17" pos:end="6953:17">(</operator><name pos:start="6953:18" pos:end="6953:26"><name pos:start="6953:18" pos:end="6953:18">s</name><operator pos:start="6953:19" pos:end="6953:20">-&gt;</operator><name pos:start="6953:21" pos:end="6953:26">prefix</name></name> <operator pos:start="6953:28" pos:end="6953:28">&amp;</operator> <name pos:start="6953:30" pos:end="6953:40">PREFIX_LOCK</name><operator pos:start="6953:41" pos:end="6953:41">)</operator></expr>)</condition><block type="pseudo" pos:start="6955:17" pos:end="6955:32"><block_content pos:start="6955:17" pos:end="6955:32">

                <goto pos:start="6955:17" pos:end="6955:32">goto <name pos:start="6955:22" pos:end="6955:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6957:13" pos:end="6963:13"><if pos:start="6957:13" pos:end="6963:13">if <condition pos:start="6957:16" pos:end="6957:67">(<expr pos:start="6957:17" pos:end="6957:66"><operator pos:start="6957:17" pos:end="6957:17">(</operator><name pos:start="6957:18" pos:end="6957:25"><name pos:start="6957:18" pos:end="6957:18">s</name><operator pos:start="6957:19" pos:end="6957:20">-&gt;</operator><name pos:start="6957:21" pos:end="6957:25">flags</name></name> <operator pos:start="6957:27" pos:end="6957:27">&amp;</operator> <name pos:start="6957:29" pos:end="6957:38">HF_EM_MASK</name><operator pos:start="6957:39" pos:end="6957:39">)</operator> <operator pos:start="6957:41" pos:end="6957:42">||</operator> <operator pos:start="6957:44" pos:end="6957:44">(</operator><name pos:start="6957:45" pos:end="6957:52"><name pos:start="6957:45" pos:end="6957:45">s</name><operator pos:start="6957:46" pos:end="6957:47">-&gt;</operator><name pos:start="6957:48" pos:end="6957:52">flags</name></name> <operator pos:start="6957:54" pos:end="6957:54">&amp;</operator> <name pos:start="6957:56" pos:end="6957:65">HF_TS_MASK</name><operator pos:start="6957:66" pos:end="6957:66">)</operator></expr>)</condition> <block pos:start="6957:69" pos:end="6963:13">{<block_content pos:start="6959:17" pos:end="6961:22">

                <expr_stmt pos:start="6959:17" pos:end="6959:69"><expr pos:start="6959:17" pos:end="6959:68"><call pos:start="6959:17" pos:end="6959:68"><name pos:start="6959:17" pos:end="6959:29">gen_exception</name><argument_list pos:start="6959:30" pos:end="6959:68">(<argument pos:start="6959:31" pos:end="6959:31"><expr pos:start="6959:31" pos:end="6959:31"><name pos:start="6959:31" pos:end="6959:31">s</name></expr></argument>, <argument pos:start="6959:34" pos:end="6959:44"><expr pos:start="6959:34" pos:end="6959:44"><name pos:start="6959:34" pos:end="6959:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="6959:47" pos:end="6959:67"><expr pos:start="6959:47" pos:end="6959:67"><name pos:start="6959:47" pos:end="6959:54">pc_start</name> <operator pos:start="6959:56" pos:end="6959:56">-</operator> <name pos:start="6959:58" pos:end="6959:67"><name pos:start="6959:58" pos:end="6959:58">s</name><operator pos:start="6959:59" pos:end="6959:60">-&gt;</operator><name pos:start="6959:61" pos:end="6959:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6961:17" pos:end="6961:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6965:13" pos:end="6965:61"><expr pos:start="6965:13" pos:end="6965:60"><call pos:start="6965:13" pos:end="6965:60"><name pos:start="6965:13" pos:end="6965:25">gen_lea_modrm</name><argument_list pos:start="6965:26" pos:end="6965:60">(<argument pos:start="6965:27" pos:end="6965:27"><expr pos:start="6965:27" pos:end="6965:27"><name pos:start="6965:27" pos:end="6965:27">s</name></expr></argument>, <argument pos:start="6965:30" pos:end="6965:34"><expr pos:start="6965:30" pos:end="6965:34"><name pos:start="6965:30" pos:end="6965:34">modrm</name></expr></argument>, <argument pos:start="6965:37" pos:end="6965:45"><expr pos:start="6965:37" pos:end="6965:45"><operator pos:start="6965:37" pos:end="6965:37">&amp;</operator><name pos:start="6965:38" pos:end="6965:45">reg_addr</name></expr></argument>, <argument pos:start="6965:48" pos:end="6965:59"><expr pos:start="6965:48" pos:end="6965:59"><operator pos:start="6965:48" pos:end="6965:48">&amp;</operator><name pos:start="6965:49" pos:end="6965:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6967:13" pos:end="6969:43"><if pos:start="6967:13" pos:end="6969:43">if <condition pos:start="6967:16" pos:end="6967:42">(<expr pos:start="6967:17" pos:end="6967:41"><name pos:start="6967:17" pos:end="6967:24"><name pos:start="6967:17" pos:end="6967:17">s</name><operator pos:start="6967:18" pos:end="6967:19">-&gt;</operator><name pos:start="6967:20" pos:end="6967:24">cc_op</name></name> <operator pos:start="6967:26" pos:end="6967:27">!=</operator> <name pos:start="6967:29" pos:end="6967:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="6969:17" pos:end="6969:43"><block_content pos:start="6969:17" pos:end="6969:43">

                <expr_stmt pos:start="6969:17" pos:end="6969:43"><expr pos:start="6969:17" pos:end="6969:42"><call pos:start="6969:17" pos:end="6969:42"><name pos:start="6969:17" pos:end="6969:32">gen_op_set_cc_op</name><argument_list pos:start="6969:33" pos:end="6969:42">(<argument pos:start="6969:34" pos:end="6969:41"><expr pos:start="6969:34" pos:end="6969:41"><name pos:start="6969:34" pos:end="6969:41"><name pos:start="6969:34" pos:end="6969:34">s</name><operator pos:start="6969:35" pos:end="6969:36">-&gt;</operator><name pos:start="6969:37" pos:end="6969:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6971:13" pos:end="6971:46"><expr pos:start="6971:13" pos:end="6971:45"><call pos:start="6971:13" pos:end="6971:45"><name pos:start="6971:13" pos:end="6971:22">gen_jmp_im</name><argument_list pos:start="6971:23" pos:end="6971:45">(<argument pos:start="6971:24" pos:end="6971:44"><expr pos:start="6971:24" pos:end="6971:44"><name pos:start="6971:24" pos:end="6971:31">pc_start</name> <operator pos:start="6971:33" pos:end="6971:33">-</operator> <name pos:start="6971:35" pos:end="6971:44"><name pos:start="6971:35" pos:end="6971:35">s</name><operator pos:start="6971:36" pos:end="6971:37">-&gt;</operator><name pos:start="6971:38" pos:end="6971:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6973:13" pos:end="6975:63"><expr pos:start="6973:13" pos:end="6975:62"><call pos:start="6973:13" pos:end="6975:62"><name pos:start="6973:13" pos:end="6973:30">gen_helper_fxrstor</name><argument_list pos:start="6973:31" pos:end="6975:62">(<argument pos:start="6973:32" pos:end="6973:38"><expr pos:start="6973:32" pos:end="6973:38"><name pos:start="6973:32" pos:end="6973:38">cpu_env</name></expr></argument>, <argument pos:start="6973:41" pos:end="6973:46"><expr pos:start="6973:41" pos:end="6973:46"><name pos:start="6973:41" pos:end="6973:46">cpu_A0</name></expr></argument>,

                               <argument pos:start="6975:32" pos:end="6975:61"><expr pos:start="6975:32" pos:end="6975:61"><call pos:start="6975:32" pos:end="6975:61"><name pos:start="6975:32" pos:end="6975:44">tcg_const_i32</name><argument_list pos:start="6975:45" pos:end="6975:61">(<argument pos:start="6975:46" pos:end="6975:60"><expr pos:start="6975:46" pos:end="6975:60"><operator pos:start="6975:46" pos:end="6975:46">(</operator><name pos:start="6975:47" pos:end="6975:54"><name pos:start="6975:47" pos:end="6975:47">s</name><operator pos:start="6975:48" pos:end="6975:49">-&gt;</operator><name pos:start="6975:50" pos:end="6975:54">dflag</name></name> <operator pos:start="6975:56" pos:end="6975:57">==</operator> <literal type="number" pos:start="6975:59" pos:end="6975:59">2</literal><operator pos:start="6975:60" pos:end="6975:60">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6977:13" pos:end="6977:18">break;</break>

        <case pos:start="6979:9" pos:end="6979:15">case <expr pos:start="6979:14" pos:end="6979:14"><literal type="number" pos:start="6979:14" pos:end="6979:14">2</literal></expr>:</case> <comment type="block" pos:start="6979:17" pos:end="6979:29">/* ldmxcsr */</comment>

        <case pos:start="6981:9" pos:end="6981:15">case <expr pos:start="6981:14" pos:end="6981:14"><literal type="number" pos:start="6981:14" pos:end="6981:14">3</literal></expr>:</case> <comment type="block" pos:start="6981:17" pos:end="6981:29">/* stmxcsr */</comment>

            <if_stmt pos:start="6983:13" pos:end="6989:13"><if pos:start="6983:13" pos:end="6989:13">if <condition pos:start="6983:16" pos:end="6983:38">(<expr pos:start="6983:17" pos:end="6983:37"><name pos:start="6983:17" pos:end="6983:24"><name pos:start="6983:17" pos:end="6983:17">s</name><operator pos:start="6983:18" pos:end="6983:19">-&gt;</operator><name pos:start="6983:20" pos:end="6983:24">flags</name></name> <operator pos:start="6983:26" pos:end="6983:26">&amp;</operator> <name pos:start="6983:28" pos:end="6983:37">HF_TS_MASK</name></expr>)</condition> <block pos:start="6983:40" pos:end="6989:13">{<block_content pos:start="6985:17" pos:end="6987:22">

                <expr_stmt pos:start="6985:17" pos:end="6985:69"><expr pos:start="6985:17" pos:end="6985:68"><call pos:start="6985:17" pos:end="6985:68"><name pos:start="6985:17" pos:end="6985:29">gen_exception</name><argument_list pos:start="6985:30" pos:end="6985:68">(<argument pos:start="6985:31" pos:end="6985:31"><expr pos:start="6985:31" pos:end="6985:31"><name pos:start="6985:31" pos:end="6985:31">s</name></expr></argument>, <argument pos:start="6985:34" pos:end="6985:44"><expr pos:start="6985:34" pos:end="6985:44"><name pos:start="6985:34" pos:end="6985:44">EXCP07_PREX</name></expr></argument>, <argument pos:start="6985:47" pos:end="6985:67"><expr pos:start="6985:47" pos:end="6985:67"><name pos:start="6985:47" pos:end="6985:54">pc_start</name> <operator pos:start="6985:56" pos:end="6985:56">-</operator> <name pos:start="6985:58" pos:end="6985:67"><name pos:start="6985:58" pos:end="6985:58">s</name><operator pos:start="6985:59" pos:end="6985:60">-&gt;</operator><name pos:start="6985:61" pos:end="6985:67">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="6987:17" pos:end="6987:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="6991:13" pos:end="6995:32"><if pos:start="6991:13" pos:end="6995:32">if <condition pos:start="6991:16" pos:end="6993:25">(<expr pos:start="6991:17" pos:end="6993:24"><operator pos:start="6991:17" pos:end="6991:17">(</operator><name pos:start="6991:18" pos:end="6991:25"><name pos:start="6991:18" pos:end="6991:18">s</name><operator pos:start="6991:19" pos:end="6991:20">-&gt;</operator><name pos:start="6991:21" pos:end="6991:25">flags</name></name> <operator pos:start="6991:27" pos:end="6991:27">&amp;</operator> <name pos:start="6991:29" pos:end="6991:38">HF_EM_MASK</name><operator pos:start="6991:39" pos:end="6991:39">)</operator> <operator pos:start="6991:41" pos:end="6991:42">||</operator> <operator pos:start="6991:44" pos:end="6991:44">!</operator><operator pos:start="6991:45" pos:end="6991:45">(</operator><name pos:start="6991:46" pos:end="6991:53"><name pos:start="6991:46" pos:end="6991:46">s</name><operator pos:start="6991:47" pos:end="6991:48">-&gt;</operator><name pos:start="6991:49" pos:end="6991:53">flags</name></name> <operator pos:start="6991:55" pos:end="6991:55">&amp;</operator> <name pos:start="6991:57" pos:end="6991:70">HF_OSFXSR_MASK</name><operator pos:start="6991:71" pos:end="6991:71">)</operator> <operator pos:start="6991:73" pos:end="6991:74">||</operator>

                <name pos:start="6993:17" pos:end="6993:19">mod</name> <operator pos:start="6993:21" pos:end="6993:22">==</operator> <literal type="number" pos:start="6993:24" pos:end="6993:24">3</literal></expr>)</condition><block type="pseudo" pos:start="6995:17" pos:end="6995:32"><block_content pos:start="6995:17" pos:end="6995:32">

                <goto pos:start="6995:17" pos:end="6995:32">goto <name pos:start="6995:22" pos:end="6995:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6997:13" pos:end="6997:61"><expr pos:start="6997:13" pos:end="6997:60"><call pos:start="6997:13" pos:end="6997:60"><name pos:start="6997:13" pos:end="6997:25">gen_lea_modrm</name><argument_list pos:start="6997:26" pos:end="6997:60">(<argument pos:start="6997:27" pos:end="6997:27"><expr pos:start="6997:27" pos:end="6997:27"><name pos:start="6997:27" pos:end="6997:27">s</name></expr></argument>, <argument pos:start="6997:30" pos:end="6997:34"><expr pos:start="6997:30" pos:end="6997:34"><name pos:start="6997:30" pos:end="6997:34">modrm</name></expr></argument>, <argument pos:start="6997:37" pos:end="6997:45"><expr pos:start="6997:37" pos:end="6997:45"><operator pos:start="6997:37" pos:end="6997:37">&amp;</operator><name pos:start="6997:38" pos:end="6997:45">reg_addr</name></expr></argument>, <argument pos:start="6997:48" pos:end="6997:59"><expr pos:start="6997:48" pos:end="6997:59"><operator pos:start="6997:48" pos:end="6997:48">&amp;</operator><name pos:start="6997:49" pos:end="6997:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6999:13" pos:end="7013:13"><if pos:start="6999:13" pos:end="7007:13">if <condition pos:start="6999:16" pos:end="6999:24">(<expr pos:start="6999:17" pos:end="6999:23"><name pos:start="6999:17" pos:end="6999:18">op</name> <operator pos:start="6999:20" pos:end="6999:21">==</operator> <literal type="number" pos:start="6999:23" pos:end="6999:23">2</literal></expr>)</condition> <block pos:start="6999:26" pos:end="7007:13">{<block_content pos:start="7001:17" pos:end="7005:58">

                <expr_stmt pos:start="7001:17" pos:end="7001:56"><expr pos:start="7001:17" pos:end="7001:55"><call pos:start="7001:17" pos:end="7001:55"><name pos:start="7001:17" pos:end="7001:31">gen_op_ld_T0_A0</name><argument_list pos:start="7001:32" pos:end="7001:55">(<argument pos:start="7001:33" pos:end="7001:54"><expr pos:start="7001:33" pos:end="7001:54"><name pos:start="7001:33" pos:end="7001:39">OT_LONG</name> <operator pos:start="7001:41" pos:end="7001:41">+</operator> <name pos:start="7001:43" pos:end="7001:54"><name pos:start="7001:43" pos:end="7001:43">s</name><operator pos:start="7001:44" pos:end="7001:45">-&gt;</operator><name pos:start="7001:46" pos:end="7001:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7003:17" pos:end="7003:61"><expr pos:start="7003:17" pos:end="7003:60"><call pos:start="7003:17" pos:end="7003:60"><name pos:start="7003:17" pos:end="7003:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="7003:37" pos:end="7003:60">(<argument pos:start="7003:38" pos:end="7003:49"><expr pos:start="7003:38" pos:end="7003:49"><name pos:start="7003:38" pos:end="7003:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="7003:52" pos:end="7003:59"><expr pos:start="7003:52" pos:end="7003:59"><name pos:start="7003:52" pos:end="7003:59"><name pos:start="7003:52" pos:end="7003:56">cpu_T</name><index pos:start="7003:57" pos:end="7003:59">[<expr pos:start="7003:58" pos:end="7003:58"><literal type="number" pos:start="7003:58" pos:end="7003:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7005:17" pos:end="7005:58"><expr pos:start="7005:17" pos:end="7005:57"><call pos:start="7005:17" pos:end="7005:57"><name pos:start="7005:17" pos:end="7005:34">gen_helper_ldmxcsr</name><argument_list pos:start="7005:35" pos:end="7005:57">(<argument pos:start="7005:36" pos:end="7005:42"><expr pos:start="7005:36" pos:end="7005:42"><name pos:start="7005:36" pos:end="7005:42">cpu_env</name></expr></argument>, <argument pos:start="7005:45" pos:end="7005:56"><expr pos:start="7005:45" pos:end="7005:56"><name pos:start="7005:45" pos:end="7005:56">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7007:15" pos:end="7013:13">else <block pos:start="7007:20" pos:end="7013:13">{<block_content pos:start="7009:17" pos:end="7011:56">

                <expr_stmt pos:start="7009:17" pos:end="7009:82"><expr pos:start="7009:17" pos:end="7009:81"><call pos:start="7009:17" pos:end="7009:81"><name pos:start="7009:17" pos:end="7009:32">tcg_gen_ld32u_tl</name><argument_list pos:start="7009:33" pos:end="7009:81">(<argument pos:start="7009:34" pos:end="7009:41"><expr pos:start="7009:34" pos:end="7009:41"><name pos:start="7009:34" pos:end="7009:41"><name pos:start="7009:34" pos:end="7009:38">cpu_T</name><index pos:start="7009:39" pos:end="7009:41">[<expr pos:start="7009:40" pos:end="7009:40"><literal type="number" pos:start="7009:40" pos:end="7009:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="7009:44" pos:end="7009:50"><expr pos:start="7009:44" pos:end="7009:50"><name pos:start="7009:44" pos:end="7009:50">cpu_env</name></expr></argument>, <argument pos:start="7009:53" pos:end="7009:80"><expr pos:start="7009:53" pos:end="7009:80"><call pos:start="7009:53" pos:end="7009:80"><name pos:start="7009:53" pos:end="7009:60">offsetof</name><argument_list pos:start="7009:61" pos:end="7009:80">(<argument pos:start="7009:62" pos:end="7009:72"><expr pos:start="7009:62" pos:end="7009:72"><name pos:start="7009:62" pos:end="7009:72">CPUX86State</name></expr></argument>, <argument pos:start="7009:75" pos:end="7009:79"><expr pos:start="7009:75" pos:end="7009:79"><name pos:start="7009:75" pos:end="7009:79">mxcsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7011:17" pos:end="7011:56"><expr pos:start="7011:17" pos:end="7011:55"><call pos:start="7011:17" pos:end="7011:55"><name pos:start="7011:17" pos:end="7011:31">gen_op_st_T0_A0</name><argument_list pos:start="7011:32" pos:end="7011:55">(<argument pos:start="7011:33" pos:end="7011:54"><expr pos:start="7011:33" pos:end="7011:54"><name pos:start="7011:33" pos:end="7011:39">OT_LONG</name> <operator pos:start="7011:41" pos:end="7011:41">+</operator> <name pos:start="7011:43" pos:end="7011:54"><name pos:start="7011:43" pos:end="7011:43">s</name><operator pos:start="7011:44" pos:end="7011:45">-&gt;</operator><name pos:start="7011:46" pos:end="7011:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="7015:13" pos:end="7015:18">break;</break>

        <case pos:start="7017:9" pos:end="7017:15">case <expr pos:start="7017:14" pos:end="7017:14"><literal type="number" pos:start="7017:14" pos:end="7017:14">5</literal></expr>:</case> <comment type="block" pos:start="7017:17" pos:end="7017:28">/* lfence */</comment>

        <case pos:start="7019:9" pos:end="7019:15">case <expr pos:start="7019:14" pos:end="7019:14"><literal type="number" pos:start="7019:14" pos:end="7019:14">6</literal></expr>:</case> <comment type="block" pos:start="7019:17" pos:end="7019:28">/* mfence */</comment>

            <if_stmt pos:start="7021:13" pos:end="7023:32"><if pos:start="7021:13" pos:end="7023:32">if <condition pos:start="7021:16" pos:end="7021:76">(<expr pos:start="7021:17" pos:end="7021:75"><operator pos:start="7021:17" pos:end="7021:17">(</operator><name pos:start="7021:18" pos:end="7021:22">modrm</name> <operator pos:start="7021:24" pos:end="7021:24">&amp;</operator> <literal type="number" pos:start="7021:26" pos:end="7021:29">0xc7</literal><operator pos:start="7021:30" pos:end="7021:30">)</operator> <operator pos:start="7021:32" pos:end="7021:33">!=</operator> <literal type="number" pos:start="7021:35" pos:end="7021:38">0xc0</literal> <operator pos:start="7021:40" pos:end="7021:41">||</operator> <operator pos:start="7021:43" pos:end="7021:43">!</operator><operator pos:start="7021:44" pos:end="7021:44">(</operator><name pos:start="7021:45" pos:end="7021:61"><name pos:start="7021:45" pos:end="7021:45">s</name><operator pos:start="7021:46" pos:end="7021:47">-&gt;</operator><name pos:start="7021:48" pos:end="7021:61">cpuid_features</name></name> <operator pos:start="7021:63" pos:end="7021:63">&amp;</operator> <name pos:start="7021:65" pos:end="7021:74">CPUID_SSE2</name><operator pos:start="7021:75" pos:end="7021:75">)</operator></expr>)</condition><block type="pseudo" pos:start="7023:17" pos:end="7023:32"><block_content pos:start="7023:17" pos:end="7023:32">

                <goto pos:start="7023:17" pos:end="7023:32">goto <name pos:start="7023:22" pos:end="7023:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="7025:13" pos:end="7025:18">break;</break>

        <case pos:start="7027:9" pos:end="7027:15">case <expr pos:start="7027:14" pos:end="7027:14"><literal type="number" pos:start="7027:14" pos:end="7027:14">7</literal></expr>:</case> <comment type="block" pos:start="7027:17" pos:end="7027:38">/* sfence / clflush */</comment>

            <if_stmt pos:start="7029:13" pos:end="7049:13"><if pos:start="7029:13" pos:end="7039:13">if <condition pos:start="7029:16" pos:end="7029:39">(<expr pos:start="7029:17" pos:end="7029:38"><operator pos:start="7029:17" pos:end="7029:17">(</operator><name pos:start="7029:18" pos:end="7029:22">modrm</name> <operator pos:start="7029:24" pos:end="7029:24">&amp;</operator> <literal type="number" pos:start="7029:26" pos:end="7029:29">0xc7</literal><operator pos:start="7029:30" pos:end="7029:30">)</operator> <operator pos:start="7029:32" pos:end="7029:33">==</operator> <literal type="number" pos:start="7029:35" pos:end="7029:38">0xc0</literal></expr>)</condition> <block pos:start="7029:41" pos:end="7039:13">{<block_content pos:start="7035:17" pos:end="7037:36">

                <comment type="block" pos:start="7031:17" pos:end="7031:28">/* sfence */</comment>

                <comment type="block" pos:start="7033:17" pos:end="7033:79">/* XXX: also check for cpuid_ext2_features &amp; CPUID_EXT2_EMMX */</comment>

                <if_stmt pos:start="7035:17" pos:end="7037:36"><if pos:start="7035:17" pos:end="7037:36">if <condition pos:start="7035:20" pos:end="7035:53">(<expr pos:start="7035:21" pos:end="7035:52"><operator pos:start="7035:21" pos:end="7035:21">!</operator><operator pos:start="7035:22" pos:end="7035:22">(</operator><name pos:start="7035:23" pos:end="7035:39"><name pos:start="7035:23" pos:end="7035:23">s</name><operator pos:start="7035:24" pos:end="7035:25">-&gt;</operator><name pos:start="7035:26" pos:end="7035:39">cpuid_features</name></name> <operator pos:start="7035:41" pos:end="7035:41">&amp;</operator> <name pos:start="7035:43" pos:end="7035:51">CPUID_SSE</name><operator pos:start="7035:52" pos:end="7035:52">)</operator></expr>)</condition><block type="pseudo" pos:start="7037:21" pos:end="7037:36"><block_content pos:start="7037:21" pos:end="7037:36">

                    <goto pos:start="7037:21" pos:end="7037:36">goto <name pos:start="7037:26" pos:end="7037:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="7039:15" pos:end="7049:13">else <block pos:start="7039:20" pos:end="7049:13">{<block_content pos:start="7043:17" pos:end="7047:65">

                <comment type="block" pos:start="7041:17" pos:end="7041:29">/* clflush */</comment>

                <if_stmt pos:start="7043:17" pos:end="7045:36"><if pos:start="7043:17" pos:end="7045:36">if <condition pos:start="7043:20" pos:end="7043:57">(<expr pos:start="7043:21" pos:end="7043:56"><operator pos:start="7043:21" pos:end="7043:21">!</operator><operator pos:start="7043:22" pos:end="7043:22">(</operator><name pos:start="7043:23" pos:end="7043:39"><name pos:start="7043:23" pos:end="7043:23">s</name><operator pos:start="7043:24" pos:end="7043:25">-&gt;</operator><name pos:start="7043:26" pos:end="7043:39">cpuid_features</name></name> <operator pos:start="7043:41" pos:end="7043:41">&amp;</operator> <name pos:start="7043:43" pos:end="7043:55">CPUID_CLFLUSH</name><operator pos:start="7043:56" pos:end="7043:56">)</operator></expr>)</condition><block type="pseudo" pos:start="7045:21" pos:end="7045:36"><block_content pos:start="7045:21" pos:end="7045:36">

                    <goto pos:start="7045:21" pos:end="7045:36">goto <name pos:start="7045:26" pos:end="7045:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="7047:17" pos:end="7047:65"><expr pos:start="7047:17" pos:end="7047:64"><call pos:start="7047:17" pos:end="7047:64"><name pos:start="7047:17" pos:end="7047:29">gen_lea_modrm</name><argument_list pos:start="7047:30" pos:end="7047:64">(<argument pos:start="7047:31" pos:end="7047:31"><expr pos:start="7047:31" pos:end="7047:31"><name pos:start="7047:31" pos:end="7047:31">s</name></expr></argument>, <argument pos:start="7047:34" pos:end="7047:38"><expr pos:start="7047:34" pos:end="7047:38"><name pos:start="7047:34" pos:end="7047:38">modrm</name></expr></argument>, <argument pos:start="7047:41" pos:end="7047:49"><expr pos:start="7047:41" pos:end="7047:49"><operator pos:start="7047:41" pos:end="7047:41">&amp;</operator><name pos:start="7047:42" pos:end="7047:49">reg_addr</name></expr></argument>, <argument pos:start="7047:52" pos:end="7047:63"><expr pos:start="7047:52" pos:end="7047:63"><operator pos:start="7047:52" pos:end="7047:52">&amp;</operator><name pos:start="7047:53" pos:end="7047:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="7051:13" pos:end="7051:18">break;</break>

        <default pos:start="7053:9" pos:end="7053:16">default:</default>

            <goto pos:start="7055:13" pos:end="7055:28">goto <name pos:start="7055:18" pos:end="7055:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="7059:9" pos:end="7059:14">break;</break>

    <case pos:start="7061:5" pos:end="7061:15">case <expr pos:start="7061:10" pos:end="7061:14"><literal type="number" pos:start="7061:10" pos:end="7061:14">0x10d</literal></expr>:</case> <comment type="block" pos:start="7061:17" pos:end="7061:40">/* 3DNow! prefetch(w) */</comment>

        <expr_stmt pos:start="7063:9" pos:end="7063:55"><expr pos:start="7063:9" pos:end="7063:54"><name pos:start="7063:9" pos:end="7063:13">modrm</name> <operator pos:start="7063:15" pos:end="7063:15">=</operator> <call pos:start="7063:17" pos:end="7063:54"><name pos:start="7063:17" pos:end="7063:29">cpu_ldub_code</name><argument_list pos:start="7063:30" pos:end="7063:54">(<argument pos:start="7063:31" pos:end="7063:44"><expr pos:start="7063:31" pos:end="7063:44"><name pos:start="7063:31" pos:end="7063:44">cpu_single_env</name></expr></argument>, <argument pos:start="7063:47" pos:end="7063:53"><expr pos:start="7063:47" pos:end="7063:53"><name pos:start="7063:47" pos:end="7063:51"><name pos:start="7063:47" pos:end="7063:47">s</name><operator pos:start="7063:48" pos:end="7063:49">-&gt;</operator><name pos:start="7063:50" pos:end="7063:51">pc</name></name><operator pos:start="7063:52" pos:end="7063:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7065:9" pos:end="7065:31"><expr pos:start="7065:9" pos:end="7065:30"><name pos:start="7065:9" pos:end="7065:11">mod</name> <operator pos:start="7065:13" pos:end="7065:13">=</operator> <operator pos:start="7065:15" pos:end="7065:15">(</operator><name pos:start="7065:16" pos:end="7065:20">modrm</name> <operator pos:start="7065:22" pos:end="7065:23">&gt;&gt;</operator> <literal type="number" pos:start="7065:25" pos:end="7065:25">6</literal><operator pos:start="7065:26" pos:end="7065:26">)</operator> <operator pos:start="7065:28" pos:end="7065:28">&amp;</operator> <literal type="number" pos:start="7065:30" pos:end="7065:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="7067:9" pos:end="7069:28"><if pos:start="7067:9" pos:end="7069:28">if <condition pos:start="7067:12" pos:end="7067:21">(<expr pos:start="7067:13" pos:end="7067:20"><name pos:start="7067:13" pos:end="7067:15">mod</name> <operator pos:start="7067:17" pos:end="7067:18">==</operator> <literal type="number" pos:start="7067:20" pos:end="7067:20">3</literal></expr>)</condition><block type="pseudo" pos:start="7069:13" pos:end="7069:28"><block_content pos:start="7069:13" pos:end="7069:28">

            <goto pos:start="7069:13" pos:end="7069:28">goto <name pos:start="7069:18" pos:end="7069:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7071:9" pos:end="7071:57"><expr pos:start="7071:9" pos:end="7071:56"><call pos:start="7071:9" pos:end="7071:56"><name pos:start="7071:9" pos:end="7071:21">gen_lea_modrm</name><argument_list pos:start="7071:22" pos:end="7071:56">(<argument pos:start="7071:23" pos:end="7071:23"><expr pos:start="7071:23" pos:end="7071:23"><name pos:start="7071:23" pos:end="7071:23">s</name></expr></argument>, <argument pos:start="7071:26" pos:end="7071:30"><expr pos:start="7071:26" pos:end="7071:30"><name pos:start="7071:26" pos:end="7071:30">modrm</name></expr></argument>, <argument pos:start="7071:33" pos:end="7071:41"><expr pos:start="7071:33" pos:end="7071:41"><operator pos:start="7071:33" pos:end="7071:33">&amp;</operator><name pos:start="7071:34" pos:end="7071:41">reg_addr</name></expr></argument>, <argument pos:start="7071:44" pos:end="7071:55"><expr pos:start="7071:44" pos:end="7071:55"><operator pos:start="7071:44" pos:end="7071:44">&amp;</operator><name pos:start="7071:45" pos:end="7071:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="7073:9" pos:end="7073:28">/* ignore for now */</comment>

        <break pos:start="7075:9" pos:end="7075:14">break;</break>

    <case pos:start="7077:5" pos:end="7077:15">case <expr pos:start="7077:10" pos:end="7077:14"><literal type="number" pos:start="7077:10" pos:end="7077:14">0x1aa</literal></expr>:</case> <comment type="block" pos:start="7077:17" pos:end="7077:25">/* rsm */</comment>

        <expr_stmt pos:start="7079:9" pos:end="7079:59"><expr pos:start="7079:9" pos:end="7079:58"><call pos:start="7079:9" pos:end="7079:58"><name pos:start="7079:9" pos:end="7079:31">gen_svm_check_intercept</name><argument_list pos:start="7079:32" pos:end="7079:58">(<argument pos:start="7079:33" pos:end="7079:33"><expr pos:start="7079:33" pos:end="7079:33"><name pos:start="7079:33" pos:end="7079:33">s</name></expr></argument>, <argument pos:start="7079:36" pos:end="7079:43"><expr pos:start="7079:36" pos:end="7079:43"><name pos:start="7079:36" pos:end="7079:43">pc_start</name></expr></argument>, <argument pos:start="7079:46" pos:end="7079:57"><expr pos:start="7079:46" pos:end="7079:57"><name pos:start="7079:46" pos:end="7079:57">SVM_EXIT_RSM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="7081:9" pos:end="7083:28"><if pos:start="7081:9" pos:end="7083:28">if <condition pos:start="7081:12" pos:end="7081:38">(<expr pos:start="7081:13" pos:end="7081:37"><operator pos:start="7081:13" pos:end="7081:13">!</operator><operator pos:start="7081:14" pos:end="7081:14">(</operator><name pos:start="7081:15" pos:end="7081:22"><name pos:start="7081:15" pos:end="7081:15">s</name><operator pos:start="7081:16" pos:end="7081:17">-&gt;</operator><name pos:start="7081:18" pos:end="7081:22">flags</name></name> <operator pos:start="7081:24" pos:end="7081:24">&amp;</operator> <name pos:start="7081:26" pos:end="7081:36">HF_SMM_MASK</name><operator pos:start="7081:37" pos:end="7081:37">)</operator></expr>)</condition><block type="pseudo" pos:start="7083:13" pos:end="7083:28"><block_content pos:start="7083:13" pos:end="7083:28">

            <goto pos:start="7083:13" pos:end="7083:28">goto <name pos:start="7083:18" pos:end="7083:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7085:9" pos:end="7085:28"><expr pos:start="7085:9" pos:end="7085:27"><call pos:start="7085:9" pos:end="7085:27"><name pos:start="7085:9" pos:end="7085:24">gen_update_cc_op</name><argument_list pos:start="7085:25" pos:end="7085:27">(<argument pos:start="7085:26" pos:end="7085:26"><expr pos:start="7085:26" pos:end="7085:26"><name pos:start="7085:26" pos:end="7085:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7087:9" pos:end="7087:39"><expr pos:start="7087:9" pos:end="7087:38"><call pos:start="7087:9" pos:end="7087:38"><name pos:start="7087:9" pos:end="7087:18">gen_jmp_im</name><argument_list pos:start="7087:19" pos:end="7087:38">(<argument pos:start="7087:20" pos:end="7087:37"><expr pos:start="7087:20" pos:end="7087:37"><name pos:start="7087:20" pos:end="7087:24"><name pos:start="7087:20" pos:end="7087:20">s</name><operator pos:start="7087:21" pos:end="7087:22">-&gt;</operator><name pos:start="7087:23" pos:end="7087:24">pc</name></name> <operator pos:start="7087:26" pos:end="7087:26">-</operator> <name pos:start="7087:28" pos:end="7087:37"><name pos:start="7087:28" pos:end="7087:28">s</name><operator pos:start="7087:29" pos:end="7087:30">-&gt;</operator><name pos:start="7087:31" pos:end="7087:37">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7089:9" pos:end="7089:32"><expr pos:start="7089:9" pos:end="7089:31"><call pos:start="7089:9" pos:end="7089:31"><name pos:start="7089:9" pos:end="7089:22">gen_helper_rsm</name><argument_list pos:start="7089:23" pos:end="7089:31">(<argument pos:start="7089:24" pos:end="7089:30"><expr pos:start="7089:24" pos:end="7089:30"><name pos:start="7089:24" pos:end="7089:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7091:9" pos:end="7091:19"><expr pos:start="7091:9" pos:end="7091:18"><call pos:start="7091:9" pos:end="7091:18"><name pos:start="7091:9" pos:end="7091:15">gen_eob</name><argument_list pos:start="7091:16" pos:end="7091:18">(<argument pos:start="7091:17" pos:end="7091:17"><expr pos:start="7091:17" pos:end="7091:17"><name pos:start="7091:17" pos:end="7091:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7093:9" pos:end="7093:14">break;</break>

    <case pos:start="7095:5" pos:end="7095:15">case <expr pos:start="7095:10" pos:end="7095:14"><literal type="number" pos:start="7095:10" pos:end="7095:14">0x1b8</literal></expr>:</case> <comment type="block" pos:start="7095:17" pos:end="7095:35">/* SSE4.2 popcnt */</comment>

        <if_stmt pos:start="7097:9" pos:end="7101:28"><if pos:start="7097:9" pos:end="7101:28">if <condition pos:start="7097:12" pos:end="7099:25">(<expr pos:start="7097:13" pos:end="7099:24"><operator pos:start="7097:13" pos:end="7097:13">(</operator><name pos:start="7097:14" pos:end="7097:21">prefixes</name> <operator pos:start="7097:23" pos:end="7097:23">&amp;</operator> <operator pos:start="7097:25" pos:end="7097:25">(</operator><name pos:start="7097:26" pos:end="7097:36">PREFIX_REPZ</name> <operator pos:start="7097:38" pos:end="7097:38">|</operator> <name pos:start="7097:40" pos:end="7097:50">PREFIX_LOCK</name> <operator pos:start="7097:52" pos:end="7097:52">|</operator> <name pos:start="7097:54" pos:end="7097:65">PREFIX_REPNZ</name><operator pos:start="7097:66" pos:end="7097:66">)</operator><operator pos:start="7097:67" pos:end="7097:67">)</operator> <operator pos:start="7097:69" pos:end="7097:70">!=</operator>

             <name pos:start="7099:14" pos:end="7099:24">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="7101:13" pos:end="7101:28"><block_content pos:start="7101:13" pos:end="7101:28">

            <goto pos:start="7101:13" pos:end="7101:28">goto <name pos:start="7101:18" pos:end="7101:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="7103:9" pos:end="7105:28"><if pos:start="7103:9" pos:end="7105:28">if <condition pos:start="7103:12" pos:end="7103:56">(<expr pos:start="7103:13" pos:end="7103:55"><operator pos:start="7103:13" pos:end="7103:13">!</operator><operator pos:start="7103:14" pos:end="7103:14">(</operator><name pos:start="7103:15" pos:end="7103:35"><name pos:start="7103:15" pos:end="7103:15">s</name><operator pos:start="7103:16" pos:end="7103:17">-&gt;</operator><name pos:start="7103:18" pos:end="7103:35">cpuid_ext_features</name></name> <operator pos:start="7103:37" pos:end="7103:37">&amp;</operator> <name pos:start="7103:39" pos:end="7103:54">CPUID_EXT_POPCNT</name><operator pos:start="7103:55" pos:end="7103:55">)</operator></expr>)</condition><block type="pseudo" pos:start="7105:13" pos:end="7105:28"><block_content pos:start="7105:13" pos:end="7105:28">

            <goto pos:start="7105:13" pos:end="7105:28">goto <name pos:start="7105:18" pos:end="7105:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="7109:9" pos:end="7109:55"><expr pos:start="7109:9" pos:end="7109:54"><name pos:start="7109:9" pos:end="7109:13">modrm</name> <operator pos:start="7109:15" pos:end="7109:15">=</operator> <call pos:start="7109:17" pos:end="7109:54"><name pos:start="7109:17" pos:end="7109:29">cpu_ldub_code</name><argument_list pos:start="7109:30" pos:end="7109:54">(<argument pos:start="7109:31" pos:end="7109:44"><expr pos:start="7109:31" pos:end="7109:44"><name pos:start="7109:31" pos:end="7109:44">cpu_single_env</name></expr></argument>, <argument pos:start="7109:47" pos:end="7109:53"><expr pos:start="7109:47" pos:end="7109:53"><name pos:start="7109:47" pos:end="7109:51"><name pos:start="7109:47" pos:end="7109:47">s</name><operator pos:start="7109:48" pos:end="7109:49">-&gt;</operator><name pos:start="7109:50" pos:end="7109:51">pc</name></name><operator pos:start="7109:52" pos:end="7109:53">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7111:9" pos:end="7111:33"><expr pos:start="7111:9" pos:end="7111:32"><name pos:start="7111:9" pos:end="7111:11">reg</name> <operator pos:start="7111:13" pos:end="7111:13">=</operator> <operator pos:start="7111:15" pos:end="7111:15">(</operator><operator pos:start="7111:16" pos:end="7111:16">(</operator><name pos:start="7111:17" pos:end="7111:21">modrm</name> <operator pos:start="7111:23" pos:end="7111:24">&gt;&gt;</operator> <literal type="number" pos:start="7111:26" pos:end="7111:26">3</literal><operator pos:start="7111:27" pos:end="7111:27">)</operator> <operator pos:start="7111:29" pos:end="7111:29">&amp;</operator> <literal type="number" pos:start="7111:31" pos:end="7111:31">7</literal><operator pos:start="7111:32" pos:end="7111:32">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="7115:9" pos:end="7125:25"><if pos:start="7115:9" pos:end="7117:25">if <condition pos:start="7115:12" pos:end="7115:36">(<expr pos:start="7115:13" pos:end="7115:35"><name pos:start="7115:13" pos:end="7115:21"><name pos:start="7115:13" pos:end="7115:13">s</name><operator pos:start="7115:14" pos:end="7115:15">-&gt;</operator><name pos:start="7115:16" pos:end="7115:21">prefix</name></name> <operator pos:start="7115:23" pos:end="7115:23">&amp;</operator> <name pos:start="7115:25" pos:end="7115:35">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="7117:13" pos:end="7117:25"><block_content pos:start="7117:13" pos:end="7117:25">

            <expr_stmt pos:start="7117:13" pos:end="7117:25"><expr pos:start="7117:13" pos:end="7117:24"><name pos:start="7117:13" pos:end="7117:14">ot</name> <operator pos:start="7117:16" pos:end="7117:16">=</operator> <name pos:start="7117:18" pos:end="7117:24">OT_WORD</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="7119:9" pos:end="7121:25">else if <condition pos:start="7119:17" pos:end="7119:31">(<expr pos:start="7119:18" pos:end="7119:30"><name pos:start="7119:18" pos:end="7119:25"><name pos:start="7119:18" pos:end="7119:18">s</name><operator pos:start="7119:19" pos:end="7119:20">-&gt;</operator><name pos:start="7119:21" pos:end="7119:25">dflag</name></name> <operator pos:start="7119:27" pos:end="7119:28">!=</operator> <literal type="number" pos:start="7119:30" pos:end="7119:30">2</literal></expr>)</condition><block type="pseudo" pos:start="7121:13" pos:end="7121:25"><block_content pos:start="7121:13" pos:end="7121:25">

            <expr_stmt pos:start="7121:13" pos:end="7121:25"><expr pos:start="7121:13" pos:end="7121:24"><name pos:start="7121:13" pos:end="7121:14">ot</name> <operator pos:start="7121:16" pos:end="7121:16">=</operator> <name pos:start="7121:18" pos:end="7121:24">OT_LONG</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="7123:9" pos:end="7125:25">else<block type="pseudo" pos:start="7125:13" pos:end="7125:25"><block_content pos:start="7125:13" pos:end="7125:25">

            <expr_stmt pos:start="7125:13" pos:end="7125:25"><expr pos:start="7125:13" pos:end="7125:24"><name pos:start="7125:13" pos:end="7125:14">ot</name> <operator pos:start="7125:16" pos:end="7125:16">=</operator> <name pos:start="7125:18" pos:end="7125:24">OT_QUAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="7129:9" pos:end="7129:49"><expr pos:start="7129:9" pos:end="7129:48"><call pos:start="7129:9" pos:end="7129:48"><name pos:start="7129:9" pos:end="7129:22">gen_ldst_modrm</name><argument_list pos:start="7129:23" pos:end="7129:48">(<argument pos:start="7129:24" pos:end="7129:24"><expr pos:start="7129:24" pos:end="7129:24"><name pos:start="7129:24" pos:end="7129:24">s</name></expr></argument>, <argument pos:start="7129:27" pos:end="7129:31"><expr pos:start="7129:27" pos:end="7129:31"><name pos:start="7129:27" pos:end="7129:31">modrm</name></expr></argument>, <argument pos:start="7129:34" pos:end="7129:35"><expr pos:start="7129:34" pos:end="7129:35"><name pos:start="7129:34" pos:end="7129:35">ot</name></expr></argument>, <argument pos:start="7129:38" pos:end="7129:44"><expr pos:start="7129:38" pos:end="7129:44"><name pos:start="7129:38" pos:end="7129:44">OR_TMP0</name></expr></argument>, <argument pos:start="7129:47" pos:end="7129:47"><expr pos:start="7129:47" pos:end="7129:47"><literal type="number" pos:start="7129:47" pos:end="7129:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7131:9" pos:end="7131:74"><expr pos:start="7131:9" pos:end="7131:73"><call pos:start="7131:9" pos:end="7131:73"><name pos:start="7131:9" pos:end="7131:25">gen_helper_popcnt</name><argument_list pos:start="7131:26" pos:end="7131:73">(<argument pos:start="7131:27" pos:end="7131:34"><expr pos:start="7131:27" pos:end="7131:34"><name pos:start="7131:27" pos:end="7131:34"><name pos:start="7131:27" pos:end="7131:31">cpu_T</name><index pos:start="7131:32" pos:end="7131:34">[<expr pos:start="7131:33" pos:end="7131:33"><literal type="number" pos:start="7131:33" pos:end="7131:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="7131:37" pos:end="7131:43"><expr pos:start="7131:37" pos:end="7131:43"><name pos:start="7131:37" pos:end="7131:43">cpu_env</name></expr></argument>, <argument pos:start="7131:46" pos:end="7131:53"><expr pos:start="7131:46" pos:end="7131:53"><name pos:start="7131:46" pos:end="7131:53"><name pos:start="7131:46" pos:end="7131:50">cpu_T</name><index pos:start="7131:51" pos:end="7131:53">[<expr pos:start="7131:52" pos:end="7131:52"><literal type="number" pos:start="7131:52" pos:end="7131:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="7131:56" pos:end="7131:72"><expr pos:start="7131:56" pos:end="7131:72"><call pos:start="7131:56" pos:end="7131:72"><name pos:start="7131:56" pos:end="7131:68">tcg_const_i32</name><argument_list pos:start="7131:69" pos:end="7131:72">(<argument pos:start="7131:70" pos:end="7131:71"><expr pos:start="7131:70" pos:end="7131:71"><name pos:start="7131:70" pos:end="7131:71">ot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7133:9" pos:end="7133:35"><expr pos:start="7133:9" pos:end="7133:34"><call pos:start="7133:9" pos:end="7133:34"><name pos:start="7133:9" pos:end="7133:25">gen_op_mov_reg_T0</name><argument_list pos:start="7133:26" pos:end="7133:34">(<argument pos:start="7133:27" pos:end="7133:28"><expr pos:start="7133:27" pos:end="7133:28"><name pos:start="7133:27" pos:end="7133:28">ot</name></expr></argument>, <argument pos:start="7133:31" pos:end="7133:33"><expr pos:start="7133:31" pos:end="7133:33"><name pos:start="7133:31" pos:end="7133:33">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="7137:9" pos:end="7137:32"><expr pos:start="7137:9" pos:end="7137:31"><name pos:start="7137:9" pos:end="7137:16"><name pos:start="7137:9" pos:end="7137:9">s</name><operator pos:start="7137:10" pos:end="7137:11">-&gt;</operator><name pos:start="7137:12" pos:end="7137:16">cc_op</name></name> <operator pos:start="7137:18" pos:end="7137:18">=</operator> <name pos:start="7137:20" pos:end="7137:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="7139:9" pos:end="7139:14">break;</break>

    <case pos:start="7141:5" pos:end="7141:25">case <expr pos:start="7141:10" pos:end="7141:24"><literal type="number" pos:start="7141:10" pos:end="7141:14">0x10e</literal> <operator pos:start="7141:16" pos:end="7141:18">...</operator> <literal type="number" pos:start="7141:20" pos:end="7141:24">0x10f</literal></expr>:</case>

        <comment type="block" pos:start="7143:9" pos:end="7143:50">/* 3DNow! instructions, ignore prefixes */</comment>

        <expr_stmt pos:start="7145:9" pos:end="7145:65"><expr pos:start="7145:9" pos:end="7145:64"><name pos:start="7145:9" pos:end="7145:17"><name pos:start="7145:9" pos:end="7145:9">s</name><operator pos:start="7145:10" pos:end="7145:11">-&gt;</operator><name pos:start="7145:12" pos:end="7145:17">prefix</name></name> <operator pos:start="7145:19" pos:end="7145:20">&amp;=</operator> <operator pos:start="7145:22" pos:end="7145:22">~</operator><operator pos:start="7145:23" pos:end="7145:23">(</operator><name pos:start="7145:24" pos:end="7145:34">PREFIX_REPZ</name> <operator pos:start="7145:36" pos:end="7145:36">|</operator> <name pos:start="7145:38" pos:end="7145:49">PREFIX_REPNZ</name> <operator pos:start="7145:51" pos:end="7145:51">|</operator> <name pos:start="7145:53" pos:end="7145:63">PREFIX_DATA</name><operator pos:start="7145:64" pos:end="7145:64">)</operator></expr>;</expr_stmt>

    <case pos:start="7147:5" pos:end="7147:25">case <expr pos:start="7147:10" pos:end="7147:24"><literal type="number" pos:start="7147:10" pos:end="7147:14">0x110</literal> <operator pos:start="7147:16" pos:end="7147:18">...</operator> <literal type="number" pos:start="7147:20" pos:end="7147:24">0x117</literal></expr>:</case>

    <case pos:start="7149:5" pos:end="7149:25">case <expr pos:start="7149:10" pos:end="7149:24"><literal type="number" pos:start="7149:10" pos:end="7149:14">0x128</literal> <operator pos:start="7149:16" pos:end="7149:18">...</operator> <literal type="number" pos:start="7149:20" pos:end="7149:24">0x12f</literal></expr>:</case>

    <case pos:start="7151:5" pos:end="7151:25">case <expr pos:start="7151:10" pos:end="7151:24"><literal type="number" pos:start="7151:10" pos:end="7151:14">0x138</literal> <operator pos:start="7151:16" pos:end="7151:18">...</operator> <literal type="number" pos:start="7151:20" pos:end="7151:24">0x13a</literal></expr>:</case>

    <case pos:start="7153:5" pos:end="7153:25">case <expr pos:start="7153:10" pos:end="7153:24"><literal type="number" pos:start="7153:10" pos:end="7153:14">0x150</literal> <operator pos:start="7153:16" pos:end="7153:18">...</operator> <literal type="number" pos:start="7153:20" pos:end="7153:24">0x179</literal></expr>:</case>

    <case pos:start="7155:5" pos:end="7155:25">case <expr pos:start="7155:10" pos:end="7155:24"><literal type="number" pos:start="7155:10" pos:end="7155:14">0x17c</literal> <operator pos:start="7155:16" pos:end="7155:18">...</operator> <literal type="number" pos:start="7155:20" pos:end="7155:24">0x17f</literal></expr>:</case>

    <case pos:start="7157:5" pos:end="7157:15">case <expr pos:start="7157:10" pos:end="7157:14"><literal type="number" pos:start="7157:10" pos:end="7157:14">0x1c2</literal></expr>:</case>

    <case pos:start="7159:5" pos:end="7159:25">case <expr pos:start="7159:10" pos:end="7159:24"><literal type="number" pos:start="7159:10" pos:end="7159:14">0x1c4</literal> <operator pos:start="7159:16" pos:end="7159:18">...</operator> <literal type="number" pos:start="7159:20" pos:end="7159:24">0x1c6</literal></expr>:</case>

    <case pos:start="7161:5" pos:end="7161:25">case <expr pos:start="7161:10" pos:end="7161:24"><literal type="number" pos:start="7161:10" pos:end="7161:14">0x1d0</literal> <operator pos:start="7161:16" pos:end="7161:18">...</operator> <literal type="number" pos:start="7161:20" pos:end="7161:24">0x1fe</literal></expr>:</case>

        <expr_stmt pos:start="7163:9" pos:end="7163:39"><expr pos:start="7163:9" pos:end="7163:38"><call pos:start="7163:9" pos:end="7163:38"><name pos:start="7163:9" pos:end="7163:15">gen_sse</name><argument_list pos:start="7163:16" pos:end="7163:38">(<argument pos:start="7163:17" pos:end="7163:17"><expr pos:start="7163:17" pos:end="7163:17"><name pos:start="7163:17" pos:end="7163:17">s</name></expr></argument>, <argument pos:start="7163:20" pos:end="7163:20"><expr pos:start="7163:20" pos:end="7163:20"><name pos:start="7163:20" pos:end="7163:20">b</name></expr></argument>, <argument pos:start="7163:23" pos:end="7163:30"><expr pos:start="7163:23" pos:end="7163:30"><name pos:start="7163:23" pos:end="7163:30">pc_start</name></expr></argument>, <argument pos:start="7163:33" pos:end="7163:37"><expr pos:start="7163:33" pos:end="7163:37"><name pos:start="7163:33" pos:end="7163:37">rex_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7165:9" pos:end="7165:14">break;</break>

    <default pos:start="7167:5" pos:end="7167:12">default:</default>

        <goto pos:start="7169:9" pos:end="7169:24">goto <name pos:start="7169:14" pos:end="7169:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <comment type="block" pos:start="7173:5" pos:end="7173:25">/* lock generation */</comment>

    <if_stmt pos:start="7175:5" pos:end="7177:28"><if pos:start="7175:5" pos:end="7177:28">if <condition pos:start="7175:8" pos:end="7175:32">(<expr pos:start="7175:9" pos:end="7175:31"><name pos:start="7175:9" pos:end="7175:17"><name pos:start="7175:9" pos:end="7175:9">s</name><operator pos:start="7175:10" pos:end="7175:11">-&gt;</operator><name pos:start="7175:12" pos:end="7175:17">prefix</name></name> <operator pos:start="7175:19" pos:end="7175:19">&amp;</operator> <name pos:start="7175:21" pos:end="7175:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="7177:9" pos:end="7177:28"><block_content pos:start="7177:9" pos:end="7177:28">

        <expr_stmt pos:start="7177:9" pos:end="7177:28"><expr pos:start="7177:9" pos:end="7177:27"><call pos:start="7177:9" pos:end="7177:27"><name pos:start="7177:9" pos:end="7177:25">gen_helper_unlock</name><argument_list pos:start="7177:26" pos:end="7177:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="7179:5" pos:end="7179:17">return <expr pos:start="7179:12" pos:end="7179:16"><name pos:start="7179:12" pos:end="7179:16"><name pos:start="7179:12" pos:end="7179:12">s</name><operator pos:start="7179:13" pos:end="7179:14">-&gt;</operator><name pos:start="7179:15" pos:end="7179:16">pc</name></name></expr>;</return>

 <label pos:start="7181:2" pos:end="7181:12"><name pos:start="7181:2" pos:end="7181:11">illegal_op</name>:</label>

    <if_stmt pos:start="7183:5" pos:end="7185:28"><if pos:start="7183:5" pos:end="7185:28">if <condition pos:start="7183:8" pos:end="7183:32">(<expr pos:start="7183:9" pos:end="7183:31"><name pos:start="7183:9" pos:end="7183:17"><name pos:start="7183:9" pos:end="7183:9">s</name><operator pos:start="7183:10" pos:end="7183:11">-&gt;</operator><name pos:start="7183:12" pos:end="7183:17">prefix</name></name> <operator pos:start="7183:19" pos:end="7183:19">&amp;</operator> <name pos:start="7183:21" pos:end="7183:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="7185:9" pos:end="7185:28"><block_content pos:start="7185:9" pos:end="7185:28">

        <expr_stmt pos:start="7185:9" pos:end="7185:28"><expr pos:start="7185:9" pos:end="7185:27"><call pos:start="7185:9" pos:end="7185:27"><name pos:start="7185:9" pos:end="7185:25">gen_helper_unlock</name><argument_list pos:start="7185:26" pos:end="7185:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="7187:5" pos:end="7187:48">/* XXX: ensure that no lock was generated */</comment>

    <expr_stmt pos:start="7189:5" pos:end="7189:58"><expr pos:start="7189:5" pos:end="7189:57"><call pos:start="7189:5" pos:end="7189:57"><name pos:start="7189:5" pos:end="7189:17">gen_exception</name><argument_list pos:start="7189:18" pos:end="7189:57">(<argument pos:start="7189:19" pos:end="7189:19"><expr pos:start="7189:19" pos:end="7189:19"><name pos:start="7189:19" pos:end="7189:19">s</name></expr></argument>, <argument pos:start="7189:22" pos:end="7189:33"><expr pos:start="7189:22" pos:end="7189:33"><name pos:start="7189:22" pos:end="7189:33">EXCP06_ILLOP</name></expr></argument>, <argument pos:start="7189:36" pos:end="7189:56"><expr pos:start="7189:36" pos:end="7189:56"><name pos:start="7189:36" pos:end="7189:43">pc_start</name> <operator pos:start="7189:45" pos:end="7189:45">-</operator> <name pos:start="7189:47" pos:end="7189:56"><name pos:start="7189:47" pos:end="7189:47">s</name><operator pos:start="7189:48" pos:end="7189:49">-&gt;</operator><name pos:start="7189:50" pos:end="7189:56">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="7191:5" pos:end="7191:17">return <expr pos:start="7191:12" pos:end="7191:16"><name pos:start="7191:12" pos:end="7191:16"><name pos:start="7191:12" pos:end="7191:12">s</name><operator pos:start="7191:13" pos:end="7191:14">-&gt;</operator><name pos:start="7191:15" pos:end="7191:16">pc</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
