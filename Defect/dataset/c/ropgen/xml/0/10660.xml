<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10660.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_uuid</name><parameter_list pos:start="1:25" pos:end="1:70">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">MOVAtom</name></type> <name pos:start="1:66" pos:end="1:69">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="223:1">{<block_content pos:start="5:5" pos:end="221:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:20"><name pos:start="11:13" pos:end="11:16">uuid</name><index pos:start="11:17" pos:end="11:20">[<expr pos:start="11:18" pos:end="11:19"><literal type="number" pos:start="11:18" pos:end="11:19">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="19:6"><decl pos:start="13:5" pos:end="19:5"><type pos:start="13:5" pos:end="13:24"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <specifier pos:start="13:12" pos:end="13:16">const</specifier> <name pos:start="13:18" pos:end="13:24">uint8_t</name></type> <name pos:start="13:26" pos:end="13:45"><name pos:start="13:26" pos:end="13:43">uuid_isml_manifest</name><index pos:start="13:44" pos:end="13:45">[]</index></name> <init pos:start="13:47" pos:end="19:5">= <expr pos:start="13:49" pos:end="19:5"><block pos:start="13:49" pos:end="19:5">{

        <expr pos:start="15:9" pos:end="15:12"><literal type="number" pos:start="15:9" pos:end="15:12">0xa5</literal></expr>, <expr pos:start="15:15" pos:end="15:18"><literal type="number" pos:start="15:15" pos:end="15:18">0xd4</literal></expr>, <expr pos:start="15:21" pos:end="15:24"><literal type="number" pos:start="15:21" pos:end="15:24">0x0b</literal></expr>, <expr pos:start="15:27" pos:end="15:30"><literal type="number" pos:start="15:27" pos:end="15:30">0x30</literal></expr>, <expr pos:start="15:33" pos:end="15:36"><literal type="number" pos:start="15:33" pos:end="15:36">0xe8</literal></expr>, <expr pos:start="15:39" pos:end="15:42"><literal type="number" pos:start="15:39" pos:end="15:42">0x14</literal></expr>, <expr pos:start="15:45" pos:end="15:48"><literal type="number" pos:start="15:45" pos:end="15:48">0x11</literal></expr>, <expr pos:start="15:51" pos:end="15:54"><literal type="number" pos:start="15:51" pos:end="15:54">0xdd</literal></expr>,

        <expr pos:start="17:9" pos:end="17:12"><literal type="number" pos:start="17:9" pos:end="17:12">0xba</literal></expr>, <expr pos:start="17:15" pos:end="17:18"><literal type="number" pos:start="17:15" pos:end="17:18">0x2f</literal></expr>, <expr pos:start="17:21" pos:end="17:24"><literal type="number" pos:start="17:21" pos:end="17:24">0x08</literal></expr>, <expr pos:start="17:27" pos:end="17:30"><literal type="number" pos:start="17:27" pos:end="17:30">0x00</literal></expr>, <expr pos:start="17:33" pos:end="17:36"><literal type="number" pos:start="17:33" pos:end="17:36">0x20</literal></expr>, <expr pos:start="17:39" pos:end="17:42"><literal type="number" pos:start="17:39" pos:end="17:42">0x0c</literal></expr>, <expr pos:start="17:45" pos:end="17:48"><literal type="number" pos:start="17:45" pos:end="17:48">0x9a</literal></expr>, <expr pos:start="17:51" pos:end="17:54"><literal type="number" pos:start="17:51" pos:end="17:54">0x66</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="27:6"><decl pos:start="21:5" pos:end="27:5"><type pos:start="21:5" pos:end="21:24"><specifier pos:start="21:5" pos:end="21:10">static</specifier> <specifier pos:start="21:12" pos:end="21:16">const</specifier> <name pos:start="21:18" pos:end="21:24">uint8_t</name></type> <name pos:start="21:26" pos:end="21:35"><name pos:start="21:26" pos:end="21:33">uuid_xmp</name><index pos:start="21:34" pos:end="21:35">[]</index></name> <init pos:start="21:37" pos:end="27:5">= <expr pos:start="21:39" pos:end="27:5"><block pos:start="21:39" pos:end="27:5">{

        <expr pos:start="23:9" pos:end="23:12"><literal type="number" pos:start="23:9" pos:end="23:12">0xbe</literal></expr>, <expr pos:start="23:15" pos:end="23:18"><literal type="number" pos:start="23:15" pos:end="23:18">0x7a</literal></expr>, <expr pos:start="23:21" pos:end="23:24"><literal type="number" pos:start="23:21" pos:end="23:24">0xcf</literal></expr>, <expr pos:start="23:27" pos:end="23:30"><literal type="number" pos:start="23:27" pos:end="23:30">0xcb</literal></expr>, <expr pos:start="23:33" pos:end="23:36"><literal type="number" pos:start="23:33" pos:end="23:36">0x97</literal></expr>, <expr pos:start="23:39" pos:end="23:42"><literal type="number" pos:start="23:39" pos:end="23:42">0xa9</literal></expr>, <expr pos:start="23:45" pos:end="23:48"><literal type="number" pos:start="23:45" pos:end="23:48">0x42</literal></expr>, <expr pos:start="23:51" pos:end="23:54"><literal type="number" pos:start="23:51" pos:end="23:54">0xe8</literal></expr>,

        <expr pos:start="25:9" pos:end="25:12"><literal type="number" pos:start="25:9" pos:end="25:12">0x9c</literal></expr>, <expr pos:start="25:15" pos:end="25:18"><literal type="number" pos:start="25:15" pos:end="25:18">0x71</literal></expr>, <expr pos:start="25:21" pos:end="25:24"><literal type="number" pos:start="25:21" pos:end="25:24">0x99</literal></expr>, <expr pos:start="25:27" pos:end="25:30"><literal type="number" pos:start="25:27" pos:end="25:30">0x94</literal></expr>, <expr pos:start="25:33" pos:end="25:36"><literal type="number" pos:start="25:33" pos:end="25:36">0x91</literal></expr>, <expr pos:start="25:39" pos:end="25:42"><literal type="number" pos:start="25:39" pos:end="25:42">0xe3</literal></expr>, <expr pos:start="25:45" pos:end="25:48"><literal type="number" pos:start="25:45" pos:end="25:48">0xaf</literal></expr>, <expr pos:start="25:51" pos:end="25:54"><literal type="number" pos:start="25:51" pos:end="25:54">0xac</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="35:6"><decl pos:start="29:5" pos:end="35:5"><type pos:start="29:5" pos:end="29:24"><specifier pos:start="29:5" pos:end="29:10">static</specifier> <specifier pos:start="29:12" pos:end="29:16">const</specifier> <name pos:start="29:18" pos:end="29:24">uint8_t</name></type> <name pos:start="29:26" pos:end="29:41"><name pos:start="29:26" pos:end="29:39">uuid_spherical</name><index pos:start="29:40" pos:end="29:41">[]</index></name> <init pos:start="29:43" pos:end="35:5">= <expr pos:start="29:45" pos:end="35:5"><block pos:start="29:45" pos:end="35:5">{

        <expr pos:start="31:9" pos:end="31:12"><literal type="number" pos:start="31:9" pos:end="31:12">0xff</literal></expr>, <expr pos:start="31:15" pos:end="31:18"><literal type="number" pos:start="31:15" pos:end="31:18">0xcc</literal></expr>, <expr pos:start="31:21" pos:end="31:24"><literal type="number" pos:start="31:21" pos:end="31:24">0x82</literal></expr>, <expr pos:start="31:27" pos:end="31:30"><literal type="number" pos:start="31:27" pos:end="31:30">0x63</literal></expr>, <expr pos:start="31:33" pos:end="31:36"><literal type="number" pos:start="31:33" pos:end="31:36">0xf8</literal></expr>, <expr pos:start="31:39" pos:end="31:42"><literal type="number" pos:start="31:39" pos:end="31:42">0x55</literal></expr>, <expr pos:start="31:45" pos:end="31:48"><literal type="number" pos:start="31:45" pos:end="31:48">0x4a</literal></expr>, <expr pos:start="31:51" pos:end="31:54"><literal type="number" pos:start="31:51" pos:end="31:54">0x93</literal></expr>,

        <expr pos:start="33:9" pos:end="33:12"><literal type="number" pos:start="33:9" pos:end="33:12">0x88</literal></expr>, <expr pos:start="33:15" pos:end="33:18"><literal type="number" pos:start="33:15" pos:end="33:18">0x14</literal></expr>, <expr pos:start="33:21" pos:end="33:24"><literal type="number" pos:start="33:21" pos:end="33:24">0x58</literal></expr>, <expr pos:start="33:27" pos:end="33:30"><literal type="number" pos:start="33:27" pos:end="33:30">0x7a</literal></expr>, <expr pos:start="33:33" pos:end="33:36"><literal type="number" pos:start="33:33" pos:end="33:36">0x02</literal></expr>, <expr pos:start="33:39" pos:end="33:42"><literal type="number" pos:start="33:39" pos:end="33:42">0x52</literal></expr>, <expr pos:start="33:45" pos:end="33:48"><literal type="number" pos:start="33:45" pos:end="33:48">0x1f</literal></expr>, <expr pos:start="33:51" pos:end="33:54"><literal type="number" pos:start="33:51" pos:end="33:54">0xdd</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="41:35"><if pos:start="39:5" pos:end="41:35">if <condition pos:start="39:8" pos:end="39:59">(<expr pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:12">atom</name><operator pos:start="39:13" pos:end="39:13">.</operator><name pos:start="39:14" pos:end="39:17">size</name></name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <sizeof pos:start="39:21" pos:end="39:32">sizeof<argument_list pos:start="39:27" pos:end="39:32">(<argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">uuid</name></expr></argument>)</argument_list></sizeof> <operator pos:start="39:34" pos:end="39:35">||</operator> <name pos:start="39:37" pos:end="39:45"><name pos:start="39:37" pos:end="39:40">atom</name><operator pos:start="39:41" pos:end="39:41">.</operator><name pos:start="39:42" pos:end="39:45">size</name></name> <operator pos:start="39:47" pos:end="39:48">==</operator> <name pos:start="39:50" pos:end="39:58">INT64_MAX</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:35"><block_content pos:start="41:9" pos:end="41:35">

        <return pos:start="41:9" pos:end="41:35">return <expr pos:start="41:16" pos:end="41:34"><name pos:start="41:16" pos:end="41:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="47:17"><if pos:start="45:5" pos:end="47:17">if <condition pos:start="45:8" pos:end="45:30">(<expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:9">c</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:13">fc</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:25">nb_streams</name></name> <operator pos:start="45:27" pos:end="45:27">&lt;</operator> <literal type="number" pos:start="45:29" pos:end="45:29">1</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:17"><block_content pos:start="47:9" pos:end="47:17">

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:47"><expr pos:start="49:5" pos:end="49:46"><name pos:start="49:5" pos:end="49:6">st</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <name pos:start="49:10" pos:end="49:46"><name pos:start="49:10" pos:end="49:10">c</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:14">fc</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:23">streams</name><index pos:start="49:24" pos:end="49:46">[<expr pos:start="49:25" pos:end="49:45"><name pos:start="49:25" pos:end="49:41"><name pos:start="49:25" pos:end="49:25">c</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:29">fc</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:41">nb_streams</name></name> <operator pos:start="49:43" pos:end="49:43">-</operator> <literal type="number" pos:start="49:45" pos:end="49:45">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:23"><expr pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:6">sc</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <name pos:start="51:10" pos:end="51:22"><name pos:start="51:10" pos:end="51:11">st</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:22">priv_data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:43"><name pos:start="55:11" pos:end="55:19">avio_read</name><argument_list pos:start="55:20" pos:end="55:43">(<argument pos:start="55:21" pos:end="55:22"><expr pos:start="55:21" pos:end="55:22"><name pos:start="55:21" pos:end="55:22">pb</name></expr></argument>, <argument pos:start="55:25" pos:end="55:28"><expr pos:start="55:25" pos:end="55:28"><name pos:start="55:25" pos:end="55:28">uuid</name></expr></argument>, <argument pos:start="55:31" pos:end="55:42"><expr pos:start="55:31" pos:end="55:42"><sizeof pos:start="55:31" pos:end="55:42">sizeof<argument_list pos:start="55:37" pos:end="55:42">(<argument pos:start="55:38" pos:end="55:41"><expr pos:start="55:38" pos:end="55:41"><name pos:start="55:38" pos:end="55:41">uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition> <block pos:start="57:18" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:19">

        <return pos:start="59:9" pos:end="59:19">return <expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">ret</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="65:5">else if <condition pos:start="61:15" pos:end="61:35">(<expr pos:start="61:16" pos:end="61:34"><name pos:start="61:16" pos:end="61:18">ret</name> <operator pos:start="61:20" pos:end="61:21">!=</operator> <sizeof pos:start="61:23" pos:end="61:34">sizeof<argument_list pos:start="61:29" pos:end="61:34">(<argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">uuid</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="61:37" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:35">

        <return pos:start="63:9" pos:end="63:35">return <expr pos:start="63:16" pos:end="63:34"><name pos:start="63:16" pos:end="63:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="217:85"><if pos:start="67:5" pos:end="155:5">if <condition pos:start="67:8" pos:end="67:56">(<expr pos:start="67:9" pos:end="67:55"><operator pos:start="67:9" pos:end="67:9">!</operator><call pos:start="67:10" pos:end="67:55"><name pos:start="67:10" pos:end="67:15">memcmp</name><argument_list pos:start="67:16" pos:end="67:55">(<argument pos:start="67:17" pos:end="67:20"><expr pos:start="67:17" pos:end="67:20"><name pos:start="67:17" pos:end="67:20">uuid</name></expr></argument>, <argument pos:start="67:23" pos:end="67:40"><expr pos:start="67:23" pos:end="67:40"><name pos:start="67:23" pos:end="67:40">uuid_isml_manifest</name></expr></argument>, <argument pos:start="67:43" pos:end="67:54"><expr pos:start="67:43" pos:end="67:54"><sizeof pos:start="67:43" pos:end="67:54">sizeof<argument_list pos:start="67:49" pos:end="67:54">(<argument pos:start="67:50" pos:end="67:53"><expr pos:start="67:50" pos:end="67:53"><name pos:start="67:50" pos:end="67:53">uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:58" pos:end="155:5">{<block_content pos:start="69:9" pos:end="153:24">

        <decl_stmt pos:start="69:9" pos:end="69:30"><decl pos:start="69:9" pos:end="69:23"><type pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:15">uint8_t</name> <modifier pos:start="69:17" pos:end="69:17">*</modifier></type><name pos:start="69:18" pos:end="69:23">buffer</name></decl>, <decl pos:start="69:26" pos:end="69:29"><type ref="prev" pos:start="69:9" pos:end="69:17"><modifier pos:start="69:26" pos:end="69:26">*</modifier></type><name pos:start="69:27" pos:end="69:29">ptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:21"><decl pos:start="71:9" pos:end="71:20"><type pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:12">char</name> <modifier pos:start="71:14" pos:end="71:14">*</modifier></type><name pos:start="71:15" pos:end="71:20">endptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:46"><decl pos:start="73:9" pos:end="73:45"><type pos:start="73:9" pos:end="73:14"><name pos:start="73:9" pos:end="73:14">size_t</name></type> <name pos:start="73:16" pos:end="73:18">len</name> <init pos:start="73:20" pos:end="73:45">= <expr pos:start="73:22" pos:end="73:45"><name pos:start="73:22" pos:end="73:30"><name pos:start="73:22" pos:end="73:25">atom</name><operator pos:start="73:26" pos:end="73:26">.</operator><name pos:start="73:27" pos:end="73:30">size</name></name> <operator pos:start="73:32" pos:end="73:32">-</operator> <sizeof pos:start="73:34" pos:end="73:45">sizeof<argument_list pos:start="73:40" pos:end="73:45">(<argument pos:start="73:41" pos:end="73:44"><expr pos:start="73:41" pos:end="73:44"><name pos:start="73:41" pos:end="73:44">uuid</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:20">(<expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:15">len</name> <operator pos:start="77:17" pos:end="77:17">&lt;</operator> <literal type="number" pos:start="77:19" pos:end="77:19">4</literal></expr>)</condition> <block pos:start="77:22" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:39">

            <return pos:start="79:13" pos:end="79:39">return <expr pos:start="79:20" pos:end="79:38"><name pos:start="79:20" pos:end="79:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:31"><expr pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:30"><name pos:start="83:15" pos:end="83:23">avio_skip</name><argument_list pos:start="83:24" pos:end="83:30">(<argument pos:start="83:25" pos:end="83:26"><expr pos:start="83:25" pos:end="83:26"><name pos:start="83:25" pos:end="83:26">pb</name></expr></argument>, <argument pos:start="83:29" pos:end="83:29"><expr pos:start="83:29" pos:end="83:29"><literal type="number" pos:start="83:29" pos:end="83:29">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="83:33" pos:end="83:41">// zeroes</comment>

        <expr_stmt pos:start="85:9" pos:end="85:17"><expr pos:start="85:9" pos:end="85:16"><name pos:start="85:9" pos:end="85:11">len</name> <operator pos:start="85:13" pos:end="85:14">-=</operator> <literal type="number" pos:start="85:16" pos:end="85:16">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:37"><expr pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:14">buffer</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:36"><name pos:start="89:18" pos:end="89:27">av_mallocz</name><argument_list pos:start="89:28" pos:end="89:36">(<argument pos:start="89:29" pos:end="89:35"><expr pos:start="89:29" pos:end="89:35"><name pos:start="89:29" pos:end="89:31">len</name> <operator pos:start="89:33" pos:end="89:33">+</operator> <literal type="number" pos:start="89:35" pos:end="89:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:20">(<expr pos:start="91:13" pos:end="91:19"><operator pos:start="91:13" pos:end="91:13">!</operator><name pos:start="91:14" pos:end="91:19">buffer</name></expr>)</condition> <block pos:start="91:22" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:35">

            <return pos:start="93:13" pos:end="93:35">return <expr pos:start="93:20" pos:end="93:34"><call pos:start="93:20" pos:end="93:34"><name pos:start="93:20" pos:end="93:26">AVERROR</name><argument_list pos:start="93:27" pos:end="93:34">(<argument pos:start="93:28" pos:end="93:33"><expr pos:start="93:28" pos:end="93:33"><name pos:start="93:28" pos:end="93:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:40"><name pos:start="97:15" pos:end="97:23">avio_read</name><argument_list pos:start="97:24" pos:end="97:40">(<argument pos:start="97:25" pos:end="97:26"><expr pos:start="97:25" pos:end="97:26"><name pos:start="97:25" pos:end="97:26">pb</name></expr></argument>, <argument pos:start="97:29" pos:end="97:34"><expr pos:start="97:29" pos:end="97:34"><name pos:start="97:29" pos:end="97:34">buffer</name></expr></argument>, <argument pos:start="97:37" pos:end="97:39"><expr pos:start="97:37" pos:end="97:39"><name pos:start="97:37" pos:end="97:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="111:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:20">(<expr pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">&lt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr>)</condition> <block pos:start="99:22" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:23">

            <expr_stmt pos:start="101:13" pos:end="101:28"><expr pos:start="101:13" pos:end="101:27"><call pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:19">av_free</name><argument_list pos:start="101:20" pos:end="101:27">(<argument pos:start="101:21" pos:end="101:26"><expr pos:start="101:21" pos:end="101:26"><name pos:start="101:21" pos:end="101:26">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:23">return <expr pos:start="103:20" pos:end="103:22"><name pos:start="103:20" pos:end="103:22">ret</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="105:11" pos:end="111:9">else if <condition pos:start="105:19" pos:end="105:30">(<expr pos:start="105:20" pos:end="105:29"><name pos:start="105:20" pos:end="105:22">ret</name> <operator pos:start="105:24" pos:end="105:25">!=</operator> <name pos:start="105:27" pos:end="105:29">len</name></expr>)</condition> <block pos:start="105:32" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:39">

            <expr_stmt pos:start="107:13" pos:end="107:28"><expr pos:start="107:13" pos:end="107:27"><call pos:start="107:13" pos:end="107:27"><name pos:start="107:13" pos:end="107:19">av_free</name><argument_list pos:start="107:20" pos:end="107:27">(<argument pos:start="107:21" pos:end="107:26"><expr pos:start="107:21" pos:end="107:26"><name pos:start="107:21" pos:end="107:26">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:39">return <expr pos:start="109:20" pos:end="109:38"><name pos:start="109:20" pos:end="109:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:21"><expr pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:11">ptr</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:20">buffer</name></expr>;</expr_stmt>

        <while pos:start="117:9" pos:end="149:9">while <condition pos:start="117:15" pos:end="117:59">(<expr pos:start="117:16" pos:end="117:58"><operator pos:start="117:16" pos:end="117:16">(</operator><name pos:start="117:17" pos:end="117:19">ptr</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:57"><name pos:start="117:23" pos:end="117:32">av_stristr</name><argument_list pos:start="117:33" pos:end="117:57">(<argument pos:start="117:34" pos:end="117:36"><expr pos:start="117:34" pos:end="117:36"><name pos:start="117:34" pos:end="117:36">ptr</name></expr></argument>, <argument pos:start="117:39" pos:end="117:56"><expr pos:start="117:39" pos:end="117:56"><literal type="string" pos:start="117:39" pos:end="117:56">"systemBitrate=\""</literal></expr></argument>)</argument_list></call><operator pos:start="117:58" pos:end="117:58">)</operator></expr>)</condition> <block pos:start="117:61" pos:end="149:9">{<block_content pos:start="119:13" pos:end="147:13">

            <expr_stmt pos:start="119:13" pos:end="119:50"><expr pos:start="119:13" pos:end="119:49"><name pos:start="119:13" pos:end="119:15">ptr</name> <operator pos:start="119:17" pos:end="119:18">+=</operator> <sizeof pos:start="119:20" pos:end="119:45">sizeof<argument_list pos:start="119:26" pos:end="119:45">(<argument pos:start="119:27" pos:end="119:44"><expr pos:start="119:27" pos:end="119:44"><literal type="string" pos:start="119:27" pos:end="119:44">"systemBitrate=\""</literal></expr></argument>)</argument_list></sizeof> <operator pos:start="119:47" pos:end="119:47">-</operator> <literal type="number" pos:start="119:49" pos:end="119:49">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:32"><expr pos:start="121:13" pos:end="121:31"><name pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:13">c</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:29">bitrates_count</name></name><operator pos:start="121:30" pos:end="121:31">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:93"><expr pos:start="123:13" pos:end="123:92"><name pos:start="123:13" pos:end="123:23"><name pos:start="123:13" pos:end="123:13">c</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:23">bitrates</name></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <call pos:start="123:27" pos:end="123:92"><name pos:start="123:27" pos:end="123:38">av_realloc_f</name><argument_list pos:start="123:39" pos:end="123:92">(<argument pos:start="123:40" pos:end="123:50"><expr pos:start="123:40" pos:end="123:50"><name pos:start="123:40" pos:end="123:50"><name pos:start="123:40" pos:end="123:40">c</name><operator pos:start="123:41" pos:end="123:42">-&gt;</operator><name pos:start="123:43" pos:end="123:50">bitrates</name></name></expr></argument>, <argument pos:start="123:53" pos:end="123:69"><expr pos:start="123:53" pos:end="123:69"><name pos:start="123:53" pos:end="123:69"><name pos:start="123:53" pos:end="123:53">c</name><operator pos:start="123:54" pos:end="123:55">-&gt;</operator><name pos:start="123:56" pos:end="123:69">bitrates_count</name></name></expr></argument>, <argument pos:start="123:72" pos:end="123:91"><expr pos:start="123:72" pos:end="123:91"><sizeof pos:start="123:72" pos:end="123:91">sizeof<argument_list pos:start="123:78" pos:end="123:91">(<argument pos:start="123:79" pos:end="123:90"><expr pos:start="123:79" pos:end="123:90"><operator pos:start="123:79" pos:end="123:79">*</operator><name pos:start="123:80" pos:end="123:90"><name pos:start="123:80" pos:end="123:80">c</name><operator pos:start="123:81" pos:end="123:82">-&gt;</operator><name pos:start="123:83" pos:end="123:90">bitrates</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="133:13"><if pos:start="125:13" pos:end="133:13">if <condition pos:start="125:16" pos:end="125:29">(<expr pos:start="125:17" pos:end="125:28"><operator pos:start="125:17" pos:end="125:17">!</operator><name pos:start="125:18" pos:end="125:28"><name pos:start="125:18" pos:end="125:18">c</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:28">bitrates</name></name></expr>)</condition> <block pos:start="125:31" pos:end="133:13">{<block_content pos:start="127:17" pos:end="131:39">

                <expr_stmt pos:start="127:17" pos:end="127:38"><expr pos:start="127:17" pos:end="127:37"><name pos:start="127:17" pos:end="127:33"><name pos:start="127:17" pos:end="127:17">c</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:33">bitrates_count</name></name> <operator pos:start="127:35" pos:end="127:35">=</operator> <literal type="number" pos:start="127:37" pos:end="127:37">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:32"><expr pos:start="129:17" pos:end="129:31"><call pos:start="129:17" pos:end="129:31"><name pos:start="129:17" pos:end="129:23">av_free</name><argument_list pos:start="129:24" pos:end="129:31">(<argument pos:start="129:25" pos:end="129:30"><expr pos:start="129:25" pos:end="129:30"><name pos:start="129:25" pos:end="129:30">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="131:17" pos:end="131:39">return <expr pos:start="131:24" pos:end="131:38"><call pos:start="131:24" pos:end="131:38"><name pos:start="131:24" pos:end="131:30">AVERROR</name><argument_list pos:start="131:31" pos:end="131:38">(<argument pos:start="131:32" pos:end="131:37"><expr pos:start="131:32" pos:end="131:37"><name pos:start="131:32" pos:end="131:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:22"><expr pos:start="135:13" pos:end="135:21"><name pos:start="135:13" pos:end="135:17">errno</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <literal type="number" pos:start="135:21" pos:end="135:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:43"><expr pos:start="137:13" pos:end="137:42"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:42"><name pos:start="137:19" pos:end="137:24">strtol</name><argument_list pos:start="137:25" pos:end="137:42">(<argument pos:start="137:26" pos:end="137:28"><expr pos:start="137:26" pos:end="137:28"><name pos:start="137:26" pos:end="137:28">ptr</name></expr></argument>, <argument pos:start="137:31" pos:end="137:37"><expr pos:start="137:31" pos:end="137:37"><operator pos:start="137:31" pos:end="137:31">&amp;</operator><name pos:start="137:32" pos:end="137:37">endptr</name></expr></argument>, <argument pos:start="137:40" pos:end="137:41"><expr pos:start="137:40" pos:end="137:41"><literal type="number" pos:start="137:40" pos:end="137:41">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="147:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:51">(<expr pos:start="139:17" pos:end="139:50"><name pos:start="139:17" pos:end="139:19">ret</name> <operator pos:start="139:21" pos:end="139:21">&lt;</operator> <literal type="number" pos:start="139:23" pos:end="139:23">0</literal> <operator pos:start="139:25" pos:end="139:26">||</operator> <name pos:start="139:28" pos:end="139:32">errno</name> <operator pos:start="139:34" pos:end="139:35">||</operator> <operator pos:start="139:37" pos:end="139:37">*</operator><name pos:start="139:38" pos:end="139:43">endptr</name> <operator pos:start="139:45" pos:end="139:46">!=</operator> <literal type="char" pos:start="139:48" pos:end="139:50">'"'</literal></expr>)</condition> <block pos:start="139:53" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:55">

                <expr_stmt pos:start="141:17" pos:end="141:55"><expr pos:start="141:17" pos:end="141:54"><name pos:start="141:17" pos:end="141:50"><name pos:start="141:17" pos:end="141:17">c</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:27">bitrates</name><index pos:start="141:28" pos:end="141:50">[<expr pos:start="141:29" pos:end="141:49"><name pos:start="141:29" pos:end="141:45"><name pos:start="141:29" pos:end="141:29">c</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:45">bitrates_count</name></name> <operator pos:start="141:47" pos:end="141:47">-</operator> <literal type="number" pos:start="141:49" pos:end="141:49">1</literal></expr>]</index></name> <operator pos:start="141:52" pos:end="141:52">=</operator> <literal type="number" pos:start="141:54" pos:end="141:54">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="143:15" pos:end="147:13">else <block pos:start="143:20" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:57">

                <expr_stmt pos:start="145:17" pos:end="145:57"><expr pos:start="145:17" pos:end="145:56"><name pos:start="145:17" pos:end="145:50"><name pos:start="145:17" pos:end="145:17">c</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:27">bitrates</name><index pos:start="145:28" pos:end="145:50">[<expr pos:start="145:29" pos:end="145:49"><name pos:start="145:29" pos:end="145:45"><name pos:start="145:29" pos:end="145:29">c</name><operator pos:start="145:30" pos:end="145:31">-&gt;</operator><name pos:start="145:32" pos:end="145:45">bitrates_count</name></name> <operator pos:start="145:47" pos:end="145:47">-</operator> <literal type="number" pos:start="145:49" pos:end="145:49">1</literal></expr>]</index></name> <operator pos:start="145:52" pos:end="145:52">=</operator> <name pos:start="145:54" pos:end="145:56">ret</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>



        <expr_stmt pos:start="153:9" pos:end="153:24"><expr pos:start="153:9" pos:end="153:23"><call pos:start="153:9" pos:end="153:23"><name pos:start="153:9" pos:end="153:15">av_free</name><argument_list pos:start="153:16" pos:end="153:23">(<argument pos:start="153:17" pos:end="153:22"><expr pos:start="153:17" pos:end="153:22"><name pos:start="153:17" pos:end="153:22">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="155:7" pos:end="205:5">else if <condition pos:start="155:15" pos:end="155:53">(<expr pos:start="155:16" pos:end="155:52"><operator pos:start="155:16" pos:end="155:16">!</operator><call pos:start="155:17" pos:end="155:52"><name pos:start="155:17" pos:end="155:22">memcmp</name><argument_list pos:start="155:23" pos:end="155:52">(<argument pos:start="155:24" pos:end="155:27"><expr pos:start="155:24" pos:end="155:27"><name pos:start="155:24" pos:end="155:27">uuid</name></expr></argument>, <argument pos:start="155:30" pos:end="155:37"><expr pos:start="155:30" pos:end="155:37"><name pos:start="155:30" pos:end="155:37">uuid_xmp</name></expr></argument>, <argument pos:start="155:40" pos:end="155:51"><expr pos:start="155:40" pos:end="155:51"><sizeof pos:start="155:40" pos:end="155:51">sizeof<argument_list pos:start="155:46" pos:end="155:51">(<argument pos:start="155:47" pos:end="155:50"><expr pos:start="155:47" pos:end="155:50"><name pos:start="155:47" pos:end="155:50">uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:55" pos:end="205:5">{<block_content pos:start="157:9" pos:end="203:9">

        <decl_stmt pos:start="157:9" pos:end="157:24"><decl pos:start="157:9" pos:end="157:23"><type pos:start="157:9" pos:end="157:17"><name pos:start="157:9" pos:end="157:15">uint8_t</name> <modifier pos:start="157:17" pos:end="157:17">*</modifier></type><name pos:start="157:18" pos:end="157:23">buffer</name></decl>;</decl_stmt>

        <decl_stmt pos:start="159:9" pos:end="159:46"><decl pos:start="159:9" pos:end="159:45"><type pos:start="159:9" pos:end="159:14"><name pos:start="159:9" pos:end="159:14">size_t</name></type> <name pos:start="159:16" pos:end="159:18">len</name> <init pos:start="159:20" pos:end="159:45">= <expr pos:start="159:22" pos:end="159:45"><name pos:start="159:22" pos:end="159:30"><name pos:start="159:22" pos:end="159:25">atom</name><operator pos:start="159:26" pos:end="159:26">.</operator><name pos:start="159:27" pos:end="159:30">size</name></name> <operator pos:start="159:32" pos:end="159:32">-</operator> <sizeof pos:start="159:34" pos:end="159:45">sizeof<argument_list pos:start="159:40" pos:end="159:45">(<argument pos:start="159:41" pos:end="159:44"><expr pos:start="159:41" pos:end="159:44"><name pos:start="159:41" pos:end="159:44">uuid</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="161:9" pos:end="203:9"><if pos:start="161:9" pos:end="193:9">if <condition pos:start="161:12" pos:end="161:26">(<expr pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:13">c</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:25">export_xmp</name></name></expr>)</condition> <block pos:start="161:28" pos:end="193:9">{<block_content pos:start="163:13" pos:end="191:28">

            <expr_stmt pos:start="163:13" pos:end="163:41"><expr pos:start="163:13" pos:end="163:40"><name pos:start="163:13" pos:end="163:18">buffer</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <call pos:start="163:22" pos:end="163:40"><name pos:start="163:22" pos:end="163:31">av_mallocz</name><argument_list pos:start="163:32" pos:end="163:40">(<argument pos:start="163:33" pos:end="163:39"><expr pos:start="163:33" pos:end="163:39"><name pos:start="163:33" pos:end="163:35">len</name> <operator pos:start="163:37" pos:end="163:37">+</operator> <literal type="number" pos:start="163:39" pos:end="163:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="165:13" pos:end="169:13"><if pos:start="165:13" pos:end="169:13">if <condition pos:start="165:16" pos:end="165:24">(<expr pos:start="165:17" pos:end="165:23"><operator pos:start="165:17" pos:end="165:17">!</operator><name pos:start="165:18" pos:end="165:23">buffer</name></expr>)</condition> <block pos:start="165:26" pos:end="169:13">{<block_content pos:start="167:17" pos:end="167:39">

                <return pos:start="167:17" pos:end="167:39">return <expr pos:start="167:24" pos:end="167:38"><call pos:start="167:24" pos:end="167:38"><name pos:start="167:24" pos:end="167:30">AVERROR</name><argument_list pos:start="167:31" pos:end="167:38">(<argument pos:start="167:32" pos:end="167:37"><expr pos:start="167:32" pos:end="167:37"><name pos:start="167:32" pos:end="167:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:45"><expr pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:15">ret</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <call pos:start="171:19" pos:end="171:44"><name pos:start="171:19" pos:end="171:27">avio_read</name><argument_list pos:start="171:28" pos:end="171:44">(<argument pos:start="171:29" pos:end="171:30"><expr pos:start="171:29" pos:end="171:30"><name pos:start="171:29" pos:end="171:30">pb</name></expr></argument>, <argument pos:start="171:33" pos:end="171:38"><expr pos:start="171:33" pos:end="171:38"><name pos:start="171:33" pos:end="171:38">buffer</name></expr></argument>, <argument pos:start="171:41" pos:end="171:43"><expr pos:start="171:41" pos:end="171:43"><name pos:start="171:41" pos:end="171:43">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="185:13"><if pos:start="173:13" pos:end="179:13">if <condition pos:start="173:16" pos:end="173:24">(<expr pos:start="173:17" pos:end="173:23"><name pos:start="173:17" pos:end="173:19">ret</name> <operator pos:start="173:21" pos:end="173:21">&lt;</operator> <literal type="number" pos:start="173:23" pos:end="173:23">0</literal></expr>)</condition> <block pos:start="173:26" pos:end="179:13">{<block_content pos:start="175:17" pos:end="177:27">

                <expr_stmt pos:start="175:17" pos:end="175:32"><expr pos:start="175:17" pos:end="175:31"><call pos:start="175:17" pos:end="175:31"><name pos:start="175:17" pos:end="175:23">av_free</name><argument_list pos:start="175:24" pos:end="175:31">(<argument pos:start="175:25" pos:end="175:30"><expr pos:start="175:25" pos:end="175:30"><name pos:start="175:25" pos:end="175:30">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="177:17" pos:end="177:27">return <expr pos:start="177:24" pos:end="177:26"><name pos:start="177:24" pos:end="177:26">ret</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="179:15" pos:end="185:13">else if <condition pos:start="179:23" pos:end="179:34">(<expr pos:start="179:24" pos:end="179:33"><name pos:start="179:24" pos:end="179:26">ret</name> <operator pos:start="179:28" pos:end="179:29">!=</operator> <name pos:start="179:31" pos:end="179:33">len</name></expr>)</condition> <block pos:start="179:36" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:43">

                <expr_stmt pos:start="181:17" pos:end="181:32"><expr pos:start="181:17" pos:end="181:31"><call pos:start="181:17" pos:end="181:31"><name pos:start="181:17" pos:end="181:23">av_free</name><argument_list pos:start="181:24" pos:end="181:31">(<argument pos:start="181:25" pos:end="181:30"><expr pos:start="181:25" pos:end="181:30"><name pos:start="181:25" pos:end="181:30">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="183:17" pos:end="183:43">return <expr pos:start="183:24" pos:end="183:42"><name pos:start="183:24" pos:end="183:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:31"><expr pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:23"><name pos:start="187:13" pos:end="187:18">buffer</name><index pos:start="187:19" pos:end="187:23">[<expr pos:start="187:20" pos:end="187:22"><name pos:start="187:20" pos:end="187:22">len</name></expr>]</index></name> <operator pos:start="187:25" pos:end="187:25">=</operator> <literal type="char" pos:start="187:27" pos:end="187:30">'\0'</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:60"><expr pos:start="189:13" pos:end="189:59"><call pos:start="189:13" pos:end="189:59"><name pos:start="189:13" pos:end="189:23">av_dict_set</name><argument_list pos:start="189:24" pos:end="189:59">(<argument pos:start="189:25" pos:end="189:40"><expr pos:start="189:25" pos:end="189:40"><operator pos:start="189:25" pos:end="189:25">&amp;</operator><name pos:start="189:26" pos:end="189:40"><name pos:start="189:26" pos:end="189:26">c</name><operator pos:start="189:27" pos:end="189:28">-&gt;</operator><name pos:start="189:29" pos:end="189:30">fc</name><operator pos:start="189:31" pos:end="189:32">-&gt;</operator><name pos:start="189:33" pos:end="189:40">metadata</name></name></expr></argument>, <argument pos:start="189:43" pos:end="189:47"><expr pos:start="189:43" pos:end="189:47"><literal type="string" pos:start="189:43" pos:end="189:47">"xmp"</literal></expr></argument>, <argument pos:start="189:50" pos:end="189:55"><expr pos:start="189:50" pos:end="189:55"><name pos:start="189:50" pos:end="189:55">buffer</name></expr></argument>, <argument pos:start="189:58" pos:end="189:58"><expr pos:start="189:58" pos:end="189:58"><literal type="number" pos:start="189:58" pos:end="189:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:28"><expr pos:start="191:13" pos:end="191:27"><call pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:19">av_free</name><argument_list pos:start="191:20" pos:end="191:27">(<argument pos:start="191:21" pos:end="191:26"><expr pos:start="191:21" pos:end="191:26"><name pos:start="191:21" pos:end="191:26">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="193:11" pos:end="203:9">else <block pos:start="193:16" pos:end="203:9">{<block_content pos:start="197:13" pos:end="201:27">

            <comment type="line" pos:start="195:13" pos:end="195:77">// skip all uuid atom, which makes it fast for long uuid-xmp file</comment>

            <expr_stmt pos:start="197:13" pos:end="197:37"><expr pos:start="197:13" pos:end="197:36"><name pos:start="197:13" pos:end="197:15">ret</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <call pos:start="197:19" pos:end="197:36"><name pos:start="197:19" pos:end="197:27">avio_skip</name><argument_list pos:start="197:28" pos:end="197:36">(<argument pos:start="197:29" pos:end="197:30"><expr pos:start="197:29" pos:end="197:30"><name pos:start="197:29" pos:end="197:30">pb</name></expr></argument>, <argument pos:start="197:33" pos:end="197:35"><expr pos:start="197:33" pos:end="197:35"><name pos:start="197:33" pos:end="197:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="201:27"><if pos:start="199:13" pos:end="201:27">if <condition pos:start="199:16" pos:end="199:24">(<expr pos:start="199:17" pos:end="199:23"><name pos:start="199:17" pos:end="199:19">ret</name> <operator pos:start="199:21" pos:end="199:21">&lt;</operator> <literal type="number" pos:start="199:23" pos:end="199:23">0</literal></expr>)</condition><block type="pseudo" pos:start="201:17" pos:end="201:27"><block_content pos:start="201:17" pos:end="201:27">

                <return pos:start="201:17" pos:end="201:27">return <expr pos:start="201:24" pos:end="201:26"><name pos:start="201:24" pos:end="201:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="205:7" pos:end="217:85">else if <condition pos:start="205:15" pos:end="205:59">(<expr pos:start="205:16" pos:end="205:58"><operator pos:start="205:16" pos:end="205:16">!</operator><call pos:start="205:17" pos:end="205:58"><name pos:start="205:17" pos:end="205:22">memcmp</name><argument_list pos:start="205:23" pos:end="205:58">(<argument pos:start="205:24" pos:end="205:27"><expr pos:start="205:24" pos:end="205:27"><name pos:start="205:24" pos:end="205:27">uuid</name></expr></argument>, <argument pos:start="205:30" pos:end="205:43"><expr pos:start="205:30" pos:end="205:43"><name pos:start="205:30" pos:end="205:43">uuid_spherical</name></expr></argument>, <argument pos:start="205:46" pos:end="205:57"><expr pos:start="205:46" pos:end="205:57"><sizeof pos:start="205:46" pos:end="205:57">sizeof<argument_list pos:start="205:52" pos:end="205:57">(<argument pos:start="205:53" pos:end="205:56"><expr pos:start="205:53" pos:end="205:56"><name pos:start="205:53" pos:end="205:56">uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:61" pos:end="217:85">{<block_content pos:start="207:9" pos:end="217:80">

        <decl_stmt pos:start="207:9" pos:end="207:46"><decl pos:start="207:9" pos:end="207:45"><type pos:start="207:9" pos:end="207:14"><name pos:start="207:9" pos:end="207:14">size_t</name></type> <name pos:start="207:16" pos:end="207:18">len</name> <init pos:start="207:20" pos:end="207:45">= <expr pos:start="207:22" pos:end="207:45"><name pos:start="207:22" pos:end="207:30"><name pos:start="207:22" pos:end="207:25">atom</name><operator pos:start="207:26" pos:end="207:26">.</operator><name pos:start="207:27" pos:end="207:30">size</name></name> <operator pos:start="207:32" pos:end="207:32">-</operator> <sizeof pos:start="207:34" pos:end="207:45">sizeof<argument_list pos:start="207:40" pos:end="207:45">(<argument pos:start="207:41" pos:end="207:44"><expr pos:start="207:41" pos:end="207:44"><name pos:start="207:41" pos:end="207:44">uuid</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:52"><expr pos:start="209:9" pos:end="209:51"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">=</operator> <call pos:start="209:15" pos:end="209:51"><name pos:start="209:15" pos:end="209:38">mov_parse_uuid_spherical</name><argument_list pos:start="209:39" pos:end="209:51">(<argument pos:start="209:40" pos:end="209:41"><expr pos:start="209:40" pos:end="209:41"><name pos:start="209:40" pos:end="209:41">sc</name></expr></argument>, <argument pos:start="209:44" pos:end="209:45"><expr pos:start="209:44" pos:end="209:45"><name pos:start="209:44" pos:end="209:45">pb</name></expr></argument>, <argument pos:start="209:48" pos:end="209:50"><expr pos:start="209:48" pos:end="209:50"><name pos:start="209:48" pos:end="209:50">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="213:23"><if pos:start="211:9" pos:end="213:23">if <condition pos:start="211:12" pos:end="211:20">(<expr pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">&lt;</operator> <literal type="number" pos:start="211:19" pos:end="211:19">0</literal></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:23"><block_content pos:start="213:13" pos:end="213:23">

            <return pos:start="213:13" pos:end="213:23">return <expr pos:start="213:20" pos:end="213:22"><name pos:start="213:20" pos:end="213:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="215:9" pos:end="217:80"><if pos:start="215:9" pos:end="217:80">if <condition pos:start="215:12" pos:end="215:27">(<expr pos:start="215:13" pos:end="215:26"><operator pos:start="215:13" pos:end="215:13">!</operator><name pos:start="215:14" pos:end="215:26"><name pos:start="215:14" pos:end="215:15">sc</name><operator pos:start="215:16" pos:end="215:17">-&gt;</operator><name pos:start="215:18" pos:end="215:26">spherical</name></name></expr>)</condition><block type="pseudo" pos:start="217:13" pos:end="217:80"><block_content pos:start="217:13" pos:end="217:80">

            <expr_stmt pos:start="217:13" pos:end="217:80"><expr pos:start="217:13" pos:end="217:79"><call pos:start="217:13" pos:end="217:79"><name pos:start="217:13" pos:end="217:18">av_log</name><argument_list pos:start="217:19" pos:end="217:79">(<argument pos:start="217:20" pos:end="217:24"><expr pos:start="217:20" pos:end="217:24"><name pos:start="217:20" pos:end="217:24"><name pos:start="217:20" pos:end="217:20">c</name><operator pos:start="217:21" pos:end="217:22">-&gt;</operator><name pos:start="217:23" pos:end="217:24">fc</name></name></expr></argument>, <argument pos:start="217:27" pos:end="217:40"><expr pos:start="217:27" pos:end="217:40"><name pos:start="217:27" pos:end="217:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="217:43" pos:end="217:78"><expr pos:start="217:43" pos:end="217:78"><literal type="string" pos:start="217:43" pos:end="217:78">"Invalid spherical metadata found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>    </block_content>}</block></if></if_stmt>



    <return pos:start="221:5" pos:end="221:13">return <expr pos:start="221:12" pos:end="221:12"><literal type="number" pos:start="221:12" pos:end="221:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
