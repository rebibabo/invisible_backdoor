<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6013.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vmdk_open</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">options</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">flags</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="103:1">{<block_content pos:start="7:5" pos:end="101:15">

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVVmdkState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">magic</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:44"><expr pos:start="17:5" pos:end="17:43"><name pos:start="17:5" pos:end="17:7">buf</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:43"><name pos:start="17:11" pos:end="17:24">vmdk_read_desc</name><argument_list pos:start="17:25" pos:end="17:43">(<argument pos:start="17:26" pos:end="17:33"><expr pos:start="17:26" pos:end="17:33"><name pos:start="17:26" pos:end="17:33"><name pos:start="17:26" pos:end="17:27">bs</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:33">file</name></name></expr></argument>, <argument pos:start="17:36" pos:end="17:36"><expr pos:start="17:36" pos:end="17:36"><literal type="number" pos:start="17:36" pos:end="17:36">0</literal></expr></argument>, <argument pos:start="17:39" pos:end="17:42"><expr pos:start="17:39" pos:end="17:42"><name pos:start="17:39" pos:end="17:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:13">(<expr pos:start="19:9" pos:end="19:12"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:12">buf</name></expr>)</condition> <block pos:start="19:15" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:23">

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:9">magic</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:20">ldl_be_p</name><argument_list pos:start="27:21" pos:end="27:25">(<argument pos:start="27:22" pos:end="27:24"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="47:5">switch <condition pos:start="29:12" pos:end="29:18">(<expr pos:start="29:13" pos:end="29:17"><name pos:start="29:13" pos:end="29:17">magic</name></expr>)</condition> <block pos:start="29:20" pos:end="47:5">{<block_content pos:start="31:9" pos:end="45:18">

        <case pos:start="31:9" pos:end="31:25">case <expr pos:start="31:14" pos:end="31:24"><name pos:start="31:14" pos:end="31:24">VMDK3_MAGIC</name></expr>:</case>

        <case pos:start="33:9" pos:end="33:25">case <expr pos:start="33:14" pos:end="33:24"><name pos:start="33:14" pos:end="33:24">VMDK4_MAGIC</name></expr>:</case>

            <expr_stmt pos:start="35:13" pos:end="35:67"><expr pos:start="35:13" pos:end="35:66"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:66"><name pos:start="35:19" pos:end="35:34">vmdk_open_sparse</name><argument_list pos:start="35:35" pos:end="35:66">(<argument pos:start="35:36" pos:end="35:37"><expr pos:start="35:36" pos:end="35:37"><name pos:start="35:36" pos:end="35:37">bs</name></expr></argument>, <argument pos:start="35:40" pos:end="35:47"><expr pos:start="35:40" pos:end="35:47"><name pos:start="35:40" pos:end="35:47"><name pos:start="35:40" pos:end="35:41">bs</name><operator pos:start="35:42" pos:end="35:43">-&gt;</operator><name pos:start="35:44" pos:end="35:47">file</name></name></expr></argument>, <argument pos:start="35:50" pos:end="35:54"><expr pos:start="35:50" pos:end="35:54"><name pos:start="35:50" pos:end="35:54">flags</name></expr></argument>, <argument pos:start="35:57" pos:end="35:59"><expr pos:start="35:57" pos:end="35:59"><name pos:start="35:57" pos:end="35:59">buf</name></expr></argument>, <argument pos:start="35:62" pos:end="35:65"><expr pos:start="35:62" pos:end="35:65"><name pos:start="35:62" pos:end="35:65">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:35"><expr pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:26">desc_offset</name></name> <operator pos:start="37:28" pos:end="37:28">=</operator> <literal type="number" pos:start="37:30" pos:end="37:34">0x200</literal></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <default pos:start="41:9" pos:end="41:16">default:</default>

            <expr_stmt pos:start="43:13" pos:end="43:60"><expr pos:start="43:13" pos:end="43:59"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:59"><name pos:start="43:19" pos:end="43:37">vmdk_open_desc_file</name><argument_list pos:start="43:38" pos:end="43:59">(<argument pos:start="43:39" pos:end="43:40"><expr pos:start="43:39" pos:end="43:40"><name pos:start="43:39" pos:end="43:40">bs</name></expr></argument>, <argument pos:start="43:43" pos:end="43:47"><expr pos:start="43:43" pos:end="43:47"><name pos:start="43:43" pos:end="43:47">flags</name></expr></argument>, <argument pos:start="43:50" pos:end="43:52"><expr pos:start="43:50" pos:end="43:52"><name pos:start="43:50" pos:end="43:52">buf</name></expr></argument>, <argument pos:start="43:55" pos:end="43:58"><expr pos:start="43:55" pos:end="43:58"><name pos:start="43:55" pos:end="43:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">ret</name></expr>)</condition> <block pos:start="49:14" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:18">

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:45">/* try to open parent images, if exist */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:31"><expr pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:7">ret</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:30"><name pos:start="59:11" pos:end="59:26">vmdk_parent_open</name><argument_list pos:start="59:27" pos:end="59:30">(<argument pos:start="59:28" pos:end="59:29"><expr pos:start="59:28" pos:end="59:29"><name pos:start="59:28" pos:end="59:29">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:12">(<expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">ret</name></expr>)</condition> <block pos:start="61:14" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:18">

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:34"><expr pos:start="67:5" pos:end="67:33"><name pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:10">cid</name></name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:33"><name pos:start="67:14" pos:end="67:26">vmdk_read_cid</name><argument_list pos:start="67:27" pos:end="67:33">(<argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><name pos:start="67:28" pos:end="67:29">bs</name></expr></argument>, <argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><literal type="number" pos:start="67:32" pos:end="67:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:41"><expr pos:start="69:5" pos:end="69:40"><name pos:start="69:5" pos:end="69:17"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:17">parent_cid</name></name> <operator pos:start="69:19" pos:end="69:19">=</operator> <call pos:start="69:21" pos:end="69:40"><name pos:start="69:21" pos:end="69:33">vmdk_read_cid</name><argument_list pos:start="69:34" pos:end="69:40">(<argument pos:start="69:35" pos:end="69:36"><expr pos:start="69:35" pos:end="69:36"><name pos:start="69:35" pos:end="69:36">bs</name></expr></argument>, <argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><literal type="number" pos:start="69:39" pos:end="69:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:33"><expr pos:start="71:5" pos:end="71:32"><call pos:start="71:5" pos:end="71:32"><name pos:start="71:5" pos:end="71:22">qemu_co_mutex_init</name><argument_list pos:start="71:23" pos:end="71:32">(<argument pos:start="71:24" pos:end="71:31"><expr pos:start="71:24" pos:end="71:31"><operator pos:start="71:24" pos:end="71:24">&amp;</operator><name pos:start="71:25" pos:end="71:31"><name pos:start="71:25" pos:end="71:25">s</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:53">/* Disable migration when VMDK images are used */</comment>

    <expr_stmt pos:start="77:5" pos:end="81:49"><expr pos:start="77:5" pos:end="81:48"><call pos:start="77:5" pos:end="81:48"><name pos:start="77:5" pos:end="77:14">error_setg</name><argument_list pos:start="77:15" pos:end="81:48">(<argument pos:start="77:16" pos:end="77:36"><expr pos:start="77:16" pos:end="77:36"><operator pos:start="77:16" pos:end="77:16">&amp;</operator><name pos:start="77:17" pos:end="77:36"><name pos:start="77:17" pos:end="77:17">s</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:36">migration_blocker</name></name></expr></argument>, <argument pos:start="77:39" pos:end="79:48"><expr pos:start="77:39" pos:end="79:48"><literal type="string" pos:start="77:39" pos:end="77:74">"The vmdk format used by node '%s' "</literal>

               <literal type="string" pos:start="79:16" pos:end="79:48">"does not support live migration"</literal></expr></argument>,

               <argument pos:start="81:16" pos:end="81:47"><expr pos:start="81:16" pos:end="81:47"><call pos:start="81:16" pos:end="81:47"><name pos:start="81:16" pos:end="81:43">bdrv_get_device_or_node_name</name><argument_list pos:start="81:44" pos:end="81:47">(<argument pos:start="81:45" pos:end="81:46"><expr pos:start="81:45" pos:end="81:46"><name pos:start="81:45" pos:end="81:46">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:46"><expr pos:start="83:5" pos:end="83:45"><call pos:start="83:5" pos:end="83:45"><name pos:start="83:5" pos:end="83:23">migrate_add_blocker</name><argument_list pos:start="83:24" pos:end="83:45">(<argument pos:start="83:25" pos:end="83:44"><expr pos:start="83:25" pos:end="83:44"><name pos:start="83:25" pos:end="83:44"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:16"><expr pos:start="85:5" pos:end="85:15"><call pos:start="85:5" pos:end="85:15"><name pos:start="85:5" pos:end="85:10">g_free</name><argument_list pos:start="85:11" pos:end="85:15">(<argument pos:start="85:12" pos:end="85:14"><expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>



<label pos:start="91:1" pos:end="91:5"><name pos:start="91:1" pos:end="91:4">fail</name>:</label>

    <expr_stmt pos:start="93:5" pos:end="93:16"><expr pos:start="93:5" pos:end="93:15"><call pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:10">g_free</name><argument_list pos:start="93:11" pos:end="93:15">(<argument pos:start="93:12" pos:end="93:14"><expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><call pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:10">g_free</name><argument_list pos:start="95:11" pos:end="95:26">(<argument pos:start="95:12" pos:end="95:25"><expr pos:start="95:12" pos:end="95:25"><name pos:start="95:12" pos:end="95:25"><name pos:start="95:12" pos:end="95:12">s</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:25">create_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:26"><expr pos:start="97:5" pos:end="97:25"><name pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:18">create_type</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:25">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:26"><expr pos:start="99:5" pos:end="99:25"><call pos:start="99:5" pos:end="99:25"><name pos:start="99:5" pos:end="99:21">vmdk_free_extents</name><argument_list pos:start="99:22" pos:end="99:25">(<argument pos:start="99:23" pos:end="99:24"><expr pos:start="99:23" pos:end="99:24"><name pos:start="99:23" pos:end="99:24">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:15">return <expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
