<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6002.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">x86_cpu_parse_featurestr</name><parameter_list pos:start="1:37" pos:end="3:50">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:45">CPUState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">cs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:65">features</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:42">Error</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier><modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:49">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:5">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">X86CPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:29">= <expr pos:start="7:19" pos:end="7:29"><call pos:start="7:19" pos:end="7:29"><name pos:start="7:19" pos:end="7:25">X86_CPU</name><argument_list pos:start="7:26" pos:end="7:29">(<argument pos:start="7:27" pos:end="7:28"><expr pos:start="7:27" pos:end="7:28"><name pos:start="7:27" pos:end="7:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:20">featurestr</name></decl>;</decl_stmt> <comment type="block" pos:start="9:23" pos:end="9:66">/* Single 'key=value" string being parsed */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15">FeatureWord</name></type> <name pos:start="11:17" pos:end="11:17">w</name></decl>;</decl_stmt>

    <comment type="block" pos:start="13:5" pos:end="13:30">/* Features to be added */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:20">FeatureWordArray</name></type> <name pos:start="15:22" pos:end="15:34">plus_features</name> <init pos:start="15:36" pos:end="15:42">= <expr pos:start="15:38" pos:end="15:42"><block pos:start="15:38" pos:end="15:42">{ <expr pos:start="15:40" pos:end="15:40"><literal type="number" pos:start="15:40" pos:end="15:40">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="17:5" pos:end="17:32">/* Features to be removed */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:20">FeatureWordArray</name></type> <name pos:start="19:22" pos:end="19:35">minus_features</name> <init pos:start="19:37" pos:end="19:43">= <expr pos:start="19:39" pos:end="19:43"><block pos:start="19:39" pos:end="19:43">{ <expr pos:start="19:41" pos:end="19:41"><literal type="number" pos:start="19:41" pos:end="19:41">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUX86State</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">env</name> <init pos:start="21:22" pos:end="21:32">= <expr pos:start="21:24" pos:end="21:32"><operator pos:start="21:24" pos:end="21:24">&amp;</operator><name pos:start="21:25" pos:end="21:32"><name pos:start="21:25" pos:end="21:27">cpu</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">local_err</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:57"><expr pos:start="27:5" pos:end="27:56"><name pos:start="27:5" pos:end="27:14">featurestr</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <ternary pos:start="27:18" pos:end="27:56"><condition pos:start="27:18" pos:end="27:27"><expr pos:start="27:18" pos:end="27:25"><name pos:start="27:18" pos:end="27:25">features</name></expr> ?</condition><then pos:start="27:29" pos:end="27:49"> <expr pos:start="27:29" pos:end="27:49"><call pos:start="27:29" pos:end="27:49"><name pos:start="27:29" pos:end="27:34">strtok</name><argument_list pos:start="27:35" pos:end="27:49">(<argument pos:start="27:36" pos:end="27:43"><expr pos:start="27:36" pos:end="27:43"><name pos:start="27:36" pos:end="27:43">features</name></expr></argument>, <argument pos:start="27:46" pos:end="27:48"><expr pos:start="27:46" pos:end="27:48"><literal type="string" pos:start="27:46" pos:end="27:48">","</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="27:51" pos:end="27:56">: <expr pos:start="27:53" pos:end="27:56"><name pos:start="27:53" pos:end="27:56">NULL</name></expr></else></ternary></expr>;</expr_stmt>



    <while pos:start="31:5" pos:end="101:5">while <condition pos:start="31:11" pos:end="31:22">(<expr pos:start="31:12" pos:end="31:21"><name pos:start="31:12" pos:end="31:21">featurestr</name></expr>)</condition> <block pos:start="31:24" pos:end="101:5">{<block_content pos:start="33:9" pos:end="99:39">

        <decl_stmt pos:start="33:9" pos:end="33:18"><decl pos:start="33:9" pos:end="33:17"><type pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:12">char</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:17">val</name></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="89:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:33">(<expr pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:22">featurestr</name><index pos:start="35:23" pos:end="35:25">[<expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>]</index></name> <operator pos:start="35:27" pos:end="35:28">==</operator> <literal type="char" pos:start="35:30" pos:end="35:32">'+'</literal></expr>)</condition> <block pos:start="35:35" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:79">

            <expr_stmt pos:start="37:13" pos:end="37:79"><expr pos:start="37:13" pos:end="37:78"><call pos:start="37:13" pos:end="37:78"><name pos:start="37:13" pos:end="37:35">add_flagname_to_bitmaps</name><argument_list pos:start="37:36" pos:end="37:78">(<argument pos:start="37:37" pos:end="37:50"><expr pos:start="37:37" pos:end="37:50"><name pos:start="37:37" pos:end="37:46">featurestr</name> <operator pos:start="37:48" pos:end="37:48">+</operator> <literal type="number" pos:start="37:50" pos:end="37:50">1</literal></expr></argument>, <argument pos:start="37:53" pos:end="37:65"><expr pos:start="37:53" pos:end="37:65"><name pos:start="37:53" pos:end="37:65">plus_features</name></expr></argument>, <argument pos:start="37:68" pos:end="37:77"><expr pos:start="37:68" pos:end="37:77"><operator pos:start="37:68" pos:end="37:68">&amp;</operator><name pos:start="37:69" pos:end="37:77">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="39:11" pos:end="43:9">else if <condition pos:start="39:19" pos:end="39:40">(<expr pos:start="39:20" pos:end="39:39"><name pos:start="39:20" pos:end="39:32"><name pos:start="39:20" pos:end="39:29">featurestr</name><index pos:start="39:30" pos:end="39:32">[<expr pos:start="39:31" pos:end="39:31"><literal type="number" pos:start="39:31" pos:end="39:31">0</literal></expr>]</index></name> <operator pos:start="39:34" pos:end="39:35">==</operator> <literal type="char" pos:start="39:37" pos:end="39:39">'-'</literal></expr>)</condition> <block pos:start="39:42" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:80">

            <expr_stmt pos:start="41:13" pos:end="41:80"><expr pos:start="41:13" pos:end="41:79"><call pos:start="41:13" pos:end="41:79"><name pos:start="41:13" pos:end="41:35">add_flagname_to_bitmaps</name><argument_list pos:start="41:36" pos:end="41:79">(<argument pos:start="41:37" pos:end="41:50"><expr pos:start="41:37" pos:end="41:50"><name pos:start="41:37" pos:end="41:46">featurestr</name> <operator pos:start="41:48" pos:end="41:48">+</operator> <literal type="number" pos:start="41:50" pos:end="41:50">1</literal></expr></argument>, <argument pos:start="41:53" pos:end="41:66"><expr pos:start="41:53" pos:end="41:66"><name pos:start="41:53" pos:end="41:66">minus_features</name></expr></argument>, <argument pos:start="41:69" pos:end="41:78"><expr pos:start="41:69" pos:end="41:78"><operator pos:start="41:69" pos:end="41:69">&amp;</operator><name pos:start="41:70" pos:end="41:78">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="43:11" pos:end="83:9">else if <condition pos:start="43:19" pos:end="43:51">(<expr pos:start="43:20" pos:end="43:50"><operator pos:start="43:20" pos:end="43:20">(</operator><name pos:start="43:21" pos:end="43:23">val</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <call pos:start="43:27" pos:end="43:49"><name pos:start="43:27" pos:end="43:32">strchr</name><argument_list pos:start="43:33" pos:end="43:49">(<argument pos:start="43:34" pos:end="43:43"><expr pos:start="43:34" pos:end="43:43"><name pos:start="43:34" pos:end="43:43">featurestr</name></expr></argument>, <argument pos:start="43:46" pos:end="43:48"><expr pos:start="43:46" pos:end="43:48"><literal type="char" pos:start="43:46" pos:end="43:48">'='</literal></expr></argument>)</argument_list></call><operator pos:start="43:50" pos:end="43:50">)</operator></expr>)</condition> <block pos:start="43:53" pos:end="83:9">{<block_content pos:start="45:13" pos:end="81:13">

            <expr_stmt pos:start="45:13" pos:end="45:21"><expr pos:start="45:13" pos:end="45:20"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:16">val</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>;</expr_stmt> <expr_stmt pos:start="45:23" pos:end="45:28"><expr pos:start="45:23" pos:end="45:27"><name pos:start="45:23" pos:end="45:25">val</name><operator pos:start="45:26" pos:end="45:27">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:34"><expr pos:start="47:13" pos:end="47:33"><call pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:21">feat2prop</name><argument_list pos:start="47:22" pos:end="47:33">(<argument pos:start="47:23" pos:end="47:32"><expr pos:start="47:23" pos:end="47:32"><name pos:start="47:23" pos:end="47:32">featurestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="81:13"><if pos:start="49:13" pos:end="77:13">if <condition pos:start="49:16" pos:end="49:48">(<expr pos:start="49:17" pos:end="49:47"><operator pos:start="49:17" pos:end="49:17">!</operator><call pos:start="49:18" pos:end="49:47"><name pos:start="49:18" pos:end="49:23">strcmp</name><argument_list pos:start="49:24" pos:end="49:47">(<argument pos:start="49:25" pos:end="49:34"><expr pos:start="49:25" pos:end="49:34"><name pos:start="49:25" pos:end="49:34">featurestr</name></expr></argument>, <argument pos:start="49:37" pos:end="49:46"><expr pos:start="49:37" pos:end="49:46"><literal type="string" pos:start="49:37" pos:end="49:46">"tsc-freq"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:50" pos:end="77:13">{<block_content pos:start="51:17" pos:end="75:50">

                <decl_stmt pos:start="51:17" pos:end="51:33"><decl pos:start="51:17" pos:end="51:32"><type pos:start="51:17" pos:end="51:23"><name pos:start="51:17" pos:end="51:23">int64_t</name></type> <name pos:start="51:25" pos:end="51:32">tsc_freq</name></decl>;</decl_stmt>

                <decl_stmt pos:start="53:17" pos:end="53:26"><decl pos:start="53:17" pos:end="53:25"><type pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:20">char</name> <modifier pos:start="53:22" pos:end="53:22">*</modifier></type><name pos:start="53:23" pos:end="53:25">err</name></decl>;</decl_stmt>

                <decl_stmt pos:start="55:17" pos:end="55:29"><decl pos:start="55:17" pos:end="55:28"><type pos:start="55:17" pos:end="55:20"><name pos:start="55:17" pos:end="55:20">char</name></type> <name pos:start="55:22" pos:end="55:28"><name pos:start="55:22" pos:end="55:24">num</name><index pos:start="55:25" pos:end="55:28">[<expr pos:start="55:26" pos:end="55:27"><literal type="number" pos:start="55:26" pos:end="55:27">32</literal></expr>]</index></name></decl>;</decl_stmt>



                <expr_stmt pos:start="59:17" pos:end="61:79"><expr pos:start="59:17" pos:end="61:78"><name pos:start="59:17" pos:end="59:24">tsc_freq</name> <operator pos:start="59:26" pos:end="59:26">=</operator> <call pos:start="59:28" pos:end="61:78"><name pos:start="59:28" pos:end="59:51">qemu_strtosz_suffix_unit</name><argument_list pos:start="59:52" pos:end="61:78">(<argument pos:start="59:53" pos:end="59:55"><expr pos:start="59:53" pos:end="59:55"><name pos:start="59:53" pos:end="59:55">val</name></expr></argument>, <argument pos:start="59:58" pos:end="59:61"><expr pos:start="59:58" pos:end="59:61"><operator pos:start="59:58" pos:end="59:58">&amp;</operator><name pos:start="59:59" pos:end="59:61">err</name></expr></argument>,

                                               <argument pos:start="61:48" pos:end="61:71"><expr pos:start="61:48" pos:end="61:71"><name pos:start="61:48" pos:end="61:71">QEMU_STRTOSZ_DEFSUFFIX_B</name></expr></argument>, <argument pos:start="61:74" pos:end="61:77"><expr pos:start="61:74" pos:end="61:77"><literal type="number" pos:start="61:74" pos:end="61:77">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="69:17"><if pos:start="63:17" pos:end="69:17">if <condition pos:start="63:20" pos:end="63:41">(<expr pos:start="63:21" pos:end="63:40"><name pos:start="63:21" pos:end="63:28">tsc_freq</name> <operator pos:start="63:30" pos:end="63:30">&lt;</operator> <literal type="number" pos:start="63:32" pos:end="63:32">0</literal> <operator pos:start="63:34" pos:end="63:35">||</operator> <operator pos:start="63:37" pos:end="63:37">*</operator><name pos:start="63:38" pos:end="63:40">err</name></expr>)</condition> <block pos:start="63:43" pos:end="69:17">{<block_content pos:start="65:21" pos:end="67:27">

                    <expr_stmt pos:start="65:21" pos:end="65:68"><expr pos:start="65:21" pos:end="65:67"><call pos:start="65:21" pos:end="65:67"><name pos:start="65:21" pos:end="65:30">error_setg</name><argument_list pos:start="65:31" pos:end="65:67">(<argument pos:start="65:32" pos:end="65:35"><expr pos:start="65:32" pos:end="65:35"><name pos:start="65:32" pos:end="65:35">errp</name></expr></argument>, <argument pos:start="65:38" pos:end="65:61"><expr pos:start="65:38" pos:end="65:61"><literal type="string" pos:start="65:38" pos:end="65:61">"bad numerical value %s"</literal></expr></argument>, <argument pos:start="65:64" pos:end="65:66"><expr pos:start="65:64" pos:end="65:66"><name pos:start="65:64" pos:end="65:66">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="67:21" pos:end="67:27">return;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:65"><expr pos:start="71:17" pos:end="71:64"><call pos:start="71:17" pos:end="71:64"><name pos:start="71:17" pos:end="71:24">snprintf</name><argument_list pos:start="71:25" pos:end="71:64">(<argument pos:start="71:26" pos:end="71:28"><expr pos:start="71:26" pos:end="71:28"><name pos:start="71:26" pos:end="71:28">num</name></expr></argument>, <argument pos:start="71:31" pos:end="71:41"><expr pos:start="71:31" pos:end="71:41"><sizeof pos:start="71:31" pos:end="71:41">sizeof<argument_list pos:start="71:37" pos:end="71:41">(<argument pos:start="71:38" pos:end="71:40"><expr pos:start="71:38" pos:end="71:40"><name pos:start="71:38" pos:end="71:40">num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="71:44" pos:end="71:53"><expr pos:start="71:44" pos:end="71:53"><literal type="string" pos:start="71:44" pos:end="71:46">"%"</literal> <name pos:start="71:48" pos:end="71:53">PRId64</name></expr></argument>, <argument pos:start="71:56" pos:end="71:63"><expr pos:start="71:56" pos:end="71:63"><name pos:start="71:56" pos:end="71:63">tsc_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="75:50"><expr pos:start="73:17" pos:end="75:49"><call pos:start="73:17" pos:end="75:49"><name pos:start="73:17" pos:end="73:37">object_property_parse</name><argument_list pos:start="73:38" pos:end="75:49">(<argument pos:start="73:39" pos:end="73:49"><expr pos:start="73:39" pos:end="73:49"><call pos:start="73:39" pos:end="73:49"><name pos:start="73:39" pos:end="73:44">OBJECT</name><argument_list pos:start="73:45" pos:end="73:49">(<argument pos:start="73:46" pos:end="73:48"><expr pos:start="73:46" pos:end="73:48"><name pos:start="73:46" pos:end="73:48">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:52" pos:end="73:54"><expr pos:start="73:52" pos:end="73:54"><name pos:start="73:52" pos:end="73:54">num</name></expr></argument>, <argument pos:start="73:57" pos:end="73:71"><expr pos:start="73:57" pos:end="73:71"><literal type="string" pos:start="73:57" pos:end="73:71">"tsc-frequency"</literal></expr></argument>,

                                      <argument pos:start="75:39" pos:end="75:48"><expr pos:start="75:39" pos:end="75:48"><operator pos:start="75:39" pos:end="75:39">&amp;</operator><name pos:start="75:40" pos:end="75:48">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="77:15" pos:end="81:13">else <block pos:start="77:20" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:80">

                <expr_stmt pos:start="79:17" pos:end="79:80"><expr pos:start="79:17" pos:end="79:79"><call pos:start="79:17" pos:end="79:79"><name pos:start="79:17" pos:end="79:37">object_property_parse</name><argument_list pos:start="79:38" pos:end="79:79">(<argument pos:start="79:39" pos:end="79:49"><expr pos:start="79:39" pos:end="79:49"><call pos:start="79:39" pos:end="79:49"><name pos:start="79:39" pos:end="79:44">OBJECT</name><argument_list pos:start="79:45" pos:end="79:49">(<argument pos:start="79:46" pos:end="79:48"><expr pos:start="79:46" pos:end="79:48"><name pos:start="79:46" pos:end="79:48">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:52" pos:end="79:54"><expr pos:start="79:52" pos:end="79:54"><name pos:start="79:52" pos:end="79:54">val</name></expr></argument>, <argument pos:start="79:57" pos:end="79:66"><expr pos:start="79:57" pos:end="79:66"><name pos:start="79:57" pos:end="79:66">featurestr</name></expr></argument>, <argument pos:start="79:69" pos:end="79:78"><expr pos:start="79:69" pos:end="79:78"><operator pos:start="79:69" pos:end="79:69">&amp;</operator><name pos:start="79:70" pos:end="79:78">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="89:9">else <block pos:start="83:16" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:77">

            <expr_stmt pos:start="85:13" pos:end="85:34"><expr pos:start="85:13" pos:end="85:33"><call pos:start="85:13" pos:end="85:33"><name pos:start="85:13" pos:end="85:21">feat2prop</name><argument_list pos:start="85:22" pos:end="85:33">(<argument pos:start="85:23" pos:end="85:32"><expr pos:start="85:23" pos:end="85:32"><name pos:start="85:23" pos:end="85:32">featurestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:77"><expr pos:start="87:13" pos:end="87:76"><call pos:start="87:13" pos:end="87:76"><name pos:start="87:13" pos:end="87:33">object_property_parse</name><argument_list pos:start="87:34" pos:end="87:76">(<argument pos:start="87:35" pos:end="87:45"><expr pos:start="87:35" pos:end="87:45"><call pos:start="87:35" pos:end="87:45"><name pos:start="87:35" pos:end="87:40">OBJECT</name><argument_list pos:start="87:41" pos:end="87:45">(<argument pos:start="87:42" pos:end="87:44"><expr pos:start="87:42" pos:end="87:44"><name pos:start="87:42" pos:end="87:44">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:48" pos:end="87:51"><expr pos:start="87:48" pos:end="87:51"><literal type="string" pos:start="87:48" pos:end="87:51">"on"</literal></expr></argument>, <argument pos:start="87:54" pos:end="87:63"><expr pos:start="87:54" pos:end="87:63"><name pos:start="87:54" pos:end="87:63">featurestr</name></expr></argument>, <argument pos:start="87:66" pos:end="87:75"><expr pos:start="87:66" pos:end="87:75"><operator pos:start="87:66" pos:end="87:66">&amp;</operator><name pos:start="87:67" pos:end="87:75">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:22">(<expr pos:start="91:13" pos:end="91:21"><name pos:start="91:13" pos:end="91:21">local_err</name></expr>)</condition> <block pos:start="91:24" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:19">

            <expr_stmt pos:start="93:13" pos:end="93:45"><expr pos:start="93:13" pos:end="93:44"><call pos:start="93:13" pos:end="93:44"><name pos:start="93:13" pos:end="93:27">error_propagate</name><argument_list pos:start="93:28" pos:end="93:44">(<argument pos:start="93:29" pos:end="93:32"><expr pos:start="93:29" pos:end="93:32"><name pos:start="93:29" pos:end="93:32">errp</name></expr></argument>, <argument pos:start="93:35" pos:end="93:43"><expr pos:start="93:35" pos:end="93:43"><name pos:start="93:35" pos:end="93:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:39"><expr pos:start="99:9" pos:end="99:38"><name pos:start="99:9" pos:end="99:18">featurestr</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <call pos:start="99:22" pos:end="99:38"><name pos:start="99:22" pos:end="99:27">strtok</name><argument_list pos:start="99:28" pos:end="99:38">(<argument pos:start="99:29" pos:end="99:32"><expr pos:start="99:29" pos:end="99:32"><name pos:start="99:29" pos:end="99:32">NULL</name></expr></argument>, <argument pos:start="99:35" pos:end="99:37"><expr pos:start="99:35" pos:end="99:37"><literal type="string" pos:start="99:35" pos:end="99:37">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="105:5" pos:end="115:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:27">(<expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:11">cpu</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:26">host_features</name></name></expr>)</condition> <block pos:start="105:29" pos:end="115:5">{<block_content pos:start="107:9" pos:end="113:9">

        <for pos:start="107:9" pos:end="113:9">for <control pos:start="107:13" pos:end="107:43">(<init pos:start="107:14" pos:end="107:19"><expr pos:start="107:14" pos:end="107:18"><name pos:start="107:14" pos:end="107:14">w</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>;</init> <condition pos:start="107:21" pos:end="107:38"><expr pos:start="107:21" pos:end="107:37"><name pos:start="107:21" pos:end="107:21">w</name> <operator pos:start="107:23" pos:end="107:23">&lt;</operator> <name pos:start="107:25" pos:end="107:37">FEATURE_WORDS</name></expr>;</condition> <incr pos:start="107:40" pos:end="107:42"><expr pos:start="107:40" pos:end="107:42"><name pos:start="107:40" pos:end="107:40">w</name><operator pos:start="107:41" pos:end="107:42">++</operator></expr></incr>)</control> <block pos:start="107:45" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:71">

            <expr_stmt pos:start="109:13" pos:end="111:71"><expr pos:start="109:13" pos:end="111:70"><name pos:start="109:13" pos:end="109:28"><name pos:start="109:13" pos:end="109:15">env</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:25">features</name><index pos:start="109:26" pos:end="109:28">[<expr pos:start="109:27" pos:end="109:27"><name pos:start="109:27" pos:end="109:27">w</name></expr>]</index></name> <operator pos:start="109:30" pos:end="109:30">=</operator>

                <call pos:start="111:17" pos:end="111:70"><name pos:start="111:17" pos:end="111:50">x86_cpu_get_supported_feature_word</name><argument_list pos:start="111:51" pos:end="111:70">(<argument pos:start="111:52" pos:end="111:52"><expr pos:start="111:52" pos:end="111:52"><name pos:start="111:52" pos:end="111:52">w</name></expr></argument>, <argument pos:start="111:55" pos:end="111:69"><expr pos:start="111:55" pos:end="111:69"><name pos:start="111:55" pos:end="111:69"><name pos:start="111:55" pos:end="111:57">cpu</name><operator pos:start="111:58" pos:end="111:59">-&gt;</operator><name pos:start="111:60" pos:end="111:69">migratable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <for pos:start="119:5" pos:end="125:5">for <control pos:start="119:9" pos:end="119:39">(<init pos:start="119:10" pos:end="119:15"><expr pos:start="119:10" pos:end="119:14"><name pos:start="119:10" pos:end="119:10">w</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <literal type="number" pos:start="119:14" pos:end="119:14">0</literal></expr>;</init> <condition pos:start="119:17" pos:end="119:34"><expr pos:start="119:17" pos:end="119:33"><name pos:start="119:17" pos:end="119:17">w</name> <operator pos:start="119:19" pos:end="119:19">&lt;</operator> <name pos:start="119:21" pos:end="119:33">FEATURE_WORDS</name></expr>;</condition> <incr pos:start="119:36" pos:end="119:38"><expr pos:start="119:36" pos:end="119:38"><name pos:start="119:36" pos:end="119:36">w</name><operator pos:start="119:37" pos:end="119:38">++</operator></expr></incr>)</control> <block pos:start="119:41" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:47">

        <expr_stmt pos:start="121:9" pos:end="121:45"><expr pos:start="121:9" pos:end="121:44"><name pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:11">env</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:21">features</name><index pos:start="121:22" pos:end="121:24">[<expr pos:start="121:23" pos:end="121:23"><name pos:start="121:23" pos:end="121:23">w</name></expr>]</index></name> <operator pos:start="121:26" pos:end="121:27">|=</operator> <name pos:start="121:29" pos:end="121:44"><name pos:start="121:29" pos:end="121:41">plus_features</name><index pos:start="121:42" pos:end="121:44">[<expr pos:start="121:43" pos:end="121:43"><name pos:start="121:43" pos:end="121:43">w</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:47"><expr pos:start="123:9" pos:end="123:46"><name pos:start="123:9" pos:end="123:24"><name pos:start="123:9" pos:end="123:11">env</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:21">features</name><index pos:start="123:22" pos:end="123:24">[<expr pos:start="123:23" pos:end="123:23"><name pos:start="123:23" pos:end="123:23">w</name></expr>]</index></name> <operator pos:start="123:26" pos:end="123:27">&amp;=</operator> <operator pos:start="123:29" pos:end="123:29">~</operator><name pos:start="123:30" pos:end="123:46"><name pos:start="123:30" pos:end="123:43">minus_features</name><index pos:start="123:44" pos:end="123:46">[<expr pos:start="123:45" pos:end="123:45"><name pos:start="123:45" pos:end="123:45">w</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
