<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16734.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vpc_create</name><parameter_list pos:start="1:22" pos:end="3:40">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:65"><decl pos:start="1:45" pos:end="1:65"><type pos:start="1:45" pos:end="1:65"><name pos:start="1:45" pos:end="1:51">int64_t</name></type> <name pos:start="1:53" pos:end="1:65">total_sectors</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:28"><decl pos:start="3:5" pos:end="3:28"><type pos:start="3:5" pos:end="3:28"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:14">char</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:28">backing_file</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:39"><decl pos:start="3:31" pos:end="3:39"><type pos:start="3:31" pos:end="3:39"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:39">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="195:1">{<block_content pos:start="7:5" pos:end="193:13">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:21"><name pos:start="7:13" pos:end="7:15">buf</name><index pos:start="7:16" pos:end="7:21">[<expr pos:start="7:17" pos:end="7:20"><literal type="number" pos:start="7:17" pos:end="7:20">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:21">vhd_footer</name></name><modifier pos:start="9:22" pos:end="9:22">*</modifier></type> <name pos:start="9:24" pos:end="9:29">footer</name> <init pos:start="9:31" pos:end="9:56">= <expr pos:start="9:33" pos:end="9:56"><operator pos:start="9:33" pos:end="9:33">(</operator>struct <name pos:start="9:41" pos:end="9:50">vhd_footer</name><operator pos:start="9:51" pos:end="9:51">*</operator><operator pos:start="9:52" pos:end="9:52">)</operator> <name pos:start="9:54" pos:end="9:56">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="13:41"><decl pos:start="11:5" pos:end="13:40"><type pos:start="11:5" pos:end="11:30"><name pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:29">vhd_dyndisk_header</name></name><modifier pos:start="11:30" pos:end="11:30">*</modifier></type> <name pos:start="11:32" pos:end="11:45">dyndisk_header</name> <init pos:start="11:47" pos:end="13:40">=

        <expr pos:start="13:9" pos:end="13:40"><operator pos:start="13:9" pos:end="13:9">(</operator>struct <name pos:start="13:17" pos:end="13:34">vhd_dyndisk_header</name><operator pos:start="13:35" pos:end="13:35">*</operator><operator pos:start="13:36" pos:end="13:36">)</operator> <name pos:start="13:38" pos:end="13:40">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">fd</name></decl>, <decl pos:start="15:13" pos:end="15:13"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:13" pos:end="15:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint16_t</name></type> <name pos:start="17:14" pos:end="17:17">cyls</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:17">heads</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:24">secs_per_cyl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:39"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:21">block_size</name></decl>, <decl pos:start="23:24" pos:end="23:38"><type ref="prev" pos:start="23:5" pos:end="23:10"/><name pos:start="23:24" pos:end="23:38">num_bat_entries</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:24"><if pos:start="27:5" pos:end="29:24">if <condition pos:start="27:8" pos:end="27:29">(<expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:20">backing_file</name> <operator pos:start="27:22" pos:end="27:23">!=</operator> <name pos:start="27:25" pos:end="27:28">NULL</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:24"><block_content pos:start="29:9" pos:end="29:24">

        <return pos:start="29:9" pos:end="29:24">return <expr pos:start="29:16" pos:end="29:23"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:23">ENOTSUP</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:71"><expr pos:start="33:5" pos:end="33:70"><name pos:start="33:5" pos:end="33:6">fd</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:70"><name pos:start="33:10" pos:end="33:13">open</name><argument_list pos:start="33:14" pos:end="33:70">(<argument pos:start="33:15" pos:end="33:22"><expr pos:start="33:15" pos:end="33:22"><name pos:start="33:15" pos:end="33:22">filename</name></expr></argument>, <argument pos:start="33:25" pos:end="33:63"><expr pos:start="33:25" pos:end="33:63"><name pos:start="33:25" pos:end="33:32">O_WRONLY</name> <operator pos:start="33:34" pos:end="33:34">|</operator> <name pos:start="33:36" pos:end="33:42">O_CREAT</name> <operator pos:start="33:44" pos:end="33:44">|</operator> <name pos:start="33:46" pos:end="33:52">O_TRUNC</name> <operator pos:start="33:54" pos:end="33:54">|</operator> <name pos:start="33:56" pos:end="33:63">O_BINARY</name></expr></argument>, <argument pos:start="33:66" pos:end="33:69"><expr pos:start="33:66" pos:end="33:69"><literal type="number" pos:start="33:66" pos:end="33:69">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:20"><if pos:start="35:5" pos:end="37:20">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">fd</name> <operator pos:start="35:12" pos:end="35:12">&lt;</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:20"><block_content pos:start="37:9" pos:end="37:20">

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="41:5" pos:end="41:49">// Calculate matching total_size and geometry</comment>

    <expr_stmt pos:start="43:5" pos:end="43:68"><expr pos:start="43:5" pos:end="43:67"><call pos:start="43:5" pos:end="43:67"><name pos:start="43:5" pos:end="43:22">calculate_geometry</name><argument_list pos:start="43:23" pos:end="43:67">(<argument pos:start="43:24" pos:end="43:36"><expr pos:start="43:24" pos:end="43:36"><name pos:start="43:24" pos:end="43:36">total_sectors</name></expr></argument>, <argument pos:start="43:39" pos:end="43:43"><expr pos:start="43:39" pos:end="43:43"><operator pos:start="43:39" pos:end="43:39">&amp;</operator><name pos:start="43:40" pos:end="43:43">cyls</name></expr></argument>, <argument pos:start="43:46" pos:end="43:51"><expr pos:start="43:46" pos:end="43:51"><operator pos:start="43:46" pos:end="43:46">&amp;</operator><name pos:start="43:47" pos:end="43:51">heads</name></expr></argument>, <argument pos:start="43:54" pos:end="43:66"><expr pos:start="43:54" pos:end="43:66"><operator pos:start="43:54" pos:end="43:54">&amp;</operator><name pos:start="43:55" pos:end="43:66">secs_per_cyl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:58"><expr pos:start="45:5" pos:end="45:57"><name pos:start="45:5" pos:end="45:17">total_sectors</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:28">int64_t</name><operator pos:start="45:29" pos:end="45:29">)</operator> <name pos:start="45:31" pos:end="45:34">cyls</name> <operator pos:start="45:36" pos:end="45:36">*</operator> <name pos:start="45:38" pos:end="45:42">heads</name> <operator pos:start="45:44" pos:end="45:44">*</operator> <name pos:start="45:46" pos:end="45:57">secs_per_cyl</name></expr>;</expr_stmt>



    <comment type="line" pos:start="49:5" pos:end="49:35">// Prepare the Hard Disk Footer</comment>

    <expr_stmt pos:start="51:5" pos:end="51:25"><expr pos:start="51:5" pos:end="51:24"><call pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:10">memset</name><argument_list pos:start="51:11" pos:end="51:24">(<argument pos:start="51:12" pos:end="51:14"><expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">buf</name></expr></argument>, <argument pos:start="51:17" pos:end="51:17"><expr pos:start="51:17" pos:end="51:17"><literal type="number" pos:start="51:17" pos:end="51:17">0</literal></expr></argument>, <argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><literal type="number" pos:start="51:20" pos:end="51:23">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><call pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:11">strncpy</name><argument_list pos:start="55:12" pos:end="55:43">(<argument pos:start="55:13" pos:end="55:27"><expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:18">footer</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:27">creator</name></name></expr></argument>, <argument pos:start="55:30" pos:end="55:39"><expr pos:start="55:30" pos:end="55:39"><literal type="string" pos:start="55:30" pos:end="55:39">"conectix"</literal></expr></argument>, <argument pos:start="55:42" pos:end="55:42"><expr pos:start="55:42" pos:end="55:42"><literal type="number" pos:start="55:42" pos:end="55:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="57:5" pos:end="57:53">// TODO Check if "qemu" creator_app is ok for VPC</comment>

    <expr_stmt pos:start="59:5" pos:end="59:44"><expr pos:start="59:5" pos:end="59:43"><call pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:11">strncpy</name><argument_list pos:start="59:12" pos:end="59:43">(<argument pos:start="59:13" pos:end="59:31"><expr pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:18">footer</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:31">creator_app</name></name></expr></argument>, <argument pos:start="59:34" pos:end="59:39"><expr pos:start="59:34" pos:end="59:39"><literal type="string" pos:start="59:34" pos:end="59:39">"qemu"</literal></expr></argument>, <argument pos:start="59:42" pos:end="59:42"><expr pos:start="59:42" pos:end="59:42"><literal type="number" pos:start="59:42" pos:end="59:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:43"><expr pos:start="61:5" pos:end="61:42"><call pos:start="61:5" pos:end="61:42"><name pos:start="61:5" pos:end="61:11">strncpy</name><argument_list pos:start="61:12" pos:end="61:42">(<argument pos:start="61:13" pos:end="61:30"><expr pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:18">footer</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:30">creator_os</name></name></expr></argument>, <argument pos:start="61:33" pos:end="61:38"><expr pos:start="61:33" pos:end="61:38"><literal type="string" pos:start="61:33" pos:end="61:38">"Wi2k"</literal></expr></argument>, <argument pos:start="61:41" pos:end="61:41"><expr pos:start="61:41" pos:end="61:41"><literal type="number" pos:start="61:41" pos:end="61:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:41"><expr pos:start="65:5" pos:end="65:40"><name pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:10">footer</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:20">features</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:40"><name pos:start="65:24" pos:end="65:34">be32_to_cpu</name><argument_list pos:start="65:35" pos:end="65:40">(<argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><literal type="number" pos:start="65:36" pos:end="65:39">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:46"><expr pos:start="67:5" pos:end="67:45"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:10">footer</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:19">version</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:45"><name pos:start="67:23" pos:end="67:33">be32_to_cpu</name><argument_list pos:start="67:34" pos:end="67:45">(<argument pos:start="67:35" pos:end="67:44"><expr pos:start="67:35" pos:end="67:44"><literal type="number" pos:start="67:35" pos:end="67:44">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:10">footer</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:23">data_offset</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:50"><name pos:start="69:27" pos:end="69:37">be64_to_cpu</name><argument_list pos:start="69:38" pos:end="69:50">(<argument pos:start="69:39" pos:end="69:49"><expr pos:start="69:39" pos:end="69:49"><name pos:start="69:39" pos:end="69:49">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:69"><expr pos:start="71:5" pos:end="71:68"><name pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:10">footer</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:21">timestamp</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <call pos:start="71:25" pos:end="71:68"><name pos:start="71:25" pos:end="71:35">be32_to_cpu</name><argument_list pos:start="71:36" pos:end="71:68">(<argument pos:start="71:37" pos:end="71:67"><expr pos:start="71:37" pos:end="71:67"><call pos:start="71:37" pos:end="71:46"><name pos:start="71:37" pos:end="71:40">time</name><argument_list pos:start="71:41" pos:end="71:46">(<argument pos:start="71:42" pos:end="71:45"><expr pos:start="71:42" pos:end="71:45"><name pos:start="71:42" pos:end="71:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="71:48" pos:end="71:48">-</operator> <name pos:start="71:50" pos:end="71:67">VHD_TIMESTAMP_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="75:5" pos:end="75:33">// Version of Virtual PC 2007</comment>

    <expr_stmt pos:start="77:5" pos:end="77:40"><expr pos:start="77:5" pos:end="77:39"><name pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:10">footer</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:17">major</name></name> <operator pos:start="77:19" pos:end="77:19">=</operator> <call pos:start="77:21" pos:end="77:39"><name pos:start="77:21" pos:end="77:31">be16_to_cpu</name><argument_list pos:start="77:32" pos:end="77:39">(<argument pos:start="77:33" pos:end="77:38"><expr pos:start="77:33" pos:end="77:38"><literal type="number" pos:start="77:33" pos:end="77:38">0x0005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:39"><expr pos:start="79:5" pos:end="79:38"><name pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:10">footer</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:17">minor</name></name> <operator pos:start="79:19" pos:end="79:19">=</operator><call pos:start="79:20" pos:end="79:38"><name pos:start="79:20" pos:end="79:30">be16_to_cpu</name><argument_list pos:start="79:31" pos:end="79:38">(<argument pos:start="79:32" pos:end="79:37"><expr pos:start="79:32" pos:end="79:37"><literal type="number" pos:start="79:32" pos:end="79:37">0x0003</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:57"><expr pos:start="83:5" pos:end="83:56"><name pos:start="83:5" pos:end="83:21"><name pos:start="83:5" pos:end="83:10">footer</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:21">orig_size</name></name> <operator pos:start="83:23" pos:end="83:23">=</operator> <call pos:start="83:25" pos:end="83:56"><name pos:start="83:25" pos:end="83:35">be64_to_cpu</name><argument_list pos:start="83:36" pos:end="83:56">(<argument pos:start="83:37" pos:end="83:55"><expr pos:start="83:37" pos:end="83:55"><name pos:start="83:37" pos:end="83:49">total_sectors</name> <operator pos:start="83:51" pos:end="83:51">*</operator> <literal type="number" pos:start="83:53" pos:end="83:55">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:52"><expr pos:start="85:5" pos:end="85:51"><name pos:start="85:5" pos:end="85:16"><name pos:start="85:5" pos:end="85:10">footer</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:16">size</name></name> <operator pos:start="85:18" pos:end="85:18">=</operator> <call pos:start="85:20" pos:end="85:51"><name pos:start="85:20" pos:end="85:30">be64_to_cpu</name><argument_list pos:start="85:31" pos:end="85:51">(<argument pos:start="85:32" pos:end="85:50"><expr pos:start="85:32" pos:end="85:50"><name pos:start="85:32" pos:end="85:44">total_sectors</name> <operator pos:start="85:46" pos:end="85:46">*</operator> <literal type="number" pos:start="85:48" pos:end="85:50">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:37"><expr pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:10">footer</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:16">cyls</name></name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="89:36"><name pos:start="89:20" pos:end="89:30">be16_to_cpu</name><argument_list pos:start="89:31" pos:end="89:36">(<argument pos:start="89:32" pos:end="89:35"><expr pos:start="89:32" pos:end="89:35"><name pos:start="89:32" pos:end="89:35">cyls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:26"><expr pos:start="91:5" pos:end="91:25"><name pos:start="91:5" pos:end="91:17"><name pos:start="91:5" pos:end="91:10">footer</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:17">heads</name></name> <operator pos:start="91:19" pos:end="91:19">=</operator> <name pos:start="91:21" pos:end="91:25">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:40"><expr pos:start="93:5" pos:end="93:39"><name pos:start="93:5" pos:end="93:24"><name pos:start="93:5" pos:end="93:10">footer</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:24">secs_per_cyl</name></name> <operator pos:start="93:26" pos:end="93:26">=</operator> <name pos:start="93:28" pos:end="93:39">secs_per_cyl</name></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:44"><expr pos:start="97:5" pos:end="97:43"><name pos:start="97:5" pos:end="97:16"><name pos:start="97:5" pos:end="97:10">footer</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:16">type</name></name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:43"><name pos:start="97:20" pos:end="97:30">be32_to_cpu</name><argument_list pos:start="97:31" pos:end="97:43">(<argument pos:start="97:32" pos:end="97:42"><expr pos:start="97:32" pos:end="97:42"><name pos:start="97:32" pos:end="97:42">VHD_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="101:5" pos:end="101:27">// TODO uuid is missing</comment>



    <expr_stmt pos:start="105:5" pos:end="105:67"><expr pos:start="105:5" pos:end="105:66"><name pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:10">footer</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:20">checksum</name></name> <operator pos:start="105:22" pos:end="105:22">=</operator> <call pos:start="105:24" pos:end="105:66"><name pos:start="105:24" pos:end="105:34">be32_to_cpu</name><argument_list pos:start="105:35" pos:end="105:66">(<argument pos:start="105:36" pos:end="105:65"><expr pos:start="105:36" pos:end="105:65"><call pos:start="105:36" pos:end="105:65"><name pos:start="105:36" pos:end="105:47">vpc_checksum</name><argument_list pos:start="105:48" pos:end="105:65">(<argument pos:start="105:49" pos:end="105:51"><expr pos:start="105:49" pos:end="105:51"><name pos:start="105:49" pos:end="105:51">buf</name></expr></argument>, <argument pos:start="105:54" pos:end="105:64"><expr pos:start="105:54" pos:end="105:64"><name pos:start="105:54" pos:end="105:64">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="109:5" pos:end="109:64">// Write the footer (twice: at the beginning and at the end)</comment>

    <expr_stmt pos:start="111:5" pos:end="111:26"><expr pos:start="111:5" pos:end="111:25"><name pos:start="111:5" pos:end="111:14">block_size</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:25">0x200000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:78"><expr pos:start="113:5" pos:end="113:77"><name pos:start="113:5" pos:end="113:19">num_bat_entries</name> <operator pos:start="113:21" pos:end="113:21">=</operator> <operator pos:start="113:23" pos:end="113:23">(</operator><name pos:start="113:24" pos:end="113:36">total_sectors</name> <operator pos:start="113:38" pos:end="113:38">+</operator> <name pos:start="113:40" pos:end="113:49">block_size</name> <operator pos:start="113:51" pos:end="113:51">/</operator> <literal type="number" pos:start="113:53" pos:end="113:55">512</literal><operator pos:start="113:56" pos:end="113:56">)</operator> <operator pos:start="113:58" pos:end="113:58">/</operator> <operator pos:start="113:60" pos:end="113:60">(</operator><name pos:start="113:61" pos:end="113:70">block_size</name> <operator pos:start="113:72" pos:end="113:72">/</operator> <literal type="number" pos:start="113:74" pos:end="113:76">512</literal><operator pos:start="113:77" pos:end="113:77">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="119:20"><if pos:start="117:5" pos:end="119:20">if <condition pos:start="117:8" pos:end="117:51">(<expr pos:start="117:9" pos:end="117:50"><call pos:start="117:9" pos:end="117:35"><name pos:start="117:9" pos:end="117:13">write</name><argument_list pos:start="117:14" pos:end="117:35">(<argument pos:start="117:15" pos:end="117:16"><expr pos:start="117:15" pos:end="117:16"><name pos:start="117:15" pos:end="117:16">fd</name></expr></argument>, <argument pos:start="117:19" pos:end="117:21"><expr pos:start="117:19" pos:end="117:21"><name pos:start="117:19" pos:end="117:21">buf</name></expr></argument>, <argument pos:start="117:24" pos:end="117:34"><expr pos:start="117:24" pos:end="117:34"><name pos:start="117:24" pos:end="117:34">HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="117:37" pos:end="117:38">!=</operator> <name pos:start="117:40" pos:end="117:50">HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:20"><block_content pos:start="119:9" pos:end="119:20">

        <return pos:start="119:9" pos:end="119:20">return <expr pos:start="119:16" pos:end="119:19"><operator pos:start="119:16" pos:end="119:16">-</operator><name pos:start="119:17" pos:end="119:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="125:20"><if pos:start="123:5" pos:end="125:20">if <condition pos:start="123:8" pos:end="123:77">(<expr pos:start="123:9" pos:end="123:76"><call pos:start="123:9" pos:end="123:72"><name pos:start="123:9" pos:end="123:13">lseek</name><argument_list pos:start="123:14" pos:end="123:72">(<argument pos:start="123:15" pos:end="123:16"><expr pos:start="123:15" pos:end="123:16"><name pos:start="123:15" pos:end="123:16">fd</name></expr></argument>, <argument pos:start="123:19" pos:end="123:61"><expr pos:start="123:19" pos:end="123:61"><literal type="number" pos:start="123:19" pos:end="123:24">1536</literal> <operator pos:start="123:24" pos:end="123:24">+</operator> <operator pos:start="123:26" pos:end="123:26">(</operator><operator pos:start="123:27" pos:end="123:27">(</operator><name pos:start="123:28" pos:end="123:42">num_bat_entries</name> <operator pos:start="123:44" pos:end="123:44">*</operator> <literal type="number" pos:start="123:46" pos:end="123:48">4</literal> <operator pos:start="123:48" pos:end="123:48">+</operator> <literal type="number" pos:start="123:50" pos:end="123:52">511</literal><operator pos:start="123:53" pos:end="123:53">)</operator> <operator pos:start="123:55" pos:end="123:55">&amp;</operator> <operator pos:start="123:57" pos:end="123:57">~</operator><literal type="number" pos:start="123:58" pos:end="123:60">511</literal><operator pos:start="123:61" pos:end="123:61">)</operator></expr></argument>, <argument pos:start="123:64" pos:end="123:71"><expr pos:start="123:64" pos:end="123:71"><name pos:start="123:64" pos:end="123:71">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="123:74" pos:end="123:74">&lt;</operator> <literal type="number" pos:start="123:76" pos:end="123:76">0</literal></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:20"><block_content pos:start="125:9" pos:end="125:20">

        <return pos:start="125:9" pos:end="125:20">return <expr pos:start="125:16" pos:end="125:19"><operator pos:start="125:16" pos:end="125:16">-</operator><name pos:start="125:17" pos:end="125:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="127:5" pos:end="129:20"><if pos:start="127:5" pos:end="129:20">if <condition pos:start="127:8" pos:end="127:51">(<expr pos:start="127:9" pos:end="127:50"><call pos:start="127:9" pos:end="127:35"><name pos:start="127:9" pos:end="127:13">write</name><argument_list pos:start="127:14" pos:end="127:35">(<argument pos:start="127:15" pos:end="127:16"><expr pos:start="127:15" pos:end="127:16"><name pos:start="127:15" pos:end="127:16">fd</name></expr></argument>, <argument pos:start="127:19" pos:end="127:21"><expr pos:start="127:19" pos:end="127:21"><name pos:start="127:19" pos:end="127:21">buf</name></expr></argument>, <argument pos:start="127:24" pos:end="127:34"><expr pos:start="127:24" pos:end="127:34"><name pos:start="127:24" pos:end="127:34">HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="127:37" pos:end="127:38">!=</operator> <name pos:start="127:40" pos:end="127:50">HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:20"><block_content pos:start="129:9" pos:end="129:20">

        <return pos:start="129:9" pos:end="129:20">return <expr pos:start="129:16" pos:end="129:19"><operator pos:start="129:16" pos:end="129:16">-</operator><name pos:start="129:17" pos:end="129:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="133:5" pos:end="133:28">// Write the initial BAT</comment>

    <if_stmt pos:start="135:5" pos:end="137:20"><if pos:start="135:5" pos:end="137:20">if <condition pos:start="135:8" pos:end="135:41">(<expr pos:start="135:9" pos:end="135:40"><call pos:start="135:9" pos:end="135:36"><name pos:start="135:9" pos:end="135:13">lseek</name><argument_list pos:start="135:14" pos:end="135:36">(<argument pos:start="135:15" pos:end="135:16"><expr pos:start="135:15" pos:end="135:16"><name pos:start="135:15" pos:end="135:16">fd</name></expr></argument>, <argument pos:start="135:19" pos:end="135:25"><expr pos:start="135:19" pos:end="135:25"><literal type="number" pos:start="135:19" pos:end="135:19">3</literal> <operator pos:start="135:21" pos:end="135:21">*</operator> <literal type="number" pos:start="135:23" pos:end="135:25">512</literal></expr></argument>, <argument pos:start="135:28" pos:end="135:35"><expr pos:start="135:28" pos:end="135:35"><name pos:start="135:28" pos:end="135:35">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="135:38" pos:end="135:38">&lt;</operator> <literal type="number" pos:start="135:40" pos:end="135:40">0</literal></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:20"><block_content pos:start="137:9" pos:end="137:20">

        <return pos:start="137:9" pos:end="137:20">return <expr pos:start="137:16" pos:end="137:19"><operator pos:start="137:16" pos:end="137:16">-</operator><name pos:start="137:17" pos:end="137:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:27"><expr pos:start="141:5" pos:end="141:26"><call pos:start="141:5" pos:end="141:26"><name pos:start="141:5" pos:end="141:10">memset</name><argument_list pos:start="141:11" pos:end="141:26">(<argument pos:start="141:12" pos:end="141:14"><expr pos:start="141:12" pos:end="141:14"><name pos:start="141:12" pos:end="141:14">buf</name></expr></argument>, <argument pos:start="141:17" pos:end="141:20"><expr pos:start="141:17" pos:end="141:20"><literal type="number" pos:start="141:17" pos:end="141:20">0xFF</literal></expr></argument>, <argument pos:start="141:23" pos:end="141:25"><expr pos:start="141:23" pos:end="141:25"><literal type="number" pos:start="141:23" pos:end="141:25">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="143:5" pos:end="147:24">for <control pos:start="143:9" pos:end="143:59">(<init pos:start="143:10" pos:end="143:15"><expr pos:start="143:10" pos:end="143:14"><name pos:start="143:10" pos:end="143:10">i</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <literal type="number" pos:start="143:14" pos:end="143:14">0</literal></expr>;</init> <condition pos:start="143:17" pos:end="143:54"><expr pos:start="143:17" pos:end="143:53"><name pos:start="143:17" pos:end="143:17">i</name> <operator pos:start="143:19" pos:end="143:19">&lt;</operator> <operator pos:start="143:21" pos:end="143:21">(</operator><name pos:start="143:22" pos:end="143:36">num_bat_entries</name> <operator pos:start="143:38" pos:end="143:38">*</operator> <literal type="number" pos:start="143:40" pos:end="143:42">4</literal> <operator pos:start="143:42" pos:end="143:42">+</operator> <literal type="number" pos:start="143:44" pos:end="143:46">511</literal><operator pos:start="143:47" pos:end="143:47">)</operator> <operator pos:start="143:49" pos:end="143:49">/</operator> <literal type="number" pos:start="143:51" pos:end="143:53">512</literal></expr>;</condition> <incr pos:start="143:56" pos:end="143:58"><expr pos:start="143:56" pos:end="143:58"><name pos:start="143:56" pos:end="143:56">i</name><operator pos:start="143:57" pos:end="143:58">++</operator></expr></incr>)</control><block type="pseudo" pos:start="145:9" pos:end="147:24"><block_content pos:start="145:9" pos:end="147:24">

        <if_stmt pos:start="145:9" pos:end="147:24"><if pos:start="145:9" pos:end="147:24">if <condition pos:start="145:12" pos:end="145:39">(<expr pos:start="145:13" pos:end="145:38"><call pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:17">write</name><argument_list pos:start="145:18" pos:end="145:31">(<argument pos:start="145:19" pos:end="145:20"><expr pos:start="145:19" pos:end="145:20"><name pos:start="145:19" pos:end="145:20">fd</name></expr></argument>, <argument pos:start="145:23" pos:end="145:25"><expr pos:start="145:23" pos:end="145:25"><name pos:start="145:23" pos:end="145:25">buf</name></expr></argument>, <argument pos:start="145:28" pos:end="145:30"><expr pos:start="145:28" pos:end="145:30"><literal type="number" pos:start="145:28" pos:end="145:30">512</literal></expr></argument>)</argument_list></call> <operator pos:start="145:33" pos:end="145:34">!=</operator> <literal type="number" pos:start="145:36" pos:end="145:38">512</literal></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:24"><block_content pos:start="147:13" pos:end="147:24">

            <return pos:start="147:13" pos:end="147:24">return <expr pos:start="147:20" pos:end="147:23"><operator pos:start="147:20" pos:end="147:20">-</operator><name pos:start="147:21" pos:end="147:23">EIO</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>





    <comment type="line" pos:start="153:5" pos:end="153:38">// Prepare the Dynamic Disk Header</comment>

    <expr_stmt pos:start="155:5" pos:end="155:25"><expr pos:start="155:5" pos:end="155:24"><call pos:start="155:5" pos:end="155:24"><name pos:start="155:5" pos:end="155:10">memset</name><argument_list pos:start="155:11" pos:end="155:24">(<argument pos:start="155:12" pos:end="155:14"><expr pos:start="155:12" pos:end="155:14"><name pos:start="155:12" pos:end="155:14">buf</name></expr></argument>, <argument pos:start="155:17" pos:end="155:17"><expr pos:start="155:17" pos:end="155:17"><literal type="number" pos:start="155:17" pos:end="155:17">0</literal></expr></argument>, <argument pos:start="155:20" pos:end="155:23"><expr pos:start="155:20" pos:end="155:23"><literal type="number" pos:start="155:20" pos:end="155:23">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:50"><expr pos:start="159:5" pos:end="159:49"><call pos:start="159:5" pos:end="159:49"><name pos:start="159:5" pos:end="159:11">strncpy</name><argument_list pos:start="159:12" pos:end="159:49">(<argument pos:start="159:13" pos:end="159:33"><expr pos:start="159:13" pos:end="159:33"><name pos:start="159:13" pos:end="159:33"><name pos:start="159:13" pos:end="159:26">dyndisk_header</name><operator pos:start="159:27" pos:end="159:28">-&gt;</operator><name pos:start="159:29" pos:end="159:33">magic</name></name></expr></argument>, <argument pos:start="159:36" pos:end="159:45"><expr pos:start="159:36" pos:end="159:45"><literal type="string" pos:start="159:36" pos:end="159:45">"cxsparse"</literal></expr></argument>, <argument pos:start="159:48" pos:end="159:48"><expr pos:start="159:48" pos:end="159:48"><literal type="number" pos:start="159:48" pos:end="159:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:58"><expr pos:start="163:5" pos:end="163:57"><name pos:start="163:5" pos:end="163:31"><name pos:start="163:5" pos:end="163:18">dyndisk_header</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:31">data_offset</name></name> <operator pos:start="163:33" pos:end="163:33">=</operator> <call pos:start="163:35" pos:end="163:57"><name pos:start="163:35" pos:end="163:45">be64_to_cpu</name><argument_list pos:start="163:46" pos:end="163:57">(<argument pos:start="163:47" pos:end="163:56"><expr pos:start="163:47" pos:end="163:56"><literal type="number" pos:start="163:47" pos:end="163:56">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:56"><expr pos:start="165:5" pos:end="165:55"><name pos:start="165:5" pos:end="165:32"><name pos:start="165:5" pos:end="165:18">dyndisk_header</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:32">table_offset</name></name> <operator pos:start="165:34" pos:end="165:34">=</operator> <call pos:start="165:36" pos:end="165:55"><name pos:start="165:36" pos:end="165:46">be64_to_cpu</name><argument_list pos:start="165:47" pos:end="165:55">(<argument pos:start="165:48" pos:end="165:54"><expr pos:start="165:48" pos:end="165:54"><literal type="number" pos:start="165:48" pos:end="165:48">3</literal> <operator pos:start="165:50" pos:end="165:50">*</operator> <literal type="number" pos:start="165:52" pos:end="165:54">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:54"><expr pos:start="167:5" pos:end="167:53"><name pos:start="167:5" pos:end="167:27"><name pos:start="167:5" pos:end="167:18">dyndisk_header</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:27">version</name></name> <operator pos:start="167:29" pos:end="167:29">=</operator> <call pos:start="167:31" pos:end="167:53"><name pos:start="167:31" pos:end="167:41">be32_to_cpu</name><argument_list pos:start="167:42" pos:end="167:53">(<argument pos:start="167:43" pos:end="167:52"><expr pos:start="167:43" pos:end="167:52"><literal type="number" pos:start="167:43" pos:end="167:52">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:57"><expr pos:start="169:5" pos:end="169:56"><name pos:start="169:5" pos:end="169:30"><name pos:start="169:5" pos:end="169:18">dyndisk_header</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:30">block_size</name></name> <operator pos:start="169:32" pos:end="169:32">=</operator> <call pos:start="169:34" pos:end="169:56"><name pos:start="169:34" pos:end="169:44">be32_to_cpu</name><argument_list pos:start="169:45" pos:end="169:56">(<argument pos:start="169:46" pos:end="169:55"><expr pos:start="169:46" pos:end="169:55"><name pos:start="169:46" pos:end="169:55">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:69"><expr pos:start="171:5" pos:end="171:68"><name pos:start="171:5" pos:end="171:37"><name pos:start="171:5" pos:end="171:18">dyndisk_header</name><operator pos:start="171:19" pos:end="171:20">-&gt;</operator><name pos:start="171:21" pos:end="171:37">max_table_entries</name></name> <operator pos:start="171:39" pos:end="171:39">=</operator> <call pos:start="171:41" pos:end="171:68"><name pos:start="171:41" pos:end="171:51">be32_to_cpu</name><argument_list pos:start="171:52" pos:end="171:68">(<argument pos:start="171:53" pos:end="171:67"><expr pos:start="171:53" pos:end="171:67"><name pos:start="171:53" pos:end="171:67">num_bat_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:68"><expr pos:start="175:5" pos:end="175:67"><name pos:start="175:5" pos:end="175:28"><name pos:start="175:5" pos:end="175:18">dyndisk_header</name><operator pos:start="175:19" pos:end="175:20">-&gt;</operator><name pos:start="175:21" pos:end="175:28">checksum</name></name> <operator pos:start="175:30" pos:end="175:30">=</operator> <call pos:start="175:32" pos:end="175:67"><name pos:start="175:32" pos:end="175:42">be32_to_cpu</name><argument_list pos:start="175:43" pos:end="175:67">(<argument pos:start="175:44" pos:end="175:66"><expr pos:start="175:44" pos:end="175:66"><call pos:start="175:44" pos:end="175:66"><name pos:start="175:44" pos:end="175:55">vpc_checksum</name><argument_list pos:start="175:56" pos:end="175:66">(<argument pos:start="175:57" pos:end="175:59"><expr pos:start="175:57" pos:end="175:59"><name pos:start="175:57" pos:end="175:59">buf</name></expr></argument>, <argument pos:start="175:62" pos:end="175:65"><expr pos:start="175:62" pos:end="175:65"><literal type="number" pos:start="175:62" pos:end="175:65">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="179:5" pos:end="179:23">// Write the header</comment>

    <if_stmt pos:start="181:5" pos:end="183:20"><if pos:start="181:5" pos:end="183:20">if <condition pos:start="181:8" pos:end="181:37">(<expr pos:start="181:9" pos:end="181:36"><call pos:start="181:9" pos:end="181:32"><name pos:start="181:9" pos:end="181:13">lseek</name><argument_list pos:start="181:14" pos:end="181:32">(<argument pos:start="181:15" pos:end="181:16"><expr pos:start="181:15" pos:end="181:16"><name pos:start="181:15" pos:end="181:16">fd</name></expr></argument>, <argument pos:start="181:19" pos:end="181:21"><expr pos:start="181:19" pos:end="181:21"><literal type="number" pos:start="181:19" pos:end="181:21">512</literal></expr></argument>, <argument pos:start="181:24" pos:end="181:31"><expr pos:start="181:24" pos:end="181:31"><name pos:start="181:24" pos:end="181:31">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="181:34" pos:end="181:34">&lt;</operator> <literal type="number" pos:start="181:36" pos:end="181:36">0</literal></expr>)</condition><block type="pseudo" pos:start="183:9" pos:end="183:20"><block_content pos:start="183:9" pos:end="183:20">

        <return pos:start="183:9" pos:end="183:20">return <expr pos:start="183:16" pos:end="183:19"><operator pos:start="183:16" pos:end="183:16">-</operator><name pos:start="183:17" pos:end="183:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="185:5" pos:end="187:20"><if pos:start="185:5" pos:end="187:20">if <condition pos:start="185:8" pos:end="185:37">(<expr pos:start="185:9" pos:end="185:36"><call pos:start="185:9" pos:end="185:28"><name pos:start="185:9" pos:end="185:13">write</name><argument_list pos:start="185:14" pos:end="185:28">(<argument pos:start="185:15" pos:end="185:16"><expr pos:start="185:15" pos:end="185:16"><name pos:start="185:15" pos:end="185:16">fd</name></expr></argument>, <argument pos:start="185:19" pos:end="185:21"><expr pos:start="185:19" pos:end="185:21"><name pos:start="185:19" pos:end="185:21">buf</name></expr></argument>, <argument pos:start="185:24" pos:end="185:27"><expr pos:start="185:24" pos:end="185:27"><literal type="number" pos:start="185:24" pos:end="185:27">1024</literal></expr></argument>)</argument_list></call> <operator pos:start="185:30" pos:end="185:31">!=</operator> <literal type="number" pos:start="185:33" pos:end="185:36">1024</literal></expr>)</condition><block type="pseudo" pos:start="187:9" pos:end="187:20"><block_content pos:start="187:9" pos:end="187:20">

        <return pos:start="187:9" pos:end="187:20">return <expr pos:start="187:16" pos:end="187:19"><operator pos:start="187:16" pos:end="187:16">-</operator><name pos:start="187:17" pos:end="187:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:14"><expr pos:start="191:5" pos:end="191:13"><call pos:start="191:5" pos:end="191:13"><name pos:start="191:5" pos:end="191:9">close</name><argument_list pos:start="191:10" pos:end="191:13">(<argument pos:start="191:11" pos:end="191:12"><expr pos:start="191:11" pos:end="191:12"><name pos:start="191:11" pos:end="191:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="193:5" pos:end="193:13">return <expr pos:start="193:12" pos:end="193:12"><literal type="number" pos:start="193:12" pos:end="193:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
