<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23869.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">virtio_blk_handle_scsi_req</name><parameter_list pos:start="1:38" pos:end="1:58">(<parameter pos:start="1:39" pos:end="1:57"><decl pos:start="1:39" pos:end="1:57"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:52">VirtIOBlockReq</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="203:1">{<block_content pos:start="5:5" pos:end="201:18">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">status</name> <init pos:start="5:16" pos:end="5:32">= <expr pos:start="5:18" pos:end="5:32"><name pos:start="5:18" pos:end="5:32">VIRTIO_BLK_S_OK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:30"><name pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:28">virtio_scsi_inhdr</name></name> <modifier pos:start="7:30" pos:end="7:30">*</modifier></type><name pos:start="7:31" pos:end="7:34">scsi</name> <init pos:start="7:36" pos:end="7:41">= <expr pos:start="7:38" pos:end="7:41"><name pos:start="7:38" pos:end="7:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">VirtIODevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">vdev</name> <init pos:start="9:24" pos:end="9:48">= <expr pos:start="9:26" pos:end="9:48"><call pos:start="9:26" pos:end="9:48"><name pos:start="9:26" pos:end="9:38">VIRTIO_DEVICE</name><argument_list pos:start="9:39" pos:end="9:48">(<argument pos:start="9:40" pos:end="9:47"><expr pos:start="9:40" pos:end="9:47"><name pos:start="9:40" pos:end="9:47"><name pos:start="9:40" pos:end="9:42">req</name><operator pos:start="9:43" pos:end="9:44">-&gt;</operator><name pos:start="9:45" pos:end="9:47">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">VirtQueueElement</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">elem</name> <init pos:start="11:28" pos:end="11:39">= <expr pos:start="11:30" pos:end="11:39"><operator pos:start="11:30" pos:end="11:30">&amp;</operator><name pos:start="11:31" pos:end="11:39"><name pos:start="11:31" pos:end="11:33">req</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:39">elem</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">VirtIOBlock</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">blk</name> <init pos:start="13:22" pos:end="13:31">= <expr pos:start="13:24" pos:end="13:31"><name pos:start="13:24" pos:end="13:31"><name pos:start="13:24" pos:end="13:26">req</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:31">dev</name></name></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="17:1" pos:end="17:16">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:16">__linux__</name></cpp:ifdef>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:23">VirtIOBlockIoctlReq</name> <modifier pos:start="21:25" pos:end="21:25">*</modifier></type><name pos:start="21:26" pos:end="21:34">ioctl_req</name></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="27:5" pos:end="39:7">/*

     * We require at least one output segment each for the virtio_blk_outhdr

     * and the SCSI command block.

     *

     * We also at least require the virtio_blk_inhdr, the virtio_scsi_inhdr

     * and the sense buffer pointer in the input segments.

     */</comment>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:46">(<expr pos:start="41:9" pos:end="41:45"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:12">elem</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:21">out_num</name></name> <operator pos:start="41:23" pos:end="41:23">&lt;</operator> <literal type="number" pos:start="41:25" pos:end="41:25">2</literal> <operator pos:start="41:27" pos:end="41:28">||</operator> <name pos:start="41:30" pos:end="41:41"><name pos:start="41:30" pos:end="41:33">elem</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:41">in_num</name></name> <operator pos:start="41:43" pos:end="41:43">&lt;</operator> <literal type="number" pos:start="41:45" pos:end="41:45">3</literal></expr>)</condition> <block pos:start="41:48" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:14">status</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:35">VIRTIO_BLK_S_IOERR</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:18">goto <name pos:start="45:14" pos:end="45:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="57:7">/*

     * The scsi inhdr is placed in the second-to-last input segment, just

     * before the regular inhdr.

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:58"><expr pos:start="59:5" pos:end="59:57"><name pos:start="59:5" pos:end="59:8">scsi</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <operator pos:start="59:12" pos:end="59:12">(</operator><name pos:start="59:13" pos:end="59:16">void</name> <operator pos:start="59:18" pos:end="59:18">*</operator><operator pos:start="59:19" pos:end="59:19">)</operator><name pos:start="59:20" pos:end="59:48"><name pos:start="59:20" pos:end="59:23">elem</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:30">in_sg</name><index pos:start="59:31" pos:end="59:48">[<expr pos:start="59:32" pos:end="59:47"><name pos:start="59:32" pos:end="59:43"><name pos:start="59:32" pos:end="59:35">elem</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:43">in_num</name></name> <operator pos:start="59:45" pos:end="59:45">-</operator> <literal type="number" pos:start="59:47" pos:end="59:47">2</literal></expr>]</index></name><operator pos:start="59:49" pos:end="59:49">.</operator><name pos:start="59:50" pos:end="59:57">iov_base</name></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:24">(<expr pos:start="63:9" pos:end="63:23"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:23"><name pos:start="63:10" pos:end="63:12">blk</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:18">conf</name><operator pos:start="63:19" pos:end="63:19">.</operator><name pos:start="63:20" pos:end="63:23">scsi</name></name></expr>)</condition> <block pos:start="63:26" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:14">status</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:36">VIRTIO_BLK_S_UNSUPP</name></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="77:7">/*

     * No support for bidirection commands yet.

     */</comment>

    <if_stmt pos:start="79:5" pos:end="90:0"><if pos:start="79:5" pos:end="90:0">if <condition pos:start="79:8" pos:end="79:46">(<expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:12">elem</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:21">out_num</name></name> <operator pos:start="79:23" pos:end="79:23">&gt;</operator> <literal type="number" pos:start="79:25" pos:end="79:25">2</literal> <operator pos:start="79:27" pos:end="79:28">&amp;&amp;</operator> <name pos:start="79:30" pos:end="79:41"><name pos:start="79:30" pos:end="79:33">elem</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:41">in_num</name></name> <operator pos:start="79:43" pos:end="79:43">&gt;</operator> <literal type="number" pos:start="79:45" pos:end="79:45">3</literal></expr>)</condition> <block pos:start="79:48" pos:end="90:0">{<block_content pos:start="81:9" pos:end="83:18">

        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:14">status</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <name pos:start="81:18" pos:end="81:36">VIRTIO_BLK_S_UNSUPP</name></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:18">goto <name pos:start="83:14" pos:end="83:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="89:1" pos:end="89:16">#<cpp:directive pos:start="89:2" pos:end="89:6">ifdef</cpp:directive> <name pos:start="89:8" pos:end="89:16">__linux__</name></cpp:ifdef>

    <expr_stmt pos:start="91:5" pos:end="91:47"><expr pos:start="91:5" pos:end="91:46"><name pos:start="91:5" pos:end="91:13">ioctl_req</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <call pos:start="91:17" pos:end="91:46"><name pos:start="91:17" pos:end="91:22">g_new0</name><argument_list pos:start="91:23" pos:end="91:46">(<argument pos:start="91:24" pos:end="91:42"><expr pos:start="91:24" pos:end="91:42"><name pos:start="91:24" pos:end="91:42">VirtIOBlockIoctlReq</name></expr></argument>, <argument pos:start="91:45" pos:end="91:45"><expr pos:start="91:45" pos:end="91:45"><literal type="number" pos:start="91:45" pos:end="91:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:25"><expr pos:start="93:5" pos:end="93:24"><name pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:13">ioctl_req</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:18">req</name></name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:24">req</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:38"><expr pos:start="95:5" pos:end="95:37"><name pos:start="95:5" pos:end="95:31"><name pos:start="95:5" pos:end="95:13">ioctl_req</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:18">hdr</name><operator pos:start="95:19" pos:end="95:19">.</operator><name pos:start="95:20" pos:end="95:31">interface_id</name></name> <operator pos:start="95:33" pos:end="95:33">=</operator> <literal type="char" pos:start="95:35" pos:end="95:37">'S'</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:53"><expr pos:start="97:5" pos:end="97:52"><name pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:13">ioctl_req</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:18">hdr</name><operator pos:start="97:19" pos:end="97:19">.</operator><name pos:start="97:20" pos:end="97:26">cmd_len</name></name> <operator pos:start="97:28" pos:end="97:28">=</operator> <name pos:start="97:30" pos:end="97:44"><name pos:start="97:30" pos:end="97:33">elem</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:41">out_sg</name><index pos:start="97:42" pos:end="97:44">[<expr pos:start="97:43" pos:end="97:43"><literal type="number" pos:start="97:43" pos:end="97:43">1</literal></expr>]</index></name><operator pos:start="97:45" pos:end="97:45">.</operator><name pos:start="97:46" pos:end="97:52">iov_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:51"><expr pos:start="99:5" pos:end="99:50"><name pos:start="99:5" pos:end="99:23"><name pos:start="99:5" pos:end="99:13">ioctl_req</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:18">hdr</name><operator pos:start="99:19" pos:end="99:19">.</operator><name pos:start="99:20" pos:end="99:23">cmdp</name></name> <operator pos:start="99:25" pos:end="99:25">=</operator> <name pos:start="99:27" pos:end="99:41"><name pos:start="99:27" pos:end="99:30">elem</name><operator pos:start="99:31" pos:end="99:32">-&gt;</operator><name pos:start="99:33" pos:end="99:38">out_sg</name><index pos:start="99:39" pos:end="99:41">[<expr pos:start="99:40" pos:end="99:40"><literal type="number" pos:start="99:40" pos:end="99:40">1</literal></expr>]</index></name><operator pos:start="99:42" pos:end="99:42">.</operator><name pos:start="99:43" pos:end="99:50">iov_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:33"><expr pos:start="101:5" pos:end="101:32"><name pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:13">ioctl_req</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:18">hdr</name><operator pos:start="101:19" pos:end="101:19">.</operator><name pos:start="101:20" pos:end="101:28">dxfer_len</name></name> <operator pos:start="101:30" pos:end="101:30">=</operator> <literal type="number" pos:start="101:32" pos:end="101:32">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="167:5"><if pos:start="105:5" pos:end="133:5">if <condition pos:start="105:8" pos:end="105:26">(<expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:12">elem</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:21">out_num</name></name> <operator pos:start="105:23" pos:end="105:23">&gt;</operator> <literal type="number" pos:start="105:25" pos:end="105:25">2</literal></expr>)</condition> <block pos:start="105:28" pos:end="133:5">{<block_content pos:start="115:9" pos:end="129:49">

        <comment type="block" pos:start="107:9" pos:end="113:11">/*

         * If there are more than the minimally required 2 output segments

         * there is write payload starting from the third iovec.

         */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:57"><expr pos:start="115:9" pos:end="115:56"><name pos:start="115:9" pos:end="115:38"><name pos:start="115:9" pos:end="115:17">ioctl_req</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:22">hdr</name><operator pos:start="115:23" pos:end="115:23">.</operator><name pos:start="115:24" pos:end="115:38">dxfer_direction</name></name> <operator pos:start="115:40" pos:end="115:40">=</operator> <name pos:start="115:42" pos:end="115:56">SG_DXFER_TO_DEV</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:55"><expr pos:start="117:9" pos:end="117:54"><name pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:17">ioctl_req</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:22">hdr</name><operator pos:start="117:23" pos:end="117:23">.</operator><name pos:start="117:24" pos:end="117:34">iovec_count</name></name> <operator pos:start="117:36" pos:end="117:36">=</operator> <name pos:start="117:38" pos:end="117:50"><name pos:start="117:38" pos:end="117:41">elem</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:50">out_num</name></name> <operator pos:start="117:52" pos:end="117:52">-</operator> <literal type="number" pos:start="117:54" pos:end="117:54">2</literal></expr>;</expr_stmt>



        <for pos:start="121:9" pos:end="125:9">for <control pos:start="121:13" pos:end="121:56">(<init pos:start="121:14" pos:end="121:19"><expr pos:start="121:14" pos:end="121:18"><name pos:start="121:14" pos:end="121:14">i</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <literal type="number" pos:start="121:18" pos:end="121:18">0</literal></expr>;</init> <condition pos:start="121:21" pos:end="121:51"><expr pos:start="121:21" pos:end="121:50"><name pos:start="121:21" pos:end="121:21">i</name> <operator pos:start="121:23" pos:end="121:23">&lt;</operator> <name pos:start="121:25" pos:end="121:50"><name pos:start="121:25" pos:end="121:33">ioctl_req</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:38">hdr</name><operator pos:start="121:39" pos:end="121:39">.</operator><name pos:start="121:40" pos:end="121:50">iovec_count</name></name></expr>;</condition> <incr pos:start="121:53" pos:end="121:55"><expr pos:start="121:53" pos:end="121:55"><name pos:start="121:53" pos:end="121:53">i</name><operator pos:start="121:54" pos:end="121:55">++</operator></expr></incr>)</control> <block pos:start="121:58" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:68">

            <expr_stmt pos:start="123:13" pos:end="123:68"><expr pos:start="123:13" pos:end="123:67"><name pos:start="123:13" pos:end="123:36"><name pos:start="123:13" pos:end="123:21">ioctl_req</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:26">hdr</name><operator pos:start="123:27" pos:end="123:27">.</operator><name pos:start="123:28" pos:end="123:36">dxfer_len</name></name> <operator pos:start="123:38" pos:end="123:39">+=</operator> <name pos:start="123:41" pos:end="123:59"><name pos:start="123:41" pos:end="123:44">elem</name><operator pos:start="123:45" pos:end="123:46">-&gt;</operator><name pos:start="123:47" pos:end="123:52">out_sg</name><index pos:start="123:53" pos:end="123:59">[<expr pos:start="123:54" pos:end="123:58"><name pos:start="123:54" pos:end="123:54">i</name> <operator pos:start="123:56" pos:end="123:56">+</operator> <literal type="number" pos:start="123:58" pos:end="123:58">2</literal></expr>]</index></name><operator pos:start="123:60" pos:end="123:60">.</operator><name pos:start="123:61" pos:end="123:67">iov_len</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="129:9" pos:end="129:49"><expr pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:17">ioctl_req</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:22">hdr</name><operator pos:start="129:23" pos:end="129:23">.</operator><name pos:start="129:24" pos:end="129:29">dxferp</name></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <name pos:start="129:33" pos:end="129:44"><name pos:start="129:33" pos:end="129:36">elem</name><operator pos:start="129:37" pos:end="129:38">-&gt;</operator><name pos:start="129:39" pos:end="129:44">out_sg</name></name> <operator pos:start="129:46" pos:end="129:46">+</operator> <literal type="number" pos:start="129:48" pos:end="129:48">2</literal></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="133:7" pos:end="157:5">else if <condition pos:start="133:15" pos:end="133:32">(<expr pos:start="133:16" pos:end="133:31"><name pos:start="133:16" pos:end="133:27"><name pos:start="133:16" pos:end="133:19">elem</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:27">in_num</name></name> <operator pos:start="133:29" pos:end="133:29">&gt;</operator> <literal type="number" pos:start="133:31" pos:end="133:31">3</literal></expr>)</condition> <block pos:start="133:34" pos:end="157:5">{<block_content pos:start="143:9" pos:end="155:44">

        <comment type="block" pos:start="135:9" pos:end="141:11">/*

         * If we have more than 3 input segments the guest wants to actually

         * read data.

         */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:59"><expr pos:start="143:9" pos:end="143:58"><name pos:start="143:9" pos:end="143:38"><name pos:start="143:9" pos:end="143:17">ioctl_req</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:22">hdr</name><operator pos:start="143:23" pos:end="143:23">.</operator><name pos:start="143:24" pos:end="143:38">dxfer_direction</name></name> <operator pos:start="143:40" pos:end="143:40">=</operator> <name pos:start="143:42" pos:end="143:58">SG_DXFER_FROM_DEV</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:54"><expr pos:start="145:9" pos:end="145:53"><name pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:17">ioctl_req</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:22">hdr</name><operator pos:start="145:23" pos:end="145:23">.</operator><name pos:start="145:24" pos:end="145:34">iovec_count</name></name> <operator pos:start="145:36" pos:end="145:36">=</operator> <name pos:start="145:38" pos:end="145:49"><name pos:start="145:38" pos:end="145:41">elem</name><operator pos:start="145:42" pos:end="145:43">-&gt;</operator><name pos:start="145:44" pos:end="145:49">in_num</name></name> <operator pos:start="145:51" pos:end="145:51">-</operator> <literal type="number" pos:start="145:53" pos:end="145:53">3</literal></expr>;</expr_stmt>

        <for pos:start="147:9" pos:end="151:9">for <control pos:start="147:13" pos:end="147:56">(<init pos:start="147:14" pos:end="147:19"><expr pos:start="147:14" pos:end="147:18"><name pos:start="147:14" pos:end="147:14">i</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <literal type="number" pos:start="147:18" pos:end="147:18">0</literal></expr>;</init> <condition pos:start="147:21" pos:end="147:51"><expr pos:start="147:21" pos:end="147:50"><name pos:start="147:21" pos:end="147:21">i</name> <operator pos:start="147:23" pos:end="147:23">&lt;</operator> <name pos:start="147:25" pos:end="147:50"><name pos:start="147:25" pos:end="147:33">ioctl_req</name><operator pos:start="147:34" pos:end="147:35">-&gt;</operator><name pos:start="147:36" pos:end="147:38">hdr</name><operator pos:start="147:39" pos:end="147:39">.</operator><name pos:start="147:40" pos:end="147:50">iovec_count</name></name></expr>;</condition> <incr pos:start="147:53" pos:end="147:55"><expr pos:start="147:53" pos:end="147:55"><name pos:start="147:53" pos:end="147:53">i</name><operator pos:start="147:54" pos:end="147:55">++</operator></expr></incr>)</control> <block pos:start="147:58" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:63">

            <expr_stmt pos:start="149:13" pos:end="149:63"><expr pos:start="149:13" pos:end="149:62"><name pos:start="149:13" pos:end="149:36"><name pos:start="149:13" pos:end="149:21">ioctl_req</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:26">hdr</name><operator pos:start="149:27" pos:end="149:27">.</operator><name pos:start="149:28" pos:end="149:36">dxfer_len</name></name> <operator pos:start="149:38" pos:end="149:39">+=</operator> <name pos:start="149:41" pos:end="149:54"><name pos:start="149:41" pos:end="149:44">elem</name><operator pos:start="149:45" pos:end="149:46">-&gt;</operator><name pos:start="149:47" pos:end="149:51">in_sg</name><index pos:start="149:52" pos:end="149:54">[<expr pos:start="149:53" pos:end="149:53"><name pos:start="149:53" pos:end="149:53">i</name></expr>]</index></name><operator pos:start="149:55" pos:end="149:55">.</operator><name pos:start="149:56" pos:end="149:62">iov_len</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="155:9" pos:end="155:44"><expr pos:start="155:9" pos:end="155:43"><name pos:start="155:9" pos:end="155:29"><name pos:start="155:9" pos:end="155:17">ioctl_req</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:22">hdr</name><operator pos:start="155:23" pos:end="155:23">.</operator><name pos:start="155:24" pos:end="155:29">dxferp</name></name> <operator pos:start="155:31" pos:end="155:31">=</operator> <name pos:start="155:33" pos:end="155:43"><name pos:start="155:33" pos:end="155:36">elem</name><operator pos:start="155:37" pos:end="155:38">-&gt;</operator><name pos:start="155:39" pos:end="155:43">in_sg</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="157:7" pos:end="167:5">else <block pos:start="157:12" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:55">

        <comment type="block" pos:start="159:9" pos:end="163:11">/*

         * Some SCSI commands don't actually transfer any data.

         */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:55"><expr pos:start="165:9" pos:end="165:54"><name pos:start="165:9" pos:end="165:38"><name pos:start="165:9" pos:end="165:17">ioctl_req</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:22">hdr</name><operator pos:start="165:23" pos:end="165:23">.</operator><name pos:start="165:24" pos:end="165:38">dxfer_direction</name></name> <operator pos:start="165:40" pos:end="165:40">=</operator> <name pos:start="165:42" pos:end="165:54">SG_DXFER_NONE</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:64"><expr pos:start="171:5" pos:end="171:63"><name pos:start="171:5" pos:end="171:22"><name pos:start="171:5" pos:end="171:13">ioctl_req</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:18">hdr</name><operator pos:start="171:19" pos:end="171:19">.</operator><name pos:start="171:20" pos:end="171:22">sbp</name></name> <operator pos:start="171:24" pos:end="171:24">=</operator> <name pos:start="171:26" pos:end="171:54"><name pos:start="171:26" pos:end="171:29">elem</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:36">in_sg</name><index pos:start="171:37" pos:end="171:54">[<expr pos:start="171:38" pos:end="171:53"><name pos:start="171:38" pos:end="171:49"><name pos:start="171:38" pos:end="171:41">elem</name><operator pos:start="171:42" pos:end="171:43">-&gt;</operator><name pos:start="171:44" pos:end="171:49">in_num</name></name> <operator pos:start="171:51" pos:end="171:51">-</operator> <literal type="number" pos:start="171:53" pos:end="171:53">3</literal></expr>]</index></name><operator pos:start="171:55" pos:end="171:55">.</operator><name pos:start="171:56" pos:end="171:63">iov_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:69"><expr pos:start="173:5" pos:end="173:68"><name pos:start="173:5" pos:end="173:28"><name pos:start="173:5" pos:end="173:13">ioctl_req</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:18">hdr</name><operator pos:start="173:19" pos:end="173:19">.</operator><name pos:start="173:20" pos:end="173:28">mx_sb_len</name></name> <operator pos:start="173:30" pos:end="173:30">=</operator> <name pos:start="173:32" pos:end="173:60"><name pos:start="173:32" pos:end="173:35">elem</name><operator pos:start="173:36" pos:end="173:37">-&gt;</operator><name pos:start="173:38" pos:end="173:42">in_sg</name><index pos:start="173:43" pos:end="173:60">[<expr pos:start="173:44" pos:end="173:59"><name pos:start="173:44" pos:end="173:55"><name pos:start="173:44" pos:end="173:47">elem</name><operator pos:start="173:48" pos:end="173:49">-&gt;</operator><name pos:start="173:50" pos:end="173:55">in_num</name></name> <operator pos:start="173:57" pos:end="173:57">-</operator> <literal type="number" pos:start="173:59" pos:end="173:59">3</literal></expr>]</index></name><operator pos:start="173:61" pos:end="173:61">.</operator><name pos:start="173:62" pos:end="173:68">iov_len</name></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="179:56"><expr pos:start="177:5" pos:end="179:55"><call pos:start="177:5" pos:end="179:55"><name pos:start="177:5" pos:end="177:17">blk_aio_ioctl</name><argument_list pos:start="177:18" pos:end="179:55">(<argument pos:start="177:19" pos:end="177:26"><expr pos:start="177:19" pos:end="177:26"><name pos:start="177:19" pos:end="177:26"><name pos:start="177:19" pos:end="177:21">blk</name><operator pos:start="177:22" pos:end="177:23">-&gt;</operator><name pos:start="177:24" pos:end="177:26">blk</name></name></expr></argument>, <argument pos:start="177:29" pos:end="177:33"><expr pos:start="177:29" pos:end="177:33"><name pos:start="177:29" pos:end="177:33">SG_IO</name></expr></argument>, <argument pos:start="177:36" pos:end="177:50"><expr pos:start="177:36" pos:end="177:50"><operator pos:start="177:36" pos:end="177:36">&amp;</operator><name pos:start="177:37" pos:end="177:50"><name pos:start="177:37" pos:end="177:45">ioctl_req</name><operator pos:start="177:46" pos:end="177:47">-&gt;</operator><name pos:start="177:48" pos:end="177:50">hdr</name></name></expr></argument>,

                  <argument pos:start="179:19" pos:end="179:43"><expr pos:start="179:19" pos:end="179:43"><name pos:start="179:19" pos:end="179:43">virtio_blk_ioctl_complete</name></expr></argument>, <argument pos:start="179:46" pos:end="179:54"><expr pos:start="179:46" pos:end="179:54"><name pos:start="179:46" pos:end="179:54">ioctl_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="181:5" pos:end="184:0">return <expr pos:start="181:12" pos:end="181:23"><operator pos:start="181:12" pos:end="181:12">-</operator><name pos:start="181:13" pos:end="181:23">EINPROGRESS</name></expr>;</return>

<cpp:else pos:start="183:1" pos:end="183:5">#<cpp:directive pos:start="183:2" pos:end="183:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="185:5" pos:end="188:0"><expr pos:start="185:5" pos:end="185:11"><call pos:start="185:5" pos:end="185:11"><name pos:start="185:5" pos:end="185:9">abort</name><argument_list pos:start="185:10" pos:end="185:11">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="187:1" pos:end="187:6">#<cpp:directive pos:start="187:2" pos:end="187:6">endif</cpp:directive></cpp:endif>



<label pos:start="191:1" pos:end="191:5"><name pos:start="191:1" pos:end="191:4">fail</name>:</label>

    <comment type="block" pos:start="193:5" pos:end="193:74">/* Just put anything nonzero so that the ioctl fails in the guest.  */</comment>

    <if_stmt pos:start="195:5" pos:end="199:5"><if pos:start="195:5" pos:end="199:5">if <condition pos:start="195:8" pos:end="195:13">(<expr pos:start="195:9" pos:end="195:12"><name pos:start="195:9" pos:end="195:12">scsi</name></expr>)</condition> <block pos:start="195:15" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:47">

        <expr_stmt pos:start="197:9" pos:end="197:47"><expr pos:start="197:9" pos:end="197:46"><call pos:start="197:9" pos:end="197:46"><name pos:start="197:9" pos:end="197:20">virtio_stl_p</name><argument_list pos:start="197:21" pos:end="197:46">(<argument pos:start="197:22" pos:end="197:25"><expr pos:start="197:22" pos:end="197:25"><name pos:start="197:22" pos:end="197:25">vdev</name></expr></argument>, <argument pos:start="197:28" pos:end="197:40"><expr pos:start="197:28" pos:end="197:40"><operator pos:start="197:28" pos:end="197:28">&amp;</operator><name pos:start="197:29" pos:end="197:40"><name pos:start="197:29" pos:end="197:32">scsi</name><operator pos:start="197:33" pos:end="197:34">-&gt;</operator><name pos:start="197:35" pos:end="197:40">errors</name></name></expr></argument>, <argument pos:start="197:43" pos:end="197:45"><expr pos:start="197:43" pos:end="197:45"><literal type="number" pos:start="197:43" pos:end="197:45">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="201:5" pos:end="201:18">return <expr pos:start="201:12" pos:end="201:17"><name pos:start="201:12" pos:end="201:17">status</name></expr>;</return>

</block_content>}</block></function>
</unit>
