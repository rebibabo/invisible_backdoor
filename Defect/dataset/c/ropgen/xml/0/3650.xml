<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3650.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">parse_numa_opts</name><parameter_list pos:start="1:21" pos:end="1:38">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">MachineClass</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">mc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="191:1">{<block_content pos:start="5:5" pos:end="189:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:74">(<expr pos:start="9:9" pos:end="9:73"><call pos:start="9:9" pos:end="9:73"><name pos:start="9:9" pos:end="9:25">qemu_opts_foreach</name><argument_list pos:start="9:26" pos:end="9:73">(<argument pos:start="9:27" pos:end="9:48"><expr pos:start="9:27" pos:end="9:48"><call pos:start="9:27" pos:end="9:48"><name pos:start="9:27" pos:end="9:40">qemu_find_opts</name><argument_list pos:start="9:41" pos:end="9:48">(<argument pos:start="9:42" pos:end="9:47"><expr pos:start="9:42" pos:end="9:47"><literal type="string" pos:start="9:42" pos:end="9:47">"numa"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="9:51" pos:end="9:60"><expr pos:start="9:51" pos:end="9:60"><name pos:start="9:51" pos:end="9:60">parse_numa</name></expr></argument>, <argument pos:start="9:63" pos:end="9:66"><expr pos:start="9:63" pos:end="9:66"><name pos:start="9:63" pos:end="9:66">NULL</name></expr></argument>, <argument pos:start="9:69" pos:end="9:72"><expr pos:start="9:69" pos:end="9:72"><name pos:start="9:69" pos:end="9:72">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:76" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:16">

        <expr_stmt pos:start="11:9" pos:end="11:16"><expr pos:start="11:9" pos:end="11:15"><call pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:12">exit</name><argument_list pos:start="11:13" pos:end="11:15">(<argument pos:start="11:14" pos:end="11:14"><expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><call pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:40">(<argument pos:start="17:12" pos:end="17:39"><expr pos:start="17:12" pos:end="17:39"><name pos:start="17:12" pos:end="17:26">max_numa_nodeid</name> <operator pos:start="17:28" pos:end="17:29">&lt;=</operator> <name pos:start="17:31" pos:end="17:39">MAX_NODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:50">/* No support for sparse NUMA node IDs yet: */</comment>

    <for pos:start="23:5" pos:end="35:5">for <control pos:start="23:9" pos:end="23:46">(<init pos:start="23:10" pos:end="23:33"><expr pos:start="23:10" pos:end="23:32"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:28">max_numa_nodeid</name> <operator pos:start="23:30" pos:end="23:30">-</operator> <literal type="number" pos:start="23:32" pos:end="23:32">1</literal></expr>;</init> <condition pos:start="23:35" pos:end="23:41"><expr pos:start="23:35" pos:end="23:40"><name pos:start="23:35" pos:end="23:35">i</name> <operator pos:start="23:37" pos:end="23:38">&gt;=</operator> <literal type="number" pos:start="23:40" pos:end="23:40">0</literal></expr>;</condition> <incr pos:start="23:43" pos:end="23:45"><expr pos:start="23:43" pos:end="23:45"><name pos:start="23:43" pos:end="23:43">i</name><operator pos:start="23:44" pos:end="23:45">--</operator></expr></incr>)</control> <block pos:start="23:48" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:9">

        <comment type="block" pos:start="25:9" pos:end="25:74">/* Report large node IDs first, to make mistakes easier to spot */</comment>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:34">(<expr pos:start="27:13" pos:end="27:33"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:25"><name pos:start="27:14" pos:end="27:22">numa_info</name><index pos:start="27:23" pos:end="27:25">[<expr pos:start="27:24" pos:end="27:24"><name pos:start="27:24" pos:end="27:24">i</name></expr>]</index></name><operator pos:start="27:26" pos:end="27:26">.</operator><name pos:start="27:27" pos:end="27:33">present</name></expr>)</condition> <block pos:start="27:36" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:20">

            <expr_stmt pos:start="29:13" pos:end="29:57"><expr pos:start="29:13" pos:end="29:56"><call pos:start="29:13" pos:end="29:56"><name pos:start="29:13" pos:end="29:24">error_report</name><argument_list pos:start="29:25" pos:end="29:56">(<argument pos:start="29:26" pos:end="29:52"><expr pos:start="29:26" pos:end="29:52"><literal type="string" pos:start="29:26" pos:end="29:52">"numa: Node ID missing: %d"</literal></expr></argument>, <argument pos:start="29:55" pos:end="29:55"><expr pos:start="29:55" pos:end="29:55"><name pos:start="29:55" pos:end="29:55">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:20"><expr pos:start="31:13" pos:end="31:19"><call pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:16">exit</name><argument_list pos:start="31:17" pos:end="31:19">(<argument pos:start="31:18" pos:end="31:18"><expr pos:start="31:18" pos:end="31:18"><literal type="number" pos:start="31:18" pos:end="31:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="39:5" pos:end="39:60">/* This must be always true if all nodes are present: */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:45"><expr pos:start="41:5" pos:end="41:44"><call pos:start="41:5" pos:end="41:44"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:44">(<argument pos:start="41:12" pos:end="41:43"><expr pos:start="41:12" pos:end="41:43"><name pos:start="41:12" pos:end="41:24">nb_numa_nodes</name> <operator pos:start="41:26" pos:end="41:27">==</operator> <name pos:start="41:29" pos:end="41:43">max_numa_nodeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="189:5"><if pos:start="45:5" pos:end="185:5">if <condition pos:start="45:8" pos:end="45:26">(<expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:21">nb_numa_nodes</name> <operator pos:start="45:23" pos:end="45:23">&gt;</operator> <literal type="number" pos:start="45:25" pos:end="45:25">0</literal></expr>)</condition> <block pos:start="45:28" pos:end="185:5">{<block_content pos:start="47:9" pos:end="183:29">

        <decl_stmt pos:start="47:9" pos:end="47:28"><decl pos:start="47:9" pos:end="47:27"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">uint64_t</name></type> <name pos:start="47:18" pos:end="47:27">numa_total</name></decl>;</decl_stmt>



        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:38">(<expr pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:25">nb_numa_nodes</name> <operator pos:start="51:27" pos:end="51:27">&gt;</operator> <name pos:start="51:29" pos:end="51:37">MAX_NODES</name></expr>)</condition> <block pos:start="51:40" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:38">

            <expr_stmt pos:start="53:13" pos:end="53:38"><expr pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:25">nb_numa_nodes</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <name pos:start="53:29" pos:end="53:37">MAX_NODES</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="59:9" pos:end="63:11">/* If no memory size is given for any node, assume the default case

         * and distribute the available memory equally across all nodes

         */</comment>

        <for pos:start="65:9" pos:end="73:9">for <control pos:start="65:13" pos:end="65:43">(<init pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">i</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:38"><expr pos:start="65:21" pos:end="65:37"><name pos:start="65:21" pos:end="65:21">i</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <name pos:start="65:25" pos:end="65:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="65:40" pos:end="65:42"><expr pos:start="65:40" pos:end="65:42"><name pos:start="65:40" pos:end="65:40">i</name><operator pos:start="65:41" pos:end="65:42">++</operator></expr></incr>)</control> <block pos:start="65:45" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:13">

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:43">(<expr pos:start="67:17" pos:end="67:42"><name pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:25">numa_info</name><index pos:start="67:26" pos:end="67:28">[<expr pos:start="67:27" pos:end="67:27"><name pos:start="67:27" pos:end="67:27">i</name></expr>]</index></name><operator pos:start="67:29" pos:end="67:29">.</operator><name pos:start="67:30" pos:end="67:37">node_mem</name> <operator pos:start="67:39" pos:end="67:40">!=</operator> <literal type="number" pos:start="67:42" pos:end="67:42">0</literal></expr>)</condition> <block pos:start="67:45" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:22">

                <break pos:start="69:17" pos:end="69:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="75:9" pos:end="99:9"><if pos:start="75:9" pos:end="99:9">if <condition pos:start="75:12" pos:end="75:31">(<expr pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:13">i</name> <operator pos:start="75:15" pos:end="75:16">==</operator> <name pos:start="75:18" pos:end="75:30">nb_numa_nodes</name></expr>)</condition> <block pos:start="75:33" pos:end="99:9">{<block_content pos:start="77:13" pos:end="97:55">

            <decl_stmt pos:start="77:13" pos:end="77:33"><decl pos:start="77:13" pos:end="77:32"><type pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:20">uint64_t</name></type> <name pos:start="77:22" pos:end="77:28">usedmem</name> <init pos:start="77:30" pos:end="77:32">= <expr pos:start="77:32" pos:end="77:32"><literal type="number" pos:start="77:32" pos:end="77:32">0</literal></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="81:13" pos:end="85:15">/* On Linux, each node's border has to be 8MB aligned,

             * the final node gets the rest.

             */</comment>

            <for pos:start="87:13" pos:end="95:13">for <control pos:start="87:17" pos:end="87:51">(<init pos:start="87:18" pos:end="87:23"><expr pos:start="87:18" pos:end="87:22"><name pos:start="87:18" pos:end="87:18">i</name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>;</init> <condition pos:start="87:25" pos:end="87:46"><expr pos:start="87:25" pos:end="87:45"><name pos:start="87:25" pos:end="87:25">i</name> <operator pos:start="87:27" pos:end="87:27">&lt;</operator> <name pos:start="87:29" pos:end="87:41">nb_numa_nodes</name> <operator pos:start="87:43" pos:end="87:43">-</operator> <literal type="number" pos:start="87:45" pos:end="87:45">1</literal></expr>;</condition> <incr pos:start="87:48" pos:end="87:50"><expr pos:start="87:48" pos:end="87:50"><name pos:start="87:48" pos:end="87:48">i</name><operator pos:start="87:49" pos:end="87:50">++</operator></expr></incr>)</control> <block pos:start="87:53" pos:end="95:13">{<block_content pos:start="89:17" pos:end="93:49">

                <expr_stmt pos:start="89:17" pos:end="91:59"><expr pos:start="89:17" pos:end="91:58"><name pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:25">numa_info</name><index pos:start="89:26" pos:end="89:28">[<expr pos:start="89:27" pos:end="89:27"><name pos:start="89:27" pos:end="89:27">i</name></expr>]</index></name><operator pos:start="89:29" pos:end="89:29">.</operator><name pos:start="89:30" pos:end="89:37">node_mem</name> <operator pos:start="89:39" pos:end="89:39">=</operator> <operator pos:start="89:41" pos:end="89:41">(</operator><name pos:start="89:42" pos:end="89:49">ram_size</name> <operator pos:start="89:51" pos:end="89:51">/</operator> <name pos:start="89:53" pos:end="89:65">nb_numa_nodes</name><operator pos:start="89:66" pos:end="89:66">)</operator> <operator pos:start="89:68" pos:end="89:68">&amp;</operator>

                                        <operator pos:start="91:41" pos:end="91:41">~</operator><operator pos:start="91:42" pos:end="91:42">(</operator><operator pos:start="91:43" pos:end="91:43">(</operator><literal type="number" pos:start="91:44" pos:end="91:44">1</literal> <operator pos:start="91:46" pos:end="91:47">&lt;&lt;</operator> <literal type="number" pos:start="91:49" pos:end="91:52">23UL</literal><operator pos:start="91:53" pos:end="91:53">)</operator> <operator pos:start="91:55" pos:end="91:55">-</operator> <literal type="number" pos:start="91:57" pos:end="91:57">1</literal><operator pos:start="91:58" pos:end="91:58">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:49"><expr pos:start="93:17" pos:end="93:48"><name pos:start="93:17" pos:end="93:23">usedmem</name> <operator pos:start="93:25" pos:end="93:26">+=</operator> <name pos:start="93:28" pos:end="93:39"><name pos:start="93:28" pos:end="93:36">numa_info</name><index pos:start="93:37" pos:end="93:39">[<expr pos:start="93:38" pos:end="93:38"><name pos:start="93:38" pos:end="93:38">i</name></expr>]</index></name><operator pos:start="93:40" pos:end="93:40">.</operator><name pos:start="93:41" pos:end="93:48">node_mem</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="97:13" pos:end="97:55"><expr pos:start="97:13" pos:end="97:54"><name pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:21">numa_info</name><index pos:start="97:22" pos:end="97:24">[<expr pos:start="97:23" pos:end="97:23"><name pos:start="97:23" pos:end="97:23">i</name></expr>]</index></name><operator pos:start="97:25" pos:end="97:25">.</operator><name pos:start="97:26" pos:end="97:33">node_mem</name> <operator pos:start="97:35" pos:end="97:35">=</operator> <name pos:start="97:37" pos:end="97:44">ram_size</name> <operator pos:start="97:46" pos:end="97:46">-</operator> <name pos:start="97:48" pos:end="97:54">usedmem</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:23"><expr pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:18">numa_total</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <literal type="number" pos:start="103:22" pos:end="103:22">0</literal></expr>;</expr_stmt>

        <for pos:start="105:9" pos:end="109:9">for <control pos:start="105:13" pos:end="105:43">(<init pos:start="105:14" pos:end="105:19"><expr pos:start="105:14" pos:end="105:18"><name pos:start="105:14" pos:end="105:14">i</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <literal type="number" pos:start="105:18" pos:end="105:18">0</literal></expr>;</init> <condition pos:start="105:21" pos:end="105:38"><expr pos:start="105:21" pos:end="105:37"><name pos:start="105:21" pos:end="105:21">i</name> <operator pos:start="105:23" pos:end="105:23">&lt;</operator> <name pos:start="105:25" pos:end="105:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="105:40" pos:end="105:42"><expr pos:start="105:40" pos:end="105:42"><name pos:start="105:40" pos:end="105:40">i</name><operator pos:start="105:41" pos:end="105:42">++</operator></expr></incr>)</control> <block pos:start="105:45" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:48">

            <expr_stmt pos:start="107:13" pos:end="107:48"><expr pos:start="107:13" pos:end="107:47"><name pos:start="107:13" pos:end="107:22">numa_total</name> <operator pos:start="107:24" pos:end="107:25">+=</operator> <name pos:start="107:27" pos:end="107:38"><name pos:start="107:27" pos:end="107:35">numa_info</name><index pos:start="107:36" pos:end="107:38">[<expr pos:start="107:37" pos:end="107:37"><name pos:start="107:37" pos:end="107:37">i</name></expr>]</index></name><operator pos:start="107:39" pos:end="107:39">.</operator><name pos:start="107:40" pos:end="107:47">node_mem</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="111:9" pos:end="121:9"><if pos:start="111:9" pos:end="121:9">if <condition pos:start="111:12" pos:end="111:35">(<expr pos:start="111:13" pos:end="111:34"><name pos:start="111:13" pos:end="111:22">numa_total</name> <operator pos:start="111:24" pos:end="111:25">!=</operator> <name pos:start="111:27" pos:end="111:34">ram_size</name></expr>)</condition> <block pos:start="111:37" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:20">

            <expr_stmt pos:start="113:13" pos:end="117:47"><expr pos:start="113:13" pos:end="117:46"><call pos:start="113:13" pos:end="117:46"><name pos:start="113:13" pos:end="113:24">error_report</name><argument_list pos:start="113:25" pos:end="117:46">(<argument pos:start="113:26" pos:end="115:70"><expr pos:start="113:26" pos:end="115:70"><literal type="string" pos:start="113:26" pos:end="113:59">"total memory for NUMA nodes (0x%"</literal> <name pos:start="113:61" pos:end="113:66">PRIx64</name> <literal type="string" pos:start="113:68" pos:end="113:70">")"</literal>

                         <literal type="string" pos:start="115:26" pos:end="115:53">" should equal RAM size (0x"</literal> <name pos:start="115:55" pos:end="115:66">RAM_ADDR_FMT</name> <literal type="string" pos:start="115:68" pos:end="115:70">")"</literal></expr></argument>,

                         <argument pos:start="117:26" pos:end="117:35"><expr pos:start="117:26" pos:end="117:35"><name pos:start="117:26" pos:end="117:35">numa_total</name></expr></argument>, <argument pos:start="117:38" pos:end="117:45"><expr pos:start="117:38" pos:end="117:45"><name pos:start="117:38" pos:end="117:45">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:20"><expr pos:start="119:13" pos:end="119:19"><call pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:16">exit</name><argument_list pos:start="119:17" pos:end="119:19">(<argument pos:start="119:18" pos:end="119:18"><expr pos:start="119:18" pos:end="119:18"><literal type="number" pos:start="119:18" pos:end="119:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="125:9" pos:end="129:9">for <control pos:start="125:13" pos:end="125:43">(<init pos:start="125:14" pos:end="125:19"><expr pos:start="125:14" pos:end="125:18"><name pos:start="125:14" pos:end="125:14">i</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>;</init> <condition pos:start="125:21" pos:end="125:38"><expr pos:start="125:21" pos:end="125:37"><name pos:start="125:21" pos:end="125:21">i</name> <operator pos:start="125:23" pos:end="125:23">&lt;</operator> <name pos:start="125:25" pos:end="125:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="125:40" pos:end="125:42"><expr pos:start="125:40" pos:end="125:42"><name pos:start="125:40" pos:end="125:40">i</name><operator pos:start="125:41" pos:end="125:42">++</operator></expr></incr>)</control> <block pos:start="125:45" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:43">

            <expr_stmt pos:start="127:13" pos:end="127:43"><expr pos:start="127:13" pos:end="127:42"><call pos:start="127:13" pos:end="127:42"><name pos:start="127:13" pos:end="127:22">QLIST_INIT</name><argument_list pos:start="127:23" pos:end="127:42">(<argument pos:start="127:24" pos:end="127:41"><expr pos:start="127:24" pos:end="127:41"><operator pos:start="127:24" pos:end="127:24">&amp;</operator><name pos:start="127:25" pos:end="127:36"><name pos:start="127:25" pos:end="127:33">numa_info</name><index pos:start="127:34" pos:end="127:36">[<expr pos:start="127:35" pos:end="127:35"><name pos:start="127:35" pos:end="127:35">i</name></expr>]</index></name><operator pos:start="127:37" pos:end="127:37">.</operator><name pos:start="127:38" pos:end="127:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="133:9" pos:end="133:30"><expr pos:start="133:9" pos:end="133:29"><call pos:start="133:9" pos:end="133:29"><name pos:start="133:9" pos:end="133:27">numa_set_mem_ranges</name><argument_list pos:start="133:28" pos:end="133:29">()</argument_list></call></expr>;</expr_stmt>



        <for pos:start="137:9" pos:end="145:9">for <control pos:start="137:13" pos:end="137:43">(<init pos:start="137:14" pos:end="137:19"><expr pos:start="137:14" pos:end="137:18"><name pos:start="137:14" pos:end="137:14">i</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <literal type="number" pos:start="137:18" pos:end="137:18">0</literal></expr>;</init> <condition pos:start="137:21" pos:end="137:38"><expr pos:start="137:21" pos:end="137:37"><name pos:start="137:21" pos:end="137:21">i</name> <operator pos:start="137:23" pos:end="137:23">&lt;</operator> <name pos:start="137:25" pos:end="137:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="137:40" pos:end="137:42"><expr pos:start="137:40" pos:end="137:42"><name pos:start="137:40" pos:end="137:40">i</name><operator pos:start="137:41" pos:end="137:42">++</operator></expr></incr>)</control> <block pos:start="137:45" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:13">

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:71">(<expr pos:start="139:17" pos:end="139:70"><operator pos:start="139:17" pos:end="139:17">!</operator><call pos:start="139:18" pos:end="139:70"><name pos:start="139:18" pos:end="139:29">bitmap_empty</name><argument_list pos:start="139:30" pos:end="139:70">(<argument pos:start="139:31" pos:end="139:51"><expr pos:start="139:31" pos:end="139:51"><name pos:start="139:31" pos:end="139:42"><name pos:start="139:31" pos:end="139:39">numa_info</name><index pos:start="139:40" pos:end="139:42">[<expr pos:start="139:41" pos:end="139:41"><name pos:start="139:41" pos:end="139:41">i</name></expr>]</index></name><operator pos:start="139:43" pos:end="139:43">.</operator><name pos:start="139:44" pos:end="139:51">node_cpu</name></expr></argument>, <argument pos:start="139:54" pos:end="139:69"><expr pos:start="139:54" pos:end="139:69"><name pos:start="139:54" pos:end="139:69">MAX_CPUMASK_BITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:73" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:22">

                <break pos:start="141:17" pos:end="141:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="147:9" pos:end="159:11">/* Historically VCPUs were assigned in round-robin order to NUMA

         * nodes. However it causes issues with guest not handling it nice

         * in case where cores/threads from a multicore CPU appear on

         * different nodes. So allow boards to override default distribution

         * rule grouping VCPUs by socket so that VCPUs from the same socket

         * would be on the same node.

         */</comment>

        <if_stmt pos:start="161:9" pos:end="179:9"><if pos:start="161:9" pos:end="179:9">if <condition pos:start="161:12" pos:end="161:31">(<expr pos:start="161:13" pos:end="161:30"><name pos:start="161:13" pos:end="161:13">i</name> <operator pos:start="161:15" pos:end="161:16">==</operator> <name pos:start="161:18" pos:end="161:30">nb_numa_nodes</name></expr>)</condition> <block pos:start="161:33" pos:end="179:9">{<block_content pos:start="163:13" pos:end="177:13">

            <for pos:start="163:13" pos:end="177:13">for <control pos:start="163:17" pos:end="163:42">(<init pos:start="163:18" pos:end="163:23"><expr pos:start="163:18" pos:end="163:22"><name pos:start="163:18" pos:end="163:18">i</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <literal type="number" pos:start="163:22" pos:end="163:22">0</literal></expr>;</init> <condition pos:start="163:25" pos:end="163:37"><expr pos:start="163:25" pos:end="163:36"><name pos:start="163:25" pos:end="163:25">i</name> <operator pos:start="163:27" pos:end="163:27">&lt;</operator> <name pos:start="163:29" pos:end="163:36">max_cpus</name></expr>;</condition> <incr pos:start="163:39" pos:end="163:41"><expr pos:start="163:39" pos:end="163:41"><name pos:start="163:39" pos:end="163:39">i</name><operator pos:start="163:40" pos:end="163:41">++</operator></expr></incr>)</control> <block pos:start="163:44" pos:end="177:13">{<block_content pos:start="165:17" pos:end="175:56">

                <decl_stmt pos:start="165:17" pos:end="165:53"><decl pos:start="165:17" pos:end="165:52"><type pos:start="165:17" pos:end="165:24"><name pos:start="165:17" pos:end="165:24">unsigned</name></type> <name pos:start="165:26" pos:end="165:32">node_id</name> <init pos:start="165:34" pos:end="165:52">= <expr pos:start="165:36" pos:end="165:52"><name pos:start="165:36" pos:end="165:36">i</name> <operator pos:start="165:38" pos:end="165:38">%</operator> <name pos:start="165:40" pos:end="165:52">nb_numa_nodes</name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="167:17" pos:end="171:17"><if pos:start="167:17" pos:end="171:17">if <condition pos:start="167:20" pos:end="167:47">(<expr pos:start="167:21" pos:end="167:46"><name pos:start="167:21" pos:end="167:46"><name pos:start="167:21" pos:end="167:22">mc</name><operator pos:start="167:23" pos:end="167:24">-&gt;</operator><name pos:start="167:25" pos:end="167:46">cpu_index_to_socket_id</name></name></expr>)</condition> <block pos:start="167:49" pos:end="171:17">{<block_content pos:start="169:21" pos:end="169:76">

                    <expr_stmt pos:start="169:21" pos:end="169:76"><expr pos:start="169:21" pos:end="169:75"><name pos:start="169:21" pos:end="169:27">node_id</name> <operator pos:start="169:29" pos:end="169:29">=</operator> <call pos:start="169:31" pos:end="169:59"><name pos:start="169:31" pos:end="169:56"><name pos:start="169:31" pos:end="169:32">mc</name><operator pos:start="169:33" pos:end="169:34">-&gt;</operator><name pos:start="169:35" pos:end="169:56">cpu_index_to_socket_id</name></name><argument_list pos:start="169:57" pos:end="169:59">(<argument pos:start="169:58" pos:end="169:58"><expr pos:start="169:58" pos:end="169:58"><name pos:start="169:58" pos:end="169:58">i</name></expr></argument>)</argument_list></call> <operator pos:start="169:61" pos:end="169:61">%</operator> <name pos:start="169:63" pos:end="169:75">nb_numa_nodes</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="175:17" pos:end="175:56"><expr pos:start="175:17" pos:end="175:55"><call pos:start="175:17" pos:end="175:55"><name pos:start="175:17" pos:end="175:23">set_bit</name><argument_list pos:start="175:24" pos:end="175:55">(<argument pos:start="175:25" pos:end="175:25"><expr pos:start="175:25" pos:end="175:25"><name pos:start="175:25" pos:end="175:25">i</name></expr></argument>, <argument pos:start="175:28" pos:end="175:54"><expr pos:start="175:28" pos:end="175:54"><name pos:start="175:28" pos:end="175:45"><name pos:start="175:28" pos:end="175:36">numa_info</name><index pos:start="175:37" pos:end="175:45">[<expr pos:start="175:38" pos:end="175:44"><name pos:start="175:38" pos:end="175:44">node_id</name></expr>]</index></name><operator pos:start="175:46" pos:end="175:46">.</operator><name pos:start="175:47" pos:end="175:54">node_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:29"><expr pos:start="183:9" pos:end="183:28"><call pos:start="183:9" pos:end="183:28"><name pos:start="183:9" pos:end="183:26">validate_numa_cpus</name><argument_list pos:start="183:27" pos:end="183:28">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="189:5">else <block pos:start="185:12" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:45">

        <expr_stmt pos:start="187:9" pos:end="187:45"><expr pos:start="187:9" pos:end="187:44"><call pos:start="187:9" pos:end="187:44"><name pos:start="187:9" pos:end="187:28">numa_set_mem_node_id</name><argument_list pos:start="187:29" pos:end="187:44">(<argument pos:start="187:30" pos:end="187:30"><expr pos:start="187:30" pos:end="187:30"><literal type="number" pos:start="187:30" pos:end="187:30">0</literal></expr></argument>, <argument pos:start="187:33" pos:end="187:40"><expr pos:start="187:33" pos:end="187:40"><name pos:start="187:33" pos:end="187:40">ram_size</name></expr></argument>, <argument pos:start="187:43" pos:end="187:43"><expr pos:start="187:43" pos:end="187:43"><literal type="number" pos:start="187:43" pos:end="187:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
