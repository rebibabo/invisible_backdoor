<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23494.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:66"><name pos:start="1:1" pos:end="1:30">e1000e_intrmgr_delay_rx_causes</name><argument_list pos:start="1:31" pos:end="1:66">(<argument pos:start="1:32" pos:end="1:47">E1000ECore *core</argument>, <argument pos:start="1:50" pos:end="1:65">uint32_t *causes</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:16">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:29">delayable_causes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">rdtr</name> <init pos:start="7:19" pos:end="7:35">= <expr pos:start="7:21" pos:end="7:35"><name pos:start="7:21" pos:end="7:35"><name pos:start="7:21" pos:end="7:24">core</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:29">mac</name><index pos:start="7:30" pos:end="7:35">[<expr pos:start="7:31" pos:end="7:34"><name pos:start="7:31" pos:end="7:34">RDTR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">radv</name> <init pos:start="9:19" pos:end="9:35">= <expr pos:start="9:21" pos:end="9:35"><name pos:start="9:21" pos:end="9:35"><name pos:start="9:21" pos:end="9:24">core</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:29">mac</name><index pos:start="9:30" pos:end="9:35">[<expr pos:start="9:31" pos:end="9:34"><name pos:start="9:31" pos:end="9:34">RADV</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">raid</name> <init pos:start="11:19" pos:end="11:35">= <expr pos:start="11:21" pos:end="11:35"><name pos:start="11:21" pos:end="11:35"><name pos:start="11:21" pos:end="11:24">core</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:29">mac</name><index pos:start="11:30" pos:end="11:35">[<expr pos:start="11:31" pos:end="11:34"><name pos:start="11:31" pos:end="11:34">RAID</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:34">(<expr pos:start="15:9" pos:end="15:33"><call pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:20">msix_enabled</name><argument_list pos:start="15:21" pos:end="15:33">(<argument pos:start="15:22" pos:end="15:32"><expr pos:start="15:22" pos:end="15:32"><name pos:start="15:22" pos:end="15:32"><name pos:start="15:22" pos:end="15:25">core</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:32">owner</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:36" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:21">

        <return pos:start="17:9" pos:end="17:21">return <expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="27:38"><expr pos:start="23:5" pos:end="27:37"><name pos:start="23:5" pos:end="23:20">delayable_causes</name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:37">E1000_ICR_RXQ0</name> <operator pos:start="23:39" pos:end="23:39">|</operator>

                       <name pos:start="25:24" pos:end="25:37">E1000_ICR_RXQ1</name> <operator pos:start="25:39" pos:end="25:39">|</operator>

                       <name pos:start="27:24" pos:end="27:37">E1000_ICR_RXT0</name></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:50">(<expr pos:start="31:9" pos:end="31:49"><operator pos:start="31:9" pos:end="31:9">!</operator><operator pos:start="31:10" pos:end="31:10">(</operator><name pos:start="31:11" pos:end="31:26"><name pos:start="31:11" pos:end="31:14">core</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:19">mac</name><index pos:start="31:20" pos:end="31:26">[<expr pos:start="31:21" pos:end="31:25"><name pos:start="31:21" pos:end="31:25">RFCTL</name></expr>]</index></name> <operator pos:start="31:28" pos:end="31:28">&amp;</operator> <name pos:start="31:30" pos:end="31:48">E1000_RFCTL_ACK_DIS</name><operator pos:start="31:49" pos:end="31:49">)</operator></expr>)</condition> <block pos:start="31:52" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:42">

        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:24">delayable_causes</name> <operator pos:start="33:26" pos:end="33:27">|=</operator> <name pos:start="33:29" pos:end="33:41">E1000_ICR_ACK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:49">/* Clean up all causes that may be delayed */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:55"><expr pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:8">core</name><operator pos:start="41:9" pos:end="41:10">-&gt;</operator><name pos:start="41:11" pos:end="41:24">delayed_causes</name></name> <operator pos:start="41:26" pos:end="41:27">|=</operator> <operator pos:start="41:29" pos:end="41:29">*</operator><name pos:start="41:30" pos:end="41:35">causes</name> <operator pos:start="41:37" pos:end="41:37">&amp;</operator> <name pos:start="41:39" pos:end="41:54">delayable_causes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><operator pos:start="43:5" pos:end="43:5">*</operator><name pos:start="43:6" pos:end="43:11">causes</name> <operator pos:start="43:13" pos:end="43:14">&amp;=</operator> <operator pos:start="43:16" pos:end="43:16">~</operator><name pos:start="43:17" pos:end="43:32">delayable_causes</name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="49:55">/* Check if delayed RX interrupts disabled by client

       or if there are causes that cannot be delayed */</comment>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:37">(<expr pos:start="51:9" pos:end="51:36"><operator pos:start="51:9" pos:end="51:9">(</operator><name pos:start="51:10" pos:end="51:13">rdtr</name> <operator pos:start="51:15" pos:end="51:16">==</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal><operator pos:start="51:19" pos:end="51:19">)</operator> <operator pos:start="51:21" pos:end="51:22">||</operator> <operator pos:start="51:24" pos:end="51:24">(</operator><name pos:start="51:25" pos:end="51:30">causes</name> <operator pos:start="51:32" pos:end="51:33">!=</operator> <literal type="number" pos:start="51:35" pos:end="51:35">0</literal><operator pos:start="51:36" pos:end="51:36">)</operator></expr>)</condition> <block pos:start="51:39" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:21">

        <return pos:start="53:9" pos:end="53:21">return <expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="61:45">/* Check if delayed RX ACK interrupts disabled by client

       and there is an ACK packet received */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:62">(<expr pos:start="63:9" pos:end="63:61"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:13">raid</name> <operator pos:start="63:15" pos:end="63:16">==</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal><operator pos:start="63:19" pos:end="63:19">)</operator> <operator pos:start="63:21" pos:end="63:22">&amp;&amp;</operator> <operator pos:start="63:24" pos:end="63:24">(</operator><name pos:start="63:25" pos:end="63:44"><name pos:start="63:25" pos:end="63:28">core</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:44">delayed_causes</name></name> <operator pos:start="63:46" pos:end="63:46">&amp;</operator> <name pos:start="63:48" pos:end="63:60">E1000_ICR_ACK</name><operator pos:start="63:61" pos:end="63:61">)</operator></expr>)</condition> <block pos:start="63:64" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:21">

        <return pos:start="65:9" pos:end="65:21">return <expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:28">/* All causes delayed */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><call pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:30">e1000e_intrmgr_rearm_timer</name><argument_list pos:start="73:31" pos:end="73:43">(<argument pos:start="73:32" pos:end="73:42"><expr pos:start="73:32" pos:end="73:42"><operator pos:start="73:32" pos:end="73:32">&amp;</operator><name pos:start="73:33" pos:end="73:42"><name pos:start="73:33" pos:end="73:36">core</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:42">rdtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:43">(<expr pos:start="77:9" pos:end="77:42"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:27"><name pos:start="77:10" pos:end="77:13">core</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:19">radv</name><operator pos:start="77:20" pos:end="77:20">.</operator><name pos:start="77:21" pos:end="77:27">running</name></name> <operator pos:start="77:29" pos:end="77:30">&amp;&amp;</operator> <operator pos:start="77:32" pos:end="77:32">(</operator><name pos:start="77:33" pos:end="77:36">radv</name> <operator pos:start="77:38" pos:end="77:39">!=</operator> <literal type="number" pos:start="77:41" pos:end="77:41">0</literal><operator pos:start="77:42" pos:end="77:42">)</operator></expr>)</condition> <block pos:start="77:45" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:48">

        <expr_stmt pos:start="79:9" pos:end="79:48"><expr pos:start="79:9" pos:end="79:47"><call pos:start="79:9" pos:end="79:47"><name pos:start="79:9" pos:end="79:34">e1000e_intrmgr_rearm_timer</name><argument_list pos:start="79:35" pos:end="79:47">(<argument pos:start="79:36" pos:end="79:46"><expr pos:start="79:36" pos:end="79:46"><operator pos:start="79:36" pos:end="79:36">&amp;</operator><name pos:start="79:37" pos:end="79:46"><name pos:start="79:37" pos:end="79:40">core</name><operator pos:start="79:41" pos:end="79:42">-&gt;</operator><name pos:start="79:43" pos:end="79:46">radv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:70">(<expr pos:start="85:9" pos:end="85:69"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:27"><name pos:start="85:10" pos:end="85:13">core</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:19">raid</name><operator pos:start="85:20" pos:end="85:20">.</operator><name pos:start="85:21" pos:end="85:27">running</name></name> <operator pos:start="85:29" pos:end="85:30">&amp;&amp;</operator> <operator pos:start="85:32" pos:end="85:32">(</operator><name pos:start="85:33" pos:end="85:52"><name pos:start="85:33" pos:end="85:36">core</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:52">delayed_causes</name></name> <operator pos:start="85:54" pos:end="85:54">&amp;</operator> <name pos:start="85:56" pos:end="85:68">E1000_ICR_ACK</name><operator pos:start="85:69" pos:end="85:69">)</operator></expr>)</condition> <block pos:start="85:72" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:48">

        <expr_stmt pos:start="87:9" pos:end="87:48"><expr pos:start="87:9" pos:end="87:47"><call pos:start="87:9" pos:end="87:47"><name pos:start="87:9" pos:end="87:34">e1000e_intrmgr_rearm_timer</name><argument_list pos:start="87:35" pos:end="87:47">(<argument pos:start="87:36" pos:end="87:46"><expr pos:start="87:36" pos:end="87:46"><operator pos:start="87:36" pos:end="87:36">&amp;</operator><name pos:start="87:37" pos:end="87:46"><name pos:start="87:37" pos:end="87:40">core</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:46">raid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="93:5" pos:end="93:16">return <expr pos:start="93:12" pos:end="93:15"><name pos:start="93:12" pos:end="93:15">true</name></expr>;</return>

</block_content>}</block>
</unit>
