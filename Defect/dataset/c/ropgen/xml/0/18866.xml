<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18866.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">nbd_send_negotiate</name><parameter_list pos:start="1:30" pos:end="1:68">(<parameter pos:start="1:31" pos:end="1:39"><decl pos:start="1:31" pos:end="1:39"><type pos:start="1:31" pos:end="1:39"><name pos:start="1:31" pos:end="1:33">int</name></type> <name pos:start="1:35" pos:end="1:39">csock</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:51"><decl pos:start="1:42" pos:end="1:51"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:46">off_t</name></type> <name pos:start="1:48" pos:end="1:51">size</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:61">uint32_t</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:13">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:29"><name pos:start="5:10" pos:end="5:12">buf</name><index pos:start="5:13" pos:end="5:29">[<expr pos:start="5:14" pos:end="5:28"><literal type="number" pos:start="5:14" pos:end="5:16">8</literal> <operator pos:start="5:16" pos:end="5:16">+</operator> <literal type="number" pos:start="5:18" pos:end="5:20">8</literal> <operator pos:start="5:20" pos:end="5:20">+</operator> <literal type="number" pos:start="5:22" pos:end="5:24">8</literal> <operator pos:start="5:24" pos:end="5:24">+</operator> <literal type="number" pos:start="5:26" pos:end="5:28">128</literal></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="21:7">/* Negotiate

        [ 0 ..   7]   passwd   ("NBDMAGIC")

        [ 8 ..  15]   magic    (0x00420281861253)

        [16 ..  23]   size

        [24 ..  27]   flags

        [28 .. 151]   reserved (0)

     */</comment>



    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><call pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:9">TRACE</name><argument_list pos:start="25:10" pos:end="25:35">(<argument pos:start="25:11" pos:end="25:34"><expr pos:start="25:11" pos:end="25:34"><literal type="string" pos:start="25:11" pos:end="25:34">"Beginning negotiation."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><call pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:10">memcpy</name><argument_list pos:start="27:11" pos:end="27:30">(<argument pos:start="27:12" pos:end="27:14"><expr pos:start="27:12" pos:end="27:14"><name pos:start="27:12" pos:end="27:14">buf</name></expr></argument>, <argument pos:start="27:17" pos:end="27:26"><expr pos:start="27:17" pos:end="27:26"><literal type="string" pos:start="27:17" pos:end="27:26">"NBDMAGIC"</literal></expr></argument>, <argument pos:start="27:29" pos:end="27:29"><expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:59"><expr pos:start="29:5" pos:end="29:58"><call pos:start="29:5" pos:end="29:58"><name pos:start="29:5" pos:end="29:16">cpu_to_be64w</name><argument_list pos:start="29:17" pos:end="29:58">(<argument pos:start="29:18" pos:end="29:37"><expr pos:start="29:18" pos:end="29:37"><operator pos:start="29:18" pos:end="29:18">(</operator><name pos:start="29:19" pos:end="29:26">uint64_t</name><operator pos:start="29:27" pos:end="29:27">*</operator><operator pos:start="29:28" pos:end="29:28">)</operator><operator pos:start="29:29" pos:end="29:29">(</operator><name pos:start="29:30" pos:end="29:32">buf</name> <operator pos:start="29:34" pos:end="29:34">+</operator> <literal type="number" pos:start="29:36" pos:end="29:36">8</literal><operator pos:start="29:37" pos:end="29:37">)</operator></expr></argument>, <argument pos:start="29:40" pos:end="29:57"><expr pos:start="29:40" pos:end="29:57"><literal type="number" pos:start="29:40" pos:end="29:57">0x00420281861253LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><call pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:16">cpu_to_be64w</name><argument_list pos:start="31:17" pos:end="31:45">(<argument pos:start="31:18" pos:end="31:38"><expr pos:start="31:18" pos:end="31:38"><operator pos:start="31:18" pos:end="31:18">(</operator><name pos:start="31:19" pos:end="31:26">uint64_t</name><operator pos:start="31:27" pos:end="31:27">*</operator><operator pos:start="31:28" pos:end="31:28">)</operator><operator pos:start="31:29" pos:end="31:29">(</operator><name pos:start="31:30" pos:end="31:32">buf</name> <operator pos:start="31:34" pos:end="31:34">+</operator> <literal type="number" pos:start="31:36" pos:end="31:37">16</literal><operator pos:start="31:38" pos:end="31:38">)</operator></expr></argument>, <argument pos:start="31:41" pos:end="31:44"><expr pos:start="31:41" pos:end="31:44"><name pos:start="31:41" pos:end="31:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="37:58"><expr pos:start="33:5" pos:end="37:57"><call pos:start="33:5" pos:end="37:57"><name pos:start="33:5" pos:end="33:16">cpu_to_be32w</name><argument_list pos:start="33:17" pos:end="37:57">(<argument pos:start="33:18" pos:end="33:38"><expr pos:start="33:18" pos:end="33:38"><operator pos:start="33:18" pos:end="33:18">(</operator><name pos:start="33:19" pos:end="33:26">uint32_t</name><operator pos:start="33:27" pos:end="33:27">*</operator><operator pos:start="33:28" pos:end="33:28">)</operator><operator pos:start="33:29" pos:end="33:29">(</operator><name pos:start="33:30" pos:end="33:32">buf</name> <operator pos:start="33:34" pos:end="33:34">+</operator> <literal type="number" pos:start="33:36" pos:end="33:37">24</literal><operator pos:start="33:38" pos:end="33:38">)</operator></expr></argument>,

                 <argument pos:start="35:18" pos:end="37:56"><expr pos:start="35:18" pos:end="37:56"><name pos:start="35:18" pos:end="35:22">flags</name> <operator pos:start="35:24" pos:end="35:24">|</operator> <name pos:start="35:26" pos:end="35:43">NBD_FLAG_HAS_FLAGS</name> <operator pos:start="35:45" pos:end="35:45">|</operator> <name pos:start="35:47" pos:end="35:64">NBD_FLAG_SEND_TRIM</name> <operator pos:start="35:66" pos:end="35:66">|</operator>

                 <name pos:start="37:18" pos:end="37:36">NBD_FLAG_SEND_FLUSH</name> <operator pos:start="37:38" pos:end="37:38">|</operator> <name pos:start="37:40" pos:end="37:56">NBD_FLAG_SEND_FUA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><call pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:10">memset</name><argument_list pos:start="39:11" pos:end="39:28">(<argument pos:start="39:12" pos:end="39:19"><expr pos:start="39:12" pos:end="39:19"><name pos:start="39:12" pos:end="39:14">buf</name> <operator pos:start="39:16" pos:end="39:16">+</operator> <literal type="number" pos:start="39:18" pos:end="39:19">28</literal></expr></argument>, <argument pos:start="39:22" pos:end="39:22"><expr pos:start="39:22" pos:end="39:22"><literal type="number" pos:start="39:22" pos:end="39:22">0</literal></expr></argument>, <argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><literal type="number" pos:start="39:25" pos:end="39:27">124</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:59">(<expr pos:start="43:9" pos:end="43:58"><call pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:18">write_sync</name><argument_list pos:start="43:19" pos:end="43:43">(<argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">csock</name></expr></argument>, <argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><name pos:start="43:27" pos:end="43:29">buf</name></expr></argument>, <argument pos:start="43:32" pos:end="43:42"><expr pos:start="43:32" pos:end="43:42"><sizeof pos:start="43:32" pos:end="43:42">sizeof<argument_list pos:start="43:38" pos:end="43:42">(<argument pos:start="43:39" pos:end="43:41"><expr pos:start="43:39" pos:end="43:41"><name pos:start="43:39" pos:end="43:41">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="43:45" pos:end="43:46">!=</operator> <sizeof pos:start="43:48" pos:end="43:58">sizeof<argument_list pos:start="43:54" pos:end="43:58">(<argument pos:start="43:55" pos:end="43:57"><expr pos:start="43:55" pos:end="43:57"><name pos:start="43:55" pos:end="43:57">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="43:61" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:18">

        <expr_stmt pos:start="45:9" pos:end="45:28"><expr pos:start="45:9" pos:end="45:27"><call pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:11">LOG</name><argument_list pos:start="45:12" pos:end="45:27">(<argument pos:start="45:13" pos:end="45:26"><expr pos:start="45:13" pos:end="45:26"><literal type="string" pos:start="45:13" pos:end="45:26">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:13">errno</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:18">return <expr pos:start="49:16" pos:end="49:17"><operator pos:start="49:16" pos:end="49:16">-</operator><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:36"><expr pos:start="55:5" pos:end="55:35"><call pos:start="55:5" pos:end="55:35"><name pos:start="55:5" pos:end="55:9">TRACE</name><argument_list pos:start="55:10" pos:end="55:35">(<argument pos:start="55:11" pos:end="55:34"><expr pos:start="55:11" pos:end="55:34"><literal type="string" pos:start="55:11" pos:end="55:34">"Negotiation succeeded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
