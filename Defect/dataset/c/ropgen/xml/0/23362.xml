<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23362.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">hdev_open</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">options</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">flags</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="121:1">{<block_content pos:start="7:5" pos:end="119:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:43">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:43"><call pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:22">(<argument pos:start="15:13" pos:end="15:21"><expr pos:start="15:13" pos:end="15:21"><name pos:start="15:13" pos:end="15:21">__APPLE__</name></expr></argument>)</argument_list></call> <operator pos:start="15:24" pos:end="15:25">&amp;&amp;</operator> <call pos:start="15:27" pos:end="15:43"><name pos:start="15:27" pos:end="15:33">defined</name><argument_list pos:start="15:34" pos:end="15:43">(<argument pos:start="15:35" pos:end="15:42"><expr pos:start="15:35" pos:end="15:42"><name pos:start="15:35" pos:end="15:42">__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="17:5" pos:end="17:62"><decl pos:start="17:5" pos:end="17:61"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:24">filename</name> <init pos:start="17:26" pos:end="17:61">= <expr pos:start="17:28" pos:end="17:61"><call pos:start="17:28" pos:end="17:61"><name pos:start="17:28" pos:end="17:40">qdict_get_str</name><argument_list pos:start="17:41" pos:end="17:61">(<argument pos:start="17:42" pos:end="17:48"><expr pos:start="17:42" pos:end="17:48"><name pos:start="17:42" pos:end="17:48">options</name></expr></argument>, <argument pos:start="17:51" pos:end="17:60"><expr pos:start="17:51" pos:end="17:60"><literal type="string" pos:start="17:51" pos:end="17:60">"filename"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="72:0"><if pos:start="21:5" pos:end="72:0">if <condition pos:start="21:8" pos:end="21:47">(<expr pos:start="21:9" pos:end="21:46"><call pos:start="21:9" pos:end="21:46"><name pos:start="21:9" pos:end="21:16">strstart</name><argument_list pos:start="21:17" pos:end="21:46">(<argument pos:start="21:18" pos:end="21:25"><expr pos:start="21:18" pos:end="21:25"><name pos:start="21:18" pos:end="21:25">filename</name></expr></argument>, <argument pos:start="21:28" pos:end="21:39"><expr pos:start="21:28" pos:end="21:39"><literal type="string" pos:start="21:28" pos:end="21:39">"/dev/cdrom"</literal></expr></argument>, <argument pos:start="21:42" pos:end="21:45"><expr pos:start="21:42" pos:end="21:45"><name pos:start="21:42" pos:end="21:45">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:49" pos:end="72:0">{<block_content pos:start="23:9" pos:end="67:45">

        <decl_stmt pos:start="23:9" pos:end="23:33"><decl pos:start="23:9" pos:end="23:32"><type pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:21">kern_return_t</name></type> <name pos:start="23:23" pos:end="23:32">kernResult</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:36"><decl pos:start="25:9" pos:end="25:35"><type pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:21">io_iterator_t</name></type> <name pos:start="25:23" pos:end="25:35">mediaIterator</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:35"><decl pos:start="27:9" pos:end="27:34"><type pos:start="27:9" pos:end="27:12"><name pos:start="27:9" pos:end="27:12">char</name></type> <name pos:start="27:14" pos:end="27:34"><name pos:start="27:14" pos:end="27:20">bsdPath</name><index pos:start="27:21" pos:end="27:34">[ <expr pos:start="27:23" pos:end="27:32"><name pos:start="27:23" pos:end="27:32">MAXPATHLEN</name></expr> ]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:15"><decl pos:start="29:9" pos:end="29:14"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:14">fd</name></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:60"><expr pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:18">kernResult</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <call pos:start="33:22" pos:end="33:59"><name pos:start="33:22" pos:end="33:41">FindEjectableCDMedia</name><argument_list pos:start="33:42" pos:end="33:59">( <argument pos:start="33:44" pos:end="33:57"><expr pos:start="33:44" pos:end="33:57"><operator pos:start="33:44" pos:end="33:44">&amp;</operator><name pos:start="33:45" pos:end="33:57">mediaIterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="37:39"><expr pos:start="35:9" pos:end="37:38"><name pos:start="35:9" pos:end="35:18">kernResult</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="37:38"><name pos:start="35:22" pos:end="35:31">GetBSDPath</name><argument_list pos:start="35:32" pos:end="37:38">(<argument pos:start="35:33" pos:end="35:45"><expr pos:start="35:33" pos:end="35:45"><name pos:start="35:33" pos:end="35:45">mediaIterator</name></expr></argument>, <argument pos:start="35:48" pos:end="35:54"><expr pos:start="35:48" pos:end="35:54"><name pos:start="35:48" pos:end="35:54">bsdPath</name></expr></argument>, <argument pos:start="35:57" pos:end="35:71"><expr pos:start="35:57" pos:end="35:71"><sizeof pos:start="35:57" pos:end="35:71">sizeof<argument_list pos:start="35:63" pos:end="35:71">(<argument pos:start="35:64" pos:end="35:70"><expr pos:start="35:64" pos:end="35:70"><name pos:start="35:64" pos:end="35:70">bsdPath</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                <argument pos:start="37:33" pos:end="37:37"><expr pos:start="37:33" pos:end="37:37"><name pos:start="37:33" pos:end="37:37">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="61:9"><if pos:start="39:9" pos:end="61:9">if <condition pos:start="39:12" pos:end="39:35">( <expr pos:start="39:14" pos:end="39:33"><name pos:start="39:14" pos:end="39:25"><name pos:start="39:14" pos:end="39:20">bsdPath</name><index pos:start="39:21" pos:end="39:25">[ <expr pos:start="39:23" pos:end="39:23"><literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr> ]</index></name> <operator pos:start="39:27" pos:end="39:28">!=</operator> <literal type="char" pos:start="39:30" pos:end="39:33">'\0'</literal></expr> )</condition> <block pos:start="39:37" pos:end="61:9">{<block_content pos:start="41:13" pos:end="59:71">

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><call pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:18">strcat</name><argument_list pos:start="41:19" pos:end="41:32">(<argument pos:start="41:20" pos:end="41:26"><expr pos:start="41:20" pos:end="41:26"><name pos:start="41:20" pos:end="41:26">bsdPath</name></expr></argument>,<argument pos:start="41:28" pos:end="41:31"><expr pos:start="41:28" pos:end="41:31"><literal type="string" pos:start="41:28" pos:end="41:31">"s0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="43:13" pos:end="43:51">/* some CDs don't have a partition 0 */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:71"><expr pos:start="45:13" pos:end="45:70"><name pos:start="45:13" pos:end="45:14">fd</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:70"><name pos:start="45:18" pos:end="45:26">qemu_open</name><argument_list pos:start="45:27" pos:end="45:70">(<argument pos:start="45:28" pos:end="45:34"><expr pos:start="45:28" pos:end="45:34"><name pos:start="45:28" pos:end="45:34">bsdPath</name></expr></argument>, <argument pos:start="45:37" pos:end="45:69"><expr pos:start="45:37" pos:end="45:69"><name pos:start="45:37" pos:end="45:44">O_RDONLY</name> <operator pos:start="45:46" pos:end="45:46">|</operator> <name pos:start="45:48" pos:end="45:55">O_BINARY</name> <operator pos:start="45:57" pos:end="45:57">|</operator> <name pos:start="45:59" pos:end="45:69">O_LARGEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="55:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:23">(<expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:18">fd</name> <operator pos:start="47:20" pos:end="47:20">&lt;</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>)</condition> <block pos:start="47:25" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:49">

                <expr_stmt pos:start="49:17" pos:end="49:49"><expr pos:start="49:17" pos:end="49:48"><name pos:start="49:17" pos:end="49:42"><name pos:start="49:17" pos:end="49:23">bsdPath</name><index pos:start="49:24" pos:end="49:42">[<expr pos:start="49:25" pos:end="49:41"><call pos:start="49:25" pos:end="49:39"><name pos:start="49:25" pos:end="49:30">strlen</name><argument_list pos:start="49:31" pos:end="49:39">(<argument pos:start="49:32" pos:end="49:38"><expr pos:start="49:32" pos:end="49:38"><name pos:start="49:32" pos:end="49:38">bsdPath</name></expr></argument>)</argument_list></call><operator pos:start="49:40" pos:end="49:40">-</operator><literal type="number" pos:start="49:41" pos:end="49:41">1</literal></expr>]</index></name> <operator pos:start="49:44" pos:end="49:44">=</operator> <literal type="char" pos:start="49:46" pos:end="49:48">'1'</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="55:13">else <block pos:start="51:20" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:31">

                <expr_stmt pos:start="53:17" pos:end="53:31"><expr pos:start="53:17" pos:end="53:30"><call pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:26">qemu_close</name><argument_list pos:start="53:27" pos:end="53:30">(<argument pos:start="53:28" pos:end="53:29"><expr pos:start="53:28" pos:end="53:29"><name pos:start="53:28" pos:end="53:29">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:31"><expr pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:20">filename</name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:30">bsdPath</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:71"><expr pos:start="59:13" pos:end="59:70"><call pos:start="59:13" pos:end="59:70"><name pos:start="59:13" pos:end="59:21">qdict_put</name><argument_list pos:start="59:22" pos:end="59:70">(<argument pos:start="59:23" pos:end="59:29"><expr pos:start="59:23" pos:end="59:29"><name pos:start="59:23" pos:end="59:29">options</name></expr></argument>, <argument pos:start="59:32" pos:end="59:41"><expr pos:start="59:32" pos:end="59:41"><literal type="string" pos:start="59:32" pos:end="59:41">"filename"</literal></expr></argument>, <argument pos:start="59:44" pos:end="59:69"><expr pos:start="59:44" pos:end="59:69"><call pos:start="59:44" pos:end="59:69"><name pos:start="59:44" pos:end="59:59">qstring_from_str</name><argument_list pos:start="59:60" pos:end="59:69">(<argument pos:start="59:61" pos:end="59:68"><expr pos:start="59:61" pos:end="59:68"><name pos:start="59:61" pos:end="59:68">filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="65:9" pos:end="67:45"><if pos:start="65:9" pos:end="67:45">if <condition pos:start="65:12" pos:end="65:28">( <expr pos:start="65:14" pos:end="65:26"><name pos:start="65:14" pos:end="65:26">mediaIterator</name></expr> )</condition><block type="pseudo" pos:start="67:13" pos:end="67:45"><block_content pos:start="67:13" pos:end="67:45">

            <expr_stmt pos:start="67:13" pos:end="67:45"><expr pos:start="67:13" pos:end="67:44"><call pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:27">IOObjectRelease</name><argument_list pos:start="67:28" pos:end="67:44">( <argument pos:start="67:30" pos:end="67:42"><expr pos:start="67:30" pos:end="67:42"><name pos:start="67:30" pos:end="67:42">mediaIterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="75:5" pos:end="75:25"><expr pos:start="75:5" pos:end="75:24"><name pos:start="75:5" pos:end="75:11"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:11">type</name></name> <operator pos:start="75:13" pos:end="75:13">=</operator> <name pos:start="75:15" pos:end="75:24">FTYPE_FILE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:61"><expr pos:start="79:5" pos:end="79:60"><name pos:start="79:5" pos:end="79:7">ret</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:60"><name pos:start="79:11" pos:end="79:25">raw_open_common</name><argument_list pos:start="79:26" pos:end="79:60">(<argument pos:start="79:27" pos:end="79:28"><expr pos:start="79:27" pos:end="79:28"><name pos:start="79:27" pos:end="79:28">bs</name></expr></argument>, <argument pos:start="79:31" pos:end="79:37"><expr pos:start="79:31" pos:end="79:37"><name pos:start="79:31" pos:end="79:37">options</name></expr></argument>, <argument pos:start="79:40" pos:end="79:44"><expr pos:start="79:40" pos:end="79:44"><name pos:start="79:40" pos:end="79:44">flags</name></expr></argument>, <argument pos:start="79:47" pos:end="79:47"><expr pos:start="79:47" pos:end="79:47"><literal type="number" pos:start="79:47" pos:end="79:47">0</literal></expr></argument>, <argument pos:start="79:50" pos:end="79:59"><expr pos:start="79:50" pos:end="79:59"><operator pos:start="79:50" pos:end="79:50">&amp;</operator><name pos:start="79:51" pos:end="79:59">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="91:5"><if pos:start="81:5" pos:end="91:5">if <condition pos:start="81:8" pos:end="81:16">(<expr pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">&lt;</operator> <literal type="number" pos:start="81:15" pos:end="81:15">0</literal></expr>)</condition> <block pos:start="81:18" pos:end="91:5">{<block_content pos:start="83:9" pos:end="89:19">

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:22">(<expr pos:start="83:13" pos:end="83:21"><name pos:start="83:13" pos:end="83:21">local_err</name></expr>)</condition> <block pos:start="83:24" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:45">

            <expr_stmt pos:start="85:13" pos:end="85:45"><expr pos:start="85:13" pos:end="85:44"><call pos:start="85:13" pos:end="85:44"><name pos:start="85:13" pos:end="85:27">error_propagate</name><argument_list pos:start="85:28" pos:end="85:44">(<argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><name pos:start="85:29" pos:end="85:32">errp</name></expr></argument>, <argument pos:start="85:35" pos:end="85:43"><expr pos:start="85:35" pos:end="85:43"><name pos:start="85:35" pos:end="85:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="89:9" pos:end="89:19">return <expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:65">/* Since this does ioctl the device must be already opened */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:10"><name pos:start="97:5" pos:end="97:6">bs</name><operator pos:start="97:7" pos:end="97:8">-&gt;</operator><name pos:start="97:9" pos:end="97:10">sg</name></name> <operator pos:start="97:12" pos:end="97:12">=</operator> <call pos:start="97:14" pos:end="97:27"><name pos:start="97:14" pos:end="97:23">hdev_is_sg</name><argument_list pos:start="97:24" pos:end="97:27">(<argument pos:start="97:25" pos:end="97:26"><expr pos:start="97:25" pos:end="97:26"><name pos:start="97:25" pos:end="97:26">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="115:5"><if pos:start="101:5" pos:end="115:5">if <condition pos:start="101:8" pos:end="101:28">(<expr pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:13">flags</name> <operator pos:start="101:15" pos:end="101:15">&amp;</operator> <name pos:start="101:17" pos:end="101:27">BDRV_O_RDWR</name></expr>)</condition> <block pos:start="101:30" pos:end="115:5">{<block_content pos:start="103:9" pos:end="113:9">

        <expr_stmt pos:start="103:9" pos:end="103:37"><expr pos:start="103:9" pos:end="103:36"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:36"><name pos:start="103:15" pos:end="103:33">check_hdev_writable</name><argument_list pos:start="103:34" pos:end="103:36">(<argument pos:start="103:35" pos:end="103:35"><expr pos:start="103:35" pos:end="103:35"><name pos:start="103:35" pos:end="103:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="113:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:20">(<expr pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:17">&lt;</operator> <literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr>)</condition> <block pos:start="105:22" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:23">

            <expr_stmt pos:start="107:13" pos:end="107:26"><expr pos:start="107:13" pos:end="107:25"><call pos:start="107:13" pos:end="107:25"><name pos:start="107:13" pos:end="107:21">raw_close</name><argument_list pos:start="107:22" pos:end="107:25">(<argument pos:start="107:23" pos:end="107:24"><expr pos:start="107:23" pos:end="107:24"><name pos:start="107:23" pos:end="107:24">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:71"><expr pos:start="109:13" pos:end="109:70"><call pos:start="109:13" pos:end="109:70"><name pos:start="109:13" pos:end="109:28">error_setg_errno</name><argument_list pos:start="109:29" pos:end="109:70">(<argument pos:start="109:30" pos:end="109:33"><expr pos:start="109:30" pos:end="109:33"><name pos:start="109:30" pos:end="109:33">errp</name></expr></argument>, <argument pos:start="109:36" pos:end="109:39"><expr pos:start="109:36" pos:end="109:39"><operator pos:start="109:36" pos:end="109:36">-</operator><name pos:start="109:37" pos:end="109:39">ret</name></expr></argument>, <argument pos:start="109:42" pos:end="109:69"><expr pos:start="109:42" pos:end="109:69"><literal type="string" pos:start="109:42" pos:end="109:69">"The device is not writable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:23">return <expr pos:start="111:20" pos:end="111:22"><name pos:start="111:20" pos:end="111:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="119:5" pos:end="119:15">return <expr pos:start="119:12" pos:end="119:14"><name pos:start="119:12" pos:end="119:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
