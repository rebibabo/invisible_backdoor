<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10881.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">kvm_on_sigbus_vcpu</name><parameter_list pos:start="1:23" pos:end="1:59">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:31">CPUState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:46"><decl pos:start="1:39" pos:end="1:46"><type pos:start="1:39" pos:end="1:46"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:46">code</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="7:5" pos:end="133:13">

<cpp:if pos:start="5:1" pos:end="5:24">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:24"><call pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:24">(<argument pos:start="5:13" pos:end="5:23"><expr pos:start="5:13" pos:end="5:23"><name pos:start="5:13" pos:end="5:23">KVM_CAP_MCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="11:6"><decl pos:start="7:5" pos:end="11:5"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">kvm_x86_mce</name></name></type> <name pos:start="7:24" pos:end="7:26">mce</name> <init pos:start="7:28" pos:end="11:5">= <expr pos:start="7:30" pos:end="11:5"><block pos:start="7:30" pos:end="11:5">{

            <expr pos:start="9:13" pos:end="9:21"><operator pos:start="9:13" pos:end="9:13">.</operator><name pos:start="9:14" pos:end="9:17">bank</name> <operator pos:start="9:19" pos:end="9:19">=</operator> <literal type="number" pos:start="9:21" pos:end="9:21">9</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:15">vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:23">ram_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22">target_phys_addr_t</name></type> <name pos:start="17:24" pos:end="17:28">paddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">r</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="131:5"><if pos:start="23:5" pos:end="111:5">if <condition pos:start="23:8" pos:end="27:38">(<expr pos:start="23:9" pos:end="27:37"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:21"><name pos:start="23:10" pos:end="23:12">env</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:21">mcg_cap</name></name> <operator pos:start="23:23" pos:end="23:23">&amp;</operator> <name pos:start="23:25" pos:end="23:33">MCG_SER_P</name><operator pos:start="23:34" pos:end="23:34">)</operator> <operator pos:start="23:36" pos:end="23:37">&amp;&amp;</operator> <name pos:start="23:39" pos:end="23:42">addr</name>

        <operator pos:start="25:9" pos:end="25:10">&amp;&amp;</operator> <operator pos:start="25:12" pos:end="25:12">(</operator><name pos:start="25:13" pos:end="25:16">code</name> <operator pos:start="25:18" pos:end="25:19">==</operator> <name pos:start="25:21" pos:end="25:33">BUS_MCEERR_AR</name>

            <operator pos:start="27:13" pos:end="27:14">||</operator> <name pos:start="27:16" pos:end="27:19">code</name> <operator pos:start="27:21" pos:end="27:22">==</operator> <name pos:start="27:24" pos:end="27:36">BUS_MCEERR_AO</name><operator pos:start="27:37" pos:end="27:37">)</operator></expr>)</condition> <block pos:start="27:40" pos:end="111:5">{<block_content pos:start="29:9" pos:end="109:36">

        <if_stmt pos:start="29:9" pos:end="71:9"><if pos:start="29:9" pos:end="43:9">if <condition pos:start="29:12" pos:end="29:34">(<expr pos:start="29:13" pos:end="29:33"><name pos:start="29:13" pos:end="29:16">code</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <name pos:start="29:21" pos:end="29:33">BUS_MCEERR_AR</name></expr>)</condition> <block pos:start="29:36" pos:end="43:9">{<block_content pos:start="33:13" pos:end="41:63">

            <comment type="block" pos:start="31:13" pos:end="31:64">/* Fake an Intel architectural Data Load SRAR UCR */</comment>

            <expr_stmt pos:start="33:13" pos:end="37:40"><expr pos:start="33:13" pos:end="37:39"><name pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:15">mce</name><operator pos:start="33:16" pos:end="33:16">.</operator><name pos:start="33:17" pos:end="33:22">status</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:39">MCI_STATUS_VAL</name> <operator pos:start="33:41" pos:end="33:41">|</operator> <name pos:start="33:43" pos:end="33:55">MCI_STATUS_UC</name> <operator pos:start="33:57" pos:end="33:57">|</operator> <name pos:start="33:59" pos:end="33:71">MCI_STATUS_EN</name>

                <operator pos:start="35:17" pos:end="35:17">|</operator> <name pos:start="35:19" pos:end="35:34">MCI_STATUS_MISCV</name> <operator pos:start="35:36" pos:end="35:36">|</operator> <name pos:start="35:38" pos:end="35:53">MCI_STATUS_ADDRV</name> <operator pos:start="35:55" pos:end="35:55">|</operator> <name pos:start="35:57" pos:end="35:68">MCI_STATUS_S</name>

                <operator pos:start="37:17" pos:end="37:17">|</operator> <name pos:start="37:19" pos:end="37:31">MCI_STATUS_AR</name> <operator pos:start="37:33" pos:end="37:33">|</operator> <literal type="number" pos:start="37:35" pos:end="37:39">0x134</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:50"><expr pos:start="39:13" pos:end="39:49"><name pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:15">mce</name><operator pos:start="39:16" pos:end="39:16">.</operator><name pos:start="39:17" pos:end="39:20">misc</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <operator pos:start="39:24" pos:end="39:24">(</operator><name pos:start="39:25" pos:end="39:37">MCM_ADDR_PHYS</name> <operator pos:start="39:39" pos:end="39:40">&lt;&lt;</operator> <literal type="number" pos:start="39:42" pos:end="39:42">6</literal><operator pos:start="39:43" pos:end="39:43">)</operator> <operator pos:start="39:45" pos:end="39:45">|</operator> <literal type="number" pos:start="39:47" pos:end="39:49">0xc</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:63"><expr pos:start="41:13" pos:end="41:62"><name pos:start="41:13" pos:end="41:26"><name pos:start="41:13" pos:end="41:15">mce</name><operator pos:start="41:16" pos:end="41:16">.</operator><name pos:start="41:17" pos:end="41:26">mcg_status</name></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:44">MCG_STATUS_MCIP</name> <operator pos:start="41:46" pos:end="41:46">|</operator> <name pos:start="41:48" pos:end="41:62">MCG_STATUS_EIPV</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="43:11" pos:end="71:9">else <block pos:start="43:16" pos:end="71:9">{<block_content pos:start="53:13" pos:end="69:63">

            <comment type="block" pos:start="45:13" pos:end="51:15">/*

             * If there is an MCE excpetion being processed, ignore

             * this SRAO MCE

             */</comment>

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:41">(<expr pos:start="53:17" pos:end="53:40"><call pos:start="53:17" pos:end="53:40"><name pos:start="53:17" pos:end="53:35">kvm_mce_in_progress</name><argument_list pos:start="53:36" pos:end="53:40">(<argument pos:start="53:37" pos:end="53:39"><expr pos:start="53:37" pos:end="53:39"><name pos:start="53:37" pos:end="53:39">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:43" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:25">

                <return pos:start="55:17" pos:end="55:25">return <expr pos:start="55:24" pos:end="55:24"><literal type="number" pos:start="55:24" pos:end="55:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="59:13" pos:end="59:66">/* Fake an Intel architectural Memory scrubbing UCR */</comment>

            <expr_stmt pos:start="61:13" pos:end="65:23"><expr pos:start="61:13" pos:end="65:22"><name pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:15">mce</name><operator pos:start="61:16" pos:end="61:16">.</operator><name pos:start="61:17" pos:end="61:22">status</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:39">MCI_STATUS_VAL</name> <operator pos:start="61:41" pos:end="61:41">|</operator> <name pos:start="61:43" pos:end="61:55">MCI_STATUS_UC</name> <operator pos:start="61:57" pos:end="61:57">|</operator> <name pos:start="61:59" pos:end="61:71">MCI_STATUS_EN</name>

                <operator pos:start="63:17" pos:end="63:17">|</operator> <name pos:start="63:19" pos:end="63:34">MCI_STATUS_MISCV</name> <operator pos:start="63:36" pos:end="63:36">|</operator> <name pos:start="63:38" pos:end="63:53">MCI_STATUS_ADDRV</name> <operator pos:start="63:55" pos:end="63:55">|</operator> <name pos:start="63:57" pos:end="63:68">MCI_STATUS_S</name>

                <operator pos:start="65:17" pos:end="65:17">|</operator> <literal type="number" pos:start="65:19" pos:end="65:22">0xc0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:50"><expr pos:start="67:13" pos:end="67:49"><name pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:15">mce</name><operator pos:start="67:16" pos:end="67:16">.</operator><name pos:start="67:17" pos:end="67:20">misc</name></name> <operator pos:start="67:22" pos:end="67:22">=</operator> <operator pos:start="67:24" pos:end="67:24">(</operator><name pos:start="67:25" pos:end="67:37">MCM_ADDR_PHYS</name> <operator pos:start="67:39" pos:end="67:40">&lt;&lt;</operator> <literal type="number" pos:start="67:42" pos:end="67:42">6</literal><operator pos:start="67:43" pos:end="67:43">)</operator> <operator pos:start="67:45" pos:end="67:45">|</operator> <literal type="number" pos:start="67:47" pos:end="67:49">0xc</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:63"><expr pos:start="69:13" pos:end="69:62"><name pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:15">mce</name><operator pos:start="69:16" pos:end="69:16">.</operator><name pos:start="69:17" pos:end="69:26">mcg_status</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <name pos:start="69:30" pos:end="69:44">MCG_STATUS_MCIP</name> <operator pos:start="69:46" pos:end="69:46">|</operator> <name pos:start="69:48" pos:end="69:62">MCG_STATUS_RIPV</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:29"><expr pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:13">vaddr</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <operator pos:start="73:17" pos:end="73:17">(</operator><name pos:start="73:18" pos:end="73:21">void</name> <operator pos:start="73:23" pos:end="73:23">*</operator><operator pos:start="73:24" pos:end="73:24">)</operator><name pos:start="73:25" pos:end="73:28">addr</name></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="95:9"><if pos:start="75:9" pos:end="95:9">if <condition pos:start="75:12" pos:end="77:81">(<expr pos:start="75:13" pos:end="77:80"><call pos:start="75:13" pos:end="75:53"><name pos:start="75:13" pos:end="75:35">qemu_ram_addr_from_host</name><argument_list pos:start="75:36" pos:end="75:53">(<argument pos:start="75:37" pos:end="75:41"><expr pos:start="75:37" pos:end="75:41"><name pos:start="75:37" pos:end="75:41">vaddr</name></expr></argument>, <argument pos:start="75:44" pos:end="75:52"><expr pos:start="75:44" pos:end="75:52"><operator pos:start="75:44" pos:end="75:44">&amp;</operator><name pos:start="75:45" pos:end="75:52">ram_addr</name></expr></argument>)</argument_list></call> <operator pos:start="75:55" pos:end="75:56">||</operator>

            <operator pos:start="77:13" pos:end="77:13">!</operator><call pos:start="77:14" pos:end="77:80"><name pos:start="77:14" pos:end="77:46">kvm_physical_memory_addr_from_ram</name><argument_list pos:start="77:47" pos:end="77:80">(<argument pos:start="77:48" pos:end="77:61"><expr pos:start="77:48" pos:end="77:61"><name pos:start="77:48" pos:end="77:61"><name pos:start="77:48" pos:end="77:50">env</name><operator pos:start="77:51" pos:end="77:52">-&gt;</operator><name pos:start="77:53" pos:end="77:61">kvm_state</name></name></expr></argument>, <argument pos:start="77:64" pos:end="77:71"><expr pos:start="77:64" pos:end="77:71"><name pos:start="77:64" pos:end="77:71">ram_addr</name></expr></argument>, <argument pos:start="77:74" pos:end="77:79"><expr pos:start="77:74" pos:end="77:79"><operator pos:start="77:74" pos:end="77:74">&amp;</operator><name pos:start="77:75" pos:end="77:79">paddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:83" pos:end="95:9">{<block_content pos:start="79:13" pos:end="93:13">

            <expr_stmt pos:start="79:13" pos:end="81:62"><expr pos:start="79:13" pos:end="81:61"><call pos:start="79:13" pos:end="81:61"><name pos:start="79:13" pos:end="79:19">fprintf</name><argument_list pos:start="79:20" pos:end="81:61">(<argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:26">stderr</name></expr></argument>, <argument pos:start="79:29" pos:end="81:60"><expr pos:start="79:29" pos:end="81:60"><literal type="string" pos:start="79:29" pos:end="79:71">"Hardware memory error for memory used by "</literal>

                    <literal type="string" pos:start="81:21" pos:end="81:60">"QEMU itself instead of guest system!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="83:13" pos:end="83:46">/* Hope we are lucky for AO MCE */</comment>

            <if_stmt pos:start="85:13" pos:end="93:13"><if pos:start="85:13" pos:end="89:13">if <condition pos:start="85:16" pos:end="85:38">(<expr pos:start="85:17" pos:end="85:37"><name pos:start="85:17" pos:end="85:20">code</name> <operator pos:start="85:22" pos:end="85:23">==</operator> <name pos:start="85:25" pos:end="85:37">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="85:40" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:25">

                <return pos:start="87:17" pos:end="87:25">return <expr pos:start="87:24" pos:end="87:24"><literal type="number" pos:start="87:24" pos:end="87:24">0</literal></expr>;</return>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="93:13">else <block pos:start="89:20" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:40">

                <expr_stmt pos:start="91:17" pos:end="91:40"><expr pos:start="91:17" pos:end="91:39"><call pos:start="91:17" pos:end="91:39"><name pos:start="91:17" pos:end="91:37">hardware_memory_error</name><argument_list pos:start="91:38" pos:end="91:39">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:25"><expr pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:11">mce</name><operator pos:start="97:12" pos:end="97:12">.</operator><name pos:start="97:13" pos:end="97:16">addr</name></name> <operator pos:start="97:18" pos:end="97:18">=</operator> <name pos:start="97:20" pos:end="97:24">paddr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:35"><expr pos:start="99:9" pos:end="99:34"><name pos:start="99:9" pos:end="99:9">r</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <call pos:start="99:13" pos:end="99:34"><name pos:start="99:13" pos:end="99:23">kvm_set_mce</name><argument_list pos:start="99:24" pos:end="99:34">(<argument pos:start="99:25" pos:end="99:27"><expr pos:start="99:25" pos:end="99:27"><name pos:start="99:25" pos:end="99:27">env</name></expr></argument>, <argument pos:start="99:30" pos:end="99:33"><expr pos:start="99:30" pos:end="99:33"><operator pos:start="99:30" pos:end="99:30">&amp;</operator><name pos:start="99:31" pos:end="99:33">mce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:18">(<expr pos:start="101:13" pos:end="101:17"><name pos:start="101:13" pos:end="101:13">r</name> <operator pos:start="101:15" pos:end="101:15">&lt;</operator> <literal type="number" pos:start="101:17" pos:end="101:17">0</literal></expr>)</condition> <block pos:start="101:20" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:20">

            <expr_stmt pos:start="103:13" pos:end="103:66"><expr pos:start="103:13" pos:end="103:65"><call pos:start="103:13" pos:end="103:65"><name pos:start="103:13" pos:end="103:19">fprintf</name><argument_list pos:start="103:20" pos:end="103:65">(<argument pos:start="103:21" pos:end="103:26"><expr pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:26">stderr</name></expr></argument>, <argument pos:start="103:29" pos:end="103:47"><expr pos:start="103:29" pos:end="103:47"><literal type="string" pos:start="103:29" pos:end="103:47">"kvm_set_mce: %s\n"</literal></expr></argument>, <argument pos:start="103:50" pos:end="103:64"><expr pos:start="103:50" pos:end="103:64"><call pos:start="103:50" pos:end="103:64"><name pos:start="103:50" pos:end="103:57">strerror</name><argument_list pos:start="103:58" pos:end="103:64">(<argument pos:start="103:59" pos:end="103:63"><expr pos:start="103:59" pos:end="103:63"><name pos:start="103:59" pos:end="103:63">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:20"><expr pos:start="105:13" pos:end="105:19"><call pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:17">abort</name><argument_list pos:start="105:18" pos:end="105:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:36"><expr pos:start="109:9" pos:end="109:35"><call pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:30">kvm_mce_broadcast_rest</name><argument_list pos:start="109:31" pos:end="109:35">(<argument pos:start="109:32" pos:end="109:34"><expr pos:start="109:32" pos:end="109:34"><name pos:start="109:32" pos:end="109:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="131:5">else

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>

    <block pos:start="115:5" pos:end="131:5">{<block_content pos:start="117:9" pos:end="129:9">

        <if_stmt pos:start="117:9" pos:end="129:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:34">(<expr pos:start="117:13" pos:end="117:33"><name pos:start="117:13" pos:end="117:16">code</name> <operator pos:start="117:18" pos:end="117:19">==</operator> <name pos:start="117:21" pos:end="117:33">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="117:36" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:21">

            <return pos:start="119:13" pos:end="119:21">return <expr pos:start="119:20" pos:end="119:20"><literal type="number" pos:start="119:20" pos:end="119:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="121:11" pos:end="125:9">else if <condition pos:start="121:19" pos:end="121:41">(<expr pos:start="121:20" pos:end="121:40"><name pos:start="121:20" pos:end="121:23">code</name> <operator pos:start="121:25" pos:end="121:26">==</operator> <name pos:start="121:28" pos:end="121:40">BUS_MCEERR_AR</name></expr>)</condition> <block pos:start="121:43" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:36">

            <expr_stmt pos:start="123:13" pos:end="123:36"><expr pos:start="123:13" pos:end="123:35"><call pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:33">hardware_memory_error</name><argument_list pos:start="123:34" pos:end="123:35">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="125:11" pos:end="129:9">else <block pos:start="125:16" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:21">

            <return pos:start="127:13" pos:end="127:21">return <expr pos:start="127:20" pos:end="127:20"><literal type="number" pos:start="127:20" pos:end="127:20">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
