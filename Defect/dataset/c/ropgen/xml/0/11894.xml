<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11894.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">wmavoice_decode_packet</name><parameter_list pos:start="1:34" pos:end="3:66">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">ctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:48"><decl pos:start="3:35" pos:end="3:48"><type pos:start="3:35" pos:end="3:48"><name pos:start="3:35" pos:end="3:37">int</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:48">data_size</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:58">AVPacket</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:65">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:16">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">WMAVoiceContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">s</name> <init pos:start="7:24" pos:end="7:39">= <expr pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:28">ctx</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">GetBitContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">gb</name> <init pos:start="9:23" pos:end="9:30">= <expr pos:start="9:25" pos:end="9:30"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:30"><name pos:start="9:26" pos:end="9:26">s</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">res</name></decl>, <decl pos:start="11:20" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:22">pos</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="25:5"><if pos:start="15:5" pos:end="25:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><operator pos:start="15:9" pos:end="15:9">*</operator><name pos:start="15:10" pos:end="15:18">data_size</name> <operator pos:start="15:20" pos:end="15:20">&lt;</operator> <literal type="number" pos:start="15:22" pos:end="15:24">480</literal> <operator pos:start="15:26" pos:end="15:26">*</operator> <sizeof pos:start="15:28" pos:end="15:40">sizeof<argument_list pos:start="15:34" pos:end="15:40">(<argument pos:start="15:35" pos:end="15:39"><expr pos:start="15:35" pos:end="15:39"><name pos:start="15:35" pos:end="15:39">float</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="15:43" pos:end="25:5">{<block_content pos:start="17:9" pos:end="23:18">

        <expr_stmt pos:start="17:9" pos:end="21:48"><expr pos:start="17:9" pos:end="21:47"><call pos:start="17:9" pos:end="21:47"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="21:47">(<argument pos:start="17:16" pos:end="17:18"><expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ctx</name></expr></argument>, <argument pos:start="17:21" pos:end="17:32"><expr pos:start="17:21" pos:end="17:32"><name pos:start="17:21" pos:end="17:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="19:16" pos:end="19:66"><expr pos:start="19:16" pos:end="19:66"><literal type="string" pos:start="19:16" pos:end="19:66">"Output buffer too small (%d given - %zu needed)\n"</literal></expr></argument>,

               <argument pos:start="21:16" pos:end="21:25"><expr pos:start="21:16" pos:end="21:25"><operator pos:start="21:16" pos:end="21:16">*</operator><name pos:start="21:17" pos:end="21:25">data_size</name></expr></argument>, <argument pos:start="21:28" pos:end="21:46"><expr pos:start="21:28" pos:end="21:46"><literal type="number" pos:start="21:28" pos:end="21:30">480</literal> <operator pos:start="21:32" pos:end="21:32">*</operator> <sizeof pos:start="21:34" pos:end="21:46">sizeof<argument_list pos:start="21:40" pos:end="21:46">(<argument pos:start="21:41" pos:end="21:45"><expr pos:start="21:41" pos:end="21:45"><name pos:start="21:41" pos:end="21:45">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="37:54">/* Packets are sometimes a multiple of ctx-&gt;block_align, with a packet

     * header at each ctx-&gt;block_align bytes. However, Libav's ASF demuxer

     * feeds us ASF packets, which may concatenate multiple "codec" packets

     * in a single "muxer" packet, so we artificially emulate that by

     * capping the packet size at ctx-&gt;block_align. */</comment>

    <for pos:start="39:5" pos:end="39:80">for <control pos:start="39:9" pos:end="39:79">(<init pos:start="39:10" pos:end="39:28"><expr pos:start="39:10" pos:end="39:27"><name pos:start="39:10" pos:end="39:13">size</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:27"><name pos:start="39:17" pos:end="39:21">avpkt</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:27">size</name></name></expr>;</init> <condition pos:start="39:30" pos:end="39:53"><expr pos:start="39:30" pos:end="39:52"><name pos:start="39:30" pos:end="39:33">size</name> <operator pos:start="39:35" pos:end="39:35">&gt;</operator> <name pos:start="39:37" pos:end="39:52"><name pos:start="39:37" pos:end="39:39">ctx</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:52">block_align</name></name></expr>;</condition> <incr pos:start="39:55" pos:end="39:78"><expr pos:start="39:55" pos:end="39:78"><name pos:start="39:55" pos:end="39:58">size</name> <operator pos:start="39:60" pos:end="39:61">-=</operator> <name pos:start="39:63" pos:end="39:78"><name pos:start="39:63" pos:end="39:65">ctx</name><operator pos:start="39:66" pos:end="39:67">-&gt;</operator><name pos:start="39:68" pos:end="39:78">block_align</name></name></expr></incr>)</control><block type="pseudo" pos:start="39:80" pos:end="39:80"><block_content pos:start="39:80" pos:end="39:80"><empty_stmt pos:start="39:80" pos:end="39:80">;</empty_stmt></block_content></block></for>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:14">(<expr pos:start="41:9" pos:end="41:13"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:13">size</name></expr>)</condition> <block pos:start="41:16" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:17">

        <expr_stmt pos:start="43:9" pos:end="43:23"><expr pos:start="43:9" pos:end="43:22"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:18">data_size</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <literal type="number" pos:start="43:22" pos:end="43:22">0</literal></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:50"><expr pos:start="49:5" pos:end="49:49"><call pos:start="49:5" pos:end="49:49"><name pos:start="49:5" pos:end="49:17">init_get_bits</name><argument_list pos:start="49:18" pos:end="49:49">(<argument pos:start="49:19" pos:end="49:24"><expr pos:start="49:19" pos:end="49:24"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:24">gb</name></name></expr></argument>, <argument pos:start="49:27" pos:end="49:37"><expr pos:start="49:27" pos:end="49:37"><name pos:start="49:27" pos:end="49:37"><name pos:start="49:27" pos:end="49:31">avpkt</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:37">data</name></name></expr></argument>, <argument pos:start="49:40" pos:end="49:48"><expr pos:start="49:40" pos:end="49:48"><name pos:start="49:40" pos:end="49:43">size</name> <operator pos:start="49:45" pos:end="49:46">&lt;&lt;</operator> <literal type="number" pos:start="49:48" pos:end="49:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="57:21">/* size == ctx-&gt;block_align is used to indicate whether we are dealing with

     * a new packet or a packet of which we already read the packet header

     * previously. */</comment>

    <if_stmt pos:start="59:5" pos:end="109:41"><if pos:start="59:5" pos:end="107:5">if <condition pos:start="59:8" pos:end="59:33">(<expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:12">size</name> <operator pos:start="59:14" pos:end="59:15">==</operator> <name pos:start="59:17" pos:end="59:32"><name pos:start="59:17" pos:end="59:19">ctx</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:32">block_align</name></name></expr>)</condition> <block pos:start="59:35" pos:end="107:5">{<block_content pos:start="61:9" pos:end="105:9"> <comment type="line" pos:start="59:37" pos:end="59:56">// new packet header</comment>

        <if_stmt pos:start="61:9" pos:end="63:23"><if pos:start="61:9" pos:end="63:23">if <condition pos:start="61:12" pos:end="61:47">(<expr pos:start="61:13" pos:end="61:46"><operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:16">res</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:41"><name pos:start="61:20" pos:end="61:38">parse_packet_header</name><argument_list pos:start="61:39" pos:end="61:41">(<argument pos:start="61:40" pos:end="61:40"><expr pos:start="61:40" pos:end="61:40"><name pos:start="61:40" pos:end="61:40">s</name></expr></argument>)</argument_list></call><operator pos:start="61:42" pos:end="61:42">)</operator> <operator pos:start="61:44" pos:end="61:44">&lt;</operator> <literal type="number" pos:start="61:46" pos:end="61:46">0</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:23"><block_content pos:start="63:13" pos:end="63:23">

            <return pos:start="63:13" pos:end="63:23">return <expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">res</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="67:9" pos:end="71:72">/* If the packet header specifies a s-&gt;spillover_nbits, then we want

         * to push out all data of the previous packet (+ spillover) before

         * continuing to parse new superframes in the current packet. */</comment>

        <if_stmt pos:start="73:9" pos:end="105:9"><if pos:start="73:9" pos:end="105:9">if <condition pos:start="73:12" pos:end="73:35">(<expr pos:start="73:13" pos:end="73:34"><name pos:start="73:13" pos:end="73:30"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:30">spillover_nbits</name></name> <operator pos:start="73:32" pos:end="73:32">&gt;</operator> <literal type="number" pos:start="73:34" pos:end="73:34">0</literal></expr>)</condition> <block pos:start="73:37" pos:end="105:9">{<block_content pos:start="75:13" pos:end="103:55">

            <if_stmt pos:start="75:13" pos:end="103:55"><if pos:start="75:13" pos:end="101:13">if <condition pos:start="75:16" pos:end="75:41">(<expr pos:start="75:17" pos:end="75:40"><name pos:start="75:17" pos:end="75:36"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:36">sframe_cache_size</name></name> <operator pos:start="75:38" pos:end="75:38">&gt;</operator> <literal type="number" pos:start="75:40" pos:end="75:40">0</literal></expr>)</condition> <block pos:start="75:43" pos:end="101:13">{<block_content pos:start="77:17" pos:end="99:56">

                <decl_stmt pos:start="77:17" pos:end="77:45"><decl pos:start="77:17" pos:end="77:44"><type pos:start="77:17" pos:end="77:19"><name pos:start="77:17" pos:end="77:19">int</name></type> <name pos:start="77:21" pos:end="77:23">cnt</name> <init pos:start="77:25" pos:end="77:44">= <expr pos:start="77:27" pos:end="77:44"><call pos:start="77:27" pos:end="77:44"><name pos:start="77:27" pos:end="77:40">get_bits_count</name><argument_list pos:start="77:41" pos:end="77:44">(<argument pos:start="77:42" pos:end="77:43"><expr pos:start="77:42" pos:end="77:43"><name pos:start="77:42" pos:end="77:43">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:77"><expr pos:start="79:17" pos:end="79:76"><call pos:start="79:17" pos:end="79:76"><name pos:start="79:17" pos:end="79:25">copy_bits</name><argument_list pos:start="79:26" pos:end="79:76">(<argument pos:start="79:27" pos:end="79:32"><expr pos:start="79:27" pos:end="79:32"><operator pos:start="79:27" pos:end="79:27">&amp;</operator><name pos:start="79:28" pos:end="79:32"><name pos:start="79:28" pos:end="79:28">s</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:32">pb</name></name></expr></argument>, <argument pos:start="79:35" pos:end="79:45"><expr pos:start="79:35" pos:end="79:45"><name pos:start="79:35" pos:end="79:45"><name pos:start="79:35" pos:end="79:39">avpkt</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:45">data</name></name></expr></argument>, <argument pos:start="79:48" pos:end="79:51"><expr pos:start="79:48" pos:end="79:51"><name pos:start="79:48" pos:end="79:51">size</name></expr></argument>, <argument pos:start="79:54" pos:end="79:55"><expr pos:start="79:54" pos:end="79:55"><name pos:start="79:54" pos:end="79:55">gb</name></expr></argument>, <argument pos:start="79:58" pos:end="79:75"><expr pos:start="79:58" pos:end="79:75"><name pos:start="79:58" pos:end="79:75"><name pos:start="79:58" pos:end="79:58">s</name><operator pos:start="79:59" pos:end="79:60">-&gt;</operator><name pos:start="79:61" pos:end="79:75">spillover_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:39"><expr pos:start="81:17" pos:end="81:38"><call pos:start="81:17" pos:end="81:38"><name pos:start="81:17" pos:end="81:30">flush_put_bits</name><argument_list pos:start="81:31" pos:end="81:38">(<argument pos:start="81:32" pos:end="81:37"><expr pos:start="81:32" pos:end="81:37"><operator pos:start="81:32" pos:end="81:32">&amp;</operator><name pos:start="81:33" pos:end="81:37"><name pos:start="81:33" pos:end="81:33">s</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:37">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:59"><expr pos:start="83:17" pos:end="83:58"><name pos:start="83:17" pos:end="83:36"><name pos:start="83:17" pos:end="83:17">s</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:36">sframe_cache_size</name></name> <operator pos:start="83:38" pos:end="83:39">+=</operator> <name pos:start="83:41" pos:end="83:58"><name pos:start="83:41" pos:end="83:41">s</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:58">spillover_nbits</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="99:56"><if pos:start="85:17" pos:end="95:17">if <condition pos:start="85:20" pos:end="87:35">(<expr pos:start="85:21" pos:end="87:34"><operator pos:start="85:21" pos:end="85:21">(</operator><name pos:start="85:22" pos:end="85:24">res</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <call pos:start="85:28" pos:end="85:65"><name pos:start="85:28" pos:end="85:43">synth_superframe</name><argument_list pos:start="85:44" pos:end="85:65">(<argument pos:start="85:45" pos:end="85:47"><expr pos:start="85:45" pos:end="85:47"><name pos:start="85:45" pos:end="85:47">ctx</name></expr></argument>, <argument pos:start="85:50" pos:end="85:53"><expr pos:start="85:50" pos:end="85:53"><name pos:start="85:50" pos:end="85:53">data</name></expr></argument>, <argument pos:start="85:56" pos:end="85:64"><expr pos:start="85:56" pos:end="85:64"><name pos:start="85:56" pos:end="85:64">data_size</name></expr></argument>)</argument_list></call><operator pos:start="85:66" pos:end="85:66">)</operator> <operator pos:start="85:68" pos:end="85:69">==</operator> <literal type="number" pos:start="85:71" pos:end="85:71">0</literal> <operator pos:start="85:73" pos:end="85:74">&amp;&amp;</operator>

                    <operator pos:start="87:21" pos:end="87:21">*</operator><name pos:start="87:22" pos:end="87:30">data_size</name> <operator pos:start="87:32" pos:end="87:32">&gt;</operator> <literal type="number" pos:start="87:34" pos:end="87:34">0</literal></expr>)</condition> <block pos:start="87:37" pos:end="95:17">{<block_content pos:start="89:21" pos:end="93:36">

                    <expr_stmt pos:start="89:21" pos:end="89:46"><expr pos:start="89:21" pos:end="89:45"><name pos:start="89:21" pos:end="89:23">cnt</name> <operator pos:start="89:25" pos:end="89:26">+=</operator> <name pos:start="89:28" pos:end="89:45"><name pos:start="89:28" pos:end="89:28">s</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:45">spillover_nbits</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:48"><expr pos:start="91:21" pos:end="91:47"><name pos:start="91:21" pos:end="91:37"><name pos:start="91:21" pos:end="91:21">s</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:37">skip_bits_next</name></name> <operator pos:start="91:39" pos:end="91:39">=</operator> <name pos:start="91:41" pos:end="91:43">cnt</name> <operator pos:start="91:45" pos:end="91:45">&amp;</operator> <literal type="number" pos:start="91:47" pos:end="91:47">7</literal></expr>;</expr_stmt>

                    <return pos:start="93:21" pos:end="93:36">return <expr pos:start="93:28" pos:end="93:35"><name pos:start="93:28" pos:end="93:30">cnt</name> <operator pos:start="93:32" pos:end="93:33">&gt;&gt;</operator> <literal type="number" pos:start="93:35" pos:end="93:35">3</literal></expr>;</return>

                </block_content>}</block></if> <else pos:start="95:19" pos:end="99:56">else<block type="pseudo" pos:start="97:21" pos:end="99:56"><block_content pos:start="97:21" pos:end="99:56">

                    <expr_stmt pos:start="97:21" pos:end="99:56"><expr pos:start="97:21" pos:end="99:55"><call pos:start="97:21" pos:end="99:55"><name pos:start="97:21" pos:end="97:34">skip_bits_long</name> <argument_list pos:start="97:36" pos:end="99:55">(<argument pos:start="97:37" pos:end="97:38"><expr pos:start="97:37" pos:end="97:38"><name pos:start="97:37" pos:end="97:38">gb</name></expr></argument>, <argument pos:start="97:41" pos:end="99:54"><expr pos:start="97:41" pos:end="99:54"><name pos:start="97:41" pos:end="97:58"><name pos:start="97:41" pos:end="97:41">s</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:58">spillover_nbits</name></name> <operator pos:start="97:60" pos:end="97:60">-</operator> <name pos:start="97:62" pos:end="97:64">cnt</name> <operator pos:start="97:66" pos:end="97:66">+</operator>

                                    <call pos:start="99:37" pos:end="99:54"><name pos:start="99:37" pos:end="99:50">get_bits_count</name><argument_list pos:start="99:51" pos:end="99:54">(<argument pos:start="99:52" pos:end="99:53"><expr pos:start="99:52" pos:end="99:53"><name pos:start="99:52" pos:end="99:53">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="99:58" pos:end="99:66">// resync</comment>

            </block_content>}</block></if> <else pos:start="101:15" pos:end="103:55">else<block type="pseudo" pos:start="103:17" pos:end="103:55"><block_content pos:start="103:17" pos:end="103:55">

                <expr_stmt pos:start="103:17" pos:end="103:55"><expr pos:start="103:17" pos:end="103:54"><call pos:start="103:17" pos:end="103:54"><name pos:start="103:17" pos:end="103:30">skip_bits_long</name><argument_list pos:start="103:31" pos:end="103:54">(<argument pos:start="103:32" pos:end="103:33"><expr pos:start="103:32" pos:end="103:33"><name pos:start="103:32" pos:end="103:33">gb</name></expr></argument>, <argument pos:start="103:36" pos:end="103:53"><expr pos:start="103:36" pos:end="103:53"><name pos:start="103:36" pos:end="103:53"><name pos:start="103:36" pos:end="103:36">s</name><operator pos:start="103:37" pos:end="103:38">-&gt;</operator><name pos:start="103:39" pos:end="103:53">spillover_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="line" pos:start="103:58" pos:end="103:66">// resync</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="107:7" pos:end="109:41">else if <condition pos:start="107:15" pos:end="107:33">(<expr pos:start="107:16" pos:end="107:32"><name pos:start="107:16" pos:end="107:32"><name pos:start="107:16" pos:end="107:16">s</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:32">skip_bits_next</name></name></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:41"><block_content pos:start="109:9" pos:end="109:41">

        <expr_stmt pos:start="109:9" pos:end="109:41"><expr pos:start="109:9" pos:end="109:40"><call pos:start="109:9" pos:end="109:40"><name pos:start="109:9" pos:end="109:17">skip_bits</name><argument_list pos:start="109:18" pos:end="109:40">(<argument pos:start="109:19" pos:end="109:20"><expr pos:start="109:19" pos:end="109:20"><name pos:start="109:19" pos:end="109:20">gb</name></expr></argument>, <argument pos:start="109:23" pos:end="109:39"><expr pos:start="109:23" pos:end="109:39"><name pos:start="109:23" pos:end="109:39"><name pos:start="109:23" pos:end="109:23">s</name><operator pos:start="109:24" pos:end="109:25">-&gt;</operator><name pos:start="109:26" pos:end="109:39">skip_bits_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:51">/* Try parsing superframes in current packet */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:29"><expr pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:24"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:24">sframe_cache_size</name></name> <operator pos:start="115:26" pos:end="115:26">=</operator> <literal type="number" pos:start="115:28" pos:end="115:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:26"><expr pos:start="117:5" pos:end="117:25"><name pos:start="117:5" pos:end="117:21"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:21">skip_bits_next</name></name> <operator pos:start="117:23" pos:end="117:23">=</operator> <literal type="number" pos:start="117:25" pos:end="117:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:28"><expr pos:start="119:5" pos:end="119:27"><name pos:start="119:5" pos:end="119:7">pos</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:27"><name pos:start="119:11" pos:end="119:23">get_bits_left</name><argument_list pos:start="119:24" pos:end="119:27">(<argument pos:start="119:25" pos:end="119:26"><expr pos:start="119:25" pos:end="119:26"><name pos:start="119:25" pos:end="119:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="155:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:59">(<expr pos:start="121:9" pos:end="121:58"><operator pos:start="121:9" pos:end="121:9">(</operator><name pos:start="121:10" pos:end="121:12">res</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <call pos:start="121:16" pos:end="121:53"><name pos:start="121:16" pos:end="121:31">synth_superframe</name><argument_list pos:start="121:32" pos:end="121:53">(<argument pos:start="121:33" pos:end="121:35"><expr pos:start="121:33" pos:end="121:35"><name pos:start="121:33" pos:end="121:35">ctx</name></expr></argument>, <argument pos:start="121:38" pos:end="121:41"><expr pos:start="121:38" pos:end="121:41"><name pos:start="121:38" pos:end="121:41">data</name></expr></argument>, <argument pos:start="121:44" pos:end="121:52"><expr pos:start="121:44" pos:end="121:52"><name pos:start="121:44" pos:end="121:52">data_size</name></expr></argument>)</argument_list></call><operator pos:start="121:54" pos:end="121:54">)</operator> <operator pos:start="121:56" pos:end="121:56">&lt;</operator> <literal type="number" pos:start="121:58" pos:end="121:58">0</literal></expr>)</condition> <block pos:start="121:61" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:19">

        <return pos:start="123:9" pos:end="123:19">return <expr pos:start="123:16" pos:end="123:18"><name pos:start="123:16" pos:end="123:18">res</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="133:5">else if <condition pos:start="125:15" pos:end="125:30">(<expr pos:start="125:16" pos:end="125:29"><operator pos:start="125:16" pos:end="125:16">*</operator><name pos:start="125:17" pos:end="125:25">data_size</name> <operator pos:start="125:27" pos:end="125:27">&gt;</operator> <literal type="number" pos:start="125:29" pos:end="125:29">0</literal></expr>)</condition> <block pos:start="125:32" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:24">

        <decl_stmt pos:start="127:9" pos:end="127:37"><decl pos:start="127:9" pos:end="127:36"><type pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">int</name></type> <name pos:start="127:13" pos:end="127:15">cnt</name> <init pos:start="127:17" pos:end="127:36">= <expr pos:start="127:19" pos:end="127:36"><call pos:start="127:19" pos:end="127:36"><name pos:start="127:19" pos:end="127:32">get_bits_count</name><argument_list pos:start="127:33" pos:end="127:36">(<argument pos:start="127:34" pos:end="127:35"><expr pos:start="127:34" pos:end="127:35"><name pos:start="127:34" pos:end="127:35">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:36"><expr pos:start="129:9" pos:end="129:35"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:25">skip_bits_next</name></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <name pos:start="129:29" pos:end="129:31">cnt</name> <operator pos:start="129:33" pos:end="129:33">&amp;</operator> <literal type="number" pos:start="129:35" pos:end="129:35">7</literal></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:24">return <expr pos:start="131:16" pos:end="131:23"><name pos:start="131:16" pos:end="131:18">cnt</name> <operator pos:start="131:20" pos:end="131:21">&gt;&gt;</operator> <literal type="number" pos:start="131:23" pos:end="131:23">3</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="133:7" pos:end="155:5">else if <condition pos:start="133:15" pos:end="133:48">(<expr pos:start="133:16" pos:end="133:47"><operator pos:start="133:16" pos:end="133:16">(</operator><name pos:start="133:17" pos:end="133:36"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:36">sframe_cache_size</name></name> <operator pos:start="133:38" pos:end="133:38">=</operator> <name pos:start="133:40" pos:end="133:42">pos</name><operator pos:start="133:43" pos:end="133:43">)</operator> <operator pos:start="133:45" pos:end="133:45">&gt;</operator> <literal type="number" pos:start="133:47" pos:end="133:47">0</literal></expr>)</condition> <block pos:start="133:50" pos:end="155:5">{<block_content pos:start="137:9" pos:end="149:71">

        <comment type="block" pos:start="135:9" pos:end="135:75">/* rewind bit reader to start of last (incomplete) superframe... */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:50"><expr pos:start="137:9" pos:end="137:49"><call pos:start="137:9" pos:end="137:49"><name pos:start="137:9" pos:end="137:21">init_get_bits</name><argument_list pos:start="137:22" pos:end="137:49">(<argument pos:start="137:23" pos:end="137:24"><expr pos:start="137:23" pos:end="137:24"><name pos:start="137:23" pos:end="137:24">gb</name></expr></argument>, <argument pos:start="137:27" pos:end="137:37"><expr pos:start="137:27" pos:end="137:37"><name pos:start="137:27" pos:end="137:37"><name pos:start="137:27" pos:end="137:31">avpkt</name><operator pos:start="137:32" pos:end="137:33">-&gt;</operator><name pos:start="137:34" pos:end="137:37">data</name></name></expr></argument>, <argument pos:start="137:40" pos:end="137:48"><expr pos:start="137:40" pos:end="137:48"><name pos:start="137:40" pos:end="137:43">size</name> <operator pos:start="137:45" pos:end="137:46">&lt;&lt;</operator> <literal type="number" pos:start="137:48" pos:end="137:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:46"><expr pos:start="139:9" pos:end="139:45"><call pos:start="139:9" pos:end="139:45"><name pos:start="139:9" pos:end="139:22">skip_bits_long</name><argument_list pos:start="139:23" pos:end="139:45">(<argument pos:start="139:24" pos:end="139:25"><expr pos:start="139:24" pos:end="139:25"><name pos:start="139:24" pos:end="139:25">gb</name></expr></argument>, <argument pos:start="139:28" pos:end="139:44"><expr pos:start="139:28" pos:end="139:44"><operator pos:start="139:28" pos:end="139:28">(</operator><name pos:start="139:29" pos:end="139:32">size</name> <operator pos:start="139:34" pos:end="139:35">&lt;&lt;</operator> <literal type="number" pos:start="139:37" pos:end="139:37">3</literal><operator pos:start="139:38" pos:end="139:38">)</operator> <operator pos:start="139:40" pos:end="139:40">-</operator> <name pos:start="139:42" pos:end="139:44">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:41"><expr pos:start="141:9" pos:end="141:40"><call pos:start="141:9" pos:end="141:40"><name pos:start="141:9" pos:end="141:14">assert</name><argument_list pos:start="141:15" pos:end="141:40">(<argument pos:start="141:16" pos:end="141:39"><expr pos:start="141:16" pos:end="141:39"><call pos:start="141:16" pos:end="141:32"><name pos:start="141:16" pos:end="141:28">get_bits_left</name><argument_list pos:start="141:29" pos:end="141:32">(<argument pos:start="141:30" pos:end="141:31"><expr pos:start="141:30" pos:end="141:31"><name pos:start="141:30" pos:end="141:31">gb</name></expr></argument>)</argument_list></call> <operator pos:start="141:34" pos:end="141:35">==</operator> <name pos:start="141:37" pos:end="141:39">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="145:9" pos:end="145:58">/* ...and cache it for spillover in next packet */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:69"><expr pos:start="147:9" pos:end="147:68"><call pos:start="147:9" pos:end="147:68"><name pos:start="147:9" pos:end="147:21">init_put_bits</name><argument_list pos:start="147:22" pos:end="147:68">(<argument pos:start="147:23" pos:end="147:28"><expr pos:start="147:23" pos:end="147:28"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:28"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:28">pb</name></name></expr></argument>, <argument pos:start="147:31" pos:end="147:45"><expr pos:start="147:31" pos:end="147:45"><name pos:start="147:31" pos:end="147:45"><name pos:start="147:31" pos:end="147:31">s</name><operator pos:start="147:32" pos:end="147:33">-&gt;</operator><name pos:start="147:34" pos:end="147:45">sframe_cache</name></name></expr></argument>, <argument pos:start="147:48" pos:end="147:67"><expr pos:start="147:48" pos:end="147:67"><name pos:start="147:48" pos:end="147:67">SFRAME_CACHE_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:71"><expr pos:start="149:9" pos:end="149:70"><call pos:start="149:9" pos:end="149:70"><name pos:start="149:9" pos:end="149:17">copy_bits</name><argument_list pos:start="149:18" pos:end="149:70">(<argument pos:start="149:19" pos:end="149:24"><expr pos:start="149:19" pos:end="149:24"><operator pos:start="149:19" pos:end="149:19">&amp;</operator><name pos:start="149:20" pos:end="149:24"><name pos:start="149:20" pos:end="149:20">s</name><operator pos:start="149:21" pos:end="149:22">-&gt;</operator><name pos:start="149:23" pos:end="149:24">pb</name></name></expr></argument>, <argument pos:start="149:27" pos:end="149:37"><expr pos:start="149:27" pos:end="149:37"><name pos:start="149:27" pos:end="149:37"><name pos:start="149:27" pos:end="149:31">avpkt</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:37">data</name></name></expr></argument>, <argument pos:start="149:40" pos:end="149:43"><expr pos:start="149:40" pos:end="149:43"><name pos:start="149:40" pos:end="149:43">size</name></expr></argument>, <argument pos:start="149:46" pos:end="149:47"><expr pos:start="149:46" pos:end="149:47"><name pos:start="149:46" pos:end="149:47">gb</name></expr></argument>, <argument pos:start="149:50" pos:end="149:69"><expr pos:start="149:50" pos:end="149:69"><name pos:start="149:50" pos:end="149:69"><name pos:start="149:50" pos:end="149:50">s</name><operator pos:start="149:51" pos:end="149:52">-&gt;</operator><name pos:start="149:53" pos:end="149:69">sframe_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="151:9" pos:end="151:63">// FIXME bad - just copy bytes as whole and add use the</comment>

        <comment type="line" pos:start="153:9" pos:end="153:31">// skip_bits_next field</comment>

    </block_content>}</block></if></if_stmt>



    <return pos:start="159:5" pos:end="159:16">return <expr pos:start="159:12" pos:end="159:15"><name pos:start="159:12" pos:end="159:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
