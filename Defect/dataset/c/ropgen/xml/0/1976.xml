<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1976.c" pos:tabs="8"><function pos:start="1:1" pos:end="301:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">slirp_select_fill</name><parameter_list pos:start="1:23" pos:end="3:71">(<parameter pos:start="1:24" pos:end="1:33"><decl pos:start="1:24" pos:end="1:33"><type pos:start="1:24" pos:end="1:33"><name pos:start="1:24" pos:end="1:26">int</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:33">pnfds</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:38"><decl pos:start="3:24" pos:end="3:38"><type pos:start="3:24" pos:end="3:38"><name pos:start="3:24" pos:end="3:29">fd_set</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:38">readfds</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:56"><decl pos:start="3:41" pos:end="3:56"><type pos:start="3:41" pos:end="3:56"><name pos:start="3:41" pos:end="3:46">fd_set</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:56">writefds</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:70"><decl pos:start="3:59" pos:end="3:70"><type pos:start="3:59" pos:end="3:70"><name pos:start="3:59" pos:end="3:64">fd_set</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:70">xfds</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="301:1">{<block_content pos:start="7:5" pos:end="299:18">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Slirp</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:16">slirp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">socket</name></name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">so</name></decl>, <decl pos:start="9:24" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:19"><modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:31">so_next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">nfds</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:39">(<expr pos:start="15:9" pos:end="15:38"><call pos:start="15:9" pos:end="15:38"><name pos:start="15:9" pos:end="15:20">QTAILQ_EMPTY</name><argument_list pos:start="15:21" pos:end="15:38">(<argument pos:start="15:22" pos:end="15:37"><expr pos:start="15:22" pos:end="15:37"><operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:37">slirp_instances</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:41" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:19">/* fail safe */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:18">global_readfds</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:25">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:19">global_writefds</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <name pos:start="27:23" pos:end="27:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:15">global_xfds</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:22">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:18"><expr pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:8">nfds</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <operator pos:start="33:12" pos:end="33:12">*</operator><name pos:start="33:13" pos:end="33:17">pnfds</name></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="39:7">/*

     * First, TCP sockets

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:20"><expr pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:15">do_slowtimo</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>;</expr_stmt>



    <macro pos:start="45:5" pos:end="45:50"><name pos:start="45:5" pos:end="45:18">QTAILQ_FOREACH</name><argument_list pos:start="45:19" pos:end="45:50">(<argument pos:start="45:20" pos:end="45:24">slirp</argument>, <argument pos:start="45:27" pos:end="45:42">&amp;slirp_instances</argument>, <argument pos:start="45:45" pos:end="45:49">entry</argument>)</argument_list></macro> <block pos:start="45:52" pos:end="295:5">{<block_content pos:start="55:9" pos:end="293:9">

        <comment type="block" pos:start="47:9" pos:end="53:11">/*

         * *_slowtimo needs calling if there are IP fragments

         * in the fragment queue, or there are TCP connections active

         */</comment>

        <expr_stmt pos:start="55:9" pos:end="57:66"><expr pos:start="55:9" pos:end="57:65"><name pos:start="55:9" pos:end="55:19">do_slowtimo</name> <operator pos:start="55:21" pos:end="55:22">|=</operator> <operator pos:start="55:24" pos:end="55:24">(</operator><operator pos:start="55:25" pos:end="55:25">(</operator><name pos:start="55:26" pos:end="55:43"><name pos:start="55:26" pos:end="55:30">slirp</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:35">tcb</name><operator pos:start="55:36" pos:end="55:36">.</operator><name pos:start="55:37" pos:end="55:43">so_next</name></name> <operator pos:start="55:45" pos:end="55:46">!=</operator> <operator pos:start="55:48" pos:end="55:48">&amp;</operator><name pos:start="55:49" pos:end="55:58"><name pos:start="55:49" pos:end="55:53">slirp</name><operator pos:start="55:54" pos:end="55:55">-&gt;</operator><name pos:start="55:56" pos:end="55:58">tcb</name></name><operator pos:start="55:59" pos:end="55:59">)</operator> <operator pos:start="55:61" pos:end="55:62">||</operator>

                <operator pos:start="57:17" pos:end="57:17">(</operator><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:36"><name pos:start="57:19" pos:end="57:23">slirp</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:28">ipq</name><operator pos:start="57:29" pos:end="57:29">.</operator><name pos:start="57:30" pos:end="57:36">ip_link</name></name> <operator pos:start="57:38" pos:end="57:39">!=</operator> <name pos:start="57:41" pos:end="57:63"><name pos:start="57:41" pos:end="57:45">slirp</name><operator pos:start="57:46" pos:end="57:47">-&gt;</operator><name pos:start="57:48" pos:end="57:50">ipq</name><operator pos:start="57:51" pos:end="57:51">.</operator><name pos:start="57:52" pos:end="57:58">ip_link</name><operator pos:start="57:59" pos:end="57:59">.</operator><name pos:start="57:60" pos:end="57:63">next</name></name><operator pos:start="57:64" pos:end="57:64">)</operator><operator pos:start="57:65" pos:end="57:65">)</operator></expr>;</expr_stmt>



        <for pos:start="61:9" pos:end="173:9">for <control pos:start="61:13" pos:end="63:29">(<init pos:start="61:14" pos:end="61:37"><expr pos:start="61:14" pos:end="61:36"><name pos:start="61:14" pos:end="61:15">so</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:36"><name pos:start="61:19" pos:end="61:23">slirp</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:28">tcb</name><operator pos:start="61:29" pos:end="61:29">.</operator><name pos:start="61:30" pos:end="61:36">so_next</name></name></expr>;</init> <condition pos:start="61:39" pos:end="61:56"><expr pos:start="61:39" pos:end="61:55"><name pos:start="61:39" pos:end="61:40">so</name> <operator pos:start="61:42" pos:end="61:43">!=</operator> <operator pos:start="61:45" pos:end="61:45">&amp;</operator><name pos:start="61:46" pos:end="61:55"><name pos:start="61:46" pos:end="61:50">slirp</name><operator pos:start="61:51" pos:end="61:52">-&gt;</operator><name pos:start="61:53" pos:end="61:55">tcb</name></name></expr>;</condition>

                <incr pos:start="63:17" pos:end="63:28"><expr pos:start="63:17" pos:end="63:28"><name pos:start="63:17" pos:end="63:18">so</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:28">so_next</name></expr></incr>)</control> <block pos:start="63:31" pos:end="173:9">{<block_content pos:start="65:13" pos:end="171:13">

            <expr_stmt pos:start="65:13" pos:end="65:34"><expr pos:start="65:13" pos:end="65:33"><name pos:start="65:13" pos:end="65:19">so_next</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:33"><name pos:start="65:23" pos:end="65:24">so</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:33">so_next</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="69:13" pos:end="73:15">/*

             * See if we need a tcp_fasttimo

             */</comment>

            <if_stmt pos:start="75:13" pos:end="79:13"><if pos:start="75:13" pos:end="79:13">if <condition pos:start="75:16" pos:end="75:72">(<expr pos:start="75:17" pos:end="75:71"><name pos:start="75:17" pos:end="75:29">time_fasttimo</name> <operator pos:start="75:31" pos:end="75:32">==</operator> <literal type="number" pos:start="75:34" pos:end="75:34">0</literal> <operator pos:start="75:36" pos:end="75:37">&amp;&amp;</operator> <name pos:start="75:39" pos:end="75:59"><name pos:start="75:39" pos:end="75:40">so</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:50">so_tcpcb</name><operator pos:start="75:51" pos:end="75:52">-&gt;</operator><name pos:start="75:53" pos:end="75:59">t_flags</name></name> <operator pos:start="75:61" pos:end="75:61">&amp;</operator> <name pos:start="75:63" pos:end="75:71">TF_DELACK</name></expr>)</condition> <block pos:start="75:74" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:40">

                <expr_stmt pos:start="77:17" pos:end="77:40"><expr pos:start="77:17" pos:end="77:39"><name pos:start="77:17" pos:end="77:29">time_fasttimo</name> <operator pos:start="77:31" pos:end="77:31">=</operator> <name pos:start="77:33" pos:end="77:39">curtime</name></expr>;</expr_stmt> <comment type="block" pos:start="77:42" pos:end="77:75">/* Flag when we want a fasttimo */</comment>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="83:13" pos:end="89:15">/*

             * NOFDREF can include still connecting to local-host,

             * newly socreated() sockets etc. Don't want to select these.

             */</comment>

            <if_stmt pos:start="91:13" pos:end="95:13"><if pos:start="91:13" pos:end="95:13">if <condition pos:start="91:16" pos:end="91:57">(<expr pos:start="91:17" pos:end="91:56"><name pos:start="91:17" pos:end="91:28"><name pos:start="91:17" pos:end="91:18">so</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:28">so_state</name></name> <operator pos:start="91:30" pos:end="91:30">&amp;</operator> <name pos:start="91:32" pos:end="91:41">SS_NOFDREF</name> <operator pos:start="91:43" pos:end="91:44">||</operator> <name pos:start="91:46" pos:end="91:50"><name pos:start="91:46" pos:end="91:47">so</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:50">s</name></name> <operator pos:start="91:52" pos:end="91:53">==</operator> <operator pos:start="91:55" pos:end="91:55">-</operator><literal type="number" pos:start="91:56" pos:end="91:56">1</literal></expr>)</condition> <block pos:start="91:59" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:25">

                <continue pos:start="93:17" pos:end="93:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="99:13" pos:end="103:15">/*

             * Set for reading sockets which are accepting

             */</comment>

            <if_stmt pos:start="105:13" pos:end="113:13"><if pos:start="105:13" pos:end="113:13">if <condition pos:start="105:16" pos:end="105:46">(<expr pos:start="105:17" pos:end="105:45"><name pos:start="105:17" pos:end="105:28"><name pos:start="105:17" pos:end="105:18">so</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:28">so_state</name></name> <operator pos:start="105:30" pos:end="105:30">&amp;</operator> <name pos:start="105:32" pos:end="105:45">SS_FACCEPTCONN</name></expr>)</condition> <block pos:start="105:48" pos:end="113:13">{<block_content pos:start="107:17" pos:end="111:25">

                <expr_stmt pos:start="107:17" pos:end="107:39"><expr pos:start="107:17" pos:end="107:38"><call pos:start="107:17" pos:end="107:38"><name pos:start="107:17" pos:end="107:22">FD_SET</name><argument_list pos:start="107:23" pos:end="107:38">(<argument pos:start="107:24" pos:end="107:28"><expr pos:start="107:24" pos:end="107:28"><name pos:start="107:24" pos:end="107:28"><name pos:start="107:24" pos:end="107:25">so</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:28">s</name></name></expr></argument>, <argument pos:start="107:31" pos:end="107:37"><expr pos:start="107:31" pos:end="107:37"><name pos:start="107:31" pos:end="107:37">readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:32"><expr pos:start="109:17" pos:end="109:31"><call pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:24">UPD_NFDS</name><argument_list pos:start="109:25" pos:end="109:31">(<argument pos:start="109:26" pos:end="109:30"><expr pos:start="109:26" pos:end="109:30"><name pos:start="109:26" pos:end="109:30"><name pos:start="109:26" pos:end="109:27">so</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:30">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="111:17" pos:end="111:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="117:13" pos:end="121:15">/*

             * Set for writing sockets which are connecting

             */</comment>

            <if_stmt pos:start="123:13" pos:end="131:13"><if pos:start="123:13" pos:end="131:13">if <condition pos:start="123:16" pos:end="123:48">(<expr pos:start="123:17" pos:end="123:47"><name pos:start="123:17" pos:end="123:28"><name pos:start="123:17" pos:end="123:18">so</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:28">so_state</name></name> <operator pos:start="123:30" pos:end="123:30">&amp;</operator> <name pos:start="123:32" pos:end="123:47">SS_ISFCONNECTING</name></expr>)</condition> <block pos:start="123:50" pos:end="131:13">{<block_content pos:start="125:17" pos:end="129:25">

                <expr_stmt pos:start="125:17" pos:end="125:40"><expr pos:start="125:17" pos:end="125:39"><call pos:start="125:17" pos:end="125:39"><name pos:start="125:17" pos:end="125:22">FD_SET</name><argument_list pos:start="125:23" pos:end="125:39">(<argument pos:start="125:24" pos:end="125:28"><expr pos:start="125:24" pos:end="125:28"><name pos:start="125:24" pos:end="125:28"><name pos:start="125:24" pos:end="125:25">so</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:28">s</name></name></expr></argument>, <argument pos:start="125:31" pos:end="125:38"><expr pos:start="125:31" pos:end="125:38"><name pos:start="125:31" pos:end="125:38">writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:32"><expr pos:start="127:17" pos:end="127:31"><call pos:start="127:17" pos:end="127:31"><name pos:start="127:17" pos:end="127:24">UPD_NFDS</name><argument_list pos:start="127:25" pos:end="127:31">(<argument pos:start="127:26" pos:end="127:30"><expr pos:start="127:26" pos:end="127:30"><name pos:start="127:26" pos:end="127:30"><name pos:start="127:26" pos:end="127:27">so</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:30">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="129:17" pos:end="129:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="135:13" pos:end="141:15">/*

             * Set for writing if we are connected, can send more, and

             * we have something to send

             */</comment>

            <if_stmt pos:start="143:13" pos:end="149:13"><if pos:start="143:13" pos:end="149:13">if <condition pos:start="143:16" pos:end="143:54">(<expr pos:start="143:17" pos:end="143:53"><call pos:start="143:17" pos:end="143:33"><name pos:start="143:17" pos:end="143:29">CONN_CANFSEND</name><argument_list pos:start="143:30" pos:end="143:33">(<argument pos:start="143:31" pos:end="143:32"><expr pos:start="143:31" pos:end="143:32"><name pos:start="143:31" pos:end="143:32">so</name></expr></argument>)</argument_list></call> <operator pos:start="143:35" pos:end="143:36">&amp;&amp;</operator> <name pos:start="143:38" pos:end="143:53"><name pos:start="143:38" pos:end="143:39">so</name><operator pos:start="143:40" pos:end="143:41">-&gt;</operator><name pos:start="143:42" pos:end="143:47">so_rcv</name><operator pos:start="143:48" pos:end="143:48">.</operator><name pos:start="143:49" pos:end="143:53">sb_cc</name></name></expr>)</condition> <block pos:start="143:56" pos:end="149:13">{<block_content pos:start="145:17" pos:end="147:32">

                <expr_stmt pos:start="145:17" pos:end="145:40"><expr pos:start="145:17" pos:end="145:39"><call pos:start="145:17" pos:end="145:39"><name pos:start="145:17" pos:end="145:22">FD_SET</name><argument_list pos:start="145:23" pos:end="145:39">(<argument pos:start="145:24" pos:end="145:28"><expr pos:start="145:24" pos:end="145:28"><name pos:start="145:24" pos:end="145:28"><name pos:start="145:24" pos:end="145:25">so</name><operator pos:start="145:26" pos:end="145:27">-&gt;</operator><name pos:start="145:28" pos:end="145:28">s</name></name></expr></argument>, <argument pos:start="145:31" pos:end="145:38"><expr pos:start="145:31" pos:end="145:38"><name pos:start="145:31" pos:end="145:38">writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:32"><expr pos:start="147:17" pos:end="147:31"><call pos:start="147:17" pos:end="147:31"><name pos:start="147:17" pos:end="147:24">UPD_NFDS</name><argument_list pos:start="147:25" pos:end="147:31">(<argument pos:start="147:26" pos:end="147:30"><expr pos:start="147:26" pos:end="147:30"><name pos:start="147:26" pos:end="147:30"><name pos:start="147:26" pos:end="147:27">so</name><operator pos:start="147:28" pos:end="147:29">-&gt;</operator><name pos:start="147:30" pos:end="147:30">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="153:13" pos:end="159:15">/*

             * Set for reading (and urgent data) if we are connected, can

             * receive more, and we have room for it XXX /2 ?

             */</comment>

            <if_stmt pos:start="161:13" pos:end="171:13"><if pos:start="161:13" pos:end="171:13">if <condition pos:start="161:16" pos:end="163:63">(<expr pos:start="161:17" pos:end="163:62"><call pos:start="161:17" pos:end="161:32"><name pos:start="161:17" pos:end="161:28">CONN_CANFRCV</name><argument_list pos:start="161:29" pos:end="161:32">(<argument pos:start="161:30" pos:end="161:31"><expr pos:start="161:30" pos:end="161:31"><name pos:start="161:30" pos:end="161:31">so</name></expr></argument>)</argument_list></call> <operator pos:start="161:34" pos:end="161:35">&amp;&amp;</operator>

                <operator pos:start="163:17" pos:end="163:17">(</operator><name pos:start="163:18" pos:end="163:33"><name pos:start="163:18" pos:end="163:19">so</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:27">so_snd</name><operator pos:start="163:28" pos:end="163:28">.</operator><name pos:start="163:29" pos:end="163:33">sb_cc</name></name> <operator pos:start="163:35" pos:end="163:35">&lt;</operator> <operator pos:start="163:37" pos:end="163:37">(</operator><name pos:start="163:38" pos:end="163:58"><name pos:start="163:38" pos:end="163:39">so</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:47">so_snd</name><operator pos:start="163:48" pos:end="163:48">.</operator><name pos:start="163:49" pos:end="163:58">sb_datalen</name></name><operator pos:start="163:59" pos:end="163:59">/</operator><literal type="number" pos:start="163:60" pos:end="163:60">2</literal><operator pos:start="163:61" pos:end="163:61">)</operator><operator pos:start="163:62" pos:end="163:62">)</operator></expr>)</condition> <block pos:start="163:65" pos:end="171:13">{<block_content pos:start="165:17" pos:end="169:32">

                <expr_stmt pos:start="165:17" pos:end="165:39"><expr pos:start="165:17" pos:end="165:38"><call pos:start="165:17" pos:end="165:38"><name pos:start="165:17" pos:end="165:22">FD_SET</name><argument_list pos:start="165:23" pos:end="165:38">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:25">so</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:28">s</name></name></expr></argument>, <argument pos:start="165:31" pos:end="165:37"><expr pos:start="165:31" pos:end="165:37"><name pos:start="165:31" pos:end="165:37">readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:36"><expr pos:start="167:17" pos:end="167:35"><call pos:start="167:17" pos:end="167:35"><name pos:start="167:17" pos:end="167:22">FD_SET</name><argument_list pos:start="167:23" pos:end="167:35">(<argument pos:start="167:24" pos:end="167:28"><expr pos:start="167:24" pos:end="167:28"><name pos:start="167:24" pos:end="167:28"><name pos:start="167:24" pos:end="167:25">so</name><operator pos:start="167:26" pos:end="167:27">-&gt;</operator><name pos:start="167:28" pos:end="167:28">s</name></name></expr></argument>, <argument pos:start="167:31" pos:end="167:34"><expr pos:start="167:31" pos:end="167:34"><name pos:start="167:31" pos:end="167:34">xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:32"><expr pos:start="169:17" pos:end="169:31"><call pos:start="169:17" pos:end="169:31"><name pos:start="169:17" pos:end="169:24">UPD_NFDS</name><argument_list pos:start="169:25" pos:end="169:31">(<argument pos:start="169:26" pos:end="169:30"><expr pos:start="169:26" pos:end="169:30"><name pos:start="169:26" pos:end="169:30"><name pos:start="169:26" pos:end="169:27">so</name><operator pos:start="169:28" pos:end="169:29">-&gt;</operator><name pos:start="169:30" pos:end="169:30">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="177:9" pos:end="181:11">/*

         * UDP sockets

         */</comment>

        <for pos:start="183:9" pos:end="243:9">for <control pos:start="183:13" pos:end="185:29">(<init pos:start="183:14" pos:end="183:37"><expr pos:start="183:14" pos:end="183:36"><name pos:start="183:14" pos:end="183:15">so</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <name pos:start="183:19" pos:end="183:36"><name pos:start="183:19" pos:end="183:23">slirp</name><operator pos:start="183:24" pos:end="183:25">-&gt;</operator><name pos:start="183:26" pos:end="183:28">udb</name><operator pos:start="183:29" pos:end="183:29">.</operator><name pos:start="183:30" pos:end="183:36">so_next</name></name></expr>;</init> <condition pos:start="183:39" pos:end="183:56"><expr pos:start="183:39" pos:end="183:55"><name pos:start="183:39" pos:end="183:40">so</name> <operator pos:start="183:42" pos:end="183:43">!=</operator> <operator pos:start="183:45" pos:end="183:45">&amp;</operator><name pos:start="183:46" pos:end="183:55"><name pos:start="183:46" pos:end="183:50">slirp</name><operator pos:start="183:51" pos:end="183:52">-&gt;</operator><name pos:start="183:53" pos:end="183:55">udb</name></name></expr>;</condition>

                <incr pos:start="185:17" pos:end="185:28"><expr pos:start="185:17" pos:end="185:28"><name pos:start="185:17" pos:end="185:18">so</name> <operator pos:start="185:20" pos:end="185:20">=</operator> <name pos:start="185:22" pos:end="185:28">so_next</name></expr></incr>)</control> <block pos:start="185:31" pos:end="243:9">{<block_content pos:start="187:13" pos:end="241:13">

            <expr_stmt pos:start="187:13" pos:end="187:34"><expr pos:start="187:13" pos:end="187:33"><name pos:start="187:13" pos:end="187:19">so_next</name> <operator pos:start="187:21" pos:end="187:21">=</operator> <name pos:start="187:23" pos:end="187:33"><name pos:start="187:23" pos:end="187:24">so</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:33">so_next</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="191:13" pos:end="195:15">/*

             * See if it's timed out

             */</comment>

            <if_stmt pos:start="197:13" pos:end="211:13"><if pos:start="197:13" pos:end="211:13">if <condition pos:start="197:16" pos:end="197:30">(<expr pos:start="197:17" pos:end="197:29"><name pos:start="197:17" pos:end="197:29"><name pos:start="197:17" pos:end="197:18">so</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:29">so_expire</name></name></expr>)</condition> <block pos:start="197:32" pos:end="211:13">{<block_content pos:start="199:17" pos:end="209:17">

                <if_stmt pos:start="199:17" pos:end="209:17"><if pos:start="199:17" pos:end="205:17">if <condition pos:start="199:20" pos:end="199:45">(<expr pos:start="199:21" pos:end="199:44"><name pos:start="199:21" pos:end="199:33"><name pos:start="199:21" pos:end="199:22">so</name><operator pos:start="199:23" pos:end="199:24">-&gt;</operator><name pos:start="199:25" pos:end="199:33">so_expire</name></name> <operator pos:start="199:35" pos:end="199:36">&lt;=</operator> <name pos:start="199:38" pos:end="199:44">curtime</name></expr>)</condition> <block pos:start="199:47" pos:end="205:17">{<block_content pos:start="201:21" pos:end="203:29">

                    <expr_stmt pos:start="201:21" pos:end="201:35"><expr pos:start="201:21" pos:end="201:34"><call pos:start="201:21" pos:end="201:34"><name pos:start="201:21" pos:end="201:30">udp_detach</name><argument_list pos:start="201:31" pos:end="201:34">(<argument pos:start="201:32" pos:end="201:33"><expr pos:start="201:32" pos:end="201:33"><name pos:start="201:32" pos:end="201:33">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="203:21" pos:end="203:29">continue;</continue>

                </block_content>}</block></if> <else pos:start="205:19" pos:end="209:17">else <block pos:start="205:24" pos:end="209:17">{<block_content pos:start="207:21" pos:end="207:36">

                    <expr_stmt pos:start="207:21" pos:end="207:36"><expr pos:start="207:21" pos:end="207:35"><name pos:start="207:21" pos:end="207:31">do_slowtimo</name> <operator pos:start="207:33" pos:end="207:33">=</operator> <literal type="number" pos:start="207:35" pos:end="207:35">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="207:38" pos:end="207:60">/* Let socket expire */</comment>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="215:13" pos:end="233:15">/*

             * When UDP packets are received from over the

             * link, they're sendto()'d straight away, so

             * no need for setting for writing

             * Limit the number of packets queued by this session

             * to 4.  Note that even though we try and limit this

             * to 4 packets, the session could have more queued

             * if the packets needed to be fragmented

             * (XXX &lt;= 4 ?)

             */</comment>

            <if_stmt pos:start="235:13" pos:end="241:13"><if pos:start="235:13" pos:end="241:13">if <condition pos:start="235:16" pos:end="235:71">(<expr pos:start="235:17" pos:end="235:70"><operator pos:start="235:17" pos:end="235:17">(</operator><name pos:start="235:18" pos:end="235:29"><name pos:start="235:18" pos:end="235:19">so</name><operator pos:start="235:20" pos:end="235:21">-&gt;</operator><name pos:start="235:22" pos:end="235:29">so_state</name></name> <operator pos:start="235:31" pos:end="235:31">&amp;</operator> <name pos:start="235:33" pos:end="235:47">SS_ISFCONNECTED</name><operator pos:start="235:48" pos:end="235:48">)</operator> <operator pos:start="235:50" pos:end="235:51">&amp;&amp;</operator> <name pos:start="235:53" pos:end="235:65"><name pos:start="235:53" pos:end="235:54">so</name><operator pos:start="235:55" pos:end="235:56">-&gt;</operator><name pos:start="235:57" pos:end="235:65">so_queued</name></name> <operator pos:start="235:67" pos:end="235:68">&lt;=</operator> <literal type="number" pos:start="235:70" pos:end="235:70">4</literal></expr>)</condition> <block pos:start="235:73" pos:end="241:13">{<block_content pos:start="237:17" pos:end="239:32">

                <expr_stmt pos:start="237:17" pos:end="237:39"><expr pos:start="237:17" pos:end="237:38"><call pos:start="237:17" pos:end="237:38"><name pos:start="237:17" pos:end="237:22">FD_SET</name><argument_list pos:start="237:23" pos:end="237:38">(<argument pos:start="237:24" pos:end="237:28"><expr pos:start="237:24" pos:end="237:28"><name pos:start="237:24" pos:end="237:28"><name pos:start="237:24" pos:end="237:25">so</name><operator pos:start="237:26" pos:end="237:27">-&gt;</operator><name pos:start="237:28" pos:end="237:28">s</name></name></expr></argument>, <argument pos:start="237:31" pos:end="237:37"><expr pos:start="237:31" pos:end="237:37"><name pos:start="237:31" pos:end="237:37">readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:32"><expr pos:start="239:17" pos:end="239:31"><call pos:start="239:17" pos:end="239:31"><name pos:start="239:17" pos:end="239:24">UPD_NFDS</name><argument_list pos:start="239:25" pos:end="239:31">(<argument pos:start="239:26" pos:end="239:30"><expr pos:start="239:26" pos:end="239:30"><name pos:start="239:26" pos:end="239:30"><name pos:start="239:26" pos:end="239:27">so</name><operator pos:start="239:28" pos:end="239:29">-&gt;</operator><name pos:start="239:30" pos:end="239:30">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="247:9" pos:end="251:11">/*

         * ICMP sockets

         */</comment>

        <for pos:start="253:9" pos:end="293:9">for <control pos:start="253:13" pos:end="255:29">(<init pos:start="253:14" pos:end="253:38"><expr pos:start="253:14" pos:end="253:37"><name pos:start="253:14" pos:end="253:15">so</name> <operator pos:start="253:17" pos:end="253:17">=</operator> <name pos:start="253:19" pos:end="253:37"><name pos:start="253:19" pos:end="253:23">slirp</name><operator pos:start="253:24" pos:end="253:25">-&gt;</operator><name pos:start="253:26" pos:end="253:29">icmp</name><operator pos:start="253:30" pos:end="253:30">.</operator><name pos:start="253:31" pos:end="253:37">so_next</name></name></expr>;</init> <condition pos:start="253:40" pos:end="253:58"><expr pos:start="253:40" pos:end="253:57"><name pos:start="253:40" pos:end="253:41">so</name> <operator pos:start="253:43" pos:end="253:44">!=</operator> <operator pos:start="253:46" pos:end="253:46">&amp;</operator><name pos:start="253:47" pos:end="253:57"><name pos:start="253:47" pos:end="253:51">slirp</name><operator pos:start="253:52" pos:end="253:53">-&gt;</operator><name pos:start="253:54" pos:end="253:57">icmp</name></name></expr>;</condition>

                <incr pos:start="255:17" pos:end="255:28"><expr pos:start="255:17" pos:end="255:28"><name pos:start="255:17" pos:end="255:18">so</name> <operator pos:start="255:20" pos:end="255:20">=</operator> <name pos:start="255:22" pos:end="255:28">so_next</name></expr></incr>)</control> <block pos:start="255:31" pos:end="293:9">{<block_content pos:start="257:13" pos:end="291:13">

            <expr_stmt pos:start="257:13" pos:end="257:34"><expr pos:start="257:13" pos:end="257:33"><name pos:start="257:13" pos:end="257:19">so_next</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <name pos:start="257:23" pos:end="257:33"><name pos:start="257:23" pos:end="257:24">so</name><operator pos:start="257:25" pos:end="257:26">-&gt;</operator><name pos:start="257:27" pos:end="257:33">so_next</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="261:13" pos:end="265:15">/*

             * See if it's timed out

             */</comment>

            <if_stmt pos:start="267:13" pos:end="281:13"><if pos:start="267:13" pos:end="281:13">if <condition pos:start="267:16" pos:end="267:30">(<expr pos:start="267:17" pos:end="267:29"><name pos:start="267:17" pos:end="267:29"><name pos:start="267:17" pos:end="267:18">so</name><operator pos:start="267:19" pos:end="267:20">-&gt;</operator><name pos:start="267:21" pos:end="267:29">so_expire</name></name></expr>)</condition> <block pos:start="267:32" pos:end="281:13">{<block_content pos:start="269:17" pos:end="279:17">

                <if_stmt pos:start="269:17" pos:end="279:17"><if pos:start="269:17" pos:end="275:17">if <condition pos:start="269:20" pos:end="269:45">(<expr pos:start="269:21" pos:end="269:44"><name pos:start="269:21" pos:end="269:33"><name pos:start="269:21" pos:end="269:22">so</name><operator pos:start="269:23" pos:end="269:24">-&gt;</operator><name pos:start="269:25" pos:end="269:33">so_expire</name></name> <operator pos:start="269:35" pos:end="269:36">&lt;=</operator> <name pos:start="269:38" pos:end="269:44">curtime</name></expr>)</condition> <block pos:start="269:47" pos:end="275:17">{<block_content pos:start="271:21" pos:end="273:29">

                    <expr_stmt pos:start="271:21" pos:end="271:36"><expr pos:start="271:21" pos:end="271:35"><call pos:start="271:21" pos:end="271:35"><name pos:start="271:21" pos:end="271:31">icmp_detach</name><argument_list pos:start="271:32" pos:end="271:35">(<argument pos:start="271:33" pos:end="271:34"><expr pos:start="271:33" pos:end="271:34"><name pos:start="271:33" pos:end="271:34">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="273:21" pos:end="273:29">continue;</continue>

                </block_content>}</block></if> <else pos:start="275:19" pos:end="279:17">else <block pos:start="275:24" pos:end="279:17">{<block_content pos:start="277:21" pos:end="277:36">

                    <expr_stmt pos:start="277:21" pos:end="277:36"><expr pos:start="277:21" pos:end="277:35"><name pos:start="277:21" pos:end="277:31">do_slowtimo</name> <operator pos:start="277:33" pos:end="277:33">=</operator> <literal type="number" pos:start="277:35" pos:end="277:35">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="277:38" pos:end="277:60">/* Let socket expire */</comment>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="285:13" pos:end="291:13"><if pos:start="285:13" pos:end="291:13">if <condition pos:start="285:16" pos:end="285:47">(<expr pos:start="285:17" pos:end="285:46"><name pos:start="285:17" pos:end="285:28"><name pos:start="285:17" pos:end="285:18">so</name><operator pos:start="285:19" pos:end="285:20">-&gt;</operator><name pos:start="285:21" pos:end="285:28">so_state</name></name> <operator pos:start="285:30" pos:end="285:30">&amp;</operator> <name pos:start="285:32" pos:end="285:46">SS_ISFCONNECTED</name></expr>)</condition> <block pos:start="285:49" pos:end="291:13">{<block_content pos:start="287:17" pos:end="289:32">

                <expr_stmt pos:start="287:17" pos:end="287:39"><expr pos:start="287:17" pos:end="287:38"><call pos:start="287:17" pos:end="287:38"><name pos:start="287:17" pos:end="287:22">FD_SET</name><argument_list pos:start="287:23" pos:end="287:38">(<argument pos:start="287:24" pos:end="287:28"><expr pos:start="287:24" pos:end="287:28"><name pos:start="287:24" pos:end="287:28"><name pos:start="287:24" pos:end="287:25">so</name><operator pos:start="287:26" pos:end="287:27">-&gt;</operator><name pos:start="287:28" pos:end="287:28">s</name></name></expr></argument>, <argument pos:start="287:31" pos:end="287:37"><expr pos:start="287:31" pos:end="287:37"><name pos:start="287:31" pos:end="287:37">readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:32"><expr pos:start="289:17" pos:end="289:31"><call pos:start="289:17" pos:end="289:31"><name pos:start="289:17" pos:end="289:24">UPD_NFDS</name><argument_list pos:start="289:25" pos:end="289:31">(<argument pos:start="289:26" pos:end="289:30"><expr pos:start="289:26" pos:end="289:30"><name pos:start="289:26" pos:end="289:30"><name pos:start="289:26" pos:end="289:27">so</name><operator pos:start="289:28" pos:end="289:29">-&gt;</operator><name pos:start="289:30" pos:end="289:30">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <expr_stmt pos:start="299:5" pos:end="299:18"><expr pos:start="299:5" pos:end="299:17"><operator pos:start="299:5" pos:end="299:5">*</operator><name pos:start="299:6" pos:end="299:10">pnfds</name> <operator pos:start="299:12" pos:end="299:12">=</operator> <name pos:start="299:14" pos:end="299:17">nfds</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
