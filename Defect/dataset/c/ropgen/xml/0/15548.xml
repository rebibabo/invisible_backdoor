<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15548.c" pos:tabs="8"><function pos:start="1:1" pos:end="431:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vmdk_create</name><parameter_list pos:start="1:23" pos:end="1:74">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:43">filename</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:53">QemuOpts</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">opts</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:66">Error</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier><modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="431:1">{<block_content pos:start="5:5" pos:end="429:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">idx</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:28">new_bs</name> <init pos:start="7:30" pos:end="7:35">= <expr pos:start="7:32" pos:end="7:35"><name pos:start="7:32" pos:end="7:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:14">desc</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:22">total_size</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>, <decl pos:start="13:29" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:29" pos:end="13:36">filesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:22">adapter_type</name> <init pos:start="15:24" pos:end="15:29">= <expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:22">backing_file</name> <init pos:start="17:24" pos:end="17:29">= <expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:13">fmt</name> <init pos:start="19:15" pos:end="19:20">= <expr pos:start="19:17" pos:end="19:20"><name pos:start="19:17" pos:end="19:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">flags</name> <init pos:start="21:15" pos:end="21:17">= <expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:13">flat</name></decl>, <decl pos:start="25:16" pos:end="25:20"><type ref="prev" pos:start="25:5" pos:end="25:8"/><name pos:start="25:16" pos:end="25:20">split</name></decl>, <decl pos:start="25:23" pos:end="25:30"><type ref="prev" pos:start="25:5" pos:end="25:8"/><name pos:start="25:23" pos:end="25:30">compress</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">GString</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:27">ext_desc_lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:61"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">char</name></type> <name pos:start="29:10" pos:end="29:23"><name pos:start="29:10" pos:end="29:13">path</name><index pos:start="29:14" pos:end="29:23">[<expr pos:start="29:15" pos:end="29:22"><name pos:start="29:15" pos:end="29:22">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="29:26" pos:end="29:41"><type ref="prev" pos:start="29:5" pos:end="29:8"/><name pos:start="29:26" pos:end="29:41"><name pos:start="29:26" pos:end="29:31">prefix</name><index pos:start="29:32" pos:end="29:41">[<expr pos:start="29:33" pos:end="29:40"><name pos:start="29:33" pos:end="29:40">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="29:44" pos:end="29:60"><type ref="prev" pos:start="29:5" pos:end="29:8"/><name pos:start="29:44" pos:end="29:60"><name pos:start="29:44" pos:end="29:50">postfix</name><index pos:start="29:51" pos:end="29:60">[<expr pos:start="29:52" pos:end="29:59"><name pos:start="29:52" pos:end="29:59">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:42"><decl pos:start="31:5" pos:end="31:41"><type pos:start="31:5" pos:end="31:17"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:17">int64_t</name></type> <name pos:start="31:19" pos:end="31:28">split_size</name> <init pos:start="31:30" pos:end="31:41">= <expr pos:start="31:32" pos:end="31:41"><literal type="number" pos:start="31:32" pos:end="31:41">0x80000000</literal></expr></init></decl>;</decl_stmt>  <comment type="block" pos:start="31:45" pos:end="31:78">/* VMDK has constant split size */</comment>

    <decl_stmt pos:start="33:5" pos:end="33:33"><decl pos:start="33:5" pos:end="33:32"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:14">char</name> <modifier pos:start="33:16" pos:end="33:16">*</modifier></type><name pos:start="33:17" pos:end="33:32">desc_extent_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:41"><decl pos:start="35:5" pos:end="35:40"><type pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:8">char</name></type> <name pos:start="35:10" pos:end="35:35"><name pos:start="35:10" pos:end="35:25">parent_desc_line</name><index pos:start="35:26" pos:end="35:35">[<expr pos:start="35:27" pos:end="35:34"><name pos:start="35:27" pos:end="35:34">BUF_SIZE</name></expr>]</index></name> <init pos:start="35:37" pos:end="35:40">= <expr pos:start="35:39" pos:end="35:40"><literal type="string" pos:start="35:39" pos:end="35:40">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:37"><decl pos:start="37:5" pos:end="37:36"><type pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:12">uint32_t</name></type> <name pos:start="37:14" pos:end="37:23">parent_cid</name> <init pos:start="37:25" pos:end="37:36">= <expr pos:start="37:27" pos:end="37:36"><literal type="number" pos:start="37:27" pos:end="37:36">0xffffffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:31"><decl pos:start="39:5" pos:end="39:30"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:12">uint32_t</name></type> <name pos:start="39:14" pos:end="39:25">number_heads</name> <init pos:start="39:27" pos:end="39:30">= <expr pos:start="39:29" pos:end="39:30"><literal type="number" pos:start="39:29" pos:end="39:30">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:30"><decl pos:start="41:5" pos:end="41:29"><type pos:start="41:5" pos:end="41:8"><name pos:start="41:5" pos:end="41:8">bool</name></type> <name pos:start="41:10" pos:end="41:21">zeroed_grain</name> <init pos:start="41:23" pos:end="41:29">= <expr pos:start="41:25" pos:end="41:29"><name pos:start="41:25" pos:end="41:29">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:39"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:12">uint32_t</name></type> <name pos:start="43:14" pos:end="43:24">desc_offset</name> <init pos:start="43:26" pos:end="43:28">= <expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">0</literal></expr></init></decl>, <decl pos:start="43:31" pos:end="43:38"><type ref="prev" pos:start="43:5" pos:end="43:12"/><name pos:start="43:31" pos:end="43:38">desc_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="81:37"><decl pos:start="45:5" pos:end="81:36"><type pos:start="45:5" pos:end="45:14"><specifier pos:start="45:5" pos:end="45:9">const</specifier> <name pos:start="45:11" pos:end="45:14">char</name></type> <name pos:start="45:16" pos:end="45:30"><name pos:start="45:16" pos:end="45:28">desc_template</name><index pos:start="45:29" pos:end="45:30">[]</index></name> <init pos:start="45:32" pos:end="81:36">=

        <expr pos:start="47:9" pos:end="81:36"><literal type="string" pos:start="47:9" pos:end="47:33">"# Disk DescriptorFile\n"</literal>

        <literal type="string" pos:start="49:9" pos:end="49:21">"version=1\n"</literal>

        <literal type="string" pos:start="51:9" pos:end="51:15">"CID=%"</literal> <name pos:start="51:17" pos:end="51:22">PRIx32</name> <literal type="string" pos:start="51:24" pos:end="51:27">"\n"</literal>

        <literal type="string" pos:start="53:9" pos:end="53:21">"parentCID=%"</literal> <name pos:start="53:23" pos:end="53:28">PRIx32</name> <literal type="string" pos:start="53:30" pos:end="53:33">"\n"</literal>

        <literal type="string" pos:start="55:9" pos:end="55:29">"createType=\"%s\"\n"</literal>

        <literal type="string" pos:start="57:9" pos:end="57:12">"%s"</literal>

        <literal type="string" pos:start="59:9" pos:end="59:12">"\n"</literal>

        <literal type="string" pos:start="61:9" pos:end="61:32">"# Extent description\n"</literal>

        <literal type="string" pos:start="63:9" pos:end="63:12">"%s"</literal>

        <literal type="string" pos:start="65:9" pos:end="65:12">"\n"</literal>

        <literal type="string" pos:start="67:9" pos:end="67:32">"# The Disk Data Base\n"</literal>

        <literal type="string" pos:start="69:9" pos:end="69:16">"#DDB\n"</literal>

        <literal type="string" pos:start="71:9" pos:end="71:12">"\n"</literal>

        <literal type="string" pos:start="73:9" pos:end="73:41">"ddb.virtualHWVersion = \"%d\"\n"</literal>

        <literal type="string" pos:start="75:9" pos:end="75:38">"ddb.geometry.cylinders = \"%"</literal> <name pos:start="75:40" pos:end="75:45">PRId64</name> <literal type="string" pos:start="75:47" pos:end="75:52">"\"\n"</literal>

        <literal type="string" pos:start="77:9" pos:end="77:34">"ddb.geometry.heads = \"%"</literal> <name pos:start="77:36" pos:end="77:41">PRIu32</name> <literal type="string" pos:start="77:43" pos:end="77:48">"\"\n"</literal>

        <literal type="string" pos:start="79:9" pos:end="79:41">"ddb.geometry.sectors = \"63\"\n"</literal>

        <literal type="string" pos:start="81:9" pos:end="81:36">"ddb.adapterType = \"%s\"\n"</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:40"><expr pos:start="85:5" pos:end="85:39"><name pos:start="85:5" pos:end="85:18">ext_desc_lines</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:39"><name pos:start="85:22" pos:end="85:33">g_string_new</name><argument_list pos:start="85:34" pos:end="85:39">(<argument pos:start="85:35" pos:end="85:38"><expr pos:start="85:35" pos:end="85:38"><name pos:start="85:35" pos:end="85:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:76">(<expr pos:start="89:9" pos:end="89:75"><call pos:start="89:9" pos:end="89:75"><name pos:start="89:9" pos:end="89:26">filename_decompose</name><argument_list pos:start="89:27" pos:end="89:75">(<argument pos:start="89:28" pos:end="89:35"><expr pos:start="89:28" pos:end="89:35"><name pos:start="89:28" pos:end="89:35">filename</name></expr></argument>, <argument pos:start="89:38" pos:end="89:41"><expr pos:start="89:38" pos:end="89:41"><name pos:start="89:38" pos:end="89:41">path</name></expr></argument>, <argument pos:start="89:44" pos:end="89:49"><expr pos:start="89:44" pos:end="89:49"><name pos:start="89:44" pos:end="89:49">prefix</name></expr></argument>, <argument pos:start="89:52" pos:end="89:58"><expr pos:start="89:52" pos:end="89:58"><name pos:start="89:52" pos:end="89:58">postfix</name></expr></argument>, <argument pos:start="89:61" pos:end="89:68"><expr pos:start="89:61" pos:end="89:68"><name pos:start="89:61" pos:end="89:68">PATH_MAX</name></expr></argument>, <argument pos:start="89:71" pos:end="89:74"><expr pos:start="89:71" pos:end="89:74"><name pos:start="89:71" pos:end="89:74">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:78" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:18">

        <expr_stmt pos:start="91:9" pos:end="91:22"><expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <operator pos:start="91:15" pos:end="91:15">-</operator><name pos:start="91:16" pos:end="91:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:18">goto <name pos:start="93:14" pos:end="93:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="97:5" pos:end="97:26">/* Read out options */</comment>

    <expr_stmt pos:start="99:5" pos:end="101:44"><expr pos:start="99:5" pos:end="101:43"><name pos:start="99:5" pos:end="99:14">total_size</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <call pos:start="99:18" pos:end="101:43"><name pos:start="99:18" pos:end="99:25">ROUND_UP</name><argument_list pos:start="99:26" pos:end="101:43">(<argument pos:start="99:27" pos:end="99:72"><expr pos:start="99:27" pos:end="99:72"><call pos:start="99:27" pos:end="99:72"><name pos:start="99:27" pos:end="99:47">qemu_opt_get_size_del</name><argument_list pos:start="99:48" pos:end="99:72">(<argument pos:start="99:49" pos:end="99:52"><expr pos:start="99:49" pos:end="99:52"><name pos:start="99:49" pos:end="99:52">opts</name></expr></argument>, <argument pos:start="99:55" pos:end="99:68"><expr pos:start="99:55" pos:end="99:68"><name pos:start="99:55" pos:end="99:68">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="99:71" pos:end="99:71"><expr pos:start="99:71" pos:end="99:71"><literal type="number" pos:start="99:71" pos:end="99:71">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="101:27" pos:end="101:42"><expr pos:start="101:27" pos:end="101:42"><name pos:start="101:27" pos:end="101:42">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:66"><expr pos:start="103:5" pos:end="103:65"><name pos:start="103:5" pos:end="103:16">adapter_type</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:65"><name pos:start="103:20" pos:end="103:35">qemu_opt_get_del</name><argument_list pos:start="103:36" pos:end="103:65">(<argument pos:start="103:37" pos:end="103:40"><expr pos:start="103:37" pos:end="103:40"><name pos:start="103:37" pos:end="103:40">opts</name></expr></argument>, <argument pos:start="103:43" pos:end="103:64"><expr pos:start="103:43" pos:end="103:64"><name pos:start="103:43" pos:end="103:64">BLOCK_OPT_ADAPTER_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:66"><expr pos:start="105:5" pos:end="105:65"><name pos:start="105:5" pos:end="105:16">backing_file</name> <operator pos:start="105:18" pos:end="105:18">=</operator> <call pos:start="105:20" pos:end="105:65"><name pos:start="105:20" pos:end="105:35">qemu_opt_get_del</name><argument_list pos:start="105:36" pos:end="105:65">(<argument pos:start="105:37" pos:end="105:40"><expr pos:start="105:37" pos:end="105:40"><name pos:start="105:37" pos:end="105:40">opts</name></expr></argument>, <argument pos:start="105:43" pos:end="105:64"><expr pos:start="105:43" pos:end="105:64"><name pos:start="105:43" pos:end="105:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:62">(<expr pos:start="107:9" pos:end="107:61"><call pos:start="107:9" pos:end="107:61"><name pos:start="107:9" pos:end="107:29">qemu_opt_get_bool_del</name><argument_list pos:start="107:30" pos:end="107:61">(<argument pos:start="107:31" pos:end="107:34"><expr pos:start="107:31" pos:end="107:34"><name pos:start="107:31" pos:end="107:34">opts</name></expr></argument>, <argument pos:start="107:37" pos:end="107:53"><expr pos:start="107:37" pos:end="107:53"><name pos:start="107:37" pos:end="107:53">BLOCK_OPT_COMPAT6</name></expr></argument>, <argument pos:start="107:56" pos:end="107:60"><expr pos:start="107:56" pos:end="107:60"><name pos:start="107:56" pos:end="107:60">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:64" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:36">

        <expr_stmt pos:start="109:9" pos:end="109:36"><expr pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:13">flags</name> <operator pos:start="109:15" pos:end="109:16">|=</operator> <name pos:start="109:18" pos:end="109:35">BLOCK_FLAG_COMPAT6</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:51"><expr pos:start="113:5" pos:end="113:50"><name pos:start="113:5" pos:end="113:7">fmt</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <call pos:start="113:11" pos:end="113:50"><name pos:start="113:11" pos:end="113:26">qemu_opt_get_del</name><argument_list pos:start="113:27" pos:end="113:50">(<argument pos:start="113:28" pos:end="113:31"><expr pos:start="113:28" pos:end="113:31"><name pos:start="113:28" pos:end="113:31">opts</name></expr></argument>, <argument pos:start="113:34" pos:end="113:49"><expr pos:start="113:34" pos:end="113:49"><name pos:start="113:34" pos:end="113:49">BLOCK_OPT_SUBFMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:67">(<expr pos:start="115:9" pos:end="115:66"><call pos:start="115:9" pos:end="115:66"><name pos:start="115:9" pos:end="115:29">qemu_opt_get_bool_del</name><argument_list pos:start="115:30" pos:end="115:66">(<argument pos:start="115:31" pos:end="115:34"><expr pos:start="115:31" pos:end="115:34"><name pos:start="115:31" pos:end="115:34">opts</name></expr></argument>, <argument pos:start="115:37" pos:end="115:58"><expr pos:start="115:37" pos:end="115:58"><name pos:start="115:37" pos:end="115:58">BLOCK_OPT_ZEROED_GRAIN</name></expr></argument>, <argument pos:start="115:61" pos:end="115:65"><expr pos:start="115:61" pos:end="115:65"><name pos:start="115:61" pos:end="115:65">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:69" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:28">

        <expr_stmt pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:20">zeroed_grain</name> <operator pos:start="117:22" pos:end="117:22">=</operator> <name pos:start="117:24" pos:end="117:27">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="141:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:22">(<expr pos:start="123:9" pos:end="123:21"><operator pos:start="123:9" pos:end="123:9">!</operator><name pos:start="123:10" pos:end="123:21">adapter_type</name></expr>)</condition> <block pos:start="123:24" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:39">

        <expr_stmt pos:start="125:9" pos:end="125:39"><expr pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:20">adapter_type</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <call pos:start="125:24" pos:end="125:38"><name pos:start="125:24" pos:end="125:31">g_strdup</name><argument_list pos:start="125:32" pos:end="125:38">(<argument pos:start="125:33" pos:end="125:37"><expr pos:start="125:33" pos:end="125:37"><literal type="string" pos:start="125:33" pos:end="125:37">"ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="127:7" pos:end="141:5">else if <condition pos:start="127:15" pos:end="133:49">(<expr pos:start="127:16" pos:end="133:48"><call pos:start="127:16" pos:end="127:42"><name pos:start="127:16" pos:end="127:21">strcmp</name><argument_list pos:start="127:22" pos:end="127:42">(<argument pos:start="127:23" pos:end="127:34"><expr pos:start="127:23" pos:end="127:34"><name pos:start="127:23" pos:end="127:34">adapter_type</name></expr></argument>, <argument pos:start="127:37" pos:end="127:41"><expr pos:start="127:37" pos:end="127:41"><literal type="string" pos:start="127:37" pos:end="127:41">"ide"</literal></expr></argument>)</argument_list></call> <operator pos:start="127:44" pos:end="127:45">&amp;&amp;</operator>

               <call pos:start="129:16" pos:end="129:47"><name pos:start="129:16" pos:end="129:21">strcmp</name><argument_list pos:start="129:22" pos:end="129:47">(<argument pos:start="129:23" pos:end="129:34"><expr pos:start="129:23" pos:end="129:34"><name pos:start="129:23" pos:end="129:34">adapter_type</name></expr></argument>, <argument pos:start="129:37" pos:end="129:46"><expr pos:start="129:37" pos:end="129:46"><literal type="string" pos:start="129:37" pos:end="129:46">"buslogic"</literal></expr></argument>)</argument_list></call> <operator pos:start="129:49" pos:end="129:50">&amp;&amp;</operator>

               <call pos:start="131:16" pos:end="131:47"><name pos:start="131:16" pos:end="131:21">strcmp</name><argument_list pos:start="131:22" pos:end="131:47">(<argument pos:start="131:23" pos:end="131:34"><expr pos:start="131:23" pos:end="131:34"><name pos:start="131:23" pos:end="131:34">adapter_type</name></expr></argument>, <argument pos:start="131:37" pos:end="131:46"><expr pos:start="131:37" pos:end="131:46"><literal type="string" pos:start="131:37" pos:end="131:46">"lsilogic"</literal></expr></argument>)</argument_list></call> <operator pos:start="131:49" pos:end="131:50">&amp;&amp;</operator>

               <call pos:start="133:16" pos:end="133:48"><name pos:start="133:16" pos:end="133:21">strcmp</name><argument_list pos:start="133:22" pos:end="133:48">(<argument pos:start="133:23" pos:end="133:34"><expr pos:start="133:23" pos:end="133:34"><name pos:start="133:23" pos:end="133:34">adapter_type</name></expr></argument>, <argument pos:start="133:37" pos:end="133:47"><expr pos:start="133:37" pos:end="133:47"><literal type="string" pos:start="133:37" pos:end="133:47">"legacyESX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:51" pos:end="141:5">{<block_content pos:start="135:9" pos:end="139:18">

        <expr_stmt pos:start="135:9" pos:end="135:69"><expr pos:start="135:9" pos:end="135:68"><call pos:start="135:9" pos:end="135:68"><name pos:start="135:9" pos:end="135:18">error_setg</name><argument_list pos:start="135:19" pos:end="135:68">(<argument pos:start="135:20" pos:end="135:23"><expr pos:start="135:20" pos:end="135:23"><name pos:start="135:20" pos:end="135:23">errp</name></expr></argument>, <argument pos:start="135:26" pos:end="135:53"><expr pos:start="135:26" pos:end="135:53"><literal type="string" pos:start="135:26" pos:end="135:53">"Unknown adapter type: '%s'"</literal></expr></argument>, <argument pos:start="135:56" pos:end="135:67"><expr pos:start="135:56" pos:end="135:67"><name pos:start="135:56" pos:end="135:67">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:22"><expr pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <operator pos:start="137:15" pos:end="137:15">-</operator><name pos:start="137:16" pos:end="137:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="139:9" pos:end="139:18">goto <name pos:start="139:14" pos:end="139:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="143:5" pos:end="151:5"><if pos:start="143:5" pos:end="151:5">if <condition pos:start="143:8" pos:end="143:41">(<expr pos:start="143:9" pos:end="143:40"><call pos:start="143:9" pos:end="143:35"><name pos:start="143:9" pos:end="143:14">strcmp</name><argument_list pos:start="143:15" pos:end="143:35">(<argument pos:start="143:16" pos:end="143:27"><expr pos:start="143:16" pos:end="143:27"><name pos:start="143:16" pos:end="143:27">adapter_type</name></expr></argument>, <argument pos:start="143:30" pos:end="143:34"><expr pos:start="143:30" pos:end="143:34"><literal type="string" pos:start="143:30" pos:end="143:34">"ide"</literal></expr></argument>)</argument_list></call> <operator pos:start="143:37" pos:end="143:38">!=</operator> <literal type="number" pos:start="143:40" pos:end="143:40">0</literal></expr>)</condition> <block pos:start="143:43" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:27">

        <comment type="block" pos:start="145:9" pos:end="147:78">/* that's the number of heads with which vmware operates when

           creating, exporting, etc. vmdk files with a non-ide adapter type */</comment>

        <expr_stmt pos:start="149:9" pos:end="149:27"><expr pos:start="149:9" pos:end="149:26"><name pos:start="149:9" pos:end="149:20">number_heads</name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="number" pos:start="149:24" pos:end="149:26">255</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="153:5" pos:end="175:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:13">(<expr pos:start="153:9" pos:end="153:12"><operator pos:start="153:9" pos:end="153:9">!</operator><name pos:start="153:10" pos:end="153:12">fmt</name></expr>)</condition> <block pos:start="153:15" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:43">

        <comment type="block" pos:start="155:9" pos:end="155:48">/* Default format to monolithicSparse */</comment>

        <expr_stmt pos:start="157:9" pos:end="157:43"><expr pos:start="157:9" pos:end="157:42"><name pos:start="157:9" pos:end="157:11">fmt</name> <operator pos:start="157:13" pos:end="157:13">=</operator> <call pos:start="157:15" pos:end="157:42"><name pos:start="157:15" pos:end="157:22">g_strdup</name><argument_list pos:start="157:23" pos:end="157:42">(<argument pos:start="157:24" pos:end="157:41"><expr pos:start="157:24" pos:end="157:41"><literal type="string" pos:start="157:24" pos:end="157:41">"monolithicSparse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="159:7" pos:end="175:5">else if <condition pos:start="159:15" pos:end="167:46">(<expr pos:start="159:16" pos:end="167:45"><call pos:start="159:16" pos:end="159:44"><name pos:start="159:16" pos:end="159:21">strcmp</name><argument_list pos:start="159:22" pos:end="159:44">(<argument pos:start="159:23" pos:end="159:25"><expr pos:start="159:23" pos:end="159:25"><name pos:start="159:23" pos:end="159:25">fmt</name></expr></argument>, <argument pos:start="159:28" pos:end="159:43"><expr pos:start="159:28" pos:end="159:43"><literal type="string" pos:start="159:28" pos:end="159:43">"monolithicFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="159:46" pos:end="159:47">&amp;&amp;</operator>

               <call pos:start="161:16" pos:end="161:46"><name pos:start="161:16" pos:end="161:21">strcmp</name><argument_list pos:start="161:22" pos:end="161:46">(<argument pos:start="161:23" pos:end="161:25"><expr pos:start="161:23" pos:end="161:25"><name pos:start="161:23" pos:end="161:25">fmt</name></expr></argument>, <argument pos:start="161:28" pos:end="161:45"><expr pos:start="161:28" pos:end="161:45"><literal type="string" pos:start="161:28" pos:end="161:45">"monolithicSparse"</literal></expr></argument>)</argument_list></call> <operator pos:start="161:48" pos:end="161:49">&amp;&amp;</operator>

               <call pos:start="163:16" pos:end="163:50"><name pos:start="163:16" pos:end="163:21">strcmp</name><argument_list pos:start="163:22" pos:end="163:50">(<argument pos:start="163:23" pos:end="163:25"><expr pos:start="163:23" pos:end="163:25"><name pos:start="163:23" pos:end="163:25">fmt</name></expr></argument>, <argument pos:start="163:28" pos:end="163:49"><expr pos:start="163:28" pos:end="163:49"><literal type="string" pos:start="163:28" pos:end="163:49">"twoGbMaxExtentSparse"</literal></expr></argument>)</argument_list></call> <operator pos:start="163:52" pos:end="163:53">&amp;&amp;</operator>

               <call pos:start="165:16" pos:end="165:48"><name pos:start="165:16" pos:end="165:21">strcmp</name><argument_list pos:start="165:22" pos:end="165:48">(<argument pos:start="165:23" pos:end="165:25"><expr pos:start="165:23" pos:end="165:25"><name pos:start="165:23" pos:end="165:25">fmt</name></expr></argument>, <argument pos:start="165:28" pos:end="165:47"><expr pos:start="165:28" pos:end="165:47"><literal type="string" pos:start="165:28" pos:end="165:47">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="165:50" pos:end="165:51">&amp;&amp;</operator>

               <call pos:start="167:16" pos:end="167:45"><name pos:start="167:16" pos:end="167:21">strcmp</name><argument_list pos:start="167:22" pos:end="167:45">(<argument pos:start="167:23" pos:end="167:25"><expr pos:start="167:23" pos:end="167:25"><name pos:start="167:23" pos:end="167:25">fmt</name></expr></argument>, <argument pos:start="167:28" pos:end="167:44"><expr pos:start="167:28" pos:end="167:44"><literal type="string" pos:start="167:28" pos:end="167:44">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:48" pos:end="175:5">{<block_content pos:start="169:9" pos:end="173:18">

        <expr_stmt pos:start="169:9" pos:end="169:57"><expr pos:start="169:9" pos:end="169:56"><call pos:start="169:9" pos:end="169:56"><name pos:start="169:9" pos:end="169:18">error_setg</name><argument_list pos:start="169:19" pos:end="169:56">(<argument pos:start="169:20" pos:end="169:23"><expr pos:start="169:20" pos:end="169:23"><name pos:start="169:20" pos:end="169:23">errp</name></expr></argument>, <argument pos:start="169:26" pos:end="169:50"><expr pos:start="169:26" pos:end="169:50"><literal type="string" pos:start="169:26" pos:end="169:50">"Unknown subformat: '%s'"</literal></expr></argument>, <argument pos:start="169:53" pos:end="169:55"><expr pos:start="169:53" pos:end="169:55"><name pos:start="169:53" pos:end="169:55">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:22"><expr pos:start="171:9" pos:end="171:21"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <operator pos:start="171:15" pos:end="171:15">-</operator><name pos:start="171:16" pos:end="171:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="173:9" pos:end="173:18">goto <name pos:start="173:14" pos:end="173:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="177:5" pos:end="179:51"><expr pos:start="177:5" pos:end="179:50"><name pos:start="177:5" pos:end="177:9">split</name> <operator pos:start="177:11" pos:end="177:11">=</operator> <operator pos:start="177:13" pos:end="177:13">!</operator><operator pos:start="177:14" pos:end="177:14">(</operator><call pos:start="177:15" pos:end="177:47"><name pos:start="177:15" pos:end="177:20">strcmp</name><argument_list pos:start="177:21" pos:end="177:47">(<argument pos:start="177:22" pos:end="177:24"><expr pos:start="177:22" pos:end="177:24"><name pos:start="177:22" pos:end="177:24">fmt</name></expr></argument>, <argument pos:start="177:27" pos:end="177:46"><expr pos:start="177:27" pos:end="177:46"><literal type="string" pos:start="177:27" pos:end="177:46">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="177:49" pos:end="177:50">&amp;&amp;</operator>

              <call pos:start="179:15" pos:end="179:49"><name pos:start="179:15" pos:end="179:20">strcmp</name><argument_list pos:start="179:21" pos:end="179:49">(<argument pos:start="179:22" pos:end="179:24"><expr pos:start="179:22" pos:end="179:24"><name pos:start="179:22" pos:end="179:24">fmt</name></expr></argument>, <argument pos:start="179:27" pos:end="179:48"><expr pos:start="179:27" pos:end="179:48"><literal type="string" pos:start="179:27" pos:end="179:48">"twoGbMaxExtentSparse"</literal></expr></argument>)</argument_list></call><operator pos:start="179:50" pos:end="179:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="183:48"><expr pos:start="181:5" pos:end="183:47"><name pos:start="181:5" pos:end="181:8">flat</name> <operator pos:start="181:10" pos:end="181:10">=</operator> <operator pos:start="181:12" pos:end="181:12">!</operator><operator pos:start="181:13" pos:end="181:13">(</operator><call pos:start="181:14" pos:end="181:42"><name pos:start="181:14" pos:end="181:19">strcmp</name><argument_list pos:start="181:20" pos:end="181:42">(<argument pos:start="181:21" pos:end="181:23"><expr pos:start="181:21" pos:end="181:23"><name pos:start="181:21" pos:end="181:23">fmt</name></expr></argument>, <argument pos:start="181:26" pos:end="181:41"><expr pos:start="181:26" pos:end="181:41"><literal type="string" pos:start="181:26" pos:end="181:41">"monolithicFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="181:44" pos:end="181:45">&amp;&amp;</operator>

             <call pos:start="183:14" pos:end="183:46"><name pos:start="183:14" pos:end="183:19">strcmp</name><argument_list pos:start="183:20" pos:end="183:46">(<argument pos:start="183:21" pos:end="183:23"><expr pos:start="183:21" pos:end="183:23"><name pos:start="183:21" pos:end="183:23">fmt</name></expr></argument>, <argument pos:start="183:26" pos:end="183:45"><expr pos:start="183:26" pos:end="183:45"><literal type="string" pos:start="183:26" pos:end="183:45">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call><operator pos:start="183:47" pos:end="183:47">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:47"><expr pos:start="185:5" pos:end="185:46"><name pos:start="185:5" pos:end="185:12">compress</name> <operator pos:start="185:14" pos:end="185:14">=</operator> <operator pos:start="185:16" pos:end="185:16">!</operator><call pos:start="185:17" pos:end="185:46"><name pos:start="185:17" pos:end="185:22">strcmp</name><argument_list pos:start="185:23" pos:end="185:46">(<argument pos:start="185:24" pos:end="185:26"><expr pos:start="185:24" pos:end="185:26"><name pos:start="185:24" pos:end="185:26">fmt</name></expr></argument>, <argument pos:start="185:29" pos:end="185:45"><expr pos:start="185:29" pos:end="185:45"><literal type="string" pos:start="185:29" pos:end="185:45">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="195:5"><if pos:start="187:5" pos:end="191:5">if <condition pos:start="187:8" pos:end="187:13">(<expr pos:start="187:9" pos:end="187:12"><name pos:start="187:9" pos:end="187:12">flat</name></expr>)</condition> <block pos:start="187:15" pos:end="191:5">{<block_content pos:start="189:9" pos:end="189:60">

        <expr_stmt pos:start="189:9" pos:end="189:60"><expr pos:start="189:9" pos:end="189:59"><name pos:start="189:9" pos:end="189:24">desc_extent_line</name> <operator pos:start="189:26" pos:end="189:26">=</operator> <literal type="string" pos:start="189:28" pos:end="189:33">"RW %"</literal> <name pos:start="189:35" pos:end="189:40">PRId64</name> <literal type="string" pos:start="189:42" pos:end="189:59">" FLAT \"%s\" 0\n"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="191:7" pos:end="195:5">else <block pos:start="191:12" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:60">

        <expr_stmt pos:start="193:9" pos:end="193:60"><expr pos:start="193:9" pos:end="193:59"><name pos:start="193:9" pos:end="193:24">desc_extent_line</name> <operator pos:start="193:26" pos:end="193:26">=</operator> <literal type="string" pos:start="193:28" pos:end="193:33">"RW %"</literal> <name pos:start="193:35" pos:end="193:40">PRId64</name> <literal type="string" pos:start="193:42" pos:end="193:59">" SPARSE \"%s\"\n"</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="197:5" pos:end="205:5"><if pos:start="197:5" pos:end="205:5">if <condition pos:start="197:8" pos:end="197:29">(<expr pos:start="197:9" pos:end="197:28"><name pos:start="197:9" pos:end="197:12">flat</name> <operator pos:start="197:14" pos:end="197:15">&amp;&amp;</operator> <name pos:start="197:17" pos:end="197:28">backing_file</name></expr>)</condition> <block pos:start="197:31" pos:end="205:5">{<block_content pos:start="199:9" pos:end="203:18">

        <expr_stmt pos:start="199:9" pos:end="199:63"><expr pos:start="199:9" pos:end="199:62"><call pos:start="199:9" pos:end="199:62"><name pos:start="199:9" pos:end="199:18">error_setg</name><argument_list pos:start="199:19" pos:end="199:62">(<argument pos:start="199:20" pos:end="199:23"><expr pos:start="199:20" pos:end="199:23"><name pos:start="199:20" pos:end="199:23">errp</name></expr></argument>, <argument pos:start="199:26" pos:end="199:61"><expr pos:start="199:26" pos:end="199:61"><literal type="string" pos:start="199:26" pos:end="199:61">"Flat image can't have backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:23"><expr pos:start="201:9" pos:end="201:22"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">=</operator> <operator pos:start="201:15" pos:end="201:15">-</operator><name pos:start="201:16" pos:end="201:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="203:9" pos:end="203:18">goto <name pos:start="203:14" pos:end="203:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="207:5" pos:end="215:5"><if pos:start="207:5" pos:end="215:5">if <condition pos:start="207:8" pos:end="207:29">(<expr pos:start="207:9" pos:end="207:28"><name pos:start="207:9" pos:end="207:12">flat</name> <operator pos:start="207:14" pos:end="207:15">&amp;&amp;</operator> <name pos:start="207:17" pos:end="207:28">zeroed_grain</name></expr>)</condition> <block pos:start="207:31" pos:end="215:5">{<block_content pos:start="209:9" pos:end="213:18">

        <expr_stmt pos:start="209:9" pos:end="209:65"><expr pos:start="209:9" pos:end="209:64"><call pos:start="209:9" pos:end="209:64"><name pos:start="209:9" pos:end="209:18">error_setg</name><argument_list pos:start="209:19" pos:end="209:64">(<argument pos:start="209:20" pos:end="209:23"><expr pos:start="209:20" pos:end="209:23"><name pos:start="209:20" pos:end="209:23">errp</name></expr></argument>, <argument pos:start="209:26" pos:end="209:63"><expr pos:start="209:26" pos:end="209:63"><literal type="string" pos:start="209:26" pos:end="209:63">"Flat image can't enable zeroed grain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:23"><expr pos:start="211:9" pos:end="211:22"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <operator pos:start="211:15" pos:end="211:15">-</operator><name pos:start="211:16" pos:end="211:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="213:9" pos:end="213:18">goto <name pos:start="213:14" pos:end="213:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="217:5" pos:end="249:5"><if pos:start="217:5" pos:end="249:5">if <condition pos:start="217:8" pos:end="217:21">(<expr pos:start="217:9" pos:end="217:20"><name pos:start="217:9" pos:end="217:20">backing_file</name></expr>)</condition> <block pos:start="217:23" pos:end="249:5">{<block_content pos:start="219:9" pos:end="247:59">

        <decl_stmt pos:start="219:9" pos:end="219:36"><decl pos:start="219:9" pos:end="219:35"><type pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:24">BlockDriverState</name> <modifier pos:start="219:26" pos:end="219:26">*</modifier></type><name pos:start="219:27" pos:end="219:28">bs</name> <init pos:start="219:30" pos:end="219:35">= <expr pos:start="219:32" pos:end="219:35"><name pos:start="219:32" pos:end="219:35">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="221:9" pos:end="223:30"><expr pos:start="221:9" pos:end="223:29"><name pos:start="221:9" pos:end="221:11">ret</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <call pos:start="221:15" pos:end="223:29"><name pos:start="221:15" pos:end="221:23">bdrv_open</name><argument_list pos:start="221:24" pos:end="223:29">(<argument pos:start="221:25" pos:end="221:27"><expr pos:start="221:25" pos:end="221:27"><operator pos:start="221:25" pos:end="221:25">&amp;</operator><name pos:start="221:26" pos:end="221:27">bs</name></expr></argument>, <argument pos:start="221:30" pos:end="221:41"><expr pos:start="221:30" pos:end="221:41"><name pos:start="221:30" pos:end="221:41">backing_file</name></expr></argument>, <argument pos:start="221:44" pos:end="221:47"><expr pos:start="221:44" pos:end="221:47"><name pos:start="221:44" pos:end="221:47">NULL</name></expr></argument>, <argument pos:start="221:50" pos:end="221:53"><expr pos:start="221:50" pos:end="221:53"><name pos:start="221:50" pos:end="221:53">NULL</name></expr></argument>, <argument pos:start="221:56" pos:end="221:72"><expr pos:start="221:56" pos:end="221:72"><name pos:start="221:56" pos:end="221:72">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="221:75" pos:end="221:78"><expr pos:start="221:75" pos:end="221:78"><name pos:start="221:75" pos:end="221:78">NULL</name></expr></argument>,

                        <argument pos:start="223:25" pos:end="223:28"><expr pos:start="223:25" pos:end="223:28"><name pos:start="223:25" pos:end="223:28">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="229:9"><if pos:start="225:9" pos:end="229:9">if <condition pos:start="225:12" pos:end="225:21">(<expr pos:start="225:13" pos:end="225:20"><name pos:start="225:13" pos:end="225:15">ret</name> <operator pos:start="225:17" pos:end="225:18">!=</operator> <literal type="number" pos:start="225:20" pos:end="225:20">0</literal></expr>)</condition> <block pos:start="225:23" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:22">

            <goto pos:start="227:13" pos:end="227:22">goto <name pos:start="227:18" pos:end="227:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="231:9" pos:end="239:9"><if pos:start="231:9" pos:end="239:9">if <condition pos:start="231:12" pos:end="231:49">(<expr pos:start="231:13" pos:end="231:48"><call pos:start="231:13" pos:end="231:48"><name pos:start="231:13" pos:end="231:18">strcmp</name><argument_list pos:start="231:19" pos:end="231:48">(<argument pos:start="231:20" pos:end="231:39"><expr pos:start="231:20" pos:end="231:39"><name pos:start="231:20" pos:end="231:39"><name pos:start="231:20" pos:end="231:21">bs</name><operator pos:start="231:22" pos:end="231:23">-&gt;</operator><name pos:start="231:24" pos:end="231:26">drv</name><operator pos:start="231:27" pos:end="231:28">-&gt;</operator><name pos:start="231:29" pos:end="231:39">format_name</name></name></expr></argument>, <argument pos:start="231:42" pos:end="231:47"><expr pos:start="231:42" pos:end="231:47"><literal type="string" pos:start="231:42" pos:end="231:47">"vmdk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="231:51" pos:end="239:9">{<block_content pos:start="233:13" pos:end="237:22">

            <expr_stmt pos:start="233:13" pos:end="233:27"><expr pos:start="233:13" pos:end="233:26"><call pos:start="233:13" pos:end="233:26"><name pos:start="233:13" pos:end="233:22">bdrv_unref</name><argument_list pos:start="233:23" pos:end="233:26">(<argument pos:start="233:24" pos:end="233:25"><expr pos:start="233:24" pos:end="233:25"><name pos:start="233:24" pos:end="233:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:26"><expr pos:start="235:13" pos:end="235:25"><name pos:start="235:13" pos:end="235:15">ret</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <operator pos:start="235:19" pos:end="235:19">-</operator><name pos:start="235:20" pos:end="235:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="237:13" pos:end="237:22">goto <name pos:start="237:18" pos:end="237:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:42"><expr pos:start="241:9" pos:end="241:41"><name pos:start="241:9" pos:end="241:18">parent_cid</name> <operator pos:start="241:20" pos:end="241:20">=</operator> <call pos:start="241:22" pos:end="241:41"><name pos:start="241:22" pos:end="241:34">vmdk_read_cid</name><argument_list pos:start="241:35" pos:end="241:41">(<argument pos:start="241:36" pos:end="241:37"><expr pos:start="241:36" pos:end="241:37"><name pos:start="241:36" pos:end="241:37">bs</name></expr></argument>, <argument pos:start="241:40" pos:end="241:40"><expr pos:start="241:40" pos:end="241:40"><literal type="number" pos:start="241:40" pos:end="241:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:23"><expr pos:start="243:9" pos:end="243:22"><call pos:start="243:9" pos:end="243:22"><name pos:start="243:9" pos:end="243:18">bdrv_unref</name><argument_list pos:start="243:19" pos:end="243:22">(<argument pos:start="243:20" pos:end="243:21"><expr pos:start="243:20" pos:end="243:21"><name pos:start="243:20" pos:end="243:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="247:59"><expr pos:start="245:9" pos:end="247:58"><call pos:start="245:9" pos:end="247:58"><name pos:start="245:9" pos:end="245:16">snprintf</name><argument_list pos:start="245:17" pos:end="247:58">(<argument pos:start="245:18" pos:end="245:33"><expr pos:start="245:18" pos:end="245:33"><name pos:start="245:18" pos:end="245:33">parent_desc_line</name></expr></argument>, <argument pos:start="245:36" pos:end="245:59"><expr pos:start="245:36" pos:end="245:59"><sizeof pos:start="245:36" pos:end="245:59">sizeof<argument_list pos:start="245:42" pos:end="245:59">(<argument pos:start="245:43" pos:end="245:58"><expr pos:start="245:43" pos:end="245:58"><name pos:start="245:43" pos:end="245:58">parent_desc_line</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="247:17" pos:end="247:43"><expr pos:start="247:17" pos:end="247:43"><literal type="string" pos:start="247:17" pos:end="247:43">"parentFileNameHint=\"%s\""</literal></expr></argument>, <argument pos:start="247:46" pos:end="247:57"><expr pos:start="247:46" pos:end="247:57"><name pos:start="247:46" pos:end="247:57">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:24">/* Create extents */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:26"><expr pos:start="255:5" pos:end="255:25"><name pos:start="255:5" pos:end="255:12">filesize</name> <operator pos:start="255:14" pos:end="255:14">=</operator> <name pos:start="255:16" pos:end="255:25">total_size</name></expr>;</expr_stmt>

    <while pos:start="257:5" pos:end="323:5">while <condition pos:start="257:11" pos:end="257:24">(<expr pos:start="257:12" pos:end="257:23"><name pos:start="257:12" pos:end="257:19">filesize</name> <operator pos:start="257:21" pos:end="257:21">&gt;</operator> <literal type="number" pos:start="257:23" pos:end="257:23">0</literal></expr>)</condition> <block pos:start="257:26" pos:end="323:5">{<block_content pos:start="259:9" pos:end="321:51">

        <decl_stmt pos:start="259:9" pos:end="259:33"><decl pos:start="259:9" pos:end="259:32"><type pos:start="259:9" pos:end="259:12"><name pos:start="259:9" pos:end="259:12">char</name></type> <name pos:start="259:14" pos:end="259:32"><name pos:start="259:14" pos:end="259:22">desc_line</name><index pos:start="259:23" pos:end="259:32">[<expr pos:start="259:24" pos:end="259:31"><name pos:start="259:24" pos:end="259:31">BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="261:9" pos:end="261:36"><decl pos:start="261:9" pos:end="261:35"><type pos:start="261:9" pos:end="261:12"><name pos:start="261:9" pos:end="261:12">char</name></type> <name pos:start="261:14" pos:end="261:35"><name pos:start="261:14" pos:end="261:25">ext_filename</name><index pos:start="261:26" pos:end="261:35">[<expr pos:start="261:27" pos:end="261:34"><name pos:start="261:27" pos:end="261:34">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="263:9" pos:end="263:37"><decl pos:start="263:9" pos:end="263:36"><type pos:start="263:9" pos:end="263:12"><name pos:start="263:9" pos:end="263:12">char</name></type> <name pos:start="263:14" pos:end="263:36"><name pos:start="263:14" pos:end="263:26">desc_filename</name><index pos:start="263:27" pos:end="263:36">[<expr pos:start="263:28" pos:end="263:35"><name pos:start="263:28" pos:end="263:35">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="265:9" pos:end="265:32"><decl pos:start="265:9" pos:end="265:31"><type pos:start="265:9" pos:end="265:15"><name pos:start="265:9" pos:end="265:15">int64_t</name></type> <name pos:start="265:17" pos:end="265:20">size</name> <init pos:start="265:22" pos:end="265:31">= <expr pos:start="265:24" pos:end="265:31"><name pos:start="265:24" pos:end="265:31">filesize</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="269:9" pos:end="273:9"><if pos:start="269:9" pos:end="273:9">if <condition pos:start="269:12" pos:end="269:39">(<expr pos:start="269:13" pos:end="269:38"><name pos:start="269:13" pos:end="269:17">split</name> <operator pos:start="269:19" pos:end="269:20">&amp;&amp;</operator> <name pos:start="269:22" pos:end="269:25">size</name> <operator pos:start="269:27" pos:end="269:27">&gt;</operator> <name pos:start="269:29" pos:end="269:38">split_size</name></expr>)</condition> <block pos:start="269:41" pos:end="273:9">{<block_content pos:start="271:13" pos:end="271:30">

            <expr_stmt pos:start="271:13" pos:end="271:30"><expr pos:start="271:13" pos:end="271:29"><name pos:start="271:13" pos:end="271:16">size</name> <operator pos:start="271:18" pos:end="271:18">=</operator> <name pos:start="271:20" pos:end="271:29">split_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="275:9" pos:end="293:9"><if pos:start="275:9" pos:end="281:9">if <condition pos:start="275:12" pos:end="275:18">(<expr pos:start="275:13" pos:end="275:17"><name pos:start="275:13" pos:end="275:17">split</name></expr>)</condition> <block pos:start="275:20" pos:end="281:9">{<block_content pos:start="277:13" pos:end="279:62">

            <expr_stmt pos:start="277:13" pos:end="279:62"><expr pos:start="277:13" pos:end="279:61"><call pos:start="277:13" pos:end="279:61"><name pos:start="277:13" pos:end="277:20">snprintf</name><argument_list pos:start="277:21" pos:end="279:61">(<argument pos:start="277:22" pos:end="277:34"><expr pos:start="277:22" pos:end="277:34"><name pos:start="277:22" pos:end="277:34">desc_filename</name></expr></argument>, <argument pos:start="277:37" pos:end="277:57"><expr pos:start="277:37" pos:end="277:57"><sizeof pos:start="277:37" pos:end="277:57">sizeof<argument_list pos:start="277:43" pos:end="277:57">(<argument pos:start="277:44" pos:end="277:56"><expr pos:start="277:44" pos:end="277:56"><name pos:start="277:44" pos:end="277:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="277:60" pos:end="277:72"><expr pos:start="277:60" pos:end="277:72"><literal type="string" pos:start="277:60" pos:end="277:72">"%s-%c%03d%s"</literal></expr></argument>,

                    <argument pos:start="279:21" pos:end="279:26"><expr pos:start="279:21" pos:end="279:26"><name pos:start="279:21" pos:end="279:26">prefix</name></expr></argument>, <argument pos:start="279:29" pos:end="279:44"><expr pos:start="279:29" pos:end="279:44"><ternary pos:start="279:29" pos:end="279:44"><condition pos:start="279:29" pos:end="279:34"><expr pos:start="279:29" pos:end="279:32"><name pos:start="279:29" pos:end="279:32">flat</name></expr> ?</condition><then pos:start="279:36" pos:end="279:38"> <expr pos:start="279:36" pos:end="279:38"><literal type="char" pos:start="279:36" pos:end="279:38">'f'</literal></expr> </then><else pos:start="279:40" pos:end="279:44">: <expr pos:start="279:42" pos:end="279:44"><literal type="char" pos:start="279:42" pos:end="279:44">'s'</literal></expr></else></ternary></expr></argument>, <argument pos:start="279:47" pos:end="279:51"><expr pos:start="279:47" pos:end="279:51"><operator pos:start="279:47" pos:end="279:48">++</operator><name pos:start="279:49" pos:end="279:51">idx</name></expr></argument>, <argument pos:start="279:54" pos:end="279:60"><expr pos:start="279:54" pos:end="279:60"><name pos:start="279:54" pos:end="279:60">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="281:11" pos:end="287:9">else if <condition pos:start="281:19" pos:end="281:24">(<expr pos:start="281:20" pos:end="281:23"><name pos:start="281:20" pos:end="281:23">flat</name></expr>)</condition> <block pos:start="281:26" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:37">

            <expr_stmt pos:start="283:13" pos:end="285:37"><expr pos:start="283:13" pos:end="285:36"><call pos:start="283:13" pos:end="285:36"><name pos:start="283:13" pos:end="283:20">snprintf</name><argument_list pos:start="283:21" pos:end="285:36">(<argument pos:start="283:22" pos:end="283:34"><expr pos:start="283:22" pos:end="283:34"><name pos:start="283:22" pos:end="283:34">desc_filename</name></expr></argument>, <argument pos:start="283:37" pos:end="283:57"><expr pos:start="283:37" pos:end="283:57"><sizeof pos:start="283:37" pos:end="283:57">sizeof<argument_list pos:start="283:43" pos:end="283:57">(<argument pos:start="283:44" pos:end="283:56"><expr pos:start="283:44" pos:end="283:56"><name pos:start="283:44" pos:end="283:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="283:60" pos:end="283:70"><expr pos:start="283:60" pos:end="283:70"><literal type="string" pos:start="283:60" pos:end="283:70">"%s-flat%s"</literal></expr></argument>,

                    <argument pos:start="285:21" pos:end="285:26"><expr pos:start="285:21" pos:end="285:26"><name pos:start="285:21" pos:end="285:26">prefix</name></expr></argument>, <argument pos:start="285:29" pos:end="285:35"><expr pos:start="285:29" pos:end="285:35"><name pos:start="285:29" pos:end="285:35">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="287:11" pos:end="293:9">else <block pos:start="287:16" pos:end="293:9">{<block_content pos:start="289:13" pos:end="291:37">

            <expr_stmt pos:start="289:13" pos:end="291:37"><expr pos:start="289:13" pos:end="291:36"><call pos:start="289:13" pos:end="291:36"><name pos:start="289:13" pos:end="289:20">snprintf</name><argument_list pos:start="289:21" pos:end="291:36">(<argument pos:start="289:22" pos:end="289:34"><expr pos:start="289:22" pos:end="289:34"><name pos:start="289:22" pos:end="289:34">desc_filename</name></expr></argument>, <argument pos:start="289:37" pos:end="289:57"><expr pos:start="289:37" pos:end="289:57"><sizeof pos:start="289:37" pos:end="289:57">sizeof<argument_list pos:start="289:43" pos:end="289:57">(<argument pos:start="289:44" pos:end="289:56"><expr pos:start="289:44" pos:end="289:56"><name pos:start="289:44" pos:end="289:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="289:60" pos:end="289:65"><expr pos:start="289:60" pos:end="289:65"><literal type="string" pos:start="289:60" pos:end="289:65">"%s%s"</literal></expr></argument>,

                    <argument pos:start="291:21" pos:end="291:26"><expr pos:start="291:21" pos:end="291:26"><name pos:start="291:21" pos:end="291:26">prefix</name></expr></argument>, <argument pos:start="291:29" pos:end="291:35"><expr pos:start="291:29" pos:end="291:35"><name pos:start="291:29" pos:end="291:35">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="295:9" pos:end="297:37"><expr pos:start="295:9" pos:end="297:36"><call pos:start="295:9" pos:end="297:36"><name pos:start="295:9" pos:end="295:16">snprintf</name><argument_list pos:start="295:17" pos:end="297:36">(<argument pos:start="295:18" pos:end="295:29"><expr pos:start="295:18" pos:end="295:29"><name pos:start="295:18" pos:end="295:29">ext_filename</name></expr></argument>, <argument pos:start="295:32" pos:end="295:51"><expr pos:start="295:32" pos:end="295:51"><sizeof pos:start="295:32" pos:end="295:51">sizeof<argument_list pos:start="295:38" pos:end="295:51">(<argument pos:start="295:39" pos:end="295:50"><expr pos:start="295:39" pos:end="295:50"><name pos:start="295:39" pos:end="295:50">ext_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="295:54" pos:end="295:59"><expr pos:start="295:54" pos:end="295:59"><literal type="string" pos:start="295:54" pos:end="295:59">"%s%s"</literal></expr></argument>,

                <argument pos:start="297:17" pos:end="297:20"><expr pos:start="297:17" pos:end="297:20"><name pos:start="297:17" pos:end="297:20">path</name></expr></argument>, <argument pos:start="297:23" pos:end="297:35"><expr pos:start="297:23" pos:end="297:35"><name pos:start="297:23" pos:end="297:35">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="301:9" pos:end="309:9"><if pos:start="301:9" pos:end="309:9">if <condition pos:start="301:12" pos:end="303:73">(<expr pos:start="301:13" pos:end="303:72"><call pos:start="301:13" pos:end="303:72"><name pos:start="301:13" pos:end="301:30">vmdk_create_extent</name><argument_list pos:start="301:31" pos:end="303:72">(<argument pos:start="301:32" pos:end="301:43"><expr pos:start="301:32" pos:end="301:43"><name pos:start="301:32" pos:end="301:43">ext_filename</name></expr></argument>, <argument pos:start="301:46" pos:end="301:49"><expr pos:start="301:46" pos:end="301:49"><name pos:start="301:46" pos:end="301:49">size</name></expr></argument>,

                               <argument pos:start="303:32" pos:end="303:35"><expr pos:start="303:32" pos:end="303:35"><name pos:start="303:32" pos:end="303:35">flat</name></expr></argument>, <argument pos:start="303:38" pos:end="303:45"><expr pos:start="303:38" pos:end="303:45"><name pos:start="303:38" pos:end="303:45">compress</name></expr></argument>, <argument pos:start="303:48" pos:end="303:59"><expr pos:start="303:48" pos:end="303:59"><name pos:start="303:48" pos:end="303:59">zeroed_grain</name></expr></argument>, <argument pos:start="303:62" pos:end="303:65"><expr pos:start="303:62" pos:end="303:65"><name pos:start="303:62" pos:end="303:65">opts</name></expr></argument>, <argument pos:start="303:68" pos:end="303:71"><expr pos:start="303:68" pos:end="303:71"><name pos:start="303:68" pos:end="303:71">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:75" pos:end="309:9">{<block_content pos:start="305:13" pos:end="307:22">

            <expr_stmt pos:start="305:13" pos:end="305:26"><expr pos:start="305:13" pos:end="305:25"><name pos:start="305:13" pos:end="305:15">ret</name> <operator pos:start="305:17" pos:end="305:17">=</operator> <operator pos:start="305:19" pos:end="305:19">-</operator><name pos:start="305:20" pos:end="305:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="307:13" pos:end="307:22">goto <name pos:start="307:18" pos:end="307:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:25"><expr pos:start="311:9" pos:end="311:24"><name pos:start="311:9" pos:end="311:16">filesize</name> <operator pos:start="311:18" pos:end="311:19">-=</operator> <name pos:start="311:21" pos:end="311:24">size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="315:9" pos:end="315:37">/* Format description line */</comment>

        <expr_stmt pos:start="317:9" pos:end="319:78"><expr pos:start="317:9" pos:end="319:77"><call pos:start="317:9" pos:end="319:77"><name pos:start="317:9" pos:end="317:16">snprintf</name><argument_list pos:start="317:17" pos:end="319:77">(<argument pos:start="317:18" pos:end="317:26"><expr pos:start="317:18" pos:end="317:26"><name pos:start="317:18" pos:end="317:26">desc_line</name></expr></argument>, <argument pos:start="317:29" pos:end="317:45"><expr pos:start="317:29" pos:end="317:45"><sizeof pos:start="317:29" pos:end="317:45">sizeof<argument_list pos:start="317:35" pos:end="317:45">(<argument pos:start="317:36" pos:end="317:44"><expr pos:start="317:36" pos:end="317:44"><name pos:start="317:36" pos:end="317:44">desc_line</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="319:21" pos:end="319:36"><expr pos:start="319:21" pos:end="319:36"><name pos:start="319:21" pos:end="319:36">desc_extent_line</name></expr></argument>, <argument pos:start="319:39" pos:end="319:61"><expr pos:start="319:39" pos:end="319:61"><name pos:start="319:39" pos:end="319:42">size</name> <operator pos:start="319:44" pos:end="319:44">/</operator> <name pos:start="319:46" pos:end="319:61">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="319:64" pos:end="319:76"><expr pos:start="319:64" pos:end="319:76"><name pos:start="319:64" pos:end="319:76">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:51"><expr pos:start="321:9" pos:end="321:50"><call pos:start="321:9" pos:end="321:50"><name pos:start="321:9" pos:end="321:23">g_string_append</name><argument_list pos:start="321:24" pos:end="321:50">(<argument pos:start="321:25" pos:end="321:38"><expr pos:start="321:25" pos:end="321:38"><name pos:start="321:25" pos:end="321:38">ext_desc_lines</name></expr></argument>, <argument pos:start="321:41" pos:end="321:49"><expr pos:start="321:41" pos:end="321:49"><name pos:start="321:41" pos:end="321:49">desc_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="325:5" pos:end="325:34">/* generate descriptor file */</comment>

    <expr_stmt pos:start="327:5" pos:end="347:41"><expr pos:start="327:5" pos:end="347:40"><name pos:start="327:5" pos:end="327:8">desc</name> <operator pos:start="327:10" pos:end="327:10">=</operator> <call pos:start="327:12" pos:end="347:40"><name pos:start="327:12" pos:end="327:26">g_strdup_printf</name><argument_list pos:start="327:27" pos:end="347:40">(<argument pos:start="327:28" pos:end="327:40"><expr pos:start="327:28" pos:end="327:40"><name pos:start="327:28" pos:end="327:40">desc_template</name></expr></argument>,

                           <argument pos:start="329:28" pos:end="329:41"><expr pos:start="329:28" pos:end="329:41"><call pos:start="329:28" pos:end="329:41"><name pos:start="329:28" pos:end="329:39">g_random_int</name><argument_list pos:start="329:40" pos:end="329:41">()</argument_list></call></expr></argument>,

                           <argument pos:start="331:28" pos:end="331:37"><expr pos:start="331:28" pos:end="331:37"><name pos:start="331:28" pos:end="331:37">parent_cid</name></expr></argument>,

                           <argument pos:start="333:28" pos:end="333:30"><expr pos:start="333:28" pos:end="333:30"><name pos:start="333:28" pos:end="333:30">fmt</name></expr></argument>,

                           <argument pos:start="335:28" pos:end="335:43"><expr pos:start="335:28" pos:end="335:43"><name pos:start="335:28" pos:end="335:43">parent_desc_line</name></expr></argument>,

                           <argument pos:start="337:28" pos:end="337:46"><expr pos:start="337:28" pos:end="337:46"><name pos:start="337:28" pos:end="337:46"><name pos:start="337:28" pos:end="337:41">ext_desc_lines</name><operator pos:start="337:42" pos:end="337:43">-&gt;</operator><name pos:start="337:44" pos:end="337:46">str</name></name></expr></argument>,

                           <argument pos:start="339:28" pos:end="339:63"><expr pos:start="339:28" pos:end="339:63"><operator pos:start="339:28" pos:end="339:28">(</operator><ternary pos:start="339:29" pos:end="339:62"><condition pos:start="339:29" pos:end="339:56"><expr pos:start="339:29" pos:end="339:54"><name pos:start="339:29" pos:end="339:33">flags</name> <operator pos:start="339:35" pos:end="339:35">&amp;</operator> <name pos:start="339:37" pos:end="339:54">BLOCK_FLAG_COMPAT6</name></expr> ?</condition><then pos:start="339:58" pos:end="339:58"> <expr pos:start="339:58" pos:end="339:58"><literal type="number" pos:start="339:58" pos:end="339:58">6</literal></expr> </then><else pos:start="339:60" pos:end="339:62">: <expr pos:start="339:62" pos:end="339:62"><literal type="number" pos:start="339:62" pos:end="339:62">4</literal></expr></else></ternary><operator pos:start="339:63" pos:end="339:63">)</operator></expr></argument>,

                           <argument pos:start="341:28" pos:end="343:78"><expr pos:start="341:28" pos:end="343:78"><name pos:start="341:28" pos:end="341:37">total_size</name> <operator pos:start="341:39" pos:end="341:39">/</operator>

                               <operator pos:start="343:32" pos:end="343:32">(</operator><name pos:start="343:33" pos:end="343:39">int64_t</name><operator pos:start="343:40" pos:end="343:40">)</operator><operator pos:start="343:41" pos:end="343:41">(</operator><literal type="number" pos:start="343:42" pos:end="343:43">63</literal> <operator pos:start="343:45" pos:end="343:45">*</operator> <name pos:start="343:47" pos:end="343:58">number_heads</name> <operator pos:start="343:60" pos:end="343:60">*</operator> <name pos:start="343:62" pos:end="343:77">BDRV_SECTOR_SIZE</name><operator pos:start="343:78" pos:end="343:78">)</operator></expr></argument>,

                           <argument pos:start="345:28" pos:end="345:39"><expr pos:start="345:28" pos:end="345:39"><name pos:start="345:28" pos:end="345:39">number_heads</name></expr></argument>,

                           <argument pos:start="347:28" pos:end="347:39"><expr pos:start="347:28" pos:end="347:39"><name pos:start="347:28" pos:end="347:39">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:28"><expr pos:start="349:5" pos:end="349:27"><name pos:start="349:5" pos:end="349:12">desc_len</name> <operator pos:start="349:14" pos:end="349:14">=</operator> <call pos:start="349:16" pos:end="349:27"><name pos:start="349:16" pos:end="349:21">strlen</name><argument_list pos:start="349:22" pos:end="349:27">(<argument pos:start="349:23" pos:end="349:26"><expr pos:start="349:23" pos:end="349:26"><name pos:start="349:23" pos:end="349:26">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="351:5" pos:end="351:39">/* the descriptor offset = 0x200 */</comment>

    <if_stmt pos:start="353:5" pos:end="369:5"><if pos:start="353:5" pos:end="357:5">if <condition pos:start="353:8" pos:end="353:24">(<expr pos:start="353:9" pos:end="353:23"><operator pos:start="353:9" pos:end="353:9">!</operator><name pos:start="353:10" pos:end="353:14">split</name> <operator pos:start="353:16" pos:end="353:17">&amp;&amp;</operator> <operator pos:start="353:19" pos:end="353:19">!</operator><name pos:start="353:20" pos:end="353:23">flat</name></expr>)</condition> <block pos:start="353:26" pos:end="357:5">{<block_content pos:start="355:9" pos:end="355:28">

        <expr_stmt pos:start="355:9" pos:end="355:28"><expr pos:start="355:9" pos:end="355:27"><name pos:start="355:9" pos:end="355:19">desc_offset</name> <operator pos:start="355:21" pos:end="355:21">=</operator> <literal type="number" pos:start="355:23" pos:end="355:27">0x200</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="357:7" pos:end="369:5">else <block pos:start="357:12" pos:end="369:5">{<block_content pos:start="359:9" pos:end="367:9">

        <expr_stmt pos:start="359:9" pos:end="359:59"><expr pos:start="359:9" pos:end="359:58"><name pos:start="359:9" pos:end="359:11">ret</name> <operator pos:start="359:13" pos:end="359:13">=</operator> <call pos:start="359:15" pos:end="359:58"><name pos:start="359:15" pos:end="359:30">bdrv_create_file</name><argument_list pos:start="359:31" pos:end="359:58">(<argument pos:start="359:32" pos:end="359:39"><expr pos:start="359:32" pos:end="359:39"><name pos:start="359:32" pos:end="359:39">filename</name></expr></argument>, <argument pos:start="359:42" pos:end="359:45"><expr pos:start="359:42" pos:end="359:45"><name pos:start="359:42" pos:end="359:45">opts</name></expr></argument>, <argument pos:start="359:48" pos:end="359:57"><expr pos:start="359:48" pos:end="359:57"><operator pos:start="359:48" pos:end="359:48">&amp;</operator><name pos:start="359:49" pos:end="359:57">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="361:9" pos:end="367:9"><if pos:start="361:9" pos:end="367:9">if <condition pos:start="361:12" pos:end="361:20">(<expr pos:start="361:13" pos:end="361:19"><name pos:start="361:13" pos:end="361:15">ret</name> <operator pos:start="361:17" pos:end="361:17">&lt;</operator> <literal type="number" pos:start="361:19" pos:end="361:19">0</literal></expr>)</condition> <block pos:start="361:22" pos:end="367:9">{<block_content pos:start="363:13" pos:end="365:22">

            <expr_stmt pos:start="363:13" pos:end="363:45"><expr pos:start="363:13" pos:end="363:44"><call pos:start="363:13" pos:end="363:44"><name pos:start="363:13" pos:end="363:27">error_propagate</name><argument_list pos:start="363:28" pos:end="363:44">(<argument pos:start="363:29" pos:end="363:32"><expr pos:start="363:29" pos:end="363:32"><name pos:start="363:29" pos:end="363:32">errp</name></expr></argument>, <argument pos:start="363:35" pos:end="363:43"><expr pos:start="363:35" pos:end="363:43"><name pos:start="363:35" pos:end="363:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="365:13" pos:end="365:22">goto <name pos:start="365:18" pos:end="365:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:27"><expr pos:start="371:5" pos:end="371:26"><call pos:start="371:5" pos:end="371:26"><name pos:start="371:5" pos:end="371:10">assert</name><argument_list pos:start="371:11" pos:end="371:26">(<argument pos:start="371:12" pos:end="371:25"><expr pos:start="371:12" pos:end="371:25"><name pos:start="371:12" pos:end="371:17">new_bs</name> <operator pos:start="371:19" pos:end="371:20">==</operator> <name pos:start="371:22" pos:end="371:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="373:5" pos:end="375:69"><expr pos:start="373:5" pos:end="375:68"><name pos:start="373:5" pos:end="373:7">ret</name> <operator pos:start="373:9" pos:end="373:9">=</operator> <call pos:start="373:11" pos:end="375:68"><name pos:start="373:11" pos:end="373:19">bdrv_open</name><argument_list pos:start="373:20" pos:end="375:68">(<argument pos:start="373:21" pos:end="373:27"><expr pos:start="373:21" pos:end="373:27"><operator pos:start="373:21" pos:end="373:21">&amp;</operator><name pos:start="373:22" pos:end="373:27">new_bs</name></expr></argument>, <argument pos:start="373:30" pos:end="373:37"><expr pos:start="373:30" pos:end="373:37"><name pos:start="373:30" pos:end="373:37">filename</name></expr></argument>, <argument pos:start="373:40" pos:end="373:43"><expr pos:start="373:40" pos:end="373:43"><name pos:start="373:40" pos:end="373:43">NULL</name></expr></argument>, <argument pos:start="373:46" pos:end="373:49"><expr pos:start="373:46" pos:end="373:49"><name pos:start="373:46" pos:end="373:49">NULL</name></expr></argument>,

                    <argument pos:start="375:21" pos:end="375:49"><expr pos:start="375:21" pos:end="375:49"><name pos:start="375:21" pos:end="375:31">BDRV_O_RDWR</name> <operator pos:start="375:33" pos:end="375:33">|</operator> <name pos:start="375:35" pos:end="375:49">BDRV_O_PROTOCOL</name></expr></argument>, <argument pos:start="375:52" pos:end="375:55"><expr pos:start="375:52" pos:end="375:55"><name pos:start="375:52" pos:end="375:55">NULL</name></expr></argument>, <argument pos:start="375:58" pos:end="375:67"><expr pos:start="375:58" pos:end="375:67"><operator pos:start="375:58" pos:end="375:58">&amp;</operator><name pos:start="375:59" pos:end="375:67">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="377:5" pos:end="383:5"><if pos:start="377:5" pos:end="383:5">if <condition pos:start="377:8" pos:end="377:16">(<expr pos:start="377:9" pos:end="377:15"><name pos:start="377:9" pos:end="377:11">ret</name> <operator pos:start="377:13" pos:end="377:13">&lt;</operator> <literal type="number" pos:start="377:15" pos:end="377:15">0</literal></expr>)</condition> <block pos:start="377:18" pos:end="383:5">{<block_content pos:start="379:9" pos:end="381:18">

        <expr_stmt pos:start="379:9" pos:end="379:41"><expr pos:start="379:9" pos:end="379:40"><call pos:start="379:9" pos:end="379:40"><name pos:start="379:9" pos:end="379:23">error_propagate</name><argument_list pos:start="379:24" pos:end="379:40">(<argument pos:start="379:25" pos:end="379:28"><expr pos:start="379:25" pos:end="379:28"><name pos:start="379:25" pos:end="379:28">errp</name></expr></argument>, <argument pos:start="379:31" pos:end="379:39"><expr pos:start="379:31" pos:end="379:39"><name pos:start="379:31" pos:end="379:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="381:9" pos:end="381:18">goto <name pos:start="381:14" pos:end="381:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:59"><expr pos:start="385:5" pos:end="385:58"><name pos:start="385:5" pos:end="385:7">ret</name> <operator pos:start="385:9" pos:end="385:9">=</operator> <call pos:start="385:11" pos:end="385:58"><name pos:start="385:11" pos:end="385:21">bdrv_pwrite</name><argument_list pos:start="385:22" pos:end="385:58">(<argument pos:start="385:23" pos:end="385:28"><expr pos:start="385:23" pos:end="385:28"><name pos:start="385:23" pos:end="385:28">new_bs</name></expr></argument>, <argument pos:start="385:31" pos:end="385:41"><expr pos:start="385:31" pos:end="385:41"><name pos:start="385:31" pos:end="385:41">desc_offset</name></expr></argument>, <argument pos:start="385:44" pos:end="385:47"><expr pos:start="385:44" pos:end="385:47"><name pos:start="385:44" pos:end="385:47">desc</name></expr></argument>, <argument pos:start="385:50" pos:end="385:57"><expr pos:start="385:50" pos:end="385:57"><name pos:start="385:50" pos:end="385:57">desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="387:5" pos:end="393:5"><if pos:start="387:5" pos:end="393:5">if <condition pos:start="387:8" pos:end="387:16">(<expr pos:start="387:9" pos:end="387:15"><name pos:start="387:9" pos:end="387:11">ret</name> <operator pos:start="387:13" pos:end="387:13">&lt;</operator> <literal type="number" pos:start="387:15" pos:end="387:15">0</literal></expr>)</condition> <block pos:start="387:18" pos:end="393:5">{<block_content pos:start="389:9" pos:end="391:18">

        <expr_stmt pos:start="389:9" pos:end="389:68"><expr pos:start="389:9" pos:end="389:67"><call pos:start="389:9" pos:end="389:67"><name pos:start="389:9" pos:end="389:24">error_setg_errno</name><argument_list pos:start="389:25" pos:end="389:67">(<argument pos:start="389:26" pos:end="389:29"><expr pos:start="389:26" pos:end="389:29"><name pos:start="389:26" pos:end="389:29">errp</name></expr></argument>, <argument pos:start="389:32" pos:end="389:35"><expr pos:start="389:32" pos:end="389:35"><operator pos:start="389:32" pos:end="389:32">-</operator><name pos:start="389:33" pos:end="389:35">ret</name></expr></argument>, <argument pos:start="389:38" pos:end="389:66"><expr pos:start="389:38" pos:end="389:66"><literal type="string" pos:start="389:38" pos:end="389:66">"Could not write description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="391:9" pos:end="391:18">goto <name pos:start="391:14" pos:end="391:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="395:5" pos:end="397:30">/* bdrv_pwrite write padding zeros to align to sector, we don't need that

     * for description file */</comment>

    <if_stmt pos:start="399:5" pos:end="409:5"><if pos:start="399:5" pos:end="409:5">if <condition pos:start="399:8" pos:end="399:25">(<expr pos:start="399:9" pos:end="399:24"><name pos:start="399:9" pos:end="399:19">desc_offset</name> <operator pos:start="399:21" pos:end="399:22">==</operator> <literal type="number" pos:start="399:24" pos:end="399:24">0</literal></expr>)</condition> <block pos:start="399:27" pos:end="409:5">{<block_content pos:start="401:9" pos:end="407:9">

        <expr_stmt pos:start="401:9" pos:end="401:46"><expr pos:start="401:9" pos:end="401:45"><name pos:start="401:9" pos:end="401:11">ret</name> <operator pos:start="401:13" pos:end="401:13">=</operator> <call pos:start="401:15" pos:end="401:45"><name pos:start="401:15" pos:end="401:27">bdrv_truncate</name><argument_list pos:start="401:28" pos:end="401:45">(<argument pos:start="401:29" pos:end="401:34"><expr pos:start="401:29" pos:end="401:34"><name pos:start="401:29" pos:end="401:34">new_bs</name></expr></argument>, <argument pos:start="401:37" pos:end="401:44"><expr pos:start="401:37" pos:end="401:44"><name pos:start="401:37" pos:end="401:44">desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="403:9" pos:end="407:9"><if pos:start="403:9" pos:end="407:9">if <condition pos:start="403:12" pos:end="403:20">(<expr pos:start="403:13" pos:end="403:19"><name pos:start="403:13" pos:end="403:15">ret</name> <operator pos:start="403:17" pos:end="403:17">&lt;</operator> <literal type="number" pos:start="403:19" pos:end="403:19">0</literal></expr>)</condition> <block pos:start="403:22" pos:end="407:9">{<block_content pos:start="405:13" pos:end="405:68">

            <expr_stmt pos:start="405:13" pos:end="405:68"><expr pos:start="405:13" pos:end="405:67"><call pos:start="405:13" pos:end="405:67"><name pos:start="405:13" pos:end="405:28">error_setg_errno</name><argument_list pos:start="405:29" pos:end="405:67">(<argument pos:start="405:30" pos:end="405:33"><expr pos:start="405:30" pos:end="405:33"><name pos:start="405:30" pos:end="405:33">errp</name></expr></argument>, <argument pos:start="405:36" pos:end="405:39"><expr pos:start="405:36" pos:end="405:39"><operator pos:start="405:36" pos:end="405:36">-</operator><name pos:start="405:37" pos:end="405:39">ret</name></expr></argument>, <argument pos:start="405:42" pos:end="405:66"><expr pos:start="405:42" pos:end="405:66"><literal type="string" pos:start="405:42" pos:end="405:66">"Could not truncate file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="411:1" pos:end="411:5"><name pos:start="411:1" pos:end="411:4">exit</name>:</label>

    <if_stmt pos:start="413:5" pos:end="417:5"><if pos:start="413:5" pos:end="417:5">if <condition pos:start="413:8" pos:end="413:15">(<expr pos:start="413:9" pos:end="413:14"><name pos:start="413:9" pos:end="413:14">new_bs</name></expr>)</condition> <block pos:start="413:17" pos:end="417:5">{<block_content pos:start="415:9" pos:end="415:27">

        <expr_stmt pos:start="415:9" pos:end="415:27"><expr pos:start="415:9" pos:end="415:26"><call pos:start="415:9" pos:end="415:26"><name pos:start="415:9" pos:end="415:18">bdrv_unref</name><argument_list pos:start="415:19" pos:end="415:26">(<argument pos:start="415:20" pos:end="415:25"><expr pos:start="415:20" pos:end="415:25"><name pos:start="415:20" pos:end="415:25">new_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="419:5" pos:end="419:25"><expr pos:start="419:5" pos:end="419:24"><call pos:start="419:5" pos:end="419:24"><name pos:start="419:5" pos:end="419:10">g_free</name><argument_list pos:start="419:11" pos:end="419:24">(<argument pos:start="419:12" pos:end="419:23"><expr pos:start="419:12" pos:end="419:23"><name pos:start="419:12" pos:end="419:23">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:25"><expr pos:start="421:5" pos:end="421:24"><call pos:start="421:5" pos:end="421:24"><name pos:start="421:5" pos:end="421:10">g_free</name><argument_list pos:start="421:11" pos:end="421:24">(<argument pos:start="421:12" pos:end="421:23"><expr pos:start="421:12" pos:end="421:23"><name pos:start="421:12" pos:end="421:23">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:16"><expr pos:start="423:5" pos:end="423:15"><call pos:start="423:5" pos:end="423:15"><name pos:start="423:5" pos:end="423:10">g_free</name><argument_list pos:start="423:11" pos:end="423:15">(<argument pos:start="423:12" pos:end="423:14"><expr pos:start="423:12" pos:end="423:14"><name pos:start="423:12" pos:end="423:14">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:17"><expr pos:start="425:5" pos:end="425:16"><call pos:start="425:5" pos:end="425:16"><name pos:start="425:5" pos:end="425:10">g_free</name><argument_list pos:start="425:11" pos:end="425:16">(<argument pos:start="425:12" pos:end="425:15"><expr pos:start="425:12" pos:end="425:15"><name pos:start="425:12" pos:end="425:15">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:40"><expr pos:start="427:5" pos:end="427:39"><call pos:start="427:5" pos:end="427:39"><name pos:start="427:5" pos:end="427:17">g_string_free</name><argument_list pos:start="427:18" pos:end="427:39">(<argument pos:start="427:19" pos:end="427:32"><expr pos:start="427:19" pos:end="427:32"><name pos:start="427:19" pos:end="427:32">ext_desc_lines</name></expr></argument>, <argument pos:start="427:35" pos:end="427:38"><expr pos:start="427:35" pos:end="427:38"><name pos:start="427:35" pos:end="427:38">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="429:5" pos:end="429:15">return <expr pos:start="429:12" pos:end="429:14"><name pos:start="429:12" pos:end="429:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
