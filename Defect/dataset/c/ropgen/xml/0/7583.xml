<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7583.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">protocol_version</name><parameter_list pos:start="1:28" pos:end="1:71">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:36">VncState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">vs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:49">uint8_t</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">version</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:70"><decl pos:start="1:61" pos:end="1:70"><type pos:start="1:61" pos:end="1:70"><name pos:start="1:61" pos:end="1:66">size_t</name></type> <name pos:start="1:68" pos:end="1:70">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:18"><name pos:start="5:10" pos:end="5:14">local</name><index pos:start="5:15" pos:end="5:18">[<expr pos:start="5:16" pos:end="5:17"><literal type="number" pos:start="5:16" pos:end="5:17">13</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:31"><expr pos:start="9:5" pos:end="9:30"><call pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:10">memcpy</name><argument_list pos:start="9:11" pos:end="9:30">(<argument pos:start="9:12" pos:end="9:16"><expr pos:start="9:12" pos:end="9:16"><name pos:start="9:12" pos:end="9:16">local</name></expr></argument>, <argument pos:start="9:19" pos:end="9:25"><expr pos:start="9:19" pos:end="9:25"><name pos:start="9:19" pos:end="9:25">version</name></expr></argument>, <argument pos:start="9:28" pos:end="9:29"><expr pos:start="9:28" pos:end="9:29"><literal type="number" pos:start="9:28" pos:end="9:29">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:18"><expr pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:9">local</name><index pos:start="11:10" pos:end="11:13">[<expr pos:start="11:11" pos:end="11:12"><literal type="number" pos:start="11:11" pos:end="11:12">12</literal></expr>]</index></name> <operator pos:start="11:15" pos:end="11:15">=</operator> <literal type="number" pos:start="11:17" pos:end="11:17">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:70">(<expr pos:start="15:9" pos:end="15:69"><call pos:start="15:9" pos:end="15:64"><name pos:start="15:9" pos:end="15:14">sscanf</name><argument_list pos:start="15:15" pos:end="15:64">(<argument pos:start="15:16" pos:end="15:20"><expr pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:20">local</name></expr></argument>, <argument pos:start="15:23" pos:end="15:39"><expr pos:start="15:23" pos:end="15:39"><literal type="string" pos:start="15:23" pos:end="15:39">"RFB %03d.%03d\n"</literal></expr></argument>, <argument pos:start="15:42" pos:end="15:51"><expr pos:start="15:42" pos:end="15:51"><operator pos:start="15:42" pos:end="15:42">&amp;</operator><name pos:start="15:43" pos:end="15:51"><name pos:start="15:43" pos:end="15:44">vs</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:51">major</name></name></expr></argument>, <argument pos:start="15:54" pos:end="15:63"><expr pos:start="15:54" pos:end="15:63"><operator pos:start="15:54" pos:end="15:54">&amp;</operator><name pos:start="15:55" pos:end="15:63"><name pos:start="15:55" pos:end="15:56">vs</name><operator pos:start="15:57" pos:end="15:58">-&gt;</operator><name pos:start="15:59" pos:end="15:63">minor</name></name></expr></argument>)</argument_list></call> <operator pos:start="15:66" pos:end="15:67">!=</operator> <literal type="number" pos:start="15:69" pos:end="15:69">2</literal></expr>)</condition> <block pos:start="15:72" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:17">

	<expr_stmt pos:start="17:9" pos:end="17:60"><expr pos:start="17:9" pos:end="17:59"><call pos:start="17:9" pos:end="17:59"><name pos:start="17:9" pos:end="17:17">VNC_DEBUG</name><argument_list pos:start="17:18" pos:end="17:59">(<argument pos:start="17:19" pos:end="17:51"><expr pos:start="17:19" pos:end="17:51"><literal type="string" pos:start="17:19" pos:end="17:51">"Malformed protocol version %s\n"</literal></expr></argument>, <argument pos:start="17:54" pos:end="17:58"><expr pos:start="17:54" pos:end="17:58"><name pos:start="17:54" pos:end="17:58">local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="19:9" pos:end="19:29"><expr pos:start="19:9" pos:end="19:28"><call pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:24">vnc_client_error</name><argument_list pos:start="19:25" pos:end="19:28">(<argument pos:start="19:26" pos:end="19:27"><expr pos:start="19:26" pos:end="19:27"><name pos:start="19:26" pos:end="19:27">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:79"><expr pos:start="25:5" pos:end="25:78"><call pos:start="25:5" pos:end="25:78"><name pos:start="25:5" pos:end="25:13">VNC_DEBUG</name><argument_list pos:start="25:14" pos:end="25:78">(<argument pos:start="25:15" pos:end="25:55"><expr pos:start="25:15" pos:end="25:55"><literal type="string" pos:start="25:15" pos:end="25:55">"Client request protocol version %d.%d\n"</literal></expr></argument>, <argument pos:start="25:58" pos:end="25:66"><expr pos:start="25:58" pos:end="25:66"><name pos:start="25:58" pos:end="25:66"><name pos:start="25:58" pos:end="25:59">vs</name><operator pos:start="25:60" pos:end="25:61">-&gt;</operator><name pos:start="25:62" pos:end="25:66">major</name></name></expr></argument>, <argument pos:start="25:69" pos:end="25:77"><expr pos:start="25:69" pos:end="25:77"><name pos:start="25:69" pos:end="25:77"><name pos:start="25:69" pos:end="25:70">vs</name><operator pos:start="25:71" pos:end="25:72">-&gt;</operator><name pos:start="25:73" pos:end="25:77">minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="49:5"><if pos:start="27:5" pos:end="49:5">if <condition pos:start="27:8" pos:end="37:25">(<expr pos:start="27:9" pos:end="37:24"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:10">vs</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:17">major</name></name> <operator pos:start="27:19" pos:end="27:20">!=</operator> <literal type="number" pos:start="27:22" pos:end="27:22">3</literal> <operator pos:start="27:24" pos:end="27:25">||</operator>

	<operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:18"><name pos:start="29:10" pos:end="29:11">vs</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:18">minor</name></name> <operator pos:start="29:20" pos:end="29:21">!=</operator> <literal type="number" pos:start="29:23" pos:end="29:23">3</literal> <operator pos:start="29:25" pos:end="29:26">&amp;&amp;</operator>

	 <name pos:start="31:10" pos:end="31:18"><name pos:start="31:10" pos:end="31:11">vs</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:18">minor</name></name> <operator pos:start="31:20" pos:end="31:21">!=</operator> <literal type="number" pos:start="31:23" pos:end="31:23">4</literal> <operator pos:start="31:25" pos:end="31:26">&amp;&amp;</operator>

	 <name pos:start="33:10" pos:end="33:18"><name pos:start="33:10" pos:end="33:11">vs</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:18">minor</name></name> <operator pos:start="33:20" pos:end="33:21">!=</operator> <literal type="number" pos:start="33:23" pos:end="33:23">5</literal> <operator pos:start="33:25" pos:end="33:26">&amp;&amp;</operator>

	 <name pos:start="35:10" pos:end="35:18"><name pos:start="35:10" pos:end="35:11">vs</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:18">minor</name></name> <operator pos:start="35:20" pos:end="35:21">!=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">7</literal> <operator pos:start="35:25" pos:end="35:26">&amp;&amp;</operator>

	 <name pos:start="37:10" pos:end="37:18"><name pos:start="37:10" pos:end="37:11">vs</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:18">minor</name></name> <operator pos:start="37:20" pos:end="37:21">!=</operator> <literal type="number" pos:start="37:23" pos:end="37:23">8</literal><operator pos:start="37:24" pos:end="37:24">)</operator></expr>)</condition> <block pos:start="37:27" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:17">

	<expr_stmt pos:start="39:9" pos:end="39:50"><expr pos:start="39:9" pos:end="39:49"><call pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:17">VNC_DEBUG</name><argument_list pos:start="39:18" pos:end="39:49">(<argument pos:start="39:19" pos:end="39:48"><expr pos:start="39:19" pos:end="39:48"><literal type="string" pos:start="39:19" pos:end="39:48">"Unsupported client version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="41:9" pos:end="41:44"><expr pos:start="41:9" pos:end="41:43"><call pos:start="41:9" pos:end="41:43"><name pos:start="41:9" pos:end="41:21">vnc_write_u32</name><argument_list pos:start="41:22" pos:end="41:43">(<argument pos:start="41:23" pos:end="41:24"><expr pos:start="41:23" pos:end="41:24"><name pos:start="41:23" pos:end="41:24">vs</name></expr></argument>, <argument pos:start="41:27" pos:end="41:42"><expr pos:start="41:27" pos:end="41:42"><name pos:start="41:27" pos:end="41:42">VNC_AUTH_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><call pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:17">vnc_flush</name><argument_list pos:start="43:18" pos:end="43:21">(<argument pos:start="43:19" pos:end="43:20"><expr pos:start="43:19" pos:end="43:20"><name pos:start="43:19" pos:end="43:20">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><call pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:24">vnc_client_error</name><argument_list pos:start="45:25" pos:end="45:28">(<argument pos:start="45:26" pos:end="45:27"><expr pos:start="45:26" pos:end="45:27"><name pos:start="45:26" pos:end="45:27">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="51:5" pos:end="55:7">/* Some broken clients report v3.4 or v3.5, which spec requires to be treated

     * as equivalent to v3.3 by servers

     */</comment>

    <if_stmt pos:start="57:5" pos:end="59:22"><if pos:start="57:5" pos:end="59:22">if <condition pos:start="57:8" pos:end="57:41">(<expr pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:10">vs</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:17">minor</name></name> <operator pos:start="57:19" pos:end="57:20">==</operator> <literal type="number" pos:start="57:22" pos:end="57:22">4</literal> <operator pos:start="57:24" pos:end="57:25">||</operator> <name pos:start="57:27" pos:end="57:35"><name pos:start="57:27" pos:end="57:28">vs</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:35">minor</name></name> <operator pos:start="57:37" pos:end="57:38">==</operator> <literal type="number" pos:start="57:40" pos:end="57:40">5</literal></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:22"><block_content pos:start="59:9" pos:end="59:22">

	<expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:10">vs</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:17">minor</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:21">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="109:5"><if pos:start="63:5" pos:end="97:5">if <condition pos:start="63:8" pos:end="63:23">(<expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:10">vs</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:17">minor</name></name> <operator pos:start="63:19" pos:end="63:20">==</operator> <literal type="number" pos:start="63:22" pos:end="63:22">3</literal></expr>)</condition> <block pos:start="63:25" pos:end="97:5">{<block_content pos:start="65:9" pos:end="95:8">

	<if_stmt pos:start="65:9" pos:end="95:8"><if pos:start="65:9" pos:end="75:8">if <condition pos:start="65:12" pos:end="65:42">(<expr pos:start="65:13" pos:end="65:41"><name pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:14">vs</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:18">vd</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:24">auth</name></name> <operator pos:start="65:26" pos:end="65:27">==</operator> <name pos:start="65:29" pos:end="65:41">VNC_AUTH_NONE</name></expr>)</condition> <block pos:start="65:44" pos:end="75:8">{<block_content pos:start="67:13" pos:end="73:55">

            <expr_stmt pos:start="67:13" pos:end="67:49"><expr pos:start="67:13" pos:end="67:48"><call pos:start="67:13" pos:end="67:48"><name pos:start="67:13" pos:end="67:21">VNC_DEBUG</name><argument_list pos:start="67:22" pos:end="67:48">(<argument pos:start="67:23" pos:end="67:47"><expr pos:start="67:23" pos:end="67:47"><literal type="string" pos:start="67:23" pos:end="67:47">"Tell client auth none\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:44"><expr pos:start="69:13" pos:end="69:43"><call pos:start="69:13" pos:end="69:43"><name pos:start="69:13" pos:end="69:25">vnc_write_u32</name><argument_list pos:start="69:26" pos:end="69:43">(<argument pos:start="69:27" pos:end="69:28"><expr pos:start="69:27" pos:end="69:28"><name pos:start="69:27" pos:end="69:28">vs</name></expr></argument>, <argument pos:start="69:31" pos:end="69:42"><expr pos:start="69:31" pos:end="69:42"><name pos:start="69:31" pos:end="69:42"><name pos:start="69:31" pos:end="69:32">vs</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:36">vd</name><operator pos:start="69:37" pos:end="69:38">-&gt;</operator><name pos:start="69:39" pos:end="69:42">auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:26"><expr pos:start="71:13" pos:end="71:25"><call pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:21">vnc_flush</name><argument_list pos:start="71:22" pos:end="71:25">(<argument pos:start="71:23" pos:end="71:24"><expr pos:start="71:23" pos:end="71:24"><name pos:start="71:23" pos:end="71:24">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:55"><expr pos:start="73:13" pos:end="73:54"><call pos:start="73:13" pos:end="73:54"><name pos:start="73:13" pos:end="73:25">vnc_read_when</name><argument_list pos:start="73:26" pos:end="73:54">(<argument pos:start="73:27" pos:end="73:28"><expr pos:start="73:27" pos:end="73:28"><name pos:start="73:27" pos:end="73:28">vs</name></expr></argument>, <argument pos:start="73:31" pos:end="73:50"><expr pos:start="73:31" pos:end="73:50"><name pos:start="73:31" pos:end="73:50">protocol_client_init</name></expr></argument>, <argument pos:start="73:53" pos:end="73:53"><expr pos:start="73:53" pos:end="73:53"><literal type="number" pos:start="73:53" pos:end="73:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></if> <if type="elseif" pos:start="75:10" pos:end="85:8">else if <condition pos:start="75:18" pos:end="75:47">(<expr pos:start="75:19" pos:end="75:46"><name pos:start="75:19" pos:end="75:30"><name pos:start="75:19" pos:end="75:20">vs</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:24">vd</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:30">auth</name></name> <operator pos:start="75:32" pos:end="75:33">==</operator> <name pos:start="75:35" pos:end="75:46">VNC_AUTH_VNC</name></expr>)</condition> <block pos:start="75:49" pos:end="85:8">{<block_content pos:start="77:13" pos:end="83:31">

            <expr_stmt pos:start="77:13" pos:end="77:48"><expr pos:start="77:13" pos:end="77:47"><call pos:start="77:13" pos:end="77:47"><name pos:start="77:13" pos:end="77:21">VNC_DEBUG</name><argument_list pos:start="77:22" pos:end="77:47">(<argument pos:start="77:23" pos:end="77:46"><expr pos:start="77:23" pos:end="77:46"><literal type="string" pos:start="77:23" pos:end="77:46">"Tell client VNC auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:44"><expr pos:start="79:13" pos:end="79:43"><call pos:start="79:13" pos:end="79:43"><name pos:start="79:13" pos:end="79:25">vnc_write_u32</name><argument_list pos:start="79:26" pos:end="79:43">(<argument pos:start="79:27" pos:end="79:28"><expr pos:start="79:27" pos:end="79:28"><name pos:start="79:27" pos:end="79:28">vs</name></expr></argument>, <argument pos:start="79:31" pos:end="79:42"><expr pos:start="79:31" pos:end="79:42"><name pos:start="79:31" pos:end="79:42"><name pos:start="79:31" pos:end="79:32">vs</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:36">vd</name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:42">auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><call pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:21">vnc_flush</name><argument_list pos:start="81:22" pos:end="81:25">(<argument pos:start="81:23" pos:end="81:24"><expr pos:start="81:23" pos:end="81:24"><name pos:start="81:23" pos:end="81:24">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:31"><expr pos:start="83:13" pos:end="83:30"><call pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:26">start_auth_vnc</name><argument_list pos:start="83:27" pos:end="83:30">(<argument pos:start="83:28" pos:end="83:29"><expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></if> <else pos:start="85:10" pos:end="95:8">else <block pos:start="85:15" pos:end="95:8">{<block_content pos:start="87:13" pos:end="93:33">

            <expr_stmt pos:start="87:13" pos:end="87:78"><expr pos:start="87:13" pos:end="87:77"><call pos:start="87:13" pos:end="87:77"><name pos:start="87:13" pos:end="87:21">VNC_DEBUG</name><argument_list pos:start="87:22" pos:end="87:77">(<argument pos:start="87:23" pos:end="87:62"><expr pos:start="87:23" pos:end="87:62"><literal type="string" pos:start="87:23" pos:end="87:62">"Unsupported auth %d for protocol 3.3\n"</literal></expr></argument>, <argument pos:start="87:65" pos:end="87:76"><expr pos:start="87:65" pos:end="87:76"><name pos:start="87:65" pos:end="87:76"><name pos:start="87:65" pos:end="87:66">vs</name><operator pos:start="87:67" pos:end="87:68">-&gt;</operator><name pos:start="87:69" pos:end="87:70">vd</name><operator pos:start="87:71" pos:end="87:72">-&gt;</operator><name pos:start="87:73" pos:end="87:76">auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:48"><expr pos:start="89:13" pos:end="89:47"><call pos:start="89:13" pos:end="89:47"><name pos:start="89:13" pos:end="89:25">vnc_write_u32</name><argument_list pos:start="89:26" pos:end="89:47">(<argument pos:start="89:27" pos:end="89:28"><expr pos:start="89:27" pos:end="89:28"><name pos:start="89:27" pos:end="89:28">vs</name></expr></argument>, <argument pos:start="89:31" pos:end="89:46"><expr pos:start="89:31" pos:end="89:46"><name pos:start="89:31" pos:end="89:46">VNC_AUTH_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:26"><expr pos:start="91:13" pos:end="91:25"><call pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:21">vnc_flush</name><argument_list pos:start="91:22" pos:end="91:25">(<argument pos:start="91:23" pos:end="91:24"><expr pos:start="91:23" pos:end="91:24"><name pos:start="91:23" pos:end="91:24">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:33"><expr pos:start="93:13" pos:end="93:32"><call pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:28">vnc_client_error</name><argument_list pos:start="93:29" pos:end="93:32">(<argument pos:start="93:30" pos:end="93:31"><expr pos:start="93:30" pos:end="93:31"><name pos:start="93:30" pos:end="93:31">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="109:5">else <block pos:start="97:12" pos:end="109:5">{<block_content pos:start="99:9" pos:end="107:22">

	<expr_stmt pos:start="99:9" pos:end="99:71"><expr pos:start="99:9" pos:end="99:70"><call pos:start="99:9" pos:end="99:70"><name pos:start="99:9" pos:end="99:17">VNC_DEBUG</name><argument_list pos:start="99:18" pos:end="99:70">(<argument pos:start="99:19" pos:end="99:55"><expr pos:start="99:19" pos:end="99:55"><literal type="string" pos:start="99:19" pos:end="99:55">"Telling client we support auth %d\n"</literal></expr></argument>, <argument pos:start="99:58" pos:end="99:69"><expr pos:start="99:58" pos:end="99:69"><name pos:start="99:58" pos:end="99:69"><name pos:start="99:58" pos:end="99:59">vs</name><operator pos:start="99:60" pos:end="99:61">-&gt;</operator><name pos:start="99:62" pos:end="99:63">vd</name><operator pos:start="99:64" pos:end="99:65">-&gt;</operator><name pos:start="99:66" pos:end="99:69">auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="101:9" pos:end="101:28"><expr pos:start="101:9" pos:end="101:27"><call pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:20">vnc_write_u8</name><argument_list pos:start="101:21" pos:end="101:27">(<argument pos:start="101:22" pos:end="101:23"><expr pos:start="101:22" pos:end="101:23"><name pos:start="101:22" pos:end="101:23">vs</name></expr></argument>, <argument pos:start="101:26" pos:end="101:26"><expr pos:start="101:26" pos:end="101:26"><literal type="number" pos:start="101:26" pos:end="101:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:30" pos:end="101:43">/* num auth */</comment>

	<expr_stmt pos:start="103:9" pos:end="103:39"><expr pos:start="103:9" pos:end="103:38"><call pos:start="103:9" pos:end="103:38"><name pos:start="103:9" pos:end="103:20">vnc_write_u8</name><argument_list pos:start="103:21" pos:end="103:38">(<argument pos:start="103:22" pos:end="103:23"><expr pos:start="103:22" pos:end="103:23"><name pos:start="103:22" pos:end="103:23">vs</name></expr></argument>, <argument pos:start="103:26" pos:end="103:37"><expr pos:start="103:26" pos:end="103:37"><name pos:start="103:26" pos:end="103:37"><name pos:start="103:26" pos:end="103:27">vs</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:31">vd</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:37">auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="105:9" pos:end="105:51"><expr pos:start="105:9" pos:end="105:50"><call pos:start="105:9" pos:end="105:50"><name pos:start="105:9" pos:end="105:21">vnc_read_when</name><argument_list pos:start="105:22" pos:end="105:50">(<argument pos:start="105:23" pos:end="105:24"><expr pos:start="105:23" pos:end="105:24"><name pos:start="105:23" pos:end="105:24">vs</name></expr></argument>, <argument pos:start="105:27" pos:end="105:46"><expr pos:start="105:27" pos:end="105:46"><name pos:start="105:27" pos:end="105:46">protocol_client_auth</name></expr></argument>, <argument pos:start="105:49" pos:end="105:49"><expr pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="107:9" pos:end="107:22"><expr pos:start="107:9" pos:end="107:21"><call pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:17">vnc_flush</name><argument_list pos:start="107:18" pos:end="107:21">(<argument pos:start="107:19" pos:end="107:20"><expr pos:start="107:19" pos:end="107:20"><name pos:start="107:19" pos:end="107:20">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
