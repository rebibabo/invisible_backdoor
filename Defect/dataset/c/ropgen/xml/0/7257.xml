<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7257.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">targa_encode_frame</name><parameter_list pos:start="1:30" pos:end="5:55">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:51"><decl pos:start="3:31" pos:end="3:51"><type pos:start="3:31" pos:end="3:51"><name pos:start="3:31" pos:end="3:38">unsigned</name> <name pos:start="3:40" pos:end="3:43">char</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:51">outbuf</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:33">int</name></type> <name pos:start="5:35" pos:end="5:42">buf_size</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:54"><decl pos:start="5:45" pos:end="5:54"><type pos:start="5:45" pos:end="5:54"><name pos:start="5:45" pos:end="5:48">void</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:54">data</name></decl></parameter>)</parameter_list><block pos:start="5:56" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:29">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">p</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">bpp</name></decl>, <decl pos:start="9:14" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:20">picsize</name></decl>, <decl pos:start="9:23" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:30">datasize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">out</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if<condition pos:start="15:7" pos:end="15:55">(<expr pos:start="15:8" pos:end="15:54"><name pos:start="15:8" pos:end="15:19"><name pos:start="15:8" pos:end="15:12">avctx</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:19">width</name></name> <operator pos:start="15:21" pos:end="15:21">&gt;</operator> <literal type="number" pos:start="15:23" pos:end="15:28">0xffff</literal> <operator pos:start="15:30" pos:end="15:31">||</operator> <name pos:start="15:33" pos:end="15:45"><name pos:start="15:33" pos:end="15:37">avctx</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:45">height</name></name> <operator pos:start="15:47" pos:end="15:47">&gt;</operator> <literal type="number" pos:start="15:49" pos:end="15:54">0xffff</literal></expr>)</condition> <block pos:start="15:57" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:68"><expr pos:start="17:9" pos:end="17:67"><call pos:start="17:9" pos:end="17:67"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:67">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:66"><expr pos:start="17:37" pos:end="17:66"><literal type="string" pos:start="17:37" pos:end="17:66">"image dimensions too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:78"><expr pos:start="23:5" pos:end="23:77"><name pos:start="23:5" pos:end="23:11">picsize</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:77"><name pos:start="23:15" pos:end="23:32">avpicture_get_size</name><argument_list pos:start="23:33" pos:end="23:77">(<argument pos:start="23:34" pos:end="23:47"><expr pos:start="23:34" pos:end="23:47"><name pos:start="23:34" pos:end="23:47"><name pos:start="23:34" pos:end="23:38">avctx</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:47">pix_fmt</name></name></expr></argument>, <argument pos:start="23:50" pos:end="23:61"><expr pos:start="23:50" pos:end="23:61"><name pos:start="23:50" pos:end="23:61"><name pos:start="23:50" pos:end="23:54">avctx</name><operator pos:start="23:55" pos:end="23:56">-&gt;</operator><name pos:start="23:57" pos:end="23:61">width</name></name></expr></argument>, <argument pos:start="23:64" pos:end="23:76"><expr pos:start="23:64" pos:end="23:76"><name pos:start="23:64" pos:end="23:76"><name pos:start="23:64" pos:end="23:68">avctx</name><operator pos:start="23:69" pos:end="23:70">-&gt;</operator><name pos:start="23:71" pos:end="23:76">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if<condition pos:start="25:7" pos:end="25:31">(<expr pos:start="25:8" pos:end="25:30"><name pos:start="25:8" pos:end="25:15">buf_size</name> <operator pos:start="25:17" pos:end="25:17">&lt;</operator> <name pos:start="25:19" pos:end="25:25">picsize</name> <operator pos:start="25:27" pos:end="25:27">+</operator> <literal type="number" pos:start="25:29" pos:end="25:30">45</literal></expr>)</condition> <block pos:start="25:33" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:65"><expr pos:start="27:9" pos:end="27:64"><call pos:start="27:9" pos:end="27:64"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:64">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:63"><expr pos:start="27:37" pos:end="27:63"><literal type="string" pos:start="27:37" pos:end="27:63">"encoded frame too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:28"><expr pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:5">p</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:16">pict_type</name></name><operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:27">FF_I_TYPE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:20"><expr pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:5">p</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:16">key_frame</name></name><operator pos:start="37:17" pos:end="37:17">=</operator> <literal type="number" pos:start="37:19" pos:end="37:19">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:60">/* zero out the header and only set applicable fields */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:26"><expr pos:start="43:5" pos:end="43:25"><call pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:10">memset</name><argument_list pos:start="43:11" pos:end="43:25">(<argument pos:start="43:12" pos:end="43:17"><expr pos:start="43:12" pos:end="43:17"><name pos:start="43:12" pos:end="43:17">outbuf</name></expr></argument>, <argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr></argument>, <argument pos:start="43:23" pos:end="43:24"><expr pos:start="43:23" pos:end="43:24"><literal type="number" pos:start="43:23" pos:end="43:24">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><call pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:11">AV_WL16</name><argument_list pos:start="45:12" pos:end="45:36">(<argument pos:start="45:13" pos:end="45:21"><expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:18">outbuf</name><operator pos:start="45:19" pos:end="45:19">+</operator><literal type="number" pos:start="45:20" pos:end="45:21">12</literal></expr></argument>, <argument pos:start="45:24" pos:end="45:35"><expr pos:start="45:24" pos:end="45:35"><name pos:start="45:24" pos:end="45:35"><name pos:start="45:24" pos:end="45:28">avctx</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:35">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><call pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:11">AV_WL16</name><argument_list pos:start="47:12" pos:end="47:37">(<argument pos:start="47:13" pos:end="47:21"><expr pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:18">outbuf</name><operator pos:start="47:19" pos:end="47:19">+</operator><literal type="number" pos:start="47:20" pos:end="47:21">14</literal></expr></argument>, <argument pos:start="47:24" pos:end="47:36"><expr pos:start="47:24" pos:end="47:36"><name pos:start="47:24" pos:end="47:36"><name pos:start="47:24" pos:end="47:28">avctx</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:36">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:10">outbuf</name><index pos:start="49:11" pos:end="49:14">[<expr pos:start="49:12" pos:end="49:13"><literal type="number" pos:start="49:12" pos:end="49:13">17</literal></expr>]</index></name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:21">0x20</literal></expr>;</expr_stmt>           <comment type="block" pos:start="49:34" pos:end="49:67">/* origin is top-left. no alpha */</comment>



    <comment type="block" pos:start="53:5" pos:end="53:37">/* TODO: support alpha channel */</comment>

    <switch pos:start="55:5" pos:end="85:5">switch<condition pos:start="55:11" pos:end="55:26">(<expr pos:start="55:12" pos:end="55:25"><name pos:start="55:12" pos:end="55:25"><name pos:start="55:12" pos:end="55:16">avctx</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:25">pix_fmt</name></name></expr>)</condition> <block pos:start="55:28" pos:end="85:5">{<block_content pos:start="57:5" pos:end="83:18">

    <case pos:start="57:5" pos:end="57:23">case <expr pos:start="57:10" pos:end="57:22"><name pos:start="57:10" pos:end="57:22">PIX_FMT_GRAY8</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:14">outbuf</name><index pos:start="59:15" pos:end="59:17">[<expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">2</literal></expr>]</index></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:21">3</literal></expr>;</expr_stmt>           <comment type="block" pos:start="59:34" pos:end="59:67">/* uncompressed grayscale image */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:14">outbuf</name><index pos:start="61:15" pos:end="61:18">[<expr pos:start="61:16" pos:end="61:17"><literal type="number" pos:start="61:16" pos:end="61:17">16</literal></expr>]</index></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <literal type="number" pos:start="61:22" pos:end="61:22">8</literal></expr>;</expr_stmt>          <comment type="block" pos:start="61:34" pos:end="61:42">/* bpp */</comment>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:24">case <expr pos:start="65:10" pos:end="65:23"><name pos:start="65:10" pos:end="65:23">PIX_FMT_RGB555</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:14">outbuf</name><index pos:start="67:15" pos:end="67:17">[<expr pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">2</literal></expr>]</index></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">2</literal></expr>;</expr_stmt>           <comment type="block" pos:start="67:34" pos:end="67:68">/* uncompresses true-color image */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:24"><expr pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:14">outbuf</name><index pos:start="69:15" pos:end="69:18">[<expr pos:start="69:16" pos:end="69:17"><literal type="number" pos:start="69:16" pos:end="69:17">16</literal></expr>]</index></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:23">16</literal></expr>;</expr_stmt>         <comment type="block" pos:start="69:34" pos:end="69:42">/* bpp */</comment>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:23">case <expr pos:start="73:10" pos:end="73:22"><name pos:start="73:10" pos:end="73:22">PIX_FMT_BGR24</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:22"><expr pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:14">outbuf</name><index pos:start="75:15" pos:end="75:17">[<expr pos:start="75:16" pos:end="75:16"><literal type="number" pos:start="75:16" pos:end="75:16">2</literal></expr>]</index></name> <operator pos:start="75:19" pos:end="75:19">=</operator> <literal type="number" pos:start="75:21" pos:end="75:21">2</literal></expr>;</expr_stmt>           <comment type="block" pos:start="75:34" pos:end="75:68">/* uncompressed true-color image */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:14">outbuf</name><index pos:start="77:15" pos:end="77:18">[<expr pos:start="77:16" pos:end="77:17"><literal type="number" pos:start="77:16" pos:end="77:17">16</literal></expr>]</index></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:23">24</literal></expr>;</expr_stmt>         <comment type="block" pos:start="77:34" pos:end="77:42">/* bpp */</comment>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <default pos:start="81:5" pos:end="81:12">default:</default>

        <return pos:start="83:9" pos:end="83:18">return <expr pos:start="83:16" pos:end="83:17"><operator pos:start="83:16" pos:end="83:16">-</operator><literal type="number" pos:start="83:17" pos:end="83:17">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="87:5" pos:end="87:26"><expr pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:7">bpp</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <name pos:start="87:11" pos:end="87:20"><name pos:start="87:11" pos:end="87:16">outbuf</name><index pos:start="87:17" pos:end="87:20">[<expr pos:start="87:18" pos:end="87:19"><literal type="number" pos:start="87:18" pos:end="87:19">16</literal></expr>]</index></name> <operator pos:start="87:22" pos:end="87:23">&gt;&gt;</operator> <literal type="number" pos:start="87:25" pos:end="87:25">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:22"><expr pos:start="91:5" pos:end="91:21"><name pos:start="91:5" pos:end="91:7">out</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <name pos:start="91:11" pos:end="91:16">outbuf</name> <operator pos:start="91:18" pos:end="91:18">+</operator> <literal type="number" pos:start="91:20" pos:end="91:21">18</literal></expr>;</expr_stmt>  <comment type="block" pos:start="91:25" pos:end="91:65">/* skip past the header we just output */</comment>



    <comment type="block" pos:start="95:5" pos:end="95:29">/* try RLE compression */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:83"><expr pos:start="97:5" pos:end="97:82"><name pos:start="97:5" pos:end="97:12">datasize</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:82"><name pos:start="97:16" pos:end="97:31">targa_encode_rle</name><argument_list pos:start="97:32" pos:end="97:82">(<argument pos:start="97:33" pos:end="97:35"><expr pos:start="97:33" pos:end="97:35"><name pos:start="97:33" pos:end="97:35">out</name></expr></argument>, <argument pos:start="97:38" pos:end="97:44"><expr pos:start="97:38" pos:end="97:44"><name pos:start="97:38" pos:end="97:44">picsize</name></expr></argument>, <argument pos:start="97:47" pos:end="97:47"><expr pos:start="97:47" pos:end="97:47"><name pos:start="97:47" pos:end="97:47">p</name></expr></argument>, <argument pos:start="97:50" pos:end="97:52"><expr pos:start="97:50" pos:end="97:52"><name pos:start="97:50" pos:end="97:52">bpp</name></expr></argument>, <argument pos:start="97:55" pos:end="97:66"><expr pos:start="97:55" pos:end="97:66"><name pos:start="97:55" pos:end="97:66"><name pos:start="97:55" pos:end="97:59">avctx</name><operator pos:start="97:60" pos:end="97:61">-&gt;</operator><name pos:start="97:62" pos:end="97:66">width</name></name></expr></argument>, <argument pos:start="97:69" pos:end="97:81"><expr pos:start="97:69" pos:end="97:81"><name pos:start="97:69" pos:end="97:81"><name pos:start="97:69" pos:end="97:73">avctx</name><operator pos:start="97:74" pos:end="97:75">-&gt;</operator><name pos:start="97:76" pos:end="97:81">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:65">/* if that worked well, mark the picture as RLE compressed */</comment>

    <if_stmt pos:start="103:5" pos:end="111:82"><if pos:start="103:5" pos:end="105:23">if<condition pos:start="103:7" pos:end="103:21">(<expr pos:start="103:8" pos:end="103:20"><name pos:start="103:8" pos:end="103:15">datasize</name> <operator pos:start="103:17" pos:end="103:18">&gt;=</operator> <literal type="number" pos:start="103:20" pos:end="103:20">0</literal></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:23"><block_content pos:start="105:9" pos:end="105:23">

        <expr_stmt pos:start="105:9" pos:end="105:23"><expr pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:14">outbuf</name><index pos:start="105:15" pos:end="105:17">[<expr pos:start="105:16" pos:end="105:16"><literal type="number" pos:start="105:16" pos:end="105:16">2</literal></expr>]</index></name> <operator pos:start="105:19" pos:end="105:20">|=</operator> <literal type="number" pos:start="105:22" pos:end="105:22">8</literal></expr>;</expr_stmt></block_content></block></if>



    <comment type="block" pos:start="109:5" pos:end="109:66">/* if RLE didn't make it smaller, go back to no compression */</comment>

    <else pos:start="111:5" pos:end="111:82">else<block type="pseudo" pos:start="111:10" pos:end="111:82"><block_content pos:start="111:10" pos:end="111:82"> <expr_stmt pos:start="111:10" pos:end="111:82"><expr pos:start="111:10" pos:end="111:81"><name pos:start="111:10" pos:end="111:17">datasize</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:81"><name pos:start="111:21" pos:end="111:39">targa_encode_normal</name><argument_list pos:start="111:40" pos:end="111:81">(<argument pos:start="111:41" pos:end="111:43"><expr pos:start="111:41" pos:end="111:43"><name pos:start="111:41" pos:end="111:43">out</name></expr></argument>, <argument pos:start="111:46" pos:end="111:46"><expr pos:start="111:46" pos:end="111:46"><name pos:start="111:46" pos:end="111:46">p</name></expr></argument>, <argument pos:start="111:49" pos:end="111:51"><expr pos:start="111:49" pos:end="111:51"><name pos:start="111:49" pos:end="111:51">bpp</name></expr></argument>, <argument pos:start="111:54" pos:end="111:65"><expr pos:start="111:54" pos:end="111:65"><name pos:start="111:54" pos:end="111:65"><name pos:start="111:54" pos:end="111:58">avctx</name><operator pos:start="111:59" pos:end="111:60">-&gt;</operator><name pos:start="111:61" pos:end="111:65">width</name></name></expr></argument>, <argument pos:start="111:68" pos:end="111:80"><expr pos:start="111:68" pos:end="111:80"><name pos:start="111:68" pos:end="111:80"><name pos:start="111:68" pos:end="111:72">avctx</name><operator pos:start="111:73" pos:end="111:74">-&gt;</operator><name pos:start="111:75" pos:end="111:80">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:20"><expr pos:start="115:5" pos:end="115:19"><name pos:start="115:5" pos:end="115:7">out</name> <operator pos:start="115:9" pos:end="115:10">+=</operator> <name pos:start="115:12" pos:end="115:19">datasize</name></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="123:55">/* The standard recommends including this section, even if we don't use

     * any of the features it affords. TODO: take advantage of the pixel

     * aspect ratio and encoder ID fields available? */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:57"><expr pos:start="125:5" pos:end="125:56"><call pos:start="125:5" pos:end="125:56"><name pos:start="125:5" pos:end="125:10">memcpy</name><argument_list pos:start="125:11" pos:end="125:56">(<argument pos:start="125:12" pos:end="125:14"><expr pos:start="125:12" pos:end="125:14"><name pos:start="125:12" pos:end="125:14">out</name></expr></argument>, <argument pos:start="125:17" pos:end="125:51"><expr pos:start="125:17" pos:end="125:51"><literal type="string" pos:start="125:17" pos:end="125:51">"\0\0\0\0\0\0\0\0TRUEVISION-XFILE."</literal></expr></argument>, <argument pos:start="125:54" pos:end="125:55"><expr pos:start="125:54" pos:end="125:55"><literal type="number" pos:start="125:54" pos:end="125:55">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="129:5" pos:end="129:29">return <expr pos:start="129:12" pos:end="129:28"><name pos:start="129:12" pos:end="129:14">out</name> <operator pos:start="129:16" pos:end="129:16">+</operator> <literal type="number" pos:start="129:18" pos:end="129:21">26</literal> <operator pos:start="129:21" pos:end="129:21">-</operator> <name pos:start="129:23" pos:end="129:28">outbuf</name></expr>;</return>

</block_content>}</block></function>
</unit>
