<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24147.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ape_unpack_stereo</name><parameter_list pos:start="1:30" pos:end="1:57">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:40">APEContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">ctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:56"><decl pos:start="1:48" pos:end="1:56"><type pos:start="1:48" pos:end="1:56"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:56">count</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:5">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int32_t</name></type> <name pos:start="5:13" pos:end="5:16">left</name></decl>, <decl pos:start="5:19" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:19" pos:end="5:23">right</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">int32_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">decoded0</name> <init pos:start="7:23" pos:end="7:39">= <expr pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:36">decoded</name><index pos:start="7:37" pos:end="7:39">[<expr pos:start="7:38" pos:end="7:38"><literal type="number" pos:start="7:38" pos:end="7:38">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">int32_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21">decoded1</name> <init pos:start="9:23" pos:end="9:39">= <expr pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:27">ctx</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:36">decoded</name><index pos:start="9:37" pos:end="9:39">[<expr pos:start="9:38" pos:end="9:38"><literal type="number" pos:start="9:38" pos:end="9:38">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:55">(<expr pos:start="13:9" pos:end="13:54"><name pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:11">ctx</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:23">frameflags</name></name> <operator pos:start="13:25" pos:end="13:25">&amp;</operator> <name pos:start="13:27" pos:end="13:54">APE_FRAMECODE_STEREO_SILENCE</name></expr>)</condition> <block pos:start="13:57" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <comment type="block" pos:start="15:9" pos:end="15:49">/* We are pure silence, so we're done. */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:66"><expr pos:start="17:9" pos:end="17:65"><call pos:start="17:9" pos:end="17:65"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:65">(<argument pos:start="17:16" pos:end="17:25"><expr pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:18">ctx</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:25">avctx</name></name></expr></argument>, <argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="17:42" pos:end="17:64"><expr pos:start="17:42" pos:end="17:64"><literal type="string" pos:start="17:42" pos:end="17:64">"pure silence stereo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><call pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:18">entropy_decode</name><argument_list pos:start="25:19" pos:end="25:33">(<argument pos:start="25:20" pos:end="25:22"><expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">ctx</name></expr></argument>, <argument pos:start="25:25" pos:end="25:29"><expr pos:start="25:25" pos:end="25:29"><name pos:start="25:25" pos:end="25:29">count</name></expr></argument>, <argument pos:start="25:32" pos:end="25:32"><expr pos:start="25:32" pos:end="25:32"><literal type="number" pos:start="25:32" pos:end="25:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:54"><expr pos:start="27:5" pos:end="27:53"><call pos:start="27:5" pos:end="27:53"><name pos:start="27:5" pos:end="27:21">ape_apply_filters</name><argument_list pos:start="27:22" pos:end="27:53">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">ctx</name></expr></argument>, <argument pos:start="27:28" pos:end="27:35"><expr pos:start="27:28" pos:end="27:35"><name pos:start="27:28" pos:end="27:35">decoded0</name></expr></argument>, <argument pos:start="27:38" pos:end="27:45"><expr pos:start="27:38" pos:end="27:45"><name pos:start="27:38" pos:end="27:45">decoded1</name></expr></argument>, <argument pos:start="27:48" pos:end="27:52"><expr pos:start="27:48" pos:end="27:52"><name pos:start="27:48" pos:end="27:52">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:42">/* Now apply the predictor decoding */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:40"><expr pos:start="33:5" pos:end="33:39"><call pos:start="33:5" pos:end="33:39"><name pos:start="33:5" pos:end="33:27">predictor_decode_stereo</name><argument_list pos:start="33:28" pos:end="33:39">(<argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:31">ctx</name></expr></argument>, <argument pos:start="33:34" pos:end="33:38"><expr pos:start="33:34" pos:end="33:38"><name pos:start="33:34" pos:end="33:38">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:47">/* Decorrelate and scale to output depth */</comment>

    <while pos:start="39:5" pos:end="51:5">while <condition pos:start="39:11" pos:end="39:19">(<expr pos:start="39:12" pos:end="39:18"><name pos:start="39:12" pos:end="39:16">count</name><operator pos:start="39:17" pos:end="39:18">--</operator></expr>)</condition> <block pos:start="39:21" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:30">

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:12">left</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <operator pos:start="41:16" pos:end="41:16">*</operator><name pos:start="41:17" pos:end="41:24">decoded1</name> <operator pos:start="41:26" pos:end="41:26">-</operator> <operator pos:start="41:28" pos:end="41:28">(</operator><operator pos:start="41:29" pos:end="41:29">*</operator><name pos:start="41:30" pos:end="41:37">decoded0</name> <operator pos:start="41:39" pos:end="41:39">/</operator> <literal type="number" pos:start="41:41" pos:end="41:41">2</literal><operator pos:start="41:42" pos:end="41:42">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:13">right</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:20">left</name> <operator pos:start="43:22" pos:end="43:22">+</operator> <operator pos:start="43:24" pos:end="43:24">*</operator><name pos:start="43:25" pos:end="43:32">decoded0</name></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><operator pos:start="47:9" pos:end="47:9">*</operator><operator pos:start="47:10" pos:end="47:10">(</operator><name pos:start="47:11" pos:end="47:18">decoded0</name><operator pos:start="47:19" pos:end="47:20">++</operator><operator pos:start="47:21" pos:end="47:21">)</operator> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:28">left</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><operator pos:start="49:9" pos:end="49:9">*</operator><operator pos:start="49:10" pos:end="49:10">(</operator><name pos:start="49:11" pos:end="49:18">decoded1</name><operator pos:start="49:19" pos:end="49:20">++</operator><operator pos:start="49:21" pos:end="49:21">)</operator> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:29">right</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
