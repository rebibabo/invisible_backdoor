<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14403.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:24"><name pos:start="1:1" pos:end="1:10">start_list</name><argument_list pos:start="1:11" pos:end="3:24">(<argument pos:start="1:12" pos:end="1:21">Visitor *v</argument>, <argument pos:start="1:24" pos:end="1:39">const char *name</argument>, <argument pos:start="1:42" pos:end="1:59">GenericList **list</argument>, <argument pos:start="1:62" pos:end="1:72">size_t size</argument>,

           <argument pos:start="3:12" pos:end="3:23">Error **errp</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:5">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">StringInputVisitor</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">siv</name> <init pos:start="7:29" pos:end="7:39">= <expr pos:start="7:31" pos:end="7:39"><call pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:36">to_siv</name><argument_list pos:start="7:37" pos:end="7:39">(<argument pos:start="7:38" pos:end="7:38"><expr pos:start="7:38" pos:end="7:38"><name pos:start="7:38" pos:end="7:38">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:48">/* We don't support visits without a list */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:17"><expr pos:start="13:5" pos:end="13:16"><call pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:16">(<argument pos:start="13:12" pos:end="13:15"><expr pos:start="13:12" pos:end="13:15"><name pos:start="13:12" pos:end="13:15">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:39">(<expr pos:start="17:9" pos:end="17:38"><call pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:17">parse_str</name><argument_list pos:start="17:18" pos:end="17:34">(<argument pos:start="17:19" pos:end="17:21"><expr pos:start="17:19" pos:end="17:21"><name pos:start="17:19" pos:end="17:21">siv</name></expr></argument>, <argument pos:start="17:24" pos:end="17:27"><expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">name</name></expr></argument>, <argument pos:start="17:30" pos:end="17:33"><expr pos:start="17:30" pos:end="17:33"><name pos:start="17:30" pos:end="17:33">errp</name></expr></argument>)</argument_list></call> <operator pos:start="17:36" pos:end="17:36">&lt;</operator> <literal type="number" pos:start="17:38" pos:end="17:38">0</literal></expr>)</condition> <block pos:start="17:41" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:21"><expr pos:start="19:9" pos:end="19:20"><operator pos:start="19:9" pos:end="19:9">*</operator><name pos:start="19:10" pos:end="19:13">list</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:20">NULL</name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:7">siv</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:18">cur_range</name></name> <operator pos:start="27:20" pos:end="27:20">=</operator> <call pos:start="27:22" pos:end="27:46"><name pos:start="27:22" pos:end="27:33">g_list_first</name><argument_list pos:start="27:34" pos:end="27:46">(<argument pos:start="27:35" pos:end="27:45"><expr pos:start="27:35" pos:end="27:45"><name pos:start="27:35" pos:end="27:45"><name pos:start="27:35" pos:end="27:37">siv</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:45">ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="45:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:23">(<expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:11">siv</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:22">cur_range</name></name></expr>)</condition> <block pos:start="29:25" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:32">

        <decl_stmt pos:start="31:9" pos:end="31:40"><decl pos:start="31:9" pos:end="31:39"><type pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:13">Range</name> <modifier pos:start="31:15" pos:end="31:15">*</modifier></type><name pos:start="31:16" pos:end="31:16">r</name> <init pos:start="31:18" pos:end="31:39">= <expr pos:start="31:20" pos:end="31:39"><name pos:start="31:20" pos:end="31:39"><name pos:start="31:20" pos:end="31:22">siv</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:33">cur_range</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:39">data</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:14">(<expr pos:start="33:13" pos:end="33:13"><name pos:start="33:13" pos:end="33:13">r</name></expr>)</condition> <block pos:start="33:16" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:32">

            <expr_stmt pos:start="35:13" pos:end="35:32"><expr pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:15">siv</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:20">cur</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:31"><name pos:start="35:24" pos:end="35:24">r</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:31">begin</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:32"><expr pos:start="39:9" pos:end="39:31"><operator pos:start="39:9" pos:end="39:9">*</operator><name pos:start="39:10" pos:end="39:13">list</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:31"><name pos:start="39:17" pos:end="39:25">g_malloc0</name><argument_list pos:start="39:26" pos:end="39:31">(<argument pos:start="39:27" pos:end="39:30"><expr pos:start="39:27" pos:end="39:30"><name pos:start="39:27" pos:end="39:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:21">

        <expr_stmt pos:start="43:9" pos:end="43:21"><expr pos:start="43:9" pos:end="43:20"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:13">list</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:20">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block>
</unit>
