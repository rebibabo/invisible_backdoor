<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14551.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">ram_save_setup</name><parameter_list pos:start="1:26" pos:end="1:52">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:34">QEMUFile</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">f</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:13">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:19">block</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:21">bytes_transferred</name> <operator pos:start="9:23" pos:end="9:23">=</operator> <literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:24"><expr pos:start="11:5" pos:end="11:23"><call pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">reset_ram_globals</name><argument_list pos:start="11:22" pos:end="11:23">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="37:5"><if pos:start="15:5" pos:end="37:5">if <condition pos:start="15:8" pos:end="15:29">(<expr pos:start="15:9" pos:end="15:28"><call pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:26">migrate_use_xbzrle</name><argument_list pos:start="15:27" pos:end="15:28">()</argument_list></call></expr>)</condition> <block pos:start="15:31" pos:end="37:5">{<block_content pos:start="17:9" pos:end="35:21">

        <expr_stmt pos:start="17:9" pos:end="21:52"><expr pos:start="17:9" pos:end="21:51"><name pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:14">XBZRLE</name><operator pos:start="17:15" pos:end="17:15">.</operator><name pos:start="17:16" pos:end="17:20">cache</name></name> <operator pos:start="17:22" pos:end="17:22">=</operator> <call pos:start="17:24" pos:end="21:51"><name pos:start="17:24" pos:end="17:33">cache_init</name><argument_list pos:start="17:34" pos:end="21:51">(<argument pos:start="17:35" pos:end="19:50"><expr pos:start="17:35" pos:end="19:50"><call pos:start="17:35" pos:end="17:61"><name pos:start="17:35" pos:end="17:59">migrate_xbzrle_cache_size</name><argument_list pos:start="17:60" pos:end="17:61">()</argument_list></call> <operator pos:start="17:63" pos:end="17:63">/</operator>

                                  <name pos:start="19:35" pos:end="19:50">TARGET_PAGE_SIZE</name></expr></argument>,

                                  <argument pos:start="21:35" pos:end="21:50"><expr pos:start="21:35" pos:end="21:50"><name pos:start="21:35" pos:end="21:50">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:26">(<expr pos:start="23:13" pos:end="23:25"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:25"><name pos:start="23:14" pos:end="23:19">XBZRLE</name><operator pos:start="23:20" pos:end="23:20">.</operator><name pos:start="23:21" pos:end="23:25">cache</name></name></expr>)</condition> <block pos:start="23:28" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:22">

            <expr_stmt pos:start="25:13" pos:end="25:46"><expr pos:start="25:13" pos:end="25:45"><call pos:start="25:13" pos:end="25:45"><name pos:start="25:13" pos:end="25:19">DPRINTF</name><argument_list pos:start="25:20" pos:end="25:45">(<argument pos:start="25:21" pos:end="25:44"><expr pos:start="25:21" pos:end="25:44"><literal type="string" pos:start="25:21" pos:end="25:44">"Error creating cache\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:57"><expr pos:start="31:9" pos:end="31:56"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:14">XBZRLE</name><operator pos:start="31:15" pos:end="31:15">.</operator><name pos:start="31:16" pos:end="31:26">encoded_buf</name></name> <operator pos:start="31:28" pos:end="31:28">=</operator> <call pos:start="31:30" pos:end="31:56"><name pos:start="31:30" pos:end="31:38">g_malloc0</name><argument_list pos:start="31:39" pos:end="31:56">(<argument pos:start="31:40" pos:end="31:55"><expr pos:start="31:40" pos:end="31:55"><name pos:start="31:40" pos:end="31:55">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:56"><expr pos:start="33:9" pos:end="33:55"><name pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:14">XBZRLE</name><operator pos:start="33:15" pos:end="33:15">.</operator><name pos:start="33:16" pos:end="33:26">current_buf</name></name> <operator pos:start="33:28" pos:end="33:28">=</operator> <call pos:start="33:30" pos:end="33:55"><name pos:start="33:30" pos:end="33:37">g_malloc</name><argument_list pos:start="33:38" pos:end="33:55">(<argument pos:start="33:39" pos:end="33:54"><expr pos:start="33:39" pos:end="33:54"><name pos:start="33:39" pos:end="33:54">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:21"><expr pos:start="35:9" pos:end="35:20"><call pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:18">acct_clear</name><argument_list pos:start="35:19" pos:end="35:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:42">/* Make sure all dirty bits are set */</comment>

    <macro pos:start="43:5" pos:end="43:48"><name pos:start="43:5" pos:end="43:17">QLIST_FOREACH</name><argument_list pos:start="43:18" pos:end="43:48">(<argument pos:start="43:19" pos:end="43:23">block</argument>, <argument pos:start="43:26" pos:end="43:41">&amp;ram_list.blocks</argument>, <argument pos:start="43:44" pos:end="43:47">next</argument>)</argument_list></macro> <block pos:start="43:50" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:61">

        <expr_stmt pos:start="45:9" pos:end="45:61"><expr pos:start="45:9" pos:end="45:60"><call pos:start="45:9" pos:end="45:60"><name pos:start="45:9" pos:end="45:34">migration_bitmap_set_dirty</name><argument_list pos:start="45:35" pos:end="45:60">(<argument pos:start="45:36" pos:end="45:44"><expr pos:start="45:36" pos:end="45:44"><name pos:start="45:36" pos:end="45:44"><name pos:start="45:36" pos:end="45:40">block</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:44">mr</name></name></expr></argument>, <argument pos:start="45:47" pos:end="45:59"><expr pos:start="45:47" pos:end="45:59"><name pos:start="45:47" pos:end="45:59"><name pos:start="45:47" pos:end="45:51">block</name><operator pos:start="45:52" pos:end="45:53">-&gt;</operator><name pos:start="45:54" pos:end="45:59">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="51:5" pos:end="51:36"><expr pos:start="51:5" pos:end="51:35"><call pos:start="51:5" pos:end="51:35"><name pos:start="51:5" pos:end="51:33">memory_global_dirty_log_start</name><argument_list pos:start="51:34" pos:end="51:35">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:57"><expr pos:start="53:5" pos:end="53:56"><call pos:start="53:5" pos:end="53:56"><name pos:start="53:5" pos:end="53:35">memory_global_sync_dirty_bitmap</name><argument_list pos:start="53:36" pos:end="53:56">(<argument pos:start="53:37" pos:end="53:55"><expr pos:start="53:37" pos:end="53:55"><call pos:start="53:37" pos:end="53:55"><name pos:start="53:37" pos:end="53:53">get_system_memory</name><argument_list pos:start="53:54" pos:end="53:55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:65"><expr pos:start="57:5" pos:end="57:64"><call pos:start="57:5" pos:end="57:64"><name pos:start="57:5" pos:end="57:17">qemu_put_be64</name><argument_list pos:start="57:18" pos:end="57:64">(<argument pos:start="57:19" pos:end="57:19"><expr pos:start="57:19" pos:end="57:19"><name pos:start="57:19" pos:end="57:19">f</name></expr></argument>, <argument pos:start="57:22" pos:end="57:63"><expr pos:start="57:22" pos:end="57:63"><call pos:start="57:22" pos:end="57:38"><name pos:start="57:22" pos:end="57:36">ram_bytes_total</name><argument_list pos:start="57:37" pos:end="57:38">()</argument_list></call> <operator pos:start="57:40" pos:end="57:40">|</operator> <name pos:start="57:42" pos:end="57:63">RAM_SAVE_FLAG_MEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:17">QLIST_FOREACH</name><argument_list pos:start="61:18" pos:end="61:48">(<argument pos:start="61:19" pos:end="61:23">block</argument>, <argument pos:start="61:26" pos:end="61:41">&amp;ram_list.blocks</argument>, <argument pos:start="61:44" pos:end="61:47">next</argument>)</argument_list></macro> <block pos:start="61:50" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:40">

        <expr_stmt pos:start="63:9" pos:end="63:47"><expr pos:start="63:9" pos:end="63:46"><call pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:21">qemu_put_byte</name><argument_list pos:start="63:22" pos:end="63:46">(<argument pos:start="63:23" pos:end="63:23"><expr pos:start="63:23" pos:end="63:23"><name pos:start="63:23" pos:end="63:23">f</name></expr></argument>, <argument pos:start="63:26" pos:end="63:45"><expr pos:start="63:26" pos:end="63:45"><call pos:start="63:26" pos:end="63:45"><name pos:start="63:26" pos:end="63:31">strlen</name><argument_list pos:start="63:32" pos:end="63:45">(<argument pos:start="63:33" pos:end="63:44"><expr pos:start="63:33" pos:end="63:44"><name pos:start="63:33" pos:end="63:44"><name pos:start="63:33" pos:end="63:37">block</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:44">idstr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:74"><expr pos:start="65:9" pos:end="65:73"><call pos:start="65:9" pos:end="65:73"><name pos:start="65:9" pos:end="65:23">qemu_put_buffer</name><argument_list pos:start="65:24" pos:end="65:73">(<argument pos:start="65:25" pos:end="65:25"><expr pos:start="65:25" pos:end="65:25"><name pos:start="65:25" pos:end="65:25">f</name></expr></argument>, <argument pos:start="65:28" pos:end="65:50"><expr pos:start="65:28" pos:end="65:50"><operator pos:start="65:28" pos:end="65:28">(</operator><name pos:start="65:29" pos:end="65:35">uint8_t</name> <operator pos:start="65:37" pos:end="65:37">*</operator><operator pos:start="65:38" pos:end="65:38">)</operator><name pos:start="65:39" pos:end="65:50"><name pos:start="65:39" pos:end="65:43">block</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:50">idstr</name></name></expr></argument>, <argument pos:start="65:53" pos:end="65:72"><expr pos:start="65:53" pos:end="65:72"><call pos:start="65:53" pos:end="65:72"><name pos:start="65:53" pos:end="65:58">strlen</name><argument_list pos:start="65:59" pos:end="65:72">(<argument pos:start="65:60" pos:end="65:71"><expr pos:start="65:60" pos:end="65:71"><name pos:start="65:60" pos:end="65:71"><name pos:start="65:60" pos:end="65:64">block</name><operator pos:start="65:65" pos:end="65:66">-&gt;</operator><name pos:start="65:67" pos:end="65:71">idstr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:40"><expr pos:start="67:9" pos:end="67:39"><call pos:start="67:9" pos:end="67:39"><name pos:start="67:9" pos:end="67:21">qemu_put_be64</name><argument_list pos:start="67:22" pos:end="67:39">(<argument pos:start="67:23" pos:end="67:23"><expr pos:start="67:23" pos:end="67:23"><name pos:start="67:23" pos:end="67:23">f</name></expr></argument>, <argument pos:start="67:26" pos:end="67:38"><expr pos:start="67:26" pos:end="67:38"><name pos:start="67:26" pos:end="67:38"><name pos:start="67:26" pos:end="67:30">block</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:38">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="73:5" pos:end="73:40"><expr pos:start="73:5" pos:end="73:39"><call pos:start="73:5" pos:end="73:39"><name pos:start="73:5" pos:end="73:17">qemu_put_be64</name><argument_list pos:start="73:18" pos:end="73:39">(<argument pos:start="73:19" pos:end="73:19"><expr pos:start="73:19" pos:end="73:19"><name pos:start="73:19" pos:end="73:19">f</name></expr></argument>, <argument pos:start="73:22" pos:end="73:38"><expr pos:start="73:22" pos:end="73:38"><name pos:start="73:22" pos:end="73:38">RAM_SAVE_FLAG_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="77:5" pos:end="77:13">return <expr pos:start="77:12" pos:end="77:12"><literal type="number" pos:start="77:12" pos:end="77:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
