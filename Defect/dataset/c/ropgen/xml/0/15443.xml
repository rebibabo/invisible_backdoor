<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15443.c" pos:tabs="8"><function pos:start="1:1" pos:end="27:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">invalidate_and_set_dirty</name><parameter_list pos:start="1:37" pos:end="3:51">(<parameter pos:start="1:38" pos:end="1:53"><decl pos:start="1:38" pos:end="1:53"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:49">MemoryRegion</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">mr</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:61">hwaddr</name></type> <name pos:start="1:63" pos:end="1:66">addr</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:50"><decl pos:start="3:38" pos:end="3:50"><type pos:start="3:38" pos:end="3:50"><name pos:start="3:38" pos:end="3:43">hwaddr</name></type> <name pos:start="3:45" pos:end="3:50">length</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="27:1">{<block_content pos:start="7:5" pos:end="25:5">

    <if_stmt pos:start="7:5" pos:end="25:5"><if pos:start="7:5" pos:end="21:5">if <condition pos:start="7:8" pos:end="7:63">(<expr pos:start="7:9" pos:end="7:62"><call pos:start="7:9" pos:end="7:62"><name pos:start="7:9" pos:end="7:48">cpu_physical_memory_range_includes_clean</name><argument_list pos:start="7:49" pos:end="7:62">(<argument pos:start="7:50" pos:end="7:53"><expr pos:start="7:50" pos:end="7:53"><name pos:start="7:50" pos:end="7:53">addr</name></expr></argument>, <argument pos:start="7:56" pos:end="7:61"><expr pos:start="7:56" pos:end="7:61"><name pos:start="7:56" pos:end="7:61">length</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7:65" pos:end="21:5">{<block_content pos:start="9:9" pos:end="19:74">

        <decl_stmt pos:start="9:9" pos:end="9:70"><decl pos:start="9:9" pos:end="9:69"><type pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:15">uint8_t</name></type> <name pos:start="9:17" pos:end="9:30">dirty_log_mask</name> <init pos:start="9:32" pos:end="9:69">= <expr pos:start="9:34" pos:end="9:69"><call pos:start="9:34" pos:end="9:69"><name pos:start="9:34" pos:end="9:65">memory_region_get_dirty_log_mask</name><argument_list pos:start="9:66" pos:end="9:69">(<argument pos:start="9:67" pos:end="9:68"><expr pos:start="9:67" pos:end="9:68"><name pos:start="9:67" pos:end="9:68">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="11:9" pos:end="17:9"><if pos:start="11:9" pos:end="17:9">if <condition pos:start="11:12" pos:end="11:54">(<expr pos:start="11:13" pos:end="11:53"><name pos:start="11:13" pos:end="11:26">dirty_log_mask</name> <operator pos:start="11:28" pos:end="11:28">&amp;</operator> <operator pos:start="11:30" pos:end="11:30">(</operator><literal type="number" pos:start="11:31" pos:end="11:31">1</literal> <operator pos:start="11:33" pos:end="11:34">&lt;&lt;</operator> <name pos:start="11:36" pos:end="11:52">DIRTY_MEMORY_CODE</name><operator pos:start="11:53" pos:end="11:53">)</operator></expr>)</condition> <block pos:start="11:56" pos:end="17:9">{<block_content pos:start="13:13" pos:end="15:56">

            <expr_stmt pos:start="13:13" pos:end="13:58"><expr pos:start="13:13" pos:end="13:57"><call pos:start="13:13" pos:end="13:57"><name pos:start="13:13" pos:end="13:36">tb_invalidate_phys_range</name><argument_list pos:start="13:37" pos:end="13:57">(<argument pos:start="13:38" pos:end="13:41"><expr pos:start="13:38" pos:end="13:41"><name pos:start="13:38" pos:end="13:41">addr</name></expr></argument>, <argument pos:start="13:44" pos:end="13:56"><expr pos:start="13:44" pos:end="13:56"><name pos:start="13:44" pos:end="13:47">addr</name> <operator pos:start="13:49" pos:end="13:49">+</operator> <name pos:start="13:51" pos:end="13:56">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="15:13" pos:end="15:56"><expr pos:start="15:13" pos:end="15:55"><name pos:start="15:13" pos:end="15:26">dirty_log_mask</name> <operator pos:start="15:28" pos:end="15:29">&amp;=</operator> <operator pos:start="15:31" pos:end="15:31">~</operator><operator pos:start="15:32" pos:end="15:32">(</operator><literal type="number" pos:start="15:33" pos:end="15:33">1</literal> <operator pos:start="15:35" pos:end="15:36">&lt;&lt;</operator> <name pos:start="15:38" pos:end="15:54">DIRTY_MEMORY_CODE</name><operator pos:start="15:55" pos:end="15:55">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:74"><expr pos:start="19:9" pos:end="19:73"><call pos:start="19:9" pos:end="19:73"><name pos:start="19:9" pos:end="19:43">cpu_physical_memory_set_dirty_range</name><argument_list pos:start="19:44" pos:end="19:73">(<argument pos:start="19:45" pos:end="19:48"><expr pos:start="19:45" pos:end="19:48"><name pos:start="19:45" pos:end="19:48">addr</name></expr></argument>, <argument pos:start="19:51" pos:end="19:56"><expr pos:start="19:51" pos:end="19:56"><name pos:start="19:51" pos:end="19:56">length</name></expr></argument>, <argument pos:start="19:59" pos:end="19:72"><expr pos:start="19:59" pos:end="19:72"><name pos:start="19:59" pos:end="19:72">dirty_log_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="25:5">else <block pos:start="21:12" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:42">

        <expr_stmt pos:start="23:9" pos:end="23:42"><expr pos:start="23:9" pos:end="23:41"><call pos:start="23:9" pos:end="23:41"><name pos:start="23:9" pos:end="23:27">xen_modified_memory</name><argument_list pos:start="23:28" pos:end="23:41">(<argument pos:start="23:29" pos:end="23:32"><expr pos:start="23:29" pos:end="23:32"><name pos:start="23:29" pos:end="23:32">addr</name></expr></argument>, <argument pos:start="23:35" pos:end="23:40"><expr pos:start="23:35" pos:end="23:40"><name pos:start="23:35" pos:end="23:40">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
