<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/950.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">planarCopyWrapper</name><parameter_list pos:start="1:29" pos:end="5:61">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">SwsContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">c</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:64"><name pos:start="1:60" pos:end="1:62">src</name><index pos:start="1:63" pos:end="1:64">[]</index></name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:44"><name pos:start="3:34" pos:end="3:42">srcStride</name><index pos:start="3:43" pos:end="3:44">[]</index></name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:59"><decl pos:start="3:47" pos:end="3:59"><type pos:start="3:47" pos:end="3:59"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:59">srcSliceY</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:74"><decl pos:start="3:62" pos:end="3:74"><type pos:start="3:62" pos:end="3:74"><name pos:start="3:62" pos:end="3:64">int</name></type> <name pos:start="3:66" pos:end="3:74">srcSliceH</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:43"><decl pos:start="5:30" pos:end="5:43"><type pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:36">uint8_t</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43"><name pos:start="5:39" pos:end="5:41">dst</name><index pos:start="5:42" pos:end="5:43">[]</index></name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:60"><decl pos:start="5:46" pos:end="5:60"><type pos:start="5:46" pos:end="5:58"><name pos:start="5:46" pos:end="5:48">int</name></type> <name pos:start="5:50" pos:end="5:60"><name pos:start="5:50" pos:end="5:58">dstStride</name><index pos:start="5:59" pos:end="5:60">[]</index></name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="409:1">{<block_content pos:start="9:5" pos:end="407:21">

    <decl_stmt pos:start="9:5" pos:end="9:75"><decl pos:start="9:5" pos:end="9:74"><type pos:start="9:5" pos:end="9:30"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:28">AVPixFmtDescriptor</name> <modifier pos:start="9:30" pos:end="9:30">*</modifier></type><name pos:start="9:31" pos:end="9:38">desc_src</name> <init pos:start="9:40" pos:end="9:74">= <expr pos:start="9:42" pos:end="9:74"><call pos:start="9:42" pos:end="9:74"><name pos:start="9:42" pos:end="9:60">av_pix_fmt_desc_get</name><argument_list pos:start="9:61" pos:end="9:74">(<argument pos:start="9:62" pos:end="9:73"><expr pos:start="9:62" pos:end="9:73"><name pos:start="9:62" pos:end="9:73"><name pos:start="9:62" pos:end="9:62">c</name><operator pos:start="9:63" pos:end="9:64">-&gt;</operator><name pos:start="9:65" pos:end="9:73">srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:75"><decl pos:start="11:5" pos:end="11:74"><type pos:start="11:5" pos:end="11:30"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:28">AVPixFmtDescriptor</name> <modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:38">desc_dst</name> <init pos:start="11:40" pos:end="11:74">= <expr pos:start="11:42" pos:end="11:74"><call pos:start="11:42" pos:end="11:74"><name pos:start="11:42" pos:end="11:60">av_pix_fmt_desc_get</name><argument_list pos:start="11:61" pos:end="11:74">(<argument pos:start="11:62" pos:end="11:73"><expr pos:start="11:62" pos:end="11:73"><name pos:start="11:62" pos:end="11:73"><name pos:start="11:62" pos:end="11:62">c</name><operator pos:start="11:63" pos:end="11:64">-&gt;</operator><name pos:start="11:65" pos:end="11:73">dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">plane</name></decl>, <decl pos:start="13:16" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:16">i</name></decl>, <decl pos:start="13:19" pos:end="13:19"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:19">j</name></decl>;</decl_stmt>

    <for pos:start="15:5" pos:end="405:5">for <control pos:start="15:9" pos:end="15:39">(<init pos:start="15:10" pos:end="15:19"><expr pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:14">plane</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr>;</init> <condition pos:start="15:21" pos:end="15:30"><expr pos:start="15:21" pos:end="15:29"><name pos:start="15:21" pos:end="15:25">plane</name> <operator pos:start="15:27" pos:end="15:27">&lt;</operator> <literal type="number" pos:start="15:29" pos:end="15:29">4</literal></expr>;</condition> <incr pos:start="15:32" pos:end="15:38"><expr pos:start="15:32" pos:end="15:38"><name pos:start="15:32" pos:end="15:36">plane</name><operator pos:start="15:37" pos:end="15:38">++</operator></expr></incr>)</control> <block pos:start="15:41" pos:end="405:5">{<block_content pos:start="17:9" pos:end="403:9">

        <decl_stmt pos:start="17:9" pos:end="17:100"><decl pos:start="17:9" pos:end="17:99"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:18">length</name> <init pos:start="17:20" pos:end="17:99">= <expr pos:start="17:22" pos:end="17:99"><ternary pos:start="17:22" pos:end="17:99"><condition pos:start="17:22" pos:end="17:49"><expr pos:start="17:22" pos:end="17:47"><operator pos:start="17:22" pos:end="17:22">(</operator><name pos:start="17:23" pos:end="17:27">plane</name> <operator pos:start="17:29" pos:end="17:30">==</operator> <literal type="number" pos:start="17:32" pos:end="17:32">0</literal> <operator pos:start="17:34" pos:end="17:35">||</operator> <name pos:start="17:37" pos:end="17:41">plane</name> <operator pos:start="17:43" pos:end="17:44">==</operator> <literal type="number" pos:start="17:46" pos:end="17:46">3</literal><operator pos:start="17:47" pos:end="17:47">)</operator></expr> ?</condition><then pos:start="17:51" pos:end="17:57"> <expr pos:start="17:51" pos:end="17:57"><name pos:start="17:51" pos:end="17:57"><name pos:start="17:51" pos:end="17:51">c</name><operator pos:start="17:52" pos:end="17:53">-&gt;</operator><name pos:start="17:54" pos:end="17:57">srcW</name></name></expr>  </then><else pos:start="17:60" pos:end="17:99">: <expr pos:start="17:62" pos:end="17:99"><operator pos:start="17:62" pos:end="17:62">-</operator><operator pos:start="17:63" pos:end="17:63">(</operator><operator pos:start="17:64" pos:end="17:64">(</operator><operator pos:start="17:65" pos:end="17:65">-</operator><name pos:start="17:66" pos:end="17:72"><name pos:start="17:66" pos:end="17:66">c</name><operator pos:start="17:67" pos:end="17:68">-&gt;</operator><name pos:start="17:69" pos:end="17:72">srcW</name></name>  <operator pos:start="17:75" pos:end="17:75">)</operator> <operator pos:start="17:77" pos:end="17:78">&gt;&gt;</operator> <name pos:start="17:80" pos:end="17:98"><name pos:start="17:80" pos:end="17:80">c</name><operator pos:start="17:81" pos:end="17:82">-&gt;</operator><name pos:start="17:83" pos:end="17:98">chrDstHSubSample</name></name><operator pos:start="17:99" pos:end="17:99">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:100"><decl pos:start="19:9" pos:end="19:99"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:13">y</name> <init pos:start="19:15" pos:end="19:99">=      <expr pos:start="19:22" pos:end="19:99"><ternary pos:start="19:22" pos:end="19:99"><condition pos:start="19:22" pos:end="19:49"><expr pos:start="19:22" pos:end="19:47"><operator pos:start="19:22" pos:end="19:22">(</operator><name pos:start="19:23" pos:end="19:27">plane</name> <operator pos:start="19:29" pos:end="19:30">==</operator> <literal type="number" pos:start="19:32" pos:end="19:32">0</literal> <operator pos:start="19:34" pos:end="19:35">||</operator> <name pos:start="19:37" pos:end="19:41">plane</name> <operator pos:start="19:43" pos:end="19:44">==</operator> <literal type="number" pos:start="19:46" pos:end="19:46">3</literal><operator pos:start="19:47" pos:end="19:47">)</operator></expr> ?</condition><then pos:start="19:51" pos:end="19:59"> <expr pos:start="19:51" pos:end="19:59"><name pos:start="19:51" pos:end="19:59">srcSliceY</name></expr></then><else pos:start="19:60" pos:end="19:99">: <expr pos:start="19:62" pos:end="19:99"><operator pos:start="19:62" pos:end="19:62">-</operator><operator pos:start="19:63" pos:end="19:63">(</operator><operator pos:start="19:64" pos:end="19:64">(</operator><operator pos:start="19:65" pos:end="19:65">-</operator><name pos:start="19:66" pos:end="19:74">srcSliceY</name><operator pos:start="19:75" pos:end="19:75">)</operator> <operator pos:start="19:77" pos:end="19:78">&gt;&gt;</operator> <name pos:start="19:80" pos:end="19:98"><name pos:start="19:80" pos:end="19:80">c</name><operator pos:start="19:81" pos:end="19:82">-&gt;</operator><name pos:start="19:83" pos:end="19:98">chrDstVSubSample</name></name><operator pos:start="19:99" pos:end="19:99">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:100"><decl pos:start="21:9" pos:end="21:99"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:18">height</name> <init pos:start="21:20" pos:end="21:99">= <expr pos:start="21:22" pos:end="21:99"><ternary pos:start="21:22" pos:end="21:99"><condition pos:start="21:22" pos:end="21:49"><expr pos:start="21:22" pos:end="21:47"><operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:27">plane</name> <operator pos:start="21:29" pos:end="21:30">==</operator> <literal type="number" pos:start="21:32" pos:end="21:32">0</literal> <operator pos:start="21:34" pos:end="21:35">||</operator> <name pos:start="21:37" pos:end="21:41">plane</name> <operator pos:start="21:43" pos:end="21:44">==</operator> <literal type="number" pos:start="21:46" pos:end="21:46">3</literal><operator pos:start="21:47" pos:end="21:47">)</operator></expr> ?</condition><then pos:start="21:51" pos:end="21:59"> <expr pos:start="21:51" pos:end="21:59"><name pos:start="21:51" pos:end="21:59">srcSliceH</name></expr></then><else pos:start="21:60" pos:end="21:99">: <expr pos:start="21:62" pos:end="21:99"><operator pos:start="21:62" pos:end="21:62">-</operator><operator pos:start="21:63" pos:end="21:63">(</operator><operator pos:start="21:64" pos:end="21:64">(</operator><operator pos:start="21:65" pos:end="21:65">-</operator><name pos:start="21:66" pos:end="21:74">srcSliceH</name><operator pos:start="21:75" pos:end="21:75">)</operator> <operator pos:start="21:77" pos:end="21:78">&gt;&gt;</operator> <name pos:start="21:80" pos:end="21:98"><name pos:start="21:80" pos:end="21:80">c</name><operator pos:start="21:81" pos:end="21:82">-&gt;</operator><name pos:start="21:83" pos:end="21:98">chrDstVSubSample</name></name><operator pos:start="21:99" pos:end="21:99">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:43"><decl pos:start="23:9" pos:end="23:42"><type pos:start="23:9" pos:end="23:23"><specifier pos:start="23:9" pos:end="23:13">const</specifier> <name pos:start="23:15" pos:end="23:21">uint8_t</name> <modifier pos:start="23:23" pos:end="23:23">*</modifier></type><name pos:start="23:24" pos:end="23:29">srcPtr</name> <init pos:start="23:31" pos:end="23:42">= <expr pos:start="23:33" pos:end="23:42"><name pos:start="23:33" pos:end="23:42"><name pos:start="23:33" pos:end="23:35">src</name><index pos:start="23:36" pos:end="23:42">[<expr pos:start="23:37" pos:end="23:41"><name pos:start="23:37" pos:end="23:41">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:60"><decl pos:start="25:9" pos:end="25:59"><type pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:15">uint8_t</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:23">dstPtr</name> <init pos:start="25:25" pos:end="25:59">= <expr pos:start="25:27" pos:end="25:59"><name pos:start="25:27" pos:end="25:36"><name pos:start="25:27" pos:end="25:29">dst</name><index pos:start="25:30" pos:end="25:36">[<expr pos:start="25:31" pos:end="25:35"><name pos:start="25:31" pos:end="25:35">plane</name></expr>]</index></name> <operator pos:start="25:38" pos:end="25:38">+</operator> <name pos:start="25:40" pos:end="25:55"><name pos:start="25:40" pos:end="25:48">dstStride</name><index pos:start="25:49" pos:end="25:55">[<expr pos:start="25:50" pos:end="25:54"><name pos:start="25:50" pos:end="25:54">plane</name></expr>]</index></name> <operator pos:start="25:57" pos:end="25:57">*</operator> <name pos:start="25:59" pos:end="25:59">y</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:23"><name pos:start="29:14" pos:end="29:16">dst</name><index pos:start="29:17" pos:end="29:23">[<expr pos:start="29:18" pos:end="29:22"><name pos:start="29:18" pos:end="29:22">plane</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="line" pos:start="33:9" pos:end="33:35">// ignore palette for GRAY8</comment>

        <if_stmt pos:start="35:9" pos:end="35:44"><if pos:start="35:9" pos:end="35:44">if <condition pos:start="35:12" pos:end="35:34">(<expr pos:start="35:13" pos:end="35:33"><name pos:start="35:13" pos:end="35:17">plane</name> <operator pos:start="35:19" pos:end="35:20">==</operator> <literal type="number" pos:start="35:22" pos:end="35:22">1</literal> <operator pos:start="35:24" pos:end="35:25">&amp;&amp;</operator> <operator pos:start="35:27" pos:end="35:27">!</operator><name pos:start="35:28" pos:end="35:33"><name pos:start="35:28" pos:end="35:30">dst</name><index pos:start="35:31" pos:end="35:33">[<expr pos:start="35:32" pos:end="35:32"><literal type="number" pos:start="35:32" pos:end="35:32">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="35:36" pos:end="35:44"><block_content pos:start="35:36" pos:end="35:44"> <continue pos:start="35:36" pos:end="35:44">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="403:9"><if pos:start="37:9" pos:end="61:9">if <condition pos:start="37:12" pos:end="37:51">(<expr pos:start="37:13" pos:end="37:50"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:23"><name pos:start="37:14" pos:end="37:16">src</name><index pos:start="37:17" pos:end="37:23">[<expr pos:start="37:18" pos:end="37:22"><name pos:start="37:18" pos:end="37:22">plane</name></expr>]</index></name> <operator pos:start="37:25" pos:end="37:26">||</operator> <operator pos:start="37:28" pos:end="37:28">(</operator><name pos:start="37:29" pos:end="37:33">plane</name> <operator pos:start="37:35" pos:end="37:36">==</operator> <literal type="number" pos:start="37:38" pos:end="37:38">1</literal> <operator pos:start="37:40" pos:end="37:41">&amp;&amp;</operator> <operator pos:start="37:43" pos:end="37:43">!</operator><name pos:start="37:44" pos:end="37:49"><name pos:start="37:44" pos:end="37:46">src</name><index pos:start="37:47" pos:end="37:49">[<expr pos:start="37:48" pos:end="37:48"><literal type="number" pos:start="37:48" pos:end="37:48">2</literal></expr>]</index></name><operator pos:start="37:50" pos:end="37:50">)</operator></expr>)</condition> <block pos:start="37:53" pos:end="61:9">{<block_content pos:start="39:13" pos:end="59:31">

            <decl_stmt pos:start="39:13" pos:end="39:47"><decl pos:start="39:13" pos:end="39:46"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:19">val</name> <init pos:start="39:21" pos:end="39:46">= <expr pos:start="39:23" pos:end="39:46"><ternary pos:start="39:23" pos:end="39:46"><condition pos:start="39:23" pos:end="39:36"><expr pos:start="39:23" pos:end="39:34"><operator pos:start="39:23" pos:end="39:23">(</operator><name pos:start="39:24" pos:end="39:28">plane</name> <operator pos:start="39:30" pos:end="39:31">==</operator> <literal type="number" pos:start="39:33" pos:end="39:33">3</literal><operator pos:start="39:34" pos:end="39:34">)</operator></expr> ?</condition><then pos:start="39:38" pos:end="39:40"> <expr pos:start="39:38" pos:end="39:40"><literal type="number" pos:start="39:38" pos:end="39:40">255</literal></expr> </then><else pos:start="39:42" pos:end="39:46">: <expr pos:start="39:44" pos:end="39:46"><literal type="number" pos:start="39:44" pos:end="39:46">128</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="41:13" pos:end="43:28"><if pos:start="41:13" pos:end="43:28">if <condition pos:start="41:16" pos:end="41:38">(<expr pos:start="41:17" pos:end="41:37"><call pos:start="41:17" pos:end="41:37"><name pos:start="41:17" pos:end="41:23">is16BPS</name><argument_list pos:start="41:24" pos:end="41:37">(<argument pos:start="41:25" pos:end="41:36"><expr pos:start="41:25" pos:end="41:36"><name pos:start="41:25" pos:end="41:36"><name pos:start="41:25" pos:end="41:25">c</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:36">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:28"><block_content pos:start="43:17" pos:end="43:28">

                <expr_stmt pos:start="43:17" pos:end="43:28"><expr pos:start="43:17" pos:end="43:27"><name pos:start="43:17" pos:end="43:22">length</name> <operator pos:start="43:24" pos:end="43:25">*=</operator> <literal type="number" pos:start="43:27" pos:end="43:27">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="45:13" pos:end="59:31"><if pos:start="45:13" pos:end="55:13">if <condition pos:start="45:16" pos:end="45:43">(<expr pos:start="45:17" pos:end="45:42"><call pos:start="45:17" pos:end="45:42"><name pos:start="45:17" pos:end="45:28">is9_OR_10BPS</name><argument_list pos:start="45:29" pos:end="45:42">(<argument pos:start="45:30" pos:end="45:41"><expr pos:start="45:30" pos:end="45:41"><name pos:start="45:30" pos:end="45:41"><name pos:start="45:30" pos:end="45:30">c</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:45" pos:end="55:13">{<block_content pos:start="47:17" pos:end="53:52">

                <expr_stmt pos:start="47:17" pos:end="53:52"><expr pos:start="47:17" pos:end="53:51"><call pos:start="47:17" pos:end="53:51"><name pos:start="47:17" pos:end="47:31">fill_plane9or10</name><argument_list pos:start="47:32" pos:end="53:51">(<argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:35">dst</name><index pos:start="47:36" pos:end="47:42">[<expr pos:start="47:37" pos:end="47:41"><name pos:start="47:37" pos:end="47:41">plane</name></expr>]</index></name></expr></argument>, <argument pos:start="47:45" pos:end="47:60"><expr pos:start="47:45" pos:end="47:60"><name pos:start="47:45" pos:end="47:60"><name pos:start="47:45" pos:end="47:53">dstStride</name><index pos:start="47:54" pos:end="47:60">[<expr pos:start="47:55" pos:end="47:59"><name pos:start="47:55" pos:end="47:59">plane</name></expr>]</index></name></expr></argument>,

                                <argument pos:start="49:33" pos:end="49:38"><expr pos:start="49:33" pos:end="49:38"><name pos:start="49:33" pos:end="49:38">length</name></expr></argument>, <argument pos:start="49:41" pos:end="49:46"><expr pos:start="49:41" pos:end="49:46"><name pos:start="49:41" pos:end="49:46">height</name></expr></argument>, <argument pos:start="49:49" pos:end="49:49"><expr pos:start="49:49" pos:end="49:49"><name pos:start="49:49" pos:end="49:49">y</name></expr></argument>, <argument pos:start="49:52" pos:end="49:54"><expr pos:start="49:52" pos:end="49:54"><name pos:start="49:52" pos:end="49:54">val</name></expr></argument>,

                                <argument pos:start="51:33" pos:end="51:70"><expr pos:start="51:33" pos:end="51:70"><name pos:start="51:33" pos:end="51:53"><name pos:start="51:33" pos:end="51:40">desc_dst</name><operator pos:start="51:41" pos:end="51:42">-&gt;</operator><name pos:start="51:43" pos:end="51:46">comp</name><index pos:start="51:47" pos:end="51:53">[<expr pos:start="51:48" pos:end="51:52"><name pos:start="51:48" pos:end="51:52">plane</name></expr>]</index></name><operator pos:start="51:54" pos:end="51:54">.</operator><name pos:start="51:55" pos:end="51:66">depth_minus1</name> <operator pos:start="51:68" pos:end="51:68">+</operator> <literal type="number" pos:start="51:70" pos:end="51:70">1</literal></expr></argument>,

                                <argument pos:start="53:33" pos:end="53:50"><expr pos:start="53:33" pos:end="53:50"><call pos:start="53:33" pos:end="53:50"><name pos:start="53:33" pos:end="53:36">isBE</name><argument_list pos:start="53:37" pos:end="53:50">(<argument pos:start="53:38" pos:end="53:49"><expr pos:start="53:38" pos:end="53:49"><name pos:start="53:38" pos:end="53:49"><name pos:start="53:38" pos:end="53:38">c</name><operator pos:start="53:39" pos:end="53:40">-&gt;</operator><name pos:start="53:41" pos:end="53:49">dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="55:15" pos:end="59:31">else<block type="pseudo" pos:start="57:17" pos:end="59:31"><block_content pos:start="57:17" pos:end="59:31">

                <expr_stmt pos:start="57:17" pos:end="59:31"><expr pos:start="57:17" pos:end="59:30"><call pos:start="57:17" pos:end="59:30"><name pos:start="57:17" pos:end="57:25">fillPlane</name><argument_list pos:start="57:26" pos:end="59:30">(<argument pos:start="57:27" pos:end="57:36"><expr pos:start="57:27" pos:end="57:36"><name pos:start="57:27" pos:end="57:36"><name pos:start="57:27" pos:end="57:29">dst</name><index pos:start="57:30" pos:end="57:36">[<expr pos:start="57:31" pos:end="57:35"><name pos:start="57:31" pos:end="57:35">plane</name></expr>]</index></name></expr></argument>, <argument pos:start="57:39" pos:end="57:54"><expr pos:start="57:39" pos:end="57:54"><name pos:start="57:39" pos:end="57:54"><name pos:start="57:39" pos:end="57:47">dstStride</name><index pos:start="57:48" pos:end="57:54">[<expr pos:start="57:49" pos:end="57:53"><name pos:start="57:49" pos:end="57:53">plane</name></expr>]</index></name></expr></argument>, <argument pos:start="57:57" pos:end="57:62"><expr pos:start="57:57" pos:end="57:62"><name pos:start="57:57" pos:end="57:62">length</name></expr></argument>, <argument pos:start="57:65" pos:end="57:70"><expr pos:start="57:65" pos:end="57:70"><name pos:start="57:65" pos:end="57:70">height</name></expr></argument>, <argument pos:start="57:73" pos:end="57:73"><expr pos:start="57:73" pos:end="57:73"><name pos:start="57:73" pos:end="57:73">y</name></expr></argument>,

                          <argument pos:start="59:27" pos:end="59:29"><expr pos:start="59:27" pos:end="59:29"><name pos:start="59:27" pos:end="59:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="403:9">else <block pos:start="61:16" pos:end="403:9">{<block_content pos:start="63:13" pos:end="401:13">

            <if_stmt pos:start="63:13" pos:end="401:13"><if pos:start="63:13" pos:end="225:13">if <condition pos:start="63:16" pos:end="63:43">(<expr pos:start="63:17" pos:end="63:42"><call pos:start="63:17" pos:end="63:42"><name pos:start="63:17" pos:end="63:28">is9_OR_10BPS</name><argument_list pos:start="63:29" pos:end="63:42">(<argument pos:start="63:30" pos:end="63:41"><expr pos:start="63:30" pos:end="63:41"><name pos:start="63:30" pos:end="63:41"><name pos:start="63:30" pos:end="63:30">c</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:41">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:45" pos:end="225:13">{<block_content pos:start="65:17" pos:end="223:17">

                <decl_stmt pos:start="65:17" pos:end="65:77"><decl pos:start="65:17" pos:end="65:76"><type pos:start="65:17" pos:end="65:25"><specifier pos:start="65:17" pos:end="65:21">const</specifier> <name pos:start="65:23" pos:end="65:25">int</name></type> <name pos:start="65:27" pos:end="65:35">src_depth</name> <init pos:start="65:37" pos:end="65:76">= <expr pos:start="65:39" pos:end="65:76"><name pos:start="65:39" pos:end="65:59"><name pos:start="65:39" pos:end="65:46">desc_src</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:52">comp</name><index pos:start="65:53" pos:end="65:59">[<expr pos:start="65:54" pos:end="65:58"><name pos:start="65:54" pos:end="65:58">plane</name></expr>]</index></name><operator pos:start="65:60" pos:end="65:60">.</operator><name pos:start="65:61" pos:end="65:72">depth_minus1</name> <operator pos:start="65:74" pos:end="65:74">+</operator> <literal type="number" pos:start="65:76" pos:end="65:76">1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="67:17" pos:end="67:77"><decl pos:start="67:17" pos:end="67:76"><type pos:start="67:17" pos:end="67:25"><specifier pos:start="67:17" pos:end="67:21">const</specifier> <name pos:start="67:23" pos:end="67:25">int</name></type> <name pos:start="67:27" pos:end="67:35">dst_depth</name> <init pos:start="67:37" pos:end="67:76">= <expr pos:start="67:39" pos:end="67:76"><name pos:start="67:39" pos:end="67:59"><name pos:start="67:39" pos:end="67:46">desc_dst</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:52">comp</name><index pos:start="67:53" pos:end="67:59">[<expr pos:start="67:54" pos:end="67:58"><name pos:start="67:54" pos:end="67:58">plane</name></expr>]</index></name><operator pos:start="67:60" pos:end="67:60">.</operator><name pos:start="67:61" pos:end="67:72">depth_minus1</name> <operator pos:start="67:74" pos:end="67:74">+</operator> <literal type="number" pos:start="67:76" pos:end="67:76">1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="69:17" pos:end="69:68"><decl pos:start="69:17" pos:end="69:67"><type pos:start="69:17" pos:end="69:32"><specifier pos:start="69:17" pos:end="69:21">const</specifier> <name pos:start="69:23" pos:end="69:30">uint16_t</name> <modifier pos:start="69:32" pos:end="69:32">*</modifier></type><name pos:start="69:33" pos:end="69:39">srcPtr2</name> <init pos:start="69:41" pos:end="69:67">= <expr pos:start="69:43" pos:end="69:67"><operator pos:start="69:43" pos:end="69:43">(</operator><specifier pos:start="69:44" pos:end="69:48">const</specifier> <name pos:start="69:50" pos:end="69:57">uint16_t</name> <operator pos:start="69:59" pos:end="69:59">*</operator><operator pos:start="69:60" pos:end="69:60">)</operator> <name pos:start="69:62" pos:end="69:67">srcPtr</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="73:17" pos:end="223:17"><if pos:start="73:17" pos:end="121:17">if <condition pos:start="73:20" pos:end="73:42">(<expr pos:start="73:21" pos:end="73:41"><call pos:start="73:21" pos:end="73:41"><name pos:start="73:21" pos:end="73:27">is16BPS</name><argument_list pos:start="73:28" pos:end="73:41">(<argument pos:start="73:29" pos:end="73:40"><expr pos:start="73:29" pos:end="73:40"><name pos:start="73:29" pos:end="73:40"><name pos:start="73:29" pos:end="73:29">c</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:40">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:44" pos:end="121:17">{<block_content pos:start="75:21" pos:end="119:21">

                    <decl_stmt pos:start="75:21" pos:end="94:0"><decl pos:start="75:21" pos:end="75:59"><type pos:start="75:21" pos:end="75:30"><name pos:start="75:21" pos:end="75:28">uint16_t</name> <modifier pos:start="75:30" pos:end="75:30">*</modifier></type><name pos:start="75:31" pos:end="75:37">dstPtr2</name> <init pos:start="75:39" pos:end="75:59">= <expr pos:start="75:41" pos:end="75:59"><operator pos:start="75:41" pos:end="75:41">(</operator><name pos:start="75:42" pos:end="75:49">uint16_t</name> <operator pos:start="75:51" pos:end="75:51">*</operator><operator pos:start="75:52" pos:end="75:52">)</operator> <name pos:start="75:54" pos:end="75:59">dstPtr</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="77:1" pos:end="93:21">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:23">COPY9_OR_10TO16</name><parameter_list pos:start="77:24" pos:end="77:37">(<parameter pos:start="77:25" pos:end="77:29"><type pos:start="77:25" pos:end="77:29"><name pos:start="77:25" pos:end="77:29">rfunc</name></type></parameter>, <parameter pos:start="77:32" pos:end="77:36"><type pos:start="77:32" pos:end="77:36"><name pos:start="77:32" pos:end="77:36">wfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="79:21" pos:end="93:21">for (i = 0; i &lt; height; i++) { \

                        for (j = 0; j &lt; length; j++) { \

                            int srcpx = rfunc(&amp;srcPtr2[j]); \

                            wfunc(&amp;dstPtr2[j], (srcpx &lt;&lt; (16 - src_depth)) | (srcpx &gt;&gt; (2 * src_depth - 16))); \

                        } \

                        dstPtr2 += dstStride[plane] / 2; \

                        srcPtr2 += srcStride[plane] / 2; \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="95:21" pos:end="119:21"><if pos:start="95:21" pos:end="107:21">if <condition pos:start="95:24" pos:end="95:43">(<expr pos:start="95:25" pos:end="95:42"><call pos:start="95:25" pos:end="95:42"><name pos:start="95:25" pos:end="95:28">isBE</name><argument_list pos:start="95:29" pos:end="95:42">(<argument pos:start="95:30" pos:end="95:41"><expr pos:start="95:30" pos:end="95:41"><name pos:start="95:30" pos:end="95:41"><name pos:start="95:30" pos:end="95:30">c</name><operator pos:start="95:31" pos:end="95:32">-&gt;</operator><name pos:start="95:33" pos:end="95:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:45" pos:end="107:21">{<block_content pos:start="97:25" pos:end="105:25">

                        <if_stmt pos:start="97:25" pos:end="105:25"><if pos:start="97:25" pos:end="101:25">if <condition pos:start="97:28" pos:end="97:47">(<expr pos:start="97:29" pos:end="97:46"><call pos:start="97:29" pos:end="97:46"><name pos:start="97:29" pos:end="97:32">isBE</name><argument_list pos:start="97:33" pos:end="97:46">(<argument pos:start="97:34" pos:end="97:45"><expr pos:start="97:34" pos:end="97:45"><name pos:start="97:34" pos:end="97:45"><name pos:start="97:34" pos:end="97:34">c</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:49" pos:end="101:25">{<block_content pos:start="99:29" pos:end="99:62">

                            <expr_stmt pos:start="99:29" pos:end="99:62"><expr pos:start="99:29" pos:end="99:61"><call pos:start="99:29" pos:end="99:61"><name pos:start="99:29" pos:end="99:43">COPY9_OR_10TO16</name><argument_list pos:start="99:44" pos:end="99:61">(<argument pos:start="99:45" pos:end="99:51"><expr pos:start="99:45" pos:end="99:51"><name pos:start="99:45" pos:end="99:51">AV_RB16</name></expr></argument>, <argument pos:start="99:54" pos:end="99:60"><expr pos:start="99:54" pos:end="99:60"><name pos:start="99:54" pos:end="99:60">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="101:27" pos:end="105:25">else <block pos:start="101:32" pos:end="105:25">{<block_content pos:start="103:29" pos:end="103:62">

                            <expr_stmt pos:start="103:29" pos:end="103:62"><expr pos:start="103:29" pos:end="103:61"><call pos:start="103:29" pos:end="103:61"><name pos:start="103:29" pos:end="103:43">COPY9_OR_10TO16</name><argument_list pos:start="103:44" pos:end="103:61">(<argument pos:start="103:45" pos:end="103:51"><expr pos:start="103:45" pos:end="103:51"><name pos:start="103:45" pos:end="103:51">AV_RL16</name></expr></argument>, <argument pos:start="103:54" pos:end="103:60"><expr pos:start="103:54" pos:end="103:60"><name pos:start="103:54" pos:end="103:60">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="107:23" pos:end="119:21">else <block pos:start="107:28" pos:end="119:21">{<block_content pos:start="109:25" pos:end="117:25">

                        <if_stmt pos:start="109:25" pos:end="117:25"><if pos:start="109:25" pos:end="113:25">if <condition pos:start="109:28" pos:end="109:47">(<expr pos:start="109:29" pos:end="109:46"><call pos:start="109:29" pos:end="109:46"><name pos:start="109:29" pos:end="109:32">isBE</name><argument_list pos:start="109:33" pos:end="109:46">(<argument pos:start="109:34" pos:end="109:45"><expr pos:start="109:34" pos:end="109:45"><name pos:start="109:34" pos:end="109:45"><name pos:start="109:34" pos:end="109:34">c</name><operator pos:start="109:35" pos:end="109:36">-&gt;</operator><name pos:start="109:37" pos:end="109:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:49" pos:end="113:25">{<block_content pos:start="111:29" pos:end="111:62">

                            <expr_stmt pos:start="111:29" pos:end="111:62"><expr pos:start="111:29" pos:end="111:61"><call pos:start="111:29" pos:end="111:61"><name pos:start="111:29" pos:end="111:43">COPY9_OR_10TO16</name><argument_list pos:start="111:44" pos:end="111:61">(<argument pos:start="111:45" pos:end="111:51"><expr pos:start="111:45" pos:end="111:51"><name pos:start="111:45" pos:end="111:51">AV_RB16</name></expr></argument>, <argument pos:start="111:54" pos:end="111:60"><expr pos:start="111:54" pos:end="111:60"><name pos:start="111:54" pos:end="111:60">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="113:27" pos:end="117:25">else <block pos:start="113:32" pos:end="117:25">{<block_content pos:start="115:29" pos:end="115:62">

                            <expr_stmt pos:start="115:29" pos:end="115:62"><expr pos:start="115:29" pos:end="115:61"><call pos:start="115:29" pos:end="115:61"><name pos:start="115:29" pos:end="115:43">COPY9_OR_10TO16</name><argument_list pos:start="115:44" pos:end="115:61">(<argument pos:start="115:45" pos:end="115:51"><expr pos:start="115:45" pos:end="115:51"><name pos:start="115:45" pos:end="115:51">AV_RL16</name></expr></argument>, <argument pos:start="115:54" pos:end="115:60"><expr pos:start="115:54" pos:end="115:60"><name pos:start="115:54" pos:end="115:60">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="121:19" pos:end="189:17">else if <condition pos:start="121:27" pos:end="121:54">(<expr pos:start="121:28" pos:end="121:53"><call pos:start="121:28" pos:end="121:53"><name pos:start="121:28" pos:end="121:39">is9_OR_10BPS</name><argument_list pos:start="121:40" pos:end="121:53">(<argument pos:start="121:41" pos:end="121:52"><expr pos:start="121:41" pos:end="121:52"><name pos:start="121:41" pos:end="121:52"><name pos:start="121:41" pos:end="121:41">c</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:52">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:56" pos:end="189:17">{<block_content pos:start="123:21" pos:end="187:21">

                    <decl_stmt pos:start="123:21" pos:end="162:0"><decl pos:start="123:21" pos:end="123:59"><type pos:start="123:21" pos:end="123:30"><name pos:start="123:21" pos:end="123:28">uint16_t</name> <modifier pos:start="123:30" pos:end="123:30">*</modifier></type><name pos:start="123:31" pos:end="123:37">dstPtr2</name> <init pos:start="123:39" pos:end="123:59">= <expr pos:start="123:41" pos:end="123:59"><operator pos:start="123:41" pos:end="123:41">(</operator><name pos:start="123:42" pos:end="123:49">uint16_t</name> <operator pos:start="123:51" pos:end="123:51">*</operator><operator pos:start="123:52" pos:end="123:52">)</operator> <name pos:start="123:54" pos:end="123:59">dstPtr</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="125:1" pos:end="139:21">#<cpp:directive pos:start="125:2" pos:end="125:7">define</cpp:directive> <cpp:macro pos:start="125:9" pos:end="125:34"><name pos:start="125:9" pos:end="125:28">COPY9_OR_10TO9_OR_10</name><parameter_list pos:start="125:29" pos:end="125:34">(<parameter pos:start="125:30" pos:end="125:33"><type pos:start="125:30" pos:end="125:33"><name pos:start="125:30" pos:end="125:33">loop</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="127:21" pos:end="139:21">for (i = 0; i &lt; height; i++) { \

                        for (j = 0; j &lt; length; j++) { \

                            loop; \

                        } \

                        dstPtr2 += dstStride[plane] / 2; \

                        srcPtr2 += srcStride[plane] / 2; \

                    }</cpp:value></cpp:define>

<cpp:define pos:start="141:1" pos:end="161:21">#<cpp:directive pos:start="141:2" pos:end="141:7">define</cpp:directive> <cpp:macro pos:start="141:9" pos:end="141:44"><name pos:start="141:9" pos:end="141:30">COPY9_OR_10TO9_OR_10_2</name><parameter_list pos:start="141:31" pos:end="141:44">(<parameter pos:start="141:32" pos:end="141:36"><type pos:start="141:32" pos:end="141:36"><name pos:start="141:32" pos:end="141:36">rfunc</name></type></parameter>, <parameter pos:start="141:39" pos:end="141:43"><type pos:start="141:39" pos:end="141:43"><name pos:start="141:39" pos:end="141:43">wfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="143:21" pos:end="161:21">if (dst_depth &gt; src_depth) { \

                        COPY9_OR_10TO9_OR_10(int srcpx = rfunc(&amp;srcPtr2[j]); \

                            wfunc(&amp;dstPtr2[j], (srcpx &lt;&lt; 1) | (srcpx &gt;&gt; 9))); \

                    } else if (dst_depth &lt; src_depth) { \

                        DITHER_COPY(dstPtr2, dstStride[plane] / 2, wfunc, \

                                    srcPtr2, srcStride[plane] / 2, rfunc, \

                                    dither_8x8_1, 1, clip9); \

                    } else { \

                        COPY9_OR_10TO9_OR_10(wfunc(&amp;dstPtr2[j], rfunc(&amp;srcPtr2[j]))); \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="163:21" pos:end="187:21"><if pos:start="163:21" pos:end="175:21">if <condition pos:start="163:24" pos:end="163:43">(<expr pos:start="163:25" pos:end="163:42"><call pos:start="163:25" pos:end="163:42"><name pos:start="163:25" pos:end="163:28">isBE</name><argument_list pos:start="163:29" pos:end="163:42">(<argument pos:start="163:30" pos:end="163:41"><expr pos:start="163:30" pos:end="163:41"><name pos:start="163:30" pos:end="163:41"><name pos:start="163:30" pos:end="163:30">c</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:45" pos:end="175:21">{<block_content pos:start="165:25" pos:end="173:25">

                        <if_stmt pos:start="165:25" pos:end="173:25"><if pos:start="165:25" pos:end="169:25">if <condition pos:start="165:28" pos:end="165:47">(<expr pos:start="165:29" pos:end="165:46"><call pos:start="165:29" pos:end="165:46"><name pos:start="165:29" pos:end="165:32">isBE</name><argument_list pos:start="165:33" pos:end="165:46">(<argument pos:start="165:34" pos:end="165:45"><expr pos:start="165:34" pos:end="165:45"><name pos:start="165:34" pos:end="165:45"><name pos:start="165:34" pos:end="165:34">c</name><operator pos:start="165:35" pos:end="165:36">-&gt;</operator><name pos:start="165:37" pos:end="165:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:49" pos:end="169:25">{<block_content pos:start="167:29" pos:end="167:69">

                            <expr_stmt pos:start="167:29" pos:end="167:69"><expr pos:start="167:29" pos:end="167:68"><call pos:start="167:29" pos:end="167:68"><name pos:start="167:29" pos:end="167:50">COPY9_OR_10TO9_OR_10_2</name><argument_list pos:start="167:51" pos:end="167:68">(<argument pos:start="167:52" pos:end="167:58"><expr pos:start="167:52" pos:end="167:58"><name pos:start="167:52" pos:end="167:58">AV_RB16</name></expr></argument>, <argument pos:start="167:61" pos:end="167:67"><expr pos:start="167:61" pos:end="167:67"><name pos:start="167:61" pos:end="167:67">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="169:27" pos:end="173:25">else <block pos:start="169:32" pos:end="173:25">{<block_content pos:start="171:29" pos:end="171:69">

                            <expr_stmt pos:start="171:29" pos:end="171:69"><expr pos:start="171:29" pos:end="171:68"><call pos:start="171:29" pos:end="171:68"><name pos:start="171:29" pos:end="171:50">COPY9_OR_10TO9_OR_10_2</name><argument_list pos:start="171:51" pos:end="171:68">(<argument pos:start="171:52" pos:end="171:58"><expr pos:start="171:52" pos:end="171:58"><name pos:start="171:52" pos:end="171:58">AV_RL16</name></expr></argument>, <argument pos:start="171:61" pos:end="171:67"><expr pos:start="171:61" pos:end="171:67"><name pos:start="171:61" pos:end="171:67">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="175:23" pos:end="187:21">else <block pos:start="175:28" pos:end="187:21">{<block_content pos:start="177:25" pos:end="185:25">

                        <if_stmt pos:start="177:25" pos:end="185:25"><if pos:start="177:25" pos:end="181:25">if <condition pos:start="177:28" pos:end="177:47">(<expr pos:start="177:29" pos:end="177:46"><call pos:start="177:29" pos:end="177:46"><name pos:start="177:29" pos:end="177:32">isBE</name><argument_list pos:start="177:33" pos:end="177:46">(<argument pos:start="177:34" pos:end="177:45"><expr pos:start="177:34" pos:end="177:45"><name pos:start="177:34" pos:end="177:45"><name pos:start="177:34" pos:end="177:34">c</name><operator pos:start="177:35" pos:end="177:36">-&gt;</operator><name pos:start="177:37" pos:end="177:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:49" pos:end="181:25">{<block_content pos:start="179:29" pos:end="179:69">

                            <expr_stmt pos:start="179:29" pos:end="179:69"><expr pos:start="179:29" pos:end="179:68"><call pos:start="179:29" pos:end="179:68"><name pos:start="179:29" pos:end="179:50">COPY9_OR_10TO9_OR_10_2</name><argument_list pos:start="179:51" pos:end="179:68">(<argument pos:start="179:52" pos:end="179:58"><expr pos:start="179:52" pos:end="179:58"><name pos:start="179:52" pos:end="179:58">AV_RB16</name></expr></argument>, <argument pos:start="179:61" pos:end="179:67"><expr pos:start="179:61" pos:end="179:67"><name pos:start="179:61" pos:end="179:67">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="181:27" pos:end="185:25">else <block pos:start="181:32" pos:end="185:25">{<block_content pos:start="183:29" pos:end="183:69">

                            <expr_stmt pos:start="183:29" pos:end="183:69"><expr pos:start="183:29" pos:end="183:68"><call pos:start="183:29" pos:end="183:68"><name pos:start="183:29" pos:end="183:50">COPY9_OR_10TO9_OR_10_2</name><argument_list pos:start="183:51" pos:end="183:68">(<argument pos:start="183:52" pos:end="183:58"><expr pos:start="183:52" pos:end="183:58"><name pos:start="183:52" pos:end="183:58">AV_RL16</name></expr></argument>, <argument pos:start="183:61" pos:end="183:67"><expr pos:start="183:61" pos:end="183:67"><name pos:start="183:61" pos:end="183:67">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="189:19" pos:end="223:17">else <block pos:start="189:24" pos:end="223:17">{<block_content pos:start="213:21" pos:end="221:21">

<cpp:define pos:start="191:1" pos:end="191:32">#<cpp:directive pos:start="191:2" pos:end="191:7">define</cpp:directive> <cpp:macro pos:start="191:9" pos:end="191:16"><name pos:start="191:9" pos:end="191:10">W8</name><parameter_list pos:start="191:11" pos:end="191:16">(<parameter pos:start="191:12" pos:end="191:12"><type pos:start="191:12" pos:end="191:12"><name pos:start="191:12" pos:end="191:12">a</name></type></parameter>, <parameter pos:start="191:15" pos:end="191:15"><type pos:start="191:15" pos:end="191:15"><name pos:start="191:15" pos:end="191:15">b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="191:18" pos:end="191:32">{ *(a) = (b); }</cpp:value></cpp:define>

<cpp:define pos:start="193:1" pos:end="211:21">#<cpp:directive pos:start="193:2" pos:end="193:7">define</cpp:directive> <cpp:macro pos:start="193:9" pos:end="193:29"><name pos:start="193:9" pos:end="193:22">COPY9_OR_10TO8</name><parameter_list pos:start="193:23" pos:end="193:29">(<parameter pos:start="193:24" pos:end="193:28"><type pos:start="193:24" pos:end="193:28"><name pos:start="193:24" pos:end="193:28">rfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="195:21" pos:end="211:21">if (src_depth == 9) { \

                        DITHER_COPY(dstPtr,  dstStride[plane],   W8, \

                                    srcPtr2, srcStride[plane] / 2, rfunc, \

                                    dither_8x8_1, 1, av_clip_uint8); \

                    } else { \

                        DITHER_COPY(dstPtr,  dstStride[plane],   W8, \

                                    srcPtr2, srcStride[plane] / 2, rfunc, \

                                    dither_8x8_3, 2, av_clip_uint8); \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="213:21" pos:end="221:21"><if pos:start="213:21" pos:end="217:21">if <condition pos:start="213:24" pos:end="213:43">(<expr pos:start="213:25" pos:end="213:42"><call pos:start="213:25" pos:end="213:42"><name pos:start="213:25" pos:end="213:28">isBE</name><argument_list pos:start="213:29" pos:end="213:42">(<argument pos:start="213:30" pos:end="213:41"><expr pos:start="213:30" pos:end="213:41"><name pos:start="213:30" pos:end="213:41"><name pos:start="213:30" pos:end="213:30">c</name><operator pos:start="213:31" pos:end="213:32">-&gt;</operator><name pos:start="213:33" pos:end="213:41">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="213:45" pos:end="217:21">{<block_content pos:start="215:25" pos:end="215:48">

                        <expr_stmt pos:start="215:25" pos:end="215:48"><expr pos:start="215:25" pos:end="215:47"><call pos:start="215:25" pos:end="215:47"><name pos:start="215:25" pos:end="215:38">COPY9_OR_10TO8</name><argument_list pos:start="215:39" pos:end="215:47">(<argument pos:start="215:40" pos:end="215:46"><expr pos:start="215:40" pos:end="215:46"><name pos:start="215:40" pos:end="215:46">AV_RB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="217:23" pos:end="221:21">else <block pos:start="217:28" pos:end="221:21">{<block_content pos:start="219:25" pos:end="219:48">

                        <expr_stmt pos:start="219:25" pos:end="219:48"><expr pos:start="219:25" pos:end="219:47"><call pos:start="219:25" pos:end="219:47"><name pos:start="219:25" pos:end="219:38">COPY9_OR_10TO8</name><argument_list pos:start="219:39" pos:end="219:47">(<argument pos:start="219:40" pos:end="219:46"><expr pos:start="219:40" pos:end="219:46"><name pos:start="219:40" pos:end="219:46">AV_RL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="225:15" pos:end="315:13">else if <condition pos:start="225:23" pos:end="225:50">(<expr pos:start="225:24" pos:end="225:49"><call pos:start="225:24" pos:end="225:49"><name pos:start="225:24" pos:end="225:35">is9_OR_10BPS</name><argument_list pos:start="225:36" pos:end="225:49">(<argument pos:start="225:37" pos:end="225:48"><expr pos:start="225:37" pos:end="225:48"><name pos:start="225:37" pos:end="225:48"><name pos:start="225:37" pos:end="225:37">c</name><operator pos:start="225:38" pos:end="225:39">-&gt;</operator><name pos:start="225:40" pos:end="225:48">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:52" pos:end="315:13">{<block_content pos:start="227:17" pos:end="313:17">

                <decl_stmt pos:start="227:17" pos:end="227:77"><decl pos:start="227:17" pos:end="227:76"><type pos:start="227:17" pos:end="227:25"><specifier pos:start="227:17" pos:end="227:21">const</specifier> <name pos:start="227:23" pos:end="227:25">int</name></type> <name pos:start="227:27" pos:end="227:35">dst_depth</name> <init pos:start="227:37" pos:end="227:76">= <expr pos:start="227:39" pos:end="227:76"><name pos:start="227:39" pos:end="227:59"><name pos:start="227:39" pos:end="227:46">desc_dst</name><operator pos:start="227:47" pos:end="227:48">-&gt;</operator><name pos:start="227:49" pos:end="227:52">comp</name><index pos:start="227:53" pos:end="227:59">[<expr pos:start="227:54" pos:end="227:58"><name pos:start="227:54" pos:end="227:58">plane</name></expr>]</index></name><operator pos:start="227:60" pos:end="227:60">.</operator><name pos:start="227:61" pos:end="227:72">depth_minus1</name> <operator pos:start="227:74" pos:end="227:74">+</operator> <literal type="number" pos:start="227:76" pos:end="227:76">1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="229:17" pos:end="229:56"><decl pos:start="229:17" pos:end="229:55"><type pos:start="229:17" pos:end="229:26"><name pos:start="229:17" pos:end="229:24">uint16_t</name> <modifier pos:start="229:26" pos:end="229:26">*</modifier></type><name pos:start="229:27" pos:end="229:33">dstPtr2</name> <init pos:start="229:35" pos:end="229:55">= <expr pos:start="229:37" pos:end="229:55"><operator pos:start="229:37" pos:end="229:37">(</operator><name pos:start="229:38" pos:end="229:45">uint16_t</name> <operator pos:start="229:47" pos:end="229:47">*</operator><operator pos:start="229:48" pos:end="229:48">)</operator> <name pos:start="229:50" pos:end="229:55">dstPtr</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="233:17" pos:end="313:17"><if pos:start="233:17" pos:end="283:17">if <condition pos:start="233:20" pos:end="233:42">(<expr pos:start="233:21" pos:end="233:41"><call pos:start="233:21" pos:end="233:41"><name pos:start="233:21" pos:end="233:27">is16BPS</name><argument_list pos:start="233:28" pos:end="233:41">(<argument pos:start="233:29" pos:end="233:40"><expr pos:start="233:29" pos:end="233:40"><name pos:start="233:29" pos:end="233:40"><name pos:start="233:29" pos:end="233:29">c</name><operator pos:start="233:30" pos:end="233:31">-&gt;</operator><name pos:start="233:32" pos:end="233:40">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="233:44" pos:end="283:17">{<block_content pos:start="235:21" pos:end="281:21">

                    <decl_stmt pos:start="235:21" pos:end="256:0"><decl pos:start="235:21" pos:end="235:71"><type pos:start="235:21" pos:end="235:36"><specifier pos:start="235:21" pos:end="235:25">const</specifier> <name pos:start="235:27" pos:end="235:34">uint16_t</name> <modifier pos:start="235:36" pos:end="235:36">*</modifier></type><name pos:start="235:37" pos:end="235:43">srcPtr2</name> <init pos:start="235:45" pos:end="235:71">= <expr pos:start="235:47" pos:end="235:71"><operator pos:start="235:47" pos:end="235:47">(</operator><specifier pos:start="235:48" pos:end="235:52">const</specifier> <name pos:start="235:54" pos:end="235:61">uint16_t</name> <operator pos:start="235:63" pos:end="235:63">*</operator><operator pos:start="235:64" pos:end="235:64">)</operator> <name pos:start="235:66" pos:end="235:71">srcPtr</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="237:1" pos:end="255:21">#<cpp:directive pos:start="237:2" pos:end="237:7">define</cpp:directive> <cpp:macro pos:start="237:9" pos:end="237:37"><name pos:start="237:9" pos:end="237:23">COPY16TO9_OR_10</name><parameter_list pos:start="237:24" pos:end="237:37">(<parameter pos:start="237:25" pos:end="237:29"><type pos:start="237:25" pos:end="237:29"><name pos:start="237:25" pos:end="237:29">rfunc</name></type></parameter>, <parameter pos:start="237:32" pos:end="237:36"><type pos:start="237:32" pos:end="237:36"><name pos:start="237:32" pos:end="237:36">wfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="239:21" pos:end="255:21">if (dst_depth == 9) { \

                        DITHER_COPY(dstPtr2, dstStride[plane] / 2, wfunc, \

                                    srcPtr2, srcStride[plane] / 2, rfunc, \

                                    ff_dither_8x8_128, 7, clip9); \

                    } else { \

                        DITHER_COPY(dstPtr2, dstStride[plane] / 2, wfunc, \

                                    srcPtr2, srcStride[plane] / 2, rfunc, \

                                    dither_8x8_64, 6, clip10); \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="257:21" pos:end="281:21"><if pos:start="257:21" pos:end="269:21">if <condition pos:start="257:24" pos:end="257:43">(<expr pos:start="257:25" pos:end="257:42"><call pos:start="257:25" pos:end="257:42"><name pos:start="257:25" pos:end="257:28">isBE</name><argument_list pos:start="257:29" pos:end="257:42">(<argument pos:start="257:30" pos:end="257:41"><expr pos:start="257:30" pos:end="257:41"><name pos:start="257:30" pos:end="257:41"><name pos:start="257:30" pos:end="257:30">c</name><operator pos:start="257:31" pos:end="257:32">-&gt;</operator><name pos:start="257:33" pos:end="257:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="257:45" pos:end="269:21">{<block_content pos:start="259:25" pos:end="267:25">

                        <if_stmt pos:start="259:25" pos:end="267:25"><if pos:start="259:25" pos:end="263:25">if <condition pos:start="259:28" pos:end="259:47">(<expr pos:start="259:29" pos:end="259:46"><call pos:start="259:29" pos:end="259:46"><name pos:start="259:29" pos:end="259:32">isBE</name><argument_list pos:start="259:33" pos:end="259:46">(<argument pos:start="259:34" pos:end="259:45"><expr pos:start="259:34" pos:end="259:45"><name pos:start="259:34" pos:end="259:45"><name pos:start="259:34" pos:end="259:34">c</name><operator pos:start="259:35" pos:end="259:36">-&gt;</operator><name pos:start="259:37" pos:end="259:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="259:49" pos:end="263:25">{<block_content pos:start="261:29" pos:end="261:62">

                            <expr_stmt pos:start="261:29" pos:end="261:62"><expr pos:start="261:29" pos:end="261:61"><call pos:start="261:29" pos:end="261:61"><name pos:start="261:29" pos:end="261:43">COPY16TO9_OR_10</name><argument_list pos:start="261:44" pos:end="261:61">(<argument pos:start="261:45" pos:end="261:51"><expr pos:start="261:45" pos:end="261:51"><name pos:start="261:45" pos:end="261:51">AV_RB16</name></expr></argument>, <argument pos:start="261:54" pos:end="261:60"><expr pos:start="261:54" pos:end="261:60"><name pos:start="261:54" pos:end="261:60">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="263:27" pos:end="267:25">else <block pos:start="263:32" pos:end="267:25">{<block_content pos:start="265:29" pos:end="265:62">

                            <expr_stmt pos:start="265:29" pos:end="265:62"><expr pos:start="265:29" pos:end="265:61"><call pos:start="265:29" pos:end="265:61"><name pos:start="265:29" pos:end="265:43">COPY16TO9_OR_10</name><argument_list pos:start="265:44" pos:end="265:61">(<argument pos:start="265:45" pos:end="265:51"><expr pos:start="265:45" pos:end="265:51"><name pos:start="265:45" pos:end="265:51">AV_RL16</name></expr></argument>, <argument pos:start="265:54" pos:end="265:60"><expr pos:start="265:54" pos:end="265:60"><name pos:start="265:54" pos:end="265:60">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="269:23" pos:end="281:21">else <block pos:start="269:28" pos:end="281:21">{<block_content pos:start="271:25" pos:end="279:25">

                        <if_stmt pos:start="271:25" pos:end="279:25"><if pos:start="271:25" pos:end="275:25">if <condition pos:start="271:28" pos:end="271:47">(<expr pos:start="271:29" pos:end="271:46"><call pos:start="271:29" pos:end="271:46"><name pos:start="271:29" pos:end="271:32">isBE</name><argument_list pos:start="271:33" pos:end="271:46">(<argument pos:start="271:34" pos:end="271:45"><expr pos:start="271:34" pos:end="271:45"><name pos:start="271:34" pos:end="271:45"><name pos:start="271:34" pos:end="271:34">c</name><operator pos:start="271:35" pos:end="271:36">-&gt;</operator><name pos:start="271:37" pos:end="271:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="271:49" pos:end="275:25">{<block_content pos:start="273:29" pos:end="273:62">

                            <expr_stmt pos:start="273:29" pos:end="273:62"><expr pos:start="273:29" pos:end="273:61"><call pos:start="273:29" pos:end="273:61"><name pos:start="273:29" pos:end="273:43">COPY16TO9_OR_10</name><argument_list pos:start="273:44" pos:end="273:61">(<argument pos:start="273:45" pos:end="273:51"><expr pos:start="273:45" pos:end="273:51"><name pos:start="273:45" pos:end="273:51">AV_RB16</name></expr></argument>, <argument pos:start="273:54" pos:end="273:60"><expr pos:start="273:54" pos:end="273:60"><name pos:start="273:54" pos:end="273:60">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="275:27" pos:end="279:25">else <block pos:start="275:32" pos:end="279:25">{<block_content pos:start="277:29" pos:end="277:62">

                            <expr_stmt pos:start="277:29" pos:end="277:62"><expr pos:start="277:29" pos:end="277:61"><call pos:start="277:29" pos:end="277:61"><name pos:start="277:29" pos:end="277:43">COPY16TO9_OR_10</name><argument_list pos:start="277:44" pos:end="277:61">(<argument pos:start="277:45" pos:end="277:51"><expr pos:start="277:45" pos:end="277:51"><name pos:start="277:45" pos:end="277:51">AV_RL16</name></expr></argument>, <argument pos:start="277:54" pos:end="277:60"><expr pos:start="277:54" pos:end="277:60"><name pos:start="277:54" pos:end="277:60">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="283:19" pos:end="313:17">else <comment type="block" pos:start="283:24" pos:end="283:33">/* 8bit */</comment> <block pos:start="283:35" pos:end="313:17">{<block_content pos:start="303:21" pos:end="311:21">

<cpp:define pos:start="285:1" pos:end="301:21">#<cpp:directive pos:start="285:2" pos:end="285:7">define</cpp:directive> <cpp:macro pos:start="285:9" pos:end="285:29"><name pos:start="285:9" pos:end="285:22">COPY8TO9_OR_10</name><parameter_list pos:start="285:23" pos:end="285:29">(<parameter pos:start="285:24" pos:end="285:28"><type pos:start="285:24" pos:end="285:28"><name pos:start="285:24" pos:end="285:28">wfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="287:21" pos:end="301:21">for (i = 0; i &lt; height; i++) { \

                        for (j = 0; j &lt; length; j++) { \

                            const int srcpx = srcPtr[j]; \

                            wfunc(&amp;dstPtr2[j], (srcpx &lt;&lt; (dst_depth - 8)) | (srcpx &gt;&gt; (16 - dst_depth))); \

                        } \

                        dstPtr2 += dstStride[plane] / 2; \

                        srcPtr  += srcStride[plane]; \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="303:21" pos:end="311:21"><if pos:start="303:21" pos:end="307:21">if <condition pos:start="303:24" pos:end="303:43">(<expr pos:start="303:25" pos:end="303:42"><call pos:start="303:25" pos:end="303:42"><name pos:start="303:25" pos:end="303:28">isBE</name><argument_list pos:start="303:29" pos:end="303:42">(<argument pos:start="303:30" pos:end="303:41"><expr pos:start="303:30" pos:end="303:41"><name pos:start="303:30" pos:end="303:41"><name pos:start="303:30" pos:end="303:30">c</name><operator pos:start="303:31" pos:end="303:32">-&gt;</operator><name pos:start="303:33" pos:end="303:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:45" pos:end="307:21">{<block_content pos:start="305:25" pos:end="305:48">

                        <expr_stmt pos:start="305:25" pos:end="305:48"><expr pos:start="305:25" pos:end="305:47"><call pos:start="305:25" pos:end="305:47"><name pos:start="305:25" pos:end="305:38">COPY8TO9_OR_10</name><argument_list pos:start="305:39" pos:end="305:47">(<argument pos:start="305:40" pos:end="305:46"><expr pos:start="305:40" pos:end="305:46"><name pos:start="305:40" pos:end="305:46">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="307:23" pos:end="311:21">else <block pos:start="307:28" pos:end="311:21">{<block_content pos:start="309:25" pos:end="309:48">

                        <expr_stmt pos:start="309:25" pos:end="309:48"><expr pos:start="309:25" pos:end="309:47"><call pos:start="309:25" pos:end="309:47"><name pos:start="309:25" pos:end="309:38">COPY8TO9_OR_10</name><argument_list pos:start="309:39" pos:end="309:47">(<argument pos:start="309:40" pos:end="309:46"><expr pos:start="309:40" pos:end="309:46"><name pos:start="309:40" pos:end="309:46">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="315:15" pos:end="337:13">else if <condition pos:start="315:23" pos:end="315:71">(<expr pos:start="315:24" pos:end="315:70"><call pos:start="315:24" pos:end="315:44"><name pos:start="315:24" pos:end="315:30">is16BPS</name><argument_list pos:start="315:31" pos:end="315:44">(<argument pos:start="315:32" pos:end="315:43"><expr pos:start="315:32" pos:end="315:43"><name pos:start="315:32" pos:end="315:43"><name pos:start="315:32" pos:end="315:32">c</name><operator pos:start="315:33" pos:end="315:34">-&gt;</operator><name pos:start="315:35" pos:end="315:43">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="315:46" pos:end="315:47">&amp;&amp;</operator> <operator pos:start="315:49" pos:end="315:49">!</operator><call pos:start="315:50" pos:end="315:70"><name pos:start="315:50" pos:end="315:56">is16BPS</name><argument_list pos:start="315:57" pos:end="315:70">(<argument pos:start="315:58" pos:end="315:69"><expr pos:start="315:58" pos:end="315:69"><name pos:start="315:58" pos:end="315:69"><name pos:start="315:58" pos:end="315:58">c</name><operator pos:start="315:59" pos:end="315:60">-&gt;</operator><name pos:start="315:61" pos:end="315:69">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="315:73" pos:end="337:13">{<block_content pos:start="317:17" pos:end="335:17">

                <decl_stmt pos:start="317:17" pos:end="326:0"><decl pos:start="317:17" pos:end="317:67"><type pos:start="317:17" pos:end="317:32"><specifier pos:start="317:17" pos:end="317:21">const</specifier> <name pos:start="317:23" pos:end="317:30">uint16_t</name> <modifier pos:start="317:32" pos:end="317:32">*</modifier></type><name pos:start="317:33" pos:end="317:39">srcPtr2</name> <init pos:start="317:41" pos:end="317:67">= <expr pos:start="317:43" pos:end="317:67"><operator pos:start="317:43" pos:end="317:43">(</operator><specifier pos:start="317:44" pos:end="317:48">const</specifier> <name pos:start="317:50" pos:end="317:57">uint16_t</name> <operator pos:start="317:59" pos:end="317:59">*</operator><operator pos:start="317:60" pos:end="317:60">)</operator> <name pos:start="317:62" pos:end="317:67">srcPtr</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="319:1" pos:end="325:66">#<cpp:directive pos:start="319:2" pos:end="319:7">define</cpp:directive> <cpp:macro pos:start="319:9" pos:end="319:24"><name pos:start="319:9" pos:end="319:17">COPY16TO8</name><parameter_list pos:start="319:18" pos:end="319:24">(<parameter pos:start="319:19" pos:end="319:23"><type pos:start="319:19" pos:end="319:23"><name pos:start="319:19" pos:end="319:23">rfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="321:21" pos:end="325:66">DITHER_COPY(dstPtr,  dstStride[plane],   W8, \

                                srcPtr2, srcStride[plane] / 2, rfunc, \

                                dither_8x8_256, 8, av_clip_uint8);</cpp:value></cpp:define>

                <if_stmt pos:start="327:17" pos:end="335:17"><if pos:start="327:17" pos:end="331:17">if <condition pos:start="327:20" pos:end="327:39">(<expr pos:start="327:21" pos:end="327:38"><call pos:start="327:21" pos:end="327:38"><name pos:start="327:21" pos:end="327:24">isBE</name><argument_list pos:start="327:25" pos:end="327:38">(<argument pos:start="327:26" pos:end="327:37"><expr pos:start="327:26" pos:end="327:37"><name pos:start="327:26" pos:end="327:37"><name pos:start="327:26" pos:end="327:26">c</name><operator pos:start="327:27" pos:end="327:28">-&gt;</operator><name pos:start="327:29" pos:end="327:37">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="327:41" pos:end="331:17">{<block_content pos:start="329:21" pos:end="329:39">

                    <expr_stmt pos:start="329:21" pos:end="329:39"><expr pos:start="329:21" pos:end="329:38"><call pos:start="329:21" pos:end="329:38"><name pos:start="329:21" pos:end="329:29">COPY16TO8</name><argument_list pos:start="329:30" pos:end="329:38">(<argument pos:start="329:31" pos:end="329:37"><expr pos:start="329:31" pos:end="329:37"><name pos:start="329:31" pos:end="329:37">AV_RB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="331:19" pos:end="335:17">else <block pos:start="331:24" pos:end="335:17">{<block_content pos:start="333:21" pos:end="333:39">

                    <expr_stmt pos:start="333:21" pos:end="333:39"><expr pos:start="333:21" pos:end="333:38"><call pos:start="333:21" pos:end="333:38"><name pos:start="333:21" pos:end="333:29">COPY16TO8</name><argument_list pos:start="333:30" pos:end="333:38">(<argument pos:start="333:31" pos:end="333:37"><expr pos:start="333:31" pos:end="333:37"><name pos:start="333:31" pos:end="333:37">AV_RL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="337:15" pos:end="355:13">else if <condition pos:start="337:23" pos:end="337:71">(<expr pos:start="337:24" pos:end="337:70"><operator pos:start="337:24" pos:end="337:24">!</operator><call pos:start="337:25" pos:end="337:45"><name pos:start="337:25" pos:end="337:31">is16BPS</name><argument_list pos:start="337:32" pos:end="337:45">(<argument pos:start="337:33" pos:end="337:44"><expr pos:start="337:33" pos:end="337:44"><name pos:start="337:33" pos:end="337:44"><name pos:start="337:33" pos:end="337:33">c</name><operator pos:start="337:34" pos:end="337:35">-&gt;</operator><name pos:start="337:36" pos:end="337:44">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="337:47" pos:end="337:48">&amp;&amp;</operator> <call pos:start="337:50" pos:end="337:70"><name pos:start="337:50" pos:end="337:56">is16BPS</name><argument_list pos:start="337:57" pos:end="337:70">(<argument pos:start="337:58" pos:end="337:69"><expr pos:start="337:58" pos:end="337:69"><name pos:start="337:58" pos:end="337:69"><name pos:start="337:58" pos:end="337:58">c</name><operator pos:start="337:59" pos:end="337:60">-&gt;</operator><name pos:start="337:61" pos:end="337:69">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="337:73" pos:end="355:13">{<block_content pos:start="339:17" pos:end="353:17">

                <for pos:start="339:17" pos:end="353:17">for <control pos:start="339:21" pos:end="339:44">(<init pos:start="339:22" pos:end="339:27"><expr pos:start="339:22" pos:end="339:26"><name pos:start="339:22" pos:end="339:22">i</name> <operator pos:start="339:24" pos:end="339:24">=</operator> <literal type="number" pos:start="339:26" pos:end="339:26">0</literal></expr>;</init> <condition pos:start="339:29" pos:end="339:39"><expr pos:start="339:29" pos:end="339:38"><name pos:start="339:29" pos:end="339:29">i</name> <operator pos:start="339:31" pos:end="339:31">&lt;</operator> <name pos:start="339:33" pos:end="339:38">height</name></expr>;</condition> <incr pos:start="339:41" pos:end="339:43"><expr pos:start="339:41" pos:end="339:43"><name pos:start="339:41" pos:end="339:41">i</name><operator pos:start="339:42" pos:end="339:43">++</operator></expr></incr>)</control> <block pos:start="339:46" pos:end="353:17">{<block_content pos:start="341:21" pos:end="351:47">

                    <for pos:start="341:21" pos:end="347:21">for <control pos:start="341:25" pos:end="341:48">(<init pos:start="341:26" pos:end="341:31"><expr pos:start="341:26" pos:end="341:30"><name pos:start="341:26" pos:end="341:26">j</name> <operator pos:start="341:28" pos:end="341:28">=</operator> <literal type="number" pos:start="341:30" pos:end="341:30">0</literal></expr>;</init> <condition pos:start="341:33" pos:end="341:43"><expr pos:start="341:33" pos:end="341:42"><name pos:start="341:33" pos:end="341:33">j</name> <operator pos:start="341:35" pos:end="341:35">&lt;</operator> <name pos:start="341:37" pos:end="341:42">length</name></expr>;</condition> <incr pos:start="341:45" pos:end="341:47"><expr pos:start="341:45" pos:end="341:47"><name pos:start="341:45" pos:end="341:45">j</name><operator pos:start="341:46" pos:end="341:47">++</operator></expr></incr>)</control> <block pos:start="341:50" pos:end="347:21">{<block_content pos:start="343:25" pos:end="345:57">

                        <expr_stmt pos:start="343:25" pos:end="343:57"><expr pos:start="343:25" pos:end="343:56"><name pos:start="343:25" pos:end="343:44"><name pos:start="343:25" pos:end="343:30">dstPtr</name><index pos:start="343:31" pos:end="343:44">[ <expr pos:start="343:33" pos:end="343:38"><name pos:start="343:33" pos:end="343:33">j</name> <operator pos:start="343:35" pos:end="343:36">&lt;&lt;</operator> <literal type="number" pos:start="343:38" pos:end="343:38">1</literal></expr>     ]</index></name> <operator pos:start="343:46" pos:end="343:46">=</operator> <name pos:start="343:48" pos:end="343:56"><name pos:start="343:48" pos:end="343:53">srcPtr</name><index pos:start="343:54" pos:end="343:56">[<expr pos:start="343:55" pos:end="343:55"><name pos:start="343:55" pos:end="343:55">j</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="345:25" pos:end="345:57"><expr pos:start="345:25" pos:end="345:56"><name pos:start="345:25" pos:end="345:44"><name pos:start="345:25" pos:end="345:30">dstPtr</name><index pos:start="345:31" pos:end="345:44">[<expr pos:start="345:32" pos:end="345:43"><operator pos:start="345:32" pos:end="345:32">(</operator><name pos:start="345:33" pos:end="345:33">j</name> <operator pos:start="345:35" pos:end="345:36">&lt;&lt;</operator> <literal type="number" pos:start="345:38" pos:end="345:38">1</literal><operator pos:start="345:39" pos:end="345:39">)</operator> <operator pos:start="345:41" pos:end="345:41">+</operator> <literal type="number" pos:start="345:43" pos:end="345:43">1</literal></expr>]</index></name> <operator pos:start="345:46" pos:end="345:46">=</operator> <name pos:start="345:48" pos:end="345:56"><name pos:start="345:48" pos:end="345:53">srcPtr</name><index pos:start="345:54" pos:end="345:56">[<expr pos:start="345:55" pos:end="345:55"><name pos:start="345:55" pos:end="345:55">j</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="349:21" pos:end="349:47"><expr pos:start="349:21" pos:end="349:46"><name pos:start="349:21" pos:end="349:26">srcPtr</name> <operator pos:start="349:28" pos:end="349:29">+=</operator> <name pos:start="349:31" pos:end="349:46"><name pos:start="349:31" pos:end="349:39">srcStride</name><index pos:start="349:40" pos:end="349:46">[<expr pos:start="349:41" pos:end="349:45"><name pos:start="349:41" pos:end="349:45">plane</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="351:21" pos:end="351:47"><expr pos:start="351:21" pos:end="351:46"><name pos:start="351:21" pos:end="351:26">dstPtr</name> <operator pos:start="351:28" pos:end="351:29">+=</operator> <name pos:start="351:31" pos:end="351:46"><name pos:start="351:31" pos:end="351:39">dstStride</name><index pos:start="351:40" pos:end="351:46">[<expr pos:start="351:41" pos:end="351:45"><name pos:start="351:41" pos:end="351:45">plane</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="355:15" pos:end="373:13">else if <condition pos:start="355:23" pos:end="357:63">(<expr pos:start="355:24" pos:end="357:62"><call pos:start="355:24" pos:end="355:44"><name pos:start="355:24" pos:end="355:30">is16BPS</name><argument_list pos:start="355:31" pos:end="355:44">(<argument pos:start="355:32" pos:end="355:43"><expr pos:start="355:32" pos:end="355:43"><name pos:start="355:32" pos:end="355:43"><name pos:start="355:32" pos:end="355:32">c</name><operator pos:start="355:33" pos:end="355:34">-&gt;</operator><name pos:start="355:35" pos:end="355:43">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="355:46" pos:end="355:47">&amp;&amp;</operator> <call pos:start="355:49" pos:end="355:69"><name pos:start="355:49" pos:end="355:55">is16BPS</name><argument_list pos:start="355:56" pos:end="355:69">(<argument pos:start="355:57" pos:end="355:68"><expr pos:start="355:57" pos:end="355:68"><name pos:start="355:57" pos:end="355:68"><name pos:start="355:57" pos:end="355:57">c</name><operator pos:start="355:58" pos:end="355:59">-&gt;</operator><name pos:start="355:60" pos:end="355:68">dstFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="355:71" pos:end="355:72">&amp;&amp;</operator>

                      <call pos:start="357:23" pos:end="357:40"><name pos:start="357:23" pos:end="357:26">isBE</name><argument_list pos:start="357:27" pos:end="357:40">(<argument pos:start="357:28" pos:end="357:39"><expr pos:start="357:28" pos:end="357:39"><name pos:start="357:28" pos:end="357:39"><name pos:start="357:28" pos:end="357:28">c</name><operator pos:start="357:29" pos:end="357:30">-&gt;</operator><name pos:start="357:31" pos:end="357:39">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="357:42" pos:end="357:43">!=</operator> <call pos:start="357:45" pos:end="357:62"><name pos:start="357:45" pos:end="357:48">isBE</name><argument_list pos:start="357:49" pos:end="357:62">(<argument pos:start="357:50" pos:end="357:61"><expr pos:start="357:50" pos:end="357:61"><name pos:start="357:50" pos:end="357:61"><name pos:start="357:50" pos:end="357:50">c</name><operator pos:start="357:51" pos:end="357:52">-&gt;</operator><name pos:start="357:53" pos:end="357:61">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="357:65" pos:end="373:13">{<block_content pos:start="361:17" pos:end="371:17">



                <for pos:start="361:17" pos:end="371:17">for <control pos:start="361:21" pos:end="361:44">(<init pos:start="361:22" pos:end="361:27"><expr pos:start="361:22" pos:end="361:26"><name pos:start="361:22" pos:end="361:22">i</name> <operator pos:start="361:24" pos:end="361:24">=</operator> <literal type="number" pos:start="361:26" pos:end="361:26">0</literal></expr>;</init> <condition pos:start="361:29" pos:end="361:39"><expr pos:start="361:29" pos:end="361:38"><name pos:start="361:29" pos:end="361:29">i</name> <operator pos:start="361:31" pos:end="361:31">&lt;</operator> <name pos:start="361:33" pos:end="361:38">height</name></expr>;</condition> <incr pos:start="361:41" pos:end="361:43"><expr pos:start="361:41" pos:end="361:43"><name pos:start="361:41" pos:end="361:41">i</name><operator pos:start="361:42" pos:end="361:43">++</operator></expr></incr>)</control> <block pos:start="361:46" pos:end="371:17">{<block_content pos:start="363:21" pos:end="369:47">

                    <for pos:start="363:21" pos:end="365:94">for <control pos:start="363:25" pos:end="363:48">(<init pos:start="363:26" pos:end="363:31"><expr pos:start="363:26" pos:end="363:30"><name pos:start="363:26" pos:end="363:26">j</name> <operator pos:start="363:28" pos:end="363:28">=</operator> <literal type="number" pos:start="363:30" pos:end="363:30">0</literal></expr>;</init> <condition pos:start="363:33" pos:end="363:43"><expr pos:start="363:33" pos:end="363:42"><name pos:start="363:33" pos:end="363:33">j</name> <operator pos:start="363:35" pos:end="363:35">&lt;</operator> <name pos:start="363:37" pos:end="363:42">length</name></expr>;</condition> <incr pos:start="363:45" pos:end="363:47"><expr pos:start="363:45" pos:end="363:47"><name pos:start="363:45" pos:end="363:45">j</name><operator pos:start="363:46" pos:end="363:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="365:25" pos:end="365:94"><block_content pos:start="365:25" pos:end="365:94">

                        <expr_stmt pos:start="365:25" pos:end="365:94"><expr pos:start="365:25" pos:end="365:93"><operator pos:start="365:25" pos:end="365:25">(</operator><operator pos:start="365:26" pos:end="365:26">(</operator><name pos:start="365:27" pos:end="365:34">uint16_t</name> <operator pos:start="365:36" pos:end="365:36">*</operator><operator pos:start="365:37" pos:end="365:37">)</operator> <name pos:start="365:39" pos:end="365:44">dstPtr</name><operator pos:start="365:45" pos:end="365:45">)</operator><index pos:start="365:46" pos:end="365:48">[<expr pos:start="365:47" pos:end="365:47"><name pos:start="365:47" pos:end="365:47">j</name></expr>]</index> <operator pos:start="365:50" pos:end="365:50">=</operator> <call pos:start="365:52" pos:end="365:93"><name pos:start="365:52" pos:end="365:61">av_bswap16</name><argument_list pos:start="365:62" pos:end="365:93">(<argument pos:start="365:63" pos:end="365:92"><expr pos:start="365:63" pos:end="365:92"><operator pos:start="365:63" pos:end="365:63">(</operator><operator pos:start="365:64" pos:end="365:64">(</operator><specifier pos:start="365:65" pos:end="365:69">const</specifier> <name pos:start="365:71" pos:end="365:78">uint16_t</name> <operator pos:start="365:80" pos:end="365:80">*</operator><operator pos:start="365:81" pos:end="365:81">)</operator> <name pos:start="365:83" pos:end="365:88">srcPtr</name><operator pos:start="365:89" pos:end="365:89">)</operator><index pos:start="365:90" pos:end="365:92">[<expr pos:start="365:91" pos:end="365:91"><name pos:start="365:91" pos:end="365:91">j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <expr_stmt pos:start="367:21" pos:end="367:47"><expr pos:start="367:21" pos:end="367:46"><name pos:start="367:21" pos:end="367:26">srcPtr</name> <operator pos:start="367:28" pos:end="367:29">+=</operator> <name pos:start="367:31" pos:end="367:46"><name pos:start="367:31" pos:end="367:39">srcStride</name><index pos:start="367:40" pos:end="367:46">[<expr pos:start="367:41" pos:end="367:45"><name pos:start="367:41" pos:end="367:45">plane</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:47"><expr pos:start="369:21" pos:end="369:46"><name pos:start="369:21" pos:end="369:26">dstPtr</name> <operator pos:start="369:28" pos:end="369:29">+=</operator> <name pos:start="369:31" pos:end="369:46"><name pos:start="369:31" pos:end="369:39">dstStride</name><index pos:start="369:40" pos:end="369:46">[<expr pos:start="369:41" pos:end="369:45"><name pos:start="369:41" pos:end="369:45">plane</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="373:15" pos:end="381:13">else if <condition pos:start="373:23" pos:end="375:74">(<expr pos:start="373:24" pos:end="375:73"><name pos:start="373:24" pos:end="373:39"><name pos:start="373:24" pos:end="373:32">dstStride</name><index pos:start="373:33" pos:end="373:39">[<expr pos:start="373:34" pos:end="373:38"><name pos:start="373:34" pos:end="373:38">plane</name></expr>]</index></name> <operator pos:start="373:41" pos:end="373:42">==</operator> <name pos:start="373:44" pos:end="373:59"><name pos:start="373:44" pos:end="373:52">srcStride</name><index pos:start="373:53" pos:end="373:59">[<expr pos:start="373:54" pos:end="373:58"><name pos:start="373:54" pos:end="373:58">plane</name></expr>]</index></name> <operator pos:start="373:61" pos:end="373:62">&amp;&amp;</operator>

                       <name pos:start="375:24" pos:end="375:39"><name pos:start="375:24" pos:end="375:32">srcStride</name><index pos:start="375:33" pos:end="375:39">[<expr pos:start="375:34" pos:end="375:38"><name pos:start="375:34" pos:end="375:38">plane</name></expr>]</index></name> <operator pos:start="375:41" pos:end="375:41">&gt;</operator> <literal type="number" pos:start="375:43" pos:end="375:43">0</literal> <operator pos:start="375:45" pos:end="375:46">&amp;&amp;</operator> <name pos:start="375:48" pos:end="375:63"><name pos:start="375:48" pos:end="375:56">srcStride</name><index pos:start="375:57" pos:end="375:63">[<expr pos:start="375:58" pos:end="375:62"><name pos:start="375:58" pos:end="375:62">plane</name></expr>]</index></name> <operator pos:start="375:65" pos:end="375:66">==</operator> <name pos:start="375:68" pos:end="375:73">length</name></expr>)</condition> <block pos:start="375:76" pos:end="381:13">{<block_content pos:start="377:17" pos:end="379:50">

                <expr_stmt pos:start="377:17" pos:end="379:50"><expr pos:start="377:17" pos:end="379:49"><call pos:start="377:17" pos:end="379:49"><name pos:start="377:17" pos:end="377:22">memcpy</name><argument_list pos:start="377:23" pos:end="379:49">(<argument pos:start="377:24" pos:end="377:56"><expr pos:start="377:24" pos:end="377:56"><name pos:start="377:24" pos:end="377:33"><name pos:start="377:24" pos:end="377:26">dst</name><index pos:start="377:27" pos:end="377:33">[<expr pos:start="377:28" pos:end="377:32"><name pos:start="377:28" pos:end="377:32">plane</name></expr>]</index></name> <operator pos:start="377:35" pos:end="377:35">+</operator> <name pos:start="377:37" pos:end="377:52"><name pos:start="377:37" pos:end="377:45">dstStride</name><index pos:start="377:46" pos:end="377:52">[<expr pos:start="377:47" pos:end="377:51"><name pos:start="377:47" pos:end="377:51">plane</name></expr>]</index></name> <operator pos:start="377:54" pos:end="377:54">*</operator> <name pos:start="377:56" pos:end="377:56">y</name></expr></argument>, <argument pos:start="377:59" pos:end="377:68"><expr pos:start="377:59" pos:end="377:68"><name pos:start="377:59" pos:end="377:68"><name pos:start="377:59" pos:end="377:61">src</name><index pos:start="377:62" pos:end="377:68">[<expr pos:start="377:63" pos:end="377:67"><name pos:start="377:63" pos:end="377:67">plane</name></expr>]</index></name></expr></argument>,

                       <argument pos:start="379:24" pos:end="379:48"><expr pos:start="379:24" pos:end="379:48"><name pos:start="379:24" pos:end="379:29">height</name> <operator pos:start="379:31" pos:end="379:31">*</operator> <name pos:start="379:33" pos:end="379:48"><name pos:start="379:33" pos:end="379:41">dstStride</name><index pos:start="379:42" pos:end="379:48">[<expr pos:start="379:43" pos:end="379:47"><name pos:start="379:43" pos:end="379:47">plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="381:15" pos:end="401:13">else <block pos:start="381:20" pos:end="401:13">{<block_content pos:start="383:17" pos:end="399:17">

                <if_stmt pos:start="383:17" pos:end="389:33"><if pos:start="383:17" pos:end="385:32">if <condition pos:start="383:20" pos:end="383:67">(<expr pos:start="383:21" pos:end="383:66"><call pos:start="383:21" pos:end="383:41"><name pos:start="383:21" pos:end="383:27">is16BPS</name><argument_list pos:start="383:28" pos:end="383:41">(<argument pos:start="383:29" pos:end="383:40"><expr pos:start="383:29" pos:end="383:40"><name pos:start="383:29" pos:end="383:40"><name pos:start="383:29" pos:end="383:29">c</name><operator pos:start="383:30" pos:end="383:31">-&gt;</operator><name pos:start="383:32" pos:end="383:40">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="383:43" pos:end="383:44">&amp;&amp;</operator> <call pos:start="383:46" pos:end="383:66"><name pos:start="383:46" pos:end="383:52">is16BPS</name><argument_list pos:start="383:53" pos:end="383:66">(<argument pos:start="383:54" pos:end="383:65"><expr pos:start="383:54" pos:end="383:65"><name pos:start="383:54" pos:end="383:65"><name pos:start="383:54" pos:end="383:54">c</name><operator pos:start="383:55" pos:end="383:56">-&gt;</operator><name pos:start="383:57" pos:end="383:65">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="385:21" pos:end="385:32"><block_content pos:start="385:21" pos:end="385:32">

                    <expr_stmt pos:start="385:21" pos:end="385:32"><expr pos:start="385:21" pos:end="385:31"><name pos:start="385:21" pos:end="385:26">length</name> <operator pos:start="385:28" pos:end="385:29">*=</operator> <literal type="number" pos:start="385:31" pos:end="385:31">2</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="387:17" pos:end="389:33">else if <condition pos:start="387:25" pos:end="387:57">(<expr pos:start="387:26" pos:end="387:56"><operator pos:start="387:26" pos:end="387:26">!</operator><name pos:start="387:27" pos:end="387:43"><name pos:start="387:27" pos:end="387:34">desc_src</name><operator pos:start="387:35" pos:end="387:36">-&gt;</operator><name pos:start="387:37" pos:end="387:40">comp</name><index pos:start="387:41" pos:end="387:43">[<expr pos:start="387:42" pos:end="387:42"><literal type="number" pos:start="387:42" pos:end="387:42">0</literal></expr>]</index></name><operator pos:start="387:44" pos:end="387:44">.</operator><name pos:start="387:45" pos:end="387:56">depth_minus1</name></expr>)</condition><block type="pseudo" pos:start="389:21" pos:end="389:33"><block_content pos:start="389:21" pos:end="389:33">

                    <expr_stmt pos:start="389:21" pos:end="389:33"><expr pos:start="389:21" pos:end="389:32"><name pos:start="389:21" pos:end="389:26">length</name> <operator pos:start="389:28" pos:end="389:30">&gt;&gt;=</operator> <literal type="number" pos:start="389:32" pos:end="389:32">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="389:35" pos:end="389:52">// monowhite/black</comment>

                <for pos:start="391:17" pos:end="399:17">for <control pos:start="391:21" pos:end="391:44">(<init pos:start="391:22" pos:end="391:27"><expr pos:start="391:22" pos:end="391:26"><name pos:start="391:22" pos:end="391:22">i</name> <operator pos:start="391:24" pos:end="391:24">=</operator> <literal type="number" pos:start="391:26" pos:end="391:26">0</literal></expr>;</init> <condition pos:start="391:29" pos:end="391:39"><expr pos:start="391:29" pos:end="391:38"><name pos:start="391:29" pos:end="391:29">i</name> <operator pos:start="391:31" pos:end="391:31">&lt;</operator> <name pos:start="391:33" pos:end="391:38">height</name></expr>;</condition> <incr pos:start="391:41" pos:end="391:43"><expr pos:start="391:41" pos:end="391:43"><name pos:start="391:41" pos:end="391:41">i</name><operator pos:start="391:42" pos:end="391:43">++</operator></expr></incr>)</control> <block pos:start="391:46" pos:end="399:17">{<block_content pos:start="393:21" pos:end="397:47">

                    <expr_stmt pos:start="393:21" pos:end="393:51"><expr pos:start="393:21" pos:end="393:50"><call pos:start="393:21" pos:end="393:50"><name pos:start="393:21" pos:end="393:26">memcpy</name><argument_list pos:start="393:27" pos:end="393:50">(<argument pos:start="393:28" pos:end="393:33"><expr pos:start="393:28" pos:end="393:33"><name pos:start="393:28" pos:end="393:33">dstPtr</name></expr></argument>, <argument pos:start="393:36" pos:end="393:41"><expr pos:start="393:36" pos:end="393:41"><name pos:start="393:36" pos:end="393:41">srcPtr</name></expr></argument>, <argument pos:start="393:44" pos:end="393:49"><expr pos:start="393:44" pos:end="393:49"><name pos:start="393:44" pos:end="393:49">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="395:21" pos:end="395:47"><expr pos:start="395:21" pos:end="395:46"><name pos:start="395:21" pos:end="395:26">srcPtr</name> <operator pos:start="395:28" pos:end="395:29">+=</operator> <name pos:start="395:31" pos:end="395:46"><name pos:start="395:31" pos:end="395:39">srcStride</name><index pos:start="395:40" pos:end="395:46">[<expr pos:start="395:41" pos:end="395:45"><name pos:start="395:41" pos:end="395:45">plane</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="397:21" pos:end="397:47"><expr pos:start="397:21" pos:end="397:46"><name pos:start="397:21" pos:end="397:26">dstPtr</name> <operator pos:start="397:28" pos:end="397:29">+=</operator> <name pos:start="397:31" pos:end="397:46"><name pos:start="397:31" pos:end="397:39">dstStride</name><index pos:start="397:40" pos:end="397:46">[<expr pos:start="397:41" pos:end="397:45"><name pos:start="397:41" pos:end="397:45">plane</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <return pos:start="407:5" pos:end="407:21">return <expr pos:start="407:12" pos:end="407:20"><name pos:start="407:12" pos:end="407:20">srcSliceH</name></expr>;</return>

</block_content>}</block></function>
</unit>
