<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1855.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:36">pci_assign_dev_load_option_rom</name><parameter_list pos:start="1:37" pos:end="7:59">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:46">PCIDevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">dev</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:73"><decl pos:start="1:54" pos:end="1:73"><type pos:start="1:54" pos:end="1:73"><name pos:start="1:54" pos:end="1:66"><name pos:start="1:54" pos:end="1:59">struct</name> <name pos:start="1:61" pos:end="1:66">Object</name></name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:73">owner</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:46"><decl pos:start="3:38" pos:end="3:46"><type pos:start="3:38" pos:end="3:46"><name pos:start="3:38" pos:end="3:40">int</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">size</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:67"><decl pos:start="3:49" pos:end="3:67"><type pos:start="3:49" pos:end="3:67"><name pos:start="3:49" pos:end="3:56">unsigned</name> <name pos:start="3:58" pos:end="3:60">int</name></type> <name pos:start="3:62" pos:end="3:67">domain</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:53"><decl pos:start="5:38" pos:end="5:53"><type pos:start="5:38" pos:end="5:53"><name pos:start="5:38" pos:end="5:45">unsigned</name> <name pos:start="5:47" pos:end="5:49">int</name></type> <name pos:start="5:51" pos:end="5:53">bus</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:72"><decl pos:start="5:56" pos:end="5:72"><type pos:start="5:56" pos:end="5:72"><name pos:start="5:56" pos:end="5:63">unsigned</name> <name pos:start="5:65" pos:end="5:67">int</name></type> <name pos:start="5:69" pos:end="5:72">slot</name></decl></parameter>,

                                     <parameter pos:start="7:38" pos:end="7:58"><decl pos:start="7:38" pos:end="7:58"><type pos:start="7:38" pos:end="7:58"><name pos:start="7:38" pos:end="7:45">unsigned</name> <name pos:start="7:47" pos:end="7:49">int</name></type> <name pos:start="7:51" pos:end="7:58">function</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="133:1">{<block_content pos:start="11:5" pos:end="131:15">

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:17"><name pos:start="11:10" pos:end="11:13">name</name><index pos:start="11:14" pos:end="11:17">[<expr pos:start="11:15" pos:end="11:16"><literal type="number" pos:start="11:15" pos:end="11:16">32</literal></expr>]</index></name></decl>, <decl pos:start="11:20" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:20" pos:end="11:31"><name pos:start="11:20" pos:end="11:27">rom_file</name><index pos:start="11:28" pos:end="11:31">[<expr pos:start="11:29" pos:end="11:30"><literal type="number" pos:start="11:29" pos:end="11:30">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">FILE</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:12">fp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:15">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:15">stat</name></name></type> <name pos:start="17:17" pos:end="17:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:13">ptr</name> <init pos:start="19:15" pos:end="19:20">= <expr pos:start="19:17" pos:end="19:20"><name pos:start="19:17" pos:end="19:20">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:50">/* If loading ROM from file, pci handles it */</comment>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:38">(<expr pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:11">dev</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:20">romfile</name></name> <operator pos:start="25:22" pos:end="25:23">||</operator> <operator pos:start="25:25" pos:end="25:25">!</operator><name pos:start="25:26" pos:end="25:37"><name pos:start="25:26" pos:end="25:28">dev</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:37">rom_bar</name></name></expr>)</condition> <block pos:start="25:40" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:20">

        <return pos:start="27:9" pos:end="27:20">return <expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="37:42"><expr pos:start="33:5" pos:end="37:41"><call pos:start="33:5" pos:end="37:41"><name pos:start="33:5" pos:end="33:12">snprintf</name><argument_list pos:start="33:13" pos:end="37:41">(<argument pos:start="33:14" pos:end="33:21"><expr pos:start="33:14" pos:end="33:21"><name pos:start="33:14" pos:end="33:21">rom_file</name></expr></argument>, <argument pos:start="33:24" pos:end="33:39"><expr pos:start="33:24" pos:end="33:39"><sizeof pos:start="33:24" pos:end="33:39">sizeof<argument_list pos:start="33:30" pos:end="33:39">(<argument pos:start="33:31" pos:end="33:38"><expr pos:start="33:31" pos:end="33:38"><name pos:start="33:31" pos:end="33:38">rom_file</name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="35:14" pos:end="35:59"><expr pos:start="35:14" pos:end="35:59"><literal type="string" pos:start="35:14" pos:end="35:59">"/sys/bus/pci/devices/%04x:%02x:%02x.%01x/rom"</literal></expr></argument>,

             <argument pos:start="37:14" pos:end="37:19"><expr pos:start="37:14" pos:end="37:19"><name pos:start="37:14" pos:end="37:19">domain</name></expr></argument>, <argument pos:start="37:22" pos:end="37:24"><expr pos:start="37:22" pos:end="37:24"><name pos:start="37:22" pos:end="37:24">bus</name></expr></argument>, <argument pos:start="37:27" pos:end="37:30"><expr pos:start="37:27" pos:end="37:30"><name pos:start="37:27" pos:end="37:30">slot</name></expr></argument>, <argument pos:start="37:33" pos:end="37:40"><expr pos:start="37:33" pos:end="37:40"><name pos:start="37:33" pos:end="37:40">function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="51:5"><if pos:start="41:5" pos:end="51:5">if <condition pos:start="41:8" pos:end="41:28">(<expr pos:start="41:9" pos:end="41:27"><call pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:12">stat</name><argument_list pos:start="41:13" pos:end="41:27">(<argument pos:start="41:14" pos:end="41:21"><expr pos:start="41:14" pos:end="41:21"><name pos:start="41:14" pos:end="41:21">rom_file</name></expr></argument>, <argument pos:start="41:24" pos:end="41:26"><expr pos:start="41:24" pos:end="41:26"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:26">st</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:30" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:20">

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:28">(<expr pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:17">errno</name> <operator pos:start="43:19" pos:end="43:20">!=</operator> <name pos:start="43:22" pos:end="43:27">ENOENT</name></expr>)</condition> <block pos:start="43:30" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:53">

            <expr_stmt pos:start="45:13" pos:end="45:53"><expr pos:start="45:13" pos:end="45:52"><call pos:start="45:13" pos:end="45:52"><name pos:start="45:13" pos:end="45:24">error_report</name><argument_list pos:start="45:25" pos:end="45:52">(<argument pos:start="45:26" pos:end="45:51"><expr pos:start="45:26" pos:end="45:51"><literal type="string" pos:start="45:26" pos:end="45:51">"pci-assign: Invalid ROM."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="49:9" pos:end="49:20">return <expr pos:start="49:16" pos:end="49:19"><name pos:start="49:16" pos:end="49:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:48">/* Write "1" to the ROM file to enable it */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:6">fp</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <call pos:start="57:10" pos:end="57:30"><name pos:start="57:10" pos:end="57:14">fopen</name><argument_list pos:start="57:15" pos:end="57:30">(<argument pos:start="57:16" pos:end="57:23"><expr pos:start="57:16" pos:end="57:23"><name pos:start="57:16" pos:end="57:23">rom_file</name></expr></argument>, <argument pos:start="57:26" pos:end="57:29"><expr pos:start="57:26" pos:end="57:29"><literal type="string" pos:start="57:26" pos:end="57:29">"r+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:19">(<expr pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:10">fp</name> <operator pos:start="59:12" pos:end="59:13">==</operator> <name pos:start="59:15" pos:end="59:18">NULL</name></expr>)</condition> <block pos:start="59:21" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:20">

        <expr_stmt pos:start="61:9" pos:end="61:82"><expr pos:start="61:9" pos:end="61:81"><call pos:start="61:9" pos:end="61:81"><name pos:start="61:9" pos:end="61:20">error_report</name><argument_list pos:start="61:21" pos:end="61:81">(<argument pos:start="61:22" pos:end="61:53"><expr pos:start="61:22" pos:end="61:53"><literal type="string" pos:start="61:22" pos:end="61:53">"pci-assign: Cannot open %s: %s"</literal></expr></argument>, <argument pos:start="61:56" pos:end="61:63"><expr pos:start="61:56" pos:end="61:63"><name pos:start="61:56" pos:end="61:63">rom_file</name></expr></argument>, <argument pos:start="61:66" pos:end="61:80"><expr pos:start="61:66" pos:end="61:80"><call pos:start="61:66" pos:end="61:80"><name pos:start="61:66" pos:end="61:73">strerror</name><argument_list pos:start="61:74" pos:end="61:80">(<argument pos:start="61:75" pos:end="61:79"><expr pos:start="61:75" pos:end="61:79"><name pos:start="61:75" pos:end="61:79">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:20">return <expr pos:start="63:16" pos:end="63:19"><name pos:start="63:16" pos:end="63:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:12"><expr pos:start="67:5" pos:end="67:11"><name pos:start="67:5" pos:end="67:7">val</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <literal type="number" pos:start="67:11" pos:end="67:11">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:36">(<expr pos:start="69:9" pos:end="69:35"><call pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:14">fwrite</name><argument_list pos:start="69:15" pos:end="69:30">(<argument pos:start="69:16" pos:end="69:19"><expr pos:start="69:16" pos:end="69:19"><operator pos:start="69:16" pos:end="69:16">&amp;</operator><name pos:start="69:17" pos:end="69:19">val</name></expr></argument>, <argument pos:start="69:22" pos:end="69:22"><expr pos:start="69:22" pos:end="69:22"><literal type="number" pos:start="69:22" pos:end="69:22">1</literal></expr></argument>, <argument pos:start="69:25" pos:end="69:25"><expr pos:start="69:25" pos:end="69:25"><literal type="number" pos:start="69:25" pos:end="69:25">1</literal></expr></argument>, <argument pos:start="69:28" pos:end="69:29"><expr pos:start="69:28" pos:end="69:29"><name pos:start="69:28" pos:end="69:29">fp</name></expr></argument>)</argument_list></call> <operator pos:start="69:32" pos:end="69:33">!=</operator> <literal type="number" pos:start="69:35" pos:end="69:35">1</literal></expr>)</condition> <block pos:start="69:38" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:23">

        <goto pos:start="71:9" pos:end="71:23">goto <name pos:start="71:14" pos:end="71:22">close_rom</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:27"><expr pos:start="75:5" pos:end="75:26"><call pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:9">fseek</name><argument_list pos:start="75:10" pos:end="75:26">(<argument pos:start="75:11" pos:end="75:12"><expr pos:start="75:11" pos:end="75:12"><name pos:start="75:11" pos:end="75:12">fp</name></expr></argument>, <argument pos:start="75:15" pos:end="75:15"><expr pos:start="75:15" pos:end="75:15"><literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr></argument>, <argument pos:start="75:18" pos:end="75:25"><expr pos:start="75:18" pos:end="75:25"><name pos:start="75:18" pos:end="75:25">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:71"><expr pos:start="79:5" pos:end="79:70"><call pos:start="79:5" pos:end="79:70"><name pos:start="79:5" pos:end="79:12">snprintf</name><argument_list pos:start="79:13" pos:end="79:70">(<argument pos:start="79:14" pos:end="79:17"><expr pos:start="79:14" pos:end="79:17"><name pos:start="79:14" pos:end="79:17">name</name></expr></argument>, <argument pos:start="79:20" pos:end="79:31"><expr pos:start="79:20" pos:end="79:31"><sizeof pos:start="79:20" pos:end="79:31">sizeof<argument_list pos:start="79:26" pos:end="79:31">(<argument pos:start="79:27" pos:end="79:30"><expr pos:start="79:27" pos:end="79:30"><name pos:start="79:27" pos:end="79:30">name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:34" pos:end="79:41"><expr pos:start="79:34" pos:end="79:41"><literal type="string" pos:start="79:34" pos:end="79:41">"%s.rom"</literal></expr></argument>, <argument pos:start="79:44" pos:end="79:69"><expr pos:start="79:44" pos:end="79:69"><call pos:start="79:44" pos:end="79:69"><name pos:start="79:44" pos:end="79:62">object_get_typename</name><argument_list pos:start="79:63" pos:end="79:69">(<argument pos:start="79:64" pos:end="79:68"><expr pos:start="79:64" pos:end="79:68"><name pos:start="79:64" pos:end="79:68">owner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:77"><expr pos:start="81:5" pos:end="81:76"><call pos:start="81:5" pos:end="81:76"><name pos:start="81:5" pos:end="81:26">memory_region_init_ram</name><argument_list pos:start="81:27" pos:end="81:76">(<argument pos:start="81:28" pos:end="81:36"><expr pos:start="81:28" pos:end="81:36"><operator pos:start="81:28" pos:end="81:28">&amp;</operator><name pos:start="81:29" pos:end="81:36"><name pos:start="81:29" pos:end="81:31">dev</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:36">rom</name></name></expr></argument>, <argument pos:start="81:39" pos:end="81:43"><expr pos:start="81:39" pos:end="81:43"><name pos:start="81:39" pos:end="81:43">owner</name></expr></argument>, <argument pos:start="81:46" pos:end="81:49"><expr pos:start="81:46" pos:end="81:49"><name pos:start="81:46" pos:end="81:49">name</name></expr></argument>, <argument pos:start="81:52" pos:end="81:61"><expr pos:start="81:52" pos:end="81:61"><name pos:start="81:52" pos:end="81:61"><name pos:start="81:52" pos:end="81:53">st</name><operator pos:start="81:54" pos:end="81:54">.</operator><name pos:start="81:55" pos:end="81:61">st_size</name></name></expr></argument>, <argument pos:start="81:64" pos:end="81:75"><expr pos:start="81:64" pos:end="81:75"><operator pos:start="81:64" pos:end="81:64">&amp;</operator><name pos:start="81:65" pos:end="81:75">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:48"><expr pos:start="83:5" pos:end="83:47"><call pos:start="83:5" pos:end="83:47"><name pos:start="83:5" pos:end="83:24">vmstate_register_ram</name><argument_list pos:start="83:25" pos:end="83:47">(<argument pos:start="83:26" pos:end="83:34"><expr pos:start="83:26" pos:end="83:34"><operator pos:start="83:26" pos:end="83:26">&amp;</operator><name pos:start="83:27" pos:end="83:34"><name pos:start="83:27" pos:end="83:29">dev</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:34">rom</name></name></expr></argument>, <argument pos:start="83:37" pos:end="83:46"><expr pos:start="83:37" pos:end="83:46"><operator pos:start="83:37" pos:end="83:37">&amp;</operator><name pos:start="83:38" pos:end="83:46"><name pos:start="83:38" pos:end="83:40">dev</name><operator pos:start="83:41" pos:end="83:42">-&gt;</operator><name pos:start="83:43" pos:end="83:46">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:47"><expr pos:start="85:5" pos:end="85:46"><name pos:start="85:5" pos:end="85:7">ptr</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:46"><name pos:start="85:11" pos:end="85:35">memory_region_get_ram_ptr</name><argument_list pos:start="85:36" pos:end="85:46">(<argument pos:start="85:37" pos:end="85:45"><expr pos:start="85:37" pos:end="85:45"><operator pos:start="85:37" pos:end="85:37">&amp;</operator><name pos:start="85:38" pos:end="85:45"><name pos:start="85:38" pos:end="85:40">dev</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:45">rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:34"><expr pos:start="87:5" pos:end="87:33"><call pos:start="87:5" pos:end="87:33"><name pos:start="87:5" pos:end="87:10">memset</name><argument_list pos:start="87:11" pos:end="87:33">(<argument pos:start="87:12" pos:end="87:14"><expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">ptr</name></expr></argument>, <argument pos:start="87:17" pos:end="87:20"><expr pos:start="87:17" pos:end="87:20"><literal type="number" pos:start="87:17" pos:end="87:20">0xff</literal></expr></argument>, <argument pos:start="87:23" pos:end="87:32"><expr pos:start="87:23" pos:end="87:32"><name pos:start="87:23" pos:end="87:32"><name pos:start="87:23" pos:end="87:24">st</name><operator pos:start="87:25" pos:end="87:25">.</operator><name pos:start="87:26" pos:end="87:32">st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="103:5">if <condition pos:start="91:8" pos:end="91:39">(<expr pos:start="91:9" pos:end="91:38"><operator pos:start="91:9" pos:end="91:9">!</operator><call pos:start="91:10" pos:end="91:38"><name pos:start="91:10" pos:end="91:14">fread</name><argument_list pos:start="91:15" pos:end="91:38">(<argument pos:start="91:16" pos:end="91:18"><expr pos:start="91:16" pos:end="91:18"><name pos:start="91:16" pos:end="91:18">ptr</name></expr></argument>, <argument pos:start="91:21" pos:end="91:21"><expr pos:start="91:21" pos:end="91:21"><literal type="number" pos:start="91:21" pos:end="91:21">1</literal></expr></argument>, <argument pos:start="91:24" pos:end="91:33"><expr pos:start="91:24" pos:end="91:33"><name pos:start="91:24" pos:end="91:33"><name pos:start="91:24" pos:end="91:25">st</name><operator pos:start="91:26" pos:end="91:26">.</operator><name pos:start="91:27" pos:end="91:33">st_size</name></name></expr></argument>, <argument pos:start="91:36" pos:end="91:37"><expr pos:start="91:36" pos:end="91:37"><name pos:start="91:36" pos:end="91:37">fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:41" pos:end="103:5">{<block_content pos:start="93:9" pos:end="101:23">

        <expr_stmt pos:start="93:9" pos:end="93:71"><expr pos:start="93:9" pos:end="93:70"><call pos:start="93:9" pos:end="93:70"><name pos:start="93:9" pos:end="93:20">error_report</name><argument_list pos:start="93:21" pos:end="93:70">(<argument pos:start="93:22" pos:end="93:59"><expr pos:start="93:22" pos:end="93:59"><literal type="string" pos:start="93:22" pos:end="93:59">"pci-assign: Cannot read from host %s"</literal></expr></argument>, <argument pos:start="93:62" pos:end="93:69"><expr pos:start="93:62" pos:end="93:69"><name pos:start="93:62" pos:end="93:69">rom_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="99:58"><expr pos:start="95:9" pos:end="99:57"><call pos:start="95:9" pos:end="99:57"><name pos:start="95:9" pos:end="95:20">error_printf</name><argument_list pos:start="95:21" pos:end="99:57">(<argument pos:start="95:22" pos:end="99:56"><expr pos:start="95:22" pos:end="99:56"><literal type="string" pos:start="95:22" pos:end="95:71">"Device option ROM contents are probably invalid "</literal>

                     <literal type="string" pos:start="97:22" pos:end="97:76">"(check dmesg).\nSkip option ROM probe with rombar=0, "</literal>

                     <literal type="string" pos:start="99:22" pos:end="99:56">"or load from file with romfile=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:23">goto <name pos:start="101:14" pos:end="101:22">close_rom</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:54"><expr pos:start="107:5" pos:end="107:53"><call pos:start="107:5" pos:end="107:53"><name pos:start="107:5" pos:end="107:20">pci_register_bar</name><argument_list pos:start="107:21" pos:end="107:53">(<argument pos:start="107:22" pos:end="107:24"><expr pos:start="107:22" pos:end="107:24"><name pos:start="107:22" pos:end="107:24">dev</name></expr></argument>, <argument pos:start="107:27" pos:end="107:38"><expr pos:start="107:27" pos:end="107:38"><name pos:start="107:27" pos:end="107:38">PCI_ROM_SLOT</name></expr></argument>, <argument pos:start="107:41" pos:end="107:41"><expr pos:start="107:41" pos:end="107:41"><literal type="number" pos:start="107:41" pos:end="107:41">0</literal></expr></argument>, <argument pos:start="107:44" pos:end="107:52"><expr pos:start="107:44" pos:end="107:52"><operator pos:start="107:44" pos:end="107:44">&amp;</operator><name pos:start="107:45" pos:end="107:52"><name pos:start="107:45" pos:end="107:47">dev</name><operator pos:start="107:48" pos:end="107:49">-&gt;</operator><name pos:start="107:50" pos:end="107:52">rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:24"><expr pos:start="109:5" pos:end="109:23"><name pos:start="109:5" pos:end="109:16"><name pos:start="109:5" pos:end="109:7">dev</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:16">has_rom</name></name> <operator pos:start="109:18" pos:end="109:18">=</operator> <name pos:start="109:20" pos:end="109:23">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:23"><expr pos:start="111:5" pos:end="111:22"><operator pos:start="111:5" pos:end="111:5">*</operator><name pos:start="111:6" pos:end="111:9">size</name> <operator pos:start="111:11" pos:end="111:11">=</operator> <name pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:14">st</name><operator pos:start="111:15" pos:end="111:15">.</operator><name pos:start="111:16" pos:end="111:22">st_size</name></name></expr>;</expr_stmt>

<label pos:start="113:1" pos:end="113:10"><name pos:start="113:1" pos:end="113:9">close_rom</name>:</label>

    <comment type="block" pos:start="115:5" pos:end="115:34">/* Write "0" to disable ROM */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:27"><expr pos:start="117:5" pos:end="117:26"><call pos:start="117:5" pos:end="117:26"><name pos:start="117:5" pos:end="117:9">fseek</name><argument_list pos:start="117:10" pos:end="117:26">(<argument pos:start="117:11" pos:end="117:12"><expr pos:start="117:11" pos:end="117:12"><name pos:start="117:11" pos:end="117:12">fp</name></expr></argument>, <argument pos:start="117:15" pos:end="117:15"><expr pos:start="117:15" pos:end="117:15"><literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr></argument>, <argument pos:start="117:18" pos:end="117:25"><expr pos:start="117:18" pos:end="117:25"><name pos:start="117:18" pos:end="117:25">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:12"><expr pos:start="119:5" pos:end="119:11"><name pos:start="119:5" pos:end="119:7">val</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <literal type="number" pos:start="119:11" pos:end="119:11">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:32">(<expr pos:start="121:9" pos:end="121:31"><operator pos:start="121:9" pos:end="121:9">!</operator><call pos:start="121:10" pos:end="121:31"><name pos:start="121:10" pos:end="121:15">fwrite</name><argument_list pos:start="121:16" pos:end="121:31">(<argument pos:start="121:17" pos:end="121:20"><expr pos:start="121:17" pos:end="121:20"><operator pos:start="121:17" pos:end="121:17">&amp;</operator><name pos:start="121:18" pos:end="121:20">val</name></expr></argument>, <argument pos:start="121:23" pos:end="121:23"><expr pos:start="121:23" pos:end="121:23"><literal type="number" pos:start="121:23" pos:end="121:23">1</literal></expr></argument>, <argument pos:start="121:26" pos:end="121:26"><expr pos:start="121:26" pos:end="121:26"><literal type="number" pos:start="121:26" pos:end="121:26">1</literal></expr></argument>, <argument pos:start="121:29" pos:end="121:30"><expr pos:start="121:29" pos:end="121:30"><name pos:start="121:29" pos:end="121:30">fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:34" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:62">

        <expr_stmt pos:start="123:9" pos:end="123:62"><expr pos:start="123:9" pos:end="123:61"><call pos:start="123:9" pos:end="123:61"><name pos:start="123:9" pos:end="123:13">DEBUG</name><argument_list pos:start="123:14" pos:end="123:61">(<argument pos:start="123:15" pos:end="123:20"><expr pos:start="123:15" pos:end="123:20"><literal type="string" pos:start="123:15" pos:end="123:20">"%s\n"</literal></expr></argument>, <argument pos:start="123:23" pos:end="123:60"><expr pos:start="123:23" pos:end="123:60"><literal type="string" pos:start="123:23" pos:end="123:60">"Failed to disable pci-sysfs rom file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:15"><expr pos:start="127:5" pos:end="127:14"><call pos:start="127:5" pos:end="127:14"><name pos:start="127:5" pos:end="127:10">fclose</name><argument_list pos:start="127:11" pos:end="127:14">(<argument pos:start="127:12" pos:end="127:13"><expr pos:start="127:12" pos:end="127:13"><name pos:start="127:12" pos:end="127:13">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="131:5" pos:end="131:15">return <expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">ptr</name></expr>;</return>

</block_content>}</block></function>
</unit>
