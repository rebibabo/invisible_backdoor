<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18983.c" pos:tabs="8"><function pos:start="1:1" pos:end="629:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:29">avformat_find_stream_info</name><parameter_list pos:start="1:30" pos:end="1:74">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">ic</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:73"><decl pos:start="1:52" pos:end="1:73"><type pos:start="1:52" pos:end="1:73"><name pos:start="1:52" pos:end="1:63">AVDictionary</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier><modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">options</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="629:1">{<block_content pos:start="5:5" pos:end="627:15">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:16">count</name></decl>, <decl pos:start="5:19" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:21">ret</name></decl>, <decl pos:start="5:24" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:32">read_size</name></decl>, <decl pos:start="5:35" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:35" pos:end="5:35">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">AVPacket</name></type> <name pos:start="9:14" pos:end="9:17">pkt1</name></decl>, <decl pos:start="9:20" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:12"><modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:22">old_offset</name> <init pos:start="11:24" pos:end="11:42">= <expr pos:start="11:26" pos:end="11:42"><call pos:start="11:26" pos:end="11:42"><name pos:start="11:26" pos:end="11:34">avio_tell</name><argument_list pos:start="11:35" pos:end="11:42">(<argument pos:start="11:36" pos:end="11:41"><expr pos:start="11:36" pos:end="11:41"><name pos:start="11:36" pos:end="11:41"><name pos:start="11:36" pos:end="11:37">ic</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:41">pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:23">orig_nb_streams</name> <init pos:start="13:25" pos:end="13:40">= <expr pos:start="13:27" pos:end="13:40"><name pos:start="13:27" pos:end="13:40"><name pos:start="13:27" pos:end="13:28">ic</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:40">nb_streams</name></name></expr></init></decl>;</decl_stmt>        <comment type="line" pos:start="13:50" pos:end="13:98">// new streams might appear, no options for those</comment>



    <for pos:start="17:5" pos:end="97:5">for<control pos:start="17:8" pos:end="17:33">(<init pos:start="17:9" pos:end="17:12"><expr pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:9">i</name><operator pos:start="17:10" pos:end="17:10">=</operator><literal type="number" pos:start="17:11" pos:end="17:11">0</literal></expr>;</init><condition pos:start="17:13" pos:end="17:29"><expr pos:start="17:13" pos:end="17:28"><name pos:start="17:13" pos:end="17:13">i</name><operator pos:start="17:14" pos:end="17:14">&lt;</operator><name pos:start="17:15" pos:end="17:28"><name pos:start="17:15" pos:end="17:16">ic</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:28">nb_streams</name></name></expr>;</condition><incr pos:start="17:30" pos:end="17:32"><expr pos:start="17:30" pos:end="17:32"><name pos:start="17:30" pos:end="17:30">i</name><operator pos:start="17:31" pos:end="17:32">++</operator></expr></incr>)</control> <block pos:start="17:35" pos:end="97:5">{<block_content pos:start="19:9" pos:end="95:38">

        <decl_stmt pos:start="19:9" pos:end="19:23"><decl pos:start="19:9" pos:end="19:22"><type pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:15">AVCodec</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:22">codec</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:40"><decl pos:start="21:9" pos:end="21:39"><type pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:20">AVDictionary</name> <modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:32">thread_opt</name> <init pos:start="21:34" pos:end="21:39">= <expr pos:start="21:36" pos:end="21:39"><name pos:start="21:36" pos:end="21:39">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:10">st</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:27"><name pos:start="23:14" pos:end="23:15">ic</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:24">streams</name><index pos:start="23:25" pos:end="23:27">[<expr pos:start="23:26" pos:end="23:26"><name pos:start="23:26" pos:end="23:26">i</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="27:9" pos:end="39:9"><if pos:start="27:9" pos:end="39:9">if <condition pos:start="27:12" pos:end="29:59">(<expr pos:start="27:13" pos:end="29:58"><name pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:14">st</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:21">codec</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:33">codec_type</name></name> <operator pos:start="27:35" pos:end="27:36">==</operator> <name pos:start="27:38" pos:end="27:55">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="27:57" pos:end="27:58">||</operator>

            <name pos:start="29:13" pos:end="29:33"><name pos:start="29:13" pos:end="29:14">st</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:21">codec</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:33">codec_type</name></name> <operator pos:start="29:35" pos:end="29:36">==</operator> <name pos:start="29:38" pos:end="29:58">AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block pos:start="29:61" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:52">

<comment type="block" pos:start="31:1" pos:end="33:33">/*            if(!st-&gt;time_base.num)

                st-&gt;time_base= */</comment>

            <if_stmt pos:start="35:13" pos:end="37:52"><if pos:start="35:13" pos:end="37:52">if<condition pos:start="35:15" pos:end="35:41">(<expr pos:start="35:16" pos:end="35:40"><operator pos:start="35:16" pos:end="35:16">!</operator><name pos:start="35:17" pos:end="35:40"><name pos:start="35:17" pos:end="35:18">st</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:25">codec</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:36">time_base</name><operator pos:start="35:37" pos:end="35:37">.</operator><name pos:start="35:38" pos:end="35:40">num</name></name></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:52"><block_content pos:start="37:17" pos:end="37:52">

                <expr_stmt pos:start="37:17" pos:end="37:52"><expr pos:start="37:17" pos:end="37:51"><name pos:start="37:17" pos:end="37:36"><name pos:start="37:17" pos:end="37:18">st</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:25">codec</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:36">time_base</name></name><operator pos:start="37:37" pos:end="37:37">=</operator> <name pos:start="37:39" pos:end="37:51"><name pos:start="37:39" pos:end="37:40">st</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:51">time_base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="41:9" pos:end="41:34">//only for the split stuff</comment>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:61">(<expr pos:start="43:13" pos:end="43:60"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:23"><name pos:start="43:14" pos:end="43:15">st</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:23">parser</name></name> <operator pos:start="43:25" pos:end="43:26">&amp;&amp;</operator> <operator pos:start="43:28" pos:end="43:28">!</operator><operator pos:start="43:29" pos:end="43:29">(</operator><name pos:start="43:30" pos:end="43:38"><name pos:start="43:30" pos:end="43:31">ic</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:38">flags</name></name> <operator pos:start="43:40" pos:end="43:40">&amp;</operator> <name pos:start="43:42" pos:end="43:59">AVFMT_FLAG_NOPARSE</name><operator pos:start="43:60" pos:end="43:60">)</operator></expr>)</condition> <block pos:start="43:63" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:13">

            <expr_stmt pos:start="45:13" pos:end="45:61"><expr pos:start="45:13" pos:end="45:60"><name pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:14">st</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:22">parser</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <call pos:start="45:26" pos:end="45:60"><name pos:start="45:26" pos:end="45:39">av_parser_init</name><argument_list pos:start="45:40" pos:end="45:60">(<argument pos:start="45:41" pos:end="45:59"><expr pos:start="45:41" pos:end="45:59"><name pos:start="45:41" pos:end="45:59"><name pos:start="45:41" pos:end="45:42">st</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:49">codec</name><operator pos:start="45:50" pos:end="45:51">-&gt;</operator><name pos:start="45:52" pos:end="45:59">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if<condition pos:start="47:15" pos:end="47:72">(<expr pos:start="47:16" pos:end="47:71"><name pos:start="47:16" pos:end="47:31"><name pos:start="47:16" pos:end="47:17">st</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:31">need_parsing</name></name> <operator pos:start="47:33" pos:end="47:34">==</operator> <name pos:start="47:36" pos:end="47:57">AVSTREAM_PARSE_HEADERS</name> <operator pos:start="47:59" pos:end="47:60">&amp;&amp;</operator> <name pos:start="47:62" pos:end="47:71"><name pos:start="47:62" pos:end="47:63">st</name><operator pos:start="47:64" pos:end="47:65">-&gt;</operator><name pos:start="47:66" pos:end="47:71">parser</name></name></expr>)</condition><block pos:start="47:73" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:65">

                <expr_stmt pos:start="49:17" pos:end="49:65"><expr pos:start="49:17" pos:end="49:64"><name pos:start="49:17" pos:end="49:33"><name pos:start="49:17" pos:end="49:18">st</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:26">parser</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:33">flags</name></name> <operator pos:start="49:35" pos:end="49:36">|=</operator> <name pos:start="49:38" pos:end="49:64">PARSER_FLAG_COMPLETE_FRAMES</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><call pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:14">assert</name><argument_list pos:start="55:15" pos:end="55:33">(<argument pos:start="55:16" pos:end="55:32"><expr pos:start="55:16" pos:end="55:32"><operator pos:start="55:16" pos:end="55:16">!</operator><name pos:start="55:17" pos:end="55:32"><name pos:start="55:17" pos:end="55:18">st</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:25">codec</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:32">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:58"><expr pos:start="57:9" pos:end="57:57"><name pos:start="57:9" pos:end="57:13">codec</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:57"><name pos:start="57:17" pos:end="57:36">avcodec_find_decoder</name><argument_list pos:start="57:37" pos:end="57:57">(<argument pos:start="57:38" pos:end="57:56"><expr pos:start="57:38" pos:end="57:56"><name pos:start="57:38" pos:end="57:56"><name pos:start="57:38" pos:end="57:39">st</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:46">codec</name><operator pos:start="57:47" pos:end="57:48">-&gt;</operator><name pos:start="57:49" pos:end="57:56">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="61:9" pos:end="63:66">/* force thread count to 1 since the h264 decoder will not extract SPS

         *  and PPS to extradata during multi-threaded decoding */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:76"><expr pos:start="65:9" pos:end="65:75"><call pos:start="65:9" pos:end="65:75"><name pos:start="65:9" pos:end="65:19">av_dict_set</name><argument_list pos:start="65:20" pos:end="65:75">(<argument pos:start="65:21" pos:end="65:55"><expr pos:start="65:21" pos:end="65:55"><ternary pos:start="65:21" pos:end="65:55"><condition pos:start="65:21" pos:end="65:29"><expr pos:start="65:21" pos:end="65:27"><name pos:start="65:21" pos:end="65:27">options</name></expr> ?</condition><then pos:start="65:31" pos:end="65:41"> <expr pos:start="65:31" pos:end="65:41"><operator pos:start="65:31" pos:end="65:31">&amp;</operator><name pos:start="65:32" pos:end="65:41"><name pos:start="65:32" pos:end="65:38">options</name><index pos:start="65:39" pos:end="65:41">[<expr pos:start="65:40" pos:end="65:40"><name pos:start="65:40" pos:end="65:40">i</name></expr>]</index></name></expr> </then><else pos:start="65:43" pos:end="65:55">: <expr pos:start="65:45" pos:end="65:55"><operator pos:start="65:45" pos:end="65:45">&amp;</operator><name pos:start="65:46" pos:end="65:55">thread_opt</name></expr></else></ternary></expr></argument>, <argument pos:start="65:58" pos:end="65:66"><expr pos:start="65:58" pos:end="65:66"><literal type="string" pos:start="65:58" pos:end="65:66">"threads"</literal></expr></argument>, <argument pos:start="65:69" pos:end="65:71"><expr pos:start="65:69" pos:end="65:71"><literal type="string" pos:start="65:69" pos:end="65:71">"1"</literal></expr></argument>, <argument pos:start="65:74" pos:end="65:74"><expr pos:start="65:74" pos:end="65:74"><literal type="number" pos:start="65:74" pos:end="65:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="69:9" pos:end="69:58">/* Ensure that subtitle_header is properly set. */</comment>

        <if_stmt pos:start="71:9" pos:end="77:45"><if pos:start="71:9" pos:end="77:45">if <condition pos:start="71:12" pos:end="73:42">(<expr pos:start="71:13" pos:end="73:41"><name pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:14">st</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:21">codec</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:33">codec_type</name></name> <operator pos:start="71:35" pos:end="71:36">==</operator> <name pos:start="71:38" pos:end="71:58">AVMEDIA_TYPE_SUBTITLE</name>

            <operator pos:start="73:13" pos:end="73:14">&amp;&amp;</operator> <name pos:start="73:16" pos:end="73:20">codec</name> <operator pos:start="73:22" pos:end="73:23">&amp;&amp;</operator> <operator pos:start="73:25" pos:end="73:25">!</operator><name pos:start="73:26" pos:end="73:41"><name pos:start="73:26" pos:end="73:27">st</name><operator pos:start="73:28" pos:end="73:29">-&gt;</operator><name pos:start="73:30" pos:end="73:34">codec</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:41">codec</name></name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="77:45"><block_content pos:start="75:13" pos:end="77:45">

            <expr_stmt pos:start="75:13" pos:end="77:45"><expr pos:start="75:13" pos:end="77:44"><call pos:start="75:13" pos:end="77:44"><name pos:start="75:13" pos:end="75:25">avcodec_open2</name><argument_list pos:start="75:26" pos:end="77:44">(<argument pos:start="75:27" pos:end="75:35"><expr pos:start="75:27" pos:end="75:35"><name pos:start="75:27" pos:end="75:35"><name pos:start="75:27" pos:end="75:28">st</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:35">codec</name></name></expr></argument>, <argument pos:start="75:38" pos:end="75:42"><expr pos:start="75:38" pos:end="75:42"><name pos:start="75:38" pos:end="75:42">codec</name></expr></argument>, <argument pos:start="75:45" pos:end="77:43"><expr pos:start="75:45" pos:end="77:43"><ternary pos:start="75:45" pos:end="77:43"><condition pos:start="75:45" pos:end="75:53"><expr pos:start="75:45" pos:end="75:51"><name pos:start="75:45" pos:end="75:51">options</name></expr> ?</condition><then pos:start="75:55" pos:end="75:65"> <expr pos:start="75:55" pos:end="75:65"><operator pos:start="75:55" pos:end="75:55">&amp;</operator><name pos:start="75:56" pos:end="75:65"><name pos:start="75:56" pos:end="75:62">options</name><index pos:start="75:63" pos:end="75:65">[<expr pos:start="75:64" pos:end="75:64"><name pos:start="75:64" pos:end="75:64">i</name></expr>]</index></name></expr>

                              </then><else pos:start="77:31" pos:end="77:43">: <expr pos:start="77:33" pos:end="77:43"><operator pos:start="77:33" pos:end="77:33">&amp;</operator><name pos:start="77:34" pos:end="77:43">thread_opt</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="line" pos:start="81:9" pos:end="81:77">//try to just open decoders, in case this is enough to get parameters</comment>

        <if_stmt pos:start="83:9" pos:end="91:9"><if pos:start="83:9" pos:end="91:9">if<condition pos:start="83:11" pos:end="83:44">(<expr pos:start="83:12" pos:end="83:43"><operator pos:start="83:12" pos:end="83:12">!</operator><call pos:start="83:13" pos:end="83:43"><name pos:start="83:13" pos:end="83:32">has_codec_parameters</name><argument_list pos:start="83:33" pos:end="83:43">(<argument pos:start="83:34" pos:end="83:42"><expr pos:start="83:34" pos:end="83:42"><name pos:start="83:34" pos:end="83:42"><name pos:start="83:34" pos:end="83:35">st</name><operator pos:start="83:36" pos:end="83:37">-&gt;</operator><name pos:start="83:38" pos:end="83:42">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="83:45" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:45">

            <if_stmt pos:start="85:13" pos:end="89:45"><if pos:start="85:13" pos:end="89:45">if <condition pos:start="85:16" pos:end="85:43">(<expr pos:start="85:17" pos:end="85:42"><name pos:start="85:17" pos:end="85:21">codec</name> <operator pos:start="85:23" pos:end="85:24">&amp;&amp;</operator> <operator pos:start="85:26" pos:end="85:26">!</operator><name pos:start="85:27" pos:end="85:42"><name pos:start="85:27" pos:end="85:28">st</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:35">codec</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:42">codec</name></name></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="89:45"><block_content pos:start="87:17" pos:end="89:45">

                <expr_stmt pos:start="87:17" pos:end="89:45"><expr pos:start="87:17" pos:end="89:44"><call pos:start="87:17" pos:end="89:44"><name pos:start="87:17" pos:end="87:29">avcodec_open2</name><argument_list pos:start="87:30" pos:end="89:44">(<argument pos:start="87:31" pos:end="87:39"><expr pos:start="87:31" pos:end="87:39"><name pos:start="87:31" pos:end="87:39"><name pos:start="87:31" pos:end="87:32">st</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:39">codec</name></name></expr></argument>, <argument pos:start="87:42" pos:end="87:46"><expr pos:start="87:42" pos:end="87:46"><name pos:start="87:42" pos:end="87:46">codec</name></expr></argument>, <argument pos:start="87:49" pos:end="89:43"><expr pos:start="87:49" pos:end="89:43"><ternary pos:start="87:49" pos:end="89:43"><condition pos:start="87:49" pos:end="87:57"><expr pos:start="87:49" pos:end="87:55"><name pos:start="87:49" pos:end="87:55">options</name></expr> ?</condition><then pos:start="87:59" pos:end="87:69"> <expr pos:start="87:59" pos:end="87:69"><operator pos:start="87:59" pos:end="87:59">&amp;</operator><name pos:start="87:60" pos:end="87:69"><name pos:start="87:60" pos:end="87:66">options</name><index pos:start="87:67" pos:end="87:69">[<expr pos:start="87:68" pos:end="87:68"><name pos:start="87:68" pos:end="87:68">i</name></expr>]</index></name></expr>

                              </then><else pos:start="89:31" pos:end="89:43">: <expr pos:start="89:33" pos:end="89:43"><operator pos:start="89:33" pos:end="89:33">&amp;</operator><name pos:start="89:34" pos:end="89:43">thread_opt</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="95:38"><if pos:start="93:9" pos:end="95:38">if <condition pos:start="93:12" pos:end="93:21">(<expr pos:start="93:13" pos:end="93:20"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:20">options</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:38"><block_content pos:start="95:13" pos:end="95:38">

            <expr_stmt pos:start="95:13" pos:end="95:38"><expr pos:start="95:13" pos:end="95:37"><call pos:start="95:13" pos:end="95:37"><name pos:start="95:13" pos:end="95:24">av_dict_free</name><argument_list pos:start="95:25" pos:end="95:37">(<argument pos:start="95:26" pos:end="95:36"><expr pos:start="95:26" pos:end="95:36"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:36">thread_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="101:5" pos:end="105:5">for <control pos:start="101:9" pos:end="101:36">(<init pos:start="101:10" pos:end="101:13"><expr pos:start="101:10" pos:end="101:12"><name pos:start="101:10" pos:end="101:10">i</name><operator pos:start="101:11" pos:end="101:11">=</operator><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</init> <condition pos:start="101:15" pos:end="101:31"><expr pos:start="101:15" pos:end="101:30"><name pos:start="101:15" pos:end="101:15">i</name><operator pos:start="101:16" pos:end="101:16">&lt;</operator><name pos:start="101:17" pos:end="101:30"><name pos:start="101:17" pos:end="101:18">ic</name><operator pos:start="101:19" pos:end="101:20">-&gt;</operator><name pos:start="101:21" pos:end="101:30">nb_streams</name></name></expr>;</condition> <incr pos:start="101:33" pos:end="101:35"><expr pos:start="101:33" pos:end="101:35"><name pos:start="101:33" pos:end="101:33">i</name><operator pos:start="101:34" pos:end="101:35">++</operator></expr></incr>)</control> <block pos:start="101:38" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:56">

        <expr_stmt pos:start="103:9" pos:end="103:56"><expr pos:start="103:9" pos:end="103:55"><name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:10">ic</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:19">streams</name><index pos:start="103:20" pos:end="103:22">[<expr pos:start="103:21" pos:end="103:21"><name pos:start="103:21" pos:end="103:21">i</name></expr>]</index></name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:38"><name pos:start="103:25" pos:end="103:28">info</name><operator pos:start="103:29" pos:end="103:30">-&gt;</operator><name pos:start="103:31" pos:end="103:38">last_dts</name></name> <operator pos:start="103:40" pos:end="103:40">=</operator> <name pos:start="103:42" pos:end="103:55">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="109:5" pos:end="109:14"><expr pos:start="109:5" pos:end="109:13"><name pos:start="109:5" pos:end="109:9">count</name> <operator pos:start="109:11" pos:end="109:11">=</operator> <literal type="number" pos:start="109:13" pos:end="109:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:18"><expr pos:start="111:5" pos:end="111:17"><name pos:start="111:5" pos:end="111:13">read_size</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <literal type="number" pos:start="111:17" pos:end="111:17">0</literal></expr>;</expr_stmt>

    <for pos:start="113:5" pos:end="415:5">for<control pos:start="113:8" pos:end="113:11">(<init pos:start="113:9" pos:end="113:9">;</init><condition pos:start="113:10" pos:end="113:10">;</condition><incr/>)</control> <block pos:start="113:13" pos:end="415:5">{<block_content pos:start="115:9" pos:end="413:16">

        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="123:9">if <condition pos:start="115:12" pos:end="115:56">(<expr pos:start="115:13" pos:end="115:55"><call pos:start="115:13" pos:end="115:55"><name pos:start="115:13" pos:end="115:30">ff_check_interrupt</name><argument_list pos:start="115:31" pos:end="115:55">(<argument pos:start="115:32" pos:end="115:54"><expr pos:start="115:32" pos:end="115:54"><operator pos:start="115:32" pos:end="115:32">&amp;</operator><name pos:start="115:33" pos:end="115:54"><name pos:start="115:33" pos:end="115:34">ic</name><operator pos:start="115:35" pos:end="115:36">-&gt;</operator><name pos:start="115:37" pos:end="115:54">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="115:57" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:18">

            <expr_stmt pos:start="117:13" pos:end="117:30"><expr pos:start="117:13" pos:end="117:29"><name pos:start="117:13" pos:end="117:15">ret</name><operator pos:start="117:16" pos:end="117:16">=</operator> <name pos:start="117:18" pos:end="117:29">AVERROR_EXIT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:54"><expr pos:start="119:13" pos:end="119:53"><call pos:start="119:13" pos:end="119:53"><name pos:start="119:13" pos:end="119:18">av_log</name><argument_list pos:start="119:19" pos:end="119:53">(<argument pos:start="119:20" pos:end="119:21"><expr pos:start="119:20" pos:end="119:21"><name pos:start="119:20" pos:end="119:21">ic</name></expr></argument>, <argument pos:start="119:24" pos:end="119:35"><expr pos:start="119:24" pos:end="119:35"><name pos:start="119:24" pos:end="119:35">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="119:38" pos:end="119:52"><expr pos:start="119:38" pos:end="119:52"><literal type="string" pos:start="119:38" pos:end="119:52">"interrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="127:9" pos:end="127:58">/* check if one codec still needs to be handled */</comment>

        <for pos:start="129:9" pos:end="173:9">for<control pos:start="129:12" pos:end="129:37">(<init pos:start="129:13" pos:end="129:16"><expr pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:13">i</name><operator pos:start="129:14" pos:end="129:14">=</operator><literal type="number" pos:start="129:15" pos:end="129:15">0</literal></expr>;</init><condition pos:start="129:17" pos:end="129:33"><expr pos:start="129:17" pos:end="129:32"><name pos:start="129:17" pos:end="129:17">i</name><operator pos:start="129:18" pos:end="129:18">&lt;</operator><name pos:start="129:19" pos:end="129:32"><name pos:start="129:19" pos:end="129:20">ic</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:32">nb_streams</name></name></expr>;</condition><incr pos:start="129:34" pos:end="129:36"><expr pos:start="129:34" pos:end="129:36"><name pos:start="129:34" pos:end="129:34">i</name><operator pos:start="129:35" pos:end="129:36">++</operator></expr></incr>)</control> <block pos:start="129:39" pos:end="173:9">{<block_content pos:start="131:13" pos:end="171:22">

            <decl_stmt pos:start="131:13" pos:end="131:44"><decl pos:start="131:13" pos:end="131:43"><type pos:start="131:13" pos:end="131:15"><name pos:start="131:13" pos:end="131:15">int</name></type> <name pos:start="131:17" pos:end="131:38">fps_analyze_framecount</name> <init pos:start="131:40" pos:end="131:43">= <expr pos:start="131:42" pos:end="131:43"><literal type="number" pos:start="131:42" pos:end="131:43">20</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="135:13" pos:end="135:32"><expr pos:start="135:13" pos:end="135:31"><name pos:start="135:13" pos:end="135:14">st</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <name pos:start="135:18" pos:end="135:31"><name pos:start="135:18" pos:end="135:19">ic</name><operator pos:start="135:20" pos:end="135:21">-&gt;</operator><name pos:start="135:22" pos:end="135:28">streams</name><index pos:start="135:29" pos:end="135:31">[<expr pos:start="135:30" pos:end="135:30"><name pos:start="135:30" pos:end="135:30">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="139:22"><if pos:start="137:13" pos:end="139:22">if <condition pos:start="137:16" pos:end="137:49">(<expr pos:start="137:17" pos:end="137:48"><operator pos:start="137:17" pos:end="137:17">!</operator><call pos:start="137:18" pos:end="137:48"><name pos:start="137:18" pos:end="137:37">has_codec_parameters</name><argument_list pos:start="137:38" pos:end="137:48">(<argument pos:start="137:39" pos:end="137:47"><expr pos:start="137:39" pos:end="137:47"><name pos:start="137:39" pos:end="137:47"><name pos:start="137:39" pos:end="137:40">st</name><operator pos:start="137:41" pos:end="137:42">-&gt;</operator><name pos:start="137:43" pos:end="137:47">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="139:17" pos:end="139:22"><block_content pos:start="139:17" pos:end="139:22">

                <break pos:start="139:17" pos:end="139:22">break;</break></block_content></block></if></if_stmt>

            <comment type="block" pos:start="141:13" pos:end="145:33">/* if the timebase is coarse (like the usual millisecond precision

               of mkv), we need to analyze more frames to reliably arrive at

               the correct fps */</comment>

            <if_stmt pos:start="147:13" pos:end="149:44"><if pos:start="147:13" pos:end="149:44">if <condition pos:start="147:16" pos:end="147:47">(<expr pos:start="147:17" pos:end="147:46"><call pos:start="147:17" pos:end="147:37"><name pos:start="147:17" pos:end="147:22">av_q2d</name><argument_list pos:start="147:23" pos:end="147:37">(<argument pos:start="147:24" pos:end="147:36"><expr pos:start="147:24" pos:end="147:36"><name pos:start="147:24" pos:end="147:36"><name pos:start="147:24" pos:end="147:25">st</name><operator pos:start="147:26" pos:end="147:27">-&gt;</operator><name pos:start="147:28" pos:end="147:36">time_base</name></name></expr></argument>)</argument_list></call> <operator pos:start="147:39" pos:end="147:39">&gt;</operator> <literal type="number" pos:start="147:41" pos:end="147:46">0.0005</literal></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:44"><block_content pos:start="149:17" pos:end="149:44">

                <expr_stmt pos:start="149:17" pos:end="149:44"><expr pos:start="149:17" pos:end="149:43"><name pos:start="149:17" pos:end="149:38">fps_analyze_framecount</name> <operator pos:start="149:40" pos:end="149:41">*=</operator> <literal type="number" pos:start="149:43" pos:end="149:43">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="151:13" pos:end="153:60"><if pos:start="151:13" pos:end="153:60">if <condition pos:start="151:16" pos:end="151:40">(<expr pos:start="151:17" pos:end="151:39"><name pos:start="151:17" pos:end="151:34"><name pos:start="151:17" pos:end="151:18">ic</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:34">fps_probe_size</name></name> <operator pos:start="151:36" pos:end="151:37">&gt;=</operator> <literal type="number" pos:start="151:39" pos:end="151:39">0</literal></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:60"><block_content pos:start="153:17" pos:end="153:60">

                <expr_stmt pos:start="153:17" pos:end="153:60"><expr pos:start="153:17" pos:end="153:59"><name pos:start="153:17" pos:end="153:38">fps_analyze_framecount</name> <operator pos:start="153:40" pos:end="153:40">=</operator> <name pos:start="153:42" pos:end="153:59"><name pos:start="153:42" pos:end="153:43">ic</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:59">fps_probe_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="155:13" pos:end="155:59">/* variable fps and no guess at the real fps */</comment>

            <if_stmt pos:start="157:13" pos:end="163:22"><if pos:start="157:13" pos:end="163:22">if<condition pos:start="157:15" pos:end="161:62">(   <expr pos:start="157:19" pos:end="161:61"><call pos:start="157:19" pos:end="157:42"><name pos:start="157:19" pos:end="157:31">tb_unreliable</name><argument_list pos:start="157:32" pos:end="157:42">(<argument pos:start="157:33" pos:end="157:41"><expr pos:start="157:33" pos:end="157:41"><name pos:start="157:33" pos:end="157:41"><name pos:start="157:33" pos:end="157:34">st</name><operator pos:start="157:35" pos:end="157:36">-&gt;</operator><name pos:start="157:37" pos:end="157:41">codec</name></name></expr></argument>)</argument_list></call> <operator pos:start="157:44" pos:end="157:45">&amp;&amp;</operator> <operator pos:start="157:47" pos:end="157:47">!</operator><operator pos:start="157:48" pos:end="157:48">(</operator><name pos:start="157:49" pos:end="157:68"><name pos:start="157:49" pos:end="157:50">st</name><operator pos:start="157:51" pos:end="157:52">-&gt;</operator><name pos:start="157:53" pos:end="157:64">r_frame_rate</name><operator pos:start="157:65" pos:end="157:65">.</operator><name pos:start="157:66" pos:end="157:68">num</name></name> <operator pos:start="157:70" pos:end="157:71">&amp;&amp;</operator> <name pos:start="157:73" pos:end="157:94"><name pos:start="157:73" pos:end="157:74">st</name><operator pos:start="157:75" pos:end="157:76">-&gt;</operator><name pos:start="157:77" pos:end="157:90">avg_frame_rate</name><operator pos:start="157:91" pos:end="157:91">.</operator><name pos:start="157:92" pos:end="157:94">num</name></name><operator pos:start="157:95" pos:end="157:95">)</operator>

               <operator pos:start="159:16" pos:end="159:17">&amp;&amp;</operator> <name pos:start="159:19" pos:end="159:42"><name pos:start="159:19" pos:end="159:20">st</name><operator pos:start="159:21" pos:end="159:22">-&gt;</operator><name pos:start="159:23" pos:end="159:26">info</name><operator pos:start="159:27" pos:end="159:28">-&gt;</operator><name pos:start="159:29" pos:end="159:42">duration_count</name></name> <operator pos:start="159:44" pos:end="159:44">&lt;</operator> <name pos:start="159:46" pos:end="159:67">fps_analyze_framecount</name>

               <operator pos:start="161:16" pos:end="161:17">&amp;&amp;</operator> <name pos:start="161:19" pos:end="161:39"><name pos:start="161:19" pos:end="161:20">st</name><operator pos:start="161:21" pos:end="161:22">-&gt;</operator><name pos:start="161:23" pos:end="161:27">codec</name><operator pos:start="161:28" pos:end="161:29">-&gt;</operator><name pos:start="161:30" pos:end="161:39">codec_type</name></name> <operator pos:start="161:41" pos:end="161:42">==</operator> <name pos:start="161:44" pos:end="161:61">AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo" pos:start="163:17" pos:end="163:22"><block_content pos:start="163:17" pos:end="163:22">

                <break pos:start="163:17" pos:end="163:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="165:13" pos:end="167:22"><if pos:start="165:13" pos:end="167:22">if<condition pos:start="165:15" pos:end="165:80">(<expr pos:start="165:16" pos:end="165:79"><name pos:start="165:16" pos:end="165:25"><name pos:start="165:16" pos:end="165:17">st</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:25">parser</name></name> <operator pos:start="165:27" pos:end="165:28">&amp;&amp;</operator> <name pos:start="165:30" pos:end="165:54"><name pos:start="165:30" pos:end="165:31">st</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:39">parser</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:47">parser</name><operator pos:start="165:48" pos:end="165:49">-&gt;</operator><name pos:start="165:50" pos:end="165:54">split</name></name> <operator pos:start="165:56" pos:end="165:57">&amp;&amp;</operator> <operator pos:start="165:59" pos:end="165:59">!</operator><name pos:start="165:60" pos:end="165:79"><name pos:start="165:60" pos:end="165:61">st</name><operator pos:start="165:62" pos:end="165:63">-&gt;</operator><name pos:start="165:64" pos:end="165:68">codec</name><operator pos:start="165:69" pos:end="165:70">-&gt;</operator><name pos:start="165:71" pos:end="165:79">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:22"><block_content pos:start="167:17" pos:end="167:22">

                <break pos:start="167:17" pos:end="167:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="169:13" pos:end="171:22"><if pos:start="169:13" pos:end="171:22">if<condition pos:start="169:15" pos:end="169:47">(<expr pos:start="169:16" pos:end="169:46"><name pos:start="169:16" pos:end="169:28"><name pos:start="169:16" pos:end="169:17">st</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:28">first_dts</name></name> <operator pos:start="169:30" pos:end="169:31">==</operator> <name pos:start="169:33" pos:end="169:46">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="171:17" pos:end="171:22"><block_content pos:start="171:17" pos:end="171:22">

                <break pos:start="171:17" pos:end="171:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="175:9" pos:end="195:9"><if pos:start="175:9" pos:end="195:9">if <condition pos:start="175:12" pos:end="175:32">(<expr pos:start="175:13" pos:end="175:31"><name pos:start="175:13" pos:end="175:13">i</name> <operator pos:start="175:15" pos:end="175:16">==</operator> <name pos:start="175:18" pos:end="175:31"><name pos:start="175:18" pos:end="175:19">ic</name><operator pos:start="175:20" pos:end="175:21">-&gt;</operator><name pos:start="175:22" pos:end="175:31">nb_streams</name></name></expr>)</condition> <block pos:start="175:34" pos:end="195:9">{<block_content pos:start="183:13" pos:end="193:13">

            <comment type="block" pos:start="177:13" pos:end="181:27">/* NOTE: if the format has no header, then we need to read

               some packets to get most of the streams, so we cannot

               stop here */</comment>

            <if_stmt pos:start="183:13" pos:end="193:13"><if pos:start="183:13" pos:end="193:13">if <condition pos:start="183:16" pos:end="183:53">(<expr pos:start="183:17" pos:end="183:52"><operator pos:start="183:17" pos:end="183:17">!</operator><operator pos:start="183:18" pos:end="183:18">(</operator><name pos:start="183:19" pos:end="183:31"><name pos:start="183:19" pos:end="183:20">ic</name><operator pos:start="183:21" pos:end="183:22">-&gt;</operator><name pos:start="183:23" pos:end="183:31">ctx_flags</name></name> <operator pos:start="183:33" pos:end="183:33">&amp;</operator> <name pos:start="183:35" pos:end="183:51">AVFMTCTX_NOHEADER</name><operator pos:start="183:52" pos:end="183:52">)</operator></expr>)</condition> <block pos:start="183:55" pos:end="193:13">{<block_content pos:start="187:17" pos:end="191:22">

                <comment type="block" pos:start="185:17" pos:end="185:74">/* if we found the info for all the codecs, we can stop */</comment>

                <expr_stmt pos:start="187:17" pos:end="187:28"><expr pos:start="187:17" pos:end="187:27"><name pos:start="187:17" pos:end="187:19">ret</name> <operator pos:start="187:21" pos:end="187:21">=</operator> <name pos:start="187:23" pos:end="187:27">count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:61"><expr pos:start="189:17" pos:end="189:60"><call pos:start="189:17" pos:end="189:60"><name pos:start="189:17" pos:end="189:22">av_log</name><argument_list pos:start="189:23" pos:end="189:60">(<argument pos:start="189:24" pos:end="189:25"><expr pos:start="189:24" pos:end="189:25"><name pos:start="189:24" pos:end="189:25">ic</name></expr></argument>, <argument pos:start="189:28" pos:end="189:39"><expr pos:start="189:28" pos:end="189:39"><name pos:start="189:28" pos:end="189:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="189:42" pos:end="189:59"><expr pos:start="189:42" pos:end="189:59"><literal type="string" pos:start="189:42" pos:end="189:59">"All info found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="197:9" pos:end="197:74">/* we did not get all the codec info, but we read too much data */</comment>

        <if_stmt pos:start="199:9" pos:end="207:9"><if pos:start="199:9" pos:end="207:9">if <condition pos:start="199:12" pos:end="199:39">(<expr pos:start="199:13" pos:end="199:38"><name pos:start="199:13" pos:end="199:21">read_size</name> <operator pos:start="199:23" pos:end="199:24">&gt;=</operator> <name pos:start="199:26" pos:end="199:38"><name pos:start="199:26" pos:end="199:27">ic</name><operator pos:start="199:28" pos:end="199:29">-&gt;</operator><name pos:start="199:30" pos:end="199:38">probesize</name></name></expr>)</condition> <block pos:start="199:41" pos:end="207:9">{<block_content pos:start="201:13" pos:end="205:18">

            <expr_stmt pos:start="201:13" pos:end="201:24"><expr pos:start="201:13" pos:end="201:23"><name pos:start="201:13" pos:end="201:15">ret</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <name pos:start="201:19" pos:end="201:23">count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:92"><expr pos:start="203:13" pos:end="203:91"><call pos:start="203:13" pos:end="203:91"><name pos:start="203:13" pos:end="203:18">av_log</name><argument_list pos:start="203:19" pos:end="203:91">(<argument pos:start="203:20" pos:end="203:21"><expr pos:start="203:20" pos:end="203:21"><name pos:start="203:20" pos:end="203:21">ic</name></expr></argument>, <argument pos:start="203:24" pos:end="203:35"><expr pos:start="203:24" pos:end="203:35"><name pos:start="203:24" pos:end="203:35">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="203:38" pos:end="203:75"><expr pos:start="203:38" pos:end="203:75"><literal type="string" pos:start="203:38" pos:end="203:75">"Probe buffer size limit %d reached\n"</literal></expr></argument>, <argument pos:start="203:78" pos:end="203:90"><expr pos:start="203:78" pos:end="203:90"><name pos:start="203:78" pos:end="203:90"><name pos:start="203:78" pos:end="203:79">ic</name><operator pos:start="203:80" pos:end="203:81">-&gt;</operator><name pos:start="203:82" pos:end="203:90">probesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="211:9" pos:end="213:33">/* NOTE: a new stream can be added there if no header in file

           (AVFMTCTX_NOHEADER) */</comment>

        <expr_stmt pos:start="215:9" pos:end="215:45"><expr pos:start="215:9" pos:end="215:44"><name pos:start="215:9" pos:end="215:11">ret</name> <operator pos:start="215:13" pos:end="215:13">=</operator> <call pos:start="215:15" pos:end="215:44"><name pos:start="215:15" pos:end="215:33">read_frame_internal</name><argument_list pos:start="215:34" pos:end="215:44">(<argument pos:start="215:35" pos:end="215:36"><expr pos:start="215:35" pos:end="215:36"><name pos:start="215:35" pos:end="215:36">ic</name></expr></argument>, <argument pos:start="215:39" pos:end="215:43"><expr pos:start="215:39" pos:end="215:43"><operator pos:start="215:39" pos:end="215:39">&amp;</operator><name pos:start="215:40" pos:end="215:43">pkt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="217:9" pos:end="219:21"><if pos:start="217:9" pos:end="219:21">if <condition pos:start="217:12" pos:end="217:35">(<expr pos:start="217:13" pos:end="217:34"><name pos:start="217:13" pos:end="217:15">ret</name> <operator pos:start="217:17" pos:end="217:18">==</operator> <call pos:start="217:20" pos:end="217:34"><name pos:start="217:20" pos:end="217:26">AVERROR</name><argument_list pos:start="217:27" pos:end="217:34">(<argument pos:start="217:28" pos:end="217:33"><expr pos:start="217:28" pos:end="217:33"><name pos:start="217:28" pos:end="217:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="219:13" pos:end="219:21"><block_content pos:start="219:13" pos:end="219:21">

            <continue pos:start="219:13" pos:end="219:21">continue;</continue></block_content></block></if></if_stmt>



        <if_stmt pos:start="223:9" pos:end="283:9"><if pos:start="223:9" pos:end="283:9">if <condition pos:start="223:12" pos:end="223:20">(<expr pos:start="223:13" pos:end="223:19"><name pos:start="223:13" pos:end="223:15">ret</name> <operator pos:start="223:17" pos:end="223:17">&lt;</operator> <literal type="number" pos:start="223:19" pos:end="223:19">0</literal></expr>)</condition> <block pos:start="223:22" pos:end="283:9">{<block_content pos:start="227:13" pos:end="281:18">

            <comment type="block" pos:start="225:13" pos:end="225:29">/* EOF or error*/</comment>

            <decl_stmt pos:start="227:13" pos:end="227:39"><decl pos:start="227:13" pos:end="227:38"><type pos:start="227:13" pos:end="227:20"><name pos:start="227:13" pos:end="227:20">AVPacket</name></type> <name pos:start="227:22" pos:end="227:30">empty_pkt</name> <init pos:start="227:32" pos:end="227:38">= <expr pos:start="227:34" pos:end="227:38"><block pos:start="227:34" pos:end="227:38">{ <expr pos:start="227:36" pos:end="227:36"><literal type="number" pos:start="227:36" pos:end="227:36">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="229:13" pos:end="229:20"><decl pos:start="229:13" pos:end="229:19"><type pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:15">int</name></type> <name pos:start="229:17" pos:end="229:19">err</name></decl>;</decl_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:39"><expr pos:start="231:13" pos:end="231:38"><call pos:start="231:13" pos:end="231:38"><name pos:start="231:13" pos:end="231:26">av_init_packet</name><argument_list pos:start="231:27" pos:end="231:38">(<argument pos:start="231:28" pos:end="231:37"><expr pos:start="231:28" pos:end="231:37"><operator pos:start="231:28" pos:end="231:28">&amp;</operator><name pos:start="231:29" pos:end="231:37">empty_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="235:13" pos:end="235:21"><expr pos:start="235:13" pos:end="235:20"><name pos:start="235:13" pos:end="235:15">ret</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <operator pos:start="235:19" pos:end="235:19">-</operator><literal type="number" pos:start="235:20" pos:end="235:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="235:23" pos:end="235:81">/* we could not have all the codec parameters before EOF */</comment>

            <for pos:start="237:13" pos:end="279:13">for<control pos:start="237:16" pos:end="237:41">(<init pos:start="237:17" pos:end="237:20"><expr pos:start="237:17" pos:end="237:19"><name pos:start="237:17" pos:end="237:17">i</name><operator pos:start="237:18" pos:end="237:18">=</operator><literal type="number" pos:start="237:19" pos:end="237:19">0</literal></expr>;</init><condition pos:start="237:21" pos:end="237:37"><expr pos:start="237:21" pos:end="237:36"><name pos:start="237:21" pos:end="237:21">i</name><operator pos:start="237:22" pos:end="237:22">&lt;</operator><name pos:start="237:23" pos:end="237:36"><name pos:start="237:23" pos:end="237:24">ic</name><operator pos:start="237:25" pos:end="237:26">-&gt;</operator><name pos:start="237:27" pos:end="237:36">nb_streams</name></name></expr>;</condition><incr pos:start="237:38" pos:end="237:40"><expr pos:start="237:38" pos:end="237:40"><name pos:start="237:38" pos:end="237:38">i</name><operator pos:start="237:39" pos:end="237:40">++</operator></expr></incr>)</control> <block pos:start="237:43" pos:end="279:13">{<block_content pos:start="239:17" pos:end="277:17">

                <expr_stmt pos:start="239:17" pos:end="239:36"><expr pos:start="239:17" pos:end="239:35"><name pos:start="239:17" pos:end="239:18">st</name> <operator pos:start="239:20" pos:end="239:20">=</operator> <name pos:start="239:22" pos:end="239:35"><name pos:start="239:22" pos:end="239:23">ic</name><operator pos:start="239:24" pos:end="239:25">-&gt;</operator><name pos:start="239:26" pos:end="239:32">streams</name><index pos:start="239:33" pos:end="239:35">[<expr pos:start="239:34" pos:end="239:34"><name pos:start="239:34" pos:end="239:34">i</name></expr>]</index></name></expr>;</expr_stmt>



                <comment type="block" pos:start="243:17" pos:end="243:40">/* flush the decoders */</comment>

                <do pos:start="245:17" pos:end="253:70">do <block pos:start="245:20" pos:end="253:17">{<block_content pos:start="247:21" pos:end="251:63">

                    <expr_stmt pos:start="247:21" pos:end="251:63"><expr pos:start="247:21" pos:end="251:62"><name pos:start="247:21" pos:end="247:23">err</name> <operator pos:start="247:25" pos:end="247:25">=</operator> <call pos:start="247:27" pos:end="251:62"><name pos:start="247:27" pos:end="247:42">try_decode_frame</name><argument_list pos:start="247:43" pos:end="251:62">(<argument pos:start="247:44" pos:end="247:45"><expr pos:start="247:44" pos:end="247:45"><name pos:start="247:44" pos:end="247:45">st</name></expr></argument>, <argument pos:start="247:48" pos:end="247:57"><expr pos:start="247:48" pos:end="247:57"><operator pos:start="247:48" pos:end="247:48">&amp;</operator><name pos:start="247:49" pos:end="247:57">empty_pkt</name></expr></argument>,

                                           <argument pos:start="249:44" pos:end="251:61"><expr pos:start="249:44" pos:end="251:61"><ternary pos:start="249:44" pos:end="251:61"><condition pos:start="249:44" pos:end="249:77"><expr pos:start="249:44" pos:end="249:75"><operator pos:start="249:44" pos:end="249:44">(</operator><name pos:start="249:45" pos:end="249:51">options</name> <operator pos:start="249:53" pos:end="249:54">&amp;&amp;</operator> <name pos:start="249:56" pos:end="249:56">i</name> <operator pos:start="249:58" pos:end="249:58">&lt;</operator> <name pos:start="249:60" pos:end="249:74">orig_nb_streams</name><operator pos:start="249:75" pos:end="249:75">)</operator></expr> ?</condition><then pos:start="251:44" pos:end="251:54">

                                           <expr pos:start="251:44" pos:end="251:54"><operator pos:start="251:44" pos:end="251:44">&amp;</operator><name pos:start="251:45" pos:end="251:54"><name pos:start="251:45" pos:end="251:51">options</name><index pos:start="251:52" pos:end="251:54">[<expr pos:start="251:53" pos:end="251:53"><name pos:start="251:53" pos:end="251:53">i</name></expr>]</index></name></expr> </then><else pos:start="251:56" pos:end="251:61">: <expr pos:start="251:58" pos:end="251:61"><name pos:start="251:58" pos:end="251:61">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block> while <condition pos:start="253:25" pos:end="253:69">(<expr pos:start="253:26" pos:end="253:68"><name pos:start="253:26" pos:end="253:28">err</name> <operator pos:start="253:30" pos:end="253:30">&gt;</operator> <literal type="number" pos:start="253:32" pos:end="253:32">0</literal> <operator pos:start="253:34" pos:end="253:35">&amp;&amp;</operator> <operator pos:start="253:37" pos:end="253:37">!</operator><call pos:start="253:38" pos:end="253:68"><name pos:start="253:38" pos:end="253:57">has_codec_parameters</name><argument_list pos:start="253:58" pos:end="253:68">(<argument pos:start="253:59" pos:end="253:67"><expr pos:start="253:59" pos:end="253:67"><name pos:start="253:59" pos:end="253:67"><name pos:start="253:59" pos:end="253:60">st</name><operator pos:start="253:61" pos:end="253:62">-&gt;</operator><name pos:start="253:63" pos:end="253:67">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



                <if_stmt pos:start="257:17" pos:end="277:17"><if pos:start="257:17" pos:end="263:17">if <condition pos:start="257:20" pos:end="257:28">(<expr pos:start="257:21" pos:end="257:27"><name pos:start="257:21" pos:end="257:23">err</name> <operator pos:start="257:25" pos:end="257:25">&lt;</operator> <literal type="number" pos:start="257:27" pos:end="257:27">0</literal></expr>)</condition> <block pos:start="257:30" pos:end="263:17">{<block_content pos:start="259:21" pos:end="261:73">

                    <expr_stmt pos:start="259:21" pos:end="261:73"><expr pos:start="259:21" pos:end="261:72"><call pos:start="259:21" pos:end="261:72"><name pos:start="259:21" pos:end="259:26">av_log</name><argument_list pos:start="259:27" pos:end="261:72">(<argument pos:start="259:28" pos:end="259:29"><expr pos:start="259:28" pos:end="259:29"><name pos:start="259:28" pos:end="259:29">ic</name></expr></argument>, <argument pos:start="259:32" pos:end="259:45"><expr pos:start="259:32" pos:end="259:45"><name pos:start="259:32" pos:end="259:45">AV_LOG_WARNING</name></expr></argument>,

                           <argument pos:start="261:28" pos:end="261:60"><expr pos:start="261:28" pos:end="261:60"><literal type="string" pos:start="261:28" pos:end="261:60">"decoding for stream %d failed\n"</literal></expr></argument>, <argument pos:start="261:63" pos:end="261:71"><expr pos:start="261:63" pos:end="261:71"><name pos:start="261:63" pos:end="261:71"><name pos:start="261:63" pos:end="261:64">st</name><operator pos:start="261:65" pos:end="261:66">-&gt;</operator><name pos:start="261:67" pos:end="261:71">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="263:19" pos:end="273:17">else if <condition pos:start="263:27" pos:end="263:60">(<expr pos:start="263:28" pos:end="263:59"><operator pos:start="263:28" pos:end="263:28">!</operator><call pos:start="263:29" pos:end="263:59"><name pos:start="263:29" pos:end="263:48">has_codec_parameters</name><argument_list pos:start="263:49" pos:end="263:59">(<argument pos:start="263:50" pos:end="263:58"><expr pos:start="263:50" pos:end="263:58"><name pos:start="263:50" pos:end="263:58"><name pos:start="263:50" pos:end="263:51">st</name><operator pos:start="263:52" pos:end="263:53">-&gt;</operator><name pos:start="263:54" pos:end="263:58">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="263:61" pos:end="273:17">{<block_content pos:start="265:21" pos:end="271:74">

                    <decl_stmt pos:start="265:21" pos:end="265:34"><decl pos:start="265:21" pos:end="265:33"><type pos:start="265:21" pos:end="265:24"><name pos:start="265:21" pos:end="265:24">char</name></type> <name pos:start="265:26" pos:end="265:33"><name pos:start="265:26" pos:end="265:28">buf</name><index pos:start="265:29" pos:end="265:33">[<expr pos:start="265:30" pos:end="265:32"><literal type="number" pos:start="265:30" pos:end="265:32">256</literal></expr>]</index></name></decl>;</decl_stmt>

                    <expr_stmt pos:start="267:21" pos:end="267:67"><expr pos:start="267:21" pos:end="267:66"><call pos:start="267:21" pos:end="267:66"><name pos:start="267:21" pos:end="267:34">avcodec_string</name><argument_list pos:start="267:35" pos:end="267:66">(<argument pos:start="267:36" pos:end="267:38"><expr pos:start="267:36" pos:end="267:38"><name pos:start="267:36" pos:end="267:38">buf</name></expr></argument>, <argument pos:start="267:41" pos:end="267:51"><expr pos:start="267:41" pos:end="267:51"><sizeof pos:start="267:41" pos:end="267:51">sizeof<argument_list pos:start="267:47" pos:end="267:51">(<argument pos:start="267:48" pos:end="267:50"><expr pos:start="267:48" pos:end="267:50"><name pos:start="267:48" pos:end="267:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="267:54" pos:end="267:62"><expr pos:start="267:54" pos:end="267:62"><name pos:start="267:54" pos:end="267:62"><name pos:start="267:54" pos:end="267:55">st</name><operator pos:start="267:56" pos:end="267:57">-&gt;</operator><name pos:start="267:58" pos:end="267:62">codec</name></name></expr></argument>, <argument pos:start="267:65" pos:end="267:65"><expr pos:start="267:65" pos:end="267:65"><literal type="number" pos:start="267:65" pos:end="267:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="269:21" pos:end="271:74"><expr pos:start="269:21" pos:end="271:73"><call pos:start="269:21" pos:end="271:73"><name pos:start="269:21" pos:end="269:26">av_log</name><argument_list pos:start="269:27" pos:end="271:73">(<argument pos:start="269:28" pos:end="269:29"><expr pos:start="269:28" pos:end="269:29"><name pos:start="269:28" pos:end="269:29">ic</name></expr></argument>, <argument pos:start="269:32" pos:end="269:45"><expr pos:start="269:32" pos:end="269:45"><name pos:start="269:32" pos:end="269:45">AV_LOG_WARNING</name></expr></argument>,

                           <argument pos:start="271:28" pos:end="271:67"><expr pos:start="271:28" pos:end="271:67"><literal type="string" pos:start="271:28" pos:end="271:67">"Could not find codec parameters (%s)\n"</literal></expr></argument>, <argument pos:start="271:70" pos:end="271:72"><expr pos:start="271:70" pos:end="271:72"><name pos:start="271:70" pos:end="271:72">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="273:19" pos:end="277:17">else <block pos:start="273:24" pos:end="277:17">{<block_content pos:start="275:21" pos:end="275:28">

                    <expr_stmt pos:start="275:21" pos:end="275:28"><expr pos:start="275:21" pos:end="275:27"><name pos:start="275:21" pos:end="275:23">ret</name> <operator pos:start="275:25" pos:end="275:25">=</operator> <literal type="number" pos:start="275:27" pos:end="275:27">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <break pos:start="281:13" pos:end="281:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="287:9" pos:end="287:78"><expr pos:start="287:9" pos:end="287:77"><name pos:start="287:9" pos:end="287:11">pkt</name><operator pos:start="287:12" pos:end="287:12">=</operator> <call pos:start="287:14" pos:end="287:77"><name pos:start="287:14" pos:end="287:26">add_to_pktbuf</name><argument_list pos:start="287:27" pos:end="287:77">(<argument pos:start="287:28" pos:end="287:45"><expr pos:start="287:28" pos:end="287:45"><operator pos:start="287:28" pos:end="287:28">&amp;</operator><name pos:start="287:29" pos:end="287:45"><name pos:start="287:29" pos:end="287:30">ic</name><operator pos:start="287:31" pos:end="287:32">-&gt;</operator><name pos:start="287:33" pos:end="287:45">packet_buffer</name></name></expr></argument>, <argument pos:start="287:48" pos:end="287:52"><expr pos:start="287:48" pos:end="287:52"><operator pos:start="287:48" pos:end="287:48">&amp;</operator><name pos:start="287:49" pos:end="287:52">pkt1</name></expr></argument>, <argument pos:start="287:55" pos:end="287:76"><expr pos:start="287:55" pos:end="287:76"><operator pos:start="287:55" pos:end="287:55">&amp;</operator><name pos:start="287:56" pos:end="287:76"><name pos:start="287:56" pos:end="287:57">ic</name><operator pos:start="287:58" pos:end="287:59">-&gt;</operator><name pos:start="287:60" pos:end="287:76">packet_buffer_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="289:9" pos:end="291:38"><if pos:start="289:9" pos:end="291:38">if <condition pos:start="289:12" pos:end="289:43">(<expr pos:start="289:13" pos:end="289:42"><operator pos:start="289:13" pos:end="289:13">(</operator><name pos:start="289:14" pos:end="289:16">ret</name> <operator pos:start="289:18" pos:end="289:18">=</operator> <call pos:start="289:20" pos:end="289:37"><name pos:start="289:20" pos:end="289:32">av_dup_packet</name><argument_list pos:start="289:33" pos:end="289:37">(<argument pos:start="289:34" pos:end="289:36"><expr pos:start="289:34" pos:end="289:36"><name pos:start="289:34" pos:end="289:36">pkt</name></expr></argument>)</argument_list></call><operator pos:start="289:38" pos:end="289:38">)</operator> <operator pos:start="289:40" pos:end="289:40">&lt;</operator> <literal type="number" pos:start="289:42" pos:end="289:42">0</literal></expr>)</condition><block type="pseudo" pos:start="291:13" pos:end="291:38"><block_content pos:start="291:13" pos:end="291:38">

            <goto pos:start="291:13" pos:end="291:38">goto <name pos:start="291:18" pos:end="291:37">find_stream_info_err</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="295:9" pos:end="295:31"><expr pos:start="295:9" pos:end="295:30"><name pos:start="295:9" pos:end="295:17">read_size</name> <operator pos:start="295:19" pos:end="295:20">+=</operator> <name pos:start="295:22" pos:end="295:30"><name pos:start="295:22" pos:end="295:24">pkt</name><operator pos:start="295:25" pos:end="295:26">-&gt;</operator><name pos:start="295:27" pos:end="295:30">size</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="299:9" pos:end="299:44"><expr pos:start="299:9" pos:end="299:43"><name pos:start="299:9" pos:end="299:10">st</name> <operator pos:start="299:12" pos:end="299:12">=</operator> <name pos:start="299:14" pos:end="299:43"><name pos:start="299:14" pos:end="299:15">ic</name><operator pos:start="299:16" pos:end="299:17">-&gt;</operator><name pos:start="299:18" pos:end="299:24">streams</name><index pos:start="299:25" pos:end="299:43">[<expr pos:start="299:26" pos:end="299:42"><name pos:start="299:26" pos:end="299:42"><name pos:start="299:26" pos:end="299:28">pkt</name><operator pos:start="299:29" pos:end="299:30">-&gt;</operator><name pos:start="299:31" pos:end="299:42">stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="301:9" pos:end="313:9"><if pos:start="301:9" pos:end="313:9">if <condition pos:start="301:12" pos:end="301:39">(<expr pos:start="301:13" pos:end="301:38"><name pos:start="301:13" pos:end="301:36"><name pos:start="301:13" pos:end="301:14">st</name><operator pos:start="301:15" pos:end="301:16">-&gt;</operator><name pos:start="301:17" pos:end="301:36">codec_info_nb_frames</name></name><operator pos:start="301:37" pos:end="301:37">&gt;</operator><literal type="number" pos:start="301:38" pos:end="301:38">1</literal></expr>)</condition> <block pos:start="301:41" pos:end="313:9">{<block_content pos:start="303:13" pos:end="311:59">

            <if_stmt pos:start="303:13" pos:end="309:13"><if pos:start="303:13" pos:end="309:13">if <condition pos:start="303:16" pos:end="303:144">(<expr pos:start="303:17" pos:end="303:143"><name pos:start="303:17" pos:end="303:33"><name pos:start="303:17" pos:end="303:18">st</name><operator pos:start="303:19" pos:end="303:20">-&gt;</operator><name pos:start="303:21" pos:end="303:29">time_base</name><operator pos:start="303:30" pos:end="303:30">.</operator><name pos:start="303:31" pos:end="303:33">den</name></name> <operator pos:start="303:35" pos:end="303:35">&gt;</operator> <literal type="number" pos:start="303:37" pos:end="303:37">0</literal> <operator pos:start="303:39" pos:end="303:40">&amp;&amp;</operator> <call pos:start="303:42" pos:end="303:115"><name pos:start="303:42" pos:end="303:53">av_rescale_q</name><argument_list pos:start="303:54" pos:end="303:115">(<argument pos:start="303:55" pos:end="303:83"><expr pos:start="303:55" pos:end="303:83"><name pos:start="303:55" pos:end="303:83"><name pos:start="303:55" pos:end="303:56">st</name><operator pos:start="303:57" pos:end="303:58">-&gt;</operator><name pos:start="303:59" pos:end="303:62">info</name><operator pos:start="303:63" pos:end="303:64">-&gt;</operator><name pos:start="303:65" pos:end="303:83">codec_info_duration</name></name></expr></argument>, <argument pos:start="303:86" pos:end="303:98"><expr pos:start="303:86" pos:end="303:98"><name pos:start="303:86" pos:end="303:98"><name pos:start="303:86" pos:end="303:87">st</name><operator pos:start="303:88" pos:end="303:89">-&gt;</operator><name pos:start="303:90" pos:end="303:98">time_base</name></name></expr></argument>, <argument pos:start="303:101" pos:end="303:114"><expr pos:start="303:101" pos:end="303:114"><name pos:start="303:101" pos:end="303:114">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call> <operator pos:start="303:117" pos:end="303:118">&gt;=</operator> <name pos:start="303:120" pos:end="303:143"><name pos:start="303:120" pos:end="303:121">ic</name><operator pos:start="303:122" pos:end="303:123">-&gt;</operator><name pos:start="303:124" pos:end="303:143">max_analyze_duration</name></name></expr>)</condition> <block pos:start="303:146" pos:end="309:13">{<block_content pos:start="305:17" pos:end="307:22">

                <expr_stmt pos:start="305:17" pos:end="305:77"><expr pos:start="305:17" pos:end="305:76"><call pos:start="305:17" pos:end="305:76"><name pos:start="305:17" pos:end="305:22">av_log</name><argument_list pos:start="305:23" pos:end="305:76">(<argument pos:start="305:24" pos:end="305:25"><expr pos:start="305:24" pos:end="305:25"><name pos:start="305:24" pos:end="305:25">ic</name></expr></argument>, <argument pos:start="305:28" pos:end="305:41"><expr pos:start="305:28" pos:end="305:41"><name pos:start="305:28" pos:end="305:41">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="305:44" pos:end="305:75"><expr pos:start="305:44" pos:end="305:75"><literal type="string" pos:start="305:44" pos:end="305:75">"max_analyze_duration reached\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="307:17" pos:end="307:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:59"><expr pos:start="311:13" pos:end="311:58"><name pos:start="311:13" pos:end="311:41"><name pos:start="311:13" pos:end="311:14">st</name><operator pos:start="311:15" pos:end="311:16">-&gt;</operator><name pos:start="311:17" pos:end="311:20">info</name><operator pos:start="311:21" pos:end="311:22">-&gt;</operator><name pos:start="311:23" pos:end="311:41">codec_info_duration</name></name> <operator pos:start="311:43" pos:end="311:44">+=</operator> <name pos:start="311:46" pos:end="311:58"><name pos:start="311:46" pos:end="311:48">pkt</name><operator pos:start="311:49" pos:end="311:50">-&gt;</operator><name pos:start="311:51" pos:end="311:58">duration</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <block pos:start="315:9" pos:end="363:9">{<block_content pos:start="317:13" pos:end="361:46">

            <decl_stmt pos:start="317:13" pos:end="317:46"><decl pos:start="317:13" pos:end="317:45"><type pos:start="317:13" pos:end="317:19"><name pos:start="317:13" pos:end="317:19">int64_t</name></type> <name pos:start="317:21" pos:end="317:24">last</name> <init pos:start="317:26" pos:end="317:45">= <expr pos:start="317:28" pos:end="317:45"><name pos:start="317:28" pos:end="317:45"><name pos:start="317:28" pos:end="317:29">st</name><operator pos:start="317:30" pos:end="317:31">-&gt;</operator><name pos:start="317:32" pos:end="317:35">info</name><operator pos:start="317:36" pos:end="317:37">-&gt;</operator><name pos:start="317:38" pos:end="317:45">last_dts</name></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="321:13" pos:end="357:13"><if pos:start="321:13" pos:end="357:13">if<condition pos:start="321:15" pos:end="321:87">(<expr pos:start="321:16" pos:end="321:86"><name pos:start="321:16" pos:end="321:23"><name pos:start="321:16" pos:end="321:18">pkt</name><operator pos:start="321:19" pos:end="321:20">-&gt;</operator><name pos:start="321:21" pos:end="321:23">dts</name></name> <operator pos:start="321:25" pos:end="321:26">!=</operator> <name pos:start="321:28" pos:end="321:41">AV_NOPTS_VALUE</name> <operator pos:start="321:43" pos:end="321:44">&amp;&amp;</operator> <name pos:start="321:46" pos:end="321:49">last</name> <operator pos:start="321:51" pos:end="321:52">!=</operator> <name pos:start="321:54" pos:end="321:67">AV_NOPTS_VALUE</name> <operator pos:start="321:69" pos:end="321:70">&amp;&amp;</operator> <name pos:start="321:72" pos:end="321:79"><name pos:start="321:72" pos:end="321:74">pkt</name><operator pos:start="321:75" pos:end="321:76">-&gt;</operator><name pos:start="321:77" pos:end="321:79">dts</name></name> <operator pos:start="321:81" pos:end="321:81">&gt;</operator> <name pos:start="321:83" pos:end="321:86">last</name></expr>)</condition><block pos:start="321:88" pos:end="357:13">{<block_content pos:start="323:17" pos:end="355:86">

                <decl_stmt pos:start="323:17" pos:end="323:50"><decl pos:start="323:17" pos:end="323:49"><type pos:start="323:17" pos:end="323:23"><name pos:start="323:17" pos:end="323:23">int64_t</name></type> <name pos:start="323:25" pos:end="323:32">duration</name><init pos:start="323:33" pos:end="323:49">= <expr pos:start="323:35" pos:end="323:49"><name pos:start="323:35" pos:end="323:42"><name pos:start="323:35" pos:end="323:37">pkt</name><operator pos:start="323:38" pos:end="323:39">-&gt;</operator><name pos:start="323:40" pos:end="323:42">dts</name></name> <operator pos:start="323:44" pos:end="323:44">-</operator> <name pos:start="323:46" pos:end="323:49">last</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="325:17" pos:end="325:61"><decl pos:start="325:17" pos:end="325:60"><type pos:start="325:17" pos:end="325:22"><name pos:start="325:17" pos:end="325:22">double</name></type> <name pos:start="325:24" pos:end="325:26">dur</name><init pos:start="325:27" pos:end="325:60">= <expr pos:start="325:29" pos:end="325:60"><name pos:start="325:29" pos:end="325:36">duration</name> <operator pos:start="325:38" pos:end="325:38">*</operator> <call pos:start="325:40" pos:end="325:60"><name pos:start="325:40" pos:end="325:45">av_q2d</name><argument_list pos:start="325:46" pos:end="325:60">(<argument pos:start="325:47" pos:end="325:59"><expr pos:start="325:47" pos:end="325:59"><name pos:start="325:47" pos:end="325:59"><name pos:start="325:47" pos:end="325:48">st</name><operator pos:start="325:49" pos:end="325:50">-&gt;</operator><name pos:start="325:51" pos:end="325:59">time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<comment type="line" pos:start="329:1" pos:end="329:65">//                if(st-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</comment>

<comment type="line" pos:start="331:1" pos:end="331:62">//                    av_log(NULL, AV_LOG_ERROR, "%f\n", dur);</comment>

                <if_stmt pos:start="333:17" pos:end="335:90"><if pos:start="333:17" pos:end="335:90">if <condition pos:start="333:20" pos:end="333:49">(<expr pos:start="333:21" pos:end="333:48"><name pos:start="333:21" pos:end="333:44"><name pos:start="333:21" pos:end="333:22">st</name><operator pos:start="333:23" pos:end="333:24">-&gt;</operator><name pos:start="333:25" pos:end="333:28">info</name><operator pos:start="333:29" pos:end="333:30">-&gt;</operator><name pos:start="333:31" pos:end="333:44">duration_count</name></name> <operator pos:start="333:46" pos:end="333:46">&lt;</operator> <literal type="number" pos:start="333:48" pos:end="333:48">2</literal></expr>)</condition><block type="pseudo" pos:start="335:21" pos:end="335:90"><block_content pos:start="335:21" pos:end="335:90">

                    <expr_stmt pos:start="335:21" pos:end="335:90"><expr pos:start="335:21" pos:end="335:89"><call pos:start="335:21" pos:end="335:89"><name pos:start="335:21" pos:end="335:26">memset</name><argument_list pos:start="335:27" pos:end="335:89">(<argument pos:start="335:28" pos:end="335:51"><expr pos:start="335:28" pos:end="335:51"><name pos:start="335:28" pos:end="335:51"><name pos:start="335:28" pos:end="335:29">st</name><operator pos:start="335:30" pos:end="335:31">-&gt;</operator><name pos:start="335:32" pos:end="335:35">info</name><operator pos:start="335:36" pos:end="335:37">-&gt;</operator><name pos:start="335:38" pos:end="335:51">duration_error</name></name></expr></argument>, <argument pos:start="335:54" pos:end="335:54"><expr pos:start="335:54" pos:end="335:54"><literal type="number" pos:start="335:54" pos:end="335:54">0</literal></expr></argument>, <argument pos:start="335:57" pos:end="335:88"><expr pos:start="335:57" pos:end="335:88"><sizeof pos:start="335:57" pos:end="335:88">sizeof<argument_list pos:start="335:63" pos:end="335:88">(<argument pos:start="335:64" pos:end="335:87"><expr pos:start="335:64" pos:end="335:87"><name pos:start="335:64" pos:end="335:87"><name pos:start="335:64" pos:end="335:65">st</name><operator pos:start="335:66" pos:end="335:67">-&gt;</operator><name pos:start="335:68" pos:end="335:71">info</name><operator pos:start="335:72" pos:end="335:73">-&gt;</operator><name pos:start="335:74" pos:end="335:87">duration_error</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <for pos:start="337:17" pos:end="347:17">for <control pos:start="337:21" pos:end="337:74">(<init pos:start="337:22" pos:end="337:25"><expr pos:start="337:22" pos:end="337:24"><name pos:start="337:22" pos:end="337:22">i</name><operator pos:start="337:23" pos:end="337:23">=</operator><literal type="number" pos:start="337:24" pos:end="337:24">1</literal></expr>;</init> <condition pos:start="337:27" pos:end="337:69"><expr pos:start="337:27" pos:end="337:68"><name pos:start="337:27" pos:end="337:27">i</name><operator pos:start="337:28" pos:end="337:28">&lt;</operator><call pos:start="337:29" pos:end="337:68"><name pos:start="337:29" pos:end="337:42">FF_ARRAY_ELEMS</name><argument_list pos:start="337:43" pos:end="337:68">(<argument pos:start="337:44" pos:end="337:67"><expr pos:start="337:44" pos:end="337:67"><name pos:start="337:44" pos:end="337:67"><name pos:start="337:44" pos:end="337:45">st</name><operator pos:start="337:46" pos:end="337:47">-&gt;</operator><name pos:start="337:48" pos:end="337:51">info</name><operator pos:start="337:52" pos:end="337:53">-&gt;</operator><name pos:start="337:54" pos:end="337:67">duration_error</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="337:71" pos:end="337:73"><expr pos:start="337:71" pos:end="337:73"><name pos:start="337:71" pos:end="337:71">i</name><operator pos:start="337:72" pos:end="337:73">++</operator></expr></incr>)</control> <block pos:start="337:76" pos:end="347:17">{<block_content pos:start="339:21" pos:end="345:63">

                    <decl_stmt pos:start="339:21" pos:end="339:56"><decl pos:start="339:21" pos:end="339:55"><type pos:start="339:21" pos:end="339:23"><name pos:start="339:21" pos:end="339:23">int</name></type> <name pos:start="339:25" pos:end="339:33">framerate</name><init pos:start="339:34" pos:end="339:55">= <expr pos:start="339:36" pos:end="339:55"><call pos:start="339:36" pos:end="339:55"><name pos:start="339:36" pos:end="339:52">get_std_framerate</name><argument_list pos:start="339:53" pos:end="339:55">(<argument pos:start="339:54" pos:end="339:54"><expr pos:start="339:54" pos:end="339:54"><name pos:start="339:54" pos:end="339:54">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="341:21" pos:end="341:63"><decl pos:start="341:21" pos:end="341:62"><type pos:start="341:21" pos:end="341:23"><name pos:start="341:21" pos:end="341:23">int</name></type> <name pos:start="341:25" pos:end="341:29">ticks</name><init pos:start="341:30" pos:end="341:62">= <expr pos:start="341:32" pos:end="341:62"><call pos:start="341:32" pos:end="341:62"><name pos:start="341:32" pos:end="341:37">lrintf</name><argument_list pos:start="341:38" pos:end="341:62">(<argument pos:start="341:39" pos:end="341:61"><expr pos:start="341:39" pos:end="341:61"><name pos:start="341:39" pos:end="341:41">dur</name><operator pos:start="341:42" pos:end="341:42">*</operator><name pos:start="341:43" pos:end="341:51">framerate</name><operator pos:start="341:52" pos:end="341:52">/</operator><operator pos:start="341:53" pos:end="341:53">(</operator><literal type="number" pos:start="341:54" pos:end="341:57">1001</literal><operator pos:start="341:58" pos:end="341:58">*</operator><literal type="number" pos:start="341:59" pos:end="341:60">12</literal><operator pos:start="341:61" pos:end="341:61">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="343:21" pos:end="343:75"><decl pos:start="343:21" pos:end="343:74"><type pos:start="343:21" pos:end="343:26"><name pos:start="343:21" pos:end="343:26">double</name></type> <name pos:start="343:28" pos:end="343:32">error</name> <init pos:start="343:34" pos:end="343:74">= <expr pos:start="343:36" pos:end="343:74"><name pos:start="343:36" pos:end="343:38">dur</name> <operator pos:start="343:40" pos:end="343:40">-</operator> <operator pos:start="343:42" pos:end="343:42">(</operator><name pos:start="343:43" pos:end="343:48">double</name><operator pos:start="343:49" pos:end="343:49">)</operator><name pos:start="343:50" pos:end="343:54">ticks</name><operator pos:start="343:55" pos:end="343:55">*</operator><literal type="number" pos:start="343:56" pos:end="343:59">1001</literal><operator pos:start="343:60" pos:end="343:60">*</operator><literal type="number" pos:start="343:61" pos:end="343:62">12</literal> <operator pos:start="343:64" pos:end="343:64">/</operator> <name pos:start="343:66" pos:end="343:74">framerate</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="345:21" pos:end="345:63"><expr pos:start="345:21" pos:end="345:62"><name pos:start="345:21" pos:end="345:47"><name pos:start="345:21" pos:end="345:22">st</name><operator pos:start="345:23" pos:end="345:24">-&gt;</operator><name pos:start="345:25" pos:end="345:28">info</name><operator pos:start="345:29" pos:end="345:30">-&gt;</operator><name pos:start="345:31" pos:end="345:44">duration_error</name><index pos:start="345:45" pos:end="345:47">[<expr pos:start="345:46" pos:end="345:46"><name pos:start="345:46" pos:end="345:46">i</name></expr>]</index></name> <operator pos:start="345:49" pos:end="345:50">+=</operator> <name pos:start="345:52" pos:end="345:56">error</name><operator pos:start="345:57" pos:end="345:57">*</operator><name pos:start="345:58" pos:end="345:62">error</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="349:17" pos:end="349:43"><expr pos:start="349:17" pos:end="349:42"><name pos:start="349:17" pos:end="349:40"><name pos:start="349:17" pos:end="349:18">st</name><operator pos:start="349:19" pos:end="349:20">-&gt;</operator><name pos:start="349:21" pos:end="349:24">info</name><operator pos:start="349:25" pos:end="349:26">-&gt;</operator><name pos:start="349:27" pos:end="349:40">duration_count</name></name><operator pos:start="349:41" pos:end="349:42">++</operator></expr>;</expr_stmt>

                <comment type="line" pos:start="351:17" pos:end="351:80">// ignore the first 4 values, they might have some random jitter</comment>

                <if_stmt pos:start="353:17" pos:end="355:86"><if pos:start="353:17" pos:end="355:86">if <condition pos:start="353:20" pos:end="353:49">(<expr pos:start="353:21" pos:end="353:48"><name pos:start="353:21" pos:end="353:44"><name pos:start="353:21" pos:end="353:22">st</name><operator pos:start="353:23" pos:end="353:24">-&gt;</operator><name pos:start="353:25" pos:end="353:28">info</name><operator pos:start="353:29" pos:end="353:30">-&gt;</operator><name pos:start="353:31" pos:end="353:44">duration_count</name></name> <operator pos:start="353:46" pos:end="353:46">&gt;</operator> <literal type="number" pos:start="353:48" pos:end="353:48">3</literal></expr>)</condition><block type="pseudo" pos:start="355:21" pos:end="355:86"><block_content pos:start="355:21" pos:end="355:86">

                    <expr_stmt pos:start="355:21" pos:end="355:86"><expr pos:start="355:21" pos:end="355:85"><name pos:start="355:21" pos:end="355:42"><name pos:start="355:21" pos:end="355:22">st</name><operator pos:start="355:23" pos:end="355:24">-&gt;</operator><name pos:start="355:25" pos:end="355:28">info</name><operator pos:start="355:29" pos:end="355:30">-&gt;</operator><name pos:start="355:31" pos:end="355:42">duration_gcd</name></name> <operator pos:start="355:44" pos:end="355:44">=</operator> <call pos:start="355:46" pos:end="355:85"><name pos:start="355:46" pos:end="355:51">av_gcd</name><argument_list pos:start="355:52" pos:end="355:85">(<argument pos:start="355:53" pos:end="355:74"><expr pos:start="355:53" pos:end="355:74"><name pos:start="355:53" pos:end="355:74"><name pos:start="355:53" pos:end="355:54">st</name><operator pos:start="355:55" pos:end="355:56">-&gt;</operator><name pos:start="355:57" pos:end="355:60">info</name><operator pos:start="355:61" pos:end="355:62">-&gt;</operator><name pos:start="355:63" pos:end="355:74">duration_gcd</name></name></expr></argument>, <argument pos:start="355:77" pos:end="355:84"><expr pos:start="355:77" pos:end="355:84"><name pos:start="355:77" pos:end="355:84">duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="359:13" pos:end="361:46"><if pos:start="359:13" pos:end="361:46">if <condition pos:start="359:16" pos:end="359:72">(<expr pos:start="359:17" pos:end="359:71"><name pos:start="359:17" pos:end="359:20">last</name> <operator pos:start="359:22" pos:end="359:23">==</operator> <name pos:start="359:25" pos:end="359:38">AV_NOPTS_VALUE</name> <operator pos:start="359:40" pos:end="359:41">||</operator> <name pos:start="359:43" pos:end="359:66"><name pos:start="359:43" pos:end="359:44">st</name><operator pos:start="359:45" pos:end="359:46">-&gt;</operator><name pos:start="359:47" pos:end="359:50">info</name><operator pos:start="359:51" pos:end="359:52">-&gt;</operator><name pos:start="359:53" pos:end="359:66">duration_count</name></name> <operator pos:start="359:68" pos:end="359:69">&lt;=</operator> <literal type="number" pos:start="359:71" pos:end="359:71">1</literal></expr>)</condition><block type="pseudo" pos:start="361:17" pos:end="361:46"><block_content pos:start="361:17" pos:end="361:46">

                <expr_stmt pos:start="361:17" pos:end="361:46"><expr pos:start="361:17" pos:end="361:45"><name pos:start="361:17" pos:end="361:34"><name pos:start="361:17" pos:end="361:18">st</name><operator pos:start="361:19" pos:end="361:20">-&gt;</operator><name pos:start="361:21" pos:end="361:24">info</name><operator pos:start="361:25" pos:end="361:26">-&gt;</operator><name pos:start="361:27" pos:end="361:34">last_dts</name></name> <operator pos:start="361:36" pos:end="361:36">=</operator> <name pos:start="361:38" pos:end="361:45"><name pos:start="361:38" pos:end="361:40">pkt</name><operator pos:start="361:41" pos:end="361:42">-&gt;</operator><name pos:start="361:43" pos:end="361:45">dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="365:9" pos:end="385:9"><if pos:start="365:9" pos:end="385:9">if<condition pos:start="365:11" pos:end="365:76">(<expr pos:start="365:12" pos:end="365:75"><name pos:start="365:12" pos:end="365:21"><name pos:start="365:12" pos:end="365:13">st</name><operator pos:start="365:14" pos:end="365:15">-&gt;</operator><name pos:start="365:16" pos:end="365:21">parser</name></name> <operator pos:start="365:23" pos:end="365:24">&amp;&amp;</operator> <name pos:start="365:26" pos:end="365:50"><name pos:start="365:26" pos:end="365:27">st</name><operator pos:start="365:28" pos:end="365:29">-&gt;</operator><name pos:start="365:30" pos:end="365:35">parser</name><operator pos:start="365:36" pos:end="365:37">-&gt;</operator><name pos:start="365:38" pos:end="365:43">parser</name><operator pos:start="365:44" pos:end="365:45">-&gt;</operator><name pos:start="365:46" pos:end="365:50">split</name></name> <operator pos:start="365:52" pos:end="365:53">&amp;&amp;</operator> <operator pos:start="365:55" pos:end="365:55">!</operator><name pos:start="365:56" pos:end="365:75"><name pos:start="365:56" pos:end="365:57">st</name><operator pos:start="365:58" pos:end="365:59">-&gt;</operator><name pos:start="365:60" pos:end="365:64">codec</name><operator pos:start="365:65" pos:end="365:66">-&gt;</operator><name pos:start="365:67" pos:end="365:75">extradata</name></name></expr>)</condition><block pos:start="365:77" pos:end="385:9">{<block_content pos:start="367:13" pos:end="383:13">

            <decl_stmt pos:start="367:13" pos:end="367:78"><decl pos:start="367:13" pos:end="367:77"><type pos:start="367:13" pos:end="367:15"><name pos:start="367:13" pos:end="367:15">int</name></type> <name pos:start="367:17" pos:end="367:17">i</name><init pos:start="367:18" pos:end="367:77">= <expr pos:start="367:20" pos:end="367:77"><call pos:start="367:20" pos:end="367:77"><name pos:start="367:20" pos:end="367:44"><name pos:start="367:20" pos:end="367:21">st</name><operator pos:start="367:22" pos:end="367:23">-&gt;</operator><name pos:start="367:24" pos:end="367:29">parser</name><operator pos:start="367:30" pos:end="367:31">-&gt;</operator><name pos:start="367:32" pos:end="367:37">parser</name><operator pos:start="367:38" pos:end="367:39">-&gt;</operator><name pos:start="367:40" pos:end="367:44">split</name></name><argument_list pos:start="367:45" pos:end="367:77">(<argument pos:start="367:46" pos:end="367:54"><expr pos:start="367:46" pos:end="367:54"><name pos:start="367:46" pos:end="367:54"><name pos:start="367:46" pos:end="367:47">st</name><operator pos:start="367:48" pos:end="367:49">-&gt;</operator><name pos:start="367:50" pos:end="367:54">codec</name></name></expr></argument>, <argument pos:start="367:57" pos:end="367:65"><expr pos:start="367:57" pos:end="367:65"><name pos:start="367:57" pos:end="367:65"><name pos:start="367:57" pos:end="367:59">pkt</name><operator pos:start="367:60" pos:end="367:61">-&gt;</operator><name pos:start="367:62" pos:end="367:65">data</name></name></expr></argument>, <argument pos:start="367:68" pos:end="367:76"><expr pos:start="367:68" pos:end="367:76"><name pos:start="367:68" pos:end="367:76"><name pos:start="367:68" pos:end="367:70">pkt</name><operator pos:start="367:71" pos:end="367:72">-&gt;</operator><name pos:start="367:73" pos:end="367:76">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="369:13" pos:end="383:13"><if pos:start="369:13" pos:end="383:13">if <condition pos:start="369:16" pos:end="369:51">(<expr pos:start="369:17" pos:end="369:50"><name pos:start="369:17" pos:end="369:17">i</name> <operator pos:start="369:19" pos:end="369:19">&gt;</operator> <literal type="number" pos:start="369:21" pos:end="369:21">0</literal> <operator pos:start="369:23" pos:end="369:24">&amp;&amp;</operator> <name pos:start="369:26" pos:end="369:26">i</name> <operator pos:start="369:28" pos:end="369:28">&lt;</operator> <name pos:start="369:30" pos:end="369:50">FF_MAX_EXTRADATA_SIZE</name></expr>)</condition> <block pos:start="369:53" pos:end="383:13">{<block_content pos:start="371:17" pos:end="381:82">

                <expr_stmt pos:start="371:17" pos:end="371:45"><expr pos:start="371:17" pos:end="371:44"><name pos:start="371:17" pos:end="371:41"><name pos:start="371:17" pos:end="371:18">st</name><operator pos:start="371:19" pos:end="371:20">-&gt;</operator><name pos:start="371:21" pos:end="371:25">codec</name><operator pos:start="371:26" pos:end="371:27">-&gt;</operator><name pos:start="371:28" pos:end="371:41">extradata_size</name></name><operator pos:start="371:42" pos:end="371:42">=</operator> <name pos:start="371:44" pos:end="371:44">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:106"><expr pos:start="373:17" pos:end="373:105"><name pos:start="373:17" pos:end="373:36"><name pos:start="373:17" pos:end="373:18">st</name><operator pos:start="373:19" pos:end="373:20">-&gt;</operator><name pos:start="373:21" pos:end="373:25">codec</name><operator pos:start="373:26" pos:end="373:27">-&gt;</operator><name pos:start="373:28" pos:end="373:36">extradata</name></name><operator pos:start="373:37" pos:end="373:37">=</operator> <call pos:start="373:39" pos:end="373:105"><name pos:start="373:39" pos:end="373:47">av_malloc</name><argument_list pos:start="373:48" pos:end="373:105">(<argument pos:start="373:49" pos:end="373:104"><expr pos:start="373:49" pos:end="373:104"><name pos:start="373:49" pos:end="373:73"><name pos:start="373:49" pos:end="373:50">st</name><operator pos:start="373:51" pos:end="373:52">-&gt;</operator><name pos:start="373:53" pos:end="373:57">codec</name><operator pos:start="373:58" pos:end="373:59">-&gt;</operator><name pos:start="373:60" pos:end="373:73">extradata_size</name></name> <operator pos:start="373:75" pos:end="373:75">+</operator> <name pos:start="373:77" pos:end="373:104">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="375:17" pos:end="377:43"><if pos:start="375:17" pos:end="377:43">if <condition pos:start="375:20" pos:end="375:42">(<expr pos:start="375:21" pos:end="375:41"><operator pos:start="375:21" pos:end="375:21">!</operator><name pos:start="375:22" pos:end="375:41"><name pos:start="375:22" pos:end="375:23">st</name><operator pos:start="375:24" pos:end="375:25">-&gt;</operator><name pos:start="375:26" pos:end="375:30">codec</name><operator pos:start="375:31" pos:end="375:32">-&gt;</operator><name pos:start="375:33" pos:end="375:41">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="377:21" pos:end="377:43"><block_content pos:start="377:21" pos:end="377:43">

                    <return pos:start="377:21" pos:end="377:43">return <expr pos:start="377:28" pos:end="377:42"><call pos:start="377:28" pos:end="377:42"><name pos:start="377:28" pos:end="377:34">AVERROR</name><argument_list pos:start="377:35" pos:end="377:42">(<argument pos:start="377:36" pos:end="377:41"><expr pos:start="377:36" pos:end="377:41"><name pos:start="377:36" pos:end="377:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:83"><expr pos:start="379:17" pos:end="379:82"><call pos:start="379:17" pos:end="379:82"><name pos:start="379:17" pos:end="379:22">memcpy</name><argument_list pos:start="379:23" pos:end="379:82">(<argument pos:start="379:24" pos:end="379:43"><expr pos:start="379:24" pos:end="379:43"><name pos:start="379:24" pos:end="379:43"><name pos:start="379:24" pos:end="379:25">st</name><operator pos:start="379:26" pos:end="379:27">-&gt;</operator><name pos:start="379:28" pos:end="379:32">codec</name><operator pos:start="379:33" pos:end="379:34">-&gt;</operator><name pos:start="379:35" pos:end="379:43">extradata</name></name></expr></argument>, <argument pos:start="379:46" pos:end="379:54"><expr pos:start="379:46" pos:end="379:54"><name pos:start="379:46" pos:end="379:54"><name pos:start="379:46" pos:end="379:48">pkt</name><operator pos:start="379:49" pos:end="379:50">-&gt;</operator><name pos:start="379:51" pos:end="379:54">data</name></name></expr></argument>, <argument pos:start="379:57" pos:end="379:81"><expr pos:start="379:57" pos:end="379:81"><name pos:start="379:57" pos:end="379:81"><name pos:start="379:57" pos:end="379:58">st</name><operator pos:start="379:59" pos:end="379:60">-&gt;</operator><name pos:start="379:61" pos:end="379:65">codec</name><operator pos:start="379:66" pos:end="379:67">-&gt;</operator><name pos:start="379:68" pos:end="379:81">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:82"><expr pos:start="381:17" pos:end="381:81"><call pos:start="381:17" pos:end="381:81"><name pos:start="381:17" pos:end="381:22">memset</name><argument_list pos:start="381:23" pos:end="381:81">(<argument pos:start="381:24" pos:end="381:47"><expr pos:start="381:24" pos:end="381:47"><name pos:start="381:24" pos:end="381:43"><name pos:start="381:24" pos:end="381:25">st</name><operator pos:start="381:26" pos:end="381:27">-&gt;</operator><name pos:start="381:28" pos:end="381:32">codec</name><operator pos:start="381:33" pos:end="381:34">-&gt;</operator><name pos:start="381:35" pos:end="381:43">extradata</name></name> <operator pos:start="381:45" pos:end="381:45">+</operator> <name pos:start="381:47" pos:end="381:47">i</name></expr></argument>, <argument pos:start="381:50" pos:end="381:50"><expr pos:start="381:50" pos:end="381:50"><literal type="number" pos:start="381:50" pos:end="381:50">0</literal></expr></argument>, <argument pos:start="381:53" pos:end="381:80"><expr pos:start="381:53" pos:end="381:80"><name pos:start="381:53" pos:end="381:80">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="389:9" pos:end="405:10">/* if still no information, we try to open the codec and to

           decompress the frame. We try to avoid that in most cases as

           it takes longer and uses more memory. For MPEG-4, we need to

           decompress for QuickTime.



           If CODEC_CAP_CHANNEL_CONF is set this will force decoding of at

           least one frame of codec data, this makes sure the codec initializes

           the channel configuration and does not only trust the values from the container.

        */</comment>

        <expr_stmt pos:start="407:9" pos:end="407:90"><expr pos:start="407:9" pos:end="407:89"><call pos:start="407:9" pos:end="407:89"><name pos:start="407:9" pos:end="407:24">try_decode_frame</name><argument_list pos:start="407:25" pos:end="407:89">(<argument pos:start="407:26" pos:end="407:27"><expr pos:start="407:26" pos:end="407:27"><name pos:start="407:26" pos:end="407:27">st</name></expr></argument>, <argument pos:start="407:30" pos:end="407:32"><expr pos:start="407:30" pos:end="407:32"><name pos:start="407:30" pos:end="407:32">pkt</name></expr></argument>, <argument pos:start="407:35" pos:end="407:88"><expr pos:start="407:35" pos:end="407:88"><ternary pos:start="407:35" pos:end="407:88"><condition pos:start="407:35" pos:end="407:69"><expr pos:start="407:35" pos:end="407:67"><operator pos:start="407:35" pos:end="407:35">(</operator><name pos:start="407:36" pos:end="407:42">options</name> <operator pos:start="407:44" pos:end="407:45">&amp;&amp;</operator> <name pos:start="407:47" pos:end="407:47">i</name> <operator pos:start="407:49" pos:end="407:49">&lt;</operator> <name pos:start="407:51" pos:end="407:65">orig_nb_streams</name> <operator pos:start="407:67" pos:end="407:67">)</operator></expr> ?</condition><then pos:start="407:71" pos:end="407:81"> <expr pos:start="407:71" pos:end="407:81"><operator pos:start="407:71" pos:end="407:71">&amp;</operator><name pos:start="407:72" pos:end="407:81"><name pos:start="407:72" pos:end="407:78">options</name><index pos:start="407:79" pos:end="407:81">[<expr pos:start="407:80" pos:end="407:80"><name pos:start="407:80" pos:end="407:80">i</name></expr>]</index></name></expr> </then><else pos:start="407:83" pos:end="407:88">: <expr pos:start="407:85" pos:end="407:88"><name pos:start="407:85" pos:end="407:88">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="411:9" pos:end="411:35"><expr pos:start="411:9" pos:end="411:34"><name pos:start="411:9" pos:end="411:32"><name pos:start="411:9" pos:end="411:10">st</name><operator pos:start="411:11" pos:end="411:12">-&gt;</operator><name pos:start="411:13" pos:end="411:32">codec_info_nb_frames</name></name><operator pos:start="411:33" pos:end="411:34">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:16"><expr pos:start="413:9" pos:end="413:15"><name pos:start="413:9" pos:end="413:13">count</name><operator pos:start="413:14" pos:end="413:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="line" pos:start="419:5" pos:end="419:59">// close codecs which were opened in try_decode_frame()</comment>

    <for pos:start="421:5" pos:end="429:5">for<control pos:start="421:8" pos:end="421:33">(<init pos:start="421:9" pos:end="421:12"><expr pos:start="421:9" pos:end="421:11"><name pos:start="421:9" pos:end="421:9">i</name><operator pos:start="421:10" pos:end="421:10">=</operator><literal type="number" pos:start="421:11" pos:end="421:11">0</literal></expr>;</init><condition pos:start="421:13" pos:end="421:29"><expr pos:start="421:13" pos:end="421:28"><name pos:start="421:13" pos:end="421:13">i</name><operator pos:start="421:14" pos:end="421:14">&lt;</operator><name pos:start="421:15" pos:end="421:28"><name pos:start="421:15" pos:end="421:16">ic</name><operator pos:start="421:17" pos:end="421:18">-&gt;</operator><name pos:start="421:19" pos:end="421:28">nb_streams</name></name></expr>;</condition><incr pos:start="421:30" pos:end="421:32"><expr pos:start="421:30" pos:end="421:32"><name pos:start="421:30" pos:end="421:30">i</name><operator pos:start="421:31" pos:end="421:32">++</operator></expr></incr>)</control> <block pos:start="421:35" pos:end="429:5">{<block_content pos:start="423:9" pos:end="427:37">

        <expr_stmt pos:start="423:9" pos:end="423:28"><expr pos:start="423:9" pos:end="423:27"><name pos:start="423:9" pos:end="423:10">st</name> <operator pos:start="423:12" pos:end="423:12">=</operator> <name pos:start="423:14" pos:end="423:27"><name pos:start="423:14" pos:end="423:15">ic</name><operator pos:start="423:16" pos:end="423:17">-&gt;</operator><name pos:start="423:18" pos:end="423:24">streams</name><index pos:start="423:25" pos:end="423:27">[<expr pos:start="423:26" pos:end="423:26"><name pos:start="423:26" pos:end="423:26">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="425:9" pos:end="427:37"><if pos:start="425:9" pos:end="427:37">if<condition pos:start="425:11" pos:end="425:28">(<expr pos:start="425:12" pos:end="425:27"><name pos:start="425:12" pos:end="425:27"><name pos:start="425:12" pos:end="425:13">st</name><operator pos:start="425:14" pos:end="425:15">-&gt;</operator><name pos:start="425:16" pos:end="425:20">codec</name><operator pos:start="425:21" pos:end="425:22">-&gt;</operator><name pos:start="425:23" pos:end="425:27">codec</name></name></expr>)</condition><block type="pseudo" pos:start="427:13" pos:end="427:37"><block_content pos:start="427:13" pos:end="427:37">

            <expr_stmt pos:start="427:13" pos:end="427:37"><expr pos:start="427:13" pos:end="427:36"><call pos:start="427:13" pos:end="427:36"><name pos:start="427:13" pos:end="427:25">avcodec_close</name><argument_list pos:start="427:26" pos:end="427:36">(<argument pos:start="427:27" pos:end="427:35"><expr pos:start="427:27" pos:end="427:35"><name pos:start="427:27" pos:end="427:35"><name pos:start="427:27" pos:end="427:28">st</name><operator pos:start="427:29" pos:end="427:30">-&gt;</operator><name pos:start="427:31" pos:end="427:35">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <for pos:start="431:5" pos:end="553:5">for<control pos:start="431:8" pos:end="431:33">(<init pos:start="431:9" pos:end="431:12"><expr pos:start="431:9" pos:end="431:11"><name pos:start="431:9" pos:end="431:9">i</name><operator pos:start="431:10" pos:end="431:10">=</operator><literal type="number" pos:start="431:11" pos:end="431:11">0</literal></expr>;</init><condition pos:start="431:13" pos:end="431:29"><expr pos:start="431:13" pos:end="431:28"><name pos:start="431:13" pos:end="431:13">i</name><operator pos:start="431:14" pos:end="431:14">&lt;</operator><name pos:start="431:15" pos:end="431:28"><name pos:start="431:15" pos:end="431:16">ic</name><operator pos:start="431:17" pos:end="431:18">-&gt;</operator><name pos:start="431:19" pos:end="431:28">nb_streams</name></name></expr>;</condition><incr pos:start="431:30" pos:end="431:32"><expr pos:start="431:30" pos:end="431:32"><name pos:start="431:30" pos:end="431:30">i</name><operator pos:start="431:31" pos:end="431:32">++</operator></expr></incr>)</control> <block pos:start="431:35" pos:end="553:5">{<block_content pos:start="433:9" pos:end="551:9">

        <expr_stmt pos:start="433:9" pos:end="433:28"><expr pos:start="433:9" pos:end="433:27"><name pos:start="433:9" pos:end="433:10">st</name> <operator pos:start="433:12" pos:end="433:12">=</operator> <name pos:start="433:14" pos:end="433:27"><name pos:start="433:14" pos:end="433:15">ic</name><operator pos:start="433:16" pos:end="433:17">-&gt;</operator><name pos:start="433:18" pos:end="433:24">streams</name><index pos:start="433:25" pos:end="433:27">[<expr pos:start="433:26" pos:end="433:26"><name pos:start="433:26" pos:end="433:26">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="435:9" pos:end="441:87"><if pos:start="435:9" pos:end="441:87">if <condition pos:start="435:12" pos:end="435:99">(<expr pos:start="435:13" pos:end="435:98"><name pos:start="435:13" pos:end="435:36"><name pos:start="435:13" pos:end="435:14">st</name><operator pos:start="435:15" pos:end="435:16">-&gt;</operator><name pos:start="435:17" pos:end="435:36">codec_info_nb_frames</name></name><operator pos:start="435:37" pos:end="435:37">&gt;</operator><literal type="number" pos:start="435:38" pos:end="435:38">2</literal> <operator pos:start="435:40" pos:end="435:41">&amp;&amp;</operator> <operator pos:start="435:43" pos:end="435:43">!</operator><name pos:start="435:44" pos:end="435:65"><name pos:start="435:44" pos:end="435:45">st</name><operator pos:start="435:46" pos:end="435:47">-&gt;</operator><name pos:start="435:48" pos:end="435:61">avg_frame_rate</name><operator pos:start="435:62" pos:end="435:62">.</operator><name pos:start="435:63" pos:end="435:65">num</name></name> <operator pos:start="435:67" pos:end="435:68">&amp;&amp;</operator> <name pos:start="435:70" pos:end="435:98"><name pos:start="435:70" pos:end="435:71">st</name><operator pos:start="435:72" pos:end="435:73">-&gt;</operator><name pos:start="435:74" pos:end="435:77">info</name><operator pos:start="435:78" pos:end="435:79">-&gt;</operator><name pos:start="435:80" pos:end="435:98">codec_info_duration</name></name></expr>)</condition><block type="pseudo" pos:start="437:13" pos:end="441:87"><block_content pos:start="437:13" pos:end="441:87">

            <expr_stmt pos:start="437:13" pos:end="441:87"><expr pos:start="437:13" pos:end="441:86"><call pos:start="437:13" pos:end="441:86"><name pos:start="437:13" pos:end="437:21">av_reduce</name><argument_list pos:start="437:22" pos:end="441:86">(<argument pos:start="437:23" pos:end="437:45"><expr pos:start="437:23" pos:end="437:45"><operator pos:start="437:23" pos:end="437:23">&amp;</operator><name pos:start="437:24" pos:end="437:45"><name pos:start="437:24" pos:end="437:25">st</name><operator pos:start="437:26" pos:end="437:27">-&gt;</operator><name pos:start="437:28" pos:end="437:41">avg_frame_rate</name><operator pos:start="437:42" pos:end="437:42">.</operator><name pos:start="437:43" pos:end="437:45">num</name></name></expr></argument>, <argument pos:start="437:48" pos:end="437:70"><expr pos:start="437:48" pos:end="437:70"><operator pos:start="437:48" pos:end="437:48">&amp;</operator><name pos:start="437:49" pos:end="437:70"><name pos:start="437:49" pos:end="437:50">st</name><operator pos:start="437:51" pos:end="437:52">-&gt;</operator><name pos:start="437:53" pos:end="437:66">avg_frame_rate</name><operator pos:start="437:67" pos:end="437:67">.</operator><name pos:start="437:68" pos:end="437:70">den</name></name></expr></argument>,

                     <argument pos:start="439:22" pos:end="439:76"><expr pos:start="439:22" pos:end="439:76"><operator pos:start="439:22" pos:end="439:22">(</operator><name pos:start="439:23" pos:end="439:46"><name pos:start="439:23" pos:end="439:24">st</name><operator pos:start="439:25" pos:end="439:26">-&gt;</operator><name pos:start="439:27" pos:end="439:46">codec_info_nb_frames</name></name><operator pos:start="439:47" pos:end="439:47">-</operator><literal type="number" pos:start="439:48" pos:end="439:48">2</literal><operator pos:start="439:49" pos:end="439:49">)</operator><operator pos:start="439:50" pos:end="439:50">*</operator><operator pos:start="439:51" pos:end="439:51">(</operator><name pos:start="439:52" pos:end="439:58">int64_t</name><operator pos:start="439:59" pos:end="439:59">)</operator><name pos:start="439:60" pos:end="439:76"><name pos:start="439:60" pos:end="439:61">st</name><operator pos:start="439:62" pos:end="439:63">-&gt;</operator><name pos:start="439:64" pos:end="439:72">time_base</name><operator pos:start="439:73" pos:end="439:73">.</operator><name pos:start="439:74" pos:end="439:76">den</name></name></expr></argument>,

                      <argument pos:start="441:23" pos:end="441:78"><expr pos:start="441:23" pos:end="441:78"><name pos:start="441:23" pos:end="441:51"><name pos:start="441:23" pos:end="441:24">st</name><operator pos:start="441:25" pos:end="441:26">-&gt;</operator><name pos:start="441:27" pos:end="441:30">info</name><operator pos:start="441:31" pos:end="441:32">-&gt;</operator><name pos:start="441:33" pos:end="441:51">codec_info_duration</name></name><operator pos:start="441:52" pos:end="441:52">*</operator><operator pos:start="441:53" pos:end="441:53">(</operator><name pos:start="441:54" pos:end="441:60">int64_t</name><operator pos:start="441:61" pos:end="441:61">)</operator><name pos:start="441:62" pos:end="441:78"><name pos:start="441:62" pos:end="441:63">st</name><operator pos:start="441:64" pos:end="441:65">-&gt;</operator><name pos:start="441:66" pos:end="441:74">time_base</name><operator pos:start="441:75" pos:end="441:75">.</operator><name pos:start="441:76" pos:end="441:78">num</name></name></expr></argument>, <argument pos:start="441:81" pos:end="441:85"><expr pos:start="441:81" pos:end="441:85"><literal type="number" pos:start="441:81" pos:end="441:85">60000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="443:9" pos:end="551:9"><if pos:start="443:9" pos:end="519:9">if <condition pos:start="443:12" pos:end="443:56">(<expr pos:start="443:13" pos:end="443:55"><name pos:start="443:13" pos:end="443:33"><name pos:start="443:13" pos:end="443:14">st</name><operator pos:start="443:15" pos:end="443:16">-&gt;</operator><name pos:start="443:17" pos:end="443:21">codec</name><operator pos:start="443:22" pos:end="443:23">-&gt;</operator><name pos:start="443:24" pos:end="443:33">codec_type</name></name> <operator pos:start="443:35" pos:end="443:36">==</operator> <name pos:start="443:38" pos:end="443:55">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="443:58" pos:end="519:9">{<block_content pos:start="451:13" pos:end="517:13">

            <comment type="line" pos:start="445:13" pos:end="445:104">// the check for tb_unreliable() is not completely correct, since this is not about handling</comment>

            <comment type="line" pos:start="447:13" pos:end="447:100">// a unreliable/inexact time base, but a time base that is finer than necessary, as e.g.</comment>

            <comment type="line" pos:start="449:13" pos:end="449:34">// ipmovie.c produces.</comment>

            <if_stmt pos:start="451:13" pos:end="453:144"><if pos:start="451:13" pos:end="453:144">if <condition pos:start="451:16" pos:end="451:129">(<expr pos:start="451:17" pos:end="451:128"><call pos:start="451:17" pos:end="451:40"><name pos:start="451:17" pos:end="451:29">tb_unreliable</name><argument_list pos:start="451:30" pos:end="451:40">(<argument pos:start="451:31" pos:end="451:39"><expr pos:start="451:31" pos:end="451:39"><name pos:start="451:31" pos:end="451:39"><name pos:start="451:31" pos:end="451:32">st</name><operator pos:start="451:33" pos:end="451:34">-&gt;</operator><name pos:start="451:35" pos:end="451:39">codec</name></name></expr></argument>)</argument_list></call> <operator pos:start="451:42" pos:end="451:43">&amp;&amp;</operator> <name pos:start="451:45" pos:end="451:68"><name pos:start="451:45" pos:end="451:46">st</name><operator pos:start="451:47" pos:end="451:48">-&gt;</operator><name pos:start="451:49" pos:end="451:52">info</name><operator pos:start="451:53" pos:end="451:54">-&gt;</operator><name pos:start="451:55" pos:end="451:68">duration_count</name></name> <operator pos:start="451:70" pos:end="451:70">&gt;</operator> <literal type="number" pos:start="451:72" pos:end="451:73">15</literal> <operator pos:start="451:75" pos:end="451:76">&amp;&amp;</operator> <name pos:start="451:78" pos:end="451:99"><name pos:start="451:78" pos:end="451:79">st</name><operator pos:start="451:80" pos:end="451:81">-&gt;</operator><name pos:start="451:82" pos:end="451:85">info</name><operator pos:start="451:86" pos:end="451:87">-&gt;</operator><name pos:start="451:88" pos:end="451:99">duration_gcd</name></name> <operator pos:start="451:101" pos:end="451:101">&gt;</operator> <literal type="number" pos:start="451:103" pos:end="451:103">1</literal> <operator pos:start="451:105" pos:end="451:106">&amp;&amp;</operator> <operator pos:start="451:108" pos:end="451:108">!</operator><name pos:start="451:109" pos:end="451:128"><name pos:start="451:109" pos:end="451:110">st</name><operator pos:start="451:111" pos:end="451:112">-&gt;</operator><name pos:start="451:113" pos:end="451:124">r_frame_rate</name><operator pos:start="451:125" pos:end="451:125">.</operator><name pos:start="451:126" pos:end="451:128">num</name></name></expr>)</condition><block type="pseudo" pos:start="453:17" pos:end="453:144"><block_content pos:start="453:17" pos:end="453:144">

                <expr_stmt pos:start="453:17" pos:end="453:144"><expr pos:start="453:17" pos:end="453:143"><call pos:start="453:17" pos:end="453:143"><name pos:start="453:17" pos:end="453:25">av_reduce</name><argument_list pos:start="453:26" pos:end="453:143">(<argument pos:start="453:27" pos:end="453:47"><expr pos:start="453:27" pos:end="453:47"><operator pos:start="453:27" pos:end="453:27">&amp;</operator><name pos:start="453:28" pos:end="453:47"><name pos:start="453:28" pos:end="453:29">st</name><operator pos:start="453:30" pos:end="453:31">-&gt;</operator><name pos:start="453:32" pos:end="453:43">r_frame_rate</name><operator pos:start="453:44" pos:end="453:44">.</operator><name pos:start="453:45" pos:end="453:47">num</name></name></expr></argument>, <argument pos:start="453:50" pos:end="453:70"><expr pos:start="453:50" pos:end="453:70"><operator pos:start="453:50" pos:end="453:50">&amp;</operator><name pos:start="453:51" pos:end="453:70"><name pos:start="453:51" pos:end="453:52">st</name><operator pos:start="453:53" pos:end="453:54">-&gt;</operator><name pos:start="453:55" pos:end="453:66">r_frame_rate</name><operator pos:start="453:67" pos:end="453:67">.</operator><name pos:start="453:68" pos:end="453:70">den</name></name></expr></argument>, <argument pos:start="453:73" pos:end="453:89"><expr pos:start="453:73" pos:end="453:89"><name pos:start="453:73" pos:end="453:89"><name pos:start="453:73" pos:end="453:74">st</name><operator pos:start="453:75" pos:end="453:76">-&gt;</operator><name pos:start="453:77" pos:end="453:85">time_base</name><operator pos:start="453:86" pos:end="453:86">.</operator><name pos:start="453:87" pos:end="453:89">den</name></name></expr></argument>, <argument pos:start="453:92" pos:end="453:133"><expr pos:start="453:92" pos:end="453:133"><name pos:start="453:92" pos:end="453:108"><name pos:start="453:92" pos:end="453:93">st</name><operator pos:start="453:94" pos:end="453:95">-&gt;</operator><name pos:start="453:96" pos:end="453:104">time_base</name><operator pos:start="453:105" pos:end="453:105">.</operator><name pos:start="453:106" pos:end="453:108">num</name></name> <operator pos:start="453:110" pos:end="453:110">*</operator> <name pos:start="453:112" pos:end="453:133"><name pos:start="453:112" pos:end="453:113">st</name><operator pos:start="453:114" pos:end="453:115">-&gt;</operator><name pos:start="453:116" pos:end="453:119">info</name><operator pos:start="453:120" pos:end="453:121">-&gt;</operator><name pos:start="453:122" pos:end="453:133">duration_gcd</name></name></expr></argument>, <argument pos:start="453:136" pos:end="453:142"><expr pos:start="453:136" pos:end="453:142"><name pos:start="453:136" pos:end="453:142">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="455:13" pos:end="495:13"><if pos:start="455:13" pos:end="495:13">if <condition pos:start="455:16" pos:end="461:102">(<expr pos:start="455:17" pos:end="457:42"><name pos:start="455:17" pos:end="455:40"><name pos:start="455:17" pos:end="455:18">st</name><operator pos:start="455:19" pos:end="455:20">-&gt;</operator><name pos:start="455:21" pos:end="455:24">info</name><operator pos:start="455:25" pos:end="455:26">-&gt;</operator><name pos:start="455:27" pos:end="455:40">duration_count</name></name> <operator pos:start="455:42" pos:end="455:43">&amp;&amp;</operator> <operator pos:start="455:45" pos:end="455:45">!</operator><name pos:start="455:46" pos:end="455:65"><name pos:start="455:46" pos:end="455:47">st</name><operator pos:start="455:48" pos:end="455:49">-&gt;</operator><name pos:start="455:50" pos:end="455:61">r_frame_rate</name><operator pos:start="455:62" pos:end="455:62">.</operator><name pos:start="455:63" pos:end="455:65">num</name></name>

               <operator pos:start="457:16" pos:end="457:17">&amp;&amp;</operator> <call pos:start="457:19" pos:end="457:42"><name pos:start="457:19" pos:end="457:31">tb_unreliable</name><argument_list pos:start="457:32" pos:end="457:42">(<argument pos:start="457:33" pos:end="457:41"><expr pos:start="457:33" pos:end="457:41"><name pos:start="457:33" pos:end="457:41"><name pos:start="457:33" pos:end="457:34">st</name><operator pos:start="457:35" pos:end="457:36">-&gt;</operator><name pos:start="457:37" pos:end="457:41">codec</name></name></expr></argument>)</argument_list></call></expr> <comment type="block" pos:start="457:44" pos:end="461:101">/*&amp;&amp;

               //FIXME we should not special-case MPEG-2, but this needs testing with non-MPEG-2 ...

               st-&gt;time_base.num*duration_sum[i]/st-&gt;info-&gt;duration_count*101LL &gt; st-&gt;time_base.den*/</comment>)</condition><block pos:start="461:103" pos:end="495:13">{<block_content pos:start="463:17" pos:end="493:99">

                <decl_stmt pos:start="463:17" pos:end="463:28"><decl pos:start="463:17" pos:end="463:27"><type pos:start="463:17" pos:end="463:19"><name pos:start="463:17" pos:end="463:19">int</name></type> <name pos:start="463:21" pos:end="463:23">num</name> <init pos:start="463:25" pos:end="463:27">= <expr pos:start="463:27" pos:end="463:27"><literal type="number" pos:start="463:27" pos:end="463:27">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="465:17" pos:end="465:59"><decl pos:start="465:17" pos:end="465:58"><type pos:start="465:17" pos:end="465:22"><name pos:start="465:17" pos:end="465:22">double</name></type> <name pos:start="465:24" pos:end="465:33">best_error</name><init pos:start="465:34" pos:end="465:58">= <expr pos:start="465:36" pos:end="465:58"><literal type="number" pos:start="465:36" pos:end="465:36">2</literal><operator pos:start="465:37" pos:end="465:37">*</operator><call pos:start="465:38" pos:end="465:58"><name pos:start="465:38" pos:end="465:43">av_q2d</name><argument_list pos:start="465:44" pos:end="465:58">(<argument pos:start="465:45" pos:end="465:57"><expr pos:start="465:45" pos:end="465:57"><name pos:start="465:45" pos:end="465:57"><name pos:start="465:45" pos:end="465:46">st</name><operator pos:start="465:47" pos:end="465:48">-&gt;</operator><name pos:start="465:49" pos:end="465:57">time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="467:17" pos:end="467:87"><expr pos:start="467:17" pos:end="467:86"><name pos:start="467:17" pos:end="467:26">best_error</name> <operator pos:start="467:28" pos:end="467:28">=</operator> <name pos:start="467:30" pos:end="467:39">best_error</name><operator pos:start="467:40" pos:end="467:40">*</operator><name pos:start="467:41" pos:end="467:50">best_error</name><operator pos:start="467:51" pos:end="467:51">*</operator><name pos:start="467:52" pos:end="467:75"><name pos:start="467:52" pos:end="467:53">st</name><operator pos:start="467:54" pos:end="467:55">-&gt;</operator><name pos:start="467:56" pos:end="467:59">info</name><operator pos:start="467:60" pos:end="467:61">-&gt;</operator><name pos:start="467:62" pos:end="467:75">duration_count</name></name><operator pos:start="467:76" pos:end="467:76">*</operator><literal type="number" pos:start="467:77" pos:end="467:80">1000</literal><operator pos:start="467:81" pos:end="467:81">*</operator><literal type="number" pos:start="467:82" pos:end="467:83">12</literal><operator pos:start="467:84" pos:end="467:84">*</operator><literal type="number" pos:start="467:85" pos:end="467:86">30</literal></expr>;</expr_stmt>



                <for pos:start="471:17" pos:end="487:17">for <control pos:start="471:21" pos:end="471:74">(<init pos:start="471:22" pos:end="471:25"><expr pos:start="471:22" pos:end="471:24"><name pos:start="471:22" pos:end="471:22">j</name><operator pos:start="471:23" pos:end="471:23">=</operator><literal type="number" pos:start="471:24" pos:end="471:24">1</literal></expr>;</init> <condition pos:start="471:27" pos:end="471:69"><expr pos:start="471:27" pos:end="471:68"><name pos:start="471:27" pos:end="471:27">j</name><operator pos:start="471:28" pos:end="471:28">&lt;</operator><call pos:start="471:29" pos:end="471:68"><name pos:start="471:29" pos:end="471:42">FF_ARRAY_ELEMS</name><argument_list pos:start="471:43" pos:end="471:68">(<argument pos:start="471:44" pos:end="471:67"><expr pos:start="471:44" pos:end="471:67"><name pos:start="471:44" pos:end="471:67"><name pos:start="471:44" pos:end="471:45">st</name><operator pos:start="471:46" pos:end="471:47">-&gt;</operator><name pos:start="471:48" pos:end="471:51">info</name><operator pos:start="471:52" pos:end="471:53">-&gt;</operator><name pos:start="471:54" pos:end="471:67">duration_error</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="471:71" pos:end="471:73"><expr pos:start="471:71" pos:end="471:73"><name pos:start="471:71" pos:end="471:71">j</name><operator pos:start="471:72" pos:end="471:73">++</operator></expr></incr>)</control> <block pos:start="471:76" pos:end="487:17">{<block_content pos:start="473:21" pos:end="485:21">

                    <decl_stmt pos:start="473:21" pos:end="473:86"><decl pos:start="473:21" pos:end="473:85"><type pos:start="473:21" pos:end="473:26"><name pos:start="473:21" pos:end="473:26">double</name></type> <name pos:start="473:28" pos:end="473:32">error</name> <init pos:start="473:34" pos:end="473:85">= <expr pos:start="473:36" pos:end="473:85"><name pos:start="473:36" pos:end="473:62"><name pos:start="473:36" pos:end="473:37">st</name><operator pos:start="473:38" pos:end="473:39">-&gt;</operator><name pos:start="473:40" pos:end="473:43">info</name><operator pos:start="473:44" pos:end="473:45">-&gt;</operator><name pos:start="473:46" pos:end="473:59">duration_error</name><index pos:start="473:60" pos:end="473:62">[<expr pos:start="473:61" pos:end="473:61"><name pos:start="473:61" pos:end="473:61">j</name></expr>]</index></name> <operator pos:start="473:64" pos:end="473:64">*</operator> <call pos:start="473:66" pos:end="473:85"><name pos:start="473:66" pos:end="473:82">get_std_framerate</name><argument_list pos:start="473:83" pos:end="473:85">(<argument pos:start="473:84" pos:end="473:84"><expr pos:start="473:84" pos:end="473:84"><name pos:start="473:84" pos:end="473:84">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="475:1" pos:end="475:69">//                    if(st-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</comment>

<comment type="line" pos:start="477:1" pos:end="477:105">//                        av_log(NULL, AV_LOG_ERROR, "%f %f\n", get_std_framerate(j) / 12.0/1001, error);</comment>

                    <if_stmt pos:start="479:21" pos:end="485:21"><if pos:start="479:21" pos:end="485:21">if<condition pos:start="479:23" pos:end="479:42">(<expr pos:start="479:24" pos:end="479:41"><name pos:start="479:24" pos:end="479:28">error</name> <operator pos:start="479:30" pos:end="479:30">&lt;</operator> <name pos:start="479:32" pos:end="479:41">best_error</name></expr>)</condition><block pos:start="479:43" pos:end="485:21">{<block_content pos:start="481:25" pos:end="483:51">

                        <expr_stmt pos:start="481:25" pos:end="481:42"><expr pos:start="481:25" pos:end="481:41"><name pos:start="481:25" pos:end="481:34">best_error</name><operator pos:start="481:35" pos:end="481:35">=</operator> <name pos:start="481:37" pos:end="481:41">error</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="483:25" pos:end="483:51"><expr pos:start="483:25" pos:end="483:50"><name pos:start="483:25" pos:end="483:27">num</name> <operator pos:start="483:29" pos:end="483:29">=</operator> <call pos:start="483:31" pos:end="483:50"><name pos:start="483:31" pos:end="483:47">get_std_framerate</name><argument_list pos:start="483:48" pos:end="483:50">(<argument pos:start="483:49" pos:end="483:49"><expr pos:start="483:49" pos:end="483:49"><name pos:start="483:49" pos:end="483:49">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                <comment type="line" pos:start="489:17" pos:end="489:97">// do not increase frame rate by more than 1 % in order to match a standard rate.</comment>

                <if_stmt pos:start="491:17" pos:end="493:99"><if pos:start="491:17" pos:end="493:99">if <condition pos:start="491:20" pos:end="491:110">(<expr pos:start="491:21" pos:end="491:109"><name pos:start="491:21" pos:end="491:23">num</name> <operator pos:start="491:25" pos:end="491:26">&amp;&amp;</operator> <operator pos:start="491:28" pos:end="491:28">(</operator><operator pos:start="491:29" pos:end="491:29">!</operator><name pos:start="491:30" pos:end="491:49"><name pos:start="491:30" pos:end="491:31">st</name><operator pos:start="491:32" pos:end="491:33">-&gt;</operator><name pos:start="491:34" pos:end="491:45">r_frame_rate</name><operator pos:start="491:46" pos:end="491:46">.</operator><name pos:start="491:47" pos:end="491:49">num</name></name> <operator pos:start="491:51" pos:end="491:52">||</operator> <operator pos:start="491:54" pos:end="491:54">(</operator><name pos:start="491:55" pos:end="491:60">double</name><operator pos:start="491:61" pos:end="491:61">)</operator><name pos:start="491:62" pos:end="491:64">num</name><operator pos:start="491:65" pos:end="491:65">/</operator><operator pos:start="491:66" pos:end="491:66">(</operator><literal type="number" pos:start="491:67" pos:end="491:68">12</literal><operator pos:start="491:69" pos:end="491:69">*</operator><literal type="number" pos:start="491:70" pos:end="491:73">1001</literal><operator pos:start="491:74" pos:end="491:74">)</operator> <operator pos:start="491:76" pos:end="491:76">&lt;</operator> <literal type="number" pos:start="491:78" pos:end="491:81">1.01</literal> <operator pos:start="491:83" pos:end="491:83">*</operator> <call pos:start="491:85" pos:end="491:108"><name pos:start="491:85" pos:end="491:90">av_q2d</name><argument_list pos:start="491:91" pos:end="491:108">(<argument pos:start="491:92" pos:end="491:107"><expr pos:start="491:92" pos:end="491:107"><name pos:start="491:92" pos:end="491:107"><name pos:start="491:92" pos:end="491:93">st</name><operator pos:start="491:94" pos:end="491:95">-&gt;</operator><name pos:start="491:96" pos:end="491:107">r_frame_rate</name></name></expr></argument>)</argument_list></call><operator pos:start="491:109" pos:end="491:109">)</operator></expr>)</condition><block type="pseudo" pos:start="493:21" pos:end="493:99"><block_content pos:start="493:21" pos:end="493:99">

                    <expr_stmt pos:start="493:21" pos:end="493:99"><expr pos:start="493:21" pos:end="493:98"><call pos:start="493:21" pos:end="493:98"><name pos:start="493:21" pos:end="493:29">av_reduce</name><argument_list pos:start="493:30" pos:end="493:98">(<argument pos:start="493:31" pos:end="493:51"><expr pos:start="493:31" pos:end="493:51"><operator pos:start="493:31" pos:end="493:31">&amp;</operator><name pos:start="493:32" pos:end="493:51"><name pos:start="493:32" pos:end="493:33">st</name><operator pos:start="493:34" pos:end="493:35">-&gt;</operator><name pos:start="493:36" pos:end="493:47">r_frame_rate</name><operator pos:start="493:48" pos:end="493:48">.</operator><name pos:start="493:49" pos:end="493:51">num</name></name></expr></argument>, <argument pos:start="493:54" pos:end="493:74"><expr pos:start="493:54" pos:end="493:74"><operator pos:start="493:54" pos:end="493:54">&amp;</operator><name pos:start="493:55" pos:end="493:74"><name pos:start="493:55" pos:end="493:56">st</name><operator pos:start="493:57" pos:end="493:58">-&gt;</operator><name pos:start="493:59" pos:end="493:70">r_frame_rate</name><operator pos:start="493:71" pos:end="493:71">.</operator><name pos:start="493:72" pos:end="493:74">den</name></name></expr></argument>, <argument pos:start="493:77" pos:end="493:79"><expr pos:start="493:77" pos:end="493:79"><name pos:start="493:77" pos:end="493:79">num</name></expr></argument>, <argument pos:start="493:82" pos:end="493:88"><expr pos:start="493:82" pos:end="493:88"><literal type="number" pos:start="493:82" pos:end="493:83">12</literal><operator pos:start="493:84" pos:end="493:84">*</operator><literal type="number" pos:start="493:85" pos:end="493:88">1001</literal></expr></argument>, <argument pos:start="493:91" pos:end="493:97"><expr pos:start="493:91" pos:end="493:97"><name pos:start="493:91" pos:end="493:97">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="499:13" pos:end="517:13"><if pos:start="499:13" pos:end="517:13">if <condition pos:start="499:16" pos:end="499:38">(<expr pos:start="499:17" pos:end="499:37"><operator pos:start="499:17" pos:end="499:17">!</operator><name pos:start="499:18" pos:end="499:37"><name pos:start="499:18" pos:end="499:19">st</name><operator pos:start="499:20" pos:end="499:21">-&gt;</operator><name pos:start="499:22" pos:end="499:33">r_frame_rate</name><operator pos:start="499:34" pos:end="499:34">.</operator><name pos:start="499:35" pos:end="499:37">num</name></name></expr>)</condition><block pos:start="499:39" pos:end="517:13">{<block_content pos:start="501:17" pos:end="515:17">

                <if_stmt pos:start="501:17" pos:end="515:17"><if pos:start="501:17" pos:end="509:17">if<condition pos:start="501:19" pos:end="503:106">(    <expr pos:start="501:24" pos:end="503:105"><name pos:start="501:24" pos:end="501:47"><name pos:start="501:24" pos:end="501:25">st</name><operator pos:start="501:26" pos:end="501:27">-&gt;</operator><name pos:start="501:28" pos:end="501:32">codec</name><operator pos:start="501:33" pos:end="501:34">-&gt;</operator><name pos:start="501:35" pos:end="501:43">time_base</name><operator pos:start="501:44" pos:end="501:44">.</operator><name pos:start="501:45" pos:end="501:47">den</name></name> <operator pos:start="501:49" pos:end="501:49">*</operator> <operator pos:start="501:51" pos:end="501:51">(</operator><name pos:start="501:52" pos:end="501:58">int64_t</name><operator pos:start="501:59" pos:end="501:59">)</operator><name pos:start="501:60" pos:end="501:76"><name pos:start="501:60" pos:end="501:61">st</name><operator pos:start="501:62" pos:end="501:63">-&gt;</operator><name pos:start="501:64" pos:end="501:72">time_base</name><operator pos:start="501:73" pos:end="501:73">.</operator><name pos:start="501:74" pos:end="501:76">num</name></name>

                    <operator pos:start="503:21" pos:end="503:22">&lt;=</operator> <name pos:start="503:24" pos:end="503:47"><name pos:start="503:24" pos:end="503:25">st</name><operator pos:start="503:26" pos:end="503:27">-&gt;</operator><name pos:start="503:28" pos:end="503:32">codec</name><operator pos:start="503:33" pos:end="503:34">-&gt;</operator><name pos:start="503:35" pos:end="503:43">time_base</name><operator pos:start="503:44" pos:end="503:44">.</operator><name pos:start="503:45" pos:end="503:47">num</name></name> <operator pos:start="503:49" pos:end="503:49">*</operator> <name pos:start="503:51" pos:end="503:76"><name pos:start="503:51" pos:end="503:52">st</name><operator pos:start="503:53" pos:end="503:54">-&gt;</operator><name pos:start="503:55" pos:end="503:59">codec</name><operator pos:start="503:60" pos:end="503:61">-&gt;</operator><name pos:start="503:62" pos:end="503:76">ticks_per_frame</name></name> <operator pos:start="503:78" pos:end="503:78">*</operator> <operator pos:start="503:80" pos:end="503:80">(</operator><name pos:start="503:81" pos:end="503:87">int64_t</name><operator pos:start="503:88" pos:end="503:88">)</operator><name pos:start="503:89" pos:end="503:105"><name pos:start="503:89" pos:end="503:90">st</name><operator pos:start="503:91" pos:end="503:92">-&gt;</operator><name pos:start="503:93" pos:end="503:101">time_base</name><operator pos:start="503:102" pos:end="503:102">.</operator><name pos:start="503:103" pos:end="503:105">den</name></name></expr>)</condition><block pos:start="503:107" pos:end="509:17">{<block_content pos:start="505:21" pos:end="507:97">

                    <expr_stmt pos:start="505:21" pos:end="505:68"><expr pos:start="505:21" pos:end="505:67"><name pos:start="505:21" pos:end="505:40"><name pos:start="505:21" pos:end="505:22">st</name><operator pos:start="505:23" pos:end="505:24">-&gt;</operator><name pos:start="505:25" pos:end="505:36">r_frame_rate</name><operator pos:start="505:37" pos:end="505:37">.</operator><name pos:start="505:38" pos:end="505:40">num</name></name> <operator pos:start="505:42" pos:end="505:42">=</operator> <name pos:start="505:44" pos:end="505:67"><name pos:start="505:44" pos:end="505:45">st</name><operator pos:start="505:46" pos:end="505:47">-&gt;</operator><name pos:start="505:48" pos:end="505:52">codec</name><operator pos:start="505:53" pos:end="505:54">-&gt;</operator><name pos:start="505:55" pos:end="505:63">time_base</name><operator pos:start="505:64" pos:end="505:64">.</operator><name pos:start="505:65" pos:end="505:67">den</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="507:21" pos:end="507:97"><expr pos:start="507:21" pos:end="507:96"><name pos:start="507:21" pos:end="507:40"><name pos:start="507:21" pos:end="507:22">st</name><operator pos:start="507:23" pos:end="507:24">-&gt;</operator><name pos:start="507:25" pos:end="507:36">r_frame_rate</name><operator pos:start="507:37" pos:end="507:37">.</operator><name pos:start="507:38" pos:end="507:40">den</name></name> <operator pos:start="507:42" pos:end="507:42">=</operator> <name pos:start="507:44" pos:end="507:67"><name pos:start="507:44" pos:end="507:45">st</name><operator pos:start="507:46" pos:end="507:47">-&gt;</operator><name pos:start="507:48" pos:end="507:52">codec</name><operator pos:start="507:53" pos:end="507:54">-&gt;</operator><name pos:start="507:55" pos:end="507:63">time_base</name><operator pos:start="507:64" pos:end="507:64">.</operator><name pos:start="507:65" pos:end="507:67">num</name></name> <operator pos:start="507:69" pos:end="507:69">*</operator> <name pos:start="507:71" pos:end="507:96"><name pos:start="507:71" pos:end="507:72">st</name><operator pos:start="507:73" pos:end="507:74">-&gt;</operator><name pos:start="507:75" pos:end="507:79">codec</name><operator pos:start="507:80" pos:end="507:81">-&gt;</operator><name pos:start="507:82" pos:end="507:96">ticks_per_frame</name></name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="509:18" pos:end="515:17">else<block pos:start="509:22" pos:end="515:17">{<block_content pos:start="511:21" pos:end="513:61">

                    <expr_stmt pos:start="511:21" pos:end="511:61"><expr pos:start="511:21" pos:end="511:60"><name pos:start="511:21" pos:end="511:40"><name pos:start="511:21" pos:end="511:22">st</name><operator pos:start="511:23" pos:end="511:24">-&gt;</operator><name pos:start="511:25" pos:end="511:36">r_frame_rate</name><operator pos:start="511:37" pos:end="511:37">.</operator><name pos:start="511:38" pos:end="511:40">num</name></name> <operator pos:start="511:42" pos:end="511:42">=</operator> <name pos:start="511:44" pos:end="511:60"><name pos:start="511:44" pos:end="511:45">st</name><operator pos:start="511:46" pos:end="511:47">-&gt;</operator><name pos:start="511:48" pos:end="511:56">time_base</name><operator pos:start="511:57" pos:end="511:57">.</operator><name pos:start="511:58" pos:end="511:60">den</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="513:21" pos:end="513:61"><expr pos:start="513:21" pos:end="513:60"><name pos:start="513:21" pos:end="513:40"><name pos:start="513:21" pos:end="513:22">st</name><operator pos:start="513:23" pos:end="513:24">-&gt;</operator><name pos:start="513:25" pos:end="513:36">r_frame_rate</name><operator pos:start="513:37" pos:end="513:37">.</operator><name pos:start="513:38" pos:end="513:40">den</name></name> <operator pos:start="513:42" pos:end="513:42">=</operator> <name pos:start="513:44" pos:end="513:60"><name pos:start="513:44" pos:end="513:45">st</name><operator pos:start="513:46" pos:end="513:47">-&gt;</operator><name pos:start="513:48" pos:end="513:56">time_base</name><operator pos:start="513:57" pos:end="513:57">.</operator><name pos:start="513:58" pos:end="513:60">num</name></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="519:10" pos:end="551:9">else if<condition pos:start="519:17" pos:end="519:61">(<expr pos:start="519:18" pos:end="519:60"><name pos:start="519:18" pos:end="519:38"><name pos:start="519:18" pos:end="519:19">st</name><operator pos:start="519:20" pos:end="519:21">-&gt;</operator><name pos:start="519:22" pos:end="519:26">codec</name><operator pos:start="519:27" pos:end="519:28">-&gt;</operator><name pos:start="519:29" pos:end="519:38">codec_type</name></name> <operator pos:start="519:40" pos:end="519:41">==</operator> <name pos:start="519:43" pos:end="519:60">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="519:63" pos:end="551:9">{<block_content pos:start="521:13" pos:end="549:13">

            <if_stmt pos:start="521:13" pos:end="523:94"><if pos:start="521:13" pos:end="523:94">if<condition pos:start="521:15" pos:end="521:49">(<expr pos:start="521:16" pos:end="521:48"><operator pos:start="521:16" pos:end="521:16">!</operator><name pos:start="521:17" pos:end="521:48"><name pos:start="521:17" pos:end="521:18">st</name><operator pos:start="521:19" pos:end="521:20">-&gt;</operator><name pos:start="521:21" pos:end="521:25">codec</name><operator pos:start="521:26" pos:end="521:27">-&gt;</operator><name pos:start="521:28" pos:end="521:48">bits_per_coded_sample</name></name></expr>)</condition><block type="pseudo" pos:start="523:17" pos:end="523:94"><block_content pos:start="523:17" pos:end="523:94">

                <expr_stmt pos:start="523:17" pos:end="523:94"><expr pos:start="523:17" pos:end="523:93"><name pos:start="523:17" pos:end="523:48"><name pos:start="523:17" pos:end="523:18">st</name><operator pos:start="523:19" pos:end="523:20">-&gt;</operator><name pos:start="523:21" pos:end="523:25">codec</name><operator pos:start="523:26" pos:end="523:27">-&gt;</operator><name pos:start="523:28" pos:end="523:48">bits_per_coded_sample</name></name><operator pos:start="523:49" pos:end="523:49">=</operator> <call pos:start="523:51" pos:end="523:93"><name pos:start="523:51" pos:end="523:72">av_get_bits_per_sample</name><argument_list pos:start="523:73" pos:end="523:93">(<argument pos:start="523:74" pos:end="523:92"><expr pos:start="523:74" pos:end="523:92"><name pos:start="523:74" pos:end="523:92"><name pos:start="523:74" pos:end="523:75">st</name><operator pos:start="523:76" pos:end="523:77">-&gt;</operator><name pos:start="523:78" pos:end="523:82">codec</name><operator pos:start="523:83" pos:end="523:84">-&gt;</operator><name pos:start="523:85" pos:end="523:92">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line" pos:start="525:13" pos:end="525:65">// set stream disposition based on audio service type</comment>

            <switch pos:start="527:13" pos:end="549:13">switch <condition pos:start="527:20" pos:end="527:50">(<expr pos:start="527:21" pos:end="527:49"><name pos:start="527:21" pos:end="527:49"><name pos:start="527:21" pos:end="527:22">st</name><operator pos:start="527:23" pos:end="527:24">-&gt;</operator><name pos:start="527:25" pos:end="527:29">codec</name><operator pos:start="527:30" pos:end="527:31">-&gt;</operator><name pos:start="527:32" pos:end="527:49">audio_service_type</name></name></expr>)</condition> <block pos:start="527:52" pos:end="549:13">{<block_content pos:start="529:13" pos:end="547:73">

            <case pos:start="529:13" pos:end="529:47">case <expr pos:start="529:18" pos:end="529:46"><name pos:start="529:18" pos:end="529:46">AV_AUDIO_SERVICE_TYPE_EFFECTS</name></expr>:</case>

                <expr_stmt pos:start="531:17" pos:end="531:63"><expr pos:start="531:17" pos:end="531:62"><name pos:start="531:17" pos:end="531:31"><name pos:start="531:17" pos:end="531:18">st</name><operator pos:start="531:19" pos:end="531:20">-&gt;</operator><name pos:start="531:21" pos:end="531:31">disposition</name></name> <operator pos:start="531:33" pos:end="531:33">=</operator> <name pos:start="531:35" pos:end="531:62">AV_DISPOSITION_CLEAN_EFFECTS</name></expr>;</expr_stmt>    <break pos:start="531:68" pos:end="531:73">break;</break>

            <case pos:start="533:13" pos:end="533:57">case <expr pos:start="533:18" pos:end="533:56"><name pos:start="533:18" pos:end="533:56">AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED</name></expr>:</case>

                <expr_stmt pos:start="535:17" pos:end="535:65"><expr pos:start="535:17" pos:end="535:64"><name pos:start="535:17" pos:end="535:31"><name pos:start="535:17" pos:end="535:18">st</name><operator pos:start="535:19" pos:end="535:20">-&gt;</operator><name pos:start="535:21" pos:end="535:31">disposition</name></name> <operator pos:start="535:33" pos:end="535:33">=</operator> <name pos:start="535:35" pos:end="535:64">AV_DISPOSITION_VISUAL_IMPAIRED</name></expr>;</expr_stmt>  <break pos:start="535:68" pos:end="535:73">break;</break>

            <case pos:start="537:13" pos:end="537:56">case <expr pos:start="537:18" pos:end="537:55"><name pos:start="537:18" pos:end="537:55">AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED</name></expr>:</case>

                <expr_stmt pos:start="539:17" pos:end="539:66"><expr pos:start="539:17" pos:end="539:65"><name pos:start="539:17" pos:end="539:31"><name pos:start="539:17" pos:end="539:18">st</name><operator pos:start="539:19" pos:end="539:20">-&gt;</operator><name pos:start="539:21" pos:end="539:31">disposition</name></name> <operator pos:start="539:33" pos:end="539:33">=</operator> <name pos:start="539:35" pos:end="539:65">AV_DISPOSITION_HEARING_IMPAIRED</name></expr>;</expr_stmt> <break pos:start="539:68" pos:end="539:73">break;</break>

            <case pos:start="541:13" pos:end="541:50">case <expr pos:start="541:18" pos:end="541:49"><name pos:start="541:18" pos:end="541:49">AV_AUDIO_SERVICE_TYPE_COMMENTARY</name></expr>:</case>

                <expr_stmt pos:start="543:17" pos:end="543:57"><expr pos:start="543:17" pos:end="543:56"><name pos:start="543:17" pos:end="543:31"><name pos:start="543:17" pos:end="543:18">st</name><operator pos:start="543:19" pos:end="543:20">-&gt;</operator><name pos:start="543:21" pos:end="543:31">disposition</name></name> <operator pos:start="543:33" pos:end="543:33">=</operator> <name pos:start="543:35" pos:end="543:56">AV_DISPOSITION_COMMENT</name></expr>;</expr_stmt>          <break pos:start="543:68" pos:end="543:73">break;</break>

            <case pos:start="545:13" pos:end="545:47">case <expr pos:start="545:18" pos:end="545:46"><name pos:start="545:18" pos:end="545:46">AV_AUDIO_SERVICE_TYPE_KARAOKE</name></expr>:</case>

                <expr_stmt pos:start="547:17" pos:end="547:57"><expr pos:start="547:17" pos:end="547:56"><name pos:start="547:17" pos:end="547:31"><name pos:start="547:17" pos:end="547:18">st</name><operator pos:start="547:19" pos:end="547:20">-&gt;</operator><name pos:start="547:21" pos:end="547:31">disposition</name></name> <operator pos:start="547:33" pos:end="547:33">=</operator> <name pos:start="547:35" pos:end="547:56">AV_DISPOSITION_KARAOKE</name></expr>;</expr_stmt>          <break pos:start="547:68" pos:end="547:73">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="557:5" pos:end="557:37"><expr pos:start="557:5" pos:end="557:36"><call pos:start="557:5" pos:end="557:36"><name pos:start="557:5" pos:end="557:20">estimate_timings</name><argument_list pos:start="557:21" pos:end="557:36">(<argument pos:start="557:22" pos:end="557:23"><expr pos:start="557:22" pos:end="557:23"><name pos:start="557:22" pos:end="557:23">ic</name></expr></argument>, <argument pos:start="557:26" pos:end="557:35"><expr pos:start="557:26" pos:end="557:35"><name pos:start="557:26" pos:end="557:35">old_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="561:5" pos:end="612:0"><expr pos:start="561:5" pos:end="561:28"><call pos:start="561:5" pos:end="561:28"><name pos:start="561:5" pos:end="561:24">compute_chapters_end</name><argument_list pos:start="561:25" pos:end="561:28">(<argument pos:start="561:26" pos:end="561:27"><expr pos:start="561:26" pos:end="561:27"><name pos:start="561:26" pos:end="561:27">ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="565:1" pos:end="565:5">#<cpp:directive pos:start="565:2" pos:end="565:3">if</cpp:directive> <expr pos:start="565:5" pos:end="565:5"><literal type="number" pos:start="565:5" pos:end="565:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="567:5" pos:end="567:60">/* correct DTS for B-frame streams with no timestamps */</comment>

    for(i=0;i&lt;ic-&gt;nb_streams;i++) {

        st = ic-&gt;streams[i];

        if (st-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO) {

            if(b-frames){

                ppktl = &amp;ic-&gt;packet_buffer;

                while(ppkt1){

                    if(ppkt1-&gt;stream_index != i)

                        continue;

                    if(ppkt1-&gt;pkt-&gt;dts &lt; 0)

                        break;

                    if(ppkt1-&gt;pkt-&gt;pts != AV_NOPTS_VALUE)

                        break;

                    ppkt1-&gt;pkt-&gt;dts -= delta;

                    ppkt1= ppkt1-&gt;next;

                }

                if(ppkt1)

                    continue;

                st-&gt;cur_dts -= delta;

            }

        }

    }

<cpp:endif pos:start="611:1" pos:end="611:6">#<cpp:directive pos:start="611:2" pos:end="611:6">endif</cpp:directive></cpp:endif>



 <label pos:start="615:2" pos:end="615:22"><name pos:start="615:2" pos:end="615:21">find_stream_info_err</name>:</label>

    <for pos:start="617:5" pos:end="625:5">for <control pos:start="617:9" pos:end="617:38">(<init pos:start="617:10" pos:end="617:13"><expr pos:start="617:10" pos:end="617:12"><name pos:start="617:10" pos:end="617:10">i</name><operator pos:start="617:11" pos:end="617:11">=</operator><literal type="number" pos:start="617:12" pos:end="617:12">0</literal></expr>;</init> <condition pos:start="617:15" pos:end="617:33"><expr pos:start="617:15" pos:end="617:32"><name pos:start="617:15" pos:end="617:15">i</name> <operator pos:start="617:17" pos:end="617:17">&lt;</operator> <name pos:start="617:19" pos:end="617:32"><name pos:start="617:19" pos:end="617:20">ic</name><operator pos:start="617:21" pos:end="617:22">-&gt;</operator><name pos:start="617:23" pos:end="617:32">nb_streams</name></name></expr>;</condition> <incr pos:start="617:35" pos:end="617:37"><expr pos:start="617:35" pos:end="617:37"><name pos:start="617:35" pos:end="617:35">i</name><operator pos:start="617:36" pos:end="617:37">++</operator></expr></incr>)</control> <block pos:start="617:40" pos:end="625:5">{<block_content pos:start="619:9" pos:end="623:40">

        <if_stmt pos:start="619:9" pos:end="621:52"><if pos:start="619:9" pos:end="621:52">if <condition pos:start="619:12" pos:end="619:34">(<expr pos:start="619:13" pos:end="619:33"><name pos:start="619:13" pos:end="619:26"><name pos:start="619:13" pos:end="619:14">ic</name><operator pos:start="619:15" pos:end="619:16">-&gt;</operator><name pos:start="619:17" pos:end="619:23">streams</name><index pos:start="619:24" pos:end="619:26">[<expr pos:start="619:25" pos:end="619:25"><name pos:start="619:25" pos:end="619:25">i</name></expr>]</index></name><operator pos:start="619:27" pos:end="619:28">-&gt;</operator><name pos:start="619:29" pos:end="619:33">codec</name></expr>)</condition><block type="pseudo" pos:start="621:13" pos:end="621:52"><block_content pos:start="621:13" pos:end="621:52">

            <expr_stmt pos:start="621:13" pos:end="621:52"><expr pos:start="621:13" pos:end="621:51"><name pos:start="621:13" pos:end="621:26"><name pos:start="621:13" pos:end="621:14">ic</name><operator pos:start="621:15" pos:end="621:16">-&gt;</operator><name pos:start="621:17" pos:end="621:23">streams</name><index pos:start="621:24" pos:end="621:26">[<expr pos:start="621:25" pos:end="621:25"><name pos:start="621:25" pos:end="621:25">i</name></expr>]</index></name><operator pos:start="621:27" pos:end="621:28">-&gt;</operator><name pos:start="621:29" pos:end="621:47"><name pos:start="621:29" pos:end="621:33">codec</name><operator pos:start="621:34" pos:end="621:35">-&gt;</operator><name pos:start="621:36" pos:end="621:47">thread_count</name></name> <operator pos:start="621:49" pos:end="621:49">=</operator> <literal type="number" pos:start="621:51" pos:end="621:51">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="623:9" pos:end="623:40"><expr pos:start="623:9" pos:end="623:39"><call pos:start="623:9" pos:end="623:39"><name pos:start="623:9" pos:end="623:16">av_freep</name><argument_list pos:start="623:17" pos:end="623:39">(<argument pos:start="623:18" pos:end="623:38"><expr pos:start="623:18" pos:end="623:38"><operator pos:start="623:18" pos:end="623:18">&amp;</operator><name pos:start="623:19" pos:end="623:32"><name pos:start="623:19" pos:end="623:20">ic</name><operator pos:start="623:21" pos:end="623:22">-&gt;</operator><name pos:start="623:23" pos:end="623:29">streams</name><index pos:start="623:30" pos:end="623:32">[<expr pos:start="623:31" pos:end="623:31"><name pos:start="623:31" pos:end="623:31">i</name></expr>]</index></name><operator pos:start="623:33" pos:end="623:34">-&gt;</operator><name pos:start="623:35" pos:end="623:38">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="627:5" pos:end="627:15">return <expr pos:start="627:12" pos:end="627:14"><name pos:start="627:12" pos:end="627:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
