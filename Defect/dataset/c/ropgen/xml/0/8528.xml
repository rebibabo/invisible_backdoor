<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8528.c" pos:tabs="8"><function pos:start="1:1" pos:end="379:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">flac_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:55">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:40"><decl pos:start="5:29" pos:end="5:40"><type pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="379:1">{<block_content pos:start="9:5" pos:end="377:17">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">FLACContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">metadata_last</name></decl>, <decl pos:start="11:24" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:24" pos:end="11:36">metadata_type</name></decl>, <decl pos:start="11:39" pos:end="11:51"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:39" pos:end="11:51">metadata_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">tmp</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>, <decl pos:start="13:18" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:18">i</name></decl>, <decl pos:start="13:21" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:21" pos:end="13:21">j</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>, <decl pos:start="13:28" pos:end="13:41"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:28" pos:end="13:41">input_buf_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">samples</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">data</name></expr></init></decl>, <decl pos:start="15:30" pos:end="15:34"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:30" pos:end="15:30">*</modifier></type><name pos:start="15:31" pos:end="15:34">left</name></decl>, <decl pos:start="15:37" pos:end="15:42"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:37" pos:end="15:37">*</modifier></type><name pos:start="15:38" pos:end="15:42">right</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:19"><expr pos:start="19:5" pos:end="19:18"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:14">data_size</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:12">avctx</name></name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:20">avctx</name></expr>;</expr_stmt>

    

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if<condition pos:start="27:7" pos:end="27:29">(<expr pos:start="27:8" pos:end="27:28"><name pos:start="27:8" pos:end="27:23"><name pos:start="27:8" pos:end="27:8">s</name><operator pos:start="27:9" pos:end="27:10">-&gt;</operator><name pos:start="27:11" pos:end="27:23">max_framesize</name></name> <operator pos:start="27:25" pos:end="27:26">==</operator> <literal type="number" pos:start="27:28" pos:end="27:28">0</literal></expr>)</condition><block pos:start="27:30" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:100">

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:24">max_framesize</name></name><operator pos:start="29:25" pos:end="29:25">=</operator> <literal type="number" pos:start="29:27" pos:end="29:30">8192</literal></expr>;</expr_stmt> <comment type="line" pos:start="29:33" pos:end="29:82">// should hopefully be enough for the first header</comment>

        <expr_stmt pos:start="31:9" pos:end="31:100"><expr pos:start="31:9" pos:end="31:99"><name pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:20">bitstream</name></name><operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:99"><name pos:start="31:23" pos:end="31:37">av_fast_realloc</name><argument_list pos:start="31:38" pos:end="31:99">(<argument pos:start="31:39" pos:end="31:50"><expr pos:start="31:39" pos:end="31:50"><name pos:start="31:39" pos:end="31:50"><name pos:start="31:39" pos:end="31:39">s</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:50">bitstream</name></name></expr></argument>, <argument pos:start="31:53" pos:end="31:80"><expr pos:start="31:53" pos:end="31:80"><operator pos:start="31:53" pos:end="31:53">&amp;</operator><name pos:start="31:54" pos:end="31:80"><name pos:start="31:54" pos:end="31:54">s</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:80">allocated_bitstream_size</name></name></expr></argument>, <argument pos:start="31:83" pos:end="31:98"><expr pos:start="31:83" pos:end="31:98"><name pos:start="31:83" pos:end="31:98"><name pos:start="31:83" pos:end="31:83">s</name><operator pos:start="31:84" pos:end="31:85">-&gt;</operator><name pos:start="31:86" pos:end="31:98">max_framesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="73:5"><if pos:start="37:5" pos:end="73:5">if<condition pos:start="37:7" pos:end="37:29">(<expr pos:start="37:8" pos:end="37:28"><literal type="number" pos:start="37:8" pos:end="37:8">1</literal> <operator pos:start="37:10" pos:end="37:11">&amp;&amp;</operator> <name pos:start="37:13" pos:end="37:28"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:28">max_framesize</name></name></expr>)</condition><block pos:start="37:30" pos:end="73:5">{<block_content pos:start="39:13" pos:end="71:13"><comment type="line" pos:start="37:31" pos:end="37:47">//FIXME truncated</comment>

            <expr_stmt pos:start="39:13" pos:end="39:76"><expr pos:start="39:13" pos:end="39:75"><name pos:start="39:13" pos:end="39:20">buf_size</name><operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:75"><name pos:start="39:23" pos:end="39:27">FFMIN</name><argument_list pos:start="39:28" pos:end="39:75">(<argument pos:start="39:29" pos:end="39:36"><expr pos:start="39:29" pos:end="39:36"><name pos:start="39:29" pos:end="39:36">buf_size</name></expr></argument>, <argument pos:start="39:39" pos:end="39:74"><expr pos:start="39:39" pos:end="39:74"><name pos:start="39:39" pos:end="39:54"><name pos:start="39:39" pos:end="39:39">s</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:54">max_framesize</name></name> <operator pos:start="39:56" pos:end="39:56">-</operator> <name pos:start="39:58" pos:end="39:74"><name pos:start="39:58" pos:end="39:58">s</name><operator pos:start="39:59" pos:end="39:60">-&gt;</operator><name pos:start="39:61" pos:end="39:74">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:37"><expr pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:26">input_buf_size</name><operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:36">buf_size</name></expr>;</expr_stmt>



            <if_stmt pos:start="45:13" pos:end="53:13"><if pos:start="45:13" pos:end="53:13">if<condition pos:start="45:15" pos:end="45:95">(<expr pos:start="45:16" pos:end="45:94"><name pos:start="45:16" pos:end="45:33"><name pos:start="45:16" pos:end="45:16">s</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:33">bitstream_index</name></name> <operator pos:start="45:35" pos:end="45:35">+</operator> <name pos:start="45:37" pos:end="45:53"><name pos:start="45:37" pos:end="45:37">s</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:53">bitstream_size</name></name> <operator pos:start="45:55" pos:end="45:55">+</operator> <name pos:start="45:57" pos:end="45:64">buf_size</name> <operator pos:start="45:66" pos:end="45:66">&gt;</operator> <name pos:start="45:68" pos:end="45:94"><name pos:start="45:68" pos:end="45:68">s</name><operator pos:start="45:69" pos:end="45:70">-&gt;</operator><name pos:start="45:71" pos:end="45:94">allocated_bitstream_size</name></name></expr>)</condition><block pos:start="45:96" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:37">

<comment type="line" pos:start="47:1" pos:end="47:38">//                printf("memmove\n");</comment>

                <expr_stmt pos:start="49:17" pos:end="49:92"><expr pos:start="49:17" pos:end="49:91"><call pos:start="49:17" pos:end="49:91"><name pos:start="49:17" pos:end="49:23">memmove</name><argument_list pos:start="49:24" pos:end="49:91">(<argument pos:start="49:25" pos:end="49:36"><expr pos:start="49:25" pos:end="49:36"><name pos:start="49:25" pos:end="49:36"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:36">bitstream</name></name></expr></argument>, <argument pos:start="49:39" pos:end="49:71"><expr pos:start="49:39" pos:end="49:71"><operator pos:start="49:39" pos:end="49:39">&amp;</operator><name pos:start="49:40" pos:end="49:71"><name pos:start="49:40" pos:end="49:40">s</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:51">bitstream</name><index pos:start="49:52" pos:end="49:71">[<expr pos:start="49:53" pos:end="49:70"><name pos:start="49:53" pos:end="49:70"><name pos:start="49:53" pos:end="49:53">s</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:70">bitstream_index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="49:74" pos:end="49:90"><expr pos:start="49:74" pos:end="49:90"><name pos:start="49:74" pos:end="49:90"><name pos:start="49:74" pos:end="49:74">s</name><operator pos:start="49:75" pos:end="49:76">-&gt;</operator><name pos:start="49:77" pos:end="49:90">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:37"><expr pos:start="51:17" pos:end="51:36"><name pos:start="51:17" pos:end="51:34"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:34">bitstream_index</name></name><operator pos:start="51:35" pos:end="51:35">=</operator><literal type="number" pos:start="51:36" pos:end="51:36">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:89"><expr pos:start="55:13" pos:end="55:88"><call pos:start="55:13" pos:end="55:88"><name pos:start="55:13" pos:end="55:18">memcpy</name><argument_list pos:start="55:19" pos:end="55:88">(<argument pos:start="55:20" pos:end="55:72"><expr pos:start="55:20" pos:end="55:72"><operator pos:start="55:20" pos:end="55:20">&amp;</operator><name pos:start="55:21" pos:end="55:72"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:32">bitstream</name><index pos:start="55:33" pos:end="55:72">[<expr pos:start="55:34" pos:end="55:71"><name pos:start="55:34" pos:end="55:51"><name pos:start="55:34" pos:end="55:34">s</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:51">bitstream_index</name></name> <operator pos:start="55:53" pos:end="55:53">+</operator> <name pos:start="55:55" pos:end="55:71"><name pos:start="55:55" pos:end="55:55">s</name><operator pos:start="55:56" pos:end="55:57">-&gt;</operator><name pos:start="55:58" pos:end="55:71">bitstream_size</name></name></expr>]</index></name></expr></argument>, <argument pos:start="55:75" pos:end="55:77"><expr pos:start="55:75" pos:end="55:77"><name pos:start="55:75" pos:end="55:77">buf</name></expr></argument>, <argument pos:start="55:80" pos:end="55:87"><expr pos:start="55:80" pos:end="55:87"><name pos:start="55:80" pos:end="55:87">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:51"><expr pos:start="57:13" pos:end="57:50"><name pos:start="57:13" pos:end="57:15">buf</name><operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:50"><name pos:start="57:19" pos:end="57:19">s</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:30">bitstream</name><index pos:start="57:31" pos:end="57:50">[<expr pos:start="57:32" pos:end="57:49"><name pos:start="57:32" pos:end="57:49"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:49">bitstream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:42"><expr pos:start="59:13" pos:end="59:41"><name pos:start="59:13" pos:end="59:20">buf_size</name> <operator pos:start="59:22" pos:end="59:23">+=</operator> <name pos:start="59:25" pos:end="59:41"><name pos:start="59:25" pos:end="59:25">s</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:41">bitstream_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:40"><expr pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:29"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:29">bitstream_size</name></name><operator pos:start="61:30" pos:end="61:30">=</operator> <name pos:start="61:32" pos:end="61:39">buf_size</name></expr>;</expr_stmt>

            

            <if_stmt pos:start="65:13" pos:end="71:13"><if pos:start="65:13" pos:end="71:13">if<condition pos:start="65:15" pos:end="65:43">(<expr pos:start="65:16" pos:end="65:42"><name pos:start="65:16" pos:end="65:23">buf_size</name> <operator pos:start="65:25" pos:end="65:25">&lt;</operator> <name pos:start="65:27" pos:end="65:42"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:42">max_framesize</name></name></expr>)</condition><block pos:start="65:44" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:38">

<comment type="line" pos:start="67:1" pos:end="67:50">//                printf("wanna more data ...\n");</comment>

                <return pos:start="69:17" pos:end="69:38">return <expr pos:start="69:24" pos:end="69:37"><name pos:start="69:24" pos:end="69:37">input_buf_size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:43"><expr pos:start="77:5" pos:end="77:42"><call pos:start="77:5" pos:end="77:42"><name pos:start="77:5" pos:end="77:17">init_get_bits</name><argument_list pos:start="77:18" pos:end="77:42">(<argument pos:start="77:19" pos:end="77:24"><expr pos:start="77:19" pos:end="77:24"><operator pos:start="77:19" pos:end="77:19">&amp;</operator><name pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:20">s</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:24">gb</name></name></expr></argument>, <argument pos:start="77:27" pos:end="77:29"><expr pos:start="77:27" pos:end="77:29"><name pos:start="77:27" pos:end="77:29">buf</name></expr></argument>, <argument pos:start="77:32" pos:end="77:41"><expr pos:start="77:32" pos:end="77:41"><name pos:start="77:32" pos:end="77:39">buf_size</name><operator pos:start="77:40" pos:end="77:40">*</operator><literal type="number" pos:start="77:41" pos:end="77:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="81:5" pos:end="81:29">/* fLaC signature (be) */</comment>

    <if_stmt pos:start="83:5" pos:end="258:0"><if pos:start="83:5" pos:end="141:5">if <condition pos:start="83:8" pos:end="83:70">(<expr pos:start="83:9" pos:end="83:69"><call pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:22">show_bits_long</name><argument_list pos:start="83:23" pos:end="83:34">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><operator pos:start="83:24" pos:end="83:24">&amp;</operator><name pos:start="83:25" pos:end="83:29"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:29">gb</name></name></expr></argument>, <argument pos:start="83:32" pos:end="83:33"><expr pos:start="83:32" pos:end="83:33"><literal type="number" pos:start="83:32" pos:end="83:33">32</literal></expr></argument>)</argument_list></call> <operator pos:start="83:36" pos:end="83:37">==</operator> <call pos:start="83:39" pos:end="83:69"><name pos:start="83:39" pos:end="83:46">bswap_32</name><argument_list pos:start="83:47" pos:end="83:69">(<argument pos:start="83:48" pos:end="83:68"><expr pos:start="83:48" pos:end="83:68"><call pos:start="83:48" pos:end="83:68"><name pos:start="83:48" pos:end="83:60">ff_get_fourcc</name><argument_list pos:start="83:61" pos:end="83:68">(<argument pos:start="83:62" pos:end="83:67"><expr pos:start="83:62" pos:end="83:67"><literal type="string" pos:start="83:62" pos:end="83:67">"fLaC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="85:5" pos:end="141:5">{<block_content pos:start="87:9" pos:end="139:32">

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><call pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:17">skip_bits</name><argument_list pos:start="87:18" pos:end="87:29">(<argument pos:start="87:19" pos:end="87:24"><expr pos:start="87:19" pos:end="87:24"><operator pos:start="87:19" pos:end="87:19">&amp;</operator><name pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:20">s</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:24">gb</name></name></expr></argument>, <argument pos:start="87:27" pos:end="87:28"><expr pos:start="87:27" pos:end="87:28"><literal type="number" pos:start="87:27" pos:end="87:28">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:58"><expr pos:start="91:9" pos:end="91:57"><call pos:start="91:9" pos:end="91:57"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:57">(<argument pos:start="91:16" pos:end="91:23"><expr pos:start="91:16" pos:end="91:23"><name pos:start="91:16" pos:end="91:23"><name pos:start="91:16" pos:end="91:16">s</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:23">avctx</name></name></expr></argument>, <argument pos:start="91:26" pos:end="91:37"><expr pos:start="91:26" pos:end="91:37"><name pos:start="91:26" pos:end="91:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="91:40" pos:end="91:56"><expr pos:start="91:40" pos:end="91:56"><literal type="string" pos:start="91:40" pos:end="91:56">"STREAM HEADER\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="93:9" pos:end="139:32">do <block pos:start="93:12" pos:end="139:9">{<block_content pos:start="95:13" pos:end="137:13">

            <expr_stmt pos:start="95:13" pos:end="95:48"><expr pos:start="95:13" pos:end="95:47"><name pos:start="95:13" pos:end="95:25">metadata_last</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <call pos:start="95:29" pos:end="95:47"><name pos:start="95:29" pos:end="95:36">get_bits</name><argument_list pos:start="95:37" pos:end="95:47">(<argument pos:start="95:38" pos:end="95:43"><expr pos:start="95:38" pos:end="95:43"><operator pos:start="95:38" pos:end="95:38">&amp;</operator><name pos:start="95:39" pos:end="95:43"><name pos:start="95:39" pos:end="95:39">s</name><operator pos:start="95:40" pos:end="95:41">-&gt;</operator><name pos:start="95:42" pos:end="95:43">gb</name></name></expr></argument>, <argument pos:start="95:46" pos:end="95:46"><expr pos:start="95:46" pos:end="95:46"><literal type="number" pos:start="95:46" pos:end="95:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:48"><expr pos:start="97:13" pos:end="97:47"><name pos:start="97:13" pos:end="97:25">metadata_type</name> <operator pos:start="97:27" pos:end="97:27">=</operator> <call pos:start="97:29" pos:end="97:47"><name pos:start="97:29" pos:end="97:36">get_bits</name><argument_list pos:start="97:37" pos:end="97:47">(<argument pos:start="97:38" pos:end="97:43"><expr pos:start="97:38" pos:end="97:43"><operator pos:start="97:38" pos:end="97:38">&amp;</operator><name pos:start="97:39" pos:end="97:43"><name pos:start="97:39" pos:end="97:39">s</name><operator pos:start="97:40" pos:end="97:41">-&gt;</operator><name pos:start="97:42" pos:end="97:43">gb</name></name></expr></argument>, <argument pos:start="97:46" pos:end="97:46"><expr pos:start="97:46" pos:end="97:46"><literal type="number" pos:start="97:46" pos:end="97:46">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:54"><expr pos:start="99:13" pos:end="99:53"><name pos:start="99:13" pos:end="99:25">metadata_size</name> <operator pos:start="99:27" pos:end="99:27">=</operator> <call pos:start="99:29" pos:end="99:53"><name pos:start="99:29" pos:end="99:41">get_bits_long</name><argument_list pos:start="99:42" pos:end="99:53">(<argument pos:start="99:43" pos:end="99:48"><expr pos:start="99:43" pos:end="99:48"><operator pos:start="99:43" pos:end="99:43">&amp;</operator><name pos:start="99:44" pos:end="99:48"><name pos:start="99:44" pos:end="99:44">s</name><operator pos:start="99:45" pos:end="99:46">-&gt;</operator><name pos:start="99:47" pos:end="99:48">gb</name></name></expr></argument>, <argument pos:start="99:51" pos:end="99:52"><expr pos:start="99:51" pos:end="99:52"><literal type="number" pos:start="99:51" pos:end="99:52">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="103:13" pos:end="107:31"><expr pos:start="103:13" pos:end="107:30"><call pos:start="103:13" pos:end="107:30"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="107:30">(<argument pos:start="103:20" pos:end="103:27"><expr pos:start="103:20" pos:end="103:27"><name pos:start="103:20" pos:end="103:27"><name pos:start="103:20" pos:end="103:20">s</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:27">avctx</name></name></expr></argument>, <argument pos:start="103:30" pos:end="103:41"><expr pos:start="103:30" pos:end="103:41"><name pos:start="103:30" pos:end="103:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="103:44" pos:end="103:95"><expr pos:start="103:44" pos:end="103:95"><literal type="string" pos:start="103:44" pos:end="103:95">" metadata block: flag = %d, type = %d, size = %d\n"</literal></expr></argument>,

                <argument pos:start="105:17" pos:end="105:29"><expr pos:start="105:17" pos:end="105:29"><name pos:start="105:17" pos:end="105:29">metadata_last</name></expr></argument>, <argument pos:start="105:32" pos:end="105:44"><expr pos:start="105:32" pos:end="105:44"><name pos:start="105:32" pos:end="105:44">metadata_type</name></expr></argument>,

                <argument pos:start="107:17" pos:end="107:29"><expr pos:start="107:17" pos:end="107:29"><name pos:start="107:17" pos:end="107:29">metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="137:13"><if pos:start="109:13" pos:end="137:13">if<condition pos:start="109:15" pos:end="109:29">(<expr pos:start="109:16" pos:end="109:28"><name pos:start="109:16" pos:end="109:28">metadata_size</name></expr>)</condition><block pos:start="109:30" pos:end="137:13">{<block_content pos:start="111:17" pos:end="135:17">

                <switch pos:start="111:17" pos:end="135:17">switch<condition pos:start="111:23" pos:end="111:37">(<expr pos:start="111:24" pos:end="111:36"><name pos:start="111:24" pos:end="111:36">metadata_type</name></expr>)</condition>

                <block pos:start="113:17" pos:end="135:17">{<block_content pos:start="115:17" pos:end="133:45">

                <case pos:start="115:17" pos:end="115:46">case <expr pos:start="115:22" pos:end="115:45"><name pos:start="115:22" pos:end="115:45">METADATA_TYPE_STREAMINFO</name></expr>:</case>

                    <if_stmt pos:start="117:21" pos:end="119:74"><if pos:start="117:21" pos:end="119:74">if<condition pos:start="117:23" pos:end="117:42">(<expr pos:start="117:24" pos:end="117:41"><name pos:start="117:24" pos:end="117:36">metadata_size</name> <operator pos:start="117:38" pos:end="117:39">==</operator> <literal type="number" pos:start="117:41" pos:end="117:41">0</literal></expr>)</condition><block type="pseudo" pos:start="119:25" pos:end="119:74"><block_content pos:start="119:25" pos:end="119:74">

                        <expr_stmt pos:start="119:25" pos:end="119:74"><expr pos:start="119:25" pos:end="119:73"><call pos:start="119:25" pos:end="119:73"><name pos:start="119:25" pos:end="119:30">av_log</name><argument_list pos:start="119:31" pos:end="119:73">(<argument pos:start="119:32" pos:end="119:39"><expr pos:start="119:32" pos:end="119:39"><name pos:start="119:32" pos:end="119:39"><name pos:start="119:32" pos:end="119:32">s</name><operator pos:start="119:33" pos:end="119:34">-&gt;</operator><name pos:start="119:35" pos:end="119:39">avctx</name></name></expr></argument>, <argument pos:start="119:42" pos:end="119:53"><expr pos:start="119:42" pos:end="119:53"><name pos:start="119:42" pos:end="119:53">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="119:56" pos:end="119:72"><expr pos:start="119:56" pos:end="119:72"><literal type="string" pos:start="119:56" pos:end="119:72">"size= 0 WTF!?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    

                    <expr_stmt pos:start="123:21" pos:end="123:43"><expr pos:start="123:21" pos:end="123:42"><call pos:start="123:21" pos:end="123:42"><name pos:start="123:21" pos:end="123:39">metadata_streaminfo</name><argument_list pos:start="123:40" pos:end="123:42">(<argument pos:start="123:41" pos:end="123:41"><expr pos:start="123:41" pos:end="123:41"><name pos:start="123:41" pos:end="123:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:36"><expr pos:start="125:21" pos:end="125:35"><call pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:32">dump_headers</name><argument_list pos:start="125:33" pos:end="125:35">(<argument pos:start="125:34" pos:end="125:34"><expr pos:start="125:34" pos:end="125:34"><name pos:start="125:34" pos:end="125:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="127:21" pos:end="127:26">break;</break>

                <default pos:start="129:17" pos:end="129:24">default:</default>

                    <for pos:start="131:21" pos:end="133:45">for<control pos:start="131:24" pos:end="131:50">(<init pos:start="131:25" pos:end="131:28"><expr pos:start="131:25" pos:end="131:27"><name pos:start="131:25" pos:end="131:25">i</name><operator pos:start="131:26" pos:end="131:26">=</operator><literal type="number" pos:start="131:27" pos:end="131:27">0</literal></expr>;</init> <condition pos:start="131:30" pos:end="131:45"><expr pos:start="131:30" pos:end="131:44"><name pos:start="131:30" pos:end="131:30">i</name><operator pos:start="131:31" pos:end="131:31">&lt;</operator><name pos:start="131:32" pos:end="131:44">metadata_size</name></expr>;</condition> <incr pos:start="131:47" pos:end="131:49"><expr pos:start="131:47" pos:end="131:49"><name pos:start="131:47" pos:end="131:47">i</name><operator pos:start="131:48" pos:end="131:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="133:25" pos:end="133:45"><block_content pos:start="133:25" pos:end="133:45">

                        <expr_stmt pos:start="133:25" pos:end="133:45"><expr pos:start="133:25" pos:end="133:44"><call pos:start="133:25" pos:end="133:44"><name pos:start="133:25" pos:end="133:33">skip_bits</name><argument_list pos:start="133:34" pos:end="133:44">(<argument pos:start="133:35" pos:end="133:40"><expr pos:start="133:35" pos:end="133:40"><operator pos:start="133:35" pos:end="133:35">&amp;</operator><name pos:start="133:36" pos:end="133:40"><name pos:start="133:36" pos:end="133:36">s</name><operator pos:start="133:37" pos:end="133:38">-&gt;</operator><name pos:start="133:39" pos:end="133:40">gb</name></name></expr></argument>, <argument pos:start="133:43" pos:end="133:43"><expr pos:start="133:43" pos:end="133:43"><literal type="number" pos:start="133:43" pos:end="133:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></switch>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while<condition pos:start="139:16" pos:end="139:31">(<expr pos:start="139:17" pos:end="139:30"><operator pos:start="139:17" pos:end="139:17">!</operator><name pos:start="139:18" pos:end="139:30">metadata_last</name></expr>)</condition>;</do>

    </block_content>}</block></if>

    <else pos:start="143:5" pos:end="258:0">else

    <block pos:start="145:5" pos:end="258:0">{<block_content pos:start="149:10" pos:end="167:22">

        

         <expr_stmt pos:start="149:10" pos:end="149:37"><expr pos:start="149:10" pos:end="149:36"><name pos:start="149:10" pos:end="149:12">tmp</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:36"><name pos:start="149:16" pos:end="149:24">show_bits</name><argument_list pos:start="149:25" pos:end="149:36">(<argument pos:start="149:26" pos:end="149:31"><expr pos:start="149:26" pos:end="149:31"><operator pos:start="149:26" pos:end="149:26">&amp;</operator><name pos:start="149:27" pos:end="149:31"><name pos:start="149:27" pos:end="149:27">s</name><operator pos:start="149:28" pos:end="149:29">-&gt;</operator><name pos:start="149:30" pos:end="149:31">gb</name></name></expr></argument>, <argument pos:start="149:34" pos:end="149:35"><expr pos:start="149:34" pos:end="149:35"><literal type="number" pos:start="149:34" pos:end="149:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="161:9"><if pos:start="151:9" pos:end="161:9">if<condition pos:start="151:11" pos:end="151:25">(<expr pos:start="151:12" pos:end="151:24"><name pos:start="151:12" pos:end="151:14">tmp</name> <operator pos:start="151:16" pos:end="151:17">!=</operator> <literal type="number" pos:start="151:19" pos:end="151:24">0xFFF8</literal></expr>)</condition><block pos:start="151:26" pos:end="161:9">{<block_content pos:start="153:13" pos:end="159:21">

            <expr_stmt pos:start="153:13" pos:end="153:70"><expr pos:start="153:13" pos:end="153:69"><call pos:start="153:13" pos:end="153:69"><name pos:start="153:13" pos:end="153:18">av_log</name><argument_list pos:start="153:19" pos:end="153:69">(<argument pos:start="153:20" pos:end="153:27"><expr pos:start="153:20" pos:end="153:27"><name pos:start="153:20" pos:end="153:27"><name pos:start="153:20" pos:end="153:20">s</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:27">avctx</name></name></expr></argument>, <argument pos:start="153:30" pos:end="153:41"><expr pos:start="153:30" pos:end="153:41"><name pos:start="153:30" pos:end="153:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="153:44" pos:end="153:68"><expr pos:start="153:44" pos:end="153:68"><literal type="string" pos:start="153:44" pos:end="153:68">"FRAME HEADER not here\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="155:13" pos:end="157:37">while<condition pos:start="155:18" pos:end="155:91">(<expr pos:start="155:19" pos:end="155:90"><call pos:start="155:19" pos:end="155:40"><name pos:start="155:19" pos:end="155:32">get_bits_count</name><argument_list pos:start="155:33" pos:end="155:40">(<argument pos:start="155:34" pos:end="155:39"><expr pos:start="155:34" pos:end="155:39"><operator pos:start="155:34" pos:end="155:34">&amp;</operator><name pos:start="155:35" pos:end="155:39"><name pos:start="155:35" pos:end="155:35">s</name><operator pos:start="155:36" pos:end="155:37">-&gt;</operator><name pos:start="155:38" pos:end="155:39">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="155:41" pos:end="155:41">/</operator><literal type="number" pos:start="155:42" pos:end="155:43">8</literal><operator pos:start="155:43" pos:end="155:43">+</operator><literal type="number" pos:start="155:44" pos:end="155:44">2</literal> <operator pos:start="155:46" pos:end="155:46">&lt;</operator> <name pos:start="155:48" pos:end="155:55">buf_size</name> <operator pos:start="155:57" pos:end="155:58">&amp;&amp;</operator> <call pos:start="155:60" pos:end="155:80"><name pos:start="155:60" pos:end="155:68">show_bits</name><argument_list pos:start="155:69" pos:end="155:80">(<argument pos:start="155:70" pos:end="155:75"><expr pos:start="155:70" pos:end="155:75"><operator pos:start="155:70" pos:end="155:70">&amp;</operator><name pos:start="155:71" pos:end="155:75"><name pos:start="155:71" pos:end="155:71">s</name><operator pos:start="155:72" pos:end="155:73">-&gt;</operator><name pos:start="155:74" pos:end="155:75">gb</name></name></expr></argument>, <argument pos:start="155:78" pos:end="155:79"><expr pos:start="155:78" pos:end="155:79"><literal type="number" pos:start="155:78" pos:end="155:79">16</literal></expr></argument>)</argument_list></call> <operator pos:start="155:82" pos:end="155:83">!=</operator> <literal type="number" pos:start="155:85" pos:end="155:90">0xFFF8</literal></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:37"><block_content pos:start="157:17" pos:end="157:37">

                <expr_stmt pos:start="157:17" pos:end="157:37"><expr pos:start="157:17" pos:end="157:36"><call pos:start="157:17" pos:end="157:36"><name pos:start="157:17" pos:end="157:25">skip_bits</name><argument_list pos:start="157:26" pos:end="157:36">(<argument pos:start="157:27" pos:end="157:32"><expr pos:start="157:27" pos:end="157:32"><operator pos:start="157:27" pos:end="157:27">&amp;</operator><name pos:start="157:28" pos:end="157:32"><name pos:start="157:28" pos:end="157:28">s</name><operator pos:start="157:29" pos:end="157:30">-&gt;</operator><name pos:start="157:31" pos:end="157:32">gb</name></name></expr></argument>, <argument pos:start="157:35" pos:end="157:35"><expr pos:start="157:35" pos:end="157:35"><literal type="number" pos:start="157:35" pos:end="157:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <goto pos:start="159:13" pos:end="159:21">goto <name pos:start="159:18" pos:end="159:20">end</name>;</goto> <comment type="line" pos:start="159:23" pos:end="159:93">// we may not have enough bits left to decode a frame, so try next time</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:30"><expr pos:start="163:9" pos:end="163:29"><call pos:start="163:9" pos:end="163:29"><name pos:start="163:9" pos:end="163:17">skip_bits</name><argument_list pos:start="163:18" pos:end="163:29">(<argument pos:start="163:19" pos:end="163:24"><expr pos:start="163:19" pos:end="163:24"><operator pos:start="163:19" pos:end="163:19">&amp;</operator><name pos:start="163:20" pos:end="163:24"><name pos:start="163:20" pos:end="163:20">s</name><operator pos:start="163:21" pos:end="163:22">-&gt;</operator><name pos:start="163:23" pos:end="163:24">gb</name></name></expr></argument>, <argument pos:start="163:27" pos:end="163:28"><expr pos:start="163:27" pos:end="163:28"><literal type="number" pos:start="163:27" pos:end="163:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="167:22"><if pos:start="165:9" pos:end="167:22">if <condition pos:start="165:12" pos:end="165:32">(<expr pos:start="165:13" pos:end="165:31"><call pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:24">decode_frame</name><argument_list pos:start="165:25" pos:end="165:27">(<argument pos:start="165:26" pos:end="165:26"><expr pos:start="165:26" pos:end="165:26"><name pos:start="165:26" pos:end="165:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="165:29" pos:end="165:29">&lt;</operator> <literal type="number" pos:start="165:31" pos:end="165:31">0</literal></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:22"><block_content pos:start="167:13" pos:end="167:22">

            <return pos:start="167:13" pos:end="167:22">return <expr pos:start="167:20" pos:end="167:21"><operator pos:start="167:20" pos:end="167:20">-</operator><literal type="number" pos:start="167:21" pos:end="167:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    

<cpp:if pos:start="175:1" pos:end="175:5">#<cpp:directive pos:start="175:2" pos:end="175:3">if</cpp:directive> <expr pos:start="175:5" pos:end="175:5"><literal type="number" pos:start="175:5" pos:end="175:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="177:5" pos:end="177:36">/* fix the channel order here */</comment>

    if (s-&gt;order == MID_SIDE)

    {

        short *left = samples;

        short *right = samples + s-&gt;blocksize;

        for (i = 0; i &lt; s-&gt;blocksize; i += 2)

        {

            uint32_t x = s-&gt;decoded[0][i];

            uint32_t y = s-&gt;decoded[0][i+1];



            right[i] = x - (y / 2);

            left[i] = right[i] + y;

        }

        *data_size = 2 * s-&gt;blocksize;

    }

    else

    {

    for (i = 0; i &lt; s-&gt;channels; i++)

    {

        switch(s-&gt;order)

        {

            case INDEPENDENT:

                for (j = 0; j &lt; s-&gt;blocksize; j++)

                    samples[(s-&gt;blocksize*i)+j] = s-&gt;decoded[i][j];

                break;

            case LEFT_SIDE:

            case RIGHT_SIDE:

                if (i == 0)

                    for (j = 0; j &lt; s-&gt;blocksize; j++)

                        samples[(s-&gt;blocksize*i)+j] = s-&gt;decoded[0][j];

                else

                    for (j = 0; j &lt; s-&gt;blocksize; j++)

                        samples[(s-&gt;blocksize*i)+j] = s-&gt;decoded[0][j] - s-&gt;decoded[i][j];

                break;

<comment type="line" pos:start="245:1" pos:end="245:28">//            case MID_SIDE:</comment>

<comment type="line" pos:start="247:1" pos:end="247:75">//                av_log(s-&gt;avctx, AV_LOG_DEBUG, "mid-side unsupported\n");</comment>

        }

        *data_size += s-&gt;blocksize;

    }

    }

<cpp:else pos:start="257:1" pos:end="257:5">#<cpp:directive pos:start="257:2" pos:end="257:5">else</cpp:directive></cpp:else>

    <switch pos:start="259:5" pos:end="342:0">switch<condition pos:start="259:11" pos:end="259:20">(<expr pos:start="259:12" pos:end="259:19"><name pos:start="259:12" pos:end="259:19"><name pos:start="259:12" pos:end="259:12">s</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:19">order</name></name></expr>)</condition>

    <block pos:start="261:5" pos:end="342:0">{<block_content pos:start="263:9" pos:end="337:18">

        <case pos:start="263:9" pos:end="263:25">case <expr pos:start="263:14" pos:end="263:24"><name pos:start="263:14" pos:end="263:24">INDEPENDENT</name></expr>:</case>

            <for pos:start="265:13" pos:end="273:13">for <control pos:start="265:17" pos:end="265:46">(<init pos:start="265:18" pos:end="265:23"><expr pos:start="265:18" pos:end="265:22"><name pos:start="265:18" pos:end="265:18">j</name> <operator pos:start="265:20" pos:end="265:20">=</operator> <literal type="number" pos:start="265:22" pos:end="265:22">0</literal></expr>;</init> <condition pos:start="265:25" pos:end="265:41"><expr pos:start="265:25" pos:end="265:40"><name pos:start="265:25" pos:end="265:25">j</name> <operator pos:start="265:27" pos:end="265:27">&lt;</operator> <name pos:start="265:29" pos:end="265:40"><name pos:start="265:29" pos:end="265:29">s</name><operator pos:start="265:30" pos:end="265:31">-&gt;</operator><name pos:start="265:32" pos:end="265:40">blocksize</name></name></expr>;</condition> <incr pos:start="265:43" pos:end="265:45"><expr pos:start="265:43" pos:end="265:45"><name pos:start="265:43" pos:end="265:43">j</name><operator pos:start="265:44" pos:end="265:45">++</operator></expr></incr>)</control>

            <block pos:start="267:13" pos:end="273:13">{<block_content pos:start="269:17" pos:end="271:52">

                <for pos:start="269:17" pos:end="271:52">for <control pos:start="269:21" pos:end="269:49">(<init pos:start="269:22" pos:end="269:27"><expr pos:start="269:22" pos:end="269:26"><name pos:start="269:22" pos:end="269:22">i</name> <operator pos:start="269:24" pos:end="269:24">=</operator> <literal type="number" pos:start="269:26" pos:end="269:26">0</literal></expr>;</init> <condition pos:start="269:29" pos:end="269:44"><expr pos:start="269:29" pos:end="269:43"><name pos:start="269:29" pos:end="269:29">i</name> <operator pos:start="269:31" pos:end="269:31">&lt;</operator> <name pos:start="269:33" pos:end="269:43"><name pos:start="269:33" pos:end="269:33">s</name><operator pos:start="269:34" pos:end="269:35">-&gt;</operator><name pos:start="269:36" pos:end="269:43">channels</name></name></expr>;</condition> <incr pos:start="269:46" pos:end="269:48"><expr pos:start="269:46" pos:end="269:48"><name pos:start="269:46" pos:end="269:46">i</name><operator pos:start="269:47" pos:end="269:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="271:21" pos:end="271:52"><block_content pos:start="271:21" pos:end="271:52">

                    <expr_stmt pos:start="271:21" pos:end="271:52"><expr pos:start="271:21" pos:end="271:51"><operator pos:start="271:21" pos:end="271:21">*</operator><operator pos:start="271:22" pos:end="271:22">(</operator><name pos:start="271:23" pos:end="271:29">samples</name><operator pos:start="271:30" pos:end="271:31">++</operator><operator pos:start="271:32" pos:end="271:32">)</operator> <operator pos:start="271:34" pos:end="271:34">=</operator> <name pos:start="271:36" pos:end="271:51"><name pos:start="271:36" pos:end="271:36">s</name><operator pos:start="271:37" pos:end="271:38">-&gt;</operator><name pos:start="271:39" pos:end="271:45">decoded</name><index pos:start="271:46" pos:end="271:48">[<expr pos:start="271:47" pos:end="271:47"><name pos:start="271:47" pos:end="271:47">i</name></expr>]</index><index pos:start="271:49" pos:end="271:51">[<expr pos:start="271:50" pos:end="271:50"><name pos:start="271:50" pos:end="271:50">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

            <break pos:start="275:13" pos:end="275:18">break;</break>

        <case pos:start="277:9" pos:end="277:23">case <expr pos:start="277:14" pos:end="277:22"><name pos:start="277:14" pos:end="277:22">LEFT_SIDE</name></expr>:</case>

            <expr_stmt pos:start="279:13" pos:end="279:37"><expr pos:start="279:13" pos:end="279:36"><call pos:start="279:13" pos:end="279:36"><name pos:start="279:13" pos:end="279:18">assert</name><argument_list pos:start="279:19" pos:end="279:36">(<argument pos:start="279:20" pos:end="279:35"><expr pos:start="279:20" pos:end="279:35"><name pos:start="279:20" pos:end="279:30"><name pos:start="279:20" pos:end="279:20">s</name><operator pos:start="279:21" pos:end="279:22">-&gt;</operator><name pos:start="279:23" pos:end="279:30">channels</name></name> <operator pos:start="279:32" pos:end="279:33">==</operator> <literal type="number" pos:start="279:35" pos:end="279:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="281:13" pos:end="289:13">for <control pos:start="281:17" pos:end="281:46">(<init pos:start="281:18" pos:end="281:23"><expr pos:start="281:18" pos:end="281:22"><name pos:start="281:18" pos:end="281:18">i</name> <operator pos:start="281:20" pos:end="281:20">=</operator> <literal type="number" pos:start="281:22" pos:end="281:22">0</literal></expr>;</init> <condition pos:start="281:25" pos:end="281:41"><expr pos:start="281:25" pos:end="281:40"><name pos:start="281:25" pos:end="281:25">i</name> <operator pos:start="281:27" pos:end="281:27">&lt;</operator> <name pos:start="281:29" pos:end="281:40"><name pos:start="281:29" pos:end="281:29">s</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:40">blocksize</name></name></expr>;</condition> <incr pos:start="281:43" pos:end="281:45"><expr pos:start="281:43" pos:end="281:45"><name pos:start="281:43" pos:end="281:43">i</name><operator pos:start="281:44" pos:end="281:45">++</operator></expr></incr>)</control>

            <block pos:start="283:13" pos:end="289:13">{<block_content pos:start="285:17" pos:end="287:67">

                <expr_stmt pos:start="285:17" pos:end="285:48"><expr pos:start="285:17" pos:end="285:47"><operator pos:start="285:17" pos:end="285:17">*</operator><operator pos:start="285:18" pos:end="285:18">(</operator><name pos:start="285:19" pos:end="285:25">samples</name><operator pos:start="285:26" pos:end="285:27">++</operator><operator pos:start="285:28" pos:end="285:28">)</operator> <operator pos:start="285:30" pos:end="285:30">=</operator> <name pos:start="285:32" pos:end="285:47"><name pos:start="285:32" pos:end="285:32">s</name><operator pos:start="285:33" pos:end="285:34">-&gt;</operator><name pos:start="285:35" pos:end="285:41">decoded</name><index pos:start="285:42" pos:end="285:44">[<expr pos:start="285:43" pos:end="285:43"><literal type="number" pos:start="285:43" pos:end="285:43">0</literal></expr>]</index><index pos:start="285:45" pos:end="285:47">[<expr pos:start="285:46" pos:end="285:46"><name pos:start="285:46" pos:end="285:46">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:67"><expr pos:start="287:17" pos:end="287:66"><operator pos:start="287:17" pos:end="287:17">*</operator><operator pos:start="287:18" pos:end="287:18">(</operator><name pos:start="287:19" pos:end="287:25">samples</name><operator pos:start="287:26" pos:end="287:27">++</operator><operator pos:start="287:28" pos:end="287:28">)</operator> <operator pos:start="287:30" pos:end="287:30">=</operator> <name pos:start="287:32" pos:end="287:47"><name pos:start="287:32" pos:end="287:32">s</name><operator pos:start="287:33" pos:end="287:34">-&gt;</operator><name pos:start="287:35" pos:end="287:41">decoded</name><index pos:start="287:42" pos:end="287:44">[<expr pos:start="287:43" pos:end="287:43"><literal type="number" pos:start="287:43" pos:end="287:43">0</literal></expr>]</index><index pos:start="287:45" pos:end="287:47">[<expr pos:start="287:46" pos:end="287:46"><name pos:start="287:46" pos:end="287:46">i</name></expr>]</index></name> <operator pos:start="287:49" pos:end="287:49">-</operator> <name pos:start="287:51" pos:end="287:66"><name pos:start="287:51" pos:end="287:51">s</name><operator pos:start="287:52" pos:end="287:53">-&gt;</operator><name pos:start="287:54" pos:end="287:60">decoded</name><index pos:start="287:61" pos:end="287:63">[<expr pos:start="287:62" pos:end="287:62"><literal type="number" pos:start="287:62" pos:end="287:62">1</literal></expr>]</index><index pos:start="287:64" pos:end="287:66">[<expr pos:start="287:65" pos:end="287:65"><name pos:start="287:65" pos:end="287:65">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="291:13" pos:end="291:18">break;</break>

        <case pos:start="293:9" pos:end="293:24">case <expr pos:start="293:14" pos:end="293:23"><name pos:start="293:14" pos:end="293:23">RIGHT_SIDE</name></expr>:</case>

            <expr_stmt pos:start="295:13" pos:end="295:37"><expr pos:start="295:13" pos:end="295:36"><call pos:start="295:13" pos:end="295:36"><name pos:start="295:13" pos:end="295:18">assert</name><argument_list pos:start="295:19" pos:end="295:36">(<argument pos:start="295:20" pos:end="295:35"><expr pos:start="295:20" pos:end="295:35"><name pos:start="295:20" pos:end="295:30"><name pos:start="295:20" pos:end="295:20">s</name><operator pos:start="295:21" pos:end="295:22">-&gt;</operator><name pos:start="295:23" pos:end="295:30">channels</name></name> <operator pos:start="295:32" pos:end="295:33">==</operator> <literal type="number" pos:start="295:35" pos:end="295:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="297:13" pos:end="305:13">for <control pos:start="297:17" pos:end="297:46">(<init pos:start="297:18" pos:end="297:23"><expr pos:start="297:18" pos:end="297:22"><name pos:start="297:18" pos:end="297:18">i</name> <operator pos:start="297:20" pos:end="297:20">=</operator> <literal type="number" pos:start="297:22" pos:end="297:22">0</literal></expr>;</init> <condition pos:start="297:25" pos:end="297:41"><expr pos:start="297:25" pos:end="297:40"><name pos:start="297:25" pos:end="297:25">i</name> <operator pos:start="297:27" pos:end="297:27">&lt;</operator> <name pos:start="297:29" pos:end="297:40"><name pos:start="297:29" pos:end="297:29">s</name><operator pos:start="297:30" pos:end="297:31">-&gt;</operator><name pos:start="297:32" pos:end="297:40">blocksize</name></name></expr>;</condition> <incr pos:start="297:43" pos:end="297:45"><expr pos:start="297:43" pos:end="297:45"><name pos:start="297:43" pos:end="297:43">i</name><operator pos:start="297:44" pos:end="297:45">++</operator></expr></incr>)</control>

            <block pos:start="299:13" pos:end="305:13">{<block_content pos:start="301:17" pos:end="303:48">

                <expr_stmt pos:start="301:17" pos:end="301:67"><expr pos:start="301:17" pos:end="301:66"><operator pos:start="301:17" pos:end="301:17">*</operator><operator pos:start="301:18" pos:end="301:18">(</operator><name pos:start="301:19" pos:end="301:25">samples</name><operator pos:start="301:26" pos:end="301:27">++</operator><operator pos:start="301:28" pos:end="301:28">)</operator> <operator pos:start="301:30" pos:end="301:30">=</operator> <name pos:start="301:32" pos:end="301:47"><name pos:start="301:32" pos:end="301:32">s</name><operator pos:start="301:33" pos:end="301:34">-&gt;</operator><name pos:start="301:35" pos:end="301:41">decoded</name><index pos:start="301:42" pos:end="301:44">[<expr pos:start="301:43" pos:end="301:43"><literal type="number" pos:start="301:43" pos:end="301:43">0</literal></expr>]</index><index pos:start="301:45" pos:end="301:47">[<expr pos:start="301:46" pos:end="301:46"><name pos:start="301:46" pos:end="301:46">i</name></expr>]</index></name> <operator pos:start="301:49" pos:end="301:49">+</operator> <name pos:start="301:51" pos:end="301:66"><name pos:start="301:51" pos:end="301:51">s</name><operator pos:start="301:52" pos:end="301:53">-&gt;</operator><name pos:start="301:54" pos:end="301:60">decoded</name><index pos:start="301:61" pos:end="301:63">[<expr pos:start="301:62" pos:end="301:62"><literal type="number" pos:start="301:62" pos:end="301:62">1</literal></expr>]</index><index pos:start="301:64" pos:end="301:66">[<expr pos:start="301:65" pos:end="301:65"><name pos:start="301:65" pos:end="301:65">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:48"><expr pos:start="303:17" pos:end="303:47"><operator pos:start="303:17" pos:end="303:17">*</operator><operator pos:start="303:18" pos:end="303:18">(</operator><name pos:start="303:19" pos:end="303:25">samples</name><operator pos:start="303:26" pos:end="303:27">++</operator><operator pos:start="303:28" pos:end="303:28">)</operator> <operator pos:start="303:30" pos:end="303:30">=</operator> <name pos:start="303:32" pos:end="303:47"><name pos:start="303:32" pos:end="303:32">s</name><operator pos:start="303:33" pos:end="303:34">-&gt;</operator><name pos:start="303:35" pos:end="303:41">decoded</name><index pos:start="303:42" pos:end="303:44">[<expr pos:start="303:43" pos:end="303:43"><literal type="number" pos:start="303:43" pos:end="303:43">1</literal></expr>]</index><index pos:start="303:45" pos:end="303:47">[<expr pos:start="303:46" pos:end="303:46"><name pos:start="303:46" pos:end="303:46">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="307:13" pos:end="307:18">break;</break>

        <case pos:start="309:9" pos:end="309:22">case <expr pos:start="309:14" pos:end="309:21"><name pos:start="309:14" pos:end="309:21">MID_SIDE</name></expr>:</case>

            <expr_stmt pos:start="311:13" pos:end="311:37"><expr pos:start="311:13" pos:end="311:36"><call pos:start="311:13" pos:end="311:36"><name pos:start="311:13" pos:end="311:18">assert</name><argument_list pos:start="311:19" pos:end="311:36">(<argument pos:start="311:20" pos:end="311:35"><expr pos:start="311:20" pos:end="311:35"><name pos:start="311:20" pos:end="311:30"><name pos:start="311:20" pos:end="311:20">s</name><operator pos:start="311:21" pos:end="311:22">-&gt;</operator><name pos:start="311:23" pos:end="311:30">channels</name></name> <operator pos:start="311:32" pos:end="311:33">==</operator> <literal type="number" pos:start="311:35" pos:end="311:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="313:13" pos:end="335:13">for <control pos:start="313:17" pos:end="313:46">(<init pos:start="313:18" pos:end="313:23"><expr pos:start="313:18" pos:end="313:22"><name pos:start="313:18" pos:end="313:18">i</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <literal type="number" pos:start="313:22" pos:end="313:22">0</literal></expr>;</init> <condition pos:start="313:25" pos:end="313:41"><expr pos:start="313:25" pos:end="313:40"><name pos:start="313:25" pos:end="313:25">i</name> <operator pos:start="313:27" pos:end="313:27">&lt;</operator> <name pos:start="313:29" pos:end="313:40"><name pos:start="313:29" pos:end="313:29">s</name><operator pos:start="313:30" pos:end="313:31">-&gt;</operator><name pos:start="313:32" pos:end="313:40">blocksize</name></name></expr>;</condition> <incr pos:start="313:43" pos:end="313:45"><expr pos:start="313:43" pos:end="313:45"><name pos:start="313:43" pos:end="313:43">i</name><operator pos:start="313:44" pos:end="313:45">++</operator></expr></incr>)</control>

            <block pos:start="315:13" pos:end="335:13">{<block_content pos:start="317:17" pos:end="333:49">

                <decl_stmt pos:start="317:17" pos:end="317:30"><decl pos:start="317:17" pos:end="317:23"><type pos:start="317:17" pos:end="317:19"><name pos:start="317:17" pos:end="317:19">int</name></type> <name pos:start="317:21" pos:end="317:23">mid</name></decl>, <decl pos:start="317:26" pos:end="317:29"><type ref="prev" pos:start="317:17" pos:end="317:19"/><name pos:start="317:26" pos:end="317:29">side</name></decl>;</decl_stmt>

                <expr_stmt pos:start="319:17" pos:end="319:39"><expr pos:start="319:17" pos:end="319:38"><name pos:start="319:17" pos:end="319:19">mid</name> <operator pos:start="319:21" pos:end="319:21">=</operator> <name pos:start="319:23" pos:end="319:38"><name pos:start="319:23" pos:end="319:23">s</name><operator pos:start="319:24" pos:end="319:25">-&gt;</operator><name pos:start="319:26" pos:end="319:32">decoded</name><index pos:start="319:33" pos:end="319:35">[<expr pos:start="319:34" pos:end="319:34"><literal type="number" pos:start="319:34" pos:end="319:34">0</literal></expr>]</index><index pos:start="319:36" pos:end="319:38">[<expr pos:start="319:37" pos:end="319:37"><name pos:start="319:37" pos:end="319:37">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="321:17" pos:end="321:40"><expr pos:start="321:17" pos:end="321:39"><name pos:start="321:17" pos:end="321:20">side</name> <operator pos:start="321:22" pos:end="321:22">=</operator> <name pos:start="321:24" pos:end="321:39"><name pos:start="321:24" pos:end="321:24">s</name><operator pos:start="321:25" pos:end="321:26">-&gt;</operator><name pos:start="321:27" pos:end="321:33">decoded</name><index pos:start="321:34" pos:end="321:36">[<expr pos:start="321:35" pos:end="321:35"><literal type="number" pos:start="321:35" pos:end="321:35">1</literal></expr>]</index><index pos:start="321:37" pos:end="321:39">[<expr pos:start="321:38" pos:end="321:38"><name pos:start="321:38" pos:end="321:38">i</name></expr>]</index></name></expr>;</expr_stmt>

                

                <expr_stmt pos:start="325:17" pos:end="325:26"><expr pos:start="325:17" pos:end="325:25"><name pos:start="325:17" pos:end="325:19">mid</name> <operator pos:start="325:21" pos:end="325:23">&lt;&lt;=</operator> <literal type="number" pos:start="325:25" pos:end="325:25">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="327:17" pos:end="329:26"><if pos:start="327:17" pos:end="329:26">if <condition pos:start="327:20" pos:end="327:29">(<expr pos:start="327:21" pos:end="327:28"><name pos:start="327:21" pos:end="327:24">side</name> <operator pos:start="327:26" pos:end="327:26">&amp;</operator> <literal type="number" pos:start="327:28" pos:end="327:28">1</literal></expr>)</condition><block type="pseudo" pos:start="329:21" pos:end="329:26"><block_content pos:start="329:21" pos:end="329:26">

                    <expr_stmt pos:start="329:21" pos:end="329:26"><expr pos:start="329:21" pos:end="329:25"><name pos:start="329:21" pos:end="329:23">mid</name><operator pos:start="329:24" pos:end="329:25">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:49"><expr pos:start="331:17" pos:end="331:48"><operator pos:start="331:17" pos:end="331:17">*</operator><operator pos:start="331:18" pos:end="331:18">(</operator><name pos:start="331:19" pos:end="331:25">samples</name><operator pos:start="331:26" pos:end="331:27">++</operator><operator pos:start="331:28" pos:end="331:28">)</operator> <operator pos:start="331:30" pos:end="331:30">=</operator> <operator pos:start="331:32" pos:end="331:32">(</operator><name pos:start="331:33" pos:end="331:35">mid</name> <operator pos:start="331:37" pos:end="331:37">+</operator> <name pos:start="331:39" pos:end="331:42">side</name><operator pos:start="331:43" pos:end="331:43">)</operator> <operator pos:start="331:45" pos:end="331:46">&gt;&gt;</operator> <literal type="number" pos:start="331:48" pos:end="331:48">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:49"><expr pos:start="333:17" pos:end="333:48"><operator pos:start="333:17" pos:end="333:17">*</operator><operator pos:start="333:18" pos:end="333:18">(</operator><name pos:start="333:19" pos:end="333:25">samples</name><operator pos:start="333:26" pos:end="333:27">++</operator><operator pos:start="333:28" pos:end="333:28">)</operator> <operator pos:start="333:30" pos:end="333:30">=</operator> <operator pos:start="333:32" pos:end="333:32">(</operator><name pos:start="333:33" pos:end="333:35">mid</name> <operator pos:start="333:37" pos:end="333:37">-</operator> <name pos:start="333:39" pos:end="333:42">side</name><operator pos:start="333:43" pos:end="333:43">)</operator> <operator pos:start="333:45" pos:end="333:46">&gt;&gt;</operator> <literal type="number" pos:start="333:48" pos:end="333:48">1</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="337:13" pos:end="337:18">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="341:1" pos:end="341:6">#<cpp:directive pos:start="341:2" pos:end="341:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="345:5" pos:end="345:52"><expr pos:start="345:5" pos:end="345:51"><operator pos:start="345:5" pos:end="345:5">*</operator><name pos:start="345:6" pos:end="345:14">data_size</name> <operator pos:start="345:16" pos:end="345:16">=</operator> <operator pos:start="345:18" pos:end="345:18">(</operator><name pos:start="345:19" pos:end="345:24">int8_t</name> <operator pos:start="345:26" pos:end="345:26">*</operator><operator pos:start="345:27" pos:end="345:27">)</operator><name pos:start="345:28" pos:end="345:34">samples</name> <operator pos:start="345:36" pos:end="345:36">-</operator> <operator pos:start="345:38" pos:end="345:38">(</operator><name pos:start="345:39" pos:end="345:44">int8_t</name> <operator pos:start="345:46" pos:end="345:46">*</operator><operator pos:start="345:47" pos:end="345:47">)</operator><name pos:start="345:48" pos:end="345:51">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:66"><expr pos:start="347:5" pos:end="347:65"><call pos:start="347:5" pos:end="347:65"><name pos:start="347:5" pos:end="347:10">av_log</name><argument_list pos:start="347:11" pos:end="347:65">(<argument pos:start="347:12" pos:end="347:19"><expr pos:start="347:12" pos:end="347:19"><name pos:start="347:12" pos:end="347:19"><name pos:start="347:12" pos:end="347:12">s</name><operator pos:start="347:13" pos:end="347:14">-&gt;</operator><name pos:start="347:15" pos:end="347:19">avctx</name></name></expr></argument>, <argument pos:start="347:22" pos:end="347:33"><expr pos:start="347:22" pos:end="347:33"><name pos:start="347:22" pos:end="347:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="347:36" pos:end="347:52"><expr pos:start="347:36" pos:end="347:52"><literal type="string" pos:start="347:36" pos:end="347:52">"data size: %d\n"</literal></expr></argument>, <argument pos:start="347:55" pos:end="347:64"><expr pos:start="347:55" pos:end="347:64"><operator pos:start="347:55" pos:end="347:55">*</operator><name pos:start="347:56" pos:end="347:64">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<comment type="line" pos:start="351:1" pos:end="351:39">//    s-&gt;last_blocksize = s-&gt;blocksize;</comment>

<label pos:start="353:1" pos:end="353:4"><name pos:start="353:1" pos:end="353:3">end</name>:</label>

    <expr_stmt pos:start="355:5" pos:end="355:36"><expr pos:start="355:5" pos:end="355:35"><name pos:start="355:5" pos:end="355:5">i</name><operator pos:start="355:6" pos:end="355:6">=</operator> <operator pos:start="355:8" pos:end="355:8">(</operator><call pos:start="355:9" pos:end="355:30"><name pos:start="355:9" pos:end="355:22">get_bits_count</name><argument_list pos:start="355:23" pos:end="355:30">(<argument pos:start="355:24" pos:end="355:29"><expr pos:start="355:24" pos:end="355:29"><operator pos:start="355:24" pos:end="355:24">&amp;</operator><name pos:start="355:25" pos:end="355:29"><name pos:start="355:25" pos:end="355:25">s</name><operator pos:start="355:26" pos:end="355:27">-&gt;</operator><name pos:start="355:28" pos:end="355:29">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="355:31" pos:end="355:31">+</operator><literal type="number" pos:start="355:32" pos:end="355:32">7</literal><operator pos:start="355:33" pos:end="355:33">)</operator><operator pos:start="355:34" pos:end="355:34">/</operator><literal type="number" pos:start="355:35" pos:end="355:35">8</literal></expr>;</expr_stmt><empty_stmt pos:start="355:37" pos:end="355:37">;</empty_stmt>

    <if_stmt pos:start="357:5" pos:end="363:5"><if pos:start="357:5" pos:end="363:5">if<condition pos:start="357:7" pos:end="357:20">(<expr pos:start="357:8" pos:end="357:19"><name pos:start="357:8" pos:end="357:8">i</name> <operator pos:start="357:10" pos:end="357:10">&gt;</operator> <name pos:start="357:12" pos:end="357:19">buf_size</name></expr>)</condition><block pos:start="357:21" pos:end="363:5">{<block_content pos:start="359:9" pos:end="361:18">

        <expr_stmt pos:start="359:9" pos:end="359:71"><expr pos:start="359:9" pos:end="359:70"><call pos:start="359:9" pos:end="359:70"><name pos:start="359:9" pos:end="359:14">av_log</name><argument_list pos:start="359:15" pos:end="359:70">(<argument pos:start="359:16" pos:end="359:23"><expr pos:start="359:16" pos:end="359:23"><name pos:start="359:16" pos:end="359:23"><name pos:start="359:16" pos:end="359:16">s</name><operator pos:start="359:17" pos:end="359:18">-&gt;</operator><name pos:start="359:19" pos:end="359:23">avctx</name></name></expr></argument>, <argument pos:start="359:26" pos:end="359:37"><expr pos:start="359:26" pos:end="359:37"><name pos:start="359:26" pos:end="359:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="359:40" pos:end="359:55"><expr pos:start="359:40" pos:end="359:55"><literal type="string" pos:start="359:40" pos:end="359:55">"overread: %d\n"</literal></expr></argument>, <argument pos:start="359:58" pos:end="359:69"><expr pos:start="359:58" pos:end="359:69"><name pos:start="359:58" pos:end="359:58">i</name> <operator pos:start="359:60" pos:end="359:60">-</operator> <name pos:start="359:62" pos:end="359:69">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="361:9" pos:end="361:18">return <expr pos:start="361:16" pos:end="361:17"><operator pos:start="361:16" pos:end="361:16">-</operator><literal type="number" pos:start="361:17" pos:end="361:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="367:5" pos:end="377:17"><if pos:start="367:5" pos:end="375:5">if<condition pos:start="367:7" pos:end="367:25">(<expr pos:start="367:8" pos:end="367:24"><name pos:start="367:8" pos:end="367:24"><name pos:start="367:8" pos:end="367:8">s</name><operator pos:start="367:9" pos:end="367:10">-&gt;</operator><name pos:start="367:11" pos:end="367:24">bitstream_size</name></name></expr>)</condition><block pos:start="367:26" pos:end="375:5">{<block_content pos:start="369:9" pos:end="373:30">

        <expr_stmt pos:start="369:9" pos:end="369:32"><expr pos:start="369:9" pos:end="369:31"><name pos:start="369:9" pos:end="369:26"><name pos:start="369:9" pos:end="369:9">s</name><operator pos:start="369:10" pos:end="369:11">-&gt;</operator><name pos:start="369:12" pos:end="369:26">bitstream_index</name></name> <operator pos:start="369:28" pos:end="369:29">+=</operator> <name pos:start="369:31" pos:end="369:31">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:32"><expr pos:start="371:9" pos:end="371:31"><name pos:start="371:9" pos:end="371:25"><name pos:start="371:9" pos:end="371:9">s</name><operator pos:start="371:10" pos:end="371:11">-&gt;</operator><name pos:start="371:12" pos:end="371:25">bitstream_size</name></name>  <operator pos:start="371:28" pos:end="371:29">-=</operator> <name pos:start="371:31" pos:end="371:31">i</name></expr>;</expr_stmt>

        <return pos:start="373:9" pos:end="373:30">return <expr pos:start="373:16" pos:end="373:29"><name pos:start="373:16" pos:end="373:29">input_buf_size</name></expr>;</return>

    </block_content>}</block></if><else pos:start="375:6" pos:end="377:17">else<block type="pseudo" pos:start="377:9" pos:end="377:17"><block_content pos:start="377:9" pos:end="377:17"> 

        <return pos:start="377:9" pos:end="377:17">return <expr pos:start="377:16" pos:end="377:16"><name pos:start="377:16" pos:end="377:16">i</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
