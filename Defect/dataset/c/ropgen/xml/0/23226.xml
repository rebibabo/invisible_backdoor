<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23226.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">tlb_fill</name> <parameter_list pos:start="1:15" pos:end="1:75">(<parameter pos:start="1:16" pos:end="1:32"><decl pos:start="1:16" pos:end="1:32"><type pos:start="1:16" pos:end="1:32"><name pos:start="1:16" pos:end="1:27">target_ulong</name></type> <name pos:start="1:29" pos:end="1:32">addr</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:46">is_write</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:59">mmu_idx</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:74"><decl pos:start="1:62" pos:end="1:74"><type pos:start="1:62" pos:end="1:74"><name pos:start="1:62" pos:end="1:65">void</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:74">retaddr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:20">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">TranslationBlock</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:23">saved_env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">long</name></type> <name pos:start="9:19" pos:end="9:20">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="17:24">/* XXX: hack to restore env in all cases, even if not called from

       generated code */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:20"><expr pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:13">saved_env</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:19">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:7">env</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <name pos:start="21:11" pos:end="21:24">cpu_single_env</name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:44"><expr pos:start="25:5" pos:end="27:43"><call pos:start="25:5" pos:end="27:43"><name pos:start="25:5" pos:end="25:9">D_LOG</name><argument_list pos:start="25:10" pos:end="27:43">(<argument pos:start="25:11" pos:end="25:35"><expr pos:start="25:11" pos:end="25:35"><literal type="string" pos:start="25:11" pos:end="25:35">"%s pc=%x tpc=%x ra=%x\n"</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:45"><expr pos:start="25:38" pos:end="25:45"><name pos:start="25:38" pos:end="25:45">__func__</name></expr></argument>, 

	     <argument pos:start="27:14" pos:end="27:20"><expr pos:start="27:14" pos:end="27:20"><name pos:start="27:14" pos:end="27:20"><name pos:start="27:14" pos:end="27:16">env</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:20">pc</name></name></expr></argument>, <argument pos:start="27:23" pos:end="27:33"><expr pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:25">env</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:33">debug1</name></name></expr></argument>, <argument pos:start="27:36" pos:end="27:42"><expr pos:start="27:36" pos:end="27:42"><name pos:start="27:36" pos:end="27:42">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:66"><expr pos:start="29:5" pos:end="29:65"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:65"><name pos:start="29:11" pos:end="29:35">cpu_cris_handle_mmu_fault</name><argument_list pos:start="29:36" pos:end="29:65">(<argument pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><name pos:start="29:37" pos:end="29:39">env</name></expr></argument>, <argument pos:start="29:42" pos:end="29:45"><expr pos:start="29:42" pos:end="29:45"><name pos:start="29:42" pos:end="29:45">addr</name></expr></argument>, <argument pos:start="29:48" pos:end="29:55"><expr pos:start="29:48" pos:end="29:55"><name pos:start="29:48" pos:end="29:55">is_write</name></expr></argument>, <argument pos:start="29:58" pos:end="29:64"><expr pos:start="29:58" pos:end="29:64"><name pos:start="29:58" pos:end="29:64">mmu_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="61:5"><if pos:start="31:5" pos:end="61:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><call pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:16">unlikely</name><argument_list pos:start="31:17" pos:end="31:21">(<argument pos:start="31:18" pos:end="31:20"><expr pos:start="31:18" pos:end="31:20"><name pos:start="31:18" pos:end="31:20">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:24" pos:end="61:5">{<block_content pos:start="33:9" pos:end="59:27">

        <if_stmt pos:start="33:9" pos:end="57:9"><if pos:start="33:9" pos:end="57:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:19">retaddr</name></expr>)</condition> <block pos:start="33:22" pos:end="57:9">{<block_content pos:start="37:13" pos:end="55:13">

            <comment type="block" pos:start="35:13" pos:end="35:46">/* now we have a real cpu fault */</comment>

            <expr_stmt pos:start="37:13" pos:end="37:40"><expr pos:start="37:13" pos:end="37:39"><name pos:start="37:13" pos:end="37:14">pc</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <operator pos:start="37:18" pos:end="37:18">(</operator><name pos:start="37:19" pos:end="37:26">unsigned</name> <name pos:start="37:28" pos:end="37:31">long</name><operator pos:start="37:32" pos:end="37:32">)</operator><name pos:start="37:33" pos:end="37:39">retaddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:32"><expr pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:14">tb</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:31"><name pos:start="39:18" pos:end="39:27">tb_find_pc</name><argument_list pos:start="39:28" pos:end="39:31">(<argument pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:30"><name pos:start="39:29" pos:end="39:30">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="55:13"><if pos:start="41:13" pos:end="55:13">if <condition pos:start="41:16" pos:end="41:19">(<expr pos:start="41:17" pos:end="41:18"><name pos:start="41:17" pos:end="41:18">tb</name></expr>)</condition> <block pos:start="41:21" pos:end="55:13">{<block_content pos:start="47:17" pos:end="53:44">

                <comment type="block" pos:start="43:17" pos:end="45:41">/* the PC is inside the translated code. It means that we have

                   a virtual CPU fault */</comment>

                <expr_stmt pos:start="47:17" pos:end="47:47"><expr pos:start="47:17" pos:end="47:46"><call pos:start="47:17" pos:end="47:46"><name pos:start="47:17" pos:end="47:33">cpu_restore_state</name><argument_list pos:start="47:34" pos:end="47:46">(<argument pos:start="47:35" pos:end="47:36"><expr pos:start="47:35" pos:end="47:36"><name pos:start="47:35" pos:end="47:36">tb</name></expr></argument>, <argument pos:start="47:39" pos:end="47:41"><expr pos:start="47:39" pos:end="47:41"><name pos:start="47:39" pos:end="47:41">env</name></expr></argument>, <argument pos:start="47:44" pos:end="47:45"><expr pos:start="47:44" pos:end="47:45"><name pos:start="47:44" pos:end="47:45">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		<comment type="block" pos:start="51:17" pos:end="51:58">/* Evaluate flags after retranslation.  */</comment>

                <expr_stmt pos:start="53:17" pos:end="53:44"><expr pos:start="53:17" pos:end="53:43"><call pos:start="53:17" pos:end="53:43"><name pos:start="53:17" pos:end="53:41">helper_top_evaluate_flags</name><argument_list pos:start="53:42" pos:end="53:43">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><call pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:21">cpu_loop_exit</name><argument_list pos:start="59:22" pos:end="59:26">(<argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:20"><expr pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:7">env</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:19">saved_env</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
