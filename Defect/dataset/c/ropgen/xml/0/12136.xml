<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12136.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">configure_accelerator</name><parameter_list pos:start="1:33" pos:end="1:50">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:47"><name pos:start="1:34" pos:end="1:45">MachineClass</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">mc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:30">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:16"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:16">[<expr pos:start="7:14" pos:end="7:15"><literal type="number" pos:start="7:14" pos:end="7:15">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:26">accel_initialised</name> <init pos:start="11:28" pos:end="11:34">= <expr pos:start="11:30" pos:end="11:34"><name pos:start="11:30" pos:end="11:34">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:20">init_failed</name> <init pos:start="13:22" pos:end="13:28">= <expr pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:28">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:55"><expr pos:start="17:5" pos:end="17:54"><name pos:start="17:5" pos:end="17:5">p</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:54"><name pos:start="17:9" pos:end="17:20">qemu_opt_get</name><argument_list pos:start="17:21" pos:end="17:54">(<argument pos:start="17:22" pos:end="17:44"><expr pos:start="17:22" pos:end="17:44"><call pos:start="17:22" pos:end="17:44"><name pos:start="17:22" pos:end="17:42">qemu_get_machine_opts</name><argument_list pos:start="17:43" pos:end="17:44">()</argument_list></call></expr></argument>, <argument pos:start="17:47" pos:end="17:53"><expr pos:start="17:47" pos:end="17:53"><literal type="string" pos:start="17:47" pos:end="17:53">"accel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:9">p</name> <operator pos:start="19:11" pos:end="19:12">==</operator> <name pos:start="19:14" pos:end="19:17">NULL</name></expr>)</condition> <block pos:start="19:20" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:18">

        <comment type="block" pos:start="21:9" pos:end="21:48">/* Use the default "accelerator", tcg */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:18"><expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">p</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <literal type="string" pos:start="23:13" pos:end="23:17">"tcg"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="29:5" pos:end="87:5">while <condition pos:start="29:11" pos:end="29:44">(<expr pos:start="29:12" pos:end="29:43"><operator pos:start="29:12" pos:end="29:12">!</operator><name pos:start="29:13" pos:end="29:29">accel_initialised</name> <operator pos:start="29:31" pos:end="29:32">&amp;&amp;</operator> <operator pos:start="29:34" pos:end="29:34">*</operator><name pos:start="29:35" pos:end="29:35">p</name> <operator pos:start="29:37" pos:end="29:38">!=</operator> <literal type="char" pos:start="29:40" pos:end="29:43">'\0'</literal></expr>)</condition> <block pos:start="29:46" pos:end="87:5">{<block_content pos:start="31:9" pos:end="85:9">

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:22">(<expr pos:start="31:13" pos:end="31:21"><operator pos:start="31:13" pos:end="31:13">*</operator><name pos:start="31:14" pos:end="31:14">p</name> <operator pos:start="31:16" pos:end="31:17">==</operator> <literal type="char" pos:start="31:19" pos:end="31:21">':'</literal></expr>)</condition> <block pos:start="31:24" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:16">

            <expr_stmt pos:start="33:13" pos:end="33:16"><expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:13">p</name><operator pos:start="33:14" pos:end="33:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:52"><expr pos:start="37:9" pos:end="37:51"><name pos:start="37:9" pos:end="37:9">p</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:51"><name pos:start="37:13" pos:end="37:24">get_opt_name</name><argument_list pos:start="37:25" pos:end="37:51">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">buf</name></expr></argument>, <argument pos:start="37:31" pos:end="37:42"><expr pos:start="37:31" pos:end="37:42"><sizeof pos:start="37:31" pos:end="37:42">sizeof <argument_list pos:start="37:38" pos:end="37:42">(<argument pos:start="37:39" pos:end="37:41"><expr pos:start="37:39" pos:end="37:41"><name pos:start="37:39" pos:end="37:41">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:45" pos:end="37:45"><expr pos:start="37:45" pos:end="37:45"><name pos:start="37:45" pos:end="37:45">p</name></expr></argument>, <argument pos:start="37:48" pos:end="37:50"><expr pos:start="37:48" pos:end="37:50"><literal type="char" pos:start="37:48" pos:end="37:50">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="39:9" pos:end="79:9">for <control pos:start="39:13" pos:end="39:52">(<init pos:start="39:14" pos:end="39:19"><expr pos:start="39:14" pos:end="39:18"><name pos:start="39:14" pos:end="39:14">i</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>;</init> <condition pos:start="39:21" pos:end="39:47"><expr pos:start="39:21" pos:end="39:46"><name pos:start="39:21" pos:end="39:21">i</name> <operator pos:start="39:23" pos:end="39:23">&lt;</operator> <call pos:start="39:25" pos:end="39:46"><name pos:start="39:25" pos:end="39:34">ARRAY_SIZE</name><argument_list pos:start="39:35" pos:end="39:46">(<argument pos:start="39:36" pos:end="39:45"><expr pos:start="39:36" pos:end="39:45"><name pos:start="39:36" pos:end="39:45">accel_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="39:49" pos:end="39:51"><expr pos:start="39:49" pos:end="39:51"><name pos:start="39:49" pos:end="39:49">i</name><operator pos:start="39:50" pos:end="39:51">++</operator></expr></incr>)</control> <block pos:start="39:54" pos:end="79:9">{<block_content pos:start="41:13" pos:end="77:13">

            <if_stmt pos:start="41:13" pos:end="77:13"><if pos:start="41:13" pos:end="77:13">if <condition pos:start="41:16" pos:end="41:57">(<expr pos:start="41:17" pos:end="41:56"><call pos:start="41:17" pos:end="41:51"><name pos:start="41:17" pos:end="41:22">strcmp</name><argument_list pos:start="41:23" pos:end="41:51">(<argument pos:start="41:24" pos:end="41:45"><expr pos:start="41:24" pos:end="41:45"><name pos:start="41:24" pos:end="41:36"><name pos:start="41:24" pos:end="41:33">accel_list</name><index pos:start="41:34" pos:end="41:36">[<expr pos:start="41:35" pos:end="41:35"><name pos:start="41:35" pos:end="41:35">i</name></expr>]</index></name><operator pos:start="41:37" pos:end="41:37">.</operator><name pos:start="41:38" pos:end="41:45">opt_name</name></expr></argument>, <argument pos:start="41:48" pos:end="41:50"><expr pos:start="41:48" pos:end="41:50"><name pos:start="41:48" pos:end="41:50">buf</name></expr></argument>)</argument_list></call> <operator pos:start="41:53" pos:end="41:54">==</operator> <literal type="number" pos:start="41:56" pos:end="41:56">0</literal></expr>)</condition> <block pos:start="41:59" pos:end="77:13">{<block_content pos:start="43:17" pos:end="75:22">

                <if_stmt pos:start="43:17" pos:end="51:17"><if pos:start="43:17" pos:end="51:17">if <condition pos:start="43:20" pos:end="43:47">(<expr pos:start="43:21" pos:end="43:46"><operator pos:start="43:21" pos:end="43:21">!</operator><name pos:start="43:22" pos:end="43:34"><name pos:start="43:22" pos:end="43:31">accel_list</name><index pos:start="43:32" pos:end="43:34">[<expr pos:start="43:33" pos:end="43:33"><name pos:start="43:33" pos:end="43:33">i</name></expr>]</index></name><operator pos:start="43:35" pos:end="43:35">.</operator><call pos:start="43:36" pos:end="43:46"><name pos:start="43:36" pos:end="43:44">available</name><argument_list pos:start="43:45" pos:end="43:46">()</argument_list></call></expr>)</condition> <block pos:start="43:49" pos:end="51:17">{<block_content pos:start="45:21" pos:end="49:26">

                    <expr_stmt pos:start="45:21" pos:end="47:47"><expr pos:start="45:21" pos:end="47:46"><call pos:start="45:21" pos:end="47:46"><name pos:start="45:21" pos:end="45:26">printf</name><argument_list pos:start="45:27" pos:end="47:46">(<argument pos:start="45:28" pos:end="45:63"><expr pos:start="45:28" pos:end="45:63"><literal type="string" pos:start="45:28" pos:end="45:63">"%s not supported for this target\n"</literal></expr></argument>,

                           <argument pos:start="47:28" pos:end="47:45"><expr pos:start="47:28" pos:end="47:45"><name pos:start="47:28" pos:end="47:40"><name pos:start="47:28" pos:end="47:37">accel_list</name><index pos:start="47:38" pos:end="47:40">[<expr pos:start="47:39" pos:end="47:39"><name pos:start="47:39" pos:end="47:39">i</name></expr>]</index></name><operator pos:start="47:41" pos:end="47:41">.</operator><name pos:start="47:42" pos:end="47:45">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="49:21" pos:end="49:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:48"><expr pos:start="53:17" pos:end="53:47"><operator pos:start="53:17" pos:end="53:17">*</operator><operator pos:start="53:18" pos:end="53:18">(</operator><name pos:start="53:19" pos:end="53:31"><name pos:start="53:19" pos:end="53:28">accel_list</name><index pos:start="53:29" pos:end="53:31">[<expr pos:start="53:30" pos:end="53:30"><name pos:start="53:30" pos:end="53:30">i</name></expr>]</index></name><operator pos:start="53:32" pos:end="53:32">.</operator><name pos:start="53:33" pos:end="53:39">allowed</name><operator pos:start="53:40" pos:end="53:40">)</operator> <operator pos:start="53:42" pos:end="53:42">=</operator> <name pos:start="53:44" pos:end="53:47">true</name></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:45"><expr pos:start="55:17" pos:end="55:44"><name pos:start="55:17" pos:end="55:19">ret</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:35"><name pos:start="55:23" pos:end="55:32">accel_list</name><index pos:start="55:33" pos:end="55:35">[<expr pos:start="55:34" pos:end="55:34"><name pos:start="55:34" pos:end="55:34">i</name></expr>]</index></name><operator pos:start="55:36" pos:end="55:36">.</operator><call pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:40">init</name><argument_list pos:start="55:41" pos:end="55:44">(<argument pos:start="55:42" pos:end="55:43"><expr pos:start="55:42" pos:end="55:43"><name pos:start="55:42" pos:end="55:43">mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="57:17" pos:end="73:17"><if pos:start="57:17" pos:end="69:17">if <condition pos:start="57:20" pos:end="57:28">(<expr pos:start="57:21" pos:end="57:27"><name pos:start="57:21" pos:end="57:23">ret</name> <operator pos:start="57:25" pos:end="57:25">&lt;</operator> <literal type="number" pos:start="57:27" pos:end="57:27">0</literal></expr>)</condition> <block pos:start="57:30" pos:end="69:17">{<block_content pos:start="59:21" pos:end="67:53">

                    <expr_stmt pos:start="59:21" pos:end="59:39"><expr pos:start="59:21" pos:end="59:38"><name pos:start="59:21" pos:end="59:31">init_failed</name> <operator pos:start="59:33" pos:end="59:33">=</operator> <name pos:start="59:35" pos:end="59:38">true</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="61:21" pos:end="65:44"><expr pos:start="61:21" pos:end="65:43"><call pos:start="61:21" pos:end="65:43"><name pos:start="61:21" pos:end="61:27">fprintf</name><argument_list pos:start="61:28" pos:end="65:43">(<argument pos:start="61:29" pos:end="61:34"><expr pos:start="61:29" pos:end="61:34"><name pos:start="61:29" pos:end="61:34">stderr</name></expr></argument>, <argument pos:start="61:37" pos:end="61:67"><expr pos:start="61:37" pos:end="61:67"><literal type="string" pos:start="61:37" pos:end="61:67">"failed to initialize %s: %s\n"</literal></expr></argument>,

                            <argument pos:start="63:29" pos:end="63:46"><expr pos:start="63:29" pos:end="63:46"><name pos:start="63:29" pos:end="63:41"><name pos:start="63:29" pos:end="63:38">accel_list</name><index pos:start="63:39" pos:end="63:41">[<expr pos:start="63:40" pos:end="63:40"><name pos:start="63:40" pos:end="63:40">i</name></expr>]</index></name><operator pos:start="63:42" pos:end="63:42">.</operator><name pos:start="63:43" pos:end="63:46">name</name></expr></argument>,

                            <argument pos:start="65:29" pos:end="65:42"><expr pos:start="65:29" pos:end="65:42"><call pos:start="65:29" pos:end="65:42"><name pos:start="65:29" pos:end="65:36">strerror</name><argument_list pos:start="65:37" pos:end="65:42">(<argument pos:start="65:38" pos:end="65:41"><expr pos:start="65:38" pos:end="65:41"><operator pos:start="65:38" pos:end="65:38">-</operator><name pos:start="65:39" pos:end="65:41">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:53"><expr pos:start="67:21" pos:end="67:52"><operator pos:start="67:21" pos:end="67:21">*</operator><operator pos:start="67:22" pos:end="67:22">(</operator><name pos:start="67:23" pos:end="67:35"><name pos:start="67:23" pos:end="67:32">accel_list</name><index pos:start="67:33" pos:end="67:35">[<expr pos:start="67:34" pos:end="67:34"><name pos:start="67:34" pos:end="67:34">i</name></expr>]</index></name><operator pos:start="67:36" pos:end="67:36">.</operator><name pos:start="67:37" pos:end="67:43">allowed</name><operator pos:start="67:44" pos:end="67:44">)</operator> <operator pos:start="67:46" pos:end="67:46">=</operator> <name pos:start="67:48" pos:end="67:52">false</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="69:19" pos:end="73:17">else <block pos:start="69:24" pos:end="73:17">{<block_content pos:start="71:21" pos:end="71:45">

                    <expr_stmt pos:start="71:21" pos:end="71:45"><expr pos:start="71:21" pos:end="71:44"><name pos:start="71:21" pos:end="71:37">accel_initialised</name> <operator pos:start="71:39" pos:end="71:39">=</operator> <name pos:start="71:41" pos:end="71:44">true</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="75:17" pos:end="75:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:40">(<expr pos:start="81:13" pos:end="81:39"><name pos:start="81:13" pos:end="81:13">i</name> <operator pos:start="81:15" pos:end="81:16">==</operator> <call pos:start="81:18" pos:end="81:39"><name pos:start="81:18" pos:end="81:27">ARRAY_SIZE</name><argument_list pos:start="81:28" pos:end="81:39">(<argument pos:start="81:29" pos:end="81:38"><expr pos:start="81:29" pos:end="81:38"><name pos:start="81:29" pos:end="81:38">accel_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:42" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:73">

            <expr_stmt pos:start="83:13" pos:end="83:73"><expr pos:start="83:13" pos:end="83:72"><call pos:start="83:13" pos:end="83:72"><name pos:start="83:13" pos:end="83:19">fprintf</name><argument_list pos:start="83:20" pos:end="83:72">(<argument pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:26">stderr</name></expr></argument>, <argument pos:start="83:29" pos:end="83:66"><expr pos:start="83:29" pos:end="83:66"><literal type="string" pos:start="83:29" pos:end="83:66">"\"%s\" accelerator does not exist.\n"</literal></expr></argument>, <argument pos:start="83:69" pos:end="83:71"><expr pos:start="83:69" pos:end="83:71"><name pos:start="83:69" pos:end="83:71">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="91:5" pos:end="101:5"><if pos:start="91:5" pos:end="101:5">if <condition pos:start="91:8" pos:end="91:27">(<expr pos:start="91:9" pos:end="91:26"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:26">accel_initialised</name></expr>)</condition> <block pos:start="91:29" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:16">

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:25">(<expr pos:start="93:13" pos:end="93:24"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:24">init_failed</name></expr>)</condition> <block pos:start="93:27" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:55">

            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><call pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:19">fprintf</name><argument_list pos:start="95:20" pos:end="95:54">(<argument pos:start="95:21" pos:end="95:26"><expr pos:start="95:21" pos:end="95:26"><name pos:start="95:21" pos:end="95:26">stderr</name></expr></argument>, <argument pos:start="95:29" pos:end="95:53"><expr pos:start="95:29" pos:end="95:53"><literal type="string" pos:start="95:29" pos:end="95:53">"No accelerator found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:16"><expr pos:start="99:9" pos:end="99:15"><call pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:12">exit</name><argument_list pos:start="99:13" pos:end="99:15">(<argument pos:start="99:14" pos:end="99:14"><expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:20">(<expr pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:19">init_failed</name></expr>)</condition> <block pos:start="105:22" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:73">

        <expr_stmt pos:start="107:9" pos:end="107:73"><expr pos:start="107:9" pos:end="107:72"><call pos:start="107:9" pos:end="107:72"><name pos:start="107:9" pos:end="107:15">fprintf</name><argument_list pos:start="107:16" pos:end="107:72">(<argument pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:22">stderr</name></expr></argument>, <argument pos:start="107:25" pos:end="107:51"><expr pos:start="107:25" pos:end="107:51"><literal type="string" pos:start="107:25" pos:end="107:51">"Back to %s accelerator.\n"</literal></expr></argument>, <argument pos:start="107:54" pos:end="107:71"><expr pos:start="107:54" pos:end="107:71"><name pos:start="107:54" pos:end="107:66"><name pos:start="107:54" pos:end="107:63">accel_list</name><index pos:start="107:64" pos:end="107:66">[<expr pos:start="107:65" pos:end="107:65"><name pos:start="107:65" pos:end="107:65">i</name></expr>]</index></name><operator pos:start="107:67" pos:end="107:67">.</operator><name pos:start="107:68" pos:end="107:71">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="113:5" pos:end="113:30">return <expr pos:start="113:12" pos:end="113:29"><operator pos:start="113:12" pos:end="113:12">!</operator><name pos:start="113:13" pos:end="113:29">accel_initialised</name></expr>;</return>

</block_content>}</block></function>
</unit>
