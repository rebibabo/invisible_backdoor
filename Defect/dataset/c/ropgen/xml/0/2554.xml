<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2554.c" pos:tabs="8"><function pos:start="1:1" pos:end="445:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">qemu_rdma_write_one</name><parameter_list pos:start="1:31" pos:end="5:47">(<parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:42"><name pos:start="1:32" pos:end="1:39">QEMUFile</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">f</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:55">RDMAContext</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">rdma</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:48"><decl pos:start="3:32" pos:end="3:48"><type pos:start="3:32" pos:end="3:48"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:48">current_index</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:71"><decl pos:start="3:51" pos:end="3:71"><type pos:start="3:51" pos:end="3:71"><name pos:start="3:51" pos:end="3:58">uint64_t</name></type> <name pos:start="3:60" pos:end="3:71">current_addr</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:46"><decl pos:start="5:32" pos:end="5:46"><type pos:start="5:32" pos:end="5:46"><name pos:start="5:32" pos:end="5:39">uint64_t</name></type> <name pos:start="5:41" pos:end="5:46">length</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="445:1">{<block_content pos:start="9:5" pos:end="443:13">

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:18">ibv_sge</name></name></type> <name pos:start="9:20" pos:end="9:22">sge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:22">ibv_send_wr</name></name></type> <name pos:start="11:24" pos:end="11:30">send_wr</name> <init pos:start="11:32" pos:end="11:38">= <expr pos:start="11:34" pos:end="11:38"><block pos:start="11:34" pos:end="11:38">{ <expr pos:start="11:36" pos:end="11:36"><literal type="number" pos:start="11:36" pos:end="11:36">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:22">ibv_send_wr</name></name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:30">bad_wr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:22">reg_result_idx</name></decl>, <decl pos:start="15:25" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:25" pos:end="15:27">ret</name></decl>, <decl pos:start="15:30" pos:end="15:38"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:30" pos:end="15:34">count</name> <init pos:start="15:36" pos:end="15:38">= <expr pos:start="15:38" pos:end="15:38"><literal type="number" pos:start="15:38" pos:end="15:38">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:18">chunk</name></decl>, <decl pos:start="17:21" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:21" pos:end="17:26">chunks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:24">chunk_start</name></decl>, <decl pos:start="19:27" pos:end="19:36"><type ref="prev" pos:start="19:5" pos:end="19:13"><modifier pos:start="19:27" pos:end="19:27">*</modifier></type><name pos:start="19:28" pos:end="19:36">chunk_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:75"><decl pos:start="21:5" pos:end="21:74"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">RDMALocalBlock</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:25">block</name> <init pos:start="21:27" pos:end="21:74">= <expr pos:start="21:29" pos:end="21:74"><operator pos:start="21:29" pos:end="21:29">&amp;</operator><operator pos:start="21:30" pos:end="21:30">(</operator><name pos:start="21:31" pos:end="21:73"><name pos:start="21:31" pos:end="21:34">rdma</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:52">local_ram_blocks</name><operator pos:start="21:53" pos:end="21:53">.</operator><name pos:start="21:54" pos:end="21:58">block</name><index pos:start="21:59" pos:end="21:73">[<expr pos:start="21:60" pos:end="21:72"><name pos:start="21:60" pos:end="21:72">current_index</name></expr>]</index></name><operator pos:start="21:74" pos:end="21:74">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16">RDMARegister</name></type> <name pos:start="23:18" pos:end="23:20">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:35"><decl pos:start="25:5" pos:end="25:34"><type pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:22">RDMARegisterResult</name> <modifier pos:start="25:24" pos:end="25:24">*</modifier></type><name pos:start="25:25" pos:end="25:34">reg_result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:70"><decl pos:start="27:5" pos:end="27:69"><type pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:21">RDMAControlHeader</name></type> <name pos:start="27:23" pos:end="27:26">resp</name> <init pos:start="27:28" pos:end="27:69">= <expr pos:start="27:30" pos:end="27:69"><block pos:start="27:30" pos:end="27:69">{ <expr pos:start="27:32" pos:end="27:67"><operator pos:start="27:32" pos:end="27:32">.</operator><name pos:start="27:33" pos:end="27:36">type</name> <operator pos:start="27:38" pos:end="27:38">=</operator> <name pos:start="27:40" pos:end="27:67">RDMA_CONTROL_REGISTER_RESULT</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="35:31"><decl pos:start="29:5" pos:end="35:30"><type pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:21">RDMAControlHeader</name></type> <name pos:start="29:23" pos:end="29:26">head</name> <init pos:start="29:28" pos:end="35:30">= <expr pos:start="29:30" pos:end="35:30"><block pos:start="29:30" pos:end="35:30">{ <expr pos:start="29:32" pos:end="29:58"><operator pos:start="29:32" pos:end="29:32">.</operator><name pos:start="29:33" pos:end="29:35">len</name> <operator pos:start="29:37" pos:end="29:37">=</operator> <sizeof pos:start="29:39" pos:end="29:58">sizeof<argument_list pos:start="29:45" pos:end="29:58">(<argument pos:start="29:46" pos:end="29:57"><expr pos:start="29:46" pos:end="29:57"><name pos:start="29:46" pos:end="29:57">RDMARegister</name></expr></argument>)</argument_list></sizeof></expr>,

                               <expr pos:start="31:32" pos:end="31:68"><operator pos:start="31:32" pos:end="31:32">.</operator><name pos:start="31:33" pos:end="31:36">type</name> <operator pos:start="31:38" pos:end="31:38">=</operator> <name pos:start="31:40" pos:end="31:68">RDMA_CONTROL_REGISTER_REQUEST</name></expr>,

                               <expr pos:start="33:32" pos:end="33:42"><operator pos:start="33:32" pos:end="33:32">.</operator><name pos:start="33:33" pos:end="33:38">repeat</name> <operator pos:start="33:40" pos:end="33:40">=</operator> <literal type="number" pos:start="33:42" pos:end="33:42">1</literal></expr>,

                             }</block></expr></init></decl>;</decl_stmt>



<label pos:start="39:1" pos:end="39:6"><name pos:start="39:1" pos:end="39:5">retry</name>:</label>

    <expr_stmt pos:start="41:5" pos:end="43:60"><expr pos:start="41:5" pos:end="43:59"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:7">sge</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:12">addr</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:24">uint64_t</name><operator pos:start="41:25" pos:end="41:25">)</operator><operator pos:start="41:26" pos:end="41:26">(</operator><name pos:start="41:27" pos:end="41:48"><name pos:start="41:27" pos:end="41:31">block</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:48">local_host_addr</name></name> <operator pos:start="41:50" pos:end="41:50">+</operator>

                            <operator pos:start="43:29" pos:end="43:29">(</operator><name pos:start="43:30" pos:end="43:41">current_addr</name> <operator pos:start="43:43" pos:end="43:43">-</operator> <name pos:start="43:45" pos:end="43:57"><name pos:start="43:45" pos:end="43:49">block</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:57">offset</name></name><operator pos:start="43:58" pos:end="43:58">)</operator><operator pos:start="43:59" pos:end="43:59">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:7">sge</name><operator pos:start="45:8" pos:end="45:8">.</operator><name pos:start="45:9" pos:end="45:14">length</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:23">length</name></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:74"><expr pos:start="49:5" pos:end="49:73"><name pos:start="49:5" pos:end="49:9">chunk</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:73"><name pos:start="49:13" pos:end="49:27">ram_chunk_index</name><argument_list pos:start="49:28" pos:end="49:73">(<argument pos:start="49:29" pos:end="49:50"><expr pos:start="49:29" pos:end="49:50"><name pos:start="49:29" pos:end="49:50"><name pos:start="49:29" pos:end="49:33">block</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:50">local_host_addr</name></name></expr></argument>, <argument pos:start="49:53" pos:end="49:72"><expr pos:start="49:53" pos:end="49:72"><operator pos:start="49:53" pos:end="49:53">(</operator><name pos:start="49:54" pos:end="49:60">uint8_t</name> <operator pos:start="49:62" pos:end="49:62">*</operator><operator pos:start="49:63" pos:end="49:63">)</operator> <name pos:start="49:65" pos:end="49:72"><name pos:start="49:65" pos:end="49:67">sge</name><operator pos:start="49:68" pos:end="49:68">.</operator><name pos:start="49:69" pos:end="49:72">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:15">chunk_start</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:47"><name pos:start="51:19" pos:end="51:33">ram_chunk_start</name><argument_list pos:start="51:34" pos:end="51:47">(<argument pos:start="51:35" pos:end="51:39"><expr pos:start="51:35" pos:end="51:39"><name pos:start="51:35" pos:end="51:39">block</name></expr></argument>, <argument pos:start="51:42" pos:end="51:46"><expr pos:start="51:42" pos:end="51:46"><name pos:start="51:42" pos:end="51:46">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="79:5"><if pos:start="55:5" pos:end="67:5">if <condition pos:start="55:8" pos:end="55:28">(<expr pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:13">block</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:27">is_ram_block</name></name></expr>)</condition> <block pos:start="55:30" pos:end="67:5">{<block_content pos:start="57:9" pos:end="65:9">

        <expr_stmt pos:start="57:9" pos:end="57:56"><expr pos:start="57:9" pos:end="57:55"><name pos:start="57:9" pos:end="57:14">chunks</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:23">length</name> <operator pos:start="57:25" pos:end="57:25">/</operator> <operator pos:start="57:27" pos:end="57:27">(</operator><literal type="number" pos:start="57:28" pos:end="57:30">1UL</literal> <operator pos:start="57:32" pos:end="57:33">&lt;&lt;</operator> <name pos:start="57:35" pos:end="57:54">RDMA_REG_CHUNK_SHIFT</name><operator pos:start="57:55" pos:end="57:55">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:70">(<expr pos:start="61:13" pos:end="61:69"><name pos:start="61:13" pos:end="61:18">chunks</name> <operator pos:start="61:20" pos:end="61:21">&amp;&amp;</operator> <operator pos:start="61:23" pos:end="61:23">(</operator><operator pos:start="61:24" pos:end="61:24">(</operator><name pos:start="61:25" pos:end="61:30">length</name> <operator pos:start="61:32" pos:end="61:32">%</operator> <operator pos:start="61:34" pos:end="61:34">(</operator><literal type="number" pos:start="61:35" pos:end="61:37">1UL</literal> <operator pos:start="61:39" pos:end="61:40">&lt;&lt;</operator> <name pos:start="61:42" pos:end="61:61">RDMA_REG_CHUNK_SHIFT</name><operator pos:start="61:62" pos:end="61:62">)</operator><operator pos:start="61:63" pos:end="61:63">)</operator> <operator pos:start="61:65" pos:end="61:66">==</operator> <literal type="number" pos:start="61:68" pos:end="61:68">0</literal><operator pos:start="61:69" pos:end="61:69">)</operator></expr>)</condition> <block pos:start="61:72" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:21">

            <expr_stmt pos:start="63:13" pos:end="63:21"><expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:18">chunks</name><operator pos:start="63:19" pos:end="63:20">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="79:5">else <block pos:start="67:12" pos:end="79:5">{<block_content pos:start="69:9" pos:end="77:9">

        <expr_stmt pos:start="69:9" pos:end="69:63"><expr pos:start="69:9" pos:end="69:62"><name pos:start="69:9" pos:end="69:14">chunks</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <name pos:start="69:18" pos:end="69:30"><name pos:start="69:18" pos:end="69:22">block</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:30">length</name></name> <operator pos:start="69:32" pos:end="69:32">/</operator> <operator pos:start="69:34" pos:end="69:34">(</operator><literal type="number" pos:start="69:35" pos:end="69:37">1UL</literal> <operator pos:start="69:39" pos:end="69:40">&lt;&lt;</operator> <name pos:start="69:42" pos:end="69:61">RDMA_REG_CHUNK_SHIFT</name><operator pos:start="69:62" pos:end="69:62">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:77">(<expr pos:start="73:13" pos:end="73:76"><name pos:start="73:13" pos:end="73:18">chunks</name> <operator pos:start="73:20" pos:end="73:21">&amp;&amp;</operator> <operator pos:start="73:23" pos:end="73:23">(</operator><operator pos:start="73:24" pos:end="73:24">(</operator><name pos:start="73:25" pos:end="73:37"><name pos:start="73:25" pos:end="73:29">block</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:37">length</name></name> <operator pos:start="73:39" pos:end="73:39">%</operator> <operator pos:start="73:41" pos:end="73:41">(</operator><literal type="number" pos:start="73:42" pos:end="73:44">1UL</literal> <operator pos:start="73:46" pos:end="73:47">&lt;&lt;</operator> <name pos:start="73:49" pos:end="73:68">RDMA_REG_CHUNK_SHIFT</name><operator pos:start="73:69" pos:end="73:69">)</operator><operator pos:start="73:70" pos:end="73:70">)</operator> <operator pos:start="73:72" pos:end="73:73">==</operator> <literal type="number" pos:start="73:75" pos:end="73:75">0</literal><operator pos:start="73:76" pos:end="73:76">)</operator></expr>)</condition> <block pos:start="73:79" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:21">

            <expr_stmt pos:start="75:13" pos:end="75:21"><expr pos:start="75:13" pos:end="75:20"><name pos:start="75:13" pos:end="75:18">chunks</name><operator pos:start="75:19" pos:end="75:20">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="85:80"><expr pos:start="83:5" pos:end="85:79"><call pos:start="83:5" pos:end="85:79"><name pos:start="83:5" pos:end="83:12">DDPRINTF</name><argument_list pos:start="83:13" pos:end="85:79">(<argument pos:start="83:14" pos:end="83:61"><expr pos:start="83:14" pos:end="83:61"><literal type="string" pos:start="83:14" pos:end="83:24">"Writing %"</literal> <name pos:start="83:26" pos:end="83:31">PRIu64</name> <literal type="string" pos:start="83:33" pos:end="83:45">" chunks, (%"</literal> <name pos:start="83:47" pos:end="83:52">PRIu64</name> <literal type="string" pos:start="83:54" pos:end="83:61">" MB)\n"</literal></expr></argument>,

        <argument pos:start="85:9" pos:end="85:18"><expr pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:14">chunks</name> <operator pos:start="85:16" pos:end="85:16">+</operator> <literal type="number" pos:start="85:18" pos:end="85:18">1</literal></expr></argument>, <argument pos:start="85:21" pos:end="85:78"><expr pos:start="85:21" pos:end="85:78"><operator pos:start="85:21" pos:end="85:21">(</operator><name pos:start="85:22" pos:end="85:27">chunks</name> <operator pos:start="85:29" pos:end="85:29">+</operator> <literal type="number" pos:start="85:31" pos:end="85:31">1</literal><operator pos:start="85:32" pos:end="85:32">)</operator> <operator pos:start="85:34" pos:end="85:34">*</operator> <operator pos:start="85:36" pos:end="85:36">(</operator><literal type="number" pos:start="85:37" pos:end="85:39">1UL</literal> <operator pos:start="85:41" pos:end="85:42">&lt;&lt;</operator> <name pos:start="85:44" pos:end="85:63">RDMA_REG_CHUNK_SHIFT</name><operator pos:start="85:64" pos:end="85:64">)</operator> <operator pos:start="85:66" pos:end="85:66">/</operator> <literal type="number" pos:start="85:68" pos:end="85:71">1024</literal> <operator pos:start="85:73" pos:end="85:73">/</operator> <literal type="number" pos:start="85:75" pos:end="85:78">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:53"><expr pos:start="89:5" pos:end="89:52"><name pos:start="89:5" pos:end="89:13">chunk_end</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <call pos:start="89:17" pos:end="89:52"><name pos:start="89:17" pos:end="89:29">ram_chunk_end</name><argument_list pos:start="89:30" pos:end="89:52">(<argument pos:start="89:31" pos:end="89:35"><expr pos:start="89:31" pos:end="89:35"><name pos:start="89:31" pos:end="89:35">block</name></expr></argument>, <argument pos:start="89:38" pos:end="89:51"><expr pos:start="89:38" pos:end="89:51"><name pos:start="89:38" pos:end="89:42">chunk</name> <operator pos:start="89:44" pos:end="89:44">+</operator> <name pos:start="89:46" pos:end="89:51">chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="93:23">(<expr pos:start="93:9" pos:end="93:22"><operator pos:start="93:9" pos:end="93:9">!</operator><name pos:start="93:10" pos:end="93:22"><name pos:start="93:10" pos:end="93:13">rdma</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:22">pin_all</name></name></expr>)</condition> <block pos:start="93:25" pos:end="101:5">{<block_content pos:start="97:9" pos:end="100:0">

<cpp:ifdef pos:start="95:1" pos:end="95:34">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:34">RDMA_UNREGISTRATION_EXAMPLE</name></cpp:ifdef>

        <expr_stmt pos:start="97:9" pos:end="100:0"><expr pos:start="97:9" pos:end="97:42"><call pos:start="97:9" pos:end="97:42"><name pos:start="97:9" pos:end="97:36">qemu_rdma_unregister_waiting</name><argument_list pos:start="97:37" pos:end="97:42">(<argument pos:start="97:38" pos:end="97:41"><expr pos:start="97:38" pos:end="97:41"><name pos:start="97:38" pos:end="97:41">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <while pos:start="105:5" pos:end="137:5">while <condition pos:start="105:11" pos:end="105:50">(<expr pos:start="105:12" pos:end="105:49"><call pos:start="105:12" pos:end="105:49"><name pos:start="105:12" pos:end="105:19">test_bit</name><argument_list pos:start="105:20" pos:end="105:49">(<argument pos:start="105:21" pos:end="105:25"><expr pos:start="105:21" pos:end="105:25"><name pos:start="105:21" pos:end="105:25">chunk</name></expr></argument>, <argument pos:start="105:28" pos:end="105:48"><expr pos:start="105:28" pos:end="105:48"><name pos:start="105:28" pos:end="105:48"><name pos:start="105:28" pos:end="105:32">block</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:48">transit_bitmap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:52" pos:end="137:5">{<block_content pos:start="107:9" pos:end="135:9">

        <expr_stmt pos:start="107:9" pos:end="107:20"><expr pos:start="107:9" pos:end="107:19"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:13">void</name><operator pos:start="107:14" pos:end="107:14">)</operator><name pos:start="107:15" pos:end="107:19">count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="115:67"><expr pos:start="109:9" pos:end="115:66"><call pos:start="109:9" pos:end="115:66"><name pos:start="109:9" pos:end="109:16">DDPRINTF</name><argument_list pos:start="109:17" pos:end="115:66">(<argument pos:start="109:18" pos:end="111:62"><expr pos:start="109:18" pos:end="111:62"><literal type="string" pos:start="109:18" pos:end="109:57">"(%d) Not clobbering: block: %d chunk %"</literal> <name pos:start="109:59" pos:end="109:64">PRIu64</name>

                <literal type="string" pos:start="111:17" pos:end="111:28">" current %"</literal> <name pos:start="111:30" pos:end="111:35">PRIu64</name> <literal type="string" pos:start="111:37" pos:end="111:44">" len %"</literal> <name pos:start="111:46" pos:end="111:51">PRIu64</name> <literal type="string" pos:start="111:53" pos:end="111:62">" %d %d\n"</literal></expr></argument>,

                <argument pos:start="113:17" pos:end="113:23"><expr pos:start="113:17" pos:end="113:23"><name pos:start="113:17" pos:end="113:21">count</name><operator pos:start="113:22" pos:end="113:23">++</operator></expr></argument>, <argument pos:start="113:26" pos:end="113:38"><expr pos:start="113:26" pos:end="113:38"><name pos:start="113:26" pos:end="113:38">current_index</name></expr></argument>, <argument pos:start="113:41" pos:end="113:45"><expr pos:start="113:41" pos:end="113:45"><name pos:start="113:41" pos:end="113:45">chunk</name></expr></argument>,

                <argument pos:start="115:17" pos:end="115:24"><expr pos:start="115:17" pos:end="115:24"><name pos:start="115:17" pos:end="115:24"><name pos:start="115:17" pos:end="115:19">sge</name><operator pos:start="115:20" pos:end="115:20">.</operator><name pos:start="115:21" pos:end="115:24">addr</name></name></expr></argument>, <argument pos:start="115:27" pos:end="115:32"><expr pos:start="115:27" pos:end="115:32"><name pos:start="115:27" pos:end="115:32">length</name></expr></argument>, <argument pos:start="115:35" pos:end="115:47"><expr pos:start="115:35" pos:end="115:47"><name pos:start="115:35" pos:end="115:47"><name pos:start="115:35" pos:end="115:38">rdma</name><operator pos:start="115:39" pos:end="115:40">-&gt;</operator><name pos:start="115:41" pos:end="115:47">nb_sent</name></name></expr></argument>, <argument pos:start="115:50" pos:end="115:65"><expr pos:start="115:50" pos:end="115:65"><name pos:start="115:50" pos:end="115:65"><name pos:start="115:50" pos:end="115:54">block</name><operator pos:start="115:55" pos:end="115:56">-&gt;</operator><name pos:start="115:57" pos:end="115:65">nb_chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:67"><expr pos:start="119:9" pos:end="119:66"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:66"><name pos:start="119:15" pos:end="119:38">qemu_rdma_block_for_wrid</name><argument_list pos:start="119:39" pos:end="119:66">(<argument pos:start="119:40" pos:end="119:43"><expr pos:start="119:40" pos:end="119:43"><name pos:start="119:40" pos:end="119:43">rdma</name></expr></argument>, <argument pos:start="119:46" pos:end="119:65"><expr pos:start="119:46" pos:end="119:65"><name pos:start="119:46" pos:end="119:65">RDMA_WRID_RDMA_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="123:9" pos:end="135:9"><if pos:start="123:9" pos:end="135:9">if <condition pos:start="123:12" pos:end="123:20">(<expr pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">&lt;</operator> <literal type="number" pos:start="123:19" pos:end="123:19">0</literal></expr>)</condition> <block pos:start="123:22" pos:end="135:9">{<block_content pos:start="125:13" pos:end="133:23">

            <expr_stmt pos:start="125:13" pos:end="131:75"><expr pos:start="125:13" pos:end="131:74"><call pos:start="125:13" pos:end="131:74"><name pos:start="125:13" pos:end="125:19">fprintf</name><argument_list pos:start="125:20" pos:end="131:74">(<argument pos:start="125:21" pos:end="125:26"><expr pos:start="125:21" pos:end="125:26"><name pos:start="125:21" pos:end="125:26">stderr</name></expr></argument>, <argument pos:start="125:29" pos:end="129:63"><expr pos:start="125:29" pos:end="129:63"><literal type="string" pos:start="125:29" pos:end="125:76">"Failed to Wait for previous write to complete "</literal>

                    <literal type="string" pos:start="127:21" pos:end="127:38">"block %d chunk %"</literal> <name pos:start="127:40" pos:end="127:45">PRIu64</name>

                    <literal type="string" pos:start="129:21" pos:end="129:32">" current %"</literal> <name pos:start="129:34" pos:end="129:39">PRIu64</name> <literal type="string" pos:start="129:41" pos:end="129:48">" len %"</literal> <name pos:start="129:50" pos:end="129:55">PRIu64</name> <literal type="string" pos:start="129:57" pos:end="129:63">" %d\n"</literal></expr></argument>,

                    <argument pos:start="131:21" pos:end="131:33"><expr pos:start="131:21" pos:end="131:33"><name pos:start="131:21" pos:end="131:33">current_index</name></expr></argument>, <argument pos:start="131:36" pos:end="131:40"><expr pos:start="131:36" pos:end="131:40"><name pos:start="131:36" pos:end="131:40">chunk</name></expr></argument>, <argument pos:start="131:43" pos:end="131:50"><expr pos:start="131:43" pos:end="131:50"><name pos:start="131:43" pos:end="131:50"><name pos:start="131:43" pos:end="131:45">sge</name><operator pos:start="131:46" pos:end="131:46">.</operator><name pos:start="131:47" pos:end="131:50">addr</name></name></expr></argument>, <argument pos:start="131:53" pos:end="131:58"><expr pos:start="131:53" pos:end="131:58"><name pos:start="131:53" pos:end="131:58">length</name></expr></argument>, <argument pos:start="131:61" pos:end="131:73"><expr pos:start="131:61" pos:end="131:73"><name pos:start="131:61" pos:end="131:73"><name pos:start="131:61" pos:end="131:64">rdma</name><operator pos:start="131:65" pos:end="131:66">-&gt;</operator><name pos:start="131:67" pos:end="131:73">nb_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="133:13" pos:end="133:23">return <expr pos:start="133:20" pos:end="133:22"><name pos:start="133:20" pos:end="133:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="141:5" pos:end="345:5"><if pos:start="141:5" pos:end="327:5">if <condition pos:start="141:8" pos:end="141:47">(<expr pos:start="141:9" pos:end="141:46"><operator pos:start="141:9" pos:end="141:9">!</operator><name pos:start="141:10" pos:end="141:22"><name pos:start="141:10" pos:end="141:13">rdma</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:22">pin_all</name></name> <operator pos:start="141:24" pos:end="141:25">||</operator> <operator pos:start="141:27" pos:end="141:27">!</operator><name pos:start="141:28" pos:end="141:46"><name pos:start="141:28" pos:end="141:32">block</name><operator pos:start="141:33" pos:end="141:34">-&gt;</operator><name pos:start="141:35" pos:end="141:46">is_ram_block</name></name></expr>)</condition> <block pos:start="141:49" pos:end="327:5">{<block_content pos:start="143:9" pos:end="325:57">

        <if_stmt pos:start="143:9" pos:end="321:9"><if pos:start="143:9" pos:end="303:9">if <condition pos:start="143:12" pos:end="143:39">(<expr pos:start="143:13" pos:end="143:38"><operator pos:start="143:13" pos:end="143:13">!</operator><name pos:start="143:14" pos:end="143:38"><name pos:start="143:14" pos:end="143:18">block</name><operator pos:start="143:19" pos:end="143:20">-&gt;</operator><name pos:start="143:21" pos:end="143:31">remote_keys</name><index pos:start="143:32" pos:end="143:38">[<expr pos:start="143:33" pos:end="143:37"><name pos:start="143:33" pos:end="143:37">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="143:41" pos:end="303:9">{<block_content pos:start="157:13" pos:end="301:60">

            <comment type="block" pos:start="145:13" pos:end="153:15">/*

             * This chunk has not yet been registered, so first check to see

             * if the entire chunk is zero. If so, tell the other size to

             * memset() + madvise() the entire chunk without RDMA.

             */</comment>



            <if_stmt pos:start="157:13" pos:end="215:13"><if pos:start="157:13" pos:end="215:13">if <condition pos:start="157:16" pos:end="161:70">(<expr pos:start="157:17" pos:end="161:69"><call pos:start="157:17" pos:end="157:76"><name pos:start="157:17" pos:end="157:50">can_use_buffer_find_nonzero_offset</name><argument_list pos:start="157:51" pos:end="157:76">(<argument pos:start="157:52" pos:end="157:67"><expr pos:start="157:52" pos:end="157:67"><operator pos:start="157:52" pos:end="157:52">(</operator><name pos:start="157:53" pos:end="157:56">void</name> <operator pos:start="157:58" pos:end="157:58">*</operator><operator pos:start="157:59" pos:end="157:59">)</operator><name pos:start="157:60" pos:end="157:67"><name pos:start="157:60" pos:end="157:62">sge</name><operator pos:start="157:63" pos:end="157:63">.</operator><name pos:start="157:64" pos:end="157:67">addr</name></name></expr></argument>, <argument pos:start="157:70" pos:end="157:75"><expr pos:start="157:70" pos:end="157:75"><name pos:start="157:70" pos:end="157:75">length</name></expr></argument>)</argument_list></call>

                   <operator pos:start="159:20" pos:end="159:21">&amp;&amp;</operator> <call pos:start="159:23" pos:end="161:59"><name pos:start="159:23" pos:end="159:48">buffer_find_nonzero_offset</name><argument_list pos:start="159:49" pos:end="161:59">(<argument pos:start="159:50" pos:end="159:65"><expr pos:start="159:50" pos:end="159:65"><operator pos:start="159:50" pos:end="159:50">(</operator><name pos:start="159:51" pos:end="159:54">void</name> <operator pos:start="159:56" pos:end="159:56">*</operator><operator pos:start="159:57" pos:end="159:57">)</operator><name pos:start="159:58" pos:end="159:65"><name pos:start="159:58" pos:end="159:60">sge</name><operator pos:start="159:61" pos:end="159:61">.</operator><name pos:start="159:62" pos:end="159:65">addr</name></name></expr></argument>,

                                                    <argument pos:start="161:53" pos:end="161:58"><expr pos:start="161:53" pos:end="161:58"><name pos:start="161:53" pos:end="161:58">length</name></expr></argument>)</argument_list></call> <operator pos:start="161:61" pos:end="161:62">==</operator> <name pos:start="161:64" pos:end="161:69">length</name></expr>)</condition> <block pos:start="161:72" pos:end="215:13">{<block_content pos:start="163:17" pos:end="213:25">

                <decl_stmt pos:start="163:17" pos:end="173:38"><decl pos:start="163:17" pos:end="173:37"><type pos:start="163:17" pos:end="163:28"><name pos:start="163:17" pos:end="163:28">RDMACompress</name></type> <name pos:start="163:30" pos:end="163:33">comp</name> <init pos:start="163:35" pos:end="173:37">= <expr pos:start="163:37" pos:end="173:37"><block pos:start="163:37" pos:end="173:37">{

                                        <expr pos:start="165:41" pos:end="165:62"><operator pos:start="165:41" pos:end="165:41">.</operator><name pos:start="165:42" pos:end="165:47">offset</name> <operator pos:start="165:49" pos:end="165:49">=</operator> <name pos:start="165:51" pos:end="165:62">current_addr</name></expr>,

                                        <expr pos:start="167:41" pos:end="167:50"><operator pos:start="167:41" pos:end="167:41">.</operator><name pos:start="167:42" pos:end="167:46">value</name> <operator pos:start="167:48" pos:end="167:48">=</operator> <literal type="number" pos:start="167:50" pos:end="167:50">0</literal></expr>,

                                        <expr pos:start="169:41" pos:end="169:66"><operator pos:start="169:41" pos:end="169:41">.</operator><name pos:start="169:42" pos:end="169:50">block_idx</name> <operator pos:start="169:52" pos:end="169:52">=</operator> <name pos:start="169:54" pos:end="169:66">current_index</name></expr>,

                                        <expr pos:start="171:41" pos:end="171:56"><operator pos:start="171:41" pos:end="171:41">.</operator><name pos:start="171:42" pos:end="171:47">length</name> <operator pos:start="171:49" pos:end="171:49">=</operator> <name pos:start="171:51" pos:end="171:56">length</name></expr>,

                                    }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="177:17" pos:end="177:40"><expr pos:start="177:17" pos:end="177:39"><name pos:start="177:17" pos:end="177:24"><name pos:start="177:17" pos:end="177:20">head</name><operator pos:start="177:21" pos:end="177:21">.</operator><name pos:start="177:22" pos:end="177:24">len</name></name> <operator pos:start="177:26" pos:end="177:26">=</operator> <sizeof pos:start="177:28" pos:end="177:39">sizeof<argument_list pos:start="177:34" pos:end="177:39">(<argument pos:start="177:35" pos:end="177:38"><expr pos:start="177:35" pos:end="177:38"><name pos:start="177:35" pos:end="177:38">comp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:50"><expr pos:start="179:17" pos:end="179:49"><name pos:start="179:17" pos:end="179:25"><name pos:start="179:17" pos:end="179:20">head</name><operator pos:start="179:21" pos:end="179:21">.</operator><name pos:start="179:22" pos:end="179:25">type</name></name> <operator pos:start="179:27" pos:end="179:27">=</operator> <name pos:start="179:29" pos:end="179:49">RDMA_CONTROL_COMPRESS</name></expr>;</expr_stmt>



                <expr_stmt pos:start="183:17" pos:end="189:68"><expr pos:start="183:17" pos:end="189:67"><call pos:start="183:17" pos:end="189:67"><name pos:start="183:17" pos:end="183:24">DDPRINTF</name><argument_list pos:start="183:25" pos:end="189:67">(<argument pos:start="183:26" pos:end="187:64"><expr pos:start="183:26" pos:end="187:64"><literal type="string" pos:start="183:26" pos:end="183:68">"Entire chunk is zero, sending compress: %"</literal>

                    <name pos:start="185:21" pos:end="185:26">PRIu64</name> <literal type="string" pos:start="185:28" pos:end="185:37">" for %d "</literal>

                    <literal type="string" pos:start="187:21" pos:end="187:49">"bytes, index: %d, offset: %"</literal> <name pos:start="187:51" pos:end="187:56">PRId64</name> <literal type="string" pos:start="187:58" pos:end="187:64">"...\n"</literal></expr></argument>,

                    <argument pos:start="189:21" pos:end="189:25"><expr pos:start="189:21" pos:end="189:25"><name pos:start="189:21" pos:end="189:25">chunk</name></expr></argument>, <argument pos:start="189:28" pos:end="189:37"><expr pos:start="189:28" pos:end="189:37"><name pos:start="189:28" pos:end="189:37"><name pos:start="189:28" pos:end="189:30">sge</name><operator pos:start="189:31" pos:end="189:31">.</operator><name pos:start="189:32" pos:end="189:37">length</name></name></expr></argument>, <argument pos:start="189:40" pos:end="189:52"><expr pos:start="189:40" pos:end="189:52"><name pos:start="189:40" pos:end="189:52">current_index</name></expr></argument>, <argument pos:start="189:55" pos:end="189:66"><expr pos:start="189:55" pos:end="189:66"><name pos:start="189:55" pos:end="189:66">current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="193:17" pos:end="193:43"><expr pos:start="193:17" pos:end="193:42"><call pos:start="193:17" pos:end="193:42"><name pos:start="193:17" pos:end="193:35">compress_to_network</name><argument_list pos:start="193:36" pos:end="193:42">(<argument pos:start="193:37" pos:end="193:41"><expr pos:start="193:37" pos:end="193:41"><operator pos:start="193:37" pos:end="193:37">&amp;</operator><name pos:start="193:38" pos:end="193:41">comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="197:69"><expr pos:start="195:17" pos:end="197:68"><name pos:start="195:17" pos:end="195:19">ret</name> <operator pos:start="195:21" pos:end="195:21">=</operator> <call pos:start="195:23" pos:end="197:68"><name pos:start="195:23" pos:end="195:45">qemu_rdma_exchange_send</name><argument_list pos:start="195:46" pos:end="197:68">(<argument pos:start="195:47" pos:end="195:50"><expr pos:start="195:47" pos:end="195:50"><name pos:start="195:47" pos:end="195:50">rdma</name></expr></argument>, <argument pos:start="195:53" pos:end="195:57"><expr pos:start="195:53" pos:end="195:57"><operator pos:start="195:53" pos:end="195:53">&amp;</operator><name pos:start="195:54" pos:end="195:57">head</name></expr></argument>,

                                <argument pos:start="197:33" pos:end="197:49"><expr pos:start="197:33" pos:end="197:49"><operator pos:start="197:33" pos:end="197:33">(</operator><name pos:start="197:34" pos:end="197:40">uint8_t</name> <operator pos:start="197:42" pos:end="197:42">*</operator><operator pos:start="197:43" pos:end="197:43">)</operator> <operator pos:start="197:45" pos:end="197:45">&amp;</operator><name pos:start="197:46" pos:end="197:49">comp</name></expr></argument>, <argument pos:start="197:52" pos:end="197:55"><expr pos:start="197:52" pos:end="197:55"><name pos:start="197:52" pos:end="197:55">NULL</name></expr></argument>, <argument pos:start="197:58" pos:end="197:61"><expr pos:start="197:58" pos:end="197:61"><name pos:start="197:58" pos:end="197:61">NULL</name></expr></argument>, <argument pos:start="197:64" pos:end="197:67"><expr pos:start="197:64" pos:end="197:67"><name pos:start="197:64" pos:end="197:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="201:17" pos:end="205:17"><if pos:start="201:17" pos:end="205:17">if <condition pos:start="201:20" pos:end="201:28">(<expr pos:start="201:21" pos:end="201:27"><name pos:start="201:21" pos:end="201:23">ret</name> <operator pos:start="201:25" pos:end="201:25">&lt;</operator> <literal type="number" pos:start="201:27" pos:end="201:27">0</literal></expr>)</condition> <block pos:start="201:30" pos:end="205:17">{<block_content pos:start="203:21" pos:end="203:32">

                    <return pos:start="203:21" pos:end="203:32">return <expr pos:start="203:28" pos:end="203:31"><operator pos:start="203:28" pos:end="203:28">-</operator><name pos:start="203:29" pos:end="203:31">EIO</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="209:17" pos:end="209:58"><expr pos:start="209:17" pos:end="209:57"><call pos:start="209:17" pos:end="209:57"><name pos:start="209:17" pos:end="209:36">acct_update_position</name><argument_list pos:start="209:37" pos:end="209:57">(<argument pos:start="209:38" pos:end="209:38"><expr pos:start="209:38" pos:end="209:38"><name pos:start="209:38" pos:end="209:38">f</name></expr></argument>, <argument pos:start="209:41" pos:end="209:50"><expr pos:start="209:41" pos:end="209:50"><name pos:start="209:41" pos:end="209:50"><name pos:start="209:41" pos:end="209:43">sge</name><operator pos:start="209:44" pos:end="209:44">.</operator><name pos:start="209:45" pos:end="209:50">length</name></name></expr></argument>, <argument pos:start="209:53" pos:end="209:56"><expr pos:start="209:53" pos:end="209:56"><name pos:start="209:53" pos:end="209:56">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <return pos:start="213:17" pos:end="213:25">return <expr pos:start="213:24" pos:end="213:24"><literal type="number" pos:start="213:24" pos:end="213:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="219:13" pos:end="223:15">/*

             * Otherwise, tell other side to register.

             */</comment>

            <expr_stmt pos:start="225:13" pos:end="225:46"><expr pos:start="225:13" pos:end="225:45"><name pos:start="225:13" pos:end="225:29"><name pos:start="225:13" pos:end="225:15">reg</name><operator pos:start="225:16" pos:end="225:16">.</operator><name pos:start="225:17" pos:end="225:29">current_index</name></name> <operator pos:start="225:31" pos:end="225:31">=</operator> <name pos:start="225:33" pos:end="225:45">current_index</name></expr>;</expr_stmt>

            <if_stmt pos:start="227:13" pos:end="235:13"><if pos:start="227:13" pos:end="231:13">if <condition pos:start="227:16" pos:end="227:36">(<expr pos:start="227:17" pos:end="227:35"><name pos:start="227:17" pos:end="227:35"><name pos:start="227:17" pos:end="227:21">block</name><operator pos:start="227:22" pos:end="227:23">-&gt;</operator><name pos:start="227:24" pos:end="227:35">is_ram_block</name></name></expr>)</condition> <block pos:start="227:38" pos:end="231:13">{<block_content pos:start="229:17" pos:end="229:52">

                <expr_stmt pos:start="229:17" pos:end="229:52"><expr pos:start="229:17" pos:end="229:51"><name pos:start="229:17" pos:end="229:36"><name pos:start="229:17" pos:end="229:19">reg</name><operator pos:start="229:20" pos:end="229:20">.</operator><name pos:start="229:21" pos:end="229:23">key</name><operator pos:start="229:24" pos:end="229:24">.</operator><name pos:start="229:25" pos:end="229:36">current_addr</name></name> <operator pos:start="229:38" pos:end="229:38">=</operator> <name pos:start="229:40" pos:end="229:51">current_addr</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="231:15" pos:end="235:13">else <block pos:start="231:20" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:38">

                <expr_stmt pos:start="233:17" pos:end="233:38"><expr pos:start="233:17" pos:end="233:37"><name pos:start="233:17" pos:end="233:29"><name pos:start="233:17" pos:end="233:19">reg</name><operator pos:start="233:20" pos:end="233:20">.</operator><name pos:start="233:21" pos:end="233:23">key</name><operator pos:start="233:24" pos:end="233:24">.</operator><name pos:start="233:25" pos:end="233:29">chunk</name></name> <operator pos:start="233:31" pos:end="233:31">=</operator> <name pos:start="233:33" pos:end="233:37">chunk</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:32"><expr pos:start="237:13" pos:end="237:31"><name pos:start="237:13" pos:end="237:22"><name pos:start="237:13" pos:end="237:15">reg</name><operator pos:start="237:16" pos:end="237:16">.</operator><name pos:start="237:17" pos:end="237:22">chunks</name></name> <operator pos:start="237:24" pos:end="237:24">=</operator> <name pos:start="237:26" pos:end="237:31">chunks</name></expr>;</expr_stmt>



            <expr_stmt pos:start="241:13" pos:end="245:68"><expr pos:start="241:13" pos:end="245:67"><call pos:start="241:13" pos:end="245:67"><name pos:start="241:13" pos:end="241:20">DDPRINTF</name><argument_list pos:start="241:21" pos:end="245:67">(<argument pos:start="241:22" pos:end="243:64"><expr pos:start="241:22" pos:end="243:64"><literal type="string" pos:start="241:22" pos:end="241:59">"Sending registration request chunk %"</literal> <name pos:start="241:61" pos:end="241:66">PRIu64</name> <literal type="string" pos:start="241:68" pos:end="241:77">" for %d "</literal>

                    <literal type="string" pos:start="243:21" pos:end="243:49">"bytes, index: %d, offset: %"</literal> <name pos:start="243:51" pos:end="243:56">PRId64</name> <literal type="string" pos:start="243:58" pos:end="243:64">"...\n"</literal></expr></argument>,

                    <argument pos:start="245:21" pos:end="245:25"><expr pos:start="245:21" pos:end="245:25"><name pos:start="245:21" pos:end="245:25">chunk</name></expr></argument>, <argument pos:start="245:28" pos:end="245:37"><expr pos:start="245:28" pos:end="245:37"><name pos:start="245:28" pos:end="245:37"><name pos:start="245:28" pos:end="245:30">sge</name><operator pos:start="245:31" pos:end="245:31">.</operator><name pos:start="245:32" pos:end="245:37">length</name></name></expr></argument>, <argument pos:start="245:40" pos:end="245:52"><expr pos:start="245:40" pos:end="245:52"><name pos:start="245:40" pos:end="245:52">current_index</name></expr></argument>, <argument pos:start="245:55" pos:end="245:66"><expr pos:start="245:55" pos:end="245:66"><name pos:start="245:55" pos:end="245:66">current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="249:13" pos:end="249:38"><expr pos:start="249:13" pos:end="249:37"><call pos:start="249:13" pos:end="249:37"><name pos:start="249:13" pos:end="249:31">register_to_network</name><argument_list pos:start="249:32" pos:end="249:37">(<argument pos:start="249:33" pos:end="249:36"><expr pos:start="249:33" pos:end="249:36"><operator pos:start="249:33" pos:end="249:33">&amp;</operator><name pos:start="249:34" pos:end="249:36">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="253:66"><expr pos:start="251:13" pos:end="253:65"><name pos:start="251:13" pos:end="251:15">ret</name> <operator pos:start="251:17" pos:end="251:17">=</operator> <call pos:start="251:19" pos:end="253:65"><name pos:start="251:19" pos:end="251:41">qemu_rdma_exchange_send</name><argument_list pos:start="251:42" pos:end="253:65">(<argument pos:start="251:43" pos:end="251:46"><expr pos:start="251:43" pos:end="251:46"><name pos:start="251:43" pos:end="251:46">rdma</name></expr></argument>, <argument pos:start="251:49" pos:end="251:53"><expr pos:start="251:49" pos:end="251:53"><operator pos:start="251:49" pos:end="251:49">&amp;</operator><name pos:start="251:50" pos:end="251:53">head</name></expr></argument>, <argument pos:start="251:56" pos:end="251:71"><expr pos:start="251:56" pos:end="251:71"><operator pos:start="251:56" pos:end="251:56">(</operator><name pos:start="251:57" pos:end="251:63">uint8_t</name> <operator pos:start="251:65" pos:end="251:65">*</operator><operator pos:start="251:66" pos:end="251:66">)</operator> <operator pos:start="251:68" pos:end="251:68">&amp;</operator><name pos:start="251:69" pos:end="251:71">reg</name></expr></argument>,

                                    <argument pos:start="253:37" pos:end="253:41"><expr pos:start="253:37" pos:end="253:41"><operator pos:start="253:37" pos:end="253:37">&amp;</operator><name pos:start="253:38" pos:end="253:41">resp</name></expr></argument>, <argument pos:start="253:44" pos:end="253:58"><expr pos:start="253:44" pos:end="253:58"><operator pos:start="253:44" pos:end="253:44">&amp;</operator><name pos:start="253:45" pos:end="253:58">reg_result_idx</name></expr></argument>, <argument pos:start="253:61" pos:end="253:64"><expr pos:start="253:61" pos:end="253:64"><name pos:start="253:61" pos:end="253:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="255:13" pos:end="259:13"><if pos:start="255:13" pos:end="259:13">if <condition pos:start="255:16" pos:end="255:24">(<expr pos:start="255:17" pos:end="255:23"><name pos:start="255:17" pos:end="255:19">ret</name> <operator pos:start="255:21" pos:end="255:21">&lt;</operator> <literal type="number" pos:start="255:23" pos:end="255:23">0</literal></expr>)</condition> <block pos:start="255:26" pos:end="259:13">{<block_content pos:start="257:17" pos:end="257:27">

                <return pos:start="257:17" pos:end="257:27">return <expr pos:start="257:24" pos:end="257:26"><name pos:start="257:24" pos:end="257:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="263:13" pos:end="263:79">/* try to overlap this single registration with the one we sent. */</comment>

            <if_stmt pos:start="265:13" pos:end="277:13"><if pos:start="265:13" pos:end="277:13">if <condition pos:start="265:16" pos:end="271:72">(<expr pos:start="265:17" pos:end="271:71"><call pos:start="265:17" pos:end="271:71"><name pos:start="265:17" pos:end="265:47">qemu_rdma_register_and_get_keys</name><argument_list pos:start="265:48" pos:end="271:71">(<argument pos:start="265:49" pos:end="265:52"><expr pos:start="265:49" pos:end="265:52"><name pos:start="265:49" pos:end="265:52">rdma</name></expr></argument>, <argument pos:start="265:55" pos:end="265:59"><expr pos:start="265:55" pos:end="265:59"><name pos:start="265:55" pos:end="265:59">block</name></expr></argument>,

                                                <argument pos:start="267:49" pos:end="267:68"><expr pos:start="267:49" pos:end="267:68"><operator pos:start="267:49" pos:end="267:49">(</operator><name pos:start="267:50" pos:end="267:56">uint8_t</name> <operator pos:start="267:58" pos:end="267:58">*</operator><operator pos:start="267:59" pos:end="267:59">)</operator> <name pos:start="267:61" pos:end="267:68"><name pos:start="267:61" pos:end="267:63">sge</name><operator pos:start="267:64" pos:end="267:64">.</operator><name pos:start="267:65" pos:end="267:68">addr</name></name></expr></argument>,

                                                <argument pos:start="269:49" pos:end="269:57"><expr pos:start="269:49" pos:end="269:57"><operator pos:start="269:49" pos:end="269:49">&amp;</operator><name pos:start="269:50" pos:end="269:57"><name pos:start="269:50" pos:end="269:52">sge</name><operator pos:start="269:53" pos:end="269:53">.</operator><name pos:start="269:54" pos:end="269:57">lkey</name></name></expr></argument>, <argument pos:start="269:60" pos:end="269:63"><expr pos:start="269:60" pos:end="269:63"><name pos:start="269:60" pos:end="269:63">NULL</name></expr></argument>, <argument pos:start="269:66" pos:end="269:70"><expr pos:start="269:66" pos:end="269:70"><name pos:start="269:66" pos:end="269:70">chunk</name></expr></argument>,

                                                <argument pos:start="271:49" pos:end="271:59"><expr pos:start="271:49" pos:end="271:59"><name pos:start="271:49" pos:end="271:59">chunk_start</name></expr></argument>, <argument pos:start="271:62" pos:end="271:70"><expr pos:start="271:62" pos:end="271:70"><name pos:start="271:62" pos:end="271:70">chunk_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="271:74" pos:end="277:13">{<block_content pos:start="273:17" pos:end="275:31">

                <expr_stmt pos:start="273:17" pos:end="273:54"><expr pos:start="273:17" pos:end="273:53"><call pos:start="273:17" pos:end="273:53"><name pos:start="273:17" pos:end="273:23">fprintf</name><argument_list pos:start="273:24" pos:end="273:53">(<argument pos:start="273:25" pos:end="273:30"><expr pos:start="273:25" pos:end="273:30"><name pos:start="273:25" pos:end="273:30">stderr</name></expr></argument>, <argument pos:start="273:33" pos:end="273:52"><expr pos:start="273:33" pos:end="273:52"><literal type="string" pos:start="273:33" pos:end="273:52">"cannot get lkey!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="275:17" pos:end="275:31">return <expr pos:start="275:24" pos:end="275:30"><operator pos:start="275:24" pos:end="275:24">-</operator><name pos:start="275:25" pos:end="275:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="281:13" pos:end="283:63"><expr pos:start="281:13" pos:end="283:62"><name pos:start="281:13" pos:end="281:22">reg_result</name> <operator pos:start="281:24" pos:end="281:24">=</operator> <operator pos:start="281:26" pos:end="281:26">(</operator><name pos:start="281:27" pos:end="281:44">RDMARegisterResult</name> <operator pos:start="281:46" pos:end="281:46">*</operator><operator pos:start="281:47" pos:end="281:47">)</operator>

                    <name pos:start="283:21" pos:end="283:49"><name pos:start="283:21" pos:end="283:24">rdma</name><operator pos:start="283:25" pos:end="283:26">-&gt;</operator><name pos:start="283:27" pos:end="283:33">wr_data</name><index pos:start="283:34" pos:end="283:49">[<expr pos:start="283:35" pos:end="283:48"><name pos:start="283:35" pos:end="283:48">reg_result_idx</name></expr>]</index></name><operator pos:start="283:50" pos:end="283:50">.</operator><name pos:start="283:51" pos:end="283:62">control_curr</name></expr>;</expr_stmt>



            <expr_stmt pos:start="287:13" pos:end="287:42"><expr pos:start="287:13" pos:end="287:41"><call pos:start="287:13" pos:end="287:41"><name pos:start="287:13" pos:end="287:29">network_to_result</name><argument_list pos:start="287:30" pos:end="287:41">(<argument pos:start="287:31" pos:end="287:40"><expr pos:start="287:31" pos:end="287:40"><name pos:start="287:31" pos:end="287:40">reg_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="291:13" pos:end="295:72"><expr pos:start="291:13" pos:end="295:71"><call pos:start="291:13" pos:end="295:71"><name pos:start="291:13" pos:end="291:20">DDPRINTF</name><argument_list pos:start="291:21" pos:end="295:71">(<argument pos:start="291:22" pos:end="293:67"><expr pos:start="291:22" pos:end="293:67"><literal type="string" pos:start="291:22" pos:end="291:52">"Received registration result:"</literal>

                    <literal type="string" pos:start="293:21" pos:end="293:55">" my key: %x their key %x, chunk %"</literal> <name pos:start="293:57" pos:end="293:62">PRIu64</name> <literal type="string" pos:start="293:64" pos:end="293:67">"\n"</literal></expr></argument>,

                    <argument pos:start="295:21" pos:end="295:45"><expr pos:start="295:21" pos:end="295:45"><name pos:start="295:21" pos:end="295:45"><name pos:start="295:21" pos:end="295:25">block</name><operator pos:start="295:26" pos:end="295:27">-&gt;</operator><name pos:start="295:28" pos:end="295:38">remote_keys</name><index pos:start="295:39" pos:end="295:45">[<expr pos:start="295:40" pos:end="295:44"><name pos:start="295:40" pos:end="295:44">chunk</name></expr>]</index></name></expr></argument>, <argument pos:start="295:48" pos:end="295:63"><expr pos:start="295:48" pos:end="295:63"><name pos:start="295:48" pos:end="295:63"><name pos:start="295:48" pos:end="295:57">reg_result</name><operator pos:start="295:58" pos:end="295:59">-&gt;</operator><name pos:start="295:60" pos:end="295:63">rkey</name></name></expr></argument>, <argument pos:start="295:66" pos:end="295:70"><expr pos:start="295:66" pos:end="295:70"><name pos:start="295:66" pos:end="295:70">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="299:13" pos:end="299:57"><expr pos:start="299:13" pos:end="299:56"><name pos:start="299:13" pos:end="299:37"><name pos:start="299:13" pos:end="299:17">block</name><operator pos:start="299:18" pos:end="299:19">-&gt;</operator><name pos:start="299:20" pos:end="299:30">remote_keys</name><index pos:start="299:31" pos:end="299:37">[<expr pos:start="299:32" pos:end="299:36"><name pos:start="299:32" pos:end="299:36">chunk</name></expr>]</index></name> <operator pos:start="299:39" pos:end="299:39">=</operator> <name pos:start="299:41" pos:end="299:56"><name pos:start="299:41" pos:end="299:50">reg_result</name><operator pos:start="299:51" pos:end="299:52">-&gt;</operator><name pos:start="299:53" pos:end="299:56">rkey</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:60"><expr pos:start="301:13" pos:end="301:59"><name pos:start="301:13" pos:end="301:35"><name pos:start="301:13" pos:end="301:17">block</name><operator pos:start="301:18" pos:end="301:19">-&gt;</operator><name pos:start="301:20" pos:end="301:35">remote_host_addr</name></name> <operator pos:start="301:37" pos:end="301:37">=</operator> <name pos:start="301:39" pos:end="301:59"><name pos:start="301:39" pos:end="301:48">reg_result</name><operator pos:start="301:49" pos:end="301:50">-&gt;</operator><name pos:start="301:51" pos:end="301:59">host_addr</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="303:11" pos:end="321:9">else <block pos:start="303:16" pos:end="321:9">{<block_content pos:start="307:13" pos:end="319:13">

            <comment type="block" pos:start="305:13" pos:end="305:43">/* already registered before */</comment>

            <if_stmt pos:start="307:13" pos:end="319:13"><if pos:start="307:13" pos:end="319:13">if <condition pos:start="307:16" pos:end="313:72">(<expr pos:start="307:17" pos:end="313:71"><call pos:start="307:17" pos:end="313:71"><name pos:start="307:17" pos:end="307:47">qemu_rdma_register_and_get_keys</name><argument_list pos:start="307:48" pos:end="313:71">(<argument pos:start="307:49" pos:end="307:52"><expr pos:start="307:49" pos:end="307:52"><name pos:start="307:49" pos:end="307:52">rdma</name></expr></argument>, <argument pos:start="307:55" pos:end="307:59"><expr pos:start="307:55" pos:end="307:59"><name pos:start="307:55" pos:end="307:59">block</name></expr></argument>,

                                                <argument pos:start="309:49" pos:end="309:67"><expr pos:start="309:49" pos:end="309:67"><operator pos:start="309:49" pos:end="309:49">(</operator><name pos:start="309:50" pos:end="309:56">uint8_t</name> <operator pos:start="309:58" pos:end="309:58">*</operator><operator pos:start="309:59" pos:end="309:59">)</operator><name pos:start="309:60" pos:end="309:67"><name pos:start="309:60" pos:end="309:62">sge</name><operator pos:start="309:63" pos:end="309:63">.</operator><name pos:start="309:64" pos:end="309:67">addr</name></name></expr></argument>,

                                                <argument pos:start="311:49" pos:end="311:57"><expr pos:start="311:49" pos:end="311:57"><operator pos:start="311:49" pos:end="311:49">&amp;</operator><name pos:start="311:50" pos:end="311:57"><name pos:start="311:50" pos:end="311:52">sge</name><operator pos:start="311:53" pos:end="311:53">.</operator><name pos:start="311:54" pos:end="311:57">lkey</name></name></expr></argument>, <argument pos:start="311:60" pos:end="311:63"><expr pos:start="311:60" pos:end="311:63"><name pos:start="311:60" pos:end="311:63">NULL</name></expr></argument>, <argument pos:start="311:66" pos:end="311:70"><expr pos:start="311:66" pos:end="311:70"><name pos:start="311:66" pos:end="311:70">chunk</name></expr></argument>,

                                                <argument pos:start="313:49" pos:end="313:59"><expr pos:start="313:49" pos:end="313:59"><name pos:start="313:49" pos:end="313:59">chunk_start</name></expr></argument>, <argument pos:start="313:62" pos:end="313:70"><expr pos:start="313:62" pos:end="313:70"><name pos:start="313:62" pos:end="313:70">chunk_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:74" pos:end="319:13">{<block_content pos:start="315:17" pos:end="317:31">

                <expr_stmt pos:start="315:17" pos:end="315:54"><expr pos:start="315:17" pos:end="315:53"><call pos:start="315:17" pos:end="315:53"><name pos:start="315:17" pos:end="315:23">fprintf</name><argument_list pos:start="315:24" pos:end="315:53">(<argument pos:start="315:25" pos:end="315:30"><expr pos:start="315:25" pos:end="315:30"><name pos:start="315:25" pos:end="315:30">stderr</name></expr></argument>, <argument pos:start="315:33" pos:end="315:52"><expr pos:start="315:33" pos:end="315:52"><literal type="string" pos:start="315:33" pos:end="315:52">"cannot get lkey!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="317:17" pos:end="317:31">return <expr pos:start="317:24" pos:end="317:30"><operator pos:start="317:24" pos:end="317:24">-</operator><name pos:start="317:25" pos:end="317:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:57"><expr pos:start="325:9" pos:end="325:56"><name pos:start="325:9" pos:end="325:28"><name pos:start="325:9" pos:end="325:15">send_wr</name><operator pos:start="325:16" pos:end="325:16">.</operator><name pos:start="325:17" pos:end="325:18">wr</name><operator pos:start="325:19" pos:end="325:19">.</operator><name pos:start="325:20" pos:end="325:23">rdma</name><operator pos:start="325:24" pos:end="325:24">.</operator><name pos:start="325:25" pos:end="325:28">rkey</name></name> <operator pos:start="325:30" pos:end="325:30">=</operator> <name pos:start="325:32" pos:end="325:56"><name pos:start="325:32" pos:end="325:36">block</name><operator pos:start="325:37" pos:end="325:38">-&gt;</operator><name pos:start="325:39" pos:end="325:49">remote_keys</name><index pos:start="325:50" pos:end="325:56">[<expr pos:start="325:51" pos:end="325:55"><name pos:start="325:51" pos:end="325:55">chunk</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="327:7" pos:end="345:5">else <block pos:start="327:12" pos:end="345:5">{<block_content pos:start="329:9" pos:end="343:9">

        <expr_stmt pos:start="329:9" pos:end="329:50"><expr pos:start="329:9" pos:end="329:49"><name pos:start="329:9" pos:end="329:28"><name pos:start="329:9" pos:end="329:15">send_wr</name><operator pos:start="329:16" pos:end="329:16">.</operator><name pos:start="329:17" pos:end="329:18">wr</name><operator pos:start="329:19" pos:end="329:19">.</operator><name pos:start="329:20" pos:end="329:23">rdma</name><operator pos:start="329:24" pos:end="329:24">.</operator><name pos:start="329:25" pos:end="329:28">rkey</name></name> <operator pos:start="329:30" pos:end="329:30">=</operator> <name pos:start="329:32" pos:end="329:49"><name pos:start="329:32" pos:end="329:36">block</name><operator pos:start="329:37" pos:end="329:38">-&gt;</operator><name pos:start="329:39" pos:end="329:49">remote_rkey</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="333:9" pos:end="343:9"><if pos:start="333:9" pos:end="343:9">if <condition pos:start="333:12" pos:end="337:77">(<expr pos:start="333:13" pos:end="337:76"><call pos:start="333:13" pos:end="337:76"><name pos:start="333:13" pos:end="333:43">qemu_rdma_register_and_get_keys</name><argument_list pos:start="333:44" pos:end="337:76">(<argument pos:start="333:45" pos:end="333:48"><expr pos:start="333:45" pos:end="333:48"><name pos:start="333:45" pos:end="333:48">rdma</name></expr></argument>, <argument pos:start="333:51" pos:end="333:55"><expr pos:start="333:51" pos:end="333:55"><name pos:start="333:51" pos:end="333:55">block</name></expr></argument>, <argument pos:start="333:58" pos:end="333:76"><expr pos:start="333:58" pos:end="333:76"><operator pos:start="333:58" pos:end="333:58">(</operator><name pos:start="333:59" pos:end="333:65">uint8_t</name> <operator pos:start="333:67" pos:end="333:67">*</operator><operator pos:start="333:68" pos:end="333:68">)</operator><name pos:start="333:69" pos:end="333:76"><name pos:start="333:69" pos:end="333:71">sge</name><operator pos:start="333:72" pos:end="333:72">.</operator><name pos:start="333:73" pos:end="333:76">addr</name></name></expr></argument>,

                                                     <argument pos:start="335:54" pos:end="335:62"><expr pos:start="335:54" pos:end="335:62"><operator pos:start="335:54" pos:end="335:54">&amp;</operator><name pos:start="335:55" pos:end="335:62"><name pos:start="335:55" pos:end="335:57">sge</name><operator pos:start="335:58" pos:end="335:58">.</operator><name pos:start="335:59" pos:end="335:62">lkey</name></name></expr></argument>, <argument pos:start="335:65" pos:end="335:68"><expr pos:start="335:65" pos:end="335:68"><name pos:start="335:65" pos:end="335:68">NULL</name></expr></argument>, <argument pos:start="335:71" pos:end="335:75"><expr pos:start="335:71" pos:end="335:75"><name pos:start="335:71" pos:end="335:75">chunk</name></expr></argument>,

                                                     <argument pos:start="337:54" pos:end="337:64"><expr pos:start="337:54" pos:end="337:64"><name pos:start="337:54" pos:end="337:64">chunk_start</name></expr></argument>, <argument pos:start="337:67" pos:end="337:75"><expr pos:start="337:67" pos:end="337:75"><name pos:start="337:67" pos:end="337:75">chunk_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="337:79" pos:end="343:9">{<block_content pos:start="339:13" pos:end="341:27">

            <expr_stmt pos:start="339:13" pos:end="339:50"><expr pos:start="339:13" pos:end="339:49"><call pos:start="339:13" pos:end="339:49"><name pos:start="339:13" pos:end="339:19">fprintf</name><argument_list pos:start="339:20" pos:end="339:49">(<argument pos:start="339:21" pos:end="339:26"><expr pos:start="339:21" pos:end="339:26"><name pos:start="339:21" pos:end="339:26">stderr</name></expr></argument>, <argument pos:start="339:29" pos:end="339:48"><expr pos:start="339:29" pos:end="339:48"><literal type="string" pos:start="339:29" pos:end="339:48">"cannot get lkey!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="341:13" pos:end="341:27">return <expr pos:start="341:20" pos:end="341:26"><operator pos:start="341:20" pos:end="341:20">-</operator><name pos:start="341:21" pos:end="341:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="349:5" pos:end="359:7">/*

     * Encode the ram block index and chunk within this wrid.

     * We will use this information at the time of completion

     * to figure out which bitmap to check against and then which

     * chunk in the bitmap to look for.

     */</comment>

    <expr_stmt pos:start="361:5" pos:end="363:62"><expr pos:start="361:5" pos:end="363:61"><name pos:start="361:5" pos:end="361:17"><name pos:start="361:5" pos:end="361:11">send_wr</name><operator pos:start="361:12" pos:end="361:12">.</operator><name pos:start="361:13" pos:end="361:17">wr_id</name></name> <operator pos:start="361:19" pos:end="361:19">=</operator> <call pos:start="361:21" pos:end="363:61"><name pos:start="361:21" pos:end="361:39">qemu_rdma_make_wrid</name><argument_list pos:start="361:40" pos:end="363:61">(<argument pos:start="361:41" pos:end="361:60"><expr pos:start="361:41" pos:end="361:60"><name pos:start="361:41" pos:end="361:60">RDMA_WRID_RDMA_WRITE</name></expr></argument>,

                                        <argument pos:start="363:41" pos:end="363:53"><expr pos:start="363:41" pos:end="363:53"><name pos:start="363:41" pos:end="363:53">current_index</name></expr></argument>, <argument pos:start="363:56" pos:end="363:60"><expr pos:start="363:56" pos:end="363:60"><name pos:start="363:56" pos:end="363:60">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="367:5" pos:end="367:39"><expr pos:start="367:5" pos:end="367:38"><name pos:start="367:5" pos:end="367:18"><name pos:start="367:5" pos:end="367:11">send_wr</name><operator pos:start="367:12" pos:end="367:12">.</operator><name pos:start="367:13" pos:end="367:18">opcode</name></name> <operator pos:start="367:20" pos:end="367:20">=</operator> <name pos:start="367:22" pos:end="367:38">IBV_WR_RDMA_WRITE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:43"><expr pos:start="369:5" pos:end="369:42"><name pos:start="369:5" pos:end="369:22"><name pos:start="369:5" pos:end="369:11">send_wr</name><operator pos:start="369:12" pos:end="369:12">.</operator><name pos:start="369:13" pos:end="369:22">send_flags</name></name> <operator pos:start="369:24" pos:end="369:24">=</operator> <name pos:start="369:26" pos:end="369:42">IBV_SEND_SIGNALED</name></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:27"><expr pos:start="371:5" pos:end="371:26"><name pos:start="371:5" pos:end="371:19"><name pos:start="371:5" pos:end="371:11">send_wr</name><operator pos:start="371:12" pos:end="371:12">.</operator><name pos:start="371:13" pos:end="371:19">sg_list</name></name> <operator pos:start="371:21" pos:end="371:21">=</operator> <operator pos:start="371:23" pos:end="371:23">&amp;</operator><name pos:start="371:24" pos:end="371:26">sge</name></expr>;</expr_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:24"><expr pos:start="373:5" pos:end="373:23"><name pos:start="373:5" pos:end="373:19"><name pos:start="373:5" pos:end="373:11">send_wr</name><operator pos:start="373:12" pos:end="373:12">.</operator><name pos:start="373:13" pos:end="373:19">num_sge</name></name> <operator pos:start="373:21" pos:end="373:21">=</operator> <literal type="number" pos:start="373:23" pos:end="373:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="377:63"><expr pos:start="375:5" pos:end="377:62"><name pos:start="375:5" pos:end="375:31"><name pos:start="375:5" pos:end="375:11">send_wr</name><operator pos:start="375:12" pos:end="375:12">.</operator><name pos:start="375:13" pos:end="375:14">wr</name><operator pos:start="375:15" pos:end="375:15">.</operator><name pos:start="375:16" pos:end="375:19">rdma</name><operator pos:start="375:20" pos:end="375:20">.</operator><name pos:start="375:21" pos:end="375:31">remote_addr</name></name> <operator pos:start="375:33" pos:end="375:33">=</operator> <name pos:start="375:35" pos:end="375:57"><name pos:start="375:35" pos:end="375:39">block</name><operator pos:start="375:40" pos:end="375:41">-&gt;</operator><name pos:start="375:42" pos:end="375:57">remote_host_addr</name></name> <operator pos:start="375:59" pos:end="375:59">+</operator>

                                <operator pos:start="377:33" pos:end="377:33">(</operator><name pos:start="377:34" pos:end="377:45">current_addr</name> <operator pos:start="377:47" pos:end="377:47">-</operator> <name pos:start="377:49" pos:end="377:61"><name pos:start="377:49" pos:end="377:53">block</name><operator pos:start="377:54" pos:end="377:55">-&gt;</operator><name pos:start="377:56" pos:end="377:61">offset</name></name><operator pos:start="377:62" pos:end="377:62">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="381:5" pos:end="387:26"><expr pos:start="381:5" pos:end="387:25"><call pos:start="381:5" pos:end="387:25"><name pos:start="381:5" pos:end="381:13">DDDPRINTF</name><argument_list pos:start="381:14" pos:end="387:25">(<argument pos:start="381:15" pos:end="383:49"><expr pos:start="381:15" pos:end="383:49"><literal type="string" pos:start="381:15" pos:end="381:32">"Posting chunk: %"</literal> <name pos:start="381:34" pos:end="381:39">PRIu64</name> <literal type="string" pos:start="381:41" pos:end="381:53">", addr: %lx"</literal>

              <literal type="string" pos:start="383:15" pos:end="383:37">" remote: %lx, bytes %"</literal> <name pos:start="383:39" pos:end="383:44">PRIu32</name> <literal type="string" pos:start="383:46" pos:end="383:49">"\n"</literal></expr></argument>,

              <argument pos:start="385:15" pos:end="385:19"><expr pos:start="385:15" pos:end="385:19"><name pos:start="385:15" pos:end="385:19">chunk</name></expr></argument>, <argument pos:start="385:22" pos:end="385:29"><expr pos:start="385:22" pos:end="385:29"><name pos:start="385:22" pos:end="385:29"><name pos:start="385:22" pos:end="385:24">sge</name><operator pos:start="385:25" pos:end="385:25">.</operator><name pos:start="385:26" pos:end="385:29">addr</name></name></expr></argument>, <argument pos:start="385:32" pos:end="385:58"><expr pos:start="385:32" pos:end="385:58"><name pos:start="385:32" pos:end="385:58"><name pos:start="385:32" pos:end="385:38">send_wr</name><operator pos:start="385:39" pos:end="385:39">.</operator><name pos:start="385:40" pos:end="385:41">wr</name><operator pos:start="385:42" pos:end="385:42">.</operator><name pos:start="385:43" pos:end="385:46">rdma</name><operator pos:start="385:47" pos:end="385:47">.</operator><name pos:start="385:48" pos:end="385:58">remote_addr</name></name></expr></argument>,

              <argument pos:start="387:15" pos:end="387:24"><expr pos:start="387:15" pos:end="387:24"><name pos:start="387:15" pos:end="387:24"><name pos:start="387:15" pos:end="387:17">sge</name><operator pos:start="387:18" pos:end="387:18">.</operator><name pos:start="387:19" pos:end="387:24">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="391:5" pos:end="397:7">/*

     * ibv_post_send() does not return negative error numbers,

     * per the specification they are positive - no idea why.

     */</comment>

    <expr_stmt pos:start="399:5" pos:end="399:53"><expr pos:start="399:5" pos:end="399:52"><name pos:start="399:5" pos:end="399:7">ret</name> <operator pos:start="399:9" pos:end="399:9">=</operator> <call pos:start="399:11" pos:end="399:52"><name pos:start="399:11" pos:end="399:23">ibv_post_send</name><argument_list pos:start="399:24" pos:end="399:52">(<argument pos:start="399:25" pos:end="399:32"><expr pos:start="399:25" pos:end="399:32"><name pos:start="399:25" pos:end="399:32"><name pos:start="399:25" pos:end="399:28">rdma</name><operator pos:start="399:29" pos:end="399:30">-&gt;</operator><name pos:start="399:31" pos:end="399:32">qp</name></name></expr></argument>, <argument pos:start="399:35" pos:end="399:42"><expr pos:start="399:35" pos:end="399:42"><operator pos:start="399:35" pos:end="399:35">&amp;</operator><name pos:start="399:36" pos:end="399:42">send_wr</name></expr></argument>, <argument pos:start="399:45" pos:end="399:51"><expr pos:start="399:45" pos:end="399:51"><operator pos:start="399:45" pos:end="399:45">&amp;</operator><name pos:start="399:46" pos:end="399:51">bad_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="403:5" pos:end="431:5"><if pos:start="403:5" pos:end="425:5">if <condition pos:start="403:8" pos:end="403:22">(<expr pos:start="403:9" pos:end="403:21"><name pos:start="403:9" pos:end="403:11">ret</name> <operator pos:start="403:13" pos:end="403:14">==</operator> <name pos:start="403:16" pos:end="403:21">ENOMEM</name></expr>)</condition> <block pos:start="403:24" pos:end="425:5">{<block_content pos:start="405:9" pos:end="421:19">

        <expr_stmt pos:start="405:9" pos:end="405:60"><expr pos:start="405:9" pos:end="405:59"><call pos:start="405:9" pos:end="405:59"><name pos:start="405:9" pos:end="405:16">DDPRINTF</name><argument_list pos:start="405:17" pos:end="405:59">(<argument pos:start="405:18" pos:end="405:58"><expr pos:start="405:18" pos:end="405:58"><literal type="string" pos:start="405:18" pos:end="405:58">"send queue is full. wait a little....\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:67"><expr pos:start="407:9" pos:end="407:66"><name pos:start="407:9" pos:end="407:11">ret</name> <operator pos:start="407:13" pos:end="407:13">=</operator> <call pos:start="407:15" pos:end="407:66"><name pos:start="407:15" pos:end="407:38">qemu_rdma_block_for_wrid</name><argument_list pos:start="407:39" pos:end="407:66">(<argument pos:start="407:40" pos:end="407:43"><expr pos:start="407:40" pos:end="407:43"><name pos:start="407:40" pos:end="407:43">rdma</name></expr></argument>, <argument pos:start="407:46" pos:end="407:65"><expr pos:start="407:46" pos:end="407:65"><name pos:start="407:46" pos:end="407:65">RDMA_WRID_RDMA_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="409:9" pos:end="417:9"><if pos:start="409:9" pos:end="417:9">if <condition pos:start="409:12" pos:end="409:20">(<expr pos:start="409:13" pos:end="409:19"><name pos:start="409:13" pos:end="409:15">ret</name> <operator pos:start="409:17" pos:end="409:17">&lt;</operator> <literal type="number" pos:start="409:19" pos:end="409:19">0</literal></expr>)</condition> <block pos:start="409:22" pos:end="417:9">{<block_content pos:start="411:13" pos:end="415:23">

            <expr_stmt pos:start="411:13" pos:end="413:66"><expr pos:start="411:13" pos:end="413:65"><call pos:start="411:13" pos:end="413:65"><name pos:start="411:13" pos:end="411:19">fprintf</name><argument_list pos:start="411:20" pos:end="413:65">(<argument pos:start="411:21" pos:end="411:26"><expr pos:start="411:21" pos:end="411:26"><name pos:start="411:21" pos:end="411:26">stderr</name></expr></argument>, <argument pos:start="411:29" pos:end="413:59"><expr pos:start="411:29" pos:end="413:59"><literal type="string" pos:start="411:29" pos:end="411:61">"rdma migration: failed to make "</literal>

                            <literal type="string" pos:start="413:29" pos:end="413:59">"room in full send queue! %d\n"</literal></expr></argument>, <argument pos:start="413:62" pos:end="413:64"><expr pos:start="413:62" pos:end="413:64"><name pos:start="413:62" pos:end="413:64">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="415:13" pos:end="415:23">return <expr pos:start="415:20" pos:end="415:22"><name pos:start="415:20" pos:end="415:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <goto pos:start="421:9" pos:end="421:19">goto <name pos:start="421:14" pos:end="421:18">retry</name>;</goto>



    </block_content>}</block></if> <if type="elseif" pos:start="425:7" pos:end="431:5">else if <condition pos:start="425:15" pos:end="425:23">(<expr pos:start="425:16" pos:end="425:22"><name pos:start="425:16" pos:end="425:18">ret</name> <operator pos:start="425:20" pos:end="425:20">&gt;</operator> <literal type="number" pos:start="425:22" pos:end="425:22">0</literal></expr>)</condition> <block pos:start="425:25" pos:end="431:5">{<block_content pos:start="427:9" pos:end="429:20">

        <expr_stmt pos:start="427:9" pos:end="427:57"><expr pos:start="427:9" pos:end="427:56"><call pos:start="427:9" pos:end="427:56"><name pos:start="427:9" pos:end="427:14">perror</name><argument_list pos:start="427:15" pos:end="427:56">(<argument pos:start="427:16" pos:end="427:55"><expr pos:start="427:16" pos:end="427:55"><literal type="string" pos:start="427:16" pos:end="427:55">"rdma migration: post rdma write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="429:9" pos:end="429:20">return <expr pos:start="429:16" pos:end="429:19"><operator pos:start="429:16" pos:end="429:16">-</operator><name pos:start="429:17" pos:end="429:19">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="435:5" pos:end="435:42"><expr pos:start="435:5" pos:end="435:41"><call pos:start="435:5" pos:end="435:41"><name pos:start="435:5" pos:end="435:11">set_bit</name><argument_list pos:start="435:12" pos:end="435:41">(<argument pos:start="435:13" pos:end="435:17"><expr pos:start="435:13" pos:end="435:17"><name pos:start="435:13" pos:end="435:17">chunk</name></expr></argument>, <argument pos:start="435:20" pos:end="435:40"><expr pos:start="435:20" pos:end="435:40"><name pos:start="435:20" pos:end="435:40"><name pos:start="435:20" pos:end="435:24">block</name><operator pos:start="435:25" pos:end="435:26">-&gt;</operator><name pos:start="435:27" pos:end="435:40">transit_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:47"><expr pos:start="437:5" pos:end="437:46"><call pos:start="437:5" pos:end="437:46"><name pos:start="437:5" pos:end="437:24">acct_update_position</name><argument_list pos:start="437:25" pos:end="437:46">(<argument pos:start="437:26" pos:end="437:26"><expr pos:start="437:26" pos:end="437:26"><name pos:start="437:26" pos:end="437:26">f</name></expr></argument>, <argument pos:start="437:29" pos:end="437:38"><expr pos:start="437:29" pos:end="437:38"><name pos:start="437:29" pos:end="437:38"><name pos:start="437:29" pos:end="437:31">sge</name><operator pos:start="437:32" pos:end="437:32">.</operator><name pos:start="437:33" pos:end="437:38">length</name></name></expr></argument>, <argument pos:start="437:41" pos:end="437:45"><expr pos:start="437:41" pos:end="437:45"><name pos:start="437:41" pos:end="437:45">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:25"><expr pos:start="439:5" pos:end="439:24"><name pos:start="439:5" pos:end="439:22"><name pos:start="439:5" pos:end="439:8">rdma</name><operator pos:start="439:9" pos:end="439:10">-&gt;</operator><name pos:start="439:11" pos:end="439:22">total_writes</name></name><operator pos:start="439:23" pos:end="439:24">++</operator></expr>;</expr_stmt>



    <return pos:start="443:5" pos:end="443:13">return <expr pos:start="443:12" pos:end="443:12"><literal type="number" pos:start="443:12" pos:end="443:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
