<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9750.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">spapr_populate_memory</name><parameter_list pos:start="1:33" pos:end="1:68">(<parameter pos:start="1:34" pos:end="1:56"><decl pos:start="1:34" pos:end="1:56"><type pos:start="1:34" pos:end="1:56"><name pos:start="1:34" pos:end="1:49">sPAPREnvironment</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">spapr</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:62">void</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">fdt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:13">

    <decl_stmt pos:start="5:5" pos:end="9:50"><decl pos:start="5:5" pos:end="9:49"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:28"><name pos:start="5:14" pos:end="5:26">associativity</name><index pos:start="5:27" pos:end="5:28">[]</index></name> <init pos:start="5:30" pos:end="9:49">= <expr pos:start="5:32" pos:end="9:49"><block pos:start="5:32" pos:end="9:49">{<expr pos:start="5:33" pos:end="5:48"><call pos:start="5:33" pos:end="5:48"><name pos:start="5:33" pos:end="5:43">cpu_to_be32</name><argument_list pos:start="5:44" pos:end="5:48">(<argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><literal type="number" pos:start="5:45" pos:end="5:47">0x4</literal></expr></argument>)</argument_list></call></expr>, <expr pos:start="5:51" pos:end="5:66"><call pos:start="5:51" pos:end="5:66"><name pos:start="5:51" pos:end="5:61">cpu_to_be32</name><argument_list pos:start="5:62" pos:end="5:66">(<argument pos:start="5:63" pos:end="5:65"><expr pos:start="5:63" pos:end="5:65"><literal type="number" pos:start="5:63" pos:end="5:65">0x0</literal></expr></argument>)</argument_list></call></expr>,

                                <expr pos:start="7:33" pos:end="7:48"><call pos:start="7:33" pos:end="7:48"><name pos:start="7:33" pos:end="7:43">cpu_to_be32</name><argument_list pos:start="7:44" pos:end="7:48">(<argument pos:start="7:45" pos:end="7:47"><expr pos:start="7:45" pos:end="7:47"><literal type="number" pos:start="7:45" pos:end="7:47">0x0</literal></expr></argument>)</argument_list></call></expr>, <expr pos:start="7:51" pos:end="7:66"><call pos:start="7:51" pos:end="7:66"><name pos:start="7:51" pos:end="7:61">cpu_to_be32</name><argument_list pos:start="7:62" pos:end="7:66">(<argument pos:start="7:63" pos:end="7:65"><expr pos:start="7:63" pos:end="7:65"><literal type="number" pos:start="7:63" pos:end="7:65">0x0</literal></expr></argument>)</argument_list></call></expr>,

                                <macro pos:start="9:33" pos:end="9:48"><name pos:start="9:33" pos:end="9:43">cpu_to_be32</name><argument_list pos:start="9:44" pos:end="9:48">(<argument pos:start="9:45" pos:end="9:47"><literal type="number" pos:start="9:45" pos:end="9:47">0x0</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:21"><name pos:start="11:10" pos:end="11:17">mem_name</name><index pos:start="11:18" pos:end="11:21">[<expr pos:start="11:19" pos:end="11:20"><literal type="number" pos:start="11:19" pos:end="11:20">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:21">node0_size</name></decl>, <decl pos:start="13:24" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:10"/><name pos:start="13:24" pos:end="13:32">mem_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:32"><name pos:start="15:14" pos:end="15:29">mem_reg_property</name><index pos:start="15:30" pos:end="15:32">[<expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">off</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:24">/* memory node(s) */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:62"><expr pos:start="23:5" pos:end="23:61"><name pos:start="23:5" pos:end="23:14">node0_size</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <ternary pos:start="23:18" pos:end="23:61"><condition pos:start="23:18" pos:end="23:38"><expr pos:start="23:18" pos:end="23:36"><operator pos:start="23:18" pos:end="23:18">(</operator><name pos:start="23:19" pos:end="23:31">nb_numa_nodes</name> <operator pos:start="23:33" pos:end="23:33">&gt;</operator> <literal type="number" pos:start="23:35" pos:end="23:35">1</literal><operator pos:start="23:36" pos:end="23:36">)</operator></expr> ?</condition><then pos:start="23:40" pos:end="23:50"> <expr pos:start="23:40" pos:end="23:50"><name pos:start="23:40" pos:end="23:50"><name pos:start="23:40" pos:end="23:47">node_mem</name><index pos:start="23:48" pos:end="23:50">[<expr pos:start="23:49" pos:end="23:49"><literal type="number" pos:start="23:49" pos:end="23:49">0</literal></expr>]</index></name></expr> </then><else pos:start="23:52" pos:end="23:61">: <expr pos:start="23:54" pos:end="23:61"><name pos:start="23:54" pos:end="23:61">ram_size</name></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:13">/* RMA */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:20">mem_reg_property</name><index pos:start="29:21" pos:end="29:23">[<expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>]</index></name> <operator pos:start="29:25" pos:end="29:25">=</operator> <literal type="number" pos:start="29:27" pos:end="29:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:55"><expr pos:start="31:5" pos:end="31:54"><name pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:20">mem_reg_property</name><index pos:start="31:21" pos:end="31:23">[<expr pos:start="31:22" pos:end="31:22"><literal type="number" pos:start="31:22" pos:end="31:22">1</literal></expr>]</index></name> <operator pos:start="31:25" pos:end="31:25">=</operator> <call pos:start="31:27" pos:end="31:54"><name pos:start="31:27" pos:end="31:37">cpu_to_be64</name><argument_list pos:start="31:38" pos:end="31:54">(<argument pos:start="31:39" pos:end="31:53"><expr pos:start="31:39" pos:end="31:53"><name pos:start="31:39" pos:end="31:53"><name pos:start="31:39" pos:end="31:43">spapr</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:53">rma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:7">off</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:45"><name pos:start="33:11" pos:end="33:25">fdt_add_subnode</name><argument_list pos:start="33:26" pos:end="33:45">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">fdt</name></expr></argument>, <argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">0</literal></expr></argument>, <argument pos:start="33:35" pos:end="33:44"><expr pos:start="33:35" pos:end="33:44"><literal type="string" pos:start="33:35" pos:end="33:44">"memory@0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:14"><expr pos:start="35:5" pos:end="35:13"><call pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:8">_FDT</name><argument_list pos:start="35:9" pos:end="35:13">(<argument pos:start="35:10" pos:end="35:12"><expr pos:start="35:10" pos:end="35:12"><name pos:start="35:10" pos:end="35:12">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:66"><expr pos:start="37:5" pos:end="37:65"><call pos:start="37:5" pos:end="37:65"><name pos:start="37:5" pos:end="37:8">_FDT</name><argument_list pos:start="37:9" pos:end="37:65">(<argument pos:start="37:10" pos:end="37:64"><expr pos:start="37:10" pos:end="37:64"><operator pos:start="37:10" pos:end="37:10">(</operator><call pos:start="37:11" pos:end="37:63"><name pos:start="37:11" pos:end="37:28">fdt_setprop_string</name><argument_list pos:start="37:29" pos:end="37:63">(<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">fdt</name></expr></argument>, <argument pos:start="37:35" pos:end="37:37"><expr pos:start="37:35" pos:end="37:37"><name pos:start="37:35" pos:end="37:37">off</name></expr></argument>, <argument pos:start="37:40" pos:end="37:52"><expr pos:start="37:40" pos:end="37:52"><literal type="string" pos:start="37:40" pos:end="37:52">"device_type"</literal></expr></argument>, <argument pos:start="37:55" pos:end="37:62"><expr pos:start="37:55" pos:end="37:62"><literal type="string" pos:start="37:55" pos:end="37:62">"memory"</literal></expr></argument>)</argument_list></call><operator pos:start="37:64" pos:end="37:64">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:50"><expr pos:start="39:5" pos:end="41:49"><call pos:start="39:5" pos:end="41:49"><name pos:start="39:5" pos:end="39:8">_FDT</name><argument_list pos:start="39:9" pos:end="41:49">(<argument pos:start="39:10" pos:end="41:48"><expr pos:start="39:10" pos:end="41:48"><operator pos:start="39:10" pos:end="39:10">(</operator><call pos:start="39:11" pos:end="41:47"><name pos:start="39:11" pos:end="39:21">fdt_setprop</name><argument_list pos:start="39:22" pos:end="41:47">(<argument pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:25">fdt</name></expr></argument>, <argument pos:start="39:28" pos:end="39:30"><expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">off</name></expr></argument>, <argument pos:start="39:33" pos:end="39:37"><expr pos:start="39:33" pos:end="39:37"><literal type="string" pos:start="39:33" pos:end="39:37">"reg"</literal></expr></argument>, <argument pos:start="39:40" pos:end="39:55"><expr pos:start="39:40" pos:end="39:55"><name pos:start="39:40" pos:end="39:55">mem_reg_property</name></expr></argument>,

                      <argument pos:start="41:23" pos:end="41:46"><expr pos:start="41:23" pos:end="41:46"><sizeof pos:start="41:23" pos:end="41:46">sizeof<argument_list pos:start="41:29" pos:end="41:46">(<argument pos:start="41:30" pos:end="41:45"><expr pos:start="41:30" pos:end="41:45"><name pos:start="41:30" pos:end="41:45">mem_reg_property</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="41:48" pos:end="41:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="45:47"><expr pos:start="43:5" pos:end="45:46"><call pos:start="43:5" pos:end="45:46"><name pos:start="43:5" pos:end="43:8">_FDT</name><argument_list pos:start="43:9" pos:end="45:46">(<argument pos:start="43:10" pos:end="45:45"><expr pos:start="43:10" pos:end="45:45"><operator pos:start="43:10" pos:end="43:10">(</operator><call pos:start="43:11" pos:end="45:44"><name pos:start="43:11" pos:end="43:21">fdt_setprop</name><argument_list pos:start="43:22" pos:end="45:44">(<argument pos:start="43:23" pos:end="43:25"><expr pos:start="43:23" pos:end="43:25"><name pos:start="43:23" pos:end="43:25">fdt</name></expr></argument>, <argument pos:start="43:28" pos:end="43:30"><expr pos:start="43:28" pos:end="43:30"><name pos:start="43:28" pos:end="43:30">off</name></expr></argument>, <argument pos:start="43:33" pos:end="43:51"><expr pos:start="43:33" pos:end="43:51"><literal type="string" pos:start="43:33" pos:end="43:51">"ibm,associativity"</literal></expr></argument>, <argument pos:start="43:54" pos:end="43:66"><expr pos:start="43:54" pos:end="43:66"><name pos:start="43:54" pos:end="43:66">associativity</name></expr></argument>,

                      <argument pos:start="45:23" pos:end="45:43"><expr pos:start="45:23" pos:end="45:43"><sizeof pos:start="45:23" pos:end="45:43">sizeof<argument_list pos:start="45:29" pos:end="45:43">(<argument pos:start="45:30" pos:end="45:42"><expr pos:start="45:30" pos:end="45:42"><name pos:start="45:30" pos:end="45:42">associativity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="45:45" pos:end="45:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:21">/* RAM: Node 0 */</comment>

    <if_stmt pos:start="51:5" pos:end="75:5"><if pos:start="51:5" pos:end="75:5">if <condition pos:start="51:8" pos:end="51:37">(<expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:18">node0_size</name> <operator pos:start="51:20" pos:end="51:20">&gt;</operator> <name pos:start="51:22" pos:end="51:36"><name pos:start="51:22" pos:end="51:26">spapr</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:36">rma_size</name></name></expr>)</condition> <block pos:start="51:39" pos:end="75:5">{<block_content pos:start="53:9" pos:end="73:51">

        <expr_stmt pos:start="53:9" pos:end="53:59"><expr pos:start="53:9" pos:end="53:58"><name pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:24">mem_reg_property</name><index pos:start="53:25" pos:end="53:27">[<expr pos:start="53:26" pos:end="53:26"><literal type="number" pos:start="53:26" pos:end="53:26">0</literal></expr>]</index></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <call pos:start="53:31" pos:end="53:58"><name pos:start="53:31" pos:end="53:41">cpu_to_be64</name><argument_list pos:start="53:42" pos:end="53:58">(<argument pos:start="53:43" pos:end="53:57"><expr pos:start="53:43" pos:end="53:57"><name pos:start="53:43" pos:end="53:57"><name pos:start="53:43" pos:end="53:47">spapr</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:57">rma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:72"><expr pos:start="55:9" pos:end="55:71"><name pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:24">mem_reg_property</name><index pos:start="55:25" pos:end="55:27">[<expr pos:start="55:26" pos:end="55:26"><literal type="number" pos:start="55:26" pos:end="55:26">1</literal></expr>]</index></name> <operator pos:start="55:29" pos:end="55:29">=</operator> <call pos:start="55:31" pos:end="55:71"><name pos:start="55:31" pos:end="55:41">cpu_to_be64</name><argument_list pos:start="55:42" pos:end="55:71">(<argument pos:start="55:43" pos:end="55:70"><expr pos:start="55:43" pos:end="55:70"><name pos:start="55:43" pos:end="55:52">node0_size</name> <operator pos:start="55:54" pos:end="55:54">-</operator> <name pos:start="55:56" pos:end="55:70"><name pos:start="55:56" pos:end="55:60">spapr</name><operator pos:start="55:61" pos:end="55:62">-&gt;</operator><name pos:start="55:63" pos:end="55:70">rma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:68"><expr pos:start="59:9" pos:end="59:67"><call pos:start="59:9" pos:end="59:67"><name pos:start="59:9" pos:end="59:15">sprintf</name><argument_list pos:start="59:16" pos:end="59:67">(<argument pos:start="59:17" pos:end="59:24"><expr pos:start="59:17" pos:end="59:24"><name pos:start="59:17" pos:end="59:24">mem_name</name></expr></argument>, <argument pos:start="59:27" pos:end="59:49"><expr pos:start="59:27" pos:end="59:49"><literal type="string" pos:start="59:27" pos:end="59:35">"memory@"</literal> <name pos:start="59:37" pos:end="59:49">TARGET_FMT_lx</name></expr></argument>, <argument pos:start="59:52" pos:end="59:66"><expr pos:start="59:52" pos:end="59:66"><name pos:start="59:52" pos:end="59:66"><name pos:start="59:52" pos:end="59:56">spapr</name><operator pos:start="59:57" pos:end="59:58">-&gt;</operator><name pos:start="59:59" pos:end="59:66">rma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:11">off</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:47"><name pos:start="61:15" pos:end="61:29">fdt_add_subnode</name><argument_list pos:start="61:30" pos:end="61:47">(<argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:33">fdt</name></expr></argument>, <argument pos:start="61:36" pos:end="61:36"><expr pos:start="61:36" pos:end="61:36"><literal type="number" pos:start="61:36" pos:end="61:36">0</literal></expr></argument>, <argument pos:start="61:39" pos:end="61:46"><expr pos:start="61:39" pos:end="61:46"><name pos:start="61:39" pos:end="61:46">mem_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:18"><expr pos:start="63:9" pos:end="63:17"><call pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:12">_FDT</name><argument_list pos:start="63:13" pos:end="63:17">(<argument pos:start="63:14" pos:end="63:16"><expr pos:start="63:14" pos:end="63:16"><name pos:start="63:14" pos:end="63:16">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:70"><expr pos:start="65:9" pos:end="65:69"><call pos:start="65:9" pos:end="65:69"><name pos:start="65:9" pos:end="65:12">_FDT</name><argument_list pos:start="65:13" pos:end="65:69">(<argument pos:start="65:14" pos:end="65:68"><expr pos:start="65:14" pos:end="65:68"><operator pos:start="65:14" pos:end="65:14">(</operator><call pos:start="65:15" pos:end="65:67"><name pos:start="65:15" pos:end="65:32">fdt_setprop_string</name><argument_list pos:start="65:33" pos:end="65:67">(<argument pos:start="65:34" pos:end="65:36"><expr pos:start="65:34" pos:end="65:36"><name pos:start="65:34" pos:end="65:36">fdt</name></expr></argument>, <argument pos:start="65:39" pos:end="65:41"><expr pos:start="65:39" pos:end="65:41"><name pos:start="65:39" pos:end="65:41">off</name></expr></argument>, <argument pos:start="65:44" pos:end="65:56"><expr pos:start="65:44" pos:end="65:56"><literal type="string" pos:start="65:44" pos:end="65:56">"device_type"</literal></expr></argument>, <argument pos:start="65:59" pos:end="65:66"><expr pos:start="65:59" pos:end="65:66"><literal type="string" pos:start="65:59" pos:end="65:66">"memory"</literal></expr></argument>)</argument_list></call><operator pos:start="65:68" pos:end="65:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="69:54"><expr pos:start="67:9" pos:end="69:53"><call pos:start="67:9" pos:end="69:53"><name pos:start="67:9" pos:end="67:12">_FDT</name><argument_list pos:start="67:13" pos:end="69:53">(<argument pos:start="67:14" pos:end="69:52"><expr pos:start="67:14" pos:end="69:52"><operator pos:start="67:14" pos:end="67:14">(</operator><call pos:start="67:15" pos:end="69:51"><name pos:start="67:15" pos:end="67:25">fdt_setprop</name><argument_list pos:start="67:26" pos:end="69:51">(<argument pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:29">fdt</name></expr></argument>, <argument pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><name pos:start="67:32" pos:end="67:34">off</name></expr></argument>, <argument pos:start="67:37" pos:end="67:41"><expr pos:start="67:37" pos:end="67:41"><literal type="string" pos:start="67:37" pos:end="67:41">"reg"</literal></expr></argument>, <argument pos:start="67:44" pos:end="67:59"><expr pos:start="67:44" pos:end="67:59"><name pos:start="67:44" pos:end="67:59">mem_reg_property</name></expr></argument>,

                          <argument pos:start="69:27" pos:end="69:50"><expr pos:start="69:27" pos:end="69:50"><sizeof pos:start="69:27" pos:end="69:50">sizeof<argument_list pos:start="69:33" pos:end="69:50">(<argument pos:start="69:34" pos:end="69:49"><expr pos:start="69:34" pos:end="69:49"><name pos:start="69:34" pos:end="69:49">mem_reg_property</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="69:52" pos:end="69:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:51"><expr pos:start="71:9" pos:end="73:50"><call pos:start="71:9" pos:end="73:50"><name pos:start="71:9" pos:end="71:12">_FDT</name><argument_list pos:start="71:13" pos:end="73:50">(<argument pos:start="71:14" pos:end="73:49"><expr pos:start="71:14" pos:end="73:49"><operator pos:start="71:14" pos:end="71:14">(</operator><call pos:start="71:15" pos:end="73:48"><name pos:start="71:15" pos:end="71:25">fdt_setprop</name><argument_list pos:start="71:26" pos:end="73:48">(<argument pos:start="71:27" pos:end="71:29"><expr pos:start="71:27" pos:end="71:29"><name pos:start="71:27" pos:end="71:29">fdt</name></expr></argument>, <argument pos:start="71:32" pos:end="71:34"><expr pos:start="71:32" pos:end="71:34"><name pos:start="71:32" pos:end="71:34">off</name></expr></argument>, <argument pos:start="71:37" pos:end="71:55"><expr pos:start="71:37" pos:end="71:55"><literal type="string" pos:start="71:37" pos:end="71:55">"ibm,associativity"</literal></expr></argument>, <argument pos:start="71:58" pos:end="71:70"><expr pos:start="71:58" pos:end="71:70"><name pos:start="71:58" pos:end="71:70">associativity</name></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:47"><expr pos:start="73:27" pos:end="73:47"><sizeof pos:start="73:27" pos:end="73:47">sizeof<argument_list pos:start="73:33" pos:end="73:47">(<argument pos:start="73:34" pos:end="73:46"><expr pos:start="73:34" pos:end="73:46"><name pos:start="73:34" pos:end="73:46">associativity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="73:49" pos:end="73:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:32">/* RAM: Node 1 and beyond */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:27"><expr pos:start="81:5" pos:end="81:26"><name pos:start="81:5" pos:end="81:13">mem_start</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:26">node0_size</name></expr>;</expr_stmt>

    <for pos:start="83:5" pos:end="109:5">for <control pos:start="83:9" pos:end="83:39">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">1</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:34"><expr pos:start="83:17" pos:end="83:33"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <name pos:start="83:21" pos:end="83:33">nb_numa_nodes</name></expr>;</condition> <incr pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><name pos:start="83:36" pos:end="83:36">i</name><operator pos:start="83:37" pos:end="83:38">++</operator></expr></incr>)</control> <block pos:start="83:41" pos:end="109:5">{<block_content pos:start="85:9" pos:end="107:33">

        <expr_stmt pos:start="85:9" pos:end="85:53"><expr pos:start="85:9" pos:end="85:52"><name pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:24">mem_reg_property</name><index pos:start="85:25" pos:end="85:27">[<expr pos:start="85:26" pos:end="85:26"><literal type="number" pos:start="85:26" pos:end="85:26">0</literal></expr>]</index></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <call pos:start="85:31" pos:end="85:52"><name pos:start="85:31" pos:end="85:41">cpu_to_be64</name><argument_list pos:start="85:42" pos:end="85:52">(<argument pos:start="85:43" pos:end="85:51"><expr pos:start="85:43" pos:end="85:51"><name pos:start="85:43" pos:end="85:51">mem_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:55"><expr pos:start="87:9" pos:end="87:54"><name pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:24">mem_reg_property</name><index pos:start="87:25" pos:end="87:27">[<expr pos:start="87:26" pos:end="87:26"><literal type="number" pos:start="87:26" pos:end="87:26">1</literal></expr>]</index></name> <operator pos:start="87:29" pos:end="87:29">=</operator> <call pos:start="87:31" pos:end="87:54"><name pos:start="87:31" pos:end="87:41">cpu_to_be64</name><argument_list pos:start="87:42" pos:end="87:54">(<argument pos:start="87:43" pos:end="87:53"><expr pos:start="87:43" pos:end="87:53"><name pos:start="87:43" pos:end="87:53"><name pos:start="87:43" pos:end="87:50">node_mem</name><index pos:start="87:51" pos:end="87:53">[<expr pos:start="87:52" pos:end="87:52"><name pos:start="87:52" pos:end="87:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:61"><expr pos:start="89:9" pos:end="89:60"><name pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:21">associativity</name><index pos:start="89:22" pos:end="89:24">[<expr pos:start="89:23" pos:end="89:23"><literal type="number" pos:start="89:23" pos:end="89:23">3</literal></expr>]</index></name> <operator pos:start="89:26" pos:end="89:26">=</operator> <name pos:start="89:28" pos:end="89:43"><name pos:start="89:28" pos:end="89:40">associativity</name><index pos:start="89:41" pos:end="89:43">[<expr pos:start="89:42" pos:end="89:42"><literal type="number" pos:start="89:42" pos:end="89:42">4</literal></expr>]</index></name> <operator pos:start="89:45" pos:end="89:45">=</operator> <call pos:start="89:47" pos:end="89:60"><name pos:start="89:47" pos:end="89:57">cpu_to_be32</name><argument_list pos:start="89:58" pos:end="89:60">(<argument pos:start="89:59" pos:end="89:59"><expr pos:start="89:59" pos:end="89:59"><name pos:start="89:59" pos:end="89:59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:62"><expr pos:start="91:9" pos:end="91:61"><call pos:start="91:9" pos:end="91:61"><name pos:start="91:9" pos:end="91:15">sprintf</name><argument_list pos:start="91:16" pos:end="91:61">(<argument pos:start="91:17" pos:end="91:24"><expr pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:24">mem_name</name></expr></argument>, <argument pos:start="91:27" pos:end="91:49"><expr pos:start="91:27" pos:end="91:49"><literal type="string" pos:start="91:27" pos:end="91:35">"memory@"</literal> <name pos:start="91:37" pos:end="91:49">TARGET_FMT_lx</name></expr></argument>, <argument pos:start="91:52" pos:end="91:60"><expr pos:start="91:52" pos:end="91:60"><name pos:start="91:52" pos:end="91:60">mem_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:48"><expr pos:start="93:9" pos:end="93:47"><name pos:start="93:9" pos:end="93:11">off</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:47"><name pos:start="93:15" pos:end="93:29">fdt_add_subnode</name><argument_list pos:start="93:30" pos:end="93:47">(<argument pos:start="93:31" pos:end="93:33"><expr pos:start="93:31" pos:end="93:33"><name pos:start="93:31" pos:end="93:33">fdt</name></expr></argument>, <argument pos:start="93:36" pos:end="93:36"><expr pos:start="93:36" pos:end="93:36"><literal type="number" pos:start="93:36" pos:end="93:36">0</literal></expr></argument>, <argument pos:start="93:39" pos:end="93:46"><expr pos:start="93:39" pos:end="93:46"><name pos:start="93:39" pos:end="93:46">mem_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:18"><expr pos:start="95:9" pos:end="95:17"><call pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:12">_FDT</name><argument_list pos:start="95:13" pos:end="95:17">(<argument pos:start="95:14" pos:end="95:16"><expr pos:start="95:14" pos:end="95:16"><name pos:start="95:14" pos:end="95:16">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:70"><expr pos:start="97:9" pos:end="97:69"><call pos:start="97:9" pos:end="97:69"><name pos:start="97:9" pos:end="97:12">_FDT</name><argument_list pos:start="97:13" pos:end="97:69">(<argument pos:start="97:14" pos:end="97:68"><expr pos:start="97:14" pos:end="97:68"><operator pos:start="97:14" pos:end="97:14">(</operator><call pos:start="97:15" pos:end="97:67"><name pos:start="97:15" pos:end="97:32">fdt_setprop_string</name><argument_list pos:start="97:33" pos:end="97:67">(<argument pos:start="97:34" pos:end="97:36"><expr pos:start="97:34" pos:end="97:36"><name pos:start="97:34" pos:end="97:36">fdt</name></expr></argument>, <argument pos:start="97:39" pos:end="97:41"><expr pos:start="97:39" pos:end="97:41"><name pos:start="97:39" pos:end="97:41">off</name></expr></argument>, <argument pos:start="97:44" pos:end="97:56"><expr pos:start="97:44" pos:end="97:56"><literal type="string" pos:start="97:44" pos:end="97:56">"device_type"</literal></expr></argument>, <argument pos:start="97:59" pos:end="97:66"><expr pos:start="97:59" pos:end="97:66"><literal type="string" pos:start="97:59" pos:end="97:66">"memory"</literal></expr></argument>)</argument_list></call><operator pos:start="97:68" pos:end="97:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="101:54"><expr pos:start="99:9" pos:end="101:53"><call pos:start="99:9" pos:end="101:53"><name pos:start="99:9" pos:end="99:12">_FDT</name><argument_list pos:start="99:13" pos:end="101:53">(<argument pos:start="99:14" pos:end="101:52"><expr pos:start="99:14" pos:end="101:52"><operator pos:start="99:14" pos:end="99:14">(</operator><call pos:start="99:15" pos:end="101:51"><name pos:start="99:15" pos:end="99:25">fdt_setprop</name><argument_list pos:start="99:26" pos:end="101:51">(<argument pos:start="99:27" pos:end="99:29"><expr pos:start="99:27" pos:end="99:29"><name pos:start="99:27" pos:end="99:29">fdt</name></expr></argument>, <argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><name pos:start="99:32" pos:end="99:34">off</name></expr></argument>, <argument pos:start="99:37" pos:end="99:41"><expr pos:start="99:37" pos:end="99:41"><literal type="string" pos:start="99:37" pos:end="99:41">"reg"</literal></expr></argument>, <argument pos:start="99:44" pos:end="99:59"><expr pos:start="99:44" pos:end="99:59"><name pos:start="99:44" pos:end="99:59">mem_reg_property</name></expr></argument>,

                          <argument pos:start="101:27" pos:end="101:50"><expr pos:start="101:27" pos:end="101:50"><sizeof pos:start="101:27" pos:end="101:50">sizeof<argument_list pos:start="101:33" pos:end="101:50">(<argument pos:start="101:34" pos:end="101:49"><expr pos:start="101:34" pos:end="101:49"><name pos:start="101:34" pos:end="101:49">mem_reg_property</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="101:52" pos:end="101:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="105:51"><expr pos:start="103:9" pos:end="105:50"><call pos:start="103:9" pos:end="105:50"><name pos:start="103:9" pos:end="103:12">_FDT</name><argument_list pos:start="103:13" pos:end="105:50">(<argument pos:start="103:14" pos:end="105:49"><expr pos:start="103:14" pos:end="105:49"><operator pos:start="103:14" pos:end="103:14">(</operator><call pos:start="103:15" pos:end="105:48"><name pos:start="103:15" pos:end="103:25">fdt_setprop</name><argument_list pos:start="103:26" pos:end="105:48">(<argument pos:start="103:27" pos:end="103:29"><expr pos:start="103:27" pos:end="103:29"><name pos:start="103:27" pos:end="103:29">fdt</name></expr></argument>, <argument pos:start="103:32" pos:end="103:34"><expr pos:start="103:32" pos:end="103:34"><name pos:start="103:32" pos:end="103:34">off</name></expr></argument>, <argument pos:start="103:37" pos:end="103:55"><expr pos:start="103:37" pos:end="103:55"><literal type="string" pos:start="103:37" pos:end="103:55">"ibm,associativity"</literal></expr></argument>, <argument pos:start="103:58" pos:end="103:70"><expr pos:start="103:58" pos:end="103:70"><name pos:start="103:58" pos:end="103:70">associativity</name></expr></argument>,

                          <argument pos:start="105:27" pos:end="105:47"><expr pos:start="105:27" pos:end="105:47"><sizeof pos:start="105:27" pos:end="105:47">sizeof<argument_list pos:start="105:33" pos:end="105:47">(<argument pos:start="105:34" pos:end="105:46"><expr pos:start="105:34" pos:end="105:46"><name pos:start="105:34" pos:end="105:46">associativity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="105:49" pos:end="105:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:33"><expr pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:17">mem_start</name> <operator pos:start="107:19" pos:end="107:20">+=</operator> <name pos:start="107:22" pos:end="107:32"><name pos:start="107:22" pos:end="107:29">node_mem</name><index pos:start="107:30" pos:end="107:32">[<expr pos:start="107:31" pos:end="107:31"><name pos:start="107:31" pos:end="107:31">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
