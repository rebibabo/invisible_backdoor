<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21554.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:12">coroutine_fn</name></type> <name pos:start="1:14" pos:end="1:30">iscsi_co_pdiscard</name><parameter_list pos:start="1:31" pos:end="1:79">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:60">int64_t</name></type> <name pos:start="1:62" pos:end="1:67">offset</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:78"><decl pos:start="1:70" pos:end="1:78"><type pos:start="1:70" pos:end="1:78"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:78">count</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IscsiLun</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:22">iscsilun</name> <init pos:start="5:24" pos:end="5:35">= <expr pos:start="5:26" pos:end="5:35"><name pos:start="5:26" pos:end="5:35"><name pos:start="5:26" pos:end="5:27">bs</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:20">IscsiTask</name></name></type> <name pos:start="7:22" pos:end="7:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:21">unmap_list</name></name></type> <name pos:start="9:23" pos:end="9:26">list</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:62">(<expr pos:start="13:9" pos:end="13:61"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:61"><name pos:start="13:10" pos:end="13:36">is_byte_request_lun_aligned</name><argument_list pos:start="13:37" pos:end="13:61">(<argument pos:start="13:38" pos:end="13:43"><expr pos:start="13:38" pos:end="13:43"><name pos:start="13:38" pos:end="13:43">offset</name></expr></argument>, <argument pos:start="13:46" pos:end="13:50"><expr pos:start="13:46" pos:end="13:50"><name pos:start="13:46" pos:end="13:50">count</name></expr></argument>, <argument pos:start="13:53" pos:end="13:60"><expr pos:start="13:53" pos:end="13:60"><name pos:start="13:53" pos:end="13:60">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:64" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:24">

        <return pos:start="15:9" pos:end="15:24">return <expr pos:start="15:16" pos:end="15:23"><operator pos:start="15:16" pos:end="15:16">-</operator><name pos:start="15:17" pos:end="15:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:28">(<expr pos:start="21:9" pos:end="21:27"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:27"><name pos:start="21:10" pos:end="21:17">iscsilun</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:22">lbp</name><operator pos:start="21:23" pos:end="21:23">.</operator><name pos:start="21:24" pos:end="21:27">lbpu</name></name></expr>)</condition> <block pos:start="21:30" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:17">

        <comment type="block" pos:start="23:9" pos:end="23:50">/* UNMAP is not supported by the target */</comment>

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:45"><expr pos:start="31:5" pos:end="31:44"><name pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:8">list</name><operator pos:start="31:9" pos:end="31:9">.</operator><name pos:start="31:10" pos:end="31:12">lba</name></name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:21">offset</name> <operator pos:start="31:23" pos:end="31:23">/</operator> <name pos:start="31:25" pos:end="31:44"><name pos:start="31:25" pos:end="31:32">iscsilun</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:44">block_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:8">list</name><operator pos:start="33:9" pos:end="33:9">.</operator><name pos:start="33:10" pos:end="33:12">num</name></name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:20">count</name> <operator pos:start="33:22" pos:end="33:22">/</operator> <name pos:start="33:24" pos:end="33:43"><name pos:start="33:24" pos:end="33:31">iscsilun</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:43">block_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><call pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:27">iscsi_co_init_iscsitask</name><argument_list pos:start="37:28" pos:end="37:45">(<argument pos:start="37:29" pos:end="37:36"><expr pos:start="37:29" pos:end="37:36"><name pos:start="37:29" pos:end="37:36">iscsilun</name></expr></argument>, <argument pos:start="37:39" pos:end="37:44"><expr pos:start="37:39" pos:end="37:44"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="39:1" pos:end="39:6"><name pos:start="39:1" pos:end="39:5">retry</name>:</label>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="43:62">(<expr pos:start="41:9" pos:end="43:61"><call pos:start="41:9" pos:end="43:53"><name pos:start="41:9" pos:end="41:24">iscsi_unmap_task</name><argument_list pos:start="41:25" pos:end="43:53">(<argument pos:start="41:26" pos:end="41:40"><expr pos:start="41:26" pos:end="41:40"><name pos:start="41:26" pos:end="41:40"><name pos:start="41:26" pos:end="41:33">iscsilun</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:40">iscsi</name></name></expr></argument>, <argument pos:start="41:43" pos:end="41:55"><expr pos:start="41:43" pos:end="41:55"><name pos:start="41:43" pos:end="41:55"><name pos:start="41:43" pos:end="41:50">iscsilun</name><operator pos:start="41:51" pos:end="41:52">-&gt;</operator><name pos:start="41:53" pos:end="41:55">lun</name></name></expr></argument>, <argument pos:start="41:58" pos:end="41:58"><expr pos:start="41:58" pos:end="41:58"><literal type="number" pos:start="41:58" pos:end="41:58">0</literal></expr></argument>, <argument pos:start="41:61" pos:end="41:61"><expr pos:start="41:61" pos:end="41:61"><literal type="number" pos:start="41:61" pos:end="41:61">0</literal></expr></argument>, <argument pos:start="41:64" pos:end="41:68"><expr pos:start="41:64" pos:end="41:68"><operator pos:start="41:64" pos:end="41:64">&amp;</operator><name pos:start="41:65" pos:end="41:68">list</name></expr></argument>, <argument pos:start="41:71" pos:end="41:71"><expr pos:start="41:71" pos:end="41:71"><literal type="number" pos:start="41:71" pos:end="41:71">1</literal></expr></argument>,

                         <argument pos:start="43:26" pos:end="43:44"><expr pos:start="43:26" pos:end="43:44"><name pos:start="43:26" pos:end="43:44">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="43:47" pos:end="43:52"><expr pos:start="43:47" pos:end="43:52"><operator pos:start="43:47" pos:end="43:47">&amp;</operator><name pos:start="43:48" pos:end="43:52">iTask</name></expr></argument>)</argument_list></call> <operator pos:start="43:55" pos:end="43:56">==</operator> <name pos:start="43:58" pos:end="43:61">NULL</name></expr>)</condition> <block pos:start="43:64" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:23">

        <return pos:start="45:9" pos:end="45:23">return <expr pos:start="45:16" pos:end="45:22"><operator pos:start="45:16" pos:end="45:16">-</operator><name pos:start="45:17" pos:end="45:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="51:5" pos:end="57:5">while <condition pos:start="51:11" pos:end="51:27">(<expr pos:start="51:12" pos:end="51:26"><operator pos:start="51:12" pos:end="51:12">!</operator><name pos:start="51:13" pos:end="51:26"><name pos:start="51:13" pos:end="51:17">iTask</name><operator pos:start="51:18" pos:end="51:18">.</operator><name pos:start="51:19" pos:end="51:26">complete</name></name></expr>)</condition> <block pos:start="51:29" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:31">

        <expr_stmt pos:start="53:9" pos:end="53:35"><expr pos:start="53:9" pos:end="53:34"><call pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:24">iscsi_set_events</name><argument_list pos:start="53:25" pos:end="53:34">(<argument pos:start="53:26" pos:end="53:33"><expr pos:start="53:26" pos:end="53:33"><name pos:start="53:26" pos:end="53:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><call pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:28">qemu_coroutine_yield</name><argument_list pos:start="55:29" pos:end="55:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:27">(<expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:13">iTask</name><operator pos:start="61:14" pos:end="61:14">.</operator><name pos:start="61:15" pos:end="61:18">task</name></name> <operator pos:start="61:20" pos:end="61:21">!=</operator> <name pos:start="61:23" pos:end="61:26">NULL</name></expr>)</condition> <block pos:start="61:29" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:26">

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><call pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:27">scsi_free_scsi_task</name><argument_list pos:start="63:28" pos:end="63:39">(<argument pos:start="63:29" pos:end="63:38"><expr pos:start="63:29" pos:end="63:38"><name pos:start="63:29" pos:end="63:38"><name pos:start="63:29" pos:end="63:33">iTask</name><operator pos:start="63:34" pos:end="63:34">.</operator><name pos:start="63:35" pos:end="63:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:13">iTask</name><operator pos:start="65:14" pos:end="65:14">.</operator><name pos:start="65:15" pos:end="65:18">task</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:25">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:23">(<expr pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:13">iTask</name><operator pos:start="71:14" pos:end="71:14">.</operator><name pos:start="71:15" pos:end="71:22">do_retry</name></name></expr>)</condition> <block pos:start="71:25" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:19">

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:13">iTask</name><operator pos:start="73:14" pos:end="73:14">.</operator><name pos:start="73:15" pos:end="73:22">complete</name></name> <operator pos:start="73:24" pos:end="73:24">=</operator> <literal type="number" pos:start="73:26" pos:end="73:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:19">goto <name pos:start="75:14" pos:end="75:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="91:5"><if pos:start="81:5" pos:end="91:5">if <condition pos:start="81:8" pos:end="81:52">(<expr pos:start="81:9" pos:end="81:51"><name pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:13">iTask</name><operator pos:start="81:14" pos:end="81:14">.</operator><name pos:start="81:15" pos:end="81:20">status</name></name> <operator pos:start="81:22" pos:end="81:23">==</operator> <name pos:start="81:25" pos:end="81:51">SCSI_STATUS_CHECK_CONDITION</name></expr>)</condition> <block pos:start="81:54" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:17">

        <comment type="block" pos:start="83:9" pos:end="87:43">/* the target might fail with a check condition if it

           is not happy with the alignment of the UNMAP request

           we silently fail in this case */</comment>

        <return pos:start="89:9" pos:end="89:17">return <expr pos:start="89:16" pos:end="89:16"><literal type="number" pos:start="89:16" pos:end="89:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:41">(<expr pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:13">iTask</name><operator pos:start="95:14" pos:end="95:14">.</operator><name pos:start="95:15" pos:end="95:20">status</name></name> <operator pos:start="95:22" pos:end="95:23">!=</operator> <name pos:start="95:25" pos:end="95:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="95:43" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:30">

        <return pos:start="97:9" pos:end="97:30">return <expr pos:start="97:16" pos:end="97:29"><name pos:start="97:16" pos:end="97:29"><name pos:start="97:16" pos:end="97:20">iTask</name><operator pos:start="97:21" pos:end="97:21">.</operator><name pos:start="97:22" pos:end="97:29">err_code</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="105:58"><expr pos:start="103:5" pos:end="105:57"><call pos:start="103:5" pos:end="105:57"><name pos:start="103:5" pos:end="103:30">iscsi_allocmap_set_invalid</name><argument_list pos:start="103:31" pos:end="105:57">(<argument pos:start="103:32" pos:end="103:39"><expr pos:start="103:32" pos:end="103:39"><name pos:start="103:32" pos:end="103:39">iscsilun</name></expr></argument>, <argument pos:start="103:42" pos:end="103:67"><expr pos:start="103:42" pos:end="103:67"><name pos:start="103:42" pos:end="103:47">offset</name> <operator pos:start="103:49" pos:end="103:50">&gt;&gt;</operator> <name pos:start="103:52" pos:end="103:67">BDRV_SECTOR_BITS</name></expr></argument>,

                               <argument pos:start="105:32" pos:end="105:56"><expr pos:start="105:32" pos:end="105:56"><name pos:start="105:32" pos:end="105:36">count</name> <operator pos:start="105:38" pos:end="105:39">&gt;&gt;</operator> <name pos:start="105:41" pos:end="105:56">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
