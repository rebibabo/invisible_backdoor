<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17050.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:32">ppc_radix64_handle_mmu_fault</name><parameter_list pos:start="1:33" pos:end="3:45">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:43">PowerPCCPU</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">cpu</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:55">vaddr</name></type> <name pos:start="1:57" pos:end="1:61">eaddr</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:70"><decl pos:start="1:64" pos:end="1:70"><type pos:start="1:64" pos:end="1:70"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:70">rwx</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:44"><decl pos:start="3:34" pos:end="3:44"><type pos:start="3:34" pos:end="3:44"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:44">mmu_idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:13">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUPPCState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:32">= <expr pos:start="9:24" pos:end="9:32"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:32"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="13:52"><decl pos:start="11:5" pos:end="13:51"><type pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:29">PPCVirtualHypervisorClass</name> <modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:34">vhc</name> <init pos:start="11:36" pos:end="13:51">=

        <expr pos:start="13:9" pos:end="13:51"><call pos:start="13:9" pos:end="13:51"><name pos:start="13:9" pos:end="13:40">PPC_VIRTUAL_HYPERVISOR_GET_CLASS</name><argument_list pos:start="13:41" pos:end="13:51">(<argument pos:start="13:42" pos:end="13:50"><expr pos:start="13:42" pos:end="13:50"><name pos:start="13:42" pos:end="13:50"><name pos:start="13:42" pos:end="13:44">cpu</name><operator pos:start="13:45" pos:end="13:46">-&gt;</operator><name pos:start="13:47" pos:end="13:50">vhyp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">hwaddr</name></type> <name pos:start="15:12" pos:end="15:16">raddr</name></decl>, <decl pos:start="15:19" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:19" pos:end="15:26">pte_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:65"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:17">lpid</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>, <decl pos:start="17:24" pos:end="17:30"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:24" pos:end="17:26">pid</name> <init pos:start="17:28" pos:end="17:30">= <expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr></init></decl>, <decl pos:start="17:33" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:33" pos:end="17:38">offset</name></decl>, <decl pos:start="17:41" pos:end="17:44"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:41" pos:end="17:44">size</name></decl>, <decl pos:start="17:47" pos:end="17:51"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:47" pos:end="17:51">patbe</name></decl>, <decl pos:start="17:54" pos:end="17:59"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:54" pos:end="17:59">prtbe0</name></decl>, <decl pos:start="17:62" pos:end="17:64"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:62" pos:end="17:64">pte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">page_size</name></decl>, <decl pos:start="19:20" pos:end="19:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:20" pos:end="19:23">prot</name></decl>, <decl pos:start="19:26" pos:end="19:40"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:26" pos:end="19:36">fault_cause</name> <init pos:start="19:38" pos:end="19:40">= <expr pos:start="19:40" pos:end="19:40"><literal type="number" pos:start="19:40" pos:end="19:40">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:51"><expr pos:start="23:5" pos:end="23:50"><call pos:start="23:5" pos:end="23:50"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:50">(<argument pos:start="23:12" pos:end="23:49"><expr pos:start="23:12" pos:end="23:49"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:15">rwx</name> <operator pos:start="23:17" pos:end="23:18">==</operator> <literal type="number" pos:start="23:20" pos:end="23:20">0</literal><operator pos:start="23:21" pos:end="23:21">)</operator> <operator pos:start="23:23" pos:end="23:24">||</operator> <operator pos:start="23:26" pos:end="23:26">(</operator><name pos:start="23:27" pos:end="23:29">rwx</name> <operator pos:start="23:31" pos:end="23:32">==</operator> <literal type="number" pos:start="23:34" pos:end="23:34">1</literal><operator pos:start="23:35" pos:end="23:35">)</operator> <operator pos:start="23:37" pos:end="23:38">||</operator> <operator pos:start="23:40" pos:end="23:40">(</operator><name pos:start="23:41" pos:end="23:43">rwx</name> <operator pos:start="23:45" pos:end="23:46">==</operator> <literal type="number" pos:start="23:48" pos:end="23:48">2</literal><operator pos:start="23:49" pos:end="23:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:20"><expr pos:start="25:5" pos:end="25:19"><call pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:19">(<argument pos:start="25:12" pos:end="25:18"><expr pos:start="25:12" pos:end="25:18"><operator pos:start="25:12" pos:end="25:12">!</operator><name pos:start="25:13" pos:end="25:18">msr_hv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="25:22" pos:end="25:68">/* For now there is no Radix PowerNV Support */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><call pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:21">(<argument pos:start="27:12" pos:end="27:20"><expr pos:start="27:12" pos:end="27:20"><name pos:start="27:12" pos:end="27:20"><name pos:start="27:12" pos:end="27:14">cpu</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:20">vhyp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:36"><expr pos:start="29:5" pos:end="29:35"><call pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:35">(<argument pos:start="29:12" pos:end="29:34"><expr pos:start="29:12" pos:end="29:34"><call pos:start="29:12" pos:end="29:34"><name pos:start="29:12" pos:end="29:29">ppc64_use_proc_tbl</name><argument_list pos:start="29:30" pos:end="29:34">(<argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:26">/* Real Mode Access */</comment>

    <if_stmt pos:start="35:5" pos:end="51:5"><if pos:start="35:5" pos:end="51:5">if <condition pos:start="35:8" pos:end="35:71">(<expr pos:start="35:9" pos:end="35:70"><operator pos:start="35:9" pos:end="35:9">(</operator><operator pos:start="35:10" pos:end="35:10">(</operator><name pos:start="35:11" pos:end="35:13">rwx</name> <operator pos:start="35:15" pos:end="35:16">==</operator> <literal type="number" pos:start="35:18" pos:end="35:18">2</literal><operator pos:start="35:19" pos:end="35:19">)</operator> <operator pos:start="35:21" pos:end="35:22">&amp;&amp;</operator> <operator pos:start="35:24" pos:end="35:24">(</operator><name pos:start="35:25" pos:end="35:30">msr_ir</name> <operator pos:start="35:32" pos:end="35:33">==</operator> <literal type="number" pos:start="35:35" pos:end="35:35">0</literal><operator pos:start="35:36" pos:end="35:36">)</operator><operator pos:start="35:37" pos:end="35:37">)</operator> <operator pos:start="35:39" pos:end="35:40">||</operator> <operator pos:start="35:42" pos:end="35:42">(</operator><operator pos:start="35:43" pos:end="35:43">(</operator><name pos:start="35:44" pos:end="35:46">rwx</name> <operator pos:start="35:48" pos:end="35:49">!=</operator> <literal type="number" pos:start="35:51" pos:end="35:51">2</literal><operator pos:start="35:52" pos:end="35:52">)</operator> <operator pos:start="35:54" pos:end="35:55">&amp;&amp;</operator> <operator pos:start="35:57" pos:end="35:57">(</operator><name pos:start="35:58" pos:end="35:63">msr_dr</name> <operator pos:start="35:65" pos:end="35:66">==</operator> <literal type="number" pos:start="35:68" pos:end="35:68">0</literal><operator pos:start="35:69" pos:end="35:69">)</operator><operator pos:start="35:70" pos:end="35:70">)</operator></expr>)</condition> <block pos:start="35:73" pos:end="51:5">{<block_content pos:start="39:9" pos:end="49:17">

        <comment type="block" pos:start="37:9" pos:end="37:69">/* In real mode top 4 effective addr bits (mostly) ignored */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:46"><expr pos:start="39:9" pos:end="39:45"><name pos:start="39:9" pos:end="39:13">raddr</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:21">eaddr</name> <operator pos:start="39:23" pos:end="39:23">&amp;</operator> <literal type="number" pos:start="39:25" pos:end="39:45">0x0FFFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="43:9" pos:end="47:39"><expr pos:start="43:9" pos:end="47:38"><call pos:start="43:9" pos:end="47:38"><name pos:start="43:9" pos:end="43:20">tlb_set_page</name><argument_list pos:start="43:21" pos:end="47:38">(<argument pos:start="43:22" pos:end="43:23"><expr pos:start="43:22" pos:end="43:23"><name pos:start="43:22" pos:end="43:23">cs</name></expr></argument>, <argument pos:start="43:26" pos:end="43:49"><expr pos:start="43:26" pos:end="43:49"><name pos:start="43:26" pos:end="43:30">eaddr</name> <operator pos:start="43:32" pos:end="43:32">&amp;</operator> <name pos:start="43:34" pos:end="43:49">TARGET_PAGE_MASK</name></expr></argument>, <argument pos:start="43:52" pos:end="43:75"><expr pos:start="43:52" pos:end="43:75"><name pos:start="43:52" pos:end="43:56">raddr</name> <operator pos:start="43:58" pos:end="43:58">&amp;</operator> <name pos:start="43:60" pos:end="43:75">TARGET_PAGE_MASK</name></expr></argument>,

                     <argument pos:start="45:22" pos:end="45:55"><expr pos:start="45:22" pos:end="45:55"><name pos:start="45:22" pos:end="45:30">PAGE_READ</name> <operator pos:start="45:32" pos:end="45:32">|</operator> <name pos:start="45:34" pos:end="45:43">PAGE_WRITE</name> <operator pos:start="45:45" pos:end="45:45">|</operator> <name pos:start="45:47" pos:end="45:55">PAGE_EXEC</name></expr></argument>, <argument pos:start="45:58" pos:end="45:64"><expr pos:start="45:58" pos:end="45:64"><name pos:start="45:58" pos:end="45:64">mmu_idx</name></expr></argument>,

                     <argument pos:start="47:22" pos:end="47:37"><expr pos:start="47:22" pos:end="47:37"><name pos:start="47:22" pos:end="47:37">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:63">/* Virtual Mode Access - get the fully qualified address */</comment>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:71">(<expr pos:start="57:9" pos:end="57:70"><operator pos:start="57:9" pos:end="57:9">!</operator><call pos:start="57:10" pos:end="57:70"><name pos:start="57:10" pos:end="57:45">ppc_radix64_get_fully_qualified_addr</name><argument_list pos:start="57:46" pos:end="57:70">(<argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><name pos:start="57:47" pos:end="57:49">env</name></expr></argument>, <argument pos:start="57:52" pos:end="57:56"><expr pos:start="57:52" pos:end="57:56"><name pos:start="57:52" pos:end="57:56">eaddr</name></expr></argument>, <argument pos:start="57:59" pos:end="57:63"><expr pos:start="57:59" pos:end="57:63"><operator pos:start="57:59" pos:end="57:59">&amp;</operator><name pos:start="57:60" pos:end="57:63">lpid</name></expr></argument>, <argument pos:start="57:66" pos:end="57:69"><expr pos:start="57:66" pos:end="57:69"><operator pos:start="57:66" pos:end="57:66">&amp;</operator><name pos:start="57:67" pos:end="57:69">pid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:73" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:17">

        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><call pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:30">ppc_radix64_raise_segi</name><argument_list pos:start="59:31" pos:end="59:47">(<argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">cpu</name></expr></argument>, <argument pos:start="59:37" pos:end="59:39"><expr pos:start="59:37" pos:end="59:39"><name pos:start="59:37" pos:end="59:39">rwx</name></expr></argument>, <argument pos:start="59:42" pos:end="59:46"><expr pos:start="59:42" pos:end="59:46"><name pos:start="59:42" pos:end="59:46">eaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:27">/* Get Process Table */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:38"><expr pos:start="69:5" pos:end="69:37"><name pos:start="69:5" pos:end="69:9">patbe</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:15">vhc</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:26">get_patbe</name></name><argument_list pos:start="69:27" pos:end="69:37">(<argument pos:start="69:28" pos:end="69:36"><expr pos:start="69:28" pos:end="69:36"><name pos:start="69:28" pos:end="69:36"><name pos:start="69:28" pos:end="69:30">cpu</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:36">vhyp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:78">/* Index Process Table by PID to Find Corresponding Process Table Entry */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:45"><expr pos:start="75:5" pos:end="75:44"><name pos:start="75:5" pos:end="75:10">offset</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:16">pid</name> <operator pos:start="75:18" pos:end="75:18">*</operator> <sizeof pos:start="75:20" pos:end="75:44">sizeof<argument_list pos:start="75:26" pos:end="75:44">(<argument pos:start="75:27" pos:end="75:43"><expr pos:start="75:27" pos:end="75:43">struct <name pos:start="75:34" pos:end="75:43">prtb_entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:50"><expr pos:start="77:5" pos:end="77:49"><name pos:start="77:5" pos:end="77:8">size</name> <operator pos:start="77:10" pos:end="77:10">=</operator> <literal type="number" pos:start="77:12" pos:end="77:15">1ULL</literal> <operator pos:start="77:17" pos:end="77:18">&lt;&lt;</operator> <operator pos:start="77:20" pos:end="77:20">(</operator><operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:26">patbe</name> <operator pos:start="77:28" pos:end="77:28">&amp;</operator> <name pos:start="77:30" pos:end="77:42">PATBE1_R_PRTS</name><operator pos:start="77:43" pos:end="77:43">)</operator> <operator pos:start="77:45" pos:end="77:45">+</operator> <literal type="number" pos:start="77:47" pos:end="77:48">12</literal><operator pos:start="77:49" pos:end="77:49">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="79:23">(<expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:14">offset</name> <operator pos:start="79:16" pos:end="79:17">&gt;=</operator> <name pos:start="79:19" pos:end="79:22">size</name></expr>)</condition> <block pos:start="79:25" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:17">

        <comment type="block" pos:start="81:9" pos:end="81:54">/* offset exceeds size of the process table */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:59"><expr pos:start="83:9" pos:end="83:58"><call pos:start="83:9" pos:end="83:58"><name pos:start="83:9" pos:end="83:28">ppc_radix64_raise_si</name><argument_list pos:start="83:29" pos:end="83:58">(<argument pos:start="83:30" pos:end="83:32"><expr pos:start="83:30" pos:end="83:32"><name pos:start="83:30" pos:end="83:32">cpu</name></expr></argument>, <argument pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:37">rwx</name></expr></argument>, <argument pos:start="83:40" pos:end="83:44"><expr pos:start="83:40" pos:end="83:44"><name pos:start="83:40" pos:end="83:44">eaddr</name></expr></argument>, <argument pos:start="83:47" pos:end="83:57"><expr pos:start="83:47" pos:end="83:57"><name pos:start="83:47" pos:end="83:57">DSISR_NOPTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:17">return <expr pos:start="85:16" pos:end="85:16"><literal type="number" pos:start="85:16" pos:end="85:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:64"><expr pos:start="89:5" pos:end="89:63"><name pos:start="89:5" pos:end="89:10">prtbe0</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <call pos:start="89:14" pos:end="89:63"><name pos:start="89:14" pos:end="89:21">ldq_phys</name><argument_list pos:start="89:22" pos:end="89:63">(<argument pos:start="89:23" pos:end="89:28"><expr pos:start="89:23" pos:end="89:28"><name pos:start="89:23" pos:end="89:28"><name pos:start="89:23" pos:end="89:24">cs</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:28">as</name></name></expr></argument>, <argument pos:start="89:31" pos:end="89:62"><expr pos:start="89:31" pos:end="89:62"><operator pos:start="89:31" pos:end="89:31">(</operator><name pos:start="89:32" pos:end="89:36">patbe</name> <operator pos:start="89:38" pos:end="89:38">&amp;</operator> <name pos:start="89:40" pos:end="89:52">PATBE1_R_PRTB</name><operator pos:start="89:53" pos:end="89:53">)</operator> <operator pos:start="89:55" pos:end="89:55">+</operator> <name pos:start="89:57" pos:end="89:62">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:70">/* Walk Radix Tree from Process Table Entry to Convert EA to RA */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:40"><expr pos:start="95:5" pos:end="95:39"><name pos:start="95:5" pos:end="95:13">page_size</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <call pos:start="95:17" pos:end="95:39"><name pos:start="95:17" pos:end="95:31">PRTBE_R_GET_RTS</name><argument_list pos:start="95:32" pos:end="95:39">(<argument pos:start="95:33" pos:end="95:38"><expr pos:start="95:33" pos:end="95:38"><name pos:start="95:33" pos:end="95:38">prtbe0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="103:43"><expr pos:start="97:5" pos:end="103:42"><name pos:start="97:5" pos:end="97:7">pte</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="103:42"><name pos:start="97:11" pos:end="97:31">ppc_radix64_walk_tree</name><argument_list pos:start="97:32" pos:end="103:42">(<argument pos:start="97:33" pos:end="97:35"><expr pos:start="97:33" pos:end="97:35"><name pos:start="97:33" pos:end="97:35">cpu</name></expr></argument>, <argument pos:start="97:38" pos:end="97:40"><expr pos:start="97:38" pos:end="97:40"><name pos:start="97:38" pos:end="97:40">rwx</name></expr></argument>, <argument pos:start="97:43" pos:end="97:62"><expr pos:start="97:43" pos:end="97:62"><name pos:start="97:43" pos:end="97:47">eaddr</name> <operator pos:start="97:49" pos:end="97:49">&amp;</operator> <name pos:start="97:51" pos:end="97:62">R_EADDR_MASK</name></expr></argument>,

                                <argument pos:start="99:33" pos:end="99:53"><expr pos:start="99:33" pos:end="99:53"><name pos:start="99:33" pos:end="99:38">prtbe0</name> <operator pos:start="99:40" pos:end="99:40">&amp;</operator> <name pos:start="99:42" pos:end="99:53">PRTBE_R_RPDB</name></expr></argument>, <argument pos:start="99:56" pos:end="99:76"><expr pos:start="99:56" pos:end="99:76"><name pos:start="99:56" pos:end="99:61">prtbe0</name> <operator pos:start="99:63" pos:end="99:63">&amp;</operator> <name pos:start="99:65" pos:end="99:76">PRTBE_R_RPDS</name></expr></argument>,

                                <argument pos:start="101:33" pos:end="101:38"><expr pos:start="101:33" pos:end="101:38"><operator pos:start="101:33" pos:end="101:33">&amp;</operator><name pos:start="101:34" pos:end="101:38">raddr</name></expr></argument>, <argument pos:start="101:41" pos:end="101:50"><expr pos:start="101:41" pos:end="101:50"><operator pos:start="101:41" pos:end="101:41">&amp;</operator><name pos:start="101:42" pos:end="101:50">page_size</name></expr></argument>, <argument pos:start="101:53" pos:end="101:64"><expr pos:start="101:53" pos:end="101:64"><operator pos:start="101:53" pos:end="101:53">&amp;</operator><name pos:start="101:54" pos:end="101:64">fault_cause</name></expr></argument>, <argument pos:start="101:67" pos:end="101:71"><expr pos:start="101:67" pos:end="101:71"><operator pos:start="101:67" pos:end="101:67">&amp;</operator><name pos:start="101:68" pos:end="101:71">prot</name></expr></argument>,

                                <argument pos:start="103:33" pos:end="103:41"><expr pos:start="103:33" pos:end="103:41"><operator pos:start="103:33" pos:end="103:33">&amp;</operator><name pos:start="103:34" pos:end="103:41">pte_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:13">(<expr pos:start="105:9" pos:end="105:12"><operator pos:start="105:9" pos:end="105:9">!</operator><name pos:start="105:10" pos:end="105:12">pte</name></expr>)</condition> <block pos:start="105:15" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:17">

        <expr_stmt pos:start="107:9" pos:end="107:59"><expr pos:start="107:9" pos:end="107:58"><call pos:start="107:9" pos:end="107:58"><name pos:start="107:9" pos:end="107:28">ppc_radix64_raise_si</name><argument_list pos:start="107:29" pos:end="107:58">(<argument pos:start="107:30" pos:end="107:32"><expr pos:start="107:30" pos:end="107:32"><name pos:start="107:30" pos:end="107:32">cpu</name></expr></argument>, <argument pos:start="107:35" pos:end="107:37"><expr pos:start="107:35" pos:end="107:37"><name pos:start="107:35" pos:end="107:37">rwx</name></expr></argument>, <argument pos:start="107:40" pos:end="107:44"><expr pos:start="107:40" pos:end="107:44"><name pos:start="107:40" pos:end="107:44">eaddr</name></expr></argument>, <argument pos:start="107:47" pos:end="107:57"><expr pos:start="107:47" pos:end="107:57"><name pos:start="107:47" pos:end="107:57">fault_cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:17">return <expr pos:start="109:16" pos:end="109:16"><literal type="number" pos:start="109:16" pos:end="109:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:42">/* Update Reference and Change Bits */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:55"><expr pos:start="117:5" pos:end="117:54"><call pos:start="117:5" pos:end="117:54"><name pos:start="117:5" pos:end="117:22">ppc_radix64_set_rc</name><argument_list pos:start="117:23" pos:end="117:54">(<argument pos:start="117:24" pos:end="117:26"><expr pos:start="117:24" pos:end="117:26"><name pos:start="117:24" pos:end="117:26">cpu</name></expr></argument>, <argument pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:31">rwx</name></expr></argument>, <argument pos:start="117:34" pos:end="117:36"><expr pos:start="117:34" pos:end="117:36"><name pos:start="117:34" pos:end="117:36">pte</name></expr></argument>, <argument pos:start="117:39" pos:end="117:46"><expr pos:start="117:39" pos:end="117:46"><name pos:start="117:39" pos:end="117:46">pte_addr</name></expr></argument>, <argument pos:start="117:49" pos:end="117:53"><expr pos:start="117:49" pos:end="117:53"><operator pos:start="117:49" pos:end="117:49">&amp;</operator><name pos:start="117:50" pos:end="117:53">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="123:50"><expr pos:start="121:5" pos:end="123:49"><call pos:start="121:5" pos:end="123:49"><name pos:start="121:5" pos:end="121:16">tlb_set_page</name><argument_list pos:start="121:17" pos:end="123:49">(<argument pos:start="121:18" pos:end="121:19"><expr pos:start="121:18" pos:end="121:19"><name pos:start="121:18" pos:end="121:19">cs</name></expr></argument>, <argument pos:start="121:22" pos:end="121:45"><expr pos:start="121:22" pos:end="121:45"><name pos:start="121:22" pos:end="121:26">eaddr</name> <operator pos:start="121:28" pos:end="121:28">&amp;</operator> <name pos:start="121:30" pos:end="121:45">TARGET_PAGE_MASK</name></expr></argument>, <argument pos:start="121:48" pos:end="121:71"><expr pos:start="121:48" pos:end="121:71"><name pos:start="121:48" pos:end="121:52">raddr</name> <operator pos:start="121:54" pos:end="121:54">&amp;</operator> <name pos:start="121:56" pos:end="121:71">TARGET_PAGE_MASK</name></expr></argument>,

                 <argument pos:start="123:18" pos:end="123:21"><expr pos:start="123:18" pos:end="123:21"><name pos:start="123:18" pos:end="123:21">prot</name></expr></argument>, <argument pos:start="123:24" pos:end="123:30"><expr pos:start="123:24" pos:end="123:30"><name pos:start="123:24" pos:end="123:30">mmu_idx</name></expr></argument>, <argument pos:start="123:33" pos:end="123:48"><expr pos:start="123:33" pos:end="123:48"><literal type="number" pos:start="123:33" pos:end="123:35">1UL</literal> <operator pos:start="123:37" pos:end="123:38">&lt;&lt;</operator> <name pos:start="123:40" pos:end="123:48">page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:13">return <expr pos:start="125:12" pos:end="125:12"><literal type="number" pos:start="125:12" pos:end="125:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
