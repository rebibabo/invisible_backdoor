<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13952.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">kvm_openpic_realize</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:43">DeviceState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:33">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">SysBusDevice</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">d</name> <init pos:start="5:21" pos:end="5:41">= <expr pos:start="5:23" pos:end="5:41"><call pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:36">SYS_BUS_DEVICE</name><argument_list pos:start="5:37" pos:end="5:41">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">KVMOpenPICState</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">opp</name> <init pos:start="7:26" pos:end="7:43">= <expr pos:start="7:28" pos:end="7:43"><call pos:start="7:28" pos:end="7:43"><name pos:start="7:28" pos:end="7:38">KVM_OPENPIC</name><argument_list pos:start="7:39" pos:end="7:43">(<argument pos:start="7:40" pos:end="7:42"><expr pos:start="7:40" pos:end="7:42"><name pos:start="7:40" pos:end="7:42">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">KVMState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:27">= <expr pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:27">kvm_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:25">kvm_openpic_model</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:28">kvm_create_device</name></name></type> <name pos:start="13:30" pos:end="13:31">cd</name> <init pos:start="13:33" pos:end="13:37">= <expr pos:start="13:35" pos:end="13:37"><block pos:start="13:35" pos:end="13:37">{<expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:14">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:53">(<expr pos:start="19:9" pos:end="19:52"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:52"><name pos:start="19:10" pos:end="19:28">kvm_check_extension</name><argument_list pos:start="19:29" pos:end="19:52">(<argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><name pos:start="19:30" pos:end="19:30">s</name></expr></argument>, <argument pos:start="19:33" pos:end="19:51"><expr pos:start="19:33" pos:end="19:51"><name pos:start="19:33" pos:end="19:51">KVM_CAP_DEVICE_CTRL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:55" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><call pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:64">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:63"><expr pos:start="21:26" pos:end="21:63"><literal type="string" pos:start="21:26" pos:end="21:63">"Kernel is lacking Device Control API"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="29:5" pos:end="53:5">switch <condition pos:start="29:12" pos:end="29:23">(<expr pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:15">opp</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:22">model</name></name></expr>)</condition> <block pos:start="29:25" pos:end="53:5">{<block_content pos:start="31:5" pos:end="51:15">

    <case pos:start="31:5" pos:end="31:35">case <expr pos:start="31:10" pos:end="31:34"><name pos:start="31:10" pos:end="31:34">OPENPIC_MODEL_FSL_MPIC_20</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:53"><expr pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:25">kvm_openpic_model</name> <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:52">KVM_DEV_TYPE_FSL_MPIC_20</name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>



    <case pos:start="39:5" pos:end="39:35">case <expr pos:start="39:10" pos:end="39:34"><name pos:start="39:10" pos:end="39:34">OPENPIC_MODEL_FSL_MPIC_42</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:25">kvm_openpic_model</name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:52">KVM_DEV_TYPE_FSL_MPIC_42</name></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <default pos:start="47:5" pos:end="47:12">default:</default>

        <expr_stmt pos:start="49:9" pos:end="49:75"><expr pos:start="49:9" pos:end="49:74"><call pos:start="49:9" pos:end="49:74"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="49:74">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">errp</name></expr></argument>, <argument pos:start="49:26" pos:end="49:61"><expr pos:start="49:26" pos:end="49:61"><literal type="string" pos:start="49:26" pos:end="49:54">"Unsupported OpenPIC model %"</literal> <name pos:start="49:56" pos:end="49:61">PRIu32</name></expr></argument>, <argument pos:start="49:64" pos:end="49:73"><expr pos:start="49:64" pos:end="49:73"><name pos:start="49:64" pos:end="49:73"><name pos:start="49:64" pos:end="49:66">opp</name><operator pos:start="49:67" pos:end="49:68">-&gt;</operator><name pos:start="49:69" pos:end="49:73">model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:6">cd</name><operator pos:start="57:7" pos:end="57:7">.</operator><name pos:start="57:8" pos:end="57:11">type</name></name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:31">kvm_openpic_model</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:50"><expr pos:start="59:5" pos:end="59:49"><name pos:start="59:5" pos:end="59:7">ret</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:49"><name pos:start="59:11" pos:end="59:22">kvm_vm_ioctl</name><argument_list pos:start="59:23" pos:end="59:49">(<argument pos:start="59:24" pos:end="59:24"><expr pos:start="59:24" pos:end="59:24"><name pos:start="59:24" pos:end="59:24">s</name></expr></argument>, <argument pos:start="59:27" pos:end="59:43"><expr pos:start="59:27" pos:end="59:43"><name pos:start="59:27" pos:end="59:43">KVM_CREATE_DEVICE</name></expr></argument>, <argument pos:start="59:46" pos:end="59:48"><expr pos:start="59:46" pos:end="59:48"><operator pos:start="59:46" pos:end="59:46">&amp;</operator><name pos:start="59:47" pos:end="59:48">cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:16">(<expr pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">&lt;</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>)</condition> <block pos:start="61:18" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:15">

        <expr_stmt pos:start="63:9" pos:end="65:45"><expr pos:start="63:9" pos:end="65:44"><call pos:start="63:9" pos:end="65:44"><name pos:start="63:9" pos:end="63:18">error_setg</name><argument_list pos:start="63:19" pos:end="65:44">(<argument pos:start="63:20" pos:end="63:23"><expr pos:start="63:20" pos:end="63:23"><name pos:start="63:20" pos:end="63:23">errp</name></expr></argument>, <argument pos:start="63:26" pos:end="63:53"><expr pos:start="63:26" pos:end="63:53"><literal type="string" pos:start="63:26" pos:end="63:53">"Can't create device %d: %s"</literal></expr></argument>,

                   <argument pos:start="65:20" pos:end="65:26"><expr pos:start="65:20" pos:end="65:26"><name pos:start="65:20" pos:end="65:26"><name pos:start="65:20" pos:end="65:21">cd</name><operator pos:start="65:22" pos:end="65:22">.</operator><name pos:start="65:23" pos:end="65:26">type</name></name></expr></argument>, <argument pos:start="65:29" pos:end="65:43"><expr pos:start="65:29" pos:end="65:43"><call pos:start="65:29" pos:end="65:43"><name pos:start="65:29" pos:end="65:36">strerror</name><argument_list pos:start="65:37" pos:end="65:43">(<argument pos:start="65:38" pos:end="65:42"><expr pos:start="65:38" pos:end="65:42"><name pos:start="65:38" pos:end="65:42">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:20"><expr pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:11"><name pos:start="71:5" pos:end="71:7">opp</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:11">fd</name></name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:19"><name pos:start="71:15" pos:end="71:16">cd</name><operator pos:start="71:17" pos:end="71:17">.</operator><name pos:start="71:18" pos:end="71:19">fd</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:35"><expr pos:start="75:5" pos:end="75:34"><call pos:start="75:5" pos:end="75:34"><name pos:start="75:5" pos:end="75:20">sysbus_init_mmio</name><argument_list pos:start="75:21" pos:end="75:34">(<argument pos:start="75:22" pos:end="75:22"><expr pos:start="75:22" pos:end="75:22"><name pos:start="75:22" pos:end="75:22">d</name></expr></argument>, <argument pos:start="75:25" pos:end="75:33"><expr pos:start="75:25" pos:end="75:33"><operator pos:start="75:25" pos:end="75:25">&amp;</operator><name pos:start="75:26" pos:end="75:33"><name pos:start="75:26" pos:end="75:28">opp</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:33">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:65"><expr pos:start="77:5" pos:end="77:64"><call pos:start="77:5" pos:end="77:64"><name pos:start="77:5" pos:end="77:21">qdev_init_gpio_in</name><argument_list pos:start="77:22" pos:end="77:64">(<argument pos:start="77:23" pos:end="77:25"><expr pos:start="77:23" pos:end="77:25"><name pos:start="77:23" pos:end="77:25">dev</name></expr></argument>, <argument pos:start="77:28" pos:end="77:46"><expr pos:start="77:28" pos:end="77:46"><name pos:start="77:28" pos:end="77:46">kvm_openpic_set_irq</name></expr></argument>, <argument pos:start="77:49" pos:end="77:63"><expr pos:start="77:49" pos:end="77:63"><name pos:start="77:49" pos:end="77:63">OPENPIC_MAX_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:58"><expr pos:start="81:5" pos:end="81:57"><name pos:start="81:5" pos:end="81:32"><name pos:start="81:5" pos:end="81:7">opp</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:21">mem_listener</name><operator pos:start="81:22" pos:end="81:22">.</operator><name pos:start="81:23" pos:end="81:32">region_add</name></name> <operator pos:start="81:34" pos:end="81:34">=</operator> <name pos:start="81:36" pos:end="81:57">kvm_openpic_region_add</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:58"><expr pos:start="83:5" pos:end="83:57"><name pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:7">opp</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:21">mem_listener</name><operator pos:start="83:22" pos:end="83:22">.</operator><name pos:start="83:23" pos:end="83:32">region_del</name></name> <operator pos:start="83:34" pos:end="83:34">=</operator> <name pos:start="83:36" pos:end="83:57">kvm_openpic_region_del</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:72"><expr pos:start="85:5" pos:end="85:71"><call pos:start="85:5" pos:end="85:71"><name pos:start="85:5" pos:end="85:28">memory_listener_register</name><argument_list pos:start="85:29" pos:end="85:71">(<argument pos:start="85:30" pos:end="85:47"><expr pos:start="85:30" pos:end="85:47"><operator pos:start="85:30" pos:end="85:30">&amp;</operator><name pos:start="85:31" pos:end="85:47"><name pos:start="85:31" pos:end="85:33">opp</name><operator pos:start="85:34" pos:end="85:35">-&gt;</operator><name pos:start="85:36" pos:end="85:47">mem_listener</name></name></expr></argument>, <argument pos:start="85:50" pos:end="85:70"><expr pos:start="85:50" pos:end="85:70"><operator pos:start="85:50" pos:end="85:50">&amp;</operator><name pos:start="85:51" pos:end="85:70">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:35">/* indicate pic capabilities */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:25"><expr pos:start="91:5" pos:end="91:24"><name pos:start="91:5" pos:end="91:17">msi_supported</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <name pos:start="91:21" pos:end="91:24">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:30"><expr pos:start="93:5" pos:end="93:29"><name pos:start="93:5" pos:end="93:22">kvm_kernel_irqchip</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:29">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:40"><expr pos:start="95:5" pos:end="95:39"><name pos:start="95:5" pos:end="95:32">kvm_async_interrupts_allowed</name> <operator pos:start="95:34" pos:end="95:34">=</operator> <name pos:start="95:36" pos:end="95:39">true</name></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:28">/* set up irq routing */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:36"><expr pos:start="101:5" pos:end="101:35"><call pos:start="101:5" pos:end="101:35"><name pos:start="101:5" pos:end="101:24">kvm_init_irq_routing</name><argument_list pos:start="101:25" pos:end="101:35">(<argument pos:start="101:26" pos:end="101:34"><expr pos:start="101:26" pos:end="101:34"><name pos:start="101:26" pos:end="101:34">kvm_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="103:5" pos:end="107:5">for <control pos:start="103:9" pos:end="103:29">(<init pos:start="103:10" pos:end="103:15"><expr pos:start="103:10" pos:end="103:14"><name pos:start="103:10" pos:end="103:10">i</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr>;</init> <condition pos:start="103:17" pos:end="103:24"><expr pos:start="103:17" pos:end="103:23"><name pos:start="103:17" pos:end="103:17">i</name> <operator pos:start="103:19" pos:end="103:19">&lt;</operator> <literal type="number" pos:start="103:21" pos:end="103:23">256</literal></expr>;</condition> <incr pos:start="103:26" pos:end="103:28"><expr pos:start="103:26" pos:end="103:28"><operator pos:start="103:26" pos:end="103:27">++</operator><name pos:start="103:28" pos:end="103:28">i</name></expr></incr>)</control> <block pos:start="103:31" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:54">

        <expr_stmt pos:start="105:9" pos:end="105:54"><expr pos:start="105:9" pos:end="105:53"><call pos:start="105:9" pos:end="105:53"><name pos:start="105:9" pos:end="105:33">kvm_irqchip_add_irq_route</name><argument_list pos:start="105:34" pos:end="105:53">(<argument pos:start="105:35" pos:end="105:43"><expr pos:start="105:35" pos:end="105:43"><name pos:start="105:35" pos:end="105:43">kvm_state</name></expr></argument>, <argument pos:start="105:46" pos:end="105:46"><expr pos:start="105:46" pos:end="105:46"><name pos:start="105:46" pos:end="105:46">i</name></expr></argument>, <argument pos:start="105:49" pos:end="105:49"><expr pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">0</literal></expr></argument>, <argument pos:start="105:52" pos:end="105:52"><expr pos:start="105:52" pos:end="105:52"><name pos:start="105:52" pos:end="105:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="111:5" pos:end="111:30"><expr pos:start="111:5" pos:end="111:29"><name pos:start="111:5" pos:end="111:22">kvm_irqfds_allowed</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <name pos:start="111:26" pos:end="111:29">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:37"><expr pos:start="113:5" pos:end="113:36"><name pos:start="113:5" pos:end="113:29">kvm_msi_via_irqfd_allowed</name> <operator pos:start="113:31" pos:end="113:31">=</operator> <name pos:start="113:33" pos:end="113:36">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:35"><expr pos:start="115:5" pos:end="115:34"><name pos:start="115:5" pos:end="115:27">kvm_gsi_routing_allowed</name> <operator pos:start="115:29" pos:end="115:29">=</operator> <name pos:start="115:31" pos:end="115:34">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:33"><expr pos:start="119:5" pos:end="119:32"><call pos:start="119:5" pos:end="119:32"><name pos:start="119:5" pos:end="119:29">kvm_irqchip_commit_routes</name><argument_list pos:start="119:30" pos:end="119:32">(<argument pos:start="119:31" pos:end="119:31"><expr pos:start="119:31" pos:end="119:31"><name pos:start="119:31" pos:end="119:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
