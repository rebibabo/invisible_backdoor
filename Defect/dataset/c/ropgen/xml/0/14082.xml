<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14082.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:36">exynos4210_uart_read</name><parameter_list pos:start="1:37" pos:end="3:48">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:41">void</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">opaque</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:76"><decl pos:start="1:52" pos:end="1:76"><type pos:start="1:52" pos:end="1:76"><name pos:start="1:52" pos:end="1:69">target_phys_addr_t</name></type> <name pos:start="1:71" pos:end="1:76">offset</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:47"><decl pos:start="3:35" pos:end="3:47"><type pos:start="3:35" pos:end="3:47"><name pos:start="3:35" pos:end="3:42">unsigned</name></type> <name pos:start="3:44" pos:end="3:47">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="99:1">{<block_content pos:start="7:5" pos:end="97:13">

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">Exynos4210UartState</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:26">s</name> <init pos:start="7:28" pos:end="7:58">= <expr pos:start="7:30" pos:end="7:58"><operator pos:start="7:30" pos:end="7:30">(</operator><name pos:start="7:31" pos:end="7:49">Exynos4210UartState</name> <operator pos:start="7:51" pos:end="7:51">*</operator><operator pos:start="7:52" pos:end="7:52">)</operator><name pos:start="7:53" pos:end="7:58">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">res</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="93:5">switch <condition pos:start="13:12" pos:end="13:19">(<expr pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:18">offset</name></expr>)</condition> <block pos:start="13:21" pos:end="93:5">{<block_content pos:start="15:5" pos:end="91:34">

    <case pos:start="15:5" pos:end="15:17">case <expr pos:start="15:10" pos:end="15:16"><name pos:start="15:10" pos:end="15:16">UERSTAT</name></expr>:</case> <comment type="block" pos:start="15:19" pos:end="15:33">/* Read Only */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:34"><expr pos:start="17:9" pos:end="17:33"><name pos:start="17:9" pos:end="17:11">res</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:33"><name pos:start="17:15" pos:end="17:15">s</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:20">reg</name><index pos:start="17:21" pos:end="17:33">[<expr pos:start="17:22" pos:end="17:32"><call pos:start="17:22" pos:end="17:32"><name pos:start="17:22" pos:end="17:23">I_</name><argument_list pos:start="17:24" pos:end="17:32">(<argument pos:start="17:25" pos:end="17:31"><expr pos:start="17:25" pos:end="17:31"><name pos:start="17:25" pos:end="17:31">UERSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">reg</name><index pos:start="19:15" pos:end="19:27">[<expr pos:start="19:16" pos:end="19:26"><call pos:start="19:16" pos:end="19:26"><name pos:start="19:16" pos:end="19:17">I_</name><argument_list pos:start="19:18" pos:end="19:26">(<argument pos:start="19:19" pos:end="19:25"><expr pos:start="19:19" pos:end="19:25"><name pos:start="19:19" pos:end="19:25">UERSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="19:29" pos:end="19:29">=</operator> <literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:19">return <expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">res</name></expr>;</return>

    <case pos:start="23:5" pos:end="23:16">case <expr pos:start="23:10" pos:end="23:15"><name pos:start="23:10" pos:end="23:15">UFSTAT</name></expr>:</case> <comment type="block" pos:start="23:18" pos:end="23:32">/* Read Only */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:65"><expr pos:start="25:9" pos:end="25:64"><name pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">reg</name><index pos:start="25:15" pos:end="25:26">[<expr pos:start="25:16" pos:end="25:25"><call pos:start="25:16" pos:end="25:25"><name pos:start="25:16" pos:end="25:17">I_</name><argument_list pos:start="25:18" pos:end="25:25">(<argument pos:start="25:19" pos:end="25:24"><expr pos:start="25:19" pos:end="25:24"><name pos:start="25:19" pos:end="25:24">UFSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="25:28" pos:end="25:28">=</operator> <call pos:start="25:30" pos:end="25:57"><name pos:start="25:30" pos:end="25:49">fifo_elements_number</name><argument_list pos:start="25:50" pos:end="25:57">(<argument pos:start="25:51" pos:end="25:56"><expr pos:start="25:51" pos:end="25:56"><operator pos:start="25:51" pos:end="25:51">&amp;</operator><name pos:start="25:52" pos:end="25:56"><name pos:start="25:52" pos:end="25:52">s</name><operator pos:start="25:53" pos:end="25:54">-&gt;</operator><name pos:start="25:55" pos:end="25:56">rx</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:59" pos:end="25:59">&amp;</operator> <literal type="number" pos:start="25:61" pos:end="25:64">0xff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:52">(<expr pos:start="27:13" pos:end="27:51"><call pos:start="27:13" pos:end="27:46"><name pos:start="27:13" pos:end="27:38">fifo_empty_elements_number</name><argument_list pos:start="27:39" pos:end="27:46">(<argument pos:start="27:40" pos:end="27:45"><expr pos:start="27:40" pos:end="27:45"><operator pos:start="27:40" pos:end="27:40">&amp;</operator><name pos:start="27:41" pos:end="27:45"><name pos:start="27:41" pos:end="27:41">s</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:45">rx</name></name></expr></argument>)</argument_list></call> <operator pos:start="27:48" pos:end="27:49">==</operator> <literal type="number" pos:start="27:51" pos:end="27:51">0</literal></expr>)</condition> <block pos:start="27:54" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:40">

            <expr_stmt pos:start="29:13" pos:end="29:54"><expr pos:start="29:13" pos:end="29:53"><name pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">reg</name><index pos:start="29:19" pos:end="29:30">[<expr pos:start="29:20" pos:end="29:29"><call pos:start="29:20" pos:end="29:29"><name pos:start="29:20" pos:end="29:21">I_</name><argument_list pos:start="29:22" pos:end="29:29">(<argument pos:start="29:23" pos:end="29:28"><expr pos:start="29:23" pos:end="29:28"><name pos:start="29:23" pos:end="29:28">UFSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="29:32" pos:end="29:33">|=</operator> <name pos:start="29:35" pos:end="29:53">UFSTAT_Rx_FIFO_FULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:40"><expr pos:start="31:13" pos:end="31:39"><name pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:18">reg</name><index pos:start="31:19" pos:end="31:30">[<expr pos:start="31:20" pos:end="31:29"><call pos:start="31:20" pos:end="31:29"><name pos:start="31:20" pos:end="31:21">I_</name><argument_list pos:start="31:22" pos:end="31:29">(<argument pos:start="31:23" pos:end="31:28"><expr pos:start="31:23" pos:end="31:28"><name pos:start="31:23" pos:end="31:28">UFSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="31:32" pos:end="31:33">&amp;=</operator> <operator pos:start="31:35" pos:end="31:35">~</operator><literal type="number" pos:start="31:36" pos:end="31:39">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="35:9" pos:end="35:34">return <expr pos:start="35:16" pos:end="35:33"><name pos:start="35:16" pos:end="35:33"><name pos:start="35:16" pos:end="35:16">s</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:21">reg</name><index pos:start="35:22" pos:end="35:33">[<expr pos:start="35:23" pos:end="35:32"><call pos:start="35:23" pos:end="35:32"><name pos:start="35:23" pos:end="35:24">I_</name><argument_list pos:start="35:25" pos:end="35:32">(<argument pos:start="35:26" pos:end="35:31"><expr pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:31">UFSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><name pos:start="37:10" pos:end="37:13">URXH</name></expr>:</case>

        <if_stmt pos:start="39:9" pos:end="77:9"><if pos:start="39:9" pos:end="71:9">if <condition pos:start="39:12" pos:end="39:50">(<expr pos:start="39:13" pos:end="39:49"><name pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:18">reg</name><index pos:start="39:19" pos:end="39:29">[<expr pos:start="39:20" pos:end="39:28"><call pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:21">I_</name><argument_list pos:start="39:22" pos:end="39:28">(<argument pos:start="39:23" pos:end="39:27"><expr pos:start="39:23" pos:end="39:27"><name pos:start="39:23" pos:end="39:27">UFCON</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="39:31" pos:end="39:31">&amp;</operator> <name pos:start="39:33" pos:end="39:49">UFCON_FIFO_ENABLE</name></expr>)</condition> <block pos:start="39:52" pos:end="71:9">{<block_content pos:start="41:13" pos:end="69:13">

            <if_stmt pos:start="41:13" pos:end="69:13"><if pos:start="41:13" pos:end="61:13">if <condition pos:start="41:16" pos:end="41:45">(<expr pos:start="41:17" pos:end="41:44"><call pos:start="41:17" pos:end="41:44"><name pos:start="41:17" pos:end="41:36">fifo_elements_number</name><argument_list pos:start="41:37" pos:end="41:44">(<argument pos:start="41:38" pos:end="41:43"><expr pos:start="41:38" pos:end="41:43"><operator pos:start="41:38" pos:end="41:38">&amp;</operator><name pos:start="41:39" pos:end="41:43"><name pos:start="41:39" pos:end="41:39">s</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:43">rx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:47" pos:end="61:13">{<block_content pos:start="43:17" pos:end="59:17">

                <expr_stmt pos:start="43:17" pos:end="46:0"><expr pos:start="43:17" pos:end="43:43"><name pos:start="43:17" pos:end="43:19">res</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:43"><name pos:start="43:23" pos:end="43:35">fifo_retrieve</name><argument_list pos:start="43:36" pos:end="43:43">(<argument pos:start="43:37" pos:end="43:42"><expr pos:start="43:37" pos:end="43:42"><operator pos:start="43:37" pos:end="43:37">&amp;</operator><name pos:start="43:38" pos:end="43:42"><name pos:start="43:38" pos:end="43:38">s</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:42">rx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="45:1" pos:end="45:17">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:17">DEBUG_Rx_DATA</name></expr></cpp:if>

                <expr_stmt pos:start="47:17" pos:end="50:0"><expr pos:start="47:17" pos:end="47:42"><call pos:start="47:17" pos:end="47:42"><name pos:start="47:17" pos:end="47:23">fprintf</name><argument_list pos:start="47:24" pos:end="47:42">(<argument pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:30"><name pos:start="47:25" pos:end="47:30">stderr</name></expr></argument>, <argument pos:start="47:33" pos:end="47:36"><expr pos:start="47:33" pos:end="47:36"><literal type="string" pos:start="47:33" pos:end="47:36">"%c"</literal></expr></argument>, <argument pos:start="47:39" pos:end="47:41"><expr pos:start="47:39" pos:end="47:41"><name pos:start="47:39" pos:end="47:41">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

                <if_stmt pos:start="51:17" pos:end="59:17"><if pos:start="51:17" pos:end="55:17">if <condition pos:start="51:20" pos:end="51:50">(<expr pos:start="51:21" pos:end="51:49"><operator pos:start="51:21" pos:end="51:21">!</operator><call pos:start="51:22" pos:end="51:49"><name pos:start="51:22" pos:end="51:41">fifo_elements_number</name><argument_list pos:start="51:42" pos:end="51:49">(<argument pos:start="51:43" pos:end="51:48"><expr pos:start="51:43" pos:end="51:48"><operator pos:start="51:43" pos:end="51:43">&amp;</operator><name pos:start="51:44" pos:end="51:48"><name pos:start="51:44" pos:end="51:44">s</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:48">rx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:52" pos:end="55:17">{<block_content pos:start="53:21" pos:end="53:73">

                    <expr_stmt pos:start="53:21" pos:end="53:73"><expr pos:start="53:21" pos:end="53:72"><name pos:start="53:21" pos:end="53:39"><name pos:start="53:21" pos:end="53:21">s</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:26">reg</name><index pos:start="53:27" pos:end="53:39">[<expr pos:start="53:28" pos:end="53:38"><call pos:start="53:28" pos:end="53:38"><name pos:start="53:28" pos:end="53:29">I_</name><argument_list pos:start="53:30" pos:end="53:38">(<argument pos:start="53:31" pos:end="53:37"><expr pos:start="53:31" pos:end="53:37"><name pos:start="53:31" pos:end="53:37">UTRSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="53:41" pos:end="53:42">&amp;=</operator> <operator pos:start="53:44" pos:end="53:44">~</operator><name pos:start="53:45" pos:end="53:72">UTRSTAT_Rx_BUFFER_DATA_READY</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="55:19" pos:end="59:17">else <block pos:start="55:24" pos:end="59:17">{<block_content pos:start="57:21" pos:end="57:72">

                    <expr_stmt pos:start="57:21" pos:end="57:72"><expr pos:start="57:21" pos:end="57:71"><name pos:start="57:21" pos:end="57:39"><name pos:start="57:21" pos:end="57:21">s</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:26">reg</name><index pos:start="57:27" pos:end="57:39">[<expr pos:start="57:28" pos:end="57:38"><call pos:start="57:28" pos:end="57:38"><name pos:start="57:28" pos:end="57:29">I_</name><argument_list pos:start="57:30" pos:end="57:38">(<argument pos:start="57:31" pos:end="57:37"><expr pos:start="57:31" pos:end="57:37"><name pos:start="57:31" pos:end="57:37">UTRSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="57:41" pos:end="57:42">|=</operator> <name pos:start="57:44" pos:end="57:71">UTRSTAT_Rx_BUFFER_DATA_READY</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="61:15" pos:end="69:13">else <block pos:start="61:20" pos:end="69:13">{<block_content pos:start="63:17" pos:end="67:24">

                <expr_stmt pos:start="63:17" pos:end="63:51"><expr pos:start="63:17" pos:end="63:50"><name pos:start="63:17" pos:end="63:34"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:22">reg</name><index pos:start="63:23" pos:end="63:34">[<expr pos:start="63:24" pos:end="63:33"><call pos:start="63:24" pos:end="63:33"><name pos:start="63:24" pos:end="63:25">I_</name><argument_list pos:start="63:26" pos:end="63:33">(<argument pos:start="63:27" pos:end="63:32"><expr pos:start="63:27" pos:end="63:32"><name pos:start="63:27" pos:end="63:32">UINTSP</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="63:36" pos:end="63:37">|=</operator> <name pos:start="63:39" pos:end="63:50">UINTSP_ERROR</name></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:46"><expr pos:start="65:17" pos:end="65:45"><call pos:start="65:17" pos:end="65:45"><name pos:start="65:17" pos:end="65:42">exynos4210_uart_update_irq</name><argument_list pos:start="65:43" pos:end="65:45">(<argument pos:start="65:44" pos:end="65:44"><expr pos:start="65:44" pos:end="65:44"><name pos:start="65:44" pos:end="65:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:24"><expr pos:start="67:17" pos:end="67:23"><name pos:start="67:17" pos:end="67:19">res</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="77:9">else <block pos:start="71:16" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:35">

            <expr_stmt pos:start="73:13" pos:end="73:65"><expr pos:start="73:13" pos:end="73:64"><name pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:18">reg</name><index pos:start="73:19" pos:end="73:31">[<expr pos:start="73:20" pos:end="73:30"><call pos:start="73:20" pos:end="73:30"><name pos:start="73:20" pos:end="73:21">I_</name><argument_list pos:start="73:22" pos:end="73:30">(<argument pos:start="73:23" pos:end="73:29"><expr pos:start="73:23" pos:end="73:29"><name pos:start="73:23" pos:end="73:29">UTRSTAT</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="73:33" pos:end="73:34">&amp;=</operator> <operator pos:start="73:36" pos:end="73:36">~</operator><name pos:start="73:37" pos:end="73:64">UTRSTAT_Rx_BUFFER_DATA_READY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:35"><expr pos:start="75:13" pos:end="75:34"><name pos:start="75:13" pos:end="75:15">res</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:34"><name pos:start="75:19" pos:end="75:19">s</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:24">reg</name><index pos:start="75:25" pos:end="75:34">[<expr pos:start="75:26" pos:end="75:33"><call pos:start="75:26" pos:end="75:33"><name pos:start="75:26" pos:end="75:27">I_</name><argument_list pos:start="75:28" pos:end="75:33">(<argument pos:start="75:29" pos:end="75:32"><expr pos:start="75:29" pos:end="75:32"><name pos:start="75:29" pos:end="75:32">URXH</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">res</name></expr>;</return>

    <case pos:start="81:5" pos:end="81:14">case <expr pos:start="81:10" pos:end="81:13"><name pos:start="81:10" pos:end="81:13">UTXH</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="85:73"><expr pos:start="83:9" pos:end="85:72"><call pos:start="83:9" pos:end="85:72"><name pos:start="83:9" pos:end="83:19">PRINT_DEBUG</name><argument_list pos:start="83:20" pos:end="85:72">(<argument pos:start="83:21" pos:end="83:74"><expr pos:start="83:21" pos:end="83:74"><literal type="string" pos:start="83:21" pos:end="83:74">"UART%d: Trying to read from WO register: %s [%04x]\n"</literal></expr></argument>,

                    <argument pos:start="85:21" pos:end="85:30"><expr pos:start="85:21" pos:end="85:30"><name pos:start="85:21" pos:end="85:30"><name pos:start="85:21" pos:end="85:21">s</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:30">channel</name></name></expr></argument>, <argument pos:start="85:33" pos:end="85:63"><expr pos:start="85:33" pos:end="85:63"><call pos:start="85:33" pos:end="85:63"><name pos:start="85:33" pos:end="85:55">exynos4210_uart_regname</name><argument_list pos:start="85:56" pos:end="85:63">(<argument pos:start="85:57" pos:end="85:62"><expr pos:start="85:57" pos:end="85:62"><name pos:start="85:57" pos:end="85:62">offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="85:66" pos:end="85:71"><expr pos:start="85:66" pos:end="85:71"><name pos:start="85:66" pos:end="85:71">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <default pos:start="89:5" pos:end="89:12">default:</default>

        <return pos:start="91:9" pos:end="91:34">return <expr pos:start="91:16" pos:end="91:33"><name pos:start="91:16" pos:end="91:33"><name pos:start="91:16" pos:end="91:16">s</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:21">reg</name><index pos:start="91:22" pos:end="91:33">[<expr pos:start="91:23" pos:end="91:32"><call pos:start="91:23" pos:end="91:32"><name pos:start="91:23" pos:end="91:24">I_</name><argument_list pos:start="91:25" pos:end="91:32">(<argument pos:start="91:26" pos:end="91:31"><expr pos:start="91:26" pos:end="91:31"><name pos:start="91:26" pos:end="91:31">offset</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
