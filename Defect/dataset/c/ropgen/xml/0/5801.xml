<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5801.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:30">atomic_mmu_lookup</name><parameter_list pos:start="1:31" pos:end="3:65">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:43">CPUArchState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">env</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:67"><decl pos:start="1:51" pos:end="1:67"><type pos:start="1:51" pos:end="1:67"><name pos:start="1:51" pos:end="1:62">target_ulong</name></type> <name pos:start="1:64" pos:end="1:67">addr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:45"><decl pos:start="3:32" pos:end="3:45"><type pos:start="3:32" pos:end="3:45"><name pos:start="3:32" pos:end="3:42">TCGMemOpIdx</name></type> <name pos:start="3:44" pos:end="3:45">oi</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:64"><decl pos:start="3:48" pos:end="3:64"><type pos:start="3:48" pos:end="3:64"><name pos:start="3:48" pos:end="3:56">uintptr_t</name></type> <name pos:start="3:58" pos:end="3:64">retaddr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:52">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:18">mmu_idx</name> <init pos:start="7:20" pos:end="7:35">= <expr pos:start="7:22" pos:end="7:35"><call pos:start="7:22" pos:end="7:35"><name pos:start="7:22" pos:end="7:31">get_mmuidx</name><argument_list pos:start="7:32" pos:end="7:35">(<argument pos:start="7:33" pos:end="7:34"><expr pos:start="7:33" pos:end="7:34"><name pos:start="7:33" pos:end="7:34">oi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:66"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:16">index</name> <init pos:start="9:18" pos:end="9:66">= <expr pos:start="9:20" pos:end="9:66"><operator pos:start="9:20" pos:end="9:20">(</operator><name pos:start="9:21" pos:end="9:24">addr</name> <operator pos:start="9:26" pos:end="9:27">&gt;&gt;</operator> <name pos:start="9:29" pos:end="9:44">TARGET_PAGE_BITS</name><operator pos:start="9:45" pos:end="9:45">)</operator> <operator pos:start="9:47" pos:end="9:47">&amp;</operator> <operator pos:start="9:49" pos:end="9:49">(</operator><name pos:start="9:50" pos:end="9:61">CPU_TLB_SIZE</name> <operator pos:start="9:63" pos:end="9:63">-</operator> <literal type="number" pos:start="9:65" pos:end="9:65">1</literal><operator pos:start="9:66" pos:end="9:66">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUTLBEntry</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">tlbe</name> <init pos:start="11:23" pos:end="11:55">= <expr pos:start="11:25" pos:end="11:55"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:55"><name pos:start="11:26" pos:end="11:28">env</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">tlb_table</name><index pos:start="11:40" pos:end="11:48">[<expr pos:start="11:41" pos:end="11:47"><name pos:start="11:41" pos:end="11:47">mmu_idx</name></expr>]</index><index pos:start="11:49" pos:end="11:55">[<expr pos:start="11:50" pos:end="11:54"><name pos:start="11:50" pos:end="11:54">index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:25">tlb_addr</name> <init pos:start="13:27" pos:end="13:44">= <expr pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:32">tlbe</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:44">addr_write</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">TCGMemOp</name></type> <name pos:start="15:14" pos:end="15:16">mop</name> <init pos:start="15:18" pos:end="15:32">= <expr pos:start="15:20" pos:end="15:32"><call pos:start="15:20" pos:end="15:32"><name pos:start="15:20" pos:end="15:28">get_memop</name><argument_list pos:start="15:29" pos:end="15:32">(<argument pos:start="15:30" pos:end="15:31"><expr pos:start="15:30" pos:end="15:31"><name pos:start="15:30" pos:end="15:31">oi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:40"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">a_bits</name> <init pos:start="17:16" pos:end="17:40">= <expr pos:start="17:18" pos:end="17:40"><call pos:start="17:18" pos:end="17:40"><name pos:start="17:18" pos:end="17:35">get_alignment_bits</name><argument_list pos:start="17:36" pos:end="17:40">(<argument pos:start="17:37" pos:end="17:39"><expr pos:start="17:37" pos:end="17:39"><name pos:start="17:37" pos:end="17:39">mop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">s_bits</name> <init pos:start="19:16" pos:end="19:30">= <expr pos:start="19:18" pos:end="19:30"><name pos:start="19:18" pos:end="19:20">mop</name> <operator pos:start="19:22" pos:end="19:22">&amp;</operator> <name pos:start="19:24" pos:end="19:30">MO_SIZE</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:43">/* Adjust the given return address.  */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:11">retaddr</name> <operator pos:start="25:13" pos:end="25:14">-=</operator> <name pos:start="25:16" pos:end="25:24">GETPC_ADJ</name></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:44">/* Enforce guest required alignment.  */</comment>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:61">(<expr pos:start="31:9" pos:end="31:60"><call pos:start="31:9" pos:end="31:60"><name pos:start="31:9" pos:end="31:16">unlikely</name><argument_list pos:start="31:17" pos:end="31:60">(<argument pos:start="31:18" pos:end="31:59"><expr pos:start="31:18" pos:end="31:59"><name pos:start="31:18" pos:end="31:23">a_bits</name> <operator pos:start="31:25" pos:end="31:25">&gt;</operator> <literal type="number" pos:start="31:27" pos:end="31:27">0</literal> <operator pos:start="31:29" pos:end="31:30">&amp;&amp;</operator> <operator pos:start="31:32" pos:end="31:32">(</operator><name pos:start="31:33" pos:end="31:36">addr</name> <operator pos:start="31:38" pos:end="31:38">&amp;</operator> <operator pos:start="31:40" pos:end="31:40">(</operator><operator pos:start="31:41" pos:end="31:41">(</operator><literal type="number" pos:start="31:42" pos:end="31:42">1</literal> <operator pos:start="31:44" pos:end="31:45">&lt;&lt;</operator> <name pos:start="31:47" pos:end="31:52">a_bits</name><operator pos:start="31:53" pos:end="31:53">)</operator> <operator pos:start="31:55" pos:end="31:55">-</operator> <literal type="number" pos:start="31:57" pos:end="31:57">1</literal><operator pos:start="31:58" pos:end="31:58">)</operator><operator pos:start="31:59" pos:end="31:59">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:63" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:47">

        <comment type="block" pos:start="33:9" pos:end="33:66">/* ??? Maybe indicate atomic op to cpu_unaligned_access */</comment>

        <expr_stmt pos:start="35:9" pos:end="37:47"><expr pos:start="35:9" pos:end="37:46"><call pos:start="35:9" pos:end="37:46"><name pos:start="35:9" pos:end="35:28">cpu_unaligned_access</name><argument_list pos:start="35:29" pos:end="37:46">(<argument pos:start="35:30" pos:end="35:45"><expr pos:start="35:30" pos:end="35:45"><call pos:start="35:30" pos:end="35:45"><name pos:start="35:30" pos:end="35:40">ENV_GET_CPU</name><argument_list pos:start="35:41" pos:end="35:45">(<argument pos:start="35:42" pos:end="35:44"><expr pos:start="35:42" pos:end="35:44"><name pos:start="35:42" pos:end="35:44">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:48" pos:end="35:51"><expr pos:start="35:48" pos:end="35:51"><name pos:start="35:48" pos:end="35:51">addr</name></expr></argument>, <argument pos:start="35:54" pos:end="35:67"><expr pos:start="35:54" pos:end="35:67"><name pos:start="35:54" pos:end="35:67">MMU_DATA_STORE</name></expr></argument>,

                             <argument pos:start="37:30" pos:end="37:36"><expr pos:start="37:30" pos:end="37:36"><name pos:start="37:30" pos:end="37:36">mmu_idx</name></expr></argument>, <argument pos:start="37:39" pos:end="37:45"><expr pos:start="37:39" pos:end="37:45"><name pos:start="37:39" pos:end="37:45">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:43">/* Enforce qemu required alignment.  */</comment>

    <if_stmt pos:start="45:5" pos:end="57:5"><if pos:start="45:5" pos:end="57:5">if <condition pos:start="45:8" pos:end="45:45">(<expr pos:start="45:9" pos:end="45:44"><call pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:16">unlikely</name><argument_list pos:start="45:17" pos:end="45:44">(<argument pos:start="45:18" pos:end="45:43"><expr pos:start="45:18" pos:end="45:43"><name pos:start="45:18" pos:end="45:21">addr</name> <operator pos:start="45:23" pos:end="45:23">&amp;</operator> <operator pos:start="45:25" pos:end="45:25">(</operator><operator pos:start="45:26" pos:end="45:26">(</operator><literal type="number" pos:start="45:27" pos:end="45:27">1</literal> <operator pos:start="45:29" pos:end="45:30">&lt;&lt;</operator> <name pos:start="45:32" pos:end="45:37">s_bits</name><operator pos:start="45:38" pos:end="45:38">)</operator> <operator pos:start="45:40" pos:end="45:40">-</operator> <literal type="number" pos:start="45:42" pos:end="45:42">1</literal><operator pos:start="45:43" pos:end="45:43">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:47" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:28">

        <comment type="block" pos:start="47:9" pos:end="53:55">/* We get here if guest alignment was not requested,

           or was not enforced by cpu_unaligned_access above.

           We might widen the access and emulate, but for now

           mark an exception and exit the cpu loop.  */</comment>

        <goto pos:start="55:9" pos:end="55:28">goto <name pos:start="55:14" pos:end="55:27">stop_the_world</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:56">/* Check TLB entry and enforce page permissions.  */</comment>

    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="75:5">if <condition pos:start="63:8" pos:end="65:62">(<expr pos:start="63:9" pos:end="65:61"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:13">addr</name> <operator pos:start="63:15" pos:end="63:15">&amp;</operator> <name pos:start="63:17" pos:end="63:32">TARGET_PAGE_MASK</name><operator pos:start="63:33" pos:end="63:33">)</operator>

        <operator pos:start="65:9" pos:end="65:10">!=</operator> <operator pos:start="65:12" pos:end="65:12">(</operator><name pos:start="65:13" pos:end="65:20">tlb_addr</name> <operator pos:start="65:22" pos:end="65:22">&amp;</operator> <operator pos:start="65:24" pos:end="65:24">(</operator><name pos:start="65:25" pos:end="65:40">TARGET_PAGE_MASK</name> <operator pos:start="65:42" pos:end="65:42">|</operator> <name pos:start="65:44" pos:end="65:59">TLB_INVALID_MASK</name><operator pos:start="65:60" pos:end="65:60">)</operator><operator pos:start="65:61" pos:end="65:61">)</operator></expr>)</condition> <block pos:start="65:64" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:36">

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:46">(<expr pos:start="67:13" pos:end="67:45"><operator pos:start="67:13" pos:end="67:13">!</operator><call pos:start="67:14" pos:end="67:45"><name pos:start="67:14" pos:end="67:27">VICTIM_TLB_HIT</name><argument_list pos:start="67:28" pos:end="67:45">(<argument pos:start="67:29" pos:end="67:38"><expr pos:start="67:29" pos:end="67:38"><name pos:start="67:29" pos:end="67:38">addr_write</name></expr></argument>, <argument pos:start="67:41" pos:end="67:44"><expr pos:start="67:41" pos:end="67:44"><name pos:start="67:41" pos:end="67:44">addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:48" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:79">

            <expr_stmt pos:start="69:13" pos:end="69:79"><expr pos:start="69:13" pos:end="69:78"><call pos:start="69:13" pos:end="69:78"><name pos:start="69:13" pos:end="69:20">tlb_fill</name><argument_list pos:start="69:21" pos:end="69:78">(<argument pos:start="69:22" pos:end="69:37"><expr pos:start="69:22" pos:end="69:37"><call pos:start="69:22" pos:end="69:37"><name pos:start="69:22" pos:end="69:32">ENV_GET_CPU</name><argument_list pos:start="69:33" pos:end="69:37">(<argument pos:start="69:34" pos:end="69:36"><expr pos:start="69:34" pos:end="69:36"><name pos:start="69:34" pos:end="69:36">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:40" pos:end="69:43"><expr pos:start="69:40" pos:end="69:43"><name pos:start="69:40" pos:end="69:43">addr</name></expr></argument>, <argument pos:start="69:46" pos:end="69:59"><expr pos:start="69:46" pos:end="69:59"><name pos:start="69:46" pos:end="69:59">MMU_DATA_STORE</name></expr></argument>, <argument pos:start="69:62" pos:end="69:68"><expr pos:start="69:62" pos:end="69:68"><name pos:start="69:62" pos:end="69:68">mmu_idx</name></expr></argument>, <argument pos:start="69:71" pos:end="69:77"><expr pos:start="69:71" pos:end="69:77"><name pos:start="69:71" pos:end="69:77">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:16">tlb_addr</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <name pos:start="73:20" pos:end="73:35"><name pos:start="73:20" pos:end="73:23">tlbe</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:35">addr_write</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:24">/* Check notdirty */</comment>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:42">(<expr pos:start="81:9" pos:end="81:41"><call pos:start="81:9" pos:end="81:41"><name pos:start="81:9" pos:end="81:16">unlikely</name><argument_list pos:start="81:17" pos:end="81:41">(<argument pos:start="81:18" pos:end="81:40"><expr pos:start="81:18" pos:end="81:40"><name pos:start="81:18" pos:end="81:25">tlb_addr</name> <operator pos:start="81:27" pos:end="81:27">&amp;</operator> <name pos:start="81:29" pos:end="81:40">TLB_NOTDIRTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:44" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:44">

        <expr_stmt pos:start="83:9" pos:end="83:46"><expr pos:start="83:9" pos:end="83:45"><call pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:21">tlb_set_dirty</name><argument_list pos:start="83:22" pos:end="83:45">(<argument pos:start="83:23" pos:end="83:38"><expr pos:start="83:23" pos:end="83:38"><call pos:start="83:23" pos:end="83:38"><name pos:start="83:23" pos:end="83:33">ENV_GET_CPU</name><argument_list pos:start="83:34" pos:end="83:38">(<argument pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:37">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="83:41" pos:end="83:44"><expr pos:start="83:41" pos:end="83:44"><name pos:start="83:41" pos:end="83:44">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:16">tlb_addr</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:27">tlb_addr</name> <operator pos:start="85:29" pos:end="85:29">&amp;</operator> <operator pos:start="85:31" pos:end="85:31">~</operator><name pos:start="85:32" pos:end="85:43">TLB_NOTDIRTY</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:30">/* Notice an IO access  */</comment>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="93:47">(<expr pos:start="93:9" pos:end="93:46"><call pos:start="93:9" pos:end="93:46"><name pos:start="93:9" pos:end="93:16">unlikely</name><argument_list pos:start="93:17" pos:end="93:46">(<argument pos:start="93:18" pos:end="93:45"><expr pos:start="93:18" pos:end="93:45"><name pos:start="93:18" pos:end="93:25">tlb_addr</name> <operator pos:start="93:27" pos:end="93:27">&amp;</operator> <operator pos:start="93:29" pos:end="93:29">~</operator><name pos:start="93:30" pos:end="93:45">TARGET_PAGE_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:49" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:28">

        <comment type="block" pos:start="95:9" pos:end="97:54">/* There's really nothing that can be done to

           support this apart from stop-the-world.  */</comment>

        <goto pos:start="99:9" pos:end="99:28">goto <name pos:start="99:14" pos:end="99:27">stop_the_world</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:57">/* Let the guest notice RMW on a write-only page.  */</comment>

    <if_stmt pos:start="107:5" pos:end="119:5"><if pos:start="107:5" pos:end="119:5">if <condition pos:start="107:8" pos:end="107:46">(<expr pos:start="107:9" pos:end="107:45"><call pos:start="107:9" pos:end="107:45"><name pos:start="107:9" pos:end="107:16">unlikely</name><argument_list pos:start="107:17" pos:end="107:45">(<argument pos:start="107:18" pos:end="107:44"><expr pos:start="107:18" pos:end="107:44"><name pos:start="107:18" pos:end="107:32"><name pos:start="107:18" pos:end="107:21">tlbe</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:32">addr_read</name></name> <operator pos:start="107:34" pos:end="107:35">!=</operator> <name pos:start="107:37" pos:end="107:44">tlb_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:48" pos:end="119:5">{<block_content pos:start="109:9" pos:end="117:28">

        <expr_stmt pos:start="109:9" pos:end="109:74"><expr pos:start="109:9" pos:end="109:73"><call pos:start="109:9" pos:end="109:73"><name pos:start="109:9" pos:end="109:16">tlb_fill</name><argument_list pos:start="109:17" pos:end="109:73">(<argument pos:start="109:18" pos:end="109:33"><expr pos:start="109:18" pos:end="109:33"><call pos:start="109:18" pos:end="109:33"><name pos:start="109:18" pos:end="109:28">ENV_GET_CPU</name><argument_list pos:start="109:29" pos:end="109:33">(<argument pos:start="109:30" pos:end="109:32"><expr pos:start="109:30" pos:end="109:32"><name pos:start="109:30" pos:end="109:32">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:36" pos:end="109:39"><expr pos:start="109:36" pos:end="109:39"><name pos:start="109:36" pos:end="109:39">addr</name></expr></argument>, <argument pos:start="109:42" pos:end="109:54"><expr pos:start="109:42" pos:end="109:54"><name pos:start="109:42" pos:end="109:54">MMU_DATA_LOAD</name></expr></argument>, <argument pos:start="109:57" pos:end="109:63"><expr pos:start="109:57" pos:end="109:63"><name pos:start="109:57" pos:end="109:63">mmu_idx</name></expr></argument>, <argument pos:start="109:66" pos:end="109:72"><expr pos:start="109:66" pos:end="109:72"><name pos:start="109:66" pos:end="109:72">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="111:9" pos:end="115:73">/* Since we don't support reads and writes to different addresses,

           and we do have the proper page loaded for write, this shouldn't

           ever return.  But just in case, handle via stop-the-world.  */</comment>

        <goto pos:start="117:9" pos:end="117:28">goto <name pos:start="117:14" pos:end="117:27">stop_the_world</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="123:5" pos:end="123:52">return <expr pos:start="123:12" pos:end="123:51"><operator pos:start="123:12" pos:end="123:12">(</operator><name pos:start="123:13" pos:end="123:16">void</name> <operator pos:start="123:18" pos:end="123:18">*</operator><operator pos:start="123:19" pos:end="123:19">)</operator><operator pos:start="123:20" pos:end="123:20">(</operator><operator pos:start="123:21" pos:end="123:21">(</operator><name pos:start="123:22" pos:end="123:30">uintptr_t</name><operator pos:start="123:31" pos:end="123:31">)</operator><name pos:start="123:32" pos:end="123:35">addr</name> <operator pos:start="123:37" pos:end="123:37">+</operator> <name pos:start="123:39" pos:end="123:50"><name pos:start="123:39" pos:end="123:42">tlbe</name><operator pos:start="123:43" pos:end="123:44">-&gt;</operator><name pos:start="123:45" pos:end="123:50">addend</name></name><operator pos:start="123:51" pos:end="123:51">)</operator></expr>;</return>



 <label pos:start="127:2" pos:end="127:16"><name pos:start="127:2" pos:end="127:15">stop_the_world</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:52"><expr pos:start="129:5" pos:end="129:51"><call pos:start="129:5" pos:end="129:51"><name pos:start="129:5" pos:end="129:24">cpu_loop_exit_atomic</name><argument_list pos:start="129:25" pos:end="129:51">(<argument pos:start="129:26" pos:end="129:41"><expr pos:start="129:26" pos:end="129:41"><call pos:start="129:26" pos:end="129:41"><name pos:start="129:26" pos:end="129:36">ENV_GET_CPU</name><argument_list pos:start="129:37" pos:end="129:41">(<argument pos:start="129:38" pos:end="129:40"><expr pos:start="129:38" pos:end="129:40"><name pos:start="129:38" pos:end="129:40">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:44" pos:end="129:50"><expr pos:start="129:44" pos:end="129:50"><name pos:start="129:44" pos:end="129:50">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
