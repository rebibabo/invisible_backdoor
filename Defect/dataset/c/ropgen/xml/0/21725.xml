<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21725.c" pos:tabs="8"><function pos:start="1:1" pos:end="379:1"><type pos:start="1:1" pos:end="1:21"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">BlockBackend</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:34">blockdev_init</name><parameter_list pos:start="1:35" pos:end="3:48">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">char</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">file</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:58">QDict</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:67">bs_opts</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:47"><decl pos:start="3:36" pos:end="3:47"><type pos:start="3:36" pos:end="3:47"><name pos:start="3:36" pos:end="3:40">Error</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier><modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:47">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="379:1">{<block_content pos:start="7:5" pos:end="377:16">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">bdrv_flags</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">on_read_error</name></decl>, <decl pos:start="11:24" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:24" pos:end="11:37">on_write_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:24">account_invalid</name></decl>, <decl pos:start="13:27" pos:end="13:40"><type ref="prev" pos:start="13:5" pos:end="13:8"/><name pos:start="13:27" pos:end="13:40">account_failed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:31">stats_intervals</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">BlockBackend</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">BlockDriverState</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:18">ThrottleConfig</name></type> <name pos:start="21:20" pos:end="21:22">cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">snapshot</name> <init pos:start="23:18" pos:end="23:20">= <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:9">Error</name> <modifier pos:start="25:11" pos:end="25:11">*</modifier></type><name pos:start="25:12" pos:end="25:16">error</name> <init pos:start="25:18" pos:end="25:23">= <expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">QemuOpts</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:18">id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:34"><decl pos:start="31:5" pos:end="31:33"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">bool</name></type> <name pos:start="31:10" pos:end="31:33">has_driver_specific_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="35:43"><decl pos:start="33:5" pos:end="35:42"><type pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:31">BlockdevDetectZeroesOptions</name></type> <name pos:start="33:33" pos:end="33:45">detect_zeroes</name> <init pos:start="33:47" pos:end="35:42">=

        <expr pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:42">BLOCKDEV_DETECT_ZEROES_OPTIONS_OFF</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:40"><decl pos:start="37:5" pos:end="37:39"><type pos:start="37:5" pos:end="37:16"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:14">char</name> <modifier pos:start="37:16" pos:end="37:16">*</modifier></type><name pos:start="37:17" pos:end="37:32">throttling_group</name> <init pos:start="37:34" pos:end="37:39">= <expr pos:start="37:36" pos:end="37:39"><name pos:start="37:36" pos:end="37:39">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="41:5" pos:end="43:56">/* Check common options by copying from bs_opts to opts, all other options

     * stay in bs_opts for processing by bdrv_open(). */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:6">id</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:41"><name pos:start="45:10" pos:end="45:26">qdict_get_try_str</name><argument_list pos:start="45:27" pos:end="45:41">(<argument pos:start="45:28" pos:end="45:34"><expr pos:start="45:28" pos:end="45:34"><name pos:start="45:28" pos:end="45:34">bs_opts</name></expr></argument>, <argument pos:start="45:37" pos:end="45:40"><expr pos:start="45:37" pos:end="45:40"><literal type="string" pos:start="45:37" pos:end="45:40">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:68"><expr pos:start="47:5" pos:end="47:67"><name pos:start="47:5" pos:end="47:8">opts</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <call pos:start="47:12" pos:end="47:67"><name pos:start="47:12" pos:end="47:27">qemu_opts_create</name><argument_list pos:start="47:28" pos:end="47:67">(<argument pos:start="47:29" pos:end="47:51"><expr pos:start="47:29" pos:end="47:51"><operator pos:start="47:29" pos:end="47:29">&amp;</operator><name pos:start="47:30" pos:end="47:51">qemu_common_drive_opts</name></expr></argument>, <argument pos:start="47:54" pos:end="47:55"><expr pos:start="47:54" pos:end="47:55"><name pos:start="47:54" pos:end="47:55">id</name></expr></argument>, <argument pos:start="47:58" pos:end="47:58"><expr pos:start="47:58" pos:end="47:58"><literal type="number" pos:start="47:58" pos:end="47:58">1</literal></expr></argument>, <argument pos:start="47:61" pos:end="47:66"><expr pos:start="47:61" pos:end="47:66"><operator pos:start="47:61" pos:end="47:61">&amp;</operator><name pos:start="47:62" pos:end="47:66">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:14">(<expr pos:start="49:9" pos:end="49:13"><name pos:start="49:9" pos:end="49:13">error</name></expr>)</condition> <block pos:start="49:16" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:25">

        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><call pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:23">error_propagate</name><argument_list pos:start="51:24" pos:end="51:36">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:28">errp</name></expr></argument>, <argument pos:start="51:31" pos:end="51:35"><expr pos:start="51:31" pos:end="51:35"><name pos:start="51:31" pos:end="51:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:25">goto <name pos:start="53:14" pos:end="53:24">err_no_opts</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:50"><expr pos:start="59:5" pos:end="59:49"><call pos:start="59:5" pos:end="59:49"><name pos:start="59:5" pos:end="59:26">qemu_opts_absorb_qdict</name><argument_list pos:start="59:27" pos:end="59:49">(<argument pos:start="59:28" pos:end="59:31"><expr pos:start="59:28" pos:end="59:31"><name pos:start="59:28" pos:end="59:31">opts</name></expr></argument>, <argument pos:start="59:34" pos:end="59:40"><expr pos:start="59:34" pos:end="59:40"><name pos:start="59:34" pos:end="59:40">bs_opts</name></expr></argument>, <argument pos:start="59:43" pos:end="59:48"><expr pos:start="59:43" pos:end="59:48"><operator pos:start="59:43" pos:end="59:43">&amp;</operator><name pos:start="59:44" pos:end="59:48">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:14">(<expr pos:start="61:9" pos:end="61:13"><name pos:start="61:9" pos:end="61:13">error</name></expr>)</condition> <block pos:start="61:16" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:23">

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><call pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:23">error_propagate</name><argument_list pos:start="63:24" pos:end="63:36">(<argument pos:start="63:25" pos:end="63:28"><expr pos:start="63:25" pos:end="63:28"><name pos:start="63:25" pos:end="63:28">errp</name></expr></argument>, <argument pos:start="63:31" pos:end="63:35"><expr pos:start="63:31" pos:end="63:35"><name pos:start="63:31" pos:end="63:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:23">goto <name pos:start="65:14" pos:end="65:22">early_err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:11">(<expr pos:start="71:9" pos:end="71:10"><name pos:start="71:9" pos:end="71:10">id</name></expr>)</condition> <block pos:start="71:13" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:33">

        <expr_stmt pos:start="73:9" pos:end="73:33"><expr pos:start="73:9" pos:end="73:32"><call pos:start="73:9" pos:end="73:32"><name pos:start="73:9" pos:end="73:17">qdict_del</name><argument_list pos:start="73:18" pos:end="73:32">(<argument pos:start="73:19" pos:end="73:25"><expr pos:start="73:19" pos:end="73:25"><name pos:start="73:19" pos:end="73:25">bs_opts</name></expr></argument>, <argument pos:start="73:28" pos:end="73:31"><expr pos:start="73:28" pos:end="73:31"><literal type="string" pos:start="73:28" pos:end="73:31">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:53"><expr pos:start="79:5" pos:end="79:52"><name pos:start="79:5" pos:end="79:28">has_driver_specific_opts</name> <operator pos:start="79:30" pos:end="79:30">=</operator> <operator pos:start="79:32" pos:end="79:32">!</operator><operator pos:start="79:33" pos:end="79:33">!</operator><call pos:start="79:34" pos:end="79:52"><name pos:start="79:34" pos:end="79:43">qdict_size</name><argument_list pos:start="79:44" pos:end="79:52">(<argument pos:start="79:45" pos:end="79:51"><expr pos:start="79:45" pos:end="79:51"><name pos:start="79:45" pos:end="79:51">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:28">/* extract parameters */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:54"><expr pos:start="85:5" pos:end="85:53"><name pos:start="85:5" pos:end="85:12">snapshot</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:53"><name pos:start="85:16" pos:end="85:32">qemu_opt_get_bool</name><argument_list pos:start="85:33" pos:end="85:53">(<argument pos:start="85:34" pos:end="85:37"><expr pos:start="85:34" pos:end="85:37"><name pos:start="85:34" pos:end="85:37">opts</name></expr></argument>, <argument pos:start="85:40" pos:end="85:49"><expr pos:start="85:40" pos:end="85:49"><literal type="string" pos:start="85:40" pos:end="85:49">"snapshot"</literal></expr></argument>, <argument pos:start="85:52" pos:end="85:52"><expr pos:start="85:52" pos:end="85:52"><literal type="number" pos:start="85:52" pos:end="85:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:77"><expr pos:start="89:5" pos:end="89:76"><name pos:start="89:5" pos:end="89:19">account_invalid</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:76"><name pos:start="89:23" pos:end="89:39">qemu_opt_get_bool</name><argument_list pos:start="89:40" pos:end="89:76">(<argument pos:start="89:41" pos:end="89:44"><expr pos:start="89:41" pos:end="89:44"><name pos:start="89:41" pos:end="89:44">opts</name></expr></argument>, <argument pos:start="89:47" pos:end="89:69"><expr pos:start="89:47" pos:end="89:69"><literal type="string" pos:start="89:47" pos:end="89:69">"stats-account-invalid"</literal></expr></argument>, <argument pos:start="89:72" pos:end="89:75"><expr pos:start="89:72" pos:end="89:75"><name pos:start="89:72" pos:end="89:75">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:75"><expr pos:start="91:5" pos:end="91:74"><name pos:start="91:5" pos:end="91:18">account_failed</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <call pos:start="91:22" pos:end="91:74"><name pos:start="91:22" pos:end="91:38">qemu_opt_get_bool</name><argument_list pos:start="91:39" pos:end="91:74">(<argument pos:start="91:40" pos:end="91:43"><expr pos:start="91:40" pos:end="91:43"><name pos:start="91:40" pos:end="91:43">opts</name></expr></argument>, <argument pos:start="91:46" pos:end="91:67"><expr pos:start="91:46" pos:end="91:67"><literal type="string" pos:start="91:46" pos:end="91:67">"stats-account-failed"</literal></expr></argument>, <argument pos:start="91:70" pos:end="91:73"><expr pos:start="91:70" pos:end="91:73"><name pos:start="91:70" pos:end="91:73">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:19">stats_intervals</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="95:59"><name pos:start="95:23" pos:end="95:34">qemu_opt_get</name><argument_list pos:start="95:35" pos:end="95:59">(<argument pos:start="95:36" pos:end="95:39"><expr pos:start="95:36" pos:end="95:39"><name pos:start="95:36" pos:end="95:39">opts</name></expr></argument>, <argument pos:start="95:42" pos:end="95:58"><expr pos:start="95:42" pos:end="95:58"><literal type="string" pos:start="95:42" pos:end="95:58">"stats-intervals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="101:60"><expr pos:start="99:5" pos:end="101:59"><call pos:start="99:5" pos:end="101:59"><name pos:start="99:5" pos:end="99:35">extract_common_blockdev_options</name><argument_list pos:start="99:36" pos:end="101:59">(<argument pos:start="99:37" pos:end="99:40"><expr pos:start="99:37" pos:end="99:40"><name pos:start="99:37" pos:end="99:40">opts</name></expr></argument>, <argument pos:start="99:43" pos:end="99:53"><expr pos:start="99:43" pos:end="99:53"><operator pos:start="99:43" pos:end="99:43">&amp;</operator><name pos:start="99:44" pos:end="99:53">bdrv_flags</name></expr></argument>, <argument pos:start="99:56" pos:end="99:72"><expr pos:start="99:56" pos:end="99:72"><operator pos:start="99:56" pos:end="99:56">&amp;</operator><name pos:start="99:57" pos:end="99:72">throttling_group</name></expr></argument>, <argument pos:start="99:75" pos:end="99:78"><expr pos:start="99:75" pos:end="99:78"><operator pos:start="99:75" pos:end="99:75">&amp;</operator><name pos:start="99:76" pos:end="99:78">cfg</name></expr></argument>,

                                    <argument pos:start="101:37" pos:end="101:50"><expr pos:start="101:37" pos:end="101:50"><operator pos:start="101:37" pos:end="101:37">&amp;</operator><name pos:start="101:38" pos:end="101:50">detect_zeroes</name></expr></argument>, <argument pos:start="101:53" pos:end="101:58"><expr pos:start="101:53" pos:end="101:58"><operator pos:start="101:53" pos:end="101:53">&amp;</operator><name pos:start="101:54" pos:end="101:58">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:14">(<expr pos:start="103:9" pos:end="103:13"><name pos:start="103:9" pos:end="103:13">error</name></expr>)</condition> <block pos:start="103:16" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:23">

        <expr_stmt pos:start="105:9" pos:end="105:37"><expr pos:start="105:9" pos:end="105:36"><call pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:23">error_propagate</name><argument_list pos:start="105:24" pos:end="105:36">(<argument pos:start="105:25" pos:end="105:28"><expr pos:start="105:25" pos:end="105:28"><name pos:start="105:25" pos:end="105:28">errp</name></expr></argument>, <argument pos:start="105:31" pos:end="105:35"><expr pos:start="105:31" pos:end="105:35"><name pos:start="105:31" pos:end="105:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:23">goto <name pos:start="107:14" pos:end="107:22">early_err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="139:5"><if pos:start="113:5" pos:end="139:5">if <condition pos:start="113:8" pos:end="113:53">(<expr pos:start="113:9" pos:end="113:52"><operator pos:start="113:9" pos:end="113:9">(</operator><name pos:start="113:10" pos:end="113:12">buf</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:43"><name pos:start="113:16" pos:end="113:27">qemu_opt_get</name><argument_list pos:start="113:28" pos:end="113:43">(<argument pos:start="113:29" pos:end="113:32"><expr pos:start="113:29" pos:end="113:32"><name pos:start="113:29" pos:end="113:32">opts</name></expr></argument>, <argument pos:start="113:35" pos:end="113:42"><expr pos:start="113:35" pos:end="113:42"><literal type="string" pos:start="113:35" pos:end="113:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="113:44" pos:end="113:44">)</operator> <operator pos:start="113:46" pos:end="113:47">!=</operator> <name pos:start="113:49" pos:end="113:52">NULL</name></expr>)</condition> <block pos:start="113:55" pos:end="139:5">{<block_content pos:start="115:9" pos:end="137:60">

        <if_stmt pos:start="115:9" pos:end="125:9"><if pos:start="115:9" pos:end="125:9">if <condition pos:start="115:12" pos:end="115:32">(<expr pos:start="115:13" pos:end="115:31"><call pos:start="115:13" pos:end="115:31"><name pos:start="115:13" pos:end="115:26">is_help_option</name><argument_list pos:start="115:27" pos:end="115:31">(<argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:34" pos:end="125:9">{<block_content pos:start="117:13" pos:end="123:27">

            <expr_stmt pos:start="117:13" pos:end="117:47"><expr pos:start="117:13" pos:end="117:46"><call pos:start="117:13" pos:end="117:46"><name pos:start="117:13" pos:end="117:24">error_printf</name><argument_list pos:start="117:25" pos:end="117:46">(<argument pos:start="117:26" pos:end="117:45"><expr pos:start="117:26" pos:end="117:45"><literal type="string" pos:start="117:26" pos:end="117:45">"Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:57"><expr pos:start="119:13" pos:end="119:56"><call pos:start="119:13" pos:end="119:56"><name pos:start="119:13" pos:end="119:31">bdrv_iterate_format</name><argument_list pos:start="119:32" pos:end="119:56">(<argument pos:start="119:33" pos:end="119:49"><expr pos:start="119:33" pos:end="119:49"><name pos:start="119:33" pos:end="119:49">bdrv_format_print</name></expr></argument>, <argument pos:start="119:52" pos:end="119:55"><expr pos:start="119:52" pos:end="119:55"><name pos:start="119:52" pos:end="119:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:31"><expr pos:start="121:13" pos:end="121:30"><call pos:start="121:13" pos:end="121:30"><name pos:start="121:13" pos:end="121:24">error_printf</name><argument_list pos:start="121:25" pos:end="121:30">(<argument pos:start="121:26" pos:end="121:29"><expr pos:start="121:26" pos:end="121:29"><literal type="string" pos:start="121:26" pos:end="121:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:27">goto <name pos:start="123:18" pos:end="123:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:44">(<expr pos:start="129:13" pos:end="129:43"><call pos:start="129:13" pos:end="129:43"><name pos:start="129:13" pos:end="129:24">qdict_haskey</name><argument_list pos:start="129:25" pos:end="129:43">(<argument pos:start="129:26" pos:end="129:32"><expr pos:start="129:26" pos:end="129:32"><name pos:start="129:26" pos:end="129:32">bs_opts</name></expr></argument>, <argument pos:start="129:35" pos:end="129:42"><expr pos:start="129:35" pos:end="129:42"><literal type="string" pos:start="129:35" pos:end="129:42">"driver"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:46" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:27">

            <expr_stmt pos:start="131:13" pos:end="131:74"><expr pos:start="131:13" pos:end="131:73"><call pos:start="131:13" pos:end="131:73"><name pos:start="131:13" pos:end="131:22">error_setg</name><argument_list pos:start="131:23" pos:end="131:73">(<argument pos:start="131:24" pos:end="131:27"><expr pos:start="131:24" pos:end="131:27"><name pos:start="131:24" pos:end="131:27">errp</name></expr></argument>, <argument pos:start="131:30" pos:end="131:72"><expr pos:start="131:30" pos:end="131:72"><literal type="string" pos:start="131:30" pos:end="131:72">"Cannot specify both 'driver' and 'format'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="133:13" pos:end="133:27">goto <name pos:start="133:18" pos:end="133:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:60"><expr pos:start="137:9" pos:end="137:59"><call pos:start="137:9" pos:end="137:59"><name pos:start="137:9" pos:end="137:17">qdict_put</name><argument_list pos:start="137:18" pos:end="137:59">(<argument pos:start="137:19" pos:end="137:25"><expr pos:start="137:19" pos:end="137:25"><name pos:start="137:19" pos:end="137:25">bs_opts</name></expr></argument>, <argument pos:start="137:28" pos:end="137:35"><expr pos:start="137:28" pos:end="137:35"><literal type="string" pos:start="137:28" pos:end="137:35">"driver"</literal></expr></argument>, <argument pos:start="137:38" pos:end="137:58"><expr pos:start="137:38" pos:end="137:58"><call pos:start="137:38" pos:end="137:58"><name pos:start="137:38" pos:end="137:53">qstring_from_str</name><argument_list pos:start="137:54" pos:end="137:58">(<argument pos:start="137:55" pos:end="137:57"><expr pos:start="137:55" pos:end="137:57"><name pos:start="137:55" pos:end="137:57">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:46"><expr pos:start="143:5" pos:end="143:45"><name pos:start="143:5" pos:end="143:18">on_write_error</name> <operator pos:start="143:20" pos:end="143:20">=</operator> <name pos:start="143:22" pos:end="143:45">BLOCKDEV_ON_ERROR_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="157:5"><if pos:start="145:5" pos:end="157:5">if <condition pos:start="145:8" pos:end="145:53">(<expr pos:start="145:9" pos:end="145:52"><operator pos:start="145:9" pos:end="145:9">(</operator><name pos:start="145:10" pos:end="145:12">buf</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <call pos:start="145:16" pos:end="145:43"><name pos:start="145:16" pos:end="145:27">qemu_opt_get</name><argument_list pos:start="145:28" pos:end="145:43">(<argument pos:start="145:29" pos:end="145:32"><expr pos:start="145:29" pos:end="145:32"><name pos:start="145:29" pos:end="145:32">opts</name></expr></argument>, <argument pos:start="145:35" pos:end="145:42"><expr pos:start="145:35" pos:end="145:42"><literal type="string" pos:start="145:35" pos:end="145:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="145:44" pos:end="145:44">)</operator> <operator pos:start="145:46" pos:end="145:47">!=</operator> <name pos:start="145:49" pos:end="145:52">NULL</name></expr>)</condition> <block pos:start="145:55" pos:end="157:5">{<block_content pos:start="147:9" pos:end="155:9">

        <expr_stmt pos:start="147:9" pos:end="147:66"><expr pos:start="147:9" pos:end="147:65"><name pos:start="147:9" pos:end="147:22">on_write_error</name> <operator pos:start="147:24" pos:end="147:24">=</operator> <call pos:start="147:26" pos:end="147:65"><name pos:start="147:26" pos:end="147:49">parse_block_error_action</name><argument_list pos:start="147:50" pos:end="147:65">(<argument pos:start="147:51" pos:end="147:53"><expr pos:start="147:51" pos:end="147:53"><name pos:start="147:51" pos:end="147:53">buf</name></expr></argument>, <argument pos:start="147:56" pos:end="147:56"><expr pos:start="147:56" pos:end="147:56"><literal type="number" pos:start="147:56" pos:end="147:56">0</literal></expr></argument>, <argument pos:start="147:59" pos:end="147:64"><expr pos:start="147:59" pos:end="147:64"><operator pos:start="147:59" pos:end="147:59">&amp;</operator><name pos:start="147:60" pos:end="147:64">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:18">(<expr pos:start="149:13" pos:end="149:17"><name pos:start="149:13" pos:end="149:17">error</name></expr>)</condition> <block pos:start="149:20" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:27">

            <expr_stmt pos:start="151:13" pos:end="151:41"><expr pos:start="151:13" pos:end="151:40"><call pos:start="151:13" pos:end="151:40"><name pos:start="151:13" pos:end="151:27">error_propagate</name><argument_list pos:start="151:28" pos:end="151:40">(<argument pos:start="151:29" pos:end="151:32"><expr pos:start="151:29" pos:end="151:32"><name pos:start="151:29" pos:end="151:32">errp</name></expr></argument>, <argument pos:start="151:35" pos:end="151:39"><expr pos:start="151:35" pos:end="151:39"><name pos:start="151:35" pos:end="151:39">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="153:13" pos:end="153:27">goto <name pos:start="153:18" pos:end="153:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:45"><expr pos:start="161:5" pos:end="161:44"><name pos:start="161:5" pos:end="161:17">on_read_error</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <name pos:start="161:21" pos:end="161:44">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="175:5"><if pos:start="163:5" pos:end="175:5">if <condition pos:start="163:8" pos:end="163:53">(<expr pos:start="163:9" pos:end="163:52"><operator pos:start="163:9" pos:end="163:9">(</operator><name pos:start="163:10" pos:end="163:12">buf</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <call pos:start="163:16" pos:end="163:43"><name pos:start="163:16" pos:end="163:27">qemu_opt_get</name><argument_list pos:start="163:28" pos:end="163:43">(<argument pos:start="163:29" pos:end="163:32"><expr pos:start="163:29" pos:end="163:32"><name pos:start="163:29" pos:end="163:32">opts</name></expr></argument>, <argument pos:start="163:35" pos:end="163:42"><expr pos:start="163:35" pos:end="163:42"><literal type="string" pos:start="163:35" pos:end="163:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="163:44" pos:end="163:44">)</operator> <operator pos:start="163:46" pos:end="163:47">!=</operator> <name pos:start="163:49" pos:end="163:52">NULL</name></expr>)</condition> <block pos:start="163:55" pos:end="175:5">{<block_content pos:start="165:9" pos:end="173:9">

        <expr_stmt pos:start="165:9" pos:end="165:65"><expr pos:start="165:9" pos:end="165:64"><name pos:start="165:9" pos:end="165:21">on_read_error</name> <operator pos:start="165:23" pos:end="165:23">=</operator> <call pos:start="165:25" pos:end="165:64"><name pos:start="165:25" pos:end="165:48">parse_block_error_action</name><argument_list pos:start="165:49" pos:end="165:64">(<argument pos:start="165:50" pos:end="165:52"><expr pos:start="165:50" pos:end="165:52"><name pos:start="165:50" pos:end="165:52">buf</name></expr></argument>, <argument pos:start="165:55" pos:end="165:55"><expr pos:start="165:55" pos:end="165:55"><literal type="number" pos:start="165:55" pos:end="165:55">1</literal></expr></argument>, <argument pos:start="165:58" pos:end="165:63"><expr pos:start="165:58" pos:end="165:63"><operator pos:start="165:58" pos:end="165:58">&amp;</operator><name pos:start="165:59" pos:end="165:63">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="173:9"><if pos:start="167:9" pos:end="173:9">if <condition pos:start="167:12" pos:end="167:18">(<expr pos:start="167:13" pos:end="167:17"><name pos:start="167:13" pos:end="167:17">error</name></expr>)</condition> <block pos:start="167:20" pos:end="173:9">{<block_content pos:start="169:13" pos:end="171:27">

            <expr_stmt pos:start="169:13" pos:end="169:41"><expr pos:start="169:13" pos:end="169:40"><call pos:start="169:13" pos:end="169:40"><name pos:start="169:13" pos:end="169:27">error_propagate</name><argument_list pos:start="169:28" pos:end="169:40">(<argument pos:start="169:29" pos:end="169:32"><expr pos:start="169:29" pos:end="169:32"><name pos:start="169:29" pos:end="169:32">errp</name></expr></argument>, <argument pos:start="169:35" pos:end="169:39"><expr pos:start="169:35" pos:end="169:39"><name pos:start="169:35" pos:end="169:39">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="171:13" pos:end="171:27">goto <name pos:start="171:18" pos:end="171:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="179:5" pos:end="187:5"><if pos:start="179:5" pos:end="187:5">if <condition pos:start="179:8" pos:end="179:17">(<expr pos:start="179:9" pos:end="179:16"><name pos:start="179:9" pos:end="179:16">snapshot</name></expr>)</condition> <block pos:start="179:19" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:72">

        <comment type="block" pos:start="181:9" pos:end="181:51">/* always use cache=unsafe with snapshot */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:41"><expr pos:start="183:9" pos:end="183:40"><name pos:start="183:9" pos:end="183:18">bdrv_flags</name> <operator pos:start="183:20" pos:end="183:21">&amp;=</operator> <operator pos:start="183:23" pos:end="183:23">~</operator><name pos:start="183:24" pos:end="183:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:72"><expr pos:start="185:9" pos:end="185:71"><name pos:start="185:9" pos:end="185:18">bdrv_flags</name> <operator pos:start="185:20" pos:end="185:21">|=</operator> <operator pos:start="185:23" pos:end="185:23">(</operator><name pos:start="185:24" pos:end="185:38">BDRV_O_SNAPSHOT</name><operator pos:start="185:39" pos:end="185:39">|</operator><name pos:start="185:40" pos:end="185:54">BDRV_O_CACHE_WB</name><operator pos:start="185:55" pos:end="185:55">|</operator><name pos:start="185:56" pos:end="185:70">BDRV_O_NO_FLUSH</name><operator pos:start="185:71" pos:end="185:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:14">/* init */</comment>

    <if_stmt pos:start="193:5" pos:end="353:5"><if pos:start="193:5" pos:end="239:5">if <condition pos:start="193:8" pos:end="193:55">(<expr pos:start="193:9" pos:end="193:54"><operator pos:start="193:9" pos:end="193:9">(</operator><operator pos:start="193:10" pos:end="193:10">!</operator><name pos:start="193:11" pos:end="193:14">file</name> <operator pos:start="193:16" pos:end="193:17">||</operator> <operator pos:start="193:19" pos:end="193:19">!</operator><operator pos:start="193:20" pos:end="193:20">*</operator><name pos:start="193:21" pos:end="193:24">file</name><operator pos:start="193:25" pos:end="193:25">)</operator> <operator pos:start="193:27" pos:end="193:28">&amp;&amp;</operator> <operator pos:start="193:30" pos:end="193:30">!</operator><name pos:start="193:31" pos:end="193:54">has_driver_specific_opts</name></expr>)</condition> <block pos:start="193:57" pos:end="239:5">{<block_content pos:start="195:9" pos:end="237:25">

        <decl_stmt pos:start="195:9" pos:end="195:38"><decl pos:start="195:9" pos:end="195:37"><type pos:start="195:9" pos:end="195:31"><name pos:start="195:9" pos:end="195:29">BlockBackendRootState</name> <modifier pos:start="195:31" pos:end="195:31">*</modifier></type><name pos:start="195:32" pos:end="195:37">blk_rs</name></decl>;</decl_stmt>



        <expr_stmt pos:start="199:9" pos:end="199:48"><expr pos:start="199:9" pos:end="199:47"><name pos:start="199:9" pos:end="199:11">blk</name> <operator pos:start="199:13" pos:end="199:13">=</operator> <call pos:start="199:15" pos:end="199:47"><name pos:start="199:15" pos:end="199:21">blk_new</name><argument_list pos:start="199:22" pos:end="199:47">(<argument pos:start="199:23" pos:end="199:40"><expr pos:start="199:23" pos:end="199:40"><call pos:start="199:23" pos:end="199:40"><name pos:start="199:23" pos:end="199:34">qemu_opts_id</name><argument_list pos:start="199:35" pos:end="199:40">(<argument pos:start="199:36" pos:end="199:39"><expr pos:start="199:36" pos:end="199:39"><name pos:start="199:36" pos:end="199:39">opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:43" pos:end="199:46"><expr pos:start="199:43" pos:end="199:46"><name pos:start="199:43" pos:end="199:46">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="205:9"><if pos:start="201:9" pos:end="205:9">if <condition pos:start="201:12" pos:end="201:17">(<expr pos:start="201:13" pos:end="201:16"><operator pos:start="201:13" pos:end="201:13">!</operator><name pos:start="201:14" pos:end="201:16">blk</name></expr>)</condition> <block pos:start="201:19" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:27">

            <goto pos:start="203:13" pos:end="203:27">goto <name pos:start="203:18" pos:end="203:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="209:9" pos:end="209:41"><expr pos:start="209:9" pos:end="209:40"><name pos:start="209:9" pos:end="209:14">blk_rs</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <call pos:start="209:18" pos:end="209:40"><name pos:start="209:18" pos:end="209:35">blk_get_root_state</name><argument_list pos:start="209:36" pos:end="209:40">(<argument pos:start="209:37" pos:end="209:39"><expr pos:start="209:37" pos:end="209:39"><name pos:start="209:37" pos:end="209:39">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:43"><expr pos:start="211:9" pos:end="211:42"><name pos:start="211:9" pos:end="211:26"><name pos:start="211:9" pos:end="211:14">blk_rs</name><operator pos:start="211:15" pos:end="211:16">-&gt;</operator><name pos:start="211:17" pos:end="211:26">open_flags</name></name>    <operator pos:start="211:31" pos:end="211:31">=</operator> <name pos:start="211:33" pos:end="211:42">bdrv_flags</name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:60"><expr pos:start="213:9" pos:end="213:59"><name pos:start="213:9" pos:end="213:25"><name pos:start="213:9" pos:end="213:14">blk_rs</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:25">read_only</name></name>     <operator pos:start="213:31" pos:end="213:31">=</operator> <operator pos:start="213:33" pos:end="213:33">!</operator><operator pos:start="213:34" pos:end="213:34">(</operator><name pos:start="213:35" pos:end="213:44">bdrv_flags</name> <operator pos:start="213:46" pos:end="213:46">&amp;</operator> <name pos:start="213:48" pos:end="213:58">BDRV_O_RDWR</name><operator pos:start="213:59" pos:end="213:59">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:46"><expr pos:start="215:9" pos:end="215:45"><name pos:start="215:9" pos:end="215:29"><name pos:start="215:9" pos:end="215:14">blk_rs</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:29">detect_zeroes</name></name> <operator pos:start="215:31" pos:end="215:31">=</operator> <name pos:start="215:33" pos:end="215:45">detect_zeroes</name></expr>;</expr_stmt>



        <if_stmt pos:start="219:9" pos:end="233:9"><if pos:start="219:9" pos:end="233:9">if <condition pos:start="219:12" pos:end="219:35">(<expr pos:start="219:13" pos:end="219:34"><call pos:start="219:13" pos:end="219:34"><name pos:start="219:13" pos:end="219:28">throttle_enabled</name><argument_list pos:start="219:29" pos:end="219:34">(<argument pos:start="219:30" pos:end="219:33"><expr pos:start="219:30" pos:end="219:33"><operator pos:start="219:30" pos:end="219:30">&amp;</operator><name pos:start="219:31" pos:end="219:33">cfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="219:37" pos:end="233:9">{<block_content pos:start="221:13" pos:end="231:46">

            <if_stmt pos:start="221:13" pos:end="225:13"><if pos:start="221:13" pos:end="225:13">if <condition pos:start="221:16" pos:end="221:34">(<expr pos:start="221:17" pos:end="221:33"><operator pos:start="221:17" pos:end="221:17">!</operator><name pos:start="221:18" pos:end="221:33">throttling_group</name></expr>)</condition> <block pos:start="221:36" pos:end="225:13">{<block_content pos:start="223:17" pos:end="223:49">

                <expr_stmt pos:start="223:17" pos:end="223:49"><expr pos:start="223:17" pos:end="223:48"><name pos:start="223:17" pos:end="223:32">throttling_group</name> <operator pos:start="223:34" pos:end="223:34">=</operator> <call pos:start="223:36" pos:end="223:48"><name pos:start="223:36" pos:end="223:43">blk_name</name><argument_list pos:start="223:44" pos:end="223:48">(<argument pos:start="223:45" pos:end="223:47"><expr pos:start="223:45" pos:end="223:47"><name pos:start="223:45" pos:end="223:47">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:64"><expr pos:start="227:13" pos:end="227:63"><name pos:start="227:13" pos:end="227:34"><name pos:start="227:13" pos:end="227:18">blk_rs</name><operator pos:start="227:19" pos:end="227:20">-&gt;</operator><name pos:start="227:21" pos:end="227:34">throttle_group</name></name> <operator pos:start="227:36" pos:end="227:36">=</operator> <call pos:start="227:38" pos:end="227:63"><name pos:start="227:38" pos:end="227:45">g_strdup</name><argument_list pos:start="227:46" pos:end="227:63">(<argument pos:start="227:47" pos:end="227:62"><expr pos:start="227:47" pos:end="227:62"><name pos:start="227:47" pos:end="227:62">throttling_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:77"><expr pos:start="229:13" pos:end="229:76"><name pos:start="229:13" pos:end="229:34"><name pos:start="229:13" pos:end="229:18">blk_rs</name><operator pos:start="229:19" pos:end="229:20">-&gt;</operator><name pos:start="229:21" pos:end="229:34">throttle_state</name></name> <operator pos:start="229:36" pos:end="229:36">=</operator> <call pos:start="229:38" pos:end="229:76"><name pos:start="229:38" pos:end="229:58">throttle_group_incref</name><argument_list pos:start="229:59" pos:end="229:76">(<argument pos:start="229:60" pos:end="229:75"><expr pos:start="229:60" pos:end="229:75"><name pos:start="229:60" pos:end="229:75">throttling_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:46"><expr pos:start="231:13" pos:end="231:45"><name pos:start="231:13" pos:end="231:39"><name pos:start="231:13" pos:end="231:18">blk_rs</name><operator pos:start="231:19" pos:end="231:20">-&gt;</operator><name pos:start="231:21" pos:end="231:34">throttle_state</name><operator pos:start="231:35" pos:end="231:36">-&gt;</operator><name pos:start="231:37" pos:end="231:39">cfg</name></name> <operator pos:start="231:41" pos:end="231:41">=</operator> <name pos:start="231:43" pos:end="231:45">cfg</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="237:9" pos:end="237:25"><expr pos:start="237:9" pos:end="237:24"><call pos:start="237:9" pos:end="237:24"><name pos:start="237:9" pos:end="237:15">QDECREF</name><argument_list pos:start="237:16" pos:end="237:24">(<argument pos:start="237:17" pos:end="237:23"><expr pos:start="237:17" pos:end="237:23"><name pos:start="237:17" pos:end="237:23">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="239:7" pos:end="353:5">else <block pos:start="239:12" pos:end="353:5">{<block_content pos:start="241:9" pos:end="351:9">

        <if_stmt pos:start="241:9" pos:end="245:9"><if pos:start="241:9" pos:end="245:9">if <condition pos:start="241:12" pos:end="241:27">(<expr pos:start="241:13" pos:end="241:26"><name pos:start="241:13" pos:end="241:16">file</name> <operator pos:start="241:18" pos:end="241:19">&amp;&amp;</operator> <operator pos:start="241:21" pos:end="241:21">!</operator><operator pos:start="241:22" pos:end="241:22">*</operator><name pos:start="241:23" pos:end="241:26">file</name></expr>)</condition> <block pos:start="241:29" pos:end="245:9">{<block_content pos:start="243:13" pos:end="243:24">

            <expr_stmt pos:start="243:13" pos:end="243:24"><expr pos:start="243:13" pos:end="243:23"><name pos:start="243:13" pos:end="243:16">file</name> <operator pos:start="243:18" pos:end="243:18">=</operator> <name pos:start="243:20" pos:end="243:23">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="249:9" pos:end="251:33"><expr pos:start="249:9" pos:end="251:32"><name pos:start="249:9" pos:end="249:11">blk</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <call pos:start="249:15" pos:end="251:32"><name pos:start="249:15" pos:end="249:26">blk_new_open</name><argument_list pos:start="249:27" pos:end="251:32">(<argument pos:start="249:28" pos:end="249:45"><expr pos:start="249:28" pos:end="249:45"><call pos:start="249:28" pos:end="249:45"><name pos:start="249:28" pos:end="249:39">qemu_opts_id</name><argument_list pos:start="249:40" pos:end="249:45">(<argument pos:start="249:41" pos:end="249:44"><expr pos:start="249:41" pos:end="249:44"><name pos:start="249:41" pos:end="249:44">opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="249:48" pos:end="249:51"><expr pos:start="249:48" pos:end="249:51"><name pos:start="249:48" pos:end="249:51">file</name></expr></argument>, <argument pos:start="249:54" pos:end="249:57"><expr pos:start="249:54" pos:end="249:57"><name pos:start="249:54" pos:end="249:57">NULL</name></expr></argument>, <argument pos:start="249:60" pos:end="249:66"><expr pos:start="249:60" pos:end="249:66"><name pos:start="249:60" pos:end="249:66">bs_opts</name></expr></argument>, <argument pos:start="249:69" pos:end="249:78"><expr pos:start="249:69" pos:end="249:78"><name pos:start="249:69" pos:end="249:78">bdrv_flags</name></expr></argument>,

                           <argument pos:start="251:28" pos:end="251:31"><expr pos:start="251:28" pos:end="251:31"><name pos:start="251:28" pos:end="251:31">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="257:9"><if pos:start="253:9" pos:end="257:9">if <condition pos:start="253:12" pos:end="253:17">(<expr pos:start="253:13" pos:end="253:16"><operator pos:start="253:13" pos:end="253:13">!</operator><name pos:start="253:14" pos:end="253:16">blk</name></expr>)</condition> <block pos:start="253:19" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:32">

            <goto pos:start="255:13" pos:end="255:32">goto <name pos:start="255:18" pos:end="255:31">err_no_bs_opts</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:25"><expr pos:start="259:9" pos:end="259:24"><name pos:start="259:9" pos:end="259:10">bs</name> <operator pos:start="259:12" pos:end="259:12">=</operator> <call pos:start="259:14" pos:end="259:24"><name pos:start="259:14" pos:end="259:19">blk_bs</name><argument_list pos:start="259:20" pos:end="259:24">(<argument pos:start="259:21" pos:end="259:23"><expr pos:start="259:21" pos:end="259:23"><name pos:start="259:21" pos:end="259:23">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="263:9" pos:end="263:42"><expr pos:start="263:9" pos:end="263:41"><name pos:start="263:9" pos:end="263:25"><name pos:start="263:9" pos:end="263:10">bs</name><operator pos:start="263:11" pos:end="263:12">-&gt;</operator><name pos:start="263:13" pos:end="263:25">detect_zeroes</name></name> <operator pos:start="263:27" pos:end="263:27">=</operator> <name pos:start="263:29" pos:end="263:41">detect_zeroes</name></expr>;</expr_stmt>



        <comment type="block" pos:start="267:9" pos:end="267:33">/* disk I/O throttling */</comment>

        <if_stmt pos:start="269:9" pos:end="281:9"><if pos:start="269:9" pos:end="281:9">if <condition pos:start="269:12" pos:end="269:35">(<expr pos:start="269:13" pos:end="269:34"><call pos:start="269:13" pos:end="269:34"><name pos:start="269:13" pos:end="269:28">throttle_enabled</name><argument_list pos:start="269:29" pos:end="269:34">(<argument pos:start="269:30" pos:end="269:33"><expr pos:start="269:30" pos:end="269:33"><operator pos:start="269:30" pos:end="269:30">&amp;</operator><name pos:start="269:31" pos:end="269:33">cfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="269:37" pos:end="281:9">{<block_content pos:start="271:13" pos:end="279:41">

            <if_stmt pos:start="271:13" pos:end="275:13"><if pos:start="271:13" pos:end="275:13">if <condition pos:start="271:16" pos:end="271:34">(<expr pos:start="271:17" pos:end="271:33"><operator pos:start="271:17" pos:end="271:17">!</operator><name pos:start="271:18" pos:end="271:33">throttling_group</name></expr>)</condition> <block pos:start="271:36" pos:end="275:13">{<block_content pos:start="273:17" pos:end="273:49">

                <expr_stmt pos:start="273:17" pos:end="273:49"><expr pos:start="273:17" pos:end="273:48"><name pos:start="273:17" pos:end="273:32">throttling_group</name> <operator pos:start="273:34" pos:end="273:34">=</operator> <call pos:start="273:36" pos:end="273:48"><name pos:start="273:36" pos:end="273:43">blk_name</name><argument_list pos:start="273:44" pos:end="273:48">(<argument pos:start="273:45" pos:end="273:47"><expr pos:start="273:45" pos:end="273:47"><name pos:start="273:45" pos:end="273:47">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:56"><expr pos:start="277:13" pos:end="277:55"><call pos:start="277:13" pos:end="277:55"><name pos:start="277:13" pos:end="277:33">bdrv_io_limits_enable</name><argument_list pos:start="277:34" pos:end="277:55">(<argument pos:start="277:35" pos:end="277:36"><expr pos:start="277:35" pos:end="277:36"><name pos:start="277:35" pos:end="277:36">bs</name></expr></argument>, <argument pos:start="277:39" pos:end="277:54"><expr pos:start="277:39" pos:end="277:54"><name pos:start="277:39" pos:end="277:54">throttling_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:41"><expr pos:start="279:13" pos:end="279:40"><call pos:start="279:13" pos:end="279:40"><name pos:start="279:13" pos:end="279:30">bdrv_set_io_limits</name><argument_list pos:start="279:31" pos:end="279:40">(<argument pos:start="279:32" pos:end="279:33"><expr pos:start="279:32" pos:end="279:33"><name pos:start="279:32" pos:end="279:33">bs</name></expr></argument>, <argument pos:start="279:36" pos:end="279:39"><expr pos:start="279:36" pos:end="279:39"><operator pos:start="279:36" pos:end="279:36">&amp;</operator><name pos:start="279:37" pos:end="279:39">cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="285:9" pos:end="289:9"><if pos:start="285:9" pos:end="289:9">if <condition pos:start="285:12" pos:end="285:34">(<expr pos:start="285:13" pos:end="285:33"><call pos:start="285:13" pos:end="285:33"><name pos:start="285:13" pos:end="285:29">bdrv_key_required</name><argument_list pos:start="285:30" pos:end="285:33">(<argument pos:start="285:31" pos:end="285:32"><expr pos:start="285:31" pos:end="285:32"><name pos:start="285:31" pos:end="285:32">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="285:36" pos:end="289:9">{<block_content pos:start="287:13" pos:end="287:26">

            <expr_stmt pos:start="287:13" pos:end="287:26"><expr pos:start="287:13" pos:end="287:25"><name pos:start="287:13" pos:end="287:21">autostart</name> <operator pos:start="287:23" pos:end="287:23">=</operator> <literal type="number" pos:start="287:25" pos:end="287:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="293:9" pos:end="293:77"><expr pos:start="293:9" pos:end="293:76"><call pos:start="293:9" pos:end="293:76"><name pos:start="293:9" pos:end="293:23">block_acct_init</name><argument_list pos:start="293:24" pos:end="293:76">(<argument pos:start="293:25" pos:end="293:42"><expr pos:start="293:25" pos:end="293:42"><call pos:start="293:25" pos:end="293:42"><name pos:start="293:25" pos:end="293:37">blk_get_stats</name><argument_list pos:start="293:38" pos:end="293:42">(<argument pos:start="293:39" pos:end="293:41"><expr pos:start="293:39" pos:end="293:41"><name pos:start="293:39" pos:end="293:41">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="293:45" pos:end="293:59"><expr pos:start="293:45" pos:end="293:59"><name pos:start="293:45" pos:end="293:59">account_invalid</name></expr></argument>, <argument pos:start="293:62" pos:end="293:75"><expr pos:start="293:62" pos:end="293:75"><name pos:start="293:62" pos:end="293:75">account_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="297:9" pos:end="351:9"><if pos:start="297:9" pos:end="351:9">if <condition pos:start="297:12" pos:end="297:28">(<expr pos:start="297:13" pos:end="297:27"><name pos:start="297:13" pos:end="297:27">stats_intervals</name></expr>)</condition> <block pos:start="297:30" pos:end="351:9">{<block_content pos:start="299:13" pos:end="349:13">

            <decl_stmt pos:start="299:13" pos:end="299:67"><decl pos:start="299:13" pos:end="299:66"><type pos:start="299:13" pos:end="299:19"><name pos:start="299:13" pos:end="299:16">char</name> <modifier pos:start="299:18" pos:end="299:18">*</modifier><modifier pos:start="299:19" pos:end="299:19">*</modifier></type><name pos:start="299:20" pos:end="299:28">intervals</name> <init pos:start="299:30" pos:end="299:66">= <expr pos:start="299:32" pos:end="299:66"><call pos:start="299:32" pos:end="299:66"><name pos:start="299:32" pos:end="299:41">g_strsplit</name><argument_list pos:start="299:42" pos:end="299:66">(<argument pos:start="299:43" pos:end="299:57"><expr pos:start="299:43" pos:end="299:57"><name pos:start="299:43" pos:end="299:57">stats_intervals</name></expr></argument>, <argument pos:start="299:60" pos:end="299:62"><expr pos:start="299:60" pos:end="299:62"><literal type="string" pos:start="299:60" pos:end="299:62">":"</literal></expr></argument>, <argument pos:start="299:65" pos:end="299:65"><expr pos:start="299:65" pos:end="299:65"><literal type="number" pos:start="299:65" pos:end="299:65">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="301:13" pos:end="301:23"><decl pos:start="301:13" pos:end="301:22"><type pos:start="301:13" pos:end="301:20"><name pos:start="301:13" pos:end="301:20">unsigned</name></type> <name pos:start="301:22" pos:end="301:22">i</name></decl>;</decl_stmt>



            <if_stmt pos:start="305:13" pos:end="309:13"><if pos:start="305:13" pos:end="309:13">if <condition pos:start="305:16" pos:end="305:41">(<expr pos:start="305:17" pos:end="305:40"><operator pos:start="305:17" pos:end="305:17">*</operator><name pos:start="305:18" pos:end="305:32">stats_intervals</name> <operator pos:start="305:34" pos:end="305:35">==</operator> <literal type="char" pos:start="305:37" pos:end="305:40">'\0'</literal></expr>)</condition> <block pos:start="305:43" pos:end="309:13">{<block_content pos:start="307:17" pos:end="307:80">

                <expr_stmt pos:start="307:17" pos:end="307:80"><expr pos:start="307:17" pos:end="307:79"><call pos:start="307:17" pos:end="307:79"><name pos:start="307:17" pos:end="307:26">error_setg</name><argument_list pos:start="307:27" pos:end="307:79">(<argument pos:start="307:28" pos:end="307:33"><expr pos:start="307:28" pos:end="307:33"><operator pos:start="307:28" pos:end="307:28">&amp;</operator><name pos:start="307:29" pos:end="307:33">error</name></expr></argument>, <argument pos:start="307:36" pos:end="307:78"><expr pos:start="307:36" pos:end="307:78"><literal type="string" pos:start="307:36" pos:end="307:78">"stats-intervals can't have an empty value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <for pos:start="313:13" pos:end="331:13">for <control pos:start="313:17" pos:end="313:60">(<init pos:start="313:18" pos:end="313:23"><expr pos:start="313:18" pos:end="313:22"><name pos:start="313:18" pos:end="313:18">i</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <literal type="number" pos:start="313:22" pos:end="313:22">0</literal></expr>;</init> <condition pos:start="313:25" pos:end="313:55"><expr pos:start="313:25" pos:end="313:54"><operator pos:start="313:25" pos:end="313:25">!</operator><name pos:start="313:26" pos:end="313:30">error</name> <operator pos:start="313:32" pos:end="313:33">&amp;&amp;</operator> <name pos:start="313:35" pos:end="313:46"><name pos:start="313:35" pos:end="313:43">intervals</name><index pos:start="313:44" pos:end="313:46">[<expr pos:start="313:45" pos:end="313:45"><name pos:start="313:45" pos:end="313:45">i</name></expr>]</index></name> <operator pos:start="313:48" pos:end="313:49">!=</operator> <name pos:start="313:51" pos:end="313:54">NULL</name></expr>;</condition> <incr pos:start="313:57" pos:end="313:59"><expr pos:start="313:57" pos:end="313:59"><name pos:start="313:57" pos:end="313:57">i</name><operator pos:start="313:58" pos:end="313:59">++</operator></expr></incr>)</control> <block pos:start="313:62" pos:end="331:13">{<block_content pos:start="315:17" pos:end="329:17">

                <decl_stmt pos:start="315:17" pos:end="315:39"><decl pos:start="315:17" pos:end="315:38"><type pos:start="315:17" pos:end="315:34"><name pos:start="315:17" pos:end="315:24">unsigned</name> <name pos:start="315:26" pos:end="315:29">long</name> <name pos:start="315:31" pos:end="315:34">long</name></type> <name pos:start="315:36" pos:end="315:38">val</name></decl>;</decl_stmt>

                <if_stmt pos:start="317:17" pos:end="329:17"><if pos:start="317:17" pos:end="323:17">if <condition pos:start="317:20" pos:end="319:47">(<expr pos:start="317:21" pos:end="319:46"><call pos:start="317:21" pos:end="317:59"><name pos:start="317:21" pos:end="317:35">parse_uint_full</name><argument_list pos:start="317:36" pos:end="317:59">(<argument pos:start="317:37" pos:end="317:48"><expr pos:start="317:37" pos:end="317:48"><name pos:start="317:37" pos:end="317:48"><name pos:start="317:37" pos:end="317:45">intervals</name><index pos:start="317:46" pos:end="317:48">[<expr pos:start="317:47" pos:end="317:47"><name pos:start="317:47" pos:end="317:47">i</name></expr>]</index></name></expr></argument>, <argument pos:start="317:51" pos:end="317:54"><expr pos:start="317:51" pos:end="317:54"><operator pos:start="317:51" pos:end="317:51">&amp;</operator><name pos:start="317:52" pos:end="317:54">val</name></expr></argument>, <argument pos:start="317:57" pos:end="317:58"><expr pos:start="317:57" pos:end="317:58"><literal type="number" pos:start="317:57" pos:end="317:58">10</literal></expr></argument>)</argument_list></call> <operator pos:start="317:61" pos:end="317:62">==</operator> <literal type="number" pos:start="317:64" pos:end="317:64">0</literal> <operator pos:start="317:66" pos:end="317:67">&amp;&amp;</operator>

                    <name pos:start="319:21" pos:end="319:23">val</name> <operator pos:start="319:25" pos:end="319:25">&gt;</operator> <literal type="number" pos:start="319:27" pos:end="319:27">0</literal> <operator pos:start="319:29" pos:end="319:30">&amp;&amp;</operator> <name pos:start="319:32" pos:end="319:34">val</name> <operator pos:start="319:36" pos:end="319:37">&lt;=</operator> <name pos:start="319:39" pos:end="319:46">UINT_MAX</name></expr>)</condition> <block pos:start="319:49" pos:end="323:17">{<block_content pos:start="321:21" pos:end="321:69">

                    <expr_stmt pos:start="321:21" pos:end="321:69"><expr pos:start="321:21" pos:end="321:68"><call pos:start="321:21" pos:end="321:68"><name pos:start="321:21" pos:end="321:43">block_acct_add_interval</name><argument_list pos:start="321:44" pos:end="321:68">(<argument pos:start="321:45" pos:end="321:62"><expr pos:start="321:45" pos:end="321:62"><call pos:start="321:45" pos:end="321:62"><name pos:start="321:45" pos:end="321:57">blk_get_stats</name><argument_list pos:start="321:58" pos:end="321:62">(<argument pos:start="321:59" pos:end="321:61"><expr pos:start="321:59" pos:end="321:61"><name pos:start="321:59" pos:end="321:61">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="321:65" pos:end="321:67"><expr pos:start="321:65" pos:end="321:67"><name pos:start="321:65" pos:end="321:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="323:19" pos:end="329:17">else <block pos:start="323:24" pos:end="329:17">{<block_content pos:start="325:21" pos:end="327:45">

                    <expr_stmt pos:start="325:21" pos:end="327:45"><expr pos:start="325:21" pos:end="327:44"><call pos:start="325:21" pos:end="327:44"><name pos:start="325:21" pos:end="325:30">error_setg</name><argument_list pos:start="325:31" pos:end="327:44">(<argument pos:start="325:32" pos:end="325:37"><expr pos:start="325:32" pos:end="325:37"><operator pos:start="325:32" pos:end="325:32">&amp;</operator><name pos:start="325:33" pos:end="325:37">error</name></expr></argument>, <argument pos:start="325:40" pos:end="325:70"><expr pos:start="325:40" pos:end="325:70"><literal type="string" pos:start="325:40" pos:end="325:70">"Invalid interval length: '%s'"</literal></expr></argument>,

                               <argument pos:start="327:32" pos:end="327:43"><expr pos:start="327:32" pos:end="327:43"><name pos:start="327:32" pos:end="327:43"><name pos:start="327:32" pos:end="327:40">intervals</name><index pos:start="327:41" pos:end="327:43">[<expr pos:start="327:42" pos:end="327:42"><name pos:start="327:42" pos:end="327:42">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="335:13" pos:end="335:34"><expr pos:start="335:13" pos:end="335:33"><call pos:start="335:13" pos:end="335:33"><name pos:start="335:13" pos:end="335:22">g_strfreev</name><argument_list pos:start="335:23" pos:end="335:33">(<argument pos:start="335:24" pos:end="335:32"><expr pos:start="335:24" pos:end="335:32"><name pos:start="335:24" pos:end="335:32">intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="339:13" pos:end="349:13"><if pos:start="339:13" pos:end="349:13">if <condition pos:start="339:16" pos:end="339:22">(<expr pos:start="339:17" pos:end="339:21"><name pos:start="339:17" pos:end="339:21">error</name></expr>)</condition> <block pos:start="339:24" pos:end="349:13">{<block_content pos:start="341:17" pos:end="347:36">

                <expr_stmt pos:start="341:17" pos:end="341:45"><expr pos:start="341:17" pos:end="341:44"><call pos:start="341:17" pos:end="341:44"><name pos:start="341:17" pos:end="341:31">error_propagate</name><argument_list pos:start="341:32" pos:end="341:44">(<argument pos:start="341:33" pos:end="341:36"><expr pos:start="341:33" pos:end="341:36"><name pos:start="341:33" pos:end="341:36">errp</name></expr></argument>, <argument pos:start="341:39" pos:end="341:43"><expr pos:start="341:39" pos:end="341:43"><name pos:start="341:39" pos:end="341:43">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:31"><expr pos:start="343:17" pos:end="343:30"><call pos:start="343:17" pos:end="343:30"><name pos:start="343:17" pos:end="343:25">blk_unref</name><argument_list pos:start="343:26" pos:end="343:30">(<argument pos:start="343:27" pos:end="343:29"><expr pos:start="343:27" pos:end="343:29"><name pos:start="343:27" pos:end="343:29">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:27"><expr pos:start="345:17" pos:end="345:26"><name pos:start="345:17" pos:end="345:19">blk</name> <operator pos:start="345:21" pos:end="345:21">=</operator> <name pos:start="345:23" pos:end="345:26">NULL</name></expr>;</expr_stmt>

                <goto pos:start="347:17" pos:end="347:36">goto <name pos:start="347:22" pos:end="347:35">err_no_bs_opts</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="357:5" pos:end="357:57"><expr pos:start="357:5" pos:end="357:56"><call pos:start="357:5" pos:end="357:56"><name pos:start="357:5" pos:end="357:20">blk_set_on_error</name><argument_list pos:start="357:21" pos:end="357:56">(<argument pos:start="357:22" pos:end="357:24"><expr pos:start="357:22" pos:end="357:24"><name pos:start="357:22" pos:end="357:24">blk</name></expr></argument>, <argument pos:start="357:27" pos:end="357:39"><expr pos:start="357:27" pos:end="357:39"><name pos:start="357:27" pos:end="357:39">on_read_error</name></expr></argument>, <argument pos:start="357:42" pos:end="357:55"><expr pos:start="357:42" pos:end="357:55"><name pos:start="357:42" pos:end="357:55">on_write_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="361:1" pos:end="361:15"><name pos:start="361:1" pos:end="361:14">err_no_bs_opts</name>:</label>

    <expr_stmt pos:start="363:5" pos:end="363:24"><expr pos:start="363:5" pos:end="363:23"><call pos:start="363:5" pos:end="363:23"><name pos:start="363:5" pos:end="363:17">qemu_opts_del</name><argument_list pos:start="363:18" pos:end="363:23">(<argument pos:start="363:19" pos:end="363:22"><expr pos:start="363:19" pos:end="363:22"><name pos:start="363:19" pos:end="363:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="365:5" pos:end="365:15">return <expr pos:start="365:12" pos:end="365:14"><name pos:start="365:12" pos:end="365:14">blk</name></expr>;</return>



<label pos:start="369:1" pos:end="369:10"><name pos:start="369:1" pos:end="369:9">early_err</name>:</label>

    <expr_stmt pos:start="371:5" pos:end="371:24"><expr pos:start="371:5" pos:end="371:23"><call pos:start="371:5" pos:end="371:23"><name pos:start="371:5" pos:end="371:17">qemu_opts_del</name><argument_list pos:start="371:18" pos:end="371:23">(<argument pos:start="371:19" pos:end="371:22"><expr pos:start="371:19" pos:end="371:22"><name pos:start="371:19" pos:end="371:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="373:1" pos:end="373:12"><name pos:start="373:1" pos:end="373:11">err_no_opts</name>:</label>

    <expr_stmt pos:start="375:5" pos:end="375:21"><expr pos:start="375:5" pos:end="375:20"><call pos:start="375:5" pos:end="375:20"><name pos:start="375:5" pos:end="375:11">QDECREF</name><argument_list pos:start="375:12" pos:end="375:20">(<argument pos:start="375:13" pos:end="375:19"><expr pos:start="375:13" pos:end="375:19"><name pos:start="375:13" pos:end="375:19">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="377:5" pos:end="377:16">return <expr pos:start="377:12" pos:end="377:15"><name pos:start="377:12" pos:end="377:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
