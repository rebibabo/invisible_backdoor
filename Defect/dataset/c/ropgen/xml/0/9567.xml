<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9567.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">aio_write_f</name><parameter_list pos:start="1:23" pos:end="1:45">(<parameter pos:start="1:24" pos:end="1:31"><decl pos:start="1:24" pos:end="1:31"><type pos:start="1:24" pos:end="1:31"><name pos:start="1:24" pos:end="1:26">int</name></type> <name pos:start="1:28" pos:end="1:31">argc</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier><modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:44">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">nr_iov</name></decl>, <decl pos:start="5:17" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:17">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">pattern</name> <init pos:start="7:17" pos:end="7:22">= <expr pos:start="7:19" pos:end="7:22"><literal type="number" pos:start="7:19" pos:end="7:22">0xcd</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:60"><decl pos:start="9:5" pos:end="9:59"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:18">aio_ctx</name></name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">ctx</name> <init pos:start="9:25" pos:end="9:59">= <expr pos:start="9:27" pos:end="9:59"><call pos:start="9:27" pos:end="9:59"><name pos:start="9:27" pos:end="9:32">calloc</name><argument_list pos:start="9:33" pos:end="9:59">(<argument pos:start="9:34" pos:end="9:34"><expr pos:start="9:34" pos:end="9:34"><literal type="number" pos:start="9:34" pos:end="9:34">1</literal></expr></argument>, <argument pos:start="9:37" pos:end="9:58"><expr pos:start="9:37" pos:end="9:58"><sizeof pos:start="9:37" pos:end="9:58">sizeof<argument_list pos:start="9:43" pos:end="9:58">(<argument pos:start="9:44" pos:end="9:57"><expr pos:start="9:44" pos:end="9:57">struct <name pos:start="9:51" pos:end="9:57">aio_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="51:5">while <condition pos:start="13:11" pos:end="13:51">(<expr pos:start="13:12" pos:end="13:50"><operator pos:start="13:12" pos:end="13:12">(</operator><name pos:start="13:13" pos:end="13:13">c</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <call pos:start="13:17" pos:end="13:42"><name pos:start="13:17" pos:end="13:22">getopt</name><argument_list pos:start="13:23" pos:end="13:42">(<argument pos:start="13:24" pos:end="13:27"><expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">argc</name></expr></argument>, <argument pos:start="13:30" pos:end="13:33"><expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">argv</name></expr></argument>, <argument pos:start="13:36" pos:end="13:41"><expr pos:start="13:36" pos:end="13:41"><literal type="string" pos:start="13:36" pos:end="13:41">"CqP:"</literal></expr></argument>)</argument_list></call><operator pos:start="13:43" pos:end="13:43">)</operator> <operator pos:start="13:45" pos:end="13:46">!=</operator> <name pos:start="13:48" pos:end="13:50">EOF</name></expr>)</condition> <block pos:start="13:53" pos:end="51:5">{<block_content pos:start="15:9" pos:end="49:9">

        <switch pos:start="15:9" pos:end="49:9">switch <condition pos:start="15:16" pos:end="15:18">(<expr pos:start="15:17" pos:end="15:17"><name pos:start="15:17" pos:end="15:17">c</name></expr>)</condition> <block pos:start="15:20" pos:end="49:9">{<block_content pos:start="17:9" pos:end="47:49">

        <case pos:start="17:9" pos:end="17:17">case <expr pos:start="17:14" pos:end="17:16"><literal type="char" pos:start="17:14" pos:end="17:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="19:13" pos:end="19:27"><expr pos:start="19:13" pos:end="19:26"><name pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:15">ctx</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:22">Cflag</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <literal type="number" pos:start="19:26" pos:end="19:26">1</literal></expr>;</expr_stmt>

            <break pos:start="21:13" pos:end="21:18">break;</break>

        <case pos:start="23:9" pos:end="23:17">case <expr pos:start="23:14" pos:end="23:16"><literal type="char" pos:start="23:14" pos:end="23:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="25:13" pos:end="25:27"><expr pos:start="25:13" pos:end="25:26"><name pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:15">ctx</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:22">qflag</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">1</literal></expr>;</expr_stmt>

            <break pos:start="27:13" pos:end="27:18">break;</break>

        <case pos:start="29:9" pos:end="29:17">case <expr pos:start="29:14" pos:end="29:16"><literal type="char" pos:start="29:14" pos:end="29:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="31:13" pos:end="31:44"><expr pos:start="31:13" pos:end="31:43"><name pos:start="31:13" pos:end="31:19">pattern</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:43"><name pos:start="31:23" pos:end="31:35">parse_pattern</name><argument_list pos:start="31:36" pos:end="31:43">(<argument pos:start="31:37" pos:end="31:42"><expr pos:start="31:37" pos:end="31:42"><name pos:start="31:37" pos:end="31:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="39:13"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:28">(<expr pos:start="33:17" pos:end="33:27"><name pos:start="33:17" pos:end="33:23">pattern</name> <operator pos:start="33:25" pos:end="33:25">&lt;</operator> <literal type="number" pos:start="33:27" pos:end="33:27">0</literal></expr>)</condition> <block pos:start="33:30" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:25">

                <expr_stmt pos:start="35:17" pos:end="35:26"><expr pos:start="35:17" pos:end="35:25"><call pos:start="35:17" pos:end="35:25"><name pos:start="35:17" pos:end="35:20">free</name><argument_list pos:start="35:21" pos:end="35:25">(<argument pos:start="35:22" pos:end="35:24"><expr pos:start="35:22" pos:end="35:24"><name pos:start="35:22" pos:end="35:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="37:17" pos:end="37:25">return <expr pos:start="37:24" pos:end="37:24"><literal type="number" pos:start="37:24" pos:end="37:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <default pos:start="43:9" pos:end="43:16">default:</default>

            <expr_stmt pos:start="45:13" pos:end="45:22"><expr pos:start="45:13" pos:end="45:21"><call pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:16">free</name><argument_list pos:start="45:17" pos:end="45:21">(<argument pos:start="45:18" pos:end="45:20"><expr pos:start="45:18" pos:end="45:20"><name pos:start="45:18" pos:end="45:20">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:49">return <expr pos:start="47:20" pos:end="47:48"><call pos:start="47:20" pos:end="47:48"><name pos:start="47:20" pos:end="47:32">command_usage</name><argument_list pos:start="47:33" pos:end="47:48">(<argument pos:start="47:34" pos:end="47:47"><expr pos:start="47:34" pos:end="47:47"><operator pos:start="47:34" pos:end="47:34">&amp;</operator><name pos:start="47:35" pos:end="47:47">aio_write_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:26">(<expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:14">optind</name> <operator pos:start="55:16" pos:end="55:16">&gt;</operator> <name pos:start="55:18" pos:end="55:21">argc</name> <operator pos:start="55:23" pos:end="55:23">-</operator> <literal type="number" pos:start="55:25" pos:end="55:25">2</literal></expr>)</condition> <block pos:start="55:28" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:45">

        <expr_stmt pos:start="57:9" pos:end="57:18"><expr pos:start="57:9" pos:end="57:17"><call pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:12">free</name><argument_list pos:start="57:13" pos:end="57:17">(<argument pos:start="57:14" pos:end="57:16"><expr pos:start="57:14" pos:end="57:16"><name pos:start="57:14" pos:end="57:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:45">return <expr pos:start="59:16" pos:end="59:44"><call pos:start="59:16" pos:end="59:44"><name pos:start="59:16" pos:end="59:28">command_usage</name><argument_list pos:start="59:29" pos:end="59:44">(<argument pos:start="59:30" pos:end="59:43"><expr pos:start="59:30" pos:end="59:43"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:43">aio_write_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:39"><expr pos:start="65:5" pos:end="65:38"><name pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:7">ctx</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:15">offset</name></name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:38"><name pos:start="65:19" pos:end="65:24">cvtnum</name><argument_list pos:start="65:25" pos:end="65:38">(<argument pos:start="65:26" pos:end="65:37"><expr pos:start="65:26" pos:end="65:37"><name pos:start="65:26" pos:end="65:37"><name pos:start="65:26" pos:end="65:29">argv</name><index pos:start="65:30" pos:end="65:37">[<expr pos:start="65:31" pos:end="65:36"><name pos:start="65:31" pos:end="65:36">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:24">(<expr pos:start="67:9" pos:end="67:23"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:11">ctx</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:19">offset</name></name> <operator pos:start="67:21" pos:end="67:21">&lt;</operator> <literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr>)</condition> <block pos:start="67:26" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:17">

        <expr_stmt pos:start="69:9" pos:end="69:68"><expr pos:start="69:9" pos:end="69:67"><call pos:start="69:9" pos:end="69:67"><name pos:start="69:9" pos:end="69:14">printf</name><argument_list pos:start="69:15" pos:end="69:67">(<argument pos:start="69:16" pos:end="69:52"><expr pos:start="69:16" pos:end="69:52"><literal type="string" pos:start="69:16" pos:end="69:52">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="69:55" pos:end="69:66"><expr pos:start="69:55" pos:end="69:66"><name pos:start="69:55" pos:end="69:66"><name pos:start="69:55" pos:end="69:58">argv</name><index pos:start="69:59" pos:end="69:66">[<expr pos:start="69:60" pos:end="69:65"><name pos:start="69:60" pos:end="69:65">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:18"><expr pos:start="71:9" pos:end="71:17"><call pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:12">free</name><argument_list pos:start="71:13" pos:end="71:17">(<argument pos:start="71:14" pos:end="71:16"><expr pos:start="71:14" pos:end="71:16"><name pos:start="71:14" pos:end="71:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:13"><expr pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:10">optind</name><operator pos:start="77:11" pos:end="77:12">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="91:5"><if pos:start="81:5" pos:end="91:5">if <condition pos:start="81:8" pos:end="81:28">(<expr pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:11">ctx</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:19">offset</name></name> <operator pos:start="81:21" pos:end="81:21">&amp;</operator> <literal type="number" pos:start="81:23" pos:end="81:27">0x1ff</literal></expr>)</condition> <block pos:start="81:30" pos:end="91:5">{<block_content pos:start="83:9" pos:end="89:17">

        <expr_stmt pos:start="83:9" pos:end="85:28"><expr pos:start="83:9" pos:end="85:27"><call pos:start="83:9" pos:end="85:27"><name pos:start="83:9" pos:end="83:14">printf</name><argument_list pos:start="83:15" pos:end="85:27">(<argument pos:start="83:16" pos:end="83:59"><expr pos:start="83:16" pos:end="83:59"><literal type="string" pos:start="83:16" pos:end="83:25">"offset %"</literal> <name pos:start="83:27" pos:end="83:32">PRId64</name> <literal type="string" pos:start="83:34" pos:end="83:59">" is not sector aligned\n"</literal></expr></argument>,

               <argument pos:start="85:16" pos:end="85:26"><expr pos:start="85:16" pos:end="85:26"><name pos:start="85:16" pos:end="85:26"><name pos:start="85:16" pos:end="85:18">ctx</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:26">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:18"><expr pos:start="87:9" pos:end="87:17"><call pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:12">free</name><argument_list pos:start="87:13" pos:end="87:17">(<argument pos:start="87:14" pos:end="87:16"><expr pos:start="87:14" pos:end="87:16"><name pos:start="87:14" pos:end="87:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:17">return <expr pos:start="89:16" pos:end="89:16"><literal type="number" pos:start="89:16" pos:end="89:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:10">nr_iov</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <name pos:start="95:14" pos:end="95:17">argc</name> <operator pos:start="95:19" pos:end="95:19">-</operator> <name pos:start="95:21" pos:end="95:26">optind</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:72"><expr pos:start="97:5" pos:end="97:71"><name pos:start="97:5" pos:end="97:12"><name pos:start="97:5" pos:end="97:7">ctx</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:12">buf</name></name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:71"><name pos:start="97:16" pos:end="97:27">create_iovec</name><argument_list pos:start="97:28" pos:end="97:71">(<argument pos:start="97:29" pos:end="97:38"><expr pos:start="97:29" pos:end="97:38"><operator pos:start="97:29" pos:end="97:29">&amp;</operator><name pos:start="97:30" pos:end="97:38"><name pos:start="97:30" pos:end="97:32">ctx</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:38">qiov</name></name></expr></argument>, <argument pos:start="97:41" pos:end="97:53"><expr pos:start="97:41" pos:end="97:53"><operator pos:start="97:41" pos:end="97:41">&amp;</operator><name pos:start="97:42" pos:end="97:53"><name pos:start="97:42" pos:end="97:45">argv</name><index pos:start="97:46" pos:end="97:53">[<expr pos:start="97:47" pos:end="97:52"><name pos:start="97:47" pos:end="97:52">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="97:56" pos:end="97:61"><expr pos:start="97:56" pos:end="97:61"><name pos:start="97:56" pos:end="97:61">nr_iov</name></expr></argument>, <argument pos:start="97:64" pos:end="97:70"><expr pos:start="97:64" pos:end="97:70"><name pos:start="97:64" pos:end="97:70">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:25">(<expr pos:start="99:9" pos:end="99:24"><name pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:11">ctx</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:16">buf</name></name> <operator pos:start="99:18" pos:end="99:19">==</operator> <name pos:start="99:21" pos:end="99:24">NULL</name></expr>)</condition> <block pos:start="99:27" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:17">

        <expr_stmt pos:start="101:9" pos:end="101:18"><expr pos:start="101:9" pos:end="101:17"><call pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:12">free</name><argument_list pos:start="101:13" pos:end="101:17">(<argument pos:start="101:14" pos:end="101:16"><expr pos:start="101:14" pos:end="101:16"><name pos:start="101:14" pos:end="101:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:17">return <expr pos:start="103:16" pos:end="103:16"><literal type="number" pos:start="103:16" pos:end="103:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:33"><expr pos:start="109:5" pos:end="109:32"><call pos:start="109:5" pos:end="109:32"><name pos:start="109:5" pos:end="109:16">gettimeofday</name><argument_list pos:start="109:17" pos:end="109:32">(<argument pos:start="109:18" pos:end="109:25"><expr pos:start="109:18" pos:end="109:25"><operator pos:start="109:18" pos:end="109:18">&amp;</operator><name pos:start="109:19" pos:end="109:25"><name pos:start="109:19" pos:end="109:21">ctx</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:25">t1</name></name></expr></argument>, <argument pos:start="109:28" pos:end="109:31"><expr pos:start="109:28" pos:end="109:31"><name pos:start="109:28" pos:end="109:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="113:62"><expr pos:start="111:5" pos:end="113:61"><call pos:start="111:5" pos:end="113:61"><name pos:start="111:5" pos:end="111:19">bdrv_aio_writev</name><argument_list pos:start="111:20" pos:end="113:61">(<argument pos:start="111:21" pos:end="111:22"><expr pos:start="111:21" pos:end="111:22"><name pos:start="111:21" pos:end="111:22">bs</name></expr></argument>, <argument pos:start="111:25" pos:end="111:40"><expr pos:start="111:25" pos:end="111:40"><name pos:start="111:25" pos:end="111:35"><name pos:start="111:25" pos:end="111:27">ctx</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:35">offset</name></name> <operator pos:start="111:37" pos:end="111:38">&gt;&gt;</operator> <literal type="number" pos:start="111:40" pos:end="111:40">9</literal></expr></argument>, <argument pos:start="111:43" pos:end="111:52"><expr pos:start="111:43" pos:end="111:52"><operator pos:start="111:43" pos:end="111:43">&amp;</operator><name pos:start="111:44" pos:end="111:52"><name pos:start="111:44" pos:end="111:46">ctx</name><operator pos:start="111:47" pos:end="111:48">-&gt;</operator><name pos:start="111:49" pos:end="111:52">qiov</name></name></expr></argument>,

                    <argument pos:start="113:21" pos:end="113:39"><expr pos:start="113:21" pos:end="113:39"><name pos:start="113:21" pos:end="113:34"><name pos:start="113:21" pos:end="113:23">ctx</name><operator pos:start="113:24" pos:end="113:25">-&gt;</operator><name pos:start="113:26" pos:end="113:29">qiov</name><operator pos:start="113:30" pos:end="113:30">.</operator><name pos:start="113:31" pos:end="113:34">size</name></name> <operator pos:start="113:36" pos:end="113:37">&gt;&gt;</operator> <literal type="number" pos:start="113:39" pos:end="113:39">9</literal></expr></argument>, <argument pos:start="113:42" pos:end="113:55"><expr pos:start="113:42" pos:end="113:55"><name pos:start="113:42" pos:end="113:55">aio_write_done</name></expr></argument>, <argument pos:start="113:58" pos:end="113:60"><expr pos:start="113:58" pos:end="113:60"><name pos:start="113:58" pos:end="113:60">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
