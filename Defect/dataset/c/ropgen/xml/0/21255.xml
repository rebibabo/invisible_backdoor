<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21255.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">udp_close</name><parameter_list pos:start="1:21" pos:end="1:35">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:31">URLContext</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">UDPContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">h</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:79"><if pos:start="11:5" pos:end="13:79">if <condition pos:start="11:8" pos:end="11:55">(<expr pos:start="11:9" pos:end="11:54"><name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:23">is_multicast</name></name> <operator pos:start="11:25" pos:end="11:26">&amp;&amp;</operator> <operator pos:start="11:28" pos:end="11:28">(</operator><name pos:start="11:29" pos:end="11:36"><name pos:start="11:29" pos:end="11:29">h</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:36">flags</name></name> <operator pos:start="11:38" pos:end="11:38">&amp;</operator> <name pos:start="11:40" pos:end="11:53">AVIO_FLAG_READ</name><operator pos:start="11:54" pos:end="11:54">)</operator></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:79"><block_content pos:start="13:9" pos:end="13:79">

        <expr_stmt pos:start="13:9" pos:end="13:79"><expr pos:start="13:9" pos:end="13:78"><call pos:start="13:9" pos:end="13:78"><name pos:start="13:9" pos:end="13:33">udp_leave_multicast_group</name><argument_list pos:start="13:34" pos:end="13:78">(<argument pos:start="13:35" pos:end="13:43"><expr pos:start="13:35" pos:end="13:43"><name pos:start="13:35" pos:end="13:43"><name pos:start="13:35" pos:end="13:35">s</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:43">udp_fd</name></name></expr></argument>, <argument pos:start="13:46" pos:end="13:77"><expr pos:start="13:46" pos:end="13:77"><operator pos:start="13:46" pos:end="13:46">(</operator>struct <name pos:start="13:54" pos:end="13:61">sockaddr</name> <operator pos:start="13:63" pos:end="13:63">*</operator><operator pos:start="13:64" pos:end="13:64">)</operator><operator pos:start="13:65" pos:end="13:65">&amp;</operator><name pos:start="13:66" pos:end="13:77"><name pos:start="13:66" pos:end="13:66">s</name><operator pos:start="13:67" pos:end="13:68">-&gt;</operator><name pos:start="13:69" pos:end="13:77">dest_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><call pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:15">closesocket</name><argument_list pos:start="15:16" pos:end="15:26">(<argument pos:start="15:17" pos:end="15:25"><expr pos:start="15:17" pos:end="15:25"><name pos:start="15:17" pos:end="15:25"><name pos:start="15:17" pos:end="15:17">s</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:25">udp_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:16">av_fifo_free</name><argument_list pos:start="17:17" pos:end="17:25">(<argument pos:start="17:18" pos:end="17:24"><expr pos:start="17:18" pos:end="17:24"><name pos:start="17:18" pos:end="17:24"><name pos:start="17:18" pos:end="17:18">s</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:24">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="19:1" pos:end="19:17">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17">HAVE_PTHREADS</name></expr></cpp:if>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:26">(<expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:25">thread_started</name></name></expr>)</condition> <block pos:start="21:28" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:75">

        <expr_stmt pos:start="23:9" pos:end="23:50"><expr pos:start="23:9" pos:end="23:49"><call pos:start="23:9" pos:end="23:49"><name pos:start="23:9" pos:end="23:22">pthread_cancel</name><argument_list pos:start="23:23" pos:end="23:49">(<argument pos:start="23:24" pos:end="23:48"><expr pos:start="23:24" pos:end="23:48"><name pos:start="23:24" pos:end="23:48"><name pos:start="23:24" pos:end="23:24">s</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:48">circular_buffer_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:60"><expr pos:start="25:9" pos:end="25:59"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:59"><name pos:start="25:15" pos:end="25:26">pthread_join</name><argument_list pos:start="25:27" pos:end="25:59">(<argument pos:start="25:28" pos:end="25:52"><expr pos:start="25:28" pos:end="25:52"><name pos:start="25:28" pos:end="25:52"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:52">circular_buffer_thread</name></name></expr></argument>, <argument pos:start="25:55" pos:end="25:58"><expr pos:start="25:55" pos:end="25:58"><name pos:start="25:55" pos:end="25:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="29:75"><if pos:start="27:9" pos:end="29:75">if <condition pos:start="27:12" pos:end="27:21">(<expr pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:15">ret</name> <operator pos:start="27:17" pos:end="27:18">!=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:75"><block_content pos:start="29:13" pos:end="29:75">

            <expr_stmt pos:start="29:13" pos:end="29:75"><expr pos:start="29:13" pos:end="29:74"><call pos:start="29:13" pos:end="29:74"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="29:74">(<argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><name pos:start="29:20" pos:end="29:20">h</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:58"><expr pos:start="29:37" pos:end="29:58"><literal type="string" pos:start="29:37" pos:end="29:58">"pthread_join(): %s\n"</literal></expr></argument>, <argument pos:start="29:61" pos:end="29:73"><expr pos:start="29:61" pos:end="29:73"><call pos:start="29:61" pos:end="29:73"><name pos:start="29:61" pos:end="29:68">strerror</name><argument_list pos:start="29:69" pos:end="29:73">(<argument pos:start="29:70" pos:end="29:72"><expr pos:start="29:70" pos:end="29:72"><name pos:start="29:70" pos:end="29:72">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><call pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:25">pthread_mutex_destroy</name><argument_list pos:start="35:26" pos:end="35:36">(<argument pos:start="35:27" pos:end="35:35"><expr pos:start="35:27" pos:end="35:35"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:35"><name pos:start="35:28" pos:end="35:28">s</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:35">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="40:0"><expr pos:start="37:5" pos:end="37:34"><call pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:24">pthread_cond_destroy</name><argument_list pos:start="37:25" pos:end="37:34">(<argument pos:start="37:26" pos:end="37:33"><expr pos:start="37:26" pos:end="37:33"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:33"><name pos:start="37:27" pos:end="37:27">s</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:33">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

    <return pos:start="41:5" pos:end="41:13">return <expr pos:start="41:12" pos:end="41:12"><literal type="number" pos:start="41:12" pos:end="41:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
