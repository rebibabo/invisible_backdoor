<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27094.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_brcond2</name><parameter_list pos:start="1:28" pos:end="3:66">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">TCGContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:50">TCGCond</name></type> <name pos:start="1:52" pos:end="1:55">cond</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:66"><decl pos:start="1:58" pos:end="1:66"><type pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:63">TCGReg</name></type> <name pos:start="1:65" pos:end="1:66">al</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:77"><decl pos:start="1:69" pos:end="1:77"><type pos:start="1:69" pos:end="1:77"><name pos:start="1:69" pos:end="1:74">TCGReg</name></type> <name pos:start="1:76" pos:end="1:77">ah</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:37"><decl pos:start="3:29" pos:end="3:37"><type pos:start="3:29" pos:end="3:37"><name pos:start="3:29" pos:end="3:34">TCGReg</name></type> <name pos:start="3:36" pos:end="3:37">bl</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:48"><decl pos:start="3:40" pos:end="3:48"><type pos:start="3:40" pos:end="3:48"><name pos:start="3:40" pos:end="3:45">TCGReg</name></type> <name pos:start="3:47" pos:end="3:48">bh</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:65">label_index</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:62">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">TCGCond</name></type> <name pos:start="7:13" pos:end="7:18">b_cond</name> <init pos:start="7:20" pos:end="7:32">= <expr pos:start="7:22" pos:end="7:32"><name pos:start="7:22" pos:end="7:32">TCG_COND_NE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">TCGReg</name></type> <name pos:start="9:12" pos:end="9:14">tmp</name> <init pos:start="9:16" pos:end="9:25">= <expr pos:start="9:18" pos:end="9:25"><name pos:start="9:18" pos:end="9:25">TCG_TMP1</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:55">/* With branches, we emit between 4 and 9 insns with 2 or 3 branches.

       With setcond, we emit between 3 and 10 insns and only 1 branch,

       which ought to get better branch prediction.  */</comment>

     <switch pos:start="19:6" pos:end="49:5">switch <condition pos:start="19:13" pos:end="19:18">(<expr pos:start="19:14" pos:end="19:17"><name pos:start="19:14" pos:end="19:17">cond</name></expr>)</condition> <block pos:start="19:20" pos:end="49:5">{<block_content pos:start="21:6" pos:end="47:14">

     <case pos:start="21:6" pos:end="21:22">case <expr pos:start="21:11" pos:end="21:21"><name pos:start="21:11" pos:end="21:21">TCG_COND_EQ</name></expr>:</case>

     <case pos:start="23:6" pos:end="23:22">case <expr pos:start="23:11" pos:end="23:21"><name pos:start="23:11" pos:end="23:21">TCG_COND_NE</name></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:22"><expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:14">b_cond</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:21">cond</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:72"><expr pos:start="27:9" pos:end="27:71"><name pos:start="27:9" pos:end="27:11">tmp</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:71"><name pos:start="27:15" pos:end="27:32">tcg_out_reduce_eq2</name><argument_list pos:start="27:33" pos:end="27:71">(<argument pos:start="27:34" pos:end="27:34"><expr pos:start="27:34" pos:end="27:34"><name pos:start="27:34" pos:end="27:34">s</name></expr></argument>, <argument pos:start="27:37" pos:end="27:44"><expr pos:start="27:37" pos:end="27:44"><name pos:start="27:37" pos:end="27:44">TCG_TMP0</name></expr></argument>, <argument pos:start="27:47" pos:end="27:54"><expr pos:start="27:47" pos:end="27:54"><name pos:start="27:47" pos:end="27:54">TCG_TMP1</name></expr></argument>, <argument pos:start="27:57" pos:end="27:58"><expr pos:start="27:57" pos:end="27:58"><name pos:start="27:57" pos:end="27:58">al</name></expr></argument>, <argument pos:start="27:61" pos:end="27:62"><expr pos:start="27:61" pos:end="27:62"><name pos:start="27:61" pos:end="27:62">ah</name></expr></argument>, <argument pos:start="27:65" pos:end="27:66"><expr pos:start="27:65" pos:end="27:66"><name pos:start="27:65" pos:end="27:66">bl</name></expr></argument>, <argument pos:start="27:69" pos:end="27:70"><expr pos:start="27:69" pos:end="27:70"><name pos:start="27:69" pos:end="27:70">bh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>



    <default pos:start="33:5" pos:end="33:12">default:</default>

        <comment type="block" pos:start="35:9" pos:end="35:76">/* Minimize code size by preferring a compare not requiring INV.  */</comment>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:46">(<expr pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:24">mips_cmp_map</name><index pos:start="37:25" pos:end="37:30">[<expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:29">cond</name></expr>]</index></name> <operator pos:start="37:32" pos:end="37:32">&amp;</operator> <name pos:start="37:34" pos:end="37:45">MIPS_CMP_INV</name></expr>)</condition> <block pos:start="37:48" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:33">

            <expr_stmt pos:start="39:13" pos:end="39:41"><expr pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:16">cond</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:40"><name pos:start="39:20" pos:end="39:34">tcg_invert_cond</name><argument_list pos:start="39:35" pos:end="39:40">(<argument pos:start="39:36" pos:end="39:39"><expr pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:39">cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:18">b_cond</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:32">TCG_COND_EQ</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:55"><expr pos:start="45:9" pos:end="45:54"><call pos:start="45:9" pos:end="45:54"><name pos:start="45:9" pos:end="45:24">tcg_out_setcond2</name><argument_list pos:start="45:25" pos:end="45:54">(<argument pos:start="45:26" pos:end="45:26"><expr pos:start="45:26" pos:end="45:26"><name pos:start="45:26" pos:end="45:26">s</name></expr></argument>, <argument pos:start="45:29" pos:end="45:32"><expr pos:start="45:29" pos:end="45:32"><name pos:start="45:29" pos:end="45:32">cond</name></expr></argument>, <argument pos:start="45:35" pos:end="45:37"><expr pos:start="45:35" pos:end="45:37"><name pos:start="45:35" pos:end="45:37">tmp</name></expr></argument>, <argument pos:start="45:40" pos:end="45:41"><expr pos:start="45:40" pos:end="45:41"><name pos:start="45:40" pos:end="45:41">al</name></expr></argument>, <argument pos:start="45:44" pos:end="45:45"><expr pos:start="45:44" pos:end="45:45"><name pos:start="45:44" pos:end="45:45">ah</name></expr></argument>, <argument pos:start="45:48" pos:end="45:49"><expr pos:start="45:48" pos:end="45:49"><name pos:start="45:48" pos:end="45:49">bl</name></expr></argument>, <argument pos:start="45:52" pos:end="45:53"><expr pos:start="45:52" pos:end="45:53"><name pos:start="45:52" pos:end="45:53">bh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="53:5" pos:end="53:62"><expr pos:start="53:5" pos:end="53:61"><call pos:start="53:5" pos:end="53:61"><name pos:start="53:5" pos:end="53:18">tcg_out_brcond</name><argument_list pos:start="53:19" pos:end="53:61">(<argument pos:start="53:20" pos:end="53:20"><expr pos:start="53:20" pos:end="53:20"><name pos:start="53:20" pos:end="53:20">s</name></expr></argument>, <argument pos:start="53:23" pos:end="53:28"><expr pos:start="53:23" pos:end="53:28"><name pos:start="53:23" pos:end="53:28">b_cond</name></expr></argument>, <argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">tmp</name></expr></argument>, <argument pos:start="53:36" pos:end="53:47"><expr pos:start="53:36" pos:end="53:47"><name pos:start="53:36" pos:end="53:47">TCG_REG_ZERO</name></expr></argument>, <argument pos:start="53:50" pos:end="53:60"><expr pos:start="53:50" pos:end="53:60"><name pos:start="53:50" pos:end="53:60">label_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
