<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7335.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:11">CPUPPCState</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:25">cpu_ppc_init</name><parameter_list pos:start="1:26" pos:end="1:31">(<parameter pos:start="1:27" pos:end="1:30"><decl pos:start="1:27" pos:end="1:30"><type pos:start="1:27" pos:end="1:30"><name pos:start="1:27" pos:end="1:30">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:15">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUPPCState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:20"><expr pos:start="9:5" pos:end="9:19"><call pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">cpu_exec_init</name><argument_list pos:start="9:18" pos:end="9:19">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:44"><expr pos:start="13:5" pos:end="13:43"><name pos:start="13:5" pos:end="13:7">env</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:43"><name pos:start="13:11" pos:end="13:22">qemu_mallocz</name><argument_list pos:start="13:23" pos:end="13:43">(<argument pos:start="13:24" pos:end="13:42"><expr pos:start="13:24" pos:end="13:42"><sizeof pos:start="13:24" pos:end="13:42">sizeof<argument_list pos:start="13:30" pos:end="13:42">(<argument pos:start="13:31" pos:end="13:41"><expr pos:start="13:31" pos:end="13:41"><name pos:start="13:31" pos:end="13:41">CPUPPCState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="20:0"><if pos:start="15:5" pos:end="20:0">if <condition pos:start="15:8" pos:end="15:13">(<expr pos:start="15:9" pos:end="15:12"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">env</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="20:0"><block_content pos:start="17:9" pos:end="20:0">

        <return pos:start="17:9" pos:end="20:0">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if pos:start="19:1" pos:end="19:61">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:61"><operator pos:start="19:5" pos:end="19:5">!</operator><call pos:start="19:6" pos:end="19:30"><name pos:start="19:6" pos:end="19:12">defined</name><argument_list pos:start="19:13" pos:end="19:30">(<argument pos:start="19:14" pos:end="19:29"><expr pos:start="19:14" pos:end="19:29"><name pos:start="19:14" pos:end="19:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="19:32" pos:end="19:33">&amp;&amp;</operator> <call pos:start="19:35" pos:end="19:61"><name pos:start="19:35" pos:end="19:41">defined</name> <argument_list pos:start="19:43" pos:end="19:61">(<argument pos:start="19:44" pos:end="19:60"><expr pos:start="19:44" pos:end="19:60"><name pos:start="19:44" pos:end="19:60">USE_OPEN_FIRMWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="21:5" pos:end="24:0"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:17">setup_machine</name><argument_list pos:start="21:18" pos:end="21:25">(<argument pos:start="21:19" pos:end="21:21"><expr pos:start="21:19" pos:end="21:21"><name pos:start="21:19" pos:end="21:21">env</name></expr></argument>, <argument pos:start="21:24" pos:end="21:24"><expr pos:start="21:24" pos:end="21:24"><literal type="number" pos:start="21:24" pos:end="21:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="23:1" pos:end="23:5">#<cpp:directive pos:start="23:2" pos:end="23:5">else</cpp:directive></cpp:else>

<comment type="line" pos:start="25:1" pos:end="25:40">//    env-&gt;spr[PVR] = 0; /* Basic PPC */</comment>

    <expr_stmt pos:start="27:5" pos:end="34:0"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:7">env</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:12">spr</name><index pos:start="27:13" pos:end="27:17">[<expr pos:start="27:14" pos:end="27:16"><name pos:start="27:14" pos:end="27:16">PVR</name></expr>]</index></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:30">0x00080100</literal></expr>;</expr_stmt> <comment type="block" pos:start="27:33" pos:end="27:44">/* G3 CPU */</comment>

<comment type="line" pos:start="29:1" pos:end="29:60">//    env-&gt;spr[PVR] = 0x00083100; /* MPC755 (G3 embedded) */</comment>

<comment type="line" pos:start="31:1" pos:end="31:49">//    env-&gt;spr[PVR] = 0x00070100; /* IBM 750FX */</comment>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:21"><call pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:13">tlb_flush</name><argument_list pos:start="35:14" pos:end="35:21">(<argument pos:start="35:15" pos:end="35:17"><expr pos:start="35:15" pos:end="35:17"><name pos:start="35:15" pos:end="35:17">env</name></expr></argument>, <argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="37:1" pos:end="37:28">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:11">defined</name> <argument_list pos:start="37:13" pos:end="37:28">(<argument pos:start="37:14" pos:end="37:27"><expr pos:start="37:14" pos:end="37:27"><name pos:start="37:14" pos:end="37:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="39:5" pos:end="39:32">/* Single step trace mode */</comment>

    <expr_stmt pos:start="41:5" pos:end="44:0"><expr pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:10">msr_se</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="45:5" pos:end="45:15"><expr pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:10">msr_fp</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="45:17" pos:end="45:53">/* Allow floating point exceptions */</comment>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:10">msr_me</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="47:17" pos:end="47:53">/* Allow machine check exceptions  */</comment>

<cpp:if pos:start="49:1" pos:end="49:29">#<cpp:directive pos:start="49:2" pos:end="49:3">if</cpp:directive> <expr pos:start="49:5" pos:end="49:29"><call pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:11">defined</name><argument_list pos:start="49:12" pos:end="49:29">(<argument pos:start="49:13" pos:end="49:28"><expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="51:5" pos:end="51:15"><expr pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:10">msr_pr</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:37"><call pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:20">cpu_ppc_register</name><argument_list pos:start="53:21" pos:end="53:37">(<argument pos:start="53:22" pos:end="53:24"><expr pos:start="53:22" pos:end="53:24"><name pos:start="53:22" pos:end="53:24">env</name></expr></argument>, <argument pos:start="53:27" pos:end="53:36"><expr pos:start="53:27" pos:end="53:36"><literal type="number" pos:start="53:27" pos:end="53:36">0x00080000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:12"><name pos:start="57:5" pos:end="57:7">env</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:12">nip</name></name> <operator pos:start="57:14" pos:end="57:14">=</operator> <literal type="number" pos:start="57:16" pos:end="57:25">0xFFFFFFFC</literal></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="61:5" pos:end="61:34"><expr pos:start="61:5" pos:end="61:33"><name pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:7">env</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:20">access_type</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:33">ACCESS_INT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:18">cpu_single_env</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:24">env</name></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:15">return <expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">env</name></expr>;</return>

</block_content>}</block></function>
</unit>
