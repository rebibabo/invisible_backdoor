<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8261.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">hax_process_section</name><parameter_list pos:start="1:32" pos:end="1:76">(<parameter pos:start="1:33" pos:end="1:60"><decl pos:start="1:33" pos:end="1:60"><type pos:start="1:33" pos:end="1:60"><name pos:start="1:33" pos:end="1:51">MemoryRegionSection</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:60">section</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:75"><decl pos:start="1:63" pos:end="1:75"><type pos:start="1:63" pos:end="1:75"><name pos:start="1:63" pos:end="1:69">uint8_t</name></type> <name pos:start="1:71" pos:end="1:75">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:55">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MemoryRegion</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">mr</name> <init pos:start="5:22" pos:end="5:34">= <expr pos:start="5:24" pos:end="5:34"><name pos:start="5:24" pos:end="5:34"><name pos:start="5:24" pos:end="5:30">section</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:34">mr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:19">start_pa</name> <init pos:start="7:21" pos:end="7:58">= <expr pos:start="7:23" pos:end="7:58"><name pos:start="7:23" pos:end="7:58"><name pos:start="7:23" pos:end="7:29">section</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:58">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:49"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:19">size</name> <init pos:start="9:21" pos:end="9:49">= <expr pos:start="9:23" pos:end="9:49"><call pos:start="9:23" pos:end="9:49"><name pos:start="9:23" pos:end="9:34">int128_get64</name><argument_list pos:start="9:35" pos:end="9:49">(<argument pos:start="9:36" pos:end="9:48"><expr pos:start="9:36" pos:end="9:48"><name pos:start="9:36" pos:end="9:48"><name pos:start="9:36" pos:end="9:42">section</name><operator pos:start="9:43" pos:end="9:44">-&gt;</operator><name pos:start="9:45" pos:end="9:48">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:22">delta</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:20">host_va</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:48">/* We only care about RAM and ROM regions */</comment>

    <if_stmt pos:start="19:5" pos:end="35:5"><if pos:start="19:5" pos:end="35:5">if <condition pos:start="19:8" pos:end="19:34">(<expr pos:start="19:9" pos:end="19:33"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:33"><name pos:start="19:10" pos:end="19:29">memory_region_is_ram</name><argument_list pos:start="19:30" pos:end="19:33">(<argument pos:start="19:31" pos:end="19:32"><expr pos:start="19:31" pos:end="19:32"><name pos:start="19:31" pos:end="19:32">mr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:36" pos:end="35:5">{<block_content pos:start="21:9" pos:end="33:15">

        <if_stmt pos:start="21:9" pos:end="31:9"><if pos:start="21:9" pos:end="31:9">if <condition pos:start="21:12" pos:end="21:38">(<expr pos:start="21:13" pos:end="21:37"><call pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:33">memory_region_is_romd</name><argument_list pos:start="21:34" pos:end="21:37">(<argument pos:start="21:35" pos:end="21:36"><expr pos:start="21:35" pos:end="21:36"><name pos:start="21:35" pos:end="21:36">mr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:40" pos:end="31:9">{<block_content pos:start="25:13" pos:end="29:37">

            <comment type="block" pos:start="23:13" pos:end="23:63">/* HAXM kernel module does not support ROMD yet  */</comment>

            <expr_stmt pos:start="25:13" pos:end="29:37"><expr pos:start="25:13" pos:end="29:36"><call pos:start="25:13" pos:end="29:36"><name pos:start="25:13" pos:end="25:19">fprintf</name><argument_list pos:start="25:20" pos:end="29:36">(<argument pos:start="25:21" pos:end="25:26"><expr pos:start="25:21" pos:end="25:26"><name pos:start="25:21" pos:end="25:26">stderr</name></expr></argument>, <argument pos:start="25:29" pos:end="27:42"><expr pos:start="25:29" pos:end="27:42"><literal type="string" pos:start="25:29" pos:end="25:70">"%s: Warning: Ignoring ROMD region 0x%016"</literal> <name pos:start="25:72" pos:end="25:77">PRIx64</name>

                    <literal type="string" pos:start="27:21" pos:end="27:30">"-&gt;0x%016"</literal> <name pos:start="27:32" pos:end="27:37">PRIx64</name> <literal type="string" pos:start="27:39" pos:end="27:42">"\n"</literal></expr></argument>, <argument pos:start="27:45" pos:end="27:52"><expr pos:start="27:45" pos:end="27:52"><name pos:start="27:45" pos:end="27:52">__func__</name></expr></argument>, <argument pos:start="27:55" pos:end="27:62"><expr pos:start="27:55" pos:end="27:62"><name pos:start="27:55" pos:end="27:62">start_pa</name></expr></argument>,

                    <argument pos:start="29:21" pos:end="29:35"><expr pos:start="29:21" pos:end="29:35"><name pos:start="29:21" pos:end="29:28">start_pa</name> <operator pos:start="29:30" pos:end="29:30">+</operator> <name pos:start="29:32" pos:end="29:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="43:7">/* Adjust start_pa and size so that they are page-aligned. (Cf

     * kvm_set_phys_mem() in kvm-all.c).

     */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:78"><expr pos:start="45:5" pos:end="45:77"><name pos:start="45:5" pos:end="45:9">delta</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <name pos:start="45:13" pos:end="45:36">qemu_real_host_page_size</name> <operator pos:start="45:38" pos:end="45:38">-</operator> <operator pos:start="45:40" pos:end="45:40">(</operator><name pos:start="45:41" pos:end="45:48">start_pa</name> <operator pos:start="45:50" pos:end="45:50">&amp;</operator> <operator pos:start="45:52" pos:end="45:52">~</operator><name pos:start="45:53" pos:end="45:76">qemu_real_host_page_mask</name><operator pos:start="45:77" pos:end="45:77">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:39"><expr pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:9">delta</name> <operator pos:start="47:11" pos:end="47:12">&amp;=</operator> <operator pos:start="47:14" pos:end="47:14">~</operator><name pos:start="47:15" pos:end="47:38">qemu_real_host_page_mask</name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:21">(<expr pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:13">delta</name> <operator pos:start="49:15" pos:end="49:15">&gt;</operator> <name pos:start="49:17" pos:end="49:20">size</name></expr>)</condition> <block pos:start="49:23" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:15">

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:12">start_pa</name> <operator pos:start="55:14" pos:end="55:15">+=</operator> <name pos:start="55:17" pos:end="55:21">delta</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:8">size</name> <operator pos:start="57:10" pos:end="57:11">-=</operator> <name pos:start="57:13" pos:end="57:17">delta</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:37"><expr pos:start="59:5" pos:end="59:36"><name pos:start="59:5" pos:end="59:8">size</name> <operator pos:start="59:10" pos:end="59:11">&amp;=</operator> <name pos:start="59:13" pos:end="59:36">qemu_real_host_page_mask</name></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:56">(<expr pos:start="61:9" pos:end="61:55"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:13">size</name> <operator pos:start="61:15" pos:end="61:16">||</operator> <operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:26">start_pa</name> <operator pos:start="61:28" pos:end="61:28">&amp;</operator> <operator pos:start="61:30" pos:end="61:30">~</operator><name pos:start="61:31" pos:end="61:54">qemu_real_host_page_mask</name><operator pos:start="61:55" pos:end="61:55">)</operator></expr>)</condition> <block pos:start="61:58" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:15">

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="71:52"><expr pos:start="69:5" pos:end="71:51"><name pos:start="69:5" pos:end="69:11">host_va</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">(</operator><name pos:start="69:16" pos:end="69:24">uintptr_t</name><operator pos:start="69:25" pos:end="69:25">)</operator><call pos:start="69:26" pos:end="69:54"><name pos:start="69:26" pos:end="69:50">memory_region_get_ram_ptr</name><argument_list pos:start="69:51" pos:end="69:54">(<argument pos:start="69:52" pos:end="69:53"><expr pos:start="69:52" pos:end="69:53"><name pos:start="69:52" pos:end="69:53">mr</name></expr></argument>)</argument_list></call>

            <operator pos:start="71:13" pos:end="71:13">+</operator> <name pos:start="71:15" pos:end="71:43"><name pos:start="71:15" pos:end="71:21">section</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:43">offset_within_region</name></name> <operator pos:start="71:45" pos:end="71:45">+</operator> <name pos:start="71:47" pos:end="71:51">delta</name></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:42">(<expr pos:start="73:9" pos:end="73:41"><call pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:28">memory_region_is_rom</name><argument_list pos:start="73:29" pos:end="73:41">(<argument pos:start="73:30" pos:end="73:40"><expr pos:start="73:30" pos:end="73:40"><name pos:start="73:30" pos:end="73:40"><name pos:start="73:30" pos:end="73:36">section</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:40">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:44" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:34">

        <expr_stmt pos:start="75:9" pos:end="75:34"><expr pos:start="75:9" pos:end="75:33"><name pos:start="75:9" pos:end="75:13">flags</name> <operator pos:start="75:15" pos:end="75:16">|=</operator> <name pos:start="75:18" pos:end="75:33">HAX_RAM_INFO_ROM</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:79">/* the kernel module interface uses 32-bit sizes (but we could split...) */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><call pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:12">g_assert</name><argument_list pos:start="83:13" pos:end="83:32">(<argument pos:start="83:14" pos:end="83:31"><expr pos:start="83:14" pos:end="83:31"><name pos:start="83:14" pos:end="83:17">size</name> <operator pos:start="83:19" pos:end="83:20">&lt;=</operator> <name pos:start="83:22" pos:end="83:31">UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:55"><expr pos:start="87:5" pos:end="87:54"><call pos:start="87:5" pos:end="87:54"><name pos:start="87:5" pos:end="87:22">hax_update_mapping</name><argument_list pos:start="87:23" pos:end="87:54">(<argument pos:start="87:24" pos:end="87:31"><expr pos:start="87:24" pos:end="87:31"><name pos:start="87:24" pos:end="87:31">start_pa</name></expr></argument>, <argument pos:start="87:34" pos:end="87:37"><expr pos:start="87:34" pos:end="87:37"><name pos:start="87:34" pos:end="87:37">size</name></expr></argument>, <argument pos:start="87:40" pos:end="87:46"><expr pos:start="87:40" pos:end="87:46"><name pos:start="87:40" pos:end="87:46">host_va</name></expr></argument>, <argument pos:start="87:49" pos:end="87:53"><expr pos:start="87:49" pos:end="87:53"><name pos:start="87:49" pos:end="87:53">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
