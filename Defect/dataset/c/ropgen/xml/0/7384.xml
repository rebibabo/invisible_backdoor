<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7384.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:39">roq_dpcm_encode_init</name><parameter_list pos:start="1:40" pos:end="1:62">(<parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:54">AVCodecContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:13">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">ROQDPCMContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:27">context</name> <init pos:start="5:29" pos:end="5:46">= <expr pos:start="5:31" pos:end="5:46"><name pos:start="5:31" pos:end="5:46"><name pos:start="5:31" pos:end="5:35">avctx</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:28">(<expr pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:13">avctx</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:23">channels</name></name> <operator pos:start="9:25" pos:end="9:25">&gt;</operator> <literal type="number" pos:start="9:27" pos:end="9:27">2</literal></expr>)</condition> <block pos:start="9:30" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:18">

        <expr_stmt pos:start="11:9" pos:end="11:70"><expr pos:start="11:9" pos:end="11:69"><call pos:start="11:9" pos:end="11:69"><name pos:start="11:9" pos:end="11:14">av_log</name><argument_list pos:start="11:15" pos:end="11:69">(<argument pos:start="11:16" pos:end="11:20"><expr pos:start="11:16" pos:end="11:20"><name pos:start="11:16" pos:end="11:20">avctx</name></expr></argument>, <argument pos:start="11:23" pos:end="11:34"><expr pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="11:37" pos:end="11:68"><expr pos:start="11:37" pos:end="11:68"><literal type="string" pos:start="11:37" pos:end="11:68">"Audio must be mono or stereo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:18">return <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:36">(<expr pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:13">avctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:26">sample_rate</name></name> <operator pos:start="17:28" pos:end="17:29">!=</operator> <literal type="number" pos:start="17:31" pos:end="17:35">22050</literal></expr>)</condition> <block pos:start="17:38" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <expr_stmt pos:start="19:9" pos:end="19:64"><expr pos:start="19:9" pos:end="19:63"><call pos:start="19:9" pos:end="19:63"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:63">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">avctx</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:37" pos:end="19:62"><expr pos:start="19:37" pos:end="19:62"><literal type="string" pos:start="19:37" pos:end="19:62">"Audio must be 22050 Hz\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:47">(<expr pos:start="25:9" pos:end="25:46"><name pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:13">avctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:25">sample_fmt</name></name> <operator pos:start="25:27" pos:end="25:28">!=</operator> <name pos:start="25:30" pos:end="25:46">AV_SAMPLE_FMT_S16</name></expr>)</condition> <block pos:start="25:49" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:69"><expr pos:start="27:9" pos:end="27:68"><call pos:start="27:9" pos:end="27:68"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:68">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:67"><expr pos:start="27:37" pos:end="27:67"><literal type="string" pos:start="27:37" pos:end="27:67">"Audio must be signed 16-bit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:9">avctx</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:21">frame_size</name></name> <operator pos:start="35:23" pos:end="35:23">=</operator> <name pos:start="35:25" pos:end="35:44">ROQ_FIRST_FRAME_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:56"><expr pos:start="39:5" pos:end="39:55"><name pos:start="39:5" pos:end="39:26"><name pos:start="39:5" pos:end="39:11">context</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:23">lastSample</name><index pos:start="39:24" pos:end="39:26">[<expr pos:start="39:25" pos:end="39:25"><literal type="number" pos:start="39:25" pos:end="39:25">0</literal></expr>]</index></name> <operator pos:start="39:28" pos:end="39:28">=</operator> <name pos:start="39:30" pos:end="39:51"><name pos:start="39:30" pos:end="39:36">context</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:48">lastSample</name><index pos:start="39:49" pos:end="39:51">[<expr pos:start="39:50" pos:end="39:50"><literal type="number" pos:start="39:50" pos:end="39:50">1</literal></expr>]</index></name> <operator pos:start="39:53" pos:end="39:53">=</operator> <literal type="number" pos:start="39:55" pos:end="39:55">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:9">avctx</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:22">coded_frame</name></name><operator pos:start="43:23" pos:end="43:23">=</operator> <call pos:start="43:25" pos:end="43:45"><name pos:start="43:25" pos:end="43:43">avcodec_alloc_frame</name><argument_list pos:start="43:44" pos:end="43:45">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:31"><if pos:start="45:5" pos:end="47:31">if <condition pos:start="45:8" pos:end="45:28">(<expr pos:start="45:9" pos:end="45:27"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:27"><name pos:start="45:10" pos:end="45:14">avctx</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:27">coded_frame</name></name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:31"><block_content pos:start="47:9" pos:end="47:31">

        <return pos:start="47:9" pos:end="47:31">return <expr pos:start="47:16" pos:end="47:30"><call pos:start="47:16" pos:end="47:30"><name pos:start="47:16" pos:end="47:22">AVERROR</name><argument_list pos:start="47:23" pos:end="47:30">(<argument pos:start="47:24" pos:end="47:29"><expr pos:start="47:24" pos:end="47:29"><name pos:start="47:24" pos:end="47:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="51:5" pos:end="51:13">return <expr pos:start="51:12" pos:end="51:12"><literal type="number" pos:start="51:12" pos:end="51:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
