<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11133.c" pos:tabs="8"><function pos:start="1:1" pos:end="287:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">cloop_open</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="287:1">{<block_content pos:start="7:5" pos:end="285:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVCloopState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:60"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:25">offsets_size</name></decl>, <decl pos:start="9:28" pos:end="9:56"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:28" pos:end="9:52">max_compressed_block_size</name> <init pos:start="9:54" pos:end="9:56">= <expr pos:start="9:56" pos:end="9:56"><literal type="number" pos:start="9:56" pos:end="9:56">1</literal></expr></init></decl>, <decl pos:start="9:59" pos:end="9:59"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:59" pos:end="9:59">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:44"><expr pos:start="15:5" pos:end="17:43"><name pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:6">bs</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:12">file</name></name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="17:43"><name pos:start="15:16" pos:end="15:30">bdrv_open_child</name><argument_list pos:start="15:31" pos:end="17:43">(<argument pos:start="15:32" pos:end="15:35"><expr pos:start="15:32" pos:end="15:35"><name pos:start="15:32" pos:end="15:35">NULL</name></expr></argument>, <argument pos:start="15:38" pos:end="15:44"><expr pos:start="15:38" pos:end="15:44"><name pos:start="15:38" pos:end="15:44">options</name></expr></argument>, <argument pos:start="15:47" pos:end="15:52"><expr pos:start="15:47" pos:end="15:52"><literal type="string" pos:start="15:47" pos:end="15:52">"file"</literal></expr></argument>, <argument pos:start="15:55" pos:end="15:56"><expr pos:start="15:55" pos:end="15:56"><name pos:start="15:55" pos:end="15:56">bs</name></expr></argument>, <argument pos:start="15:59" pos:end="15:69"><expr pos:start="15:59" pos:end="15:69"><operator pos:start="15:59" pos:end="15:59">&amp;</operator><name pos:start="15:60" pos:end="15:69">child_file</name></expr></argument>,

                               <argument pos:start="17:32" pos:end="17:36"><expr pos:start="17:32" pos:end="17:36"><name pos:start="17:32" pos:end="17:36">false</name></expr></argument>, <argument pos:start="17:39" pos:end="17:42"><expr pos:start="17:39" pos:end="17:42"><name pos:start="17:39" pos:end="17:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:17"><name pos:start="19:10" pos:end="19:11">bs</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:17">file</name></name></expr>)</condition> <block pos:start="19:20" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:23">

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:22">bdrv_set_read_only</name><argument_list pos:start="27:23" pos:end="27:32">(<argument pos:start="27:24" pos:end="27:25"><expr pos:start="27:24" pos:end="27:25"><name pos:start="27:24" pos:end="27:25">bs</name></expr></argument>, <argument pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:21">/* read header */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:55"><expr pos:start="33:5" pos:end="33:54"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:54"><name pos:start="33:11" pos:end="33:20">bdrv_pread</name><argument_list pos:start="33:21" pos:end="33:54">(<argument pos:start="33:22" pos:end="33:29"><expr pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:23">bs</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:29">file</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><literal type="number" pos:start="33:32" pos:end="33:34">128</literal></expr></argument>, <argument pos:start="33:37" pos:end="33:50"><expr pos:start="33:37" pos:end="33:50"><operator pos:start="33:37" pos:end="33:37">&amp;</operator><name pos:start="33:38" pos:end="33:50"><name pos:start="33:38" pos:end="33:38">s</name><operator pos:start="33:39" pos:end="33:40">-&gt;</operator><name pos:start="33:41" pos:end="33:50">block_size</name></name></expr></argument>, <argument pos:start="33:53" pos:end="33:53"><expr pos:start="33:53" pos:end="33:53"><literal type="number" pos:start="33:53" pos:end="33:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition> <block pos:start="35:18" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:19">

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:47"><expr pos:start="41:5" pos:end="41:46"><name pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:17">block_size</name></name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:46"><name pos:start="41:21" pos:end="41:31">be32_to_cpu</name><argument_list pos:start="41:32" pos:end="41:46">(<argument pos:start="41:33" pos:end="41:45"><expr pos:start="41:33" pos:end="41:45"><name pos:start="41:33" pos:end="41:45"><name pos:start="41:33" pos:end="41:33">s</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:45">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:28">(<expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:21">block_size</name></name> <operator pos:start="43:23" pos:end="43:23">%</operator> <literal type="number" pos:start="43:25" pos:end="43:27">512</literal></expr>)</condition> <block pos:start="43:30" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:23">

        <expr_stmt pos:start="45:9" pos:end="47:34"><expr pos:start="45:9" pos:end="47:33"><call pos:start="45:9" pos:end="47:33"><name pos:start="45:9" pos:end="45:18">error_setg</name><argument_list pos:start="45:19" pos:end="47:33">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">errp</name></expr></argument>, <argument pos:start="45:26" pos:end="45:75"><expr pos:start="45:26" pos:end="45:75"><literal type="string" pos:start="45:26" pos:end="45:39">"block_size %"</literal> <name pos:start="45:41" pos:end="45:46">PRIu32</name> <literal type="string" pos:start="45:48" pos:end="45:75">" must be a multiple of 512"</literal></expr></argument>,

                   <argument pos:start="47:20" pos:end="47:32"><expr pos:start="47:20" pos:end="47:32"><name pos:start="47:20" pos:end="47:32"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:32">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:23">return <expr pos:start="49:16" pos:end="49:22"><operator pos:start="49:16" pos:end="49:16">-</operator><name pos:start="49:17" pos:end="49:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:27">(<expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:21">block_size</name></name> <operator pos:start="53:23" pos:end="53:24">==</operator> <literal type="number" pos:start="53:26" pos:end="53:26">0</literal></expr>)</condition> <block pos:start="53:29" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:23">

        <expr_stmt pos:start="55:9" pos:end="55:54"><expr pos:start="55:9" pos:end="55:53"><call pos:start="55:9" pos:end="55:53"><name pos:start="55:9" pos:end="55:18">error_setg</name><argument_list pos:start="55:19" pos:end="55:53">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">errp</name></expr></argument>, <argument pos:start="55:26" pos:end="55:52"><expr pos:start="55:26" pos:end="55:52"><literal type="string" pos:start="55:26" pos:end="55:52">"block_size cannot be zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:23">return <expr pos:start="57:16" pos:end="57:22"><operator pos:start="57:16" pos:end="57:16">-</operator><name pos:start="57:17" pos:end="57:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="69:7">/* cloop's create_compressed_fs.c warns about block sizes beyond 256 KB but

     * we can accept more.  Prevent ridiculous values like 4 GB - 1 since we

     * need a buffer this big.

     */</comment>

    <if_stmt pos:start="71:5" pos:end="81:5"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="71:39">(<expr pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:21">block_size</name></name> <operator pos:start="71:23" pos:end="71:23">&gt;</operator> <name pos:start="71:25" pos:end="71:38">MAX_BLOCK_SIZE</name></expr>)</condition> <block pos:start="71:41" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:23">

        <expr_stmt pos:start="73:9" pos:end="77:51"><expr pos:start="73:9" pos:end="77:50"><call pos:start="73:9" pos:end="77:50"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="77:50">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:71"><expr pos:start="73:26" pos:end="73:71"><literal type="string" pos:start="73:26" pos:end="73:39">"block_size %"</literal> <name pos:start="73:41" pos:end="73:46">PRIu32</name> <literal type="string" pos:start="73:48" pos:end="73:71">" must be %u MB or less"</literal></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:32"><expr pos:start="75:20" pos:end="75:32"><name pos:start="75:20" pos:end="75:32"><name pos:start="75:20" pos:end="75:20">s</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:32">block_size</name></name></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:49"><expr pos:start="77:20" pos:end="77:49"><name pos:start="77:20" pos:end="77:33">MAX_BLOCK_SIZE</name> <operator pos:start="77:35" pos:end="77:35">/</operator> <operator pos:start="77:37" pos:end="77:37">(</operator><literal type="number" pos:start="77:38" pos:end="77:41">1024</literal> <operator pos:start="77:43" pos:end="77:43">*</operator> <literal type="number" pos:start="77:45" pos:end="77:48">1024</literal><operator pos:start="77:49" pos:end="77:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:23">return <expr pos:start="79:16" pos:end="79:22"><operator pos:start="79:16" pos:end="79:16">-</operator><name pos:start="79:17" pos:end="79:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:57"><expr pos:start="85:5" pos:end="85:56"><name pos:start="85:5" pos:end="85:7">ret</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:56"><name pos:start="85:11" pos:end="85:20">bdrv_pread</name><argument_list pos:start="85:21" pos:end="85:56">(<argument pos:start="85:22" pos:end="85:29"><expr pos:start="85:22" pos:end="85:29"><name pos:start="85:22" pos:end="85:29"><name pos:start="85:22" pos:end="85:23">bs</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:29">file</name></name></expr></argument>, <argument pos:start="85:32" pos:end="85:38"><expr pos:start="85:32" pos:end="85:38"><literal type="number" pos:start="85:32" pos:end="85:36">128</literal> <operator pos:start="85:36" pos:end="85:36">+</operator> <literal type="number" pos:start="85:38" pos:end="85:38">4</literal></expr></argument>, <argument pos:start="85:41" pos:end="85:52"><expr pos:start="85:41" pos:end="85:52"><operator pos:start="85:41" pos:end="85:41">&amp;</operator><name pos:start="85:42" pos:end="85:52"><name pos:start="85:42" pos:end="85:42">s</name><operator pos:start="85:43" pos:end="85:44">-&gt;</operator><name pos:start="85:45" pos:end="85:52">n_blocks</name></name></expr></argument>, <argument pos:start="85:55" pos:end="85:55"><expr pos:start="85:55" pos:end="85:55"><literal type="number" pos:start="85:55" pos:end="85:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">&lt;</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr>)</condition> <block pos:start="87:18" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:19">

        <return pos:start="89:9" pos:end="89:19">return <expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:43"><expr pos:start="93:5" pos:end="93:42"><name pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:15">n_blocks</name></name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:42"><name pos:start="93:19" pos:end="93:29">be32_to_cpu</name><argument_list pos:start="93:30" pos:end="93:42">(<argument pos:start="93:31" pos:end="93:41"><expr pos:start="93:31" pos:end="93:41"><name pos:start="93:31" pos:end="93:41"><name pos:start="93:31" pos:end="93:31">s</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:41">n_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:22">/* read offsets */</comment>

    <if_stmt pos:start="99:5" pos:end="111:5"><if pos:start="99:5" pos:end="111:5">if <condition pos:start="99:8" pos:end="99:58">(<expr pos:start="99:9" pos:end="99:57"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:19">n_blocks</name></name> <operator pos:start="99:21" pos:end="99:21">&gt;</operator> <operator pos:start="99:23" pos:end="99:23">(</operator><name pos:start="99:24" pos:end="99:33">UINT32_MAX</name> <operator pos:start="99:35" pos:end="99:35">-</operator> <literal type="number" pos:start="99:37" pos:end="99:37">1</literal><operator pos:start="99:38" pos:end="99:38">)</operator> <operator pos:start="99:40" pos:end="99:40">/</operator> <sizeof pos:start="99:42" pos:end="99:57">sizeof<argument_list pos:start="99:48" pos:end="99:57">(<argument pos:start="99:49" pos:end="99:56"><expr pos:start="99:49" pos:end="99:56"><name pos:start="99:49" pos:end="99:56">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="99:60" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:23">

        <comment type="block" pos:start="101:9" pos:end="101:38">/* Prevent integer overflow */</comment>

        <expr_stmt pos:start="103:9" pos:end="107:56"><expr pos:start="103:9" pos:end="107:55"><call pos:start="103:9" pos:end="107:55"><name pos:start="103:9" pos:end="103:18">error_setg</name><argument_list pos:start="103:19" pos:end="107:55">(<argument pos:start="103:20" pos:end="103:23"><expr pos:start="103:20" pos:end="103:23"><name pos:start="103:20" pos:end="103:23">errp</name></expr></argument>, <argument pos:start="103:26" pos:end="103:67"><expr pos:start="103:26" pos:end="103:67"><literal type="string" pos:start="103:26" pos:end="103:37">"n_blocks %"</literal> <name pos:start="103:39" pos:end="103:44">PRIu32</name> <literal type="string" pos:start="103:46" pos:end="103:67">" must be %zu or less"</literal></expr></argument>,

                   <argument pos:start="105:20" pos:end="105:30"><expr pos:start="105:20" pos:end="105:30"><name pos:start="105:20" pos:end="105:30"><name pos:start="105:20" pos:end="105:20">s</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:30">n_blocks</name></name></expr></argument>,

                   <argument pos:start="107:20" pos:end="107:54"><expr pos:start="107:20" pos:end="107:54"><operator pos:start="107:20" pos:end="107:20">(</operator><name pos:start="107:21" pos:end="107:30">UINT32_MAX</name> <operator pos:start="107:32" pos:end="107:32">-</operator> <literal type="number" pos:start="107:34" pos:end="107:34">1</literal><operator pos:start="107:35" pos:end="107:35">)</operator> <operator pos:start="107:37" pos:end="107:37">/</operator> <sizeof pos:start="107:39" pos:end="107:54">sizeof<argument_list pos:start="107:45" pos:end="107:54">(<argument pos:start="107:46" pos:end="107:53"><expr pos:start="107:46" pos:end="107:53"><name pos:start="107:46" pos:end="107:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:23">return <expr pos:start="109:16" pos:end="109:22"><operator pos:start="109:16" pos:end="109:16">-</operator><name pos:start="109:17" pos:end="109:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:56"><expr pos:start="113:5" pos:end="113:55"><name pos:start="113:5" pos:end="113:16">offsets_size</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <operator pos:start="113:20" pos:end="113:20">(</operator><name pos:start="113:21" pos:end="113:31"><name pos:start="113:21" pos:end="113:21">s</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:31">n_blocks</name></name> <operator pos:start="113:33" pos:end="113:33">+</operator> <literal type="number" pos:start="113:35" pos:end="113:35">1</literal><operator pos:start="113:36" pos:end="113:36">)</operator> <operator pos:start="113:38" pos:end="113:38">*</operator> <sizeof pos:start="113:40" pos:end="113:55">sizeof<argument_list pos:start="113:46" pos:end="113:55">(<argument pos:start="113:47" pos:end="113:54"><expr pos:start="113:47" pos:end="113:54"><name pos:start="113:47" pos:end="113:54">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="131:5"><if pos:start="115:5" pos:end="131:5">if <condition pos:start="115:8" pos:end="115:41">(<expr pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:20">offsets_size</name> <operator pos:start="115:22" pos:end="115:22">&gt;</operator> <literal type="number" pos:start="115:24" pos:end="115:26">512</literal> <operator pos:start="115:28" pos:end="115:28">*</operator> <literal type="number" pos:start="115:30" pos:end="115:33">1024</literal> <operator pos:start="115:35" pos:end="115:35">*</operator> <literal type="number" pos:start="115:37" pos:end="115:40">1024</literal></expr>)</condition> <block pos:start="115:43" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:23">

        <comment type="block" pos:start="117:9" pos:end="123:11">/* Prevent ridiculous offsets_size which causes memory allocation to

         * fail or overflows bdrv_pread() size.  In practice the 512 MB

         * offsets[] limit supports 16 TB images at 256 KB block size.

         */</comment>

        <expr_stmt pos:start="125:9" pos:end="127:48"><expr pos:start="125:9" pos:end="127:47"><call pos:start="125:9" pos:end="127:47"><name pos:start="125:9" pos:end="125:18">error_setg</name><argument_list pos:start="125:19" pos:end="127:47">(<argument pos:start="125:20" pos:end="125:23"><expr pos:start="125:20" pos:end="125:23"><name pos:start="125:20" pos:end="125:23">errp</name></expr></argument>, <argument pos:start="125:26" pos:end="127:46"><expr pos:start="125:26" pos:end="127:46"><literal type="string" pos:start="125:26" pos:end="125:60">"image requires too many offsets, "</literal>

                   <literal type="string" pos:start="127:20" pos:end="127:46">"try increasing block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:23">return <expr pos:start="129:16" pos:end="129:22"><operator pos:start="129:16" pos:end="129:16">-</operator><name pos:start="129:17" pos:end="129:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:44"><expr pos:start="135:5" pos:end="135:43"><name pos:start="135:5" pos:end="135:14"><name pos:start="135:5" pos:end="135:5">s</name><operator pos:start="135:6" pos:end="135:7">-&gt;</operator><name pos:start="135:8" pos:end="135:14">offsets</name></name> <operator pos:start="135:16" pos:end="135:16">=</operator> <call pos:start="135:18" pos:end="135:43"><name pos:start="135:18" pos:end="135:29">g_try_malloc</name><argument_list pos:start="135:30" pos:end="135:43">(<argument pos:start="135:31" pos:end="135:42"><expr pos:start="135:31" pos:end="135:42"><name pos:start="135:31" pos:end="135:42">offsets_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:27">(<expr pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:18">offsets</name></name> <operator pos:start="137:20" pos:end="137:21">==</operator> <name pos:start="137:23" pos:end="137:26">NULL</name></expr>)</condition> <block pos:start="137:29" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:23">

        <expr_stmt pos:start="139:9" pos:end="139:61"><expr pos:start="139:9" pos:end="139:60"><call pos:start="139:9" pos:end="139:60"><name pos:start="139:9" pos:end="139:18">error_setg</name><argument_list pos:start="139:19" pos:end="139:60">(<argument pos:start="139:20" pos:end="139:23"><expr pos:start="139:20" pos:end="139:23"><name pos:start="139:20" pos:end="139:23">errp</name></expr></argument>, <argument pos:start="139:26" pos:end="139:59"><expr pos:start="139:26" pos:end="139:59"><literal type="string" pos:start="139:26" pos:end="139:59">"Could not allocate offsets table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:23">return <expr pos:start="141:16" pos:end="141:22"><operator pos:start="141:16" pos:end="141:16">-</operator><name pos:start="141:17" pos:end="141:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:70"><expr pos:start="147:5" pos:end="147:69"><name pos:start="147:5" pos:end="147:7">ret</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <call pos:start="147:11" pos:end="147:69"><name pos:start="147:11" pos:end="147:20">bdrv_pread</name><argument_list pos:start="147:21" pos:end="147:69">(<argument pos:start="147:22" pos:end="147:29"><expr pos:start="147:22" pos:end="147:29"><name pos:start="147:22" pos:end="147:29"><name pos:start="147:22" pos:end="147:23">bs</name><operator pos:start="147:24" pos:end="147:25">-&gt;</operator><name pos:start="147:26" pos:end="147:29">file</name></name></expr></argument>, <argument pos:start="147:32" pos:end="147:42"><expr pos:start="147:32" pos:end="147:42"><literal type="number" pos:start="147:32" pos:end="147:36">128</literal> <operator pos:start="147:36" pos:end="147:36">+</operator> <literal type="number" pos:start="147:38" pos:end="147:40">4</literal> <operator pos:start="147:40" pos:end="147:40">+</operator> <literal type="number" pos:start="147:42" pos:end="147:42">4</literal></expr></argument>, <argument pos:start="147:45" pos:end="147:54"><expr pos:start="147:45" pos:end="147:54"><name pos:start="147:45" pos:end="147:54"><name pos:start="147:45" pos:end="147:45">s</name><operator pos:start="147:46" pos:end="147:47">-&gt;</operator><name pos:start="147:48" pos:end="147:54">offsets</name></name></expr></argument>, <argument pos:start="147:57" pos:end="147:68"><expr pos:start="147:57" pos:end="147:68"><name pos:start="147:57" pos:end="147:68">offsets_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:16">(<expr pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:11">ret</name> <operator pos:start="149:13" pos:end="149:13">&lt;</operator> <literal type="number" pos:start="149:15" pos:end="149:15">0</literal></expr>)</condition> <block pos:start="149:18" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:18">

        <goto pos:start="151:9" pos:end="151:18">goto <name pos:start="151:14" pos:end="151:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="157:5" pos:end="221:5">for <control pos:start="157:9" pos:end="157:41">(<init pos:start="157:10" pos:end="157:15"><expr pos:start="157:10" pos:end="157:14"><name pos:start="157:10" pos:end="157:10">i</name> <operator pos:start="157:12" pos:end="157:12">=</operator> <literal type="number" pos:start="157:14" pos:end="157:14">0</literal></expr>;</init> <condition pos:start="157:17" pos:end="157:36"><expr pos:start="157:17" pos:end="157:35"><name pos:start="157:17" pos:end="157:17">i</name> <operator pos:start="157:19" pos:end="157:19">&lt;</operator> <name pos:start="157:21" pos:end="157:31"><name pos:start="157:21" pos:end="157:21">s</name><operator pos:start="157:22" pos:end="157:23">-&gt;</operator><name pos:start="157:24" pos:end="157:31">n_blocks</name></name> <operator pos:start="157:33" pos:end="157:33">+</operator> <literal type="number" pos:start="157:35" pos:end="157:35">1</literal></expr>;</condition> <incr pos:start="157:38" pos:end="157:40"><expr pos:start="157:38" pos:end="157:40"><name pos:start="157:38" pos:end="157:38">i</name><operator pos:start="157:39" pos:end="157:40">++</operator></expr></incr>)</control> <block pos:start="157:43" pos:end="221:5">{<block_content pos:start="159:9" pos:end="219:9">

        <decl_stmt pos:start="159:9" pos:end="159:22"><decl pos:start="159:9" pos:end="159:21"><type pos:start="159:9" pos:end="159:16"><name pos:start="159:9" pos:end="159:16">uint64_t</name></type> <name pos:start="159:18" pos:end="159:21">size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="163:9" pos:end="163:51"><expr pos:start="163:9" pos:end="163:50"><name pos:start="163:9" pos:end="163:21"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:18">offsets</name><index pos:start="163:19" pos:end="163:21">[<expr pos:start="163:20" pos:end="163:20"><name pos:start="163:20" pos:end="163:20">i</name></expr>]</index></name> <operator pos:start="163:23" pos:end="163:23">=</operator> <call pos:start="163:25" pos:end="163:50"><name pos:start="163:25" pos:end="163:35">be64_to_cpu</name><argument_list pos:start="163:36" pos:end="163:50">(<argument pos:start="163:37" pos:end="163:49"><expr pos:start="163:37" pos:end="163:49"><name pos:start="163:37" pos:end="163:49"><name pos:start="163:37" pos:end="163:37">s</name><operator pos:start="163:38" pos:end="163:39">-&gt;</operator><name pos:start="163:40" pos:end="163:46">offsets</name><index pos:start="163:47" pos:end="163:49">[<expr pos:start="163:48" pos:end="163:48"><name pos:start="163:48" pos:end="163:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:19">(<expr pos:start="165:13" pos:end="165:18"><name pos:start="165:13" pos:end="165:13">i</name> <operator pos:start="165:15" pos:end="165:16">==</operator> <literal type="number" pos:start="165:18" pos:end="165:18">0</literal></expr>)</condition> <block pos:start="165:21" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:21">

            <continue pos:start="167:13" pos:end="167:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="173:9" pos:end="183:9"><if pos:start="173:9" pos:end="183:9">if <condition pos:start="173:12" pos:end="173:46">(<expr pos:start="173:13" pos:end="173:45"><name pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:13">s</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:22">offsets</name><index pos:start="173:23" pos:end="173:25">[<expr pos:start="173:24" pos:end="173:24"><name pos:start="173:24" pos:end="173:24">i</name></expr>]</index></name> <operator pos:start="173:27" pos:end="173:27">&lt;</operator> <name pos:start="173:29" pos:end="173:45"><name pos:start="173:29" pos:end="173:29">s</name><operator pos:start="173:30" pos:end="173:31">-&gt;</operator><name pos:start="173:32" pos:end="173:38">offsets</name><index pos:start="173:39" pos:end="173:45">[<expr pos:start="173:40" pos:end="173:44"><name pos:start="173:40" pos:end="173:40">i</name> <operator pos:start="173:42" pos:end="173:42">-</operator> <literal type="number" pos:start="173:44" pos:end="173:44">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="173:48" pos:end="183:9">{<block_content pos:start="175:13" pos:end="181:22">

            <expr_stmt pos:start="175:13" pos:end="177:70"><expr pos:start="175:13" pos:end="177:69"><call pos:start="175:13" pos:end="177:69"><name pos:start="175:13" pos:end="175:22">error_setg</name><argument_list pos:start="175:23" pos:end="177:69">(<argument pos:start="175:24" pos:end="175:27"><expr pos:start="175:24" pos:end="175:27"><name pos:start="175:24" pos:end="175:27">errp</name></expr></argument>, <argument pos:start="175:30" pos:end="177:65"><expr pos:start="175:30" pos:end="177:65"><literal type="string" pos:start="175:30" pos:end="175:71">"offsets not monotonically increasing at "</literal>

                       <literal type="string" pos:start="177:24" pos:end="177:32">"index %"</literal> <name pos:start="177:34" pos:end="177:39">PRIu32</name> <literal type="string" pos:start="177:41" pos:end="177:65">", image file is corrupt"</literal></expr></argument>, <argument pos:start="177:68" pos:end="177:68"><expr pos:start="177:68" pos:end="177:68"><name pos:start="177:68" pos:end="177:68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:26"><expr pos:start="179:13" pos:end="179:25"><name pos:start="179:13" pos:end="179:15">ret</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <operator pos:start="179:19" pos:end="179:19">-</operator><name pos:start="179:20" pos:end="179:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="181:13" pos:end="181:22">goto <name pos:start="181:18" pos:end="181:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:49"><expr pos:start="187:9" pos:end="187:48"><name pos:start="187:9" pos:end="187:12">size</name> <operator pos:start="187:14" pos:end="187:14">=</operator> <name pos:start="187:16" pos:end="187:28"><name pos:start="187:16" pos:end="187:16">s</name><operator pos:start="187:17" pos:end="187:18">-&gt;</operator><name pos:start="187:19" pos:end="187:25">offsets</name><index pos:start="187:26" pos:end="187:28">[<expr pos:start="187:27" pos:end="187:27"><name pos:start="187:27" pos:end="187:27">i</name></expr>]</index></name> <operator pos:start="187:30" pos:end="187:30">-</operator> <name pos:start="187:32" pos:end="187:48"><name pos:start="187:32" pos:end="187:32">s</name><operator pos:start="187:33" pos:end="187:34">-&gt;</operator><name pos:start="187:35" pos:end="187:41">offsets</name><index pos:start="187:42" pos:end="187:48">[<expr pos:start="187:43" pos:end="187:47"><name pos:start="187:43" pos:end="187:43">i</name> <operator pos:start="187:45" pos:end="187:45">-</operator> <literal type="number" pos:start="187:47" pos:end="187:47">1</literal></expr>]</index></name></expr>;</expr_stmt>



        <comment type="block" pos:start="191:9" pos:end="199:11">/* Compressed blocks should be smaller than the uncompressed block size

         * but maybe compression performed poorly so the compressed block is

         * actually bigger.  Clamp down on unrealistic values to prevent

         * ridiculous s-&gt;compressed_block allocation.

         */</comment>

        <if_stmt pos:start="201:9" pos:end="211:9"><if pos:start="201:9" pos:end="211:9">if <condition pos:start="201:12" pos:end="201:38">(<expr pos:start="201:13" pos:end="201:37"><name pos:start="201:13" pos:end="201:16">size</name> <operator pos:start="201:18" pos:end="201:18">&gt;</operator> <literal type="number" pos:start="201:20" pos:end="201:20">2</literal> <operator pos:start="201:22" pos:end="201:22">*</operator> <name pos:start="201:24" pos:end="201:37">MAX_BLOCK_SIZE</name></expr>)</condition> <block pos:start="201:40" pos:end="211:9">{<block_content pos:start="203:13" pos:end="209:22">

            <expr_stmt pos:start="203:13" pos:end="205:53"><expr pos:start="203:13" pos:end="205:52"><call pos:start="203:13" pos:end="205:52"><name pos:start="203:13" pos:end="203:22">error_setg</name><argument_list pos:start="203:23" pos:end="205:52">(<argument pos:start="203:24" pos:end="203:27"><expr pos:start="203:24" pos:end="203:27"><name pos:start="203:24" pos:end="203:27">errp</name></expr></argument>, <argument pos:start="203:30" pos:end="205:48"><expr pos:start="203:30" pos:end="205:48"><literal type="string" pos:start="203:30" pos:end="203:71">"invalid compressed block size at index %"</literal> <name pos:start="203:73" pos:end="203:78">PRIu32</name>

                       <literal type="string" pos:start="205:24" pos:end="205:48">", image file is corrupt"</literal></expr></argument>, <argument pos:start="205:51" pos:end="205:51"><expr pos:start="205:51" pos:end="205:51"><name pos:start="205:51" pos:end="205:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:26"><expr pos:start="207:13" pos:end="207:25"><name pos:start="207:13" pos:end="207:15">ret</name> <operator pos:start="207:17" pos:end="207:17">=</operator> <operator pos:start="207:19" pos:end="207:19">-</operator><name pos:start="207:20" pos:end="207:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="209:13" pos:end="209:22">goto <name pos:start="209:18" pos:end="209:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="215:9" pos:end="219:9"><if pos:start="215:9" pos:end="219:9">if <condition pos:start="215:12" pos:end="215:45">(<expr pos:start="215:13" pos:end="215:44"><name pos:start="215:13" pos:end="215:16">size</name> <operator pos:start="215:18" pos:end="215:18">&gt;</operator> <name pos:start="215:20" pos:end="215:44">max_compressed_block_size</name></expr>)</condition> <block pos:start="215:47" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:45">

            <expr_stmt pos:start="217:13" pos:end="217:45"><expr pos:start="217:13" pos:end="217:44"><name pos:start="217:13" pos:end="217:37">max_compressed_block_size</name> <operator pos:start="217:39" pos:end="217:39">=</operator> <name pos:start="217:41" pos:end="217:44">size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="225:5" pos:end="225:32">/* initialize zlib engine */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:70"><expr pos:start="227:5" pos:end="227:69"><name pos:start="227:5" pos:end="227:23"><name pos:start="227:5" pos:end="227:5">s</name><operator pos:start="227:6" pos:end="227:7">-&gt;</operator><name pos:start="227:8" pos:end="227:23">compressed_block</name></name> <operator pos:start="227:25" pos:end="227:25">=</operator> <call pos:start="227:27" pos:end="227:69"><name pos:start="227:27" pos:end="227:38">g_try_malloc</name><argument_list pos:start="227:39" pos:end="227:69">(<argument pos:start="227:40" pos:end="227:68"><expr pos:start="227:40" pos:end="227:68"><name pos:start="227:40" pos:end="227:64">max_compressed_block_size</name> <operator pos:start="227:66" pos:end="227:66">+</operator> <literal type="number" pos:start="227:68" pos:end="227:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="237:5"><if pos:start="229:5" pos:end="237:5">if <condition pos:start="229:8" pos:end="229:36">(<expr pos:start="229:9" pos:end="229:35"><name pos:start="229:9" pos:end="229:27"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:27">compressed_block</name></name> <operator pos:start="229:29" pos:end="229:30">==</operator> <name pos:start="229:32" pos:end="229:35">NULL</name></expr>)</condition> <block pos:start="229:38" pos:end="237:5">{<block_content pos:start="231:9" pos:end="235:18">

        <expr_stmt pos:start="231:9" pos:end="231:64"><expr pos:start="231:9" pos:end="231:63"><call pos:start="231:9" pos:end="231:63"><name pos:start="231:9" pos:end="231:18">error_setg</name><argument_list pos:start="231:19" pos:end="231:63">(<argument pos:start="231:20" pos:end="231:23"><expr pos:start="231:20" pos:end="231:23"><name pos:start="231:20" pos:end="231:23">errp</name></expr></argument>, <argument pos:start="231:26" pos:end="231:62"><expr pos:start="231:26" pos:end="231:62"><literal type="string" pos:start="231:26" pos:end="231:62">"Could not allocate compressed_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:22"><expr pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:11">ret</name> <operator pos:start="233:13" pos:end="233:13">=</operator> <operator pos:start="233:15" pos:end="233:15">-</operator><name pos:start="233:16" pos:end="233:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="235:9" pos:end="235:18">goto <name pos:start="235:14" pos:end="235:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="241:5" pos:end="241:56"><expr pos:start="241:5" pos:end="241:55"><name pos:start="241:5" pos:end="241:25"><name pos:start="241:5" pos:end="241:5">s</name><operator pos:start="241:6" pos:end="241:7">-&gt;</operator><name pos:start="241:8" pos:end="241:25">uncompressed_block</name></name> <operator pos:start="241:27" pos:end="241:27">=</operator> <call pos:start="241:29" pos:end="241:55"><name pos:start="241:29" pos:end="241:40">g_try_malloc</name><argument_list pos:start="241:41" pos:end="241:55">(<argument pos:start="241:42" pos:end="241:54"><expr pos:start="241:42" pos:end="241:54"><name pos:start="241:42" pos:end="241:54"><name pos:start="241:42" pos:end="241:42">s</name><operator pos:start="241:43" pos:end="241:44">-&gt;</operator><name pos:start="241:45" pos:end="241:54">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="251:5"><if pos:start="243:5" pos:end="251:5">if <condition pos:start="243:8" pos:end="243:38">(<expr pos:start="243:9" pos:end="243:37"><name pos:start="243:9" pos:end="243:29"><name pos:start="243:9" pos:end="243:9">s</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:29">uncompressed_block</name></name> <operator pos:start="243:31" pos:end="243:32">==</operator> <name pos:start="243:34" pos:end="243:37">NULL</name></expr>)</condition> <block pos:start="243:40" pos:end="251:5">{<block_content pos:start="245:9" pos:end="249:18">

        <expr_stmt pos:start="245:9" pos:end="245:66"><expr pos:start="245:9" pos:end="245:65"><call pos:start="245:9" pos:end="245:65"><name pos:start="245:9" pos:end="245:18">error_setg</name><argument_list pos:start="245:19" pos:end="245:65">(<argument pos:start="245:20" pos:end="245:23"><expr pos:start="245:20" pos:end="245:23"><name pos:start="245:20" pos:end="245:23">errp</name></expr></argument>, <argument pos:start="245:26" pos:end="245:64"><expr pos:start="245:26" pos:end="245:64"><literal type="string" pos:start="245:26" pos:end="245:64">"Could not allocate uncompressed_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:22"><expr pos:start="247:9" pos:end="247:21"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <operator pos:start="247:15" pos:end="247:15">-</operator><name pos:start="247:16" pos:end="247:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="249:9" pos:end="249:18">goto <name pos:start="249:14" pos:end="249:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="255:5" pos:end="261:5"><if pos:start="255:5" pos:end="261:5">if <condition pos:start="255:8" pos:end="255:41">(<expr pos:start="255:9" pos:end="255:40"><call pos:start="255:9" pos:end="255:32"><name pos:start="255:9" pos:end="255:19">inflateInit</name><argument_list pos:start="255:20" pos:end="255:32">(<argument pos:start="255:21" pos:end="255:31"><expr pos:start="255:21" pos:end="255:31"><operator pos:start="255:21" pos:end="255:21">&amp;</operator><name pos:start="255:22" pos:end="255:31"><name pos:start="255:22" pos:end="255:22">s</name><operator pos:start="255:23" pos:end="255:24">-&gt;</operator><name pos:start="255:25" pos:end="255:31">zstream</name></name></expr></argument>)</argument_list></call> <operator pos:start="255:34" pos:end="255:35">!=</operator> <name pos:start="255:37" pos:end="255:40">Z_OK</name></expr>)</condition> <block pos:start="255:43" pos:end="261:5">{<block_content pos:start="257:9" pos:end="259:18">

        <expr_stmt pos:start="257:9" pos:end="257:22"><expr pos:start="257:9" pos:end="257:21"><name pos:start="257:9" pos:end="257:11">ret</name> <operator pos:start="257:13" pos:end="257:13">=</operator> <operator pos:start="257:15" pos:end="257:15">-</operator><name pos:start="257:16" pos:end="257:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="259:9" pos:end="259:18">goto <name pos:start="259:14" pos:end="259:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:35"><expr pos:start="263:5" pos:end="263:34"><name pos:start="263:5" pos:end="263:20"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:20">current_block</name></name> <operator pos:start="263:22" pos:end="263:22">=</operator> <name pos:start="263:24" pos:end="263:34"><name pos:start="263:24" pos:end="263:24">s</name><operator pos:start="263:25" pos:end="263:26">-&gt;</operator><name pos:start="263:27" pos:end="263:34">n_blocks</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:45"><expr pos:start="267:5" pos:end="267:44"><name pos:start="267:5" pos:end="267:24"><name pos:start="267:5" pos:end="267:5">s</name><operator pos:start="267:6" pos:end="267:7">-&gt;</operator><name pos:start="267:8" pos:end="267:24">sectors_per_block</name></name> <operator pos:start="267:26" pos:end="267:26">=</operator> <name pos:start="267:28" pos:end="267:40"><name pos:start="267:28" pos:end="267:28">s</name><operator pos:start="267:29" pos:end="267:30">-&gt;</operator><name pos:start="267:31" pos:end="267:40">block_size</name></name><operator pos:start="267:41" pos:end="267:41">/</operator><literal type="number" pos:start="267:42" pos:end="267:44">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:59"><expr pos:start="269:5" pos:end="269:58"><name pos:start="269:5" pos:end="269:21"><name pos:start="269:5" pos:end="269:6">bs</name><operator pos:start="269:7" pos:end="269:8">-&gt;</operator><name pos:start="269:9" pos:end="269:21">total_sectors</name></name> <operator pos:start="269:23" pos:end="269:23">=</operator> <name pos:start="269:25" pos:end="269:35"><name pos:start="269:25" pos:end="269:25">s</name><operator pos:start="269:26" pos:end="269:27">-&gt;</operator><name pos:start="269:28" pos:end="269:35">n_blocks</name></name> <operator pos:start="269:37" pos:end="269:37">*</operator> <name pos:start="269:39" pos:end="269:58"><name pos:start="269:39" pos:end="269:39">s</name><operator pos:start="269:40" pos:end="269:41">-&gt;</operator><name pos:start="269:42" pos:end="269:58">sectors_per_block</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:33"><expr pos:start="271:5" pos:end="271:32"><call pos:start="271:5" pos:end="271:32"><name pos:start="271:5" pos:end="271:22">qemu_co_mutex_init</name><argument_list pos:start="271:23" pos:end="271:32">(<argument pos:start="271:24" pos:end="271:31"><expr pos:start="271:24" pos:end="271:31"><operator pos:start="271:24" pos:end="271:24">&amp;</operator><name pos:start="271:25" pos:end="271:31"><name pos:start="271:25" pos:end="271:25">s</name><operator pos:start="271:26" pos:end="271:27">-&gt;</operator><name pos:start="271:28" pos:end="271:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="273:5" pos:end="273:13">return <expr pos:start="273:12" pos:end="273:12"><literal type="number" pos:start="273:12" pos:end="273:12">0</literal></expr>;</return>



<label pos:start="277:1" pos:end="277:5"><name pos:start="277:1" pos:end="277:4">fail</name>:</label>

    <expr_stmt pos:start="279:5" pos:end="279:23"><expr pos:start="279:5" pos:end="279:22"><call pos:start="279:5" pos:end="279:22"><name pos:start="279:5" pos:end="279:10">g_free</name><argument_list pos:start="279:11" pos:end="279:22">(<argument pos:start="279:12" pos:end="279:21"><expr pos:start="279:12" pos:end="279:21"><name pos:start="279:12" pos:end="279:21"><name pos:start="279:12" pos:end="279:12">s</name><operator pos:start="279:13" pos:end="279:14">-&gt;</operator><name pos:start="279:15" pos:end="279:21">offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:32"><expr pos:start="281:5" pos:end="281:31"><call pos:start="281:5" pos:end="281:31"><name pos:start="281:5" pos:end="281:10">g_free</name><argument_list pos:start="281:11" pos:end="281:31">(<argument pos:start="281:12" pos:end="281:30"><expr pos:start="281:12" pos:end="281:30"><name pos:start="281:12" pos:end="281:30"><name pos:start="281:12" pos:end="281:12">s</name><operator pos:start="281:13" pos:end="281:14">-&gt;</operator><name pos:start="281:15" pos:end="281:30">compressed_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:34"><expr pos:start="283:5" pos:end="283:33"><call pos:start="283:5" pos:end="283:33"><name pos:start="283:5" pos:end="283:10">g_free</name><argument_list pos:start="283:11" pos:end="283:33">(<argument pos:start="283:12" pos:end="283:32"><expr pos:start="283:12" pos:end="283:32"><name pos:start="283:12" pos:end="283:32"><name pos:start="283:12" pos:end="283:12">s</name><operator pos:start="283:13" pos:end="283:14">-&gt;</operator><name pos:start="283:15" pos:end="283:32">uncompressed_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="285:5" pos:end="285:15">return <expr pos:start="285:12" pos:end="285:14"><name pos:start="285:12" pos:end="285:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
