<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16742.c" pos:tabs="8"><function pos:start="1:1" pos:end="379:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:23">do_csst</name><parameter_list pos:start="1:24" pos:end="3:51">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:37">CPUS390XState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">env</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:52">uint32_t</name></type> <name pos:start="1:54" pos:end="1:55">r3</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:68"><decl pos:start="1:58" pos:end="1:68"><type pos:start="1:58" pos:end="1:68"><name pos:start="1:58" pos:end="1:65">uint64_t</name></type> <name pos:start="1:67" pos:end="1:68">a1</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:35"><decl pos:start="3:25" pos:end="3:35"><type pos:start="3:25" pos:end="3:35"><name pos:start="3:25" pos:end="3:32">uint64_t</name></type> <name pos:start="3:34" pos:end="3:35">a2</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:50"><decl pos:start="3:38" pos:end="3:50"><type pos:start="3:38" pos:end="3:50"><name pos:start="3:38" pos:end="3:41">bool</name></type> <name pos:start="3:43" pos:end="3:50">parallel</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="379:1">{<block_content pos:start="9:5" pos:end="377:27">

<cpp:if pos:start="7:1" pos:end="7:59">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:59"><operator pos:start="7:5" pos:end="7:5">!</operator><call pos:start="7:6" pos:end="7:30"><name pos:start="7:6" pos:end="7:12">defined</name><argument_list pos:start="7:13" pos:end="7:30">(<argument pos:start="7:14" pos:end="7:29"><expr pos:start="7:14" pos:end="7:29"><name pos:start="7:14" pos:end="7:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="7:32" pos:end="7:33">||</operator> <call pos:start="7:35" pos:end="7:59"><name pos:start="7:35" pos:end="7:41">defined</name><argument_list pos:start="7:42" pos:end="7:59">(<argument pos:start="7:43" pos:end="7:58"><expr pos:start="7:43" pos:end="7:58"><name pos:start="7:43" pos:end="7:58">CONFIG_ATOMIC128</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:20">mem_idx</name> <init pos:start="9:22" pos:end="9:48">= <expr pos:start="9:24" pos:end="9:48"><call pos:start="9:24" pos:end="9:48"><name pos:start="9:24" pos:end="9:36">cpu_mmu_index</name><argument_list pos:start="9:37" pos:end="9:48">(<argument pos:start="9:38" pos:end="9:40"><expr pos:start="9:38" pos:end="9:40"><name pos:start="9:38" pos:end="9:40">env</name></expr></argument>, <argument pos:start="9:43" pos:end="9:47"><expr pos:start="9:43" pos:end="9:47"><name pos:start="9:43" pos:end="9:47">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">uintptr_t</name></type> <name pos:start="13:15" pos:end="13:16">ra</name> <init pos:start="13:18" pos:end="13:26">= <expr pos:start="13:20" pos:end="13:26"><call pos:start="13:20" pos:end="13:26"><name pos:start="13:20" pos:end="13:24">GETPC</name><argument_list pos:start="13:25" pos:end="13:26">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:15">fc</name> <init pos:start="15:17" pos:end="15:47">= <expr pos:start="15:19" pos:end="15:47"><call pos:start="15:19" pos:end="15:47"><name pos:start="15:19" pos:end="15:27">extract32</name><argument_list pos:start="15:28" pos:end="15:47">(<argument pos:start="15:29" pos:end="15:40"><expr pos:start="15:29" pos:end="15:40"><name pos:start="15:29" pos:end="15:40"><name pos:start="15:29" pos:end="15:31">env</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:37">regs</name><index pos:start="15:38" pos:end="15:40">[<expr pos:start="15:39" pos:end="15:39"><literal type="number" pos:start="15:39" pos:end="15:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="15:43" pos:end="15:43"><expr pos:start="15:43" pos:end="15:43"><literal type="number" pos:start="15:43" pos:end="15:43">0</literal></expr></argument>, <argument pos:start="15:46" pos:end="15:46"><expr pos:start="15:46" pos:end="15:46"><literal type="number" pos:start="15:46" pos:end="15:46">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:48"><decl pos:start="17:5" pos:end="17:47"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:15">sc</name> <init pos:start="17:17" pos:end="17:47">= <expr pos:start="17:19" pos:end="17:47"><call pos:start="17:19" pos:end="17:47"><name pos:start="17:19" pos:end="17:27">extract32</name><argument_list pos:start="17:28" pos:end="17:47">(<argument pos:start="17:29" pos:end="17:40"><expr pos:start="17:29" pos:end="17:40"><name pos:start="17:29" pos:end="17:40"><name pos:start="17:29" pos:end="17:31">env</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:37">regs</name><index pos:start="17:38" pos:end="17:40">[<expr pos:start="17:39" pos:end="17:39"><literal type="number" pos:start="17:39" pos:end="17:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="17:43" pos:end="17:43"><expr pos:start="17:43" pos:end="17:43"><literal type="number" pos:start="17:43" pos:end="17:43">8</literal></expr></argument>, <argument pos:start="17:46" pos:end="17:46"><expr pos:start="17:46" pos:end="17:46"><literal type="number" pos:start="17:46" pos:end="17:46">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:15">pl</name> <init pos:start="19:17" pos:end="19:43">= <expr pos:start="19:19" pos:end="19:43"><call pos:start="19:19" pos:end="19:37"><name pos:start="19:19" pos:end="19:29">get_address</name><argument_list pos:start="19:30" pos:end="19:37">(<argument pos:start="19:31" pos:end="19:33"><expr pos:start="19:31" pos:end="19:33"><name pos:start="19:31" pos:end="19:33">env</name></expr></argument>, <argument pos:start="19:36" pos:end="19:36"><expr pos:start="19:36" pos:end="19:36"><literal type="number" pos:start="19:36" pos:end="19:36">1</literal></expr></argument>)</argument_list></call> <operator pos:start="19:39" pos:end="19:39">&amp;</operator> <operator pos:start="19:41" pos:end="19:41">-</operator><literal type="number" pos:start="19:42" pos:end="19:43">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:16">svh</name></decl>, <decl pos:start="21:19" pos:end="21:21"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:19" pos:end="21:21">svl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:15">cc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:69">/* Sanity check the function code and storage characteristic.  */</comment>

    <if_stmt pos:start="29:5" pos:end="43:5"><if pos:start="29:5" pos:end="43:5">if <condition pos:start="29:8" pos:end="29:25">(<expr pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:10">fc</name> <operator pos:start="29:12" pos:end="29:12">&gt;</operator> <literal type="number" pos:start="29:14" pos:end="29:14">1</literal> <operator pos:start="29:16" pos:end="29:17">||</operator> <name pos:start="29:19" pos:end="29:20">sc</name> <operator pos:start="29:22" pos:end="29:22">&gt;</operator> <literal type="number" pos:start="29:24" pos:end="29:24">3</literal></expr>)</condition> <block pos:start="29:27" pos:end="43:5">{<block_content pos:start="31:9" pos:end="41:9">

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:67">(<expr pos:start="31:13" pos:end="31:66"><operator pos:start="31:13" pos:end="31:13">!</operator><call pos:start="31:14" pos:end="31:66"><name pos:start="31:14" pos:end="31:26">s390_has_feat</name><argument_list pos:start="31:27" pos:end="31:66">(<argument pos:start="31:28" pos:end="31:65"><expr pos:start="31:28" pos:end="31:65"><name pos:start="31:28" pos:end="31:65">S390_FEAT_COMPARE_AND_SWAP_AND_STORE_2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:69" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:32">

            <goto pos:start="33:13" pos:end="33:32">goto <name pos:start="33:18" pos:end="33:31">spec_exception</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:54">(<expr pos:start="37:13" pos:end="37:53"><name pos:start="37:13" pos:end="37:14">fc</name> <operator pos:start="37:16" pos:end="37:16">&gt;</operator> <literal type="number" pos:start="37:18" pos:end="37:18">2</literal> <operator pos:start="37:20" pos:end="37:21">||</operator> <name pos:start="37:23" pos:end="37:24">sc</name> <operator pos:start="37:26" pos:end="37:26">&gt;</operator> <literal type="number" pos:start="37:28" pos:end="37:28">4</literal> <operator pos:start="37:30" pos:end="37:31">||</operator> <operator pos:start="37:33" pos:end="37:33">(</operator><name pos:start="37:34" pos:end="37:35">fc</name> <operator pos:start="37:37" pos:end="37:38">==</operator> <literal type="number" pos:start="37:40" pos:end="37:40">2</literal> <operator pos:start="37:42" pos:end="37:43">&amp;&amp;</operator> <operator pos:start="37:45" pos:end="37:45">(</operator><name pos:start="37:46" pos:end="37:47">r3</name> <operator pos:start="37:49" pos:end="37:49">&amp;</operator> <literal type="number" pos:start="37:51" pos:end="37:51">1</literal><operator pos:start="37:52" pos:end="37:52">)</operator><operator pos:start="37:53" pos:end="37:53">)</operator></expr>)</condition> <block pos:start="37:56" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:32">

            <goto pos:start="39:13" pos:end="39:32">goto <name pos:start="39:18" pos:end="39:31">spec_exception</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:39">/* Sanity check the alignments.  */</comment>

    <if_stmt pos:start="49:5" pos:end="60:0"><if pos:start="49:5" pos:end="60:0">if <condition pos:start="49:8" pos:end="49:63">(<expr pos:start="49:9" pos:end="49:62"><call pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:17">extract32</name><argument_list pos:start="49:18" pos:end="49:33">(<argument pos:start="49:19" pos:end="49:20"><expr pos:start="49:19" pos:end="49:20"><name pos:start="49:19" pos:end="49:20">a1</name></expr></argument>, <argument pos:start="49:23" pos:end="49:23"><expr pos:start="49:23" pos:end="49:23"><literal type="number" pos:start="49:23" pos:end="49:23">0</literal></expr></argument>, <argument pos:start="49:26" pos:end="49:32"><expr pos:start="49:26" pos:end="49:32"><literal type="number" pos:start="49:26" pos:end="49:26">4</literal> <operator pos:start="49:28" pos:end="49:29">&lt;&lt;</operator> <name pos:start="49:31" pos:end="49:32">fc</name></expr></argument>)</argument_list></call> <operator pos:start="49:35" pos:end="49:36">||</operator> <call pos:start="49:38" pos:end="49:62"><name pos:start="49:38" pos:end="49:46">extract32</name><argument_list pos:start="49:47" pos:end="49:62">(<argument pos:start="49:48" pos:end="49:49"><expr pos:start="49:48" pos:end="49:49"><name pos:start="49:48" pos:end="49:49">a2</name></expr></argument>, <argument pos:start="49:52" pos:end="49:52"><expr pos:start="49:52" pos:end="49:52"><literal type="number" pos:start="49:52" pos:end="49:52">0</literal></expr></argument>, <argument pos:start="49:55" pos:end="49:61"><expr pos:start="49:55" pos:end="49:61"><literal type="number" pos:start="49:55" pos:end="49:55">1</literal> <operator pos:start="49:57" pos:end="49:58">&lt;&lt;</operator> <name pos:start="49:60" pos:end="49:61">sc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:65" pos:end="60:0">{<block_content pos:start="51:9" pos:end="51:28">

        <goto pos:start="51:9" pos:end="51:28">goto <name pos:start="51:14" pos:end="51:27">spec_exception</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:57">/* Sanity check writability of the store address.  */</comment>

<cpp:ifndef pos:start="59:1" pos:end="59:24">#<cpp:directive pos:start="59:2" pos:end="59:7">ifndef</cpp:directive> <name pos:start="59:9" pos:end="59:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:37"><call pos:start="61:5" pos:end="61:37"><name pos:start="61:5" pos:end="61:15">probe_write</name><argument_list pos:start="61:16" pos:end="61:37">(<argument pos:start="61:17" pos:end="61:19"><expr pos:start="61:17" pos:end="61:19"><name pos:start="61:17" pos:end="61:19">env</name></expr></argument>, <argument pos:start="61:22" pos:end="61:23"><expr pos:start="61:22" pos:end="61:23"><name pos:start="61:22" pos:end="61:23">a2</name></expr></argument>, <argument pos:start="61:26" pos:end="61:32"><expr pos:start="61:26" pos:end="61:32"><name pos:start="61:26" pos:end="61:32">mem_idx</name></expr></argument>, <argument pos:start="61:35" pos:end="61:36"><expr pos:start="61:35" pos:end="61:36"><name pos:start="61:35" pos:end="61:36">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="67:5" pos:end="73:66">/* Note that the compare-and-swap is atomic, and the store is atomic, but

       the complete operation is not.  Therefore we do not need to assert serial

       context in order to implement this.  That said, restart early if we can't

       support either operation that is supposed to be atomic.  */</comment>

    <if_stmt pos:start="75:5" pos:end="95:5"><if pos:start="75:5" pos:end="95:5">if <condition pos:start="75:8" pos:end="75:17">(<expr pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:16">parallel</name></expr>)</condition> <block pos:start="75:19" pos:end="95:5">{<block_content pos:start="77:9" pos:end="93:9">

        <decl_stmt pos:start="77:9" pos:end="80:0"><decl pos:start="77:9" pos:end="77:20"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:16">mask</name> <init pos:start="77:18" pos:end="77:20">= <expr pos:start="77:20" pos:end="77:20"><literal type="number" pos:start="77:20" pos:end="77:20">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="79:1" pos:end="79:29">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:29"><operator pos:start="79:5" pos:end="79:5">!</operator><call pos:start="79:6" pos:end="79:29"><name pos:start="79:6" pos:end="79:12">defined</name><argument_list pos:start="79:13" pos:end="79:29">(<argument pos:start="79:14" pos:end="79:28"><expr pos:start="79:14" pos:end="79:28"><name pos:start="79:14" pos:end="79:28">CONFIG_ATOMIC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="81:9" pos:end="84:0"><expr pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:12">mask</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">8</literal></expr>;</expr_stmt>

<cpp:elif pos:start="83:1" pos:end="83:32">#<cpp:directive pos:start="83:2" pos:end="83:5">elif</cpp:directive> <expr pos:start="83:7" pos:end="83:32"><operator pos:start="83:7" pos:end="83:7">!</operator><call pos:start="83:8" pos:end="83:32"><name pos:start="83:8" pos:end="83:14">defined</name><argument_list pos:start="83:15" pos:end="83:32">(<argument pos:start="83:16" pos:end="83:31"><expr pos:start="83:16" pos:end="83:31"><name pos:start="83:16" pos:end="83:31">CONFIG_ATOMIC128</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="85:9" pos:end="88:0"><expr pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:12">mask</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <operator pos:start="85:16" pos:end="85:16">-</operator><literal type="number" pos:start="85:17" pos:end="85:18">16</literal></expr>;</expr_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:43">(<expr pos:start="89:13" pos:end="89:42"><operator pos:start="89:13" pos:end="89:13">(</operator><operator pos:start="89:14" pos:end="89:14">(</operator><literal type="number" pos:start="89:15" pos:end="89:15">4</literal> <operator pos:start="89:17" pos:end="89:18">&lt;&lt;</operator> <name pos:start="89:20" pos:end="89:21">fc</name><operator pos:start="89:22" pos:end="89:22">)</operator> <operator pos:start="89:24" pos:end="89:24">|</operator> <operator pos:start="89:26" pos:end="89:26">(</operator><literal type="number" pos:start="89:27" pos:end="89:27">1</literal> <operator pos:start="89:29" pos:end="89:30">&lt;&lt;</operator> <name pos:start="89:32" pos:end="89:33">sc</name><operator pos:start="89:34" pos:end="89:34">)</operator><operator pos:start="89:35" pos:end="89:35">)</operator> <operator pos:start="89:37" pos:end="89:37">&amp;</operator> <name pos:start="89:39" pos:end="89:42">mask</name></expr>)</condition> <block pos:start="89:45" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:55">

            <expr_stmt pos:start="91:13" pos:end="91:55"><expr pos:start="91:13" pos:end="91:54"><call pos:start="91:13" pos:end="91:54"><name pos:start="91:13" pos:end="91:32">cpu_loop_exit_atomic</name><argument_list pos:start="91:33" pos:end="91:54">(<argument pos:start="91:34" pos:end="91:49"><expr pos:start="91:34" pos:end="91:49"><call pos:start="91:34" pos:end="91:49"><name pos:start="91:34" pos:end="91:44">ENV_GET_CPU</name><argument_list pos:start="91:45" pos:end="91:49">(<argument pos:start="91:46" pos:end="91:48"><expr pos:start="91:46" pos:end="91:48"><name pos:start="91:46" pos:end="91:48">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="91:52" pos:end="91:53"><expr pos:start="91:52" pos:end="91:53"><name pos:start="91:52" pos:end="91:53">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="101:52">/* All loads happen before all stores.  For simplicity, load the entire

       store value area from the parameter list.  */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:44"><expr pos:start="103:5" pos:end="103:43"><name pos:start="103:5" pos:end="103:7">svh</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="103:43"><name pos:start="103:11" pos:end="103:25">cpu_ldq_data_ra</name><argument_list pos:start="103:26" pos:end="103:43">(<argument pos:start="103:27" pos:end="103:29"><expr pos:start="103:27" pos:end="103:29"><name pos:start="103:27" pos:end="103:29">env</name></expr></argument>, <argument pos:start="103:32" pos:end="103:38"><expr pos:start="103:32" pos:end="103:38"><name pos:start="103:32" pos:end="103:33">pl</name> <operator pos:start="103:35" pos:end="103:35">+</operator> <literal type="number" pos:start="103:37" pos:end="103:38">16</literal></expr></argument>, <argument pos:start="103:41" pos:end="103:42"><expr pos:start="103:41" pos:end="103:42"><name pos:start="103:41" pos:end="103:42">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:44"><expr pos:start="105:5" pos:end="105:43"><name pos:start="105:5" pos:end="105:7">svl</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:43"><name pos:start="105:11" pos:end="105:25">cpu_ldq_data_ra</name><argument_list pos:start="105:26" pos:end="105:43">(<argument pos:start="105:27" pos:end="105:29"><expr pos:start="105:27" pos:end="105:29"><name pos:start="105:27" pos:end="105:29">env</name></expr></argument>, <argument pos:start="105:32" pos:end="105:38"><expr pos:start="105:32" pos:end="105:38"><name pos:start="105:32" pos:end="105:33">pl</name> <operator pos:start="105:35" pos:end="105:35">+</operator> <literal type="number" pos:start="105:37" pos:end="105:38">24</literal></expr></argument>, <argument pos:start="105:41" pos:end="105:42"><expr pos:start="105:41" pos:end="105:42"><name pos:start="105:41" pos:end="105:42">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="109:5" pos:end="289:5">switch <condition pos:start="109:12" pos:end="109:15">(<expr pos:start="109:13" pos:end="109:14"><name pos:start="109:13" pos:end="109:14">fc</name></expr>)</condition> <block pos:start="109:17" pos:end="289:5">{<block_content pos:start="111:5" pos:end="287:31">

    <case pos:start="111:5" pos:end="111:11">case <expr pos:start="111:10" pos:end="111:10"><literal type="number" pos:start="111:10" pos:end="111:10">0</literal></expr>:</case>

        <block pos:start="113:9" pos:end="151:9">{<block_content pos:start="115:13" pos:end="149:65">

            <decl_stmt pos:start="115:13" pos:end="115:55"><decl pos:start="115:13" pos:end="115:54"><type pos:start="115:13" pos:end="115:20"><name pos:start="115:13" pos:end="115:20">uint32_t</name></type> <name pos:start="115:22" pos:end="115:23">nv</name> <init pos:start="115:25" pos:end="115:54">= <expr pos:start="115:27" pos:end="115:54"><call pos:start="115:27" pos:end="115:54"><name pos:start="115:27" pos:end="115:41">cpu_ldl_data_ra</name><argument_list pos:start="115:42" pos:end="115:54">(<argument pos:start="115:43" pos:end="115:45"><expr pos:start="115:43" pos:end="115:45"><name pos:start="115:43" pos:end="115:45">env</name></expr></argument>, <argument pos:start="115:48" pos:end="115:49"><expr pos:start="115:48" pos:end="115:49"><name pos:start="115:48" pos:end="115:49">pl</name></expr></argument>, <argument pos:start="115:52" pos:end="115:53"><expr pos:start="115:52" pos:end="115:53"><name pos:start="115:52" pos:end="115:53">ra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="117:13" pos:end="117:40"><decl pos:start="117:13" pos:end="117:39"><type pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:20">uint32_t</name></type> <name pos:start="117:22" pos:end="117:23">cv</name> <init pos:start="117:25" pos:end="117:39">= <expr pos:start="117:27" pos:end="117:39"><name pos:start="117:27" pos:end="117:39"><name pos:start="117:27" pos:end="117:29">env</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:35">regs</name><index pos:start="117:36" pos:end="117:39">[<expr pos:start="117:37" pos:end="117:38"><name pos:start="117:37" pos:end="117:38">r3</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="119:13" pos:end="119:24"><decl pos:start="119:13" pos:end="119:23"><type pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:20">uint32_t</name></type> <name pos:start="119:22" pos:end="119:23">ov</name></decl>;</decl_stmt>



            <if_stmt pos:start="123:13" pos:end="145:13"><if pos:start="123:13" pos:end="139:13">if <condition pos:start="123:16" pos:end="123:25">(<expr pos:start="123:17" pos:end="123:24"><name pos:start="123:17" pos:end="123:24">parallel</name></expr>)</condition> <block pos:start="123:27" pos:end="139:13">{<block_content pos:start="127:17" pos:end="138:0">

<cpp:ifdef pos:start="125:1" pos:end="125:23">#<cpp:directive pos:start="125:2" pos:end="125:6">ifdef</cpp:directive> <name pos:start="125:8" pos:end="125:23">CONFIG_USER_ONLY</name></cpp:ifdef>

                <decl_stmt pos:start="127:17" pos:end="127:42"><decl pos:start="127:17" pos:end="127:41"><type pos:start="127:17" pos:end="127:26"><name pos:start="127:17" pos:end="127:24">uint32_t</name> <modifier pos:start="127:26" pos:end="127:26">*</modifier></type><name pos:start="127:27" pos:end="127:31">haddr</name> <init pos:start="127:33" pos:end="127:41">= <expr pos:start="127:35" pos:end="127:41"><call pos:start="127:35" pos:end="127:41"><name pos:start="127:35" pos:end="127:37">g2h</name><argument_list pos:start="127:38" pos:end="127:41">(<argument pos:start="127:39" pos:end="127:40"><expr pos:start="127:39" pos:end="127:40"><name pos:start="127:39" pos:end="127:40">a1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="129:17" pos:end="132:0"><expr pos:start="129:17" pos:end="129:59"><name pos:start="129:17" pos:end="129:18">ov</name> <operator pos:start="129:20" pos:end="129:20">=</operator> <call pos:start="129:22" pos:end="129:59"><name pos:start="129:22" pos:end="129:44">atomic_cmpxchg__nocheck</name><argument_list pos:start="129:45" pos:end="129:59">(<argument pos:start="129:46" pos:end="129:50"><expr pos:start="129:46" pos:end="129:50"><name pos:start="129:46" pos:end="129:50">haddr</name></expr></argument>, <argument pos:start="129:53" pos:end="129:54"><expr pos:start="129:53" pos:end="129:54"><name pos:start="129:53" pos:end="129:54">cv</name></expr></argument>, <argument pos:start="129:57" pos:end="129:58"><expr pos:start="129:57" pos:end="129:58"><name pos:start="129:57" pos:end="129:58">nv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="131:1" pos:end="131:5">#<cpp:directive pos:start="131:2" pos:end="131:5">else</cpp:directive></cpp:else>

                <decl_stmt pos:start="133:17" pos:end="133:77"><decl pos:start="133:17" pos:end="133:76"><type pos:start="133:17" pos:end="133:27"><name pos:start="133:17" pos:end="133:27">TCGMemOpIdx</name></type> <name pos:start="133:29" pos:end="133:30">oi</name> <init pos:start="133:32" pos:end="133:76">= <expr pos:start="133:34" pos:end="133:76"><call pos:start="133:34" pos:end="133:76"><name pos:start="133:34" pos:end="133:47">make_memop_idx</name><argument_list pos:start="133:48" pos:end="133:76">(<argument pos:start="133:49" pos:end="133:66"><expr pos:start="133:49" pos:end="133:66"><name pos:start="133:49" pos:end="133:55">MO_TEUL</name> <operator pos:start="133:57" pos:end="133:57">|</operator> <name pos:start="133:59" pos:end="133:66">MO_ALIGN</name></expr></argument>, <argument pos:start="133:69" pos:end="133:75"><expr pos:start="133:69" pos:end="133:75"><name pos:start="133:69" pos:end="133:75">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="135:17" pos:end="138:0"><expr pos:start="135:17" pos:end="135:75"><name pos:start="135:17" pos:end="135:18">ov</name> <operator pos:start="135:20" pos:end="135:20">=</operator> <call pos:start="135:22" pos:end="135:75"><name pos:start="135:22" pos:end="135:50">helper_atomic_cmpxchgl_be_mmu</name><argument_list pos:start="135:51" pos:end="135:75">(<argument pos:start="135:52" pos:end="135:54"><expr pos:start="135:52" pos:end="135:54"><name pos:start="135:52" pos:end="135:54">env</name></expr></argument>, <argument pos:start="135:57" pos:end="135:58"><expr pos:start="135:57" pos:end="135:58"><name pos:start="135:57" pos:end="135:58">a1</name></expr></argument>, <argument pos:start="135:61" pos:end="135:62"><expr pos:start="135:61" pos:end="135:62"><name pos:start="135:61" pos:end="135:62">cv</name></expr></argument>, <argument pos:start="135:65" pos:end="135:66"><expr pos:start="135:65" pos:end="135:66"><name pos:start="135:65" pos:end="135:66">nv</name></expr></argument>, <argument pos:start="135:69" pos:end="135:70"><expr pos:start="135:69" pos:end="135:70"><name pos:start="135:69" pos:end="135:70">oi</name></expr></argument>, <argument pos:start="135:73" pos:end="135:74"><expr pos:start="135:73" pos:end="135:74"><name pos:start="135:73" pos:end="135:74">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="139:15" pos:end="145:13">else <block pos:start="139:20" pos:end="145:13">{<block_content pos:start="141:17" pos:end="143:67">

                <expr_stmt pos:start="141:17" pos:end="141:50"><expr pos:start="141:17" pos:end="141:49"><name pos:start="141:17" pos:end="141:18">ov</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <call pos:start="141:22" pos:end="141:49"><name pos:start="141:22" pos:end="141:36">cpu_ldl_data_ra</name><argument_list pos:start="141:37" pos:end="141:49">(<argument pos:start="141:38" pos:end="141:40"><expr pos:start="141:38" pos:end="141:40"><name pos:start="141:38" pos:end="141:40">env</name></expr></argument>, <argument pos:start="141:43" pos:end="141:44"><expr pos:start="141:43" pos:end="141:44"><name pos:start="141:43" pos:end="141:44">a1</name></expr></argument>, <argument pos:start="141:47" pos:end="141:48"><expr pos:start="141:47" pos:end="141:48"><name pos:start="141:47" pos:end="141:48">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:67"><expr pos:start="143:17" pos:end="143:66"><call pos:start="143:17" pos:end="143:66"><name pos:start="143:17" pos:end="143:31">cpu_stl_data_ra</name><argument_list pos:start="143:32" pos:end="143:66">(<argument pos:start="143:33" pos:end="143:35"><expr pos:start="143:33" pos:end="143:35"><name pos:start="143:33" pos:end="143:35">env</name></expr></argument>, <argument pos:start="143:38" pos:end="143:39"><expr pos:start="143:38" pos:end="143:39"><name pos:start="143:38" pos:end="143:39">a1</name></expr></argument>, <argument pos:start="143:42" pos:end="143:61"><expr pos:start="143:42" pos:end="143:61"><operator pos:start="143:42" pos:end="143:42">(</operator><ternary pos:start="143:43" pos:end="143:60"><condition pos:start="143:43" pos:end="143:52"><expr pos:start="143:43" pos:end="143:50"><name pos:start="143:43" pos:end="143:44">ov</name> <operator pos:start="143:46" pos:end="143:47">==</operator> <name pos:start="143:49" pos:end="143:50">cv</name></expr> ?</condition><then pos:start="143:54" pos:end="143:55"> <expr pos:start="143:54" pos:end="143:55"><name pos:start="143:54" pos:end="143:55">nv</name></expr> </then><else pos:start="143:57" pos:end="143:60">: <expr pos:start="143:59" pos:end="143:60"><name pos:start="143:59" pos:end="143:60">ov</name></expr></else></ternary><operator pos:start="143:61" pos:end="143:61">)</operator></expr></argument>, <argument pos:start="143:64" pos:end="143:65"><expr pos:start="143:64" pos:end="143:65"><name pos:start="143:64" pos:end="143:65">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:28"><expr pos:start="147:13" pos:end="147:27"><name pos:start="147:13" pos:end="147:14">cc</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <operator pos:start="147:18" pos:end="147:18">(</operator><name pos:start="147:19" pos:end="147:20">ov</name> <operator pos:start="147:22" pos:end="147:23">!=</operator> <name pos:start="147:25" pos:end="147:26">cv</name><operator pos:start="147:27" pos:end="147:27">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:65"><expr pos:start="149:13" pos:end="149:64"><name pos:start="149:13" pos:end="149:25"><name pos:start="149:13" pos:end="149:15">env</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:21">regs</name><index pos:start="149:22" pos:end="149:25">[<expr pos:start="149:23" pos:end="149:24"><name pos:start="149:23" pos:end="149:24">r3</name></expr>]</index></name> <operator pos:start="149:27" pos:end="149:27">=</operator> <call pos:start="149:29" pos:end="149:64"><name pos:start="149:29" pos:end="149:37">deposit64</name><argument_list pos:start="149:38" pos:end="149:64">(<argument pos:start="149:39" pos:end="149:51"><expr pos:start="149:39" pos:end="149:51"><name pos:start="149:39" pos:end="149:51"><name pos:start="149:39" pos:end="149:41">env</name><operator pos:start="149:42" pos:end="149:43">-&gt;</operator><name pos:start="149:44" pos:end="149:47">regs</name><index pos:start="149:48" pos:end="149:51">[<expr pos:start="149:49" pos:end="149:50"><name pos:start="149:49" pos:end="149:50">r3</name></expr>]</index></name></expr></argument>, <argument pos:start="149:54" pos:end="149:55"><expr pos:start="149:54" pos:end="149:55"><literal type="number" pos:start="149:54" pos:end="149:55">32</literal></expr></argument>, <argument pos:start="149:58" pos:end="149:59"><expr pos:start="149:58" pos:end="149:59"><literal type="number" pos:start="149:58" pos:end="149:59">32</literal></expr></argument>, <argument pos:start="149:62" pos:end="149:63"><expr pos:start="149:62" pos:end="149:63"><name pos:start="149:62" pos:end="149:63">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="153:9" pos:end="153:14">break;</break>



    <case pos:start="157:5" pos:end="157:11">case <expr pos:start="157:10" pos:end="157:10"><literal type="number" pos:start="157:10" pos:end="157:10">1</literal></expr>:</case>

        <block pos:start="159:9" pos:end="207:9">{<block_content pos:start="161:13" pos:end="205:31">

            <decl_stmt pos:start="161:13" pos:end="161:55"><decl pos:start="161:13" pos:end="161:54"><type pos:start="161:13" pos:end="161:20"><name pos:start="161:13" pos:end="161:20">uint64_t</name></type> <name pos:start="161:22" pos:end="161:23">nv</name> <init pos:start="161:25" pos:end="161:54">= <expr pos:start="161:27" pos:end="161:54"><call pos:start="161:27" pos:end="161:54"><name pos:start="161:27" pos:end="161:41">cpu_ldq_data_ra</name><argument_list pos:start="161:42" pos:end="161:54">(<argument pos:start="161:43" pos:end="161:45"><expr pos:start="161:43" pos:end="161:45"><name pos:start="161:43" pos:end="161:45">env</name></expr></argument>, <argument pos:start="161:48" pos:end="161:49"><expr pos:start="161:48" pos:end="161:49"><name pos:start="161:48" pos:end="161:49">pl</name></expr></argument>, <argument pos:start="161:52" pos:end="161:53"><expr pos:start="161:52" pos:end="161:53"><name pos:start="161:52" pos:end="161:53">ra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="163:13" pos:end="163:40"><decl pos:start="163:13" pos:end="163:39"><type pos:start="163:13" pos:end="163:20"><name pos:start="163:13" pos:end="163:20">uint64_t</name></type> <name pos:start="163:22" pos:end="163:23">cv</name> <init pos:start="163:25" pos:end="163:39">= <expr pos:start="163:27" pos:end="163:39"><name pos:start="163:27" pos:end="163:39"><name pos:start="163:27" pos:end="163:29">env</name><operator pos:start="163:30" pos:end="163:31">-&gt;</operator><name pos:start="163:32" pos:end="163:35">regs</name><index pos:start="163:36" pos:end="163:39">[<expr pos:start="163:37" pos:end="163:38"><name pos:start="163:37" pos:end="163:38">r3</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="165:13" pos:end="165:24"><decl pos:start="165:13" pos:end="165:23"><type pos:start="165:13" pos:end="165:20"><name pos:start="165:13" pos:end="165:20">uint64_t</name></type> <name pos:start="165:22" pos:end="165:23">ov</name></decl>;</decl_stmt>



            <if_stmt pos:start="169:13" pos:end="201:13"><if pos:start="169:13" pos:end="195:13">if <condition pos:start="169:16" pos:end="169:25">(<expr pos:start="169:17" pos:end="169:24"><name pos:start="169:17" pos:end="169:24">parallel</name></expr>)</condition> <block pos:start="169:27" pos:end="195:13">{<block_content pos:start="175:17" pos:end="194:0">

<cpp:ifdef pos:start="171:1" pos:end="171:22">#<cpp:directive pos:start="171:2" pos:end="171:6">ifdef</cpp:directive> <name pos:start="171:8" pos:end="171:22">CONFIG_ATOMIC64</name></cpp:ifdef>

<cpp:ifdef pos:start="173:1" pos:end="173:24"># <cpp:directive pos:start="173:3" pos:end="173:7">ifdef</cpp:directive> <name pos:start="173:9" pos:end="173:24">CONFIG_USER_ONLY</name></cpp:ifdef>

                <decl_stmt pos:start="175:17" pos:end="175:42"><decl pos:start="175:17" pos:end="175:41"><type pos:start="175:17" pos:end="175:26"><name pos:start="175:17" pos:end="175:24">uint64_t</name> <modifier pos:start="175:26" pos:end="175:26">*</modifier></type><name pos:start="175:27" pos:end="175:31">haddr</name> <init pos:start="175:33" pos:end="175:41">= <expr pos:start="175:35" pos:end="175:41"><call pos:start="175:35" pos:end="175:41"><name pos:start="175:35" pos:end="175:37">g2h</name><argument_list pos:start="175:38" pos:end="175:41">(<argument pos:start="175:39" pos:end="175:40"><expr pos:start="175:39" pos:end="175:40"><name pos:start="175:39" pos:end="175:40">a1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="177:17" pos:end="180:0"><expr pos:start="177:17" pos:end="177:59"><name pos:start="177:17" pos:end="177:18">ov</name> <operator pos:start="177:20" pos:end="177:20">=</operator> <call pos:start="177:22" pos:end="177:59"><name pos:start="177:22" pos:end="177:44">atomic_cmpxchg__nocheck</name><argument_list pos:start="177:45" pos:end="177:59">(<argument pos:start="177:46" pos:end="177:50"><expr pos:start="177:46" pos:end="177:50"><name pos:start="177:46" pos:end="177:50">haddr</name></expr></argument>, <argument pos:start="177:53" pos:end="177:54"><expr pos:start="177:53" pos:end="177:54"><name pos:start="177:53" pos:end="177:54">cv</name></expr></argument>, <argument pos:start="177:57" pos:end="177:58"><expr pos:start="177:57" pos:end="177:58"><name pos:start="177:57" pos:end="177:58">nv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="179:1" pos:end="179:6"># <cpp:directive pos:start="179:3" pos:end="179:6">else</cpp:directive></cpp:else>

                <decl_stmt pos:start="181:17" pos:end="181:76"><decl pos:start="181:17" pos:end="181:75"><type pos:start="181:17" pos:end="181:27"><name pos:start="181:17" pos:end="181:27">TCGMemOpIdx</name></type> <name pos:start="181:29" pos:end="181:30">oi</name> <init pos:start="181:32" pos:end="181:75">= <expr pos:start="181:34" pos:end="181:75"><call pos:start="181:34" pos:end="181:75"><name pos:start="181:34" pos:end="181:47">make_memop_idx</name><argument_list pos:start="181:48" pos:end="181:75">(<argument pos:start="181:49" pos:end="181:65"><expr pos:start="181:49" pos:end="181:65"><name pos:start="181:49" pos:end="181:54">MO_TEQ</name> <operator pos:start="181:56" pos:end="181:56">|</operator> <name pos:start="181:58" pos:end="181:65">MO_ALIGN</name></expr></argument>, <argument pos:start="181:68" pos:end="181:74"><expr pos:start="181:68" pos:end="181:74"><name pos:start="181:68" pos:end="181:74">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="183:17" pos:end="188:0"><expr pos:start="183:17" pos:end="183:75"><name pos:start="183:17" pos:end="183:18">ov</name> <operator pos:start="183:20" pos:end="183:20">=</operator> <call pos:start="183:22" pos:end="183:75"><name pos:start="183:22" pos:end="183:50">helper_atomic_cmpxchgq_be_mmu</name><argument_list pos:start="183:51" pos:end="183:75">(<argument pos:start="183:52" pos:end="183:54"><expr pos:start="183:52" pos:end="183:54"><name pos:start="183:52" pos:end="183:54">env</name></expr></argument>, <argument pos:start="183:57" pos:end="183:58"><expr pos:start="183:57" pos:end="183:58"><name pos:start="183:57" pos:end="183:58">a1</name></expr></argument>, <argument pos:start="183:61" pos:end="183:62"><expr pos:start="183:61" pos:end="183:62"><name pos:start="183:61" pos:end="183:62">cv</name></expr></argument>, <argument pos:start="183:65" pos:end="183:66"><expr pos:start="183:65" pos:end="183:66"><name pos:start="183:65" pos:end="183:66">nv</name></expr></argument>, <argument pos:start="183:69" pos:end="183:70"><expr pos:start="183:69" pos:end="183:70"><name pos:start="183:69" pos:end="183:70">oi</name></expr></argument>, <argument pos:start="183:73" pos:end="183:74"><expr pos:start="183:73" pos:end="183:74"><name pos:start="183:73" pos:end="183:74">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="185:1" pos:end="185:7"># <cpp:directive pos:start="185:3" pos:end="185:7">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="187:1" pos:end="187:5">#<cpp:directive pos:start="187:2" pos:end="187:5">else</cpp:directive></cpp:else>

                <comment type="block" pos:start="189:17" pos:end="189:61">/* Note that we asserted !parallel above.  */</comment>

                <expr_stmt pos:start="191:17" pos:end="194:0"><expr pos:start="191:17" pos:end="191:38"><call pos:start="191:17" pos:end="191:38"><name pos:start="191:17" pos:end="191:36">g_assert_not_reached</name><argument_list pos:start="191:37" pos:end="191:38">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="195:15" pos:end="201:13">else <block pos:start="195:20" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:67">

                <expr_stmt pos:start="197:17" pos:end="197:50"><expr pos:start="197:17" pos:end="197:49"><name pos:start="197:17" pos:end="197:18">ov</name> <operator pos:start="197:20" pos:end="197:20">=</operator> <call pos:start="197:22" pos:end="197:49"><name pos:start="197:22" pos:end="197:36">cpu_ldq_data_ra</name><argument_list pos:start="197:37" pos:end="197:49">(<argument pos:start="197:38" pos:end="197:40"><expr pos:start="197:38" pos:end="197:40"><name pos:start="197:38" pos:end="197:40">env</name></expr></argument>, <argument pos:start="197:43" pos:end="197:44"><expr pos:start="197:43" pos:end="197:44"><name pos:start="197:43" pos:end="197:44">a1</name></expr></argument>, <argument pos:start="197:47" pos:end="197:48"><expr pos:start="197:47" pos:end="197:48"><name pos:start="197:47" pos:end="197:48">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:67"><expr pos:start="199:17" pos:end="199:66"><call pos:start="199:17" pos:end="199:66"><name pos:start="199:17" pos:end="199:31">cpu_stq_data_ra</name><argument_list pos:start="199:32" pos:end="199:66">(<argument pos:start="199:33" pos:end="199:35"><expr pos:start="199:33" pos:end="199:35"><name pos:start="199:33" pos:end="199:35">env</name></expr></argument>, <argument pos:start="199:38" pos:end="199:39"><expr pos:start="199:38" pos:end="199:39"><name pos:start="199:38" pos:end="199:39">a1</name></expr></argument>, <argument pos:start="199:42" pos:end="199:61"><expr pos:start="199:42" pos:end="199:61"><operator pos:start="199:42" pos:end="199:42">(</operator><ternary pos:start="199:43" pos:end="199:60"><condition pos:start="199:43" pos:end="199:52"><expr pos:start="199:43" pos:end="199:50"><name pos:start="199:43" pos:end="199:44">ov</name> <operator pos:start="199:46" pos:end="199:47">==</operator> <name pos:start="199:49" pos:end="199:50">cv</name></expr> ?</condition><then pos:start="199:54" pos:end="199:55"> <expr pos:start="199:54" pos:end="199:55"><name pos:start="199:54" pos:end="199:55">nv</name></expr> </then><else pos:start="199:57" pos:end="199:60">: <expr pos:start="199:59" pos:end="199:60"><name pos:start="199:59" pos:end="199:60">ov</name></expr></else></ternary><operator pos:start="199:61" pos:end="199:61">)</operator></expr></argument>, <argument pos:start="199:64" pos:end="199:65"><expr pos:start="199:64" pos:end="199:65"><name pos:start="199:64" pos:end="199:65">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:28"><expr pos:start="203:13" pos:end="203:27"><name pos:start="203:13" pos:end="203:14">cc</name> <operator pos:start="203:16" pos:end="203:16">=</operator> <operator pos:start="203:18" pos:end="203:18">(</operator><name pos:start="203:19" pos:end="203:20">ov</name> <operator pos:start="203:22" pos:end="203:23">!=</operator> <name pos:start="203:25" pos:end="203:26">cv</name><operator pos:start="203:27" pos:end="203:27">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:31"><expr pos:start="205:13" pos:end="205:30"><name pos:start="205:13" pos:end="205:25"><name pos:start="205:13" pos:end="205:15">env</name><operator pos:start="205:16" pos:end="205:17">-&gt;</operator><name pos:start="205:18" pos:end="205:21">regs</name><index pos:start="205:22" pos:end="205:25">[<expr pos:start="205:23" pos:end="205:24"><name pos:start="205:23" pos:end="205:24">r3</name></expr>]</index></name> <operator pos:start="205:27" pos:end="205:27">=</operator> <name pos:start="205:29" pos:end="205:30">ov</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="209:9" pos:end="209:14">break;</break>



    <case pos:start="213:5" pos:end="213:11">case <expr pos:start="213:10" pos:end="213:10"><literal type="number" pos:start="213:10" pos:end="213:10">2</literal></expr>:</case>

        <block pos:start="215:9" pos:end="279:9">{<block_content pos:start="217:13" pos:end="277:49">

            <decl_stmt pos:start="217:13" pos:end="217:56"><decl pos:start="217:13" pos:end="217:55"><type pos:start="217:13" pos:end="217:20"><name pos:start="217:13" pos:end="217:20">uint64_t</name></type> <name pos:start="217:22" pos:end="217:24">nvh</name> <init pos:start="217:26" pos:end="217:55">= <expr pos:start="217:28" pos:end="217:55"><call pos:start="217:28" pos:end="217:55"><name pos:start="217:28" pos:end="217:42">cpu_ldq_data_ra</name><argument_list pos:start="217:43" pos:end="217:55">(<argument pos:start="217:44" pos:end="217:46"><expr pos:start="217:44" pos:end="217:46"><name pos:start="217:44" pos:end="217:46">env</name></expr></argument>, <argument pos:start="217:49" pos:end="217:50"><expr pos:start="217:49" pos:end="217:50"><name pos:start="217:49" pos:end="217:50">pl</name></expr></argument>, <argument pos:start="217:53" pos:end="217:54"><expr pos:start="217:53" pos:end="217:54"><name pos:start="217:53" pos:end="217:54">ra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="219:13" pos:end="219:60"><decl pos:start="219:13" pos:end="219:59"><type pos:start="219:13" pos:end="219:20"><name pos:start="219:13" pos:end="219:20">uint64_t</name></type> <name pos:start="219:22" pos:end="219:24">nvl</name> <init pos:start="219:26" pos:end="219:59">= <expr pos:start="219:28" pos:end="219:59"><call pos:start="219:28" pos:end="219:59"><name pos:start="219:28" pos:end="219:42">cpu_ldq_data_ra</name><argument_list pos:start="219:43" pos:end="219:59">(<argument pos:start="219:44" pos:end="219:46"><expr pos:start="219:44" pos:end="219:46"><name pos:start="219:44" pos:end="219:46">env</name></expr></argument>, <argument pos:start="219:49" pos:end="219:54"><expr pos:start="219:49" pos:end="219:54"><name pos:start="219:49" pos:end="219:50">pl</name> <operator pos:start="219:52" pos:end="219:52">+</operator> <literal type="number" pos:start="219:54" pos:end="219:54">8</literal></expr></argument>, <argument pos:start="219:57" pos:end="219:58"><expr pos:start="219:57" pos:end="219:58"><name pos:start="219:57" pos:end="219:58">ra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="221:13" pos:end="221:49"><decl pos:start="221:13" pos:end="221:48"><type pos:start="221:13" pos:end="221:18"><name pos:start="221:13" pos:end="221:18">Int128</name></type> <name pos:start="221:20" pos:end="221:21">nv</name> <init pos:start="221:23" pos:end="221:48">= <expr pos:start="221:25" pos:end="221:48"><call pos:start="221:25" pos:end="221:48"><name pos:start="221:25" pos:end="221:38">int128_make128</name><argument_list pos:start="221:39" pos:end="221:48">(<argument pos:start="221:40" pos:end="221:42"><expr pos:start="221:40" pos:end="221:42"><name pos:start="221:40" pos:end="221:42">nvl</name></expr></argument>, <argument pos:start="221:45" pos:end="221:47"><expr pos:start="221:45" pos:end="221:47"><name pos:start="221:45" pos:end="221:47">nvh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="223:13" pos:end="223:73"><decl pos:start="223:13" pos:end="223:72"><type pos:start="223:13" pos:end="223:18"><name pos:start="223:13" pos:end="223:18">Int128</name></type> <name pos:start="223:20" pos:end="223:21">cv</name> <init pos:start="223:23" pos:end="223:72">= <expr pos:start="223:25" pos:end="223:72"><call pos:start="223:25" pos:end="223:72"><name pos:start="223:25" pos:end="223:38">int128_make128</name><argument_list pos:start="223:39" pos:end="223:72">(<argument pos:start="223:40" pos:end="223:56"><expr pos:start="223:40" pos:end="223:56"><name pos:start="223:40" pos:end="223:56"><name pos:start="223:40" pos:end="223:42">env</name><operator pos:start="223:43" pos:end="223:44">-&gt;</operator><name pos:start="223:45" pos:end="223:48">regs</name><index pos:start="223:49" pos:end="223:56">[<expr pos:start="223:50" pos:end="223:55"><name pos:start="223:50" pos:end="223:51">r3</name> <operator pos:start="223:53" pos:end="223:53">+</operator> <literal type="number" pos:start="223:55" pos:end="223:55">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="223:59" pos:end="223:71"><expr pos:start="223:59" pos:end="223:71"><name pos:start="223:59" pos:end="223:71"><name pos:start="223:59" pos:end="223:61">env</name><operator pos:start="223:62" pos:end="223:63">-&gt;</operator><name pos:start="223:64" pos:end="223:67">regs</name><index pos:start="223:68" pos:end="223:71">[<expr pos:start="223:69" pos:end="223:70"><name pos:start="223:69" pos:end="223:70">r3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="225:13" pos:end="225:22"><decl pos:start="225:13" pos:end="225:21"><type pos:start="225:13" pos:end="225:18"><name pos:start="225:13" pos:end="225:18">Int128</name></type> <name pos:start="225:20" pos:end="225:21">ov</name></decl>;</decl_stmt>



            <if_stmt pos:start="229:13" pos:end="271:13"><if pos:start="229:13" pos:end="247:13">if <condition pos:start="229:16" pos:end="229:25">(<expr pos:start="229:17" pos:end="229:24"><name pos:start="229:17" pos:end="229:24">parallel</name></expr>)</condition> <block pos:start="229:27" pos:end="247:13">{<block_content pos:start="233:17" pos:end="246:0">

<cpp:ifdef pos:start="231:1" pos:end="231:23">#<cpp:directive pos:start="231:2" pos:end="231:6">ifdef</cpp:directive> <name pos:start="231:8" pos:end="231:23">CONFIG_ATOMIC128</name></cpp:ifdef>

                <decl_stmt pos:start="233:17" pos:end="233:79"><decl pos:start="233:17" pos:end="233:78"><type pos:start="233:17" pos:end="233:27"><name pos:start="233:17" pos:end="233:27">TCGMemOpIdx</name></type> <name pos:start="233:29" pos:end="233:30">oi</name> <init pos:start="233:32" pos:end="233:78">= <expr pos:start="233:34" pos:end="233:78"><call pos:start="233:34" pos:end="233:78"><name pos:start="233:34" pos:end="233:47">make_memop_idx</name><argument_list pos:start="233:48" pos:end="233:78">(<argument pos:start="233:49" pos:end="233:68"><expr pos:start="233:49" pos:end="233:68"><name pos:start="233:49" pos:end="233:54">MO_TEQ</name> <operator pos:start="233:56" pos:end="233:56">|</operator> <name pos:start="233:58" pos:end="233:68">MO_ALIGN_16</name></expr></argument>, <argument pos:start="233:71" pos:end="233:77"><expr pos:start="233:71" pos:end="233:77"><name pos:start="233:71" pos:end="233:77">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:76"><expr pos:start="235:17" pos:end="235:75"><name pos:start="235:17" pos:end="235:18">ov</name> <operator pos:start="235:20" pos:end="235:20">=</operator> <call pos:start="235:22" pos:end="235:75"><name pos:start="235:22" pos:end="235:50">helper_atomic_cmpxchgo_be_mmu</name><argument_list pos:start="235:51" pos:end="235:75">(<argument pos:start="235:52" pos:end="235:54"><expr pos:start="235:52" pos:end="235:54"><name pos:start="235:52" pos:end="235:54">env</name></expr></argument>, <argument pos:start="235:57" pos:end="235:58"><expr pos:start="235:57" pos:end="235:58"><name pos:start="235:57" pos:end="235:58">a1</name></expr></argument>, <argument pos:start="235:61" pos:end="235:62"><expr pos:start="235:61" pos:end="235:62"><name pos:start="235:61" pos:end="235:62">cv</name></expr></argument>, <argument pos:start="235:65" pos:end="235:66"><expr pos:start="235:65" pos:end="235:66"><name pos:start="235:65" pos:end="235:66">nv</name></expr></argument>, <argument pos:start="235:69" pos:end="235:70"><expr pos:start="235:69" pos:end="235:70"><name pos:start="235:69" pos:end="235:70">oi</name></expr></argument>, <argument pos:start="235:73" pos:end="235:74"><expr pos:start="235:73" pos:end="235:74"><name pos:start="235:73" pos:end="235:74">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="240:0"><expr pos:start="237:17" pos:end="237:39"><name pos:start="237:17" pos:end="237:18">cc</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <operator pos:start="237:22" pos:end="237:22">!</operator><call pos:start="237:23" pos:end="237:39"><name pos:start="237:23" pos:end="237:31">int128_eq</name><argument_list pos:start="237:32" pos:end="237:39">(<argument pos:start="237:33" pos:end="237:34"><expr pos:start="237:33" pos:end="237:34"><name pos:start="237:33" pos:end="237:34">ov</name></expr></argument>, <argument pos:start="237:37" pos:end="237:38"><expr pos:start="237:37" pos:end="237:38"><name pos:start="237:37" pos:end="237:38">cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="239:1" pos:end="239:5">#<cpp:directive pos:start="239:2" pos:end="239:5">else</cpp:directive></cpp:else>

                <comment type="block" pos:start="241:17" pos:end="241:61">/* Note that we asserted !parallel above.  */</comment>

                <expr_stmt pos:start="243:17" pos:end="246:0"><expr pos:start="243:17" pos:end="243:38"><call pos:start="243:17" pos:end="243:38"><name pos:start="243:17" pos:end="243:36">g_assert_not_reached</name><argument_list pos:start="243:37" pos:end="243:38">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="245:1" pos:end="245:6">#<cpp:directive pos:start="245:2" pos:end="245:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="247:15" pos:end="271:13">else <block pos:start="247:20" pos:end="271:13">{<block_content pos:start="249:17" pos:end="269:67">

                <decl_stmt pos:start="249:17" pos:end="249:63"><decl pos:start="249:17" pos:end="249:62"><type pos:start="249:17" pos:end="249:24"><name pos:start="249:17" pos:end="249:24">uint64_t</name></type> <name pos:start="249:26" pos:end="249:27">oh</name> <init pos:start="249:29" pos:end="249:62">= <expr pos:start="249:31" pos:end="249:62"><call pos:start="249:31" pos:end="249:62"><name pos:start="249:31" pos:end="249:45">cpu_ldq_data_ra</name><argument_list pos:start="249:46" pos:end="249:62">(<argument pos:start="249:47" pos:end="249:49"><expr pos:start="249:47" pos:end="249:49"><name pos:start="249:47" pos:end="249:49">env</name></expr></argument>, <argument pos:start="249:52" pos:end="249:57"><expr pos:start="249:52" pos:end="249:57"><name pos:start="249:52" pos:end="249:53">a1</name> <operator pos:start="249:55" pos:end="249:55">+</operator> <literal type="number" pos:start="249:57" pos:end="249:57">0</literal></expr></argument>, <argument pos:start="249:60" pos:end="249:61"><expr pos:start="249:60" pos:end="249:61"><name pos:start="249:60" pos:end="249:61">ra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="251:17" pos:end="251:63"><decl pos:start="251:17" pos:end="251:62"><type pos:start="251:17" pos:end="251:24"><name pos:start="251:17" pos:end="251:24">uint64_t</name></type> <name pos:start="251:26" pos:end="251:27">ol</name> <init pos:start="251:29" pos:end="251:62">= <expr pos:start="251:31" pos:end="251:62"><call pos:start="251:31" pos:end="251:62"><name pos:start="251:31" pos:end="251:45">cpu_ldq_data_ra</name><argument_list pos:start="251:46" pos:end="251:62">(<argument pos:start="251:47" pos:end="251:49"><expr pos:start="251:47" pos:end="251:49"><name pos:start="251:47" pos:end="251:49">env</name></expr></argument>, <argument pos:start="251:52" pos:end="251:57"><expr pos:start="251:52" pos:end="251:57"><name pos:start="251:52" pos:end="251:53">a1</name> <operator pos:start="251:55" pos:end="251:55">+</operator> <literal type="number" pos:start="251:57" pos:end="251:57">8</literal></expr></argument>, <argument pos:start="251:60" pos:end="251:61"><expr pos:start="251:60" pos:end="251:61"><name pos:start="251:60" pos:end="251:61">ra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="255:17" pos:end="255:44"><expr pos:start="255:17" pos:end="255:43"><name pos:start="255:17" pos:end="255:18">ov</name> <operator pos:start="255:20" pos:end="255:20">=</operator> <call pos:start="255:22" pos:end="255:43"><name pos:start="255:22" pos:end="255:35">int128_make128</name><argument_list pos:start="255:36" pos:end="255:43">(<argument pos:start="255:37" pos:end="255:38"><expr pos:start="255:37" pos:end="255:38"><name pos:start="255:37" pos:end="255:38">ol</name></expr></argument>, <argument pos:start="255:41" pos:end="255:42"><expr pos:start="255:41" pos:end="255:42"><name pos:start="255:41" pos:end="255:42">oh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:40"><expr pos:start="257:17" pos:end="257:39"><name pos:start="257:17" pos:end="257:18">cc</name> <operator pos:start="257:20" pos:end="257:20">=</operator> <operator pos:start="257:22" pos:end="257:22">!</operator><call pos:start="257:23" pos:end="257:39"><name pos:start="257:23" pos:end="257:31">int128_eq</name><argument_list pos:start="257:32" pos:end="257:39">(<argument pos:start="257:33" pos:end="257:34"><expr pos:start="257:33" pos:end="257:34"><name pos:start="257:33" pos:end="257:34">ov</name></expr></argument>, <argument pos:start="257:37" pos:end="257:38"><expr pos:start="257:37" pos:end="257:38"><name pos:start="257:37" pos:end="257:38">cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="259:17" pos:end="263:17"><if pos:start="259:17" pos:end="263:17">if <condition pos:start="259:20" pos:end="259:23">(<expr pos:start="259:21" pos:end="259:22"><name pos:start="259:21" pos:end="259:22">cc</name></expr>)</condition> <block pos:start="259:25" pos:end="263:17">{<block_content pos:start="261:21" pos:end="261:28">

                    <expr_stmt pos:start="261:21" pos:end="261:28"><expr pos:start="261:21" pos:end="261:27"><name pos:start="261:21" pos:end="261:22">nv</name> <operator pos:start="261:24" pos:end="261:24">=</operator> <name pos:start="261:26" pos:end="261:27">ov</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="267:17" pos:end="267:67"><expr pos:start="267:17" pos:end="267:66"><call pos:start="267:17" pos:end="267:66"><name pos:start="267:17" pos:end="267:31">cpu_stq_data_ra</name><argument_list pos:start="267:32" pos:end="267:66">(<argument pos:start="267:33" pos:end="267:35"><expr pos:start="267:33" pos:end="267:35"><name pos:start="267:33" pos:end="267:35">env</name></expr></argument>, <argument pos:start="267:38" pos:end="267:43"><expr pos:start="267:38" pos:end="267:43"><name pos:start="267:38" pos:end="267:39">a1</name> <operator pos:start="267:41" pos:end="267:41">+</operator> <literal type="number" pos:start="267:43" pos:end="267:43">0</literal></expr></argument>, <argument pos:start="267:46" pos:end="267:61"><expr pos:start="267:46" pos:end="267:61"><call pos:start="267:46" pos:end="267:61"><name pos:start="267:46" pos:end="267:57">int128_gethi</name><argument_list pos:start="267:58" pos:end="267:61">(<argument pos:start="267:59" pos:end="267:60"><expr pos:start="267:59" pos:end="267:60"><name pos:start="267:59" pos:end="267:60">nv</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="267:64" pos:end="267:65"><expr pos:start="267:64" pos:end="267:65"><name pos:start="267:64" pos:end="267:65">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:67"><expr pos:start="269:17" pos:end="269:66"><call pos:start="269:17" pos:end="269:66"><name pos:start="269:17" pos:end="269:31">cpu_stq_data_ra</name><argument_list pos:start="269:32" pos:end="269:66">(<argument pos:start="269:33" pos:end="269:35"><expr pos:start="269:33" pos:end="269:35"><name pos:start="269:33" pos:end="269:35">env</name></expr></argument>, <argument pos:start="269:38" pos:end="269:43"><expr pos:start="269:38" pos:end="269:43"><name pos:start="269:38" pos:end="269:39">a1</name> <operator pos:start="269:41" pos:end="269:41">+</operator> <literal type="number" pos:start="269:43" pos:end="269:43">8</literal></expr></argument>, <argument pos:start="269:46" pos:end="269:61"><expr pos:start="269:46" pos:end="269:61"><call pos:start="269:46" pos:end="269:61"><name pos:start="269:46" pos:end="269:57">int128_getlo</name><argument_list pos:start="269:58" pos:end="269:61">(<argument pos:start="269:59" pos:end="269:60"><expr pos:start="269:59" pos:end="269:60"><name pos:start="269:59" pos:end="269:60">nv</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="269:64" pos:end="269:65"><expr pos:start="269:64" pos:end="269:65"><name pos:start="269:64" pos:end="269:65">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="275:13" pos:end="275:49"><expr pos:start="275:13" pos:end="275:48"><name pos:start="275:13" pos:end="275:29"><name pos:start="275:13" pos:end="275:15">env</name><operator pos:start="275:16" pos:end="275:17">-&gt;</operator><name pos:start="275:18" pos:end="275:21">regs</name><index pos:start="275:22" pos:end="275:29">[<expr pos:start="275:23" pos:end="275:28"><name pos:start="275:23" pos:end="275:24">r3</name> <operator pos:start="275:26" pos:end="275:26">+</operator> <literal type="number" pos:start="275:28" pos:end="275:28">0</literal></expr>]</index></name> <operator pos:start="275:31" pos:end="275:31">=</operator> <call pos:start="275:33" pos:end="275:48"><name pos:start="275:33" pos:end="275:44">int128_gethi</name><argument_list pos:start="275:45" pos:end="275:48">(<argument pos:start="275:46" pos:end="275:47"><expr pos:start="275:46" pos:end="275:47"><name pos:start="275:46" pos:end="275:47">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:49"><expr pos:start="277:13" pos:end="277:48"><name pos:start="277:13" pos:end="277:29"><name pos:start="277:13" pos:end="277:15">env</name><operator pos:start="277:16" pos:end="277:17">-&gt;</operator><name pos:start="277:18" pos:end="277:21">regs</name><index pos:start="277:22" pos:end="277:29">[<expr pos:start="277:23" pos:end="277:28"><name pos:start="277:23" pos:end="277:24">r3</name> <operator pos:start="277:26" pos:end="277:26">+</operator> <literal type="number" pos:start="277:28" pos:end="277:28">1</literal></expr>]</index></name> <operator pos:start="277:31" pos:end="277:31">=</operator> <call pos:start="277:33" pos:end="277:48"><name pos:start="277:33" pos:end="277:44">int128_getlo</name><argument_list pos:start="277:45" pos:end="277:48">(<argument pos:start="277:46" pos:end="277:47"><expr pos:start="277:46" pos:end="277:47"><name pos:start="277:46" pos:end="277:47">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="281:9" pos:end="281:14">break;</break>



    <default pos:start="285:5" pos:end="285:12">default:</default>

        <expr_stmt pos:start="287:9" pos:end="287:31"><expr pos:start="287:9" pos:end="287:30"><call pos:start="287:9" pos:end="287:30"><name pos:start="287:9" pos:end="287:28">g_assert_not_reached</name><argument_list pos:start="287:29" pos:end="287:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="293:5" pos:end="297:49">/* Store only if the comparison succeeded.  Note that above we use a pair

       of 64-bit big-endian loads, so for sc &lt; 3 we must extract the value

       from the most-significant bits of svh.  */</comment>

    <if_stmt pos:start="299:5" pos:end="363:5"><if pos:start="299:5" pos:end="363:5">if <condition pos:start="299:8" pos:end="299:16">(<expr pos:start="299:9" pos:end="299:15"><name pos:start="299:9" pos:end="299:10">cc</name> <operator pos:start="299:12" pos:end="299:13">==</operator> <literal type="number" pos:start="299:15" pos:end="299:15">0</literal></expr>)</condition> <block pos:start="299:18" pos:end="363:5">{<block_content pos:start="301:9" pos:end="361:9">

        <switch pos:start="301:9" pos:end="361:9">switch <condition pos:start="301:16" pos:end="301:19">(<expr pos:start="301:17" pos:end="301:18"><name pos:start="301:17" pos:end="301:18">sc</name></expr>)</condition> <block pos:start="301:21" pos:end="361:9">{<block_content pos:start="303:9" pos:end="359:35">

        <case pos:start="303:9" pos:end="303:15">case <expr pos:start="303:14" pos:end="303:14"><literal type="number" pos:start="303:14" pos:end="303:14">0</literal></expr>:</case>

            <expr_stmt pos:start="305:13" pos:end="305:52"><expr pos:start="305:13" pos:end="305:51"><call pos:start="305:13" pos:end="305:51"><name pos:start="305:13" pos:end="305:27">cpu_stb_data_ra</name><argument_list pos:start="305:28" pos:end="305:51">(<argument pos:start="305:29" pos:end="305:31"><expr pos:start="305:29" pos:end="305:31"><name pos:start="305:29" pos:end="305:31">env</name></expr></argument>, <argument pos:start="305:34" pos:end="305:35"><expr pos:start="305:34" pos:end="305:35"><name pos:start="305:34" pos:end="305:35">a2</name></expr></argument>, <argument pos:start="305:38" pos:end="305:46"><expr pos:start="305:38" pos:end="305:46"><name pos:start="305:38" pos:end="305:40">svh</name> <operator pos:start="305:42" pos:end="305:43">&gt;&gt;</operator> <literal type="number" pos:start="305:45" pos:end="305:46">56</literal></expr></argument>, <argument pos:start="305:49" pos:end="305:50"><expr pos:start="305:49" pos:end="305:50"><name pos:start="305:49" pos:end="305:50">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="307:13" pos:end="307:18">break;</break>

        <case pos:start="309:9" pos:end="309:15">case <expr pos:start="309:14" pos:end="309:14"><literal type="number" pos:start="309:14" pos:end="309:14">1</literal></expr>:</case>

            <expr_stmt pos:start="311:13" pos:end="311:52"><expr pos:start="311:13" pos:end="311:51"><call pos:start="311:13" pos:end="311:51"><name pos:start="311:13" pos:end="311:27">cpu_stw_data_ra</name><argument_list pos:start="311:28" pos:end="311:51">(<argument pos:start="311:29" pos:end="311:31"><expr pos:start="311:29" pos:end="311:31"><name pos:start="311:29" pos:end="311:31">env</name></expr></argument>, <argument pos:start="311:34" pos:end="311:35"><expr pos:start="311:34" pos:end="311:35"><name pos:start="311:34" pos:end="311:35">a2</name></expr></argument>, <argument pos:start="311:38" pos:end="311:46"><expr pos:start="311:38" pos:end="311:46"><name pos:start="311:38" pos:end="311:40">svh</name> <operator pos:start="311:42" pos:end="311:43">&gt;&gt;</operator> <literal type="number" pos:start="311:45" pos:end="311:46">48</literal></expr></argument>, <argument pos:start="311:49" pos:end="311:50"><expr pos:start="311:49" pos:end="311:50"><name pos:start="311:49" pos:end="311:50">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="313:13" pos:end="313:18">break;</break>

        <case pos:start="315:9" pos:end="315:15">case <expr pos:start="315:14" pos:end="315:14"><literal type="number" pos:start="315:14" pos:end="315:14">2</literal></expr>:</case>

            <expr_stmt pos:start="317:13" pos:end="317:52"><expr pos:start="317:13" pos:end="317:51"><call pos:start="317:13" pos:end="317:51"><name pos:start="317:13" pos:end="317:27">cpu_stl_data_ra</name><argument_list pos:start="317:28" pos:end="317:51">(<argument pos:start="317:29" pos:end="317:31"><expr pos:start="317:29" pos:end="317:31"><name pos:start="317:29" pos:end="317:31">env</name></expr></argument>, <argument pos:start="317:34" pos:end="317:35"><expr pos:start="317:34" pos:end="317:35"><name pos:start="317:34" pos:end="317:35">a2</name></expr></argument>, <argument pos:start="317:38" pos:end="317:46"><expr pos:start="317:38" pos:end="317:46"><name pos:start="317:38" pos:end="317:40">svh</name> <operator pos:start="317:42" pos:end="317:43">&gt;&gt;</operator> <literal type="number" pos:start="317:45" pos:end="317:46">32</literal></expr></argument>, <argument pos:start="317:49" pos:end="317:50"><expr pos:start="317:49" pos:end="317:50"><name pos:start="317:49" pos:end="317:50">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="319:13" pos:end="319:18">break;</break>

        <case pos:start="321:9" pos:end="321:15">case <expr pos:start="321:14" pos:end="321:14"><literal type="number" pos:start="321:14" pos:end="321:14">3</literal></expr>:</case>

            <expr_stmt pos:start="323:13" pos:end="323:46"><expr pos:start="323:13" pos:end="323:45"><call pos:start="323:13" pos:end="323:45"><name pos:start="323:13" pos:end="323:27">cpu_stq_data_ra</name><argument_list pos:start="323:28" pos:end="323:45">(<argument pos:start="323:29" pos:end="323:31"><expr pos:start="323:29" pos:end="323:31"><name pos:start="323:29" pos:end="323:31">env</name></expr></argument>, <argument pos:start="323:34" pos:end="323:35"><expr pos:start="323:34" pos:end="323:35"><name pos:start="323:34" pos:end="323:35">a2</name></expr></argument>, <argument pos:start="323:38" pos:end="323:40"><expr pos:start="323:38" pos:end="323:40"><name pos:start="323:38" pos:end="323:40">svh</name></expr></argument>, <argument pos:start="323:43" pos:end="323:44"><expr pos:start="323:43" pos:end="323:44"><name pos:start="323:43" pos:end="323:44">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="325:13" pos:end="325:18">break;</break>

        <case pos:start="327:9" pos:end="327:15">case <expr pos:start="327:14" pos:end="327:14"><literal type="number" pos:start="327:14" pos:end="327:14">4</literal></expr>:</case>

            <if_stmt pos:start="329:13" pos:end="353:13"><if pos:start="329:13" pos:end="347:13">if <condition pos:start="329:16" pos:end="329:25">(<expr pos:start="329:17" pos:end="329:24"><name pos:start="329:17" pos:end="329:24">parallel</name></expr>)</condition> <block pos:start="329:27" pos:end="347:13">{<block_content pos:start="333:17" pos:end="346:0">

<cpp:ifdef pos:start="331:1" pos:end="331:23">#<cpp:directive pos:start="331:2" pos:end="331:6">ifdef</cpp:directive> <name pos:start="331:8" pos:end="331:23">CONFIG_ATOMIC128</name></cpp:ifdef>

                <decl_stmt pos:start="333:17" pos:end="333:79"><decl pos:start="333:17" pos:end="333:78"><type pos:start="333:17" pos:end="333:27"><name pos:start="333:17" pos:end="333:27">TCGMemOpIdx</name></type> <name pos:start="333:29" pos:end="333:30">oi</name> <init pos:start="333:32" pos:end="333:78">= <expr pos:start="333:34" pos:end="333:78"><call pos:start="333:34" pos:end="333:78"><name pos:start="333:34" pos:end="333:47">make_memop_idx</name><argument_list pos:start="333:48" pos:end="333:78">(<argument pos:start="333:49" pos:end="333:68"><expr pos:start="333:49" pos:end="333:68"><name pos:start="333:49" pos:end="333:54">MO_TEQ</name> <operator pos:start="333:56" pos:end="333:56">|</operator> <name pos:start="333:58" pos:end="333:68">MO_ALIGN_16</name></expr></argument>, <argument pos:start="333:71" pos:end="333:77"><expr pos:start="333:71" pos:end="333:77"><name pos:start="333:71" pos:end="333:77">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="335:17" pos:end="335:53"><decl pos:start="335:17" pos:end="335:52"><type pos:start="335:17" pos:end="335:22"><name pos:start="335:17" pos:end="335:22">Int128</name></type> <name pos:start="335:24" pos:end="335:25">sv</name> <init pos:start="335:27" pos:end="335:52">= <expr pos:start="335:29" pos:end="335:52"><call pos:start="335:29" pos:end="335:52"><name pos:start="335:29" pos:end="335:42">int128_make128</name><argument_list pos:start="335:43" pos:end="335:52">(<argument pos:start="335:44" pos:end="335:46"><expr pos:start="335:44" pos:end="335:46"><name pos:start="335:44" pos:end="335:46">svl</name></expr></argument>, <argument pos:start="335:49" pos:end="335:51"><expr pos:start="335:49" pos:end="335:51"><name pos:start="335:49" pos:end="335:51">svh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="337:17" pos:end="340:0"><expr pos:start="337:17" pos:end="337:61"><call pos:start="337:17" pos:end="337:61"><name pos:start="337:17" pos:end="337:40">helper_atomic_sto_be_mmu</name><argument_list pos:start="337:41" pos:end="337:61">(<argument pos:start="337:42" pos:end="337:44"><expr pos:start="337:42" pos:end="337:44"><name pos:start="337:42" pos:end="337:44">env</name></expr></argument>, <argument pos:start="337:47" pos:end="337:48"><expr pos:start="337:47" pos:end="337:48"><name pos:start="337:47" pos:end="337:48">a2</name></expr></argument>, <argument pos:start="337:51" pos:end="337:52"><expr pos:start="337:51" pos:end="337:52"><name pos:start="337:51" pos:end="337:52">sv</name></expr></argument>, <argument pos:start="337:55" pos:end="337:56"><expr pos:start="337:55" pos:end="337:56"><name pos:start="337:55" pos:end="337:56">oi</name></expr></argument>, <argument pos:start="337:59" pos:end="337:60"><expr pos:start="337:59" pos:end="337:60"><name pos:start="337:59" pos:end="337:60">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="339:1" pos:end="339:5">#<cpp:directive pos:start="339:2" pos:end="339:5">else</cpp:directive></cpp:else>

                <comment type="block" pos:start="341:17" pos:end="341:61">/* Note that we asserted !parallel above.  */</comment>

                <expr_stmt pos:start="343:17" pos:end="346:0"><expr pos:start="343:17" pos:end="343:38"><call pos:start="343:17" pos:end="343:38"><name pos:start="343:17" pos:end="343:36">g_assert_not_reached</name><argument_list pos:start="343:37" pos:end="343:38">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="347:15" pos:end="353:13">else <block pos:start="347:20" pos:end="353:13">{<block_content pos:start="349:17" pos:end="351:54">

                <expr_stmt pos:start="349:17" pos:end="349:54"><expr pos:start="349:17" pos:end="349:53"><call pos:start="349:17" pos:end="349:53"><name pos:start="349:17" pos:end="349:31">cpu_stq_data_ra</name><argument_list pos:start="349:32" pos:end="349:53">(<argument pos:start="349:33" pos:end="349:35"><expr pos:start="349:33" pos:end="349:35"><name pos:start="349:33" pos:end="349:35">env</name></expr></argument>, <argument pos:start="349:38" pos:end="349:43"><expr pos:start="349:38" pos:end="349:43"><name pos:start="349:38" pos:end="349:39">a2</name> <operator pos:start="349:41" pos:end="349:41">+</operator> <literal type="number" pos:start="349:43" pos:end="349:43">0</literal></expr></argument>, <argument pos:start="349:46" pos:end="349:48"><expr pos:start="349:46" pos:end="349:48"><name pos:start="349:46" pos:end="349:48">svh</name></expr></argument>, <argument pos:start="349:51" pos:end="349:52"><expr pos:start="349:51" pos:end="349:52"><name pos:start="349:51" pos:end="349:52">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:54"><expr pos:start="351:17" pos:end="351:53"><call pos:start="351:17" pos:end="351:53"><name pos:start="351:17" pos:end="351:31">cpu_stq_data_ra</name><argument_list pos:start="351:32" pos:end="351:53">(<argument pos:start="351:33" pos:end="351:35"><expr pos:start="351:33" pos:end="351:35"><name pos:start="351:33" pos:end="351:35">env</name></expr></argument>, <argument pos:start="351:38" pos:end="351:43"><expr pos:start="351:38" pos:end="351:43"><name pos:start="351:38" pos:end="351:39">a2</name> <operator pos:start="351:41" pos:end="351:41">+</operator> <literal type="number" pos:start="351:43" pos:end="351:43">8</literal></expr></argument>, <argument pos:start="351:46" pos:end="351:48"><expr pos:start="351:46" pos:end="351:48"><name pos:start="351:46" pos:end="351:48">svl</name></expr></argument>, <argument pos:start="351:51" pos:end="351:52"><expr pos:start="351:51" pos:end="351:52"><name pos:start="351:51" pos:end="351:52">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="355:13" pos:end="355:18">break;</break>

        <default pos:start="357:9" pos:end="357:16">default:</default>

            <expr_stmt pos:start="359:13" pos:end="359:35"><expr pos:start="359:13" pos:end="359:34"><call pos:start="359:13" pos:end="359:34"><name pos:start="359:13" pos:end="359:32">g_assert_not_reached</name><argument_list pos:start="359:33" pos:end="359:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <return pos:start="367:5" pos:end="367:14">return <expr pos:start="367:12" pos:end="367:13"><name pos:start="367:12" pos:end="367:13">cc</name></expr>;</return>



 <label pos:start="371:2" pos:end="371:16"><name pos:start="371:2" pos:end="371:15">spec_exception</name>:</label>

    <expr_stmt pos:start="373:5" pos:end="373:44"><expr pos:start="373:5" pos:end="373:43"><call pos:start="373:5" pos:end="373:43"><name pos:start="373:5" pos:end="373:21">cpu_restore_state</name><argument_list pos:start="373:22" pos:end="373:43">(<argument pos:start="373:23" pos:end="373:38"><expr pos:start="373:23" pos:end="373:38"><call pos:start="373:23" pos:end="373:38"><name pos:start="373:23" pos:end="373:33">ENV_GET_CPU</name><argument_list pos:start="373:34" pos:end="373:38">(<argument pos:start="373:35" pos:end="373:37"><expr pos:start="373:35" pos:end="373:37"><name pos:start="373:35" pos:end="373:37">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="373:41" pos:end="373:42"><expr pos:start="373:41" pos:end="373:42"><name pos:start="373:41" pos:end="373:42">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:49"><expr pos:start="375:5" pos:end="375:48"><call pos:start="375:5" pos:end="375:48"><name pos:start="375:5" pos:end="375:21">program_interrupt</name><argument_list pos:start="375:22" pos:end="375:48">(<argument pos:start="375:23" pos:end="375:25"><expr pos:start="375:23" pos:end="375:25"><name pos:start="375:23" pos:end="375:25">env</name></expr></argument>, <argument pos:start="375:28" pos:end="375:44"><expr pos:start="375:28" pos:end="375:44"><name pos:start="375:28" pos:end="375:44">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="375:47" pos:end="375:47"><expr pos:start="375:47" pos:end="375:47"><literal type="number" pos:start="375:47" pos:end="375:47">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="377:27"><expr pos:start="377:5" pos:end="377:26"><call pos:start="377:5" pos:end="377:26"><name pos:start="377:5" pos:end="377:24">g_assert_not_reached</name><argument_list pos:start="377:25" pos:end="377:26">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
