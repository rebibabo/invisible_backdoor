<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21276.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">platform_fixed_ioport_writew</name><parameter_list pos:start="1:41" pos:end="1:83">(<parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:45">void</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:53">opaque</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:63">uint32_t</name></type> <name pos:start="1:65" pos:end="1:68">addr</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:82"><decl pos:start="1:71" pos:end="1:82"><type pos:start="1:71" pos:end="1:82"><name pos:start="1:71" pos:end="1:78">uint32_t</name></type> <name pos:start="1:80" pos:end="1:82">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:23">PCIXenPlatformState</name> <modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:26">s</name> <init pos:start="5:28" pos:end="5:35">= <expr pos:start="5:30" pos:end="5:35"><name pos:start="5:30" pos:end="5:35">opaque</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="75:5">switch <condition pos:start="9:12" pos:end="9:17">(<expr pos:start="9:13" pos:end="9:16"><name pos:start="9:13" pos:end="9:16">addr</name></expr>)</condition> <block pos:start="9:19" pos:end="75:5">{<block_content pos:start="11:5" pos:end="73:14">

    <case pos:start="11:5" pos:end="11:11">case <expr pos:start="11:10" pos:end="11:10"><literal type="number" pos:start="11:10" pos:end="11:10">0</literal></expr>:</case> <block pos:start="11:13" pos:end="45:5">{<block_content pos:start="13:9" pos:end="43:14">

        <decl_stmt pos:start="13:9" pos:end="13:43"><decl pos:start="13:9" pos:end="13:42"><type pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:17">PCIDevice</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">pci_dev</name> <init pos:start="13:28" pos:end="13:42">= <expr pos:start="13:30" pos:end="13:42"><call pos:start="13:30" pos:end="13:42"><name pos:start="13:30" pos:end="13:39">PCI_DEVICE</name><argument_list pos:start="13:40" pos:end="13:42">(<argument pos:start="13:41" pos:end="13:41"><expr pos:start="13:41" pos:end="13:41"><name pos:start="13:41" pos:end="13:41">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="15:9" pos:end="19:68">/* Unplug devices.  Value is a bitmask of which devices to

           unplug, with bit 0 the disk devices, bit 1 the network

           devices, and bit 2 the non-primary-master IDE devices. */</comment>

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:35">(<expr pos:start="21:13" pos:end="21:34"><name pos:start="21:13" pos:end="21:15">val</name> <operator pos:start="21:17" pos:end="21:17">&amp;</operator> <name pos:start="21:19" pos:end="21:34">UNPLUG_ALL_DISKS</name></expr>)</condition> <block pos:start="21:37" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:43">

            <expr_stmt pos:start="23:13" pos:end="23:38"><expr pos:start="23:13" pos:end="23:37"><call pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:19">DPRINTF</name><argument_list pos:start="23:20" pos:end="23:37">(<argument pos:start="23:21" pos:end="23:36"><expr pos:start="23:21" pos:end="23:36"><literal type="string" pos:start="23:21" pos:end="23:36">"unplug disks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:43"><expr pos:start="25:13" pos:end="25:42"><call pos:start="25:13" pos:end="25:42"><name pos:start="25:13" pos:end="25:28">pci_unplug_disks</name><argument_list pos:start="25:29" pos:end="25:42">(<argument pos:start="25:30" pos:end="25:41"><expr pos:start="25:30" pos:end="25:41"><name pos:start="25:30" pos:end="25:41"><name pos:start="25:30" pos:end="25:36">pci_dev</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:41">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:34">(<expr pos:start="29:13" pos:end="29:33"><name pos:start="29:13" pos:end="29:15">val</name> <operator pos:start="29:17" pos:end="29:17">&amp;</operator> <name pos:start="29:19" pos:end="29:33">UNPLUG_ALL_NICS</name></expr>)</condition> <block pos:start="29:36" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:42">

            <expr_stmt pos:start="31:13" pos:end="31:37"><expr pos:start="31:13" pos:end="31:36"><call pos:start="31:13" pos:end="31:36"><name pos:start="31:13" pos:end="31:19">DPRINTF</name><argument_list pos:start="31:20" pos:end="31:36">(<argument pos:start="31:21" pos:end="31:35"><expr pos:start="31:21" pos:end="31:35"><literal type="string" pos:start="31:21" pos:end="31:35">"unplug nics\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:42"><expr pos:start="33:13" pos:end="33:41"><call pos:start="33:13" pos:end="33:41"><name pos:start="33:13" pos:end="33:27">pci_unplug_nics</name><argument_list pos:start="33:28" pos:end="33:41">(<argument pos:start="33:29" pos:end="33:40"><expr pos:start="33:29" pos:end="33:40"><name pos:start="33:29" pos:end="33:40"><name pos:start="33:29" pos:end="33:35">pci_dev</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:40">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:39">(<expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:15">val</name> <operator pos:start="37:17" pos:end="37:17">&amp;</operator> <name pos:start="37:19" pos:end="37:38">UNPLUG_AUX_IDE_DISKS</name></expr>)</condition> <block pos:start="37:41" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:62">

            <expr_stmt pos:start="39:13" pos:end="39:62"><expr pos:start="39:13" pos:end="39:61"><call pos:start="39:13" pos:end="39:61"><name pos:start="39:13" pos:end="39:19">DPRINTF</name><argument_list pos:start="39:20" pos:end="39:61">(<argument pos:start="39:21" pos:end="39:60"><expr pos:start="39:21" pos:end="39:60"><literal type="string" pos:start="39:21" pos:end="39:60">"unplug auxiliary disks not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    </block_content>}</block>

    <case pos:start="47:5" pos:end="47:11">case <expr pos:start="47:10" pos:end="47:10"><literal type="number" pos:start="47:10" pos:end="47:10">2</literal></expr>:</case>

        <switch pos:start="49:9" pos:end="69:9">switch <condition pos:start="49:16" pos:end="49:20">(<expr pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">val</name></expr>)</condition> <block pos:start="49:22" pos:end="69:9">{<block_content pos:start="51:9" pos:end="67:18">

        <case pos:start="51:9" pos:end="51:15">case <expr pos:start="51:14" pos:end="51:14"><literal type="number" pos:start="51:14" pos:end="51:14">1</literal></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:67"><expr pos:start="53:13" pos:end="53:66"><call pos:start="53:13" pos:end="53:66"><name pos:start="53:13" pos:end="53:19">DPRINTF</name><argument_list pos:start="53:20" pos:end="53:66">(<argument pos:start="53:21" pos:end="53:65"><expr pos:start="53:21" pos:end="53:65"><literal type="string" pos:start="53:21" pos:end="53:65">"Citrix Windows PV drivers loaded in guest\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:15">case <expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:67"><expr pos:start="59:13" pos:end="59:66"><call pos:start="59:13" pos:end="59:66"><name pos:start="59:13" pos:end="59:19">DPRINTF</name><argument_list pos:start="59:20" pos:end="59:66">(<argument pos:start="59:21" pos:end="59:65"><expr pos:start="59:21" pos:end="59:65"><literal type="string" pos:start="59:21" pos:end="59:65">"Guest claimed to be running PV product 0?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <default pos:start="63:9" pos:end="63:16">default:</default>

            <expr_stmt pos:start="65:13" pos:end="65:68"><expr pos:start="65:13" pos:end="65:67"><call pos:start="65:13" pos:end="65:67"><name pos:start="65:13" pos:end="65:19">DPRINTF</name><argument_list pos:start="65:20" pos:end="65:67">(<argument pos:start="65:21" pos:end="65:61"><expr pos:start="65:21" pos:end="65:61"><literal type="string" pos:start="65:21" pos:end="65:61">"Unknown PV product %d loaded in guest\n"</literal></expr></argument>, <argument pos:start="65:64" pos:end="65:66"><expr pos:start="65:64" pos:end="65:66"><name pos:start="65:64" pos:end="65:66">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="71:9" pos:end="71:40"><expr pos:start="71:9" pos:end="71:39"><name pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:33">driver_product_version</name></name> <operator pos:start="71:35" pos:end="71:35">=</operator> <name pos:start="71:37" pos:end="71:39">val</name></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
