<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9093.c" pos:tabs="8"><function pos:start="1:1" pos:end="369:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">shorten_decode_frame</name><parameter_list pos:start="1:32" pos:end="5:24">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:18"><decl pos:start="3:9" pos:end="3:18"><type pos:start="3:9" pos:end="3:18"><name pos:start="3:9" pos:end="3:12">void</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:18">data</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:34"><decl pos:start="3:21" pos:end="3:34"><type pos:start="3:21" pos:end="3:34"><name pos:start="3:21" pos:end="3:23">int</name> <modifier pos:start="3:25" pos:end="3:25">*</modifier></type><name pos:start="3:26" pos:end="3:34">data_size</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:23"><decl pos:start="5:9" pos:end="5:23"><type pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:16">AVPacket</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:23">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="369:1">{<block_content pos:start="9:5" pos:end="367:17">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">ShortenContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:29">avctx</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:25">input_buf_size</name> <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">int16_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:20">samples</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:44">/* allocate internal bitstream buffer */</comment>

    <if_stmt pos:start="25:5" pos:end="45:5"><if pos:start="25:5" pos:end="45:5">if<condition pos:start="25:7" pos:end="25:29">(<expr pos:start="25:8" pos:end="25:28"><name pos:start="25:8" pos:end="25:23"><name pos:start="25:8" pos:end="25:8">s</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:23">max_framesize</name></name> <operator pos:start="25:25" pos:end="25:26">==</operator> <literal type="number" pos:start="25:28" pos:end="25:28">0</literal></expr>)</condition><block pos:start="25:30" pos:end="45:5">{<block_content pos:start="27:9" pos:end="43:31">

        <decl_stmt pos:start="27:9" pos:end="27:22"><decl pos:start="27:9" pos:end="27:21"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:12">void</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:21">tmp_ptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:24">max_framesize</name></name><operator pos:start="29:25" pos:end="29:25">=</operator> <literal type="number" pos:start="29:27" pos:end="29:30">1024</literal></expr>;</expr_stmt> <comment type="line" pos:start="29:33" pos:end="29:82">// should hopefully be enough for the first header</comment>

        <expr_stmt pos:start="31:9" pos:end="33:52"><expr pos:start="31:9" pos:end="33:51"><name pos:start="31:9" pos:end="31:15">tmp_ptr</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="33:51"><name pos:start="31:19" pos:end="31:33">av_fast_realloc</name><argument_list pos:start="31:34" pos:end="33:51">(<argument pos:start="31:35" pos:end="31:46"><expr pos:start="31:35" pos:end="31:46"><name pos:start="31:35" pos:end="31:46"><name pos:start="31:35" pos:end="31:35">s</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:46">bitstream</name></name></expr></argument>, <argument pos:start="31:49" pos:end="31:76"><expr pos:start="31:49" pos:end="31:76"><operator pos:start="31:49" pos:end="31:49">&amp;</operator><name pos:start="31:50" pos:end="31:76"><name pos:start="31:50" pos:end="31:50">s</name><operator pos:start="31:51" pos:end="31:52">-&gt;</operator><name pos:start="31:53" pos:end="31:76">allocated_bitstream_size</name></name></expr></argument>,

                                  <argument pos:start="33:35" pos:end="33:50"><expr pos:start="33:35" pos:end="33:50"><name pos:start="33:35" pos:end="33:50"><name pos:start="33:35" pos:end="33:35">s</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:50">max_framesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:21">(<expr pos:start="35:13" pos:end="35:20"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:20">tmp_ptr</name></expr>)</condition> <block pos:start="35:23" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:35">

            <expr_stmt pos:start="37:13" pos:end="37:79"><expr pos:start="37:13" pos:end="37:78"><call pos:start="37:13" pos:end="37:78"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="37:78">(<argument pos:start="37:20" pos:end="37:24"><expr pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:24">avctx</name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:41" pos:end="37:77"><expr pos:start="37:41" pos:end="37:77"><literal type="string" pos:start="37:41" pos:end="37:77">"error allocating bitstream buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:35">return <expr pos:start="39:20" pos:end="39:34"><call pos:start="39:20" pos:end="39:34"><name pos:start="39:20" pos:end="39:26">AVERROR</name><argument_list pos:start="39:27" pos:end="39:34">(<argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:20">bitstream</name></name> <operator pos:start="43:22" pos:end="43:22">=</operator> <name pos:start="43:24" pos:end="43:30">tmp_ptr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:56">/* append current packet data to bitstream buffer */</comment>

    <if_stmt pos:start="51:5" pos:end="87:5"><if pos:start="51:5" pos:end="87:5">if<condition pos:start="51:7" pos:end="51:29">(<expr pos:start="51:8" pos:end="51:28"><literal type="number" pos:start="51:8" pos:end="51:8">1</literal> <operator pos:start="51:10" pos:end="51:11">&amp;&amp;</operator> <name pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:28">max_framesize</name></name></expr>)</condition><block pos:start="51:30" pos:end="87:5">{<block_content pos:start="53:9" pos:end="85:9"><comment type="line" pos:start="51:31" pos:end="51:47">//FIXME truncated</comment>

        <expr_stmt pos:start="53:9" pos:end="53:72"><expr pos:start="53:9" pos:end="53:71"><name pos:start="53:9" pos:end="53:16">buf_size</name><operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:71"><name pos:start="53:19" pos:end="53:23">FFMIN</name><argument_list pos:start="53:24" pos:end="53:71">(<argument pos:start="53:25" pos:end="53:32"><expr pos:start="53:25" pos:end="53:32"><name pos:start="53:25" pos:end="53:32">buf_size</name></expr></argument>, <argument pos:start="53:35" pos:end="53:70"><expr pos:start="53:35" pos:end="53:70"><name pos:start="53:35" pos:end="53:50"><name pos:start="53:35" pos:end="53:35">s</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:50">max_framesize</name></name> <operator pos:start="53:52" pos:end="53:52">-</operator> <name pos:start="53:54" pos:end="53:70"><name pos:start="53:54" pos:end="53:54">s</name><operator pos:start="53:55" pos:end="53:56">-&gt;</operator><name pos:start="53:57" pos:end="53:70">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:22">input_buf_size</name><operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:32">buf_size</name></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if<condition pos:start="59:11" pos:end="59:91">(<expr pos:start="59:12" pos:end="59:90"><name pos:start="59:12" pos:end="59:29"><name pos:start="59:12" pos:end="59:12">s</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:29">bitstream_index</name></name> <operator pos:start="59:31" pos:end="59:31">+</operator> <name pos:start="59:33" pos:end="59:49"><name pos:start="59:33" pos:end="59:33">s</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:49">bitstream_size</name></name> <operator pos:start="59:51" pos:end="59:51">+</operator> <name pos:start="59:53" pos:end="59:60">buf_size</name> <operator pos:start="59:62" pos:end="59:62">&gt;</operator> <name pos:start="59:64" pos:end="59:90"><name pos:start="59:64" pos:end="59:64">s</name><operator pos:start="59:65" pos:end="59:66">-&gt;</operator><name pos:start="59:67" pos:end="59:90">allocated_bitstream_size</name></name></expr>)</condition><block pos:start="59:92" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:33">

            <expr_stmt pos:start="61:13" pos:end="61:88"><expr pos:start="61:13" pos:end="61:87"><call pos:start="61:13" pos:end="61:87"><name pos:start="61:13" pos:end="61:19">memmove</name><argument_list pos:start="61:20" pos:end="61:87">(<argument pos:start="61:21" pos:end="61:32"><expr pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:32">bitstream</name></name></expr></argument>, <argument pos:start="61:35" pos:end="61:67"><expr pos:start="61:35" pos:end="61:67"><operator pos:start="61:35" pos:end="61:35">&amp;</operator><name pos:start="61:36" pos:end="61:67"><name pos:start="61:36" pos:end="61:36">s</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:47">bitstream</name><index pos:start="61:48" pos:end="61:67">[<expr pos:start="61:49" pos:end="61:66"><name pos:start="61:49" pos:end="61:66"><name pos:start="61:49" pos:end="61:49">s</name><operator pos:start="61:50" pos:end="61:51">-&gt;</operator><name pos:start="61:52" pos:end="61:66">bitstream_index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="61:70" pos:end="61:86"><expr pos:start="61:70" pos:end="61:86"><name pos:start="61:70" pos:end="61:86"><name pos:start="61:70" pos:end="61:70">s</name><operator pos:start="61:71" pos:end="61:72">-&gt;</operator><name pos:start="61:73" pos:end="61:86">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:33"><expr pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:30">bitstream_index</name></name><operator pos:start="63:31" pos:end="63:31">=</operator><literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:85"><expr pos:start="67:9" pos:end="67:84"><call pos:start="67:9" pos:end="67:84"><name pos:start="67:9" pos:end="67:14">memcpy</name><argument_list pos:start="67:15" pos:end="67:84">(<argument pos:start="67:16" pos:end="67:68"><expr pos:start="67:16" pos:end="67:68"><operator pos:start="67:16" pos:end="67:16">&amp;</operator><name pos:start="67:17" pos:end="67:68"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:28">bitstream</name><index pos:start="67:29" pos:end="67:68">[<expr pos:start="67:30" pos:end="67:67"><name pos:start="67:30" pos:end="67:47"><name pos:start="67:30" pos:end="67:30">s</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:47">bitstream_index</name></name> <operator pos:start="67:49" pos:end="67:49">+</operator> <name pos:start="67:51" pos:end="67:67"><name pos:start="67:51" pos:end="67:51">s</name><operator pos:start="67:52" pos:end="67:53">-&gt;</operator><name pos:start="67:54" pos:end="67:67">bitstream_size</name></name></expr>]</index></name></expr></argument>, <argument pos:start="67:71" pos:end="67:73"><expr pos:start="67:71" pos:end="67:73"><name pos:start="67:71" pos:end="67:73">buf</name></expr></argument>, <argument pos:start="67:76" pos:end="67:83"><expr pos:start="67:76" pos:end="67:83"><name pos:start="67:76" pos:end="67:83">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:47"><expr pos:start="69:9" pos:end="69:46"><name pos:start="69:9" pos:end="69:11">buf</name><operator pos:start="69:12" pos:end="69:12">=</operator> <operator pos:start="69:14" pos:end="69:14">&amp;</operator><name pos:start="69:15" pos:end="69:46"><name pos:start="69:15" pos:end="69:15">s</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:26">bitstream</name><index pos:start="69:27" pos:end="69:46">[<expr pos:start="69:28" pos:end="69:45"><name pos:start="69:28" pos:end="69:45"><name pos:start="69:28" pos:end="69:28">s</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:45">bitstream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:38"><expr pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:16">buf_size</name> <operator pos:start="71:18" pos:end="71:19">+=</operator> <name pos:start="71:21" pos:end="71:37"><name pos:start="71:21" pos:end="71:21">s</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:37">bitstream_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:25">bitstream_size</name></name><operator pos:start="73:26" pos:end="73:26">=</operator> <name pos:start="73:28" pos:end="73:35">buf_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="77:9" pos:end="77:73">/* do not decode until buffer has at least max_framesize bytes */</comment>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if<condition pos:start="79:11" pos:end="79:39">(<expr pos:start="79:12" pos:end="79:38"><name pos:start="79:12" pos:end="79:19">buf_size</name> <operator pos:start="79:21" pos:end="79:21">&lt;</operator> <name pos:start="79:23" pos:end="79:38"><name pos:start="79:23" pos:end="79:23">s</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:38">max_framesize</name></name></expr>)</condition><block pos:start="79:40" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:34">

            <expr_stmt pos:start="81:13" pos:end="81:27"><expr pos:start="81:13" pos:end="81:26"><operator pos:start="81:13" pos:end="81:13">*</operator><name pos:start="81:14" pos:end="81:22">data_size</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:34">return <expr pos:start="83:20" pos:end="83:33"><name pos:start="83:20" pos:end="83:33">input_buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="89:5" pos:end="89:44">/* init and position bitstream reader */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:43"><expr pos:start="91:5" pos:end="91:42"><call pos:start="91:5" pos:end="91:42"><name pos:start="91:5" pos:end="91:17">init_get_bits</name><argument_list pos:start="91:18" pos:end="91:42">(<argument pos:start="91:19" pos:end="91:24"><expr pos:start="91:19" pos:end="91:24"><operator pos:start="91:19" pos:end="91:19">&amp;</operator><name pos:start="91:20" pos:end="91:24"><name pos:start="91:20" pos:end="91:20">s</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:24">gb</name></name></expr></argument>, <argument pos:start="91:27" pos:end="91:29"><expr pos:start="91:27" pos:end="91:29"><name pos:start="91:27" pos:end="91:29">buf</name></expr></argument>, <argument pos:start="91:32" pos:end="91:41"><expr pos:start="91:32" pos:end="91:41"><name pos:start="91:32" pos:end="91:39">buf_size</name><operator pos:start="91:40" pos:end="91:40">*</operator><literal type="number" pos:start="91:41" pos:end="91:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:35"><expr pos:start="93:5" pos:end="93:34"><call pos:start="93:5" pos:end="93:34"><name pos:start="93:5" pos:end="93:13">skip_bits</name><argument_list pos:start="93:14" pos:end="93:34">(<argument pos:start="93:15" pos:end="93:20"><expr pos:start="93:15" pos:end="93:20"><operator pos:start="93:15" pos:end="93:15">&amp;</operator><name pos:start="93:16" pos:end="93:20"><name pos:start="93:16" pos:end="93:16">s</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:20">gb</name></name></expr></argument>, <argument pos:start="93:23" pos:end="93:33"><expr pos:start="93:23" pos:end="93:33"><name pos:start="93:23" pos:end="93:33"><name pos:start="93:23" pos:end="93:23">s</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:33">bitindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:41">/* process header or next subblock */</comment>

    <if_stmt pos:start="99:5" pos:end="337:5"><if pos:start="99:5" pos:end="109:5">if <condition pos:start="99:8" pos:end="99:22">(<expr pos:start="99:9" pos:end="99:21"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:21"><name pos:start="99:10" pos:end="99:10">s</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:21">blocksize</name></name></expr>)</condition>

    <block pos:start="101:5" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:23">

        <if_stmt pos:start="103:9" pos:end="105:23"><if pos:start="103:9" pos:end="105:23">if <condition pos:start="103:12" pos:end="103:39">(<expr pos:start="103:13" pos:end="103:38"><operator pos:start="103:13" pos:end="103:13">(</operator><name pos:start="103:14" pos:end="103:16">ret</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:33"><name pos:start="103:20" pos:end="103:30">read_header</name><argument_list pos:start="103:31" pos:end="103:33">(<argument pos:start="103:32" pos:end="103:32"><expr pos:start="103:32" pos:end="103:32"><name pos:start="103:32" pos:end="103:32">s</name></expr></argument>)</argument_list></call><operator pos:start="103:34" pos:end="103:34">)</operator> <operator pos:start="103:36" pos:end="103:36">&lt;</operator> <literal type="number" pos:start="103:38" pos:end="103:38">0</literal></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:23"><block_content pos:start="105:13" pos:end="105:23">

            <return pos:start="105:13" pos:end="105:23">return <expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:23"><expr pos:start="107:9" pos:end="107:22"><operator pos:start="107:9" pos:end="107:9">*</operator><name pos:start="107:10" pos:end="107:18">data_size</name> <operator pos:start="107:20" pos:end="107:20">=</operator> <literal type="number" pos:start="107:22" pos:end="107:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="111:5" pos:end="337:5">else

    <block pos:start="113:5" pos:end="337:5">{<block_content pos:start="115:9" pos:end="335:9">

        <decl_stmt pos:start="115:9" pos:end="115:16"><decl pos:start="115:9" pos:end="115:15"><type pos:start="115:9" pos:end="115:11"><name pos:start="115:9" pos:end="115:11">int</name></type> <name pos:start="115:13" pos:end="115:15">cmd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:16"><decl pos:start="117:9" pos:end="117:15"><type pos:start="117:9" pos:end="117:11"><name pos:start="117:9" pos:end="117:11">int</name></type> <name pos:start="117:13" pos:end="117:15">len</name></decl>;</decl_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:52"><expr pos:start="119:9" pos:end="119:51"><name pos:start="119:9" pos:end="119:11">cmd</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:51"><name pos:start="119:15" pos:end="119:35">get_ur_golomb_shorten</name><argument_list pos:start="119:36" pos:end="119:51">(<argument pos:start="119:37" pos:end="119:42"><expr pos:start="119:37" pos:end="119:42"><operator pos:start="119:37" pos:end="119:37">&amp;</operator><name pos:start="119:38" pos:end="119:42"><name pos:start="119:38" pos:end="119:38">s</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:42">gb</name></name></expr></argument>, <argument pos:start="119:45" pos:end="119:50"><expr pos:start="119:45" pos:end="119:50"><name pos:start="119:45" pos:end="119:50">FNSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="123:9" pos:end="137:9"><if pos:start="123:9" pos:end="137:9">if <condition pos:start="123:12" pos:end="123:30">(<expr pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:15">cmd</name> <operator pos:start="123:17" pos:end="123:17">&gt;</operator> <name pos:start="123:19" pos:end="123:29">FN_VERBATIM</name></expr>)</condition> <block pos:start="123:32" pos:end="137:9">{<block_content pos:start="125:13" pos:end="135:22">

            <expr_stmt pos:start="125:13" pos:end="125:78"><expr pos:start="125:13" pos:end="125:77"><call pos:start="125:13" pos:end="125:77"><name pos:start="125:13" pos:end="125:18">av_log</name><argument_list pos:start="125:19" pos:end="125:77">(<argument pos:start="125:20" pos:end="125:24"><expr pos:start="125:20" pos:end="125:24"><name pos:start="125:20" pos:end="125:24">avctx</name></expr></argument>, <argument pos:start="125:27" pos:end="125:38"><expr pos:start="125:27" pos:end="125:38"><name pos:start="125:27" pos:end="125:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:41" pos:end="125:71"><expr pos:start="125:41" pos:end="125:71"><literal type="string" pos:start="125:41" pos:end="125:71">"unknown shorten function %d\n"</literal></expr></argument>, <argument pos:start="125:74" pos:end="125:76"><expr pos:start="125:74" pos:end="125:76"><name pos:start="125:74" pos:end="125:76">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="133:13"><if pos:start="127:13" pos:end="133:13">if <condition pos:start="127:16" pos:end="127:38">(<expr pos:start="127:17" pos:end="127:37"><name pos:start="127:17" pos:end="127:33"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:33">bitstream_size</name></name> <operator pos:start="127:35" pos:end="127:35">&gt;</operator> <literal type="number" pos:start="127:37" pos:end="127:37">0</literal></expr>)</condition> <block pos:start="127:40" pos:end="133:13">{<block_content pos:start="129:17" pos:end="131:36">

                <expr_stmt pos:start="129:17" pos:end="129:37"><expr pos:start="129:17" pos:end="129:36"><name pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:34">bitstream_index</name></name><operator pos:start="129:35" pos:end="129:36">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:36"><expr pos:start="131:17" pos:end="131:35"><name pos:start="131:17" pos:end="131:33"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:33">bitstream_size</name></name><operator pos:start="131:34" pos:end="131:35">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="135:13" pos:end="135:22">return <expr pos:start="135:20" pos:end="135:21"><operator pos:start="135:20" pos:end="135:20">-</operator><literal type="number" pos:start="135:21" pos:end="135:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="141:9" pos:end="335:9"><if pos:start="141:9" pos:end="201:9">if <condition pos:start="141:12" pos:end="141:35">(<expr pos:start="141:13" pos:end="141:34"><operator pos:start="141:13" pos:end="141:13">!</operator><name pos:start="141:14" pos:end="141:34"><name pos:start="141:14" pos:end="141:29">is_audio_command</name><index pos:start="141:30" pos:end="141:34">[<expr pos:start="141:31" pos:end="141:33"><name pos:start="141:31" pos:end="141:33">cmd</name></expr>]</index></name></expr>)</condition> <block pos:start="141:37" pos:end="201:9">{<block_content pos:start="145:13" pos:end="199:27">

            <comment type="block" pos:start="143:13" pos:end="143:43">/* process non-audio command */</comment>

            <switch pos:start="145:13" pos:end="197:13">switch <condition pos:start="145:20" pos:end="145:24">(<expr pos:start="145:21" pos:end="145:23"><name pos:start="145:21" pos:end="145:23">cmd</name></expr>)</condition> <block pos:start="145:26" pos:end="197:13">{<block_content pos:start="147:17" pos:end="195:26">

                <case pos:start="147:17" pos:end="147:33">case <expr pos:start="147:22" pos:end="147:32"><name pos:start="147:22" pos:end="147:32">FN_VERBATIM</name></expr>:</case>

                    <expr_stmt pos:start="149:21" pos:end="149:78"><expr pos:start="149:21" pos:end="149:77"><name pos:start="149:21" pos:end="149:23">len</name> <operator pos:start="149:25" pos:end="149:25">=</operator> <call pos:start="149:27" pos:end="149:77"><name pos:start="149:27" pos:end="149:47">get_ur_golomb_shorten</name><argument_list pos:start="149:48" pos:end="149:77">(<argument pos:start="149:49" pos:end="149:54"><expr pos:start="149:49" pos:end="149:54"><operator pos:start="149:49" pos:end="149:49">&amp;</operator><name pos:start="149:50" pos:end="149:54"><name pos:start="149:50" pos:end="149:50">s</name><operator pos:start="149:51" pos:end="149:52">-&gt;</operator><name pos:start="149:53" pos:end="149:54">gb</name></name></expr></argument>, <argument pos:start="149:57" pos:end="149:76"><expr pos:start="149:57" pos:end="149:76"><name pos:start="149:57" pos:end="149:76">VERBATIM_CKSIZE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <while pos:start="151:21" pos:end="155:21">while <condition pos:start="151:27" pos:end="151:33">(<expr pos:start="151:28" pos:end="151:32"><name pos:start="151:28" pos:end="151:30">len</name><operator pos:start="151:31" pos:end="151:32">--</operator></expr>)</condition> <block pos:start="151:35" pos:end="155:21">{<block_content pos:start="153:25" pos:end="153:74">

                        <expr_stmt pos:start="153:25" pos:end="153:74"><expr pos:start="153:25" pos:end="153:73"><call pos:start="153:25" pos:end="153:73"><name pos:start="153:25" pos:end="153:45">get_ur_golomb_shorten</name><argument_list pos:start="153:46" pos:end="153:73">(<argument pos:start="153:47" pos:end="153:52"><expr pos:start="153:47" pos:end="153:52"><operator pos:start="153:47" pos:end="153:47">&amp;</operator><name pos:start="153:48" pos:end="153:52"><name pos:start="153:48" pos:end="153:48">s</name><operator pos:start="153:49" pos:end="153:50">-&gt;</operator><name pos:start="153:51" pos:end="153:52">gb</name></name></expr></argument>, <argument pos:start="153:55" pos:end="153:72"><expr pos:start="153:55" pos:end="153:72"><name pos:start="153:55" pos:end="153:72">VERBATIM_BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></while>

                    <break pos:start="157:21" pos:end="157:26">break;</break>

                <case pos:start="159:17" pos:end="159:33">case <expr pos:start="159:22" pos:end="159:32"><name pos:start="159:22" pos:end="159:32">FN_BITSHIFT</name></expr>:</case>

                    <expr_stmt pos:start="161:21" pos:end="161:78"><expr pos:start="161:21" pos:end="161:77"><name pos:start="161:21" pos:end="161:31"><name pos:start="161:21" pos:end="161:21">s</name><operator pos:start="161:22" pos:end="161:23">-&gt;</operator><name pos:start="161:24" pos:end="161:31">bitshift</name></name> <operator pos:start="161:33" pos:end="161:33">=</operator> <call pos:start="161:35" pos:end="161:77"><name pos:start="161:35" pos:end="161:55">get_ur_golomb_shorten</name><argument_list pos:start="161:56" pos:end="161:77">(<argument pos:start="161:57" pos:end="161:62"><expr pos:start="161:57" pos:end="161:62"><operator pos:start="161:57" pos:end="161:57">&amp;</operator><name pos:start="161:58" pos:end="161:62"><name pos:start="161:58" pos:end="161:58">s</name><operator pos:start="161:59" pos:end="161:60">-&gt;</operator><name pos:start="161:61" pos:end="161:62">gb</name></name></expr></argument>, <argument pos:start="161:65" pos:end="161:76"><expr pos:start="161:65" pos:end="161:76"><name pos:start="161:65" pos:end="161:76">BITSHIFTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="163:21" pos:end="163:26">break;</break>

                <case pos:start="165:17" pos:end="165:34">case <expr pos:start="165:22" pos:end="165:33"><name pos:start="165:22" pos:end="165:33">FN_BLOCKSIZE</name></expr>:</case> <block pos:start="165:36" pos:end="191:17">{<block_content pos:start="167:21" pos:end="189:26">

                    <decl_stmt pos:start="167:21" pos:end="167:71"><decl pos:start="167:21" pos:end="167:70"><type pos:start="167:21" pos:end="167:23"><name pos:start="167:21" pos:end="167:23">int</name></type> <name pos:start="167:25" pos:end="167:33">blocksize</name> <init pos:start="167:35" pos:end="167:70">= <expr pos:start="167:37" pos:end="167:70"><call pos:start="167:37" pos:end="167:70"><name pos:start="167:37" pos:end="167:44">get_uint</name><argument_list pos:start="167:45" pos:end="167:70">(<argument pos:start="167:46" pos:end="167:46"><expr pos:start="167:46" pos:end="167:46"><name pos:start="167:46" pos:end="167:46">s</name></expr></argument>, <argument pos:start="167:49" pos:end="167:69"><expr pos:start="167:49" pos:end="167:69"><call pos:start="167:49" pos:end="167:69"><name pos:start="167:49" pos:end="167:55">av_log2</name><argument_list pos:start="167:56" pos:end="167:69">(<argument pos:start="167:57" pos:end="167:68"><expr pos:start="167:57" pos:end="167:68"><name pos:start="167:57" pos:end="167:68"><name pos:start="167:57" pos:end="167:57">s</name><operator pos:start="167:58" pos:end="167:59">-&gt;</operator><name pos:start="167:60" pos:end="167:68">blocksize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="169:21" pos:end="175:21"><if pos:start="169:21" pos:end="175:21">if <condition pos:start="169:24" pos:end="169:49">(<expr pos:start="169:25" pos:end="169:48"><name pos:start="169:25" pos:end="169:33">blocksize</name> <operator pos:start="169:35" pos:end="169:35">&gt;</operator> <name pos:start="169:37" pos:end="169:48"><name pos:start="169:37" pos:end="169:37">s</name><operator pos:start="169:38" pos:end="169:39">-&gt;</operator><name pos:start="169:40" pos:end="169:48">blocksize</name></name></expr>)</condition> <block pos:start="169:51" pos:end="175:21">{<block_content pos:start="171:25" pos:end="173:52">

                        <expr_stmt pos:start="171:25" pos:end="171:96"><expr pos:start="171:25" pos:end="171:95"><call pos:start="171:25" pos:end="171:95"><name pos:start="171:25" pos:end="171:30">av_log</name><argument_list pos:start="171:31" pos:end="171:95">(<argument pos:start="171:32" pos:end="171:36"><expr pos:start="171:32" pos:end="171:36"><name pos:start="171:32" pos:end="171:36">avctx</name></expr></argument>, <argument pos:start="171:39" pos:end="171:50"><expr pos:start="171:39" pos:end="171:50"><name pos:start="171:39" pos:end="171:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="171:53" pos:end="171:94"><expr pos:start="171:53" pos:end="171:94"><literal type="string" pos:start="171:53" pos:end="171:94">"Increasing block size is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="173:25" pos:end="173:52">return <expr pos:start="173:32" pos:end="173:51"><name pos:start="173:32" pos:end="173:51">AVERROR_PATCHWELCOME</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="177:21" pos:end="185:21"><if pos:start="177:21" pos:end="185:21">if <condition pos:start="177:24" pos:end="177:64">(<expr pos:start="177:25" pos:end="177:63"><operator pos:start="177:25" pos:end="177:25">!</operator><name pos:start="177:26" pos:end="177:34">blocksize</name> <operator pos:start="177:36" pos:end="177:37">||</operator> <name pos:start="177:39" pos:end="177:47">blocksize</name> <operator pos:start="177:49" pos:end="177:49">&gt;</operator> <name pos:start="177:51" pos:end="177:63">MAX_BLOCKSIZE</name></expr>)</condition> <block pos:start="177:66" pos:end="185:21">{<block_content pos:start="179:25" pos:end="183:47">

                        <expr_stmt pos:start="179:25" pos:end="181:62"><expr pos:start="179:25" pos:end="181:61"><call pos:start="179:25" pos:end="181:61"><name pos:start="179:25" pos:end="179:30">av_log</name><argument_list pos:start="179:31" pos:end="181:61">(<argument pos:start="179:32" pos:end="179:36"><expr pos:start="179:32" pos:end="179:36"><name pos:start="179:32" pos:end="179:36">avctx</name></expr></argument>, <argument pos:start="179:39" pos:end="179:50"><expr pos:start="179:39" pos:end="179:50"><name pos:start="179:39" pos:end="179:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:53" pos:end="181:49"><expr pos:start="179:53" pos:end="181:49"><literal type="string" pos:start="179:53" pos:end="179:77">"invalid or unsupported "</literal>

                               <literal type="string" pos:start="181:32" pos:end="181:49">"block size: %d\n"</literal></expr></argument>, <argument pos:start="181:52" pos:end="181:60"><expr pos:start="181:52" pos:end="181:60"><name pos:start="181:52" pos:end="181:60">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="183:25" pos:end="183:47">return <expr pos:start="183:32" pos:end="183:46"><call pos:start="183:32" pos:end="183:46"><name pos:start="183:32" pos:end="183:38">AVERROR</name><argument_list pos:start="183:39" pos:end="183:46">(<argument pos:start="183:40" pos:end="183:45"><expr pos:start="183:40" pos:end="183:45"><name pos:start="183:40" pos:end="183:45">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="187:21" pos:end="187:45"><expr pos:start="187:21" pos:end="187:44"><name pos:start="187:21" pos:end="187:32"><name pos:start="187:21" pos:end="187:21">s</name><operator pos:start="187:22" pos:end="187:23">-&gt;</operator><name pos:start="187:24" pos:end="187:32">blocksize</name></name> <operator pos:start="187:34" pos:end="187:34">=</operator> <name pos:start="187:36" pos:end="187:44">blocksize</name></expr>;</expr_stmt>

                    <break pos:start="189:21" pos:end="189:26">break;</break>

                </block_content>}</block>

                <case pos:start="193:17" pos:end="193:29">case <expr pos:start="193:22" pos:end="193:28"><name pos:start="193:22" pos:end="193:28">FN_QUIT</name></expr>:</case>

                    <break pos:start="195:21" pos:end="195:26">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="199:13" pos:end="199:27"><expr pos:start="199:13" pos:end="199:26"><operator pos:start="199:13" pos:end="199:13">*</operator><name pos:start="199:14" pos:end="199:22">data_size</name> <operator pos:start="199:24" pos:end="199:24">=</operator> <literal type="number" pos:start="199:26" pos:end="199:26">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="201:11" pos:end="335:9">else <block pos:start="201:16" pos:end="335:9">{<block_content pos:start="205:13" pos:end="333:13">

            <comment type="block" pos:start="203:13" pos:end="203:39">/* process audio command */</comment>

            <decl_stmt pos:start="205:13" pos:end="205:34"><decl pos:start="205:13" pos:end="205:33"><type pos:start="205:13" pos:end="205:15"><name pos:start="205:13" pos:end="205:15">int</name></type> <name pos:start="205:17" pos:end="205:29">residual_size</name> <init pos:start="205:31" pos:end="205:33">= <expr pos:start="205:33" pos:end="205:33"><literal type="number" pos:start="205:33" pos:end="205:33">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="207:13" pos:end="207:38"><decl pos:start="207:13" pos:end="207:37"><type pos:start="207:13" pos:end="207:15"><name pos:start="207:13" pos:end="207:15">int</name></type> <name pos:start="207:17" pos:end="207:23">channel</name> <init pos:start="207:25" pos:end="207:37">= <expr pos:start="207:27" pos:end="207:37"><name pos:start="207:27" pos:end="207:37"><name pos:start="207:27" pos:end="207:27">s</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:37">cur_chan</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="209:13" pos:end="209:28"><decl pos:start="209:13" pos:end="209:27"><type pos:start="209:13" pos:end="209:19"><name pos:start="209:13" pos:end="209:19">int32_t</name></type> <name pos:start="209:21" pos:end="209:27">coffset</name></decl>;</decl_stmt>



            <comment type="block" pos:start="213:13" pos:end="213:53">/* get Rice code for residual decoding */</comment>

            <if_stmt pos:start="215:13" pos:end="225:13"><if pos:start="215:13" pos:end="225:13">if <condition pos:start="215:16" pos:end="215:31">(<expr pos:start="215:17" pos:end="215:30"><name pos:start="215:17" pos:end="215:19">cmd</name> <operator pos:start="215:21" pos:end="215:22">!=</operator> <name pos:start="215:24" pos:end="215:30">FN_ZERO</name></expr>)</condition> <block pos:start="215:33" pos:end="225:13">{<block_content pos:start="217:17" pos:end="223:36">

                <expr_stmt pos:start="217:17" pos:end="217:74"><expr pos:start="217:17" pos:end="217:73"><name pos:start="217:17" pos:end="217:29">residual_size</name> <operator pos:start="217:31" pos:end="217:31">=</operator> <call pos:start="217:33" pos:end="217:73"><name pos:start="217:33" pos:end="217:53">get_ur_golomb_shorten</name><argument_list pos:start="217:54" pos:end="217:73">(<argument pos:start="217:55" pos:end="217:60"><expr pos:start="217:55" pos:end="217:60"><operator pos:start="217:55" pos:end="217:55">&amp;</operator><name pos:start="217:56" pos:end="217:60"><name pos:start="217:56" pos:end="217:56">s</name><operator pos:start="217:57" pos:end="217:58">-&gt;</operator><name pos:start="217:59" pos:end="217:60">gb</name></name></expr></argument>, <argument pos:start="217:63" pos:end="217:72"><expr pos:start="217:63" pos:end="217:72"><name pos:start="217:63" pos:end="217:72">ENERGYSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="219:17" pos:end="219:96">/* this is a hack as version 0 differed in defintion of get_sr_golomb_shorten */</comment>

                <if_stmt pos:start="221:17" pos:end="223:36"><if pos:start="221:17" pos:end="223:36">if <condition pos:start="221:20" pos:end="221:36">(<expr pos:start="221:21" pos:end="221:35"><name pos:start="221:21" pos:end="221:30"><name pos:start="221:21" pos:end="221:21">s</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:30">version</name></name> <operator pos:start="221:32" pos:end="221:33">==</operator> <literal type="number" pos:start="221:35" pos:end="221:35">0</literal></expr>)</condition><block type="pseudo" pos:start="223:21" pos:end="223:36"><block_content pos:start="223:21" pos:end="223:36">

                    <expr_stmt pos:start="223:21" pos:end="223:36"><expr pos:start="223:21" pos:end="223:35"><name pos:start="223:21" pos:end="223:33">residual_size</name><operator pos:start="223:34" pos:end="223:35">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="229:13" pos:end="229:74">/* calculate sample offset using means from previous blocks */</comment>

            <if_stmt pos:start="231:13" pos:end="249:13"><if pos:start="231:13" pos:end="233:48">if <condition pos:start="231:16" pos:end="231:30">(<expr pos:start="231:17" pos:end="231:29"><name pos:start="231:17" pos:end="231:24"><name pos:start="231:17" pos:end="231:17">s</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:24">nmean</name></name> <operator pos:start="231:26" pos:end="231:27">==</operator> <literal type="number" pos:start="231:29" pos:end="231:29">0</literal></expr>)</condition><block type="pseudo" pos:start="233:17" pos:end="233:48"><block_content pos:start="233:17" pos:end="233:48">

                <expr_stmt pos:start="233:17" pos:end="233:48"><expr pos:start="233:17" pos:end="233:47"><name pos:start="233:17" pos:end="233:23">coffset</name> <operator pos:start="233:25" pos:end="233:25">=</operator> <name pos:start="233:27" pos:end="233:47"><name pos:start="233:27" pos:end="233:27">s</name><operator pos:start="233:28" pos:end="233:29">-&gt;</operator><name pos:start="233:30" pos:end="233:35">offset</name><index pos:start="233:36" pos:end="233:44">[<expr pos:start="233:37" pos:end="233:43"><name pos:start="233:37" pos:end="233:43">channel</name></expr>]</index><index pos:start="233:45" pos:end="233:47">[<expr pos:start="233:46" pos:end="233:46"><literal type="number" pos:start="233:46" pos:end="233:46">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="235:13" pos:end="249:13">else <block pos:start="235:18" pos:end="249:13">{<block_content pos:start="237:17" pos:end="247:54">

                <decl_stmt pos:start="237:17" pos:end="237:66"><decl pos:start="237:17" pos:end="237:65"><type pos:start="237:17" pos:end="237:23"><name pos:start="237:17" pos:end="237:23">int32_t</name></type> <name pos:start="237:25" pos:end="237:27">sum</name> <init pos:start="237:29" pos:end="237:65">= <expr pos:start="237:31" pos:end="237:65"><ternary pos:start="237:31" pos:end="237:65"><condition pos:start="237:31" pos:end="237:48"><expr pos:start="237:31" pos:end="237:46"><operator pos:start="237:31" pos:end="237:31">(</operator><name pos:start="237:32" pos:end="237:41"><name pos:start="237:32" pos:end="237:32">s</name><operator pos:start="237:33" pos:end="237:34">-&gt;</operator><name pos:start="237:35" pos:end="237:41">version</name></name> <operator pos:start="237:43" pos:end="237:43">&lt;</operator> <literal type="number" pos:start="237:45" pos:end="237:45">2</literal><operator pos:start="237:46" pos:end="237:46">)</operator></expr> ?</condition><then pos:start="237:50" pos:end="237:50"> <expr pos:start="237:50" pos:end="237:50"><literal type="number" pos:start="237:50" pos:end="237:50">0</literal></expr> </then><else pos:start="237:52" pos:end="237:65">: <expr pos:start="237:54" pos:end="237:65"><name pos:start="237:54" pos:end="237:61"><name pos:start="237:54" pos:end="237:54">s</name><operator pos:start="237:55" pos:end="237:56">-&gt;</operator><name pos:start="237:57" pos:end="237:61">nmean</name></name> <operator pos:start="237:63" pos:end="237:63">/</operator> <literal type="number" pos:start="237:65" pos:end="237:65">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <for pos:start="239:17" pos:end="241:49">for <control pos:start="239:21" pos:end="239:42">(<init pos:start="239:22" pos:end="239:25"><expr pos:start="239:22" pos:end="239:24"><name pos:start="239:22" pos:end="239:22">i</name><operator pos:start="239:23" pos:end="239:23">=</operator><literal type="number" pos:start="239:24" pos:end="239:24">0</literal></expr>;</init> <condition pos:start="239:27" pos:end="239:37"><expr pos:start="239:27" pos:end="239:36"><name pos:start="239:27" pos:end="239:27">i</name><operator pos:start="239:28" pos:end="239:28">&lt;</operator><name pos:start="239:29" pos:end="239:36"><name pos:start="239:29" pos:end="239:29">s</name><operator pos:start="239:30" pos:end="239:31">-&gt;</operator><name pos:start="239:32" pos:end="239:36">nmean</name></name></expr>;</condition> <incr pos:start="239:39" pos:end="239:41"><expr pos:start="239:39" pos:end="239:41"><name pos:start="239:39" pos:end="239:39">i</name><operator pos:start="239:40" pos:end="239:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="241:21" pos:end="241:49"><block_content pos:start="241:21" pos:end="241:49">

                    <expr_stmt pos:start="241:21" pos:end="241:49"><expr pos:start="241:21" pos:end="241:48"><name pos:start="241:21" pos:end="241:23">sum</name> <operator pos:start="241:25" pos:end="241:26">+=</operator> <name pos:start="241:28" pos:end="241:48"><name pos:start="241:28" pos:end="241:28">s</name><operator pos:start="241:29" pos:end="241:30">-&gt;</operator><name pos:start="241:31" pos:end="241:36">offset</name><index pos:start="241:37" pos:end="241:45">[<expr pos:start="241:38" pos:end="241:44"><name pos:start="241:38" pos:end="241:44">channel</name></expr>]</index><index pos:start="241:46" pos:end="241:48">[<expr pos:start="241:47" pos:end="241:47"><name pos:start="241:47" pos:end="241:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="243:17" pos:end="243:41"><expr pos:start="243:17" pos:end="243:40"><name pos:start="243:17" pos:end="243:23">coffset</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <name pos:start="243:27" pos:end="243:29">sum</name> <operator pos:start="243:31" pos:end="243:31">/</operator> <name pos:start="243:33" pos:end="243:40"><name pos:start="243:33" pos:end="243:33">s</name><operator pos:start="243:34" pos:end="243:35">-&gt;</operator><name pos:start="243:36" pos:end="243:40">nmean</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="245:17" pos:end="247:54"><if pos:start="245:17" pos:end="247:54">if <condition pos:start="245:20" pos:end="245:36">(<expr pos:start="245:21" pos:end="245:35"><name pos:start="245:21" pos:end="245:30"><name pos:start="245:21" pos:end="245:21">s</name><operator pos:start="245:22" pos:end="245:23">-&gt;</operator><name pos:start="245:24" pos:end="245:30">version</name></name> <operator pos:start="245:32" pos:end="245:33">&gt;=</operator> <literal type="number" pos:start="245:35" pos:end="245:35">2</literal></expr>)</condition><block type="pseudo" pos:start="247:21" pos:end="247:54"><block_content pos:start="247:21" pos:end="247:54">

                    <expr_stmt pos:start="247:21" pos:end="247:54"><expr pos:start="247:21" pos:end="247:53"><name pos:start="247:21" pos:end="247:27">coffset</name> <operator pos:start="247:29" pos:end="247:31">&gt;&gt;=</operator> <call pos:start="247:33" pos:end="247:53"><name pos:start="247:33" pos:end="247:37">FFMIN</name><argument_list pos:start="247:38" pos:end="247:53">(<argument pos:start="247:39" pos:end="247:39"><expr pos:start="247:39" pos:end="247:39"><literal type="number" pos:start="247:39" pos:end="247:39">1</literal></expr></argument>, <argument pos:start="247:42" pos:end="247:52"><expr pos:start="247:42" pos:end="247:52"><name pos:start="247:42" pos:end="247:52"><name pos:start="247:42" pos:end="247:42">s</name><operator pos:start="247:43" pos:end="247:44">-&gt;</operator><name pos:start="247:45" pos:end="247:52">bitshift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="253:13" pos:end="253:49">/* decode samples for this channel */</comment>

            <if_stmt pos:start="255:13" pos:end="267:13"><if pos:start="255:13" pos:end="261:13">if <condition pos:start="255:16" pos:end="255:31">(<expr pos:start="255:17" pos:end="255:30"><name pos:start="255:17" pos:end="255:19">cmd</name> <operator pos:start="255:21" pos:end="255:22">==</operator> <name pos:start="255:24" pos:end="255:30">FN_ZERO</name></expr>)</condition> <block pos:start="255:33" pos:end="261:13">{<block_content pos:start="257:17" pos:end="259:47">

                <for pos:start="257:17" pos:end="259:47">for <control pos:start="257:21" pos:end="257:46">(<init pos:start="257:22" pos:end="257:25"><expr pos:start="257:22" pos:end="257:24"><name pos:start="257:22" pos:end="257:22">i</name><operator pos:start="257:23" pos:end="257:23">=</operator><literal type="number" pos:start="257:24" pos:end="257:24">0</literal></expr>;</init> <condition pos:start="257:27" pos:end="257:41"><expr pos:start="257:27" pos:end="257:40"><name pos:start="257:27" pos:end="257:27">i</name><operator pos:start="257:28" pos:end="257:28">&lt;</operator><name pos:start="257:29" pos:end="257:40"><name pos:start="257:29" pos:end="257:29">s</name><operator pos:start="257:30" pos:end="257:31">-&gt;</operator><name pos:start="257:32" pos:end="257:40">blocksize</name></name></expr>;</condition> <incr pos:start="257:43" pos:end="257:45"><expr pos:start="257:43" pos:end="257:45"><name pos:start="257:43" pos:end="257:43">i</name><operator pos:start="257:44" pos:end="257:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="259:21" pos:end="259:47"><block_content pos:start="259:21" pos:end="259:47">

                    <expr_stmt pos:start="259:21" pos:end="259:47"><expr pos:start="259:21" pos:end="259:46"><name pos:start="259:21" pos:end="259:42"><name pos:start="259:21" pos:end="259:21">s</name><operator pos:start="259:22" pos:end="259:23">-&gt;</operator><name pos:start="259:24" pos:end="259:30">decoded</name><index pos:start="259:31" pos:end="259:39">[<expr pos:start="259:32" pos:end="259:38"><name pos:start="259:32" pos:end="259:38">channel</name></expr>]</index><index pos:start="259:40" pos:end="259:42">[<expr pos:start="259:41" pos:end="259:41"><name pos:start="259:41" pos:end="259:41">i</name></expr>]</index></name> <operator pos:start="259:44" pos:end="259:44">=</operator> <literal type="number" pos:start="259:46" pos:end="259:46">0</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="261:15" pos:end="267:13">else <block pos:start="261:20" pos:end="267:13">{<block_content pos:start="263:17" pos:end="265:31">

                <if_stmt pos:start="263:17" pos:end="265:31"><if pos:start="263:17" pos:end="265:31">if <condition pos:start="263:20" pos:end="263:93">(<expr pos:start="263:21" pos:end="263:92"><operator pos:start="263:21" pos:end="263:21">(</operator><name pos:start="263:22" pos:end="263:24">ret</name> <operator pos:start="263:26" pos:end="263:26">=</operator> <call pos:start="263:28" pos:end="263:87"><name pos:start="263:28" pos:end="263:46">decode_subframe_lpc</name><argument_list pos:start="263:47" pos:end="263:87">(<argument pos:start="263:48" pos:end="263:48"><expr pos:start="263:48" pos:end="263:48"><name pos:start="263:48" pos:end="263:48">s</name></expr></argument>, <argument pos:start="263:51" pos:end="263:53"><expr pos:start="263:51" pos:end="263:53"><name pos:start="263:51" pos:end="263:53">cmd</name></expr></argument>, <argument pos:start="263:56" pos:end="263:62"><expr pos:start="263:56" pos:end="263:62"><name pos:start="263:56" pos:end="263:62">channel</name></expr></argument>, <argument pos:start="263:65" pos:end="263:77"><expr pos:start="263:65" pos:end="263:77"><name pos:start="263:65" pos:end="263:77">residual_size</name></expr></argument>, <argument pos:start="263:80" pos:end="263:86"><expr pos:start="263:80" pos:end="263:86"><name pos:start="263:80" pos:end="263:86">coffset</name></expr></argument>)</argument_list></call><operator pos:start="263:88" pos:end="263:88">)</operator> <operator pos:start="263:90" pos:end="263:90">&lt;</operator> <literal type="number" pos:start="263:92" pos:end="263:92">0</literal></expr>)</condition><block type="pseudo" pos:start="265:21" pos:end="265:31"><block_content pos:start="265:21" pos:end="265:31">

                    <return pos:start="265:21" pos:end="265:31">return <expr pos:start="265:28" pos:end="265:30"><name pos:start="265:28" pos:end="265:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="271:13" pos:end="271:63">/* update means with info from the current block */</comment>

            <if_stmt pos:start="273:13" pos:end="297:13"><if pos:start="273:13" pos:end="297:13">if <condition pos:start="273:16" pos:end="273:29">(<expr pos:start="273:17" pos:end="273:28"><name pos:start="273:17" pos:end="273:24"><name pos:start="273:17" pos:end="273:17">s</name><operator pos:start="273:18" pos:end="273:19">-&gt;</operator><name pos:start="273:20" pos:end="273:24">nmean</name></name> <operator pos:start="273:26" pos:end="273:26">&gt;</operator> <literal type="number" pos:start="273:28" pos:end="273:28">0</literal></expr>)</condition> <block pos:start="273:31" pos:end="297:13">{<block_content pos:start="275:17" pos:end="295:91">

                <decl_stmt pos:start="275:17" pos:end="275:70"><decl pos:start="275:17" pos:end="275:69"><type pos:start="275:17" pos:end="275:23"><name pos:start="275:17" pos:end="275:23">int32_t</name></type> <name pos:start="275:25" pos:end="275:27">sum</name> <init pos:start="275:29" pos:end="275:69">= <expr pos:start="275:31" pos:end="275:69"><ternary pos:start="275:31" pos:end="275:69"><condition pos:start="275:31" pos:end="275:48"><expr pos:start="275:31" pos:end="275:46"><operator pos:start="275:31" pos:end="275:31">(</operator><name pos:start="275:32" pos:end="275:41"><name pos:start="275:32" pos:end="275:32">s</name><operator pos:start="275:33" pos:end="275:34">-&gt;</operator><name pos:start="275:35" pos:end="275:41">version</name></name> <operator pos:start="275:43" pos:end="275:43">&lt;</operator> <literal type="number" pos:start="275:45" pos:end="275:45">2</literal><operator pos:start="275:46" pos:end="275:46">)</operator></expr> ?</condition><then pos:start="275:50" pos:end="275:50"> <expr pos:start="275:50" pos:end="275:50"><literal type="number" pos:start="275:50" pos:end="275:50">0</literal></expr> </then><else pos:start="275:52" pos:end="275:69">: <expr pos:start="275:54" pos:end="275:69"><name pos:start="275:54" pos:end="275:65"><name pos:start="275:54" pos:end="275:54">s</name><operator pos:start="275:55" pos:end="275:56">-&gt;</operator><name pos:start="275:57" pos:end="275:65">blocksize</name></name> <operator pos:start="275:67" pos:end="275:67">/</operator> <literal type="number" pos:start="275:69" pos:end="275:69">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <for pos:start="277:17" pos:end="279:50">for <control pos:start="277:21" pos:end="277:46">(<init pos:start="277:22" pos:end="277:25"><expr pos:start="277:22" pos:end="277:24"><name pos:start="277:22" pos:end="277:22">i</name><operator pos:start="277:23" pos:end="277:23">=</operator><literal type="number" pos:start="277:24" pos:end="277:24">0</literal></expr>;</init> <condition pos:start="277:27" pos:end="277:41"><expr pos:start="277:27" pos:end="277:40"><name pos:start="277:27" pos:end="277:27">i</name><operator pos:start="277:28" pos:end="277:28">&lt;</operator><name pos:start="277:29" pos:end="277:40"><name pos:start="277:29" pos:end="277:29">s</name><operator pos:start="277:30" pos:end="277:31">-&gt;</operator><name pos:start="277:32" pos:end="277:40">blocksize</name></name></expr>;</condition> <incr pos:start="277:43" pos:end="277:45"><expr pos:start="277:43" pos:end="277:45"><name pos:start="277:43" pos:end="277:43">i</name><operator pos:start="277:44" pos:end="277:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="279:21" pos:end="279:50"><block_content pos:start="279:21" pos:end="279:50">

                    <expr_stmt pos:start="279:21" pos:end="279:50"><expr pos:start="279:21" pos:end="279:49"><name pos:start="279:21" pos:end="279:23">sum</name> <operator pos:start="279:25" pos:end="279:26">+=</operator> <name pos:start="279:28" pos:end="279:49"><name pos:start="279:28" pos:end="279:28">s</name><operator pos:start="279:29" pos:end="279:30">-&gt;</operator><name pos:start="279:31" pos:end="279:37">decoded</name><index pos:start="279:38" pos:end="279:46">[<expr pos:start="279:39" pos:end="279:45"><name pos:start="279:39" pos:end="279:45">channel</name></expr>]</index><index pos:start="279:47" pos:end="279:49">[<expr pos:start="279:48" pos:end="279:48"><name pos:start="279:48" pos:end="279:48">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



                <for pos:start="283:17" pos:end="285:68">for <control pos:start="283:21" pos:end="283:42">(<init pos:start="283:22" pos:end="283:25"><expr pos:start="283:22" pos:end="283:24"><name pos:start="283:22" pos:end="283:22">i</name><operator pos:start="283:23" pos:end="283:23">=</operator><literal type="number" pos:start="283:24" pos:end="283:24">1</literal></expr>;</init> <condition pos:start="283:27" pos:end="283:37"><expr pos:start="283:27" pos:end="283:36"><name pos:start="283:27" pos:end="283:27">i</name><operator pos:start="283:28" pos:end="283:28">&lt;</operator><name pos:start="283:29" pos:end="283:36"><name pos:start="283:29" pos:end="283:29">s</name><operator pos:start="283:30" pos:end="283:31">-&gt;</operator><name pos:start="283:32" pos:end="283:36">nmean</name></name></expr>;</condition> <incr pos:start="283:39" pos:end="283:41"><expr pos:start="283:39" pos:end="283:41"><name pos:start="283:39" pos:end="283:39">i</name><operator pos:start="283:40" pos:end="283:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="285:21" pos:end="285:68"><block_content pos:start="285:21" pos:end="285:68">

                    <expr_stmt pos:start="285:21" pos:end="285:68"><expr pos:start="285:21" pos:end="285:67"><name pos:start="285:21" pos:end="285:43"><name pos:start="285:21" pos:end="285:21">s</name><operator pos:start="285:22" pos:end="285:23">-&gt;</operator><name pos:start="285:24" pos:end="285:29">offset</name><index pos:start="285:30" pos:end="285:38">[<expr pos:start="285:31" pos:end="285:37"><name pos:start="285:31" pos:end="285:37">channel</name></expr>]</index><index pos:start="285:39" pos:end="285:43">[<expr pos:start="285:40" pos:end="285:42"><name pos:start="285:40" pos:end="285:40">i</name><operator pos:start="285:41" pos:end="285:41">-</operator><literal type="number" pos:start="285:42" pos:end="285:42">1</literal></expr>]</index></name> <operator pos:start="285:45" pos:end="285:45">=</operator> <name pos:start="285:47" pos:end="285:67"><name pos:start="285:47" pos:end="285:47">s</name><operator pos:start="285:48" pos:end="285:49">-&gt;</operator><name pos:start="285:50" pos:end="285:55">offset</name><index pos:start="285:56" pos:end="285:64">[<expr pos:start="285:57" pos:end="285:63"><name pos:start="285:57" pos:end="285:63">channel</name></expr>]</index><index pos:start="285:65" pos:end="285:67">[<expr pos:start="285:66" pos:end="285:66"><name pos:start="285:66" pos:end="285:66">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



                <if_stmt pos:start="289:17" pos:end="295:91"><if pos:start="289:17" pos:end="291:74">if <condition pos:start="289:20" pos:end="289:35">(<expr pos:start="289:21" pos:end="289:34"><name pos:start="289:21" pos:end="289:30"><name pos:start="289:21" pos:end="289:21">s</name><operator pos:start="289:22" pos:end="289:23">-&gt;</operator><name pos:start="289:24" pos:end="289:30">version</name></name> <operator pos:start="289:32" pos:end="289:32">&lt;</operator> <literal type="number" pos:start="289:34" pos:end="289:34">2</literal></expr>)</condition><block type="pseudo" pos:start="291:21" pos:end="291:74"><block_content pos:start="291:21" pos:end="291:74">

                    <expr_stmt pos:start="291:21" pos:end="291:74"><expr pos:start="291:21" pos:end="291:73"><name pos:start="291:21" pos:end="291:52"><name pos:start="291:21" pos:end="291:21">s</name><operator pos:start="291:22" pos:end="291:23">-&gt;</operator><name pos:start="291:24" pos:end="291:29">offset</name><index pos:start="291:30" pos:end="291:38">[<expr pos:start="291:31" pos:end="291:37"><name pos:start="291:31" pos:end="291:37">channel</name></expr>]</index><index pos:start="291:39" pos:end="291:52">[<expr pos:start="291:40" pos:end="291:51"><name pos:start="291:40" pos:end="291:47"><name pos:start="291:40" pos:end="291:40">s</name><operator pos:start="291:41" pos:end="291:42">-&gt;</operator><name pos:start="291:43" pos:end="291:47">nmean</name></name> <operator pos:start="291:49" pos:end="291:49">-</operator> <literal type="number" pos:start="291:51" pos:end="291:51">1</literal></expr>]</index></name> <operator pos:start="291:54" pos:end="291:54">=</operator> <name pos:start="291:56" pos:end="291:58">sum</name> <operator pos:start="291:60" pos:end="291:60">/</operator> <name pos:start="291:62" pos:end="291:73"><name pos:start="291:62" pos:end="291:62">s</name><operator pos:start="291:63" pos:end="291:64">-&gt;</operator><name pos:start="291:65" pos:end="291:73">blocksize</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="293:17" pos:end="295:91">else<block type="pseudo" pos:start="295:21" pos:end="295:91"><block_content pos:start="295:21" pos:end="295:91">

                    <expr_stmt pos:start="295:21" pos:end="295:91"><expr pos:start="295:21" pos:end="295:90"><name pos:start="295:21" pos:end="295:52"><name pos:start="295:21" pos:end="295:21">s</name><operator pos:start="295:22" pos:end="295:23">-&gt;</operator><name pos:start="295:24" pos:end="295:29">offset</name><index pos:start="295:30" pos:end="295:38">[<expr pos:start="295:31" pos:end="295:37"><name pos:start="295:31" pos:end="295:37">channel</name></expr>]</index><index pos:start="295:39" pos:end="295:52">[<expr pos:start="295:40" pos:end="295:51"><name pos:start="295:40" pos:end="295:47"><name pos:start="295:40" pos:end="295:40">s</name><operator pos:start="295:41" pos:end="295:42">-&gt;</operator><name pos:start="295:43" pos:end="295:47">nmean</name></name> <operator pos:start="295:49" pos:end="295:49">-</operator> <literal type="number" pos:start="295:51" pos:end="295:51">1</literal></expr>]</index></name> <operator pos:start="295:54" pos:end="295:54">=</operator> <operator pos:start="295:56" pos:end="295:56">(</operator><name pos:start="295:57" pos:end="295:59">sum</name> <operator pos:start="295:61" pos:end="295:61">/</operator> <name pos:start="295:63" pos:end="295:74"><name pos:start="295:63" pos:end="295:63">s</name><operator pos:start="295:64" pos:end="295:65">-&gt;</operator><name pos:start="295:66" pos:end="295:74">blocksize</name></name><operator pos:start="295:75" pos:end="295:75">)</operator> <operator pos:start="295:77" pos:end="295:78">&lt;&lt;</operator> <name pos:start="295:80" pos:end="295:90"><name pos:start="295:80" pos:end="295:80">s</name><operator pos:start="295:81" pos:end="295:82">-&gt;</operator><name pos:start="295:83" pos:end="295:90">bitshift</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="301:13" pos:end="301:59">/* copy wrap samples for use with next block */</comment>

            <for pos:start="303:13" pos:end="305:79">for <control pos:start="303:17" pos:end="303:39">(<init pos:start="303:18" pos:end="303:29"><expr pos:start="303:18" pos:end="303:28"><name pos:start="303:18" pos:end="303:18">i</name><operator pos:start="303:19" pos:end="303:19">=</operator><operator pos:start="303:20" pos:end="303:20">-</operator><name pos:start="303:21" pos:end="303:28"><name pos:start="303:21" pos:end="303:21">s</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:28">nwrap</name></name></expr>;</init> <condition pos:start="303:31" pos:end="303:34"><expr pos:start="303:31" pos:end="303:33"><name pos:start="303:31" pos:end="303:31">i</name><operator pos:start="303:32" pos:end="303:32">&lt;</operator><literal type="number" pos:start="303:33" pos:end="303:33">0</literal></expr>;</condition> <incr pos:start="303:36" pos:end="303:38"><expr pos:start="303:36" pos:end="303:38"><name pos:start="303:36" pos:end="303:36">i</name><operator pos:start="303:37" pos:end="303:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="305:17" pos:end="305:79"><block_content pos:start="305:17" pos:end="305:79">

                <expr_stmt pos:start="305:17" pos:end="305:79"><expr pos:start="305:17" pos:end="305:78"><name pos:start="305:17" pos:end="305:38"><name pos:start="305:17" pos:end="305:17">s</name><operator pos:start="305:18" pos:end="305:19">-&gt;</operator><name pos:start="305:20" pos:end="305:26">decoded</name><index pos:start="305:27" pos:end="305:35">[<expr pos:start="305:28" pos:end="305:34"><name pos:start="305:28" pos:end="305:34">channel</name></expr>]</index><index pos:start="305:36" pos:end="305:38">[<expr pos:start="305:37" pos:end="305:37"><name pos:start="305:37" pos:end="305:37">i</name></expr>]</index></name> <operator pos:start="305:40" pos:end="305:40">=</operator> <name pos:start="305:42" pos:end="305:78"><name pos:start="305:42" pos:end="305:42">s</name><operator pos:start="305:43" pos:end="305:44">-&gt;</operator><name pos:start="305:45" pos:end="305:51">decoded</name><index pos:start="305:52" pos:end="305:60">[<expr pos:start="305:53" pos:end="305:59"><name pos:start="305:53" pos:end="305:59">channel</name></expr>]</index><index pos:start="305:61" pos:end="305:78">[<expr pos:start="305:62" pos:end="305:77"><name pos:start="305:62" pos:end="305:62">i</name> <operator pos:start="305:64" pos:end="305:64">+</operator> <name pos:start="305:66" pos:end="305:77"><name pos:start="305:66" pos:end="305:66">s</name><operator pos:start="305:67" pos:end="305:68">-&gt;</operator><name pos:start="305:69" pos:end="305:77">blocksize</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



            <comment type="block" pos:start="309:13" pos:end="311:33">/* shift samples to add in unused zero bits which were removed

               during encoding */</comment>

            <expr_stmt pos:start="313:13" pos:end="313:49"><expr pos:start="313:13" pos:end="313:48"><call pos:start="313:13" pos:end="313:48"><name pos:start="313:13" pos:end="313:24">fix_bitshift</name><argument_list pos:start="313:25" pos:end="313:48">(<argument pos:start="313:26" pos:end="313:26"><expr pos:start="313:26" pos:end="313:26"><name pos:start="313:26" pos:end="313:26">s</name></expr></argument>, <argument pos:start="313:29" pos:end="313:47"><expr pos:start="313:29" pos:end="313:47"><name pos:start="313:29" pos:end="313:47"><name pos:start="313:29" pos:end="313:29">s</name><operator pos:start="313:30" pos:end="313:31">-&gt;</operator><name pos:start="313:32" pos:end="313:38">decoded</name><index pos:start="313:39" pos:end="313:47">[<expr pos:start="313:40" pos:end="313:46"><name pos:start="313:40" pos:end="313:46">channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="317:13" pos:end="317:78">/* if this is the last channel in the block, output the samples */</comment>

            <expr_stmt pos:start="319:13" pos:end="319:26"><expr pos:start="319:13" pos:end="319:25"><name pos:start="319:13" pos:end="319:23"><name pos:start="319:13" pos:end="319:13">s</name><operator pos:start="319:14" pos:end="319:15">-&gt;</operator><name pos:start="319:16" pos:end="319:23">cur_chan</name></name><operator pos:start="319:24" pos:end="319:25">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="321:13" pos:end="333:13"><if pos:start="321:13" pos:end="329:13">if <condition pos:start="321:16" pos:end="321:43">(<expr pos:start="321:17" pos:end="321:42"><name pos:start="321:17" pos:end="321:27"><name pos:start="321:17" pos:end="321:17">s</name><operator pos:start="321:18" pos:end="321:19">-&gt;</operator><name pos:start="321:20" pos:end="321:27">cur_chan</name></name> <operator pos:start="321:29" pos:end="321:30">==</operator> <name pos:start="321:32" pos:end="321:42"><name pos:start="321:32" pos:end="321:32">s</name><operator pos:start="321:33" pos:end="321:34">-&gt;</operator><name pos:start="321:35" pos:end="321:42">channels</name></name></expr>)</condition> <block pos:start="321:45" pos:end="329:13">{<block_content pos:start="323:17" pos:end="327:64">

                <expr_stmt pos:start="323:17" pos:end="323:92"><expr pos:start="323:17" pos:end="323:91"><name pos:start="323:17" pos:end="323:23">samples</name> <operator pos:start="323:25" pos:end="323:25">=</operator> <call pos:start="323:27" pos:end="323:91"><name pos:start="323:27" pos:end="323:43">interleave_buffer</name><argument_list pos:start="323:44" pos:end="323:91">(<argument pos:start="323:45" pos:end="323:51"><expr pos:start="323:45" pos:end="323:51"><name pos:start="323:45" pos:end="323:51">samples</name></expr></argument>, <argument pos:start="323:54" pos:end="323:64"><expr pos:start="323:54" pos:end="323:64"><name pos:start="323:54" pos:end="323:64"><name pos:start="323:54" pos:end="323:54">s</name><operator pos:start="323:55" pos:end="323:56">-&gt;</operator><name pos:start="323:57" pos:end="323:64">channels</name></name></expr></argument>, <argument pos:start="323:67" pos:end="323:78"><expr pos:start="323:67" pos:end="323:78"><name pos:start="323:67" pos:end="323:78"><name pos:start="323:67" pos:end="323:67">s</name><operator pos:start="323:68" pos:end="323:69">-&gt;</operator><name pos:start="323:70" pos:end="323:78">blocksize</name></name></expr></argument>, <argument pos:start="323:81" pos:end="323:90"><expr pos:start="323:81" pos:end="323:90"><name pos:start="323:81" pos:end="323:90"><name pos:start="323:81" pos:end="323:81">s</name><operator pos:start="323:82" pos:end="323:83">-&gt;</operator><name pos:start="323:84" pos:end="323:90">decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:32"><expr pos:start="325:17" pos:end="325:31"><name pos:start="325:17" pos:end="325:27"><name pos:start="325:17" pos:end="325:17">s</name><operator pos:start="325:18" pos:end="325:19">-&gt;</operator><name pos:start="325:20" pos:end="325:27">cur_chan</name></name> <operator pos:start="325:29" pos:end="325:29">=</operator> <literal type="number" pos:start="325:31" pos:end="325:31">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:64"><expr pos:start="327:17" pos:end="327:63"><operator pos:start="327:17" pos:end="327:17">*</operator><name pos:start="327:18" pos:end="327:26">data_size</name> <operator pos:start="327:28" pos:end="327:28">=</operator> <operator pos:start="327:30" pos:end="327:30">(</operator><name pos:start="327:31" pos:end="327:36">int8_t</name> <operator pos:start="327:38" pos:end="327:38">*</operator><operator pos:start="327:39" pos:end="327:39">)</operator><name pos:start="327:40" pos:end="327:46">samples</name> <operator pos:start="327:48" pos:end="327:48">-</operator> <operator pos:start="327:50" pos:end="327:50">(</operator><name pos:start="327:51" pos:end="327:56">int8_t</name> <operator pos:start="327:58" pos:end="327:58">*</operator><operator pos:start="327:59" pos:end="327:59">)</operator><name pos:start="327:60" pos:end="327:63">data</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="329:15" pos:end="333:13">else <block pos:start="329:20" pos:end="333:13">{<block_content pos:start="331:17" pos:end="331:31">

                <expr_stmt pos:start="331:17" pos:end="331:31"><expr pos:start="331:17" pos:end="331:30"><operator pos:start="331:17" pos:end="331:17">*</operator><name pos:start="331:18" pos:end="331:26">data_size</name> <operator pos:start="331:28" pos:end="331:28">=</operator> <literal type="number" pos:start="331:30" pos:end="331:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="341:5" pos:end="341:74"><expr pos:start="341:5" pos:end="341:73"><name pos:start="341:5" pos:end="341:15"><name pos:start="341:5" pos:end="341:5">s</name><operator pos:start="341:6" pos:end="341:7">-&gt;</operator><name pos:start="341:8" pos:end="341:15">bitindex</name></name> <operator pos:start="341:17" pos:end="341:17">=</operator> <call pos:start="341:19" pos:end="341:40"><name pos:start="341:19" pos:end="341:32">get_bits_count</name><argument_list pos:start="341:33" pos:end="341:40">(<argument pos:start="341:34" pos:end="341:39"><expr pos:start="341:34" pos:end="341:39"><operator pos:start="341:34" pos:end="341:34">&amp;</operator><name pos:start="341:35" pos:end="341:39"><name pos:start="341:35" pos:end="341:35">s</name><operator pos:start="341:36" pos:end="341:37">-&gt;</operator><name pos:start="341:38" pos:end="341:39">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="341:42" pos:end="341:42">-</operator> <literal type="number" pos:start="341:44" pos:end="341:44">8</literal><operator pos:start="341:45" pos:end="341:45">*</operator><operator pos:start="341:46" pos:end="341:46">(</operator><operator pos:start="341:47" pos:end="341:47">(</operator><call pos:start="341:48" pos:end="341:69"><name pos:start="341:48" pos:end="341:61">get_bits_count</name><argument_list pos:start="341:62" pos:end="341:69">(<argument pos:start="341:63" pos:end="341:68"><expr pos:start="341:63" pos:end="341:68"><operator pos:start="341:63" pos:end="341:63">&amp;</operator><name pos:start="341:64" pos:end="341:68"><name pos:start="341:64" pos:end="341:64">s</name><operator pos:start="341:65" pos:end="341:66">-&gt;</operator><name pos:start="341:67" pos:end="341:68">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="341:70" pos:end="341:70">)</operator><operator pos:start="341:71" pos:end="341:71">/</operator><literal type="number" pos:start="341:72" pos:end="341:72">8</literal><operator pos:start="341:73" pos:end="341:73">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="343:34"><expr pos:start="343:5" pos:end="343:33"><name pos:start="343:5" pos:end="343:5">i</name><operator pos:start="343:6" pos:end="343:6">=</operator> <operator pos:start="343:8" pos:end="343:8">(</operator><call pos:start="343:9" pos:end="343:30"><name pos:start="343:9" pos:end="343:22">get_bits_count</name><argument_list pos:start="343:23" pos:end="343:30">(<argument pos:start="343:24" pos:end="343:29"><expr pos:start="343:24" pos:end="343:29"><operator pos:start="343:24" pos:end="343:24">&amp;</operator><name pos:start="343:25" pos:end="343:29"><name pos:start="343:25" pos:end="343:25">s</name><operator pos:start="343:26" pos:end="343:27">-&gt;</operator><name pos:start="343:28" pos:end="343:29">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="343:31" pos:end="343:31">)</operator><operator pos:start="343:32" pos:end="343:32">/</operator><literal type="number" pos:start="343:33" pos:end="343:33">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="345:5" pos:end="355:5"><if pos:start="345:5" pos:end="355:5">if <condition pos:start="345:8" pos:end="345:21">(<expr pos:start="345:9" pos:end="345:20"><name pos:start="345:9" pos:end="345:9">i</name> <operator pos:start="345:11" pos:end="345:11">&gt;</operator> <name pos:start="345:13" pos:end="345:20">buf_size</name></expr>)</condition> <block pos:start="345:23" pos:end="355:5">{<block_content pos:start="347:9" pos:end="353:18">

        <expr_stmt pos:start="347:9" pos:end="347:71"><expr pos:start="347:9" pos:end="347:70"><call pos:start="347:9" pos:end="347:70"><name pos:start="347:9" pos:end="347:14">av_log</name><argument_list pos:start="347:15" pos:end="347:70">(<argument pos:start="347:16" pos:end="347:23"><expr pos:start="347:16" pos:end="347:23"><name pos:start="347:16" pos:end="347:23"><name pos:start="347:16" pos:end="347:16">s</name><operator pos:start="347:17" pos:end="347:18">-&gt;</operator><name pos:start="347:19" pos:end="347:23">avctx</name></name></expr></argument>, <argument pos:start="347:26" pos:end="347:37"><expr pos:start="347:26" pos:end="347:37"><name pos:start="347:26" pos:end="347:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="347:40" pos:end="347:55"><expr pos:start="347:40" pos:end="347:55"><literal type="string" pos:start="347:40" pos:end="347:55">"overread: %d\n"</literal></expr></argument>, <argument pos:start="347:58" pos:end="347:69"><expr pos:start="347:58" pos:end="347:69"><name pos:start="347:58" pos:end="347:58">i</name> <operator pos:start="347:60" pos:end="347:60">-</operator> <name pos:start="347:62" pos:end="347:69">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:28"><expr pos:start="349:9" pos:end="349:27"><name pos:start="349:9" pos:end="349:25"><name pos:start="349:9" pos:end="349:9">s</name><operator pos:start="349:10" pos:end="349:11">-&gt;</operator><name pos:start="349:12" pos:end="349:25">bitstream_size</name></name><operator pos:start="349:26" pos:end="349:26">=</operator><literal type="number" pos:start="349:27" pos:end="349:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:29"><expr pos:start="351:9" pos:end="351:28"><name pos:start="351:9" pos:end="351:26"><name pos:start="351:9" pos:end="351:9">s</name><operator pos:start="351:10" pos:end="351:11">-&gt;</operator><name pos:start="351:12" pos:end="351:26">bitstream_index</name></name><operator pos:start="351:27" pos:end="351:27">=</operator><literal type="number" pos:start="351:28" pos:end="351:28">0</literal></expr>;</expr_stmt>

        <return pos:start="353:9" pos:end="353:18">return <expr pos:start="353:16" pos:end="353:17"><operator pos:start="353:16" pos:end="353:16">-</operator><literal type="number" pos:start="353:17" pos:end="353:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="357:5" pos:end="367:17"><if pos:start="357:5" pos:end="365:5">if <condition pos:start="357:8" pos:end="357:26">(<expr pos:start="357:9" pos:end="357:25"><name pos:start="357:9" pos:end="357:25"><name pos:start="357:9" pos:end="357:9">s</name><operator pos:start="357:10" pos:end="357:11">-&gt;</operator><name pos:start="357:12" pos:end="357:25">bitstream_size</name></name></expr>)</condition> <block pos:start="357:28" pos:end="365:5">{<block_content pos:start="359:9" pos:end="363:30">

        <expr_stmt pos:start="359:9" pos:end="359:32"><expr pos:start="359:9" pos:end="359:31"><name pos:start="359:9" pos:end="359:26"><name pos:start="359:9" pos:end="359:9">s</name><operator pos:start="359:10" pos:end="359:11">-&gt;</operator><name pos:start="359:12" pos:end="359:26">bitstream_index</name></name> <operator pos:start="359:28" pos:end="359:29">+=</operator> <name pos:start="359:31" pos:end="359:31">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="361:9" pos:end="361:32"><expr pos:start="361:9" pos:end="361:31"><name pos:start="361:9" pos:end="361:25"><name pos:start="361:9" pos:end="361:9">s</name><operator pos:start="361:10" pos:end="361:11">-&gt;</operator><name pos:start="361:12" pos:end="361:25">bitstream_size</name></name>  <operator pos:start="361:28" pos:end="361:29">-=</operator> <name pos:start="361:31" pos:end="361:31">i</name></expr>;</expr_stmt>

        <return pos:start="363:9" pos:end="363:30">return <expr pos:start="363:16" pos:end="363:29"><name pos:start="363:16" pos:end="363:29">input_buf_size</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="365:7" pos:end="367:17">else<block type="pseudo" pos:start="367:9" pos:end="367:17"><block_content pos:start="367:9" pos:end="367:17">

        <return pos:start="367:9" pos:end="367:17">return <expr pos:start="367:16" pos:end="367:16"><name pos:start="367:16" pos:end="367:16">i</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
