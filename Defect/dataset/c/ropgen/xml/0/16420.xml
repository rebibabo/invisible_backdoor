<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16420.c" pos:tabs="8"><function pos:start="1:1" pos:end="525:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">vfio_probe_igd_bar4_quirk</name><parameter_list pos:start="1:38" pos:end="1:66">(<parameter pos:start="1:39" pos:end="1:57"><decl pos:start="1:39" pos:end="1:57"><type pos:start="1:39" pos:end="1:57"><name pos:start="1:39" pos:end="1:51">VFIOPCIDevice</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">vdev</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:65"><decl pos:start="1:60" pos:end="1:65"><type pos:start="1:60" pos:end="1:65"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:65">nr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="525:1">{<block_content pos:start="5:5" pos:end="523:16">

    <decl_stmt pos:start="5:5" pos:end="7:54"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:27">vfio_region_info</name></name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:32">rom</name> <init pos:start="5:34" pos:end="5:39">= <expr pos:start="5:36" pos:end="5:39"><name pos:start="5:36" pos:end="5:39">NULL</name></expr></init></decl>, <decl pos:start="5:42" pos:end="5:57"><type ref="prev" pos:start="5:5" pos:end="5:29"><modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:50">opregion</name> <init pos:start="5:52" pos:end="5:57">= <expr pos:start="5:54" pos:end="5:57"><name pos:start="5:54" pos:end="5:57">NULL</name></expr></init></decl>,

                            <decl pos:start="7:29" pos:end="7:40"><type ref="prev" pos:start="5:5" pos:end="5:29"><modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:33">host</name> <init pos:start="7:35" pos:end="7:40">= <expr pos:start="7:37" pos:end="7:40"><name pos:start="7:37" pos:end="7:40">NULL</name></expr></init></decl>, <decl pos:start="7:43" pos:end="7:53"><type ref="prev" pos:start="5:5" pos:end="5:29"><modifier pos:start="7:43" pos:end="7:43">*</modifier></type><name pos:start="7:44" pos:end="7:46">lpc</name> <init pos:start="7:48" pos:end="7:53">= <expr pos:start="7:50" pos:end="7:53"><name pos:start="7:50" pos:end="7:53">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">VFIOQuirk</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:20">quirk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">VFIOIGDQuirk</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">igd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">PCIDevice</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:25">lpc_bridge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:14">ret</name></decl>, <decl pos:start="15:17" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:23">ggms_mb</name></decl>, <decl pos:start="15:26" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:26" pos:end="15:31">gms_mb</name> <init pos:start="15:33" pos:end="15:35">= <expr pos:start="15:35" pos:end="15:35"><literal type="number" pos:start="15:35" pos:end="15:35">0</literal></expr></init></decl>, <decl pos:start="15:38" pos:end="15:40"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:38" pos:end="15:40">gen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">uint64_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:23">bdsm_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:17">gmch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint16_t</name></type> <name pos:start="21:14" pos:end="21:21">cmd_orig</name></decl>, <decl pos:start="21:24" pos:end="21:26"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:24" pos:end="21:26">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:14">err</name> <init pos:start="23:16" pos:end="23:21">= <expr pos:start="23:18" pos:end="23:21"><name pos:start="23:18" pos:end="23:21">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:43">/* This must be an Intel VGA device. */</comment>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="31:38">(<expr pos:start="29:9" pos:end="31:37"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:59"><name pos:start="29:10" pos:end="29:20">vfio_pci_is</name><argument_list pos:start="29:21" pos:end="29:59">(<argument pos:start="29:22" pos:end="29:25"><expr pos:start="29:22" pos:end="29:25"><name pos:start="29:22" pos:end="29:25">vdev</name></expr></argument>, <argument pos:start="29:28" pos:end="29:46"><expr pos:start="29:28" pos:end="29:46"><name pos:start="29:28" pos:end="29:46">PCI_VENDOR_ID_INTEL</name></expr></argument>, <argument pos:start="29:49" pos:end="29:58"><expr pos:start="29:49" pos:end="29:58"><name pos:start="29:49" pos:end="29:58">PCI_ANY_ID</name></expr></argument>)</argument_list></call> <operator pos:start="29:61" pos:end="29:62">||</operator>

        <operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:20">vfio_is_vga</name><argument_list pos:start="31:21" pos:end="31:26">(<argument pos:start="31:22" pos:end="31:25"><expr pos:start="31:22" pos:end="31:25"><name pos:start="31:22" pos:end="31:25">vdev</name></expr></argument>)</argument_list></call> <operator pos:start="31:28" pos:end="31:29">||</operator> <name pos:start="31:31" pos:end="31:32">nr</name> <operator pos:start="31:34" pos:end="31:35">!=</operator> <literal type="number" pos:start="31:37" pos:end="31:37">4</literal></expr>)</condition> <block pos:start="31:40" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:15">

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="47:7">/*

     * IGD is not a standard, they like to change their specs often.  We

     * only attempt to support back to SandBridge and we hope that newer

     * devices maintain compatibility with generation 8.

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:24"><expr pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:7">gen</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:23"><name pos:start="49:11" pos:end="49:17">igd_gen</name><argument_list pos:start="49:18" pos:end="49:23">(<argument pos:start="49:19" pos:end="49:22"><expr pos:start="49:19" pos:end="49:22"><name pos:start="49:19" pos:end="49:22">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:29">(<expr pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:11">gen</name> <operator pos:start="51:13" pos:end="51:14">!=</operator> <literal type="number" pos:start="51:16" pos:end="51:16">6</literal> <operator pos:start="51:18" pos:end="51:19">&amp;&amp;</operator> <name pos:start="51:21" pos:end="51:23">gen</name> <operator pos:start="51:25" pos:end="51:26">!=</operator> <literal type="number" pos:start="51:28" pos:end="51:28">8</literal></expr>)</condition> <block pos:start="51:31" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:15">

        <expr_stmt pos:start="53:9" pos:end="55:70"><expr pos:start="53:9" pos:end="55:69"><call pos:start="53:9" pos:end="55:69"><name pos:start="53:9" pos:end="53:20">error_report</name><argument_list pos:start="53:21" pos:end="55:69">(<argument pos:start="53:22" pos:end="55:47"><expr pos:start="53:22" pos:end="55:47"><literal type="string" pos:start="53:22" pos:end="53:67">"IGD device %s is unsupported by IGD quirks, "</literal>

                     <literal type="string" pos:start="55:22" pos:end="55:47">"try SandyBridge or newer"</literal></expr></argument>, <argument pos:start="55:50" pos:end="55:68"><expr pos:start="55:50" pos:end="55:68"><name pos:start="55:50" pos:end="55:68"><name pos:start="55:50" pos:end="55:53">vdev</name><operator pos:start="55:54" pos:end="55:55">-&gt;</operator><name pos:start="55:56" pos:end="55:63">vbasedev</name><operator pos:start="55:64" pos:end="55:64">.</operator><name pos:start="55:65" pos:end="55:68">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="77:7">/*

     * Regardless of running in UPT or legacy mode, the guest graphics

     * driver may attempt to use stolen memory, however only legacy mode

     * has BIOS support for reserving stolen memory in the guest VM.

     * Emulate the GMCH register in all cases and zero out the stolen

     * memory size here. Legacy mode may request allocation and re-write

     * this below.

     */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:58"><expr pos:start="79:5" pos:end="79:57"><name pos:start="79:5" pos:end="79:8">gmch</name> <operator pos:start="79:10" pos:end="79:10">=</operator> <call pos:start="79:12" pos:end="79:57"><name pos:start="79:12" pos:end="79:31">vfio_pci_read_config</name><argument_list pos:start="79:32" pos:end="79:57">(<argument pos:start="79:33" pos:end="79:43"><expr pos:start="79:33" pos:end="79:43"><operator pos:start="79:33" pos:end="79:33">&amp;</operator><name pos:start="79:34" pos:end="79:43"><name pos:start="79:34" pos:end="79:37">vdev</name><operator pos:start="79:38" pos:end="79:39">-&gt;</operator><name pos:start="79:40" pos:end="79:43">pdev</name></name></expr></argument>, <argument pos:start="79:46" pos:end="79:53"><expr pos:start="79:46" pos:end="79:53"><name pos:start="79:46" pos:end="79:53">IGD_GMCH</name></expr></argument>, <argument pos:start="79:56" pos:end="79:56"><expr pos:start="79:56" pos:end="79:56"><literal type="number" pos:start="79:56" pos:end="79:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:60"><expr pos:start="81:5" pos:end="81:59"><name pos:start="81:5" pos:end="81:8">gmch</name> <operator pos:start="81:10" pos:end="81:11">&amp;=</operator> <operator pos:start="81:13" pos:end="81:13">~</operator><operator pos:start="81:14" pos:end="81:14">(</operator><operator pos:start="81:15" pos:end="81:15">(</operator><ternary pos:start="81:16" pos:end="81:36"><condition pos:start="81:16" pos:end="81:24"><expr pos:start="81:16" pos:end="81:22"><name pos:start="81:16" pos:end="81:18">gen</name> <operator pos:start="81:20" pos:end="81:20">&lt;</operator> <literal type="number" pos:start="81:22" pos:end="81:22">8</literal></expr> ?</condition><then pos:start="81:26" pos:end="81:29"> <expr pos:start="81:26" pos:end="81:29"><literal type="number" pos:start="81:26" pos:end="81:29">0x1f</literal></expr> </then><else pos:start="81:31" pos:end="81:36">: <expr pos:start="81:33" pos:end="81:36"><literal type="number" pos:start="81:33" pos:end="81:36">0xff</literal></expr></else></ternary><operator pos:start="81:37" pos:end="81:37">)</operator> <operator pos:start="81:39" pos:end="81:40">&lt;&lt;</operator> <operator pos:start="81:42" pos:end="81:42">(</operator><ternary pos:start="81:43" pos:end="81:57"><condition pos:start="81:43" pos:end="81:51"><expr pos:start="81:43" pos:end="81:49"><name pos:start="81:43" pos:end="81:45">gen</name> <operator pos:start="81:47" pos:end="81:47">&lt;</operator> <literal type="number" pos:start="81:49" pos:end="81:49">8</literal></expr> ?</condition><then pos:start="81:53" pos:end="81:53"> <expr pos:start="81:53" pos:end="81:53"><literal type="number" pos:start="81:53" pos:end="81:53">3</literal></expr> </then><else pos:start="81:55" pos:end="81:57">: <expr pos:start="81:57" pos:end="81:57"><literal type="number" pos:start="81:57" pos:end="81:57">8</literal></expr></else></ternary><operator pos:start="81:58" pos:end="81:58">)</operator><operator pos:start="81:59" pos:end="81:59">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:37">/* GMCH is read-only, emulated */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:53"><expr pos:start="87:5" pos:end="87:52"><call pos:start="87:5" pos:end="87:52"><name pos:start="87:5" pos:end="87:16">pci_set_long</name><argument_list pos:start="87:17" pos:end="87:52">(<argument pos:start="87:18" pos:end="87:45"><expr pos:start="87:18" pos:end="87:45"><name pos:start="87:18" pos:end="87:34"><name pos:start="87:18" pos:end="87:21">vdev</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:27">pdev</name><operator pos:start="87:28" pos:end="87:28">.</operator><name pos:start="87:29" pos:end="87:34">config</name></name> <operator pos:start="87:36" pos:end="87:36">+</operator> <name pos:start="87:38" pos:end="87:45">IGD_GMCH</name></expr></argument>, <argument pos:start="87:48" pos:end="87:51"><expr pos:start="87:48" pos:end="87:51"><name pos:start="87:48" pos:end="87:51">gmch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:49"><expr pos:start="89:5" pos:end="89:48"><call pos:start="89:5" pos:end="89:48"><name pos:start="89:5" pos:end="89:16">pci_set_long</name><argument_list pos:start="89:17" pos:end="89:48">(<argument pos:start="89:18" pos:end="89:44"><expr pos:start="89:18" pos:end="89:44"><name pos:start="89:18" pos:end="89:33"><name pos:start="89:18" pos:end="89:21">vdev</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:27">pdev</name><operator pos:start="89:28" pos:end="89:28">.</operator><name pos:start="89:29" pos:end="89:33">wmask</name></name> <operator pos:start="89:35" pos:end="89:35">+</operator> <name pos:start="89:37" pos:end="89:44">IGD_GMCH</name></expr></argument>, <argument pos:start="89:47" pos:end="89:47"><expr pos:start="89:47" pos:end="89:47"><literal type="number" pos:start="89:47" pos:end="89:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:60"><expr pos:start="91:5" pos:end="91:59"><call pos:start="91:5" pos:end="91:59"><name pos:start="91:5" pos:end="91:16">pci_set_long</name><argument_list pos:start="91:17" pos:end="91:59">(<argument pos:start="91:18" pos:end="91:54"><expr pos:start="91:18" pos:end="91:54"><name pos:start="91:18" pos:end="91:43"><name pos:start="91:18" pos:end="91:21">vdev</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:43">emulated_config_bits</name></name> <operator pos:start="91:45" pos:end="91:45">+</operator> <name pos:start="91:47" pos:end="91:54">IGD_GMCH</name></expr></argument>, <argument pos:start="91:57" pos:end="91:58"><expr pos:start="91:57" pos:end="91:58"><operator pos:start="91:57" pos:end="91:57">~</operator><literal type="number" pos:start="91:58" pos:end="91:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="101:7">/*

     * This must be at address 00:02.0 for us to even onsider enabling

     * legacy mode.  The vBIOS has dependencies on the PCI bus address.

     */</comment>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="105:61">(<expr pos:start="103:9" pos:end="105:60"><operator pos:start="103:9" pos:end="103:9">&amp;</operator><name pos:start="103:10" pos:end="103:19"><name pos:start="103:10" pos:end="103:13">vdev</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:19">pdev</name></name> <operator pos:start="103:21" pos:end="103:22">!=</operator> <call pos:start="103:24" pos:end="105:60"><name pos:start="103:24" pos:end="103:38">pci_find_device</name><argument_list pos:start="103:39" pos:end="105:60">(<argument pos:start="103:40" pos:end="103:71"><expr pos:start="103:40" pos:end="103:71"><call pos:start="103:40" pos:end="103:71"><name pos:start="103:40" pos:end="103:58">pci_device_root_bus</name><argument_list pos:start="103:59" pos:end="103:71">(<argument pos:start="103:60" pos:end="103:70"><expr pos:start="103:60" pos:end="103:70"><operator pos:start="103:60" pos:end="103:60">&amp;</operator><name pos:start="103:61" pos:end="103:70"><name pos:start="103:61" pos:end="103:64">vdev</name><operator pos:start="103:65" pos:end="103:66">-&gt;</operator><name pos:start="103:67" pos:end="103:70">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="105:40" pos:end="105:40"><expr pos:start="105:40" pos:end="105:40"><literal type="number" pos:start="105:40" pos:end="105:40">0</literal></expr></argument>, <argument pos:start="105:43" pos:end="105:59"><expr pos:start="105:43" pos:end="105:59"><call pos:start="105:43" pos:end="105:59"><name pos:start="105:43" pos:end="105:51">PCI_DEVFN</name><argument_list pos:start="105:52" pos:end="105:59">(<argument pos:start="105:53" pos:end="105:55"><expr pos:start="105:53" pos:end="105:55"><literal type="number" pos:start="105:53" pos:end="105:55">0x2</literal></expr></argument>, <argument pos:start="105:58" pos:end="105:58"><expr pos:start="105:58" pos:end="105:58"><literal type="number" pos:start="105:58" pos:end="105:58">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:63" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:15">

        <return pos:start="107:9" pos:end="107:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="121:7">/*

     * We need to create an LPC/ISA bridge at PCI bus address 00:1f.0 that we

     * can stuff host values into, so if there's already one there and it's not

     * one we can hack on, legacy mode is no-go.  Sorry Q35.

     */</comment>

    <expr_stmt pos:start="123:5" pos:end="125:56"><expr pos:start="123:5" pos:end="125:55"><name pos:start="123:5" pos:end="123:14">lpc_bridge</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <call pos:start="123:18" pos:end="125:55"><name pos:start="123:18" pos:end="123:32">pci_find_device</name><argument_list pos:start="123:33" pos:end="125:55">(<argument pos:start="123:34" pos:end="123:65"><expr pos:start="123:34" pos:end="123:65"><call pos:start="123:34" pos:end="123:65"><name pos:start="123:34" pos:end="123:52">pci_device_root_bus</name><argument_list pos:start="123:53" pos:end="123:65">(<argument pos:start="123:54" pos:end="123:64"><expr pos:start="123:54" pos:end="123:64"><operator pos:start="123:54" pos:end="123:54">&amp;</operator><name pos:start="123:55" pos:end="123:64"><name pos:start="123:55" pos:end="123:58">vdev</name><operator pos:start="123:59" pos:end="123:60">-&gt;</operator><name pos:start="123:61" pos:end="123:64">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="125:34" pos:end="125:34"><expr pos:start="125:34" pos:end="125:34"><literal type="number" pos:start="125:34" pos:end="125:34">0</literal></expr></argument>, <argument pos:start="125:37" pos:end="125:54"><expr pos:start="125:37" pos:end="125:54"><call pos:start="125:37" pos:end="125:54"><name pos:start="125:37" pos:end="125:45">PCI_DEVFN</name><argument_list pos:start="125:46" pos:end="125:54">(<argument pos:start="125:47" pos:end="125:50"><expr pos:start="125:47" pos:end="125:50"><literal type="number" pos:start="125:47" pos:end="125:50">0x1f</literal></expr></argument>, <argument pos:start="125:53" pos:end="125:53"><expr pos:start="125:53" pos:end="125:53"><literal type="number" pos:start="125:53" pos:end="125:53">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="137:5"><if pos:start="127:5" pos:end="137:5">if <condition pos:start="127:8" pos:end="129:70">(<expr pos:start="127:9" pos:end="129:69"><name pos:start="127:9" pos:end="127:18">lpc_bridge</name> <operator pos:start="127:20" pos:end="127:21">&amp;&amp;</operator> <operator pos:start="127:23" pos:end="127:23">!</operator><call pos:start="127:24" pos:end="129:69"><name pos:start="127:24" pos:end="127:42">object_dynamic_cast</name><argument_list pos:start="127:43" pos:end="129:69">(<argument pos:start="127:44" pos:end="127:61"><expr pos:start="127:44" pos:end="127:61"><call pos:start="127:44" pos:end="127:61"><name pos:start="127:44" pos:end="127:49">OBJECT</name><argument_list pos:start="127:50" pos:end="127:61">(<argument pos:start="127:51" pos:end="127:60"><expr pos:start="127:51" pos:end="127:60"><name pos:start="127:51" pos:end="127:60">lpc_bridge</name></expr></argument>)</argument_list></call></expr></argument>,

                                           <argument pos:start="129:44" pos:end="129:68"><expr pos:start="129:44" pos:end="129:68"><literal type="string" pos:start="129:44" pos:end="129:68">"vfio-pci-igd-lpc-bridge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:72" pos:end="137:5">{<block_content pos:start="131:9" pos:end="135:15">

        <expr_stmt pos:start="131:9" pos:end="133:69"><expr pos:start="131:9" pos:end="133:68"><call pos:start="131:9" pos:end="133:68"><name pos:start="131:9" pos:end="131:20">error_report</name><argument_list pos:start="131:21" pos:end="133:68">(<argument pos:start="131:22" pos:end="133:46"><expr pos:start="131:22" pos:end="133:46"><literal type="string" pos:start="131:22" pos:end="131:80">"IGD device %s cannot support legacy mode due to existing "</literal>

                     <literal type="string" pos:start="133:22" pos:end="133:46">"devices at address 1f.0"</literal></expr></argument>, <argument pos:start="133:49" pos:end="133:67"><expr pos:start="133:49" pos:end="133:67"><name pos:start="133:49" pos:end="133:67"><name pos:start="133:49" pos:end="133:52">vdev</name><operator pos:start="133:53" pos:end="133:54">-&gt;</operator><name pos:start="133:55" pos:end="133:62">vbasedev</name><operator pos:start="133:63" pos:end="133:63">.</operator><name pos:start="133:64" pos:end="133:67">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="135:9" pos:end="135:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="141:5" pos:end="149:7">/*

     * Most of what we're doing here is to enable the ROM to run, so if

     * there's no ROM, there's no point in setting up this quirk.

     * NB. We only seem to get BIOS ROMs, so a UEFI VM would need CSM support.

     */</comment>

    <expr_stmt pos:start="151:5" pos:end="153:64"><expr pos:start="151:5" pos:end="153:63"><name pos:start="151:5" pos:end="151:7">ret</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <call pos:start="151:11" pos:end="153:63"><name pos:start="151:11" pos:end="151:30">vfio_get_region_info</name><argument_list pos:start="151:31" pos:end="153:63">(<argument pos:start="151:32" pos:end="151:46"><expr pos:start="151:32" pos:end="151:46"><operator pos:start="151:32" pos:end="151:32">&amp;</operator><name pos:start="151:33" pos:end="151:46"><name pos:start="151:33" pos:end="151:36">vdev</name><operator pos:start="151:37" pos:end="151:38">-&gt;</operator><name pos:start="151:39" pos:end="151:46">vbasedev</name></name></expr></argument>,

                               <argument pos:start="153:32" pos:end="153:56"><expr pos:start="153:32" pos:end="153:56"><name pos:start="153:32" pos:end="153:56">VFIO_PCI_ROM_REGION_INDEX</name></expr></argument>, <argument pos:start="153:59" pos:end="153:62"><expr pos:start="153:59" pos:end="153:62"><operator pos:start="153:59" pos:end="153:59">&amp;</operator><name pos:start="153:60" pos:end="153:62">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="163:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="155:51">(<expr pos:start="155:9" pos:end="155:50"><operator pos:start="155:9" pos:end="155:9">(</operator><name pos:start="155:10" pos:end="155:12">ret</name> <operator pos:start="155:14" pos:end="155:15">||</operator> <operator pos:start="155:17" pos:end="155:17">!</operator><name pos:start="155:18" pos:end="155:26"><name pos:start="155:18" pos:end="155:20">rom</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:26">size</name></name><operator pos:start="155:27" pos:end="155:27">)</operator> <operator pos:start="155:29" pos:end="155:30">&amp;&amp;</operator> <operator pos:start="155:32" pos:end="155:32">!</operator><name pos:start="155:33" pos:end="155:50"><name pos:start="155:33" pos:end="155:36">vdev</name><operator pos:start="155:37" pos:end="155:38">-&gt;</operator><name pos:start="155:39" pos:end="155:42">pdev</name><operator pos:start="155:43" pos:end="155:43">.</operator><name pos:start="155:44" pos:end="155:50">romfile</name></name></expr>)</condition> <block pos:start="155:53" pos:end="163:5">{<block_content pos:start="157:9" pos:end="161:17">

        <expr_stmt pos:start="157:9" pos:end="159:42"><expr pos:start="157:9" pos:end="159:41"><call pos:start="157:9" pos:end="159:41"><name pos:start="157:9" pos:end="157:20">error_report</name><argument_list pos:start="157:21" pos:end="159:41">(<argument pos:start="157:22" pos:end="157:69"><expr pos:start="157:22" pos:end="157:69"><literal type="string" pos:start="157:22" pos:end="157:69">"IGD device %s has no ROM, legacy mode disabled"</literal></expr></argument>,

                     <argument pos:start="159:22" pos:end="159:40"><expr pos:start="159:22" pos:end="159:40"><name pos:start="159:22" pos:end="159:40"><name pos:start="159:22" pos:end="159:25">vdev</name><operator pos:start="159:26" pos:end="159:27">-&gt;</operator><name pos:start="159:28" pos:end="159:35">vbasedev</name><operator pos:start="159:36" pos:end="159:36">.</operator><name pos:start="159:37" pos:end="159:40">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:17">goto <name pos:start="161:14" pos:end="161:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="173:7">/*

     * Ignore the hotplug corner case, mark the ROM failed, we can't

     * create the devices we need for legacy mode in the hotplug scenario.

     */</comment>

    <if_stmt pos:start="175:5" pos:end="185:5"><if pos:start="175:5" pos:end="185:5">if <condition pos:start="175:8" pos:end="175:35">(<expr pos:start="175:9" pos:end="175:34"><name pos:start="175:9" pos:end="175:34"><name pos:start="175:9" pos:end="175:12">vdev</name><operator pos:start="175:13" pos:end="175:14">-&gt;</operator><name pos:start="175:15" pos:end="175:18">pdev</name><operator pos:start="175:19" pos:end="175:19">.</operator><name pos:start="175:20" pos:end="175:23">qdev</name><operator pos:start="175:24" pos:end="175:24">.</operator><name pos:start="175:25" pos:end="175:34">hotplugged</name></name></expr>)</condition> <block pos:start="175:37" pos:end="185:5">{<block_content pos:start="177:9" pos:end="183:17">

        <expr_stmt pos:start="177:9" pos:end="179:66"><expr pos:start="177:9" pos:end="179:65"><call pos:start="177:9" pos:end="179:65"><name pos:start="177:9" pos:end="177:20">error_report</name><argument_list pos:start="177:21" pos:end="179:65">(<argument pos:start="177:22" pos:end="179:43"><expr pos:start="177:22" pos:end="179:43"><literal type="string" pos:start="177:22" pos:end="177:63">"IGD device %s hotplugged, ROM disabled, "</literal>

                     <literal type="string" pos:start="179:22" pos:end="179:43">"legacy mode disabled"</literal></expr></argument>, <argument pos:start="179:46" pos:end="179:64"><expr pos:start="179:46" pos:end="179:64"><name pos:start="179:46" pos:end="179:64"><name pos:start="179:46" pos:end="179:49">vdev</name><operator pos:start="179:50" pos:end="179:51">-&gt;</operator><name pos:start="179:52" pos:end="179:59">vbasedev</name><operator pos:start="179:60" pos:end="179:60">.</operator><name pos:start="179:61" pos:end="179:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:37"><expr pos:start="181:9" pos:end="181:36"><name pos:start="181:9" pos:end="181:29"><name pos:start="181:9" pos:end="181:12">vdev</name><operator pos:start="181:13" pos:end="181:14">-&gt;</operator><name pos:start="181:15" pos:end="181:29">rom_read_failed</name></name> <operator pos:start="181:31" pos:end="181:31">=</operator> <name pos:start="181:33" pos:end="181:36">true</name></expr>;</expr_stmt>

        <goto pos:start="183:9" pos:end="183:17">goto <name pos:start="183:14" pos:end="183:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="195:7">/*

     * Check whether we have all the vfio device specific regions to

     * support legacy mode (added in Linux v4.6).  If not, bail.

     */</comment>

    <expr_stmt pos:start="197:5" pos:end="201:75"><expr pos:start="197:5" pos:end="201:74"><name pos:start="197:5" pos:end="197:7">ret</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <call pos:start="197:11" pos:end="201:74"><name pos:start="197:11" pos:end="197:34">vfio_get_dev_region_info</name><argument_list pos:start="197:35" pos:end="201:74">(<argument pos:start="197:36" pos:end="197:50"><expr pos:start="197:36" pos:end="197:50"><operator pos:start="197:36" pos:end="197:36">&amp;</operator><name pos:start="197:37" pos:end="197:50"><name pos:start="197:37" pos:end="197:40">vdev</name><operator pos:start="197:41" pos:end="197:42">-&gt;</operator><name pos:start="197:43" pos:end="197:50">vbasedev</name></name></expr></argument>,

                        <argument pos:start="199:25" pos:end="199:78"><expr pos:start="199:25" pos:end="199:78"><name pos:start="199:25" pos:end="199:56">VFIO_REGION_TYPE_PCI_VENDOR_TYPE</name> <operator pos:start="199:58" pos:end="199:58">|</operator> <name pos:start="199:60" pos:end="199:78">PCI_VENDOR_ID_INTEL</name></expr></argument>,

                        <argument pos:start="201:25" pos:end="201:62"><expr pos:start="201:25" pos:end="201:62"><name pos:start="201:25" pos:end="201:62">VFIO_REGION_SUBTYPE_INTEL_IGD_OPREGION</name></expr></argument>, <argument pos:start="201:65" pos:end="201:73"><expr pos:start="201:65" pos:end="201:73"><operator pos:start="201:65" pos:end="201:65">&amp;</operator><name pos:start="201:66" pos:end="201:73">opregion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="211:5"><if pos:start="203:5" pos:end="211:5">if <condition pos:start="203:8" pos:end="203:12">(<expr pos:start="203:9" pos:end="203:11"><name pos:start="203:9" pos:end="203:11">ret</name></expr>)</condition> <block pos:start="203:14" pos:end="211:5">{<block_content pos:start="205:9" pos:end="209:17">

        <expr_stmt pos:start="205:9" pos:end="207:66"><expr pos:start="205:9" pos:end="207:65"><call pos:start="205:9" pos:end="207:65"><name pos:start="205:9" pos:end="205:20">error_report</name><argument_list pos:start="205:21" pos:end="207:65">(<argument pos:start="205:22" pos:end="207:43"><expr pos:start="205:22" pos:end="207:43"><literal type="string" pos:start="205:22" pos:end="205:70">"IGD device %s does not support OpRegion access,"</literal>

                     <literal type="string" pos:start="207:22" pos:end="207:43">"legacy mode disabled"</literal></expr></argument>, <argument pos:start="207:46" pos:end="207:64"><expr pos:start="207:46" pos:end="207:64"><name pos:start="207:46" pos:end="207:64"><name pos:start="207:46" pos:end="207:49">vdev</name><operator pos:start="207:50" pos:end="207:51">-&gt;</operator><name pos:start="207:52" pos:end="207:59">vbasedev</name><operator pos:start="207:60" pos:end="207:60">.</operator><name pos:start="207:61" pos:end="207:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="209:9" pos:end="209:17">goto <name pos:start="209:14" pos:end="209:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="215:5" pos:end="219:71"><expr pos:start="215:5" pos:end="219:70"><name pos:start="215:5" pos:end="215:7">ret</name> <operator pos:start="215:9" pos:end="215:9">=</operator> <call pos:start="215:11" pos:end="219:70"><name pos:start="215:11" pos:end="215:34">vfio_get_dev_region_info</name><argument_list pos:start="215:35" pos:end="219:70">(<argument pos:start="215:36" pos:end="215:50"><expr pos:start="215:36" pos:end="215:50"><operator pos:start="215:36" pos:end="215:36">&amp;</operator><name pos:start="215:37" pos:end="215:50"><name pos:start="215:37" pos:end="215:40">vdev</name><operator pos:start="215:41" pos:end="215:42">-&gt;</operator><name pos:start="215:43" pos:end="215:50">vbasedev</name></name></expr></argument>,

                        <argument pos:start="217:25" pos:end="217:78"><expr pos:start="217:25" pos:end="217:78"><name pos:start="217:25" pos:end="217:56">VFIO_REGION_TYPE_PCI_VENDOR_TYPE</name> <operator pos:start="217:58" pos:end="217:58">|</operator> <name pos:start="217:60" pos:end="217:78">PCI_VENDOR_ID_INTEL</name></expr></argument>,

                        <argument pos:start="219:25" pos:end="219:62"><expr pos:start="219:25" pos:end="219:62"><name pos:start="219:25" pos:end="219:62">VFIO_REGION_SUBTYPE_INTEL_IGD_HOST_CFG</name></expr></argument>, <argument pos:start="219:65" pos:end="219:69"><expr pos:start="219:65" pos:end="219:69"><operator pos:start="219:65" pos:end="219:65">&amp;</operator><name pos:start="219:66" pos:end="219:69">host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="221:5" pos:end="229:5"><if pos:start="221:5" pos:end="229:5">if <condition pos:start="221:8" pos:end="221:12">(<expr pos:start="221:9" pos:end="221:11"><name pos:start="221:9" pos:end="221:11">ret</name></expr>)</condition> <block pos:start="221:14" pos:end="229:5">{<block_content pos:start="223:9" pos:end="227:17">

        <expr_stmt pos:start="223:9" pos:end="225:66"><expr pos:start="223:9" pos:end="225:65"><call pos:start="223:9" pos:end="225:65"><name pos:start="223:9" pos:end="223:20">error_report</name><argument_list pos:start="223:21" pos:end="225:65">(<argument pos:start="223:22" pos:end="225:43"><expr pos:start="223:22" pos:end="225:43"><literal type="string" pos:start="223:22" pos:end="223:73">"IGD device %s does not support host bridge access,"</literal>

                     <literal type="string" pos:start="225:22" pos:end="225:43">"legacy mode disabled"</literal></expr></argument>, <argument pos:start="225:46" pos:end="225:64"><expr pos:start="225:46" pos:end="225:64"><name pos:start="225:46" pos:end="225:64"><name pos:start="225:46" pos:end="225:49">vdev</name><operator pos:start="225:50" pos:end="225:51">-&gt;</operator><name pos:start="225:52" pos:end="225:59">vbasedev</name><operator pos:start="225:60" pos:end="225:60">.</operator><name pos:start="225:61" pos:end="225:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="227:9" pos:end="227:17">goto <name pos:start="227:14" pos:end="227:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="237:69"><expr pos:start="233:5" pos:end="237:68"><name pos:start="233:5" pos:end="233:7">ret</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="237:68"><name pos:start="233:11" pos:end="233:34">vfio_get_dev_region_info</name><argument_list pos:start="233:35" pos:end="237:68">(<argument pos:start="233:36" pos:end="233:50"><expr pos:start="233:36" pos:end="233:50"><operator pos:start="233:36" pos:end="233:36">&amp;</operator><name pos:start="233:37" pos:end="233:50"><name pos:start="233:37" pos:end="233:40">vdev</name><operator pos:start="233:41" pos:end="233:42">-&gt;</operator><name pos:start="233:43" pos:end="233:50">vbasedev</name></name></expr></argument>,

                        <argument pos:start="235:25" pos:end="235:78"><expr pos:start="235:25" pos:end="235:78"><name pos:start="235:25" pos:end="235:56">VFIO_REGION_TYPE_PCI_VENDOR_TYPE</name> <operator pos:start="235:58" pos:end="235:58">|</operator> <name pos:start="235:60" pos:end="235:78">PCI_VENDOR_ID_INTEL</name></expr></argument>,

                        <argument pos:start="237:25" pos:end="237:61"><expr pos:start="237:25" pos:end="237:61"><name pos:start="237:25" pos:end="237:61">VFIO_REGION_SUBTYPE_INTEL_IGD_LPC_CFG</name></expr></argument>, <argument pos:start="237:64" pos:end="237:67"><expr pos:start="237:64" pos:end="237:67"><operator pos:start="237:64" pos:end="237:64">&amp;</operator><name pos:start="237:65" pos:end="237:67">lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="239:5" pos:end="247:5"><if pos:start="239:5" pos:end="247:5">if <condition pos:start="239:8" pos:end="239:12">(<expr pos:start="239:9" pos:end="239:11"><name pos:start="239:9" pos:end="239:11">ret</name></expr>)</condition> <block pos:start="239:14" pos:end="247:5">{<block_content pos:start="241:9" pos:end="245:17">

        <expr_stmt pos:start="241:9" pos:end="243:66"><expr pos:start="241:9" pos:end="243:65"><call pos:start="241:9" pos:end="243:65"><name pos:start="241:9" pos:end="241:20">error_report</name><argument_list pos:start="241:21" pos:end="243:65">(<argument pos:start="241:22" pos:end="243:43"><expr pos:start="241:22" pos:end="243:43"><literal type="string" pos:start="241:22" pos:end="241:72">"IGD device %s does not support LPC bridge access,"</literal>

                     <literal type="string" pos:start="243:22" pos:end="243:43">"legacy mode disabled"</literal></expr></argument>, <argument pos:start="243:46" pos:end="243:64"><expr pos:start="243:46" pos:end="243:64"><name pos:start="243:46" pos:end="243:64"><name pos:start="243:46" pos:end="243:49">vdev</name><operator pos:start="243:50" pos:end="243:51">-&gt;</operator><name pos:start="243:52" pos:end="243:59">vbasedev</name><operator pos:start="243:60" pos:end="243:60">.</operator><name pos:start="243:61" pos:end="243:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="245:9" pos:end="245:17">goto <name pos:start="245:14" pos:end="245:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="251:5" pos:end="259:7">/*

     * If IGD VGA Disable is clear (expected) and VGA is not already enabled,

     * try to enable it.  Probably shouldn't be using legacy mode without VGA,

     * but also no point in us enabling VGA if disabled in hardware.

     */</comment>

    <if_stmt pos:start="261:5" pos:end="271:5"><if pos:start="261:5" pos:end="271:5">if <condition pos:start="261:8" pos:end="261:69">(<expr pos:start="261:9" pos:end="261:68"><operator pos:start="261:9" pos:end="261:9">!</operator><operator pos:start="261:10" pos:end="261:10">(</operator><name pos:start="261:11" pos:end="261:14">gmch</name> <operator pos:start="261:16" pos:end="261:16">&amp;</operator> <literal type="number" pos:start="261:18" pos:end="261:20">0x2</literal><operator pos:start="261:21" pos:end="261:21">)</operator> <operator pos:start="261:23" pos:end="261:24">&amp;&amp;</operator> <operator pos:start="261:26" pos:end="261:26">!</operator><name pos:start="261:27" pos:end="261:35"><name pos:start="261:27" pos:end="261:30">vdev</name><operator pos:start="261:31" pos:end="261:32">-&gt;</operator><name pos:start="261:33" pos:end="261:35">vga</name></name> <operator pos:start="261:37" pos:end="261:38">&amp;&amp;</operator> <call pos:start="261:40" pos:end="261:68"><name pos:start="261:40" pos:end="261:56">vfio_populate_vga</name><argument_list pos:start="261:57" pos:end="261:68">(<argument pos:start="261:58" pos:end="261:61"><expr pos:start="261:58" pos:end="261:61"><name pos:start="261:58" pos:end="261:61">vdev</name></expr></argument>, <argument pos:start="261:64" pos:end="261:67"><expr pos:start="261:64" pos:end="261:67"><operator pos:start="261:64" pos:end="261:64">&amp;</operator><name pos:start="261:65" pos:end="261:67">err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="261:71" pos:end="271:5">{<block_content pos:start="263:9" pos:end="269:17">

        <expr_stmt pos:start="263:9" pos:end="263:64"><expr pos:start="263:9" pos:end="263:63"><call pos:start="263:9" pos:end="263:63"><name pos:start="263:9" pos:end="263:25">error_reportf_err</name><argument_list pos:start="263:26" pos:end="263:63">(<argument pos:start="263:27" pos:end="263:29"><expr pos:start="263:27" pos:end="263:29"><name pos:start="263:27" pos:end="263:29">err</name></expr></argument>, <argument pos:start="263:32" pos:end="263:41"><expr pos:start="263:32" pos:end="263:41"><name pos:start="263:32" pos:end="263:41">ERR_PREFIX</name></expr></argument>, <argument pos:start="263:44" pos:end="263:62"><expr pos:start="263:44" pos:end="263:62"><name pos:start="263:44" pos:end="263:62"><name pos:start="263:44" pos:end="263:47">vdev</name><operator pos:start="263:48" pos:end="263:49">-&gt;</operator><name pos:start="263:50" pos:end="263:57">vbasedev</name><operator pos:start="263:58" pos:end="263:58">.</operator><name pos:start="263:59" pos:end="263:62">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="267:66"><expr pos:start="265:9" pos:end="267:65"><call pos:start="265:9" pos:end="267:65"><name pos:start="265:9" pos:end="265:20">error_report</name><argument_list pos:start="265:21" pos:end="267:65">(<argument pos:start="265:22" pos:end="267:43"><expr pos:start="265:22" pos:end="267:43"><literal type="string" pos:start="265:22" pos:end="265:66">"IGD device %s failed to enable VGA access, "</literal>

                     <literal type="string" pos:start="267:22" pos:end="267:43">"legacy mode disabled"</literal></expr></argument>, <argument pos:start="267:46" pos:end="267:64"><expr pos:start="267:46" pos:end="267:64"><name pos:start="267:46" pos:end="267:64"><name pos:start="267:46" pos:end="267:49">vdev</name><operator pos:start="267:50" pos:end="267:51">-&gt;</operator><name pos:start="267:52" pos:end="267:59">vbasedev</name><operator pos:start="267:60" pos:end="267:60">.</operator><name pos:start="267:61" pos:end="267:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="269:9" pos:end="269:17">goto <name pos:start="269:14" pos:end="269:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="275:5" pos:end="275:35">/* Create our LPC/ISA bridge */</comment>

    <expr_stmt pos:start="277:5" pos:end="277:43"><expr pos:start="277:5" pos:end="277:42"><name pos:start="277:5" pos:end="277:7">ret</name> <operator pos:start="277:9" pos:end="277:9">=</operator> <call pos:start="277:11" pos:end="277:42"><name pos:start="277:11" pos:end="277:31">vfio_pci_igd_lpc_init</name><argument_list pos:start="277:32" pos:end="277:42">(<argument pos:start="277:33" pos:end="277:36"><expr pos:start="277:33" pos:end="277:36"><name pos:start="277:33" pos:end="277:36">vdev</name></expr></argument>, <argument pos:start="277:39" pos:end="277:41"><expr pos:start="277:39" pos:end="277:41"><name pos:start="277:39" pos:end="277:41">lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="279:5" pos:end="287:5"><if pos:start="279:5" pos:end="287:5">if <condition pos:start="279:8" pos:end="279:12">(<expr pos:start="279:9" pos:end="279:11"><name pos:start="279:9" pos:end="279:11">ret</name></expr>)</condition> <block pos:start="279:14" pos:end="287:5">{<block_content pos:start="281:9" pos:end="285:17">

        <expr_stmt pos:start="281:9" pos:end="283:66"><expr pos:start="281:9" pos:end="283:65"><call pos:start="281:9" pos:end="283:65"><name pos:start="281:9" pos:end="281:20">error_report</name><argument_list pos:start="281:21" pos:end="283:65">(<argument pos:start="281:22" pos:end="283:43"><expr pos:start="281:22" pos:end="283:43"><literal type="string" pos:start="281:22" pos:end="281:66">"IGD device %s failed to create LPC bridge, "</literal>

                     <literal type="string" pos:start="283:22" pos:end="283:43">"legacy mode disabled"</literal></expr></argument>, <argument pos:start="283:46" pos:end="283:64"><expr pos:start="283:46" pos:end="283:64"><name pos:start="283:46" pos:end="283:64"><name pos:start="283:46" pos:end="283:49">vdev</name><operator pos:start="283:50" pos:end="283:51">-&gt;</operator><name pos:start="283:52" pos:end="283:59">vbasedev</name><operator pos:start="283:60" pos:end="283:60">.</operator><name pos:start="283:61" pos:end="283:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="285:9" pos:end="285:17">goto <name pos:start="285:14" pos:end="285:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:60">/* Stuff some host values into the VM PCI host bridge */</comment>

    <expr_stmt pos:start="293:5" pos:end="293:45"><expr pos:start="293:5" pos:end="293:44"><name pos:start="293:5" pos:end="293:7">ret</name> <operator pos:start="293:9" pos:end="293:9">=</operator> <call pos:start="293:11" pos:end="293:44"><name pos:start="293:11" pos:end="293:32">vfio_pci_igd_host_init</name><argument_list pos:start="293:33" pos:end="293:44">(<argument pos:start="293:34" pos:end="293:37"><expr pos:start="293:34" pos:end="293:37"><name pos:start="293:34" pos:end="293:37">vdev</name></expr></argument>, <argument pos:start="293:40" pos:end="293:43"><expr pos:start="293:40" pos:end="293:43"><name pos:start="293:40" pos:end="293:43">host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="295:5" pos:end="303:5"><if pos:start="295:5" pos:end="303:5">if <condition pos:start="295:8" pos:end="295:12">(<expr pos:start="295:9" pos:end="295:11"><name pos:start="295:9" pos:end="295:11">ret</name></expr>)</condition> <block pos:start="295:14" pos:end="303:5">{<block_content pos:start="297:9" pos:end="301:17">

        <expr_stmt pos:start="297:9" pos:end="299:66"><expr pos:start="297:9" pos:end="299:65"><call pos:start="297:9" pos:end="299:65"><name pos:start="297:9" pos:end="297:20">error_report</name><argument_list pos:start="297:21" pos:end="299:65">(<argument pos:start="297:22" pos:end="299:43"><expr pos:start="297:22" pos:end="299:43"><literal type="string" pos:start="297:22" pos:end="297:67">"IGD device %s failed to modify host bridge, "</literal>

                     <literal type="string" pos:start="299:22" pos:end="299:43">"legacy mode disabled"</literal></expr></argument>, <argument pos:start="299:46" pos:end="299:64"><expr pos:start="299:46" pos:end="299:64"><name pos:start="299:46" pos:end="299:64"><name pos:start="299:46" pos:end="299:49">vdev</name><operator pos:start="299:50" pos:end="299:51">-&gt;</operator><name pos:start="299:52" pos:end="299:59">vbasedev</name><operator pos:start="299:60" pos:end="299:60">.</operator><name pos:start="299:61" pos:end="299:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="301:9" pos:end="301:17">goto <name pos:start="301:14" pos:end="301:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="307:5" pos:end="307:31">/* Setup OpRegion access */</comment>

    <expr_stmt pos:start="309:5" pos:end="309:59"><expr pos:start="309:5" pos:end="309:58"><name pos:start="309:5" pos:end="309:7">ret</name> <operator pos:start="309:9" pos:end="309:9">=</operator> <call pos:start="309:11" pos:end="309:58"><name pos:start="309:11" pos:end="309:36">vfio_pci_igd_opregion_init</name><argument_list pos:start="309:37" pos:end="309:58">(<argument pos:start="309:38" pos:end="309:41"><expr pos:start="309:38" pos:end="309:41"><name pos:start="309:38" pos:end="309:41">vdev</name></expr></argument>, <argument pos:start="309:44" pos:end="309:51"><expr pos:start="309:44" pos:end="309:51"><name pos:start="309:44" pos:end="309:51">opregion</name></expr></argument>, <argument pos:start="309:54" pos:end="309:57"><expr pos:start="309:54" pos:end="309:57"><operator pos:start="309:54" pos:end="309:54">&amp;</operator><name pos:start="309:55" pos:end="309:57">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="311:5" pos:end="319:5"><if pos:start="311:5" pos:end="319:5">if <condition pos:start="311:8" pos:end="311:12">(<expr pos:start="311:9" pos:end="311:11"><name pos:start="311:9" pos:end="311:11">ret</name></expr>)</condition> <block pos:start="311:14" pos:end="319:5">{<block_content pos:start="313:9" pos:end="317:17">

        <expr_stmt pos:start="313:9" pos:end="313:62"><expr pos:start="313:9" pos:end="313:61"><call pos:start="313:9" pos:end="313:61"><name pos:start="313:9" pos:end="313:25">error_append_hint</name><argument_list pos:start="313:26" pos:end="313:61">(<argument pos:start="313:27" pos:end="313:30"><expr pos:start="313:27" pos:end="313:30"><operator pos:start="313:27" pos:end="313:27">&amp;</operator><name pos:start="313:28" pos:end="313:30">err</name></expr></argument>, <argument pos:start="313:33" pos:end="313:60"><expr pos:start="313:33" pos:end="313:60"><literal type="string" pos:start="313:33" pos:end="313:60">"IGD legacy mode disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:64"><expr pos:start="315:9" pos:end="315:63"><call pos:start="315:9" pos:end="315:63"><name pos:start="315:9" pos:end="315:25">error_reportf_err</name><argument_list pos:start="315:26" pos:end="315:63">(<argument pos:start="315:27" pos:end="315:29"><expr pos:start="315:27" pos:end="315:29"><name pos:start="315:27" pos:end="315:29">err</name></expr></argument>, <argument pos:start="315:32" pos:end="315:41"><expr pos:start="315:32" pos:end="315:41"><name pos:start="315:32" pos:end="315:41">ERR_PREFIX</name></expr></argument>, <argument pos:start="315:44" pos:end="315:62"><expr pos:start="315:44" pos:end="315:62"><name pos:start="315:44" pos:end="315:62"><name pos:start="315:44" pos:end="315:47">vdev</name><operator pos:start="315:48" pos:end="315:49">-&gt;</operator><name pos:start="315:50" pos:end="315:57">vbasedev</name><operator pos:start="315:58" pos:end="315:58">.</operator><name pos:start="315:59" pos:end="315:62">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="317:9" pos:end="317:17">goto <name pos:start="317:14" pos:end="317:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="323:5" pos:end="323:75">/* Setup our quirk to munge GTT addresses to the VM allocated buffer */</comment>

    <expr_stmt pos:start="325:5" pos:end="325:38"><expr pos:start="325:5" pos:end="325:37"><name pos:start="325:5" pos:end="325:9">quirk</name> <operator pos:start="325:11" pos:end="325:11">=</operator> <call pos:start="325:13" pos:end="325:37"><name pos:start="325:13" pos:end="325:21">g_malloc0</name><argument_list pos:start="325:22" pos:end="325:37">(<argument pos:start="325:23" pos:end="325:36"><expr pos:start="325:23" pos:end="325:36"><sizeof pos:start="325:23" pos:end="325:36">sizeof<argument_list pos:start="325:29" pos:end="325:36">(<argument pos:start="325:30" pos:end="325:35"><expr pos:start="325:30" pos:end="325:35"><operator pos:start="325:30" pos:end="325:30">*</operator><name pos:start="325:31" pos:end="325:35">quirk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:41"><expr pos:start="327:5" pos:end="327:40"><name pos:start="327:5" pos:end="327:14"><name pos:start="327:5" pos:end="327:9">quirk</name><operator pos:start="327:10" pos:end="327:11">-&gt;</operator><name pos:start="327:12" pos:end="327:14">mem</name></name> <operator pos:start="327:16" pos:end="327:16">=</operator> <call pos:start="327:18" pos:end="327:40"><name pos:start="327:18" pos:end="327:23">g_new0</name><argument_list pos:start="327:24" pos:end="327:40">(<argument pos:start="327:25" pos:end="327:36"><expr pos:start="327:25" pos:end="327:36"><name pos:start="327:25" pos:end="327:36">MemoryRegion</name></expr></argument>, <argument pos:start="327:39" pos:end="327:39"><expr pos:start="327:39" pos:end="327:39"><literal type="number" pos:start="327:39" pos:end="327:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:22"><expr pos:start="329:5" pos:end="329:21"><name pos:start="329:5" pos:end="329:17"><name pos:start="329:5" pos:end="329:9">quirk</name><operator pos:start="329:10" pos:end="329:11">-&gt;</operator><name pos:start="329:12" pos:end="329:17">nr_mem</name></name> <operator pos:start="329:19" pos:end="329:19">=</operator> <literal type="number" pos:start="329:21" pos:end="329:21">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:48"><expr pos:start="331:5" pos:end="331:47"><name pos:start="331:5" pos:end="331:7">igd</name> <operator pos:start="331:9" pos:end="331:9">=</operator> <name pos:start="331:11" pos:end="331:21"><name pos:start="331:11" pos:end="331:15">quirk</name><operator pos:start="331:16" pos:end="331:17">-&gt;</operator><name pos:start="331:18" pos:end="331:21">data</name></name> <operator pos:start="331:23" pos:end="331:23">=</operator> <call pos:start="331:25" pos:end="331:47"><name pos:start="331:25" pos:end="331:33">g_malloc0</name><argument_list pos:start="331:34" pos:end="331:47">(<argument pos:start="331:35" pos:end="331:46"><expr pos:start="331:35" pos:end="331:46"><sizeof pos:start="331:35" pos:end="331:46">sizeof<argument_list pos:start="331:41" pos:end="331:46">(<argument pos:start="331:42" pos:end="331:45"><expr pos:start="331:42" pos:end="331:45"><operator pos:start="331:42" pos:end="331:42">*</operator><name pos:start="331:43" pos:end="331:45">igd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:21"><expr pos:start="333:5" pos:end="333:20"><name pos:start="333:5" pos:end="333:13"><name pos:start="333:5" pos:end="333:7">igd</name><operator pos:start="333:8" pos:end="333:9">-&gt;</operator><name pos:start="333:10" pos:end="333:13">vdev</name></name> <operator pos:start="333:15" pos:end="333:15">=</operator> <name pos:start="333:17" pos:end="333:20">vdev</name></expr>;</expr_stmt>

    <expr_stmt pos:start="335:5" pos:end="335:20"><expr pos:start="335:5" pos:end="335:19"><name pos:start="335:5" pos:end="335:14"><name pos:start="335:5" pos:end="335:7">igd</name><operator pos:start="335:8" pos:end="335:9">-&gt;</operator><name pos:start="335:10" pos:end="335:14">index</name></name> <operator pos:start="335:16" pos:end="335:16">=</operator> <operator pos:start="335:18" pos:end="335:18">~</operator><literal type="number" pos:start="335:19" pos:end="335:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="337:5" pos:end="337:63"><expr pos:start="337:5" pos:end="337:62"><name pos:start="337:5" pos:end="337:13"><name pos:start="337:5" pos:end="337:7">igd</name><operator pos:start="337:8" pos:end="337:9">-&gt;</operator><name pos:start="337:10" pos:end="337:13">bdsm</name></name> <operator pos:start="337:15" pos:end="337:15">=</operator> <call pos:start="337:17" pos:end="337:62"><name pos:start="337:17" pos:end="337:36">vfio_pci_read_config</name><argument_list pos:start="337:37" pos:end="337:62">(<argument pos:start="337:38" pos:end="337:48"><expr pos:start="337:38" pos:end="337:48"><operator pos:start="337:38" pos:end="337:38">&amp;</operator><name pos:start="337:39" pos:end="337:48"><name pos:start="337:39" pos:end="337:42">vdev</name><operator pos:start="337:43" pos:end="337:44">-&gt;</operator><name pos:start="337:45" pos:end="337:48">pdev</name></name></expr></argument>, <argument pos:start="337:51" pos:end="337:58"><expr pos:start="337:51" pos:end="337:58"><name pos:start="337:51" pos:end="337:58">IGD_BDSM</name></expr></argument>, <argument pos:start="337:61" pos:end="337:61"><expr pos:start="337:61" pos:end="337:61"><literal type="number" pos:start="337:61" pos:end="337:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:34"><expr pos:start="339:5" pos:end="339:33"><name pos:start="339:5" pos:end="339:13"><name pos:start="339:5" pos:end="339:7">igd</name><operator pos:start="339:8" pos:end="339:9">-&gt;</operator><name pos:start="339:10" pos:end="339:13">bdsm</name></name> <operator pos:start="339:15" pos:end="339:16">&amp;=</operator> <operator pos:start="339:18" pos:end="339:18">~</operator><operator pos:start="339:19" pos:end="339:19">(</operator><operator pos:start="339:20" pos:end="339:20">(</operator><literal type="number" pos:start="339:21" pos:end="339:21">1</literal> <operator pos:start="339:23" pos:end="339:24">&lt;&lt;</operator> <literal type="number" pos:start="339:26" pos:end="339:27">20</literal><operator pos:start="339:28" pos:end="339:28">)</operator> <operator pos:start="339:30" pos:end="339:30">-</operator> <literal type="number" pos:start="339:32" pos:end="339:32">1</literal><operator pos:start="339:33" pos:end="339:33">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="339:36" pos:end="339:52">/* 1MB aligned */</comment>



    <expr_stmt pos:start="343:5" pos:end="345:58"><expr pos:start="343:5" pos:end="345:57"><call pos:start="343:5" pos:end="345:57"><name pos:start="343:5" pos:end="343:25">memory_region_init_io</name><argument_list pos:start="343:26" pos:end="345:57">(<argument pos:start="343:27" pos:end="343:40"><expr pos:start="343:27" pos:end="343:40"><operator pos:start="343:27" pos:end="343:27">&amp;</operator><name pos:start="343:28" pos:end="343:40"><name pos:start="343:28" pos:end="343:32">quirk</name><operator pos:start="343:33" pos:end="343:34">-&gt;</operator><name pos:start="343:35" pos:end="343:37">mem</name><index pos:start="343:38" pos:end="343:40">[<expr pos:start="343:39" pos:end="343:39"><literal type="number" pos:start="343:39" pos:end="343:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="343:43" pos:end="343:54"><expr pos:start="343:43" pos:end="343:54"><call pos:start="343:43" pos:end="343:54"><name pos:start="343:43" pos:end="343:48">OBJECT</name><argument_list pos:start="343:49" pos:end="343:54">(<argument pos:start="343:50" pos:end="343:53"><expr pos:start="343:50" pos:end="343:53"><name pos:start="343:50" pos:end="343:53">vdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="343:57" pos:end="343:77"><expr pos:start="343:57" pos:end="343:77"><operator pos:start="343:57" pos:end="343:57">&amp;</operator><name pos:start="343:58" pos:end="343:77">vfio_igd_index_quirk</name></expr></argument>,

                          <argument pos:start="345:27" pos:end="345:29"><expr pos:start="345:27" pos:end="345:29"><name pos:start="345:27" pos:end="345:29">igd</name></expr></argument>, <argument pos:start="345:32" pos:end="345:53"><expr pos:start="345:32" pos:end="345:53"><literal type="string" pos:start="345:32" pos:end="345:53">"vfio-igd-index-quirk"</literal></expr></argument>, <argument pos:start="345:56" pos:end="345:56"><expr pos:start="345:56" pos:end="345:56"><literal type="number" pos:start="345:56" pos:end="345:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="349:62"><expr pos:start="347:5" pos:end="349:61"><call pos:start="347:5" pos:end="349:61"><name pos:start="347:5" pos:end="347:39">memory_region_add_subregion_overlap</name><argument_list pos:start="347:40" pos:end="349:61">(<argument pos:start="347:41" pos:end="347:65"><expr pos:start="347:41" pos:end="347:65"><name pos:start="347:41" pos:end="347:54"><name pos:start="347:41" pos:end="347:44">vdev</name><operator pos:start="347:45" pos:end="347:46">-&gt;</operator><name pos:start="347:47" pos:end="347:50">bars</name><index pos:start="347:51" pos:end="347:54">[<expr pos:start="347:52" pos:end="347:53"><name pos:start="347:52" pos:end="347:53">nr</name></expr>]</index></name><operator pos:start="347:55" pos:end="347:55">.</operator><name pos:start="347:56" pos:end="347:65"><name pos:start="347:56" pos:end="347:61">region</name><operator pos:start="347:62" pos:end="347:62">.</operator><name pos:start="347:63" pos:end="347:65">mem</name></name></expr></argument>,

                                        <argument pos:start="349:41" pos:end="349:41"><expr pos:start="349:41" pos:end="349:41"><literal type="number" pos:start="349:41" pos:end="349:41">0</literal></expr></argument>, <argument pos:start="349:44" pos:end="349:57"><expr pos:start="349:44" pos:end="349:57"><operator pos:start="349:44" pos:end="349:44">&amp;</operator><name pos:start="349:45" pos:end="349:57"><name pos:start="349:45" pos:end="349:49">quirk</name><operator pos:start="349:50" pos:end="349:51">-&gt;</operator><name pos:start="349:52" pos:end="349:54">mem</name><index pos:start="349:55" pos:end="349:57">[<expr pos:start="349:56" pos:end="349:56"><literal type="number" pos:start="349:56" pos:end="349:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="349:60" pos:end="349:60"><expr pos:start="349:60" pos:end="349:60"><literal type="number" pos:start="349:60" pos:end="349:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="353:5" pos:end="355:57"><expr pos:start="353:5" pos:end="355:56"><call pos:start="353:5" pos:end="355:56"><name pos:start="353:5" pos:end="353:25">memory_region_init_io</name><argument_list pos:start="353:26" pos:end="355:56">(<argument pos:start="353:27" pos:end="353:40"><expr pos:start="353:27" pos:end="353:40"><operator pos:start="353:27" pos:end="353:27">&amp;</operator><name pos:start="353:28" pos:end="353:40"><name pos:start="353:28" pos:end="353:32">quirk</name><operator pos:start="353:33" pos:end="353:34">-&gt;</operator><name pos:start="353:35" pos:end="353:37">mem</name><index pos:start="353:38" pos:end="353:40">[<expr pos:start="353:39" pos:end="353:39"><literal type="number" pos:start="353:39" pos:end="353:39">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="353:43" pos:end="353:54"><expr pos:start="353:43" pos:end="353:54"><call pos:start="353:43" pos:end="353:54"><name pos:start="353:43" pos:end="353:48">OBJECT</name><argument_list pos:start="353:49" pos:end="353:54">(<argument pos:start="353:50" pos:end="353:53"><expr pos:start="353:50" pos:end="353:53"><name pos:start="353:50" pos:end="353:53">vdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="353:57" pos:end="353:76"><expr pos:start="353:57" pos:end="353:76"><operator pos:start="353:57" pos:end="353:57">&amp;</operator><name pos:start="353:58" pos:end="353:76">vfio_igd_data_quirk</name></expr></argument>,

                          <argument pos:start="355:27" pos:end="355:29"><expr pos:start="355:27" pos:end="355:29"><name pos:start="355:27" pos:end="355:29">igd</name></expr></argument>, <argument pos:start="355:32" pos:end="355:52"><expr pos:start="355:32" pos:end="355:52"><literal type="string" pos:start="355:32" pos:end="355:52">"vfio-igd-data-quirk"</literal></expr></argument>, <argument pos:start="355:55" pos:end="355:55"><expr pos:start="355:55" pos:end="355:55"><literal type="number" pos:start="355:55" pos:end="355:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="359:62"><expr pos:start="357:5" pos:end="359:61"><call pos:start="357:5" pos:end="359:61"><name pos:start="357:5" pos:end="357:39">memory_region_add_subregion_overlap</name><argument_list pos:start="357:40" pos:end="359:61">(<argument pos:start="357:41" pos:end="357:65"><expr pos:start="357:41" pos:end="357:65"><name pos:start="357:41" pos:end="357:54"><name pos:start="357:41" pos:end="357:44">vdev</name><operator pos:start="357:45" pos:end="357:46">-&gt;</operator><name pos:start="357:47" pos:end="357:50">bars</name><index pos:start="357:51" pos:end="357:54">[<expr pos:start="357:52" pos:end="357:53"><name pos:start="357:52" pos:end="357:53">nr</name></expr>]</index></name><operator pos:start="357:55" pos:end="357:55">.</operator><name pos:start="357:56" pos:end="357:65"><name pos:start="357:56" pos:end="357:61">region</name><operator pos:start="357:62" pos:end="357:62">.</operator><name pos:start="357:63" pos:end="357:65">mem</name></name></expr></argument>,

                                        <argument pos:start="359:41" pos:end="359:41"><expr pos:start="359:41" pos:end="359:41"><literal type="number" pos:start="359:41" pos:end="359:41">4</literal></expr></argument>, <argument pos:start="359:44" pos:end="359:57"><expr pos:start="359:44" pos:end="359:57"><operator pos:start="359:44" pos:end="359:44">&amp;</operator><name pos:start="359:45" pos:end="359:57"><name pos:start="359:45" pos:end="359:49">quirk</name><operator pos:start="359:50" pos:end="359:51">-&gt;</operator><name pos:start="359:52" pos:end="359:54">mem</name><index pos:start="359:55" pos:end="359:57">[<expr pos:start="359:56" pos:end="359:56"><literal type="number" pos:start="359:56" pos:end="359:56">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="359:60" pos:end="359:60"><expr pos:start="359:60" pos:end="359:60"><literal type="number" pos:start="359:60" pos:end="359:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="363:5" pos:end="363:59"><expr pos:start="363:5" pos:end="363:58"><call pos:start="363:5" pos:end="363:58"><name pos:start="363:5" pos:end="363:21">QLIST_INSERT_HEAD</name><argument_list pos:start="363:22" pos:end="363:58">(<argument pos:start="363:23" pos:end="363:44"><expr pos:start="363:23" pos:end="363:44"><operator pos:start="363:23" pos:end="363:23">&amp;</operator><name pos:start="363:24" pos:end="363:37"><name pos:start="363:24" pos:end="363:27">vdev</name><operator pos:start="363:28" pos:end="363:29">-&gt;</operator><name pos:start="363:30" pos:end="363:33">bars</name><index pos:start="363:34" pos:end="363:37">[<expr pos:start="363:35" pos:end="363:36"><name pos:start="363:35" pos:end="363:36">nr</name></expr>]</index></name><operator pos:start="363:38" pos:end="363:38">.</operator><name pos:start="363:39" pos:end="363:44">quirks</name></expr></argument>, <argument pos:start="363:47" pos:end="363:51"><expr pos:start="363:47" pos:end="363:51"><name pos:start="363:47" pos:end="363:51">quirk</name></expr></argument>, <argument pos:start="363:54" pos:end="363:57"><expr pos:start="363:54" pos:end="363:57"><name pos:start="363:54" pos:end="363:57">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="367:5" pos:end="367:60">/* Determine the size of stolen memory needed for GTT */</comment>

    <expr_stmt pos:start="369:5" pos:end="369:48"><expr pos:start="369:5" pos:end="369:47"><name pos:start="369:5" pos:end="369:11">ggms_mb</name> <operator pos:start="369:13" pos:end="369:13">=</operator> <operator pos:start="369:15" pos:end="369:15">(</operator><name pos:start="369:16" pos:end="369:19">gmch</name> <operator pos:start="369:21" pos:end="369:22">&gt;&gt;</operator> <operator pos:start="369:24" pos:end="369:24">(</operator><ternary pos:start="369:25" pos:end="369:39"><condition pos:start="369:25" pos:end="369:33"><expr pos:start="369:25" pos:end="369:31"><name pos:start="369:25" pos:end="369:27">gen</name> <operator pos:start="369:29" pos:end="369:29">&lt;</operator> <literal type="number" pos:start="369:31" pos:end="369:31">8</literal></expr> ?</condition><then pos:start="369:35" pos:end="369:35"> <expr pos:start="369:35" pos:end="369:35"><literal type="number" pos:start="369:35" pos:end="369:35">8</literal></expr> </then><else pos:start="369:37" pos:end="369:39">: <expr pos:start="369:39" pos:end="369:39"><literal type="number" pos:start="369:39" pos:end="369:39">6</literal></expr></else></ternary><operator pos:start="369:40" pos:end="369:40">)</operator><operator pos:start="369:41" pos:end="369:41">)</operator> <operator pos:start="369:43" pos:end="369:43">&amp;</operator> <literal type="number" pos:start="369:45" pos:end="369:47">0x3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="371:5" pos:end="375:5"><if pos:start="371:5" pos:end="375:5">if <condition pos:start="371:8" pos:end="371:16">(<expr pos:start="371:9" pos:end="371:15"><name pos:start="371:9" pos:end="371:11">gen</name> <operator pos:start="371:13" pos:end="371:13">&gt;</operator> <literal type="number" pos:start="371:15" pos:end="371:15">6</literal></expr>)</condition> <block pos:start="371:18" pos:end="375:5">{<block_content pos:start="373:9" pos:end="373:31">

        <expr_stmt pos:start="373:9" pos:end="373:31"><expr pos:start="373:9" pos:end="373:30"><name pos:start="373:9" pos:end="373:15">ggms_mb</name> <operator pos:start="373:17" pos:end="373:17">=</operator> <literal type="number" pos:start="373:19" pos:end="373:19">1</literal> <operator pos:start="373:21" pos:end="373:22">&lt;&lt;</operator> <name pos:start="373:24" pos:end="373:30">ggms_mb</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="379:5" pos:end="389:7">/*

     * Assume we have no GMS memory, but allow it to be overrided by device

     * option (experimental).  The spec doesn't actually allow zero GMS when

     * when IVD (IGD VGA Disable) is clear, but the claim is that it's unused,

     * so let's not waste VM memory for it.

     */</comment>

    <if_stmt pos:start="391:5" pos:end="409:5"><if pos:start="391:5" pos:end="409:5">if <condition pos:start="391:8" pos:end="391:22">(<expr pos:start="391:9" pos:end="391:21"><name pos:start="391:9" pos:end="391:21"><name pos:start="391:9" pos:end="391:12">vdev</name><operator pos:start="391:13" pos:end="391:14">-&gt;</operator><name pos:start="391:15" pos:end="391:21">igd_gms</name></name></expr>)</condition> <block pos:start="391:24" pos:end="409:5">{<block_content pos:start="393:9" pos:end="407:9">

        <if_stmt pos:start="393:9" pos:end="407:9"><if pos:start="393:9" pos:end="401:9">if <condition pos:start="393:12" pos:end="393:34">(<expr pos:start="393:13" pos:end="393:33"><name pos:start="393:13" pos:end="393:25"><name pos:start="393:13" pos:end="393:16">vdev</name><operator pos:start="393:17" pos:end="393:18">-&gt;</operator><name pos:start="393:19" pos:end="393:25">igd_gms</name></name> <operator pos:start="393:27" pos:end="393:28">&lt;=</operator> <literal type="number" pos:start="393:30" pos:end="393:33">0x10</literal></expr>)</condition> <block pos:start="393:36" pos:end="401:9">{<block_content pos:start="395:13" pos:end="399:61">

            <expr_stmt pos:start="395:13" pos:end="395:40"><expr pos:start="395:13" pos:end="395:39"><name pos:start="395:13" pos:end="395:18">gms_mb</name> <operator pos:start="395:20" pos:end="395:20">=</operator> <name pos:start="395:22" pos:end="395:34"><name pos:start="395:22" pos:end="395:25">vdev</name><operator pos:start="395:26" pos:end="395:27">-&gt;</operator><name pos:start="395:28" pos:end="395:34">igd_gms</name></name> <operator pos:start="395:36" pos:end="395:36">*</operator> <literal type="number" pos:start="395:38" pos:end="395:39">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:55"><expr pos:start="397:13" pos:end="397:54"><name pos:start="397:13" pos:end="397:16">gmch</name> <operator pos:start="397:18" pos:end="397:19">|=</operator> <name pos:start="397:21" pos:end="397:33"><name pos:start="397:21" pos:end="397:24">vdev</name><operator pos:start="397:25" pos:end="397:26">-&gt;</operator><name pos:start="397:27" pos:end="397:33">igd_gms</name></name> <operator pos:start="397:35" pos:end="397:36">&lt;&lt;</operator> <operator pos:start="397:38" pos:end="397:38">(</operator><ternary pos:start="397:39" pos:end="397:53"><condition pos:start="397:39" pos:end="397:47"><expr pos:start="397:39" pos:end="397:45"><name pos:start="397:39" pos:end="397:41">gen</name> <operator pos:start="397:43" pos:end="397:43">&lt;</operator> <literal type="number" pos:start="397:45" pos:end="397:45">8</literal></expr> ?</condition><then pos:start="397:49" pos:end="397:49"> <expr pos:start="397:49" pos:end="397:49"><literal type="number" pos:start="397:49" pos:end="397:49">3</literal></expr> </then><else pos:start="397:51" pos:end="397:53">: <expr pos:start="397:53" pos:end="397:53"><literal type="number" pos:start="397:53" pos:end="397:53">8</literal></expr></else></ternary><operator pos:start="397:54" pos:end="397:54">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:61"><expr pos:start="399:13" pos:end="399:60"><call pos:start="399:13" pos:end="399:60"><name pos:start="399:13" pos:end="399:24">pci_set_long</name><argument_list pos:start="399:25" pos:end="399:60">(<argument pos:start="399:26" pos:end="399:53"><expr pos:start="399:26" pos:end="399:53"><name pos:start="399:26" pos:end="399:42"><name pos:start="399:26" pos:end="399:29">vdev</name><operator pos:start="399:30" pos:end="399:31">-&gt;</operator><name pos:start="399:32" pos:end="399:35">pdev</name><operator pos:start="399:36" pos:end="399:36">.</operator><name pos:start="399:37" pos:end="399:42">config</name></name> <operator pos:start="399:44" pos:end="399:44">+</operator> <name pos:start="399:46" pos:end="399:53">IGD_GMCH</name></expr></argument>, <argument pos:start="399:56" pos:end="399:59"><expr pos:start="399:56" pos:end="399:59"><name pos:start="399:56" pos:end="399:59">gmch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="401:11" pos:end="407:9">else <block pos:start="401:16" pos:end="407:9">{<block_content pos:start="403:13" pos:end="405:30">

            <expr_stmt pos:start="403:13" pos:end="403:74"><expr pos:start="403:13" pos:end="403:73"><call pos:start="403:13" pos:end="403:73"><name pos:start="403:13" pos:end="403:24">error_report</name><argument_list pos:start="403:25" pos:end="403:73">(<argument pos:start="403:26" pos:end="403:57"><expr pos:start="403:26" pos:end="403:57"><literal type="string" pos:start="403:26" pos:end="403:57">"Unsupported IGD GMS value 0x%x"</literal></expr></argument>, <argument pos:start="403:60" pos:end="403:72"><expr pos:start="403:60" pos:end="403:72"><name pos:start="403:60" pos:end="403:72"><name pos:start="403:60" pos:end="403:63">vdev</name><operator pos:start="403:64" pos:end="403:65">-&gt;</operator><name pos:start="403:66" pos:end="403:72">igd_gms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:30"><expr pos:start="405:13" pos:end="405:29"><name pos:start="405:13" pos:end="405:25"><name pos:start="405:13" pos:end="405:16">vdev</name><operator pos:start="405:17" pos:end="405:18">-&gt;</operator><name pos:start="405:19" pos:end="405:25">igd_gms</name></name> <operator pos:start="405:27" pos:end="405:27">=</operator> <literal type="number" pos:start="405:29" pos:end="405:29">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="413:5" pos:end="427:7">/*

     * Request reserved memory for stolen memory via fw_cfg.  VM firmware

     * must allocate a 1MB aligned reserved memory region below 4GB with

     * the requested size (in bytes) for use by the Intel PCI class VGA

     * device at VM address 00:02.0.  The base address of this reserved

     * memory region must be written to the device BDSM regsiter at PCI

     * config offset 0x5C.

     */</comment>

    <expr_stmt pos:start="429:5" pos:end="429:45"><expr pos:start="429:5" pos:end="429:44"><name pos:start="429:5" pos:end="429:13">bdsm_size</name> <operator pos:start="429:15" pos:end="429:15">=</operator> <call pos:start="429:17" pos:end="429:44"><name pos:start="429:17" pos:end="429:24">g_malloc</name><argument_list pos:start="429:25" pos:end="429:44">(<argument pos:start="429:26" pos:end="429:43"><expr pos:start="429:26" pos:end="429:43"><sizeof pos:start="429:26" pos:end="429:43">sizeof<argument_list pos:start="429:32" pos:end="429:43">(<argument pos:start="429:33" pos:end="429:42"><expr pos:start="429:33" pos:end="429:42"><operator pos:start="429:33" pos:end="429:33">*</operator><name pos:start="429:34" pos:end="429:42">bdsm_size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:63"><expr pos:start="431:5" pos:end="431:62"><operator pos:start="431:5" pos:end="431:5">*</operator><name pos:start="431:6" pos:end="431:14">bdsm_size</name> <operator pos:start="431:16" pos:end="431:16">=</operator> <call pos:start="431:18" pos:end="431:62"><name pos:start="431:18" pos:end="431:28">cpu_to_le64</name><argument_list pos:start="431:29" pos:end="431:62">(<argument pos:start="431:30" pos:end="431:61"><expr pos:start="431:30" pos:end="431:61"><operator pos:start="431:30" pos:end="431:30">(</operator><name pos:start="431:31" pos:end="431:37">ggms_mb</name> <operator pos:start="431:39" pos:end="431:39">+</operator> <name pos:start="431:41" pos:end="431:46">gms_mb</name><operator pos:start="431:47" pos:end="431:47">)</operator> <operator pos:start="431:49" pos:end="431:49">*</operator> <literal type="number" pos:start="431:51" pos:end="431:54">1024</literal> <operator pos:start="431:56" pos:end="431:56">*</operator> <literal type="number" pos:start="431:58" pos:end="431:61">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="435:51"><expr pos:start="433:5" pos:end="435:50"><call pos:start="433:5" pos:end="435:50"><name pos:start="433:5" pos:end="433:19">fw_cfg_add_file</name><argument_list pos:start="433:20" pos:end="435:50">(<argument pos:start="433:21" pos:end="433:33"><expr pos:start="433:21" pos:end="433:33"><call pos:start="433:21" pos:end="433:33"><name pos:start="433:21" pos:end="433:31">fw_cfg_find</name><argument_list pos:start="433:32" pos:end="433:33">()</argument_list></call></expr></argument>, <argument pos:start="433:36" pos:end="433:54"><expr pos:start="433:36" pos:end="433:54"><literal type="string" pos:start="433:36" pos:end="433:54">"etc/igd-bdsm-size"</literal></expr></argument>,

                    <argument pos:start="435:21" pos:end="435:29"><expr pos:start="435:21" pos:end="435:29"><name pos:start="435:21" pos:end="435:29">bdsm_size</name></expr></argument>, <argument pos:start="435:32" pos:end="435:49"><expr pos:start="435:32" pos:end="435:49"><sizeof pos:start="435:32" pos:end="435:49">sizeof<argument_list pos:start="435:38" pos:end="435:49">(<argument pos:start="435:39" pos:end="435:48"><expr pos:start="435:39" pos:end="435:48"><operator pos:start="435:39" pos:end="435:39">*</operator><name pos:start="435:40" pos:end="435:48">bdsm_size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="439:5" pos:end="439:78">/* BDSM is read-write, emulated.  The BIOS needs to be able to write it */</comment>

    <expr_stmt pos:start="441:5" pos:end="441:50"><expr pos:start="441:5" pos:end="441:49"><call pos:start="441:5" pos:end="441:49"><name pos:start="441:5" pos:end="441:16">pci_set_long</name><argument_list pos:start="441:17" pos:end="441:49">(<argument pos:start="441:18" pos:end="441:45"><expr pos:start="441:18" pos:end="441:45"><name pos:start="441:18" pos:end="441:34"><name pos:start="441:18" pos:end="441:21">vdev</name><operator pos:start="441:22" pos:end="441:23">-&gt;</operator><name pos:start="441:24" pos:end="441:27">pdev</name><operator pos:start="441:28" pos:end="441:28">.</operator><name pos:start="441:29" pos:end="441:34">config</name></name> <operator pos:start="441:36" pos:end="441:36">+</operator> <name pos:start="441:38" pos:end="441:45">IGD_BDSM</name></expr></argument>, <argument pos:start="441:48" pos:end="441:48"><expr pos:start="441:48" pos:end="441:48"><literal type="number" pos:start="441:48" pos:end="441:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="443:5" pos:end="443:50"><expr pos:start="443:5" pos:end="443:49"><call pos:start="443:5" pos:end="443:49"><name pos:start="443:5" pos:end="443:16">pci_set_long</name><argument_list pos:start="443:17" pos:end="443:49">(<argument pos:start="443:18" pos:end="443:44"><expr pos:start="443:18" pos:end="443:44"><name pos:start="443:18" pos:end="443:33"><name pos:start="443:18" pos:end="443:21">vdev</name><operator pos:start="443:22" pos:end="443:23">-&gt;</operator><name pos:start="443:24" pos:end="443:27">pdev</name><operator pos:start="443:28" pos:end="443:28">.</operator><name pos:start="443:29" pos:end="443:33">wmask</name></name> <operator pos:start="443:35" pos:end="443:35">+</operator> <name pos:start="443:37" pos:end="443:44">IGD_BDSM</name></expr></argument>, <argument pos:start="443:47" pos:end="443:48"><expr pos:start="443:47" pos:end="443:48"><operator pos:start="443:47" pos:end="443:47">~</operator><literal type="number" pos:start="443:48" pos:end="443:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="445:5" pos:end="445:60"><expr pos:start="445:5" pos:end="445:59"><call pos:start="445:5" pos:end="445:59"><name pos:start="445:5" pos:end="445:16">pci_set_long</name><argument_list pos:start="445:17" pos:end="445:59">(<argument pos:start="445:18" pos:end="445:54"><expr pos:start="445:18" pos:end="445:54"><name pos:start="445:18" pos:end="445:43"><name pos:start="445:18" pos:end="445:21">vdev</name><operator pos:start="445:22" pos:end="445:23">-&gt;</operator><name pos:start="445:24" pos:end="445:43">emulated_config_bits</name></name> <operator pos:start="445:45" pos:end="445:45">+</operator> <name pos:start="445:47" pos:end="445:54">IGD_BDSM</name></expr></argument>, <argument pos:start="445:57" pos:end="445:58"><expr pos:start="445:57" pos:end="445:58"><operator pos:start="445:57" pos:end="445:57">~</operator><literal type="number" pos:start="445:58" pos:end="445:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="449:5" pos:end="459:7">/*

     * This IOBAR gives us access to GTTADR, which allows us to write to

     * the GTT itself.  So let's go ahead and write zero to all the GTT

     * entries to avoid spurious DMA faults.  Be sure I/O access is enabled

     * before talking to the device.

     */</comment>

    <if_stmt pos:start="461:5" pos:end="469:5"><if pos:start="461:5" pos:end="469:5">if <condition pos:start="461:8" pos:end="463:69">(<expr pos:start="461:9" pos:end="463:68"><call pos:start="461:9" pos:end="463:48"><name pos:start="461:9" pos:end="461:13">pread</name><argument_list pos:start="461:14" pos:end="463:48">(<argument pos:start="461:15" pos:end="461:31"><expr pos:start="461:15" pos:end="461:31"><name pos:start="461:15" pos:end="461:31"><name pos:start="461:15" pos:end="461:18">vdev</name><operator pos:start="461:19" pos:end="461:20">-&gt;</operator><name pos:start="461:21" pos:end="461:28">vbasedev</name><operator pos:start="461:29" pos:end="461:29">.</operator><name pos:start="461:30" pos:end="461:31">fd</name></name></expr></argument>, <argument pos:start="461:34" pos:end="461:42"><expr pos:start="461:34" pos:end="461:42"><operator pos:start="461:34" pos:end="461:34">&amp;</operator><name pos:start="461:35" pos:end="461:42">cmd_orig</name></expr></argument>, <argument pos:start="461:45" pos:end="461:60"><expr pos:start="461:45" pos:end="461:60"><sizeof pos:start="461:45" pos:end="461:60">sizeof<argument_list pos:start="461:51" pos:end="461:60">(<argument pos:start="461:52" pos:end="461:59"><expr pos:start="461:52" pos:end="461:59"><name pos:start="461:52" pos:end="461:59">cmd_orig</name></expr></argument>)</argument_list></sizeof></expr></argument>,

              <argument pos:start="463:15" pos:end="463:47"><expr pos:start="463:15" pos:end="463:47"><name pos:start="463:15" pos:end="463:33"><name pos:start="463:15" pos:end="463:18">vdev</name><operator pos:start="463:19" pos:end="463:20">-&gt;</operator><name pos:start="463:21" pos:end="463:33">config_offset</name></name> <operator pos:start="463:35" pos:end="463:35">+</operator> <name pos:start="463:37" pos:end="463:47">PCI_COMMAND</name></expr></argument>)</argument_list></call> <operator pos:start="463:50" pos:end="463:51">!=</operator> <sizeof pos:start="463:53" pos:end="463:68">sizeof<argument_list pos:start="463:59" pos:end="463:68">(<argument pos:start="463:60" pos:end="463:67"><expr pos:start="463:60" pos:end="463:67"><name pos:start="463:60" pos:end="463:67">cmd_orig</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="463:71" pos:end="469:5">{<block_content pos:start="465:9" pos:end="467:42">

        <expr_stmt pos:start="465:9" pos:end="467:42"><expr pos:start="465:9" pos:end="467:41"><call pos:start="465:9" pos:end="467:41"><name pos:start="465:9" pos:end="465:20">error_report</name><argument_list pos:start="465:21" pos:end="467:41">(<argument pos:start="465:22" pos:end="465:74"><expr pos:start="465:22" pos:end="465:74"><literal type="string" pos:start="465:22" pos:end="465:74">"IGD device %s - failed to read PCI command register"</literal></expr></argument>,

                     <argument pos:start="467:22" pos:end="467:40"><expr pos:start="467:22" pos:end="467:40"><name pos:start="467:22" pos:end="467:40"><name pos:start="467:22" pos:end="467:25">vdev</name><operator pos:start="467:26" pos:end="467:27">-&gt;</operator><name pos:start="467:28" pos:end="467:35">vbasedev</name><operator pos:start="467:36" pos:end="467:36">.</operator><name pos:start="467:37" pos:end="467:40">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="473:5" pos:end="473:36"><expr pos:start="473:5" pos:end="473:35"><name pos:start="473:5" pos:end="473:7">cmd</name> <operator pos:start="473:9" pos:end="473:9">=</operator> <name pos:start="473:11" pos:end="473:18">cmd_orig</name> <operator pos:start="473:20" pos:end="473:20">|</operator> <name pos:start="473:22" pos:end="473:35">PCI_COMMAND_IO</name></expr>;</expr_stmt>



    <if_stmt pos:start="477:5" pos:end="485:5"><if pos:start="477:5" pos:end="485:5">if <condition pos:start="477:8" pos:end="479:65">(<expr pos:start="477:9" pos:end="479:64"><call pos:start="477:9" pos:end="479:49"><name pos:start="477:9" pos:end="477:14">pwrite</name><argument_list pos:start="477:15" pos:end="479:49">(<argument pos:start="477:16" pos:end="477:32"><expr pos:start="477:16" pos:end="477:32"><name pos:start="477:16" pos:end="477:32"><name pos:start="477:16" pos:end="477:19">vdev</name><operator pos:start="477:20" pos:end="477:21">-&gt;</operator><name pos:start="477:22" pos:end="477:29">vbasedev</name><operator pos:start="477:30" pos:end="477:30">.</operator><name pos:start="477:31" pos:end="477:32">fd</name></name></expr></argument>, <argument pos:start="477:35" pos:end="477:38"><expr pos:start="477:35" pos:end="477:38"><operator pos:start="477:35" pos:end="477:35">&amp;</operator><name pos:start="477:36" pos:end="477:38">cmd</name></expr></argument>, <argument pos:start="477:41" pos:end="477:51"><expr pos:start="477:41" pos:end="477:51"><sizeof pos:start="477:41" pos:end="477:51">sizeof<argument_list pos:start="477:47" pos:end="477:51">(<argument pos:start="477:48" pos:end="477:50"><expr pos:start="477:48" pos:end="477:50"><name pos:start="477:48" pos:end="477:50">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,

               <argument pos:start="479:16" pos:end="479:48"><expr pos:start="479:16" pos:end="479:48"><name pos:start="479:16" pos:end="479:34"><name pos:start="479:16" pos:end="479:19">vdev</name><operator pos:start="479:20" pos:end="479:21">-&gt;</operator><name pos:start="479:22" pos:end="479:34">config_offset</name></name> <operator pos:start="479:36" pos:end="479:36">+</operator> <name pos:start="479:38" pos:end="479:48">PCI_COMMAND</name></expr></argument>)</argument_list></call> <operator pos:start="479:51" pos:end="479:52">!=</operator> <sizeof pos:start="479:54" pos:end="479:64">sizeof<argument_list pos:start="479:60" pos:end="479:64">(<argument pos:start="479:61" pos:end="479:63"><expr pos:start="479:61" pos:end="479:63"><name pos:start="479:61" pos:end="479:63">cmd</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="479:67" pos:end="485:5">{<block_content pos:start="481:9" pos:end="483:42">

        <expr_stmt pos:start="481:9" pos:end="483:42"><expr pos:start="481:9" pos:end="483:41"><call pos:start="481:9" pos:end="483:41"><name pos:start="481:9" pos:end="481:20">error_report</name><argument_list pos:start="481:21" pos:end="483:41">(<argument pos:start="481:22" pos:end="481:75"><expr pos:start="481:22" pos:end="481:75"><literal type="string" pos:start="481:22" pos:end="481:75">"IGD device %s - failed to write PCI command register"</literal></expr></argument>,

                     <argument pos:start="483:22" pos:end="483:40"><expr pos:start="483:22" pos:end="483:40"><name pos:start="483:22" pos:end="483:40"><name pos:start="483:22" pos:end="483:25">vdev</name><operator pos:start="483:26" pos:end="483:27">-&gt;</operator><name pos:start="483:28" pos:end="483:35">vbasedev</name><operator pos:start="483:36" pos:end="483:36">.</operator><name pos:start="483:37" pos:end="483:40">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="489:5" pos:end="495:5">for <control pos:start="489:9" pos:end="489:51">(<init pos:start="489:10" pos:end="489:15"><expr pos:start="489:10" pos:end="489:14"><name pos:start="489:10" pos:end="489:10">i</name> <operator pos:start="489:12" pos:end="489:12">=</operator> <literal type="number" pos:start="489:14" pos:end="489:14">1</literal></expr>;</init> <condition pos:start="489:17" pos:end="489:43"><expr pos:start="489:17" pos:end="489:42"><name pos:start="489:17" pos:end="489:17">i</name> <operator pos:start="489:19" pos:end="489:19">&lt;</operator> <call pos:start="489:21" pos:end="489:42"><name pos:start="489:21" pos:end="489:36">vfio_igd_gtt_max</name><argument_list pos:start="489:37" pos:end="489:42">(<argument pos:start="489:38" pos:end="489:41"><expr pos:start="489:38" pos:end="489:41"><name pos:start="489:38" pos:end="489:41">vdev</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="489:45" pos:end="489:50"><expr pos:start="489:45" pos:end="489:50"><name pos:start="489:45" pos:end="489:45">i</name> <operator pos:start="489:47" pos:end="489:48">+=</operator> <literal type="number" pos:start="489:50" pos:end="489:50">4</literal></expr></incr>)</control> <block pos:start="489:53" pos:end="495:5">{<block_content pos:start="491:9" pos:end="493:58">

        <expr_stmt pos:start="491:9" pos:end="491:58"><expr pos:start="491:9" pos:end="491:57"><call pos:start="491:9" pos:end="491:57"><name pos:start="491:9" pos:end="491:25">vfio_region_write</name><argument_list pos:start="491:26" pos:end="491:57">(<argument pos:start="491:27" pos:end="491:47"><expr pos:start="491:27" pos:end="491:47"><operator pos:start="491:27" pos:end="491:27">&amp;</operator><name pos:start="491:28" pos:end="491:40"><name pos:start="491:28" pos:end="491:31">vdev</name><operator pos:start="491:32" pos:end="491:33">-&gt;</operator><name pos:start="491:34" pos:end="491:37">bars</name><index pos:start="491:38" pos:end="491:40">[<expr pos:start="491:39" pos:end="491:39"><literal type="number" pos:start="491:39" pos:end="491:39">4</literal></expr>]</index></name><operator pos:start="491:41" pos:end="491:41">.</operator><name pos:start="491:42" pos:end="491:47">region</name></expr></argument>, <argument pos:start="491:50" pos:end="491:50"><expr pos:start="491:50" pos:end="491:50"><literal type="number" pos:start="491:50" pos:end="491:50">0</literal></expr></argument>, <argument pos:start="491:53" pos:end="491:53"><expr pos:start="491:53" pos:end="491:53"><name pos:start="491:53" pos:end="491:53">i</name></expr></argument>, <argument pos:start="491:56" pos:end="491:56"><expr pos:start="491:56" pos:end="491:56"><literal type="number" pos:start="491:56" pos:end="491:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="493:9" pos:end="493:58"><expr pos:start="493:9" pos:end="493:57"><call pos:start="493:9" pos:end="493:57"><name pos:start="493:9" pos:end="493:25">vfio_region_write</name><argument_list pos:start="493:26" pos:end="493:57">(<argument pos:start="493:27" pos:end="493:47"><expr pos:start="493:27" pos:end="493:47"><operator pos:start="493:27" pos:end="493:27">&amp;</operator><name pos:start="493:28" pos:end="493:40"><name pos:start="493:28" pos:end="493:31">vdev</name><operator pos:start="493:32" pos:end="493:33">-&gt;</operator><name pos:start="493:34" pos:end="493:37">bars</name><index pos:start="493:38" pos:end="493:40">[<expr pos:start="493:39" pos:end="493:39"><literal type="number" pos:start="493:39" pos:end="493:39">4</literal></expr>]</index></name><operator pos:start="493:41" pos:end="493:41">.</operator><name pos:start="493:42" pos:end="493:47">region</name></expr></argument>, <argument pos:start="493:50" pos:end="493:50"><expr pos:start="493:50" pos:end="493:50"><literal type="number" pos:start="493:50" pos:end="493:50">4</literal></expr></argument>, <argument pos:start="493:53" pos:end="493:53"><expr pos:start="493:53" pos:end="493:53"><literal type="number" pos:start="493:53" pos:end="493:53">0</literal></expr></argument>, <argument pos:start="493:56" pos:end="493:56"><expr pos:start="493:56" pos:end="493:56"><literal type="number" pos:start="493:56" pos:end="493:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="499:5" pos:end="507:5"><if pos:start="499:5" pos:end="507:5">if <condition pos:start="499:8" pos:end="501:70">(<expr pos:start="499:9" pos:end="501:69"><call pos:start="499:9" pos:end="501:49"><name pos:start="499:9" pos:end="499:14">pwrite</name><argument_list pos:start="499:15" pos:end="501:49">(<argument pos:start="499:16" pos:end="499:32"><expr pos:start="499:16" pos:end="499:32"><name pos:start="499:16" pos:end="499:32"><name pos:start="499:16" pos:end="499:19">vdev</name><operator pos:start="499:20" pos:end="499:21">-&gt;</operator><name pos:start="499:22" pos:end="499:29">vbasedev</name><operator pos:start="499:30" pos:end="499:30">.</operator><name pos:start="499:31" pos:end="499:32">fd</name></name></expr></argument>, <argument pos:start="499:35" pos:end="499:43"><expr pos:start="499:35" pos:end="499:43"><operator pos:start="499:35" pos:end="499:35">&amp;</operator><name pos:start="499:36" pos:end="499:43">cmd_orig</name></expr></argument>, <argument pos:start="499:46" pos:end="499:61"><expr pos:start="499:46" pos:end="499:61"><sizeof pos:start="499:46" pos:end="499:61">sizeof<argument_list pos:start="499:52" pos:end="499:61">(<argument pos:start="499:53" pos:end="499:60"><expr pos:start="499:53" pos:end="499:60"><name pos:start="499:53" pos:end="499:60">cmd_orig</name></expr></argument>)</argument_list></sizeof></expr></argument>,

               <argument pos:start="501:16" pos:end="501:48"><expr pos:start="501:16" pos:end="501:48"><name pos:start="501:16" pos:end="501:34"><name pos:start="501:16" pos:end="501:19">vdev</name><operator pos:start="501:20" pos:end="501:21">-&gt;</operator><name pos:start="501:22" pos:end="501:34">config_offset</name></name> <operator pos:start="501:36" pos:end="501:36">+</operator> <name pos:start="501:38" pos:end="501:48">PCI_COMMAND</name></expr></argument>)</argument_list></call> <operator pos:start="501:51" pos:end="501:52">!=</operator> <sizeof pos:start="501:54" pos:end="501:69">sizeof<argument_list pos:start="501:60" pos:end="501:69">(<argument pos:start="501:61" pos:end="501:68"><expr pos:start="501:61" pos:end="501:68"><name pos:start="501:61" pos:end="501:68">cmd_orig</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="501:72" pos:end="507:5">{<block_content pos:start="503:9" pos:end="505:42">

        <expr_stmt pos:start="503:9" pos:end="505:42"><expr pos:start="503:9" pos:end="505:41"><call pos:start="503:9" pos:end="505:41"><name pos:start="503:9" pos:end="503:20">error_report</name><argument_list pos:start="503:21" pos:end="505:41">(<argument pos:start="503:22" pos:end="503:77"><expr pos:start="503:22" pos:end="503:77"><literal type="string" pos:start="503:22" pos:end="503:77">"IGD device %s - failed to restore PCI command register"</literal></expr></argument>,

                     <argument pos:start="505:22" pos:end="505:40"><expr pos:start="505:22" pos:end="505:40"><name pos:start="505:22" pos:end="505:40"><name pos:start="505:22" pos:end="505:25">vdev</name><operator pos:start="505:26" pos:end="505:27">-&gt;</operator><name pos:start="505:28" pos:end="505:35">vbasedev</name><operator pos:start="505:36" pos:end="505:36">.</operator><name pos:start="505:37" pos:end="505:40">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="511:5" pos:end="511:75"><expr pos:start="511:5" pos:end="511:74"><call pos:start="511:5" pos:end="511:74"><name pos:start="511:5" pos:end="511:35">trace_vfio_pci_igd_bdsm_enabled</name><argument_list pos:start="511:36" pos:end="511:74">(<argument pos:start="511:37" pos:end="511:55"><expr pos:start="511:37" pos:end="511:55"><name pos:start="511:37" pos:end="511:55"><name pos:start="511:37" pos:end="511:40">vdev</name><operator pos:start="511:41" pos:end="511:42">-&gt;</operator><name pos:start="511:43" pos:end="511:50">vbasedev</name><operator pos:start="511:51" pos:end="511:51">.</operator><name pos:start="511:52" pos:end="511:55">name</name></name></expr></argument>, <argument pos:start="511:58" pos:end="511:73"><expr pos:start="511:58" pos:end="511:73"><name pos:start="511:58" pos:end="511:64">ggms_mb</name> <operator pos:start="511:66" pos:end="511:66">+</operator> <name pos:start="511:68" pos:end="511:73">gms_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="515:1" pos:end="515:4"><name pos:start="515:1" pos:end="515:3">out</name>:</label>

    <expr_stmt pos:start="517:5" pos:end="517:16"><expr pos:start="517:5" pos:end="517:15"><call pos:start="517:5" pos:end="517:15"><name pos:start="517:5" pos:end="517:10">g_free</name><argument_list pos:start="517:11" pos:end="517:15">(<argument pos:start="517:12" pos:end="517:14"><expr pos:start="517:12" pos:end="517:14"><name pos:start="517:12" pos:end="517:14">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="519:5" pos:end="519:21"><expr pos:start="519:5" pos:end="519:20"><call pos:start="519:5" pos:end="519:20"><name pos:start="519:5" pos:end="519:10">g_free</name><argument_list pos:start="519:11" pos:end="519:20">(<argument pos:start="519:12" pos:end="519:19"><expr pos:start="519:12" pos:end="519:19"><name pos:start="519:12" pos:end="519:19">opregion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:17"><expr pos:start="521:5" pos:end="521:16"><call pos:start="521:5" pos:end="521:16"><name pos:start="521:5" pos:end="521:10">g_free</name><argument_list pos:start="521:11" pos:end="521:16">(<argument pos:start="521:12" pos:end="521:15"><expr pos:start="521:12" pos:end="521:15"><name pos:start="521:12" pos:end="521:15">host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="523:5" pos:end="523:16"><expr pos:start="523:5" pos:end="523:15"><call pos:start="523:5" pos:end="523:15"><name pos:start="523:5" pos:end="523:10">g_free</name><argument_list pos:start="523:11" pos:end="523:15">(<argument pos:start="523:12" pos:end="523:14"><expr pos:start="523:12" pos:end="523:14"><name pos:start="523:12" pos:end="523:14">lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
