<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3791.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mainstone_common_init</name><parameter_list pos:start="1:34" pos:end="7:80">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:44">ram_addr_t</name></type> <name pos:start="1:46" pos:end="1:53">ram_size</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:71"><decl pos:start="1:56" pos:end="1:71"><type pos:start="1:56" pos:end="1:71"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:71">vga_ram_size</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:43"><decl pos:start="3:17" pos:end="3:43"><type pos:start="3:17" pos:end="3:43"><specifier pos:start="3:17" pos:end="3:21">const</specifier> <name pos:start="3:23" pos:end="3:26">char</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:43">kernel_filename</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:42"><decl pos:start="5:17" pos:end="5:42"><type pos:start="5:17" pos:end="5:42"><specifier pos:start="5:17" pos:end="5:21">const</specifier> <name pos:start="5:23" pos:end="5:26">char</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:42">kernel_cmdline</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:71"><decl pos:start="5:45" pos:end="5:71"><type pos:start="5:45" pos:end="5:71"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:71">initrd_filename</name></decl></parameter>,

                <parameter pos:start="7:17" pos:end="7:37"><decl pos:start="7:17" pos:end="7:37"><type pos:start="7:17" pos:end="7:37"><specifier pos:start="7:17" pos:end="7:21">const</specifier> <name pos:start="7:23" pos:end="7:26">char</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:37">cpu_model</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:67"><decl pos:start="7:40" pos:end="7:67"><type pos:start="7:40" pos:end="7:67"><name pos:start="7:40" pos:end="7:61"><name pos:start="7:40" pos:end="7:43">enum</name> <name pos:start="7:45" pos:end="7:61">mainstone_model_e</name></name></type> <name pos:start="7:63" pos:end="7:67">model</name></decl></parameter>, <parameter pos:start="7:70" pos:end="7:79"><decl pos:start="7:70" pos:end="7:79"><type pos:start="7:70" pos:end="7:79"><name pos:start="7:70" pos:end="7:72">int</name></type> <name pos:start="7:74" pos:end="7:79">arm_id</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="129:1">{<block_content pos:start="11:5" pos:end="127:48">

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:23">sector_len</name> <init pos:start="11:25" pos:end="11:36">= <expr pos:start="11:27" pos:end="11:36"><literal type="number" pos:start="11:27" pos:end="11:29">256</literal> <operator pos:start="11:31" pos:end="11:31">*</operator> <literal type="number" pos:start="11:33" pos:end="11:36">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:77"><decl pos:start="13:5" pos:end="13:76"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:22">target_phys_addr_t</name></type> <name pos:start="13:24" pos:end="13:45"><name pos:start="13:24" pos:end="13:43">mainstone_flash_base</name><index pos:start="13:44" pos:end="13:45">[]</index></name> <init pos:start="13:47" pos:end="13:76">= <expr pos:start="13:49" pos:end="13:76"><block pos:start="13:49" pos:end="13:76">{ <expr pos:start="13:51" pos:end="13:61"><name pos:start="13:51" pos:end="13:61">MST_FLASH_0</name></expr>, <expr pos:start="13:64" pos:end="13:74"><name pos:start="13:64" pos:end="13:74">MST_FLASH_1</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:25">pxa2xx_state_s</name></name> <modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:30">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:21">mst_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:16"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:16">index</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:32"><if pos:start="23:5" pos:end="25:32">if <condition pos:start="23:8" pos:end="23:19">(<expr pos:start="23:9" pos:end="23:18"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:32"><block_content pos:start="25:9" pos:end="25:32">

        <expr_stmt pos:start="25:9" pos:end="25:32"><expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:17">cpu_model</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="string" pos:start="25:21" pos:end="25:31">"pxa270-c5"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:28">/* Setup CPU &amp; memory */</comment>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="43:5">if <condition pos:start="31:8" pos:end="33:41">(<expr pos:start="31:9" pos:end="33:40"><name pos:start="31:9" pos:end="31:16">ram_size</name> <operator pos:start="31:18" pos:end="31:18">&lt;</operator> <name pos:start="31:20" pos:end="31:32">MAINSTONE_RAM</name> <operator pos:start="31:34" pos:end="31:34">+</operator> <name pos:start="31:36" pos:end="31:48">MAINSTONE_ROM</name> <operator pos:start="31:50" pos:end="31:50">+</operator> <literal type="number" pos:start="31:52" pos:end="31:52">2</literal> <operator pos:start="31:54" pos:end="31:54">*</operator> <name pos:start="31:56" pos:end="31:70">MAINSTONE_FLASH</name> <operator pos:start="31:72" pos:end="31:72">+</operator>

                    <name pos:start="33:21" pos:end="33:40">PXA2XX_INTERNAL_SIZE</name></expr>)</condition> <block pos:start="33:43" pos:end="43:5">{<block_content pos:start="35:9" pos:end="41:16">

        <expr_stmt pos:start="35:9" pos:end="39:46"><expr pos:start="35:9" pos:end="39:45"><call pos:start="35:9" pos:end="39:45"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="39:45">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:69"><expr pos:start="35:25" pos:end="35:69"><literal type="string" pos:start="35:25" pos:end="35:69">"This platform requires %i bytes of memory\n"</literal></expr></argument>,

                        <argument pos:start="37:25" pos:end="39:44"><expr pos:start="37:25" pos:end="39:44"><name pos:start="37:25" pos:end="37:37">MAINSTONE_RAM</name> <operator pos:start="37:39" pos:end="37:39">+</operator> <name pos:start="37:41" pos:end="37:53">MAINSTONE_ROM</name> <operator pos:start="37:55" pos:end="37:55">+</operator> <literal type="number" pos:start="37:57" pos:end="37:57">2</literal> <operator pos:start="37:59" pos:end="37:59">*</operator> <name pos:start="37:61" pos:end="37:75">MAINSTONE_FLASH</name> <operator pos:start="37:77" pos:end="37:77">+</operator>

                        <name pos:start="39:25" pos:end="39:44">PXA2XX_INTERNAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:16"><expr pos:start="41:9" pos:end="41:15"><call pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:12">exit</name><argument_list pos:start="41:13" pos:end="41:15">(<argument pos:start="41:14" pos:end="41:14"><expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:59"><expr pos:start="47:5" pos:end="47:58"><name pos:start="47:5" pos:end="47:7">cpu</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:58"><name pos:start="47:11" pos:end="47:21">pxa270_init</name><argument_list pos:start="47:22" pos:end="47:58">(<argument pos:start="47:23" pos:end="47:46"><expr pos:start="47:23" pos:end="47:46"><name pos:start="47:23" pos:end="47:46"><name pos:start="47:23" pos:end="47:37">mainstone_binfo</name><operator pos:start="47:38" pos:end="47:38">.</operator><name pos:start="47:39" pos:end="47:46">ram_size</name></name></expr></argument>, <argument pos:start="47:49" pos:end="47:57"><expr pos:start="47:49" pos:end="47:57"><name pos:start="47:49" pos:end="47:57">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:64"><expr pos:start="49:5" pos:end="51:63"><call pos:start="49:5" pos:end="51:63"><name pos:start="49:5" pos:end="49:32">cpu_register_physical_memory</name><argument_list pos:start="49:33" pos:end="51:63">(<argument pos:start="49:34" pos:end="49:34"><expr pos:start="49:34" pos:end="49:34"><literal type="number" pos:start="49:34" pos:end="49:34">0</literal></expr></argument>, <argument pos:start="49:37" pos:end="49:49"><expr pos:start="49:37" pos:end="49:49"><name pos:start="49:37" pos:end="49:49">MAINSTONE_ROM</name></expr></argument>,

                    <argument pos:start="51:21" pos:end="51:62"><expr pos:start="51:21" pos:end="51:62"><call pos:start="51:21" pos:end="51:49"><name pos:start="51:21" pos:end="51:34">qemu_ram_alloc</name><argument_list pos:start="51:35" pos:end="51:49">(<argument pos:start="51:36" pos:end="51:48"><expr pos:start="51:36" pos:end="51:48"><name pos:start="51:36" pos:end="51:48">MAINSTONE_ROM</name></expr></argument>)</argument_list></call> <operator pos:start="51:51" pos:end="51:51">|</operator> <name pos:start="51:53" pos:end="51:62">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:45">/* Setup initial (reset) machine state */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:54"><expr pos:start="57:5" pos:end="57:53"><name pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:7">cpu</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:12">env</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:18">regs</name><index pos:start="57:19" pos:end="57:22">[<expr pos:start="57:20" pos:end="57:21"><literal type="number" pos:start="57:20" pos:end="57:21">15</literal></expr>]</index></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:53"><name pos:start="57:26" pos:end="57:40">mainstone_binfo</name><operator pos:start="57:41" pos:end="57:41">.</operator><name pos:start="57:42" pos:end="57:53">loader_start</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:56">/* There are two 32MiB flash devices on the board */</comment>

    <for pos:start="63:5" pos:end="93:5">for <control pos:start="63:9" pos:end="63:28">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:21"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <literal type="number" pos:start="63:21" pos:end="63:21">2</literal></expr>;</condition> <incr pos:start="63:24" pos:end="63:27"><expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:24">i</name> <operator pos:start="63:26" pos:end="63:27">++</operator></expr></incr>)</control> <block pos:start="63:30" pos:end="93:5">{<block_content pos:start="65:9" pos:end="91:9">

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:13">index</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <call pos:start="65:17" pos:end="65:48"><name pos:start="65:17" pos:end="65:31">drive_get_index</name><argument_list pos:start="65:32" pos:end="65:48">(<argument pos:start="65:33" pos:end="65:41"><expr pos:start="65:33" pos:end="65:41"><name pos:start="65:33" pos:end="65:41">IF_PFLASH</name></expr></argument>, <argument pos:start="65:44" pos:end="65:44"><expr pos:start="65:44" pos:end="65:44"><literal type="number" pos:start="65:44" pos:end="65:44">0</literal></expr></argument>, <argument pos:start="65:47" pos:end="65:47"><expr pos:start="65:47" pos:end="65:47"><name pos:start="65:47" pos:end="65:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:24">(<expr pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:17">index</name> <operator pos:start="67:19" pos:end="67:20">==</operator> <operator pos:start="67:22" pos:end="67:22">-</operator><literal type="number" pos:start="67:23" pos:end="67:23">1</literal></expr>)</condition> <block pos:start="67:26" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:20">

            <expr_stmt pos:start="69:13" pos:end="71:44"><expr pos:start="69:13" pos:end="71:43"><call pos:start="69:13" pos:end="71:43"><name pos:start="69:13" pos:end="69:19">fprintf</name><argument_list pos:start="69:20" pos:end="71:43">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">stderr</name></expr></argument>, <argument pos:start="69:29" pos:end="71:42"><expr pos:start="69:29" pos:end="71:42"><literal type="string" pos:start="69:29" pos:end="69:70">"Two flash images must be given with the "</literal>

                    <literal type="string" pos:start="71:21" pos:end="71:42">"'pflash' parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:20"><expr pos:start="73:13" pos:end="73:19"><call pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:16">exit</name><argument_list pos:start="73:17" pos:end="73:19">(<argument pos:start="73:18" pos:end="73:18"><expr pos:start="73:18" pos:end="73:18"><literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="79:9" pos:end="91:9"><if pos:start="79:9" pos:end="91:9">if <condition pos:start="79:12" pos:end="85:77">(<expr pos:start="79:13" pos:end="85:76"><operator pos:start="79:13" pos:end="79:13">!</operator><call pos:start="79:14" pos:end="85:76"><name pos:start="79:14" pos:end="79:34">pflash_cfi01_register</name><argument_list pos:start="79:35" pos:end="85:76">(<argument pos:start="79:36" pos:end="79:58"><expr pos:start="79:36" pos:end="79:58"><name pos:start="79:36" pos:end="79:58"><name pos:start="79:36" pos:end="79:55">mainstone_flash_base</name><index pos:start="79:56" pos:end="79:58">[<expr pos:start="79:57" pos:end="79:57"><name pos:start="79:57" pos:end="79:57">i</name></expr>]</index></name></expr></argument>,

                                <argument pos:start="81:33" pos:end="81:63"><expr pos:start="81:33" pos:end="81:63"><call pos:start="81:33" pos:end="81:63"><name pos:start="81:33" pos:end="81:46">qemu_ram_alloc</name><argument_list pos:start="81:47" pos:end="81:63">(<argument pos:start="81:48" pos:end="81:62"><expr pos:start="81:48" pos:end="81:62"><name pos:start="81:48" pos:end="81:62">MAINSTONE_FLASH</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="83:33" pos:end="83:56"><expr pos:start="83:33" pos:end="83:56"><name pos:start="83:33" pos:end="83:51"><name pos:start="83:33" pos:end="83:44">drives_table</name><index pos:start="83:45" pos:end="83:51">[<expr pos:start="83:46" pos:end="83:50"><name pos:start="83:46" pos:end="83:50">index</name></expr>]</index></name><operator pos:start="83:52" pos:end="83:52">.</operator><name pos:start="83:53" pos:end="83:56">bdrv</name></expr></argument>, <argument pos:start="83:59" pos:end="83:68"><expr pos:start="83:59" pos:end="83:68"><name pos:start="83:59" pos:end="83:68">sector_len</name></expr></argument>,

                                <argument pos:start="85:33" pos:end="85:60"><expr pos:start="85:33" pos:end="85:60"><name pos:start="85:33" pos:end="85:47">MAINSTONE_FLASH</name> <operator pos:start="85:49" pos:end="85:49">/</operator> <name pos:start="85:51" pos:end="85:60">sector_len</name></expr></argument>, <argument pos:start="85:63" pos:end="85:63"><expr pos:start="85:63" pos:end="85:63"><literal type="number" pos:start="85:63" pos:end="85:63">4</literal></expr></argument>, <argument pos:start="85:66" pos:end="85:66"><expr pos:start="85:66" pos:end="85:66"><literal type="number" pos:start="85:66" pos:end="85:66">0</literal></expr></argument>, <argument pos:start="85:69" pos:end="85:69"><expr pos:start="85:69" pos:end="85:69"><literal type="number" pos:start="85:69" pos:end="85:69">0</literal></expr></argument>, <argument pos:start="85:72" pos:end="85:72"><expr pos:start="85:72" pos:end="85:72"><literal type="number" pos:start="85:72" pos:end="85:72">0</literal></expr></argument>, <argument pos:start="85:75" pos:end="85:75"><expr pos:start="85:75" pos:end="85:75"><literal type="number" pos:start="85:75" pos:end="85:75">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:79" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:20">

            <expr_stmt pos:start="87:13" pos:end="87:71"><expr pos:start="87:13" pos:end="87:70"><call pos:start="87:13" pos:end="87:70"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="87:70">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:69"><expr pos:start="87:29" pos:end="87:69"><literal type="string" pos:start="87:29" pos:end="87:69">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:20"><expr pos:start="89:13" pos:end="89:19"><call pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:16">exit</name><argument_list pos:start="89:17" pos:end="89:19">(<argument pos:start="89:18" pos:end="89:18"><expr pos:start="89:18" pos:end="89:18"><literal type="number" pos:start="89:18" pos:end="89:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="97:5" pos:end="97:66"><expr pos:start="97:5" pos:end="97:65"><name pos:start="97:5" pos:end="97:11">mst_irq</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:65"><name pos:start="97:15" pos:end="97:26">mst_irq_init</name><argument_list pos:start="97:27" pos:end="97:65">(<argument pos:start="97:28" pos:end="97:30"><expr pos:start="97:28" pos:end="97:30"><name pos:start="97:28" pos:end="97:30">cpu</name></expr></argument>, <argument pos:start="97:33" pos:end="97:45"><expr pos:start="97:33" pos:end="97:45"><name pos:start="97:33" pos:end="97:45">MST_FPGA_PHYS</name></expr></argument>, <argument pos:start="97:48" pos:end="97:64"><expr pos:start="97:48" pos:end="97:64"><name pos:start="97:48" pos:end="97:64">PXA2XX_PIC_GPIO_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:22">/* setup keypad */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:34"><expr pos:start="103:5" pos:end="103:33"><call pos:start="103:5" pos:end="103:33"><name pos:start="103:5" pos:end="103:10">printf</name><argument_list pos:start="103:11" pos:end="103:33">(<argument pos:start="103:12" pos:end="103:26"><expr pos:start="103:12" pos:end="103:26"><literal type="string" pos:start="103:12" pos:end="103:26">"map addr %p\n"</literal></expr></argument>, <argument pos:start="103:29" pos:end="103:32"><expr pos:start="103:29" pos:end="103:32"><operator pos:start="103:29" pos:end="103:29">&amp;</operator><name pos:start="103:30" pos:end="103:32">map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:47"><expr pos:start="105:5" pos:end="105:46"><call pos:start="105:5" pos:end="105:46"><name pos:start="105:5" pos:end="105:26">pxa27x_register_keypad</name><argument_list pos:start="105:27" pos:end="105:46">(<argument pos:start="105:28" pos:end="105:34"><expr pos:start="105:28" pos:end="105:34"><name pos:start="105:28" pos:end="105:34"><name pos:start="105:28" pos:end="105:30">cpu</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:34">kp</name></name></expr></argument>, <argument pos:start="105:37" pos:end="105:39"><expr pos:start="105:37" pos:end="105:39"><name pos:start="105:37" pos:end="105:39">map</name></expr></argument>, <argument pos:start="105:42" pos:end="105:45"><expr pos:start="105:42" pos:end="105:45"><literal type="number" pos:start="105:42" pos:end="105:45">0xe0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:21">/* MMC/SD host */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:59"><expr pos:start="111:5" pos:end="111:58"><call pos:start="111:5" pos:end="111:58"><name pos:start="111:5" pos:end="111:24">pxa2xx_mmci_handlers</name><argument_list pos:start="111:25" pos:end="111:58">(<argument pos:start="111:26" pos:end="111:33"><expr pos:start="111:26" pos:end="111:33"><name pos:start="111:26" pos:end="111:33"><name pos:start="111:26" pos:end="111:28">cpu</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:33">mmc</name></name></expr></argument>, <argument pos:start="111:36" pos:end="111:39"><expr pos:start="111:36" pos:end="111:39"><name pos:start="111:36" pos:end="111:39">NULL</name></expr></argument>, <argument pos:start="111:42" pos:end="111:57"><expr pos:start="111:42" pos:end="111:57"><name pos:start="111:42" pos:end="111:57"><name pos:start="111:42" pos:end="111:48">mst_irq</name><index pos:start="111:49" pos:end="111:57">[<expr pos:start="111:50" pos:end="111:56"><name pos:start="111:50" pos:end="111:56">MMC_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:70"><expr pos:start="115:5" pos:end="115:69"><call pos:start="115:5" pos:end="115:69"><name pos:start="115:5" pos:end="115:18">smc91c111_init</name><argument_list pos:start="115:19" pos:end="115:69">(<argument pos:start="115:20" pos:end="115:31"><expr pos:start="115:20" pos:end="115:31"><operator pos:start="115:20" pos:end="115:20">&amp;</operator><name pos:start="115:21" pos:end="115:31"><name pos:start="115:21" pos:end="115:28">nd_table</name><index pos:start="115:29" pos:end="115:31">[<expr pos:start="115:30" pos:end="115:30"><literal type="number" pos:start="115:30" pos:end="115:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="115:34" pos:end="115:45"><expr pos:start="115:34" pos:end="115:45"><name pos:start="115:34" pos:end="115:45">MST_ETH_PHYS</name></expr></argument>, <argument pos:start="115:48" pos:end="115:68"><expr pos:start="115:48" pos:end="115:68"><name pos:start="115:48" pos:end="115:68"><name pos:start="115:48" pos:end="115:54">mst_irq</name><index pos:start="115:55" pos:end="115:68">[<expr pos:start="115:56" pos:end="115:67"><name pos:start="115:56" pos:end="115:67">ETHERNET_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:54"><expr pos:start="119:5" pos:end="119:53"><name pos:start="119:5" pos:end="119:35"><name pos:start="119:5" pos:end="119:19">mainstone_binfo</name><operator pos:start="119:20" pos:end="119:20">.</operator><name pos:start="119:21" pos:end="119:35">kernel_filename</name></name> <operator pos:start="119:37" pos:end="119:37">=</operator> <name pos:start="119:39" pos:end="119:53">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:52"><expr pos:start="121:5" pos:end="121:51"><name pos:start="121:5" pos:end="121:34"><name pos:start="121:5" pos:end="121:19">mainstone_binfo</name><operator pos:start="121:20" pos:end="121:20">.</operator><name pos:start="121:21" pos:end="121:34">kernel_cmdline</name></name> <operator pos:start="121:36" pos:end="121:36">=</operator> <name pos:start="121:38" pos:end="121:51">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:54"><expr pos:start="123:5" pos:end="123:53"><name pos:start="123:5" pos:end="123:35"><name pos:start="123:5" pos:end="123:19">mainstone_binfo</name><operator pos:start="123:20" pos:end="123:20">.</operator><name pos:start="123:21" pos:end="123:35">initrd_filename</name></name> <operator pos:start="123:37" pos:end="123:37">=</operator> <name pos:start="123:39" pos:end="123:53">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:38"><expr pos:start="125:5" pos:end="125:37"><name pos:start="125:5" pos:end="125:28"><name pos:start="125:5" pos:end="125:19">mainstone_binfo</name><operator pos:start="125:20" pos:end="125:20">.</operator><name pos:start="125:21" pos:end="125:28">board_id</name></name> <operator pos:start="125:30" pos:end="125:30">=</operator> <name pos:start="125:32" pos:end="125:37">arm_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:48"><expr pos:start="127:5" pos:end="127:47"><call pos:start="127:5" pos:end="127:47"><name pos:start="127:5" pos:end="127:19">arm_load_kernel</name><argument_list pos:start="127:20" pos:end="127:47">(<argument pos:start="127:21" pos:end="127:28"><expr pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:23">cpu</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:28">env</name></name></expr></argument>, <argument pos:start="127:31" pos:end="127:46"><expr pos:start="127:31" pos:end="127:46"><operator pos:start="127:31" pos:end="127:31">&amp;</operator><name pos:start="127:32" pos:end="127:46">mainstone_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
