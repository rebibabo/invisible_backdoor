<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16403.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:48">gen_intermediate_code_internal</name><parameter_list pos:start="1:49" pos:end="5:63">(<parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">CPUState</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">env</name></decl></parameter>,

                                                 <parameter pos:start="3:50" pos:end="3:69"><decl pos:start="3:50" pos:end="3:69"><type pos:start="3:50" pos:end="3:69"><name pos:start="3:50" pos:end="3:65">TranslationBlock</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:69">tb</name></decl></parameter>, 

                                                 <parameter pos:start="5:50" pos:end="5:62"><decl pos:start="5:50" pos:end="5:62"><type pos:start="5:50" pos:end="5:62"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:62">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="263:1">{<block_content pos:start="9:5" pos:end="261:13">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">dc1</name></decl>, <decl pos:start="9:23" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">dc</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><operator pos:start="9:29" pos:end="9:29">&amp;</operator><name pos:start="9:30" pos:end="9:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:19">pc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint16_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">flags</name></decl>, <decl pos:start="15:16" pos:end="15:16"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:16" pos:end="15:16">j</name></decl>, <decl pos:start="15:19" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:19" pos:end="15:20">lj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:21">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">cs_base</name></decl>;</decl_stmt>

    

    <comment type="block" pos:start="23:5" pos:end="23:36">/* generate intermediate code */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:12">pc_start</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <operator pos:start="25:16" pos:end="25:16">(</operator><name pos:start="25:17" pos:end="25:23">uint8_t</name> <operator pos:start="25:25" pos:end="25:25">*</operator><operator pos:start="25:26" pos:end="25:26">)</operator><name pos:start="25:27" pos:end="25:32"><name pos:start="25:27" pos:end="25:28">tb</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:32">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:11">cs_base</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">(</operator><name pos:start="27:16" pos:end="27:22">uint8_t</name> <operator pos:start="27:24" pos:end="27:24">*</operator><operator pos:start="27:25" pos:end="27:25">)</operator><name pos:start="27:26" pos:end="27:36"><name pos:start="27:26" pos:end="27:27">tb</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:36">cs_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:9">flags</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <name pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:14">tb</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:21">flags</name></name></expr>;</expr_stmt>

       

    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:10">pe</name></name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:23"><name pos:start="33:14" pos:end="33:16">env</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:20">cr</name><index pos:start="33:21" pos:end="33:23">[<expr pos:start="33:22" pos:end="33:22"><literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr>]</index></name> <operator pos:start="33:25" pos:end="33:25">&amp;</operator> <name pos:start="33:27" pos:end="33:37">CR0_PE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:6">dc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:14">code32</name></name> <operator pos:start="35:16" pos:end="35:16">=</operator> <operator pos:start="35:18" pos:end="35:18">(</operator><name pos:start="35:19" pos:end="35:23">flags</name> <operator pos:start="35:25" pos:end="35:26">&gt;&gt;</operator> <name pos:start="35:28" pos:end="35:40">HF_CS32_SHIFT</name><operator pos:start="35:41" pos:end="35:41">)</operator> <operator pos:start="35:43" pos:end="35:43">&amp;</operator> <literal type="number" pos:start="35:45" pos:end="35:45">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:12">ss32</name></name> <operator pos:start="37:14" pos:end="37:14">=</operator> <operator pos:start="37:16" pos:end="37:16">(</operator><name pos:start="37:17" pos:end="37:21">flags</name> <operator pos:start="37:23" pos:end="37:24">&gt;&gt;</operator> <name pos:start="37:26" pos:end="37:38">HF_SS32_SHIFT</name><operator pos:start="37:39" pos:end="37:39">)</operator> <operator pos:start="37:41" pos:end="37:41">&amp;</operator> <literal type="number" pos:start="37:43" pos:end="37:43">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:48"><expr pos:start="39:5" pos:end="39:47"><name pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:14">addseg</name></name> <operator pos:start="39:16" pos:end="39:16">=</operator> <operator pos:start="39:18" pos:end="39:18">(</operator><name pos:start="39:19" pos:end="39:23">flags</name> <operator pos:start="39:25" pos:end="39:26">&gt;&gt;</operator> <name pos:start="39:28" pos:end="39:42">HF_ADDSEG_SHIFT</name><operator pos:start="39:43" pos:end="39:43">)</operator> <operator pos:start="39:45" pos:end="39:45">&amp;</operator> <literal type="number" pos:start="39:47" pos:end="39:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:17"><expr pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:12">f_st</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:6">dc</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:12">vm86</name></name> <operator pos:start="43:14" pos:end="43:14">=</operator> <operator pos:start="43:16" pos:end="43:16">(</operator><name pos:start="43:17" pos:end="43:21">flags</name> <operator pos:start="43:23" pos:end="43:24">&gt;&gt;</operator> <name pos:start="43:26" pos:end="43:33">VM_SHIFT</name><operator pos:start="43:34" pos:end="43:34">)</operator> <operator pos:start="43:36" pos:end="43:36">&amp;</operator> <literal type="number" pos:start="43:38" pos:end="43:38">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:6">dc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:11">cpl</name></name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">(</operator><name pos:start="45:16" pos:end="45:20">flags</name> <operator pos:start="45:22" pos:end="45:23">&gt;&gt;</operator> <name pos:start="45:25" pos:end="45:36">HF_CPL_SHIFT</name><operator pos:start="45:37" pos:end="45:37">)</operator> <operator pos:start="45:39" pos:end="45:39">&amp;</operator> <literal type="number" pos:start="45:41" pos:end="45:41">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:41"><expr pos:start="47:5" pos:end="47:40"><name pos:start="47:5" pos:end="47:12"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:12">iopl</name></name> <operator pos:start="47:14" pos:end="47:14">=</operator> <operator pos:start="47:16" pos:end="47:16">(</operator><name pos:start="47:17" pos:end="47:21">flags</name> <operator pos:start="47:23" pos:end="47:24">&gt;&gt;</operator> <name pos:start="47:26" pos:end="47:35">IOPL_SHIFT</name><operator pos:start="47:36" pos:end="47:36">)</operator> <operator pos:start="47:38" pos:end="47:38">&amp;</operator> <literal type="number" pos:start="47:40" pos:end="47:40">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:37"><expr pos:start="49:5" pos:end="49:36"><name pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:10">tf</name></name> <operator pos:start="49:12" pos:end="49:12">=</operator> <operator pos:start="49:14" pos:end="49:14">(</operator><name pos:start="49:15" pos:end="49:19">flags</name> <operator pos:start="49:21" pos:end="49:22">&gt;&gt;</operator> <name pos:start="49:24" pos:end="49:31">TF_SHIFT</name><operator pos:start="49:32" pos:end="49:32">)</operator> <operator pos:start="49:34" pos:end="49:34">&amp;</operator> <literal type="number" pos:start="49:36" pos:end="49:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:53"><expr pos:start="51:5" pos:end="51:52"><name pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:26">singlestep_enabled</name></name> <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:52"><name pos:start="51:30" pos:end="51:32">env</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:52">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:30"><expr pos:start="53:5" pos:end="53:29"><name pos:start="53:5" pos:end="53:13"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:13">cc_op</name></name> <operator pos:start="53:15" pos:end="53:15">=</operator> <name pos:start="53:17" pos:end="53:29">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:15">cs_base</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:25">cs_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:16"><expr pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:10">tb</name></name> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:6">dc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:21">popl_esp_hack</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <literal type="number" pos:start="59:25" pos:end="59:25">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:40">/* select memory access functions */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:22"><expr pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:6">dc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:17">mem_index</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="number" pos:start="63:21" pos:end="63:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="75:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:32">(<expr pos:start="65:9" pos:end="65:31"><name pos:start="65:9" pos:end="65:13">flags</name> <operator pos:start="65:15" pos:end="65:15">&amp;</operator> <name pos:start="65:17" pos:end="65:31">HF_SOFTMMU_MASK</name></expr>)</condition> <block pos:start="65:34" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:30">

        <if_stmt pos:start="67:9" pos:end="73:30"><if pos:start="67:9" pos:end="69:30">if <condition pos:start="67:12" pos:end="67:25">(<expr pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:14">dc</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:19">cpl</name></name> <operator pos:start="67:21" pos:end="67:22">==</operator> <literal type="number" pos:start="67:24" pos:end="67:24">3</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:30"><block_content pos:start="69:13" pos:end="69:30">

            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:14">dc</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:25">mem_index</name></name> <operator pos:start="69:27" pos:end="69:27">=</operator> <literal type="number" pos:start="69:29" pos:end="69:29">6</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="71:9" pos:end="73:30">else<block type="pseudo" pos:start="73:13" pos:end="73:30"><block_content pos:start="73:13" pos:end="73:30">

            <expr_stmt pos:start="73:13" pos:end="73:30"><expr pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:14">dc</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:25">mem_index</name></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <literal type="number" pos:start="73:29" pos:end="73:29">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="85:22"><expr pos:start="77:5" pos:end="85:21"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:6">dc</name><operator pos:start="77:7" pos:end="77:8">-&gt;</operator><name pos:start="77:9" pos:end="77:15">jmp_opt</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <operator pos:start="77:19" pos:end="77:19">!</operator><operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:22">dc</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:26">tf</name></name> <operator pos:start="77:28" pos:end="77:29">||</operator> <name pos:start="77:31" pos:end="80:0"><name pos:start="77:31" pos:end="77:33">env</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="80:0">singlestep_enabled</name></name>

<cpp:ifndef pos:start="79:1" pos:end="79:23">#<cpp:directive pos:start="79:2" pos:end="79:7">ifndef</cpp:directive> <name pos:start="79:9" pos:end="79:23">CONFIG_SOFT_MMU</name></cpp:ifndef>

                    <operator pos:start="81:21" pos:end="81:22">||</operator> <operator pos:start="81:24" pos:end="81:24">(</operator><name pos:start="81:25" pos:end="81:29">flags</name> <operator pos:start="81:31" pos:end="81:31">&amp;</operator> <name pos:start="81:33" pos:end="81:47">HF_SOFTMMU_MASK</name><operator pos:start="81:48" pos:end="84:0">)</operator>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

                    <operator pos:start="85:21" pos:end="85:21">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:30"><expr pos:start="87:5" pos:end="87:29"><name pos:start="87:5" pos:end="87:15">gen_opc_ptr</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:29">gen_opc_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:45"><expr pos:start="89:5" pos:end="89:44"><name pos:start="89:5" pos:end="89:15">gen_opc_end</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <name pos:start="89:19" pos:end="89:29">gen_opc_buf</name> <operator pos:start="89:31" pos:end="89:31">+</operator> <name pos:start="89:33" pos:end="89:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:38"><expr pos:start="91:5" pos:end="91:37"><name pos:start="91:5" pos:end="91:19">gen_opparam_ptr</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <name pos:start="91:23" pos:end="91:37">gen_opparam_buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:28"><expr pos:start="95:5" pos:end="95:27"><name pos:start="95:5" pos:end="95:14"><name pos:start="95:5" pos:end="95:6">dc</name><operator pos:start="95:7" pos:end="95:8">-&gt;</operator><name pos:start="95:9" pos:end="95:14">is_jmp</name></name> <operator pos:start="95:16" pos:end="95:16">=</operator> <name pos:start="95:18" pos:end="95:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:22"><expr pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:10">pc_ptr</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <name pos:start="97:14" pos:end="97:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:12"><expr pos:start="99:5" pos:end="99:11"><name pos:start="99:5" pos:end="99:6">lj</name> <operator pos:start="99:8" pos:end="99:8">=</operator> <operator pos:start="99:10" pos:end="99:10">-</operator><literal type="number" pos:start="99:11" pos:end="99:11">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="107:34">/* if irq were inhibited for the next instruction, we can disable

       them here as it is simpler (otherwise jumps would have to

       handled as special case) */</comment>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:36">(<expr pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:13">flags</name> <operator pos:start="109:15" pos:end="109:15">&amp;</operator> <name pos:start="109:17" pos:end="109:35">HF_INHIBIT_IRQ_MASK</name></expr>)</condition> <block pos:start="109:38" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:35">

        <expr_stmt pos:start="111:9" pos:end="111:35"><expr pos:start="111:9" pos:end="111:34"><call pos:start="111:9" pos:end="111:34"><name pos:start="111:9" pos:end="111:32">gen_op_reset_inhibit_irq</name><argument_list pos:start="111:33" pos:end="111:34">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="115:5" pos:end="191:5">for<control pos:start="115:8" pos:end="115:11">(<init pos:start="115:9" pos:end="115:9">;</init><condition pos:start="115:10" pos:end="115:10">;</condition><incr/>)</control> <block pos:start="115:13" pos:end="191:5">{<block_content pos:start="117:9" pos:end="189:9">

        <if_stmt pos:start="117:9" pos:end="131:9"><if pos:start="117:9" pos:end="131:9">if <condition pos:start="117:12" pos:end="117:36">(<expr pos:start="117:13" pos:end="117:35"><name pos:start="117:13" pos:end="117:31"><name pos:start="117:13" pos:end="117:15">env</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:31">nb_breakpoints</name></name> <operator pos:start="117:33" pos:end="117:33">&gt;</operator> <literal type="number" pos:start="117:35" pos:end="117:35">0</literal></expr>)</condition> <block pos:start="117:38" pos:end="131:9">{<block_content pos:start="119:13" pos:end="129:13">

            <for pos:start="119:13" pos:end="129:13">for<control pos:start="119:16" pos:end="119:52">(<init pos:start="119:17" pos:end="119:22"><expr pos:start="119:17" pos:end="119:21"><name pos:start="119:17" pos:end="119:17">j</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <literal type="number" pos:start="119:21" pos:end="119:21">0</literal></expr>;</init> <condition pos:start="119:24" pos:end="119:47"><expr pos:start="119:24" pos:end="119:46"><name pos:start="119:24" pos:end="119:24">j</name> <operator pos:start="119:26" pos:end="119:26">&lt;</operator> <name pos:start="119:28" pos:end="119:46"><name pos:start="119:28" pos:end="119:30">env</name><operator pos:start="119:31" pos:end="119:32">-&gt;</operator><name pos:start="119:33" pos:end="119:46">nb_breakpoints</name></name></expr>;</condition> <incr pos:start="119:49" pos:end="119:51"><expr pos:start="119:49" pos:end="119:51"><name pos:start="119:49" pos:end="119:49">j</name><operator pos:start="119:50" pos:end="119:51">++</operator></expr></incr>)</control> <block pos:start="119:54" pos:end="129:13">{<block_content pos:start="121:17" pos:end="127:17">

                <if_stmt pos:start="121:17" pos:end="127:17"><if pos:start="121:17" pos:end="127:17">if <condition pos:start="121:20" pos:end="121:65">(<expr pos:start="121:21" pos:end="121:64"><name pos:start="121:21" pos:end="121:39"><name pos:start="121:21" pos:end="121:23">env</name><operator pos:start="121:24" pos:end="121:25">-&gt;</operator><name pos:start="121:26" pos:end="121:36">breakpoints</name><index pos:start="121:37" pos:end="121:39">[<expr pos:start="121:38" pos:end="121:38"><name pos:start="121:38" pos:end="121:38">j</name></expr>]</index></name> <operator pos:start="121:41" pos:end="121:42">==</operator> <operator pos:start="121:44" pos:end="121:44">(</operator><name pos:start="121:45" pos:end="121:52">unsigned</name> <name pos:start="121:54" pos:end="121:57">long</name><operator pos:start="121:58" pos:end="121:58">)</operator><name pos:start="121:59" pos:end="121:64">pc_ptr</name></expr>)</condition> <block pos:start="121:67" pos:end="127:17">{<block_content pos:start="123:21" pos:end="125:26">

                    <expr_stmt pos:start="123:21" pos:end="123:56"><expr pos:start="123:21" pos:end="123:55"><call pos:start="123:21" pos:end="123:55"><name pos:start="123:21" pos:end="123:29">gen_debug</name><argument_list pos:start="123:30" pos:end="123:55">(<argument pos:start="123:31" pos:end="123:32"><expr pos:start="123:31" pos:end="123:32"><name pos:start="123:31" pos:end="123:32">dc</name></expr></argument>, <argument pos:start="123:35" pos:end="123:54"><expr pos:start="123:35" pos:end="123:54"><name pos:start="123:35" pos:end="123:40">pc_ptr</name> <operator pos:start="123:42" pos:end="123:42">-</operator> <name pos:start="123:44" pos:end="123:54"><name pos:start="123:44" pos:end="123:45">dc</name><operator pos:start="123:46" pos:end="123:47">-&gt;</operator><name pos:start="123:48" pos:end="123:54">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="125:21" pos:end="125:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="133:9" pos:end="153:9"><if pos:start="133:9" pos:end="153:9">if <condition pos:start="133:12" pos:end="133:22">(<expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:21">search_pc</name></expr>)</condition> <block pos:start="133:24" pos:end="153:9">{<block_content pos:start="135:13" pos:end="151:40">

            <expr_stmt pos:start="135:13" pos:end="135:42"><expr pos:start="135:13" pos:end="135:41"><name pos:start="135:13" pos:end="135:13">j</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:27">gen_opc_ptr</name> <operator pos:start="135:29" pos:end="135:29">-</operator> <name pos:start="135:31" pos:end="135:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:23">(<expr pos:start="137:17" pos:end="137:22"><name pos:start="137:17" pos:end="137:18">lj</name> <operator pos:start="137:20" pos:end="137:20">&lt;</operator> <name pos:start="137:22" pos:end="137:22">j</name></expr>)</condition> <block pos:start="137:25" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:50">

                <expr_stmt pos:start="139:17" pos:end="139:21"><expr pos:start="139:17" pos:end="139:20"><name pos:start="139:17" pos:end="139:18">lj</name><operator pos:start="139:19" pos:end="139:20">++</operator></expr>;</expr_stmt>

                <while pos:start="141:17" pos:end="143:50">while <condition pos:start="141:23" pos:end="141:30">(<expr pos:start="141:24" pos:end="141:29"><name pos:start="141:24" pos:end="141:25">lj</name> <operator pos:start="141:27" pos:end="141:27">&lt;</operator> <name pos:start="141:29" pos:end="141:29">j</name></expr>)</condition><block type="pseudo" pos:start="143:21" pos:end="143:50"><block_content pos:start="143:21" pos:end="143:50">

                    <expr_stmt pos:start="143:21" pos:end="143:50"><expr pos:start="143:21" pos:end="143:49"><name pos:start="143:21" pos:end="143:45"><name pos:start="143:21" pos:end="143:39">gen_opc_instr_start</name><index pos:start="143:40" pos:end="143:45">[<expr pos:start="143:41" pos:end="143:44"><name pos:start="143:41" pos:end="143:42">lj</name><operator pos:start="143:43" pos:end="143:44">++</operator></expr>]</index></name> <operator pos:start="143:47" pos:end="143:47">=</operator> <literal type="number" pos:start="143:49" pos:end="143:49">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:46"><expr pos:start="147:13" pos:end="147:45"><name pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:22">gen_opc_pc</name><index pos:start="147:23" pos:end="147:26">[<expr pos:start="147:24" pos:end="147:25"><name pos:start="147:24" pos:end="147:25">lj</name></expr>]</index></name> <operator pos:start="147:28" pos:end="147:28">=</operator> <operator pos:start="147:30" pos:end="147:30">(</operator><name pos:start="147:31" pos:end="147:38">uint32_t</name><operator pos:start="147:39" pos:end="147:39">)</operator><name pos:start="147:40" pos:end="147:45">pc_ptr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:42"><expr pos:start="149:13" pos:end="149:41"><name pos:start="149:13" pos:end="149:29"><name pos:start="149:13" pos:end="149:25">gen_opc_cc_op</name><index pos:start="149:26" pos:end="149:29">[<expr pos:start="149:27" pos:end="149:28"><name pos:start="149:27" pos:end="149:28">lj</name></expr>]</index></name> <operator pos:start="149:31" pos:end="149:31">=</operator> <name pos:start="149:33" pos:end="149:41"><name pos:start="149:33" pos:end="149:34">dc</name><operator pos:start="149:35" pos:end="149:36">-&gt;</operator><name pos:start="149:37" pos:end="149:41">cc_op</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:40"><expr pos:start="151:13" pos:end="151:39"><name pos:start="151:13" pos:end="151:35"><name pos:start="151:13" pos:end="151:31">gen_opc_instr_start</name><index pos:start="151:32" pos:end="151:35">[<expr pos:start="151:33" pos:end="151:34"><name pos:start="151:33" pos:end="151:34">lj</name></expr>]</index></name> <operator pos:start="151:37" pos:end="151:37">=</operator> <literal type="number" pos:start="151:39" pos:end="151:39">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:40"><expr pos:start="155:9" pos:end="155:39"><name pos:start="155:9" pos:end="155:14">pc_ptr</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <call pos:start="155:18" pos:end="155:39"><name pos:start="155:18" pos:end="155:27">disas_insn</name><argument_list pos:start="155:28" pos:end="155:39">(<argument pos:start="155:29" pos:end="155:30"><expr pos:start="155:29" pos:end="155:30"><name pos:start="155:29" pos:end="155:30">dc</name></expr></argument>, <argument pos:start="155:33" pos:end="155:38"><expr pos:start="155:33" pos:end="155:38"><name pos:start="155:33" pos:end="155:38">pc_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="157:9" pos:end="157:43">/* stop translation if indicated */</comment>

        <if_stmt pos:start="159:9" pos:end="161:18"><if pos:start="159:9" pos:end="161:18">if <condition pos:start="159:12" pos:end="159:23">(<expr pos:start="159:13" pos:end="159:22"><name pos:start="159:13" pos:end="159:22"><name pos:start="159:13" pos:end="159:14">dc</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:22">is_jmp</name></name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:18"><block_content pos:start="161:13" pos:end="161:18">

            <break pos:start="161:13" pos:end="161:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="163:9" pos:end="165:35">/* if single step mode, we generate only one instruction and

           generate an exception */</comment>

        <if_stmt pos:start="167:9" pos:end="175:9"><if pos:start="167:9" pos:end="175:9">if <condition pos:start="167:12" pos:end="167:45">(<expr pos:start="167:13" pos:end="167:44"><name pos:start="167:13" pos:end="167:18"><name pos:start="167:13" pos:end="167:14">dc</name><operator pos:start="167:15" pos:end="167:16">-&gt;</operator><name pos:start="167:17" pos:end="167:18">tf</name></name> <operator pos:start="167:20" pos:end="167:21">||</operator> <name pos:start="167:23" pos:end="167:44"><name pos:start="167:23" pos:end="167:24">dc</name><operator pos:start="167:25" pos:end="167:26">-&gt;</operator><name pos:start="167:27" pos:end="167:44">singlestep_enabled</name></name></expr>)</condition> <block pos:start="167:47" pos:end="175:9">{<block_content pos:start="169:13" pos:end="173:18">

            <expr_stmt pos:start="169:13" pos:end="169:48"><expr pos:start="169:13" pos:end="169:47"><call pos:start="169:13" pos:end="169:47"><name pos:start="169:13" pos:end="169:25">gen_op_jmp_im</name><argument_list pos:start="169:26" pos:end="169:47">(<argument pos:start="169:27" pos:end="169:46"><expr pos:start="169:27" pos:end="169:46"><name pos:start="169:27" pos:end="169:32">pc_ptr</name> <operator pos:start="169:34" pos:end="169:34">-</operator> <name pos:start="169:36" pos:end="169:46"><name pos:start="169:36" pos:end="169:37">dc</name><operator pos:start="169:38" pos:end="169:39">-&gt;</operator><name pos:start="169:40" pos:end="169:46">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:24"><expr pos:start="171:13" pos:end="171:23"><call pos:start="171:13" pos:end="171:23"><name pos:start="171:13" pos:end="171:19">gen_eob</name><argument_list pos:start="171:20" pos:end="171:23">(<argument pos:start="171:21" pos:end="171:22"><expr pos:start="171:21" pos:end="171:22"><name pos:start="171:21" pos:end="171:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="177:9" pos:end="177:58">/* if too long translation, stop generation too */</comment>

        <if_stmt pos:start="179:9" pos:end="189:9"><if pos:start="179:9" pos:end="189:9">if <condition pos:start="179:12" pos:end="181:59">(<expr pos:start="179:13" pos:end="181:58"><name pos:start="179:13" pos:end="179:23">gen_opc_ptr</name> <operator pos:start="179:25" pos:end="179:26">&gt;=</operator> <name pos:start="179:28" pos:end="179:38">gen_opc_end</name> <operator pos:start="179:40" pos:end="179:41">||</operator>

            <operator pos:start="181:13" pos:end="181:13">(</operator><name pos:start="181:14" pos:end="181:19">pc_ptr</name> <operator pos:start="181:21" pos:end="181:21">-</operator> <name pos:start="181:23" pos:end="181:30">pc_start</name><operator pos:start="181:31" pos:end="181:31">)</operator> <operator pos:start="181:33" pos:end="181:34">&gt;=</operator> <operator pos:start="181:36" pos:end="181:36">(</operator><name pos:start="181:37" pos:end="181:52">TARGET_PAGE_SIZE</name> <operator pos:start="181:54" pos:end="181:54">-</operator> <literal type="number" pos:start="181:56" pos:end="181:57">32</literal><operator pos:start="181:58" pos:end="181:58">)</operator></expr>)</condition> <block pos:start="181:61" pos:end="189:9">{<block_content pos:start="183:13" pos:end="187:18">

            <expr_stmt pos:start="183:13" pos:end="183:48"><expr pos:start="183:13" pos:end="183:47"><call pos:start="183:13" pos:end="183:47"><name pos:start="183:13" pos:end="183:25">gen_op_jmp_im</name><argument_list pos:start="183:26" pos:end="183:47">(<argument pos:start="183:27" pos:end="183:46"><expr pos:start="183:27" pos:end="183:46"><name pos:start="183:27" pos:end="183:32">pc_ptr</name> <operator pos:start="183:34" pos:end="183:34">-</operator> <name pos:start="183:36" pos:end="183:46"><name pos:start="183:36" pos:end="183:37">dc</name><operator pos:start="183:38" pos:end="183:39">-&gt;</operator><name pos:start="183:40" pos:end="183:46">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:24"><expr pos:start="185:13" pos:end="185:23"><call pos:start="185:13" pos:end="185:23"><name pos:start="185:13" pos:end="185:19">gen_eob</name><argument_list pos:start="185:20" pos:end="185:23">(<argument pos:start="185:21" pos:end="185:22"><expr pos:start="185:21" pos:end="185:22"><name pos:start="185:21" pos:end="185:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="193:5" pos:end="193:32"><expr pos:start="193:5" pos:end="193:31"><operator pos:start="193:5" pos:end="193:5">*</operator><name pos:start="193:6" pos:end="193:16">gen_opc_ptr</name> <operator pos:start="193:18" pos:end="193:18">=</operator> <name pos:start="193:20" pos:end="193:31">INDEX_op_end</name></expr>;</expr_stmt>

    <comment type="block" pos:start="195:5" pos:end="195:49">/* we don't forget to fill the last values */</comment>

    <if_stmt pos:start="197:5" pos:end="212:0"><if pos:start="197:5" pos:end="212:0">if <condition pos:start="197:8" pos:end="197:18">(<expr pos:start="197:9" pos:end="197:17"><name pos:start="197:9" pos:end="197:17">search_pc</name></expr>)</condition> <block pos:start="197:20" pos:end="212:0">{<block_content pos:start="199:9" pos:end="205:42">

        <expr_stmt pos:start="199:9" pos:end="199:38"><expr pos:start="199:9" pos:end="199:37"><name pos:start="199:9" pos:end="199:9">j</name> <operator pos:start="199:11" pos:end="199:11">=</operator> <name pos:start="199:13" pos:end="199:23">gen_opc_ptr</name> <operator pos:start="199:25" pos:end="199:25">-</operator> <name pos:start="199:27" pos:end="199:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:13"><expr pos:start="201:9" pos:end="201:12"><name pos:start="201:9" pos:end="201:10">lj</name><operator pos:start="201:11" pos:end="201:12">++</operator></expr>;</expr_stmt>

        <while pos:start="203:9" pos:end="205:42">while <condition pos:start="203:15" pos:end="203:23">(<expr pos:start="203:16" pos:end="203:22"><name pos:start="203:16" pos:end="203:17">lj</name> <operator pos:start="203:19" pos:end="203:20">&lt;=</operator> <name pos:start="203:22" pos:end="203:22">j</name></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:42"><block_content pos:start="205:13" pos:end="205:42">

            <expr_stmt pos:start="205:13" pos:end="205:42"><expr pos:start="205:13" pos:end="205:41"><name pos:start="205:13" pos:end="205:37"><name pos:start="205:13" pos:end="205:31">gen_opc_instr_start</name><index pos:start="205:32" pos:end="205:37">[<expr pos:start="205:33" pos:end="205:36"><name pos:start="205:33" pos:end="205:34">lj</name><operator pos:start="205:35" pos:end="205:36">++</operator></expr>]</index></name> <operator pos:start="205:39" pos:end="205:39">=</operator> <literal type="number" pos:start="205:41" pos:end="205:41">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if></if_stmt>

        

<cpp:ifdef pos:start="211:1" pos:end="211:18">#<cpp:directive pos:start="211:2" pos:end="211:6">ifdef</cpp:directive> <name pos:start="211:8" pos:end="211:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="213:5" pos:end="234:0"><if pos:start="213:5" pos:end="234:0">if <condition pos:start="213:8" pos:end="213:17">(<expr pos:start="213:9" pos:end="213:16"><name pos:start="213:9" pos:end="213:16">loglevel</name></expr>)</condition> <block pos:start="213:19" pos:end="234:0">{<block_content pos:start="215:9" pos:end="229:31">

        <expr_stmt pos:start="215:9" pos:end="215:47"><expr pos:start="215:9" pos:end="215:46"><call pos:start="215:9" pos:end="215:46"><name pos:start="215:9" pos:end="215:15">fprintf</name><argument_list pos:start="215:16" pos:end="215:46">(<argument pos:start="215:17" pos:end="215:23"><expr pos:start="215:17" pos:end="215:23"><name pos:start="215:17" pos:end="215:23">logfile</name></expr></argument>, <argument pos:start="215:26" pos:end="215:45"><expr pos:start="215:26" pos:end="215:45"><literal type="string" pos:start="215:26" pos:end="215:45">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:62"><expr pos:start="217:9" pos:end="217:61"><call pos:start="217:9" pos:end="217:61"><name pos:start="217:9" pos:end="217:15">fprintf</name><argument_list pos:start="217:16" pos:end="217:61">(<argument pos:start="217:17" pos:end="217:23"><expr pos:start="217:17" pos:end="217:23"><name pos:start="217:17" pos:end="217:23">logfile</name></expr></argument>, <argument pos:start="217:26" pos:end="217:35"><expr pos:start="217:26" pos:end="217:35"><literal type="string" pos:start="217:26" pos:end="217:35">"IN: %s\n"</literal></expr></argument>, <argument pos:start="217:38" pos:end="217:60"><expr pos:start="217:38" pos:end="217:60"><call pos:start="217:38" pos:end="217:60"><name pos:start="217:38" pos:end="217:50">lookup_symbol</name><argument_list pos:start="217:51" pos:end="217:60">(<argument pos:start="217:52" pos:end="217:59"><expr pos:start="217:52" pos:end="217:59"><name pos:start="217:52" pos:end="217:59">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="219:9" pos:end="219:68"><expr pos:start="219:9" pos:end="219:67"><call pos:start="219:9" pos:end="219:67"><name pos:start="219:9" pos:end="219:13">disas</name><argument_list pos:start="219:14" pos:end="219:67">(<argument pos:start="219:15" pos:end="219:21"><expr pos:start="219:15" pos:end="219:21"><name pos:start="219:15" pos:end="219:21">logfile</name></expr></argument>, <argument pos:start="219:24" pos:end="219:31"><expr pos:start="219:24" pos:end="219:31"><name pos:start="219:24" pos:end="219:31">pc_start</name></expr></argument>, <argument pos:start="219:34" pos:end="219:50"><expr pos:start="219:34" pos:end="219:50"><name pos:start="219:34" pos:end="219:39">pc_ptr</name> <operator pos:start="219:41" pos:end="219:41">-</operator> <name pos:start="219:43" pos:end="219:50">pc_start</name></expr></argument>, <argument pos:start="219:53" pos:end="219:53"><expr pos:start="219:53" pos:end="219:53"><literal type="number" pos:start="219:53" pos:end="219:53">0</literal></expr></argument>, <argument pos:start="219:56" pos:end="219:66"><expr pos:start="219:56" pos:end="219:66"><operator pos:start="219:56" pos:end="219:56">!</operator><name pos:start="219:57" pos:end="219:66"><name pos:start="219:57" pos:end="219:58">dc</name><operator pos:start="219:59" pos:end="219:60">-&gt;</operator><name pos:start="219:61" pos:end="219:66">code32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:31"><expr pos:start="221:9" pos:end="221:30"><call pos:start="221:9" pos:end="221:30"><name pos:start="221:9" pos:end="221:15">fprintf</name><argument_list pos:start="221:16" pos:end="221:30">(<argument pos:start="221:17" pos:end="221:23"><expr pos:start="221:17" pos:end="221:23"><name pos:start="221:17" pos:end="221:23">logfile</name></expr></argument>, <argument pos:start="221:26" pos:end="221:29"><expr pos:start="221:26" pos:end="221:29"><literal type="string" pos:start="221:26" pos:end="221:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="225:9" pos:end="225:34"><expr pos:start="225:9" pos:end="225:33"><call pos:start="225:9" pos:end="225:33"><name pos:start="225:9" pos:end="225:15">fprintf</name><argument_list pos:start="225:16" pos:end="225:33">(<argument pos:start="225:17" pos:end="225:23"><expr pos:start="225:17" pos:end="225:23"><name pos:start="225:17" pos:end="225:23">logfile</name></expr></argument>, <argument pos:start="225:26" pos:end="225:32"><expr pos:start="225:26" pos:end="225:32"><literal type="string" pos:start="225:26" pos:end="225:32">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:47"><expr pos:start="227:9" pos:end="227:46"><call pos:start="227:9" pos:end="227:46"><name pos:start="227:9" pos:end="227:16">dump_ops</name><argument_list pos:start="227:17" pos:end="227:46">(<argument pos:start="227:18" pos:end="227:28"><expr pos:start="227:18" pos:end="227:28"><name pos:start="227:18" pos:end="227:28">gen_opc_buf</name></expr></argument>, <argument pos:start="227:31" pos:end="227:45"><expr pos:start="227:31" pos:end="227:45"><name pos:start="227:31" pos:end="227:45">gen_opparam_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:31"><expr pos:start="229:9" pos:end="229:30"><call pos:start="229:9" pos:end="229:30"><name pos:start="229:9" pos:end="229:15">fprintf</name><argument_list pos:start="229:16" pos:end="229:30">(<argument pos:start="229:17" pos:end="229:23"><expr pos:start="229:17" pos:end="229:23"><name pos:start="229:17" pos:end="229:23">logfile</name></expr></argument>, <argument pos:start="229:26" pos:end="229:29"><expr pos:start="229:26" pos:end="229:29"><literal type="string" pos:start="229:26" pos:end="229:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="237:5" pos:end="237:36">/* optimize flag computations */</comment>

    <expr_stmt pos:start="239:5" pos:end="244:0"><expr pos:start="239:5" pos:end="239:58"><call pos:start="239:5" pos:end="239:58"><name pos:start="239:5" pos:end="239:18">optimize_flags</name><argument_list pos:start="239:19" pos:end="239:58">(<argument pos:start="239:20" pos:end="239:30"><expr pos:start="239:20" pos:end="239:30"><name pos:start="239:20" pos:end="239:30">gen_opc_buf</name></expr></argument>, <argument pos:start="239:33" pos:end="239:57"><expr pos:start="239:33" pos:end="239:57"><name pos:start="239:33" pos:end="239:43">gen_opc_ptr</name> <operator pos:start="239:45" pos:end="239:45">-</operator> <name pos:start="239:47" pos:end="239:57">gen_opc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="243:1" pos:end="243:18">#<cpp:directive pos:start="243:2" pos:end="243:6">ifdef</cpp:directive> <name pos:start="243:8" pos:end="243:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="245:5" pos:end="256:0"><if pos:start="245:5" pos:end="256:0">if <condition pos:start="245:8" pos:end="245:17">(<expr pos:start="245:9" pos:end="245:16"><name pos:start="245:9" pos:end="245:16">loglevel</name></expr>)</condition> <block pos:start="245:19" pos:end="256:0">{<block_content pos:start="247:9" pos:end="251:31">

        <expr_stmt pos:start="247:9" pos:end="247:47"><expr pos:start="247:9" pos:end="247:46"><call pos:start="247:9" pos:end="247:46"><name pos:start="247:9" pos:end="247:15">fprintf</name><argument_list pos:start="247:16" pos:end="247:46">(<argument pos:start="247:17" pos:end="247:23"><expr pos:start="247:17" pos:end="247:23"><name pos:start="247:17" pos:end="247:23">logfile</name></expr></argument>, <argument pos:start="247:26" pos:end="247:45"><expr pos:start="247:26" pos:end="247:45"><literal type="string" pos:start="247:26" pos:end="247:45">"AFTER FLAGS OPT:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:47"><expr pos:start="249:9" pos:end="249:46"><call pos:start="249:9" pos:end="249:46"><name pos:start="249:9" pos:end="249:16">dump_ops</name><argument_list pos:start="249:17" pos:end="249:46">(<argument pos:start="249:18" pos:end="249:28"><expr pos:start="249:18" pos:end="249:28"><name pos:start="249:18" pos:end="249:28">gen_opc_buf</name></expr></argument>, <argument pos:start="249:31" pos:end="249:45"><expr pos:start="249:31" pos:end="249:45"><name pos:start="249:31" pos:end="249:45">gen_opparam_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:31"><expr pos:start="251:9" pos:end="251:30"><call pos:start="251:9" pos:end="251:30"><name pos:start="251:9" pos:end="251:15">fprintf</name><argument_list pos:start="251:16" pos:end="251:30">(<argument pos:start="251:17" pos:end="251:23"><expr pos:start="251:17" pos:end="251:23"><name pos:start="251:17" pos:end="251:23">logfile</name></expr></argument>, <argument pos:start="251:26" pos:end="251:29"><expr pos:start="251:26" pos:end="251:29"><literal type="string" pos:start="251:26" pos:end="251:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="255:1" pos:end="255:6">#<cpp:directive pos:start="255:2" pos:end="255:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="257:5" pos:end="259:37"><if pos:start="257:5" pos:end="259:37">if <condition pos:start="257:8" pos:end="257:19">(<expr pos:start="257:9" pos:end="257:18"><operator pos:start="257:9" pos:end="257:9">!</operator><name pos:start="257:10" pos:end="257:18">search_pc</name></expr>)</condition><block type="pseudo" pos:start="259:9" pos:end="259:37"><block_content pos:start="259:9" pos:end="259:37">

        <expr_stmt pos:start="259:9" pos:end="259:37"><expr pos:start="259:9" pos:end="259:36"><name pos:start="259:9" pos:end="259:16"><name pos:start="259:9" pos:end="259:10">tb</name><operator pos:start="259:11" pos:end="259:12">-&gt;</operator><name pos:start="259:13" pos:end="259:16">size</name></name> <operator pos:start="259:18" pos:end="259:18">=</operator> <name pos:start="259:20" pos:end="259:25">pc_ptr</name> <operator pos:start="259:27" pos:end="259:27">-</operator> <name pos:start="259:29" pos:end="259:36">pc_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="261:5" pos:end="261:13">return <expr pos:start="261:12" pos:end="261:12"><literal type="number" pos:start="261:12" pos:end="261:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
