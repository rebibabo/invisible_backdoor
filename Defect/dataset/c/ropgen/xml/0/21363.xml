<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21363.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">ssize_t</name></type> <name pos:start="1:9" pos:end="1:20">nbd_wr_syncv</name><parameter_list pos:start="1:21" pos:end="11:34">(<parameter pos:start="1:22" pos:end="1:36"><decl pos:start="1:22" pos:end="1:36"><type pos:start="1:22" pos:end="1:36"><name pos:start="1:22" pos:end="1:31">QIOChannel</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">ioc</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:38"><decl pos:start="3:22" pos:end="3:38"><type pos:start="3:22" pos:end="3:38"><name pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:27">struct</name> <name pos:start="3:29" pos:end="3:33">iovec</name></name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:38">iov</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:32"><decl pos:start="5:22" pos:end="5:32"><type pos:start="5:22" pos:end="5:32"><name pos:start="5:22" pos:end="5:27">size_t</name></type> <name pos:start="5:29" pos:end="5:32">niov</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:34"><decl pos:start="7:22" pos:end="7:34"><type pos:start="7:22" pos:end="7:34"><name pos:start="7:22" pos:end="7:27">size_t</name></type> <name pos:start="7:29" pos:end="7:34">length</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:33"><decl pos:start="9:22" pos:end="9:33"><type pos:start="9:22" pos:end="9:33"><name pos:start="9:22" pos:end="9:25">bool</name></type> <name pos:start="9:27" pos:end="9:33">do_read</name></decl></parameter>,

                     <parameter pos:start="11:22" pos:end="11:33"><decl pos:start="11:22" pos:end="11:33"><type pos:start="11:22" pos:end="11:33"><name pos:start="11:22" pos:end="11:26">Error</name> <modifier pos:start="11:28" pos:end="11:28">*</modifier><modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="87:1">{<block_content pos:start="15:5" pos:end="85:16">

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">ssize_t</name></type> <name pos:start="15:13" pos:end="15:16">done</name> <init pos:start="15:18" pos:end="15:20">= <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:55"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:16">iovec</name></name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:27">local_iov</name> <init pos:start="17:29" pos:end="17:55">= <expr pos:start="17:31" pos:end="17:55"><call pos:start="17:31" pos:end="17:55"><name pos:start="17:31" pos:end="17:35">g_new</name><argument_list pos:start="17:36" pos:end="17:55">(<argument pos:start="17:37" pos:end="17:48"><expr pos:start="17:37" pos:end="17:48">struct <name pos:start="17:44" pos:end="17:48">iovec</name></expr></argument>, <argument pos:start="17:51" pos:end="17:54"><expr pos:start="17:51" pos:end="17:54"><name pos:start="17:51" pos:end="17:54">niov</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:45"><decl pos:start="19:5" pos:end="19:44"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:16">iovec</name></name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:32">local_iov_head</name> <init pos:start="19:34" pos:end="19:44">= <expr pos:start="19:36" pos:end="19:44"><name pos:start="19:36" pos:end="19:44">local_iov</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:27">nlocal_iov</name> <init pos:start="21:29" pos:end="21:34">= <expr pos:start="21:31" pos:end="21:34"><name pos:start="21:31" pos:end="21:34">niov</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:71"><expr pos:start="25:5" pos:end="25:70"><name pos:start="25:5" pos:end="25:14">nlocal_iov</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:70"><name pos:start="25:18" pos:end="25:25">iov_copy</name><argument_list pos:start="25:26" pos:end="25:70">(<argument pos:start="25:27" pos:end="25:35"><expr pos:start="25:27" pos:end="25:35"><name pos:start="25:27" pos:end="25:35">local_iov</name></expr></argument>, <argument pos:start="25:38" pos:end="25:47"><expr pos:start="25:38" pos:end="25:47"><name pos:start="25:38" pos:end="25:47">nlocal_iov</name></expr></argument>, <argument pos:start="25:50" pos:end="25:52"><expr pos:start="25:50" pos:end="25:52"><name pos:start="25:50" pos:end="25:52">iov</name></expr></argument>, <argument pos:start="25:55" pos:end="25:58"><expr pos:start="25:55" pos:end="25:58"><name pos:start="25:55" pos:end="25:58">niov</name></expr></argument>, <argument pos:start="25:61" pos:end="25:61"><expr pos:start="25:61" pos:end="25:61"><literal type="number" pos:start="25:61" pos:end="25:61">0</literal></expr></argument>, <argument pos:start="25:64" pos:end="25:69"><expr pos:start="25:64" pos:end="25:69"><name pos:start="25:64" pos:end="25:69">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="29:5" pos:end="77:5">while <condition pos:start="29:11" pos:end="29:26">(<expr pos:start="29:12" pos:end="29:25"><name pos:start="29:12" pos:end="29:21">nlocal_iov</name> <operator pos:start="29:23" pos:end="29:23">&gt;</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>)</condition> <block pos:start="29:28" pos:end="77:5">{<block_content pos:start="31:9" pos:end="75:20">

        <decl_stmt pos:start="31:9" pos:end="31:20"><decl pos:start="31:9" pos:end="31:19"><type pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:15">ssize_t</name></type> <name pos:start="31:17" pos:end="31:19">len</name></decl>;</decl_stmt>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:19">do_read</name></expr>)</condition> <block pos:start="33:22" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:70">

            <expr_stmt pos:start="35:13" pos:end="35:70"><expr pos:start="35:13" pos:end="35:69"><name pos:start="35:13" pos:end="35:15">len</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:69"><name pos:start="35:19" pos:end="35:35">qio_channel_readv</name><argument_list pos:start="35:36" pos:end="35:69">(<argument pos:start="35:37" pos:end="35:39"><expr pos:start="35:37" pos:end="35:39"><name pos:start="35:37" pos:end="35:39">ioc</name></expr></argument>, <argument pos:start="35:42" pos:end="35:50"><expr pos:start="35:42" pos:end="35:50"><name pos:start="35:42" pos:end="35:50">local_iov</name></expr></argument>, <argument pos:start="35:53" pos:end="35:62"><expr pos:start="35:53" pos:end="35:62"><name pos:start="35:53" pos:end="35:62">nlocal_iov</name></expr></argument>, <argument pos:start="35:65" pos:end="35:68"><expr pos:start="35:65" pos:end="35:68"><name pos:start="35:65" pos:end="35:68">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="41:9">else <block pos:start="37:16" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:71">

            <expr_stmt pos:start="39:13" pos:end="39:71"><expr pos:start="39:13" pos:end="39:70"><name pos:start="39:13" pos:end="39:15">len</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:70"><name pos:start="39:19" pos:end="39:36">qio_channel_writev</name><argument_list pos:start="39:37" pos:end="39:70">(<argument pos:start="39:38" pos:end="39:40"><expr pos:start="39:38" pos:end="39:40"><name pos:start="39:38" pos:end="39:40">ioc</name></expr></argument>, <argument pos:start="39:43" pos:end="39:51"><expr pos:start="39:43" pos:end="39:51"><name pos:start="39:43" pos:end="39:51">local_iov</name></expr></argument>, <argument pos:start="39:54" pos:end="39:63"><expr pos:start="39:54" pos:end="39:63"><name pos:start="39:54" pos:end="39:63">nlocal_iov</name></expr></argument>, <argument pos:start="39:66" pos:end="39:69"><expr pos:start="39:66" pos:end="39:69"><name pos:start="39:66" pos:end="39:69">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:41">(<expr pos:start="43:13" pos:end="43:40"><name pos:start="43:13" pos:end="43:15">len</name> <operator pos:start="43:17" pos:end="43:18">==</operator> <name pos:start="43:20" pos:end="43:40">QIO_CHANNEL_ERR_BLOCK</name></expr>)</condition> <block pos:start="43:43" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:21">

            <comment type="block" pos:start="45:13" pos:end="45:40">/* errp should not be set */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:40"><expr pos:start="47:13" pos:end="47:39"><call pos:start="47:13" pos:end="47:39"><name pos:start="47:13" pos:end="47:18">assert</name><argument_list pos:start="47:19" pos:end="47:39">(<argument pos:start="47:20" pos:end="47:38"><expr pos:start="47:20" pos:end="47:38"><call pos:start="47:20" pos:end="47:38"><name pos:start="47:20" pos:end="47:36">qemu_in_coroutine</name><argument_list pos:start="47:37" pos:end="47:38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:65"><expr pos:start="49:13" pos:end="49:64"><call pos:start="49:13" pos:end="49:64"><name pos:start="49:13" pos:end="49:29">qio_channel_yield</name><argument_list pos:start="49:30" pos:end="49:64">(<argument pos:start="49:31" pos:end="49:33"><expr pos:start="49:31" pos:end="49:33"><name pos:start="49:31" pos:end="49:33">ioc</name></expr></argument>, <argument pos:start="49:36" pos:end="49:63"><expr pos:start="49:36" pos:end="49:63"><ternary pos:start="49:36" pos:end="49:63"><condition pos:start="49:36" pos:end="49:44"><expr pos:start="49:36" pos:end="49:42"><name pos:start="49:36" pos:end="49:42">do_read</name></expr> ?</condition><then pos:start="49:46" pos:end="49:52"> <expr pos:start="49:46" pos:end="49:52"><name pos:start="49:46" pos:end="49:52">G_IO_IN</name></expr> </then><else pos:start="49:54" pos:end="49:63">: <expr pos:start="49:56" pos:end="49:63"><name pos:start="49:56" pos:end="49:63">G_IO_OUT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">len</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:25">

            <expr_stmt pos:start="57:13" pos:end="57:24"><expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:16">done</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <operator pos:start="57:20" pos:end="57:20">-</operator><name pos:start="57:21" pos:end="57:23">EIO</name></expr>;</expr_stmt>

            <goto pos:start="59:13" pos:end="59:25">goto <name pos:start="59:18" pos:end="59:24">cleanup</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:32">(<expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:19">do_read</name> <operator pos:start="65:21" pos:end="65:22">&amp;&amp;</operator> <name pos:start="65:24" pos:end="65:26">len</name> <operator pos:start="65:28" pos:end="65:29">==</operator> <literal type="number" pos:start="65:31" pos:end="65:31">0</literal></expr>)</condition> <block pos:start="65:34" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:18">

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:56"><expr pos:start="73:9" pos:end="73:55"><call pos:start="73:9" pos:end="73:55"><name pos:start="73:9" pos:end="73:25">iov_discard_front</name><argument_list pos:start="73:26" pos:end="73:55">(<argument pos:start="73:27" pos:end="73:36"><expr pos:start="73:27" pos:end="73:36"><operator pos:start="73:27" pos:end="73:27">&amp;</operator><name pos:start="73:28" pos:end="73:36">local_iov</name></expr></argument>, <argument pos:start="73:39" pos:end="73:49"><expr pos:start="73:39" pos:end="73:49"><operator pos:start="73:39" pos:end="73:39">&amp;</operator><name pos:start="73:40" pos:end="73:49">nlocal_iov</name></expr></argument>, <argument pos:start="73:52" pos:end="73:54"><expr pos:start="73:52" pos:end="73:54"><name pos:start="73:52" pos:end="73:54">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:20"><expr pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:12">done</name> <operator pos:start="75:14" pos:end="75:15">+=</operator> <name pos:start="75:17" pos:end="75:19">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>



 <label pos:start="81:2" pos:end="81:9"><name pos:start="81:2" pos:end="81:8">cleanup</name>:</label>

    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><call pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:10">g_free</name><argument_list pos:start="83:11" pos:end="83:26">(<argument pos:start="83:12" pos:end="83:25"><expr pos:start="83:12" pos:end="83:25"><name pos:start="83:12" pos:end="83:25">local_iov_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:16">return <expr pos:start="85:12" pos:end="85:15"><name pos:start="85:12" pos:end="85:15">done</name></expr>;</return>

</block_content>}</block></function>
</unit>
