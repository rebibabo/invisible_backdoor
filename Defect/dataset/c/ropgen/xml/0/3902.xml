<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3902.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">qcelp_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:46">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:79"><decl pos:start="1:66" pos:end="1:79"><type pos:start="1:66" pos:end="1:79"><name pos:start="1:66" pos:end="1:68">int</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:79">data_size</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:45"><decl pos:start="3:31" pos:end="3:45"><type pos:start="3:31" pos:end="3:45"><name pos:start="3:31" pos:end="3:38">AVPacket</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:45">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="219:1">{<block_content pos:start="7:5" pos:end="217:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">QCELPContext</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:19">q</name> <init pos:start="11:21" pos:end="11:38">= <expr pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:27">avctx</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">float</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">outbuffer</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type>   <name pos:start="15:11" pos:end="15:11">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:9">float</name></type> <name pos:start="17:11" pos:end="17:28"><name pos:start="17:11" pos:end="17:24">quantized_lspf</name><index pos:start="17:25" pos:end="17:28">[<expr pos:start="17:26" pos:end="17:27"><literal type="number" pos:start="17:26" pos:end="17:27">10</literal></expr>]</index></name></decl>, <decl pos:start="17:31" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:9"/><name pos:start="17:31" pos:end="17:37"><name pos:start="17:31" pos:end="17:33">lpc</name><index pos:start="17:34" pos:end="17:37">[<expr pos:start="17:35" pos:end="17:36"><literal type="number" pos:start="17:35" pos:end="17:36">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">float</name></type> <name pos:start="19:11" pos:end="19:18"><name pos:start="19:11" pos:end="19:14">gain</name><index pos:start="19:15" pos:end="19:18">[<expr pos:start="19:16" pos:end="19:17"><literal type="number" pos:start="19:16" pos:end="19:17">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">float</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:22">formant_mem</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if<condition pos:start="25:7" pos:end="25:72">(<expr pos:start="25:8" pos:end="25:71"><operator pos:start="25:8" pos:end="25:8">(</operator><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:9">q</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:18">bitrate</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:61"><name pos:start="25:22" pos:end="25:38">determine_bitrate</name><argument_list pos:start="25:39" pos:end="25:61">(<argument pos:start="25:40" pos:end="25:44"><expr pos:start="25:40" pos:end="25:44"><name pos:start="25:40" pos:end="25:44">avctx</name></expr></argument>, <argument pos:start="25:47" pos:end="25:54"><expr pos:start="25:47" pos:end="25:54"><name pos:start="25:47" pos:end="25:54">buf_size</name></expr></argument>, <argument pos:start="25:57" pos:end="25:60"><expr pos:start="25:57" pos:end="25:60"><operator pos:start="25:57" pos:end="25:57">&amp;</operator><name pos:start="25:58" pos:end="25:60">buf</name></expr></argument>)</argument_list></call><operator pos:start="25:62" pos:end="25:62">)</operator> <operator pos:start="25:64" pos:end="25:65">==</operator> <name pos:start="25:67" pos:end="25:71">I_F_Q</name></expr>)</condition>

    <block pos:start="27:5" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:21">

        <expr_stmt pos:start="29:9" pos:end="29:80"><expr pos:start="29:9" pos:end="29:79"><call pos:start="29:9" pos:end="29:79"><name pos:start="29:9" pos:end="29:39">warn_insufficient_frame_quality</name><argument_list pos:start="29:40" pos:end="29:79">(<argument pos:start="29:41" pos:end="29:45"><expr pos:start="29:41" pos:end="29:45"><name pos:start="29:41" pos:end="29:45">avctx</name></expr></argument>, <argument pos:start="29:48" pos:end="29:78"><expr pos:start="29:48" pos:end="29:78"><literal type="string" pos:start="29:48" pos:end="29:78">"bitrate cannot be determined."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:21">goto <name pos:start="31:14" pos:end="31:20">erasure</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="47:5">if<condition pos:start="37:7" pos:end="39:49">(<expr pos:start="37:8" pos:end="39:48"><name pos:start="37:8" pos:end="37:17"><name pos:start="37:8" pos:end="37:8">q</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:17">bitrate</name></name> <operator pos:start="37:19" pos:end="37:20">==</operator> <name pos:start="37:22" pos:end="37:32">RATE_OCTAVE</name> <operator pos:start="37:34" pos:end="37:35">&amp;&amp;</operator>

       <operator pos:start="39:8" pos:end="39:8">(</operator><name pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:9">q</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:22">first16bits</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <call pos:start="39:26" pos:end="39:37"><name pos:start="39:26" pos:end="39:32">AV_RB16</name><argument_list pos:start="39:33" pos:end="39:37">(<argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">buf</name></expr></argument>)</argument_list></call><operator pos:start="39:38" pos:end="39:38">)</operator> <operator pos:start="39:40" pos:end="39:41">==</operator> <literal type="number" pos:start="39:43" pos:end="39:48">0xFFFF</literal></expr>)</condition>

    <block pos:start="41:5" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:21">

        <expr_stmt pos:start="43:9" pos:end="43:91"><expr pos:start="43:9" pos:end="43:90"><call pos:start="43:9" pos:end="43:90"><name pos:start="43:9" pos:end="43:39">warn_insufficient_frame_quality</name><argument_list pos:start="43:40" pos:end="43:90">(<argument pos:start="43:41" pos:end="43:45"><expr pos:start="43:41" pos:end="43:45"><name pos:start="43:41" pos:end="43:45">avctx</name></expr></argument>, <argument pos:start="43:48" pos:end="43:89"><expr pos:start="43:48" pos:end="43:89"><literal type="string" pos:start="43:48" pos:end="43:89">"Bitrate is 1/8 and first 16 bits are on."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:21">goto <name pos:start="45:14" pos:end="45:20">erasure</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="127:5"><if pos:start="51:5" pos:end="127:5">if<condition pos:start="51:7" pos:end="51:28">(<expr pos:start="51:8" pos:end="51:27"><name pos:start="51:8" pos:end="51:17"><name pos:start="51:8" pos:end="51:8">q</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:17">bitrate</name></name> <operator pos:start="51:19" pos:end="51:19">&gt;</operator> <name pos:start="51:21" pos:end="51:27">SILENCE</name></expr>)</condition>

    <block pos:start="53:5" pos:end="127:5">{<block_content pos:start="55:9" pos:end="125:9">

        <decl_stmt pos:start="55:9" pos:end="55:86"><decl pos:start="55:9" pos:end="55:85"><type pos:start="55:9" pos:end="55:27"><specifier pos:start="55:9" pos:end="55:13">const</specifier> <name pos:start="55:15" pos:end="55:25">QCELPBitmap</name> <modifier pos:start="55:27" pos:end="55:27">*</modifier></type><name pos:start="55:28" pos:end="55:34">bitmaps</name>     <init pos:start="55:40" pos:end="55:85">= <expr pos:start="55:42" pos:end="55:85"><name pos:start="55:42" pos:end="55:85"><name pos:start="55:42" pos:end="55:73">qcelp_unpacking_bitmaps_per_rate</name><index pos:start="55:74" pos:end="55:85">[<expr pos:start="55:75" pos:end="55:84"><name pos:start="55:75" pos:end="55:84"><name pos:start="55:75" pos:end="55:75">q</name><operator pos:start="55:76" pos:end="55:77">-&gt;</operator><name pos:start="55:78" pos:end="55:84">bitrate</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="59:85"><decl pos:start="57:9" pos:end="59:84"><type pos:start="57:9" pos:end="57:27"><specifier pos:start="57:9" pos:end="57:13">const</specifier> <name pos:start="57:15" pos:end="57:25">QCELPBitmap</name> <modifier pos:start="57:27" pos:end="57:27">*</modifier></type><name pos:start="57:28" pos:end="57:38">bitmaps_end</name> <init pos:start="57:40" pos:end="59:84">= <expr pos:start="57:42" pos:end="59:84"><name pos:start="57:42" pos:end="57:85"><name pos:start="57:42" pos:end="57:73">qcelp_unpacking_bitmaps_per_rate</name><index pos:start="57:74" pos:end="57:85">[<expr pos:start="57:75" pos:end="57:84"><name pos:start="57:75" pos:end="57:84"><name pos:start="57:75" pos:end="57:75">q</name><operator pos:start="57:76" pos:end="57:77">-&gt;</operator><name pos:start="57:78" pos:end="57:84">bitrate</name></name></expr>]</index></name>

                                       <operator pos:start="59:40" pos:end="59:40">+</operator> <name pos:start="59:42" pos:end="59:84"><name pos:start="59:42" pos:end="59:72">qcelp_unpacking_bitmaps_lengths</name><index pos:start="59:73" pos:end="59:84">[<expr pos:start="59:74" pos:end="59:83"><name pos:start="59:74" pos:end="59:83"><name pos:start="59:74" pos:end="59:74">q</name><operator pos:start="59:75" pos:end="59:76">-&gt;</operator><name pos:start="59:77" pos:end="59:83">bitrate</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:64"><decl pos:start="61:9" pos:end="61:63"><type pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:15">uint8_t</name>           <modifier pos:start="61:27" pos:end="61:27">*</modifier></type><name pos:start="61:28" pos:end="61:40">unpacked_data</name> <init pos:start="61:42" pos:end="61:63">= <expr pos:start="61:44" pos:end="61:63"><operator pos:start="61:44" pos:end="61:44">(</operator><name pos:start="61:45" pos:end="61:51">uint8_t</name> <operator pos:start="61:53" pos:end="61:53">*</operator><operator pos:start="61:54" pos:end="61:54">)</operator><operator pos:start="61:55" pos:end="61:55">&amp;</operator><name pos:start="61:56" pos:end="61:63"><name pos:start="61:56" pos:end="61:56">q</name><operator pos:start="61:57" pos:end="61:58">-&gt;</operator><name pos:start="61:59" pos:end="61:63">frame</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:47"><expr pos:start="65:9" pos:end="65:46"><call pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:21">init_get_bits</name><argument_list pos:start="65:22" pos:end="65:46">(<argument pos:start="65:23" pos:end="65:28"><expr pos:start="65:23" pos:end="65:28"><operator pos:start="65:23" pos:end="65:23">&amp;</operator><name pos:start="65:24" pos:end="65:28"><name pos:start="65:24" pos:end="65:24">q</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:28">gb</name></name></expr></argument>, <argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:33">buf</name></expr></argument>, <argument pos:start="65:36" pos:end="65:45"><expr pos:start="65:36" pos:end="65:45"><literal type="number" pos:start="65:36" pos:end="65:36">8</literal><operator pos:start="65:37" pos:end="65:37">*</operator><name pos:start="65:38" pos:end="65:45">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:49"><expr pos:start="69:9" pos:end="69:48"><call pos:start="69:9" pos:end="69:48"><name pos:start="69:9" pos:end="69:14">memset</name><argument_list pos:start="69:15" pos:end="69:48">(<argument pos:start="69:16" pos:end="69:24"><expr pos:start="69:16" pos:end="69:24"><operator pos:start="69:16" pos:end="69:16">&amp;</operator><name pos:start="69:17" pos:end="69:24"><name pos:start="69:17" pos:end="69:17">q</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:24">frame</name></name></expr></argument>, <argument pos:start="69:27" pos:end="69:27"><expr pos:start="69:27" pos:end="69:27"><literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr></argument>, <argument pos:start="69:30" pos:end="69:47"><expr pos:start="69:30" pos:end="69:47"><sizeof pos:start="69:30" pos:end="69:47">sizeof<argument_list pos:start="69:36" pos:end="69:47">(<argument pos:start="69:37" pos:end="69:46"><expr pos:start="69:37" pos:end="69:46"><name pos:start="69:37" pos:end="69:46">QCELPFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="73:9" pos:end="75:98">for<control pos:start="73:12" pos:end="73:47">(<init pos:start="73:13" pos:end="73:13">;</init> <condition pos:start="73:15" pos:end="73:36"><expr pos:start="73:15" pos:end="73:35"><name pos:start="73:15" pos:end="73:21">bitmaps</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:35">bitmaps_end</name></expr>;</condition> <incr pos:start="73:38" pos:end="73:46"><expr pos:start="73:38" pos:end="73:46"><name pos:start="73:38" pos:end="73:44">bitmaps</name><operator pos:start="73:45" pos:end="73:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="75:13" pos:end="75:98"><block_content pos:start="75:13" pos:end="75:98">

            <expr_stmt pos:start="75:13" pos:end="75:98"><expr pos:start="75:13" pos:end="75:97"><name pos:start="75:13" pos:end="75:41"><name pos:start="75:13" pos:end="75:25">unpacked_data</name><index pos:start="75:26" pos:end="75:41">[<expr pos:start="75:27" pos:end="75:40"><name pos:start="75:27" pos:end="75:40"><name pos:start="75:27" pos:end="75:33">bitmaps</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:40">index</name></name></expr>]</index></name> <operator pos:start="75:43" pos:end="75:44">|=</operator> <call pos:start="75:46" pos:end="75:78"><name pos:start="75:46" pos:end="75:53">get_bits</name><argument_list pos:start="75:54" pos:end="75:78">(<argument pos:start="75:55" pos:end="75:60"><expr pos:start="75:55" pos:end="75:60"><operator pos:start="75:55" pos:end="75:55">&amp;</operator><name pos:start="75:56" pos:end="75:60"><name pos:start="75:56" pos:end="75:56">q</name><operator pos:start="75:57" pos:end="75:58">-&gt;</operator><name pos:start="75:59" pos:end="75:60">gb</name></name></expr></argument>, <argument pos:start="75:63" pos:end="75:77"><expr pos:start="75:63" pos:end="75:77"><name pos:start="75:63" pos:end="75:77"><name pos:start="75:63" pos:end="75:69">bitmaps</name><operator pos:start="75:70" pos:end="75:71">-&gt;</operator><name pos:start="75:72" pos:end="75:77">bitlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="75:80" pos:end="75:81">&lt;&lt;</operator> <name pos:start="75:83" pos:end="75:97"><name pos:start="75:83" pos:end="75:89">bitmaps</name><operator pos:start="75:90" pos:end="75:91">-&gt;</operator><name pos:start="75:92" pos:end="75:97">bitpos</name></name></expr>;</expr_stmt></block_content></block></for>



        <comment type="line" pos:start="79:9" pos:end="79:61">// Check for erasures/blanks on rates 1, 1/4 and 1/8.</comment>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if<condition pos:start="81:11" pos:end="81:29">(<expr pos:start="81:12" pos:end="81:28"><name pos:start="81:12" pos:end="81:28"><name pos:start="81:12" pos:end="81:12">q</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:19">frame</name><operator pos:start="81:20" pos:end="81:20">.</operator><name pos:start="81:21" pos:end="81:28">reserved</name></name></expr>)</condition>

        <block pos:start="83:9" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:25">

            <expr_stmt pos:start="85:13" pos:end="85:89"><expr pos:start="85:13" pos:end="85:88"><call pos:start="85:13" pos:end="85:88"><name pos:start="85:13" pos:end="85:43">warn_insufficient_frame_quality</name><argument_list pos:start="85:44" pos:end="85:88">(<argument pos:start="85:45" pos:end="85:49"><expr pos:start="85:45" pos:end="85:49"><name pos:start="85:45" pos:end="85:49">avctx</name></expr></argument>, <argument pos:start="85:52" pos:end="85:87"><expr pos:start="85:52" pos:end="85:87"><literal type="string" pos:start="85:52" pos:end="85:87">"Wrong data in reserved frame area."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="87:13" pos:end="87:25">goto <name pos:start="87:18" pos:end="87:24">erasure</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="101:9"><if pos:start="91:9" pos:end="101:9">if<condition pos:start="91:11" pos:end="93:67">(<expr pos:start="91:12" pos:end="93:66"><name pos:start="91:12" pos:end="91:21"><name pos:start="91:12" pos:end="91:12">q</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:21">bitrate</name></name> <operator pos:start="91:23" pos:end="91:24">==</operator> <name pos:start="91:26" pos:end="91:37">RATE_QUARTER</name> <operator pos:start="91:39" pos:end="91:40">&amp;&amp;</operator>

           <call pos:start="93:12" pos:end="93:66"><name pos:start="93:12" pos:end="93:49">codebook_sanity_check_for_rate_quarter</name><argument_list pos:start="93:50" pos:end="93:66">(<argument pos:start="93:51" pos:end="93:65"><expr pos:start="93:51" pos:end="93:65"><name pos:start="93:51" pos:end="93:65"><name pos:start="93:51" pos:end="93:51">q</name><operator pos:start="93:52" pos:end="93:53">-&gt;</operator><name pos:start="93:54" pos:end="93:58">frame</name><operator pos:start="93:59" pos:end="93:59">.</operator><name pos:start="93:60" pos:end="93:65">cbgain</name></name></expr></argument>)</argument_list></call></expr>)</condition>

        <block pos:start="95:9" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:25">

            <expr_stmt pos:start="97:13" pos:end="97:89"><expr pos:start="97:13" pos:end="97:88"><call pos:start="97:13" pos:end="97:88"><name pos:start="97:13" pos:end="97:43">warn_insufficient_frame_quality</name><argument_list pos:start="97:44" pos:end="97:88">(<argument pos:start="97:45" pos:end="97:49"><expr pos:start="97:45" pos:end="97:49"><name pos:start="97:45" pos:end="97:49">avctx</name></expr></argument>, <argument pos:start="97:52" pos:end="97:87"><expr pos:start="97:52" pos:end="97:87"><literal type="string" pos:start="97:52" pos:end="97:87">"Codebook gain sanity check failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:25">goto <name pos:start="99:18" pos:end="99:24">erasure</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="105:9" pos:end="125:9"><if pos:start="105:9" pos:end="125:9">if<condition pos:start="105:11" pos:end="105:35">(<expr pos:start="105:12" pos:end="105:34"><name pos:start="105:12" pos:end="105:21"><name pos:start="105:12" pos:end="105:12">q</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:21">bitrate</name></name> <operator pos:start="105:23" pos:end="105:24">&gt;=</operator> <name pos:start="105:26" pos:end="105:34">RATE_HALF</name></expr>)</condition>

        <block pos:start="107:9" pos:end="125:9">{<block_content pos:start="109:13" pos:end="123:13">

            <for pos:start="109:13" pos:end="123:13">for<control pos:start="109:16" pos:end="109:30">(<init pos:start="109:17" pos:end="109:20"><expr pos:start="109:17" pos:end="109:19"><name pos:start="109:17" pos:end="109:17">i</name><operator pos:start="109:18" pos:end="109:18">=</operator><literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>;</init> <condition pos:start="109:22" pos:end="109:25"><expr pos:start="109:22" pos:end="109:24"><name pos:start="109:22" pos:end="109:22">i</name><operator pos:start="109:23" pos:end="109:23">&lt;</operator><literal type="number" pos:start="109:24" pos:end="109:24">4</literal></expr>;</condition> <incr pos:start="109:27" pos:end="109:29"><expr pos:start="109:27" pos:end="109:29"><name pos:start="109:27" pos:end="109:27">i</name><operator pos:start="109:28" pos:end="109:29">++</operator></expr></incr>)</control>

            <block pos:start="111:13" pos:end="123:13">{<block_content pos:start="113:17" pos:end="121:17">

                <if_stmt pos:start="113:17" pos:end="121:17"><if pos:start="113:17" pos:end="121:17">if<condition pos:start="113:19" pos:end="113:64">(<expr pos:start="113:20" pos:end="113:63"><name pos:start="113:20" pos:end="113:36"><name pos:start="113:20" pos:end="113:20">q</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:27">frame</name><operator pos:start="113:28" pos:end="113:28">.</operator><name pos:start="113:29" pos:end="113:33">pfrac</name><index pos:start="113:34" pos:end="113:36">[<expr pos:start="113:35" pos:end="113:35"><name pos:start="113:35" pos:end="113:35">i</name></expr>]</index></name> <operator pos:start="113:38" pos:end="113:39">&amp;&amp;</operator> <name pos:start="113:41" pos:end="113:56"><name pos:start="113:41" pos:end="113:41">q</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:48">frame</name><operator pos:start="113:49" pos:end="113:49">.</operator><name pos:start="113:50" pos:end="113:53">plag</name><index pos:start="113:54" pos:end="113:56">[<expr pos:start="113:55" pos:end="113:55"><name pos:start="113:55" pos:end="113:55">i</name></expr>]</index></name> <operator pos:start="113:58" pos:end="113:59">&gt;=</operator> <literal type="number" pos:start="113:61" pos:end="113:63">124</literal></expr>)</condition>

                <block pos:start="115:17" pos:end="121:17">{<block_content pos:start="117:21" pos:end="119:33">

                    <expr_stmt pos:start="117:21" pos:end="117:94"><expr pos:start="117:21" pos:end="117:93"><call pos:start="117:21" pos:end="117:93"><name pos:start="117:21" pos:end="117:51">warn_insufficient_frame_quality</name><argument_list pos:start="117:52" pos:end="117:93">(<argument pos:start="117:53" pos:end="117:57"><expr pos:start="117:53" pos:end="117:57"><name pos:start="117:53" pos:end="117:57">avctx</name></expr></argument>, <argument pos:start="117:60" pos:end="117:92"><expr pos:start="117:60" pos:end="117:92"><literal type="string" pos:start="117:60" pos:end="117:92">"Cannot initialize pitch filter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="119:21" pos:end="119:33">goto <name pos:start="119:26" pos:end="119:32">erasure</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:35"><expr pos:start="131:5" pos:end="131:34"><call pos:start="131:5" pos:end="131:34"><name pos:start="131:5" pos:end="131:25">decode_gain_and_index</name><argument_list pos:start="131:26" pos:end="131:34">(<argument pos:start="131:27" pos:end="131:27"><expr pos:start="131:27" pos:end="131:27"><name pos:start="131:27" pos:end="131:27">q</name></expr></argument>, <argument pos:start="131:30" pos:end="131:33"><expr pos:start="131:30" pos:end="131:33"><name pos:start="131:30" pos:end="131:33">gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:40"><expr pos:start="133:5" pos:end="133:39"><call pos:start="133:5" pos:end="133:39"><name pos:start="133:5" pos:end="133:19">compute_svector</name><argument_list pos:start="133:20" pos:end="133:39">(<argument pos:start="133:21" pos:end="133:21"><expr pos:start="133:21" pos:end="133:21"><name pos:start="133:21" pos:end="133:21">q</name></expr></argument>, <argument pos:start="133:24" pos:end="133:27"><expr pos:start="133:24" pos:end="133:27"><name pos:start="133:24" pos:end="133:27">gain</name></expr></argument>, <argument pos:start="133:30" pos:end="133:38"><expr pos:start="133:30" pos:end="133:38"><name pos:start="133:30" pos:end="133:38">outbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="145:5">if<condition pos:start="137:7" pos:end="137:42">(<expr pos:start="137:8" pos:end="137:41"><call pos:start="137:8" pos:end="137:37"><name pos:start="137:8" pos:end="137:18">decode_lspf</name><argument_list pos:start="137:19" pos:end="137:37">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">q</name></expr></argument>, <argument pos:start="137:23" pos:end="137:36"><expr pos:start="137:23" pos:end="137:36"><name pos:start="137:23" pos:end="137:36">quantized_lspf</name></expr></argument>)</argument_list></call> <operator pos:start="137:39" pos:end="137:39">&lt;</operator> <literal type="number" pos:start="137:41" pos:end="137:41">0</literal></expr>)</condition>

    <block pos:start="139:5" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:21">

        <expr_stmt pos:start="141:9" pos:end="141:83"><expr pos:start="141:9" pos:end="141:82"><call pos:start="141:9" pos:end="141:82"><name pos:start="141:9" pos:end="141:39">warn_insufficient_frame_quality</name><argument_list pos:start="141:40" pos:end="141:82">(<argument pos:start="141:41" pos:end="141:45"><expr pos:start="141:41" pos:end="141:45"><name pos:start="141:41" pos:end="141:45">avctx</name></expr></argument>, <argument pos:start="141:48" pos:end="141:81"><expr pos:start="141:48" pos:end="141:81"><literal type="string" pos:start="141:48" pos:end="141:81">"Badly received packets in frame."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:21">goto <name pos:start="143:14" pos:end="143:20">erasure</name>;</goto>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="151:5" pos:end="151:38"><expr pos:start="151:5" pos:end="151:37"><call pos:start="151:5" pos:end="151:37"><name pos:start="151:5" pos:end="151:23">apply_pitch_filters</name><argument_list pos:start="151:24" pos:end="151:37">(<argument pos:start="151:25" pos:end="151:25"><expr pos:start="151:25" pos:end="151:25"><name pos:start="151:25" pos:end="151:25">q</name></expr></argument>, <argument pos:start="151:28" pos:end="151:36"><expr pos:start="151:28" pos:end="151:36"><name pos:start="151:28" pos:end="151:36">outbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="155:5" pos:end="175:29"><if pos:start="155:5" pos:end="173:5">if<condition pos:start="155:7" pos:end="155:27">(<expr pos:start="155:8" pos:end="155:26"><name pos:start="155:8" pos:end="155:17"><name pos:start="155:8" pos:end="155:8">q</name><operator pos:start="155:9" pos:end="155:10">-&gt;</operator><name pos:start="155:11" pos:end="155:17">bitrate</name></name> <operator pos:start="155:19" pos:end="155:20">==</operator> <name pos:start="155:22" pos:end="155:26">I_F_Q</name></expr>)</condition>

    <block pos:start="157:5" pos:end="173:5">{<block_content pos:start="159:1" pos:end="171:42">

<label pos:start="159:1" pos:end="159:8"><name pos:start="159:1" pos:end="159:7">erasure</name>:</label>

        <expr_stmt pos:start="161:9" pos:end="161:27"><expr pos:start="161:9" pos:end="161:26"><name pos:start="161:9" pos:end="161:18"><name pos:start="161:9" pos:end="161:9">q</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:18">bitrate</name></name> <operator pos:start="161:20" pos:end="161:20">=</operator> <name pos:start="161:22" pos:end="161:26">I_F_Q</name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:27"><expr pos:start="163:9" pos:end="163:26"><name pos:start="163:9" pos:end="163:24"><name pos:start="163:9" pos:end="163:9">q</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:24">erasure_count</name></name><operator pos:start="163:25" pos:end="163:26">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:39"><expr pos:start="165:9" pos:end="165:38"><call pos:start="165:9" pos:end="165:38"><name pos:start="165:9" pos:end="165:29">decode_gain_and_index</name><argument_list pos:start="165:30" pos:end="165:38">(<argument pos:start="165:31" pos:end="165:31"><expr pos:start="165:31" pos:end="165:31"><name pos:start="165:31" pos:end="165:31">q</name></expr></argument>, <argument pos:start="165:34" pos:end="165:37"><expr pos:start="165:34" pos:end="165:37"><name pos:start="165:34" pos:end="165:37">gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:44"><expr pos:start="167:9" pos:end="167:43"><call pos:start="167:9" pos:end="167:43"><name pos:start="167:9" pos:end="167:23">compute_svector</name><argument_list pos:start="167:24" pos:end="167:43">(<argument pos:start="167:25" pos:end="167:25"><expr pos:start="167:25" pos:end="167:25"><name pos:start="167:25" pos:end="167:25">q</name></expr></argument>, <argument pos:start="167:28" pos:end="167:31"><expr pos:start="167:28" pos:end="167:31"><name pos:start="167:28" pos:end="167:31">gain</name></expr></argument>, <argument pos:start="167:34" pos:end="167:42"><expr pos:start="167:34" pos:end="167:42"><name pos:start="167:34" pos:end="167:42">outbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:39"><expr pos:start="169:9" pos:end="169:38"><call pos:start="169:9" pos:end="169:38"><name pos:start="169:9" pos:end="169:19">decode_lspf</name><argument_list pos:start="169:20" pos:end="169:38">(<argument pos:start="169:21" pos:end="169:21"><expr pos:start="169:21" pos:end="169:21"><name pos:start="169:21" pos:end="169:21">q</name></expr></argument>, <argument pos:start="169:24" pos:end="169:37"><expr pos:start="169:24" pos:end="169:37"><name pos:start="169:24" pos:end="169:37">quantized_lspf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:42"><expr pos:start="171:9" pos:end="171:41"><call pos:start="171:9" pos:end="171:41"><name pos:start="171:9" pos:end="171:27">apply_pitch_filters</name><argument_list pos:start="171:28" pos:end="171:41">(<argument pos:start="171:29" pos:end="171:29"><expr pos:start="171:29" pos:end="171:29"><name pos:start="171:29" pos:end="171:29">q</name></expr></argument>, <argument pos:start="171:32" pos:end="171:40"><expr pos:start="171:32" pos:end="171:40"><name pos:start="171:32" pos:end="171:40">outbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="173:6" pos:end="175:29">else<block type="pseudo" pos:start="175:9" pos:end="175:29"><block_content pos:start="175:9" pos:end="175:29">

        <expr_stmt pos:start="175:9" pos:end="175:29"><expr pos:start="175:9" pos:end="175:28"><name pos:start="175:9" pos:end="175:24"><name pos:start="175:9" pos:end="175:9">q</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:24">erasure_count</name></name> <operator pos:start="175:26" pos:end="175:26">=</operator> <literal type="number" pos:start="175:28" pos:end="175:28">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:38"><expr pos:start="179:5" pos:end="179:37"><name pos:start="179:5" pos:end="179:15">formant_mem</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <name pos:start="179:19" pos:end="179:32"><name pos:start="179:19" pos:end="179:19">q</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:32">formant_mem</name></name> <operator pos:start="179:34" pos:end="179:34">+</operator> <literal type="number" pos:start="179:36" pos:end="179:37">10</literal></expr>;</expr_stmt>

    <for pos:start="181:5" pos:end="193:5">for<control pos:start="181:8" pos:end="181:22">(<init pos:start="181:9" pos:end="181:12"><expr pos:start="181:9" pos:end="181:11"><name pos:start="181:9" pos:end="181:9">i</name><operator pos:start="181:10" pos:end="181:10">=</operator><literal type="number" pos:start="181:11" pos:end="181:11">0</literal></expr>;</init> <condition pos:start="181:14" pos:end="181:17"><expr pos:start="181:14" pos:end="181:16"><name pos:start="181:14" pos:end="181:14">i</name><operator pos:start="181:15" pos:end="181:15">&lt;</operator><literal type="number" pos:start="181:16" pos:end="181:16">4</literal></expr>;</condition> <incr pos:start="181:19" pos:end="181:21"><expr pos:start="181:19" pos:end="181:21"><name pos:start="181:19" pos:end="181:19">i</name><operator pos:start="181:20" pos:end="181:21">++</operator></expr></incr>)</control>

    <block pos:start="183:5" pos:end="193:5">{<block_content pos:start="185:9" pos:end="191:26">

        <expr_stmt pos:start="185:9" pos:end="185:51"><expr pos:start="185:9" pos:end="185:50"><call pos:start="185:9" pos:end="185:50"><name pos:start="185:9" pos:end="185:23">interpolate_lpc</name><argument_list pos:start="185:24" pos:end="185:50">(<argument pos:start="185:25" pos:end="185:25"><expr pos:start="185:25" pos:end="185:25"><name pos:start="185:25" pos:end="185:25">q</name></expr></argument>, <argument pos:start="185:28" pos:end="185:41"><expr pos:start="185:28" pos:end="185:41"><name pos:start="185:28" pos:end="185:41">quantized_lspf</name></expr></argument>, <argument pos:start="185:44" pos:end="185:46"><expr pos:start="185:44" pos:end="185:46"><name pos:start="185:44" pos:end="185:46">lpc</name></expr></argument>, <argument pos:start="185:49" pos:end="185:49"><expr pos:start="185:49" pos:end="185:49"><name pos:start="185:49" pos:end="185:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="189:41"><expr pos:start="187:9" pos:end="189:40"><call pos:start="187:9" pos:end="189:40"><name pos:start="187:9" pos:end="187:36">ff_celp_lp_synthesis_filterf</name><argument_list pos:start="187:37" pos:end="189:40">(<argument pos:start="187:38" pos:end="187:48"><expr pos:start="187:38" pos:end="187:48"><name pos:start="187:38" pos:end="187:48">formant_mem</name></expr></argument>, <argument pos:start="187:51" pos:end="187:53"><expr pos:start="187:51" pos:end="187:53"><name pos:start="187:51" pos:end="187:53">lpc</name></expr></argument>, <argument pos:start="187:56" pos:end="187:73"><expr pos:start="187:56" pos:end="187:73"><name pos:start="187:56" pos:end="187:64">outbuffer</name> <operator pos:start="187:66" pos:end="187:66">+</operator> <name pos:start="187:68" pos:end="187:68">i</name> <operator pos:start="187:70" pos:end="187:70">*</operator> <literal type="number" pos:start="187:72" pos:end="187:73">40</literal></expr></argument>, <argument pos:start="187:76" pos:end="187:77"><expr pos:start="187:76" pos:end="187:77"><literal type="number" pos:start="187:76" pos:end="187:77">40</literal></expr></argument>,

                                     <argument pos:start="189:38" pos:end="189:39"><expr pos:start="189:38" pos:end="189:39"><literal type="number" pos:start="189:38" pos:end="189:39">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:26"><expr pos:start="191:9" pos:end="191:25"><name pos:start="191:9" pos:end="191:19">formant_mem</name> <operator pos:start="191:21" pos:end="191:22">+=</operator> <literal type="number" pos:start="191:24" pos:end="191:25">40</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="line" pos:start="197:5" pos:end="197:48">// postfilter, as per TIA/EIA/IS-733 2.4.8.6</comment>

    <expr_stmt pos:start="199:5" pos:end="199:34"><expr pos:start="199:5" pos:end="199:33"><call pos:start="199:5" pos:end="199:33"><name pos:start="199:5" pos:end="199:14">postfilter</name><argument_list pos:start="199:15" pos:end="199:33">(<argument pos:start="199:16" pos:end="199:16"><expr pos:start="199:16" pos:end="199:16"><name pos:start="199:16" pos:end="199:16">q</name></expr></argument>, <argument pos:start="199:19" pos:end="199:27"><expr pos:start="199:19" pos:end="199:27"><name pos:start="199:19" pos:end="199:27">outbuffer</name></expr></argument>, <argument pos:start="199:30" pos:end="199:32"><expr pos:start="199:30" pos:end="199:32"><name pos:start="199:30" pos:end="199:32">lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:69"><expr pos:start="203:5" pos:end="203:68"><call pos:start="203:5" pos:end="203:68"><name pos:start="203:5" pos:end="203:10">memcpy</name><argument_list pos:start="203:11" pos:end="203:68">(<argument pos:start="203:12" pos:end="203:25"><expr pos:start="203:12" pos:end="203:25"><name pos:start="203:12" pos:end="203:25"><name pos:start="203:12" pos:end="203:12">q</name><operator pos:start="203:13" pos:end="203:14">-&gt;</operator><name pos:start="203:15" pos:end="203:25">formant_mem</name></name></expr></argument>, <argument pos:start="203:28" pos:end="203:47"><expr pos:start="203:28" pos:end="203:47"><name pos:start="203:28" pos:end="203:41"><name pos:start="203:28" pos:end="203:28">q</name><operator pos:start="203:29" pos:end="203:30">-&gt;</operator><name pos:start="203:31" pos:end="203:41">formant_mem</name></name> <operator pos:start="203:43" pos:end="203:43">+</operator> <literal type="number" pos:start="203:45" pos:end="203:47">160</literal></expr></argument>, <argument pos:start="203:50" pos:end="203:67"><expr pos:start="203:50" pos:end="203:67"><literal type="number" pos:start="203:50" pos:end="203:51">10</literal> <operator pos:start="203:53" pos:end="203:53">*</operator> <sizeof pos:start="203:55" pos:end="203:67">sizeof<argument_list pos:start="203:61" pos:end="203:67">(<argument pos:start="203:62" pos:end="203:66"><expr pos:start="203:62" pos:end="203:66"><name pos:start="203:62" pos:end="203:66">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:63"><expr pos:start="207:5" pos:end="207:62"><call pos:start="207:5" pos:end="207:62"><name pos:start="207:5" pos:end="207:10">memcpy</name><argument_list pos:start="207:11" pos:end="207:62">(<argument pos:start="207:12" pos:end="207:23"><expr pos:start="207:12" pos:end="207:23"><name pos:start="207:12" pos:end="207:23"><name pos:start="207:12" pos:end="207:12">q</name><operator pos:start="207:13" pos:end="207:14">-&gt;</operator><name pos:start="207:15" pos:end="207:23">prev_lspf</name></name></expr></argument>, <argument pos:start="207:26" pos:end="207:39"><expr pos:start="207:26" pos:end="207:39"><name pos:start="207:26" pos:end="207:39">quantized_lspf</name></expr></argument>, <argument pos:start="207:42" pos:end="207:61"><expr pos:start="207:42" pos:end="207:61"><sizeof pos:start="207:42" pos:end="207:61">sizeof<argument_list pos:start="207:48" pos:end="207:61">(<argument pos:start="207:49" pos:end="207:60"><expr pos:start="207:49" pos:end="207:60"><name pos:start="207:49" pos:end="207:60"><name pos:start="207:49" pos:end="207:49">q</name><operator pos:start="207:50" pos:end="207:51">-&gt;</operator><name pos:start="207:52" pos:end="207:60">prev_lspf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:33"><expr pos:start="209:5" pos:end="209:32"><name pos:start="209:5" pos:end="209:19"><name pos:start="209:5" pos:end="209:5">q</name><operator pos:start="209:6" pos:end="209:7">-&gt;</operator><name pos:start="209:8" pos:end="209:19">prev_bitrate</name></name> <operator pos:start="209:21" pos:end="209:21">=</operator> <name pos:start="209:23" pos:end="209:32"><name pos:start="209:23" pos:end="209:23">q</name><operator pos:start="209:24" pos:end="209:25">-&gt;</operator><name pos:start="209:26" pos:end="209:32">bitrate</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:42"><expr pos:start="213:5" pos:end="213:41"><operator pos:start="213:5" pos:end="213:5">*</operator><name pos:start="213:6" pos:end="213:14">data_size</name> <operator pos:start="213:16" pos:end="213:16">=</operator> <literal type="number" pos:start="213:18" pos:end="213:20">160</literal> <operator pos:start="213:22" pos:end="213:22">*</operator> <sizeof pos:start="213:24" pos:end="213:41">sizeof<argument_list pos:start="213:30" pos:end="213:41">(<argument pos:start="213:31" pos:end="213:40"><expr pos:start="213:31" pos:end="213:40"><operator pos:start="213:31" pos:end="213:31">*</operator><name pos:start="213:32" pos:end="213:40">outbuffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="217:5" pos:end="217:20">return <expr pos:start="217:12" pos:end="217:19"><name pos:start="217:12" pos:end="217:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
