<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16413.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">commit_run</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="203:1">{<block_content pos:start="5:5" pos:end="201:41">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">CommitBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:28">active</name> <init pos:start="7:30" pos:end="7:40">= <expr pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:32">s</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:40">active</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">top</name> <init pos:start="9:27" pos:end="9:34">= <expr pos:start="9:29" pos:end="9:34"><name pos:start="9:29" pos:end="9:34"><name pos:start="9:29" pos:end="9:29">s</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:34">top</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">base</name> <init pos:start="11:28" pos:end="11:36">= <expr pos:start="11:30" pos:end="11:36"><name pos:start="11:30" pos:end="11:36"><name pos:start="11:30" pos:end="11:30">s</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:32">overlay_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:22">sector_num</name></decl>, <decl pos:start="15:25" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:25" pos:end="15:27">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name> <init pos:start="17:13" pos:end="17:15">= <expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:14"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">n</name> <init pos:start="19:11" pos:end="19:13">= <expr pos:start="19:13" pos:end="19:13"><literal type="number" pos:start="19:13" pos:end="19:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">void</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:26"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:21">bytes_written</name> <init pos:start="23:23" pos:end="23:25">= <expr pos:start="23:25" pos:end="23:25"><literal type="number" pos:start="23:25" pos:end="23:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">int64_t</name></type> <name pos:start="25:13" pos:end="25:20">base_len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:23"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:19">common</name><operator pos:start="29:20" pos:end="29:20">.</operator><name pos:start="29:21" pos:end="29:23">len</name></name> <operator pos:start="29:25" pos:end="29:25">=</operator> <call pos:start="29:27" pos:end="29:45"><name pos:start="29:27" pos:end="29:40">bdrv_getlength</name><argument_list pos:start="29:41" pos:end="29:45">(<argument pos:start="29:42" pos:end="29:44"><expr pos:start="29:42" pos:end="29:44"><name pos:start="29:42" pos:end="29:44">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:26">(<expr pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:17">common</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:21">len</name></name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <literal type="number" pos:start="35:25" pos:end="35:25">0</literal></expr>)</condition> <block pos:start="35:28" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:33">

        <goto pos:start="37:9" pos:end="37:33">goto <name pos:start="37:14" pos:end="37:32">exit_restore_reopen</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:42"><expr pos:start="43:5" pos:end="43:41"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <name pos:start="43:11" pos:end="43:18">base_len</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:41"><name pos:start="43:22" pos:end="43:35">bdrv_getlength</name><argument_list pos:start="43:36" pos:end="43:41">(<argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><name pos:start="43:37" pos:end="43:40">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:21">(<expr pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:16">base_len</name> <operator pos:start="45:18" pos:end="45:18">&lt;</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>)</condition> <block pos:start="45:23" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:33">

        <goto pos:start="47:9" pos:end="47:33">goto <name pos:start="47:14" pos:end="47:32">exit_restore_reopen</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:33">(<expr pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:16">base_len</name> <operator pos:start="53:18" pos:end="53:18">&lt;</operator> <name pos:start="53:20" pos:end="53:32"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:28">common</name><operator pos:start="53:29" pos:end="53:29">.</operator><name pos:start="53:30" pos:end="53:32">len</name></name></expr>)</condition> <block pos:start="53:35" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:9">

        <expr_stmt pos:start="55:9" pos:end="55:49"><expr pos:start="55:9" pos:end="55:48"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:48"><name pos:start="55:15" pos:end="55:27">bdrv_truncate</name><argument_list pos:start="55:28" pos:end="55:48">(<argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><name pos:start="55:29" pos:end="55:32">base</name></expr></argument>, <argument pos:start="55:35" pos:end="55:47"><expr pos:start="55:35" pos:end="55:47"><name pos:start="55:35" pos:end="55:47"><name pos:start="55:35" pos:end="55:35">s</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:43">common</name><operator pos:start="55:44" pos:end="55:44">.</operator><name pos:start="55:45" pos:end="55:47">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:16">(<expr pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">ret</name></expr>)</condition> <block pos:start="57:18" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:37">

            <goto pos:start="59:13" pos:end="59:37">goto <name pos:start="59:18" pos:end="59:36">exit_restore_reopen</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:44"><expr pos:start="67:5" pos:end="67:43"><name pos:start="67:5" pos:end="67:7">end</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <name pos:start="67:11" pos:end="67:23"><name pos:start="67:11" pos:end="67:11">s</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:19">common</name><operator pos:start="67:20" pos:end="67:20">.</operator><name pos:start="67:21" pos:end="67:23">len</name></name> <operator pos:start="67:25" pos:end="67:26">&gt;&gt;</operator> <name pos:start="67:28" pos:end="67:43">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:7">buf</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:50"><name pos:start="69:11" pos:end="69:25">qemu_blockalign</name><argument_list pos:start="69:26" pos:end="69:50">(<argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:29">top</name></expr></argument>, <argument pos:start="69:32" pos:end="69:49"><expr pos:start="69:32" pos:end="69:49"><name pos:start="69:32" pos:end="69:49">COMMIT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="73:5" pos:end="153:5">for <control pos:start="73:9" pos:end="73:59">(<init pos:start="73:10" pos:end="73:24"><expr pos:start="73:10" pos:end="73:23"><name pos:start="73:10" pos:end="73:19">sector_num</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>;</init> <condition pos:start="73:26" pos:end="73:42"><expr pos:start="73:26" pos:end="73:41"><name pos:start="73:26" pos:end="73:35">sector_num</name> <operator pos:start="73:37" pos:end="73:37">&lt;</operator> <name pos:start="73:39" pos:end="73:41">end</name></expr>;</condition> <incr pos:start="73:44" pos:end="73:58"><expr pos:start="73:44" pos:end="73:58"><name pos:start="73:44" pos:end="73:53">sector_num</name> <operator pos:start="73:55" pos:end="73:56">+=</operator> <name pos:start="73:58" pos:end="73:58">n</name></expr></incr>)</control> <block pos:start="73:61" pos:end="153:5">{<block_content pos:start="75:9" pos:end="151:49">

        <decl_stmt pos:start="75:9" pos:end="75:30"><decl pos:start="75:9" pos:end="75:29"><type pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:16">uint64_t</name></type> <name pos:start="75:18" pos:end="75:25">delay_ns</name> <init pos:start="75:27" pos:end="75:29">= <expr pos:start="75:29" pos:end="75:29"><literal type="number" pos:start="75:29" pos:end="75:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="77:18"><decl pos:start="77:9" pos:end="77:17"><type pos:start="77:9" pos:end="77:12"><name pos:start="77:9" pos:end="77:12">bool</name></type> <name pos:start="77:14" pos:end="77:17">copy</name></decl>;</decl_stmt>



<label pos:start="81:1" pos:end="81:5"><name pos:start="81:1" pos:end="81:4">wait</name>:</label>

        <comment type="block" pos:start="83:9" pos:end="87:11">/* Note that even when no rate limit is applied we need to yield

         * with no pending I/O here so that bdrv_drain_all() returns.

         */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:70"><expr pos:start="89:9" pos:end="89:69"><call pos:start="89:9" pos:end="89:69"><name pos:start="89:9" pos:end="89:26">block_job_sleep_ns</name><argument_list pos:start="89:27" pos:end="89:69">(<argument pos:start="89:28" pos:end="89:37"><expr pos:start="89:28" pos:end="89:37"><operator pos:start="89:28" pos:end="89:28">&amp;</operator><name pos:start="89:29" pos:end="89:37"><name pos:start="89:29" pos:end="89:29">s</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:37">common</name></name></expr></argument>, <argument pos:start="89:40" pos:end="89:58"><expr pos:start="89:40" pos:end="89:58"><name pos:start="89:40" pos:end="89:58">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="89:61" pos:end="89:68"><expr pos:start="89:61" pos:end="89:68"><name pos:start="89:61" pos:end="89:68">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:47">(<expr pos:start="91:13" pos:end="91:46"><call pos:start="91:13" pos:end="91:46"><name pos:start="91:13" pos:end="91:34">block_job_is_cancelled</name><argument_list pos:start="91:35" pos:end="91:46">(<argument pos:start="91:36" pos:end="91:45"><expr pos:start="91:36" pos:end="91:45"><operator pos:start="91:36" pos:end="91:36">&amp;</operator><name pos:start="91:37" pos:end="91:45"><name pos:start="91:37" pos:end="91:37">s</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:45">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:49" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:18">

            <break pos:start="93:13" pos:end="93:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="97:9" pos:end="97:46">/* Copy if allocated above the base */</comment>

        <expr_stmt pos:start="99:9" pos:end="103:42"><expr pos:start="99:9" pos:end="103:41"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="103:41"><name pos:start="99:15" pos:end="99:37">bdrv_is_allocated_above</name><argument_list pos:start="99:38" pos:end="103:41">(<argument pos:start="99:39" pos:end="99:41"><expr pos:start="99:39" pos:end="99:41"><name pos:start="99:39" pos:end="99:41">top</name></expr></argument>, <argument pos:start="99:44" pos:end="99:47"><expr pos:start="99:44" pos:end="99:47"><name pos:start="99:44" pos:end="99:47">base</name></expr></argument>, <argument pos:start="99:50" pos:end="99:59"><expr pos:start="99:50" pos:end="99:59"><name pos:start="99:50" pos:end="99:59">sector_num</name></expr></argument>,

                                      <argument pos:start="101:39" pos:end="101:75"><expr pos:start="101:39" pos:end="101:75"><name pos:start="101:39" pos:end="101:56">COMMIT_BUFFER_SIZE</name> <operator pos:start="101:58" pos:end="101:58">/</operator> <name pos:start="101:60" pos:end="101:75">BDRV_SECTOR_SIZE</name></expr></argument>,

                                      <argument pos:start="103:39" pos:end="103:40"><expr pos:start="103:39" pos:end="103:40"><operator pos:start="103:39" pos:end="103:39">&amp;</operator><name pos:start="103:40" pos:end="103:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:26"><expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:12">copy</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:19">ret</name> <operator pos:start="105:21" pos:end="105:22">==</operator> <literal type="number" pos:start="105:24" pos:end="105:24">1</literal><operator pos:start="105:25" pos:end="105:25">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:58"><expr pos:start="107:9" pos:end="107:57"><call pos:start="107:9" pos:end="107:57"><name pos:start="107:9" pos:end="107:34">trace_commit_one_iteration</name><argument_list pos:start="107:35" pos:end="107:57">(<argument pos:start="107:36" pos:end="107:36"><expr pos:start="107:36" pos:end="107:36"><name pos:start="107:36" pos:end="107:36">s</name></expr></argument>, <argument pos:start="107:39" pos:end="107:48"><expr pos:start="107:39" pos:end="107:48"><name pos:start="107:39" pos:end="107:48">sector_num</name></expr></argument>, <argument pos:start="107:51" pos:end="107:51"><expr pos:start="107:51" pos:end="107:51"><name pos:start="107:51" pos:end="107:51">n</name></expr></argument>, <argument pos:start="107:54" pos:end="107:56"><expr pos:start="107:54" pos:end="107:56"><name pos:start="107:54" pos:end="107:56">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="127:9"><if pos:start="109:9" pos:end="127:9">if <condition pos:start="109:12" pos:end="109:17">(<expr pos:start="109:13" pos:end="109:16"><name pos:start="109:13" pos:end="109:16">copy</name></expr>)</condition> <block pos:start="109:19" pos:end="127:9">{<block_content pos:start="111:13" pos:end="125:50">

            <if_stmt pos:start="111:13" pos:end="121:13"><if pos:start="111:13" pos:end="121:13">if <condition pos:start="111:16" pos:end="111:32">(<expr pos:start="111:17" pos:end="111:31"><name pos:start="111:17" pos:end="111:31"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:25">common</name><operator pos:start="111:26" pos:end="111:26">.</operator><name pos:start="111:27" pos:end="111:31">speed</name></name></expr>)</condition> <block pos:start="111:34" pos:end="121:13">{<block_content pos:start="113:17" pos:end="119:17">

                <expr_stmt pos:start="113:17" pos:end="113:67"><expr pos:start="113:17" pos:end="113:66"><name pos:start="113:17" pos:end="113:24">delay_ns</name> <operator pos:start="113:26" pos:end="113:26">=</operator> <call pos:start="113:28" pos:end="113:66"><name pos:start="113:28" pos:end="113:52">ratelimit_calculate_delay</name><argument_list pos:start="113:53" pos:end="113:66">(<argument pos:start="113:54" pos:end="113:62"><expr pos:start="113:54" pos:end="113:62"><operator pos:start="113:54" pos:end="113:54">&amp;</operator><name pos:start="113:55" pos:end="113:62"><name pos:start="113:55" pos:end="113:55">s</name><operator pos:start="113:56" pos:end="113:57">-&gt;</operator><name pos:start="113:58" pos:end="113:62">limit</name></name></expr></argument>, <argument pos:start="113:65" pos:end="113:65"><expr pos:start="113:65" pos:end="113:65"><name pos:start="113:65" pos:end="113:65">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="115:17" pos:end="119:17"><if pos:start="115:17" pos:end="119:17">if <condition pos:start="115:20" pos:end="115:33">(<expr pos:start="115:21" pos:end="115:32"><name pos:start="115:21" pos:end="115:28">delay_ns</name> <operator pos:start="115:30" pos:end="115:30">&gt;</operator> <literal type="number" pos:start="115:32" pos:end="115:32">0</literal></expr>)</condition> <block pos:start="115:35" pos:end="119:17">{<block_content pos:start="117:21" pos:end="117:30">

                    <goto pos:start="117:21" pos:end="117:30">goto <name pos:start="117:26" pos:end="117:29">wait</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:65"><expr pos:start="123:13" pos:end="123:64"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:64"><name pos:start="123:19" pos:end="123:33">commit_populate</name><argument_list pos:start="123:34" pos:end="123:64">(<argument pos:start="123:35" pos:end="123:37"><expr pos:start="123:35" pos:end="123:37"><name pos:start="123:35" pos:end="123:37">top</name></expr></argument>, <argument pos:start="123:40" pos:end="123:43"><expr pos:start="123:40" pos:end="123:43"><name pos:start="123:40" pos:end="123:43">base</name></expr></argument>, <argument pos:start="123:46" pos:end="123:55"><expr pos:start="123:46" pos:end="123:55"><name pos:start="123:46" pos:end="123:55">sector_num</name></expr></argument>, <argument pos:start="123:58" pos:end="123:58"><expr pos:start="123:58" pos:end="123:58"><name pos:start="123:58" pos:end="123:58">n</name></expr></argument>, <argument pos:start="123:61" pos:end="123:63"><expr pos:start="123:61" pos:end="123:63"><name pos:start="123:61" pos:end="123:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:50"><expr pos:start="125:13" pos:end="125:49"><name pos:start="125:13" pos:end="125:25">bytes_written</name> <operator pos:start="125:27" pos:end="125:28">+=</operator> <name pos:start="125:30" pos:end="125:30">n</name> <operator pos:start="125:32" pos:end="125:32">*</operator> <name pos:start="125:34" pos:end="125:49">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="129:9" pos:end="147:9"><if pos:start="129:9" pos:end="147:9">if <condition pos:start="129:12" pos:end="129:20">(<expr pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:17">&lt;</operator> <literal type="number" pos:start="129:19" pos:end="129:19">0</literal></expr>)</condition> <block pos:start="129:22" pos:end="147:9">{<block_content pos:start="131:13" pos:end="145:13">

            <if_stmt pos:start="131:13" pos:end="145:13"><if pos:start="131:13" pos:end="139:13">if <condition pos:start="131:16" pos:end="135:76">(<expr pos:start="131:17" pos:end="135:75"><name pos:start="131:17" pos:end="131:27"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:27">on_error</name></name> <operator pos:start="131:29" pos:end="131:30">==</operator> <name pos:start="131:32" pos:end="131:53">BLOCKDEV_ON_ERROR_STOP</name> <operator pos:start="131:55" pos:end="131:56">||</operator>

                <name pos:start="133:17" pos:end="133:27"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:27">on_error</name></name> <operator pos:start="133:29" pos:end="133:30">==</operator> <name pos:start="133:32" pos:end="133:55">BLOCKDEV_ON_ERROR_REPORT</name><operator pos:start="133:56" pos:end="133:57">||</operator>

                <operator pos:start="135:17" pos:end="135:17">(</operator><name pos:start="135:18" pos:end="135:28"><name pos:start="135:18" pos:end="135:18">s</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:28">on_error</name></name> <operator pos:start="135:30" pos:end="135:31">==</operator> <name pos:start="135:33" pos:end="135:56">BLOCKDEV_ON_ERROR_ENOSPC</name> <operator pos:start="135:58" pos:end="135:59">&amp;&amp;</operator> <name pos:start="135:61" pos:end="135:63">ret</name> <operator pos:start="135:65" pos:end="135:66">==</operator> <operator pos:start="135:68" pos:end="135:68">-</operator><name pos:start="135:69" pos:end="135:74">ENOSPC</name><operator pos:start="135:75" pos:end="135:75">)</operator></expr>)</condition> <block pos:start="135:78" pos:end="139:13">{<block_content pos:start="137:17" pos:end="137:35">

                <goto pos:start="137:17" pos:end="137:35">goto <name pos:start="137:22" pos:end="137:34">exit_free_buf</name>;</goto>

            </block_content>}</block></if> <else pos:start="139:15" pos:end="145:13">else <block pos:start="139:20" pos:end="145:13">{<block_content pos:start="141:17" pos:end="143:25">

                <expr_stmt pos:start="141:17" pos:end="141:22"><expr pos:start="141:17" pos:end="141:21"><name pos:start="141:17" pos:end="141:17">n</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <literal type="number" pos:start="141:21" pos:end="141:21">0</literal></expr>;</expr_stmt>

                <continue pos:start="143:17" pos:end="143:25">continue;</continue>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="149:9" pos:end="149:30">/* Publish progress */</comment>

        <expr_stmt pos:start="151:9" pos:end="151:49"><expr pos:start="151:9" pos:end="151:48"><name pos:start="151:9" pos:end="151:24"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:17">common</name><operator pos:start="151:18" pos:end="151:18">.</operator><name pos:start="151:19" pos:end="151:24">offset</name></name> <operator pos:start="151:26" pos:end="151:27">+=</operator> <name pos:start="151:29" pos:end="151:29">n</name> <operator pos:start="151:31" pos:end="151:31">*</operator> <name pos:start="151:33" pos:end="151:48">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="157:5" pos:end="157:12"><expr pos:start="157:5" pos:end="157:11"><name pos:start="157:5" pos:end="157:7">ret</name> <operator pos:start="157:9" pos:end="157:9">=</operator> <literal type="number" pos:start="157:11" pos:end="157:11">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:65">(<expr pos:start="161:9" pos:end="161:64"><operator pos:start="161:9" pos:end="161:9">!</operator><call pos:start="161:10" pos:end="161:43"><name pos:start="161:10" pos:end="161:31">block_job_is_cancelled</name><argument_list pos:start="161:32" pos:end="161:43">(<argument pos:start="161:33" pos:end="161:42"><expr pos:start="161:33" pos:end="161:42"><operator pos:start="161:33" pos:end="161:33">&amp;</operator><name pos:start="161:34" pos:end="161:42"><name pos:start="161:34" pos:end="161:34">s</name><operator pos:start="161:35" pos:end="161:36">-&gt;</operator><name pos:start="161:37" pos:end="161:42">common</name></name></expr></argument>)</argument_list></call> <operator pos:start="161:45" pos:end="161:46">&amp;&amp;</operator> <name pos:start="161:48" pos:end="161:57">sector_num</name> <operator pos:start="161:59" pos:end="161:60">==</operator> <name pos:start="161:62" pos:end="161:64">end</name></expr>)</condition> <block pos:start="161:67" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:77">

        <comment type="block" pos:start="163:9" pos:end="163:21">/* success */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:77"><expr pos:start="165:9" pos:end="165:76"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="165:76"><name pos:start="165:15" pos:end="165:36">bdrv_drop_intermediate</name><argument_list pos:start="165:37" pos:end="165:76">(<argument pos:start="165:38" pos:end="165:43"><expr pos:start="165:38" pos:end="165:43"><name pos:start="165:38" pos:end="165:43">active</name></expr></argument>, <argument pos:start="165:46" pos:end="165:48"><expr pos:start="165:46" pos:end="165:48"><name pos:start="165:46" pos:end="165:48">top</name></expr></argument>, <argument pos:start="165:51" pos:end="165:54"><expr pos:start="165:51" pos:end="165:54"><name pos:start="165:51" pos:end="165:54">base</name></expr></argument>, <argument pos:start="165:57" pos:end="165:75"><expr pos:start="165:57" pos:end="165:75"><name pos:start="165:57" pos:end="165:75"><name pos:start="165:57" pos:end="165:57">s</name><operator pos:start="165:58" pos:end="165:59">-&gt;</operator><name pos:start="165:60" pos:end="165:75">backing_file_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="171:1" pos:end="171:14"><name pos:start="171:1" pos:end="171:13">exit_free_buf</name>:</label>

    <expr_stmt pos:start="173:5" pos:end="173:20"><expr pos:start="173:5" pos:end="173:19"><call pos:start="173:5" pos:end="173:19"><name pos:start="173:5" pos:end="173:14">qemu_vfree</name><argument_list pos:start="173:15" pos:end="173:19">(<argument pos:start="173:16" pos:end="173:18"><expr pos:start="173:16" pos:end="173:18"><name pos:start="173:16" pos:end="173:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="177:1" pos:end="177:20"><name pos:start="177:1" pos:end="177:19">exit_restore_reopen</name>:</label>

    <comment type="block" pos:start="179:5" pos:end="183:30">/* restore base open flags here if appropriate (e.g., change the base back

     * to r/o). These reopens do not need to be atomic, since we won't abort

     * even on failure here */</comment>

    <if_stmt pos:start="185:5" pos:end="189:5"><if pos:start="185:5" pos:end="189:5">if <condition pos:start="185:8" pos:end="185:46">(<expr pos:start="185:9" pos:end="185:45"><name pos:start="185:9" pos:end="185:21"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:21">base_flags</name></name> <operator pos:start="185:23" pos:end="185:24">!=</operator> <call pos:start="185:26" pos:end="185:45"><name pos:start="185:26" pos:end="185:39">bdrv_get_flags</name><argument_list pos:start="185:40" pos:end="185:45">(<argument pos:start="185:41" pos:end="185:44"><expr pos:start="185:41" pos:end="185:44"><name pos:start="185:41" pos:end="185:44">base</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:48" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:47">

        <expr_stmt pos:start="187:9" pos:end="187:47"><expr pos:start="187:9" pos:end="187:46"><call pos:start="187:9" pos:end="187:46"><name pos:start="187:9" pos:end="187:19">bdrv_reopen</name><argument_list pos:start="187:20" pos:end="187:46">(<argument pos:start="187:21" pos:end="187:24"><expr pos:start="187:21" pos:end="187:24"><name pos:start="187:21" pos:end="187:24">base</name></expr></argument>, <argument pos:start="187:27" pos:end="187:39"><expr pos:start="187:27" pos:end="187:39"><name pos:start="187:27" pos:end="187:39"><name pos:start="187:27" pos:end="187:27">s</name><operator pos:start="187:28" pos:end="187:29">-&gt;</operator><name pos:start="187:30" pos:end="187:39">base_flags</name></name></expr></argument>, <argument pos:start="187:42" pos:end="187:45"><expr pos:start="187:42" pos:end="187:45"><name pos:start="187:42" pos:end="187:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:48"><expr pos:start="191:5" pos:end="191:47"><name pos:start="191:5" pos:end="191:14">overlay_bs</name> <operator pos:start="191:16" pos:end="191:16">=</operator> <call pos:start="191:18" pos:end="191:47"><name pos:start="191:18" pos:end="191:34">bdrv_find_overlay</name><argument_list pos:start="191:35" pos:end="191:47">(<argument pos:start="191:36" pos:end="191:41"><expr pos:start="191:36" pos:end="191:41"><name pos:start="191:36" pos:end="191:41">active</name></expr></argument>, <argument pos:start="191:44" pos:end="191:46"><expr pos:start="191:44" pos:end="191:46"><name pos:start="191:44" pos:end="191:46">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="197:5"><if pos:start="193:5" pos:end="197:5">if <condition pos:start="193:8" pos:end="193:74">(<expr pos:start="193:9" pos:end="193:73"><name pos:start="193:9" pos:end="193:18">overlay_bs</name> <operator pos:start="193:20" pos:end="193:21">&amp;&amp;</operator> <name pos:start="193:23" pos:end="193:43"><name pos:start="193:23" pos:end="193:23">s</name><operator pos:start="193:24" pos:end="193:25">-&gt;</operator><name pos:start="193:26" pos:end="193:43">orig_overlay_flags</name></name> <operator pos:start="193:45" pos:end="193:46">!=</operator> <call pos:start="193:48" pos:end="193:73"><name pos:start="193:48" pos:end="193:61">bdrv_get_flags</name><argument_list pos:start="193:62" pos:end="193:73">(<argument pos:start="193:63" pos:end="193:72"><expr pos:start="193:63" pos:end="193:72"><name pos:start="193:63" pos:end="193:72">overlay_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:76" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:61">

        <expr_stmt pos:start="195:9" pos:end="195:61"><expr pos:start="195:9" pos:end="195:60"><call pos:start="195:9" pos:end="195:60"><name pos:start="195:9" pos:end="195:19">bdrv_reopen</name><argument_list pos:start="195:20" pos:end="195:60">(<argument pos:start="195:21" pos:end="195:30"><expr pos:start="195:21" pos:end="195:30"><name pos:start="195:21" pos:end="195:30">overlay_bs</name></expr></argument>, <argument pos:start="195:33" pos:end="195:53"><expr pos:start="195:33" pos:end="195:53"><name pos:start="195:33" pos:end="195:53"><name pos:start="195:33" pos:end="195:33">s</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:53">orig_overlay_flags</name></name></expr></argument>, <argument pos:start="195:56" pos:end="195:59"><expr pos:start="195:56" pos:end="195:59"><name pos:start="195:56" pos:end="195:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:32"><expr pos:start="199:5" pos:end="199:31"><call pos:start="199:5" pos:end="199:31"><name pos:start="199:5" pos:end="199:10">g_free</name><argument_list pos:start="199:11" pos:end="199:31">(<argument pos:start="199:12" pos:end="199:30"><expr pos:start="199:12" pos:end="199:30"><name pos:start="199:12" pos:end="199:30"><name pos:start="199:12" pos:end="199:12">s</name><operator pos:start="199:13" pos:end="199:14">-&gt;</operator><name pos:start="199:15" pos:end="199:30">backing_file_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:41"><expr pos:start="201:5" pos:end="201:40"><call pos:start="201:5" pos:end="201:40"><name pos:start="201:5" pos:end="201:23">block_job_completed</name><argument_list pos:start="201:24" pos:end="201:40">(<argument pos:start="201:25" pos:end="201:34"><expr pos:start="201:25" pos:end="201:34"><operator pos:start="201:25" pos:end="201:25">&amp;</operator><name pos:start="201:26" pos:end="201:34"><name pos:start="201:26" pos:end="201:26">s</name><operator pos:start="201:27" pos:end="201:28">-&gt;</operator><name pos:start="201:29" pos:end="201:34">common</name></name></expr></argument>, <argument pos:start="201:37" pos:end="201:39"><expr pos:start="201:37" pos:end="201:39"><name pos:start="201:37" pos:end="201:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
