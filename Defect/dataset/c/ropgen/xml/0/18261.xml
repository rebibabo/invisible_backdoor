<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18261.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <modifier pos:start="1:20" pos:end="1:20">*</modifier></type><name pos:start="1:21" pos:end="1:43">host_from_stream_offset</name><parameter_list pos:start="1:44" pos:end="5:54">(<parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:52">QEMUFile</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">f</name></decl></parameter>,

                                            <parameter pos:start="3:45" pos:end="3:61"><decl pos:start="3:45" pos:end="3:61"><type pos:start="3:45" pos:end="3:61"><name pos:start="3:45" pos:end="3:54">ram_addr_t</name></type> <name pos:start="3:56" pos:end="3:61">offset</name></decl></parameter>,

                                            <parameter pos:start="5:45" pos:end="5:53"><decl pos:start="5:45" pos:end="5:53"><type pos:start="5:45" pos:end="5:53"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:53">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="61:1">{<block_content pos:start="9:5" pos:end="59:16">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:21"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <name pos:start="9:12" pos:end="9:19">RAMBlock</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:26">block</name> <init pos:start="9:28" pos:end="9:33">= <expr pos:start="9:30" pos:end="9:33"><name pos:start="9:30" pos:end="9:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:11">id</name><index pos:start="11:12" pos:end="11:16">[<expr pos:start="11:13" pos:end="11:15"><literal type="number" pos:start="11:13" pos:end="11:15">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:15">len</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="17:39">(<expr pos:start="17:9" pos:end="17:38"><name pos:start="17:9" pos:end="17:13">flags</name> <operator pos:start="17:15" pos:end="17:15">&amp;</operator> <name pos:start="17:17" pos:end="17:38">RAM_SAVE_FLAG_CONTINUE</name></expr>)</condition> <block pos:start="17:41" pos:end="31:5">{<block_content pos:start="19:9" pos:end="29:36">

        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:50">(<expr pos:start="19:13" pos:end="19:49"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:18">block</name> <operator pos:start="19:20" pos:end="19:21">||</operator> <name pos:start="19:23" pos:end="19:39"><name pos:start="19:23" pos:end="19:27">block</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:39">max_length</name></name> <operator pos:start="19:41" pos:end="19:42">&lt;=</operator> <name pos:start="19:44" pos:end="19:49">offset</name></expr>)</condition> <block pos:start="19:52" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:24">

            <expr_stmt pos:start="21:13" pos:end="21:55"><expr pos:start="21:13" pos:end="21:54"><call pos:start="21:13" pos:end="21:54"><name pos:start="21:13" pos:end="21:24">error_report</name><argument_list pos:start="21:25" pos:end="21:54">(<argument pos:start="21:26" pos:end="21:53"><expr pos:start="21:26" pos:end="21:53"><literal type="string" pos:start="21:26" pos:end="21:53">"Ack, bad migration stream!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="23:13" pos:end="23:24">return <expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <return pos:start="29:9" pos:end="29:36">return <expr pos:start="29:16" pos:end="29:35"><name pos:start="29:16" pos:end="29:26"><name pos:start="29:16" pos:end="29:20">block</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:26">host</name></name> <operator pos:start="29:28" pos:end="29:28">+</operator> <name pos:start="29:30" pos:end="29:35">offset</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:7">len</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:26"><name pos:start="35:11" pos:end="35:23">qemu_get_byte</name><argument_list pos:start="35:24" pos:end="35:26">(<argument pos:start="35:25" pos:end="35:25"><expr pos:start="35:25" pos:end="35:25"><name pos:start="35:25" pos:end="35:25">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:43"><expr pos:start="37:5" pos:end="37:42"><call pos:start="37:5" pos:end="37:42"><name pos:start="37:5" pos:end="37:19">qemu_get_buffer</name><argument_list pos:start="37:20" pos:end="37:42">(<argument pos:start="37:21" pos:end="37:21"><expr pos:start="37:21" pos:end="37:21"><name pos:start="37:21" pos:end="37:21">f</name></expr></argument>, <argument pos:start="37:24" pos:end="37:36"><expr pos:start="37:24" pos:end="37:36"><operator pos:start="37:24" pos:end="37:24">(</operator><name pos:start="37:25" pos:end="37:31">uint8_t</name> <operator pos:start="37:33" pos:end="37:33">*</operator><operator pos:start="37:34" pos:end="37:34">)</operator><name pos:start="37:35" pos:end="37:36">id</name></expr></argument>, <argument pos:start="37:39" pos:end="37:41"><expr pos:start="37:39" pos:end="37:41"><name pos:start="37:39" pos:end="37:41">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:11"><name pos:start="39:5" pos:end="39:6">id</name><index pos:start="39:7" pos:end="39:11">[<expr pos:start="39:8" pos:end="39:10"><name pos:start="39:8" pos:end="39:10">len</name></expr>]</index></name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</expr_stmt>



    <macro pos:start="43:5" pos:end="43:52"><name pos:start="43:5" pos:end="43:21">QLIST_FOREACH_RCU</name><argument_list pos:start="43:22" pos:end="43:52">(<argument pos:start="43:23" pos:end="43:27">block</argument>, <argument pos:start="43:30" pos:end="43:45">&amp;ram_list.blocks</argument>, <argument pos:start="43:48" pos:end="43:51">next</argument>)</argument_list></macro> <block pos:start="43:54" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:9">

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="47:39">(<expr pos:start="45:13" pos:end="47:38"><operator pos:start="45:13" pos:end="45:13">!</operator><call pos:start="45:14" pos:end="45:50"><name pos:start="45:14" pos:end="45:20">strncmp</name><argument_list pos:start="45:21" pos:end="45:50">(<argument pos:start="45:22" pos:end="45:23"><expr pos:start="45:22" pos:end="45:23"><name pos:start="45:22" pos:end="45:23">id</name></expr></argument>, <argument pos:start="45:26" pos:end="45:37"><expr pos:start="45:26" pos:end="45:37"><name pos:start="45:26" pos:end="45:37"><name pos:start="45:26" pos:end="45:30">block</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:37">idstr</name></name></expr></argument>, <argument pos:start="45:40" pos:end="45:49"><expr pos:start="45:40" pos:end="45:49"><sizeof pos:start="45:40" pos:end="45:49">sizeof<argument_list pos:start="45:46" pos:end="45:49">(<argument pos:start="45:47" pos:end="45:48"><expr pos:start="45:47" pos:end="45:48"><name pos:start="45:47" pos:end="45:48">id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="45:52" pos:end="45:53">&amp;&amp;</operator>

            <name pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:17">block</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:29">max_length</name></name> <operator pos:start="47:31" pos:end="47:31">&gt;</operator> <name pos:start="47:33" pos:end="47:38">offset</name></expr>)</condition> <block pos:start="47:41" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:40">

            <return pos:start="49:13" pos:end="49:40">return <expr pos:start="49:20" pos:end="49:39"><name pos:start="49:20" pos:end="49:30"><name pos:start="49:20" pos:end="49:24">block</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:30">host</name></name> <operator pos:start="49:32" pos:end="49:32">+</operator> <name pos:start="49:34" pos:end="49:39">offset</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><call pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:16">error_report</name><argument_list pos:start="57:17" pos:end="57:44">(<argument pos:start="57:18" pos:end="57:39"><expr pos:start="57:18" pos:end="57:39"><literal type="string" pos:start="57:18" pos:end="57:39">"Can't find block %s!"</literal></expr></argument>, <argument pos:start="57:42" pos:end="57:43"><expr pos:start="57:42" pos:end="57:43"><name pos:start="57:42" pos:end="57:43">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="59:5" pos:end="59:16">return <expr pos:start="59:12" pos:end="59:15"><name pos:start="59:12" pos:end="59:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
