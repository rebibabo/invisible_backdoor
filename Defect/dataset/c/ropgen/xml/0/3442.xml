<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3442.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">do_m68k_simcall</name><parameter_list pos:start="1:21" pos:end="1:47">(<parameter pos:start="1:22" pos:end="1:38"><decl pos:start="1:22" pos:end="1:38"><type pos:start="1:22" pos:end="1:38"><name pos:start="1:22" pos:end="1:33">CPUM68KState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">env</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:46"><decl pos:start="1:41" pos:end="1:46"><type pos:start="1:41" pos:end="1:46"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:46">nr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">uint32_t</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">args</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:43"><expr pos:start="9:5" pos:end="9:42"><name pos:start="9:5" pos:end="9:8">args</name> <operator pos:start="9:10" pos:end="9:10">=</operator> <operator pos:start="9:12" pos:end="9:12">(</operator><name pos:start="9:13" pos:end="9:20">uint32_t</name> <operator pos:start="9:22" pos:end="9:22">*</operator><operator pos:start="9:23" pos:end="9:23">)</operator><operator pos:start="9:24" pos:end="9:24">(</operator><name pos:start="9:25" pos:end="9:37"><name pos:start="9:25" pos:end="9:27">env</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:34">aregs</name><index pos:start="9:35" pos:end="9:37">[<expr pos:start="9:36" pos:end="9:36"><literal type="number" pos:start="9:36" pos:end="9:36">7</literal></expr>]</index></name> <operator pos:start="9:39" pos:end="9:39">+</operator> <literal type="number" pos:start="9:41" pos:end="9:41">4</literal><operator pos:start="9:42" pos:end="9:42">)</operator></expr>;</expr_stmt>

    <switch pos:start="11:5" pos:end="141:5">switch <condition pos:start="11:12" pos:end="11:15">(<expr pos:start="11:13" pos:end="11:14"><name pos:start="11:13" pos:end="11:14">nr</name></expr>)</condition> <block pos:start="11:17" pos:end="141:5">{<block_content pos:start="13:5" pos:end="139:64">

    <case pos:start="13:5" pos:end="13:18">case <expr pos:start="13:10" pos:end="13:17"><name pos:start="13:10" pos:end="13:17">SYS_EXIT</name></expr>:</case>

        <expr_stmt pos:start="15:9" pos:end="15:21"><expr pos:start="15:9" pos:end="15:20"><call pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:12">exit</name><argument_list pos:start="15:13" pos:end="15:20">(<argument pos:start="15:14" pos:end="15:19"><expr pos:start="15:14" pos:end="15:19"><call pos:start="15:14" pos:end="15:19"><name pos:start="15:14" pos:end="15:16">ARG</name><argument_list pos:start="15:17" pos:end="15:19">(<argument pos:start="15:18" pos:end="15:18"><expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <case pos:start="17:5" pos:end="17:18">case <expr pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:17">SYS_READ</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:61"><expr pos:start="19:9" pos:end="19:60"><call pos:start="19:9" pos:end="19:60"><name pos:start="19:9" pos:end="19:17">check_err</name><argument_list pos:start="19:18" pos:end="19:60">(<argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><name pos:start="19:19" pos:end="19:21">env</name></expr></argument>, <argument pos:start="19:24" pos:end="19:59"><expr pos:start="19:24" pos:end="19:59"><call pos:start="19:24" pos:end="19:59"><name pos:start="19:24" pos:end="19:27">read</name><argument_list pos:start="19:28" pos:end="19:59">(<argument pos:start="19:29" pos:end="19:34"><expr pos:start="19:29" pos:end="19:34"><call pos:start="19:29" pos:end="19:34"><name pos:start="19:29" pos:end="19:31">ARG</name><argument_list pos:start="19:32" pos:end="19:34">(<argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><literal type="number" pos:start="19:33" pos:end="19:33">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:37" pos:end="19:50"><expr pos:start="19:37" pos:end="19:50"><operator pos:start="19:37" pos:end="19:37">(</operator><name pos:start="19:38" pos:end="19:41">void</name> <operator pos:start="19:43" pos:end="19:43">*</operator><operator pos:start="19:44" pos:end="19:44">)</operator><call pos:start="19:45" pos:end="19:50"><name pos:start="19:45" pos:end="19:47">ARG</name><argument_list pos:start="19:48" pos:end="19:50">(<argument pos:start="19:49" pos:end="19:49"><expr pos:start="19:49" pos:end="19:49"><literal type="number" pos:start="19:49" pos:end="19:49">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:53" pos:end="19:58"><expr pos:start="19:53" pos:end="19:58"><call pos:start="19:53" pos:end="19:58"><name pos:start="19:53" pos:end="19:55">ARG</name><argument_list pos:start="19:56" pos:end="19:58">(<argument pos:start="19:57" pos:end="19:57"><expr pos:start="19:57" pos:end="19:57"><literal type="number" pos:start="19:57" pos:end="19:57">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:19">case <expr pos:start="23:10" pos:end="23:18"><name pos:start="23:10" pos:end="23:18">SYS_WRITE</name></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:62"><expr pos:start="25:9" pos:end="25:61"><call pos:start="25:9" pos:end="25:61"><name pos:start="25:9" pos:end="25:17">check_err</name><argument_list pos:start="25:18" pos:end="25:61">(<argument pos:start="25:19" pos:end="25:21"><expr pos:start="25:19" pos:end="25:21"><name pos:start="25:19" pos:end="25:21">env</name></expr></argument>, <argument pos:start="25:24" pos:end="25:60"><expr pos:start="25:24" pos:end="25:60"><call pos:start="25:24" pos:end="25:60"><name pos:start="25:24" pos:end="25:28">write</name><argument_list pos:start="25:29" pos:end="25:60">(<argument pos:start="25:30" pos:end="25:35"><expr pos:start="25:30" pos:end="25:35"><call pos:start="25:30" pos:end="25:35"><name pos:start="25:30" pos:end="25:32">ARG</name><argument_list pos:start="25:33" pos:end="25:35">(<argument pos:start="25:34" pos:end="25:34"><expr pos:start="25:34" pos:end="25:34"><literal type="number" pos:start="25:34" pos:end="25:34">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:38" pos:end="25:51"><expr pos:start="25:38" pos:end="25:51"><operator pos:start="25:38" pos:end="25:38">(</operator><name pos:start="25:39" pos:end="25:42">void</name> <operator pos:start="25:44" pos:end="25:44">*</operator><operator pos:start="25:45" pos:end="25:45">)</operator><call pos:start="25:46" pos:end="25:51"><name pos:start="25:46" pos:end="25:48">ARG</name><argument_list pos:start="25:49" pos:end="25:51">(<argument pos:start="25:50" pos:end="25:50"><expr pos:start="25:50" pos:end="25:50"><literal type="number" pos:start="25:50" pos:end="25:50">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:54" pos:end="25:59"><expr pos:start="25:54" pos:end="25:59"><call pos:start="25:54" pos:end="25:59"><name pos:start="25:54" pos:end="25:56">ARG</name><argument_list pos:start="25:57" pos:end="25:59">(<argument pos:start="25:58" pos:end="25:58"><expr pos:start="25:58" pos:end="25:58"><literal type="number" pos:start="25:58" pos:end="25:58">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:18">case <expr pos:start="29:10" pos:end="29:17"><name pos:start="29:10" pos:end="29:17">SYS_OPEN</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="33:37"><expr pos:start="31:9" pos:end="33:36"><call pos:start="31:9" pos:end="33:36"><name pos:start="31:9" pos:end="31:17">check_err</name><argument_list pos:start="31:18" pos:end="33:36">(<argument pos:start="31:19" pos:end="31:21"><expr pos:start="31:19" pos:end="31:21"><name pos:start="31:19" pos:end="31:21">env</name></expr></argument>, <argument pos:start="31:24" pos:end="33:35"><expr pos:start="31:24" pos:end="33:35"><call pos:start="31:24" pos:end="33:35"><name pos:start="31:24" pos:end="31:27">open</name><argument_list pos:start="31:28" pos:end="33:35">(<argument pos:start="31:29" pos:end="31:42"><expr pos:start="31:29" pos:end="31:42"><operator pos:start="31:29" pos:end="31:29">(</operator><name pos:start="31:30" pos:end="31:33">char</name> <operator pos:start="31:35" pos:end="31:35">*</operator><operator pos:start="31:36" pos:end="31:36">)</operator><call pos:start="31:37" pos:end="31:42"><name pos:start="31:37" pos:end="31:39">ARG</name><argument_list pos:start="31:40" pos:end="31:42">(<argument pos:start="31:41" pos:end="31:41"><expr pos:start="31:41" pos:end="31:41"><literal type="number" pos:start="31:41" pos:end="31:41">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:45" pos:end="31:71"><expr pos:start="31:45" pos:end="31:71"><call pos:start="31:45" pos:end="31:71"><name pos:start="31:45" pos:end="31:63">translate_openflags</name><argument_list pos:start="31:64" pos:end="31:71">(<argument pos:start="31:65" pos:end="31:70"><expr pos:start="31:65" pos:end="31:70"><call pos:start="31:65" pos:end="31:70"><name pos:start="31:65" pos:end="31:67">ARG</name><argument_list pos:start="31:68" pos:end="31:70">(<argument pos:start="31:69" pos:end="31:69"><expr pos:start="31:69" pos:end="31:69"><literal type="number" pos:start="31:69" pos:end="31:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="33:29" pos:end="33:34"><expr pos:start="33:29" pos:end="33:34"><call pos:start="33:29" pos:end="33:34"><name pos:start="33:29" pos:end="33:31">ARG</name><argument_list pos:start="33:32" pos:end="33:34">(<argument pos:start="33:33" pos:end="33:33"><expr pos:start="33:33" pos:end="33:33"><literal type="number" pos:start="33:33" pos:end="33:33">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:19">case <expr pos:start="37:10" pos:end="37:18"><name pos:start="37:10" pos:end="37:18">SYS_CLOSE</name></expr>:</case>

        <block pos:start="39:9" pos:end="55:9">{<block_content pos:start="43:13" pos:end="53:18">

            <comment type="block" pos:start="41:13" pos:end="41:58">/* Ignore attempts to close stdin/out/err.  */</comment>

            <decl_stmt pos:start="43:13" pos:end="43:28"><decl pos:start="43:13" pos:end="43:27"><type pos:start="43:13" pos:end="43:15"><name pos:start="43:13" pos:end="43:15">int</name></type> <name pos:start="43:17" pos:end="43:18">fd</name> <init pos:start="43:20" pos:end="43:27">= <expr pos:start="43:22" pos:end="43:27"><call pos:start="43:22" pos:end="43:27"><name pos:start="43:22" pos:end="43:24">ARG</name><argument_list pos:start="43:25" pos:end="43:27">(<argument pos:start="43:26" pos:end="43:26"><expr pos:start="43:26" pos:end="43:26"><literal type="number" pos:start="43:26" pos:end="43:26">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="45:13" pos:end="51:32"><if pos:start="45:13" pos:end="47:40">if <condition pos:start="45:16" pos:end="45:23">(<expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:18">fd</name> <operator pos:start="45:20" pos:end="45:20">&gt;</operator> <literal type="number" pos:start="45:22" pos:end="45:22">2</literal></expr>)</condition><block type="pseudo" pos:start="47:15" pos:end="47:40"><block_content pos:start="47:15" pos:end="47:40">

              <expr_stmt pos:start="47:15" pos:end="47:40"><expr pos:start="47:15" pos:end="47:39"><call pos:start="47:15" pos:end="47:39"><name pos:start="47:15" pos:end="47:23">check_err</name><argument_list pos:start="47:24" pos:end="47:39">(<argument pos:start="47:25" pos:end="47:27"><expr pos:start="47:25" pos:end="47:27"><name pos:start="47:25" pos:end="47:27">env</name></expr></argument>, <argument pos:start="47:30" pos:end="47:38"><expr pos:start="47:30" pos:end="47:38"><call pos:start="47:30" pos:end="47:38"><name pos:start="47:30" pos:end="47:34">close</name><argument_list pos:start="47:35" pos:end="47:38">(<argument pos:start="47:36" pos:end="47:37"><expr pos:start="47:36" pos:end="47:37"><name pos:start="47:36" pos:end="47:37">fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="49:13" pos:end="51:32">else<block type="pseudo" pos:start="51:15" pos:end="51:32"><block_content pos:start="51:15" pos:end="51:32">

              <expr_stmt pos:start="51:15" pos:end="51:32"><expr pos:start="51:15" pos:end="51:31"><call pos:start="51:15" pos:end="51:31"><name pos:start="51:15" pos:end="51:23">check_err</name><argument_list pos:start="51:24" pos:end="51:31">(<argument pos:start="51:25" pos:end="51:27"><expr pos:start="51:25" pos:end="51:27"><name pos:start="51:25" pos:end="51:27">env</name></expr></argument>, <argument pos:start="51:30" pos:end="51:30"><expr pos:start="51:30" pos:end="51:30"><literal type="number" pos:start="51:30" pos:end="51:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        </block_content>}</block>

    <case pos:start="57:5" pos:end="57:17">case <expr pos:start="57:10" pos:end="57:16"><name pos:start="57:10" pos:end="57:16">SYS_BRK</name></expr>:</case>

        <block pos:start="59:9" pos:end="73:9">{<block_content pos:start="61:13" pos:end="71:32">

            <decl_stmt pos:start="61:13" pos:end="61:24"><decl pos:start="61:13" pos:end="61:23"><type pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:19">int32_t</name></type> <name pos:start="61:21" pos:end="61:23">ret</name></decl>;</decl_stmt>



            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:40"><name pos:start="65:19" pos:end="65:24">do_brk</name><argument_list pos:start="65:25" pos:end="65:40">(<argument pos:start="65:26" pos:end="65:39"><expr pos:start="65:26" pos:end="65:39"><operator pos:start="65:26" pos:end="65:26">(</operator><name pos:start="65:27" pos:end="65:30">void</name> <operator pos:start="65:32" pos:end="65:32">*</operator><operator pos:start="65:33" pos:end="65:33">)</operator><call pos:start="65:34" pos:end="65:39"><name pos:start="65:34" pos:end="65:36">ARG</name><argument_list pos:start="65:37" pos:end="65:39">(<argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="69:25"><if pos:start="67:13" pos:end="69:25">if <condition pos:start="67:16" pos:end="67:31">(<expr pos:start="67:17" pos:end="67:30"><name pos:start="67:17" pos:end="67:19">ret</name> <operator pos:start="67:21" pos:end="67:22">==</operator> <operator pos:start="67:24" pos:end="67:24">-</operator><name pos:start="67:25" pos:end="67:30">ENOMEM</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:25"><block_content pos:start="69:17" pos:end="69:25">

                <expr_stmt pos:start="69:17" pos:end="69:25"><expr pos:start="69:17" pos:end="69:24"><name pos:start="69:17" pos:end="69:19">ret</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <operator pos:start="69:23" pos:end="69:23">-</operator><literal type="number" pos:start="69:24" pos:end="69:24">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:32"><expr pos:start="71:13" pos:end="71:31"><call pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:21">check_err</name><argument_list pos:start="71:22" pos:end="71:31">(<argument pos:start="71:23" pos:end="71:25"><expr pos:start="71:23" pos:end="71:25"><name pos:start="71:23" pos:end="71:25">env</name></expr></argument>, <argument pos:start="71:28" pos:end="71:30"><expr pos:start="71:28" pos:end="71:30"><name pos:start="71:28" pos:end="71:30">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:19">case <expr pos:start="77:10" pos:end="77:18"><name pos:start="77:10" pos:end="77:18">SYS_FSTAT</name></expr>:</case>

        <block pos:start="79:9" pos:end="121:9">{<block_content pos:start="81:13" pos:end="119:13">

            <decl_stmt pos:start="81:13" pos:end="81:26"><decl pos:start="81:13" pos:end="81:25"><type pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:18">struct</name> <name pos:start="81:20" pos:end="81:23">stat</name></name></type> <name pos:start="81:25" pos:end="81:25">s</name></decl>;</decl_stmt>

            <decl_stmt pos:start="83:13" pos:end="83:19"><decl pos:start="83:13" pos:end="83:18"><type pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">int</name></type> <name pos:start="83:17" pos:end="83:18">rc</name></decl>;</decl_stmt>

            <decl_stmt pos:start="85:13" pos:end="85:36"><decl pos:start="85:13" pos:end="85:35"><type pos:start="85:13" pos:end="85:34"><name pos:start="85:13" pos:end="85:32"><name pos:start="85:13" pos:end="85:18">struct</name> <name pos:start="85:20" pos:end="85:32">m86k_sim_stat</name></name> <modifier pos:start="85:34" pos:end="85:34">*</modifier></type><name pos:start="85:35" pos:end="85:35">p</name></decl>;</decl_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:51"><expr pos:start="87:13" pos:end="87:50"><name pos:start="87:13" pos:end="87:14">rc</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:50"><name pos:start="87:18" pos:end="87:26">check_err</name><argument_list pos:start="87:27" pos:end="87:50">(<argument pos:start="87:28" pos:end="87:30"><expr pos:start="87:28" pos:end="87:30"><name pos:start="87:28" pos:end="87:30">env</name></expr></argument>, <argument pos:start="87:33" pos:end="87:49"><expr pos:start="87:33" pos:end="87:49"><call pos:start="87:33" pos:end="87:49"><name pos:start="87:33" pos:end="87:37">fstat</name><argument_list pos:start="87:38" pos:end="87:49">(<argument pos:start="87:39" pos:end="87:44"><expr pos:start="87:39" pos:end="87:44"><call pos:start="87:39" pos:end="87:44"><name pos:start="87:39" pos:end="87:41">ARG</name><argument_list pos:start="87:42" pos:end="87:44">(<argument pos:start="87:43" pos:end="87:43"><expr pos:start="87:43" pos:end="87:43"><literal type="number" pos:start="87:43" pos:end="87:43">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:47" pos:end="87:48"><expr pos:start="87:47" pos:end="87:48"><operator pos:start="87:47" pos:end="87:47">&amp;</operator><name pos:start="87:48" pos:end="87:48">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="119:13"><if pos:start="89:13" pos:end="119:13">if <condition pos:start="89:16" pos:end="89:24">(<expr pos:start="89:17" pos:end="89:23"><name pos:start="89:17" pos:end="89:18">rc</name> <operator pos:start="89:20" pos:end="89:21">==</operator> <literal type="number" pos:start="89:23" pos:end="89:23">0</literal></expr>)</condition> <block pos:start="89:26" pos:end="119:13">{<block_content pos:start="91:17" pos:end="117:56">

                <expr_stmt pos:start="91:17" pos:end="91:51"><expr pos:start="91:17" pos:end="91:50"><name pos:start="91:17" pos:end="91:17">p</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <operator pos:start="91:21" pos:end="91:21">(</operator>struct <name pos:start="91:29" pos:end="91:41">m86k_sim_stat</name> <operator pos:start="91:43" pos:end="91:43">*</operator><operator pos:start="91:44" pos:end="91:44">)</operator><call pos:start="91:45" pos:end="91:50"><name pos:start="91:45" pos:end="91:47">ARG</name><argument_list pos:start="91:48" pos:end="91:50">(<argument pos:start="91:49" pos:end="91:49"><expr pos:start="91:49" pos:end="91:49"><literal type="number" pos:start="91:49" pos:end="91:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:50"><expr pos:start="93:17" pos:end="93:49"><name pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:17">p</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:29">sim_st_dev</name></name> <operator pos:start="93:31" pos:end="93:31">=</operator> <call pos:start="93:33" pos:end="93:49"><name pos:start="93:33" pos:end="93:39">tswap16</name><argument_list pos:start="93:40" pos:end="93:49">(<argument pos:start="93:41" pos:end="93:48"><expr pos:start="93:41" pos:end="93:48"><name pos:start="93:41" pos:end="93:48"><name pos:start="93:41" pos:end="93:41">s</name><operator pos:start="93:42" pos:end="93:42">.</operator><name pos:start="93:43" pos:end="93:48">st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:50"><expr pos:start="95:17" pos:end="95:49"><name pos:start="95:17" pos:end="95:29"><name pos:start="95:17" pos:end="95:17">p</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:29">sim_st_ino</name></name> <operator pos:start="95:31" pos:end="95:31">=</operator> <call pos:start="95:33" pos:end="95:49"><name pos:start="95:33" pos:end="95:39">tswap16</name><argument_list pos:start="95:40" pos:end="95:49">(<argument pos:start="95:41" pos:end="95:48"><expr pos:start="95:41" pos:end="95:48"><name pos:start="95:41" pos:end="95:48"><name pos:start="95:41" pos:end="95:41">s</name><operator pos:start="95:42" pos:end="95:42">.</operator><name pos:start="95:43" pos:end="95:48">st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:52"><expr pos:start="97:17" pos:end="97:51"><name pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:17">p</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:30">sim_st_mode</name></name> <operator pos:start="97:32" pos:end="97:32">=</operator> <call pos:start="97:34" pos:end="97:51"><name pos:start="97:34" pos:end="97:40">tswap32</name><argument_list pos:start="97:41" pos:end="97:51">(<argument pos:start="97:42" pos:end="97:50"><expr pos:start="97:42" pos:end="97:50"><name pos:start="97:42" pos:end="97:50"><name pos:start="97:42" pos:end="97:42">s</name><operator pos:start="97:43" pos:end="97:43">.</operator><name pos:start="97:44" pos:end="97:50">st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:54"><expr pos:start="99:17" pos:end="99:53"><name pos:start="99:17" pos:end="99:31"><name pos:start="99:17" pos:end="99:17">p</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:31">sim_st_nlink</name></name> <operator pos:start="99:33" pos:end="99:33">=</operator> <call pos:start="99:35" pos:end="99:53"><name pos:start="99:35" pos:end="99:41">tswap16</name><argument_list pos:start="99:42" pos:end="99:53">(<argument pos:start="99:43" pos:end="99:52"><expr pos:start="99:43" pos:end="99:52"><name pos:start="99:43" pos:end="99:52"><name pos:start="99:43" pos:end="99:43">s</name><operator pos:start="99:44" pos:end="99:44">.</operator><name pos:start="99:45" pos:end="99:52">st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:50"><expr pos:start="101:17" pos:end="101:49"><name pos:start="101:17" pos:end="101:29"><name pos:start="101:17" pos:end="101:17">p</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:29">sim_st_uid</name></name> <operator pos:start="101:31" pos:end="101:31">=</operator> <call pos:start="101:33" pos:end="101:49"><name pos:start="101:33" pos:end="101:39">tswap16</name><argument_list pos:start="101:40" pos:end="101:49">(<argument pos:start="101:41" pos:end="101:48"><expr pos:start="101:41" pos:end="101:48"><name pos:start="101:41" pos:end="101:48"><name pos:start="101:41" pos:end="101:41">s</name><operator pos:start="101:42" pos:end="101:42">.</operator><name pos:start="101:43" pos:end="101:48">st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:50"><expr pos:start="103:17" pos:end="103:49"><name pos:start="103:17" pos:end="103:29"><name pos:start="103:17" pos:end="103:17">p</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:29">sim_st_gid</name></name> <operator pos:start="103:31" pos:end="103:31">=</operator> <call pos:start="103:33" pos:end="103:49"><name pos:start="103:33" pos:end="103:39">tswap16</name><argument_list pos:start="103:40" pos:end="103:49">(<argument pos:start="103:41" pos:end="103:48"><expr pos:start="103:41" pos:end="103:48"><name pos:start="103:41" pos:end="103:48"><name pos:start="103:41" pos:end="103:41">s</name><operator pos:start="103:42" pos:end="103:42">.</operator><name pos:start="103:43" pos:end="103:48">st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:52"><expr pos:start="105:17" pos:end="105:51"><name pos:start="105:17" pos:end="105:30"><name pos:start="105:17" pos:end="105:17">p</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:30">sim_st_rdev</name></name> <operator pos:start="105:32" pos:end="105:32">=</operator> <call pos:start="105:34" pos:end="105:51"><name pos:start="105:34" pos:end="105:40">tswap16</name><argument_list pos:start="105:41" pos:end="105:51">(<argument pos:start="105:42" pos:end="105:50"><expr pos:start="105:42" pos:end="105:50"><name pos:start="105:42" pos:end="105:50"><name pos:start="105:42" pos:end="105:42">s</name><operator pos:start="105:43" pos:end="105:43">.</operator><name pos:start="105:44" pos:end="105:50">st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:52"><expr pos:start="107:17" pos:end="107:51"><name pos:start="107:17" pos:end="107:30"><name pos:start="107:17" pos:end="107:17">p</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:30">sim_st_size</name></name> <operator pos:start="107:32" pos:end="107:32">=</operator> <call pos:start="107:34" pos:end="107:51"><name pos:start="107:34" pos:end="107:40">tswap32</name><argument_list pos:start="107:41" pos:end="107:51">(<argument pos:start="107:42" pos:end="107:50"><expr pos:start="107:42" pos:end="107:50"><name pos:start="107:42" pos:end="107:50"><name pos:start="107:42" pos:end="107:42">s</name><operator pos:start="107:43" pos:end="107:43">.</operator><name pos:start="107:44" pos:end="107:50">st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:54"><expr pos:start="109:17" pos:end="109:53"><name pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:17">p</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:31">sim_st_atime</name></name> <operator pos:start="109:33" pos:end="109:33">=</operator> <call pos:start="109:35" pos:end="109:53"><name pos:start="109:35" pos:end="109:41">tswap32</name><argument_list pos:start="109:42" pos:end="109:53">(<argument pos:start="109:43" pos:end="109:52"><expr pos:start="109:43" pos:end="109:52"><name pos:start="109:43" pos:end="109:52"><name pos:start="109:43" pos:end="109:43">s</name><operator pos:start="109:44" pos:end="109:44">.</operator><name pos:start="109:45" pos:end="109:52">st_atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:54"><expr pos:start="111:17" pos:end="111:53"><name pos:start="111:17" pos:end="111:31"><name pos:start="111:17" pos:end="111:17">p</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:31">sim_st_mtime</name></name> <operator pos:start="111:33" pos:end="111:33">=</operator> <call pos:start="111:35" pos:end="111:53"><name pos:start="111:35" pos:end="111:41">tswap32</name><argument_list pos:start="111:42" pos:end="111:53">(<argument pos:start="111:43" pos:end="111:52"><expr pos:start="111:43" pos:end="111:52"><name pos:start="111:43" pos:end="111:52"><name pos:start="111:43" pos:end="111:43">s</name><operator pos:start="111:44" pos:end="111:44">.</operator><name pos:start="111:45" pos:end="111:52">st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:54"><expr pos:start="113:17" pos:end="113:53"><name pos:start="113:17" pos:end="113:31"><name pos:start="113:17" pos:end="113:17">p</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:31">sim_st_ctime</name></name> <operator pos:start="113:33" pos:end="113:33">=</operator> <call pos:start="113:35" pos:end="113:53"><name pos:start="113:35" pos:end="113:41">tswap32</name><argument_list pos:start="113:42" pos:end="113:53">(<argument pos:start="113:43" pos:end="113:52"><expr pos:start="113:43" pos:end="113:52"><name pos:start="113:43" pos:end="113:52"><name pos:start="113:43" pos:end="113:43">s</name><operator pos:start="113:44" pos:end="113:44">.</operator><name pos:start="113:45" pos:end="113:52">st_ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:58"><expr pos:start="115:17" pos:end="115:57"><name pos:start="115:17" pos:end="115:33"><name pos:start="115:17" pos:end="115:17">p</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:33">sim_st_blksize</name></name> <operator pos:start="115:35" pos:end="115:35">=</operator> <call pos:start="115:37" pos:end="115:57"><name pos:start="115:37" pos:end="115:43">tswap32</name><argument_list pos:start="115:44" pos:end="115:57">(<argument pos:start="115:45" pos:end="115:56"><expr pos:start="115:45" pos:end="115:56"><name pos:start="115:45" pos:end="115:56"><name pos:start="115:45" pos:end="115:45">s</name><operator pos:start="115:46" pos:end="115:46">.</operator><name pos:start="115:47" pos:end="115:56">st_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:56"><expr pos:start="117:17" pos:end="117:55"><name pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:17">p</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:32">sim_st_blocks</name></name> <operator pos:start="117:34" pos:end="117:34">=</operator> <call pos:start="117:36" pos:end="117:55"><name pos:start="117:36" pos:end="117:42">tswap32</name><argument_list pos:start="117:43" pos:end="117:55">(<argument pos:start="117:44" pos:end="117:54"><expr pos:start="117:44" pos:end="117:54"><name pos:start="117:44" pos:end="117:54"><name pos:start="117:44" pos:end="117:44">s</name><operator pos:start="117:45" pos:end="117:45">.</operator><name pos:start="117:46" pos:end="117:54">st_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <case pos:start="125:5" pos:end="125:20">case <expr pos:start="125:10" pos:end="125:19"><name pos:start="125:10" pos:end="125:19">SYS_ISATTY</name></expr>:</case>

        <expr_stmt pos:start="127:9" pos:end="127:39"><expr pos:start="127:9" pos:end="127:38"><call pos:start="127:9" pos:end="127:38"><name pos:start="127:9" pos:end="127:17">check_err</name><argument_list pos:start="127:18" pos:end="127:38">(<argument pos:start="127:19" pos:end="127:21"><expr pos:start="127:19" pos:end="127:21"><name pos:start="127:19" pos:end="127:21">env</name></expr></argument>, <argument pos:start="127:24" pos:end="127:37"><expr pos:start="127:24" pos:end="127:37"><call pos:start="127:24" pos:end="127:37"><name pos:start="127:24" pos:end="127:29">isatty</name><argument_list pos:start="127:30" pos:end="127:37">(<argument pos:start="127:31" pos:end="127:36"><expr pos:start="127:31" pos:end="127:36"><call pos:start="127:31" pos:end="127:36"><name pos:start="127:31" pos:end="127:33">ARG</name><argument_list pos:start="127:34" pos:end="127:36">(<argument pos:start="127:35" pos:end="127:35"><expr pos:start="127:35" pos:end="127:35"><literal type="number" pos:start="127:35" pos:end="127:35">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <case pos:start="131:5" pos:end="131:19">case <expr pos:start="131:10" pos:end="131:18"><name pos:start="131:10" pos:end="131:18">SYS_LSEEK</name></expr>:</case>

        <expr_stmt pos:start="133:9" pos:end="133:63"><expr pos:start="133:9" pos:end="133:62"><call pos:start="133:9" pos:end="133:62"><name pos:start="133:9" pos:end="133:17">check_err</name><argument_list pos:start="133:18" pos:end="133:62">(<argument pos:start="133:19" pos:end="133:21"><expr pos:start="133:19" pos:end="133:21"><name pos:start="133:19" pos:end="133:21">env</name></expr></argument>, <argument pos:start="133:24" pos:end="133:61"><expr pos:start="133:24" pos:end="133:61"><call pos:start="133:24" pos:end="133:61"><name pos:start="133:24" pos:end="133:28">lseek</name><argument_list pos:start="133:29" pos:end="133:61">(<argument pos:start="133:30" pos:end="133:35"><expr pos:start="133:30" pos:end="133:35"><call pos:start="133:30" pos:end="133:35"><name pos:start="133:30" pos:end="133:32">ARG</name><argument_list pos:start="133:33" pos:end="133:35">(<argument pos:start="133:34" pos:end="133:34"><expr pos:start="133:34" pos:end="133:34"><literal type="number" pos:start="133:34" pos:end="133:34">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="133:38" pos:end="133:52"><expr pos:start="133:38" pos:end="133:52"><operator pos:start="133:38" pos:end="133:38">(</operator><name pos:start="133:39" pos:end="133:45">int32_t</name><operator pos:start="133:46" pos:end="133:46">)</operator><call pos:start="133:47" pos:end="133:52"><name pos:start="133:47" pos:end="133:49">ARG</name><argument_list pos:start="133:50" pos:end="133:52">(<argument pos:start="133:51" pos:end="133:51"><expr pos:start="133:51" pos:end="133:51"><literal type="number" pos:start="133:51" pos:end="133:51">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="133:55" pos:end="133:60"><expr pos:start="133:55" pos:end="133:60"><call pos:start="133:55" pos:end="133:60"><name pos:start="133:55" pos:end="133:57">ARG</name><argument_list pos:start="133:58" pos:end="133:60">(<argument pos:start="133:59" pos:end="133:59"><expr pos:start="133:59" pos:end="133:59"><literal type="number" pos:start="133:59" pos:end="133:59">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <default pos:start="137:5" pos:end="137:12">default:</default>

        <expr_stmt pos:start="139:9" pos:end="139:64"><expr pos:start="139:9" pos:end="139:63"><call pos:start="139:9" pos:end="139:63"><name pos:start="139:9" pos:end="139:17">cpu_abort</name><argument_list pos:start="139:18" pos:end="139:63">(<argument pos:start="139:19" pos:end="139:21"><expr pos:start="139:19" pos:end="139:21"><name pos:start="139:19" pos:end="139:21">env</name></expr></argument>, <argument pos:start="139:24" pos:end="139:58"><expr pos:start="139:24" pos:end="139:58"><literal type="string" pos:start="139:24" pos:end="139:58">"Unsupported m68k sim syscall %d\n"</literal></expr></argument>, <argument pos:start="139:61" pos:end="139:62"><expr pos:start="139:61" pos:end="139:62"><name pos:start="139:61" pos:end="139:62">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
