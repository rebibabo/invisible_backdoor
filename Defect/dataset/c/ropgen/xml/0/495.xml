<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/495.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">rtl8139_write_buffer</name><parameter_list pos:start="1:33" pos:end="1:76">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:45">RTL8139State</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">buf</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:75"><decl pos:start="1:68" pos:end="1:75"><type pos:start="1:68" pos:end="1:75"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:75">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:25">

    <if_stmt pos:start="5:5" pos:end="55:5"><if pos:start="5:5" pos:end="55:5">if <condition pos:start="5:8" pos:end="5:46">(<expr pos:start="5:9" pos:end="5:45"><name pos:start="5:9" pos:end="5:20"><name pos:start="5:9" pos:end="5:9">s</name><operator pos:start="5:10" pos:end="5:11">-&gt;</operator><name pos:start="5:12" pos:end="5:20">RxBufAddr</name></name> <operator pos:start="5:22" pos:end="5:22">+</operator> <name pos:start="5:24" pos:end="5:27">size</name> <operator pos:start="5:29" pos:end="5:29">&gt;</operator> <name pos:start="5:31" pos:end="5:45"><name pos:start="5:31" pos:end="5:31">s</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:45">RxBufferSize</name></name></expr>)</condition>

    <block pos:start="7:5" pos:end="55:5">{<block_content pos:start="9:9" pos:end="53:9">

        <decl_stmt pos:start="9:9" pos:end="9:65"><decl pos:start="9:9" pos:end="9:64"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:19">wrapped</name> <init pos:start="9:21" pos:end="9:64">= <expr pos:start="9:23" pos:end="9:64"><call pos:start="9:23" pos:end="9:64"><name pos:start="9:23" pos:end="9:26">MOD2</name><argument_list pos:start="9:27" pos:end="9:64">(<argument pos:start="9:28" pos:end="9:46"><expr pos:start="9:28" pos:end="9:46"><name pos:start="9:28" pos:end="9:39"><name pos:start="9:28" pos:end="9:28">s</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:39">RxBufAddr</name></name> <operator pos:start="9:41" pos:end="9:41">+</operator> <name pos:start="9:43" pos:end="9:46">size</name></expr></argument>, <argument pos:start="9:49" pos:end="9:63"><expr pos:start="9:49" pos:end="9:63"><name pos:start="9:49" pos:end="9:63"><name pos:start="9:49" pos:end="9:49">s</name><operator pos:start="9:50" pos:end="9:51">-&gt;</operator><name pos:start="9:52" pos:end="9:63">RxBufferSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="13:9" pos:end="13:31">/* write packet data */</comment>

        <if_stmt pos:start="15:9" pos:end="53:9"><if pos:start="15:9" pos:end="53:9">if <condition pos:start="15:12" pos:end="15:69">(<expr pos:start="15:13" pos:end="15:68"><name pos:start="15:13" pos:end="15:19">wrapped</name> <operator pos:start="15:21" pos:end="15:22">&amp;&amp;</operator> <name pos:start="15:24" pos:end="15:38"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:38">RxBufferSize</name></name> <operator pos:start="15:40" pos:end="15:40">&lt;</operator> <literal type="number" pos:start="15:42" pos:end="15:46">65536</literal> <operator pos:start="15:48" pos:end="15:49">&amp;&amp;</operator> <operator pos:start="15:51" pos:end="15:51">!</operator><call pos:start="15:52" pos:end="15:68"><name pos:start="15:52" pos:end="15:65">rtl8139_RxWrap</name><argument_list pos:start="15:66" pos:end="15:68">(<argument pos:start="15:67" pos:end="15:67"><expr pos:start="15:67" pos:end="15:67"><name pos:start="15:67" pos:end="15:67">s</name></expr></argument>)</argument_list></call></expr>)</condition>

        <block pos:start="17:9" pos:end="53:9">{<block_content pos:start="19:13" pos:end="51:19">

            <expr_stmt pos:start="19:13" pos:end="19:92"><expr pos:start="19:13" pos:end="19:91"><call pos:start="19:13" pos:end="19:91"><name pos:start="19:13" pos:end="19:23">DEBUG_PRINT</name><argument_list pos:start="19:24" pos:end="19:91">(<argument pos:start="19:25" pos:end="19:90"><expr pos:start="19:25" pos:end="19:90"><operator pos:start="19:25" pos:end="19:25">(</operator><literal type="string" pos:start="19:26" pos:end="19:75">"&gt;&gt;&gt; RTL8139: rx packet wrapped in buffer at %d\n"</literal><operator pos:start="19:76" pos:end="19:76">,</operator> <name pos:start="19:78" pos:end="19:81">size</name><operator pos:start="19:82" pos:end="19:82">-</operator><name pos:start="19:83" pos:end="19:89">wrapped</name><operator pos:start="19:90" pos:end="19:90">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="23:13" pos:end="31:13"><if pos:start="23:13" pos:end="31:13">if <condition pos:start="23:16" pos:end="23:31">(<expr pos:start="23:17" pos:end="23:30"><name pos:start="23:17" pos:end="23:20">size</name> <operator pos:start="23:22" pos:end="23:22">&gt;</operator> <name pos:start="23:24" pos:end="23:30">wrapped</name></expr>)</condition>

            <block pos:start="25:13" pos:end="31:13">{<block_content pos:start="27:17" pos:end="29:63">

                <expr_stmt pos:start="27:17" pos:end="29:63"><expr pos:start="27:17" pos:end="29:62"><call pos:start="27:17" pos:end="29:62"><name pos:start="27:17" pos:end="27:41">cpu_physical_memory_write</name><argument_list pos:start="27:42" pos:end="29:62">( <argument pos:start="27:44" pos:end="27:66"><expr pos:start="27:44" pos:end="27:66"><name pos:start="27:44" pos:end="27:51"><name pos:start="27:44" pos:end="27:44">s</name><operator pos:start="27:45" pos:end="27:46">-&gt;</operator><name pos:start="27:47" pos:end="27:51">RxBuf</name></name> <operator pos:start="27:53" pos:end="27:53">+</operator> <name pos:start="27:55" pos:end="27:66"><name pos:start="27:55" pos:end="27:55">s</name><operator pos:start="27:56" pos:end="27:57">-&gt;</operator><name pos:start="27:58" pos:end="27:66">RxBufAddr</name></name></expr></argument>,

                                           <argument pos:start="29:44" pos:end="29:46"><expr pos:start="29:44" pos:end="29:46"><name pos:start="29:44" pos:end="29:46">buf</name></expr></argument>, <argument pos:start="29:49" pos:end="29:60"><expr pos:start="29:49" pos:end="29:60"><name pos:start="29:49" pos:end="29:52">size</name><operator pos:start="29:53" pos:end="29:53">-</operator><name pos:start="29:54" pos:end="29:60">wrapped</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="35:13" pos:end="35:38">/* reset buffer pointer */</comment>

            <expr_stmt pos:start="37:13" pos:end="37:29"><expr pos:start="37:13" pos:end="37:28"><name pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:24">RxBufAddr</name></name> <operator pos:start="37:26" pos:end="37:26">=</operator> <literal type="number" pos:start="37:28" pos:end="37:28">0</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="41:13" pos:end="43:71"><expr pos:start="41:13" pos:end="43:70"><call pos:start="41:13" pos:end="43:70"><name pos:start="41:13" pos:end="41:37">cpu_physical_memory_write</name><argument_list pos:start="41:38" pos:end="43:70">( <argument pos:start="41:40" pos:end="41:62"><expr pos:start="41:40" pos:end="41:62"><name pos:start="41:40" pos:end="41:47"><name pos:start="41:40" pos:end="41:40">s</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:47">RxBuf</name></name> <operator pos:start="41:49" pos:end="41:49">+</operator> <name pos:start="41:51" pos:end="41:62"><name pos:start="41:51" pos:end="41:51">s</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:62">RxBufAddr</name></name></expr></argument>,

                                       <argument pos:start="43:40" pos:end="43:59"><expr pos:start="43:40" pos:end="43:59"><name pos:start="43:40" pos:end="43:42">buf</name> <operator pos:start="43:44" pos:end="43:44">+</operator> <operator pos:start="43:46" pos:end="43:46">(</operator><name pos:start="43:47" pos:end="43:50">size</name><operator pos:start="43:51" pos:end="43:51">-</operator><name pos:start="43:52" pos:end="43:58">wrapped</name><operator pos:start="43:59" pos:end="43:59">)</operator></expr></argument>, <argument pos:start="43:62" pos:end="43:68"><expr pos:start="43:62" pos:end="43:68"><name pos:start="43:62" pos:end="43:68">wrapped</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:24">RxBufAddr</name></name> <operator pos:start="47:26" pos:end="47:26">=</operator> <name pos:start="47:28" pos:end="47:34">wrapped</name></expr>;</expr_stmt>



            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:51">/* non-wrapping path or overwrapping enabled */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:68"><expr pos:start="61:5" pos:end="61:67"><call pos:start="61:5" pos:end="61:67"><name pos:start="61:5" pos:end="61:29">cpu_physical_memory_write</name><argument_list pos:start="61:30" pos:end="61:67">( <argument pos:start="61:32" pos:end="61:54"><expr pos:start="61:32" pos:end="61:54"><name pos:start="61:32" pos:end="61:39"><name pos:start="61:32" pos:end="61:32">s</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:39">RxBuf</name></name> <operator pos:start="61:41" pos:end="61:41">+</operator> <name pos:start="61:43" pos:end="61:54"><name pos:start="61:43" pos:end="61:43">s</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:54">RxBufAddr</name></name></expr></argument>, <argument pos:start="61:57" pos:end="61:59"><expr pos:start="61:57" pos:end="61:59"><name pos:start="61:57" pos:end="61:59">buf</name></expr></argument>, <argument pos:start="61:62" pos:end="61:65"><expr pos:start="61:62" pos:end="61:65"><name pos:start="61:62" pos:end="61:65">size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:16">RxBufAddr</name></name> <operator pos:start="65:18" pos:end="65:19">+=</operator> <name pos:start="65:21" pos:end="65:24">size</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
