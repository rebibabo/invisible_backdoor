<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15913.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">backup_run</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="223:1">{<block_content pos:start="5:5" pos:end="221:70">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BackupBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">job</name> <init pos:start="5:25" pos:end="5:32">= <expr pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">BackupCompleteData</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:41">= <expr pos:start="9:28" pos:end="9:41"><name pos:start="9:28" pos:end="9:41"><name pos:start="9:28" pos:end="9:30">job</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:38">common</name><operator pos:start="9:39" pos:end="9:39">.</operator><name pos:start="9:40" pos:end="9:41">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:28">target</name> <init pos:start="11:30" pos:end="11:42">= <expr pos:start="11:32" pos:end="11:42"><name pos:start="11:32" pos:end="11:42"><name pos:start="11:32" pos:end="11:34">job</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:42">target</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19">BlockdevOnError</name></type> <name pos:start="13:21" pos:end="13:35">on_target_error</name> <init pos:start="13:37" pos:end="13:58">= <expr pos:start="13:39" pos:end="13:58"><name pos:start="13:39" pos:end="13:58"><name pos:start="13:39" pos:end="13:41">job</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">on_target_error</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="19:6"><decl pos:start="15:5" pos:end="19:5"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">NotifierWithReturn</name></type> <name pos:start="15:24" pos:end="15:35">before_write</name> <init pos:start="15:37" pos:end="19:5">= <expr pos:start="15:39" pos:end="19:5"><block pos:start="15:39" pos:end="19:5">{

        <expr pos:start="17:9" pos:end="17:44"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:15">notify</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <name pos:start="17:19" pos:end="17:44">backup_before_write_notify</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:17">start</name></decl>, <decl pos:start="21:20" pos:end="21:22"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:20" pos:end="21:22">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:60"><decl pos:start="23:5" pos:end="23:59"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:31">sectors_per_cluster</name> <init pos:start="23:33" pos:end="23:59">= <expr pos:start="23:35" pos:end="23:59"><call pos:start="23:35" pos:end="23:59"><name pos:start="23:35" pos:end="23:54">cluster_size_sectors</name><argument_list pos:start="23:55" pos:end="23:59">(<argument pos:start="23:56" pos:end="23:58"><expr pos:start="23:56" pos:end="23:58"><name pos:start="23:56" pos:end="23:58">job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name> <init pos:start="25:13" pos:end="25:15">= <expr pos:start="25:15" pos:end="25:15"><literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:36"><expr pos:start="29:5" pos:end="29:35"><call pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:14">QLIST_INIT</name><argument_list pos:start="29:15" pos:end="29:35">(<argument pos:start="29:16" pos:end="29:34"><expr pos:start="29:16" pos:end="29:34"><operator pos:start="29:16" pos:end="29:16">&amp;</operator><name pos:start="29:17" pos:end="29:34"><name pos:start="29:17" pos:end="29:19">job</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:34">inflight_reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><call pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:23">qemu_co_rwlock_init</name><argument_list pos:start="31:24" pos:end="31:43">(<argument pos:start="31:25" pos:end="31:42"><expr pos:start="31:25" pos:end="31:42"><operator pos:start="31:25" pos:end="31:25">&amp;</operator><name pos:start="31:26" pos:end="31:42"><name pos:start="31:26" pos:end="31:28">job</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:42">flush_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:14"><expr pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:9">start</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <literal type="number" pos:start="35:13" pos:end="35:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:59"><expr pos:start="37:5" pos:end="37:58"><name pos:start="37:5" pos:end="37:7">end</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:58"><name pos:start="37:11" pos:end="37:22">DIV_ROUND_UP</name><argument_list pos:start="37:23" pos:end="37:58">(<argument pos:start="37:24" pos:end="37:38"><expr pos:start="37:24" pos:end="37:38"><name pos:start="37:24" pos:end="37:38"><name pos:start="37:24" pos:end="37:26">job</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:34">common</name><operator pos:start="37:35" pos:end="37:35">.</operator><name pos:start="37:36" pos:end="37:38">len</name></name></expr></argument>, <argument pos:start="37:41" pos:end="37:57"><expr pos:start="37:41" pos:end="37:57"><name pos:start="37:41" pos:end="37:57"><name pos:start="37:41" pos:end="37:43">job</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:57">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:7">job</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:15">bitmap</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:39"><name pos:start="41:19" pos:end="41:31">hbitmap_alloc</name><argument_list pos:start="41:32" pos:end="41:39">(<argument pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:35">end</name></expr></argument>, <argument pos:start="41:38" pos:end="41:38"><expr pos:start="41:38" pos:end="41:38"><literal type="number" pos:start="41:38" pos:end="41:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><call pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:31">bdrv_set_enable_write_cache</name><argument_list pos:start="45:32" pos:end="45:45">(<argument pos:start="45:33" pos:end="45:38"><expr pos:start="45:33" pos:end="45:38"><name pos:start="45:33" pos:end="45:38">target</name></expr></argument>, <argument pos:start="45:41" pos:end="45:44"><expr pos:start="45:41" pos:end="45:44"><name pos:start="45:41" pos:end="45:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:20">(<expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:14">target</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:19">blk</name></name></expr>)</condition> <block pos:start="47:22" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:41">

        <expr_stmt pos:start="49:9" pos:end="49:72"><expr pos:start="49:9" pos:end="49:71"><call pos:start="49:9" pos:end="49:71"><name pos:start="49:9" pos:end="49:24">blk_set_on_error</name><argument_list pos:start="49:25" pos:end="49:71">(<argument pos:start="49:26" pos:end="49:36"><expr pos:start="49:26" pos:end="49:36"><name pos:start="49:26" pos:end="49:36"><name pos:start="49:26" pos:end="49:31">target</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:36">blk</name></name></expr></argument>, <argument pos:start="49:39" pos:end="49:53"><expr pos:start="49:39" pos:end="49:53"><name pos:start="49:39" pos:end="49:53">on_target_error</name></expr></argument>, <argument pos:start="49:56" pos:end="49:70"><expr pos:start="49:56" pos:end="49:70"><name pos:start="49:56" pos:end="49:70">on_target_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><call pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:27">blk_iostatus_enable</name><argument_list pos:start="51:28" pos:end="51:40">(<argument pos:start="51:29" pos:end="51:39"><expr pos:start="51:29" pos:end="51:39"><name pos:start="51:29" pos:end="51:39"><name pos:start="51:29" pos:end="51:34">target</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:39">blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:54"><expr pos:start="57:5" pos:end="57:53"><call pos:start="57:5" pos:end="57:53"><name pos:start="57:5" pos:end="57:34">bdrv_add_before_write_notifier</name><argument_list pos:start="57:35" pos:end="57:53">(<argument pos:start="57:36" pos:end="57:37"><expr pos:start="57:36" pos:end="57:37"><name pos:start="57:36" pos:end="57:37">bs</name></expr></argument>, <argument pos:start="57:40" pos:end="57:52"><expr pos:start="57:40" pos:end="57:52"><operator pos:start="57:40" pos:end="57:40">&amp;</operator><name pos:start="57:41" pos:end="57:52">before_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="189:5"><if pos:start="61:5" pos:end="77:5">if <condition pos:start="61:8" pos:end="61:48">(<expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:11">job</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:22">sync_mode</name></name> <operator pos:start="61:24" pos:end="61:25">==</operator> <name pos:start="61:27" pos:end="61:47">MIRROR_SYNC_MODE_NONE</name></expr>)</condition> <block pos:start="61:50" pos:end="77:5">{<block_content pos:start="63:9" pos:end="75:9">

        <while pos:start="63:9" pos:end="75:9">while <condition pos:start="63:15" pos:end="63:53">(<expr pos:start="63:16" pos:end="63:52"><operator pos:start="63:16" pos:end="63:16">!</operator><call pos:start="63:17" pos:end="63:52"><name pos:start="63:17" pos:end="63:38">block_job_is_cancelled</name><argument_list pos:start="63:39" pos:end="63:52">(<argument pos:start="63:40" pos:end="63:51"><expr pos:start="63:40" pos:end="63:51"><operator pos:start="63:40" pos:end="63:40">&amp;</operator><name pos:start="63:41" pos:end="63:51"><name pos:start="63:41" pos:end="63:43">job</name><operator pos:start="63:44" pos:end="63:45">-&gt;</operator><name pos:start="63:46" pos:end="63:51">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:55" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:36">

            <comment type="block" pos:start="65:13" pos:end="67:55">/* Yield until the job is cancelled.  We just let our before_write

             * notify callback service CoW requests. */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:37"><expr pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:28"><name pos:start="69:13" pos:end="69:15">job</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:23">common</name><operator pos:start="69:24" pos:end="69:24">.</operator><name pos:start="69:25" pos:end="69:28">busy</name></name> <operator pos:start="69:30" pos:end="69:30">=</operator> <name pos:start="69:32" pos:end="69:36">false</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:35"><expr pos:start="71:13" pos:end="71:34"><call pos:start="71:13" pos:end="71:34"><name pos:start="71:13" pos:end="71:32">qemu_coroutine_yield</name><argument_list pos:start="71:33" pos:end="71:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:36"><expr pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:15">job</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:23">common</name><operator pos:start="73:24" pos:end="73:24">.</operator><name pos:start="73:25" pos:end="73:28">busy</name></name> <operator pos:start="73:30" pos:end="73:30">=</operator> <name pos:start="73:32" pos:end="73:35">true</name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="81:5">else if <condition pos:start="77:15" pos:end="77:62">(<expr pos:start="77:16" pos:end="77:61"><name pos:start="77:16" pos:end="77:29"><name pos:start="77:16" pos:end="77:18">job</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:29">sync_mode</name></name> <operator pos:start="77:31" pos:end="77:32">==</operator> <name pos:start="77:34" pos:end="77:61">MIRROR_SYNC_MODE_INCREMENTAL</name></expr>)</condition> <block pos:start="77:64" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:42">

        <expr_stmt pos:start="79:9" pos:end="79:42"><expr pos:start="79:9" pos:end="79:41"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:41"><name pos:start="79:15" pos:end="79:36">backup_run_incremental</name><argument_list pos:start="79:37" pos:end="79:41">(<argument pos:start="79:38" pos:end="79:40"><expr pos:start="79:38" pos:end="79:40"><name pos:start="79:38" pos:end="79:40">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="189:5">else <block pos:start="81:12" pos:end="189:5">{<block_content pos:start="85:9" pos:end="187:9">

        <comment type="block" pos:start="83:9" pos:end="83:61">/* Both FULL and TOP SYNC_MODE's require copying.. */</comment>

        <for pos:start="85:9" pos:end="187:9">for <control pos:start="85:13" pos:end="85:36">(<init pos:start="85:14" pos:end="85:14">;</init> <condition pos:start="85:16" pos:end="85:27"><expr pos:start="85:16" pos:end="85:26"><name pos:start="85:16" pos:end="85:20">start</name> <operator pos:start="85:22" pos:end="85:22">&lt;</operator> <name pos:start="85:24" pos:end="85:26">end</name></expr>;</condition> <incr pos:start="85:29" pos:end="85:35"><expr pos:start="85:29" pos:end="85:35"><name pos:start="85:29" pos:end="85:33">start</name><operator pos:start="85:34" pos:end="85:35">++</operator></expr></incr>)</control> <block pos:start="85:38" pos:end="187:9">{<block_content pos:start="87:13" pos:end="185:13">

            <decl_stmt pos:start="87:13" pos:end="87:31"><decl pos:start="87:13" pos:end="87:30"><type pos:start="87:13" pos:end="87:16"><name pos:start="87:13" pos:end="87:16">bool</name></type> <name pos:start="87:18" pos:end="87:30">error_is_read</name></decl>;</decl_stmt>

            <if_stmt pos:start="89:13" pos:end="93:13"><if pos:start="89:13" pos:end="93:13">if <condition pos:start="89:16" pos:end="89:37">(<expr pos:start="89:17" pos:end="89:36"><call pos:start="89:17" pos:end="89:36"><name pos:start="89:17" pos:end="89:31">yield_and_check</name><argument_list pos:start="89:32" pos:end="89:36">(<argument pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><name pos:start="89:33" pos:end="89:35">job</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:39" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:22">

                <break pos:start="91:17" pos:end="91:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="97:13" pos:end="157:13"><if pos:start="97:13" pos:end="157:13">if <condition pos:start="97:16" pos:end="97:55">(<expr pos:start="97:17" pos:end="97:54"><name pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:19">job</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:30">sync_mode</name></name> <operator pos:start="97:32" pos:end="97:33">==</operator> <name pos:start="97:35" pos:end="97:54">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="97:57" pos:end="157:13">{<block_content pos:start="99:17" pos:end="155:17">

                <decl_stmt pos:start="99:17" pos:end="99:25"><decl pos:start="99:17" pos:end="99:21"><type pos:start="99:17" pos:end="99:19"><name pos:start="99:17" pos:end="99:19">int</name></type> <name pos:start="99:21" pos:end="99:21">i</name></decl>, <decl pos:start="99:24" pos:end="99:24"><type ref="prev" pos:start="99:17" pos:end="99:19"/><name pos:start="99:24" pos:end="99:24">n</name></decl>;</decl_stmt>

                <decl_stmt pos:start="101:17" pos:end="101:32"><decl pos:start="101:17" pos:end="101:31"><type pos:start="101:17" pos:end="101:19"><name pos:start="101:17" pos:end="101:19">int</name></type> <name pos:start="101:21" pos:end="101:27">alloced</name> <init pos:start="101:29" pos:end="101:31">= <expr pos:start="101:31" pos:end="101:31"><literal type="number" pos:start="101:31" pos:end="101:31">0</literal></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="105:17" pos:end="107:35">/* Check to see if these blocks are already in the

                 * backing file. */</comment>



                <for pos:start="111:17" pos:end="143:17">for <control pos:start="111:21" pos:end="111:53">(<init pos:start="111:22" pos:end="111:27"><expr pos:start="111:22" pos:end="111:26"><name pos:start="111:22" pos:end="111:22">i</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>;</init> <condition pos:start="111:29" pos:end="111:52"><expr pos:start="111:29" pos:end="111:51"><name pos:start="111:29" pos:end="111:29">i</name> <operator pos:start="111:31" pos:end="111:31">&lt;</operator> <name pos:start="111:33" pos:end="111:51">sectors_per_cluster</name></expr>;</condition><incr/>)</control> <block pos:start="111:55" pos:end="143:17">{<block_content pos:start="125:21" pos:end="141:21">

                    <comment type="block" pos:start="113:21" pos:end="123:75">/* bdrv_is_allocated() only returns true/false based

                     * on the first set of sectors it comes across that

                     * are are all in the same state.

                     * For that reason we must verify each sector in the

                     * backup cluster length.  We end up copying more than

                     * needed but at some point that is always the case. */</comment>

                    <expr_stmt pos:start="125:21" pos:end="131:61"><expr pos:start="125:21" pos:end="131:60"><name pos:start="125:21" pos:end="125:27">alloced</name> <operator pos:start="125:29" pos:end="125:29">=</operator>

                        <call pos:start="127:25" pos:end="131:60"><name pos:start="127:25" pos:end="127:41">bdrv_is_allocated</name><argument_list pos:start="127:42" pos:end="131:60">(<argument pos:start="127:43" pos:end="127:44"><expr pos:start="127:43" pos:end="127:44"><name pos:start="127:43" pos:end="127:44">bs</name></expr></argument>,

                                <argument pos:start="129:33" pos:end="129:63"><expr pos:start="129:33" pos:end="129:63"><name pos:start="129:33" pos:end="129:37">start</name> <operator pos:start="129:39" pos:end="129:39">*</operator> <name pos:start="129:41" pos:end="129:59">sectors_per_cluster</name> <operator pos:start="129:61" pos:end="129:61">+</operator> <name pos:start="129:63" pos:end="129:63">i</name></expr></argument>,

                                <argument pos:start="131:33" pos:end="131:55"><expr pos:start="131:33" pos:end="131:55"><name pos:start="131:33" pos:end="131:51">sectors_per_cluster</name> <operator pos:start="131:53" pos:end="131:53">-</operator> <name pos:start="131:55" pos:end="131:55">i</name></expr></argument>, <argument pos:start="131:58" pos:end="131:59"><expr pos:start="131:58" pos:end="131:59"><operator pos:start="131:58" pos:end="131:58">&amp;</operator><name pos:start="131:59" pos:end="131:59">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="133:21" pos:end="133:27"><expr pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:21">i</name> <operator pos:start="133:23" pos:end="133:24">+=</operator> <name pos:start="133:26" pos:end="133:26">n</name></expr>;</expr_stmt>



                    <if_stmt pos:start="137:21" pos:end="141:21"><if pos:start="137:21" pos:end="141:21">if <condition pos:start="137:24" pos:end="137:47">(<expr pos:start="137:25" pos:end="137:46"><name pos:start="137:25" pos:end="137:31">alloced</name> <operator pos:start="137:33" pos:end="137:34">==</operator> <literal type="number" pos:start="137:36" pos:end="137:36">1</literal> <operator pos:start="137:38" pos:end="137:39">||</operator> <name pos:start="137:41" pos:end="137:41">n</name> <operator pos:start="137:43" pos:end="137:44">==</operator> <literal type="number" pos:start="137:46" pos:end="137:46">0</literal></expr>)</condition> <block pos:start="137:49" pos:end="141:21">{<block_content pos:start="139:25" pos:end="139:30">

                        <break pos:start="139:25" pos:end="139:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="147:17" pos:end="149:58">/* If the above loop never found any sectors that are in

                 * the topmost image, skip this backup. */</comment>

                <if_stmt pos:start="151:17" pos:end="155:17"><if pos:start="151:17" pos:end="155:17">if <condition pos:start="151:20" pos:end="151:33">(<expr pos:start="151:21" pos:end="151:32"><name pos:start="151:21" pos:end="151:27">alloced</name> <operator pos:start="151:29" pos:end="151:30">==</operator> <literal type="number" pos:start="151:32" pos:end="151:32">0</literal></expr>)</condition> <block pos:start="151:35" pos:end="155:17">{<block_content pos:start="153:21" pos:end="153:29">

                    <continue pos:start="153:21" pos:end="153:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="159:13" pos:end="159:57">/* FULL sync mode we copy the whole drive. */</comment>

            <expr_stmt pos:start="161:13" pos:end="163:76"><expr pos:start="161:13" pos:end="163:75"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="163:75"><name pos:start="161:19" pos:end="161:31">backup_do_cow</name><argument_list pos:start="161:32" pos:end="163:75">(<argument pos:start="161:33" pos:end="161:34"><expr pos:start="161:33" pos:end="161:34"><name pos:start="161:33" pos:end="161:34">bs</name></expr></argument>, <argument pos:start="161:37" pos:end="161:63"><expr pos:start="161:37" pos:end="161:63"><name pos:start="161:37" pos:end="161:41">start</name> <operator pos:start="161:43" pos:end="161:43">*</operator> <name pos:start="161:45" pos:end="161:63">sectors_per_cluster</name></expr></argument>,

                                <argument pos:start="163:33" pos:end="163:51"><expr pos:start="163:33" pos:end="163:51"><name pos:start="163:33" pos:end="163:51">sectors_per_cluster</name></expr></argument>, <argument pos:start="163:54" pos:end="163:67"><expr pos:start="163:54" pos:end="163:67"><operator pos:start="163:54" pos:end="163:54">&amp;</operator><name pos:start="163:55" pos:end="163:67">error_is_read</name></expr></argument>, <argument pos:start="163:70" pos:end="163:74"><expr pos:start="163:70" pos:end="163:74"><name pos:start="163:70" pos:end="163:74">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="165:13" pos:end="185:13"><if pos:start="165:13" pos:end="185:13">if <condition pos:start="165:16" pos:end="165:24">(<expr pos:start="165:17" pos:end="165:23"><name pos:start="165:17" pos:end="165:19">ret</name> <operator pos:start="165:21" pos:end="165:21">&lt;</operator> <literal type="number" pos:start="165:23" pos:end="165:23">0</literal></expr>)</condition> <block pos:start="165:26" pos:end="185:13">{<block_content pos:start="169:17" pos:end="183:17">

                <comment type="block" pos:start="167:17" pos:end="167:74">/* Depending on error action, fail now or retry cluster */</comment>

                <decl_stmt pos:start="169:17" pos:end="171:66"><decl pos:start="169:17" pos:end="171:65"><type pos:start="169:17" pos:end="169:32"><name pos:start="169:17" pos:end="169:32">BlockErrorAction</name></type> <name pos:start="169:34" pos:end="169:39">action</name> <init pos:start="169:41" pos:end="171:65">=

                    <expr pos:start="171:21" pos:end="171:65"><call pos:start="171:21" pos:end="171:65"><name pos:start="171:21" pos:end="171:39">backup_error_action</name><argument_list pos:start="171:40" pos:end="171:65">(<argument pos:start="171:41" pos:end="171:43"><expr pos:start="171:41" pos:end="171:43"><name pos:start="171:41" pos:end="171:43">job</name></expr></argument>, <argument pos:start="171:46" pos:end="171:58"><expr pos:start="171:46" pos:end="171:58"><name pos:start="171:46" pos:end="171:58">error_is_read</name></expr></argument>, <argument pos:start="171:61" pos:end="171:64"><expr pos:start="171:61" pos:end="171:64"><operator pos:start="171:61" pos:end="171:61">-</operator><name pos:start="171:62" pos:end="171:64">ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="173:17" pos:end="183:17"><if pos:start="173:17" pos:end="177:17">if <condition pos:start="173:20" pos:end="173:56">(<expr pos:start="173:21" pos:end="173:55"><name pos:start="173:21" pos:end="173:26">action</name> <operator pos:start="173:28" pos:end="173:29">==</operator> <name pos:start="173:31" pos:end="173:55">BLOCK_ERROR_ACTION_REPORT</name></expr>)</condition> <block pos:start="173:58" pos:end="177:17">{<block_content pos:start="175:21" pos:end="175:26">

                    <break pos:start="175:21" pos:end="175:26">break;</break>

                </block_content>}</block></if> <else pos:start="177:19" pos:end="183:17">else <block pos:start="177:24" pos:end="183:17">{<block_content pos:start="179:21" pos:end="181:29">

                    <expr_stmt pos:start="179:21" pos:end="179:28"><expr pos:start="179:21" pos:end="179:27"><name pos:start="179:21" pos:end="179:25">start</name><operator pos:start="179:26" pos:end="179:27">--</operator></expr>;</expr_stmt>

                    <continue pos:start="181:21" pos:end="181:29">continue;</continue>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:47"><expr pos:start="193:5" pos:end="193:46"><call pos:start="193:5" pos:end="193:46"><name pos:start="193:5" pos:end="193:31">notifier_with_return_remove</name><argument_list pos:start="193:32" pos:end="193:46">(<argument pos:start="193:33" pos:end="193:45"><expr pos:start="193:33" pos:end="193:45"><operator pos:start="193:33" pos:end="193:33">&amp;</operator><name pos:start="193:34" pos:end="193:45">before_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:65">/* wait until pending backup_do_cow() calls have completed */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:46"><expr pos:start="199:5" pos:end="199:45"><call pos:start="199:5" pos:end="199:45"><name pos:start="199:5" pos:end="199:25">qemu_co_rwlock_wrlock</name><argument_list pos:start="199:26" pos:end="199:45">(<argument pos:start="199:27" pos:end="199:44"><expr pos:start="199:27" pos:end="199:44"><operator pos:start="199:27" pos:end="199:27">&amp;</operator><name pos:start="199:28" pos:end="199:44"><name pos:start="199:28" pos:end="199:30">job</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:44">flush_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:46"><expr pos:start="201:5" pos:end="201:45"><call pos:start="201:5" pos:end="201:45"><name pos:start="201:5" pos:end="201:25">qemu_co_rwlock_unlock</name><argument_list pos:start="201:26" pos:end="201:45">(<argument pos:start="201:27" pos:end="201:44"><expr pos:start="201:27" pos:end="201:44"><operator pos:start="201:27" pos:end="201:27">&amp;</operator><name pos:start="201:28" pos:end="201:44"><name pos:start="201:28" pos:end="201:30">job</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:44">flush_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:30"><expr pos:start="203:5" pos:end="203:29"><call pos:start="203:5" pos:end="203:29"><name pos:start="203:5" pos:end="203:16">hbitmap_free</name><argument_list pos:start="203:17" pos:end="203:29">(<argument pos:start="203:18" pos:end="203:28"><expr pos:start="203:18" pos:end="203:28"><name pos:start="203:18" pos:end="203:28"><name pos:start="203:18" pos:end="203:20">job</name><operator pos:start="203:21" pos:end="203:22">-&gt;</operator><name pos:start="203:23" pos:end="203:28">bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="207:5" pos:end="211:5"><if pos:start="207:5" pos:end="211:5">if <condition pos:start="207:8" pos:end="207:20">(<expr pos:start="207:9" pos:end="207:19"><name pos:start="207:9" pos:end="207:19"><name pos:start="207:9" pos:end="207:14">target</name><operator pos:start="207:15" pos:end="207:16">-&gt;</operator><name pos:start="207:17" pos:end="207:19">blk</name></name></expr>)</condition> <block pos:start="207:22" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:42">

        <expr_stmt pos:start="209:9" pos:end="209:42"><expr pos:start="209:9" pos:end="209:41"><call pos:start="209:9" pos:end="209:41"><name pos:start="209:9" pos:end="209:28">blk_iostatus_disable</name><argument_list pos:start="209:29" pos:end="209:41">(<argument pos:start="209:30" pos:end="209:40"><expr pos:start="209:30" pos:end="209:40"><name pos:start="209:30" pos:end="209:40"><name pos:start="209:30" pos:end="209:35">target</name><operator pos:start="209:36" pos:end="209:37">-&gt;</operator><name pos:start="209:38" pos:end="209:40">blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:53"><expr pos:start="213:5" pos:end="213:52"><call pos:start="213:5" pos:end="213:52"><name pos:start="213:5" pos:end="213:23">bdrv_op_unblock_all</name><argument_list pos:start="213:24" pos:end="213:52">(<argument pos:start="213:25" pos:end="213:30"><expr pos:start="213:25" pos:end="213:30"><name pos:start="213:25" pos:end="213:30">target</name></expr></argument>, <argument pos:start="213:33" pos:end="213:51"><expr pos:start="213:33" pos:end="213:51"><name pos:start="213:33" pos:end="213:51"><name pos:start="213:33" pos:end="213:35">job</name><operator pos:start="213:36" pos:end="213:37">-&gt;</operator><name pos:start="213:38" pos:end="213:43">common</name><operator pos:start="213:44" pos:end="213:44">.</operator><name pos:start="213:45" pos:end="213:51">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:35"><expr pos:start="217:5" pos:end="217:34"><name pos:start="217:5" pos:end="217:8">data</name> <operator pos:start="217:10" pos:end="217:10">=</operator> <call pos:start="217:12" pos:end="217:34"><name pos:start="217:12" pos:end="217:19">g_malloc</name><argument_list pos:start="217:20" pos:end="217:34">(<argument pos:start="217:21" pos:end="217:33"><expr pos:start="217:21" pos:end="217:33"><sizeof pos:start="217:21" pos:end="217:33">sizeof<argument_list pos:start="217:27" pos:end="217:33">(<argument pos:start="217:28" pos:end="217:32"><expr pos:start="217:28" pos:end="217:32"><operator pos:start="217:28" pos:end="217:28">*</operator><name pos:start="217:29" pos:end="217:32">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:20"><expr pos:start="219:5" pos:end="219:19"><name pos:start="219:5" pos:end="219:13"><name pos:start="219:5" pos:end="219:8">data</name><operator pos:start="219:9" pos:end="219:10">-&gt;</operator><name pos:start="219:11" pos:end="219:13">ret</name></name> <operator pos:start="219:15" pos:end="219:15">=</operator> <name pos:start="219:17" pos:end="219:19">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:70"><expr pos:start="221:5" pos:end="221:69"><call pos:start="221:5" pos:end="221:69"><name pos:start="221:5" pos:end="221:32">block_job_defer_to_main_loop</name><argument_list pos:start="221:33" pos:end="221:69">(<argument pos:start="221:34" pos:end="221:45"><expr pos:start="221:34" pos:end="221:45"><operator pos:start="221:34" pos:end="221:34">&amp;</operator><name pos:start="221:35" pos:end="221:45"><name pos:start="221:35" pos:end="221:37">job</name><operator pos:start="221:38" pos:end="221:39">-&gt;</operator><name pos:start="221:40" pos:end="221:45">common</name></name></expr></argument>, <argument pos:start="221:48" pos:end="221:62"><expr pos:start="221:48" pos:end="221:62"><name pos:start="221:48" pos:end="221:62">backup_complete</name></expr></argument>, <argument pos:start="221:65" pos:end="221:68"><expr pos:start="221:65" pos:end="221:68"><name pos:start="221:65" pos:end="221:68">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
