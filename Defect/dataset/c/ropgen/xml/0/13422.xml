<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13422.c" pos:tabs="8"><function pos:start="1:1" pos:end="327:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">scsi_disk_emulate_inquiry</name><parameter_list pos:start="1:37" pos:end="1:71">(<parameter pos:start="1:38" pos:end="1:53"><decl pos:start="1:38" pos:end="1:53"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:48">SCSIRequest</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">req</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:70"><decl pos:start="1:56" pos:end="1:70"><type pos:start="1:56" pos:end="1:70"><name pos:start="1:56" pos:end="1:62">uint8_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:70">outbuf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="327:1">{<block_content pos:start="5:5" pos:end="325:18">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SCSIDiskState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:63">= <expr pos:start="5:24" pos:end="5:63"><call pos:start="5:24" pos:end="5:63"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:63">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">SCSIDiskState</name></expr></argument>, <argument pos:start="5:49" pos:end="5:52"><expr pos:start="5:49" pos:end="5:52"><name pos:start="5:49" pos:end="5:52">qdev</name></expr></argument>, <argument pos:start="5:55" pos:end="5:62"><expr pos:start="5:55" pos:end="5:62"><name pos:start="5:55" pos:end="5:62"><name pos:start="5:55" pos:end="5:57">req</name><operator pos:start="5:58" pos:end="5:59">-&gt;</operator><name pos:start="5:60" pos:end="5:62">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">buflen</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:30">(<expr pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:11">req</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:16">cmd</name><operator pos:start="11:17" pos:end="11:17">.</operator><name pos:start="11:18" pos:end="11:20">buf</name><index pos:start="11:21" pos:end="11:23">[<expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">1</literal></expr>]</index></name> <operator pos:start="11:25" pos:end="11:25">&amp;</operator> <literal type="number" pos:start="11:27" pos:end="11:29">0x2</literal></expr>)</condition> <block pos:start="11:32" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <comment type="block" pos:start="13:9" pos:end="13:62">/* Command support data - optional, not implemented */</comment>

        <expr_stmt pos:start="15:9" pos:end="15:75"><expr pos:start="15:9" pos:end="15:74"><call pos:start="15:9" pos:end="15:74"><name pos:start="15:9" pos:end="15:12">BADF</name><argument_list pos:start="15:13" pos:end="15:74">(<argument pos:start="15:14" pos:end="15:73"><expr pos:start="15:14" pos:end="15:73"><literal type="string" pos:start="15:14" pos:end="15:73">"optional INQUIRY command support request not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="213:5"><if pos:start="23:5" pos:end="213:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:11">req</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:16">cmd</name><operator pos:start="23:17" pos:end="23:17">.</operator><name pos:start="23:18" pos:end="23:20">buf</name><index pos:start="23:21" pos:end="23:23">[<expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">1</literal></expr>]</index></name> <operator pos:start="23:25" pos:end="23:25">&amp;</operator> <literal type="number" pos:start="23:27" pos:end="23:29">0x1</literal></expr>)</condition> <block pos:start="23:32" pos:end="213:5">{<block_content pos:start="27:9" pos:end="211:22">

        <comment type="block" pos:start="25:9" pos:end="25:32">/* Vital product data */</comment>

        <decl_stmt pos:start="27:9" pos:end="27:44"><decl pos:start="27:9" pos:end="27:43"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">uint8_t</name></type> <name pos:start="27:17" pos:end="27:25">page_code</name> <init pos:start="27:27" pos:end="27:43">= <expr pos:start="27:29" pos:end="27:43"><name pos:start="27:29" pos:end="27:43"><name pos:start="27:29" pos:end="27:31">req</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:36">cmd</name><operator pos:start="27:37" pos:end="27:37">.</operator><name pos:start="27:38" pos:end="27:40">buf</name><index pos:start="27:41" pos:end="27:43">[<expr pos:start="27:42" pos:end="27:42"><literal type="number" pos:start="27:42" pos:end="27:42">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:30">(<expr pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:15">req</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:20">cmd</name><operator pos:start="29:21" pos:end="29:21">.</operator><name pos:start="29:22" pos:end="29:25">xfer</name></name> <operator pos:start="29:27" pos:end="29:27">&lt;</operator> <literal type="number" pos:start="29:29" pos:end="29:29">4</literal></expr>)</condition> <block pos:start="29:32" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:22">

            <expr_stmt pos:start="31:13" pos:end="33:60"><expr pos:start="31:13" pos:end="33:59"><call pos:start="31:13" pos:end="33:59"><name pos:start="31:13" pos:end="31:16">BADF</name><argument_list pos:start="31:17" pos:end="33:59">(<argument pos:start="31:18" pos:end="33:32"><expr pos:start="31:18" pos:end="33:32"><literal type="string" pos:start="31:18" pos:end="31:66">"Error: Inquiry (EVPD[%02X]) buffer size %zd is "</literal>

                 <literal type="string" pos:start="33:18" pos:end="33:32">"less than 4\n"</literal></expr></argument>, <argument pos:start="33:35" pos:end="33:43"><expr pos:start="33:35" pos:end="33:43"><name pos:start="33:35" pos:end="33:43">page_code</name></expr></argument>, <argument pos:start="33:46" pos:end="33:58"><expr pos:start="33:46" pos:end="33:58"><name pos:start="33:46" pos:end="33:58"><name pos:start="33:46" pos:end="33:48">req</name><operator pos:start="33:49" pos:end="33:50">-&gt;</operator><name pos:start="33:51" pos:end="33:53">cmd</name><operator pos:start="33:54" pos:end="33:54">.</operator><name pos:start="33:55" pos:end="33:58">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:22">return <expr pos:start="35:20" pos:end="35:21"><operator pos:start="35:20" pos:end="35:20">-</operator><literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:57">(<expr pos:start="41:13" pos:end="41:56"><call pos:start="41:13" pos:end="41:37"><name pos:start="41:13" pos:end="41:30">bdrv_get_type_hint</name><argument_list pos:start="41:31" pos:end="41:37">(<argument pos:start="41:32" pos:end="41:36"><expr pos:start="41:32" pos:end="41:36"><name pos:start="41:32" pos:end="41:36"><name pos:start="41:32" pos:end="41:32">s</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:36">bs</name></name></expr></argument>)</argument_list></call> <operator pos:start="41:39" pos:end="41:40">==</operator> <name pos:start="41:42" pos:end="41:56">BDRV_TYPE_CDROM</name></expr>)</condition> <block pos:start="41:59" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:33">

            <expr_stmt pos:start="43:13" pos:end="43:33"><expr pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:18">outbuf</name><index pos:start="43:19" pos:end="43:28">[<expr pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:25">buflen</name><operator pos:start="43:26" pos:end="43:27">++</operator></expr>]</index></name> <operator pos:start="43:30" pos:end="43:30">=</operator> <literal type="number" pos:start="43:32" pos:end="43:32">5</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="49:9">else <block pos:start="45:16" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:33">

            <expr_stmt pos:start="47:13" pos:end="47:33"><expr pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:18">outbuf</name><index pos:start="47:19" pos:end="47:28">[<expr pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:25">buflen</name><operator pos:start="47:26" pos:end="47:27">++</operator></expr>]</index></name> <operator pos:start="47:30" pos:end="47:30">=</operator> <literal type="number" pos:start="47:32" pos:end="47:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:14">outbuf</name><index pos:start="51:15" pos:end="51:24">[<expr pos:start="51:16" pos:end="51:23"><name pos:start="51:16" pos:end="51:21">buflen</name><operator pos:start="51:22" pos:end="51:23">++</operator></expr>]</index></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <name pos:start="51:28" pos:end="51:36">page_code</name></expr> ;</expr_stmt> <comment type="line" pos:start="51:40" pos:end="51:51">// this page</comment>

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:14">outbuf</name><index pos:start="53:15" pos:end="53:24">[<expr pos:start="53:16" pos:end="53:23"><name pos:start="53:16" pos:end="53:21">buflen</name><operator pos:start="53:22" pos:end="53:23">++</operator></expr>]</index></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <literal type="number" pos:start="53:28" pos:end="53:31">0x00</literal></expr>;</expr_stmt>



        <switch pos:start="57:9" pos:end="207:9">switch <condition pos:start="57:16" pos:end="57:26">(<expr pos:start="57:17" pos:end="57:25"><name pos:start="57:17" pos:end="57:25">page_code</name></expr>)</condition> <block pos:start="57:28" pos:end="207:9">{<block_content pos:start="59:9" pos:end="205:22">

        <case pos:start="59:9" pos:end="59:18">case <expr pos:start="59:14" pos:end="59:17"><literal type="number" pos:start="59:14" pos:end="59:17">0x00</literal></expr>:</case> <comment type="block" pos:start="59:20" pos:end="59:56">/* Supported page codes, mandatory */</comment>

            <expr_stmt pos:start="61:13" pos:end="63:56"><expr pos:start="61:13" pos:end="63:55"><call pos:start="61:13" pos:end="63:55"><name pos:start="61:13" pos:end="61:19">DPRINTF</name><argument_list pos:start="61:20" pos:end="63:55">(<argument pos:start="61:21" pos:end="63:39"><expr pos:start="61:21" pos:end="63:39"><literal type="string" pos:start="61:21" pos:end="61:52">"Inquiry EVPD[Supported pages] "</literal>

                    <literal type="string" pos:start="63:21" pos:end="63:39">"buffer size %zd\n"</literal></expr></argument>, <argument pos:start="63:42" pos:end="63:54"><expr pos:start="63:42" pos:end="63:54"><name pos:start="63:42" pos:end="63:54"><name pos:start="63:42" pos:end="63:44">req</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:49">cmd</name><operator pos:start="63:50" pos:end="63:50">.</operator><name pos:start="63:51" pos:end="63:54">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:18">outbuf</name><index pos:start="65:19" pos:end="65:28">[<expr pos:start="65:20" pos:end="65:27"><name pos:start="65:20" pos:end="65:25">buflen</name><operator pos:start="65:26" pos:end="65:27">++</operator></expr>]</index></name> <operator pos:start="65:30" pos:end="65:30">=</operator> <literal type="number" pos:start="65:32" pos:end="65:32">4</literal></expr>;</expr_stmt>    <comment type="line" pos:start="65:38" pos:end="65:55">// number of pages</comment>

            <expr_stmt pos:start="67:13" pos:end="67:36"><expr pos:start="67:13" pos:end="67:35"><name pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:18">outbuf</name><index pos:start="67:19" pos:end="67:28">[<expr pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:25">buflen</name><operator pos:start="67:26" pos:end="67:27">++</operator></expr>]</index></name> <operator pos:start="67:30" pos:end="67:30">=</operator> <literal type="number" pos:start="67:32" pos:end="67:35">0x00</literal></expr>;</expr_stmt> <comment type="line" pos:start="67:38" pos:end="67:75">// list of supported pages (this page)</comment>

            <expr_stmt pos:start="69:13" pos:end="69:36"><expr pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:28"><name pos:start="69:13" pos:end="69:18">outbuf</name><index pos:start="69:19" pos:end="69:28">[<expr pos:start="69:20" pos:end="69:27"><name pos:start="69:20" pos:end="69:25">buflen</name><operator pos:start="69:26" pos:end="69:27">++</operator></expr>]</index></name> <operator pos:start="69:30" pos:end="69:30">=</operator> <literal type="number" pos:start="69:32" pos:end="69:35">0x80</literal></expr>;</expr_stmt> <comment type="line" pos:start="69:38" pos:end="69:58">// unit serial number</comment>

            <expr_stmt pos:start="71:13" pos:end="71:36"><expr pos:start="71:13" pos:end="71:35"><name pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:18">outbuf</name><index pos:start="71:19" pos:end="71:28">[<expr pos:start="71:20" pos:end="71:27"><name pos:start="71:20" pos:end="71:25">buflen</name><operator pos:start="71:26" pos:end="71:27">++</operator></expr>]</index></name> <operator pos:start="71:30" pos:end="71:30">=</operator> <literal type="number" pos:start="71:32" pos:end="71:35">0x83</literal></expr>;</expr_stmt> <comment type="line" pos:start="71:38" pos:end="71:61">// device identification</comment>

            <expr_stmt pos:start="73:13" pos:end="73:36"><expr pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:18">outbuf</name><index pos:start="73:19" pos:end="73:28">[<expr pos:start="73:20" pos:end="73:27"><name pos:start="73:20" pos:end="73:25">buflen</name><operator pos:start="73:26" pos:end="73:27">++</operator></expr>]</index></name> <operator pos:start="73:30" pos:end="73:30">=</operator> <literal type="number" pos:start="73:32" pos:end="73:35">0xb0</literal></expr>;</expr_stmt> <comment type="line" pos:start="73:38" pos:end="73:68">// block device characteristics</comment>

            <break pos:start="75:13" pos:end="75:18">break;</break>



        <case pos:start="79:9" pos:end="79:18">case <expr pos:start="79:14" pos:end="79:17"><literal type="number" pos:start="79:14" pos:end="79:17">0x80</literal></expr>:</case> <comment type="block" pos:start="79:20" pos:end="79:55">/* Device serial number, optional */</comment>

        <block pos:start="81:9" pos:end="113:9">{<block_content pos:start="83:13" pos:end="111:18">

            <decl_stmt pos:start="83:13" pos:end="85:51"><decl pos:start="83:13" pos:end="85:50"><type pos:start="83:13" pos:end="83:24"><specifier pos:start="83:13" pos:end="83:17">const</specifier> <name pos:start="83:19" pos:end="83:22">char</name> <modifier pos:start="83:24" pos:end="83:24">*</modifier></type><name pos:start="83:25" pos:end="83:30">serial</name> <init pos:start="83:32" pos:end="85:50">= <expr pos:start="83:34" pos:end="85:50"><ternary pos:start="83:34" pos:end="85:50"><condition pos:start="83:34" pos:end="83:63"><expr pos:start="83:34" pos:end="83:61"><name pos:start="83:34" pos:end="83:61"><name pos:start="83:34" pos:end="83:36">req</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:41">dev</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:47">conf</name><operator pos:start="83:48" pos:end="83:48">.</operator><name pos:start="83:49" pos:end="83:53">dinfo</name><operator pos:start="83:54" pos:end="83:55">-&gt;</operator><name pos:start="83:56" pos:end="83:61">serial</name></name></expr> ?</condition><then pos:start="85:17" pos:end="85:44">

                <expr pos:start="85:17" pos:end="85:44"><name pos:start="85:17" pos:end="85:44"><name pos:start="85:17" pos:end="85:19">req</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:24">dev</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:30">conf</name><operator pos:start="85:31" pos:end="85:31">.</operator><name pos:start="85:32" pos:end="85:36">dinfo</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:44">serial</name></name></expr> </then><else pos:start="85:46" pos:end="85:50">: <expr pos:start="85:48" pos:end="85:50"><literal type="string" pos:start="85:48" pos:end="85:50">"0"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="87:13" pos:end="87:35"><decl pos:start="87:13" pos:end="87:34"><type pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">int</name></type> <name pos:start="87:17" pos:end="87:17">l</name> <init pos:start="87:19" pos:end="87:34">= <expr pos:start="87:21" pos:end="87:34"><call pos:start="87:21" pos:end="87:34"><name pos:start="87:21" pos:end="87:26">strlen</name><argument_list pos:start="87:27" pos:end="87:34">(<argument pos:start="87:28" pos:end="87:33"><expr pos:start="87:28" pos:end="87:33"><name pos:start="87:28" pos:end="87:33">serial</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="91:13" pos:end="93:34"><if pos:start="91:13" pos:end="93:34">if <condition pos:start="91:16" pos:end="91:34">(<expr pos:start="91:17" pos:end="91:33"><name pos:start="91:17" pos:end="91:17">l</name> <operator pos:start="91:19" pos:end="91:19">&gt;</operator> <name pos:start="91:21" pos:end="91:33"><name pos:start="91:21" pos:end="91:23">req</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:28">cmd</name><operator pos:start="91:29" pos:end="91:29">.</operator><name pos:start="91:30" pos:end="91:33">xfer</name></name></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:34"><block_content pos:start="93:17" pos:end="93:34">

                <expr_stmt pos:start="93:17" pos:end="93:34"><expr pos:start="93:17" pos:end="93:33"><name pos:start="93:17" pos:end="93:17">l</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:33"><name pos:start="93:21" pos:end="93:23">req</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:28">cmd</name><operator pos:start="93:29" pos:end="93:29">.</operator><name pos:start="93:30" pos:end="93:33">xfer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="95:13" pos:end="97:23"><if pos:start="95:13" pos:end="97:23">if <condition pos:start="95:16" pos:end="95:23">(<expr pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:17">l</name> <operator pos:start="95:19" pos:end="95:19">&gt;</operator> <literal type="number" pos:start="95:21" pos:end="95:22">20</literal></expr>)</condition><block type="pseudo" pos:start="97:17" pos:end="97:23"><block_content pos:start="97:17" pos:end="97:23">

                <expr_stmt pos:start="97:17" pos:end="97:23"><expr pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:17">l</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <literal type="number" pos:start="97:21" pos:end="97:22">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="101:13" pos:end="103:56"><expr pos:start="101:13" pos:end="103:55"><call pos:start="101:13" pos:end="103:55"><name pos:start="101:13" pos:end="101:19">DPRINTF</name><argument_list pos:start="101:20" pos:end="103:55">(<argument pos:start="101:21" pos:end="103:39"><expr pos:start="101:21" pos:end="103:39"><literal type="string" pos:start="101:21" pos:end="101:50">"Inquiry EVPD[Serial number] "</literal>

                    <literal type="string" pos:start="103:21" pos:end="103:39">"buffer size %zd\n"</literal></expr></argument>, <argument pos:start="103:42" pos:end="103:54"><expr pos:start="103:42" pos:end="103:54"><name pos:start="103:42" pos:end="103:54"><name pos:start="103:42" pos:end="103:44">req</name><operator pos:start="103:45" pos:end="103:46">-&gt;</operator><name pos:start="103:47" pos:end="103:49">cmd</name><operator pos:start="103:50" pos:end="103:50">.</operator><name pos:start="103:51" pos:end="103:54">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:33"><expr pos:start="105:13" pos:end="105:32"><name pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:18">outbuf</name><index pos:start="105:19" pos:end="105:28">[<expr pos:start="105:20" pos:end="105:27"><name pos:start="105:20" pos:end="105:25">buflen</name><operator pos:start="105:26" pos:end="105:27">++</operator></expr>]</index></name> <operator pos:start="105:30" pos:end="105:30">=</operator> <name pos:start="105:32" pos:end="105:32">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:45"><expr pos:start="107:13" pos:end="107:44"><call pos:start="107:13" pos:end="107:44"><name pos:start="107:13" pos:end="107:18">memcpy</name><argument_list pos:start="107:19" pos:end="107:44">(<argument pos:start="107:20" pos:end="107:32"><expr pos:start="107:20" pos:end="107:32"><name pos:start="107:20" pos:end="107:25">outbuf</name><operator pos:start="107:26" pos:end="107:26">+</operator><name pos:start="107:27" pos:end="107:32">buflen</name></expr></argument>, <argument pos:start="107:35" pos:end="107:40"><expr pos:start="107:35" pos:end="107:40"><name pos:start="107:35" pos:end="107:40">serial</name></expr></argument>, <argument pos:start="107:43" pos:end="107:43"><expr pos:start="107:43" pos:end="107:43"><name pos:start="107:43" pos:end="107:43">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:24"><expr pos:start="109:13" pos:end="109:23"><name pos:start="109:13" pos:end="109:18">buflen</name> <operator pos:start="109:20" pos:end="109:21">+=</operator> <name pos:start="109:23" pos:end="109:23">l</name></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        </block_content>}</block>



        <case pos:start="117:9" pos:end="117:18">case <expr pos:start="117:14" pos:end="117:17"><literal type="number" pos:start="117:14" pos:end="117:17">0x83</literal></expr>:</case> <comment type="block" pos:start="117:20" pos:end="117:62">/* Device identification page, mandatory */</comment>

        <block pos:start="119:9" pos:end="155:9">{<block_content pos:start="121:13" pos:end="153:18">

            <decl_stmt pos:start="121:13" pos:end="121:34"><decl pos:start="121:13" pos:end="121:33"><type pos:start="121:13" pos:end="121:15"><name pos:start="121:13" pos:end="121:15">int</name></type> <name pos:start="121:17" pos:end="121:23">max_len</name> <init pos:start="121:25" pos:end="121:33">= <expr pos:start="121:27" pos:end="121:33"><literal type="number" pos:start="121:27" pos:end="121:31">255</literal> <operator pos:start="121:31" pos:end="121:31">-</operator> <literal type="number" pos:start="121:33" pos:end="121:33">8</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="123:13" pos:end="123:61"><decl pos:start="123:13" pos:end="123:60"><type pos:start="123:13" pos:end="123:15"><name pos:start="123:13" pos:end="123:15">int</name></type> <name pos:start="123:17" pos:end="123:22">id_len</name> <init pos:start="123:24" pos:end="123:60">= <expr pos:start="123:26" pos:end="123:60"><call pos:start="123:26" pos:end="123:60"><name pos:start="123:26" pos:end="123:31">strlen</name><argument_list pos:start="123:32" pos:end="123:60">(<argument pos:start="123:33" pos:end="123:59"><expr pos:start="123:33" pos:end="123:59"><call pos:start="123:33" pos:end="123:59"><name pos:start="123:33" pos:end="123:52">bdrv_get_device_name</name><argument_list pos:start="123:53" pos:end="123:59">(<argument pos:start="123:54" pos:end="123:58"><expr pos:start="123:54" pos:end="123:58"><name pos:start="123:54" pos:end="123:58"><name pos:start="123:54" pos:end="123:54">s</name><operator pos:start="123:55" pos:end="123:56">-&gt;</operator><name pos:start="123:57" pos:end="123:58">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="127:13" pos:end="129:33"><if pos:start="127:13" pos:end="129:33">if <condition pos:start="127:16" pos:end="127:33">(<expr pos:start="127:17" pos:end="127:32"><name pos:start="127:17" pos:end="127:22">id_len</name> <operator pos:start="127:24" pos:end="127:24">&gt;</operator> <name pos:start="127:26" pos:end="127:32">max_len</name></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:33"><block_content pos:start="129:17" pos:end="129:33">

                <expr_stmt pos:start="129:17" pos:end="129:33"><expr pos:start="129:17" pos:end="129:32"><name pos:start="129:17" pos:end="129:22">id_len</name> <operator pos:start="129:24" pos:end="129:24">=</operator> <name pos:start="129:26" pos:end="129:32">max_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="133:56"><expr pos:start="131:13" pos:end="133:55"><call pos:start="131:13" pos:end="133:55"><name pos:start="131:13" pos:end="131:19">DPRINTF</name><argument_list pos:start="131:20" pos:end="133:55">(<argument pos:start="131:21" pos:end="133:39"><expr pos:start="131:21" pos:end="133:39"><literal type="string" pos:start="131:21" pos:end="131:58">"Inquiry EVPD[Device identification] "</literal>

                    <literal type="string" pos:start="133:21" pos:end="133:39">"buffer size %zd\n"</literal></expr></argument>, <argument pos:start="133:42" pos:end="133:54"><expr pos:start="133:42" pos:end="133:54"><name pos:start="133:42" pos:end="133:54"><name pos:start="133:42" pos:end="133:44">req</name><operator pos:start="133:45" pos:end="133:46">-&gt;</operator><name pos:start="133:47" pos:end="133:49">cmd</name><operator pos:start="133:50" pos:end="133:50">.</operator><name pos:start="133:51" pos:end="133:54">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="137:13" pos:end="137:42"><expr pos:start="137:13" pos:end="137:41"><name pos:start="137:13" pos:end="137:28"><name pos:start="137:13" pos:end="137:18">outbuf</name><index pos:start="137:19" pos:end="137:28">[<expr pos:start="137:20" pos:end="137:27"><name pos:start="137:20" pos:end="137:25">buflen</name><operator pos:start="137:26" pos:end="137:27">++</operator></expr>]</index></name> <operator pos:start="137:30" pos:end="137:30">=</operator> <literal type="number" pos:start="137:32" pos:end="137:34">3</literal> <operator pos:start="137:34" pos:end="137:34">+</operator> <name pos:start="137:36" pos:end="137:41">id_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:35"><expr pos:start="139:13" pos:end="139:34"><name pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:18">outbuf</name><index pos:start="139:19" pos:end="139:28">[<expr pos:start="139:20" pos:end="139:27"><name pos:start="139:20" pos:end="139:25">buflen</name><operator pos:start="139:26" pos:end="139:27">++</operator></expr>]</index></name> <operator pos:start="139:30" pos:end="139:30">=</operator> <literal type="number" pos:start="139:32" pos:end="139:34">0x2</literal></expr>;</expr_stmt> <comment type="line" pos:start="139:37" pos:end="139:44">// ASCII</comment>

            <expr_stmt pos:start="141:13" pos:end="141:33"><expr pos:start="141:13" pos:end="141:32"><name pos:start="141:13" pos:end="141:28"><name pos:start="141:13" pos:end="141:18">outbuf</name><index pos:start="141:19" pos:end="141:28">[<expr pos:start="141:20" pos:end="141:27"><name pos:start="141:20" pos:end="141:25">buflen</name><operator pos:start="141:26" pos:end="141:27">++</operator></expr>]</index></name> <operator pos:start="141:30" pos:end="141:30">=</operator> <literal type="number" pos:start="141:32" pos:end="141:32">0</literal></expr>;</expr_stmt>   <comment type="line" pos:start="141:37" pos:end="141:62">// not officially assigned</comment>

            <expr_stmt pos:start="143:13" pos:end="143:33"><expr pos:start="143:13" pos:end="143:32"><name pos:start="143:13" pos:end="143:28"><name pos:start="143:13" pos:end="143:18">outbuf</name><index pos:start="143:19" pos:end="143:28">[<expr pos:start="143:20" pos:end="143:27"><name pos:start="143:20" pos:end="143:25">buflen</name><operator pos:start="143:26" pos:end="143:27">++</operator></expr>]</index></name> <operator pos:start="143:30" pos:end="143:30">=</operator> <literal type="number" pos:start="143:32" pos:end="143:32">0</literal></expr>;</expr_stmt>   <comment type="line" pos:start="143:37" pos:end="143:47">// reserved</comment>

            <expr_stmt pos:start="145:13" pos:end="145:38"><expr pos:start="145:13" pos:end="145:37"><name pos:start="145:13" pos:end="145:28"><name pos:start="145:13" pos:end="145:18">outbuf</name><index pos:start="145:19" pos:end="145:28">[<expr pos:start="145:20" pos:end="145:27"><name pos:start="145:20" pos:end="145:25">buflen</name><operator pos:start="145:26" pos:end="145:27">++</operator></expr>]</index></name> <operator pos:start="145:30" pos:end="145:30">=</operator> <name pos:start="145:32" pos:end="145:37">id_len</name></expr>;</expr_stmt> <comment type="line" pos:start="145:40" pos:end="145:66">// length of data following</comment>



            <expr_stmt pos:start="149:13" pos:end="149:71"><expr pos:start="149:13" pos:end="149:70"><call pos:start="149:13" pos:end="149:70"><name pos:start="149:13" pos:end="149:18">memcpy</name><argument_list pos:start="149:19" pos:end="149:70">(<argument pos:start="149:20" pos:end="149:32"><expr pos:start="149:20" pos:end="149:32"><name pos:start="149:20" pos:end="149:25">outbuf</name><operator pos:start="149:26" pos:end="149:26">+</operator><name pos:start="149:27" pos:end="149:32">buflen</name></expr></argument>, <argument pos:start="149:35" pos:end="149:61"><expr pos:start="149:35" pos:end="149:61"><call pos:start="149:35" pos:end="149:61"><name pos:start="149:35" pos:end="149:54">bdrv_get_device_name</name><argument_list pos:start="149:55" pos:end="149:61">(<argument pos:start="149:56" pos:end="149:60"><expr pos:start="149:56" pos:end="149:60"><name pos:start="149:56" pos:end="149:60"><name pos:start="149:56" pos:end="149:56">s</name><operator pos:start="149:57" pos:end="149:58">-&gt;</operator><name pos:start="149:59" pos:end="149:60">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="149:64" pos:end="149:69"><expr pos:start="149:64" pos:end="149:69"><name pos:start="149:64" pos:end="149:69">id_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:29"><expr pos:start="151:13" pos:end="151:28"><name pos:start="151:13" pos:end="151:18">buflen</name> <operator pos:start="151:20" pos:end="151:21">+=</operator> <name pos:start="151:23" pos:end="151:28">id_len</name></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        </block_content>}</block>

        <case pos:start="157:9" pos:end="157:18">case <expr pos:start="157:14" pos:end="157:17"><literal type="number" pos:start="157:14" pos:end="157:17">0xb0</literal></expr>:</case> <comment type="block" pos:start="157:20" pos:end="157:53">/* block device characteristics */</comment>

        <block pos:start="159:9" pos:end="197:9">{<block_content pos:start="161:13" pos:end="195:18">

            <decl_stmt pos:start="161:13" pos:end="161:69"><decl pos:start="161:13" pos:end="161:68"><type pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:20">unsigned</name> <name pos:start="161:22" pos:end="161:24">int</name></type> <name pos:start="161:26" pos:end="161:36">min_io_size</name> <init pos:start="161:38" pos:end="161:68">= <expr pos:start="161:40" pos:end="161:68"><name pos:start="161:40" pos:end="161:63"><name pos:start="161:40" pos:end="161:40">s</name><operator pos:start="161:41" pos:end="161:42">-&gt;</operator><name pos:start="161:43" pos:end="161:46">qdev</name><operator pos:start="161:47" pos:end="161:47">.</operator><name pos:start="161:48" pos:end="161:51">conf</name><operator pos:start="161:52" pos:end="161:52">.</operator><name pos:start="161:53" pos:end="161:63">min_io_size</name></name> <operator pos:start="161:65" pos:end="161:66">&gt;&gt;</operator> <literal type="number" pos:start="161:68" pos:end="161:68">9</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="163:13" pos:end="163:69"><decl pos:start="163:13" pos:end="163:68"><type pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:20">unsigned</name> <name pos:start="163:22" pos:end="163:24">int</name></type> <name pos:start="163:26" pos:end="163:36">opt_io_size</name> <init pos:start="163:38" pos:end="163:68">= <expr pos:start="163:40" pos:end="163:68"><name pos:start="163:40" pos:end="163:63"><name pos:start="163:40" pos:end="163:40">s</name><operator pos:start="163:41" pos:end="163:42">-&gt;</operator><name pos:start="163:43" pos:end="163:46">qdev</name><operator pos:start="163:47" pos:end="163:47">.</operator><name pos:start="163:48" pos:end="163:51">conf</name><operator pos:start="163:52" pos:end="163:52">.</operator><name pos:start="163:53" pos:end="163:63">opt_io_size</name></name> <operator pos:start="163:65" pos:end="163:66">&gt;&gt;</operator> <literal type="number" pos:start="163:68" pos:end="163:68">9</literal></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="167:13" pos:end="167:54">/* required VPD size with unmap support */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:38"><expr pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:21"><name pos:start="169:13" pos:end="169:18">outbuf</name><index pos:start="169:19" pos:end="169:21">[<expr pos:start="169:20" pos:end="169:20"><literal type="number" pos:start="169:20" pos:end="169:20">3</literal></expr>]</index></name> <operator pos:start="169:23" pos:end="169:23">=</operator> <name pos:start="169:25" pos:end="169:30">buflen</name> <operator pos:start="169:32" pos:end="169:32">=</operator> <literal type="number" pos:start="169:34" pos:end="169:37">0x3c</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="173:13" pos:end="173:46"><expr pos:start="173:13" pos:end="173:45"><call pos:start="173:13" pos:end="173:45"><name pos:start="173:13" pos:end="173:18">memset</name><argument_list pos:start="173:19" pos:end="173:45">(<argument pos:start="173:20" pos:end="173:29"><expr pos:start="173:20" pos:end="173:29"><name pos:start="173:20" pos:end="173:25">outbuf</name> <operator pos:start="173:27" pos:end="173:27">+</operator> <literal type="number" pos:start="173:29" pos:end="173:29">4</literal></expr></argument>, <argument pos:start="173:32" pos:end="173:32"><expr pos:start="173:32" pos:end="173:32"><literal type="number" pos:start="173:32" pos:end="173:32">0</literal></expr></argument>, <argument pos:start="173:35" pos:end="173:44"><expr pos:start="173:35" pos:end="173:44"><name pos:start="173:35" pos:end="173:40">buflen</name> <operator pos:start="173:42" pos:end="173:42">-</operator> <literal type="number" pos:start="173:44" pos:end="173:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="177:13" pos:end="177:53">/* optimal transfer length granularity */</comment>

            <expr_stmt pos:start="179:13" pos:end="179:50"><expr pos:start="179:13" pos:end="179:49"><name pos:start="179:13" pos:end="179:21"><name pos:start="179:13" pos:end="179:18">outbuf</name><index pos:start="179:19" pos:end="179:21">[<expr pos:start="179:20" pos:end="179:20"><literal type="number" pos:start="179:20" pos:end="179:20">6</literal></expr>]</index></name> <operator pos:start="179:23" pos:end="179:23">=</operator> <operator pos:start="179:25" pos:end="179:25">(</operator><name pos:start="179:26" pos:end="179:36">min_io_size</name> <operator pos:start="179:38" pos:end="179:39">&gt;&gt;</operator> <literal type="number" pos:start="179:41" pos:end="179:41">8</literal><operator pos:start="179:42" pos:end="179:42">)</operator> <operator pos:start="179:44" pos:end="179:44">&amp;</operator> <literal type="number" pos:start="179:46" pos:end="179:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:43"><expr pos:start="181:13" pos:end="181:42"><name pos:start="181:13" pos:end="181:21"><name pos:start="181:13" pos:end="181:18">outbuf</name><index pos:start="181:19" pos:end="181:21">[<expr pos:start="181:20" pos:end="181:20"><literal type="number" pos:start="181:20" pos:end="181:20">7</literal></expr>]</index></name> <operator pos:start="181:23" pos:end="181:23">=</operator> <name pos:start="181:25" pos:end="181:35">min_io_size</name> <operator pos:start="181:37" pos:end="181:37">&amp;</operator> <literal type="number" pos:start="181:39" pos:end="181:42">0xff</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="185:13" pos:end="185:41">/* optimal transfer length */</comment>

            <expr_stmt pos:start="187:13" pos:end="187:52"><expr pos:start="187:13" pos:end="187:51"><name pos:start="187:13" pos:end="187:22"><name pos:start="187:13" pos:end="187:18">outbuf</name><index pos:start="187:19" pos:end="187:22">[<expr pos:start="187:20" pos:end="187:21"><literal type="number" pos:start="187:20" pos:end="187:21">12</literal></expr>]</index></name> <operator pos:start="187:24" pos:end="187:24">=</operator> <operator pos:start="187:26" pos:end="187:26">(</operator><name pos:start="187:27" pos:end="187:37">opt_io_size</name> <operator pos:start="187:39" pos:end="187:40">&gt;&gt;</operator> <literal type="number" pos:start="187:42" pos:end="187:43">24</literal><operator pos:start="187:44" pos:end="187:44">)</operator> <operator pos:start="187:46" pos:end="187:46">&amp;</operator> <literal type="number" pos:start="187:48" pos:end="187:51">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:52"><expr pos:start="189:13" pos:end="189:51"><name pos:start="189:13" pos:end="189:22"><name pos:start="189:13" pos:end="189:18">outbuf</name><index pos:start="189:19" pos:end="189:22">[<expr pos:start="189:20" pos:end="189:21"><literal type="number" pos:start="189:20" pos:end="189:21">13</literal></expr>]</index></name> <operator pos:start="189:24" pos:end="189:24">=</operator> <operator pos:start="189:26" pos:end="189:26">(</operator><name pos:start="189:27" pos:end="189:37">opt_io_size</name> <operator pos:start="189:39" pos:end="189:40">&gt;&gt;</operator> <literal type="number" pos:start="189:42" pos:end="189:43">16</literal><operator pos:start="189:44" pos:end="189:44">)</operator> <operator pos:start="189:46" pos:end="189:46">&amp;</operator> <literal type="number" pos:start="189:48" pos:end="189:51">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:51"><expr pos:start="191:13" pos:end="191:50"><name pos:start="191:13" pos:end="191:22"><name pos:start="191:13" pos:end="191:18">outbuf</name><index pos:start="191:19" pos:end="191:22">[<expr pos:start="191:20" pos:end="191:21"><literal type="number" pos:start="191:20" pos:end="191:21">14</literal></expr>]</index></name> <operator pos:start="191:24" pos:end="191:24">=</operator> <operator pos:start="191:26" pos:end="191:26">(</operator><name pos:start="191:27" pos:end="191:37">opt_io_size</name> <operator pos:start="191:39" pos:end="191:40">&gt;&gt;</operator> <literal type="number" pos:start="191:42" pos:end="191:42">8</literal><operator pos:start="191:43" pos:end="191:43">)</operator> <operator pos:start="191:45" pos:end="191:45">&amp;</operator> <literal type="number" pos:start="191:47" pos:end="191:50">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:44"><expr pos:start="193:13" pos:end="193:43"><name pos:start="193:13" pos:end="193:22"><name pos:start="193:13" pos:end="193:18">outbuf</name><index pos:start="193:19" pos:end="193:22">[<expr pos:start="193:20" pos:end="193:21"><literal type="number" pos:start="193:20" pos:end="193:21">15</literal></expr>]</index></name> <operator pos:start="193:24" pos:end="193:24">=</operator> <name pos:start="193:26" pos:end="193:36">opt_io_size</name> <operator pos:start="193:38" pos:end="193:38">&amp;</operator> <literal type="number" pos:start="193:40" pos:end="193:43">0xff</literal></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        </block_content>}</block>

        <default pos:start="199:9" pos:end="199:16">default:</default>

            <expr_stmt pos:start="201:13" pos:end="203:64"><expr pos:start="201:13" pos:end="203:63"><call pos:start="201:13" pos:end="203:63"><name pos:start="201:13" pos:end="201:16">BADF</name><argument_list pos:start="201:17" pos:end="203:63">(<argument pos:start="201:18" pos:end="203:36"><expr pos:start="201:18" pos:end="203:36"><literal type="string" pos:start="201:18" pos:end="201:59">"Error: unsupported Inquiry (EVPD[%02X]) "</literal>

                 <literal type="string" pos:start="203:18" pos:end="203:36">"buffer size %zd\n"</literal></expr></argument>, <argument pos:start="203:39" pos:end="203:47"><expr pos:start="203:39" pos:end="203:47"><name pos:start="203:39" pos:end="203:47">page_code</name></expr></argument>, <argument pos:start="203:50" pos:end="203:62"><expr pos:start="203:50" pos:end="203:62"><name pos:start="203:50" pos:end="203:62"><name pos:start="203:50" pos:end="203:52">req</name><operator pos:start="203:53" pos:end="203:54">-&gt;</operator><name pos:start="203:55" pos:end="203:57">cmd</name><operator pos:start="203:58" pos:end="203:58">.</operator><name pos:start="203:59" pos:end="203:62">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="205:13" pos:end="205:22">return <expr pos:start="205:20" pos:end="205:21"><operator pos:start="205:20" pos:end="205:20">-</operator><literal type="number" pos:start="205:21" pos:end="205:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

        <comment type="block" pos:start="209:9" pos:end="209:28">/* done with EVPD */</comment>

        <return pos:start="211:9" pos:end="211:22">return <expr pos:start="211:16" pos:end="211:21"><name pos:start="211:16" pos:end="211:21">buflen</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="217:5" pos:end="217:31">/* Standard INQUIRY data */</comment>

    <if_stmt pos:start="219:5" pos:end="227:5"><if pos:start="219:5" pos:end="227:5">if <condition pos:start="219:8" pos:end="219:29">(<expr pos:start="219:9" pos:end="219:28"><name pos:start="219:9" pos:end="219:23"><name pos:start="219:9" pos:end="219:11">req</name><operator pos:start="219:12" pos:end="219:13">-&gt;</operator><name pos:start="219:14" pos:end="219:16">cmd</name><operator pos:start="219:17" pos:end="219:17">.</operator><name pos:start="219:18" pos:end="219:20">buf</name><index pos:start="219:21" pos:end="219:23">[<expr pos:start="219:22" pos:end="219:22"><literal type="number" pos:start="219:22" pos:end="219:22">2</literal></expr>]</index></name> <operator pos:start="219:25" pos:end="219:26">!=</operator> <literal type="number" pos:start="219:28" pos:end="219:28">0</literal></expr>)</condition> <block pos:start="219:31" pos:end="227:5">{<block_content pos:start="221:9" pos:end="225:18">

        <expr_stmt pos:start="221:9" pos:end="223:54"><expr pos:start="221:9" pos:end="223:53"><call pos:start="221:9" pos:end="223:53"><name pos:start="221:9" pos:end="221:12">BADF</name><argument_list pos:start="221:13" pos:end="223:53">(<argument pos:start="221:14" pos:end="223:35"><expr pos:start="221:14" pos:end="223:35"><literal type="string" pos:start="221:14" pos:end="221:54">"Error: Inquiry (STANDARD) page or code "</literal>

             <literal type="string" pos:start="223:14" pos:end="223:35">"is non-zero [%02X]\n"</literal></expr></argument>, <argument pos:start="223:38" pos:end="223:52"><expr pos:start="223:38" pos:end="223:52"><name pos:start="223:38" pos:end="223:52"><name pos:start="223:38" pos:end="223:40">req</name><operator pos:start="223:41" pos:end="223:42">-&gt;</operator><name pos:start="223:43" pos:end="223:45">cmd</name><operator pos:start="223:46" pos:end="223:46">.</operator><name pos:start="223:47" pos:end="223:49">buf</name><index pos:start="223:50" pos:end="223:52">[<expr pos:start="223:51" pos:end="223:51"><literal type="number" pos:start="223:51" pos:end="223:51">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="225:9" pos:end="225:18">return <expr pos:start="225:16" pos:end="225:17"><operator pos:start="225:16" pos:end="225:16">-</operator><literal type="number" pos:start="225:17" pos:end="225:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:24">/* PAGE CODE == 0 */</comment>

    <if_stmt pos:start="233:5" pos:end="241:5"><if pos:start="233:5" pos:end="241:5">if <condition pos:start="233:8" pos:end="233:26">(<expr pos:start="233:9" pos:end="233:25"><name pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:11">req</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:16">cmd</name><operator pos:start="233:17" pos:end="233:17">.</operator><name pos:start="233:18" pos:end="233:21">xfer</name></name> <operator pos:start="233:23" pos:end="233:23">&lt;</operator> <literal type="number" pos:start="233:25" pos:end="233:25">5</literal></expr>)</condition> <block pos:start="233:28" pos:end="241:5">{<block_content pos:start="235:9" pos:end="239:18">

        <expr_stmt pos:start="235:9" pos:end="237:48"><expr pos:start="235:9" pos:end="237:47"><call pos:start="235:9" pos:end="237:47"><name pos:start="235:9" pos:end="235:12">BADF</name><argument_list pos:start="235:13" pos:end="237:47">(<argument pos:start="235:14" pos:end="237:31"><expr pos:start="235:14" pos:end="237:31"><literal type="string" pos:start="235:14" pos:end="235:57">"Error: Inquiry (STANDARD) buffer size %zd "</literal>

             <literal type="string" pos:start="237:14" pos:end="237:31">"is less than 5\n"</literal></expr></argument>, <argument pos:start="237:34" pos:end="237:46"><expr pos:start="237:34" pos:end="237:46"><name pos:start="237:34" pos:end="237:46"><name pos:start="237:34" pos:end="237:36">req</name><operator pos:start="237:37" pos:end="237:38">-&gt;</operator><name pos:start="237:39" pos:end="237:41">cmd</name><operator pos:start="237:42" pos:end="237:42">.</operator><name pos:start="237:43" pos:end="237:46">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="239:9" pos:end="239:18">return <expr pos:start="239:16" pos:end="239:17"><operator pos:start="239:16" pos:end="239:16">-</operator><literal type="number" pos:start="239:17" pos:end="239:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:27"><expr pos:start="245:5" pos:end="245:26"><name pos:start="245:5" pos:end="245:10">buflen</name> <operator pos:start="245:12" pos:end="245:12">=</operator> <name pos:start="245:14" pos:end="245:26"><name pos:start="245:14" pos:end="245:16">req</name><operator pos:start="245:17" pos:end="245:18">-&gt;</operator><name pos:start="245:19" pos:end="245:21">cmd</name><operator pos:start="245:22" pos:end="245:22">.</operator><name pos:start="245:23" pos:end="245:26">xfer</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="249:38"><if pos:start="247:5" pos:end="249:38">if <condition pos:start="247:8" pos:end="247:38">(<expr pos:start="247:9" pos:end="247:37"><name pos:start="247:9" pos:end="247:14">buflen</name> <operator pos:start="247:16" pos:end="247:16">&gt;</operator> <name pos:start="247:18" pos:end="247:37">SCSI_MAX_INQUIRY_LEN</name></expr>)</condition><block type="pseudo" pos:start="249:9" pos:end="249:38"><block_content pos:start="249:9" pos:end="249:38">

        <expr_stmt pos:start="249:9" pos:end="249:38"><expr pos:start="249:9" pos:end="249:37"><name pos:start="249:9" pos:end="249:14">buflen</name> <operator pos:start="249:16" pos:end="249:16">=</operator> <name pos:start="249:18" pos:end="249:37">SCSI_MAX_INQUIRY_LEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:30"><expr pos:start="253:5" pos:end="253:29"><call pos:start="253:5" pos:end="253:29"><name pos:start="253:5" pos:end="253:10">memset</name><argument_list pos:start="253:11" pos:end="253:29">(<argument pos:start="253:12" pos:end="253:17"><expr pos:start="253:12" pos:end="253:17"><name pos:start="253:12" pos:end="253:17">outbuf</name></expr></argument>, <argument pos:start="253:20" pos:end="253:20"><expr pos:start="253:20" pos:end="253:20"><literal type="number" pos:start="253:20" pos:end="253:20">0</literal></expr></argument>, <argument pos:start="253:23" pos:end="253:28"><expr pos:start="253:23" pos:end="253:28"><name pos:start="253:23" pos:end="253:28">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="257:5" pos:end="263:5"><if pos:start="257:5" pos:end="263:5">if <condition pos:start="257:8" pos:end="257:41">(<expr pos:start="257:9" pos:end="257:40"><name pos:start="257:9" pos:end="257:16"><name pos:start="257:9" pos:end="257:11">req</name><operator pos:start="257:12" pos:end="257:13">-&gt;</operator><name pos:start="257:14" pos:end="257:16">lun</name></name> <operator pos:start="257:18" pos:end="257:19">||</operator> <name pos:start="257:21" pos:end="257:35"><name pos:start="257:21" pos:end="257:23">req</name><operator pos:start="257:24" pos:end="257:25">-&gt;</operator><name pos:start="257:26" pos:end="257:28">cmd</name><operator pos:start="257:29" pos:end="257:29">.</operator><name pos:start="257:30" pos:end="257:32">buf</name><index pos:start="257:33" pos:end="257:35">[<expr pos:start="257:34" pos:end="257:34"><literal type="number" pos:start="257:34" pos:end="257:34">1</literal></expr>]</index></name> <operator pos:start="257:37" pos:end="257:38">&gt;&gt;</operator> <literal type="number" pos:start="257:40" pos:end="257:40">5</literal></expr>)</condition> <block pos:start="257:43" pos:end="263:5">{<block_content pos:start="259:9" pos:end="261:22">

        <expr_stmt pos:start="259:9" pos:end="259:25"><expr pos:start="259:9" pos:end="259:24"><name pos:start="259:9" pos:end="259:17"><name pos:start="259:9" pos:end="259:14">outbuf</name><index pos:start="259:15" pos:end="259:17">[<expr pos:start="259:16" pos:end="259:16"><literal type="number" pos:start="259:16" pos:end="259:16">0</literal></expr>]</index></name> <operator pos:start="259:19" pos:end="259:19">=</operator> <literal type="number" pos:start="259:21" pos:end="259:24">0x7f</literal></expr>;</expr_stmt>	<comment type="block" pos:start="259:33" pos:end="259:55">/* LUN not supported */</comment>

        <return pos:start="261:9" pos:end="261:22">return <expr pos:start="261:16" pos:end="261:21"><name pos:start="261:16" pos:end="261:21">buflen</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="267:5" pos:end="281:5"><if pos:start="267:5" pos:end="275:5">if <condition pos:start="267:8" pos:end="267:53">(<expr pos:start="267:9" pos:end="267:52"><call pos:start="267:9" pos:end="267:33"><name pos:start="267:9" pos:end="267:26">bdrv_get_type_hint</name><argument_list pos:start="267:27" pos:end="267:33">(<argument pos:start="267:28" pos:end="267:32"><expr pos:start="267:28" pos:end="267:32"><name pos:start="267:28" pos:end="267:32"><name pos:start="267:28" pos:end="267:28">s</name><operator pos:start="267:29" pos:end="267:30">-&gt;</operator><name pos:start="267:31" pos:end="267:32">bs</name></name></expr></argument>)</argument_list></call> <operator pos:start="267:35" pos:end="267:36">==</operator> <name pos:start="267:38" pos:end="267:52">BDRV_TYPE_CDROM</name></expr>)</condition> <block pos:start="267:55" pos:end="275:5">{<block_content pos:start="269:9" pos:end="273:52">

        <expr_stmt pos:start="269:9" pos:end="269:22"><expr pos:start="269:9" pos:end="269:21"><name pos:start="269:9" pos:end="269:17"><name pos:start="269:9" pos:end="269:14">outbuf</name><index pos:start="269:15" pos:end="269:17">[<expr pos:start="269:16" pos:end="269:16"><literal type="number" pos:start="269:16" pos:end="269:16">0</literal></expr>]</index></name> <operator pos:start="269:19" pos:end="269:19">=</operator> <literal type="number" pos:start="269:21" pos:end="269:21">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:25"><expr pos:start="271:9" pos:end="271:24"><name pos:start="271:9" pos:end="271:17"><name pos:start="271:9" pos:end="271:14">outbuf</name><index pos:start="271:15" pos:end="271:17">[<expr pos:start="271:16" pos:end="271:16"><literal type="number" pos:start="271:16" pos:end="271:16">1</literal></expr>]</index></name> <operator pos:start="271:19" pos:end="271:19">=</operator> <literal type="number" pos:start="271:21" pos:end="271:24">0x80</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:52"><expr pos:start="273:9" pos:end="273:51"><call pos:start="273:9" pos:end="273:51"><name pos:start="273:9" pos:end="273:14">memcpy</name><argument_list pos:start="273:15" pos:end="273:51">(<argument pos:start="273:16" pos:end="273:26"><expr pos:start="273:16" pos:end="273:26"><operator pos:start="273:16" pos:end="273:16">&amp;</operator><name pos:start="273:17" pos:end="273:26"><name pos:start="273:17" pos:end="273:22">outbuf</name><index pos:start="273:23" pos:end="273:26">[<expr pos:start="273:24" pos:end="273:25"><literal type="number" pos:start="273:24" pos:end="273:25">16</literal></expr>]</index></name></expr></argument>, <argument pos:start="273:29" pos:end="273:46"><expr pos:start="273:29" pos:end="273:46"><literal type="string" pos:start="273:29" pos:end="273:46">"QEMU CD-ROM     "</literal></expr></argument>, <argument pos:start="273:49" pos:end="273:50"><expr pos:start="273:49" pos:end="273:50"><literal type="number" pos:start="273:49" pos:end="273:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="275:7" pos:end="281:5">else <block pos:start="275:12" pos:end="281:5">{<block_content pos:start="277:9" pos:end="279:52">

        <expr_stmt pos:start="277:9" pos:end="277:22"><expr pos:start="277:9" pos:end="277:21"><name pos:start="277:9" pos:end="277:17"><name pos:start="277:9" pos:end="277:14">outbuf</name><index pos:start="277:15" pos:end="277:17">[<expr pos:start="277:16" pos:end="277:16"><literal type="number" pos:start="277:16" pos:end="277:16">0</literal></expr>]</index></name> <operator pos:start="277:19" pos:end="277:19">=</operator> <literal type="number" pos:start="277:21" pos:end="277:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:52"><expr pos:start="279:9" pos:end="279:51"><call pos:start="279:9" pos:end="279:51"><name pos:start="279:9" pos:end="279:14">memcpy</name><argument_list pos:start="279:15" pos:end="279:51">(<argument pos:start="279:16" pos:end="279:26"><expr pos:start="279:16" pos:end="279:26"><operator pos:start="279:16" pos:end="279:16">&amp;</operator><name pos:start="279:17" pos:end="279:26"><name pos:start="279:17" pos:end="279:22">outbuf</name><index pos:start="279:23" pos:end="279:26">[<expr pos:start="279:24" pos:end="279:25"><literal type="number" pos:start="279:24" pos:end="279:25">16</literal></expr>]</index></name></expr></argument>, <argument pos:start="279:29" pos:end="279:46"><expr pos:start="279:29" pos:end="279:46"><literal type="string" pos:start="279:29" pos:end="279:46">"QEMU HARDDISK   "</literal></expr></argument>, <argument pos:start="279:49" pos:end="279:50"><expr pos:start="279:49" pos:end="279:50"><literal type="number" pos:start="279:49" pos:end="279:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:38"><expr pos:start="283:5" pos:end="283:37"><call pos:start="283:5" pos:end="283:37"><name pos:start="283:5" pos:end="283:10">memcpy</name><argument_list pos:start="283:11" pos:end="283:37">(<argument pos:start="283:12" pos:end="283:21"><expr pos:start="283:12" pos:end="283:21"><operator pos:start="283:12" pos:end="283:12">&amp;</operator><name pos:start="283:13" pos:end="283:21"><name pos:start="283:13" pos:end="283:18">outbuf</name><index pos:start="283:19" pos:end="283:21">[<expr pos:start="283:20" pos:end="283:20"><literal type="number" pos:start="283:20" pos:end="283:20">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="283:24" pos:end="283:33"><expr pos:start="283:24" pos:end="283:33"><literal type="string" pos:start="283:24" pos:end="283:33">"QEMU    "</literal></expr></argument>, <argument pos:start="283:36" pos:end="283:36"><expr pos:start="283:36" pos:end="283:36"><literal type="number" pos:start="283:36" pos:end="283:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:67"><expr pos:start="285:5" pos:end="285:66"><call pos:start="285:5" pos:end="285:66"><name pos:start="285:5" pos:end="285:10">memcpy</name><argument_list pos:start="285:11" pos:end="285:66">(<argument pos:start="285:12" pos:end="285:22"><expr pos:start="285:12" pos:end="285:22"><operator pos:start="285:12" pos:end="285:12">&amp;</operator><name pos:start="285:13" pos:end="285:22"><name pos:start="285:13" pos:end="285:18">outbuf</name><index pos:start="285:19" pos:end="285:22">[<expr pos:start="285:20" pos:end="285:21"><literal type="number" pos:start="285:20" pos:end="285:21">32</literal></expr>]</index></name></expr></argument>, <argument pos:start="285:25" pos:end="285:62"><expr pos:start="285:25" pos:end="285:62"><ternary pos:start="285:25" pos:end="285:62"><condition pos:start="285:25" pos:end="285:36"><expr pos:start="285:25" pos:end="285:34"><name pos:start="285:25" pos:end="285:34"><name pos:start="285:25" pos:end="285:25">s</name><operator pos:start="285:26" pos:end="285:27">-&gt;</operator><name pos:start="285:28" pos:end="285:34">version</name></name></expr> ?</condition><then pos:start="285:38" pos:end="285:47"> <expr pos:start="285:38" pos:end="285:47"><name pos:start="285:38" pos:end="285:47"><name pos:start="285:38" pos:end="285:38">s</name><operator pos:start="285:39" pos:end="285:40">-&gt;</operator><name pos:start="285:41" pos:end="285:47">version</name></name></expr> </then><else pos:start="285:49" pos:end="285:62">: <expr pos:start="285:51" pos:end="285:62"><name pos:start="285:51" pos:end="285:62">QEMU_VERSION</name></expr></else></ternary></expr></argument>, <argument pos:start="285:65" pos:end="285:65"><expr pos:start="285:65" pos:end="285:65"><literal type="number" pos:start="285:65" pos:end="285:65">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="287:5" pos:end="297:7">/*

     * We claim conformance to SPC-3, which is required for guests

     * to ask for modern features like READ CAPACITY(16) or the

     * block characteristics VPD page by default.  Not all of SPC-3

     * is actually implemented, but we're good enough.

     */</comment>

    <expr_stmt pos:start="299:5" pos:end="299:18"><expr pos:start="299:5" pos:end="299:17"><name pos:start="299:5" pos:end="299:13"><name pos:start="299:5" pos:end="299:10">outbuf</name><index pos:start="299:11" pos:end="299:13">[<expr pos:start="299:12" pos:end="299:12"><literal type="number" pos:start="299:12" pos:end="299:12">2</literal></expr>]</index></name> <operator pos:start="299:15" pos:end="299:15">=</operator> <literal type="number" pos:start="299:17" pos:end="299:17">5</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:18"><expr pos:start="301:5" pos:end="301:17"><name pos:start="301:5" pos:end="301:13"><name pos:start="301:5" pos:end="301:10">outbuf</name><index pos:start="301:11" pos:end="301:13">[<expr pos:start="301:12" pos:end="301:12"><literal type="number" pos:start="301:12" pos:end="301:12">3</literal></expr>]</index></name> <operator pos:start="301:15" pos:end="301:15">=</operator> <literal type="number" pos:start="301:17" pos:end="301:17">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="301:20" pos:end="301:33">/* Format 2 */</comment>



    <if_stmt pos:start="305:5" pos:end="317:5"><if pos:start="305:5" pos:end="309:5">if <condition pos:start="305:8" pos:end="305:20">(<expr pos:start="305:9" pos:end="305:19"><name pos:start="305:9" pos:end="305:14">buflen</name> <operator pos:start="305:16" pos:end="305:16">&gt;</operator> <literal type="number" pos:start="305:18" pos:end="305:19">36</literal></expr>)</condition> <block pos:start="305:22" pos:end="309:5">{<block_content pos:start="307:9" pos:end="307:31">

        <expr_stmt pos:start="307:9" pos:end="307:31"><expr pos:start="307:9" pos:end="307:30"><name pos:start="307:9" pos:end="307:17"><name pos:start="307:9" pos:end="307:14">outbuf</name><index pos:start="307:15" pos:end="307:17">[<expr pos:start="307:16" pos:end="307:16"><literal type="number" pos:start="307:16" pos:end="307:16">4</literal></expr>]</index></name> <operator pos:start="307:19" pos:end="307:19">=</operator> <name pos:start="307:21" pos:end="307:26">buflen</name> <operator pos:start="307:28" pos:end="307:28">-</operator> <literal type="number" pos:start="307:30" pos:end="307:30">5</literal></expr>;</expr_stmt> <comment type="block" pos:start="307:33" pos:end="307:71">/* Additional Length = (Len - 1) - 4 */</comment>

    </block_content>}</block></if> <else pos:start="309:7" pos:end="317:5">else <block pos:start="309:12" pos:end="317:5">{<block_content pos:start="315:9" pos:end="315:27">

        <comment type="block" pos:start="311:9" pos:end="313:55">/* If the allocation length of CDB is too small,

               the additional length is not adjusted */</comment>

        <expr_stmt pos:start="315:9" pos:end="315:27"><expr pos:start="315:9" pos:end="315:26"><name pos:start="315:9" pos:end="315:17"><name pos:start="315:9" pos:end="315:14">outbuf</name><index pos:start="315:15" pos:end="315:17">[<expr pos:start="315:16" pos:end="315:16"><literal type="number" pos:start="315:16" pos:end="315:16">4</literal></expr>]</index></name> <operator pos:start="315:19" pos:end="315:19">=</operator> <literal type="number" pos:start="315:21" pos:end="315:24">36</literal> <operator pos:start="315:24" pos:end="315:24">-</operator> <literal type="number" pos:start="315:26" pos:end="315:26">5</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="321:5" pos:end="321:38">/* Sync data transfer and TCQ.  */</comment>

    <expr_stmt pos:start="323:5" pos:end="323:50"><expr pos:start="323:5" pos:end="323:49"><name pos:start="323:5" pos:end="323:13"><name pos:start="323:5" pos:end="323:10">outbuf</name><index pos:start="323:11" pos:end="323:13">[<expr pos:start="323:12" pos:end="323:12"><literal type="number" pos:start="323:12" pos:end="323:12">7</literal></expr>]</index></name> <operator pos:start="323:15" pos:end="323:15">=</operator> <literal type="number" pos:start="323:17" pos:end="323:20">0x10</literal> <operator pos:start="323:22" pos:end="323:22">|</operator> <operator pos:start="323:24" pos:end="323:24">(</operator><ternary pos:start="323:25" pos:end="323:48"><condition pos:start="323:25" pos:end="323:39"><expr pos:start="323:25" pos:end="323:37"><name pos:start="323:25" pos:end="323:37"><name pos:start="323:25" pos:end="323:27">req</name><operator pos:start="323:28" pos:end="323:29">-&gt;</operator><name pos:start="323:30" pos:end="323:32">bus</name><operator pos:start="323:33" pos:end="323:34">-&gt;</operator><name pos:start="323:35" pos:end="323:37">tcq</name></name></expr> ?</condition><then pos:start="323:41" pos:end="323:44"> <expr pos:start="323:41" pos:end="323:44"><literal type="number" pos:start="323:41" pos:end="323:44">0x02</literal></expr> </then><else pos:start="323:46" pos:end="323:48">: <expr pos:start="323:48" pos:end="323:48"><literal type="number" pos:start="323:48" pos:end="323:48">0</literal></expr></else></ternary><operator pos:start="323:49" pos:end="323:49">)</operator></expr>;</expr_stmt>

    <return pos:start="325:5" pos:end="325:18">return <expr pos:start="325:12" pos:end="325:17"><name pos:start="325:12" pos:end="325:17">buflen</name></expr>;</return>

</block_content>}</block></function>
</unit>
