<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19589.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">tpm_passthrough_unix_tx_bufs</name><parameter_list pos:start="1:40" pos:end="5:71">(<parameter pos:start="1:41" pos:end="1:64"><decl pos:start="1:41" pos:end="1:64"><type pos:start="1:41" pos:end="1:64"><name pos:start="1:41" pos:end="1:56">TPMPassthruState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:64">tpm_pt</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:57"><decl pos:start="3:41" pos:end="3:57"><type pos:start="3:41" pos:end="3:57"><specifier pos:start="3:41" pos:end="3:45">const</specifier> <name pos:start="3:47" pos:end="3:53">uint8_t</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:57">in</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:74"><decl pos:start="3:60" pos:end="3:74"><type pos:start="3:60" pos:end="3:74"><name pos:start="3:60" pos:end="3:67">uint32_t</name></type> <name pos:start="3:69" pos:end="3:74">in_len</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:52"><decl pos:start="5:41" pos:end="5:52"><type pos:start="5:41" pos:end="5:52"><name pos:start="5:41" pos:end="5:47">uint8_t</name> <modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:52">out</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:70"><decl pos:start="5:55" pos:end="5:70"><type pos:start="5:55" pos:end="5:70"><name pos:start="5:55" pos:end="5:62">uint32_t</name></type> <name pos:start="5:64" pos:end="5:70">out_len</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="91:1">{<block_content pos:start="9:5" pos:end="89:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:10">tpm_pt</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:27">tpm_op_canceled</name></name> <operator pos:start="13:29" pos:end="13:29">=</operator> <name pos:start="13:31" pos:end="13:35">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:33"><expr pos:start="15:5" pos:end="15:32"><name pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:10">tpm_pt</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:25">tpm_executing</name></name> <operator pos:start="15:27" pos:end="15:27">=</operator> <name pos:start="15:29" pos:end="15:32">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:65"><expr pos:start="19:5" pos:end="19:64"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:64"><name pos:start="19:11" pos:end="19:36">tpm_passthrough_unix_write</name><argument_list pos:start="19:37" pos:end="19:64">(<argument pos:start="19:38" pos:end="19:51"><expr pos:start="19:38" pos:end="19:51"><name pos:start="19:38" pos:end="19:51"><name pos:start="19:38" pos:end="19:43">tpm_pt</name><operator pos:start="19:44" pos:end="19:45">-&gt;</operator><name pos:start="19:46" pos:end="19:51">tpm_fd</name></name></expr></argument>, <argument pos:start="19:54" pos:end="19:55"><expr pos:start="19:54" pos:end="19:55"><name pos:start="19:54" pos:end="19:55">in</name></expr></argument>, <argument pos:start="19:58" pos:end="19:63"><expr pos:start="19:58" pos:end="19:63"><name pos:start="19:58" pos:end="19:63">in_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="37:5"><if pos:start="21:5" pos:end="37:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:14">!=</operator> <name pos:start="21:16" pos:end="21:21">in_len</name></expr>)</condition> <block pos:start="21:24" pos:end="37:5">{<block_content pos:start="23:9" pos:end="35:22">

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="33:9">if <condition pos:start="23:12" pos:end="25:60">(<expr pos:start="23:13" pos:end="25:59"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:36"><name pos:start="23:14" pos:end="23:19">tpm_pt</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:36">tpm_op_canceled</name></name> <operator pos:start="23:38" pos:end="23:39">||</operator>

            <operator pos:start="25:13" pos:end="25:13">(</operator><name pos:start="25:14" pos:end="25:36"><name pos:start="25:14" pos:end="25:19">tpm_pt</name><operator pos:start="25:20" pos:end="25:21">-&gt;</operator><name pos:start="25:22" pos:end="25:36">tpm_op_canceled</name></name> <operator pos:start="25:38" pos:end="25:39">&amp;&amp;</operator> <name pos:start="25:41" pos:end="25:45">errno</name> <operator pos:start="25:47" pos:end="25:48">!=</operator> <name pos:start="25:50" pos:end="25:58">ECANCELED</name><operator pos:start="25:59" pos:end="25:59">)</operator></expr>)</condition> <block pos:start="25:62" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:49">

            <expr_stmt pos:start="27:13" pos:end="31:49"><expr pos:start="27:13" pos:end="31:48"><call pos:start="27:13" pos:end="31:48"><name pos:start="27:13" pos:end="27:24">error_report</name><argument_list pos:start="27:25" pos:end="31:48">(<argument pos:start="27:26" pos:end="29:44"><expr pos:start="27:26" pos:end="29:44"><literal type="string" pos:start="27:26" pos:end="27:74">"tpm_passthrough: error while transmitting data "</literal>

                         <literal type="string" pos:start="29:26" pos:end="29:44">"to TPM: %s (%i)\n"</literal></expr></argument>,

                         <argument pos:start="31:26" pos:end="31:40"><expr pos:start="31:26" pos:end="31:40"><call pos:start="31:26" pos:end="31:40"><name pos:start="31:26" pos:end="31:33">strerror</name><argument_list pos:start="31:34" pos:end="31:40">(<argument pos:start="31:35" pos:end="31:39"><expr pos:start="31:35" pos:end="31:39"><name pos:start="31:35" pos:end="31:39">errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:43" pos:end="31:47"><expr pos:start="31:43" pos:end="31:47"><name pos:start="31:43" pos:end="31:47">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="35:9" pos:end="35:22">goto <name pos:start="35:14" pos:end="35:21">err_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:34"><expr pos:start="41:5" pos:end="41:33"><name pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:10">tpm_pt</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:25">tpm_executing</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:33">false</name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:66"><expr pos:start="45:5" pos:end="45:65"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:65"><name pos:start="45:11" pos:end="45:35">tpm_passthrough_unix_read</name><argument_list pos:start="45:36" pos:end="45:65">(<argument pos:start="45:37" pos:end="45:50"><expr pos:start="45:37" pos:end="45:50"><name pos:start="45:37" pos:end="45:50"><name pos:start="45:37" pos:end="45:42">tpm_pt</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:50">tpm_fd</name></name></expr></argument>, <argument pos:start="45:53" pos:end="45:55"><expr pos:start="45:53" pos:end="45:55"><name pos:start="45:53" pos:end="45:55">out</name></expr></argument>, <argument pos:start="45:58" pos:end="45:64"><expr pos:start="45:58" pos:end="45:64"><name pos:start="45:58" pos:end="45:64">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="71:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">&lt;</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>)</condition> <block pos:start="47:18" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:9">

        <if_stmt pos:start="49:9" pos:end="59:9"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="51:60">(<expr pos:start="49:13" pos:end="51:59"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:36"><name pos:start="49:14" pos:end="49:19">tpm_pt</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:36">tpm_op_canceled</name></name> <operator pos:start="49:38" pos:end="49:39">||</operator>

            <operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:36"><name pos:start="51:14" pos:end="51:19">tpm_pt</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:36">tpm_op_canceled</name></name> <operator pos:start="51:38" pos:end="51:39">&amp;&amp;</operator> <name pos:start="51:41" pos:end="51:45">errno</name> <operator pos:start="51:47" pos:end="51:48">!=</operator> <name pos:start="51:50" pos:end="51:58">ECANCELED</name><operator pos:start="51:59" pos:end="51:59">)</operator></expr>)</condition> <block pos:start="51:62" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:49">

            <expr_stmt pos:start="53:13" pos:end="57:49"><expr pos:start="53:13" pos:end="57:48"><call pos:start="53:13" pos:end="57:48"><name pos:start="53:13" pos:end="53:24">error_report</name><argument_list pos:start="53:25" pos:end="57:48">(<argument pos:start="53:26" pos:end="55:41"><expr pos:start="53:26" pos:end="55:41"><literal type="string" pos:start="53:26" pos:end="53:74">"tpm_passthrough: error while reading data from "</literal>

                         <literal type="string" pos:start="55:26" pos:end="55:41">"TPM: %s (%i)\n"</literal></expr></argument>,

                         <argument pos:start="57:26" pos:end="57:40"><expr pos:start="57:26" pos:end="57:40"><call pos:start="57:26" pos:end="57:40"><name pos:start="57:26" pos:end="57:33">strerror</name><argument_list pos:start="57:34" pos:end="57:40">(<argument pos:start="57:35" pos:end="57:39"><expr pos:start="57:35" pos:end="57:39"><name pos:start="57:35" pos:end="57:39">errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="57:43" pos:end="57:47"><expr pos:start="57:43" pos:end="57:47"><name pos:start="57:43" pos:end="57:47">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="71:5">else if <condition pos:start="61:15" pos:end="63:64">(<expr pos:start="61:16" pos:end="63:63"><name pos:start="61:16" pos:end="61:18">ret</name> <operator pos:start="61:20" pos:end="61:20">&lt;</operator> <sizeof pos:start="61:22" pos:end="61:48">sizeof<argument_list pos:start="61:28" pos:end="61:48">(<argument pos:start="61:29" pos:end="61:47"><expr pos:start="61:29" pos:end="61:47">struct <name pos:start="61:36" pos:end="61:47">tpm_resp_hdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="61:50" pos:end="61:51">||</operator>

               <call pos:start="63:16" pos:end="63:56"><name pos:start="63:16" pos:end="63:51">tpm_passthrough_get_size_from_buffer</name><argument_list pos:start="63:52" pos:end="63:56">(<argument pos:start="63:53" pos:end="63:55"><expr pos:start="63:53" pos:end="63:55"><name pos:start="63:53" pos:end="63:55">out</name></expr></argument>)</argument_list></call> <operator pos:start="63:58" pos:end="63:59">!=</operator> <name pos:start="63:61" pos:end="63:63">ret</name></expr>)</condition> <block pos:start="63:66" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:42">

        <expr_stmt pos:start="65:9" pos:end="65:17"><expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">-</operator><literal type="number" pos:start="65:16" pos:end="65:16">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="69:42"><expr pos:start="67:9" pos:end="69:41"><call pos:start="67:9" pos:end="69:41"><name pos:start="67:9" pos:end="67:20">error_report</name><argument_list pos:start="67:21" pos:end="69:41">(<argument pos:start="67:22" pos:end="69:40"><expr pos:start="67:22" pos:end="69:40"><literal type="string" pos:start="67:22" pos:end="67:66">"tpm_passthrough: received invalid response "</literal>

                     <literal type="string" pos:start="69:22" pos:end="69:40">"packet from TPM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="75:1" pos:end="75:9"><name pos:start="75:1" pos:end="75:8">err_exit</name>:</label>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:16">(<expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">&lt;</operator> <literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>)</condition> <block pos:start="77:18" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:53">

        <expr_stmt pos:start="79:9" pos:end="79:53"><expr pos:start="79:9" pos:end="79:52"><call pos:start="79:9" pos:end="79:52"><name pos:start="79:9" pos:end="79:38">tpm_write_fatal_error_response</name><argument_list pos:start="79:39" pos:end="79:52">(<argument pos:start="79:40" pos:end="79:42"><expr pos:start="79:40" pos:end="79:42"><name pos:start="79:40" pos:end="79:42">out</name></expr></argument>, <argument pos:start="79:45" pos:end="79:51"><expr pos:start="79:45" pos:end="79:51"><name pos:start="79:45" pos:end="79:51">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:34"><expr pos:start="85:5" pos:end="85:33"><name pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:10">tpm_pt</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:25">tpm_executing</name></name> <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:33">false</name></expr>;</expr_stmt>



    <return pos:start="89:5" pos:end="89:15">return <expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
