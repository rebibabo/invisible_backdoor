<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10580.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">raw_open</name><parameter_list pos:start="1:20" pos:end="3:33">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:47">QDict</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">options</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:25">Error</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier><modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:32">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="151:1">{<block_content pos:start="7:5" pos:end="149:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">access_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:9">DWORD</name></type> <name pos:start="11:11" pos:end="11:20">overlapped</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:24">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:11">type</name></name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:24">FTYPE_FILE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:70"><expr pos:start="27:5" pos:end="27:69"><name pos:start="27:5" pos:end="27:8">opts</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:69"><name pos:start="27:12" pos:end="27:27">qemu_opts_create</name><argument_list pos:start="27:28" pos:end="27:69">(<argument pos:start="27:29" pos:end="27:45"><expr pos:start="27:29" pos:end="27:45"><operator pos:start="27:29" pos:end="27:29">&amp;</operator><name pos:start="27:30" pos:end="27:45">raw_runtime_opts</name></expr></argument>, <argument pos:start="27:48" pos:end="27:51"><expr pos:start="27:48" pos:end="27:51"><name pos:start="27:48" pos:end="27:51">NULL</name></expr></argument>, <argument pos:start="27:54" pos:end="27:54"><expr pos:start="27:54" pos:end="27:54"><literal type="number" pos:start="27:54" pos:end="27:54">0</literal></expr></argument>, <argument pos:start="27:57" pos:end="27:68"><expr pos:start="27:57" pos:end="27:68"><operator pos:start="27:57" pos:end="27:57">&amp;</operator><name pos:start="27:58" pos:end="27:68">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:54"><expr pos:start="29:5" pos:end="29:53"><call pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:26">qemu_opts_absorb_qdict</name><argument_list pos:start="29:27" pos:end="29:53">(<argument pos:start="29:28" pos:end="29:31"><expr pos:start="29:28" pos:end="29:31"><name pos:start="29:28" pos:end="29:31">opts</name></expr></argument>, <argument pos:start="29:34" pos:end="29:40"><expr pos:start="29:34" pos:end="29:40"><name pos:start="29:34" pos:end="29:40">options</name></expr></argument>, <argument pos:start="29:43" pos:end="29:52"><expr pos:start="29:43" pos:end="29:52"><operator pos:start="29:43" pos:end="29:43">&amp;</operator><name pos:start="29:44" pos:end="29:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">local_err</name></expr>)</condition> <block pos:start="31:20" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:18">

        <expr_stmt pos:start="33:9" pos:end="33:41"><expr pos:start="33:9" pos:end="33:40"><call pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:23">error_propagate</name><argument_list pos:start="33:24" pos:end="33:40">(<argument pos:start="33:25" pos:end="33:28"><expr pos:start="33:25" pos:end="33:28"><name pos:start="33:25" pos:end="33:28">errp</name></expr></argument>, <argument pos:start="33:31" pos:end="33:39"><expr pos:start="33:31" pos:end="33:39"><name pos:start="33:31" pos:end="33:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <operator pos:start="35:15" pos:end="35:15">-</operator><name pos:start="35:16" pos:end="35:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:12">filename</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:45"><name pos:start="43:16" pos:end="43:27">qemu_opt_get</name><argument_list pos:start="43:28" pos:end="43:45">(<argument pos:start="43:29" pos:end="43:32"><expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">opts</name></expr></argument>, <argument pos:start="43:35" pos:end="43:44"><expr pos:start="43:35" pos:end="43:44"><literal type="string" pos:start="43:35" pos:end="43:44">"filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:55"><expr pos:start="47:5" pos:end="47:54"><call pos:start="47:5" pos:end="47:54"><name pos:start="47:5" pos:end="47:19">raw_parse_flags</name><argument_list pos:start="47:20" pos:end="47:54">(<argument pos:start="47:21" pos:end="47:25"><expr pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:25">flags</name></expr></argument>, <argument pos:start="47:28" pos:end="47:40"><expr pos:start="47:28" pos:end="47:40"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:40">access_flags</name></expr></argument>, <argument pos:start="47:43" pos:end="47:53"><expr pos:start="47:43" pos:end="47:53"><operator pos:start="47:43" pos:end="47:43">&amp;</operator><name pos:start="47:44" pos:end="47:53">overlapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="69:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:42">(<expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:16">filename</name><index pos:start="51:17" pos:end="51:19">[<expr pos:start="51:18" pos:end="51:18"><literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>]</index></name> <operator pos:start="51:21" pos:end="51:22">&amp;&amp;</operator> <name pos:start="51:24" pos:end="51:34"><name pos:start="51:24" pos:end="51:31">filename</name><index pos:start="51:32" pos:end="51:34">[<expr pos:start="51:33" pos:end="51:33"><literal type="number" pos:start="51:33" pos:end="51:33">1</literal></expr>]</index></name> <operator pos:start="51:36" pos:end="51:37">==</operator> <literal type="char" pos:start="51:39" pos:end="51:41">':'</literal></expr>)</condition> <block pos:start="51:44" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:77">

        <expr_stmt pos:start="53:9" pos:end="53:77"><expr pos:start="53:9" pos:end="53:76"><call pos:start="53:9" pos:end="53:76"><name pos:start="53:9" pos:end="53:16">snprintf</name><argument_list pos:start="53:17" pos:end="53:76">(<argument pos:start="53:18" pos:end="53:30"><expr pos:start="53:18" pos:end="53:30"><name pos:start="53:18" pos:end="53:30"><name pos:start="53:18" pos:end="53:18">s</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:30">drive_path</name></name></expr></argument>, <argument pos:start="53:33" pos:end="53:53"><expr pos:start="53:33" pos:end="53:53"><sizeof pos:start="53:33" pos:end="53:53">sizeof<argument_list pos:start="53:39" pos:end="53:53">(<argument pos:start="53:40" pos:end="53:52"><expr pos:start="53:40" pos:end="53:52"><name pos:start="53:40" pos:end="53:52"><name pos:start="53:40" pos:end="53:40">s</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:52">drive_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:56" pos:end="53:62"><expr pos:start="53:56" pos:end="53:62"><literal type="string" pos:start="53:56" pos:end="53:62">"%c:\\"</literal></expr></argument>, <argument pos:start="53:65" pos:end="53:75"><expr pos:start="53:65" pos:end="53:75"><name pos:start="53:65" pos:end="53:75"><name pos:start="53:65" pos:end="53:72">filename</name><index pos:start="53:73" pos:end="53:75">[<expr pos:start="53:74" pos:end="53:74"><literal type="number" pos:start="53:74" pos:end="53:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="59:5">else if <condition pos:start="55:15" pos:end="55:58">(<expr pos:start="55:16" pos:end="55:57"><name pos:start="55:16" pos:end="55:26"><name pos:start="55:16" pos:end="55:23">filename</name><index pos:start="55:24" pos:end="55:26">[<expr pos:start="55:25" pos:end="55:25"><literal type="number" pos:start="55:25" pos:end="55:25">0</literal></expr>]</index></name> <operator pos:start="55:28" pos:end="55:29">==</operator> <literal type="char" pos:start="55:31" pos:end="55:34">'\\'</literal> <operator pos:start="55:36" pos:end="55:37">&amp;&amp;</operator> <name pos:start="55:39" pos:end="55:49"><name pos:start="55:39" pos:end="55:46">filename</name><index pos:start="55:47" pos:end="55:49">[<expr pos:start="55:48" pos:end="55:48"><literal type="number" pos:start="55:48" pos:end="55:48">1</literal></expr>]</index></name> <operator pos:start="55:51" pos:end="55:52">==</operator> <literal type="char" pos:start="55:54" pos:end="55:57">'\\'</literal></expr>)</condition> <block pos:start="55:60" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:29">

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:21">drive_path</name><index pos:start="57:22" pos:end="57:24">[<expr pos:start="57:23" pos:end="57:23"><literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>]</index></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <literal type="number" pos:start="57:28" pos:end="57:28">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="69:5">else <block pos:start="59:12" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:72">

        <comment type="block" pos:start="61:9" pos:end="61:29">/* Relative path.  */</comment>

        <decl_stmt pos:start="63:9" pos:end="63:27"><decl pos:start="63:9" pos:end="63:26"><type pos:start="63:9" pos:end="63:12"><name pos:start="63:9" pos:end="63:12">char</name></type> <name pos:start="63:14" pos:end="63:26"><name pos:start="63:14" pos:end="63:16">buf</name><index pos:start="63:17" pos:end="63:26">[<expr pos:start="63:18" pos:end="63:25"><name pos:start="63:18" pos:end="63:25">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:43"><expr pos:start="65:9" pos:end="65:42"><call pos:start="65:9" pos:end="65:42"><name pos:start="65:9" pos:end="65:27">GetCurrentDirectory</name><argument_list pos:start="65:28" pos:end="65:42">(<argument pos:start="65:29" pos:end="65:36"><expr pos:start="65:29" pos:end="65:36"><name pos:start="65:29" pos:end="65:36">MAX_PATH</name></expr></argument>, <argument pos:start="65:39" pos:end="65:41"><expr pos:start="65:39" pos:end="65:41"><name pos:start="65:39" pos:end="65:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:72"><expr pos:start="67:9" pos:end="67:71"><call pos:start="67:9" pos:end="67:71"><name pos:start="67:9" pos:end="67:16">snprintf</name><argument_list pos:start="67:17" pos:end="67:71">(<argument pos:start="67:18" pos:end="67:30"><expr pos:start="67:18" pos:end="67:30"><name pos:start="67:18" pos:end="67:30"><name pos:start="67:18" pos:end="67:18">s</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:30">drive_path</name></name></expr></argument>, <argument pos:start="67:33" pos:end="67:53"><expr pos:start="67:33" pos:end="67:53"><sizeof pos:start="67:33" pos:end="67:53">sizeof<argument_list pos:start="67:39" pos:end="67:53">(<argument pos:start="67:40" pos:end="67:52"><expr pos:start="67:40" pos:end="67:52"><name pos:start="67:40" pos:end="67:52"><name pos:start="67:40" pos:end="67:40">s</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:52">drive_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:56" pos:end="67:62"><expr pos:start="67:56" pos:end="67:62"><literal type="string" pos:start="67:56" pos:end="67:62">"%c:\\"</literal></expr></argument>, <argument pos:start="67:65" pos:end="67:70"><expr pos:start="67:65" pos:end="67:70"><name pos:start="67:65" pos:end="67:70"><name pos:start="67:65" pos:end="67:67">buf</name><index pos:start="67:68" pos:end="67:70">[<expr pos:start="67:69" pos:end="67:69"><literal type="number" pos:start="67:69" pos:end="67:69">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="77:59"><expr pos:start="73:5" pos:end="77:58"><name pos:start="73:5" pos:end="73:12"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:12">hfile</name></name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="77:58"><name pos:start="73:16" pos:end="73:25">CreateFile</name><argument_list pos:start="73:26" pos:end="77:58">(<argument pos:start="73:27" pos:end="73:34"><expr pos:start="73:27" pos:end="73:34"><name pos:start="73:27" pos:end="73:34">filename</name></expr></argument>, <argument pos:start="73:37" pos:end="73:48"><expr pos:start="73:37" pos:end="73:48"><name pos:start="73:37" pos:end="73:48">access_flags</name></expr></argument>,

                          <argument pos:start="75:27" pos:end="75:41"><expr pos:start="75:27" pos:end="75:41"><name pos:start="75:27" pos:end="75:41">FILE_SHARE_READ</name></expr></argument>, <argument pos:start="75:44" pos:end="75:47"><expr pos:start="75:44" pos:end="75:47"><name pos:start="75:44" pos:end="75:47">NULL</name></expr></argument>,

                          <argument pos:start="77:27" pos:end="77:39"><expr pos:start="77:27" pos:end="77:39"><name pos:start="77:27" pos:end="77:39">OPEN_EXISTING</name></expr></argument>, <argument pos:start="77:42" pos:end="77:51"><expr pos:start="77:42" pos:end="77:51"><name pos:start="77:42" pos:end="77:51">overlapped</name></expr></argument>, <argument pos:start="77:54" pos:end="77:57"><expr pos:start="77:54" pos:end="77:57"><name pos:start="77:54" pos:end="77:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="97:5"><if pos:start="79:5" pos:end="97:5">if <condition pos:start="79:8" pos:end="79:41">(<expr pos:start="79:9" pos:end="79:40"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">hfile</name></name> <operator pos:start="79:18" pos:end="79:19">==</operator> <name pos:start="79:21" pos:end="79:40">INVALID_HANDLE_VALUE</name></expr>)</condition> <block pos:start="79:43" pos:end="97:5">{<block_content pos:start="81:9" pos:end="95:18">

        <decl_stmt pos:start="81:9" pos:end="81:33"><decl pos:start="81:9" pos:end="81:32"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:15">err</name> <init pos:start="81:17" pos:end="81:32">= <expr pos:start="81:19" pos:end="81:32"><call pos:start="81:19" pos:end="81:32"><name pos:start="81:19" pos:end="81:30">GetLastError</name><argument_list pos:start="81:31" pos:end="81:32">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:39">(<expr pos:start="85:13" pos:end="85:38"><name pos:start="85:13" pos:end="85:15">err</name> <operator pos:start="85:17" pos:end="85:18">==</operator> <name pos:start="85:20" pos:end="85:38">ERROR_ACCESS_DENIED</name></expr>)</condition> <block pos:start="85:41" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:26">

            <expr_stmt pos:start="87:13" pos:end="87:26"><expr pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:15">ret</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <operator pos:start="87:19" pos:end="87:19">-</operator><name pos:start="87:20" pos:end="87:25">EACCES</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="93:9">else <block pos:start="89:16" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:26">

            <expr_stmt pos:start="91:13" pos:end="91:26"><expr pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <operator pos:start="91:19" pos:end="91:19">-</operator><name pos:start="91:20" pos:end="91:25">EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <goto pos:start="95:9" pos:end="95:18">goto <name pos:start="95:14" pos:end="95:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="137:5"><if pos:start="101:5" pos:end="137:5">if <condition pos:start="101:8" pos:end="101:34">(<expr pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:13">flags</name> <operator pos:start="101:15" pos:end="101:15">&amp;</operator> <name pos:start="101:17" pos:end="101:33">BDRV_O_NATIVE_AIO</name></expr>)</condition> <block pos:start="101:36" pos:end="137:5">{<block_content pos:start="103:9" pos:end="135:71">

        <expr_stmt pos:start="103:9" pos:end="103:34"><expr pos:start="103:9" pos:end="103:33"><name pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:14">aio</name></name> <operator pos:start="103:16" pos:end="103:16">=</operator> <call pos:start="103:18" pos:end="103:33"><name pos:start="103:18" pos:end="103:31">win32_aio_init</name><argument_list pos:start="103:32" pos:end="103:33">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="115:9">if <condition pos:start="105:12" pos:end="105:27">(<expr pos:start="105:13" pos:end="105:26"><name pos:start="105:13" pos:end="105:18"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:18">aio</name></name> <operator pos:start="105:20" pos:end="105:21">==</operator> <name pos:start="105:23" pos:end="105:26">NULL</name></expr>)</condition> <block pos:start="105:29" pos:end="115:9">{<block_content pos:start="107:13" pos:end="113:22">

            <expr_stmt pos:start="107:13" pos:end="107:34"><expr pos:start="107:13" pos:end="107:33"><call pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:23">CloseHandle</name><argument_list pos:start="107:24" pos:end="107:33">(<argument pos:start="107:25" pos:end="107:32"><expr pos:start="107:25" pos:end="107:32"><name pos:start="107:25" pos:end="107:32"><name pos:start="107:25" pos:end="107:25">s</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:32">hfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:57"><expr pos:start="109:13" pos:end="109:56"><call pos:start="109:13" pos:end="109:56"><name pos:start="109:13" pos:end="109:22">error_setg</name><argument_list pos:start="109:23" pos:end="109:56">(<argument pos:start="109:24" pos:end="109:27"><expr pos:start="109:24" pos:end="109:27"><name pos:start="109:24" pos:end="109:27">errp</name></expr></argument>, <argument pos:start="109:30" pos:end="109:55"><expr pos:start="109:30" pos:end="109:55"><literal type="string" pos:start="109:30" pos:end="109:55">"Could not initialize AIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:26"><expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <operator pos:start="111:19" pos:end="111:19">-</operator><name pos:start="111:20" pos:end="111:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:22">goto <name pos:start="113:18" pos:end="113:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:49"><expr pos:start="119:9" pos:end="119:48"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:48"><name pos:start="119:15" pos:end="119:30">win32_aio_attach</name><argument_list pos:start="119:31" pos:end="119:48">(<argument pos:start="119:32" pos:end="119:37"><expr pos:start="119:32" pos:end="119:37"><name pos:start="119:32" pos:end="119:37"><name pos:start="119:32" pos:end="119:32">s</name><operator pos:start="119:33" pos:end="119:34">-&gt;</operator><name pos:start="119:35" pos:end="119:37">aio</name></name></expr></argument>, <argument pos:start="119:40" pos:end="119:47"><expr pos:start="119:40" pos:end="119:47"><name pos:start="119:40" pos:end="119:47"><name pos:start="119:40" pos:end="119:40">s</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:47">hfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="131:9"><if pos:start="121:9" pos:end="131:9">if <condition pos:start="121:12" pos:end="121:20">(<expr pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">&lt;</operator> <literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>)</condition> <block pos:start="121:22" pos:end="131:9">{<block_content pos:start="123:13" pos:end="129:22">

            <expr_stmt pos:start="123:13" pos:end="123:38"><expr pos:start="123:13" pos:end="123:37"><call pos:start="123:13" pos:end="123:37"><name pos:start="123:13" pos:end="123:29">win32_aio_cleanup</name><argument_list pos:start="123:30" pos:end="123:37">(<argument pos:start="123:31" pos:end="123:36"><expr pos:start="123:31" pos:end="123:36"><name pos:start="123:31" pos:end="123:36"><name pos:start="123:31" pos:end="123:31">s</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:36">aio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:34"><expr pos:start="125:13" pos:end="125:33"><call pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:23">CloseHandle</name><argument_list pos:start="125:24" pos:end="125:33">(<argument pos:start="125:25" pos:end="125:32"><expr pos:start="125:25" pos:end="125:32"><name pos:start="125:25" pos:end="125:32"><name pos:start="125:25" pos:end="125:25">s</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:32">hfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:65"><expr pos:start="127:13" pos:end="127:64"><call pos:start="127:13" pos:end="127:64"><name pos:start="127:13" pos:end="127:28">error_setg_errno</name><argument_list pos:start="127:29" pos:end="127:64">(<argument pos:start="127:30" pos:end="127:33"><expr pos:start="127:30" pos:end="127:33"><name pos:start="127:30" pos:end="127:33">errp</name></expr></argument>, <argument pos:start="127:36" pos:end="127:39"><expr pos:start="127:36" pos:end="127:39"><operator pos:start="127:36" pos:end="127:36">-</operator><name pos:start="127:37" pos:end="127:39">ret</name></expr></argument>, <argument pos:start="127:42" pos:end="127:63"><expr pos:start="127:42" pos:end="127:63"><literal type="string" pos:start="127:42" pos:end="127:63">"Could not enable AIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:22">goto <name pos:start="129:18" pos:end="129:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:71"><expr pos:start="135:9" pos:end="135:70"><call pos:start="135:9" pos:end="135:70"><name pos:start="135:9" pos:end="135:36">win32_aio_attach_aio_context</name><argument_list pos:start="135:37" pos:end="135:70">(<argument pos:start="135:38" pos:end="135:43"><expr pos:start="135:38" pos:end="135:43"><name pos:start="135:38" pos:end="135:43"><name pos:start="135:38" pos:end="135:38">s</name><operator pos:start="135:39" pos:end="135:40">-&gt;</operator><name pos:start="135:41" pos:end="135:43">aio</name></name></expr></argument>, <argument pos:start="135:46" pos:end="135:69"><expr pos:start="135:46" pos:end="135:69"><call pos:start="135:46" pos:end="135:69"><name pos:start="135:46" pos:end="135:65">bdrv_get_aio_context</name><argument_list pos:start="135:66" pos:end="135:69">(<argument pos:start="135:67" pos:end="135:68"><expr pos:start="135:67" pos:end="135:68"><name pos:start="135:67" pos:end="135:68">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:28"><expr pos:start="141:5" pos:end="141:27"><call pos:start="141:5" pos:end="141:27"><name pos:start="141:5" pos:end="141:23">raw_probe_alignment</name><argument_list pos:start="141:24" pos:end="141:27">(<argument pos:start="141:25" pos:end="141:26"><expr pos:start="141:25" pos:end="141:26"><name pos:start="141:25" pos:end="141:26">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:12"><expr pos:start="143:5" pos:end="143:11"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <literal type="number" pos:start="143:11" pos:end="143:11">0</literal></expr>;</expr_stmt>

<label pos:start="145:1" pos:end="145:5"><name pos:start="145:1" pos:end="145:4">fail</name>:</label>

    <expr_stmt pos:start="147:5" pos:end="147:24"><expr pos:start="147:5" pos:end="147:23"><call pos:start="147:5" pos:end="147:23"><name pos:start="147:5" pos:end="147:17">qemu_opts_del</name><argument_list pos:start="147:18" pos:end="147:23">(<argument pos:start="147:19" pos:end="147:22"><expr pos:start="147:19" pos:end="147:22"><name pos:start="147:19" pos:end="147:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="149:5" pos:end="149:15">return <expr pos:start="149:12" pos:end="149:14"><name pos:start="149:12" pos:end="149:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
