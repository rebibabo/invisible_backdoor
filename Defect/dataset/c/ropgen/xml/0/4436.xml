<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4436.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">smacker_decode_tree</name><parameter_list pos:start="1:31" pos:end="1:95">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:44">GetBitContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">gb</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:61">HuffContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">hc</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:82"><decl pos:start="1:68" pos:end="1:82"><type pos:start="1:68" pos:end="1:82"><name pos:start="1:68" pos:end="1:75">uint32_t</name></type> <name pos:start="1:77" pos:end="1:82">prefix</name></decl></parameter>, <parameter pos:start="1:85" pos:end="1:94"><decl pos:start="1:85" pos:end="1:94"><type pos:start="1:85" pos:end="1:94"><name pos:start="1:85" pos:end="1:87">int</name></type> <name pos:start="1:89" pos:end="1:94">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:5">

    <if_stmt pos:start="5:5" pos:end="11:5"><if pos:start="5:5" pos:end="11:5">if<condition pos:start="5:7" pos:end="5:19">(<expr pos:start="5:8" pos:end="5:18"><name pos:start="5:8" pos:end="5:13">length</name> <operator pos:start="5:15" pos:end="5:15">&gt;</operator> <literal type="number" pos:start="5:17" pos:end="5:18">32</literal></expr>)</condition> <block pos:start="5:21" pos:end="11:5">{<block_content pos:start="7:9" pos:end="9:35">

        <expr_stmt pos:start="7:9" pos:end="7:56"><expr pos:start="7:9" pos:end="7:55"><call pos:start="7:9" pos:end="7:55"><name pos:start="7:9" pos:end="7:14">av_log</name><argument_list pos:start="7:15" pos:end="7:55">(<argument pos:start="7:16" pos:end="7:19"><expr pos:start="7:16" pos:end="7:19"><name pos:start="7:16" pos:end="7:19">NULL</name></expr></argument>, <argument pos:start="7:22" pos:end="7:33"><expr pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="7:36" pos:end="7:54"><expr pos:start="7:36" pos:end="7:54"><literal type="string" pos:start="7:36" pos:end="7:54">"length too long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="9:9" pos:end="9:35">return <expr pos:start="9:16" pos:end="9:34"><name pos:start="9:16" pos:end="9:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="13:5" pos:end="61:5"><if pos:start="13:5" pos:end="47:5">if<condition pos:start="13:7" pos:end="13:22">(<expr pos:start="13:8" pos:end="13:21"><operator pos:start="13:8" pos:end="13:8">!</operator><call pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:17">get_bits1</name><argument_list pos:start="13:18" pos:end="13:21">(<argument pos:start="13:19" pos:end="13:20"><expr pos:start="13:19" pos:end="13:20"><name pos:start="13:19" pos:end="13:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="13:23" pos:end="47:5">{<block_content pos:start="15:9" pos:end="45:17"> <comment type="line" pos:start="13:25" pos:end="13:30">//Leaf</comment>

        <if_stmt pos:start="15:9" pos:end="21:9"><if pos:start="15:9" pos:end="21:9">if<condition pos:start="15:11" pos:end="15:30">(<expr pos:start="15:12" pos:end="15:29"><name pos:start="15:12" pos:end="15:22"><name pos:start="15:12" pos:end="15:13">hc</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:22">current</name></name> <operator pos:start="15:24" pos:end="15:25">&gt;=</operator> <literal type="number" pos:start="15:27" pos:end="15:29">256</literal></expr>)</condition><block pos:start="15:31" pos:end="21:9">{<block_content pos:start="17:13" pos:end="19:39">

            <expr_stmt pos:start="17:13" pos:end="17:64"><expr pos:start="17:13" pos:end="17:63"><call pos:start="17:13" pos:end="17:63"><name pos:start="17:13" pos:end="17:18">av_log</name><argument_list pos:start="17:19" pos:end="17:63">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">NULL</name></expr></argument>, <argument pos:start="17:26" pos:end="17:37"><expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:40" pos:end="17:62"><expr pos:start="17:40" pos:end="17:62"><literal type="string" pos:start="17:40" pos:end="17:62">"Tree size exceeded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="19:13" pos:end="19:39">return <expr pos:start="19:20" pos:end="19:38"><name pos:start="19:20" pos:end="19:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="23:9" pos:end="35:9"><if pos:start="23:9" pos:end="29:9">if<condition pos:start="23:11" pos:end="23:18">(<expr pos:start="23:12" pos:end="23:17"><name pos:start="23:12" pos:end="23:17">length</name></expr>)</condition><block pos:start="23:19" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:46">

            <expr_stmt pos:start="25:13" pos:end="25:43"><expr pos:start="25:13" pos:end="25:42"><name pos:start="25:13" pos:end="25:33"><name pos:start="25:13" pos:end="25:14">hc</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:20">bits</name><index pos:start="25:21" pos:end="25:33">[<expr pos:start="25:22" pos:end="25:32"><name pos:start="25:22" pos:end="25:32"><name pos:start="25:22" pos:end="25:23">hc</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:32">current</name></name></expr>]</index></name> <operator pos:start="25:35" pos:end="25:35">=</operator> <name pos:start="25:37" pos:end="25:42">prefix</name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:46"><expr pos:start="27:13" pos:end="27:45"><name pos:start="27:13" pos:end="27:36"><name pos:start="27:13" pos:end="27:14">hc</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:23">lengths</name><index pos:start="27:24" pos:end="27:36">[<expr pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:26">hc</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:35">current</name></name></expr>]</index></name> <operator pos:start="27:38" pos:end="27:38">=</operator> <name pos:start="27:40" pos:end="27:45">length</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="35:9">else <block pos:start="29:16" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:41">

            <expr_stmt pos:start="31:13" pos:end="31:38"><expr pos:start="31:13" pos:end="31:37"><name pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:14">hc</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:20">bits</name><index pos:start="31:21" pos:end="31:33">[<expr pos:start="31:22" pos:end="31:32"><name pos:start="31:22" pos:end="31:32"><name pos:start="31:22" pos:end="31:23">hc</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:32">current</name></name></expr>]</index></name> <operator pos:start="31:35" pos:end="31:35">=</operator> <literal type="number" pos:start="31:37" pos:end="31:37">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:41"><expr pos:start="33:13" pos:end="33:40"><name pos:start="33:13" pos:end="33:36"><name pos:start="33:13" pos:end="33:14">hc</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:23">lengths</name><index pos:start="33:24" pos:end="33:36">[<expr pos:start="33:25" pos:end="33:35"><name pos:start="33:25" pos:end="33:35"><name pos:start="33:25" pos:end="33:26">hc</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:35">current</name></name></expr>]</index></name> <operator pos:start="33:38" pos:end="33:38">=</operator> <literal type="number" pos:start="33:40" pos:end="33:40">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:50"><expr pos:start="37:9" pos:end="37:49"><name pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:10">hc</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:18">values</name><index pos:start="37:19" pos:end="37:31">[<expr pos:start="37:20" pos:end="37:30"><name pos:start="37:20" pos:end="37:30"><name pos:start="37:20" pos:end="37:21">hc</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:30">current</name></name></expr>]</index></name> <operator pos:start="37:33" pos:end="37:33">=</operator> <call pos:start="37:35" pos:end="37:49"><name pos:start="37:35" pos:end="37:42">get_bits</name><argument_list pos:start="37:43" pos:end="37:49">(<argument pos:start="37:44" pos:end="37:45"><expr pos:start="37:44" pos:end="37:45"><name pos:start="37:44" pos:end="37:45">gb</name></expr></argument>, <argument pos:start="37:48" pos:end="37:48"><expr pos:start="37:48" pos:end="37:48"><literal type="number" pos:start="37:48" pos:end="37:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:22"><expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:10">hc</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:19">current</name></name><operator pos:start="39:20" pos:end="39:21">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:35"><if pos:start="41:9" pos:end="43:35">if<condition pos:start="41:11" pos:end="41:34">(<expr pos:start="41:12" pos:end="41:33"><name pos:start="41:12" pos:end="41:24"><name pos:start="41:12" pos:end="41:13">hc</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:24">maxlength</name></name> <operator pos:start="41:26" pos:end="41:26">&lt;</operator> <name pos:start="41:28" pos:end="41:33">length</name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:35"><block_content pos:start="43:13" pos:end="43:35">

            <expr_stmt pos:start="43:13" pos:end="43:35"><expr pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:14">hc</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:25">maxlength</name></name> <operator pos:start="43:27" pos:end="43:27">=</operator> <name pos:start="43:29" pos:end="43:34">length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="61:5">else <block pos:start="47:12" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:81"> <comment type="line" pos:start="47:14" pos:end="47:19">//Node</comment>

        <decl_stmt pos:start="49:9" pos:end="49:14"><decl pos:start="49:9" pos:end="49:13"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:13">r</name></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:17"><expr pos:start="51:9" pos:end="51:16"><name pos:start="51:9" pos:end="51:14">length</name><operator pos:start="51:15" pos:end="51:16">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:56"><expr pos:start="53:9" pos:end="53:55"><name pos:start="53:9" pos:end="53:9">r</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:55"><name pos:start="53:13" pos:end="53:31">smacker_decode_tree</name><argument_list pos:start="53:32" pos:end="53:55">(<argument pos:start="53:33" pos:end="53:34"><expr pos:start="53:33" pos:end="53:34"><name pos:start="53:33" pos:end="53:34">gb</name></expr></argument>, <argument pos:start="53:37" pos:end="53:38"><expr pos:start="53:37" pos:end="53:38"><name pos:start="53:37" pos:end="53:38">hc</name></expr></argument>, <argument pos:start="53:41" pos:end="53:46"><expr pos:start="53:41" pos:end="53:46"><name pos:start="53:41" pos:end="53:46">prefix</name></expr></argument>, <argument pos:start="53:49" pos:end="53:54"><expr pos:start="53:49" pos:end="53:54"><name pos:start="53:49" pos:end="53:54">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="57:21"><if pos:start="55:9" pos:end="57:21">if<condition pos:start="55:11" pos:end="55:13">(<expr pos:start="55:12" pos:end="55:12"><name pos:start="55:12" pos:end="55:12">r</name></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:21"><block_content pos:start="57:13" pos:end="57:21">

            <return pos:start="57:13" pos:end="57:21">return <expr pos:start="57:20" pos:end="57:20"><name pos:start="57:20" pos:end="57:20">r</name></expr>;</return></block_content></block></if></if_stmt>

        <return pos:start="59:9" pos:end="59:81">return <expr pos:start="59:16" pos:end="59:80"><call pos:start="59:16" pos:end="59:80"><name pos:start="59:16" pos:end="59:34">smacker_decode_tree</name><argument_list pos:start="59:35" pos:end="59:80">(<argument pos:start="59:36" pos:end="59:37"><expr pos:start="59:36" pos:end="59:37"><name pos:start="59:36" pos:end="59:37">gb</name></expr></argument>, <argument pos:start="59:40" pos:end="59:41"><expr pos:start="59:40" pos:end="59:41"><name pos:start="59:40" pos:end="59:41">hc</name></expr></argument>, <argument pos:start="59:44" pos:end="59:71"><expr pos:start="59:44" pos:end="59:71"><name pos:start="59:44" pos:end="59:49">prefix</name> <operator pos:start="59:51" pos:end="59:51">|</operator> <operator pos:start="59:53" pos:end="59:53">(</operator><literal type="number" pos:start="59:54" pos:end="59:54">1</literal> <operator pos:start="59:56" pos:end="59:57">&lt;&lt;</operator> <operator pos:start="59:59" pos:end="59:59">(</operator><name pos:start="59:60" pos:end="59:65">length</name> <operator pos:start="59:67" pos:end="59:67">-</operator> <literal type="number" pos:start="59:69" pos:end="59:69">1</literal><operator pos:start="59:70" pos:end="59:70">)</operator><operator pos:start="59:71" pos:end="59:71">)</operator></expr></argument>, <argument pos:start="59:74" pos:end="59:79"><expr pos:start="59:74" pos:end="59:79"><name pos:start="59:74" pos:end="59:79">length</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
