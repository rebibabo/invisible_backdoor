<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5647.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:15"><name pos:start="1:1" pos:end="1:13">TC6393xbState</name> <modifier pos:start="1:15" pos:end="1:15">*</modifier></type><name pos:start="1:16" pos:end="1:28">tc6393xb_init</name><parameter_list pos:start="1:29" pos:end="1:79">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:41">MemoryRegion</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">sysmem</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:64">base</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:78"><decl pos:start="1:67" pos:end="1:78"><type pos:start="1:67" pos:end="1:78"><name pos:start="1:67" pos:end="1:74">qemu_irq</name></type> <name pos:start="1:76" pos:end="1:78">irq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">TC6393xbState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">DriveInfo</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:19">nand</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="25:6"><decl pos:start="9:5" pos:end="25:5"><type pos:start="9:5" pos:end="9:32"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <specifier pos:start="9:12" pos:end="9:16">const</specifier> <name pos:start="9:18" pos:end="9:32">MemoryRegionOps</name></type> <name pos:start="9:34" pos:end="9:45">tc6393xb_ops</name> <init pos:start="9:47" pos:end="25:5">= <expr pos:start="9:49" pos:end="25:5"><block pos:start="9:49" pos:end="25:5">{

        <expr pos:start="11:9" pos:end="11:30"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:13">read</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <name pos:start="11:17" pos:end="11:30">tc6393xb_readb</name></expr>,

        <expr pos:start="13:9" pos:end="13:32"><operator pos:start="13:9" pos:end="13:9">.</operator><name pos:start="13:10" pos:end="13:14">write</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:32">tc6393xb_writeb</name></expr>,

        <expr pos:start="15:9" pos:end="15:42"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:19">endianness</name> <operator pos:start="15:21" pos:end="15:21">=</operator> <name pos:start="15:23" pos:end="15:42">DEVICE_NATIVE_ENDIAN</name></expr>,

        <expr pos:start="17:9" pos:end="23:9"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:13">impl</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <block pos:start="17:17" pos:end="23:9">{

            <expr pos:start="19:13" pos:end="19:32"><operator pos:start="19:13" pos:end="19:13">.</operator><name pos:start="19:14" pos:end="19:28">min_access_size</name> <operator pos:start="19:30" pos:end="19:30">=</operator> <literal type="number" pos:start="19:32" pos:end="19:32">1</literal></expr>,

            <expr pos:start="21:13" pos:end="21:32"><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:28">max_access_size</name> <operator pos:start="21:30" pos:end="21:30">=</operator> <literal type="number" pos:start="21:32" pos:end="21:32">1</literal></expr>,

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:59"><expr pos:start="29:5" pos:end="29:58"><name pos:start="29:5" pos:end="29:5">s</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:22">TC6393xbState</name> <operator pos:start="29:24" pos:end="29:24">*</operator><operator pos:start="29:25" pos:end="29:25">)</operator> <call pos:start="29:27" pos:end="29:58"><name pos:start="29:27" pos:end="29:35">g_malloc0</name><argument_list pos:start="29:36" pos:end="29:58">(<argument pos:start="29:37" pos:end="29:57"><expr pos:start="29:37" pos:end="29:57"><sizeof pos:start="29:37" pos:end="29:57">sizeof<argument_list pos:start="29:43" pos:end="29:57">(<argument pos:start="29:44" pos:end="29:56"><expr pos:start="29:44" pos:end="29:56"><name pos:start="29:44" pos:end="29:56">TC6393xbState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:10">irq</name></name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:16">irq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:74"><expr pos:start="33:5" pos:end="33:73"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:14">gpio_in</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:73"><name pos:start="33:18" pos:end="33:35">qemu_allocate_irqs</name><argument_list pos:start="33:36" pos:end="33:73">(<argument pos:start="33:37" pos:end="33:53"><expr pos:start="33:37" pos:end="33:53"><name pos:start="33:37" pos:end="33:53">tc6393xb_gpio_set</name></expr></argument>, <argument pos:start="33:56" pos:end="33:56"><expr pos:start="33:56" pos:end="33:56"><name pos:start="33:56" pos:end="33:56">s</name></expr></argument>, <argument pos:start="33:59" pos:end="33:72"><expr pos:start="33:59" pos:end="33:72"><name pos:start="33:59" pos:end="33:72">TC6393XB_GPIOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:53"><expr pos:start="37:5" pos:end="37:52"><name pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:10">l3v</name></name> <operator pos:start="37:12" pos:end="37:12">=</operator> <operator pos:start="37:14" pos:end="37:14">*</operator><call pos:start="37:15" pos:end="37:52"><name pos:start="37:15" pos:end="37:32">qemu_allocate_irqs</name><argument_list pos:start="37:33" pos:end="37:52">(<argument pos:start="37:34" pos:end="37:45"><expr pos:start="37:34" pos:end="37:45"><name pos:start="37:34" pos:end="37:45">tc6393xb_l3v</name></expr></argument>, <argument pos:start="37:48" pos:end="37:48"><expr pos:start="37:48" pos:end="37:48"><name pos:start="37:48" pos:end="37:48">s</name></expr></argument>, <argument pos:start="37:51" pos:end="37:51"><expr pos:start="37:51" pos:end="37:51"><literal type="number" pos:start="37:51" pos:end="37:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:19"><expr pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:14">blanked</name></name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:76"><expr pos:start="43:5" pos:end="43:75"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:15">sub_irqs</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:75"><name pos:start="43:19" pos:end="43:36">qemu_allocate_irqs</name><argument_list pos:start="43:37" pos:end="43:75">(<argument pos:start="43:38" pos:end="43:53"><expr pos:start="43:38" pos:end="43:53"><name pos:start="43:38" pos:end="43:53">tc6393xb_sub_irq</name></expr></argument>, <argument pos:start="43:56" pos:end="43:56"><expr pos:start="43:56" pos:end="43:56"><name pos:start="43:56" pos:end="43:56">s</name></expr></argument>, <argument pos:start="43:59" pos:end="43:74"><expr pos:start="43:59" pos:end="43:74"><name pos:start="43:59" pos:end="43:74">TC6393XB_NR_IRQS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:8">nand</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <call pos:start="47:12" pos:end="47:34"><name pos:start="47:12" pos:end="47:20">drive_get</name><argument_list pos:start="47:21" pos:end="47:34">(<argument pos:start="47:22" pos:end="47:27"><expr pos:start="47:22" pos:end="47:27"><name pos:start="47:22" pos:end="47:27">IF_MTD</name></expr></argument>, <argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><literal type="number" pos:start="47:30" pos:end="47:30">0</literal></expr></argument>, <argument pos:start="47:33" pos:end="47:33"><expr pos:start="47:33" pos:end="47:33"><literal type="number" pos:start="47:33" pos:end="47:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:49"><expr pos:start="49:5" pos:end="51:48"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:12">flash</name></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="51:48"><name pos:start="49:16" pos:end="49:24">nand_init</name><argument_list pos:start="49:25" pos:end="51:48">(<argument pos:start="49:26" pos:end="49:72"><expr pos:start="49:26" pos:end="49:72"><ternary pos:start="49:26" pos:end="49:72"><condition pos:start="49:26" pos:end="49:31"><expr pos:start="49:26" pos:end="49:29"><name pos:start="49:26" pos:end="49:29">nand</name></expr> ?</condition><then pos:start="49:33" pos:end="49:65"> <expr pos:start="49:33" pos:end="49:65"><call pos:start="49:33" pos:end="49:65"><name pos:start="49:33" pos:end="49:38">blk_bs</name><argument_list pos:start="49:39" pos:end="49:65">(<argument pos:start="49:40" pos:end="49:64"><expr pos:start="49:40" pos:end="49:64"><call pos:start="49:40" pos:end="49:64"><name pos:start="49:40" pos:end="49:58">blk_by_legacy_dinfo</name><argument_list pos:start="49:59" pos:end="49:64">(<argument pos:start="49:60" pos:end="49:63"><expr pos:start="49:60" pos:end="49:63"><name pos:start="49:60" pos:end="49:63">nand</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else pos:start="49:67" pos:end="49:72">: <expr pos:start="49:69" pos:end="49:72"><name pos:start="49:69" pos:end="49:72">NULL</name></expr></else></ternary></expr></argument>,

                         <argument pos:start="51:26" pos:end="51:41"><expr pos:start="51:26" pos:end="51:41"><name pos:start="51:26" pos:end="51:41">NAND_MFR_TOSHIBA</name></expr></argument>, <argument pos:start="51:44" pos:end="51:47"><expr pos:start="51:44" pos:end="51:47"><literal type="number" pos:start="51:44" pos:end="51:47">0x76</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:82"><expr pos:start="55:5" pos:end="55:81"><call pos:start="55:5" pos:end="55:81"><name pos:start="55:5" pos:end="55:25">memory_region_init_io</name><argument_list pos:start="55:26" pos:end="55:81">(<argument pos:start="55:27" pos:end="55:35"><expr pos:start="55:27" pos:end="55:35"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:35"><name pos:start="55:28" pos:end="55:28">s</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:35">iomem</name></name></expr></argument>, <argument pos:start="55:38" pos:end="55:41"><expr pos:start="55:38" pos:end="55:41"><name pos:start="55:38" pos:end="55:41">NULL</name></expr></argument>, <argument pos:start="55:44" pos:end="55:56"><expr pos:start="55:44" pos:end="55:56"><operator pos:start="55:44" pos:end="55:44">&amp;</operator><name pos:start="55:45" pos:end="55:56">tc6393xb_ops</name></expr></argument>, <argument pos:start="55:59" pos:end="55:59"><expr pos:start="55:59" pos:end="55:59"><name pos:start="55:59" pos:end="55:59">s</name></expr></argument>, <argument pos:start="55:62" pos:end="55:71"><expr pos:start="55:62" pos:end="55:71"><literal type="string" pos:start="55:62" pos:end="55:71">"tc6393xb"</literal></expr></argument>, <argument pos:start="55:74" pos:end="55:80"><expr pos:start="55:74" pos:end="55:80"><literal type="number" pos:start="55:74" pos:end="55:80">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:57"><expr pos:start="57:5" pos:end="57:56"><call pos:start="57:5" pos:end="57:56"><name pos:start="57:5" pos:end="57:31">memory_region_add_subregion</name><argument_list pos:start="57:32" pos:end="57:56">(<argument pos:start="57:33" pos:end="57:38"><expr pos:start="57:33" pos:end="57:38"><name pos:start="57:33" pos:end="57:38">sysmem</name></expr></argument>, <argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><name pos:start="57:41" pos:end="57:44">base</name></expr></argument>, <argument pos:start="57:47" pos:end="57:55"><expr pos:start="57:47" pos:end="57:55"><operator pos:start="57:47" pos:end="57:47">&amp;</operator><name pos:start="57:48" pos:end="57:55"><name pos:start="57:48" pos:end="57:48">s</name><operator pos:start="57:49" pos:end="57:50">-&gt;</operator><name pos:start="57:51" pos:end="57:55">iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="63:41"><expr pos:start="61:5" pos:end="63:40"><call pos:start="61:5" pos:end="63:40"><name pos:start="61:5" pos:end="61:26">memory_region_init_ram</name><argument_list pos:start="61:27" pos:end="63:40">(<argument pos:start="61:28" pos:end="61:35"><expr pos:start="61:28" pos:end="61:35"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:35"><name pos:start="61:29" pos:end="61:29">s</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:35">vram</name></name></expr></argument>, <argument pos:start="61:38" pos:end="61:41"><expr pos:start="61:38" pos:end="61:41"><name pos:start="61:38" pos:end="61:41">NULL</name></expr></argument>, <argument pos:start="61:44" pos:end="61:58"><expr pos:start="61:44" pos:end="61:58"><literal type="string" pos:start="61:44" pos:end="61:58">"tc6393xb.vram"</literal></expr></argument>, <argument pos:start="61:61" pos:end="61:68"><expr pos:start="61:61" pos:end="61:68"><literal type="number" pos:start="61:61" pos:end="61:68">0x100000</literal></expr></argument>,

                           <argument pos:start="63:28" pos:end="63:39"><expr pos:start="63:28" pos:end="63:39"><operator pos:start="63:28" pos:end="63:28">&amp;</operator><name pos:start="63:29" pos:end="63:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:42"><expr pos:start="65:5" pos:end="65:41"><call pos:start="65:5" pos:end="65:41"><name pos:start="65:5" pos:end="65:31">vmstate_register_ram_global</name><argument_list pos:start="65:32" pos:end="65:41">(<argument pos:start="65:33" pos:end="65:40"><expr pos:start="65:33" pos:end="65:40"><operator pos:start="65:33" pos:end="65:33">&amp;</operator><name pos:start="65:34" pos:end="65:40"><name pos:start="65:34" pos:end="65:34">s</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:40">vram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:54"><expr pos:start="67:5" pos:end="67:53"><name pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:15">vram_ptr</name></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:53"><name pos:start="67:19" pos:end="67:43">memory_region_get_ram_ptr</name><argument_list pos:start="67:44" pos:end="67:53">(<argument pos:start="67:45" pos:end="67:52"><expr pos:start="67:45" pos:end="67:52"><operator pos:start="67:45" pos:end="67:45">&amp;</operator><name pos:start="67:46" pos:end="67:52"><name pos:start="67:46" pos:end="67:46">s</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:52">vram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:67"><expr pos:start="69:5" pos:end="69:66"><call pos:start="69:5" pos:end="69:66"><name pos:start="69:5" pos:end="69:31">memory_region_add_subregion</name><argument_list pos:start="69:32" pos:end="69:66">(<argument pos:start="69:33" pos:end="69:38"><expr pos:start="69:33" pos:end="69:38"><name pos:start="69:33" pos:end="69:38">sysmem</name></expr></argument>, <argument pos:start="69:41" pos:end="69:55"><expr pos:start="69:41" pos:end="69:55"><name pos:start="69:41" pos:end="69:44">base</name> <operator pos:start="69:46" pos:end="69:46">+</operator> <literal type="number" pos:start="69:48" pos:end="69:55">0x100000</literal></expr></argument>, <argument pos:start="69:58" pos:end="69:65"><expr pos:start="69:58" pos:end="69:65"><operator pos:start="69:58" pos:end="69:58">&amp;</operator><name pos:start="69:59" pos:end="69:65"><name pos:start="69:59" pos:end="69:59">s</name><operator pos:start="69:60" pos:end="69:61">-&gt;</operator><name pos:start="69:62" pos:end="69:65">vram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:23"><expr pos:start="71:5" pos:end="71:22"><name pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:16">scr_width</name></name> <operator pos:start="71:18" pos:end="71:18">=</operator> <literal type="number" pos:start="71:20" pos:end="71:22">480</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:24"><expr pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:17">scr_height</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <literal type="number" pos:start="73:21" pos:end="73:23">640</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:65"><expr pos:start="75:5" pos:end="75:64"><name pos:start="75:5" pos:end="75:10"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:10">con</name></name> <operator pos:start="75:12" pos:end="75:12">=</operator> <call pos:start="75:14" pos:end="75:64"><name pos:start="75:14" pos:end="75:33">graphic_console_init</name><argument_list pos:start="75:34" pos:end="75:64">(<argument pos:start="75:35" pos:end="75:38"><expr pos:start="75:35" pos:end="75:38"><name pos:start="75:35" pos:end="75:38">NULL</name></expr></argument>, <argument pos:start="75:41" pos:end="75:41"><expr pos:start="75:41" pos:end="75:41"><literal type="number" pos:start="75:41" pos:end="75:41">0</literal></expr></argument>, <argument pos:start="75:44" pos:end="75:60"><expr pos:start="75:44" pos:end="75:60"><operator pos:start="75:44" pos:end="75:44">&amp;</operator><name pos:start="75:45" pos:end="75:60">tc6393xb_gfx_ops</name></expr></argument>, <argument pos:start="75:63" pos:end="75:63"><expr pos:start="75:63" pos:end="75:63"><name pos:start="75:63" pos:end="75:63">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><name pos:start="79:12" pos:end="79:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
