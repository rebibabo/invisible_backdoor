<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23231.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">test_visitor_in_wrong_type</name><parameter_list pos:start="1:39" pos:end="3:58">(<parameter pos:start="1:40" pos:end="1:65"><decl pos:start="1:40" pos:end="1:65"><type pos:start="1:40" pos:end="1:65"><name pos:start="1:40" pos:end="1:59">TestInputVisitorData</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">void</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:30">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">TestStruct</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><name pos:start="7:21" pos:end="7:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">Visitor</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">strList</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:14">q</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">err</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:57">/* Make sure arrays and structs cannot be confused */</comment>



    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:5">v</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:43"><name pos:start="23:9" pos:end="23:31">visitor_input_test_init</name><argument_list pos:start="23:32" pos:end="23:43">(<argument pos:start="23:33" pos:end="23:36"><expr pos:start="23:33" pos:end="23:36"><name pos:start="23:33" pos:end="23:36">data</name></expr></argument>, <argument pos:start="23:39" pos:end="23:42"><expr pos:start="23:39" pos:end="23:42"><literal type="string" pos:start="23:39" pos:end="23:42">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><call pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:25">visit_type_TestStruct</name><argument_list pos:start="25:26" pos:end="25:44">(<argument pos:start="25:27" pos:end="25:27"><expr pos:start="25:27" pos:end="25:27"><name pos:start="25:27" pos:end="25:27">v</name></expr></argument>, <argument pos:start="25:30" pos:end="25:33"><expr pos:start="25:30" pos:end="25:33"><name pos:start="25:30" pos:end="25:33">NULL</name></expr></argument>, <argument pos:start="25:36" pos:end="25:37"><expr pos:start="25:36" pos:end="25:37"><operator pos:start="25:36" pos:end="25:36">&amp;</operator><name pos:start="25:37" pos:end="25:37">p</name></expr></argument>, <argument pos:start="25:40" pos:end="25:43"><expr pos:start="25:40" pos:end="25:43"><operator pos:start="25:40" pos:end="25:40">&amp;</operator><name pos:start="25:41" pos:end="25:43">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><call pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:23">error_free_or_abort</name><argument_list pos:start="27:24" pos:end="27:29">(<argument pos:start="27:25" pos:end="27:28"><expr pos:start="27:25" pos:end="27:28"><operator pos:start="27:25" pos:end="27:25">&amp;</operator><name pos:start="27:26" pos:end="27:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:17"><expr pos:start="29:5" pos:end="29:16"><call pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:16">(<argument pos:start="29:14" pos:end="29:15"><expr pos:start="29:14" pos:end="29:15"><operator pos:start="29:14" pos:end="29:14">!</operator><name pos:start="29:15" pos:end="29:15">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:5">v</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <call pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:31">visitor_input_test_init</name><argument_list pos:start="33:32" pos:end="33:43">(<argument pos:start="33:33" pos:end="33:36"><expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">data</name></expr></argument>, <argument pos:start="33:39" pos:end="33:42"><expr pos:start="33:39" pos:end="33:42"><literal type="string" pos:start="33:39" pos:end="33:42">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><call pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:22">visit_type_strList</name><argument_list pos:start="35:23" pos:end="35:41">(<argument pos:start="35:24" pos:end="35:24"><expr pos:start="35:24" pos:end="35:24"><name pos:start="35:24" pos:end="35:24">v</name></expr></argument>, <argument pos:start="35:27" pos:end="35:30"><expr pos:start="35:27" pos:end="35:30"><name pos:start="35:27" pos:end="35:30">NULL</name></expr></argument>, <argument pos:start="35:33" pos:end="35:34"><expr pos:start="35:33" pos:end="35:34"><operator pos:start="35:33" pos:end="35:33">&amp;</operator><name pos:start="35:34" pos:end="35:34">q</name></expr></argument>, <argument pos:start="35:37" pos:end="35:40"><expr pos:start="35:37" pos:end="35:40"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><call pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:23">error_free_or_abort</name><argument_list pos:start="37:24" pos:end="37:29">(<argument pos:start="37:25" pos:end="37:28"><expr pos:start="37:25" pos:end="37:28"><operator pos:start="37:25" pos:end="37:25">&amp;</operator><name pos:start="37:26" pos:end="37:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:15"><expr pos:start="39:5" pos:end="39:14"><call pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:14">(<argument pos:start="39:12" pos:end="39:13"><expr pos:start="39:12" pos:end="39:13"><operator pos:start="39:12" pos:end="39:12">!</operator><name pos:start="39:13" pos:end="39:13">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:60">/* Make sure primitives and struct cannot be confused */</comment>



    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:5">v</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <call pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:31">visitor_input_test_init</name><argument_list pos:start="47:32" pos:end="47:42">(<argument pos:start="47:33" pos:end="47:36"><expr pos:start="47:33" pos:end="47:36"><name pos:start="47:33" pos:end="47:36">data</name></expr></argument>, <argument pos:start="47:39" pos:end="47:41"><expr pos:start="47:39" pos:end="47:41"><literal type="string" pos:start="47:39" pos:end="47:41">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:45"><expr pos:start="49:5" pos:end="49:44"><call pos:start="49:5" pos:end="49:44"><name pos:start="49:5" pos:end="49:25">visit_type_TestStruct</name><argument_list pos:start="49:26" pos:end="49:44">(<argument pos:start="49:27" pos:end="49:27"><expr pos:start="49:27" pos:end="49:27"><name pos:start="49:27" pos:end="49:27">v</name></expr></argument>, <argument pos:start="49:30" pos:end="49:33"><expr pos:start="49:30" pos:end="49:33"><name pos:start="49:30" pos:end="49:33">NULL</name></expr></argument>, <argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:37">p</name></expr></argument>, <argument pos:start="49:40" pos:end="49:43"><expr pos:start="49:40" pos:end="49:43"><operator pos:start="49:40" pos:end="49:40">&amp;</operator><name pos:start="49:41" pos:end="49:43">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><call pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:23">error_free_or_abort</name><argument_list pos:start="51:24" pos:end="51:29">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><operator pos:start="51:25" pos:end="51:25">&amp;</operator><name pos:start="51:26" pos:end="51:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:17"><expr pos:start="53:5" pos:end="53:16"><call pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:12">g_assert</name><argument_list pos:start="53:13" pos:end="53:16">(<argument pos:start="53:14" pos:end="53:15"><expr pos:start="53:14" pos:end="53:15"><operator pos:start="53:14" pos:end="53:14">!</operator><name pos:start="53:15" pos:end="53:15">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:44"><expr pos:start="57:5" pos:end="57:43"><name pos:start="57:5" pos:end="57:5">v</name> <operator pos:start="57:7" pos:end="57:7">=</operator> <call pos:start="57:9" pos:end="57:43"><name pos:start="57:9" pos:end="57:31">visitor_input_test_init</name><argument_list pos:start="57:32" pos:end="57:43">(<argument pos:start="57:33" pos:end="57:36"><expr pos:start="57:33" pos:end="57:36"><name pos:start="57:33" pos:end="57:36">data</name></expr></argument>, <argument pos:start="57:39" pos:end="57:42"><expr pos:start="57:39" pos:end="57:42"><literal type="string" pos:start="57:39" pos:end="57:42">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:38"><expr pos:start="59:5" pos:end="59:37"><call pos:start="59:5" pos:end="59:37"><name pos:start="59:5" pos:end="59:18">visit_type_int</name><argument_list pos:start="59:19" pos:end="59:37">(<argument pos:start="59:20" pos:end="59:20"><expr pos:start="59:20" pos:end="59:20"><name pos:start="59:20" pos:end="59:20">v</name></expr></argument>, <argument pos:start="59:23" pos:end="59:26"><expr pos:start="59:23" pos:end="59:26"><name pos:start="59:23" pos:end="59:26">NULL</name></expr></argument>, <argument pos:start="59:29" pos:end="59:30"><expr pos:start="59:29" pos:end="59:30"><operator pos:start="59:29" pos:end="59:29">&amp;</operator><name pos:start="59:30" pos:end="59:30">i</name></expr></argument>, <argument pos:start="59:33" pos:end="59:36"><expr pos:start="59:33" pos:end="59:36"><operator pos:start="59:33" pos:end="59:33">&amp;</operator><name pos:start="59:34" pos:end="59:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:30"><expr pos:start="61:5" pos:end="61:29"><call pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:23">error_free_or_abort</name><argument_list pos:start="61:24" pos:end="61:29">(<argument pos:start="61:25" pos:end="61:28"><expr pos:start="61:25" pos:end="61:28"><operator pos:start="61:25" pos:end="61:25">&amp;</operator><name pos:start="61:26" pos:end="61:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:60">/* Make sure primitives and arrays cannot be confused */</comment>



    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:5">v</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <call pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:31">visitor_input_test_init</name><argument_list pos:start="69:32" pos:end="69:42">(<argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">data</name></expr></argument>, <argument pos:start="69:39" pos:end="69:41"><expr pos:start="69:39" pos:end="69:41"><literal type="string" pos:start="69:39" pos:end="69:41">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:42"><expr pos:start="71:5" pos:end="71:41"><call pos:start="71:5" pos:end="71:41"><name pos:start="71:5" pos:end="71:22">visit_type_strList</name><argument_list pos:start="71:23" pos:end="71:41">(<argument pos:start="71:24" pos:end="71:24"><expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">v</name></expr></argument>, <argument pos:start="71:27" pos:end="71:30"><expr pos:start="71:27" pos:end="71:30"><name pos:start="71:27" pos:end="71:30">NULL</name></expr></argument>, <argument pos:start="71:33" pos:end="71:34"><expr pos:start="71:33" pos:end="71:34"><operator pos:start="71:33" pos:end="71:33">&amp;</operator><name pos:start="71:34" pos:end="71:34">q</name></expr></argument>, <argument pos:start="71:37" pos:end="71:40"><expr pos:start="71:37" pos:end="71:40"><operator pos:start="71:37" pos:end="71:37">&amp;</operator><name pos:start="71:38" pos:end="71:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:30"><expr pos:start="73:5" pos:end="73:29"><call pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:23">error_free_or_abort</name><argument_list pos:start="73:24" pos:end="73:29">(<argument pos:start="73:25" pos:end="73:28"><expr pos:start="73:25" pos:end="73:28"><operator pos:start="73:25" pos:end="73:25">&amp;</operator><name pos:start="73:26" pos:end="73:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:15"><expr pos:start="75:5" pos:end="75:14"><call pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:10">assert</name><argument_list pos:start="75:11" pos:end="75:14">(<argument pos:start="75:12" pos:end="75:13"><expr pos:start="75:12" pos:end="75:13"><operator pos:start="75:12" pos:end="75:12">!</operator><name pos:start="75:13" pos:end="75:13">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:44"><expr pos:start="79:5" pos:end="79:43"><name pos:start="79:5" pos:end="79:5">v</name> <operator pos:start="79:7" pos:end="79:7">=</operator> <call pos:start="79:9" pos:end="79:43"><name pos:start="79:9" pos:end="79:31">visitor_input_test_init</name><argument_list pos:start="79:32" pos:end="79:43">(<argument pos:start="79:33" pos:end="79:36"><expr pos:start="79:33" pos:end="79:36"><name pos:start="79:33" pos:end="79:36">data</name></expr></argument>, <argument pos:start="79:39" pos:end="79:42"><expr pos:start="79:39" pos:end="79:42"><literal type="string" pos:start="79:39" pos:end="79:42">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:38"><expr pos:start="81:5" pos:end="81:37"><call pos:start="81:5" pos:end="81:37"><name pos:start="81:5" pos:end="81:18">visit_type_int</name><argument_list pos:start="81:19" pos:end="81:37">(<argument pos:start="81:20" pos:end="81:20"><expr pos:start="81:20" pos:end="81:20"><name pos:start="81:20" pos:end="81:20">v</name></expr></argument>, <argument pos:start="81:23" pos:end="81:26"><expr pos:start="81:23" pos:end="81:26"><name pos:start="81:23" pos:end="81:26">NULL</name></expr></argument>, <argument pos:start="81:29" pos:end="81:30"><expr pos:start="81:29" pos:end="81:30"><operator pos:start="81:29" pos:end="81:29">&amp;</operator><name pos:start="81:30" pos:end="81:30">i</name></expr></argument>, <argument pos:start="81:33" pos:end="81:36"><expr pos:start="81:33" pos:end="81:36"><operator pos:start="81:33" pos:end="81:33">&amp;</operator><name pos:start="81:34" pos:end="81:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:30"><expr pos:start="83:5" pos:end="83:29"><call pos:start="83:5" pos:end="83:29"><name pos:start="83:5" pos:end="83:23">error_free_or_abort</name><argument_list pos:start="83:24" pos:end="83:29">(<argument pos:start="83:25" pos:end="83:28"><expr pos:start="83:25" pos:end="83:28"><operator pos:start="83:25" pos:end="83:25">&amp;</operator><name pos:start="83:26" pos:end="83:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
