<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16806.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">avcodec_close</name><parameter_list pos:start="1:18" pos:end="1:40">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:34"><name pos:start="1:19" pos:end="1:32">AVCodecContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:39">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:13">

    <comment type="block" pos:start="5:5" pos:end="5:69">/* If there is a user-supplied mutex locking routine, call it. */</comment>

    <if_stmt pos:start="7:5" pos:end="13:5"><if pos:start="7:5" pos:end="13:5">if <condition pos:start="7:8" pos:end="7:22">(<expr pos:start="7:9" pos:end="7:21"><name pos:start="7:9" pos:end="7:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="7:24" pos:end="13:5">{<block_content pos:start="9:9" pos:end="11:22">

        <if_stmt pos:start="9:9" pos:end="11:22"><if pos:start="9:9" pos:end="11:22">if <condition pos:start="9:12" pos:end="9:59">(<expr pos:start="9:13" pos:end="9:58"><call pos:start="9:13" pos:end="9:58">(<modifier pos:start="9:14" pos:end="9:14">*</modifier><name pos:start="9:15" pos:end="9:27">ff_lockmgr_cb</name>)<argument_list pos:start="9:29" pos:end="9:58">(<argument pos:start="9:30" pos:end="9:41"><expr pos:start="9:30" pos:end="9:41"><operator pos:start="9:30" pos:end="9:30">&amp;</operator><name pos:start="9:31" pos:end="9:41">codec_mutex</name></expr></argument>, <argument pos:start="9:44" pos:end="9:57"><expr pos:start="9:44" pos:end="9:57"><name pos:start="9:44" pos:end="9:57">AV_LOCK_OBTAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="11:13" pos:end="11:22"><block_content pos:start="11:13" pos:end="11:22">

            <return pos:start="11:13" pos:end="11:22">return <expr pos:start="11:20" pos:end="11:21"><operator pos:start="11:20" pos:end="11:20">-</operator><literal type="number" pos:start="11:21" pos:end="11:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:28">entangled_thread_counter</name><operator pos:start="17:29" pos:end="17:30">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if<condition pos:start="19:7" pos:end="19:37">(<expr pos:start="19:8" pos:end="19:36"><name pos:start="19:8" pos:end="19:31">entangled_thread_counter</name> <operator pos:start="19:33" pos:end="19:34">!=</operator> <literal type="number" pos:start="19:36" pos:end="19:36">1</literal></expr>)</condition><block pos:start="19:38" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:18">

        <expr_stmt pos:start="21:9" pos:end="21:97"><expr pos:start="21:9" pos:end="21:96"><call pos:start="21:9" pos:end="21:96"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:96">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="21:95"><expr pos:start="21:37" pos:end="21:95"><literal type="string" pos:start="21:37" pos:end="21:95">"insufficient thread locking around avcodec_open/close()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:35"><expr pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:32">entangled_thread_counter</name><operator pos:start="23:33" pos:end="23:34">--</operator></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="33:35"><if pos:start="31:5" pos:end="33:35">if <condition pos:start="31:8" pos:end="31:45">(<expr pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:20">HAVE_THREADS</name> <operator pos:start="31:22" pos:end="31:23">&amp;&amp;</operator> <name pos:start="31:25" pos:end="31:44"><name pos:start="31:25" pos:end="31:29">avctx</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:44">thread_opaque</name></name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:35"><block_content pos:start="33:9" pos:end="33:35">

        <expr_stmt pos:start="33:9" pos:end="33:35"><expr pos:start="33:9" pos:end="33:34"><call pos:start="33:9" pos:end="33:34"><name pos:start="33:9" pos:end="33:27">avcodec_thread_free</name><argument_list pos:start="33:28" pos:end="33:34">(<argument pos:start="33:29" pos:end="33:33"><expr pos:start="33:29" pos:end="33:33"><name pos:start="33:29" pos:end="33:33">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="37:35"><if pos:start="35:5" pos:end="37:35">if <condition pos:start="35:8" pos:end="35:28">(<expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:13">avctx</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:20">codec</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:27">close</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:35"><block_content pos:start="37:9" pos:end="37:35">

        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><call pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">codec</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:27">close</name></name><argument_list pos:start="37:28" pos:end="37:34">(<argument pos:start="37:29" pos:end="37:33"><expr pos:start="37:29" pos:end="37:33"><name pos:start="37:29" pos:end="37:33">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:40"><expr pos:start="39:5" pos:end="39:39"><call pos:start="39:5" pos:end="39:39"><name pos:start="39:5" pos:end="39:32">avcodec_default_free_buffers</name><argument_list pos:start="39:33" pos:end="39:39">(<argument pos:start="39:34" pos:end="39:38"><expr pos:start="39:34" pos:end="39:38"><name pos:start="39:34" pos:end="39:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:32"><expr pos:start="41:5" pos:end="41:31"><call pos:start="41:5" pos:end="41:31"><name pos:start="41:5" pos:end="41:12">av_freep</name><argument_list pos:start="41:13" pos:end="41:31">(<argument pos:start="41:14" pos:end="41:30"><expr pos:start="41:14" pos:end="41:30"><operator pos:start="41:14" pos:end="41:14">&amp;</operator><name pos:start="41:15" pos:end="41:30"><name pos:start="41:15" pos:end="41:19">avctx</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:30">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:9">avctx</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:16">codec</name></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:23">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:28">entangled_thread_counter</name><operator pos:start="45:29" pos:end="45:30">--</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:42">/* Release any user-supplied mutex. */</comment>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:22">(<expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="51:24" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:56">

        <expr_stmt pos:start="53:9" pos:end="53:56"><expr pos:start="53:9" pos:end="53:55"><call pos:start="53:9" pos:end="53:55">(<modifier pos:start="53:10" pos:end="53:10">*</modifier><name pos:start="53:11" pos:end="53:23">ff_lockmgr_cb</name>)<argument_list pos:start="53:25" pos:end="53:55">(<argument pos:start="53:26" pos:end="53:37"><expr pos:start="53:26" pos:end="53:37"><operator pos:start="53:26" pos:end="53:26">&amp;</operator><name pos:start="53:27" pos:end="53:37">codec_mutex</name></expr></argument>, <argument pos:start="53:40" pos:end="53:54"><expr pos:start="53:40" pos:end="53:54"><name pos:start="53:40" pos:end="53:54">AV_LOCK_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
