<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16231.c" pos:tabs="8"><function pos:start="1:1" pos:end="287:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:28">gen_bcond</name> <parameter_list pos:start="1:30" pos:end="1:58">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:47"><name pos:start="1:31" pos:end="1:42">DisasContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">ctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:57"><decl pos:start="1:50" pos:end="1:57"><type pos:start="1:50" pos:end="1:57"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:57">type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="287:1">{<block_content pos:start="5:5" pos:end="285:33">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">target_ulong</name></type> <name pos:start="5:18" pos:end="5:23">target</name> <init pos:start="5:25" pos:end="5:27">= <expr pos:start="5:27" pos:end="5:27"><literal type="number" pos:start="5:27" pos:end="5:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:19">li</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:15">bo</name> <init pos:start="9:17" pos:end="9:33">= <expr pos:start="9:19" pos:end="9:33"><call pos:start="9:19" pos:end="9:33"><name pos:start="9:19" pos:end="9:20">BO</name><argument_list pos:start="9:21" pos:end="9:33">(<argument pos:start="9:22" pos:end="9:32"><expr pos:start="9:22" pos:end="9:32"><name pos:start="9:22" pos:end="9:32"><name pos:start="9:22" pos:end="9:24">ctx</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:32">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:15">bi</name> <init pos:start="11:17" pos:end="11:33">= <expr pos:start="11:19" pos:end="11:33"><call pos:start="11:19" pos:end="11:33"><name pos:start="11:19" pos:end="11:20">BI</name><argument_list pos:start="11:21" pos:end="11:33">(<argument pos:start="11:22" pos:end="11:32"><expr pos:start="11:22" pos:end="11:32"><name pos:start="11:22" pos:end="11:32"><name pos:start="11:22" pos:end="11:24">ctx</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:32">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">mask</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:25"><if pos:start="17:5" pos:end="19:25">if <condition pos:start="17:8" pos:end="17:24">(<expr pos:start="17:9" pos:end="17:23"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:11">bo</name> <operator pos:start="17:13" pos:end="17:13">&amp;</operator> <literal type="number" pos:start="17:15" pos:end="17:17">0x4</literal><operator pos:start="17:18" pos:end="17:18">)</operator> <operator pos:start="17:20" pos:end="17:21">==</operator> <literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:25"><block_content pos:start="19:9" pos:end="19:25">

        <expr_stmt pos:start="19:9" pos:end="19:25"><expr pos:start="19:9" pos:end="19:24"><call pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:22">gen_op_dec_ctr</name><argument_list pos:start="19:23" pos:end="19:24">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch pos:start="21:5" pos:end="53:5">switch<condition pos:start="21:11" pos:end="21:16">(<expr pos:start="21:12" pos:end="21:15"><name pos:start="21:12" pos:end="21:15">type</name></expr>)</condition> <block pos:start="21:18" pos:end="53:5">{<block_content pos:start="23:5" pos:end="51:14">

    <case pos:start="23:5" pos:end="23:18">case <expr pos:start="23:10" pos:end="23:17"><name pos:start="23:10" pos:end="23:17">BCOND_IM</name></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:10">li</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <operator pos:start="25:14" pos:end="25:14">(</operator><name pos:start="25:15" pos:end="25:25">target_long</name><operator pos:start="25:26" pos:end="25:26">)</operator><operator pos:start="25:27" pos:end="25:27">(</operator><operator pos:start="25:28" pos:end="25:28">(</operator><name pos:start="25:29" pos:end="25:35">int16_t</name><operator pos:start="25:36" pos:end="25:36">)</operator><operator pos:start="25:37" pos:end="25:37">(</operator><call pos:start="25:38" pos:end="25:52"><name pos:start="25:38" pos:end="25:39">BD</name><argument_list pos:start="25:40" pos:end="25:52">(<argument pos:start="25:41" pos:end="25:51"><expr pos:start="25:41" pos:end="25:51"><name pos:start="25:41" pos:end="25:51"><name pos:start="25:41" pos:end="25:43">ctx</name><operator pos:start="25:44" pos:end="25:45">-&gt;</operator><name pos:start="25:46" pos:end="25:51">opcode</name></name></expr></argument>)</argument_list></call><operator pos:start="25:53" pos:end="25:53">)</operator><operator pos:start="25:54" pos:end="25:54">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="35:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:41">(<expr pos:start="27:13" pos:end="27:40"><call pos:start="27:13" pos:end="27:40"><name pos:start="27:13" pos:end="27:18">likely</name><argument_list pos:start="27:19" pos:end="27:40">(<argument pos:start="27:20" pos:end="27:39"><expr pos:start="27:20" pos:end="27:39"><call pos:start="27:20" pos:end="27:34"><name pos:start="27:20" pos:end="27:21">AA</name><argument_list pos:start="27:22" pos:end="27:34">(<argument pos:start="27:23" pos:end="27:33"><expr pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:25">ctx</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:33">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="27:36" pos:end="27:37">==</operator> <literal type="number" pos:start="27:39" pos:end="27:39">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:43" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:39">

            <expr_stmt pos:start="29:13" pos:end="29:39"><expr pos:start="29:13" pos:end="29:38"><name pos:start="29:13" pos:end="29:18">target</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:29"><name pos:start="29:22" pos:end="29:24">ctx</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:29">nip</name></name> <operator pos:start="29:31" pos:end="29:31">+</operator> <name pos:start="29:33" pos:end="29:34">li</name> <operator pos:start="29:36" pos:end="29:36">-</operator> <literal type="number" pos:start="29:38" pos:end="29:38">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="35:9">else <block pos:start="31:16" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:24">

            <expr_stmt pos:start="33:13" pos:end="33:24"><expr pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:18">target</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:23">li</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:19">case <expr pos:start="39:10" pos:end="39:18"><name pos:start="39:10" pos:end="39:18">BCOND_CTR</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><call pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:26">gen_op_movl_T1_ctr</name><argument_list pos:start="41:27" pos:end="41:28">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <default pos:start="45:5" pos:end="45:12">default:</default>

    <case pos:start="47:5" pos:end="47:18">case <expr pos:start="47:10" pos:end="47:17"><name pos:start="47:10" pos:end="47:17">BCOND_LR</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><call pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:25">gen_op_movl_T1_lr</name><argument_list pos:start="49:26" pos:end="49:27">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="55:5" pos:end="69:5"><if pos:start="55:5" pos:end="69:5">if <condition pos:start="55:8" pos:end="55:24">(<expr pos:start="55:9" pos:end="55:23"><call pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:10">LK</name><argument_list pos:start="55:11" pos:end="55:23">(<argument pos:start="55:12" pos:end="55:22"><expr pos:start="55:12" pos:end="55:22"><name pos:start="55:12" pos:end="55:22"><name pos:start="55:12" pos:end="55:14">ctx</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:22">opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:26" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:35">

<cpp:if pos:start="57:1" pos:end="57:25">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:25"><call pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:11">defined</name><argument_list pos:start="57:12" pos:end="57:25">(<argument pos:start="57:13" pos:end="57:24"><expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="59:9" pos:end="67:35"><if pos:start="59:9" pos:end="61:54">if <condition pos:start="59:12" pos:end="59:25">(<expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:15">ctx</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:24">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:54"><block_content pos:start="61:13" pos:end="61:54">

            <expr_stmt pos:start="61:13" pos:end="61:54"><expr pos:start="61:13" pos:end="61:53"><call pos:start="61:13" pos:end="61:53"><name pos:start="61:13" pos:end="61:27">gen_op_setlr_64</name><argument_list pos:start="61:28" pos:end="61:53">(<argument pos:start="61:29" pos:end="61:42"><expr pos:start="61:29" pos:end="61:42"><name pos:start="61:29" pos:end="61:36"><name pos:start="61:29" pos:end="61:31">ctx</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:36">nip</name></name> <operator pos:start="61:38" pos:end="61:39">&gt;&gt;</operator> <literal type="number" pos:start="61:41" pos:end="61:42">32</literal></expr></argument>, <argument pos:start="61:45" pos:end="61:52"><expr pos:start="61:45" pos:end="61:52"><name pos:start="61:45" pos:end="61:52"><name pos:start="61:45" pos:end="61:47">ctx</name><operator pos:start="61:48" pos:end="61:49">-&gt;</operator><name pos:start="61:50" pos:end="61:52">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="63:9" pos:end="67:35">else<block type="pseudo" pos:start="67:13" pos:end="67:35"><block_content pos:start="67:13" pos:end="67:35">

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><call pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:24">gen_op_setlr</name><argument_list pos:start="67:25" pos:end="67:34">(<argument pos:start="67:26" pos:end="67:33"><expr pos:start="67:26" pos:end="67:33"><name pos:start="67:26" pos:end="67:33"><name pos:start="67:26" pos:end="67:28">ctx</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:33">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="245:5"><if pos:start="71:5" pos:end="141:5">if <condition pos:start="71:8" pos:end="71:18">(<expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:10">bo</name> <operator pos:start="71:12" pos:end="71:12">&amp;</operator> <literal type="number" pos:start="71:14" pos:end="71:17">0x10</literal></expr>)</condition> <block pos:start="71:20" pos:end="141:5">{<block_content pos:start="75:9" pos:end="139:9">

        <comment type="block" pos:start="73:9" pos:end="73:29">/* No CR condition */</comment>

        <switch pos:start="75:9" pos:end="139:9">switch <condition pos:start="75:16" pos:end="75:25">(<expr pos:start="75:17" pos:end="75:24"><name pos:start="75:17" pos:end="75:18">bo</name> <operator pos:start="75:20" pos:end="75:20">&amp;</operator> <literal type="number" pos:start="75:22" pos:end="75:24">0x6</literal></expr>)</condition> <block pos:start="75:27" pos:end="139:9">{<block_content pos:start="77:9" pos:end="137:25">

        <case pos:start="77:9" pos:end="80:0">case <expr pos:start="77:14" pos:end="77:14"><literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>:</case>

<cpp:if pos:start="79:1" pos:end="79:25">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:25"><call pos:start="79:5" pos:end="79:25"><name pos:start="79:5" pos:end="79:11">defined</name><argument_list pos:start="79:12" pos:end="79:25">(<argument pos:start="79:13" pos:end="79:24"><expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="81:13" pos:end="89:34"><if pos:start="81:13" pos:end="83:37">if <condition pos:start="81:16" pos:end="81:29">(<expr pos:start="81:17" pos:end="81:28"><name pos:start="81:17" pos:end="81:28"><name pos:start="81:17" pos:end="81:19">ctx</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:28">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:37"><block_content pos:start="83:17" pos:end="83:37">

                <expr_stmt pos:start="83:17" pos:end="83:37"><expr pos:start="83:17" pos:end="83:36"><call pos:start="83:17" pos:end="83:36"><name pos:start="83:17" pos:end="83:34">gen_op_test_ctr_64</name><argument_list pos:start="83:35" pos:end="83:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="85:13" pos:end="89:34">else<block type="pseudo" pos:start="89:17" pos:end="89:34"><block_content pos:start="89:17" pos:end="89:34">

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="89:17" pos:end="89:34"><expr pos:start="89:17" pos:end="89:33"><call pos:start="89:17" pos:end="89:33"><name pos:start="89:17" pos:end="89:31">gen_op_test_ctr</name><argument_list pos:start="89:32" pos:end="89:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <case pos:start="93:9" pos:end="96:0">case <expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">2</literal></expr>:</case>

<cpp:if pos:start="95:1" pos:end="95:25">#<cpp:directive pos:start="95:2" pos:end="95:3">if</cpp:directive> <expr pos:start="95:5" pos:end="95:25"><call pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:11">defined</name><argument_list pos:start="95:12" pos:end="95:25">(<argument pos:start="95:13" pos:end="95:24"><expr pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="97:13" pos:end="105:35"><if pos:start="97:13" pos:end="99:38">if <condition pos:start="97:16" pos:end="97:29">(<expr pos:start="97:17" pos:end="97:28"><name pos:start="97:17" pos:end="97:28"><name pos:start="97:17" pos:end="97:19">ctx</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:28">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:38"><block_content pos:start="99:17" pos:end="99:38">

                <expr_stmt pos:start="99:17" pos:end="99:38"><expr pos:start="99:17" pos:end="99:37"><call pos:start="99:17" pos:end="99:37"><name pos:start="99:17" pos:end="99:35">gen_op_test_ctrz_64</name><argument_list pos:start="99:36" pos:end="99:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="101:13" pos:end="105:35">else<block type="pseudo" pos:start="105:17" pos:end="105:35"><block_content pos:start="105:17" pos:end="105:35">

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="105:17" pos:end="105:35"><expr pos:start="105:17" pos:end="105:34"><call pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:32">gen_op_test_ctrz</name><argument_list pos:start="105:33" pos:end="105:34">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <default pos:start="109:9" pos:end="109:16">default:</default>

        <case pos:start="111:9" pos:end="111:15">case <expr pos:start="111:14" pos:end="111:14"><literal type="number" pos:start="111:14" pos:end="111:14">4</literal></expr>:</case>

        <case pos:start="113:9" pos:end="113:15">case <expr pos:start="113:14" pos:end="113:14"><literal type="number" pos:start="113:14" pos:end="113:14">6</literal></expr>:</case>

            <if_stmt pos:start="115:13" pos:end="135:13"><if pos:start="115:13" pos:end="119:13">if <condition pos:start="115:16" pos:end="115:33">(<expr pos:start="115:17" pos:end="115:32"><name pos:start="115:17" pos:end="115:20">type</name> <operator pos:start="115:22" pos:end="115:23">==</operator> <name pos:start="115:25" pos:end="115:32">BCOND_IM</name></expr>)</condition> <block pos:start="115:35" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:44">

                <expr_stmt pos:start="117:17" pos:end="117:44"><expr pos:start="117:17" pos:end="117:43"><call pos:start="117:17" pos:end="117:43"><name pos:start="117:17" pos:end="117:27">gen_goto_tb</name><argument_list pos:start="117:28" pos:end="117:43">(<argument pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:31">ctx</name></expr></argument>, <argument pos:start="117:34" pos:end="117:34"><expr pos:start="117:34" pos:end="117:34"><literal type="number" pos:start="117:34" pos:end="117:34">0</literal></expr></argument>, <argument pos:start="117:37" pos:end="117:42"><expr pos:start="117:37" pos:end="117:42"><name pos:start="117:37" pos:end="117:42">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="119:15" pos:end="135:13">else <block pos:start="119:20" pos:end="135:13">{<block_content pos:start="123:17" pos:end="133:34">

<cpp:if pos:start="121:1" pos:end="121:25">#<cpp:directive pos:start="121:2" pos:end="121:3">if</cpp:directive> <expr pos:start="121:5" pos:end="121:25"><call pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:11">defined</name><argument_list pos:start="121:12" pos:end="121:25">(<argument pos:start="121:13" pos:end="121:24"><expr pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="123:17" pos:end="131:34"><if pos:start="123:17" pos:end="125:37">if <condition pos:start="123:20" pos:end="123:33">(<expr pos:start="123:21" pos:end="123:32"><name pos:start="123:21" pos:end="123:32"><name pos:start="123:21" pos:end="123:23">ctx</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:32">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="125:21" pos:end="125:37"><block_content pos:start="125:21" pos:end="125:37">

                    <expr_stmt pos:start="125:21" pos:end="125:37"><expr pos:start="125:21" pos:end="125:36"><call pos:start="125:21" pos:end="125:36"><name pos:start="125:21" pos:end="125:34">gen_op_b_T1_64</name><argument_list pos:start="125:35" pos:end="125:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="127:17" pos:end="131:34">else<block type="pseudo" pos:start="131:21" pos:end="131:34"><block_content pos:start="131:21" pos:end="131:34">

<cpp:endif pos:start="129:1" pos:end="129:6">#<cpp:directive pos:start="129:2" pos:end="129:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="131:21" pos:end="131:34"><expr pos:start="131:21" pos:end="131:33"><call pos:start="131:21" pos:end="131:33"><name pos:start="131:21" pos:end="131:31">gen_op_b_T1</name><argument_list pos:start="131:32" pos:end="131:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:34"><expr pos:start="133:17" pos:end="133:33"><call pos:start="133:17" pos:end="133:33"><name pos:start="133:17" pos:end="133:31">gen_op_reset_T0</name><argument_list pos:start="133:32" pos:end="133:33">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <goto pos:start="137:13" pos:end="137:25">goto <name pos:start="137:18" pos:end="137:24">no_test</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="245:5">else <block pos:start="141:12" pos:end="245:5">{<block_content pos:start="143:9" pos:end="243:9">

        <expr_stmt pos:start="143:9" pos:end="143:38"><expr pos:start="143:9" pos:end="143:37"><name pos:start="143:9" pos:end="143:12">mask</name> <operator pos:start="143:14" pos:end="143:14">=</operator> <literal type="number" pos:start="143:16" pos:end="143:16">1</literal> <operator pos:start="143:18" pos:end="143:19">&lt;&lt;</operator> <operator pos:start="143:21" pos:end="143:21">(</operator><literal type="number" pos:start="143:22" pos:end="143:24">3</literal> <operator pos:start="143:24" pos:end="143:24">-</operator> <operator pos:start="143:26" pos:end="143:26">(</operator><name pos:start="143:27" pos:end="143:28">bi</name> <operator pos:start="143:30" pos:end="143:30">&amp;</operator> <literal type="number" pos:start="143:32" pos:end="143:35">0x03</literal><operator pos:start="143:36" pos:end="143:36">)</operator><operator pos:start="143:37" pos:end="143:37">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:36"><expr pos:start="145:9" pos:end="145:35"><call pos:start="145:9" pos:end="145:35"><name pos:start="145:9" pos:end="145:26">gen_op_load_crf_T0</name><argument_list pos:start="145:27" pos:end="145:35">(<argument pos:start="145:28" pos:end="145:34"><expr pos:start="145:28" pos:end="145:34"><name pos:start="145:28" pos:end="145:29">bi</name> <operator pos:start="145:31" pos:end="145:32">&gt;&gt;</operator> <literal type="number" pos:start="145:34" pos:end="145:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="243:9"><if pos:start="147:9" pos:end="195:9">if <condition pos:start="147:12" pos:end="147:21">(<expr pos:start="147:13" pos:end="147:20"><name pos:start="147:13" pos:end="147:14">bo</name> <operator pos:start="147:16" pos:end="147:16">&amp;</operator> <literal type="number" pos:start="147:18" pos:end="147:20">0x8</literal></expr>)</condition> <block pos:start="147:23" pos:end="195:9">{<block_content pos:start="149:13" pos:end="193:13">

            <switch pos:start="149:13" pos:end="193:13">switch <condition pos:start="149:20" pos:end="149:29">(<expr pos:start="149:21" pos:end="149:28"><name pos:start="149:21" pos:end="149:22">bo</name> <operator pos:start="149:24" pos:end="149:24">&amp;</operator> <literal type="number" pos:start="149:26" pos:end="149:28">0x6</literal></expr>)</condition> <block pos:start="149:31" pos:end="193:13">{<block_content pos:start="151:13" pos:end="191:22">

            <case pos:start="151:13" pos:end="154:0">case <expr pos:start="151:18" pos:end="151:18"><literal type="number" pos:start="151:18" pos:end="151:18">0</literal></expr>:</case>

<cpp:if pos:start="153:1" pos:end="153:25">#<cpp:directive pos:start="153:2" pos:end="153:3">if</cpp:directive> <expr pos:start="153:5" pos:end="153:25"><call pos:start="153:5" pos:end="153:25"><name pos:start="153:5" pos:end="153:11">defined</name><argument_list pos:start="153:12" pos:end="153:25">(<argument pos:start="153:13" pos:end="153:24"><expr pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="155:17" pos:end="163:47"><if pos:start="155:17" pos:end="157:50">if <condition pos:start="155:20" pos:end="155:33">(<expr pos:start="155:21" pos:end="155:32"><name pos:start="155:21" pos:end="155:32"><name pos:start="155:21" pos:end="155:23">ctx</name><operator pos:start="155:24" pos:end="155:25">-&gt;</operator><name pos:start="155:26" pos:end="155:32">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="157:21" pos:end="157:50"><block_content pos:start="157:21" pos:end="157:50">

                    <expr_stmt pos:start="157:21" pos:end="157:50"><expr pos:start="157:21" pos:end="157:49"><call pos:start="157:21" pos:end="157:49"><name pos:start="157:21" pos:end="157:43">gen_op_test_ctr_true_64</name><argument_list pos:start="157:44" pos:end="157:49">(<argument pos:start="157:45" pos:end="157:48"><expr pos:start="157:45" pos:end="157:48"><name pos:start="157:45" pos:end="157:48">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="159:17" pos:end="163:47">else<block type="pseudo" pos:start="163:21" pos:end="163:47"><block_content pos:start="163:21" pos:end="163:47">

<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="163:21" pos:end="163:47"><expr pos:start="163:21" pos:end="163:46"><call pos:start="163:21" pos:end="163:46"><name pos:start="163:21" pos:end="163:40">gen_op_test_ctr_true</name><argument_list pos:start="163:41" pos:end="163:46">(<argument pos:start="163:42" pos:end="163:45"><expr pos:start="163:42" pos:end="163:45"><name pos:start="163:42" pos:end="163:45">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="165:17" pos:end="165:22">break;</break>

            <case pos:start="167:13" pos:end="170:0">case <expr pos:start="167:18" pos:end="167:18"><literal type="number" pos:start="167:18" pos:end="167:18">2</literal></expr>:</case>

<cpp:if pos:start="169:1" pos:end="169:25">#<cpp:directive pos:start="169:2" pos:end="169:3">if</cpp:directive> <expr pos:start="169:5" pos:end="169:25"><call pos:start="169:5" pos:end="169:25"><name pos:start="169:5" pos:end="169:11">defined</name><argument_list pos:start="169:12" pos:end="169:25">(<argument pos:start="169:13" pos:end="169:24"><expr pos:start="169:13" pos:end="169:24"><name pos:start="169:13" pos:end="169:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="171:17" pos:end="179:48"><if pos:start="171:17" pos:end="173:51">if <condition pos:start="171:20" pos:end="171:33">(<expr pos:start="171:21" pos:end="171:32"><name pos:start="171:21" pos:end="171:32"><name pos:start="171:21" pos:end="171:23">ctx</name><operator pos:start="171:24" pos:end="171:25">-&gt;</operator><name pos:start="171:26" pos:end="171:32">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="173:21" pos:end="173:51"><block_content pos:start="173:21" pos:end="173:51">

                    <expr_stmt pos:start="173:21" pos:end="173:51"><expr pos:start="173:21" pos:end="173:50"><call pos:start="173:21" pos:end="173:50"><name pos:start="173:21" pos:end="173:44">gen_op_test_ctrz_true_64</name><argument_list pos:start="173:45" pos:end="173:50">(<argument pos:start="173:46" pos:end="173:49"><expr pos:start="173:46" pos:end="173:49"><name pos:start="173:46" pos:end="173:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="175:17" pos:end="179:48">else<block type="pseudo" pos:start="179:21" pos:end="179:48"><block_content pos:start="179:21" pos:end="179:48">

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="179:21" pos:end="179:48"><expr pos:start="179:21" pos:end="179:47"><call pos:start="179:21" pos:end="179:47"><name pos:start="179:21" pos:end="179:41">gen_op_test_ctrz_true</name><argument_list pos:start="179:42" pos:end="179:47">(<argument pos:start="179:43" pos:end="179:46"><expr pos:start="179:43" pos:end="179:46"><name pos:start="179:43" pos:end="179:46">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="181:17" pos:end="181:22">break;</break>

            <default pos:start="183:13" pos:end="183:20">default:</default>

            <case pos:start="185:13" pos:end="185:19">case <expr pos:start="185:18" pos:end="185:18"><literal type="number" pos:start="185:18" pos:end="185:18">4</literal></expr>:</case>

            <case pos:start="187:13" pos:end="187:19">case <expr pos:start="187:18" pos:end="187:18"><literal type="number" pos:start="187:18" pos:end="187:18">6</literal></expr>:</case>

                <expr_stmt pos:start="189:17" pos:end="189:39"><expr pos:start="189:17" pos:end="189:38"><call pos:start="189:17" pos:end="189:38"><name pos:start="189:17" pos:end="189:32">gen_op_test_true</name><argument_list pos:start="189:33" pos:end="189:38">(<argument pos:start="189:34" pos:end="189:37"><expr pos:start="189:34" pos:end="189:37"><name pos:start="189:34" pos:end="189:37">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="195:11" pos:end="243:9">else <block pos:start="195:16" pos:end="243:9">{<block_content pos:start="197:13" pos:end="241:13">

            <switch pos:start="197:13" pos:end="241:13">switch <condition pos:start="197:20" pos:end="197:29">(<expr pos:start="197:21" pos:end="197:28"><name pos:start="197:21" pos:end="197:22">bo</name> <operator pos:start="197:24" pos:end="197:24">&amp;</operator> <literal type="number" pos:start="197:26" pos:end="197:28">0x6</literal></expr>)</condition> <block pos:start="197:31" pos:end="241:13">{<block_content pos:start="199:13" pos:end="239:22">

            <case pos:start="199:13" pos:end="202:0">case <expr pos:start="199:18" pos:end="199:18"><literal type="number" pos:start="199:18" pos:end="199:18">0</literal></expr>:</case>

<cpp:if pos:start="201:1" pos:end="201:25">#<cpp:directive pos:start="201:2" pos:end="201:3">if</cpp:directive> <expr pos:start="201:5" pos:end="201:25"><call pos:start="201:5" pos:end="201:25"><name pos:start="201:5" pos:end="201:11">defined</name><argument_list pos:start="201:12" pos:end="201:25">(<argument pos:start="201:13" pos:end="201:24"><expr pos:start="201:13" pos:end="201:24"><name pos:start="201:13" pos:end="201:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="203:17" pos:end="211:48"><if pos:start="203:17" pos:end="205:51">if <condition pos:start="203:20" pos:end="203:33">(<expr pos:start="203:21" pos:end="203:32"><name pos:start="203:21" pos:end="203:32"><name pos:start="203:21" pos:end="203:23">ctx</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:32">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="205:21" pos:end="205:51"><block_content pos:start="205:21" pos:end="205:51">

                    <expr_stmt pos:start="205:21" pos:end="205:51"><expr pos:start="205:21" pos:end="205:50"><call pos:start="205:21" pos:end="205:50"><name pos:start="205:21" pos:end="205:44">gen_op_test_ctr_false_64</name><argument_list pos:start="205:45" pos:end="205:50">(<argument pos:start="205:46" pos:end="205:49"><expr pos:start="205:46" pos:end="205:49"><name pos:start="205:46" pos:end="205:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="207:17" pos:end="211:48">else<block type="pseudo" pos:start="211:21" pos:end="211:48"><block_content pos:start="211:21" pos:end="211:48">

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="211:21" pos:end="211:48"><expr pos:start="211:21" pos:end="211:47"><call pos:start="211:21" pos:end="211:47"><name pos:start="211:21" pos:end="211:41">gen_op_test_ctr_false</name><argument_list pos:start="211:42" pos:end="211:47">(<argument pos:start="211:43" pos:end="211:46"><expr pos:start="211:43" pos:end="211:46"><name pos:start="211:43" pos:end="211:46">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="213:17" pos:end="213:22">break;</break>

            <case pos:start="215:13" pos:end="218:0">case <expr pos:start="215:18" pos:end="215:18"><literal type="number" pos:start="215:18" pos:end="215:18">2</literal></expr>:</case>

<cpp:if pos:start="217:1" pos:end="217:25">#<cpp:directive pos:start="217:2" pos:end="217:3">if</cpp:directive> <expr pos:start="217:5" pos:end="217:25"><call pos:start="217:5" pos:end="217:25"><name pos:start="217:5" pos:end="217:11">defined</name><argument_list pos:start="217:12" pos:end="217:25">(<argument pos:start="217:13" pos:end="217:24"><expr pos:start="217:13" pos:end="217:24"><name pos:start="217:13" pos:end="217:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="219:17" pos:end="227:49"><if pos:start="219:17" pos:end="221:52">if <condition pos:start="219:20" pos:end="219:33">(<expr pos:start="219:21" pos:end="219:32"><name pos:start="219:21" pos:end="219:32"><name pos:start="219:21" pos:end="219:23">ctx</name><operator pos:start="219:24" pos:end="219:25">-&gt;</operator><name pos:start="219:26" pos:end="219:32">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="221:21" pos:end="221:52"><block_content pos:start="221:21" pos:end="221:52">

                    <expr_stmt pos:start="221:21" pos:end="221:52"><expr pos:start="221:21" pos:end="221:51"><call pos:start="221:21" pos:end="221:51"><name pos:start="221:21" pos:end="221:45">gen_op_test_ctrz_false_64</name><argument_list pos:start="221:46" pos:end="221:51">(<argument pos:start="221:47" pos:end="221:50"><expr pos:start="221:47" pos:end="221:50"><name pos:start="221:47" pos:end="221:50">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="223:17" pos:end="227:49">else<block type="pseudo" pos:start="227:21" pos:end="227:49"><block_content pos:start="227:21" pos:end="227:49">

<cpp:endif pos:start="225:1" pos:end="225:6">#<cpp:directive pos:start="225:2" pos:end="225:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="227:21" pos:end="227:49"><expr pos:start="227:21" pos:end="227:48"><call pos:start="227:21" pos:end="227:48"><name pos:start="227:21" pos:end="227:42">gen_op_test_ctrz_false</name><argument_list pos:start="227:43" pos:end="227:48">(<argument pos:start="227:44" pos:end="227:47"><expr pos:start="227:44" pos:end="227:47"><name pos:start="227:44" pos:end="227:47">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="229:17" pos:end="229:22">break;</break>

            <default pos:start="231:13" pos:end="231:20">default:</default>

            <case pos:start="233:13" pos:end="233:19">case <expr pos:start="233:18" pos:end="233:18"><literal type="number" pos:start="233:18" pos:end="233:18">4</literal></expr>:</case>

            <case pos:start="235:13" pos:end="235:19">case <expr pos:start="235:18" pos:end="235:18"><literal type="number" pos:start="235:18" pos:end="235:18">6</literal></expr>:</case>

                <expr_stmt pos:start="237:17" pos:end="237:40"><expr pos:start="237:17" pos:end="237:39"><call pos:start="237:17" pos:end="237:39"><name pos:start="237:17" pos:end="237:33">gen_op_test_false</name><argument_list pos:start="237:34" pos:end="237:39">(<argument pos:start="237:35" pos:end="237:38"><expr pos:start="237:35" pos:end="237:38"><name pos:start="237:35" pos:end="237:38">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="239:17" pos:end="239:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="247:5" pos:end="283:5"><if pos:start="247:5" pos:end="259:5">if <condition pos:start="247:8" pos:end="247:25">(<expr pos:start="247:9" pos:end="247:24"><name pos:start="247:9" pos:end="247:12">type</name> <operator pos:start="247:14" pos:end="247:15">==</operator> <name pos:start="247:17" pos:end="247:24">BCOND_IM</name></expr>)</condition> <block pos:start="247:27" pos:end="259:5">{<block_content pos:start="249:9" pos:end="257:38">

        <decl_stmt pos:start="249:9" pos:end="249:33"><decl pos:start="249:9" pos:end="249:32"><type pos:start="249:9" pos:end="249:11"><name pos:start="249:9" pos:end="249:11">int</name></type> <name pos:start="249:13" pos:end="249:14">l1</name> <init pos:start="249:16" pos:end="249:32">= <expr pos:start="249:18" pos:end="249:32"><call pos:start="249:18" pos:end="249:32"><name pos:start="249:18" pos:end="249:30">gen_new_label</name><argument_list pos:start="249:31" pos:end="249:32">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:25"><expr pos:start="251:9" pos:end="251:24"><call pos:start="251:9" pos:end="251:24"><name pos:start="251:9" pos:end="251:20">gen_op_jz_T0</name><argument_list pos:start="251:21" pos:end="251:24">(<argument pos:start="251:22" pos:end="251:23"><expr pos:start="251:22" pos:end="251:23"><name pos:start="251:22" pos:end="251:23">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:36"><expr pos:start="253:9" pos:end="253:35"><call pos:start="253:9" pos:end="253:35"><name pos:start="253:9" pos:end="253:19">gen_goto_tb</name><argument_list pos:start="253:20" pos:end="253:35">(<argument pos:start="253:21" pos:end="253:23"><expr pos:start="253:21" pos:end="253:23"><name pos:start="253:21" pos:end="253:23">ctx</name></expr></argument>, <argument pos:start="253:26" pos:end="253:26"><expr pos:start="253:26" pos:end="253:26"><literal type="number" pos:start="253:26" pos:end="253:26">0</literal></expr></argument>, <argument pos:start="253:29" pos:end="253:34"><expr pos:start="253:29" pos:end="253:34"><name pos:start="253:29" pos:end="253:34">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:26"><expr pos:start="255:9" pos:end="255:25"><call pos:start="255:9" pos:end="255:25"><name pos:start="255:9" pos:end="255:21">gen_set_label</name><argument_list pos:start="255:22" pos:end="255:25">(<argument pos:start="255:23" pos:end="255:24"><expr pos:start="255:23" pos:end="255:24"><name pos:start="255:23" pos:end="255:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:38"><expr pos:start="257:9" pos:end="257:37"><call pos:start="257:9" pos:end="257:37"><name pos:start="257:9" pos:end="257:19">gen_goto_tb</name><argument_list pos:start="257:20" pos:end="257:37">(<argument pos:start="257:21" pos:end="257:23"><expr pos:start="257:21" pos:end="257:23"><name pos:start="257:21" pos:end="257:23">ctx</name></expr></argument>, <argument pos:start="257:26" pos:end="257:26"><expr pos:start="257:26" pos:end="257:26"><literal type="number" pos:start="257:26" pos:end="257:26">1</literal></expr></argument>, <argument pos:start="257:29" pos:end="257:36"><expr pos:start="257:29" pos:end="257:36"><name pos:start="257:29" pos:end="257:36"><name pos:start="257:29" pos:end="257:31">ctx</name><operator pos:start="257:32" pos:end="257:33">-&gt;</operator><name pos:start="257:34" pos:end="257:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="259:7" pos:end="283:5">else <block pos:start="259:12" pos:end="283:5">{<block_content pos:start="263:9" pos:end="281:25">

<cpp:if pos:start="261:1" pos:end="261:25">#<cpp:directive pos:start="261:2" pos:end="261:3">if</cpp:directive> <expr pos:start="261:5" pos:end="261:25"><call pos:start="261:5" pos:end="261:25"><name pos:start="261:5" pos:end="261:11">defined</name><argument_list pos:start="261:12" pos:end="261:25">(<argument pos:start="261:13" pos:end="261:24"><expr pos:start="261:13" pos:end="261:24"><name pos:start="261:13" pos:end="261:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="263:9" pos:end="271:38"><if pos:start="263:9" pos:end="265:57">if <condition pos:start="263:12" pos:end="263:25">(<expr pos:start="263:13" pos:end="263:24"><name pos:start="263:13" pos:end="263:24"><name pos:start="263:13" pos:end="263:15">ctx</name><operator pos:start="263:16" pos:end="263:17">-&gt;</operator><name pos:start="263:18" pos:end="263:24">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="265:13" pos:end="265:57"><block_content pos:start="265:13" pos:end="265:57">

            <expr_stmt pos:start="265:13" pos:end="265:57"><expr pos:start="265:13" pos:end="265:56"><call pos:start="265:13" pos:end="265:56"><name pos:start="265:13" pos:end="265:30">gen_op_btest_T1_64</name><argument_list pos:start="265:31" pos:end="265:56">(<argument pos:start="265:32" pos:end="265:45"><expr pos:start="265:32" pos:end="265:45"><name pos:start="265:32" pos:end="265:39"><name pos:start="265:32" pos:end="265:34">ctx</name><operator pos:start="265:35" pos:end="265:36">-&gt;</operator><name pos:start="265:37" pos:end="265:39">nip</name></name> <operator pos:start="265:41" pos:end="265:42">&gt;&gt;</operator> <literal type="number" pos:start="265:44" pos:end="265:45">32</literal></expr></argument>, <argument pos:start="265:48" pos:end="265:55"><expr pos:start="265:48" pos:end="265:55"><name pos:start="265:48" pos:end="265:55"><name pos:start="265:48" pos:end="265:50">ctx</name><operator pos:start="265:51" pos:end="265:52">-&gt;</operator><name pos:start="265:53" pos:end="265:55">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="267:9" pos:end="271:38">else<block type="pseudo" pos:start="271:13" pos:end="271:38"><block_content pos:start="271:13" pos:end="271:38">

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="271:13" pos:end="271:38"><expr pos:start="271:13" pos:end="271:37"><call pos:start="271:13" pos:end="271:37"><name pos:start="271:13" pos:end="271:27">gen_op_btest_T1</name><argument_list pos:start="271:28" pos:end="271:37">(<argument pos:start="271:29" pos:end="271:36"><expr pos:start="271:29" pos:end="271:36"><name pos:start="271:29" pos:end="271:36"><name pos:start="271:29" pos:end="271:31">ctx</name><operator pos:start="271:32" pos:end="271:33">-&gt;</operator><name pos:start="271:34" pos:end="271:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:26"><expr pos:start="273:9" pos:end="273:25"><call pos:start="273:9" pos:end="273:25"><name pos:start="273:9" pos:end="273:23">gen_op_reset_T0</name><argument_list pos:start="273:24" pos:end="273:25">()</argument_list></call></expr>;</expr_stmt>

    <label pos:start="275:5" pos:end="275:12"><name pos:start="275:5" pos:end="275:11">no_test</name>:</label>

        <if_stmt pos:start="277:9" pos:end="279:27"><if pos:start="277:9" pos:end="279:27">if <condition pos:start="277:12" pos:end="277:36">(<expr pos:start="277:13" pos:end="277:35"><name pos:start="277:13" pos:end="277:35"><name pos:start="277:13" pos:end="277:15">ctx</name><operator pos:start="277:16" pos:end="277:17">-&gt;</operator><name pos:start="277:18" pos:end="277:35">singlestep_enabled</name></name></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:27"><block_content pos:start="279:13" pos:end="279:27">

            <expr_stmt pos:start="279:13" pos:end="279:27"><expr pos:start="279:13" pos:end="279:26"><call pos:start="279:13" pos:end="279:26"><name pos:start="279:13" pos:end="279:24">gen_op_debug</name><argument_list pos:start="279:25" pos:end="279:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:25"><expr pos:start="281:9" pos:end="281:24"><call pos:start="281:9" pos:end="281:24"><name pos:start="281:9" pos:end="281:22">gen_op_exit_tb</name><argument_list pos:start="281:23" pos:end="281:24">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:33"><expr pos:start="285:5" pos:end="285:32"><name pos:start="285:5" pos:end="285:18"><name pos:start="285:5" pos:end="285:7">ctx</name><operator pos:start="285:8" pos:end="285:9">-&gt;</operator><name pos:start="285:10" pos:end="285:18">exception</name></name> <operator pos:start="285:20" pos:end="285:20">=</operator> <name pos:start="285:22" pos:end="285:32">EXCP_BRANCH</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
