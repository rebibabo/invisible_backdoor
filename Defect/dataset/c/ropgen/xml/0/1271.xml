<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1271.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">ff_isom_write_avcc</name><parameter_list pos:start="1:23" pos:end="1:69">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><name pos:start="1:24" pos:end="1:34">AVIOContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">pb</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:59"><decl pos:start="1:41" pos:end="1:59"><type pos:start="1:41" pos:end="1:59"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">data</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:68"><decl pos:start="1:62" pos:end="1:68"><type pos:start="1:62" pos:end="1:68"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:68">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <if_stmt pos:start="5:5" pos:end="101:5"><if pos:start="5:5" pos:end="101:5">if <condition pos:start="5:8" pos:end="5:16">(<expr pos:start="5:9" pos:end="5:15"><name pos:start="5:9" pos:end="5:11">len</name> <operator pos:start="5:13" pos:end="5:13">&gt;</operator> <literal type="number" pos:start="5:15" pos:end="5:15">6</literal></expr>)</condition> <block pos:start="5:18" pos:end="101:5">{<block_content pos:start="9:9" pos:end="99:9">

        <comment type="block" pos:start="7:9" pos:end="7:39">/* check for h264 start code */</comment>

        <if_stmt pos:start="9:9" pos:end="99:9"><if pos:start="9:9" pos:end="95:9">if <condition pos:start="9:12" pos:end="11:38">(<expr pos:start="9:13" pos:end="11:37"><call pos:start="9:13" pos:end="9:25"><name pos:start="9:13" pos:end="9:19">AV_RB32</name><argument_list pos:start="9:20" pos:end="9:25">(<argument pos:start="9:21" pos:end="9:24"><expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">data</name></expr></argument>)</argument_list></call> <operator pos:start="9:27" pos:end="9:28">==</operator> <literal type="number" pos:start="9:30" pos:end="9:39">0x00000001</literal> <operator pos:start="9:41" pos:end="9:42">||</operator>

            <call pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:19">AV_RB24</name><argument_list pos:start="11:20" pos:end="11:25">(<argument pos:start="11:21" pos:end="11:24"><expr pos:start="11:21" pos:end="11:24"><name pos:start="11:21" pos:end="11:24">data</name></expr></argument>)</argument_list></call> <operator pos:start="11:27" pos:end="11:28">==</operator> <literal type="number" pos:start="11:30" pos:end="11:37">0x000001</literal></expr>)</condition> <block pos:start="11:40" pos:end="95:9">{<block_content pos:start="13:13" pos:end="93:27">

            <decl_stmt pos:start="13:13" pos:end="13:44"><decl pos:start="13:13" pos:end="13:29"><type pos:start="13:13" pos:end="13:21"><name pos:start="13:13" pos:end="13:19">uint8_t</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:24">buf</name><init pos:start="13:25" pos:end="13:29">=<expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></init></decl>, <decl pos:start="13:32" pos:end="13:35"><type ref="prev" pos:start="13:13" pos:end="13:21"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:35">end</name></decl>, <decl pos:start="13:38" pos:end="13:43"><type ref="prev" pos:start="13:13" pos:end="13:21"><modifier pos:start="13:38" pos:end="13:38">*</modifier></type><name pos:start="13:39" pos:end="13:43">start</name></decl>;</decl_stmt>

            <decl_stmt pos:start="15:13" pos:end="15:44"><decl pos:start="15:13" pos:end="15:31"><type pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:20">uint32_t</name></type> <name pos:start="15:22" pos:end="15:29">sps_size</name><init pos:start="15:30" pos:end="15:31">=<expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr></init></decl>, <decl pos:start="15:34" pos:end="15:43"><type ref="prev" pos:start="15:13" pos:end="15:20"/><name pos:start="15:34" pos:end="15:41">pps_size</name><init pos:start="15:42" pos:end="15:43">=<expr pos:start="15:43" pos:end="15:43"><literal type="number" pos:start="15:43" pos:end="15:43">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="17:13" pos:end="17:35"><decl pos:start="17:13" pos:end="17:26"><type pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:19">uint8_t</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:24">sps</name><init pos:start="17:25" pos:end="17:26">=<expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr></init></decl>, <decl pos:start="17:29" pos:end="17:34"><type ref="prev" pos:start="17:13" pos:end="17:21"><modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:32">pps</name><init pos:start="17:33" pos:end="17:34">=<expr pos:start="17:34" pos:end="17:34"><literal type="number" pos:start="17:34" pos:end="17:34">0</literal></expr></init></decl>;</decl_stmt>



            <decl_stmt pos:start="21:13" pos:end="21:67"><decl pos:start="21:13" pos:end="21:66"><type pos:start="21:13" pos:end="21:15"><name pos:start="21:13" pos:end="21:15">int</name></type> <name pos:start="21:17" pos:end="21:19">ret</name> <init pos:start="21:21" pos:end="21:66">= <expr pos:start="21:23" pos:end="21:66"><call pos:start="21:23" pos:end="21:66"><name pos:start="21:23" pos:end="21:48">ff_avc_parse_nal_units_buf</name><argument_list pos:start="21:49" pos:end="21:66">(<argument pos:start="21:50" pos:end="21:53"><expr pos:start="21:50" pos:end="21:53"><name pos:start="21:50" pos:end="21:53">data</name></expr></argument>, <argument pos:start="21:56" pos:end="21:59"><expr pos:start="21:56" pos:end="21:59"><operator pos:start="21:56" pos:end="21:56">&amp;</operator><name pos:start="21:57" pos:end="21:59">buf</name></expr></argument>, <argument pos:start="21:62" pos:end="21:65"><expr pos:start="21:62" pos:end="21:65"><operator pos:start="21:62" pos:end="21:62">&amp;</operator><name pos:start="21:63" pos:end="21:65">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="23:13" pos:end="25:27"><if pos:start="23:13" pos:end="25:27">if <condition pos:start="23:16" pos:end="23:24">(<expr pos:start="23:17" pos:end="23:23"><name pos:start="23:17" pos:end="23:19">ret</name> <operator pos:start="23:21" pos:end="23:21">&lt;</operator> <literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr>)</condition><block type="pseudo" pos:start="25:17" pos:end="25:27"><block_content pos:start="25:17" pos:end="25:27">

                <return pos:start="25:17" pos:end="25:27">return <expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:24"><expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:17">start</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:23">buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:28"><expr pos:start="29:13" pos:end="29:27"><name pos:start="29:13" pos:end="29:15">end</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:21">buf</name> <operator pos:start="29:23" pos:end="29:23">+</operator> <name pos:start="29:25" pos:end="29:27">len</name></expr>;</expr_stmt>



            <comment type="block" pos:start="33:13" pos:end="33:38">/* look for sps and pps */</comment>

            <while pos:start="35:13" pos:end="61:13">while <condition pos:start="35:19" pos:end="35:29">(<expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:22">buf</name> <operator pos:start="35:24" pos:end="35:24">&lt;</operator> <name pos:start="35:26" pos:end="35:28">end</name></expr>)</condition> <block pos:start="35:31" pos:end="61:13">{<block_content pos:start="37:17" pos:end="59:32">

                <decl_stmt pos:start="37:17" pos:end="37:34"><decl pos:start="37:17" pos:end="37:33"><type pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:24">unsigned</name> <name pos:start="37:26" pos:end="37:28">int</name></type> <name pos:start="37:30" pos:end="37:33">size</name></decl>;</decl_stmt>

                <decl_stmt pos:start="39:17" pos:end="39:33"><decl pos:start="39:17" pos:end="39:32"><type pos:start="39:17" pos:end="39:23"><name pos:start="39:17" pos:end="39:23">uint8_t</name></type> <name pos:start="39:25" pos:end="39:32">nal_type</name></decl>;</decl_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:36"><expr pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:20">size</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <call pos:start="41:24" pos:end="41:35"><name pos:start="41:24" pos:end="41:30">AV_RB32</name><argument_list pos:start="41:31" pos:end="41:35">(<argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:41"><expr pos:start="43:17" pos:end="43:40"><name pos:start="43:17" pos:end="43:24">nal_type</name> <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:33"><name pos:start="43:28" pos:end="43:30">buf</name><index pos:start="43:31" pos:end="43:33">[<expr pos:start="43:32" pos:end="43:32"><literal type="number" pos:start="43:32" pos:end="43:32">4</literal></expr>]</index></name> <operator pos:start="43:35" pos:end="43:35">&amp;</operator> <literal type="number" pos:start="43:37" pos:end="43:40">0x1f</literal></expr>;</expr_stmt>

                <if_stmt pos:start="45:17" pos:end="57:17"><if pos:start="45:17" pos:end="51:17">if <condition pos:start="45:20" pos:end="45:34">(<expr pos:start="45:21" pos:end="45:33"><name pos:start="45:21" pos:end="45:28">nal_type</name> <operator pos:start="45:30" pos:end="45:31">==</operator> <literal type="number" pos:start="45:33" pos:end="45:33">7</literal></expr>)</condition> <block pos:start="45:36" pos:end="51:17">{<block_content pos:start="47:21" pos:end="49:36"> <comment type="block" pos:start="45:38" pos:end="45:46">/* SPS */</comment>

                    <expr_stmt pos:start="47:21" pos:end="47:34"><expr pos:start="47:21" pos:end="47:33"><name pos:start="47:21" pos:end="47:23">sps</name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:29">buf</name> <operator pos:start="47:31" pos:end="47:31">+</operator> <literal type="number" pos:start="47:33" pos:end="47:33">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:36"><expr pos:start="49:21" pos:end="49:35"><name pos:start="49:21" pos:end="49:28">sps_size</name> <operator pos:start="49:30" pos:end="49:30">=</operator> <name pos:start="49:32" pos:end="49:35">size</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="51:19" pos:end="57:17">else if <condition pos:start="51:27" pos:end="51:41">(<expr pos:start="51:28" pos:end="51:40"><name pos:start="51:28" pos:end="51:35">nal_type</name> <operator pos:start="51:37" pos:end="51:38">==</operator> <literal type="number" pos:start="51:40" pos:end="51:40">8</literal></expr>)</condition> <block pos:start="51:43" pos:end="57:17">{<block_content pos:start="53:21" pos:end="55:36"> <comment type="block" pos:start="51:45" pos:end="51:53">/* PPS */</comment>

                    <expr_stmt pos:start="53:21" pos:end="53:34"><expr pos:start="53:21" pos:end="53:33"><name pos:start="53:21" pos:end="53:23">pps</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:29">buf</name> <operator pos:start="53:31" pos:end="53:31">+</operator> <literal type="number" pos:start="53:33" pos:end="53:33">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="55:21" pos:end="55:36"><expr pos:start="55:21" pos:end="55:35"><name pos:start="55:21" pos:end="55:28">pps_size</name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:35">size</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:32"><expr pos:start="59:17" pos:end="59:31"><name pos:start="59:17" pos:end="59:19">buf</name> <operator pos:start="59:21" pos:end="59:22">+=</operator> <name pos:start="59:24" pos:end="59:27">size</name> <operator pos:start="59:29" pos:end="59:29">+</operator> <literal type="number" pos:start="59:31" pos:end="59:31">4</literal></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="63:13" pos:end="63:24"><expr pos:start="63:13" pos:end="63:23"><call pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:18">assert</name><argument_list pos:start="63:19" pos:end="63:23">(<argument pos:start="63:20" pos:end="63:22"><expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:24"><expr pos:start="65:13" pos:end="65:23"><call pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:18">assert</name><argument_list pos:start="65:19" pos:end="65:23">(<argument pos:start="65:20" pos:end="65:22"><expr pos:start="65:20" pos:end="65:22"><name pos:start="65:20" pos:end="65:22">pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><call pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:19">avio_w8</name><argument_list pos:start="69:20" pos:end="69:26">(<argument pos:start="69:21" pos:end="69:22"><expr pos:start="69:21" pos:end="69:22"><name pos:start="69:21" pos:end="69:22">pb</name></expr></argument>, <argument pos:start="69:25" pos:end="69:25"><expr pos:start="69:25" pos:end="69:25"><literal type="number" pos:start="69:25" pos:end="69:25">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="69:29" pos:end="69:41">/* version */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:32"><expr pos:start="71:13" pos:end="71:31"><call pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:19">avio_w8</name><argument_list pos:start="71:20" pos:end="71:31">(<argument pos:start="71:21" pos:end="71:22"><expr pos:start="71:21" pos:end="71:22"><name pos:start="71:21" pos:end="71:22">pb</name></expr></argument>, <argument pos:start="71:25" pos:end="71:30"><expr pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:27">sps</name><index pos:start="71:28" pos:end="71:30">[<expr pos:start="71:29" pos:end="71:29"><literal type="number" pos:start="71:29" pos:end="71:29">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="71:34" pos:end="71:46">/* profile */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:32"><expr pos:start="73:13" pos:end="73:31"><call pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:19">avio_w8</name><argument_list pos:start="73:20" pos:end="73:31">(<argument pos:start="73:21" pos:end="73:22"><expr pos:start="73:21" pos:end="73:22"><name pos:start="73:21" pos:end="73:22">pb</name></expr></argument>, <argument pos:start="73:25" pos:end="73:30"><expr pos:start="73:25" pos:end="73:30"><name pos:start="73:25" pos:end="73:30"><name pos:start="73:25" pos:end="73:27">sps</name><index pos:start="73:28" pos:end="73:30">[<expr pos:start="73:29" pos:end="73:29"><literal type="number" pos:start="73:29" pos:end="73:29">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="73:34" pos:end="73:53">/* profile compat */</comment>

            <expr_stmt pos:start="75:13" pos:end="75:32"><expr pos:start="75:13" pos:end="75:31"><call pos:start="75:13" pos:end="75:31"><name pos:start="75:13" pos:end="75:19">avio_w8</name><argument_list pos:start="75:20" pos:end="75:31">(<argument pos:start="75:21" pos:end="75:22"><expr pos:start="75:21" pos:end="75:22"><name pos:start="75:21" pos:end="75:22">pb</name></expr></argument>, <argument pos:start="75:25" pos:end="75:30"><expr pos:start="75:25" pos:end="75:30"><name pos:start="75:25" pos:end="75:30"><name pos:start="75:25" pos:end="75:27">sps</name><index pos:start="75:28" pos:end="75:30">[<expr pos:start="75:29" pos:end="75:29"><literal type="number" pos:start="75:29" pos:end="75:29">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="75:34" pos:end="75:44">/* level */</comment>

            <expr_stmt pos:start="77:13" pos:end="77:30"><expr pos:start="77:13" pos:end="77:29"><call pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:19">avio_w8</name><argument_list pos:start="77:20" pos:end="77:29">(<argument pos:start="77:21" pos:end="77:22"><expr pos:start="77:21" pos:end="77:22"><name pos:start="77:21" pos:end="77:22">pb</name></expr></argument>, <argument pos:start="77:25" pos:end="77:28"><expr pos:start="77:25" pos:end="77:28"><literal type="number" pos:start="77:25" pos:end="77:28">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="77:32" pos:end="77:95">/* 6 bits reserved (111111) + 2 bits nal size length - 1 (11) */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:30"><expr pos:start="79:13" pos:end="79:29"><call pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:19">avio_w8</name><argument_list pos:start="79:20" pos:end="79:29">(<argument pos:start="79:21" pos:end="79:22"><expr pos:start="79:21" pos:end="79:22"><name pos:start="79:21" pos:end="79:22">pb</name></expr></argument>, <argument pos:start="79:25" pos:end="79:28"><expr pos:start="79:25" pos:end="79:28"><literal type="number" pos:start="79:25" pos:end="79:28">0xe1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:32" pos:end="79:89">/* 3 bits reserved (111) + 5 bits number of sps (00001) */</comment>



            <expr_stmt pos:start="83:13" pos:end="83:36"><expr pos:start="83:13" pos:end="83:35"><call pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:21">avio_wb16</name><argument_list pos:start="83:22" pos:end="83:35">(<argument pos:start="83:23" pos:end="83:24"><expr pos:start="83:23" pos:end="83:24"><name pos:start="83:23" pos:end="83:24">pb</name></expr></argument>, <argument pos:start="83:27" pos:end="83:34"><expr pos:start="83:27" pos:end="83:34"><name pos:start="83:27" pos:end="83:34">sps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:42"><expr pos:start="85:13" pos:end="85:41"><call pos:start="85:13" pos:end="85:41"><name pos:start="85:13" pos:end="85:22">avio_write</name><argument_list pos:start="85:23" pos:end="85:41">(<argument pos:start="85:24" pos:end="85:25"><expr pos:start="85:24" pos:end="85:25"><name pos:start="85:24" pos:end="85:25">pb</name></expr></argument>, <argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">sps</name></expr></argument>, <argument pos:start="85:33" pos:end="85:40"><expr pos:start="85:33" pos:end="85:40"><name pos:start="85:33" pos:end="85:40">sps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:27"><expr pos:start="87:13" pos:end="87:26"><call pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:19">avio_w8</name><argument_list pos:start="87:20" pos:end="87:26">(<argument pos:start="87:21" pos:end="87:22"><expr pos:start="87:21" pos:end="87:22"><name pos:start="87:21" pos:end="87:22">pb</name></expr></argument>, <argument pos:start="87:25" pos:end="87:25"><expr pos:start="87:25" pos:end="87:25"><literal type="number" pos:start="87:25" pos:end="87:25">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:29" pos:end="87:47">/* number of pps */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:36"><expr pos:start="89:13" pos:end="89:35"><call pos:start="89:13" pos:end="89:35"><name pos:start="89:13" pos:end="89:21">avio_wb16</name><argument_list pos:start="89:22" pos:end="89:35">(<argument pos:start="89:23" pos:end="89:24"><expr pos:start="89:23" pos:end="89:24"><name pos:start="89:23" pos:end="89:24">pb</name></expr></argument>, <argument pos:start="89:27" pos:end="89:34"><expr pos:start="89:27" pos:end="89:34"><name pos:start="89:27" pos:end="89:34">pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:42"><expr pos:start="91:13" pos:end="91:41"><call pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:22">avio_write</name><argument_list pos:start="91:23" pos:end="91:41">(<argument pos:start="91:24" pos:end="91:25"><expr pos:start="91:24" pos:end="91:25"><name pos:start="91:24" pos:end="91:25">pb</name></expr></argument>, <argument pos:start="91:28" pos:end="91:30"><expr pos:start="91:28" pos:end="91:30"><name pos:start="91:28" pos:end="91:30">pps</name></expr></argument>, <argument pos:start="91:33" pos:end="91:40"><expr pos:start="91:33" pos:end="91:40"><name pos:start="91:33" pos:end="91:40">pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:27"><expr pos:start="93:13" pos:end="93:26"><call pos:start="93:13" pos:end="93:26"><name pos:start="93:13" pos:end="93:19">av_free</name><argument_list pos:start="93:20" pos:end="93:26">(<argument pos:start="93:21" pos:end="93:25"><expr pos:start="93:21" pos:end="93:25"><name pos:start="93:21" pos:end="93:25">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="95:11" pos:end="99:9">else <block pos:start="95:16" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:38">

            <expr_stmt pos:start="97:13" pos:end="97:38"><expr pos:start="97:13" pos:end="97:37"><call pos:start="97:13" pos:end="97:37"><name pos:start="97:13" pos:end="97:22">avio_write</name><argument_list pos:start="97:23" pos:end="97:37">(<argument pos:start="97:24" pos:end="97:25"><expr pos:start="97:24" pos:end="97:25"><name pos:start="97:24" pos:end="97:25">pb</name></expr></argument>, <argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">data</name></expr></argument>, <argument pos:start="97:34" pos:end="97:36"><expr pos:start="97:34" pos:end="97:36"><name pos:start="97:34" pos:end="97:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
