<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23236.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">stl_phys_notdirty</name><parameter_list pos:start="1:23" pos:end="1:61">(<parameter pos:start="1:24" pos:end="1:46"><decl pos:start="1:24" pos:end="1:46"><type pos:start="1:24" pos:end="1:46"><name pos:start="1:24" pos:end="1:41">target_phys_addr_t</name></type> <name pos:start="1:43" pos:end="1:46">addr</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:56">uint32_t</name></type> <name pos:start="1:58" pos:end="1:60">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">MemoryRegionSection</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:32">section</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:86"><expr pos:start="11:5" pos:end="11:85"><name pos:start="11:5" pos:end="11:11">section</name> <operator pos:start="11:13" pos:end="11:13">=</operator> <call pos:start="11:15" pos:end="11:85"><name pos:start="11:15" pos:end="11:28">phys_page_find</name><argument_list pos:start="11:29" pos:end="11:85">(<argument pos:start="11:30" pos:end="11:58"><expr pos:start="11:30" pos:end="11:58"><name pos:start="11:30" pos:end="11:58"><name pos:start="11:30" pos:end="11:49">address_space_memory</name><operator pos:start="11:50" pos:end="11:50">.</operator><name pos:start="11:51" pos:end="11:58">dispatch</name></name></expr></argument>, <argument pos:start="11:61" pos:end="11:84"><expr pos:start="11:61" pos:end="11:84"><name pos:start="11:61" pos:end="11:64">addr</name> <operator pos:start="11:66" pos:end="11:67">&gt;&gt;</operator> <name pos:start="11:69" pos:end="11:84">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="59:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="15:64">(<expr pos:start="15:9" pos:end="15:63"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:42"><name pos:start="15:10" pos:end="15:29">memory_region_is_ram</name><argument_list pos:start="15:30" pos:end="15:42">(<argument pos:start="15:31" pos:end="15:41"><expr pos:start="15:31" pos:end="15:41"><name pos:start="15:31" pos:end="15:41"><name pos:start="15:31" pos:end="15:37">section</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:41">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="15:44" pos:end="15:45">||</operator> <name pos:start="15:47" pos:end="15:63"><name pos:start="15:47" pos:end="15:53">section</name><operator pos:start="15:54" pos:end="15:55">-&gt;</operator><name pos:start="15:56" pos:end="15:63">readonly</name></name></expr>)</condition> <block pos:start="15:66" pos:end="27:5">{<block_content pos:start="17:9" pos:end="25:48">

        <expr_stmt pos:start="17:9" pos:end="17:57"><expr pos:start="17:9" pos:end="17:56"><name pos:start="17:9" pos:end="17:12">addr</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:56"><name pos:start="17:16" pos:end="17:41">memory_region_section_addr</name><argument_list pos:start="17:42" pos:end="17:56">(<argument pos:start="17:43" pos:end="17:49"><expr pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:49">section</name></expr></argument>, <argument pos:start="17:52" pos:end="17:55"><expr pos:start="17:52" pos:end="17:55"><name pos:start="17:52" pos:end="17:55">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:46">(<expr pos:start="19:13" pos:end="19:45"><call pos:start="19:13" pos:end="19:45"><name pos:start="19:13" pos:end="19:32">memory_region_is_ram</name><argument_list pos:start="19:33" pos:end="19:45">(<argument pos:start="19:34" pos:end="19:44"><expr pos:start="19:34" pos:end="19:44"><name pos:start="19:34" pos:end="19:44"><name pos:start="19:34" pos:end="19:40">section</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:44">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:48" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:55">

            <expr_stmt pos:start="21:13" pos:end="21:55"><expr pos:start="21:13" pos:end="21:54"><name pos:start="21:13" pos:end="21:19">section</name> <operator pos:start="21:21" pos:end="21:21">=</operator> <operator pos:start="21:23" pos:end="21:23">&amp;</operator><name pos:start="21:24" pos:end="21:54"><name pos:start="21:24" pos:end="21:36">phys_sections</name><index pos:start="21:37" pos:end="21:54">[<expr pos:start="21:38" pos:end="21:53"><name pos:start="21:38" pos:end="21:53">phys_section_rom</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:48"><expr pos:start="25:9" pos:end="25:47"><call pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:20">io_mem_write</name><argument_list pos:start="25:21" pos:end="25:47">(<argument pos:start="25:22" pos:end="25:32"><expr pos:start="25:22" pos:end="25:32"><name pos:start="25:22" pos:end="25:32"><name pos:start="25:22" pos:end="25:28">section</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:32">mr</name></name></expr></argument>, <argument pos:start="25:35" pos:end="25:38"><expr pos:start="25:35" pos:end="25:38"><name pos:start="25:35" pos:end="25:38">addr</name></expr></argument>, <argument pos:start="25:41" pos:end="25:43"><expr pos:start="25:41" pos:end="25:43"><name pos:start="25:41" pos:end="25:43">val</name></expr></argument>, <argument pos:start="25:46" pos:end="25:46"><expr pos:start="25:46" pos:end="25:46"><literal type="number" pos:start="25:46" pos:end="25:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="59:5">else <block pos:start="27:12" pos:end="59:5">{<block_content pos:start="29:9" pos:end="57:9">

        <decl_stmt pos:start="29:9" pos:end="33:56"><decl pos:start="29:9" pos:end="33:55"><type pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">unsigned</name> <name pos:start="29:18" pos:end="29:21">long</name></type> <name pos:start="29:23" pos:end="29:27">addr1</name> <init pos:start="29:29" pos:end="33:55">= <expr pos:start="29:31" pos:end="33:55"><operator pos:start="29:31" pos:end="29:31">(</operator><call pos:start="29:32" pos:end="29:70"><name pos:start="29:32" pos:end="29:57">memory_region_get_ram_addr</name><argument_list pos:start="29:58" pos:end="29:70">(<argument pos:start="29:59" pos:end="29:69"><expr pos:start="29:59" pos:end="29:69"><name pos:start="29:59" pos:end="29:69"><name pos:start="29:59" pos:end="29:65">section</name><operator pos:start="29:66" pos:end="29:67">-&gt;</operator><name pos:start="29:68" pos:end="29:69">mr</name></name></expr></argument>)</argument_list></call>

                               <operator pos:start="31:32" pos:end="31:32">&amp;</operator> <name pos:start="31:34" pos:end="31:49">TARGET_PAGE_MASK</name><operator pos:start="31:50" pos:end="31:50">)</operator>

            <operator pos:start="33:13" pos:end="33:13">+</operator> <call pos:start="33:15" pos:end="33:55"><name pos:start="33:15" pos:end="33:40">memory_region_section_addr</name><argument_list pos:start="33:41" pos:end="33:55">(<argument pos:start="33:42" pos:end="33:48"><expr pos:start="33:42" pos:end="33:48"><name pos:start="33:42" pos:end="33:48">section</name></expr></argument>, <argument pos:start="33:51" pos:end="33:54"><expr pos:start="33:51" pos:end="33:54"><name pos:start="33:51" pos:end="33:54">addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:11">ptr</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:37"><name pos:start="35:15" pos:end="35:30">qemu_get_ram_ptr</name><argument_list pos:start="35:31" pos:end="35:37">(<argument pos:start="35:32" pos:end="35:36"><expr pos:start="35:32" pos:end="35:36"><name pos:start="35:32" pos:end="35:36">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><call pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:13">stl_p</name><argument_list pos:start="37:14" pos:end="37:23">(<argument pos:start="37:15" pos:end="37:17"><expr pos:start="37:15" pos:end="37:17"><name pos:start="37:15" pos:end="37:17">ptr</name></expr></argument>, <argument pos:start="37:20" pos:end="37:22"><expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="41:9" pos:end="57:9"><if pos:start="41:9" pos:end="57:9">if <condition pos:start="41:12" pos:end="41:35">(<expr pos:start="41:13" pos:end="41:34"><call pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:20">unlikely</name><argument_list pos:start="41:21" pos:end="41:34">(<argument pos:start="41:22" pos:end="41:33"><expr pos:start="41:22" pos:end="41:33"><name pos:start="41:22" pos:end="41:33">in_migration</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:37" pos:end="57:9">{<block_content pos:start="43:13" pos:end="55:13">

            <if_stmt pos:start="43:13" pos:end="55:13"><if pos:start="43:13" pos:end="55:13">if <condition pos:start="43:16" pos:end="43:53">(<expr pos:start="43:17" pos:end="43:52"><operator pos:start="43:17" pos:end="43:17">!</operator><call pos:start="43:18" pos:end="43:52"><name pos:start="43:18" pos:end="43:45">cpu_physical_memory_is_dirty</name><argument_list pos:start="43:46" pos:end="43:52">(<argument pos:start="43:47" pos:end="43:51"><expr pos:start="43:47" pos:end="43:51"><name pos:start="43:47" pos:end="43:51">addr1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:55" pos:end="55:13">{<block_content pos:start="47:17" pos:end="53:54">

                <comment type="block" pos:start="45:17" pos:end="45:37">/* invalidate code */</comment>

                <expr_stmt pos:start="47:17" pos:end="47:67"><expr pos:start="47:17" pos:end="47:66"><call pos:start="47:17" pos:end="47:66"><name pos:start="47:17" pos:end="47:45">tb_invalidate_phys_page_range</name><argument_list pos:start="47:46" pos:end="47:66">(<argument pos:start="47:47" pos:end="47:51"><expr pos:start="47:47" pos:end="47:51"><name pos:start="47:47" pos:end="47:51">addr1</name></expr></argument>, <argument pos:start="47:54" pos:end="47:62"><expr pos:start="47:54" pos:end="47:62"><name pos:start="47:54" pos:end="47:58">addr1</name> <operator pos:start="47:60" pos:end="47:60">+</operator> <literal type="number" pos:start="47:62" pos:end="47:62">4</literal></expr></argument>, <argument pos:start="47:65" pos:end="47:65"><expr pos:start="47:65" pos:end="47:65"><literal type="number" pos:start="47:65" pos:end="47:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="49:17" pos:end="49:35">/* set dirty bit */</comment>

                <expr_stmt pos:start="51:17" pos:end="53:54"><expr pos:start="51:17" pos:end="53:53"><call pos:start="51:17" pos:end="53:53"><name pos:start="51:17" pos:end="51:51">cpu_physical_memory_set_dirty_flags</name><argument_list pos:start="51:52" pos:end="53:53">(

                    <argument pos:start="53:21" pos:end="53:25"><expr pos:start="53:21" pos:end="53:25"><name pos:start="53:21" pos:end="53:25">addr1</name></expr></argument>, <argument pos:start="53:28" pos:end="53:52"><expr pos:start="53:28" pos:end="53:52"><operator pos:start="53:28" pos:end="53:28">(</operator><literal type="number" pos:start="53:29" pos:end="53:32">0xff</literal> <operator pos:start="53:34" pos:end="53:34">&amp;</operator> <operator pos:start="53:36" pos:end="53:36">~</operator><name pos:start="53:37" pos:end="53:51">CODE_DIRTY_FLAG</name><operator pos:start="53:52" pos:end="53:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
