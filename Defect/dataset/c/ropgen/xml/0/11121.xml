<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11121.c" pos:tabs="8"><function pos:start="1:1" pos:end="431:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_chunks</name><parameter_list pos:start="1:25" pos:end="5:62">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:36">AVFrame</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:45">picture</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:61"><decl pos:start="3:48" pos:end="3:61"><type pos:start="3:48" pos:end="3:61"><name pos:start="3:48" pos:end="3:50">int</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:61">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:47"><decl pos:start="5:30" pos:end="5:47"><type pos:start="5:30" pos:end="5:47"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:42">uint8_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:47">buf</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:61"><decl pos:start="5:50" pos:end="5:61"><type pos:start="5:50" pos:end="5:61"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:61">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="431:1">{<block_content pos:start="9:5" pos:end="429:5">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">Mpeg1Context</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:38">= <expr pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:27">avctx</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:22">s2</name> <init pos:start="11:24" pos:end="11:41">= <expr pos:start="11:26" pos:end="11:41"><operator pos:start="11:26" pos:end="11:26">&amp;</operator><name pos:start="11:27" pos:end="11:41"><name pos:start="11:27" pos:end="11:27">s</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:41">mpeg_enc_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">buf_ptr</name> <init pos:start="13:28" pos:end="13:32">= <expr pos:start="13:30" pos:end="13:32"><name pos:start="13:30" pos:end="13:32">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:43"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">buf_end</name> <init pos:start="15:28" pos:end="15:43">= <expr pos:start="15:30" pos:end="15:43"><name pos:start="15:30" pos:end="15:32">buf</name> <operator pos:start="15:34" pos:end="15:34">+</operator> <name pos:start="15:36" pos:end="15:43">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>, <decl pos:start="17:14" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:23">input_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">last_code</name><init pos:start="19:18" pos:end="19:20">= <expr pos:start="19:20" pos:end="19:20"><literal type="number" pos:start="19:20" pos:end="19:20">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="23:5" pos:end="429:5">for<control pos:start="23:8" pos:end="23:11">(<init pos:start="23:9" pos:end="23:9">;</init><condition pos:start="23:10" pos:end="23:10">;</condition><incr/>)</control> <block pos:start="23:13" pos:end="429:5">{<block_content pos:start="27:9" pos:end="427:9">

        <comment type="block" pos:start="25:9" pos:end="25:34">/* find next start code */</comment>

        <decl_stmt pos:start="27:9" pos:end="27:33"><decl pos:start="27:9" pos:end="27:32"><type pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16">uint32_t</name></type> <name pos:start="27:18" pos:end="27:27">start_code</name> <init pos:start="27:29" pos:end="27:32">= <expr pos:start="27:31" pos:end="27:32"><operator pos:start="27:31" pos:end="27:31">-</operator><literal type="number" pos:start="27:32" pos:end="27:32">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:67"><expr pos:start="29:9" pos:end="29:66"><name pos:start="29:9" pos:end="29:15">buf_ptr</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:66"><name pos:start="29:19" pos:end="29:36">ff_find_start_code</name><argument_list pos:start="29:37" pos:end="29:66">(<argument pos:start="29:38" pos:end="29:44"><expr pos:start="29:38" pos:end="29:44"><name pos:start="29:38" pos:end="29:44">buf_ptr</name></expr></argument>,<argument pos:start="29:46" pos:end="29:52"><expr pos:start="29:46" pos:end="29:52"><name pos:start="29:46" pos:end="29:52">buf_end</name></expr></argument>, <argument pos:start="29:55" pos:end="29:65"><expr pos:start="29:55" pos:end="29:65"><operator pos:start="29:55" pos:end="29:55">&amp;</operator><name pos:start="29:56" pos:end="29:65">start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="71:9"><if pos:start="31:9" pos:end="71:9">if <condition pos:start="31:12" pos:end="31:31">(<expr pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:22">start_code</name> <operator pos:start="31:24" pos:end="31:24">&gt;</operator> <literal type="number" pos:start="31:26" pos:end="31:30">0x1ff</literal></expr>)</condition><block pos:start="31:32" pos:end="71:9">{<block_content pos:start="33:13" pos:end="69:74">

            <if_stmt pos:start="33:13" pos:end="65:13"><if pos:start="33:13" pos:end="65:13">if<condition pos:start="33:15" pos:end="33:92">(<expr pos:start="33:16" pos:end="33:91"><name pos:start="33:16" pos:end="33:28"><name pos:start="33:16" pos:end="33:17">s2</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:28">pict_type</name></name> <operator pos:start="33:30" pos:end="33:31">!=</operator> <name pos:start="33:33" pos:end="33:49">AV_PICTURE_TYPE_B</name> <operator pos:start="33:51" pos:end="33:52">||</operator> <name pos:start="33:54" pos:end="33:70"><name pos:start="33:54" pos:end="33:58">avctx</name><operator pos:start="33:59" pos:end="33:60">-&gt;</operator><name pos:start="33:61" pos:end="33:70">skip_frame</name></name> <operator pos:start="33:72" pos:end="33:73">&lt;=</operator> <name pos:start="33:75" pos:end="33:91">AVDISCARD_DEFAULT</name></expr>)</condition><block pos:start="33:93" pos:end="65:13">{<block_content pos:start="35:17" pos:end="63:17">

                <if_stmt pos:start="35:17" pos:end="47:17"><if pos:start="35:17" pos:end="47:17">if<condition pos:start="35:19" pos:end="35:43">(<expr pos:start="35:20" pos:end="35:42"><name pos:start="35:20" pos:end="35:38"><name pos:start="35:20" pos:end="35:24">avctx</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:38">thread_count</name></name> <operator pos:start="35:40" pos:end="35:40">&gt;</operator> <literal type="number" pos:start="35:42" pos:end="35:42">1</literal></expr>)</condition><block pos:start="35:44" pos:end="47:17">{<block_content pos:start="37:21" pos:end="45:78">

                    <decl_stmt pos:start="37:21" pos:end="37:26"><decl pos:start="37:21" pos:end="37:25"><type pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">int</name></type> <name pos:start="37:25" pos:end="37:25">i</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="41:21" pos:end="41:125"><expr pos:start="41:21" pos:end="41:124"><call pos:start="41:21" pos:end="41:124"><name pos:start="41:21" pos:end="41:34"><name pos:start="41:21" pos:end="41:25">avctx</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:34">execute</name></name><argument_list pos:start="41:35" pos:end="41:124">(<argument pos:start="41:36" pos:end="41:40"><expr pos:start="41:36" pos:end="41:40"><name pos:start="41:36" pos:end="41:40">avctx</name></expr></argument>, <argument pos:start="41:43" pos:end="41:61"><expr pos:start="41:43" pos:end="41:61"><name pos:start="41:43" pos:end="41:61">slice_decode_thread</name></expr></argument>,  <argument pos:start="41:65" pos:end="41:86"><expr pos:start="41:65" pos:end="41:86"><operator pos:start="41:65" pos:end="41:65">&amp;</operator><name pos:start="41:66" pos:end="41:86"><name pos:start="41:66" pos:end="41:67">s2</name><operator pos:start="41:68" pos:end="41:69">-&gt;</operator><name pos:start="41:70" pos:end="41:83">thread_context</name><index pos:start="41:84" pos:end="41:86">[<expr pos:start="41:85" pos:end="41:85"><literal type="number" pos:start="41:85" pos:end="41:85">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="41:89" pos:end="41:92"><expr pos:start="41:89" pos:end="41:92"><name pos:start="41:89" pos:end="41:92">NULL</name></expr></argument>, <argument pos:start="41:95" pos:end="41:108"><expr pos:start="41:95" pos:end="41:108"><name pos:start="41:95" pos:end="41:108"><name pos:start="41:95" pos:end="41:95">s</name><operator pos:start="41:96" pos:end="41:97">-&gt;</operator><name pos:start="41:98" pos:end="41:108">slice_count</name></name></expr></argument>, <argument pos:start="41:111" pos:end="41:123"><expr pos:start="41:111" pos:end="41:123"><sizeof pos:start="41:111" pos:end="41:123">sizeof<argument_list pos:start="41:117" pos:end="41:123">(<argument pos:start="41:118" pos:end="41:122"><expr pos:start="41:118" pos:end="41:122"><name pos:start="41:118" pos:end="41:121">void</name><operator pos:start="41:122" pos:end="41:122">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="43:21" pos:end="45:78">for<control pos:start="43:24" pos:end="43:51">(<init pos:start="43:25" pos:end="43:28"><expr pos:start="43:25" pos:end="43:27"><name pos:start="43:25" pos:end="43:25">i</name><operator pos:start="43:26" pos:end="43:26">=</operator><literal type="number" pos:start="43:27" pos:end="43:27">0</literal></expr>;</init> <condition pos:start="43:30" pos:end="43:46"><expr pos:start="43:30" pos:end="43:45"><name pos:start="43:30" pos:end="43:30">i</name><operator pos:start="43:31" pos:end="43:31">&lt;</operator><name pos:start="43:32" pos:end="43:45"><name pos:start="43:32" pos:end="43:32">s</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:45">slice_count</name></name></expr>;</condition> <incr pos:start="43:48" pos:end="43:50"><expr pos:start="43:48" pos:end="43:50"><name pos:start="43:48" pos:end="43:48">i</name><operator pos:start="43:49" pos:end="43:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="45:25" pos:end="45:78"><block_content pos:start="45:25" pos:end="45:78">

                        <expr_stmt pos:start="45:25" pos:end="45:78"><expr pos:start="45:25" pos:end="45:77"><name pos:start="45:25" pos:end="45:39"><name pos:start="45:25" pos:end="45:26">s2</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:39">error_count</name></name> <operator pos:start="45:41" pos:end="45:42">+=</operator> <name pos:start="45:44" pos:end="45:64"><name pos:start="45:44" pos:end="45:45">s2</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:61">thread_context</name><index pos:start="45:62" pos:end="45:64">[<expr pos:start="45:63" pos:end="45:63"><name pos:start="45:63" pos:end="45:63">i</name></expr>]</index></name><operator pos:start="45:65" pos:end="45:66">-&gt;</operator><name pos:start="45:67" pos:end="45:77">error_count</name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="51:17" pos:end="53:86"><if pos:start="51:17" pos:end="53:86">if <condition pos:start="51:20" pos:end="51:100">(<expr pos:start="51:21" pos:end="51:99"><name pos:start="51:21" pos:end="51:45">CONFIG_MPEG_VDPAU_DECODER</name> <operator pos:start="51:47" pos:end="51:48">&amp;&amp;</operator> <name pos:start="51:50" pos:end="51:75"><name pos:start="51:50" pos:end="51:54">avctx</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:61">codec</name><operator pos:start="51:62" pos:end="51:63">-&gt;</operator><name pos:start="51:64" pos:end="51:75">capabilities</name></name><operator pos:start="51:76" pos:end="51:76">&amp;</operator><name pos:start="51:77" pos:end="51:99">CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:86"><block_content pos:start="53:21" pos:end="53:86">

                    <expr_stmt pos:start="53:21" pos:end="53:86"><expr pos:start="53:21" pos:end="53:85"><call pos:start="53:21" pos:end="53:85"><name pos:start="53:21" pos:end="53:50">ff_vdpau_mpeg_picture_complete</name><argument_list pos:start="53:51" pos:end="53:85">(<argument pos:start="53:52" pos:end="53:53"><expr pos:start="53:52" pos:end="53:53"><name pos:start="53:52" pos:end="53:53">s2</name></expr></argument>, <argument pos:start="53:56" pos:end="53:58"><expr pos:start="53:56" pos:end="53:58"><name pos:start="53:56" pos:end="53:58">buf</name></expr></argument>, <argument pos:start="53:61" pos:end="53:68"><expr pos:start="53:61" pos:end="53:68"><name pos:start="53:61" pos:end="53:68">buf_size</name></expr></argument>, <argument pos:start="53:71" pos:end="53:84"><expr pos:start="53:71" pos:end="53:84"><name pos:start="53:71" pos:end="53:84"><name pos:start="53:71" pos:end="53:71">s</name><operator pos:start="53:72" pos:end="53:73">-&gt;</operator><name pos:start="53:74" pos:end="53:84">slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="57:17" pos:end="63:17"><if pos:start="57:17" pos:end="63:17">if <condition pos:start="57:20" pos:end="57:46">(<expr pos:start="57:21" pos:end="57:45"><call pos:start="57:21" pos:end="57:45"><name pos:start="57:21" pos:end="57:29">slice_end</name><argument_list pos:start="57:30" pos:end="57:45">(<argument pos:start="57:31" pos:end="57:35"><expr pos:start="57:31" pos:end="57:35"><name pos:start="57:31" pos:end="57:35">avctx</name></expr></argument>, <argument pos:start="57:38" pos:end="57:44"><expr pos:start="57:38" pos:end="57:44"><name pos:start="57:38" pos:end="57:44">picture</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:48" pos:end="63:17">{<block_content pos:start="59:21" pos:end="61:55">

                    <if_stmt pos:start="59:21" pos:end="61:55"><if pos:start="59:21" pos:end="61:55">if<condition pos:start="59:23" pos:end="59:61">(<expr pos:start="59:24" pos:end="59:60"><name pos:start="59:24" pos:end="59:43"><name pos:start="59:24" pos:end="59:25">s2</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:43">last_picture_ptr</name></name> <operator pos:start="59:45" pos:end="59:46">||</operator> <name pos:start="59:48" pos:end="59:60"><name pos:start="59:48" pos:end="59:49">s2</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:60">low_delay</name></name></expr>)</condition><block type="pseudo" pos:start="61:25" pos:end="61:55"><block_content pos:start="61:25" pos:end="61:55"> <comment type="line" pos:start="59:63" pos:end="59:111">//FIXME merge with the stuff in mpeg_decode_slice</comment>

                        <expr_stmt pos:start="61:25" pos:end="61:55"><expr pos:start="61:25" pos:end="61:54"><operator pos:start="61:25" pos:end="61:25">*</operator><name pos:start="61:26" pos:end="61:34">data_size</name> <operator pos:start="61:36" pos:end="61:36">=</operator> <sizeof pos:start="61:38" pos:end="61:54">sizeof<argument_list pos:start="61:44" pos:end="61:54">(<argument pos:start="61:45" pos:end="61:53"><expr pos:start="61:45" pos:end="61:53"><name pos:start="61:45" pos:end="61:53">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:29"><expr pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:14">s2</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:25">pict_type</name></name><operator pos:start="67:26" pos:end="67:26">=</operator> <literal type="number" pos:start="67:28" pos:end="67:28">0</literal></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:74">return <expr pos:start="69:20" pos:end="69:73"><call pos:start="69:20" pos:end="69:73"><name pos:start="69:20" pos:end="69:24">FFMAX</name><argument_list pos:start="69:25" pos:end="69:73">(<argument pos:start="69:26" pos:end="69:26"><expr pos:start="69:26" pos:end="69:26"><literal type="number" pos:start="69:26" pos:end="69:26">0</literal></expr></argument>, <argument pos:start="69:29" pos:end="69:72"><expr pos:start="69:29" pos:end="69:72"><name pos:start="69:29" pos:end="69:35">buf_ptr</name> <operator pos:start="69:37" pos:end="69:37">-</operator> <name pos:start="69:39" pos:end="69:41">buf</name> <operator pos:start="69:43" pos:end="69:43">-</operator> <name pos:start="69:45" pos:end="69:72"><name pos:start="69:45" pos:end="69:46">s2</name><operator pos:start="69:47" pos:end="69:48">-&gt;</operator><name pos:start="69:49" pos:end="69:61">parse_context</name><operator pos:start="69:62" pos:end="69:62">.</operator><name pos:start="69:63" pos:end="69:72">last_index</name></name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:18">input_size</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:28">buf_end</name> <operator pos:start="75:30" pos:end="75:30">-</operator> <name pos:start="75:32" pos:end="75:38">buf_ptr</name></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if<condition pos:start="79:11" pos:end="79:45">(<expr pos:start="79:12" pos:end="79:44"><name pos:start="79:12" pos:end="79:23"><name pos:start="79:12" pos:end="79:16">avctx</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:23">debug</name></name> <operator pos:start="79:25" pos:end="79:25">&amp;</operator> <name pos:start="79:27" pos:end="79:44">FF_DEBUG_STARTCODE</name></expr>)</condition><block pos:start="79:46" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:101">

            <expr_stmt pos:start="81:13" pos:end="81:101"><expr pos:start="81:13" pos:end="81:100"><call pos:start="81:13" pos:end="81:100"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="81:100">(<argument pos:start="81:20" pos:end="81:24"><expr pos:start="81:20" pos:end="81:24"><name pos:start="81:20" pos:end="81:24">avctx</name></expr></argument>, <argument pos:start="81:27" pos:end="81:38"><expr pos:start="81:27" pos:end="81:38"><name pos:start="81:27" pos:end="81:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="81:41" pos:end="81:62"><expr pos:start="81:41" pos:end="81:62"><literal type="string" pos:start="81:41" pos:end="81:62">"%3X at %td left %d\n"</literal></expr></argument>, <argument pos:start="81:65" pos:end="81:74"><expr pos:start="81:65" pos:end="81:74"><name pos:start="81:65" pos:end="81:74">start_code</name></expr></argument>, <argument pos:start="81:77" pos:end="81:87"><expr pos:start="81:77" pos:end="81:87"><name pos:start="81:77" pos:end="81:83">buf_ptr</name><operator pos:start="81:84" pos:end="81:84">-</operator><name pos:start="81:85" pos:end="81:87">buf</name></expr></argument>, <argument pos:start="81:90" pos:end="81:99"><expr pos:start="81:90" pos:end="81:99"><name pos:start="81:90" pos:end="81:99">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="87:9" pos:end="87:46">/* prepare data for next start code */</comment>

        <switch pos:start="89:9" pos:end="427:9">switch<condition pos:start="89:15" pos:end="89:26">(<expr pos:start="89:16" pos:end="89:25"><name pos:start="89:16" pos:end="89:25">start_code</name></expr>)</condition> <block pos:start="89:28" pos:end="427:9">{<block_content pos:start="91:9" pos:end="425:18">

        <case pos:start="91:9" pos:end="91:28">case <expr pos:start="91:14" pos:end="91:27"><name pos:start="91:14" pos:end="91:27">SEQ_START_CODE</name></expr>:</case>

            <if_stmt pos:start="93:13" pos:end="105:13"><if pos:start="93:13" pos:end="101:13">if<condition pos:start="93:15" pos:end="93:30">(<expr pos:start="93:16" pos:end="93:29"><name pos:start="93:16" pos:end="93:24">last_code</name> <operator pos:start="93:26" pos:end="93:27">==</operator> <literal type="number" pos:start="93:29" pos:end="93:29">0</literal></expr>)</condition><block pos:start="93:31" pos:end="101:13">{<block_content pos:start="95:13" pos:end="99:26">

            <expr_stmt pos:start="95:13" pos:end="97:48"><expr pos:start="95:13" pos:end="97:47"><call pos:start="95:13" pos:end="97:47"><name pos:start="95:13" pos:end="95:33">mpeg1_decode_sequence</name><argument_list pos:start="95:34" pos:end="97:47">(<argument pos:start="95:35" pos:end="95:39"><expr pos:start="95:35" pos:end="95:39"><name pos:start="95:35" pos:end="95:39">avctx</name></expr></argument>, <argument pos:start="95:42" pos:end="95:48"><expr pos:start="95:42" pos:end="95:48"><name pos:start="95:42" pos:end="95:48">buf_ptr</name></expr></argument>,

                                    <argument pos:start="97:37" pos:end="97:46"><expr pos:start="97:37" pos:end="97:46"><name pos:start="97:37" pos:end="97:46">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:26"><expr pos:start="99:17" pos:end="99:25"><name pos:start="99:17" pos:end="99:23"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:23">sync</name></name><operator pos:start="99:24" pos:end="99:24">=</operator><literal type="number" pos:start="99:25" pos:end="99:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="101:14" pos:end="105:13">else<block pos:start="101:18" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:93">

                <expr_stmt pos:start="103:17" pos:end="103:93"><expr pos:start="103:17" pos:end="103:92"><call pos:start="103:17" pos:end="103:92"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="103:92">(<argument pos:start="103:24" pos:end="103:28"><expr pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:28">avctx</name></expr></argument>, <argument pos:start="103:31" pos:end="103:42"><expr pos:start="103:31" pos:end="103:42"><name pos:start="103:31" pos:end="103:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:45" pos:end="103:80"><expr pos:start="103:45" pos:end="103:80"><literal type="string" pos:start="103:45" pos:end="103:80">"ignoring SEQ_START_CODE after %X\n"</literal></expr></argument>, <argument pos:start="103:83" pos:end="103:91"><expr pos:start="103:83" pos:end="103:91"><name pos:start="103:83" pos:end="103:91">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>



        <case pos:start="111:9" pos:end="111:32">case <expr pos:start="111:14" pos:end="111:31"><name pos:start="111:14" pos:end="111:31">PICTURE_START_CODE</name></expr>:</case>

            <if_stmt pos:start="113:13" pos:end="131:13"><if pos:start="113:13" pos:end="131:13">if <condition pos:start="113:16" pos:end="113:94">(<expr pos:start="113:17" pos:end="113:93"><name pos:start="113:17" pos:end="113:28">HAVE_THREADS</name> <operator pos:start="113:30" pos:end="113:31">&amp;&amp;</operator> <operator pos:start="113:33" pos:end="113:33">(</operator><name pos:start="113:34" pos:end="113:58"><name pos:start="113:34" pos:end="113:38">avctx</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:58">active_thread_type</name></name><operator pos:start="113:59" pos:end="113:59">&amp;</operator><name pos:start="113:60" pos:end="113:74">FF_THREAD_SLICE</name><operator pos:start="113:75" pos:end="113:75">)</operator> <operator pos:start="113:77" pos:end="113:78">&amp;&amp;</operator> <name pos:start="113:80" pos:end="113:93"><name pos:start="113:80" pos:end="113:80">s</name><operator pos:start="113:81" pos:end="113:82">-&gt;</operator><name pos:start="113:83" pos:end="113:93">slice_count</name></name></expr>)</condition> <block pos:start="113:96" pos:end="131:13">{<block_content pos:start="115:17" pos:end="129:35">

                <decl_stmt pos:start="115:17" pos:end="115:22"><decl pos:start="115:17" pos:end="115:21"><type pos:start="115:17" pos:end="115:19"><name pos:start="115:17" pos:end="115:19">int</name></type> <name pos:start="115:21" pos:end="115:21">i</name></decl>;</decl_stmt>



                <expr_stmt pos:start="119:17" pos:end="123:62"><expr pos:start="119:17" pos:end="123:61"><call pos:start="119:17" pos:end="123:61"><name pos:start="119:17" pos:end="119:30"><name pos:start="119:17" pos:end="119:21">avctx</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:30">execute</name></name><argument_list pos:start="119:31" pos:end="123:61">(<argument pos:start="119:32" pos:end="119:36"><expr pos:start="119:32" pos:end="119:36"><name pos:start="119:32" pos:end="119:36">avctx</name></expr></argument>, <argument pos:start="119:39" pos:end="119:57"><expr pos:start="119:39" pos:end="119:57"><name pos:start="119:39" pos:end="119:57">slice_decode_thread</name></expr></argument>,

                               <argument pos:start="121:32" pos:end="121:49"><expr pos:start="121:32" pos:end="121:49"><name pos:start="121:32" pos:end="121:49"><name pos:start="121:32" pos:end="121:33">s2</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:49">thread_context</name></name></expr></argument>, <argument pos:start="121:52" pos:end="121:55"><expr pos:start="121:52" pos:end="121:55"><name pos:start="121:52" pos:end="121:55">NULL</name></expr></argument>,

                               <argument pos:start="123:32" pos:end="123:45"><expr pos:start="123:32" pos:end="123:45"><name pos:start="123:32" pos:end="123:45"><name pos:start="123:32" pos:end="123:32">s</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:45">slice_count</name></name></expr></argument>, <argument pos:start="123:48" pos:end="123:60"><expr pos:start="123:48" pos:end="123:60"><sizeof pos:start="123:48" pos:end="123:60">sizeof<argument_list pos:start="123:54" pos:end="123:60">(<argument pos:start="123:55" pos:end="123:59"><expr pos:start="123:55" pos:end="123:59"><name pos:start="123:55" pos:end="123:58">void</name><operator pos:start="123:59" pos:end="123:59">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="125:17" pos:end="127:74">for <control pos:start="125:21" pos:end="125:52">(<init pos:start="125:22" pos:end="125:27"><expr pos:start="125:22" pos:end="125:26"><name pos:start="125:22" pos:end="125:22">i</name> <operator pos:start="125:24" pos:end="125:24">=</operator> <literal type="number" pos:start="125:26" pos:end="125:26">0</literal></expr>;</init> <condition pos:start="125:29" pos:end="125:47"><expr pos:start="125:29" pos:end="125:46"><name pos:start="125:29" pos:end="125:29">i</name> <operator pos:start="125:31" pos:end="125:31">&lt;</operator> <name pos:start="125:33" pos:end="125:46"><name pos:start="125:33" pos:end="125:33">s</name><operator pos:start="125:34" pos:end="125:35">-&gt;</operator><name pos:start="125:36" pos:end="125:46">slice_count</name></name></expr>;</condition> <incr pos:start="125:49" pos:end="125:51"><expr pos:start="125:49" pos:end="125:51"><name pos:start="125:49" pos:end="125:49">i</name><operator pos:start="125:50" pos:end="125:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="127:21" pos:end="127:74"><block_content pos:start="127:21" pos:end="127:74">

                    <expr_stmt pos:start="127:21" pos:end="127:74"><expr pos:start="127:21" pos:end="127:73"><name pos:start="127:21" pos:end="127:35"><name pos:start="127:21" pos:end="127:22">s2</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:35">error_count</name></name> <operator pos:start="127:37" pos:end="127:38">+=</operator> <name pos:start="127:40" pos:end="127:60"><name pos:start="127:40" pos:end="127:41">s2</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:57">thread_context</name><index pos:start="127:58" pos:end="127:60">[<expr pos:start="127:59" pos:end="127:59"><name pos:start="127:59" pos:end="127:59">i</name></expr>]</index></name><operator pos:start="127:61" pos:end="127:62">-&gt;</operator><name pos:start="127:63" pos:end="127:73">error_count</name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="129:17" pos:end="129:35"><expr pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:30"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:30">slice_count</name></name> <operator pos:start="129:32" pos:end="129:32">=</operator> <literal type="number" pos:start="129:34" pos:end="129:34">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="133:13" pos:end="161:13"><if pos:start="133:13" pos:end="157:13">if<condition pos:start="133:15" pos:end="133:67">(<expr pos:start="133:16" pos:end="133:66"><name pos:start="133:16" pos:end="133:24">last_code</name> <operator pos:start="133:26" pos:end="133:27">==</operator> <literal type="number" pos:start="133:29" pos:end="133:29">0</literal> <operator pos:start="133:31" pos:end="133:32">||</operator> <name pos:start="133:34" pos:end="133:42">last_code</name> <operator pos:start="133:44" pos:end="133:45">==</operator> <name pos:start="133:47" pos:end="133:66">SLICE_MIN_START_CODE</name></expr>)</condition><block pos:start="133:68" pos:end="157:13">{<block_content pos:start="135:13" pos:end="155:42">

            <if_stmt pos:start="135:13" pos:end="141:13"><if pos:start="135:13" pos:end="141:13">if<condition pos:start="135:15" pos:end="135:47">(<expr pos:start="135:16" pos:end="135:46"><call pos:start="135:16" pos:end="135:42"><name pos:start="135:16" pos:end="135:35">mpeg_decode_postinit</name><argument_list pos:start="135:36" pos:end="135:42">(<argument pos:start="135:37" pos:end="135:41"><expr pos:start="135:37" pos:end="135:41"><name pos:start="135:37" pos:end="135:41">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="135:44" pos:end="135:44">&lt;</operator> <literal type="number" pos:start="135:46" pos:end="135:46">0</literal></expr>)</condition><block pos:start="135:48" pos:end="141:13">{<block_content pos:start="137:17" pos:end="139:26">

                <expr_stmt pos:start="137:17" pos:end="137:80"><expr pos:start="137:17" pos:end="137:79"><call pos:start="137:17" pos:end="137:79"><name pos:start="137:17" pos:end="137:22">av_log</name><argument_list pos:start="137:23" pos:end="137:79">(<argument pos:start="137:24" pos:end="137:28"><expr pos:start="137:24" pos:end="137:28"><name pos:start="137:24" pos:end="137:28">avctx</name></expr></argument>, <argument pos:start="137:31" pos:end="137:42"><expr pos:start="137:31" pos:end="137:42"><name pos:start="137:31" pos:end="137:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:45" pos:end="137:78"><expr pos:start="137:45" pos:end="137:78"><literal type="string" pos:start="137:45" pos:end="137:78">"mpeg_decode_postinit() failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="139:17" pos:end="139:26">return <expr pos:start="139:24" pos:end="139:25"><operator pos:start="139:24" pos:end="139:24">-</operator><literal type="number" pos:start="139:25" pos:end="139:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="145:13" pos:end="145:67">/* we have a complete image: we try to decompress it */</comment>

            <if_stmt pos:start="147:13" pos:end="151:32"><if pos:start="147:13" pos:end="151:32">if<condition pos:start="147:15" pos:end="149:61">(<expr pos:start="147:16" pos:end="149:60"><call pos:start="147:16" pos:end="149:56"><name pos:start="147:16" pos:end="147:35">mpeg1_decode_picture</name><argument_list pos:start="147:36" pos:end="149:56">(<argument pos:start="147:37" pos:end="147:41"><expr pos:start="147:37" pos:end="147:41"><name pos:start="147:37" pos:end="147:41">avctx</name></expr></argument>,

                                    <argument pos:start="149:37" pos:end="149:43"><expr pos:start="149:37" pos:end="149:43"><name pos:start="149:37" pos:end="149:43">buf_ptr</name></expr></argument>, <argument pos:start="149:46" pos:end="149:55"><expr pos:start="149:46" pos:end="149:55"><name pos:start="149:46" pos:end="149:55">input_size</name></expr></argument>)</argument_list></call> <operator pos:start="149:58" pos:end="149:58">&lt;</operator> <literal type="number" pos:start="149:60" pos:end="149:60">0</literal></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:32"><block_content pos:start="151:17" pos:end="151:32">

                <expr_stmt pos:start="151:17" pos:end="151:32"><expr pos:start="151:17" pos:end="151:31"><name pos:start="151:17" pos:end="151:29"><name pos:start="151:17" pos:end="151:18">s2</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:29">pict_type</name></name><operator pos:start="151:30" pos:end="151:30">=</operator><literal type="number" pos:start="151:31" pos:end="151:31">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:36"><expr pos:start="153:17" pos:end="153:35"><name pos:start="153:17" pos:end="153:31"><name pos:start="153:17" pos:end="153:18">s2</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:31">first_slice</name></name> <operator pos:start="153:33" pos:end="153:33">=</operator> <literal type="number" pos:start="153:35" pos:end="153:35">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:42"><expr pos:start="155:13" pos:end="155:41"><name pos:start="155:13" pos:end="155:21">last_code</name><operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:41">PICTURE_START_CODE</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="157:14" pos:end="161:13">else<block pos:start="157:18" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:82">

                <expr_stmt pos:start="159:17" pos:end="159:82"><expr pos:start="159:17" pos:end="159:81"><call pos:start="159:17" pos:end="159:81"><name pos:start="159:17" pos:end="159:22">av_log</name><argument_list pos:start="159:23" pos:end="159:81">(<argument pos:start="159:24" pos:end="159:28"><expr pos:start="159:24" pos:end="159:28"><name pos:start="159:24" pos:end="159:28">avctx</name></expr></argument>, <argument pos:start="159:31" pos:end="159:42"><expr pos:start="159:31" pos:end="159:42"><name pos:start="159:31" pos:end="159:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:45" pos:end="159:69"><expr pos:start="159:45" pos:end="159:69"><literal type="string" pos:start="159:45" pos:end="159:69">"ignoring pic after %X\n"</literal></expr></argument>, <argument pos:start="159:72" pos:end="159:80"><expr pos:start="159:72" pos:end="159:80"><name pos:start="159:72" pos:end="159:80">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        <case pos:start="165:9" pos:end="165:28">case <expr pos:start="165:14" pos:end="165:27"><name pos:start="165:14" pos:end="165:27">EXT_START_CODE</name></expr>:</case>

            <expr_stmt pos:start="167:13" pos:end="167:58"><expr pos:start="167:13" pos:end="167:57"><call pos:start="167:13" pos:end="167:57"><name pos:start="167:13" pos:end="167:25">init_get_bits</name><argument_list pos:start="167:26" pos:end="167:57">(<argument pos:start="167:27" pos:end="167:33"><expr pos:start="167:27" pos:end="167:33"><operator pos:start="167:27" pos:end="167:27">&amp;</operator><name pos:start="167:28" pos:end="167:33"><name pos:start="167:28" pos:end="167:29">s2</name><operator pos:start="167:30" pos:end="167:31">-&gt;</operator><name pos:start="167:32" pos:end="167:33">gb</name></name></expr></argument>, <argument pos:start="167:36" pos:end="167:42"><expr pos:start="167:36" pos:end="167:42"><name pos:start="167:36" pos:end="167:42">buf_ptr</name></expr></argument>, <argument pos:start="167:45" pos:end="167:56"><expr pos:start="167:45" pos:end="167:56"><name pos:start="167:45" pos:end="167:54">input_size</name><operator pos:start="167:55" pos:end="167:55">*</operator><literal type="number" pos:start="167:56" pos:end="167:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <switch pos:start="171:13" pos:end="219:13">switch<condition pos:start="171:19" pos:end="171:40">(<expr pos:start="171:20" pos:end="171:39"><call pos:start="171:20" pos:end="171:39"><name pos:start="171:20" pos:end="171:27">get_bits</name><argument_list pos:start="171:28" pos:end="171:39">(<argument pos:start="171:29" pos:end="171:35"><expr pos:start="171:29" pos:end="171:35"><operator pos:start="171:29" pos:end="171:29">&amp;</operator><name pos:start="171:30" pos:end="171:35"><name pos:start="171:30" pos:end="171:31">s2</name><operator pos:start="171:32" pos:end="171:33">-&gt;</operator><name pos:start="171:34" pos:end="171:35">gb</name></name></expr></argument>, <argument pos:start="171:38" pos:end="171:38"><expr pos:start="171:38" pos:end="171:38"><literal type="number" pos:start="171:38" pos:end="171:38">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:42" pos:end="219:13">{<block_content pos:start="173:13" pos:end="217:22">

            <case pos:start="173:13" pos:end="173:21">case <expr pos:start="173:18" pos:end="173:20"><literal type="number" pos:start="173:18" pos:end="173:20">0x1</literal></expr>:</case>

                <if_stmt pos:start="175:17" pos:end="183:17"><if pos:start="175:17" pos:end="179:17">if<condition pos:start="175:19" pos:end="175:34">(<expr pos:start="175:20" pos:end="175:33"><name pos:start="175:20" pos:end="175:28">last_code</name> <operator pos:start="175:30" pos:end="175:31">==</operator> <literal type="number" pos:start="175:33" pos:end="175:33">0</literal></expr>)</condition><block pos:start="175:35" pos:end="179:17">{<block_content pos:start="177:17" pos:end="177:50">

                <expr_stmt pos:start="177:17" pos:end="177:50"><expr pos:start="177:17" pos:end="177:49"><call pos:start="177:17" pos:end="177:49"><name pos:start="177:17" pos:end="177:46">mpeg_decode_sequence_extension</name><argument_list pos:start="177:47" pos:end="177:49">(<argument pos:start="177:48" pos:end="177:48"><expr pos:start="177:48" pos:end="177:48"><name pos:start="177:48" pos:end="177:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="179:18" pos:end="183:17">else<block pos:start="179:22" pos:end="183:17">{<block_content pos:start="181:21" pos:end="181:90">

                    <expr_stmt pos:start="181:21" pos:end="181:90"><expr pos:start="181:21" pos:end="181:89"><call pos:start="181:21" pos:end="181:89"><name pos:start="181:21" pos:end="181:26">av_log</name><argument_list pos:start="181:27" pos:end="181:89">(<argument pos:start="181:28" pos:end="181:32"><expr pos:start="181:28" pos:end="181:32"><name pos:start="181:28" pos:end="181:32">avctx</name></expr></argument>, <argument pos:start="181:35" pos:end="181:46"><expr pos:start="181:35" pos:end="181:46"><name pos:start="181:35" pos:end="181:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:49" pos:end="181:77"><expr pos:start="181:49" pos:end="181:77"><literal type="string" pos:start="181:49" pos:end="181:77">"ignoring seq ext after %X\n"</literal></expr></argument>, <argument pos:start="181:80" pos:end="181:88"><expr pos:start="181:80" pos:end="181:88"><name pos:start="181:80" pos:end="181:88">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="185:17" pos:end="185:22">break;</break>

            <case pos:start="187:13" pos:end="187:21">case <expr pos:start="187:18" pos:end="187:20"><literal type="number" pos:start="187:18" pos:end="187:20">0x2</literal></expr>:</case>

                <expr_stmt pos:start="189:17" pos:end="189:58"><expr pos:start="189:17" pos:end="189:57"><call pos:start="189:17" pos:end="189:57"><name pos:start="189:17" pos:end="189:54">mpeg_decode_sequence_display_extension</name><argument_list pos:start="189:55" pos:end="189:57">(<argument pos:start="189:56" pos:end="189:56"><expr pos:start="189:56" pos:end="189:56"><name pos:start="189:56" pos:end="189:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            <case pos:start="193:13" pos:end="193:21">case <expr pos:start="193:18" pos:end="193:20"><literal type="number" pos:start="193:18" pos:end="193:20">0x3</literal></expr>:</case>

                <expr_stmt pos:start="195:17" pos:end="195:55"><expr pos:start="195:17" pos:end="195:54"><call pos:start="195:17" pos:end="195:54"><name pos:start="195:17" pos:end="195:50">mpeg_decode_quant_matrix_extension</name><argument_list pos:start="195:51" pos:end="195:54">(<argument pos:start="195:52" pos:end="195:53"><expr pos:start="195:52" pos:end="195:53"><name pos:start="195:52" pos:end="195:53">s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="197:17" pos:end="197:22">break;</break>

            <case pos:start="199:13" pos:end="199:21">case <expr pos:start="199:18" pos:end="199:20"><literal type="number" pos:start="199:18" pos:end="199:20">0x7</literal></expr>:</case>

                <expr_stmt pos:start="201:17" pos:end="201:57"><expr pos:start="201:17" pos:end="201:56"><call pos:start="201:17" pos:end="201:56"><name pos:start="201:17" pos:end="201:53">mpeg_decode_picture_display_extension</name><argument_list pos:start="201:54" pos:end="201:56">(<argument pos:start="201:55" pos:end="201:55"><expr pos:start="201:55" pos:end="201:55"><name pos:start="201:55" pos:end="201:55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="203:17" pos:end="203:22">break;</break>

            <case pos:start="205:13" pos:end="205:21">case <expr pos:start="205:18" pos:end="205:20"><literal type="number" pos:start="205:18" pos:end="205:20">0x8</literal></expr>:</case>

                <if_stmt pos:start="207:17" pos:end="215:17"><if pos:start="207:17" pos:end="211:17">if<condition pos:start="207:19" pos:end="207:51">(<expr pos:start="207:20" pos:end="207:50"><name pos:start="207:20" pos:end="207:28">last_code</name> <operator pos:start="207:30" pos:end="207:31">==</operator> <name pos:start="207:33" pos:end="207:50">PICTURE_START_CODE</name></expr>)</condition><block pos:start="207:52" pos:end="211:17">{<block_content pos:start="209:17" pos:end="209:56">

                <expr_stmt pos:start="209:17" pos:end="209:56"><expr pos:start="209:17" pos:end="209:55"><call pos:start="209:17" pos:end="209:55"><name pos:start="209:17" pos:end="209:52">mpeg_decode_picture_coding_extension</name><argument_list pos:start="209:53" pos:end="209:55">(<argument pos:start="209:54" pos:end="209:54"><expr pos:start="209:54" pos:end="209:54"><name pos:start="209:54" pos:end="209:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="211:18" pos:end="215:17">else<block pos:start="211:22" pos:end="215:17">{<block_content pos:start="213:21" pos:end="213:94">

                    <expr_stmt pos:start="213:21" pos:end="213:94"><expr pos:start="213:21" pos:end="213:93"><call pos:start="213:21" pos:end="213:93"><name pos:start="213:21" pos:end="213:26">av_log</name><argument_list pos:start="213:27" pos:end="213:93">(<argument pos:start="213:28" pos:end="213:32"><expr pos:start="213:28" pos:end="213:32"><name pos:start="213:28" pos:end="213:32">avctx</name></expr></argument>, <argument pos:start="213:35" pos:end="213:46"><expr pos:start="213:35" pos:end="213:46"><name pos:start="213:35" pos:end="213:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="213:49" pos:end="213:81"><expr pos:start="213:49" pos:end="213:81"><literal type="string" pos:start="213:49" pos:end="213:81">"ignoring pic cod ext after %X\n"</literal></expr></argument>, <argument pos:start="213:84" pos:end="213:92"><expr pos:start="213:84" pos:end="213:92"><name pos:start="213:84" pos:end="213:92">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="217:17" pos:end="217:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="221:13" pos:end="221:18">break;</break>

        <case pos:start="223:9" pos:end="223:29">case <expr pos:start="223:14" pos:end="223:28"><name pos:start="223:14" pos:end="223:28">USER_START_CODE</name></expr>:</case>

            <expr_stmt pos:start="225:13" pos:end="227:57"><expr pos:start="225:13" pos:end="227:56"><call pos:start="225:13" pos:end="227:56"><name pos:start="225:13" pos:end="225:33">mpeg_decode_user_data</name><argument_list pos:start="225:34" pos:end="227:56">(<argument pos:start="225:35" pos:end="225:39"><expr pos:start="225:35" pos:end="225:39"><name pos:start="225:35" pos:end="225:39">avctx</name></expr></argument>,

                                    <argument pos:start="227:37" pos:end="227:43"><expr pos:start="227:37" pos:end="227:43"><name pos:start="227:37" pos:end="227:43">buf_ptr</name></expr></argument>, <argument pos:start="227:46" pos:end="227:55"><expr pos:start="227:46" pos:end="227:55"><name pos:start="227:46" pos:end="227:55">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="229:13" pos:end="229:18">break;</break>

        <case pos:start="231:9" pos:end="231:28">case <expr pos:start="231:14" pos:end="231:27"><name pos:start="231:14" pos:end="231:27">GOP_START_CODE</name></expr>:</case>

            <if_stmt pos:start="233:13" pos:end="247:13"><if pos:start="233:13" pos:end="243:13">if<condition pos:start="233:15" pos:end="233:30">(<expr pos:start="233:16" pos:end="233:29"><name pos:start="233:16" pos:end="233:24">last_code</name> <operator pos:start="233:26" pos:end="233:27">==</operator> <literal type="number" pos:start="233:29" pos:end="233:29">0</literal></expr>)</condition><block pos:start="233:31" pos:end="243:13">{<block_content pos:start="235:13" pos:end="241:26">

            <expr_stmt pos:start="235:13" pos:end="235:30"><expr pos:start="235:13" pos:end="235:29"><name pos:start="235:13" pos:end="235:27"><name pos:start="235:13" pos:end="235:14">s2</name><operator pos:start="235:15" pos:end="235:16">-&gt;</operator><name pos:start="235:17" pos:end="235:27">first_field</name></name><operator pos:start="235:28" pos:end="235:28">=</operator><literal type="number" pos:start="235:29" pos:end="235:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="239:57"><expr pos:start="237:13" pos:end="239:56"><call pos:start="237:13" pos:end="239:56"><name pos:start="237:13" pos:end="237:27">mpeg_decode_gop</name><argument_list pos:start="237:28" pos:end="239:56">(<argument pos:start="237:29" pos:end="237:33"><expr pos:start="237:29" pos:end="237:33"><name pos:start="237:29" pos:end="237:33">avctx</name></expr></argument>,

                                    <argument pos:start="239:37" pos:end="239:43"><expr pos:start="239:37" pos:end="239:43"><name pos:start="239:37" pos:end="239:43">buf_ptr</name></expr></argument>, <argument pos:start="239:46" pos:end="239:55"><expr pos:start="239:46" pos:end="239:55"><name pos:start="239:46" pos:end="239:55">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:26"><expr pos:start="241:17" pos:end="241:25"><name pos:start="241:17" pos:end="241:23"><name pos:start="241:17" pos:end="241:17">s</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:23">sync</name></name><operator pos:start="241:24" pos:end="241:24">=</operator><literal type="number" pos:start="241:25" pos:end="241:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="243:14" pos:end="247:13">else<block pos:start="243:18" pos:end="247:13">{<block_content pos:start="245:17" pos:end="245:93">

                <expr_stmt pos:start="245:17" pos:end="245:93"><expr pos:start="245:17" pos:end="245:92"><call pos:start="245:17" pos:end="245:92"><name pos:start="245:17" pos:end="245:22">av_log</name><argument_list pos:start="245:23" pos:end="245:92">(<argument pos:start="245:24" pos:end="245:28"><expr pos:start="245:24" pos:end="245:28"><name pos:start="245:24" pos:end="245:28">avctx</name></expr></argument>, <argument pos:start="245:31" pos:end="245:42"><expr pos:start="245:31" pos:end="245:42"><name pos:start="245:31" pos:end="245:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="245:45" pos:end="245:80"><expr pos:start="245:45" pos:end="245:80"><literal type="string" pos:start="245:45" pos:end="245:80">"ignoring GOP_START_CODE after %X\n"</literal></expr></argument>, <argument pos:start="245:83" pos:end="245:91"><expr pos:start="245:83" pos:end="245:91"><name pos:start="245:83" pos:end="245:91">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="249:13" pos:end="249:18">break;</break>

        <default pos:start="251:9" pos:end="251:16">default:</default>

            <if_stmt pos:start="253:13" pos:end="423:13"><if pos:start="253:13" pos:end="423:13">if <condition pos:start="253:16" pos:end="255:67">(<expr pos:start="253:17" pos:end="255:66"><name pos:start="253:17" pos:end="253:26">start_code</name> <operator pos:start="253:28" pos:end="253:29">&gt;=</operator> <name pos:start="253:31" pos:end="253:50">SLICE_MIN_START_CODE</name> <operator pos:start="253:52" pos:end="253:53">&amp;&amp;</operator>

                <name pos:start="255:17" pos:end="255:26">start_code</name> <operator pos:start="255:28" pos:end="255:29">&lt;=</operator> <name pos:start="255:31" pos:end="255:50">SLICE_MAX_START_CODE</name> <operator pos:start="255:52" pos:end="255:53">&amp;&amp;</operator> <name pos:start="255:55" pos:end="255:63">last_code</name><operator pos:start="255:64" pos:end="255:65">!=</operator><literal type="number" pos:start="255:66" pos:end="255:66">0</literal></expr>)</condition> <block pos:start="255:69" pos:end="423:13">{<block_content pos:start="257:17" pos:end="421:17">

                <decl_stmt pos:start="257:17" pos:end="257:73"><decl pos:start="257:17" pos:end="257:72"><type pos:start="257:17" pos:end="257:25"><specifier pos:start="257:17" pos:end="257:21">const</specifier> <name pos:start="257:23" pos:end="257:25">int</name></type> <name pos:start="257:27" pos:end="257:35">field_pic</name><init pos:start="257:36" pos:end="257:72">= <expr pos:start="257:38" pos:end="257:72"><name pos:start="257:38" pos:end="257:58"><name pos:start="257:38" pos:end="257:39">s2</name><operator pos:start="257:40" pos:end="257:41">-&gt;</operator><name pos:start="257:42" pos:end="257:58">picture_structure</name></name> <operator pos:start="257:60" pos:end="257:61">!=</operator> <name pos:start="257:63" pos:end="257:72">PICT_FRAME</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="259:17" pos:end="259:75"><decl pos:start="259:17" pos:end="259:74"><type pos:start="259:17" pos:end="259:19"><name pos:start="259:17" pos:end="259:19">int</name></type> <name pos:start="259:21" pos:end="259:24">mb_y</name><init pos:start="259:25" pos:end="259:74">= <expr pos:start="259:27" pos:end="259:74"><operator pos:start="259:27" pos:end="259:27">(</operator><name pos:start="259:28" pos:end="259:37">start_code</name> <operator pos:start="259:39" pos:end="259:39">-</operator> <name pos:start="259:41" pos:end="259:60">SLICE_MIN_START_CODE</name><operator pos:start="259:61" pos:end="259:61">)</operator> <operator pos:start="259:63" pos:end="259:64">&lt;&lt;</operator> <name pos:start="259:66" pos:end="259:74">field_pic</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:48"><expr pos:start="261:17" pos:end="261:47"><name pos:start="261:17" pos:end="261:25">last_code</name><operator pos:start="261:26" pos:end="261:26">=</operator> <name pos:start="261:28" pos:end="261:47">SLICE_MIN_START_CODE</name></expr>;</expr_stmt>



                <if_stmt pos:start="265:17" pos:end="267:27"><if pos:start="265:17" pos:end="267:27">if<condition pos:start="265:19" pos:end="265:62">(<expr pos:start="265:20" pos:end="265:61"><name pos:start="265:20" pos:end="265:40"><name pos:start="265:20" pos:end="265:21">s2</name><operator pos:start="265:22" pos:end="265:23">-&gt;</operator><name pos:start="265:24" pos:end="265:40">picture_structure</name></name> <operator pos:start="265:42" pos:end="265:43">==</operator> <name pos:start="265:45" pos:end="265:61">PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo" pos:start="267:21" pos:end="267:27"><block_content pos:start="267:21" pos:end="267:27">

                    <expr_stmt pos:start="267:21" pos:end="267:27"><expr pos:start="267:21" pos:end="267:26"><name pos:start="267:21" pos:end="267:24">mb_y</name><operator pos:start="267:25" pos:end="267:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="271:17" pos:end="277:17"><if pos:start="271:17" pos:end="277:17">if <condition pos:start="271:20" pos:end="271:42">(<expr pos:start="271:21" pos:end="271:41"><name pos:start="271:21" pos:end="271:24">mb_y</name> <operator pos:start="271:26" pos:end="271:27">&gt;=</operator> <name pos:start="271:29" pos:end="271:41"><name pos:start="271:29" pos:end="271:30">s2</name><operator pos:start="271:31" pos:end="271:32">-&gt;</operator><name pos:start="271:33" pos:end="271:41">mb_height</name></name></expr>)</condition><block pos:start="271:43" pos:end="277:17">{<block_content pos:start="273:21" pos:end="275:30">

                    <expr_stmt pos:start="273:21" pos:end="273:107"><expr pos:start="273:21" pos:end="273:106"><call pos:start="273:21" pos:end="273:106"><name pos:start="273:21" pos:end="273:26">av_log</name><argument_list pos:start="273:27" pos:end="273:106">(<argument pos:start="273:28" pos:end="273:36"><expr pos:start="273:28" pos:end="273:36"><name pos:start="273:28" pos:end="273:36"><name pos:start="273:28" pos:end="273:29">s2</name><operator pos:start="273:30" pos:end="273:31">-&gt;</operator><name pos:start="273:32" pos:end="273:36">avctx</name></name></expr></argument>, <argument pos:start="273:39" pos:end="273:50"><expr pos:start="273:39" pos:end="273:50"><name pos:start="273:39" pos:end="273:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:53" pos:end="273:84"><expr pos:start="273:53" pos:end="273:84"><literal type="string" pos:start="273:53" pos:end="273:84">"slice below image (%d &gt;= %d)\n"</literal></expr></argument>, <argument pos:start="273:87" pos:end="273:90"><expr pos:start="273:87" pos:end="273:90"><name pos:start="273:87" pos:end="273:90">mb_y</name></expr></argument>, <argument pos:start="273:93" pos:end="273:105"><expr pos:start="273:93" pos:end="273:105"><name pos:start="273:93" pos:end="273:105"><name pos:start="273:93" pos:end="273:94">s2</name><operator pos:start="273:95" pos:end="273:96">-&gt;</operator><name pos:start="273:97" pos:end="273:105">mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="275:21" pos:end="275:30">return <expr pos:start="275:28" pos:end="275:29"><operator pos:start="275:28" pos:end="275:28">-</operator><literal type="number" pos:start="275:29" pos:end="275:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="281:17" pos:end="293:17"><if pos:start="281:17" pos:end="293:17">if<condition pos:start="281:19" pos:end="281:46">(<expr pos:start="281:20" pos:end="281:45"><name pos:start="281:20" pos:end="281:39"><name pos:start="281:20" pos:end="281:21">s2</name><operator pos:start="281:22" pos:end="281:23">-&gt;</operator><name pos:start="281:24" pos:end="281:39">last_picture_ptr</name></name><operator pos:start="281:40" pos:end="281:41">==</operator><name pos:start="281:42" pos:end="281:45">NULL</name></expr>)</condition><block pos:start="281:47" pos:end="293:17">{<block_content pos:start="285:21" pos:end="291:21">

                <comment type="block" pos:start="283:17" pos:end="283:92">/* Skip B-frames if we do not have reference frames and gop is not closed */</comment>

                    <if_stmt pos:start="285:21" pos:end="291:21"><if pos:start="285:21" pos:end="291:21">if<condition pos:start="285:23" pos:end="285:56">(<expr pos:start="285:24" pos:end="285:55"><name pos:start="285:24" pos:end="285:36"><name pos:start="285:24" pos:end="285:25">s2</name><operator pos:start="285:26" pos:end="285:27">-&gt;</operator><name pos:start="285:28" pos:end="285:36">pict_type</name></name><operator pos:start="285:37" pos:end="285:38">==</operator><name pos:start="285:39" pos:end="285:55">AV_PICTURE_TYPE_B</name></expr>)</condition><block pos:start="285:57" pos:end="291:21">{<block_content pos:start="287:25" pos:end="289:34">

                        <if_stmt pos:start="287:25" pos:end="289:34"><if pos:start="287:25" pos:end="289:34">if<condition pos:start="287:27" pos:end="287:43">(<expr pos:start="287:28" pos:end="287:42"><operator pos:start="287:28" pos:end="287:28">!</operator><name pos:start="287:29" pos:end="287:42"><name pos:start="287:29" pos:end="287:30">s2</name><operator pos:start="287:31" pos:end="287:32">-&gt;</operator><name pos:start="287:33" pos:end="287:42">closed_gop</name></name></expr>)</condition><block type="pseudo" pos:start="289:29" pos:end="289:34"><block_content pos:start="289:29" pos:end="289:34">

                            <break pos:start="289:29" pos:end="289:34">break;</break></block_content></block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="295:17" pos:end="297:30"><if pos:start="295:17" pos:end="297:30">if<condition pos:start="295:19" pos:end="295:52">(<expr pos:start="295:20" pos:end="295:51"><name pos:start="295:20" pos:end="295:32"><name pos:start="295:20" pos:end="295:21">s2</name><operator pos:start="295:22" pos:end="295:23">-&gt;</operator><name pos:start="295:24" pos:end="295:32">pict_type</name></name><operator pos:start="295:33" pos:end="295:34">==</operator><name pos:start="295:35" pos:end="295:51">AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo" pos:start="297:21" pos:end="297:30"><block_content pos:start="297:21" pos:end="297:30">

                    <expr_stmt pos:start="297:21" pos:end="297:30"><expr pos:start="297:21" pos:end="297:29"><name pos:start="297:21" pos:end="297:27"><name pos:start="297:21" pos:end="297:21">s</name><operator pos:start="297:22" pos:end="297:23">-&gt;</operator><name pos:start="297:24" pos:end="297:27">sync</name></name><operator pos:start="297:28" pos:end="297:28">=</operator><literal type="number" pos:start="297:29" pos:end="297:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="299:17" pos:end="305:17"><if pos:start="299:17" pos:end="305:17">if<condition pos:start="299:19" pos:end="299:46">(<expr pos:start="299:20" pos:end="299:45"><name pos:start="299:20" pos:end="299:39"><name pos:start="299:20" pos:end="299:21">s2</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:39">next_picture_ptr</name></name><operator pos:start="299:40" pos:end="299:41">==</operator><name pos:start="299:42" pos:end="299:45">NULL</name></expr>)</condition><block pos:start="299:47" pos:end="305:17">{<block_content pos:start="303:21" pos:end="303:75">

                <comment type="block" pos:start="301:17" pos:end="301:101">/* Skip P-frames if we do not have a reference frame or we have an invalid header. */</comment>

                    <if_stmt pos:start="303:21" pos:end="303:75"><if pos:start="303:21" pos:end="303:75">if<condition pos:start="303:23" pos:end="303:68">(<expr pos:start="303:24" pos:end="303:67"><name pos:start="303:24" pos:end="303:36"><name pos:start="303:24" pos:end="303:25">s2</name><operator pos:start="303:26" pos:end="303:27">-&gt;</operator><name pos:start="303:28" pos:end="303:36">pict_type</name></name><operator pos:start="303:37" pos:end="303:38">==</operator><name pos:start="303:39" pos:end="303:55">AV_PICTURE_TYPE_P</name> <operator pos:start="303:57" pos:end="303:58">&amp;&amp;</operator> <operator pos:start="303:60" pos:end="303:60">!</operator><name pos:start="303:61" pos:end="303:67"><name pos:start="303:61" pos:end="303:61">s</name><operator pos:start="303:62" pos:end="303:63">-&gt;</operator><name pos:start="303:64" pos:end="303:67">sync</name></name></expr>)</condition><block type="pseudo" pos:start="303:70" pos:end="303:75"><block_content pos:start="303:70" pos:end="303:75"> <break pos:start="303:70" pos:end="303:75">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="307:17" pos:end="313:26"><if pos:start="307:17" pos:end="313:26">if<condition pos:start="307:19" pos:end="311:58">(  <expr pos:start="307:22" pos:end="311:57"><operator pos:start="307:22" pos:end="307:22">(</operator><name pos:start="307:23" pos:end="307:39"><name pos:start="307:23" pos:end="307:27">avctx</name><operator pos:start="307:28" pos:end="307:29">-&gt;</operator><name pos:start="307:30" pos:end="307:39">skip_frame</name></name> <operator pos:start="307:41" pos:end="307:42">&gt;=</operator> <name pos:start="307:44" pos:end="307:59">AVDISCARD_NONREF</name> <operator pos:start="307:61" pos:end="307:62">&amp;&amp;</operator> <name pos:start="307:64" pos:end="307:76"><name pos:start="307:64" pos:end="307:65">s2</name><operator pos:start="307:66" pos:end="307:67">-&gt;</operator><name pos:start="307:68" pos:end="307:76">pict_type</name></name><operator pos:start="307:77" pos:end="307:78">==</operator><name pos:start="307:79" pos:end="307:95">AV_PICTURE_TYPE_B</name><operator pos:start="307:96" pos:end="307:96">)</operator>

                    <operator pos:start="309:21" pos:end="309:22">||</operator><operator pos:start="309:23" pos:end="309:23">(</operator><name pos:start="309:24" pos:end="309:40"><name pos:start="309:24" pos:end="309:28">avctx</name><operator pos:start="309:29" pos:end="309:30">-&gt;</operator><name pos:start="309:31" pos:end="309:40">skip_frame</name></name> <operator pos:start="309:42" pos:end="309:43">&gt;=</operator> <name pos:start="309:45" pos:end="309:60">AVDISCARD_NONKEY</name> <operator pos:start="309:62" pos:end="309:63">&amp;&amp;</operator> <name pos:start="309:65" pos:end="309:77"><name pos:start="309:65" pos:end="309:66">s2</name><operator pos:start="309:67" pos:end="309:68">-&gt;</operator><name pos:start="309:69" pos:end="309:77">pict_type</name></name><operator pos:start="309:78" pos:end="309:79">!=</operator><name pos:start="309:80" pos:end="309:96">AV_PICTURE_TYPE_I</name><operator pos:start="309:97" pos:end="309:97">)</operator>

                    <operator pos:start="311:21" pos:end="311:22">||</operator> <name pos:start="311:24" pos:end="311:40"><name pos:start="311:24" pos:end="311:28">avctx</name><operator pos:start="311:29" pos:end="311:30">-&gt;</operator><name pos:start="311:31" pos:end="311:40">skip_frame</name></name> <operator pos:start="311:42" pos:end="311:43">&gt;=</operator> <name pos:start="311:45" pos:end="311:57">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="313:21" pos:end="313:26"><block_content pos:start="313:21" pos:end="313:26">

                    <break pos:start="313:21" pos:end="313:26">break;</break></block_content></block></if></if_stmt>



                <if_stmt pos:start="317:17" pos:end="317:54"><if pos:start="317:17" pos:end="317:54">if <condition pos:start="317:20" pos:end="317:47">(<expr pos:start="317:21" pos:end="317:46"><operator pos:start="317:21" pos:end="317:21">!</operator><name pos:start="317:22" pos:end="317:46"><name pos:start="317:22" pos:end="317:22">s</name><operator pos:start="317:23" pos:end="317:24">-&gt;</operator><name pos:start="317:25" pos:end="317:46">mpeg_enc_ctx_allocated</name></name></expr>)</condition><block type="pseudo" pos:start="317:49" pos:end="317:54"><block_content pos:start="317:49" pos:end="317:54"> <break pos:start="317:49" pos:end="317:54">break;</break></block_content></block></if></if_stmt>



                <if_stmt pos:start="321:17" pos:end="327:17"><if pos:start="321:17" pos:end="327:17">if<condition pos:start="321:19" pos:end="321:55">(<expr pos:start="321:20" pos:end="321:54"><name pos:start="321:20" pos:end="321:31"><name pos:start="321:20" pos:end="321:21">s2</name><operator pos:start="321:22" pos:end="321:23">-&gt;</operator><name pos:start="321:24" pos:end="321:31">codec_id</name></name> <operator pos:start="321:33" pos:end="321:34">==</operator> <name pos:start="321:36" pos:end="321:54">CODEC_ID_MPEG2VIDEO</name></expr>)</condition><block pos:start="321:56" pos:end="327:17">{<block_content pos:start="323:21" pos:end="325:30">

                    <if_stmt pos:start="323:21" pos:end="325:30"><if pos:start="323:21" pos:end="325:30">if<condition pos:start="323:23" pos:end="323:92">(<expr pos:start="323:24" pos:end="323:91"><name pos:start="323:24" pos:end="323:27">mb_y</name> <operator pos:start="323:29" pos:end="323:29">&lt;</operator> <name pos:start="323:31" pos:end="323:45"><name pos:start="323:31" pos:end="323:35">avctx</name><operator pos:start="323:36" pos:end="323:37">-&gt;</operator><name pos:start="323:38" pos:end="323:45">skip_top</name></name> <operator pos:start="323:47" pos:end="323:48">||</operator> <name pos:start="323:50" pos:end="323:53">mb_y</name> <operator pos:start="323:55" pos:end="323:56">&gt;=</operator> <name pos:start="323:58" pos:end="323:70"><name pos:start="323:58" pos:end="323:59">s2</name><operator pos:start="323:60" pos:end="323:61">-&gt;</operator><name pos:start="323:62" pos:end="323:70">mb_height</name></name> <operator pos:start="323:72" pos:end="323:72">-</operator> <name pos:start="323:74" pos:end="323:91"><name pos:start="323:74" pos:end="323:78">avctx</name><operator pos:start="323:79" pos:end="323:80">-&gt;</operator><name pos:start="323:81" pos:end="323:91">skip_bottom</name></name></expr>)</condition><block type="pseudo" pos:start="325:25" pos:end="325:30"><block_content pos:start="325:25" pos:end="325:30">

                        <break pos:start="325:25" pos:end="325:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="331:17" pos:end="337:17"><if pos:start="331:17" pos:end="337:17">if<condition pos:start="331:19" pos:end="331:34">(<expr pos:start="331:20" pos:end="331:33"><operator pos:start="331:20" pos:end="331:20">!</operator><name pos:start="331:21" pos:end="331:33"><name pos:start="331:21" pos:end="331:22">s2</name><operator pos:start="331:23" pos:end="331:24">-&gt;</operator><name pos:start="331:25" pos:end="331:33">pict_type</name></name></expr>)</condition><block pos:start="331:35" pos:end="337:17">{<block_content pos:start="333:21" pos:end="335:26">

                    <expr_stmt pos:start="333:21" pos:end="333:80"><expr pos:start="333:21" pos:end="333:79"><call pos:start="333:21" pos:end="333:79"><name pos:start="333:21" pos:end="333:26">av_log</name><argument_list pos:start="333:27" pos:end="333:79">(<argument pos:start="333:28" pos:end="333:32"><expr pos:start="333:28" pos:end="333:32"><name pos:start="333:28" pos:end="333:32">avctx</name></expr></argument>, <argument pos:start="333:35" pos:end="333:46"><expr pos:start="333:35" pos:end="333:46"><name pos:start="333:35" pos:end="333:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="333:49" pos:end="333:78"><expr pos:start="333:49" pos:end="333:78"><literal type="string" pos:start="333:49" pos:end="333:78">"Missing picture start code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="335:21" pos:end="335:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="341:17" pos:end="349:17"><if pos:start="341:17" pos:end="349:17">if<condition pos:start="341:19" pos:end="341:35">(<expr pos:start="341:20" pos:end="341:34"><name pos:start="341:20" pos:end="341:34"><name pos:start="341:20" pos:end="341:21">s2</name><operator pos:start="341:22" pos:end="341:23">-&gt;</operator><name pos:start="341:24" pos:end="341:34">first_slice</name></name></expr>)</condition><block pos:start="341:36" pos:end="349:17">{<block_content pos:start="343:21" pos:end="347:34">

                    <expr_stmt pos:start="343:21" pos:end="343:38"><expr pos:start="343:21" pos:end="343:37"><name pos:start="343:21" pos:end="343:35"><name pos:start="343:21" pos:end="343:22">s2</name><operator pos:start="343:23" pos:end="343:24">-&gt;</operator><name pos:start="343:25" pos:end="343:35">first_slice</name></name><operator pos:start="343:36" pos:end="343:36">=</operator><literal type="number" pos:start="343:37" pos:end="343:37">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="345:21" pos:end="347:34"><if pos:start="345:21" pos:end="347:34">if<condition pos:start="345:23" pos:end="345:63">(<expr pos:start="345:24" pos:end="345:62"><call pos:start="345:24" pos:end="345:58"><name pos:start="345:24" pos:end="345:39">mpeg_field_start</name><argument_list pos:start="345:40" pos:end="345:58">(<argument pos:start="345:41" pos:end="345:42"><expr pos:start="345:41" pos:end="345:42"><name pos:start="345:41" pos:end="345:42">s2</name></expr></argument>, <argument pos:start="345:45" pos:end="345:47"><expr pos:start="345:45" pos:end="345:47"><name pos:start="345:45" pos:end="345:47">buf</name></expr></argument>, <argument pos:start="345:50" pos:end="345:57"><expr pos:start="345:50" pos:end="345:57"><name pos:start="345:50" pos:end="345:57">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="345:60" pos:end="345:60">&lt;</operator> <literal type="number" pos:start="345:62" pos:end="345:62">0</literal></expr>)</condition><block type="pseudo" pos:start="347:25" pos:end="347:34"><block_content pos:start="347:25" pos:end="347:34">

                        <return pos:start="347:25" pos:end="347:34">return <expr pos:start="347:32" pos:end="347:33"><operator pos:start="347:32" pos:end="347:32">-</operator><literal type="number" pos:start="347:33" pos:end="347:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="351:17" pos:end="357:17"><if pos:start="351:17" pos:end="357:17">if<condition pos:start="351:19" pos:end="351:44">(<expr pos:start="351:20" pos:end="351:43"><operator pos:start="351:20" pos:end="351:20">!</operator><name pos:start="351:21" pos:end="351:43"><name pos:start="351:21" pos:end="351:22">s2</name><operator pos:start="351:23" pos:end="351:24">-&gt;</operator><name pos:start="351:25" pos:end="351:43">current_picture_ptr</name></name></expr>)</condition><block pos:start="351:45" pos:end="357:17">{<block_content pos:start="353:21" pos:end="355:30">

                    <expr_stmt pos:start="353:21" pos:end="353:85"><expr pos:start="353:21" pos:end="353:84"><call pos:start="353:21" pos:end="353:84"><name pos:start="353:21" pos:end="353:26">av_log</name><argument_list pos:start="353:27" pos:end="353:84">(<argument pos:start="353:28" pos:end="353:32"><expr pos:start="353:28" pos:end="353:32"><name pos:start="353:28" pos:end="353:32">avctx</name></expr></argument>, <argument pos:start="353:35" pos:end="353:46"><expr pos:start="353:35" pos:end="353:46"><name pos:start="353:35" pos:end="353:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="353:49" pos:end="353:83"><expr pos:start="353:49" pos:end="353:83"><literal type="string" pos:start="353:49" pos:end="353:83">"current_picture not initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="355:21" pos:end="355:30">return <expr pos:start="355:28" pos:end="355:29"><operator pos:start="355:28" pos:end="355:28">-</operator><literal type="number" pos:start="355:29" pos:end="355:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="361:17" pos:end="367:17"><if pos:start="361:17" pos:end="367:17">if <condition pos:start="361:20" pos:end="361:71">(<expr pos:start="361:21" pos:end="361:70"><name pos:start="361:21" pos:end="361:46"><name pos:start="361:21" pos:end="361:25">avctx</name><operator pos:start="361:26" pos:end="361:27">-&gt;</operator><name pos:start="361:28" pos:end="361:32">codec</name><operator pos:start="361:33" pos:end="361:34">-&gt;</operator><name pos:start="361:35" pos:end="361:46">capabilities</name></name><operator pos:start="361:47" pos:end="361:47">&amp;</operator><name pos:start="361:48" pos:end="361:70">CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition> <block pos:start="361:73" pos:end="367:17">{<block_content pos:start="363:21" pos:end="365:26">

                    <expr_stmt pos:start="363:21" pos:end="363:37"><expr pos:start="363:21" pos:end="363:36"><name pos:start="363:21" pos:end="363:34"><name pos:start="363:21" pos:end="363:21">s</name><operator pos:start="363:22" pos:end="363:23">-&gt;</operator><name pos:start="363:24" pos:end="363:34">slice_count</name></name><operator pos:start="363:35" pos:end="363:36">++</operator></expr>;</expr_stmt>

                    <break pos:start="365:21" pos:end="365:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="371:17" pos:end="421:17"><if pos:start="371:17" pos:end="401:17">if<condition pos:start="371:19" pos:end="371:43">(<expr pos:start="371:20" pos:end="371:42"><name pos:start="371:20" pos:end="371:38"><name pos:start="371:20" pos:end="371:24">avctx</name><operator pos:start="371:25" pos:end="371:26">-&gt;</operator><name pos:start="371:27" pos:end="371:38">thread_count</name></name> <operator pos:start="371:40" pos:end="371:40">&gt;</operator> <literal type="number" pos:start="371:42" pos:end="371:42">1</literal></expr>)</condition><block pos:start="371:44" pos:end="401:17">{<block_content pos:start="373:21" pos:end="399:33">

                    <decl_stmt pos:start="373:21" pos:end="373:112"><decl pos:start="373:21" pos:end="373:111"><type pos:start="373:21" pos:end="373:23"><name pos:start="373:21" pos:end="373:23">int</name></type> <name pos:start="373:25" pos:end="373:33">threshold</name><init pos:start="373:34" pos:end="373:111">= <expr pos:start="373:36" pos:end="373:111"><operator pos:start="373:36" pos:end="373:36">(</operator><name pos:start="373:37" pos:end="373:49"><name pos:start="373:37" pos:end="373:38">s2</name><operator pos:start="373:39" pos:end="373:40">-&gt;</operator><name pos:start="373:41" pos:end="373:49">mb_height</name></name><operator pos:start="373:50" pos:end="373:50">*</operator><name pos:start="373:51" pos:end="373:64"><name pos:start="373:51" pos:end="373:51">s</name><operator pos:start="373:52" pos:end="373:53">-&gt;</operator><name pos:start="373:54" pos:end="373:64">slice_count</name></name> <operator pos:start="373:66" pos:end="373:66">+</operator> <name pos:start="373:68" pos:end="373:86"><name pos:start="373:68" pos:end="373:72">avctx</name><operator pos:start="373:73" pos:end="373:74">-&gt;</operator><name pos:start="373:75" pos:end="373:86">thread_count</name></name><operator pos:start="373:87" pos:end="373:87">/</operator><literal type="number" pos:start="373:88" pos:end="373:88">2</literal><operator pos:start="373:89" pos:end="373:89">)</operator> <operator pos:start="373:91" pos:end="373:91">/</operator> <name pos:start="373:93" pos:end="373:111"><name pos:start="373:93" pos:end="373:97">avctx</name><operator pos:start="373:98" pos:end="373:99">-&gt;</operator><name pos:start="373:100" pos:end="373:111">thread_count</name></name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="375:21" pos:end="397:21"><if pos:start="375:21" pos:end="397:21">if<condition pos:start="375:23" pos:end="375:41">(<expr pos:start="375:24" pos:end="375:40"><name pos:start="375:24" pos:end="375:32">threshold</name> <operator pos:start="375:34" pos:end="375:35">&lt;=</operator> <name pos:start="375:37" pos:end="375:40">mb_y</name></expr>)</condition><block pos:start="375:42" pos:end="397:21">{<block_content pos:start="377:25" pos:end="395:41">

                        <decl_stmt pos:start="377:25" pos:end="377:91"><decl pos:start="377:25" pos:end="377:90"><type pos:start="377:25" pos:end="377:40"><name pos:start="377:25" pos:end="377:38">MpegEncContext</name> <modifier pos:start="377:40" pos:end="377:40">*</modifier></type><name pos:start="377:41" pos:end="377:54">thread_context</name><init pos:start="377:55" pos:end="377:90">= <expr pos:start="377:57" pos:end="377:90"><name pos:start="377:57" pos:end="377:90"><name pos:start="377:57" pos:end="377:58">s2</name><operator pos:start="377:59" pos:end="377:60">-&gt;</operator><name pos:start="377:61" pos:end="377:74">thread_context</name><index pos:start="377:75" pos:end="377:90">[<expr pos:start="377:76" pos:end="377:89"><name pos:start="377:76" pos:end="377:89"><name pos:start="377:76" pos:end="377:76">s</name><operator pos:start="377:77" pos:end="377:78">-&gt;</operator><name pos:start="377:79" pos:end="377:89">slice_count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="381:25" pos:end="381:57"><expr pos:start="381:25" pos:end="381:56"><name pos:start="381:25" pos:end="381:50"><name pos:start="381:25" pos:end="381:38">thread_context</name><operator pos:start="381:39" pos:end="381:40">-&gt;</operator><name pos:start="381:41" pos:end="381:50">start_mb_y</name></name><operator pos:start="381:51" pos:end="381:51">=</operator> <name pos:start="381:53" pos:end="381:56">mb_y</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="383:25" pos:end="383:66"><expr pos:start="383:25" pos:end="383:65"><name pos:start="383:25" pos:end="383:48"><name pos:start="383:25" pos:end="383:38">thread_context</name><operator pos:start="383:39" pos:end="383:40">-&gt;</operator><name pos:start="383:41" pos:end="383:48">end_mb_y</name></name>  <operator pos:start="383:51" pos:end="383:51">=</operator> <name pos:start="383:53" pos:end="383:65"><name pos:start="383:53" pos:end="383:54">s2</name><operator pos:start="383:55" pos:end="383:56">-&gt;</operator><name pos:start="383:57" pos:end="383:65">mb_height</name></name></expr>;</expr_stmt>

                        <if_stmt pos:start="385:25" pos:end="391:25"><if pos:start="385:25" pos:end="391:25">if<condition pos:start="385:27" pos:end="385:42">(<expr pos:start="385:28" pos:end="385:41"><name pos:start="385:28" pos:end="385:41"><name pos:start="385:28" pos:end="385:28">s</name><operator pos:start="385:29" pos:end="385:30">-&gt;</operator><name pos:start="385:31" pos:end="385:41">slice_count</name></name></expr>)</condition><block pos:start="385:43" pos:end="391:25">{<block_content pos:start="387:29" pos:end="389:76">

                            <expr_stmt pos:start="387:29" pos:end="387:81"><expr pos:start="387:29" pos:end="387:80"><name pos:start="387:29" pos:end="387:64"><name pos:start="387:29" pos:end="387:30">s2</name><operator pos:start="387:31" pos:end="387:32">-&gt;</operator><name pos:start="387:33" pos:end="387:46">thread_context</name><index pos:start="387:47" pos:end="387:64">[<expr pos:start="387:48" pos:end="387:63"><name pos:start="387:48" pos:end="387:61"><name pos:start="387:48" pos:end="387:48">s</name><operator pos:start="387:49" pos:end="387:50">-&gt;</operator><name pos:start="387:51" pos:end="387:61">slice_count</name></name><operator pos:start="387:62" pos:end="387:62">-</operator><literal type="number" pos:start="387:63" pos:end="387:63">1</literal></expr>]</index></name><operator pos:start="387:65" pos:end="387:66">-&gt;</operator><name pos:start="387:67" pos:end="387:74">end_mb_y</name><operator pos:start="387:75" pos:end="387:75">=</operator> <name pos:start="387:77" pos:end="387:80">mb_y</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="389:29" pos:end="389:76"><expr pos:start="389:29" pos:end="389:75"><call pos:start="389:29" pos:end="389:75"><name pos:start="389:29" pos:end="389:55">ff_update_duplicate_context</name><argument_list pos:start="389:56" pos:end="389:75">(<argument pos:start="389:57" pos:end="389:70"><expr pos:start="389:57" pos:end="389:70"><name pos:start="389:57" pos:end="389:70">thread_context</name></expr></argument>, <argument pos:start="389:73" pos:end="389:74"><expr pos:start="389:73" pos:end="389:74"><name pos:start="389:73" pos:end="389:74">s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="393:25" pos:end="393:82"><expr pos:start="393:25" pos:end="393:81"><call pos:start="393:25" pos:end="393:81"><name pos:start="393:25" pos:end="393:37">init_get_bits</name><argument_list pos:start="393:38" pos:end="393:81">(<argument pos:start="393:39" pos:end="393:57"><expr pos:start="393:39" pos:end="393:57"><operator pos:start="393:39" pos:end="393:39">&amp;</operator><name pos:start="393:40" pos:end="393:57"><name pos:start="393:40" pos:end="393:53">thread_context</name><operator pos:start="393:54" pos:end="393:55">-&gt;</operator><name pos:start="393:56" pos:end="393:57">gb</name></name></expr></argument>, <argument pos:start="393:60" pos:end="393:66"><expr pos:start="393:60" pos:end="393:66"><name pos:start="393:60" pos:end="393:66">buf_ptr</name></expr></argument>, <argument pos:start="393:69" pos:end="393:80"><expr pos:start="393:69" pos:end="393:80"><name pos:start="393:69" pos:end="393:78">input_size</name><operator pos:start="393:79" pos:end="393:79">*</operator><literal type="number" pos:start="393:80" pos:end="393:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="395:25" pos:end="395:41"><expr pos:start="395:25" pos:end="395:40"><name pos:start="395:25" pos:end="395:38"><name pos:start="395:25" pos:end="395:25">s</name><operator pos:start="395:26" pos:end="395:27">-&gt;</operator><name pos:start="395:28" pos:end="395:38">slice_count</name></name><operator pos:start="395:39" pos:end="395:40">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="399:21" pos:end="399:33"><expr pos:start="399:21" pos:end="399:32"><name pos:start="399:21" pos:end="399:27">buf_ptr</name> <operator pos:start="399:29" pos:end="399:30">+=</operator> <literal type="number" pos:start="399:32" pos:end="399:32">2</literal></expr>;</expr_stmt> <comment type="line" pos:start="399:35" pos:end="399:79">//FIXME add minimum number of bytes per slice</comment>

                </block_content>}</block></if><else pos:start="401:18" pos:end="421:17">else<block pos:start="401:22" pos:end="421:17">{<block_content pos:start="403:21" pos:end="419:21">

                    <expr_stmt pos:start="403:21" pos:end="403:75"><expr pos:start="403:21" pos:end="403:74"><name pos:start="403:21" pos:end="403:23">ret</name> <operator pos:start="403:25" pos:end="403:25">=</operator> <call pos:start="403:27" pos:end="403:74"><name pos:start="403:27" pos:end="403:43">mpeg_decode_slice</name><argument_list pos:start="403:44" pos:end="403:74">(<argument pos:start="403:45" pos:end="403:45"><expr pos:start="403:45" pos:end="403:45"><name pos:start="403:45" pos:end="403:45">s</name></expr></argument>, <argument pos:start="403:48" pos:end="403:51"><expr pos:start="403:48" pos:end="403:51"><name pos:start="403:48" pos:end="403:51">mb_y</name></expr></argument>, <argument pos:start="403:54" pos:end="403:61"><expr pos:start="403:54" pos:end="403:61"><operator pos:start="403:54" pos:end="403:54">&amp;</operator><name pos:start="403:55" pos:end="403:61">buf_ptr</name></expr></argument>, <argument pos:start="403:64" pos:end="403:73"><expr pos:start="403:64" pos:end="403:73"><name pos:start="403:64" pos:end="403:73">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="405:21" pos:end="405:29"><expr pos:start="405:21" pos:end="405:28"><call pos:start="405:21" pos:end="405:28"><name pos:start="405:21" pos:end="405:26">emms_c</name><argument_list pos:start="405:27" pos:end="405:28">()</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="409:21" pos:end="419:21"><if pos:start="409:21" pos:end="415:21">if<condition pos:start="409:23" pos:end="409:31">(<expr pos:start="409:24" pos:end="409:30"><name pos:start="409:24" pos:end="409:26">ret</name> <operator pos:start="409:28" pos:end="409:28">&lt;</operator> <literal type="number" pos:start="409:30" pos:end="409:30">0</literal></expr>)</condition><block pos:start="409:32" pos:end="415:21">{<block_content pos:start="411:25" pos:end="413:130">

                        <if_stmt pos:start="411:25" pos:end="413:130"><if pos:start="411:25" pos:end="413:130">if<condition pos:start="411:27" pos:end="411:68">(<expr pos:start="411:28" pos:end="411:67"><name pos:start="411:28" pos:end="411:42"><name pos:start="411:28" pos:end="411:29">s2</name><operator pos:start="411:30" pos:end="411:31">-&gt;</operator><name pos:start="411:32" pos:end="411:42">resync_mb_x</name></name><operator pos:start="411:43" pos:end="411:44">&gt;=</operator><literal type="number" pos:start="411:45" pos:end="411:45">0</literal> <operator pos:start="411:47" pos:end="411:48">&amp;&amp;</operator> <name pos:start="411:50" pos:end="411:64"><name pos:start="411:50" pos:end="411:51">s2</name><operator pos:start="411:52" pos:end="411:53">-&gt;</operator><name pos:start="411:54" pos:end="411:64">resync_mb_y</name></name><operator pos:start="411:65" pos:end="411:66">&gt;=</operator><literal type="number" pos:start="411:67" pos:end="411:67">0</literal></expr>)</condition><block type="pseudo" pos:start="413:29" pos:end="413:130"><block_content pos:start="413:29" pos:end="413:130">

                            <expr_stmt pos:start="413:29" pos:end="413:130"><expr pos:start="413:29" pos:end="413:129"><call pos:start="413:29" pos:end="413:129"><name pos:start="413:29" pos:end="413:43">ff_er_add_slice</name><argument_list pos:start="413:44" pos:end="413:129">(<argument pos:start="413:45" pos:end="413:46"><expr pos:start="413:45" pos:end="413:46"><name pos:start="413:45" pos:end="413:46">s2</name></expr></argument>, <argument pos:start="413:49" pos:end="413:63"><expr pos:start="413:49" pos:end="413:63"><name pos:start="413:49" pos:end="413:63"><name pos:start="413:49" pos:end="413:50">s2</name><operator pos:start="413:51" pos:end="413:52">-&gt;</operator><name pos:start="413:53" pos:end="413:63">resync_mb_x</name></name></expr></argument>, <argument pos:start="413:66" pos:end="413:80"><expr pos:start="413:66" pos:end="413:80"><name pos:start="413:66" pos:end="413:80"><name pos:start="413:66" pos:end="413:67">s2</name><operator pos:start="413:68" pos:end="413:69">-&gt;</operator><name pos:start="413:70" pos:end="413:80">resync_mb_y</name></name></expr></argument>, <argument pos:start="413:83" pos:end="413:90"><expr pos:start="413:83" pos:end="413:90"><name pos:start="413:83" pos:end="413:90"><name pos:start="413:83" pos:end="413:84">s2</name><operator pos:start="413:85" pos:end="413:86">-&gt;</operator><name pos:start="413:87" pos:end="413:90">mb_x</name></name></expr></argument>, <argument pos:start="413:93" pos:end="413:100"><expr pos:start="413:93" pos:end="413:100"><name pos:start="413:93" pos:end="413:100"><name pos:start="413:93" pos:end="413:94">s2</name><operator pos:start="413:95" pos:end="413:96">-&gt;</operator><name pos:start="413:97" pos:end="413:100">mb_y</name></name></expr></argument>, <argument pos:start="413:103" pos:end="413:128"><expr pos:start="413:103" pos:end="413:128"><name pos:start="413:103" pos:end="413:110">AC_ERROR</name><operator pos:start="413:111" pos:end="413:111">|</operator><name pos:start="413:112" pos:end="413:119">DC_ERROR</name><operator pos:start="413:120" pos:end="413:120">|</operator><name pos:start="413:121" pos:end="413:128">MV_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if><else pos:start="415:22" pos:end="419:21">else<block pos:start="415:26" pos:end="419:21">{<block_content pos:start="417:25" pos:end="417:122">

                        <expr_stmt pos:start="417:25" pos:end="417:122"><expr pos:start="417:25" pos:end="417:121"><call pos:start="417:25" pos:end="417:121"><name pos:start="417:25" pos:end="417:39">ff_er_add_slice</name><argument_list pos:start="417:40" pos:end="417:121">(<argument pos:start="417:41" pos:end="417:42"><expr pos:start="417:41" pos:end="417:42"><name pos:start="417:41" pos:end="417:42">s2</name></expr></argument>, <argument pos:start="417:45" pos:end="417:59"><expr pos:start="417:45" pos:end="417:59"><name pos:start="417:45" pos:end="417:59"><name pos:start="417:45" pos:end="417:46">s2</name><operator pos:start="417:47" pos:end="417:48">-&gt;</operator><name pos:start="417:49" pos:end="417:59">resync_mb_x</name></name></expr></argument>, <argument pos:start="417:62" pos:end="417:76"><expr pos:start="417:62" pos:end="417:76"><name pos:start="417:62" pos:end="417:76"><name pos:start="417:62" pos:end="417:63">s2</name><operator pos:start="417:64" pos:end="417:65">-&gt;</operator><name pos:start="417:66" pos:end="417:76">resync_mb_y</name></name></expr></argument>, <argument pos:start="417:79" pos:end="417:88"><expr pos:start="417:79" pos:end="417:88"><name pos:start="417:79" pos:end="417:86"><name pos:start="417:79" pos:end="417:80">s2</name><operator pos:start="417:81" pos:end="417:82">-&gt;</operator><name pos:start="417:83" pos:end="417:86">mb_x</name></name><operator pos:start="417:87" pos:end="417:87">-</operator><literal type="number" pos:start="417:88" pos:end="417:88">1</literal></expr></argument>, <argument pos:start="417:91" pos:end="417:98"><expr pos:start="417:91" pos:end="417:98"><name pos:start="417:91" pos:end="417:98"><name pos:start="417:91" pos:end="417:92">s2</name><operator pos:start="417:93" pos:end="417:94">-&gt;</operator><name pos:start="417:95" pos:end="417:98">mb_y</name></name></expr></argument>, <argument pos:start="417:101" pos:end="417:120"><expr pos:start="417:101" pos:end="417:120"><name pos:start="417:101" pos:end="417:106">AC_END</name><operator pos:start="417:107" pos:end="417:107">|</operator><name pos:start="417:108" pos:end="417:113">DC_END</name><operator pos:start="417:114" pos:end="417:114">|</operator><name pos:start="417:115" pos:end="417:120">MV_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="425:13" pos:end="425:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
