<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6038.c" pos:tabs="8"><function pos:start="1:1" pos:end="667:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="1:58">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:57"><decl pos:start="1:39" pos:end="1:57"><type pos:start="1:39" pos:end="1:57"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:57">default_to_scsi</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="667:1">{<block_content pos:start="5:5" pos:end="665:16">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">file</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:16">devname</name><index pos:start="9:17" pos:end="9:21">[<expr pos:start="9:18" pos:end="9:20"><literal type="number" pos:start="9:18" pos:end="9:20">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:24">mediastr</name> <init pos:start="13:26" pos:end="13:29">= <expr pos:start="13:28" pos:end="13:29"><literal type="string" pos:start="13:28" pos:end="13:29">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">BlockInterfaceType</name></type> <name pos:start="15:24" pos:end="15:27">type</name></decl>;</decl_stmt>

    <enum pos:start="17:5" pos:end="17:43">enum <block pos:start="17:10" pos:end="17:36">{ <decl pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:21">MEDIA_DISK</name></decl>, <decl pos:start="17:24" pos:end="17:34"><name pos:start="17:24" pos:end="17:34">MEDIA_CDROM</name></decl> }</block> <decl pos:start="17:38" pos:end="17:42"><name pos:start="17:38" pos:end="17:42">media</name></decl>;</enum>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">bus_id</name></decl>, <decl pos:start="19:17" pos:end="19:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:17" pos:end="19:23">unit_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:12"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:12">cyls</name></decl>, <decl pos:start="21:15" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:15" pos:end="21:19">heads</name></decl>, <decl pos:start="21:22" pos:end="21:25"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:22" pos:end="21:25">secs</name></decl>, <decl pos:start="21:28" pos:end="21:38"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:28" pos:end="21:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">BlockDriver</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:20">drv</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">max_devs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:14"><decl pos:start="27:5" pos:end="27:13"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:15"><decl pos:start="29:5" pos:end="29:14"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:10">ro</name> <init pos:start="29:12" pos:end="29:14">= <expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:18">bdrv_flags</name> <init pos:start="31:20" pos:end="31:22">= <expr pos:start="31:22" pos:end="31:22"><literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:38"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:21">on_read_error</name></decl>, <decl pos:start="33:24" pos:end="33:37"><type ref="prev" pos:start="33:5" pos:end="33:7"/><name pos:start="33:24" pos:end="33:37">on_write_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:21"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">DriveInfo</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:21"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:16">snapshot</name> <init pos:start="39:18" pos:end="39:20">= <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:12"><decl pos:start="41:5" pos:end="41:11"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:15">translation</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="61:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:24">(<expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:23">default_to_scsi</name></expr>)</condition> <block pos:start="49:26" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:50">

        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:12">type</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:22">IF_SCSI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:50"><expr pos:start="53:9" pos:end="53:49"><call pos:start="53:9" pos:end="53:49"><name pos:start="53:9" pos:end="53:15">pstrcpy</name><argument_list pos:start="53:16" pos:end="53:49">(<argument pos:start="53:17" pos:end="53:23"><expr pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:23">devname</name></expr></argument>, <argument pos:start="53:26" pos:end="53:40"><expr pos:start="53:26" pos:end="53:40"><sizeof pos:start="53:26" pos:end="53:40">sizeof<argument_list pos:start="53:32" pos:end="53:40">(<argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><name pos:start="53:33" pos:end="53:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:43" pos:end="53:48"><expr pos:start="53:43" pos:end="53:48"><literal type="string" pos:start="53:43" pos:end="53:48">"scsi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="61:5">else <block pos:start="55:12" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:49">

        <expr_stmt pos:start="57:9" pos:end="57:22"><expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:12">type</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:21">IF_IDE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:49"><expr pos:start="59:9" pos:end="59:48"><call pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:15">pstrcpy</name><argument_list pos:start="59:16" pos:end="59:48">(<argument pos:start="59:17" pos:end="59:23"><expr pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:23">devname</name></expr></argument>, <argument pos:start="59:26" pos:end="59:40"><expr pos:start="59:26" pos:end="59:40"><sizeof pos:start="59:26" pos:end="59:40">sizeof<argument_list pos:start="59:32" pos:end="59:40">(<argument pos:start="59:33" pos:end="59:39"><expr pos:start="59:33" pos:end="59:39"><name pos:start="59:33" pos:end="59:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="59:43" pos:end="59:47"><expr pos:start="59:43" pos:end="59:47"><literal type="string" pos:start="59:43" pos:end="59:47">"ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:23"><expr pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:9">media</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <name pos:start="63:13" pos:end="63:22">MEDIA_DISK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:28">/* extract parameters */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:50"><expr pos:start="69:5" pos:end="69:49"><name pos:start="69:5" pos:end="69:10">bus_id</name>  <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:49"><name pos:start="69:15" pos:end="69:33">qemu_opt_get_number</name><argument_list pos:start="69:34" pos:end="69:49">(<argument pos:start="69:35" pos:end="69:38"><expr pos:start="69:35" pos:end="69:38"><name pos:start="69:35" pos:end="69:38">opts</name></expr></argument>, <argument pos:start="69:41" pos:end="69:45"><expr pos:start="69:41" pos:end="69:45"><literal type="string" pos:start="69:41" pos:end="69:45">"bus"</literal></expr></argument>, <argument pos:start="69:48" pos:end="69:48"><expr pos:start="69:48" pos:end="69:48"><literal type="number" pos:start="69:48" pos:end="69:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:52"><expr pos:start="71:5" pos:end="71:51"><name pos:start="71:5" pos:end="71:11">unit_id</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:51"><name pos:start="71:15" pos:end="71:33">qemu_opt_get_number</name><argument_list pos:start="71:34" pos:end="71:51">(<argument pos:start="71:35" pos:end="71:38"><expr pos:start="71:35" pos:end="71:38"><name pos:start="71:35" pos:end="71:38">opts</name></expr></argument>, <argument pos:start="71:41" pos:end="71:46"><expr pos:start="71:41" pos:end="71:46"><literal type="string" pos:start="71:41" pos:end="71:46">"unit"</literal></expr></argument>, <argument pos:start="71:49" pos:end="71:50"><expr pos:start="71:49" pos:end="71:50"><operator pos:start="71:49" pos:end="71:49">-</operator><literal type="number" pos:start="71:50" pos:end="71:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:53"><expr pos:start="73:5" pos:end="73:52"><name pos:start="73:5" pos:end="73:9">index</name>   <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:52"><name pos:start="73:15" pos:end="73:33">qemu_opt_get_number</name><argument_list pos:start="73:34" pos:end="73:52">(<argument pos:start="73:35" pos:end="73:38"><expr pos:start="73:35" pos:end="73:38"><name pos:start="73:35" pos:end="73:38">opts</name></expr></argument>, <argument pos:start="73:41" pos:end="73:47"><expr pos:start="73:41" pos:end="73:47"><literal type="string" pos:start="73:41" pos:end="73:47">"index"</literal></expr></argument>, <argument pos:start="73:50" pos:end="73:51"><expr pos:start="73:50" pos:end="73:51"><operator pos:start="73:50" pos:end="73:50">-</operator><literal type="number" pos:start="73:51" pos:end="73:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:49"><expr pos:start="77:5" pos:end="77:48"><name pos:start="77:5" pos:end="77:8">cyls</name>  <operator pos:start="77:11" pos:end="77:11">=</operator> <call pos:start="77:13" pos:end="77:48"><name pos:start="77:13" pos:end="77:31">qemu_opt_get_number</name><argument_list pos:start="77:32" pos:end="77:48">(<argument pos:start="77:33" pos:end="77:36"><expr pos:start="77:33" pos:end="77:36"><name pos:start="77:33" pos:end="77:36">opts</name></expr></argument>, <argument pos:start="77:39" pos:end="77:44"><expr pos:start="77:39" pos:end="77:44"><literal type="string" pos:start="77:39" pos:end="77:44">"cyls"</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:47"><expr pos:start="77:47" pos:end="77:47"><literal type="number" pos:start="77:47" pos:end="77:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:50"><expr pos:start="79:5" pos:end="79:49"><name pos:start="79:5" pos:end="79:9">heads</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:49"><name pos:start="79:13" pos:end="79:31">qemu_opt_get_number</name><argument_list pos:start="79:32" pos:end="79:49">(<argument pos:start="79:33" pos:end="79:36"><expr pos:start="79:33" pos:end="79:36"><name pos:start="79:33" pos:end="79:36">opts</name></expr></argument>, <argument pos:start="79:39" pos:end="79:45"><expr pos:start="79:39" pos:end="79:45"><literal type="string" pos:start="79:39" pos:end="79:45">"heads"</literal></expr></argument>, <argument pos:start="79:48" pos:end="79:48"><expr pos:start="79:48" pos:end="79:48"><literal type="number" pos:start="79:48" pos:end="79:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:49"><expr pos:start="81:5" pos:end="81:48"><name pos:start="81:5" pos:end="81:8">secs</name>  <operator pos:start="81:11" pos:end="81:11">=</operator> <call pos:start="81:13" pos:end="81:48"><name pos:start="81:13" pos:end="81:31">qemu_opt_get_number</name><argument_list pos:start="81:32" pos:end="81:48">(<argument pos:start="81:33" pos:end="81:36"><expr pos:start="81:33" pos:end="81:36"><name pos:start="81:33" pos:end="81:36">opts</name></expr></argument>, <argument pos:start="81:39" pos:end="81:44"><expr pos:start="81:39" pos:end="81:44"><literal type="string" pos:start="81:39" pos:end="81:44">"secs"</literal></expr></argument>, <argument pos:start="81:47" pos:end="81:47"><expr pos:start="81:47" pos:end="81:47"><literal type="number" pos:start="81:47" pos:end="81:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:54"><expr pos:start="85:5" pos:end="85:53"><name pos:start="85:5" pos:end="85:12">snapshot</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:53"><name pos:start="85:16" pos:end="85:32">qemu_opt_get_bool</name><argument_list pos:start="85:33" pos:end="85:53">(<argument pos:start="85:34" pos:end="85:37"><expr pos:start="85:34" pos:end="85:37"><name pos:start="85:34" pos:end="85:37">opts</name></expr></argument>, <argument pos:start="85:40" pos:end="85:49"><expr pos:start="85:40" pos:end="85:49"><literal type="string" pos:start="85:40" pos:end="85:49">"snapshot"</literal></expr></argument>, <argument pos:start="85:52" pos:end="85:52"><expr pos:start="85:52" pos:end="85:52"><literal type="number" pos:start="85:52" pos:end="85:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:48"><expr pos:start="87:5" pos:end="87:47"><name pos:start="87:5" pos:end="87:6">ro</name> <operator pos:start="87:8" pos:end="87:8">=</operator> <call pos:start="87:10" pos:end="87:47"><name pos:start="87:10" pos:end="87:26">qemu_opt_get_bool</name><argument_list pos:start="87:27" pos:end="87:47">(<argument pos:start="87:28" pos:end="87:31"><expr pos:start="87:28" pos:end="87:31"><name pos:start="87:28" pos:end="87:31">opts</name></expr></argument>, <argument pos:start="87:34" pos:end="87:43"><expr pos:start="87:34" pos:end="87:43"><literal type="string" pos:start="87:34" pos:end="87:43">"readonly"</literal></expr></argument>, <argument pos:start="87:46" pos:end="87:46"><expr pos:start="87:46" pos:end="87:46"><literal type="number" pos:start="87:46" pos:end="87:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:38"><expr pos:start="91:5" pos:end="91:37"><name pos:start="91:5" pos:end="91:8">file</name> <operator pos:start="91:10" pos:end="91:10">=</operator> <call pos:start="91:12" pos:end="91:37"><name pos:start="91:12" pos:end="91:23">qemu_opt_get</name><argument_list pos:start="91:24" pos:end="91:37">(<argument pos:start="91:25" pos:end="91:28"><expr pos:start="91:25" pos:end="91:28"><name pos:start="91:25" pos:end="91:28">opts</name></expr></argument>, <argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><literal type="string" pos:start="91:31" pos:end="91:36">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:42"><expr pos:start="93:5" pos:end="93:41"><name pos:start="93:5" pos:end="93:10">serial</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="93:41"><name pos:start="93:14" pos:end="93:25">qemu_opt_get</name><argument_list pos:start="93:26" pos:end="93:41">(<argument pos:start="93:27" pos:end="93:30"><expr pos:start="93:27" pos:end="93:30"><name pos:start="93:27" pos:end="93:30">opts</name></expr></argument>, <argument pos:start="93:33" pos:end="93:40"><expr pos:start="93:33" pos:end="93:40"><literal type="string" pos:start="93:33" pos:end="93:40">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="113:5"><if pos:start="97:5" pos:end="113:5">if <condition pos:start="97:8" pos:end="97:49">(<expr pos:start="97:9" pos:end="97:48"><operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:12">buf</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:39"><name pos:start="97:16" pos:end="97:27">qemu_opt_get</name><argument_list pos:start="97:28" pos:end="97:39">(<argument pos:start="97:29" pos:end="97:32"><expr pos:start="97:29" pos:end="97:32"><name pos:start="97:29" pos:end="97:32">opts</name></expr></argument>, <argument pos:start="97:35" pos:end="97:38"><expr pos:start="97:35" pos:end="97:38"><literal type="string" pos:start="97:35" pos:end="97:38">"if"</literal></expr></argument>)</argument_list></call><operator pos:start="97:40" pos:end="97:40">)</operator> <operator pos:start="97:42" pos:end="97:43">!=</operator> <name pos:start="97:45" pos:end="97:48">NULL</name></expr>)</condition> <block pos:start="97:51" pos:end="113:5">{<block_content pos:start="99:9" pos:end="111:9">

        <expr_stmt pos:start="99:9" pos:end="99:47"><expr pos:start="99:9" pos:end="99:46"><call pos:start="99:9" pos:end="99:46"><name pos:start="99:9" pos:end="99:15">pstrcpy</name><argument_list pos:start="99:16" pos:end="99:46">(<argument pos:start="99:17" pos:end="99:23"><expr pos:start="99:17" pos:end="99:23"><name pos:start="99:17" pos:end="99:23">devname</name></expr></argument>, <argument pos:start="99:26" pos:end="99:40"><expr pos:start="99:26" pos:end="99:40"><sizeof pos:start="99:26" pos:end="99:40">sizeof<argument_list pos:start="99:32" pos:end="99:40">(<argument pos:start="99:33" pos:end="99:39"><expr pos:start="99:33" pos:end="99:39"><name pos:start="99:33" pos:end="99:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="99:43" pos:end="99:45"><expr pos:start="99:43" pos:end="99:45"><name pos:start="99:43" pos:end="99:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="101:9" pos:end="103:13">for <control pos:start="101:13" pos:end="101:77">(<init pos:start="101:14" pos:end="101:22"><expr pos:start="101:14" pos:end="101:21"><name pos:start="101:14" pos:end="101:17">type</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr>;</init> <condition pos:start="101:24" pos:end="101:69"><expr pos:start="101:24" pos:end="101:68"><name pos:start="101:24" pos:end="101:27">type</name> <operator pos:start="101:29" pos:end="101:29">&lt;</operator> <name pos:start="101:31" pos:end="101:38">IF_COUNT</name> <operator pos:start="101:40" pos:end="101:41">&amp;&amp;</operator> <call pos:start="101:43" pos:end="101:68"><name pos:start="101:43" pos:end="101:48">strcmp</name><argument_list pos:start="101:49" pos:end="101:68">(<argument pos:start="101:50" pos:end="101:52"><expr pos:start="101:50" pos:end="101:52"><name pos:start="101:50" pos:end="101:52">buf</name></expr></argument>, <argument pos:start="101:55" pos:end="101:67"><expr pos:start="101:55" pos:end="101:67"><name pos:start="101:55" pos:end="101:67"><name pos:start="101:55" pos:end="101:61">if_name</name><index pos:start="101:62" pos:end="101:67">[<expr pos:start="101:63" pos:end="101:66"><name pos:start="101:63" pos:end="101:66">type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="101:71" pos:end="101:76"><expr pos:start="101:71" pos:end="101:76"><name pos:start="101:71" pos:end="101:74">type</name><operator pos:start="101:75" pos:end="101:76">++</operator></expr></incr>)</control><block type="pseudo" pos:start="103:13" pos:end="103:13"><block_content pos:start="103:13" pos:end="103:13">

            <empty_stmt pos:start="103:13" pos:end="103:13">;</empty_stmt></block_content></block></for>

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:29">(<expr pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:16">type</name> <operator pos:start="105:18" pos:end="105:19">==</operator> <name pos:start="105:21" pos:end="105:28">IF_COUNT</name></expr>)</condition> <block pos:start="105:31" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:24">

            <expr_stmt pos:start="107:13" pos:end="107:59"><expr pos:start="107:13" pos:end="107:58"><call pos:start="107:13" pos:end="107:58"><name pos:start="107:13" pos:end="107:24">error_report</name><argument_list pos:start="107:25" pos:end="107:58">(<argument pos:start="107:26" pos:end="107:52"><expr pos:start="107:26" pos:end="107:52"><literal type="string" pos:start="107:26" pos:end="107:52">"unsupported bus type '%s'"</literal></expr></argument>, <argument pos:start="107:55" pos:end="107:57"><expr pos:start="107:55" pos:end="107:57"><name pos:start="107:55" pos:end="107:57">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:24">return <expr pos:start="109:20" pos:end="109:23"><name pos:start="109:20" pos:end="109:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:33"><expr pos:start="115:5" pos:end="115:32"><name pos:start="115:5" pos:end="115:12">max_devs</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <name pos:start="115:16" pos:end="115:32"><name pos:start="115:16" pos:end="115:26">if_max_devs</name><index pos:start="115:27" pos:end="115:32">[<expr pos:start="115:28" pos:end="115:31"><name pos:start="115:28" pos:end="115:31">type</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="145:5"><if pos:start="119:5" pos:end="145:5">if <condition pos:start="119:8" pos:end="119:30">(<expr pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:12">cyls</name> <operator pos:start="119:14" pos:end="119:15">||</operator> <name pos:start="119:17" pos:end="119:21">heads</name> <operator pos:start="119:23" pos:end="119:24">||</operator> <name pos:start="119:26" pos:end="119:29">secs</name></expr>)</condition> <block pos:start="119:32" pos:end="145:5">{<block_content pos:start="121:9" pos:end="143:9">

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:57">(<expr pos:start="121:13" pos:end="121:56"><name pos:start="121:13" pos:end="121:16">cyls</name> <operator pos:start="121:18" pos:end="121:18">&lt;</operator> <literal type="number" pos:start="121:20" pos:end="121:20">1</literal> <operator pos:start="121:22" pos:end="121:23">||</operator> <operator pos:start="121:25" pos:end="121:25">(</operator><name pos:start="121:26" pos:end="121:29">type</name> <operator pos:start="121:31" pos:end="121:32">==</operator> <name pos:start="121:34" pos:end="121:39">IF_IDE</name> <operator pos:start="121:41" pos:end="121:42">&amp;&amp;</operator> <name pos:start="121:44" pos:end="121:47">cyls</name> <operator pos:start="121:49" pos:end="121:49">&gt;</operator> <literal type="number" pos:start="121:51" pos:end="121:55">16383</literal><operator pos:start="121:56" pos:end="121:56">)</operator></expr>)</condition> <block pos:start="121:59" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:24">

            <expr_stmt pos:start="123:13" pos:end="123:57"><expr pos:start="123:13" pos:end="123:56"><call pos:start="123:13" pos:end="123:56"><name pos:start="123:13" pos:end="123:24">error_report</name><argument_list pos:start="123:25" pos:end="123:56">(<argument pos:start="123:26" pos:end="123:55"><expr pos:start="123:26" pos:end="123:55"><literal type="string" pos:start="123:26" pos:end="123:55">"invalid physical cyls number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="125:13" pos:end="125:24">return <expr pos:start="125:20" pos:end="125:23"><name pos:start="125:20" pos:end="125:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:56">(<expr pos:start="129:13" pos:end="129:55"><name pos:start="129:13" pos:end="129:17">heads</name> <operator pos:start="129:19" pos:end="129:19">&lt;</operator> <literal type="number" pos:start="129:21" pos:end="129:21">1</literal> <operator pos:start="129:23" pos:end="129:24">||</operator> <operator pos:start="129:26" pos:end="129:26">(</operator><name pos:start="129:27" pos:end="129:30">type</name> <operator pos:start="129:32" pos:end="129:33">==</operator> <name pos:start="129:35" pos:end="129:40">IF_IDE</name> <operator pos:start="129:42" pos:end="129:43">&amp;&amp;</operator> <name pos:start="129:45" pos:end="129:49">heads</name> <operator pos:start="129:51" pos:end="129:51">&gt;</operator> <literal type="number" pos:start="129:53" pos:end="129:54">16</literal><operator pos:start="129:55" pos:end="129:55">)</operator></expr>)</condition> <block pos:start="129:58" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:24">

            <expr_stmt pos:start="131:13" pos:end="131:58"><expr pos:start="131:13" pos:end="131:57"><call pos:start="131:13" pos:end="131:57"><name pos:start="131:13" pos:end="131:24">error_report</name><argument_list pos:start="131:25" pos:end="131:57">(<argument pos:start="131:26" pos:end="131:56"><expr pos:start="131:26" pos:end="131:56"><literal type="string" pos:start="131:26" pos:end="131:56">"invalid physical heads number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="133:13" pos:end="133:24">return <expr pos:start="133:20" pos:end="133:23"><name pos:start="133:20" pos:end="133:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="137:9" pos:end="143:9"><if pos:start="137:9" pos:end="143:9">if <condition pos:start="137:12" pos:end="137:54">(<expr pos:start="137:13" pos:end="137:53"><name pos:start="137:13" pos:end="137:16">secs</name> <operator pos:start="137:18" pos:end="137:18">&lt;</operator> <literal type="number" pos:start="137:20" pos:end="137:20">1</literal> <operator pos:start="137:22" pos:end="137:23">||</operator> <operator pos:start="137:25" pos:end="137:25">(</operator><name pos:start="137:26" pos:end="137:29">type</name> <operator pos:start="137:31" pos:end="137:32">==</operator> <name pos:start="137:34" pos:end="137:39">IF_IDE</name> <operator pos:start="137:41" pos:end="137:42">&amp;&amp;</operator> <name pos:start="137:44" pos:end="137:47">secs</name> <operator pos:start="137:49" pos:end="137:49">&gt;</operator> <literal type="number" pos:start="137:51" pos:end="137:52">63</literal><operator pos:start="137:53" pos:end="137:53">)</operator></expr>)</condition> <block pos:start="137:56" pos:end="143:9">{<block_content pos:start="139:13" pos:end="141:24">

            <expr_stmt pos:start="139:13" pos:end="139:57"><expr pos:start="139:13" pos:end="139:56"><call pos:start="139:13" pos:end="139:56"><name pos:start="139:13" pos:end="139:24">error_report</name><argument_list pos:start="139:25" pos:end="139:56">(<argument pos:start="139:26" pos:end="139:55"><expr pos:start="139:26" pos:end="139:55"><literal type="string" pos:start="139:26" pos:end="139:55">"invalid physical secs number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="141:13" pos:end="141:24">return <expr pos:start="141:20" pos:end="141:23"><name pos:start="141:20" pos:end="141:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="181:5"><if pos:start="149:5" pos:end="181:5">if <condition pos:start="149:8" pos:end="149:52">(<expr pos:start="149:9" pos:end="149:51"><operator pos:start="149:9" pos:end="149:9">(</operator><name pos:start="149:10" pos:end="149:12">buf</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:42"><name pos:start="149:16" pos:end="149:27">qemu_opt_get</name><argument_list pos:start="149:28" pos:end="149:42">(<argument pos:start="149:29" pos:end="149:32"><expr pos:start="149:29" pos:end="149:32"><name pos:start="149:29" pos:end="149:32">opts</name></expr></argument>, <argument pos:start="149:35" pos:end="149:41"><expr pos:start="149:35" pos:end="149:41"><literal type="string" pos:start="149:35" pos:end="149:41">"trans"</literal></expr></argument>)</argument_list></call><operator pos:start="149:43" pos:end="149:43">)</operator> <operator pos:start="149:45" pos:end="149:46">!=</operator> <name pos:start="149:48" pos:end="149:51">NULL</name></expr>)</condition> <block pos:start="149:54" pos:end="181:5">{<block_content pos:start="151:9" pos:end="179:9">

        <if_stmt pos:start="151:9" pos:end="159:9"><if pos:start="151:9" pos:end="159:9">if <condition pos:start="151:12" pos:end="151:18">(<expr pos:start="151:13" pos:end="151:17"><operator pos:start="151:13" pos:end="151:13">!</operator><name pos:start="151:14" pos:end="151:17">cyls</name></expr>)</condition> <block pos:start="151:20" pos:end="159:9">{<block_content pos:start="153:13" pos:end="157:24">

            <expr_stmt pos:start="153:13" pos:end="155:30"><expr pos:start="153:13" pos:end="155:29"><call pos:start="153:13" pos:end="155:29"><name pos:start="153:13" pos:end="153:24">error_report</name><argument_list pos:start="153:25" pos:end="155:29">(<argument pos:start="153:26" pos:end="153:75"><expr pos:start="153:26" pos:end="153:75"><literal type="string" pos:start="153:26" pos:end="153:75">"'%s' trans must be used with cyls,heads and secs"</literal></expr></argument>,

                         <argument pos:start="155:26" pos:end="155:28"><expr pos:start="155:26" pos:end="155:28"><name pos:start="155:26" pos:end="155:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="157:13" pos:end="157:24">return <expr pos:start="157:20" pos:end="157:23"><name pos:start="157:20" pos:end="157:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="161:9" pos:end="179:9"><if pos:start="161:9" pos:end="163:52">if <condition pos:start="161:12" pos:end="161:33">(<expr pos:start="161:13" pos:end="161:32"><operator pos:start="161:13" pos:end="161:13">!</operator><call pos:start="161:14" pos:end="161:32"><name pos:start="161:14" pos:end="161:19">strcmp</name><argument_list pos:start="161:20" pos:end="161:32">(<argument pos:start="161:21" pos:end="161:23"><expr pos:start="161:21" pos:end="161:23"><name pos:start="161:21" pos:end="161:23">buf</name></expr></argument>, <argument pos:start="161:26" pos:end="161:31"><expr pos:start="161:26" pos:end="161:31"><literal type="string" pos:start="161:26" pos:end="161:31">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:52"><block_content pos:start="163:13" pos:end="163:52">

            <expr_stmt pos:start="163:13" pos:end="163:52"><expr pos:start="163:13" pos:end="163:51"><name pos:start="163:13" pos:end="163:23">translation</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <name pos:start="163:27" pos:end="163:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="165:9" pos:end="167:51">else if <condition pos:start="165:17" pos:end="165:37">(<expr pos:start="165:18" pos:end="165:36"><operator pos:start="165:18" pos:end="165:18">!</operator><call pos:start="165:19" pos:end="165:36"><name pos:start="165:19" pos:end="165:24">strcmp</name><argument_list pos:start="165:25" pos:end="165:36">(<argument pos:start="165:26" pos:end="165:28"><expr pos:start="165:26" pos:end="165:28"><name pos:start="165:26" pos:end="165:28">buf</name></expr></argument>, <argument pos:start="165:31" pos:end="165:35"><expr pos:start="165:31" pos:end="165:35"><literal type="string" pos:start="165:31" pos:end="165:35">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:51"><block_content pos:start="167:13" pos:end="167:51">

            <expr_stmt pos:start="167:13" pos:end="167:51"><expr pos:start="167:13" pos:end="167:50"><name pos:start="167:13" pos:end="167:23">translation</name> <operator pos:start="167:25" pos:end="167:25">=</operator> <name pos:start="167:27" pos:end="167:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="169:9" pos:end="171:52">else if <condition pos:start="169:17" pos:end="169:38">(<expr pos:start="169:18" pos:end="169:37"><operator pos:start="169:18" pos:end="169:18">!</operator><call pos:start="169:19" pos:end="169:37"><name pos:start="169:19" pos:end="169:24">strcmp</name><argument_list pos:start="169:25" pos:end="169:37">(<argument pos:start="169:26" pos:end="169:28"><expr pos:start="169:26" pos:end="169:28"><name pos:start="169:26" pos:end="169:28">buf</name></expr></argument>, <argument pos:start="169:31" pos:end="169:36"><expr pos:start="169:31" pos:end="169:36"><literal type="string" pos:start="169:31" pos:end="169:36">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:52"><block_content pos:start="171:13" pos:end="171:52">

            <expr_stmt pos:start="171:13" pos:end="171:52"><expr pos:start="171:13" pos:end="171:51"><name pos:start="171:13" pos:end="171:23">translation</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <name pos:start="171:27" pos:end="171:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="173:9" pos:end="179:9">else <block pos:start="173:14" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:24">

            <expr_stmt pos:start="175:13" pos:end="175:63"><expr pos:start="175:13" pos:end="175:62"><call pos:start="175:13" pos:end="175:62"><name pos:start="175:13" pos:end="175:24">error_report</name><argument_list pos:start="175:25" pos:end="175:62">(<argument pos:start="175:26" pos:end="175:56"><expr pos:start="175:26" pos:end="175:56"><literal type="string" pos:start="175:26" pos:end="175:56">"'%s' invalid translation type"</literal></expr></argument>, <argument pos:start="175:59" pos:end="175:61"><expr pos:start="175:59" pos:end="175:61"><name pos:start="175:59" pos:end="175:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="177:13" pos:end="177:24">return <expr pos:start="177:20" pos:end="177:23"><name pos:start="177:20" pos:end="177:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="185:5" pos:end="211:5"><if pos:start="185:5" pos:end="211:5">if <condition pos:start="185:8" pos:end="185:52">(<expr pos:start="185:9" pos:end="185:51"><operator pos:start="185:9" pos:end="185:9">(</operator><name pos:start="185:10" pos:end="185:12">buf</name> <operator pos:start="185:14" pos:end="185:14">=</operator> <call pos:start="185:16" pos:end="185:42"><name pos:start="185:16" pos:end="185:27">qemu_opt_get</name><argument_list pos:start="185:28" pos:end="185:42">(<argument pos:start="185:29" pos:end="185:32"><expr pos:start="185:29" pos:end="185:32"><name pos:start="185:29" pos:end="185:32">opts</name></expr></argument>, <argument pos:start="185:35" pos:end="185:41"><expr pos:start="185:35" pos:end="185:41"><literal type="string" pos:start="185:35" pos:end="185:41">"media"</literal></expr></argument>)</argument_list></call><operator pos:start="185:43" pos:end="185:43">)</operator> <operator pos:start="185:45" pos:end="185:46">!=</operator> <name pos:start="185:48" pos:end="185:51">NULL</name></expr>)</condition> <block pos:start="185:54" pos:end="211:5">{<block_content pos:start="187:9" pos:end="209:9">

        <if_stmt pos:start="187:9" pos:end="209:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:33">(<expr pos:start="187:13" pos:end="187:32"><operator pos:start="187:13" pos:end="187:13">!</operator><call pos:start="187:14" pos:end="187:32"><name pos:start="187:14" pos:end="187:19">strcmp</name><argument_list pos:start="187:20" pos:end="187:32">(<argument pos:start="187:21" pos:end="187:23"><expr pos:start="187:21" pos:end="187:23"><name pos:start="187:21" pos:end="187:23">buf</name></expr></argument>, <argument pos:start="187:26" pos:end="187:31"><expr pos:start="187:26" pos:end="187:31"><literal type="string" pos:start="187:26" pos:end="187:31">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:35" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:31">

	    <expr_stmt pos:start="189:13" pos:end="189:31"><expr pos:start="189:13" pos:end="189:30"><name pos:start="189:13" pos:end="189:17">media</name> <operator pos:start="189:19" pos:end="189:19">=</operator> <name pos:start="189:21" pos:end="189:30">MEDIA_DISK</name></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="191:11" pos:end="203:9">else if <condition pos:start="191:19" pos:end="191:41">(<expr pos:start="191:20" pos:end="191:40"><operator pos:start="191:20" pos:end="191:20">!</operator><call pos:start="191:21" pos:end="191:40"><name pos:start="191:21" pos:end="191:26">strcmp</name><argument_list pos:start="191:27" pos:end="191:40">(<argument pos:start="191:28" pos:end="191:30"><expr pos:start="191:28" pos:end="191:30"><name pos:start="191:28" pos:end="191:30">buf</name></expr></argument>, <argument pos:start="191:33" pos:end="191:39"><expr pos:start="191:33" pos:end="191:39"><literal type="string" pos:start="191:33" pos:end="191:39">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:43" pos:end="203:9">{<block_content pos:start="193:13" pos:end="201:32">

            <if_stmt pos:start="193:13" pos:end="199:13"><if pos:start="193:13" pos:end="199:13">if <condition pos:start="193:16" pos:end="193:38">(<expr pos:start="193:17" pos:end="193:37"><name pos:start="193:17" pos:end="193:20">cyls</name> <operator pos:start="193:22" pos:end="193:23">||</operator> <name pos:start="193:25" pos:end="193:28">secs</name> <operator pos:start="193:30" pos:end="193:31">||</operator> <name pos:start="193:33" pos:end="193:37">heads</name></expr>)</condition> <block pos:start="193:40" pos:end="199:13">{<block_content pos:start="195:17" pos:end="197:28">

                <expr_stmt pos:start="195:17" pos:end="195:70"><expr pos:start="195:17" pos:end="195:69"><call pos:start="195:17" pos:end="195:69"><name pos:start="195:17" pos:end="195:28">error_report</name><argument_list pos:start="195:29" pos:end="195:69">(<argument pos:start="195:30" pos:end="195:63"><expr pos:start="195:30" pos:end="195:63"><literal type="string" pos:start="195:30" pos:end="195:63">"'%s' invalid physical CHS format"</literal></expr></argument>, <argument pos:start="195:66" pos:end="195:68"><expr pos:start="195:66" pos:end="195:68"><name pos:start="195:66" pos:end="195:68">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <return pos:start="197:17" pos:end="197:28">return <expr pos:start="197:24" pos:end="197:27"><name pos:start="197:24" pos:end="197:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="201:13" pos:end="201:32"><expr pos:start="201:13" pos:end="201:31"><name pos:start="201:13" pos:end="201:17">media</name> <operator pos:start="201:19" pos:end="201:19">=</operator> <name pos:start="201:21" pos:end="201:31">MEDIA_CDROM</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="203:11" pos:end="209:9">else <block pos:start="203:16" pos:end="209:9">{<block_content pos:start="205:13" pos:end="207:24">

	    <expr_stmt pos:start="205:13" pos:end="205:52"><expr pos:start="205:13" pos:end="205:51"><call pos:start="205:13" pos:end="205:51"><name pos:start="205:13" pos:end="205:24">error_report</name><argument_list pos:start="205:25" pos:end="205:51">(<argument pos:start="205:26" pos:end="205:45"><expr pos:start="205:26" pos:end="205:45"><literal type="string" pos:start="205:26" pos:end="205:45">"'%s' invalid media"</literal></expr></argument>, <argument pos:start="205:48" pos:end="205:50"><expr pos:start="205:48" pos:end="205:50"><name pos:start="205:48" pos:end="205:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="207:13" pos:end="207:24">return <expr pos:start="207:20" pos:end="207:23"><name pos:start="207:20" pos:end="207:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="215:5" pos:end="248:0"><if pos:start="215:5" pos:end="248:0">if <condition pos:start="215:8" pos:end="215:52">(<expr pos:start="215:9" pos:end="215:51"><operator pos:start="215:9" pos:end="215:9">(</operator><name pos:start="215:10" pos:end="215:12">buf</name> <operator pos:start="215:14" pos:end="215:14">=</operator> <call pos:start="215:16" pos:end="215:42"><name pos:start="215:16" pos:end="215:27">qemu_opt_get</name><argument_list pos:start="215:28" pos:end="215:42">(<argument pos:start="215:29" pos:end="215:32"><expr pos:start="215:29" pos:end="215:32"><name pos:start="215:29" pos:end="215:32">opts</name></expr></argument>, <argument pos:start="215:35" pos:end="215:41"><expr pos:start="215:35" pos:end="215:41"><literal type="string" pos:start="215:35" pos:end="215:41">"cache"</literal></expr></argument>)</argument_list></call><operator pos:start="215:43" pos:end="215:43">)</operator> <operator pos:start="215:45" pos:end="215:46">!=</operator> <name pos:start="215:48" pos:end="215:51">NULL</name></expr>)</condition> <block pos:start="215:54" pos:end="248:0">{<block_content pos:start="217:9" pos:end="241:9">

        <if_stmt pos:start="217:9" pos:end="241:9"><if pos:start="217:9" pos:end="221:9">if <condition pos:start="217:12" pos:end="217:56">(<expr pos:start="217:13" pos:end="217:55"><operator pos:start="217:13" pos:end="217:13">!</operator><call pos:start="217:14" pos:end="217:31"><name pos:start="217:14" pos:end="217:19">strcmp</name><argument_list pos:start="217:20" pos:end="217:31">(<argument pos:start="217:21" pos:end="217:23"><expr pos:start="217:21" pos:end="217:23"><name pos:start="217:21" pos:end="217:23">buf</name></expr></argument>, <argument pos:start="217:26" pos:end="217:30"><expr pos:start="217:26" pos:end="217:30"><literal type="string" pos:start="217:26" pos:end="217:30">"off"</literal></expr></argument>)</argument_list></call> <operator pos:start="217:33" pos:end="217:34">||</operator> <operator pos:start="217:36" pos:end="217:36">!</operator><call pos:start="217:37" pos:end="217:55"><name pos:start="217:37" pos:end="217:42">strcmp</name><argument_list pos:start="217:43" pos:end="217:55">(<argument pos:start="217:44" pos:end="217:46"><expr pos:start="217:44" pos:end="217:46"><name pos:start="217:44" pos:end="217:46">buf</name></expr></argument>, <argument pos:start="217:49" pos:end="217:54"><expr pos:start="217:49" pos:end="217:54"><literal type="string" pos:start="217:49" pos:end="217:54">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:58" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:41">

            <expr_stmt pos:start="219:13" pos:end="219:41"><expr pos:start="219:13" pos:end="219:40"><name pos:start="219:13" pos:end="219:22">bdrv_flags</name> <operator pos:start="219:24" pos:end="219:25">|=</operator> <name pos:start="219:27" pos:end="219:40">BDRV_O_NOCACHE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="221:11" pos:end="225:9">else if <condition pos:start="221:19" pos:end="221:45">(<expr pos:start="221:20" pos:end="221:44"><operator pos:start="221:20" pos:end="221:20">!</operator><call pos:start="221:21" pos:end="221:44"><name pos:start="221:21" pos:end="221:26">strcmp</name><argument_list pos:start="221:27" pos:end="221:44">(<argument pos:start="221:28" pos:end="221:30"><expr pos:start="221:28" pos:end="221:30"><name pos:start="221:28" pos:end="221:30">buf</name></expr></argument>, <argument pos:start="221:33" pos:end="221:43"><expr pos:start="221:33" pos:end="221:43"><literal type="string" pos:start="221:33" pos:end="221:43">"writeback"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:47" pos:end="225:9">{<block_content pos:start="223:13" pos:end="223:42">

            <expr_stmt pos:start="223:13" pos:end="223:42"><expr pos:start="223:13" pos:end="223:41"><name pos:start="223:13" pos:end="223:22">bdrv_flags</name> <operator pos:start="223:24" pos:end="223:25">|=</operator> <name pos:start="223:27" pos:end="223:41">BDRV_O_CACHE_WB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="225:11" pos:end="231:9">else if <condition pos:start="225:19" pos:end="225:42">(<expr pos:start="225:20" pos:end="225:41"><operator pos:start="225:20" pos:end="225:20">!</operator><call pos:start="225:21" pos:end="225:41"><name pos:start="225:21" pos:end="225:26">strcmp</name><argument_list pos:start="225:27" pos:end="225:41">(<argument pos:start="225:28" pos:end="225:30"><expr pos:start="225:28" pos:end="225:30"><name pos:start="225:28" pos:end="225:30">buf</name></expr></argument>, <argument pos:start="225:33" pos:end="225:40"><expr pos:start="225:33" pos:end="225:40"><literal type="string" pos:start="225:33" pos:end="225:40">"unsafe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:44" pos:end="231:9">{<block_content pos:start="227:13" pos:end="229:42">

            <expr_stmt pos:start="227:13" pos:end="227:42"><expr pos:start="227:13" pos:end="227:41"><name pos:start="227:13" pos:end="227:22">bdrv_flags</name> <operator pos:start="227:24" pos:end="227:25">|=</operator> <name pos:start="227:27" pos:end="227:41">BDRV_O_CACHE_WB</name></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:42"><expr pos:start="229:13" pos:end="229:41"><name pos:start="229:13" pos:end="229:22">bdrv_flags</name> <operator pos:start="229:24" pos:end="229:25">|=</operator> <name pos:start="229:27" pos:end="229:41">BDRV_O_NO_FLUSH</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="231:11" pos:end="235:9">else if <condition pos:start="231:19" pos:end="231:48">(<expr pos:start="231:20" pos:end="231:47"><operator pos:start="231:20" pos:end="231:20">!</operator><call pos:start="231:21" pos:end="231:47"><name pos:start="231:21" pos:end="231:26">strcmp</name><argument_list pos:start="231:27" pos:end="231:47">(<argument pos:start="231:28" pos:end="231:30"><expr pos:start="231:28" pos:end="231:30"><name pos:start="231:28" pos:end="231:30">buf</name></expr></argument>, <argument pos:start="231:33" pos:end="231:46"><expr pos:start="231:33" pos:end="231:46"><literal type="string" pos:start="231:33" pos:end="231:46">"writethrough"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="231:50" pos:end="235:9">{<block_content>

            <comment type="block" pos:start="233:13" pos:end="233:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="235:11" pos:end="241:9">else <block pos:start="235:16" pos:end="241:9">{<block_content pos:start="237:12" pos:end="239:23">

           <expr_stmt pos:start="237:12" pos:end="237:48"><expr pos:start="237:12" pos:end="237:47"><call pos:start="237:12" pos:end="237:47"><name pos:start="237:12" pos:end="237:23">error_report</name><argument_list pos:start="237:24" pos:end="237:47">(<argument pos:start="237:25" pos:end="237:46"><expr pos:start="237:25" pos:end="237:46"><literal type="string" pos:start="237:25" pos:end="237:46">"invalid cache option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="239:12" pos:end="239:23">return <expr pos:start="239:19" pos:end="239:22"><name pos:start="239:19" pos:end="239:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="247:1" pos:end="247:23">#<cpp:directive pos:start="247:2" pos:end="247:6">ifdef</cpp:directive> <name pos:start="247:8" pos:end="247:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="249:5" pos:end="270:0"><if pos:start="249:5" pos:end="270:0">if <condition pos:start="249:8" pos:end="249:50">(<expr pos:start="249:9" pos:end="249:49"><operator pos:start="249:9" pos:end="249:9">(</operator><name pos:start="249:10" pos:end="249:12">buf</name> <operator pos:start="249:14" pos:end="249:14">=</operator> <call pos:start="249:16" pos:end="249:40"><name pos:start="249:16" pos:end="249:27">qemu_opt_get</name><argument_list pos:start="249:28" pos:end="249:40">(<argument pos:start="249:29" pos:end="249:32"><expr pos:start="249:29" pos:end="249:32"><name pos:start="249:29" pos:end="249:32">opts</name></expr></argument>, <argument pos:start="249:35" pos:end="249:39"><expr pos:start="249:35" pos:end="249:39"><literal type="string" pos:start="249:35" pos:end="249:39">"aio"</literal></expr></argument>)</argument_list></call><operator pos:start="249:41" pos:end="249:41">)</operator> <operator pos:start="249:43" pos:end="249:44">!=</operator> <name pos:start="249:46" pos:end="249:49">NULL</name></expr>)</condition> <block pos:start="249:52" pos:end="270:0">{<block_content pos:start="251:9" pos:end="265:9">

        <if_stmt pos:start="251:9" pos:end="265:9"><if pos:start="251:9" pos:end="255:9">if <condition pos:start="251:12" pos:end="251:35">(<expr pos:start="251:13" pos:end="251:34"><operator pos:start="251:13" pos:end="251:13">!</operator><call pos:start="251:14" pos:end="251:34"><name pos:start="251:14" pos:end="251:19">strcmp</name><argument_list pos:start="251:20" pos:end="251:34">(<argument pos:start="251:21" pos:end="251:23"><expr pos:start="251:21" pos:end="251:23"><name pos:start="251:21" pos:end="251:23">buf</name></expr></argument>, <argument pos:start="251:26" pos:end="251:33"><expr pos:start="251:26" pos:end="251:33"><literal type="string" pos:start="251:26" pos:end="251:33">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="251:37" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:44">

            <expr_stmt pos:start="253:13" pos:end="253:44"><expr pos:start="253:13" pos:end="253:43"><name pos:start="253:13" pos:end="253:22">bdrv_flags</name> <operator pos:start="253:24" pos:end="253:25">|=</operator> <name pos:start="253:27" pos:end="253:43">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="255:11" pos:end="259:9">else if <condition pos:start="255:19" pos:end="255:43">(<expr pos:start="255:20" pos:end="255:42"><operator pos:start="255:20" pos:end="255:20">!</operator><call pos:start="255:21" pos:end="255:42"><name pos:start="255:21" pos:end="255:26">strcmp</name><argument_list pos:start="255:27" pos:end="255:42">(<argument pos:start="255:28" pos:end="255:30"><expr pos:start="255:28" pos:end="255:30"><name pos:start="255:28" pos:end="255:30">buf</name></expr></argument>, <argument pos:start="255:33" pos:end="255:41"><expr pos:start="255:33" pos:end="255:41"><literal type="string" pos:start="255:33" pos:end="255:41">"threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="255:45" pos:end="259:9">{<block_content>

            <comment type="block" pos:start="257:13" pos:end="257:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="259:11" pos:end="265:9">else <block pos:start="259:16" pos:end="265:9">{<block_content pos:start="261:12" pos:end="263:23">

           <expr_stmt pos:start="261:12" pos:end="261:46"><expr pos:start="261:12" pos:end="261:45"><call pos:start="261:12" pos:end="261:45"><name pos:start="261:12" pos:end="261:23">error_report</name><argument_list pos:start="261:24" pos:end="261:45">(<argument pos:start="261:25" pos:end="261:44"><expr pos:start="261:25" pos:end="261:44"><literal type="string" pos:start="261:25" pos:end="261:44">"invalid aio option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="263:12" pos:end="263:23">return <expr pos:start="263:19" pos:end="263:22"><name pos:start="263:19" pos:end="263:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="273:5" pos:end="297:5"><if pos:start="273:5" pos:end="297:5">if <condition pos:start="273:8" pos:end="273:53">(<expr pos:start="273:9" pos:end="273:52"><operator pos:start="273:9" pos:end="273:9">(</operator><name pos:start="273:10" pos:end="273:12">buf</name> <operator pos:start="273:14" pos:end="273:14">=</operator> <call pos:start="273:16" pos:end="273:43"><name pos:start="273:16" pos:end="273:27">qemu_opt_get</name><argument_list pos:start="273:28" pos:end="273:43">(<argument pos:start="273:29" pos:end="273:32"><expr pos:start="273:29" pos:end="273:32"><name pos:start="273:29" pos:end="273:32">opts</name></expr></argument>, <argument pos:start="273:35" pos:end="273:42"><expr pos:start="273:35" pos:end="273:42"><literal type="string" pos:start="273:35" pos:end="273:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="273:44" pos:end="273:44">)</operator> <operator pos:start="273:46" pos:end="273:47">!=</operator> <name pos:start="273:49" pos:end="273:52">NULL</name></expr>)</condition> <block pos:start="273:55" pos:end="297:5">{<block_content pos:start="275:8" pos:end="295:9">

       <if_stmt pos:start="275:8" pos:end="285:9"><if pos:start="275:8" pos:end="285:9">if <condition pos:start="275:11" pos:end="275:33">(<expr pos:start="275:12" pos:end="275:32"><call pos:start="275:12" pos:end="275:27"><name pos:start="275:12" pos:end="275:17">strcmp</name><argument_list pos:start="275:18" pos:end="275:27">(<argument pos:start="275:19" pos:end="275:21"><expr pos:start="275:19" pos:end="275:21"><name pos:start="275:19" pos:end="275:21">buf</name></expr></argument>, <argument pos:start="275:24" pos:end="275:26"><expr pos:start="275:24" pos:end="275:26"><literal type="string" pos:start="275:24" pos:end="275:26">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="275:29" pos:end="275:30">==</operator> <literal type="number" pos:start="275:32" pos:end="275:32">0</literal></expr>)</condition> <block pos:start="275:35" pos:end="285:9">{<block_content pos:start="277:12" pos:end="283:23">

           <expr_stmt pos:start="277:12" pos:end="277:46"><expr pos:start="277:12" pos:end="277:45"><call pos:start="277:12" pos:end="277:45"><name pos:start="277:12" pos:end="277:23">error_printf</name><argument_list pos:start="277:24" pos:end="277:45">(<argument pos:start="277:25" pos:end="277:44"><expr pos:start="277:25" pos:end="277:44"><literal type="string" pos:start="277:25" pos:end="277:44">"Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="279:12" pos:end="279:56"><expr pos:start="279:12" pos:end="279:55"><call pos:start="279:12" pos:end="279:55"><name pos:start="279:12" pos:end="279:30">bdrv_iterate_format</name><argument_list pos:start="279:31" pos:end="279:55">(<argument pos:start="279:32" pos:end="279:48"><expr pos:start="279:32" pos:end="279:48"><name pos:start="279:32" pos:end="279:48">bdrv_format_print</name></expr></argument>, <argument pos:start="279:51" pos:end="279:54"><expr pos:start="279:51" pos:end="279:54"><name pos:start="279:51" pos:end="279:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="281:12" pos:end="281:30"><expr pos:start="281:12" pos:end="281:29"><call pos:start="281:12" pos:end="281:29"><name pos:start="281:12" pos:end="281:23">error_printf</name><argument_list pos:start="281:24" pos:end="281:29">(<argument pos:start="281:25" pos:end="281:28"><expr pos:start="281:25" pos:end="281:28"><literal type="string" pos:start="281:25" pos:end="281:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="283:12" pos:end="283:23">return <expr pos:start="283:19" pos:end="283:22"><name pos:start="283:19" pos:end="283:22">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:48"><expr pos:start="287:9" pos:end="287:47"><name pos:start="287:9" pos:end="287:11">drv</name> <operator pos:start="287:13" pos:end="287:13">=</operator> <call pos:start="287:15" pos:end="287:47"><name pos:start="287:15" pos:end="287:42">bdrv_find_whitelisted_format</name><argument_list pos:start="287:43" pos:end="287:47">(<argument pos:start="287:44" pos:end="287:46"><expr pos:start="287:44" pos:end="287:46"><name pos:start="287:44" pos:end="287:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="289:9" pos:end="295:9"><if pos:start="289:9" pos:end="295:9">if <condition pos:start="289:12" pos:end="289:17">(<expr pos:start="289:13" pos:end="289:16"><operator pos:start="289:13" pos:end="289:13">!</operator><name pos:start="289:14" pos:end="289:16">drv</name></expr>)</condition> <block pos:start="289:19" pos:end="295:9">{<block_content pos:start="291:13" pos:end="293:24">

            <expr_stmt pos:start="291:13" pos:end="291:53"><expr pos:start="291:13" pos:end="291:52"><call pos:start="291:13" pos:end="291:52"><name pos:start="291:13" pos:end="291:24">error_report</name><argument_list pos:start="291:25" pos:end="291:52">(<argument pos:start="291:26" pos:end="291:46"><expr pos:start="291:26" pos:end="291:46"><literal type="string" pos:start="291:26" pos:end="291:46">"'%s' invalid format"</literal></expr></argument>, <argument pos:start="291:49" pos:end="291:51"><expr pos:start="291:49" pos:end="291:51"><name pos:start="291:49" pos:end="291:51">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="293:13" pos:end="293:24">return <expr pos:start="293:20" pos:end="293:23"><name pos:start="293:20" pos:end="293:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="301:5" pos:end="301:43"><expr pos:start="301:5" pos:end="301:42"><name pos:start="301:5" pos:end="301:18">on_write_error</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <name pos:start="301:22" pos:end="301:42">BLOCK_ERR_STOP_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="303:5" pos:end="323:5"><if pos:start="303:5" pos:end="323:5">if <condition pos:start="303:8" pos:end="303:53">(<expr pos:start="303:9" pos:end="303:52"><operator pos:start="303:9" pos:end="303:9">(</operator><name pos:start="303:10" pos:end="303:12">buf</name> <operator pos:start="303:14" pos:end="303:14">=</operator> <call pos:start="303:16" pos:end="303:43"><name pos:start="303:16" pos:end="303:27">qemu_opt_get</name><argument_list pos:start="303:28" pos:end="303:43">(<argument pos:start="303:29" pos:end="303:32"><expr pos:start="303:29" pos:end="303:32"><name pos:start="303:29" pos:end="303:32">opts</name></expr></argument>, <argument pos:start="303:35" pos:end="303:42"><expr pos:start="303:35" pos:end="303:42"><literal type="string" pos:start="303:35" pos:end="303:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="303:44" pos:end="303:44">)</operator> <operator pos:start="303:46" pos:end="303:47">!=</operator> <name pos:start="303:49" pos:end="303:52">NULL</name></expr>)</condition> <block pos:start="303:55" pos:end="323:5">{<block_content pos:start="305:9" pos:end="321:9">

        <if_stmt pos:start="305:9" pos:end="311:9"><if pos:start="305:9" pos:end="311:9">if <condition pos:start="305:12" pos:end="305:86">(<expr pos:start="305:13" pos:end="305:85"><name pos:start="305:13" pos:end="305:16">type</name> <operator pos:start="305:18" pos:end="305:19">!=</operator> <name pos:start="305:21" pos:end="305:26">IF_IDE</name> <operator pos:start="305:28" pos:end="305:29">&amp;&amp;</operator> <name pos:start="305:31" pos:end="305:34">type</name> <operator pos:start="305:36" pos:end="305:37">!=</operator> <name pos:start="305:39" pos:end="305:45">IF_SCSI</name> <operator pos:start="305:47" pos:end="305:48">&amp;&amp;</operator> <name pos:start="305:50" pos:end="305:53">type</name> <operator pos:start="305:55" pos:end="305:56">!=</operator> <name pos:start="305:58" pos:end="305:66">IF_VIRTIO</name> <operator pos:start="305:68" pos:end="305:69">&amp;&amp;</operator> <name pos:start="305:71" pos:end="305:74">type</name> <operator pos:start="305:76" pos:end="305:77">!=</operator> <name pos:start="305:79" pos:end="305:85">IF_NONE</name></expr>)</condition> <block pos:start="305:88" pos:end="311:9">{<block_content pos:start="307:13" pos:end="309:24">

            <expr_stmt pos:start="307:13" pos:end="307:69"><expr pos:start="307:13" pos:end="307:68"><call pos:start="307:13" pos:end="307:68"><name pos:start="307:13" pos:end="307:24">error_report</name><argument_list pos:start="307:25" pos:end="307:68">(<argument pos:start="307:26" pos:end="307:67"><expr pos:start="307:26" pos:end="307:67"><literal type="string" pos:start="307:26" pos:end="307:67">"werror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="309:13" pos:end="309:24">return <expr pos:start="309:20" pos:end="309:23"><name pos:start="309:20" pos:end="309:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="315:9" pos:end="315:58"><expr pos:start="315:9" pos:end="315:57"><name pos:start="315:9" pos:end="315:22">on_write_error</name> <operator pos:start="315:24" pos:end="315:24">=</operator> <call pos:start="315:26" pos:end="315:57"><name pos:start="315:26" pos:end="315:49">parse_block_error_action</name><argument_list pos:start="315:50" pos:end="315:57">(<argument pos:start="315:51" pos:end="315:53"><expr pos:start="315:51" pos:end="315:53"><name pos:start="315:51" pos:end="315:53">buf</name></expr></argument>, <argument pos:start="315:56" pos:end="315:56"><expr pos:start="315:56" pos:end="315:56"><literal type="number" pos:start="315:56" pos:end="315:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="317:9" pos:end="321:9"><if pos:start="317:9" pos:end="321:9">if <condition pos:start="317:12" pos:end="317:31">(<expr pos:start="317:13" pos:end="317:30"><name pos:start="317:13" pos:end="317:26">on_write_error</name> <operator pos:start="317:28" pos:end="317:28">&lt;</operator> <literal type="number" pos:start="317:30" pos:end="317:30">0</literal></expr>)</condition> <block pos:start="317:33" pos:end="321:9">{<block_content pos:start="319:13" pos:end="319:24">

            <return pos:start="319:13" pos:end="319:24">return <expr pos:start="319:20" pos:end="319:23"><name pos:start="319:20" pos:end="319:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="327:5" pos:end="327:37"><expr pos:start="327:5" pos:end="327:36"><name pos:start="327:5" pos:end="327:17">on_read_error</name> <operator pos:start="327:19" pos:end="327:19">=</operator> <name pos:start="327:21" pos:end="327:36">BLOCK_ERR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="329:5" pos:end="349:5"><if pos:start="329:5" pos:end="349:5">if <condition pos:start="329:8" pos:end="329:53">(<expr pos:start="329:9" pos:end="329:52"><operator pos:start="329:9" pos:end="329:9">(</operator><name pos:start="329:10" pos:end="329:12">buf</name> <operator pos:start="329:14" pos:end="329:14">=</operator> <call pos:start="329:16" pos:end="329:43"><name pos:start="329:16" pos:end="329:27">qemu_opt_get</name><argument_list pos:start="329:28" pos:end="329:43">(<argument pos:start="329:29" pos:end="329:32"><expr pos:start="329:29" pos:end="329:32"><name pos:start="329:29" pos:end="329:32">opts</name></expr></argument>, <argument pos:start="329:35" pos:end="329:42"><expr pos:start="329:35" pos:end="329:42"><literal type="string" pos:start="329:35" pos:end="329:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="329:44" pos:end="329:44">)</operator> <operator pos:start="329:46" pos:end="329:47">!=</operator> <name pos:start="329:49" pos:end="329:52">NULL</name></expr>)</condition> <block pos:start="329:55" pos:end="349:5">{<block_content pos:start="331:9" pos:end="347:9">

        <if_stmt pos:start="331:9" pos:end="337:9"><if pos:start="331:9" pos:end="337:9">if <condition pos:start="331:12" pos:end="331:86">(<expr pos:start="331:13" pos:end="331:85"><name pos:start="331:13" pos:end="331:16">type</name> <operator pos:start="331:18" pos:end="331:19">!=</operator> <name pos:start="331:21" pos:end="331:26">IF_IDE</name> <operator pos:start="331:28" pos:end="331:29">&amp;&amp;</operator> <name pos:start="331:31" pos:end="331:34">type</name> <operator pos:start="331:36" pos:end="331:37">!=</operator> <name pos:start="331:39" pos:end="331:47">IF_VIRTIO</name> <operator pos:start="331:49" pos:end="331:50">&amp;&amp;</operator> <name pos:start="331:52" pos:end="331:55">type</name> <operator pos:start="331:57" pos:end="331:58">!=</operator> <name pos:start="331:60" pos:end="331:66">IF_SCSI</name> <operator pos:start="331:68" pos:end="331:69">&amp;&amp;</operator> <name pos:start="331:71" pos:end="331:74">type</name> <operator pos:start="331:76" pos:end="331:77">!=</operator> <name pos:start="331:79" pos:end="331:85">IF_NONE</name></expr>)</condition> <block pos:start="331:88" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:24">

            <expr_stmt pos:start="333:13" pos:end="333:69"><expr pos:start="333:13" pos:end="333:68"><call pos:start="333:13" pos:end="333:68"><name pos:start="333:13" pos:end="333:24">error_report</name><argument_list pos:start="333:25" pos:end="333:68">(<argument pos:start="333:26" pos:end="333:67"><expr pos:start="333:26" pos:end="333:67"><literal type="string" pos:start="333:26" pos:end="333:67">"rerror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="335:13" pos:end="335:24">return <expr pos:start="335:20" pos:end="335:23"><name pos:start="335:20" pos:end="335:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="341:9" pos:end="341:57"><expr pos:start="341:9" pos:end="341:56"><name pos:start="341:9" pos:end="341:21">on_read_error</name> <operator pos:start="341:23" pos:end="341:23">=</operator> <call pos:start="341:25" pos:end="341:56"><name pos:start="341:25" pos:end="341:48">parse_block_error_action</name><argument_list pos:start="341:49" pos:end="341:56">(<argument pos:start="341:50" pos:end="341:52"><expr pos:start="341:50" pos:end="341:52"><name pos:start="341:50" pos:end="341:52">buf</name></expr></argument>, <argument pos:start="341:55" pos:end="341:55"><expr pos:start="341:55" pos:end="341:55"><literal type="number" pos:start="341:55" pos:end="341:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="343:9" pos:end="347:9"><if pos:start="343:9" pos:end="347:9">if <condition pos:start="343:12" pos:end="343:30">(<expr pos:start="343:13" pos:end="343:29"><name pos:start="343:13" pos:end="343:25">on_read_error</name> <operator pos:start="343:27" pos:end="343:27">&lt;</operator> <literal type="number" pos:start="343:29" pos:end="343:29">0</literal></expr>)</condition> <block pos:start="343:32" pos:end="347:9">{<block_content pos:start="345:13" pos:end="345:24">

            <return pos:start="345:13" pos:end="345:24">return <expr pos:start="345:20" pos:end="345:23"><name pos:start="345:20" pos:end="345:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="353:5" pos:end="363:5"><if pos:start="353:5" pos:end="363:5">if <condition pos:start="353:8" pos:end="353:55">(<expr pos:start="353:9" pos:end="353:54"><operator pos:start="353:9" pos:end="353:9">(</operator><name pos:start="353:10" pos:end="353:16">devaddr</name> <operator pos:start="353:18" pos:end="353:18">=</operator> <call pos:start="353:20" pos:end="353:45"><name pos:start="353:20" pos:end="353:31">qemu_opt_get</name><argument_list pos:start="353:32" pos:end="353:45">(<argument pos:start="353:33" pos:end="353:36"><expr pos:start="353:33" pos:end="353:36"><name pos:start="353:33" pos:end="353:36">opts</name></expr></argument>, <argument pos:start="353:39" pos:end="353:44"><expr pos:start="353:39" pos:end="353:44"><literal type="string" pos:start="353:39" pos:end="353:44">"addr"</literal></expr></argument>)</argument_list></call><operator pos:start="353:46" pos:end="353:46">)</operator> <operator pos:start="353:48" pos:end="353:49">!=</operator> <name pos:start="353:51" pos:end="353:54">NULL</name></expr>)</condition> <block pos:start="353:57" pos:end="363:5">{<block_content pos:start="355:9" pos:end="361:9">

        <if_stmt pos:start="355:9" pos:end="361:9"><if pos:start="355:9" pos:end="361:9">if <condition pos:start="355:12" pos:end="355:30">(<expr pos:start="355:13" pos:end="355:29"><name pos:start="355:13" pos:end="355:16">type</name> <operator pos:start="355:18" pos:end="355:19">!=</operator> <name pos:start="355:21" pos:end="355:29">IF_VIRTIO</name></expr>)</condition> <block pos:start="355:32" pos:end="361:9">{<block_content pos:start="357:13" pos:end="359:24">

            <expr_stmt pos:start="357:13" pos:end="357:67"><expr pos:start="357:13" pos:end="357:66"><call pos:start="357:13" pos:end="357:66"><name pos:start="357:13" pos:end="357:24">error_report</name><argument_list pos:start="357:25" pos:end="357:66">(<argument pos:start="357:26" pos:end="357:65"><expr pos:start="357:26" pos:end="357:65"><literal type="string" pos:start="357:26" pos:end="357:65">"addr is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="359:13" pos:end="359:24">return <expr pos:start="359:20" pos:end="359:23"><name pos:start="359:20" pos:end="359:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="367:5" pos:end="367:46">/* compute bus and unit according index */</comment>



    <if_stmt pos:start="371:5" pos:end="385:5"><if pos:start="371:5" pos:end="385:5">if <condition pos:start="371:8" pos:end="371:20">(<expr pos:start="371:9" pos:end="371:19"><name pos:start="371:9" pos:end="371:13">index</name> <operator pos:start="371:15" pos:end="371:16">!=</operator> <operator pos:start="371:18" pos:end="371:18">-</operator><literal type="number" pos:start="371:19" pos:end="371:19">1</literal></expr>)</condition> <block pos:start="371:22" pos:end="385:5">{<block_content pos:start="373:9" pos:end="383:54">

        <if_stmt pos:start="373:9" pos:end="379:9"><if pos:start="373:9" pos:end="379:9">if <condition pos:start="373:12" pos:end="373:41">(<expr pos:start="373:13" pos:end="373:40"><name pos:start="373:13" pos:end="373:18">bus_id</name> <operator pos:start="373:20" pos:end="373:21">!=</operator> <literal type="number" pos:start="373:23" pos:end="373:23">0</literal> <operator pos:start="373:25" pos:end="373:26">||</operator> <name pos:start="373:28" pos:end="373:34">unit_id</name> <operator pos:start="373:36" pos:end="373:37">!=</operator> <operator pos:start="373:39" pos:end="373:39">-</operator><literal type="number" pos:start="373:40" pos:end="373:40">1</literal></expr>)</condition> <block pos:start="373:43" pos:end="379:9">{<block_content pos:start="375:13" pos:end="377:24">

            <expr_stmt pos:start="375:13" pos:end="375:67"><expr pos:start="375:13" pos:end="375:66"><call pos:start="375:13" pos:end="375:66"><name pos:start="375:13" pos:end="375:24">error_report</name><argument_list pos:start="375:25" pos:end="375:66">(<argument pos:start="375:26" pos:end="375:65"><expr pos:start="375:26" pos:end="375:65"><literal type="string" pos:start="375:26" pos:end="375:65">"index cannot be used with bus and unit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="377:13" pos:end="377:24">return <expr pos:start="377:20" pos:end="377:23"><name pos:start="377:20" pos:end="377:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:52"><expr pos:start="381:9" pos:end="381:51"><name pos:start="381:9" pos:end="381:14">bus_id</name> <operator pos:start="381:16" pos:end="381:16">=</operator> <call pos:start="381:18" pos:end="381:51"><name pos:start="381:18" pos:end="381:38">drive_index_to_bus_id</name><argument_list pos:start="381:39" pos:end="381:51">(<argument pos:start="381:40" pos:end="381:43"><expr pos:start="381:40" pos:end="381:43"><name pos:start="381:40" pos:end="381:43">type</name></expr></argument>, <argument pos:start="381:46" pos:end="381:50"><expr pos:start="381:46" pos:end="381:50"><name pos:start="381:46" pos:end="381:50">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:54"><expr pos:start="383:9" pos:end="383:53"><name pos:start="383:9" pos:end="383:15">unit_id</name> <operator pos:start="383:17" pos:end="383:17">=</operator> <call pos:start="383:19" pos:end="383:53"><name pos:start="383:19" pos:end="383:40">drive_index_to_unit_id</name><argument_list pos:start="383:41" pos:end="383:53">(<argument pos:start="383:42" pos:end="383:45"><expr pos:start="383:42" pos:end="383:45"><name pos:start="383:42" pos:end="383:45">type</name></expr></argument>, <argument pos:start="383:48" pos:end="383:52"><expr pos:start="383:48" pos:end="383:52"><name pos:start="383:48" pos:end="383:52">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="389:5" pos:end="393:7">/* if user doesn't specify a unit_id,

     * try to find the first free

     */</comment>



    <if_stmt pos:start="397:5" pos:end="415:5"><if pos:start="397:5" pos:end="415:5">if <condition pos:start="397:8" pos:end="397:22">(<expr pos:start="397:9" pos:end="397:21"><name pos:start="397:9" pos:end="397:15">unit_id</name> <operator pos:start="397:17" pos:end="397:18">==</operator> <operator pos:start="397:20" pos:end="397:20">-</operator><literal type="number" pos:start="397:21" pos:end="397:21">1</literal></expr>)</condition> <block pos:start="397:24" pos:end="415:5">{<block_content pos:start="399:8" pos:end="413:8">

       <expr_stmt pos:start="399:8" pos:end="399:19"><expr pos:start="399:8" pos:end="399:18"><name pos:start="399:8" pos:end="399:14">unit_id</name> <operator pos:start="399:16" pos:end="399:16">=</operator> <literal type="number" pos:start="399:18" pos:end="399:18">0</literal></expr>;</expr_stmt>

       <while pos:start="401:8" pos:end="413:8">while <condition pos:start="401:14" pos:end="401:55">(<expr pos:start="401:15" pos:end="401:54"><call pos:start="401:15" pos:end="401:46"><name pos:start="401:15" pos:end="401:23">drive_get</name><argument_list pos:start="401:24" pos:end="401:46">(<argument pos:start="401:25" pos:end="401:28"><expr pos:start="401:25" pos:end="401:28"><name pos:start="401:25" pos:end="401:28">type</name></expr></argument>, <argument pos:start="401:31" pos:end="401:36"><expr pos:start="401:31" pos:end="401:36"><name pos:start="401:31" pos:end="401:36">bus_id</name></expr></argument>, <argument pos:start="401:39" pos:end="401:45"><expr pos:start="401:39" pos:end="401:45"><name pos:start="401:39" pos:end="401:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="401:48" pos:end="401:49">!=</operator> <name pos:start="401:51" pos:end="401:54">NULL</name></expr>)</condition> <block pos:start="401:57" pos:end="413:8">{<block_content pos:start="403:12" pos:end="411:12">

           <expr_stmt pos:start="403:12" pos:end="403:21"><expr pos:start="403:12" pos:end="403:20"><name pos:start="403:12" pos:end="403:18">unit_id</name><operator pos:start="403:19" pos:end="403:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="405:12" pos:end="411:12"><if pos:start="405:12" pos:end="411:12">if <condition pos:start="405:15" pos:end="405:47">(<expr pos:start="405:16" pos:end="405:46"><name pos:start="405:16" pos:end="405:23">max_devs</name> <operator pos:start="405:25" pos:end="405:26">&amp;&amp;</operator> <name pos:start="405:28" pos:end="405:34">unit_id</name> <operator pos:start="405:36" pos:end="405:37">&gt;=</operator> <name pos:start="405:39" pos:end="405:46">max_devs</name></expr>)</condition> <block pos:start="405:49" pos:end="411:12">{<block_content pos:start="407:16" pos:end="409:24">

               <expr_stmt pos:start="407:16" pos:end="407:35"><expr pos:start="407:16" pos:end="407:34"><name pos:start="407:16" pos:end="407:22">unit_id</name> <operator pos:start="407:24" pos:end="407:25">-=</operator> <name pos:start="407:27" pos:end="407:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="409:16" pos:end="409:24"><expr pos:start="409:16" pos:end="409:23"><name pos:start="409:16" pos:end="409:21">bus_id</name><operator pos:start="409:22" pos:end="409:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="419:5" pos:end="419:23">/* check unit id */</comment>



    <if_stmt pos:start="423:5" pos:end="431:5"><if pos:start="423:5" pos:end="431:5">if <condition pos:start="423:8" pos:end="423:40">(<expr pos:start="423:9" pos:end="423:39"><name pos:start="423:9" pos:end="423:16">max_devs</name> <operator pos:start="423:18" pos:end="423:19">&amp;&amp;</operator> <name pos:start="423:21" pos:end="423:27">unit_id</name> <operator pos:start="423:29" pos:end="423:30">&gt;=</operator> <name pos:start="423:32" pos:end="423:39">max_devs</name></expr>)</condition> <block pos:start="423:42" pos:end="431:5">{<block_content pos:start="425:9" pos:end="429:20">

        <expr_stmt pos:start="425:9" pos:end="427:44"><expr pos:start="425:9" pos:end="427:43"><call pos:start="425:9" pos:end="427:43"><name pos:start="425:9" pos:end="425:20">error_report</name><argument_list pos:start="425:21" pos:end="427:43">(<argument pos:start="425:22" pos:end="425:50"><expr pos:start="425:22" pos:end="425:50"><literal type="string" pos:start="425:22" pos:end="425:50">"unit %d too big (max is %d)"</literal></expr></argument>,

                     <argument pos:start="427:22" pos:end="427:28"><expr pos:start="427:22" pos:end="427:28"><name pos:start="427:22" pos:end="427:28">unit_id</name></expr></argument>, <argument pos:start="427:31" pos:end="427:42"><expr pos:start="427:31" pos:end="427:42"><name pos:start="427:31" pos:end="427:38">max_devs</name> <operator pos:start="427:40" pos:end="427:40">-</operator> <literal type="number" pos:start="427:42" pos:end="427:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="429:9" pos:end="429:20">return <expr pos:start="429:16" pos:end="429:19"><name pos:start="429:16" pos:end="429:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="435:5" pos:end="439:7">/*

     * catch multiple definitions

     */</comment>



    <if_stmt pos:start="443:5" pos:end="451:5"><if pos:start="443:5" pos:end="451:5">if <condition pos:start="443:8" pos:end="443:49">(<expr pos:start="443:9" pos:end="443:48"><call pos:start="443:9" pos:end="443:40"><name pos:start="443:9" pos:end="443:17">drive_get</name><argument_list pos:start="443:18" pos:end="443:40">(<argument pos:start="443:19" pos:end="443:22"><expr pos:start="443:19" pos:end="443:22"><name pos:start="443:19" pos:end="443:22">type</name></expr></argument>, <argument pos:start="443:25" pos:end="443:30"><expr pos:start="443:25" pos:end="443:30"><name pos:start="443:25" pos:end="443:30">bus_id</name></expr></argument>, <argument pos:start="443:33" pos:end="443:39"><expr pos:start="443:33" pos:end="443:39"><name pos:start="443:33" pos:end="443:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="443:42" pos:end="443:43">!=</operator> <name pos:start="443:45" pos:end="443:48">NULL</name></expr>)</condition> <block pos:start="443:51" pos:end="451:5">{<block_content pos:start="445:9" pos:end="449:20">

        <expr_stmt pos:start="445:9" pos:end="447:45"><expr pos:start="445:9" pos:end="447:44"><call pos:start="445:9" pos:end="447:44"><name pos:start="445:9" pos:end="445:20">error_report</name><argument_list pos:start="445:21" pos:end="447:44">(<argument pos:start="445:22" pos:end="445:67"><expr pos:start="445:22" pos:end="445:67"><literal type="string" pos:start="445:22" pos:end="445:67">"drive with bus=%d, unit=%d (index=%d) exists"</literal></expr></argument>,

                     <argument pos:start="447:22" pos:end="447:27"><expr pos:start="447:22" pos:end="447:27"><name pos:start="447:22" pos:end="447:27">bus_id</name></expr></argument>, <argument pos:start="447:30" pos:end="447:36"><expr pos:start="447:30" pos:end="447:36"><name pos:start="447:30" pos:end="447:36">unit_id</name></expr></argument>, <argument pos:start="447:39" pos:end="447:43"><expr pos:start="447:39" pos:end="447:43"><name pos:start="447:39" pos:end="447:43">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="449:9" pos:end="449:20">return <expr pos:start="449:16" pos:end="449:19"><name pos:start="449:16" pos:end="449:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="455:5" pos:end="455:14">/* init */</comment>



    <expr_stmt pos:start="459:5" pos:end="459:41"><expr pos:start="459:5" pos:end="459:40"><name pos:start="459:5" pos:end="459:9">dinfo</name> <operator pos:start="459:11" pos:end="459:11">=</operator> <call pos:start="459:13" pos:end="459:40"><name pos:start="459:13" pos:end="459:24">qemu_mallocz</name><argument_list pos:start="459:25" pos:end="459:40">(<argument pos:start="459:26" pos:end="459:39"><expr pos:start="459:26" pos:end="459:39"><sizeof pos:start="459:26" pos:end="459:39">sizeof<argument_list pos:start="459:32" pos:end="459:39">(<argument pos:start="459:33" pos:end="459:38"><expr pos:start="459:33" pos:end="459:38"><operator pos:start="459:33" pos:end="459:33">*</operator><name pos:start="459:34" pos:end="459:38">dinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="461:5" pos:end="487:5"><if pos:start="461:5" pos:end="465:5">if <condition pos:start="461:8" pos:end="461:43">(<expr pos:start="461:9" pos:end="461:42"><operator pos:start="461:9" pos:end="461:9">(</operator><name pos:start="461:10" pos:end="461:12">buf</name> <operator pos:start="461:14" pos:end="461:14">=</operator> <call pos:start="461:16" pos:end="461:33"><name pos:start="461:16" pos:end="461:27">qemu_opts_id</name><argument_list pos:start="461:28" pos:end="461:33">(<argument pos:start="461:29" pos:end="461:32"><expr pos:start="461:29" pos:end="461:32"><name pos:start="461:29" pos:end="461:32">opts</name></expr></argument>)</argument_list></call><operator pos:start="461:34" pos:end="461:34">)</operator> <operator pos:start="461:36" pos:end="461:37">!=</operator> <name pos:start="461:39" pos:end="461:42">NULL</name></expr>)</condition> <block pos:start="461:45" pos:end="465:5">{<block_content pos:start="463:9" pos:end="463:37">

        <expr_stmt pos:start="463:9" pos:end="463:37"><expr pos:start="463:9" pos:end="463:36"><name pos:start="463:9" pos:end="463:17"><name pos:start="463:9" pos:end="463:13">dinfo</name><operator pos:start="463:14" pos:end="463:15">-&gt;</operator><name pos:start="463:16" pos:end="463:17">id</name></name> <operator pos:start="463:19" pos:end="463:19">=</operator> <call pos:start="463:21" pos:end="463:36"><name pos:start="463:21" pos:end="463:31">qemu_strdup</name><argument_list pos:start="463:32" pos:end="463:36">(<argument pos:start="463:33" pos:end="463:35"><expr pos:start="463:33" pos:end="463:35"><name pos:start="463:33" pos:end="463:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="465:7" pos:end="487:5">else <block pos:start="465:12" pos:end="487:5">{<block_content pos:start="469:9" pos:end="485:49">

        <comment type="block" pos:start="467:9" pos:end="467:42">/* no id supplied -&gt; create one */</comment>

        <expr_stmt pos:start="469:9" pos:end="469:37"><expr pos:start="469:9" pos:end="469:36"><name pos:start="469:9" pos:end="469:17"><name pos:start="469:9" pos:end="469:13">dinfo</name><operator pos:start="469:14" pos:end="469:15">-&gt;</operator><name pos:start="469:16" pos:end="469:17">id</name></name> <operator pos:start="469:19" pos:end="469:19">=</operator> <call pos:start="469:21" pos:end="469:36"><name pos:start="469:21" pos:end="469:32">qemu_mallocz</name><argument_list pos:start="469:33" pos:end="469:36">(<argument pos:start="469:34" pos:end="469:35"><expr pos:start="469:34" pos:end="469:35"><literal type="number" pos:start="469:34" pos:end="469:35">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="471:9" pos:end="473:62"><if pos:start="471:9" pos:end="473:62">if <condition pos:start="471:12" pos:end="471:46">(<expr pos:start="471:13" pos:end="471:45"><name pos:start="471:13" pos:end="471:16">type</name> <operator pos:start="471:18" pos:end="471:19">==</operator> <name pos:start="471:21" pos:end="471:26">IF_IDE</name> <operator pos:start="471:28" pos:end="471:29">||</operator> <name pos:start="471:31" pos:end="471:34">type</name> <operator pos:start="471:36" pos:end="471:37">==</operator> <name pos:start="471:39" pos:end="471:45">IF_SCSI</name></expr>)</condition><block type="pseudo" pos:start="473:13" pos:end="473:62"><block_content pos:start="473:13" pos:end="473:62">

            <expr_stmt pos:start="473:13" pos:end="473:62"><expr pos:start="473:13" pos:end="473:61"><name pos:start="473:13" pos:end="473:20">mediastr</name> <operator pos:start="473:22" pos:end="473:22">=</operator> <ternary pos:start="473:24" pos:end="473:61"><condition pos:start="473:24" pos:end="473:47"><expr pos:start="473:24" pos:end="473:45"><operator pos:start="473:24" pos:end="473:24">(</operator><name pos:start="473:25" pos:end="473:29">media</name> <operator pos:start="473:31" pos:end="473:32">==</operator> <name pos:start="473:34" pos:end="473:44">MEDIA_CDROM</name><operator pos:start="473:45" pos:end="473:45">)</operator></expr> ?</condition><then pos:start="473:49" pos:end="473:53"> <expr pos:start="473:49" pos:end="473:53"><literal type="string" pos:start="473:49" pos:end="473:53">"-cd"</literal></expr> </then><else pos:start="473:55" pos:end="473:61">: <expr pos:start="473:57" pos:end="473:61"><literal type="string" pos:start="473:57" pos:end="473:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="475:9" pos:end="485:49"><if pos:start="475:9" pos:end="479:57">if <condition pos:start="475:12" pos:end="475:21">(<expr pos:start="475:13" pos:end="475:20"><name pos:start="475:13" pos:end="475:20">max_devs</name></expr>)</condition><block type="pseudo" pos:start="477:13" pos:end="479:57"><block_content pos:start="477:13" pos:end="479:57">

            <expr_stmt pos:start="477:13" pos:end="479:57"><expr pos:start="477:13" pos:end="479:56"><call pos:start="477:13" pos:end="479:56"><name pos:start="477:13" pos:end="477:20">snprintf</name><argument_list pos:start="477:21" pos:end="479:56">(<argument pos:start="477:22" pos:end="477:30"><expr pos:start="477:22" pos:end="477:30"><name pos:start="477:22" pos:end="477:30"><name pos:start="477:22" pos:end="477:26">dinfo</name><operator pos:start="477:27" pos:end="477:28">-&gt;</operator><name pos:start="477:29" pos:end="477:30">id</name></name></expr></argument>, <argument pos:start="477:33" pos:end="477:34"><expr pos:start="477:33" pos:end="477:34"><literal type="number" pos:start="477:33" pos:end="477:34">32</literal></expr></argument>, <argument pos:start="477:37" pos:end="477:46"><expr pos:start="477:37" pos:end="477:46"><literal type="string" pos:start="477:37" pos:end="477:46">"%s%i%s%i"</literal></expr></argument>,

                     <argument pos:start="479:22" pos:end="479:28"><expr pos:start="479:22" pos:end="479:28"><name pos:start="479:22" pos:end="479:28">devname</name></expr></argument>, <argument pos:start="479:31" pos:end="479:36"><expr pos:start="479:31" pos:end="479:36"><name pos:start="479:31" pos:end="479:36">bus_id</name></expr></argument>, <argument pos:start="479:39" pos:end="479:46"><expr pos:start="479:39" pos:end="479:46"><name pos:start="479:39" pos:end="479:46">mediastr</name></expr></argument>, <argument pos:start="479:49" pos:end="479:55"><expr pos:start="479:49" pos:end="479:55"><name pos:start="479:49" pos:end="479:55">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="481:9" pos:end="485:49">else<block type="pseudo" pos:start="483:13" pos:end="485:49"><block_content pos:start="483:13" pos:end="485:49">

            <expr_stmt pos:start="483:13" pos:end="485:49"><expr pos:start="483:13" pos:end="485:48"><call pos:start="483:13" pos:end="485:48"><name pos:start="483:13" pos:end="483:20">snprintf</name><argument_list pos:start="483:21" pos:end="485:48">(<argument pos:start="483:22" pos:end="483:30"><expr pos:start="483:22" pos:end="483:30"><name pos:start="483:22" pos:end="483:30"><name pos:start="483:22" pos:end="483:26">dinfo</name><operator pos:start="483:27" pos:end="483:28">-&gt;</operator><name pos:start="483:29" pos:end="483:30">id</name></name></expr></argument>, <argument pos:start="483:33" pos:end="483:34"><expr pos:start="483:33" pos:end="483:34"><literal type="number" pos:start="483:33" pos:end="483:34">32</literal></expr></argument>, <argument pos:start="483:37" pos:end="483:44"><expr pos:start="483:37" pos:end="483:44"><literal type="string" pos:start="483:37" pos:end="483:44">"%s%s%i"</literal></expr></argument>,

                     <argument pos:start="485:22" pos:end="485:28"><expr pos:start="485:22" pos:end="485:28"><name pos:start="485:22" pos:end="485:28">devname</name></expr></argument>, <argument pos:start="485:31" pos:end="485:38"><expr pos:start="485:31" pos:end="485:38"><name pos:start="485:31" pos:end="485:38">mediastr</name></expr></argument>, <argument pos:start="485:41" pos:end="485:47"><expr pos:start="485:41" pos:end="485:47"><name pos:start="485:41" pos:end="485:47">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="489:5" pos:end="489:38"><expr pos:start="489:5" pos:end="489:37"><name pos:start="489:5" pos:end="489:15"><name pos:start="489:5" pos:end="489:9">dinfo</name><operator pos:start="489:10" pos:end="489:11">-&gt;</operator><name pos:start="489:12" pos:end="489:15">bdrv</name></name> <operator pos:start="489:17" pos:end="489:17">=</operator> <call pos:start="489:19" pos:end="489:37"><name pos:start="489:19" pos:end="489:26">bdrv_new</name><argument_list pos:start="489:27" pos:end="489:37">(<argument pos:start="489:28" pos:end="489:36"><expr pos:start="489:28" pos:end="489:36"><name pos:start="489:28" pos:end="489:36"><name pos:start="489:28" pos:end="489:32">dinfo</name><operator pos:start="489:33" pos:end="489:34">-&gt;</operator><name pos:start="489:35" pos:end="489:36">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="491:5" pos:end="491:29"><expr pos:start="491:5" pos:end="491:28"><name pos:start="491:5" pos:end="491:18"><name pos:start="491:5" pos:end="491:9">dinfo</name><operator pos:start="491:10" pos:end="491:11">-&gt;</operator><name pos:start="491:12" pos:end="491:18">devaddr</name></name> <operator pos:start="491:20" pos:end="491:20">=</operator> <name pos:start="491:22" pos:end="491:28">devaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="493:23"><expr pos:start="493:5" pos:end="493:22"><name pos:start="493:5" pos:end="493:15"><name pos:start="493:5" pos:end="493:9">dinfo</name><operator pos:start="493:10" pos:end="493:11">-&gt;</operator><name pos:start="493:12" pos:end="493:15">type</name></name> <operator pos:start="493:17" pos:end="493:17">=</operator> <name pos:start="493:19" pos:end="493:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="495:24"><expr pos:start="495:5" pos:end="495:23"><name pos:start="495:5" pos:end="495:14"><name pos:start="495:5" pos:end="495:9">dinfo</name><operator pos:start="495:10" pos:end="495:11">-&gt;</operator><name pos:start="495:12" pos:end="495:14">bus</name></name> <operator pos:start="495:16" pos:end="495:16">=</operator> <name pos:start="495:18" pos:end="495:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="497:5" pos:end="497:26"><expr pos:start="497:5" pos:end="497:25"><name pos:start="497:5" pos:end="497:15"><name pos:start="497:5" pos:end="497:9">dinfo</name><operator pos:start="497:10" pos:end="497:11">-&gt;</operator><name pos:start="497:12" pos:end="497:15">unit</name></name> <operator pos:start="497:17" pos:end="497:17">=</operator> <name pos:start="497:19" pos:end="497:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="499:5" pos:end="499:23"><expr pos:start="499:5" pos:end="499:22"><name pos:start="499:5" pos:end="499:15"><name pos:start="499:5" pos:end="499:9">dinfo</name><operator pos:start="499:10" pos:end="499:11">-&gt;</operator><name pos:start="499:12" pos:end="499:15">opts</name></name> <operator pos:start="499:17" pos:end="499:17">=</operator> <name pos:start="499:19" pos:end="499:22">opts</name></expr>;</expr_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:24"><expr pos:start="501:5" pos:end="501:23"><name pos:start="501:5" pos:end="501:19"><name pos:start="501:5" pos:end="501:9">dinfo</name><operator pos:start="501:10" pos:end="501:11">-&gt;</operator><name pos:start="501:12" pos:end="501:19">refcount</name></name> <operator pos:start="501:21" pos:end="501:21">=</operator> <literal type="number" pos:start="501:23" pos:end="501:23">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="503:5" pos:end="505:66"><if pos:start="503:5" pos:end="505:66">if <condition pos:start="503:8" pos:end="503:15">(<expr pos:start="503:9" pos:end="503:14"><name pos:start="503:9" pos:end="503:14">serial</name></expr>)</condition><block type="pseudo" pos:start="505:9" pos:end="505:66"><block_content pos:start="505:9" pos:end="505:66">

        <expr_stmt pos:start="505:9" pos:end="505:66"><expr pos:start="505:9" pos:end="505:65"><call pos:start="505:9" pos:end="505:65"><name pos:start="505:9" pos:end="505:15">strncpy</name><argument_list pos:start="505:16" pos:end="505:65">(<argument pos:start="505:17" pos:end="505:29"><expr pos:start="505:17" pos:end="505:29"><name pos:start="505:17" pos:end="505:29"><name pos:start="505:17" pos:end="505:21">dinfo</name><operator pos:start="505:22" pos:end="505:23">-&gt;</operator><name pos:start="505:24" pos:end="505:29">serial</name></name></expr></argument>, <argument pos:start="505:32" pos:end="505:37"><expr pos:start="505:32" pos:end="505:37"><name pos:start="505:32" pos:end="505:37">serial</name></expr></argument>, <argument pos:start="505:40" pos:end="505:64"><expr pos:start="505:40" pos:end="505:64"><sizeof pos:start="505:40" pos:end="505:60">sizeof<argument_list pos:start="505:46" pos:end="505:60">(<argument pos:start="505:47" pos:end="505:59"><expr pos:start="505:47" pos:end="505:59"><name pos:start="505:47" pos:end="505:59"><name pos:start="505:47" pos:end="505:51">dinfo</name><operator pos:start="505:52" pos:end="505:53">-&gt;</operator><name pos:start="505:54" pos:end="505:59">serial</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="505:62" pos:end="505:62">-</operator> <literal type="number" pos:start="505:64" pos:end="505:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="507:5" pos:end="507:45"><expr pos:start="507:5" pos:end="507:44"><call pos:start="507:5" pos:end="507:44"><name pos:start="507:5" pos:end="507:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="507:23" pos:end="507:44">(<argument pos:start="507:24" pos:end="507:30"><expr pos:start="507:24" pos:end="507:30"><operator pos:start="507:24" pos:end="507:24">&amp;</operator><name pos:start="507:25" pos:end="507:30">drives</name></expr></argument>, <argument pos:start="507:33" pos:end="507:37"><expr pos:start="507:33" pos:end="507:37"><name pos:start="507:33" pos:end="507:37">dinfo</name></expr></argument>, <argument pos:start="507:40" pos:end="507:43"><expr pos:start="507:40" pos:end="507:43"><name pos:start="507:40" pos:end="507:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="511:5" pos:end="511:66"><expr pos:start="511:5" pos:end="511:65"><call pos:start="511:5" pos:end="511:65"><name pos:start="511:5" pos:end="511:21">bdrv_set_on_error</name><argument_list pos:start="511:22" pos:end="511:65">(<argument pos:start="511:23" pos:end="511:33"><expr pos:start="511:23" pos:end="511:33"><name pos:start="511:23" pos:end="511:33"><name pos:start="511:23" pos:end="511:27">dinfo</name><operator pos:start="511:28" pos:end="511:29">-&gt;</operator><name pos:start="511:30" pos:end="511:33">bdrv</name></name></expr></argument>, <argument pos:start="511:36" pos:end="511:48"><expr pos:start="511:36" pos:end="511:48"><name pos:start="511:36" pos:end="511:48">on_read_error</name></expr></argument>, <argument pos:start="511:51" pos:end="511:64"><expr pos:start="511:51" pos:end="511:64"><name pos:start="511:51" pos:end="511:64">on_write_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="515:5" pos:end="589:5">switch<condition pos:start="515:11" pos:end="515:16">(<expr pos:start="515:12" pos:end="515:15"><name pos:start="515:12" pos:end="515:15">type</name></expr>)</condition> <block pos:start="515:18" pos:end="589:5">{<block_content pos:start="517:5" pos:end="587:16">

    <case pos:start="517:5" pos:end="517:16">case <expr pos:start="517:10" pos:end="517:15"><name pos:start="517:10" pos:end="517:15">IF_IDE</name></expr>:</case>

    <case pos:start="519:5" pos:end="519:17">case <expr pos:start="519:10" pos:end="519:16"><name pos:start="519:10" pos:end="519:16">IF_SCSI</name></expr>:</case>

    <case pos:start="521:5" pos:end="521:16">case <expr pos:start="521:10" pos:end="521:15"><name pos:start="521:10" pos:end="521:15">IF_XEN</name></expr>:</case>

    <case pos:start="523:5" pos:end="523:17">case <expr pos:start="523:10" pos:end="523:16"><name pos:start="523:10" pos:end="523:16">IF_NONE</name></expr>:</case>

        <switch pos:start="525:9" pos:end="547:9">switch<condition pos:start="525:15" pos:end="525:21">(<expr pos:start="525:16" pos:end="525:20"><name pos:start="525:16" pos:end="525:20">media</name></expr>)</condition> <block pos:start="525:23" pos:end="547:9">{<block_content pos:start="527:9" pos:end="545:18">

	<case pos:start="527:9" pos:end="527:24">case <expr pos:start="527:14" pos:end="527:23"><name pos:start="527:14" pos:end="527:23">MEDIA_DISK</name></expr>:</case>

            <if_stmt pos:start="529:13" pos:end="535:13"><if pos:start="529:13" pos:end="535:13">if <condition pos:start="529:16" pos:end="529:26">(<expr pos:start="529:17" pos:end="529:25"><name pos:start="529:17" pos:end="529:20">cyls</name> <operator pos:start="529:22" pos:end="529:23">!=</operator> <literal type="number" pos:start="529:25" pos:end="529:25">0</literal></expr>)</condition> <block pos:start="529:28" pos:end="535:13">{<block_content pos:start="531:17" pos:end="533:68">

                <expr_stmt pos:start="531:17" pos:end="531:71"><expr pos:start="531:17" pos:end="531:70"><call pos:start="531:17" pos:end="531:70"><name pos:start="531:17" pos:end="531:38">bdrv_set_geometry_hint</name><argument_list pos:start="531:39" pos:end="531:70">(<argument pos:start="531:40" pos:end="531:50"><expr pos:start="531:40" pos:end="531:50"><name pos:start="531:40" pos:end="531:50"><name pos:start="531:40" pos:end="531:44">dinfo</name><operator pos:start="531:45" pos:end="531:46">-&gt;</operator><name pos:start="531:47" pos:end="531:50">bdrv</name></name></expr></argument>, <argument pos:start="531:53" pos:end="531:56"><expr pos:start="531:53" pos:end="531:56"><name pos:start="531:53" pos:end="531:56">cyls</name></expr></argument>, <argument pos:start="531:59" pos:end="531:63"><expr pos:start="531:59" pos:end="531:63"><name pos:start="531:59" pos:end="531:63">heads</name></expr></argument>, <argument pos:start="531:66" pos:end="531:69"><expr pos:start="531:66" pos:end="531:69"><name pos:start="531:66" pos:end="531:69">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="533:17" pos:end="533:68"><expr pos:start="533:17" pos:end="533:67"><call pos:start="533:17" pos:end="533:67"><name pos:start="533:17" pos:end="533:41">bdrv_set_translation_hint</name><argument_list pos:start="533:42" pos:end="533:67">(<argument pos:start="533:43" pos:end="533:53"><expr pos:start="533:43" pos:end="533:53"><name pos:start="533:43" pos:end="533:53"><name pos:start="533:43" pos:end="533:47">dinfo</name><operator pos:start="533:48" pos:end="533:49">-&gt;</operator><name pos:start="533:50" pos:end="533:53">bdrv</name></name></expr></argument>, <argument pos:start="533:56" pos:end="533:66"><expr pos:start="533:56" pos:end="533:66"><name pos:start="533:56" pos:end="533:66">translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <break pos:start="537:13" pos:end="537:18">break;</break>

	<case pos:start="539:9" pos:end="539:25">case <expr pos:start="539:14" pos:end="539:24"><name pos:start="539:14" pos:end="539:24">MEDIA_CDROM</name></expr>:</case>

            <expr_stmt pos:start="541:13" pos:end="541:47"><expr pos:start="541:13" pos:end="541:46"><call pos:start="541:13" pos:end="541:46"><name pos:start="541:13" pos:end="541:30">bdrv_set_removable</name><argument_list pos:start="541:31" pos:end="541:46">(<argument pos:start="541:32" pos:end="541:42"><expr pos:start="541:32" pos:end="541:42"><name pos:start="541:32" pos:end="541:42"><name pos:start="541:32" pos:end="541:36">dinfo</name><operator pos:start="541:37" pos:end="541:38">-&gt;</operator><name pos:start="541:39" pos:end="541:42">bdrv</name></name></expr></argument>, <argument pos:start="541:45" pos:end="541:45"><expr pos:start="541:45" pos:end="541:45"><literal type="number" pos:start="541:45" pos:end="541:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:32"><expr pos:start="543:13" pos:end="543:31"><name pos:start="543:13" pos:end="543:27"><name pos:start="543:13" pos:end="543:17">dinfo</name><operator pos:start="543:18" pos:end="543:19">-&gt;</operator><name pos:start="543:20" pos:end="543:27">media_cd</name></name> <operator pos:start="543:29" pos:end="543:29">=</operator> <literal type="number" pos:start="543:31" pos:end="543:31">1</literal></expr>;</expr_stmt>

	    <break pos:start="545:13" pos:end="545:18">break;</break>

	</block_content>}</block></switch>

        <break pos:start="549:9" pos:end="549:14">break;</break>

    <case pos:start="551:5" pos:end="551:15">case <expr pos:start="551:10" pos:end="551:14"><name pos:start="551:10" pos:end="551:14">IF_SD</name></expr>:</case>

        <comment type="block" pos:start="553:9" pos:end="555:29">/* FIXME: This isn't really a floppy, but it's a reasonable

           approximation.  */</comment>

    <case pos:start="557:5" pos:end="557:19">case <expr pos:start="557:10" pos:end="557:18"><name pos:start="557:10" pos:end="557:18">IF_FLOPPY</name></expr>:</case>

        <expr_stmt pos:start="559:9" pos:end="559:43"><expr pos:start="559:9" pos:end="559:42"><call pos:start="559:9" pos:end="559:42"><name pos:start="559:9" pos:end="559:26">bdrv_set_removable</name><argument_list pos:start="559:27" pos:end="559:42">(<argument pos:start="559:28" pos:end="559:38"><expr pos:start="559:28" pos:end="559:38"><name pos:start="559:28" pos:end="559:38"><name pos:start="559:28" pos:end="559:32">dinfo</name><operator pos:start="559:33" pos:end="559:34">-&gt;</operator><name pos:start="559:35" pos:end="559:38">bdrv</name></name></expr></argument>, <argument pos:start="559:41" pos:end="559:41"><expr pos:start="559:41" pos:end="559:41"><literal type="number" pos:start="559:41" pos:end="559:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="561:9" pos:end="561:14">break;</break>

    <case pos:start="563:5" pos:end="563:19">case <expr pos:start="563:10" pos:end="563:18"><name pos:start="563:10" pos:end="563:18">IF_PFLASH</name></expr>:</case>

    <case pos:start="565:5" pos:end="565:16">case <expr pos:start="565:10" pos:end="565:15"><name pos:start="565:10" pos:end="565:15">IF_MTD</name></expr>:</case>

        <break pos:start="567:9" pos:end="567:14">break;</break>

    <case pos:start="569:5" pos:end="569:19">case <expr pos:start="569:10" pos:end="569:18"><name pos:start="569:10" pos:end="569:18">IF_VIRTIO</name></expr>:</case>

        <comment type="block" pos:start="571:9" pos:end="571:37">/* add virtio block device */</comment>

        <expr_stmt pos:start="573:9" pos:end="573:67"><expr pos:start="573:9" pos:end="573:66"><name pos:start="573:9" pos:end="573:12">opts</name> <operator pos:start="573:14" pos:end="573:14">=</operator> <call pos:start="573:16" pos:end="573:66"><name pos:start="573:16" pos:end="573:31">qemu_opts_create</name><argument_list pos:start="573:32" pos:end="573:66">(<argument pos:start="573:33" pos:end="573:56"><expr pos:start="573:33" pos:end="573:56"><call pos:start="573:33" pos:end="573:56"><name pos:start="573:33" pos:end="573:46">qemu_find_opts</name><argument_list pos:start="573:47" pos:end="573:56">(<argument pos:start="573:48" pos:end="573:55"><expr pos:start="573:48" pos:end="573:55"><literal type="string" pos:start="573:48" pos:end="573:55">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="573:59" pos:end="573:62"><expr pos:start="573:59" pos:end="573:62"><name pos:start="573:59" pos:end="573:62">NULL</name></expr></argument>, <argument pos:start="573:65" pos:end="573:65"><expr pos:start="573:65" pos:end="573:65"><literal type="number" pos:start="573:65" pos:end="573:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="575:9" pos:end="575:51"><expr pos:start="575:9" pos:end="575:50"><call pos:start="575:9" pos:end="575:50"><name pos:start="575:9" pos:end="575:20">qemu_opt_set</name><argument_list pos:start="575:21" pos:end="575:50">(<argument pos:start="575:22" pos:end="575:25"><expr pos:start="575:22" pos:end="575:25"><name pos:start="575:22" pos:end="575:25">opts</name></expr></argument>, <argument pos:start="575:28" pos:end="575:35"><expr pos:start="575:28" pos:end="575:35"><literal type="string" pos:start="575:28" pos:end="575:35">"driver"</literal></expr></argument>, <argument pos:start="575:38" pos:end="575:49"><expr pos:start="575:38" pos:end="575:49"><literal type="string" pos:start="575:38" pos:end="575:49">"virtio-blk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="577:9" pos:end="577:47"><expr pos:start="577:9" pos:end="577:46"><call pos:start="577:9" pos:end="577:46"><name pos:start="577:9" pos:end="577:20">qemu_opt_set</name><argument_list pos:start="577:21" pos:end="577:46">(<argument pos:start="577:22" pos:end="577:25"><expr pos:start="577:22" pos:end="577:25"><name pos:start="577:22" pos:end="577:25">opts</name></expr></argument>, <argument pos:start="577:28" pos:end="577:34"><expr pos:start="577:28" pos:end="577:34"><literal type="string" pos:start="577:28" pos:end="577:34">"drive"</literal></expr></argument>, <argument pos:start="577:37" pos:end="577:45"><expr pos:start="577:37" pos:end="577:45"><name pos:start="577:37" pos:end="577:45"><name pos:start="577:37" pos:end="577:41">dinfo</name><operator pos:start="577:42" pos:end="577:43">-&gt;</operator><name pos:start="577:44" pos:end="577:45">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="579:9" pos:end="581:48"><if pos:start="579:9" pos:end="581:48">if <condition pos:start="579:12" pos:end="579:20">(<expr pos:start="579:13" pos:end="579:19"><name pos:start="579:13" pos:end="579:19">devaddr</name></expr>)</condition><block type="pseudo" pos:start="581:13" pos:end="581:48"><block_content pos:start="581:13" pos:end="581:48">

            <expr_stmt pos:start="581:13" pos:end="581:48"><expr pos:start="581:13" pos:end="581:47"><call pos:start="581:13" pos:end="581:47"><name pos:start="581:13" pos:end="581:24">qemu_opt_set</name><argument_list pos:start="581:25" pos:end="581:47">(<argument pos:start="581:26" pos:end="581:29"><expr pos:start="581:26" pos:end="581:29"><name pos:start="581:26" pos:end="581:29">opts</name></expr></argument>, <argument pos:start="581:32" pos:end="581:37"><expr pos:start="581:32" pos:end="581:37"><literal type="string" pos:start="581:32" pos:end="581:37">"addr"</literal></expr></argument>, <argument pos:start="581:40" pos:end="581:46"><expr pos:start="581:40" pos:end="581:46"><name pos:start="581:40" pos:end="581:46">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="583:9" pos:end="583:14">break;</break>

    <default pos:start="585:5" pos:end="585:12">default:</default>

        <expr_stmt pos:start="587:9" pos:end="587:16"><expr pos:start="587:9" pos:end="587:15"><call pos:start="587:9" pos:end="587:15"><name pos:start="587:9" pos:end="587:13">abort</name><argument_list pos:start="587:14" pos:end="587:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="591:5" pos:end="595:5"><if pos:start="591:5" pos:end="595:5">if <condition pos:start="591:8" pos:end="591:24">(<expr pos:start="591:9" pos:end="591:23"><operator pos:start="591:9" pos:end="591:9">!</operator><name pos:start="591:10" pos:end="591:13">file</name> <operator pos:start="591:15" pos:end="591:16">||</operator> <operator pos:start="591:18" pos:end="591:18">!</operator><operator pos:start="591:19" pos:end="591:19">*</operator><name pos:start="591:20" pos:end="591:23">file</name></expr>)</condition> <block pos:start="591:26" pos:end="595:5">{<block_content pos:start="593:9" pos:end="593:21">

        <return pos:start="593:9" pos:end="593:21">return <expr pos:start="593:16" pos:end="593:20"><name pos:start="593:16" pos:end="593:20">dinfo</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="597:5" pos:end="605:5"><if pos:start="597:5" pos:end="605:5">if <condition pos:start="597:8" pos:end="597:17">(<expr pos:start="597:9" pos:end="597:16"><name pos:start="597:9" pos:end="597:16">snapshot</name></expr>)</condition> <block pos:start="597:19" pos:end="605:5">{<block_content pos:start="601:9" pos:end="603:72">

        <comment type="block" pos:start="599:9" pos:end="599:51">/* always use cache=unsafe with snapshot */</comment>

        <expr_stmt pos:start="601:9" pos:end="601:41"><expr pos:start="601:9" pos:end="601:40"><name pos:start="601:9" pos:end="601:18">bdrv_flags</name> <operator pos:start="601:20" pos:end="601:21">&amp;=</operator> <operator pos:start="601:23" pos:end="601:23">~</operator><name pos:start="601:24" pos:end="601:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="603:9" pos:end="603:72"><expr pos:start="603:9" pos:end="603:71"><name pos:start="603:9" pos:end="603:18">bdrv_flags</name> <operator pos:start="603:20" pos:end="603:21">|=</operator> <operator pos:start="603:23" pos:end="603:23">(</operator><name pos:start="603:24" pos:end="603:38">BDRV_O_SNAPSHOT</name><operator pos:start="603:39" pos:end="603:39">|</operator><name pos:start="603:40" pos:end="603:54">BDRV_O_CACHE_WB</name><operator pos:start="603:55" pos:end="603:55">|</operator><name pos:start="603:56" pos:end="603:70">BDRV_O_NO_FLUSH</name><operator pos:start="603:71" pos:end="603:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="609:5" pos:end="625:5"><if pos:start="609:5" pos:end="615:5">if <condition pos:start="609:8" pos:end="609:29">(<expr pos:start="609:9" pos:end="609:28"><name pos:start="609:9" pos:end="609:13">media</name> <operator pos:start="609:15" pos:end="609:16">==</operator> <name pos:start="609:18" pos:end="609:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="609:31" pos:end="615:5">{<block_content pos:start="613:9" pos:end="613:15">

        <comment type="block" pos:start="611:9" pos:end="611:60">/* CDROM is fine for any interface, don't check.  */</comment>

        <expr_stmt pos:start="613:9" pos:end="613:15"><expr pos:start="613:9" pos:end="613:14"><name pos:start="613:9" pos:end="613:10">ro</name> <operator pos:start="613:12" pos:end="613:12">=</operator> <literal type="number" pos:start="613:14" pos:end="613:14">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="615:7" pos:end="625:5">else if <condition pos:start="615:15" pos:end="615:23">(<expr pos:start="615:16" pos:end="615:22"><name pos:start="615:16" pos:end="615:17">ro</name> <operator pos:start="615:19" pos:end="615:20">==</operator> <literal type="number" pos:start="615:22" pos:end="615:22">1</literal></expr>)</condition> <block pos:start="615:25" pos:end="625:5">{<block_content pos:start="617:9" pos:end="623:9">

        <if_stmt pos:start="617:9" pos:end="623:9"><if pos:start="617:9" pos:end="623:9">if <condition pos:start="617:12" pos:end="617:89">(<expr pos:start="617:13" pos:end="617:88"><name pos:start="617:13" pos:end="617:16">type</name> <operator pos:start="617:18" pos:end="617:19">!=</operator> <name pos:start="617:21" pos:end="617:27">IF_SCSI</name> <operator pos:start="617:29" pos:end="617:30">&amp;&amp;</operator> <name pos:start="617:32" pos:end="617:35">type</name> <operator pos:start="617:37" pos:end="617:38">!=</operator> <name pos:start="617:40" pos:end="617:48">IF_VIRTIO</name> <operator pos:start="617:50" pos:end="617:51">&amp;&amp;</operator> <name pos:start="617:53" pos:end="617:56">type</name> <operator pos:start="617:58" pos:end="617:59">!=</operator> <name pos:start="617:61" pos:end="617:69">IF_FLOPPY</name> <operator pos:start="617:71" pos:end="617:72">&amp;&amp;</operator> <name pos:start="617:74" pos:end="617:77">type</name> <operator pos:start="617:79" pos:end="617:80">!=</operator> <name pos:start="617:82" pos:end="617:88">IF_NONE</name></expr>)</condition> <block pos:start="617:91" pos:end="623:9">{<block_content pos:start="619:13" pos:end="621:21">

            <expr_stmt pos:start="619:13" pos:end="619:68"><expr pos:start="619:13" pos:end="619:67"><call pos:start="619:13" pos:end="619:67"><name pos:start="619:13" pos:end="619:24">error_report</name><argument_list pos:start="619:25" pos:end="619:67">(<argument pos:start="619:26" pos:end="619:66"><expr pos:start="619:26" pos:end="619:66"><literal type="string" pos:start="619:26" pos:end="619:66">"readonly not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="621:13" pos:end="621:21">goto <name pos:start="621:18" pos:end="621:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="629:5" pos:end="629:39"><expr pos:start="629:5" pos:end="629:38"><name pos:start="629:5" pos:end="629:14">bdrv_flags</name> <operator pos:start="629:16" pos:end="629:17">|=</operator> <ternary pos:start="629:19" pos:end="629:38"><condition pos:start="629:19" pos:end="629:22"><expr pos:start="629:19" pos:end="629:20"><name pos:start="629:19" pos:end="629:20">ro</name></expr> ?</condition><then pos:start="629:24" pos:end="629:24"> <expr pos:start="629:24" pos:end="629:24"><literal type="number" pos:start="629:24" pos:end="629:24">0</literal></expr> </then><else pos:start="629:26" pos:end="629:38">: <expr pos:start="629:28" pos:end="629:38"><name pos:start="629:28" pos:end="629:38">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="633:5" pos:end="633:56"><expr pos:start="633:5" pos:end="633:55"><name pos:start="633:5" pos:end="633:7">ret</name> <operator pos:start="633:9" pos:end="633:9">=</operator> <call pos:start="633:11" pos:end="633:55"><name pos:start="633:11" pos:end="633:19">bdrv_open</name><argument_list pos:start="633:20" pos:end="633:55">(<argument pos:start="633:21" pos:end="633:31"><expr pos:start="633:21" pos:end="633:31"><name pos:start="633:21" pos:end="633:31"><name pos:start="633:21" pos:end="633:25">dinfo</name><operator pos:start="633:26" pos:end="633:27">-&gt;</operator><name pos:start="633:28" pos:end="633:31">bdrv</name></name></expr></argument>, <argument pos:start="633:34" pos:end="633:37"><expr pos:start="633:34" pos:end="633:37"><name pos:start="633:34" pos:end="633:37">file</name></expr></argument>, <argument pos:start="633:40" pos:end="633:49"><expr pos:start="633:40" pos:end="633:49"><name pos:start="633:40" pos:end="633:49">bdrv_flags</name></expr></argument>, <argument pos:start="633:52" pos:end="633:54"><expr pos:start="633:52" pos:end="633:54"><name pos:start="633:52" pos:end="633:54">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="635:5" pos:end="643:5"><if pos:start="635:5" pos:end="643:5">if <condition pos:start="635:8" pos:end="635:16">(<expr pos:start="635:9" pos:end="635:15"><name pos:start="635:9" pos:end="635:11">ret</name> <operator pos:start="635:13" pos:end="635:13">&lt;</operator> <literal type="number" pos:start="635:15" pos:end="635:15">0</literal></expr>)</condition> <block pos:start="635:18" pos:end="643:5">{<block_content pos:start="637:9" pos:end="641:17">

        <expr_stmt pos:start="637:9" pos:end="639:43"><expr pos:start="637:9" pos:end="639:42"><call pos:start="637:9" pos:end="639:42"><name pos:start="637:9" pos:end="637:20">error_report</name><argument_list pos:start="637:21" pos:end="639:42">(<argument pos:start="637:22" pos:end="637:55"><expr pos:start="637:22" pos:end="637:55"><literal type="string" pos:start="637:22" pos:end="637:55">"could not open disk image %s: %s"</literal></expr></argument>,

                     <argument pos:start="639:22" pos:end="639:25"><expr pos:start="639:22" pos:end="639:25"><name pos:start="639:22" pos:end="639:25">file</name></expr></argument>, <argument pos:start="639:28" pos:end="639:41"><expr pos:start="639:28" pos:end="639:41"><call pos:start="639:28" pos:end="639:41"><name pos:start="639:28" pos:end="639:35">strerror</name><argument_list pos:start="639:36" pos:end="639:41">(<argument pos:start="639:37" pos:end="639:40"><expr pos:start="639:37" pos:end="639:40"><operator pos:start="639:37" pos:end="639:37">-</operator><name pos:start="639:38" pos:end="639:40">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="641:9" pos:end="641:17">goto <name pos:start="641:14" pos:end="641:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="647:5" pos:end="649:22"><if pos:start="647:5" pos:end="649:22">if <condition pos:start="647:8" pos:end="647:39">(<expr pos:start="647:9" pos:end="647:38"><call pos:start="647:9" pos:end="647:38"><name pos:start="647:9" pos:end="647:25">bdrv_key_required</name><argument_list pos:start="647:26" pos:end="647:38">(<argument pos:start="647:27" pos:end="647:37"><expr pos:start="647:27" pos:end="647:37"><name pos:start="647:27" pos:end="647:37"><name pos:start="647:27" pos:end="647:31">dinfo</name><operator pos:start="647:32" pos:end="647:33">-&gt;</operator><name pos:start="647:34" pos:end="647:37">bdrv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="649:9" pos:end="649:22"><block_content pos:start="649:9" pos:end="649:22">

        <expr_stmt pos:start="649:9" pos:end="649:22"><expr pos:start="649:9" pos:end="649:21"><name pos:start="649:9" pos:end="649:17">autostart</name> <operator pos:start="649:19" pos:end="649:19">=</operator> <literal type="number" pos:start="649:21" pos:end="649:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="651:5" pos:end="651:17">return <expr pos:start="651:12" pos:end="651:16"><name pos:start="651:12" pos:end="651:16">dinfo</name></expr>;</return>



<label pos:start="655:1" pos:end="655:4"><name pos:start="655:1" pos:end="655:3">err</name>:</label>

    <expr_stmt pos:start="657:5" pos:end="657:29"><expr pos:start="657:5" pos:end="657:28"><call pos:start="657:5" pos:end="657:28"><name pos:start="657:5" pos:end="657:15">bdrv_delete</name><argument_list pos:start="657:16" pos:end="657:28">(<argument pos:start="657:17" pos:end="657:27"><expr pos:start="657:17" pos:end="657:27"><name pos:start="657:17" pos:end="657:27"><name pos:start="657:17" pos:end="657:21">dinfo</name><operator pos:start="657:22" pos:end="657:23">-&gt;</operator><name pos:start="657:24" pos:end="657:27">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="659:5" pos:end="659:25"><expr pos:start="659:5" pos:end="659:24"><call pos:start="659:5" pos:end="659:24"><name pos:start="659:5" pos:end="659:13">qemu_free</name><argument_list pos:start="659:14" pos:end="659:24">(<argument pos:start="659:15" pos:end="659:23"><expr pos:start="659:15" pos:end="659:23"><name pos:start="659:15" pos:end="659:23"><name pos:start="659:15" pos:end="659:19">dinfo</name><operator pos:start="659:20" pos:end="659:21">-&gt;</operator><name pos:start="659:22" pos:end="659:23">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="661:5" pos:end="661:40"><expr pos:start="661:5" pos:end="661:39"><call pos:start="661:5" pos:end="661:39"><name pos:start="661:5" pos:end="661:17">QTAILQ_REMOVE</name><argument_list pos:start="661:18" pos:end="661:39">(<argument pos:start="661:19" pos:end="661:25"><expr pos:start="661:19" pos:end="661:25"><operator pos:start="661:19" pos:end="661:19">&amp;</operator><name pos:start="661:20" pos:end="661:25">drives</name></expr></argument>, <argument pos:start="661:28" pos:end="661:32"><expr pos:start="661:28" pos:end="661:32"><name pos:start="661:28" pos:end="661:32">dinfo</name></expr></argument>, <argument pos:start="661:35" pos:end="661:38"><expr pos:start="661:35" pos:end="661:38"><name pos:start="661:35" pos:end="661:38">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="663:5" pos:end="663:21"><expr pos:start="663:5" pos:end="663:20"><call pos:start="663:5" pos:end="663:20"><name pos:start="663:5" pos:end="663:13">qemu_free</name><argument_list pos:start="663:14" pos:end="663:20">(<argument pos:start="663:15" pos:end="663:19"><expr pos:start="663:15" pos:end="663:19"><name pos:start="663:15" pos:end="663:19">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="665:5" pos:end="665:16">return <expr pos:start="665:12" pos:end="665:15"><name pos:start="665:12" pos:end="665:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
