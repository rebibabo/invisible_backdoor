<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16591.c" pos:tabs="8"><function pos:start="1:1" pos:end="437:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcm_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="437:1">{<block_content pos:start="7:5" pos:end="435:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">src</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>       <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">PCMDecode</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:16">s</name>       <init pos:start="11:24" pos:end="11:41">= <expr pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:30">avctx</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">sample_size</name></decl>, <decl pos:start="13:22" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:22" pos:end="13:22">c</name></decl>, <decl pos:start="13:25" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:25" pos:end="13:25">n</name></decl>, <decl pos:start="13:28" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:28" pos:end="13:30">ret</name></decl>, <decl pos:start="13:33" pos:end="13:49"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:33" pos:end="13:49">samples_per_block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">int32_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:24">dst_int32_t</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:62"><expr pos:start="21:5" pos:end="21:61"><name pos:start="21:5" pos:end="21:15">sample_size</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:57"><name pos:start="21:19" pos:end="21:40">av_get_bits_per_sample</name><argument_list pos:start="21:41" pos:end="21:57">(<argument pos:start="21:42" pos:end="21:56"><expr pos:start="21:42" pos:end="21:56"><name pos:start="21:42" pos:end="21:56"><name pos:start="21:42" pos:end="21:46">avctx</name><operator pos:start="21:47" pos:end="21:48">-&gt;</operator><name pos:start="21:49" pos:end="21:56">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:59" pos:end="21:59">/</operator> <literal type="number" pos:start="21:61" pos:end="21:61">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:66">/* av_get_bits_per_sample returns 0 for AV_CODEC_ID_PCM_DVD */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:21">samples_per_block</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="number" pos:start="27:25" pos:end="27:25">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="55:5"><if pos:start="29:5" pos:end="47:5">if <condition pos:start="29:8" pos:end="29:47">(<expr pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:27">AV_CODEC_ID_PCM_DVD</name> <operator pos:start="29:29" pos:end="29:30">==</operator> <name pos:start="29:32" pos:end="29:46"><name pos:start="29:32" pos:end="29:36">avctx</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:46">codec_id</name></name></expr>)</condition> <block pos:start="29:49" pos:end="47:5">{<block_content pos:start="31:9" pos:end="45:65">

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="33:47">(<expr pos:start="31:13" pos:end="33:46"><name pos:start="31:13" pos:end="31:40"><name pos:start="31:13" pos:end="31:17">avctx</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:40">bits_per_coded_sample</name></name> <operator pos:start="31:42" pos:end="31:43">!=</operator> <literal type="number" pos:start="31:45" pos:end="31:46">20</literal> <operator pos:start="31:48" pos:end="31:49">&amp;&amp;</operator>

            <name pos:start="33:13" pos:end="33:40"><name pos:start="33:13" pos:end="33:17">avctx</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:40">bits_per_coded_sample</name></name> <operator pos:start="33:42" pos:end="33:43">!=</operator> <literal type="number" pos:start="33:45" pos:end="33:46">24</literal></expr>)</condition> <block pos:start="33:49" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:35">

            <expr_stmt pos:start="35:13" pos:end="35:78"><expr pos:start="35:13" pos:end="35:77"><call pos:start="35:13" pos:end="35:77"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:77">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:41" pos:end="35:76"><expr pos:start="35:41" pos:end="35:76"><literal type="string" pos:start="35:41" pos:end="35:76">"PCM DVD unsupported sample depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:35">return <expr pos:start="37:20" pos:end="37:34"><call pos:start="37:20" pos:end="37:34"><name pos:start="37:20" pos:end="37:26">AVERROR</name><argument_list pos:start="37:27" pos:end="37:34">(<argument pos:start="37:28" pos:end="37:33"><expr pos:start="37:28" pos:end="37:33"><name pos:start="37:28" pos:end="37:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:60">/* 2 samples are interleaved per block in PCM_DVD */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:25">samples_per_block</name> <operator pos:start="43:27" pos:end="43:27">=</operator> <literal type="number" pos:start="43:29" pos:end="43:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:65"><expr pos:start="45:9" pos:end="45:64"><name pos:start="45:9" pos:end="45:19">sample_size</name>       <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:56"><name pos:start="45:29" pos:end="45:33">avctx</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:56">bits_per_coded_sample</name></name> <operator pos:start="45:58" pos:end="45:58">*</operator> <literal type="number" pos:start="45:60" pos:end="45:60">2</literal> <operator pos:start="45:62" pos:end="45:62">/</operator> <literal type="number" pos:start="45:64" pos:end="45:64">8</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="47:7" pos:end="55:5">else if <condition pos:start="47:15" pos:end="47:54">(<expr pos:start="47:16" pos:end="47:53"><name pos:start="47:16" pos:end="47:30"><name pos:start="47:16" pos:end="47:20">avctx</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:30">codec_id</name></name> <operator pos:start="47:32" pos:end="47:33">==</operator> <name pos:start="47:35" pos:end="47:53">AV_CODEC_ID_PCM_LXF</name></expr>)</condition> <block pos:start="47:56" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:30">

        <comment type="block" pos:start="49:9" pos:end="49:58">/* we process 40-bit blocks per channel for LXF */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:25">samples_per_block</name> <operator pos:start="51:27" pos:end="51:27">=</operator> <literal type="number" pos:start="51:29" pos:end="51:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:19">sample_size</name>       <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">5</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:25">(<expr pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:19">sample_size</name> <operator pos:start="59:21" pos:end="59:22">==</operator> <literal type="number" pos:start="59:24" pos:end="59:24">0</literal></expr>)</condition> <block pos:start="59:27" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:31">

        <expr_stmt pos:start="61:9" pos:end="61:61"><expr pos:start="61:9" pos:end="61:60"><call pos:start="61:9" pos:end="61:60"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:60">(<argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">avctx</name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="61:59"><expr pos:start="61:37" pos:end="61:59"><literal type="string" pos:start="61:37" pos:end="61:59">"Invalid sample_size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:31">return <expr pos:start="63:16" pos:end="63:30"><call pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:30">(<argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:38"><expr pos:start="69:5" pos:end="69:37"><name pos:start="69:5" pos:end="69:5">n</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:13">avctx</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:23">channels</name></name> <operator pos:start="69:25" pos:end="69:25">*</operator> <name pos:start="69:27" pos:end="69:37">sample_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:26">(<expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:9">n</name> <operator pos:start="73:11" pos:end="73:12">&amp;&amp;</operator> <name pos:start="73:14" pos:end="73:21">buf_size</name> <operator pos:start="73:23" pos:end="73:23">%</operator> <name pos:start="73:25" pos:end="73:25">n</name></expr>)</condition> <block pos:start="73:28" pos:end="85:5">{<block_content pos:start="75:9" pos:end="83:37">

        <if_stmt pos:start="75:9" pos:end="83:37"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:25">(<expr pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:20">buf_size</name> <operator pos:start="75:22" pos:end="75:22">&lt;</operator> <name pos:start="75:24" pos:end="75:24">n</name></expr>)</condition> <block pos:start="75:27" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:22">

            <expr_stmt pos:start="77:13" pos:end="77:64"><expr pos:start="77:13" pos:end="77:63"><call pos:start="77:13" pos:end="77:63"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:63">(<argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">avctx</name></expr></argument>, <argument pos:start="77:27" pos:end="77:38"><expr pos:start="77:27" pos:end="77:38"><name pos:start="77:27" pos:end="77:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:41" pos:end="77:62"><expr pos:start="77:41" pos:end="77:62"><literal type="string" pos:start="77:41" pos:end="77:62">"invalid PCM packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:22">return <expr pos:start="79:20" pos:end="79:21"><operator pos:start="79:20" pos:end="79:20">-</operator><literal type="number" pos:start="79:21" pos:end="79:21">1</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="81:11" pos:end="83:37">else<block type="pseudo" pos:start="83:13" pos:end="83:37"><block_content pos:start="83:13" pos:end="83:37">

            <expr_stmt pos:start="83:13" pos:end="83:37"><expr pos:start="83:13" pos:end="83:36"><name pos:start="83:13" pos:end="83:20">buf_size</name> <operator pos:start="83:22" pos:end="83:23">-=</operator> <name pos:start="83:25" pos:end="83:32">buf_size</name> <operator pos:start="83:34" pos:end="83:34">%</operator> <name pos:start="83:36" pos:end="83:36">n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:31"><expr pos:start="89:5" pos:end="89:30"><name pos:start="89:5" pos:end="89:5">n</name> <operator pos:start="89:7" pos:end="89:7">=</operator> <name pos:start="89:9" pos:end="89:16">buf_size</name> <operator pos:start="89:18" pos:end="89:18">/</operator> <name pos:start="89:20" pos:end="89:30">sample_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:27">/* get output buffer */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:66"><expr pos:start="95:5" pos:end="95:65"><name pos:start="95:5" pos:end="95:23"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:12">frame</name><operator pos:start="95:13" pos:end="95:13">.</operator><name pos:start="95:14" pos:end="95:23">nb_samples</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:27">n</name> <operator pos:start="95:29" pos:end="95:29">*</operator> <name pos:start="95:31" pos:end="95:47">samples_per_block</name> <operator pos:start="95:49" pos:end="95:49">/</operator> <name pos:start="95:51" pos:end="95:65"><name pos:start="95:51" pos:end="95:55">avctx</name><operator pos:start="95:56" pos:end="95:57">-&gt;</operator><name pos:start="95:58" pos:end="95:65">channels</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:56">(<expr pos:start="97:9" pos:end="97:55"><operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:12">ret</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:50"><name pos:start="97:16" pos:end="97:32"><name pos:start="97:16" pos:end="97:20">avctx</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:32">get_buffer</name></name><argument_list pos:start="97:33" pos:end="97:50">(<argument pos:start="97:34" pos:end="97:38"><expr pos:start="97:34" pos:end="97:38"><name pos:start="97:34" pos:end="97:38">avctx</name></expr></argument>, <argument pos:start="97:41" pos:end="97:49"><expr pos:start="97:41" pos:end="97:49"><operator pos:start="97:41" pos:end="97:41">&amp;</operator><name pos:start="97:42" pos:end="97:49"><name pos:start="97:42" pos:end="97:42">s</name><operator pos:start="97:43" pos:end="97:44">-&gt;</operator><name pos:start="97:45" pos:end="97:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="97:51" pos:end="97:51">)</operator> <operator pos:start="97:53" pos:end="97:53">&lt;</operator> <literal type="number" pos:start="97:55" pos:end="97:55">0</literal></expr>)</condition> <block pos:start="97:58" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:19">

        <expr_stmt pos:start="99:9" pos:end="99:61"><expr pos:start="99:9" pos:end="99:60"><call pos:start="99:9" pos:end="99:60"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:60">(<argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><name pos:start="99:16" pos:end="99:20">avctx</name></expr></argument>, <argument pos:start="99:23" pos:end="99:34"><expr pos:start="99:23" pos:end="99:34"><name pos:start="99:23" pos:end="99:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:37" pos:end="99:59"><expr pos:start="99:37" pos:end="99:59"><literal type="string" pos:start="99:37" pos:end="99:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:19">return <expr pos:start="101:16" pos:end="101:18"><name pos:start="101:16" pos:end="101:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:31"><expr pos:start="105:5" pos:end="105:30"><name pos:start="105:5" pos:end="105:11">samples</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <name pos:start="105:15" pos:end="105:30"><name pos:start="105:15" pos:end="105:15">s</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:22">frame</name><operator pos:start="105:23" pos:end="105:23">.</operator><name pos:start="105:24" pos:end="105:27">data</name><index pos:start="105:28" pos:end="105:30">[<expr pos:start="105:29" pos:end="105:29"><literal type="number" pos:start="105:29" pos:end="105:29">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <switch pos:start="109:5" pos:end="425:5">switch <condition pos:start="109:12" pos:end="109:29">(<expr pos:start="109:13" pos:end="109:28"><name pos:start="109:13" pos:end="109:28"><name pos:start="109:13" pos:end="109:17">avctx</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:24">codec</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:28">id</name></name></expr>)</condition> <block pos:start="109:31" pos:end="425:5">{<block_content pos:start="111:5" pos:end="423:18">

    <case pos:start="111:5" pos:end="111:31">case <expr pos:start="111:10" pos:end="111:30"><name pos:start="111:10" pos:end="111:30">AV_CODEC_ID_PCM_U32LE</name></expr>:</case>

        <macro pos:start="113:9" pos:end="113:56"><name pos:start="113:9" pos:end="113:14">DECODE</name><argument_list pos:start="113:15" pos:end="113:56">(<argument pos:start="113:16" pos:end="113:17"><literal type="number" pos:start="113:16" pos:end="113:17">32</literal></argument>, <argument pos:start="113:20" pos:end="113:23">le32</argument>, <argument pos:start="113:26" pos:end="113:28">src</argument>, <argument pos:start="113:31" pos:end="113:37">samples</argument>, <argument pos:start="113:40" pos:end="113:40">n</argument>, <argument pos:start="113:43" pos:end="113:43"><literal type="number" pos:start="113:43" pos:end="113:43">0</literal></argument>, <argument pos:start="113:46" pos:end="113:55"><literal type="number" pos:start="113:46" pos:end="113:55">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:31">case <expr pos:start="117:10" pos:end="117:30"><name pos:start="117:10" pos:end="117:30">AV_CODEC_ID_PCM_U32BE</name></expr>:</case>

        <macro pos:start="119:9" pos:end="119:56"><name pos:start="119:9" pos:end="119:14">DECODE</name><argument_list pos:start="119:15" pos:end="119:56">(<argument pos:start="119:16" pos:end="119:17"><literal type="number" pos:start="119:16" pos:end="119:17">32</literal></argument>, <argument pos:start="119:20" pos:end="119:23">be32</argument>, <argument pos:start="119:26" pos:end="119:28">src</argument>, <argument pos:start="119:31" pos:end="119:37">samples</argument>, <argument pos:start="119:40" pos:end="119:40">n</argument>, <argument pos:start="119:43" pos:end="119:43"><literal type="number" pos:start="119:43" pos:end="119:43">0</literal></argument>, <argument pos:start="119:46" pos:end="119:55"><literal type="number" pos:start="119:46" pos:end="119:55">0x80000000</literal></argument>)</argument_list></macro>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:31">case <expr pos:start="123:10" pos:end="123:30"><name pos:start="123:10" pos:end="123:30">AV_CODEC_ID_PCM_S24LE</name></expr>:</case>

        <macro pos:start="125:9" pos:end="125:47"><name pos:start="125:9" pos:end="125:14">DECODE</name><argument_list pos:start="125:15" pos:end="125:47">(<argument pos:start="125:16" pos:end="125:17"><literal type="number" pos:start="125:16" pos:end="125:17">32</literal></argument>, <argument pos:start="125:20" pos:end="125:23">le24</argument>, <argument pos:start="125:26" pos:end="125:28">src</argument>, <argument pos:start="125:31" pos:end="125:37">samples</argument>, <argument pos:start="125:40" pos:end="125:40">n</argument>, <argument pos:start="125:43" pos:end="125:43"><literal type="number" pos:start="125:43" pos:end="125:43">8</literal></argument>, <argument pos:start="125:46" pos:end="125:46"><literal type="number" pos:start="125:46" pos:end="125:46">0</literal></argument>)</argument_list></macro>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:31">case <expr pos:start="129:10" pos:end="129:30"><name pos:start="129:10" pos:end="129:30">AV_CODEC_ID_PCM_S24BE</name></expr>:</case>

        <macro pos:start="131:9" pos:end="131:47"><name pos:start="131:9" pos:end="131:14">DECODE</name><argument_list pos:start="131:15" pos:end="131:47">(<argument pos:start="131:16" pos:end="131:17"><literal type="number" pos:start="131:16" pos:end="131:17">32</literal></argument>, <argument pos:start="131:20" pos:end="131:23">be24</argument>, <argument pos:start="131:26" pos:end="131:28">src</argument>, <argument pos:start="131:31" pos:end="131:37">samples</argument>, <argument pos:start="131:40" pos:end="131:40">n</argument>, <argument pos:start="131:43" pos:end="131:43"><literal type="number" pos:start="131:43" pos:end="131:43">8</literal></argument>, <argument pos:start="131:46" pos:end="131:46"><literal type="number" pos:start="131:46" pos:end="131:46">0</literal></argument>)</argument_list></macro>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:31">case <expr pos:start="135:10" pos:end="135:30"><name pos:start="135:10" pos:end="135:30">AV_CODEC_ID_PCM_U24LE</name></expr>:</case>

        <macro pos:start="137:9" pos:end="137:54"><name pos:start="137:9" pos:end="137:14">DECODE</name><argument_list pos:start="137:15" pos:end="137:54">(<argument pos:start="137:16" pos:end="137:17"><literal type="number" pos:start="137:16" pos:end="137:17">32</literal></argument>, <argument pos:start="137:20" pos:end="137:23">le24</argument>, <argument pos:start="137:26" pos:end="137:28">src</argument>, <argument pos:start="137:31" pos:end="137:37">samples</argument>, <argument pos:start="137:40" pos:end="137:40">n</argument>, <argument pos:start="137:43" pos:end="137:43"><literal type="number" pos:start="137:43" pos:end="137:43">8</literal></argument>, <argument pos:start="137:46" pos:end="137:53"><literal type="number" pos:start="137:46" pos:end="137:53">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <case pos:start="141:5" pos:end="141:31">case <expr pos:start="141:10" pos:end="141:30"><name pos:start="141:10" pos:end="141:30">AV_CODEC_ID_PCM_U24BE</name></expr>:</case>

        <macro pos:start="143:9" pos:end="143:54"><name pos:start="143:9" pos:end="143:14">DECODE</name><argument_list pos:start="143:15" pos:end="143:54">(<argument pos:start="143:16" pos:end="143:17"><literal type="number" pos:start="143:16" pos:end="143:17">32</literal></argument>, <argument pos:start="143:20" pos:end="143:23">be24</argument>, <argument pos:start="143:26" pos:end="143:28">src</argument>, <argument pos:start="143:31" pos:end="143:37">samples</argument>, <argument pos:start="143:40" pos:end="143:40">n</argument>, <argument pos:start="143:43" pos:end="143:43"><literal type="number" pos:start="143:43" pos:end="143:43">8</literal></argument>, <argument pos:start="143:46" pos:end="143:53"><literal type="number" pos:start="143:46" pos:end="143:53">0x800000</literal></argument>)</argument_list></macro>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:33">case <expr pos:start="147:10" pos:end="147:32"><name pos:start="147:10" pos:end="147:32">AV_CODEC_ID_PCM_S24DAUD</name></expr>:</case>

        <for pos:start="149:9" pos:end="161:9">for <control pos:start="149:13" pos:end="149:26">(<init pos:start="149:14" pos:end="149:14">;</init> <condition pos:start="149:16" pos:end="149:21"><expr pos:start="149:16" pos:end="149:20"><name pos:start="149:16" pos:end="149:16">n</name> <operator pos:start="149:18" pos:end="149:18">&gt;</operator> <literal type="number" pos:start="149:20" pos:end="149:20">0</literal></expr>;</condition> <incr pos:start="149:23" pos:end="149:25"><expr pos:start="149:23" pos:end="149:25"><name pos:start="149:23" pos:end="149:23">n</name><operator pos:start="149:24" pos:end="149:25">--</operator></expr></incr>)</control> <block pos:start="149:28" pos:end="161:9">{<block_content pos:start="151:13" pos:end="159:25">

            <decl_stmt pos:start="151:13" pos:end="151:51"><decl pos:start="151:13" pos:end="151:50"><type pos:start="151:13" pos:end="151:20"><name pos:start="151:13" pos:end="151:20">uint32_t</name></type> <name pos:start="151:22" pos:end="151:22">v</name> <init pos:start="151:24" pos:end="151:50">= <expr pos:start="151:26" pos:end="151:50"><call pos:start="151:26" pos:end="151:50"><name pos:start="151:26" pos:end="151:44">bytestream_get_be24</name><argument_list pos:start="151:45" pos:end="151:50">(<argument pos:start="151:46" pos:end="151:49"><expr pos:start="151:46" pos:end="151:49"><operator pos:start="151:46" pos:end="151:46">&amp;</operator><name pos:start="151:47" pos:end="151:49">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:20"><expr pos:start="153:13" pos:end="153:19"><name pos:start="153:13" pos:end="153:13">v</name> <operator pos:start="153:15" pos:end="153:17">&gt;&gt;=</operator> <literal type="number" pos:start="153:19" pos:end="153:19">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="153:22" pos:end="153:43">// sync flags are here</comment>

            <expr_stmt pos:start="155:13" pos:end="157:65"><expr pos:start="155:13" pos:end="157:64"><call pos:start="155:13" pos:end="157:64"><name pos:start="155:13" pos:end="155:20">AV_WN16A</name><argument_list pos:start="155:21" pos:end="157:64">(<argument pos:start="155:22" pos:end="155:28"><expr pos:start="155:22" pos:end="155:28"><name pos:start="155:22" pos:end="155:28">samples</name></expr></argument>, <argument pos:start="155:31" pos:end="157:63"><expr pos:start="155:31" pos:end="157:63"><name pos:start="155:31" pos:end="155:57"><name pos:start="155:31" pos:end="155:40">ff_reverse</name><index pos:start="155:41" pos:end="155:57">[<expr pos:start="155:42" pos:end="155:56"><operator pos:start="155:42" pos:end="155:42">(</operator><name pos:start="155:43" pos:end="155:43">v</name> <operator pos:start="155:45" pos:end="155:46">&gt;&gt;</operator> <literal type="number" pos:start="155:48" pos:end="155:48">8</literal><operator pos:start="155:49" pos:end="155:49">)</operator> <operator pos:start="155:51" pos:end="155:51">&amp;</operator> <literal type="number" pos:start="155:53" pos:end="155:56">0xff</literal></expr>]</index></name> <operator pos:start="155:59" pos:end="155:59">+</operator>

                             <operator pos:start="157:30" pos:end="157:30">(</operator><name pos:start="157:31" pos:end="157:57"><name pos:start="157:31" pos:end="157:40">ff_reverse</name><index pos:start="157:41" pos:end="157:57">[<expr pos:start="157:42" pos:end="157:56"><name pos:start="157:42" pos:end="157:42">v</name>        <operator pos:start="157:51" pos:end="157:51">&amp;</operator> <literal type="number" pos:start="157:53" pos:end="157:56">0xff</literal></expr>]</index></name> <operator pos:start="157:59" pos:end="157:60">&lt;&lt;</operator> <literal type="number" pos:start="157:62" pos:end="157:62">8</literal><operator pos:start="157:63" pos:end="157:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:25"><expr pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:19">samples</name> <operator pos:start="159:21" pos:end="159:22">+=</operator> <literal type="number" pos:start="159:24" pos:end="159:24">2</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:38">case <expr pos:start="165:10" pos:end="165:37"><name pos:start="165:10" pos:end="165:37">AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>

    <block pos:start="167:5" pos:end="191:5">{<block_content pos:start="169:9" pos:end="189:14">

        <expr_stmt pos:start="169:9" pos:end="169:29"><expr pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:9">n</name> <operator pos:start="169:11" pos:end="169:12">/=</operator> <name pos:start="169:14" pos:end="169:28"><name pos:start="169:14" pos:end="169:18">avctx</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:28">channels</name></name></expr>;</expr_stmt>

        <for pos:start="171:9" pos:end="187:9">for <control pos:start="171:13" pos:end="171:45">(<init pos:start="171:14" pos:end="171:19"><expr pos:start="171:14" pos:end="171:18"><name pos:start="171:14" pos:end="171:14">c</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <literal type="number" pos:start="171:18" pos:end="171:18">0</literal></expr>;</init> <condition pos:start="171:21" pos:end="171:40"><expr pos:start="171:21" pos:end="171:39"><name pos:start="171:21" pos:end="171:21">c</name> <operator pos:start="171:23" pos:end="171:23">&lt;</operator> <name pos:start="171:25" pos:end="171:39"><name pos:start="171:25" pos:end="171:29">avctx</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:39">channels</name></name></expr>;</condition> <incr pos:start="171:42" pos:end="171:44"><expr pos:start="171:42" pos:end="171:44"><name pos:start="171:42" pos:end="171:42">c</name><operator pos:start="171:43" pos:end="171:44">++</operator></expr></incr>)</control> <block pos:start="171:47" pos:end="187:9">{<block_content pos:start="173:13" pos:end="185:25">

            <expr_stmt pos:start="173:13" pos:end="176:0"><expr pos:start="173:13" pos:end="173:47"><name pos:start="173:13" pos:end="173:19">samples</name> <operator pos:start="173:21" pos:end="173:21">=</operator> <name pos:start="173:23" pos:end="173:47"><name pos:start="173:23" pos:end="173:23">s</name><operator pos:start="173:24" pos:end="173:25">-&gt;</operator><name pos:start="173:26" pos:end="173:30">frame</name><operator pos:start="173:31" pos:end="173:31">.</operator><name pos:start="173:32" pos:end="173:44">extended_data</name><index pos:start="173:45" pos:end="173:47">[<expr pos:start="173:46" pos:end="173:46"><name pos:start="173:46" pos:end="173:46">c</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if pos:start="175:1" pos:end="175:18">#<cpp:directive pos:start="175:2" pos:end="175:3">if</cpp:directive> <expr pos:start="175:5" pos:end="175:18"><name pos:start="175:5" pos:end="175:18">HAVE_BIGENDIAN</name></expr></cpp:if>

            <macro pos:start="177:13" pos:end="180:0"><name pos:start="177:13" pos:end="177:18">DECODE</name><argument_list pos:start="177:19" pos:end="180:0">(<argument pos:start="177:20" pos:end="177:21"><literal type="number" pos:start="177:20" pos:end="177:21">16</literal></argument>, <argument pos:start="177:24" pos:end="177:27">le16</argument>, <argument pos:start="177:30" pos:end="177:32">src</argument>, <argument pos:start="177:35" pos:end="177:41">samples</argument>, <argument pos:start="177:44" pos:end="177:44">n</argument>, <argument pos:start="177:47" pos:end="177:47"><literal type="number" pos:start="177:47" pos:end="177:47">0</literal></argument>, <argument pos:start="177:50" pos:end="177:50"><literal type="number" pos:start="177:50" pos:end="177:50">0</literal></argument>)</argument_list></macro>

<cpp:else pos:start="179:1" pos:end="179:5">#<cpp:directive pos:start="179:2" pos:end="179:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="181:13" pos:end="184:0"><expr pos:start="181:13" pos:end="181:39"><call pos:start="181:13" pos:end="181:39"><name pos:start="181:13" pos:end="181:18">memcpy</name><argument_list pos:start="181:19" pos:end="181:39">(<argument pos:start="181:20" pos:end="181:26"><expr pos:start="181:20" pos:end="181:26"><name pos:start="181:20" pos:end="181:26">samples</name></expr></argument>, <argument pos:start="181:29" pos:end="181:31"><expr pos:start="181:29" pos:end="181:31"><name pos:start="181:29" pos:end="181:31">src</name></expr></argument>, <argument pos:start="181:34" pos:end="181:38"><expr pos:start="181:34" pos:end="181:38"><name pos:start="181:34" pos:end="181:34">n</name> <operator pos:start="181:36" pos:end="181:36">*</operator> <literal type="number" pos:start="181:38" pos:end="181:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="185:13" pos:end="185:25"><expr pos:start="185:13" pos:end="185:24"><name pos:start="185:13" pos:end="185:15">src</name> <operator pos:start="185:17" pos:end="185:18">+=</operator> <name pos:start="185:20" pos:end="185:20">n</name> <operator pos:start="185:22" pos:end="185:22">*</operator> <literal type="number" pos:start="185:24" pos:end="185:24">2</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="189:9" pos:end="189:14">break;</break>

    </block_content>}</block>

    <case pos:start="193:5" pos:end="193:31">case <expr pos:start="193:10" pos:end="193:30"><name pos:start="193:10" pos:end="193:30">AV_CODEC_ID_PCM_U16LE</name></expr>:</case>

        <macro pos:start="195:9" pos:end="195:52"><name pos:start="195:9" pos:end="195:14">DECODE</name><argument_list pos:start="195:15" pos:end="195:52">(<argument pos:start="195:16" pos:end="195:17"><literal type="number" pos:start="195:16" pos:end="195:17">16</literal></argument>, <argument pos:start="195:20" pos:end="195:23">le16</argument>, <argument pos:start="195:26" pos:end="195:28">src</argument>, <argument pos:start="195:31" pos:end="195:37">samples</argument>, <argument pos:start="195:40" pos:end="195:40">n</argument>, <argument pos:start="195:43" pos:end="195:43"><literal type="number" pos:start="195:43" pos:end="195:43">0</literal></argument>, <argument pos:start="195:46" pos:end="195:51"><literal type="number" pos:start="195:46" pos:end="195:51">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="197:9" pos:end="197:14">break;</break>

    <case pos:start="199:5" pos:end="199:31">case <expr pos:start="199:10" pos:end="199:30"><name pos:start="199:10" pos:end="199:30">AV_CODEC_ID_PCM_U16BE</name></expr>:</case>

        <macro pos:start="201:9" pos:end="201:52"><name pos:start="201:9" pos:end="201:14">DECODE</name><argument_list pos:start="201:15" pos:end="201:52">(<argument pos:start="201:16" pos:end="201:17"><literal type="number" pos:start="201:16" pos:end="201:17">16</literal></argument>, <argument pos:start="201:20" pos:end="201:23">be16</argument>, <argument pos:start="201:26" pos:end="201:28">src</argument>, <argument pos:start="201:31" pos:end="201:37">samples</argument>, <argument pos:start="201:40" pos:end="201:40">n</argument>, <argument pos:start="201:43" pos:end="201:43"><literal type="number" pos:start="201:43" pos:end="201:43">0</literal></argument>, <argument pos:start="201:46" pos:end="201:51"><literal type="number" pos:start="201:46" pos:end="201:51">0x8000</literal></argument>)</argument_list></macro>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <case pos:start="205:5" pos:end="205:28">case <expr pos:start="205:10" pos:end="205:27"><name pos:start="205:10" pos:end="205:27">AV_CODEC_ID_PCM_S8</name></expr>:</case>

        <for pos:start="207:9" pos:end="209:38">for <control pos:start="207:13" pos:end="207:26">(<init pos:start="207:14" pos:end="207:14">;</init> <condition pos:start="207:16" pos:end="207:21"><expr pos:start="207:16" pos:end="207:20"><name pos:start="207:16" pos:end="207:16">n</name> <operator pos:start="207:18" pos:end="207:18">&gt;</operator> <literal type="number" pos:start="207:20" pos:end="207:20">0</literal></expr>;</condition> <incr pos:start="207:23" pos:end="207:25"><expr pos:start="207:23" pos:end="207:25"><name pos:start="207:23" pos:end="207:23">n</name><operator pos:start="207:24" pos:end="207:25">--</operator></expr></incr>)</control><block type="pseudo" pos:start="209:13" pos:end="209:38"><block_content pos:start="209:13" pos:end="209:38">

            <expr_stmt pos:start="209:13" pos:end="209:38"><expr pos:start="209:13" pos:end="209:37"><operator pos:start="209:13" pos:end="209:13">*</operator><name pos:start="209:14" pos:end="209:20">samples</name><operator pos:start="209:21" pos:end="209:22">++</operator> <operator pos:start="209:24" pos:end="209:24">=</operator> <operator pos:start="209:26" pos:end="209:26">*</operator><name pos:start="209:27" pos:end="209:29">src</name><operator pos:start="209:30" pos:end="209:31">++</operator> <operator pos:start="209:33" pos:end="209:33">+</operator> <literal type="number" pos:start="209:35" pos:end="209:37">128</literal></expr>;</expr_stmt></block_content></block></for>

        <break pos:start="211:9" pos:end="214:0">break;</break>

<cpp:if pos:start="213:1" pos:end="213:18">#<cpp:directive pos:start="213:2" pos:end="213:3">if</cpp:directive> <expr pos:start="213:5" pos:end="213:18"><name pos:start="213:5" pos:end="213:18">HAVE_BIGENDIAN</name></expr></cpp:if>

    <case pos:start="215:5" pos:end="215:31">case <expr pos:start="215:10" pos:end="215:30"><name pos:start="215:10" pos:end="215:30">AV_CODEC_ID_PCM_F64LE</name></expr>:</case>

        <macro pos:start="217:9" pos:end="217:47"><name pos:start="217:9" pos:end="217:14">DECODE</name><argument_list pos:start="217:15" pos:end="217:47">(<argument pos:start="217:16" pos:end="217:17"><literal type="number" pos:start="217:16" pos:end="217:17">64</literal></argument>, <argument pos:start="217:20" pos:end="217:23">le64</argument>, <argument pos:start="217:26" pos:end="217:28">src</argument>, <argument pos:start="217:31" pos:end="217:37">samples</argument>, <argument pos:start="217:40" pos:end="217:40">n</argument>, <argument pos:start="217:43" pos:end="217:43"><literal type="number" pos:start="217:43" pos:end="217:43">0</literal></argument>, <argument pos:start="217:46" pos:end="217:46"><literal type="number" pos:start="217:46" pos:end="217:46">0</literal></argument>)</argument_list></macro>

        <break pos:start="219:9" pos:end="219:14">break;</break>

    <case pos:start="221:5" pos:end="221:31">case <expr pos:start="221:10" pos:end="221:30"><name pos:start="221:10" pos:end="221:30">AV_CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="223:5" pos:end="223:31">case <expr pos:start="223:10" pos:end="223:30"><name pos:start="223:10" pos:end="223:30">AV_CODEC_ID_PCM_F32LE</name></expr>:</case>

        <macro pos:start="225:9" pos:end="225:47"><name pos:start="225:9" pos:end="225:14">DECODE</name><argument_list pos:start="225:15" pos:end="225:47">(<argument pos:start="225:16" pos:end="225:17"><literal type="number" pos:start="225:16" pos:end="225:17">32</literal></argument>, <argument pos:start="225:20" pos:end="225:23">le32</argument>, <argument pos:start="225:26" pos:end="225:28">src</argument>, <argument pos:start="225:31" pos:end="225:37">samples</argument>, <argument pos:start="225:40" pos:end="225:40">n</argument>, <argument pos:start="225:43" pos:end="225:43"><literal type="number" pos:start="225:43" pos:end="225:43">0</literal></argument>, <argument pos:start="225:46" pos:end="225:46"><literal type="number" pos:start="225:46" pos:end="225:46">0</literal></argument>)</argument_list></macro>

        <break pos:start="227:9" pos:end="227:14">break;</break>

    <case pos:start="229:5" pos:end="229:31">case <expr pos:start="229:10" pos:end="229:30"><name pos:start="229:10" pos:end="229:30">AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

        <macro pos:start="231:9" pos:end="231:47"><name pos:start="231:9" pos:end="231:14">DECODE</name><argument_list pos:start="231:15" pos:end="231:47">(<argument pos:start="231:16" pos:end="231:17"><literal type="number" pos:start="231:16" pos:end="231:17">16</literal></argument>, <argument pos:start="231:20" pos:end="231:23">le16</argument>, <argument pos:start="231:26" pos:end="231:28">src</argument>, <argument pos:start="231:31" pos:end="231:37">samples</argument>, <argument pos:start="231:40" pos:end="231:40">n</argument>, <argument pos:start="231:43" pos:end="231:43"><literal type="number" pos:start="231:43" pos:end="231:43">0</literal></argument>, <argument pos:start="231:46" pos:end="231:46"><literal type="number" pos:start="231:46" pos:end="231:46">0</literal></argument>)</argument_list></macro>

        <break pos:start="233:9" pos:end="233:14">break;</break>

    <case pos:start="235:5" pos:end="235:31">case <expr pos:start="235:10" pos:end="235:30"><name pos:start="235:10" pos:end="235:30">AV_CODEC_ID_PCM_F64BE</name></expr>:</case>

    <case pos:start="237:5" pos:end="237:31">case <expr pos:start="237:10" pos:end="237:30"><name pos:start="237:10" pos:end="237:30">AV_CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="239:5" pos:end="239:31">case <expr pos:start="239:10" pos:end="239:30"><name pos:start="239:10" pos:end="239:30">AV_CODEC_ID_PCM_S32BE</name></expr>:</case>

    <case pos:start="241:5" pos:end="244:0">case <expr pos:start="241:10" pos:end="241:30"><name pos:start="241:10" pos:end="241:30">AV_CODEC_ID_PCM_S16BE</name></expr>:</case>

<cpp:else pos:start="243:1" pos:end="243:5">#<cpp:directive pos:start="243:2" pos:end="243:5">else</cpp:directive></cpp:else>

    <case pos:start="245:5" pos:end="245:31">case <expr pos:start="245:10" pos:end="245:30"><name pos:start="245:10" pos:end="245:30">AV_CODEC_ID_PCM_F64BE</name></expr>:</case>

        <macro pos:start="247:9" pos:end="247:47"><name pos:start="247:9" pos:end="247:14">DECODE</name><argument_list pos:start="247:15" pos:end="247:47">(<argument pos:start="247:16" pos:end="247:17"><literal type="number" pos:start="247:16" pos:end="247:17">64</literal></argument>, <argument pos:start="247:20" pos:end="247:23">be64</argument>, <argument pos:start="247:26" pos:end="247:28">src</argument>, <argument pos:start="247:31" pos:end="247:37">samples</argument>, <argument pos:start="247:40" pos:end="247:40">n</argument>, <argument pos:start="247:43" pos:end="247:43"><literal type="number" pos:start="247:43" pos:end="247:43">0</literal></argument>, <argument pos:start="247:46" pos:end="247:46"><literal type="number" pos:start="247:46" pos:end="247:46">0</literal></argument>)</argument_list></macro>

        <break pos:start="249:9" pos:end="249:14">break;</break>

    <case pos:start="251:5" pos:end="251:31">case <expr pos:start="251:10" pos:end="251:30"><name pos:start="251:10" pos:end="251:30">AV_CODEC_ID_PCM_F32BE</name></expr>:</case>

    <case pos:start="253:5" pos:end="253:31">case <expr pos:start="253:10" pos:end="253:30"><name pos:start="253:10" pos:end="253:30">AV_CODEC_ID_PCM_S32BE</name></expr>:</case>

        <macro pos:start="255:9" pos:end="255:47"><name pos:start="255:9" pos:end="255:14">DECODE</name><argument_list pos:start="255:15" pos:end="255:47">(<argument pos:start="255:16" pos:end="255:17"><literal type="number" pos:start="255:16" pos:end="255:17">32</literal></argument>, <argument pos:start="255:20" pos:end="255:23">be32</argument>, <argument pos:start="255:26" pos:end="255:28">src</argument>, <argument pos:start="255:31" pos:end="255:37">samples</argument>, <argument pos:start="255:40" pos:end="255:40">n</argument>, <argument pos:start="255:43" pos:end="255:43"><literal type="number" pos:start="255:43" pos:end="255:43">0</literal></argument>, <argument pos:start="255:46" pos:end="255:46"><literal type="number" pos:start="255:46" pos:end="255:46">0</literal></argument>)</argument_list></macro>

        <break pos:start="257:9" pos:end="257:14">break;</break>

    <case pos:start="259:5" pos:end="259:31">case <expr pos:start="259:10" pos:end="259:30"><name pos:start="259:10" pos:end="259:30">AV_CODEC_ID_PCM_S16BE</name></expr>:</case>

        <macro pos:start="261:9" pos:end="261:47"><name pos:start="261:9" pos:end="261:14">DECODE</name><argument_list pos:start="261:15" pos:end="261:47">(<argument pos:start="261:16" pos:end="261:17"><literal type="number" pos:start="261:16" pos:end="261:17">16</literal></argument>, <argument pos:start="261:20" pos:end="261:23">be16</argument>, <argument pos:start="261:26" pos:end="261:28">src</argument>, <argument pos:start="261:31" pos:end="261:37">samples</argument>, <argument pos:start="261:40" pos:end="261:40">n</argument>, <argument pos:start="261:43" pos:end="261:43"><literal type="number" pos:start="261:43" pos:end="261:43">0</literal></argument>, <argument pos:start="261:46" pos:end="261:46"><literal type="number" pos:start="261:46" pos:end="261:46">0</literal></argument>)</argument_list></macro>

        <break pos:start="263:9" pos:end="263:14">break;</break>

    <case pos:start="265:5" pos:end="265:31">case <expr pos:start="265:10" pos:end="265:30"><name pos:start="265:10" pos:end="265:30">AV_CODEC_ID_PCM_F64LE</name></expr>:</case>

    <case pos:start="267:5" pos:end="267:31">case <expr pos:start="267:10" pos:end="267:30"><name pos:start="267:10" pos:end="267:30">AV_CODEC_ID_PCM_F32LE</name></expr>:</case>

    <case pos:start="269:5" pos:end="269:31">case <expr pos:start="269:10" pos:end="269:30"><name pos:start="269:10" pos:end="269:30">AV_CODEC_ID_PCM_S32LE</name></expr>:</case>

    <case pos:start="271:5" pos:end="274:0">case <expr pos:start="271:10" pos:end="271:30"><name pos:start="271:10" pos:end="271:30">AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

<cpp:endif pos:start="273:1" pos:end="273:6">#<cpp:directive pos:start="273:2" pos:end="273:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="273:8" pos:end="273:27">/* HAVE_BIGENDIAN */</comment>

    <case pos:start="275:5" pos:end="275:28">case <expr pos:start="275:10" pos:end="275:27"><name pos:start="275:10" pos:end="275:27">AV_CODEC_ID_PCM_U8</name></expr>:</case>

        <expr_stmt pos:start="277:9" pos:end="277:46"><expr pos:start="277:9" pos:end="277:45"><call pos:start="277:9" pos:end="277:45"><name pos:start="277:9" pos:end="277:14">memcpy</name><argument_list pos:start="277:15" pos:end="277:45">(<argument pos:start="277:16" pos:end="277:22"><expr pos:start="277:16" pos:end="277:22"><name pos:start="277:16" pos:end="277:22">samples</name></expr></argument>, <argument pos:start="277:25" pos:end="277:27"><expr pos:start="277:25" pos:end="277:27"><name pos:start="277:25" pos:end="277:27">src</name></expr></argument>, <argument pos:start="277:30" pos:end="277:44"><expr pos:start="277:30" pos:end="277:44"><name pos:start="277:30" pos:end="277:30">n</name> <operator pos:start="277:32" pos:end="277:32">*</operator> <name pos:start="277:34" pos:end="277:44">sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    <case pos:start="281:5" pos:end="281:30">case <expr pos:start="281:10" pos:end="281:29"><name pos:start="281:10" pos:end="281:29">AV_CODEC_ID_PCM_ZORK</name></expr>:</case>

        <for pos:start="283:9" pos:end="293:9">for <control pos:start="283:13" pos:end="283:26">(<init pos:start="283:14" pos:end="283:14">;</init> <condition pos:start="283:16" pos:end="283:21"><expr pos:start="283:16" pos:end="283:20"><name pos:start="283:16" pos:end="283:16">n</name> <operator pos:start="283:18" pos:end="283:18">&gt;</operator> <literal type="number" pos:start="283:20" pos:end="283:20">0</literal></expr>;</condition> <incr pos:start="283:23" pos:end="283:25"><expr pos:start="283:23" pos:end="283:25"><name pos:start="283:23" pos:end="283:23">n</name><operator pos:start="283:24" pos:end="283:25">--</operator></expr></incr>)</control> <block pos:start="283:28" pos:end="293:9">{<block_content pos:start="285:13" pos:end="291:27">

            <decl_stmt pos:start="285:13" pos:end="285:27"><decl pos:start="285:13" pos:end="285:26"><type pos:start="285:13" pos:end="285:15"><name pos:start="285:13" pos:end="285:15">int</name></type> <name pos:start="285:17" pos:end="285:17">v</name> <init pos:start="285:19" pos:end="285:26">= <expr pos:start="285:21" pos:end="285:26"><operator pos:start="285:21" pos:end="285:21">*</operator><name pos:start="285:22" pos:end="285:24">src</name><operator pos:start="285:25" pos:end="285:26">++</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="287:13" pos:end="289:28"><if pos:start="287:13" pos:end="289:28">if <condition pos:start="287:16" pos:end="287:24">(<expr pos:start="287:17" pos:end="287:23"><name pos:start="287:17" pos:end="287:17">v</name> <operator pos:start="287:19" pos:end="287:19">&lt;</operator> <literal type="number" pos:start="287:21" pos:end="287:23">128</literal></expr>)</condition><block type="pseudo" pos:start="289:17" pos:end="289:28"><block_content pos:start="289:17" pos:end="289:28">

                <expr_stmt pos:start="289:17" pos:end="289:28"><expr pos:start="289:17" pos:end="289:27"><name pos:start="289:17" pos:end="289:17">v</name> <operator pos:start="289:19" pos:end="289:19">=</operator> <literal type="number" pos:start="289:21" pos:end="289:25">128</literal> <operator pos:start="289:25" pos:end="289:25">-</operator> <name pos:start="289:27" pos:end="289:27">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:27"><expr pos:start="291:13" pos:end="291:26"><operator pos:start="291:13" pos:end="291:13">*</operator><name pos:start="291:14" pos:end="291:20">samples</name><operator pos:start="291:21" pos:end="291:22">++</operator> <operator pos:start="291:24" pos:end="291:24">=</operator> <name pos:start="291:26" pos:end="291:26">v</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    <case pos:start="297:5" pos:end="297:30">case <expr pos:start="297:10" pos:end="297:29"><name pos:start="297:10" pos:end="297:29">AV_CODEC_ID_PCM_ALAW</name></expr>:</case>

    <case pos:start="299:5" pos:end="299:31">case <expr pos:start="299:10" pos:end="299:30"><name pos:start="299:10" pos:end="299:30">AV_CODEC_ID_PCM_MULAW</name></expr>:</case>

        <for pos:start="301:9" pos:end="307:9">for <control pos:start="301:13" pos:end="301:26">(<init pos:start="301:14" pos:end="301:14">;</init> <condition pos:start="301:16" pos:end="301:21"><expr pos:start="301:16" pos:end="301:20"><name pos:start="301:16" pos:end="301:16">n</name> <operator pos:start="301:18" pos:end="301:18">&gt;</operator> <literal type="number" pos:start="301:20" pos:end="301:20">0</literal></expr>;</condition> <incr pos:start="301:23" pos:end="301:25"><expr pos:start="301:23" pos:end="301:25"><name pos:start="301:23" pos:end="301:23">n</name><operator pos:start="301:24" pos:end="301:25">--</operator></expr></incr>)</control> <block pos:start="301:28" pos:end="307:9">{<block_content pos:start="303:13" pos:end="305:25">

            <expr_stmt pos:start="303:13" pos:end="303:48"><expr pos:start="303:13" pos:end="303:47"><call pos:start="303:13" pos:end="303:47"><name pos:start="303:13" pos:end="303:20">AV_WN16A</name><argument_list pos:start="303:21" pos:end="303:47">(<argument pos:start="303:22" pos:end="303:28"><expr pos:start="303:22" pos:end="303:28"><name pos:start="303:22" pos:end="303:28">samples</name></expr></argument>, <argument pos:start="303:31" pos:end="303:46"><expr pos:start="303:31" pos:end="303:46"><name pos:start="303:31" pos:end="303:46"><name pos:start="303:31" pos:end="303:31">s</name><operator pos:start="303:32" pos:end="303:33">-&gt;</operator><name pos:start="303:34" pos:end="303:38">table</name><index pos:start="303:39" pos:end="303:46">[<expr pos:start="303:40" pos:end="303:45"><operator pos:start="303:40" pos:end="303:40">*</operator><name pos:start="303:41" pos:end="303:43">src</name><operator pos:start="303:44" pos:end="303:45">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:25"><expr pos:start="305:13" pos:end="305:24"><name pos:start="305:13" pos:end="305:19">samples</name> <operator pos:start="305:21" pos:end="305:22">+=</operator> <literal type="number" pos:start="305:24" pos:end="305:24">2</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="309:9" pos:end="309:14">break;</break>

    <case pos:start="311:5" pos:end="311:29">case <expr pos:start="311:10" pos:end="311:28"><name pos:start="311:10" pos:end="311:28">AV_CODEC_ID_PCM_DVD</name></expr>:</case>

    <block pos:start="313:5" pos:end="371:5">{<block_content pos:start="315:9" pos:end="369:14">

        <decl_stmt pos:start="315:9" pos:end="315:28"><decl pos:start="315:9" pos:end="315:27"><type pos:start="315:9" pos:end="315:23"><specifier pos:start="315:9" pos:end="315:13">const</specifier> <name pos:start="315:15" pos:end="315:21">uint8_t</name> <modifier pos:start="315:23" pos:end="315:23">*</modifier></type><name pos:start="315:24" pos:end="315:27">src8</name></decl>;</decl_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:50"><expr pos:start="317:9" pos:end="317:49"><name pos:start="317:9" pos:end="317:19">dst_int32_t</name> <operator pos:start="317:21" pos:end="317:21">=</operator> <operator pos:start="317:23" pos:end="317:23">(</operator><name pos:start="317:24" pos:end="317:30">int32_t</name> <operator pos:start="317:32" pos:end="317:32">*</operator><operator pos:start="317:33" pos:end="317:33">)</operator><name pos:start="317:34" pos:end="317:49"><name pos:start="317:34" pos:end="317:34">s</name><operator pos:start="317:35" pos:end="317:36">-&gt;</operator><name pos:start="317:37" pos:end="317:41">frame</name><operator pos:start="317:42" pos:end="317:42">.</operator><name pos:start="317:43" pos:end="317:46">data</name><index pos:start="317:47" pos:end="317:49">[<expr pos:start="317:48" pos:end="317:48"><literal type="number" pos:start="317:48" pos:end="317:48">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:29"><expr pos:start="319:9" pos:end="319:28"><name pos:start="319:9" pos:end="319:9">n</name> <operator pos:start="319:11" pos:end="319:12">/=</operator> <name pos:start="319:14" pos:end="319:28"><name pos:start="319:14" pos:end="319:18">avctx</name><operator pos:start="319:19" pos:end="319:20">-&gt;</operator><name pos:start="319:21" pos:end="319:28">channels</name></name></expr>;</expr_stmt>

        <switch pos:start="321:9" pos:end="367:9">switch <condition pos:start="321:16" pos:end="321:45">(<expr pos:start="321:17" pos:end="321:44"><name pos:start="321:17" pos:end="321:44"><name pos:start="321:17" pos:end="321:21">avctx</name><operator pos:start="321:22" pos:end="321:23">-&gt;</operator><name pos:start="321:24" pos:end="321:44">bits_per_coded_sample</name></name></expr>)</condition> <block pos:start="321:47" pos:end="367:9">{<block_content pos:start="323:9" pos:end="365:18">

        <case pos:start="323:9" pos:end="323:16">case <expr pos:start="323:14" pos:end="323:15"><literal type="number" pos:start="323:14" pos:end="323:15">20</literal></expr>:</case>

            <while pos:start="325:13" pos:end="341:13">while <condition pos:start="325:19" pos:end="325:23">(<expr pos:start="325:20" pos:end="325:22"><name pos:start="325:20" pos:end="325:20">n</name><operator pos:start="325:21" pos:end="325:22">--</operator></expr>)</condition> <block pos:start="325:25" pos:end="341:13">{<block_content pos:start="327:17" pos:end="339:27">

                <expr_stmt pos:start="327:17" pos:end="327:39"><expr pos:start="327:17" pos:end="327:38"><name pos:start="327:17" pos:end="327:17">c</name>    <operator pos:start="327:22" pos:end="327:22">=</operator> <name pos:start="327:24" pos:end="327:38"><name pos:start="327:24" pos:end="327:28">avctx</name><operator pos:start="327:29" pos:end="327:30">-&gt;</operator><name pos:start="327:31" pos:end="327:38">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:35"><expr pos:start="329:17" pos:end="329:34"><name pos:start="329:17" pos:end="329:20">src8</name> <operator pos:start="329:22" pos:end="329:22">=</operator> <name pos:start="329:24" pos:end="329:26">src</name> <operator pos:start="329:28" pos:end="329:28">+</operator> <literal type="number" pos:start="329:30" pos:end="329:30">4</literal> <operator pos:start="329:32" pos:end="329:32">*</operator> <name pos:start="329:34" pos:end="329:34">c</name></expr>;</expr_stmt>

                <while pos:start="331:17" pos:end="337:17">while <condition pos:start="331:23" pos:end="331:27">(<expr pos:start="331:24" pos:end="331:26"><name pos:start="331:24" pos:end="331:24">c</name><operator pos:start="331:25" pos:end="331:26">--</operator></expr>)</condition> <block pos:start="331:29" pos:end="337:17">{<block_content pos:start="333:21" pos:end="335:98">

                    <expr_stmt pos:start="333:21" pos:end="333:98"><expr pos:start="333:21" pos:end="333:97"><operator pos:start="333:21" pos:end="333:21">*</operator><name pos:start="333:22" pos:end="333:32">dst_int32_t</name><operator pos:start="333:33" pos:end="333:34">++</operator> <operator pos:start="333:36" pos:end="333:36">=</operator> <operator pos:start="333:38" pos:end="333:38">(</operator><call pos:start="333:39" pos:end="333:63"><name pos:start="333:39" pos:end="333:57">bytestream_get_be16</name><argument_list pos:start="333:58" pos:end="333:63">(<argument pos:start="333:59" pos:end="333:62"><expr pos:start="333:59" pos:end="333:62"><operator pos:start="333:59" pos:end="333:59">&amp;</operator><name pos:start="333:60" pos:end="333:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="333:65" pos:end="333:66">&lt;&lt;</operator> <literal type="number" pos:start="333:68" pos:end="333:69">16</literal><operator pos:start="333:70" pos:end="333:70">)</operator> <operator pos:start="333:72" pos:end="333:72">+</operator> <operator pos:start="333:74" pos:end="333:74">(</operator><operator pos:start="333:75" pos:end="333:75">(</operator><operator pos:start="333:76" pos:end="333:76">*</operator><name pos:start="333:77" pos:end="333:80">src8</name>   <operator pos:start="333:84" pos:end="333:84">&amp;</operator> <literal type="number" pos:start="333:86" pos:end="333:89">0xf0</literal><operator pos:start="333:90" pos:end="333:90">)</operator> <operator pos:start="333:92" pos:end="333:93">&lt;&lt;</operator>  <literal type="number" pos:start="333:96" pos:end="333:96">8</literal><operator pos:start="333:97" pos:end="333:97">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="335:98"><expr pos:start="335:21" pos:end="335:97"><operator pos:start="335:21" pos:end="335:21">*</operator><name pos:start="335:22" pos:end="335:32">dst_int32_t</name><operator pos:start="335:33" pos:end="335:34">++</operator> <operator pos:start="335:36" pos:end="335:36">=</operator> <operator pos:start="335:38" pos:end="335:38">(</operator><call pos:start="335:39" pos:end="335:63"><name pos:start="335:39" pos:end="335:57">bytestream_get_be16</name><argument_list pos:start="335:58" pos:end="335:63">(<argument pos:start="335:59" pos:end="335:62"><expr pos:start="335:59" pos:end="335:62"><operator pos:start="335:59" pos:end="335:59">&amp;</operator><name pos:start="335:60" pos:end="335:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="335:65" pos:end="335:66">&lt;&lt;</operator> <literal type="number" pos:start="335:68" pos:end="335:69">16</literal><operator pos:start="335:70" pos:end="335:70">)</operator> <operator pos:start="335:72" pos:end="335:72">+</operator> <operator pos:start="335:74" pos:end="335:74">(</operator><operator pos:start="335:75" pos:end="335:75">(</operator><operator pos:start="335:76" pos:end="335:76">*</operator><name pos:start="335:77" pos:end="335:80">src8</name><operator pos:start="335:81" pos:end="335:82">++</operator> <operator pos:start="335:84" pos:end="335:84">&amp;</operator> <literal type="number" pos:start="335:86" pos:end="335:89">0x0f</literal><operator pos:start="335:90" pos:end="335:90">)</operator> <operator pos:start="335:92" pos:end="335:93">&lt;&lt;</operator> <literal type="number" pos:start="335:95" pos:end="335:96">12</literal><operator pos:start="335:97" pos:end="335:97">)</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="339:17" pos:end="339:27"><expr pos:start="339:17" pos:end="339:26"><name pos:start="339:17" pos:end="339:19">src</name> <operator pos:start="339:21" pos:end="339:21">=</operator> <name pos:start="339:23" pos:end="339:26">src8</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="343:13" pos:end="343:18">break;</break>

        <case pos:start="345:9" pos:end="345:16">case <expr pos:start="345:14" pos:end="345:15"><literal type="number" pos:start="345:14" pos:end="345:15">24</literal></expr>:</case>

            <while pos:start="347:13" pos:end="363:13">while <condition pos:start="347:19" pos:end="347:23">(<expr pos:start="347:20" pos:end="347:22"><name pos:start="347:20" pos:end="347:20">n</name><operator pos:start="347:21" pos:end="347:22">--</operator></expr>)</condition> <block pos:start="347:25" pos:end="363:13">{<block_content pos:start="349:17" pos:end="361:27">

                <expr_stmt pos:start="349:17" pos:end="349:39"><expr pos:start="349:17" pos:end="349:38"><name pos:start="349:17" pos:end="349:17">c</name>    <operator pos:start="349:22" pos:end="349:22">=</operator> <name pos:start="349:24" pos:end="349:38"><name pos:start="349:24" pos:end="349:28">avctx</name><operator pos:start="349:29" pos:end="349:30">-&gt;</operator><name pos:start="349:31" pos:end="349:38">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:35"><expr pos:start="351:17" pos:end="351:34"><name pos:start="351:17" pos:end="351:20">src8</name> <operator pos:start="351:22" pos:end="351:22">=</operator> <name pos:start="351:24" pos:end="351:26">src</name> <operator pos:start="351:28" pos:end="351:28">+</operator> <literal type="number" pos:start="351:30" pos:end="351:30">4</literal> <operator pos:start="351:32" pos:end="351:32">*</operator> <name pos:start="351:34" pos:end="351:34">c</name></expr>;</expr_stmt>

                <while pos:start="353:17" pos:end="359:17">while <condition pos:start="353:23" pos:end="353:27">(<expr pos:start="353:24" pos:end="353:26"><name pos:start="353:24" pos:end="353:24">c</name><operator pos:start="353:25" pos:end="353:26">--</operator></expr>)</condition> <block pos:start="353:29" pos:end="359:17">{<block_content pos:start="355:21" pos:end="357:90">

                    <expr_stmt pos:start="355:21" pos:end="355:90"><expr pos:start="355:21" pos:end="355:89"><operator pos:start="355:21" pos:end="355:21">*</operator><name pos:start="355:22" pos:end="355:32">dst_int32_t</name><operator pos:start="355:33" pos:end="355:34">++</operator> <operator pos:start="355:36" pos:end="355:36">=</operator> <operator pos:start="355:38" pos:end="355:38">(</operator><call pos:start="355:39" pos:end="355:63"><name pos:start="355:39" pos:end="355:57">bytestream_get_be16</name><argument_list pos:start="355:58" pos:end="355:63">(<argument pos:start="355:59" pos:end="355:62"><expr pos:start="355:59" pos:end="355:62"><operator pos:start="355:59" pos:end="355:59">&amp;</operator><name pos:start="355:60" pos:end="355:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="355:65" pos:end="355:66">&lt;&lt;</operator> <literal type="number" pos:start="355:68" pos:end="355:69">16</literal><operator pos:start="355:70" pos:end="355:70">)</operator> <operator pos:start="355:72" pos:end="355:72">+</operator> <operator pos:start="355:74" pos:end="355:74">(</operator><operator pos:start="355:75" pos:end="355:75">(</operator><operator pos:start="355:76" pos:end="355:76">*</operator><name pos:start="355:77" pos:end="355:80">src8</name><operator pos:start="355:81" pos:end="355:82">++</operator><operator pos:start="355:83" pos:end="355:83">)</operator> <operator pos:start="355:85" pos:end="355:86">&lt;&lt;</operator> <literal type="number" pos:start="355:88" pos:end="355:88">8</literal><operator pos:start="355:89" pos:end="355:89">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="357:21" pos:end="357:90"><expr pos:start="357:21" pos:end="357:89"><operator pos:start="357:21" pos:end="357:21">*</operator><name pos:start="357:22" pos:end="357:32">dst_int32_t</name><operator pos:start="357:33" pos:end="357:34">++</operator> <operator pos:start="357:36" pos:end="357:36">=</operator> <operator pos:start="357:38" pos:end="357:38">(</operator><call pos:start="357:39" pos:end="357:63"><name pos:start="357:39" pos:end="357:57">bytestream_get_be16</name><argument_list pos:start="357:58" pos:end="357:63">(<argument pos:start="357:59" pos:end="357:62"><expr pos:start="357:59" pos:end="357:62"><operator pos:start="357:59" pos:end="357:59">&amp;</operator><name pos:start="357:60" pos:end="357:62">src</name></expr></argument>)</argument_list></call> <operator pos:start="357:65" pos:end="357:66">&lt;&lt;</operator> <literal type="number" pos:start="357:68" pos:end="357:69">16</literal><operator pos:start="357:70" pos:end="357:70">)</operator> <operator pos:start="357:72" pos:end="357:72">+</operator> <operator pos:start="357:74" pos:end="357:74">(</operator><operator pos:start="357:75" pos:end="357:75">(</operator><operator pos:start="357:76" pos:end="357:76">*</operator><name pos:start="357:77" pos:end="357:80">src8</name><operator pos:start="357:81" pos:end="357:82">++</operator><operator pos:start="357:83" pos:end="357:83">)</operator> <operator pos:start="357:85" pos:end="357:86">&lt;&lt;</operator> <literal type="number" pos:start="357:88" pos:end="357:88">8</literal><operator pos:start="357:89" pos:end="357:89">)</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="361:17" pos:end="361:27"><expr pos:start="361:17" pos:end="361:26"><name pos:start="361:17" pos:end="361:19">src</name> <operator pos:start="361:21" pos:end="361:21">=</operator> <name pos:start="361:23" pos:end="361:26">src8</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="365:13" pos:end="365:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="369:9" pos:end="369:14">break;</break>

    </block_content>}</block>

    <case pos:start="373:5" pos:end="373:29">case <expr pos:start="373:10" pos:end="373:28"><name pos:start="373:10" pos:end="373:28">AV_CODEC_ID_PCM_LXF</name></expr>:</case>

    <block pos:start="375:5" pos:end="419:5">{<block_content pos:start="377:9" pos:end="417:14">

        <decl_stmt pos:start="377:9" pos:end="377:14"><decl pos:start="377:9" pos:end="377:13"><type pos:start="377:9" pos:end="377:11"><name pos:start="377:9" pos:end="377:11">int</name></type> <name pos:start="377:13" pos:end="377:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:29"><expr pos:start="379:9" pos:end="379:28"><name pos:start="379:9" pos:end="379:9">n</name> <operator pos:start="379:11" pos:end="379:12">/=</operator> <name pos:start="379:14" pos:end="379:28"><name pos:start="379:14" pos:end="379:18">avctx</name><operator pos:start="379:19" pos:end="379:20">-&gt;</operator><name pos:start="379:21" pos:end="379:28">channels</name></name></expr>;</expr_stmt>

        <for pos:start="381:9" pos:end="415:9">for <control pos:start="381:13" pos:end="381:45">(<init pos:start="381:14" pos:end="381:19"><expr pos:start="381:14" pos:end="381:18"><name pos:start="381:14" pos:end="381:14">c</name> <operator pos:start="381:16" pos:end="381:16">=</operator> <literal type="number" pos:start="381:18" pos:end="381:18">0</literal></expr>;</init> <condition pos:start="381:21" pos:end="381:40"><expr pos:start="381:21" pos:end="381:39"><name pos:start="381:21" pos:end="381:21">c</name> <operator pos:start="381:23" pos:end="381:23">&lt;</operator> <name pos:start="381:25" pos:end="381:39"><name pos:start="381:25" pos:end="381:29">avctx</name><operator pos:start="381:30" pos:end="381:31">-&gt;</operator><name pos:start="381:32" pos:end="381:39">channels</name></name></expr>;</condition> <incr pos:start="381:42" pos:end="381:44"><expr pos:start="381:42" pos:end="381:44"><name pos:start="381:42" pos:end="381:42">c</name><operator pos:start="381:43" pos:end="381:44">++</operator></expr></incr>)</control> <block pos:start="381:47" pos:end="415:9">{<block_content pos:start="383:13" pos:end="413:13">

            <expr_stmt pos:start="383:13" pos:end="383:63"><expr pos:start="383:13" pos:end="383:62"><name pos:start="383:13" pos:end="383:23">dst_int32_t</name> <operator pos:start="383:25" pos:end="383:25">=</operator> <operator pos:start="383:27" pos:end="383:27">(</operator><name pos:start="383:28" pos:end="383:34">int32_t</name> <operator pos:start="383:36" pos:end="383:36">*</operator><operator pos:start="383:37" pos:end="383:37">)</operator><name pos:start="383:38" pos:end="383:62"><name pos:start="383:38" pos:end="383:38">s</name><operator pos:start="383:39" pos:end="383:40">-&gt;</operator><name pos:start="383:41" pos:end="383:45">frame</name><operator pos:start="383:46" pos:end="383:46">.</operator><name pos:start="383:47" pos:end="383:59">extended_data</name><index pos:start="383:60" pos:end="383:62">[<expr pos:start="383:61" pos:end="383:61"><name pos:start="383:61" pos:end="383:61">c</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="385:13" pos:end="413:13">for <control pos:start="385:17" pos:end="385:35">(<init pos:start="385:18" pos:end="385:23"><expr pos:start="385:18" pos:end="385:22"><name pos:start="385:18" pos:end="385:18">i</name> <operator pos:start="385:20" pos:end="385:20">=</operator> <literal type="number" pos:start="385:22" pos:end="385:22">0</literal></expr>;</init> <condition pos:start="385:25" pos:end="385:30"><expr pos:start="385:25" pos:end="385:29"><name pos:start="385:25" pos:end="385:25">i</name> <operator pos:start="385:27" pos:end="385:27">&lt;</operator> <name pos:start="385:29" pos:end="385:29">n</name></expr>;</condition> <incr pos:start="385:32" pos:end="385:34"><expr pos:start="385:32" pos:end="385:34"><name pos:start="385:32" pos:end="385:32">i</name><operator pos:start="385:33" pos:end="385:34">++</operator></expr></incr>)</control> <block pos:start="385:37" pos:end="413:13">{<block_content pos:start="389:17" pos:end="411:25">

                <comment type="line" pos:start="387:17" pos:end="387:60">// extract low 20 bits and expand to 32 bits</comment>

                <expr_stmt pos:start="389:17" pos:end="397:42"><expr pos:start="389:17" pos:end="397:41"><operator pos:start="389:17" pos:end="389:17">*</operator><name pos:start="389:18" pos:end="389:28">dst_int32_t</name><operator pos:start="389:29" pos:end="389:30">++</operator> <operator pos:start="389:32" pos:end="389:32">=</operator>  <operator pos:start="389:35" pos:end="389:35">(</operator><name pos:start="389:36" pos:end="389:41"><name pos:start="389:36" pos:end="389:38">src</name><index pos:start="389:39" pos:end="389:41">[<expr pos:start="389:40" pos:end="389:40"><literal type="number" pos:start="389:40" pos:end="389:40">2</literal></expr>]</index></name>         <operator pos:start="389:51" pos:end="389:52">&lt;&lt;</operator> <literal type="number" pos:start="389:54" pos:end="389:55">28</literal><operator pos:start="389:56" pos:end="389:56">)</operator> <operator pos:start="389:58" pos:end="389:58">|</operator>

                                  <operator pos:start="391:35" pos:end="391:35">(</operator><name pos:start="391:36" pos:end="391:41"><name pos:start="391:36" pos:end="391:38">src</name><index pos:start="391:39" pos:end="391:41">[<expr pos:start="391:40" pos:end="391:40"><literal type="number" pos:start="391:40" pos:end="391:40">1</literal></expr>]</index></name>         <operator pos:start="391:51" pos:end="391:52">&lt;&lt;</operator> <literal type="number" pos:start="391:54" pos:end="391:55">20</literal><operator pos:start="391:56" pos:end="391:56">)</operator> <operator pos:start="391:58" pos:end="391:58">|</operator>

                                  <operator pos:start="393:35" pos:end="393:35">(</operator><name pos:start="393:36" pos:end="393:41"><name pos:start="393:36" pos:end="393:38">src</name><index pos:start="393:39" pos:end="393:41">[<expr pos:start="393:40" pos:end="393:40"><literal type="number" pos:start="393:40" pos:end="393:40">0</literal></expr>]</index></name>         <operator pos:start="393:51" pos:end="393:52">&lt;&lt;</operator> <literal type="number" pos:start="393:54" pos:end="393:55">12</literal><operator pos:start="393:56" pos:end="393:56">)</operator> <operator pos:start="393:58" pos:end="393:58">|</operator>

                                 <operator pos:start="395:34" pos:end="395:34">(</operator><operator pos:start="395:35" pos:end="395:35">(</operator><name pos:start="395:36" pos:end="395:41"><name pos:start="395:36" pos:end="395:38">src</name><index pos:start="395:39" pos:end="395:41">[<expr pos:start="395:40" pos:end="395:40"><literal type="number" pos:start="395:40" pos:end="395:40">2</literal></expr>]</index></name> <operator pos:start="395:43" pos:end="395:43">&amp;</operator> <literal type="number" pos:start="395:45" pos:end="395:48">0x0F</literal><operator pos:start="395:49" pos:end="395:49">)</operator> <operator pos:start="395:51" pos:end="395:52">&lt;&lt;</operator>  <literal type="number" pos:start="395:55" pos:end="395:55">8</literal><operator pos:start="395:56" pos:end="395:56">)</operator> <operator pos:start="395:58" pos:end="395:58">|</operator>

                                   <name pos:start="397:36" pos:end="397:41"><name pos:start="397:36" pos:end="397:38">src</name><index pos:start="397:39" pos:end="397:41">[<expr pos:start="397:40" pos:end="397:40"><literal type="number" pos:start="397:40" pos:end="397:40">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <comment type="line" pos:start="399:17" pos:end="399:61">// extract high 20 bits and expand to 32 bits</comment>

                <expr_stmt pos:start="401:17" pos:end="409:57"><expr pos:start="401:17" pos:end="409:56"><operator pos:start="401:17" pos:end="401:17">*</operator><name pos:start="401:18" pos:end="401:28">dst_int32_t</name><operator pos:start="401:29" pos:end="401:30">++</operator> <operator pos:start="401:32" pos:end="401:32">=</operator>  <operator pos:start="401:35" pos:end="401:35">(</operator><name pos:start="401:36" pos:end="401:41"><name pos:start="401:36" pos:end="401:38">src</name><index pos:start="401:39" pos:end="401:41">[<expr pos:start="401:40" pos:end="401:40"><literal type="number" pos:start="401:40" pos:end="401:40">4</literal></expr>]</index></name>         <operator pos:start="401:51" pos:end="401:52">&lt;&lt;</operator> <literal type="number" pos:start="401:54" pos:end="401:55">24</literal><operator pos:start="401:56" pos:end="401:56">)</operator> <operator pos:start="401:58" pos:end="401:58">|</operator>

                                  <operator pos:start="403:35" pos:end="403:35">(</operator><name pos:start="403:36" pos:end="403:41"><name pos:start="403:36" pos:end="403:38">src</name><index pos:start="403:39" pos:end="403:41">[<expr pos:start="403:40" pos:end="403:40"><literal type="number" pos:start="403:40" pos:end="403:40">3</literal></expr>]</index></name>         <operator pos:start="403:51" pos:end="403:52">&lt;&lt;</operator> <literal type="number" pos:start="403:54" pos:end="403:55">16</literal><operator pos:start="403:56" pos:end="403:56">)</operator> <operator pos:start="403:58" pos:end="403:58">|</operator>

                                 <operator pos:start="405:34" pos:end="405:34">(</operator><operator pos:start="405:35" pos:end="405:35">(</operator><name pos:start="405:36" pos:end="405:41"><name pos:start="405:36" pos:end="405:38">src</name><index pos:start="405:39" pos:end="405:41">[<expr pos:start="405:40" pos:end="405:40"><literal type="number" pos:start="405:40" pos:end="405:40">2</literal></expr>]</index></name> <operator pos:start="405:43" pos:end="405:43">&amp;</operator> <literal type="number" pos:start="405:45" pos:end="405:48">0xF0</literal><operator pos:start="405:49" pos:end="405:49">)</operator> <operator pos:start="405:51" pos:end="405:52">&lt;&lt;</operator>  <literal type="number" pos:start="405:55" pos:end="405:55">8</literal><operator pos:start="405:56" pos:end="405:56">)</operator> <operator pos:start="405:58" pos:end="405:58">|</operator>

                                  <operator pos:start="407:35" pos:end="407:35">(</operator><name pos:start="407:36" pos:end="407:41"><name pos:start="407:36" pos:end="407:38">src</name><index pos:start="407:39" pos:end="407:41">[<expr pos:start="407:40" pos:end="407:40"><literal type="number" pos:start="407:40" pos:end="407:40">4</literal></expr>]</index></name>         <operator pos:start="407:51" pos:end="407:52">&lt;&lt;</operator>  <literal type="number" pos:start="407:55" pos:end="407:55">4</literal><operator pos:start="407:56" pos:end="407:56">)</operator> <operator pos:start="407:58" pos:end="407:58">|</operator>

                                  <operator pos:start="409:35" pos:end="409:35">(</operator><name pos:start="409:36" pos:end="409:41"><name pos:start="409:36" pos:end="409:38">src</name><index pos:start="409:39" pos:end="409:41">[<expr pos:start="409:40" pos:end="409:40"><literal type="number" pos:start="409:40" pos:end="409:40">3</literal></expr>]</index></name>         <operator pos:start="409:51" pos:end="409:52">&gt;&gt;</operator>  <literal type="number" pos:start="409:55" pos:end="409:55">4</literal><operator pos:start="409:56" pos:end="409:56">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="411:17" pos:end="411:25"><expr pos:start="411:17" pos:end="411:24"><name pos:start="411:17" pos:end="411:19">src</name> <operator pos:start="411:21" pos:end="411:22">+=</operator> <literal type="number" pos:start="411:24" pos:end="411:24">5</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="417:9" pos:end="417:14">break;</break>

    </block_content>}</block>

    <default pos:start="421:5" pos:end="421:12">default:</default>

        <return pos:start="423:9" pos:end="423:18">return <expr pos:start="423:16" pos:end="423:17"><operator pos:start="423:16" pos:end="423:16">-</operator><literal type="number" pos:start="423:17" pos:end="423:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="429:5" pos:end="429:25"><expr pos:start="429:5" pos:end="429:24"><operator pos:start="429:5" pos:end="429:5">*</operator><name pos:start="429:6" pos:end="429:18">got_frame_ptr</name>   <operator pos:start="429:22" pos:end="429:22">=</operator> <literal type="number" pos:start="429:24" pos:end="429:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:32"><expr pos:start="431:5" pos:end="431:31"><operator pos:start="431:5" pos:end="431:5">*</operator><operator pos:start="431:6" pos:end="431:6">(</operator><name pos:start="431:7" pos:end="431:13">AVFrame</name> <operator pos:start="431:15" pos:end="431:15">*</operator><operator pos:start="431:16" pos:end="431:16">)</operator><name pos:start="431:17" pos:end="431:20">data</name> <operator pos:start="431:22" pos:end="431:22">=</operator> <name pos:start="431:24" pos:end="431:31"><name pos:start="431:24" pos:end="431:24">s</name><operator pos:start="431:25" pos:end="431:26">-&gt;</operator><name pos:start="431:27" pos:end="431:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="435:5" pos:end="435:20">return <expr pos:start="435:12" pos:end="435:19"><name pos:start="435:12" pos:end="435:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
