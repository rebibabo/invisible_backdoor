<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24489.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">ff_dsputil_init_ppc</name><parameter_list pos:start="1:25" pos:end="1:62">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">DSPContext</name><modifier pos:start="1:36" pos:end="1:36">*</modifier></type> <name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:61"><name pos:start="1:41" pos:end="1:54">AVCodecContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="106:0">

    <decl_stmt pos:start="5:5" pos:end="5:62"><decl pos:start="5:5" pos:end="5:61"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:28">high_bit_depth</name> <init pos:start="5:30" pos:end="5:61">= <expr pos:start="5:32" pos:end="5:61"><name pos:start="5:32" pos:end="5:57"><name pos:start="5:32" pos:end="5:36">avctx</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:57">bits_per_raw_sample</name></name> <operator pos:start="5:59" pos:end="5:59">&gt;</operator> <literal type="number" pos:start="5:61" pos:end="5:61">8</literal></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="9:5" pos:end="9:63">// Common optimizations whether AltiVec is available or not</comment>

    <expr_stmt pos:start="11:5" pos:end="11:31"><expr pos:start="11:5" pos:end="11:30"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:5">c</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:15">prefetch</name></name> <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:30">prefetch_ppc</name></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="40:0"><if pos:start="13:5" pos:end="40:0">if <condition pos:start="13:8" pos:end="13:24">(<expr pos:start="13:9" pos:end="13:23"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:23">high_bit_depth</name></expr>)</condition> <block pos:start="13:26" pos:end="40:0">{<block_content pos:start="15:5" pos:end="33:5">

    <switch pos:start="15:5" pos:end="33:5">switch <condition pos:start="15:12" pos:end="15:33">(<expr pos:start="15:13" pos:end="15:32"><call pos:start="15:13" pos:end="15:32"><name pos:start="15:13" pos:end="15:30">check_dcbzl_effect</name><argument_list pos:start="15:31" pos:end="15:32">()</argument_list></call></expr>)</condition> <block pos:start="15:35" pos:end="33:5">{<block_content pos:start="17:9" pos:end="31:18">

        <case pos:start="17:9" pos:end="17:16">case <expr pos:start="17:14" pos:end="17:15"><literal type="number" pos:start="17:14" pos:end="17:15">32</literal></expr>:</case>

            <expr_stmt pos:start="19:13" pos:end="19:54"><expr pos:start="19:13" pos:end="19:53"><name pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:13">c</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:27">clear_blocks</name></name> <operator pos:start="19:29" pos:end="19:29">=</operator> <name pos:start="19:31" pos:end="19:53">clear_blocks_dcbz32_ppc</name></expr>;</expr_stmt>

            <break pos:start="21:13" pos:end="21:18">break;</break>

        <case pos:start="23:9" pos:end="23:17">case <expr pos:start="23:14" pos:end="23:16"><literal type="number" pos:start="23:14" pos:end="23:16">128</literal></expr>:</case>

            <expr_stmt pos:start="25:13" pos:end="25:55"><expr pos:start="25:13" pos:end="25:54"><name pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:13">c</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:27">clear_blocks</name></name> <operator pos:start="25:29" pos:end="25:29">=</operator> <name pos:start="25:31" pos:end="25:54">clear_blocks_dcbz128_ppc</name></expr>;</expr_stmt>

            <break pos:start="27:13" pos:end="27:18">break;</break>

        <default pos:start="29:9" pos:end="29:16">default:</default>

            <break pos:start="31:13" pos:end="31:18">break;</break>

    </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="39:1" pos:end="39:16">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:16">HAVE_ALTIVEC</name></expr></cpp:if>

    <if_stmt pos:start="41:5" pos:end="41:63"><if pos:start="41:5" pos:end="41:63">if<condition pos:start="41:7" pos:end="41:27">(<expr pos:start="41:8" pos:end="41:26"><name pos:start="41:8" pos:end="41:26">CONFIG_H264_DECODER</name></expr>)</condition><block type="pseudo" pos:start="41:29" pos:end="41:63"><block_content pos:start="41:29" pos:end="41:63"> <expr_stmt pos:start="41:29" pos:end="41:63"><expr pos:start="41:29" pos:end="41:62"><call pos:start="41:29" pos:end="41:62"><name pos:start="41:29" pos:end="41:52">ff_dsputil_h264_init_ppc</name><argument_list pos:start="41:53" pos:end="41:62">(<argument pos:start="41:54" pos:end="41:54"><expr pos:start="41:54" pos:end="41:54"><name pos:start="41:54" pos:end="41:54">c</name></expr></argument>, <argument pos:start="41:57" pos:end="41:61"><expr pos:start="41:57" pos:end="41:61"><name pos:start="41:57" pos:end="41:61">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="106:0"><if pos:start="45:5" pos:end="106:0">if <condition pos:start="45:8" pos:end="45:49">(<expr pos:start="45:9" pos:end="45:48"><call pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:24">av_get_cpu_flags</name><argument_list pos:start="45:25" pos:end="45:26">()</argument_list></call> <operator pos:start="45:28" pos:end="45:28">&amp;</operator> <name pos:start="45:30" pos:end="45:48">AV_CPU_FLAG_ALTIVEC</name></expr>)</condition> <block pos:start="45:51" pos:end="106:0">{<block_content pos:start="47:9" pos:end="99:9">

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><call pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:31">ff_dsputil_init_altivec</name><argument_list pos:start="47:32" pos:end="47:41">(<argument pos:start="47:33" pos:end="47:33"><expr pos:start="47:33" pos:end="47:33"><name pos:start="47:33" pos:end="47:33">c</name></expr></argument>, <argument pos:start="47:36" pos:end="47:40"><expr pos:start="47:36" pos:end="47:40"><name pos:start="47:36" pos:end="47:40">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><call pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:29">ff_float_init_altivec</name><argument_list pos:start="49:30" pos:end="49:39">(<argument pos:start="49:31" pos:end="49:31"><expr pos:start="49:31" pos:end="49:31"><name pos:start="49:31" pos:end="49:31">c</name></expr></argument>, <argument pos:start="49:34" pos:end="49:38"><expr pos:start="49:34" pos:end="49:38"><name pos:start="49:34" pos:end="49:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:37"><call pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:27">ff_int_init_altivec</name><argument_list pos:start="51:28" pos:end="51:37">(<argument pos:start="51:29" pos:end="51:29"><expr pos:start="51:29" pos:end="51:29"><name pos:start="51:29" pos:end="51:29">c</name></expr></argument>, <argument pos:start="51:32" pos:end="51:36"><expr pos:start="51:32" pos:end="51:36"><name pos:start="51:32" pos:end="51:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="58:0"><expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:9">c</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:15">gmc1</name></name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:33">ff_gmc1_altivec</name></expr>;</expr_stmt>



<cpp:if pos:start="57:1" pos:end="57:19">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:19">CONFIG_ENCODERS</name></expr></cpp:if>

        <if_stmt pos:start="59:9" pos:end="70:0"><if pos:start="59:9" pos:end="70:0">if <condition pos:start="59:12" pos:end="63:48">(<expr pos:start="59:13" pos:end="63:47"><name pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:17">avctx</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:38">bits_per_raw_sample</name></name> <operator pos:start="59:40" pos:end="59:41">&lt;=</operator> <literal type="number" pos:start="59:43" pos:end="59:43">8</literal> <operator pos:start="59:45" pos:end="59:46">&amp;&amp;</operator>

            <operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:28"><name pos:start="61:14" pos:end="61:18">avctx</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:28">dct_algo</name></name> <operator pos:start="61:30" pos:end="61:31">==</operator> <name pos:start="61:33" pos:end="61:43">FF_DCT_AUTO</name> <operator pos:start="61:45" pos:end="61:46">||</operator>

             <name pos:start="63:14" pos:end="63:28"><name pos:start="63:14" pos:end="63:18">avctx</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:28">dct_algo</name></name> <operator pos:start="63:30" pos:end="63:31">==</operator> <name pos:start="63:33" pos:end="63:46">FF_DCT_ALTIVEC</name><operator pos:start="63:47" pos:end="63:47">)</operator></expr>)</condition> <block pos:start="63:50" pos:end="70:0">{<block_content pos:start="65:13" pos:end="65:38">

            <expr_stmt pos:start="65:13" pos:end="65:38"><expr pos:start="65:13" pos:end="65:37"><name pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:13">c</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:19">fdct</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:37">ff_fdct_altivec</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="69:8" pos:end="69:24">//CONFIG_ENCODERS</comment>



        <if_stmt pos:start="73:9" pos:end="99:9"><if pos:start="73:9" pos:end="99:9">if <condition pos:start="73:12" pos:end="73:44">(<expr pos:start="73:13" pos:end="73:43"><name pos:start="73:13" pos:end="73:38"><name pos:start="73:13" pos:end="73:17">avctx</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:38">bits_per_raw_sample</name></name> <operator pos:start="73:40" pos:end="73:41">&lt;=</operator> <literal type="number" pos:start="73:43" pos:end="73:43">8</literal></expr>)</condition> <block pos:start="73:46" pos:end="99:9">{<block_content pos:start="75:13" pos:end="97:13">

            <if_stmt pos:start="75:13" pos:end="97:13"><if pos:start="75:13" pos:end="85:13">if <condition pos:start="75:16" pos:end="77:54">(<expr pos:start="75:17" pos:end="77:53"><operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:33"><name pos:start="75:18" pos:end="75:22">avctx</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:33">idct_algo</name></name> <operator pos:start="75:35" pos:end="75:36">==</operator> <name pos:start="75:38" pos:end="75:49">FF_IDCT_AUTO</name><operator pos:start="75:50" pos:end="75:50">)</operator> <operator pos:start="75:52" pos:end="75:53">||</operator>

                <operator pos:start="77:17" pos:end="77:17">(</operator><name pos:start="77:18" pos:end="77:33"><name pos:start="77:18" pos:end="77:22">avctx</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:33">idct_algo</name></name> <operator pos:start="77:35" pos:end="77:36">==</operator> <name pos:start="77:38" pos:end="77:52">FF_IDCT_ALTIVEC</name><operator pos:start="77:53" pos:end="77:53">)</operator></expr>)</condition> <block pos:start="77:56" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:66">

                <expr_stmt pos:start="79:17" pos:end="79:50"><expr pos:start="79:17" pos:end="79:49"><name pos:start="79:17" pos:end="79:27"><name pos:start="79:17" pos:end="79:17">c</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:27">idct_put</name></name> <operator pos:start="79:29" pos:end="79:29">=</operator> <name pos:start="79:31" pos:end="79:49">ff_idct_put_altivec</name></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:50"><expr pos:start="81:17" pos:end="81:49"><name pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:17">c</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:27">idct_add</name></name> <operator pos:start="81:29" pos:end="81:29">=</operator> <name pos:start="81:31" pos:end="81:49">ff_idct_add_altivec</name></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:66"><expr pos:start="83:17" pos:end="83:65"><name pos:start="83:17" pos:end="83:40"><name pos:start="83:17" pos:end="83:17">c</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:40">idct_permutation_type</name></name> <operator pos:start="83:42" pos:end="83:42">=</operator> <name pos:start="83:44" pos:end="83:65">FF_TRANSPOSE_IDCT_PERM</name></expr>;</expr_stmt>

            </block_content>}</block></if><if type="elseif" pos:start="85:14" pos:end="97:13">else if<condition pos:start="85:21" pos:end="87:51">(<expr pos:start="85:22" pos:end="87:50"><operator pos:start="85:22" pos:end="85:22">(</operator><name pos:start="85:23" pos:end="85:40">CONFIG_VP3_DECODER</name> <operator pos:start="85:42" pos:end="85:43">||</operator> <name pos:start="85:45" pos:end="85:62">CONFIG_VP5_DECODER</name> <operator pos:start="85:64" pos:end="85:65">||</operator> <name pos:start="85:67" pos:end="85:84">CONFIG_VP6_DECODER</name><operator pos:start="85:85" pos:end="85:85">)</operator> <operator pos:start="85:87" pos:end="85:88">&amp;&amp;</operator>

                     <name pos:start="87:22" pos:end="87:37"><name pos:start="87:22" pos:end="87:26">avctx</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:37">idct_algo</name></name><operator pos:start="87:38" pos:end="87:39">==</operator><name pos:start="87:40" pos:end="87:50">FF_IDCT_VP3</name></expr>)</condition><block pos:start="87:52" pos:end="97:13">{<block_content pos:start="89:17" pos:end="95:66">

                <expr_stmt pos:start="89:17" pos:end="89:54"><expr pos:start="89:17" pos:end="89:53"><name pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:17">c</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:27">idct_put</name></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <name pos:start="89:31" pos:end="89:53">ff_vp3_idct_put_altivec</name></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:54"><expr pos:start="91:17" pos:end="91:53"><name pos:start="91:17" pos:end="91:27"><name pos:start="91:17" pos:end="91:17">c</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:27">idct_add</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:53">ff_vp3_idct_add_altivec</name></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:50"><expr pos:start="93:17" pos:end="93:49"><name pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:17">c</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:23">idct</name></name>     <operator pos:start="93:29" pos:end="93:29">=</operator> <name pos:start="93:31" pos:end="93:49">ff_vp3_idct_altivec</name></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:66"><expr pos:start="95:17" pos:end="95:65"><name pos:start="95:17" pos:end="95:40"><name pos:start="95:17" pos:end="95:17">c</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:40">idct_permutation_type</name></name> <operator pos:start="95:42" pos:end="95:42">=</operator> <name pos:start="95:44" pos:end="95:65">FF_TRANSPOSE_IDCT_PERM</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="105:8" pos:end="105:25">/* HAVE_ALTIVEC */</comment>

</block_content>}</block></function>
</unit>
