<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5294.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">write_payload_3270</name><parameter_list pos:start="1:30" pos:end="1:70">(<parameter pos:start="1:31" pos:end="1:56"><decl pos:start="1:31" pos:end="1:56"><type pos:start="1:31" pos:end="1:56"><name pos:start="1:31" pos:end="1:51">EmulatedCcw3270Device</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">dev</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:69"><decl pos:start="1:59" pos:end="1:69"><type pos:start="1:59" pos:end="1:69"><name pos:start="1:59" pos:end="1:65">uint8_t</name></type> <name pos:start="1:67" pos:end="1:69">cmd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:44">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">Terminal3270</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">t</name> <init pos:start="5:21" pos:end="5:40">= <expr pos:start="5:23" pos:end="5:40"><call pos:start="5:23" pos:end="5:40"><name pos:start="5:23" pos:end="5:35">TERMINAL_3270</name><argument_list pos:start="5:36" pos:end="5:40">(<argument pos:start="5:37" pos:end="5:39"><expr pos:start="5:37" pos:end="5:39"><name pos:start="5:37" pos:end="5:39">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">retval</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">count</name> <init pos:start="9:15" pos:end="9:45">= <expr pos:start="9:17" pos:end="9:45"><call pos:start="9:17" pos:end="9:45"><name pos:start="9:17" pos:end="9:33">ccw_dstream_avail</name><argument_list pos:start="9:34" pos:end="9:45">(<argument pos:start="9:35" pos:end="9:44"><expr pos:start="9:35" pos:end="9:44"><call pos:start="9:35" pos:end="9:44"><name pos:start="9:35" pos:end="9:41">get_cds</name><argument_list pos:start="9:42" pos:end="9:44">(<argument pos:start="9:43" pos:end="9:43"><expr pos:start="9:43" pos:end="9:43"><name pos:start="9:43" pos:end="9:43">t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:50"><expr pos:start="13:5" pos:end="13:49"><call pos:start="13:5" pos:end="13:49"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:49">(<argument pos:start="13:12" pos:end="13:48"><expr pos:start="13:12" pos:end="13:48"><name pos:start="13:12" pos:end="13:16">count</name> <operator pos:start="13:18" pos:end="13:19">&lt;=</operator> <operator pos:start="13:21" pos:end="13:21">(</operator><name pos:start="13:22" pos:end="13:39">OUTPUT_BUFFER_SIZE</name> <operator pos:start="13:41" pos:end="13:41">-</operator> <literal type="number" pos:start="13:43" pos:end="13:43">3</literal><operator pos:start="13:44" pos:end="13:44">)</operator> <operator pos:start="13:46" pos:end="13:46">/</operator> <literal type="number" pos:start="13:48" pos:end="13:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="33:5"><if pos:start="17:5" pos:end="33:5">if <condition pos:start="17:8" pos:end="17:27">(<expr pos:start="17:9" pos:end="17:26"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:26"><name pos:start="17:10" pos:end="17:10">t</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:26">handshake_done</name></name></expr>)</condition> <block pos:start="17:29" pos:end="33:5">{<block_content pos:start="19:9" pos:end="31:9">

        <if_stmt pos:start="19:9" pos:end="31:9"><if pos:start="19:9" pos:end="31:9">if <condition pos:start="19:12" pos:end="19:54">(<expr pos:start="19:13" pos:end="19:53"><operator pos:start="19:13" pos:end="19:13">!</operator><operator pos:start="19:14" pos:end="19:14">(</operator><name pos:start="19:15" pos:end="19:24"><name pos:start="19:15" pos:end="19:15">t</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:21">outv</name><index pos:start="19:22" pos:end="19:24">[<expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr>]</index></name> <operator pos:start="19:26" pos:end="19:27">==</operator> <name pos:start="19:29" pos:end="19:31">IAC</name> <operator pos:start="19:33" pos:end="19:34">&amp;&amp;</operator> <name pos:start="19:36" pos:end="19:45"><name pos:start="19:36" pos:end="19:36">t</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:42">outv</name><index pos:start="19:43" pos:end="19:45">[<expr pos:start="19:44" pos:end="19:44"><literal type="number" pos:start="19:44" pos:end="19:44">1</literal></expr>]</index></name> <operator pos:start="19:47" pos:end="19:48">!=</operator> <name pos:start="19:50" pos:end="19:52">IAC</name><operator pos:start="19:53" pos:end="19:53">)</operator></expr>)</condition> <block pos:start="19:56" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:21">

            <comment type="block" pos:start="21:13" pos:end="27:15">/*

             * Before having finished 3270 negotiation,

             * sending outbound data except protocol options is prohibited.

             */</comment>

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:48">(<expr pos:start="35:9" pos:end="35:47"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:47"><name pos:start="35:10" pos:end="35:38">qemu_chr_fe_backend_connected</name><argument_list pos:start="35:39" pos:end="35:47">(<argument pos:start="35:40" pos:end="35:46"><expr pos:start="35:40" pos:end="35:46"><operator pos:start="35:40" pos:end="35:40">&amp;</operator><name pos:start="35:41" pos:end="35:46"><name pos:start="35:41" pos:end="35:41">t</name><operator pos:start="35:42" pos:end="35:43">-&gt;</operator><name pos:start="35:44" pos:end="35:46">chr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:50" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:21">

        <comment type="block" pos:start="37:9" pos:end="37:69">/* We just say we consumed all data if there's no backend. */</comment>

        <return pos:start="39:9" pos:end="39:21">return <expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">count</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:5">t</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:11">outv</name><index pos:start="43:12" pos:end="43:14">[<expr pos:start="43:13" pos:end="43:13"><literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>]</index></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:20">cmd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:57"><expr pos:start="45:5" pos:end="45:56"><call pos:start="45:5" pos:end="45:56"><name pos:start="45:5" pos:end="45:24">ccw_dstream_read_buf</name><argument_list pos:start="45:25" pos:end="45:56">(<argument pos:start="45:26" pos:end="45:35"><expr pos:start="45:26" pos:end="45:35"><call pos:start="45:26" pos:end="45:35"><name pos:start="45:26" pos:end="45:32">get_cds</name><argument_list pos:start="45:33" pos:end="45:35">(<argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><name pos:start="45:34" pos:end="45:34">t</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="45:38" pos:end="45:48"><expr pos:start="45:38" pos:end="45:48"><operator pos:start="45:38" pos:end="45:38">&amp;</operator><name pos:start="45:39" pos:end="45:48"><name pos:start="45:39" pos:end="45:39">t</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:45">outv</name><index pos:start="45:46" pos:end="45:48">[<expr pos:start="45:47" pos:end="45:47"><literal type="number" pos:start="45:47" pos:end="45:47">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:51" pos:end="45:55"><expr pos:start="45:51" pos:end="45:55"><name pos:start="45:51" pos:end="45:55">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:5">t</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:14">out_len</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:22">count</name> <operator pos:start="47:24" pos:end="47:24">+</operator> <literal type="number" pos:start="47:26" pos:end="47:26">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:61"><expr pos:start="51:5" pos:end="51:60"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:5">t</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:14">out_len</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:60"><name pos:start="51:18" pos:end="51:39">insert_IAC_escape_char</name><argument_list pos:start="51:40" pos:end="51:60">(<argument pos:start="51:41" pos:end="51:47"><expr pos:start="51:41" pos:end="51:47"><name pos:start="51:41" pos:end="51:47"><name pos:start="51:41" pos:end="51:41">t</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:47">outv</name></name></expr></argument>, <argument pos:start="51:50" pos:end="51:59"><expr pos:start="51:50" pos:end="51:59"><name pos:start="51:50" pos:end="51:59"><name pos:start="51:50" pos:end="51:50">t</name><operator pos:start="51:51" pos:end="51:52">-&gt;</operator><name pos:start="51:53" pos:end="51:59">out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:5">t</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:11">outv</name><index pos:start="53:12" pos:end="53:25">[<expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:13">t</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:22">out_len</name></name><operator pos:start="53:23" pos:end="53:24">++</operator></expr>]</index></name> <operator pos:start="53:27" pos:end="53:27">=</operator> <name pos:start="53:29" pos:end="53:31">IAC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:36"><expr pos:start="55:5" pos:end="55:35"><name pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:5">t</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:11">outv</name><index pos:start="55:12" pos:end="55:25">[<expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:13">t</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:22">out_len</name></name><operator pos:start="55:23" pos:end="55:24">++</operator></expr>]</index></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <name pos:start="55:29" pos:end="55:35">IAC_EOR</name></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:65"><expr pos:start="59:5" pos:end="59:64"><name pos:start="59:5" pos:end="59:10">retval</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <call pos:start="59:14" pos:end="59:64"><name pos:start="59:14" pos:end="59:34">qemu_chr_fe_write_all</name><argument_list pos:start="59:35" pos:end="59:64">(<argument pos:start="59:36" pos:end="59:42"><expr pos:start="59:36" pos:end="59:42"><operator pos:start="59:36" pos:end="59:36">&amp;</operator><name pos:start="59:37" pos:end="59:42"><name pos:start="59:37" pos:end="59:37">t</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:42">chr</name></name></expr></argument>, <argument pos:start="59:45" pos:end="59:51"><expr pos:start="59:45" pos:end="59:51"><name pos:start="59:45" pos:end="59:51"><name pos:start="59:45" pos:end="59:45">t</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:51">outv</name></name></expr></argument>, <argument pos:start="59:54" pos:end="59:63"><expr pos:start="59:54" pos:end="59:63"><name pos:start="59:54" pos:end="59:63"><name pos:start="59:54" pos:end="59:54">t</name><operator pos:start="59:55" pos:end="59:56">-&gt;</operator><name pos:start="59:57" pos:end="59:63">out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="61:5" pos:end="61:44">return <expr pos:start="61:12" pos:end="61:43"><ternary pos:start="61:12" pos:end="61:43"><condition pos:start="61:12" pos:end="61:26"><expr pos:start="61:12" pos:end="61:24"><operator pos:start="61:12" pos:end="61:12">(</operator><name pos:start="61:13" pos:end="61:18">retval</name> <operator pos:start="61:20" pos:end="61:21">&lt;=</operator> <literal type="number" pos:start="61:23" pos:end="61:23">0</literal><operator pos:start="61:24" pos:end="61:24">)</operator></expr> ?</condition><then pos:start="61:28" pos:end="61:28"> <expr pos:start="61:28" pos:end="61:28"><literal type="number" pos:start="61:28" pos:end="61:28">0</literal></expr> </then><else pos:start="61:30" pos:end="61:43">: <expr pos:start="61:32" pos:end="61:43"><operator pos:start="61:32" pos:end="61:32">(</operator><name pos:start="61:33" pos:end="61:38">retval</name> <operator pos:start="61:40" pos:end="61:40">-</operator> <literal type="number" pos:start="61:42" pos:end="61:42">3</literal><operator pos:start="61:43" pos:end="61:43">)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
