<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2289.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">bochs_open</name><parameter_list pos:start="1:22" pos:end="1:76">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:64"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:64">filename</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:75"><decl pos:start="1:67" pos:end="1:75"><type pos:start="1:67" pos:end="1:75"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:75">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:14">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BDRVBochsState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:34">= <expr pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:26">bs</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>, <decl pos:start="7:13" pos:end="7:13"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:23">bochs_header</name></name></type> <name pos:start="9:25" pos:end="9:29">bochs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:26">bochs_header_v1</name></name></type> <name pos:start="11:28" pos:end="11:36">header_v1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:6">fd</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:42"><name pos:start="15:10" pos:end="15:13">open</name><argument_list pos:start="15:14" pos:end="15:42">(<argument pos:start="15:15" pos:end="15:22"><expr pos:start="15:15" pos:end="15:22"><name pos:start="15:15" pos:end="15:22">filename</name></expr></argument>, <argument pos:start="15:25" pos:end="15:41"><expr pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:30">O_RDWR</name> <operator pos:start="15:32" pos:end="15:32">|</operator> <name pos:start="15:34" pos:end="15:41">O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:15">(<expr pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:10">fd</name> <operator pos:start="17:12" pos:end="17:12">&lt;</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>)</condition> <block pos:start="17:17" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:22">

        <expr_stmt pos:start="19:9" pos:end="19:49"><expr pos:start="19:9" pos:end="19:48"><name pos:start="19:9" pos:end="19:10">fd</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:48"><name pos:start="19:14" pos:end="19:17">open</name><argument_list pos:start="19:18" pos:end="19:48">(<argument pos:start="19:19" pos:end="19:26"><expr pos:start="19:19" pos:end="19:26"><name pos:start="19:19" pos:end="19:26">filename</name></expr></argument>, <argument pos:start="19:29" pos:end="19:47"><expr pos:start="19:29" pos:end="19:47"><name pos:start="19:29" pos:end="19:36">O_RDONLY</name> <operator pos:start="19:38" pos:end="19:38">|</operator> <name pos:start="19:40" pos:end="19:47">O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:22"><if pos:start="21:9" pos:end="23:22">if <condition pos:start="21:12" pos:end="21:19">(<expr pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:14">fd</name> <operator pos:start="21:16" pos:end="21:16">&lt;</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:22"><block_content pos:start="23:13" pos:end="23:22">

            <return pos:start="23:13" pos:end="23:22">return <expr pos:start="23:20" pos:end="23:21"><operator pos:start="23:20" pos:end="23:20">-</operator><literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:6">bs</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:17">read_only</name></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="number" pos:start="29:21" pos:end="29:21">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="29:24" pos:end="29:46">// no write support yet</comment>



    <expr_stmt pos:start="33:5" pos:end="33:15"><expr pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:9">fd</name></name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:14">fd</name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:57">(<expr pos:start="37:9" pos:end="37:56"><call pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:12">read</name><argument_list pos:start="37:13" pos:end="37:39">(<argument pos:start="37:14" pos:end="37:15"><expr pos:start="37:14" pos:end="37:15"><name pos:start="37:14" pos:end="37:15">fd</name></expr></argument>, <argument pos:start="37:18" pos:end="37:23"><expr pos:start="37:18" pos:end="37:23"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:23">bochs</name></expr></argument>, <argument pos:start="37:26" pos:end="37:38"><expr pos:start="37:26" pos:end="37:38"><sizeof pos:start="37:26" pos:end="37:38">sizeof<argument_list pos:start="37:32" pos:end="37:38">(<argument pos:start="37:33" pos:end="37:37"><expr pos:start="37:33" pos:end="37:37"><name pos:start="37:33" pos:end="37:37">bochs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="37:41" pos:end="37:42">!=</operator> <sizeof pos:start="37:44" pos:end="37:56">sizeof<argument_list pos:start="37:50" pos:end="37:56">(<argument pos:start="37:51" pos:end="37:55"><expr pos:start="37:51" pos:end="37:55"><name pos:start="37:51" pos:end="37:55">bochs</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="37:59" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="57:5"><if pos:start="45:5" pos:end="57:5">if <condition pos:start="45:8" pos:end="53:51">(<expr pos:start="45:9" pos:end="53:50"><call pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:14">strcmp</name><argument_list pos:start="45:15" pos:end="45:41">(<argument pos:start="45:16" pos:end="45:26"><expr pos:start="45:16" pos:end="45:26"><name pos:start="45:16" pos:end="45:26"><name pos:start="45:16" pos:end="45:20">bochs</name><operator pos:start="45:21" pos:end="45:21">.</operator><name pos:start="45:22" pos:end="45:26">magic</name></name></expr></argument>, <argument pos:start="45:29" pos:end="45:40"><expr pos:start="45:29" pos:end="45:40"><name pos:start="45:29" pos:end="45:40">HEADER_MAGIC</name></expr></argument>)</argument_list></call> <operator pos:start="45:43" pos:end="45:44">||</operator>

        <call pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:14">strcmp</name><argument_list pos:start="47:15" pos:end="47:40">(<argument pos:start="47:16" pos:end="47:25"><expr pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:20">bochs</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:25">type</name></name></expr></argument>, <argument pos:start="47:28" pos:end="47:39"><expr pos:start="47:28" pos:end="47:39"><name pos:start="47:28" pos:end="47:39">REDOLOG_TYPE</name></expr></argument>)</argument_list></call> <operator pos:start="47:42" pos:end="47:43">||</operator>

        <call pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:14">strcmp</name><argument_list pos:start="49:15" pos:end="49:43">(<argument pos:start="49:16" pos:end="49:28"><expr pos:start="49:16" pos:end="49:28"><name pos:start="49:16" pos:end="49:28"><name pos:start="49:16" pos:end="49:20">bochs</name><operator pos:start="49:21" pos:end="49:21">.</operator><name pos:start="49:22" pos:end="49:28">subtype</name></name></expr></argument>, <argument pos:start="49:31" pos:end="49:42"><expr pos:start="49:31" pos:end="49:42"><name pos:start="49:31" pos:end="49:42">GROWING_TYPE</name></expr></argument>)</argument_list></call> <operator pos:start="49:45" pos:end="49:46">||</operator>

	<operator pos:start="51:9" pos:end="51:9">(</operator><operator pos:start="51:10" pos:end="51:10">(</operator><call pos:start="51:11" pos:end="51:36"><name pos:start="51:11" pos:end="51:21">le32_to_cpu</name><argument_list pos:start="51:22" pos:end="51:36">(<argument pos:start="51:23" pos:end="51:35"><expr pos:start="51:23" pos:end="51:35"><name pos:start="51:23" pos:end="51:35"><name pos:start="51:23" pos:end="51:27">bochs</name><operator pos:start="51:28" pos:end="51:28">.</operator><name pos:start="51:29" pos:end="51:35">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:38" pos:end="51:39">!=</operator> <name pos:start="51:41" pos:end="51:54">HEADER_VERSION</name><operator pos:start="51:55" pos:end="51:55">)</operator> <operator pos:start="51:57" pos:end="51:58">&amp;&amp;</operator>

	<operator pos:start="53:9" pos:end="53:9">(</operator><call pos:start="53:10" pos:end="53:35"><name pos:start="53:10" pos:end="53:20">le32_to_cpu</name><argument_list pos:start="53:21" pos:end="53:35">(<argument pos:start="53:22" pos:end="53:34"><expr pos:start="53:22" pos:end="53:34"><name pos:start="53:22" pos:end="53:34"><name pos:start="53:22" pos:end="53:26">bochs</name><operator pos:start="53:27" pos:end="53:27">.</operator><name pos:start="53:28" pos:end="53:34">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="53:37" pos:end="53:38">!=</operator> <name pos:start="53:40" pos:end="53:48">HEADER_V1</name><operator pos:start="53:49" pos:end="53:49">)</operator><operator pos:start="53:50" pos:end="53:50">)</operator></expr>)</condition> <block pos:start="53:53" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:18">

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="71:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:48">(<expr pos:start="61:9" pos:end="61:47"><call pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:19">le32_to_cpu</name><argument_list pos:start="61:20" pos:end="61:34">(<argument pos:start="61:21" pos:end="61:33"><expr pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:25">bochs</name><operator pos:start="61:26" pos:end="61:26">.</operator><name pos:start="61:27" pos:end="61:33">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:36" pos:end="61:37">==</operator> <name pos:start="61:39" pos:end="61:47">HEADER_V1</name></expr>)</condition> <block pos:start="61:50" pos:end="67:5">{<block_content pos:start="63:7" pos:end="65:74">

      <expr_stmt pos:start="63:7" pos:end="63:48"><expr pos:start="63:7" pos:end="63:47"><call pos:start="63:7" pos:end="63:47"><name pos:start="63:7" pos:end="63:12">memcpy</name><argument_list pos:start="63:13" pos:end="63:47">(<argument pos:start="63:14" pos:end="63:23"><expr pos:start="63:14" pos:end="63:23"><operator pos:start="63:14" pos:end="63:14">&amp;</operator><name pos:start="63:15" pos:end="63:23">header_v1</name></expr></argument>, <argument pos:start="63:26" pos:end="63:31"><expr pos:start="63:26" pos:end="63:31"><operator pos:start="63:26" pos:end="63:26">&amp;</operator><name pos:start="63:27" pos:end="63:31">bochs</name></expr></argument>, <argument pos:start="63:34" pos:end="63:46"><expr pos:start="63:34" pos:end="63:46"><sizeof pos:start="63:34" pos:end="63:46">sizeof<argument_list pos:start="63:40" pos:end="63:46">(<argument pos:start="63:41" pos:end="63:45"><expr pos:start="63:41" pos:end="63:45"><name pos:start="63:41" pos:end="63:45">bochs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="65:7" pos:end="65:74"><expr pos:start="65:7" pos:end="65:73"><name pos:start="65:7" pos:end="65:23"><name pos:start="65:7" pos:end="65:8">bs</name><operator pos:start="65:9" pos:end="65:10">-&gt;</operator><name pos:start="65:11" pos:end="65:23">total_sectors</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:67"><name pos:start="65:27" pos:end="65:37">le64_to_cpu</name><argument_list pos:start="65:38" pos:end="65:67">(<argument pos:start="65:39" pos:end="65:66"><expr pos:start="65:39" pos:end="65:66"><name pos:start="65:39" pos:end="65:66"><name pos:start="65:39" pos:end="65:47">header_v1</name><operator pos:start="65:48" pos:end="65:48">.</operator><name pos:start="65:49" pos:end="65:53">extra</name><operator pos:start="65:54" pos:end="65:54">.</operator><name pos:start="65:55" pos:end="65:61">redolog</name><operator pos:start="65:62" pos:end="65:62">.</operator><name pos:start="65:63" pos:end="65:66">disk</name></name></expr></argument>)</argument_list></call> <operator pos:start="65:69" pos:end="65:69">/</operator> <literal type="number" pos:start="65:71" pos:end="65:73">512</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="71:5">else <block pos:start="67:12" pos:end="71:5">{<block_content pos:start="69:7" pos:end="69:70">

      <expr_stmt pos:start="69:7" pos:end="69:70"><expr pos:start="69:7" pos:end="69:69"><name pos:start="69:7" pos:end="69:23"><name pos:start="69:7" pos:end="69:8">bs</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:23">total_sectors</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:63"><name pos:start="69:27" pos:end="69:37">le64_to_cpu</name><argument_list pos:start="69:38" pos:end="69:63">(<argument pos:start="69:39" pos:end="69:62"><expr pos:start="69:39" pos:end="69:62"><name pos:start="69:39" pos:end="69:62"><name pos:start="69:39" pos:end="69:43">bochs</name><operator pos:start="69:44" pos:end="69:44">.</operator><name pos:start="69:45" pos:end="69:49">extra</name><operator pos:start="69:50" pos:end="69:50">.</operator><name pos:start="69:51" pos:end="69:57">redolog</name><operator pos:start="69:58" pos:end="69:58">.</operator><name pos:start="69:59" pos:end="69:62">disk</name></name></expr></argument>)</argument_list></call> <operator pos:start="69:65" pos:end="69:65">/</operator> <literal type="number" pos:start="69:67" pos:end="69:69">512</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:54"><expr pos:start="75:5" pos:end="75:53"><call pos:start="75:5" pos:end="75:53"><name pos:start="75:5" pos:end="75:9">lseek</name><argument_list pos:start="75:10" pos:end="75:53">(<argument pos:start="75:11" pos:end="75:15"><expr pos:start="75:11" pos:end="75:15"><name pos:start="75:11" pos:end="75:15"><name pos:start="75:11" pos:end="75:11">s</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:15">fd</name></name></expr></argument>, <argument pos:start="75:18" pos:end="75:42"><expr pos:start="75:18" pos:end="75:42"><call pos:start="75:18" pos:end="75:42"><name pos:start="75:18" pos:end="75:28">le32_to_cpu</name><argument_list pos:start="75:29" pos:end="75:42">(<argument pos:start="75:30" pos:end="75:41"><expr pos:start="75:30" pos:end="75:41"><name pos:start="75:30" pos:end="75:41"><name pos:start="75:30" pos:end="75:34">bochs</name><operator pos:start="75:35" pos:end="75:35">.</operator><name pos:start="75:36" pos:end="75:41">header</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:45" pos:end="75:52"><expr pos:start="75:45" pos:end="75:52"><name pos:start="75:45" pos:end="75:52">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:63"><expr pos:start="79:5" pos:end="79:62"><name pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:19">catalog_size</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="79:62"><name pos:start="79:23" pos:end="79:33">le32_to_cpu</name><argument_list pos:start="79:34" pos:end="79:62">(<argument pos:start="79:35" pos:end="79:61"><expr pos:start="79:35" pos:end="79:61"><name pos:start="79:35" pos:end="79:61"><name pos:start="79:35" pos:end="79:39">bochs</name><operator pos:start="79:40" pos:end="79:40">.</operator><name pos:start="79:41" pos:end="79:45">extra</name><operator pos:start="79:46" pos:end="79:46">.</operator><name pos:start="79:47" pos:end="79:53">redolog</name><operator pos:start="79:54" pos:end="79:54">.</operator><name pos:start="79:55" pos:end="79:61">catalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:57"><expr pos:start="81:5" pos:end="81:56"><name pos:start="81:5" pos:end="81:21"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:21">catalog_bitmap</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <call pos:start="81:25" pos:end="81:56"><name pos:start="81:25" pos:end="81:35">qemu_malloc</name><argument_list pos:start="81:36" pos:end="81:56">(<argument pos:start="81:37" pos:end="81:55"><expr pos:start="81:37" pos:end="81:55"><name pos:start="81:37" pos:end="81:51"><name pos:start="81:37" pos:end="81:37">s</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:51">catalog_size</name></name> <operator pos:start="81:53" pos:end="81:53">*</operator> <literal type="number" pos:start="81:55" pos:end="81:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="87:18"><if pos:start="83:5" pos:end="87:18">if <condition pos:start="83:8" pos:end="85:28">(<expr pos:start="83:9" pos:end="85:27"><call pos:start="83:9" pos:end="83:59"><name pos:start="83:9" pos:end="83:12">read</name><argument_list pos:start="83:13" pos:end="83:59">(<argument pos:start="83:14" pos:end="83:18"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">s</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:18">fd</name></name></expr></argument>, <argument pos:start="83:21" pos:end="83:37"><expr pos:start="83:21" pos:end="83:37"><name pos:start="83:21" pos:end="83:37"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:37">catalog_bitmap</name></name></expr></argument>, <argument pos:start="83:40" pos:end="83:58"><expr pos:start="83:40" pos:end="83:58"><name pos:start="83:40" pos:end="83:54"><name pos:start="83:40" pos:end="83:40">s</name><operator pos:start="83:41" pos:end="83:42">-&gt;</operator><name pos:start="83:43" pos:end="83:54">catalog_size</name></name> <operator pos:start="83:56" pos:end="83:56">*</operator> <literal type="number" pos:start="83:58" pos:end="83:58">4</literal></expr></argument>)</argument_list></call> <operator pos:start="83:61" pos:end="83:62">!=</operator>

	<name pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:23">catalog_size</name></name> <operator pos:start="85:25" pos:end="85:25">*</operator> <literal type="number" pos:start="85:27" pos:end="85:27">4</literal></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:18"><block_content pos:start="87:9" pos:end="87:18">

	<goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="89:5" pos:end="91:44">for <control pos:start="89:9" pos:end="89:41">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:36"><expr pos:start="89:17" pos:end="89:35"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:35"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:35">catalog_size</name></name></expr>;</condition> <incr pos:start="89:38" pos:end="89:40"><expr pos:start="89:38" pos:end="89:40"><name pos:start="89:38" pos:end="89:38">i</name><operator pos:start="89:39" pos:end="89:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="91:9" pos:end="91:44"><block_content pos:start="91:9" pos:end="91:44">

	<expr_stmt pos:start="91:9" pos:end="91:44"><expr pos:start="91:9" pos:end="91:43"><call pos:start="91:9" pos:end="91:43"><name pos:start="91:9" pos:end="91:20">le32_to_cpus</name><argument_list pos:start="91:21" pos:end="91:43">(<argument pos:start="91:22" pos:end="91:42"><expr pos:start="91:22" pos:end="91:42"><operator pos:start="91:22" pos:end="91:22">&amp;</operator><name pos:start="91:23" pos:end="91:42"><name pos:start="91:23" pos:end="91:23">s</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:39">catalog_bitmap</name><index pos:start="91:40" pos:end="91:42">[<expr pos:start="91:41" pos:end="91:41"><name pos:start="91:41" pos:end="91:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="95:5" pos:end="95:71"><expr pos:start="95:5" pos:end="95:70"><name pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:18">data_offset</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <call pos:start="95:22" pos:end="95:46"><name pos:start="95:22" pos:end="95:32">le32_to_cpu</name><argument_list pos:start="95:33" pos:end="95:46">(<argument pos:start="95:34" pos:end="95:45"><expr pos:start="95:34" pos:end="95:45"><name pos:start="95:34" pos:end="95:45"><name pos:start="95:34" pos:end="95:38">bochs</name><operator pos:start="95:39" pos:end="95:39">.</operator><name pos:start="95:40" pos:end="95:45">header</name></name></expr></argument>)</argument_list></call> <operator pos:start="95:48" pos:end="95:48">+</operator> <operator pos:start="95:50" pos:end="95:50">(</operator><name pos:start="95:51" pos:end="95:65"><name pos:start="95:51" pos:end="95:51">s</name><operator pos:start="95:52" pos:end="95:53">-&gt;</operator><name pos:start="95:54" pos:end="95:65">catalog_size</name></name> <operator pos:start="95:67" pos:end="95:67">*</operator> <literal type="number" pos:start="95:69" pos:end="95:69">4</literal><operator pos:start="95:70" pos:end="95:70">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:79"><expr pos:start="99:5" pos:end="99:78"><name pos:start="99:5" pos:end="99:20"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:20">bitmap_blocks</name></name> <operator pos:start="99:22" pos:end="99:22">=</operator> <literal type="number" pos:start="99:24" pos:end="99:26">1</literal> <operator pos:start="99:26" pos:end="99:26">+</operator> <operator pos:start="99:28" pos:end="99:28">(</operator><call pos:start="99:29" pos:end="99:67"><name pos:start="99:29" pos:end="99:39">le32_to_cpu</name><argument_list pos:start="99:40" pos:end="99:67">(<argument pos:start="99:41" pos:end="99:66"><expr pos:start="99:41" pos:end="99:66"><name pos:start="99:41" pos:end="99:66"><name pos:start="99:41" pos:end="99:45">bochs</name><operator pos:start="99:46" pos:end="99:46">.</operator><name pos:start="99:47" pos:end="99:51">extra</name><operator pos:start="99:52" pos:end="99:52">.</operator><name pos:start="99:53" pos:end="99:59">redolog</name><operator pos:start="99:60" pos:end="99:60">.</operator><name pos:start="99:61" pos:end="99:66">bitmap</name></name></expr></argument>)</argument_list></call> <operator pos:start="99:69" pos:end="99:69">-</operator> <literal type="number" pos:start="99:71" pos:end="99:71">1</literal><operator pos:start="99:72" pos:end="99:72">)</operator> <operator pos:start="99:74" pos:end="99:74">/</operator> <literal type="number" pos:start="99:76" pos:end="99:78">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:79"><expr pos:start="101:5" pos:end="101:78"><name pos:start="101:5" pos:end="101:20"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:20">extent_blocks</name></name> <operator pos:start="101:22" pos:end="101:22">=</operator> <literal type="number" pos:start="101:24" pos:end="101:26">1</literal> <operator pos:start="101:26" pos:end="101:26">+</operator> <operator pos:start="101:28" pos:end="101:28">(</operator><call pos:start="101:29" pos:end="101:67"><name pos:start="101:29" pos:end="101:39">le32_to_cpu</name><argument_list pos:start="101:40" pos:end="101:67">(<argument pos:start="101:41" pos:end="101:66"><expr pos:start="101:41" pos:end="101:66"><name pos:start="101:41" pos:end="101:66"><name pos:start="101:41" pos:end="101:45">bochs</name><operator pos:start="101:46" pos:end="101:46">.</operator><name pos:start="101:47" pos:end="101:51">extra</name><operator pos:start="101:52" pos:end="101:52">.</operator><name pos:start="101:53" pos:end="101:59">redolog</name><operator pos:start="101:60" pos:end="101:60">.</operator><name pos:start="101:61" pos:end="101:66">extent</name></name></expr></argument>)</argument_list></call> <operator pos:start="101:69" pos:end="101:69">-</operator> <literal type="number" pos:start="101:71" pos:end="101:71">1</literal><operator pos:start="101:72" pos:end="101:72">)</operator> <operator pos:start="101:74" pos:end="101:74">/</operator> <literal type="number" pos:start="101:76" pos:end="101:78">512</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:61"><expr pos:start="105:5" pos:end="105:60"><name pos:start="105:5" pos:end="105:18"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:18">extent_size</name></name> <operator pos:start="105:20" pos:end="105:20">=</operator> <call pos:start="105:22" pos:end="105:60"><name pos:start="105:22" pos:end="105:32">le32_to_cpu</name><argument_list pos:start="105:33" pos:end="105:60">(<argument pos:start="105:34" pos:end="105:59"><expr pos:start="105:34" pos:end="105:59"><name pos:start="105:34" pos:end="105:59"><name pos:start="105:34" pos:end="105:38">bochs</name><operator pos:start="105:39" pos:end="105:39">.</operator><name pos:start="105:40" pos:end="105:44">extra</name><operator pos:start="105:45" pos:end="105:45">.</operator><name pos:start="105:46" pos:end="105:52">redolog</name><operator pos:start="105:53" pos:end="105:53">.</operator><name pos:start="105:54" pos:end="105:59">extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

 <label pos:start="111:2" pos:end="111:6"><name pos:start="111:2" pos:end="111:5">fail</name>:</label>

    <expr_stmt pos:start="113:5" pos:end="113:14"><expr pos:start="113:5" pos:end="113:13"><call pos:start="113:5" pos:end="113:13"><name pos:start="113:5" pos:end="113:9">close</name><argument_list pos:start="113:10" pos:end="113:13">(<argument pos:start="113:11" pos:end="113:12"><expr pos:start="113:11" pos:end="113:12"><name pos:start="113:11" pos:end="113:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:14">return <expr pos:start="115:12" pos:end="115:13"><operator pos:start="115:12" pos:end="115:12">-</operator><literal type="number" pos:start="115:13" pos:end="115:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
