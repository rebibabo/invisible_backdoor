<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21662.c" pos:tabs="8"><function pos:start="1:1" pos:end="355:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">sunrast_decode_frame</name><parameter_list pos:start="1:32" pos:end="3:64">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:46">got_frame</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="355:1">{<block_content pos:start="7:5" pos:end="353:26">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name>       <init pos:start="7:30" pos:end="7:42">= <expr pos:start="7:32" pos:end="7:42"><name pos:start="7:32" pos:end="7:42"><name pos:start="7:32" pos:end="7:36">avpkt</name><operator pos:start="7:37" pos:end="7:38">-&gt;</operator><name pos:start="7:39" pos:end="7:42">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:26">buf_end</name>   <init pos:start="9:30" pos:end="9:56">= <expr pos:start="9:32" pos:end="9:56"><name pos:start="9:32" pos:end="9:42"><name pos:start="9:32" pos:end="9:36">avpkt</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:42">data</name></name> <operator pos:start="9:44" pos:end="9:44">+</operator> <name pos:start="9:46" pos:end="9:56"><name pos:start="9:46" pos:end="9:50">avpkt</name><operator pos:start="9:51" pos:end="9:52">-&gt;</operator><name pos:start="9:53" pos:end="9:56">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier> <specifier pos:start="11:15" pos:end="11:19">const</specifier></type> <name pos:start="11:21" pos:end="11:21">p</name>        <init pos:start="11:30" pos:end="11:35">= <expr pos:start="11:32" pos:end="11:35"><name pos:start="11:32" pos:end="11:35">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:80"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:18">w</name></decl>, <decl pos:start="13:21" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:21" pos:end="13:21">h</name></decl>, <decl pos:start="13:24" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:24" pos:end="13:28">depth</name></decl>, <decl pos:start="13:31" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:31" pos:end="13:34">type</name></decl>, <decl pos:start="13:37" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:37" pos:end="13:43">maptype</name></decl>, <decl pos:start="13:46" pos:end="13:54"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:46" pos:end="13:54">maplength</name></decl>, <decl pos:start="13:57" pos:end="13:62"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:57" pos:end="13:62">stride</name></decl>, <decl pos:start="13:65" pos:end="13:65"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:65" pos:end="13:65">x</name></decl>, <decl pos:start="13:68" pos:end="13:68"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:68" pos:end="13:68">y</name></decl>, <decl pos:start="13:71" pos:end="13:73"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:71" pos:end="13:73">len</name></decl>, <decl pos:start="13:76" pos:end="13:79"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:76" pos:end="13:79">alen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:16">ptr</name></decl>, <decl pos:start="15:19" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:23">ptr2</name> <init pos:start="15:25" pos:end="15:30">= <expr pos:start="15:27" pos:end="15:30"><name pos:start="15:27" pos:end="15:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:27">bufstart</name> <init pos:start="17:29" pos:end="17:33">= <expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:33">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:35"><if pos:start="23:5" pos:end="25:35">if <condition pos:start="23:8" pos:end="23:25">(<expr pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:13">avpkt</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:19">size</name></name> <operator pos:start="23:21" pos:end="23:21">&lt;</operator> <literal type="number" pos:start="23:23" pos:end="23:24">32</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:35"><block_content pos:start="25:9" pos:end="25:35">

        <return pos:start="25:9" pos:end="25:35">return <expr pos:start="25:16" pos:end="25:34"><name pos:start="25:16" pos:end="25:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:34">(<expr pos:start="29:9" pos:end="29:33"><call pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:15">AV_RB32</name><argument_list pos:start="29:16" pos:end="29:20">(<argument pos:start="29:17" pos:end="29:19"><expr pos:start="29:17" pos:end="29:19"><name pos:start="29:17" pos:end="29:19">buf</name></expr></argument>)</argument_list></call> <operator pos:start="29:22" pos:end="29:23">!=</operator> <name pos:start="29:25" pos:end="29:33">RAS_MAGIC</name></expr>)</condition> <block pos:start="29:36" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:35">

        <expr_stmt pos:start="31:9" pos:end="31:73"><expr pos:start="31:9" pos:end="31:72"><call pos:start="31:9" pos:end="31:72"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:72">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:71"><expr pos:start="31:37" pos:end="31:71"><literal type="string" pos:start="31:37" pos:end="31:71">"this is not sunras encoded data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:35">return <expr pos:start="33:16" pos:end="33:34"><name pos:start="33:16" pos:end="33:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:5">w</name>         <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:32"><name pos:start="39:17" pos:end="39:23">AV_RB32</name><argument_list pos:start="39:24" pos:end="39:32">(<argument pos:start="39:25" pos:end="39:31"><expr pos:start="39:25" pos:end="39:31"><name pos:start="39:25" pos:end="39:27">buf</name> <operator pos:start="39:29" pos:end="39:29">+</operator> <literal type="number" pos:start="39:31" pos:end="39:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:33"><expr pos:start="41:5" pos:end="41:32"><name pos:start="41:5" pos:end="41:5">h</name>         <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:23">AV_RB32</name><argument_list pos:start="41:24" pos:end="41:32">(<argument pos:start="41:25" pos:end="41:31"><expr pos:start="41:25" pos:end="41:31"><name pos:start="41:25" pos:end="41:27">buf</name> <operator pos:start="41:29" pos:end="41:29">+</operator> <literal type="number" pos:start="41:31" pos:end="41:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:9">depth</name>     <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:23">AV_RB32</name><argument_list pos:start="43:24" pos:end="43:33">(<argument pos:start="43:25" pos:end="43:32"><expr pos:start="43:25" pos:end="43:32"><name pos:start="43:25" pos:end="43:27">buf</name> <operator pos:start="43:29" pos:end="43:29">+</operator> <literal type="number" pos:start="43:31" pos:end="43:32">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:34"><expr pos:start="45:5" pos:end="45:33"><name pos:start="45:5" pos:end="45:8">type</name>      <operator pos:start="45:15" pos:end="45:15">=</operator> <call pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:23">AV_RB32</name><argument_list pos:start="45:24" pos:end="45:33">(<argument pos:start="45:25" pos:end="45:32"><expr pos:start="45:25" pos:end="45:32"><name pos:start="45:25" pos:end="45:27">buf</name> <operator pos:start="45:29" pos:end="45:29">+</operator> <literal type="number" pos:start="45:31" pos:end="45:32">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:34"><expr pos:start="47:5" pos:end="47:33"><name pos:start="47:5" pos:end="47:11">maptype</name>   <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:23">AV_RB32</name><argument_list pos:start="47:24" pos:end="47:33">(<argument pos:start="47:25" pos:end="47:32"><expr pos:start="47:25" pos:end="47:32"><name pos:start="47:25" pos:end="47:27">buf</name> <operator pos:start="47:29" pos:end="47:29">+</operator> <literal type="number" pos:start="47:31" pos:end="47:32">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:34"><expr pos:start="49:5" pos:end="49:33"><name pos:start="49:5" pos:end="49:13">maplength</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:33"><name pos:start="49:17" pos:end="49:23">AV_RB32</name><argument_list pos:start="49:24" pos:end="49:33">(<argument pos:start="49:25" pos:end="49:32"><expr pos:start="49:25" pos:end="49:32"><name pos:start="49:25" pos:end="49:27">buf</name> <operator pos:start="49:29" pos:end="49:29">+</operator> <literal type="number" pos:start="49:31" pos:end="49:32">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:7">buf</name>      <operator pos:start="51:14" pos:end="51:15">+=</operator> <literal type="number" pos:start="51:17" pos:end="51:18">32</literal></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:32">(<expr pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:12">type</name> <operator pos:start="55:14" pos:end="55:15">==</operator> <name pos:start="55:17" pos:end="55:31">RT_EXPERIMENTAL</name></expr>)</condition> <block pos:start="55:34" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:36">

        <expr_stmt pos:start="57:9" pos:end="57:81"><expr pos:start="57:9" pos:end="57:80"><call pos:start="57:9" pos:end="57:80"><name pos:start="57:9" pos:end="57:29">avpriv_request_sample</name><argument_list pos:start="57:30" pos:end="57:80">(<argument pos:start="57:31" pos:end="57:35"><expr pos:start="57:31" pos:end="57:35"><name pos:start="57:31" pos:end="57:35">avctx</name></expr></argument>, <argument pos:start="57:38" pos:end="57:79"><expr pos:start="57:38" pos:end="57:79"><literal type="string" pos:start="57:38" pos:end="57:79">"TIFF/IFF/EXPERIMENTAL (compression) type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:36">return <expr pos:start="59:16" pos:end="59:35"><name pos:start="59:16" pos:end="59:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:29">(<expr pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:12">type</name> <operator pos:start="63:14" pos:end="63:14">&gt;</operator> <name pos:start="63:16" pos:end="63:28">RT_FORMAT_IFF</name></expr>)</condition> <block pos:start="63:31" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:35">

        <expr_stmt pos:start="65:9" pos:end="65:68"><expr pos:start="65:9" pos:end="65:67"><call pos:start="65:9" pos:end="65:67"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:67">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:66"><expr pos:start="65:37" pos:end="65:66"><literal type="string" pos:start="65:37" pos:end="65:66">"invalid (compression) type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:35">return <expr pos:start="67:16" pos:end="67:34"><name pos:start="67:16" pos:end="67:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:27">(<expr pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:15">maptype</name> <operator pos:start="71:17" pos:end="71:18">==</operator> <name pos:start="71:20" pos:end="71:26">RMT_RAW</name></expr>)</condition> <block pos:start="71:29" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:36">

        <expr_stmt pos:start="73:9" pos:end="73:62"><expr pos:start="73:9" pos:end="73:61"><call pos:start="73:9" pos:end="73:61"><name pos:start="73:9" pos:end="73:29">avpriv_request_sample</name><argument_list pos:start="73:30" pos:end="73:61">(<argument pos:start="73:31" pos:end="73:35"><expr pos:start="73:31" pos:end="73:35"><name pos:start="73:31" pos:end="73:35">avctx</name></expr></argument>, <argument pos:start="73:38" pos:end="73:60"><expr pos:start="73:38" pos:end="73:60"><literal type="string" pos:start="73:38" pos:end="73:60">"Unknown colormap type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:36">return <expr pos:start="75:16" pos:end="75:35"><name pos:start="75:16" pos:end="75:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:26">(<expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:15">maptype</name> <operator pos:start="79:17" pos:end="79:17">&gt;</operator> <name pos:start="79:19" pos:end="79:25">RMT_RAW</name></expr>)</condition> <block pos:start="79:28" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:35">

        <expr_stmt pos:start="81:9" pos:end="81:63"><expr pos:start="81:9" pos:end="81:62"><call pos:start="81:9" pos:end="81:62"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="81:62">(<argument pos:start="81:16" pos:end="81:20"><expr pos:start="81:16" pos:end="81:20"><name pos:start="81:16" pos:end="81:20">avctx</name></expr></argument>, <argument pos:start="81:23" pos:end="81:34"><expr pos:start="81:23" pos:end="81:34"><name pos:start="81:23" pos:end="81:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:37" pos:end="81:61"><expr pos:start="81:37" pos:end="81:61"><literal type="string" pos:start="81:37" pos:end="81:61">"invalid colormap type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:35">return <expr pos:start="83:16" pos:end="83:34"><name pos:start="83:16" pos:end="83:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:56">(<expr pos:start="89:9" pos:end="89:55"><name pos:start="89:9" pos:end="89:12">type</name> <operator pos:start="89:14" pos:end="89:15">==</operator> <name pos:start="89:17" pos:end="89:30">RT_FORMAT_TIFF</name> <operator pos:start="89:32" pos:end="89:33">||</operator> <name pos:start="89:35" pos:end="89:38">type</name> <operator pos:start="89:40" pos:end="89:41">==</operator> <name pos:start="89:43" pos:end="89:55">RT_FORMAT_IFF</name></expr>)</condition> <block pos:start="89:58" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:18">

        <expr_stmt pos:start="91:9" pos:end="91:72"><expr pos:start="91:9" pos:end="91:71"><call pos:start="91:9" pos:end="91:71"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:71">(<argument pos:start="91:16" pos:end="91:20"><expr pos:start="91:16" pos:end="91:20"><name pos:start="91:16" pos:end="91:20">avctx</name></expr></argument>, <argument pos:start="91:23" pos:end="91:34"><expr pos:start="91:23" pos:end="91:34"><name pos:start="91:23" pos:end="91:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:37" pos:end="91:70"><expr pos:start="91:37" pos:end="91:70"><literal type="string" pos:start="91:37" pos:end="91:70">"unsupported (compression) type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:18">return <expr pos:start="93:16" pos:end="93:17"><operator pos:start="93:16" pos:end="93:16">-</operator><literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="99:5" pos:end="137:5">switch <condition pos:start="99:12" pos:end="99:18">(<expr pos:start="99:13" pos:end="99:17"><name pos:start="99:13" pos:end="99:17">depth</name></expr>)</condition> <block pos:start="99:20" pos:end="137:5">{<block_content pos:start="101:9" pos:end="135:39">

        <case pos:start="101:9" pos:end="101:15">case <expr pos:start="101:14" pos:end="101:14"><literal type="number" pos:start="101:14" pos:end="101:14">1</literal></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:80"><expr pos:start="103:13" pos:end="103:79"><name pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:17">avctx</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:26">pix_fmt</name></name> <operator pos:start="103:28" pos:end="103:28">=</operator> <ternary pos:start="103:30" pos:end="103:79"><condition pos:start="103:30" pos:end="103:40"><expr pos:start="103:30" pos:end="103:38"><name pos:start="103:30" pos:end="103:38">maplength</name></expr> ?</condition><then pos:start="103:42" pos:end="103:56"> <expr pos:start="103:42" pos:end="103:56"><name pos:start="103:42" pos:end="103:56">AV_PIX_FMT_PAL8</name></expr> </then><else pos:start="103:58" pos:end="103:79">: <expr pos:start="103:60" pos:end="103:79"><name pos:start="103:60" pos:end="103:79">AV_PIX_FMT_MONOWHITE</name></expr></else></ternary></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <case pos:start="107:9" pos:end="107:15">case <expr pos:start="107:14" pos:end="107:14"><literal type="number" pos:start="107:14" pos:end="107:14">4</literal></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:75"><expr pos:start="109:13" pos:end="109:74"><name pos:start="109:13" pos:end="109:26"><name pos:start="109:13" pos:end="109:17">avctx</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:26">pix_fmt</name></name> <operator pos:start="109:28" pos:end="109:28">=</operator> <ternary pos:start="109:30" pos:end="109:74"><condition pos:start="109:30" pos:end="109:40"><expr pos:start="109:30" pos:end="109:38"><name pos:start="109:30" pos:end="109:38">maplength</name></expr> ?</condition><then pos:start="109:42" pos:end="109:56"> <expr pos:start="109:42" pos:end="109:56"><name pos:start="109:42" pos:end="109:56">AV_PIX_FMT_PAL8</name></expr> </then><else pos:start="109:58" pos:end="109:74">: <expr pos:start="109:60" pos:end="109:74"><name pos:start="109:60" pos:end="109:74">AV_PIX_FMT_NONE</name></expr></else></ternary></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        <case pos:start="113:9" pos:end="113:15">case <expr pos:start="113:14" pos:end="113:14"><literal type="number" pos:start="113:14" pos:end="113:14">8</literal></expr>:</case>

            <expr_stmt pos:start="115:13" pos:end="115:76"><expr pos:start="115:13" pos:end="115:75"><name pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:17">avctx</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:26">pix_fmt</name></name> <operator pos:start="115:28" pos:end="115:28">=</operator> <ternary pos:start="115:30" pos:end="115:75"><condition pos:start="115:30" pos:end="115:40"><expr pos:start="115:30" pos:end="115:38"><name pos:start="115:30" pos:end="115:38">maplength</name></expr> ?</condition><then pos:start="115:42" pos:end="115:56"> <expr pos:start="115:42" pos:end="115:56"><name pos:start="115:42" pos:end="115:56">AV_PIX_FMT_PAL8</name></expr> </then><else pos:start="115:58" pos:end="115:75">: <expr pos:start="115:60" pos:end="115:75"><name pos:start="115:60" pos:end="115:75">AV_PIX_FMT_GRAY8</name></expr></else></ternary></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <case pos:start="119:9" pos:end="119:16">case <expr pos:start="119:14" pos:end="119:15"><literal type="number" pos:start="119:14" pos:end="119:15">24</literal></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:91"><expr pos:start="121:13" pos:end="121:90"><name pos:start="121:13" pos:end="121:26"><name pos:start="121:13" pos:end="121:17">avctx</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:26">pix_fmt</name></name> <operator pos:start="121:28" pos:end="121:28">=</operator> <ternary pos:start="121:30" pos:end="121:90"><condition pos:start="121:30" pos:end="121:54"><expr pos:start="121:30" pos:end="121:52"><operator pos:start="121:30" pos:end="121:30">(</operator><name pos:start="121:31" pos:end="121:34">type</name> <operator pos:start="121:36" pos:end="121:37">==</operator> <name pos:start="121:39" pos:end="121:51">RT_FORMAT_RGB</name><operator pos:start="121:52" pos:end="121:52">)</operator></expr> ?</condition><then pos:start="121:56" pos:end="121:71"> <expr pos:start="121:56" pos:end="121:71"><name pos:start="121:56" pos:end="121:71">AV_PIX_FMT_RGB24</name></expr> </then><else pos:start="121:73" pos:end="121:90">: <expr pos:start="121:75" pos:end="121:90"><name pos:start="121:75" pos:end="121:90">AV_PIX_FMT_BGR24</name></expr></else></ternary></expr>;</expr_stmt>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:16">case <expr pos:start="125:14" pos:end="125:15"><literal type="number" pos:start="125:14" pos:end="125:15">32</literal></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:89"><expr pos:start="127:13" pos:end="127:88"><name pos:start="127:13" pos:end="127:26"><name pos:start="127:13" pos:end="127:17">avctx</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:26">pix_fmt</name></name> <operator pos:start="127:28" pos:end="127:28">=</operator> <ternary pos:start="127:30" pos:end="127:88"><condition pos:start="127:30" pos:end="127:54"><expr pos:start="127:30" pos:end="127:52"><operator pos:start="127:30" pos:end="127:30">(</operator><name pos:start="127:31" pos:end="127:34">type</name> <operator pos:start="127:36" pos:end="127:37">==</operator> <name pos:start="127:39" pos:end="127:51">RT_FORMAT_RGB</name><operator pos:start="127:52" pos:end="127:52">)</operator></expr> ?</condition><then pos:start="127:56" pos:end="127:70"> <expr pos:start="127:56" pos:end="127:70"><name pos:start="127:56" pos:end="127:70">AV_PIX_FMT_0RGB</name></expr> </then><else pos:start="127:72" pos:end="127:88">: <expr pos:start="127:74" pos:end="127:88"><name pos:start="127:74" pos:end="127:88">AV_PIX_FMT_0BGR</name></expr></else></ternary></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <default pos:start="131:9" pos:end="131:16">default:</default>

            <expr_stmt pos:start="133:13" pos:end="133:59"><expr pos:start="133:13" pos:end="133:58"><call pos:start="133:13" pos:end="133:58"><name pos:start="133:13" pos:end="133:18">av_log</name><argument_list pos:start="133:19" pos:end="133:58">(<argument pos:start="133:20" pos:end="133:24"><expr pos:start="133:20" pos:end="133:24"><name pos:start="133:20" pos:end="133:24">avctx</name></expr></argument>, <argument pos:start="133:27" pos:end="133:38"><expr pos:start="133:27" pos:end="133:38"><name pos:start="133:27" pos:end="133:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:41" pos:end="133:57"><expr pos:start="133:41" pos:end="133:57"><literal type="string" pos:start="133:41" pos:end="133:57">"invalid depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="135:13" pos:end="135:39">return <expr pos:start="135:20" pos:end="135:38"><name pos:start="135:20" pos:end="135:38">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="141:5" pos:end="141:41"><expr pos:start="141:5" pos:end="141:40"><name pos:start="141:5" pos:end="141:7">ret</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <call pos:start="141:11" pos:end="141:40"><name pos:start="141:11" pos:end="141:27">ff_set_dimensions</name><argument_list pos:start="141:28" pos:end="141:40">(<argument pos:start="141:29" pos:end="141:33"><expr pos:start="141:29" pos:end="141:33"><name pos:start="141:29" pos:end="141:33">avctx</name></expr></argument>, <argument pos:start="141:36" pos:end="141:36"><expr pos:start="141:36" pos:end="141:36"><name pos:start="141:36" pos:end="141:36">w</name></expr></argument>, <argument pos:start="141:39" pos:end="141:39"><expr pos:start="141:39" pos:end="141:39"><name pos:start="141:39" pos:end="141:39">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="145:19"><if pos:start="143:5" pos:end="145:19">if <condition pos:start="143:8" pos:end="143:16">(<expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">&lt;</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:19"><block_content pos:start="145:9" pos:end="145:19">

        <return pos:start="145:9" pos:end="145:19">return <expr pos:start="145:16" pos:end="145:18"><name pos:start="145:16" pos:end="145:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="151:19"><if pos:start="149:5" pos:end="151:19">if <condition pos:start="149:8" pos:end="149:47">(<expr pos:start="149:9" pos:end="149:46"><operator pos:start="149:9" pos:end="149:9">(</operator><name pos:start="149:10" pos:end="149:12">ret</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:41"><name pos:start="149:16" pos:end="149:28">ff_get_buffer</name><argument_list pos:start="149:29" pos:end="149:41">(<argument pos:start="149:30" pos:end="149:34"><expr pos:start="149:30" pos:end="149:34"><name pos:start="149:30" pos:end="149:34">avctx</name></expr></argument>, <argument pos:start="149:37" pos:end="149:37"><expr pos:start="149:37" pos:end="149:37"><name pos:start="149:37" pos:end="149:37">p</name></expr></argument>, <argument pos:start="149:40" pos:end="149:40"><expr pos:start="149:40" pos:end="149:40"><literal type="number" pos:start="149:40" pos:end="149:40">0</literal></expr></argument>)</argument_list></call><operator pos:start="149:42" pos:end="149:42">)</operator> <operator pos:start="149:44" pos:end="149:44">&lt;</operator> <literal type="number" pos:start="149:46" pos:end="149:46">0</literal></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:19"><block_content pos:start="151:9" pos:end="151:19">

        <return pos:start="151:9" pos:end="151:19">return <expr pos:start="151:16" pos:end="151:18"><name pos:start="151:16" pos:end="151:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:37"><expr pos:start="155:5" pos:end="155:36"><name pos:start="155:5" pos:end="155:16"><name pos:start="155:5" pos:end="155:5">p</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:16">pict_type</name></name> <operator pos:start="155:18" pos:end="155:18">=</operator> <name pos:start="155:20" pos:end="155:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="161:35"><if pos:start="159:5" pos:end="161:35">if <condition pos:start="159:8" pos:end="159:34">(<expr pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:15">buf_end</name> <operator pos:start="159:17" pos:end="159:17">-</operator> <name pos:start="159:19" pos:end="159:21">buf</name> <operator pos:start="159:23" pos:end="159:23">&lt;</operator> <name pos:start="159:25" pos:end="159:33">maplength</name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:35"><block_content pos:start="161:9" pos:end="161:35">

        <return pos:start="161:9" pos:end="161:35">return <expr pos:start="161:16" pos:end="161:34"><name pos:start="161:16" pos:end="161:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="193:5"><if pos:start="165:5" pos:end="171:5">if <condition pos:start="165:8" pos:end="165:31">(<expr pos:start="165:9" pos:end="165:30"><name pos:start="165:9" pos:end="165:13">depth</name> <operator pos:start="165:15" pos:end="165:15">&gt;</operator> <literal type="number" pos:start="165:17" pos:end="165:17">8</literal> <operator pos:start="165:19" pos:end="165:20">&amp;&amp;</operator> <name pos:start="165:22" pos:end="165:30">maplength</name></expr>)</condition> <block pos:start="165:33" pos:end="171:5">{<block_content pos:start="167:9" pos:end="167:106">

        <expr_stmt pos:start="167:9" pos:end="167:106"><expr pos:start="167:9" pos:end="167:105"><call pos:start="167:9" pos:end="167:105"><name pos:start="167:9" pos:end="167:14">av_log</name><argument_list pos:start="167:15" pos:end="167:105">(<argument pos:start="167:16" pos:end="167:20"><expr pos:start="167:16" pos:end="167:20"><name pos:start="167:16" pos:end="167:20">avctx</name></expr></argument>, <argument pos:start="167:23" pos:end="167:36"><expr pos:start="167:23" pos:end="167:36"><name pos:start="167:23" pos:end="167:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="167:39" pos:end="167:104"><expr pos:start="167:39" pos:end="167:104"><literal type="string" pos:start="167:39" pos:end="167:104">"useless colormap found or file is corrupted, trying to recover\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="171:7" pos:end="193:5">else if <condition pos:start="171:15" pos:end="171:25">(<expr pos:start="171:16" pos:end="171:24"><name pos:start="171:16" pos:end="171:24">maplength</name></expr>)</condition> <block pos:start="171:27" pos:end="193:5">{<block_content pos:start="173:9" pos:end="191:93">

        <decl_stmt pos:start="173:9" pos:end="173:41"><decl pos:start="173:9" pos:end="173:40"><type pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:16">unsigned</name> <name pos:start="173:18" pos:end="173:20">int</name></type> <name pos:start="173:22" pos:end="173:24">len</name> <init pos:start="173:26" pos:end="173:40">= <expr pos:start="173:28" pos:end="173:40"><name pos:start="173:28" pos:end="173:36">maplength</name> <operator pos:start="173:38" pos:end="173:38">/</operator> <literal type="number" pos:start="173:40" pos:end="173:40">3</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:45">(<expr pos:start="177:13" pos:end="177:44"><name pos:start="177:13" pos:end="177:21">maplength</name> <operator pos:start="177:23" pos:end="177:23">%</operator> <literal type="number" pos:start="177:25" pos:end="177:25">3</literal> <operator pos:start="177:27" pos:end="177:28">||</operator> <name pos:start="177:30" pos:end="177:38">maplength</name> <operator pos:start="177:40" pos:end="177:40">&gt;</operator> <literal type="number" pos:start="177:42" pos:end="177:44">768</literal></expr>)</condition> <block pos:start="177:47" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:39">

            <expr_stmt pos:start="179:13" pos:end="179:71"><expr pos:start="179:13" pos:end="179:70"><call pos:start="179:13" pos:end="179:70"><name pos:start="179:13" pos:end="179:18">av_log</name><argument_list pos:start="179:19" pos:end="179:70">(<argument pos:start="179:20" pos:end="179:24"><expr pos:start="179:20" pos:end="179:24"><name pos:start="179:20" pos:end="179:24">avctx</name></expr></argument>, <argument pos:start="179:27" pos:end="179:40"><expr pos:start="179:27" pos:end="179:40"><name pos:start="179:27" pos:end="179:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="179:43" pos:end="179:69"><expr pos:start="179:43" pos:end="179:69"><literal type="string" pos:start="179:43" pos:end="179:69">"invalid colormap length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="181:13" pos:end="181:39">return <expr pos:start="181:20" pos:end="181:38"><name pos:start="181:20" pos:end="181:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:25"><expr pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:11">ptr</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <name pos:start="187:15" pos:end="187:24"><name pos:start="187:15" pos:end="187:15">p</name><operator pos:start="187:16" pos:end="187:17">-&gt;</operator><name pos:start="187:18" pos:end="187:21">data</name><index pos:start="187:22" pos:end="187:24">[<expr pos:start="187:23" pos:end="187:23"><literal type="number" pos:start="187:23" pos:end="187:23">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="189:9" pos:end="191:93">for <control pos:start="189:13" pos:end="189:43">(<init pos:start="189:14" pos:end="189:19"><expr pos:start="189:14" pos:end="189:18"><name pos:start="189:14" pos:end="189:14">x</name> <operator pos:start="189:16" pos:end="189:16">=</operator> <literal type="number" pos:start="189:18" pos:end="189:18">0</literal></expr>;</init> <condition pos:start="189:21" pos:end="189:28"><expr pos:start="189:21" pos:end="189:27"><name pos:start="189:21" pos:end="189:21">x</name> <operator pos:start="189:23" pos:end="189:23">&lt;</operator> <name pos:start="189:25" pos:end="189:27">len</name></expr>;</condition> <incr pos:start="189:30" pos:end="189:42"><expr pos:start="189:30" pos:end="189:32"><name pos:start="189:30" pos:end="189:30">x</name><operator pos:start="189:31" pos:end="189:32">++</operator></expr><operator pos:start="189:33" pos:end="189:33">,</operator> <expr pos:start="189:35" pos:end="189:42"><name pos:start="189:35" pos:end="189:37">ptr</name> <operator pos:start="189:39" pos:end="189:40">+=</operator> <literal type="number" pos:start="189:42" pos:end="189:42">4</literal></expr></incr>)</control><block type="pseudo" pos:start="191:13" pos:end="191:93"><block_content pos:start="191:13" pos:end="191:93">

            <expr_stmt pos:start="191:13" pos:end="191:93"><expr pos:start="191:13" pos:end="191:92"><operator pos:start="191:13" pos:end="191:13">*</operator><operator pos:start="191:14" pos:end="191:14">(</operator><name pos:start="191:15" pos:end="191:22">uint32_t</name> <operator pos:start="191:24" pos:end="191:24">*</operator><operator pos:start="191:25" pos:end="191:25">)</operator><name pos:start="191:26" pos:end="191:28">ptr</name> <operator pos:start="191:30" pos:end="191:30">=</operator> <operator pos:start="191:32" pos:end="191:32">(</operator><literal type="number" pos:start="191:33" pos:end="191:37">0xFFU</literal><operator pos:start="191:38" pos:end="191:39">&lt;&lt;</operator><literal type="number" pos:start="191:40" pos:end="191:41">24</literal><operator pos:start="191:42" pos:end="191:42">)</operator> <operator pos:start="191:44" pos:end="191:44">+</operator> <operator pos:start="191:46" pos:end="191:46">(</operator><name pos:start="191:47" pos:end="191:52"><name pos:start="191:47" pos:end="191:49">buf</name><index pos:start="191:50" pos:end="191:52">[<expr pos:start="191:51" pos:end="191:51"><name pos:start="191:51" pos:end="191:51">x</name></expr>]</index></name><operator pos:start="191:53" pos:end="191:54">&lt;&lt;</operator><literal type="number" pos:start="191:55" pos:end="191:56">16</literal><operator pos:start="191:57" pos:end="191:57">)</operator> <operator pos:start="191:59" pos:end="191:59">+</operator> <operator pos:start="191:61" pos:end="191:61">(</operator><name pos:start="191:62" pos:end="191:71"><name pos:start="191:62" pos:end="191:64">buf</name><index pos:start="191:65" pos:end="191:71">[<expr pos:start="191:66" pos:end="191:70"><name pos:start="191:66" pos:end="191:68">len</name><operator pos:start="191:69" pos:end="191:69">+</operator><name pos:start="191:70" pos:end="191:70">x</name></expr>]</index></name><operator pos:start="191:72" pos:end="191:73">&lt;&lt;</operator><literal type="number" pos:start="191:74" pos:end="191:74">8</literal><operator pos:start="191:75" pos:end="191:75">)</operator> <operator pos:start="191:77" pos:end="191:77">+</operator> <name pos:start="191:79" pos:end="191:92"><name pos:start="191:79" pos:end="191:81">buf</name><index pos:start="191:82" pos:end="191:92">[<expr pos:start="191:83" pos:end="191:91"><name pos:start="191:83" pos:end="191:85">len</name><operator pos:start="191:86" pos:end="191:86">+</operator><name pos:start="191:87" pos:end="191:89">len</name><operator pos:start="191:90" pos:end="191:90">+</operator><name pos:start="191:91" pos:end="191:91">x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:21"><expr pos:start="197:5" pos:end="197:20"><name pos:start="197:5" pos:end="197:7">buf</name> <operator pos:start="197:9" pos:end="197:10">+=</operator> <name pos:start="197:12" pos:end="197:20">maplength</name></expr>;</expr_stmt>



    <if_stmt pos:start="201:5" pos:end="217:5"><if pos:start="201:5" pos:end="211:5">if <condition pos:start="201:8" pos:end="201:31">(<expr pos:start="201:9" pos:end="201:30"><name pos:start="201:9" pos:end="201:17">maplength</name> <operator pos:start="201:19" pos:end="201:20">&amp;&amp;</operator> <name pos:start="201:22" pos:end="201:26">depth</name> <operator pos:start="201:28" pos:end="201:28">&lt;</operator> <literal type="number" pos:start="201:30" pos:end="201:30">8</literal></expr>)</condition> <block pos:start="201:33" pos:end="211:5">{<block_content pos:start="203:9" pos:end="209:39">

        <expr_stmt pos:start="203:9" pos:end="203:50"><expr pos:start="203:9" pos:end="203:49"><name pos:start="203:9" pos:end="203:11">ptr</name> <operator pos:start="203:13" pos:end="203:13">=</operator> <name pos:start="203:15" pos:end="203:18">ptr2</name> <operator pos:start="203:20" pos:end="203:20">=</operator> <call pos:start="203:22" pos:end="203:49"><name pos:start="203:22" pos:end="203:36">av_malloc_array</name><argument_list pos:start="203:37" pos:end="203:49">(<argument pos:start="203:38" pos:end="203:45"><expr pos:start="203:38" pos:end="203:45"><operator pos:start="203:38" pos:end="203:38">(</operator><name pos:start="203:39" pos:end="203:39">w</name> <operator pos:start="203:41" pos:end="203:41">+</operator> <literal type="number" pos:start="203:43" pos:end="203:44">15</literal><operator pos:start="203:45" pos:end="203:45">)</operator></expr></argument>, <argument pos:start="203:48" pos:end="203:48"><expr pos:start="203:48" pos:end="203:48"><name pos:start="203:48" pos:end="203:48">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="207:35"><if pos:start="205:9" pos:end="207:35">if <condition pos:start="205:12" pos:end="205:17">(<expr pos:start="205:13" pos:end="205:16"><operator pos:start="205:13" pos:end="205:13">!</operator><name pos:start="205:14" pos:end="205:16">ptr</name></expr>)</condition><block type="pseudo" pos:start="207:13" pos:end="207:35"><block_content pos:start="207:13" pos:end="207:35">

            <return pos:start="207:13" pos:end="207:35">return <expr pos:start="207:20" pos:end="207:34"><call pos:start="207:20" pos:end="207:34"><name pos:start="207:20" pos:end="207:26">AVERROR</name><argument_list pos:start="207:27" pos:end="207:34">(<argument pos:start="207:28" pos:end="207:33"><expr pos:start="207:28" pos:end="207:33"><name pos:start="207:28" pos:end="207:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:39"><expr pos:start="209:9" pos:end="209:38"><name pos:start="209:9" pos:end="209:14">stride</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <operator pos:start="209:18" pos:end="209:18">(</operator><name pos:start="209:19" pos:end="209:19">w</name> <operator pos:start="209:21" pos:end="209:21">+</operator> <literal type="number" pos:start="209:23" pos:end="209:24">15</literal> <operator pos:start="209:26" pos:end="209:27">&gt;&gt;</operator> <literal type="number" pos:start="209:29" pos:end="209:29">3</literal><operator pos:start="209:30" pos:end="209:30">)</operator> <operator pos:start="209:32" pos:end="209:32">*</operator> <name pos:start="209:34" pos:end="209:38">depth</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="211:7" pos:end="217:5">else <block pos:start="211:12" pos:end="217:5">{<block_content pos:start="213:5" pos:end="215:28">

    <expr_stmt pos:start="213:5" pos:end="213:24"><expr pos:start="213:5" pos:end="213:23"><name pos:start="213:5" pos:end="213:7">ptr</name>    <operator pos:start="213:12" pos:end="213:12">=</operator> <name pos:start="213:14" pos:end="213:23"><name pos:start="213:14" pos:end="213:14">p</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:20">data</name><index pos:start="213:21" pos:end="213:23">[<expr pos:start="213:22" pos:end="213:22"><literal type="number" pos:start="213:22" pos:end="213:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:28"><expr pos:start="215:5" pos:end="215:27"><name pos:start="215:5" pos:end="215:10">stride</name> <operator pos:start="215:12" pos:end="215:12">=</operator> <name pos:start="215:14" pos:end="215:27"><name pos:start="215:14" pos:end="215:14">p</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:24">linesize</name><index pos:start="215:25" pos:end="215:27">[<expr pos:start="215:26" pos:end="215:26"><literal type="number" pos:start="215:26" pos:end="215:26">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="221:5" pos:end="221:52">/* scanlines are aligned on 16 bit boundaries */</comment>

    <expr_stmt pos:start="223:5" pos:end="223:32"><expr pos:start="223:5" pos:end="223:31"><name pos:start="223:5" pos:end="223:7">len</name>  <operator pos:start="223:10" pos:end="223:10">=</operator> <operator pos:start="223:12" pos:end="223:12">(</operator><name pos:start="223:13" pos:end="223:17">depth</name> <operator pos:start="223:19" pos:end="223:19">*</operator> <name pos:start="223:21" pos:end="223:21">w</name> <operator pos:start="223:23" pos:end="223:23">+</operator> <literal type="number" pos:start="223:25" pos:end="223:25">7</literal><operator pos:start="223:26" pos:end="223:26">)</operator> <operator pos:start="223:28" pos:end="223:29">&gt;&gt;</operator> <literal type="number" pos:start="223:31" pos:end="223:31">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:27"><expr pos:start="225:5" pos:end="225:26"><name pos:start="225:5" pos:end="225:8">alen</name> <operator pos:start="225:10" pos:end="225:10">=</operator> <name pos:start="225:12" pos:end="225:14">len</name> <operator pos:start="225:16" pos:end="225:16">+</operator> <operator pos:start="225:18" pos:end="225:18">(</operator><name pos:start="225:19" pos:end="225:21">len</name> <operator pos:start="225:23" pos:end="225:23">&amp;</operator> <literal type="number" pos:start="225:25" pos:end="225:25">1</literal><operator pos:start="225:26" pos:end="225:26">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="229:5" pos:end="297:5"><if pos:start="229:5" pos:end="281:5">if <condition pos:start="229:8" pos:end="229:32">(<expr pos:start="229:9" pos:end="229:31"><name pos:start="229:9" pos:end="229:12">type</name> <operator pos:start="229:14" pos:end="229:15">==</operator> <name pos:start="229:17" pos:end="229:31">RT_BYTE_ENCODED</name></expr>)</condition> <block pos:start="229:34" pos:end="281:5">{<block_content pos:start="231:9" pos:end="279:9">

        <decl_stmt pos:start="231:9" pos:end="231:23"><decl pos:start="231:9" pos:end="231:17"><type pos:start="231:9" pos:end="231:11"><name pos:start="231:9" pos:end="231:11">int</name></type> <name pos:start="231:13" pos:end="231:17">value</name></decl>, <decl pos:start="231:20" pos:end="231:22"><type ref="prev" pos:start="231:9" pos:end="231:11"/><name pos:start="231:20" pos:end="231:22">run</name></decl>;</decl_stmt>

        <decl_stmt pos:start="233:9" pos:end="233:40"><decl pos:start="233:9" pos:end="233:39"><type pos:start="233:9" pos:end="233:17"><name pos:start="233:9" pos:end="233:15">uint8_t</name> <modifier pos:start="233:17" pos:end="233:17">*</modifier></type><name pos:start="233:18" pos:end="233:20">end</name> <init pos:start="233:22" pos:end="233:39">= <expr pos:start="233:24" pos:end="233:39"><name pos:start="233:24" pos:end="233:26">ptr</name> <operator pos:start="233:28" pos:end="233:28">+</operator> <name pos:start="233:30" pos:end="233:30">h</name> <operator pos:start="233:32" pos:end="233:32">*</operator> <name pos:start="233:34" pos:end="233:39">stride</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="237:9" pos:end="237:14"><expr pos:start="237:9" pos:end="237:13"><name pos:start="237:9" pos:end="237:9">x</name> <operator pos:start="237:11" pos:end="237:11">=</operator> <literal type="number" pos:start="237:13" pos:end="237:13">0</literal></expr>;</expr_stmt>

        <while pos:start="239:9" pos:end="279:9">while <condition pos:start="239:15" pos:end="239:43">(<expr pos:start="239:16" pos:end="239:42"><name pos:start="239:16" pos:end="239:18">ptr</name> <operator pos:start="239:20" pos:end="239:21">!=</operator> <name pos:start="239:23" pos:end="239:25">end</name> <operator pos:start="239:27" pos:end="239:28">&amp;&amp;</operator> <name pos:start="239:30" pos:end="239:32">buf</name> <operator pos:start="239:34" pos:end="239:34">&lt;</operator> <name pos:start="239:36" pos:end="239:42">buf_end</name></expr>)</condition> <block pos:start="239:45" pos:end="279:9">{<block_content pos:start="241:13" pos:end="277:13">

            <expr_stmt pos:start="241:13" pos:end="241:20"><expr pos:start="241:13" pos:end="241:19"><name pos:start="241:13" pos:end="241:15">run</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <literal type="number" pos:start="241:19" pos:end="241:19">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="243:13" pos:end="245:43"><if pos:start="243:13" pos:end="245:43">if <condition pos:start="243:16" pos:end="243:34">(<expr pos:start="243:17" pos:end="243:33"><name pos:start="243:17" pos:end="243:23">buf_end</name> <operator pos:start="243:25" pos:end="243:25">-</operator> <name pos:start="243:27" pos:end="243:29">buf</name> <operator pos:start="243:31" pos:end="243:31">&lt;</operator> <literal type="number" pos:start="243:33" pos:end="243:33">1</literal></expr>)</condition><block type="pseudo" pos:start="245:17" pos:end="245:43"><block_content pos:start="245:17" pos:end="245:43">

                <return pos:start="245:17" pos:end="245:43">return <expr pos:start="245:24" pos:end="245:42"><name pos:start="245:24" pos:end="245:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="249:13" pos:end="257:13"><if pos:start="249:13" pos:end="257:13">if <condition pos:start="249:16" pos:end="249:48">(<expr pos:start="249:17" pos:end="249:47"><operator pos:start="249:17" pos:end="249:17">(</operator><name pos:start="249:18" pos:end="249:22">value</name> <operator pos:start="249:24" pos:end="249:24">=</operator> <operator pos:start="249:26" pos:end="249:26">*</operator><name pos:start="249:27" pos:end="249:29">buf</name><operator pos:start="249:30" pos:end="249:31">++</operator><operator pos:start="249:32" pos:end="249:32">)</operator> <operator pos:start="249:34" pos:end="249:35">==</operator> <name pos:start="249:37" pos:end="249:47">RLE_TRIGGER</name></expr>)</condition> <block pos:start="249:50" pos:end="257:13">{<block_content pos:start="251:17" pos:end="255:35">

                <expr_stmt pos:start="251:17" pos:end="251:33"><expr pos:start="251:17" pos:end="251:32"><name pos:start="251:17" pos:end="251:19">run</name> <operator pos:start="251:21" pos:end="251:21">=</operator> <operator pos:start="251:23" pos:end="251:23">*</operator><name pos:start="251:24" pos:end="251:26">buf</name><operator pos:start="251:27" pos:end="251:28">++</operator> <operator pos:start="251:30" pos:end="251:30">+</operator> <literal type="number" pos:start="251:32" pos:end="251:32">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="253:17" pos:end="255:35"><if pos:start="253:17" pos:end="255:35">if <condition pos:start="253:20" pos:end="253:29">(<expr pos:start="253:21" pos:end="253:28"><name pos:start="253:21" pos:end="253:23">run</name> <operator pos:start="253:25" pos:end="253:26">!=</operator> <literal type="number" pos:start="253:28" pos:end="253:28">1</literal></expr>)</condition><block type="pseudo" pos:start="255:21" pos:end="255:35"><block_content pos:start="255:21" pos:end="255:35">

                    <expr_stmt pos:start="255:21" pos:end="255:35"><expr pos:start="255:21" pos:end="255:34"><name pos:start="255:21" pos:end="255:25">value</name> <operator pos:start="255:27" pos:end="255:27">=</operator> <operator pos:start="255:29" pos:end="255:29">*</operator><name pos:start="255:30" pos:end="255:32">buf</name><operator pos:start="255:33" pos:end="255:34">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <while pos:start="259:13" pos:end="277:13">while <condition pos:start="259:19" pos:end="259:25">(<expr pos:start="259:20" pos:end="259:24"><name pos:start="259:20" pos:end="259:22">run</name><operator pos:start="259:23" pos:end="259:24">--</operator></expr>)</condition> <block pos:start="259:27" pos:end="277:13">{<block_content pos:start="261:17" pos:end="275:17">

                <if_stmt pos:start="261:17" pos:end="263:35"><if pos:start="261:17" pos:end="263:35">if <condition pos:start="261:20" pos:end="261:28">(<expr pos:start="261:21" pos:end="261:27"><name pos:start="261:21" pos:end="261:21">x</name> <operator pos:start="261:23" pos:end="261:23">&lt;</operator> <name pos:start="261:25" pos:end="261:27">len</name></expr>)</condition><block type="pseudo" pos:start="263:21" pos:end="263:35"><block_content pos:start="263:21" pos:end="263:35">

                    <expr_stmt pos:start="263:21" pos:end="263:35"><expr pos:start="263:21" pos:end="263:34"><name pos:start="263:21" pos:end="263:26"><name pos:start="263:21" pos:end="263:23">ptr</name><index pos:start="263:24" pos:end="263:26">[<expr pos:start="263:25" pos:end="263:25"><name pos:start="263:25" pos:end="263:25">x</name></expr>]</index></name> <operator pos:start="263:28" pos:end="263:28">=</operator> <name pos:start="263:30" pos:end="263:34">value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="265:17" pos:end="275:17"><if pos:start="265:17" pos:end="275:17">if <condition pos:start="265:20" pos:end="265:32">(<expr pos:start="265:21" pos:end="265:31"><operator pos:start="265:21" pos:end="265:22">++</operator><name pos:start="265:23" pos:end="265:23">x</name> <operator pos:start="265:25" pos:end="265:26">&gt;=</operator> <name pos:start="265:28" pos:end="265:31">alen</name></expr>)</condition> <block pos:start="265:34" pos:end="275:17">{<block_content pos:start="267:21" pos:end="273:30">

                    <expr_stmt pos:start="267:21" pos:end="267:26"><expr pos:start="267:21" pos:end="267:25"><name pos:start="267:21" pos:end="267:21">x</name> <operator pos:start="267:23" pos:end="267:23">=</operator> <literal type="number" pos:start="267:25" pos:end="267:25">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="269:21" pos:end="269:34"><expr pos:start="269:21" pos:end="269:33"><name pos:start="269:21" pos:end="269:23">ptr</name> <operator pos:start="269:25" pos:end="269:26">+=</operator> <name pos:start="269:28" pos:end="269:33">stride</name></expr>;</expr_stmt>

                    <if_stmt pos:start="271:21" pos:end="273:30"><if pos:start="271:21" pos:end="273:30">if <condition pos:start="271:24" pos:end="271:35">(<expr pos:start="271:25" pos:end="271:34"><name pos:start="271:25" pos:end="271:27">ptr</name> <operator pos:start="271:29" pos:end="271:30">==</operator> <name pos:start="271:32" pos:end="271:34">end</name></expr>)</condition><block type="pseudo" pos:start="273:25" pos:end="273:30"><block_content pos:start="273:25" pos:end="273:30">

                        <break pos:start="273:25" pos:end="273:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="281:7" pos:end="297:5">else <block pos:start="281:12" pos:end="297:5">{<block_content pos:start="283:9" pos:end="295:9">

        <for pos:start="283:9" pos:end="295:9">for <control pos:start="283:13" pos:end="283:31">(<init pos:start="283:14" pos:end="283:19"><expr pos:start="283:14" pos:end="283:18"><name pos:start="283:14" pos:end="283:14">y</name> <operator pos:start="283:16" pos:end="283:16">=</operator> <literal type="number" pos:start="283:18" pos:end="283:18">0</literal></expr>;</init> <condition pos:start="283:21" pos:end="283:26"><expr pos:start="283:21" pos:end="283:25"><name pos:start="283:21" pos:end="283:21">y</name> <operator pos:start="283:23" pos:end="283:23">&lt;</operator> <name pos:start="283:25" pos:end="283:25">h</name></expr>;</condition> <incr pos:start="283:28" pos:end="283:30"><expr pos:start="283:28" pos:end="283:30"><name pos:start="283:28" pos:end="283:28">y</name><operator pos:start="283:29" pos:end="283:30">++</operator></expr></incr>)</control> <block pos:start="283:33" pos:end="295:9">{<block_content pos:start="285:13" pos:end="293:24">

            <if_stmt pos:start="285:13" pos:end="287:22"><if pos:start="285:13" pos:end="287:22">if <condition pos:start="285:16" pos:end="285:36">(<expr pos:start="285:17" pos:end="285:35"><name pos:start="285:17" pos:end="285:23">buf_end</name> <operator pos:start="285:25" pos:end="285:25">-</operator> <name pos:start="285:27" pos:end="285:29">buf</name> <operator pos:start="285:31" pos:end="285:31">&lt;</operator> <name pos:start="285:33" pos:end="285:35">len</name></expr>)</condition><block type="pseudo" pos:start="287:17" pos:end="287:22"><block_content pos:start="287:17" pos:end="287:22">

                <break pos:start="287:17" pos:end="287:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:34"><expr pos:start="289:13" pos:end="289:33"><call pos:start="289:13" pos:end="289:33"><name pos:start="289:13" pos:end="289:18">memcpy</name><argument_list pos:start="289:19" pos:end="289:33">(<argument pos:start="289:20" pos:end="289:22"><expr pos:start="289:20" pos:end="289:22"><name pos:start="289:20" pos:end="289:22">ptr</name></expr></argument>, <argument pos:start="289:25" pos:end="289:27"><expr pos:start="289:25" pos:end="289:27"><name pos:start="289:25" pos:end="289:27">buf</name></expr></argument>, <argument pos:start="289:30" pos:end="289:32"><expr pos:start="289:30" pos:end="289:32"><name pos:start="289:30" pos:end="289:32">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:26"><expr pos:start="291:13" pos:end="291:25"><name pos:start="291:13" pos:end="291:15">ptr</name> <operator pos:start="291:17" pos:end="291:18">+=</operator> <name pos:start="291:20" pos:end="291:25">stride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:24"><expr pos:start="293:13" pos:end="293:23"><name pos:start="293:13" pos:end="293:15">buf</name> <operator pos:start="293:17" pos:end="293:18">+=</operator> <name pos:start="293:20" pos:end="293:23">alen</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="299:5" pos:end="345:5"><if pos:start="299:5" pos:end="345:5">if <condition pos:start="299:8" pos:end="299:55">(<expr pos:start="299:9" pos:end="299:54"><name pos:start="299:9" pos:end="299:22"><name pos:start="299:9" pos:end="299:13">avctx</name><operator pos:start="299:14" pos:end="299:15">-&gt;</operator><name pos:start="299:16" pos:end="299:22">pix_fmt</name></name> <operator pos:start="299:24" pos:end="299:25">==</operator> <name pos:start="299:27" pos:end="299:41">AV_PIX_FMT_PAL8</name> <operator pos:start="299:43" pos:end="299:44">&amp;&amp;</operator> <name pos:start="299:46" pos:end="299:50">depth</name> <operator pos:start="299:52" pos:end="299:52">&lt;</operator> <literal type="number" pos:start="299:54" pos:end="299:54">8</literal></expr>)</condition> <block pos:start="299:57" pos:end="345:5">{<block_content pos:start="301:9" pos:end="343:28">

        <decl_stmt pos:start="301:9" pos:end="301:33"><decl pos:start="301:9" pos:end="301:32"><type pos:start="301:9" pos:end="301:17"><name pos:start="301:9" pos:end="301:15">uint8_t</name> <modifier pos:start="301:17" pos:end="301:17">*</modifier></type><name pos:start="301:18" pos:end="301:25">ptr_free</name> <init pos:start="301:27" pos:end="301:32">= <expr pos:start="301:29" pos:end="301:32"><name pos:start="301:29" pos:end="301:32">ptr2</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:25"><expr pos:start="303:9" pos:end="303:24"><name pos:start="303:9" pos:end="303:11">ptr</name> <operator pos:start="303:13" pos:end="303:13">=</operator> <name pos:start="303:15" pos:end="303:24"><name pos:start="303:15" pos:end="303:15">p</name><operator pos:start="303:16" pos:end="303:17">-&gt;</operator><name pos:start="303:18" pos:end="303:21">data</name><index pos:start="303:22" pos:end="303:24">[<expr pos:start="303:23" pos:end="303:23"><literal type="number" pos:start="303:23" pos:end="303:23">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="305:9" pos:end="341:9">for <control pos:start="305:13" pos:end="305:27">(<init pos:start="305:14" pos:end="305:17"><expr pos:start="305:14" pos:end="305:16"><name pos:start="305:14" pos:end="305:14">y</name><operator pos:start="305:15" pos:end="305:15">=</operator><literal type="number" pos:start="305:16" pos:end="305:16">0</literal></expr>;</init> <condition pos:start="305:19" pos:end="305:22"><expr pos:start="305:19" pos:end="305:21"><name pos:start="305:19" pos:end="305:19">y</name><operator pos:start="305:20" pos:end="305:20">&lt;</operator><name pos:start="305:21" pos:end="305:21">h</name></expr>;</condition> <incr pos:start="305:24" pos:end="305:26"><expr pos:start="305:24" pos:end="305:26"><name pos:start="305:24" pos:end="305:24">y</name><operator pos:start="305:25" pos:end="305:26">++</operator></expr></incr>)</control> <block pos:start="305:29" pos:end="341:9">{<block_content pos:start="307:13" pos:end="339:42">

            <for pos:start="307:13" pos:end="335:13">for <control pos:start="307:17" pos:end="307:54">(<init pos:start="307:18" pos:end="307:23"><expr pos:start="307:18" pos:end="307:22"><name pos:start="307:18" pos:end="307:18">x</name> <operator pos:start="307:20" pos:end="307:20">=</operator> <literal type="number" pos:start="307:22" pos:end="307:22">0</literal></expr>;</init> <condition pos:start="307:25" pos:end="307:49"><expr pos:start="307:25" pos:end="307:48"><name pos:start="307:25" pos:end="307:25">x</name> <operator pos:start="307:27" pos:end="307:27">&lt;</operator> <operator pos:start="307:29" pos:end="307:29">(</operator><name pos:start="307:30" pos:end="307:30">w</name> <operator pos:start="307:32" pos:end="307:32">+</operator> <literal type="number" pos:start="307:34" pos:end="307:34">7</literal> <operator pos:start="307:36" pos:end="307:37">&gt;&gt;</operator> <literal type="number" pos:start="307:39" pos:end="307:39">3</literal><operator pos:start="307:40" pos:end="307:40">)</operator> <operator pos:start="307:42" pos:end="307:42">*</operator> <name pos:start="307:44" pos:end="307:48">depth</name></expr>;</condition> <incr pos:start="307:51" pos:end="307:53"><expr pos:start="307:51" pos:end="307:53"><name pos:start="307:51" pos:end="307:51">x</name><operator pos:start="307:52" pos:end="307:53">++</operator></expr></incr>)</control> <block pos:start="307:56" pos:end="335:13">{<block_content pos:start="309:17" pos:end="333:17">

                <if_stmt pos:start="309:17" pos:end="333:17"><if pos:start="309:17" pos:end="327:17">if <condition pos:start="309:20" pos:end="309:31">(<expr pos:start="309:21" pos:end="309:30"><name pos:start="309:21" pos:end="309:25">depth</name> <operator pos:start="309:27" pos:end="309:28">==</operator> <literal type="number" pos:start="309:30" pos:end="309:30">1</literal></expr>)</condition> <block pos:start="309:33" pos:end="327:17">{<block_content pos:start="311:21" pos:end="325:50">

                    <expr_stmt pos:start="311:21" pos:end="311:46"><expr pos:start="311:21" pos:end="311:45"><name pos:start="311:21" pos:end="311:28"><name pos:start="311:21" pos:end="311:23">ptr</name><index pos:start="311:24" pos:end="311:28">[<expr pos:start="311:25" pos:end="311:27"><literal type="number" pos:start="311:25" pos:end="311:25">8</literal><operator pos:start="311:26" pos:end="311:26">*</operator><name pos:start="311:27" pos:end="311:27">x</name></expr>]</index></name>   <operator pos:start="311:32" pos:end="311:32">=</operator> <name pos:start="311:34" pos:end="311:40"><name pos:start="311:34" pos:end="311:37">ptr2</name><index pos:start="311:38" pos:end="311:40">[<expr pos:start="311:39" pos:end="311:39"><name pos:start="311:39" pos:end="311:39">x</name></expr>]</index></name> <operator pos:start="311:42" pos:end="311:43">&gt;&gt;</operator> <literal type="number" pos:start="311:45" pos:end="311:45">7</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="313:21" pos:end="313:50"><expr pos:start="313:21" pos:end="313:49"><name pos:start="313:21" pos:end="313:30"><name pos:start="313:21" pos:end="313:23">ptr</name><index pos:start="313:24" pos:end="313:30">[<expr pos:start="313:25" pos:end="313:29"><literal type="number" pos:start="313:25" pos:end="313:25">8</literal><operator pos:start="313:26" pos:end="313:26">*</operator><name pos:start="313:27" pos:end="313:27">x</name><operator pos:start="313:28" pos:end="313:28">+</operator><literal type="number" pos:start="313:29" pos:end="313:29">1</literal></expr>]</index></name> <operator pos:start="313:32" pos:end="313:32">=</operator> <name pos:start="313:34" pos:end="313:40"><name pos:start="313:34" pos:end="313:37">ptr2</name><index pos:start="313:38" pos:end="313:40">[<expr pos:start="313:39" pos:end="313:39"><name pos:start="313:39" pos:end="313:39">x</name></expr>]</index></name> <operator pos:start="313:42" pos:end="313:43">&gt;&gt;</operator> <literal type="number" pos:start="313:45" pos:end="313:45">6</literal> <operator pos:start="313:47" pos:end="313:47">&amp;</operator> <literal type="number" pos:start="313:49" pos:end="313:49">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="315:21" pos:end="315:50"><expr pos:start="315:21" pos:end="315:49"><name pos:start="315:21" pos:end="315:30"><name pos:start="315:21" pos:end="315:23">ptr</name><index pos:start="315:24" pos:end="315:30">[<expr pos:start="315:25" pos:end="315:29"><literal type="number" pos:start="315:25" pos:end="315:25">8</literal><operator pos:start="315:26" pos:end="315:26">*</operator><name pos:start="315:27" pos:end="315:27">x</name><operator pos:start="315:28" pos:end="315:28">+</operator><literal type="number" pos:start="315:29" pos:end="315:29">2</literal></expr>]</index></name> <operator pos:start="315:32" pos:end="315:32">=</operator> <name pos:start="315:34" pos:end="315:40"><name pos:start="315:34" pos:end="315:37">ptr2</name><index pos:start="315:38" pos:end="315:40">[<expr pos:start="315:39" pos:end="315:39"><name pos:start="315:39" pos:end="315:39">x</name></expr>]</index></name> <operator pos:start="315:42" pos:end="315:43">&gt;&gt;</operator> <literal type="number" pos:start="315:45" pos:end="315:45">5</literal> <operator pos:start="315:47" pos:end="315:47">&amp;</operator> <literal type="number" pos:start="315:49" pos:end="315:49">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="317:21" pos:end="317:50"><expr pos:start="317:21" pos:end="317:49"><name pos:start="317:21" pos:end="317:30"><name pos:start="317:21" pos:end="317:23">ptr</name><index pos:start="317:24" pos:end="317:30">[<expr pos:start="317:25" pos:end="317:29"><literal type="number" pos:start="317:25" pos:end="317:25">8</literal><operator pos:start="317:26" pos:end="317:26">*</operator><name pos:start="317:27" pos:end="317:27">x</name><operator pos:start="317:28" pos:end="317:28">+</operator><literal type="number" pos:start="317:29" pos:end="317:29">3</literal></expr>]</index></name> <operator pos:start="317:32" pos:end="317:32">=</operator> <name pos:start="317:34" pos:end="317:40"><name pos:start="317:34" pos:end="317:37">ptr2</name><index pos:start="317:38" pos:end="317:40">[<expr pos:start="317:39" pos:end="317:39"><name pos:start="317:39" pos:end="317:39">x</name></expr>]</index></name> <operator pos:start="317:42" pos:end="317:43">&gt;&gt;</operator> <literal type="number" pos:start="317:45" pos:end="317:45">4</literal> <operator pos:start="317:47" pos:end="317:47">&amp;</operator> <literal type="number" pos:start="317:49" pos:end="317:49">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="319:21" pos:end="319:50"><expr pos:start="319:21" pos:end="319:49"><name pos:start="319:21" pos:end="319:30"><name pos:start="319:21" pos:end="319:23">ptr</name><index pos:start="319:24" pos:end="319:30">[<expr pos:start="319:25" pos:end="319:29"><literal type="number" pos:start="319:25" pos:end="319:25">8</literal><operator pos:start="319:26" pos:end="319:26">*</operator><name pos:start="319:27" pos:end="319:27">x</name><operator pos:start="319:28" pos:end="319:28">+</operator><literal type="number" pos:start="319:29" pos:end="319:29">4</literal></expr>]</index></name> <operator pos:start="319:32" pos:end="319:32">=</operator> <name pos:start="319:34" pos:end="319:40"><name pos:start="319:34" pos:end="319:37">ptr2</name><index pos:start="319:38" pos:end="319:40">[<expr pos:start="319:39" pos:end="319:39"><name pos:start="319:39" pos:end="319:39">x</name></expr>]</index></name> <operator pos:start="319:42" pos:end="319:43">&gt;&gt;</operator> <literal type="number" pos:start="319:45" pos:end="319:45">3</literal> <operator pos:start="319:47" pos:end="319:47">&amp;</operator> <literal type="number" pos:start="319:49" pos:end="319:49">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="321:21" pos:end="321:50"><expr pos:start="321:21" pos:end="321:49"><name pos:start="321:21" pos:end="321:30"><name pos:start="321:21" pos:end="321:23">ptr</name><index pos:start="321:24" pos:end="321:30">[<expr pos:start="321:25" pos:end="321:29"><literal type="number" pos:start="321:25" pos:end="321:25">8</literal><operator pos:start="321:26" pos:end="321:26">*</operator><name pos:start="321:27" pos:end="321:27">x</name><operator pos:start="321:28" pos:end="321:28">+</operator><literal type="number" pos:start="321:29" pos:end="321:29">5</literal></expr>]</index></name> <operator pos:start="321:32" pos:end="321:32">=</operator> <name pos:start="321:34" pos:end="321:40"><name pos:start="321:34" pos:end="321:37">ptr2</name><index pos:start="321:38" pos:end="321:40">[<expr pos:start="321:39" pos:end="321:39"><name pos:start="321:39" pos:end="321:39">x</name></expr>]</index></name> <operator pos:start="321:42" pos:end="321:43">&gt;&gt;</operator> <literal type="number" pos:start="321:45" pos:end="321:45">2</literal> <operator pos:start="321:47" pos:end="321:47">&amp;</operator> <literal type="number" pos:start="321:49" pos:end="321:49">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="323:21" pos:end="323:50"><expr pos:start="323:21" pos:end="323:49"><name pos:start="323:21" pos:end="323:30"><name pos:start="323:21" pos:end="323:23">ptr</name><index pos:start="323:24" pos:end="323:30">[<expr pos:start="323:25" pos:end="323:29"><literal type="number" pos:start="323:25" pos:end="323:25">8</literal><operator pos:start="323:26" pos:end="323:26">*</operator><name pos:start="323:27" pos:end="323:27">x</name><operator pos:start="323:28" pos:end="323:28">+</operator><literal type="number" pos:start="323:29" pos:end="323:29">6</literal></expr>]</index></name> <operator pos:start="323:32" pos:end="323:32">=</operator> <name pos:start="323:34" pos:end="323:40"><name pos:start="323:34" pos:end="323:37">ptr2</name><index pos:start="323:38" pos:end="323:40">[<expr pos:start="323:39" pos:end="323:39"><name pos:start="323:39" pos:end="323:39">x</name></expr>]</index></name> <operator pos:start="323:42" pos:end="323:43">&gt;&gt;</operator> <literal type="number" pos:start="323:45" pos:end="323:45">1</literal> <operator pos:start="323:47" pos:end="323:47">&amp;</operator> <literal type="number" pos:start="323:49" pos:end="323:49">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="325:21" pos:end="325:50"><expr pos:start="325:21" pos:end="325:49"><name pos:start="325:21" pos:end="325:30"><name pos:start="325:21" pos:end="325:23">ptr</name><index pos:start="325:24" pos:end="325:30">[<expr pos:start="325:25" pos:end="325:29"><literal type="number" pos:start="325:25" pos:end="325:25">8</literal><operator pos:start="325:26" pos:end="325:26">*</operator><name pos:start="325:27" pos:end="325:27">x</name><operator pos:start="325:28" pos:end="325:28">+</operator><literal type="number" pos:start="325:29" pos:end="325:29">7</literal></expr>]</index></name> <operator pos:start="325:32" pos:end="325:32">=</operator> <name pos:start="325:34" pos:end="325:40"><name pos:start="325:34" pos:end="325:37">ptr2</name><index pos:start="325:38" pos:end="325:40">[<expr pos:start="325:39" pos:end="325:39"><name pos:start="325:39" pos:end="325:39">x</name></expr>]</index></name>      <operator pos:start="325:47" pos:end="325:47">&amp;</operator> <literal type="number" pos:start="325:49" pos:end="325:49">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="327:19" pos:end="333:17">else <block pos:start="327:24" pos:end="333:17">{<block_content pos:start="329:21" pos:end="331:47">

                    <expr_stmt pos:start="329:21" pos:end="329:46"><expr pos:start="329:21" pos:end="329:45"><name pos:start="329:21" pos:end="329:28"><name pos:start="329:21" pos:end="329:23">ptr</name><index pos:start="329:24" pos:end="329:28">[<expr pos:start="329:25" pos:end="329:27"><literal type="number" pos:start="329:25" pos:end="329:25">2</literal><operator pos:start="329:26" pos:end="329:26">*</operator><name pos:start="329:27" pos:end="329:27">x</name></expr>]</index></name>   <operator pos:start="329:32" pos:end="329:32">=</operator> <name pos:start="329:34" pos:end="329:40"><name pos:start="329:34" pos:end="329:37">ptr2</name><index pos:start="329:38" pos:end="329:40">[<expr pos:start="329:39" pos:end="329:39"><name pos:start="329:39" pos:end="329:39">x</name></expr>]</index></name> <operator pos:start="329:42" pos:end="329:43">&gt;&gt;</operator> <literal type="number" pos:start="329:45" pos:end="329:45">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="331:21" pos:end="331:47"><expr pos:start="331:21" pos:end="331:46"><name pos:start="331:21" pos:end="331:30"><name pos:start="331:21" pos:end="331:23">ptr</name><index pos:start="331:24" pos:end="331:30">[<expr pos:start="331:25" pos:end="331:29"><literal type="number" pos:start="331:25" pos:end="331:25">2</literal><operator pos:start="331:26" pos:end="331:26">*</operator><name pos:start="331:27" pos:end="331:27">x</name><operator pos:start="331:28" pos:end="331:28">+</operator><literal type="number" pos:start="331:29" pos:end="331:29">1</literal></expr>]</index></name> <operator pos:start="331:32" pos:end="331:32">=</operator> <name pos:start="331:34" pos:end="331:40"><name pos:start="331:34" pos:end="331:37">ptr2</name><index pos:start="331:38" pos:end="331:40">[<expr pos:start="331:39" pos:end="331:39"><name pos:start="331:39" pos:end="331:39">x</name></expr>]</index></name> <operator pos:start="331:42" pos:end="331:42">&amp;</operator> <literal type="number" pos:start="331:44" pos:end="331:46">0xF</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="337:13" pos:end="337:35"><expr pos:start="337:13" pos:end="337:34"><name pos:start="337:13" pos:end="337:15">ptr</name>  <operator pos:start="337:18" pos:end="337:19">+=</operator> <name pos:start="337:21" pos:end="337:34"><name pos:start="337:21" pos:end="337:21">p</name><operator pos:start="337:22" pos:end="337:23">-&gt;</operator><name pos:start="337:24" pos:end="337:31">linesize</name><index pos:start="337:32" pos:end="337:34">[<expr pos:start="337:33" pos:end="337:33"><literal type="number" pos:start="337:33" pos:end="337:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:42"><expr pos:start="339:13" pos:end="339:41"><name pos:start="339:13" pos:end="339:16">ptr2</name> <operator pos:start="339:18" pos:end="339:19">+=</operator> <operator pos:start="339:21" pos:end="339:21">(</operator><name pos:start="339:22" pos:end="339:22">w</name> <operator pos:start="339:24" pos:end="339:24">+</operator> <literal type="number" pos:start="339:26" pos:end="339:27">15</literal> <operator pos:start="339:29" pos:end="339:30">&gt;&gt;</operator> <literal type="number" pos:start="339:32" pos:end="339:32">3</literal><operator pos:start="339:33" pos:end="339:33">)</operator> <operator pos:start="339:35" pos:end="339:35">*</operator> <name pos:start="339:37" pos:end="339:41">depth</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="343:9" pos:end="343:28"><expr pos:start="343:9" pos:end="343:27"><call pos:start="343:9" pos:end="343:27"><name pos:start="343:9" pos:end="343:16">av_freep</name><argument_list pos:start="343:17" pos:end="343:27">(<argument pos:start="343:18" pos:end="343:26"><expr pos:start="343:18" pos:end="343:26"><operator pos:start="343:18" pos:end="343:18">&amp;</operator><name pos:start="343:19" pos:end="343:26">ptr_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="349:5" pos:end="349:19"><expr pos:start="349:5" pos:end="349:18"><operator pos:start="349:5" pos:end="349:5">*</operator><name pos:start="349:6" pos:end="349:14">got_frame</name> <operator pos:start="349:16" pos:end="349:16">=</operator> <literal type="number" pos:start="349:18" pos:end="349:18">1</literal></expr>;</expr_stmt>



    <return pos:start="353:5" pos:end="353:26">return <expr pos:start="353:12" pos:end="353:25"><name pos:start="353:12" pos:end="353:14">buf</name> <operator pos:start="353:16" pos:end="353:16">-</operator> <name pos:start="353:18" pos:end="353:25">bufstart</name></expr>;</return>

</block_content>}</block></function>
</unit>
