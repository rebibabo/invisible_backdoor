<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1263.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">test_qemu_strtosz_simple</name><parameter_list pos:start="1:37" pos:end="1:42">(<parameter pos:start="1:38" pos:end="1:41"><decl pos:start="1:38" pos:end="1:41"><type pos:start="1:38" pos:end="1:41"><name pos:start="1:38" pos:end="1:41">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="89:33">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:16">endptr</name> <init pos:start="7:18" pos:end="7:23">= <expr pos:start="7:20" pos:end="7:23"><name pos:start="7:20" pos:end="7:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:14"><expr pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:7">str</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <literal type="string" pos:start="13:11" pos:end="13:13">"0"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:7">res</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:36"><name pos:start="15:11" pos:end="15:22">qemu_strtosz</name><argument_list pos:start="15:23" pos:end="15:36">(<argument pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:26">str</name></expr></argument>, <argument pos:start="15:29" pos:end="15:35"><expr pos:start="15:29" pos:end="15:35"><operator pos:start="15:29" pos:end="15:29">&amp;</operator><name pos:start="15:30" pos:end="15:35">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><call pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:19">g_assert_cmpint</name><argument_list pos:start="17:20" pos:end="17:31">(<argument pos:start="17:21" pos:end="17:23"><expr pos:start="17:21" pos:end="17:23"><name pos:start="17:21" pos:end="17:23">res</name></expr></argument>, <argument pos:start="17:26" pos:end="17:27"><expr pos:start="17:26" pos:end="17:27"><operator pos:start="17:26" pos:end="17:27">==</operator></expr></argument>, <argument pos:start="17:30" pos:end="17:30"><expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><call pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:12">g_assert</name><argument_list pos:start="19:13" pos:end="19:31">(<argument pos:start="19:14" pos:end="19:30"><expr pos:start="19:14" pos:end="19:30"><name pos:start="19:14" pos:end="19:19">endptr</name> <operator pos:start="19:21" pos:end="19:22">==</operator> <name pos:start="19:24" pos:end="19:26">str</name> <operator pos:start="19:28" pos:end="19:28">+</operator> <literal type="number" pos:start="19:30" pos:end="19:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:7">str</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <literal type="string" pos:start="23:11" pos:end="23:17">"12345"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:7">res</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:36"><name pos:start="25:11" pos:end="25:22">qemu_strtosz</name><argument_list pos:start="25:23" pos:end="25:36">(<argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">str</name></expr></argument>, <argument pos:start="25:29" pos:end="25:35"><expr pos:start="25:29" pos:end="25:35"><operator pos:start="25:29" pos:end="25:29">&amp;</operator><name pos:start="25:30" pos:end="25:35">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:36"><expr pos:start="27:5" pos:end="27:35"><call pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:19">g_assert_cmpint</name><argument_list pos:start="27:20" pos:end="27:35">(<argument pos:start="27:21" pos:end="27:23"><expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">res</name></expr></argument>, <argument pos:start="27:26" pos:end="27:27"><expr pos:start="27:26" pos:end="27:27"><operator pos:start="27:26" pos:end="27:27">==</operator></expr></argument>, <argument pos:start="27:30" pos:end="27:34"><expr pos:start="27:30" pos:end="27:34"><literal type="number" pos:start="27:30" pos:end="27:34">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><call pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:31">(<argument pos:start="29:14" pos:end="29:30"><expr pos:start="29:14" pos:end="29:30"><name pos:start="29:14" pos:end="29:19">endptr</name> <operator pos:start="29:21" pos:end="29:22">==</operator> <name pos:start="29:24" pos:end="29:26">str</name> <operator pos:start="29:28" pos:end="29:28">+</operator> <literal type="number" pos:start="29:30" pos:end="29:30">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:7">res</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:33"><name pos:start="33:11" pos:end="33:22">qemu_strtosz</name><argument_list pos:start="33:23" pos:end="33:33">(<argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">str</name></expr></argument>, <argument pos:start="33:29" pos:end="33:32"><expr pos:start="33:29" pos:end="33:32"><name pos:start="33:29" pos:end="33:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><call pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:19">g_assert_cmpint</name><argument_list pos:start="35:20" pos:end="35:35">(<argument pos:start="35:21" pos:end="35:23"><expr pos:start="35:21" pos:end="35:23"><name pos:start="35:21" pos:end="35:23">res</name></expr></argument>, <argument pos:start="35:26" pos:end="35:27"><expr pos:start="35:26" pos:end="35:27"><operator pos:start="35:26" pos:end="35:27">==</operator></expr></argument>, <argument pos:start="35:30" pos:end="35:34"><expr pos:start="35:30" pos:end="35:34"><literal type="number" pos:start="35:30" pos:end="35:34">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:70">/* Note: precision is 53 bits since we're parsing with strtod() */</comment>



    <expr_stmt pos:start="43:5" pos:end="43:29"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:7">str</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <literal type="string" pos:start="43:11" pos:end="43:28">"9007199254740991"</literal></expr>;</expr_stmt> <comment type="block" pos:start="43:31" pos:end="43:42">/* 2^53-1 */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:7">res</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:36"><name pos:start="45:11" pos:end="45:22">qemu_strtosz</name><argument_list pos:start="45:23" pos:end="45:36">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">str</name></expr></argument>, <argument pos:start="45:29" pos:end="45:35"><expr pos:start="45:29" pos:end="45:35"><operator pos:start="45:29" pos:end="45:29">&amp;</operator><name pos:start="45:30" pos:end="45:35">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><call pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:19">g_assert_cmpint</name><argument_list pos:start="47:20" pos:end="47:46">(<argument pos:start="47:21" pos:end="47:23"><expr pos:start="47:21" pos:end="47:23"><name pos:start="47:21" pos:end="47:23">res</name></expr></argument>, <argument pos:start="47:26" pos:end="47:27"><expr pos:start="47:26" pos:end="47:27"><operator pos:start="47:26" pos:end="47:27">==</operator></expr></argument>, <argument pos:start="47:30" pos:end="47:45"><expr pos:start="47:30" pos:end="47:45"><literal type="number" pos:start="47:30" pos:end="47:45">0x1fffffffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:33"><expr pos:start="49:5" pos:end="49:32"><call pos:start="49:5" pos:end="49:32"><name pos:start="49:5" pos:end="49:12">g_assert</name><argument_list pos:start="49:13" pos:end="49:32">(<argument pos:start="49:14" pos:end="49:31"><expr pos:start="49:14" pos:end="49:31"><name pos:start="49:14" pos:end="49:19">endptr</name> <operator pos:start="49:21" pos:end="49:22">==</operator> <name pos:start="49:24" pos:end="49:26">str</name> <operator pos:start="49:28" pos:end="49:28">+</operator> <literal type="number" pos:start="49:30" pos:end="49:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:29"><expr pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:7">str</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <literal type="string" pos:start="53:11" pos:end="53:28">"9007199254740992"</literal></expr>;</expr_stmt> <comment type="block" pos:start="53:31" pos:end="53:40">/* 2^53 */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:37"><expr pos:start="55:5" pos:end="55:36"><name pos:start="55:5" pos:end="55:7">res</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:36"><name pos:start="55:11" pos:end="55:22">qemu_strtosz</name><argument_list pos:start="55:23" pos:end="55:36">(<argument pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><name pos:start="55:24" pos:end="55:26">str</name></expr></argument>, <argument pos:start="55:29" pos:end="55:35"><expr pos:start="55:29" pos:end="55:35"><operator pos:start="55:29" pos:end="55:29">&amp;</operator><name pos:start="55:30" pos:end="55:35">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:47"><expr pos:start="57:5" pos:end="57:46"><call pos:start="57:5" pos:end="57:46"><name pos:start="57:5" pos:end="57:19">g_assert_cmpint</name><argument_list pos:start="57:20" pos:end="57:46">(<argument pos:start="57:21" pos:end="57:23"><expr pos:start="57:21" pos:end="57:23"><name pos:start="57:21" pos:end="57:23">res</name></expr></argument>, <argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><operator pos:start="57:26" pos:end="57:27">==</operator></expr></argument>, <argument pos:start="57:30" pos:end="57:45"><expr pos:start="57:30" pos:end="57:45"><literal type="number" pos:start="57:30" pos:end="57:45">0x20000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><call pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:12">g_assert</name><argument_list pos:start="59:13" pos:end="59:32">(<argument pos:start="59:14" pos:end="59:31"><expr pos:start="59:14" pos:end="59:31"><name pos:start="59:14" pos:end="59:19">endptr</name> <operator pos:start="59:21" pos:end="59:22">==</operator> <name pos:start="59:24" pos:end="59:26">str</name> <operator pos:start="59:28" pos:end="59:28">+</operator> <literal type="number" pos:start="59:30" pos:end="59:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:29"><expr pos:start="63:5" pos:end="63:28"><name pos:start="63:5" pos:end="63:7">str</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <literal type="string" pos:start="63:11" pos:end="63:28">"9007199254740993"</literal></expr>;</expr_stmt> <comment type="block" pos:start="63:31" pos:end="63:42">/* 2^53+1 */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:37"><expr pos:start="65:5" pos:end="65:36"><name pos:start="65:5" pos:end="65:7">res</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:36"><name pos:start="65:11" pos:end="65:22">qemu_strtosz</name><argument_list pos:start="65:23" pos:end="65:36">(<argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">str</name></expr></argument>, <argument pos:start="65:29" pos:end="65:35"><expr pos:start="65:29" pos:end="65:35"><operator pos:start="65:29" pos:end="65:29">&amp;</operator><name pos:start="65:30" pos:end="65:35">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><call pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:19">g_assert_cmpint</name><argument_list pos:start="67:20" pos:end="67:46">(<argument pos:start="67:21" pos:end="67:23"><expr pos:start="67:21" pos:end="67:23"><name pos:start="67:21" pos:end="67:23">res</name></expr></argument>, <argument pos:start="67:26" pos:end="67:27"><expr pos:start="67:26" pos:end="67:27"><operator pos:start="67:26" pos:end="67:27">==</operator></expr></argument>, <argument pos:start="67:30" pos:end="67:45"><expr pos:start="67:30" pos:end="67:45"><literal type="number" pos:start="67:30" pos:end="67:45">0x20000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="67:49" pos:end="67:72">/* rounded to 53 bits */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:33"><expr pos:start="69:5" pos:end="69:32"><call pos:start="69:5" pos:end="69:32"><name pos:start="69:5" pos:end="69:12">g_assert</name><argument_list pos:start="69:13" pos:end="69:32">(<argument pos:start="69:14" pos:end="69:31"><expr pos:start="69:14" pos:end="69:31"><name pos:start="69:14" pos:end="69:19">endptr</name> <operator pos:start="69:21" pos:end="69:22">==</operator> <name pos:start="69:24" pos:end="69:26">str</name> <operator pos:start="69:28" pos:end="69:28">+</operator> <literal type="number" pos:start="69:30" pos:end="69:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:32"><expr pos:start="73:5" pos:end="73:31"><name pos:start="73:5" pos:end="73:7">str</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <literal type="string" pos:start="73:11" pos:end="73:31">"9223372036854774784"</literal></expr>;</expr_stmt> <comment type="block" pos:start="73:34" pos:end="73:71">/* 0x7ffffffffffffc00 (53 msbs set) */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:37"><expr pos:start="75:5" pos:end="75:36"><name pos:start="75:5" pos:end="75:7">res</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:36"><name pos:start="75:11" pos:end="75:22">qemu_strtosz</name><argument_list pos:start="75:23" pos:end="75:36">(<argument pos:start="75:24" pos:end="75:26"><expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">str</name></expr></argument>, <argument pos:start="75:29" pos:end="75:35"><expr pos:start="75:29" pos:end="75:35"><operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:35">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:49"><expr pos:start="77:5" pos:end="77:48"><call pos:start="77:5" pos:end="77:48"><name pos:start="77:5" pos:end="77:19">g_assert_cmpint</name><argument_list pos:start="77:20" pos:end="77:48">(<argument pos:start="77:21" pos:end="77:23"><expr pos:start="77:21" pos:end="77:23"><name pos:start="77:21" pos:end="77:23">res</name></expr></argument>, <argument pos:start="77:26" pos:end="77:27"><expr pos:start="77:26" pos:end="77:27"><operator pos:start="77:26" pos:end="77:27">==</operator></expr></argument>, <argument pos:start="77:30" pos:end="77:47"><expr pos:start="77:30" pos:end="77:47"><literal type="number" pos:start="77:30" pos:end="77:47">0x7ffffffffffffc00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:33"><expr pos:start="79:5" pos:end="79:32"><call pos:start="79:5" pos:end="79:32"><name pos:start="79:5" pos:end="79:12">g_assert</name><argument_list pos:start="79:13" pos:end="79:32">(<argument pos:start="79:14" pos:end="79:31"><expr pos:start="79:14" pos:end="79:31"><name pos:start="79:14" pos:end="79:19">endptr</name> <operator pos:start="79:21" pos:end="79:22">==</operator> <name pos:start="79:24" pos:end="79:26">str</name> <operator pos:start="79:28" pos:end="79:28">+</operator> <literal type="number" pos:start="79:30" pos:end="79:31">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:32"><expr pos:start="83:5" pos:end="83:31"><name pos:start="83:5" pos:end="83:7">str</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <literal type="string" pos:start="83:11" pos:end="83:31">"9223372036854775295"</literal></expr>;</expr_stmt> <comment type="block" pos:start="83:34" pos:end="83:57">/* 0x7ffffffffffffdff */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:37"><expr pos:start="85:5" pos:end="85:36"><name pos:start="85:5" pos:end="85:7">res</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:36"><name pos:start="85:11" pos:end="85:22">qemu_strtosz</name><argument_list pos:start="85:23" pos:end="85:36">(<argument pos:start="85:24" pos:end="85:26"><expr pos:start="85:24" pos:end="85:26"><name pos:start="85:24" pos:end="85:26">str</name></expr></argument>, <argument pos:start="85:29" pos:end="85:35"><expr pos:start="85:29" pos:end="85:35"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:35">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:49"><expr pos:start="87:5" pos:end="87:48"><call pos:start="87:5" pos:end="87:48"><name pos:start="87:5" pos:end="87:19">g_assert_cmpint</name><argument_list pos:start="87:20" pos:end="87:48">(<argument pos:start="87:21" pos:end="87:23"><expr pos:start="87:21" pos:end="87:23"><name pos:start="87:21" pos:end="87:23">res</name></expr></argument>, <argument pos:start="87:26" pos:end="87:27"><expr pos:start="87:26" pos:end="87:27"><operator pos:start="87:26" pos:end="87:27">==</operator></expr></argument>, <argument pos:start="87:30" pos:end="87:47"><expr pos:start="87:30" pos:end="87:47"><literal type="number" pos:start="87:30" pos:end="87:47">0x7ffffffffffffc00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:51" pos:end="87:74">/* rounded to 53 bits */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:33"><expr pos:start="89:5" pos:end="89:32"><call pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:12">g_assert</name><argument_list pos:start="89:13" pos:end="89:32">(<argument pos:start="89:14" pos:end="89:31"><expr pos:start="89:14" pos:end="89:31"><name pos:start="89:14" pos:end="89:19">endptr</name> <operator pos:start="89:21" pos:end="89:22">==</operator> <name pos:start="89:24" pos:end="89:26">str</name> <operator pos:start="89:28" pos:end="89:28">+</operator> <literal type="number" pos:start="89:30" pos:end="89:31">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="95:74">/* 0x7ffffffffffffe00..0x7fffffffffffffff get rounded to

     * 0x8000000000000000, thus -ERANGE; see test_qemu_strtosz_erange() */</comment>

</block_content>}</block></function>
</unit>
