<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12368.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">check_refcounts_l1</name><parameter_list pos:start="1:30" pos:end="11:47">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:50"><decl pos:start="3:31" pos:end="3:50"><type pos:start="3:31" pos:end="3:50"><name pos:start="3:31" pos:end="3:45">BdrvCheckResult</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:50">res</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:54"><decl pos:start="5:31" pos:end="5:54"><type pos:start="5:31" pos:end="5:54"><name pos:start="5:31" pos:end="5:38">uint16_t</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:54">refcount_table</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:53"><decl pos:start="7:31" pos:end="7:53"><type pos:start="7:31" pos:end="7:53"><name pos:start="7:31" pos:end="7:33">int</name></type> <name pos:start="7:35" pos:end="7:53">refcount_table_size</name></decl></parameter>,

                              <parameter pos:start="9:31" pos:end="9:53"><decl pos:start="9:31" pos:end="9:53"><type pos:start="9:31" pos:end="9:53"><name pos:start="9:31" pos:end="9:37">int64_t</name></type> <name pos:start="9:39" pos:end="9:53">l1_table_offset</name></decl></parameter>, <parameter pos:start="9:56" pos:end="9:66"><decl pos:start="9:56" pos:end="9:66"><type pos:start="9:56" pos:end="9:66"><name pos:start="9:56" pos:end="9:58">int</name></type> <name pos:start="9:60" pos:end="9:66">l1_size</name></decl></parameter>,

                              <parameter pos:start="11:31" pos:end="11:46"><decl pos:start="11:31" pos:end="11:46"><type pos:start="11:31" pos:end="11:46"><name pos:start="11:31" pos:end="11:33">int</name></type> <name pos:start="11:35" pos:end="11:46">check_copied</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="155:1">{<block_content pos:start="15:5" pos:end="153:16">

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">BDRVQcowState</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:20">s</name> <init pos:start="15:22" pos:end="15:33">= <expr pos:start="15:24" pos:end="15:33"><name pos:start="15:24" pos:end="15:33"><name pos:start="15:24" pos:end="15:25">bs</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">uint64_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:22">l1_table</name></decl>, <decl pos:start="17:25" pos:end="17:33"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:25" pos:end="17:33">l2_offset</name></decl>, <decl pos:start="17:36" pos:end="17:43"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:36" pos:end="17:43">l1_size2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:19"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:19">refcount</name></decl>, <decl pos:start="19:22" pos:end="19:24"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:22" pos:end="19:24">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:12">l1_size2</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:22">l1_size</name> <operator pos:start="23:24" pos:end="23:24">*</operator> <sizeof pos:start="23:26" pos:end="23:41">sizeof<argument_list pos:start="23:32" pos:end="23:41">(<argument pos:start="23:33" pos:end="23:40"><expr pos:start="23:33" pos:end="23:40"><name pos:start="23:33" pos:end="23:40">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:31">/* Mark L1 table as used */</comment>

    <expr_stmt pos:start="29:5" pos:end="31:35"><expr pos:start="29:5" pos:end="31:34"><call pos:start="29:5" pos:end="31:34"><name pos:start="29:5" pos:end="29:17">inc_refcounts</name><argument_list pos:start="29:18" pos:end="31:34">(<argument pos:start="29:19" pos:end="29:20"><expr pos:start="29:19" pos:end="29:20"><name pos:start="29:19" pos:end="29:20">bs</name></expr></argument>, <argument pos:start="29:23" pos:end="29:25"><expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">res</name></expr></argument>, <argument pos:start="29:28" pos:end="29:41"><expr pos:start="29:28" pos:end="29:41"><name pos:start="29:28" pos:end="29:41">refcount_table</name></expr></argument>, <argument pos:start="29:44" pos:end="29:62"><expr pos:start="29:44" pos:end="29:62"><name pos:start="29:44" pos:end="29:62">refcount_table_size</name></expr></argument>,

        <argument pos:start="31:9" pos:end="31:23"><expr pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:23">l1_table_offset</name></expr></argument>, <argument pos:start="31:26" pos:end="31:33"><expr pos:start="31:26" pos:end="31:33"><name pos:start="31:26" pos:end="31:33">l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:41">/* Read L1 table entries from disk */</comment>

    <if_stmt pos:start="37:5" pos:end="55:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:22">(<expr pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:16">l1_size2</name> <operator pos:start="37:18" pos:end="37:19">==</operator> <literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr>)</condition> <block pos:start="37:24" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:24">

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:16">l1_table</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:23">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="55:5">else <block pos:start="41:12" pos:end="55:5">{<block_content pos:start="43:9" pos:end="53:39">

        <expr_stmt pos:start="43:9" pos:end="43:38"><expr pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:16">l1_table</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:37"><name pos:start="43:20" pos:end="43:27">g_malloc</name><argument_list pos:start="43:28" pos:end="43:37">(<argument pos:start="43:29" pos:end="43:36"><expr pos:start="43:29" pos:end="43:36"><name pos:start="43:29" pos:end="43:36">l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:22"><if pos:start="45:9" pos:end="49:22">if <condition pos:start="45:12" pos:end="47:55">(<expr pos:start="45:13" pos:end="47:54"><call pos:start="45:13" pos:end="47:42"><name pos:start="45:13" pos:end="45:22">bdrv_pread</name><argument_list pos:start="45:23" pos:end="47:42">(<argument pos:start="45:24" pos:end="45:31"><expr pos:start="45:24" pos:end="45:31"><name pos:start="45:24" pos:end="45:31"><name pos:start="45:24" pos:end="45:25">bs</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:31">file</name></name></expr></argument>, <argument pos:start="45:34" pos:end="45:48"><expr pos:start="45:34" pos:end="45:48"><name pos:start="45:34" pos:end="45:48">l1_table_offset</name></expr></argument>,

                       <argument pos:start="47:24" pos:end="47:31"><expr pos:start="47:24" pos:end="47:31"><name pos:start="47:24" pos:end="47:31">l1_table</name></expr></argument>, <argument pos:start="47:34" pos:end="47:41"><expr pos:start="47:34" pos:end="47:41"><name pos:start="47:34" pos:end="47:41">l1_size2</name></expr></argument>)</argument_list></call> <operator pos:start="47:44" pos:end="47:45">!=</operator> <name pos:start="47:47" pos:end="47:54">l1_size2</name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:22"><block_content pos:start="49:13" pos:end="49:22">

            <goto pos:start="49:13" pos:end="49:22">goto <name pos:start="49:18" pos:end="49:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <for pos:start="51:9" pos:end="53:39">for<control pos:start="51:12" pos:end="51:35">(<init pos:start="51:13" pos:end="51:18"><expr pos:start="51:13" pos:end="51:17"><name pos:start="51:13" pos:end="51:13">i</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <literal type="number" pos:start="51:17" pos:end="51:17">0</literal></expr>;</init><condition pos:start="51:19" pos:end="51:30"><expr pos:start="51:19" pos:end="51:29"><name pos:start="51:19" pos:end="51:19">i</name> <operator pos:start="51:21" pos:end="51:21">&lt;</operator> <name pos:start="51:23" pos:end="51:29">l1_size</name></expr>;</condition> <incr pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:32">i</name><operator pos:start="51:33" pos:end="51:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="53:13" pos:end="53:39"><block_content pos:start="53:13" pos:end="53:39">

            <expr_stmt pos:start="53:13" pos:end="53:39"><expr pos:start="53:13" pos:end="53:38"><call pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:24">be64_to_cpus</name><argument_list pos:start="53:25" pos:end="53:38">(<argument pos:start="53:26" pos:end="53:37"><expr pos:start="53:26" pos:end="53:37"><operator pos:start="53:26" pos:end="53:26">&amp;</operator><name pos:start="53:27" pos:end="53:37"><name pos:start="53:27" pos:end="53:34">l1_table</name><index pos:start="53:35" pos:end="53:37">[<expr pos:start="53:36" pos:end="53:36"><name pos:start="53:36" pos:end="53:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:30">/* Do the actual checks */</comment>

    <for pos:start="61:5" pos:end="137:5">for<control pos:start="61:8" pos:end="61:32">(<init pos:start="61:9" pos:end="61:14"><expr pos:start="61:9" pos:end="61:13"><name pos:start="61:9" pos:end="61:9">i</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <literal type="number" pos:start="61:13" pos:end="61:13">0</literal></expr>;</init> <condition pos:start="61:16" pos:end="61:27"><expr pos:start="61:16" pos:end="61:26"><name pos:start="61:16" pos:end="61:16">i</name> <operator pos:start="61:18" pos:end="61:18">&lt;</operator> <name pos:start="61:20" pos:end="61:26">l1_size</name></expr>;</condition> <incr pos:start="61:29" pos:end="61:31"><expr pos:start="61:29" pos:end="61:31"><name pos:start="61:29" pos:end="61:29">i</name><operator pos:start="61:30" pos:end="61:31">++</operator></expr></incr>)</control> <block pos:start="61:34" pos:end="137:5">{<block_content pos:start="63:9" pos:end="135:9">

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:17">l2_offset</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:31"><name pos:start="63:21" pos:end="63:28">l1_table</name><index pos:start="63:29" pos:end="63:31">[<expr pos:start="63:30" pos:end="63:30"><name pos:start="63:30" pos:end="63:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="135:9"><if pos:start="65:9" pos:end="135:9">if <condition pos:start="65:12" pos:end="65:22">(<expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:21">l2_offset</name></expr>)</condition> <block pos:start="65:24" pos:end="135:9">{<block_content pos:start="69:13" pos:end="133:13">

            <comment type="block" pos:start="67:13" pos:end="67:65">/* QCOW_OFLAG_COPIED must be set iff refcount == 1 */</comment>

            <if_stmt pos:start="69:13" pos:end="95:13"><if pos:start="69:13" pos:end="95:13">if <condition pos:start="69:16" pos:end="69:29">(<expr pos:start="69:17" pos:end="69:28"><name pos:start="69:17" pos:end="69:28">check_copied</name></expr>)</condition> <block pos:start="69:31" pos:end="95:13">{<block_content pos:start="71:17" pos:end="93:17">

                <expr_stmt pos:start="71:17" pos:end="73:40"><expr pos:start="71:17" pos:end="73:39"><name pos:start="71:17" pos:end="71:24">refcount</name> <operator pos:start="71:26" pos:end="71:26">=</operator> <call pos:start="71:28" pos:end="73:39"><name pos:start="71:28" pos:end="71:39">get_refcount</name><argument_list pos:start="71:40" pos:end="73:39">(<argument pos:start="71:41" pos:end="71:42"><expr pos:start="71:41" pos:end="71:42"><name pos:start="71:41" pos:end="71:42">bs</name></expr></argument>, <argument pos:start="71:45" pos:end="73:38"><expr pos:start="71:45" pos:end="73:38"><operator pos:start="71:45" pos:end="71:45">(</operator><name pos:start="71:46" pos:end="71:54">l2_offset</name> <operator pos:start="71:56" pos:end="71:56">&amp;</operator> <operator pos:start="71:58" pos:end="71:58">~</operator><name pos:start="71:59" pos:end="71:75">QCOW_OFLAG_COPIED</name><operator pos:start="71:76" pos:end="71:76">)</operator>

                    <operator pos:start="73:21" pos:end="73:22">&gt;&gt;</operator> <name pos:start="73:24" pos:end="73:38"><name pos:start="73:24" pos:end="73:24">s</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:38">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="75:17" pos:end="83:17"><if pos:start="75:17" pos:end="83:17">if <condition pos:start="75:20" pos:end="75:33">(<expr pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:28">refcount</name> <operator pos:start="75:30" pos:end="75:30">&lt;</operator> <literal type="number" pos:start="75:32" pos:end="75:32">0</literal></expr>)</condition> <block pos:start="75:35" pos:end="83:17">{<block_content pos:start="77:21" pos:end="81:30">

                    <expr_stmt pos:start="77:21" pos:end="79:73"><expr pos:start="77:21" pos:end="79:72"><call pos:start="77:21" pos:end="79:72"><name pos:start="77:21" pos:end="77:27">fprintf</name><argument_list pos:start="77:28" pos:end="79:72">(<argument pos:start="77:29" pos:end="77:34"><expr pos:start="77:29" pos:end="77:34"><name pos:start="77:29" pos:end="77:34">stderr</name></expr></argument>, <argument pos:start="77:37" pos:end="79:39"><expr pos:start="77:37" pos:end="79:39"><literal type="string" pos:start="77:37" pos:end="77:72">"Can't get refcount for l2_offset %"</literal>

                        <name pos:start="79:25" pos:end="79:30">PRIx64</name> <literal type="string" pos:start="79:32" pos:end="79:39">": %s\n"</literal></expr></argument>, <argument pos:start="79:42" pos:end="79:50"><expr pos:start="79:42" pos:end="79:50"><name pos:start="79:42" pos:end="79:50">l2_offset</name></expr></argument>, <argument pos:start="79:53" pos:end="79:71"><expr pos:start="79:53" pos:end="79:71"><call pos:start="79:53" pos:end="79:71"><name pos:start="79:53" pos:end="79:60">strerror</name><argument_list pos:start="79:61" pos:end="79:71">(<argument pos:start="79:62" pos:end="79:70"><expr pos:start="79:62" pos:end="79:70"><operator pos:start="79:62" pos:end="79:62">-</operator><name pos:start="79:63" pos:end="79:70">refcount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="81:21" pos:end="81:30">goto <name pos:start="81:26" pos:end="81:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="85:17" pos:end="93:17"><if pos:start="85:17" pos:end="93:17">if <condition pos:start="85:20" pos:end="85:78">(<expr pos:start="85:21" pos:end="85:77"><operator pos:start="85:21" pos:end="85:21">(</operator><name pos:start="85:22" pos:end="85:29">refcount</name> <operator pos:start="85:31" pos:end="85:32">==</operator> <literal type="number" pos:start="85:34" pos:end="85:34">1</literal><operator pos:start="85:35" pos:end="85:35">)</operator> <operator pos:start="85:37" pos:end="85:38">!=</operator> <operator pos:start="85:40" pos:end="85:40">(</operator><operator pos:start="85:41" pos:end="85:41">(</operator><name pos:start="85:42" pos:end="85:50">l2_offset</name> <operator pos:start="85:52" pos:end="85:52">&amp;</operator> <name pos:start="85:54" pos:end="85:70">QCOW_OFLAG_COPIED</name><operator pos:start="85:71" pos:end="85:71">)</operator> <operator pos:start="85:73" pos:end="85:74">!=</operator> <literal type="number" pos:start="85:76" pos:end="85:76">0</literal><operator pos:start="85:77" pos:end="85:77">)</operator></expr>)</condition> <block pos:start="85:80" pos:end="93:17">{<block_content pos:start="87:21" pos:end="91:39">

                    <expr_stmt pos:start="87:21" pos:end="89:63"><expr pos:start="87:21" pos:end="89:62"><call pos:start="87:21" pos:end="89:62"><name pos:start="87:21" pos:end="87:27">fprintf</name><argument_list pos:start="87:28" pos:end="89:62">(<argument pos:start="87:29" pos:end="87:34"><expr pos:start="87:29" pos:end="87:34"><name pos:start="87:29" pos:end="87:34">stderr</name></expr></argument>, <argument pos:start="87:37" pos:end="89:40"><expr pos:start="87:37" pos:end="89:40"><literal type="string" pos:start="87:37" pos:end="87:69">"ERROR OFLAG_COPIED: l2_offset=%"</literal> <name pos:start="87:71" pos:end="87:76">PRIx64</name>

                        <literal type="string" pos:start="89:25" pos:end="89:40">" refcount=%d\n"</literal></expr></argument>, <argument pos:start="89:43" pos:end="89:51"><expr pos:start="89:43" pos:end="89:51"><name pos:start="89:43" pos:end="89:51">l2_offset</name></expr></argument>, <argument pos:start="89:54" pos:end="89:61"><expr pos:start="89:54" pos:end="89:61"><name pos:start="89:54" pos:end="89:61">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:39"><expr pos:start="91:21" pos:end="91:38"><name pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:23">res</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:36">corruptions</name></name><operator pos:start="91:37" pos:end="91:38">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="99:13" pos:end="99:39">/* Mark L2 table as used */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:44"><expr pos:start="101:13" pos:end="101:43"><name pos:start="101:13" pos:end="101:21">l2_offset</name> <operator pos:start="101:23" pos:end="101:24">&amp;=</operator> <operator pos:start="101:26" pos:end="101:26">~</operator><name pos:start="101:27" pos:end="101:43">QCOW_OFLAG_COPIED</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="105:44"><expr pos:start="103:13" pos:end="105:43"><call pos:start="103:13" pos:end="105:43"><name pos:start="103:13" pos:end="103:25">inc_refcounts</name><argument_list pos:start="103:26" pos:end="105:43">(<argument pos:start="103:27" pos:end="103:28"><expr pos:start="103:27" pos:end="103:28"><name pos:start="103:27" pos:end="103:28">bs</name></expr></argument>, <argument pos:start="103:31" pos:end="103:33"><expr pos:start="103:31" pos:end="103:33"><name pos:start="103:31" pos:end="103:33">res</name></expr></argument>, <argument pos:start="103:36" pos:end="103:49"><expr pos:start="103:36" pos:end="103:49"><name pos:start="103:36" pos:end="103:49">refcount_table</name></expr></argument>, <argument pos:start="103:52" pos:end="103:70"><expr pos:start="103:52" pos:end="103:70"><name pos:start="103:52" pos:end="103:70">refcount_table_size</name></expr></argument>,

                <argument pos:start="105:17" pos:end="105:25"><expr pos:start="105:17" pos:end="105:25"><name pos:start="105:17" pos:end="105:25">l2_offset</name></expr></argument>, <argument pos:start="105:28" pos:end="105:42"><expr pos:start="105:28" pos:end="105:42"><name pos:start="105:28" pos:end="105:42"><name pos:start="105:28" pos:end="105:28">s</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:42">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="109:13" pos:end="109:47">/* L2 tables are cluster aligned */</comment>

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="119:13">if <condition pos:start="111:16" pos:end="111:50">(<expr pos:start="111:17" pos:end="111:49"><name pos:start="111:17" pos:end="111:25">l2_offset</name> <operator pos:start="111:27" pos:end="111:27">&amp;</operator> <operator pos:start="111:29" pos:end="111:29">(</operator><name pos:start="111:30" pos:end="111:44"><name pos:start="111:30" pos:end="111:30">s</name><operator pos:start="111:31" pos:end="111:32">-&gt;</operator><name pos:start="111:33" pos:end="111:44">cluster_size</name></name> <operator pos:start="111:46" pos:end="111:46">-</operator> <literal type="number" pos:start="111:48" pos:end="111:48">1</literal><operator pos:start="111:49" pos:end="111:49">)</operator></expr>)</condition> <block pos:start="111:52" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:35">

                <expr_stmt pos:start="113:17" pos:end="115:72"><expr pos:start="113:17" pos:end="115:71"><call pos:start="113:17" pos:end="115:71"><name pos:start="113:17" pos:end="113:23">fprintf</name><argument_list pos:start="113:24" pos:end="115:71">(<argument pos:start="113:25" pos:end="113:30"><expr pos:start="113:25" pos:end="113:30"><name pos:start="113:25" pos:end="113:30">stderr</name></expr></argument>, <argument pos:start="113:33" pos:end="115:59"><expr pos:start="113:33" pos:end="115:59"><literal type="string" pos:start="113:33" pos:end="113:51">"ERROR l2_offset=%"</literal> <name pos:start="113:53" pos:end="113:58">PRIx64</name> <literal type="string" pos:start="113:60" pos:end="113:76">": Table is not "</literal>

                    <literal type="string" pos:start="115:21" pos:end="115:59">"cluster aligned; L1 entry corrupted\n"</literal></expr></argument>, <argument pos:start="115:62" pos:end="115:70"><expr pos:start="115:62" pos:end="115:70"><name pos:start="115:62" pos:end="115:70">l2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:35"><expr pos:start="117:17" pos:end="117:34"><name pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:19">res</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:32">corruptions</name></name><operator pos:start="117:33" pos:end="117:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="123:13" pos:end="123:46">/* Process and check L2 entries */</comment>

            <expr_stmt pos:start="125:13" pos:end="127:62"><expr pos:start="125:13" pos:end="127:61"><name pos:start="125:13" pos:end="125:15">ret</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="127:61"><name pos:start="125:19" pos:end="125:36">check_refcounts_l2</name><argument_list pos:start="125:37" pos:end="127:61">(<argument pos:start="125:38" pos:end="125:39"><expr pos:start="125:38" pos:end="125:39"><name pos:start="125:38" pos:end="125:39">bs</name></expr></argument>, <argument pos:start="125:42" pos:end="125:44"><expr pos:start="125:42" pos:end="125:44"><name pos:start="125:42" pos:end="125:44">res</name></expr></argument>, <argument pos:start="125:47" pos:end="125:60"><expr pos:start="125:47" pos:end="125:60"><name pos:start="125:47" pos:end="125:60">refcount_table</name></expr></argument>,

                <argument pos:start="127:17" pos:end="127:35"><expr pos:start="127:17" pos:end="127:35"><name pos:start="127:17" pos:end="127:35">refcount_table_size</name></expr></argument>, <argument pos:start="127:38" pos:end="127:46"><expr pos:start="127:38" pos:end="127:46"><name pos:start="127:38" pos:end="127:46">l2_offset</name></expr></argument>, <argument pos:start="127:49" pos:end="127:60"><expr pos:start="127:49" pos:end="127:60"><name pos:start="127:49" pos:end="127:60">check_copied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="133:13"><if pos:start="129:13" pos:end="133:13">if <condition pos:start="129:16" pos:end="129:24">(<expr pos:start="129:17" pos:end="129:23"><name pos:start="129:17" pos:end="129:19">ret</name> <operator pos:start="129:21" pos:end="129:21">&lt;</operator> <literal type="number" pos:start="129:23" pos:end="129:23">0</literal></expr>)</condition> <block pos:start="129:26" pos:end="133:13">{<block_content pos:start="131:17" pos:end="131:26">

                <goto pos:start="131:17" pos:end="131:26">goto <name pos:start="131:22" pos:end="131:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="139:5" pos:end="139:21"><expr pos:start="139:5" pos:end="139:20"><call pos:start="139:5" pos:end="139:20"><name pos:start="139:5" pos:end="139:10">g_free</name><argument_list pos:start="139:11" pos:end="139:20">(<argument pos:start="139:12" pos:end="139:19"><expr pos:start="139:12" pos:end="139:19"><name pos:start="139:12" pos:end="139:19">l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>;</return>



<label pos:start="145:1" pos:end="145:5"><name pos:start="145:1" pos:end="145:4">fail</name>:</label>

    <expr_stmt pos:start="147:5" pos:end="147:64"><expr pos:start="147:5" pos:end="147:63"><call pos:start="147:5" pos:end="147:63"><name pos:start="147:5" pos:end="147:11">fprintf</name><argument_list pos:start="147:12" pos:end="147:63">(<argument pos:start="147:13" pos:end="147:18"><expr pos:start="147:13" pos:end="147:18"><name pos:start="147:13" pos:end="147:18">stderr</name></expr></argument>, <argument pos:start="147:21" pos:end="147:62"><expr pos:start="147:21" pos:end="147:62"><literal type="string" pos:start="147:21" pos:end="147:62">"ERROR: I/O error in check_refcounts_l1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:24"><expr pos:start="149:5" pos:end="149:23"><name pos:start="149:5" pos:end="149:21"><name pos:start="149:5" pos:end="149:7">res</name><operator pos:start="149:8" pos:end="149:9">-&gt;</operator><name pos:start="149:10" pos:end="149:21">check_errors</name></name><operator pos:start="149:22" pos:end="149:23">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:21"><expr pos:start="151:5" pos:end="151:20"><call pos:start="151:5" pos:end="151:20"><name pos:start="151:5" pos:end="151:10">g_free</name><argument_list pos:start="151:11" pos:end="151:20">(<argument pos:start="151:12" pos:end="151:19"><expr pos:start="151:12" pos:end="151:19"><name pos:start="151:12" pos:end="151:19">l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="153:5" pos:end="153:16">return <expr pos:start="153:12" pos:end="153:15"><operator pos:start="153:12" pos:end="153:12">-</operator><name pos:start="153:13" pos:end="153:15">EIO</name></expr>;</return>

</block_content>}</block></function>
</unit>
