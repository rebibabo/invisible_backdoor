<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3257.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:69"><name pos:start="1:1" pos:end="1:10">build_dsdt</name><argument_list pos:start="1:11" pos:end="5:69">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:49">BIOSLinker *linker</argument>,

           <argument pos:start="3:12" pos:end="3:25">AcpiPmInfo *pm</argument>, <argument pos:start="3:28" pos:end="3:45">AcpiMiscInfo *misc</argument>,

           <argument pos:start="5:12" pos:end="5:26">Range *pci_hole</argument>, <argument pos:start="5:29" pos:end="5:45">Range *pci_hole64</argument>, <argument pos:start="5:48" pos:end="5:68">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="757:1">{<block_content pos:start="9:5" pos:end="755:25">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CrsRangeEntry</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">Aml</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:13">dsdt</name></decl>, <decl pos:start="11:16" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">sb_scope</name></decl>, <decl pos:start="11:27" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:32">scope</name></decl>, <decl pos:start="11:35" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:35" pos:end="11:35">*</modifier></type><name pos:start="11:36" pos:end="11:38">dev</name></decl>, <decl pos:start="11:41" pos:end="11:47"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:41" pos:end="11:41">*</modifier></type><name pos:start="11:42" pos:end="11:47">method</name></decl>, <decl pos:start="11:50" pos:end="11:55"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:50" pos:end="11:50">*</modifier></type><name pos:start="11:51" pos:end="11:55">field</name></decl>, <decl pos:start="11:58" pos:end="11:61"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:58" pos:end="11:58">*</modifier></type><name pos:start="11:59" pos:end="11:61">pkg</name></decl>, <decl pos:start="11:64" pos:end="11:67"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:64" pos:end="11:64">*</modifier></type><name pos:start="11:65" pos:end="11:67">crs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:75"><decl pos:start="13:5" pos:end="13:74"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">GPtrArray</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:25">mem_ranges</name> <init pos:start="13:27" pos:end="13:74">= <expr pos:start="13:29" pos:end="13:74"><call pos:start="13:29" pos:end="13:74"><name pos:start="13:29" pos:end="13:58">g_ptr_array_new_with_free_func</name><argument_list pos:start="13:59" pos:end="13:74">(<argument pos:start="13:60" pos:end="13:73"><expr pos:start="13:60" pos:end="13:73"><name pos:start="13:60" pos:end="13:73">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:74"><decl pos:start="15:5" pos:end="15:73"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">GPtrArray</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:24">io_ranges</name> <init pos:start="15:26" pos:end="15:73">= <expr pos:start="15:28" pos:end="15:73"><call pos:start="15:28" pos:end="15:73"><name pos:start="15:28" pos:end="15:57">g_ptr_array_new_with_free_func</name><argument_list pos:start="15:58" pos:end="15:73">(<argument pos:start="15:59" pos:end="15:72"><expr pos:start="15:59" pos:end="15:72"><name pos:start="15:59" pos:end="15:72">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">PCMachineState</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:24">pcms</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:37">PC_MACHINE</name><argument_list pos:start="17:38" pos:end="17:46">(<argument pos:start="17:39" pos:end="17:45"><expr pos:start="17:39" pos:end="17:45"><name pos:start="17:39" pos:end="17:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:57"><decl pos:start="19:5" pos:end="19:56"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">PCMachineClass</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:24">pcmc</name> <init pos:start="19:26" pos:end="19:56">= <expr pos:start="19:28" pos:end="19:56"><call pos:start="19:28" pos:end="19:56"><name pos:start="19:28" pos:end="19:47">PC_MACHINE_GET_CLASS</name><argument_list pos:start="19:48" pos:end="19:56">(<argument pos:start="19:49" pos:end="19:55"><expr pos:start="19:49" pos:end="19:55"><name pos:start="19:49" pos:end="19:55">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:41"><decl pos:start="21:5" pos:end="21:40"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:19">nr_mem</name> <init pos:start="21:21" pos:end="21:40">= <expr pos:start="21:23" pos:end="21:40"><name pos:start="21:23" pos:end="21:40"><name pos:start="21:23" pos:end="21:29">machine</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:40">ram_slots</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:22">root_bus_limit</name> <init pos:start="23:24" pos:end="23:29">= <expr pos:start="23:26" pos:end="23:29"><literal type="number" pos:start="23:26" pos:end="23:29">0xFF</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:10">PCIBus</name> <modifier pos:start="25:12" pos:end="25:12">*</modifier></type><name pos:start="25:13" pos:end="25:15">bus</name> <init pos:start="25:17" pos:end="25:22">= <expr pos:start="25:19" pos:end="25:22"><name pos:start="25:19" pos:end="25:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:32"><expr pos:start="31:5" pos:end="31:31"><name pos:start="31:5" pos:end="31:8">dsdt</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:31"><name pos:start="31:12" pos:end="31:29">init_aml_allocator</name><argument_list pos:start="31:30" pos:end="31:31">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:34">/* Reserve space for header */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:55"><expr pos:start="37:5" pos:end="37:54"><call pos:start="37:5" pos:end="37:54"><name pos:start="37:5" pos:end="37:18">acpi_data_push</name><argument_list pos:start="37:19" pos:end="37:54">(<argument pos:start="37:20" pos:end="37:28"><expr pos:start="37:20" pos:end="37:28"><name pos:start="37:20" pos:end="37:28"><name pos:start="37:20" pos:end="37:23">dsdt</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:28">buf</name></name></expr></argument>, <argument pos:start="37:31" pos:end="37:53"><expr pos:start="37:31" pos:end="37:53"><sizeof pos:start="37:31" pos:end="37:53">sizeof<argument_list pos:start="37:37" pos:end="37:53">(<argument pos:start="37:38" pos:end="37:52"><expr pos:start="37:38" pos:end="37:52"><name pos:start="37:38" pos:end="37:52">AcpiTableHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><call pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:17">build_dbg_aml</name><argument_list pos:start="41:18" pos:end="41:23">(<argument pos:start="41:19" pos:end="41:22"><expr pos:start="41:19" pos:end="41:22"><name pos:start="41:19" pos:end="41:22">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="127:5"><if pos:start="43:5" pos:end="73:5">if <condition pos:start="43:8" pos:end="43:23">(<expr pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:12">misc</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:22">is_piix4</name></name></expr>)</condition> <block pos:start="43:25" pos:end="73:5">{<block_content pos:start="45:9" pos:end="71:35">

        <expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:16">sb_scope</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <call pos:start="45:20" pos:end="45:35"><name pos:start="45:20" pos:end="45:28">aml_scope</name><argument_list pos:start="45:29" pos:end="45:35">(<argument pos:start="45:30" pos:end="45:34"><expr pos:start="45:30" pos:end="45:34"><literal type="string" pos:start="45:30" pos:end="45:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:11">dev</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:32"><name pos:start="47:15" pos:end="47:24">aml_device</name><argument_list pos:start="47:25" pos:end="47:32">(<argument pos:start="47:26" pos:end="47:31"><expr pos:start="47:26" pos:end="47:31"><literal type="string" pos:start="47:26" pos:end="47:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:70"><expr pos:start="49:9" pos:end="49:69"><call pos:start="49:9" pos:end="49:69"><name pos:start="49:9" pos:end="49:18">aml_append</name><argument_list pos:start="49:19" pos:end="49:69">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">dev</name></expr></argument>, <argument pos:start="49:25" pos:end="49:68"><expr pos:start="49:25" pos:end="49:68"><call pos:start="49:25" pos:end="49:68"><name pos:start="49:25" pos:end="49:37">aml_name_decl</name><argument_list pos:start="49:38" pos:end="49:68">(<argument pos:start="49:39" pos:end="49:44"><expr pos:start="49:39" pos:end="49:44"><literal type="string" pos:start="49:39" pos:end="49:44">"_HID"</literal></expr></argument>, <argument pos:start="49:47" pos:end="49:67"><expr pos:start="49:47" pos:end="49:67"><call pos:start="49:47" pos:end="49:67"><name pos:start="49:47" pos:end="49:56">aml_eisaid</name><argument_list pos:start="49:57" pos:end="49:67">(<argument pos:start="49:58" pos:end="49:66"><expr pos:start="49:58" pos:end="49:66"><literal type="string" pos:start="49:58" pos:end="49:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:18">aml_append</name><argument_list pos:start="51:19" pos:end="51:58">(<argument pos:start="51:20" pos:end="51:22"><expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">dev</name></expr></argument>, <argument pos:start="51:25" pos:end="51:57"><expr pos:start="51:25" pos:end="51:57"><call pos:start="51:25" pos:end="51:57"><name pos:start="51:25" pos:end="51:37">aml_name_decl</name><argument_list pos:start="51:38" pos:end="51:57">(<argument pos:start="51:39" pos:end="51:44"><expr pos:start="51:39" pos:end="51:44"><literal type="string" pos:start="51:39" pos:end="51:44">"_ADR"</literal></expr></argument>, <argument pos:start="51:47" pos:end="51:56"><expr pos:start="51:47" pos:end="51:56"><call pos:start="51:47" pos:end="51:56"><name pos:start="51:47" pos:end="51:53">aml_int</name><argument_list pos:start="51:54" pos:end="51:56">(<argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:59"><expr pos:start="53:9" pos:end="53:58"><call pos:start="53:9" pos:end="53:58"><name pos:start="53:9" pos:end="53:18">aml_append</name><argument_list pos:start="53:19" pos:end="53:58">(<argument pos:start="53:20" pos:end="53:22"><expr pos:start="53:20" pos:end="53:22"><name pos:start="53:20" pos:end="53:22">dev</name></expr></argument>, <argument pos:start="53:25" pos:end="53:57"><expr pos:start="53:25" pos:end="53:57"><call pos:start="53:25" pos:end="53:57"><name pos:start="53:25" pos:end="53:37">aml_name_decl</name><argument_list pos:start="53:38" pos:end="53:57">(<argument pos:start="53:39" pos:end="53:44"><expr pos:start="53:39" pos:end="53:44"><literal type="string" pos:start="53:39" pos:end="53:44">"_UID"</literal></expr></argument>, <argument pos:start="53:47" pos:end="53:56"><expr pos:start="53:47" pos:end="53:56"><call pos:start="53:47" pos:end="53:56"><name pos:start="53:47" pos:end="53:53">aml_int</name><argument_list pos:start="53:54" pos:end="53:56">(<argument pos:start="53:55" pos:end="53:55"><expr pos:start="53:55" pos:end="53:55"><literal type="number" pos:start="53:55" pos:end="53:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><call pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:18">aml_append</name><argument_list pos:start="55:19" pos:end="55:33">(<argument pos:start="55:20" pos:end="55:27"><expr pos:start="55:20" pos:end="55:27"><name pos:start="55:20" pos:end="55:27">sb_scope</name></expr></argument>, <argument pos:start="55:30" pos:end="55:32"><expr pos:start="55:30" pos:end="55:32"><name pos:start="55:30" pos:end="55:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:35"><expr pos:start="57:9" pos:end="57:34"><call pos:start="57:9" pos:end="57:34"><name pos:start="57:9" pos:end="57:18">aml_append</name><argument_list pos:start="57:19" pos:end="57:34">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">dsdt</name></expr></argument>, <argument pos:start="57:26" pos:end="57:33"><expr pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><call pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:22">build_hpet_aml</name><argument_list pos:start="61:23" pos:end="61:28">(<argument pos:start="61:24" pos:end="61:27"><expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:29"><expr pos:start="63:9" pos:end="63:28"><call pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:22">build_piix4_pm</name><argument_list pos:start="63:23" pos:end="63:28">(<argument pos:start="63:24" pos:end="63:27"><expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><call pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:30">build_piix4_isa_bridge</name><argument_list pos:start="65:31" pos:end="65:36">(<argument pos:start="65:32" pos:end="65:35"><expr pos:start="65:32" pos:end="65:35"><name pos:start="65:32" pos:end="65:35">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:36"><expr pos:start="67:9" pos:end="67:35"><call pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:29">build_isa_devices_aml</name><argument_list pos:start="67:30" pos:end="67:35">(<argument pos:start="67:31" pos:end="67:34"><expr pos:start="67:31" pos:end="67:34"><name pos:start="67:31" pos:end="67:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><call pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:31">build_piix4_pci_hotplug</name><argument_list pos:start="69:32" pos:end="69:37">(<argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><call pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:28">build_piix4_pci0_int</name><argument_list pos:start="71:29" pos:end="71:34">(<argument pos:start="71:30" pos:end="71:33"><expr pos:start="71:30" pos:end="71:33"><name pos:start="71:30" pos:end="71:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="127:5">else <block pos:start="73:12" pos:end="127:5">{<block_content pos:start="75:9" pos:end="125:33">

        <expr_stmt pos:start="75:9" pos:end="75:36"><expr pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:16">sb_scope</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:35"><name pos:start="75:20" pos:end="75:28">aml_scope</name><argument_list pos:start="75:29" pos:end="75:35">(<argument pos:start="75:30" pos:end="75:34"><expr pos:start="75:30" pos:end="75:34"><literal type="string" pos:start="75:30" pos:end="75:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="79:80"><expr pos:start="77:9" pos:end="79:79"><call pos:start="77:9" pos:end="79:79"><name pos:start="77:9" pos:end="77:18">aml_append</name><argument_list pos:start="77:19" pos:end="79:79">(<argument pos:start="77:20" pos:end="77:27"><expr pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:27">sb_scope</name></expr></argument>,

            <argument pos:start="79:13" pos:end="79:78"><expr pos:start="79:13" pos:end="79:78"><call pos:start="79:13" pos:end="79:78"><name pos:start="79:13" pos:end="79:32">aml_operation_region</name><argument_list pos:start="79:33" pos:end="79:78">(<argument pos:start="79:34" pos:end="79:39"><expr pos:start="79:34" pos:end="79:39"><literal type="string" pos:start="79:34" pos:end="79:39">"PCST"</literal></expr></argument>, <argument pos:start="79:42" pos:end="79:54"><expr pos:start="79:42" pos:end="79:54"><name pos:start="79:42" pos:end="79:54">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="79:57" pos:end="79:71"><expr pos:start="79:57" pos:end="79:71"><call pos:start="79:57" pos:end="79:71"><name pos:start="79:57" pos:end="79:63">aml_int</name><argument_list pos:start="79:64" pos:end="79:71">(<argument pos:start="79:65" pos:end="79:70"><expr pos:start="79:65" pos:end="79:70"><literal type="number" pos:start="79:65" pos:end="79:70">0xae00</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:74" pos:end="79:77"><expr pos:start="79:74" pos:end="79:77"><literal type="number" pos:start="79:74" pos:end="79:77">0x0c</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="83:80"><expr pos:start="81:9" pos:end="83:79"><call pos:start="81:9" pos:end="83:79"><name pos:start="81:9" pos:end="81:18">aml_append</name><argument_list pos:start="81:19" pos:end="83:79">(<argument pos:start="81:20" pos:end="81:27"><expr pos:start="81:20" pos:end="81:27"><name pos:start="81:20" pos:end="81:27">sb_scope</name></expr></argument>,

            <argument pos:start="83:13" pos:end="83:78"><expr pos:start="83:13" pos:end="83:78"><call pos:start="83:13" pos:end="83:78"><name pos:start="83:13" pos:end="83:32">aml_operation_region</name><argument_list pos:start="83:33" pos:end="83:78">(<argument pos:start="83:34" pos:end="83:39"><expr pos:start="83:34" pos:end="83:39"><literal type="string" pos:start="83:34" pos:end="83:39">"PCSB"</literal></expr></argument>, <argument pos:start="83:42" pos:end="83:54"><expr pos:start="83:42" pos:end="83:54"><name pos:start="83:42" pos:end="83:54">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="83:57" pos:end="83:71"><expr pos:start="83:57" pos:end="83:71"><call pos:start="83:57" pos:end="83:71"><name pos:start="83:57" pos:end="83:63">aml_int</name><argument_list pos:start="83:64" pos:end="83:71">(<argument pos:start="83:65" pos:end="83:70"><expr pos:start="83:65" pos:end="83:70"><literal type="number" pos:start="83:65" pos:end="83:70">0xae0c</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="83:74" pos:end="83:77"><expr pos:start="83:74" pos:end="83:77"><literal type="number" pos:start="83:74" pos:end="83:77">0x01</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:79"><expr pos:start="85:9" pos:end="85:78"><name pos:start="85:9" pos:end="85:13">field</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <call pos:start="85:17" pos:end="85:78"><name pos:start="85:17" pos:end="85:25">aml_field</name><argument_list pos:start="85:26" pos:end="85:78">(<argument pos:start="85:27" pos:end="85:32"><expr pos:start="85:27" pos:end="85:32"><literal type="string" pos:start="85:27" pos:end="85:32">"PCSB"</literal></expr></argument>, <argument pos:start="85:35" pos:end="85:45"><expr pos:start="85:35" pos:end="85:45"><name pos:start="85:35" pos:end="85:45">AML_ANY_ACC</name></expr></argument>, <argument pos:start="85:48" pos:end="85:57"><expr pos:start="85:48" pos:end="85:57"><name pos:start="85:48" pos:end="85:57">AML_NOLOCK</name></expr></argument>, <argument pos:start="85:60" pos:end="85:77"><expr pos:start="85:60" pos:end="85:77"><name pos:start="85:60" pos:end="85:77">AML_WRITE_AS_ZEROS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:54"><expr pos:start="87:9" pos:end="87:53"><call pos:start="87:9" pos:end="87:53"><name pos:start="87:9" pos:end="87:18">aml_append</name><argument_list pos:start="87:19" pos:end="87:53">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:24">field</name></expr></argument>, <argument pos:start="87:27" pos:end="87:52"><expr pos:start="87:27" pos:end="87:52"><call pos:start="87:27" pos:end="87:52"><name pos:start="87:27" pos:end="87:41">aml_named_field</name><argument_list pos:start="87:42" pos:end="87:52">(<argument pos:start="87:43" pos:end="87:48"><expr pos:start="87:43" pos:end="87:48"><literal type="string" pos:start="87:43" pos:end="87:48">"PCIB"</literal></expr></argument>, <argument pos:start="87:51" pos:end="87:51"><expr pos:start="87:51" pos:end="87:51"><literal type="number" pos:start="87:51" pos:end="87:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:36"><expr pos:start="89:9" pos:end="89:35"><call pos:start="89:9" pos:end="89:35"><name pos:start="89:9" pos:end="89:18">aml_append</name><argument_list pos:start="89:19" pos:end="89:35">(<argument pos:start="89:20" pos:end="89:27"><expr pos:start="89:20" pos:end="89:27"><name pos:start="89:20" pos:end="89:27">sb_scope</name></expr></argument>, <argument pos:start="89:30" pos:end="89:34"><expr pos:start="89:30" pos:end="89:34"><name pos:start="89:30" pos:end="89:34">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:35"><expr pos:start="91:9" pos:end="91:34"><call pos:start="91:9" pos:end="91:34"><name pos:start="91:9" pos:end="91:18">aml_append</name><argument_list pos:start="91:19" pos:end="91:34">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">dsdt</name></expr></argument>, <argument pos:start="91:26" pos:end="91:33"><expr pos:start="91:26" pos:end="91:33"><name pos:start="91:26" pos:end="91:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:36"><expr pos:start="95:9" pos:end="95:35"><name pos:start="95:9" pos:end="95:16">sb_scope</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <call pos:start="95:20" pos:end="95:35"><name pos:start="95:20" pos:end="95:28">aml_scope</name><argument_list pos:start="95:29" pos:end="95:35">(<argument pos:start="95:30" pos:end="95:34"><expr pos:start="95:30" pos:end="95:34"><literal type="string" pos:start="95:30" pos:end="95:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:33"><expr pos:start="97:9" pos:end="97:32"><name pos:start="97:9" pos:end="97:11">dev</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:32"><name pos:start="97:15" pos:end="97:24">aml_device</name><argument_list pos:start="97:25" pos:end="97:32">(<argument pos:start="97:26" pos:end="97:31"><expr pos:start="97:26" pos:end="97:31"><literal type="string" pos:start="97:26" pos:end="97:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:70"><expr pos:start="99:9" pos:end="99:69"><call pos:start="99:9" pos:end="99:69"><name pos:start="99:9" pos:end="99:18">aml_append</name><argument_list pos:start="99:19" pos:end="99:69">(<argument pos:start="99:20" pos:end="99:22"><expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">dev</name></expr></argument>, <argument pos:start="99:25" pos:end="99:68"><expr pos:start="99:25" pos:end="99:68"><call pos:start="99:25" pos:end="99:68"><name pos:start="99:25" pos:end="99:37">aml_name_decl</name><argument_list pos:start="99:38" pos:end="99:68">(<argument pos:start="99:39" pos:end="99:44"><expr pos:start="99:39" pos:end="99:44"><literal type="string" pos:start="99:39" pos:end="99:44">"_HID"</literal></expr></argument>, <argument pos:start="99:47" pos:end="99:67"><expr pos:start="99:47" pos:end="99:67"><call pos:start="99:47" pos:end="99:67"><name pos:start="99:47" pos:end="99:56">aml_eisaid</name><argument_list pos:start="99:57" pos:end="99:67">(<argument pos:start="99:58" pos:end="99:66"><expr pos:start="99:58" pos:end="99:66"><literal type="string" pos:start="99:58" pos:end="99:66">"PNP0A08"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:70"><expr pos:start="101:9" pos:end="101:69"><call pos:start="101:9" pos:end="101:69"><name pos:start="101:9" pos:end="101:18">aml_append</name><argument_list pos:start="101:19" pos:end="101:69">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">dev</name></expr></argument>, <argument pos:start="101:25" pos:end="101:68"><expr pos:start="101:25" pos:end="101:68"><call pos:start="101:25" pos:end="101:68"><name pos:start="101:25" pos:end="101:37">aml_name_decl</name><argument_list pos:start="101:38" pos:end="101:68">(<argument pos:start="101:39" pos:end="101:44"><expr pos:start="101:39" pos:end="101:44"><literal type="string" pos:start="101:39" pos:end="101:44">"_CID"</literal></expr></argument>, <argument pos:start="101:47" pos:end="101:67"><expr pos:start="101:47" pos:end="101:67"><call pos:start="101:47" pos:end="101:67"><name pos:start="101:47" pos:end="101:56">aml_eisaid</name><argument_list pos:start="101:57" pos:end="101:67">(<argument pos:start="101:58" pos:end="101:66"><expr pos:start="101:58" pos:end="101:66"><literal type="string" pos:start="101:58" pos:end="101:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:59"><expr pos:start="103:9" pos:end="103:58"><call pos:start="103:9" pos:end="103:58"><name pos:start="103:9" pos:end="103:18">aml_append</name><argument_list pos:start="103:19" pos:end="103:58">(<argument pos:start="103:20" pos:end="103:22"><expr pos:start="103:20" pos:end="103:22"><name pos:start="103:20" pos:end="103:22">dev</name></expr></argument>, <argument pos:start="103:25" pos:end="103:57"><expr pos:start="103:25" pos:end="103:57"><call pos:start="103:25" pos:end="103:57"><name pos:start="103:25" pos:end="103:37">aml_name_decl</name><argument_list pos:start="103:38" pos:end="103:57">(<argument pos:start="103:39" pos:end="103:44"><expr pos:start="103:39" pos:end="103:44"><literal type="string" pos:start="103:39" pos:end="103:44">"_ADR"</literal></expr></argument>, <argument pos:start="103:47" pos:end="103:56"><expr pos:start="103:47" pos:end="103:56"><call pos:start="103:47" pos:end="103:56"><name pos:start="103:47" pos:end="103:53">aml_int</name><argument_list pos:start="103:54" pos:end="103:56">(<argument pos:start="103:55" pos:end="103:55"><expr pos:start="103:55" pos:end="103:55"><literal type="number" pos:start="103:55" pos:end="103:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:59"><expr pos:start="105:9" pos:end="105:58"><call pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:18">aml_append</name><argument_list pos:start="105:19" pos:end="105:58">(<argument pos:start="105:20" pos:end="105:22"><expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">dev</name></expr></argument>, <argument pos:start="105:25" pos:end="105:57"><expr pos:start="105:25" pos:end="105:57"><call pos:start="105:25" pos:end="105:57"><name pos:start="105:25" pos:end="105:37">aml_name_decl</name><argument_list pos:start="105:38" pos:end="105:57">(<argument pos:start="105:39" pos:end="105:44"><expr pos:start="105:39" pos:end="105:44"><literal type="string" pos:start="105:39" pos:end="105:44">"_UID"</literal></expr></argument>, <argument pos:start="105:47" pos:end="105:56"><expr pos:start="105:47" pos:end="105:56"><call pos:start="105:47" pos:end="105:56"><name pos:start="105:47" pos:end="105:53">aml_int</name><argument_list pos:start="105:54" pos:end="105:56">(<argument pos:start="105:55" pos:end="105:55"><expr pos:start="105:55" pos:end="105:55"><literal type="number" pos:start="105:55" pos:end="105:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:59"><expr pos:start="107:9" pos:end="107:58"><call pos:start="107:9" pos:end="107:58"><name pos:start="107:9" pos:end="107:18">aml_append</name><argument_list pos:start="107:19" pos:end="107:58">(<argument pos:start="107:20" pos:end="107:22"><expr pos:start="107:20" pos:end="107:22"><name pos:start="107:20" pos:end="107:22">dev</name></expr></argument>, <argument pos:start="107:25" pos:end="107:57"><expr pos:start="107:25" pos:end="107:57"><call pos:start="107:25" pos:end="107:57"><name pos:start="107:25" pos:end="107:37">aml_name_decl</name><argument_list pos:start="107:38" pos:end="107:57">(<argument pos:start="107:39" pos:end="107:44"><expr pos:start="107:39" pos:end="107:44"><literal type="string" pos:start="107:39" pos:end="107:44">"SUPP"</literal></expr></argument>, <argument pos:start="107:47" pos:end="107:56"><expr pos:start="107:47" pos:end="107:56"><call pos:start="107:47" pos:end="107:56"><name pos:start="107:47" pos:end="107:53">aml_int</name><argument_list pos:start="107:54" pos:end="107:56">(<argument pos:start="107:55" pos:end="107:55"><expr pos:start="107:55" pos:end="107:55"><literal type="number" pos:start="107:55" pos:end="107:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:59"><expr pos:start="109:9" pos:end="109:58"><call pos:start="109:9" pos:end="109:58"><name pos:start="109:9" pos:end="109:18">aml_append</name><argument_list pos:start="109:19" pos:end="109:58">(<argument pos:start="109:20" pos:end="109:22"><expr pos:start="109:20" pos:end="109:22"><name pos:start="109:20" pos:end="109:22">dev</name></expr></argument>, <argument pos:start="109:25" pos:end="109:57"><expr pos:start="109:25" pos:end="109:57"><call pos:start="109:25" pos:end="109:57"><name pos:start="109:25" pos:end="109:37">aml_name_decl</name><argument_list pos:start="109:38" pos:end="109:57">(<argument pos:start="109:39" pos:end="109:44"><expr pos:start="109:39" pos:end="109:44"><literal type="string" pos:start="109:39" pos:end="109:44">"CTRL"</literal></expr></argument>, <argument pos:start="109:47" pos:end="109:56"><expr pos:start="109:47" pos:end="109:56"><call pos:start="109:47" pos:end="109:56"><name pos:start="109:47" pos:end="109:53">aml_int</name><argument_list pos:start="109:54" pos:end="109:56">(<argument pos:start="109:55" pos:end="109:55"><expr pos:start="109:55" pos:end="109:55"><literal type="number" pos:start="109:55" pos:end="109:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:48"><expr pos:start="111:9" pos:end="111:47"><call pos:start="111:9" pos:end="111:47"><name pos:start="111:9" pos:end="111:18">aml_append</name><argument_list pos:start="111:19" pos:end="111:47">(<argument pos:start="111:20" pos:end="111:22"><expr pos:start="111:20" pos:end="111:22"><name pos:start="111:20" pos:end="111:22">dev</name></expr></argument>, <argument pos:start="111:25" pos:end="111:46"><expr pos:start="111:25" pos:end="111:46"><call pos:start="111:25" pos:end="111:46"><name pos:start="111:25" pos:end="111:44">build_q35_osc_method</name><argument_list pos:start="111:45" pos:end="111:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:34"><expr pos:start="113:9" pos:end="113:33"><call pos:start="113:9" pos:end="113:33"><name pos:start="113:9" pos:end="113:18">aml_append</name><argument_list pos:start="113:19" pos:end="113:33">(<argument pos:start="113:20" pos:end="113:27"><expr pos:start="113:20" pos:end="113:27"><name pos:start="113:20" pos:end="113:27">sb_scope</name></expr></argument>, <argument pos:start="113:30" pos:end="113:32"><expr pos:start="113:30" pos:end="113:32"><name pos:start="113:30" pos:end="113:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><call pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:18">aml_append</name><argument_list pos:start="115:19" pos:end="115:34">(<argument pos:start="115:20" pos:end="115:23"><expr pos:start="115:20" pos:end="115:23"><name pos:start="115:20" pos:end="115:23">dsdt</name></expr></argument>, <argument pos:start="115:26" pos:end="115:33"><expr pos:start="115:26" pos:end="115:33"><name pos:start="115:26" pos:end="115:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:29"><expr pos:start="119:9" pos:end="119:28"><call pos:start="119:9" pos:end="119:28"><name pos:start="119:9" pos:end="119:22">build_hpet_aml</name><argument_list pos:start="119:23" pos:end="119:28">(<argument pos:start="119:24" pos:end="119:27"><expr pos:start="119:24" pos:end="119:27"><name pos:start="119:24" pos:end="119:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:35"><expr pos:start="121:9" pos:end="121:34"><call pos:start="121:9" pos:end="121:34"><name pos:start="121:9" pos:end="121:28">build_q35_isa_bridge</name><argument_list pos:start="121:29" pos:end="121:34">(<argument pos:start="121:30" pos:end="121:33"><expr pos:start="121:30" pos:end="121:33"><name pos:start="121:30" pos:end="121:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:36"><expr pos:start="123:9" pos:end="123:35"><call pos:start="123:9" pos:end="123:35"><name pos:start="123:9" pos:end="123:29">build_isa_devices_aml</name><argument_list pos:start="123:30" pos:end="123:35">(<argument pos:start="123:31" pos:end="123:34"><expr pos:start="123:31" pos:end="123:34"><name pos:start="123:31" pos:end="123:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:33"><expr pos:start="125:9" pos:end="125:32"><call pos:start="125:9" pos:end="125:32"><name pos:start="125:9" pos:end="125:26">build_q35_pci0_int</name><argument_list pos:start="125:27" pos:end="125:32">(<argument pos:start="125:28" pos:end="125:31"><expr pos:start="125:28" pos:end="125:31"><name pos:start="125:28" pos:end="125:31">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="131:5" pos:end="147:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:33">(<expr pos:start="131:9" pos:end="131:32"><name pos:start="131:9" pos:end="131:32"><name pos:start="131:9" pos:end="131:12">pcmc</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:32">legacy_cpu_hotplug</name></name></expr>)</condition> <block pos:start="131:35" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:72">

        <expr_stmt pos:start="133:9" pos:end="133:72"><expr pos:start="133:9" pos:end="133:71"><call pos:start="133:9" pos:end="133:71"><name pos:start="133:9" pos:end="133:36">build_legacy_cpu_hotplug_aml</name><argument_list pos:start="133:37" pos:end="133:71">(<argument pos:start="133:38" pos:end="133:41"><expr pos:start="133:38" pos:end="133:41"><name pos:start="133:38" pos:end="133:41">dsdt</name></expr></argument>, <argument pos:start="133:44" pos:end="133:50"><expr pos:start="133:44" pos:end="133:50"><name pos:start="133:44" pos:end="133:50">machine</name></expr></argument>, <argument pos:start="133:53" pos:end="133:70"><expr pos:start="133:53" pos:end="133:70"><name pos:start="133:53" pos:end="133:70"><name pos:start="133:53" pos:end="133:54">pm</name><operator pos:start="133:55" pos:end="133:56">-&gt;</operator><name pos:start="133:57" pos:end="133:70">cpu_hp_io_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="135:7" pos:end="147:5">else <block pos:start="135:12" pos:end="147:5">{<block_content pos:start="137:9" pos:end="145:52">

        <decl_stmt pos:start="137:9" pos:end="141:10"><decl pos:start="137:9" pos:end="141:9"><type pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:26">CPUHotplugFeatures</name></type> <name pos:start="137:28" pos:end="137:31">opts</name> <init pos:start="137:33" pos:end="141:9">= <expr pos:start="137:35" pos:end="141:9"><block pos:start="137:35" pos:end="141:9">{

            <expr pos:start="139:13" pos:end="139:37"><operator pos:start="139:13" pos:end="139:13">.</operator><name pos:start="139:14" pos:end="139:30">apci_1_compatible</name> <operator pos:start="139:32" pos:end="139:32">=</operator> <name pos:start="139:34" pos:end="139:37">true</name></expr>, <expr pos:start="139:40" pos:end="139:62"><operator pos:start="139:40" pos:end="139:40">.</operator><name pos:start="139:41" pos:end="139:55">has_legacy_cphp</name> <operator pos:start="139:57" pos:end="139:57">=</operator> <name pos:start="139:59" pos:end="139:62">true</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="143:9" pos:end="145:52"><expr pos:start="143:9" pos:end="145:51"><call pos:start="143:9" pos:end="145:51"><name pos:start="143:9" pos:end="143:22">build_cpus_aml</name><argument_list pos:start="143:23" pos:end="145:51">(<argument pos:start="143:24" pos:end="143:27"><expr pos:start="143:24" pos:end="143:27"><name pos:start="143:24" pos:end="143:27">dsdt</name></expr></argument>, <argument pos:start="143:30" pos:end="143:36"><expr pos:start="143:30" pos:end="143:36"><name pos:start="143:30" pos:end="143:36">machine</name></expr></argument>, <argument pos:start="143:39" pos:end="143:42"><expr pos:start="143:39" pos:end="143:42"><name pos:start="143:39" pos:end="143:42">opts</name></expr></argument>, <argument pos:start="143:45" pos:end="143:62"><expr pos:start="143:45" pos:end="143:62"><name pos:start="143:45" pos:end="143:62"><name pos:start="143:45" pos:end="143:46">pm</name><operator pos:start="143:47" pos:end="143:48">-&gt;</operator><name pos:start="143:49" pos:end="143:62">cpu_hp_io_base</name></name></expr></argument>,

                       <argument pos:start="145:24" pos:end="145:35"><expr pos:start="145:24" pos:end="145:35"><literal type="string" pos:start="145:24" pos:end="145:35">"\\_SB.PCI0"</literal></expr></argument>, <argument pos:start="145:38" pos:end="145:50"><expr pos:start="145:38" pos:end="145:50"><literal type="string" pos:start="145:38" pos:end="145:50">"\\_GPE._E02"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="151:48"><expr pos:start="149:5" pos:end="151:47"><call pos:start="149:5" pos:end="151:47"><name pos:start="149:5" pos:end="149:28">build_memory_hotplug_aml</name><argument_list pos:start="149:29" pos:end="151:47">(<argument pos:start="149:30" pos:end="149:33"><expr pos:start="149:30" pos:end="149:33"><name pos:start="149:30" pos:end="149:33">dsdt</name></expr></argument>, <argument pos:start="149:36" pos:end="149:41"><expr pos:start="149:36" pos:end="149:41"><name pos:start="149:36" pos:end="149:41">nr_mem</name></expr></argument>, <argument pos:start="149:44" pos:end="149:61"><expr pos:start="149:44" pos:end="149:61"><name pos:start="149:44" pos:end="149:61"><name pos:start="149:44" pos:end="149:45">pm</name><operator pos:start="149:46" pos:end="149:47">-&gt;</operator><name pos:start="149:48" pos:end="149:61">mem_hp_io_base</name></name></expr></argument>,

                             <argument pos:start="151:30" pos:end="151:46"><expr pos:start="151:30" pos:end="151:46"><name pos:start="151:30" pos:end="151:46"><name pos:start="151:30" pos:end="151:31">pm</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:46">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:31"><expr pos:start="155:5" pos:end="155:30"><name pos:start="155:5" pos:end="155:9">scope</name> <operator pos:start="155:11" pos:end="155:11">=</operator>  <call pos:start="155:14" pos:end="155:30"><name pos:start="155:14" pos:end="155:22">aml_scope</name><argument_list pos:start="155:23" pos:end="155:30">(<argument pos:start="155:24" pos:end="155:29"><expr pos:start="155:24" pos:end="155:29"><literal type="string" pos:start="155:24" pos:end="155:29">"_GPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="157:5" pos:end="187:5">{<block_content pos:start="159:9" pos:end="185:34">

        <expr_stmt pos:start="159:9" pos:end="159:73"><expr pos:start="159:9" pos:end="159:72"><call pos:start="159:9" pos:end="159:72"><name pos:start="159:9" pos:end="159:18">aml_append</name><argument_list pos:start="159:19" pos:end="159:72">(<argument pos:start="159:20" pos:end="159:24"><expr pos:start="159:20" pos:end="159:24"><name pos:start="159:20" pos:end="159:24">scope</name></expr></argument>, <argument pos:start="159:27" pos:end="159:71"><expr pos:start="159:27" pos:end="159:71"><call pos:start="159:27" pos:end="159:71"><name pos:start="159:27" pos:end="159:39">aml_name_decl</name><argument_list pos:start="159:40" pos:end="159:71">(<argument pos:start="159:41" pos:end="159:46"><expr pos:start="159:41" pos:end="159:46"><literal type="string" pos:start="159:41" pos:end="159:46">"_HID"</literal></expr></argument>, <argument pos:start="159:49" pos:end="159:70"><expr pos:start="159:49" pos:end="159:70"><call pos:start="159:49" pos:end="159:70"><name pos:start="159:49" pos:end="159:58">aml_string</name><argument_list pos:start="159:59" pos:end="159:70">(<argument pos:start="159:60" pos:end="159:69"><expr pos:start="159:60" pos:end="159:69"><literal type="string" pos:start="159:60" pos:end="159:69">"ACPI0006"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="163:9" pos:end="177:9"><if pos:start="163:9" pos:end="177:9">if <condition pos:start="163:12" pos:end="163:27">(<expr pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:16">misc</name><operator pos:start="163:17" pos:end="163:18">-&gt;</operator><name pos:start="163:19" pos:end="163:26">is_piix4</name></name></expr>)</condition> <block pos:start="163:29" pos:end="177:9">{<block_content pos:start="165:13" pos:end="175:38">

            <expr_stmt pos:start="165:13" pos:end="165:62"><expr pos:start="165:13" pos:end="165:61"><name pos:start="165:13" pos:end="165:18">method</name> <operator pos:start="165:20" pos:end="165:20">=</operator> <call pos:start="165:22" pos:end="165:61"><name pos:start="165:22" pos:end="165:31">aml_method</name><argument_list pos:start="165:32" pos:end="165:61">(<argument pos:start="165:33" pos:end="165:38"><expr pos:start="165:33" pos:end="165:38"><literal type="string" pos:start="165:33" pos:end="165:38">"_E01"</literal></expr></argument>, <argument pos:start="165:41" pos:end="165:41"><expr pos:start="165:41" pos:end="165:41"><literal type="number" pos:start="165:41" pos:end="165:41">0</literal></expr></argument>, <argument pos:start="165:44" pos:end="165:60"><expr pos:start="165:44" pos:end="165:60"><name pos:start="165:44" pos:end="165:60">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="169:66"><expr pos:start="167:13" pos:end="169:65"><call pos:start="167:13" pos:end="169:65"><name pos:start="167:13" pos:end="167:22">aml_append</name><argument_list pos:start="167:23" pos:end="169:65">(<argument pos:start="167:24" pos:end="167:29"><expr pos:start="167:24" pos:end="167:29"><name pos:start="167:24" pos:end="167:29">method</name></expr></argument>,

                <argument pos:start="169:17" pos:end="169:64"><expr pos:start="169:17" pos:end="169:64"><call pos:start="169:17" pos:end="169:64"><name pos:start="169:17" pos:end="169:27">aml_acquire</name><argument_list pos:start="169:28" pos:end="169:64">(<argument pos:start="169:29" pos:end="169:55"><expr pos:start="169:29" pos:end="169:55"><call pos:start="169:29" pos:end="169:55"><name pos:start="169:29" pos:end="169:36">aml_name</name><argument_list pos:start="169:37" pos:end="169:55">(<argument pos:start="169:38" pos:end="169:54"><expr pos:start="169:38" pos:end="169:54"><literal type="string" pos:start="169:38" pos:end="169:54">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="169:58" pos:end="169:63"><expr pos:start="169:58" pos:end="169:63"><literal type="number" pos:start="169:58" pos:end="169:63">0xFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:61"><expr pos:start="171:13" pos:end="171:60"><call pos:start="171:13" pos:end="171:60"><name pos:start="171:13" pos:end="171:22">aml_append</name><argument_list pos:start="171:23" pos:end="171:60">(<argument pos:start="171:24" pos:end="171:29"><expr pos:start="171:24" pos:end="171:29"><name pos:start="171:24" pos:end="171:29">method</name></expr></argument>, <argument pos:start="171:32" pos:end="171:59"><expr pos:start="171:32" pos:end="171:59"><call pos:start="171:32" pos:end="171:59"><name pos:start="171:32" pos:end="171:40">aml_call0</name><argument_list pos:start="171:41" pos:end="171:59">(<argument pos:start="171:42" pos:end="171:58"><expr pos:start="171:42" pos:end="171:58"><literal type="string" pos:start="171:42" pos:end="171:58">"\\_SB.PCI0.PCNT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:73"><expr pos:start="173:13" pos:end="173:72"><call pos:start="173:13" pos:end="173:72"><name pos:start="173:13" pos:end="173:22">aml_append</name><argument_list pos:start="173:23" pos:end="173:72">(<argument pos:start="173:24" pos:end="173:29"><expr pos:start="173:24" pos:end="173:29"><name pos:start="173:24" pos:end="173:29">method</name></expr></argument>, <argument pos:start="173:32" pos:end="173:71"><expr pos:start="173:32" pos:end="173:71"><call pos:start="173:32" pos:end="173:71"><name pos:start="173:32" pos:end="173:42">aml_release</name><argument_list pos:start="173:43" pos:end="173:71">(<argument pos:start="173:44" pos:end="173:70"><expr pos:start="173:44" pos:end="173:70"><call pos:start="173:44" pos:end="173:70"><name pos:start="173:44" pos:end="173:51">aml_name</name><argument_list pos:start="173:52" pos:end="173:70">(<argument pos:start="173:53" pos:end="173:69"><expr pos:start="173:53" pos:end="173:69"><literal type="string" pos:start="173:53" pos:end="173:69">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:38"><expr pos:start="175:13" pos:end="175:37"><call pos:start="175:13" pos:end="175:37"><name pos:start="175:13" pos:end="175:22">aml_append</name><argument_list pos:start="175:23" pos:end="175:37">(<argument pos:start="175:24" pos:end="175:28"><expr pos:start="175:24" pos:end="175:28"><name pos:start="175:24" pos:end="175:28">scope</name></expr></argument>, <argument pos:start="175:31" pos:end="175:36"><expr pos:start="175:31" pos:end="175:36"><name pos:start="175:31" pos:end="175:36">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:58"><expr pos:start="181:9" pos:end="181:57"><name pos:start="181:9" pos:end="181:14">method</name> <operator pos:start="181:16" pos:end="181:16">=</operator> <call pos:start="181:18" pos:end="181:57"><name pos:start="181:18" pos:end="181:27">aml_method</name><argument_list pos:start="181:28" pos:end="181:57">(<argument pos:start="181:29" pos:end="181:34"><expr pos:start="181:29" pos:end="181:34"><literal type="string" pos:start="181:29" pos:end="181:34">"_E03"</literal></expr></argument>, <argument pos:start="181:37" pos:end="181:37"><expr pos:start="181:37" pos:end="181:37"><literal type="number" pos:start="181:37" pos:end="181:37">0</literal></expr></argument>, <argument pos:start="181:40" pos:end="181:56"><expr pos:start="181:40" pos:end="181:56"><name pos:start="181:40" pos:end="181:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:67"><expr pos:start="183:9" pos:end="183:66"><call pos:start="183:9" pos:end="183:66"><name pos:start="183:9" pos:end="183:18">aml_append</name><argument_list pos:start="183:19" pos:end="183:66">(<argument pos:start="183:20" pos:end="183:25"><expr pos:start="183:20" pos:end="183:25"><name pos:start="183:20" pos:end="183:25">method</name></expr></argument>, <argument pos:start="183:28" pos:end="183:65"><expr pos:start="183:28" pos:end="183:65"><call pos:start="183:28" pos:end="183:65"><name pos:start="183:28" pos:end="183:36">aml_call0</name><argument_list pos:start="183:37" pos:end="183:65">(<argument pos:start="183:38" pos:end="183:64"><expr pos:start="183:38" pos:end="183:64"><name pos:start="183:38" pos:end="183:64">MEMORY_HOTPLUG_HANDLER_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:34"><expr pos:start="185:9" pos:end="185:33"><call pos:start="185:9" pos:end="185:33"><name pos:start="185:9" pos:end="185:18">aml_append</name><argument_list pos:start="185:19" pos:end="185:33">(<argument pos:start="185:20" pos:end="185:24"><expr pos:start="185:20" pos:end="185:24"><name pos:start="185:20" pos:end="185:24">scope</name></expr></argument>, <argument pos:start="185:27" pos:end="185:32"><expr pos:start="185:27" pos:end="185:32"><name pos:start="185:27" pos:end="185:32">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="189:5" pos:end="189:28"><expr pos:start="189:5" pos:end="189:27"><call pos:start="189:5" pos:end="189:27"><name pos:start="189:5" pos:end="189:14">aml_append</name><argument_list pos:start="189:15" pos:end="189:27">(<argument pos:start="189:16" pos:end="189:19"><expr pos:start="189:16" pos:end="189:19"><name pos:start="189:16" pos:end="189:19">dsdt</name></expr></argument>, <argument pos:start="189:22" pos:end="189:26"><expr pos:start="189:22" pos:end="189:26"><name pos:start="189:22" pos:end="189:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:35"><expr pos:start="193:5" pos:end="193:34"><name pos:start="193:5" pos:end="193:7">bus</name> <operator pos:start="193:9" pos:end="193:9">=</operator> <call pos:start="193:11" pos:end="193:29"><name pos:start="193:11" pos:end="193:20">PC_MACHINE</name><argument_list pos:start="193:21" pos:end="193:29">(<argument pos:start="193:22" pos:end="193:28"><expr pos:start="193:22" pos:end="193:28"><name pos:start="193:22" pos:end="193:28">machine</name></expr></argument>)</argument_list></call><operator pos:start="193:30" pos:end="193:31">-&gt;</operator><name pos:start="193:32" pos:end="193:34">bus</name></expr>;</expr_stmt>

    <if_stmt pos:start="195:5" pos:end="257:5"><if pos:start="195:5" pos:end="257:5">if <condition pos:start="195:8" pos:end="195:12">(<expr pos:start="195:9" pos:end="195:11"><name pos:start="195:9" pos:end="195:11">bus</name></expr>)</condition> <block pos:start="195:14" pos:end="257:5">{<block_content pos:start="197:9" pos:end="255:9">

        <macro pos:start="197:9" pos:end="197:48"><name pos:start="197:9" pos:end="197:21">QLIST_FOREACH</name><argument_list pos:start="197:22" pos:end="197:48">(<argument pos:start="197:23" pos:end="197:25">bus</argument>, <argument pos:start="197:28" pos:end="197:38">&amp;bus-&gt;child</argument>, <argument pos:start="197:41" pos:end="197:47">sibling</argument>)</argument_list></macro> <block pos:start="197:50" pos:end="255:9">{<block_content pos:start="199:13" pos:end="253:36">

            <decl_stmt pos:start="199:13" pos:end="199:47"><decl pos:start="199:13" pos:end="199:46"><type pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:19">uint8_t</name></type> <name pos:start="199:21" pos:end="199:27">bus_num</name> <init pos:start="199:29" pos:end="199:46">= <expr pos:start="199:31" pos:end="199:46"><call pos:start="199:31" pos:end="199:46"><name pos:start="199:31" pos:end="199:41">pci_bus_num</name><argument_list pos:start="199:42" pos:end="199:46">(<argument pos:start="199:43" pos:end="199:45"><expr pos:start="199:43" pos:end="199:45"><name pos:start="199:43" pos:end="199:45">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="201:13" pos:end="201:55"><decl pos:start="201:13" pos:end="201:54"><type pos:start="201:13" pos:end="201:19"><name pos:start="201:13" pos:end="201:19">uint8_t</name></type> <name pos:start="201:21" pos:end="201:29">numa_node</name> <init pos:start="201:31" pos:end="201:54">= <expr pos:start="201:33" pos:end="201:54"><call pos:start="201:33" pos:end="201:54"><name pos:start="201:33" pos:end="201:49">pci_bus_numa_node</name><argument_list pos:start="201:50" pos:end="201:54">(<argument pos:start="201:51" pos:end="201:53"><expr pos:start="201:51" pos:end="201:53"><name pos:start="201:51" pos:end="201:53">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="205:13" pos:end="205:51">/* look only for expander root buses */</comment>

            <if_stmt pos:start="207:13" pos:end="211:13"><if pos:start="207:13" pos:end="211:13">if <condition pos:start="207:16" pos:end="207:38">(<expr pos:start="207:17" pos:end="207:37"><operator pos:start="207:17" pos:end="207:17">!</operator><call pos:start="207:18" pos:end="207:37"><name pos:start="207:18" pos:end="207:32">pci_bus_is_root</name><argument_list pos:start="207:33" pos:end="207:37">(<argument pos:start="207:34" pos:end="207:36"><expr pos:start="207:34" pos:end="207:36"><name pos:start="207:34" pos:end="207:36">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="207:40" pos:end="211:13">{<block_content pos:start="209:17" pos:end="209:25">

                <continue pos:start="209:17" pos:end="209:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="215:13" pos:end="219:13"><if pos:start="215:13" pos:end="219:13">if <condition pos:start="215:16" pos:end="215:41">(<expr pos:start="215:17" pos:end="215:40"><name pos:start="215:17" pos:end="215:23">bus_num</name> <operator pos:start="215:25" pos:end="215:25">&lt;</operator> <name pos:start="215:27" pos:end="215:40">root_bus_limit</name></expr>)</condition> <block pos:start="215:43" pos:end="219:13">{<block_content pos:start="217:17" pos:end="217:45">

                <expr_stmt pos:start="217:17" pos:end="217:45"><expr pos:start="217:17" pos:end="217:44"><name pos:start="217:17" pos:end="217:30">root_bus_limit</name> <operator pos:start="217:32" pos:end="217:32">=</operator> <name pos:start="217:34" pos:end="217:40">bus_num</name> <operator pos:start="217:42" pos:end="217:42">-</operator> <literal type="number" pos:start="217:44" pos:end="217:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="223:13" pos:end="223:39"><expr pos:start="223:13" pos:end="223:38"><name pos:start="223:13" pos:end="223:17">scope</name> <operator pos:start="223:19" pos:end="223:19">=</operator> <call pos:start="223:21" pos:end="223:38"><name pos:start="223:21" pos:end="223:29">aml_scope</name><argument_list pos:start="223:30" pos:end="223:38">(<argument pos:start="223:31" pos:end="223:37"><expr pos:start="223:31" pos:end="223:37"><literal type="string" pos:start="223:31" pos:end="223:37">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:49"><expr pos:start="225:13" pos:end="225:48"><name pos:start="225:13" pos:end="225:15">dev</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <call pos:start="225:19" pos:end="225:48"><name pos:start="225:19" pos:end="225:28">aml_device</name><argument_list pos:start="225:29" pos:end="225:48">(<argument pos:start="225:30" pos:end="225:38"><expr pos:start="225:30" pos:end="225:38"><literal type="string" pos:start="225:30" pos:end="225:38">"PC%.02X"</literal></expr></argument>, <argument pos:start="225:41" pos:end="225:47"><expr pos:start="225:41" pos:end="225:47"><name pos:start="225:41" pos:end="225:47">bus_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:69"><expr pos:start="227:13" pos:end="227:68"><call pos:start="227:13" pos:end="227:68"><name pos:start="227:13" pos:end="227:22">aml_append</name><argument_list pos:start="227:23" pos:end="227:68">(<argument pos:start="227:24" pos:end="227:26"><expr pos:start="227:24" pos:end="227:26"><name pos:start="227:24" pos:end="227:26">dev</name></expr></argument>, <argument pos:start="227:29" pos:end="227:67"><expr pos:start="227:29" pos:end="227:67"><call pos:start="227:29" pos:end="227:67"><name pos:start="227:29" pos:end="227:41">aml_name_decl</name><argument_list pos:start="227:42" pos:end="227:67">(<argument pos:start="227:43" pos:end="227:48"><expr pos:start="227:43" pos:end="227:48"><literal type="string" pos:start="227:43" pos:end="227:48">"_UID"</literal></expr></argument>, <argument pos:start="227:51" pos:end="227:66"><expr pos:start="227:51" pos:end="227:66"><call pos:start="227:51" pos:end="227:66"><name pos:start="227:51" pos:end="227:57">aml_int</name><argument_list pos:start="227:58" pos:end="227:66">(<argument pos:start="227:59" pos:end="227:65"><expr pos:start="227:59" pos:end="227:65"><name pos:start="227:59" pos:end="227:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:74"><expr pos:start="229:13" pos:end="229:73"><call pos:start="229:13" pos:end="229:73"><name pos:start="229:13" pos:end="229:22">aml_append</name><argument_list pos:start="229:23" pos:end="229:73">(<argument pos:start="229:24" pos:end="229:26"><expr pos:start="229:24" pos:end="229:26"><name pos:start="229:24" pos:end="229:26">dev</name></expr></argument>, <argument pos:start="229:29" pos:end="229:72"><expr pos:start="229:29" pos:end="229:72"><call pos:start="229:29" pos:end="229:72"><name pos:start="229:29" pos:end="229:41">aml_name_decl</name><argument_list pos:start="229:42" pos:end="229:72">(<argument pos:start="229:43" pos:end="229:48"><expr pos:start="229:43" pos:end="229:48"><literal type="string" pos:start="229:43" pos:end="229:48">"_HID"</literal></expr></argument>, <argument pos:start="229:51" pos:end="229:71"><expr pos:start="229:51" pos:end="229:71"><call pos:start="229:51" pos:end="229:71"><name pos:start="229:51" pos:end="229:60">aml_eisaid</name><argument_list pos:start="229:61" pos:end="229:71">(<argument pos:start="229:62" pos:end="229:70"><expr pos:start="229:62" pos:end="229:70"><literal type="string" pos:start="229:62" pos:end="229:70">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:69"><expr pos:start="231:13" pos:end="231:68"><call pos:start="231:13" pos:end="231:68"><name pos:start="231:13" pos:end="231:22">aml_append</name><argument_list pos:start="231:23" pos:end="231:68">(<argument pos:start="231:24" pos:end="231:26"><expr pos:start="231:24" pos:end="231:26"><name pos:start="231:24" pos:end="231:26">dev</name></expr></argument>, <argument pos:start="231:29" pos:end="231:67"><expr pos:start="231:29" pos:end="231:67"><call pos:start="231:29" pos:end="231:67"><name pos:start="231:29" pos:end="231:41">aml_name_decl</name><argument_list pos:start="231:42" pos:end="231:67">(<argument pos:start="231:43" pos:end="231:48"><expr pos:start="231:43" pos:end="231:48"><literal type="string" pos:start="231:43" pos:end="231:48">"_BBN"</literal></expr></argument>, <argument pos:start="231:51" pos:end="231:66"><expr pos:start="231:51" pos:end="231:66"><call pos:start="231:51" pos:end="231:66"><name pos:start="231:51" pos:end="231:57">aml_int</name><argument_list pos:start="231:58" pos:end="231:66">(<argument pos:start="231:59" pos:end="231:65"><expr pos:start="231:59" pos:end="231:65"><name pos:start="231:59" pos:end="231:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="235:13" pos:end="239:13"><if pos:start="235:13" pos:end="239:13">if <condition pos:start="235:16" pos:end="235:50">(<expr pos:start="235:17" pos:end="235:49"><name pos:start="235:17" pos:end="235:25">numa_node</name> <operator pos:start="235:27" pos:end="235:28">!=</operator> <name pos:start="235:30" pos:end="235:49">NUMA_NODE_UNASSIGNED</name></expr>)</condition> <block pos:start="235:52" pos:end="239:13">{<block_content pos:start="237:17" pos:end="237:75">

                <expr_stmt pos:start="237:17" pos:end="237:75"><expr pos:start="237:17" pos:end="237:74"><call pos:start="237:17" pos:end="237:74"><name pos:start="237:17" pos:end="237:26">aml_append</name><argument_list pos:start="237:27" pos:end="237:74">(<argument pos:start="237:28" pos:end="237:30"><expr pos:start="237:28" pos:end="237:30"><name pos:start="237:28" pos:end="237:30">dev</name></expr></argument>, <argument pos:start="237:33" pos:end="237:73"><expr pos:start="237:33" pos:end="237:73"><call pos:start="237:33" pos:end="237:73"><name pos:start="237:33" pos:end="237:45">aml_name_decl</name><argument_list pos:start="237:46" pos:end="237:73">(<argument pos:start="237:47" pos:end="237:52"><expr pos:start="237:47" pos:end="237:52"><literal type="string" pos:start="237:47" pos:end="237:52">"_PXM"</literal></expr></argument>, <argument pos:start="237:55" pos:end="237:72"><expr pos:start="237:55" pos:end="237:72"><call pos:start="237:55" pos:end="237:72"><name pos:start="237:55" pos:end="237:61">aml_int</name><argument_list pos:start="237:62" pos:end="237:72">(<argument pos:start="237:63" pos:end="237:71"><expr pos:start="237:63" pos:end="237:71"><name pos:start="237:63" pos:end="237:71">numa_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="243:13" pos:end="243:46"><expr pos:start="243:13" pos:end="243:45"><call pos:start="243:13" pos:end="243:45"><name pos:start="243:13" pos:end="243:22">aml_append</name><argument_list pos:start="243:23" pos:end="243:45">(<argument pos:start="243:24" pos:end="243:26"><expr pos:start="243:24" pos:end="243:26"><name pos:start="243:24" pos:end="243:26">dev</name></expr></argument>, <argument pos:start="243:29" pos:end="243:44"><expr pos:start="243:29" pos:end="243:44"><call pos:start="243:29" pos:end="243:44"><name pos:start="243:29" pos:end="243:37">build_prt</name><argument_list pos:start="243:38" pos:end="243:44">(<argument pos:start="243:39" pos:end="243:43"><expr pos:start="243:39" pos:end="243:43"><name pos:start="243:39" pos:end="243:43">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="247:51"><expr pos:start="245:13" pos:end="247:50"><name pos:start="245:13" pos:end="245:15">crs</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <call pos:start="245:19" pos:end="247:50"><name pos:start="245:19" pos:end="245:27">build_crs</name><argument_list pos:start="245:28" pos:end="247:50">(<argument pos:start="245:29" pos:end="245:61"><expr pos:start="245:29" pos:end="245:61"><call pos:start="245:29" pos:end="245:61"><name pos:start="245:29" pos:end="245:43">PCI_HOST_BRIDGE</name><argument_list pos:start="245:44" pos:end="245:61">(<argument pos:start="245:45" pos:end="245:60"><expr pos:start="245:45" pos:end="245:60"><call pos:start="245:45" pos:end="245:52"><name pos:start="245:45" pos:end="245:47">BUS</name><argument_list pos:start="245:48" pos:end="245:52">(<argument pos:start="245:49" pos:end="245:51"><expr pos:start="245:49" pos:end="245:51"><name pos:start="245:49" pos:end="245:51">bus</name></expr></argument>)</argument_list></call><operator pos:start="245:53" pos:end="245:54">-&gt;</operator><name pos:start="245:55" pos:end="245:60">parent</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="247:29" pos:end="247:37"><expr pos:start="247:29" pos:end="247:37"><name pos:start="247:29" pos:end="247:37">io_ranges</name></expr></argument>, <argument pos:start="247:40" pos:end="247:49"><expr pos:start="247:40" pos:end="247:49"><name pos:start="247:40" pos:end="247:49">mem_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:56"><expr pos:start="249:13" pos:end="249:55"><call pos:start="249:13" pos:end="249:55"><name pos:start="249:13" pos:end="249:22">aml_append</name><argument_list pos:start="249:23" pos:end="249:55">(<argument pos:start="249:24" pos:end="249:26"><expr pos:start="249:24" pos:end="249:26"><name pos:start="249:24" pos:end="249:26">dev</name></expr></argument>, <argument pos:start="249:29" pos:end="249:54"><expr pos:start="249:29" pos:end="249:54"><call pos:start="249:29" pos:end="249:54"><name pos:start="249:29" pos:end="249:41">aml_name_decl</name><argument_list pos:start="249:42" pos:end="249:54">(<argument pos:start="249:43" pos:end="249:48"><expr pos:start="249:43" pos:end="249:48"><literal type="string" pos:start="249:43" pos:end="249:48">"_CRS"</literal></expr></argument>, <argument pos:start="249:51" pos:end="249:53"><expr pos:start="249:51" pos:end="249:53"><name pos:start="249:51" pos:end="249:53">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:35"><expr pos:start="251:13" pos:end="251:34"><call pos:start="251:13" pos:end="251:34"><name pos:start="251:13" pos:end="251:22">aml_append</name><argument_list pos:start="251:23" pos:end="251:34">(<argument pos:start="251:24" pos:end="251:28"><expr pos:start="251:24" pos:end="251:28"><name pos:start="251:24" pos:end="251:28">scope</name></expr></argument>, <argument pos:start="251:31" pos:end="251:33"><expr pos:start="251:31" pos:end="251:33"><name pos:start="251:31" pos:end="251:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:36"><expr pos:start="253:13" pos:end="253:35"><call pos:start="253:13" pos:end="253:35"><name pos:start="253:13" pos:end="253:22">aml_append</name><argument_list pos:start="253:23" pos:end="253:35">(<argument pos:start="253:24" pos:end="253:27"><expr pos:start="253:24" pos:end="253:27"><name pos:start="253:24" pos:end="253:27">dsdt</name></expr></argument>, <argument pos:start="253:30" pos:end="253:34"><expr pos:start="253:30" pos:end="253:34"><name pos:start="253:30" pos:end="253:34">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:36"><expr pos:start="261:5" pos:end="261:35"><name pos:start="261:5" pos:end="261:9">scope</name> <operator pos:start="261:11" pos:end="261:11">=</operator> <call pos:start="261:13" pos:end="261:35"><name pos:start="261:13" pos:end="261:21">aml_scope</name><argument_list pos:start="261:22" pos:end="261:35">(<argument pos:start="261:23" pos:end="261:34"><expr pos:start="261:23" pos:end="261:34"><literal type="string" pos:start="261:23" pos:end="261:34">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="263:5" pos:end="263:25">/* build PCI0._CRS */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:34"><expr pos:start="265:5" pos:end="265:33"><name pos:start="265:5" pos:end="265:7">crs</name> <operator pos:start="265:9" pos:end="265:9">=</operator> <call pos:start="265:11" pos:end="265:33"><name pos:start="265:11" pos:end="265:31">aml_resource_template</name><argument_list pos:start="265:32" pos:end="265:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="273:57"><expr pos:start="267:5" pos:end="273:56"><call pos:start="267:5" pos:end="273:56"><name pos:start="267:5" pos:end="267:14">aml_append</name><argument_list pos:start="267:15" pos:end="273:56">(<argument pos:start="267:16" pos:end="267:18"><expr pos:start="267:16" pos:end="267:18"><name pos:start="267:16" pos:end="267:18">crs</name></expr></argument>,

        <argument pos:start="269:9" pos:end="273:55"><expr pos:start="269:9" pos:end="273:55"><call pos:start="269:9" pos:end="273:55"><name pos:start="269:9" pos:end="269:27">aml_word_bus_number</name><argument_list pos:start="269:28" pos:end="273:55">(<argument pos:start="269:29" pos:end="269:41"><expr pos:start="269:29" pos:end="269:41"><name pos:start="269:29" pos:end="269:41">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="269:44" pos:end="269:56"><expr pos:start="269:44" pos:end="269:56"><name pos:start="269:44" pos:end="269:56">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="269:59" pos:end="269:72"><expr pos:start="269:59" pos:end="269:72"><name pos:start="269:59" pos:end="269:72">AML_POS_DECODE</name></expr></argument>,

                            <argument pos:start="271:29" pos:end="271:34"><expr pos:start="271:29" pos:end="271:34"><literal type="number" pos:start="271:29" pos:end="271:34">0x0000</literal></expr></argument>, <argument pos:start="271:37" pos:end="271:39"><expr pos:start="271:37" pos:end="271:39"><literal type="number" pos:start="271:37" pos:end="271:39">0x0</literal></expr></argument>, <argument pos:start="271:42" pos:end="271:55"><expr pos:start="271:42" pos:end="271:55"><name pos:start="271:42" pos:end="271:55">root_bus_limit</name></expr></argument>,

                            <argument pos:start="273:29" pos:end="273:34"><expr pos:start="273:29" pos:end="273:34"><literal type="number" pos:start="273:29" pos:end="273:34">0x0000</literal></expr></argument>, <argument pos:start="273:37" pos:end="273:54"><expr pos:start="273:37" pos:end="273:54"><name pos:start="273:37" pos:end="273:50">root_bus_limit</name> <operator pos:start="273:52" pos:end="273:52">+</operator> <literal type="number" pos:start="273:54" pos:end="273:54">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:70"><expr pos:start="275:5" pos:end="275:69"><call pos:start="275:5" pos:end="275:69"><name pos:start="275:5" pos:end="275:14">aml_append</name><argument_list pos:start="275:15" pos:end="275:69">(<argument pos:start="275:16" pos:end="275:18"><expr pos:start="275:16" pos:end="275:18"><name pos:start="275:16" pos:end="275:18">crs</name></expr></argument>, <argument pos:start="275:21" pos:end="275:68"><expr pos:start="275:21" pos:end="275:68"><call pos:start="275:21" pos:end="275:68"><name pos:start="275:21" pos:end="275:26">aml_io</name><argument_list pos:start="275:27" pos:end="275:68">(<argument pos:start="275:28" pos:end="275:39"><expr pos:start="275:28" pos:end="275:39"><name pos:start="275:28" pos:end="275:39">AML_DECODE16</name></expr></argument>, <argument pos:start="275:42" pos:end="275:47"><expr pos:start="275:42" pos:end="275:47"><literal type="number" pos:start="275:42" pos:end="275:47">0x0CF8</literal></expr></argument>, <argument pos:start="275:50" pos:end="275:55"><expr pos:start="275:50" pos:end="275:55"><literal type="number" pos:start="275:50" pos:end="275:55">0x0CF8</literal></expr></argument>, <argument pos:start="275:58" pos:end="275:61"><expr pos:start="275:58" pos:end="275:61"><literal type="number" pos:start="275:58" pos:end="275:61">0x01</literal></expr></argument>, <argument pos:start="275:64" pos:end="275:67"><expr pos:start="275:64" pos:end="275:67"><literal type="number" pos:start="275:64" pos:end="275:67">0x08</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="279:5" pos:end="285:61"><expr pos:start="279:5" pos:end="285:60"><call pos:start="279:5" pos:end="285:60"><name pos:start="279:5" pos:end="279:14">aml_append</name><argument_list pos:start="279:15" pos:end="285:60">(<argument pos:start="279:16" pos:end="279:18"><expr pos:start="279:16" pos:end="279:18"><name pos:start="279:16" pos:end="279:18">crs</name></expr></argument>,

        <argument pos:start="281:9" pos:end="285:59"><expr pos:start="281:9" pos:end="285:59"><call pos:start="281:9" pos:end="285:59"><name pos:start="281:9" pos:end="281:19">aml_word_io</name><argument_list pos:start="281:20" pos:end="285:59">(<argument pos:start="281:21" pos:end="281:33"><expr pos:start="281:21" pos:end="281:33"><name pos:start="281:21" pos:end="281:33">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="281:36" pos:end="281:48"><expr pos:start="281:36" pos:end="281:48"><name pos:start="281:36" pos:end="281:48">AML_MAX_FIXED</name></expr></argument>,

                    <argument pos:start="283:21" pos:end="283:34"><expr pos:start="283:21" pos:end="283:34"><name pos:start="283:21" pos:end="283:34">AML_POS_DECODE</name></expr></argument>, <argument pos:start="283:37" pos:end="283:52"><expr pos:start="283:37" pos:end="283:52"><name pos:start="283:37" pos:end="283:52">AML_ENTIRE_RANGE</name></expr></argument>,

                    <argument pos:start="285:21" pos:end="285:26"><expr pos:start="285:21" pos:end="285:26"><literal type="number" pos:start="285:21" pos:end="285:26">0x0000</literal></expr></argument>, <argument pos:start="285:29" pos:end="285:34"><expr pos:start="285:29" pos:end="285:34"><literal type="number" pos:start="285:29" pos:end="285:34">0x0000</literal></expr></argument>, <argument pos:start="285:37" pos:end="285:42"><expr pos:start="285:37" pos:end="285:42"><literal type="number" pos:start="285:37" pos:end="285:42">0x0CF7</literal></expr></argument>, <argument pos:start="285:45" pos:end="285:50"><expr pos:start="285:45" pos:end="285:50"><literal type="number" pos:start="285:45" pos:end="285:50">0x0000</literal></expr></argument>, <argument pos:start="285:53" pos:end="285:58"><expr pos:start="285:53" pos:end="285:58"><literal type="number" pos:start="285:53" pos:end="285:58">0x0CF8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="289:5" pos:end="289:60"><expr pos:start="289:5" pos:end="289:59"><call pos:start="289:5" pos:end="289:59"><name pos:start="289:5" pos:end="289:32">crs_replace_with_free_ranges</name><argument_list pos:start="289:33" pos:end="289:59">(<argument pos:start="289:34" pos:end="289:42"><expr pos:start="289:34" pos:end="289:42"><name pos:start="289:34" pos:end="289:42">io_ranges</name></expr></argument>, <argument pos:start="289:45" pos:end="289:50"><expr pos:start="289:45" pos:end="289:50"><literal type="number" pos:start="289:45" pos:end="289:50">0x0D00</literal></expr></argument>, <argument pos:start="289:53" pos:end="289:58"><expr pos:start="289:53" pos:end="289:58"><literal type="number" pos:start="289:53" pos:end="289:58">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="291:5" pos:end="305:5">for <control pos:start="291:9" pos:end="291:40">(<init pos:start="291:10" pos:end="291:15"><expr pos:start="291:10" pos:end="291:14"><name pos:start="291:10" pos:end="291:10">i</name> <operator pos:start="291:12" pos:end="291:12">=</operator> <literal type="number" pos:start="291:14" pos:end="291:14">0</literal></expr>;</init> <condition pos:start="291:17" pos:end="291:35"><expr pos:start="291:17" pos:end="291:34"><name pos:start="291:17" pos:end="291:17">i</name> <operator pos:start="291:19" pos:end="291:19">&lt;</operator> <name pos:start="291:21" pos:end="291:34"><name pos:start="291:21" pos:end="291:29">io_ranges</name><operator pos:start="291:30" pos:end="291:31">-&gt;</operator><name pos:start="291:32" pos:end="291:34">len</name></name></expr>;</condition> <incr pos:start="291:37" pos:end="291:39"><expr pos:start="291:37" pos:end="291:39"><name pos:start="291:37" pos:end="291:37">i</name><operator pos:start="291:38" pos:end="291:39">++</operator></expr></incr>)</control> <block pos:start="291:42" pos:end="305:5">{<block_content pos:start="293:9" pos:end="303:65">

        <expr_stmt pos:start="293:9" pos:end="293:48"><expr pos:start="293:9" pos:end="293:47"><name pos:start="293:9" pos:end="293:13">entry</name> <operator pos:start="293:15" pos:end="293:15">=</operator> <call pos:start="293:17" pos:end="293:47"><name pos:start="293:17" pos:end="293:33">g_ptr_array_index</name><argument_list pos:start="293:34" pos:end="293:47">(<argument pos:start="293:35" pos:end="293:43"><expr pos:start="293:35" pos:end="293:43"><name pos:start="293:35" pos:end="293:43">io_ranges</name></expr></argument>, <argument pos:start="293:46" pos:end="293:46"><expr pos:start="293:46" pos:end="293:46"><name pos:start="293:46" pos:end="293:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="303:65"><expr pos:start="295:9" pos:end="303:64"><call pos:start="295:9" pos:end="303:64"><name pos:start="295:9" pos:end="295:18">aml_append</name><argument_list pos:start="295:19" pos:end="303:64">(<argument pos:start="295:20" pos:end="295:22"><expr pos:start="295:20" pos:end="295:22"><name pos:start="295:20" pos:end="295:22">crs</name></expr></argument>,

            <argument pos:start="297:13" pos:end="303:63"><expr pos:start="297:13" pos:end="303:63"><call pos:start="297:13" pos:end="303:63"><name pos:start="297:13" pos:end="297:23">aml_word_io</name><argument_list pos:start="297:24" pos:end="303:63">(<argument pos:start="297:25" pos:end="297:37"><expr pos:start="297:25" pos:end="297:37"><name pos:start="297:25" pos:end="297:37">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="297:40" pos:end="297:52"><expr pos:start="297:40" pos:end="297:52"><name pos:start="297:40" pos:end="297:52">AML_MAX_FIXED</name></expr></argument>,

                        <argument pos:start="299:25" pos:end="299:38"><expr pos:start="299:25" pos:end="299:38"><name pos:start="299:25" pos:end="299:38">AML_POS_DECODE</name></expr></argument>, <argument pos:start="299:41" pos:end="299:56"><expr pos:start="299:41" pos:end="299:56"><name pos:start="299:41" pos:end="299:56">AML_ENTIRE_RANGE</name></expr></argument>,

                        <argument pos:start="301:25" pos:end="301:30"><expr pos:start="301:25" pos:end="301:30"><literal type="number" pos:start="301:25" pos:end="301:30">0x0000</literal></expr></argument>, <argument pos:start="301:33" pos:end="301:43"><expr pos:start="301:33" pos:end="301:43"><name pos:start="301:33" pos:end="301:43"><name pos:start="301:33" pos:end="301:37">entry</name><operator pos:start="301:38" pos:end="301:39">-&gt;</operator><name pos:start="301:40" pos:end="301:43">base</name></name></expr></argument>, <argument pos:start="301:46" pos:end="301:57"><expr pos:start="301:46" pos:end="301:57"><name pos:start="301:46" pos:end="301:57"><name pos:start="301:46" pos:end="301:50">entry</name><operator pos:start="301:51" pos:end="301:52">-&gt;</operator><name pos:start="301:53" pos:end="301:57">limit</name></name></expr></argument>,

                        <argument pos:start="303:25" pos:end="303:30"><expr pos:start="303:25" pos:end="303:30"><literal type="number" pos:start="303:25" pos:end="303:30">0x0000</literal></expr></argument>, <argument pos:start="303:33" pos:end="303:62"><expr pos:start="303:33" pos:end="303:62"><name pos:start="303:33" pos:end="303:44"><name pos:start="303:33" pos:end="303:37">entry</name><operator pos:start="303:38" pos:end="303:39">-&gt;</operator><name pos:start="303:40" pos:end="303:44">limit</name></name> <operator pos:start="303:46" pos:end="303:46">-</operator> <name pos:start="303:48" pos:end="303:58"><name pos:start="303:48" pos:end="303:52">entry</name><operator pos:start="303:53" pos:end="303:54">-&gt;</operator><name pos:start="303:55" pos:end="303:58">base</name></name> <operator pos:start="303:60" pos:end="303:60">+</operator> <literal type="number" pos:start="303:62" pos:end="303:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="309:5" pos:end="315:68"><expr pos:start="309:5" pos:end="315:67"><call pos:start="309:5" pos:end="315:67"><name pos:start="309:5" pos:end="309:14">aml_append</name><argument_list pos:start="309:15" pos:end="315:67">(<argument pos:start="309:16" pos:end="309:18"><expr pos:start="309:16" pos:end="309:18"><name pos:start="309:16" pos:end="309:18">crs</name></expr></argument>,

        <argument pos:start="311:9" pos:end="315:66"><expr pos:start="311:9" pos:end="315:66"><call pos:start="311:9" pos:end="315:66"><name pos:start="311:9" pos:end="311:24">aml_dword_memory</name><argument_list pos:start="311:25" pos:end="315:66">(<argument pos:start="311:26" pos:end="311:39"><expr pos:start="311:26" pos:end="311:39"><name pos:start="311:26" pos:end="311:39">AML_POS_DECODE</name></expr></argument>, <argument pos:start="311:42" pos:end="311:54"><expr pos:start="311:42" pos:end="311:54"><name pos:start="311:42" pos:end="311:54">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="311:57" pos:end="311:69"><expr pos:start="311:57" pos:end="311:69"><name pos:start="311:57" pos:end="311:69">AML_MAX_FIXED</name></expr></argument>,

                         <argument pos:start="313:26" pos:end="313:38"><expr pos:start="313:26" pos:end="313:38"><name pos:start="313:26" pos:end="313:38">AML_CACHEABLE</name></expr></argument>, <argument pos:start="313:41" pos:end="313:54"><expr pos:start="313:41" pos:end="313:54"><name pos:start="313:41" pos:end="313:54">AML_READ_WRITE</name></expr></argument>,

                         <argument pos:start="315:26" pos:end="315:26"><expr pos:start="315:26" pos:end="315:26"><literal type="number" pos:start="315:26" pos:end="315:26">0</literal></expr></argument>, <argument pos:start="315:29" pos:end="315:38"><expr pos:start="315:29" pos:end="315:38"><literal type="number" pos:start="315:29" pos:end="315:38">0x000A0000</literal></expr></argument>, <argument pos:start="315:41" pos:end="315:50"><expr pos:start="315:41" pos:end="315:50"><literal type="number" pos:start="315:41" pos:end="315:50">0x000BFFFF</literal></expr></argument>, <argument pos:start="315:53" pos:end="315:53"><expr pos:start="315:53" pos:end="315:53"><literal type="number" pos:start="315:53" pos:end="315:53">0</literal></expr></argument>, <argument pos:start="315:56" pos:end="315:65"><expr pos:start="315:56" pos:end="315:65"><literal type="number" pos:start="315:56" pos:end="315:65">0x00020000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="319:5" pos:end="321:69"><expr pos:start="319:5" pos:end="321:68"><call pos:start="319:5" pos:end="321:68"><name pos:start="319:5" pos:end="319:32">crs_replace_with_free_ranges</name><argument_list pos:start="319:33" pos:end="321:68">(<argument pos:start="319:34" pos:end="319:43"><expr pos:start="319:34" pos:end="319:43"><name pos:start="319:34" pos:end="319:43">mem_ranges</name></expr></argument>,

                                 <argument pos:start="321:34" pos:end="321:48"><expr pos:start="321:34" pos:end="321:48"><name pos:start="321:34" pos:end="321:48"><name pos:start="321:34" pos:end="321:41">pci_hole</name><operator pos:start="321:42" pos:end="321:43">-&gt;</operator><name pos:start="321:44" pos:end="321:48">begin</name></name></expr></argument>, <argument pos:start="321:51" pos:end="321:67"><expr pos:start="321:51" pos:end="321:67"><name pos:start="321:51" pos:end="321:63"><name pos:start="321:51" pos:end="321:58">pci_hole</name><operator pos:start="321:59" pos:end="321:60">-&gt;</operator><name pos:start="321:61" pos:end="321:63">end</name></name> <operator pos:start="321:65" pos:end="321:65">-</operator> <literal type="number" pos:start="321:67" pos:end="321:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="323:5" pos:end="337:5">for <control pos:start="323:9" pos:end="323:41">(<init pos:start="323:10" pos:end="323:15"><expr pos:start="323:10" pos:end="323:14"><name pos:start="323:10" pos:end="323:10">i</name> <operator pos:start="323:12" pos:end="323:12">=</operator> <literal type="number" pos:start="323:14" pos:end="323:14">0</literal></expr>;</init> <condition pos:start="323:17" pos:end="323:36"><expr pos:start="323:17" pos:end="323:35"><name pos:start="323:17" pos:end="323:17">i</name> <operator pos:start="323:19" pos:end="323:19">&lt;</operator> <name pos:start="323:21" pos:end="323:35"><name pos:start="323:21" pos:end="323:30">mem_ranges</name><operator pos:start="323:31" pos:end="323:32">-&gt;</operator><name pos:start="323:33" pos:end="323:35">len</name></name></expr>;</condition> <incr pos:start="323:38" pos:end="323:40"><expr pos:start="323:38" pos:end="323:40"><name pos:start="323:38" pos:end="323:38">i</name><operator pos:start="323:39" pos:end="323:40">++</operator></expr></incr>)</control> <block pos:start="323:43" pos:end="337:5">{<block_content pos:start="325:9" pos:end="335:65">

        <expr_stmt pos:start="325:9" pos:end="325:49"><expr pos:start="325:9" pos:end="325:48"><name pos:start="325:9" pos:end="325:13">entry</name> <operator pos:start="325:15" pos:end="325:15">=</operator> <call pos:start="325:17" pos:end="325:48"><name pos:start="325:17" pos:end="325:33">g_ptr_array_index</name><argument_list pos:start="325:34" pos:end="325:48">(<argument pos:start="325:35" pos:end="325:44"><expr pos:start="325:35" pos:end="325:44"><name pos:start="325:35" pos:end="325:44">mem_ranges</name></expr></argument>, <argument pos:start="325:47" pos:end="325:47"><expr pos:start="325:47" pos:end="325:47"><name pos:start="325:47" pos:end="325:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="335:65"><expr pos:start="327:9" pos:end="335:64"><call pos:start="327:9" pos:end="335:64"><name pos:start="327:9" pos:end="327:18">aml_append</name><argument_list pos:start="327:19" pos:end="335:64">(<argument pos:start="327:20" pos:end="327:22"><expr pos:start="327:20" pos:end="327:22"><name pos:start="327:20" pos:end="327:22">crs</name></expr></argument>,

            <argument pos:start="329:13" pos:end="335:63"><expr pos:start="329:13" pos:end="335:63"><call pos:start="329:13" pos:end="335:63"><name pos:start="329:13" pos:end="329:28">aml_dword_memory</name><argument_list pos:start="329:29" pos:end="335:63">(<argument pos:start="329:30" pos:end="329:43"><expr pos:start="329:30" pos:end="329:43"><name pos:start="329:30" pos:end="329:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="329:46" pos:end="329:58"><expr pos:start="329:46" pos:end="329:58"><name pos:start="329:46" pos:end="329:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="329:61" pos:end="329:73"><expr pos:start="329:61" pos:end="329:73"><name pos:start="329:61" pos:end="329:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="331:30" pos:end="331:46"><expr pos:start="331:30" pos:end="331:46"><name pos:start="331:30" pos:end="331:46">AML_NON_CACHEABLE</name></expr></argument>, <argument pos:start="331:49" pos:end="331:62"><expr pos:start="331:49" pos:end="331:62"><name pos:start="331:49" pos:end="331:62">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="333:30" pos:end="333:30"><expr pos:start="333:30" pos:end="333:30"><literal type="number" pos:start="333:30" pos:end="333:30">0</literal></expr></argument>, <argument pos:start="333:33" pos:end="333:43"><expr pos:start="333:33" pos:end="333:43"><name pos:start="333:33" pos:end="333:43"><name pos:start="333:33" pos:end="333:37">entry</name><operator pos:start="333:38" pos:end="333:39">-&gt;</operator><name pos:start="333:40" pos:end="333:43">base</name></name></expr></argument>, <argument pos:start="333:46" pos:end="333:57"><expr pos:start="333:46" pos:end="333:57"><name pos:start="333:46" pos:end="333:57"><name pos:start="333:46" pos:end="333:50">entry</name><operator pos:start="333:51" pos:end="333:52">-&gt;</operator><name pos:start="333:53" pos:end="333:57">limit</name></name></expr></argument>,

                             <argument pos:start="335:30" pos:end="335:30"><expr pos:start="335:30" pos:end="335:30"><literal type="number" pos:start="335:30" pos:end="335:30">0</literal></expr></argument>, <argument pos:start="335:33" pos:end="335:62"><expr pos:start="335:33" pos:end="335:62"><name pos:start="335:33" pos:end="335:44"><name pos:start="335:33" pos:end="335:37">entry</name><operator pos:start="335:38" pos:end="335:39">-&gt;</operator><name pos:start="335:40" pos:end="335:44">limit</name></name> <operator pos:start="335:46" pos:end="335:46">-</operator> <name pos:start="335:48" pos:end="335:58"><name pos:start="335:48" pos:end="335:52">entry</name><operator pos:start="335:53" pos:end="335:54">-&gt;</operator><name pos:start="335:55" pos:end="335:58">base</name></name> <operator pos:start="335:60" pos:end="335:60">+</operator> <literal type="number" pos:start="335:62" pos:end="335:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="341:5" pos:end="353:5"><if pos:start="341:5" pos:end="353:5">if <condition pos:start="341:8" pos:end="341:26">(<expr pos:start="341:9" pos:end="341:25"><name pos:start="341:9" pos:end="341:25"><name pos:start="341:9" pos:end="341:18">pci_hole64</name><operator pos:start="341:19" pos:end="341:20">-&gt;</operator><name pos:start="341:21" pos:end="341:25">begin</name></name></expr>)</condition> <block pos:start="341:28" pos:end="353:5">{<block_content pos:start="343:9" pos:end="351:67">

        <expr_stmt pos:start="343:9" pos:end="351:67"><expr pos:start="343:9" pos:end="351:66"><call pos:start="343:9" pos:end="351:66"><name pos:start="343:9" pos:end="343:18">aml_append</name><argument_list pos:start="343:19" pos:end="351:66">(<argument pos:start="343:20" pos:end="343:22"><expr pos:start="343:20" pos:end="343:22"><name pos:start="343:20" pos:end="343:22">crs</name></expr></argument>,

            <argument pos:start="345:13" pos:end="351:65"><expr pos:start="345:13" pos:end="351:65"><call pos:start="345:13" pos:end="351:65"><name pos:start="345:13" pos:end="345:28">aml_qword_memory</name><argument_list pos:start="345:29" pos:end="351:65">(<argument pos:start="345:30" pos:end="345:43"><expr pos:start="345:30" pos:end="345:43"><name pos:start="345:30" pos:end="345:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="345:46" pos:end="345:58"><expr pos:start="345:46" pos:end="345:58"><name pos:start="345:46" pos:end="345:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="345:61" pos:end="345:73"><expr pos:start="345:61" pos:end="345:73"><name pos:start="345:61" pos:end="345:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="347:30" pos:end="347:42"><expr pos:start="347:30" pos:end="347:42"><name pos:start="347:30" pos:end="347:42">AML_CACHEABLE</name></expr></argument>, <argument pos:start="347:45" pos:end="347:58"><expr pos:start="347:45" pos:end="347:58"><name pos:start="347:45" pos:end="347:58">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="349:30" pos:end="349:30"><expr pos:start="349:30" pos:end="349:30"><literal type="number" pos:start="349:30" pos:end="349:30">0</literal></expr></argument>, <argument pos:start="349:33" pos:end="349:49"><expr pos:start="349:33" pos:end="349:49"><name pos:start="349:33" pos:end="349:49"><name pos:start="349:33" pos:end="349:42">pci_hole64</name><operator pos:start="349:43" pos:end="349:44">-&gt;</operator><name pos:start="349:45" pos:end="349:49">begin</name></name></expr></argument>, <argument pos:start="349:52" pos:end="349:70"><expr pos:start="349:52" pos:end="349:70"><name pos:start="349:52" pos:end="349:66"><name pos:start="349:52" pos:end="349:61">pci_hole64</name><operator pos:start="349:62" pos:end="349:63">-&gt;</operator><name pos:start="349:64" pos:end="349:66">end</name></name> <operator pos:start="349:68" pos:end="349:68">-</operator> <literal type="number" pos:start="349:70" pos:end="349:70">1</literal></expr></argument>, <argument pos:start="349:73" pos:end="349:73"><expr pos:start="349:73" pos:end="349:73"><literal type="number" pos:start="349:73" pos:end="349:73">0</literal></expr></argument>,

                             <argument pos:start="351:30" pos:end="351:64"><expr pos:start="351:30" pos:end="351:64"><name pos:start="351:30" pos:end="351:44"><name pos:start="351:30" pos:end="351:39">pci_hole64</name><operator pos:start="351:40" pos:end="351:41">-&gt;</operator><name pos:start="351:42" pos:end="351:44">end</name></name> <operator pos:start="351:46" pos:end="351:46">-</operator> <name pos:start="351:48" pos:end="351:64"><name pos:start="351:48" pos:end="351:57">pci_hole64</name><operator pos:start="351:58" pos:end="351:59">-&gt;</operator><name pos:start="351:60" pos:end="351:64">begin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="357:5" pos:end="363:5"><if pos:start="357:5" pos:end="363:5">if <condition pos:start="357:8" pos:end="357:48">(<expr pos:start="357:9" pos:end="357:47"><name pos:start="357:9" pos:end="357:25"><name pos:start="357:9" pos:end="357:12">misc</name><operator pos:start="357:13" pos:end="357:14">-&gt;</operator><name pos:start="357:15" pos:end="357:25">tpm_version</name></name> <operator pos:start="357:27" pos:end="357:28">!=</operator> <name pos:start="357:30" pos:end="357:47">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="357:50" pos:end="363:5">{<block_content pos:start="359:9" pos:end="361:55">

        <expr_stmt pos:start="359:9" pos:end="361:55"><expr pos:start="359:9" pos:end="361:54"><call pos:start="359:9" pos:end="361:54"><name pos:start="359:9" pos:end="359:18">aml_append</name><argument_list pos:start="359:19" pos:end="361:54">(<argument pos:start="359:20" pos:end="359:22"><expr pos:start="359:20" pos:end="359:22"><name pos:start="359:20" pos:end="359:22">crs</name></expr></argument>, <argument pos:start="359:25" pos:end="361:53"><expr pos:start="359:25" pos:end="361:53"><call pos:start="359:25" pos:end="361:53"><name pos:start="359:25" pos:end="359:42">aml_memory32_fixed</name><argument_list pos:start="359:43" pos:end="361:53">(<argument pos:start="359:44" pos:end="359:60"><expr pos:start="359:44" pos:end="359:60"><name pos:start="359:44" pos:end="359:60">TPM_TIS_ADDR_BASE</name></expr></argument>,

                   <argument pos:start="361:20" pos:end="361:36"><expr pos:start="361:20" pos:end="361:36"><name pos:start="361:20" pos:end="361:36">TPM_TIS_ADDR_SIZE</name></expr></argument>, <argument pos:start="361:39" pos:end="361:52"><expr pos:start="361:39" pos:end="361:52"><name pos:start="361:39" pos:end="361:52">AML_READ_WRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:50"><expr pos:start="365:5" pos:end="365:49"><call pos:start="365:5" pos:end="365:49"><name pos:start="365:5" pos:end="365:14">aml_append</name><argument_list pos:start="365:15" pos:end="365:49">(<argument pos:start="365:16" pos:end="365:20"><expr pos:start="365:16" pos:end="365:20"><name pos:start="365:16" pos:end="365:20">scope</name></expr></argument>, <argument pos:start="365:23" pos:end="365:48"><expr pos:start="365:23" pos:end="365:48"><call pos:start="365:23" pos:end="365:48"><name pos:start="365:23" pos:end="365:35">aml_name_decl</name><argument_list pos:start="365:36" pos:end="365:48">(<argument pos:start="365:37" pos:end="365:42"><expr pos:start="365:37" pos:end="365:42"><literal type="string" pos:start="365:37" pos:end="365:42">"_CRS"</literal></expr></argument>, <argument pos:start="365:45" pos:end="365:47"><expr pos:start="365:45" pos:end="365:47"><name pos:start="365:45" pos:end="365:47">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="369:5" pos:end="369:38">/* reserve GPE0 block resources */</comment>

    <expr_stmt pos:start="371:5" pos:end="371:29"><expr pos:start="371:5" pos:end="371:28"><name pos:start="371:5" pos:end="371:7">dev</name> <operator pos:start="371:9" pos:end="371:9">=</operator> <call pos:start="371:11" pos:end="371:28"><name pos:start="371:11" pos:end="371:20">aml_device</name><argument_list pos:start="371:21" pos:end="371:28">(<argument pos:start="371:22" pos:end="371:27"><expr pos:start="371:22" pos:end="371:27"><literal type="string" pos:start="371:22" pos:end="371:27">"GPE0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:66"><expr pos:start="373:5" pos:end="373:65"><call pos:start="373:5" pos:end="373:65"><name pos:start="373:5" pos:end="373:14">aml_append</name><argument_list pos:start="373:15" pos:end="373:65">(<argument pos:start="373:16" pos:end="373:18"><expr pos:start="373:16" pos:end="373:18"><name pos:start="373:16" pos:end="373:18">dev</name></expr></argument>, <argument pos:start="373:21" pos:end="373:64"><expr pos:start="373:21" pos:end="373:64"><call pos:start="373:21" pos:end="373:64"><name pos:start="373:21" pos:end="373:33">aml_name_decl</name><argument_list pos:start="373:34" pos:end="373:64">(<argument pos:start="373:35" pos:end="373:40"><expr pos:start="373:35" pos:end="373:40"><literal type="string" pos:start="373:35" pos:end="373:40">"_HID"</literal></expr></argument>, <argument pos:start="373:43" pos:end="373:63"><expr pos:start="373:43" pos:end="373:63"><call pos:start="373:43" pos:end="373:63"><name pos:start="373:43" pos:end="373:52">aml_string</name><argument_list pos:start="373:53" pos:end="373:63">(<argument pos:start="373:54" pos:end="373:62"><expr pos:start="373:54" pos:end="373:62"><literal type="string" pos:start="373:54" pos:end="373:62">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:73"><expr pos:start="375:5" pos:end="375:72"><call pos:start="375:5" pos:end="375:72"><name pos:start="375:5" pos:end="375:14">aml_append</name><argument_list pos:start="375:15" pos:end="375:72">(<argument pos:start="375:16" pos:end="375:18"><expr pos:start="375:16" pos:end="375:18"><name pos:start="375:16" pos:end="375:18">dev</name></expr></argument>, <argument pos:start="375:21" pos:end="375:71"><expr pos:start="375:21" pos:end="375:71"><call pos:start="375:21" pos:end="375:71"><name pos:start="375:21" pos:end="375:33">aml_name_decl</name><argument_list pos:start="375:34" pos:end="375:71">(<argument pos:start="375:35" pos:end="375:40"><expr pos:start="375:35" pos:end="375:40"><literal type="string" pos:start="375:35" pos:end="375:40">"_UID"</literal></expr></argument>, <argument pos:start="375:43" pos:end="375:70"><expr pos:start="375:43" pos:end="375:70"><call pos:start="375:43" pos:end="375:70"><name pos:start="375:43" pos:end="375:52">aml_string</name><argument_list pos:start="375:53" pos:end="375:70">(<argument pos:start="375:54" pos:end="375:69"><expr pos:start="375:54" pos:end="375:69"><literal type="string" pos:start="375:54" pos:end="375:69">"GPE0 resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="377:5" pos:end="377:64">/* device present, functioning, decoding, not shown in UI */</comment>

    <expr_stmt pos:start="379:5" pos:end="379:57"><expr pos:start="379:5" pos:end="379:56"><call pos:start="379:5" pos:end="379:56"><name pos:start="379:5" pos:end="379:14">aml_append</name><argument_list pos:start="379:15" pos:end="379:56">(<argument pos:start="379:16" pos:end="379:18"><expr pos:start="379:16" pos:end="379:18"><name pos:start="379:16" pos:end="379:18">dev</name></expr></argument>, <argument pos:start="379:21" pos:end="379:55"><expr pos:start="379:21" pos:end="379:55"><call pos:start="379:21" pos:end="379:55"><name pos:start="379:21" pos:end="379:33">aml_name_decl</name><argument_list pos:start="379:34" pos:end="379:55">(<argument pos:start="379:35" pos:end="379:40"><expr pos:start="379:35" pos:end="379:40"><literal type="string" pos:start="379:35" pos:end="379:40">"_STA"</literal></expr></argument>, <argument pos:start="379:43" pos:end="379:54"><expr pos:start="379:43" pos:end="379:54"><call pos:start="379:43" pos:end="379:54"><name pos:start="379:43" pos:end="379:49">aml_int</name><argument_list pos:start="379:50" pos:end="379:54">(<argument pos:start="379:51" pos:end="379:53"><expr pos:start="379:51" pos:end="379:53"><literal type="number" pos:start="379:51" pos:end="379:53">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:34"><expr pos:start="381:5" pos:end="381:33"><name pos:start="381:5" pos:end="381:7">crs</name> <operator pos:start="381:9" pos:end="381:9">=</operator> <call pos:start="381:11" pos:end="381:33"><name pos:start="381:11" pos:end="381:31">aml_resource_template</name><argument_list pos:start="381:32" pos:end="381:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="387:6"><expr pos:start="383:5" pos:end="387:5"><call pos:start="383:5" pos:end="387:5"><name pos:start="383:5" pos:end="383:14">aml_append</name><argument_list pos:start="383:15" pos:end="387:5">(<argument pos:start="383:16" pos:end="383:18"><expr pos:start="383:16" pos:end="383:18"><name pos:start="383:16" pos:end="383:18">crs</name></expr></argument>,

        <argument pos:start="385:9" pos:end="385:77"><expr pos:start="385:9" pos:end="385:77"><call pos:start="385:9" pos:end="385:77"><name pos:start="385:9" pos:end="385:14">aml_io</name><argument_list pos:start="385:15" pos:end="385:77">(<argument pos:start="385:16" pos:end="385:27"><expr pos:start="385:16" pos:end="385:27"><name pos:start="385:16" pos:end="385:27">AML_DECODE16</name></expr></argument>, <argument pos:start="385:30" pos:end="385:41"><expr pos:start="385:30" pos:end="385:41"><name pos:start="385:30" pos:end="385:41"><name pos:start="385:30" pos:end="385:31">pm</name><operator pos:start="385:32" pos:end="385:33">-&gt;</operator><name pos:start="385:34" pos:end="385:41">gpe0_blk</name></name></expr></argument>, <argument pos:start="385:44" pos:end="385:55"><expr pos:start="385:44" pos:end="385:55"><name pos:start="385:44" pos:end="385:55"><name pos:start="385:44" pos:end="385:45">pm</name><operator pos:start="385:46" pos:end="385:47">-&gt;</operator><name pos:start="385:48" pos:end="385:55">gpe0_blk</name></name></expr></argument>, <argument pos:start="385:58" pos:end="385:58"><expr pos:start="385:58" pos:end="385:58"><literal type="number" pos:start="385:58" pos:end="385:58">1</literal></expr></argument>, <argument pos:start="385:61" pos:end="385:76"><expr pos:start="385:61" pos:end="385:76"><name pos:start="385:61" pos:end="385:76"><name pos:start="385:61" pos:end="385:62">pm</name><operator pos:start="385:63" pos:end="385:64">-&gt;</operator><name pos:start="385:65" pos:end="385:76">gpe0_blk_len</name></name></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="389:48"><expr pos:start="389:5" pos:end="389:47"><call pos:start="389:5" pos:end="389:47"><name pos:start="389:5" pos:end="389:14">aml_append</name><argument_list pos:start="389:15" pos:end="389:47">(<argument pos:start="389:16" pos:end="389:18"><expr pos:start="389:16" pos:end="389:18"><name pos:start="389:16" pos:end="389:18">dev</name></expr></argument>, <argument pos:start="389:21" pos:end="389:46"><expr pos:start="389:21" pos:end="389:46"><call pos:start="389:21" pos:end="389:46"><name pos:start="389:21" pos:end="389:33">aml_name_decl</name><argument_list pos:start="389:34" pos:end="389:46">(<argument pos:start="389:35" pos:end="389:40"><expr pos:start="389:35" pos:end="389:40"><literal type="string" pos:start="389:35" pos:end="389:40">"_CRS"</literal></expr></argument>, <argument pos:start="389:43" pos:end="389:45"><expr pos:start="389:43" pos:end="389:45"><name pos:start="389:43" pos:end="389:45">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:27"><expr pos:start="391:5" pos:end="391:26"><call pos:start="391:5" pos:end="391:26"><name pos:start="391:5" pos:end="391:14">aml_append</name><argument_list pos:start="391:15" pos:end="391:26">(<argument pos:start="391:16" pos:end="391:20"><expr pos:start="391:16" pos:end="391:20"><name pos:start="391:16" pos:end="391:20">scope</name></expr></argument>, <argument pos:start="391:23" pos:end="391:25"><expr pos:start="391:23" pos:end="391:25"><name pos:start="391:23" pos:end="391:25">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="395:5" pos:end="395:38"><expr pos:start="395:5" pos:end="395:37"><call pos:start="395:5" pos:end="395:37"><name pos:start="395:5" pos:end="395:20">g_ptr_array_free</name><argument_list pos:start="395:21" pos:end="395:37">(<argument pos:start="395:22" pos:end="395:30"><expr pos:start="395:22" pos:end="395:30"><name pos:start="395:22" pos:end="395:30">io_ranges</name></expr></argument>, <argument pos:start="395:33" pos:end="395:36"><expr pos:start="395:33" pos:end="395:36"><name pos:start="395:33" pos:end="395:36">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:39"><expr pos:start="397:5" pos:end="397:38"><call pos:start="397:5" pos:end="397:38"><name pos:start="397:5" pos:end="397:20">g_ptr_array_free</name><argument_list pos:start="397:21" pos:end="397:38">(<argument pos:start="397:22" pos:end="397:31"><expr pos:start="397:22" pos:end="397:31"><name pos:start="397:22" pos:end="397:31">mem_ranges</name></expr></argument>, <argument pos:start="397:34" pos:end="397:37"><expr pos:start="397:34" pos:end="397:37"><name pos:start="397:34" pos:end="397:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="401:5" pos:end="401:33">/* reserve PCIHP resources */</comment>

    <if_stmt pos:start="403:5" pos:end="431:5"><if pos:start="403:5" pos:end="431:5">if <condition pos:start="403:8" pos:end="403:25">(<expr pos:start="403:9" pos:end="403:24"><name pos:start="403:9" pos:end="403:24"><name pos:start="403:9" pos:end="403:10">pm</name><operator pos:start="403:11" pos:end="403:12">-&gt;</operator><name pos:start="403:13" pos:end="403:24">pcihp_io_len</name></name></expr>)</condition> <block pos:start="403:27" pos:end="431:5">{<block_content pos:start="405:9" pos:end="429:31">

        <expr_stmt pos:start="405:9" pos:end="405:33"><expr pos:start="405:9" pos:end="405:32"><name pos:start="405:9" pos:end="405:11">dev</name> <operator pos:start="405:13" pos:end="405:13">=</operator> <call pos:start="405:15" pos:end="405:32"><name pos:start="405:15" pos:end="405:24">aml_device</name><argument_list pos:start="405:25" pos:end="405:32">(<argument pos:start="405:26" pos:end="405:31"><expr pos:start="405:26" pos:end="405:31"><literal type="string" pos:start="405:26" pos:end="405:31">"PHPR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:70"><expr pos:start="407:9" pos:end="407:69"><call pos:start="407:9" pos:end="407:69"><name pos:start="407:9" pos:end="407:18">aml_append</name><argument_list pos:start="407:19" pos:end="407:69">(<argument pos:start="407:20" pos:end="407:22"><expr pos:start="407:20" pos:end="407:22"><name pos:start="407:20" pos:end="407:22">dev</name></expr></argument>, <argument pos:start="407:25" pos:end="407:68"><expr pos:start="407:25" pos:end="407:68"><call pos:start="407:25" pos:end="407:68"><name pos:start="407:25" pos:end="407:37">aml_name_decl</name><argument_list pos:start="407:38" pos:end="407:68">(<argument pos:start="407:39" pos:end="407:44"><expr pos:start="407:39" pos:end="407:44"><literal type="string" pos:start="407:39" pos:end="407:44">"_HID"</literal></expr></argument>, <argument pos:start="407:47" pos:end="407:67"><expr pos:start="407:47" pos:end="407:67"><call pos:start="407:47" pos:end="407:67"><name pos:start="407:47" pos:end="407:56">aml_string</name><argument_list pos:start="407:57" pos:end="407:67">(<argument pos:start="407:58" pos:end="407:66"><expr pos:start="407:58" pos:end="407:66"><literal type="string" pos:start="407:58" pos:end="407:66">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="409:9" pos:end="411:72"><expr pos:start="409:9" pos:end="411:71"><call pos:start="409:9" pos:end="411:71"><name pos:start="409:9" pos:end="409:18">aml_append</name><argument_list pos:start="409:19" pos:end="411:71">(<argument pos:start="409:20" pos:end="409:22"><expr pos:start="409:20" pos:end="409:22"><name pos:start="409:20" pos:end="409:22">dev</name></expr></argument>,

            <argument pos:start="411:13" pos:end="411:70"><expr pos:start="411:13" pos:end="411:70"><call pos:start="411:13" pos:end="411:70"><name pos:start="411:13" pos:end="411:25">aml_name_decl</name><argument_list pos:start="411:26" pos:end="411:70">(<argument pos:start="411:27" pos:end="411:32"><expr pos:start="411:27" pos:end="411:32"><literal type="string" pos:start="411:27" pos:end="411:32">"_UID"</literal></expr></argument>, <argument pos:start="411:35" pos:end="411:69"><expr pos:start="411:35" pos:end="411:69"><call pos:start="411:35" pos:end="411:69"><name pos:start="411:35" pos:end="411:44">aml_string</name><argument_list pos:start="411:45" pos:end="411:69">(<argument pos:start="411:46" pos:end="411:68"><expr pos:start="411:46" pos:end="411:68"><literal type="string" pos:start="411:46" pos:end="411:68">"PCI Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="413:9" pos:end="413:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="415:9" pos:end="415:61"><expr pos:start="415:9" pos:end="415:60"><call pos:start="415:9" pos:end="415:60"><name pos:start="415:9" pos:end="415:18">aml_append</name><argument_list pos:start="415:19" pos:end="415:60">(<argument pos:start="415:20" pos:end="415:22"><expr pos:start="415:20" pos:end="415:22"><name pos:start="415:20" pos:end="415:22">dev</name></expr></argument>, <argument pos:start="415:25" pos:end="415:59"><expr pos:start="415:25" pos:end="415:59"><call pos:start="415:25" pos:end="415:59"><name pos:start="415:25" pos:end="415:37">aml_name_decl</name><argument_list pos:start="415:38" pos:end="415:59">(<argument pos:start="415:39" pos:end="415:44"><expr pos:start="415:39" pos:end="415:44"><literal type="string" pos:start="415:39" pos:end="415:44">"_STA"</literal></expr></argument>, <argument pos:start="415:47" pos:end="415:58"><expr pos:start="415:47" pos:end="415:58"><call pos:start="415:47" pos:end="415:58"><name pos:start="415:47" pos:end="415:53">aml_int</name><argument_list pos:start="415:54" pos:end="415:58">(<argument pos:start="415:55" pos:end="415:57"><expr pos:start="415:55" pos:end="415:57"><literal type="number" pos:start="415:55" pos:end="415:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="417:38"><expr pos:start="417:9" pos:end="417:37"><name pos:start="417:9" pos:end="417:11">crs</name> <operator pos:start="417:13" pos:end="417:13">=</operator> <call pos:start="417:15" pos:end="417:37"><name pos:start="417:15" pos:end="417:35">aml_resource_template</name><argument_list pos:start="417:36" pos:end="417:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="419:9" pos:end="425:10"><expr pos:start="419:9" pos:end="425:9"><call pos:start="419:9" pos:end="425:9"><name pos:start="419:9" pos:end="419:18">aml_append</name><argument_list pos:start="419:19" pos:end="425:9">(<argument pos:start="419:20" pos:end="419:22"><expr pos:start="419:20" pos:end="419:22"><name pos:start="419:20" pos:end="419:22">crs</name></expr></argument>,

            <argument pos:start="421:13" pos:end="423:36"><expr pos:start="421:13" pos:end="423:36"><call pos:start="421:13" pos:end="423:36"><name pos:start="421:13" pos:end="421:18">aml_io</name><argument_list pos:start="421:19" pos:end="423:36">(<argument pos:start="421:20" pos:end="421:31"><expr pos:start="421:20" pos:end="421:31"><name pos:start="421:20" pos:end="421:31">AML_DECODE16</name></expr></argument>, <argument pos:start="421:34" pos:end="421:50"><expr pos:start="421:34" pos:end="421:50"><name pos:start="421:34" pos:end="421:50"><name pos:start="421:34" pos:end="421:35">pm</name><operator pos:start="421:36" pos:end="421:37">-&gt;</operator><name pos:start="421:38" pos:end="421:50">pcihp_io_base</name></name></expr></argument>, <argument pos:start="421:53" pos:end="421:69"><expr pos:start="421:53" pos:end="421:69"><name pos:start="421:53" pos:end="421:69"><name pos:start="421:53" pos:end="421:54">pm</name><operator pos:start="421:55" pos:end="421:56">-&gt;</operator><name pos:start="421:57" pos:end="421:69">pcihp_io_base</name></name></expr></argument>, <argument pos:start="421:72" pos:end="421:72"><expr pos:start="421:72" pos:end="421:72"><literal type="number" pos:start="421:72" pos:end="421:72">1</literal></expr></argument>,

                   <argument pos:start="423:20" pos:end="423:35"><expr pos:start="423:20" pos:end="423:35"><name pos:start="423:20" pos:end="423:35"><name pos:start="423:20" pos:end="423:21">pm</name><operator pos:start="423:22" pos:end="423:23">-&gt;</operator><name pos:start="423:24" pos:end="423:35">pcihp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="427:9" pos:end="427:52"><expr pos:start="427:9" pos:end="427:51"><call pos:start="427:9" pos:end="427:51"><name pos:start="427:9" pos:end="427:18">aml_append</name><argument_list pos:start="427:19" pos:end="427:51">(<argument pos:start="427:20" pos:end="427:22"><expr pos:start="427:20" pos:end="427:22"><name pos:start="427:20" pos:end="427:22">dev</name></expr></argument>, <argument pos:start="427:25" pos:end="427:50"><expr pos:start="427:25" pos:end="427:50"><call pos:start="427:25" pos:end="427:50"><name pos:start="427:25" pos:end="427:37">aml_name_decl</name><argument_list pos:start="427:38" pos:end="427:50">(<argument pos:start="427:39" pos:end="427:44"><expr pos:start="427:39" pos:end="427:44"><literal type="string" pos:start="427:39" pos:end="427:44">"_CRS"</literal></expr></argument>, <argument pos:start="427:47" pos:end="427:49"><expr pos:start="427:47" pos:end="427:49"><name pos:start="427:47" pos:end="427:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="429:9" pos:end="429:31"><expr pos:start="429:9" pos:end="429:30"><call pos:start="429:9" pos:end="429:30"><name pos:start="429:9" pos:end="429:18">aml_append</name><argument_list pos:start="429:19" pos:end="429:30">(<argument pos:start="429:20" pos:end="429:24"><expr pos:start="429:20" pos:end="429:24"><name pos:start="429:20" pos:end="429:24">scope</name></expr></argument>, <argument pos:start="429:27" pos:end="429:29"><expr pos:start="429:27" pos:end="429:29"><name pos:start="429:27" pos:end="429:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:28"><expr pos:start="433:5" pos:end="433:27"><call pos:start="433:5" pos:end="433:27"><name pos:start="433:5" pos:end="433:14">aml_append</name><argument_list pos:start="433:15" pos:end="433:27">(<argument pos:start="433:16" pos:end="433:19"><expr pos:start="433:16" pos:end="433:19"><name pos:start="433:16" pos:end="433:19">dsdt</name></expr></argument>, <argument pos:start="433:22" pos:end="433:26"><expr pos:start="433:22" pos:end="433:26"><name pos:start="433:22" pos:end="433:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="437:5" pos:end="437:55">/*  create S3_ / S4_ / S5_ packages if necessary */</comment>

    <expr_stmt pos:start="439:5" pos:end="439:28"><expr pos:start="439:5" pos:end="439:27"><name pos:start="439:5" pos:end="439:9">scope</name> <operator pos:start="439:11" pos:end="439:11">=</operator> <call pos:start="439:13" pos:end="439:27"><name pos:start="439:13" pos:end="439:21">aml_scope</name><argument_list pos:start="439:22" pos:end="439:27">(<argument pos:start="439:23" pos:end="439:26"><expr pos:start="439:23" pos:end="439:26"><literal type="string" pos:start="439:23" pos:end="439:26">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="441:5" pos:end="455:5"><if pos:start="441:5" pos:end="455:5">if <condition pos:start="441:8" pos:end="441:25">(<expr pos:start="441:9" pos:end="441:24"><operator pos:start="441:9" pos:end="441:9">!</operator><name pos:start="441:10" pos:end="441:24"><name pos:start="441:10" pos:end="441:11">pm</name><operator pos:start="441:12" pos:end="441:13">-&gt;</operator><name pos:start="441:14" pos:end="441:24">s3_disabled</name></name></expr>)</condition> <block pos:start="441:27" pos:end="455:5">{<block_content pos:start="443:9" pos:end="453:53">

        <expr_stmt pos:start="443:9" pos:end="443:29"><expr pos:start="443:9" pos:end="443:28"><name pos:start="443:9" pos:end="443:11">pkg</name> <operator pos:start="443:13" pos:end="443:13">=</operator> <call pos:start="443:15" pos:end="443:28"><name pos:start="443:15" pos:end="443:25">aml_package</name><argument_list pos:start="443:26" pos:end="443:28">(<argument pos:start="443:27" pos:end="443:27"><expr pos:start="443:27" pos:end="443:27"><literal type="number" pos:start="443:27" pos:end="443:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="445:9" pos:end="445:36"><expr pos:start="445:9" pos:end="445:35"><call pos:start="445:9" pos:end="445:35"><name pos:start="445:9" pos:end="445:18">aml_append</name><argument_list pos:start="445:19" pos:end="445:35">(<argument pos:start="445:20" pos:end="445:22"><expr pos:start="445:20" pos:end="445:22"><name pos:start="445:20" pos:end="445:22">pkg</name></expr></argument>, <argument pos:start="445:25" pos:end="445:34"><expr pos:start="445:25" pos:end="445:34"><call pos:start="445:25" pos:end="445:34"><name pos:start="445:25" pos:end="445:31">aml_int</name><argument_list pos:start="445:32" pos:end="445:34">(<argument pos:start="445:33" pos:end="445:33"><expr pos:start="445:33" pos:end="445:33"><literal type="number" pos:start="445:33" pos:end="445:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="445:38" pos:end="445:59">/* PM1a_CNT.SLP_TYP */</comment>

        <expr_stmt pos:start="447:9" pos:end="447:36"><expr pos:start="447:9" pos:end="447:35"><call pos:start="447:9" pos:end="447:35"><name pos:start="447:9" pos:end="447:18">aml_append</name><argument_list pos:start="447:19" pos:end="447:35">(<argument pos:start="447:20" pos:end="447:22"><expr pos:start="447:20" pos:end="447:22"><name pos:start="447:20" pos:end="447:22">pkg</name></expr></argument>, <argument pos:start="447:25" pos:end="447:34"><expr pos:start="447:25" pos:end="447:34"><call pos:start="447:25" pos:end="447:34"><name pos:start="447:25" pos:end="447:31">aml_int</name><argument_list pos:start="447:32" pos:end="447:34">(<argument pos:start="447:33" pos:end="447:33"><expr pos:start="447:33" pos:end="447:33"><literal type="number" pos:start="447:33" pos:end="447:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="447:38" pos:end="447:77">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="449:9" pos:end="449:36"><expr pos:start="449:9" pos:end="449:35"><call pos:start="449:9" pos:end="449:35"><name pos:start="449:9" pos:end="449:18">aml_append</name><argument_list pos:start="449:19" pos:end="449:35">(<argument pos:start="449:20" pos:end="449:22"><expr pos:start="449:20" pos:end="449:22"><name pos:start="449:20" pos:end="449:22">pkg</name></expr></argument>, <argument pos:start="449:25" pos:end="449:34"><expr pos:start="449:25" pos:end="449:34"><call pos:start="449:25" pos:end="449:34"><name pos:start="449:25" pos:end="449:31">aml_int</name><argument_list pos:start="449:32" pos:end="449:34">(<argument pos:start="449:33" pos:end="449:33"><expr pos:start="449:33" pos:end="449:33"><literal type="number" pos:start="449:33" pos:end="449:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="449:38" pos:end="449:51">/* reserved */</comment>

        <expr_stmt pos:start="451:9" pos:end="451:36"><expr pos:start="451:9" pos:end="451:35"><call pos:start="451:9" pos:end="451:35"><name pos:start="451:9" pos:end="451:18">aml_append</name><argument_list pos:start="451:19" pos:end="451:35">(<argument pos:start="451:20" pos:end="451:22"><expr pos:start="451:20" pos:end="451:22"><name pos:start="451:20" pos:end="451:22">pkg</name></expr></argument>, <argument pos:start="451:25" pos:end="451:34"><expr pos:start="451:25" pos:end="451:34"><call pos:start="451:25" pos:end="451:34"><name pos:start="451:25" pos:end="451:31">aml_int</name><argument_list pos:start="451:32" pos:end="451:34">(<argument pos:start="451:33" pos:end="451:33"><expr pos:start="451:33" pos:end="451:33"><literal type="number" pos:start="451:33" pos:end="451:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="451:38" pos:end="451:51">/* reserved */</comment>

        <expr_stmt pos:start="453:9" pos:end="453:53"><expr pos:start="453:9" pos:end="453:52"><call pos:start="453:9" pos:end="453:52"><name pos:start="453:9" pos:end="453:18">aml_append</name><argument_list pos:start="453:19" pos:end="453:52">(<argument pos:start="453:20" pos:end="453:24"><expr pos:start="453:20" pos:end="453:24"><name pos:start="453:20" pos:end="453:24">scope</name></expr></argument>, <argument pos:start="453:27" pos:end="453:51"><expr pos:start="453:27" pos:end="453:51"><call pos:start="453:27" pos:end="453:51"><name pos:start="453:27" pos:end="453:39">aml_name_decl</name><argument_list pos:start="453:40" pos:end="453:51">(<argument pos:start="453:41" pos:end="453:45"><expr pos:start="453:41" pos:end="453:45"><literal type="string" pos:start="453:41" pos:end="453:45">"_S3"</literal></expr></argument>, <argument pos:start="453:48" pos:end="453:50"><expr pos:start="453:48" pos:end="453:50"><name pos:start="453:48" pos:end="453:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="459:5" pos:end="475:5"><if pos:start="459:5" pos:end="475:5">if <condition pos:start="459:8" pos:end="459:25">(<expr pos:start="459:9" pos:end="459:24"><operator pos:start="459:9" pos:end="459:9">!</operator><name pos:start="459:10" pos:end="459:24"><name pos:start="459:10" pos:end="459:11">pm</name><operator pos:start="459:12" pos:end="459:13">-&gt;</operator><name pos:start="459:14" pos:end="459:24">s4_disabled</name></name></expr>)</condition> <block pos:start="459:27" pos:end="475:5">{<block_content pos:start="461:9" pos:end="473:53">

        <expr_stmt pos:start="461:9" pos:end="461:29"><expr pos:start="461:9" pos:end="461:28"><name pos:start="461:9" pos:end="461:11">pkg</name> <operator pos:start="461:13" pos:end="461:13">=</operator> <call pos:start="461:15" pos:end="461:28"><name pos:start="461:15" pos:end="461:25">aml_package</name><argument_list pos:start="461:26" pos:end="461:28">(<argument pos:start="461:27" pos:end="461:27"><expr pos:start="461:27" pos:end="461:27"><literal type="number" pos:start="461:27" pos:end="461:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="463:9" pos:end="463:45"><expr pos:start="463:9" pos:end="463:44"><call pos:start="463:9" pos:end="463:44"><name pos:start="463:9" pos:end="463:18">aml_append</name><argument_list pos:start="463:19" pos:end="463:44">(<argument pos:start="463:20" pos:end="463:22"><expr pos:start="463:20" pos:end="463:22"><name pos:start="463:20" pos:end="463:22">pkg</name></expr></argument>, <argument pos:start="463:25" pos:end="463:43"><expr pos:start="463:25" pos:end="463:43"><call pos:start="463:25" pos:end="463:43"><name pos:start="463:25" pos:end="463:31">aml_int</name><argument_list pos:start="463:32" pos:end="463:43">(<argument pos:start="463:33" pos:end="463:42"><expr pos:start="463:33" pos:end="463:42"><name pos:start="463:33" pos:end="463:42"><name pos:start="463:33" pos:end="463:34">pm</name><operator pos:start="463:35" pos:end="463:36">-&gt;</operator><name pos:start="463:37" pos:end="463:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="463:47" pos:end="463:68">/* PM1a_CNT.SLP_TYP */</comment>

        <comment type="block" pos:start="465:9" pos:end="465:48">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="467:9" pos:end="467:45"><expr pos:start="467:9" pos:end="467:44"><call pos:start="467:9" pos:end="467:44"><name pos:start="467:9" pos:end="467:18">aml_append</name><argument_list pos:start="467:19" pos:end="467:44">(<argument pos:start="467:20" pos:end="467:22"><expr pos:start="467:20" pos:end="467:22"><name pos:start="467:20" pos:end="467:22">pkg</name></expr></argument>, <argument pos:start="467:25" pos:end="467:43"><expr pos:start="467:25" pos:end="467:43"><call pos:start="467:25" pos:end="467:43"><name pos:start="467:25" pos:end="467:31">aml_int</name><argument_list pos:start="467:32" pos:end="467:43">(<argument pos:start="467:33" pos:end="467:42"><expr pos:start="467:33" pos:end="467:42"><name pos:start="467:33" pos:end="467:42"><name pos:start="467:33" pos:end="467:34">pm</name><operator pos:start="467:35" pos:end="467:36">-&gt;</operator><name pos:start="467:37" pos:end="467:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="469:36"><expr pos:start="469:9" pos:end="469:35"><call pos:start="469:9" pos:end="469:35"><name pos:start="469:9" pos:end="469:18">aml_append</name><argument_list pos:start="469:19" pos:end="469:35">(<argument pos:start="469:20" pos:end="469:22"><expr pos:start="469:20" pos:end="469:22"><name pos:start="469:20" pos:end="469:22">pkg</name></expr></argument>, <argument pos:start="469:25" pos:end="469:34"><expr pos:start="469:25" pos:end="469:34"><call pos:start="469:25" pos:end="469:34"><name pos:start="469:25" pos:end="469:31">aml_int</name><argument_list pos:start="469:32" pos:end="469:34">(<argument pos:start="469:33" pos:end="469:33"><expr pos:start="469:33" pos:end="469:33"><literal type="number" pos:start="469:33" pos:end="469:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="469:38" pos:end="469:51">/* reserved */</comment>

        <expr_stmt pos:start="471:9" pos:end="471:36"><expr pos:start="471:9" pos:end="471:35"><call pos:start="471:9" pos:end="471:35"><name pos:start="471:9" pos:end="471:18">aml_append</name><argument_list pos:start="471:19" pos:end="471:35">(<argument pos:start="471:20" pos:end="471:22"><expr pos:start="471:20" pos:end="471:22"><name pos:start="471:20" pos:end="471:22">pkg</name></expr></argument>, <argument pos:start="471:25" pos:end="471:34"><expr pos:start="471:25" pos:end="471:34"><call pos:start="471:25" pos:end="471:34"><name pos:start="471:25" pos:end="471:31">aml_int</name><argument_list pos:start="471:32" pos:end="471:34">(<argument pos:start="471:33" pos:end="471:33"><expr pos:start="471:33" pos:end="471:33"><literal type="number" pos:start="471:33" pos:end="471:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="471:38" pos:end="471:51">/* reserved */</comment>

        <expr_stmt pos:start="473:9" pos:end="473:53"><expr pos:start="473:9" pos:end="473:52"><call pos:start="473:9" pos:end="473:52"><name pos:start="473:9" pos:end="473:18">aml_append</name><argument_list pos:start="473:19" pos:end="473:52">(<argument pos:start="473:20" pos:end="473:24"><expr pos:start="473:20" pos:end="473:24"><name pos:start="473:20" pos:end="473:24">scope</name></expr></argument>, <argument pos:start="473:27" pos:end="473:51"><expr pos:start="473:27" pos:end="473:51"><call pos:start="473:27" pos:end="473:51"><name pos:start="473:27" pos:end="473:39">aml_name_decl</name><argument_list pos:start="473:40" pos:end="473:51">(<argument pos:start="473:41" pos:end="473:45"><expr pos:start="473:41" pos:end="473:45"><literal type="string" pos:start="473:41" pos:end="473:45">"_S4"</literal></expr></argument>, <argument pos:start="473:48" pos:end="473:50"><expr pos:start="473:48" pos:end="473:50"><name pos:start="473:48" pos:end="473:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="479:5" pos:end="479:25"><expr pos:start="479:5" pos:end="479:24"><name pos:start="479:5" pos:end="479:7">pkg</name> <operator pos:start="479:9" pos:end="479:9">=</operator> <call pos:start="479:11" pos:end="479:24"><name pos:start="479:11" pos:end="479:21">aml_package</name><argument_list pos:start="479:22" pos:end="479:24">(<argument pos:start="479:23" pos:end="479:23"><expr pos:start="479:23" pos:end="479:23"><literal type="number" pos:start="479:23" pos:end="479:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="481:5" pos:end="481:32"><expr pos:start="481:5" pos:end="481:31"><call pos:start="481:5" pos:end="481:31"><name pos:start="481:5" pos:end="481:14">aml_append</name><argument_list pos:start="481:15" pos:end="481:31">(<argument pos:start="481:16" pos:end="481:18"><expr pos:start="481:16" pos:end="481:18"><name pos:start="481:16" pos:end="481:18">pkg</name></expr></argument>, <argument pos:start="481:21" pos:end="481:30"><expr pos:start="481:21" pos:end="481:30"><call pos:start="481:21" pos:end="481:30"><name pos:start="481:21" pos:end="481:27">aml_int</name><argument_list pos:start="481:28" pos:end="481:30">(<argument pos:start="481:29" pos:end="481:29"><expr pos:start="481:29" pos:end="481:29"><literal type="number" pos:start="481:29" pos:end="481:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="481:34" pos:end="481:55">/* PM1a_CNT.SLP_TYP */</comment>

    <expr_stmt pos:start="483:5" pos:end="483:32"><expr pos:start="483:5" pos:end="483:31"><call pos:start="483:5" pos:end="483:31"><name pos:start="483:5" pos:end="483:14">aml_append</name><argument_list pos:start="483:15" pos:end="483:31">(<argument pos:start="483:16" pos:end="483:18"><expr pos:start="483:16" pos:end="483:18"><name pos:start="483:16" pos:end="483:18">pkg</name></expr></argument>, <argument pos:start="483:21" pos:end="483:30"><expr pos:start="483:21" pos:end="483:30"><call pos:start="483:21" pos:end="483:30"><name pos:start="483:21" pos:end="483:27">aml_int</name><argument_list pos:start="483:28" pos:end="483:30">(<argument pos:start="483:29" pos:end="483:29"><expr pos:start="483:29" pos:end="483:29"><literal type="number" pos:start="483:29" pos:end="483:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="483:34" pos:end="483:65">/* PM1b_CNT.SLP_TYP not impl. */</comment>

    <expr_stmt pos:start="485:5" pos:end="485:32"><expr pos:start="485:5" pos:end="485:31"><call pos:start="485:5" pos:end="485:31"><name pos:start="485:5" pos:end="485:14">aml_append</name><argument_list pos:start="485:15" pos:end="485:31">(<argument pos:start="485:16" pos:end="485:18"><expr pos:start="485:16" pos:end="485:18"><name pos:start="485:16" pos:end="485:18">pkg</name></expr></argument>, <argument pos:start="485:21" pos:end="485:30"><expr pos:start="485:21" pos:end="485:30"><call pos:start="485:21" pos:end="485:30"><name pos:start="485:21" pos:end="485:27">aml_int</name><argument_list pos:start="485:28" pos:end="485:30">(<argument pos:start="485:29" pos:end="485:29"><expr pos:start="485:29" pos:end="485:29"><literal type="number" pos:start="485:29" pos:end="485:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="485:34" pos:end="485:47">/* reserved */</comment>

    <expr_stmt pos:start="487:5" pos:end="487:32"><expr pos:start="487:5" pos:end="487:31"><call pos:start="487:5" pos:end="487:31"><name pos:start="487:5" pos:end="487:14">aml_append</name><argument_list pos:start="487:15" pos:end="487:31">(<argument pos:start="487:16" pos:end="487:18"><expr pos:start="487:16" pos:end="487:18"><name pos:start="487:16" pos:end="487:18">pkg</name></expr></argument>, <argument pos:start="487:21" pos:end="487:30"><expr pos:start="487:21" pos:end="487:30"><call pos:start="487:21" pos:end="487:30"><name pos:start="487:21" pos:end="487:27">aml_int</name><argument_list pos:start="487:28" pos:end="487:30">(<argument pos:start="487:29" pos:end="487:29"><expr pos:start="487:29" pos:end="487:29"><literal type="number" pos:start="487:29" pos:end="487:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="487:34" pos:end="487:47">/* reserved */</comment>

    <expr_stmt pos:start="489:5" pos:end="489:49"><expr pos:start="489:5" pos:end="489:48"><call pos:start="489:5" pos:end="489:48"><name pos:start="489:5" pos:end="489:14">aml_append</name><argument_list pos:start="489:15" pos:end="489:48">(<argument pos:start="489:16" pos:end="489:20"><expr pos:start="489:16" pos:end="489:20"><name pos:start="489:16" pos:end="489:20">scope</name></expr></argument>, <argument pos:start="489:23" pos:end="489:47"><expr pos:start="489:23" pos:end="489:47"><call pos:start="489:23" pos:end="489:47"><name pos:start="489:23" pos:end="489:35">aml_name_decl</name><argument_list pos:start="489:36" pos:end="489:47">(<argument pos:start="489:37" pos:end="489:41"><expr pos:start="489:37" pos:end="489:41"><literal type="string" pos:start="489:37" pos:end="489:41">"_S5"</literal></expr></argument>, <argument pos:start="489:44" pos:end="489:46"><expr pos:start="489:44" pos:end="489:46"><name pos:start="489:44" pos:end="489:46">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="491:5" pos:end="491:28"><expr pos:start="491:5" pos:end="491:27"><call pos:start="491:5" pos:end="491:27"><name pos:start="491:5" pos:end="491:14">aml_append</name><argument_list pos:start="491:15" pos:end="491:27">(<argument pos:start="491:16" pos:end="491:19"><expr pos:start="491:16" pos:end="491:19"><name pos:start="491:16" pos:end="491:19">dsdt</name></expr></argument>, <argument pos:start="491:22" pos:end="491:26"><expr pos:start="491:22" pos:end="491:26"><name pos:start="491:22" pos:end="491:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="495:5" pos:end="495:45">/* create fw_cfg node, unconditionally */</comment>

    <block pos:start="497:5" pos:end="549:5">{<block_content pos:start="507:9" pos:end="547:32">

        <comment type="block" pos:start="499:9" pos:end="505:71">/* when using port i/o, the 8-bit data register *always* overlaps

         * with half of the 16-bit control register. Hence, the total size

         * of the i/o region used is FW_CFG_CTL_SIZE; when using DMA, the

         * DMA control register is located at FW_CFG_DMA_IO_BASE + 4 */</comment>

        <decl_stmt pos:start="507:9" pos:end="513:42"><decl pos:start="507:9" pos:end="513:41"><type pos:start="507:9" pos:end="507:15"><name pos:start="507:9" pos:end="507:15">uint8_t</name></type> <name pos:start="507:17" pos:end="507:23">io_size</name> <init pos:start="507:25" pos:end="513:41">= <expr pos:start="507:27" pos:end="513:41"><ternary pos:start="507:27" pos:end="513:41"><condition pos:start="507:27" pos:end="509:73"><expr pos:start="507:27" pos:end="509:71"><call pos:start="507:27" pos:end="509:71"><name pos:start="507:27" pos:end="507:50">object_property_get_bool</name><argument_list pos:start="507:51" pos:end="509:71">(<argument pos:start="507:52" pos:end="507:71"><expr pos:start="507:52" pos:end="507:71"><call pos:start="507:52" pos:end="507:71"><name pos:start="507:52" pos:end="507:57">OBJECT</name><argument_list pos:start="507:58" pos:end="507:71">(<argument pos:start="507:59" pos:end="507:70"><expr pos:start="507:59" pos:end="507:70"><name pos:start="507:59" pos:end="507:70"><name pos:start="507:59" pos:end="507:62">pcms</name><operator pos:start="507:63" pos:end="507:64">-&gt;</operator><name pos:start="507:65" pos:end="507:70">fw_cfg</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                   <argument pos:start="509:52" pos:end="509:64"><expr pos:start="509:52" pos:end="509:64"><literal type="string" pos:start="509:52" pos:end="509:64">"dma_enabled"</literal></expr></argument>, <argument pos:start="509:67" pos:end="509:70"><expr pos:start="509:67" pos:end="509:70"><name pos:start="509:67" pos:end="509:70">NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="511:27" pos:end="511:75">

                          <expr pos:start="511:27" pos:end="511:75"><call pos:start="511:27" pos:end="511:54"><name pos:start="511:27" pos:end="511:34">ROUND_UP</name><argument_list pos:start="511:35" pos:end="511:54">(<argument pos:start="511:36" pos:end="511:50"><expr pos:start="511:36" pos:end="511:50"><name pos:start="511:36" pos:end="511:50">FW_CFG_CTL_SIZE</name></expr></argument>, <argument pos:start="511:53" pos:end="511:53"><expr pos:start="511:53" pos:end="511:53"><literal type="number" pos:start="511:53" pos:end="511:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="511:56" pos:end="511:56">+</operator> <sizeof pos:start="511:58" pos:end="511:75">sizeof<argument_list pos:start="511:64" pos:end="511:75">(<argument pos:start="511:65" pos:end="511:74"><expr pos:start="511:65" pos:end="511:74"><name pos:start="511:65" pos:end="511:74">dma_addr_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="511:77" pos:end="513:41">:

                          <expr pos:start="513:27" pos:end="513:41"><name pos:start="513:27" pos:end="513:41">FW_CFG_CTL_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="517:9" pos:end="517:40"><expr pos:start="517:9" pos:end="517:39"><name pos:start="517:9" pos:end="517:13">scope</name> <operator pos:start="517:15" pos:end="517:15">=</operator> <call pos:start="517:17" pos:end="517:39"><name pos:start="517:17" pos:end="517:25">aml_scope</name><argument_list pos:start="517:26" pos:end="517:39">(<argument pos:start="517:27" pos:end="517:38"><expr pos:start="517:27" pos:end="517:38"><literal type="string" pos:start="517:27" pos:end="517:38">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="519:9" pos:end="519:33"><expr pos:start="519:9" pos:end="519:32"><name pos:start="519:9" pos:end="519:11">dev</name> <operator pos:start="519:13" pos:end="519:13">=</operator> <call pos:start="519:15" pos:end="519:32"><name pos:start="519:15" pos:end="519:24">aml_device</name><argument_list pos:start="519:25" pos:end="519:32">(<argument pos:start="519:26" pos:end="519:31"><expr pos:start="519:26" pos:end="519:31"><literal type="string" pos:start="519:26" pos:end="519:31">"FWCF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="523:9" pos:end="523:71"><expr pos:start="523:9" pos:end="523:70"><call pos:start="523:9" pos:end="523:70"><name pos:start="523:9" pos:end="523:18">aml_append</name><argument_list pos:start="523:19" pos:end="523:70">(<argument pos:start="523:20" pos:end="523:22"><expr pos:start="523:20" pos:end="523:22"><name pos:start="523:20" pos:end="523:22">dev</name></expr></argument>, <argument pos:start="523:25" pos:end="523:69"><expr pos:start="523:25" pos:end="523:69"><call pos:start="523:25" pos:end="523:69"><name pos:start="523:25" pos:end="523:37">aml_name_decl</name><argument_list pos:start="523:38" pos:end="523:69">(<argument pos:start="523:39" pos:end="523:44"><expr pos:start="523:39" pos:end="523:44"><literal type="string" pos:start="523:39" pos:end="523:44">"_HID"</literal></expr></argument>, <argument pos:start="523:47" pos:end="523:68"><expr pos:start="523:47" pos:end="523:68"><call pos:start="523:47" pos:end="523:68"><name pos:start="523:47" pos:end="523:56">aml_string</name><argument_list pos:start="523:57" pos:end="523:68">(<argument pos:start="523:58" pos:end="523:67"><expr pos:start="523:58" pos:end="523:67"><literal type="string" pos:start="523:58" pos:end="523:67">"QEMU0002"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="527:9" pos:end="527:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="529:9" pos:end="529:61"><expr pos:start="529:9" pos:end="529:60"><call pos:start="529:9" pos:end="529:60"><name pos:start="529:9" pos:end="529:18">aml_append</name><argument_list pos:start="529:19" pos:end="529:60">(<argument pos:start="529:20" pos:end="529:22"><expr pos:start="529:20" pos:end="529:22"><name pos:start="529:20" pos:end="529:22">dev</name></expr></argument>, <argument pos:start="529:25" pos:end="529:59"><expr pos:start="529:25" pos:end="529:59"><call pos:start="529:25" pos:end="529:59"><name pos:start="529:25" pos:end="529:37">aml_name_decl</name><argument_list pos:start="529:38" pos:end="529:59">(<argument pos:start="529:39" pos:end="529:44"><expr pos:start="529:39" pos:end="529:44"><literal type="string" pos:start="529:39" pos:end="529:44">"_STA"</literal></expr></argument>, <argument pos:start="529:47" pos:end="529:58"><expr pos:start="529:47" pos:end="529:58"><call pos:start="529:47" pos:end="529:58"><name pos:start="529:47" pos:end="529:53">aml_int</name><argument_list pos:start="529:54" pos:end="529:58">(<argument pos:start="529:55" pos:end="529:57"><expr pos:start="529:55" pos:end="529:57"><literal type="number" pos:start="529:55" pos:end="529:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="533:9" pos:end="533:38"><expr pos:start="533:9" pos:end="533:37"><name pos:start="533:9" pos:end="533:11">crs</name> <operator pos:start="533:13" pos:end="533:13">=</operator> <call pos:start="533:15" pos:end="533:37"><name pos:start="533:15" pos:end="533:35">aml_resource_template</name><argument_list pos:start="533:36" pos:end="533:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="535:9" pos:end="539:10"><expr pos:start="535:9" pos:end="539:9"><call pos:start="535:9" pos:end="539:9"><name pos:start="535:9" pos:end="535:18">aml_append</name><argument_list pos:start="535:19" pos:end="539:9">(<argument pos:start="535:20" pos:end="535:22"><expr pos:start="535:20" pos:end="535:22"><name pos:start="535:20" pos:end="535:22">crs</name></expr></argument>,

            <argument pos:start="537:13" pos:end="537:79"><expr pos:start="537:13" pos:end="537:79"><call pos:start="537:13" pos:end="537:79"><name pos:start="537:13" pos:end="537:18">aml_io</name><argument_list pos:start="537:19" pos:end="537:79">(<argument pos:start="537:20" pos:end="537:31"><expr pos:start="537:20" pos:end="537:31"><name pos:start="537:20" pos:end="537:31">AML_DECODE16</name></expr></argument>, <argument pos:start="537:34" pos:end="537:47"><expr pos:start="537:34" pos:end="537:47"><name pos:start="537:34" pos:end="537:47">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="537:50" pos:end="537:63"><expr pos:start="537:50" pos:end="537:63"><name pos:start="537:50" pos:end="537:63">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="537:66" pos:end="537:69"><expr pos:start="537:66" pos:end="537:69"><literal type="number" pos:start="537:66" pos:end="537:69">0x01</literal></expr></argument>, <argument pos:start="537:72" pos:end="537:78"><expr pos:start="537:72" pos:end="537:78"><name pos:start="537:72" pos:end="537:78">io_size</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="541:9" pos:end="541:52"><expr pos:start="541:9" pos:end="541:51"><call pos:start="541:9" pos:end="541:51"><name pos:start="541:9" pos:end="541:18">aml_append</name><argument_list pos:start="541:19" pos:end="541:51">(<argument pos:start="541:20" pos:end="541:22"><expr pos:start="541:20" pos:end="541:22"><name pos:start="541:20" pos:end="541:22">dev</name></expr></argument>, <argument pos:start="541:25" pos:end="541:50"><expr pos:start="541:25" pos:end="541:50"><call pos:start="541:25" pos:end="541:50"><name pos:start="541:25" pos:end="541:37">aml_name_decl</name><argument_list pos:start="541:38" pos:end="541:50">(<argument pos:start="541:39" pos:end="541:44"><expr pos:start="541:39" pos:end="541:44"><literal type="string" pos:start="541:39" pos:end="541:44">"_CRS"</literal></expr></argument>, <argument pos:start="541:47" pos:end="541:49"><expr pos:start="541:47" pos:end="541:49"><name pos:start="541:47" pos:end="541:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="545:9" pos:end="545:31"><expr pos:start="545:9" pos:end="545:30"><call pos:start="545:9" pos:end="545:30"><name pos:start="545:9" pos:end="545:18">aml_append</name><argument_list pos:start="545:19" pos:end="545:30">(<argument pos:start="545:20" pos:end="545:24"><expr pos:start="545:20" pos:end="545:24"><name pos:start="545:20" pos:end="545:24">scope</name></expr></argument>, <argument pos:start="545:27" pos:end="545:29"><expr pos:start="545:27" pos:end="545:29"><name pos:start="545:27" pos:end="545:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="547:9" pos:end="547:32"><expr pos:start="547:9" pos:end="547:31"><call pos:start="547:9" pos:end="547:31"><name pos:start="547:9" pos:end="547:18">aml_append</name><argument_list pos:start="547:19" pos:end="547:31">(<argument pos:start="547:20" pos:end="547:23"><expr pos:start="547:20" pos:end="547:23"><name pos:start="547:20" pos:end="547:23">dsdt</name></expr></argument>, <argument pos:start="547:26" pos:end="547:30"><expr pos:start="547:26" pos:end="547:30"><name pos:start="547:26" pos:end="547:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="553:5" pos:end="589:5"><if pos:start="553:5" pos:end="589:5">if <condition pos:start="553:8" pos:end="553:31">(<expr pos:start="553:9" pos:end="553:30"><name pos:start="553:9" pos:end="553:30"><name pos:start="553:9" pos:end="553:12">misc</name><operator pos:start="553:13" pos:end="553:14">-&gt;</operator><name pos:start="553:15" pos:end="553:30">applesmc_io_base</name></name></expr>)</condition> <block pos:start="553:33" pos:end="589:5">{<block_content pos:start="555:9" pos:end="587:32">

        <expr_stmt pos:start="555:9" pos:end="555:44"><expr pos:start="555:9" pos:end="555:43"><name pos:start="555:9" pos:end="555:13">scope</name> <operator pos:start="555:15" pos:end="555:15">=</operator> <call pos:start="555:17" pos:end="555:43"><name pos:start="555:17" pos:end="555:25">aml_scope</name><argument_list pos:start="555:26" pos:end="555:43">(<argument pos:start="555:27" pos:end="555:42"><expr pos:start="555:27" pos:end="555:42"><literal type="string" pos:start="555:27" pos:end="555:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="557:9" pos:end="557:32"><expr pos:start="557:9" pos:end="557:31"><name pos:start="557:9" pos:end="557:11">dev</name> <operator pos:start="557:13" pos:end="557:13">=</operator> <call pos:start="557:15" pos:end="557:31"><name pos:start="557:15" pos:end="557:24">aml_device</name><argument_list pos:start="557:25" pos:end="557:31">(<argument pos:start="557:26" pos:end="557:30"><expr pos:start="557:26" pos:end="557:30"><literal type="string" pos:start="557:26" pos:end="557:30">"SMC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="561:9" pos:end="561:70"><expr pos:start="561:9" pos:end="561:69"><call pos:start="561:9" pos:end="561:69"><name pos:start="561:9" pos:end="561:18">aml_append</name><argument_list pos:start="561:19" pos:end="561:69">(<argument pos:start="561:20" pos:end="561:22"><expr pos:start="561:20" pos:end="561:22"><name pos:start="561:20" pos:end="561:22">dev</name></expr></argument>, <argument pos:start="561:25" pos:end="561:68"><expr pos:start="561:25" pos:end="561:68"><call pos:start="561:25" pos:end="561:68"><name pos:start="561:25" pos:end="561:37">aml_name_decl</name><argument_list pos:start="561:38" pos:end="561:68">(<argument pos:start="561:39" pos:end="561:44"><expr pos:start="561:39" pos:end="561:44"><literal type="string" pos:start="561:39" pos:end="561:44">"_HID"</literal></expr></argument>, <argument pos:start="561:47" pos:end="561:67"><expr pos:start="561:47" pos:end="561:67"><call pos:start="561:47" pos:end="561:67"><name pos:start="561:47" pos:end="561:56">aml_eisaid</name><argument_list pos:start="561:57" pos:end="561:67">(<argument pos:start="561:58" pos:end="561:66"><expr pos:start="561:58" pos:end="561:66"><literal type="string" pos:start="561:58" pos:end="561:66">"APP0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="563:9" pos:end="563:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="565:9" pos:end="565:61"><expr pos:start="565:9" pos:end="565:60"><call pos:start="565:9" pos:end="565:60"><name pos:start="565:9" pos:end="565:18">aml_append</name><argument_list pos:start="565:19" pos:end="565:60">(<argument pos:start="565:20" pos:end="565:22"><expr pos:start="565:20" pos:end="565:22"><name pos:start="565:20" pos:end="565:22">dev</name></expr></argument>, <argument pos:start="565:25" pos:end="565:59"><expr pos:start="565:25" pos:end="565:59"><call pos:start="565:25" pos:end="565:59"><name pos:start="565:25" pos:end="565:37">aml_name_decl</name><argument_list pos:start="565:38" pos:end="565:59">(<argument pos:start="565:39" pos:end="565:44"><expr pos:start="565:39" pos:end="565:44"><literal type="string" pos:start="565:39" pos:end="565:44">"_STA"</literal></expr></argument>, <argument pos:start="565:47" pos:end="565:58"><expr pos:start="565:47" pos:end="565:58"><call pos:start="565:47" pos:end="565:58"><name pos:start="565:47" pos:end="565:53">aml_int</name><argument_list pos:start="565:54" pos:end="565:58">(<argument pos:start="565:55" pos:end="565:57"><expr pos:start="565:55" pos:end="565:57"><literal type="number" pos:start="565:55" pos:end="565:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="569:9" pos:end="569:38"><expr pos:start="569:9" pos:end="569:37"><name pos:start="569:9" pos:end="569:11">crs</name> <operator pos:start="569:13" pos:end="569:13">=</operator> <call pos:start="569:15" pos:end="569:37"><name pos:start="569:15" pos:end="569:35">aml_resource_template</name><argument_list pos:start="569:36" pos:end="569:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="571:9" pos:end="577:10"><expr pos:start="571:9" pos:end="577:9"><call pos:start="571:9" pos:end="577:9"><name pos:start="571:9" pos:end="571:18">aml_append</name><argument_list pos:start="571:19" pos:end="577:9">(<argument pos:start="571:20" pos:end="571:22"><expr pos:start="571:20" pos:end="571:22"><name pos:start="571:20" pos:end="571:22">crs</name></expr></argument>,

            <argument pos:start="573:13" pos:end="575:50"><expr pos:start="573:13" pos:end="575:50"><call pos:start="573:13" pos:end="575:50"><name pos:start="573:13" pos:end="573:18">aml_io</name><argument_list pos:start="573:19" pos:end="575:50">(<argument pos:start="573:20" pos:end="573:31"><expr pos:start="573:20" pos:end="573:31"><name pos:start="573:20" pos:end="573:31">AML_DECODE16</name></expr></argument>, <argument pos:start="573:34" pos:end="573:55"><expr pos:start="573:34" pos:end="573:55"><name pos:start="573:34" pos:end="573:55"><name pos:start="573:34" pos:end="573:37">misc</name><operator pos:start="573:38" pos:end="573:39">-&gt;</operator><name pos:start="573:40" pos:end="573:55">applesmc_io_base</name></name></expr></argument>, <argument pos:start="573:58" pos:end="573:79"><expr pos:start="573:58" pos:end="573:79"><name pos:start="573:58" pos:end="573:79"><name pos:start="573:58" pos:end="573:61">misc</name><operator pos:start="573:62" pos:end="573:63">-&gt;</operator><name pos:start="573:64" pos:end="573:79">applesmc_io_base</name></name></expr></argument>,

                   <argument pos:start="575:20" pos:end="575:23"><expr pos:start="575:20" pos:end="575:23"><literal type="number" pos:start="575:20" pos:end="575:23">0x01</literal></expr></argument>, <argument pos:start="575:26" pos:end="575:49"><expr pos:start="575:26" pos:end="575:49"><name pos:start="575:26" pos:end="575:49">APPLESMC_MAX_DATA_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="579:9" pos:end="579:45"><expr pos:start="579:9" pos:end="579:44"><call pos:start="579:9" pos:end="579:44"><name pos:start="579:9" pos:end="579:18">aml_append</name><argument_list pos:start="579:19" pos:end="579:44">(<argument pos:start="579:20" pos:end="579:22"><expr pos:start="579:20" pos:end="579:22"><name pos:start="579:20" pos:end="579:22">crs</name></expr></argument>, <argument pos:start="579:25" pos:end="579:43"><expr pos:start="579:25" pos:end="579:43"><call pos:start="579:25" pos:end="579:43"><name pos:start="579:25" pos:end="579:40">aml_irq_no_flags</name><argument_list pos:start="579:41" pos:end="579:43">(<argument pos:start="579:42" pos:end="579:42"><expr pos:start="579:42" pos:end="579:42"><literal type="number" pos:start="579:42" pos:end="579:42">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="581:9" pos:end="581:52"><expr pos:start="581:9" pos:end="581:51"><call pos:start="581:9" pos:end="581:51"><name pos:start="581:9" pos:end="581:18">aml_append</name><argument_list pos:start="581:19" pos:end="581:51">(<argument pos:start="581:20" pos:end="581:22"><expr pos:start="581:20" pos:end="581:22"><name pos:start="581:20" pos:end="581:22">dev</name></expr></argument>, <argument pos:start="581:25" pos:end="581:50"><expr pos:start="581:25" pos:end="581:50"><call pos:start="581:25" pos:end="581:50"><name pos:start="581:25" pos:end="581:37">aml_name_decl</name><argument_list pos:start="581:38" pos:end="581:50">(<argument pos:start="581:39" pos:end="581:44"><expr pos:start="581:39" pos:end="581:44"><literal type="string" pos:start="581:39" pos:end="581:44">"_CRS"</literal></expr></argument>, <argument pos:start="581:47" pos:end="581:49"><expr pos:start="581:47" pos:end="581:49"><name pos:start="581:47" pos:end="581:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="585:9" pos:end="585:31"><expr pos:start="585:9" pos:end="585:30"><call pos:start="585:9" pos:end="585:30"><name pos:start="585:9" pos:end="585:18">aml_append</name><argument_list pos:start="585:19" pos:end="585:30">(<argument pos:start="585:20" pos:end="585:24"><expr pos:start="585:20" pos:end="585:24"><name pos:start="585:20" pos:end="585:24">scope</name></expr></argument>, <argument pos:start="585:27" pos:end="585:29"><expr pos:start="585:27" pos:end="585:29"><name pos:start="585:27" pos:end="585:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="587:9" pos:end="587:32"><expr pos:start="587:9" pos:end="587:31"><call pos:start="587:9" pos:end="587:31"><name pos:start="587:9" pos:end="587:18">aml_append</name><argument_list pos:start="587:19" pos:end="587:31">(<argument pos:start="587:20" pos:end="587:23"><expr pos:start="587:20" pos:end="587:23"><name pos:start="587:20" pos:end="587:23">dsdt</name></expr></argument>, <argument pos:start="587:26" pos:end="587:30"><expr pos:start="587:26" pos:end="587:30"><name pos:start="587:26" pos:end="587:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="593:5" pos:end="657:5"><if pos:start="593:5" pos:end="657:5">if <condition pos:start="593:8" pos:end="593:27">(<expr pos:start="593:9" pos:end="593:26"><name pos:start="593:9" pos:end="593:26"><name pos:start="593:9" pos:end="593:12">misc</name><operator pos:start="593:13" pos:end="593:14">-&gt;</operator><name pos:start="593:15" pos:end="593:26">pvpanic_port</name></name></expr>)</condition> <block pos:start="593:29" pos:end="657:5">{<block_content pos:start="595:9" pos:end="655:32">

        <expr_stmt pos:start="595:9" pos:end="595:44"><expr pos:start="595:9" pos:end="595:43"><name pos:start="595:9" pos:end="595:13">scope</name> <operator pos:start="595:15" pos:end="595:15">=</operator> <call pos:start="595:17" pos:end="595:43"><name pos:start="595:17" pos:end="595:25">aml_scope</name><argument_list pos:start="595:26" pos:end="595:43">(<argument pos:start="595:27" pos:end="595:42"><expr pos:start="595:27" pos:end="595:42"><literal type="string" pos:start="595:27" pos:end="595:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="599:9" pos:end="599:33"><expr pos:start="599:9" pos:end="599:32"><name pos:start="599:9" pos:end="599:11">dev</name> <operator pos:start="599:13" pos:end="599:13">=</operator> <call pos:start="599:15" pos:end="599:32"><name pos:start="599:15" pos:end="599:24">aml_device</name><argument_list pos:start="599:25" pos:end="599:32">(<argument pos:start="599:26" pos:end="599:31"><expr pos:start="599:26" pos:end="599:31"><literal type="string" pos:start="599:26" pos:end="599:31">"PEVT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:71"><expr pos:start="601:9" pos:end="601:70"><call pos:start="601:9" pos:end="601:70"><name pos:start="601:9" pos:end="601:18">aml_append</name><argument_list pos:start="601:19" pos:end="601:70">(<argument pos:start="601:20" pos:end="601:22"><expr pos:start="601:20" pos:end="601:22"><name pos:start="601:20" pos:end="601:22">dev</name></expr></argument>, <argument pos:start="601:25" pos:end="601:69"><expr pos:start="601:25" pos:end="601:69"><call pos:start="601:25" pos:end="601:69"><name pos:start="601:25" pos:end="601:37">aml_name_decl</name><argument_list pos:start="601:38" pos:end="601:69">(<argument pos:start="601:39" pos:end="601:44"><expr pos:start="601:39" pos:end="601:44"><literal type="string" pos:start="601:39" pos:end="601:44">"_HID"</literal></expr></argument>, <argument pos:start="601:47" pos:end="601:68"><expr pos:start="601:47" pos:end="601:68"><call pos:start="601:47" pos:end="601:68"><name pos:start="601:47" pos:end="601:56">aml_string</name><argument_list pos:start="601:57" pos:end="601:68">(<argument pos:start="601:58" pos:end="601:67"><expr pos:start="601:58" pos:end="601:67"><literal type="string" pos:start="601:58" pos:end="601:67">"QEMU0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="605:9" pos:end="605:38"><expr pos:start="605:9" pos:end="605:37"><name pos:start="605:9" pos:end="605:11">crs</name> <operator pos:start="605:13" pos:end="605:13">=</operator> <call pos:start="605:15" pos:end="605:37"><name pos:start="605:15" pos:end="605:35">aml_resource_template</name><argument_list pos:start="605:36" pos:end="605:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="607:9" pos:end="611:10"><expr pos:start="607:9" pos:end="611:9"><call pos:start="607:9" pos:end="611:9"><name pos:start="607:9" pos:end="607:18">aml_append</name><argument_list pos:start="607:19" pos:end="611:9">(<argument pos:start="607:20" pos:end="607:22"><expr pos:start="607:20" pos:end="607:22"><name pos:start="607:20" pos:end="607:22">crs</name></expr></argument>,

            <argument pos:start="609:13" pos:end="609:78"><expr pos:start="609:13" pos:end="609:78"><call pos:start="609:13" pos:end="609:78"><name pos:start="609:13" pos:end="609:18">aml_io</name><argument_list pos:start="609:19" pos:end="609:78">(<argument pos:start="609:20" pos:end="609:31"><expr pos:start="609:20" pos:end="609:31"><name pos:start="609:20" pos:end="609:31">AML_DECODE16</name></expr></argument>, <argument pos:start="609:34" pos:end="609:51"><expr pos:start="609:34" pos:end="609:51"><name pos:start="609:34" pos:end="609:51"><name pos:start="609:34" pos:end="609:37">misc</name><operator pos:start="609:38" pos:end="609:39">-&gt;</operator><name pos:start="609:40" pos:end="609:51">pvpanic_port</name></name></expr></argument>, <argument pos:start="609:54" pos:end="609:71"><expr pos:start="609:54" pos:end="609:71"><name pos:start="609:54" pos:end="609:71"><name pos:start="609:54" pos:end="609:57">misc</name><operator pos:start="609:58" pos:end="609:59">-&gt;</operator><name pos:start="609:60" pos:end="609:71">pvpanic_port</name></name></expr></argument>, <argument pos:start="609:74" pos:end="609:74"><expr pos:start="609:74" pos:end="609:74"><literal type="number" pos:start="609:74" pos:end="609:74">1</literal></expr></argument>, <argument pos:start="609:77" pos:end="609:77"><expr pos:start="609:77" pos:end="609:77"><literal type="number" pos:start="609:77" pos:end="609:77">1</literal></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="613:9" pos:end="613:52"><expr pos:start="613:9" pos:end="613:51"><call pos:start="613:9" pos:end="613:51"><name pos:start="613:9" pos:end="613:18">aml_append</name><argument_list pos:start="613:19" pos:end="613:51">(<argument pos:start="613:20" pos:end="613:22"><expr pos:start="613:20" pos:end="613:22"><name pos:start="613:20" pos:end="613:22">dev</name></expr></argument>, <argument pos:start="613:25" pos:end="613:50"><expr pos:start="613:25" pos:end="613:50"><call pos:start="613:25" pos:end="613:50"><name pos:start="613:25" pos:end="613:37">aml_name_decl</name><argument_list pos:start="613:38" pos:end="613:50">(<argument pos:start="613:39" pos:end="613:44"><expr pos:start="613:39" pos:end="613:44"><literal type="string" pos:start="613:39" pos:end="613:44">"_CRS"</literal></expr></argument>, <argument pos:start="613:47" pos:end="613:49"><expr pos:start="613:47" pos:end="613:49"><name pos:start="613:47" pos:end="613:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="617:9" pos:end="619:79"><expr pos:start="617:9" pos:end="619:78"><call pos:start="617:9" pos:end="619:78"><name pos:start="617:9" pos:end="617:18">aml_append</name><argument_list pos:start="617:19" pos:end="619:78">(<argument pos:start="617:20" pos:end="617:22"><expr pos:start="617:20" pos:end="617:22"><name pos:start="617:20" pos:end="617:22">dev</name></expr></argument>, <argument pos:start="617:25" pos:end="619:77"><expr pos:start="617:25" pos:end="619:77"><call pos:start="617:25" pos:end="619:77"><name pos:start="617:25" pos:end="617:44">aml_operation_region</name><argument_list pos:start="617:45" pos:end="619:77">(<argument pos:start="617:46" pos:end="617:51"><expr pos:start="617:46" pos:end="617:51"><literal type="string" pos:start="617:46" pos:end="617:51">"PEOR"</literal></expr></argument>, <argument pos:start="617:54" pos:end="617:66"><expr pos:start="617:54" pos:end="617:66"><name pos:start="617:54" pos:end="617:66">AML_SYSTEM_IO</name></expr></argument>,

                                              <argument pos:start="619:47" pos:end="619:73"><expr pos:start="619:47" pos:end="619:73"><call pos:start="619:47" pos:end="619:73"><name pos:start="619:47" pos:end="619:53">aml_int</name><argument_list pos:start="619:54" pos:end="619:73">(<argument pos:start="619:55" pos:end="619:72"><expr pos:start="619:55" pos:end="619:72"><name pos:start="619:55" pos:end="619:72"><name pos:start="619:55" pos:end="619:58">misc</name><operator pos:start="619:59" pos:end="619:60">-&gt;</operator><name pos:start="619:61" pos:end="619:72">pvpanic_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="619:76" pos:end="619:76"><expr pos:start="619:76" pos:end="619:76"><literal type="number" pos:start="619:76" pos:end="619:76">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="621:9" pos:end="621:74"><expr pos:start="621:9" pos:end="621:73"><name pos:start="621:9" pos:end="621:13">field</name> <operator pos:start="621:15" pos:end="621:15">=</operator> <call pos:start="621:17" pos:end="621:73"><name pos:start="621:17" pos:end="621:25">aml_field</name><argument_list pos:start="621:26" pos:end="621:73">(<argument pos:start="621:27" pos:end="621:32"><expr pos:start="621:27" pos:end="621:32"><literal type="string" pos:start="621:27" pos:end="621:32">"PEOR"</literal></expr></argument>, <argument pos:start="621:35" pos:end="621:46"><expr pos:start="621:35" pos:end="621:46"><name pos:start="621:35" pos:end="621:46">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="621:49" pos:end="621:58"><expr pos:start="621:49" pos:end="621:58"><name pos:start="621:49" pos:end="621:58">AML_NOLOCK</name></expr></argument>, <argument pos:start="621:61" pos:end="621:72"><expr pos:start="621:61" pos:end="621:72"><name pos:start="621:61" pos:end="621:72">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="623:9" pos:end="623:54"><expr pos:start="623:9" pos:end="623:53"><call pos:start="623:9" pos:end="623:53"><name pos:start="623:9" pos:end="623:18">aml_append</name><argument_list pos:start="623:19" pos:end="623:53">(<argument pos:start="623:20" pos:end="623:24"><expr pos:start="623:20" pos:end="623:24"><name pos:start="623:20" pos:end="623:24">field</name></expr></argument>, <argument pos:start="623:27" pos:end="623:52"><expr pos:start="623:27" pos:end="623:52"><call pos:start="623:27" pos:end="623:52"><name pos:start="623:27" pos:end="623:41">aml_named_field</name><argument_list pos:start="623:42" pos:end="623:52">(<argument pos:start="623:43" pos:end="623:48"><expr pos:start="623:43" pos:end="623:48"><literal type="string" pos:start="623:43" pos:end="623:48">"PEPT"</literal></expr></argument>, <argument pos:start="623:51" pos:end="623:51"><expr pos:start="623:51" pos:end="623:51"><literal type="number" pos:start="623:51" pos:end="623:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="625:9" pos:end="625:31"><expr pos:start="625:9" pos:end="625:30"><call pos:start="625:9" pos:end="625:30"><name pos:start="625:9" pos:end="625:18">aml_append</name><argument_list pos:start="625:19" pos:end="625:30">(<argument pos:start="625:20" pos:end="625:22"><expr pos:start="625:20" pos:end="625:22"><name pos:start="625:20" pos:end="625:22">dev</name></expr></argument>, <argument pos:start="625:25" pos:end="625:29"><expr pos:start="625:25" pos:end="625:29"><name pos:start="625:25" pos:end="625:29">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="629:9" pos:end="629:64">/* device present, functioning, decoding, shown in UI */</comment>

        <expr_stmt pos:start="631:9" pos:end="631:61"><expr pos:start="631:9" pos:end="631:60"><call pos:start="631:9" pos:end="631:60"><name pos:start="631:9" pos:end="631:18">aml_append</name><argument_list pos:start="631:19" pos:end="631:60">(<argument pos:start="631:20" pos:end="631:22"><expr pos:start="631:20" pos:end="631:22"><name pos:start="631:20" pos:end="631:22">dev</name></expr></argument>, <argument pos:start="631:25" pos:end="631:59"><expr pos:start="631:25" pos:end="631:59"><call pos:start="631:25" pos:end="631:59"><name pos:start="631:25" pos:end="631:37">aml_name_decl</name><argument_list pos:start="631:38" pos:end="631:59">(<argument pos:start="631:39" pos:end="631:44"><expr pos:start="631:39" pos:end="631:44"><literal type="string" pos:start="631:39" pos:end="631:44">"_STA"</literal></expr></argument>, <argument pos:start="631:47" pos:end="631:58"><expr pos:start="631:47" pos:end="631:58"><call pos:start="631:47" pos:end="631:58"><name pos:start="631:47" pos:end="631:53">aml_int</name><argument_list pos:start="631:54" pos:end="631:58">(<argument pos:start="631:55" pos:end="631:57"><expr pos:start="631:55" pos:end="631:57"><literal type="number" pos:start="631:55" pos:end="631:57">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="635:9" pos:end="635:58"><expr pos:start="635:9" pos:end="635:57"><name pos:start="635:9" pos:end="635:14">method</name> <operator pos:start="635:16" pos:end="635:16">=</operator> <call pos:start="635:18" pos:end="635:57"><name pos:start="635:18" pos:end="635:27">aml_method</name><argument_list pos:start="635:28" pos:end="635:57">(<argument pos:start="635:29" pos:end="635:34"><expr pos:start="635:29" pos:end="635:34"><literal type="string" pos:start="635:29" pos:end="635:34">"RDPT"</literal></expr></argument>, <argument pos:start="635:37" pos:end="635:37"><expr pos:start="635:37" pos:end="635:37"><literal type="number" pos:start="635:37" pos:end="635:37">0</literal></expr></argument>, <argument pos:start="635:40" pos:end="635:56"><expr pos:start="635:40" pos:end="635:56"><name pos:start="635:40" pos:end="635:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="637:9" pos:end="637:70"><expr pos:start="637:9" pos:end="637:69"><call pos:start="637:9" pos:end="637:69"><name pos:start="637:9" pos:end="637:18">aml_append</name><argument_list pos:start="637:19" pos:end="637:69">(<argument pos:start="637:20" pos:end="637:25"><expr pos:start="637:20" pos:end="637:25"><name pos:start="637:20" pos:end="637:25">method</name></expr></argument>, <argument pos:start="637:28" pos:end="637:68"><expr pos:start="637:28" pos:end="637:68"><call pos:start="637:28" pos:end="637:68"><name pos:start="637:28" pos:end="637:36">aml_store</name><argument_list pos:start="637:37" pos:end="637:68">(<argument pos:start="637:38" pos:end="637:53"><expr pos:start="637:38" pos:end="637:53"><call pos:start="637:38" pos:end="637:53"><name pos:start="637:38" pos:end="637:45">aml_name</name><argument_list pos:start="637:46" pos:end="637:53">(<argument pos:start="637:47" pos:end="637:52"><expr pos:start="637:47" pos:end="637:52"><literal type="string" pos:start="637:47" pos:end="637:52">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="637:56" pos:end="637:67"><expr pos:start="637:56" pos:end="637:67"><call pos:start="637:56" pos:end="637:67"><name pos:start="637:56" pos:end="637:64">aml_local</name><argument_list pos:start="637:65" pos:end="637:67">(<argument pos:start="637:66" pos:end="637:66"><expr pos:start="637:66" pos:end="637:66"><literal type="number" pos:start="637:66" pos:end="637:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="639:9" pos:end="639:53"><expr pos:start="639:9" pos:end="639:52"><call pos:start="639:9" pos:end="639:52"><name pos:start="639:9" pos:end="639:18">aml_append</name><argument_list pos:start="639:19" pos:end="639:52">(<argument pos:start="639:20" pos:end="639:25"><expr pos:start="639:20" pos:end="639:25"><name pos:start="639:20" pos:end="639:25">method</name></expr></argument>, <argument pos:start="639:28" pos:end="639:51"><expr pos:start="639:28" pos:end="639:51"><call pos:start="639:28" pos:end="639:51"><name pos:start="639:28" pos:end="639:37">aml_return</name><argument_list pos:start="639:38" pos:end="639:51">(<argument pos:start="639:39" pos:end="639:50"><expr pos:start="639:39" pos:end="639:50"><call pos:start="639:39" pos:end="639:50"><name pos:start="639:39" pos:end="639:47">aml_local</name><argument_list pos:start="639:48" pos:end="639:50">(<argument pos:start="639:49" pos:end="639:49"><expr pos:start="639:49" pos:end="639:49"><literal type="number" pos:start="639:49" pos:end="639:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="641:9" pos:end="641:32"><expr pos:start="641:9" pos:end="641:31"><call pos:start="641:9" pos:end="641:31"><name pos:start="641:9" pos:end="641:18">aml_append</name><argument_list pos:start="641:19" pos:end="641:31">(<argument pos:start="641:20" pos:end="641:22"><expr pos:start="641:20" pos:end="641:22"><name pos:start="641:20" pos:end="641:22">dev</name></expr></argument>, <argument pos:start="641:25" pos:end="641:30"><expr pos:start="641:25" pos:end="641:30"><name pos:start="641:25" pos:end="641:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="645:9" pos:end="645:58"><expr pos:start="645:9" pos:end="645:57"><name pos:start="645:9" pos:end="645:14">method</name> <operator pos:start="645:16" pos:end="645:16">=</operator> <call pos:start="645:18" pos:end="645:57"><name pos:start="645:18" pos:end="645:27">aml_method</name><argument_list pos:start="645:28" pos:end="645:57">(<argument pos:start="645:29" pos:end="645:34"><expr pos:start="645:29" pos:end="645:34"><literal type="string" pos:start="645:29" pos:end="645:34">"WRPT"</literal></expr></argument>, <argument pos:start="645:37" pos:end="645:37"><expr pos:start="645:37" pos:end="645:37"><literal type="number" pos:start="645:37" pos:end="645:37">1</literal></expr></argument>, <argument pos:start="645:40" pos:end="645:56"><expr pos:start="645:40" pos:end="645:56"><name pos:start="645:40" pos:end="645:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="647:9" pos:end="647:68"><expr pos:start="647:9" pos:end="647:67"><call pos:start="647:9" pos:end="647:67"><name pos:start="647:9" pos:end="647:18">aml_append</name><argument_list pos:start="647:19" pos:end="647:67">(<argument pos:start="647:20" pos:end="647:25"><expr pos:start="647:20" pos:end="647:25"><name pos:start="647:20" pos:end="647:25">method</name></expr></argument>, <argument pos:start="647:28" pos:end="647:66"><expr pos:start="647:28" pos:end="647:66"><call pos:start="647:28" pos:end="647:66"><name pos:start="647:28" pos:end="647:36">aml_store</name><argument_list pos:start="647:37" pos:end="647:66">(<argument pos:start="647:38" pos:end="647:47"><expr pos:start="647:38" pos:end="647:47"><call pos:start="647:38" pos:end="647:47"><name pos:start="647:38" pos:end="647:44">aml_arg</name><argument_list pos:start="647:45" pos:end="647:47">(<argument pos:start="647:46" pos:end="647:46"><expr pos:start="647:46" pos:end="647:46"><literal type="number" pos:start="647:46" pos:end="647:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="647:50" pos:end="647:65"><expr pos:start="647:50" pos:end="647:65"><call pos:start="647:50" pos:end="647:65"><name pos:start="647:50" pos:end="647:57">aml_name</name><argument_list pos:start="647:58" pos:end="647:65">(<argument pos:start="647:59" pos:end="647:64"><expr pos:start="647:59" pos:end="647:64"><literal type="string" pos:start="647:59" pos:end="647:64">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="649:9" pos:end="649:32"><expr pos:start="649:9" pos:end="649:31"><call pos:start="649:9" pos:end="649:31"><name pos:start="649:9" pos:end="649:18">aml_append</name><argument_list pos:start="649:19" pos:end="649:31">(<argument pos:start="649:20" pos:end="649:22"><expr pos:start="649:20" pos:end="649:22"><name pos:start="649:20" pos:end="649:22">dev</name></expr></argument>, <argument pos:start="649:25" pos:end="649:30"><expr pos:start="649:25" pos:end="649:30"><name pos:start="649:25" pos:end="649:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="653:9" pos:end="653:31"><expr pos:start="653:9" pos:end="653:30"><call pos:start="653:9" pos:end="653:30"><name pos:start="653:9" pos:end="653:18">aml_append</name><argument_list pos:start="653:19" pos:end="653:30">(<argument pos:start="653:20" pos:end="653:24"><expr pos:start="653:20" pos:end="653:24"><name pos:start="653:20" pos:end="653:24">scope</name></expr></argument>, <argument pos:start="653:27" pos:end="653:29"><expr pos:start="653:27" pos:end="653:29"><name pos:start="653:27" pos:end="653:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="655:9" pos:end="655:32"><expr pos:start="655:9" pos:end="655:31"><call pos:start="655:9" pos:end="655:31"><name pos:start="655:9" pos:end="655:18">aml_append</name><argument_list pos:start="655:19" pos:end="655:31">(<argument pos:start="655:20" pos:end="655:23"><expr pos:start="655:20" pos:end="655:23"><name pos:start="655:20" pos:end="655:23">dsdt</name></expr></argument>, <argument pos:start="655:26" pos:end="655:30"><expr pos:start="655:26" pos:end="655:30"><name pos:start="655:26" pos:end="655:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="661:5" pos:end="661:34"><expr pos:start="661:5" pos:end="661:33"><name pos:start="661:5" pos:end="661:12">sb_scope</name> <operator pos:start="661:14" pos:end="661:14">=</operator> <call pos:start="661:16" pos:end="661:33"><name pos:start="661:16" pos:end="661:24">aml_scope</name><argument_list pos:start="661:25" pos:end="661:33">(<argument pos:start="661:26" pos:end="661:32"><expr pos:start="661:26" pos:end="661:32"><literal type="string" pos:start="661:26" pos:end="661:32">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="663:5" pos:end="741:5">{<block_content pos:start="665:9" pos:end="739:35">

        <expr_stmt pos:start="665:9" pos:end="667:48"><expr pos:start="665:9" pos:end="667:47"><call pos:start="665:9" pos:end="667:47"><name pos:start="665:9" pos:end="665:28">build_memory_devices</name><argument_list pos:start="665:29" pos:end="667:47">(<argument pos:start="665:30" pos:end="665:37"><expr pos:start="665:30" pos:end="665:37"><name pos:start="665:30" pos:end="665:37">sb_scope</name></expr></argument>, <argument pos:start="665:40" pos:end="665:45"><expr pos:start="665:40" pos:end="665:45"><name pos:start="665:40" pos:end="665:45">nr_mem</name></expr></argument>, <argument pos:start="665:48" pos:end="665:65"><expr pos:start="665:48" pos:end="665:65"><name pos:start="665:48" pos:end="665:65"><name pos:start="665:48" pos:end="665:49">pm</name><operator pos:start="665:50" pos:end="665:51">-&gt;</operator><name pos:start="665:52" pos:end="665:65">mem_hp_io_base</name></name></expr></argument>,

                             <argument pos:start="667:30" pos:end="667:46"><expr pos:start="667:30" pos:end="667:46"><name pos:start="667:30" pos:end="667:46"><name pos:start="667:30" pos:end="667:31">pm</name><operator pos:start="667:32" pos:end="667:33">-&gt;</operator><name pos:start="667:34" pos:end="667:46">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <block pos:start="671:9" pos:end="737:9">{<block_content pos:start="673:13" pos:end="735:13">

            <decl_stmt pos:start="673:13" pos:end="673:29"><decl pos:start="673:13" pos:end="673:28"><type pos:start="673:13" pos:end="673:20"><name pos:start="673:13" pos:end="673:18">Object</name> <modifier pos:start="673:20" pos:end="673:20">*</modifier></type><name pos:start="673:21" pos:end="673:28">pci_host</name></decl>;</decl_stmt>

            <decl_stmt pos:start="675:13" pos:end="675:31"><decl pos:start="675:13" pos:end="675:30"><type pos:start="675:13" pos:end="675:20"><name pos:start="675:13" pos:end="675:18">PCIBus</name> <modifier pos:start="675:20" pos:end="675:20">*</modifier></type><name pos:start="675:21" pos:end="675:23">bus</name> <init pos:start="675:25" pos:end="675:30">= <expr pos:start="675:27" pos:end="675:30"><name pos:start="675:27" pos:end="675:30">NULL</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="679:13" pos:end="679:48"><expr pos:start="679:13" pos:end="679:47"><name pos:start="679:13" pos:end="679:20">pci_host</name> <operator pos:start="679:22" pos:end="679:22">=</operator> <call pos:start="679:24" pos:end="679:47"><name pos:start="679:24" pos:end="679:45">acpi_get_i386_pci_host</name><argument_list pos:start="679:46" pos:end="679:47">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="681:13" pos:end="685:13"><if pos:start="681:13" pos:end="685:13">if <condition pos:start="681:16" pos:end="681:25">(<expr pos:start="681:17" pos:end="681:24"><name pos:start="681:17" pos:end="681:24">pci_host</name></expr>)</condition> <block pos:start="681:27" pos:end="685:13">{<block_content pos:start="683:17" pos:end="683:53">

                <expr_stmt pos:start="683:17" pos:end="683:53"><expr pos:start="683:17" pos:end="683:52"><name pos:start="683:17" pos:end="683:19">bus</name> <operator pos:start="683:21" pos:end="683:21">=</operator> <call pos:start="683:23" pos:end="683:47"><name pos:start="683:23" pos:end="683:37">PCI_HOST_BRIDGE</name><argument_list pos:start="683:38" pos:end="683:47">(<argument pos:start="683:39" pos:end="683:46"><expr pos:start="683:39" pos:end="683:46"><name pos:start="683:39" pos:end="683:46">pci_host</name></expr></argument>)</argument_list></call><operator pos:start="683:48" pos:end="683:49">-&gt;</operator><name pos:start="683:50" pos:end="683:52">bus</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="689:13" pos:end="735:13"><if pos:start="689:13" pos:end="735:13">if <condition pos:start="689:16" pos:end="689:20">(<expr pos:start="689:17" pos:end="689:19"><name pos:start="689:17" pos:end="689:19">bus</name></expr>)</condition> <block pos:start="689:22" pos:end="735:13">{<block_content pos:start="691:17" pos:end="733:44">

                <decl_stmt pos:start="691:17" pos:end="691:47"><decl pos:start="691:17" pos:end="691:46"><type pos:start="691:17" pos:end="691:21"><name pos:start="691:17" pos:end="691:19">Aml</name> <modifier pos:start="691:21" pos:end="691:21">*</modifier></type><name pos:start="691:22" pos:end="691:26">scope</name> <init pos:start="691:28" pos:end="691:46">= <expr pos:start="691:30" pos:end="691:46"><call pos:start="691:30" pos:end="691:46"><name pos:start="691:30" pos:end="691:38">aml_scope</name><argument_list pos:start="691:39" pos:end="691:46">(<argument pos:start="691:40" pos:end="691:45"><expr pos:start="691:40" pos:end="691:45"><literal type="string" pos:start="691:40" pos:end="691:45">"PCI0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="693:17" pos:end="693:77">/* Scan all PCI buses. Generate tables to support hotplug. */</comment>

                <expr_stmt pos:start="695:17" pos:end="695:78"><expr pos:start="695:17" pos:end="695:77"><call pos:start="695:17" pos:end="695:77"><name pos:start="695:17" pos:end="695:44">build_append_pci_bus_devices</name><argument_list pos:start="695:45" pos:end="695:77">(<argument pos:start="695:46" pos:end="695:50"><expr pos:start="695:46" pos:end="695:50"><name pos:start="695:46" pos:end="695:50">scope</name></expr></argument>, <argument pos:start="695:53" pos:end="695:55"><expr pos:start="695:53" pos:end="695:55"><name pos:start="695:53" pos:end="695:55">bus</name></expr></argument>, <argument pos:start="695:58" pos:end="695:76"><expr pos:start="695:58" pos:end="695:76"><name pos:start="695:58" pos:end="695:76"><name pos:start="695:58" pos:end="695:59">pm</name><operator pos:start="695:60" pos:end="695:61">-&gt;</operator><name pos:start="695:62" pos:end="695:76">pcihp_bridge_en</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="699:17" pos:end="729:17"><if pos:start="699:17" pos:end="729:17">if <condition pos:start="699:20" pos:end="699:60">(<expr pos:start="699:21" pos:end="699:59"><name pos:start="699:21" pos:end="699:37"><name pos:start="699:21" pos:end="699:24">misc</name><operator pos:start="699:25" pos:end="699:26">-&gt;</operator><name pos:start="699:27" pos:end="699:37">tpm_version</name></name> <operator pos:start="699:39" pos:end="699:40">!=</operator> <name pos:start="699:42" pos:end="699:59">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="699:62" pos:end="729:17">{<block_content pos:start="701:21" pos:end="727:43">

                    <expr_stmt pos:start="701:21" pos:end="701:48"><expr pos:start="701:21" pos:end="701:47"><name pos:start="701:21" pos:end="701:23">dev</name> <operator pos:start="701:25" pos:end="701:25">=</operator> <call pos:start="701:27" pos:end="701:47"><name pos:start="701:27" pos:end="701:36">aml_device</name><argument_list pos:start="701:37" pos:end="701:47">(<argument pos:start="701:38" pos:end="701:46"><expr pos:start="701:38" pos:end="701:46"><literal type="string" pos:start="701:38" pos:end="701:46">"ISA.TPM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="703:21" pos:end="703:82"><expr pos:start="703:21" pos:end="703:81"><call pos:start="703:21" pos:end="703:81"><name pos:start="703:21" pos:end="703:30">aml_append</name><argument_list pos:start="703:31" pos:end="703:81">(<argument pos:start="703:32" pos:end="703:34"><expr pos:start="703:32" pos:end="703:34"><name pos:start="703:32" pos:end="703:34">dev</name></expr></argument>, <argument pos:start="703:37" pos:end="703:80"><expr pos:start="703:37" pos:end="703:80"><call pos:start="703:37" pos:end="703:80"><name pos:start="703:37" pos:end="703:49">aml_name_decl</name><argument_list pos:start="703:50" pos:end="703:80">(<argument pos:start="703:51" pos:end="703:56"><expr pos:start="703:51" pos:end="703:56"><literal type="string" pos:start="703:51" pos:end="703:56">"_HID"</literal></expr></argument>, <argument pos:start="703:59" pos:end="703:79"><expr pos:start="703:59" pos:end="703:79"><call pos:start="703:59" pos:end="703:79"><name pos:start="703:59" pos:end="703:68">aml_eisaid</name><argument_list pos:start="703:69" pos:end="703:79">(<argument pos:start="703:70" pos:end="703:78"><expr pos:start="703:70" pos:end="703:78"><literal type="string" pos:start="703:70" pos:end="703:78">"PNP0C31"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="705:21" pos:end="705:73"><expr pos:start="705:21" pos:end="705:72"><call pos:start="705:21" pos:end="705:72"><name pos:start="705:21" pos:end="705:30">aml_append</name><argument_list pos:start="705:31" pos:end="705:72">(<argument pos:start="705:32" pos:end="705:34"><expr pos:start="705:32" pos:end="705:34"><name pos:start="705:32" pos:end="705:34">dev</name></expr></argument>, <argument pos:start="705:37" pos:end="705:71"><expr pos:start="705:37" pos:end="705:71"><call pos:start="705:37" pos:end="705:71"><name pos:start="705:37" pos:end="705:49">aml_name_decl</name><argument_list pos:start="705:50" pos:end="705:71">(<argument pos:start="705:51" pos:end="705:56"><expr pos:start="705:51" pos:end="705:56"><literal type="string" pos:start="705:51" pos:end="705:56">"_STA"</literal></expr></argument>, <argument pos:start="705:59" pos:end="705:70"><expr pos:start="705:59" pos:end="705:70"><call pos:start="705:59" pos:end="705:70"><name pos:start="705:59" pos:end="705:65">aml_int</name><argument_list pos:start="705:66" pos:end="705:70">(<argument pos:start="705:67" pos:end="705:69"><expr pos:start="705:67" pos:end="705:69"><literal type="number" pos:start="705:67" pos:end="705:69">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="707:21" pos:end="707:50"><expr pos:start="707:21" pos:end="707:49"><name pos:start="707:21" pos:end="707:23">crs</name> <operator pos:start="707:25" pos:end="707:25">=</operator> <call pos:start="707:27" pos:end="707:49"><name pos:start="707:27" pos:end="707:47">aml_resource_template</name><argument_list pos:start="707:48" pos:end="707:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="709:21" pos:end="711:67"><expr pos:start="709:21" pos:end="711:66"><call pos:start="709:21" pos:end="711:66"><name pos:start="709:21" pos:end="709:30">aml_append</name><argument_list pos:start="709:31" pos:end="711:66">(<argument pos:start="709:32" pos:end="709:34"><expr pos:start="709:32" pos:end="709:34"><name pos:start="709:32" pos:end="709:34">crs</name></expr></argument>, <argument pos:start="709:37" pos:end="711:65"><expr pos:start="709:37" pos:end="711:65"><call pos:start="709:37" pos:end="711:65"><name pos:start="709:37" pos:end="709:54">aml_memory32_fixed</name><argument_list pos:start="709:55" pos:end="711:65">(<argument pos:start="709:56" pos:end="709:72"><expr pos:start="709:56" pos:end="709:72"><name pos:start="709:56" pos:end="709:72">TPM_TIS_ADDR_BASE</name></expr></argument>,

                               <argument pos:start="711:32" pos:end="711:48"><expr pos:start="711:32" pos:end="711:48"><name pos:start="711:32" pos:end="711:48">TPM_TIS_ADDR_SIZE</name></expr></argument>, <argument pos:start="711:51" pos:end="711:64"><expr pos:start="711:51" pos:end="711:64"><name pos:start="711:51" pos:end="711:64">AML_READ_WRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="713:21" pos:end="721:23">/*

                        FIXME: TPM_TIS_IRQ=5 conflicts with PNP0C0F irqs,

                        Rewrite to take IRQ from TPM device model and

                        fix default IRQ value there to use some unused IRQ

                     */</comment>

                    <comment type="block" pos:start="723:21" pos:end="723:73">/* aml_append(crs, aml_irq_no_flags(TPM_TIS_IRQ)); */</comment>

                    <expr_stmt pos:start="725:21" pos:end="725:64"><expr pos:start="725:21" pos:end="725:63"><call pos:start="725:21" pos:end="725:63"><name pos:start="725:21" pos:end="725:30">aml_append</name><argument_list pos:start="725:31" pos:end="725:63">(<argument pos:start="725:32" pos:end="725:34"><expr pos:start="725:32" pos:end="725:34"><name pos:start="725:32" pos:end="725:34">dev</name></expr></argument>, <argument pos:start="725:37" pos:end="725:62"><expr pos:start="725:37" pos:end="725:62"><call pos:start="725:37" pos:end="725:62"><name pos:start="725:37" pos:end="725:49">aml_name_decl</name><argument_list pos:start="725:50" pos:end="725:62">(<argument pos:start="725:51" pos:end="725:56"><expr pos:start="725:51" pos:end="725:56"><literal type="string" pos:start="725:51" pos:end="725:56">"_CRS"</literal></expr></argument>, <argument pos:start="725:59" pos:end="725:61"><expr pos:start="725:59" pos:end="725:61"><name pos:start="725:59" pos:end="725:61">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="727:21" pos:end="727:43"><expr pos:start="727:21" pos:end="727:42"><call pos:start="727:21" pos:end="727:42"><name pos:start="727:21" pos:end="727:30">aml_append</name><argument_list pos:start="727:31" pos:end="727:42">(<argument pos:start="727:32" pos:end="727:36"><expr pos:start="727:32" pos:end="727:36"><name pos:start="727:32" pos:end="727:36">scope</name></expr></argument>, <argument pos:start="727:39" pos:end="727:41"><expr pos:start="727:39" pos:end="727:41"><name pos:start="727:39" pos:end="727:41">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="733:17" pos:end="733:44"><expr pos:start="733:17" pos:end="733:43"><call pos:start="733:17" pos:end="733:43"><name pos:start="733:17" pos:end="733:26">aml_append</name><argument_list pos:start="733:27" pos:end="733:43">(<argument pos:start="733:28" pos:end="733:35"><expr pos:start="733:28" pos:end="733:35"><name pos:start="733:28" pos:end="733:35">sb_scope</name></expr></argument>, <argument pos:start="733:38" pos:end="733:42"><expr pos:start="733:38" pos:end="733:42"><name pos:start="733:38" pos:end="733:42">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="739:9" pos:end="739:35"><expr pos:start="739:9" pos:end="739:34"><call pos:start="739:9" pos:end="739:34"><name pos:start="739:9" pos:end="739:18">aml_append</name><argument_list pos:start="739:19" pos:end="739:34">(<argument pos:start="739:20" pos:end="739:23"><expr pos:start="739:20" pos:end="739:23"><name pos:start="739:20" pos:end="739:23">dsdt</name></expr></argument>, <argument pos:start="739:26" pos:end="739:33"><expr pos:start="739:26" pos:end="739:33"><name pos:start="739:26" pos:end="739:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="745:5" pos:end="745:69">/* copy AML table into ACPI tables blob and patch header there */</comment>

    <expr_stmt pos:start="747:5" pos:end="747:69"><expr pos:start="747:5" pos:end="747:68"><call pos:start="747:5" pos:end="747:68"><name pos:start="747:5" pos:end="747:23">g_array_append_vals</name><argument_list pos:start="747:24" pos:end="747:68">(<argument pos:start="747:25" pos:end="747:34"><expr pos:start="747:25" pos:end="747:34"><name pos:start="747:25" pos:end="747:34">table_data</name></expr></argument>, <argument pos:start="747:37" pos:end="747:51"><expr pos:start="747:37" pos:end="747:51"><name pos:start="747:37" pos:end="747:51"><name pos:start="747:37" pos:end="747:40">dsdt</name><operator pos:start="747:41" pos:end="747:42">-&gt;</operator><name pos:start="747:43" pos:end="747:45">buf</name><operator pos:start="747:46" pos:end="747:47">-&gt;</operator><name pos:start="747:48" pos:end="747:51">data</name></name></expr></argument>, <argument pos:start="747:54" pos:end="747:67"><expr pos:start="747:54" pos:end="747:67"><name pos:start="747:54" pos:end="747:67"><name pos:start="747:54" pos:end="747:57">dsdt</name><operator pos:start="747:58" pos:end="747:59">-&gt;</operator><name pos:start="747:60" pos:end="747:62">buf</name><operator pos:start="747:63" pos:end="747:64">-&gt;</operator><name pos:start="747:65" pos:end="747:67">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="749:5" pos:end="753:47"><expr pos:start="749:5" pos:end="753:46"><call pos:start="749:5" pos:end="753:46"><name pos:start="749:5" pos:end="749:16">build_header</name><argument_list pos:start="749:17" pos:end="753:46">(<argument pos:start="749:18" pos:end="749:23"><expr pos:start="749:18" pos:end="749:23"><name pos:start="749:18" pos:end="749:23">linker</name></expr></argument>, <argument pos:start="749:26" pos:end="749:35"><expr pos:start="749:26" pos:end="749:35"><name pos:start="749:26" pos:end="749:35">table_data</name></expr></argument>,

        <argument pos:start="751:9" pos:end="751:69"><expr pos:start="751:9" pos:end="751:69"><operator pos:start="751:9" pos:end="751:9">(</operator><name pos:start="751:10" pos:end="751:13">void</name> <operator pos:start="751:15" pos:end="751:15">*</operator><operator pos:start="751:16" pos:end="751:16">)</operator><operator pos:start="751:17" pos:end="751:17">(</operator><name pos:start="751:18" pos:end="751:33"><name pos:start="751:18" pos:end="751:27">table_data</name><operator pos:start="751:28" pos:end="751:29">-&gt;</operator><name pos:start="751:30" pos:end="751:33">data</name></name> <operator pos:start="751:35" pos:end="751:35">+</operator> <name pos:start="751:37" pos:end="751:51"><name pos:start="751:37" pos:end="751:46">table_data</name><operator pos:start="751:47" pos:end="751:48">-&gt;</operator><name pos:start="751:49" pos:end="751:51">len</name></name> <operator pos:start="751:53" pos:end="751:53">-</operator> <name pos:start="751:55" pos:end="751:68"><name pos:start="751:55" pos:end="751:58">dsdt</name><operator pos:start="751:59" pos:end="751:60">-&gt;</operator><name pos:start="751:61" pos:end="751:63">buf</name><operator pos:start="751:64" pos:end="751:65">-&gt;</operator><name pos:start="751:66" pos:end="751:68">len</name></name><operator pos:start="751:69" pos:end="751:69">)</operator></expr></argument>,

        <argument pos:start="753:9" pos:end="753:14"><expr pos:start="753:9" pos:end="753:14"><literal type="string" pos:start="753:9" pos:end="753:14">"DSDT"</literal></expr></argument>, <argument pos:start="753:17" pos:end="753:30"><expr pos:start="753:17" pos:end="753:30"><name pos:start="753:17" pos:end="753:30"><name pos:start="753:17" pos:end="753:20">dsdt</name><operator pos:start="753:21" pos:end="753:22">-&gt;</operator><name pos:start="753:23" pos:end="753:25">buf</name><operator pos:start="753:26" pos:end="753:27">-&gt;</operator><name pos:start="753:28" pos:end="753:30">len</name></name></expr></argument>, <argument pos:start="753:33" pos:end="753:33"><expr pos:start="753:33" pos:end="753:33"><literal type="number" pos:start="753:33" pos:end="753:33">1</literal></expr></argument>, <argument pos:start="753:36" pos:end="753:39"><expr pos:start="753:36" pos:end="753:39"><name pos:start="753:36" pos:end="753:39">NULL</name></expr></argument>, <argument pos:start="753:42" pos:end="753:45"><expr pos:start="753:42" pos:end="753:45"><name pos:start="753:42" pos:end="753:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="755:5" pos:end="755:25"><expr pos:start="755:5" pos:end="755:24"><call pos:start="755:5" pos:end="755:24"><name pos:start="755:5" pos:end="755:22">free_aml_allocator</name><argument_list pos:start="755:23" pos:end="755:24">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
