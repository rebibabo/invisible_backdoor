<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24325.c" pos:tabs="8"><function pos:start="1:1" pos:end="361:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">bootp_reply</name><parameter_list pos:start="1:24" pos:end="1:63">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:29">Slirp</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:36">slirp</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:62"><decl pos:start="1:39" pos:end="1:62"><type pos:start="1:39" pos:end="1:62"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:50">struct</name> <name pos:start="1:52" pos:end="1:58">bootp_t</name></name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">bp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="361:1">{<block_content pos:start="5:5" pos:end="359:57">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">BOOTPClient</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">bc</name> <init pos:start="5:21" pos:end="5:26">= <expr pos:start="5:23" pos:end="5:26"><name pos:start="5:23" pos:end="5:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:15">mbuf</name></name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">m</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:18">bootp_t</name></name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">rbp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:22">sockaddr_in</name></name></type> <name pos:start="11:24" pos:end="11:28">saddr</name></decl>, <decl pos:start="11:31" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:22"/><name pos:start="11:31" pos:end="11:35">daddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:18">in_addr</name></name></type> <name pos:start="13:20" pos:end="13:28">preq_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:21">dhcp_msg_type</name></decl>, <decl pos:start="15:24" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:24" pos:end="15:26">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:14">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:36"><name pos:start="19:13" pos:end="19:26">client_ethaddr</name><index pos:start="19:27" pos:end="19:36">[<expr pos:start="19:28" pos:end="19:35"><name pos:start="19:28" pos:end="19:35">ETH_ALEN</name></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:37">/* extract exact DHCP msg type */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:48"><expr pos:start="25:5" pos:end="25:47"><call pos:start="25:5" pos:end="25:47"><name pos:start="25:5" pos:end="25:15">dhcp_decode</name><argument_list pos:start="25:16" pos:end="25:47">(<argument pos:start="25:17" pos:end="25:18"><expr pos:start="25:17" pos:end="25:18"><name pos:start="25:17" pos:end="25:18">bp</name></expr></argument>, <argument pos:start="25:21" pos:end="25:34"><expr pos:start="25:21" pos:end="25:34"><operator pos:start="25:21" pos:end="25:21">&amp;</operator><name pos:start="25:22" pos:end="25:34">dhcp_msg_type</name></expr></argument>, <argument pos:start="25:37" pos:end="25:46"><expr pos:start="25:37" pos:end="25:46"><operator pos:start="25:37" pos:end="25:37">&amp;</operator><name pos:start="25:38" pos:end="25:46">preq_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:71"><expr pos:start="27:5" pos:end="27:70"><call pos:start="27:5" pos:end="27:70"><name pos:start="27:5" pos:end="27:11">DPRINTF</name><argument_list pos:start="27:12" pos:end="27:70">(<argument pos:start="27:13" pos:end="27:43"><expr pos:start="27:13" pos:end="27:43"><literal type="string" pos:start="27:13" pos:end="27:43">"bootp packet op=%d msgtype=%d"</literal></expr></argument>, <argument pos:start="27:46" pos:end="27:54"><expr pos:start="27:46" pos:end="27:54"><name pos:start="27:46" pos:end="27:54"><name pos:start="27:46" pos:end="27:47">bp</name><operator pos:start="27:48" pos:end="27:49">-&gt;</operator><name pos:start="27:50" pos:end="27:54">bp_op</name></name></expr></argument>, <argument pos:start="27:57" pos:end="27:69"><expr pos:start="27:57" pos:end="27:69"><name pos:start="27:57" pos:end="27:69">dhcp_msg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:22"><if pos:start="29:5" pos:end="31:70">if <condition pos:start="29:8" pos:end="29:38">(<expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:17">preq_addr</name><operator pos:start="29:18" pos:end="29:18">.</operator><name pos:start="29:19" pos:end="29:24">s_addr</name></name> <operator pos:start="29:26" pos:end="29:27">!=</operator> <call pos:start="29:29" pos:end="29:37"><name pos:start="29:29" pos:end="29:33">htonl</name><argument_list pos:start="29:34" pos:end="29:37">(<argument pos:start="29:35" pos:end="29:36"><expr pos:start="29:35" pos:end="29:36"><literal type="number" pos:start="29:35" pos:end="29:36">0L</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:70"><block_content pos:start="31:9" pos:end="31:70">

        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><call pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:15">DPRINTF</name><argument_list pos:start="31:16" pos:end="31:69">(<argument pos:start="31:17" pos:end="31:43"><expr pos:start="31:17" pos:end="31:43"><literal type="string" pos:start="31:17" pos:end="31:31">" req_addr=%08"</literal> <name pos:start="31:33" pos:end="31:38">PRIx32</name> <literal type="string" pos:start="31:40" pos:end="31:43">"\n"</literal></expr></argument>, <argument pos:start="31:46" pos:end="31:68"><expr pos:start="31:46" pos:end="31:68"><call pos:start="31:46" pos:end="31:68"><name pos:start="31:46" pos:end="31:50">ntohl</name><argument_list pos:start="31:51" pos:end="31:68">(<argument pos:start="31:52" pos:end="31:67"><expr pos:start="31:52" pos:end="31:67"><name pos:start="31:52" pos:end="31:67"><name pos:start="31:52" pos:end="31:60">preq_addr</name><operator pos:start="31:61" pos:end="31:61">.</operator><name pos:start="31:62" pos:end="31:67">s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="33:5" pos:end="35:22">else<block type="pseudo" pos:start="35:9" pos:end="35:22"><block_content pos:start="35:9" pos:end="35:22">

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><call pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:15">DPRINTF</name><argument_list pos:start="35:16" pos:end="35:21">(<argument pos:start="35:17" pos:end="35:20"><expr pos:start="35:17" pos:end="35:20"><literal type="string" pos:start="35:17" pos:end="35:20">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="39:5" pos:end="41:36"><if pos:start="39:5" pos:end="41:36">if <condition pos:start="39:8" pos:end="39:27">(<expr pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:21">dhcp_msg_type</name> <operator pos:start="39:23" pos:end="39:24">==</operator> <literal type="number" pos:start="39:26" pos:end="39:26">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:36"><block_content pos:start="41:9" pos:end="41:36">

        <expr_stmt pos:start="41:9" pos:end="41:36"><expr pos:start="41:9" pos:end="41:35"><name pos:start="41:9" pos:end="41:21">dhcp_msg_type</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:35">DHCPREQUEST</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="41:38" pos:end="41:76">/* Force reply for old BOOTP clients */</comment>



    <if_stmt pos:start="45:5" pos:end="49:15"><if pos:start="45:5" pos:end="49:15">if <condition pos:start="45:8" pos:end="47:37">(<expr pos:start="45:9" pos:end="47:36"><name pos:start="45:9" pos:end="45:21">dhcp_msg_type</name> <operator pos:start="45:23" pos:end="45:24">!=</operator> <name pos:start="45:26" pos:end="45:37">DHCPDISCOVER</name> <operator pos:start="45:39" pos:end="45:40">&amp;&amp;</operator>

        <name pos:start="47:9" pos:end="47:21">dhcp_msg_type</name> <operator pos:start="47:23" pos:end="47:24">!=</operator> <name pos:start="47:26" pos:end="47:36">DHCPREQUEST</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:15"><block_content pos:start="49:9" pos:end="49:15">

        <return pos:start="49:9" pos:end="49:15">return;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:58">/* Get client's hardware address from bootp request */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:52"><expr pos:start="55:5" pos:end="55:51"><call pos:start="55:5" pos:end="55:51"><name pos:start="55:5" pos:end="55:10">memcpy</name><argument_list pos:start="55:11" pos:end="55:51">(<argument pos:start="55:12" pos:end="55:25"><expr pos:start="55:12" pos:end="55:25"><name pos:start="55:12" pos:end="55:25">client_ethaddr</name></expr></argument>, <argument pos:start="55:28" pos:end="55:40"><expr pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:29">bp</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:40">bp_hwaddr</name></name></expr></argument>, <argument pos:start="55:43" pos:end="55:50"><expr pos:start="55:43" pos:end="55:50"><name pos:start="55:43" pos:end="55:50">ETH_ALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:5">m</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <call pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:13">m_get</name><argument_list pos:start="59:14" pos:end="59:20">(<argument pos:start="59:15" pos:end="59:19"><expr pos:start="59:15" pos:end="59:19"><name pos:start="59:15" pos:end="59:19">slirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:11">(<expr pos:start="61:9" pos:end="61:10"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:10">m</name></expr>)</condition> <block pos:start="61:13" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:15">

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:31"><expr pos:start="67:5" pos:end="67:30"><name pos:start="67:5" pos:end="67:13"><name pos:start="67:5" pos:end="67:5">m</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:13">m_data</name></name> <operator pos:start="67:15" pos:end="67:16">+=</operator> <name pos:start="67:18" pos:end="67:30">IF_MAXLINKHDR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:38"><expr pos:start="69:5" pos:end="69:37"><name pos:start="69:5" pos:end="69:7">rbp</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <operator pos:start="69:11" pos:end="69:11">(</operator>struct <name pos:start="69:19" pos:end="69:25">bootp_t</name> <operator pos:start="69:27" pos:end="69:27">*</operator><operator pos:start="69:28" pos:end="69:28">)</operator><name pos:start="69:29" pos:end="69:37"><name pos:start="69:29" pos:end="69:29">m</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:37">m_data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:41"><expr pos:start="71:5" pos:end="71:40"><name pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:5">m</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:13">m_data</name></name> <operator pos:start="71:15" pos:end="71:16">+=</operator> <sizeof pos:start="71:18" pos:end="71:40">sizeof<argument_list pos:start="71:24" pos:end="71:40">(<argument pos:start="71:25" pos:end="71:39"><expr pos:start="71:25" pos:end="71:39">struct <name pos:start="71:32" pos:end="71:39">udpiphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:43"><expr pos:start="73:5" pos:end="73:42"><call pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:10">memset</name><argument_list pos:start="73:11" pos:end="73:42">(<argument pos:start="73:12" pos:end="73:14"><expr pos:start="73:12" pos:end="73:14"><name pos:start="73:12" pos:end="73:14">rbp</name></expr></argument>, <argument pos:start="73:17" pos:end="73:17"><expr pos:start="73:17" pos:end="73:17"><literal type="number" pos:start="73:17" pos:end="73:17">0</literal></expr></argument>, <argument pos:start="73:20" pos:end="73:41"><expr pos:start="73:20" pos:end="73:41"><sizeof pos:start="73:20" pos:end="73:41">sizeof<argument_list pos:start="73:26" pos:end="73:41">(<argument pos:start="73:27" pos:end="73:40"><expr pos:start="73:27" pos:end="73:40">struct <name pos:start="73:34" pos:end="73:40">bootp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="141:5"><if pos:start="77:5" pos:end="109:5">if <condition pos:start="77:8" pos:end="77:38">(<expr pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:21">dhcp_msg_type</name> <operator pos:start="77:23" pos:end="77:24">==</operator> <name pos:start="77:26" pos:end="77:37">DHCPDISCOVER</name></expr>)</condition> <block pos:start="77:40" pos:end="109:5">{<block_content pos:start="79:9" pos:end="107:54">

        <if_stmt pos:start="79:9" pos:end="89:9"><if pos:start="79:9" pos:end="89:9">if <condition pos:start="79:12" pos:end="79:42">(<expr pos:start="79:13" pos:end="79:41"><name pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:21">preq_addr</name><operator pos:start="79:22" pos:end="79:22">.</operator><name pos:start="79:23" pos:end="79:28">s_addr</name></name> <operator pos:start="79:30" pos:end="79:31">!=</operator> <call pos:start="79:33" pos:end="79:41"><name pos:start="79:33" pos:end="79:37">htonl</name><argument_list pos:start="79:38" pos:end="79:41">(<argument pos:start="79:39" pos:end="79:40"><expr pos:start="79:39" pos:end="79:40"><literal type="number" pos:start="79:39" pos:end="79:40">0L</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:44" pos:end="89:9">{<block_content pos:start="81:13" pos:end="87:13">

            <expr_stmt pos:start="81:13" pos:end="81:65"><expr pos:start="81:13" pos:end="81:64"><name pos:start="81:13" pos:end="81:14">bc</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <call pos:start="81:18" pos:end="81:64"><name pos:start="81:18" pos:end="81:29">request_addr</name><argument_list pos:start="81:30" pos:end="81:64">(<argument pos:start="81:31" pos:end="81:35"><expr pos:start="81:31" pos:end="81:35"><name pos:start="81:31" pos:end="81:35">slirp</name></expr></argument>, <argument pos:start="81:38" pos:end="81:47"><expr pos:start="81:38" pos:end="81:47"><operator pos:start="81:38" pos:end="81:38">&amp;</operator><name pos:start="81:39" pos:end="81:47">preq_addr</name></expr></argument>, <argument pos:start="81:50" pos:end="81:63"><expr pos:start="81:50" pos:end="81:63"><name pos:start="81:50" pos:end="81:63">client_ethaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="87:13"><if pos:start="83:13" pos:end="87:13">if <condition pos:start="83:16" pos:end="83:19">(<expr pos:start="83:17" pos:end="83:18"><name pos:start="83:17" pos:end="83:18">bc</name></expr>)</condition> <block pos:start="83:21" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:43">

                <expr_stmt pos:start="85:17" pos:end="85:43"><expr pos:start="85:17" pos:end="85:42"><name pos:start="85:17" pos:end="85:30"><name pos:start="85:17" pos:end="85:21">daddr</name><operator pos:start="85:22" pos:end="85:22">.</operator><name pos:start="85:23" pos:end="85:30">sin_addr</name></name> <operator pos:start="85:32" pos:end="85:32">=</operator> <name pos:start="85:34" pos:end="85:42">preq_addr</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="105:9"><if pos:start="91:9" pos:end="105:9">if <condition pos:start="91:12" pos:end="91:16">(<expr pos:start="91:13" pos:end="91:15"><operator pos:start="91:13" pos:end="91:13">!</operator><name pos:start="91:14" pos:end="91:15">bc</name></expr>)</condition> <block pos:start="91:18" pos:end="105:9">{<block_content pos:start="93:10" pos:end="103:13">

         <label pos:start="93:10" pos:end="93:18"><name pos:start="93:10" pos:end="93:17">new_addr</name>:</label>

            <expr_stmt pos:start="95:13" pos:end="95:70"><expr pos:start="95:13" pos:end="95:69"><name pos:start="95:13" pos:end="95:14">bc</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:69"><name pos:start="95:18" pos:end="95:29">get_new_addr</name><argument_list pos:start="95:30" pos:end="95:69">(<argument pos:start="95:31" pos:end="95:35"><expr pos:start="95:31" pos:end="95:35"><name pos:start="95:31" pos:end="95:35">slirp</name></expr></argument>, <argument pos:start="95:38" pos:end="95:52"><expr pos:start="95:38" pos:end="95:52"><operator pos:start="95:38" pos:end="95:38">&amp;</operator><name pos:start="95:39" pos:end="95:52"><name pos:start="95:39" pos:end="95:43">daddr</name><operator pos:start="95:44" pos:end="95:44">.</operator><name pos:start="95:45" pos:end="95:52">sin_addr</name></name></expr></argument>, <argument pos:start="95:55" pos:end="95:68"><expr pos:start="95:55" pos:end="95:68"><name pos:start="95:55" pos:end="95:68">client_ethaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="103:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:20">(<expr pos:start="97:17" pos:end="97:19"><operator pos:start="97:17" pos:end="97:17">!</operator><name pos:start="97:18" pos:end="97:19">bc</name></expr>)</condition> <block pos:start="97:22" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:23">

                <expr_stmt pos:start="99:17" pos:end="99:45"><expr pos:start="99:17" pos:end="99:44"><call pos:start="99:17" pos:end="99:44"><name pos:start="99:17" pos:end="99:23">DPRINTF</name><argument_list pos:start="99:24" pos:end="99:44">(<argument pos:start="99:25" pos:end="99:43"><expr pos:start="99:25" pos:end="99:43"><literal type="string" pos:start="99:25" pos:end="99:43">"no address left\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="101:17" pos:end="101:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:54"><expr pos:start="107:9" pos:end="107:53"><call pos:start="107:9" pos:end="107:53"><name pos:start="107:9" pos:end="107:14">memcpy</name><argument_list pos:start="107:15" pos:end="107:53">(<argument pos:start="107:16" pos:end="107:26"><expr pos:start="107:16" pos:end="107:26"><name pos:start="107:16" pos:end="107:26"><name pos:start="107:16" pos:end="107:17">bc</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:26">macaddr</name></name></expr></argument>, <argument pos:start="107:29" pos:end="107:42"><expr pos:start="107:29" pos:end="107:42"><name pos:start="107:29" pos:end="107:42">client_ethaddr</name></expr></argument>, <argument pos:start="107:45" pos:end="107:52"><expr pos:start="107:45" pos:end="107:52"><name pos:start="107:45" pos:end="107:52">ETH_ALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="127:5">else if <condition pos:start="109:15" pos:end="109:45">(<expr pos:start="109:16" pos:end="109:44"><name pos:start="109:16" pos:end="109:31"><name pos:start="109:16" pos:end="109:24">preq_addr</name><operator pos:start="109:25" pos:end="109:25">.</operator><name pos:start="109:26" pos:end="109:31">s_addr</name></name> <operator pos:start="109:33" pos:end="109:34">!=</operator> <call pos:start="109:36" pos:end="109:44"><name pos:start="109:36" pos:end="109:40">htonl</name><argument_list pos:start="109:41" pos:end="109:44">(<argument pos:start="109:42" pos:end="109:43"><expr pos:start="109:42" pos:end="109:43"><literal type="number" pos:start="109:42" pos:end="109:43">0L</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:47" pos:end="127:5">{<block_content pos:start="111:9" pos:end="125:9">

        <expr_stmt pos:start="111:9" pos:end="111:61"><expr pos:start="111:9" pos:end="111:60"><name pos:start="111:9" pos:end="111:10">bc</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <call pos:start="111:14" pos:end="111:60"><name pos:start="111:14" pos:end="111:25">request_addr</name><argument_list pos:start="111:26" pos:end="111:60">(<argument pos:start="111:27" pos:end="111:31"><expr pos:start="111:27" pos:end="111:31"><name pos:start="111:27" pos:end="111:31">slirp</name></expr></argument>, <argument pos:start="111:34" pos:end="111:43"><expr pos:start="111:34" pos:end="111:43"><operator pos:start="111:34" pos:end="111:34">&amp;</operator><name pos:start="111:35" pos:end="111:43">preq_addr</name></expr></argument>, <argument pos:start="111:46" pos:end="111:59"><expr pos:start="111:46" pos:end="111:59"><name pos:start="111:46" pos:end="111:59">client_ethaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="125:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:15">(<expr pos:start="113:13" pos:end="113:14"><name pos:start="113:13" pos:end="113:14">bc</name></expr>)</condition> <block pos:start="113:17" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:58">

            <expr_stmt pos:start="115:13" pos:end="115:39"><expr pos:start="115:13" pos:end="115:38"><name pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:17">daddr</name><operator pos:start="115:18" pos:end="115:18">.</operator><name pos:start="115:19" pos:end="115:26">sin_addr</name></name> <operator pos:start="115:28" pos:end="115:28">=</operator> <name pos:start="115:30" pos:end="115:38">preq_addr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:58"><expr pos:start="117:13" pos:end="117:57"><call pos:start="117:13" pos:end="117:57"><name pos:start="117:13" pos:end="117:18">memcpy</name><argument_list pos:start="117:19" pos:end="117:57">(<argument pos:start="117:20" pos:end="117:30"><expr pos:start="117:20" pos:end="117:30"><name pos:start="117:20" pos:end="117:30"><name pos:start="117:20" pos:end="117:21">bc</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:30">macaddr</name></name></expr></argument>, <argument pos:start="117:33" pos:end="117:46"><expr pos:start="117:33" pos:end="117:46"><name pos:start="117:33" pos:end="117:46">client_ethaddr</name></expr></argument>, <argument pos:start="117:49" pos:end="117:56"><expr pos:start="117:49" pos:end="117:56"><name pos:start="117:49" pos:end="117:56">ETH_ALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="125:9">else <block pos:start="119:16" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:47">

            <comment type="block" pos:start="121:13" pos:end="121:54">/* DHCPNAKs should be sent to broadcast */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:47"><expr pos:start="123:13" pos:end="123:46"><name pos:start="123:13" pos:end="123:33"><name pos:start="123:13" pos:end="123:17">daddr</name><operator pos:start="123:18" pos:end="123:18">.</operator><name pos:start="123:19" pos:end="123:26">sin_addr</name><operator pos:start="123:27" pos:end="123:27">.</operator><name pos:start="123:28" pos:end="123:33">s_addr</name></name> <operator pos:start="123:35" pos:end="123:35">=</operator> <literal type="number" pos:start="123:37" pos:end="123:46">0xffffffff</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="141:5">else <block pos:start="127:12" pos:end="141:5">{<block_content pos:start="129:9" pos:end="139:9">

        <expr_stmt pos:start="129:9" pos:end="129:62"><expr pos:start="129:9" pos:end="129:61"><name pos:start="129:9" pos:end="129:10">bc</name> <operator pos:start="129:12" pos:end="129:12">=</operator> <call pos:start="129:14" pos:end="129:61"><name pos:start="129:14" pos:end="129:22">find_addr</name><argument_list pos:start="129:23" pos:end="129:61">(<argument pos:start="129:24" pos:end="129:28"><expr pos:start="129:24" pos:end="129:28"><name pos:start="129:24" pos:end="129:28">slirp</name></expr></argument>, <argument pos:start="129:31" pos:end="129:45"><expr pos:start="129:31" pos:end="129:45"><operator pos:start="129:31" pos:end="129:31">&amp;</operator><name pos:start="129:32" pos:end="129:45"><name pos:start="129:32" pos:end="129:36">daddr</name><operator pos:start="129:37" pos:end="129:37">.</operator><name pos:start="129:38" pos:end="129:45">sin_addr</name></name></expr></argument>, <argument pos:start="129:48" pos:end="129:60"><expr pos:start="129:48" pos:end="129:60"><name pos:start="129:48" pos:end="129:60"><name pos:start="129:48" pos:end="129:49">bp</name><operator pos:start="129:50" pos:end="129:51">-&gt;</operator><name pos:start="129:52" pos:end="129:60">bp_hwaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="139:9">if <condition pos:start="131:12" pos:end="131:16">(<expr pos:start="131:13" pos:end="131:15"><operator pos:start="131:13" pos:end="131:13">!</operator><name pos:start="131:14" pos:end="131:15">bc</name></expr>)</condition> <block pos:start="131:18" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:26">

            <comment type="block" pos:start="133:13" pos:end="135:73">/* if never assigned, behaves as if it was already

               assigned (windows fix because it remembers its address) */</comment>

            <goto pos:start="137:13" pos:end="137:26">goto <name pos:start="137:18" pos:end="137:25">new_addr</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:46">/* Update ARP table for this IP address */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:64"><expr pos:start="147:5" pos:end="147:63"><call pos:start="147:5" pos:end="147:63"><name pos:start="147:5" pos:end="147:17">arp_table_add</name><argument_list pos:start="147:18" pos:end="147:63">(<argument pos:start="147:19" pos:end="147:23"><expr pos:start="147:19" pos:end="147:23"><name pos:start="147:19" pos:end="147:23">slirp</name></expr></argument>, <argument pos:start="147:26" pos:end="147:46"><expr pos:start="147:26" pos:end="147:46"><name pos:start="147:26" pos:end="147:46"><name pos:start="147:26" pos:end="147:30">daddr</name><operator pos:start="147:31" pos:end="147:31">.</operator><name pos:start="147:32" pos:end="147:39">sin_addr</name><operator pos:start="147:40" pos:end="147:40">.</operator><name pos:start="147:41" pos:end="147:46">s_addr</name></name></expr></argument>, <argument pos:start="147:49" pos:end="147:62"><expr pos:start="147:49" pos:end="147:62"><name pos:start="147:49" pos:end="147:62">client_ethaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:39"><expr pos:start="151:5" pos:end="151:38"><name pos:start="151:5" pos:end="151:18"><name pos:start="151:5" pos:end="151:9">saddr</name><operator pos:start="151:10" pos:end="151:10">.</operator><name pos:start="151:11" pos:end="151:18">sin_addr</name></name> <operator pos:start="151:20" pos:end="151:20">=</operator> <name pos:start="151:22" pos:end="151:38"><name pos:start="151:22" pos:end="151:26">slirp</name><operator pos:start="151:27" pos:end="151:28">-&gt;</operator><name pos:start="151:29" pos:end="151:38">vhost_addr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:41"><expr pos:start="153:5" pos:end="153:40"><name pos:start="153:5" pos:end="153:18"><name pos:start="153:5" pos:end="153:9">saddr</name><operator pos:start="153:10" pos:end="153:10">.</operator><name pos:start="153:11" pos:end="153:18">sin_port</name></name> <operator pos:start="153:20" pos:end="153:20">=</operator> <call pos:start="153:22" pos:end="153:40"><name pos:start="153:22" pos:end="153:26">htons</name><argument_list pos:start="153:27" pos:end="153:40">(<argument pos:start="153:28" pos:end="153:39"><expr pos:start="153:28" pos:end="153:39"><name pos:start="153:28" pos:end="153:39">BOOTP_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:41"><expr pos:start="157:5" pos:end="157:40"><name pos:start="157:5" pos:end="157:18"><name pos:start="157:5" pos:end="157:9">daddr</name><operator pos:start="157:10" pos:end="157:10">.</operator><name pos:start="157:11" pos:end="157:18">sin_port</name></name> <operator pos:start="157:20" pos:end="157:20">=</operator> <call pos:start="157:22" pos:end="157:40"><name pos:start="157:22" pos:end="157:26">htons</name><argument_list pos:start="157:27" pos:end="157:40">(<argument pos:start="157:28" pos:end="157:39"><expr pos:start="157:28" pos:end="157:39"><name pos:start="157:28" pos:end="157:39">BOOTP_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:29"><expr pos:start="161:5" pos:end="161:28"><name pos:start="161:5" pos:end="161:14"><name pos:start="161:5" pos:end="161:7">rbp</name><operator pos:start="161:8" pos:end="161:9">-&gt;</operator><name pos:start="161:10" pos:end="161:14">bp_op</name></name> <operator pos:start="161:16" pos:end="161:16">=</operator> <name pos:start="161:18" pos:end="161:28">BOOTP_REPLY</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:29"><expr pos:start="163:5" pos:end="163:28"><name pos:start="163:5" pos:end="163:15"><name pos:start="163:5" pos:end="163:7">rbp</name><operator pos:start="163:8" pos:end="163:9">-&gt;</operator><name pos:start="163:10" pos:end="163:15">bp_xid</name></name> <operator pos:start="163:17" pos:end="163:17">=</operator> <name pos:start="163:19" pos:end="163:28"><name pos:start="163:19" pos:end="163:20">bp</name><operator pos:start="163:21" pos:end="163:22">-&gt;</operator><name pos:start="163:23" pos:end="163:28">bp_xid</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:22"><expr pos:start="165:5" pos:end="165:21"><name pos:start="165:5" pos:end="165:17"><name pos:start="165:5" pos:end="165:7">rbp</name><operator pos:start="165:8" pos:end="165:9">-&gt;</operator><name pos:start="165:10" pos:end="165:17">bp_htype</name></name> <operator pos:start="165:19" pos:end="165:19">=</operator> <literal type="number" pos:start="165:21" pos:end="165:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:21"><expr pos:start="167:5" pos:end="167:20"><name pos:start="167:5" pos:end="167:16"><name pos:start="167:5" pos:end="167:7">rbp</name><operator pos:start="167:8" pos:end="167:9">-&gt;</operator><name pos:start="167:10" pos:end="167:16">bp_hlen</name></name> <operator pos:start="167:18" pos:end="167:18">=</operator> <literal type="number" pos:start="167:20" pos:end="167:20">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:52"><expr pos:start="169:5" pos:end="169:51"><call pos:start="169:5" pos:end="169:51"><name pos:start="169:5" pos:end="169:10">memcpy</name><argument_list pos:start="169:11" pos:end="169:51">(<argument pos:start="169:12" pos:end="169:25"><expr pos:start="169:12" pos:end="169:25"><name pos:start="169:12" pos:end="169:25"><name pos:start="169:12" pos:end="169:14">rbp</name><operator pos:start="169:15" pos:end="169:16">-&gt;</operator><name pos:start="169:17" pos:end="169:25">bp_hwaddr</name></name></expr></argument>, <argument pos:start="169:28" pos:end="169:40"><expr pos:start="169:28" pos:end="169:40"><name pos:start="169:28" pos:end="169:40"><name pos:start="169:28" pos:end="169:29">bp</name><operator pos:start="169:30" pos:end="169:31">-&gt;</operator><name pos:start="169:32" pos:end="169:40">bp_hwaddr</name></name></expr></argument>, <argument pos:start="169:43" pos:end="169:50"><expr pos:start="169:43" pos:end="169:50"><name pos:start="169:43" pos:end="169:50">ETH_ALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:36"><expr pos:start="173:5" pos:end="173:35"><name pos:start="173:5" pos:end="173:18"><name pos:start="173:5" pos:end="173:7">rbp</name><operator pos:start="173:8" pos:end="173:9">-&gt;</operator><name pos:start="173:10" pos:end="173:18">bp_yiaddr</name></name> <operator pos:start="173:20" pos:end="173:20">=</operator> <name pos:start="173:22" pos:end="173:35"><name pos:start="173:22" pos:end="173:26">daddr</name><operator pos:start="173:27" pos:end="173:27">.</operator><name pos:start="173:28" pos:end="173:35">sin_addr</name></name></expr>;</expr_stmt> <comment type="block" pos:start="173:38" pos:end="173:60">/* Client IP address */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:36"><expr pos:start="175:5" pos:end="175:35"><name pos:start="175:5" pos:end="175:18"><name pos:start="175:5" pos:end="175:7">rbp</name><operator pos:start="175:8" pos:end="175:9">-&gt;</operator><name pos:start="175:10" pos:end="175:18">bp_siaddr</name></name> <operator pos:start="175:20" pos:end="175:20">=</operator> <name pos:start="175:22" pos:end="175:35"><name pos:start="175:22" pos:end="175:26">saddr</name><operator pos:start="175:27" pos:end="175:27">.</operator><name pos:start="175:28" pos:end="175:35">sin_addr</name></name></expr>;</expr_stmt> <comment type="block" pos:start="175:38" pos:end="175:60">/* Server IP address */</comment>



    <expr_stmt pos:start="179:5" pos:end="179:21"><expr pos:start="179:5" pos:end="179:20"><name pos:start="179:5" pos:end="179:5">q</name> <operator pos:start="179:7" pos:end="179:7">=</operator> <name pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:11">rbp</name><operator pos:start="179:12" pos:end="179:13">-&gt;</operator><name pos:start="179:14" pos:end="179:20">bp_vend</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:33"><expr pos:start="181:5" pos:end="181:32"><call pos:start="181:5" pos:end="181:32"><name pos:start="181:5" pos:end="181:10">memcpy</name><argument_list pos:start="181:11" pos:end="181:32">(<argument pos:start="181:12" pos:end="181:12"><expr pos:start="181:12" pos:end="181:12"><name pos:start="181:12" pos:end="181:12">q</name></expr></argument>, <argument pos:start="181:15" pos:end="181:28"><expr pos:start="181:15" pos:end="181:28"><name pos:start="181:15" pos:end="181:28">rfc1533_cookie</name></expr></argument>, <argument pos:start="181:31" pos:end="181:31"><expr pos:start="181:31" pos:end="181:31"><literal type="number" pos:start="181:31" pos:end="181:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:11"><expr pos:start="183:5" pos:end="183:10"><name pos:start="183:5" pos:end="183:5">q</name> <operator pos:start="183:7" pos:end="183:8">+=</operator> <literal type="number" pos:start="183:10" pos:end="183:10">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="187:5" pos:end="345:5"><if pos:start="187:5" pos:end="319:5">if <condition pos:start="187:8" pos:end="187:11">(<expr pos:start="187:9" pos:end="187:10"><name pos:start="187:9" pos:end="187:10">bc</name></expr>)</condition> <block pos:start="187:13" pos:end="319:5">{<block_content pos:start="189:9" pos:end="317:9">

        <expr_stmt pos:start="189:9" pos:end="193:46"><expr pos:start="189:9" pos:end="193:45"><call pos:start="189:9" pos:end="193:45"><name pos:start="189:9" pos:end="189:15">DPRINTF</name><argument_list pos:start="189:16" pos:end="193:45">(<argument pos:start="189:17" pos:end="189:41"><expr pos:start="189:17" pos:end="189:41"><literal type="string" pos:start="189:17" pos:end="189:29">"%s addr=%08"</literal> <name pos:start="189:31" pos:end="189:36">PRIx32</name> <literal type="string" pos:start="189:38" pos:end="189:41">"\n"</literal></expr></argument>,

                <argument pos:start="191:17" pos:end="191:70"><expr pos:start="191:17" pos:end="191:70"><ternary pos:start="191:17" pos:end="191:70"><condition pos:start="191:17" pos:end="191:49"><expr pos:start="191:17" pos:end="191:47"><operator pos:start="191:17" pos:end="191:17">(</operator><name pos:start="191:18" pos:end="191:30">dhcp_msg_type</name> <operator pos:start="191:32" pos:end="191:33">==</operator> <name pos:start="191:35" pos:end="191:46">DHCPDISCOVER</name><operator pos:start="191:47" pos:end="191:47">)</operator></expr> ?</condition><then pos:start="191:51" pos:end="191:59"> <expr pos:start="191:51" pos:end="191:59"><literal type="string" pos:start="191:51" pos:end="191:59">"offered"</literal></expr> </then><else pos:start="191:61" pos:end="191:70">: <expr pos:start="191:63" pos:end="191:70"><literal type="string" pos:start="191:63" pos:end="191:70">"ack'ed"</literal></expr></else></ternary></expr></argument>,

                <argument pos:start="193:17" pos:end="193:44"><expr pos:start="193:17" pos:end="193:44"><call pos:start="193:17" pos:end="193:44"><name pos:start="193:17" pos:end="193:21">ntohl</name><argument_list pos:start="193:22" pos:end="193:44">(<argument pos:start="193:23" pos:end="193:43"><expr pos:start="193:23" pos:end="193:43"><name pos:start="193:23" pos:end="193:43"><name pos:start="193:23" pos:end="193:27">daddr</name><operator pos:start="193:28" pos:end="193:28">.</operator><name pos:start="193:29" pos:end="193:36">sin_addr</name><operator pos:start="193:37" pos:end="193:37">.</operator><name pos:start="193:38" pos:end="193:43">s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="197:9" pos:end="213:9"><if pos:start="197:9" pos:end="205:9">if <condition pos:start="197:12" pos:end="197:42">(<expr pos:start="197:13" pos:end="197:41"><name pos:start="197:13" pos:end="197:25">dhcp_msg_type</name> <operator pos:start="197:27" pos:end="197:28">==</operator> <name pos:start="197:30" pos:end="197:41">DHCPDISCOVER</name></expr>)</condition> <block pos:start="197:44" pos:end="205:9">{<block_content pos:start="199:13" pos:end="203:29">

            <expr_stmt pos:start="199:13" pos:end="199:36"><expr pos:start="199:13" pos:end="199:35"><operator pos:start="199:13" pos:end="199:13">*</operator><name pos:start="199:14" pos:end="199:14">q</name><operator pos:start="199:15" pos:end="199:16">++</operator> <operator pos:start="199:18" pos:end="199:18">=</operator> <name pos:start="199:20" pos:end="199:35">RFC2132_MSG_TYPE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:21"><expr pos:start="201:13" pos:end="201:20"><operator pos:start="201:13" pos:end="201:13">*</operator><name pos:start="201:14" pos:end="201:14">q</name><operator pos:start="201:15" pos:end="201:16">++</operator> <operator pos:start="201:18" pos:end="201:18">=</operator> <literal type="number" pos:start="201:20" pos:end="201:20">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:29"><expr pos:start="203:13" pos:end="203:28"><operator pos:start="203:13" pos:end="203:13">*</operator><name pos:start="203:14" pos:end="203:14">q</name><operator pos:start="203:15" pos:end="203:16">++</operator> <operator pos:start="203:18" pos:end="203:18">=</operator> <name pos:start="203:20" pos:end="203:28">DHCPOFFER</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="205:11" pos:end="213:9">else <comment type="block" pos:start="205:16" pos:end="205:32">/* DHCPREQUEST */</comment> <block pos:start="205:34" pos:end="213:9">{<block_content pos:start="207:13" pos:end="211:27">

            <expr_stmt pos:start="207:13" pos:end="207:36"><expr pos:start="207:13" pos:end="207:35"><operator pos:start="207:13" pos:end="207:13">*</operator><name pos:start="207:14" pos:end="207:14">q</name><operator pos:start="207:15" pos:end="207:16">++</operator> <operator pos:start="207:18" pos:end="207:18">=</operator> <name pos:start="207:20" pos:end="207:35">RFC2132_MSG_TYPE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:21"><expr pos:start="209:13" pos:end="209:20"><operator pos:start="209:13" pos:end="209:13">*</operator><name pos:start="209:14" pos:end="209:14">q</name><operator pos:start="209:15" pos:end="209:16">++</operator> <operator pos:start="209:18" pos:end="209:18">=</operator> <literal type="number" pos:start="209:20" pos:end="209:20">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:27"><expr pos:start="211:13" pos:end="211:26"><operator pos:start="211:13" pos:end="211:13">*</operator><name pos:start="211:14" pos:end="211:14">q</name><operator pos:start="211:15" pos:end="211:16">++</operator> <operator pos:start="211:18" pos:end="211:18">=</operator> <name pos:start="211:20" pos:end="211:26">DHCPACK</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="217:9" pos:end="221:44"><if pos:start="217:9" pos:end="221:44">if <condition pos:start="217:12" pos:end="217:34">(<expr pos:start="217:13" pos:end="217:33"><name pos:start="217:13" pos:end="217:33"><name pos:start="217:13" pos:end="217:17">slirp</name><operator pos:start="217:18" pos:end="217:19">-&gt;</operator><name pos:start="217:20" pos:end="217:33">bootp_filename</name></name></expr>)</condition><block type="pseudo" pos:start="219:13" pos:end="221:44"><block_content pos:start="219:13" pos:end="221:44">

            <expr_stmt pos:start="219:13" pos:end="221:44"><expr pos:start="219:13" pos:end="221:43"><call pos:start="219:13" pos:end="221:43"><name pos:start="219:13" pos:end="219:20">snprintf</name><argument_list pos:start="219:21" pos:end="221:43">(<argument pos:start="219:22" pos:end="219:41"><expr pos:start="219:22" pos:end="219:41"><operator pos:start="219:22" pos:end="219:22">(</operator><name pos:start="219:23" pos:end="219:26">char</name> <operator pos:start="219:28" pos:end="219:28">*</operator><operator pos:start="219:29" pos:end="219:29">)</operator><name pos:start="219:30" pos:end="219:41"><name pos:start="219:30" pos:end="219:32">rbp</name><operator pos:start="219:33" pos:end="219:34">-&gt;</operator><name pos:start="219:35" pos:end="219:41">bp_file</name></name></expr></argument>, <argument pos:start="219:44" pos:end="219:63"><expr pos:start="219:44" pos:end="219:63"><sizeof pos:start="219:44" pos:end="219:63">sizeof<argument_list pos:start="219:50" pos:end="219:63">(<argument pos:start="219:51" pos:end="219:62"><expr pos:start="219:51" pos:end="219:62"><name pos:start="219:51" pos:end="219:62"><name pos:start="219:51" pos:end="219:53">rbp</name><operator pos:start="219:54" pos:end="219:55">-&gt;</operator><name pos:start="219:56" pos:end="219:62">bp_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="219:66" pos:end="219:69"><expr pos:start="219:66" pos:end="219:69"><literal type="string" pos:start="219:66" pos:end="219:69">"%s"</literal></expr></argument>,

                     <argument pos:start="221:22" pos:end="221:42"><expr pos:start="221:22" pos:end="221:42"><name pos:start="221:22" pos:end="221:42"><name pos:start="221:22" pos:end="221:26">slirp</name><operator pos:start="221:27" pos:end="221:28">-&gt;</operator><name pos:start="221:29" pos:end="221:42">bootp_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="225:9" pos:end="225:30"><expr pos:start="225:9" pos:end="225:29"><operator pos:start="225:9" pos:end="225:9">*</operator><name pos:start="225:10" pos:end="225:10">q</name><operator pos:start="225:11" pos:end="225:12">++</operator> <operator pos:start="225:14" pos:end="225:14">=</operator> <name pos:start="225:16" pos:end="225:29">RFC2132_SRV_ID</name></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:17"><expr pos:start="227:9" pos:end="227:16"><operator pos:start="227:9" pos:end="227:9">*</operator><name pos:start="227:10" pos:end="227:10">q</name><operator pos:start="227:11" pos:end="227:12">++</operator> <operator pos:start="227:14" pos:end="227:14">=</operator> <literal type="number" pos:start="227:16" pos:end="227:16">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:38"><expr pos:start="229:9" pos:end="229:37"><call pos:start="229:9" pos:end="229:37"><name pos:start="229:9" pos:end="229:14">memcpy</name><argument_list pos:start="229:15" pos:end="229:37">(<argument pos:start="229:16" pos:end="229:16"><expr pos:start="229:16" pos:end="229:16"><name pos:start="229:16" pos:end="229:16">q</name></expr></argument>, <argument pos:start="229:19" pos:end="229:33"><expr pos:start="229:19" pos:end="229:33"><operator pos:start="229:19" pos:end="229:19">&amp;</operator><name pos:start="229:20" pos:end="229:33"><name pos:start="229:20" pos:end="229:24">saddr</name><operator pos:start="229:25" pos:end="229:25">.</operator><name pos:start="229:26" pos:end="229:33">sin_addr</name></name></expr></argument>, <argument pos:start="229:36" pos:end="229:36"><expr pos:start="229:36" pos:end="229:36"><literal type="number" pos:start="229:36" pos:end="229:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:15"><expr pos:start="231:9" pos:end="231:14"><name pos:start="231:9" pos:end="231:9">q</name> <operator pos:start="231:11" pos:end="231:12">+=</operator> <literal type="number" pos:start="231:14" pos:end="231:14">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="235:9" pos:end="235:31"><expr pos:start="235:9" pos:end="235:30"><operator pos:start="235:9" pos:end="235:9">*</operator><name pos:start="235:10" pos:end="235:10">q</name><operator pos:start="235:11" pos:end="235:12">++</operator> <operator pos:start="235:14" pos:end="235:14">=</operator> <name pos:start="235:16" pos:end="235:30">RFC1533_NETMASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:17"><expr pos:start="237:9" pos:end="237:16"><operator pos:start="237:9" pos:end="237:9">*</operator><name pos:start="237:10" pos:end="237:10">q</name><operator pos:start="237:11" pos:end="237:12">++</operator> <operator pos:start="237:14" pos:end="237:14">=</operator> <literal type="number" pos:start="237:16" pos:end="237:16">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:44"><expr pos:start="239:9" pos:end="239:43"><call pos:start="239:9" pos:end="239:43"><name pos:start="239:9" pos:end="239:14">memcpy</name><argument_list pos:start="239:15" pos:end="239:43">(<argument pos:start="239:16" pos:end="239:16"><expr pos:start="239:16" pos:end="239:16"><name pos:start="239:16" pos:end="239:16">q</name></expr></argument>, <argument pos:start="239:19" pos:end="239:39"><expr pos:start="239:19" pos:end="239:39"><operator pos:start="239:19" pos:end="239:19">&amp;</operator><name pos:start="239:20" pos:end="239:39"><name pos:start="239:20" pos:end="239:24">slirp</name><operator pos:start="239:25" pos:end="239:26">-&gt;</operator><name pos:start="239:27" pos:end="239:39">vnetwork_mask</name></name></expr></argument>, <argument pos:start="239:42" pos:end="239:42"><expr pos:start="239:42" pos:end="239:42"><literal type="number" pos:start="239:42" pos:end="239:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:15"><expr pos:start="241:9" pos:end="241:14"><name pos:start="241:9" pos:end="241:9">q</name> <operator pos:start="241:11" pos:end="241:12">+=</operator> <literal type="number" pos:start="241:14" pos:end="241:14">4</literal></expr>;</expr_stmt>



        <if_stmt pos:start="245:9" pos:end="265:9"><if pos:start="245:9" pos:end="265:9">if <condition pos:start="245:12" pos:end="245:31">(<expr pos:start="245:13" pos:end="245:30"><operator pos:start="245:13" pos:end="245:13">!</operator><name pos:start="245:14" pos:end="245:30"><name pos:start="245:14" pos:end="245:18">slirp</name><operator pos:start="245:19" pos:end="245:20">-&gt;</operator><name pos:start="245:21" pos:end="245:30">restricted</name></name></expr>)</condition> <block pos:start="245:33" pos:end="265:9">{<block_content pos:start="247:13" pos:end="263:19">

            <expr_stmt pos:start="247:13" pos:end="247:35"><expr pos:start="247:13" pos:end="247:34"><operator pos:start="247:13" pos:end="247:13">*</operator><name pos:start="247:14" pos:end="247:14">q</name><operator pos:start="247:15" pos:end="247:16">++</operator> <operator pos:start="247:18" pos:end="247:18">=</operator> <name pos:start="247:20" pos:end="247:34">RFC1533_GATEWAY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:21"><expr pos:start="249:13" pos:end="249:20"><operator pos:start="249:13" pos:end="249:13">*</operator><name pos:start="249:14" pos:end="249:14">q</name><operator pos:start="249:15" pos:end="249:16">++</operator> <operator pos:start="249:18" pos:end="249:18">=</operator> <literal type="number" pos:start="249:20" pos:end="249:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:42"><expr pos:start="251:13" pos:end="251:41"><call pos:start="251:13" pos:end="251:41"><name pos:start="251:13" pos:end="251:18">memcpy</name><argument_list pos:start="251:19" pos:end="251:41">(<argument pos:start="251:20" pos:end="251:20"><expr pos:start="251:20" pos:end="251:20"><name pos:start="251:20" pos:end="251:20">q</name></expr></argument>, <argument pos:start="251:23" pos:end="251:37"><expr pos:start="251:23" pos:end="251:37"><operator pos:start="251:23" pos:end="251:23">&amp;</operator><name pos:start="251:24" pos:end="251:37"><name pos:start="251:24" pos:end="251:28">saddr</name><operator pos:start="251:29" pos:end="251:29">.</operator><name pos:start="251:30" pos:end="251:37">sin_addr</name></name></expr></argument>, <argument pos:start="251:40" pos:end="251:40"><expr pos:start="251:40" pos:end="251:40"><literal type="number" pos:start="251:40" pos:end="251:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:19"><expr pos:start="253:13" pos:end="253:18"><name pos:start="253:13" pos:end="253:13">q</name> <operator pos:start="253:15" pos:end="253:16">+=</operator> <literal type="number" pos:start="253:18" pos:end="253:18">4</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="257:13" pos:end="257:31"><expr pos:start="257:13" pos:end="257:30"><operator pos:start="257:13" pos:end="257:13">*</operator><name pos:start="257:14" pos:end="257:14">q</name><operator pos:start="257:15" pos:end="257:16">++</operator> <operator pos:start="257:18" pos:end="257:18">=</operator> <name pos:start="257:20" pos:end="257:30">RFC1533_DNS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:21"><expr pos:start="259:13" pos:end="259:20"><operator pos:start="259:13" pos:end="259:13">*</operator><name pos:start="259:14" pos:end="259:14">q</name><operator pos:start="259:15" pos:end="259:16">++</operator> <operator pos:start="259:18" pos:end="259:18">=</operator> <literal type="number" pos:start="259:20" pos:end="259:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:51"><expr pos:start="261:13" pos:end="261:50"><call pos:start="261:13" pos:end="261:50"><name pos:start="261:13" pos:end="261:18">memcpy</name><argument_list pos:start="261:19" pos:end="261:50">(<argument pos:start="261:20" pos:end="261:20"><expr pos:start="261:20" pos:end="261:20"><name pos:start="261:20" pos:end="261:20">q</name></expr></argument>, <argument pos:start="261:23" pos:end="261:46"><expr pos:start="261:23" pos:end="261:46"><operator pos:start="261:23" pos:end="261:23">&amp;</operator><name pos:start="261:24" pos:end="261:46"><name pos:start="261:24" pos:end="261:28">slirp</name><operator pos:start="261:29" pos:end="261:30">-&gt;</operator><name pos:start="261:31" pos:end="261:46">vnameserver_addr</name></name></expr></argument>, <argument pos:start="261:49" pos:end="261:49"><expr pos:start="261:49" pos:end="261:49"><literal type="number" pos:start="261:49" pos:end="261:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:19"><expr pos:start="263:13" pos:end="263:18"><name pos:start="263:13" pos:end="263:13">q</name> <operator pos:start="263:15" pos:end="263:16">+=</operator> <literal type="number" pos:start="263:18" pos:end="263:18">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="269:9" pos:end="269:34"><expr pos:start="269:9" pos:end="269:33"><operator pos:start="269:9" pos:end="269:9">*</operator><name pos:start="269:10" pos:end="269:10">q</name><operator pos:start="269:11" pos:end="269:12">++</operator> <operator pos:start="269:14" pos:end="269:14">=</operator> <name pos:start="269:16" pos:end="269:33">RFC2132_LEASE_TIME</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:17"><expr pos:start="271:9" pos:end="271:16"><operator pos:start="271:9" pos:end="271:9">*</operator><name pos:start="271:10" pos:end="271:10">q</name><operator pos:start="271:11" pos:end="271:12">++</operator> <operator pos:start="271:14" pos:end="271:14">=</operator> <literal type="number" pos:start="271:16" pos:end="271:16">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:32"><expr pos:start="273:9" pos:end="273:31"><name pos:start="273:9" pos:end="273:11">val</name> <operator pos:start="273:13" pos:end="273:13">=</operator> <call pos:start="273:15" pos:end="273:31"><name pos:start="273:15" pos:end="273:19">htonl</name><argument_list pos:start="273:20" pos:end="273:31">(<argument pos:start="273:21" pos:end="273:30"><expr pos:start="273:21" pos:end="273:30"><name pos:start="273:21" pos:end="273:30">LEASE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:27"><expr pos:start="275:9" pos:end="275:26"><call pos:start="275:9" pos:end="275:26"><name pos:start="275:9" pos:end="275:14">memcpy</name><argument_list pos:start="275:15" pos:end="275:26">(<argument pos:start="275:16" pos:end="275:16"><expr pos:start="275:16" pos:end="275:16"><name pos:start="275:16" pos:end="275:16">q</name></expr></argument>, <argument pos:start="275:19" pos:end="275:22"><expr pos:start="275:19" pos:end="275:22"><operator pos:start="275:19" pos:end="275:19">&amp;</operator><name pos:start="275:20" pos:end="275:22">val</name></expr></argument>, <argument pos:start="275:25" pos:end="275:25"><expr pos:start="275:25" pos:end="275:25"><literal type="number" pos:start="275:25" pos:end="275:25">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:15"><expr pos:start="277:9" pos:end="277:14"><name pos:start="277:9" pos:end="277:9">q</name> <operator pos:start="277:11" pos:end="277:12">+=</operator> <literal type="number" pos:start="277:14" pos:end="277:14">4</literal></expr>;</expr_stmt>



        <if_stmt pos:start="281:9" pos:end="293:9"><if pos:start="281:9" pos:end="293:9">if <condition pos:start="281:12" pos:end="281:36">(<expr pos:start="281:13" pos:end="281:35"><operator pos:start="281:13" pos:end="281:13">*</operator><name pos:start="281:14" pos:end="281:35"><name pos:start="281:14" pos:end="281:18">slirp</name><operator pos:start="281:19" pos:end="281:20">-&gt;</operator><name pos:start="281:21" pos:end="281:35">client_hostname</name></name></expr>)</condition> <block pos:start="281:38" pos:end="293:9">{<block_content pos:start="283:13" pos:end="291:21">

            <expr_stmt pos:start="283:13" pos:end="283:49"><expr pos:start="283:13" pos:end="283:48"><name pos:start="283:13" pos:end="283:15">val</name> <operator pos:start="283:17" pos:end="283:17">=</operator> <call pos:start="283:19" pos:end="283:48"><name pos:start="283:19" pos:end="283:24">strlen</name><argument_list pos:start="283:25" pos:end="283:48">(<argument pos:start="283:26" pos:end="283:47"><expr pos:start="283:26" pos:end="283:47"><name pos:start="283:26" pos:end="283:47"><name pos:start="283:26" pos:end="283:30">slirp</name><operator pos:start="283:31" pos:end="283:32">-&gt;</operator><name pos:start="283:33" pos:end="283:47">client_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:36"><expr pos:start="285:13" pos:end="285:35"><operator pos:start="285:13" pos:end="285:13">*</operator><name pos:start="285:14" pos:end="285:14">q</name><operator pos:start="285:15" pos:end="285:16">++</operator> <operator pos:start="285:18" pos:end="285:18">=</operator> <name pos:start="285:20" pos:end="285:35">RFC1533_HOSTNAME</name></expr>;</expr_stmt>

            <expr_stmt pos:start="287:13" pos:end="287:23"><expr pos:start="287:13" pos:end="287:22"><operator pos:start="287:13" pos:end="287:13">*</operator><name pos:start="287:14" pos:end="287:14">q</name><operator pos:start="287:15" pos:end="287:16">++</operator> <operator pos:start="287:18" pos:end="287:18">=</operator> <name pos:start="287:20" pos:end="287:22">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:51"><expr pos:start="289:13" pos:end="289:50"><call pos:start="289:13" pos:end="289:50"><name pos:start="289:13" pos:end="289:18">memcpy</name><argument_list pos:start="289:19" pos:end="289:50">(<argument pos:start="289:20" pos:end="289:20"><expr pos:start="289:20" pos:end="289:20"><name pos:start="289:20" pos:end="289:20">q</name></expr></argument>, <argument pos:start="289:23" pos:end="289:44"><expr pos:start="289:23" pos:end="289:44"><name pos:start="289:23" pos:end="289:44"><name pos:start="289:23" pos:end="289:27">slirp</name><operator pos:start="289:28" pos:end="289:29">-&gt;</operator><name pos:start="289:30" pos:end="289:44">client_hostname</name></name></expr></argument>, <argument pos:start="289:47" pos:end="289:49"><expr pos:start="289:47" pos:end="289:49"><name pos:start="289:47" pos:end="289:49">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:21"><expr pos:start="291:13" pos:end="291:20"><name pos:start="291:13" pos:end="291:13">q</name> <operator pos:start="291:15" pos:end="291:16">+=</operator> <name pos:start="291:18" pos:end="291:20">val</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="297:9" pos:end="317:9"><if pos:start="297:9" pos:end="317:9">if <condition pos:start="297:12" pos:end="297:30">(<expr pos:start="297:13" pos:end="297:29"><name pos:start="297:13" pos:end="297:29"><name pos:start="297:13" pos:end="297:17">slirp</name><operator pos:start="297:18" pos:end="297:19">-&gt;</operator><name pos:start="297:20" pos:end="297:29">vdnssearch</name></name></expr>)</condition> <block pos:start="297:32" pos:end="317:9">{<block_content pos:start="299:13" pos:end="315:13">

            <decl_stmt pos:start="299:13" pos:end="299:73"><decl pos:start="299:13" pos:end="299:72"><type pos:start="299:13" pos:end="299:18"><name pos:start="299:13" pos:end="299:18">size_t</name></type> <name pos:start="299:20" pos:end="299:28">spaceleft</name> <init pos:start="299:30" pos:end="299:72">= <expr pos:start="299:32" pos:end="299:72"><sizeof pos:start="299:32" pos:end="299:51">sizeof<argument_list pos:start="299:38" pos:end="299:51">(<argument pos:start="299:39" pos:end="299:50"><expr pos:start="299:39" pos:end="299:50"><name pos:start="299:39" pos:end="299:50"><name pos:start="299:39" pos:end="299:41">rbp</name><operator pos:start="299:42" pos:end="299:43">-&gt;</operator><name pos:start="299:44" pos:end="299:50">bp_vend</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="299:53" pos:end="299:53">-</operator> <operator pos:start="299:55" pos:end="299:55">(</operator><name pos:start="299:56" pos:end="299:56">q</name> <operator pos:start="299:58" pos:end="299:58">-</operator> <name pos:start="299:60" pos:end="299:71"><name pos:start="299:60" pos:end="299:62">rbp</name><operator pos:start="299:63" pos:end="299:64">-&gt;</operator><name pos:start="299:65" pos:end="299:71">bp_vend</name></name><operator pos:start="299:72" pos:end="299:72">)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:40"><expr pos:start="301:13" pos:end="301:39"><name pos:start="301:13" pos:end="301:15">val</name> <operator pos:start="301:17" pos:end="301:17">=</operator> <name pos:start="301:19" pos:end="301:39"><name pos:start="301:19" pos:end="301:23">slirp</name><operator pos:start="301:24" pos:end="301:25">-&gt;</operator><name pos:start="301:26" pos:end="301:39">vdnssearch_len</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="303:13" pos:end="315:13"><if pos:start="303:13" pos:end="309:13">if <condition pos:start="303:16" pos:end="303:36">(<expr pos:start="303:17" pos:end="303:35"><name pos:start="303:17" pos:end="303:19">val</name> <operator pos:start="303:21" pos:end="303:21">+</operator> <literal type="number" pos:start="303:23" pos:end="303:23">1</literal> <operator pos:start="303:25" pos:end="303:25">&gt;</operator> <name pos:start="303:27" pos:end="303:35">spaceleft</name></expr>)</condition> <block pos:start="303:38" pos:end="309:13">{<block_content pos:start="305:17" pos:end="307:54">

                <expr_stmt pos:start="305:17" pos:end="307:54"><expr pos:start="305:17" pos:end="307:53"><call pos:start="305:17" pos:end="307:53"><name pos:start="305:17" pos:end="305:25">g_warning</name><argument_list pos:start="305:26" pos:end="307:53">(<argument pos:start="305:27" pos:end="307:52"><expr pos:start="305:27" pos:end="307:52"><literal type="string" pos:start="305:27" pos:end="305:55">"DHCP packet size exceeded, "</literal>

                    <literal type="string" pos:start="307:21" pos:end="307:52">"omitting domain-search option."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="309:15" pos:end="315:13">else <block pos:start="309:20" pos:end="315:13">{<block_content pos:start="311:17" pos:end="313:25">

                <expr_stmt pos:start="311:17" pos:end="311:50"><expr pos:start="311:17" pos:end="311:49"><call pos:start="311:17" pos:end="311:49"><name pos:start="311:17" pos:end="311:22">memcpy</name><argument_list pos:start="311:23" pos:end="311:49">(<argument pos:start="311:24" pos:end="311:24"><expr pos:start="311:24" pos:end="311:24"><name pos:start="311:24" pos:end="311:24">q</name></expr></argument>, <argument pos:start="311:27" pos:end="311:43"><expr pos:start="311:27" pos:end="311:43"><name pos:start="311:27" pos:end="311:43"><name pos:start="311:27" pos:end="311:31">slirp</name><operator pos:start="311:32" pos:end="311:33">-&gt;</operator><name pos:start="311:34" pos:end="311:43">vdnssearch</name></name></expr></argument>, <argument pos:start="311:46" pos:end="311:48"><expr pos:start="311:46" pos:end="311:48"><name pos:start="311:46" pos:end="311:48">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:25"><expr pos:start="313:17" pos:end="313:24"><name pos:start="313:17" pos:end="313:17">q</name> <operator pos:start="313:19" pos:end="313:20">+=</operator> <name pos:start="313:22" pos:end="313:24">val</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="319:7" pos:end="345:5">else <block pos:start="319:12" pos:end="345:5">{<block_content pos:start="321:9" pos:end="343:33">

        <decl_stmt pos:start="321:9" pos:end="321:72"><decl pos:start="321:9" pos:end="321:71"><type pos:start="321:9" pos:end="321:25"><specifier pos:start="321:9" pos:end="321:14">static</specifier> <specifier pos:start="321:16" pos:end="321:20">const</specifier> <name pos:start="321:22" pos:end="321:25">char</name></type> <name pos:start="321:27" pos:end="321:35"><name pos:start="321:27" pos:end="321:33">nak_msg</name><index pos:start="321:34" pos:end="321:35">[]</index></name> <init pos:start="321:37" pos:end="321:71">= <expr pos:start="321:39" pos:end="321:71"><literal type="string" pos:start="321:39" pos:end="321:71">"requested address not available"</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:72"><expr pos:start="325:9" pos:end="325:71"><call pos:start="325:9" pos:end="325:71"><name pos:start="325:9" pos:end="325:15">DPRINTF</name><argument_list pos:start="325:16" pos:end="325:71">(<argument pos:start="325:17" pos:end="325:45"><expr pos:start="325:17" pos:end="325:45"><literal type="string" pos:start="325:17" pos:end="325:33">"nak'ed addr=%08"</literal> <name pos:start="325:35" pos:end="325:40">PRIx32</name> <literal type="string" pos:start="325:42" pos:end="325:45">"\n"</literal></expr></argument>, <argument pos:start="325:48" pos:end="325:70"><expr pos:start="325:48" pos:end="325:70"><call pos:start="325:48" pos:end="325:70"><name pos:start="325:48" pos:end="325:52">ntohl</name><argument_list pos:start="325:53" pos:end="325:70">(<argument pos:start="325:54" pos:end="325:69"><expr pos:start="325:54" pos:end="325:69"><name pos:start="325:54" pos:end="325:69"><name pos:start="325:54" pos:end="325:62">preq_addr</name><operator pos:start="325:63" pos:end="325:63">.</operator><name pos:start="325:64" pos:end="325:69">s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="329:9" pos:end="329:32"><expr pos:start="329:9" pos:end="329:31"><operator pos:start="329:9" pos:end="329:9">*</operator><name pos:start="329:10" pos:end="329:10">q</name><operator pos:start="329:11" pos:end="329:12">++</operator> <operator pos:start="329:14" pos:end="329:14">=</operator> <name pos:start="329:16" pos:end="329:31">RFC2132_MSG_TYPE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:17"><expr pos:start="331:9" pos:end="331:16"><operator pos:start="331:9" pos:end="331:9">*</operator><name pos:start="331:10" pos:end="331:10">q</name><operator pos:start="331:11" pos:end="331:12">++</operator> <operator pos:start="331:14" pos:end="331:14">=</operator> <literal type="number" pos:start="331:16" pos:end="331:16">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:23"><expr pos:start="333:9" pos:end="333:22"><operator pos:start="333:9" pos:end="333:9">*</operator><name pos:start="333:10" pos:end="333:10">q</name><operator pos:start="333:11" pos:end="333:12">++</operator> <operator pos:start="333:14" pos:end="333:14">=</operator> <name pos:start="333:16" pos:end="333:22">DHCPNAK</name></expr>;</expr_stmt>



        <expr_stmt pos:start="337:9" pos:end="337:31"><expr pos:start="337:9" pos:end="337:30"><operator pos:start="337:9" pos:end="337:9">*</operator><name pos:start="337:10" pos:end="337:10">q</name><operator pos:start="337:11" pos:end="337:12">++</operator> <operator pos:start="337:14" pos:end="337:14">=</operator> <name pos:start="337:16" pos:end="337:30">RFC2132_MESSAGE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:35"><expr pos:start="339:9" pos:end="339:34"><operator pos:start="339:9" pos:end="339:9">*</operator><name pos:start="339:10" pos:end="339:10">q</name><operator pos:start="339:11" pos:end="339:12">++</operator> <operator pos:start="339:14" pos:end="339:14">=</operator> <sizeof pos:start="339:16" pos:end="339:30">sizeof<argument_list pos:start="339:22" pos:end="339:30">(<argument pos:start="339:23" pos:end="339:29"><expr pos:start="339:23" pos:end="339:29"><name pos:start="339:23" pos:end="339:29">nak_msg</name></expr></argument>)</argument_list></sizeof> <operator pos:start="339:32" pos:end="339:32">-</operator> <literal type="number" pos:start="339:34" pos:end="339:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:48"><expr pos:start="341:9" pos:end="341:47"><call pos:start="341:9" pos:end="341:47"><name pos:start="341:9" pos:end="341:14">memcpy</name><argument_list pos:start="341:15" pos:end="341:47">(<argument pos:start="341:16" pos:end="341:16"><expr pos:start="341:16" pos:end="341:16"><name pos:start="341:16" pos:end="341:16">q</name></expr></argument>, <argument pos:start="341:19" pos:end="341:25"><expr pos:start="341:19" pos:end="341:25"><name pos:start="341:19" pos:end="341:25">nak_msg</name></expr></argument>, <argument pos:start="341:28" pos:end="341:46"><expr pos:start="341:28" pos:end="341:46"><sizeof pos:start="341:28" pos:end="341:42">sizeof<argument_list pos:start="341:34" pos:end="341:42">(<argument pos:start="341:35" pos:end="341:41"><expr pos:start="341:35" pos:end="341:41"><name pos:start="341:35" pos:end="341:41">nak_msg</name></expr></argument>)</argument_list></sizeof> <operator pos:start="341:44" pos:end="341:44">-</operator> <literal type="number" pos:start="341:46" pos:end="341:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:33"><expr pos:start="343:9" pos:end="343:32"><name pos:start="343:9" pos:end="343:9">q</name> <operator pos:start="343:11" pos:end="343:12">+=</operator> <sizeof pos:start="343:14" pos:end="343:28">sizeof<argument_list pos:start="343:20" pos:end="343:28">(<argument pos:start="343:21" pos:end="343:27"><expr pos:start="343:21" pos:end="343:27"><name pos:start="343:21" pos:end="343:27">nak_msg</name></expr></argument>)</argument_list></sizeof> <operator pos:start="343:30" pos:end="343:30">-</operator> <literal type="number" pos:start="343:32" pos:end="343:32">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:21"><expr pos:start="347:5" pos:end="347:20"><operator pos:start="347:5" pos:end="347:5">*</operator><name pos:start="347:6" pos:end="347:6">q</name> <operator pos:start="347:8" pos:end="347:8">=</operator> <name pos:start="347:10" pos:end="347:20">RFC1533_END</name></expr>;</expr_stmt>



    <expr_stmt pos:start="351:5" pos:end="351:40"><expr pos:start="351:5" pos:end="351:39"><name pos:start="351:5" pos:end="351:25"><name pos:start="351:5" pos:end="351:9">daddr</name><operator pos:start="351:10" pos:end="351:10">.</operator><name pos:start="351:11" pos:end="351:18">sin_addr</name><operator pos:start="351:19" pos:end="351:19">.</operator><name pos:start="351:20" pos:end="351:25">s_addr</name></name> <operator pos:start="351:27" pos:end="351:27">=</operator> <literal type="number" pos:start="351:29" pos:end="351:39">0xffffffffu</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="355:5" pos:end="357:50"><expr pos:start="355:5" pos:end="357:49"><name pos:start="355:5" pos:end="355:12"><name pos:start="355:5" pos:end="355:5">m</name><operator pos:start="355:6" pos:end="355:7">-&gt;</operator><name pos:start="355:8" pos:end="355:12">m_len</name></name> <operator pos:start="355:14" pos:end="355:14">=</operator> <sizeof pos:start="355:16" pos:end="355:37">sizeof<argument_list pos:start="355:22" pos:end="355:37">(<argument pos:start="355:23" pos:end="355:36"><expr pos:start="355:23" pos:end="355:36">struct <name pos:start="355:30" pos:end="355:36">bootp_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="355:39" pos:end="355:39">-</operator>

        <sizeof pos:start="357:9" pos:end="357:25">sizeof<argument_list pos:start="357:15" pos:end="357:25">(<argument pos:start="357:16" pos:end="357:24"><expr pos:start="357:16" pos:end="357:24">struct <name pos:start="357:23" pos:end="357:24">ip</name></expr></argument>)</argument_list></sizeof> <operator pos:start="357:27" pos:end="357:27">-</operator> <sizeof pos:start="357:29" pos:end="357:49">sizeof<argument_list pos:start="357:35" pos:end="357:49">(<argument pos:start="357:36" pos:end="357:48"><expr pos:start="357:36" pos:end="357:48">struct <name pos:start="357:43" pos:end="357:48">udphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:57"><expr pos:start="359:5" pos:end="359:56"><call pos:start="359:5" pos:end="359:56"><name pos:start="359:5" pos:end="359:15">udp_output2</name><argument_list pos:start="359:16" pos:end="359:56">(<argument pos:start="359:17" pos:end="359:20"><expr pos:start="359:17" pos:end="359:20"><name pos:start="359:17" pos:end="359:20">NULL</name></expr></argument>, <argument pos:start="359:23" pos:end="359:23"><expr pos:start="359:23" pos:end="359:23"><name pos:start="359:23" pos:end="359:23">m</name></expr></argument>, <argument pos:start="359:26" pos:end="359:31"><expr pos:start="359:26" pos:end="359:31"><operator pos:start="359:26" pos:end="359:26">&amp;</operator><name pos:start="359:27" pos:end="359:31">saddr</name></expr></argument>, <argument pos:start="359:34" pos:end="359:39"><expr pos:start="359:34" pos:end="359:39"><operator pos:start="359:34" pos:end="359:34">&amp;</operator><name pos:start="359:35" pos:end="359:39">daddr</name></expr></argument>, <argument pos:start="359:42" pos:end="359:55"><expr pos:start="359:42" pos:end="359:55"><name pos:start="359:42" pos:end="359:55">IPTOS_LOWDELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
