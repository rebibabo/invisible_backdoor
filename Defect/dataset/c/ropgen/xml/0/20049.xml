<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20049.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">aac_decode_frame</name><parameter_list pos:start="1:28" pos:end="1:121">(<parameter pos:start="1:29" pos:end="1:55"><decl pos:start="1:29" pos:end="1:55"><type pos:start="1:29" pos:end="1:55"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:55">avccontext</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:68"><decl pos:start="1:58" pos:end="1:68"><type pos:start="1:58" pos:end="1:68"><name pos:start="1:58" pos:end="1:61">void</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type> <name pos:start="1:65" pos:end="1:68">data</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:85"><decl pos:start="1:71" pos:end="1:85"><type pos:start="1:71" pos:end="1:85"><name pos:start="1:71" pos:end="1:73">int</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type> <name pos:start="1:77" pos:end="1:85">data_size</name></decl></parameter>, <parameter pos:start="1:88" pos:end="1:106"><decl pos:start="1:88" pos:end="1:106"><type pos:start="1:88" pos:end="1:106"><specifier pos:start="1:88" pos:end="1:92">const</specifier> <name pos:start="1:94" pos:end="1:100">uint8_t</name> <modifier pos:start="1:102" pos:end="1:102">*</modifier></type> <name pos:start="1:104" pos:end="1:106">buf</name></decl></parameter>, <parameter pos:start="1:109" pos:end="1:120"><decl pos:start="1:109" pos:end="1:120"><type pos:start="1:109" pos:end="1:120"><name pos:start="1:109" pos:end="1:111">int</name></type> <name pos:start="1:113" pos:end="1:120">buf_size</name></decl></parameter>)</parameter_list> <block pos:start="1:123" pos:end="219:1">{<block_content pos:start="3:5" pos:end="217:20">

    <decl_stmt pos:start="3:5" pos:end="3:44"><decl pos:start="3:5" pos:end="3:43"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:14">AACContext</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type> <name pos:start="3:18" pos:end="3:19">ac</name> <init pos:start="3:21" pos:end="3:43">= <expr pos:start="3:23" pos:end="3:43"><name pos:start="3:23" pos:end="3:43"><name pos:start="3:23" pos:end="3:32">avccontext</name><operator pos:start="3:33" pos:end="3:34">-&gt;</operator><name pos:start="3:35" pos:end="3:43">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">GetBitContext</name></type> <name pos:start="5:19" pos:end="5:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:8">enum</name> <name pos:start="7:10" pos:end="7:25">RawDataBlockType</name></name></type> <name pos:start="7:27" pos:end="7:35">elem_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">err</name></decl>, <decl pos:start="9:14" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:20">elem_id</name></decl>, <decl pos:start="9:23" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:35">data_size_tmp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><call pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:17">init_get_bits</name><argument_list pos:start="13:18" pos:end="13:39">(<argument pos:start="13:19" pos:end="13:21"><expr pos:start="13:19" pos:end="13:21"><operator pos:start="13:19" pos:end="13:19">&amp;</operator><name pos:start="13:20" pos:end="13:21">gb</name></expr></argument>, <argument pos:start="13:24" pos:end="13:26"><expr pos:start="13:24" pos:end="13:26"><name pos:start="13:24" pos:end="13:26">buf</name></expr></argument>, <argument pos:start="13:29" pos:end="13:38"><expr pos:start="13:29" pos:end="13:38"><name pos:start="13:29" pos:end="13:36">buf_size</name><operator pos:start="13:37" pos:end="13:37">*</operator><literal type="number" pos:start="13:38" pos:end="13:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="35:5"><if pos:start="17:5" pos:end="35:5">if <condition pos:start="17:8" pos:end="17:36">(<expr pos:start="17:9" pos:end="17:35"><call pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:17">show_bits</name><argument_list pos:start="17:18" pos:end="17:26">(<argument pos:start="17:19" pos:end="17:21"><expr pos:start="17:19" pos:end="17:21"><operator pos:start="17:19" pos:end="17:19">&amp;</operator><name pos:start="17:20" pos:end="17:21">gb</name></expr></argument>, <argument pos:start="17:24" pos:end="17:25"><expr pos:start="17:24" pos:end="17:25"><literal type="number" pos:start="17:24" pos:end="17:25">12</literal></expr></argument>)</argument_list></call> <operator pos:start="17:28" pos:end="17:29">==</operator> <literal type="number" pos:start="17:31" pos:end="17:35">0xfff</literal></expr>)</condition> <block pos:start="17:38" pos:end="35:5">{<block_content pos:start="19:9" pos:end="33:9">

        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:57">(<expr pos:start="19:13" pos:end="19:56"><operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:16">err</name> <operator pos:start="19:18" pos:end="19:18">=</operator> <call pos:start="19:20" pos:end="19:51"><name pos:start="19:20" pos:end="19:42">parse_adts_frame_header</name><argument_list pos:start="19:43" pos:end="19:51">(<argument pos:start="19:44" pos:end="19:45"><expr pos:start="19:44" pos:end="19:45"><name pos:start="19:44" pos:end="19:45">ac</name></expr></argument>, <argument pos:start="19:48" pos:end="19:50"><expr pos:start="19:48" pos:end="19:50"><operator pos:start="19:48" pos:end="19:48">&amp;</operator><name pos:start="19:49" pos:end="19:50">gb</name></expr></argument>)</argument_list></call><operator pos:start="19:52" pos:end="19:52">)</operator> <operator pos:start="19:54" pos:end="19:54">&lt;</operator> <literal type="number" pos:start="19:56" pos:end="19:56">0</literal></expr>)</condition> <block pos:start="19:59" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:22">

            <expr_stmt pos:start="21:13" pos:end="21:83"><expr pos:start="21:13" pos:end="21:82"><call pos:start="21:13" pos:end="21:82"><name pos:start="21:13" pos:end="21:18">av_log</name><argument_list pos:start="21:19" pos:end="21:82">(<argument pos:start="21:20" pos:end="21:29"><expr pos:start="21:20" pos:end="21:29"><name pos:start="21:20" pos:end="21:29">avccontext</name></expr></argument>, <argument pos:start="21:32" pos:end="21:43"><expr pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:46" pos:end="21:81"><expr pos:start="21:46" pos:end="21:81"><literal type="string" pos:start="21:46" pos:end="21:81">"Error decoding AAC frame header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="23:13" pos:end="23:22">return <expr pos:start="23:20" pos:end="23:21"><operator pos:start="23:20" pos:end="23:20">-</operator><literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:41">(<expr pos:start="27:13" pos:end="27:40"><name pos:start="27:13" pos:end="27:35"><name pos:start="27:13" pos:end="27:14">ac</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:20">m4ac</name><operator pos:start="27:21" pos:end="27:21">.</operator><name pos:start="27:22" pos:end="27:35">sampling_index</name></name> <operator pos:start="27:37" pos:end="27:37">&gt;</operator> <literal type="number" pos:start="27:39" pos:end="27:40">11</literal></expr>)</condition> <block pos:start="27:43" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:22">

            <expr_stmt pos:start="29:13" pos:end="29:110"><expr pos:start="29:13" pos:end="29:109"><call pos:start="29:13" pos:end="29:109"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="29:109">(<argument pos:start="29:20" pos:end="29:33"><expr pos:start="29:20" pos:end="29:33"><name pos:start="29:20" pos:end="29:33"><name pos:start="29:20" pos:end="29:21">ac</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:33">avccontext</name></name></expr></argument>, <argument pos:start="29:36" pos:end="29:47"><expr pos:start="29:36" pos:end="29:47"><name pos:start="29:36" pos:end="29:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:50" pos:end="29:83"><expr pos:start="29:50" pos:end="29:83"><literal type="string" pos:start="29:50" pos:end="29:83">"invalid sampling rate index %d\n"</literal></expr></argument>, <argument pos:start="29:86" pos:end="29:108"><expr pos:start="29:86" pos:end="29:108"><name pos:start="29:86" pos:end="29:108"><name pos:start="29:86" pos:end="29:87">ac</name><operator pos:start="29:88" pos:end="29:89">-&gt;</operator><name pos:start="29:90" pos:end="29:93">m4ac</name><operator pos:start="29:94" pos:end="29:94">.</operator><name pos:start="29:95" pos:end="29:108">sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:22">return <expr pos:start="31:20" pos:end="31:21"><operator pos:start="31:20" pos:end="31:20">-</operator><literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="39:5" pos:end="39:12">// parse</comment>

    <while pos:start="41:5" pos:end="175:5">while <condition pos:start="41:11" pos:end="41:54">(<expr pos:start="41:12" pos:end="41:53"><operator pos:start="41:12" pos:end="41:12">(</operator><name pos:start="41:13" pos:end="41:21">elem_type</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <call pos:start="41:25" pos:end="41:40"><name pos:start="41:25" pos:end="41:32">get_bits</name><argument_list pos:start="41:33" pos:end="41:40">(<argument pos:start="41:34" pos:end="41:36"><expr pos:start="41:34" pos:end="41:36"><operator pos:start="41:34" pos:end="41:34">&amp;</operator><name pos:start="41:35" pos:end="41:36">gb</name></expr></argument>, <argument pos:start="41:39" pos:end="41:39"><expr pos:start="41:39" pos:end="41:39"><literal type="number" pos:start="41:39" pos:end="41:39">3</literal></expr></argument>)</argument_list></call><operator pos:start="41:41" pos:end="41:41">)</operator> <operator pos:start="41:43" pos:end="41:44">!=</operator> <name pos:start="41:46" pos:end="41:53">TYPE_END</name></expr>)</condition> <block pos:start="41:56" pos:end="175:5">{<block_content pos:start="43:9" pos:end="173:23">

        <expr_stmt pos:start="43:9" pos:end="43:35"><expr pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:15">elem_id</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:34"><name pos:start="43:19" pos:end="43:26">get_bits</name><argument_list pos:start="43:27" pos:end="43:34">(<argument pos:start="43:28" pos:end="43:30"><expr pos:start="43:28" pos:end="43:30"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:30">gb</name></expr></argument>, <argument pos:start="43:33" pos:end="43:33"><expr pos:start="43:33" pos:end="43:33"><literal type="number" pos:start="43:33" pos:end="43:33">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:17"><expr pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:11">err</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">-</operator><literal type="number" pos:start="45:16" pos:end="45:16">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="49:9" pos:end="63:9"><if pos:start="49:9" pos:end="63:9">if<condition pos:start="49:11" pos:end="51:68">(<expr pos:start="49:12" pos:end="51:67"><name pos:start="49:12" pos:end="49:20">elem_type</name> <operator pos:start="49:22" pos:end="49:23">==</operator> <name pos:start="49:25" pos:end="49:32">TYPE_SCE</name> <operator pos:start="49:34" pos:end="49:35">&amp;&amp;</operator> <name pos:start="49:37" pos:end="49:43">elem_id</name> <operator pos:start="49:45" pos:end="49:46">==</operator> <literal type="number" pos:start="49:48" pos:end="49:48">1</literal> <operator pos:start="49:50" pos:end="49:51">&amp;&amp;</operator>

                <operator pos:start="51:17" pos:end="51:17">!</operator><name pos:start="51:18" pos:end="51:43"><name pos:start="51:18" pos:end="51:19">ac</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:24">che</name><index pos:start="51:25" pos:end="51:34">[<expr pos:start="51:26" pos:end="51:33"><name pos:start="51:26" pos:end="51:33">TYPE_SCE</name></expr>]</index><index pos:start="51:35" pos:end="51:43">[<expr pos:start="51:36" pos:end="51:42"><name pos:start="51:36" pos:end="51:42">elem_id</name></expr>]</index></name> <operator pos:start="51:45" pos:end="51:46">&amp;&amp;</operator> <name pos:start="51:48" pos:end="51:67"><name pos:start="51:48" pos:end="51:49">ac</name><operator pos:start="51:50" pos:end="51:51">-&gt;</operator><name pos:start="51:52" pos:end="51:54">che</name><index pos:start="51:55" pos:end="51:64">[<expr pos:start="51:56" pos:end="51:63"><name pos:start="51:56" pos:end="51:63">TYPE_LFE</name></expr>]</index><index pos:start="51:65" pos:end="51:67">[<expr pos:start="51:66" pos:end="51:66"><literal type="number" pos:start="51:66" pos:end="51:66">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="51:70" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:40">

            <comment type="block" pos:start="53:13" pos:end="57:82">/* Some streams incorrectly code 5.1 audio as SCE[0] CPE[0] CPE[1] SCE[1]

               instead of SCE[0] CPE[0] CPE[0] LFE[0]. If we seem to have

               encountered such a stream, transfer the LFE[0] element to SCE[1] */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:62"><expr pos:start="59:13" pos:end="59:61"><name pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:14">ac</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:19">che</name><index pos:start="59:20" pos:end="59:29">[<expr pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:28">TYPE_SCE</name></expr>]</index><index pos:start="59:30" pos:end="59:38">[<expr pos:start="59:31" pos:end="59:37"><name pos:start="59:31" pos:end="59:37">elem_id</name></expr>]</index></name> <operator pos:start="59:40" pos:end="59:40">=</operator> <name pos:start="59:42" pos:end="59:61"><name pos:start="59:42" pos:end="59:43">ac</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:48">che</name><index pos:start="59:49" pos:end="59:58">[<expr pos:start="59:50" pos:end="59:57"><name pos:start="59:50" pos:end="59:57">TYPE_LFE</name></expr>]</index><index pos:start="59:59" pos:end="59:61">[<expr pos:start="59:60" pos:end="59:60"><literal type="number" pos:start="59:60" pos:end="59:60">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:40"><expr pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:14">ac</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:19">che</name><index pos:start="61:20" pos:end="61:29">[<expr pos:start="61:21" pos:end="61:28"><name pos:start="61:21" pos:end="61:28">TYPE_LFE</name></expr>]</index><index pos:start="61:30" pos:end="61:32">[<expr pos:start="61:31" pos:end="61:31"><literal type="number" pos:start="61:31" pos:end="61:31">0</literal></expr>]</index></name> <operator pos:start="61:34" pos:end="61:34">=</operator> <name pos:start="61:36" pos:end="61:39">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="75:9"><if pos:start="65:9" pos:end="75:9">if<condition pos:start="65:11" pos:end="65:32">(<expr pos:start="65:12" pos:end="65:31"><name pos:start="65:12" pos:end="65:20">elem_type</name> <operator pos:start="65:22" pos:end="65:22">&lt;</operator> <name pos:start="65:24" pos:end="65:31">TYPE_DSE</name></expr>)</condition> <block pos:start="65:34" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:69">

            <if_stmt pos:start="67:13" pos:end="69:26"><if pos:start="67:13" pos:end="69:26">if<condition pos:start="67:15" pos:end="67:44">(<expr pos:start="67:16" pos:end="67:43"><operator pos:start="67:16" pos:end="67:16">!</operator><name pos:start="67:17" pos:end="67:43"><name pos:start="67:17" pos:end="67:18">ac</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:23">che</name><index pos:start="67:24" pos:end="67:34">[<expr pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:33">elem_type</name></expr>]</index><index pos:start="67:35" pos:end="67:43">[<expr pos:start="67:36" pos:end="67:42"><name pos:start="67:36" pos:end="67:42">elem_id</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:26"><block_content pos:start="69:17" pos:end="69:26">

                <return pos:start="69:17" pos:end="69:26">return <expr pos:start="69:24" pos:end="69:25"><operator pos:start="69:24" pos:end="69:24">-</operator><literal type="number" pos:start="69:25" pos:end="69:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="71:13" pos:end="73:69"><if pos:start="71:13" pos:end="73:69">if<condition pos:start="71:15" pos:end="71:37">(<expr pos:start="71:16" pos:end="71:36"><name pos:start="71:16" pos:end="71:24">elem_type</name> <operator pos:start="71:26" pos:end="71:27">!=</operator> <name pos:start="71:29" pos:end="71:36">TYPE_CCE</name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:69"><block_content pos:start="73:17" pos:end="73:69">

                <expr_stmt pos:start="73:17" pos:end="73:69"><expr pos:start="73:17" pos:end="73:68"><name pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:18">ac</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:23">che</name><index pos:start="73:24" pos:end="73:34">[<expr pos:start="73:25" pos:end="73:33"><name pos:start="73:25" pos:end="73:33">elem_type</name></expr>]</index><index pos:start="73:35" pos:end="73:43">[<expr pos:start="73:36" pos:end="73:42"><name pos:start="73:36" pos:end="73:42">elem_id</name></expr>]</index></name><operator pos:start="73:44" pos:end="73:45">-&gt;</operator><name pos:start="73:46" pos:end="73:64"><name pos:start="73:46" pos:end="73:49">coup</name><operator pos:start="73:50" pos:end="73:50">.</operator><name pos:start="73:51" pos:end="73:64">coupling_point</name></name> <operator pos:start="73:66" pos:end="73:66">=</operator> <literal type="number" pos:start="73:68" pos:end="73:68">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="79:9" pos:end="167:9">switch <condition pos:start="79:16" pos:end="79:26">(<expr pos:start="79:17" pos:end="79:25"><name pos:start="79:17" pos:end="79:25">elem_type</name></expr>)</condition> <block pos:start="79:28" pos:end="167:9">{<block_content pos:start="83:9" pos:end="165:18">



        <case pos:start="83:9" pos:end="83:22">case <expr pos:start="83:14" pos:end="83:21"><name pos:start="83:14" pos:end="83:21">TYPE_SCE</name></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="85:80"><expr pos:start="85:13" pos:end="85:79"><name pos:start="85:13" pos:end="85:15">err</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:79"><name pos:start="85:19" pos:end="85:28">decode_ics</name><argument_list pos:start="85:29" pos:end="85:79">(<argument pos:start="85:30" pos:end="85:31"><expr pos:start="85:30" pos:end="85:31"><name pos:start="85:30" pos:end="85:31">ac</name></expr></argument>, <argument pos:start="85:34" pos:end="85:67"><expr pos:start="85:34" pos:end="85:67"><operator pos:start="85:34" pos:end="85:34">&amp;</operator><name pos:start="85:35" pos:end="85:60"><name pos:start="85:35" pos:end="85:36">ac</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:41">che</name><index pos:start="85:42" pos:end="85:51">[<expr pos:start="85:43" pos:end="85:50"><name pos:start="85:43" pos:end="85:50">TYPE_SCE</name></expr>]</index><index pos:start="85:52" pos:end="85:60">[<expr pos:start="85:53" pos:end="85:59"><name pos:start="85:53" pos:end="85:59">elem_id</name></expr>]</index></name><operator pos:start="85:61" pos:end="85:62">-&gt;</operator><name pos:start="85:63" pos:end="85:67"><name pos:start="85:63" pos:end="85:64">ch</name><index pos:start="85:65" pos:end="85:67">[<expr pos:start="85:66" pos:end="85:66"><literal type="number" pos:start="85:66" pos:end="85:66">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:70" pos:end="85:72"><expr pos:start="85:70" pos:end="85:72"><operator pos:start="85:70" pos:end="85:70">&amp;</operator><name pos:start="85:71" pos:end="85:72">gb</name></expr></argument>, <argument pos:start="85:75" pos:end="85:75"><expr pos:start="85:75" pos:end="85:75"><literal type="number" pos:start="85:75" pos:end="85:75">0</literal></expr></argument>, <argument pos:start="85:78" pos:end="85:78"><expr pos:start="85:78" pos:end="85:78"><literal type="number" pos:start="85:78" pos:end="85:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>



        <case pos:start="91:9" pos:end="91:22">case <expr pos:start="91:14" pos:end="91:21"><name pos:start="91:14" pos:end="91:21">TYPE_CPE</name></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:47"><expr pos:start="93:13" pos:end="93:46"><name pos:start="93:13" pos:end="93:15">err</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:46"><name pos:start="93:19" pos:end="93:28">decode_cpe</name><argument_list pos:start="93:29" pos:end="93:46">(<argument pos:start="93:30" pos:end="93:31"><expr pos:start="93:30" pos:end="93:31"><name pos:start="93:30" pos:end="93:31">ac</name></expr></argument>, <argument pos:start="93:34" pos:end="93:36"><expr pos:start="93:34" pos:end="93:36"><operator pos:start="93:34" pos:end="93:34">&amp;</operator><name pos:start="93:35" pos:end="93:36">gb</name></expr></argument>, <argument pos:start="93:39" pos:end="93:45"><expr pos:start="93:39" pos:end="93:45"><name pos:start="93:39" pos:end="93:45">elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>



        <case pos:start="99:9" pos:end="99:22">case <expr pos:start="99:14" pos:end="99:21"><name pos:start="99:14" pos:end="99:21">TYPE_CCE</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:66"><expr pos:start="101:13" pos:end="101:65"><name pos:start="101:13" pos:end="101:15">err</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:65"><name pos:start="101:19" pos:end="101:28">decode_cce</name><argument_list pos:start="101:29" pos:end="101:65">(<argument pos:start="101:30" pos:end="101:31"><expr pos:start="101:30" pos:end="101:31"><name pos:start="101:30" pos:end="101:31">ac</name></expr></argument>, <argument pos:start="101:34" pos:end="101:36"><expr pos:start="101:34" pos:end="101:36"><operator pos:start="101:34" pos:end="101:34">&amp;</operator><name pos:start="101:35" pos:end="101:36">gb</name></expr></argument>, <argument pos:start="101:39" pos:end="101:64"><expr pos:start="101:39" pos:end="101:64"><name pos:start="101:39" pos:end="101:64"><name pos:start="101:39" pos:end="101:40">ac</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:45">che</name><index pos:start="101:46" pos:end="101:55">[<expr pos:start="101:47" pos:end="101:54"><name pos:start="101:47" pos:end="101:54">TYPE_CCE</name></expr>]</index><index pos:start="101:56" pos:end="101:64">[<expr pos:start="101:57" pos:end="101:63"><name pos:start="101:57" pos:end="101:63">elem_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>



        <case pos:start="107:9" pos:end="107:22">case <expr pos:start="107:14" pos:end="107:21"><name pos:start="107:14" pos:end="107:21">TYPE_LFE</name></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:80"><expr pos:start="109:13" pos:end="109:79"><name pos:start="109:13" pos:end="109:15">err</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:79"><name pos:start="109:19" pos:end="109:28">decode_ics</name><argument_list pos:start="109:29" pos:end="109:79">(<argument pos:start="109:30" pos:end="109:31"><expr pos:start="109:30" pos:end="109:31"><name pos:start="109:30" pos:end="109:31">ac</name></expr></argument>, <argument pos:start="109:34" pos:end="109:67"><expr pos:start="109:34" pos:end="109:67"><operator pos:start="109:34" pos:end="109:34">&amp;</operator><name pos:start="109:35" pos:end="109:60"><name pos:start="109:35" pos:end="109:36">ac</name><operator pos:start="109:37" pos:end="109:38">-&gt;</operator><name pos:start="109:39" pos:end="109:41">che</name><index pos:start="109:42" pos:end="109:51">[<expr pos:start="109:43" pos:end="109:50"><name pos:start="109:43" pos:end="109:50">TYPE_LFE</name></expr>]</index><index pos:start="109:52" pos:end="109:60">[<expr pos:start="109:53" pos:end="109:59"><name pos:start="109:53" pos:end="109:59">elem_id</name></expr>]</index></name><operator pos:start="109:61" pos:end="109:62">-&gt;</operator><name pos:start="109:63" pos:end="109:67"><name pos:start="109:63" pos:end="109:64">ch</name><index pos:start="109:65" pos:end="109:67">[<expr pos:start="109:66" pos:end="109:66"><literal type="number" pos:start="109:66" pos:end="109:66">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:70" pos:end="109:72"><expr pos:start="109:70" pos:end="109:72"><operator pos:start="109:70" pos:end="109:70">&amp;</operator><name pos:start="109:71" pos:end="109:72">gb</name></expr></argument>, <argument pos:start="109:75" pos:end="109:75"><expr pos:start="109:75" pos:end="109:75"><literal type="number" pos:start="109:75" pos:end="109:75">0</literal></expr></argument>, <argument pos:start="109:78" pos:end="109:78"><expr pos:start="109:78" pos:end="109:78"><literal type="number" pos:start="109:78" pos:end="109:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>



        <case pos:start="115:9" pos:end="115:22">case <expr pos:start="115:14" pos:end="115:21"><name pos:start="115:14" pos:end="115:21">TYPE_DSE</name></expr>:</case>

            <expr_stmt pos:start="117:13" pos:end="117:42"><expr pos:start="117:13" pos:end="117:41"><call pos:start="117:13" pos:end="117:41"><name pos:start="117:13" pos:end="117:36">skip_data_stream_element</name><argument_list pos:start="117:37" pos:end="117:41">(<argument pos:start="117:38" pos:end="117:40"><expr pos:start="117:38" pos:end="117:40"><operator pos:start="117:38" pos:end="117:38">&amp;</operator><name pos:start="117:39" pos:end="117:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:20"><expr pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:15">err</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <literal type="number" pos:start="119:19" pos:end="119:19">0</literal></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>



        <case pos:start="125:9" pos:end="125:22">case <expr pos:start="125:14" pos:end="125:21"><name pos:start="125:14" pos:end="125:21">TYPE_PCE</name></expr>:</case>

        <block pos:start="127:9" pos:end="141:9">{<block_content pos:start="129:13" pos:end="139:18">

            <decl_stmt pos:start="129:13" pos:end="129:61"><decl pos:start="129:13" pos:end="129:60"><type pos:start="129:13" pos:end="129:32"><name pos:start="129:13" pos:end="129:32"><name pos:start="129:13" pos:end="129:16">enum</name> <name pos:start="129:18" pos:end="129:32">ChannelPosition</name></name></type> <name pos:start="129:34" pos:end="129:60"><name pos:start="129:34" pos:end="129:44">new_che_pos</name><index pos:start="129:45" pos:end="129:47">[<expr pos:start="129:46" pos:end="129:46"><literal type="number" pos:start="129:46" pos:end="129:46">4</literal></expr>]</index><index pos:start="129:48" pos:end="129:60">[<expr pos:start="129:49" pos:end="129:59"><name pos:start="129:49" pos:end="129:59">MAX_ELEM_ID</name></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:80"><expr pos:start="131:13" pos:end="131:79"><call pos:start="131:13" pos:end="131:79"><name pos:start="131:13" pos:end="131:18">memset</name><argument_list pos:start="131:19" pos:end="131:79">(<argument pos:start="131:20" pos:end="131:30"><expr pos:start="131:20" pos:end="131:30"><name pos:start="131:20" pos:end="131:30">new_che_pos</name></expr></argument>, <argument pos:start="131:33" pos:end="131:33"><expr pos:start="131:33" pos:end="131:33"><literal type="number" pos:start="131:33" pos:end="131:33">0</literal></expr></argument>, <argument pos:start="131:36" pos:end="131:78"><expr pos:start="131:36" pos:end="131:78"><literal type="number" pos:start="131:36" pos:end="131:36">4</literal> <operator pos:start="131:38" pos:end="131:38">*</operator> <name pos:start="131:40" pos:end="131:50">MAX_ELEM_ID</name> <operator pos:start="131:52" pos:end="131:52">*</operator> <sizeof pos:start="131:54" pos:end="131:78">sizeof<argument_list pos:start="131:60" pos:end="131:78">(<argument pos:start="131:61" pos:end="131:77"><expr pos:start="131:61" pos:end="131:77"><name pos:start="131:61" pos:end="131:77"><name pos:start="131:61" pos:end="131:71">new_che_pos</name><index pos:start="131:72" pos:end="131:74">[<expr pos:start="131:73" pos:end="131:73"><literal type="number" pos:start="131:73" pos:end="131:73">0</literal></expr>]</index><index pos:start="131:75" pos:end="131:77">[<expr pos:start="131:76" pos:end="131:76"><literal type="number" pos:start="131:76" pos:end="131:76">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="135:22"><if pos:start="133:13" pos:end="135:22">if<condition pos:start="133:15" pos:end="133:56">(<expr pos:start="133:16" pos:end="133:55"><operator pos:start="133:16" pos:end="133:16">(</operator><name pos:start="133:17" pos:end="133:19">err</name> <operator pos:start="133:21" pos:end="133:21">=</operator> <call pos:start="133:23" pos:end="133:54"><name pos:start="133:23" pos:end="133:32">decode_pce</name><argument_list pos:start="133:33" pos:end="133:54">(<argument pos:start="133:34" pos:end="133:35"><expr pos:start="133:34" pos:end="133:35"><name pos:start="133:34" pos:end="133:35">ac</name></expr></argument>, <argument pos:start="133:38" pos:end="133:48"><expr pos:start="133:38" pos:end="133:48"><name pos:start="133:38" pos:end="133:48">new_che_pos</name></expr></argument>, <argument pos:start="133:51" pos:end="133:53"><expr pos:start="133:51" pos:end="133:53"><operator pos:start="133:51" pos:end="133:51">&amp;</operator><name pos:start="133:52" pos:end="133:53">gb</name></expr></argument>)</argument_list></call><operator pos:start="133:55" pos:end="133:55">)</operator></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:22"><block_content pos:start="135:17" pos:end="135:22">

                <break pos:start="135:17" pos:end="135:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:65"><expr pos:start="137:13" pos:end="137:64"><name pos:start="137:13" pos:end="137:15">err</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:64"><name pos:start="137:19" pos:end="137:34">output_configure</name><argument_list pos:start="137:35" pos:end="137:64">(<argument pos:start="137:36" pos:end="137:37"><expr pos:start="137:36" pos:end="137:37"><name pos:start="137:36" pos:end="137:37">ac</name></expr></argument>, <argument pos:start="137:40" pos:end="137:50"><expr pos:start="137:40" pos:end="137:50"><name pos:start="137:40" pos:end="137:50"><name pos:start="137:40" pos:end="137:41">ac</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:50">che_pos</name></name></expr></argument>, <argument pos:start="137:53" pos:end="137:63"><expr pos:start="137:53" pos:end="137:63"><name pos:start="137:53" pos:end="137:63">new_che_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        </block_content>}</block>



        <case pos:start="145:9" pos:end="145:22">case <expr pos:start="145:14" pos:end="145:21"><name pos:start="145:14" pos:end="145:21">TYPE_FIL</name></expr>:</case>

            <if_stmt pos:start="147:13" pos:end="149:48"><if pos:start="147:13" pos:end="149:48">if <condition pos:start="147:16" pos:end="147:30">(<expr pos:start="147:17" pos:end="147:29"><name pos:start="147:17" pos:end="147:23">elem_id</name> <operator pos:start="147:25" pos:end="147:26">==</operator> <literal type="number" pos:start="147:28" pos:end="147:29">15</literal></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:48"><block_content pos:start="149:17" pos:end="149:48">

                <expr_stmt pos:start="149:17" pos:end="149:48"><expr pos:start="149:17" pos:end="149:47"><name pos:start="149:17" pos:end="149:23">elem_id</name> <operator pos:start="149:25" pos:end="149:26">+=</operator> <call pos:start="149:28" pos:end="149:43"><name pos:start="149:28" pos:end="149:35">get_bits</name><argument_list pos:start="149:36" pos:end="149:43">(<argument pos:start="149:37" pos:end="149:39"><expr pos:start="149:37" pos:end="149:39"><operator pos:start="149:37" pos:end="149:37">&amp;</operator><name pos:start="149:38" pos:end="149:39">gb</name></expr></argument>, <argument pos:start="149:42" pos:end="149:42"><expr pos:start="149:42" pos:end="149:42"><literal type="number" pos:start="149:42" pos:end="149:42">8</literal></expr></argument>)</argument_list></call> <operator pos:start="149:45" pos:end="149:45">-</operator> <literal type="number" pos:start="149:47" pos:end="149:47">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <while pos:start="151:13" pos:end="153:70">while <condition pos:start="151:19" pos:end="151:31">(<expr pos:start="151:20" pos:end="151:30"><name pos:start="151:20" pos:end="151:26">elem_id</name> <operator pos:start="151:28" pos:end="151:28">&gt;</operator> <literal type="number" pos:start="151:30" pos:end="151:30">0</literal></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:70"><block_content pos:start="153:17" pos:end="153:70">

                <expr_stmt pos:start="153:17" pos:end="153:70"><expr pos:start="153:17" pos:end="153:69"><name pos:start="153:17" pos:end="153:23">elem_id</name> <operator pos:start="153:25" pos:end="153:26">-=</operator> <call pos:start="153:28" pos:end="153:69"><name pos:start="153:28" pos:end="153:51">decode_extension_payload</name><argument_list pos:start="153:52" pos:end="153:69">(<argument pos:start="153:53" pos:end="153:54"><expr pos:start="153:53" pos:end="153:54"><name pos:start="153:53" pos:end="153:54">ac</name></expr></argument>, <argument pos:start="153:57" pos:end="153:59"><expr pos:start="153:57" pos:end="153:59"><operator pos:start="153:57" pos:end="153:57">&amp;</operator><name pos:start="153:58" pos:end="153:59">gb</name></expr></argument>, <argument pos:start="153:62" pos:end="153:68"><expr pos:start="153:62" pos:end="153:68"><name pos:start="153:62" pos:end="153:68">elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="155:13" pos:end="155:20"><expr pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:15">err</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="155:22" pos:end="155:32">/* FIXME */</comment>

            <break pos:start="157:13" pos:end="157:18">break;</break>



        <default pos:start="161:9" pos:end="161:16">default:</default>

            <expr_stmt pos:start="163:13" pos:end="163:21"><expr pos:start="163:13" pos:end="163:20"><name pos:start="163:13" pos:end="163:15">err</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <operator pos:start="163:19" pos:end="163:19">-</operator><literal type="number" pos:start="163:20" pos:end="163:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="163:23" pos:end="163:71">/* should not happen, but keeps compiler happy */</comment>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="171:9" pos:end="173:23"><if pos:start="171:9" pos:end="173:23">if<condition pos:start="171:11" pos:end="171:15">(<expr pos:start="171:12" pos:end="171:14"><name pos:start="171:12" pos:end="171:14">err</name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:23"><block_content pos:start="173:13" pos:end="173:23">

            <return pos:start="173:13" pos:end="173:23">return <expr pos:start="173:20" pos:end="173:22"><name pos:start="173:20" pos:end="173:22">err</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="179:5" pos:end="179:27"><expr pos:start="179:5" pos:end="179:26"><call pos:start="179:5" pos:end="179:26"><name pos:start="179:5" pos:end="179:22">spectral_to_sample</name><argument_list pos:start="179:23" pos:end="179:26">(<argument pos:start="179:24" pos:end="179:25"><expr pos:start="179:24" pos:end="179:25"><name pos:start="179:24" pos:end="179:25">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="183:5" pos:end="191:5"><if pos:start="183:5" pos:end="191:5">if <condition pos:start="183:8" pos:end="183:22">(<expr pos:start="183:9" pos:end="183:21"><operator pos:start="183:9" pos:end="183:9">!</operator><name pos:start="183:10" pos:end="183:21"><name pos:start="183:10" pos:end="183:11">ac</name><operator pos:start="183:12" pos:end="183:13">-&gt;</operator><name pos:start="183:14" pos:end="183:21">is_saved</name></name></expr>)</condition> <block pos:start="183:24" pos:end="191:5">{<block_content pos:start="185:9" pos:end="189:24">

        <expr_stmt pos:start="185:9" pos:end="185:25"><expr pos:start="185:9" pos:end="185:24"><name pos:start="185:9" pos:end="185:20"><name pos:start="185:9" pos:end="185:10">ac</name><operator pos:start="185:11" pos:end="185:12">-&gt;</operator><name pos:start="185:13" pos:end="185:20">is_saved</name></name> <operator pos:start="185:22" pos:end="185:22">=</operator> <literal type="number" pos:start="185:24" pos:end="185:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:23"><expr pos:start="187:9" pos:end="187:22"><operator pos:start="187:9" pos:end="187:9">*</operator><name pos:start="187:10" pos:end="187:18">data_size</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <literal type="number" pos:start="187:22" pos:end="187:22">0</literal></expr>;</expr_stmt>

        <return pos:start="189:9" pos:end="189:24">return <expr pos:start="189:16" pos:end="189:23"><name pos:start="189:16" pos:end="189:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="195:5" pos:end="195:66"><expr pos:start="195:5" pos:end="195:65"><name pos:start="195:5" pos:end="195:17">data_size_tmp</name> <operator pos:start="195:19" pos:end="195:19">=</operator> <literal type="number" pos:start="195:21" pos:end="195:24">1024</literal> <operator pos:start="195:26" pos:end="195:26">*</operator> <name pos:start="195:28" pos:end="195:47"><name pos:start="195:28" pos:end="195:37">avccontext</name><operator pos:start="195:38" pos:end="195:39">-&gt;</operator><name pos:start="195:40" pos:end="195:47">channels</name></name> <operator pos:start="195:49" pos:end="195:49">*</operator> <sizeof pos:start="195:51" pos:end="195:65">sizeof<argument_list pos:start="195:57" pos:end="195:65">(<argument pos:start="195:58" pos:end="195:64"><expr pos:start="195:58" pos:end="195:64"><name pos:start="195:58" pos:end="195:64">int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="197:5" pos:end="207:5"><if pos:start="197:5" pos:end="207:5">if<condition pos:start="197:7" pos:end="197:34">(<expr pos:start="197:8" pos:end="197:33"><operator pos:start="197:8" pos:end="197:8">*</operator><name pos:start="197:9" pos:end="197:17">data_size</name> <operator pos:start="197:19" pos:end="197:19">&lt;</operator> <name pos:start="197:21" pos:end="197:33">data_size_tmp</name></expr>)</condition> <block pos:start="197:36" pos:end="207:5">{<block_content pos:start="199:9" pos:end="205:18">

        <expr_stmt pos:start="199:9" pos:end="203:42"><expr pos:start="199:9" pos:end="203:41"><call pos:start="199:9" pos:end="203:41"><name pos:start="199:9" pos:end="199:14">av_log</name><argument_list pos:start="199:15" pos:end="203:41">(<argument pos:start="199:16" pos:end="199:25"><expr pos:start="199:16" pos:end="199:25"><name pos:start="199:16" pos:end="199:25">avccontext</name></expr></argument>, <argument pos:start="199:28" pos:end="199:39"><expr pos:start="199:28" pos:end="199:39"><name pos:start="199:28" pos:end="199:39">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="201:16" pos:end="201:105"><expr pos:start="201:16" pos:end="201:105"><literal type="string" pos:start="201:16" pos:end="201:105">"Output buffer too small (%d) or trying to output too many samples (%d) for this frame.\n"</literal></expr></argument>,

               <argument pos:start="203:16" pos:end="203:25"><expr pos:start="203:16" pos:end="203:25"><operator pos:start="203:16" pos:end="203:16">*</operator><name pos:start="203:17" pos:end="203:25">data_size</name></expr></argument>, <argument pos:start="203:28" pos:end="203:40"><expr pos:start="203:28" pos:end="203:40"><name pos:start="203:28" pos:end="203:40">data_size_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="205:9" pos:end="205:18">return <expr pos:start="205:16" pos:end="205:17"><operator pos:start="205:16" pos:end="205:16">-</operator><literal type="number" pos:start="205:17" pos:end="205:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:31"><expr pos:start="209:5" pos:end="209:30"><operator pos:start="209:5" pos:end="209:5">*</operator><name pos:start="209:6" pos:end="209:14">data_size</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <name pos:start="209:18" pos:end="209:30">data_size_tmp</name></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:105"><expr pos:start="213:5" pos:end="213:104"><call pos:start="213:5" pos:end="213:104"><name pos:start="213:5" pos:end="213:37"><name pos:start="213:5" pos:end="213:6">ac</name><operator pos:start="213:7" pos:end="213:8">-&gt;</operator><name pos:start="213:9" pos:end="213:11">dsp</name><operator pos:start="213:12" pos:end="213:12">.</operator><name pos:start="213:13" pos:end="213:37">float_to_int16_interleave</name></name><argument_list pos:start="213:38" pos:end="213:104">(<argument pos:start="213:39" pos:end="213:42"><expr pos:start="213:39" pos:end="213:42"><name pos:start="213:39" pos:end="213:42">data</name></expr></argument>, <argument pos:start="213:45" pos:end="213:75"><expr pos:start="213:45" pos:end="213:75"><operator pos:start="213:45" pos:end="213:45">(</operator><specifier pos:start="213:46" pos:end="213:50">const</specifier> <name pos:start="213:52" pos:end="213:56">float</name> <operator pos:start="213:58" pos:end="213:58">*</operator><operator pos:start="213:59" pos:end="213:59">*</operator><operator pos:start="213:60" pos:end="213:60">)</operator><name pos:start="213:61" pos:end="213:75"><name pos:start="213:61" pos:end="213:62">ac</name><operator pos:start="213:63" pos:end="213:64">-&gt;</operator><name pos:start="213:65" pos:end="213:75">output_data</name></name></expr></argument>, <argument pos:start="213:78" pos:end="213:81"><expr pos:start="213:78" pos:end="213:81"><literal type="number" pos:start="213:78" pos:end="213:81">1024</literal></expr></argument>, <argument pos:start="213:84" pos:end="213:103"><expr pos:start="213:84" pos:end="213:103"><name pos:start="213:84" pos:end="213:103"><name pos:start="213:84" pos:end="213:93">avccontext</name><operator pos:start="213:94" pos:end="213:95">-&gt;</operator><name pos:start="213:96" pos:end="213:103">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="217:5" pos:end="217:20">return <expr pos:start="217:12" pos:end="217:19"><name pos:start="217:12" pos:end="217:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
