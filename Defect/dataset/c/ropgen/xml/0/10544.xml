<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10544.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">net_init_vde</name><parameter_list pos:start="1:17" pos:end="1:81">(<parameter pos:start="1:18" pos:end="1:31"><decl pos:start="1:18" pos:end="1:31"><type pos:start="1:18" pos:end="1:31"><name pos:start="1:18" pos:end="1:25">QemuOpts</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:31">opts</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:40">Monitor</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">mon</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:63"><decl pos:start="1:48" pos:end="1:63"><type pos:start="1:48" pos:end="1:63"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">name</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:80"><decl pos:start="1:66" pos:end="1:80"><type pos:start="1:66" pos:end="1:80"><name pos:start="1:66" pos:end="1:74">VLANState</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:80">vlan</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:21">group</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">port</name></decl>, <decl pos:start="9:15" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:18">mode</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:8">sock</name>  <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:38"><name pos:start="13:13" pos:end="13:24">qemu_opt_get</name><argument_list pos:start="13:25" pos:end="13:38">(<argument pos:start="13:26" pos:end="13:29"><expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">opts</name></expr></argument>, <argument pos:start="13:32" pos:end="13:37"><expr pos:start="13:32" pos:end="13:37"><literal type="string" pos:start="13:32" pos:end="13:37">"sock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:40"><expr pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:9">group</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:39"><name pos:start="15:13" pos:end="15:24">qemu_opt_get</name><argument_list pos:start="15:25" pos:end="15:39">(<argument pos:start="15:26" pos:end="15:29"><expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">opts</name></expr></argument>, <argument pos:start="15:32" pos:end="15:38"><expr pos:start="15:32" pos:end="15:38"><literal type="string" pos:start="15:32" pos:end="15:38">"group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:8">port</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="19:47"><name pos:start="19:12" pos:end="19:30">qemu_opt_get_number</name><argument_list pos:start="19:31" pos:end="19:47">(<argument pos:start="19:32" pos:end="19:35"><expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">opts</name></expr></argument>, <argument pos:start="19:38" pos:end="19:43"><expr pos:start="19:38" pos:end="19:43"><literal type="string" pos:start="19:38" pos:end="19:43">"port"</literal></expr></argument>, <argument pos:start="19:46" pos:end="19:46"><expr pos:start="19:46" pos:end="19:46"><literal type="number" pos:start="19:46" pos:end="19:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:8">mode</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:50"><name pos:start="21:12" pos:end="21:30">qemu_opt_get_number</name><argument_list pos:start="21:31" pos:end="21:50">(<argument pos:start="21:32" pos:end="21:35"><expr pos:start="21:32" pos:end="21:35"><name pos:start="21:32" pos:end="21:35">opts</name></expr></argument>, <argument pos:start="21:38" pos:end="21:43"><expr pos:start="21:38" pos:end="21:43"><literal type="string" pos:start="21:38" pos:end="21:43">"mode"</literal></expr></argument>, <argument pos:start="21:46" pos:end="21:49"><expr pos:start="21:46" pos:end="21:49"><literal type="number" pos:start="21:46" pos:end="21:49">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:71">(<expr pos:start="25:9" pos:end="25:70"><call pos:start="25:9" pos:end="25:64"><name pos:start="25:9" pos:end="25:20">net_vde_init</name><argument_list pos:start="25:21" pos:end="25:64">(<argument pos:start="25:22" pos:end="25:25"><expr pos:start="25:22" pos:end="25:25"><name pos:start="25:22" pos:end="25:25">vlan</name></expr></argument>, <argument pos:start="25:28" pos:end="25:32"><expr pos:start="25:28" pos:end="25:32"><literal type="string" pos:start="25:28" pos:end="25:32">"vde"</literal></expr></argument>, <argument pos:start="25:35" pos:end="25:38"><expr pos:start="25:35" pos:end="25:38"><name pos:start="25:35" pos:end="25:38">name</name></expr></argument>, <argument pos:start="25:41" pos:end="25:44"><expr pos:start="25:41" pos:end="25:44"><name pos:start="25:41" pos:end="25:44">sock</name></expr></argument>, <argument pos:start="25:47" pos:end="25:50"><expr pos:start="25:47" pos:end="25:50"><name pos:start="25:47" pos:end="25:50">port</name></expr></argument>, <argument pos:start="25:53" pos:end="25:57"><expr pos:start="25:53" pos:end="25:57"><name pos:start="25:53" pos:end="25:57">group</name></expr></argument>, <argument pos:start="25:60" pos:end="25:63"><expr pos:start="25:60" pos:end="25:63"><name pos:start="25:60" pos:end="25:63">mode</name></expr></argument>)</argument_list></call> <operator pos:start="25:66" pos:end="25:67">==</operator> <operator pos:start="25:69" pos:end="25:69">-</operator><literal type="number" pos:start="25:70" pos:end="25:70">1</literal></expr>)</condition> <block pos:start="25:73" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><name pos:start="33:9" pos:end="33:12">vlan</name></expr>)</condition> <block pos:start="33:15" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:29">

        <expr_stmt pos:start="35:9" pos:end="35:29"><expr pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:12">vlan</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:26">nb_host_devs</name></name><operator pos:start="35:27" pos:end="35:28">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="41:5" pos:end="41:13">return <expr pos:start="41:12" pos:end="41:12"><literal type="number" pos:start="41:12" pos:end="41:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
