<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2645.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:22">qemu_get_ram_ptr</name><parameter_list pos:start="1:23" pos:end="1:39">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:33"><name pos:start="1:24" pos:end="1:33">ram_addr_t</name></type> <name pos:start="1:35" pos:end="1:38">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:48">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">prev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:12">RAMBlock</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier><modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">prevp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">RAMBlock</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:19">block</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="13:1" pos:end="13:19">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:19">CONFIG_KQEMU</name></cpp:ifdef>

    <if_stmt pos:start="15:5" pos:end="22:0"><if pos:start="15:5" pos:end="22:0">if <condition pos:start="15:8" pos:end="15:28">(<expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:27">kqemu_phys_ram_base</name></expr>)</condition> <block pos:start="15:30" pos:end="22:0">{<block_content pos:start="17:9" pos:end="17:42">

        <return pos:start="17:9" pos:end="17:42">return <expr pos:start="17:16" pos:end="17:41"><name pos:start="17:16" pos:end="17:34">kqemu_phys_ram_base</name> <operator pos:start="17:36" pos:end="17:36">+</operator> <name pos:start="17:38" pos:end="17:41">addr</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:8">prev</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <name pos:start="25:12" pos:end="25:15">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:9">prevp</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <operator pos:start="27:13" pos:end="27:13">&amp;</operator><name pos:start="27:14" pos:end="27:23">ram_blocks</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:9">block</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <name pos:start="29:13" pos:end="29:22">ram_blocks</name></expr>;</expr_stmt>

    <while pos:start="31:5" pos:end="43:5">while <condition pos:start="31:11" pos:end="33:63">(<expr pos:start="31:12" pos:end="33:62"><name pos:start="31:12" pos:end="31:16">block</name> <operator pos:start="31:18" pos:end="31:19">&amp;&amp;</operator> <operator pos:start="31:21" pos:end="31:21">(</operator><name pos:start="31:22" pos:end="31:34"><name pos:start="31:22" pos:end="31:26">block</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:34">offset</name></name> <operator pos:start="31:36" pos:end="31:36">&gt;</operator> <name pos:start="31:38" pos:end="31:41">addr</name>

                     <operator pos:start="33:22" pos:end="33:23">||</operator> <name pos:start="33:25" pos:end="33:37"><name pos:start="33:25" pos:end="33:29">block</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:37">offset</name></name> <operator pos:start="33:39" pos:end="33:39">+</operator> <name pos:start="33:41" pos:end="33:53"><name pos:start="33:41" pos:end="33:45">block</name><operator pos:start="33:46" pos:end="33:47">-&gt;</operator><name pos:start="33:48" pos:end="33:53">length</name></name> <operator pos:start="33:55" pos:end="33:56">&lt;=</operator> <name pos:start="33:58" pos:end="33:61">addr</name><operator pos:start="33:62" pos:end="33:62">)</operator></expr>)</condition> <block pos:start="33:65" pos:end="43:5">{<block_content pos:start="35:9" pos:end="41:28">

        <if_stmt pos:start="35:9" pos:end="37:30"><if pos:start="35:9" pos:end="37:30">if <condition pos:start="35:12" pos:end="35:17">(<expr pos:start="35:13" pos:end="35:16"><name pos:start="35:13" pos:end="35:16">prev</name></expr>)</condition><block type="pseudo" pos:start="37:11" pos:end="37:30"><block_content pos:start="37:11" pos:end="37:30">

          <expr_stmt pos:start="37:11" pos:end="37:30"><expr pos:start="37:11" pos:end="37:29"><name pos:start="37:11" pos:end="37:15">prevp</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <operator pos:start="37:19" pos:end="37:19">&amp;</operator><name pos:start="37:20" pos:end="37:29"><name pos:start="37:20" pos:end="37:23">prev</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:29">next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:21"><expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:12">prev</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <name pos:start="39:16" pos:end="39:20">block</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:13">block</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:27"><name pos:start="41:17" pos:end="41:21">block</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:27">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:15">(<expr pos:start="45:9" pos:end="45:14"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:14">block</name></expr>)</condition> <block pos:start="45:17" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:16">

        <expr_stmt pos:start="47:9" pos:end="47:72"><expr pos:start="47:9" pos:end="47:71"><call pos:start="47:9" pos:end="47:71"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="47:71">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:54"><expr pos:start="47:25" pos:end="47:54"><literal type="string" pos:start="47:25" pos:end="47:42">"Bad ram offset %"</literal> <name pos:start="47:44" pos:end="47:49">PRIx64</name> <literal type="string" pos:start="47:51" pos:end="47:54">"\n"</literal></expr></argument>, <argument pos:start="47:57" pos:end="47:70"><expr pos:start="47:57" pos:end="47:70"><operator pos:start="47:57" pos:end="47:57">(</operator><name pos:start="47:58" pos:end="47:65">uint64_t</name><operator pos:start="47:66" pos:end="47:66">)</operator><name pos:start="47:67" pos:end="47:70">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:16"><expr pos:start="49:9" pos:end="49:15"><call pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:13">abort</name><argument_list pos:start="49:14" pos:end="49:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="53:5" pos:end="53:51">/* Move this entry to to start of the list.  */</comment>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:13">(<expr pos:start="55:9" pos:end="55:12"><name pos:start="55:9" pos:end="55:12">prev</name></expr>)</condition> <block pos:start="55:15" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:23">

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:12">prev</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:18">next</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <name pos:start="57:22" pos:end="57:32"><name pos:start="57:22" pos:end="57:26">block</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:32">next</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:13">block</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:19">next</name></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <operator pos:start="59:23" pos:end="59:23">*</operator><name pos:start="59:24" pos:end="59:28">prevp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><operator pos:start="61:9" pos:end="61:9">*</operator><name pos:start="61:10" pos:end="61:14">prevp</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:22">block</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="65:5" pos:end="65:48">return <expr pos:start="65:12" pos:end="65:47"><name pos:start="65:12" pos:end="65:22"><name pos:start="65:12" pos:end="65:16">block</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:22">host</name></name> <operator pos:start="65:24" pos:end="65:24">+</operator> <operator pos:start="65:26" pos:end="65:26">(</operator><name pos:start="65:27" pos:end="65:30">addr</name> <operator pos:start="65:32" pos:end="65:32">-</operator> <name pos:start="65:34" pos:end="65:46"><name pos:start="65:34" pos:end="65:38">block</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:46">offset</name></name><operator pos:start="65:47" pos:end="65:47">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
