<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12760.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">kvm_arm_gic_put</name><parameter_list pos:start="1:28" pos:end="1:40">(<parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:36">GICState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">num_cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">num_irq</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:41">(<expr pos:start="17:9" pos:end="17:40"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:40"><name pos:start="17:10" pos:end="17:37">kvm_arm_gic_can_save_restore</name><argument_list pos:start="17:38" pos:end="17:40">(<argument pos:start="17:39" pos:end="17:39"><expr pos:start="17:39" pos:end="17:39"><name pos:start="17:39" pos:end="17:39">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:43" pos:end="23:5">{<block_content pos:start="19:13" pos:end="21:19">

            <expr_stmt pos:start="19:13" pos:end="19:72"><expr pos:start="19:13" pos:end="19:71"><call pos:start="19:13" pos:end="19:71"><name pos:start="19:13" pos:end="19:19">DPRINTF</name><argument_list pos:start="19:20" pos:end="19:71">(<argument pos:start="19:21" pos:end="19:70"><expr pos:start="19:21" pos:end="19:70"><literal type="string" pos:start="19:21" pos:end="19:70">"Cannot put kernel gic state, no kernel interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="21:13" pos:end="21:19">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="31:32">/* Note: We do the restore in a slightly different order than the save

     * (where the order doesn't matter and is simply ordered according to the

     * register offset values */</comment>



    <comment type="block" format="doxygen" pos:start="35:5" pos:end="39:7">/*****************************************************************

     * Distributor State

     */</comment>



    <comment type="block" pos:start="43:5" pos:end="43:33">/* s-&gt;enabled -&gt; GICD_CTLR */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:21"><expr pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:7">reg</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <name pos:start="45:11" pos:end="45:20"><name pos:start="45:11" pos:end="45:11">s</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:20">enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><call pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:19">kvm_gicd_access</name><argument_list pos:start="47:20" pos:end="47:42">(<argument pos:start="47:21" pos:end="47:21"><expr pos:start="47:21" pos:end="47:21"><name pos:start="47:21" pos:end="47:21">s</name></expr></argument>, <argument pos:start="47:24" pos:end="47:26"><expr pos:start="47:24" pos:end="47:26"><literal type="number" pos:start="47:24" pos:end="47:26">0x0</literal></expr></argument>, <argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><literal type="number" pos:start="47:29" pos:end="47:29">0</literal></expr></argument>, <argument pos:start="47:32" pos:end="47:35"><expr pos:start="47:32" pos:end="47:35"><operator pos:start="47:32" pos:end="47:32">&amp;</operator><name pos:start="47:33" pos:end="47:35">reg</name></expr></argument>, <argument pos:start="47:38" pos:end="47:41"><expr pos:start="47:38" pos:end="47:41"><name pos:start="47:38" pos:end="47:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:66">/* Sanity checking on GICD_TYPER and s-&gt;num_irq, s-&gt;num_cpu */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:44"><expr pos:start="53:5" pos:end="53:43"><call pos:start="53:5" pos:end="53:43"><name pos:start="53:5" pos:end="53:19">kvm_gicd_access</name><argument_list pos:start="53:20" pos:end="53:43">(<argument pos:start="53:21" pos:end="53:21"><expr pos:start="53:21" pos:end="53:21"><name pos:start="53:21" pos:end="53:21">s</name></expr></argument>, <argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><literal type="number" pos:start="53:24" pos:end="53:26">0x4</literal></expr></argument>, <argument pos:start="53:29" pos:end="53:29"><expr pos:start="53:29" pos:end="53:29"><literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr></argument>, <argument pos:start="53:32" pos:end="53:35"><expr pos:start="53:32" pos:end="53:35"><operator pos:start="53:32" pos:end="53:32">&amp;</operator><name pos:start="53:33" pos:end="53:35">reg</name></expr></argument>, <argument pos:start="53:38" pos:end="53:42"><expr pos:start="53:38" pos:end="53:42"><name pos:start="53:38" pos:end="53:42">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:38"><expr pos:start="55:5" pos:end="55:37"><name pos:start="55:5" pos:end="55:11">num_irq</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <operator pos:start="55:15" pos:end="55:15">(</operator><operator pos:start="55:16" pos:end="55:16">(</operator><name pos:start="55:17" pos:end="55:19">reg</name> <operator pos:start="55:21" pos:end="55:21">&amp;</operator> <literal type="number" pos:start="55:23" pos:end="55:26">0x1f</literal><operator pos:start="55:27" pos:end="55:27">)</operator> <operator pos:start="55:29" pos:end="55:29">+</operator> <literal type="number" pos:start="55:31" pos:end="55:31">1</literal><operator pos:start="55:32" pos:end="55:32">)</operator> <operator pos:start="55:34" pos:end="55:34">*</operator> <literal type="number" pos:start="55:36" pos:end="55:37">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:38"><expr pos:start="57:5" pos:end="57:37"><name pos:start="57:5" pos:end="57:11">num_cpu</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">(</operator><operator pos:start="57:16" pos:end="57:16">(</operator><name pos:start="57:17" pos:end="57:19">reg</name> <operator pos:start="57:21" pos:end="57:21">&amp;</operator> <literal type="number" pos:start="57:23" pos:end="57:26">0xe0</literal><operator pos:start="57:27" pos:end="57:27">)</operator> <operator pos:start="57:29" pos:end="57:30">&gt;&gt;</operator> <literal type="number" pos:start="57:32" pos:end="57:32">5</literal><operator pos:start="57:33" pos:end="57:33">)</operator> <operator pos:start="57:35" pos:end="57:35">+</operator> <literal type="number" pos:start="57:37" pos:end="57:37">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="79:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:29">(<expr pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:15">num_irq</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <name pos:start="61:19" pos:end="61:28"><name pos:start="61:19" pos:end="61:19">s</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:28">num_irq</name></name></expr>)</condition> <block pos:start="61:31" pos:end="69:5">{<block_content pos:start="63:13" pos:end="67:20">

            <expr_stmt pos:start="63:13" pos:end="65:41"><expr pos:start="63:13" pos:end="65:40"><call pos:start="63:13" pos:end="65:40"><name pos:start="63:13" pos:end="63:19">fprintf</name><argument_list pos:start="63:20" pos:end="65:40">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">stderr</name></expr></argument>, <argument pos:start="63:29" pos:end="63:77"><expr pos:start="63:29" pos:end="63:77"><literal type="string" pos:start="63:29" pos:end="63:77">"Restoring %u IRQs, but kernel supports max %d\n"</literal></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:30"><expr pos:start="65:21" pos:end="65:30"><name pos:start="65:21" pos:end="65:30"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:30">num_irq</name></name></expr></argument>, <argument pos:start="65:33" pos:end="65:39"><expr pos:start="65:33" pos:end="65:39"><name pos:start="65:33" pos:end="65:39">num_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:20"><expr pos:start="67:13" pos:end="67:19"><call pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:17">abort</name><argument_list pos:start="67:18" pos:end="67:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="79:5">else if <condition pos:start="69:15" pos:end="69:37">(<expr pos:start="69:16" pos:end="69:36"><name pos:start="69:16" pos:end="69:22">num_cpu</name> <operator pos:start="69:24" pos:end="69:25">!=</operator> <name pos:start="69:27" pos:end="69:36"><name pos:start="69:27" pos:end="69:27">s</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:36">num_cpu</name></name></expr>)</condition> <block pos:start="69:39" pos:end="79:5">{<block_content pos:start="71:13" pos:end="77:20">

            <expr_stmt pos:start="71:13" pos:end="73:41"><expr pos:start="71:13" pos:end="73:40"><call pos:start="71:13" pos:end="73:40"><name pos:start="71:13" pos:end="71:19">fprintf</name><argument_list pos:start="71:20" pos:end="73:40">(<argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">stderr</name></expr></argument>, <argument pos:start="71:29" pos:end="71:79"><expr pos:start="71:29" pos:end="71:79"><literal type="string" pos:start="71:29" pos:end="71:79">"Restoring %u CPU interfaces, kernel only has %d\n"</literal></expr></argument>,

                    <argument pos:start="73:21" pos:end="73:30"><expr pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:30">num_cpu</name></name></expr></argument>, <argument pos:start="73:33" pos:end="73:39"><expr pos:start="73:33" pos:end="73:39"><name pos:start="73:33" pos:end="73:39">num_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="75:13" pos:end="75:64">/* Did we not create the VCPUs in the kernel yet? */</comment>

            <expr_stmt pos:start="77:13" pos:end="77:20"><expr pos:start="77:13" pos:end="77:19"><call pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:17">abort</name><argument_list pos:start="77:18" pos:end="77:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:63">/* TODO: Consider checking compatibility with the IIDR ? */</comment>



    <comment type="block" pos:start="87:5" pos:end="87:49">/* irq_state[n].enabled -&gt; GICD_ISENABLERn */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:59"><expr pos:start="89:5" pos:end="89:58"><call pos:start="89:5" pos:end="89:58"><name pos:start="89:5" pos:end="89:16">kvm_dist_put</name><argument_list pos:start="89:17" pos:end="89:58">(<argument pos:start="89:18" pos:end="89:18"><expr pos:start="89:18" pos:end="89:18"><name pos:start="89:18" pos:end="89:18">s</name></expr></argument>, <argument pos:start="89:21" pos:end="89:25"><expr pos:start="89:21" pos:end="89:25"><literal type="number" pos:start="89:21" pos:end="89:25">0x180</literal></expr></argument>, <argument pos:start="89:28" pos:end="89:28"><expr pos:start="89:28" pos:end="89:28"><literal type="number" pos:start="89:28" pos:end="89:28">1</literal></expr></argument>, <argument pos:start="89:31" pos:end="89:40"><expr pos:start="89:31" pos:end="89:40"><name pos:start="89:31" pos:end="89:40"><name pos:start="89:31" pos:end="89:31">s</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:40">num_irq</name></name></expr></argument>, <argument pos:start="89:43" pos:end="89:57"><expr pos:start="89:43" pos:end="89:57"><name pos:start="89:43" pos:end="89:57">translate_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:61"><expr pos:start="91:5" pos:end="91:60"><call pos:start="91:5" pos:end="91:60"><name pos:start="91:5" pos:end="91:16">kvm_dist_put</name><argument_list pos:start="91:17" pos:end="91:60">(<argument pos:start="91:18" pos:end="91:18"><expr pos:start="91:18" pos:end="91:18"><name pos:start="91:18" pos:end="91:18">s</name></expr></argument>, <argument pos:start="91:21" pos:end="91:25"><expr pos:start="91:21" pos:end="91:25"><literal type="number" pos:start="91:21" pos:end="91:25">0x100</literal></expr></argument>, <argument pos:start="91:28" pos:end="91:28"><expr pos:start="91:28" pos:end="91:28"><literal type="number" pos:start="91:28" pos:end="91:28">1</literal></expr></argument>, <argument pos:start="91:31" pos:end="91:40"><expr pos:start="91:31" pos:end="91:40"><name pos:start="91:31" pos:end="91:40"><name pos:start="91:31" pos:end="91:31">s</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:40">num_irq</name></name></expr></argument>, <argument pos:start="91:43" pos:end="91:59"><expr pos:start="91:43" pos:end="91:59"><name pos:start="91:43" pos:end="91:59">translate_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:45">/* irq_state[n].group -&gt; GICD_IGROUPRn */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:58"><expr pos:start="97:5" pos:end="97:57"><call pos:start="97:5" pos:end="97:57"><name pos:start="97:5" pos:end="97:16">kvm_dist_put</name><argument_list pos:start="97:17" pos:end="97:57">(<argument pos:start="97:18" pos:end="97:18"><expr pos:start="97:18" pos:end="97:18"><name pos:start="97:18" pos:end="97:18">s</name></expr></argument>, <argument pos:start="97:21" pos:end="97:24"><expr pos:start="97:21" pos:end="97:24"><literal type="number" pos:start="97:21" pos:end="97:24">0x80</literal></expr></argument>, <argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><literal type="number" pos:start="97:27" pos:end="97:27">1</literal></expr></argument>, <argument pos:start="97:30" pos:end="97:39"><expr pos:start="97:30" pos:end="97:39"><name pos:start="97:30" pos:end="97:39"><name pos:start="97:30" pos:end="97:30">s</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:39">num_irq</name></name></expr></argument>, <argument pos:start="97:42" pos:end="97:56"><expr pos:start="97:42" pos:end="97:56"><name pos:start="97:42" pos:end="97:56">translate_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="105:55">/* s-&gt;irq_target[irq] -&gt; GICD_ITARGETSRn

     * (restore targets before pending to ensure the pending state is set on

     * the appropriate CPU interfaces in the kernel) */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:61"><expr pos:start="107:5" pos:end="107:60"><call pos:start="107:5" pos:end="107:60"><name pos:start="107:5" pos:end="107:16">kvm_dist_put</name><argument_list pos:start="107:17" pos:end="107:60">(<argument pos:start="107:18" pos:end="107:18"><expr pos:start="107:18" pos:end="107:18"><name pos:start="107:18" pos:end="107:18">s</name></expr></argument>, <argument pos:start="107:21" pos:end="107:25"><expr pos:start="107:21" pos:end="107:25"><literal type="number" pos:start="107:21" pos:end="107:25">0x800</literal></expr></argument>, <argument pos:start="107:28" pos:end="107:28"><expr pos:start="107:28" pos:end="107:28"><literal type="number" pos:start="107:28" pos:end="107:28">8</literal></expr></argument>, <argument pos:start="107:31" pos:end="107:40"><expr pos:start="107:31" pos:end="107:40"><name pos:start="107:31" pos:end="107:40"><name pos:start="107:31" pos:end="107:31">s</name><operator pos:start="107:32" pos:end="107:33">-&gt;</operator><name pos:start="107:34" pos:end="107:40">num_irq</name></name></expr></argument>, <argument pos:start="107:43" pos:end="107:59"><expr pos:start="107:43" pos:end="107:59"><name pos:start="107:43" pos:end="107:59">translate_targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="115:31">/* irq_state[n].trigger -&gt; GICD_ICFGRn

     * (restore configuration registers before pending IRQs so we treat

     * level/edge correctly) */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:61"><expr pos:start="117:5" pos:end="117:60"><call pos:start="117:5" pos:end="117:60"><name pos:start="117:5" pos:end="117:16">kvm_dist_put</name><argument_list pos:start="117:17" pos:end="117:60">(<argument pos:start="117:18" pos:end="117:18"><expr pos:start="117:18" pos:end="117:18"><name pos:start="117:18" pos:end="117:18">s</name></expr></argument>, <argument pos:start="117:21" pos:end="117:25"><expr pos:start="117:21" pos:end="117:25"><literal type="number" pos:start="117:21" pos:end="117:25">0xc00</literal></expr></argument>, <argument pos:start="117:28" pos:end="117:28"><expr pos:start="117:28" pos:end="117:28"><literal type="number" pos:start="117:28" pos:end="117:28">2</literal></expr></argument>, <argument pos:start="117:31" pos:end="117:40"><expr pos:start="117:31" pos:end="117:40"><name pos:start="117:31" pos:end="117:40"><name pos:start="117:31" pos:end="117:31">s</name><operator pos:start="117:32" pos:end="117:33">-&gt;</operator><name pos:start="117:34" pos:end="117:40">num_irq</name></name></expr></argument>, <argument pos:start="117:43" pos:end="117:59"><expr pos:start="117:43" pos:end="117:59"><name pos:start="117:43" pos:end="117:59">translate_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:68">/* irq_state[n].pending + irq_state[n].level -&gt; GICD_ISPENDRn */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:59"><expr pos:start="123:5" pos:end="123:58"><call pos:start="123:5" pos:end="123:58"><name pos:start="123:5" pos:end="123:16">kvm_dist_put</name><argument_list pos:start="123:17" pos:end="123:58">(<argument pos:start="123:18" pos:end="123:18"><expr pos:start="123:18" pos:end="123:18"><name pos:start="123:18" pos:end="123:18">s</name></expr></argument>, <argument pos:start="123:21" pos:end="123:25"><expr pos:start="123:21" pos:end="123:25"><literal type="number" pos:start="123:21" pos:end="123:25">0x280</literal></expr></argument>, <argument pos:start="123:28" pos:end="123:28"><expr pos:start="123:28" pos:end="123:28"><literal type="number" pos:start="123:28" pos:end="123:28">1</literal></expr></argument>, <argument pos:start="123:31" pos:end="123:40"><expr pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:31">s</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:40">num_irq</name></name></expr></argument>, <argument pos:start="123:43" pos:end="123:57"><expr pos:start="123:43" pos:end="123:57"><name pos:start="123:43" pos:end="123:57">translate_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:61"><expr pos:start="125:5" pos:end="125:60"><call pos:start="125:5" pos:end="125:60"><name pos:start="125:5" pos:end="125:16">kvm_dist_put</name><argument_list pos:start="125:17" pos:end="125:60">(<argument pos:start="125:18" pos:end="125:18"><expr pos:start="125:18" pos:end="125:18"><name pos:start="125:18" pos:end="125:18">s</name></expr></argument>, <argument pos:start="125:21" pos:end="125:25"><expr pos:start="125:21" pos:end="125:25"><literal type="number" pos:start="125:21" pos:end="125:25">0x200</literal></expr></argument>, <argument pos:start="125:28" pos:end="125:28"><expr pos:start="125:28" pos:end="125:28"><literal type="number" pos:start="125:28" pos:end="125:28">1</literal></expr></argument>, <argument pos:start="125:31" pos:end="125:40"><expr pos:start="125:31" pos:end="125:40"><name pos:start="125:31" pos:end="125:40"><name pos:start="125:31" pos:end="125:31">s</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:40">num_irq</name></name></expr></argument>, <argument pos:start="125:43" pos:end="125:59"><expr pos:start="125:43" pos:end="125:59"><name pos:start="125:43" pos:end="125:59">translate_pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:48">/* irq_state[n].active -&gt; GICD_ISACTIVERn */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:59"><expr pos:start="131:5" pos:end="131:58"><call pos:start="131:5" pos:end="131:58"><name pos:start="131:5" pos:end="131:16">kvm_dist_put</name><argument_list pos:start="131:17" pos:end="131:58">(<argument pos:start="131:18" pos:end="131:18"><expr pos:start="131:18" pos:end="131:18"><name pos:start="131:18" pos:end="131:18">s</name></expr></argument>, <argument pos:start="131:21" pos:end="131:25"><expr pos:start="131:21" pos:end="131:25"><literal type="number" pos:start="131:21" pos:end="131:25">0x380</literal></expr></argument>, <argument pos:start="131:28" pos:end="131:28"><expr pos:start="131:28" pos:end="131:28"><literal type="number" pos:start="131:28" pos:end="131:28">1</literal></expr></argument>, <argument pos:start="131:31" pos:end="131:40"><expr pos:start="131:31" pos:end="131:40"><name pos:start="131:31" pos:end="131:40"><name pos:start="131:31" pos:end="131:31">s</name><operator pos:start="131:32" pos:end="131:33">-&gt;</operator><name pos:start="131:34" pos:end="131:40">num_irq</name></name></expr></argument>, <argument pos:start="131:43" pos:end="131:57"><expr pos:start="131:43" pos:end="131:57"><name pos:start="131:43" pos:end="131:57">translate_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:60"><expr pos:start="133:5" pos:end="133:59"><call pos:start="133:5" pos:end="133:59"><name pos:start="133:5" pos:end="133:16">kvm_dist_put</name><argument_list pos:start="133:17" pos:end="133:59">(<argument pos:start="133:18" pos:end="133:18"><expr pos:start="133:18" pos:end="133:18"><name pos:start="133:18" pos:end="133:18">s</name></expr></argument>, <argument pos:start="133:21" pos:end="133:25"><expr pos:start="133:21" pos:end="133:25"><literal type="number" pos:start="133:21" pos:end="133:25">0x300</literal></expr></argument>, <argument pos:start="133:28" pos:end="133:28"><expr pos:start="133:28" pos:end="133:28"><literal type="number" pos:start="133:28" pos:end="133:28">1</literal></expr></argument>, <argument pos:start="133:31" pos:end="133:40"><expr pos:start="133:31" pos:end="133:40"><name pos:start="133:31" pos:end="133:40"><name pos:start="133:31" pos:end="133:31">s</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:40">num_irq</name></name></expr></argument>, <argument pos:start="133:43" pos:end="133:58"><expr pos:start="133:43" pos:end="133:58"><name pos:start="133:43" pos:end="133:58">translate_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" pos:start="139:5" pos:end="139:46">/* s-&gt;priorityX[irq] -&gt; ICD_IPRIORITYRn */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:62"><expr pos:start="141:5" pos:end="141:61"><call pos:start="141:5" pos:end="141:61"><name pos:start="141:5" pos:end="141:16">kvm_dist_put</name><argument_list pos:start="141:17" pos:end="141:61">(<argument pos:start="141:18" pos:end="141:18"><expr pos:start="141:18" pos:end="141:18"><name pos:start="141:18" pos:end="141:18">s</name></expr></argument>, <argument pos:start="141:21" pos:end="141:25"><expr pos:start="141:21" pos:end="141:25"><literal type="number" pos:start="141:21" pos:end="141:25">0x400</literal></expr></argument>, <argument pos:start="141:28" pos:end="141:28"><expr pos:start="141:28" pos:end="141:28"><literal type="number" pos:start="141:28" pos:end="141:28">8</literal></expr></argument>, <argument pos:start="141:31" pos:end="141:40"><expr pos:start="141:31" pos:end="141:40"><name pos:start="141:31" pos:end="141:40"><name pos:start="141:31" pos:end="141:31">s</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:40">num_irq</name></name></expr></argument>, <argument pos:start="141:43" pos:end="141:60"><expr pos:start="141:43" pos:end="141:60"><name pos:start="141:43" pos:end="141:60">translate_priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:42">/* s-&gt;sgi_pending -&gt; ICD_CPENDSGIRn */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:60"><expr pos:start="147:5" pos:end="147:59"><call pos:start="147:5" pos:end="147:59"><name pos:start="147:5" pos:end="147:16">kvm_dist_put</name><argument_list pos:start="147:17" pos:end="147:59">(<argument pos:start="147:18" pos:end="147:18"><expr pos:start="147:18" pos:end="147:18"><name pos:start="147:18" pos:end="147:18">s</name></expr></argument>, <argument pos:start="147:21" pos:end="147:25"><expr pos:start="147:21" pos:end="147:25"><literal type="number" pos:start="147:21" pos:end="147:25">0xf10</literal></expr></argument>, <argument pos:start="147:28" pos:end="147:28"><expr pos:start="147:28" pos:end="147:28"><literal type="number" pos:start="147:28" pos:end="147:28">8</literal></expr></argument>, <argument pos:start="147:31" pos:end="147:41"><expr pos:start="147:31" pos:end="147:41"><name pos:start="147:31" pos:end="147:41">GIC_NR_SGIS</name></expr></argument>, <argument pos:start="147:44" pos:end="147:58"><expr pos:start="147:44" pos:end="147:58"><name pos:start="147:44" pos:end="147:58">translate_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:64"><expr pos:start="149:5" pos:end="149:63"><call pos:start="149:5" pos:end="149:63"><name pos:start="149:5" pos:end="149:16">kvm_dist_put</name><argument_list pos:start="149:17" pos:end="149:63">(<argument pos:start="149:18" pos:end="149:18"><expr pos:start="149:18" pos:end="149:18"><name pos:start="149:18" pos:end="149:18">s</name></expr></argument>, <argument pos:start="149:21" pos:end="149:25"><expr pos:start="149:21" pos:end="149:25"><literal type="number" pos:start="149:21" pos:end="149:25">0xf20</literal></expr></argument>, <argument pos:start="149:28" pos:end="149:28"><expr pos:start="149:28" pos:end="149:28"><literal type="number" pos:start="149:28" pos:end="149:28">8</literal></expr></argument>, <argument pos:start="149:31" pos:end="149:41"><expr pos:start="149:31" pos:end="149:41"><name pos:start="149:31" pos:end="149:41">GIC_NR_SGIS</name></expr></argument>, <argument pos:start="149:44" pos:end="149:62"><expr pos:start="149:44" pos:end="149:62"><name pos:start="149:44" pos:end="149:62">translate_sgisource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" format="doxygen" pos:start="155:5" pos:end="159:7">/*****************************************************************

     * CPU Interface(s) State

     */</comment>



    <for pos:start="163:5" pos:end="207:5">for <control pos:start="163:9" pos:end="163:42">(<init pos:start="163:10" pos:end="163:17"><expr pos:start="163:10" pos:end="163:16"><name pos:start="163:10" pos:end="163:12">cpu</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <literal type="number" pos:start="163:16" pos:end="163:16">0</literal></expr>;</init> <condition pos:start="163:19" pos:end="163:35"><expr pos:start="163:19" pos:end="163:34"><name pos:start="163:19" pos:end="163:21">cpu</name> <operator pos:start="163:23" pos:end="163:23">&lt;</operator> <name pos:start="163:25" pos:end="163:34"><name pos:start="163:25" pos:end="163:25">s</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:34">num_cpu</name></name></expr>;</condition> <incr pos:start="163:37" pos:end="163:41"><expr pos:start="163:37" pos:end="163:41"><name pos:start="163:37" pos:end="163:39">cpu</name><operator pos:start="163:40" pos:end="163:41">++</operator></expr></incr>)</control> <block pos:start="163:44" pos:end="207:5">{<block_content pos:start="167:9" pos:end="205:9">

        <comment type="block" pos:start="165:9" pos:end="165:46">/* s-&gt;cpu_enabled[cpu] -&gt; GICC_CTLR */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:34"><expr pos:start="167:9" pos:end="167:33"><name pos:start="167:9" pos:end="167:11">reg</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <name pos:start="167:15" pos:end="167:33"><name pos:start="167:15" pos:end="167:15">s</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:28">cpu_enabled</name><index pos:start="167:29" pos:end="167:33">[<expr pos:start="167:30" pos:end="167:32"><name pos:start="167:30" pos:end="167:32">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:50"><expr pos:start="169:9" pos:end="169:49"><call pos:start="169:9" pos:end="169:49"><name pos:start="169:9" pos:end="169:23">kvm_gicc_access</name><argument_list pos:start="169:24" pos:end="169:49">(<argument pos:start="169:25" pos:end="169:25"><expr pos:start="169:25" pos:end="169:25"><name pos:start="169:25" pos:end="169:25">s</name></expr></argument>, <argument pos:start="169:28" pos:end="169:31"><expr pos:start="169:28" pos:end="169:31"><literal type="number" pos:start="169:28" pos:end="169:31">0x00</literal></expr></argument>, <argument pos:start="169:34" pos:end="169:36"><expr pos:start="169:34" pos:end="169:36"><name pos:start="169:34" pos:end="169:36">cpu</name></expr></argument>, <argument pos:start="169:39" pos:end="169:42"><expr pos:start="169:39" pos:end="169:42"><operator pos:start="169:39" pos:end="169:39">&amp;</operator><name pos:start="169:40" pos:end="169:42">reg</name></expr></argument>, <argument pos:start="169:45" pos:end="169:48"><expr pos:start="169:45" pos:end="169:48"><name pos:start="169:45" pos:end="169:48">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="173:9" pos:end="173:47">/* s-&gt;priority_mask[cpu] -&gt; GICC_PMR */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:45"><expr pos:start="175:9" pos:end="175:44"><name pos:start="175:9" pos:end="175:11">reg</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <operator pos:start="175:15" pos:end="175:15">(</operator><name pos:start="175:16" pos:end="175:36"><name pos:start="175:16" pos:end="175:16">s</name><operator pos:start="175:17" pos:end="175:18">-&gt;</operator><name pos:start="175:19" pos:end="175:31">priority_mask</name><index pos:start="175:32" pos:end="175:36">[<expr pos:start="175:33" pos:end="175:35"><name pos:start="175:33" pos:end="175:35">cpu</name></expr>]</index></name> <operator pos:start="175:38" pos:end="175:38">&amp;</operator> <literal type="number" pos:start="175:40" pos:end="175:43">0xff</literal><operator pos:start="175:44" pos:end="175:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:50"><expr pos:start="177:9" pos:end="177:49"><call pos:start="177:9" pos:end="177:49"><name pos:start="177:9" pos:end="177:23">kvm_gicc_access</name><argument_list pos:start="177:24" pos:end="177:49">(<argument pos:start="177:25" pos:end="177:25"><expr pos:start="177:25" pos:end="177:25"><name pos:start="177:25" pos:end="177:25">s</name></expr></argument>, <argument pos:start="177:28" pos:end="177:31"><expr pos:start="177:28" pos:end="177:31"><literal type="number" pos:start="177:28" pos:end="177:31">0x04</literal></expr></argument>, <argument pos:start="177:34" pos:end="177:36"><expr pos:start="177:34" pos:end="177:36"><name pos:start="177:34" pos:end="177:36">cpu</name></expr></argument>, <argument pos:start="177:39" pos:end="177:42"><expr pos:start="177:39" pos:end="177:42"><operator pos:start="177:39" pos:end="177:39">&amp;</operator><name pos:start="177:40" pos:end="177:42">reg</name></expr></argument>, <argument pos:start="177:45" pos:end="177:48"><expr pos:start="177:45" pos:end="177:48"><name pos:start="177:45" pos:end="177:48">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="181:9" pos:end="181:37">/* s-&gt;bpr[cpu] -&gt; GICC_BPR */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:34"><expr pos:start="183:9" pos:end="183:33"><name pos:start="183:9" pos:end="183:11">reg</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <operator pos:start="183:15" pos:end="183:15">(</operator><name pos:start="183:16" pos:end="183:26"><name pos:start="183:16" pos:end="183:16">s</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:21">bpr</name><index pos:start="183:22" pos:end="183:26">[<expr pos:start="183:23" pos:end="183:25"><name pos:start="183:23" pos:end="183:25">cpu</name></expr>]</index></name> <operator pos:start="183:28" pos:end="183:28">&amp;</operator> <literal type="number" pos:start="183:30" pos:end="183:32">0x7</literal><operator pos:start="183:33" pos:end="183:33">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:50"><expr pos:start="185:9" pos:end="185:49"><call pos:start="185:9" pos:end="185:49"><name pos:start="185:9" pos:end="185:23">kvm_gicc_access</name><argument_list pos:start="185:24" pos:end="185:49">(<argument pos:start="185:25" pos:end="185:25"><expr pos:start="185:25" pos:end="185:25"><name pos:start="185:25" pos:end="185:25">s</name></expr></argument>, <argument pos:start="185:28" pos:end="185:31"><expr pos:start="185:28" pos:end="185:31"><literal type="number" pos:start="185:28" pos:end="185:31">0x08</literal></expr></argument>, <argument pos:start="185:34" pos:end="185:36"><expr pos:start="185:34" pos:end="185:36"><name pos:start="185:34" pos:end="185:36">cpu</name></expr></argument>, <argument pos:start="185:39" pos:end="185:42"><expr pos:start="185:39" pos:end="185:42"><operator pos:start="185:39" pos:end="185:39">&amp;</operator><name pos:start="185:40" pos:end="185:42">reg</name></expr></argument>, <argument pos:start="185:45" pos:end="185:48"><expr pos:start="185:45" pos:end="185:48"><name pos:start="185:45" pos:end="185:48">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="189:9" pos:end="189:39">/* s-&gt;abpr[cpu] -&gt; GICC_ABPR */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:35"><expr pos:start="191:9" pos:end="191:34"><name pos:start="191:9" pos:end="191:11">reg</name> <operator pos:start="191:13" pos:end="191:13">=</operator> <operator pos:start="191:15" pos:end="191:15">(</operator><name pos:start="191:16" pos:end="191:27"><name pos:start="191:16" pos:end="191:16">s</name><operator pos:start="191:17" pos:end="191:18">-&gt;</operator><name pos:start="191:19" pos:end="191:22">abpr</name><index pos:start="191:23" pos:end="191:27">[<expr pos:start="191:24" pos:end="191:26"><name pos:start="191:24" pos:end="191:26">cpu</name></expr>]</index></name> <operator pos:start="191:29" pos:end="191:29">&amp;</operator> <literal type="number" pos:start="191:31" pos:end="191:33">0x7</literal><operator pos:start="191:34" pos:end="191:34">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:50"><expr pos:start="193:9" pos:end="193:49"><call pos:start="193:9" pos:end="193:49"><name pos:start="193:9" pos:end="193:23">kvm_gicc_access</name><argument_list pos:start="193:24" pos:end="193:49">(<argument pos:start="193:25" pos:end="193:25"><expr pos:start="193:25" pos:end="193:25"><name pos:start="193:25" pos:end="193:25">s</name></expr></argument>, <argument pos:start="193:28" pos:end="193:31"><expr pos:start="193:28" pos:end="193:31"><literal type="number" pos:start="193:28" pos:end="193:31">0x1c</literal></expr></argument>, <argument pos:start="193:34" pos:end="193:36"><expr pos:start="193:34" pos:end="193:36"><name pos:start="193:34" pos:end="193:36">cpu</name></expr></argument>, <argument pos:start="193:39" pos:end="193:42"><expr pos:start="193:39" pos:end="193:42"><operator pos:start="193:39" pos:end="193:39">&amp;</operator><name pos:start="193:40" pos:end="193:42">reg</name></expr></argument>, <argument pos:start="193:45" pos:end="193:48"><expr pos:start="193:45" pos:end="193:48"><name pos:start="193:45" pos:end="193:48">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="197:9" pos:end="197:41">/* s-&gt;apr[n][cpu] -&gt; GICC_APRn */</comment>

        <for pos:start="199:9" pos:end="205:9">for <control pos:start="199:13" pos:end="199:31">(<init pos:start="199:14" pos:end="199:19"><expr pos:start="199:14" pos:end="199:18"><name pos:start="199:14" pos:end="199:14">i</name> <operator pos:start="199:16" pos:end="199:16">=</operator> <literal type="number" pos:start="199:18" pos:end="199:18">0</literal></expr>;</init> <condition pos:start="199:21" pos:end="199:26"><expr pos:start="199:21" pos:end="199:25"><name pos:start="199:21" pos:end="199:21">i</name> <operator pos:start="199:23" pos:end="199:23">&lt;</operator> <literal type="number" pos:start="199:25" pos:end="199:25">4</literal></expr>;</condition> <incr pos:start="199:28" pos:end="199:30"><expr pos:start="199:28" pos:end="199:30"><name pos:start="199:28" pos:end="199:28">i</name><operator pos:start="199:29" pos:end="199:30">++</operator></expr></incr>)</control> <block pos:start="199:33" pos:end="205:9">{<block_content pos:start="201:13" pos:end="203:62">

            <expr_stmt pos:start="201:13" pos:end="201:33"><expr pos:start="201:13" pos:end="201:32"><name pos:start="201:13" pos:end="201:15">reg</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <name pos:start="201:19" pos:end="201:32"><name pos:start="201:19" pos:end="201:19">s</name><operator pos:start="201:20" pos:end="201:21">-&gt;</operator><name pos:start="201:22" pos:end="201:24">apr</name><index pos:start="201:25" pos:end="201:27">[<expr pos:start="201:26" pos:end="201:26"><name pos:start="201:26" pos:end="201:26">i</name></expr>]</index><index pos:start="201:28" pos:end="201:32">[<expr pos:start="201:29" pos:end="201:31"><name pos:start="201:29" pos:end="201:31">cpu</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:62"><expr pos:start="203:13" pos:end="203:61"><call pos:start="203:13" pos:end="203:61"><name pos:start="203:13" pos:end="203:27">kvm_gicc_access</name><argument_list pos:start="203:28" pos:end="203:61">(<argument pos:start="203:29" pos:end="203:29"><expr pos:start="203:29" pos:end="203:29"><name pos:start="203:29" pos:end="203:29">s</name></expr></argument>, <argument pos:start="203:32" pos:end="203:43"><expr pos:start="203:32" pos:end="203:43"><literal type="number" pos:start="203:32" pos:end="203:37">0xd0</literal> <operator pos:start="203:37" pos:end="203:37">+</operator> <name pos:start="203:39" pos:end="203:39">i</name> <operator pos:start="203:41" pos:end="203:41">*</operator> <literal type="number" pos:start="203:43" pos:end="203:43">4</literal></expr></argument>, <argument pos:start="203:46" pos:end="203:48"><expr pos:start="203:46" pos:end="203:48"><name pos:start="203:46" pos:end="203:48">cpu</name></expr></argument>, <argument pos:start="203:51" pos:end="203:54"><expr pos:start="203:51" pos:end="203:54"><operator pos:start="203:51" pos:end="203:51">&amp;</operator><name pos:start="203:52" pos:end="203:54">reg</name></expr></argument>, <argument pos:start="203:57" pos:end="203:60"><expr pos:start="203:57" pos:end="203:60"><name pos:start="203:57" pos:end="203:60">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
