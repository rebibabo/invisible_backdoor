<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11443.c" pos:tabs="8"><function pos:start="1:1" pos:end="361:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">unpack_superblocks</name><parameter_list pos:start="1:31" pos:end="1:70">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:47">Vp3DecodeContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:69"><decl pos:start="1:53" pos:end="1:69"><type pos:start="1:53" pos:end="1:69"><name pos:start="1:53" pos:end="1:65">GetBitContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="361:1">{<block_content pos:start="5:5" pos:end="359:34">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">bit</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:26">current_superblock</name> <init pos:start="7:28" pos:end="7:30">= <expr pos:start="7:30" pos:end="7:30"><literal type="number" pos:start="7:30" pos:end="7:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">current_run</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:26">decode_fully_flags</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:29">decode_partial_blocks</name> <init pos:start="13:31" pos:end="13:33">= <expr pos:start="13:33" pos:end="13:33"><literal type="number" pos:start="13:33" pos:end="13:33">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:24">current_fragment</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:54"><expr pos:start="23:5" pos:end="23:53"><call pos:start="23:5" pos:end="23:53"><name pos:start="23:5" pos:end="23:13">debug_vp3</name><argument_list pos:start="23:14" pos:end="23:53">(<argument pos:start="23:15" pos:end="23:52"><expr pos:start="23:15" pos:end="23:52"><literal type="string" pos:start="23:15" pos:end="23:52">"  vp3: unpacking superblock coding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="183:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:19">keyframe</name></name></expr>)</condition> <block pos:start="27:22" pos:end="37:5">{<block_content pos:start="31:9" pos:end="33:74">



        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><call pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:17">debug_vp3</name><argument_list pos:start="31:18" pos:end="31:69">(<argument pos:start="31:19" pos:end="31:68"><expr pos:start="31:19" pos:end="31:68"><literal type="string" pos:start="31:19" pos:end="31:68">"    keyframe-- all superblocks are fully coded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:74"><expr pos:start="33:9" pos:end="33:73"><call pos:start="33:9" pos:end="33:73"><name pos:start="33:9" pos:end="33:14">memset</name><argument_list pos:start="33:15" pos:end="33:73">(<argument pos:start="33:16" pos:end="33:35"><expr pos:start="33:16" pos:end="33:35"><name pos:start="33:16" pos:end="33:35"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:35">superblock_coding</name></name></expr></argument>, <argument pos:start="33:38" pos:end="33:51"><expr pos:start="33:38" pos:end="33:51"><name pos:start="33:38" pos:end="33:51">SB_FULLY_CODED</name></expr></argument>, <argument pos:start="33:54" pos:end="33:72"><expr pos:start="33:54" pos:end="33:72"><name pos:start="33:54" pos:end="33:72"><name pos:start="33:54" pos:end="33:54">s</name><operator pos:start="33:55" pos:end="33:56">-&gt;</operator><name pos:start="33:57" pos:end="33:72">superblock_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="37:7" pos:end="183:5">else <block pos:start="37:12" pos:end="183:5">{<block_content pos:start="43:9" pos:end="181:9">



        <comment type="block" pos:start="41:9" pos:end="41:60">/* unpack the list of partially-coded superblocks */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:11">bit</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:29"><name pos:start="43:15" pos:end="43:22">get_bits</name><argument_list pos:start="43:23" pos:end="43:29">(<argument pos:start="43:24" pos:end="43:25"><expr pos:start="43:24" pos:end="43:25"><name pos:start="43:24" pos:end="43:25">gb</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="45:9" pos:end="47:51">/* toggle the bit because as soon as the first run length is 

         * fetched the bit will be toggled again */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:17"><expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:11">bit</name> <operator pos:start="49:13" pos:end="49:14">^=</operator> <literal type="number" pos:start="49:16" pos:end="49:16">1</literal></expr>;</expr_stmt>

        <while pos:start="51:9" pos:end="97:9">while <condition pos:start="51:15" pos:end="51:56">(<expr pos:start="51:16" pos:end="51:55"><name pos:start="51:16" pos:end="51:33">current_superblock</name> <operator pos:start="51:35" pos:end="51:35">&lt;</operator> <name pos:start="51:37" pos:end="51:55"><name pos:start="51:37" pos:end="51:37">s</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:55">superblock_count</name></name></expr>)</condition> <block pos:start="51:58" pos:end="97:9">{<block_content pos:start="53:13" pos:end="95:26">

            <if_stmt pos:start="53:13" pos:end="89:13"><if pos:start="53:13" pos:end="77:13">if <condition pos:start="53:16" pos:end="53:33">(<expr pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:27">current_run</name> <operator pos:start="53:29" pos:end="53:30">==</operator> <literal type="number" pos:start="53:32" pos:end="53:32">0</literal></expr>)</condition> <block pos:start="53:35" pos:end="77:13">{<block_content pos:start="55:17" pos:end="75:43">

                <expr_stmt pos:start="55:17" pos:end="55:25"><expr pos:start="55:17" pos:end="55:24"><name pos:start="55:17" pos:end="55:19">bit</name> <operator pos:start="55:21" pos:end="55:22">^=</operator> <literal type="number" pos:start="55:24" pos:end="55:24">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:60"><expr pos:start="57:17" pos:end="57:59"><name pos:start="57:17" pos:end="57:27">current_run</name> <operator pos:start="57:29" pos:end="57:29">=</operator> <call pos:start="57:31" pos:end="57:59"><name pos:start="57:31" pos:end="57:55">get_superblock_run_length</name><argument_list pos:start="57:56" pos:end="57:59">(<argument pos:start="57:57" pos:end="57:58"><expr pos:start="57:57" pos:end="57:58"><name pos:start="57:57" pos:end="57:58">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="65:61"><expr pos:start="59:17" pos:end="65:60"><call pos:start="59:17" pos:end="65:60"><name pos:start="59:17" pos:end="59:34">debug_block_coding</name><argument_list pos:start="59:35" pos:end="65:60">(<argument pos:start="59:36" pos:end="59:77"><expr pos:start="59:36" pos:end="59:77"><literal type="string" pos:start="59:36" pos:end="59:77">"      setting superblocks %d..%d to %s\n"</literal></expr></argument>,

                    <argument pos:start="61:21" pos:end="61:38"><expr pos:start="61:21" pos:end="61:38"><name pos:start="61:21" pos:end="61:38">current_superblock</name></expr></argument>,

                    <argument pos:start="63:21" pos:end="63:56"><expr pos:start="63:21" pos:end="63:56"><name pos:start="63:21" pos:end="63:38">current_superblock</name> <operator pos:start="63:40" pos:end="63:40">+</operator> <name pos:start="63:42" pos:end="63:52">current_run</name> <operator pos:start="63:54" pos:end="63:54">-</operator> <literal type="number" pos:start="63:56" pos:end="63:56">1</literal></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:59"><expr pos:start="65:21" pos:end="65:59"><ternary pos:start="65:21" pos:end="65:59"><condition pos:start="65:21" pos:end="65:27"><expr pos:start="65:21" pos:end="65:25"><operator pos:start="65:21" pos:end="65:21">(</operator><name pos:start="65:22" pos:end="65:24">bit</name><operator pos:start="65:25" pos:end="65:25">)</operator></expr> ?</condition><then pos:start="65:29" pos:end="65:45"> <expr pos:start="65:29" pos:end="65:45"><literal type="string" pos:start="65:29" pos:end="65:45">"partially coded"</literal></expr> </then><else pos:start="65:47" pos:end="65:59">: <expr pos:start="65:49" pos:end="65:59"><literal type="string" pos:start="65:49" pos:end="65:59">"not coded"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="69:17" pos:end="71:77">/* if any of the superblocks are not partially coded, flag

                 * a boolean to decode the list of fully-coded superblocks */</comment>

                <if_stmt pos:start="73:17" pos:end="75:43"><if pos:start="73:17" pos:end="75:43">if <condition pos:start="73:20" pos:end="73:29">(<expr pos:start="73:21" pos:end="73:28"><name pos:start="73:21" pos:end="73:23">bit</name> <operator pos:start="73:25" pos:end="73:26">==</operator> <literal type="number" pos:start="73:28" pos:end="73:28">0</literal></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:43"><block_content pos:start="75:21" pos:end="75:43">

                    <expr_stmt pos:start="75:21" pos:end="75:43"><expr pos:start="75:21" pos:end="75:42"><name pos:start="75:21" pos:end="75:38">decode_fully_flags</name> <operator pos:start="75:40" pos:end="75:40">=</operator> <literal type="number" pos:start="75:42" pos:end="75:42">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="77:15" pos:end="89:13">else <block pos:start="77:20" pos:end="89:13">{<block_content pos:start="85:17" pos:end="85:42">



                <comment type="block" pos:start="81:17" pos:end="83:33">/* make a note of the fact that there are partially coded

                 * superblocks */</comment>

                <expr_stmt pos:start="85:17" pos:end="85:42"><expr pos:start="85:17" pos:end="85:41"><name pos:start="85:17" pos:end="85:37">decode_partial_blocks</name> <operator pos:start="85:39" pos:end="85:39">=</operator> <literal type="number" pos:start="85:41" pos:end="85:41">1</literal></expr>;</expr_stmt>



            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="91:13" pos:end="93:58"><expr pos:start="91:13" pos:end="93:57"><name pos:start="91:13" pos:end="91:54"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:32">superblock_coding</name><index pos:start="91:33" pos:end="91:54">[<expr pos:start="91:34" pos:end="91:53"><name pos:start="91:34" pos:end="91:51">current_superblock</name><operator pos:start="91:52" pos:end="91:53">++</operator></expr>]</index></name> <operator pos:start="91:56" pos:end="91:56">=</operator> 

                <ternary pos:start="93:17" pos:end="93:57"><condition pos:start="93:17" pos:end="93:23"><expr pos:start="93:17" pos:end="93:21"><operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:20">bit</name><operator pos:start="93:21" pos:end="93:21">)</operator></expr> ?</condition><then pos:start="93:25" pos:end="93:42"> <expr pos:start="93:25" pos:end="93:42"><name pos:start="93:25" pos:end="93:42">SB_PARTIALLY_CODED</name></expr> </then><else pos:start="93:44" pos:end="93:57">: <expr pos:start="93:46" pos:end="93:57"><name pos:start="93:46" pos:end="93:57">SB_NOT_CODED</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:26"><expr pos:start="95:13" pos:end="95:25"><name pos:start="95:13" pos:end="95:23">current_run</name><operator pos:start="95:24" pos:end="95:25">--</operator></expr>;</expr_stmt>

        </block_content>}</block></while>



        <comment type="block" pos:start="101:9" pos:end="103:64">/* unpack the list of fully coded superblocks if any of the blocks were

         * not marked as partially coded in the previous step */</comment>

        <if_stmt pos:start="105:9" pos:end="159:9"><if pos:start="105:9" pos:end="159:9">if <condition pos:start="105:12" pos:end="105:31">(<expr pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:30">decode_fully_flags</name></expr>)</condition> <block pos:start="105:33" pos:end="159:9">{<block_content pos:start="109:13" pos:end="157:13">



            <expr_stmt pos:start="109:13" pos:end="109:35"><expr pos:start="109:13" pos:end="109:34"><name pos:start="109:13" pos:end="109:30">current_superblock</name> <operator pos:start="109:32" pos:end="109:32">=</operator> <literal type="number" pos:start="109:34" pos:end="109:34">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:28"><expr pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:23">current_run</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <literal type="number" pos:start="111:27" pos:end="111:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:34"><expr pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:15">bit</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <call pos:start="113:19" pos:end="113:33"><name pos:start="113:19" pos:end="113:26">get_bits</name><argument_list pos:start="113:27" pos:end="113:33">(<argument pos:start="113:28" pos:end="113:29"><expr pos:start="113:28" pos:end="113:29"><name pos:start="113:28" pos:end="113:29">gb</name></expr></argument>, <argument pos:start="113:32" pos:end="113:32"><expr pos:start="113:32" pos:end="113:32"><literal type="number" pos:start="113:32" pos:end="113:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="115:13" pos:end="117:55">/* toggle the bit because as soon as the first run length is 

             * fetched the bit will be toggled again */</comment>

            <expr_stmt pos:start="119:13" pos:end="119:21"><expr pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:15">bit</name> <operator pos:start="119:17" pos:end="119:18">^=</operator> <literal type="number" pos:start="119:20" pos:end="119:20">1</literal></expr>;</expr_stmt>

            <while pos:start="121:13" pos:end="157:13">while <condition pos:start="121:19" pos:end="121:60">(<expr pos:start="121:20" pos:end="121:59"><name pos:start="121:20" pos:end="121:37">current_superblock</name> <operator pos:start="121:39" pos:end="121:39">&lt;</operator> <name pos:start="121:41" pos:end="121:59"><name pos:start="121:41" pos:end="121:41">s</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:59">superblock_count</name></name></expr>)</condition> <block pos:start="121:62" pos:end="157:13">{<block_content pos:start="127:17" pos:end="155:37">



                <comment type="block" pos:start="125:17" pos:end="125:76">/* skip any superblocks already marked as partially coded */</comment>

                <if_stmt pos:start="127:17" pos:end="153:17"><if pos:start="127:17" pos:end="153:17">if <condition pos:start="127:20" pos:end="127:77">(<expr pos:start="127:21" pos:end="127:76"><name pos:start="127:21" pos:end="127:60"><name pos:start="127:21" pos:end="127:21">s</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:40">superblock_coding</name><index pos:start="127:41" pos:end="127:60">[<expr pos:start="127:42" pos:end="127:59"><name pos:start="127:42" pos:end="127:59">current_superblock</name></expr>]</index></name> <operator pos:start="127:62" pos:end="127:63">==</operator> <name pos:start="127:65" pos:end="127:76">SB_NOT_CODED</name></expr>)</condition> <block pos:start="127:79" pos:end="153:17">{<block_content pos:start="131:21" pos:end="151:34">



                    <if_stmt pos:start="131:21" pos:end="137:21"><if pos:start="131:21" pos:end="137:21">if <condition pos:start="131:24" pos:end="131:41">(<expr pos:start="131:25" pos:end="131:40"><name pos:start="131:25" pos:end="131:35">current_run</name> <operator pos:start="131:37" pos:end="131:38">==</operator> <literal type="number" pos:start="131:40" pos:end="131:40">0</literal></expr>)</condition> <block pos:start="131:43" pos:end="137:21">{<block_content pos:start="133:25" pos:end="135:68">

                        <expr_stmt pos:start="133:25" pos:end="133:33"><expr pos:start="133:25" pos:end="133:32"><name pos:start="133:25" pos:end="133:27">bit</name> <operator pos:start="133:29" pos:end="133:30">^=</operator> <literal type="number" pos:start="133:32" pos:end="133:32">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="135:25" pos:end="135:68"><expr pos:start="135:25" pos:end="135:67"><name pos:start="135:25" pos:end="135:35">current_run</name> <operator pos:start="135:37" pos:end="135:37">=</operator> <call pos:start="135:39" pos:end="135:67"><name pos:start="135:39" pos:end="135:63">get_superblock_run_length</name><argument_list pos:start="135:64" pos:end="135:67">(<argument pos:start="135:65" pos:end="135:66"><expr pos:start="135:65" pos:end="135:66"><name pos:start="135:65" pos:end="135:66">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="141:21" pos:end="145:61"><expr pos:start="141:21" pos:end="145:60"><call pos:start="141:21" pos:end="145:60"><name pos:start="141:21" pos:end="141:38">debug_block_coding</name><argument_list pos:start="141:39" pos:end="145:60">(<argument pos:start="141:40" pos:end="141:76"><expr pos:start="141:40" pos:end="141:76"><literal type="string" pos:start="141:40" pos:end="141:76">"      setting superblock %d to %s\n"</literal></expr></argument>,

                        <argument pos:start="143:25" pos:end="143:42"><expr pos:start="143:25" pos:end="143:42"><name pos:start="143:25" pos:end="143:42">current_superblock</name></expr></argument>,

                        <argument pos:start="145:25" pos:end="145:59"><expr pos:start="145:25" pos:end="145:59"><ternary pos:start="145:25" pos:end="145:59"><condition pos:start="145:25" pos:end="145:31"><expr pos:start="145:25" pos:end="145:29"><operator pos:start="145:25" pos:end="145:25">(</operator><name pos:start="145:26" pos:end="145:28">bit</name><operator pos:start="145:29" pos:end="145:29">)</operator></expr> ?</condition><then pos:start="145:33" pos:end="145:45"> <expr pos:start="145:33" pos:end="145:45"><literal type="string" pos:start="145:33" pos:end="145:45">"fully coded"</literal></expr> </then><else pos:start="145:47" pos:end="145:59">: <expr pos:start="145:49" pos:end="145:59"><literal type="string" pos:start="145:49" pos:end="145:59">"not coded"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="147:21" pos:end="149:62"><expr pos:start="147:21" pos:end="149:61"><name pos:start="147:21" pos:end="147:60"><name pos:start="147:21" pos:end="147:21">s</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:40">superblock_coding</name><index pos:start="147:41" pos:end="147:60">[<expr pos:start="147:42" pos:end="147:59"><name pos:start="147:42" pos:end="147:59">current_superblock</name></expr>]</index></name> <operator pos:start="147:62" pos:end="147:62">=</operator> 

                        <ternary pos:start="149:25" pos:end="149:61"><condition pos:start="149:25" pos:end="149:31"><expr pos:start="149:25" pos:end="149:29"><operator pos:start="149:25" pos:end="149:25">(</operator><name pos:start="149:26" pos:end="149:28">bit</name><operator pos:start="149:29" pos:end="149:29">)</operator></expr> ?</condition><then pos:start="149:33" pos:end="149:46"> <expr pos:start="149:33" pos:end="149:46"><name pos:start="149:33" pos:end="149:46">SB_FULLY_CODED</name></expr> </then><else pos:start="149:48" pos:end="149:61">: <expr pos:start="149:50" pos:end="149:61"><name pos:start="149:50" pos:end="149:61">SB_NOT_CODED</name></expr></else></ternary></expr>;</expr_stmt>

                    <expr_stmt pos:start="151:21" pos:end="151:34"><expr pos:start="151:21" pos:end="151:33"><name pos:start="151:21" pos:end="151:31">current_run</name><operator pos:start="151:32" pos:end="151:33">--</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:37"><expr pos:start="155:17" pos:end="155:36"><name pos:start="155:17" pos:end="155:34">current_superblock</name><operator pos:start="155:35" pos:end="155:36">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="163:9" pos:end="165:40">/* if there were partial blocks, initialize bitstream for

         * unpacking fragment codings */</comment>

        <if_stmt pos:start="167:9" pos:end="181:9"><if pos:start="167:9" pos:end="181:9">if <condition pos:start="167:12" pos:end="167:34">(<expr pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:33">decode_partial_blocks</name></expr>)</condition> <block pos:start="167:36" pos:end="181:9">{<block_content pos:start="171:13" pos:end="179:21">



            <expr_stmt pos:start="171:13" pos:end="171:28"><expr pos:start="171:13" pos:end="171:27"><name pos:start="171:13" pos:end="171:23">current_run</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <literal type="number" pos:start="171:27" pos:end="171:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:34"><expr pos:start="173:13" pos:end="173:33"><name pos:start="173:13" pos:end="173:15">bit</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:33"><name pos:start="173:19" pos:end="173:26">get_bits</name><argument_list pos:start="173:27" pos:end="173:33">(<argument pos:start="173:28" pos:end="173:29"><expr pos:start="173:28" pos:end="173:29"><name pos:start="173:28" pos:end="173:29">gb</name></expr></argument>, <argument pos:start="173:32" pos:end="173:32"><expr pos:start="173:32" pos:end="173:32"><literal type="number" pos:start="173:32" pos:end="173:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="175:13" pos:end="177:55">/* toggle the bit because as soon as the first run length is 

             * fetched the bit will be toggled again */</comment>

            <expr_stmt pos:start="179:13" pos:end="179:21"><expr pos:start="179:13" pos:end="179:20"><name pos:start="179:13" pos:end="179:15">bit</name> <operator pos:start="179:17" pos:end="179:18">^=</operator> <literal type="number" pos:start="179:20" pos:end="179:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="187:5" pos:end="189:33">/* figure out which fragments are coded; iterate through each

     * superblock (all planes) */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:37"><expr pos:start="191:5" pos:end="191:36"><name pos:start="191:5" pos:end="191:32"><name pos:start="191:5" pos:end="191:5">s</name><operator pos:start="191:6" pos:end="191:7">-&gt;</operator><name pos:start="191:8" pos:end="191:32">coded_fragment_list_index</name></name> <operator pos:start="191:34" pos:end="191:34">=</operator> <literal type="number" pos:start="191:36" pos:end="191:36">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:62"><expr pos:start="193:5" pos:end="193:61"><name pos:start="193:5" pos:end="193:29"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:29">first_coded_y_fragment</name></name> <operator pos:start="193:31" pos:end="193:31">=</operator> <name pos:start="193:33" pos:end="193:57"><name pos:start="193:33" pos:end="193:33">s</name><operator pos:start="193:34" pos:end="193:35">-&gt;</operator><name pos:start="193:36" pos:end="193:57">first_coded_c_fragment</name></name> <operator pos:start="193:59" pos:end="193:59">=</operator> <literal type="number" pos:start="193:61" pos:end="193:61">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:61"><expr pos:start="195:5" pos:end="195:60"><name pos:start="195:5" pos:end="195:28"><name pos:start="195:5" pos:end="195:5">s</name><operator pos:start="195:6" pos:end="195:7">-&gt;</operator><name pos:start="195:8" pos:end="195:28">last_coded_y_fragment</name></name> <operator pos:start="195:30" pos:end="195:30">=</operator> <name pos:start="195:32" pos:end="195:55"><name pos:start="195:32" pos:end="195:32">s</name><operator pos:start="195:33" pos:end="195:34">-&gt;</operator><name pos:start="195:35" pos:end="195:55">last_coded_c_fragment</name></name> <operator pos:start="195:57" pos:end="195:57">=</operator> <operator pos:start="195:59" pos:end="195:59">-</operator><literal type="number" pos:start="195:60" pos:end="195:60">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:56"><expr pos:start="197:5" pos:end="197:55"><call pos:start="197:5" pos:end="197:55"><name pos:start="197:5" pos:end="197:10">memset</name><argument_list pos:start="197:11" pos:end="197:55">(<argument pos:start="197:12" pos:end="197:30"><expr pos:start="197:12" pos:end="197:30"><name pos:start="197:12" pos:end="197:30"><name pos:start="197:12" pos:end="197:12">s</name><operator pos:start="197:13" pos:end="197:14">-&gt;</operator><name pos:start="197:15" pos:end="197:30">macroblock_coded</name></name></expr></argument>, <argument pos:start="197:33" pos:end="197:33"><expr pos:start="197:33" pos:end="197:33"><literal type="number" pos:start="197:33" pos:end="197:33">0</literal></expr></argument>, <argument pos:start="197:36" pos:end="197:54"><expr pos:start="197:36" pos:end="197:54"><name pos:start="197:36" pos:end="197:54"><name pos:start="197:36" pos:end="197:36">s</name><operator pos:start="197:37" pos:end="197:38">-&gt;</operator><name pos:start="197:39" pos:end="197:54">macroblock_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="199:5" pos:end="335:5">for <control pos:start="199:9" pos:end="199:45">(<init pos:start="199:10" pos:end="199:15"><expr pos:start="199:10" pos:end="199:14"><name pos:start="199:10" pos:end="199:10">i</name> <operator pos:start="199:12" pos:end="199:12">=</operator> <literal type="number" pos:start="199:14" pos:end="199:14">0</literal></expr>;</init> <condition pos:start="199:17" pos:end="199:40"><expr pos:start="199:17" pos:end="199:39"><name pos:start="199:17" pos:end="199:17">i</name> <operator pos:start="199:19" pos:end="199:19">&lt;</operator> <name pos:start="199:21" pos:end="199:39"><name pos:start="199:21" pos:end="199:21">s</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:39">superblock_count</name></name></expr>;</condition> <incr pos:start="199:42" pos:end="199:44"><expr pos:start="199:42" pos:end="199:44"><name pos:start="199:42" pos:end="199:42">i</name><operator pos:start="199:43" pos:end="199:44">++</operator></expr></incr>)</control> <block pos:start="199:47" pos:end="335:5">{<block_content pos:start="205:9" pos:end="333:9">



        <comment type="block" pos:start="203:9" pos:end="203:62">/* iterate through all 16 fragments in a superblock */</comment>

        <for pos:start="205:9" pos:end="333:9">for <control pos:start="205:13" pos:end="205:32">(<init pos:start="205:14" pos:end="205:19"><expr pos:start="205:14" pos:end="205:18"><name pos:start="205:14" pos:end="205:14">j</name> <operator pos:start="205:16" pos:end="205:16">=</operator> <literal type="number" pos:start="205:18" pos:end="205:18">0</literal></expr>;</init> <condition pos:start="205:21" pos:end="205:27"><expr pos:start="205:21" pos:end="205:26"><name pos:start="205:21" pos:end="205:21">j</name> <operator pos:start="205:23" pos:end="205:23">&lt;</operator> <literal type="number" pos:start="205:25" pos:end="205:26">16</literal></expr>;</condition> <incr pos:start="205:29" pos:end="205:31"><expr pos:start="205:29" pos:end="205:31"><name pos:start="205:29" pos:end="205:29">j</name><operator pos:start="205:30" pos:end="205:31">++</operator></expr></incr>)</control> <block pos:start="205:34" pos:end="333:9">{<block_content pos:start="211:13" pos:end="331:13">



            <comment type="block" pos:start="209:13" pos:end="209:71">/* if the fragment is in bounds, check its coding status */</comment>

            <expr_stmt pos:start="211:13" pos:end="211:67"><expr pos:start="211:13" pos:end="211:66"><name pos:start="211:13" pos:end="211:28">current_fragment</name> <operator pos:start="211:30" pos:end="211:30">=</operator> <name pos:start="211:32" pos:end="211:66"><name pos:start="211:32" pos:end="211:32">s</name><operator pos:start="211:33" pos:end="211:34">-&gt;</operator><name pos:start="211:35" pos:end="211:54">superblock_fragments</name><index pos:start="211:55" pos:end="211:66">[<expr pos:start="211:56" pos:end="211:65"><name pos:start="211:56" pos:end="211:56">i</name> <operator pos:start="211:58" pos:end="211:58">*</operator> <literal type="number" pos:start="211:60" pos:end="211:63">16</literal> <operator pos:start="211:63" pos:end="211:63">+</operator> <name pos:start="211:65" pos:end="211:65">j</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="331:13"><if pos:start="213:13" pos:end="331:13">if <condition pos:start="213:16" pos:end="213:39">(<expr pos:start="213:17" pos:end="213:38"><name pos:start="213:17" pos:end="213:32">current_fragment</name> <operator pos:start="213:34" pos:end="213:35">!=</operator> <operator pos:start="213:37" pos:end="213:37">-</operator><literal type="number" pos:start="213:38" pos:end="213:38">1</literal></expr>)</condition> <block pos:start="213:41" pos:end="331:13">{<block_content pos:start="215:17" pos:end="329:17">

                <if_stmt pos:start="215:17" pos:end="329:17"><if pos:start="215:17" pos:end="227:17">if <condition pos:start="215:20" pos:end="215:60">(<expr pos:start="215:21" pos:end="215:59"><name pos:start="215:21" pos:end="215:43"><name pos:start="215:21" pos:end="215:21">s</name><operator pos:start="215:22" pos:end="215:23">-&gt;</operator><name pos:start="215:24" pos:end="215:40">superblock_coding</name><index pos:start="215:41" pos:end="215:43">[<expr pos:start="215:42" pos:end="215:42"><name pos:start="215:42" pos:end="215:42">i</name></expr>]</index></name> <operator pos:start="215:45" pos:end="215:46">==</operator> <name pos:start="215:48" pos:end="215:59">SB_NOT_CODED</name></expr>)</condition> <block pos:start="215:62" pos:end="227:17">{<block_content pos:start="221:21" pos:end="223:34">



                    <comment type="block" pos:start="219:21" pos:end="219:69">/* copy all the fragments from the prior frame */</comment>

                    <expr_stmt pos:start="221:21" pos:end="223:34"><expr pos:start="221:21" pos:end="223:33"><name pos:start="221:21" pos:end="221:54"><name pos:start="221:21" pos:end="221:21">s</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:36">all_fragments</name><index pos:start="221:37" pos:end="221:54">[<expr pos:start="221:38" pos:end="221:53"><name pos:start="221:38" pos:end="221:53">current_fragment</name></expr>]</index></name><operator pos:start="221:55" pos:end="221:55">.</operator><name pos:start="221:56" pos:end="221:68">coding_method</name> <operator pos:start="221:70" pos:end="221:70">=</operator> 

                        <name pos:start="223:25" pos:end="223:33">MODE_COPY</name></expr>;</expr_stmt>



                </block_content>}</block></if> <if type="elseif" pos:start="227:19" pos:end="295:17">else if <condition pos:start="227:27" pos:end="227:73">(<expr pos:start="227:28" pos:end="227:72"><name pos:start="227:28" pos:end="227:50"><name pos:start="227:28" pos:end="227:28">s</name><operator pos:start="227:29" pos:end="227:30">-&gt;</operator><name pos:start="227:31" pos:end="227:47">superblock_coding</name><index pos:start="227:48" pos:end="227:50">[<expr pos:start="227:49" pos:end="227:49"><name pos:start="227:49" pos:end="227:49">i</name></expr>]</index></name> <operator pos:start="227:52" pos:end="227:53">==</operator> <name pos:start="227:55" pos:end="227:72">SB_PARTIALLY_CODED</name></expr>)</condition> <block pos:start="227:75" pos:end="295:17">{<block_content pos:start="235:21" pos:end="291:34">



                    <comment type="block" pos:start="231:21" pos:end="233:67">/* fragment may or may not be coded; this is the case

                     * that cares about the fragment coding runs */</comment>

                    <if_stmt pos:start="235:21" pos:end="241:21"><if pos:start="235:21" pos:end="241:21">if <condition pos:start="235:24" pos:end="235:41">(<expr pos:start="235:25" pos:end="235:40"><name pos:start="235:25" pos:end="235:35">current_run</name> <operator pos:start="235:37" pos:end="235:38">==</operator> <literal type="number" pos:start="235:40" pos:end="235:40">0</literal></expr>)</condition> <block pos:start="235:43" pos:end="241:21">{<block_content pos:start="237:25" pos:end="239:66">

                        <expr_stmt pos:start="237:25" pos:end="237:33"><expr pos:start="237:25" pos:end="237:32"><name pos:start="237:25" pos:end="237:27">bit</name> <operator pos:start="237:29" pos:end="237:30">^=</operator> <literal type="number" pos:start="237:32" pos:end="237:32">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="239:25" pos:end="239:66"><expr pos:start="239:25" pos:end="239:65"><name pos:start="239:25" pos:end="239:35">current_run</name> <operator pos:start="239:37" pos:end="239:37">=</operator> <call pos:start="239:39" pos:end="239:65"><name pos:start="239:39" pos:end="239:61">get_fragment_run_length</name><argument_list pos:start="239:62" pos:end="239:65">(<argument pos:start="239:63" pos:end="239:64"><expr pos:start="239:63" pos:end="239:64"><name pos:start="239:63" pos:end="239:64">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="245:21" pos:end="287:21"><if pos:start="245:21" pos:end="275:21">if <condition pos:start="245:24" pos:end="245:28">(<expr pos:start="245:25" pos:end="245:27"><name pos:start="245:25" pos:end="245:27">bit</name></expr>)</condition> <block pos:start="245:30" pos:end="275:21">{<block_content pos:start="249:25" pos:end="273:49">

                        <comment type="block" pos:start="247:25" pos:end="247:68">/* mode will be decoded in the next phase */</comment>

                        <expr_stmt pos:start="249:25" pos:end="251:45"><expr pos:start="249:25" pos:end="251:44"><name pos:start="249:25" pos:end="249:58"><name pos:start="249:25" pos:end="249:25">s</name><operator pos:start="249:26" pos:end="249:27">-&gt;</operator><name pos:start="249:28" pos:end="249:40">all_fragments</name><index pos:start="249:41" pos:end="249:58">[<expr pos:start="249:42" pos:end="249:57"><name pos:start="249:42" pos:end="249:57">current_fragment</name></expr>]</index></name><operator pos:start="249:59" pos:end="249:59">.</operator><name pos:start="249:60" pos:end="249:72">coding_method</name> <operator pos:start="249:74" pos:end="249:74">=</operator> 

                            <name pos:start="251:29" pos:end="251:44">MODE_INTER_NO_MV</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="253:25" pos:end="255:45"><expr pos:start="253:25" pos:end="255:44"><name pos:start="253:25" pos:end="253:76"><name pos:start="253:25" pos:end="253:25">s</name><operator pos:start="253:26" pos:end="253:27">-&gt;</operator><name pos:start="253:28" pos:end="253:46">coded_fragment_list</name><index pos:start="253:47" pos:end="253:76">[<expr pos:start="253:48" pos:end="253:75"><name pos:start="253:48" pos:end="253:75"><name pos:start="253:48" pos:end="253:48">s</name><operator pos:start="253:49" pos:end="253:50">-&gt;</operator><name pos:start="253:51" pos:end="253:75">coded_fragment_list_index</name></name></expr>]</index></name> <operator pos:start="253:78" pos:end="253:78">=</operator> 

                            <name pos:start="255:29" pos:end="255:44">current_fragment</name></expr>;</expr_stmt>

                        <if_stmt pos:start="257:25" pos:end="265:25"><if pos:start="257:25" pos:end="265:25">if <condition pos:start="257:28" pos:end="259:61">(<expr pos:start="257:29" pos:end="259:60"><operator pos:start="257:29" pos:end="257:29">(</operator><name pos:start="257:30" pos:end="257:45">current_fragment</name> <operator pos:start="257:47" pos:end="257:48">&gt;=</operator> <name pos:start="257:50" pos:end="257:68"><name pos:start="257:50" pos:end="257:50">s</name><operator pos:start="257:51" pos:end="257:52">-&gt;</operator><name pos:start="257:53" pos:end="257:68">u_fragment_start</name></name><operator pos:start="257:69" pos:end="257:69">)</operator> <operator pos:start="257:71" pos:end="257:72">&amp;&amp;</operator>

                            <operator pos:start="259:29" pos:end="259:29">(</operator><name pos:start="259:30" pos:end="259:53"><name pos:start="259:30" pos:end="259:30">s</name><operator pos:start="259:31" pos:end="259:32">-&gt;</operator><name pos:start="259:33" pos:end="259:53">last_coded_y_fragment</name></name> <operator pos:start="259:55" pos:end="259:56">==</operator> <operator pos:start="259:58" pos:end="259:58">-</operator><literal type="number" pos:start="259:59" pos:end="259:59">1</literal><operator pos:start="259:60" pos:end="259:60">)</operator></expr>)</condition> <block pos:start="259:63" pos:end="265:25">{<block_content pos:start="261:29" pos:end="263:85">

                            <expr_stmt pos:start="261:29" pos:end="261:85"><expr pos:start="261:29" pos:end="261:84"><name pos:start="261:29" pos:end="261:53"><name pos:start="261:29" pos:end="261:29">s</name><operator pos:start="261:30" pos:end="261:31">-&gt;</operator><name pos:start="261:32" pos:end="261:53">first_coded_c_fragment</name></name> <operator pos:start="261:55" pos:end="261:55">=</operator> <name pos:start="261:57" pos:end="261:84"><name pos:start="261:57" pos:end="261:57">s</name><operator pos:start="261:58" pos:end="261:59">-&gt;</operator><name pos:start="261:60" pos:end="261:84">coded_fragment_list_index</name></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="263:29" pos:end="263:85"><expr pos:start="263:29" pos:end="263:84"><name pos:start="263:29" pos:end="263:52"><name pos:start="263:29" pos:end="263:29">s</name><operator pos:start="263:30" pos:end="263:31">-&gt;</operator><name pos:start="263:32" pos:end="263:52">last_coded_y_fragment</name></name> <operator pos:start="263:54" pos:end="263:54">=</operator> <name pos:start="263:56" pos:end="263:80"><name pos:start="263:56" pos:end="263:56">s</name><operator pos:start="263:57" pos:end="263:58">-&gt;</operator><name pos:start="263:59" pos:end="263:80">first_coded_c_fragment</name></name> <operator pos:start="263:82" pos:end="263:82">-</operator> <literal type="number" pos:start="263:84" pos:end="263:84">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="267:25" pos:end="267:55"><expr pos:start="267:25" pos:end="267:54"><name pos:start="267:25" pos:end="267:52"><name pos:start="267:25" pos:end="267:25">s</name><operator pos:start="267:26" pos:end="267:27">-&gt;</operator><name pos:start="267:28" pos:end="267:52">coded_fragment_list_index</name></name><operator pos:start="267:53" pos:end="267:54">++</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="269:25" pos:end="269:95"><expr pos:start="269:25" pos:end="269:94"><name pos:start="269:25" pos:end="269:90"><name pos:start="269:25" pos:end="269:25">s</name><operator pos:start="269:26" pos:end="269:27">-&gt;</operator><name pos:start="269:28" pos:end="269:43">macroblock_coded</name><index pos:start="269:44" pos:end="269:90">[<expr pos:start="269:45" pos:end="269:89"><name pos:start="269:45" pos:end="269:78"><name pos:start="269:45" pos:end="269:45">s</name><operator pos:start="269:46" pos:end="269:47">-&gt;</operator><name pos:start="269:48" pos:end="269:60">all_fragments</name><index pos:start="269:61" pos:end="269:78">[<expr pos:start="269:62" pos:end="269:77"><name pos:start="269:62" pos:end="269:77">current_fragment</name></expr>]</index></name><operator pos:start="269:79" pos:end="269:79">.</operator><name pos:start="269:80" pos:end="269:89">macroblock</name></expr>]</index></name> <operator pos:start="269:92" pos:end="269:92">=</operator> <literal type="number" pos:start="269:94" pos:end="269:94">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="271:25" pos:end="273:49"><expr pos:start="271:25" pos:end="273:48"><call pos:start="271:25" pos:end="273:48"><name pos:start="271:25" pos:end="271:42">debug_block_coding</name><argument_list pos:start="271:43" pos:end="273:48">(<argument pos:start="271:44" pos:end="271:107"><expr pos:start="271:44" pos:end="271:107"><literal type="string" pos:start="271:44" pos:end="271:107">"      superblock %d is partially coded, fragment %d is coded\n"</literal></expr></argument>,

                            <argument pos:start="273:29" pos:end="273:29"><expr pos:start="273:29" pos:end="273:29"><name pos:start="273:29" pos:end="273:29">i</name></expr></argument>, <argument pos:start="273:32" pos:end="273:47"><expr pos:start="273:32" pos:end="273:47"><name pos:start="273:32" pos:end="273:47">current_fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="275:23" pos:end="287:21">else <block pos:start="275:28" pos:end="287:21">{<block_content pos:start="279:25" pos:end="285:49">

                        <comment type="block" pos:start="277:25" pos:end="277:80">/* not coded; copy this fragment from the prior frame */</comment>

                        <expr_stmt pos:start="279:25" pos:end="281:38"><expr pos:start="279:25" pos:end="281:37"><name pos:start="279:25" pos:end="279:58"><name pos:start="279:25" pos:end="279:25">s</name><operator pos:start="279:26" pos:end="279:27">-&gt;</operator><name pos:start="279:28" pos:end="279:40">all_fragments</name><index pos:start="279:41" pos:end="279:58">[<expr pos:start="279:42" pos:end="279:57"><name pos:start="279:42" pos:end="279:57">current_fragment</name></expr>]</index></name><operator pos:start="279:59" pos:end="279:59">.</operator><name pos:start="279:60" pos:end="279:72">coding_method</name> <operator pos:start="279:74" pos:end="279:74">=</operator>

                            <name pos:start="281:29" pos:end="281:37">MODE_COPY</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="283:25" pos:end="285:49"><expr pos:start="283:25" pos:end="285:48"><call pos:start="283:25" pos:end="285:48"><name pos:start="283:25" pos:end="283:42">debug_block_coding</name><argument_list pos:start="283:43" pos:end="285:48">(<argument pos:start="283:44" pos:end="283:111"><expr pos:start="283:44" pos:end="283:111"><literal type="string" pos:start="283:44" pos:end="283:111">"      superblock %d is partially coded, fragment %d is not coded\n"</literal></expr></argument>,

                            <argument pos:start="285:29" pos:end="285:29"><expr pos:start="285:29" pos:end="285:29"><name pos:start="285:29" pos:end="285:29">i</name></expr></argument>, <argument pos:start="285:32" pos:end="285:47"><expr pos:start="285:32" pos:end="285:47"><name pos:start="285:32" pos:end="285:47">current_fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <expr_stmt pos:start="291:21" pos:end="291:34"><expr pos:start="291:21" pos:end="291:33"><name pos:start="291:21" pos:end="291:31">current_run</name><operator pos:start="291:32" pos:end="291:33">--</operator></expr>;</expr_stmt>



                </block_content>}</block></if> <else pos:start="295:19" pos:end="329:17">else <block pos:start="295:24" pos:end="329:17">{<block_content pos:start="303:21" pos:end="327:45">



                    <comment type="block" pos:start="299:21" pos:end="301:64">/* fragments are fully coded in this superblock; actual

                     * coding will be determined in next step */</comment>

                    <expr_stmt pos:start="303:21" pos:end="305:41"><expr pos:start="303:21" pos:end="305:40"><name pos:start="303:21" pos:end="303:54"><name pos:start="303:21" pos:end="303:21">s</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:36">all_fragments</name><index pos:start="303:37" pos:end="303:54">[<expr pos:start="303:38" pos:end="303:53"><name pos:start="303:38" pos:end="303:53">current_fragment</name></expr>]</index></name><operator pos:start="303:55" pos:end="303:55">.</operator><name pos:start="303:56" pos:end="303:68">coding_method</name> <operator pos:start="303:70" pos:end="303:70">=</operator> 

                        <name pos:start="305:25" pos:end="305:40">MODE_INTER_NO_MV</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="307:21" pos:end="309:41"><expr pos:start="307:21" pos:end="309:40"><name pos:start="307:21" pos:end="307:72"><name pos:start="307:21" pos:end="307:21">s</name><operator pos:start="307:22" pos:end="307:23">-&gt;</operator><name pos:start="307:24" pos:end="307:42">coded_fragment_list</name><index pos:start="307:43" pos:end="307:72">[<expr pos:start="307:44" pos:end="307:71"><name pos:start="307:44" pos:end="307:71"><name pos:start="307:44" pos:end="307:44">s</name><operator pos:start="307:45" pos:end="307:46">-&gt;</operator><name pos:start="307:47" pos:end="307:71">coded_fragment_list_index</name></name></expr>]</index></name> <operator pos:start="307:74" pos:end="307:74">=</operator> 

                        <name pos:start="309:25" pos:end="309:40">current_fragment</name></expr>;</expr_stmt>

                    <if_stmt pos:start="311:21" pos:end="319:21"><if pos:start="311:21" pos:end="319:21">if <condition pos:start="311:24" pos:end="313:57">(<expr pos:start="311:25" pos:end="313:56"><operator pos:start="311:25" pos:end="311:25">(</operator><name pos:start="311:26" pos:end="311:41">current_fragment</name> <operator pos:start="311:43" pos:end="311:44">&gt;=</operator> <name pos:start="311:46" pos:end="311:64"><name pos:start="311:46" pos:end="311:46">s</name><operator pos:start="311:47" pos:end="311:48">-&gt;</operator><name pos:start="311:49" pos:end="311:64">u_fragment_start</name></name><operator pos:start="311:65" pos:end="311:65">)</operator> <operator pos:start="311:67" pos:end="311:68">&amp;&amp;</operator>

                        <operator pos:start="313:25" pos:end="313:25">(</operator><name pos:start="313:26" pos:end="313:49"><name pos:start="313:26" pos:end="313:26">s</name><operator pos:start="313:27" pos:end="313:28">-&gt;</operator><name pos:start="313:29" pos:end="313:49">last_coded_y_fragment</name></name> <operator pos:start="313:51" pos:end="313:52">==</operator> <operator pos:start="313:54" pos:end="313:54">-</operator><literal type="number" pos:start="313:55" pos:end="313:55">1</literal><operator pos:start="313:56" pos:end="313:56">)</operator></expr>)</condition> <block pos:start="313:59" pos:end="319:21">{<block_content pos:start="315:25" pos:end="317:81">

                        <expr_stmt pos:start="315:25" pos:end="315:81"><expr pos:start="315:25" pos:end="315:80"><name pos:start="315:25" pos:end="315:49"><name pos:start="315:25" pos:end="315:25">s</name><operator pos:start="315:26" pos:end="315:27">-&gt;</operator><name pos:start="315:28" pos:end="315:49">first_coded_c_fragment</name></name> <operator pos:start="315:51" pos:end="315:51">=</operator> <name pos:start="315:53" pos:end="315:80"><name pos:start="315:53" pos:end="315:53">s</name><operator pos:start="315:54" pos:end="315:55">-&gt;</operator><name pos:start="315:56" pos:end="315:80">coded_fragment_list_index</name></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="317:25" pos:end="317:81"><expr pos:start="317:25" pos:end="317:80"><name pos:start="317:25" pos:end="317:48"><name pos:start="317:25" pos:end="317:25">s</name><operator pos:start="317:26" pos:end="317:27">-&gt;</operator><name pos:start="317:28" pos:end="317:48">last_coded_y_fragment</name></name> <operator pos:start="317:50" pos:end="317:50">=</operator> <name pos:start="317:52" pos:end="317:76"><name pos:start="317:52" pos:end="317:52">s</name><operator pos:start="317:53" pos:end="317:54">-&gt;</operator><name pos:start="317:55" pos:end="317:76">first_coded_c_fragment</name></name> <operator pos:start="317:78" pos:end="317:78">-</operator> <literal type="number" pos:start="317:80" pos:end="317:80">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="321:21" pos:end="321:51"><expr pos:start="321:21" pos:end="321:50"><name pos:start="321:21" pos:end="321:48"><name pos:start="321:21" pos:end="321:21">s</name><operator pos:start="321:22" pos:end="321:23">-&gt;</operator><name pos:start="321:24" pos:end="321:48">coded_fragment_list_index</name></name><operator pos:start="321:49" pos:end="321:50">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="323:21" pos:end="323:91"><expr pos:start="323:21" pos:end="323:90"><name pos:start="323:21" pos:end="323:86"><name pos:start="323:21" pos:end="323:21">s</name><operator pos:start="323:22" pos:end="323:23">-&gt;</operator><name pos:start="323:24" pos:end="323:39">macroblock_coded</name><index pos:start="323:40" pos:end="323:86">[<expr pos:start="323:41" pos:end="323:85"><name pos:start="323:41" pos:end="323:74"><name pos:start="323:41" pos:end="323:41">s</name><operator pos:start="323:42" pos:end="323:43">-&gt;</operator><name pos:start="323:44" pos:end="323:56">all_fragments</name><index pos:start="323:57" pos:end="323:74">[<expr pos:start="323:58" pos:end="323:73"><name pos:start="323:58" pos:end="323:73">current_fragment</name></expr>]</index></name><operator pos:start="323:75" pos:end="323:75">.</operator><name pos:start="323:76" pos:end="323:85">macroblock</name></expr>]</index></name> <operator pos:start="323:88" pos:end="323:88">=</operator> <literal type="number" pos:start="323:90" pos:end="323:90">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="325:21" pos:end="327:45"><expr pos:start="325:21" pos:end="327:44"><call pos:start="325:21" pos:end="327:44"><name pos:start="325:21" pos:end="325:38">debug_block_coding</name><argument_list pos:start="325:39" pos:end="327:44">(<argument pos:start="325:40" pos:end="325:99"><expr pos:start="325:40" pos:end="325:99"><literal type="string" pos:start="325:40" pos:end="325:99">"      superblock %d is fully coded, fragment %d is coded\n"</literal></expr></argument>,

                        <argument pos:start="327:25" pos:end="327:25"><expr pos:start="327:25" pos:end="327:25"><name pos:start="327:25" pos:end="327:25">i</name></expr></argument>, <argument pos:start="327:28" pos:end="327:43"><expr pos:start="327:28" pos:end="327:43"><name pos:start="327:28" pos:end="327:43">current_fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <if_stmt pos:start="339:5" pos:end="347:68"><if pos:start="339:5" pos:end="343:68">if <condition pos:start="339:8" pos:end="339:39">(<expr pos:start="339:9" pos:end="339:38"><name pos:start="339:9" pos:end="339:33"><name pos:start="339:9" pos:end="339:9">s</name><operator pos:start="339:10" pos:end="339:11">-&gt;</operator><name pos:start="339:12" pos:end="339:33">first_coded_c_fragment</name></name> <operator pos:start="339:35" pos:end="339:36">==</operator> <literal type="number" pos:start="339:38" pos:end="339:38">0</literal></expr>)</condition><block type="pseudo" pos:start="343:9" pos:end="343:68"><block_content pos:start="343:9" pos:end="343:68">

        <comment type="block" pos:start="341:9" pos:end="341:34">/* no C fragments coded */</comment>

        <expr_stmt pos:start="343:9" pos:end="343:68"><expr pos:start="343:9" pos:end="343:67"><name pos:start="343:9" pos:end="343:32"><name pos:start="343:9" pos:end="343:9">s</name><operator pos:start="343:10" pos:end="343:11">-&gt;</operator><name pos:start="343:12" pos:end="343:32">last_coded_y_fragment</name></name> <operator pos:start="343:34" pos:end="343:34">=</operator> <name pos:start="343:36" pos:end="343:63"><name pos:start="343:36" pos:end="343:36">s</name><operator pos:start="343:37" pos:end="343:38">-&gt;</operator><name pos:start="343:39" pos:end="343:63">coded_fragment_list_index</name></name> <operator pos:start="343:65" pos:end="343:65">-</operator> <literal type="number" pos:start="343:67" pos:end="343:67">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="345:5" pos:end="347:68">else<block type="pseudo" pos:start="347:9" pos:end="347:68"><block_content pos:start="347:9" pos:end="347:68">

        <expr_stmt pos:start="347:9" pos:end="347:68"><expr pos:start="347:9" pos:end="347:67"><name pos:start="347:9" pos:end="347:32"><name pos:start="347:9" pos:end="347:9">s</name><operator pos:start="347:10" pos:end="347:11">-&gt;</operator><name pos:start="347:12" pos:end="347:32">last_coded_c_fragment</name></name> <operator pos:start="347:34" pos:end="347:34">=</operator> <name pos:start="347:36" pos:end="347:63"><name pos:start="347:36" pos:end="347:36">s</name><operator pos:start="347:37" pos:end="347:38">-&gt;</operator><name pos:start="347:39" pos:end="347:63">coded_fragment_list_index</name></name> <operator pos:start="347:65" pos:end="347:65">-</operator> <literal type="number" pos:start="347:67" pos:end="347:67">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="349:5" pos:end="359:34"><expr pos:start="349:5" pos:end="359:33"><call pos:start="349:5" pos:end="359:33"><name pos:start="349:5" pos:end="349:22">debug_block_coding</name><argument_list pos:start="349:23" pos:end="359:33">(<argument pos:start="349:24" pos:end="349:81"><expr pos:start="349:24" pos:end="349:81"><literal type="string" pos:start="349:24" pos:end="349:81">"    %d total coded fragments, y: %d -&gt; %d, c: %d -&gt; %d\n"</literal></expr></argument>,

        <argument pos:start="351:9" pos:end="351:36"><expr pos:start="351:9" pos:end="351:36"><name pos:start="351:9" pos:end="351:36"><name pos:start="351:9" pos:end="351:9">s</name><operator pos:start="351:10" pos:end="351:11">-&gt;</operator><name pos:start="351:12" pos:end="351:36">coded_fragment_list_index</name></name></expr></argument>,

        <argument pos:start="353:9" pos:end="353:33"><expr pos:start="353:9" pos:end="353:33"><name pos:start="353:9" pos:end="353:33"><name pos:start="353:9" pos:end="353:9">s</name><operator pos:start="353:10" pos:end="353:11">-&gt;</operator><name pos:start="353:12" pos:end="353:33">first_coded_y_fragment</name></name></expr></argument>,

        <argument pos:start="355:9" pos:end="355:32"><expr pos:start="355:9" pos:end="355:32"><name pos:start="355:9" pos:end="355:32"><name pos:start="355:9" pos:end="355:9">s</name><operator pos:start="355:10" pos:end="355:11">-&gt;</operator><name pos:start="355:12" pos:end="355:32">last_coded_y_fragment</name></name></expr></argument>,

        <argument pos:start="357:9" pos:end="357:33"><expr pos:start="357:9" pos:end="357:33"><name pos:start="357:9" pos:end="357:33"><name pos:start="357:9" pos:end="357:9">s</name><operator pos:start="357:10" pos:end="357:11">-&gt;</operator><name pos:start="357:12" pos:end="357:33">first_coded_c_fragment</name></name></expr></argument>,

        <argument pos:start="359:9" pos:end="359:32"><expr pos:start="359:9" pos:end="359:32"><name pos:start="359:9" pos:end="359:32"><name pos:start="359:9" pos:end="359:9">s</name><operator pos:start="359:10" pos:end="359:11">-&gt;</operator><name pos:start="359:12" pos:end="359:32">last_coded_c_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
