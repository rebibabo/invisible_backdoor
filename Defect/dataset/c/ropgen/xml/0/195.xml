<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/195.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:40">ff_h264_decode_picture_parameter_set</name><parameter_list pos:start="1:41" pos:end="1:72">(<parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:52">H264Context</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">h</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:71"><decl pos:start="1:58" pos:end="1:71"><type pos:start="1:58" pos:end="1:71"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:71">bit_length</name></decl></parameter>)</parameter_list><block pos:start="1:73" pos:end="235:1">{<block_content pos:start="3:5" pos:end="233:14">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:23">pps_id</name><init pos:start="5:24" pos:end="5:46">= <expr pos:start="5:26" pos:end="5:46"><call pos:start="5:26" pos:end="5:46"><name pos:start="5:26" pos:end="5:38">get_ue_golomb</name><argument_list pos:start="5:39" pos:end="5:46">(<argument pos:start="5:40" pos:end="5:45"><expr pos:start="5:40" pos:end="5:45"><operator pos:start="5:40" pos:end="5:40">&amp;</operator><name pos:start="5:41" pos:end="5:45"><name pos:start="5:41" pos:end="5:41">s</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:45">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">PPS</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:12">pps</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:26">qp_bd_offset</name> <init pos:start="9:28" pos:end="9:56">= <expr pos:start="9:30" pos:end="9:56"><literal type="number" pos:start="9:30" pos:end="9:30">6</literal><operator pos:start="9:31" pos:end="9:31">*</operator><operator pos:start="9:32" pos:end="9:32">(</operator><name pos:start="9:33" pos:end="9:53"><name pos:start="9:33" pos:end="9:33">h</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">sps</name><operator pos:start="9:39" pos:end="9:39">.</operator><name pos:start="9:40" pos:end="9:53">bit_depth_luma</name></name><operator pos:start="9:54" pos:end="9:54">-</operator><literal type="number" pos:start="9:55" pos:end="9:55">8</literal><operator pos:start="9:56" pos:end="9:56">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">bits_left</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if<condition pos:start="15:7" pos:end="15:31">(<expr pos:start="15:8" pos:end="15:30"><name pos:start="15:8" pos:end="15:13">pps_id</name> <operator pos:start="15:15" pos:end="15:16">&gt;=</operator> <name pos:start="15:18" pos:end="15:30">MAX_PPS_COUNT</name></expr>)</condition> <block pos:start="15:33" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:79"><expr pos:start="17:9" pos:end="17:78"><call pos:start="17:9" pos:end="17:78"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:78">(<argument pos:start="17:16" pos:end="17:25"><expr pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:16">h</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:20">.</operator><name pos:start="17:21" pos:end="17:25">avctx</name></name></expr></argument>, <argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:42" pos:end="17:69"><expr pos:start="17:42" pos:end="17:69"><literal type="string" pos:start="17:42" pos:end="17:69">"pps_id (%d) out of range\n"</literal></expr></argument>, <argument pos:start="17:72" pos:end="17:77"><expr pos:start="17:72" pos:end="17:77"><name pos:start="17:72" pos:end="17:77">pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:7">pps</name><operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:32"><name pos:start="25:10" pos:end="25:19">av_mallocz</name><argument_list pos:start="25:20" pos:end="25:32">(<argument pos:start="25:21" pos:end="25:31"><expr pos:start="25:21" pos:end="25:31"><sizeof pos:start="25:21" pos:end="25:31">sizeof<argument_list pos:start="25:27" pos:end="25:31">(<argument pos:start="25:28" pos:end="25:30"><expr pos:start="25:28" pos:end="25:30"><name pos:start="25:28" pos:end="25:30">PPS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:18"><if pos:start="27:5" pos:end="29:18">if<condition pos:start="27:7" pos:end="27:19">(<expr pos:start="27:8" pos:end="27:18"><name pos:start="27:8" pos:end="27:10">pps</name> <operator pos:start="27:12" pos:end="27:13">==</operator> <name pos:start="27:15" pos:end="27:18">NULL</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:18"><block_content pos:start="29:9" pos:end="29:18">

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:42"><expr pos:start="31:5" pos:end="31:41"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:7">pps</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:15">sps_id</name></name><operator pos:start="31:16" pos:end="31:16">=</operator> <call pos:start="31:18" pos:end="31:41"><name pos:start="31:18" pos:end="31:33">get_ue_golomb_31</name><argument_list pos:start="31:34" pos:end="31:41">(<argument pos:start="31:35" pos:end="31:40"><expr pos:start="31:35" pos:end="31:40"><operator pos:start="31:35" pos:end="31:35">&amp;</operator><name pos:start="31:36" pos:end="31:40"><name pos:start="31:36" pos:end="31:36">s</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if<condition pos:start="33:7" pos:end="33:83">(<expr pos:start="33:8" pos:end="33:82"><operator pos:start="33:8" pos:end="33:8">(</operator><name pos:start="33:9" pos:end="33:16">unsigned</name><operator pos:start="33:17" pos:end="33:17">)</operator><name pos:start="33:18" pos:end="33:28"><name pos:start="33:18" pos:end="33:20">pps</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:28">sps_id</name></name><operator pos:start="33:29" pos:end="33:30">&gt;=</operator><name pos:start="33:31" pos:end="33:43">MAX_SPS_COUNT</name> <operator pos:start="33:45" pos:end="33:46">||</operator> <name pos:start="33:48" pos:end="33:74"><name pos:start="33:48" pos:end="33:48">h</name><operator pos:start="33:49" pos:end="33:50">-&gt;</operator><name pos:start="33:51" pos:end="33:61">sps_buffers</name><index pos:start="33:62" pos:end="33:74">[<expr pos:start="33:63" pos:end="33:73"><name pos:start="33:63" pos:end="33:73"><name pos:start="33:63" pos:end="33:65">pps</name><operator pos:start="33:66" pos:end="33:67">-&gt;</operator><name pos:start="33:68" pos:end="33:73">sps_id</name></name></expr>]</index></name> <operator pos:start="33:76" pos:end="33:77">==</operator> <name pos:start="33:79" pos:end="33:82">NULL</name></expr>)</condition><block pos:start="33:84" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:66"><expr pos:start="35:9" pos:end="35:65"><call pos:start="35:9" pos:end="35:65"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:65">(<argument pos:start="35:16" pos:end="35:25"><expr pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:16">h</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:19">s</name><operator pos:start="35:20" pos:end="35:20">.</operator><name pos:start="35:21" pos:end="35:25">avctx</name></name></expr></argument>, <argument pos:start="35:28" pos:end="35:39"><expr pos:start="35:28" pos:end="35:39"><name pos:start="35:28" pos:end="35:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:42" pos:end="35:64"><expr pos:start="35:42" pos:end="35:64"><literal type="string" pos:start="35:42" pos:end="35:64">"sps_id out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:7">pps</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:14">cabac</name></name><operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:25">get_bits1</name><argument_list pos:start="43:26" pos:end="43:33">(<argument pos:start="43:27" pos:end="43:32"><expr pos:start="43:27" pos:end="43:32"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:32"><name pos:start="43:28" pos:end="43:28">s</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:32">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:7">pps</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:26">pic_order_present</name></name><operator pos:start="45:27" pos:end="45:27">=</operator> <call pos:start="45:29" pos:end="45:45"><name pos:start="45:29" pos:end="45:37">get_bits1</name><argument_list pos:start="45:38" pos:end="45:45">(<argument pos:start="45:39" pos:end="45:44"><expr pos:start="45:39" pos:end="45:44"><operator pos:start="45:39" pos:end="45:39">&amp;</operator><name pos:start="45:40" pos:end="45:44"><name pos:start="45:40" pos:end="45:40">s</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:54"><expr pos:start="47:5" pos:end="47:53"><name pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:7">pps</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:26">slice_group_count</name></name><operator pos:start="47:27" pos:end="47:27">=</operator> <call pos:start="47:29" pos:end="47:49"><name pos:start="47:29" pos:end="47:41">get_ue_golomb</name><argument_list pos:start="47:42" pos:end="47:49">(<argument pos:start="47:43" pos:end="47:48"><expr pos:start="47:43" pos:end="47:48"><operator pos:start="47:43" pos:end="47:43">&amp;</operator><name pos:start="47:44" pos:end="47:48"><name pos:start="47:44" pos:end="47:44">s</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:48">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:51" pos:end="47:51">+</operator> <literal type="number" pos:start="47:53" pos:end="47:53">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="121:5"><if pos:start="49:5" pos:end="121:5">if<condition pos:start="49:7" pos:end="49:35">(<expr pos:start="49:8" pos:end="49:33"><name pos:start="49:8" pos:end="49:29"><name pos:start="49:8" pos:end="49:10">pps</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:29">slice_group_count</name></name> <operator pos:start="49:31" pos:end="49:31">&gt;</operator> <literal type="number" pos:start="49:33" pos:end="49:33">1</literal></expr> )</condition><block pos:start="49:36" pos:end="121:5">{<block_content pos:start="51:9" pos:end="119:9">

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:11">pps</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:36">mb_slice_group_map_type</name></name><operator pos:start="51:37" pos:end="51:37">=</operator> <call pos:start="51:39" pos:end="51:59"><name pos:start="51:39" pos:end="51:51">get_ue_golomb</name><argument_list pos:start="51:52" pos:end="51:59">(<argument pos:start="51:53" pos:end="51:58"><expr pos:start="51:53" pos:end="51:58"><operator pos:start="51:53" pos:end="51:53">&amp;</operator><name pos:start="51:54" pos:end="51:58"><name pos:start="51:54" pos:end="51:54">s</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:64"><expr pos:start="53:9" pos:end="53:63"><call pos:start="53:9" pos:end="53:63"><name pos:start="53:9" pos:end="53:14">av_log</name><argument_list pos:start="53:15" pos:end="53:63">(<argument pos:start="53:16" pos:end="53:25"><expr pos:start="53:16" pos:end="53:25"><name pos:start="53:16" pos:end="53:25"><name pos:start="53:16" pos:end="53:16">h</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:19">s</name><operator pos:start="53:20" pos:end="53:20">.</operator><name pos:start="53:21" pos:end="53:25">avctx</name></name></expr></argument>, <argument pos:start="53:28" pos:end="53:39"><expr pos:start="53:28" pos:end="53:39"><name pos:start="53:28" pos:end="53:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:42" pos:end="53:62"><expr pos:start="53:42" pos:end="53:62"><literal type="string" pos:start="53:42" pos:end="53:62">"FMO not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="55:9" pos:end="119:9">switch<condition pos:start="55:15" pos:end="55:44">(<expr pos:start="55:16" pos:end="55:43"><name pos:start="55:16" pos:end="55:43"><name pos:start="55:16" pos:end="55:18">pps</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:43">mb_slice_group_map_type</name></name></expr>)</condition><block pos:start="55:45" pos:end="119:9">{<block_content pos:start="57:9" pos:end="117:18">

        <case pos:start="57:9" pos:end="66:0">case <expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>:</case>

<cpp:if pos:start="59:1" pos:end="59:5">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:5"><literal type="number" pos:start="59:5" pos:end="59:5">0</literal></expr></cpp:if>

|   for( i = 0; i &lt;= num_slice_groups_minus1; i++ ) |   |        |

|    run_length[ i ]                                |1  |ue(v)   |

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="84:0">case <expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">2</literal></expr>:</case>

<cpp:if pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:5"><literal type="number" pos:start="71:5" pos:end="71:5">0</literal></expr></cpp:if>

|   for( i = 0; i &lt; num_slice_groups_minus1; i++ )  |   |        |

|{                                                  |   |        |

|    top_left_mb[ i ]                               |1  |ue(v)   |

|    bottom_right_mb[ i ]                           |1  |ue(v)   |

|   }                                               |   |        |

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <case pos:start="87:9" pos:end="87:15">case <expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">3</literal></expr>:</case>

        <case pos:start="89:9" pos:end="89:15">case <expr pos:start="89:14" pos:end="89:14"><literal type="number" pos:start="89:14" pos:end="89:14">4</literal></expr>:</case>

        <case pos:start="91:9" pos:end="100:0">case <expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">5</literal></expr>:</case>

<cpp:if pos:start="93:1" pos:end="93:5">#<cpp:directive pos:start="93:2" pos:end="93:3">if</cpp:directive> <expr pos:start="93:5" pos:end="93:5"><literal type="number" pos:start="93:5" pos:end="93:5">0</literal></expr></cpp:if>

|   slice_group_change_direction_flag               |1  |u(1)    |

|   slice_group_change_rate_minus1                  |1  |ue(v)   |

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="116:0">case <expr pos:start="103:14" pos:end="103:14"><literal type="number" pos:start="103:14" pos:end="103:14">6</literal></expr>:</case>

<cpp:if pos:start="105:1" pos:end="105:5">#<cpp:directive pos:start="105:2" pos:end="105:3">if</cpp:directive> <expr pos:start="105:5" pos:end="105:5"><literal type="number" pos:start="105:5" pos:end="105:5">0</literal></expr></cpp:if>

|   slice_group_id_cnt_minus1                       |1  |ue(v)   |

|   for( i = 0; i &lt;= slice_group_id_cnt_minus1; i++ |   |        |

|)                                                  |   |        |

|    slice_group_id[ i ]                            |1  |u(v)    |

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:49"><expr pos:start="123:5" pos:end="123:48"><name pos:start="123:5" pos:end="123:21"><name pos:start="123:5" pos:end="123:7">pps</name><operator pos:start="123:8" pos:end="123:9">-&gt;</operator><name pos:start="123:10" pos:end="123:18">ref_count</name><index pos:start="123:19" pos:end="123:21">[<expr pos:start="123:20" pos:end="123:20"><literal type="number" pos:start="123:20" pos:end="123:20">0</literal></expr>]</index></name><operator pos:start="123:22" pos:end="123:22">=</operator> <call pos:start="123:24" pos:end="123:44"><name pos:start="123:24" pos:end="123:36">get_ue_golomb</name><argument_list pos:start="123:37" pos:end="123:44">(<argument pos:start="123:38" pos:end="123:43"><expr pos:start="123:38" pos:end="123:43"><operator pos:start="123:38" pos:end="123:38">&amp;</operator><name pos:start="123:39" pos:end="123:43"><name pos:start="123:39" pos:end="123:39">s</name><operator pos:start="123:40" pos:end="123:41">-&gt;</operator><name pos:start="123:42" pos:end="123:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="123:46" pos:end="123:46">+</operator> <literal type="number" pos:start="123:48" pos:end="123:48">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:49"><expr pos:start="125:5" pos:end="125:48"><name pos:start="125:5" pos:end="125:21"><name pos:start="125:5" pos:end="125:7">pps</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:18">ref_count</name><index pos:start="125:19" pos:end="125:21">[<expr pos:start="125:20" pos:end="125:20"><literal type="number" pos:start="125:20" pos:end="125:20">1</literal></expr>]</index></name><operator pos:start="125:22" pos:end="125:22">=</operator> <call pos:start="125:24" pos:end="125:44"><name pos:start="125:24" pos:end="125:36">get_ue_golomb</name><argument_list pos:start="125:37" pos:end="125:44">(<argument pos:start="125:38" pos:end="125:43"><expr pos:start="125:38" pos:end="125:43"><operator pos:start="125:38" pos:end="125:38">&amp;</operator><name pos:start="125:39" pos:end="125:43"><name pos:start="125:39" pos:end="125:39">s</name><operator pos:start="125:40" pos:end="125:41">-&gt;</operator><name pos:start="125:42" pos:end="125:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:46" pos:end="125:46">+</operator> <literal type="number" pos:start="125:48" pos:end="125:48">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if<condition pos:start="127:7" pos:end="127:64">(<expr pos:start="127:8" pos:end="127:63"><name pos:start="127:8" pos:end="127:24"><name pos:start="127:8" pos:end="127:10">pps</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:21">ref_count</name><index pos:start="127:22" pos:end="127:24">[<expr pos:start="127:23" pos:end="127:23"><literal type="number" pos:start="127:23" pos:end="127:23">0</literal></expr>]</index></name><operator pos:start="127:25" pos:end="127:25">-</operator><literal type="number" pos:start="127:26" pos:end="127:26">1</literal> <operator pos:start="127:28" pos:end="127:28">&gt;</operator> <literal type="number" pos:start="127:30" pos:end="127:32">32</literal><operator pos:start="127:32" pos:end="127:32">-</operator><literal type="number" pos:start="127:33" pos:end="127:33">1</literal> <operator pos:start="127:35" pos:end="127:36">||</operator> <name pos:start="127:38" pos:end="127:54"><name pos:start="127:38" pos:end="127:40">pps</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:51">ref_count</name><index pos:start="127:52" pos:end="127:54">[<expr pos:start="127:53" pos:end="127:53"><literal type="number" pos:start="127:53" pos:end="127:53">1</literal></expr>]</index></name><operator pos:start="127:55" pos:end="127:55">-</operator><literal type="number" pos:start="127:56" pos:end="127:56">1</literal> <operator pos:start="127:58" pos:end="127:58">&gt;</operator> <literal type="number" pos:start="127:60" pos:end="127:62">32</literal><operator pos:start="127:62" pos:end="127:62">-</operator><literal type="number" pos:start="127:63" pos:end="127:63">1</literal></expr>)</condition><block pos:start="127:65" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:18">

        <expr_stmt pos:start="129:9" pos:end="129:71"><expr pos:start="129:9" pos:end="129:70"><call pos:start="129:9" pos:end="129:70"><name pos:start="129:9" pos:end="129:14">av_log</name><argument_list pos:start="129:15" pos:end="129:70">(<argument pos:start="129:16" pos:end="129:25"><expr pos:start="129:16" pos:end="129:25"><name pos:start="129:16" pos:end="129:25"><name pos:start="129:16" pos:end="129:16">h</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:19">s</name><operator pos:start="129:20" pos:end="129:20">.</operator><name pos:start="129:21" pos:end="129:25">avctx</name></name></expr></argument>, <argument pos:start="129:28" pos:end="129:39"><expr pos:start="129:28" pos:end="129:39"><name pos:start="129:28" pos:end="129:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:42" pos:end="129:69"><expr pos:start="129:42" pos:end="129:69"><literal type="string" pos:start="129:42" pos:end="129:69">"reference overflow (pps)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="131:9" pos:end="131:18">goto <name pos:start="131:14" pos:end="131:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:42"><expr pos:start="137:5" pos:end="137:41"><name pos:start="137:5" pos:end="137:22"><name pos:start="137:5" pos:end="137:7">pps</name><operator pos:start="137:8" pos:end="137:9">-&gt;</operator><name pos:start="137:10" pos:end="137:22">weighted_pred</name></name><operator pos:start="137:23" pos:end="137:23">=</operator> <call pos:start="137:25" pos:end="137:41"><name pos:start="137:25" pos:end="137:33">get_bits1</name><argument_list pos:start="137:34" pos:end="137:41">(<argument pos:start="137:35" pos:end="137:40"><expr pos:start="137:35" pos:end="137:40"><operator pos:start="137:35" pos:end="137:35">&amp;</operator><name pos:start="137:36" pos:end="137:40"><name pos:start="137:36" pos:end="137:36">s</name><operator pos:start="137:37" pos:end="137:38">-&gt;</operator><name pos:start="137:39" pos:end="137:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:50"><expr pos:start="139:5" pos:end="139:49"><name pos:start="139:5" pos:end="139:28"><name pos:start="139:5" pos:end="139:7">pps</name><operator pos:start="139:8" pos:end="139:9">-&gt;</operator><name pos:start="139:10" pos:end="139:28">weighted_bipred_idc</name></name><operator pos:start="139:29" pos:end="139:29">=</operator> <call pos:start="139:31" pos:end="139:49"><name pos:start="139:31" pos:end="139:38">get_bits</name><argument_list pos:start="139:39" pos:end="139:49">(<argument pos:start="139:40" pos:end="139:45"><expr pos:start="139:40" pos:end="139:45"><operator pos:start="139:40" pos:end="139:40">&amp;</operator><name pos:start="139:41" pos:end="139:45"><name pos:start="139:41" pos:end="139:41">s</name><operator pos:start="139:42" pos:end="139:43">-&gt;</operator><name pos:start="139:44" pos:end="139:45">gb</name></name></expr></argument>, <argument pos:start="139:48" pos:end="139:48"><expr pos:start="139:48" pos:end="139:48"><literal type="number" pos:start="139:48" pos:end="139:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:60"><expr pos:start="141:5" pos:end="141:59"><name pos:start="141:5" pos:end="141:16"><name pos:start="141:5" pos:end="141:7">pps</name><operator pos:start="141:8" pos:end="141:9">-&gt;</operator><name pos:start="141:10" pos:end="141:16">init_qp</name></name><operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="141:39"><name pos:start="141:19" pos:end="141:31">get_se_golomb</name><argument_list pos:start="141:32" pos:end="141:39">(<argument pos:start="141:33" pos:end="141:38"><expr pos:start="141:33" pos:end="141:38"><operator pos:start="141:33" pos:end="141:33">&amp;</operator><name pos:start="141:34" pos:end="141:38"><name pos:start="141:34" pos:end="141:34">s</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="141:41" pos:end="141:41">+</operator> <literal type="number" pos:start="141:43" pos:end="141:46">26</literal> <operator pos:start="141:46" pos:end="141:46">+</operator> <name pos:start="141:48" pos:end="141:59">qp_bd_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:60"><expr pos:start="143:5" pos:end="143:59"><name pos:start="143:5" pos:end="143:16"><name pos:start="143:5" pos:end="143:7">pps</name><operator pos:start="143:8" pos:end="143:9">-&gt;</operator><name pos:start="143:10" pos:end="143:16">init_qs</name></name><operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="143:39"><name pos:start="143:19" pos:end="143:31">get_se_golomb</name><argument_list pos:start="143:32" pos:end="143:39">(<argument pos:start="143:33" pos:end="143:38"><expr pos:start="143:33" pos:end="143:38"><operator pos:start="143:33" pos:end="143:33">&amp;</operator><name pos:start="143:34" pos:end="143:38"><name pos:start="143:34" pos:end="143:34">s</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="143:41" pos:end="143:41">+</operator> <literal type="number" pos:start="143:43" pos:end="143:46">26</literal> <operator pos:start="143:46" pos:end="143:46">+</operator> <name pos:start="143:48" pos:end="143:59">qp_bd_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:58"><expr pos:start="145:5" pos:end="145:57"><name pos:start="145:5" pos:end="145:34"><name pos:start="145:5" pos:end="145:7">pps</name><operator pos:start="145:8" pos:end="145:9">-&gt;</operator><name pos:start="145:10" pos:end="145:31">chroma_qp_index_offset</name><index pos:start="145:32" pos:end="145:34">[<expr pos:start="145:33" pos:end="145:33"><literal type="number" pos:start="145:33" pos:end="145:33">0</literal></expr>]</index></name><operator pos:start="145:35" pos:end="145:35">=</operator> <call pos:start="145:37" pos:end="145:57"><name pos:start="145:37" pos:end="145:49">get_se_golomb</name><argument_list pos:start="145:50" pos:end="145:57">(<argument pos:start="145:51" pos:end="145:56"><expr pos:start="145:51" pos:end="145:56"><operator pos:start="145:51" pos:end="145:51">&amp;</operator><name pos:start="145:52" pos:end="145:56"><name pos:start="145:52" pos:end="145:52">s</name><operator pos:start="145:53" pos:end="145:54">-&gt;</operator><name pos:start="145:55" pos:end="145:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:65"><expr pos:start="147:5" pos:end="147:64"><name pos:start="147:5" pos:end="147:45"><name pos:start="147:5" pos:end="147:7">pps</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:45">deblocking_filter_parameters_present</name></name><operator pos:start="147:46" pos:end="147:46">=</operator> <call pos:start="147:48" pos:end="147:64"><name pos:start="147:48" pos:end="147:56">get_bits1</name><argument_list pos:start="147:57" pos:end="147:64">(<argument pos:start="147:58" pos:end="147:63"><expr pos:start="147:58" pos:end="147:63"><operator pos:start="147:58" pos:end="147:58">&amp;</operator><name pos:start="147:59" pos:end="147:63"><name pos:start="147:59" pos:end="147:59">s</name><operator pos:start="147:60" pos:end="147:61">-&gt;</operator><name pos:start="147:62" pos:end="147:63">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:51"><expr pos:start="149:5" pos:end="149:50"><name pos:start="149:5" pos:end="149:31"><name pos:start="149:5" pos:end="149:7">pps</name><operator pos:start="149:8" pos:end="149:9">-&gt;</operator><name pos:start="149:10" pos:end="149:31">constrained_intra_pred</name></name><operator pos:start="149:32" pos:end="149:32">=</operator> <call pos:start="149:34" pos:end="149:50"><name pos:start="149:34" pos:end="149:42">get_bits1</name><argument_list pos:start="149:43" pos:end="149:50">(<argument pos:start="149:44" pos:end="149:49"><expr pos:start="149:44" pos:end="149:49"><operator pos:start="149:44" pos:end="149:44">&amp;</operator><name pos:start="149:45" pos:end="149:49"><name pos:start="149:45" pos:end="149:45">s</name><operator pos:start="149:46" pos:end="149:47">-&gt;</operator><name pos:start="149:48" pos:end="149:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:55"><expr pos:start="151:5" pos:end="151:54"><name pos:start="151:5" pos:end="151:34"><name pos:start="151:5" pos:end="151:7">pps</name><operator pos:start="151:8" pos:end="151:9">-&gt;</operator><name pos:start="151:10" pos:end="151:34">redundant_pic_cnt_present</name></name> <operator pos:start="151:36" pos:end="151:36">=</operator> <call pos:start="151:38" pos:end="151:54"><name pos:start="151:38" pos:end="151:46">get_bits1</name><argument_list pos:start="151:47" pos:end="151:54">(<argument pos:start="151:48" pos:end="151:53"><expr pos:start="151:48" pos:end="151:53"><operator pos:start="151:48" pos:end="151:48">&amp;</operator><name pos:start="151:49" pos:end="151:53"><name pos:start="151:49" pos:end="151:49">s</name><operator pos:start="151:50" pos:end="151:51">-&gt;</operator><name pos:start="151:52" pos:end="151:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:31"><expr pos:start="155:5" pos:end="155:30"><name pos:start="155:5" pos:end="155:27"><name pos:start="155:5" pos:end="155:7">pps</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:27">transform_8x8_mode</name></name><operator pos:start="155:28" pos:end="155:28">=</operator> <literal type="number" pos:start="155:30" pos:end="155:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:29"><expr pos:start="157:5" pos:end="157:28"><name pos:start="157:5" pos:end="157:24"><name pos:start="157:5" pos:end="157:5">h</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:24">dequant_coeff_pps</name></name><operator pos:start="157:25" pos:end="157:25">=</operator> <operator pos:start="157:27" pos:end="157:27">-</operator><literal type="number" pos:start="157:28" pos:end="157:28">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="157:31" pos:end="157:92">//contents of sps/pps can change even if id doesn't, so reinit</comment>

    <expr_stmt pos:start="159:5" pos:end="159:109"><expr pos:start="159:5" pos:end="159:108"><call pos:start="159:5" pos:end="159:108"><name pos:start="159:5" pos:end="159:10">memcpy</name><argument_list pos:start="159:11" pos:end="159:108">(<argument pos:start="159:12" pos:end="159:31"><expr pos:start="159:12" pos:end="159:31"><name pos:start="159:12" pos:end="159:31"><name pos:start="159:12" pos:end="159:14">pps</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:31">scaling_matrix4</name></name></expr></argument>, <argument pos:start="159:34" pos:end="159:77"><expr pos:start="159:34" pos:end="159:77"><name pos:start="159:34" pos:end="159:60"><name pos:start="159:34" pos:end="159:34">h</name><operator pos:start="159:35" pos:end="159:36">-&gt;</operator><name pos:start="159:37" pos:end="159:47">sps_buffers</name><index pos:start="159:48" pos:end="159:60">[<expr pos:start="159:49" pos:end="159:59"><name pos:start="159:49" pos:end="159:59"><name pos:start="159:49" pos:end="159:51">pps</name><operator pos:start="159:52" pos:end="159:53">-&gt;</operator><name pos:start="159:54" pos:end="159:59">sps_id</name></name></expr>]</index></name><operator pos:start="159:61" pos:end="159:62">-&gt;</operator><name pos:start="159:63" pos:end="159:77">scaling_matrix4</name></expr></argument>, <argument pos:start="159:80" pos:end="159:107"><expr pos:start="159:80" pos:end="159:107"><sizeof pos:start="159:80" pos:end="159:107">sizeof<argument_list pos:start="159:86" pos:end="159:107">(<argument pos:start="159:87" pos:end="159:106"><expr pos:start="159:87" pos:end="159:106"><name pos:start="159:87" pos:end="159:106"><name pos:start="159:87" pos:end="159:89">pps</name><operator pos:start="159:90" pos:end="159:91">-&gt;</operator><name pos:start="159:92" pos:end="159:106">scaling_matrix4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:109"><expr pos:start="161:5" pos:end="161:108"><call pos:start="161:5" pos:end="161:108"><name pos:start="161:5" pos:end="161:10">memcpy</name><argument_list pos:start="161:11" pos:end="161:108">(<argument pos:start="161:12" pos:end="161:31"><expr pos:start="161:12" pos:end="161:31"><name pos:start="161:12" pos:end="161:31"><name pos:start="161:12" pos:end="161:14">pps</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:31">scaling_matrix8</name></name></expr></argument>, <argument pos:start="161:34" pos:end="161:77"><expr pos:start="161:34" pos:end="161:77"><name pos:start="161:34" pos:end="161:60"><name pos:start="161:34" pos:end="161:34">h</name><operator pos:start="161:35" pos:end="161:36">-&gt;</operator><name pos:start="161:37" pos:end="161:47">sps_buffers</name><index pos:start="161:48" pos:end="161:60">[<expr pos:start="161:49" pos:end="161:59"><name pos:start="161:49" pos:end="161:59"><name pos:start="161:49" pos:end="161:51">pps</name><operator pos:start="161:52" pos:end="161:53">-&gt;</operator><name pos:start="161:54" pos:end="161:59">sps_id</name></name></expr>]</index></name><operator pos:start="161:61" pos:end="161:62">-&gt;</operator><name pos:start="161:63" pos:end="161:77">scaling_matrix8</name></expr></argument>, <argument pos:start="161:80" pos:end="161:107"><expr pos:start="161:80" pos:end="161:107"><sizeof pos:start="161:80" pos:end="161:107">sizeof<argument_list pos:start="161:86" pos:end="161:107">(<argument pos:start="161:87" pos:end="161:106"><expr pos:start="161:87" pos:end="161:106"><name pos:start="161:87" pos:end="161:106"><name pos:start="161:87" pos:end="161:89">pps</name><operator pos:start="161:90" pos:end="161:91">-&gt;</operator><name pos:start="161:92" pos:end="161:106">scaling_matrix8</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:52"><expr pos:start="165:5" pos:end="165:51"><name pos:start="165:5" pos:end="165:13">bits_left</name> <operator pos:start="165:15" pos:end="165:15">=</operator> <name pos:start="165:17" pos:end="165:26">bit_length</name> <operator pos:start="165:28" pos:end="165:28">-</operator> <call pos:start="165:30" pos:end="165:51"><name pos:start="165:30" pos:end="165:43">get_bits_count</name><argument_list pos:start="165:44" pos:end="165:51">(<argument pos:start="165:45" pos:end="165:50"><expr pos:start="165:45" pos:end="165:50"><operator pos:start="165:45" pos:end="165:45">&amp;</operator><name pos:start="165:46" pos:end="165:50"><name pos:start="165:46" pos:end="165:46">s</name><operator pos:start="165:47" pos:end="165:48">-&gt;</operator><name pos:start="165:49" pos:end="165:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="179:5"><if pos:start="167:5" pos:end="175:5">if<condition pos:start="167:7" pos:end="167:21">(<expr pos:start="167:8" pos:end="167:20"><name pos:start="167:8" pos:end="167:16">bits_left</name> <operator pos:start="167:18" pos:end="167:18">&gt;</operator> <literal type="number" pos:start="167:20" pos:end="167:20">0</literal></expr>)</condition><block pos:start="167:22" pos:end="175:5">{<block_content pos:start="169:9" pos:end="173:62">

        <expr_stmt pos:start="169:9" pos:end="169:51"><expr pos:start="169:9" pos:end="169:50"><name pos:start="169:9" pos:end="169:31"><name pos:start="169:9" pos:end="169:11">pps</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:31">transform_8x8_mode</name></name><operator pos:start="169:32" pos:end="169:32">=</operator> <call pos:start="169:34" pos:end="169:50"><name pos:start="169:34" pos:end="169:42">get_bits1</name><argument_list pos:start="169:43" pos:end="169:50">(<argument pos:start="169:44" pos:end="169:49"><expr pos:start="169:44" pos:end="169:49"><operator pos:start="169:44" pos:end="169:44">&amp;</operator><name pos:start="169:45" pos:end="169:49"><name pos:start="169:45" pos:end="169:45">s</name><operator pos:start="169:46" pos:end="169:47">-&gt;</operator><name pos:start="169:48" pos:end="169:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:116"><expr pos:start="171:9" pos:end="171:115"><call pos:start="171:9" pos:end="171:115"><name pos:start="171:9" pos:end="171:31">decode_scaling_matrices</name><argument_list pos:start="171:32" pos:end="171:115">(<argument pos:start="171:33" pos:end="171:33"><expr pos:start="171:33" pos:end="171:33"><name pos:start="171:33" pos:end="171:33">h</name></expr></argument>, <argument pos:start="171:36" pos:end="171:62"><expr pos:start="171:36" pos:end="171:62"><name pos:start="171:36" pos:end="171:62"><name pos:start="171:36" pos:end="171:36">h</name><operator pos:start="171:37" pos:end="171:38">-&gt;</operator><name pos:start="171:39" pos:end="171:49">sps_buffers</name><index pos:start="171:50" pos:end="171:62">[<expr pos:start="171:51" pos:end="171:61"><name pos:start="171:51" pos:end="171:61"><name pos:start="171:51" pos:end="171:53">pps</name><operator pos:start="171:54" pos:end="171:55">-&gt;</operator><name pos:start="171:56" pos:end="171:61">sps_id</name></name></expr>]</index></name></expr></argument>, <argument pos:start="171:65" pos:end="171:67"><expr pos:start="171:65" pos:end="171:67"><name pos:start="171:65" pos:end="171:67">pps</name></expr></argument>, <argument pos:start="171:70" pos:end="171:70"><expr pos:start="171:70" pos:end="171:70"><literal type="number" pos:start="171:70" pos:end="171:70">0</literal></expr></argument>, <argument pos:start="171:73" pos:end="171:92"><expr pos:start="171:73" pos:end="171:92"><name pos:start="171:73" pos:end="171:92"><name pos:start="171:73" pos:end="171:75">pps</name><operator pos:start="171:76" pos:end="171:77">-&gt;</operator><name pos:start="171:78" pos:end="171:92">scaling_matrix4</name></name></expr></argument>, <argument pos:start="171:95" pos:end="171:114"><expr pos:start="171:95" pos:end="171:114"><name pos:start="171:95" pos:end="171:114"><name pos:start="171:95" pos:end="171:97">pps</name><operator pos:start="171:98" pos:end="171:99">-&gt;</operator><name pos:start="171:100" pos:end="171:114">scaling_matrix8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:62"><expr pos:start="173:9" pos:end="173:61"><name pos:start="173:9" pos:end="173:38"><name pos:start="173:9" pos:end="173:11">pps</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:35">chroma_qp_index_offset</name><index pos:start="173:36" pos:end="173:38">[<expr pos:start="173:37" pos:end="173:37"><literal type="number" pos:start="173:37" pos:end="173:37">1</literal></expr>]</index></name><operator pos:start="173:39" pos:end="173:39">=</operator> <call pos:start="173:41" pos:end="173:61"><name pos:start="173:41" pos:end="173:53">get_se_golomb</name><argument_list pos:start="173:54" pos:end="173:61">(<argument pos:start="173:55" pos:end="173:60"><expr pos:start="173:55" pos:end="173:60"><operator pos:start="173:55" pos:end="173:55">&amp;</operator><name pos:start="173:56" pos:end="173:60"><name pos:start="173:56" pos:end="173:56">s</name><operator pos:start="173:57" pos:end="173:58">-&gt;</operator><name pos:start="173:59" pos:end="173:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="173:64" pos:end="173:94">//second_chroma_qp_index_offset</comment>

    </block_content>}</block></if> <else pos:start="175:7" pos:end="179:5">else <block pos:start="175:12" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:71">

        <expr_stmt pos:start="177:9" pos:end="177:71"><expr pos:start="177:9" pos:end="177:70"><name pos:start="177:9" pos:end="177:38"><name pos:start="177:9" pos:end="177:11">pps</name><operator pos:start="177:12" pos:end="177:13">-&gt;</operator><name pos:start="177:14" pos:end="177:35">chroma_qp_index_offset</name><index pos:start="177:36" pos:end="177:38">[<expr pos:start="177:37" pos:end="177:37"><literal type="number" pos:start="177:37" pos:end="177:37">1</literal></expr>]</index></name><operator pos:start="177:39" pos:end="177:39">=</operator> <name pos:start="177:41" pos:end="177:70"><name pos:start="177:41" pos:end="177:43">pps</name><operator pos:start="177:44" pos:end="177:45">-&gt;</operator><name pos:start="177:46" pos:end="177:67">chroma_qp_index_offset</name><index pos:start="177:68" pos:end="177:70">[<expr pos:start="177:69" pos:end="177:69"><literal type="number" pos:start="177:69" pos:end="177:69">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:82"><expr pos:start="183:5" pos:end="183:81"><call pos:start="183:5" pos:end="183:81"><name pos:start="183:5" pos:end="183:18">build_qp_table</name><argument_list pos:start="183:19" pos:end="183:81">(<argument pos:start="183:20" pos:end="183:22"><expr pos:start="183:20" pos:end="183:22"><name pos:start="183:20" pos:end="183:22">pps</name></expr></argument>, <argument pos:start="183:25" pos:end="183:25"><expr pos:start="183:25" pos:end="183:25"><literal type="number" pos:start="183:25" pos:end="183:25">0</literal></expr></argument>, <argument pos:start="183:28" pos:end="183:57"><expr pos:start="183:28" pos:end="183:57"><name pos:start="183:28" pos:end="183:57"><name pos:start="183:28" pos:end="183:30">pps</name><operator pos:start="183:31" pos:end="183:32">-&gt;</operator><name pos:start="183:33" pos:end="183:54">chroma_qp_index_offset</name><index pos:start="183:55" pos:end="183:57">[<expr pos:start="183:56" pos:end="183:56"><literal type="number" pos:start="183:56" pos:end="183:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:60" pos:end="183:80"><expr pos:start="183:60" pos:end="183:80"><name pos:start="183:60" pos:end="183:80"><name pos:start="183:60" pos:end="183:60">h</name><operator pos:start="183:61" pos:end="183:62">-&gt;</operator><name pos:start="183:63" pos:end="183:65">sps</name><operator pos:start="183:66" pos:end="183:66">.</operator><name pos:start="183:67" pos:end="183:80">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:82"><expr pos:start="185:5" pos:end="185:81"><call pos:start="185:5" pos:end="185:81"><name pos:start="185:5" pos:end="185:18">build_qp_table</name><argument_list pos:start="185:19" pos:end="185:81">(<argument pos:start="185:20" pos:end="185:22"><expr pos:start="185:20" pos:end="185:22"><name pos:start="185:20" pos:end="185:22">pps</name></expr></argument>, <argument pos:start="185:25" pos:end="185:25"><expr pos:start="185:25" pos:end="185:25"><literal type="number" pos:start="185:25" pos:end="185:25">1</literal></expr></argument>, <argument pos:start="185:28" pos:end="185:57"><expr pos:start="185:28" pos:end="185:57"><name pos:start="185:28" pos:end="185:57"><name pos:start="185:28" pos:end="185:30">pps</name><operator pos:start="185:31" pos:end="185:32">-&gt;</operator><name pos:start="185:33" pos:end="185:54">chroma_qp_index_offset</name><index pos:start="185:55" pos:end="185:57">[<expr pos:start="185:56" pos:end="185:56"><literal type="number" pos:start="185:56" pos:end="185:56">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="185:60" pos:end="185:80"><expr pos:start="185:60" pos:end="185:80"><name pos:start="185:60" pos:end="185:80"><name pos:start="185:60" pos:end="185:60">h</name><operator pos:start="185:61" pos:end="185:62">-&gt;</operator><name pos:start="185:63" pos:end="185:65">sps</name><operator pos:start="185:66" pos:end="185:66">.</operator><name pos:start="185:67" pos:end="185:80">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="189:31"><if pos:start="187:5" pos:end="189:31">if<condition pos:start="187:7" pos:end="187:72">(<expr pos:start="187:8" pos:end="187:71"><name pos:start="187:8" pos:end="187:37"><name pos:start="187:8" pos:end="187:10">pps</name><operator pos:start="187:11" pos:end="187:12">-&gt;</operator><name pos:start="187:13" pos:end="187:34">chroma_qp_index_offset</name><index pos:start="187:35" pos:end="187:37">[<expr pos:start="187:36" pos:end="187:36"><literal type="number" pos:start="187:36" pos:end="187:36">0</literal></expr>]</index></name> <operator pos:start="187:39" pos:end="187:40">!=</operator> <name pos:start="187:42" pos:end="187:71"><name pos:start="187:42" pos:end="187:44">pps</name><operator pos:start="187:45" pos:end="187:46">-&gt;</operator><name pos:start="187:47" pos:end="187:68">chroma_qp_index_offset</name><index pos:start="187:69" pos:end="187:71">[<expr pos:start="187:70" pos:end="187:70"><literal type="number" pos:start="187:70" pos:end="187:70">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="189:9" pos:end="189:31"><block_content pos:start="189:9" pos:end="189:31">

        <expr_stmt pos:start="189:9" pos:end="189:31"><expr pos:start="189:9" pos:end="189:30"><name pos:start="189:9" pos:end="189:27"><name pos:start="189:9" pos:end="189:11">pps</name><operator pos:start="189:12" pos:end="189:13">-&gt;</operator><name pos:start="189:14" pos:end="189:27">chroma_qp_diff</name></name><operator pos:start="189:28" pos:end="189:28">=</operator> <literal type="number" pos:start="189:30" pos:end="189:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="193:5" pos:end="219:5"><if pos:start="193:5" pos:end="219:5">if<condition pos:start="193:7" pos:end="193:42">(<expr pos:start="193:8" pos:end="193:41"><name pos:start="193:8" pos:end="193:22"><name pos:start="193:8" pos:end="193:8">s</name><operator pos:start="193:9" pos:end="193:10">-&gt;</operator><name pos:start="193:11" pos:end="193:15">avctx</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:22">debug</name></name><operator pos:start="193:23" pos:end="193:23">&amp;</operator><name pos:start="193:24" pos:end="193:41">FF_DEBUG_PICT_INFO</name></expr>)</condition><block pos:start="193:43" pos:end="219:5">{<block_content pos:start="195:9" pos:end="217:17">

        <expr_stmt pos:start="195:9" pos:end="217:17"><expr pos:start="195:9" pos:end="217:16"><call pos:start="195:9" pos:end="217:16"><name pos:start="195:9" pos:end="195:14">av_log</name><argument_list pos:start="195:15" pos:end="217:16">(<argument pos:start="195:16" pos:end="195:25"><expr pos:start="195:16" pos:end="195:25"><name pos:start="195:16" pos:end="195:25"><name pos:start="195:16" pos:end="195:16">h</name><operator pos:start="195:17" pos:end="195:18">-&gt;</operator><name pos:start="195:19" pos:end="195:19">s</name><operator pos:start="195:20" pos:end="195:20">.</operator><name pos:start="195:21" pos:end="195:25">avctx</name></name></expr></argument>, <argument pos:start="195:28" pos:end="195:39"><expr pos:start="195:28" pos:end="195:39"><name pos:start="195:28" pos:end="195:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="195:42" pos:end="195:117"><expr pos:start="195:42" pos:end="195:117"><literal type="string" pos:start="195:42" pos:end="195:117">"pps:%u sps:%u %s slice_groups:%d ref:%d/%d %s qp:%d/%d/%d/%d %s %s %s %s\n"</literal></expr></argument>,

               <argument pos:start="197:16" pos:end="197:21"><expr pos:start="197:16" pos:end="197:21"><name pos:start="197:16" pos:end="197:21">pps_id</name></expr></argument>, <argument pos:start="197:24" pos:end="197:34"><expr pos:start="197:24" pos:end="197:34"><name pos:start="197:24" pos:end="197:34"><name pos:start="197:24" pos:end="197:26">pps</name><operator pos:start="197:27" pos:end="197:28">-&gt;</operator><name pos:start="197:29" pos:end="197:34">sps_id</name></name></expr></argument>,

               <argument pos:start="199:16" pos:end="199:45"><expr pos:start="199:16" pos:end="199:45"><ternary pos:start="199:16" pos:end="199:45"><condition pos:start="199:16" pos:end="199:27"><expr pos:start="199:16" pos:end="199:25"><name pos:start="199:16" pos:end="199:25"><name pos:start="199:16" pos:end="199:18">pps</name><operator pos:start="199:19" pos:end="199:20">-&gt;</operator><name pos:start="199:21" pos:end="199:25">cabac</name></name></expr> ?</condition><then pos:start="199:29" pos:end="199:35"> <expr pos:start="199:29" pos:end="199:35"><literal type="string" pos:start="199:29" pos:end="199:35">"CABAC"</literal></expr> </then><else pos:start="199:37" pos:end="199:45">: <expr pos:start="199:39" pos:end="199:45"><literal type="string" pos:start="199:39" pos:end="199:45">"CAVLC"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="201:16" pos:end="201:37"><expr pos:start="201:16" pos:end="201:37"><name pos:start="201:16" pos:end="201:37"><name pos:start="201:16" pos:end="201:18">pps</name><operator pos:start="201:19" pos:end="201:20">-&gt;</operator><name pos:start="201:21" pos:end="201:37">slice_group_count</name></name></expr></argument>,

               <argument pos:start="203:16" pos:end="203:32"><expr pos:start="203:16" pos:end="203:32"><name pos:start="203:16" pos:end="203:32"><name pos:start="203:16" pos:end="203:18">pps</name><operator pos:start="203:19" pos:end="203:20">-&gt;</operator><name pos:start="203:21" pos:end="203:29">ref_count</name><index pos:start="203:30" pos:end="203:32">[<expr pos:start="203:31" pos:end="203:31"><literal type="number" pos:start="203:31" pos:end="203:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="203:35" pos:end="203:51"><expr pos:start="203:35" pos:end="203:51"><name pos:start="203:35" pos:end="203:51"><name pos:start="203:35" pos:end="203:37">pps</name><operator pos:start="203:38" pos:end="203:39">-&gt;</operator><name pos:start="203:40" pos:end="203:48">ref_count</name><index pos:start="203:49" pos:end="203:51">[<expr pos:start="203:50" pos:end="203:50"><literal type="number" pos:start="203:50" pos:end="203:50">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="205:16" pos:end="205:51"><expr pos:start="205:16" pos:end="205:51"><ternary pos:start="205:16" pos:end="205:51"><condition pos:start="205:16" pos:end="205:35"><expr pos:start="205:16" pos:end="205:33"><name pos:start="205:16" pos:end="205:33"><name pos:start="205:16" pos:end="205:18">pps</name><operator pos:start="205:19" pos:end="205:20">-&gt;</operator><name pos:start="205:21" pos:end="205:33">weighted_pred</name></name></expr> ?</condition><then pos:start="205:37" pos:end="205:46"> <expr pos:start="205:37" pos:end="205:46"><literal type="string" pos:start="205:37" pos:end="205:46">"weighted"</literal></expr> </then><else pos:start="205:48" pos:end="205:51">: <expr pos:start="205:50" pos:end="205:51"><literal type="string" pos:start="205:50" pos:end="205:51">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="207:16" pos:end="207:27"><expr pos:start="207:16" pos:end="207:27"><name pos:start="207:16" pos:end="207:27"><name pos:start="207:16" pos:end="207:18">pps</name><operator pos:start="207:19" pos:end="207:20">-&gt;</operator><name pos:start="207:21" pos:end="207:27">init_qp</name></name></expr></argument>, <argument pos:start="207:30" pos:end="207:41"><expr pos:start="207:30" pos:end="207:41"><name pos:start="207:30" pos:end="207:41"><name pos:start="207:30" pos:end="207:32">pps</name><operator pos:start="207:33" pos:end="207:34">-&gt;</operator><name pos:start="207:35" pos:end="207:41">init_qs</name></name></expr></argument>, <argument pos:start="207:44" pos:end="207:73"><expr pos:start="207:44" pos:end="207:73"><name pos:start="207:44" pos:end="207:73"><name pos:start="207:44" pos:end="207:46">pps</name><operator pos:start="207:47" pos:end="207:48">-&gt;</operator><name pos:start="207:49" pos:end="207:70">chroma_qp_index_offset</name><index pos:start="207:71" pos:end="207:73">[<expr pos:start="207:72" pos:end="207:72"><literal type="number" pos:start="207:72" pos:end="207:72">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="207:76" pos:end="207:105"><expr pos:start="207:76" pos:end="207:105"><name pos:start="207:76" pos:end="207:105"><name pos:start="207:76" pos:end="207:78">pps</name><operator pos:start="207:79" pos:end="207:80">-&gt;</operator><name pos:start="207:81" pos:end="207:102">chroma_qp_index_offset</name><index pos:start="207:103" pos:end="207:105">[<expr pos:start="207:104" pos:end="207:104"><literal type="number" pos:start="207:104" pos:end="207:104">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="209:16" pos:end="209:70"><expr pos:start="209:16" pos:end="209:70"><ternary pos:start="209:16" pos:end="209:70"><condition pos:start="209:16" pos:end="209:58"><expr pos:start="209:16" pos:end="209:56"><name pos:start="209:16" pos:end="209:56"><name pos:start="209:16" pos:end="209:18">pps</name><operator pos:start="209:19" pos:end="209:20">-&gt;</operator><name pos:start="209:21" pos:end="209:56">deblocking_filter_parameters_present</name></name></expr> ?</condition><then pos:start="209:60" pos:end="209:65"> <expr pos:start="209:60" pos:end="209:65"><literal type="string" pos:start="209:60" pos:end="209:65">"LPAR"</literal></expr> </then><else pos:start="209:67" pos:end="209:70">: <expr pos:start="209:69" pos:end="209:70"><literal type="string" pos:start="209:69" pos:end="209:70">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="211:16" pos:end="211:58"><expr pos:start="211:16" pos:end="211:58"><ternary pos:start="211:16" pos:end="211:58"><condition pos:start="211:16" pos:end="211:44"><expr pos:start="211:16" pos:end="211:42"><name pos:start="211:16" pos:end="211:42"><name pos:start="211:16" pos:end="211:18">pps</name><operator pos:start="211:19" pos:end="211:20">-&gt;</operator><name pos:start="211:21" pos:end="211:42">constrained_intra_pred</name></name></expr> ?</condition><then pos:start="211:46" pos:end="211:53"> <expr pos:start="211:46" pos:end="211:53"><literal type="string" pos:start="211:46" pos:end="211:53">"CONSTR"</literal></expr> </then><else pos:start="211:55" pos:end="211:58">: <expr pos:start="211:57" pos:end="211:58"><literal type="string" pos:start="211:57" pos:end="211:58">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="213:16" pos:end="213:59"><expr pos:start="213:16" pos:end="213:59"><ternary pos:start="213:16" pos:end="213:59"><condition pos:start="213:16" pos:end="213:47"><expr pos:start="213:16" pos:end="213:45"><name pos:start="213:16" pos:end="213:45"><name pos:start="213:16" pos:end="213:18">pps</name><operator pos:start="213:19" pos:end="213:20">-&gt;</operator><name pos:start="213:21" pos:end="213:45">redundant_pic_cnt_present</name></name></expr> ?</condition><then pos:start="213:49" pos:end="213:54"> <expr pos:start="213:49" pos:end="213:54"><literal type="string" pos:start="213:49" pos:end="213:54">"REDU"</literal></expr> </then><else pos:start="213:56" pos:end="213:59">: <expr pos:start="213:58" pos:end="213:59"><literal type="string" pos:start="213:58" pos:end="213:59">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="215:16" pos:end="215:54"><expr pos:start="215:16" pos:end="215:54"><ternary pos:start="215:16" pos:end="215:54"><condition pos:start="215:16" pos:end="215:40"><expr pos:start="215:16" pos:end="215:38"><name pos:start="215:16" pos:end="215:38"><name pos:start="215:16" pos:end="215:18">pps</name><operator pos:start="215:19" pos:end="215:20">-&gt;</operator><name pos:start="215:21" pos:end="215:38">transform_8x8_mode</name></name></expr> ?</condition><then pos:start="215:42" pos:end="215:49"> <expr pos:start="215:42" pos:end="215:49"><literal type="string" pos:start="215:42" pos:end="215:49">"8x8DCT"</literal></expr> </then><else pos:start="215:51" pos:end="215:54">: <expr pos:start="215:53" pos:end="215:54"><literal type="string" pos:start="215:53" pos:end="215:54">""</literal></expr></else></ternary></expr></argument>

               )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:36"><expr pos:start="223:5" pos:end="223:35"><call pos:start="223:5" pos:end="223:35"><name pos:start="223:5" pos:end="223:11">av_free</name><argument_list pos:start="223:12" pos:end="223:35">(<argument pos:start="223:13" pos:end="223:34"><expr pos:start="223:13" pos:end="223:34"><name pos:start="223:13" pos:end="223:34"><name pos:start="223:13" pos:end="223:13">h</name><operator pos:start="223:14" pos:end="223:15">-&gt;</operator><name pos:start="223:16" pos:end="223:26">pps_buffers</name><index pos:start="223:27" pos:end="223:34">[<expr pos:start="223:28" pos:end="223:33"><name pos:start="223:28" pos:end="223:33">pps_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:32"><expr pos:start="225:5" pos:end="225:31"><name pos:start="225:5" pos:end="225:26"><name pos:start="225:5" pos:end="225:5">h</name><operator pos:start="225:6" pos:end="225:7">-&gt;</operator><name pos:start="225:8" pos:end="225:18">pps_buffers</name><index pos:start="225:19" pos:end="225:26">[<expr pos:start="225:20" pos:end="225:25"><name pos:start="225:20" pos:end="225:25">pps_id</name></expr>]</index></name><operator pos:start="225:27" pos:end="225:27">=</operator> <name pos:start="225:29" pos:end="225:31">pps</name></expr>;</expr_stmt>

    <return pos:start="227:5" pos:end="227:13">return <expr pos:start="227:12" pos:end="227:12"><literal type="number" pos:start="227:12" pos:end="227:12">0</literal></expr>;</return>

<label pos:start="229:1" pos:end="229:5"><name pos:start="229:1" pos:end="229:4">fail</name>:</label>

    <expr_stmt pos:start="231:5" pos:end="231:17"><expr pos:start="231:5" pos:end="231:16"><call pos:start="231:5" pos:end="231:16"><name pos:start="231:5" pos:end="231:11">av_free</name><argument_list pos:start="231:12" pos:end="231:16">(<argument pos:start="231:13" pos:end="231:15"><expr pos:start="231:13" pos:end="231:15"><name pos:start="231:13" pos:end="231:15">pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="233:5" pos:end="233:14">return <expr pos:start="233:12" pos:end="233:13"><operator pos:start="233:12" pos:end="233:12">-</operator><literal type="number" pos:start="233:13" pos:end="233:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
