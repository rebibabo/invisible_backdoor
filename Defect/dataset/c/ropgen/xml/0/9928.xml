<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9928.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">svq3_decode_slice_header</name><parameter_list pos:start="1:36" pos:end="1:58">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="171:1">{<block_content pos:start="5:5" pos:end="169:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SVQ3Context</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:21">svq3</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">H264Context</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">h</name> <init pos:start="7:20" pos:end="7:29">= <expr pos:start="7:22" pos:end="7:29"><operator pos:start="7:22" pos:end="7:22">&amp;</operator><name pos:start="7:23" pos:end="7:29"><name pos:start="7:23" pos:end="7:26">svq3</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:29">h</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">MpegEncContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:29">= <expr pos:start="9:25" pos:end="9:29"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:29"><name pos:start="9:26" pos:end="9:26">h</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:19">mb_xy</name> <init pos:start="11:21" pos:end="11:30">= <expr pos:start="11:23" pos:end="11:30"><name pos:start="11:23" pos:end="11:30"><name pos:start="11:23" pos:end="11:23">h</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:30">mb_xy</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:17">header</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:10">header</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:32"><name pos:start="17:14" pos:end="17:21">get_bits</name><argument_list pos:start="17:22" pos:end="17:32">(<argument pos:start="17:23" pos:end="17:28"><expr pos:start="17:23" pos:end="17:28"><operator pos:start="17:23" pos:end="17:23">&amp;</operator><name pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:24">s</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:28">gb</name></name></expr></argument>, <argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><literal type="number" pos:start="17:31" pos:end="17:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="73:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:79">(<expr pos:start="21:9" pos:end="21:78"><operator pos:start="21:9" pos:end="21:9">(</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:16">header</name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <literal type="number" pos:start="21:20" pos:end="21:23">0x9F</literal><operator pos:start="21:24" pos:end="21:24">)</operator> <operator pos:start="21:26" pos:end="21:27">!=</operator> <literal type="number" pos:start="21:29" pos:end="21:29">1</literal> <operator pos:start="21:31" pos:end="21:32">&amp;&amp;</operator> <operator pos:start="21:34" pos:end="21:34">(</operator><name pos:start="21:35" pos:end="21:40">header</name> <operator pos:start="21:42" pos:end="21:42">&amp;</operator> <literal type="number" pos:start="21:44" pos:end="21:47">0x9F</literal><operator pos:start="21:48" pos:end="21:48">)</operator> <operator pos:start="21:50" pos:end="21:51">!=</operator> <literal type="number" pos:start="21:53" pos:end="21:53">2</literal><operator pos:start="21:54" pos:end="21:54">)</operator> <operator pos:start="21:56" pos:end="21:57">||</operator> <operator pos:start="21:59" pos:end="21:59">(</operator><name pos:start="21:60" pos:end="21:65">header</name> <operator pos:start="21:67" pos:end="21:67">&amp;</operator> <literal type="number" pos:start="21:69" pos:end="21:72">0x60</literal><operator pos:start="21:73" pos:end="21:73">)</operator> <operator pos:start="21:75" pos:end="21:76">==</operator> <literal type="number" pos:start="21:78" pos:end="21:78">0</literal></expr>)</condition> <block pos:start="21:81" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <comment type="block" pos:start="23:9" pos:end="23:25">/* TODO: what? */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:81"><expr pos:start="25:9" pos:end="25:80"><call pos:start="25:9" pos:end="25:80"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:80">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:71"><expr pos:start="25:37" pos:end="25:71"><literal type="string" pos:start="25:37" pos:end="25:71">"unsupported slice header (%02X)\n"</literal></expr></argument>, <argument pos:start="25:74" pos:end="25:79"><expr pos:start="25:74" pos:end="25:79"><name pos:start="25:74" pos:end="25:79">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="73:5">else <block pos:start="29:12" pos:end="73:5">{<block_content pos:start="31:9" pos:end="71:34">

        <decl_stmt pos:start="31:9" pos:end="31:39"><decl pos:start="31:9" pos:end="31:38"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:18">length</name> <init pos:start="31:20" pos:end="31:38">= <expr pos:start="31:22" pos:end="31:38"><operator pos:start="31:22" pos:end="31:22">(</operator><name pos:start="31:23" pos:end="31:28">header</name> <operator pos:start="31:30" pos:end="31:31">&gt;&gt;</operator> <literal type="number" pos:start="31:33" pos:end="31:33">5</literal><operator pos:start="31:34" pos:end="31:34">)</operator> <operator pos:start="31:36" pos:end="31:36">&amp;</operator> <literal type="number" pos:start="31:38" pos:end="31:38">3</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:99"><expr pos:start="35:9" pos:end="35:98"><name pos:start="35:9" pos:end="35:30"><name pos:start="35:9" pos:end="35:12">svq3</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:30">next_slice_index</name></name> <operator pos:start="35:32" pos:end="35:32">=</operator> <call pos:start="35:34" pos:end="35:55"><name pos:start="35:34" pos:end="35:47">get_bits_count</name><argument_list pos:start="35:48" pos:end="35:55">(<argument pos:start="35:49" pos:end="35:54"><expr pos:start="35:49" pos:end="35:54"><operator pos:start="35:49" pos:end="35:49">&amp;</operator><name pos:start="35:50" pos:end="35:54"><name pos:start="35:50" pos:end="35:50">s</name><operator pos:start="35:51" pos:end="35:52">-&gt;</operator><name pos:start="35:53" pos:end="35:54">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="35:57" pos:end="35:57">+</operator> <literal type="number" pos:start="35:59" pos:end="35:59">8</literal><operator pos:start="35:60" pos:end="35:60">*</operator><call pos:start="35:61" pos:end="35:87"><name pos:start="35:61" pos:end="35:69">show_bits</name><argument_list pos:start="35:70" pos:end="35:87">(<argument pos:start="35:71" pos:end="35:76"><expr pos:start="35:71" pos:end="35:76"><operator pos:start="35:71" pos:end="35:71">&amp;</operator><name pos:start="35:72" pos:end="35:76"><name pos:start="35:72" pos:end="35:72">s</name><operator pos:start="35:73" pos:end="35:74">-&gt;</operator><name pos:start="35:75" pos:end="35:76">gb</name></name></expr></argument>, <argument pos:start="35:79" pos:end="35:86"><expr pos:start="35:79" pos:end="35:86"><literal type="number" pos:start="35:79" pos:end="35:79">8</literal><operator pos:start="35:80" pos:end="35:80">*</operator><name pos:start="35:81" pos:end="35:86">length</name></expr></argument>)</argument_list></call> <operator pos:start="35:89" pos:end="35:89">+</operator> <literal type="number" pos:start="35:91" pos:end="35:91">8</literal><operator pos:start="35:92" pos:end="35:92">*</operator><name pos:start="35:93" pos:end="35:98">length</name></expr>;</expr_stmt>



        <if_stmt pos:start="39:9" pos:end="45:5"><if pos:start="39:9" pos:end="45:5">if <condition pos:start="39:12" pos:end="39:56">(<expr pos:start="39:13" pos:end="39:55"><name pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:16">svq3</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:34">next_slice_index</name></name> <operator pos:start="39:36" pos:end="39:36">&gt;</operator> <name pos:start="39:38" pos:end="39:55"><name pos:start="39:38" pos:end="39:38">s</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:42">gb</name><operator pos:start="39:43" pos:end="39:43">.</operator><name pos:start="39:44" pos:end="39:55">size_in_bits</name></name></expr>)</condition> <block pos:start="39:58" pos:end="45:5">{<block_content pos:start="41:13" pos:end="43:22">

            <expr_stmt pos:start="41:13" pos:end="41:71"><expr pos:start="41:13" pos:end="41:70"><call pos:start="41:13" pos:end="41:70"><name pos:start="41:13" pos:end="41:18">av_log</name><argument_list pos:start="41:19" pos:end="41:70">(<argument pos:start="41:20" pos:end="41:24"><expr pos:start="41:20" pos:end="41:24"><name pos:start="41:20" pos:end="41:24">avctx</name></expr></argument>, <argument pos:start="41:27" pos:end="41:38"><expr pos:start="41:27" pos:end="41:38"><name pos:start="41:27" pos:end="41:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:41" pos:end="41:69"><expr pos:start="41:41" pos:end="41:69"><literal type="string" pos:start="41:41" pos:end="41:69">"slice after bitstream end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:22">return <expr pos:start="43:20" pos:end="43:21"><operator pos:start="43:20" pos:end="43:20">-</operator><literal type="number" pos:start="43:21" pos:end="43:21">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:69"><expr pos:start="49:9" pos:end="49:68"><name pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:13">gb</name><operator pos:start="49:14" pos:end="49:14">.</operator><name pos:start="49:15" pos:end="49:26">size_in_bits</name></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <name pos:start="49:30" pos:end="49:51"><name pos:start="49:30" pos:end="49:33">svq3</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:51">next_slice_index</name></name> <operator pos:start="49:53" pos:end="49:53">-</operator> <literal type="number" pos:start="49:55" pos:end="49:55">8</literal><operator pos:start="49:56" pos:end="49:56">*</operator><operator pos:start="49:57" pos:end="49:57">(</operator><name pos:start="49:58" pos:end="49:63">length</name> <operator pos:start="49:65" pos:end="49:65">-</operator> <literal type="number" pos:start="49:67" pos:end="49:67">1</literal><operator pos:start="49:68" pos:end="49:68">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:29"><expr pos:start="51:9" pos:end="51:28"><call pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:17">skip_bits</name><argument_list pos:start="51:18" pos:end="51:28">(<argument pos:start="51:19" pos:end="51:24"><expr pos:start="51:19" pos:end="51:24"><operator pos:start="51:19" pos:end="51:19">&amp;</operator><name pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:24">gb</name></name></expr></argument>, <argument pos:start="51:27" pos:end="51:27"><expr pos:start="51:27" pos:end="51:27"><literal type="number" pos:start="51:27" pos:end="51:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:32">(<expr pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:16">svq3</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:31">watermark_key</name></name></expr>)</condition> <block pos:start="55:34" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:96">

            <decl_stmt pos:start="57:13" pos:end="57:84"><decl pos:start="57:13" pos:end="57:83"><type pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:20">uint32_t</name></type> <name pos:start="57:22" pos:end="57:27">header</name> <init pos:start="57:29" pos:end="57:83">= <expr pos:start="57:31" pos:end="57:83"><call pos:start="57:31" pos:end="57:83"><name pos:start="57:31" pos:end="57:37">AV_RL32</name><argument_list pos:start="57:38" pos:end="57:83">(<argument pos:start="57:39" pos:end="57:82"><expr pos:start="57:39" pos:end="57:82"><operator pos:start="57:39" pos:end="57:39">&amp;</operator><name pos:start="57:40" pos:end="57:82"><name pos:start="57:40" pos:end="57:40">s</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:44">gb</name><operator pos:start="57:45" pos:end="57:45">.</operator><name pos:start="57:46" pos:end="57:51">buffer</name><index pos:start="57:52" pos:end="57:82">[<expr pos:start="57:53" pos:end="57:81"><operator pos:start="57:53" pos:end="57:53">(</operator><call pos:start="57:54" pos:end="57:75"><name pos:start="57:54" pos:end="57:67">get_bits_count</name><argument_list pos:start="57:68" pos:end="57:75">(<argument pos:start="57:69" pos:end="57:74"><expr pos:start="57:69" pos:end="57:74"><operator pos:start="57:69" pos:end="57:69">&amp;</operator><name pos:start="57:70" pos:end="57:74"><name pos:start="57:70" pos:end="57:70">s</name><operator pos:start="57:71" pos:end="57:72">-&gt;</operator><name pos:start="57:73" pos:end="57:74">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="57:76" pos:end="57:77">&gt;&gt;</operator><literal type="number" pos:start="57:78" pos:end="57:78">3</literal><operator pos:start="57:79" pos:end="57:79">)</operator><operator pos:start="57:80" pos:end="57:80">+</operator><literal type="number" pos:start="57:81" pos:end="57:81">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:96"><expr pos:start="59:13" pos:end="59:95"><call pos:start="59:13" pos:end="59:95"><name pos:start="59:13" pos:end="59:19">AV_WL32</name><argument_list pos:start="59:20" pos:end="59:95">(<argument pos:start="59:21" pos:end="59:64"><expr pos:start="59:21" pos:end="59:64"><operator pos:start="59:21" pos:end="59:21">&amp;</operator><name pos:start="59:22" pos:end="59:64"><name pos:start="59:22" pos:end="59:22">s</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:26">gb</name><operator pos:start="59:27" pos:end="59:27">.</operator><name pos:start="59:28" pos:end="59:33">buffer</name><index pos:start="59:34" pos:end="59:64">[<expr pos:start="59:35" pos:end="59:63"><operator pos:start="59:35" pos:end="59:35">(</operator><call pos:start="59:36" pos:end="59:57"><name pos:start="59:36" pos:end="59:49">get_bits_count</name><argument_list pos:start="59:50" pos:end="59:57">(<argument pos:start="59:51" pos:end="59:56"><expr pos:start="59:51" pos:end="59:56"><operator pos:start="59:51" pos:end="59:51">&amp;</operator><name pos:start="59:52" pos:end="59:56"><name pos:start="59:52" pos:end="59:52">s</name><operator pos:start="59:53" pos:end="59:54">-&gt;</operator><name pos:start="59:55" pos:end="59:56">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="59:58" pos:end="59:59">&gt;&gt;</operator><literal type="number" pos:start="59:60" pos:end="59:60">3</literal><operator pos:start="59:61" pos:end="59:61">)</operator><operator pos:start="59:62" pos:end="59:62">+</operator><literal type="number" pos:start="59:63" pos:end="59:63">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:67" pos:end="59:94"><expr pos:start="59:67" pos:end="59:94"><name pos:start="59:67" pos:end="59:72">header</name> <operator pos:start="59:74" pos:end="59:74">^</operator> <name pos:start="59:76" pos:end="59:94"><name pos:start="59:76" pos:end="59:79">svq3</name><operator pos:start="59:80" pos:end="59:81">-&gt;</operator><name pos:start="59:82" pos:end="59:94">watermark_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:23">(<expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:18">length</name> <operator pos:start="63:20" pos:end="63:20">&gt;</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>)</condition> <block pos:start="63:25" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:73">

            <expr_stmt pos:start="65:13" pos:end="67:73"><expr pos:start="65:13" pos:end="67:72"><call pos:start="65:13" pos:end="67:72"><name pos:start="65:13" pos:end="65:18">memcpy</name><argument_list pos:start="65:19" pos:end="67:72">(<argument pos:start="65:20" pos:end="65:73"><expr pos:start="65:20" pos:end="65:73"><operator pos:start="65:20" pos:end="65:20">(</operator><name pos:start="65:21" pos:end="65:27">uint8_t</name> <operator pos:start="65:29" pos:end="65:29">*</operator><operator pos:start="65:30" pos:end="65:30">)</operator> <operator pos:start="65:32" pos:end="65:32">&amp;</operator><name pos:start="65:33" pos:end="65:73"><name pos:start="65:33" pos:end="65:33">s</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:37">gb</name><operator pos:start="65:38" pos:end="65:38">.</operator><name pos:start="65:39" pos:end="65:44">buffer</name><index pos:start="65:45" pos:end="65:73">[<expr pos:start="65:46" pos:end="65:72"><call pos:start="65:46" pos:end="65:67"><name pos:start="65:46" pos:end="65:59">get_bits_count</name><argument_list pos:start="65:60" pos:end="65:67">(<argument pos:start="65:61" pos:end="65:66"><expr pos:start="65:61" pos:end="65:66"><operator pos:start="65:61" pos:end="65:61">&amp;</operator><name pos:start="65:62" pos:end="65:66"><name pos:start="65:62" pos:end="65:62">s</name><operator pos:start="65:63" pos:end="65:64">-&gt;</operator><name pos:start="65:65" pos:end="65:66">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="65:69" pos:end="65:70">&gt;&gt;</operator> <literal type="number" pos:start="65:72" pos:end="65:72">3</literal></expr>]</index></name></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:57"><expr pos:start="67:20" pos:end="67:57"><operator pos:start="67:20" pos:end="67:20">&amp;</operator><name pos:start="67:21" pos:end="67:57"><name pos:start="67:21" pos:end="67:21">s</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:25">gb</name><operator pos:start="67:26" pos:end="67:26">.</operator><name pos:start="67:27" pos:end="67:32">buffer</name><index pos:start="67:33" pos:end="67:57">[<expr pos:start="67:34" pos:end="67:56"><name pos:start="67:34" pos:end="67:51"><name pos:start="67:34" pos:end="67:34">s</name><operator pos:start="67:35" pos:end="67:36">-&gt;</operator><name pos:start="67:37" pos:end="67:38">gb</name><operator pos:start="67:39" pos:end="67:39">.</operator><name pos:start="67:40" pos:end="67:51">size_in_bits</name></name> <operator pos:start="67:53" pos:end="67:54">&gt;&gt;</operator> <literal type="number" pos:start="67:56" pos:end="67:56">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="67:60" pos:end="67:71"><expr pos:start="67:60" pos:end="67:71"><operator pos:start="67:60" pos:end="67:60">(</operator><name pos:start="67:61" pos:end="67:66">length</name> <operator pos:start="67:68" pos:end="67:68">-</operator> <literal type="number" pos:start="67:70" pos:end="67:70">1</literal><operator pos:start="67:71" pos:end="67:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><call pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:22">skip_bits_long</name><argument_list pos:start="71:23" pos:end="71:33">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><operator pos:start="71:24" pos:end="71:24">&amp;</operator><name pos:start="71:25" pos:end="71:29"><name pos:start="71:25" pos:end="71:25">s</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:29">gb</name></name></expr></argument>, <argument pos:start="71:32" pos:end="71:32"><expr pos:start="71:32" pos:end="71:32"><literal type="number" pos:start="71:32" pos:end="71:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:66">(<expr pos:start="77:9" pos:end="77:65"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <call pos:start="77:14" pos:end="77:39"><name pos:start="77:14" pos:end="77:31">svq3_get_ue_golomb</name><argument_list pos:start="77:32" pos:end="77:39">(<argument pos:start="77:33" pos:end="77:38"><expr pos:start="77:33" pos:end="77:38"><operator pos:start="77:33" pos:end="77:33">&amp;</operator><name pos:start="77:34" pos:end="77:38"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:38">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="77:40" pos:end="77:40">)</operator> <operator pos:start="77:42" pos:end="77:43">==</operator> <name pos:start="77:45" pos:end="77:55">INVALID_VLC</name> <operator pos:start="77:57" pos:end="77:58">||</operator> <name pos:start="77:60" pos:end="77:60">i</name> <operator pos:start="77:62" pos:end="77:63">&gt;=</operator> <literal type="number" pos:start="77:65" pos:end="77:65">3</literal></expr>)</condition><block pos:start="77:67" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:18">

        <expr_stmt pos:start="79:9" pos:end="79:72"><expr pos:start="79:9" pos:end="79:71"><call pos:start="79:9" pos:end="79:71"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:71">(<argument pos:start="79:16" pos:end="79:25"><expr pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:16">h</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:19">s</name><operator pos:start="79:20" pos:end="79:20">.</operator><name pos:start="79:21" pos:end="79:25">avctx</name></name></expr></argument>, <argument pos:start="79:28" pos:end="79:39"><expr pos:start="79:28" pos:end="79:39"><name pos:start="79:28" pos:end="79:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:42" pos:end="79:67"><expr pos:start="79:42" pos:end="79:67"><literal type="string" pos:start="79:42" pos:end="79:67">"illegal slice type %d \n"</literal></expr></argument>, <argument pos:start="79:70" pos:end="79:70"><expr pos:start="79:70" pos:end="79:70"><name pos:start="79:70" pos:end="79:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:43"><expr pos:start="87:5" pos:end="87:42"><name pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:5">h</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:17">slice_type</name></name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:42"><name pos:start="87:21" pos:end="87:39">golomb_to_pict_type</name><index pos:start="87:40" pos:end="87:42">[<expr pos:start="87:41" pos:end="87:41"><name pos:start="87:41" pos:end="87:41">i</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:29">(<expr pos:start="91:9" pos:end="91:28"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:15">header</name> <operator pos:start="91:17" pos:end="91:17">&amp;</operator> <literal type="number" pos:start="91:19" pos:end="91:22">0x9F</literal><operator pos:start="91:23" pos:end="91:23">)</operator> <operator pos:start="91:25" pos:end="91:26">==</operator> <literal type="number" pos:start="91:28" pos:end="91:28">2</literal></expr>)</condition> <block pos:start="91:31" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:83">

        <expr_stmt pos:start="93:9" pos:end="93:65"><expr pos:start="93:9" pos:end="93:64"><name pos:start="93:9" pos:end="93:9">i</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <ternary pos:start="93:13" pos:end="93:64"><condition pos:start="93:13" pos:end="93:30"><expr pos:start="93:13" pos:end="93:28"><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:22"><name pos:start="93:14" pos:end="93:14">s</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:22">mb_num</name></name> <operator pos:start="93:24" pos:end="93:24">&lt;</operator> <literal type="number" pos:start="93:26" pos:end="93:27">64</literal><operator pos:start="93:28" pos:end="93:28">)</operator></expr> ?</condition><then pos:start="93:32" pos:end="93:32"> <expr pos:start="93:32" pos:end="93:32"><literal type="number" pos:start="93:32" pos:end="93:32">6</literal></expr> </then><else pos:start="93:34" pos:end="93:64">: <expr pos:start="93:36" pos:end="93:64"><operator pos:start="93:36" pos:end="93:36">(</operator><literal type="number" pos:start="93:37" pos:end="93:39">1</literal> <operator pos:start="93:39" pos:end="93:39">+</operator> <call pos:start="93:41" pos:end="93:63"><name pos:start="93:41" pos:end="93:47">av_log2</name> <argument_list pos:start="93:49" pos:end="93:63">(<argument pos:start="93:50" pos:end="93:62"><expr pos:start="93:50" pos:end="93:62"><name pos:start="93:50" pos:end="93:58"><name pos:start="93:50" pos:end="93:50">s</name><operator pos:start="93:51" pos:end="93:52">-&gt;</operator><name pos:start="93:53" pos:end="93:58">mb_num</name></name> <operator pos:start="93:60" pos:end="93:60">-</operator> <literal type="number" pos:start="93:62" pos:end="93:62">1</literal></expr></argument>)</argument_list></call><operator pos:start="93:64" pos:end="93:64">)</operator></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:83"><expr pos:start="95:9" pos:end="95:82"><name pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:22">mb_skip_run</name></name> <operator pos:start="95:24" pos:end="95:24">=</operator> <call pos:start="95:26" pos:end="95:44"><name pos:start="95:26" pos:end="95:33">get_bits</name><argument_list pos:start="95:34" pos:end="95:44">(<argument pos:start="95:35" pos:end="95:40"><expr pos:start="95:35" pos:end="95:40"><operator pos:start="95:35" pos:end="95:35">&amp;</operator><name pos:start="95:36" pos:end="95:40"><name pos:start="95:36" pos:end="95:36">s</name><operator pos:start="95:37" pos:end="95:38">-&gt;</operator><name pos:start="95:39" pos:end="95:40">gb</name></name></expr></argument>, <argument pos:start="95:43" pos:end="95:43"><expr pos:start="95:43" pos:end="95:43"><name pos:start="95:43" pos:end="95:43">i</name></expr></argument>)</argument_list></call> <operator pos:start="95:46" pos:end="95:46">-</operator> <operator pos:start="95:48" pos:end="95:48">(</operator><name pos:start="95:49" pos:end="95:55"><name pos:start="95:49" pos:end="95:49">s</name><operator pos:start="95:50" pos:end="95:51">-&gt;</operator><name pos:start="95:52" pos:end="95:55">mb_x</name></name> <operator pos:start="95:57" pos:end="95:57">+</operator> <operator pos:start="95:59" pos:end="95:59">(</operator><name pos:start="95:60" pos:end="95:66"><name pos:start="95:60" pos:end="95:60">s</name><operator pos:start="95:61" pos:end="95:62">-&gt;</operator><name pos:start="95:63" pos:end="95:66">mb_y</name></name> <operator pos:start="95:68" pos:end="95:68">*</operator> <name pos:start="95:70" pos:end="95:80"><name pos:start="95:70" pos:end="95:70">s</name><operator pos:start="95:71" pos:end="95:72">-&gt;</operator><name pos:start="95:73" pos:end="95:80">mb_width</name></name><operator pos:start="95:81" pos:end="95:81">)</operator><operator pos:start="95:82" pos:end="95:82">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="103:5">else <block pos:start="97:12" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:27">

        <expr_stmt pos:start="99:9" pos:end="99:27"><expr pos:start="99:9" pos:end="99:26"><call pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:18">skip_bits1</name><argument_list pos:start="99:19" pos:end="99:26">(<argument pos:start="99:20" pos:end="99:25"><expr pos:start="99:20" pos:end="99:25"><operator pos:start="99:20" pos:end="99:20">&amp;</operator><name pos:start="99:21" pos:end="99:25"><name pos:start="99:21" pos:end="99:21">s</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:27"><expr pos:start="101:9" pos:end="101:26"><name pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:22">mb_skip_run</name></name> <operator pos:start="101:24" pos:end="101:24">=</operator> <literal type="number" pos:start="101:26" pos:end="101:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:39"><expr pos:start="107:5" pos:end="107:38"><name pos:start="107:5" pos:end="107:16"><name pos:start="107:5" pos:end="107:5">h</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:16">slice_num</name></name> <operator pos:start="107:18" pos:end="107:18">=</operator> <call pos:start="107:20" pos:end="107:38"><name pos:start="107:20" pos:end="107:27">get_bits</name><argument_list pos:start="107:28" pos:end="107:38">(<argument pos:start="107:29" pos:end="107:34"><expr pos:start="107:29" pos:end="107:34"><operator pos:start="107:29" pos:end="107:29">&amp;</operator><name pos:start="107:30" pos:end="107:34"><name pos:start="107:30" pos:end="107:30">s</name><operator pos:start="107:31" pos:end="107:32">-&gt;</operator><name pos:start="107:33" pos:end="107:34">gb</name></name></expr></argument>, <argument pos:start="107:37" pos:end="107:37"><expr pos:start="107:37" pos:end="107:37"><literal type="number" pos:start="107:37" pos:end="107:37">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:36"><expr pos:start="109:5" pos:end="109:35"><name pos:start="109:5" pos:end="109:13"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:13">qscale</name></name> <operator pos:start="109:15" pos:end="109:15">=</operator> <call pos:start="109:17" pos:end="109:35"><name pos:start="109:17" pos:end="109:24">get_bits</name><argument_list pos:start="109:25" pos:end="109:35">(<argument pos:start="109:26" pos:end="109:31"><expr pos:start="109:26" pos:end="109:31"><operator pos:start="109:26" pos:end="109:26">&amp;</operator><name pos:start="109:27" pos:end="109:31"><name pos:start="109:27" pos:end="109:27">s</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:31">gb</name></name></expr></argument>, <argument pos:start="109:34" pos:end="109:34"><expr pos:start="109:34" pos:end="109:34"><literal type="number" pos:start="109:34" pos:end="109:34">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:42"><expr pos:start="111:5" pos:end="111:41"><name pos:start="111:5" pos:end="111:21"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:21">adaptive_quant</name></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <call pos:start="111:25" pos:end="111:41"><name pos:start="111:25" pos:end="111:33">get_bits1</name><argument_list pos:start="111:34" pos:end="111:41">(<argument pos:start="111:35" pos:end="111:40"><expr pos:start="111:35" pos:end="111:40"><operator pos:start="111:35" pos:end="111:35">&amp;</operator><name pos:start="111:36" pos:end="111:40"><name pos:start="111:36" pos:end="111:36">s</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:24">/* unknown fields */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:23"><expr pos:start="117:5" pos:end="117:22"><call pos:start="117:5" pos:end="117:22"><name pos:start="117:5" pos:end="117:14">skip_bits1</name><argument_list pos:start="117:15" pos:end="117:22">(<argument pos:start="117:16" pos:end="117:21"><expr pos:start="117:16" pos:end="117:21"><operator pos:start="117:16" pos:end="117:16">&amp;</operator><name pos:start="117:17" pos:end="117:21"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:27">(<expr pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:12">svq3</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:26">unknown_flag</name></name></expr>)</condition> <block pos:start="121:29" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:27">

        <expr_stmt pos:start="123:9" pos:end="123:27"><expr pos:start="123:9" pos:end="123:26"><call pos:start="123:9" pos:end="123:26"><name pos:start="123:9" pos:end="123:18">skip_bits1</name><argument_list pos:start="123:19" pos:end="123:26">(<argument pos:start="123:20" pos:end="123:25"><expr pos:start="123:20" pos:end="123:25"><operator pos:start="123:20" pos:end="123:20">&amp;</operator><name pos:start="123:21" pos:end="123:25"><name pos:start="123:21" pos:end="123:21">s</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:23"><expr pos:start="129:5" pos:end="129:22"><call pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:14">skip_bits1</name><argument_list pos:start="129:15" pos:end="129:22">(<argument pos:start="129:16" pos:end="129:21"><expr pos:start="129:16" pos:end="129:21"><operator pos:start="129:16" pos:end="129:16">&amp;</operator><name pos:start="129:17" pos:end="129:21"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:25"><expr pos:start="131:5" pos:end="131:24"><call pos:start="131:5" pos:end="131:24"><name pos:start="131:5" pos:end="131:13">skip_bits</name><argument_list pos:start="131:14" pos:end="131:24">(<argument pos:start="131:15" pos:end="131:20"><expr pos:start="131:15" pos:end="131:20"><operator pos:start="131:15" pos:end="131:15">&amp;</operator><name pos:start="131:16" pos:end="131:20"><name pos:start="131:16" pos:end="131:16">s</name><operator pos:start="131:17" pos:end="131:18">-&gt;</operator><name pos:start="131:19" pos:end="131:20">gb</name></name></expr></argument>, <argument pos:start="131:23" pos:end="131:23"><expr pos:start="131:23" pos:end="131:23"><literal type="number" pos:start="131:23" pos:end="131:23">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="135:5" pos:end="139:5">while <condition pos:start="135:11" pos:end="135:29">(<expr pos:start="135:12" pos:end="135:28"><call pos:start="135:12" pos:end="135:28"><name pos:start="135:12" pos:end="135:20">get_bits1</name><argument_list pos:start="135:21" pos:end="135:28">(<argument pos:start="135:22" pos:end="135:27"><expr pos:start="135:22" pos:end="135:27"><operator pos:start="135:22" pos:end="135:22">&amp;</operator><name pos:start="135:23" pos:end="135:27"><name pos:start="135:23" pos:end="135:23">s</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:31" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:29">

        <expr_stmt pos:start="137:9" pos:end="137:29"><expr pos:start="137:9" pos:end="137:28"><call pos:start="137:9" pos:end="137:28"><name pos:start="137:9" pos:end="137:17">skip_bits</name><argument_list pos:start="137:18" pos:end="137:28">(<argument pos:start="137:19" pos:end="137:24"><expr pos:start="137:19" pos:end="137:24"><operator pos:start="137:19" pos:end="137:19">&amp;</operator><name pos:start="137:20" pos:end="137:24"><name pos:start="137:20" pos:end="137:20">s</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:24">gb</name></name></expr></argument>, <argument pos:start="137:27" pos:end="137:27"><expr pos:start="137:27" pos:end="137:27"><literal type="number" pos:start="137:27" pos:end="137:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="143:5" pos:end="143:72">/* reset intra predictors and invalidate motion vector references */</comment>

    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:20">(<expr pos:start="145:9" pos:end="145:19"><name pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:15">mb_x</name></name> <operator pos:start="145:17" pos:end="145:17">&gt;</operator> <literal type="number" pos:start="145:19" pos:end="145:19">0</literal></expr>)</condition> <block pos:start="145:22" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:99">

        <expr_stmt pos:start="147:9" pos:end="147:91"><expr pos:start="147:9" pos:end="147:90"><call pos:start="147:9" pos:end="147:90"><name pos:start="147:9" pos:end="147:14">memset</name><argument_list pos:start="147:15" pos:end="147:90">(<argument pos:start="147:16" pos:end="147:67"><expr pos:start="147:16" pos:end="147:67"><name pos:start="147:16" pos:end="147:36"><name pos:start="147:16" pos:end="147:16">h</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:36">intra4x4_pred_mode</name></name><operator pos:start="147:37" pos:end="147:37">+</operator><name pos:start="147:38" pos:end="147:65"><name pos:start="147:38" pos:end="147:38">h</name><operator pos:start="147:39" pos:end="147:40">-&gt;</operator><name pos:start="147:41" pos:end="147:48">mb2br_xy</name><index pos:start="147:49" pos:end="147:65">[<expr pos:start="147:50" pos:end="147:58"><name pos:start="147:50" pos:end="147:54">mb_xy</name> <operator pos:start="147:56" pos:end="147:56">-</operator> <literal type="number" pos:start="147:58" pos:end="147:58">1</literal></expr>      ]</index></name><operator pos:start="147:66" pos:end="147:66">+</operator><literal type="number" pos:start="147:67" pos:end="147:67">3</literal></expr></argument>, <argument pos:start="147:70" pos:end="147:71"><expr pos:start="147:70" pos:end="147:71"><operator pos:start="147:70" pos:end="147:70">-</operator><literal type="number" pos:start="147:71" pos:end="147:71">1</literal></expr></argument>, <argument pos:start="147:74" pos:end="147:89"><expr pos:start="147:74" pos:end="147:89"><literal type="number" pos:start="147:74" pos:end="147:74">4</literal><operator pos:start="147:75" pos:end="147:75">*</operator><sizeof pos:start="147:76" pos:end="147:89">sizeof<argument_list pos:start="147:82" pos:end="147:89">(<argument pos:start="147:83" pos:end="147:88"><expr pos:start="147:83" pos:end="147:88"><name pos:start="147:83" pos:end="147:88">int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:99"><expr pos:start="149:9" pos:end="149:98"><call pos:start="149:9" pos:end="149:98"><name pos:start="149:9" pos:end="149:14">memset</name><argument_list pos:start="149:15" pos:end="149:98">(<argument pos:start="149:16" pos:end="149:65"><expr pos:start="149:16" pos:end="149:65"><name pos:start="149:16" pos:end="149:36"><name pos:start="149:16" pos:end="149:16">h</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:36">intra4x4_pred_mode</name></name><operator pos:start="149:37" pos:end="149:37">+</operator><name pos:start="149:38" pos:end="149:65"><name pos:start="149:38" pos:end="149:38">h</name><operator pos:start="149:39" pos:end="149:40">-&gt;</operator><name pos:start="149:41" pos:end="149:48">mb2br_xy</name><index pos:start="149:49" pos:end="149:65">[<expr pos:start="149:50" pos:end="149:64"><name pos:start="149:50" pos:end="149:54">mb_xy</name> <operator pos:start="149:56" pos:end="149:56">-</operator> <name pos:start="149:58" pos:end="149:64"><name pos:start="149:58" pos:end="149:58">s</name><operator pos:start="149:59" pos:end="149:60">-&gt;</operator><name pos:start="149:61" pos:end="149:64">mb_x</name></name></expr>]</index></name></expr></argument>  , <argument pos:start="149:70" pos:end="149:71"><expr pos:start="149:70" pos:end="149:71"><operator pos:start="149:70" pos:end="149:70">-</operator><literal type="number" pos:start="149:71" pos:end="149:71">1</literal></expr></argument>, <argument pos:start="149:74" pos:end="149:97"><expr pos:start="149:74" pos:end="149:97"><literal type="number" pos:start="149:74" pos:end="149:74">8</literal><operator pos:start="149:75" pos:end="149:75">*</operator><sizeof pos:start="149:76" pos:end="149:89">sizeof<argument_list pos:start="149:82" pos:end="149:89">(<argument pos:start="149:83" pos:end="149:88"><expr pos:start="149:83" pos:end="149:88"><name pos:start="149:83" pos:end="149:88">int8_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="149:90" pos:end="149:90">*</operator><name pos:start="149:91" pos:end="149:97"><name pos:start="149:91" pos:end="149:91">s</name><operator pos:start="149:92" pos:end="149:93">-&gt;</operator><name pos:start="149:94" pos:end="149:97">mb_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="153:5" pos:end="165:5"><if pos:start="153:5" pos:end="165:5">if <condition pos:start="153:8" pos:end="153:20">(<expr pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:15">mb_y</name></name> <operator pos:start="153:17" pos:end="153:17">&gt;</operator> <literal type="number" pos:start="153:19" pos:end="153:19">0</literal></expr>)</condition> <block pos:start="153:22" pos:end="165:5">{<block_content pos:start="155:9" pos:end="163:9">

        <expr_stmt pos:start="155:9" pos:end="155:118"><expr pos:start="155:9" pos:end="155:117"><call pos:start="155:9" pos:end="155:117"><name pos:start="155:9" pos:end="155:14">memset</name><argument_list pos:start="155:15" pos:end="155:117">(<argument pos:start="155:16" pos:end="155:70"><expr pos:start="155:16" pos:end="155:70"><name pos:start="155:16" pos:end="155:36"><name pos:start="155:16" pos:end="155:16">h</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:36">intra4x4_pred_mode</name></name><operator pos:start="155:37" pos:end="155:37">+</operator><name pos:start="155:38" pos:end="155:70"><name pos:start="155:38" pos:end="155:38">h</name><operator pos:start="155:39" pos:end="155:40">-&gt;</operator><name pos:start="155:41" pos:end="155:48">mb2br_xy</name><index pos:start="155:49" pos:end="155:70">[<expr pos:start="155:50" pos:end="155:69"><name pos:start="155:50" pos:end="155:54">mb_xy</name> <operator pos:start="155:56" pos:end="155:56">-</operator> <name pos:start="155:58" pos:end="155:69"><name pos:start="155:58" pos:end="155:58">s</name><operator pos:start="155:59" pos:end="155:60">-&gt;</operator><name pos:start="155:61" pos:end="155:69">mb_stride</name></name></expr>]</index></name></expr></argument>, <argument pos:start="155:73" pos:end="155:74"><expr pos:start="155:73" pos:end="155:74"><operator pos:start="155:73" pos:end="155:73">-</operator><literal type="number" pos:start="155:74" pos:end="155:74">1</literal></expr></argument>, <argument pos:start="155:77" pos:end="155:116"><expr pos:start="155:77" pos:end="155:116"><literal type="number" pos:start="155:77" pos:end="155:77">8</literal><operator pos:start="155:78" pos:end="155:78">*</operator><sizeof pos:start="155:79" pos:end="155:92">sizeof<argument_list pos:start="155:85" pos:end="155:92">(<argument pos:start="155:86" pos:end="155:91"><expr pos:start="155:86" pos:end="155:91"><name pos:start="155:86" pos:end="155:91">int8_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="155:93" pos:end="155:93">*</operator><operator pos:start="155:94" pos:end="155:94">(</operator><name pos:start="155:95" pos:end="155:105"><name pos:start="155:95" pos:end="155:95">s</name><operator pos:start="155:96" pos:end="155:97">-&gt;</operator><name pos:start="155:98" pos:end="155:105">mb_width</name></name> <operator pos:start="155:107" pos:end="155:107">-</operator> <name pos:start="155:109" pos:end="155:115"><name pos:start="155:109" pos:end="155:109">s</name><operator pos:start="155:110" pos:end="155:111">-&gt;</operator><name pos:start="155:112" pos:end="155:115">mb_x</name></name><operator pos:start="155:116" pos:end="155:116">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:24">(<expr pos:start="159:13" pos:end="159:23"><name pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:19">mb_x</name></name> <operator pos:start="159:21" pos:end="159:21">&gt;</operator> <literal type="number" pos:start="159:23" pos:end="159:23">0</literal></expr>)</condition> <block pos:start="159:26" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:80">

            <expr_stmt pos:start="161:13" pos:end="161:80"><expr pos:start="161:13" pos:end="161:79"><name pos:start="161:13" pos:end="161:74"><name pos:start="161:13" pos:end="161:13">h</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:33">intra4x4_pred_mode</name><index pos:start="161:34" pos:end="161:74">[<expr pos:start="161:35" pos:end="161:73"><name pos:start="161:35" pos:end="161:71"><name pos:start="161:35" pos:end="161:35">h</name><operator pos:start="161:36" pos:end="161:37">-&gt;</operator><name pos:start="161:38" pos:end="161:45">mb2br_xy</name><index pos:start="161:46" pos:end="161:71">[<expr pos:start="161:47" pos:end="161:70"><name pos:start="161:47" pos:end="161:51">mb_xy</name> <operator pos:start="161:53" pos:end="161:53">-</operator> <name pos:start="161:55" pos:end="161:66"><name pos:start="161:55" pos:end="161:55">s</name><operator pos:start="161:56" pos:end="161:57">-&gt;</operator><name pos:start="161:58" pos:end="161:66">mb_stride</name></name> <operator pos:start="161:68" pos:end="161:68">-</operator> <literal type="number" pos:start="161:70" pos:end="161:70">1</literal></expr>]</index></name><operator pos:start="161:72" pos:end="161:72">+</operator><literal type="number" pos:start="161:73" pos:end="161:73">3</literal></expr>]</index></name> <operator pos:start="161:76" pos:end="161:76">=</operator> <operator pos:start="161:78" pos:end="161:78">-</operator><literal type="number" pos:start="161:79" pos:end="161:79">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="169:5" pos:end="169:13">return <expr pos:start="169:12" pos:end="169:12"><literal type="number" pos:start="169:12" pos:end="169:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
