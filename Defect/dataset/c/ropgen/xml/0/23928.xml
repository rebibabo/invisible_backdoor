<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23928.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">qemu_cpu_kick_thread</name><parameter_list pos:start="1:33" pos:end="1:47">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:43"><name pos:start="1:34" pos:end="1:41">CPUState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="7:5" pos:end="34:0">

<cpp:ifndef pos:start="5:1" pos:end="5:14">#<cpp:directive pos:start="5:2" pos:end="5:7">ifndef</cpp:directive> <name pos:start="5:9" pos:end="5:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:53"><expr pos:start="11:5" pos:end="11:52"><name pos:start="11:5" pos:end="11:7">err</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:52"><name pos:start="11:11" pos:end="11:22">pthread_kill</name><argument_list pos:start="11:23" pos:end="11:52">(<argument pos:start="11:24" pos:end="11:42"><expr pos:start="11:24" pos:end="11:42"><name pos:start="11:24" pos:end="11:42"><name pos:start="11:24" pos:end="11:26">cpu</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:34">thread</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:42">thread</name></name></expr></argument>, <argument pos:start="11:45" pos:end="11:51"><expr pos:start="11:45" pos:end="11:51"><name pos:start="11:45" pos:end="11:51">SIG_IPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="22:0"><if pos:start="13:5" pos:end="22:0">if <condition pos:start="13:8" pos:end="13:12">(<expr pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">err</name></expr>)</condition> <block pos:start="13:14" pos:end="22:0">{<block_content pos:start="15:9" pos:end="17:16">

        <expr_stmt pos:start="15:9" pos:end="15:64"><expr pos:start="15:9" pos:end="15:63"><call pos:start="15:9" pos:end="15:63"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:63">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:37"><expr pos:start="15:25" pos:end="15:37"><literal type="string" pos:start="15:25" pos:end="15:37">"qemu:%s: %s"</literal></expr></argument>, <argument pos:start="15:40" pos:end="15:47"><expr pos:start="15:40" pos:end="15:47"><name pos:start="15:40" pos:end="15:47">__func__</name></expr></argument>, <argument pos:start="15:50" pos:end="15:62"><expr pos:start="15:50" pos:end="15:62"><call pos:start="15:50" pos:end="15:62"><name pos:start="15:50" pos:end="15:57">strerror</name><argument_list pos:start="15:58" pos:end="15:62">(<argument pos:start="15:59" pos:end="15:61"><expr pos:start="15:59" pos:end="15:61"><name pos:start="15:59" pos:end="15:61">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:16"><expr pos:start="17:9" pos:end="17:15"><call pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:12">exit</name><argument_list pos:start="17:13" pos:end="17:15">(<argument pos:start="17:14" pos:end="17:14"><expr pos:start="17:14" pos:end="17:14"><literal type="number" pos:start="17:14" pos:end="17:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="21:1" pos:end="21:5">#<cpp:directive pos:start="21:2" pos:end="21:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="21:7" pos:end="21:18">/* _WIN32 */</comment>

    <if_stmt pos:start="23:5" pos:end="34:0"><if pos:start="23:5" pos:end="34:0">if <condition pos:start="23:8" pos:end="23:31">(<expr pos:start="23:9" pos:end="23:30"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:30"><name pos:start="23:10" pos:end="23:25">qemu_cpu_is_self</name><argument_list pos:start="23:26" pos:end="23:30">(<argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:33" pos:end="34:0">{<block_content pos:start="25:9" pos:end="29:35">

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><call pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:21">SuspendThread</name><argument_list pos:start="25:22" pos:end="25:35">(<argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:25">cpu</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:34">hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:18">cpu_signal</name><argument_list pos:start="27:19" pos:end="27:21">(<argument pos:start="27:20" pos:end="27:20"><expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><call pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:20">ResumeThread</name><argument_list pos:start="29:21" pos:end="29:34">(<argument pos:start="29:22" pos:end="29:33"><expr pos:start="29:22" pos:end="29:33"><name pos:start="29:22" pos:end="29:33"><name pos:start="29:22" pos:end="29:24">cpu</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:33">hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
