<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9856.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">BlockAIOCB</name> <modifier pos:start="1:19" pos:end="1:19">*</modifier></type><name pos:start="1:20" pos:end="1:33">raw_aio_submit</name><parameter_list pos:start="1:34" pos:end="5:56">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:50">BlockDriverState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:26"><decl pos:start="3:9" pos:end="3:26"><type pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:15">int64_t</name></type> <name pos:start="3:17" pos:end="3:26">sector_num</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:40">QEMUIOVector</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">qiov</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:62">nb_sectors</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:31"><decl pos:start="5:9" pos:end="5:31"><type pos:start="5:9" pos:end="5:31"><name pos:start="5:9" pos:end="5:27">BlockCompletionFunc</name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:31">cb</name></decl></parameter>, <parameter pos:start="5:34" pos:end="5:45"><decl pos:start="5:34" pos:end="5:45"><type pos:start="5:34" pos:end="5:45"><name pos:start="5:34" pos:end="5:37">void</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:45">opaque</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:55"><decl pos:start="5:48" pos:end="5:55"><type pos:start="5:48" pos:end="5:55"><name pos:start="5:48" pos:end="5:50">int</name></type> <name pos:start="5:52" pos:end="5:55">type</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="57:1">{<block_content pos:start="9:5" pos:end="55:41">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BDRVRawState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:32">= <expr pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:24">bs</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:32">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:20"><if pos:start="13:5" pos:end="15:20">if <condition pos:start="13:8" pos:end="13:24">(<expr pos:start="13:9" pos:end="13:23"><call pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:15">fd_open</name><argument_list pos:start="13:16" pos:end="13:19">(<argument pos:start="13:17" pos:end="13:18"><expr pos:start="13:17" pos:end="13:18"><name pos:start="13:17" pos:end="13:18">bs</name></expr></argument>)</argument_list></call> <operator pos:start="13:21" pos:end="13:21">&lt;</operator> <literal type="number" pos:start="13:23" pos:end="13:23">0</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:20"><block_content pos:start="15:9" pos:end="15:20">

        <return pos:start="15:9" pos:end="15:20">return <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="29:7">/*

     * Check if the underlying device requires requests to be aligned,

     * and if the request we are trying to submit is aligned or not.

     * If this is the case tell the low-level driver that it needs

     * to copy the buffer.

     */</comment>

    <if_stmt pos:start="31:5" pos:end="49:5"><if pos:start="31:5" pos:end="49:5">if <condition pos:start="31:8" pos:end="31:27">(<expr pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:26">needs_alignment</name></name></expr>)</condition> <block pos:start="31:29" pos:end="49:5">{<block_content pos:start="33:9" pos:end="47:9">

        <if_stmt pos:start="33:9" pos:end="47:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:44">(<expr pos:start="33:13" pos:end="33:43"><operator pos:start="33:13" pos:end="33:13">!</operator><call pos:start="33:14" pos:end="33:43"><name pos:start="33:14" pos:end="33:33">bdrv_qiov_is_aligned</name><argument_list pos:start="33:34" pos:end="33:43">(<argument pos:start="33:35" pos:end="33:36"><expr pos:start="33:35" pos:end="33:36"><name pos:start="33:35" pos:end="33:36">bs</name></expr></argument>, <argument pos:start="33:39" pos:end="33:42"><expr pos:start="33:39" pos:end="33:42"><name pos:start="33:39" pos:end="33:42">qiov</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:46" pos:end="39:9">{<block_content pos:start="35:13" pos:end="38:0">

            <expr_stmt pos:start="35:13" pos:end="38:0"><expr pos:start="35:13" pos:end="35:39"><name pos:start="35:13" pos:end="35:16">type</name> <operator pos:start="35:18" pos:end="35:19">|=</operator> <name pos:start="35:21" pos:end="35:39">QEMU_AIO_MISALIGNED</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="37:1" pos:end="37:23">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

        </block_content>}</block></if> <if type="elseif" pos:start="39:11" pos:end="47:9">else if <condition pos:start="39:19" pos:end="39:30">(<expr pos:start="39:20" pos:end="39:29"><name pos:start="39:20" pos:end="39:29"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:29">use_aio</name></name></expr>)</condition> <block pos:start="39:32" pos:end="47:9">{<block_content pos:start="41:13" pos:end="46:0">

            <return pos:start="41:13" pos:end="46:0">return <expr pos:start="41:20" pos:end="43:60"><call pos:start="41:20" pos:end="43:60"><name pos:start="41:20" pos:end="41:30">laio_submit</name><argument_list pos:start="41:31" pos:end="43:60">(<argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">bs</name></expr></argument>, <argument pos:start="41:36" pos:end="41:45"><expr pos:start="41:36" pos:end="41:45"><name pos:start="41:36" pos:end="41:45"><name pos:start="41:36" pos:end="41:36">s</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:45">aio_ctx</name></name></expr></argument>, <argument pos:start="41:48" pos:end="41:52"><expr pos:start="41:48" pos:end="41:52"><name pos:start="41:48" pos:end="41:52"><name pos:start="41:48" pos:end="41:48">s</name><operator pos:start="41:49" pos:end="41:50">-&gt;</operator><name pos:start="41:51" pos:end="41:52">fd</name></name></expr></argument>, <argument pos:start="41:55" pos:end="41:64"><expr pos:start="41:55" pos:end="41:64"><name pos:start="41:55" pos:end="41:64">sector_num</name></expr></argument>, <argument pos:start="41:67" pos:end="41:70"><expr pos:start="41:67" pos:end="41:70"><name pos:start="41:67" pos:end="41:70">qiov</name></expr></argument>,

                               <argument pos:start="43:32" pos:end="43:41"><expr pos:start="43:32" pos:end="43:41"><name pos:start="43:32" pos:end="43:41">nb_sectors</name></expr></argument>, <argument pos:start="43:44" pos:end="43:45"><expr pos:start="43:44" pos:end="43:45"><name pos:start="43:44" pos:end="43:45">cb</name></expr></argument>, <argument pos:start="43:48" pos:end="43:53"><expr pos:start="43:48" pos:end="43:53"><name pos:start="43:48" pos:end="43:53">opaque</name></expr></argument>, <argument pos:start="43:56" pos:end="43:59"><expr pos:start="43:56" pos:end="43:59"><name pos:start="43:56" pos:end="43:59">type</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="53:5" pos:end="55:41">return <expr pos:start="53:12" pos:end="55:40"><call pos:start="53:12" pos:end="55:40"><name pos:start="53:12" pos:end="53:22">paio_submit</name><argument_list pos:start="53:23" pos:end="55:40">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">bs</name></expr></argument>, <argument pos:start="53:28" pos:end="53:32"><expr pos:start="53:28" pos:end="53:32"><name pos:start="53:28" pos:end="53:32"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:32">fd</name></name></expr></argument>, <argument pos:start="53:35" pos:end="53:44"><expr pos:start="53:35" pos:end="53:44"><name pos:start="53:35" pos:end="53:44">sector_num</name></expr></argument>, <argument pos:start="53:47" pos:end="53:50"><expr pos:start="53:47" pos:end="53:50"><name pos:start="53:47" pos:end="53:50">qiov</name></expr></argument>, <argument pos:start="53:53" pos:end="53:62"><expr pos:start="53:53" pos:end="53:62"><name pos:start="53:53" pos:end="53:62">nb_sectors</name></expr></argument>,

                       <argument pos:start="55:24" pos:end="55:25"><expr pos:start="55:24" pos:end="55:25"><name pos:start="55:24" pos:end="55:25">cb</name></expr></argument>, <argument pos:start="55:28" pos:end="55:33"><expr pos:start="55:28" pos:end="55:33"><name pos:start="55:28" pos:end="55:33">opaque</name></expr></argument>, <argument pos:start="55:36" pos:end="55:39"><expr pos:start="55:36" pos:end="55:39"><name pos:start="55:36" pos:end="55:39">type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
