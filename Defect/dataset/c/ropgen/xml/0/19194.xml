<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19194.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">handle_diag_308</name><parameter_list pos:start="1:21" pos:end="1:66">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:39"><name pos:start="1:22" pos:end="1:34">CPUS390XState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:49">uint64_t</name></type> <name pos:start="1:51" pos:end="1:52">r1</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:65"><decl pos:start="1:55" pos:end="1:65"><type pos:start="1:55" pos:end="1:65"><name pos:start="1:55" pos:end="1:62">uint64_t</name></type> <name pos:start="1:64" pos:end="1:65">r3</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:5">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:17">addr</name> <init pos:start="5:19" pos:end="5:34">=  <expr pos:start="5:22" pos:end="5:34"><name pos:start="5:22" pos:end="5:34"><name pos:start="5:22" pos:end="5:24">env</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:30">regs</name><index pos:start="5:31" pos:end="5:34">[<expr pos:start="5:32" pos:end="5:33"><name pos:start="5:32" pos:end="5:33">r1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:20">subcode</name> <init pos:start="7:22" pos:end="7:36">= <expr pos:start="7:24" pos:end="7:36"><name pos:start="7:24" pos:end="7:36"><name pos:start="7:24" pos:end="7:26">env</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:32">regs</name><index pos:start="7:33" pos:end="7:36">[<expr pos:start="7:34" pos:end="7:35"><name pos:start="7:34" pos:end="7:35">r3</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">IplParameterBlock</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:27">iplb</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:40">(<expr pos:start="13:9" pos:end="13:39"><name pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:11">env</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:16">psw</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:21">mask</name></name> <operator pos:start="13:23" pos:end="13:23">&amp;</operator> <name pos:start="13:25" pos:end="13:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="13:42" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:63"><expr pos:start="15:9" pos:end="15:62"><call pos:start="15:9" pos:end="15:62"><name pos:start="15:9" pos:end="15:25">program_interrupt</name><argument_list pos:start="15:26" pos:end="15:62">(<argument pos:start="15:27" pos:end="15:29"><expr pos:start="15:27" pos:end="15:29"><name pos:start="15:27" pos:end="15:29">env</name></expr></argument>, <argument pos:start="15:32" pos:end="15:45"><expr pos:start="15:32" pos:end="15:45"><name pos:start="15:32" pos:end="15:45">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="15:48" pos:end="15:61"><expr pos:start="15:48" pos:end="15:61"><name pos:start="15:48" pos:end="15:61">ILEN_LATER_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:49">(<expr pos:start="23:9" pos:end="23:48"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:16">subcode</name> <operator pos:start="23:18" pos:end="23:18">&amp;</operator> <operator pos:start="23:20" pos:end="23:20">~</operator><literal type="number" pos:start="23:21" pos:end="23:30">0x0ffffULL</literal><operator pos:start="23:31" pos:end="23:31">)</operator> <operator pos:start="23:33" pos:end="23:34">||</operator> <operator pos:start="23:36" pos:end="23:36">(</operator><name pos:start="23:37" pos:end="23:43">subcode</name> <operator pos:start="23:45" pos:end="23:45">&gt;</operator> <literal type="number" pos:start="23:47" pos:end="23:47">6</literal><operator pos:start="23:48" pos:end="23:48">)</operator></expr>)</condition> <block pos:start="23:51" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:15">

        <expr_stmt pos:start="25:9" pos:end="25:66"><expr pos:start="25:9" pos:end="25:65"><call pos:start="25:9" pos:end="25:65"><name pos:start="25:9" pos:end="25:25">program_interrupt</name><argument_list pos:start="25:26" pos:end="25:65">(<argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><name pos:start="25:27" pos:end="25:29">env</name></expr></argument>, <argument pos:start="25:32" pos:end="25:48"><expr pos:start="25:32" pos:end="25:48"><name pos:start="25:32" pos:end="25:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="25:51" pos:end="25:64"><expr pos:start="25:51" pos:end="25:64"><name pos:start="25:51" pos:end="25:64">ILEN_LATER_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="33:5" pos:end="171:5">switch <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:19">subcode</name></expr>)</condition> <block pos:start="33:22" pos:end="171:5">{<block_content pos:start="35:5" pos:end="169:14">

    <case pos:start="35:5" pos:end="35:11">case <expr pos:start="35:10" pos:end="35:10"><literal type="number" pos:start="35:10" pos:end="35:10">0</literal></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:52"><expr pos:start="37:9" pos:end="37:51"><call pos:start="37:9" pos:end="37:51"><name pos:start="37:9" pos:end="37:28">modified_clear_reset</name><argument_list pos:start="37:29" pos:end="37:51">(<argument pos:start="37:30" pos:end="37:50"><expr pos:start="37:30" pos:end="37:50"><call pos:start="37:30" pos:end="37:50"><name pos:start="37:30" pos:end="37:45">s390_env_get_cpu</name><argument_list pos:start="37:46" pos:end="37:50">(<argument pos:start="37:47" pos:end="37:49"><expr pos:start="37:47" pos:end="37:49"><name pos:start="37:47" pos:end="37:49">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:26">(<expr pos:start="39:13" pos:end="39:25"><call pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:23">tcg_enabled</name><argument_list pos:start="39:24" pos:end="39:25">()</argument_list></call></expr>)</condition> <block pos:start="39:28" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:54">

            <expr_stmt pos:start="41:13" pos:end="41:54"><expr pos:start="41:13" pos:end="41:53"><call pos:start="41:13" pos:end="41:53"><name pos:start="41:13" pos:end="41:25">cpu_loop_exit</name><argument_list pos:start="41:26" pos:end="41:53">(<argument pos:start="41:27" pos:end="41:52"><expr pos:start="41:27" pos:end="41:52"><call pos:start="41:27" pos:end="41:52"><name pos:start="41:27" pos:end="41:29">CPU</name><argument_list pos:start="41:30" pos:end="41:52">(<argument pos:start="41:31" pos:end="41:51"><expr pos:start="41:31" pos:end="41:51"><call pos:start="41:31" pos:end="41:51"><name pos:start="41:31" pos:end="41:46">s390_env_get_cpu</name><argument_list pos:start="41:47" pos:end="41:51">(<argument pos:start="41:48" pos:end="41:50"><expr pos:start="41:48" pos:end="41:50"><name pos:start="41:48" pos:end="41:50">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:11">case <expr pos:start="47:10" pos:end="47:10"><literal type="number" pos:start="47:10" pos:end="47:10">1</literal></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><call pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:25">load_normal_reset</name><argument_list pos:start="49:26" pos:end="49:48">(<argument pos:start="49:27" pos:end="49:47"><expr pos:start="49:27" pos:end="49:47"><call pos:start="49:27" pos:end="49:47"><name pos:start="49:27" pos:end="49:42">s390_env_get_cpu</name><argument_list pos:start="49:43" pos:end="49:47">(<argument pos:start="49:44" pos:end="49:46"><expr pos:start="49:44" pos:end="49:46"><name pos:start="49:44" pos:end="49:46">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:26">(<expr pos:start="51:13" pos:end="51:25"><call pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:23">tcg_enabled</name><argument_list pos:start="51:24" pos:end="51:25">()</argument_list></call></expr>)</condition> <block pos:start="51:28" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:54">

            <expr_stmt pos:start="53:13" pos:end="53:54"><expr pos:start="53:13" pos:end="53:53"><call pos:start="53:13" pos:end="53:53"><name pos:start="53:13" pos:end="53:25">cpu_loop_exit</name><argument_list pos:start="53:26" pos:end="53:53">(<argument pos:start="53:27" pos:end="53:52"><expr pos:start="53:27" pos:end="53:52"><call pos:start="53:27" pos:end="53:52"><name pos:start="53:27" pos:end="53:29">CPU</name><argument_list pos:start="53:30" pos:end="53:52">(<argument pos:start="53:31" pos:end="53:51"><expr pos:start="53:31" pos:end="53:51"><call pos:start="53:31" pos:end="53:51"><name pos:start="53:31" pos:end="53:46">s390_env_get_cpu</name><argument_list pos:start="53:47" pos:end="53:51">(<argument pos:start="53:48" pos:end="53:50"><expr pos:start="53:48" pos:end="53:50"><name pos:start="53:48" pos:end="53:50">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:11">case <expr pos:start="59:10" pos:end="59:10"><literal type="number" pos:start="59:10" pos:end="59:10">3</literal></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><call pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:26">s390_reipl_request</name><argument_list pos:start="61:27" pos:end="61:28">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:26">(<expr pos:start="63:13" pos:end="63:25"><call pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:23">tcg_enabled</name><argument_list pos:start="63:24" pos:end="63:25">()</argument_list></call></expr>)</condition> <block pos:start="63:28" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:54">

            <expr_stmt pos:start="65:13" pos:end="65:54"><expr pos:start="65:13" pos:end="65:53"><call pos:start="65:13" pos:end="65:53"><name pos:start="65:13" pos:end="65:25">cpu_loop_exit</name><argument_list pos:start="65:26" pos:end="65:53">(<argument pos:start="65:27" pos:end="65:52"><expr pos:start="65:27" pos:end="65:52"><call pos:start="65:27" pos:end="65:52"><name pos:start="65:27" pos:end="65:29">CPU</name><argument_list pos:start="65:30" pos:end="65:52">(<argument pos:start="65:31" pos:end="65:51"><expr pos:start="65:31" pos:end="65:51"><call pos:start="65:31" pos:end="65:51"><name pos:start="65:31" pos:end="65:46">s390_env_get_cpu</name><argument_list pos:start="65:47" pos:end="65:51">(<argument pos:start="65:48" pos:end="65:50"><expr pos:start="65:48" pos:end="65:50"><name pos:start="65:48" pos:end="65:50">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:11">case <expr pos:start="71:10" pos:end="71:10"><literal type="number" pos:start="71:10" pos:end="71:10">5</literal></expr>:</case>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:43">(<expr pos:start="73:13" pos:end="73:42"><operator pos:start="73:13" pos:end="73:13">(</operator><name pos:start="73:14" pos:end="73:15">r1</name> <operator pos:start="73:17" pos:end="73:17">&amp;</operator> <literal type="number" pos:start="73:19" pos:end="73:19">1</literal><operator pos:start="73:20" pos:end="73:20">)</operator> <operator pos:start="73:22" pos:end="73:23">||</operator> <operator pos:start="73:25" pos:end="73:25">(</operator><name pos:start="73:26" pos:end="73:29">addr</name> <operator pos:start="73:31" pos:end="73:31">&amp;</operator> <literal type="number" pos:start="73:33" pos:end="73:41">0x0fffULL</literal><operator pos:start="73:42" pos:end="73:42">)</operator></expr>)</condition> <block pos:start="73:45" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:19">

            <expr_stmt pos:start="75:13" pos:end="75:70"><expr pos:start="75:13" pos:end="75:69"><call pos:start="75:13" pos:end="75:69"><name pos:start="75:13" pos:end="75:29">program_interrupt</name><argument_list pos:start="75:30" pos:end="75:69">(<argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:33">env</name></expr></argument>, <argument pos:start="75:36" pos:end="75:52"><expr pos:start="75:36" pos:end="75:52"><name pos:start="75:36" pos:end="75:52">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="75:55" pos:end="75:68"><expr pos:start="75:55" pos:end="75:68"><name pos:start="75:55" pos:end="75:68">ILEN_LATER_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="83:74">(<expr pos:start="81:13" pos:end="83:73"><operator pos:start="81:13" pos:end="81:13">!</operator><call pos:start="81:14" pos:end="83:73"><name pos:start="81:14" pos:end="81:39">address_space_access_valid</name><argument_list pos:start="81:40" pos:end="83:73">(<argument pos:start="81:41" pos:end="81:61"><expr pos:start="81:41" pos:end="81:61"><operator pos:start="81:41" pos:end="81:41">&amp;</operator><name pos:start="81:42" pos:end="81:61">address_space_memory</name></expr></argument>, <argument pos:start="81:64" pos:end="81:67"><expr pos:start="81:64" pos:end="81:67"><name pos:start="81:64" pos:end="81:67">addr</name></expr></argument>,

                                        <argument pos:start="83:41" pos:end="83:65"><expr pos:start="83:41" pos:end="83:65"><sizeof pos:start="83:41" pos:end="83:65">sizeof<argument_list pos:start="83:47" pos:end="83:65">(<argument pos:start="83:48" pos:end="83:64"><expr pos:start="83:48" pos:end="83:64"><name pos:start="83:48" pos:end="83:64">IplParameterBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="83:68" pos:end="83:72"><expr pos:start="83:68" pos:end="83:72"><name pos:start="83:68" pos:end="83:72">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:76" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:19">

            <expr_stmt pos:start="85:13" pos:end="85:67"><expr pos:start="85:13" pos:end="85:66"><call pos:start="85:13" pos:end="85:66"><name pos:start="85:13" pos:end="85:29">program_interrupt</name><argument_list pos:start="85:30" pos:end="85:66">(<argument pos:start="85:31" pos:end="85:33"><expr pos:start="85:31" pos:end="85:33"><name pos:start="85:31" pos:end="85:33">env</name></expr></argument>, <argument pos:start="85:36" pos:end="85:49"><expr pos:start="85:36" pos:end="85:49"><name pos:start="85:36" pos:end="85:49">PGM_ADDRESSING</name></expr></argument>, <argument pos:start="85:52" pos:end="85:65"><expr pos:start="85:52" pos:end="85:65"><name pos:start="85:52" pos:end="85:65">ILEN_LATER_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:52"><expr pos:start="91:9" pos:end="91:51"><name pos:start="91:9" pos:end="91:12">iplb</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:51"><name pos:start="91:16" pos:end="91:24">g_malloc0</name><argument_list pos:start="91:25" pos:end="91:51">(<argument pos:start="91:26" pos:end="91:50"><expr pos:start="91:26" pos:end="91:50"><sizeof pos:start="91:26" pos:end="91:50">sizeof<argument_list pos:start="91:32" pos:end="91:50">(<argument pos:start="91:33" pos:end="91:49"><expr pos:start="91:33" pos:end="91:49"><name pos:start="91:33" pos:end="91:49">IplParameterBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:64"><expr pos:start="93:9" pos:end="93:63"><call pos:start="93:9" pos:end="93:63"><name pos:start="93:9" pos:end="93:32">cpu_physical_memory_read</name><argument_list pos:start="93:33" pos:end="93:63">(<argument pos:start="93:34" pos:end="93:37"><expr pos:start="93:34" pos:end="93:37"><name pos:start="93:34" pos:end="93:37">addr</name></expr></argument>, <argument pos:start="93:40" pos:end="93:43"><expr pos:start="93:40" pos:end="93:43"><name pos:start="93:40" pos:end="93:43">iplb</name></expr></argument>, <argument pos:start="93:46" pos:end="93:62"><expr pos:start="93:46" pos:end="93:62"><sizeof pos:start="93:46" pos:end="93:62">sizeof<argument_list pos:start="93:52" pos:end="93:62">(<argument pos:start="93:53" pos:end="93:61"><expr pos:start="93:53" pos:end="93:61"><name pos:start="93:53" pos:end="93:61"><name pos:start="93:53" pos:end="93:56">iplb</name><operator pos:start="93:57" pos:end="93:58">-&gt;</operator><name pos:start="93:59" pos:end="93:61">len</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:34">(<expr pos:start="95:13" pos:end="95:33"><operator pos:start="95:13" pos:end="95:13">!</operator><call pos:start="95:14" pos:end="95:33"><name pos:start="95:14" pos:end="95:27">iplb_valid_len</name><argument_list pos:start="95:28" pos:end="95:33">(<argument pos:start="95:29" pos:end="95:32"><expr pos:start="95:29" pos:end="95:32"><name pos:start="95:29" pos:end="95:32">iplb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:36" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:21">

            <expr_stmt pos:start="97:13" pos:end="97:52"><expr pos:start="97:13" pos:end="97:51"><name pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:15">env</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:21">regs</name><index pos:start="97:22" pos:end="97:29">[<expr pos:start="97:23" pos:end="97:28"><name pos:start="97:23" pos:end="97:24">r1</name> <operator pos:start="97:26" pos:end="97:26">+</operator> <literal type="number" pos:start="97:28" pos:end="97:28">1</literal></expr>]</index></name> <operator pos:start="97:31" pos:end="97:31">=</operator> <name pos:start="97:33" pos:end="97:51">DIAG_308_RC_INVALID</name></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:21">goto <name pos:start="99:18" pos:end="99:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:69"><expr pos:start="105:9" pos:end="105:68"><call pos:start="105:9" pos:end="105:68"><name pos:start="105:9" pos:end="105:32">cpu_physical_memory_read</name><argument_list pos:start="105:33" pos:end="105:68">(<argument pos:start="105:34" pos:end="105:37"><expr pos:start="105:34" pos:end="105:37"><name pos:start="105:34" pos:end="105:37">addr</name></expr></argument>, <argument pos:start="105:40" pos:end="105:43"><expr pos:start="105:40" pos:end="105:43"><name pos:start="105:40" pos:end="105:43">iplb</name></expr></argument>, <argument pos:start="105:46" pos:end="105:67"><expr pos:start="105:46" pos:end="105:67"><call pos:start="105:46" pos:end="105:67"><name pos:start="105:46" pos:end="105:56">be32_to_cpu</name><argument_list pos:start="105:57" pos:end="105:67">(<argument pos:start="105:58" pos:end="105:66"><expr pos:start="105:58" pos:end="105:66"><name pos:start="105:58" pos:end="105:66"><name pos:start="105:58" pos:end="105:61">iplb</name><operator pos:start="105:62" pos:end="105:63">-&gt;</operator><name pos:start="105:64" pos:end="105:66">len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:59">(<expr pos:start="109:13" pos:end="109:58"><operator pos:start="109:13" pos:end="109:13">!</operator><call pos:start="109:14" pos:end="109:33"><name pos:start="109:14" pos:end="109:27">iplb_valid_ccw</name><argument_list pos:start="109:28" pos:end="109:33">(<argument pos:start="109:29" pos:end="109:32"><expr pos:start="109:29" pos:end="109:32"><name pos:start="109:29" pos:end="109:32">iplb</name></expr></argument>)</argument_list></call> <operator pos:start="109:35" pos:end="109:36">&amp;&amp;</operator> <operator pos:start="109:38" pos:end="109:38">!</operator><call pos:start="109:39" pos:end="109:58"><name pos:start="109:39" pos:end="109:52">iplb_valid_fcp</name><argument_list pos:start="109:53" pos:end="109:58">(<argument pos:start="109:54" pos:end="109:57"><expr pos:start="109:54" pos:end="109:57"><name pos:start="109:54" pos:end="109:57">iplb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:61" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:21">

            <expr_stmt pos:start="111:13" pos:end="111:52"><expr pos:start="111:13" pos:end="111:51"><name pos:start="111:13" pos:end="111:29"><name pos:start="111:13" pos:end="111:15">env</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:21">regs</name><index pos:start="111:22" pos:end="111:29">[<expr pos:start="111:23" pos:end="111:28"><name pos:start="111:23" pos:end="111:24">r1</name> <operator pos:start="111:26" pos:end="111:26">+</operator> <literal type="number" pos:start="111:28" pos:end="111:28">1</literal></expr>]</index></name> <operator pos:start="111:31" pos:end="111:31">=</operator> <name pos:start="111:33" pos:end="111:51">DIAG_308_RC_INVALID</name></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:21">goto <name pos:start="113:18" pos:end="113:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:38"><expr pos:start="119:9" pos:end="119:37"><call pos:start="119:9" pos:end="119:37"><name pos:start="119:9" pos:end="119:31">s390_ipl_update_diag308</name><argument_list pos:start="119:32" pos:end="119:37">(<argument pos:start="119:33" pos:end="119:36"><expr pos:start="119:33" pos:end="119:36"><name pos:start="119:33" pos:end="119:36">iplb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:43"><expr pos:start="121:9" pos:end="121:42"><name pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:11">env</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:17">regs</name><index pos:start="121:18" pos:end="121:25">[<expr pos:start="121:19" pos:end="121:24"><name pos:start="121:19" pos:end="121:20">r1</name> <operator pos:start="121:22" pos:end="121:22">+</operator> <literal type="number" pos:start="121:24" pos:end="121:24">1</literal></expr>]</index></name> <operator pos:start="121:27" pos:end="121:27">=</operator> <name pos:start="121:29" pos:end="121:42">DIAG_308_RC_OK</name></expr>;</expr_stmt>

<label pos:start="123:1" pos:end="123:4"><name pos:start="123:1" pos:end="123:3">out</name>:</label>

        <expr_stmt pos:start="125:9" pos:end="125:21"><expr pos:start="125:9" pos:end="125:20"><call pos:start="125:9" pos:end="125:20"><name pos:start="125:9" pos:end="125:14">g_free</name><argument_list pos:start="125:15" pos:end="125:20">(<argument pos:start="125:16" pos:end="125:19"><expr pos:start="125:16" pos:end="125:19"><name pos:start="125:16" pos:end="125:19">iplb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:15">return;</return>

    <case pos:start="129:5" pos:end="129:11">case <expr pos:start="129:10" pos:end="129:10"><literal type="number" pos:start="129:10" pos:end="129:10">6</literal></expr>:</case>

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:43">(<expr pos:start="131:13" pos:end="131:42"><operator pos:start="131:13" pos:end="131:13">(</operator><name pos:start="131:14" pos:end="131:15">r1</name> <operator pos:start="131:17" pos:end="131:17">&amp;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">1</literal><operator pos:start="131:20" pos:end="131:20">)</operator> <operator pos:start="131:22" pos:end="131:23">||</operator> <operator pos:start="131:25" pos:end="131:25">(</operator><name pos:start="131:26" pos:end="131:29">addr</name> <operator pos:start="131:31" pos:end="131:31">&amp;</operator> <literal type="number" pos:start="131:33" pos:end="131:41">0x0fffULL</literal><operator pos:start="131:42" pos:end="131:42">)</operator></expr>)</condition> <block pos:start="131:45" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:19">

            <expr_stmt pos:start="133:13" pos:end="133:70"><expr pos:start="133:13" pos:end="133:69"><call pos:start="133:13" pos:end="133:69"><name pos:start="133:13" pos:end="133:29">program_interrupt</name><argument_list pos:start="133:30" pos:end="133:69">(<argument pos:start="133:31" pos:end="133:33"><expr pos:start="133:31" pos:end="133:33"><name pos:start="133:31" pos:end="133:33">env</name></expr></argument>, <argument pos:start="133:36" pos:end="133:52"><expr pos:start="133:36" pos:end="133:52"><name pos:start="133:36" pos:end="133:52">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="133:55" pos:end="133:68"><expr pos:start="133:55" pos:end="133:68"><name pos:start="133:55" pos:end="133:68">ILEN_LATER_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="135:13" pos:end="135:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="139:9" pos:end="147:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="141:73">(<expr pos:start="139:13" pos:end="141:72"><operator pos:start="139:13" pos:end="139:13">!</operator><call pos:start="139:14" pos:end="141:72"><name pos:start="139:14" pos:end="139:39">address_space_access_valid</name><argument_list pos:start="139:40" pos:end="141:72">(<argument pos:start="139:41" pos:end="139:61"><expr pos:start="139:41" pos:end="139:61"><operator pos:start="139:41" pos:end="139:41">&amp;</operator><name pos:start="139:42" pos:end="139:61">address_space_memory</name></expr></argument>, <argument pos:start="139:64" pos:end="139:67"><expr pos:start="139:64" pos:end="139:67"><name pos:start="139:64" pos:end="139:67">addr</name></expr></argument>,

                                        <argument pos:start="141:41" pos:end="141:65"><expr pos:start="141:41" pos:end="141:65"><sizeof pos:start="141:41" pos:end="141:65">sizeof<argument_list pos:start="141:47" pos:end="141:65">(<argument pos:start="141:48" pos:end="141:64"><expr pos:start="141:48" pos:end="141:64"><name pos:start="141:48" pos:end="141:64">IplParameterBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="141:68" pos:end="141:71"><expr pos:start="141:68" pos:end="141:71"><name pos:start="141:68" pos:end="141:71">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:75" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:19">

            <expr_stmt pos:start="143:13" pos:end="143:67"><expr pos:start="143:13" pos:end="143:66"><call pos:start="143:13" pos:end="143:66"><name pos:start="143:13" pos:end="143:29">program_interrupt</name><argument_list pos:start="143:30" pos:end="143:66">(<argument pos:start="143:31" pos:end="143:33"><expr pos:start="143:31" pos:end="143:33"><name pos:start="143:31" pos:end="143:33">env</name></expr></argument>, <argument pos:start="143:36" pos:end="143:49"><expr pos:start="143:36" pos:end="143:49"><name pos:start="143:36" pos:end="143:49">PGM_ADDRESSING</name></expr></argument>, <argument pos:start="143:52" pos:end="143:65"><expr pos:start="143:52" pos:end="143:65"><name pos:start="143:52" pos:end="143:65">ILEN_LATER_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="145:13" pos:end="145:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:35"><expr pos:start="149:9" pos:end="149:34"><name pos:start="149:9" pos:end="149:12">iplb</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:34"><name pos:start="149:16" pos:end="149:32">s390_ipl_get_iplb</name><argument_list pos:start="149:33" pos:end="149:34">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="161:9"><if pos:start="151:9" pos:end="157:9">if <condition pos:start="151:12" pos:end="151:17">(<expr pos:start="151:13" pos:end="151:16"><name pos:start="151:13" pos:end="151:16">iplb</name></expr>)</condition> <block pos:start="151:19" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:47">

            <expr_stmt pos:start="153:13" pos:end="153:74"><expr pos:start="153:13" pos:end="153:73"><call pos:start="153:13" pos:end="153:73"><name pos:start="153:13" pos:end="153:37">cpu_physical_memory_write</name><argument_list pos:start="153:38" pos:end="153:73">(<argument pos:start="153:39" pos:end="153:42"><expr pos:start="153:39" pos:end="153:42"><name pos:start="153:39" pos:end="153:42">addr</name></expr></argument>, <argument pos:start="153:45" pos:end="153:48"><expr pos:start="153:45" pos:end="153:48"><name pos:start="153:45" pos:end="153:48">iplb</name></expr></argument>, <argument pos:start="153:51" pos:end="153:72"><expr pos:start="153:51" pos:end="153:72"><call pos:start="153:51" pos:end="153:72"><name pos:start="153:51" pos:end="153:61">be32_to_cpu</name><argument_list pos:start="153:62" pos:end="153:72">(<argument pos:start="153:63" pos:end="153:71"><expr pos:start="153:63" pos:end="153:71"><name pos:start="153:63" pos:end="153:71"><name pos:start="153:63" pos:end="153:66">iplb</name><operator pos:start="153:67" pos:end="153:68">-&gt;</operator><name pos:start="153:69" pos:end="153:71">len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:47"><expr pos:start="155:13" pos:end="155:46"><name pos:start="155:13" pos:end="155:29"><name pos:start="155:13" pos:end="155:15">env</name><operator pos:start="155:16" pos:end="155:17">-&gt;</operator><name pos:start="155:18" pos:end="155:21">regs</name><index pos:start="155:22" pos:end="155:29">[<expr pos:start="155:23" pos:end="155:28"><name pos:start="155:23" pos:end="155:24">r1</name> <operator pos:start="155:26" pos:end="155:26">+</operator> <literal type="number" pos:start="155:28" pos:end="155:28">1</literal></expr>]</index></name> <operator pos:start="155:31" pos:end="155:31">=</operator> <name pos:start="155:33" pos:end="155:46">DIAG_308_RC_OK</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="161:9">else <block pos:start="157:16" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:52">

            <expr_stmt pos:start="159:13" pos:end="159:52"><expr pos:start="159:13" pos:end="159:51"><name pos:start="159:13" pos:end="159:29"><name pos:start="159:13" pos:end="159:15">env</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:21">regs</name><index pos:start="159:22" pos:end="159:29">[<expr pos:start="159:23" pos:end="159:28"><name pos:start="159:23" pos:end="159:24">r1</name> <operator pos:start="159:26" pos:end="159:26">+</operator> <literal type="number" pos:start="159:28" pos:end="159:28">1</literal></expr>]</index></name> <operator pos:start="159:31" pos:end="159:31">=</operator> <name pos:start="159:33" pos:end="159:51">DIAG_308_RC_NO_CONF</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="163:9" pos:end="163:15">return;</return>

    <default pos:start="165:5" pos:end="165:12">default:</default>

        <expr_stmt pos:start="167:9" pos:end="167:64"><expr pos:start="167:9" pos:end="167:63"><call pos:start="167:9" pos:end="167:63"><name pos:start="167:9" pos:end="167:16">hw_error</name><argument_list pos:start="167:17" pos:end="167:63">(<argument pos:start="167:18" pos:end="167:53"><expr pos:start="167:18" pos:end="167:53"><literal type="string" pos:start="167:18" pos:end="167:46">"Unhandled diag308 subcode %"</literal> <name pos:start="167:48" pos:end="167:53">PRIx64</name></expr></argument>, <argument pos:start="167:56" pos:end="167:62"><expr pos:start="167:56" pos:end="167:62"><name pos:start="167:56" pos:end="167:62">subcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
