<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10397.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:21"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">CheckasmFunc</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:29">get_func</name><parameter_list pos:start="1:30" pos:end="1:59">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">name</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:58">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:13">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CheckasmFunc</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">f</name></decl>, <decl pos:start="5:22" pos:end="5:43"><type ref="prev" pos:start="5:5" pos:end="5:18"><modifier pos:start="5:22" pos:end="5:22">*</modifier><modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:28">f_ptr</name> <init pos:start="5:30" pos:end="5:43">= <expr pos:start="5:32" pos:end="5:43"><operator pos:start="5:32" pos:end="5:32">&amp;</operator><name pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:37">state</name><operator pos:start="5:38" pos:end="5:38">.</operator><name pos:start="5:39" pos:end="5:43">funcs</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:45">/* Search the tree for a matching node */</comment>

    <while pos:start="11:5" pos:end="23:5">while <condition pos:start="11:11" pos:end="11:24">(<expr pos:start="11:12" pos:end="11:23"><operator pos:start="11:12" pos:end="11:12">(</operator><name pos:start="11:13" pos:end="11:13">f</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <operator pos:start="11:17" pos:end="11:17">*</operator><name pos:start="11:18" pos:end="11:22">f_ptr</name><operator pos:start="11:23" pos:end="11:23">)</operator></expr>)</condition> <block pos:start="11:26" pos:end="23:5">{<block_content pos:start="13:9" pos:end="21:37">

        <decl_stmt pos:start="13:9" pos:end="13:48"><decl pos:start="13:9" pos:end="13:47"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:15">cmp</name> <init pos:start="13:17" pos:end="13:47">= <expr pos:start="13:19" pos:end="13:47"><call pos:start="13:19" pos:end="13:47"><name pos:start="13:19" pos:end="13:32">cmp_func_names</name><argument_list pos:start="13:33" pos:end="13:47">(<argument pos:start="13:34" pos:end="13:37"><expr pos:start="13:34" pos:end="13:37"><name pos:start="13:34" pos:end="13:37">name</name></expr></argument>, <argument pos:start="13:40" pos:end="13:46"><expr pos:start="13:40" pos:end="13:46"><name pos:start="13:40" pos:end="13:46"><name pos:start="13:40" pos:end="13:40">f</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:46">name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="15:9" pos:end="17:21"><if pos:start="15:9" pos:end="17:21">if <condition pos:start="15:12" pos:end="15:17">(<expr pos:start="15:13" pos:end="15:16"><operator pos:start="15:13" pos:end="15:13">!</operator><name pos:start="15:14" pos:end="15:16">cmp</name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:21"><block_content pos:start="17:13" pos:end="17:21">

            <return pos:start="17:13" pos:end="17:21">return <expr pos:start="17:20" pos:end="17:20"><name pos:start="17:20" pos:end="17:20">f</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:37"><expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:13">f_ptr</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <operator pos:start="21:17" pos:end="21:17">&amp;</operator><name pos:start="21:18" pos:end="21:36"><name pos:start="21:18" pos:end="21:18">f</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:25">child</name><index pos:start="21:26" pos:end="21:36">[<expr pos:start="21:27" pos:end="21:35"><operator pos:start="21:27" pos:end="21:27">(</operator><name pos:start="21:28" pos:end="21:30">cmp</name> <operator pos:start="21:32" pos:end="21:32">&gt;</operator> <literal type="number" pos:start="21:34" pos:end="21:34">0</literal><operator pos:start="21:35" pos:end="21:35">)</operator></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="27:5" pos:end="27:54">/* Allocate and insert a new node into the tree */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:64"><expr pos:start="29:5" pos:end="29:63"><name pos:start="29:5" pos:end="29:5">f</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:14">f_ptr</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:63"><name pos:start="29:18" pos:end="29:32">checkasm_malloc</name><argument_list pos:start="29:33" pos:end="29:63">(<argument pos:start="29:34" pos:end="29:62"><expr pos:start="29:34" pos:end="29:62"><sizeof pos:start="29:34" pos:end="29:53">sizeof<argument_list pos:start="29:40" pos:end="29:53">(<argument pos:start="29:41" pos:end="29:52"><expr pos:start="29:41" pos:end="29:52"><name pos:start="29:41" pos:end="29:52">CheckasmFunc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="29:55" pos:end="29:55">+</operator> <name pos:start="29:57" pos:end="29:62">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><call pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:10">memcpy</name><argument_list pos:start="31:11" pos:end="31:35">(<argument pos:start="31:12" pos:end="31:18"><expr pos:start="31:12" pos:end="31:18"><name pos:start="31:12" pos:end="31:18"><name pos:start="31:12" pos:end="31:12">f</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:18">name</name></name></expr></argument>, <argument pos:start="31:21" pos:end="31:24"><expr pos:start="31:21" pos:end="31:24"><name pos:start="31:21" pos:end="31:24">name</name></expr></argument>, <argument pos:start="31:27" pos:end="31:34"><expr pos:start="31:27" pos:end="31:34"><name pos:start="31:27" pos:end="31:32">length</name><operator pos:start="31:33" pos:end="31:33">+</operator><literal type="number" pos:start="31:34" pos:end="31:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="35:5" pos:end="35:13">return <expr pos:start="35:12" pos:end="35:12"><name pos:start="35:12" pos:end="35:12">f</name></expr>;</return>

</block_content>}</block></function>
</unit>
