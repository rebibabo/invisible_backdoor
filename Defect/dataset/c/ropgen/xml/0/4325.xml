<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4325.c" pos:tabs="8"><function pos:start="1:1" pos:end="449:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_subframe</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">WMAProDecodeCtx</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="449:1">{<block_content pos:start="5:5" pos:end="447:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">offset</name> <init pos:start="5:16" pos:end="5:37">= <expr pos:start="5:18" pos:end="5:37"><name pos:start="5:18" pos:end="5:37"><name pos:start="5:18" pos:end="5:18">s</name><operator pos:start="5:19" pos:end="5:20">-&gt;</operator><name pos:start="5:21" pos:end="5:37">samples_per_frame</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">subframe_len</name> <init pos:start="7:22" pos:end="7:43">= <expr pos:start="7:24" pos:end="7:43"><name pos:start="7:24" pos:end="7:43"><name pos:start="7:24" pos:end="7:24">s</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:43">samples_per_frame</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:65"><decl pos:start="11:5" pos:end="11:64"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">total_samples</name>   <init pos:start="11:25" pos:end="11:64">= <expr pos:start="11:27" pos:end="11:64"><name pos:start="11:27" pos:end="11:46"><name pos:start="11:27" pos:end="11:27">s</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:46">samples_per_frame</name></name> <operator pos:start="11:48" pos:end="11:48">*</operator> <name pos:start="11:50" pos:end="11:64"><name pos:start="11:50" pos:end="11:50">s</name><operator pos:start="11:51" pos:end="11:52">-&gt;</operator><name pos:start="11:53" pos:end="11:64">num_channels</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:23">transmit_coeffs</name> <init pos:start="13:25" pos:end="13:27">= <expr pos:start="13:27" pos:end="13:27"><literal type="number" pos:start="13:27" pos:end="13:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:28">cur_subwoofer_cutoff</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:22">subframe_offset</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <call pos:start="19:26" pos:end="19:47"><name pos:start="19:26" pos:end="19:39">get_bits_count</name><argument_list pos:start="19:40" pos:end="19:47">(<argument pos:start="19:41" pos:end="19:46"><expr pos:start="19:41" pos:end="19:46"><operator pos:start="19:41" pos:end="19:41">&amp;</operator><name pos:start="19:42" pos:end="19:46"><name pos:start="19:42" pos:end="19:42">s</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="23:5" pos:end="29:6">/** reset channel context and find the next block offset and size

        == the next block of the channel with the smallest number of

        decoded samples

    */</comment>

    <for pos:start="31:5" pos:end="45:5">for <control pos:start="31:9" pos:end="31:41">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:36"><expr pos:start="31:17" pos:end="31:35"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:35"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:35">num_channels</name></name></expr>;</condition> <incr pos:start="31:38" pos:end="31:40"><expr pos:start="31:38" pos:end="31:40"><name pos:start="31:38" pos:end="31:38">i</name><operator pos:start="31:39" pos:end="31:40">++</operator></expr></incr>)</control> <block pos:start="31:43" pos:end="45:5">{<block_content pos:start="33:9" pos:end="43:9">

        <expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">channel</name><index pos:start="33:19" pos:end="33:21">[<expr pos:start="33:20" pos:end="33:20"><name pos:start="33:20" pos:end="33:20">i</name></expr>]</index></name><operator pos:start="33:22" pos:end="33:22">.</operator><name pos:start="33:23" pos:end="33:29">grouped</name> <operator pos:start="33:31" pos:end="33:31">=</operator> <literal type="number" pos:start="33:33" pos:end="33:33">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:51">(<expr pos:start="35:13" pos:end="35:50"><name pos:start="35:13" pos:end="35:18">offset</name> <operator pos:start="35:20" pos:end="35:20">&gt;</operator> <name pos:start="35:22" pos:end="35:34"><name pos:start="35:22" pos:end="35:22">s</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:31">channel</name><index pos:start="35:32" pos:end="35:34">[<expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">i</name></expr>]</index></name><operator pos:start="35:35" pos:end="35:35">.</operator><name pos:start="35:36" pos:end="35:50">decoded_samples</name></expr>)</condition> <block pos:start="35:53" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:71">

            <expr_stmt pos:start="37:13" pos:end="37:51"><expr pos:start="37:13" pos:end="37:50"><name pos:start="37:13" pos:end="37:18">offset</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:34"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">channel</name><index pos:start="37:32" pos:end="37:34">[<expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">i</name></expr>]</index></name><operator pos:start="37:35" pos:end="37:35">.</operator><name pos:start="37:36" pos:end="37:50">decoded_samples</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="41:71"><expr pos:start="39:13" pos:end="41:70"><name pos:start="39:13" pos:end="39:24">subframe_len</name> <operator pos:start="39:26" pos:end="39:26">=</operator>

                <name pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:26">channel</name><index pos:start="41:27" pos:end="41:29">[<expr pos:start="41:28" pos:end="41:28"><name pos:start="41:28" pos:end="41:28">i</name></expr>]</index></name><operator pos:start="41:30" pos:end="41:30">.</operator><name pos:start="41:31" pos:end="41:70"><name pos:start="41:31" pos:end="41:42">subframe_len</name><index pos:start="41:43" pos:end="41:70">[<expr pos:start="41:44" pos:end="41:69"><name pos:start="41:44" pos:end="41:56"><name pos:start="41:44" pos:end="41:44">s</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:53">channel</name><index pos:start="41:54" pos:end="41:56">[<expr pos:start="41:55" pos:end="41:55"><name pos:start="41:55" pos:end="41:55">i</name></expr>]</index></name><operator pos:start="41:57" pos:end="41:57">.</operator><name pos:start="41:58" pos:end="41:69">cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="49:5" pos:end="51:81"><expr pos:start="49:5" pos:end="51:80"><call pos:start="49:5" pos:end="51:80"><name pos:start="49:5" pos:end="49:11">av_dlog</name><argument_list pos:start="49:12" pos:end="51:80">(<argument pos:start="49:13" pos:end="49:20"><expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:20">avctx</name></name></expr></argument>,

            <argument pos:start="51:13" pos:end="51:57"><expr pos:start="51:13" pos:end="51:57"><literal type="string" pos:start="51:13" pos:end="51:57">"processing subframe with offset %i len %i\n"</literal></expr></argument>, <argument pos:start="51:60" pos:end="51:65"><expr pos:start="51:60" pos:end="51:65"><name pos:start="51:60" pos:end="51:65">offset</name></expr></argument>, <argument pos:start="51:68" pos:end="51:79"><expr pos:start="51:68" pos:end="51:79"><name pos:start="51:68" pos:end="51:79">subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="55:5" pos:end="55:70">/** get a list of all channels that contain the estimated block */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:32">channels_for_cur_subframe</name></name> <operator pos:start="57:34" pos:end="57:34">=</operator> <literal type="number" pos:start="57:36" pos:end="57:36">0</literal></expr>;</expr_stmt>

    <for pos:start="59:5" pos:end="87:5">for <control pos:start="59:9" pos:end="59:41">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:36"><expr pos:start="59:17" pos:end="59:35"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:35"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:35">num_channels</name></name></expr>;</condition> <incr pos:start="59:38" pos:end="59:40"><expr pos:start="59:38" pos:end="59:40"><name pos:start="59:38" pos:end="59:38">i</name><operator pos:start="59:39" pos:end="59:40">++</operator></expr></incr>)</control> <block pos:start="59:43" pos:end="87:5">{<block_content pos:start="61:9" pos:end="85:9">

        <decl_stmt pos:start="61:9" pos:end="61:60"><decl pos:start="61:9" pos:end="61:59"><type pos:start="61:9" pos:end="61:17"><specifier pos:start="61:9" pos:end="61:13">const</specifier> <name pos:start="61:15" pos:end="61:17">int</name></type> <name pos:start="61:19" pos:end="61:30">cur_subframe</name> <init pos:start="61:32" pos:end="61:59">= <expr pos:start="61:34" pos:end="61:59"><name pos:start="61:34" pos:end="61:46"><name pos:start="61:34" pos:end="61:34">s</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:43">channel</name><index pos:start="61:44" pos:end="61:46">[<expr pos:start="61:45" pos:end="61:45"><name pos:start="61:45" pos:end="61:45">i</name></expr>]</index></name><operator pos:start="61:47" pos:end="61:47">.</operator><name pos:start="61:48" pos:end="61:59">cur_subframe</name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="doxygen" pos:start="63:9" pos:end="63:50">/** substract already processed samples */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:55"><expr pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:21">total_samples</name> <operator pos:start="65:23" pos:end="65:24">-=</operator> <name pos:start="65:26" pos:end="65:38"><name pos:start="65:26" pos:end="65:26">s</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:35">channel</name><index pos:start="65:36" pos:end="65:38">[<expr pos:start="65:37" pos:end="65:37"><name pos:start="65:37" pos:end="65:37">i</name></expr>]</index></name><operator pos:start="65:39" pos:end="65:39">.</operator><name pos:start="65:40" pos:end="65:54">decoded_samples</name></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="69:9" pos:end="69:79">/** and count if there are multiple subframes that match our profile */</comment>

        <if_stmt pos:start="71:9" pos:end="85:9"><if pos:start="71:9" pos:end="85:9">if <condition pos:start="71:12" pos:end="73:69">(<expr pos:start="71:13" pos:end="73:68"><name pos:start="71:13" pos:end="71:18">offset</name> <operator pos:start="71:20" pos:end="71:21">==</operator> <name pos:start="71:23" pos:end="71:35"><name pos:start="71:23" pos:end="71:23">s</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:32">channel</name><index pos:start="71:33" pos:end="71:35">[<expr pos:start="71:34" pos:end="71:34"><name pos:start="71:34" pos:end="71:34">i</name></expr>]</index></name><operator pos:start="71:36" pos:end="71:36">.</operator><name pos:start="71:37" pos:end="71:51">decoded_samples</name> <operator pos:start="71:53" pos:end="71:54">&amp;&amp;</operator>

            <name pos:start="73:13" pos:end="73:24">subframe_len</name> <operator pos:start="73:26" pos:end="73:27">==</operator> <name pos:start="73:29" pos:end="73:41"><name pos:start="73:29" pos:end="73:29">s</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:38">channel</name><index pos:start="73:39" pos:end="73:41">[<expr pos:start="73:40" pos:end="73:40"><name pos:start="73:40" pos:end="73:40">i</name></expr>]</index></name><operator pos:start="73:42" pos:end="73:42">.</operator><name pos:start="73:43" pos:end="73:68"><name pos:start="73:43" pos:end="73:54">subframe_len</name><index pos:start="73:55" pos:end="73:68">[<expr pos:start="73:56" pos:end="73:67"><name pos:start="73:56" pos:end="73:67">cur_subframe</name></expr>]</index></name></expr>)</condition> <block pos:start="73:71" pos:end="85:9">{<block_content pos:start="75:13" pos:end="83:43">

            <expr_stmt pos:start="75:13" pos:end="75:70"><expr pos:start="75:13" pos:end="75:69"><name pos:start="75:13" pos:end="75:25">total_samples</name> <operator pos:start="75:27" pos:end="75:28">-=</operator> <name pos:start="75:30" pos:end="75:42"><name pos:start="75:30" pos:end="75:30">s</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:39">channel</name><index pos:start="75:40" pos:end="75:42">[<expr pos:start="75:41" pos:end="75:41"><name pos:start="75:41" pos:end="75:41">i</name></expr>]</index></name><operator pos:start="75:43" pos:end="75:43">.</operator><name pos:start="75:44" pos:end="75:69"><name pos:start="75:44" pos:end="75:55">subframe_len</name><index pos:start="75:56" pos:end="75:69">[<expr pos:start="75:57" pos:end="75:68"><name pos:start="75:57" pos:end="75:68">cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="79:57"><expr pos:start="77:13" pos:end="79:56"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:22">channel</name><index pos:start="77:23" pos:end="77:25">[<expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">i</name></expr>]</index></name><operator pos:start="77:26" pos:end="77:26">.</operator><name pos:start="77:27" pos:end="77:41">decoded_samples</name> <operator pos:start="77:43" pos:end="77:44">+=</operator>

                <name pos:start="79:17" pos:end="79:29"><name pos:start="79:17" pos:end="79:17">s</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:26">channel</name><index pos:start="79:27" pos:end="79:29">[<expr pos:start="79:28" pos:end="79:28"><name pos:start="79:28" pos:end="79:28">i</name></expr>]</index></name><operator pos:start="79:30" pos:end="79:30">.</operator><name pos:start="79:31" pos:end="79:56"><name pos:start="79:31" pos:end="79:42">subframe_len</name><index pos:start="79:43" pos:end="79:56">[<expr pos:start="79:44" pos:end="79:55"><name pos:start="79:44" pos:end="79:55">cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:82"><expr pos:start="81:13" pos:end="81:81"><name pos:start="81:13" pos:end="81:77"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:47">channel_indexes_for_cur_subframe</name><index pos:start="81:48" pos:end="81:77">[<expr pos:start="81:49" pos:end="81:76"><name pos:start="81:49" pos:end="81:76"><name pos:start="81:49" pos:end="81:49">s</name><operator pos:start="81:50" pos:end="81:51">-&gt;</operator><name pos:start="81:52" pos:end="81:76">channels_for_cur_subframe</name></name></expr>]</index></name> <operator pos:start="81:79" pos:end="81:79">=</operator> <name pos:start="81:81" pos:end="81:81">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:43"><expr pos:start="83:13" pos:end="83:42"><operator pos:start="83:13" pos:end="83:14">++</operator><name pos:start="83:15" pos:end="83:42"><name pos:start="83:15" pos:end="83:15">s</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:42">channels_for_cur_subframe</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="91:5" pos:end="93:26">/** check if the frame will be complete after processing the

        estimated block */</comment>

    <if_stmt pos:start="95:5" pos:end="97:36"><if pos:start="95:5" pos:end="97:36">if <condition pos:start="95:8" pos:end="95:23">(<expr pos:start="95:9" pos:end="95:22"><operator pos:start="95:9" pos:end="95:9">!</operator><name pos:start="95:10" pos:end="95:22">total_samples</name></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:36"><block_content pos:start="97:9" pos:end="97:36">

        <expr_stmt pos:start="97:9" pos:end="97:36"><expr pos:start="97:9" pos:end="97:35"><name pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:31">parsed_all_subframes</name></name> <operator pos:start="97:33" pos:end="97:33">=</operator> <literal type="number" pos:start="97:35" pos:end="97:35">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





    <expr_stmt pos:start="103:5" pos:end="105:42"><expr pos:start="103:5" pos:end="105:41"><call pos:start="103:5" pos:end="105:41"><name pos:start="103:5" pos:end="103:11">av_dlog</name><argument_list pos:start="103:12" pos:end="105:41">(<argument pos:start="103:13" pos:end="103:20"><expr pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:20">avctx</name></name></expr></argument>, <argument pos:start="103:23" pos:end="103:57"><expr pos:start="103:23" pos:end="103:57"><literal type="string" pos:start="103:23" pos:end="103:57">"subframe is part of %i channels\n"</literal></expr></argument>,

            <argument pos:start="105:13" pos:end="105:40"><expr pos:start="105:13" pos:end="105:40"><name pos:start="105:13" pos:end="105:40"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:40">channels_for_cur_subframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="109:5" pos:end="109:67">/** calculate number of scale factor bands and their offsets */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:70"><expr pos:start="111:5" pos:end="111:69"><name pos:start="111:5" pos:end="111:16"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:16">table_idx</name></name>         <operator pos:start="111:26" pos:end="111:26">=</operator> <call pos:start="111:28" pos:end="111:69"><name pos:start="111:28" pos:end="111:34">av_log2</name><argument_list pos:start="111:35" pos:end="111:69">(<argument pos:start="111:36" pos:end="111:68"><expr pos:start="111:36" pos:end="111:68"><name pos:start="111:36" pos:end="111:55"><name pos:start="111:36" pos:end="111:36">s</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:55">samples_per_frame</name></name><operator pos:start="111:56" pos:end="111:56">/</operator><name pos:start="111:57" pos:end="111:68">subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:52"><expr pos:start="113:5" pos:end="113:51"><name pos:start="113:5" pos:end="113:16"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:16">num_bands</name></name>         <operator pos:start="113:26" pos:end="113:26">=</operator> <name pos:start="113:28" pos:end="113:51"><name pos:start="113:28" pos:end="113:28">s</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:37">num_sfb</name><index pos:start="113:38" pos:end="113:51">[<expr pos:start="113:39" pos:end="113:50"><name pos:start="113:39" pos:end="113:50"><name pos:start="113:39" pos:end="113:39">s</name><operator pos:start="113:40" pos:end="113:41">-&gt;</operator><name pos:start="113:42" pos:end="113:50">table_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:56"><expr pos:start="115:5" pos:end="115:55"><name pos:start="115:5" pos:end="115:22"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:22">cur_sfb_offsets</name></name>   <operator pos:start="115:26" pos:end="115:26">=</operator> <name pos:start="115:28" pos:end="115:55"><name pos:start="115:28" pos:end="115:28">s</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:41">sfb_offsets</name><index pos:start="115:42" pos:end="115:55">[<expr pos:start="115:43" pos:end="115:54"><name pos:start="115:43" pos:end="115:54"><name pos:start="115:43" pos:end="115:43">s</name><operator pos:start="115:44" pos:end="115:45">-&gt;</operator><name pos:start="115:46" pos:end="115:54">table_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:62"><expr pos:start="117:5" pos:end="117:61"><name pos:start="117:5" pos:end="117:24">cur_subwoofer_cutoff</name> <operator pos:start="117:26" pos:end="117:26">=</operator> <name pos:start="117:28" pos:end="117:61"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:47">subwoofer_cutoffs</name><index pos:start="117:48" pos:end="117:61">[<expr pos:start="117:49" pos:end="117:60"><name pos:start="117:49" pos:end="117:60"><name pos:start="117:49" pos:end="117:49">s</name><operator pos:start="117:50" pos:end="117:51">-&gt;</operator><name pos:start="117:52" pos:end="117:60">table_idx</name></name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="121:5" pos:end="121:57">/** configure the decoder for the current subframe */</comment>

    <for pos:start="123:5" pos:end="133:5">for <control pos:start="123:9" pos:end="123:54">(<init pos:start="123:10" pos:end="123:15"><expr pos:start="123:10" pos:end="123:14"><name pos:start="123:10" pos:end="123:10">i</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <literal type="number" pos:start="123:14" pos:end="123:14">0</literal></expr>;</init> <condition pos:start="123:17" pos:end="123:49"><expr pos:start="123:17" pos:end="123:48"><name pos:start="123:17" pos:end="123:17">i</name> <operator pos:start="123:19" pos:end="123:19">&lt;</operator> <name pos:start="123:21" pos:end="123:48"><name pos:start="123:21" pos:end="123:21">s</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:48">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="123:51" pos:end="123:53"><expr pos:start="123:51" pos:end="123:53"><name pos:start="123:51" pos:end="123:51">i</name><operator pos:start="123:52" pos:end="123:53">++</operator></expr></incr>)</control> <block pos:start="123:56" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:60">

        <decl_stmt pos:start="125:9" pos:end="125:55"><decl pos:start="125:9" pos:end="125:54"><type pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">int</name></type> <name pos:start="125:13" pos:end="125:13">c</name> <init pos:start="125:15" pos:end="125:54">= <expr pos:start="125:17" pos:end="125:54"><name pos:start="125:17" pos:end="125:54"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:51">channel_indexes_for_cur_subframe</name><index pos:start="125:52" pos:end="125:54">[<expr pos:start="125:53" pos:end="125:53"><name pos:start="125:53" pos:end="125:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="129:9" pos:end="131:60"><expr pos:start="129:9" pos:end="131:59"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:18">channel</name><index pos:start="129:19" pos:end="129:21">[<expr pos:start="129:20" pos:end="129:20"><name pos:start="129:20" pos:end="129:20">c</name></expr>]</index></name><operator pos:start="129:22" pos:end="129:22">.</operator><name pos:start="129:23" pos:end="129:28">coeffs</name> <operator pos:start="129:30" pos:end="129:30">=</operator> <operator pos:start="129:32" pos:end="129:32">&amp;</operator><name pos:start="129:33" pos:end="129:45"><name pos:start="129:33" pos:end="129:33">s</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:42">channel</name><index pos:start="129:43" pos:end="129:45">[<expr pos:start="129:44" pos:end="129:44"><name pos:start="129:44" pos:end="129:44">c</name></expr>]</index></name><operator pos:start="129:46" pos:end="129:46">.</operator><name pos:start="129:47" pos:end="131:59"><name pos:start="129:47" pos:end="129:49">out</name><index pos:start="129:50" pos:end="131:59">[<expr pos:start="129:51" pos:end="131:58"><operator pos:start="129:51" pos:end="129:51">(</operator><name pos:start="129:52" pos:end="129:71"><name pos:start="129:52" pos:end="129:52">s</name><operator pos:start="129:53" pos:end="129:54">-&gt;</operator><name pos:start="129:55" pos:end="129:71">samples_per_frame</name></name> <operator pos:start="129:73" pos:end="129:74">&gt;&gt;</operator> <literal type="number" pos:start="129:76" pos:end="129:76">1</literal><operator pos:start="129:77" pos:end="129:77">)</operator>

                                                  <operator pos:start="131:51" pos:end="131:51">+</operator> <name pos:start="131:53" pos:end="131:58">offset</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="137:5" pos:end="137:35"><expr pos:start="137:5" pos:end="137:34"><name pos:start="137:5" pos:end="137:19"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:19">subframe_len</name></name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:34">subframe_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:50"><expr pos:start="139:5" pos:end="139:49"><name pos:start="139:5" pos:end="139:14"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:14">esc_len</name></name> <operator pos:start="139:16" pos:end="139:16">=</operator> <call pos:start="139:18" pos:end="139:45"><name pos:start="139:18" pos:end="139:24">av_log2</name><argument_list pos:start="139:25" pos:end="139:45">(<argument pos:start="139:26" pos:end="139:44"><expr pos:start="139:26" pos:end="139:44"><name pos:start="139:26" pos:end="139:40"><name pos:start="139:26" pos:end="139:26">s</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:40">subframe_len</name></name> <operator pos:start="139:42" pos:end="139:42">-</operator> <literal type="number" pos:start="139:44" pos:end="139:44">1</literal></expr></argument>)</argument_list></call> <operator pos:start="139:47" pos:end="139:47">+</operator> <literal type="number" pos:start="139:49" pos:end="139:49">1</literal></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="143:5" pos:end="143:38">/** skip extended header if any */</comment>

    <if_stmt pos:start="145:5" pos:end="175:5"><if pos:start="145:5" pos:end="175:5">if <condition pos:start="145:8" pos:end="145:26">(<expr pos:start="145:9" pos:end="145:25"><call pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:17">get_bits1</name><argument_list pos:start="145:18" pos:end="145:25">(<argument pos:start="145:19" pos:end="145:24"><expr pos:start="145:19" pos:end="145:24"><operator pos:start="145:19" pos:end="145:19">&amp;</operator><name pos:start="145:20" pos:end="145:24"><name pos:start="145:20" pos:end="145:20">s</name><operator pos:start="145:21" pos:end="145:22">-&gt;</operator><name pos:start="145:23" pos:end="145:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:28" pos:end="175:5">{<block_content pos:start="147:9" pos:end="173:9">

        <decl_stmt pos:start="147:9" pos:end="147:26"><decl pos:start="147:9" pos:end="147:25"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:25">num_fill_bits</name></decl>;</decl_stmt>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:51">(<expr pos:start="149:13" pos:end="149:50"><operator pos:start="149:13" pos:end="149:13">!</operator><operator pos:start="149:14" pos:end="149:14">(</operator><name pos:start="149:15" pos:end="149:27">num_fill_bits</name> <operator pos:start="149:29" pos:end="149:29">=</operator> <call pos:start="149:31" pos:end="149:49"><name pos:start="149:31" pos:end="149:38">get_bits</name><argument_list pos:start="149:39" pos:end="149:49">(<argument pos:start="149:40" pos:end="149:45"><expr pos:start="149:40" pos:end="149:45"><operator pos:start="149:40" pos:end="149:40">&amp;</operator><name pos:start="149:41" pos:end="149:45"><name pos:start="149:41" pos:end="149:41">s</name><operator pos:start="149:42" pos:end="149:43">-&gt;</operator><name pos:start="149:44" pos:end="149:45">gb</name></name></expr></argument>, <argument pos:start="149:48" pos:end="149:48"><expr pos:start="149:48" pos:end="149:48"><literal type="number" pos:start="149:48" pos:end="149:48">2</literal></expr></argument>)</argument_list></call><operator pos:start="149:50" pos:end="149:50">)</operator></expr>)</condition> <block pos:start="149:53" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:54">

            <decl_stmt pos:start="151:13" pos:end="151:42"><decl pos:start="151:13" pos:end="151:41"><type pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">int</name></type> <name pos:start="151:17" pos:end="151:19">len</name> <init pos:start="151:21" pos:end="151:41">= <expr pos:start="151:23" pos:end="151:41"><call pos:start="151:23" pos:end="151:41"><name pos:start="151:23" pos:end="151:30">get_bits</name><argument_list pos:start="151:31" pos:end="151:41">(<argument pos:start="151:32" pos:end="151:37"><expr pos:start="151:32" pos:end="151:37"><operator pos:start="151:32" pos:end="151:32">&amp;</operator><name pos:start="151:33" pos:end="151:37"><name pos:start="151:33" pos:end="151:33">s</name><operator pos:start="151:34" pos:end="151:35">-&gt;</operator><name pos:start="151:36" pos:end="151:37">gb</name></name></expr></argument>, <argument pos:start="151:40" pos:end="151:40"><expr pos:start="151:40" pos:end="151:40"><literal type="number" pos:start="151:40" pos:end="151:40">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:54"><expr pos:start="153:13" pos:end="153:53"><name pos:start="153:13" pos:end="153:25">num_fill_bits</name> <operator pos:start="153:27" pos:end="153:27">=</operator> <call pos:start="153:29" pos:end="153:49"><name pos:start="153:29" pos:end="153:36">get_bits</name><argument_list pos:start="153:37" pos:end="153:49">(<argument pos:start="153:38" pos:end="153:43"><expr pos:start="153:38" pos:end="153:43"><operator pos:start="153:38" pos:end="153:38">&amp;</operator><name pos:start="153:39" pos:end="153:43"><name pos:start="153:39" pos:end="153:39">s</name><operator pos:start="153:40" pos:end="153:41">-&gt;</operator><name pos:start="153:42" pos:end="153:43">gb</name></name></expr></argument>, <argument pos:start="153:46" pos:end="153:48"><expr pos:start="153:46" pos:end="153:48"><name pos:start="153:46" pos:end="153:48">len</name></expr></argument>)</argument_list></call> <operator pos:start="153:51" pos:end="153:51">+</operator> <literal type="number" pos:start="153:53" pos:end="153:53">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="159:9" pos:end="173:9"><if pos:start="159:9" pos:end="173:9">if <condition pos:start="159:12" pos:end="159:31">(<expr pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:25">num_fill_bits</name> <operator pos:start="159:27" pos:end="159:28">&gt;=</operator> <literal type="number" pos:start="159:30" pos:end="159:30">0</literal></expr>)</condition> <block pos:start="159:33" pos:end="173:9">{<block_content pos:start="161:13" pos:end="171:50">

            <if_stmt pos:start="161:13" pos:end="167:13"><if pos:start="161:13" pos:end="167:13">if <condition pos:start="161:16" pos:end="161:75">(<expr pos:start="161:17" pos:end="161:74"><call pos:start="161:17" pos:end="161:38"><name pos:start="161:17" pos:end="161:30">get_bits_count</name><argument_list pos:start="161:31" pos:end="161:38">(<argument pos:start="161:32" pos:end="161:37"><expr pos:start="161:32" pos:end="161:37"><operator pos:start="161:32" pos:end="161:32">&amp;</operator><name pos:start="161:33" pos:end="161:37"><name pos:start="161:33" pos:end="161:33">s</name><operator pos:start="161:34" pos:end="161:35">-&gt;</operator><name pos:start="161:36" pos:end="161:37">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="161:40" pos:end="161:40">+</operator> <name pos:start="161:42" pos:end="161:54">num_fill_bits</name> <operator pos:start="161:56" pos:end="161:56">&gt;</operator> <name pos:start="161:58" pos:end="161:74"><name pos:start="161:58" pos:end="161:58">s</name><operator pos:start="161:59" pos:end="161:60">-&gt;</operator><name pos:start="161:61" pos:end="161:74">num_saved_bits</name></name></expr>)</condition> <block pos:start="161:77" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:43">

                <expr_stmt pos:start="163:17" pos:end="163:80"><expr pos:start="163:17" pos:end="163:79"><call pos:start="163:17" pos:end="163:79"><name pos:start="163:17" pos:end="163:22">av_log</name><argument_list pos:start="163:23" pos:end="163:79">(<argument pos:start="163:24" pos:end="163:31"><expr pos:start="163:24" pos:end="163:31"><name pos:start="163:24" pos:end="163:31"><name pos:start="163:24" pos:end="163:24">s</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:31">avctx</name></name></expr></argument>, <argument pos:start="163:34" pos:end="163:45"><expr pos:start="163:34" pos:end="163:45"><name pos:start="163:34" pos:end="163:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:48" pos:end="163:78"><expr pos:start="163:48" pos:end="163:78"><literal type="string" pos:start="163:48" pos:end="163:78">"invalid number of fill bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="165:17" pos:end="165:43">return <expr pos:start="165:24" pos:end="165:42"><name pos:start="165:24" pos:end="165:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="171:13" pos:end="171:50"><expr pos:start="171:13" pos:end="171:49"><call pos:start="171:13" pos:end="171:49"><name pos:start="171:13" pos:end="171:26">skip_bits_long</name><argument_list pos:start="171:27" pos:end="171:49">(<argument pos:start="171:28" pos:end="171:33"><expr pos:start="171:28" pos:end="171:33"><operator pos:start="171:28" pos:end="171:28">&amp;</operator><name pos:start="171:29" pos:end="171:33"><name pos:start="171:29" pos:end="171:29">s</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:33">gb</name></name></expr></argument>, <argument pos:start="171:36" pos:end="171:48"><expr pos:start="171:36" pos:end="171:48"><name pos:start="171:36" pos:end="171:48">num_fill_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="179:5" pos:end="179:53">/** no idea for what the following bit is used */</comment>

    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="181:26">(<expr pos:start="181:9" pos:end="181:25"><call pos:start="181:9" pos:end="181:25"><name pos:start="181:9" pos:end="181:17">get_bits1</name><argument_list pos:start="181:18" pos:end="181:25">(<argument pos:start="181:19" pos:end="181:24"><expr pos:start="181:19" pos:end="181:24"><operator pos:start="181:19" pos:end="181:19">&amp;</operator><name pos:start="181:20" pos:end="181:24"><name pos:start="181:20" pos:end="181:20">s</name><operator pos:start="181:21" pos:end="181:22">-&gt;</operator><name pos:start="181:23" pos:end="181:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:28" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:35">

        <expr_stmt pos:start="183:9" pos:end="183:62"><expr pos:start="183:9" pos:end="183:61"><call pos:start="183:9" pos:end="183:61"><name pos:start="183:9" pos:end="183:29">av_log_ask_for_sample</name><argument_list pos:start="183:30" pos:end="183:61">(<argument pos:start="183:31" pos:end="183:38"><expr pos:start="183:31" pos:end="183:38"><name pos:start="183:31" pos:end="183:38"><name pos:start="183:31" pos:end="183:31">s</name><operator pos:start="183:32" pos:end="183:33">-&gt;</operator><name pos:start="183:34" pos:end="183:38">avctx</name></name></expr></argument>, <argument pos:start="183:41" pos:end="183:60"><expr pos:start="183:41" pos:end="183:60"><literal type="string" pos:start="183:41" pos:end="183:60">"reserved bit set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="185:9" pos:end="185:35">return <expr pos:start="185:16" pos:end="185:34"><name pos:start="185:16" pos:end="185:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="193:5" pos:end="195:35"><if pos:start="193:5" pos:end="195:35">if <condition pos:start="193:8" pos:end="193:40">(<expr pos:start="193:9" pos:end="193:39"><call pos:start="193:9" pos:end="193:35"><name pos:start="193:9" pos:end="193:32">decode_channel_transform</name><argument_list pos:start="193:33" pos:end="193:35">(<argument pos:start="193:34" pos:end="193:34"><expr pos:start="193:34" pos:end="193:34"><name pos:start="193:34" pos:end="193:34">s</name></expr></argument>)</argument_list></call> <operator pos:start="193:37" pos:end="193:37">&lt;</operator> <literal type="number" pos:start="193:39" pos:end="193:39">0</literal></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:35"><block_content pos:start="195:9" pos:end="195:35">

        <return pos:start="195:9" pos:end="195:35">return <expr pos:start="195:16" pos:end="195:34"><name pos:start="195:16" pos:end="195:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>





    <for pos:start="201:5" pos:end="209:5">for <control pos:start="201:9" pos:end="201:54">(<init pos:start="201:10" pos:end="201:15"><expr pos:start="201:10" pos:end="201:14"><name pos:start="201:10" pos:end="201:10">i</name> <operator pos:start="201:12" pos:end="201:12">=</operator> <literal type="number" pos:start="201:14" pos:end="201:14">0</literal></expr>;</init> <condition pos:start="201:17" pos:end="201:49"><expr pos:start="201:17" pos:end="201:48"><name pos:start="201:17" pos:end="201:17">i</name> <operator pos:start="201:19" pos:end="201:19">&lt;</operator> <name pos:start="201:21" pos:end="201:48"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:48">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="201:51" pos:end="201:53"><expr pos:start="201:51" pos:end="201:53"><name pos:start="201:51" pos:end="201:51">i</name><operator pos:start="201:52" pos:end="201:53">++</operator></expr></incr>)</control> <block pos:start="201:56" pos:end="209:5">{<block_content pos:start="203:9" pos:end="207:32">

        <decl_stmt pos:start="203:9" pos:end="203:55"><decl pos:start="203:9" pos:end="203:54"><type pos:start="203:9" pos:end="203:11"><name pos:start="203:9" pos:end="203:11">int</name></type> <name pos:start="203:13" pos:end="203:13">c</name> <init pos:start="203:15" pos:end="203:54">= <expr pos:start="203:17" pos:end="203:54"><name pos:start="203:17" pos:end="203:54"><name pos:start="203:17" pos:end="203:17">s</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:51">channel_indexes_for_cur_subframe</name><index pos:start="203:52" pos:end="203:54">[<expr pos:start="203:53" pos:end="203:53"><name pos:start="203:53" pos:end="203:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="205:9" pos:end="207:32"><if pos:start="205:9" pos:end="207:32">if <condition pos:start="205:12" pos:end="205:63">(<expr pos:start="205:13" pos:end="205:62"><operator pos:start="205:13" pos:end="205:13">(</operator><name pos:start="205:14" pos:end="205:26"><name pos:start="205:14" pos:end="205:14">s</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:23">channel</name><index pos:start="205:24" pos:end="205:26">[<expr pos:start="205:25" pos:end="205:25"><name pos:start="205:25" pos:end="205:25">c</name></expr>]</index></name><operator pos:start="205:27" pos:end="205:27">.</operator><name pos:start="205:28" pos:end="205:41">transmit_coefs</name> <operator pos:start="205:43" pos:end="205:43">=</operator> <call pos:start="205:45" pos:end="205:61"><name pos:start="205:45" pos:end="205:53">get_bits1</name><argument_list pos:start="205:54" pos:end="205:61">(<argument pos:start="205:55" pos:end="205:60"><expr pos:start="205:55" pos:end="205:60"><operator pos:start="205:55" pos:end="205:55">&amp;</operator><name pos:start="205:56" pos:end="205:60"><name pos:start="205:56" pos:end="205:56">s</name><operator pos:start="205:57" pos:end="205:58">-&gt;</operator><name pos:start="205:59" pos:end="205:60">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="205:62" pos:end="205:62">)</operator></expr>)</condition><block type="pseudo" pos:start="207:13" pos:end="207:32"><block_content pos:start="207:13" pos:end="207:32">

            <expr_stmt pos:start="207:13" pos:end="207:32"><expr pos:start="207:13" pos:end="207:31"><name pos:start="207:13" pos:end="207:27">transmit_coeffs</name> <operator pos:start="207:29" pos:end="207:29">=</operator> <literal type="number" pos:start="207:31" pos:end="207:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="213:5" pos:end="321:5"><if pos:start="213:5" pos:end="321:5">if <condition pos:start="213:8" pos:end="213:24">(<expr pos:start="213:9" pos:end="213:23"><name pos:start="213:9" pos:end="213:23">transmit_coeffs</name></expr>)</condition> <block pos:start="213:26" pos:end="321:5">{<block_content pos:start="215:9" pos:end="319:39">

        <decl_stmt pos:start="215:9" pos:end="215:17"><decl pos:start="215:9" pos:end="215:16"><type pos:start="215:9" pos:end="215:11"><name pos:start="215:9" pos:end="215:11">int</name></type> <name pos:start="215:13" pos:end="215:16">step</name></decl>;</decl_stmt>

        <decl_stmt pos:start="217:9" pos:end="217:54"><decl pos:start="217:9" pos:end="217:53"><type pos:start="217:9" pos:end="217:11"><name pos:start="217:9" pos:end="217:11">int</name></type> <name pos:start="217:13" pos:end="217:22">quant_step</name> <init pos:start="217:24" pos:end="217:53">= <expr pos:start="217:26" pos:end="217:53"><literal type="number" pos:start="217:26" pos:end="217:27">90</literal> <operator pos:start="217:29" pos:end="217:29">*</operator> <name pos:start="217:31" pos:end="217:48"><name pos:start="217:31" pos:end="217:31">s</name><operator pos:start="217:32" pos:end="217:33">-&gt;</operator><name pos:start="217:34" pos:end="217:48">bits_per_sample</name></name> <operator pos:start="217:50" pos:end="217:51">&gt;&gt;</operator> <literal type="number" pos:start="217:53" pos:end="217:53">4</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" format="doxygen" pos:start="221:9" pos:end="221:57">/** decode number of vector coded coefficients */</comment>

        <if_stmt pos:start="223:9" pos:end="245:9"><if pos:start="223:9" pos:end="235:9">if <condition pos:start="223:12" pos:end="223:61">(<expr pos:start="223:13" pos:end="223:60"><operator pos:start="223:13" pos:end="223:13">(</operator><name pos:start="223:14" pos:end="223:39"><name pos:start="223:14" pos:end="223:14">s</name><operator pos:start="223:15" pos:end="223:16">-&gt;</operator><name pos:start="223:17" pos:end="223:39">transmit_num_vec_coeffs</name></name> <operator pos:start="223:41" pos:end="223:41">=</operator> <call pos:start="223:43" pos:end="223:59"><name pos:start="223:43" pos:end="223:51">get_bits1</name><argument_list pos:start="223:52" pos:end="223:59">(<argument pos:start="223:53" pos:end="223:58"><expr pos:start="223:53" pos:end="223:58"><operator pos:start="223:53" pos:end="223:53">&amp;</operator><name pos:start="223:54" pos:end="223:58"><name pos:start="223:54" pos:end="223:54">s</name><operator pos:start="223:55" pos:end="223:56">-&gt;</operator><name pos:start="223:57" pos:end="223:58">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="223:60" pos:end="223:60">)</operator></expr>)</condition> <block pos:start="223:63" pos:end="235:9">{<block_content pos:start="225:13" pos:end="233:13">

            <decl_stmt pos:start="225:13" pos:end="225:64"><decl pos:start="225:13" pos:end="225:63"><type pos:start="225:13" pos:end="225:15"><name pos:start="225:13" pos:end="225:15">int</name></type> <name pos:start="225:17" pos:end="225:24">num_bits</name> <init pos:start="225:26" pos:end="225:63">= <expr pos:start="225:28" pos:end="225:63"><call pos:start="225:28" pos:end="225:59"><name pos:start="225:28" pos:end="225:34">av_log2</name><argument_list pos:start="225:35" pos:end="225:59">(<argument pos:start="225:36" pos:end="225:58"><expr pos:start="225:36" pos:end="225:58"><operator pos:start="225:36" pos:end="225:36">(</operator><name pos:start="225:37" pos:end="225:51"><name pos:start="225:37" pos:end="225:37">s</name><operator pos:start="225:38" pos:end="225:39">-&gt;</operator><name pos:start="225:40" pos:end="225:51">subframe_len</name></name> <operator pos:start="225:53" pos:end="225:53">+</operator> <literal type="number" pos:start="225:55" pos:end="225:55">3</literal><operator pos:start="225:56" pos:end="225:56">)</operator><operator pos:start="225:57" pos:end="225:57">/</operator><literal type="number" pos:start="225:58" pos:end="225:58">4</literal></expr></argument>)</argument_list></call> <operator pos:start="225:61" pos:end="225:61">+</operator> <literal type="number" pos:start="225:63" pos:end="225:63">1</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="227:13" pos:end="233:13">for <control pos:start="227:17" pos:end="227:62">(<init pos:start="227:18" pos:end="227:23"><expr pos:start="227:18" pos:end="227:22"><name pos:start="227:18" pos:end="227:18">i</name> <operator pos:start="227:20" pos:end="227:20">=</operator> <literal type="number" pos:start="227:22" pos:end="227:22">0</literal></expr>;</init> <condition pos:start="227:25" pos:end="227:57"><expr pos:start="227:25" pos:end="227:56"><name pos:start="227:25" pos:end="227:25">i</name> <operator pos:start="227:27" pos:end="227:27">&lt;</operator> <name pos:start="227:29" pos:end="227:56"><name pos:start="227:29" pos:end="227:29">s</name><operator pos:start="227:30" pos:end="227:31">-&gt;</operator><name pos:start="227:32" pos:end="227:56">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="227:59" pos:end="227:61"><expr pos:start="227:59" pos:end="227:61"><name pos:start="227:59" pos:end="227:59">i</name><operator pos:start="227:60" pos:end="227:61">++</operator></expr></incr>)</control> <block pos:start="227:64" pos:end="233:13">{<block_content pos:start="229:17" pos:end="231:79">

                <decl_stmt pos:start="229:17" pos:end="229:63"><decl pos:start="229:17" pos:end="229:62"><type pos:start="229:17" pos:end="229:19"><name pos:start="229:17" pos:end="229:19">int</name></type> <name pos:start="229:21" pos:end="229:21">c</name> <init pos:start="229:23" pos:end="229:62">= <expr pos:start="229:25" pos:end="229:62"><name pos:start="229:25" pos:end="229:62"><name pos:start="229:25" pos:end="229:25">s</name><operator pos:start="229:26" pos:end="229:27">-&gt;</operator><name pos:start="229:28" pos:end="229:59">channel_indexes_for_cur_subframe</name><index pos:start="229:60" pos:end="229:62">[<expr pos:start="229:61" pos:end="229:61"><name pos:start="229:61" pos:end="229:61">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:79"><expr pos:start="231:17" pos:end="231:78"><name pos:start="231:17" pos:end="231:29"><name pos:start="231:17" pos:end="231:17">s</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:26">channel</name><index pos:start="231:27" pos:end="231:29">[<expr pos:start="231:28" pos:end="231:28"><name pos:start="231:28" pos:end="231:28">c</name></expr>]</index></name><operator pos:start="231:30" pos:end="231:30">.</operator><name pos:start="231:31" pos:end="231:44">num_vec_coeffs</name> <operator pos:start="231:46" pos:end="231:46">=</operator> <call pos:start="231:48" pos:end="231:73"><name pos:start="231:48" pos:end="231:55">get_bits</name><argument_list pos:start="231:56" pos:end="231:73">(<argument pos:start="231:57" pos:end="231:62"><expr pos:start="231:57" pos:end="231:62"><operator pos:start="231:57" pos:end="231:57">&amp;</operator><name pos:start="231:58" pos:end="231:62"><name pos:start="231:58" pos:end="231:58">s</name><operator pos:start="231:59" pos:end="231:60">-&gt;</operator><name pos:start="231:61" pos:end="231:62">gb</name></name></expr></argument>, <argument pos:start="231:65" pos:end="231:72"><expr pos:start="231:65" pos:end="231:72"><name pos:start="231:65" pos:end="231:72">num_bits</name></expr></argument>)</argument_list></call> <operator pos:start="231:75" pos:end="231:76">&lt;&lt;</operator> <literal type="number" pos:start="231:78" pos:end="231:78">2</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="235:11" pos:end="245:9">else <block pos:start="235:16" pos:end="245:9">{<block_content pos:start="237:13" pos:end="243:13">

            <for pos:start="237:13" pos:end="243:13">for <control pos:start="237:17" pos:end="237:62">(<init pos:start="237:18" pos:end="237:23"><expr pos:start="237:18" pos:end="237:22"><name pos:start="237:18" pos:end="237:18">i</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <literal type="number" pos:start="237:22" pos:end="237:22">0</literal></expr>;</init> <condition pos:start="237:25" pos:end="237:57"><expr pos:start="237:25" pos:end="237:56"><name pos:start="237:25" pos:end="237:25">i</name> <operator pos:start="237:27" pos:end="237:27">&lt;</operator> <name pos:start="237:29" pos:end="237:56"><name pos:start="237:29" pos:end="237:29">s</name><operator pos:start="237:30" pos:end="237:31">-&gt;</operator><name pos:start="237:32" pos:end="237:56">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="237:59" pos:end="237:61"><expr pos:start="237:59" pos:end="237:61"><name pos:start="237:59" pos:end="237:59">i</name><operator pos:start="237:60" pos:end="237:61">++</operator></expr></incr>)</control> <block pos:start="237:64" pos:end="243:13">{<block_content pos:start="239:17" pos:end="241:63">

                <decl_stmt pos:start="239:17" pos:end="239:63"><decl pos:start="239:17" pos:end="239:62"><type pos:start="239:17" pos:end="239:19"><name pos:start="239:17" pos:end="239:19">int</name></type> <name pos:start="239:21" pos:end="239:21">c</name> <init pos:start="239:23" pos:end="239:62">= <expr pos:start="239:25" pos:end="239:62"><name pos:start="239:25" pos:end="239:62"><name pos:start="239:25" pos:end="239:25">s</name><operator pos:start="239:26" pos:end="239:27">-&gt;</operator><name pos:start="239:28" pos:end="239:59">channel_indexes_for_cur_subframe</name><index pos:start="239:60" pos:end="239:62">[<expr pos:start="239:61" pos:end="239:61"><name pos:start="239:61" pos:end="239:61">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:63"><expr pos:start="241:17" pos:end="241:62"><name pos:start="241:17" pos:end="241:29"><name pos:start="241:17" pos:end="241:17">s</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:26">channel</name><index pos:start="241:27" pos:end="241:29">[<expr pos:start="241:28" pos:end="241:28"><name pos:start="241:28" pos:end="241:28">c</name></expr>]</index></name><operator pos:start="241:30" pos:end="241:30">.</operator><name pos:start="241:31" pos:end="241:44">num_vec_coeffs</name> <operator pos:start="241:46" pos:end="241:46">=</operator> <name pos:start="241:48" pos:end="241:62"><name pos:start="241:48" pos:end="241:48">s</name><operator pos:start="241:49" pos:end="241:50">-&gt;</operator><name pos:start="241:51" pos:end="241:62">subframe_len</name></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <comment type="block" format="doxygen" pos:start="247:9" pos:end="247:39">/** decode quantization step */</comment>

        <expr_stmt pos:start="249:9" pos:end="249:36"><expr pos:start="249:9" pos:end="249:35"><name pos:start="249:9" pos:end="249:12">step</name> <operator pos:start="249:14" pos:end="249:14">=</operator> <call pos:start="249:16" pos:end="249:35"><name pos:start="249:16" pos:end="249:24">get_sbits</name><argument_list pos:start="249:25" pos:end="249:35">(<argument pos:start="249:26" pos:end="249:31"><expr pos:start="249:26" pos:end="249:31"><operator pos:start="249:26" pos:end="249:26">&amp;</operator><name pos:start="249:27" pos:end="249:31"><name pos:start="249:27" pos:end="249:27">s</name><operator pos:start="249:28" pos:end="249:29">-&gt;</operator><name pos:start="249:30" pos:end="249:31">gb</name></name></expr></argument>, <argument pos:start="249:34" pos:end="249:34"><expr pos:start="249:34" pos:end="249:34"><literal type="number" pos:start="249:34" pos:end="249:34">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:27"><expr pos:start="251:9" pos:end="251:26"><name pos:start="251:9" pos:end="251:18">quant_step</name> <operator pos:start="251:20" pos:end="251:21">+=</operator> <name pos:start="251:23" pos:end="251:26">step</name></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="269:9"><if pos:start="253:9" pos:end="269:9">if <condition pos:start="253:12" pos:end="253:38">(<expr pos:start="253:13" pos:end="253:37"><name pos:start="253:13" pos:end="253:16">step</name> <operator pos:start="253:18" pos:end="253:19">==</operator> <operator pos:start="253:21" pos:end="253:21">-</operator><literal type="number" pos:start="253:22" pos:end="253:23">32</literal> <operator pos:start="253:25" pos:end="253:26">||</operator> <name pos:start="253:28" pos:end="253:31">step</name> <operator pos:start="253:33" pos:end="253:34">==</operator> <literal type="number" pos:start="253:36" pos:end="253:37">31</literal></expr>)</condition> <block pos:start="253:40" pos:end="269:9">{<block_content pos:start="255:13" pos:end="267:57">

            <decl_stmt pos:start="255:13" pos:end="255:46"><decl pos:start="255:13" pos:end="255:45"><type pos:start="255:13" pos:end="255:21"><specifier pos:start="255:13" pos:end="255:17">const</specifier> <name pos:start="255:19" pos:end="255:21">int</name></type> <name pos:start="255:23" pos:end="255:26">sign</name> <init pos:start="255:28" pos:end="255:45">= <expr pos:start="255:30" pos:end="255:45"><operator pos:start="255:30" pos:end="255:30">(</operator><name pos:start="255:31" pos:end="255:34">step</name> <operator pos:start="255:36" pos:end="255:37">==</operator> <literal type="number" pos:start="255:39" pos:end="255:40">31</literal><operator pos:start="255:41" pos:end="255:41">)</operator> <operator pos:start="255:43" pos:end="255:43">-</operator> <literal type="number" pos:start="255:45" pos:end="255:45">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="257:13" pos:end="257:26"><decl pos:start="257:13" pos:end="257:25"><type pos:start="257:13" pos:end="257:15"><name pos:start="257:13" pos:end="257:15">int</name></type> <name pos:start="257:17" pos:end="257:21">quant</name> <init pos:start="257:23" pos:end="257:25">= <expr pos:start="257:25" pos:end="257:25"><literal type="number" pos:start="257:25" pos:end="257:25">0</literal></expr></init></decl>;</decl_stmt>

            <while pos:start="259:13" pos:end="265:13">while <condition pos:start="259:19" pos:end="261:54">(<expr pos:start="259:20" pos:end="261:53"><call pos:start="259:20" pos:end="259:41"><name pos:start="259:20" pos:end="259:33">get_bits_count</name><argument_list pos:start="259:34" pos:end="259:41">(<argument pos:start="259:35" pos:end="259:40"><expr pos:start="259:35" pos:end="259:40"><operator pos:start="259:35" pos:end="259:35">&amp;</operator><name pos:start="259:36" pos:end="259:40"><name pos:start="259:36" pos:end="259:36">s</name><operator pos:start="259:37" pos:end="259:38">-&gt;</operator><name pos:start="259:39" pos:end="259:40">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="259:43" pos:end="259:43">+</operator> <literal type="number" pos:start="259:45" pos:end="259:45">5</literal> <operator pos:start="259:47" pos:end="259:47">&lt;</operator> <name pos:start="259:49" pos:end="259:65"><name pos:start="259:49" pos:end="259:49">s</name><operator pos:start="259:50" pos:end="259:51">-&gt;</operator><name pos:start="259:52" pos:end="259:65">num_saved_bits</name></name> <operator pos:start="259:67" pos:end="259:68">&amp;&amp;</operator>

                   <operator pos:start="261:20" pos:end="261:20">(</operator><name pos:start="261:21" pos:end="261:24">step</name> <operator pos:start="261:26" pos:end="261:26">=</operator> <call pos:start="261:28" pos:end="261:46"><name pos:start="261:28" pos:end="261:35">get_bits</name><argument_list pos:start="261:36" pos:end="261:46">(<argument pos:start="261:37" pos:end="261:42"><expr pos:start="261:37" pos:end="261:42"><operator pos:start="261:37" pos:end="261:37">&amp;</operator><name pos:start="261:38" pos:end="261:42"><name pos:start="261:38" pos:end="261:38">s</name><operator pos:start="261:39" pos:end="261:40">-&gt;</operator><name pos:start="261:41" pos:end="261:42">gb</name></name></expr></argument>, <argument pos:start="261:45" pos:end="261:45"><expr pos:start="261:45" pos:end="261:45"><literal type="number" pos:start="261:45" pos:end="261:45">5</literal></expr></argument>)</argument_list></call><operator pos:start="261:47" pos:end="261:47">)</operator> <operator pos:start="261:49" pos:end="261:50">==</operator> <literal type="number" pos:start="261:52" pos:end="261:53">31</literal></expr>)</condition> <block pos:start="261:56" pos:end="265:13">{<block_content pos:start="263:17" pos:end="263:28">

                <expr_stmt pos:start="263:17" pos:end="263:28"><expr pos:start="263:17" pos:end="263:27"><name pos:start="263:17" pos:end="263:21">quant</name> <operator pos:start="263:23" pos:end="263:24">+=</operator> <literal type="number" pos:start="263:26" pos:end="263:27">31</literal></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="267:13" pos:end="267:57"><expr pos:start="267:13" pos:end="267:56"><name pos:start="267:13" pos:end="267:22">quant_step</name> <operator pos:start="267:24" pos:end="267:25">+=</operator> <operator pos:start="267:27" pos:end="267:27">(</operator><operator pos:start="267:28" pos:end="267:28">(</operator><name pos:start="267:29" pos:end="267:33">quant</name> <operator pos:start="267:35" pos:end="267:35">+</operator> <name pos:start="267:37" pos:end="267:40">step</name><operator pos:start="267:41" pos:end="267:41">)</operator> <operator pos:start="267:43" pos:end="267:43">^</operator> <name pos:start="267:45" pos:end="267:48">sign</name><operator pos:start="267:49" pos:end="267:49">)</operator> <operator pos:start="267:51" pos:end="267:51">-</operator> <name pos:start="267:53" pos:end="267:56">sign</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="271:9" pos:end="275:9"><if pos:start="271:9" pos:end="275:9">if <condition pos:start="271:12" pos:end="271:27">(<expr pos:start="271:13" pos:end="271:26"><name pos:start="271:13" pos:end="271:22">quant_step</name> <operator pos:start="271:24" pos:end="271:24">&lt;</operator> <literal type="number" pos:start="271:26" pos:end="271:26">0</literal></expr>)</condition> <block pos:start="271:29" pos:end="275:9">{<block_content pos:start="273:13" pos:end="273:68">

            <expr_stmt pos:start="273:13" pos:end="273:68"><expr pos:start="273:13" pos:end="273:67"><call pos:start="273:13" pos:end="273:67"><name pos:start="273:13" pos:end="273:18">av_log</name><argument_list pos:start="273:19" pos:end="273:67">(<argument pos:start="273:20" pos:end="273:27"><expr pos:start="273:20" pos:end="273:27"><name pos:start="273:20" pos:end="273:27"><name pos:start="273:20" pos:end="273:20">s</name><operator pos:start="273:21" pos:end="273:22">-&gt;</operator><name pos:start="273:23" pos:end="273:27">avctx</name></name></expr></argument>, <argument pos:start="273:30" pos:end="273:41"><expr pos:start="273:30" pos:end="273:41"><name pos:start="273:30" pos:end="273:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="273:44" pos:end="273:66"><expr pos:start="273:44" pos:end="273:66"><literal type="string" pos:start="273:44" pos:end="273:66">"negative quant step\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" format="doxygen" pos:start="279:9" pos:end="279:67">/** decode quantization step modifiers for every channel */</comment>



        <if_stmt pos:start="283:9" pos:end="311:9"><if pos:start="283:9" pos:end="287:9">if <condition pos:start="283:12" pos:end="283:46">(<expr pos:start="283:13" pos:end="283:45"><name pos:start="283:13" pos:end="283:40"><name pos:start="283:13" pos:end="283:13">s</name><operator pos:start="283:14" pos:end="283:15">-&gt;</operator><name pos:start="283:16" pos:end="283:40">channels_for_cur_subframe</name></name> <operator pos:start="283:42" pos:end="283:43">==</operator> <literal type="number" pos:start="283:45" pos:end="283:45">1</literal></expr>)</condition> <block pos:start="283:48" pos:end="287:9">{<block_content pos:start="285:13" pos:end="285:87">

            <expr_stmt pos:start="285:13" pos:end="285:87"><expr pos:start="285:13" pos:end="285:86"><name pos:start="285:13" pos:end="285:62"><name pos:start="285:13" pos:end="285:13">s</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:22">channel</name><index pos:start="285:23" pos:end="285:62">[<expr pos:start="285:24" pos:end="285:61"><name pos:start="285:24" pos:end="285:61"><name pos:start="285:24" pos:end="285:24">s</name><operator pos:start="285:25" pos:end="285:26">-&gt;</operator><name pos:start="285:27" pos:end="285:58">channel_indexes_for_cur_subframe</name><index pos:start="285:59" pos:end="285:61">[<expr pos:start="285:60" pos:end="285:60"><literal type="number" pos:start="285:60" pos:end="285:60">0</literal></expr>]</index></name></expr>]</index></name><operator pos:start="285:63" pos:end="285:63">.</operator><name pos:start="285:64" pos:end="285:73">quant_step</name> <operator pos:start="285:75" pos:end="285:75">=</operator> <name pos:start="285:77" pos:end="285:86">quant_step</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="287:11" pos:end="311:9">else <block pos:start="287:16" pos:end="311:9">{<block_content pos:start="289:13" pos:end="309:13">

            <decl_stmt pos:start="289:13" pos:end="289:51"><decl pos:start="289:13" pos:end="289:50"><type pos:start="289:13" pos:end="289:15"><name pos:start="289:13" pos:end="289:15">int</name></type> <name pos:start="289:17" pos:end="289:28">modifier_len</name> <init pos:start="289:30" pos:end="289:50">= <expr pos:start="289:32" pos:end="289:50"><call pos:start="289:32" pos:end="289:50"><name pos:start="289:32" pos:end="289:39">get_bits</name><argument_list pos:start="289:40" pos:end="289:50">(<argument pos:start="289:41" pos:end="289:46"><expr pos:start="289:41" pos:end="289:46"><operator pos:start="289:41" pos:end="289:41">&amp;</operator><name pos:start="289:42" pos:end="289:46"><name pos:start="289:42" pos:end="289:42">s</name><operator pos:start="289:43" pos:end="289:44">-&gt;</operator><name pos:start="289:45" pos:end="289:46">gb</name></name></expr></argument>, <argument pos:start="289:49" pos:end="289:49"><expr pos:start="289:49" pos:end="289:49"><literal type="number" pos:start="289:49" pos:end="289:49">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="291:13" pos:end="309:13">for <control pos:start="291:17" pos:end="291:62">(<init pos:start="291:18" pos:end="291:23"><expr pos:start="291:18" pos:end="291:22"><name pos:start="291:18" pos:end="291:18">i</name> <operator pos:start="291:20" pos:end="291:20">=</operator> <literal type="number" pos:start="291:22" pos:end="291:22">0</literal></expr>;</init> <condition pos:start="291:25" pos:end="291:57"><expr pos:start="291:25" pos:end="291:56"><name pos:start="291:25" pos:end="291:25">i</name> <operator pos:start="291:27" pos:end="291:27">&lt;</operator> <name pos:start="291:29" pos:end="291:56"><name pos:start="291:29" pos:end="291:29">s</name><operator pos:start="291:30" pos:end="291:31">-&gt;</operator><name pos:start="291:32" pos:end="291:56">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="291:59" pos:end="291:61"><expr pos:start="291:59" pos:end="291:61"><name pos:start="291:59" pos:end="291:59">i</name><operator pos:start="291:60" pos:end="291:61">++</operator></expr></incr>)</control> <block pos:start="291:64" pos:end="309:13">{<block_content pos:start="293:17" pos:end="307:17">

                <decl_stmt pos:start="293:17" pos:end="293:63"><decl pos:start="293:17" pos:end="293:62"><type pos:start="293:17" pos:end="293:19"><name pos:start="293:17" pos:end="293:19">int</name></type> <name pos:start="293:21" pos:end="293:21">c</name> <init pos:start="293:23" pos:end="293:62">= <expr pos:start="293:25" pos:end="293:62"><name pos:start="293:25" pos:end="293:62"><name pos:start="293:25" pos:end="293:25">s</name><operator pos:start="293:26" pos:end="293:27">-&gt;</operator><name pos:start="293:28" pos:end="293:59">channel_indexes_for_cur_subframe</name><index pos:start="293:60" pos:end="293:62">[<expr pos:start="293:61" pos:end="293:61"><name pos:start="293:61" pos:end="293:61">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:54"><expr pos:start="295:17" pos:end="295:53"><name pos:start="295:17" pos:end="295:29"><name pos:start="295:17" pos:end="295:17">s</name><operator pos:start="295:18" pos:end="295:19">-&gt;</operator><name pos:start="295:20" pos:end="295:26">channel</name><index pos:start="295:27" pos:end="295:29">[<expr pos:start="295:28" pos:end="295:28"><name pos:start="295:28" pos:end="295:28">c</name></expr>]</index></name><operator pos:start="295:30" pos:end="295:30">.</operator><name pos:start="295:31" pos:end="295:40">quant_step</name> <operator pos:start="295:42" pos:end="295:42">=</operator> <name pos:start="295:44" pos:end="295:53">quant_step</name></expr>;</expr_stmt>

                <if_stmt pos:start="297:17" pos:end="307:17"><if pos:start="297:17" pos:end="307:17">if <condition pos:start="297:20" pos:end="297:38">(<expr pos:start="297:21" pos:end="297:37"><call pos:start="297:21" pos:end="297:37"><name pos:start="297:21" pos:end="297:29">get_bits1</name><argument_list pos:start="297:30" pos:end="297:37">(<argument pos:start="297:31" pos:end="297:36"><expr pos:start="297:31" pos:end="297:36"><operator pos:start="297:31" pos:end="297:31">&amp;</operator><name pos:start="297:32" pos:end="297:36"><name pos:start="297:32" pos:end="297:32">s</name><operator pos:start="297:33" pos:end="297:34">-&gt;</operator><name pos:start="297:35" pos:end="297:36">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="297:40" pos:end="307:17">{<block_content pos:start="299:21" pos:end="305:51">

                    <if_stmt pos:start="299:21" pos:end="305:51"><if pos:start="299:21" pos:end="303:21">if <condition pos:start="299:24" pos:end="299:37">(<expr pos:start="299:25" pos:end="299:36"><name pos:start="299:25" pos:end="299:36">modifier_len</name></expr>)</condition> <block pos:start="299:39" pos:end="303:21">{<block_content pos:start="301:25" pos:end="301:87">

                        <expr_stmt pos:start="301:25" pos:end="301:87"><expr pos:start="301:25" pos:end="301:86"><name pos:start="301:25" pos:end="301:37"><name pos:start="301:25" pos:end="301:25">s</name><operator pos:start="301:26" pos:end="301:27">-&gt;</operator><name pos:start="301:28" pos:end="301:34">channel</name><index pos:start="301:35" pos:end="301:37">[<expr pos:start="301:36" pos:end="301:36"><name pos:start="301:36" pos:end="301:36">c</name></expr>]</index></name><operator pos:start="301:38" pos:end="301:38">.</operator><name pos:start="301:39" pos:end="301:48">quant_step</name> <operator pos:start="301:50" pos:end="301:51">+=</operator> <call pos:start="301:53" pos:end="301:82"><name pos:start="301:53" pos:end="301:60">get_bits</name><argument_list pos:start="301:61" pos:end="301:82">(<argument pos:start="301:62" pos:end="301:67"><expr pos:start="301:62" pos:end="301:67"><operator pos:start="301:62" pos:end="301:62">&amp;</operator><name pos:start="301:63" pos:end="301:67"><name pos:start="301:63" pos:end="301:63">s</name><operator pos:start="301:64" pos:end="301:65">-&gt;</operator><name pos:start="301:66" pos:end="301:67">gb</name></name></expr></argument>, <argument pos:start="301:70" pos:end="301:81"><expr pos:start="301:70" pos:end="301:81"><name pos:start="301:70" pos:end="301:81">modifier_len</name></expr></argument>)</argument_list></call> <operator pos:start="301:84" pos:end="301:84">+</operator> <literal type="number" pos:start="301:86" pos:end="301:86">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="303:23" pos:end="305:51">else<block type="pseudo" pos:start="305:25" pos:end="305:51"><block_content pos:start="305:25" pos:end="305:51">

                        <expr_stmt pos:start="305:25" pos:end="305:51"><expr pos:start="305:25" pos:end="305:50"><operator pos:start="305:25" pos:end="305:26">++</operator><name pos:start="305:27" pos:end="305:39"><name pos:start="305:27" pos:end="305:27">s</name><operator pos:start="305:28" pos:end="305:29">-&gt;</operator><name pos:start="305:30" pos:end="305:36">channel</name><index pos:start="305:37" pos:end="305:39">[<expr pos:start="305:38" pos:end="305:38"><name pos:start="305:38" pos:end="305:38">c</name></expr>]</index></name><operator pos:start="305:40" pos:end="305:40">.</operator><name pos:start="305:41" pos:end="305:50">quant_step</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <comment type="block" format="doxygen" pos:start="315:9" pos:end="315:35">/** decode scale factors */</comment>

        <if_stmt pos:start="317:9" pos:end="319:39"><if pos:start="317:9" pos:end="319:39">if <condition pos:start="317:12" pos:end="317:40">(<expr pos:start="317:13" pos:end="317:39"><call pos:start="317:13" pos:end="317:35"><name pos:start="317:13" pos:end="317:32">decode_scale_factors</name><argument_list pos:start="317:33" pos:end="317:35">(<argument pos:start="317:34" pos:end="317:34"><expr pos:start="317:34" pos:end="317:34"><name pos:start="317:34" pos:end="317:34">s</name></expr></argument>)</argument_list></call> <operator pos:start="317:37" pos:end="317:37">&lt;</operator> <literal type="number" pos:start="317:39" pos:end="317:39">0</literal></expr>)</condition><block type="pseudo" pos:start="319:13" pos:end="319:39"><block_content pos:start="319:13" pos:end="319:39">

            <return pos:start="319:13" pos:end="319:39">return <expr pos:start="319:20" pos:end="319:38"><name pos:start="319:20" pos:end="319:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="325:5" pos:end="327:57"><expr pos:start="325:5" pos:end="327:56"><call pos:start="325:5" pos:end="327:56"><name pos:start="325:5" pos:end="325:11">av_dlog</name><argument_list pos:start="325:12" pos:end="327:56">(<argument pos:start="325:13" pos:end="325:20"><expr pos:start="325:13" pos:end="325:20"><name pos:start="325:13" pos:end="325:20"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:20">avctx</name></name></expr></argument>, <argument pos:start="325:23" pos:end="325:66"><expr pos:start="325:23" pos:end="325:66"><literal type="string" pos:start="325:23" pos:end="325:66">"BITSTREAM: subframe header length was %i\n"</literal></expr></argument>,

            <argument pos:start="327:13" pos:end="327:55"><expr pos:start="327:13" pos:end="327:55"><call pos:start="327:13" pos:end="327:34"><name pos:start="327:13" pos:end="327:26">get_bits_count</name><argument_list pos:start="327:27" pos:end="327:34">(<argument pos:start="327:28" pos:end="327:33"><expr pos:start="327:28" pos:end="327:33"><operator pos:start="327:28" pos:end="327:28">&amp;</operator><name pos:start="327:29" pos:end="327:33"><name pos:start="327:29" pos:end="327:29">s</name><operator pos:start="327:30" pos:end="327:31">-&gt;</operator><name pos:start="327:32" pos:end="327:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="327:36" pos:end="327:36">-</operator> <name pos:start="327:38" pos:end="327:55"><name pos:start="327:38" pos:end="327:38">s</name><operator pos:start="327:39" pos:end="327:40">-&gt;</operator><name pos:start="327:41" pos:end="327:55">subframe_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="331:5" pos:end="331:29">/** parse coefficients */</comment>

    <for pos:start="333:5" pos:end="349:5">for <control pos:start="333:9" pos:end="333:54">(<init pos:start="333:10" pos:end="333:15"><expr pos:start="333:10" pos:end="333:14"><name pos:start="333:10" pos:end="333:10">i</name> <operator pos:start="333:12" pos:end="333:12">=</operator> <literal type="number" pos:start="333:14" pos:end="333:14">0</literal></expr>;</init> <condition pos:start="333:17" pos:end="333:49"><expr pos:start="333:17" pos:end="333:48"><name pos:start="333:17" pos:end="333:17">i</name> <operator pos:start="333:19" pos:end="333:19">&lt;</operator> <name pos:start="333:21" pos:end="333:48"><name pos:start="333:21" pos:end="333:21">s</name><operator pos:start="333:22" pos:end="333:23">-&gt;</operator><name pos:start="333:24" pos:end="333:48">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="333:51" pos:end="333:53"><expr pos:start="333:51" pos:end="333:53"><name pos:start="333:51" pos:end="333:51">i</name><operator pos:start="333:52" pos:end="333:53">++</operator></expr></incr>)</control> <block pos:start="333:56" pos:end="349:5">{<block_content pos:start="335:9" pos:end="347:65">

        <decl_stmt pos:start="335:9" pos:end="335:55"><decl pos:start="335:9" pos:end="335:54"><type pos:start="335:9" pos:end="335:11"><name pos:start="335:9" pos:end="335:11">int</name></type> <name pos:start="335:13" pos:end="335:13">c</name> <init pos:start="335:15" pos:end="335:54">= <expr pos:start="335:17" pos:end="335:54"><name pos:start="335:17" pos:end="335:54"><name pos:start="335:17" pos:end="335:17">s</name><operator pos:start="335:18" pos:end="335:19">-&gt;</operator><name pos:start="335:20" pos:end="335:51">channel_indexes_for_cur_subframe</name><index pos:start="335:52" pos:end="335:54">[<expr pos:start="335:53" pos:end="335:53"><name pos:start="335:53" pos:end="335:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="337:9" pos:end="347:65"><if pos:start="337:9" pos:end="343:9">if <condition pos:start="337:12" pos:end="339:55">(<expr pos:start="337:13" pos:end="339:54"><name pos:start="337:13" pos:end="337:25"><name pos:start="337:13" pos:end="337:13">s</name><operator pos:start="337:14" pos:end="337:15">-&gt;</operator><name pos:start="337:16" pos:end="337:22">channel</name><index pos:start="337:23" pos:end="337:25">[<expr pos:start="337:24" pos:end="337:24"><name pos:start="337:24" pos:end="337:24">c</name></expr>]</index></name><operator pos:start="337:26" pos:end="337:26">.</operator><name pos:start="337:27" pos:end="337:40">transmit_coefs</name> <operator pos:start="337:42" pos:end="337:43">&amp;&amp;</operator>

            <call pos:start="339:13" pos:end="339:34"><name pos:start="339:13" pos:end="339:26">get_bits_count</name><argument_list pos:start="339:27" pos:end="339:34">(<argument pos:start="339:28" pos:end="339:33"><expr pos:start="339:28" pos:end="339:33"><operator pos:start="339:28" pos:end="339:28">&amp;</operator><name pos:start="339:29" pos:end="339:33"><name pos:start="339:29" pos:end="339:29">s</name><operator pos:start="339:30" pos:end="339:31">-&gt;</operator><name pos:start="339:32" pos:end="339:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="339:36" pos:end="339:36">&lt;</operator> <name pos:start="339:38" pos:end="339:54"><name pos:start="339:38" pos:end="339:38">s</name><operator pos:start="339:39" pos:end="339:40">-&gt;</operator><name pos:start="339:41" pos:end="339:54">num_saved_bits</name></name></expr>)</condition> <block pos:start="339:57" pos:end="343:9">{<block_content pos:start="341:13" pos:end="341:32">

            <expr_stmt pos:start="341:13" pos:end="341:32"><expr pos:start="341:13" pos:end="341:31"><call pos:start="341:13" pos:end="341:31"><name pos:start="341:13" pos:end="341:25">decode_coeffs</name><argument_list pos:start="341:26" pos:end="341:31">(<argument pos:start="341:27" pos:end="341:27"><expr pos:start="341:27" pos:end="341:27"><name pos:start="341:27" pos:end="341:27">s</name></expr></argument>, <argument pos:start="341:30" pos:end="341:30"><expr pos:start="341:30" pos:end="341:30"><name pos:start="341:30" pos:end="341:30">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="343:11" pos:end="347:65">else<block type="pseudo" pos:start="345:13" pos:end="347:65"><block_content pos:start="345:13" pos:end="347:65">

            <expr_stmt pos:start="345:13" pos:end="347:65"><expr pos:start="345:13" pos:end="347:64"><call pos:start="345:13" pos:end="347:64"><name pos:start="345:13" pos:end="345:18">memset</name><argument_list pos:start="345:19" pos:end="347:64">(<argument pos:start="345:20" pos:end="345:39"><expr pos:start="345:20" pos:end="345:39"><name pos:start="345:20" pos:end="345:32"><name pos:start="345:20" pos:end="345:20">s</name><operator pos:start="345:21" pos:end="345:22">-&gt;</operator><name pos:start="345:23" pos:end="345:29">channel</name><index pos:start="345:30" pos:end="345:32">[<expr pos:start="345:31" pos:end="345:31"><name pos:start="345:31" pos:end="345:31">c</name></expr>]</index></name><operator pos:start="345:33" pos:end="345:33">.</operator><name pos:start="345:34" pos:end="345:39">coeffs</name></expr></argument>, <argument pos:start="345:42" pos:end="345:42"><expr pos:start="345:42" pos:end="345:42"><literal type="number" pos:start="345:42" pos:end="345:42">0</literal></expr></argument>,

                   <argument pos:start="347:20" pos:end="347:63"><expr pos:start="347:20" pos:end="347:63"><sizeof pos:start="347:20" pos:end="347:48">sizeof<argument_list pos:start="347:26" pos:end="347:48">(<argument pos:start="347:27" pos:end="347:47"><expr pos:start="347:27" pos:end="347:47"><operator pos:start="347:27" pos:end="347:27">*</operator><name pos:start="347:28" pos:end="347:40"><name pos:start="347:28" pos:end="347:28">s</name><operator pos:start="347:29" pos:end="347:30">-&gt;</operator><name pos:start="347:31" pos:end="347:37">channel</name><index pos:start="347:38" pos:end="347:40">[<expr pos:start="347:39" pos:end="347:39"><name pos:start="347:39" pos:end="347:39">c</name></expr>]</index></name><operator pos:start="347:41" pos:end="347:41">.</operator><name pos:start="347:42" pos:end="347:47">coeffs</name></expr></argument>)</argument_list></sizeof> <operator pos:start="347:50" pos:end="347:50">*</operator> <name pos:start="347:52" pos:end="347:63">subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="353:5" pos:end="355:57"><expr pos:start="353:5" pos:end="355:56"><call pos:start="353:5" pos:end="355:56"><name pos:start="353:5" pos:end="353:11">av_dlog</name><argument_list pos:start="353:12" pos:end="355:56">(<argument pos:start="353:13" pos:end="353:20"><expr pos:start="353:13" pos:end="353:20"><name pos:start="353:13" pos:end="353:20"><name pos:start="353:13" pos:end="353:13">s</name><operator pos:start="353:14" pos:end="353:15">-&gt;</operator><name pos:start="353:16" pos:end="353:20">avctx</name></name></expr></argument>, <argument pos:start="353:23" pos:end="353:59"><expr pos:start="353:23" pos:end="353:59"><literal type="string" pos:start="353:23" pos:end="353:59">"BITSTREAM: subframe length was %i\n"</literal></expr></argument>,

            <argument pos:start="355:13" pos:end="355:55"><expr pos:start="355:13" pos:end="355:55"><call pos:start="355:13" pos:end="355:34"><name pos:start="355:13" pos:end="355:26">get_bits_count</name><argument_list pos:start="355:27" pos:end="355:34">(<argument pos:start="355:28" pos:end="355:33"><expr pos:start="355:28" pos:end="355:33"><operator pos:start="355:28" pos:end="355:28">&amp;</operator><name pos:start="355:29" pos:end="355:33"><name pos:start="355:29" pos:end="355:29">s</name><operator pos:start="355:30" pos:end="355:31">-&gt;</operator><name pos:start="355:32" pos:end="355:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="355:36" pos:end="355:36">-</operator> <name pos:start="355:38" pos:end="355:55"><name pos:start="355:38" pos:end="355:38">s</name><operator pos:start="355:39" pos:end="355:40">-&gt;</operator><name pos:start="355:41" pos:end="355:55">subframe_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="359:5" pos:end="417:5"><if pos:start="359:5" pos:end="417:5">if <condition pos:start="359:8" pos:end="359:24">(<expr pos:start="359:9" pos:end="359:23"><name pos:start="359:9" pos:end="359:23">transmit_coeffs</name></expr>)</condition> <block pos:start="359:26" pos:end="417:5">{<block_content pos:start="361:9" pos:end="415:9">

        <decl_stmt pos:start="361:9" pos:end="361:87"><decl pos:start="361:9" pos:end="361:86"><type pos:start="361:9" pos:end="361:20"><name pos:start="361:9" pos:end="361:18">FFTContext</name> <modifier pos:start="361:20" pos:end="361:20">*</modifier></type><name pos:start="361:21" pos:end="361:24">mdct</name> <init pos:start="361:26" pos:end="361:86">= <expr pos:start="361:28" pos:end="361:86"><operator pos:start="361:28" pos:end="361:28">&amp;</operator><name pos:start="361:29" pos:end="361:86"><name pos:start="361:29" pos:end="361:29">s</name><operator pos:start="361:30" pos:end="361:31">-&gt;</operator><name pos:start="361:32" pos:end="361:39">mdct_ctx</name><index pos:start="361:40" pos:end="361:86">[<expr pos:start="361:41" pos:end="361:85"><call pos:start="361:41" pos:end="361:61"><name pos:start="361:41" pos:end="361:47">av_log2</name><argument_list pos:start="361:48" pos:end="361:61">(<argument pos:start="361:49" pos:end="361:60"><expr pos:start="361:49" pos:end="361:60"><name pos:start="361:49" pos:end="361:60">subframe_len</name></expr></argument>)</argument_list></call> <operator pos:start="361:63" pos:end="361:63">-</operator> <name pos:start="361:65" pos:end="361:85">WMAPRO_BLOCK_MIN_BITS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="doxygen" pos:start="363:9" pos:end="363:47">/** reconstruct the per channel data */</comment>

        <expr_stmt pos:start="365:9" pos:end="365:37"><expr pos:start="365:9" pos:end="365:36"><call pos:start="365:9" pos:end="365:36"><name pos:start="365:9" pos:end="365:33">inverse_channel_transform</name><argument_list pos:start="365:34" pos:end="365:36">(<argument pos:start="365:35" pos:end="365:35"><expr pos:start="365:35" pos:end="365:35"><name pos:start="365:35" pos:end="365:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="367:9" pos:end="415:9">for <control pos:start="367:13" pos:end="367:58">(<init pos:start="367:14" pos:end="367:19"><expr pos:start="367:14" pos:end="367:18"><name pos:start="367:14" pos:end="367:14">i</name> <operator pos:start="367:16" pos:end="367:16">=</operator> <literal type="number" pos:start="367:18" pos:end="367:18">0</literal></expr>;</init> <condition pos:start="367:21" pos:end="367:53"><expr pos:start="367:21" pos:end="367:52"><name pos:start="367:21" pos:end="367:21">i</name> <operator pos:start="367:23" pos:end="367:23">&lt;</operator> <name pos:start="367:25" pos:end="367:52"><name pos:start="367:25" pos:end="367:25">s</name><operator pos:start="367:26" pos:end="367:27">-&gt;</operator><name pos:start="367:28" pos:end="367:52">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="367:55" pos:end="367:57"><expr pos:start="367:55" pos:end="367:57"><name pos:start="367:55" pos:end="367:55">i</name><operator pos:start="367:56" pos:end="367:57">++</operator></expr></incr>)</control> <block pos:start="367:60" pos:end="415:9">{<block_content pos:start="369:13" pos:end="413:65">

            <decl_stmt pos:start="369:13" pos:end="369:59"><decl pos:start="369:13" pos:end="369:58"><type pos:start="369:13" pos:end="369:15"><name pos:start="369:13" pos:end="369:15">int</name></type> <name pos:start="369:17" pos:end="369:17">c</name> <init pos:start="369:19" pos:end="369:58">= <expr pos:start="369:21" pos:end="369:58"><name pos:start="369:21" pos:end="369:58"><name pos:start="369:21" pos:end="369:21">s</name><operator pos:start="369:22" pos:end="369:23">-&gt;</operator><name pos:start="369:24" pos:end="369:55">channel_indexes_for_cur_subframe</name><index pos:start="369:56" pos:end="369:58">[<expr pos:start="369:57" pos:end="369:57"><name pos:start="369:57" pos:end="369:57">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="371:13" pos:end="371:56"><decl pos:start="371:13" pos:end="371:55"><type pos:start="371:13" pos:end="371:22"><specifier pos:start="371:13" pos:end="371:17">const</specifier> <name pos:start="371:19" pos:end="371:21">int</name><modifier pos:start="371:22" pos:end="371:22">*</modifier></type> <name pos:start="371:24" pos:end="371:25">sf</name> <init pos:start="371:27" pos:end="371:55">= <expr pos:start="371:29" pos:end="371:55"><name pos:start="371:29" pos:end="371:41"><name pos:start="371:29" pos:end="371:29">s</name><operator pos:start="371:30" pos:end="371:31">-&gt;</operator><name pos:start="371:32" pos:end="371:38">channel</name><index pos:start="371:39" pos:end="371:41">[<expr pos:start="371:40" pos:end="371:40"><name pos:start="371:40" pos:end="371:40">c</name></expr>]</index></name><operator pos:start="371:42" pos:end="371:42">.</operator><name pos:start="371:43" pos:end="371:55">scale_factors</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="373:13" pos:end="373:18"><decl pos:start="373:13" pos:end="373:17"><type pos:start="373:13" pos:end="373:15"><name pos:start="373:13" pos:end="373:15">int</name></type> <name pos:start="373:17" pos:end="373:17">b</name></decl>;</decl_stmt>



            <if_stmt pos:start="377:13" pos:end="381:62"><if pos:start="377:13" pos:end="381:62">if <condition pos:start="377:16" pos:end="377:36">(<expr pos:start="377:17" pos:end="377:35"><name pos:start="377:17" pos:end="377:17">c</name> <operator pos:start="377:19" pos:end="377:20">==</operator> <name pos:start="377:22" pos:end="377:35"><name pos:start="377:22" pos:end="377:22">s</name><operator pos:start="377:23" pos:end="377:24">-&gt;</operator><name pos:start="377:25" pos:end="377:35">lfe_channel</name></name></expr>)</condition><block type="pseudo" pos:start="379:17" pos:end="381:62"><block_content pos:start="379:17" pos:end="381:62">

                <expr_stmt pos:start="379:17" pos:end="381:62"><expr pos:start="379:17" pos:end="381:61"><call pos:start="379:17" pos:end="381:61"><name pos:start="379:17" pos:end="379:22">memset</name><argument_list pos:start="379:23" pos:end="381:61">(<argument pos:start="379:24" pos:end="379:52"><expr pos:start="379:24" pos:end="379:52"><operator pos:start="379:24" pos:end="379:24">&amp;</operator><name pos:start="379:25" pos:end="379:52"><name pos:start="379:25" pos:end="379:25">s</name><operator pos:start="379:26" pos:end="379:27">-&gt;</operator><name pos:start="379:28" pos:end="379:30">tmp</name><index pos:start="379:31" pos:end="379:52">[<expr pos:start="379:32" pos:end="379:51"><name pos:start="379:32" pos:end="379:51">cur_subwoofer_cutoff</name></expr>]</index></name></expr></argument>, <argument pos:start="379:55" pos:end="379:55"><expr pos:start="379:55" pos:end="379:55"><literal type="number" pos:start="379:55" pos:end="379:55">0</literal></expr></argument>, <argument pos:start="379:58" pos:end="381:60"><expr pos:start="379:58" pos:end="381:60"><sizeof pos:start="379:58" pos:end="379:72">sizeof<argument_list pos:start="379:64" pos:end="379:72">(<argument pos:start="379:65" pos:end="379:71"><expr pos:start="379:65" pos:end="379:71"><operator pos:start="379:65" pos:end="379:65">*</operator><name pos:start="379:66" pos:end="379:71"><name pos:start="379:66" pos:end="379:66">s</name><operator pos:start="379:67" pos:end="379:68">-&gt;</operator><name pos:start="379:69" pos:end="379:71">tmp</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="379:74" pos:end="379:74">*</operator>

                       <operator pos:start="381:24" pos:end="381:24">(</operator><name pos:start="381:25" pos:end="381:36">subframe_len</name> <operator pos:start="381:38" pos:end="381:38">-</operator> <name pos:start="381:40" pos:end="381:59">cur_subwoofer_cutoff</name><operator pos:start="381:60" pos:end="381:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" format="doxygen" pos:start="385:13" pos:end="385:53">/** inverse quantization and rescaling */</comment>

            <for pos:start="387:13" pos:end="407:13">for <control pos:start="387:17" pos:end="387:46">(<init pos:start="387:18" pos:end="387:23"><expr pos:start="387:18" pos:end="387:22"><name pos:start="387:18" pos:end="387:18">b</name> <operator pos:start="387:20" pos:end="387:20">=</operator> <literal type="number" pos:start="387:22" pos:end="387:22">0</literal></expr>;</init> <condition pos:start="387:25" pos:end="387:41"><expr pos:start="387:25" pos:end="387:40"><name pos:start="387:25" pos:end="387:25">b</name> <operator pos:start="387:27" pos:end="387:27">&lt;</operator> <name pos:start="387:29" pos:end="387:40"><name pos:start="387:29" pos:end="387:29">s</name><operator pos:start="387:30" pos:end="387:31">-&gt;</operator><name pos:start="387:32" pos:end="387:40">num_bands</name></name></expr>;</condition> <incr pos:start="387:43" pos:end="387:45"><expr pos:start="387:43" pos:end="387:45"><name pos:start="387:43" pos:end="387:43">b</name><operator pos:start="387:44" pos:end="387:45">++</operator></expr></incr>)</control> <block pos:start="387:48" pos:end="407:13">{<block_content pos:start="389:17" pos:end="405:62">

                <decl_stmt pos:start="389:17" pos:end="389:80"><decl pos:start="389:17" pos:end="389:79"><type pos:start="389:17" pos:end="389:25"><specifier pos:start="389:17" pos:end="389:21">const</specifier> <name pos:start="389:23" pos:end="389:25">int</name></type> <name pos:start="389:27" pos:end="389:29">end</name> <init pos:start="389:31" pos:end="389:79">= <expr pos:start="389:33" pos:end="389:79"><call pos:start="389:33" pos:end="389:79"><name pos:start="389:33" pos:end="389:37">FFMIN</name><argument_list pos:start="389:38" pos:end="389:79">(<argument pos:start="389:39" pos:end="389:61"><expr pos:start="389:39" pos:end="389:61"><name pos:start="389:39" pos:end="389:61"><name pos:start="389:39" pos:end="389:39">s</name><operator pos:start="389:40" pos:end="389:41">-&gt;</operator><name pos:start="389:42" pos:end="389:56">cur_sfb_offsets</name><index pos:start="389:57" pos:end="389:61">[<expr pos:start="389:58" pos:end="389:60"><name pos:start="389:58" pos:end="389:58">b</name><operator pos:start="389:59" pos:end="389:59">+</operator><literal type="number" pos:start="389:60" pos:end="389:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="389:64" pos:end="389:78"><expr pos:start="389:64" pos:end="389:78"><name pos:start="389:64" pos:end="389:78"><name pos:start="389:64" pos:end="389:64">s</name><operator pos:start="389:65" pos:end="389:66">-&gt;</operator><name pos:start="389:67" pos:end="389:78">subframe_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="391:17" pos:end="395:60"><decl pos:start="391:17" pos:end="395:59"><type pos:start="391:17" pos:end="391:25"><specifier pos:start="391:17" pos:end="391:21">const</specifier> <name pos:start="391:23" pos:end="391:25">int</name></type> <name pos:start="391:27" pos:end="391:29">exp</name> <init pos:start="391:31" pos:end="395:59">= <expr pos:start="391:33" pos:end="395:59"><name pos:start="391:33" pos:end="391:45"><name pos:start="391:33" pos:end="391:33">s</name><operator pos:start="391:34" pos:end="391:35">-&gt;</operator><name pos:start="391:36" pos:end="391:42">channel</name><index pos:start="391:43" pos:end="391:45">[<expr pos:start="391:44" pos:end="391:44"><name pos:start="391:44" pos:end="391:44">c</name></expr>]</index></name><operator pos:start="391:46" pos:end="391:46">.</operator><name pos:start="391:47" pos:end="391:56">quant_step</name> <operator pos:start="391:58" pos:end="391:58">-</operator>

                            <operator pos:start="393:29" pos:end="393:29">(</operator><name pos:start="393:30" pos:end="393:42"><name pos:start="393:30" pos:end="393:30">s</name><operator pos:start="393:31" pos:end="393:32">-&gt;</operator><name pos:start="393:33" pos:end="393:39">channel</name><index pos:start="393:40" pos:end="393:42">[<expr pos:start="393:41" pos:end="393:41"><name pos:start="393:41" pos:end="393:41">c</name></expr>]</index></name><operator pos:start="393:43" pos:end="393:43">.</operator><name pos:start="393:44" pos:end="393:59">max_scale_factor</name> <operator pos:start="393:61" pos:end="393:61">-</operator> <operator pos:start="393:63" pos:end="393:63">*</operator><name pos:start="393:64" pos:end="393:65">sf</name><operator pos:start="393:66" pos:end="393:67">++</operator><operator pos:start="393:68" pos:end="393:68">)</operator> <operator pos:start="393:70" pos:end="393:70">*</operator>

                            <name pos:start="395:29" pos:end="395:41"><name pos:start="395:29" pos:end="395:29">s</name><operator pos:start="395:30" pos:end="395:31">-&gt;</operator><name pos:start="395:32" pos:end="395:38">channel</name><index pos:start="395:39" pos:end="395:41">[<expr pos:start="395:40" pos:end="395:40"><name pos:start="395:40" pos:end="395:40">c</name></expr>]</index></name><operator pos:start="395:42" pos:end="395:42">.</operator><name pos:start="395:43" pos:end="395:59">scale_factor_step</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="397:17" pos:end="397:58"><decl pos:start="397:17" pos:end="397:57"><type pos:start="397:17" pos:end="397:27"><specifier pos:start="397:17" pos:end="397:21">const</specifier> <name pos:start="397:23" pos:end="397:27">float</name></type> <name pos:start="397:29" pos:end="397:33">quant</name> <init pos:start="397:35" pos:end="397:57">= <expr pos:start="397:37" pos:end="397:57"><call pos:start="397:37" pos:end="397:57"><name pos:start="397:37" pos:end="397:39">pow</name><argument_list pos:start="397:40" pos:end="397:57">(<argument pos:start="397:41" pos:end="397:44"><expr pos:start="397:41" pos:end="397:44"><literal type="number" pos:start="397:41" pos:end="397:44">10.0</literal></expr></argument>, <argument pos:start="397:47" pos:end="397:56"><expr pos:start="397:47" pos:end="397:56"><name pos:start="397:47" pos:end="397:49">exp</name> <operator pos:start="397:51" pos:end="397:51">/</operator> <literal type="number" pos:start="397:53" pos:end="397:56">20.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="399:17" pos:end="399:50"><decl pos:start="399:17" pos:end="399:49"><type pos:start="399:17" pos:end="399:19"><name pos:start="399:17" pos:end="399:19">int</name></type> <name pos:start="399:21" pos:end="399:25">start</name> <init pos:start="399:27" pos:end="399:49">= <expr pos:start="399:29" pos:end="399:49"><name pos:start="399:29" pos:end="399:49"><name pos:start="399:29" pos:end="399:29">s</name><operator pos:start="399:30" pos:end="399:31">-&gt;</operator><name pos:start="399:32" pos:end="399:46">cur_sfb_offsets</name><index pos:start="399:47" pos:end="399:49">[<expr pos:start="399:48" pos:end="399:48"><name pos:start="399:48" pos:end="399:48">b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="401:17" pos:end="405:62"><expr pos:start="401:17" pos:end="405:61"><call pos:start="401:17" pos:end="405:61"><name pos:start="401:17" pos:end="401:41"><name pos:start="401:17" pos:end="401:17">s</name><operator pos:start="401:18" pos:end="401:19">-&gt;</operator><name pos:start="401:20" pos:end="401:22">dsp</name><operator pos:start="401:23" pos:end="401:23">.</operator><name pos:start="401:24" pos:end="401:41">vector_fmul_scalar</name></name><argument_list pos:start="401:42" pos:end="405:61">(<argument pos:start="401:43" pos:end="401:56"><expr pos:start="401:43" pos:end="401:56"><name pos:start="401:43" pos:end="401:48"><name pos:start="401:43" pos:end="401:43">s</name><operator pos:start="401:44" pos:end="401:45">-&gt;</operator><name pos:start="401:46" pos:end="401:48">tmp</name></name> <operator pos:start="401:50" pos:end="401:50">+</operator> <name pos:start="401:52" pos:end="401:56">start</name></expr></argument>,

                                          <argument pos:start="403:43" pos:end="403:70"><expr pos:start="403:43" pos:end="403:70"><name pos:start="403:43" pos:end="403:55"><name pos:start="403:43" pos:end="403:43">s</name><operator pos:start="403:44" pos:end="403:45">-&gt;</operator><name pos:start="403:46" pos:end="403:52">channel</name><index pos:start="403:53" pos:end="403:55">[<expr pos:start="403:54" pos:end="403:54"><name pos:start="403:54" pos:end="403:54">c</name></expr>]</index></name><operator pos:start="403:56" pos:end="403:56">.</operator><name pos:start="403:57" pos:end="403:62">coeffs</name> <operator pos:start="403:64" pos:end="403:64">+</operator> <name pos:start="403:66" pos:end="403:70">start</name></expr></argument>,

                                          <argument pos:start="405:43" pos:end="405:47"><expr pos:start="405:43" pos:end="405:47"><name pos:start="405:43" pos:end="405:47">quant</name></expr></argument>, <argument pos:start="405:50" pos:end="405:60"><expr pos:start="405:50" pos:end="405:60"><name pos:start="405:50" pos:end="405:52">end</name> <operator pos:start="405:54" pos:end="405:54">-</operator> <name pos:start="405:56" pos:end="405:60">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <comment type="block" format="doxygen" pos:start="411:13" pos:end="411:65">/** apply imdct (imdct_half == DCTIV with reverse) */</comment>

            <expr_stmt pos:start="413:13" pos:end="413:65"><expr pos:start="413:13" pos:end="413:64"><call pos:start="413:13" pos:end="413:64"><name pos:start="413:13" pos:end="413:28"><name pos:start="413:13" pos:end="413:16">mdct</name><operator pos:start="413:17" pos:end="413:18">-&gt;</operator><name pos:start="413:19" pos:end="413:28">imdct_half</name></name><argument_list pos:start="413:29" pos:end="413:64">(<argument pos:start="413:30" pos:end="413:33"><expr pos:start="413:30" pos:end="413:33"><name pos:start="413:30" pos:end="413:33">mdct</name></expr></argument>, <argument pos:start="413:36" pos:end="413:55"><expr pos:start="413:36" pos:end="413:55"><name pos:start="413:36" pos:end="413:48"><name pos:start="413:36" pos:end="413:36">s</name><operator pos:start="413:37" pos:end="413:38">-&gt;</operator><name pos:start="413:39" pos:end="413:45">channel</name><index pos:start="413:46" pos:end="413:48">[<expr pos:start="413:47" pos:end="413:47"><name pos:start="413:47" pos:end="413:47">c</name></expr>]</index></name><operator pos:start="413:49" pos:end="413:49">.</operator><name pos:start="413:50" pos:end="413:55">coeffs</name></expr></argument>, <argument pos:start="413:58" pos:end="413:63"><expr pos:start="413:58" pos:end="413:63"><name pos:start="413:58" pos:end="413:63"><name pos:start="413:58" pos:end="413:58">s</name><operator pos:start="413:59" pos:end="413:60">-&gt;</operator><name pos:start="413:61" pos:end="413:63">tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="421:5" pos:end="421:34">/** window and overlapp-add */</comment>

    <expr_stmt pos:start="423:5" pos:end="423:21"><expr pos:start="423:5" pos:end="423:20"><call pos:start="423:5" pos:end="423:20"><name pos:start="423:5" pos:end="423:17">wmapro_window</name><argument_list pos:start="423:18" pos:end="423:20">(<argument pos:start="423:19" pos:end="423:19"><expr pos:start="423:19" pos:end="423:19"><name pos:start="423:19" pos:end="423:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="427:5" pos:end="427:31">/** handled one subframe */</comment>

    <for pos:start="429:5" pos:end="443:5">for <control pos:start="429:9" pos:end="429:54">(<init pos:start="429:10" pos:end="429:15"><expr pos:start="429:10" pos:end="429:14"><name pos:start="429:10" pos:end="429:10">i</name> <operator pos:start="429:12" pos:end="429:12">=</operator> <literal type="number" pos:start="429:14" pos:end="429:14">0</literal></expr>;</init> <condition pos:start="429:17" pos:end="429:49"><expr pos:start="429:17" pos:end="429:48"><name pos:start="429:17" pos:end="429:17">i</name> <operator pos:start="429:19" pos:end="429:19">&lt;</operator> <name pos:start="429:21" pos:end="429:48"><name pos:start="429:21" pos:end="429:21">s</name><operator pos:start="429:22" pos:end="429:23">-&gt;</operator><name pos:start="429:24" pos:end="429:48">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="429:51" pos:end="429:53"><expr pos:start="429:51" pos:end="429:53"><name pos:start="429:51" pos:end="429:51">i</name><operator pos:start="429:52" pos:end="429:53">++</operator></expr></incr>)</control> <block pos:start="429:56" pos:end="443:5">{<block_content pos:start="431:9" pos:end="441:37">

        <decl_stmt pos:start="431:9" pos:end="431:55"><decl pos:start="431:9" pos:end="431:54"><type pos:start="431:9" pos:end="431:11"><name pos:start="431:9" pos:end="431:11">int</name></type> <name pos:start="431:13" pos:end="431:13">c</name> <init pos:start="431:15" pos:end="431:54">= <expr pos:start="431:17" pos:end="431:54"><name pos:start="431:17" pos:end="431:54"><name pos:start="431:17" pos:end="431:17">s</name><operator pos:start="431:18" pos:end="431:19">-&gt;</operator><name pos:start="431:20" pos:end="431:51">channel_indexes_for_cur_subframe</name><index pos:start="431:52" pos:end="431:54">[<expr pos:start="431:53" pos:end="431:53"><name pos:start="431:53" pos:end="431:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="433:9" pos:end="439:9"><if pos:start="433:9" pos:end="439:9">if <condition pos:start="433:12" pos:end="433:70">(<expr pos:start="433:13" pos:end="433:69"><name pos:start="433:13" pos:end="433:25"><name pos:start="433:13" pos:end="433:13">s</name><operator pos:start="433:14" pos:end="433:15">-&gt;</operator><name pos:start="433:16" pos:end="433:22">channel</name><index pos:start="433:23" pos:end="433:25">[<expr pos:start="433:24" pos:end="433:24"><name pos:start="433:24" pos:end="433:24">c</name></expr>]</index></name><operator pos:start="433:26" pos:end="433:26">.</operator><name pos:start="433:27" pos:end="433:38">cur_subframe</name> <operator pos:start="433:40" pos:end="433:41">&gt;=</operator> <name pos:start="433:43" pos:end="433:55"><name pos:start="433:43" pos:end="433:43">s</name><operator pos:start="433:44" pos:end="433:45">-&gt;</operator><name pos:start="433:46" pos:end="433:52">channel</name><index pos:start="433:53" pos:end="433:55">[<expr pos:start="433:54" pos:end="433:54"><name pos:start="433:54" pos:end="433:54">c</name></expr>]</index></name><operator pos:start="433:56" pos:end="433:56">.</operator><name pos:start="433:57" pos:end="433:69">num_subframes</name></expr>)</condition> <block pos:start="433:72" pos:end="439:9">{<block_content pos:start="435:13" pos:end="437:39">

            <expr_stmt pos:start="435:13" pos:end="435:64"><expr pos:start="435:13" pos:end="435:63"><call pos:start="435:13" pos:end="435:63"><name pos:start="435:13" pos:end="435:18">av_log</name><argument_list pos:start="435:19" pos:end="435:63">(<argument pos:start="435:20" pos:end="435:27"><expr pos:start="435:20" pos:end="435:27"><name pos:start="435:20" pos:end="435:27"><name pos:start="435:20" pos:end="435:20">s</name><operator pos:start="435:21" pos:end="435:22">-&gt;</operator><name pos:start="435:23" pos:end="435:27">avctx</name></name></expr></argument>, <argument pos:start="435:30" pos:end="435:41"><expr pos:start="435:30" pos:end="435:41"><name pos:start="435:30" pos:end="435:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="435:44" pos:end="435:62"><expr pos:start="435:44" pos:end="435:62"><literal type="string" pos:start="435:44" pos:end="435:62">"broken subframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="437:13" pos:end="437:39">return <expr pos:start="437:20" pos:end="437:38"><name pos:start="437:20" pos:end="437:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:37"><expr pos:start="441:9" pos:end="441:36"><operator pos:start="441:9" pos:end="441:10">++</operator><name pos:start="441:11" pos:end="441:23"><name pos:start="441:11" pos:end="441:11">s</name><operator pos:start="441:12" pos:end="441:13">-&gt;</operator><name pos:start="441:14" pos:end="441:20">channel</name><index pos:start="441:21" pos:end="441:23">[<expr pos:start="441:22" pos:end="441:22"><name pos:start="441:22" pos:end="441:22">c</name></expr>]</index></name><operator pos:start="441:24" pos:end="441:24">.</operator><name pos:start="441:25" pos:end="441:36">cur_subframe</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="447:5" pos:end="447:13">return <expr pos:start="447:12" pos:end="447:12"><literal type="number" pos:start="447:12" pos:end="447:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
