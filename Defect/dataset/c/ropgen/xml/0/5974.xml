<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5974.c" pos:tabs="8"><function pos:start="1:1" pos:end="643:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">flic_decode_frame_8BPP</name><parameter_list pos:start="1:34" pos:end="5:67">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:44"><decl pos:start="3:35" pos:end="3:44"><type pos:start="3:35" pos:end="3:44"><name pos:start="3:35" pos:end="3:38">void</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:44">data</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:60"><decl pos:start="3:47" pos:end="3:60"><type pos:start="3:47" pos:end="3:60"><name pos:start="3:47" pos:end="3:49">int</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:60">got_frame</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:52"><decl pos:start="5:35" pos:end="5:52"><type pos:start="5:35" pos:end="5:52"><specifier pos:start="5:35" pos:end="5:39">const</specifier> <name pos:start="5:41" pos:end="5:47">uint8_t</name> <modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:52">buf</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:66"><decl pos:start="5:55" pos:end="5:66"><type pos:start="5:55" pos:end="5:66"><name pos:start="5:55" pos:end="5:57">int</name></type> <name pos:start="5:59" pos:end="5:66">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="643:1">{<block_content pos:start="9:5" pos:end="641:20">

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">FlicDecodeContext</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:24">s</name> <init pos:start="9:26" pos:end="9:43">= <expr pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:32">avctx</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:43">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">GetByteContext</name></type> <name pos:start="13:20" pos:end="13:21">g2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">pixel_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">palette_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:17">char</name></type> <name pos:start="19:19" pos:end="19:30">palette_idx1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:17">char</name></type> <name pos:start="21:19" pos:end="21:30">palette_idx2</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:16">int</name></type> <name pos:start="25:18" pos:end="25:27">frame_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">num_chunks</name></decl>;</decl_stmt>



    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:16">int</name></type> <name pos:start="31:18" pos:end="31:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:19"><decl pos:start="33:5" pos:end="33:18"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:18">chunk_type</name></decl>;</decl_stmt>



    <decl_stmt pos:start="37:5" pos:end="37:18"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>, <decl pos:start="37:12" pos:end="37:12"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:12" pos:end="37:12">j</name></decl>, <decl pos:start="37:15" pos:end="37:17"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:15" pos:end="37:17">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="41:5" pos:end="41:22"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:21">color_packets</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:21">color_changes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:20"><decl pos:start="45:5" pos:end="45:19"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:19">color_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:26"><decl pos:start="47:5" pos:end="47:19"><type pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:12">unsigned</name> <name pos:start="47:14" pos:end="47:17">char</name></type> <name pos:start="47:19" pos:end="47:19">r</name></decl>, <decl pos:start="47:22" pos:end="47:22"><type ref="prev" pos:start="47:5" pos:end="47:17"/><name pos:start="47:22" pos:end="47:22">g</name></decl>, <decl pos:start="47:25" pos:end="47:25"><type ref="prev" pos:start="47:5" pos:end="47:17"/><name pos:start="47:25" pos:end="47:25">b</name></decl>;</decl_stmt>



    <decl_stmt pos:start="51:5" pos:end="51:14"><decl pos:start="51:5" pos:end="51:13"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:13">lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:25"><decl pos:start="53:5" pos:end="53:24"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:24">compressed_lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:22"><decl pos:start="55:5" pos:end="55:21"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:21">starting_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:30"><decl pos:start="57:5" pos:end="57:29"><type pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:10">signed</name> <name pos:start="57:12" pos:end="57:16">short</name></type> <name pos:start="57:18" pos:end="57:29">line_packets</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:14"><decl pos:start="59:5" pos:end="59:13"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:13">y_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:17"><decl pos:start="61:5" pos:end="61:16"><type pos:start="61:5" pos:end="61:7"><name pos:start="61:5" pos:end="61:7">int</name></type> <name pos:start="61:9" pos:end="61:16">byte_run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:19"><decl pos:start="63:5" pos:end="63:18"><type pos:start="63:5" pos:end="63:7"><name pos:start="63:5" pos:end="63:7">int</name></type> <name pos:start="63:9" pos:end="63:18">pixel_skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:24"><decl pos:start="65:5" pos:end="65:23"><type pos:start="65:5" pos:end="65:7"><name pos:start="65:5" pos:end="65:7">int</name></type> <name pos:start="65:9" pos:end="65:23">pixel_countdown</name></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:26"><decl pos:start="67:5" pos:end="67:25"><type pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:12">unsigned</name> <name pos:start="67:14" pos:end="67:17">char</name> <modifier pos:start="67:19" pos:end="67:19">*</modifier></type><name pos:start="67:20" pos:end="67:25">pixels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="69:5" pos:end="69:29"><decl pos:start="69:5" pos:end="69:28"><type pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:12">unsigned</name> <name pos:start="69:14" pos:end="69:16">int</name></type> <name pos:start="69:18" pos:end="69:28">pixel_limit</name></decl>;</decl_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:41"><expr pos:start="73:5" pos:end="73:40"><call pos:start="73:5" pos:end="73:40"><name pos:start="73:5" pos:end="73:20">bytestream2_init</name><argument_list pos:start="73:21" pos:end="73:40">(<argument pos:start="73:22" pos:end="73:24"><expr pos:start="73:22" pos:end="73:24"><operator pos:start="73:22" pos:end="73:22">&amp;</operator><name pos:start="73:23" pos:end="73:24">g2</name></expr></argument>, <argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">buf</name></expr></argument>, <argument pos:start="73:32" pos:end="73:39"><expr pos:start="73:32" pos:end="73:39"><name pos:start="73:32" pos:end="73:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="79:19"><if pos:start="77:5" pos:end="79:19">if <condition pos:start="77:8" pos:end="77:54">(<expr pos:start="77:9" pos:end="77:53"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:12">ret</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:48"><name pos:start="77:16" pos:end="77:30">ff_reget_buffer</name><argument_list pos:start="77:31" pos:end="77:48">(<argument pos:start="77:32" pos:end="77:36"><expr pos:start="77:32" pos:end="77:36"><name pos:start="77:32" pos:end="77:36">avctx</name></expr></argument>, <argument pos:start="77:39" pos:end="77:47"><expr pos:start="77:39" pos:end="77:47"><operator pos:start="77:39" pos:end="77:39">&amp;</operator><name pos:start="77:40" pos:end="77:47"><name pos:start="77:40" pos:end="77:40">s</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:47">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="77:49" pos:end="77:49">)</operator> <operator pos:start="77:51" pos:end="77:51">&lt;</operator> <literal type="number" pos:start="77:53" pos:end="77:53">0</literal></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:19"><block_content pos:start="79:9" pos:end="79:19">

        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:30"><expr pos:start="83:5" pos:end="83:29"><name pos:start="83:5" pos:end="83:10">pixels</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <name pos:start="83:14" pos:end="83:29"><name pos:start="83:14" pos:end="83:14">s</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:21">frame</name><operator pos:start="83:22" pos:end="83:22">.</operator><name pos:start="83:23" pos:end="83:26">data</name><index pos:start="83:27" pos:end="83:29">[<expr pos:start="83:28" pos:end="83:28"><literal type="number" pos:start="83:28" pos:end="83:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:58"><expr pos:start="85:5" pos:end="85:57"><name pos:start="85:5" pos:end="85:15">pixel_limit</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:34"><name pos:start="85:19" pos:end="85:19">s</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:26">avctx</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:34">height</name></name> <operator pos:start="85:36" pos:end="85:36">*</operator> <name pos:start="85:38" pos:end="85:57"><name pos:start="85:38" pos:end="85:38">s</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:45">frame</name><operator pos:start="85:46" pos:end="85:46">.</operator><name pos:start="85:47" pos:end="85:54">linesize</name><index pos:start="85:55" pos:end="85:57">[<expr pos:start="85:56" pos:end="85:56"><literal type="number" pos:start="85:56" pos:end="85:56">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="89:35"><if pos:start="87:5" pos:end="89:35">if <condition pos:start="87:8" pos:end="87:87">(<expr pos:start="87:9" pos:end="87:86"><name pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:16">buf_size</name> <argument_list type="generic" pos:start="87:18" pos:end="87:35">&lt; <argument pos:start="87:20" pos:end="87:33"><expr pos:start="87:20" pos:end="87:33"><literal type="number" pos:start="87:20" pos:end="87:21">16</literal> <operator pos:start="87:23" pos:end="87:24">||</operator> <name pos:start="87:26" pos:end="87:33">buf_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="87:37" pos:end="87:43">INT_MAX</name> <operator pos:start="87:45" pos:end="87:45">-</operator> <operator pos:start="87:47" pos:end="87:47">(</operator><literal type="number" pos:start="87:48" pos:end="87:48">3</literal> <operator pos:start="87:50" pos:end="87:50">*</operator> <literal type="number" pos:start="87:52" pos:end="87:56">256</literal> <operator pos:start="87:56" pos:end="87:56">+</operator> <name pos:start="87:58" pos:end="87:85">FF_INPUT_BUFFER_PADDING_SIZE</name><operator pos:start="87:86" pos:end="87:86">)</operator></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:35"><block_content pos:start="89:9" pos:end="89:35">

        <return pos:start="89:9" pos:end="89:35">return <expr pos:start="89:16" pos:end="89:34"><name pos:start="89:16" pos:end="89:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:43"><expr pos:start="91:5" pos:end="91:42"><name pos:start="91:5" pos:end="91:14">frame_size</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <call pos:start="91:18" pos:end="91:42"><name pos:start="91:18" pos:end="91:37">bytestream2_get_le32</name><argument_list pos:start="91:38" pos:end="91:42">(<argument pos:start="91:39" pos:end="91:41"><expr pos:start="91:39" pos:end="91:41"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="95:30"><if pos:start="93:5" pos:end="95:30">if <condition pos:start="93:8" pos:end="93:30">(<expr pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:18">frame_size</name> <operator pos:start="93:20" pos:end="93:20">&gt;</operator> <name pos:start="93:22" pos:end="93:29">buf_size</name></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:30"><block_content pos:start="95:9" pos:end="95:30">

        <expr_stmt pos:start="95:9" pos:end="95:30"><expr pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:18">frame_size</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:29">buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><call pos:start="97:5" pos:end="97:28"><name pos:start="97:5" pos:end="97:20">bytestream2_skip</name><argument_list pos:start="97:21" pos:end="97:28">(<argument pos:start="97:22" pos:end="97:24"><expr pos:start="97:22" pos:end="97:24"><operator pos:start="97:22" pos:end="97:22">&amp;</operator><name pos:start="97:23" pos:end="97:24">g2</name></expr></argument>, <argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><literal type="number" pos:start="97:27" pos:end="97:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="97:31" pos:end="97:57">/* skip the magic number */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:43"><expr pos:start="99:5" pos:end="99:42"><name pos:start="99:5" pos:end="99:14">num_chunks</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <call pos:start="99:18" pos:end="99:42"><name pos:start="99:18" pos:end="99:37">bytestream2_get_le16</name><argument_list pos:start="99:38" pos:end="99:42">(<argument pos:start="99:39" pos:end="99:41"><expr pos:start="99:39" pos:end="99:41"><operator pos:start="99:39" pos:end="99:39">&amp;</operator><name pos:start="99:40" pos:end="99:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:29"><expr pos:start="101:5" pos:end="101:28"><call pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:20">bytestream2_skip</name><argument_list pos:start="101:21" pos:end="101:28">(<argument pos:start="101:22" pos:end="101:24"><expr pos:start="101:22" pos:end="101:24"><operator pos:start="101:22" pos:end="101:22">&amp;</operator><name pos:start="101:23" pos:end="101:24">g2</name></expr></argument>, <argument pos:start="101:27" pos:end="101:27"><expr pos:start="101:27" pos:end="101:27"><literal type="number" pos:start="101:27" pos:end="101:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="101:32" pos:end="101:49">/* skip padding */</comment>



    <expr_stmt pos:start="105:5" pos:end="105:21"><expr pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:14">frame_size</name> <operator pos:start="105:16" pos:end="105:17">-=</operator> <literal type="number" pos:start="105:19" pos:end="105:20">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:36">/* iterate through the chunks */</comment>

    <while pos:start="111:5" pos:end="599:5">while <condition pos:start="111:11" pos:end="111:49">(<expr pos:start="111:12" pos:end="111:48"><operator pos:start="111:12" pos:end="111:12">(</operator><name pos:start="111:13" pos:end="111:22">frame_size</name> <operator pos:start="111:24" pos:end="111:25">&gt;=</operator> <literal type="number" pos:start="111:27" pos:end="111:27">6</literal><operator pos:start="111:28" pos:end="111:28">)</operator> <operator pos:start="111:30" pos:end="111:31">&amp;&amp;</operator> <operator pos:start="111:33" pos:end="111:33">(</operator><name pos:start="111:34" pos:end="111:43">num_chunks</name> <operator pos:start="111:45" pos:end="111:45">&gt;</operator> <literal type="number" pos:start="111:47" pos:end="111:47">0</literal><operator pos:start="111:48" pos:end="111:48">)</operator></expr>)</condition> <block pos:start="111:51" pos:end="599:5">{<block_content pos:start="113:9" pos:end="597:21">

        <decl_stmt pos:start="113:9" pos:end="113:35"><decl pos:start="113:9" pos:end="113:34"><type pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">int</name></type> <name pos:start="113:13" pos:end="113:34">stream_ptr_after_chunk</name></decl>;</decl_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:47"><expr pos:start="115:9" pos:end="115:46"><name pos:start="115:9" pos:end="115:18">chunk_size</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <call pos:start="115:22" pos:end="115:46"><name pos:start="115:22" pos:end="115:41">bytestream2_get_le32</name><argument_list pos:start="115:42" pos:end="115:46">(<argument pos:start="115:43" pos:end="115:45"><expr pos:start="115:43" pos:end="115:45"><operator pos:start="115:43" pos:end="115:43">&amp;</operator><name pos:start="115:44" pos:end="115:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:36">(<expr pos:start="117:13" pos:end="117:35"><name pos:start="117:13" pos:end="117:22">chunk_size</name> <operator pos:start="117:24" pos:end="117:24">&gt;</operator> <name pos:start="117:26" pos:end="117:35">frame_size</name></expr>)</condition> <block pos:start="117:38" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:36">

            <expr_stmt pos:start="119:13" pos:end="121:90"><expr pos:start="119:13" pos:end="121:89"><call pos:start="119:13" pos:end="121:89"><name pos:start="119:13" pos:end="119:18">av_log</name><argument_list pos:start="119:19" pos:end="121:89">(<argument pos:start="119:20" pos:end="119:24"><expr pos:start="119:20" pos:end="119:24"><name pos:start="119:20" pos:end="119:24">avctx</name></expr></argument>, <argument pos:start="119:27" pos:end="119:40"><expr pos:start="119:27" pos:end="119:40"><name pos:start="119:27" pos:end="119:40">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="121:20" pos:end="121:64"><expr pos:start="121:20" pos:end="121:64"><literal type="string" pos:start="121:20" pos:end="121:64">"Invalid chunk_size = %u &gt; frame_size = %u\n"</literal></expr></argument>, <argument pos:start="121:67" pos:end="121:76"><expr pos:start="121:67" pos:end="121:76"><name pos:start="121:67" pos:end="121:76">chunk_size</name></expr></argument>, <argument pos:start="121:79" pos:end="121:88"><expr pos:start="121:79" pos:end="121:88"><name pos:start="121:79" pos:end="121:88">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:36"><expr pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:22">chunk_size</name> <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:35">frame_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:72"><expr pos:start="127:9" pos:end="127:71"><name pos:start="127:9" pos:end="127:30">stream_ptr_after_chunk</name> <operator pos:start="127:32" pos:end="127:32">=</operator> <call pos:start="127:34" pos:end="127:54"><name pos:start="127:34" pos:end="127:49">bytestream2_tell</name><argument_list pos:start="127:50" pos:end="127:54">(<argument pos:start="127:51" pos:end="127:53"><expr pos:start="127:51" pos:end="127:53"><operator pos:start="127:51" pos:end="127:51">&amp;</operator><name pos:start="127:52" pos:end="127:53">g2</name></expr></argument>)</argument_list></call> <operator pos:start="127:56" pos:end="127:56">-</operator> <literal type="number" pos:start="127:58" pos:end="127:60">4</literal> <operator pos:start="127:60" pos:end="127:60">+</operator> <name pos:start="127:62" pos:end="127:71">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="131:9" pos:end="131:47"><expr pos:start="131:9" pos:end="131:46"><name pos:start="131:9" pos:end="131:18">chunk_type</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <call pos:start="131:22" pos:end="131:46"><name pos:start="131:22" pos:end="131:41">bytestream2_get_le16</name><argument_list pos:start="131:42" pos:end="131:46">(<argument pos:start="131:43" pos:end="131:45"><expr pos:start="131:43" pos:end="131:45"><operator pos:start="131:43" pos:end="131:43">&amp;</operator><name pos:start="131:44" pos:end="131:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="135:9" pos:end="585:9">switch <condition pos:start="135:16" pos:end="135:27">(<expr pos:start="135:17" pos:end="135:26"><name pos:start="135:17" pos:end="135:26">chunk_type</name></expr>)</condition> <block pos:start="135:29" pos:end="585:9">{<block_content pos:start="137:9" pos:end="583:18">

        <case pos:start="137:9" pos:end="137:27">case <expr pos:start="137:14" pos:end="137:26"><name pos:start="137:14" pos:end="137:26">FLI_256_COLOR</name></expr>:</case>

        <case pos:start="139:9" pos:end="139:23">case <expr pos:start="139:14" pos:end="139:22"><name pos:start="139:14" pos:end="139:22">FLI_COLOR</name></expr>:</case>

            <comment type="block" pos:start="141:13" pos:end="147:33">/* check special case: If this file is from the Magic Carpet

             * game and uses 6-bit colors even though it reports 256-color

             * chunks in a 0xAF12-type file (fli_type is set to 0xAF13 during

             * initialization) */</comment>

            <if_stmt pos:start="149:13" pos:end="155:32"><if pos:start="149:13" pos:end="151:32">if <condition pos:start="149:16" pos:end="149:103">(<expr pos:start="149:17" pos:end="149:102"><operator pos:start="149:17" pos:end="149:17">(</operator><name pos:start="149:18" pos:end="149:27">chunk_type</name> <operator pos:start="149:29" pos:end="149:30">==</operator> <name pos:start="149:32" pos:end="149:44">FLI_256_COLOR</name><operator pos:start="149:45" pos:end="149:45">)</operator> <operator pos:start="149:47" pos:end="149:48">&amp;&amp;</operator> <operator pos:start="149:50" pos:end="149:50">(</operator><name pos:start="149:51" pos:end="149:61"><name pos:start="149:51" pos:end="149:51">s</name><operator pos:start="149:52" pos:end="149:53">-&gt;</operator><name pos:start="149:54" pos:end="149:61">fli_type</name></name> <operator pos:start="149:63" pos:end="149:64">!=</operator> <name pos:start="149:66" pos:end="149:101">FLC_MAGIC_CARPET_SYNTHETIC_TYPE_CODE</name><operator pos:start="149:102" pos:end="149:102">)</operator></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:32"><block_content pos:start="151:17" pos:end="151:32">

                <expr_stmt pos:start="151:17" pos:end="151:32"><expr pos:start="151:17" pos:end="151:31"><name pos:start="151:17" pos:end="151:27">color_shift</name> <operator pos:start="151:29" pos:end="151:29">=</operator> <literal type="number" pos:start="151:31" pos:end="151:31">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="153:13" pos:end="155:32">else<block type="pseudo" pos:start="155:17" pos:end="155:32"><block_content pos:start="155:17" pos:end="155:32">

                <expr_stmt pos:start="155:17" pos:end="155:32"><expr pos:start="155:17" pos:end="155:31"><name pos:start="155:17" pos:end="155:27">color_shift</name> <operator pos:start="155:29" pos:end="155:29">=</operator> <literal type="number" pos:start="155:31" pos:end="155:31">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <comment type="block" pos:start="157:13" pos:end="157:36">/* set up the palette */</comment>

            <expr_stmt pos:start="159:13" pos:end="159:54"><expr pos:start="159:13" pos:end="159:53"><name pos:start="159:13" pos:end="159:25">color_packets</name> <operator pos:start="159:27" pos:end="159:27">=</operator> <call pos:start="159:29" pos:end="159:53"><name pos:start="159:29" pos:end="159:48">bytestream2_get_le16</name><argument_list pos:start="159:49" pos:end="159:53">(<argument pos:start="159:50" pos:end="159:52"><expr pos:start="159:50" pos:end="159:52"><operator pos:start="159:50" pos:end="159:50">&amp;</operator><name pos:start="159:51" pos:end="159:52">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:28"><expr pos:start="161:13" pos:end="161:27"><name pos:start="161:13" pos:end="161:23">palette_ptr</name> <operator pos:start="161:25" pos:end="161:25">=</operator> <literal type="number" pos:start="161:27" pos:end="161:27">0</literal></expr>;</expr_stmt>

            <for pos:start="163:13" pos:end="225:13">for <control pos:start="163:17" pos:end="163:47">(<init pos:start="163:18" pos:end="163:23"><expr pos:start="163:18" pos:end="163:22"><name pos:start="163:18" pos:end="163:18">i</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <literal type="number" pos:start="163:22" pos:end="163:22">0</literal></expr>;</init> <condition pos:start="163:25" pos:end="163:42"><expr pos:start="163:25" pos:end="163:41"><name pos:start="163:25" pos:end="163:25">i</name> <operator pos:start="163:27" pos:end="163:27">&lt;</operator> <name pos:start="163:29" pos:end="163:41">color_packets</name></expr>;</condition> <incr pos:start="163:44" pos:end="163:46"><expr pos:start="163:44" pos:end="163:46"><name pos:start="163:44" pos:end="163:44">i</name><operator pos:start="163:45" pos:end="163:46">++</operator></expr></incr>)</control> <block pos:start="163:49" pos:end="225:13">{<block_content pos:start="167:17" pos:end="223:17">

                <comment type="block" pos:start="165:17" pos:end="165:59">/* first byte is how many colors to skip */</comment>

                <expr_stmt pos:start="167:17" pos:end="167:57"><expr pos:start="167:17" pos:end="167:56"><name pos:start="167:17" pos:end="167:27">palette_ptr</name> <operator pos:start="167:29" pos:end="167:30">+=</operator> <call pos:start="167:32" pos:end="167:56"><name pos:start="167:32" pos:end="167:51">bytestream2_get_byte</name><argument_list pos:start="167:52" pos:end="167:56">(<argument pos:start="167:53" pos:end="167:55"><expr pos:start="167:53" pos:end="167:55"><operator pos:start="167:53" pos:end="167:53">&amp;</operator><name pos:start="167:54" pos:end="167:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="171:17" pos:end="171:68">/* next byte indicates how many entries to change */</comment>

                <expr_stmt pos:start="173:17" pos:end="173:58"><expr pos:start="173:17" pos:end="173:57"><name pos:start="173:17" pos:end="173:29">color_changes</name> <operator pos:start="173:31" pos:end="173:31">=</operator> <call pos:start="173:33" pos:end="173:57"><name pos:start="173:33" pos:end="173:52">bytestream2_get_byte</name><argument_list pos:start="173:53" pos:end="173:57">(<argument pos:start="173:54" pos:end="173:56"><expr pos:start="173:54" pos:end="173:56"><operator pos:start="173:54" pos:end="173:54">&amp;</operator><name pos:start="173:55" pos:end="173:56">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="177:17" pos:end="177:74">/* if there are 0 color changes, there are actually 256 */</comment>

                <if_stmt pos:start="179:17" pos:end="181:40"><if pos:start="179:17" pos:end="181:40">if <condition pos:start="179:20" pos:end="179:39">(<expr pos:start="179:21" pos:end="179:38"><name pos:start="179:21" pos:end="179:33">color_changes</name> <operator pos:start="179:35" pos:end="179:36">==</operator> <literal type="number" pos:start="179:38" pos:end="179:38">0</literal></expr>)</condition><block type="pseudo" pos:start="181:21" pos:end="181:40"><block_content pos:start="181:21" pos:end="181:40">

                    <expr_stmt pos:start="181:21" pos:end="181:40"><expr pos:start="181:21" pos:end="181:39"><name pos:start="181:21" pos:end="181:33">color_changes</name> <operator pos:start="181:35" pos:end="181:35">=</operator> <literal type="number" pos:start="181:37" pos:end="181:39">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="185:17" pos:end="187:26"><if pos:start="185:17" pos:end="187:26">if <condition pos:start="185:20" pos:end="185:87">(<expr pos:start="185:21" pos:end="185:86"><call pos:start="185:21" pos:end="185:41"><name pos:start="185:21" pos:end="185:36">bytestream2_tell</name><argument_list pos:start="185:37" pos:end="185:41">(<argument pos:start="185:38" pos:end="185:40"><expr pos:start="185:38" pos:end="185:40"><operator pos:start="185:38" pos:end="185:38">&amp;</operator><name pos:start="185:39" pos:end="185:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="185:43" pos:end="185:43">+</operator> <name pos:start="185:45" pos:end="185:57">color_changes</name> <operator pos:start="185:59" pos:end="185:59">*</operator> <literal type="number" pos:start="185:61" pos:end="185:61">3</literal> <operator pos:start="185:63" pos:end="185:63">&gt;</operator> <name pos:start="185:65" pos:end="185:86">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="187:21" pos:end="187:26"><block_content pos:start="187:21" pos:end="187:26">

                    <break pos:start="187:21" pos:end="187:26">break;</break></block_content></block></if></if_stmt>



                <for pos:start="191:17" pos:end="223:17">for <control pos:start="191:21" pos:end="191:51">(<init pos:start="191:22" pos:end="191:27"><expr pos:start="191:22" pos:end="191:26"><name pos:start="191:22" pos:end="191:22">j</name> <operator pos:start="191:24" pos:end="191:24">=</operator> <literal type="number" pos:start="191:26" pos:end="191:26">0</literal></expr>;</init> <condition pos:start="191:29" pos:end="191:46"><expr pos:start="191:29" pos:end="191:45"><name pos:start="191:29" pos:end="191:29">j</name> <operator pos:start="191:31" pos:end="191:31">&lt;</operator> <name pos:start="191:33" pos:end="191:45">color_changes</name></expr>;</condition> <incr pos:start="191:48" pos:end="191:50"><expr pos:start="191:48" pos:end="191:50"><name pos:start="191:48" pos:end="191:48">j</name><operator pos:start="191:49" pos:end="191:50">++</operator></expr></incr>)</control> <block pos:start="191:53" pos:end="223:17">{<block_content pos:start="193:21" pos:end="221:54">

                    <decl_stmt pos:start="193:21" pos:end="193:39"><decl pos:start="193:21" pos:end="193:38"><type pos:start="193:21" pos:end="193:32"><name pos:start="193:21" pos:end="193:28">unsigned</name> <name pos:start="193:30" pos:end="193:32">int</name></type> <name pos:start="193:34" pos:end="193:38">entry</name></decl>;</decl_stmt>



                    <comment type="block" pos:start="197:21" pos:end="197:55">/* wrap around, for good measure */</comment>

                    <if_stmt pos:start="199:21" pos:end="201:40"><if pos:start="199:21" pos:end="201:40">if <condition pos:start="199:24" pos:end="199:53">(<expr pos:start="199:25" pos:end="199:52"><operator pos:start="199:25" pos:end="199:25">(</operator><name pos:start="199:26" pos:end="199:33">unsigned</name><operator pos:start="199:34" pos:end="199:34">)</operator><name pos:start="199:35" pos:end="199:45">palette_ptr</name> <operator pos:start="199:47" pos:end="199:48">&gt;=</operator> <literal type="number" pos:start="199:50" pos:end="199:52">256</literal></expr>)</condition><block type="pseudo" pos:start="201:25" pos:end="201:40"><block_content pos:start="201:25" pos:end="201:40">

                        <expr_stmt pos:start="201:25" pos:end="201:40"><expr pos:start="201:25" pos:end="201:39"><name pos:start="201:25" pos:end="201:35">palette_ptr</name> <operator pos:start="201:37" pos:end="201:37">=</operator> <literal type="number" pos:start="201:39" pos:end="201:39">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="205:21" pos:end="205:65"><expr pos:start="205:21" pos:end="205:64"><name pos:start="205:21" pos:end="205:21">r</name> <operator pos:start="205:23" pos:end="205:23">=</operator> <call pos:start="205:25" pos:end="205:49"><name pos:start="205:25" pos:end="205:44">bytestream2_get_byte</name><argument_list pos:start="205:45" pos:end="205:49">(<argument pos:start="205:46" pos:end="205:48"><expr pos:start="205:46" pos:end="205:48"><operator pos:start="205:46" pos:end="205:46">&amp;</operator><name pos:start="205:47" pos:end="205:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="205:51" pos:end="205:52">&lt;&lt;</operator> <name pos:start="205:54" pos:end="205:64">color_shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:65"><expr pos:start="207:21" pos:end="207:64"><name pos:start="207:21" pos:end="207:21">g</name> <operator pos:start="207:23" pos:end="207:23">=</operator> <call pos:start="207:25" pos:end="207:49"><name pos:start="207:25" pos:end="207:44">bytestream2_get_byte</name><argument_list pos:start="207:45" pos:end="207:49">(<argument pos:start="207:46" pos:end="207:48"><expr pos:start="207:46" pos:end="207:48"><operator pos:start="207:46" pos:end="207:46">&amp;</operator><name pos:start="207:47" pos:end="207:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="207:51" pos:end="207:52">&lt;&lt;</operator> <name pos:start="207:54" pos:end="207:64">color_shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="209:21" pos:end="209:65"><expr pos:start="209:21" pos:end="209:64"><name pos:start="209:21" pos:end="209:21">b</name> <operator pos:start="209:23" pos:end="209:23">=</operator> <call pos:start="209:25" pos:end="209:49"><name pos:start="209:25" pos:end="209:44">bytestream2_get_byte</name><argument_list pos:start="209:45" pos:end="209:49">(<argument pos:start="209:46" pos:end="209:48"><expr pos:start="209:46" pos:end="209:48"><operator pos:start="209:46" pos:end="209:46">&amp;</operator><name pos:start="209:47" pos:end="209:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="209:51" pos:end="209:52">&lt;&lt;</operator> <name pos:start="209:54" pos:end="209:64">color_shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="211:21" pos:end="211:63"><expr pos:start="211:21" pos:end="211:62"><name pos:start="211:21" pos:end="211:25">entry</name> <operator pos:start="211:27" pos:end="211:27">=</operator> <literal type="number" pos:start="211:29" pos:end="211:33">0xFFU</literal> <operator pos:start="211:35" pos:end="211:36">&lt;&lt;</operator> <literal type="number" pos:start="211:38" pos:end="211:39">24</literal> <operator pos:start="211:41" pos:end="211:41">|</operator> <name pos:start="211:43" pos:end="211:43">r</name> <operator pos:start="211:45" pos:end="211:46">&lt;&lt;</operator> <literal type="number" pos:start="211:48" pos:end="211:49">16</literal> <operator pos:start="211:51" pos:end="211:51">|</operator> <name pos:start="211:53" pos:end="211:53">g</name> <operator pos:start="211:55" pos:end="211:56">&lt;&lt;</operator> <literal type="number" pos:start="211:58" pos:end="211:58">8</literal> <operator pos:start="211:60" pos:end="211:60">|</operator> <name pos:start="211:62" pos:end="211:62">b</name></expr>;</expr_stmt>

                    <if_stmt pos:start="213:21" pos:end="215:54"><if pos:start="213:21" pos:end="215:54">if <condition pos:start="213:24" pos:end="213:41">(<expr pos:start="213:25" pos:end="213:40"><name pos:start="213:25" pos:end="213:35">color_shift</name> <operator pos:start="213:37" pos:end="213:38">==</operator> <literal type="number" pos:start="213:40" pos:end="213:40">2</literal></expr>)</condition><block type="pseudo" pos:start="215:25" pos:end="215:54"><block_content pos:start="215:25" pos:end="215:54">

                        <expr_stmt pos:start="215:25" pos:end="215:54"><expr pos:start="215:25" pos:end="215:53"><name pos:start="215:25" pos:end="215:29">entry</name> <operator pos:start="215:31" pos:end="215:32">|=</operator> <name pos:start="215:34" pos:end="215:38">entry</name> <operator pos:start="215:40" pos:end="215:41">&gt;&gt;</operator> <literal type="number" pos:start="215:43" pos:end="215:43">6</literal> <operator pos:start="215:45" pos:end="215:45">&amp;</operator> <literal type="number" pos:start="215:47" pos:end="215:53">0x30303</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="217:21" pos:end="219:43"><if pos:start="217:21" pos:end="219:43">if <condition pos:start="217:24" pos:end="217:57">(<expr pos:start="217:25" pos:end="217:56"><name pos:start="217:25" pos:end="217:47"><name pos:start="217:25" pos:end="217:25">s</name><operator pos:start="217:26" pos:end="217:27">-&gt;</operator><name pos:start="217:28" pos:end="217:34">palette</name><index pos:start="217:35" pos:end="217:47">[<expr pos:start="217:36" pos:end="217:46"><name pos:start="217:36" pos:end="217:46">palette_ptr</name></expr>]</index></name> <operator pos:start="217:49" pos:end="217:50">!=</operator> <name pos:start="217:52" pos:end="217:56">entry</name></expr>)</condition><block type="pseudo" pos:start="219:25" pos:end="219:43"><block_content pos:start="219:25" pos:end="219:43">

                        <expr_stmt pos:start="219:25" pos:end="219:43"><expr pos:start="219:25" pos:end="219:42"><name pos:start="219:25" pos:end="219:38"><name pos:start="219:25" pos:end="219:25">s</name><operator pos:start="219:26" pos:end="219:27">-&gt;</operator><name pos:start="219:28" pos:end="219:38">new_palette</name></name> <operator pos:start="219:40" pos:end="219:40">=</operator> <literal type="number" pos:start="219:42" pos:end="219:42">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="221:21" pos:end="221:54"><expr pos:start="221:21" pos:end="221:53"><name pos:start="221:21" pos:end="221:45"><name pos:start="221:21" pos:end="221:21">s</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:30">palette</name><index pos:start="221:31" pos:end="221:45">[<expr pos:start="221:32" pos:end="221:44"><name pos:start="221:32" pos:end="221:42">palette_ptr</name><operator pos:start="221:43" pos:end="221:44">++</operator></expr>]</index></name> <operator pos:start="221:47" pos:end="221:47">=</operator> <name pos:start="221:49" pos:end="221:53">entry</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <break pos:start="227:13" pos:end="227:18">break;</break>



        <case pos:start="231:9" pos:end="231:23">case <expr pos:start="231:14" pos:end="231:22"><name pos:start="231:14" pos:end="231:22">FLI_DELTA</name></expr>:</case>

            <expr_stmt pos:start="233:13" pos:end="233:22"><expr pos:start="233:13" pos:end="233:21"><name pos:start="233:13" pos:end="233:17">y_ptr</name> <operator pos:start="233:19" pos:end="233:19">=</operator> <literal type="number" pos:start="233:21" pos:end="233:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:57"><expr pos:start="235:13" pos:end="235:56"><name pos:start="235:13" pos:end="235:28">compressed_lines</name> <operator pos:start="235:30" pos:end="235:30">=</operator> <call pos:start="235:32" pos:end="235:56"><name pos:start="235:32" pos:end="235:51">bytestream2_get_le16</name><argument_list pos:start="235:52" pos:end="235:56">(<argument pos:start="235:53" pos:end="235:55"><expr pos:start="235:53" pos:end="235:55"><operator pos:start="235:53" pos:end="235:53">&amp;</operator><name pos:start="235:54" pos:end="235:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="237:13" pos:end="335:13">while <condition pos:start="237:19" pos:end="237:40">(<expr pos:start="237:20" pos:end="237:39"><name pos:start="237:20" pos:end="237:35">compressed_lines</name> <operator pos:start="237:37" pos:end="237:37">&gt;</operator> <literal type="number" pos:start="237:39" pos:end="237:39">0</literal></expr>)</condition> <block pos:start="237:42" pos:end="335:13">{<block_content pos:start="239:17" pos:end="333:17">

                <if_stmt pos:start="239:17" pos:end="241:26"><if pos:start="239:17" pos:end="241:26">if <condition pos:start="239:20" pos:end="239:71">(<expr pos:start="239:21" pos:end="239:70"><call pos:start="239:21" pos:end="239:41"><name pos:start="239:21" pos:end="239:36">bytestream2_tell</name><argument_list pos:start="239:37" pos:end="239:41">(<argument pos:start="239:38" pos:end="239:40"><expr pos:start="239:38" pos:end="239:40"><operator pos:start="239:38" pos:end="239:38">&amp;</operator><name pos:start="239:39" pos:end="239:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="239:43" pos:end="239:43">+</operator> <literal type="number" pos:start="239:45" pos:end="239:45">2</literal> <operator pos:start="239:47" pos:end="239:47">&gt;</operator> <name pos:start="239:49" pos:end="239:70">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="241:21" pos:end="241:26"><block_content pos:start="241:21" pos:end="241:26">

                    <break pos:start="241:21" pos:end="241:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:57"><expr pos:start="243:17" pos:end="243:56"><name pos:start="243:17" pos:end="243:28">line_packets</name> <operator pos:start="243:30" pos:end="243:30">=</operator> <call pos:start="243:32" pos:end="243:56"><name pos:start="243:32" pos:end="243:51">bytestream2_get_le16</name><argument_list pos:start="243:52" pos:end="243:56">(<argument pos:start="243:53" pos:end="243:55"><expr pos:start="243:53" pos:end="243:55"><operator pos:start="243:53" pos:end="243:53">&amp;</operator><name pos:start="243:54" pos:end="243:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="245:17" pos:end="333:17"><if pos:start="245:17" pos:end="253:17">if <condition pos:start="245:20" pos:end="245:54">(<expr pos:start="245:21" pos:end="245:53"><operator pos:start="245:21" pos:end="245:21">(</operator><name pos:start="245:22" pos:end="245:33">line_packets</name> <operator pos:start="245:35" pos:end="245:35">&amp;</operator> <literal type="number" pos:start="245:37" pos:end="245:42">0xC000</literal><operator pos:start="245:43" pos:end="245:43">)</operator> <operator pos:start="245:45" pos:end="245:46">==</operator> <literal type="number" pos:start="245:48" pos:end="245:53">0xC000</literal></expr>)</condition> <block pos:start="245:56" pos:end="253:17">{<block_content pos:start="249:21" pos:end="251:65">

                    <comment type="line" pos:start="247:21" pos:end="247:39">// line skip opcode</comment>

                    <expr_stmt pos:start="249:21" pos:end="249:49"><expr pos:start="249:21" pos:end="249:48"><name pos:start="249:21" pos:end="249:32">line_packets</name> <operator pos:start="249:34" pos:end="249:34">=</operator> <operator pos:start="249:36" pos:end="249:36">-</operator><name pos:start="249:37" pos:end="249:48">line_packets</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="251:21" pos:end="251:65"><expr pos:start="251:21" pos:end="251:64"><name pos:start="251:21" pos:end="251:25">y_ptr</name> <operator pos:start="251:27" pos:end="251:28">+=</operator> <name pos:start="251:30" pos:end="251:41">line_packets</name> <operator pos:start="251:43" pos:end="251:43">*</operator> <name pos:start="251:45" pos:end="251:64"><name pos:start="251:45" pos:end="251:45">s</name><operator pos:start="251:46" pos:end="251:47">-&gt;</operator><name pos:start="251:48" pos:end="251:52">frame</name><operator pos:start="251:53" pos:end="251:53">.</operator><name pos:start="251:54" pos:end="251:61">linesize</name><index pos:start="251:62" pos:end="251:64">[<expr pos:start="251:63" pos:end="251:63"><literal type="number" pos:start="251:63" pos:end="251:63">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="253:19" pos:end="257:17">else if <condition pos:start="253:27" pos:end="253:61">(<expr pos:start="253:28" pos:end="253:60"><operator pos:start="253:28" pos:end="253:28">(</operator><name pos:start="253:29" pos:end="253:40">line_packets</name> <operator pos:start="253:42" pos:end="253:42">&amp;</operator> <literal type="number" pos:start="253:44" pos:end="253:49">0xC000</literal><operator pos:start="253:50" pos:end="253:50">)</operator> <operator pos:start="253:52" pos:end="253:53">==</operator> <literal type="number" pos:start="253:55" pos:end="253:60">0x4000</literal></expr>)</condition> <block pos:start="253:63" pos:end="257:17">{<block_content pos:start="255:21" pos:end="255:102">

                    <expr_stmt pos:start="255:21" pos:end="255:102"><expr pos:start="255:21" pos:end="255:101"><call pos:start="255:21" pos:end="255:101"><name pos:start="255:21" pos:end="255:26">av_log</name><argument_list pos:start="255:27" pos:end="255:101">(<argument pos:start="255:28" pos:end="255:32"><expr pos:start="255:28" pos:end="255:32"><name pos:start="255:28" pos:end="255:32">avctx</name></expr></argument>, <argument pos:start="255:35" pos:end="255:46"><expr pos:start="255:35" pos:end="255:46"><name pos:start="255:35" pos:end="255:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="255:49" pos:end="255:86"><expr pos:start="255:49" pos:end="255:86"><literal type="string" pos:start="255:49" pos:end="255:86">"Undefined opcode (%x) in DELTA_FLI\n"</literal></expr></argument>, <argument pos:start="255:89" pos:end="255:100"><expr pos:start="255:89" pos:end="255:100"><name pos:start="255:89" pos:end="255:100">line_packets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="257:19" pos:end="267:17">else if <condition pos:start="257:27" pos:end="257:61">(<expr pos:start="257:28" pos:end="257:60"><operator pos:start="257:28" pos:end="257:28">(</operator><name pos:start="257:29" pos:end="257:40">line_packets</name> <operator pos:start="257:42" pos:end="257:42">&amp;</operator> <literal type="number" pos:start="257:44" pos:end="257:49">0xC000</literal><operator pos:start="257:50" pos:end="257:50">)</operator> <operator pos:start="257:52" pos:end="257:53">==</operator> <literal type="number" pos:start="257:55" pos:end="257:60">0x8000</literal></expr>)</condition> <block pos:start="257:63" pos:end="267:17">{<block_content pos:start="261:21" pos:end="265:60">

                    <comment type="line" pos:start="259:21" pos:end="259:41">// "last byte" opcode</comment>

                    <expr_stmt pos:start="261:21" pos:end="261:64"><expr pos:start="261:21" pos:end="261:63"><name pos:start="261:21" pos:end="261:29">pixel_ptr</name><operator pos:start="261:30" pos:end="261:30">=</operator> <name pos:start="261:32" pos:end="261:36">y_ptr</name> <operator pos:start="261:38" pos:end="261:38">+</operator> <name pos:start="261:40" pos:end="261:59"><name pos:start="261:40" pos:end="261:40">s</name><operator pos:start="261:41" pos:end="261:42">-&gt;</operator><name pos:start="261:43" pos:end="261:47">frame</name><operator pos:start="261:48" pos:end="261:48">.</operator><name pos:start="261:49" pos:end="261:56">linesize</name><index pos:start="261:57" pos:end="261:59">[<expr pos:start="261:58" pos:end="261:58"><literal type="number" pos:start="261:58" pos:end="261:58">0</literal></expr>]</index></name> <operator pos:start="261:61" pos:end="261:61">-</operator> <literal type="number" pos:start="261:63" pos:end="261:63">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="263:21" pos:end="263:39"><expr pos:start="263:21" pos:end="263:38"><call pos:start="263:21" pos:end="263:38"><name pos:start="263:21" pos:end="263:35">CHECK_PIXEL_PTR</name><argument_list pos:start="263:36" pos:end="263:38">(<argument pos:start="263:37" pos:end="263:37"><expr pos:start="263:37" pos:end="263:37"><literal type="number" pos:start="263:37" pos:end="263:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="265:21" pos:end="265:60"><expr pos:start="265:21" pos:end="265:59"><name pos:start="265:21" pos:end="265:37"><name pos:start="265:21" pos:end="265:26">pixels</name><index pos:start="265:27" pos:end="265:37">[<expr pos:start="265:28" pos:end="265:36"><name pos:start="265:28" pos:end="265:36">pixel_ptr</name></expr>]</index></name> <operator pos:start="265:39" pos:end="265:39">=</operator> <name pos:start="265:41" pos:end="265:52">line_packets</name> <operator pos:start="265:54" pos:end="265:54">&amp;</operator> <literal type="number" pos:start="265:56" pos:end="265:59">0xff</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="267:19" pos:end="333:17">else <block pos:start="267:24" pos:end="333:17">{<block_content pos:start="269:21" pos:end="331:50">

                    <expr_stmt pos:start="269:21" pos:end="269:39"><expr pos:start="269:21" pos:end="269:38"><name pos:start="269:21" pos:end="269:36">compressed_lines</name><operator pos:start="269:37" pos:end="269:38">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="271:21" pos:end="271:38"><expr pos:start="271:21" pos:end="271:37"><name pos:start="271:21" pos:end="271:29">pixel_ptr</name> <operator pos:start="271:31" pos:end="271:31">=</operator> <name pos:start="271:33" pos:end="271:37">y_ptr</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:39"><expr pos:start="273:21" pos:end="273:38"><call pos:start="273:21" pos:end="273:38"><name pos:start="273:21" pos:end="273:35">CHECK_PIXEL_PTR</name><argument_list pos:start="273:36" pos:end="273:38">(<argument pos:start="273:37" pos:end="273:37"><expr pos:start="273:37" pos:end="273:37"><literal type="number" pos:start="273:37" pos:end="273:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="275:21" pos:end="275:54"><expr pos:start="275:21" pos:end="275:53"><name pos:start="275:21" pos:end="275:35">pixel_countdown</name> <operator pos:start="275:37" pos:end="275:37">=</operator> <name pos:start="275:39" pos:end="275:53"><name pos:start="275:39" pos:end="275:39">s</name><operator pos:start="275:40" pos:end="275:41">-&gt;</operator><name pos:start="275:42" pos:end="275:46">avctx</name><operator pos:start="275:47" pos:end="275:48">-&gt;</operator><name pos:start="275:49" pos:end="275:53">width</name></name></expr>;</expr_stmt>

                    <for pos:start="277:21" pos:end="327:21">for <control pos:start="277:25" pos:end="277:54">(<init pos:start="277:26" pos:end="277:31"><expr pos:start="277:26" pos:end="277:30"><name pos:start="277:26" pos:end="277:26">i</name> <operator pos:start="277:28" pos:end="277:28">=</operator> <literal type="number" pos:start="277:30" pos:end="277:30">0</literal></expr>;</init> <condition pos:start="277:33" pos:end="277:49"><expr pos:start="277:33" pos:end="277:48"><name pos:start="277:33" pos:end="277:33">i</name> <operator pos:start="277:35" pos:end="277:35">&lt;</operator> <name pos:start="277:37" pos:end="277:48">line_packets</name></expr>;</condition> <incr pos:start="277:51" pos:end="277:53"><expr pos:start="277:51" pos:end="277:53"><name pos:start="277:51" pos:end="277:51">i</name><operator pos:start="277:52" pos:end="277:53">++</operator></expr></incr>)</control> <block pos:start="277:56" pos:end="327:21">{<block_content pos:start="279:25" pos:end="325:25">

                        <if_stmt pos:start="279:25" pos:end="281:34"><if pos:start="279:25" pos:end="281:34">if <condition pos:start="279:28" pos:end="279:79">(<expr pos:start="279:29" pos:end="279:78"><call pos:start="279:29" pos:end="279:49"><name pos:start="279:29" pos:end="279:44">bytestream2_tell</name><argument_list pos:start="279:45" pos:end="279:49">(<argument pos:start="279:46" pos:end="279:48"><expr pos:start="279:46" pos:end="279:48"><operator pos:start="279:46" pos:end="279:46">&amp;</operator><name pos:start="279:47" pos:end="279:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="279:51" pos:end="279:51">+</operator> <literal type="number" pos:start="279:53" pos:end="279:53">2</literal> <operator pos:start="279:55" pos:end="279:55">&gt;</operator> <name pos:start="279:57" pos:end="279:78">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="281:29" pos:end="281:34"><block_content pos:start="281:29" pos:end="281:34">

                            <break pos:start="281:29" pos:end="281:34">break;</break></block_content></block></if></if_stmt>

                        <comment type="block" pos:start="283:25" pos:end="283:56">/* account for the skip bytes */</comment>

                        <expr_stmt pos:start="285:25" pos:end="285:63"><expr pos:start="285:25" pos:end="285:62"><name pos:start="285:25" pos:end="285:34">pixel_skip</name> <operator pos:start="285:36" pos:end="285:36">=</operator> <call pos:start="285:38" pos:end="285:62"><name pos:start="285:38" pos:end="285:57">bytestream2_get_byte</name><argument_list pos:start="285:58" pos:end="285:62">(<argument pos:start="285:59" pos:end="285:61"><expr pos:start="285:59" pos:end="285:61"><operator pos:start="285:59" pos:end="285:59">&amp;</operator><name pos:start="285:60" pos:end="285:61">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="287:25" pos:end="287:48"><expr pos:start="287:25" pos:end="287:47"><name pos:start="287:25" pos:end="287:33">pixel_ptr</name> <operator pos:start="287:35" pos:end="287:36">+=</operator> <name pos:start="287:38" pos:end="287:47">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="289:25" pos:end="289:54"><expr pos:start="289:25" pos:end="289:53"><name pos:start="289:25" pos:end="289:39">pixel_countdown</name> <operator pos:start="289:41" pos:end="289:42">-=</operator> <name pos:start="289:44" pos:end="289:53">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="291:25" pos:end="291:77"><expr pos:start="291:25" pos:end="291:76"><name pos:start="291:25" pos:end="291:32">byte_run</name> <operator pos:start="291:34" pos:end="291:34">=</operator> <call pos:start="291:36" pos:end="291:76"><name pos:start="291:36" pos:end="291:46">sign_extend</name><argument_list pos:start="291:47" pos:end="291:76">(<argument pos:start="291:48" pos:end="291:72"><expr pos:start="291:48" pos:end="291:72"><call pos:start="291:48" pos:end="291:72"><name pos:start="291:48" pos:end="291:67">bytestream2_get_byte</name><argument_list pos:start="291:68" pos:end="291:72">(<argument pos:start="291:69" pos:end="291:71"><expr pos:start="291:69" pos:end="291:71"><operator pos:start="291:69" pos:end="291:69">&amp;</operator><name pos:start="291:70" pos:end="291:71">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="291:75" pos:end="291:75"><expr pos:start="291:75" pos:end="291:75"><literal type="number" pos:start="291:75" pos:end="291:75">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="293:25" pos:end="325:25"><if pos:start="293:25" pos:end="311:25">if <condition pos:start="293:28" pos:end="293:41">(<expr pos:start="293:29" pos:end="293:40"><name pos:start="293:29" pos:end="293:36">byte_run</name> <operator pos:start="293:38" pos:end="293:38">&lt;</operator> <literal type="number" pos:start="293:40" pos:end="293:40">0</literal></expr>)</condition> <block pos:start="293:43" pos:end="311:25">{<block_content pos:start="295:29" pos:end="309:29">

                            <expr_stmt pos:start="295:29" pos:end="295:49"><expr pos:start="295:29" pos:end="295:48"><name pos:start="295:29" pos:end="295:36">byte_run</name> <operator pos:start="295:38" pos:end="295:38">=</operator> <operator pos:start="295:40" pos:end="295:40">-</operator><name pos:start="295:41" pos:end="295:48">byte_run</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="297:29" pos:end="297:69"><expr pos:start="297:29" pos:end="297:68"><name pos:start="297:29" pos:end="297:40">palette_idx1</name> <operator pos:start="297:42" pos:end="297:42">=</operator> <call pos:start="297:44" pos:end="297:68"><name pos:start="297:44" pos:end="297:63">bytestream2_get_byte</name><argument_list pos:start="297:64" pos:end="297:68">(<argument pos:start="297:65" pos:end="297:67"><expr pos:start="297:65" pos:end="297:67"><operator pos:start="297:65" pos:end="297:65">&amp;</operator><name pos:start="297:66" pos:end="297:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="299:29" pos:end="299:69"><expr pos:start="299:29" pos:end="299:68"><name pos:start="299:29" pos:end="299:40">palette_idx2</name> <operator pos:start="299:42" pos:end="299:42">=</operator> <call pos:start="299:44" pos:end="299:68"><name pos:start="299:44" pos:end="299:63">bytestream2_get_byte</name><argument_list pos:start="299:64" pos:end="299:68">(<argument pos:start="299:65" pos:end="299:67"><expr pos:start="299:65" pos:end="299:67"><operator pos:start="299:65" pos:end="299:65">&amp;</operator><name pos:start="299:66" pos:end="299:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="301:29" pos:end="301:58"><expr pos:start="301:29" pos:end="301:57"><call pos:start="301:29" pos:end="301:57"><name pos:start="301:29" pos:end="301:43">CHECK_PIXEL_PTR</name><argument_list pos:start="301:44" pos:end="301:57">(<argument pos:start="301:45" pos:end="301:56"><expr pos:start="301:45" pos:end="301:56"><name pos:start="301:45" pos:end="301:52">byte_run</name> <operator pos:start="301:54" pos:end="301:54">*</operator> <literal type="number" pos:start="301:56" pos:end="301:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="303:29" pos:end="309:29">for <control pos:start="303:33" pos:end="303:80">(<init pos:start="303:34" pos:end="303:39"><expr pos:start="303:34" pos:end="303:38"><name pos:start="303:34" pos:end="303:34">j</name> <operator pos:start="303:36" pos:end="303:36">=</operator> <literal type="number" pos:start="303:38" pos:end="303:38">0</literal></expr>;</init> <condition pos:start="303:41" pos:end="303:53"><expr pos:start="303:41" pos:end="303:52"><name pos:start="303:41" pos:end="303:41">j</name> <operator pos:start="303:43" pos:end="303:43">&lt;</operator> <name pos:start="303:45" pos:end="303:52">byte_run</name></expr>;</condition> <incr pos:start="303:55" pos:end="303:79"><expr pos:start="303:55" pos:end="303:57"><name pos:start="303:55" pos:end="303:55">j</name><operator pos:start="303:56" pos:end="303:57">++</operator></expr><operator pos:start="303:58" pos:end="303:58">,</operator> <expr pos:start="303:60" pos:end="303:79"><name pos:start="303:60" pos:end="303:74">pixel_countdown</name> <operator pos:start="303:76" pos:end="303:77">-=</operator> <literal type="number" pos:start="303:79" pos:end="303:79">2</literal></expr></incr>)</control> <block pos:start="303:82" pos:end="309:29">{<block_content pos:start="305:33" pos:end="307:67">

                                <expr_stmt pos:start="305:33" pos:end="305:67"><expr pos:start="305:33" pos:end="305:66"><name pos:start="305:33" pos:end="305:51"><name pos:start="305:33" pos:end="305:38">pixels</name><index pos:start="305:39" pos:end="305:51">[<expr pos:start="305:40" pos:end="305:50"><name pos:start="305:40" pos:end="305:48">pixel_ptr</name><operator pos:start="305:49" pos:end="305:50">++</operator></expr>]</index></name> <operator pos:start="305:53" pos:end="305:53">=</operator> <name pos:start="305:55" pos:end="305:66">palette_idx1</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="307:33" pos:end="307:67"><expr pos:start="307:33" pos:end="307:66"><name pos:start="307:33" pos:end="307:51"><name pos:start="307:33" pos:end="307:38">pixels</name><index pos:start="307:39" pos:end="307:51">[<expr pos:start="307:40" pos:end="307:50"><name pos:start="307:40" pos:end="307:48">pixel_ptr</name><operator pos:start="307:49" pos:end="307:50">++</operator></expr>]</index></name> <operator pos:start="307:53" pos:end="307:53">=</operator> <name pos:start="307:55" pos:end="307:66">palette_idx2</name></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if> <else pos:start="311:27" pos:end="325:25">else <block pos:start="311:32" pos:end="325:25">{<block_content pos:start="313:29" pos:end="323:29">

                            <expr_stmt pos:start="313:29" pos:end="313:58"><expr pos:start="313:29" pos:end="313:57"><call pos:start="313:29" pos:end="313:57"><name pos:start="313:29" pos:end="313:43">CHECK_PIXEL_PTR</name><argument_list pos:start="313:44" pos:end="313:57">(<argument pos:start="313:45" pos:end="313:56"><expr pos:start="313:45" pos:end="313:56"><name pos:start="313:45" pos:end="313:52">byte_run</name> <operator pos:start="313:54" pos:end="313:54">*</operator> <literal type="number" pos:start="313:56" pos:end="313:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="315:29" pos:end="317:38"><if pos:start="315:29" pos:end="317:38">if <condition pos:start="315:32" pos:end="315:94">(<expr pos:start="315:33" pos:end="315:93"><call pos:start="315:33" pos:end="315:53"><name pos:start="315:33" pos:end="315:48">bytestream2_tell</name><argument_list pos:start="315:49" pos:end="315:53">(<argument pos:start="315:50" pos:end="315:52"><expr pos:start="315:50" pos:end="315:52"><operator pos:start="315:50" pos:end="315:50">&amp;</operator><name pos:start="315:51" pos:end="315:52">g2</name></expr></argument>)</argument_list></call> <operator pos:start="315:55" pos:end="315:55">+</operator> <name pos:start="315:57" pos:end="315:64">byte_run</name> <operator pos:start="315:66" pos:end="315:66">*</operator> <literal type="number" pos:start="315:68" pos:end="315:68">2</literal> <operator pos:start="315:70" pos:end="315:70">&gt;</operator> <name pos:start="315:72" pos:end="315:93">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="317:33" pos:end="317:38"><block_content pos:start="317:33" pos:end="317:38">

                                <break pos:start="317:33" pos:end="317:38">break;</break></block_content></block></if></if_stmt>

                            <for pos:start="319:29" pos:end="323:29">for <control pos:start="319:33" pos:end="319:81">(<init pos:start="319:34" pos:end="319:39"><expr pos:start="319:34" pos:end="319:38"><name pos:start="319:34" pos:end="319:34">j</name> <operator pos:start="319:36" pos:end="319:36">=</operator> <literal type="number" pos:start="319:38" pos:end="319:38">0</literal></expr>;</init> <condition pos:start="319:41" pos:end="319:57"><expr pos:start="319:41" pos:end="319:56"><name pos:start="319:41" pos:end="319:41">j</name> <operator pos:start="319:43" pos:end="319:43">&lt;</operator> <name pos:start="319:45" pos:end="319:52">byte_run</name> <operator pos:start="319:54" pos:end="319:54">*</operator> <literal type="number" pos:start="319:56" pos:end="319:56">2</literal></expr>;</condition> <incr pos:start="319:59" pos:end="319:80"><expr pos:start="319:59" pos:end="319:61"><name pos:start="319:59" pos:end="319:59">j</name><operator pos:start="319:60" pos:end="319:61">++</operator></expr><operator pos:start="319:62" pos:end="319:62">,</operator> <expr pos:start="319:64" pos:end="319:80"><name pos:start="319:64" pos:end="319:78">pixel_countdown</name><operator pos:start="319:79" pos:end="319:80">--</operator></expr></incr>)</control> <block pos:start="319:83" pos:end="323:29">{<block_content pos:start="321:33" pos:end="321:80">

                                <expr_stmt pos:start="321:33" pos:end="321:80"><expr pos:start="321:33" pos:end="321:79"><name pos:start="321:33" pos:end="321:51"><name pos:start="321:33" pos:end="321:38">pixels</name><index pos:start="321:39" pos:end="321:51">[<expr pos:start="321:40" pos:end="321:50"><name pos:start="321:40" pos:end="321:48">pixel_ptr</name><operator pos:start="321:49" pos:end="321:50">++</operator></expr>]</index></name> <operator pos:start="321:53" pos:end="321:53">=</operator> <call pos:start="321:55" pos:end="321:79"><name pos:start="321:55" pos:end="321:74">bytestream2_get_byte</name><argument_list pos:start="321:75" pos:end="321:79">(<argument pos:start="321:76" pos:end="321:78"><expr pos:start="321:76" pos:end="321:78"><operator pos:start="321:76" pos:end="321:76">&amp;</operator><name pos:start="321:77" pos:end="321:78">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>



                    <expr_stmt pos:start="331:21" pos:end="331:50"><expr pos:start="331:21" pos:end="331:49"><name pos:start="331:21" pos:end="331:25">y_ptr</name> <operator pos:start="331:27" pos:end="331:28">+=</operator> <name pos:start="331:30" pos:end="331:49"><name pos:start="331:30" pos:end="331:30">s</name><operator pos:start="331:31" pos:end="331:32">-&gt;</operator><name pos:start="331:33" pos:end="331:37">frame</name><operator pos:start="331:38" pos:end="331:38">.</operator><name pos:start="331:39" pos:end="331:46">linesize</name><index pos:start="331:47" pos:end="331:49">[<expr pos:start="331:48" pos:end="331:48"><literal type="number" pos:start="331:48" pos:end="331:48">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></while>

            <break pos:start="337:13" pos:end="337:18">break;</break>



        <case pos:start="341:9" pos:end="341:20">case <expr pos:start="341:14" pos:end="341:19"><name pos:start="341:14" pos:end="341:19">FLI_LC</name></expr>:</case>

            <comment type="block" pos:start="343:13" pos:end="343:33">/* line compressed */</comment>

            <expr_stmt pos:start="345:13" pos:end="345:54"><expr pos:start="345:13" pos:end="345:53"><name pos:start="345:13" pos:end="345:25">starting_line</name> <operator pos:start="345:27" pos:end="345:27">=</operator> <call pos:start="345:29" pos:end="345:53"><name pos:start="345:29" pos:end="345:48">bytestream2_get_le16</name><argument_list pos:start="345:49" pos:end="345:53">(<argument pos:start="345:50" pos:end="345:52"><expr pos:start="345:50" pos:end="345:52"><operator pos:start="345:50" pos:end="345:50">&amp;</operator><name pos:start="345:51" pos:end="345:52">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="347:22"><expr pos:start="347:13" pos:end="347:21"><name pos:start="347:13" pos:end="347:17">y_ptr</name> <operator pos:start="347:19" pos:end="347:19">=</operator> <literal type="number" pos:start="347:21" pos:end="347:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="349:13" pos:end="349:58"><expr pos:start="349:13" pos:end="349:57"><name pos:start="349:13" pos:end="349:17">y_ptr</name> <operator pos:start="349:19" pos:end="349:20">+=</operator> <name pos:start="349:22" pos:end="349:34">starting_line</name> <operator pos:start="349:36" pos:end="349:36">*</operator> <name pos:start="349:38" pos:end="349:57"><name pos:start="349:38" pos:end="349:38">s</name><operator pos:start="349:39" pos:end="349:40">-&gt;</operator><name pos:start="349:41" pos:end="349:45">frame</name><operator pos:start="349:46" pos:end="349:46">.</operator><name pos:start="349:47" pos:end="349:54">linesize</name><index pos:start="349:55" pos:end="349:57">[<expr pos:start="349:56" pos:end="349:56"><literal type="number" pos:start="349:56" pos:end="349:56">0</literal></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="353:13" pos:end="353:57"><expr pos:start="353:13" pos:end="353:56"><name pos:start="353:13" pos:end="353:28">compressed_lines</name> <operator pos:start="353:30" pos:end="353:30">=</operator> <call pos:start="353:32" pos:end="353:56"><name pos:start="353:32" pos:end="353:51">bytestream2_get_le16</name><argument_list pos:start="353:52" pos:end="353:56">(<argument pos:start="353:53" pos:end="353:55"><expr pos:start="353:53" pos:end="353:55"><operator pos:start="353:53" pos:end="353:53">&amp;</operator><name pos:start="353:54" pos:end="353:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="355:13" pos:end="427:13">while <condition pos:start="355:19" pos:end="355:40">(<expr pos:start="355:20" pos:end="355:39"><name pos:start="355:20" pos:end="355:35">compressed_lines</name> <operator pos:start="355:37" pos:end="355:37">&gt;</operator> <literal type="number" pos:start="355:39" pos:end="355:39">0</literal></expr>)</condition> <block pos:start="355:42" pos:end="427:13">{<block_content pos:start="357:17" pos:end="425:35">

                <expr_stmt pos:start="357:17" pos:end="357:34"><expr pos:start="357:17" pos:end="357:33"><name pos:start="357:17" pos:end="357:25">pixel_ptr</name> <operator pos:start="357:27" pos:end="357:27">=</operator> <name pos:start="357:29" pos:end="357:33">y_ptr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:35"><expr pos:start="359:17" pos:end="359:34"><call pos:start="359:17" pos:end="359:34"><name pos:start="359:17" pos:end="359:31">CHECK_PIXEL_PTR</name><argument_list pos:start="359:32" pos:end="359:34">(<argument pos:start="359:33" pos:end="359:33"><expr pos:start="359:33" pos:end="359:33"><literal type="number" pos:start="359:33" pos:end="359:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="361:17" pos:end="361:50"><expr pos:start="361:17" pos:end="361:49"><name pos:start="361:17" pos:end="361:31">pixel_countdown</name> <operator pos:start="361:33" pos:end="361:33">=</operator> <name pos:start="361:35" pos:end="361:49"><name pos:start="361:35" pos:end="361:35">s</name><operator pos:start="361:36" pos:end="361:37">-&gt;</operator><name pos:start="361:38" pos:end="361:42">avctx</name><operator pos:start="361:43" pos:end="361:44">-&gt;</operator><name pos:start="361:45" pos:end="361:49">width</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="363:17" pos:end="365:26"><if pos:start="363:17" pos:end="365:26">if <condition pos:start="363:20" pos:end="363:71">(<expr pos:start="363:21" pos:end="363:70"><call pos:start="363:21" pos:end="363:41"><name pos:start="363:21" pos:end="363:36">bytestream2_tell</name><argument_list pos:start="363:37" pos:end="363:41">(<argument pos:start="363:38" pos:end="363:40"><expr pos:start="363:38" pos:end="363:40"><operator pos:start="363:38" pos:end="363:38">&amp;</operator><name pos:start="363:39" pos:end="363:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="363:43" pos:end="363:43">+</operator> <literal type="number" pos:start="363:45" pos:end="363:45">1</literal> <operator pos:start="363:47" pos:end="363:47">&gt;</operator> <name pos:start="363:49" pos:end="363:70">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="365:21" pos:end="365:26"><block_content pos:start="365:21" pos:end="365:26">

                    <break pos:start="365:21" pos:end="365:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:57"><expr pos:start="367:17" pos:end="367:56"><name pos:start="367:17" pos:end="367:28">line_packets</name> <operator pos:start="367:30" pos:end="367:30">=</operator> <call pos:start="367:32" pos:end="367:56"><name pos:start="367:32" pos:end="367:51">bytestream2_get_byte</name><argument_list pos:start="367:52" pos:end="367:56">(<argument pos:start="367:53" pos:end="367:55"><expr pos:start="367:53" pos:end="367:55"><operator pos:start="367:53" pos:end="367:53">&amp;</operator><name pos:start="367:54" pos:end="367:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="369:17" pos:end="419:17"><if pos:start="369:17" pos:end="419:17">if <condition pos:start="369:20" pos:end="369:37">(<expr pos:start="369:21" pos:end="369:36"><name pos:start="369:21" pos:end="369:32">line_packets</name> <operator pos:start="369:34" pos:end="369:34">&gt;</operator> <literal type="number" pos:start="369:36" pos:end="369:36">0</literal></expr>)</condition> <block pos:start="369:39" pos:end="419:17">{<block_content pos:start="371:21" pos:end="417:21">

                    <for pos:start="371:21" pos:end="417:21">for <control pos:start="371:25" pos:end="371:54">(<init pos:start="371:26" pos:end="371:31"><expr pos:start="371:26" pos:end="371:30"><name pos:start="371:26" pos:end="371:26">i</name> <operator pos:start="371:28" pos:end="371:28">=</operator> <literal type="number" pos:start="371:30" pos:end="371:30">0</literal></expr>;</init> <condition pos:start="371:33" pos:end="371:49"><expr pos:start="371:33" pos:end="371:48"><name pos:start="371:33" pos:end="371:33">i</name> <operator pos:start="371:35" pos:end="371:35">&lt;</operator> <name pos:start="371:37" pos:end="371:48">line_packets</name></expr>;</condition> <incr pos:start="371:51" pos:end="371:53"><expr pos:start="371:51" pos:end="371:53"><name pos:start="371:51" pos:end="371:51">i</name><operator pos:start="371:52" pos:end="371:53">++</operator></expr></incr>)</control> <block pos:start="371:56" pos:end="417:21">{<block_content pos:start="375:25" pos:end="415:25">

                        <comment type="block" pos:start="373:25" pos:end="373:56">/* account for the skip bytes */</comment>

                        <if_stmt pos:start="375:25" pos:end="377:34"><if pos:start="375:25" pos:end="377:34">if <condition pos:start="375:28" pos:end="375:79">(<expr pos:start="375:29" pos:end="375:78"><call pos:start="375:29" pos:end="375:49"><name pos:start="375:29" pos:end="375:44">bytestream2_tell</name><argument_list pos:start="375:45" pos:end="375:49">(<argument pos:start="375:46" pos:end="375:48"><expr pos:start="375:46" pos:end="375:48"><operator pos:start="375:46" pos:end="375:46">&amp;</operator><name pos:start="375:47" pos:end="375:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="375:51" pos:end="375:51">+</operator> <literal type="number" pos:start="375:53" pos:end="375:53">1</literal> <operator pos:start="375:55" pos:end="375:55">&gt;</operator> <name pos:start="375:57" pos:end="375:78">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="377:29" pos:end="377:34"><block_content pos:start="377:29" pos:end="377:34">

                            <break pos:start="377:29" pos:end="377:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="379:25" pos:end="379:63"><expr pos:start="379:25" pos:end="379:62"><name pos:start="379:25" pos:end="379:34">pixel_skip</name> <operator pos:start="379:36" pos:end="379:36">=</operator> <call pos:start="379:38" pos:end="379:62"><name pos:start="379:38" pos:end="379:57">bytestream2_get_byte</name><argument_list pos:start="379:58" pos:end="379:62">(<argument pos:start="379:59" pos:end="379:61"><expr pos:start="379:59" pos:end="379:61"><operator pos:start="379:59" pos:end="379:59">&amp;</operator><name pos:start="379:60" pos:end="379:61">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="381:25" pos:end="381:48"><expr pos:start="381:25" pos:end="381:47"><name pos:start="381:25" pos:end="381:33">pixel_ptr</name> <operator pos:start="381:35" pos:end="381:36">+=</operator> <name pos:start="381:38" pos:end="381:47">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="383:25" pos:end="383:54"><expr pos:start="383:25" pos:end="383:53"><name pos:start="383:25" pos:end="383:39">pixel_countdown</name> <operator pos:start="383:41" pos:end="383:42">-=</operator> <name pos:start="383:44" pos:end="383:53">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="385:25" pos:end="385:76"><expr pos:start="385:25" pos:end="385:75"><name pos:start="385:25" pos:end="385:32">byte_run</name> <operator pos:start="385:34" pos:end="385:34">=</operator> <call pos:start="385:36" pos:end="385:75"><name pos:start="385:36" pos:end="385:46">sign_extend</name><argument_list pos:start="385:47" pos:end="385:75">(<argument pos:start="385:48" pos:end="385:72"><expr pos:start="385:48" pos:end="385:72"><call pos:start="385:48" pos:end="385:72"><name pos:start="385:48" pos:end="385:67">bytestream2_get_byte</name><argument_list pos:start="385:68" pos:end="385:72">(<argument pos:start="385:69" pos:end="385:71"><expr pos:start="385:69" pos:end="385:71"><operator pos:start="385:69" pos:end="385:69">&amp;</operator><name pos:start="385:70" pos:end="385:71">g2</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="385:74" pos:end="385:74"><expr pos:start="385:74" pos:end="385:74"><literal type="number" pos:start="385:74" pos:end="385:74">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="387:25" pos:end="415:25"><if pos:start="387:25" pos:end="401:25">if <condition pos:start="387:28" pos:end="387:41">(<expr pos:start="387:29" pos:end="387:40"><name pos:start="387:29" pos:end="387:36">byte_run</name> <operator pos:start="387:38" pos:end="387:38">&gt;</operator> <literal type="number" pos:start="387:40" pos:end="387:40">0</literal></expr>)</condition> <block pos:start="387:43" pos:end="401:25">{<block_content pos:start="389:29" pos:end="399:29">

                            <expr_stmt pos:start="389:29" pos:end="389:54"><expr pos:start="389:29" pos:end="389:53"><call pos:start="389:29" pos:end="389:53"><name pos:start="389:29" pos:end="389:43">CHECK_PIXEL_PTR</name><argument_list pos:start="389:44" pos:end="389:53">(<argument pos:start="389:45" pos:end="389:52"><expr pos:start="389:45" pos:end="389:52"><name pos:start="389:45" pos:end="389:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="391:29" pos:end="393:38"><if pos:start="391:29" pos:end="393:38">if <condition pos:start="391:32" pos:end="391:90">(<expr pos:start="391:33" pos:end="391:89"><call pos:start="391:33" pos:end="391:53"><name pos:start="391:33" pos:end="391:48">bytestream2_tell</name><argument_list pos:start="391:49" pos:end="391:53">(<argument pos:start="391:50" pos:end="391:52"><expr pos:start="391:50" pos:end="391:52"><operator pos:start="391:50" pos:end="391:50">&amp;</operator><name pos:start="391:51" pos:end="391:52">g2</name></expr></argument>)</argument_list></call> <operator pos:start="391:55" pos:end="391:55">+</operator> <name pos:start="391:57" pos:end="391:64">byte_run</name> <operator pos:start="391:66" pos:end="391:66">&gt;</operator> <name pos:start="391:68" pos:end="391:89">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="393:33" pos:end="393:38"><block_content pos:start="393:33" pos:end="393:38">

                                <break pos:start="393:33" pos:end="393:38">break;</break></block_content></block></if></if_stmt>

                            <for pos:start="395:29" pos:end="399:29">for <control pos:start="395:33" pos:end="395:77">(<init pos:start="395:34" pos:end="395:39"><expr pos:start="395:34" pos:end="395:38"><name pos:start="395:34" pos:end="395:34">j</name> <operator pos:start="395:36" pos:end="395:36">=</operator> <literal type="number" pos:start="395:38" pos:end="395:38">0</literal></expr>;</init> <condition pos:start="395:41" pos:end="395:53"><expr pos:start="395:41" pos:end="395:52"><name pos:start="395:41" pos:end="395:41">j</name> <operator pos:start="395:43" pos:end="395:43">&lt;</operator> <name pos:start="395:45" pos:end="395:52">byte_run</name></expr>;</condition> <incr pos:start="395:55" pos:end="395:76"><expr pos:start="395:55" pos:end="395:57"><name pos:start="395:55" pos:end="395:55">j</name><operator pos:start="395:56" pos:end="395:57">++</operator></expr><operator pos:start="395:58" pos:end="395:58">,</operator> <expr pos:start="395:60" pos:end="395:76"><name pos:start="395:60" pos:end="395:74">pixel_countdown</name><operator pos:start="395:75" pos:end="395:76">--</operator></expr></incr>)</control> <block pos:start="395:79" pos:end="399:29">{<block_content pos:start="397:33" pos:end="397:80">

                                <expr_stmt pos:start="397:33" pos:end="397:80"><expr pos:start="397:33" pos:end="397:79"><name pos:start="397:33" pos:end="397:51"><name pos:start="397:33" pos:end="397:38">pixels</name><index pos:start="397:39" pos:end="397:51">[<expr pos:start="397:40" pos:end="397:50"><name pos:start="397:40" pos:end="397:48">pixel_ptr</name><operator pos:start="397:49" pos:end="397:50">++</operator></expr>]</index></name> <operator pos:start="397:53" pos:end="397:53">=</operator> <call pos:start="397:55" pos:end="397:79"><name pos:start="397:55" pos:end="397:74">bytestream2_get_byte</name><argument_list pos:start="397:75" pos:end="397:79">(<argument pos:start="397:76" pos:end="397:78"><expr pos:start="397:76" pos:end="397:78"><operator pos:start="397:76" pos:end="397:76">&amp;</operator><name pos:start="397:77" pos:end="397:78">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if> <if type="elseif" pos:start="401:27" pos:end="415:25">else if <condition pos:start="401:35" pos:end="401:48">(<expr pos:start="401:36" pos:end="401:47"><name pos:start="401:36" pos:end="401:43">byte_run</name> <operator pos:start="401:45" pos:end="401:45">&lt;</operator> <literal type="number" pos:start="401:47" pos:end="401:47">0</literal></expr>)</condition> <block pos:start="401:50" pos:end="415:25">{<block_content pos:start="403:29" pos:end="413:29">

                            <expr_stmt pos:start="403:29" pos:end="403:49"><expr pos:start="403:29" pos:end="403:48"><name pos:start="403:29" pos:end="403:36">byte_run</name> <operator pos:start="403:38" pos:end="403:38">=</operator> <operator pos:start="403:40" pos:end="403:40">-</operator><name pos:start="403:41" pos:end="403:48">byte_run</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="405:29" pos:end="405:69"><expr pos:start="405:29" pos:end="405:68"><name pos:start="405:29" pos:end="405:40">palette_idx1</name> <operator pos:start="405:42" pos:end="405:42">=</operator> <call pos:start="405:44" pos:end="405:68"><name pos:start="405:44" pos:end="405:63">bytestream2_get_byte</name><argument_list pos:start="405:64" pos:end="405:68">(<argument pos:start="405:65" pos:end="405:67"><expr pos:start="405:65" pos:end="405:67"><operator pos:start="405:65" pos:end="405:65">&amp;</operator><name pos:start="405:66" pos:end="405:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="407:29" pos:end="407:54"><expr pos:start="407:29" pos:end="407:53"><call pos:start="407:29" pos:end="407:53"><name pos:start="407:29" pos:end="407:43">CHECK_PIXEL_PTR</name><argument_list pos:start="407:44" pos:end="407:53">(<argument pos:start="407:45" pos:end="407:52"><expr pos:start="407:45" pos:end="407:52"><name pos:start="407:45" pos:end="407:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="409:29" pos:end="413:29">for <control pos:start="409:33" pos:end="409:77">(<init pos:start="409:34" pos:end="409:39"><expr pos:start="409:34" pos:end="409:38"><name pos:start="409:34" pos:end="409:34">j</name> <operator pos:start="409:36" pos:end="409:36">=</operator> <literal type="number" pos:start="409:38" pos:end="409:38">0</literal></expr>;</init> <condition pos:start="409:41" pos:end="409:53"><expr pos:start="409:41" pos:end="409:52"><name pos:start="409:41" pos:end="409:41">j</name> <operator pos:start="409:43" pos:end="409:43">&lt;</operator> <name pos:start="409:45" pos:end="409:52">byte_run</name></expr>;</condition> <incr pos:start="409:55" pos:end="409:76"><expr pos:start="409:55" pos:end="409:57"><name pos:start="409:55" pos:end="409:55">j</name><operator pos:start="409:56" pos:end="409:57">++</operator></expr><operator pos:start="409:58" pos:end="409:58">,</operator> <expr pos:start="409:60" pos:end="409:76"><name pos:start="409:60" pos:end="409:74">pixel_countdown</name><operator pos:start="409:75" pos:end="409:76">--</operator></expr></incr>)</control> <block pos:start="409:79" pos:end="413:29">{<block_content pos:start="411:33" pos:end="411:67">

                                <expr_stmt pos:start="411:33" pos:end="411:67"><expr pos:start="411:33" pos:end="411:66"><name pos:start="411:33" pos:end="411:51"><name pos:start="411:33" pos:end="411:38">pixels</name><index pos:start="411:39" pos:end="411:51">[<expr pos:start="411:40" pos:end="411:50"><name pos:start="411:40" pos:end="411:48">pixel_ptr</name><operator pos:start="411:49" pos:end="411:50">++</operator></expr>]</index></name> <operator pos:start="411:53" pos:end="411:53">=</operator> <name pos:start="411:55" pos:end="411:66">palette_idx1</name></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="423:17" pos:end="423:46"><expr pos:start="423:17" pos:end="423:45"><name pos:start="423:17" pos:end="423:21">y_ptr</name> <operator pos:start="423:23" pos:end="423:24">+=</operator> <name pos:start="423:26" pos:end="423:45"><name pos:start="423:26" pos:end="423:26">s</name><operator pos:start="423:27" pos:end="423:28">-&gt;</operator><name pos:start="423:29" pos:end="423:33">frame</name><operator pos:start="423:34" pos:end="423:34">.</operator><name pos:start="423:35" pos:end="423:42">linesize</name><index pos:start="423:43" pos:end="423:45">[<expr pos:start="423:44" pos:end="423:44"><literal type="number" pos:start="423:44" pos:end="423:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:35"><expr pos:start="425:17" pos:end="425:34"><name pos:start="425:17" pos:end="425:32">compressed_lines</name><operator pos:start="425:33" pos:end="425:34">--</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="429:13" pos:end="429:18">break;</break>



        <case pos:start="433:9" pos:end="433:23">case <expr pos:start="433:14" pos:end="433:22"><name pos:start="433:14" pos:end="433:22">FLI_BLACK</name></expr>:</case>

            <comment type="block" pos:start="435:13" pos:end="435:73">/* set the whole frame to color 0 (which is usually black) */</comment>

            <expr_stmt pos:start="437:13" pos:end="439:57"><expr pos:start="437:13" pos:end="439:56"><call pos:start="437:13" pos:end="439:56"><name pos:start="437:13" pos:end="437:18">memset</name><argument_list pos:start="437:19" pos:end="439:56">(<argument pos:start="437:20" pos:end="437:25"><expr pos:start="437:20" pos:end="437:25"><name pos:start="437:20" pos:end="437:25">pixels</name></expr></argument>, <argument pos:start="437:28" pos:end="437:28"><expr pos:start="437:28" pos:end="437:28"><literal type="number" pos:start="437:28" pos:end="437:28">0</literal></expr></argument>,

                <argument pos:start="439:17" pos:end="439:55"><expr pos:start="439:17" pos:end="439:55"><name pos:start="439:17" pos:end="439:36"><name pos:start="439:17" pos:end="439:17">s</name><operator pos:start="439:18" pos:end="439:19">-&gt;</operator><name pos:start="439:20" pos:end="439:24">frame</name><operator pos:start="439:25" pos:end="439:25">.</operator><name pos:start="439:26" pos:end="439:33">linesize</name><index pos:start="439:34" pos:end="439:36">[<expr pos:start="439:35" pos:end="439:35"><literal type="number" pos:start="439:35" pos:end="439:35">0</literal></expr>]</index></name> <operator pos:start="439:38" pos:end="439:38">*</operator> <name pos:start="439:40" pos:end="439:55"><name pos:start="439:40" pos:end="439:40">s</name><operator pos:start="439:41" pos:end="439:42">-&gt;</operator><name pos:start="439:43" pos:end="439:47">avctx</name><operator pos:start="439:48" pos:end="439:49">-&gt;</operator><name pos:start="439:50" pos:end="439:55">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="441:13" pos:end="441:18">break;</break>



        <case pos:start="445:9" pos:end="445:22">case <expr pos:start="445:14" pos:end="445:21"><name pos:start="445:14" pos:end="445:21">FLI_BRUN</name></expr>:</case>

            <comment type="block" pos:start="447:13" pos:end="449:64">/* Byte run compression: This chunk type only occurs in the first

             * FLI frame and it will update the entire frame. */</comment>

            <expr_stmt pos:start="451:13" pos:end="451:22"><expr pos:start="451:13" pos:end="451:21"><name pos:start="451:13" pos:end="451:17">y_ptr</name> <operator pos:start="451:19" pos:end="451:19">=</operator> <literal type="number" pos:start="451:21" pos:end="451:21">0</literal></expr>;</expr_stmt>

            <for pos:start="453:13" pos:end="535:13">for <control pos:start="453:17" pos:end="453:62">(<init pos:start="453:18" pos:end="453:27"><expr pos:start="453:18" pos:end="453:26"><name pos:start="453:18" pos:end="453:22">lines</name> <operator pos:start="453:24" pos:end="453:24">=</operator> <literal type="number" pos:start="453:26" pos:end="453:26">0</literal></expr>;</init> <condition pos:start="453:29" pos:end="453:53"><expr pos:start="453:29" pos:end="453:52"><name pos:start="453:29" pos:end="453:33">lines</name> <operator pos:start="453:35" pos:end="453:35">&lt;</operator> <name pos:start="453:37" pos:end="453:52"><name pos:start="453:37" pos:end="453:37">s</name><operator pos:start="453:38" pos:end="453:39">-&gt;</operator><name pos:start="453:40" pos:end="453:44">avctx</name><operator pos:start="453:45" pos:end="453:46">-&gt;</operator><name pos:start="453:47" pos:end="453:52">height</name></name></expr>;</condition> <incr pos:start="453:55" pos:end="453:61"><expr pos:start="453:55" pos:end="453:61"><name pos:start="453:55" pos:end="453:59">lines</name><operator pos:start="453:60" pos:end="453:61">++</operator></expr></incr>)</control> <block pos:start="453:64" pos:end="535:13">{<block_content pos:start="455:17" pos:end="533:46">

                <expr_stmt pos:start="455:17" pos:end="455:34"><expr pos:start="455:17" pos:end="455:33"><name pos:start="455:17" pos:end="455:25">pixel_ptr</name> <operator pos:start="455:27" pos:end="455:27">=</operator> <name pos:start="455:29" pos:end="455:33">y_ptr</name></expr>;</expr_stmt>

                <comment type="block" pos:start="457:17" pos:end="459:37">/* disregard the line packets; instead, iterate through all

                 * pixels on a row */</comment>

                 <expr_stmt pos:start="461:18" pos:end="461:42"><expr pos:start="461:18" pos:end="461:41"><call pos:start="461:18" pos:end="461:41"><name pos:start="461:18" pos:end="461:33">bytestream2_skip</name><argument_list pos:start="461:34" pos:end="461:41">(<argument pos:start="461:35" pos:end="461:37"><expr pos:start="461:35" pos:end="461:37"><operator pos:start="461:35" pos:end="461:35">&amp;</operator><name pos:start="461:36" pos:end="461:37">g2</name></expr></argument>, <argument pos:start="461:40" pos:end="461:40"><expr pos:start="461:40" pos:end="461:40"><literal type="number" pos:start="461:40" pos:end="461:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="463:17" pos:end="463:50"><expr pos:start="463:17" pos:end="463:49"><name pos:start="463:17" pos:end="463:31">pixel_countdown</name> <operator pos:start="463:33" pos:end="463:33">=</operator> <name pos:start="463:35" pos:end="463:49"><name pos:start="463:35" pos:end="463:35">s</name><operator pos:start="463:36" pos:end="463:37">-&gt;</operator><name pos:start="463:38" pos:end="463:42">avctx</name><operator pos:start="463:43" pos:end="463:44">-&gt;</operator><name pos:start="463:45" pos:end="463:49">width</name></name></expr>;</expr_stmt>

                <while pos:start="465:17" pos:end="529:17">while <condition pos:start="465:23" pos:end="465:43">(<expr pos:start="465:24" pos:end="465:42"><name pos:start="465:24" pos:end="465:38">pixel_countdown</name> <operator pos:start="465:40" pos:end="465:40">&gt;</operator> <literal type="number" pos:start="465:42" pos:end="465:42">0</literal></expr>)</condition> <block pos:start="465:45" pos:end="529:17">{<block_content pos:start="467:21" pos:end="527:21">

                    <if_stmt pos:start="467:21" pos:end="469:30"><if pos:start="467:21" pos:end="469:30">if <condition pos:start="467:24" pos:end="467:75">(<expr pos:start="467:25" pos:end="467:74"><call pos:start="467:25" pos:end="467:45"><name pos:start="467:25" pos:end="467:40">bytestream2_tell</name><argument_list pos:start="467:41" pos:end="467:45">(<argument pos:start="467:42" pos:end="467:44"><expr pos:start="467:42" pos:end="467:44"><operator pos:start="467:42" pos:end="467:42">&amp;</operator><name pos:start="467:43" pos:end="467:44">g2</name></expr></argument>)</argument_list></call> <operator pos:start="467:47" pos:end="467:47">+</operator> <literal type="number" pos:start="467:49" pos:end="467:49">1</literal> <operator pos:start="467:51" pos:end="467:51">&gt;</operator> <name pos:start="467:53" pos:end="467:74">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="469:25" pos:end="469:30"><block_content pos:start="469:25" pos:end="469:30">

                        <break pos:start="469:25" pos:end="469:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="471:21" pos:end="471:73"><expr pos:start="471:21" pos:end="471:72"><name pos:start="471:21" pos:end="471:28">byte_run</name> <operator pos:start="471:30" pos:end="471:30">=</operator> <call pos:start="471:32" pos:end="471:72"><name pos:start="471:32" pos:end="471:42">sign_extend</name><argument_list pos:start="471:43" pos:end="471:72">(<argument pos:start="471:44" pos:end="471:68"><expr pos:start="471:44" pos:end="471:68"><call pos:start="471:44" pos:end="471:68"><name pos:start="471:44" pos:end="471:63">bytestream2_get_byte</name><argument_list pos:start="471:64" pos:end="471:68">(<argument pos:start="471:65" pos:end="471:67"><expr pos:start="471:65" pos:end="471:67"><operator pos:start="471:65" pos:end="471:65">&amp;</operator><name pos:start="471:66" pos:end="471:67">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="471:71" pos:end="471:71"><expr pos:start="471:71" pos:end="471:71"><literal type="number" pos:start="471:71" pos:end="471:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="473:21" pos:end="479:21"><if pos:start="473:21" pos:end="479:21">if <condition pos:start="473:24" pos:end="473:34">(<expr pos:start="473:25" pos:end="473:33"><operator pos:start="473:25" pos:end="473:25">!</operator><name pos:start="473:26" pos:end="473:33">byte_run</name></expr>)</condition> <block pos:start="473:36" pos:end="479:21">{<block_content pos:start="475:25" pos:end="477:51">

                        <expr_stmt pos:start="475:25" pos:end="475:81"><expr pos:start="475:25" pos:end="475:80"><call pos:start="475:25" pos:end="475:80"><name pos:start="475:25" pos:end="475:30">av_log</name><argument_list pos:start="475:31" pos:end="475:80">(<argument pos:start="475:32" pos:end="475:36"><expr pos:start="475:32" pos:end="475:36"><name pos:start="475:32" pos:end="475:36">avctx</name></expr></argument>, <argument pos:start="475:39" pos:end="475:50"><expr pos:start="475:39" pos:end="475:50"><name pos:start="475:39" pos:end="475:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="475:53" pos:end="475:79"><expr pos:start="475:53" pos:end="475:79"><literal type="string" pos:start="475:53" pos:end="475:79">"Invalid byte run value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="477:25" pos:end="477:51">return <expr pos:start="477:32" pos:end="477:50"><name pos:start="477:32" pos:end="477:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="483:21" pos:end="527:21"><if pos:start="483:21" pos:end="503:21">if <condition pos:start="483:24" pos:end="483:37">(<expr pos:start="483:25" pos:end="483:36"><name pos:start="483:25" pos:end="483:32">byte_run</name> <operator pos:start="483:34" pos:end="483:34">&gt;</operator> <literal type="number" pos:start="483:36" pos:end="483:36">0</literal></expr>)</condition> <block pos:start="483:39" pos:end="503:21">{<block_content pos:start="485:25" pos:end="501:25">

                        <expr_stmt pos:start="485:25" pos:end="485:65"><expr pos:start="485:25" pos:end="485:64"><name pos:start="485:25" pos:end="485:36">palette_idx1</name> <operator pos:start="485:38" pos:end="485:38">=</operator> <call pos:start="485:40" pos:end="485:64"><name pos:start="485:40" pos:end="485:59">bytestream2_get_byte</name><argument_list pos:start="485:60" pos:end="485:64">(<argument pos:start="485:61" pos:end="485:63"><expr pos:start="485:61" pos:end="485:63"><operator pos:start="485:61" pos:end="485:61">&amp;</operator><name pos:start="485:62" pos:end="485:63">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="487:25" pos:end="487:50"><expr pos:start="487:25" pos:end="487:49"><call pos:start="487:25" pos:end="487:49"><name pos:start="487:25" pos:end="487:39">CHECK_PIXEL_PTR</name><argument_list pos:start="487:40" pos:end="487:49">(<argument pos:start="487:41" pos:end="487:48"><expr pos:start="487:41" pos:end="487:48"><name pos:start="487:41" pos:end="487:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="489:25" pos:end="501:25">for <control pos:start="489:29" pos:end="489:54">(<init pos:start="489:30" pos:end="489:35"><expr pos:start="489:30" pos:end="489:34"><name pos:start="489:30" pos:end="489:30">j</name> <operator pos:start="489:32" pos:end="489:32">=</operator> <literal type="number" pos:start="489:34" pos:end="489:34">0</literal></expr>;</init> <condition pos:start="489:37" pos:end="489:49"><expr pos:start="489:37" pos:end="489:48"><name pos:start="489:37" pos:end="489:37">j</name> <operator pos:start="489:39" pos:end="489:39">&lt;</operator> <name pos:start="489:41" pos:end="489:48">byte_run</name></expr>;</condition> <incr pos:start="489:51" pos:end="489:53"><expr pos:start="489:51" pos:end="489:53"><name pos:start="489:51" pos:end="489:51">j</name><operator pos:start="489:52" pos:end="489:53">++</operator></expr></incr>)</control> <block pos:start="489:56" pos:end="501:25">{<block_content pos:start="491:29" pos:end="499:63">

                            <expr_stmt pos:start="491:29" pos:end="491:63"><expr pos:start="491:29" pos:end="491:62"><name pos:start="491:29" pos:end="491:47"><name pos:start="491:29" pos:end="491:34">pixels</name><index pos:start="491:35" pos:end="491:47">[<expr pos:start="491:36" pos:end="491:46"><name pos:start="491:36" pos:end="491:44">pixel_ptr</name><operator pos:start="491:45" pos:end="491:46">++</operator></expr>]</index></name> <operator pos:start="491:49" pos:end="491:49">=</operator> <name pos:start="491:51" pos:end="491:62">palette_idx1</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="493:29" pos:end="493:46"><expr pos:start="493:29" pos:end="493:45"><name pos:start="493:29" pos:end="493:43">pixel_countdown</name><operator pos:start="493:44" pos:end="493:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="495:29" pos:end="499:63"><if pos:start="495:29" pos:end="499:63">if <condition pos:start="495:32" pos:end="495:52">(<expr pos:start="495:33" pos:end="495:51"><name pos:start="495:33" pos:end="495:47">pixel_countdown</name> <operator pos:start="495:49" pos:end="495:49">&lt;</operator> <literal type="number" pos:start="495:51" pos:end="495:51">0</literal></expr>)</condition><block type="pseudo" pos:start="497:33" pos:end="499:63"><block_content pos:start="497:33" pos:end="499:63">

                                <expr_stmt pos:start="497:33" pos:end="499:63"><expr pos:start="497:33" pos:end="499:62"><call pos:start="497:33" pos:end="499:62"><name pos:start="497:33" pos:end="497:38">av_log</name><argument_list pos:start="497:39" pos:end="499:62">(<argument pos:start="497:40" pos:end="497:44"><expr pos:start="497:40" pos:end="497:44"><name pos:start="497:40" pos:end="497:44">avctx</name></expr></argument>, <argument pos:start="497:47" pos:end="497:58"><expr pos:start="497:47" pos:end="497:58"><name pos:start="497:47" pos:end="497:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="497:61" pos:end="497:99"><expr pos:start="497:61" pos:end="497:99"><literal type="string" pos:start="497:61" pos:end="497:99">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

                                       <argument pos:start="499:40" pos:end="499:54"><expr pos:start="499:40" pos:end="499:54"><name pos:start="499:40" pos:end="499:54">pixel_countdown</name></expr></argument>, <argument pos:start="499:57" pos:end="499:61"><expr pos:start="499:57" pos:end="499:61"><name pos:start="499:57" pos:end="499:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="503:23" pos:end="527:21">else <block pos:start="503:28" pos:end="527:21">{<block_content pos:start="505:25" pos:end="525:25">  <comment type="block" pos:start="503:31" pos:end="503:62">/* copy bytes if byte_run &lt; 0 */</comment>

                        <expr_stmt pos:start="505:25" pos:end="505:45"><expr pos:start="505:25" pos:end="505:44"><name pos:start="505:25" pos:end="505:32">byte_run</name> <operator pos:start="505:34" pos:end="505:34">=</operator> <operator pos:start="505:36" pos:end="505:36">-</operator><name pos:start="505:37" pos:end="505:44">byte_run</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="507:25" pos:end="507:50"><expr pos:start="507:25" pos:end="507:49"><call pos:start="507:25" pos:end="507:49"><name pos:start="507:25" pos:end="507:39">CHECK_PIXEL_PTR</name><argument_list pos:start="507:40" pos:end="507:49">(<argument pos:start="507:41" pos:end="507:48"><expr pos:start="507:41" pos:end="507:48"><name pos:start="507:41" pos:end="507:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="509:25" pos:end="511:34"><if pos:start="509:25" pos:end="511:34">if <condition pos:start="509:28" pos:end="509:86">(<expr pos:start="509:29" pos:end="509:85"><call pos:start="509:29" pos:end="509:49"><name pos:start="509:29" pos:end="509:44">bytestream2_tell</name><argument_list pos:start="509:45" pos:end="509:49">(<argument pos:start="509:46" pos:end="509:48"><expr pos:start="509:46" pos:end="509:48"><operator pos:start="509:46" pos:end="509:46">&amp;</operator><name pos:start="509:47" pos:end="509:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="509:51" pos:end="509:51">+</operator> <name pos:start="509:53" pos:end="509:60">byte_run</name> <operator pos:start="509:62" pos:end="509:62">&gt;</operator> <name pos:start="509:64" pos:end="509:85">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="511:29" pos:end="511:34"><block_content pos:start="511:29" pos:end="511:34">

                            <break pos:start="511:29" pos:end="511:34">break;</break></block_content></block></if></if_stmt>

                        <for pos:start="513:25" pos:end="525:25">for <control pos:start="513:29" pos:end="513:54">(<init pos:start="513:30" pos:end="513:35"><expr pos:start="513:30" pos:end="513:34"><name pos:start="513:30" pos:end="513:30">j</name> <operator pos:start="513:32" pos:end="513:32">=</operator> <literal type="number" pos:start="513:34" pos:end="513:34">0</literal></expr>;</init> <condition pos:start="513:37" pos:end="513:49"><expr pos:start="513:37" pos:end="513:48"><name pos:start="513:37" pos:end="513:37">j</name> <operator pos:start="513:39" pos:end="513:39">&lt;</operator> <name pos:start="513:41" pos:end="513:48">byte_run</name></expr>;</condition> <incr pos:start="513:51" pos:end="513:53"><expr pos:start="513:51" pos:end="513:53"><name pos:start="513:51" pos:end="513:51">j</name><operator pos:start="513:52" pos:end="513:53">++</operator></expr></incr>)</control> <block pos:start="513:56" pos:end="525:25">{<block_content pos:start="515:29" pos:end="523:63">

                            <expr_stmt pos:start="515:29" pos:end="515:76"><expr pos:start="515:29" pos:end="515:75"><name pos:start="515:29" pos:end="515:47"><name pos:start="515:29" pos:end="515:34">pixels</name><index pos:start="515:35" pos:end="515:47">[<expr pos:start="515:36" pos:end="515:46"><name pos:start="515:36" pos:end="515:44">pixel_ptr</name><operator pos:start="515:45" pos:end="515:46">++</operator></expr>]</index></name> <operator pos:start="515:49" pos:end="515:49">=</operator> <call pos:start="515:51" pos:end="515:75"><name pos:start="515:51" pos:end="515:70">bytestream2_get_byte</name><argument_list pos:start="515:71" pos:end="515:75">(<argument pos:start="515:72" pos:end="515:74"><expr pos:start="515:72" pos:end="515:74"><operator pos:start="515:72" pos:end="515:72">&amp;</operator><name pos:start="515:73" pos:end="515:74">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="517:29" pos:end="517:46"><expr pos:start="517:29" pos:end="517:45"><name pos:start="517:29" pos:end="517:43">pixel_countdown</name><operator pos:start="517:44" pos:end="517:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="519:29" pos:end="523:63"><if pos:start="519:29" pos:end="523:63">if <condition pos:start="519:32" pos:end="519:52">(<expr pos:start="519:33" pos:end="519:51"><name pos:start="519:33" pos:end="519:47">pixel_countdown</name> <operator pos:start="519:49" pos:end="519:49">&lt;</operator> <literal type="number" pos:start="519:51" pos:end="519:51">0</literal></expr>)</condition><block type="pseudo" pos:start="521:33" pos:end="523:63"><block_content pos:start="521:33" pos:end="523:63">

                                <expr_stmt pos:start="521:33" pos:end="523:63"><expr pos:start="521:33" pos:end="523:62"><call pos:start="521:33" pos:end="523:62"><name pos:start="521:33" pos:end="521:38">av_log</name><argument_list pos:start="521:39" pos:end="523:62">(<argument pos:start="521:40" pos:end="521:44"><expr pos:start="521:40" pos:end="521:44"><name pos:start="521:40" pos:end="521:44">avctx</name></expr></argument>, <argument pos:start="521:47" pos:end="521:58"><expr pos:start="521:47" pos:end="521:58"><name pos:start="521:47" pos:end="521:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="521:61" pos:end="521:99"><expr pos:start="521:61" pos:end="521:99"><literal type="string" pos:start="521:61" pos:end="521:99">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

                                       <argument pos:start="523:40" pos:end="523:54"><expr pos:start="523:40" pos:end="523:54"><name pos:start="523:40" pos:end="523:54">pixel_countdown</name></expr></argument>, <argument pos:start="523:57" pos:end="523:61"><expr pos:start="523:57" pos:end="523:61"><name pos:start="523:57" pos:end="523:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></while>



                <expr_stmt pos:start="533:17" pos:end="533:46"><expr pos:start="533:17" pos:end="533:45"><name pos:start="533:17" pos:end="533:21">y_ptr</name> <operator pos:start="533:23" pos:end="533:24">+=</operator> <name pos:start="533:26" pos:end="533:45"><name pos:start="533:26" pos:end="533:26">s</name><operator pos:start="533:27" pos:end="533:28">-&gt;</operator><name pos:start="533:29" pos:end="533:33">frame</name><operator pos:start="533:34" pos:end="533:34">.</operator><name pos:start="533:35" pos:end="533:42">linesize</name><index pos:start="533:43" pos:end="533:45">[<expr pos:start="533:44" pos:end="533:44"><literal type="number" pos:start="533:44" pos:end="533:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="537:13" pos:end="537:18">break;</break>



        <case pos:start="541:9" pos:end="541:22">case <expr pos:start="541:14" pos:end="541:21"><name pos:start="541:14" pos:end="541:21">FLI_COPY</name></expr>:</case>

            <comment type="block" pos:start="543:13" pos:end="543:53">/* copy the chunk (uncompressed frame) */</comment>

            <if_stmt pos:start="545:13" pos:end="565:13"><if pos:start="545:13" pos:end="553:13">if <condition pos:start="545:16" pos:end="545:69">(<expr pos:start="545:17" pos:end="545:68"><name pos:start="545:17" pos:end="545:26">chunk_size</name> <operator pos:start="545:28" pos:end="545:28">-</operator> <literal type="number" pos:start="545:30" pos:end="545:30">6</literal> <operator pos:start="545:32" pos:end="545:33">!=</operator> <name pos:start="545:35" pos:end="545:49"><name pos:start="545:35" pos:end="545:35">s</name><operator pos:start="545:36" pos:end="545:37">-&gt;</operator><name pos:start="545:38" pos:end="545:42">avctx</name><operator pos:start="545:43" pos:end="545:44">-&gt;</operator><name pos:start="545:45" pos:end="545:49">width</name></name> <operator pos:start="545:51" pos:end="545:51">*</operator> <name pos:start="545:53" pos:end="545:68"><name pos:start="545:53" pos:end="545:53">s</name><operator pos:start="545:54" pos:end="545:55">-&gt;</operator><name pos:start="545:56" pos:end="545:60">avctx</name><operator pos:start="545:61" pos:end="545:62">-&gt;</operator><name pos:start="545:63" pos:end="545:68">height</name></name></expr>)</condition> <block pos:start="545:71" pos:end="553:13">{<block_content pos:start="547:17" pos:end="551:54">

                <expr_stmt pos:start="547:17" pos:end="549:79"><expr pos:start="547:17" pos:end="549:78"><call pos:start="547:17" pos:end="549:78"><name pos:start="547:17" pos:end="547:22">av_log</name><argument_list pos:start="547:23" pos:end="549:78">(<argument pos:start="547:24" pos:end="547:28"><expr pos:start="547:24" pos:end="547:28"><name pos:start="547:24" pos:end="547:28">avctx</name></expr></argument>, <argument pos:start="547:31" pos:end="547:42"><expr pos:start="547:31" pos:end="547:42"><name pos:start="547:31" pos:end="547:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="547:45" pos:end="549:61"><expr pos:start="547:45" pos:end="549:61"><literal type="string" pos:start="547:45" pos:end="547:89">"In chunk FLI_COPY : source data (%d bytes) "</literal> \

                       <literal type="string" pos:start="549:24" pos:end="549:61">"has incorrect size, skipping chunk\n"</literal></expr></argument>, <argument pos:start="549:64" pos:end="549:77"><expr pos:start="549:64" pos:end="549:77"><name pos:start="549:64" pos:end="549:73">chunk_size</name> <operator pos:start="549:75" pos:end="549:75">-</operator> <literal type="number" pos:start="549:77" pos:end="549:77">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="551:17" pos:end="551:54"><expr pos:start="551:17" pos:end="551:53"><call pos:start="551:17" pos:end="551:53"><name pos:start="551:17" pos:end="551:32">bytestream2_skip</name><argument_list pos:start="551:33" pos:end="551:53">(<argument pos:start="551:34" pos:end="551:36"><expr pos:start="551:34" pos:end="551:36"><operator pos:start="551:34" pos:end="551:34">&amp;</operator><name pos:start="551:35" pos:end="551:36">g2</name></expr></argument>, <argument pos:start="551:39" pos:end="551:52"><expr pos:start="551:39" pos:end="551:52"><name pos:start="551:39" pos:end="551:48">chunk_size</name> <operator pos:start="551:50" pos:end="551:50">-</operator> <literal type="number" pos:start="551:52" pos:end="551:52">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="553:15" pos:end="565:13">else <block pos:start="553:20" pos:end="565:13">{<block_content pos:start="555:17" pos:end="563:17">

                <for pos:start="555:17" pos:end="563:17">for <control pos:start="555:21" pos:end="557:51">(<init pos:start="555:22" pos:end="555:31"><expr pos:start="555:22" pos:end="555:30"><name pos:start="555:22" pos:end="555:26">y_ptr</name> <operator pos:start="555:28" pos:end="555:28">=</operator> <literal type="number" pos:start="555:30" pos:end="555:30">0</literal></expr>;</init> <condition pos:start="555:33" pos:end="555:80"><expr pos:start="555:33" pos:end="555:79"><name pos:start="555:33" pos:end="555:37">y_ptr</name> <operator pos:start="555:39" pos:end="555:39">&lt;</operator> <name pos:start="555:41" pos:end="555:60"><name pos:start="555:41" pos:end="555:41">s</name><operator pos:start="555:42" pos:end="555:43">-&gt;</operator><name pos:start="555:44" pos:end="555:48">frame</name><operator pos:start="555:49" pos:end="555:49">.</operator><name pos:start="555:50" pos:end="555:57">linesize</name><index pos:start="555:58" pos:end="555:60">[<expr pos:start="555:59" pos:end="555:59"><literal type="number" pos:start="555:59" pos:end="555:59">0</literal></expr>]</index></name> <operator pos:start="555:62" pos:end="555:62">*</operator> <name pos:start="555:64" pos:end="555:79"><name pos:start="555:64" pos:end="555:64">s</name><operator pos:start="555:65" pos:end="555:66">-&gt;</operator><name pos:start="555:67" pos:end="555:71">avctx</name><operator pos:start="555:72" pos:end="555:73">-&gt;</operator><name pos:start="555:74" pos:end="555:79">height</name></name></expr>;</condition>

                     <incr pos:start="557:22" pos:end="557:50"><expr pos:start="557:22" pos:end="557:50"><name pos:start="557:22" pos:end="557:26">y_ptr</name> <operator pos:start="557:28" pos:end="557:29">+=</operator> <name pos:start="557:31" pos:end="557:50"><name pos:start="557:31" pos:end="557:31">s</name><operator pos:start="557:32" pos:end="557:33">-&gt;</operator><name pos:start="557:34" pos:end="557:38">frame</name><operator pos:start="557:39" pos:end="557:39">.</operator><name pos:start="557:40" pos:end="557:47">linesize</name><index pos:start="557:48" pos:end="557:50">[<expr pos:start="557:49" pos:end="557:49"><literal type="number" pos:start="557:49" pos:end="557:49">0</literal></expr>]</index></name></expr></incr>)</control> <block pos:start="557:53" pos:end="563:17">{<block_content pos:start="559:21" pos:end="561:60">

                    <expr_stmt pos:start="559:21" pos:end="561:60"><expr pos:start="559:21" pos:end="561:59"><call pos:start="559:21" pos:end="561:59"><name pos:start="559:21" pos:end="559:42">bytestream2_get_buffer</name><argument_list pos:start="559:43" pos:end="561:59">(<argument pos:start="559:44" pos:end="559:46"><expr pos:start="559:44" pos:end="559:46"><operator pos:start="559:44" pos:end="559:44">&amp;</operator><name pos:start="559:45" pos:end="559:46">g2</name></expr></argument>, <argument pos:start="559:49" pos:end="559:62"><expr pos:start="559:49" pos:end="559:62"><operator pos:start="559:49" pos:end="559:49">&amp;</operator><name pos:start="559:50" pos:end="559:62"><name pos:start="559:50" pos:end="559:55">pixels</name><index pos:start="559:56" pos:end="559:62">[<expr pos:start="559:57" pos:end="559:61"><name pos:start="559:57" pos:end="559:61">y_ptr</name></expr>]</index></name></expr></argument>,

                                           <argument pos:start="561:44" pos:end="561:58"><expr pos:start="561:44" pos:end="561:58"><name pos:start="561:44" pos:end="561:58"><name pos:start="561:44" pos:end="561:44">s</name><operator pos:start="561:45" pos:end="561:46">-&gt;</operator><name pos:start="561:47" pos:end="561:51">avctx</name><operator pos:start="561:52" pos:end="561:53">-&gt;</operator><name pos:start="561:54" pos:end="561:58">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="567:13" pos:end="567:18">break;</break>



        <case pos:start="571:9" pos:end="571:22">case <expr pos:start="571:14" pos:end="571:21"><name pos:start="571:14" pos:end="571:21">FLI_MINI</name></expr>:</case>

            <comment type="block" pos:start="573:13" pos:end="573:67">/* some sort of a thumbnail? disregard this chunk... */</comment>

            <break pos:start="575:13" pos:end="575:18">break;</break>



        <default pos:start="579:9" pos:end="579:16">default:</default>

            <expr_stmt pos:start="581:13" pos:end="581:85"><expr pos:start="581:13" pos:end="581:84"><call pos:start="581:13" pos:end="581:84"><name pos:start="581:13" pos:end="581:18">av_log</name><argument_list pos:start="581:19" pos:end="581:84">(<argument pos:start="581:20" pos:end="581:24"><expr pos:start="581:20" pos:end="581:24"><name pos:start="581:20" pos:end="581:24">avctx</name></expr></argument>, <argument pos:start="581:27" pos:end="581:38"><expr pos:start="581:27" pos:end="581:38"><name pos:start="581:27" pos:end="581:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="581:41" pos:end="581:71"><expr pos:start="581:41" pos:end="581:71"><literal type="string" pos:start="581:41" pos:end="581:71">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument pos:start="581:74" pos:end="581:83"><expr pos:start="581:74" pos:end="581:83"><name pos:start="581:74" pos:end="581:83">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="583:13" pos:end="583:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="589:9" pos:end="591:82"><if pos:start="589:9" pos:end="591:82">if <condition pos:start="589:12" pos:end="589:63">(<expr pos:start="589:13" pos:end="589:62"><name pos:start="589:13" pos:end="589:34">stream_ptr_after_chunk</name> <operator pos:start="589:36" pos:end="589:36">-</operator> <call pos:start="589:38" pos:end="589:58"><name pos:start="589:38" pos:end="589:53">bytestream2_tell</name><argument_list pos:start="589:54" pos:end="589:58">(<argument pos:start="589:55" pos:end="589:57"><expr pos:start="589:55" pos:end="589:57"><operator pos:start="589:55" pos:end="589:55">&amp;</operator><name pos:start="589:56" pos:end="589:57">g2</name></expr></argument>)</argument_list></call> <operator pos:start="589:60" pos:end="589:60">&gt;</operator> <literal type="number" pos:start="589:62" pos:end="589:62">0</literal></expr>)</condition><block type="pseudo" pos:start="591:13" pos:end="591:82"><block_content pos:start="591:13" pos:end="591:82">

            <expr_stmt pos:start="591:13" pos:end="591:82"><expr pos:start="591:13" pos:end="591:81"><call pos:start="591:13" pos:end="591:81"><name pos:start="591:13" pos:end="591:28">bytestream2_skip</name><argument_list pos:start="591:29" pos:end="591:81">(<argument pos:start="591:30" pos:end="591:32"><expr pos:start="591:30" pos:end="591:32"><operator pos:start="591:30" pos:end="591:30">&amp;</operator><name pos:start="591:31" pos:end="591:32">g2</name></expr></argument>, <argument pos:start="591:35" pos:end="591:80"><expr pos:start="591:35" pos:end="591:80"><name pos:start="591:35" pos:end="591:56">stream_ptr_after_chunk</name> <operator pos:start="591:58" pos:end="591:58">-</operator> <call pos:start="591:60" pos:end="591:80"><name pos:start="591:60" pos:end="591:75">bytestream2_tell</name><argument_list pos:start="591:76" pos:end="591:80">(<argument pos:start="591:77" pos:end="591:79"><expr pos:start="591:77" pos:end="591:79"><operator pos:start="591:77" pos:end="591:77">&amp;</operator><name pos:start="591:78" pos:end="591:79">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="595:9" pos:end="595:33"><expr pos:start="595:9" pos:end="595:32"><name pos:start="595:9" pos:end="595:18">frame_size</name> <operator pos:start="595:20" pos:end="595:21">-=</operator> <name pos:start="595:23" pos:end="595:32">chunk_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="597:9" pos:end="597:21"><expr pos:start="597:9" pos:end="597:20"><name pos:start="597:9" pos:end="597:18">num_chunks</name><operator pos:start="597:19" pos:end="597:20">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="603:5" pos:end="605:71">/* by the end of the chunk, the stream ptr should equal the frame

     * size (minus 1 or 2, possibly); if it doesn't, issue a warning */</comment>

    <if_stmt pos:start="607:5" pos:end="613:59"><if pos:start="607:5" pos:end="613:59">if <condition pos:start="607:8" pos:end="607:44">(<expr pos:start="607:9" pos:end="607:43"><call pos:start="607:9" pos:end="607:39"><name pos:start="607:9" pos:end="607:34">bytestream2_get_bytes_left</name><argument_list pos:start="607:35" pos:end="607:39">(<argument pos:start="607:36" pos:end="607:38"><expr pos:start="607:36" pos:end="607:38"><operator pos:start="607:36" pos:end="607:36">&amp;</operator><name pos:start="607:37" pos:end="607:38">g2</name></expr></argument>)</argument_list></call> <operator pos:start="607:41" pos:end="607:41">&gt;</operator> <literal type="number" pos:start="607:43" pos:end="607:43">2</literal></expr>)</condition><block type="pseudo" pos:start="609:9" pos:end="613:59"><block_content pos:start="609:9" pos:end="613:59">

        <expr_stmt pos:start="609:9" pos:end="613:59"><expr pos:start="609:9" pos:end="613:58"><call pos:start="609:9" pos:end="613:58"><name pos:start="609:9" pos:end="609:14">av_log</name><argument_list pos:start="609:15" pos:end="613:58">(<argument pos:start="609:16" pos:end="609:20"><expr pos:start="609:16" pos:end="609:20"><name pos:start="609:16" pos:end="609:20">avctx</name></expr></argument>, <argument pos:start="609:23" pos:end="609:34"><expr pos:start="609:23" pos:end="609:34"><name pos:start="609:23" pos:end="609:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="609:37" pos:end="611:43"><expr pos:start="609:37" pos:end="611:43"><literal type="string" pos:start="609:37" pos:end="609:80">"Processed FLI chunk where chunk size = %d "</literal> \

               <literal type="string" pos:start="611:16" pos:end="611:43">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument pos:start="611:46" pos:end="611:53"><expr pos:start="611:46" pos:end="611:53"><name pos:start="611:46" pos:end="611:53">buf_size</name></expr></argument>,

               <argument pos:start="613:16" pos:end="613:57"><expr pos:start="613:16" pos:end="613:57"><name pos:start="613:16" pos:end="613:23">buf_size</name> <operator pos:start="613:25" pos:end="613:25">-</operator> <call pos:start="613:27" pos:end="613:57"><name pos:start="613:27" pos:end="613:52">bytestream2_get_bytes_left</name><argument_list pos:start="613:53" pos:end="613:57">(<argument pos:start="613:54" pos:end="613:56"><expr pos:start="613:54" pos:end="613:56"><operator pos:start="613:54" pos:end="613:54">&amp;</operator><name pos:start="613:55" pos:end="613:56">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="617:5" pos:end="617:51">/* make the palette available on the way out */</comment>

    <expr_stmt pos:start="619:5" pos:end="619:57"><expr pos:start="619:5" pos:end="619:56"><call pos:start="619:5" pos:end="619:56"><name pos:start="619:5" pos:end="619:10">memcpy</name><argument_list pos:start="619:11" pos:end="619:56">(<argument pos:start="619:12" pos:end="619:27"><expr pos:start="619:12" pos:end="619:27"><name pos:start="619:12" pos:end="619:27"><name pos:start="619:12" pos:end="619:12">s</name><operator pos:start="619:13" pos:end="619:14">-&gt;</operator><name pos:start="619:15" pos:end="619:19">frame</name><operator pos:start="619:20" pos:end="619:20">.</operator><name pos:start="619:21" pos:end="619:24">data</name><index pos:start="619:25" pos:end="619:27">[<expr pos:start="619:26" pos:end="619:26"><literal type="number" pos:start="619:26" pos:end="619:26">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="619:30" pos:end="619:39"><expr pos:start="619:30" pos:end="619:39"><name pos:start="619:30" pos:end="619:39"><name pos:start="619:30" pos:end="619:30">s</name><operator pos:start="619:31" pos:end="619:32">-&gt;</operator><name pos:start="619:33" pos:end="619:39">palette</name></name></expr></argument>, <argument pos:start="619:42" pos:end="619:55"><expr pos:start="619:42" pos:end="619:55"><name pos:start="619:42" pos:end="619:55">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="621:5" pos:end="627:5"><if pos:start="621:5" pos:end="627:5">if <condition pos:start="621:8" pos:end="621:23">(<expr pos:start="621:9" pos:end="621:22"><name pos:start="621:9" pos:end="621:22"><name pos:start="621:9" pos:end="621:9">s</name><operator pos:start="621:10" pos:end="621:11">-&gt;</operator><name pos:start="621:12" pos:end="621:22">new_palette</name></name></expr>)</condition> <block pos:start="621:25" pos:end="627:5">{<block_content pos:start="623:9" pos:end="625:27">

        <expr_stmt pos:start="623:9" pos:end="623:41"><expr pos:start="623:9" pos:end="623:40"><name pos:start="623:9" pos:end="623:36"><name pos:start="623:9" pos:end="623:9">s</name><operator pos:start="623:10" pos:end="623:11">-&gt;</operator><name pos:start="623:12" pos:end="623:16">frame</name><operator pos:start="623:17" pos:end="623:17">.</operator><name pos:start="623:18" pos:end="623:36">palette_has_changed</name></name> <operator pos:start="623:38" pos:end="623:38">=</operator> <literal type="number" pos:start="623:40" pos:end="623:40">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="625:9" pos:end="625:27"><expr pos:start="625:9" pos:end="625:26"><name pos:start="625:9" pos:end="625:22"><name pos:start="625:9" pos:end="625:9">s</name><operator pos:start="625:10" pos:end="625:11">-&gt;</operator><name pos:start="625:12" pos:end="625:22">new_palette</name></name> <operator pos:start="625:24" pos:end="625:24">=</operator> <literal type="number" pos:start="625:26" pos:end="625:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="631:5" pos:end="633:19"><if pos:start="631:5" pos:end="633:19">if <condition pos:start="631:8" pos:end="631:50">(<expr pos:start="631:9" pos:end="631:49"><operator pos:start="631:9" pos:end="631:9">(</operator><name pos:start="631:10" pos:end="631:12">ret</name> <operator pos:start="631:14" pos:end="631:14">=</operator> <call pos:start="631:16" pos:end="631:44"><name pos:start="631:16" pos:end="631:27">av_frame_ref</name><argument_list pos:start="631:28" pos:end="631:44">(<argument pos:start="631:29" pos:end="631:32"><expr pos:start="631:29" pos:end="631:32"><name pos:start="631:29" pos:end="631:32">data</name></expr></argument>, <argument pos:start="631:35" pos:end="631:43"><expr pos:start="631:35" pos:end="631:43"><operator pos:start="631:35" pos:end="631:35">&amp;</operator><name pos:start="631:36" pos:end="631:43"><name pos:start="631:36" pos:end="631:36">s</name><operator pos:start="631:37" pos:end="631:38">-&gt;</operator><name pos:start="631:39" pos:end="631:43">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="631:45" pos:end="631:45">)</operator> <operator pos:start="631:47" pos:end="631:47">&lt;</operator> <literal type="number" pos:start="631:49" pos:end="631:49">0</literal></expr>)</condition><block type="pseudo" pos:start="633:9" pos:end="633:19"><block_content pos:start="633:9" pos:end="633:19">

        <return pos:start="633:9" pos:end="633:19">return <expr pos:start="633:16" pos:end="633:18"><name pos:start="633:16" pos:end="633:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="637:5" pos:end="637:19"><expr pos:start="637:5" pos:end="637:18"><operator pos:start="637:5" pos:end="637:5">*</operator><name pos:start="637:6" pos:end="637:14">got_frame</name> <operator pos:start="637:16" pos:end="637:16">=</operator> <literal type="number" pos:start="637:18" pos:end="637:18">1</literal></expr>;</expr_stmt>



    <return pos:start="641:5" pos:end="641:20">return <expr pos:start="641:12" pos:end="641:19"><name pos:start="641:12" pos:end="641:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
