<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7018.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">handle_fmov</name><parameter_list pos:start="1:24" pos:end="1:77">(<parameter pos:start="1:25" pos:end="1:39"><decl pos:start="1:25" pos:end="1:39"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:36">DisasContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:47"><decl pos:start="1:42" pos:end="1:47"><type pos:start="1:42" pos:end="1:47"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:47">rd</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:55"><decl pos:start="1:50" pos:end="1:55"><type pos:start="1:50" pos:end="1:55"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:55">rn</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:65"><decl pos:start="1:58" pos:end="1:65"><type pos:start="1:58" pos:end="1:65"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:65">type</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:76"><decl pos:start="1:68" pos:end="1:76"><type pos:start="1:68" pos:end="1:76"><name pos:start="1:68" pos:end="1:71">bool</name></type> <name pos:start="1:73" pos:end="1:76">itof</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="13:5" pos:end="105:5">

    <comment type="block" pos:start="5:5" pos:end="9:7">/* FMOV: gpr to or from float, double, or top half of quad fp reg,

     * without conversion.

     */</comment>



    <if_stmt pos:start="13:5" pos:end="105:5"><if pos:start="13:5" pos:end="71:5">if <condition pos:start="13:8" pos:end="13:13">(<expr pos:start="13:9" pos:end="13:12"><name pos:start="13:9" pos:end="13:12">itof</name></expr>)</condition> <block pos:start="13:15" pos:end="71:5">{<block_content pos:start="15:9" pos:end="69:9">

        <decl_stmt pos:start="15:9" pos:end="15:41"><decl pos:start="15:9" pos:end="15:40"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">TCGv_i64</name></type> <name pos:start="15:18" pos:end="15:23">tcg_rn</name> <init pos:start="15:25" pos:end="15:40">= <expr pos:start="15:27" pos:end="15:40"><call pos:start="15:27" pos:end="15:40"><name pos:start="15:27" pos:end="15:33">cpu_reg</name><argument_list pos:start="15:34" pos:end="15:40">(<argument pos:start="15:35" pos:end="15:35"><expr pos:start="15:35" pos:end="15:35"><name pos:start="15:35" pos:end="15:35">s</name></expr></argument>, <argument pos:start="15:38" pos:end="15:39"><expr pos:start="15:38" pos:end="15:39"><name pos:start="15:38" pos:end="15:39">rn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <switch pos:start="19:9" pos:end="69:9">switch <condition pos:start="19:16" pos:end="19:21">(<expr pos:start="19:17" pos:end="19:20"><name pos:start="19:17" pos:end="19:20">type</name></expr>)</condition> <block pos:start="19:23" pos:end="69:9">{<block_content pos:start="21:9" pos:end="67:18">

        <case pos:start="21:9" pos:end="21:15">case <expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>:</case>

        <block pos:start="23:9" pos:end="41:9">{<block_content pos:start="27:13" pos:end="39:18">

            <comment type="block" pos:start="25:13" pos:end="25:24">/* 32 bit */</comment>

            <decl_stmt pos:start="27:13" pos:end="27:46"><decl pos:start="27:13" pos:end="27:45"><type pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:20">TCGv_i64</name></type> <name pos:start="27:22" pos:end="27:24">tmp</name> <init pos:start="27:26" pos:end="27:45">= <expr pos:start="27:28" pos:end="27:45"><call pos:start="27:28" pos:end="27:45"><name pos:start="27:28" pos:end="27:43">tcg_temp_new_i64</name><argument_list pos:start="27:44" pos:end="27:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:44"><expr pos:start="29:13" pos:end="29:43"><call pos:start="29:13" pos:end="29:43"><name pos:start="29:13" pos:end="29:30">tcg_gen_ext32u_i64</name><argument_list pos:start="29:31" pos:end="29:43">(<argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:34">tmp</name></expr></argument>, <argument pos:start="29:37" pos:end="29:42"><expr pos:start="29:37" pos:end="29:42"><name pos:start="29:37" pos:end="29:42">tcg_rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:67"><expr pos:start="31:13" pos:end="31:66"><call pos:start="31:13" pos:end="31:66"><name pos:start="31:13" pos:end="31:26">tcg_gen_st_i64</name><argument_list pos:start="31:27" pos:end="31:66">(<argument pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">tmp</name></expr></argument>, <argument pos:start="31:33" pos:end="31:39"><expr pos:start="31:33" pos:end="31:39"><name pos:start="31:33" pos:end="31:39">cpu_env</name></expr></argument>, <argument pos:start="31:42" pos:end="31:65"><expr pos:start="31:42" pos:end="31:65"><call pos:start="31:42" pos:end="31:65"><name pos:start="31:42" pos:end="31:54">fp_reg_offset</name><argument_list pos:start="31:55" pos:end="31:65">(<argument pos:start="31:56" pos:end="31:57"><expr pos:start="31:56" pos:end="31:57"><name pos:start="31:56" pos:end="31:57">rd</name></expr></argument>, <argument pos:start="31:60" pos:end="31:64"><expr pos:start="31:60" pos:end="31:64"><name pos:start="31:60" pos:end="31:64">MO_64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:37"><expr pos:start="33:13" pos:end="33:36"><call pos:start="33:13" pos:end="33:36"><name pos:start="33:13" pos:end="33:28">tcg_gen_movi_i64</name><argument_list pos:start="33:29" pos:end="33:36">(<argument pos:start="33:30" pos:end="33:32"><expr pos:start="33:30" pos:end="33:32"><name pos:start="33:30" pos:end="33:32">tmp</name></expr></argument>, <argument pos:start="33:35" pos:end="33:35"><expr pos:start="33:35" pos:end="33:35"><literal type="number" pos:start="33:35" pos:end="33:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:63"><expr pos:start="35:13" pos:end="35:62"><call pos:start="35:13" pos:end="35:62"><name pos:start="35:13" pos:end="35:26">tcg_gen_st_i64</name><argument_list pos:start="35:27" pos:end="35:62">(<argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">tmp</name></expr></argument>, <argument pos:start="35:33" pos:end="35:39"><expr pos:start="35:33" pos:end="35:39"><name pos:start="35:33" pos:end="35:39">cpu_env</name></expr></argument>, <argument pos:start="35:42" pos:end="35:61"><expr pos:start="35:42" pos:end="35:61"><call pos:start="35:42" pos:end="35:61"><name pos:start="35:42" pos:end="35:57">fp_reg_hi_offset</name><argument_list pos:start="35:58" pos:end="35:61">(<argument pos:start="35:59" pos:end="35:60"><expr pos:start="35:59" pos:end="35:60"><name pos:start="35:59" pos:end="35:60">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:35"><expr pos:start="37:13" pos:end="37:34"><call pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:29">tcg_temp_free_i64</name><argument_list pos:start="37:30" pos:end="37:34">(<argument pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><name pos:start="37:31" pos:end="37:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        </block_content>}</block>

        <case pos:start="43:9" pos:end="43:15">case <expr pos:start="43:14" pos:end="43:14"><literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr>:</case>

        <block pos:start="45:9" pos:end="59:9">{<block_content pos:start="49:13" pos:end="57:18">

            <comment type="block" pos:start="47:13" pos:end="47:24">/* 64 bit */</comment>

            <decl_stmt pos:start="49:13" pos:end="49:44"><decl pos:start="49:13" pos:end="49:43"><type pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:20">TCGv_i64</name></type> <name pos:start="49:22" pos:end="49:24">tmp</name> <init pos:start="49:26" pos:end="49:43">= <expr pos:start="49:28" pos:end="49:43"><call pos:start="49:28" pos:end="49:43"><name pos:start="49:28" pos:end="49:40">tcg_const_i64</name><argument_list pos:start="49:41" pos:end="49:43">(<argument pos:start="49:42" pos:end="49:42"><expr pos:start="49:42" pos:end="49:42"><literal type="number" pos:start="49:42" pos:end="49:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:70"><expr pos:start="51:13" pos:end="51:69"><call pos:start="51:13" pos:end="51:69"><name pos:start="51:13" pos:end="51:26">tcg_gen_st_i64</name><argument_list pos:start="51:27" pos:end="51:69">(<argument pos:start="51:28" pos:end="51:33"><expr pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:33">tcg_rn</name></expr></argument>, <argument pos:start="51:36" pos:end="51:42"><expr pos:start="51:36" pos:end="51:42"><name pos:start="51:36" pos:end="51:42">cpu_env</name></expr></argument>, <argument pos:start="51:45" pos:end="51:68"><expr pos:start="51:45" pos:end="51:68"><call pos:start="51:45" pos:end="51:68"><name pos:start="51:45" pos:end="51:57">fp_reg_offset</name><argument_list pos:start="51:58" pos:end="51:68">(<argument pos:start="51:59" pos:end="51:60"><expr pos:start="51:59" pos:end="51:60"><name pos:start="51:59" pos:end="51:60">rd</name></expr></argument>, <argument pos:start="51:63" pos:end="51:67"><expr pos:start="51:63" pos:end="51:67"><name pos:start="51:63" pos:end="51:67">MO_64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:63"><expr pos:start="53:13" pos:end="53:62"><call pos:start="53:13" pos:end="53:62"><name pos:start="53:13" pos:end="53:26">tcg_gen_st_i64</name><argument_list pos:start="53:27" pos:end="53:62">(<argument pos:start="53:28" pos:end="53:30"><expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:30">tmp</name></expr></argument>, <argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><name pos:start="53:33" pos:end="53:39">cpu_env</name></expr></argument>, <argument pos:start="53:42" pos:end="53:61"><expr pos:start="53:42" pos:end="53:61"><call pos:start="53:42" pos:end="53:61"><name pos:start="53:42" pos:end="53:57">fp_reg_hi_offset</name><argument_list pos:start="53:58" pos:end="53:61">(<argument pos:start="53:59" pos:end="53:60"><expr pos:start="53:59" pos:end="53:60"><name pos:start="53:59" pos:end="53:60">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:35"><expr pos:start="55:13" pos:end="55:34"><call pos:start="55:13" pos:end="55:34"><name pos:start="55:13" pos:end="55:29">tcg_temp_free_i64</name><argument_list pos:start="55:30" pos:end="55:34">(<argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        </block_content>}</block>

        <case pos:start="61:9" pos:end="61:15">case <expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">2</literal></expr>:</case>

            <comment type="block" pos:start="63:13" pos:end="63:37">/* 64 bit to top half. */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:66"><expr pos:start="65:13" pos:end="65:65"><call pos:start="65:13" pos:end="65:65"><name pos:start="65:13" pos:end="65:26">tcg_gen_st_i64</name><argument_list pos:start="65:27" pos:end="65:65">(<argument pos:start="65:28" pos:end="65:33"><expr pos:start="65:28" pos:end="65:33"><name pos:start="65:28" pos:end="65:33">tcg_rn</name></expr></argument>, <argument pos:start="65:36" pos:end="65:42"><expr pos:start="65:36" pos:end="65:42"><name pos:start="65:36" pos:end="65:42">cpu_env</name></expr></argument>, <argument pos:start="65:45" pos:end="65:64"><expr pos:start="65:45" pos:end="65:64"><call pos:start="65:45" pos:end="65:64"><name pos:start="65:45" pos:end="65:60">fp_reg_hi_offset</name><argument_list pos:start="65:61" pos:end="65:64">(<argument pos:start="65:62" pos:end="65:63"><expr pos:start="65:62" pos:end="65:63"><name pos:start="65:62" pos:end="65:63">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="105:5">else <block pos:start="71:12" pos:end="105:5">{<block_content pos:start="73:9" pos:end="103:9">

        <decl_stmt pos:start="73:9" pos:end="73:41"><decl pos:start="73:9" pos:end="73:40"><type pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:16">TCGv_i64</name></type> <name pos:start="73:18" pos:end="73:23">tcg_rd</name> <init pos:start="73:25" pos:end="73:40">= <expr pos:start="73:27" pos:end="73:40"><call pos:start="73:27" pos:end="73:40"><name pos:start="73:27" pos:end="73:33">cpu_reg</name><argument_list pos:start="73:34" pos:end="73:40">(<argument pos:start="73:35" pos:end="73:35"><expr pos:start="73:35" pos:end="73:35"><name pos:start="73:35" pos:end="73:35">s</name></expr></argument>, <argument pos:start="73:38" pos:end="73:39"><expr pos:start="73:38" pos:end="73:39"><name pos:start="73:38" pos:end="73:39">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <switch pos:start="77:9" pos:end="103:9">switch <condition pos:start="77:16" pos:end="77:21">(<expr pos:start="77:17" pos:end="77:20"><name pos:start="77:17" pos:end="77:20">type</name></expr>)</condition> <block pos:start="77:23" pos:end="103:9">{<block_content pos:start="79:9" pos:end="101:18">

        <case pos:start="79:9" pos:end="79:15">case <expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>:</case>

            <comment type="block" pos:start="81:13" pos:end="81:24">/* 32 bit */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:73"><expr pos:start="83:13" pos:end="83:72"><call pos:start="83:13" pos:end="83:72"><name pos:start="83:13" pos:end="83:29">tcg_gen_ld32u_i64</name><argument_list pos:start="83:30" pos:end="83:72">(<argument pos:start="83:31" pos:end="83:36"><expr pos:start="83:31" pos:end="83:36"><name pos:start="83:31" pos:end="83:36">tcg_rd</name></expr></argument>, <argument pos:start="83:39" pos:end="83:45"><expr pos:start="83:39" pos:end="83:45"><name pos:start="83:39" pos:end="83:45">cpu_env</name></expr></argument>, <argument pos:start="83:48" pos:end="83:71"><expr pos:start="83:48" pos:end="83:71"><call pos:start="83:48" pos:end="83:71"><name pos:start="83:48" pos:end="83:60">fp_reg_offset</name><argument_list pos:start="83:61" pos:end="83:71">(<argument pos:start="83:62" pos:end="83:63"><expr pos:start="83:62" pos:end="83:63"><name pos:start="83:62" pos:end="83:63">rn</name></expr></argument>, <argument pos:start="83:66" pos:end="83:70"><expr pos:start="83:66" pos:end="83:70"><name pos:start="83:66" pos:end="83:70">MO_32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <case pos:start="87:9" pos:end="87:15">case <expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">1</literal></expr>:</case>

            <comment type="block" pos:start="89:13" pos:end="89:24">/* 64 bit */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:70"><expr pos:start="91:13" pos:end="91:69"><call pos:start="91:13" pos:end="91:69"><name pos:start="91:13" pos:end="91:26">tcg_gen_ld_i64</name><argument_list pos:start="91:27" pos:end="91:69">(<argument pos:start="91:28" pos:end="91:33"><expr pos:start="91:28" pos:end="91:33"><name pos:start="91:28" pos:end="91:33">tcg_rd</name></expr></argument>, <argument pos:start="91:36" pos:end="91:42"><expr pos:start="91:36" pos:end="91:42"><name pos:start="91:36" pos:end="91:42">cpu_env</name></expr></argument>, <argument pos:start="91:45" pos:end="91:68"><expr pos:start="91:45" pos:end="91:68"><call pos:start="91:45" pos:end="91:68"><name pos:start="91:45" pos:end="91:57">fp_reg_offset</name><argument_list pos:start="91:58" pos:end="91:68">(<argument pos:start="91:59" pos:end="91:60"><expr pos:start="91:59" pos:end="91:60"><name pos:start="91:59" pos:end="91:60">rn</name></expr></argument>, <argument pos:start="91:63" pos:end="91:67"><expr pos:start="91:63" pos:end="91:67"><name pos:start="91:63" pos:end="91:67">MO_64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <case pos:start="95:9" pos:end="95:15">case <expr pos:start="95:14" pos:end="95:14"><literal type="number" pos:start="95:14" pos:end="95:14">2</literal></expr>:</case>

            <comment type="block" pos:start="97:13" pos:end="97:39">/* 64 bits from top half */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:66"><expr pos:start="99:13" pos:end="99:65"><call pos:start="99:13" pos:end="99:65"><name pos:start="99:13" pos:end="99:26">tcg_gen_ld_i64</name><argument_list pos:start="99:27" pos:end="99:65">(<argument pos:start="99:28" pos:end="99:33"><expr pos:start="99:28" pos:end="99:33"><name pos:start="99:28" pos:end="99:33">tcg_rd</name></expr></argument>, <argument pos:start="99:36" pos:end="99:42"><expr pos:start="99:36" pos:end="99:42"><name pos:start="99:36" pos:end="99:42">cpu_env</name></expr></argument>, <argument pos:start="99:45" pos:end="99:64"><expr pos:start="99:45" pos:end="99:64"><call pos:start="99:45" pos:end="99:64"><name pos:start="99:45" pos:end="99:60">fp_reg_hi_offset</name><argument_list pos:start="99:61" pos:end="99:64">(<argument pos:start="99:62" pos:end="99:63"><expr pos:start="99:62" pos:end="99:63"><name pos:start="99:62" pos:end="99:63">rn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
