<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25764.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">hmp_change</name><parameter_list pos:start="1:16" pos:end="1:49">(<parameter pos:start="1:17" pos:end="1:28"><decl pos:start="1:17" pos:end="1:28"><type pos:start="1:17" pos:end="1:28"><name pos:start="1:17" pos:end="1:23">Monitor</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:28">mon</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:41">QDict</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:32">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:22">device</name> <init pos:start="5:24" pos:end="5:55">= <expr pos:start="5:26" pos:end="5:55"><call pos:start="5:26" pos:end="5:55"><name pos:start="5:26" pos:end="5:38">qdict_get_str</name><argument_list pos:start="5:39" pos:end="5:55">(<argument pos:start="5:40" pos:end="5:44"><expr pos:start="5:40" pos:end="5:44"><name pos:start="5:40" pos:end="5:44">qdict</name></expr></argument>, <argument pos:start="5:47" pos:end="5:54"><expr pos:start="5:47" pos:end="5:54"><literal type="string" pos:start="5:47" pos:end="5:54">"device"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:22">target</name> <init pos:start="7:24" pos:end="7:55">= <expr pos:start="7:26" pos:end="7:55"><call pos:start="7:26" pos:end="7:55"><name pos:start="7:26" pos:end="7:38">qdict_get_str</name><argument_list pos:start="7:39" pos:end="7:55">(<argument pos:start="7:40" pos:end="7:44"><expr pos:start="7:40" pos:end="7:44"><name pos:start="7:40" pos:end="7:44">qdict</name></expr></argument>, <argument pos:start="7:47" pos:end="7:54"><expr pos:start="7:47" pos:end="7:54"><literal type="string" pos:start="7:47" pos:end="7:54">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">arg</name> <init pos:start="9:21" pos:end="9:53">= <expr pos:start="9:23" pos:end="9:53"><call pos:start="9:23" pos:end="9:53"><name pos:start="9:23" pos:end="9:39">qdict_get_try_str</name><argument_list pos:start="9:40" pos:end="9:53">(<argument pos:start="9:41" pos:end="9:45"><expr pos:start="9:41" pos:end="9:45"><name pos:start="9:41" pos:end="9:45">qdict</name></expr></argument>, <argument pos:start="9:48" pos:end="9:52"><expr pos:start="9:48" pos:end="9:52"><literal type="string" pos:start="9:48" pos:end="9:52">"arg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="29:5"><if pos:start="15:5" pos:end="29:5">if <condition pos:start="15:8" pos:end="19:46">(<expr pos:start="15:9" pos:end="19:45"><call pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:14">strcmp</name><argument_list pos:start="15:15" pos:end="15:29">(<argument pos:start="15:16" pos:end="15:21"><expr pos:start="15:16" pos:end="15:21"><name pos:start="15:16" pos:end="15:21">device</name></expr></argument>, <argument pos:start="15:24" pos:end="15:28"><expr pos:start="15:24" pos:end="15:28"><literal type="string" pos:start="15:24" pos:end="15:28">"vnc"</literal></expr></argument>)</argument_list></call> <operator pos:start="15:31" pos:end="15:32">==</operator> <literal type="number" pos:start="15:34" pos:end="15:34">0</literal> <operator pos:start="15:36" pos:end="15:37">&amp;&amp;</operator>

            <operator pos:start="17:13" pos:end="17:13">(</operator><call pos:start="17:14" pos:end="17:37"><name pos:start="17:14" pos:end="17:19">strcmp</name><argument_list pos:start="17:20" pos:end="17:37">(<argument pos:start="17:21" pos:end="17:26"><expr pos:start="17:21" pos:end="17:26"><name pos:start="17:21" pos:end="17:26">target</name></expr></argument>, <argument pos:start="17:29" pos:end="17:36"><expr pos:start="17:29" pos:end="17:36"><literal type="string" pos:start="17:29" pos:end="17:36">"passwd"</literal></expr></argument>)</argument_list></call> <operator pos:start="17:39" pos:end="17:40">==</operator> <literal type="number" pos:start="17:42" pos:end="17:42">0</literal> <operator pos:start="17:44" pos:end="17:45">||</operator>

             <call pos:start="19:14" pos:end="19:39"><name pos:start="19:14" pos:end="19:19">strcmp</name><argument_list pos:start="19:20" pos:end="19:39">(<argument pos:start="19:21" pos:end="19:26"><expr pos:start="19:21" pos:end="19:26"><name pos:start="19:21" pos:end="19:26">target</name></expr></argument>, <argument pos:start="19:29" pos:end="19:38"><expr pos:start="19:29" pos:end="19:38"><literal type="string" pos:start="19:29" pos:end="19:38">"password"</literal></expr></argument>)</argument_list></call> <operator pos:start="19:41" pos:end="19:42">==</operator> <literal type="number" pos:start="19:44" pos:end="19:44">0</literal><operator pos:start="19:45" pos:end="19:45">)</operator></expr>)</condition> <block pos:start="19:48" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:9">

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:17">(<expr pos:start="21:13" pos:end="21:16"><operator pos:start="21:13" pos:end="21:13">!</operator><name pos:start="21:14" pos:end="21:16">arg</name></expr>)</condition> <block pos:start="21:19" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:19">

            <expr_stmt pos:start="23:13" pos:end="23:66"><expr pos:start="23:13" pos:end="23:65"><call pos:start="23:13" pos:end="23:65"><name pos:start="23:13" pos:end="23:33">monitor_read_password</name><argument_list pos:start="23:34" pos:end="23:65">(<argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:37">mon</name></expr></argument>, <argument pos:start="23:40" pos:end="23:58"><expr pos:start="23:40" pos:end="23:58"><name pos:start="23:40" pos:end="23:58">hmp_change_read_arg</name></expr></argument>, <argument pos:start="23:61" pos:end="23:64"><expr pos:start="23:61" pos:end="23:64"><name pos:start="23:61" pos:end="23:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:49"><expr pos:start="33:5" pos:end="33:48"><call pos:start="33:5" pos:end="33:48"><name pos:start="33:5" pos:end="33:14">qmp_change</name><argument_list pos:start="33:15" pos:end="33:48">(<argument pos:start="33:16" pos:end="33:21"><expr pos:start="33:16" pos:end="33:21"><name pos:start="33:16" pos:end="33:21">device</name></expr></argument>, <argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">target</name></expr></argument>, <argument pos:start="33:32" pos:end="33:36"><expr pos:start="33:32" pos:end="33:36"><operator pos:start="33:32" pos:end="33:32">!</operator><operator pos:start="33:33" pos:end="33:33">!</operator><name pos:start="33:34" pos:end="33:36">arg</name></expr></argument>, <argument pos:start="33:39" pos:end="33:41"><expr pos:start="33:39" pos:end="33:41"><name pos:start="33:39" pos:end="33:41">arg</name></expr></argument>, <argument pos:start="33:44" pos:end="33:47"><expr pos:start="33:44" pos:end="33:47"><operator pos:start="33:44" pos:end="33:44">&amp;</operator><name pos:start="33:45" pos:end="33:47">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="61:5"><if pos:start="35:5" pos:end="61:5">if <condition pos:start="35:8" pos:end="35:50">(<expr pos:start="35:9" pos:end="35:49"><call pos:start="35:9" pos:end="35:49"><name pos:start="35:9" pos:end="35:21">error_is_type</name><argument_list pos:start="35:22" pos:end="35:49">(<argument pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:25">err</name></expr></argument>, <argument pos:start="35:28" pos:end="35:48"><expr pos:start="35:28" pos:end="35:48"><name pos:start="35:28" pos:end="35:48">QERR_DEVICE_ENCRYPTED</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:52" pos:end="61:5">{<block_content pos:start="37:9" pos:end="59:15">

        <expr_stmt pos:start="37:9" pos:end="41:57"><expr pos:start="37:9" pos:end="41:56"><call pos:start="37:9" pos:end="41:56"><name pos:start="37:9" pos:end="37:22">monitor_printf</name><argument_list pos:start="37:23" pos:end="41:56">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">mon</name></expr></argument>, <argument pos:start="37:29" pos:end="37:53"><expr pos:start="37:29" pos:end="37:53"><literal type="string" pos:start="37:29" pos:end="37:53">"%s (%s) is encrypted.\n"</literal></expr></argument>,

                       <argument pos:start="39:24" pos:end="39:53"><expr pos:start="39:24" pos:end="39:53"><call pos:start="39:24" pos:end="39:53"><name pos:start="39:24" pos:end="39:38">error_get_field</name><argument_list pos:start="39:39" pos:end="39:53">(<argument pos:start="39:40" pos:end="39:42"><expr pos:start="39:40" pos:end="39:42"><name pos:start="39:40" pos:end="39:42">err</name></expr></argument>, <argument pos:start="39:45" pos:end="39:52"><expr pos:start="39:45" pos:end="39:52"><literal type="string" pos:start="39:45" pos:end="39:52">"device"</literal></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:55"><expr pos:start="41:24" pos:end="41:55"><call pos:start="41:24" pos:end="41:55"><name pos:start="41:24" pos:end="41:38">error_get_field</name><argument_list pos:start="41:39" pos:end="41:55">(<argument pos:start="41:40" pos:end="41:42"><expr pos:start="41:40" pos:end="41:42"><name pos:start="41:40" pos:end="41:42">err</name></expr></argument>, <argument pos:start="41:45" pos:end="41:54"><expr pos:start="41:45" pos:end="41:54"><literal type="string" pos:start="41:45" pos:end="41:54">"filename"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:33">(<expr pos:start="43:13" pos:end="43:32"><operator pos:start="43:13" pos:end="43:13">!</operator><call pos:start="43:14" pos:end="43:32"><name pos:start="43:14" pos:end="43:27">monitor_get_rs</name><argument_list pos:start="43:28" pos:end="43:32">(<argument pos:start="43:29" pos:end="43:31"><expr pos:start="43:29" pos:end="43:31"><name pos:start="43:29" pos:end="43:31">mon</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:35" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:19">

            <expr_stmt pos:start="45:13" pos:end="47:70"><expr pos:start="45:13" pos:end="47:69"><call pos:start="45:13" pos:end="47:69"><name pos:start="45:13" pos:end="45:26">monitor_printf</name><argument_list pos:start="45:27" pos:end="47:69">(<argument pos:start="45:28" pos:end="45:30"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:30">mon</name></expr></argument>,

                    <argument pos:start="47:21" pos:end="47:68"><expr pos:start="47:21" pos:end="47:68"><literal type="string" pos:start="47:21" pos:end="47:68">"terminal does not support password prompting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:28"><expr pos:start="49:13" pos:end="49:27"><call pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:22">error_free</name><argument_list pos:start="49:23" pos:end="49:27">(<argument pos:start="49:24" pos:end="49:26"><expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:26">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="57:52"><expr pos:start="55:9" pos:end="57:51"><call pos:start="55:9" pos:end="57:51"><name pos:start="55:9" pos:end="55:22">readline_start</name><argument_list pos:start="55:23" pos:end="57:51">(<argument pos:start="55:24" pos:end="55:42"><expr pos:start="55:24" pos:end="55:42"><call pos:start="55:24" pos:end="55:42"><name pos:start="55:24" pos:end="55:37">monitor_get_rs</name><argument_list pos:start="55:38" pos:end="55:42">(<argument pos:start="55:39" pos:end="55:41"><expr pos:start="55:39" pos:end="55:41"><name pos:start="55:39" pos:end="55:41">mon</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:45" pos:end="55:56"><expr pos:start="55:45" pos:end="55:56"><literal type="string" pos:start="55:45" pos:end="55:56">"Password: "</literal></expr></argument>, <argument pos:start="55:59" pos:end="55:59"><expr pos:start="55:59" pos:end="55:59"><literal type="number" pos:start="55:59" pos:end="55:59">1</literal></expr></argument>,

                       <argument pos:start="57:24" pos:end="57:45"><expr pos:start="57:24" pos:end="57:45"><name pos:start="57:24" pos:end="57:45">cb_hmp_change_bdrv_pwd</name></expr></argument>, <argument pos:start="57:48" pos:end="57:50"><expr pos:start="57:48" pos:end="57:50"><name pos:start="57:48" pos:end="57:50">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:32"><expr pos:start="63:5" pos:end="63:31"><call pos:start="63:5" pos:end="63:31"><name pos:start="63:5" pos:end="63:20">hmp_handle_error</name><argument_list pos:start="63:21" pos:end="63:31">(<argument pos:start="63:22" pos:end="63:24"><expr pos:start="63:22" pos:end="63:24"><name pos:start="63:22" pos:end="63:24">mon</name></expr></argument>, <argument pos:start="63:27" pos:end="63:30"><expr pos:start="63:27" pos:end="63:30"><operator pos:start="63:27" pos:end="63:27">&amp;</operator><name pos:start="63:28" pos:end="63:30">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
