<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18355.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">spapr_phb_add_pci_device</name><parameter_list pos:start="1:37" pos:end="7:50">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:58"><name pos:start="1:38" pos:end="1:53">sPAPRDRConnector</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">drc</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:55"><decl pos:start="3:38" pos:end="3:55"><type pos:start="3:38" pos:end="3:55"><name pos:start="3:38" pos:end="3:50">sPAPRPHBState</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:55">phb</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:52"><decl pos:start="5:38" pos:end="5:52"><type pos:start="5:38" pos:end="5:52"><name pos:start="5:38" pos:end="5:46">PCIDevice</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:52">pdev</name></decl></parameter>,

                                     <parameter pos:start="7:38" pos:end="7:49"><decl pos:start="7:38" pos:end="7:49"><type pos:start="7:38" pos:end="7:49"><name pos:start="7:38" pos:end="7:42">Error</name> <modifier pos:start="7:44" pos:end="7:44">*</modifier><modifier pos:start="7:45" pos:end="7:45">*</modifier></type><name pos:start="7:46" pos:end="7:49">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="57:1">{<block_content pos:start="11:5" pos:end="55:5">

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:67"><type pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:25">sPAPRDRConnectorClass</name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:31">drck</name> <init pos:start="11:33" pos:end="11:67">= <expr pos:start="11:35" pos:end="11:67"><call pos:start="11:35" pos:end="11:67"><name pos:start="11:35" pos:end="11:62">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="11:63" pos:end="11:67">(<argument pos:start="11:64" pos:end="11:66"><expr pos:start="11:64" pos:end="11:66"><name pos:start="11:64" pos:end="11:66">drc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">DeviceState</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">dev</name> <init pos:start="13:22" pos:end="13:35">= <expr pos:start="13:24" pos:end="13:35"><call pos:start="13:24" pos:end="13:35"><name pos:start="13:24" pos:end="13:29">DEVICE</name><argument_list pos:start="13:30" pos:end="13:35">(<argument pos:start="13:31" pos:end="13:34"><expr pos:start="13:31" pos:end="13:34"><name pos:start="13:31" pos:end="13:34">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">drc_index</name> <init pos:start="15:19" pos:end="15:40">= <expr pos:start="15:21" pos:end="15:40"><call pos:start="15:21" pos:end="15:40"><name pos:start="15:21" pos:end="15:35"><name pos:start="15:21" pos:end="15:24">drck</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:35">get_index</name></name><argument_list pos:start="15:36" pos:end="15:40">(<argument pos:start="15:37" pos:end="15:39"><expr pos:start="15:37" pos:end="15:39"><name pos:start="15:37" pos:end="15:39">drc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:13">fdt</name> <init pos:start="17:15" pos:end="17:20">= <expr pos:start="17:17" pos:end="17:20"><name pos:start="17:17" pos:end="17:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:24">fdt_start_offset</name> <init pos:start="19:26" pos:end="19:28">= <expr pos:start="19:28" pos:end="19:28"><literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr></init></decl>, <decl pos:start="19:31" pos:end="19:38"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:31" pos:end="19:38">fdt_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="41:5"><if pos:start="23:5" pos:end="41:5">if <condition pos:start="23:8" pos:end="23:24">(<expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:11">dev</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:23">hotplugged</name></name></expr>)</condition> <block pos:start="23:26" pos:end="41:5">{<block_content pos:start="25:9" pos:end="39:9">

        <expr_stmt pos:start="25:9" pos:end="25:44"><expr pos:start="25:9" pos:end="25:43"><name pos:start="25:9" pos:end="25:11">fdt</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:43"><name pos:start="25:15" pos:end="25:32">create_device_tree</name><argument_list pos:start="25:33" pos:end="25:43">(<argument pos:start="25:34" pos:end="25:42"><expr pos:start="25:34" pos:end="25:42"><operator pos:start="25:34" pos:end="25:34">&amp;</operator><name pos:start="25:35" pos:end="25:42">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="31:61"><expr pos:start="27:9" pos:end="31:60"><name pos:start="27:9" pos:end="27:24">fdt_start_offset</name> <operator pos:start="27:26" pos:end="27:26">=</operator> <call pos:start="27:28" pos:end="31:60"><name pos:start="27:28" pos:end="27:52">spapr_create_pci_child_dt</name><argument_list pos:start="27:53" pos:end="31:60">(<argument pos:start="27:54" pos:end="27:56"><expr pos:start="27:54" pos:end="27:56"><name pos:start="27:54" pos:end="27:56">phb</name></expr></argument>, <argument pos:start="27:59" pos:end="27:62"><expr pos:start="27:59" pos:end="27:62"><name pos:start="27:59" pos:end="27:62">pdev</name></expr></argument>,

                                                     <argument pos:start="29:54" pos:end="29:62"><expr pos:start="29:54" pos:end="29:62"><name pos:start="29:54" pos:end="29:62">drc_index</name></expr></argument>, <argument pos:start="29:65" pos:end="29:68"><expr pos:start="29:65" pos:end="29:68"><name pos:start="29:65" pos:end="29:68">NULL</name></expr></argument>,

                                                     <argument pos:start="31:54" pos:end="31:56"><expr pos:start="31:54" pos:end="31:56"><name pos:start="31:54" pos:end="31:56">fdt</name></expr></argument>, <argument pos:start="31:59" pos:end="31:59"><expr pos:start="31:59" pos:end="31:59"><literal type="number" pos:start="31:59" pos:end="31:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:30">(<expr pos:start="33:13" pos:end="33:29"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:29">fdt_start_offset</name></expr>)</condition> <block pos:start="33:32" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:21">

            <expr_stmt pos:start="35:13" pos:end="35:76"><expr pos:start="35:13" pos:end="35:75"><call pos:start="35:13" pos:end="35:75"><name pos:start="35:13" pos:end="35:22">error_setg</name><argument_list pos:start="35:23" pos:end="35:75">(<argument pos:start="35:24" pos:end="35:27"><expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">errp</name></expr></argument>, <argument pos:start="35:30" pos:end="35:74"><expr pos:start="35:30" pos:end="35:74"><literal type="string" pos:start="35:30" pos:end="35:74">"Failed to create pci child device tree node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="37:13" pos:end="37:21">goto <name pos:start="37:18" pos:end="37:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="47:64"><expr pos:start="45:5" pos:end="47:63"><call pos:start="45:5" pos:end="47:63"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:8">drck</name><operator pos:start="45:9" pos:end="45:10">-&gt;</operator><name pos:start="45:11" pos:end="45:16">attach</name></name><argument_list pos:start="45:17" pos:end="47:63">(<argument pos:start="45:18" pos:end="45:20"><expr pos:start="45:18" pos:end="45:20"><name pos:start="45:18" pos:end="45:20">drc</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><call pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:28">DEVICE</name><argument_list pos:start="45:29" pos:end="45:34">(<argument pos:start="45:30" pos:end="45:33"><expr pos:start="45:30" pos:end="45:33"><name pos:start="45:30" pos:end="45:33">pdev</name></expr></argument>)</argument_list></call></expr></argument>,

                 <argument pos:start="47:18" pos:end="47:20"><expr pos:start="47:18" pos:end="47:20"><name pos:start="47:18" pos:end="47:20">fdt</name></expr></argument>, <argument pos:start="47:23" pos:end="47:38"><expr pos:start="47:23" pos:end="47:38"><name pos:start="47:23" pos:end="47:38">fdt_start_offset</name></expr></argument>, <argument pos:start="47:41" pos:end="47:56"><expr pos:start="47:41" pos:end="47:56"><operator pos:start="47:41" pos:end="47:41">!</operator><name pos:start="47:42" pos:end="47:56"><name pos:start="47:42" pos:end="47:44">dev</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:56">hotplugged</name></name></expr></argument>, <argument pos:start="47:59" pos:end="47:62"><expr pos:start="47:59" pos:end="47:62"><name pos:start="47:59" pos:end="47:62">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="49:1" pos:end="49:4"><name pos:start="49:1" pos:end="49:3">out</name>:</label>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:14">(<expr pos:start="51:9" pos:end="51:13"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:13">errp</name></expr>)</condition> <block pos:start="51:16" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:20">

        <expr_stmt pos:start="53:9" pos:end="53:20"><expr pos:start="53:9" pos:end="53:19"><call pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:14">g_free</name><argument_list pos:start="53:15" pos:end="53:19">(<argument pos:start="53:16" pos:end="53:18"><expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
