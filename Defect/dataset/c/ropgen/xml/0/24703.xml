<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24703.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">init_input_filter</name><parameter_list pos:start="1:30" pos:end="1:65">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:41">FilterGraph</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">fg</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:64"><decl pos:start="1:48" pos:end="1:64"><type pos:start="1:48" pos:end="1:64"><name pos:start="1:48" pos:end="1:60">AVFilterInOut</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">in</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:70">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">InputStream</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">ist</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:91"><decl pos:start="7:5" pos:end="7:90"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:8">enum</name> <name pos:start="7:10" pos:end="7:20">AVMediaType</name></name></type> <name pos:start="7:22" pos:end="7:25">type</name> <init pos:start="7:27" pos:end="7:90">= <expr pos:start="7:29" pos:end="7:90"><call pos:start="7:29" pos:end="7:90"><name pos:start="7:29" pos:end="7:49">avfilter_pad_get_type</name><argument_list pos:start="7:50" pos:end="7:90">(<argument pos:start="7:51" pos:end="7:76"><expr pos:start="7:51" pos:end="7:76"><name pos:start="7:51" pos:end="7:76"><name pos:start="7:51" pos:end="7:52">in</name><operator pos:start="7:53" pos:end="7:54">-&gt;</operator><name pos:start="7:55" pos:end="7:64">filter_ctx</name><operator pos:start="7:65" pos:end="7:66">-&gt;</operator><name pos:start="7:67" pos:end="7:76">input_pads</name></name></expr></argument>, <argument pos:start="7:79" pos:end="7:89"><expr pos:start="7:79" pos:end="7:89"><name pos:start="7:79" pos:end="7:89"><name pos:start="7:79" pos:end="7:80">in</name><operator pos:start="7:81" pos:end="7:82">-&gt;</operator><name pos:start="7:83" pos:end="7:89">pad_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:39">// TODO: support other filter types</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:65">(<expr pos:start="15:9" pos:end="15:64"><name pos:start="15:9" pos:end="15:12">type</name> <operator pos:start="15:14" pos:end="15:15">!=</operator> <name pos:start="15:17" pos:end="15:34">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="15:36" pos:end="15:37">&amp;&amp;</operator> <name pos:start="15:39" pos:end="15:42">type</name> <operator pos:start="15:44" pos:end="15:45">!=</operator> <name pos:start="15:47" pos:end="15:64">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="15:67" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:16">

        <expr_stmt pos:start="17:9" pos:end="19:31"><expr pos:start="17:9" pos:end="19:30"><call pos:start="17:9" pos:end="19:30"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="19:30">(<argument pos:start="17:16" pos:end="17:19"><expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr></argument>, <argument pos:start="17:22" pos:end="17:33"><expr pos:start="17:22" pos:end="17:33"><name pos:start="17:22" pos:end="17:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="17:36" pos:end="19:29"><expr pos:start="17:36" pos:end="19:29"><literal type="string" pos:start="17:36" pos:end="17:76">"Only video and audio filters supported "</literal>

               <literal type="string" pos:start="19:16" pos:end="19:29">"currently.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:16"><expr pos:start="21:9" pos:end="21:15"><call pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:12">exit</name><argument_list pos:start="21:13" pos:end="21:15">(<argument pos:start="21:14" pos:end="21:14"><expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="107:5"><if pos:start="27:5" pos:end="81:5">if <condition pos:start="27:8" pos:end="27:17">(<expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:10">in</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:16">name</name></name></expr>)</condition> <block pos:start="27:19" pos:end="81:5">{<block_content pos:start="29:9" pos:end="79:74">

        <decl_stmt pos:start="29:9" pos:end="29:27"><decl pos:start="29:9" pos:end="29:26"><type pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:23">AVFormatContext</name> <modifier pos:start="29:25" pos:end="29:25">*</modifier></type><name pos:start="29:26" pos:end="29:26">s</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:34"><decl pos:start="31:9" pos:end="31:33"><type pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:16">AVStream</name>       <modifier pos:start="31:24" pos:end="31:24">*</modifier></type><name pos:start="31:25" pos:end="31:26">st</name> <init pos:start="31:28" pos:end="31:33">= <expr pos:start="31:30" pos:end="31:33"><name pos:start="31:30" pos:end="31:33">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:16"><decl pos:start="33:9" pos:end="33:15"><type pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:12">char</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:15">p</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:47"><decl pos:start="35:9" pos:end="35:46"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:20">file_idx</name> <init pos:start="35:22" pos:end="35:46">= <expr pos:start="35:24" pos:end="35:46"><call pos:start="35:24" pos:end="35:46"><name pos:start="35:24" pos:end="35:29">strtol</name><argument_list pos:start="35:30" pos:end="35:46">(<argument pos:start="35:31" pos:end="35:38"><expr pos:start="35:31" pos:end="35:38"><name pos:start="35:31" pos:end="35:38"><name pos:start="35:31" pos:end="35:32">in</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:38">name</name></name></expr></argument>, <argument pos:start="35:41" pos:end="35:42"><expr pos:start="35:41" pos:end="35:42"><operator pos:start="35:41" pos:end="35:41">&amp;</operator><name pos:start="35:42" pos:end="35:42">p</name></expr></argument>, <argument pos:start="35:45" pos:end="35:45"><expr pos:start="35:45" pos:end="35:45"><literal type="number" pos:start="35:45" pos:end="35:45">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:55">(<expr pos:start="39:13" pos:end="39:54"><name pos:start="39:13" pos:end="39:20">file_idx</name> <operator pos:start="39:22" pos:end="39:22">&lt;</operator> <literal type="number" pos:start="39:24" pos:end="39:24">0</literal> <operator pos:start="39:26" pos:end="39:27">||</operator> <name pos:start="39:29" pos:end="39:36">file_idx</name> <operator pos:start="39:38" pos:end="39:39">&gt;=</operator> <name pos:start="39:41" pos:end="39:54">nb_input_files</name></expr>)</condition> <block pos:start="39:57" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:20">

            <expr_stmt pos:start="41:13" pos:end="43:45"><expr pos:start="41:13" pos:end="43:44"><call pos:start="41:13" pos:end="43:44"><name pos:start="41:13" pos:end="41:18">av_log</name><argument_list pos:start="41:19" pos:end="43:44">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">NULL</name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="41:40" pos:end="41:94"><expr pos:start="41:40" pos:end="41:94"><literal type="string" pos:start="41:40" pos:end="41:94">"Invalid file index %d in filtegraph description %s.\n"</literal></expr></argument>,

                   <argument pos:start="43:20" pos:end="43:27"><expr pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:27">file_idx</name></expr></argument>, <argument pos:start="43:30" pos:end="43:43"><expr pos:start="43:30" pos:end="43:43"><name pos:start="43:30" pos:end="43:43"><name pos:start="43:30" pos:end="43:31">fg</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:43">graph_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:20"><expr pos:start="45:13" pos:end="45:19"><call pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:16">exit</name><argument_list pos:start="45:17" pos:end="45:19">(<argument pos:start="45:18" pos:end="45:18"><expr pos:start="45:18" pos:end="45:18"><literal type="number" pos:start="45:18" pos:end="45:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:9">s</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <name pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:23">input_files</name><index pos:start="49:24" pos:end="49:33">[<expr pos:start="49:25" pos:end="49:32"><name pos:start="49:25" pos:end="49:32">file_idx</name></expr>]</index></name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:38">ctx</name></expr>;</expr_stmt>



        <for pos:start="53:9" pos:end="67:9">for <control pos:start="53:13" pos:end="53:43">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:38"><expr pos:start="53:21" pos:end="53:37"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <name pos:start="53:25" pos:end="53:37"><name pos:start="53:25" pos:end="53:25">s</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:37">nb_streams</name></name></expr>;</condition> <incr pos:start="53:40" pos:end="53:42"><expr pos:start="53:40" pos:end="53:42"><name pos:start="53:40" pos:end="53:40">i</name><operator pos:start="53:41" pos:end="53:42">++</operator></expr></incr>)</control> <block pos:start="53:45" pos:end="67:9">{<block_content pos:start="55:13" pos:end="65:13">

            <if_stmt pos:start="55:13" pos:end="57:25"><if pos:start="55:13" pos:end="57:25">if <condition pos:start="55:16" pos:end="55:60">(<expr pos:start="55:17" pos:end="55:59"><name pos:start="55:17" pos:end="55:29"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:26">streams</name><index pos:start="55:27" pos:end="55:29">[<expr pos:start="55:28" pos:end="55:28"><name pos:start="55:28" pos:end="55:28">i</name></expr>]</index></name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:51"><name pos:start="55:32" pos:end="55:39">codecpar</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:51">codec_type</name></name> <operator pos:start="55:53" pos:end="55:54">!=</operator> <name pos:start="55:56" pos:end="55:59">type</name></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:25"><block_content pos:start="57:17" pos:end="57:25">

                <continue pos:start="57:17" pos:end="57:25">continue;</continue></block_content></block></if></if_stmt>

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="59:85">(<expr pos:start="59:17" pos:end="59:84"><call pos:start="59:17" pos:end="59:79"><name pos:start="59:17" pos:end="59:38">check_stream_specifier</name><argument_list pos:start="59:39" pos:end="59:79">(<argument pos:start="59:40" pos:end="59:40"><expr pos:start="59:40" pos:end="59:40"><name pos:start="59:40" pos:end="59:40">s</name></expr></argument>, <argument pos:start="59:43" pos:end="59:55"><expr pos:start="59:43" pos:end="59:55"><name pos:start="59:43" pos:end="59:55"><name pos:start="59:43" pos:end="59:43">s</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:52">streams</name><index pos:start="59:53" pos:end="59:55">[<expr pos:start="59:54" pos:end="59:54"><name pos:start="59:54" pos:end="59:54">i</name></expr>]</index></name></expr></argument>, <argument pos:start="59:58" pos:end="59:78"><expr pos:start="59:58" pos:end="59:78"><ternary pos:start="59:58" pos:end="59:78"><condition pos:start="59:58" pos:end="59:68"><expr pos:start="59:58" pos:end="59:66"><operator pos:start="59:58" pos:end="59:58">*</operator><name pos:start="59:59" pos:end="59:59">p</name> <operator pos:start="59:61" pos:end="59:62">==</operator> <literal type="char" pos:start="59:64" pos:end="59:66">':'</literal></expr> ?</condition><then pos:start="59:70" pos:end="59:74"> <expr pos:start="59:70" pos:end="59:74"><name pos:start="59:70" pos:end="59:70">p</name> <operator pos:start="59:72" pos:end="59:72">+</operator> <literal type="number" pos:start="59:74" pos:end="59:74">1</literal></expr> </then><else pos:start="59:76" pos:end="59:78">: <expr pos:start="59:78" pos:end="59:78"><name pos:start="59:78" pos:end="59:78">p</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator pos:start="59:81" pos:end="59:82">==</operator> <literal type="number" pos:start="59:84" pos:end="59:84">1</literal></expr>)</condition> <block pos:start="59:87" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:22">

                <expr_stmt pos:start="61:17" pos:end="61:35"><expr pos:start="61:17" pos:end="61:34"><name pos:start="61:17" pos:end="61:18">st</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:34"><name pos:start="61:22" pos:end="61:22">s</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:31">streams</name><index pos:start="61:32" pos:end="61:34">[<expr pos:start="61:33" pos:end="61:33"><name pos:start="61:33" pos:end="61:33">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="63:17" pos:end="63:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="77:9">if <condition pos:start="69:12" pos:end="69:16">(<expr pos:start="69:13" pos:end="69:15"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:15">st</name></expr>)</condition> <block pos:start="69:18" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:20">

            <expr_stmt pos:start="71:13" pos:end="73:63"><expr pos:start="71:13" pos:end="73:62"><call pos:start="71:13" pos:end="73:62"><name pos:start="71:13" pos:end="71:18">av_log</name><argument_list pos:start="71:19" pos:end="73:62">(<argument pos:start="71:20" pos:end="71:23"><expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">NULL</name></expr></argument>, <argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="71:40" pos:end="73:42"><expr pos:start="71:40" pos:end="73:42"><literal type="string" pos:start="71:40" pos:end="71:93">"Stream specifier '%s' in filtergraph description %s "</literal>

                   <literal type="string" pos:start="73:20" pos:end="73:42">"matches no streams.\n"</literal></expr></argument>, <argument pos:start="73:45" pos:end="73:45"><expr pos:start="73:45" pos:end="73:45"><name pos:start="73:45" pos:end="73:45">p</name></expr></argument>, <argument pos:start="73:48" pos:end="73:61"><expr pos:start="73:48" pos:end="73:61"><name pos:start="73:48" pos:end="73:61"><name pos:start="73:48" pos:end="73:49">fg</name><operator pos:start="73:50" pos:end="73:51">-&gt;</operator><name pos:start="73:52" pos:end="73:61">graph_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:20"><expr pos:start="75:13" pos:end="75:19"><call pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">exit</name><argument_list pos:start="75:17" pos:end="75:19">(<argument pos:start="75:18" pos:end="75:18"><expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:74"><expr pos:start="79:9" pos:end="79:73"><name pos:start="79:9" pos:end="79:11">ist</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:73"><name pos:start="79:15" pos:end="79:27">input_streams</name><index pos:start="79:28" pos:end="79:73">[<expr pos:start="79:29" pos:end="79:72"><name pos:start="79:29" pos:end="79:49"><name pos:start="79:29" pos:end="79:39">input_files</name><index pos:start="79:40" pos:end="79:49">[<expr pos:start="79:41" pos:end="79:48"><name pos:start="79:41" pos:end="79:48">file_idx</name></expr>]</index></name><operator pos:start="79:50" pos:end="79:51">-&gt;</operator><name pos:start="79:52" pos:end="79:60">ist_index</name> <operator pos:start="79:62" pos:end="79:62">+</operator> <name pos:start="79:64" pos:end="79:72"><name pos:start="79:64" pos:end="79:65">st</name><operator pos:start="79:66" pos:end="79:67">-&gt;</operator><name pos:start="79:68" pos:end="79:72">index</name></name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="107:5">else <block pos:start="81:12" pos:end="107:5">{<block_content pos:start="85:9" pos:end="105:9">

        <comment type="block" pos:start="83:9" pos:end="83:64">/* find the first unused stream of corresponding type */</comment>

        <for pos:start="85:9" pos:end="93:9">for <control pos:start="85:13" pos:end="85:46">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">i</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="85:41"><expr pos:start="85:21" pos:end="85:40"><name pos:start="85:21" pos:end="85:21">i</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:40">nb_input_streams</name></expr>;</condition> <incr pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:43">i</name><operator pos:start="85:44" pos:end="85:45">++</operator></expr></incr>)</control> <block pos:start="85:48" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:22">

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:15">ist</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:34"><name pos:start="87:19" pos:end="87:31">input_streams</name><index pos:start="87:32" pos:end="87:34">[<expr pos:start="87:33" pos:end="87:33"><name pos:start="87:33" pos:end="87:33">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="91:22"><if pos:start="89:13" pos:end="91:22">if <condition pos:start="89:16" pos:end="89:65">(<expr pos:start="89:17" pos:end="89:64"><name pos:start="89:17" pos:end="89:40"><name pos:start="89:17" pos:end="89:19">ist</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:28">dec_ctx</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:40">codec_type</name></name> <operator pos:start="89:42" pos:end="89:43">==</operator> <name pos:start="89:45" pos:end="89:48">type</name> <operator pos:start="89:50" pos:end="89:51">&amp;&amp;</operator> <name pos:start="89:53" pos:end="89:64"><name pos:start="89:53" pos:end="89:55">ist</name><operator pos:start="89:56" pos:end="89:57">-&gt;</operator><name pos:start="89:58" pos:end="89:64">discard</name></name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:22"><block_content pos:start="91:17" pos:end="91:22">

                <break pos:start="91:17" pos:end="91:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="95:9" pos:end="105:9"><if pos:start="95:9" pos:end="105:9">if <condition pos:start="95:12" pos:end="95:34">(<expr pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:13">i</name> <operator pos:start="95:15" pos:end="95:16">==</operator> <name pos:start="95:18" pos:end="95:33">nb_input_streams</name></expr>)</condition> <block pos:start="95:36" pos:end="105:9">{<block_content pos:start="97:13" pos:end="103:20">

            <expr_stmt pos:start="97:13" pos:end="101:41"><expr pos:start="97:13" pos:end="101:40"><call pos:start="97:13" pos:end="101:40"><name pos:start="97:13" pos:end="97:18">av_log</name><argument_list pos:start="97:19" pos:end="101:40">(<argument pos:start="97:20" pos:end="97:23"><expr pos:start="97:20" pos:end="97:23"><name pos:start="97:20" pos:end="97:23">NULL</name></expr></argument>, <argument pos:start="97:26" pos:end="97:37"><expr pos:start="97:26" pos:end="97:37"><name pos:start="97:26" pos:end="97:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="97:40" pos:end="99:58"><expr pos:start="97:40" pos:end="99:58"><literal type="string" pos:start="97:40" pos:end="97:75">"Cannot find a matching stream for "</literal>

                   <literal type="string" pos:start="99:20" pos:end="99:58">"unlabeled input pad %d on filter %s\n"</literal></expr></argument>, <argument pos:start="99:61" pos:end="99:71"><expr pos:start="99:61" pos:end="99:71"><name pos:start="99:61" pos:end="99:71"><name pos:start="99:61" pos:end="99:62">in</name><operator pos:start="99:63" pos:end="99:64">-&gt;</operator><name pos:start="99:65" pos:end="99:71">pad_idx</name></name></expr></argument>,

                   <argument pos:start="101:20" pos:end="101:39"><expr pos:start="101:20" pos:end="101:39"><name pos:start="101:20" pos:end="101:39"><name pos:start="101:20" pos:end="101:21">in</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:33">filter_ctx</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:39">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:20"><expr pos:start="103:13" pos:end="103:19"><call pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:16">exit</name><argument_list pos:start="103:17" pos:end="103:19">(<argument pos:start="103:18" pos:end="103:18"><expr pos:start="103:18" pos:end="103:18"><literal type="number" pos:start="103:18" pos:end="103:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:20"><expr pos:start="109:5" pos:end="109:19"><call pos:start="109:5" pos:end="109:19"><name pos:start="109:5" pos:end="109:14">av_assert0</name><argument_list pos:start="109:15" pos:end="109:19">(<argument pos:start="109:16" pos:end="109:18"><expr pos:start="109:16" pos:end="109:18"><name pos:start="109:16" pos:end="109:18">ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:29"><expr pos:start="113:5" pos:end="113:28"><name pos:start="113:5" pos:end="113:16"><name pos:start="113:5" pos:end="113:7">ist</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:16">discard</name></name>         <operator pos:start="113:26" pos:end="113:26">=</operator> <literal type="number" pos:start="113:28" pos:end="113:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:29"><expr pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:24"><name pos:start="115:5" pos:end="115:7">ist</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:24">decoding_needed</name></name> <operator pos:start="115:26" pos:end="115:26">=</operator> <literal type="number" pos:start="115:28" pos:end="115:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:38"><expr pos:start="117:5" pos:end="117:37"><name pos:start="117:5" pos:end="117:20"><name pos:start="117:5" pos:end="117:7">ist</name><operator pos:start="117:8" pos:end="117:9">-&gt;</operator><name pos:start="117:10" pos:end="117:11">st</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:20">discard</name></name> <operator pos:start="117:22" pos:end="117:22">=</operator> <name pos:start="117:24" pos:end="117:37">AVDISCARD_NONE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:42"><expr pos:start="121:5" pos:end="121:41"><call pos:start="121:5" pos:end="121:41"><name pos:start="121:5" pos:end="121:14">GROW_ARRAY</name><argument_list pos:start="121:15" pos:end="121:41">(<argument pos:start="121:16" pos:end="121:25"><expr pos:start="121:16" pos:end="121:25"><name pos:start="121:16" pos:end="121:25"><name pos:start="121:16" pos:end="121:17">fg</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:25">inputs</name></name></expr></argument>, <argument pos:start="121:28" pos:end="121:40"><expr pos:start="121:28" pos:end="121:40"><name pos:start="121:28" pos:end="121:40"><name pos:start="121:28" pos:end="121:29">fg</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:40">nb_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="125:16"><if pos:start="123:5" pos:end="125:16">if <condition pos:start="123:8" pos:end="123:78">(<expr pos:start="123:9" pos:end="123:77"><operator pos:start="123:9" pos:end="123:9">!</operator><operator pos:start="123:10" pos:end="123:10">(</operator><name pos:start="123:11" pos:end="123:39"><name pos:start="123:11" pos:end="123:12">fg</name><operator pos:start="123:13" pos:end="123:14">-&gt;</operator><name pos:start="123:15" pos:end="123:20">inputs</name><index pos:start="123:21" pos:end="123:39">[<expr pos:start="123:22" pos:end="123:38"><name pos:start="123:22" pos:end="123:34"><name pos:start="123:22" pos:end="123:23">fg</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:34">nb_inputs</name></name> <operator pos:start="123:36" pos:end="123:36">-</operator> <literal type="number" pos:start="123:38" pos:end="123:38">1</literal></expr>]</index></name> <operator pos:start="123:41" pos:end="123:41">=</operator> <call pos:start="123:43" pos:end="123:76"><name pos:start="123:43" pos:end="123:52">av_mallocz</name><argument_list pos:start="123:53" pos:end="123:76">(<argument pos:start="123:54" pos:end="123:75"><expr pos:start="123:54" pos:end="123:75"><sizeof pos:start="123:54" pos:end="123:75">sizeof<argument_list pos:start="123:60" pos:end="123:75">(<argument pos:start="123:61" pos:end="123:74"><expr pos:start="123:61" pos:end="123:74"><operator pos:start="123:61" pos:end="123:61">*</operator><name pos:start="123:62" pos:end="123:74"><name pos:start="123:62" pos:end="123:63">fg</name><operator pos:start="123:64" pos:end="123:65">-&gt;</operator><name pos:start="123:66" pos:end="123:71">inputs</name><index pos:start="123:72" pos:end="123:74">[<expr pos:start="123:73" pos:end="123:73"><literal type="number" pos:start="123:73" pos:end="123:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="123:77" pos:end="123:77">)</operator></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:16"><block_content pos:start="125:9" pos:end="125:16">

        <expr_stmt pos:start="125:9" pos:end="125:16"><expr pos:start="125:9" pos:end="125:15"><call pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:12">exit</name><argument_list pos:start="125:13" pos:end="125:15">(<argument pos:start="125:14" pos:end="125:14"><expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:47"><expr pos:start="127:5" pos:end="127:46"><name pos:start="127:5" pos:end="127:33"><name pos:start="127:5" pos:end="127:6">fg</name><operator pos:start="127:7" pos:end="127:8">-&gt;</operator><name pos:start="127:9" pos:end="127:14">inputs</name><index pos:start="127:15" pos:end="127:33">[<expr pos:start="127:16" pos:end="127:32"><name pos:start="127:16" pos:end="127:28"><name pos:start="127:16" pos:end="127:17">fg</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:28">nb_inputs</name></name> <operator pos:start="127:30" pos:end="127:30">-</operator> <literal type="number" pos:start="127:32" pos:end="127:32">1</literal></expr>]</index></name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:38">ist</name>   <operator pos:start="127:42" pos:end="127:42">=</operator> <name pos:start="127:44" pos:end="127:46">ist</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:46"><expr pos:start="129:5" pos:end="129:45"><name pos:start="129:5" pos:end="129:33"><name pos:start="129:5" pos:end="129:6">fg</name><operator pos:start="129:7" pos:end="129:8">-&gt;</operator><name pos:start="129:9" pos:end="129:14">inputs</name><index pos:start="129:15" pos:end="129:33">[<expr pos:start="129:16" pos:end="129:32"><name pos:start="129:16" pos:end="129:28"><name pos:start="129:16" pos:end="129:17">fg</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:28">nb_inputs</name></name> <operator pos:start="129:30" pos:end="129:30">-</operator> <literal type="number" pos:start="129:32" pos:end="129:32">1</literal></expr>]</index></name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:40">graph</name> <operator pos:start="129:42" pos:end="129:42">=</operator> <name pos:start="129:44" pos:end="129:45">fg</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:47"><expr pos:start="131:5" pos:end="131:46"><name pos:start="131:5" pos:end="131:33"><name pos:start="131:5" pos:end="131:6">fg</name><operator pos:start="131:7" pos:end="131:8">-&gt;</operator><name pos:start="131:9" pos:end="131:14">inputs</name><index pos:start="131:15" pos:end="131:33">[<expr pos:start="131:16" pos:end="131:32"><name pos:start="131:16" pos:end="131:28"><name pos:start="131:16" pos:end="131:17">fg</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:28">nb_inputs</name></name> <operator pos:start="131:30" pos:end="131:30">-</operator> <literal type="number" pos:start="131:32" pos:end="131:32">1</literal></expr>]</index></name><operator pos:start="131:34" pos:end="131:35">-&gt;</operator><name pos:start="131:36" pos:end="131:41">format</name> <operator pos:start="131:43" pos:end="131:43">=</operator> <operator pos:start="131:45" pos:end="131:45">-</operator><literal type="number" pos:start="131:46" pos:end="131:46">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:85"><expr pos:start="135:5" pos:end="135:84"><name pos:start="135:5" pos:end="135:33"><name pos:start="135:5" pos:end="135:6">fg</name><operator pos:start="135:7" pos:end="135:8">-&gt;</operator><name pos:start="135:9" pos:end="135:14">inputs</name><index pos:start="135:15" pos:end="135:33">[<expr pos:start="135:16" pos:end="135:32"><name pos:start="135:16" pos:end="135:28"><name pos:start="135:16" pos:end="135:17">fg</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:28">nb_inputs</name></name> <operator pos:start="135:30" pos:end="135:30">-</operator> <literal type="number" pos:start="135:32" pos:end="135:32">1</literal></expr>]</index></name><operator pos:start="135:34" pos:end="135:35">-&gt;</operator><name pos:start="135:36" pos:end="135:46">frame_queue</name> <operator pos:start="135:48" pos:end="135:48">=</operator> <call pos:start="135:50" pos:end="135:84"><name pos:start="135:50" pos:end="135:62">av_fifo_alloc</name><argument_list pos:start="135:63" pos:end="135:84">(<argument pos:start="135:64" pos:end="135:83"><expr pos:start="135:64" pos:end="135:83"><literal type="number" pos:start="135:64" pos:end="135:64">8</literal> <operator pos:start="135:66" pos:end="135:66">*</operator> <sizeof pos:start="135:68" pos:end="135:83">sizeof<argument_list pos:start="135:74" pos:end="135:83">(<argument pos:start="135:75" pos:end="135:82"><expr pos:start="135:75" pos:end="135:82"><name pos:start="135:75" pos:end="135:81">AVFrame</name><operator pos:start="135:82" pos:end="135:82">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="139:24"><if pos:start="137:5" pos:end="139:24">if <condition pos:start="137:8" pos:end="137:39">(<expr pos:start="137:9" pos:end="137:38"><operator pos:start="137:9" pos:end="137:9">!</operator><name pos:start="137:10" pos:end="137:38"><name pos:start="137:10" pos:end="137:11">fg</name><operator pos:start="137:12" pos:end="137:13">-&gt;</operator><name pos:start="137:14" pos:end="137:19">inputs</name><index pos:start="137:20" pos:end="137:38">[<expr pos:start="137:21" pos:end="137:37"><name pos:start="137:21" pos:end="137:33"><name pos:start="137:21" pos:end="137:22">fg</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:33">nb_inputs</name></name> <operator pos:start="137:35" pos:end="137:35">-</operator> <literal type="number" pos:start="137:37" pos:end="137:37">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:24"><block_content pos:start="139:9" pos:end="139:24">

        <expr_stmt pos:start="139:9" pos:end="139:24"><expr pos:start="139:9" pos:end="139:23"><call pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:20">exit_program</name><argument_list pos:start="139:21" pos:end="139:23">(<argument pos:start="139:22" pos:end="139:22"><expr pos:start="139:22" pos:end="139:22"><literal type="number" pos:start="139:22" pos:end="139:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:46"><expr pos:start="143:5" pos:end="143:45"><call pos:start="143:5" pos:end="143:45"><name pos:start="143:5" pos:end="143:14">GROW_ARRAY</name><argument_list pos:start="143:15" pos:end="143:45">(<argument pos:start="143:16" pos:end="143:27"><expr pos:start="143:16" pos:end="143:27"><name pos:start="143:16" pos:end="143:27"><name pos:start="143:16" pos:end="143:18">ist</name><operator pos:start="143:19" pos:end="143:20">-&gt;</operator><name pos:start="143:21" pos:end="143:27">filters</name></name></expr></argument>, <argument pos:start="143:30" pos:end="143:44"><expr pos:start="143:30" pos:end="143:44"><name pos:start="143:30" pos:end="143:44"><name pos:start="143:30" pos:end="143:32">ist</name><operator pos:start="143:33" pos:end="143:34">-&gt;</operator><name pos:start="143:35" pos:end="143:44">nb_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:70"><expr pos:start="145:5" pos:end="145:69"><name pos:start="145:5" pos:end="145:37"><name pos:start="145:5" pos:end="145:7">ist</name><operator pos:start="145:8" pos:end="145:9">-&gt;</operator><name pos:start="145:10" pos:end="145:16">filters</name><index pos:start="145:17" pos:end="145:37">[<expr pos:start="145:18" pos:end="145:36"><name pos:start="145:18" pos:end="145:32"><name pos:start="145:18" pos:end="145:20">ist</name><operator pos:start="145:21" pos:end="145:22">-&gt;</operator><name pos:start="145:23" pos:end="145:32">nb_filters</name></name> <operator pos:start="145:34" pos:end="145:34">-</operator> <literal type="number" pos:start="145:36" pos:end="145:36">1</literal></expr>]</index></name> <operator pos:start="145:39" pos:end="145:39">=</operator> <name pos:start="145:41" pos:end="145:69"><name pos:start="145:41" pos:end="145:42">fg</name><operator pos:start="145:43" pos:end="145:44">-&gt;</operator><name pos:start="145:45" pos:end="145:50">inputs</name><index pos:start="145:51" pos:end="145:69">[<expr pos:start="145:52" pos:end="145:68"><name pos:start="145:52" pos:end="145:64"><name pos:start="145:52" pos:end="145:53">fg</name><operator pos:start="145:54" pos:end="145:55">-&gt;</operator><name pos:start="145:56" pos:end="145:64">nb_inputs</name></name> <operator pos:start="145:66" pos:end="145:66">-</operator> <literal type="number" pos:start="145:68" pos:end="145:68">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
