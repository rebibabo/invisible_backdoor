<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5800.c" pos:tabs="8"><function pos:start="1:1" pos:end="311:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">cchip_write</name><parameter_list pos:start="1:24" pos:end="3:52">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:61"><decl pos:start="1:39" pos:end="1:61"><type pos:start="1:39" pos:end="1:61"><name pos:start="1:39" pos:end="1:56">target_phys_addr_t</name></type> <name pos:start="1:58" pos:end="1:61">addr</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:32">uint64_t</name></type> <name pos:start="3:34" pos:end="3:36">v32</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:46">unsigned</name></type> <name pos:start="3:48" pos:end="3:51">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="311:1">{<block_content pos:start="7:5" pos:end="309:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">TyphoonState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:28">= <expr pos:start="7:23" pos:end="7:28"><name pos:start="7:23" pos:end="7:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name></decl>, <decl pos:start="9:19" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:24">oldval</name></decl>, <decl pos:start="9:27" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:27" pos:end="9:32">newval</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="25:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:12">addr</name> <operator pos:start="13:14" pos:end="13:14">&amp;</operator> <literal type="number" pos:start="13:16" pos:end="13:16">4</literal></expr>)</condition> <block pos:start="13:19" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:39"><expr pos:start="15:9" pos:end="15:38"><name pos:start="15:9" pos:end="15:11">val</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:17">v32</name> <operator pos:start="15:19" pos:end="15:20">&lt;&lt;</operator> <literal type="number" pos:start="15:22" pos:end="15:23">32</literal> <operator pos:start="15:25" pos:end="15:25">|</operator> <name pos:start="15:27" pos:end="15:38"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:38">latch_tmp</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:18"><expr pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:12">addr</name> <operator pos:start="17:14" pos:end="17:15">^=</operator> <literal type="number" pos:start="17:17" pos:end="17:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="25:5">else <block pos:start="19:12" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:20">latch_tmp</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <name pos:start="21:24" pos:end="21:26">v32</name></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="29:5" pos:end="309:5">switch <condition pos:start="29:12" pos:end="29:17">(<expr pos:start="29:13" pos:end="29:16"><name pos:start="29:13" pos:end="29:16">addr</name></expr>)</condition> <block pos:start="29:19" pos:end="309:5">{<block_content pos:start="31:5" pos:end="307:15">

    <case pos:start="31:5" pos:end="31:16">case <expr pos:start="31:10" pos:end="31:15"><literal type="number" pos:start="31:10" pos:end="31:15">0x0000</literal></expr>:</case>

        <comment type="block" pos:start="33:9" pos:end="33:56">/* CSC: Cchip System Configuration Register.  */</comment>

        <comment type="block" pos:start="35:9" pos:end="35:59">/* All sorts of data here; nothing relevant RW.  */</comment>

        <break pos:start="37:9" pos:end="37:14">break;</break>



    <case pos:start="41:5" pos:end="41:16">case <expr pos:start="41:10" pos:end="41:15"><literal type="number" pos:start="41:10" pos:end="41:15">0x0040</literal></expr>:</case>

        <comment type="block" pos:start="43:9" pos:end="43:43">/* MTR: Memory Timing Register.  */</comment>

        <comment type="block" pos:start="45:9" pos:end="45:55">/* All sorts of stuff related to real DRAM.  */</comment>

        <break pos:start="47:9" pos:end="47:14">break;</break>



    <case pos:start="51:5" pos:end="51:16">case <expr pos:start="51:10" pos:end="51:15"><literal type="number" pos:start="51:10" pos:end="51:15">0x0080</literal></expr>:</case>

        <comment type="block" pos:start="53:9" pos:end="53:44">/* MISC: Miscellaneous Register.  */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:40"><expr pos:start="55:9" pos:end="55:39"><name pos:start="55:9" pos:end="55:14">newval</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:23">oldval</name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:39"><name pos:start="55:27" pos:end="55:27">s</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:34">cchip</name><operator pos:start="55:35" pos:end="55:35">.</operator><name pos:start="55:36" pos:end="55:39">misc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:14">newval</name> <operator pos:start="57:16" pos:end="57:17">&amp;=</operator> <operator pos:start="57:19" pos:end="57:19">~</operator><operator pos:start="57:20" pos:end="57:20">(</operator><name pos:start="57:21" pos:end="57:23">val</name> <operator pos:start="57:25" pos:end="57:25">&amp;</operator> <literal type="number" pos:start="57:27" pos:end="57:36">0x10000ff0</literal><operator pos:start="57:37" pos:end="57:37">)</operator></expr>;</expr_stmt>     <comment type="block" pos:start="57:44" pos:end="57:59">/* W1C fields */</comment>

        <if_stmt pos:start="59:9" pos:end="73:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:27">(<expr pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:15">val</name> <operator pos:start="59:17" pos:end="59:17">&amp;</operator> <literal type="number" pos:start="59:19" pos:end="59:26">0x100000</literal></expr>)</condition> <block pos:start="59:29" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:35">

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:18">newval</name> <operator pos:start="61:20" pos:end="61:21">&amp;=</operator> <operator pos:start="61:23" pos:end="61:23">~</operator><literal type="number" pos:start="61:24" pos:end="61:34">0xff0000ull</literal></expr>;</expr_stmt>        <comment type="block" pos:start="61:44" pos:end="61:71">/* ACL clears ABT and ABW */</comment>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="73:9">else <block pos:start="63:16" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:13">

            <expr_stmt pos:start="65:13" pos:end="65:39"><expr pos:start="65:13" pos:end="65:38"><name pos:start="65:13" pos:end="65:18">newval</name> <operator pos:start="65:20" pos:end="65:21">|=</operator> <name pos:start="65:23" pos:end="65:25">val</name> <operator pos:start="65:27" pos:end="65:27">&amp;</operator> <literal type="number" pos:start="65:29" pos:end="65:38">0x00f00000</literal></expr>;</expr_stmt>    <comment type="block" pos:start="65:44" pos:end="65:65">/* ABT field is W1S */</comment>

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:40">(<expr pos:start="67:17" pos:end="67:39"><operator pos:start="67:17" pos:end="67:17">(</operator><name pos:start="67:18" pos:end="67:23">newval</name> <operator pos:start="67:25" pos:end="67:25">&amp;</operator> <literal type="number" pos:start="67:27" pos:end="67:33">0xf0000</literal><operator pos:start="67:34" pos:end="67:34">)</operator> <operator pos:start="67:36" pos:end="67:37">==</operator> <literal type="number" pos:start="67:39" pos:end="67:39">0</literal></expr>)</condition> <block pos:start="67:42" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:40">

                <expr_stmt pos:start="69:17" pos:end="69:40"><expr pos:start="69:17" pos:end="69:39"><name pos:start="69:17" pos:end="69:22">newval</name> <operator pos:start="69:24" pos:end="69:25">|=</operator> <name pos:start="69:27" pos:end="69:29">val</name> <operator pos:start="69:31" pos:end="69:31">&amp;</operator> <literal type="number" pos:start="69:33" pos:end="69:39">0xf0000</literal></expr>;</expr_stmt>   <comment type="block" pos:start="69:44" pos:end="69:74">/* ABW field is W1S iff zero */</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:14">newval</name> <operator pos:start="75:16" pos:end="75:17">|=</operator> <operator pos:start="75:19" pos:end="75:19">(</operator><name pos:start="75:20" pos:end="75:22">val</name> <operator pos:start="75:24" pos:end="75:24">&amp;</operator> <literal type="number" pos:start="75:26" pos:end="75:31">0xf000</literal><operator pos:start="75:32" pos:end="75:32">)</operator> <operator pos:start="75:34" pos:end="75:35">&gt;&gt;</operator> <literal type="number" pos:start="75:37" pos:end="75:37">4</literal></expr>;</expr_stmt>     <comment type="block" pos:start="75:44" pos:end="75:74">/* IPREQ field sets IPINTR.  */</comment>



        <expr_stmt pos:start="79:9" pos:end="79:36"><expr pos:start="79:9" pos:end="79:35"><name pos:start="79:9" pos:end="79:14">newval</name> <operator pos:start="79:16" pos:end="79:17">&amp;=</operator> <operator pos:start="79:19" pos:end="79:19">~</operator><literal type="number" pos:start="79:20" pos:end="79:35">0xf0000000000ull</literal></expr>;</expr_stmt>       <comment type="block" pos:start="79:44" pos:end="79:65">/* WO and RW fields */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:41"><expr pos:start="81:9" pos:end="81:40"><name pos:start="81:9" pos:end="81:14">newval</name> <operator pos:start="81:16" pos:end="81:17">|=</operator> <name pos:start="81:19" pos:end="81:21">val</name> <operator pos:start="81:23" pos:end="81:23">&amp;</operator> <literal type="number" pos:start="81:25" pos:end="81:40">0xf0000000000ull</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:31"><expr pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:16">cchip</name><operator pos:start="83:17" pos:end="83:17">.</operator><name pos:start="83:18" pos:end="83:21">misc</name></name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:30">newval</name></expr>;</expr_stmt>



        <comment type="block" pos:start="87:9" pos:end="87:52">/* Pass on changes to IPI and ITI state.  */</comment>

        <if_stmt pos:start="89:9" pos:end="125:9"><if pos:start="89:9" pos:end="125:9">if <condition pos:start="89:12" pos:end="89:38">(<expr pos:start="89:13" pos:end="89:37"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:19">newval</name> <operator pos:start="89:21" pos:end="89:21">^</operator> <name pos:start="89:23" pos:end="89:28">oldval</name><operator pos:start="89:29" pos:end="89:29">)</operator> <operator pos:start="89:31" pos:end="89:31">&amp;</operator> <literal type="number" pos:start="89:33" pos:end="89:37">0xff0</literal></expr>)</condition> <block pos:start="89:40" pos:end="125:9">{<block_content pos:start="91:13" pos:end="123:13">

            <decl_stmt pos:start="91:13" pos:end="91:18"><decl pos:start="91:13" pos:end="91:17"><type pos:start="91:13" pos:end="91:15"><name pos:start="91:13" pos:end="91:15">int</name></type> <name pos:start="91:17" pos:end="91:17">i</name></decl>;</decl_stmt>

            <for pos:start="93:13" pos:end="123:13">for <control pos:start="93:17" pos:end="93:35">(<init pos:start="93:18" pos:end="93:23"><expr pos:start="93:18" pos:end="93:22"><name pos:start="93:18" pos:end="93:18">i</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</init> <condition pos:start="93:25" pos:end="93:30"><expr pos:start="93:25" pos:end="93:29"><name pos:start="93:25" pos:end="93:25">i</name> <operator pos:start="93:27" pos:end="93:27">&lt;</operator> <literal type="number" pos:start="93:29" pos:end="93:29">4</literal></expr>;</condition> <incr pos:start="93:32" pos:end="93:34"><expr pos:start="93:32" pos:end="93:34"><operator pos:start="93:32" pos:end="93:33">++</operator><name pos:start="93:34" pos:end="93:34">i</name></expr></incr>)</control> <block pos:start="93:37" pos:end="123:13">{<block_content pos:start="95:17" pos:end="121:17">

                <decl_stmt pos:start="95:17" pos:end="95:53"><decl pos:start="95:17" pos:end="95:52"><type pos:start="95:17" pos:end="95:31"><name pos:start="95:17" pos:end="95:29">CPUAlphaState</name> <modifier pos:start="95:31" pos:end="95:31">*</modifier></type><name pos:start="95:32" pos:end="95:34">env</name> <init pos:start="95:36" pos:end="95:52">= <expr pos:start="95:38" pos:end="95:52"><name pos:start="95:38" pos:end="95:52"><name pos:start="95:38" pos:end="95:38">s</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:45">cchip</name><operator pos:start="95:46" pos:end="95:46">.</operator><name pos:start="95:47" pos:end="95:49">cpu</name><index pos:start="95:50" pos:end="95:52">[<expr pos:start="95:51" pos:end="95:51"><name pos:start="95:51" pos:end="95:51">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="97:17" pos:end="121:17"><if pos:start="97:17" pos:end="121:17">if <condition pos:start="97:20" pos:end="97:24">(<expr pos:start="97:21" pos:end="97:23"><name pos:start="97:21" pos:end="97:23">env</name></expr>)</condition> <block pos:start="97:26" pos:end="121:17">{<block_content pos:start="101:21" pos:end="119:21">

                    <comment type="block" pos:start="99:21" pos:end="99:73">/* IPI can be either cleared or set by the write.  */</comment>

                    <if_stmt pos:start="101:21" pos:end="109:21"><if pos:start="101:21" pos:end="105:21">if <condition pos:start="101:24" pos:end="101:48">(<expr pos:start="101:25" pos:end="101:47"><name pos:start="101:25" pos:end="101:30">newval</name> <operator pos:start="101:32" pos:end="101:32">&amp;</operator> <operator pos:start="101:34" pos:end="101:34">(</operator><literal type="number" pos:start="101:35" pos:end="101:35">1</literal> <operator pos:start="101:37" pos:end="101:38">&lt;&lt;</operator> <operator pos:start="101:40" pos:end="101:40">(</operator><name pos:start="101:41" pos:end="101:41">i</name> <operator pos:start="101:43" pos:end="101:43">+</operator> <literal type="number" pos:start="101:45" pos:end="101:45">8</literal><operator pos:start="101:46" pos:end="101:46">)</operator><operator pos:start="101:47" pos:end="101:47">)</operator></expr>)</condition> <block pos:start="101:50" pos:end="105:21">{<block_content pos:start="103:25" pos:end="103:62">

                        <expr_stmt pos:start="103:25" pos:end="103:62"><expr pos:start="103:25" pos:end="103:61"><call pos:start="103:25" pos:end="103:61"><name pos:start="103:25" pos:end="103:37">cpu_interrupt</name><argument_list pos:start="103:38" pos:end="103:61">(<argument pos:start="103:39" pos:end="103:41"><expr pos:start="103:39" pos:end="103:41"><name pos:start="103:39" pos:end="103:41">env</name></expr></argument>, <argument pos:start="103:44" pos:end="103:60"><expr pos:start="103:44" pos:end="103:60"><name pos:start="103:44" pos:end="103:60">CPU_INTERRUPT_SMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="105:23" pos:end="109:21">else <block pos:start="105:28" pos:end="109:21">{<block_content pos:start="107:25" pos:end="107:68">

                        <expr_stmt pos:start="107:25" pos:end="107:68"><expr pos:start="107:25" pos:end="107:67"><call pos:start="107:25" pos:end="107:67"><name pos:start="107:25" pos:end="107:43">cpu_reset_interrupt</name><argument_list pos:start="107:44" pos:end="107:67">(<argument pos:start="107:45" pos:end="107:47"><expr pos:start="107:45" pos:end="107:47"><name pos:start="107:45" pos:end="107:47">env</name></expr></argument>, <argument pos:start="107:50" pos:end="107:66"><expr pos:start="107:50" pos:end="107:66"><name pos:start="107:50" pos:end="107:66">CPU_INTERRUPT_SMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <comment type="block" pos:start="113:21" pos:end="113:64">/* ITI can only be cleared by the write.  */</comment>

                    <if_stmt pos:start="115:21" pos:end="119:21"><if pos:start="115:21" pos:end="119:21">if <condition pos:start="115:24" pos:end="115:55">(<expr pos:start="115:25" pos:end="115:54"><operator pos:start="115:25" pos:end="115:25">(</operator><name pos:start="115:26" pos:end="115:31">newval</name> <operator pos:start="115:33" pos:end="115:33">&amp;</operator> <operator pos:start="115:35" pos:end="115:35">(</operator><literal type="number" pos:start="115:36" pos:end="115:36">1</literal> <operator pos:start="115:38" pos:end="115:39">&lt;&lt;</operator> <operator pos:start="115:41" pos:end="115:41">(</operator><name pos:start="115:42" pos:end="115:42">i</name> <operator pos:start="115:44" pos:end="115:44">+</operator> <literal type="number" pos:start="115:46" pos:end="115:46">4</literal><operator pos:start="115:47" pos:end="115:47">)</operator><operator pos:start="115:48" pos:end="115:48">)</operator><operator pos:start="115:49" pos:end="115:49">)</operator> <operator pos:start="115:51" pos:end="115:52">==</operator> <literal type="number" pos:start="115:54" pos:end="115:54">0</literal></expr>)</condition> <block pos:start="115:57" pos:end="119:21">{<block_content pos:start="117:25" pos:end="117:70">

                        <expr_stmt pos:start="117:25" pos:end="117:70"><expr pos:start="117:25" pos:end="117:69"><call pos:start="117:25" pos:end="117:69"><name pos:start="117:25" pos:end="117:43">cpu_reset_interrupt</name><argument_list pos:start="117:44" pos:end="117:69">(<argument pos:start="117:45" pos:end="117:47"><expr pos:start="117:45" pos:end="117:47"><name pos:start="117:45" pos:end="117:47">env</name></expr></argument>, <argument pos:start="117:50" pos:end="117:68"><expr pos:start="117:50" pos:end="117:68"><name pos:start="117:50" pos:end="117:68">CPU_INTERRUPT_TIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>



    <case pos:start="131:5" pos:end="131:16">case <expr pos:start="131:10" pos:end="131:15"><literal type="number" pos:start="131:10" pos:end="131:15">0x00c0</literal></expr>:</case>

        <comment type="block" pos:start="133:9" pos:end="133:52">/* MPD: Memory Presence Detect Register.  */</comment>

        <break pos:start="135:9" pos:end="135:14">break;</break>



    <case pos:start="139:5" pos:end="139:16">case <expr pos:start="139:10" pos:end="139:15"><literal type="number" pos:start="139:10" pos:end="139:15">0x0100</literal></expr>:</case> <comment type="block" pos:start="139:18" pos:end="139:27">/* AAR0 */</comment>

    <case pos:start="141:5" pos:end="141:16">case <expr pos:start="141:10" pos:end="141:15"><literal type="number" pos:start="141:10" pos:end="141:15">0x0140</literal></expr>:</case> <comment type="block" pos:start="141:18" pos:end="141:27">/* AAR1 */</comment>

    <case pos:start="143:5" pos:end="143:16">case <expr pos:start="143:10" pos:end="143:15"><literal type="number" pos:start="143:10" pos:end="143:15">0x0180</literal></expr>:</case> <comment type="block" pos:start="143:18" pos:end="143:27">/* AAR2 */</comment>

    <case pos:start="145:5" pos:end="145:16">case <expr pos:start="145:10" pos:end="145:15"><literal type="number" pos:start="145:10" pos:end="145:15">0x01c0</literal></expr>:</case> <comment type="block" pos:start="145:18" pos:end="145:27">/* AAR3 */</comment>

        <comment type="block" pos:start="147:9" pos:end="147:43">/* AAR: Array Address Register.  */</comment>

        <comment type="block" pos:start="149:9" pos:end="149:51">/* All sorts of information about DRAM.  */</comment>

        <break pos:start="151:9" pos:end="151:14">break;</break>



    <case pos:start="155:5" pos:end="155:16">case <expr pos:start="155:10" pos:end="155:15"><literal type="number" pos:start="155:10" pos:end="155:15">0x0200</literal></expr>:</case> <comment type="block" pos:start="155:18" pos:end="155:27">/* DIM0 */</comment>

        <comment type="block" pos:start="157:9" pos:end="157:57">/* DIM: Device Interrupt Mask Register, CPU0.  */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:30"><expr pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:23"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:16">cchip</name><operator pos:start="159:17" pos:end="159:17">.</operator><name pos:start="159:18" pos:end="159:20">dim</name><index pos:start="159:21" pos:end="159:23">[<expr pos:start="159:22" pos:end="159:22"><literal type="number" pos:start="159:22" pos:end="159:22">0</literal></expr>]</index></name> <operator pos:start="159:25" pos:end="159:25">=</operator> <name pos:start="159:27" pos:end="159:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:61"><expr pos:start="161:9" pos:end="161:60"><call pos:start="161:9" pos:end="161:60"><name pos:start="161:9" pos:end="161:22">cpu_irq_change</name><argument_list pos:start="161:23" pos:end="161:60">(<argument pos:start="161:24" pos:end="161:38"><expr pos:start="161:24" pos:end="161:38"><name pos:start="161:24" pos:end="161:38"><name pos:start="161:24" pos:end="161:24">s</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:31">cchip</name><operator pos:start="161:32" pos:end="161:32">.</operator><name pos:start="161:33" pos:end="161:35">cpu</name><index pos:start="161:36" pos:end="161:38">[<expr pos:start="161:37" pos:end="161:37"><literal type="number" pos:start="161:37" pos:end="161:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="161:41" pos:end="161:59"><expr pos:start="161:41" pos:end="161:59"><name pos:start="161:41" pos:end="161:43">val</name> <operator pos:start="161:45" pos:end="161:45">&amp;</operator> <name pos:start="161:47" pos:end="161:59"><name pos:start="161:47" pos:end="161:47">s</name><operator pos:start="161:48" pos:end="161:49">-&gt;</operator><name pos:start="161:50" pos:end="161:54">cchip</name><operator pos:start="161:55" pos:end="161:55">.</operator><name pos:start="161:56" pos:end="161:59">drir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:16">case <expr pos:start="165:10" pos:end="165:15"><literal type="number" pos:start="165:10" pos:end="165:15">0x0240</literal></expr>:</case> <comment type="block" pos:start="165:18" pos:end="165:27">/* DIM1 */</comment>

        <comment type="block" pos:start="167:9" pos:end="167:57">/* DIM: Device Interrupt Mask Register, CPU1.  */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:30"><expr pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:16">cchip</name><operator pos:start="169:17" pos:end="169:17">.</operator><name pos:start="169:18" pos:end="169:20">dim</name><index pos:start="169:21" pos:end="169:23">[<expr pos:start="169:22" pos:end="169:22"><literal type="number" pos:start="169:22" pos:end="169:22">0</literal></expr>]</index></name> <operator pos:start="169:25" pos:end="169:25">=</operator> <name pos:start="169:27" pos:end="169:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:61"><expr pos:start="171:9" pos:end="171:60"><call pos:start="171:9" pos:end="171:60"><name pos:start="171:9" pos:end="171:22">cpu_irq_change</name><argument_list pos:start="171:23" pos:end="171:60">(<argument pos:start="171:24" pos:end="171:38"><expr pos:start="171:24" pos:end="171:38"><name pos:start="171:24" pos:end="171:38"><name pos:start="171:24" pos:end="171:24">s</name><operator pos:start="171:25" pos:end="171:26">-&gt;</operator><name pos:start="171:27" pos:end="171:31">cchip</name><operator pos:start="171:32" pos:end="171:32">.</operator><name pos:start="171:33" pos:end="171:35">cpu</name><index pos:start="171:36" pos:end="171:38">[<expr pos:start="171:37" pos:end="171:37"><literal type="number" pos:start="171:37" pos:end="171:37">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="171:41" pos:end="171:59"><expr pos:start="171:41" pos:end="171:59"><name pos:start="171:41" pos:end="171:43">val</name> <operator pos:start="171:45" pos:end="171:45">&amp;</operator> <name pos:start="171:47" pos:end="171:59"><name pos:start="171:47" pos:end="171:47">s</name><operator pos:start="171:48" pos:end="171:49">-&gt;</operator><name pos:start="171:50" pos:end="171:54">cchip</name><operator pos:start="171:55" pos:end="171:55">.</operator><name pos:start="171:56" pos:end="171:59">drir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="173:9" pos:end="173:14">break;</break>



    <case pos:start="177:5" pos:end="177:16">case <expr pos:start="177:10" pos:end="177:15"><literal type="number" pos:start="177:10" pos:end="177:15">0x0280</literal></expr>:</case> <comment type="block" pos:start="177:18" pos:end="177:32">/* DIR0 (RO) */</comment>

    <case pos:start="179:5" pos:end="179:16">case <expr pos:start="179:10" pos:end="179:15"><literal type="number" pos:start="179:10" pos:end="179:15">0x02c0</literal></expr>:</case> <comment type="block" pos:start="179:18" pos:end="179:32">/* DIR1 (RO) */</comment>

    <case pos:start="181:5" pos:end="181:16">case <expr pos:start="181:10" pos:end="181:15"><literal type="number" pos:start="181:10" pos:end="181:15">0x0300</literal></expr>:</case> <comment type="block" pos:start="181:18" pos:end="181:32">/* DRIR (RO) */</comment>

        <break pos:start="183:9" pos:end="183:14">break;</break>



    <case pos:start="187:5" pos:end="187:16">case <expr pos:start="187:10" pos:end="187:15"><literal type="number" pos:start="187:10" pos:end="187:15">0x0340</literal></expr>:</case>

        <comment type="block" pos:start="189:9" pos:end="189:44">/* PRBEN: Probe Enable Register.  */</comment>

        <break pos:start="191:9" pos:end="191:14">break;</break>



    <case pos:start="195:5" pos:end="195:16">case <expr pos:start="195:10" pos:end="195:15"><literal type="number" pos:start="195:10" pos:end="195:15">0x0380</literal></expr>:</case> <comment type="block" pos:start="195:18" pos:end="195:27">/* IIC0 */</comment>

        <expr_stmt pos:start="197:9" pos:end="197:41"><expr pos:start="197:9" pos:end="197:40"><name pos:start="197:9" pos:end="197:23"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:16">cchip</name><operator pos:start="197:17" pos:end="197:17">.</operator><name pos:start="197:18" pos:end="197:20">iic</name><index pos:start="197:21" pos:end="197:23">[<expr pos:start="197:22" pos:end="197:22"><literal type="number" pos:start="197:22" pos:end="197:22">0</literal></expr>]</index></name> <operator pos:start="197:25" pos:end="197:25">=</operator> <name pos:start="197:27" pos:end="197:29">val</name> <operator pos:start="197:31" pos:end="197:31">&amp;</operator> <literal type="number" pos:start="197:33" pos:end="197:40">0xffffff</literal></expr>;</expr_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:16">case <expr pos:start="201:10" pos:end="201:15"><literal type="number" pos:start="201:10" pos:end="201:15">0x03c0</literal></expr>:</case> <comment type="block" pos:start="201:18" pos:end="201:27">/* IIC1 */</comment>

        <expr_stmt pos:start="203:9" pos:end="203:41"><expr pos:start="203:9" pos:end="203:40"><name pos:start="203:9" pos:end="203:23"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:16">cchip</name><operator pos:start="203:17" pos:end="203:17">.</operator><name pos:start="203:18" pos:end="203:20">iic</name><index pos:start="203:21" pos:end="203:23">[<expr pos:start="203:22" pos:end="203:22"><literal type="number" pos:start="203:22" pos:end="203:22">1</literal></expr>]</index></name> <operator pos:start="203:25" pos:end="203:25">=</operator> <name pos:start="203:27" pos:end="203:29">val</name> <operator pos:start="203:31" pos:end="203:31">&amp;</operator> <literal type="number" pos:start="203:33" pos:end="203:40">0xffffff</literal></expr>;</expr_stmt>

        <break pos:start="205:9" pos:end="205:14">break;</break>



    <case pos:start="209:5" pos:end="209:16">case <expr pos:start="209:10" pos:end="209:15"><literal type="number" pos:start="209:10" pos:end="209:15">0x0400</literal></expr>:</case> <comment type="block" pos:start="209:18" pos:end="209:27">/* MPR0 */</comment>

    <case pos:start="211:5" pos:end="211:16">case <expr pos:start="211:10" pos:end="211:15"><literal type="number" pos:start="211:10" pos:end="211:15">0x0440</literal></expr>:</case> <comment type="block" pos:start="211:18" pos:end="211:27">/* MPR1 */</comment>

    <case pos:start="213:5" pos:end="213:16">case <expr pos:start="213:10" pos:end="213:15"><literal type="number" pos:start="213:10" pos:end="213:15">0x0480</literal></expr>:</case> <comment type="block" pos:start="213:18" pos:end="213:27">/* MPR2 */</comment>

    <case pos:start="215:5" pos:end="215:16">case <expr pos:start="215:10" pos:end="215:15"><literal type="number" pos:start="215:10" pos:end="215:15">0x04c0</literal></expr>:</case> <comment type="block" pos:start="215:18" pos:end="215:27">/* MPR3 */</comment>

        <comment type="block" pos:start="217:9" pos:end="217:48">/* MPR: Memory Programming Register.  */</comment>

        <break pos:start="219:9" pos:end="219:14">break;</break>



    <case pos:start="223:5" pos:end="223:16">case <expr pos:start="223:10" pos:end="223:15"><literal type="number" pos:start="223:10" pos:end="223:15">0x0580</literal></expr>:</case>

        <comment type="block" pos:start="225:9" pos:end="225:43">/* TTR: TIGbus Timing Register.  */</comment>

        <comment type="block" pos:start="227:9" pos:end="227:72">/* All sorts of stuff related to interrupt delivery timings.  */</comment>

        <break pos:start="229:9" pos:end="229:14">break;</break>

    <case pos:start="231:5" pos:end="231:16">case <expr pos:start="231:10" pos:end="231:15"><literal type="number" pos:start="231:10" pos:end="231:15">0x05c0</literal></expr>:</case>

        <comment type="block" pos:start="233:9" pos:end="233:50">/* TDR: TIGbug Device Timing Register.  */</comment>

        <break pos:start="235:9" pos:end="235:14">break;</break>



    <case pos:start="239:5" pos:end="239:16">case <expr pos:start="239:10" pos:end="239:15"><literal type="number" pos:start="239:10" pos:end="239:15">0x0600</literal></expr>:</case>

        <comment type="block" pos:start="241:9" pos:end="241:58">/* DIM2: Device Interrupt Mask Register, CPU2.  */</comment>

        <expr_stmt pos:start="243:9" pos:end="243:30"><expr pos:start="243:9" pos:end="243:29"><name pos:start="243:9" pos:end="243:23"><name pos:start="243:9" pos:end="243:9">s</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:16">cchip</name><operator pos:start="243:17" pos:end="243:17">.</operator><name pos:start="243:18" pos:end="243:20">dim</name><index pos:start="243:21" pos:end="243:23">[<expr pos:start="243:22" pos:end="243:22"><literal type="number" pos:start="243:22" pos:end="243:22">2</literal></expr>]</index></name> <operator pos:start="243:25" pos:end="243:25">=</operator> <name pos:start="243:27" pos:end="243:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:61"><expr pos:start="245:9" pos:end="245:60"><call pos:start="245:9" pos:end="245:60"><name pos:start="245:9" pos:end="245:22">cpu_irq_change</name><argument_list pos:start="245:23" pos:end="245:60">(<argument pos:start="245:24" pos:end="245:38"><expr pos:start="245:24" pos:end="245:38"><name pos:start="245:24" pos:end="245:38"><name pos:start="245:24" pos:end="245:24">s</name><operator pos:start="245:25" pos:end="245:26">-&gt;</operator><name pos:start="245:27" pos:end="245:31">cchip</name><operator pos:start="245:32" pos:end="245:32">.</operator><name pos:start="245:33" pos:end="245:35">cpu</name><index pos:start="245:36" pos:end="245:38">[<expr pos:start="245:37" pos:end="245:37"><literal type="number" pos:start="245:37" pos:end="245:37">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="245:41" pos:end="245:59"><expr pos:start="245:41" pos:end="245:59"><name pos:start="245:41" pos:end="245:43">val</name> <operator pos:start="245:45" pos:end="245:45">&amp;</operator> <name pos:start="245:47" pos:end="245:59"><name pos:start="245:47" pos:end="245:47">s</name><operator pos:start="245:48" pos:end="245:49">-&gt;</operator><name pos:start="245:50" pos:end="245:54">cchip</name><operator pos:start="245:55" pos:end="245:55">.</operator><name pos:start="245:56" pos:end="245:59">drir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="247:9" pos:end="247:14">break;</break>

    <case pos:start="249:5" pos:end="249:16">case <expr pos:start="249:10" pos:end="249:15"><literal type="number" pos:start="249:10" pos:end="249:15">0x0640</literal></expr>:</case>

        <comment type="block" pos:start="251:9" pos:end="251:58">/* DIM3: Device Interrupt Mask Register, CPU3.  */</comment>

        <expr_stmt pos:start="253:9" pos:end="253:30"><expr pos:start="253:9" pos:end="253:29"><name pos:start="253:9" pos:end="253:23"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:16">cchip</name><operator pos:start="253:17" pos:end="253:17">.</operator><name pos:start="253:18" pos:end="253:20">dim</name><index pos:start="253:21" pos:end="253:23">[<expr pos:start="253:22" pos:end="253:22"><literal type="number" pos:start="253:22" pos:end="253:22">3</literal></expr>]</index></name> <operator pos:start="253:25" pos:end="253:25">=</operator> <name pos:start="253:27" pos:end="253:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:61"><expr pos:start="255:9" pos:end="255:60"><call pos:start="255:9" pos:end="255:60"><name pos:start="255:9" pos:end="255:22">cpu_irq_change</name><argument_list pos:start="255:23" pos:end="255:60">(<argument pos:start="255:24" pos:end="255:38"><expr pos:start="255:24" pos:end="255:38"><name pos:start="255:24" pos:end="255:38"><name pos:start="255:24" pos:end="255:24">s</name><operator pos:start="255:25" pos:end="255:26">-&gt;</operator><name pos:start="255:27" pos:end="255:31">cchip</name><operator pos:start="255:32" pos:end="255:32">.</operator><name pos:start="255:33" pos:end="255:35">cpu</name><index pos:start="255:36" pos:end="255:38">[<expr pos:start="255:37" pos:end="255:37"><literal type="number" pos:start="255:37" pos:end="255:37">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="255:41" pos:end="255:59"><expr pos:start="255:41" pos:end="255:59"><name pos:start="255:41" pos:end="255:43">val</name> <operator pos:start="255:45" pos:end="255:45">&amp;</operator> <name pos:start="255:47" pos:end="255:59"><name pos:start="255:47" pos:end="255:47">s</name><operator pos:start="255:48" pos:end="255:49">-&gt;</operator><name pos:start="255:50" pos:end="255:54">cchip</name><operator pos:start="255:55" pos:end="255:55">.</operator><name pos:start="255:56" pos:end="255:59">drir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="257:9" pos:end="257:14">break;</break>



    <case pos:start="261:5" pos:end="261:16">case <expr pos:start="261:10" pos:end="261:15"><literal type="number" pos:start="261:10" pos:end="261:15">0x0680</literal></expr>:</case> <comment type="block" pos:start="261:18" pos:end="261:32">/* DIR2 (RO) */</comment>

    <case pos:start="263:5" pos:end="263:16">case <expr pos:start="263:10" pos:end="263:15"><literal type="number" pos:start="263:10" pos:end="263:15">0x06c0</literal></expr>:</case> <comment type="block" pos:start="263:18" pos:end="263:32">/* DIR3 (RO) */</comment>

        <break pos:start="265:9" pos:end="265:14">break;</break>



    <case pos:start="269:5" pos:end="269:16">case <expr pos:start="269:10" pos:end="269:15"><literal type="number" pos:start="269:10" pos:end="269:15">0x0700</literal></expr>:</case> <comment type="block" pos:start="269:18" pos:end="269:27">/* IIC2 */</comment>

        <expr_stmt pos:start="271:9" pos:end="271:41"><expr pos:start="271:9" pos:end="271:40"><name pos:start="271:9" pos:end="271:23"><name pos:start="271:9" pos:end="271:9">s</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:16">cchip</name><operator pos:start="271:17" pos:end="271:17">.</operator><name pos:start="271:18" pos:end="271:20">iic</name><index pos:start="271:21" pos:end="271:23">[<expr pos:start="271:22" pos:end="271:22"><literal type="number" pos:start="271:22" pos:end="271:22">2</literal></expr>]</index></name> <operator pos:start="271:25" pos:end="271:25">=</operator> <name pos:start="271:27" pos:end="271:29">val</name> <operator pos:start="271:31" pos:end="271:31">&amp;</operator> <literal type="number" pos:start="271:33" pos:end="271:40">0xffffff</literal></expr>;</expr_stmt>

        <break pos:start="273:9" pos:end="273:14">break;</break>

    <case pos:start="275:5" pos:end="275:16">case <expr pos:start="275:10" pos:end="275:15"><literal type="number" pos:start="275:10" pos:end="275:15">0x0740</literal></expr>:</case> <comment type="block" pos:start="275:18" pos:end="275:27">/* IIC3 */</comment>

        <expr_stmt pos:start="277:9" pos:end="277:41"><expr pos:start="277:9" pos:end="277:40"><name pos:start="277:9" pos:end="277:23"><name pos:start="277:9" pos:end="277:9">s</name><operator pos:start="277:10" pos:end="277:11">-&gt;</operator><name pos:start="277:12" pos:end="277:16">cchip</name><operator pos:start="277:17" pos:end="277:17">.</operator><name pos:start="277:18" pos:end="277:20">iic</name><index pos:start="277:21" pos:end="277:23">[<expr pos:start="277:22" pos:end="277:22"><literal type="number" pos:start="277:22" pos:end="277:22">3</literal></expr>]</index></name> <operator pos:start="277:25" pos:end="277:25">=</operator> <name pos:start="277:27" pos:end="277:29">val</name> <operator pos:start="277:31" pos:end="277:31">&amp;</operator> <literal type="number" pos:start="277:33" pos:end="277:40">0xffffff</literal></expr>;</expr_stmt>

        <break pos:start="279:9" pos:end="279:14">break;</break>



    <case pos:start="283:5" pos:end="283:16">case <expr pos:start="283:10" pos:end="283:15"><literal type="number" pos:start="283:10" pos:end="283:15">0x0780</literal></expr>:</case>

        <comment type="block" pos:start="285:9" pos:end="285:46">/* PWR: Power Management Control.   */</comment>

        <break pos:start="287:9" pos:end="287:14">break;</break>

    

    <case pos:start="291:5" pos:end="291:16">case <expr pos:start="291:10" pos:end="291:15"><literal type="number" pos:start="291:10" pos:end="291:15">0x0c00</literal></expr>:</case> <comment type="block" pos:start="291:18" pos:end="291:31">/* CMONCTLA */</comment>

    <case pos:start="293:5" pos:end="293:16">case <expr pos:start="293:10" pos:end="293:15"><literal type="number" pos:start="293:10" pos:end="293:15">0x0c40</literal></expr>:</case> <comment type="block" pos:start="293:18" pos:end="293:31">/* CMONCTLB */</comment>

    <case pos:start="295:5" pos:end="295:16">case <expr pos:start="295:10" pos:end="295:15"><literal type="number" pos:start="295:10" pos:end="295:15">0x0c80</literal></expr>:</case> <comment type="block" pos:start="295:18" pos:end="295:32">/* CMONCNT01 */</comment>

    <case pos:start="297:5" pos:end="297:16">case <expr pos:start="297:10" pos:end="297:15"><literal type="number" pos:start="297:10" pos:end="297:15">0x0cc0</literal></expr>:</case> <comment type="block" pos:start="297:18" pos:end="297:32">/* CMONCNT23 */</comment>

        <break pos:start="299:9" pos:end="299:14">break;</break>



    <default pos:start="303:5" pos:end="303:12">default:</default>

        <expr_stmt pos:start="305:9" pos:end="305:67"><expr pos:start="305:9" pos:end="305:66"><call pos:start="305:9" pos:end="305:66"><name pos:start="305:9" pos:end="305:29">cpu_unassigned_access</name><argument_list pos:start="305:30" pos:end="305:66">(<argument pos:start="305:31" pos:end="305:44"><expr pos:start="305:31" pos:end="305:44"><name pos:start="305:31" pos:end="305:44">cpu_single_env</name></expr></argument>, <argument pos:start="305:47" pos:end="305:50"><expr pos:start="305:47" pos:end="305:50"><name pos:start="305:47" pos:end="305:50">addr</name></expr></argument>, <argument pos:start="305:53" pos:end="305:53"><expr pos:start="305:53" pos:end="305:53"><literal type="number" pos:start="305:53" pos:end="305:53">1</literal></expr></argument>, <argument pos:start="305:56" pos:end="305:56"><expr pos:start="305:56" pos:end="305:56"><literal type="number" pos:start="305:56" pos:end="305:56">0</literal></expr></argument>, <argument pos:start="305:59" pos:end="305:59"><expr pos:start="305:59" pos:end="305:59"><literal type="number" pos:start="305:59" pos:end="305:59">0</literal></expr></argument>, <argument pos:start="305:62" pos:end="305:65"><expr pos:start="305:62" pos:end="305:65"><name pos:start="305:62" pos:end="305:65">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="307:9" pos:end="307:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
