<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22202.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">aio_set_event_notifier</name><parameter_list pos:start="1:28" pos:end="9:47">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:38">AioContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:44"><decl pos:start="3:29" pos:end="3:44"><type pos:start="3:29" pos:end="3:44"><name pos:start="3:29" pos:end="3:41">EventNotifier</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:44">e</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:44"><decl pos:start="5:29" pos:end="5:44"><type pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:32">bool</name></type> <name pos:start="5:34" pos:end="5:44">is_external</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:59"><decl pos:start="7:29" pos:end="7:59"><type pos:start="7:29" pos:end="7:59"><name pos:start="7:29" pos:end="7:48">EventNotifierHandler</name> <modifier pos:start="7:50" pos:end="7:50">*</modifier></type><name pos:start="7:51" pos:end="7:59">io_notify</name></decl></parameter>,

                            <parameter pos:start="9:29" pos:end="9:46"><decl pos:start="9:29" pos:end="9:46"><type pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:37">AioPollFn</name> <modifier pos:start="9:39" pos:end="9:39">*</modifier></type><name pos:start="9:40" pos:end="9:46">io_poll</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="103:1">{<block_content pos:start="13:5" pos:end="101:20">

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">AioHandler</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:20">node</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><call pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:21">qemu_lockcnt_lock</name><argument_list pos:start="17:22" pos:end="17:38">(<argument pos:start="17:23" pos:end="17:37"><expr pos:start="17:23" pos:end="17:37"><operator pos:start="17:23" pos:end="17:23">&amp;</operator><name pos:start="17:24" pos:end="17:37"><name pos:start="17:24" pos:end="17:26">ctx</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:37">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:17">QLIST_FOREACH</name><argument_list pos:start="19:18" pos:end="19:49">(<argument pos:start="19:19" pos:end="19:22">node</argument>, <argument pos:start="19:25" pos:end="19:42">&amp;ctx-&gt;aio_handlers</argument>, <argument pos:start="19:45" pos:end="19:48">node</argument>)</argument_list></macro> <block pos:start="19:51" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:9">

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:43">(<expr pos:start="21:13" pos:end="21:42"><name pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:16">node</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:19">e</name></name> <operator pos:start="21:21" pos:end="21:22">==</operator> <name pos:start="21:24" pos:end="21:24">e</name> <operator pos:start="21:26" pos:end="21:27">&amp;&amp;</operator> <operator pos:start="21:29" pos:end="21:29">!</operator><name pos:start="21:30" pos:end="21:42"><name pos:start="21:30" pos:end="21:33">node</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:42">deleted</name></name></expr>)</condition> <block pos:start="21:45" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="31:5" pos:end="31:41">/* Are we deleting the fd handler? */</comment>

    <if_stmt pos:start="33:5" pos:end="95:5"><if pos:start="33:5" pos:end="67:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:18">io_notify</name></expr>)</condition> <block pos:start="33:21" pos:end="67:5">{<block_content pos:start="35:9" pos:end="65:9">

        <if_stmt pos:start="35:9" pos:end="65:9"><if pos:start="35:9" pos:end="65:9">if <condition pos:start="35:12" pos:end="35:17">(<expr pos:start="35:13" pos:end="35:16"><name pos:start="35:13" pos:end="35:16">node</name></expr>)</condition> <block pos:start="35:19" pos:end="65:9">{<block_content pos:start="37:13" pos:end="63:13">

            <expr_stmt pos:start="37:13" pos:end="37:59"><expr pos:start="37:13" pos:end="37:58"><call pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:32">g_source_remove_poll</name><argument_list pos:start="37:33" pos:end="37:58">(<argument pos:start="37:34" pos:end="37:45"><expr pos:start="37:34" pos:end="37:45"><operator pos:start="37:34" pos:end="37:34">&amp;</operator><name pos:start="37:35" pos:end="37:45"><name pos:start="37:35" pos:end="37:37">ctx</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:45">source</name></name></expr></argument>, <argument pos:start="37:48" pos:end="37:57"><expr pos:start="37:48" pos:end="37:57"><operator pos:start="37:48" pos:end="37:48">&amp;</operator><name pos:start="37:49" pos:end="37:57"><name pos:start="37:49" pos:end="37:52">node</name><operator pos:start="37:53" pos:end="37:54">-&gt;</operator><name pos:start="37:55" pos:end="37:57">pfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="41:13" pos:end="41:72">/* aio_poll is in progress, just mark the node as deleted */</comment>

            <if_stmt pos:start="43:13" pos:end="63:13"><if pos:start="43:13" pos:end="49:13">if <condition pos:start="43:16" pos:end="43:52">(<expr pos:start="43:17" pos:end="43:51"><call pos:start="43:17" pos:end="43:51"><name pos:start="43:17" pos:end="43:34">qemu_lockcnt_count</name><argument_list pos:start="43:35" pos:end="43:51">(<argument pos:start="43:36" pos:end="43:50"><expr pos:start="43:36" pos:end="43:50"><operator pos:start="43:36" pos:end="43:36">&amp;</operator><name pos:start="43:37" pos:end="43:50"><name pos:start="43:37" pos:end="43:39">ctx</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:50">list_lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:54" pos:end="49:13">{<block_content pos:start="45:17" pos:end="47:38">

                <expr_stmt pos:start="45:17" pos:end="45:34"><expr pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:29"><name pos:start="45:17" pos:end="45:20">node</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:29">deleted</name></name> <operator pos:start="45:31" pos:end="45:31">=</operator> <literal type="number" pos:start="45:33" pos:end="45:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:38"><expr pos:start="47:17" pos:end="47:37"><name pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:20">node</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:25">pfd</name><operator pos:start="47:26" pos:end="47:26">.</operator><name pos:start="47:27" pos:end="47:33">revents</name></name> <operator pos:start="47:35" pos:end="47:35">=</operator> <literal type="number" pos:start="47:37" pos:end="47:37">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="49:15" pos:end="63:13">else <block pos:start="49:20" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:29">

                <comment type="block" pos:start="51:17" pos:end="57:19">/* Otherwise, delete it for real.  We can't just mark it as

                 * deleted because deleted nodes are only cleaned up after

                 * releasing the list_lock.

                 */</comment>

                <expr_stmt pos:start="59:17" pos:end="59:41"><expr pos:start="59:17" pos:end="59:40"><call pos:start="59:17" pos:end="59:40"><name pos:start="59:17" pos:end="59:28">QLIST_REMOVE</name><argument_list pos:start="59:29" pos:end="59:40">(<argument pos:start="59:30" pos:end="59:33"><expr pos:start="59:30" pos:end="59:33"><name pos:start="59:30" pos:end="59:33">node</name></expr></argument>, <argument pos:start="59:36" pos:end="59:39"><expr pos:start="59:36" pos:end="59:39"><name pos:start="59:36" pos:end="59:39">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:29"><expr pos:start="61:17" pos:end="61:28"><call pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:22">g_free</name><argument_list pos:start="61:23" pos:end="61:28">(<argument pos:start="61:24" pos:end="61:27"><expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="95:5">else <block pos:start="67:12" pos:end="95:5">{<block_content pos:start="69:9" pos:end="93:36">

        <if_stmt pos:start="69:9" pos:end="89:9"><if pos:start="69:9" pos:end="89:9">if <condition pos:start="69:12" pos:end="69:25">(<expr pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:16">node</name> <operator pos:start="69:18" pos:end="69:19">==</operator> <name pos:start="69:21" pos:end="69:24">NULL</name></expr>)</condition> <block pos:start="69:27" pos:end="89:9">{<block_content pos:start="73:13" pos:end="87:56">

            <comment type="block" pos:start="71:13" pos:end="71:60">/* Alloc and insert if it's not already there */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:41"><expr pos:start="73:13" pos:end="73:40"><name pos:start="73:13" pos:end="73:16">node</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:40"><name pos:start="73:20" pos:end="73:25">g_new0</name><argument_list pos:start="73:26" pos:end="73:40">(<argument pos:start="73:27" pos:end="73:36"><expr pos:start="73:27" pos:end="73:36"><name pos:start="73:27" pos:end="73:36">AioHandler</name></expr></argument>, <argument pos:start="73:39" pos:end="73:39"><expr pos:start="73:39" pos:end="73:39"><literal type="number" pos:start="73:39" pos:end="73:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:24"><expr pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">node</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:19">e</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:23">e</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:67"><expr pos:start="77:13" pos:end="77:66"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:16">node</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:21">pfd</name><operator pos:start="77:22" pos:end="77:22">.</operator><name pos:start="77:23" pos:end="77:24">fd</name></name> <operator pos:start="77:26" pos:end="77:26">=</operator> <operator pos:start="77:28" pos:end="77:28">(</operator><name pos:start="77:29" pos:end="77:37">uintptr_t</name><operator pos:start="77:38" pos:end="77:38">)</operator><call pos:start="77:39" pos:end="77:66"><name pos:start="77:39" pos:end="77:63">event_notifier_get_handle</name><argument_list pos:start="77:64" pos:end="77:66">(<argument pos:start="77:65" pos:end="77:65"><expr pos:start="77:65" pos:end="77:65"><name pos:start="77:65" pos:end="77:65">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:39"><expr pos:start="79:13" pos:end="79:38"><name pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:16">node</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:21">pfd</name><operator pos:start="79:22" pos:end="79:22">.</operator><name pos:start="79:23" pos:end="79:28">events</name></name> <operator pos:start="79:30" pos:end="79:30">=</operator> <name pos:start="79:32" pos:end="79:38">G_IO_IN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:44"><expr pos:start="81:13" pos:end="81:43"><name pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:16">node</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:29">is_external</name></name> <operator pos:start="81:31" pos:end="81:31">=</operator> <name pos:start="81:33" pos:end="81:43">is_external</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:66"><expr pos:start="83:13" pos:end="83:65"><call pos:start="83:13" pos:end="83:65"><name pos:start="83:13" pos:end="83:33">QLIST_INSERT_HEAD_RCU</name><argument_list pos:start="83:34" pos:end="83:65">(<argument pos:start="83:35" pos:end="83:52"><expr pos:start="83:35" pos:end="83:52"><operator pos:start="83:35" pos:end="83:35">&amp;</operator><name pos:start="83:36" pos:end="83:52"><name pos:start="83:36" pos:end="83:38">ctx</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:52">aio_handlers</name></name></expr></argument>, <argument pos:start="83:55" pos:end="83:58"><expr pos:start="83:55" pos:end="83:58"><name pos:start="83:55" pos:end="83:58">node</name></expr></argument>, <argument pos:start="83:61" pos:end="83:64"><expr pos:start="83:61" pos:end="83:64"><name pos:start="83:61" pos:end="83:64">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:56"><expr pos:start="87:13" pos:end="87:55"><call pos:start="87:13" pos:end="87:55"><name pos:start="87:13" pos:end="87:29">g_source_add_poll</name><argument_list pos:start="87:30" pos:end="87:55">(<argument pos:start="87:31" pos:end="87:42"><expr pos:start="87:31" pos:end="87:42"><operator pos:start="87:31" pos:end="87:31">&amp;</operator><name pos:start="87:32" pos:end="87:42"><name pos:start="87:32" pos:end="87:34">ctx</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:42">source</name></name></expr></argument>, <argument pos:start="87:45" pos:end="87:54"><expr pos:start="87:45" pos:end="87:54"><operator pos:start="87:45" pos:end="87:45">&amp;</operator><name pos:start="87:46" pos:end="87:54"><name pos:start="87:46" pos:end="87:49">node</name><operator pos:start="87:50" pos:end="87:51">-&gt;</operator><name pos:start="87:52" pos:end="87:54">pfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="91:9" pos:end="91:52">/* Update handler with latest information */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:12">node</name><operator pos:start="93:13" pos:end="93:14">-&gt;</operator><name pos:start="93:15" pos:end="93:23">io_notify</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:35">io_notify</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><call pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:23">qemu_lockcnt_unlock</name><argument_list pos:start="99:24" pos:end="99:40">(<argument pos:start="99:25" pos:end="99:39"><expr pos:start="99:25" pos:end="99:39"><operator pos:start="99:25" pos:end="99:25">&amp;</operator><name pos:start="99:26" pos:end="99:39"><name pos:start="99:26" pos:end="99:28">ctx</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:39">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:20"><expr pos:start="101:5" pos:end="101:19"><call pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:14">aio_notify</name><argument_list pos:start="101:15" pos:end="101:19">(<argument pos:start="101:16" pos:end="101:18"><expr pos:start="101:16" pos:end="101:18"><name pos:start="101:16" pos:end="101:18">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
