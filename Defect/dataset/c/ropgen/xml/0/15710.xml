<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15710.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">bool</name></type> <name pos:start="1:6" pos:end="1:26">hvf_inject_interrupts</name><parameter_list pos:start="1:27" pos:end="1:47">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:37"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:46">cpu_state</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:5">

    <decl_stmt pos:start="5:5" pos:end="7:52"><decl pos:start="5:5" pos:end="7:51"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">allow_nmi</name> <init pos:start="5:19" pos:end="7:51">= <expr pos:start="5:21" pos:end="7:51"><operator pos:start="5:21" pos:end="5:21">!</operator><operator pos:start="5:22" pos:end="5:22">(</operator><call pos:start="5:23" pos:end="5:75"><name pos:start="5:23" pos:end="5:27">rvmcs</name><argument_list pos:start="5:28" pos:end="5:75">(<argument pos:start="5:29" pos:end="5:45"><expr pos:start="5:29" pos:end="5:45"><name pos:start="5:29" pos:end="5:45"><name pos:start="5:29" pos:end="5:37">cpu_state</name><operator pos:start="5:38" pos:end="5:39">-&gt;</operator><name pos:start="5:40" pos:end="5:45">hvf_fd</name></name></expr></argument>, <argument pos:start="5:48" pos:end="5:74"><expr pos:start="5:48" pos:end="5:74"><name pos:start="5:48" pos:end="5:74">VMCS_GUEST_INTERRUPTIBILITY</name></expr></argument>)</argument_list></call> <operator pos:start="5:77" pos:end="5:77">&amp;</operator>

                <name pos:start="7:17" pos:end="7:50">VMCS_INTERRUPTIBILITY_NMI_BLOCKING</name><operator pos:start="7:51" pos:end="7:51">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">X86CPU</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:18">x86cpu</name> <init pos:start="9:20" pos:end="9:39">= <expr pos:start="9:22" pos:end="9:39"><call pos:start="9:22" pos:end="9:39"><name pos:start="9:22" pos:end="9:28">X86_CPU</name><argument_list pos:start="9:29" pos:end="9:39">(<argument pos:start="9:30" pos:end="9:38"><expr pos:start="9:30" pos:end="9:38"><name pos:start="9:30" pos:end="9:38">cpu_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUX86State</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:35">= <expr pos:start="11:24" pos:end="11:35"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:35"><name pos:start="11:25" pos:end="11:30">x86cpu</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:35">env</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:74"><decl pos:start="15:5" pos:end="15:73"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:21">idt_info</name> <init pos:start="15:23" pos:end="15:73">= <expr pos:start="15:25" pos:end="15:73"><call pos:start="15:25" pos:end="15:73"><name pos:start="15:25" pos:end="15:29">rvmcs</name><argument_list pos:start="15:30" pos:end="15:73">(<argument pos:start="15:31" pos:end="15:47"><expr pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:39">cpu_state</name><operator pos:start="15:40" pos:end="15:41">-&gt;</operator><name pos:start="15:42" pos:end="15:47">hvf_fd</name></name></expr></argument>, <argument pos:start="15:50" pos:end="15:72"><expr pos:start="15:50" pos:end="15:72"><name pos:start="15:50" pos:end="15:72">VMCS_IDT_VECTORING_INFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:17">info</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>;</decl_stmt>

    

    <if_stmt pos:start="21:5" pos:end="101:5"><if pos:start="21:5" pos:end="101:5">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:16">idt_info</name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <name pos:start="21:20" pos:end="21:37">VMCS_IDT_VEC_VALID</name></expr>)</condition> <block pos:start="21:40" pos:end="101:5">{<block_content pos:start="23:9" pos:end="99:10">

        <decl_stmt pos:start="23:9" pos:end="23:41"><decl pos:start="23:9" pos:end="23:40"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">uint8_t</name></type> <name pos:start="23:17" pos:end="23:22">vector</name> <init pos:start="23:24" pos:end="23:40">= <expr pos:start="23:26" pos:end="23:40"><name pos:start="23:26" pos:end="23:33">idt_info</name> <operator pos:start="23:35" pos:end="23:35">&amp;</operator> <literal type="number" pos:start="23:37" pos:end="23:40">0xff</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:57"><decl pos:start="25:9" pos:end="25:56"><type pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:16">uint64_t</name></type> <name pos:start="25:18" pos:end="25:26">intr_type</name> <init pos:start="25:28" pos:end="25:56">= <expr pos:start="25:30" pos:end="25:56"><name pos:start="25:30" pos:end="25:37">idt_info</name> <operator pos:start="25:39" pos:end="25:39">&amp;</operator> <name pos:start="25:41" pos:end="25:56">VMCS_INTR_T_MASK</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:24"><expr pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:12">info</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:23">idt_info</name></expr>;</expr_stmt>

        

        <decl_stmt pos:start="31:9" pos:end="31:69"><decl pos:start="31:9" pos:end="31:68"><type pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:16">uint64_t</name></type> <name pos:start="31:18" pos:end="31:23">reason</name> <init pos:start="31:25" pos:end="31:68">= <expr pos:start="31:27" pos:end="31:68"><call pos:start="31:27" pos:end="31:68"><name pos:start="31:27" pos:end="31:31">rvmcs</name><argument_list pos:start="31:32" pos:end="31:68">(<argument pos:start="31:33" pos:end="31:49"><expr pos:start="31:33" pos:end="31:49"><name pos:start="31:33" pos:end="31:49"><name pos:start="31:33" pos:end="31:41">cpu_state</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:49">hvf_fd</name></name></expr></argument>, <argument pos:start="31:52" pos:end="31:67"><expr pos:start="31:52" pos:end="31:67"><name pos:start="31:52" pos:end="31:67">VMCS_EXIT_REASON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:78">(<expr pos:start="33:13" pos:end="33:77"><name pos:start="33:13" pos:end="33:21">intr_type</name> <operator pos:start="33:23" pos:end="33:24">==</operator> <name pos:start="33:26" pos:end="33:40">VMCS_INTR_T_NMI</name> <operator pos:start="33:42" pos:end="33:43">&amp;&amp;</operator> <name pos:start="33:45" pos:end="33:50">reason</name> <operator pos:start="33:52" pos:end="33:53">!=</operator> <name pos:start="33:55" pos:end="33:77">EXIT_REASON_TASK_SWITCH</name></expr>)</condition> <block pos:start="33:80" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:46">

            <expr_stmt pos:start="35:13" pos:end="35:26"><expr pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:21">allow_nmi</name> <operator pos:start="35:23" pos:end="35:23">=</operator> <literal type="number" pos:start="35:25" pos:end="35:25">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:46"><expr pos:start="37:13" pos:end="37:45"><call pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:34">vmx_clear_nmi_blocking</name><argument_list pos:start="37:35" pos:end="37:45">(<argument pos:start="37:36" pos:end="37:44"><expr pos:start="37:36" pos:end="37:44"><name pos:start="37:36" pos:end="37:44">cpu_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        

        <if_stmt pos:start="43:9" pos:end="99:9"><if pos:start="43:9" pos:end="99:9">if <condition pos:start="43:12" pos:end="43:56">(<expr pos:start="43:13" pos:end="43:55"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:22">allow_nmi</name> <operator pos:start="43:24" pos:end="43:25">||</operator> <name pos:start="43:27" pos:end="43:35">intr_type</name> <operator pos:start="43:37" pos:end="43:38">!=</operator> <name pos:start="43:40" pos:end="43:54">VMCS_INTR_T_NMI</name><operator pos:start="43:55" pos:end="43:55">)</operator></expr>)</condition> <block pos:start="43:58" pos:end="99:9">{<block_content pos:start="45:13" pos:end="97:65">

            <expr_stmt pos:start="45:13" pos:end="45:31"><expr pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:16">info</name> <operator pos:start="45:18" pos:end="45:19">&amp;=</operator> <operator pos:start="45:21" pos:end="45:21">~</operator><operator pos:start="45:22" pos:end="45:22">(</operator><literal type="number" pos:start="45:23" pos:end="45:23">1</literal> <operator pos:start="45:25" pos:end="45:26">&lt;&lt;</operator> <literal type="number" pos:start="45:28" pos:end="45:29">12</literal><operator pos:start="45:30" pos:end="45:30">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="45:33" pos:end="45:57">/* clear undefined bit */</comment>

            <if_stmt pos:start="47:13" pos:end="59:13"><if pos:start="47:13" pos:end="59:13">if <condition pos:start="47:16" pos:end="51:53">(<expr pos:start="47:17" pos:end="51:52"><name pos:start="47:17" pos:end="47:25">intr_type</name> <operator pos:start="47:27" pos:end="47:28">==</operator> <name pos:start="47:30" pos:end="47:47">VMCS_INTR_T_SWINTR</name> <operator pos:start="47:49" pos:end="47:50">||</operator>

                <name pos:start="49:17" pos:end="49:25">intr_type</name> <operator pos:start="49:27" pos:end="49:28">==</operator> <name pos:start="49:30" pos:end="49:57">VMCS_INTR_T_PRIV_SWEXCEPTION</name> <operator pos:start="49:59" pos:end="49:60">||</operator>

                <name pos:start="51:17" pos:end="51:25">intr_type</name> <operator pos:start="51:27" pos:end="51:28">==</operator> <name pos:start="51:30" pos:end="51:52">VMCS_INTR_T_SWEXCEPTION</name></expr>)</condition> <block pos:start="51:55" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:74">

                <decl_stmt pos:start="53:17" pos:end="55:71"><decl pos:start="53:17" pos:end="55:70"><type pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:24">uint64_t</name></type> <name pos:start="53:26" pos:end="53:32">ins_len</name> <init pos:start="53:34" pos:end="55:70">= <expr pos:start="53:36" pos:end="55:70"><call pos:start="53:36" pos:end="55:70"><name pos:start="53:36" pos:end="53:40">rvmcs</name><argument_list pos:start="53:41" pos:end="55:70">(<argument pos:start="53:42" pos:end="53:58"><expr pos:start="53:42" pos:end="53:58"><name pos:start="53:42" pos:end="53:58"><name pos:start="53:42" pos:end="53:50">cpu_state</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:58">hvf_fd</name></name></expr></argument>,

                                         <argument pos:start="55:42" pos:end="55:69"><expr pos:start="55:42" pos:end="55:69"><name pos:start="55:42" pos:end="55:69">VMCS_EXIT_INSTRUCTION_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:74"><expr pos:start="57:17" pos:end="57:73"><call pos:start="57:17" pos:end="57:73"><name pos:start="57:17" pos:end="57:21">wvmcs</name><argument_list pos:start="57:22" pos:end="57:73">(<argument pos:start="57:23" pos:end="57:39"><expr pos:start="57:23" pos:end="57:39"><name pos:start="57:23" pos:end="57:39"><name pos:start="57:23" pos:end="57:31">cpu_state</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:39">hvf_fd</name></name></expr></argument>, <argument pos:start="57:42" pos:end="57:63"><expr pos:start="57:42" pos:end="57:63"><name pos:start="57:42" pos:end="57:63">VMCS_ENTRY_INST_LENGTH</name></expr></argument>, <argument pos:start="57:66" pos:end="57:72"><expr pos:start="57:66" pos:end="57:72"><name pos:start="57:66" pos:end="57:72">ins_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="61:13" pos:end="81:13"><if pos:start="61:13" pos:end="81:13">if <condition pos:start="61:16" pos:end="61:65">(<expr pos:start="61:17" pos:end="61:64"><name pos:start="61:17" pos:end="61:22">vector</name> <operator pos:start="61:24" pos:end="61:25">==</operator> <name pos:start="61:27" pos:end="61:38">EXCEPTION_BP</name> <operator pos:start="61:40" pos:end="61:41">||</operator> <name pos:start="61:43" pos:end="61:48">vector</name> <operator pos:start="61:50" pos:end="61:51">==</operator> <name pos:start="61:53" pos:end="61:64">EXCEPTION_OF</name></expr>)</condition> <block pos:start="61:67" pos:end="81:13">{<block_content pos:start="71:17" pos:end="79:74">

                <comment type="block" pos:start="63:17" pos:end="69:19">/*

                 * VT-x requires #BP and #OF to be injected as software

                 * exceptions.

                 */</comment>

                <expr_stmt pos:start="71:17" pos:end="71:42"><expr pos:start="71:17" pos:end="71:41"><name pos:start="71:17" pos:end="71:20">info</name> <operator pos:start="71:22" pos:end="71:23">&amp;=</operator> <operator pos:start="71:25" pos:end="71:25">~</operator><name pos:start="71:26" pos:end="71:41">VMCS_INTR_T_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:48"><expr pos:start="73:17" pos:end="73:47"><name pos:start="73:17" pos:end="73:20">info</name> <operator pos:start="73:22" pos:end="73:23">|=</operator> <name pos:start="73:25" pos:end="73:47">VMCS_INTR_T_SWEXCEPTION</name></expr>;</expr_stmt>

                <decl_stmt pos:start="75:17" pos:end="77:71"><decl pos:start="75:17" pos:end="77:70"><type pos:start="75:17" pos:end="75:24"><name pos:start="75:17" pos:end="75:24">uint64_t</name></type> <name pos:start="75:26" pos:end="75:32">ins_len</name> <init pos:start="75:34" pos:end="77:70">= <expr pos:start="75:36" pos:end="77:70"><call pos:start="75:36" pos:end="77:70"><name pos:start="75:36" pos:end="75:40">rvmcs</name><argument_list pos:start="75:41" pos:end="77:70">(<argument pos:start="75:42" pos:end="75:58"><expr pos:start="75:42" pos:end="75:58"><name pos:start="75:42" pos:end="75:58"><name pos:start="75:42" pos:end="75:50">cpu_state</name><operator pos:start="75:51" pos:end="75:52">-&gt;</operator><name pos:start="75:53" pos:end="75:58">hvf_fd</name></name></expr></argument>,

                                         <argument pos:start="77:42" pos:end="77:69"><expr pos:start="77:42" pos:end="77:69"><name pos:start="77:42" pos:end="77:69">VMCS_EXIT_INSTRUCTION_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:74"><expr pos:start="79:17" pos:end="79:73"><call pos:start="79:17" pos:end="79:73"><name pos:start="79:17" pos:end="79:21">wvmcs</name><argument_list pos:start="79:22" pos:end="79:73">(<argument pos:start="79:23" pos:end="79:39"><expr pos:start="79:23" pos:end="79:39"><name pos:start="79:23" pos:end="79:39"><name pos:start="79:23" pos:end="79:31">cpu_state</name><operator pos:start="79:32" pos:end="79:33">-&gt;</operator><name pos:start="79:34" pos:end="79:39">hvf_fd</name></name></expr></argument>, <argument pos:start="79:42" pos:end="79:63"><expr pos:start="79:42" pos:end="79:63"><name pos:start="79:42" pos:end="79:63">VMCS_ENTRY_INST_LENGTH</name></expr></argument>, <argument pos:start="79:66" pos:end="79:72"><expr pos:start="79:66" pos:end="79:72"><name pos:start="79:66" pos:end="79:72">ins_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            

            <decl_stmt pos:start="85:13" pos:end="85:29"><decl pos:start="85:13" pos:end="85:28"><type pos:start="85:13" pos:end="85:20"><name pos:start="85:13" pos:end="85:20">uint64_t</name></type> <name pos:start="85:22" pos:end="85:24">err</name> <init pos:start="85:26" pos:end="85:28">= <expr pos:start="85:28" pos:end="85:28"><literal type="number" pos:start="85:28" pos:end="85:28">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="87:13" pos:end="93:13"><if pos:start="87:13" pos:end="93:13">if <condition pos:start="87:16" pos:end="87:49">(<expr pos:start="87:17" pos:end="87:48"><name pos:start="87:17" pos:end="87:24">idt_info</name> <operator pos:start="87:26" pos:end="87:26">&amp;</operator> <name pos:start="87:28" pos:end="87:48">VMCS_INTR_DEL_ERRCODE</name></expr>)</condition> <block pos:start="87:51" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:74">

                <expr_stmt pos:start="89:17" pos:end="89:73"><expr pos:start="89:17" pos:end="89:72"><name pos:start="89:17" pos:end="89:19">err</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:72"><name pos:start="89:23" pos:end="89:27">rvmcs</name><argument_list pos:start="89:28" pos:end="89:72">(<argument pos:start="89:29" pos:end="89:45"><expr pos:start="89:29" pos:end="89:45"><name pos:start="89:29" pos:end="89:45"><name pos:start="89:29" pos:end="89:37">cpu_state</name><operator pos:start="89:38" pos:end="89:39">-&gt;</operator><name pos:start="89:40" pos:end="89:45">hvf_fd</name></name></expr></argument>, <argument pos:start="89:48" pos:end="89:71"><expr pos:start="89:48" pos:end="89:71"><name pos:start="89:48" pos:end="89:71">VMCS_IDT_VECTORING_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:74"><expr pos:start="91:17" pos:end="91:73"><call pos:start="91:17" pos:end="91:73"><name pos:start="91:17" pos:end="91:21">wvmcs</name><argument_list pos:start="91:22" pos:end="91:73">(<argument pos:start="91:23" pos:end="91:39"><expr pos:start="91:23" pos:end="91:39"><name pos:start="91:23" pos:end="91:39"><name pos:start="91:23" pos:end="91:31">cpu_state</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:39">hvf_fd</name></name></expr></argument>, <argument pos:start="91:42" pos:end="91:67"><expr pos:start="91:42" pos:end="91:67"><name pos:start="91:42" pos:end="91:67">VMCS_ENTRY_EXCEPTION_ERROR</name></expr></argument>, <argument pos:start="91:70" pos:end="91:72"><expr pos:start="91:70" pos:end="91:72"><name pos:start="91:70" pos:end="91:72">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="95:13" pos:end="95:60">/*printf("reinject  %lx err %d\n", info, err);*/</comment>

            <expr_stmt pos:start="97:13" pos:end="97:65"><expr pos:start="97:13" pos:end="97:64"><call pos:start="97:13" pos:end="97:64"><name pos:start="97:13" pos:end="97:17">wvmcs</name><argument_list pos:start="97:18" pos:end="97:64">(<argument pos:start="97:19" pos:end="97:35"><expr pos:start="97:19" pos:end="97:35"><name pos:start="97:19" pos:end="97:35"><name pos:start="97:19" pos:end="97:27">cpu_state</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:35">hvf_fd</name></name></expr></argument>, <argument pos:start="97:38" pos:end="97:57"><expr pos:start="97:38" pos:end="97:57"><name pos:start="97:38" pos:end="97:57">VMCS_ENTRY_INTR_INFO</name></expr></argument>, <argument pos:start="97:60" pos:end="97:63"><expr pos:start="97:60" pos:end="97:63"><name pos:start="97:60" pos:end="97:63">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt><empty_stmt pos:start="99:10" pos:end="99:10">;</empty_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="121:5"><if pos:start="105:5" pos:end="121:5">if <condition pos:start="105:8" pos:end="105:57">(<expr pos:start="105:9" pos:end="105:56"><name pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:17">cpu_state</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:36">interrupt_request</name></name> <operator pos:start="105:38" pos:end="105:38">&amp;</operator> <name pos:start="105:40" pos:end="105:56">CPU_INTERRUPT_NMI</name></expr>)</condition> <block pos:start="105:59" pos:end="121:5">{<block_content pos:start="107:9" pos:end="119:9">

        <if_stmt pos:start="107:9" pos:end="119:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:51">(<expr pos:start="107:13" pos:end="107:50"><name pos:start="107:13" pos:end="107:21">allow_nmi</name> <operator pos:start="107:23" pos:end="107:24">&amp;&amp;</operator> <operator pos:start="107:26" pos:end="107:26">!</operator><operator pos:start="107:27" pos:end="107:27">(</operator><name pos:start="107:28" pos:end="107:31">info</name> <operator pos:start="107:33" pos:end="107:33">&amp;</operator> <name pos:start="107:35" pos:end="107:49">VMCS_INTR_VALID</name><operator pos:start="107:50" pos:end="107:50">)</operator></expr>)</condition> <block pos:start="107:53" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:65">

            <expr_stmt pos:start="109:13" pos:end="109:63"><expr pos:start="109:13" pos:end="109:62"><name pos:start="109:13" pos:end="109:40"><name pos:start="109:13" pos:end="109:21">cpu_state</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:40">interrupt_request</name></name> <operator pos:start="109:42" pos:end="109:43">&amp;=</operator> <operator pos:start="109:45" pos:end="109:45">~</operator><name pos:start="109:46" pos:end="109:62">CPU_INTERRUPT_NMI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:63"><expr pos:start="111:13" pos:end="111:62"><name pos:start="111:13" pos:end="111:16">info</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <name pos:start="111:20" pos:end="111:34">VMCS_INTR_VALID</name> <operator pos:start="111:36" pos:end="111:36">|</operator> <name pos:start="111:38" pos:end="111:52">VMCS_INTR_T_NMI</name> <operator pos:start="111:54" pos:end="111:54">|</operator> <name pos:start="111:56" pos:end="111:62">NMI_VEC</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:65"><expr pos:start="113:13" pos:end="113:64"><call pos:start="113:13" pos:end="113:64"><name pos:start="113:13" pos:end="113:17">wvmcs</name><argument_list pos:start="113:18" pos:end="113:64">(<argument pos:start="113:19" pos:end="113:35"><expr pos:start="113:19" pos:end="113:35"><name pos:start="113:19" pos:end="113:35"><name pos:start="113:19" pos:end="113:27">cpu_state</name><operator pos:start="113:28" pos:end="113:29">-&gt;</operator><name pos:start="113:30" pos:end="113:35">hvf_fd</name></name></expr></argument>, <argument pos:start="113:38" pos:end="113:57"><expr pos:start="113:38" pos:end="113:57"><name pos:start="113:38" pos:end="113:57">VMCS_ENTRY_INTR_INFO</name></expr></argument>, <argument pos:start="113:60" pos:end="113:63"><expr pos:start="113:60" pos:end="113:63"><name pos:start="113:60" pos:end="113:63">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="119:9">else <block pos:start="115:16" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:50">

            <expr_stmt pos:start="117:13" pos:end="117:50"><expr pos:start="117:13" pos:end="117:49"><call pos:start="117:13" pos:end="117:49"><name pos:start="117:13" pos:end="117:38">vmx_set_nmi_window_exiting</name><argument_list pos:start="117:39" pos:end="117:49">(<argument pos:start="117:40" pos:end="117:48"><expr pos:start="117:40" pos:end="117:48"><name pos:start="117:40" pos:end="117:48">cpu_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="143:5"><if pos:start="125:5" pos:end="143:5">if <condition pos:start="125:8" pos:end="129:61">(<expr pos:start="125:9" pos:end="129:60"><name pos:start="125:9" pos:end="125:36"><name pos:start="125:9" pos:end="125:11">env</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:21">hvf_emul</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:36">interruptable</name></name> <operator pos:start="125:38" pos:end="125:39">&amp;&amp;</operator>

        <operator pos:start="127:9" pos:end="127:9">(</operator><name pos:start="127:10" pos:end="127:37"><name pos:start="127:10" pos:end="127:18">cpu_state</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:37">interrupt_request</name></name> <operator pos:start="127:39" pos:end="127:39">&amp;</operator> <name pos:start="127:41" pos:end="127:58">CPU_INTERRUPT_HARD</name><operator pos:start="127:59" pos:end="127:59">)</operator> <operator pos:start="127:61" pos:end="127:62">&amp;&amp;</operator>

        <operator pos:start="129:9" pos:end="129:9">(</operator><call pos:start="129:10" pos:end="129:20"><name pos:start="129:10" pos:end="129:15">EFLAGS</name><argument_list pos:start="129:16" pos:end="129:20">(<argument pos:start="129:17" pos:end="129:19"><expr pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:19">env</name></expr></argument>)</argument_list></call> <operator pos:start="129:22" pos:end="129:22">&amp;</operator> <name pos:start="129:24" pos:end="129:30">IF_MASK</name><operator pos:start="129:31" pos:end="129:31">)</operator> <operator pos:start="129:33" pos:end="129:34">&amp;&amp;</operator> <operator pos:start="129:36" pos:end="129:36">!</operator><operator pos:start="129:37" pos:end="129:37">(</operator><name pos:start="129:38" pos:end="129:41">info</name> <operator pos:start="129:43" pos:end="129:43">&amp;</operator> <name pos:start="129:45" pos:end="129:59">VMCS_INTR_VALID</name><operator pos:start="129:60" pos:end="129:60">)</operator></expr>)</condition> <block pos:start="129:63" pos:end="143:5">{<block_content pos:start="131:9" pos:end="141:9">

        <decl_stmt pos:start="131:9" pos:end="131:55"><decl pos:start="131:9" pos:end="131:54"><type pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">int</name></type> <name pos:start="131:13" pos:end="131:16">line</name> <init pos:start="131:18" pos:end="131:54">= <expr pos:start="131:20" pos:end="131:54"><call pos:start="131:20" pos:end="131:54"><name pos:start="131:20" pos:end="131:40">cpu_get_pic_interrupt</name><argument_list pos:start="131:41" pos:end="131:54">(<argument pos:start="131:42" pos:end="131:53"><expr pos:start="131:42" pos:end="131:53"><operator pos:start="131:42" pos:end="131:42">&amp;</operator><name pos:start="131:43" pos:end="131:53"><name pos:start="131:43" pos:end="131:48">x86cpu</name><operator pos:start="131:49" pos:end="131:50">-&gt;</operator><name pos:start="131:51" pos:end="131:53">env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:60"><expr pos:start="133:9" pos:end="133:59"><name pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:17">cpu_state</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:36">interrupt_request</name></name> <operator pos:start="133:38" pos:end="133:39">&amp;=</operator> <operator pos:start="133:41" pos:end="133:41">~</operator><name pos:start="133:42" pos:end="133:59">CPU_INTERRUPT_HARD</name></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:22">(<expr pos:start="135:13" pos:end="135:21"><name pos:start="135:13" pos:end="135:16">line</name> <operator pos:start="135:18" pos:end="135:19">&gt;=</operator> <literal type="number" pos:start="135:21" pos:end="135:21">0</literal></expr>)</condition> <block pos:start="135:24" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:56">

            <expr_stmt pos:start="137:13" pos:end="139:56"><expr pos:start="137:13" pos:end="139:55"><call pos:start="137:13" pos:end="139:55"><name pos:start="137:13" pos:end="137:17">wvmcs</name><argument_list pos:start="137:18" pos:end="139:55">(<argument pos:start="137:19" pos:end="137:35"><expr pos:start="137:19" pos:end="137:35"><name pos:start="137:19" pos:end="137:35"><name pos:start="137:19" pos:end="137:27">cpu_state</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:35">hvf_fd</name></name></expr></argument>, <argument pos:start="137:38" pos:end="137:57"><expr pos:start="137:38" pos:end="137:57"><name pos:start="137:38" pos:end="137:57">VMCS_ENTRY_INTR_INFO</name></expr></argument>, <argument pos:start="137:60" pos:end="139:54"><expr pos:start="137:60" pos:end="139:54"><name pos:start="137:60" pos:end="137:63">line</name> <operator pos:start="137:65" pos:end="137:65">|</operator>

                  <name pos:start="139:19" pos:end="139:33">VMCS_INTR_VALID</name> <operator pos:start="139:35" pos:end="139:35">|</operator> <name pos:start="139:37" pos:end="139:54">VMCS_INTR_T_HWINTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:58">(<expr pos:start="145:9" pos:end="145:57"><name pos:start="145:9" pos:end="145:36"><name pos:start="145:9" pos:end="145:17">cpu_state</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:36">interrupt_request</name></name> <operator pos:start="145:38" pos:end="145:38">&amp;</operator> <name pos:start="145:40" pos:end="145:57">CPU_INTERRUPT_HARD</name></expr>)</condition> <block pos:start="145:60" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:46">

        <expr_stmt pos:start="147:9" pos:end="147:46"><expr pos:start="147:9" pos:end="147:45"><call pos:start="147:9" pos:end="147:45"><name pos:start="147:9" pos:end="147:34">vmx_set_int_window_exiting</name><argument_list pos:start="147:35" pos:end="147:45">(<argument pos:start="147:36" pos:end="147:44"><expr pos:start="147:36" pos:end="147:44"><name pos:start="147:36" pos:end="147:44">cpu_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
