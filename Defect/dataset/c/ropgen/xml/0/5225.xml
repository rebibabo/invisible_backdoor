<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5225.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:43"><name pos:start="1:1" pos:end="1:20">matroska_read_packet</name> <argument_list pos:start="1:22" pos:end="3:43">(<argument pos:start="1:23" pos:end="1:40">AVFormatContext *s</argument>,

                      <argument pos:start="3:23" pos:end="3:42">AVPacket        *pkt</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:13">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:24">MatroskaDemuxContext</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:34">matroska</name> <init pos:start="7:36" pos:end="7:49">= <expr pos:start="7:38" pos:end="7:49"><name pos:start="7:38" pos:end="7:49"><name pos:start="7:38" pos:end="7:38">s</name><operator pos:start="7:39" pos:end="7:40">-&gt;</operator><name pos:start="7:41" pos:end="7:49">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">res</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:15">id</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:52">/* Read stream until we have a packet queued. */</comment>

    <while pos:start="17:5" pos:end="89:5">while <condition pos:start="17:11" pos:end="17:50">(<expr pos:start="17:12" pos:end="17:49"><call pos:start="17:12" pos:end="17:49"><name pos:start="17:12" pos:end="17:34">matroska_deliver_packet</name><argument_list pos:start="17:35" pos:end="17:49">(<argument pos:start="17:36" pos:end="17:43"><expr pos:start="17:36" pos:end="17:43"><name pos:start="17:36" pos:end="17:43">matroska</name></expr></argument>, <argument pos:start="17:46" pos:end="17:48"><expr pos:start="17:46" pos:end="17:48"><name pos:start="17:46" pos:end="17:48">pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:52" pos:end="89:5">{<block_content pos:start="23:9" pos:end="87:31">



        <comment type="block" pos:start="21:9" pos:end="21:46">/* Have we already reached the end? */</comment>

        <if_stmt pos:start="23:9" pos:end="25:30"><if pos:start="23:9" pos:end="25:30">if <condition pos:start="23:12" pos:end="23:27">(<expr pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:20">matroska</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:26">done</name></name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:30"><block_content pos:start="25:13" pos:end="25:30">

            <return pos:start="25:13" pos:end="25:30">return <expr pos:start="25:20" pos:end="25:29"><name pos:start="25:20" pos:end="25:29">AVERROR_IO</name></expr>;</return></block_content></block></if></if_stmt>



        <while pos:start="29:9" pos:end="81:9">while <condition pos:start="29:15" pos:end="29:24">(<expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:18">res</name> <operator pos:start="29:20" pos:end="29:21">==</operator> <literal type="number" pos:start="29:23" pos:end="29:23">0</literal></expr>)</condition> <block pos:start="29:26" pos:end="81:9">{<block_content pos:start="31:13" pos:end="79:13">

            <if_stmt pos:start="31:13" pos:end="41:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:68">(<expr pos:start="31:17" pos:end="31:67"><operator pos:start="31:17" pos:end="31:17">!</operator><operator pos:start="31:18" pos:end="31:18">(</operator><name pos:start="31:19" pos:end="31:20">id</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <call pos:start="31:24" pos:end="31:66"><name pos:start="31:24" pos:end="31:35">ebml_peek_id</name><argument_list pos:start="31:36" pos:end="31:66">(<argument pos:start="31:37" pos:end="31:44"><expr pos:start="31:37" pos:end="31:44"><name pos:start="31:37" pos:end="31:44">matroska</name></expr></argument>, <argument pos:start="31:47" pos:end="31:65"><expr pos:start="31:47" pos:end="31:65"><operator pos:start="31:47" pos:end="31:47">&amp;</operator><name pos:start="31:48" pos:end="31:65"><name pos:start="31:48" pos:end="31:55">matroska</name><operator pos:start="31:56" pos:end="31:57">-&gt;</operator><name pos:start="31:58" pos:end="31:65">level_up</name></name></expr></argument>)</argument_list></call><operator pos:start="31:67" pos:end="31:67">)</operator></expr>)</condition> <block pos:start="31:70" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:34">

                <return pos:start="33:17" pos:end="33:34">return <expr pos:start="33:24" pos:end="33:33"><name pos:start="33:24" pos:end="33:33">AVERROR_IO</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="35:15" pos:end="41:13">else if <condition pos:start="35:23" pos:end="35:42">(<expr pos:start="35:24" pos:end="35:41"><name pos:start="35:24" pos:end="35:41"><name pos:start="35:24" pos:end="35:31">matroska</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:41">level_up</name></name></expr>)</condition> <block pos:start="35:44" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:22">

                <expr_stmt pos:start="37:17" pos:end="37:37"><expr pos:start="37:17" pos:end="37:36"><name pos:start="37:17" pos:end="37:34"><name pos:start="37:17" pos:end="37:24">matroska</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:34">level_up</name></name><operator pos:start="37:35" pos:end="37:36">--</operator></expr>;</expr_stmt>

                <break pos:start="39:17" pos:end="39:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="45:13" pos:end="69:13">switch <condition pos:start="45:20" pos:end="45:23">(<expr pos:start="45:21" pos:end="45:22"><name pos:start="45:21" pos:end="45:22">id</name></expr>)</condition> <block pos:start="45:25" pos:end="69:13">{<block_content pos:start="47:17" pos:end="67:26">

                <case pos:start="47:17" pos:end="47:41">case <expr pos:start="47:22" pos:end="47:40"><name pos:start="47:22" pos:end="47:40">MATROSKA_ID_CLUSTER</name></expr>:</case>

                    <if_stmt pos:start="49:21" pos:end="51:30"><if pos:start="49:21" pos:end="51:30">if <condition pos:start="49:24" pos:end="49:68">(<expr pos:start="49:25" pos:end="49:67"><operator pos:start="49:25" pos:end="49:25">(</operator><name pos:start="49:26" pos:end="49:28">res</name> <operator pos:start="49:30" pos:end="49:30">=</operator> <call pos:start="49:32" pos:end="49:62"><name pos:start="49:32" pos:end="49:47">ebml_read_master</name><argument_list pos:start="49:48" pos:end="49:62">(<argument pos:start="49:49" pos:end="49:56"><expr pos:start="49:49" pos:end="49:56"><name pos:start="49:49" pos:end="49:56">matroska</name></expr></argument>, <argument pos:start="49:59" pos:end="49:61"><expr pos:start="49:59" pos:end="49:61"><operator pos:start="49:59" pos:end="49:59">&amp;</operator><name pos:start="49:60" pos:end="49:61">id</name></expr></argument>)</argument_list></call><operator pos:start="49:63" pos:end="49:63">)</operator> <operator pos:start="49:65" pos:end="49:65">&lt;</operator> <literal type="number" pos:start="49:67" pos:end="49:67">0</literal></expr>)</condition><block type="pseudo" pos:start="51:25" pos:end="51:30"><block_content pos:start="51:25" pos:end="51:30">

                        <break pos:start="51:25" pos:end="51:30">break;</break></block_content></block></if></if_stmt>

                    <if_stmt pos:start="53:21" pos:end="55:32"><if pos:start="53:21" pos:end="55:32">if <condition pos:start="53:24" pos:end="53:70">(<expr pos:start="53:25" pos:end="53:69"><operator pos:start="53:25" pos:end="53:25">(</operator><name pos:start="53:26" pos:end="53:28">res</name> <operator pos:start="53:30" pos:end="53:30">=</operator> <call pos:start="53:32" pos:end="53:63"><name pos:start="53:32" pos:end="53:53">matroska_parse_cluster</name><argument_list pos:start="53:54" pos:end="53:63">(<argument pos:start="53:55" pos:end="53:62"><expr pos:start="53:55" pos:end="53:62"><name pos:start="53:55" pos:end="53:62">matroska</name></expr></argument>)</argument_list></call><operator pos:start="53:64" pos:end="53:64">)</operator> <operator pos:start="53:66" pos:end="53:67">==</operator> <literal type="number" pos:start="53:69" pos:end="53:69">0</literal></expr>)</condition><block type="pseudo" pos:start="55:25" pos:end="55:32"><block_content pos:start="55:25" pos:end="55:32">

                        <expr_stmt pos:start="55:25" pos:end="55:32"><expr pos:start="55:25" pos:end="55:31"><name pos:start="55:25" pos:end="55:27">res</name> <operator pos:start="55:29" pos:end="55:29">=</operator> <literal type="number" pos:start="55:31" pos:end="55:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="55:34" pos:end="55:73">/* Parsed one cluster, let's get out. */</comment>

                    <break pos:start="57:21" pos:end="57:26">break;</break>



                <default pos:start="61:17" pos:end="61:24">default:</default>

                <case pos:start="63:17" pos:end="63:34">case <expr pos:start="63:22" pos:end="63:33"><name pos:start="63:22" pos:end="63:33">EBML_ID_VOID</name></expr>:</case>

                    <expr_stmt pos:start="65:21" pos:end="65:51"><expr pos:start="65:21" pos:end="65:50"><name pos:start="65:21" pos:end="65:23">res</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:50"><name pos:start="65:27" pos:end="65:40">ebml_read_skip</name><argument_list pos:start="65:41" pos:end="65:50">(<argument pos:start="65:42" pos:end="65:49"><expr pos:start="65:42" pos:end="65:49"><name pos:start="65:42" pos:end="65:49">matroska</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="67:21" pos:end="67:26">break;</break>

            </block_content>}</block></switch>



            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:35">(<expr pos:start="73:17" pos:end="73:34"><name pos:start="73:17" pos:end="73:34"><name pos:start="73:17" pos:end="73:24">matroska</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:34">level_up</name></name></expr>)</condition> <block pos:start="73:37" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:22">

                <expr_stmt pos:start="75:17" pos:end="75:37"><expr pos:start="75:17" pos:end="75:36"><name pos:start="75:17" pos:end="75:34"><name pos:start="75:17" pos:end="75:24">matroska</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:34">level_up</name></name><operator pos:start="75:35" pos:end="75:36">--</operator></expr>;</expr_stmt>

                <break pos:start="77:17" pos:end="77:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="85:9" pos:end="87:31"><if pos:start="85:9" pos:end="87:31">if <condition pos:start="85:12" pos:end="85:22">(<expr pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:15">res</name> <operator pos:start="85:17" pos:end="85:18">==</operator> <operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:31"><block_content pos:start="87:13" pos:end="87:31">

            <expr_stmt pos:start="87:13" pos:end="87:31"><expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:20">matroska</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:26">done</name></name> <operator pos:start="87:28" pos:end="87:28">=</operator> <literal type="number" pos:start="87:30" pos:end="87:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>

</block_content>}</block>
</unit>
