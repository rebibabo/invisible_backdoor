<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6824.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">IOMMUTLBEntry</name></type> <name pos:start="1:22" pos:end="1:36">amdvi_translate</name><parameter_list pos:start="1:37" pos:end="3:51">(<parameter pos:start="1:38" pos:end="1:56"><decl pos:start="1:38" pos:end="1:56"><type pos:start="1:38" pos:end="1:56"><name pos:start="1:38" pos:end="1:49">MemoryRegion</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">iommu</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:69"><decl pos:start="1:59" pos:end="1:69"><type pos:start="1:59" pos:end="1:69"><name pos:start="1:59" pos:end="1:64">hwaddr</name></type> <name pos:start="1:66" pos:end="1:69">addr</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:50"><decl pos:start="3:38" pos:end="3:50"><type pos:start="3:38" pos:end="3:50"><name pos:start="3:38" pos:end="3:41">bool</name></type> <name pos:start="3:43" pos:end="3:50">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:15">

    <decl_stmt pos:start="7:5" pos:end="7:74"><decl pos:start="7:5" pos:end="7:73"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">AMDVIAddressSpace</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:25">as</name> <init pos:start="7:27" pos:end="7:73">= <expr pos:start="7:29" pos:end="7:73"><call pos:start="7:29" pos:end="7:73"><name pos:start="7:29" pos:end="7:40">container_of</name><argument_list pos:start="7:41" pos:end="7:73">(<argument pos:start="7:42" pos:end="7:46"><expr pos:start="7:42" pos:end="7:46"><name pos:start="7:42" pos:end="7:46">iommu</name></expr></argument>, <argument pos:start="7:49" pos:end="7:65"><expr pos:start="7:49" pos:end="7:65"><name pos:start="7:49" pos:end="7:65">AMDVIAddressSpace</name></expr></argument>, <argument pos:start="7:68" pos:end="7:72"><expr pos:start="7:68" pos:end="7:72"><name pos:start="7:68" pos:end="7:72">iommu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">AMDVIState</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:35">= <expr pos:start="9:21" pos:end="9:35"><name pos:start="9:21" pos:end="9:35"><name pos:start="9:21" pos:end="9:22">as</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:35">iommu_state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="23:6"><decl pos:start="11:5" pos:end="23:5"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">IOMMUTLBEntry</name></type> <name pos:start="11:19" pos:end="11:21">ret</name> <init pos:start="11:23" pos:end="23:5">= <expr pos:start="11:25" pos:end="23:5"><block pos:start="11:25" pos:end="23:5">{

        <expr pos:start="13:9" pos:end="13:42"><operator pos:start="13:9" pos:end="13:9">.</operator><name pos:start="13:10" pos:end="13:18">target_as</name> <operator pos:start="13:20" pos:end="13:20">=</operator> <operator pos:start="13:22" pos:end="13:22">&amp;</operator><name pos:start="13:23" pos:end="13:42">address_space_memory</name></expr>,

        <expr pos:start="15:9" pos:end="15:20"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:13">iova</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:20">addr</name></expr>,

        <expr pos:start="17:9" pos:end="17:28"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:24">translated_addr</name> <operator pos:start="17:26" pos:end="17:26">=</operator> <literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr>,

        <expr pos:start="19:9" pos:end="19:31"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:18">addr_mask</name> <operator pos:start="19:20" pos:end="19:20">=</operator> <operator pos:start="19:22" pos:end="19:22">~</operator><operator pos:start="19:23" pos:end="19:23">(</operator><name pos:start="19:24" pos:end="19:29">hwaddr</name><operator pos:start="19:30" pos:end="19:30">)</operator><literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr>,

        <expr pos:start="21:9" pos:end="21:26"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:13">perm</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <name pos:start="21:17" pos:end="21:26">IOMMU_NONE</name></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="57:5"><if pos:start="27:5" pos:end="45:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:10">s</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:19">enabled</name></name></expr>)</condition> <block pos:start="27:22" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:19">

        <comment type="block" pos:start="29:9" pos:end="33:11">/* AMDVI disabled - corresponds to iommu=off not

         * failure to provide any parameter

         */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:45"><expr pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:11">ret</name><operator pos:start="35:12" pos:end="35:12">.</operator><name pos:start="35:13" pos:end="35:16">iova</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:23">addr</name> <operator pos:start="35:25" pos:end="35:25">&amp;</operator> <name pos:start="35:27" pos:end="35:44">AMDVI_PAGE_MASK_4K</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:56"><expr pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:11">ret</name><operator pos:start="37:12" pos:end="37:12">.</operator><name pos:start="37:13" pos:end="37:27">translated_addr</name></name> <operator pos:start="37:29" pos:end="37:29">=</operator> <name pos:start="37:31" pos:end="37:34">addr</name> <operator pos:start="37:36" pos:end="37:36">&amp;</operator> <name pos:start="37:38" pos:end="37:55">AMDVI_PAGE_MASK_4K</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:44"><expr pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:11">ret</name><operator pos:start="39:12" pos:end="39:12">.</operator><name pos:start="39:13" pos:end="39:21">addr_mask</name></name> <operator pos:start="39:23" pos:end="39:23">=</operator> <operator pos:start="39:25" pos:end="39:25">~</operator><name pos:start="39:26" pos:end="39:43">AMDVI_PAGE_MASK_4K</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:11">ret</name><operator pos:start="41:12" pos:end="41:12">.</operator><name pos:start="41:13" pos:end="41:16">perm</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:27">IOMMU_RW</name></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:19">return <expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">ret</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="45:7" pos:end="57:5">else if <condition pos:start="45:15" pos:end="45:45">(<expr pos:start="45:16" pos:end="45:44"><call pos:start="45:16" pos:end="45:44"><name pos:start="45:16" pos:end="45:38">amdvi_is_interrupt_addr</name><argument_list pos:start="45:39" pos:end="45:44">(<argument pos:start="45:40" pos:end="45:43"><expr pos:start="45:40" pos:end="45:43"><name pos:start="45:40" pos:end="45:43">addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:47" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:19">

        <expr_stmt pos:start="47:9" pos:end="47:45"><expr pos:start="47:9" pos:end="47:44"><name pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">ret</name><operator pos:start="47:12" pos:end="47:12">.</operator><name pos:start="47:13" pos:end="47:16">iova</name></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:23">addr</name> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <name pos:start="47:27" pos:end="47:44">AMDVI_PAGE_MASK_4K</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:56"><expr pos:start="49:9" pos:end="49:55"><name pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:11">ret</name><operator pos:start="49:12" pos:end="49:12">.</operator><name pos:start="49:13" pos:end="49:27">translated_addr</name></name> <operator pos:start="49:29" pos:end="49:29">=</operator> <name pos:start="49:31" pos:end="49:34">addr</name> <operator pos:start="49:36" pos:end="49:36">&amp;</operator> <name pos:start="49:38" pos:end="49:55">AMDVI_PAGE_MASK_4K</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:11">ret</name><operator pos:start="51:12" pos:end="51:12">.</operator><name pos:start="51:13" pos:end="51:21">addr_mask</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <operator pos:start="51:25" pos:end="51:25">~</operator><name pos:start="51:26" pos:end="51:43">AMDVI_PAGE_MASK_4K</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:28"><expr pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">ret</name><operator pos:start="53:12" pos:end="53:12">.</operator><name pos:start="53:13" pos:end="53:16">perm</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:27">IOMMU_WO</name></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:19">return <expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:49"><expr pos:start="61:5" pos:end="61:48"><call pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:22">amdvi_do_translate</name><argument_list pos:start="61:23" pos:end="61:48">(<argument pos:start="61:24" pos:end="61:25"><expr pos:start="61:24" pos:end="61:25"><name pos:start="61:24" pos:end="61:25">as</name></expr></argument>, <argument pos:start="61:28" pos:end="61:31"><expr pos:start="61:28" pos:end="61:31"><name pos:start="61:28" pos:end="61:31">addr</name></expr></argument>, <argument pos:start="61:34" pos:end="61:41"><expr pos:start="61:34" pos:end="61:41"><name pos:start="61:34" pos:end="61:41">is_write</name></expr></argument>, <argument pos:start="61:44" pos:end="61:47"><expr pos:start="61:44" pos:end="61:47"><operator pos:start="61:44" pos:end="61:44">&amp;</operator><name pos:start="61:45" pos:end="61:47">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:60"><expr pos:start="63:5" pos:end="65:59"><call pos:start="63:5" pos:end="65:59"><name pos:start="63:5" pos:end="63:34">trace_amdvi_translation_result</name><argument_list pos:start="63:35" pos:end="65:59">(<argument pos:start="63:36" pos:end="63:46"><expr pos:start="63:36" pos:end="63:46"><name pos:start="63:36" pos:end="63:46"><name pos:start="63:36" pos:end="63:37">as</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:46">bus_num</name></name></expr></argument>, <argument pos:start="63:49" pos:end="63:67"><expr pos:start="63:49" pos:end="63:67"><call pos:start="63:49" pos:end="63:67"><name pos:start="63:49" pos:end="63:56">PCI_SLOT</name><argument_list pos:start="63:57" pos:end="63:67">(<argument pos:start="63:58" pos:end="63:66"><expr pos:start="63:58" pos:end="63:66"><name pos:start="63:58" pos:end="63:66"><name pos:start="63:58" pos:end="63:59">as</name><operator pos:start="63:60" pos:end="63:61">-&gt;</operator><name pos:start="63:62" pos:end="63:66">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="65:13" pos:end="65:31"><expr pos:start="65:13" pos:end="65:31"><call pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:20">PCI_FUNC</name><argument_list pos:start="65:21" pos:end="65:31">(<argument pos:start="65:22" pos:end="65:30"><expr pos:start="65:22" pos:end="65:30"><name pos:start="65:22" pos:end="65:30"><name pos:start="65:22" pos:end="65:23">as</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:30">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:34" pos:end="65:37"><expr pos:start="65:34" pos:end="65:37"><name pos:start="65:34" pos:end="65:37">addr</name></expr></argument>, <argument pos:start="65:40" pos:end="65:58"><expr pos:start="65:40" pos:end="65:58"><name pos:start="65:40" pos:end="65:58"><name pos:start="65:40" pos:end="65:42">ret</name><operator pos:start="65:43" pos:end="65:43">.</operator><name pos:start="65:44" pos:end="65:58">translated_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="67:5" pos:end="67:15">return <expr pos:start="67:12" pos:end="67:14"><name pos:start="67:12" pos:end="67:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
