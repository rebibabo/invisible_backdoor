<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23401.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">bochs_bios_init</name><parameter_list pos:start="1:28" pos:end="1:33">(<parameter pos:start="1:29" pos:end="1:32"><decl pos:start="1:29" pos:end="1:32"><type pos:start="1:29" pos:end="1:32"><name pos:start="1:29" pos:end="1:32">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:57">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:25">smbios_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:21">smbios_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:25">numa_fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:63"><expr pos:start="17:5" pos:end="17:62"><call pos:start="17:5" pos:end="17:62"><name pos:start="17:5" pos:end="17:25">register_ioport_write</name><argument_list pos:start="17:26" pos:end="17:62">(<argument pos:start="17:27" pos:end="17:31"><expr pos:start="17:27" pos:end="17:31"><literal type="number" pos:start="17:27" pos:end="17:31">0x400</literal></expr></argument>, <argument pos:start="17:34" pos:end="17:34"><expr pos:start="17:34" pos:end="17:34"><literal type="number" pos:start="17:34" pos:end="17:34">1</literal></expr></argument>, <argument pos:start="17:37" pos:end="17:37"><expr pos:start="17:37" pos:end="17:37"><literal type="number" pos:start="17:37" pos:end="17:37">2</literal></expr></argument>, <argument pos:start="17:40" pos:end="17:55"><expr pos:start="17:40" pos:end="17:55"><name pos:start="17:40" pos:end="17:55">bochs_bios_write</name></expr></argument>, <argument pos:start="17:58" pos:end="17:61"><expr pos:start="17:58" pos:end="17:61"><name pos:start="17:58" pos:end="17:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:63"><expr pos:start="19:5" pos:end="19:62"><call pos:start="19:5" pos:end="19:62"><name pos:start="19:5" pos:end="19:25">register_ioport_write</name><argument_list pos:start="19:26" pos:end="19:62">(<argument pos:start="19:27" pos:end="19:31"><expr pos:start="19:27" pos:end="19:31"><literal type="number" pos:start="19:27" pos:end="19:31">0x401</literal></expr></argument>, <argument pos:start="19:34" pos:end="19:34"><expr pos:start="19:34" pos:end="19:34"><literal type="number" pos:start="19:34" pos:end="19:34">1</literal></expr></argument>, <argument pos:start="19:37" pos:end="19:37"><expr pos:start="19:37" pos:end="19:37"><literal type="number" pos:start="19:37" pos:end="19:37">2</literal></expr></argument>, <argument pos:start="19:40" pos:end="19:55"><expr pos:start="19:40" pos:end="19:55"><name pos:start="19:40" pos:end="19:55">bochs_bios_write</name></expr></argument>, <argument pos:start="19:58" pos:end="19:61"><expr pos:start="19:58" pos:end="19:61"><name pos:start="19:58" pos:end="19:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:63"><expr pos:start="21:5" pos:end="21:62"><call pos:start="21:5" pos:end="21:62"><name pos:start="21:5" pos:end="21:25">register_ioport_write</name><argument_list pos:start="21:26" pos:end="21:62">(<argument pos:start="21:27" pos:end="21:31"><expr pos:start="21:27" pos:end="21:31"><literal type="number" pos:start="21:27" pos:end="21:31">0x402</literal></expr></argument>, <argument pos:start="21:34" pos:end="21:34"><expr pos:start="21:34" pos:end="21:34"><literal type="number" pos:start="21:34" pos:end="21:34">1</literal></expr></argument>, <argument pos:start="21:37" pos:end="21:37"><expr pos:start="21:37" pos:end="21:37"><literal type="number" pos:start="21:37" pos:end="21:37">1</literal></expr></argument>, <argument pos:start="21:40" pos:end="21:55"><expr pos:start="21:40" pos:end="21:55"><name pos:start="21:40" pos:end="21:55">bochs_bios_write</name></expr></argument>, <argument pos:start="21:58" pos:end="21:61"><expr pos:start="21:58" pos:end="21:61"><name pos:start="21:58" pos:end="21:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:63"><expr pos:start="23:5" pos:end="23:62"><call pos:start="23:5" pos:end="23:62"><name pos:start="23:5" pos:end="23:25">register_ioport_write</name><argument_list pos:start="23:26" pos:end="23:62">(<argument pos:start="23:27" pos:end="23:31"><expr pos:start="23:27" pos:end="23:31"><literal type="number" pos:start="23:27" pos:end="23:31">0x403</literal></expr></argument>, <argument pos:start="23:34" pos:end="23:34"><expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">1</literal></expr></argument>, <argument pos:start="23:37" pos:end="23:37"><expr pos:start="23:37" pos:end="23:37"><literal type="number" pos:start="23:37" pos:end="23:37">1</literal></expr></argument>, <argument pos:start="23:40" pos:end="23:55"><expr pos:start="23:40" pos:end="23:55"><name pos:start="23:40" pos:end="23:55">bochs_bios_write</name></expr></argument>, <argument pos:start="23:58" pos:end="23:61"><expr pos:start="23:58" pos:end="23:61"><name pos:start="23:58" pos:end="23:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:64"><expr pos:start="25:5" pos:end="25:63"><call pos:start="25:5" pos:end="25:63"><name pos:start="25:5" pos:end="25:25">register_ioport_write</name><argument_list pos:start="25:26" pos:end="25:63">(<argument pos:start="25:27" pos:end="25:32"><expr pos:start="25:27" pos:end="25:32"><literal type="number" pos:start="25:27" pos:end="25:32">0x8900</literal></expr></argument>, <argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><literal type="number" pos:start="25:35" pos:end="25:35">1</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:38"><expr pos:start="25:38" pos:end="25:38"><literal type="number" pos:start="25:38" pos:end="25:38">1</literal></expr></argument>, <argument pos:start="25:41" pos:end="25:56"><expr pos:start="25:41" pos:end="25:56"><name pos:start="25:41" pos:end="25:56">bochs_bios_write</name></expr></argument>, <argument pos:start="25:59" pos:end="25:62"><expr pos:start="25:59" pos:end="25:62"><name pos:start="25:59" pos:end="25:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:63"><expr pos:start="29:5" pos:end="29:62"><call pos:start="29:5" pos:end="29:62"><name pos:start="29:5" pos:end="29:25">register_ioport_write</name><argument_list pos:start="29:26" pos:end="29:62">(<argument pos:start="29:27" pos:end="29:31"><expr pos:start="29:27" pos:end="29:31"><literal type="number" pos:start="29:27" pos:end="29:31">0x501</literal></expr></argument>, <argument pos:start="29:34" pos:end="29:34"><expr pos:start="29:34" pos:end="29:34"><literal type="number" pos:start="29:34" pos:end="29:34">1</literal></expr></argument>, <argument pos:start="29:37" pos:end="29:37"><expr pos:start="29:37" pos:end="29:37"><literal type="number" pos:start="29:37" pos:end="29:37">2</literal></expr></argument>, <argument pos:start="29:40" pos:end="29:55"><expr pos:start="29:40" pos:end="29:55"><name pos:start="29:40" pos:end="29:55">bochs_bios_write</name></expr></argument>, <argument pos:start="29:58" pos:end="29:61"><expr pos:start="29:58" pos:end="29:61"><name pos:start="29:58" pos:end="29:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:63"><expr pos:start="31:5" pos:end="31:62"><call pos:start="31:5" pos:end="31:62"><name pos:start="31:5" pos:end="31:25">register_ioport_write</name><argument_list pos:start="31:26" pos:end="31:62">(<argument pos:start="31:27" pos:end="31:31"><expr pos:start="31:27" pos:end="31:31"><literal type="number" pos:start="31:27" pos:end="31:31">0x502</literal></expr></argument>, <argument pos:start="31:34" pos:end="31:34"><expr pos:start="31:34" pos:end="31:34"><literal type="number" pos:start="31:34" pos:end="31:34">1</literal></expr></argument>, <argument pos:start="31:37" pos:end="31:37"><expr pos:start="31:37" pos:end="31:37"><literal type="number" pos:start="31:37" pos:end="31:37">2</literal></expr></argument>, <argument pos:start="31:40" pos:end="31:55"><expr pos:start="31:40" pos:end="31:55"><name pos:start="31:40" pos:end="31:55">bochs_bios_write</name></expr></argument>, <argument pos:start="31:58" pos:end="31:61"><expr pos:start="31:58" pos:end="31:61"><name pos:start="31:58" pos:end="31:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:63"><expr pos:start="33:5" pos:end="33:62"><call pos:start="33:5" pos:end="33:62"><name pos:start="33:5" pos:end="33:25">register_ioport_write</name><argument_list pos:start="33:26" pos:end="33:62">(<argument pos:start="33:27" pos:end="33:31"><expr pos:start="33:27" pos:end="33:31"><literal type="number" pos:start="33:27" pos:end="33:31">0x500</literal></expr></argument>, <argument pos:start="33:34" pos:end="33:34"><expr pos:start="33:34" pos:end="33:34"><literal type="number" pos:start="33:34" pos:end="33:34">1</literal></expr></argument>, <argument pos:start="33:37" pos:end="33:37"><expr pos:start="33:37" pos:end="33:37"><literal type="number" pos:start="33:37" pos:end="33:37">1</literal></expr></argument>, <argument pos:start="33:40" pos:end="33:55"><expr pos:start="33:40" pos:end="33:55"><name pos:start="33:40" pos:end="33:55">bochs_bios_write</name></expr></argument>, <argument pos:start="33:58" pos:end="33:61"><expr pos:start="33:58" pos:end="33:61"><name pos:start="33:58" pos:end="33:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:63"><expr pos:start="35:5" pos:end="35:62"><call pos:start="35:5" pos:end="35:62"><name pos:start="35:5" pos:end="35:25">register_ioport_write</name><argument_list pos:start="35:26" pos:end="35:62">(<argument pos:start="35:27" pos:end="35:31"><expr pos:start="35:27" pos:end="35:31"><literal type="number" pos:start="35:27" pos:end="35:31">0x503</literal></expr></argument>, <argument pos:start="35:34" pos:end="35:34"><expr pos:start="35:34" pos:end="35:34"><literal type="number" pos:start="35:34" pos:end="35:34">1</literal></expr></argument>, <argument pos:start="35:37" pos:end="35:37"><expr pos:start="35:37" pos:end="35:37"><literal type="number" pos:start="35:37" pos:end="35:37">1</literal></expr></argument>, <argument pos:start="35:40" pos:end="35:55"><expr pos:start="35:40" pos:end="35:55"><name pos:start="35:40" pos:end="35:55">bochs_bios_write</name></expr></argument>, <argument pos:start="35:58" pos:end="35:61"><expr pos:start="35:58" pos:end="35:61"><name pos:start="35:58" pos:end="35:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:69"><expr pos:start="39:5" pos:end="39:68"><name pos:start="39:5" pos:end="39:10">fw_cfg</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:68"><name pos:start="39:14" pos:end="39:24">fw_cfg_init</name><argument_list pos:start="39:25" pos:end="39:68">(<argument pos:start="39:26" pos:end="39:40"><expr pos:start="39:26" pos:end="39:40"><name pos:start="39:26" pos:end="39:40">BIOS_CFG_IOPORT</name></expr></argument>, <argument pos:start="39:43" pos:end="39:61"><expr pos:start="39:43" pos:end="39:61"><name pos:start="39:43" pos:end="39:57">BIOS_CFG_IOPORT</name> <operator pos:start="39:59" pos:end="39:59">+</operator> <literal type="number" pos:start="39:61" pos:end="39:61">1</literal></expr></argument>, <argument pos:start="39:64" pos:end="39:64"><expr pos:start="39:64" pos:end="39:64"><literal type="number" pos:start="39:64" pos:end="39:64">0</literal></expr></argument>, <argument pos:start="39:67" pos:end="39:67"><expr pos:start="39:67" pos:end="39:67"><literal type="number" pos:start="39:67" pos:end="39:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:41"><expr pos:start="41:5" pos:end="41:40"><call pos:start="41:5" pos:end="41:40"><name pos:start="41:5" pos:end="41:18">fw_cfg_add_i32</name><argument_list pos:start="41:19" pos:end="41:40">(<argument pos:start="41:20" pos:end="41:25"><expr pos:start="41:20" pos:end="41:25"><name pos:start="41:20" pos:end="41:25">fw_cfg</name></expr></argument>, <argument pos:start="41:28" pos:end="41:36"><expr pos:start="41:28" pos:end="41:36"><name pos:start="41:28" pos:end="41:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="41:39" pos:end="41:39"><expr pos:start="41:39" pos:end="41:39"><literal type="number" pos:start="41:39" pos:end="41:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:64"><expr pos:start="43:5" pos:end="43:63"><call pos:start="43:5" pos:end="43:63"><name pos:start="43:5" pos:end="43:18">fw_cfg_add_i64</name><argument_list pos:start="43:19" pos:end="43:63">(<argument pos:start="43:20" pos:end="43:25"><expr pos:start="43:20" pos:end="43:25"><name pos:start="43:20" pos:end="43:25">fw_cfg</name></expr></argument>, <argument pos:start="43:28" pos:end="43:42"><expr pos:start="43:28" pos:end="43:42"><name pos:start="43:28" pos:end="43:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="43:45" pos:end="43:62"><expr pos:start="43:45" pos:end="43:62"><operator pos:start="43:45" pos:end="43:45">(</operator><name pos:start="43:46" pos:end="43:53">uint64_t</name><operator pos:start="43:54" pos:end="43:54">)</operator><name pos:start="43:55" pos:end="43:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="47:38"><expr pos:start="45:5" pos:end="47:37"><call pos:start="45:5" pos:end="47:37"><name pos:start="45:5" pos:end="45:20">fw_cfg_add_bytes</name><argument_list pos:start="45:21" pos:end="47:37">(<argument pos:start="45:22" pos:end="45:27"><expr pos:start="45:22" pos:end="45:27"><name pos:start="45:22" pos:end="45:27">fw_cfg</name></expr></argument>, <argument pos:start="45:30" pos:end="45:47"><expr pos:start="45:30" pos:end="45:47"><name pos:start="45:30" pos:end="45:47">FW_CFG_ACPI_TABLES</name></expr></argument>, <argument pos:start="45:50" pos:end="45:71"><expr pos:start="45:50" pos:end="45:71"><operator pos:start="45:50" pos:end="45:50">(</operator><name pos:start="45:51" pos:end="45:57">uint8_t</name> <operator pos:start="45:59" pos:end="45:59">*</operator><operator pos:start="45:60" pos:end="45:60">)</operator><name pos:start="45:61" pos:end="45:71">acpi_tables</name></expr></argument>,

                     <argument pos:start="47:22" pos:end="47:36"><expr pos:start="47:22" pos:end="47:36"><name pos:start="47:22" pos:end="47:36">acpi_tables_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:49"><expr pos:start="51:5" pos:end="51:48"><name pos:start="51:5" pos:end="51:16">smbios_table</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:48"><name pos:start="51:20" pos:end="51:35">smbios_get_table</name><argument_list pos:start="51:36" pos:end="51:48">(<argument pos:start="51:37" pos:end="51:47"><expr pos:start="51:37" pos:end="51:47"><operator pos:start="51:37" pos:end="51:37">&amp;</operator><name pos:start="51:38" pos:end="51:47">smbios_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:51"><if pos:start="53:5" pos:end="57:51">if <condition pos:start="53:8" pos:end="53:21">(<expr pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:20">smbios_table</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="57:51"><block_content pos:start="55:9" pos:end="57:51">

        <expr_stmt pos:start="55:9" pos:end="57:51"><expr pos:start="55:9" pos:end="57:50"><call pos:start="55:9" pos:end="57:50"><name pos:start="55:9" pos:end="55:24">fw_cfg_add_bytes</name><argument_list pos:start="55:25" pos:end="57:50">(<argument pos:start="55:26" pos:end="55:31"><expr pos:start="55:26" pos:end="55:31"><name pos:start="55:26" pos:end="55:31">fw_cfg</name></expr></argument>, <argument pos:start="55:34" pos:end="55:54"><expr pos:start="55:34" pos:end="55:54"><name pos:start="55:34" pos:end="55:54">FW_CFG_SMBIOS_ENTRIES</name></expr></argument>,

                         <argument pos:start="57:26" pos:end="57:37"><expr pos:start="57:26" pos:end="57:37"><name pos:start="57:26" pos:end="57:37">smbios_table</name></expr></argument>, <argument pos:start="57:40" pos:end="57:49"><expr pos:start="57:40" pos:end="57:49"><name pos:start="57:40" pos:end="57:49">smbios_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="67:7">/* allocate memory for the NUMA channel: one (64bit) word for the number

     * of nodes, one word for each VCPU-&gt;node and one word for each node to

     * hold the amount of memory.

     */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:67"><expr pos:start="69:5" pos:end="69:66"><name pos:start="69:5" pos:end="69:15">numa_fw_cfg</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:66"><name pos:start="69:19" pos:end="69:30">qemu_mallocz</name><argument_list pos:start="69:31" pos:end="69:66">(<argument pos:start="69:32" pos:end="69:65"><expr pos:start="69:32" pos:end="69:65"><operator pos:start="69:32" pos:end="69:32">(</operator><literal type="number" pos:start="69:33" pos:end="69:35">1</literal> <operator pos:start="69:35" pos:end="69:35">+</operator> <name pos:start="69:37" pos:end="69:44">smp_cpus</name> <operator pos:start="69:46" pos:end="69:46">+</operator> <name pos:start="69:48" pos:end="69:60">nb_numa_nodes</name><operator pos:start="69:61" pos:end="69:61">)</operator> <operator pos:start="69:63" pos:end="69:63">*</operator> <literal type="number" pos:start="69:65" pos:end="69:65">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:48"><expr pos:start="71:5" pos:end="71:47"><name pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:15">numa_fw_cfg</name><index pos:start="71:16" pos:end="71:18">[<expr pos:start="71:17" pos:end="71:17"><literal type="number" pos:start="71:17" pos:end="71:17">0</literal></expr>]</index></name> <operator pos:start="71:20" pos:end="71:20">=</operator> <call pos:start="71:22" pos:end="71:47"><name pos:start="71:22" pos:end="71:32">cpu_to_le64</name><argument_list pos:start="71:33" pos:end="71:47">(<argument pos:start="71:34" pos:end="71:46"><expr pos:start="71:34" pos:end="71:46"><name pos:start="71:34" pos:end="71:46">nb_numa_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="73:5" pos:end="87:5">for <control pos:start="73:9" pos:end="73:34">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:29"><expr pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:28">smp_cpus</name></expr>;</condition> <incr pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:31">i</name><operator pos:start="73:32" pos:end="73:33">++</operator></expr></incr>)</control> <block pos:start="73:36" pos:end="87:5">{<block_content pos:start="75:9" pos:end="85:9">

        <for pos:start="75:9" pos:end="85:9">for <control pos:start="75:13" pos:end="75:43">(<init pos:start="75:14" pos:end="75:19"><expr pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:14">j</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</init> <condition pos:start="75:21" pos:end="75:38"><expr pos:start="75:21" pos:end="75:37"><name pos:start="75:21" pos:end="75:21">j</name> <operator pos:start="75:23" pos:end="75:23">&lt;</operator> <name pos:start="75:25" pos:end="75:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="75:40" pos:end="75:42"><expr pos:start="75:40" pos:end="75:42"><name pos:start="75:40" pos:end="75:40">j</name><operator pos:start="75:41" pos:end="75:42">++</operator></expr></incr>)</control> <block pos:start="75:45" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:13">

            <if_stmt pos:start="77:13" pos:end="83:13"><if pos:start="77:13" pos:end="83:13">if <condition pos:start="77:16" pos:end="77:43">(<expr pos:start="77:17" pos:end="77:42"><name pos:start="77:17" pos:end="77:31"><name pos:start="77:17" pos:end="77:28">node_cpumask</name><index pos:start="77:29" pos:end="77:31">[<expr pos:start="77:30" pos:end="77:30"><name pos:start="77:30" pos:end="77:30">j</name></expr>]</index></name> <operator pos:start="77:33" pos:end="77:33">&amp;</operator> <operator pos:start="77:35" pos:end="77:35">(</operator><literal type="number" pos:start="77:36" pos:end="77:36">1</literal> <operator pos:start="77:38" pos:end="77:39">&lt;&lt;</operator> <name pos:start="77:41" pos:end="77:41">i</name><operator pos:start="77:42" pos:end="77:42">)</operator></expr>)</condition> <block pos:start="77:45" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:22">

                <expr_stmt pos:start="79:17" pos:end="79:52"><expr pos:start="79:17" pos:end="79:51"><name pos:start="79:17" pos:end="79:34"><name pos:start="79:17" pos:end="79:27">numa_fw_cfg</name><index pos:start="79:28" pos:end="79:34">[<expr pos:start="79:29" pos:end="79:33"><name pos:start="79:29" pos:end="79:29">i</name> <operator pos:start="79:31" pos:end="79:31">+</operator> <literal type="number" pos:start="79:33" pos:end="79:33">1</literal></expr>]</index></name> <operator pos:start="79:36" pos:end="79:36">=</operator> <call pos:start="79:38" pos:end="79:51"><name pos:start="79:38" pos:end="79:48">cpu_to_le64</name><argument_list pos:start="79:49" pos:end="79:51">(<argument pos:start="79:50" pos:end="79:50"><expr pos:start="79:50" pos:end="79:50"><name pos:start="79:50" pos:end="79:50">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="81:17" pos:end="81:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <for pos:start="89:5" pos:end="93:5">for <control pos:start="89:9" pos:end="89:39">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:34"><expr pos:start="89:17" pos:end="89:33"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:33">nb_numa_nodes</name></expr>;</condition> <incr pos:start="89:36" pos:end="89:38"><expr pos:start="89:36" pos:end="89:38"><name pos:start="89:36" pos:end="89:36">i</name><operator pos:start="89:37" pos:end="89:38">++</operator></expr></incr>)</control> <block pos:start="89:41" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:65">

        <expr_stmt pos:start="91:9" pos:end="91:65"><expr pos:start="91:9" pos:end="91:64"><name pos:start="91:9" pos:end="91:37"><name pos:start="91:9" pos:end="91:19">numa_fw_cfg</name><index pos:start="91:20" pos:end="91:37">[<expr pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:28">smp_cpus</name> <operator pos:start="91:30" pos:end="91:30">+</operator> <literal type="number" pos:start="91:32" pos:end="91:32">1</literal> <operator pos:start="91:34" pos:end="91:34">+</operator> <name pos:start="91:36" pos:end="91:36">i</name></expr>]</index></name> <operator pos:start="91:39" pos:end="91:39">=</operator> <call pos:start="91:41" pos:end="91:64"><name pos:start="91:41" pos:end="91:51">cpu_to_le64</name><argument_list pos:start="91:52" pos:end="91:64">(<argument pos:start="91:53" pos:end="91:63"><expr pos:start="91:53" pos:end="91:63"><name pos:start="91:53" pos:end="91:63"><name pos:start="91:53" pos:end="91:60">node_mem</name><index pos:start="91:61" pos:end="91:63">[<expr pos:start="91:62" pos:end="91:62"><name pos:start="91:62" pos:end="91:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="95:5" pos:end="97:57"><expr pos:start="95:5" pos:end="97:56"><call pos:start="95:5" pos:end="97:56"><name pos:start="95:5" pos:end="95:20">fw_cfg_add_bytes</name><argument_list pos:start="95:21" pos:end="97:56">(<argument pos:start="95:22" pos:end="95:27"><expr pos:start="95:22" pos:end="95:27"><name pos:start="95:22" pos:end="95:27">fw_cfg</name></expr></argument>, <argument pos:start="95:30" pos:end="95:40"><expr pos:start="95:30" pos:end="95:40"><name pos:start="95:30" pos:end="95:40">FW_CFG_NUMA</name></expr></argument>, <argument pos:start="95:43" pos:end="95:64"><expr pos:start="95:43" pos:end="95:64"><operator pos:start="95:43" pos:end="95:43">(</operator><name pos:start="95:44" pos:end="95:50">uint8_t</name> <operator pos:start="95:52" pos:end="95:52">*</operator><operator pos:start="95:53" pos:end="95:53">)</operator><name pos:start="95:54" pos:end="95:64">numa_fw_cfg</name></expr></argument>,

                     <argument pos:start="97:22" pos:end="97:55"><expr pos:start="97:22" pos:end="97:55"><operator pos:start="97:22" pos:end="97:22">(</operator><literal type="number" pos:start="97:23" pos:end="97:25">1</literal> <operator pos:start="97:25" pos:end="97:25">+</operator> <name pos:start="97:27" pos:end="97:34">smp_cpus</name> <operator pos:start="97:36" pos:end="97:36">+</operator> <name pos:start="97:38" pos:end="97:50">nb_numa_nodes</name><operator pos:start="97:51" pos:end="97:51">)</operator> <operator pos:start="97:53" pos:end="97:53">*</operator> <literal type="number" pos:start="97:55" pos:end="97:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
