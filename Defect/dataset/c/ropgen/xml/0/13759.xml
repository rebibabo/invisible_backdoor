<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13759.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">ram_load</name><parameter_list pos:start="1:20" pos:end="1:62">(<parameter pos:start="1:21" pos:end="1:31"><decl pos:start="1:21" pos:end="1:31"><type pos:start="1:21" pos:end="1:31"><name pos:start="1:21" pos:end="1:28">QEMUFile</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:31">f</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:61">version_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:13">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:19">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">flags</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:23"><if pos:start="11:5" pos:end="13:23">if <condition pos:start="11:8" pos:end="11:24">(<expr pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:18">version_id</name> <operator pos:start="11:20" pos:end="11:21">!=</operator> <literal type="number" pos:start="11:23" pos:end="11:23">3</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:23"><block_content pos:start="13:9" pos:end="13:23">

        <return pos:start="13:9" pos:end="13:23">return <expr pos:start="13:16" pos:end="13:22"><operator pos:start="13:16" pos:end="13:16">-</operator><name pos:start="13:17" pos:end="13:22">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>



    <do pos:start="17:5" pos:end="69:43">do <block pos:start="17:8" pos:end="69:5">{<block_content pos:start="19:9" pos:end="67:9">

        <expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:12">addr</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="19:31"><name pos:start="19:16" pos:end="19:28">qemu_get_be64</name><argument_list pos:start="19:29" pos:end="19:31">(<argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><name pos:start="19:30" pos:end="19:30">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:13">flags</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:20">addr</name> <operator pos:start="23:22" pos:end="23:22">&amp;</operator> <operator pos:start="23:24" pos:end="23:24">~</operator><name pos:start="23:25" pos:end="23:40">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:12">addr</name> <operator pos:start="25:14" pos:end="25:15">&amp;=</operator> <name pos:start="25:17" pos:end="25:32">TARGET_PAGE_MASK</name></expr>;</expr_stmt>



        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:43">(<expr pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:17">flags</name> <operator pos:start="29:19" pos:end="29:19">&amp;</operator> <name pos:start="29:21" pos:end="29:42">RAM_SAVE_FLAG_MEM_SIZE</name></expr>)</condition> <block pos:start="29:45" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:31">

            <if_stmt pos:start="31:13" pos:end="33:31"><if pos:start="31:13" pos:end="33:31">if <condition pos:start="31:16" pos:end="31:40">(<expr pos:start="31:17" pos:end="31:39"><name pos:start="31:17" pos:end="31:20">addr</name> <operator pos:start="31:22" pos:end="31:23">!=</operator> <name pos:start="31:25" pos:end="31:39">last_ram_offset</name></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:31"><block_content pos:start="33:17" pos:end="33:31">

                <return pos:start="33:17" pos:end="33:31">return <expr pos:start="33:24" pos:end="33:30"><operator pos:start="33:24" pos:end="33:24">-</operator><name pos:start="33:25" pos:end="33:30">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="39:9" pos:end="61:9"><if pos:start="39:9" pos:end="57:9">if <condition pos:start="39:12" pos:end="39:43">(<expr pos:start="39:13" pos:end="39:42"><name pos:start="39:13" pos:end="39:17">flags</name> <operator pos:start="39:19" pos:end="39:19">&amp;</operator> <name pos:start="39:21" pos:end="39:42">RAM_SAVE_FLAG_COMPRESS</name></expr>)</condition> <block pos:start="39:45" pos:end="57:9">{<block_content pos:start="41:13" pos:end="56:0">

            <decl_stmt pos:start="41:13" pos:end="41:42"><decl pos:start="41:13" pos:end="41:41"><type pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:19">uint8_t</name></type> <name pos:start="41:21" pos:end="41:22">ch</name> <init pos:start="41:24" pos:end="41:41">= <expr pos:start="41:26" pos:end="41:41"><call pos:start="41:26" pos:end="41:41"><name pos:start="41:26" pos:end="41:38">qemu_get_byte</name><argument_list pos:start="41:39" pos:end="41:41">(<argument pos:start="41:40" pos:end="41:40"><expr pos:start="41:40" pos:end="41:40"><name pos:start="41:40" pos:end="41:40">f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="43:13" pos:end="46:0"><expr pos:start="43:13" pos:end="43:64"><call pos:start="43:13" pos:end="43:64"><name pos:start="43:13" pos:end="43:18">memset</name><argument_list pos:start="43:19" pos:end="43:64">(<argument pos:start="43:20" pos:end="43:41"><expr pos:start="43:20" pos:end="43:41"><call pos:start="43:20" pos:end="43:41"><name pos:start="43:20" pos:end="43:35">qemu_get_ram_ptr</name><argument_list pos:start="43:36" pos:end="43:41">(<argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><name pos:start="43:37" pos:end="43:40">addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:44" pos:end="43:45"><expr pos:start="43:44" pos:end="43:45"><name pos:start="43:44" pos:end="43:45">ch</name></expr></argument>, <argument pos:start="43:48" pos:end="43:63"><expr pos:start="43:48" pos:end="43:63"><name pos:start="43:48" pos:end="43:63">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="45:1" pos:end="45:14">#<cpp:directive pos:start="45:2" pos:end="45:7">ifndef</cpp:directive> <name pos:start="45:9" pos:end="45:14">_WIN32</name></cpp:ifndef>

            <if_stmt pos:start="47:13" pos:end="56:0"><if pos:start="47:13" pos:end="56:0">if <condition pos:start="47:16" pos:end="49:55">(<expr pos:start="47:17" pos:end="49:54"><name pos:start="47:17" pos:end="47:18">ch</name> <operator pos:start="47:20" pos:end="47:21">==</operator> <literal type="number" pos:start="47:23" pos:end="47:23">0</literal> <operator pos:start="47:25" pos:end="47:26">&amp;&amp;</operator>

                <operator pos:start="49:17" pos:end="49:17">(</operator><operator pos:start="49:18" pos:end="49:18">!</operator><call pos:start="49:19" pos:end="49:31"><name pos:start="49:19" pos:end="49:29">kvm_enabled</name><argument_list pos:start="49:30" pos:end="49:31">()</argument_list></call> <operator pos:start="49:33" pos:end="49:34">||</operator> <call pos:start="49:36" pos:end="49:53"><name pos:start="49:36" pos:end="49:51">kvm_has_sync_mmu</name><argument_list pos:start="49:52" pos:end="49:53">()</argument_list></call><operator pos:start="49:54" pos:end="49:54">)</operator></expr>)</condition> <block pos:start="49:57" pos:end="56:0">{<block_content pos:start="51:17" pos:end="51:81">

                <expr_stmt pos:start="51:17" pos:end="51:81"><expr pos:start="51:17" pos:end="51:80"><call pos:start="51:17" pos:end="51:80"><name pos:start="51:17" pos:end="51:23">madvise</name><argument_list pos:start="51:24" pos:end="51:80">(<argument pos:start="51:25" pos:end="51:46"><expr pos:start="51:25" pos:end="51:46"><call pos:start="51:25" pos:end="51:46"><name pos:start="51:25" pos:end="51:40">qemu_get_ram_ptr</name><argument_list pos:start="51:41" pos:end="51:46">(<argument pos:start="51:42" pos:end="51:45"><expr pos:start="51:42" pos:end="51:45"><name pos:start="51:42" pos:end="51:45">addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:49" pos:end="51:64"><expr pos:start="51:49" pos:end="51:64"><name pos:start="51:49" pos:end="51:64">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="51:67" pos:end="51:79"><expr pos:start="51:67" pos:end="51:79"><name pos:start="51:67" pos:end="51:79">MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <if type="elseif" pos:start="57:11" pos:end="61:9">else if <condition pos:start="57:19" pos:end="57:46">(<expr pos:start="57:20" pos:end="57:45"><name pos:start="57:20" pos:end="57:24">flags</name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <name pos:start="57:28" pos:end="57:45">RAM_SAVE_FLAG_PAGE</name></expr>)</condition> <block pos:start="57:48" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:73">

            <expr_stmt pos:start="59:13" pos:end="59:73"><expr pos:start="59:13" pos:end="59:72"><call pos:start="59:13" pos:end="59:72"><name pos:start="59:13" pos:end="59:27">qemu_get_buffer</name><argument_list pos:start="59:28" pos:end="59:72">(<argument pos:start="59:29" pos:end="59:29"><expr pos:start="59:29" pos:end="59:29"><name pos:start="59:29" pos:end="59:29">f</name></expr></argument>, <argument pos:start="59:32" pos:end="59:53"><expr pos:start="59:32" pos:end="59:53"><call pos:start="59:32" pos:end="59:53"><name pos:start="59:32" pos:end="59:47">qemu_get_ram_ptr</name><argument_list pos:start="59:48" pos:end="59:53">(<argument pos:start="59:49" pos:end="59:52"><expr pos:start="59:49" pos:end="59:52"><name pos:start="59:49" pos:end="59:52">addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="59:56" pos:end="59:71"><expr pos:start="59:56" pos:end="59:71"><name pos:start="59:56" pos:end="59:71">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:35">(<expr pos:start="63:13" pos:end="63:34"><call pos:start="63:13" pos:end="63:34"><name pos:start="63:13" pos:end="63:31">qemu_file_has_error</name><argument_list pos:start="63:32" pos:end="63:34">(<argument pos:start="63:33" pos:end="63:33"><expr pos:start="63:33" pos:end="63:33"><name pos:start="63:33" pos:end="63:33">f</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:37" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:24">

            <return pos:start="65:13" pos:end="65:24">return <expr pos:start="65:20" pos:end="65:23"><operator pos:start="65:20" pos:end="65:20">-</operator><name pos:start="65:21" pos:end="65:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="69:13" pos:end="69:42">(<expr pos:start="69:14" pos:end="69:41"><operator pos:start="69:14" pos:end="69:14">!</operator><operator pos:start="69:15" pos:end="69:15">(</operator><name pos:start="69:16" pos:end="69:20">flags</name> <operator pos:start="69:22" pos:end="69:22">&amp;</operator> <name pos:start="69:24" pos:end="69:40">RAM_SAVE_FLAG_EOS</name><operator pos:start="69:41" pos:end="69:41">)</operator></expr>)</condition>;</do>



    <return pos:start="73:5" pos:end="73:13">return <expr pos:start="73:12" pos:end="73:12"><literal type="number" pos:start="73:12" pos:end="73:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
