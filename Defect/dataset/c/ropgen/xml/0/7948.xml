<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7948.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">png_filter_row</name><parameter_list pos:start="1:27" pos:end="3:74">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:40">PNGDSPContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dsp</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:54">uint8_t</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">dst</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:76"><decl pos:start="1:62" pos:end="1:76"><type pos:start="1:62" pos:end="1:76"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:76">filter_type</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:34">uint8_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">src</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:48">uint8_t</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:54">last</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:64"><decl pos:start="3:57" pos:end="3:64"><type pos:start="3:57" pos:end="3:64"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:64">size</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:73"><decl pos:start="3:67" pos:end="3:73"><type pos:start="3:67" pos:end="3:73"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:73">bpp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:5">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">p</name></decl>, <decl pos:start="7:15" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:15">r</name></decl>, <decl pos:start="7:18" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:18">g</name></decl>, <decl pos:start="7:21" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:21">b</name></decl>, <decl pos:start="7:24" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:24" pos:end="7:24">a</name></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="99:5">switch <condition pos:start="11:12" pos:end="11:24">(<expr pos:start="11:13" pos:end="11:23"><name pos:start="11:13" pos:end="11:23">filter_type</name></expr>)</condition> <block pos:start="11:26" pos:end="99:5">{<block_content pos:start="13:5" pos:end="97:14">

    <case pos:start="13:5" pos:end="13:31">case <expr pos:start="13:10" pos:end="13:30"><name pos:start="13:10" pos:end="13:30">PNG_FILTER_VALUE_NONE</name></expr>:</case>

        <expr_stmt pos:start="15:9" pos:end="15:31"><expr pos:start="15:9" pos:end="15:30"><call pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:14">memcpy</name><argument_list pos:start="15:15" pos:end="15:30">(<argument pos:start="15:16" pos:end="15:18"><expr pos:start="15:16" pos:end="15:18"><name pos:start="15:16" pos:end="15:18">dst</name></expr></argument>, <argument pos:start="15:21" pos:end="15:23"><expr pos:start="15:21" pos:end="15:23"><name pos:start="15:21" pos:end="15:23">src</name></expr></argument>, <argument pos:start="15:26" pos:end="15:29"><expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="17:9" pos:end="17:14">break;</break>

    <case pos:start="19:5" pos:end="19:30">case <expr pos:start="19:10" pos:end="19:29"><name pos:start="19:10" pos:end="19:29">PNG_FILTER_VALUE_SUB</name></expr>:</case>

        <for pos:start="21:9" pos:end="23:28">for <control pos:start="21:13" pos:end="21:33">(<init pos:start="21:14" pos:end="21:19"><expr pos:start="21:14" pos:end="21:18"><name pos:start="21:14" pos:end="21:14">i</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>;</init> <condition pos:start="21:21" pos:end="21:28"><expr pos:start="21:21" pos:end="21:27"><name pos:start="21:21" pos:end="21:21">i</name> <operator pos:start="21:23" pos:end="21:23">&lt;</operator> <name pos:start="21:25" pos:end="21:27">bpp</name></expr>;</condition> <incr pos:start="21:30" pos:end="21:32"><expr pos:start="21:30" pos:end="21:32"><name pos:start="21:30" pos:end="21:30">i</name><operator pos:start="21:31" pos:end="21:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="23:13" pos:end="23:28"><block_content pos:start="23:13" pos:end="23:28">

            <expr_stmt pos:start="23:13" pos:end="23:28"><expr pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:15">dst</name><index pos:start="23:16" pos:end="23:18">[<expr pos:start="23:17" pos:end="23:17"><name pos:start="23:17" pos:end="23:17">i</name></expr>]</index></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <name pos:start="23:22" pos:end="23:27"><name pos:start="23:22" pos:end="23:24">src</name><index pos:start="23:25" pos:end="23:27">[<expr pos:start="23:26" pos:end="23:26"><name pos:start="23:26" pos:end="23:26">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="25:9" pos:end="45:9"><if pos:start="25:9" pos:end="39:9">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:15">bpp</name> <operator pos:start="25:17" pos:end="25:18">==</operator> <literal type="number" pos:start="25:20" pos:end="25:20">4</literal></expr>)</condition> <block pos:start="25:23" pos:end="39:9">{<block_content pos:start="27:13" pos:end="37:13">

            <expr_stmt pos:start="27:13" pos:end="27:28"><expr pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:13">p</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <operator pos:start="27:17" pos:end="27:17">*</operator><operator pos:start="27:18" pos:end="27:18">(</operator><name pos:start="27:19" pos:end="27:21">int</name> <operator pos:start="27:23" pos:end="27:23">*</operator><operator pos:start="27:24" pos:end="27:24">)</operator><name pos:start="27:25" pos:end="27:27">dst</name></expr>;</expr_stmt>

            <for pos:start="29:13" pos:end="37:13">for <control pos:start="29:17" pos:end="29:38">(<init pos:start="29:18" pos:end="29:18">;</init> <condition pos:start="29:20" pos:end="29:28"><expr pos:start="29:20" pos:end="29:27"><name pos:start="29:20" pos:end="29:20">i</name> <operator pos:start="29:22" pos:end="29:22">&lt;</operator> <name pos:start="29:24" pos:end="29:27">size</name></expr>;</condition> <incr pos:start="29:30" pos:end="29:37"><expr pos:start="29:30" pos:end="29:37"><name pos:start="29:30" pos:end="29:30">i</name> <operator pos:start="29:32" pos:end="29:33">+=</operator> <name pos:start="29:35" pos:end="29:37">bpp</name></expr></incr>)</control> <block pos:start="29:40" pos:end="37:13">{<block_content pos:start="31:17" pos:end="35:38">

                <decl_stmt pos:start="31:17" pos:end="31:47"><decl pos:start="31:17" pos:end="31:46"><type pos:start="31:17" pos:end="31:24"><name pos:start="31:17" pos:end="31:24">unsigned</name></type> <name pos:start="31:26" pos:end="31:26">s</name> <init pos:start="31:28" pos:end="31:46">= <expr pos:start="31:30" pos:end="31:46"><operator pos:start="31:30" pos:end="31:30">*</operator><operator pos:start="31:31" pos:end="31:31">(</operator><name pos:start="31:32" pos:end="31:34">int</name> <operator pos:start="31:36" pos:end="31:36">*</operator><operator pos:start="31:37" pos:end="31:37">)</operator><operator pos:start="31:38" pos:end="31:38">(</operator><name pos:start="31:39" pos:end="31:41">src</name> <operator pos:start="31:43" pos:end="31:43">+</operator> <name pos:start="31:45" pos:end="31:45">i</name><operator pos:start="31:46" pos:end="31:46">)</operator></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:83"><expr pos:start="33:17" pos:end="33:82"><name pos:start="33:17" pos:end="33:17">p</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <operator pos:start="33:21" pos:end="33:21">(</operator><operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:23">s</name> <operator pos:start="33:25" pos:end="33:25">&amp;</operator> <literal type="number" pos:start="33:27" pos:end="33:36">0x7f7f7f7f</literal><operator pos:start="33:37" pos:end="33:37">)</operator> <operator pos:start="33:39" pos:end="33:39">+</operator> <operator pos:start="33:41" pos:end="33:41">(</operator><name pos:start="33:42" pos:end="33:42">p</name> <operator pos:start="33:44" pos:end="33:44">&amp;</operator> <literal type="number" pos:start="33:46" pos:end="33:55">0x7f7f7f7f</literal><operator pos:start="33:56" pos:end="33:56">)</operator><operator pos:start="33:57" pos:end="33:57">)</operator> <operator pos:start="33:59" pos:end="33:59">^</operator> <operator pos:start="33:61" pos:end="33:61">(</operator><operator pos:start="33:62" pos:end="33:62">(</operator><name pos:start="33:63" pos:end="33:63">s</name> <operator pos:start="33:65" pos:end="33:65">^</operator> <name pos:start="33:67" pos:end="33:67">p</name><operator pos:start="33:68" pos:end="33:68">)</operator> <operator pos:start="33:70" pos:end="33:70">&amp;</operator> <literal type="number" pos:start="33:72" pos:end="33:81">0x80808080</literal><operator pos:start="33:82" pos:end="33:82">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="35:17" pos:end="35:38"><expr pos:start="35:17" pos:end="35:37"><operator pos:start="35:17" pos:end="35:17">*</operator><operator pos:start="35:18" pos:end="35:18">(</operator><name pos:start="35:19" pos:end="35:21">int</name> <operator pos:start="35:23" pos:end="35:23">*</operator><operator pos:start="35:24" pos:end="35:24">)</operator><operator pos:start="35:25" pos:end="35:25">(</operator><name pos:start="35:26" pos:end="35:28">dst</name> <operator pos:start="35:30" pos:end="35:30">+</operator> <name pos:start="35:32" pos:end="35:32">i</name><operator pos:start="35:33" pos:end="35:33">)</operator> <operator pos:start="35:35" pos:end="35:35">=</operator> <name pos:start="35:37" pos:end="35:37">p</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="45:9">else <block pos:start="39:16" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:34">

<cpp:define pos:start="41:1" pos:end="41:35">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:14">OP_SUB</name><parameter_list pos:start="41:15" pos:end="41:23">(<parameter pos:start="41:16" pos:end="41:16"><type pos:start="41:16" pos:end="41:16"><name pos:start="41:16" pos:end="41:16">x</name></type></parameter>, <parameter pos:start="41:19" pos:end="41:19"><type pos:start="41:19" pos:end="41:19"><name pos:start="41:19" pos:end="41:19">s</name></type></parameter>, <parameter pos:start="41:22" pos:end="41:22"><type pos:start="41:22" pos:end="41:22"><name pos:start="41:22" pos:end="41:22">l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="41:25" pos:end="41:35">((x) + (s))</cpp:value></cpp:define>

            <expr_stmt pos:start="43:13" pos:end="43:34"><expr pos:start="43:13" pos:end="43:33"><call pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:25">UNROLL_FILTER</name><argument_list pos:start="43:26" pos:end="43:33">(<argument pos:start="43:27" pos:end="43:32"><expr pos:start="43:27" pos:end="43:32"><name pos:start="43:27" pos:end="43:32">OP_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:29">case <expr pos:start="49:10" pos:end="49:28"><name pos:start="49:10" pos:end="49:28">PNG_FILTER_VALUE_UP</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:48"><expr pos:start="51:9" pos:end="51:47"><call pos:start="51:9" pos:end="51:47"><name pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:11">dsp</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:25">add_bytes_l2</name></name><argument_list pos:start="51:26" pos:end="51:47">(<argument pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><name pos:start="51:27" pos:end="51:29">dst</name></expr></argument>, <argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">src</name></expr></argument>, <argument pos:start="51:37" pos:end="51:40"><expr pos:start="51:37" pos:end="51:40"><name pos:start="51:37" pos:end="51:40">last</name></expr></argument>, <argument pos:start="51:43" pos:end="51:46"><expr pos:start="51:43" pos:end="51:46"><name pos:start="51:43" pos:end="51:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:30">case <expr pos:start="55:10" pos:end="55:29"><name pos:start="55:10" pos:end="55:29">PNG_FILTER_VALUE_AVG</name></expr>:</case>

        <for pos:start="57:9" pos:end="66:0">for <control pos:start="57:13" pos:end="57:33">(<init pos:start="57:14" pos:end="57:19"><expr pos:start="57:14" pos:end="57:18"><name pos:start="57:14" pos:end="57:14">i</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr>;</init> <condition pos:start="57:21" pos:end="57:28"><expr pos:start="57:21" pos:end="57:27"><name pos:start="57:21" pos:end="57:21">i</name> <operator pos:start="57:23" pos:end="57:23">&lt;</operator> <name pos:start="57:25" pos:end="57:27">bpp</name></expr>;</condition> <incr pos:start="57:30" pos:end="57:32"><expr pos:start="57:30" pos:end="57:32"><name pos:start="57:30" pos:end="57:30">i</name><operator pos:start="57:31" pos:end="57:32">++</operator></expr></incr>)</control> <block pos:start="57:35" pos:end="66:0">{<block_content pos:start="59:13" pos:end="61:32">

            <expr_stmt pos:start="59:13" pos:end="59:36"><expr pos:start="59:13" pos:end="59:35"><name pos:start="59:13" pos:end="59:13">p</name>      <operator pos:start="59:20" pos:end="59:20">=</operator> <operator pos:start="59:22" pos:end="59:22">(</operator><name pos:start="59:23" pos:end="59:29"><name pos:start="59:23" pos:end="59:26">last</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><name pos:start="59:28" pos:end="59:28">i</name></expr>]</index></name> <operator pos:start="59:31" pos:end="59:32">&gt;&gt;</operator> <literal type="number" pos:start="59:34" pos:end="59:34">1</literal><operator pos:start="59:35" pos:end="59:35">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:18"><name pos:start="61:13" pos:end="61:15">dst</name><index pos:start="61:16" pos:end="61:18">[<expr pos:start="61:17" pos:end="61:17"><name pos:start="61:17" pos:end="61:17">i</name></expr>]</index></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:22">p</name> <operator pos:start="61:24" pos:end="61:24">+</operator> <name pos:start="61:26" pos:end="61:31"><name pos:start="61:26" pos:end="61:28">src</name><index pos:start="61:29" pos:end="61:31">[<expr pos:start="61:30" pos:end="61:30"><name pos:start="61:30" pos:end="61:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:define pos:start="65:1" pos:end="65:59">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:14">OP_AVG</name><parameter_list pos:start="65:15" pos:end="65:23">(<parameter pos:start="65:16" pos:end="65:16"><type pos:start="65:16" pos:end="65:16"><name pos:start="65:16" pos:end="65:16">x</name></type></parameter>, <parameter pos:start="65:19" pos:end="65:19"><type pos:start="65:19" pos:end="65:19"><name pos:start="65:19" pos:end="65:19">s</name></type></parameter>, <parameter pos:start="65:22" pos:end="65:22"><type pos:start="65:22" pos:end="65:22"><name pos:start="65:22" pos:end="65:22">l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="65:25" pos:end="65:59">(((((x) + (l)) &gt;&gt; 1) + (s)) &amp; 0xff)</cpp:value></cpp:define>

        <expr_stmt pos:start="67:9" pos:end="67:30"><expr pos:start="67:9" pos:end="67:29"><call pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:21">UNROLL_FILTER</name><argument_list pos:start="67:22" pos:end="67:29">(<argument pos:start="67:23" pos:end="67:28"><expr pos:start="67:23" pos:end="67:28"><name pos:start="67:23" pos:end="67:28">OP_AVG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:32">case <expr pos:start="71:10" pos:end="71:31"><name pos:start="71:10" pos:end="71:31">PNG_FILTER_VALUE_PAETH</name></expr>:</case>

        <for pos:start="73:9" pos:end="79:9">for <control pos:start="73:13" pos:end="73:33">(<init pos:start="73:14" pos:end="73:19"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:14">i</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr>;</init> <condition pos:start="73:21" pos:end="73:28"><expr pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:21">i</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:27">bpp</name></expr>;</condition> <incr pos:start="73:30" pos:end="73:32"><expr pos:start="73:30" pos:end="73:32"><name pos:start="73:30" pos:end="73:30">i</name><operator pos:start="73:31" pos:end="73:32">++</operator></expr></incr>)</control> <block pos:start="73:35" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:32">

            <expr_stmt pos:start="75:13" pos:end="75:29"><expr pos:start="75:13" pos:end="75:28"><name pos:start="75:13" pos:end="75:13">p</name>      <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:28"><name pos:start="75:22" pos:end="75:25">last</name><index pos:start="75:26" pos:end="75:28">[<expr pos:start="75:27" pos:end="75:27"><name pos:start="75:27" pos:end="75:27">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:32"><expr pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:15">dst</name><index pos:start="77:16" pos:end="77:18">[<expr pos:start="77:17" pos:end="77:17"><name pos:start="77:17" pos:end="77:17">i</name></expr>]</index></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:22">p</name> <operator pos:start="77:24" pos:end="77:24">+</operator> <name pos:start="77:26" pos:end="77:31"><name pos:start="77:26" pos:end="77:28">src</name><index pos:start="77:29" pos:end="77:31">[<expr pos:start="77:30" pos:end="77:30"><name pos:start="77:30" pos:end="77:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="81:9" pos:end="93:9"><if pos:start="81:9" pos:end="93:9">if <condition pos:start="81:12" pos:end="81:32">(<expr pos:start="81:13" pos:end="81:31"><name pos:start="81:13" pos:end="81:15">bpp</name> <operator pos:start="81:17" pos:end="81:17">&gt;</operator> <literal type="number" pos:start="81:19" pos:end="81:19">2</literal> <operator pos:start="81:21" pos:end="81:22">&amp;&amp;</operator> <name pos:start="81:24" pos:end="81:27">size</name> <operator pos:start="81:29" pos:end="81:29">&gt;</operator> <literal type="number" pos:start="81:31" pos:end="81:31">4</literal></expr>)</condition> <block pos:start="81:34" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:18">

            <comment type="block" pos:start="83:13" pos:end="85:43">/* would write off the end of the array if we let it process

             * the last pixel with bpp=3 */</comment>

            <decl_stmt pos:start="87:13" pos:end="87:47"><decl pos:start="87:13" pos:end="87:46"><type pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">int</name></type> <name pos:start="87:17" pos:end="87:17">w</name> <init pos:start="87:19" pos:end="87:46">= <expr pos:start="87:21" pos:end="87:46"><ternary pos:start="87:21" pos:end="87:46"><condition pos:start="87:21" pos:end="87:30"><expr pos:start="87:21" pos:end="87:28"><name pos:start="87:21" pos:end="87:23">bpp</name> <operator pos:start="87:25" pos:end="87:26">==</operator> <literal type="number" pos:start="87:28" pos:end="87:28">4</literal></expr> ?</condition><then pos:start="87:32" pos:end="87:35"> <expr pos:start="87:32" pos:end="87:35"><name pos:start="87:32" pos:end="87:35">size</name></expr> </then><else pos:start="87:37" pos:end="87:46">: <expr pos:start="87:39" pos:end="87:46"><name pos:start="87:39" pos:end="87:42">size</name> <operator pos:start="87:44" pos:end="87:44">-</operator> <literal type="number" pos:start="87:46" pos:end="87:46">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:78"><expr pos:start="89:13" pos:end="89:77"><call pos:start="89:13" pos:end="89:77"><name pos:start="89:13" pos:end="89:37"><name pos:start="89:13" pos:end="89:15">dsp</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:37">add_paeth_prediction</name></name><argument_list pos:start="89:38" pos:end="89:77">(<argument pos:start="89:39" pos:end="89:45"><expr pos:start="89:39" pos:end="89:45"><name pos:start="89:39" pos:end="89:41">dst</name> <operator pos:start="89:43" pos:end="89:43">+</operator> <name pos:start="89:45" pos:end="89:45">i</name></expr></argument>, <argument pos:start="89:48" pos:end="89:54"><expr pos:start="89:48" pos:end="89:54"><name pos:start="89:48" pos:end="89:50">src</name> <operator pos:start="89:52" pos:end="89:52">+</operator> <name pos:start="89:54" pos:end="89:54">i</name></expr></argument>, <argument pos:start="89:57" pos:end="89:64"><expr pos:start="89:57" pos:end="89:64"><name pos:start="89:57" pos:end="89:60">last</name> <operator pos:start="89:62" pos:end="89:62">+</operator> <name pos:start="89:64" pos:end="89:64">i</name></expr></argument>, <argument pos:start="89:67" pos:end="89:71"><expr pos:start="89:67" pos:end="89:71"><name pos:start="89:67" pos:end="89:67">w</name> <operator pos:start="89:69" pos:end="89:69">-</operator> <name pos:start="89:71" pos:end="89:71">i</name></expr></argument>, <argument pos:start="89:74" pos:end="89:76"><expr pos:start="89:74" pos:end="89:76"><name pos:start="89:74" pos:end="89:76">bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:18"><expr pos:start="91:13" pos:end="91:17"><name pos:start="91:13" pos:end="91:13">i</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <name pos:start="91:17" pos:end="91:17">w</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:79"><expr pos:start="95:9" pos:end="95:78"><call pos:start="95:9" pos:end="95:78"><name pos:start="95:9" pos:end="95:35">ff_add_png_paeth_prediction</name><argument_list pos:start="95:36" pos:end="95:78">(<argument pos:start="95:37" pos:end="95:43"><expr pos:start="95:37" pos:end="95:43"><name pos:start="95:37" pos:end="95:39">dst</name> <operator pos:start="95:41" pos:end="95:41">+</operator> <name pos:start="95:43" pos:end="95:43">i</name></expr></argument>, <argument pos:start="95:46" pos:end="95:52"><expr pos:start="95:46" pos:end="95:52"><name pos:start="95:46" pos:end="95:48">src</name> <operator pos:start="95:50" pos:end="95:50">+</operator> <name pos:start="95:52" pos:end="95:52">i</name></expr></argument>, <argument pos:start="95:55" pos:end="95:62"><expr pos:start="95:55" pos:end="95:62"><name pos:start="95:55" pos:end="95:58">last</name> <operator pos:start="95:60" pos:end="95:60">+</operator> <name pos:start="95:62" pos:end="95:62">i</name></expr></argument>, <argument pos:start="95:65" pos:end="95:72"><expr pos:start="95:65" pos:end="95:72"><name pos:start="95:65" pos:end="95:68">size</name> <operator pos:start="95:70" pos:end="95:70">-</operator> <name pos:start="95:72" pos:end="95:72">i</name></expr></argument>, <argument pos:start="95:75" pos:end="95:77"><expr pos:start="95:75" pos:end="95:77"><name pos:start="95:75" pos:end="95:77">bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
