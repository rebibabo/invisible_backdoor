<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7014.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:44">test_visitor_in_native_list_bool</name><parameter_list pos:start="1:45" pos:end="3:63">(<parameter pos:start="1:46" pos:end="1:71"><decl pos:start="1:46" pos:end="1:71"><type pos:start="1:46" pos:end="1:71"><name pos:start="1:46" pos:end="1:65">TestInputVisitorData</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:71">data</name></decl></parameter>,

                                            <parameter pos:start="3:45" pos:end="3:62"><decl pos:start="3:45" pos:end="3:62"><type pos:start="3:45" pos:end="3:62"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:54">void</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:62">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="65:1">{<block_content pos:start="7:5" pos:end="63:45">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26">UserDefNativeListUnion</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:34">cvalue</name> <init pos:start="7:36" pos:end="7:41">= <expr pos:start="7:38" pos:end="7:41"><name pos:start="7:38" pos:end="7:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">boolList</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">elem</name> <init pos:start="9:20" pos:end="9:25">= <expr pos:start="9:22" pos:end="9:25"><name pos:start="9:22" pos:end="9:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">Visitor</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:14">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">GString</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">gstr_list</name> <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><call pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:37">g_string_new</name><argument_list pos:start="13:38" pos:end="13:41">(<argument pos:start="13:39" pos:end="13:40"><expr pos:start="13:39" pos:end="13:40"><literal type="string" pos:start="13:39" pos:end="13:40">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">GString</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:23">gstr_union</name> <init pos:start="15:25" pos:end="15:42">= <expr pos:start="15:27" pos:end="15:42"><call pos:start="15:27" pos:end="15:42"><name pos:start="15:27" pos:end="15:38">g_string_new</name><argument_list pos:start="15:39" pos:end="15:42">(<argument pos:start="15:40" pos:end="15:41"><expr pos:start="15:40" pos:end="15:41"><literal type="string" pos:start="15:40" pos:end="15:41">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <for pos:start="21:5" pos:end="33:5">for <control pos:start="21:9" pos:end="21:28">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:23"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:17">i</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <literal type="number" pos:start="21:21" pos:end="21:22">32</literal></expr>;</condition> <incr pos:start="21:25" pos:end="21:27"><expr pos:start="21:25" pos:end="21:27"><name pos:start="21:25" pos:end="21:25">i</name><operator pos:start="21:26" pos:end="21:27">++</operator></expr></incr>)</control> <block pos:start="21:30" pos:end="33:5">{<block_content pos:start="23:9" pos:end="31:9">

        <expr_stmt pos:start="23:9" pos:end="25:64"><expr pos:start="23:9" pos:end="25:63"><call pos:start="23:9" pos:end="25:63"><name pos:start="23:9" pos:end="23:30">g_string_append_printf</name><argument_list pos:start="23:31" pos:end="25:63">(<argument pos:start="23:32" pos:end="23:40"><expr pos:start="23:32" pos:end="23:40"><name pos:start="23:32" pos:end="23:40">gstr_list</name></expr></argument>, <argument pos:start="23:43" pos:end="23:46"><expr pos:start="23:43" pos:end="23:46"><literal type="string" pos:start="23:43" pos:end="23:46">"%s"</literal></expr></argument>,

                               <argument pos:start="25:32" pos:end="25:62"><expr pos:start="25:32" pos:end="25:62"><ternary pos:start="25:32" pos:end="25:62"><condition pos:start="25:32" pos:end="25:45"><expr pos:start="25:32" pos:end="25:43"><operator pos:start="25:32" pos:end="25:32">(</operator><name pos:start="25:33" pos:end="25:33">i</name> <operator pos:start="25:35" pos:end="25:35">%</operator> <literal type="number" pos:start="25:37" pos:end="25:37">3</literal> <operator pos:start="25:39" pos:end="25:40">==</operator> <literal type="number" pos:start="25:42" pos:end="25:42">0</literal><operator pos:start="25:43" pos:end="25:43">)</operator></expr> ?</condition><then pos:start="25:47" pos:end="25:52"> <expr pos:start="25:47" pos:end="25:52"><literal type="string" pos:start="25:47" pos:end="25:52">"true"</literal></expr> </then><else pos:start="25:54" pos:end="25:62">: <expr pos:start="25:56" pos:end="25:62"><literal type="string" pos:start="25:56" pos:end="25:62">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:13">i</name> <operator pos:start="27:15" pos:end="27:16">!=</operator> <literal type="number" pos:start="27:18" pos:end="27:19">31</literal></expr>)</condition> <block pos:start="27:22" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:45">

            <expr_stmt pos:start="29:13" pos:end="29:45"><expr pos:start="29:13" pos:end="29:44"><call pos:start="29:13" pos:end="29:44"><name pos:start="29:13" pos:end="29:27">g_string_append</name><argument_list pos:start="29:28" pos:end="29:44">(<argument pos:start="29:29" pos:end="29:37"><expr pos:start="29:29" pos:end="29:37"><name pos:start="29:29" pos:end="29:37">gstr_list</name></expr></argument>, <argument pos:start="29:40" pos:end="29:43"><expr pos:start="29:40" pos:end="29:43"><literal type="string" pos:start="29:40" pos:end="29:43">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="35:5" pos:end="37:43"><expr pos:start="35:5" pos:end="37:42"><call pos:start="35:5" pos:end="37:42"><name pos:start="35:5" pos:end="35:26">g_string_append_printf</name><argument_list pos:start="35:27" pos:end="37:42">(<argument pos:start="35:28" pos:end="35:37"><expr pos:start="35:28" pos:end="35:37"><name pos:start="35:28" pos:end="35:37">gstr_union</name></expr></argument>,  <argument pos:start="35:41" pos:end="35:79"><expr pos:start="35:41" pos:end="35:79"><literal type="string" pos:start="35:41" pos:end="35:79">"{ 'type': 'boolean', 'data': [ %s ] }"</literal></expr></argument>,

                           <argument pos:start="37:28" pos:end="37:41"><expr pos:start="37:28" pos:end="37:41"><name pos:start="37:28" pos:end="37:41"><name pos:start="37:28" pos:end="37:36">gstr_list</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:41">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:60"><expr pos:start="39:5" pos:end="39:59"><name pos:start="39:5" pos:end="39:5">v</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <call pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:35">visitor_input_test_init_raw</name><argument_list pos:start="39:36" pos:end="39:59">(<argument pos:start="39:37" pos:end="39:40"><expr pos:start="39:37" pos:end="39:40"><name pos:start="39:37" pos:end="39:40">data</name></expr></argument>,  <argument pos:start="39:44" pos:end="39:58"><expr pos:start="39:44" pos:end="39:58"><name pos:start="39:44" pos:end="39:58"><name pos:start="39:44" pos:end="39:53">gstr_union</name><operator pos:start="39:54" pos:end="39:55">-&gt;</operator><name pos:start="39:56" pos:end="39:58">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:70"><expr pos:start="43:5" pos:end="43:69"><call pos:start="43:5" pos:end="43:69"><name pos:start="43:5" pos:end="43:37">visit_type_UserDefNativeListUnion</name><argument_list pos:start="43:38" pos:end="43:69">(<argument pos:start="43:39" pos:end="43:39"><expr pos:start="43:39" pos:end="43:39"><name pos:start="43:39" pos:end="43:39">v</name></expr></argument>, <argument pos:start="43:42" pos:end="43:45"><expr pos:start="43:42" pos:end="43:45"><name pos:start="43:42" pos:end="43:45">NULL</name></expr></argument>, <argument pos:start="43:48" pos:end="43:54"><expr pos:start="43:48" pos:end="43:54"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:54">cvalue</name></expr></argument>, <argument pos:start="43:57" pos:end="43:68"><expr pos:start="43:57" pos:end="43:68"><operator pos:start="43:57" pos:end="43:57">&amp;</operator><name pos:start="43:58" pos:end="43:68">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><call pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:12">g_assert</name><argument_list pos:start="45:13" pos:end="45:28">(<argument pos:start="45:14" pos:end="45:27"><expr pos:start="45:14" pos:end="45:27"><name pos:start="45:14" pos:end="45:19">cvalue</name> <operator pos:start="45:21" pos:end="45:22">!=</operator> <name pos:start="45:24" pos:end="45:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:79"><expr pos:start="47:5" pos:end="47:78"><call pos:start="47:5" pos:end="47:78"><name pos:start="47:5" pos:end="47:19">g_assert_cmpint</name><argument_list pos:start="47:20" pos:end="47:78">(<argument pos:start="47:21" pos:end="47:32"><expr pos:start="47:21" pos:end="47:32"><name pos:start="47:21" pos:end="47:32"><name pos:start="47:21" pos:end="47:26">cvalue</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:32">type</name></name></expr></argument>, <argument pos:start="47:35" pos:end="47:36"><expr pos:start="47:35" pos:end="47:36"><operator pos:start="47:35" pos:end="47:36">==</operator></expr></argument>, <argument pos:start="47:39" pos:end="47:77"><expr pos:start="47:39" pos:end="47:77"><name pos:start="47:39" pos:end="47:77">USER_DEF_NATIVE_LIST_UNION_KIND_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="51:5" pos:end="55:5">for <control pos:start="51:9" pos:end="51:76">(<init pos:start="51:10" pos:end="51:46"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr><operator pos:start="51:15" pos:end="51:15">,</operator> <expr pos:start="51:17" pos:end="51:45"><name pos:start="51:17" pos:end="51:20">elem</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:45"><name pos:start="51:24" pos:end="51:29">cvalue</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:32">u</name><operator pos:start="51:33" pos:end="51:33">.</operator><name pos:start="51:34" pos:end="51:40">boolean</name><operator pos:start="51:41" pos:end="51:41">.</operator><name pos:start="51:42" pos:end="51:45">data</name></name></expr>;</init> <condition pos:start="51:48" pos:end="51:52"><expr pos:start="51:48" pos:end="51:51"><name pos:start="51:48" pos:end="51:51">elem</name></expr>;</condition> <incr pos:start="51:54" pos:end="51:75"><expr pos:start="51:54" pos:end="51:70"><name pos:start="51:54" pos:end="51:57">elem</name> <operator pos:start="51:59" pos:end="51:59">=</operator> <name pos:start="51:61" pos:end="51:70"><name pos:start="51:61" pos:end="51:64">elem</name><operator pos:start="51:65" pos:end="51:66">-&gt;</operator><name pos:start="51:67" pos:end="51:70">next</name></name></expr><operator pos:start="51:71" pos:end="51:71">,</operator> <expr pos:start="51:73" pos:end="51:75"><name pos:start="51:73" pos:end="51:73">i</name><operator pos:start="51:74" pos:end="51:75">++</operator></expr></incr>)</control> <block pos:start="51:78" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:63">

        <expr_stmt pos:start="53:9" pos:end="53:63"><expr pos:start="53:9" pos:end="53:62"><call pos:start="53:9" pos:end="53:62"><name pos:start="53:9" pos:end="53:23">g_assert_cmpint</name><argument_list pos:start="53:24" pos:end="53:62">(<argument pos:start="53:25" pos:end="53:35"><expr pos:start="53:25" pos:end="53:35"><name pos:start="53:25" pos:end="53:35"><name pos:start="53:25" pos:end="53:28">elem</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:35">value</name></name></expr></argument>, <argument pos:start="53:38" pos:end="53:39"><expr pos:start="53:38" pos:end="53:39"><operator pos:start="53:38" pos:end="53:39">==</operator></expr></argument>, <argument pos:start="53:42" pos:end="53:61"><expr pos:start="53:42" pos:end="53:61"><ternary pos:start="53:42" pos:end="53:61"><condition pos:start="53:42" pos:end="53:55"><expr pos:start="53:42" pos:end="53:53"><operator pos:start="53:42" pos:end="53:42">(</operator><name pos:start="53:43" pos:end="53:43">i</name> <operator pos:start="53:45" pos:end="53:45">%</operator> <literal type="number" pos:start="53:47" pos:end="53:47">3</literal> <operator pos:start="53:49" pos:end="53:50">==</operator> <literal type="number" pos:start="53:52" pos:end="53:52">0</literal><operator pos:start="53:53" pos:end="53:53">)</operator></expr> ?</condition><then pos:start="53:57" pos:end="53:57"> <expr pos:start="53:57" pos:end="53:57"><literal type="number" pos:start="53:57" pos:end="53:57">1</literal></expr> </then><else pos:start="53:59" pos:end="53:61">: <expr pos:start="53:61" pos:end="53:61"><literal type="number" pos:start="53:61" pos:end="53:61">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="59:5" pos:end="59:36"><expr pos:start="59:5" pos:end="59:35"><call pos:start="59:5" pos:end="59:35"><name pos:start="59:5" pos:end="59:17">g_string_free</name><argument_list pos:start="59:18" pos:end="59:35">(<argument pos:start="59:19" pos:end="59:28"><expr pos:start="59:19" pos:end="59:28"><name pos:start="59:19" pos:end="59:28">gstr_union</name></expr></argument>, <argument pos:start="59:31" pos:end="59:34"><expr pos:start="59:31" pos:end="59:34"><name pos:start="59:31" pos:end="59:34">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><call pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:17">g_string_free</name><argument_list pos:start="61:18" pos:end="61:34">(<argument pos:start="61:19" pos:end="61:27"><expr pos:start="61:19" pos:end="61:27"><name pos:start="61:19" pos:end="61:27">gstr_list</name></expr></argument>, <argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:45"><expr pos:start="63:5" pos:end="63:44"><call pos:start="63:5" pos:end="63:44"><name pos:start="63:5" pos:end="63:36">qapi_free_UserDefNativeListUnion</name><argument_list pos:start="63:37" pos:end="63:44">(<argument pos:start="63:38" pos:end="63:43"><expr pos:start="63:38" pos:end="63:43"><name pos:start="63:38" pos:end="63:43">cvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
