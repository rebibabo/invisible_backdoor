<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4923.c" pos:tabs="8"><function pos:start="1:1" pos:end="439:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:7">av_cold</name> <specifier pos:start="1:9" pos:end="1:14">static</specifier> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:36">lavfi_read_header</name><parameter_list pos:start="1:37" pos:end="1:60">(<parameter pos:start="1:38" pos:end="1:59"><decl pos:start="1:38" pos:end="1:59"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:52">AVFormatContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="439:1">{<block_content pos:start="5:5" pos:end="437:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">LavfiContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:23">lavfi</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:68"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">AVFilterInOut</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:30">input_links</name> <init pos:start="7:32" pos:end="7:37">= <expr pos:start="7:34" pos:end="7:37"><name pos:start="7:34" pos:end="7:37">NULL</name></expr></init></decl>, <decl pos:start="7:40" pos:end="7:59"><type ref="prev" pos:start="7:5" pos:end="7:19"><modifier pos:start="7:40" pos:end="7:40">*</modifier></type><name pos:start="7:41" pos:end="7:52">output_links</name> <init pos:start="7:54" pos:end="7:59">= <expr pos:start="7:56" pos:end="7:59"><name pos:start="7:56" pos:end="7:59">NULL</name></expr></init></decl>, <decl pos:start="7:62" pos:end="7:67"><type ref="prev" pos:start="7:5" pos:end="7:19"><modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:67">inout</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVFilter</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:24">buffersink</name></decl>, <decl pos:start="9:27" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:38">abuffersink</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">int</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:17">pix_fmts</name> <init pos:start="11:19" pos:end="11:53">= <expr pos:start="11:21" pos:end="11:53"><call pos:start="11:21" pos:end="11:53"><name pos:start="11:21" pos:end="11:38">create_all_formats</name><argument_list pos:start="11:39" pos:end="11:53">(<argument pos:start="11:40" pos:end="11:52"><expr pos:start="11:40" pos:end="11:52"><name pos:start="11:40" pos:end="11:52">AV_PIX_FMT_NB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:8">enum</name> <name pos:start="13:10" pos:end="13:20">AVMediaType</name></name></type> <name pos:start="13:22" pos:end="13:25">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name> <init pos:start="15:13" pos:end="15:15">= <expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr></init></decl>, <decl pos:start="15:18" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:18">i</name></decl>, <decl pos:start="15:21" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:21">n</name></decl>;</decl_stmt>



<cpp:define pos:start="19:1" pos:end="19:42">#<cpp:directive pos:start="19:2" pos:end="19:7">define</cpp:directive> <cpp:macro pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:12">FAIL</name><parameter_list pos:start="19:13" pos:end="19:17">(<parameter pos:start="19:14" pos:end="19:16"><type pos:start="19:14" pos:end="19:16"><name pos:start="19:14" pos:end="19:16">ERR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="19:19" pos:end="19:42">{ ret = ERR; goto end; }</cpp:value></cpp:define>



    <if_stmt pos:start="23:5" pos:end="25:30"><if pos:start="23:5" pos:end="25:30">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:17">pix_fmts</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:30"><block_content pos:start="25:9" pos:end="25:30">

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:12">FAIL</name><argument_list pos:start="25:13" pos:end="25:29">(<argument pos:start="25:14" pos:end="25:28"><expr pos:start="25:14" pos:end="25:28"><call pos:start="25:14" pos:end="25:28"><name pos:start="25:14" pos:end="25:20">AVERROR</name><argument_list pos:start="25:21" pos:end="25:28">(<argument pos:start="25:22" pos:end="25:27"><expr pos:start="25:22" pos:end="25:27"><name pos:start="25:22" pos:end="25:27">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><call pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:25">avfilter_register_all</name><argument_list pos:start="29:26" pos:end="29:27">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:52"><expr pos:start="33:5" pos:end="33:51"><name pos:start="33:5" pos:end="33:14">buffersink</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:51"><name pos:start="33:18" pos:end="33:37">avfilter_get_by_name</name><argument_list pos:start="33:38" pos:end="33:51">(<argument pos:start="33:39" pos:end="33:50"><expr pos:start="33:39" pos:end="33:50"><literal type="string" pos:start="33:39" pos:end="33:50">"buffersink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:54"><expr pos:start="35:5" pos:end="35:53"><name pos:start="35:5" pos:end="35:15">abuffersink</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:53"><name pos:start="35:19" pos:end="35:38">avfilter_get_by_name</name><argument_list pos:start="35:39" pos:end="35:53">(<argument pos:start="35:40" pos:end="35:52"><expr pos:start="35:40" pos:end="35:52"><literal type="string" pos:start="35:40" pos:end="35:52">"abuffersink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:50">(<expr pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:13">lavfi</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:29">graph_filename</name></name> <operator pos:start="39:31" pos:end="39:32">&amp;&amp;</operator> <name pos:start="39:34" pos:end="39:49"><name pos:start="39:34" pos:end="39:38">lavfi</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:49">graph_str</name></name></expr>)</condition> <block pos:start="39:52" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:30">

        <expr_stmt pos:start="41:9" pos:end="43:82"><expr pos:start="41:9" pos:end="43:81"><call pos:start="41:9" pos:end="43:81"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="43:81">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="43:16" pos:end="43:80"><expr pos:start="43:16" pos:end="43:80"><literal type="string" pos:start="43:16" pos:end="43:80">"Only one of the graph or graph_file options must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><call pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:12">FAIL</name><argument_list pos:start="45:13" pos:end="45:29">(<argument pos:start="45:14" pos:end="45:28"><expr pos:start="45:14" pos:end="45:28"><call pos:start="45:14" pos:end="45:28"><name pos:start="45:14" pos:end="45:20">AVERROR</name><argument_list pos:start="45:21" pos:end="45:28">(<argument pos:start="45:22" pos:end="45:27"><expr pos:start="45:22" pos:end="45:27"><name pos:start="45:22" pos:end="45:27">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="87:5"><if pos:start="51:5" pos:end="87:5">if <condition pos:start="51:8" pos:end="51:30">(<expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:13">lavfi</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:29">graph_filename</name></name></expr>)</condition> <block pos:start="51:32" pos:end="87:5">{<block_content pos:start="53:9" pos:end="85:37">

        <decl_stmt pos:start="53:9" pos:end="53:38"><decl pos:start="53:9" pos:end="53:25"><type pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:15">uint8_t</name> <modifier pos:start="53:17" pos:end="53:17">*</modifier></type><name pos:start="53:18" pos:end="53:25">file_buf</name></decl>, <decl pos:start="53:28" pos:end="53:37"><type ref="prev" pos:start="53:9" pos:end="53:17"><modifier pos:start="53:28" pos:end="53:28">*</modifier></type><name pos:start="53:29" pos:end="53:37">graph_buf</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:28"><decl pos:start="55:9" pos:end="55:27"><type pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:14">size_t</name></type> <name pos:start="55:16" pos:end="55:27">file_bufsize</name></decl>;</decl_stmt>

        <expr_stmt pos:start="57:9" pos:end="59:62"><expr pos:start="57:9" pos:end="59:61"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="59:61"><name pos:start="57:15" pos:end="57:25">av_file_map</name><argument_list pos:start="57:26" pos:end="59:61">(<argument pos:start="57:27" pos:end="57:47"><expr pos:start="57:27" pos:end="57:47"><name pos:start="57:27" pos:end="57:47"><name pos:start="57:27" pos:end="57:31">lavfi</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:47">graph_filename</name></name></expr></argument>,

                          <argument pos:start="59:27" pos:end="59:35"><expr pos:start="59:27" pos:end="59:35"><operator pos:start="59:27" pos:end="59:27">&amp;</operator><name pos:start="59:28" pos:end="59:35">file_buf</name></expr></argument>, <argument pos:start="59:38" pos:end="59:50"><expr pos:start="59:38" pos:end="59:50"><operator pos:start="59:38" pos:end="59:38">&amp;</operator><name pos:start="59:39" pos:end="59:50">file_bufsize</name></expr></argument>, <argument pos:start="59:53" pos:end="59:53"><expr pos:start="59:53" pos:end="59:53"><literal type="number" pos:start="59:53" pos:end="59:53">0</literal></expr></argument>, <argument pos:start="59:56" pos:end="59:60"><expr pos:start="59:56" pos:end="59:60"><name pos:start="59:56" pos:end="59:60">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="63:21"><if pos:start="61:9" pos:end="63:21">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:21"><block_content pos:start="63:13" pos:end="63:21">

            <goto pos:start="63:13" pos:end="63:21">goto <name pos:start="63:18" pos:end="63:20">end</name>;</goto></block_content></block></if></if_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:65">/* create a 0-terminated string based on the read file */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:48"><expr pos:start="69:9" pos:end="69:47"><name pos:start="69:9" pos:end="69:17">graph_buf</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <call pos:start="69:21" pos:end="69:47"><name pos:start="69:21" pos:end="69:29">av_malloc</name><argument_list pos:start="69:30" pos:end="69:47">(<argument pos:start="69:31" pos:end="69:46"><expr pos:start="69:31" pos:end="69:46"><name pos:start="69:31" pos:end="69:42">file_bufsize</name> <operator pos:start="69:44" pos:end="69:44">+</operator> <literal type="number" pos:start="69:46" pos:end="69:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:23">(<expr pos:start="71:13" pos:end="71:22"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:22">graph_buf</name></expr>)</condition> <block pos:start="71:25" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:34">

            <expr_stmt pos:start="73:13" pos:end="73:50"><expr pos:start="73:13" pos:end="73:49"><call pos:start="73:13" pos:end="73:49"><name pos:start="73:13" pos:end="73:25">av_file_unmap</name><argument_list pos:start="73:26" pos:end="73:49">(<argument pos:start="73:27" pos:end="73:34"><expr pos:start="73:27" pos:end="73:34"><name pos:start="73:27" pos:end="73:34">file_buf</name></expr></argument>, <argument pos:start="73:37" pos:end="73:48"><expr pos:start="73:37" pos:end="73:48"><name pos:start="73:37" pos:end="73:48">file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:34"><expr pos:start="75:13" pos:end="75:33"><call pos:start="75:13" pos:end="75:33"><name pos:start="75:13" pos:end="75:16">FAIL</name><argument_list pos:start="75:17" pos:end="75:33">(<argument pos:start="75:18" pos:end="75:32"><expr pos:start="75:18" pos:end="75:32"><call pos:start="75:18" pos:end="75:32"><name pos:start="75:18" pos:end="75:24">AVERROR</name><argument_list pos:start="75:25" pos:end="75:32">(<argument pos:start="75:26" pos:end="75:31"><expr pos:start="75:26" pos:end="75:31"><name pos:start="75:26" pos:end="75:31">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:50"><expr pos:start="79:9" pos:end="79:49"><call pos:start="79:9" pos:end="79:49"><name pos:start="79:9" pos:end="79:14">memcpy</name><argument_list pos:start="79:15" pos:end="79:49">(<argument pos:start="79:16" pos:end="79:24"><expr pos:start="79:16" pos:end="79:24"><name pos:start="79:16" pos:end="79:24">graph_buf</name></expr></argument>, <argument pos:start="79:27" pos:end="79:34"><expr pos:start="79:27" pos:end="79:34"><name pos:start="79:27" pos:end="79:34">file_buf</name></expr></argument>, <argument pos:start="79:37" pos:end="79:48"><expr pos:start="79:37" pos:end="79:48"><name pos:start="79:37" pos:end="79:48">file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:36"><expr pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:17">graph_buf</name><index pos:start="81:18" pos:end="81:31">[<expr pos:start="81:19" pos:end="81:30"><name pos:start="81:19" pos:end="81:30">file_bufsize</name></expr>]</index></name> <operator pos:start="81:33" pos:end="81:33">=</operator> <literal type="number" pos:start="81:35" pos:end="81:35">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:46"><expr pos:start="83:9" pos:end="83:45"><call pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:21">av_file_unmap</name><argument_list pos:start="83:22" pos:end="83:45">(<argument pos:start="83:23" pos:end="83:30"><expr pos:start="83:23" pos:end="83:30"><name pos:start="83:23" pos:end="83:30">file_buf</name></expr></argument>, <argument pos:start="83:33" pos:end="83:44"><expr pos:start="83:33" pos:end="83:44"><name pos:start="83:33" pos:end="83:44">file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:13">lavfi</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:24">graph_str</name></name> <operator pos:start="85:26" pos:end="85:26">=</operator> <name pos:start="85:28" pos:end="85:36">graph_buf</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="93:54"><if pos:start="91:5" pos:end="93:54">if <condition pos:start="91:8" pos:end="91:26">(<expr pos:start="91:9" pos:end="91:25"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:25"><name pos:start="91:10" pos:end="91:14">lavfi</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:25">graph_str</name></name></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:54"><block_content pos:start="93:9" pos:end="93:54">

        <expr_stmt pos:start="93:9" pos:end="93:54"><expr pos:start="93:9" pos:end="93:53"><name pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:13">lavfi</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:24">graph_str</name></name> <operator pos:start="93:26" pos:end="93:26">=</operator> <call pos:start="93:28" pos:end="93:53"><name pos:start="93:28" pos:end="93:36">av_strdup</name><argument_list pos:start="93:37" pos:end="93:53">(<argument pos:start="93:38" pos:end="93:52"><expr pos:start="93:38" pos:end="93:52"><name pos:start="93:38" pos:end="93:52"><name pos:start="93:38" pos:end="93:42">avctx</name><operator pos:start="93:43" pos:end="93:44">-&gt;</operator><name pos:start="93:45" pos:end="93:52">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:63">/* parse the graph, create a stream for each open output */</comment>

    <if_stmt pos:start="99:5" pos:end="101:30"><if pos:start="99:5" pos:end="101:30">if <condition pos:start="99:8" pos:end="99:49">(<expr pos:start="99:9" pos:end="99:48"><operator pos:start="99:9" pos:end="99:9">!</operator><operator pos:start="99:10" pos:end="99:10">(</operator><name pos:start="99:11" pos:end="99:22"><name pos:start="99:11" pos:end="99:15">lavfi</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:22">graph</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <call pos:start="99:26" pos:end="99:47"><name pos:start="99:26" pos:end="99:45">avfilter_graph_alloc</name><argument_list pos:start="99:46" pos:end="99:47">()</argument_list></call><operator pos:start="99:48" pos:end="99:48">)</operator></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:30"><block_content pos:start="101:9" pos:end="101:30">

        <expr_stmt pos:start="101:9" pos:end="101:30"><expr pos:start="101:9" pos:end="101:29"><call pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:12">FAIL</name><argument_list pos:start="101:13" pos:end="101:29">(<argument pos:start="101:14" pos:end="101:28"><expr pos:start="101:14" pos:end="101:28"><call pos:start="101:14" pos:end="101:28"><name pos:start="101:14" pos:end="101:20">AVERROR</name><argument_list pos:start="101:21" pos:end="101:28">(<argument pos:start="101:22" pos:end="101:27"><expr pos:start="101:22" pos:end="101:27"><name pos:start="101:22" pos:end="101:27">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="109:18"><if pos:start="105:5" pos:end="109:18">if <condition pos:start="105:8" pos:end="107:77">(<expr pos:start="105:9" pos:end="107:76"><operator pos:start="105:9" pos:end="105:9">(</operator><name pos:start="105:10" pos:end="105:12">ret</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="107:71"><name pos:start="105:16" pos:end="105:35">avfilter_graph_parse</name><argument_list pos:start="105:36" pos:end="107:71">(<argument pos:start="105:37" pos:end="105:48"><expr pos:start="105:37" pos:end="105:48"><name pos:start="105:37" pos:end="105:48"><name pos:start="105:37" pos:end="105:41">lavfi</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:48">graph</name></name></expr></argument>, <argument pos:start="105:51" pos:end="105:66"><expr pos:start="105:51" pos:end="105:66"><name pos:start="105:51" pos:end="105:66"><name pos:start="105:51" pos:end="105:55">lavfi</name><operator pos:start="105:56" pos:end="105:57">-&gt;</operator><name pos:start="105:58" pos:end="105:66">graph_str</name></name></expr></argument>,

                                    <argument pos:start="107:37" pos:end="107:48"><expr pos:start="107:37" pos:end="107:48"><operator pos:start="107:37" pos:end="107:37">&amp;</operator><name pos:start="107:38" pos:end="107:48">input_links</name></expr></argument>, <argument pos:start="107:51" pos:end="107:63"><expr pos:start="107:51" pos:end="107:63"><operator pos:start="107:51" pos:end="107:51">&amp;</operator><name pos:start="107:52" pos:end="107:63">output_links</name></expr></argument>, <argument pos:start="107:66" pos:end="107:70"><expr pos:start="107:66" pos:end="107:70"><name pos:start="107:66" pos:end="107:70">avctx</name></expr></argument>)</argument_list></call><operator pos:start="107:72" pos:end="107:72">)</operator> <operator pos:start="107:74" pos:end="107:74">&lt;</operator> <literal type="number" pos:start="107:76" pos:end="107:76">0</literal></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:18"><block_content pos:start="109:9" pos:end="109:18">

        <expr_stmt pos:start="109:9" pos:end="109:18"><expr pos:start="109:9" pos:end="109:17"><call pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:12">FAIL</name><argument_list pos:start="109:13" pos:end="109:17">(<argument pos:start="109:14" pos:end="109:16"><expr pos:start="109:14" pos:end="109:16"><name pos:start="109:14" pos:end="109:16">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="121:5"><if pos:start="113:5" pos:end="121:5">if <condition pos:start="113:8" pos:end="113:20">(<expr pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:19">input_links</name></expr>)</condition> <block pos:start="113:22" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:30">

        <expr_stmt pos:start="115:9" pos:end="117:70"><expr pos:start="115:9" pos:end="117:69"><call pos:start="115:9" pos:end="117:69"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="117:69">(<argument pos:start="115:16" pos:end="115:20"><expr pos:start="115:16" pos:end="115:20"><name pos:start="115:16" pos:end="115:20">avctx</name></expr></argument>, <argument pos:start="115:23" pos:end="115:34"><expr pos:start="115:23" pos:end="115:34"><name pos:start="115:23" pos:end="115:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="117:16" pos:end="117:68"><expr pos:start="117:16" pos:end="117:68"><literal type="string" pos:start="117:16" pos:end="117:68">"Open inputs in the filtergraph are not acceptable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:30"><expr pos:start="119:9" pos:end="119:29"><call pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:12">FAIL</name><argument_list pos:start="119:13" pos:end="119:29">(<argument pos:start="119:14" pos:end="119:28"><expr pos:start="119:14" pos:end="119:28"><call pos:start="119:14" pos:end="119:28"><name pos:start="119:14" pos:end="119:20">AVERROR</name><argument_list pos:start="119:21" pos:end="119:28">(<argument pos:start="119:22" pos:end="119:27"><expr pos:start="119:22" pos:end="119:27"><name pos:start="119:22" pos:end="119:27">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:27">/* count the outputs */</comment>

    <for pos:start="127:5" pos:end="127:71">for <control pos:start="127:9" pos:end="127:70">(<init pos:start="127:10" pos:end="127:37"><expr pos:start="127:10" pos:end="127:14"><name pos:start="127:10" pos:end="127:10">n</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr><operator pos:start="127:15" pos:end="127:15">,</operator> <expr pos:start="127:17" pos:end="127:36"><name pos:start="127:17" pos:end="127:21">inout</name> <operator pos:start="127:23" pos:end="127:23">=</operator> <name pos:start="127:25" pos:end="127:36">output_links</name></expr>;</init> <condition pos:start="127:39" pos:end="127:44"><expr pos:start="127:39" pos:end="127:43"><name pos:start="127:39" pos:end="127:43">inout</name></expr>;</condition> <incr pos:start="127:46" pos:end="127:69"><expr pos:start="127:46" pos:end="127:48"><name pos:start="127:46" pos:end="127:46">n</name><operator pos:start="127:47" pos:end="127:48">++</operator></expr><operator pos:start="127:49" pos:end="127:49">,</operator> <expr pos:start="127:51" pos:end="127:69"><name pos:start="127:51" pos:end="127:55">inout</name> <operator pos:start="127:57" pos:end="127:57">=</operator> <name pos:start="127:59" pos:end="127:69"><name pos:start="127:59" pos:end="127:63">inout</name><operator pos:start="127:64" pos:end="127:65">-&gt;</operator><name pos:start="127:66" pos:end="127:69">next</name></name></expr></incr>)</control><block type="pseudo" pos:start="127:71" pos:end="127:71"><block_content pos:start="127:71" pos:end="127:71"><empty_stmt pos:start="127:71" pos:end="127:71">;</empty_stmt></block_content></block></for>



    <if_stmt pos:start="131:5" pos:end="133:30"><if pos:start="131:5" pos:end="133:30">if <condition pos:start="131:8" pos:end="131:63">(<expr pos:start="131:9" pos:end="131:62"><operator pos:start="131:9" pos:end="131:9">!</operator><operator pos:start="131:10" pos:end="131:10">(</operator><name pos:start="131:11" pos:end="131:32"><name pos:start="131:11" pos:end="131:15">lavfi</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:32">sink_stream_map</name></name> <operator pos:start="131:34" pos:end="131:34">=</operator> <call pos:start="131:36" pos:end="131:61"><name pos:start="131:36" pos:end="131:44">av_malloc</name><argument_list pos:start="131:45" pos:end="131:61">(<argument pos:start="131:46" pos:end="131:60"><expr pos:start="131:46" pos:end="131:60"><sizeof pos:start="131:46" pos:end="131:56">sizeof<argument_list pos:start="131:52" pos:end="131:56">(<argument pos:start="131:53" pos:end="131:55"><expr pos:start="131:53" pos:end="131:55"><name pos:start="131:53" pos:end="131:55">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="131:58" pos:end="131:58">*</operator> <name pos:start="131:60" pos:end="131:60">n</name></expr></argument>)</argument_list></call><operator pos:start="131:62" pos:end="131:62">)</operator></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:30"><block_content pos:start="133:9" pos:end="133:30">

        <expr_stmt pos:start="133:9" pos:end="133:30"><expr pos:start="133:9" pos:end="133:29"><call pos:start="133:9" pos:end="133:29"><name pos:start="133:9" pos:end="133:12">FAIL</name><argument_list pos:start="133:13" pos:end="133:29">(<argument pos:start="133:14" pos:end="133:28"><expr pos:start="133:14" pos:end="133:28"><call pos:start="133:14" pos:end="133:28"><name pos:start="133:14" pos:end="133:20">AVERROR</name><argument_list pos:start="133:21" pos:end="133:28">(<argument pos:start="133:22" pos:end="133:27"><expr pos:start="133:22" pos:end="133:27"><name pos:start="133:22" pos:end="133:27">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="137:30"><if pos:start="135:5" pos:end="137:30">if <condition pos:start="135:8" pos:end="135:57">(<expr pos:start="135:9" pos:end="135:56"><operator pos:start="135:9" pos:end="135:9">!</operator><operator pos:start="135:10" pos:end="135:10">(</operator><name pos:start="135:11" pos:end="135:25"><name pos:start="135:11" pos:end="135:15">lavfi</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:25">sink_eof</name></name> <operator pos:start="135:27" pos:end="135:27">=</operator> <call pos:start="135:29" pos:end="135:55"><name pos:start="135:29" pos:end="135:38">av_mallocz</name><argument_list pos:start="135:39" pos:end="135:55">(<argument pos:start="135:40" pos:end="135:54"><expr pos:start="135:40" pos:end="135:54"><sizeof pos:start="135:40" pos:end="135:50">sizeof<argument_list pos:start="135:46" pos:end="135:50">(<argument pos:start="135:47" pos:end="135:49"><expr pos:start="135:47" pos:end="135:49"><name pos:start="135:47" pos:end="135:49">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="135:52" pos:end="135:52">*</operator> <name pos:start="135:54" pos:end="135:54">n</name></expr></argument>)</argument_list></call><operator pos:start="135:56" pos:end="135:56">)</operator></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:30"><block_content pos:start="137:9" pos:end="137:30">

        <expr_stmt pos:start="137:9" pos:end="137:30"><expr pos:start="137:9" pos:end="137:29"><call pos:start="137:9" pos:end="137:29"><name pos:start="137:9" pos:end="137:12">FAIL</name><argument_list pos:start="137:13" pos:end="137:29">(<argument pos:start="137:14" pos:end="137:28"><expr pos:start="137:14" pos:end="137:28"><call pos:start="137:14" pos:end="137:28"><name pos:start="137:14" pos:end="137:20">AVERROR</name><argument_list pos:start="137:21" pos:end="137:28">(<argument pos:start="137:22" pos:end="137:27"><expr pos:start="137:22" pos:end="137:27"><name pos:start="137:22" pos:end="137:27">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="139:5" pos:end="141:30"><if pos:start="139:5" pos:end="141:30">if <condition pos:start="139:8" pos:end="139:63">(<expr pos:start="139:9" pos:end="139:62"><operator pos:start="139:9" pos:end="139:9">!</operator><operator pos:start="139:10" pos:end="139:10">(</operator><name pos:start="139:11" pos:end="139:32"><name pos:start="139:11" pos:end="139:15">lavfi</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:32">stream_sink_map</name></name> <operator pos:start="139:34" pos:end="139:34">=</operator> <call pos:start="139:36" pos:end="139:61"><name pos:start="139:36" pos:end="139:44">av_malloc</name><argument_list pos:start="139:45" pos:end="139:61">(<argument pos:start="139:46" pos:end="139:60"><expr pos:start="139:46" pos:end="139:60"><sizeof pos:start="139:46" pos:end="139:56">sizeof<argument_list pos:start="139:52" pos:end="139:56">(<argument pos:start="139:53" pos:end="139:55"><expr pos:start="139:53" pos:end="139:55"><name pos:start="139:53" pos:end="139:55">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="139:58" pos:end="139:58">*</operator> <name pos:start="139:60" pos:end="139:60">n</name></expr></argument>)</argument_list></call><operator pos:start="139:62" pos:end="139:62">)</operator></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:30"><block_content pos:start="141:9" pos:end="141:30">

        <expr_stmt pos:start="141:9" pos:end="141:30"><expr pos:start="141:9" pos:end="141:29"><call pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:12">FAIL</name><argument_list pos:start="141:13" pos:end="141:29">(<argument pos:start="141:14" pos:end="141:28"><expr pos:start="141:14" pos:end="141:28"><call pos:start="141:14" pos:end="141:28"><name pos:start="141:14" pos:end="141:20">AVERROR</name><argument_list pos:start="141:21" pos:end="141:28">(<argument pos:start="141:22" pos:end="141:27"><expr pos:start="141:22" pos:end="141:27"><name pos:start="141:22" pos:end="141:27">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="145:5" pos:end="147:39">for <control pos:start="145:9" pos:end="145:27">(<init pos:start="145:10" pos:end="145:15"><expr pos:start="145:10" pos:end="145:14"><name pos:start="145:10" pos:end="145:10">i</name> <operator pos:start="145:12" pos:end="145:12">=</operator> <literal type="number" pos:start="145:14" pos:end="145:14">0</literal></expr>;</init> <condition pos:start="145:17" pos:end="145:22"><expr pos:start="145:17" pos:end="145:21"><name pos:start="145:17" pos:end="145:17">i</name> <operator pos:start="145:19" pos:end="145:19">&lt;</operator> <name pos:start="145:21" pos:end="145:21">n</name></expr>;</condition> <incr pos:start="145:24" pos:end="145:26"><expr pos:start="145:24" pos:end="145:26"><name pos:start="145:24" pos:end="145:24">i</name><operator pos:start="145:25" pos:end="145:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="147:9" pos:end="147:39"><block_content pos:start="147:9" pos:end="147:39">

        <expr_stmt pos:start="147:9" pos:end="147:39"><expr pos:start="147:9" pos:end="147:38"><name pos:start="147:9" pos:end="147:33"><name pos:start="147:9" pos:end="147:13">lavfi</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:30">stream_sink_map</name><index pos:start="147:31" pos:end="147:33">[<expr pos:start="147:32" pos:end="147:32"><name pos:start="147:32" pos:end="147:32">i</name></expr>]</index></name> <operator pos:start="147:35" pos:end="147:35">=</operator> <operator pos:start="147:37" pos:end="147:37">-</operator><literal type="number" pos:start="147:38" pos:end="147:38">1</literal></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="151:5" pos:end="153:55">/* parse the output link names - they need to be of the form out0, out1, ...

     * create a mapping between them and the streams */</comment>

    <for pos:start="155:5" pos:end="223:5">for <control pos:start="155:9" pos:end="155:70">(<init pos:start="155:10" pos:end="155:37"><expr pos:start="155:10" pos:end="155:14"><name pos:start="155:10" pos:end="155:10">i</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <literal type="number" pos:start="155:14" pos:end="155:14">0</literal></expr><operator pos:start="155:15" pos:end="155:15">,</operator> <expr pos:start="155:17" pos:end="155:36"><name pos:start="155:17" pos:end="155:21">inout</name> <operator pos:start="155:23" pos:end="155:23">=</operator> <name pos:start="155:25" pos:end="155:36">output_links</name></expr>;</init> <condition pos:start="155:39" pos:end="155:44"><expr pos:start="155:39" pos:end="155:43"><name pos:start="155:39" pos:end="155:43">inout</name></expr>;</condition> <incr pos:start="155:46" pos:end="155:69"><expr pos:start="155:46" pos:end="155:48"><name pos:start="155:46" pos:end="155:46">i</name><operator pos:start="155:47" pos:end="155:48">++</operator></expr><operator pos:start="155:49" pos:end="155:49">,</operator> <expr pos:start="155:51" pos:end="155:69"><name pos:start="155:51" pos:end="155:55">inout</name> <operator pos:start="155:57" pos:end="155:57">=</operator> <name pos:start="155:59" pos:end="155:69"><name pos:start="155:59" pos:end="155:63">inout</name><operator pos:start="155:64" pos:end="155:65">-&gt;</operator><name pos:start="155:66" pos:end="155:69">next</name></name></expr></incr>)</control> <block pos:start="155:72" pos:end="223:5">{<block_content pos:start="157:9" pos:end="221:47">

        <decl_stmt pos:start="157:9" pos:end="157:23"><decl pos:start="157:9" pos:end="157:22"><type pos:start="157:9" pos:end="157:11"><name pos:start="157:9" pos:end="157:11">int</name></type> <name pos:start="157:13" pos:end="157:22">stream_idx</name></decl>;</decl_stmt>

        <if_stmt pos:start="159:9" pos:end="171:9"><if pos:start="159:9" pos:end="161:27">if <condition pos:start="159:12" pos:end="159:40">(<expr pos:start="159:13" pos:end="159:39"><operator pos:start="159:13" pos:end="159:13">!</operator><call pos:start="159:14" pos:end="159:39"><name pos:start="159:14" pos:end="159:19">strcmp</name><argument_list pos:start="159:20" pos:end="159:39">(<argument pos:start="159:21" pos:end="159:31"><expr pos:start="159:21" pos:end="159:31"><name pos:start="159:21" pos:end="159:31"><name pos:start="159:21" pos:end="159:25">inout</name><operator pos:start="159:26" pos:end="159:27">-&gt;</operator><name pos:start="159:28" pos:end="159:31">name</name></name></expr></argument>, <argument pos:start="159:34" pos:end="159:38"><expr pos:start="159:34" pos:end="159:38"><literal type="string" pos:start="159:34" pos:end="159:38">"out"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:27"><block_content pos:start="161:13" pos:end="161:27">

            <expr_stmt pos:start="161:13" pos:end="161:27"><expr pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:22">stream_idx</name> <operator pos:start="161:24" pos:end="161:24">=</operator> <literal type="number" pos:start="161:26" pos:end="161:26">0</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="163:9" pos:end="171:9">else if <condition pos:start="163:17" pos:end="163:66">(<expr pos:start="163:18" pos:end="163:65"><call pos:start="163:18" pos:end="163:60"><name pos:start="163:18" pos:end="163:23">sscanf</name><argument_list pos:start="163:24" pos:end="163:60">(<argument pos:start="163:25" pos:end="163:35"><expr pos:start="163:25" pos:end="163:35"><name pos:start="163:25" pos:end="163:35"><name pos:start="163:25" pos:end="163:29">inout</name><operator pos:start="163:30" pos:end="163:31">-&gt;</operator><name pos:start="163:32" pos:end="163:35">name</name></name></expr></argument>, <argument pos:start="163:38" pos:end="163:46"><expr pos:start="163:38" pos:end="163:46"><literal type="string" pos:start="163:38" pos:end="163:46">"out%d\n"</literal></expr></argument>, <argument pos:start="163:49" pos:end="163:59"><expr pos:start="163:49" pos:end="163:59"><operator pos:start="163:49" pos:end="163:49">&amp;</operator><name pos:start="163:50" pos:end="163:59">stream_idx</name></expr></argument>)</argument_list></call> <operator pos:start="163:62" pos:end="163:63">!=</operator> <literal type="number" pos:start="163:65" pos:end="163:65">1</literal></expr>)</condition> <block pos:start="163:68" pos:end="171:9">{<block_content pos:start="165:13" pos:end="169:34">

            <expr_stmt pos:start="165:13" pos:end="167:62"><expr pos:start="165:13" pos:end="167:61"><call pos:start="165:13" pos:end="167:61"><name pos:start="165:13" pos:end="165:18">av_log</name><argument_list pos:start="165:19" pos:end="167:61">(<argument pos:start="165:20" pos:end="165:24"><expr pos:start="165:20" pos:end="165:24"><name pos:start="165:20" pos:end="165:24">avctx</name></expr></argument>,  <argument pos:start="165:28" pos:end="165:39"><expr pos:start="165:28" pos:end="165:39"><name pos:start="165:28" pos:end="165:39">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="167:20" pos:end="167:47"><expr pos:start="167:20" pos:end="167:47"><literal type="string" pos:start="167:20" pos:end="167:47">"Invalid outpad name '%s'\n"</literal></expr></argument>, <argument pos:start="167:50" pos:end="167:60"><expr pos:start="167:50" pos:end="167:60"><name pos:start="167:50" pos:end="167:60"><name pos:start="167:50" pos:end="167:54">inout</name><operator pos:start="167:55" pos:end="167:56">-&gt;</operator><name pos:start="167:57" pos:end="167:60">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:34"><expr pos:start="169:13" pos:end="169:33"><call pos:start="169:13" pos:end="169:33"><name pos:start="169:13" pos:end="169:16">FAIL</name><argument_list pos:start="169:17" pos:end="169:33">(<argument pos:start="169:18" pos:end="169:32"><expr pos:start="169:18" pos:end="169:32"><call pos:start="169:18" pos:end="169:32"><name pos:start="169:18" pos:end="169:24">AVERROR</name><argument_list pos:start="169:25" pos:end="169:32">(<argument pos:start="169:26" pos:end="169:31"><expr pos:start="169:26" pos:end="169:31"><name pos:start="169:26" pos:end="169:31">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="175:9" pos:end="187:9"><if pos:start="175:9" pos:end="187:9">if <condition pos:start="175:12" pos:end="175:38">(<expr pos:start="175:13" pos:end="175:37"><operator pos:start="175:13" pos:end="175:13">(</operator><name pos:start="175:14" pos:end="175:21">unsigned</name><operator pos:start="175:22" pos:end="175:22">)</operator><name pos:start="175:23" pos:end="175:32">stream_idx</name> <operator pos:start="175:34" pos:end="175:35">&gt;=</operator> <name pos:start="175:37" pos:end="175:37">n</name></expr>)</condition> <block pos:start="175:40" pos:end="187:9">{<block_content pos:start="177:13" pos:end="185:34">

            <expr_stmt pos:start="177:13" pos:end="183:35"><expr pos:start="177:13" pos:end="183:34"><call pos:start="177:13" pos:end="183:34"><name pos:start="177:13" pos:end="177:18">av_log</name><argument_list pos:start="177:19" pos:end="183:34">(<argument pos:start="177:20" pos:end="177:24"><expr pos:start="177:20" pos:end="177:24"><name pos:start="177:20" pos:end="177:24">avctx</name></expr></argument>, <argument pos:start="177:27" pos:end="177:38"><expr pos:start="177:27" pos:end="177:38"><name pos:start="177:27" pos:end="177:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="179:20" pos:end="181:56"><expr pos:start="179:20" pos:end="181:56"><literal type="string" pos:start="179:20" pos:end="179:65">"Invalid index was specified in output '%s', "</literal>

                   <literal type="string" pos:start="181:20" pos:end="181:56">"must be a non-negative value &lt; %d\n"</literal></expr></argument>,

                   <argument pos:start="183:20" pos:end="183:30"><expr pos:start="183:20" pos:end="183:30"><name pos:start="183:20" pos:end="183:30"><name pos:start="183:20" pos:end="183:24">inout</name><operator pos:start="183:25" pos:end="183:26">-&gt;</operator><name pos:start="183:27" pos:end="183:30">name</name></name></expr></argument>, <argument pos:start="183:33" pos:end="183:33"><expr pos:start="183:33" pos:end="183:33"><name pos:start="183:33" pos:end="183:33">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:34"><expr pos:start="185:13" pos:end="185:33"><call pos:start="185:13" pos:end="185:33"><name pos:start="185:13" pos:end="185:16">FAIL</name><argument_list pos:start="185:17" pos:end="185:33">(<argument pos:start="185:18" pos:end="185:32"><expr pos:start="185:18" pos:end="185:32"><call pos:start="185:18" pos:end="185:32"><name pos:start="185:18" pos:end="185:24">AVERROR</name><argument_list pos:start="185:25" pos:end="185:32">(<argument pos:start="185:26" pos:end="185:31"><expr pos:start="185:26" pos:end="185:31"><name pos:start="185:26" pos:end="185:31">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="191:9" pos:end="191:42">/* is an audio or video output? */</comment>

        <expr_stmt pos:start="193:9" pos:end="193:67"><expr pos:start="193:9" pos:end="193:66"><name pos:start="193:9" pos:end="193:12">type</name> <operator pos:start="193:14" pos:end="193:14">=</operator> <name pos:start="193:16" pos:end="193:61"><name pos:start="193:16" pos:end="193:20">inout</name><operator pos:start="193:21" pos:end="193:22">-&gt;</operator><name pos:start="193:23" pos:end="193:32">filter_ctx</name><operator pos:start="193:33" pos:end="193:34">-&gt;</operator><name pos:start="193:35" pos:end="193:45">output_pads</name><index pos:start="193:46" pos:end="193:61">[<expr pos:start="193:47" pos:end="193:60"><name pos:start="193:47" pos:end="193:60"><name pos:start="193:47" pos:end="193:51">inout</name><operator pos:start="193:52" pos:end="193:53">-&gt;</operator><name pos:start="193:54" pos:end="193:60">pad_idx</name></name></expr>]</index></name><operator pos:start="193:62" pos:end="193:62">.</operator><name pos:start="193:63" pos:end="193:66">type</name></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="203:9"><if pos:start="195:9" pos:end="203:9">if <condition pos:start="195:12" pos:end="195:69">(<expr pos:start="195:13" pos:end="195:68"><name pos:start="195:13" pos:end="195:16">type</name> <operator pos:start="195:18" pos:end="195:19">!=</operator> <name pos:start="195:21" pos:end="195:38">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="195:40" pos:end="195:41">&amp;&amp;</operator> <name pos:start="195:43" pos:end="195:46">type</name> <operator pos:start="195:48" pos:end="195:49">!=</operator> <name pos:start="195:51" pos:end="195:68">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="195:71" pos:end="203:9">{<block_content pos:start="197:13" pos:end="201:34">

            <expr_stmt pos:start="197:13" pos:end="199:99"><expr pos:start="197:13" pos:end="199:98"><call pos:start="197:13" pos:end="199:98"><name pos:start="197:13" pos:end="197:18">av_log</name><argument_list pos:start="197:19" pos:end="199:98">(<argument pos:start="197:20" pos:end="197:24"><expr pos:start="197:20" pos:end="197:24"><name pos:start="197:20" pos:end="197:24">avctx</name></expr></argument>,  <argument pos:start="197:28" pos:end="197:39"><expr pos:start="197:28" pos:end="197:39"><name pos:start="197:28" pos:end="197:39">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="199:20" pos:end="199:84"><expr pos:start="199:20" pos:end="199:84"><literal type="string" pos:start="199:20" pos:end="199:84">"Output '%s' is not a video or audio output, not yet supported\n"</literal></expr></argument>, <argument pos:start="199:87" pos:end="199:97"><expr pos:start="199:87" pos:end="199:97"><name pos:start="199:87" pos:end="199:97"><name pos:start="199:87" pos:end="199:91">inout</name><operator pos:start="199:92" pos:end="199:93">-&gt;</operator><name pos:start="199:94" pos:end="199:97">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:34"><expr pos:start="201:13" pos:end="201:33"><call pos:start="201:13" pos:end="201:33"><name pos:start="201:13" pos:end="201:16">FAIL</name><argument_list pos:start="201:17" pos:end="201:33">(<argument pos:start="201:18" pos:end="201:32"><expr pos:start="201:18" pos:end="201:32"><call pos:start="201:18" pos:end="201:32"><name pos:start="201:18" pos:end="201:24">AVERROR</name><argument_list pos:start="201:25" pos:end="201:32">(<argument pos:start="201:26" pos:end="201:31"><expr pos:start="201:26" pos:end="201:31"><name pos:start="201:26" pos:end="201:31">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="207:9" pos:end="217:9"><if pos:start="207:9" pos:end="217:9">if <condition pos:start="207:12" pos:end="207:53">(<expr pos:start="207:13" pos:end="207:52"><name pos:start="207:13" pos:end="207:46"><name pos:start="207:13" pos:end="207:17">lavfi</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:34">stream_sink_map</name><index pos:start="207:35" pos:end="207:46">[<expr pos:start="207:36" pos:end="207:45"><name pos:start="207:36" pos:end="207:45">stream_idx</name></expr>]</index></name> <operator pos:start="207:48" pos:end="207:49">!=</operator> <operator pos:start="207:51" pos:end="207:51">-</operator><literal type="number" pos:start="207:52" pos:end="207:52">1</literal></expr>)</condition> <block pos:start="207:55" pos:end="217:9">{<block_content pos:start="209:13" pos:end="215:34">

            <expr_stmt pos:start="209:13" pos:end="213:31"><expr pos:start="209:13" pos:end="213:30"><call pos:start="209:13" pos:end="213:30"><name pos:start="209:13" pos:end="209:18">av_log</name><argument_list pos:start="209:19" pos:end="213:30">(<argument pos:start="209:20" pos:end="209:24"><expr pos:start="209:20" pos:end="209:24"><name pos:start="209:20" pos:end="209:24">avctx</name></expr></argument>,  <argument pos:start="209:28" pos:end="209:39"><expr pos:start="209:28" pos:end="209:39"><name pos:start="209:28" pos:end="209:39">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="211:20" pos:end="211:75"><expr pos:start="211:20" pos:end="211:75"><literal type="string" pos:start="211:20" pos:end="211:75">"An output with stream index %d was already specified\n"</literal></expr></argument>,

                   <argument pos:start="213:20" pos:end="213:29"><expr pos:start="213:20" pos:end="213:29"><name pos:start="213:20" pos:end="213:29">stream_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:34"><expr pos:start="215:13" pos:end="215:33"><call pos:start="215:13" pos:end="215:33"><name pos:start="215:13" pos:end="215:16">FAIL</name><argument_list pos:start="215:17" pos:end="215:33">(<argument pos:start="215:18" pos:end="215:32"><expr pos:start="215:18" pos:end="215:32"><call pos:start="215:18" pos:end="215:32"><name pos:start="215:18" pos:end="215:24">AVERROR</name><argument_list pos:start="215:25" pos:end="215:32">(<argument pos:start="215:26" pos:end="215:31"><expr pos:start="215:26" pos:end="215:31"><name pos:start="215:26" pos:end="215:31">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:47"><expr pos:start="219:9" pos:end="219:46"><name pos:start="219:9" pos:end="219:33"><name pos:start="219:9" pos:end="219:13">lavfi</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:30">sink_stream_map</name><index pos:start="219:31" pos:end="219:33">[<expr pos:start="219:32" pos:end="219:32"><name pos:start="219:32" pos:end="219:32">i</name></expr>]</index></name> <operator pos:start="219:35" pos:end="219:35">=</operator> <name pos:start="219:37" pos:end="219:46">stream_idx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:47"><expr pos:start="221:9" pos:end="221:46"><name pos:start="221:9" pos:end="221:42"><name pos:start="221:9" pos:end="221:13">lavfi</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:30">stream_sink_map</name><index pos:start="221:31" pos:end="221:42">[<expr pos:start="221:32" pos:end="221:41"><name pos:start="221:32" pos:end="221:41">stream_idx</name></expr>]</index></name> <operator pos:start="221:44" pos:end="221:44">=</operator> <name pos:start="221:46" pos:end="221:46">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="227:5" pos:end="227:60">/* for each open output create a corresponding stream */</comment>

    <for pos:start="229:5" pos:end="239:5">for <control pos:start="229:9" pos:end="229:70">(<init pos:start="229:10" pos:end="229:37"><expr pos:start="229:10" pos:end="229:14"><name pos:start="229:10" pos:end="229:10">i</name> <operator pos:start="229:12" pos:end="229:12">=</operator> <literal type="number" pos:start="229:14" pos:end="229:14">0</literal></expr><operator pos:start="229:15" pos:end="229:15">,</operator> <expr pos:start="229:17" pos:end="229:36"><name pos:start="229:17" pos:end="229:21">inout</name> <operator pos:start="229:23" pos:end="229:23">=</operator> <name pos:start="229:25" pos:end="229:36">output_links</name></expr>;</init> <condition pos:start="229:39" pos:end="229:44"><expr pos:start="229:39" pos:end="229:43"><name pos:start="229:39" pos:end="229:43">inout</name></expr>;</condition> <incr pos:start="229:46" pos:end="229:69"><expr pos:start="229:46" pos:end="229:48"><name pos:start="229:46" pos:end="229:46">i</name><operator pos:start="229:47" pos:end="229:48">++</operator></expr><operator pos:start="229:49" pos:end="229:49">,</operator> <expr pos:start="229:51" pos:end="229:69"><name pos:start="229:51" pos:end="229:55">inout</name> <operator pos:start="229:57" pos:end="229:57">=</operator> <name pos:start="229:59" pos:end="229:69"><name pos:start="229:59" pos:end="229:63">inout</name><operator pos:start="229:64" pos:end="229:65">-&gt;</operator><name pos:start="229:66" pos:end="229:69">next</name></name></expr></incr>)</control> <block pos:start="229:72" pos:end="239:5">{<block_content pos:start="231:9" pos:end="237:19">

        <decl_stmt pos:start="231:9" pos:end="231:21"><decl pos:start="231:9" pos:end="231:20"><type pos:start="231:9" pos:end="231:18"><name pos:start="231:9" pos:end="231:16">AVStream</name> <modifier pos:start="231:18" pos:end="231:18">*</modifier></type><name pos:start="231:19" pos:end="231:20">st</name></decl>;</decl_stmt>

        <if_stmt pos:start="233:9" pos:end="235:34"><if pos:start="233:9" pos:end="235:34">if <condition pos:start="233:12" pos:end="233:53">(<expr pos:start="233:13" pos:end="233:52"><operator pos:start="233:13" pos:end="233:13">!</operator><operator pos:start="233:14" pos:end="233:14">(</operator><name pos:start="233:15" pos:end="233:16">st</name> <operator pos:start="233:18" pos:end="233:18">=</operator> <call pos:start="233:20" pos:end="233:51"><name pos:start="233:20" pos:end="233:38">avformat_new_stream</name><argument_list pos:start="233:39" pos:end="233:51">(<argument pos:start="233:40" pos:end="233:44"><expr pos:start="233:40" pos:end="233:44"><name pos:start="233:40" pos:end="233:44">avctx</name></expr></argument>, <argument pos:start="233:47" pos:end="233:50"><expr pos:start="233:47" pos:end="233:50"><name pos:start="233:47" pos:end="233:50">NULL</name></expr></argument>)</argument_list></call><operator pos:start="233:52" pos:end="233:52">)</operator></expr>)</condition><block type="pseudo" pos:start="235:13" pos:end="235:34"><block_content pos:start="235:13" pos:end="235:34">

            <expr_stmt pos:start="235:13" pos:end="235:34"><expr pos:start="235:13" pos:end="235:33"><call pos:start="235:13" pos:end="235:33"><name pos:start="235:13" pos:end="235:16">FAIL</name><argument_list pos:start="235:17" pos:end="235:33">(<argument pos:start="235:18" pos:end="235:32"><expr pos:start="235:18" pos:end="235:32"><call pos:start="235:18" pos:end="235:32"><name pos:start="235:18" pos:end="235:24">AVERROR</name><argument_list pos:start="235:25" pos:end="235:32">(<argument pos:start="235:26" pos:end="235:31"><expr pos:start="235:26" pos:end="235:31"><name pos:start="235:26" pos:end="235:31">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:19"><expr pos:start="237:9" pos:end="237:18"><name pos:start="237:9" pos:end="237:14"><name pos:start="237:9" pos:end="237:10">st</name><operator pos:start="237:11" pos:end="237:12">-&gt;</operator><name pos:start="237:13" pos:end="237:14">id</name></name> <operator pos:start="237:16" pos:end="237:16">=</operator> <name pos:start="237:18" pos:end="237:18">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="243:5" pos:end="243:69">/* create a sink for each output and connect them to the graph */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:76"><expr pos:start="245:5" pos:end="245:75"><name pos:start="245:5" pos:end="245:16"><name pos:start="245:5" pos:end="245:9">lavfi</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:16">sinks</name></name> <operator pos:start="245:18" pos:end="245:18">=</operator> <call pos:start="245:20" pos:end="245:75"><name pos:start="245:20" pos:end="245:28">av_malloc</name><argument_list pos:start="245:29" pos:end="245:75">(<argument pos:start="245:30" pos:end="245:74"><expr pos:start="245:30" pos:end="245:74"><sizeof pos:start="245:30" pos:end="245:54">sizeof<argument_list pos:start="245:36" pos:end="245:54">(<argument pos:start="245:37" pos:end="245:53"><expr pos:start="245:37" pos:end="245:53"><name pos:start="245:37" pos:end="245:51">AVFilterContext</name> <operator pos:start="245:53" pos:end="245:53">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="245:56" pos:end="245:56">*</operator> <name pos:start="245:58" pos:end="245:74"><name pos:start="245:58" pos:end="245:62">avctx</name><operator pos:start="245:63" pos:end="245:64">-&gt;</operator><name pos:start="245:65" pos:end="245:74">nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="249:30"><if pos:start="247:5" pos:end="249:30">if <condition pos:start="247:8" pos:end="247:22">(<expr pos:start="247:9" pos:end="247:21"><operator pos:start="247:9" pos:end="247:9">!</operator><name pos:start="247:10" pos:end="247:21"><name pos:start="247:10" pos:end="247:14">lavfi</name><operator pos:start="247:15" pos:end="247:16">-&gt;</operator><name pos:start="247:17" pos:end="247:21">sinks</name></name></expr>)</condition><block type="pseudo" pos:start="249:9" pos:end="249:30"><block_content pos:start="249:9" pos:end="249:30">

        <expr_stmt pos:start="249:9" pos:end="249:30"><expr pos:start="249:9" pos:end="249:29"><call pos:start="249:9" pos:end="249:29"><name pos:start="249:9" pos:end="249:12">FAIL</name><argument_list pos:start="249:13" pos:end="249:29">(<argument pos:start="249:14" pos:end="249:28"><expr pos:start="249:14" pos:end="249:28"><call pos:start="249:14" pos:end="249:28"><name pos:start="249:14" pos:end="249:20">AVERROR</name><argument_list pos:start="249:21" pos:end="249:28">(<argument pos:start="249:22" pos:end="249:27"><expr pos:start="249:22" pos:end="249:27"><name pos:start="249:22" pos:end="249:27">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="253:5" pos:end="329:5">for <control pos:start="253:9" pos:end="253:70">(<init pos:start="253:10" pos:end="253:37"><expr pos:start="253:10" pos:end="253:14"><name pos:start="253:10" pos:end="253:10">i</name> <operator pos:start="253:12" pos:end="253:12">=</operator> <literal type="number" pos:start="253:14" pos:end="253:14">0</literal></expr><operator pos:start="253:15" pos:end="253:15">,</operator> <expr pos:start="253:17" pos:end="253:36"><name pos:start="253:17" pos:end="253:21">inout</name> <operator pos:start="253:23" pos:end="253:23">=</operator> <name pos:start="253:25" pos:end="253:36">output_links</name></expr>;</init> <condition pos:start="253:39" pos:end="253:44"><expr pos:start="253:39" pos:end="253:43"><name pos:start="253:39" pos:end="253:43">inout</name></expr>;</condition> <incr pos:start="253:46" pos:end="253:69"><expr pos:start="253:46" pos:end="253:48"><name pos:start="253:46" pos:end="253:46">i</name><operator pos:start="253:47" pos:end="253:48">++</operator></expr><operator pos:start="253:49" pos:end="253:49">,</operator> <expr pos:start="253:51" pos:end="253:69"><name pos:start="253:51" pos:end="253:55">inout</name> <operator pos:start="253:57" pos:end="253:57">=</operator> <name pos:start="253:59" pos:end="253:69"><name pos:start="253:59" pos:end="253:63">inout</name><operator pos:start="253:64" pos:end="253:65">-&gt;</operator><name pos:start="253:66" pos:end="253:69">next</name></name></expr></incr>)</control> <block pos:start="253:72" pos:end="329:5">{<block_content pos:start="255:9" pos:end="327:22">

        <decl_stmt pos:start="255:9" pos:end="255:30"><decl pos:start="255:9" pos:end="255:29"><type pos:start="255:9" pos:end="255:25"><name pos:start="255:9" pos:end="255:23">AVFilterContext</name> <modifier pos:start="255:25" pos:end="255:25">*</modifier></type><name pos:start="255:26" pos:end="255:29">sink</name></decl>;</decl_stmt>



        <expr_stmt pos:start="259:9" pos:end="259:67"><expr pos:start="259:9" pos:end="259:66"><name pos:start="259:9" pos:end="259:12">type</name> <operator pos:start="259:14" pos:end="259:14">=</operator> <name pos:start="259:16" pos:end="259:61"><name pos:start="259:16" pos:end="259:20">inout</name><operator pos:start="259:21" pos:end="259:22">-&gt;</operator><name pos:start="259:23" pos:end="259:32">filter_ctx</name><operator pos:start="259:33" pos:end="259:34">-&gt;</operator><name pos:start="259:35" pos:end="259:45">output_pads</name><index pos:start="259:46" pos:end="259:61">[<expr pos:start="259:47" pos:end="259:60"><name pos:start="259:47" pos:end="259:60"><name pos:start="259:47" pos:end="259:51">inout</name><operator pos:start="259:52" pos:end="259:53">-&gt;</operator><name pos:start="259:54" pos:end="259:60">pad_idx</name></name></expr>]</index></name><operator pos:start="259:62" pos:end="259:62">.</operator><name pos:start="259:63" pos:end="259:66">type</name></expr>;</expr_stmt>



        <if_stmt pos:start="263:9" pos:end="271:9"><if pos:start="263:9" pos:end="271:9">if <condition pos:start="263:12" pos:end="265:56">(<expr pos:start="263:13" pos:end="265:55"><name pos:start="263:13" pos:end="263:16">type</name> <operator pos:start="263:18" pos:end="263:19">==</operator> <name pos:start="263:21" pos:end="263:38">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="263:40" pos:end="263:41">&amp;&amp;</operator> <operator pos:start="263:43" pos:end="263:43">!</operator> <name pos:start="263:45" pos:end="263:54">buffersink</name> <operator pos:start="263:56" pos:end="263:57">||</operator>

            <name pos:start="265:13" pos:end="265:16">type</name> <operator pos:start="265:18" pos:end="265:19">==</operator> <name pos:start="265:21" pos:end="265:38">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="265:40" pos:end="265:41">&amp;&amp;</operator> <operator pos:start="265:43" pos:end="265:43">!</operator> <name pos:start="265:45" pos:end="265:55">abuffersink</name></expr>)</condition> <block pos:start="265:58" pos:end="271:9">{<block_content pos:start="267:17" pos:end="269:47">

                <expr_stmt pos:start="267:17" pos:end="267:95"><expr pos:start="267:17" pos:end="267:94"><call pos:start="267:17" pos:end="267:94"><name pos:start="267:17" pos:end="267:22">av_log</name><argument_list pos:start="267:23" pos:end="267:94">(<argument pos:start="267:24" pos:end="267:28"><expr pos:start="267:24" pos:end="267:28"><name pos:start="267:24" pos:end="267:28">avctx</name></expr></argument>, <argument pos:start="267:31" pos:end="267:42"><expr pos:start="267:31" pos:end="267:42"><name pos:start="267:31" pos:end="267:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="267:45" pos:end="267:93"><expr pos:start="267:45" pos:end="267:93"><literal type="string" pos:start="267:45" pos:end="267:93">"Missing required buffersink filter, aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:47"><expr pos:start="269:17" pos:end="269:46"><call pos:start="269:17" pos:end="269:46"><name pos:start="269:17" pos:end="269:20">FAIL</name><argument_list pos:start="269:21" pos:end="269:46">(<argument pos:start="269:22" pos:end="269:45"><expr pos:start="269:22" pos:end="269:45"><name pos:start="269:22" pos:end="269:45">AVERROR_FILTER_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="275:9" pos:end="319:9"><if pos:start="275:9" pos:end="291:9">if <condition pos:start="275:12" pos:end="275:39">(<expr pos:start="275:13" pos:end="275:38"><name pos:start="275:13" pos:end="275:16">type</name> <operator pos:start="275:18" pos:end="275:19">==</operator> <name pos:start="275:21" pos:end="275:38">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="275:41" pos:end="291:9">{<block_content pos:start="277:13" pos:end="289:25">

            <expr_stmt pos:start="277:13" pos:end="281:67"><expr pos:start="277:13" pos:end="281:66"><name pos:start="277:13" pos:end="277:15">ret</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <call pos:start="277:19" pos:end="281:66"><name pos:start="277:19" pos:end="277:46">avfilter_graph_create_filter</name><argument_list pos:start="277:47" pos:end="281:66">(<argument pos:start="277:48" pos:end="277:52"><expr pos:start="277:48" pos:end="277:52"><operator pos:start="277:48" pos:end="277:48">&amp;</operator><name pos:start="277:49" pos:end="277:52">sink</name></expr></argument>, <argument pos:start="277:55" pos:end="277:64"><expr pos:start="277:55" pos:end="277:64"><name pos:start="277:55" pos:end="277:64">buffersink</name></expr></argument>,

                                               <argument pos:start="279:48" pos:end="279:58"><expr pos:start="279:48" pos:end="279:58"><name pos:start="279:48" pos:end="279:58"><name pos:start="279:48" pos:end="279:52">inout</name><operator pos:start="279:53" pos:end="279:54">-&gt;</operator><name pos:start="279:55" pos:end="279:58">name</name></name></expr></argument>, <argument pos:start="279:61" pos:end="279:64"><expr pos:start="279:61" pos:end="279:64"><name pos:start="279:61" pos:end="279:64">NULL</name></expr></argument>,

                                               <argument pos:start="281:48" pos:end="281:51"><expr pos:start="281:48" pos:end="281:51"><name pos:start="281:48" pos:end="281:51">NULL</name></expr></argument>, <argument pos:start="281:54" pos:end="281:65"><expr pos:start="281:54" pos:end="281:65"><name pos:start="281:54" pos:end="281:65"><name pos:start="281:54" pos:end="281:58">lavfi</name><operator pos:start="281:59" pos:end="281:60">-&gt;</operator><name pos:start="281:61" pos:end="281:65">graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:102"><expr pos:start="283:13" pos:end="283:101"><call pos:start="283:13" pos:end="283:101"><name pos:start="283:13" pos:end="283:31">av_opt_set_int_list</name><argument_list pos:start="283:32" pos:end="283:101">(<argument pos:start="283:33" pos:end="283:36"><expr pos:start="283:33" pos:end="283:36"><name pos:start="283:33" pos:end="283:36">sink</name></expr></argument>, <argument pos:start="283:39" pos:end="283:48"><expr pos:start="283:39" pos:end="283:48"><literal type="string" pos:start="283:39" pos:end="283:48">"pix_fmts"</literal></expr></argument>, <argument pos:start="283:51" pos:end="283:58"><expr pos:start="283:51" pos:end="283:58"><name pos:start="283:51" pos:end="283:58">pix_fmts</name></expr></argument>,  <argument pos:start="283:62" pos:end="283:76"><expr pos:start="283:62" pos:end="283:76"><name pos:start="283:62" pos:end="283:76">AV_PIX_FMT_NONE</name></expr></argument>, <argument pos:start="283:79" pos:end="283:100"><expr pos:start="283:79" pos:end="283:100"><name pos:start="283:79" pos:end="283:100">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="287:13" pos:end="289:25"><if pos:start="287:13" pos:end="289:25">if <condition pos:start="287:16" pos:end="287:24">(<expr pos:start="287:17" pos:end="287:23"><name pos:start="287:17" pos:end="287:19">ret</name> <operator pos:start="287:21" pos:end="287:21">&lt;</operator> <literal type="number" pos:start="287:23" pos:end="287:23">0</literal></expr>)</condition><block type="pseudo" pos:start="289:17" pos:end="289:25"><block_content pos:start="289:17" pos:end="289:25">

                <goto pos:start="289:17" pos:end="289:25">goto <name pos:start="289:22" pos:end="289:24">end</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="291:11" pos:end="319:9">else if <condition pos:start="291:19" pos:end="291:46">(<expr pos:start="291:20" pos:end="291:45"><name pos:start="291:20" pos:end="291:23">type</name> <operator pos:start="291:25" pos:end="291:26">==</operator> <name pos:start="291:28" pos:end="291:45">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="291:48" pos:end="319:9">{<block_content pos:start="293:13" pos:end="317:25">

            <decl_stmt pos:start="293:13" pos:end="301:74"><decl pos:start="293:13" pos:end="301:73"><type pos:start="293:13" pos:end="293:31"><name pos:start="293:13" pos:end="293:31"><name pos:start="293:13" pos:end="293:16">enum</name> <name pos:start="293:18" pos:end="293:31">AVSampleFormat</name></name></type> <name pos:start="293:33" pos:end="293:45"><name pos:start="293:33" pos:end="293:43">sample_fmts</name><index pos:start="293:44" pos:end="293:45">[]</index></name> <init pos:start="293:47" pos:end="301:73">= <expr pos:start="293:49" pos:end="301:73"><block pos:start="293:49" pos:end="301:73">{ <expr pos:start="293:51" pos:end="293:66"><name pos:start="293:51" pos:end="293:66">AV_SAMPLE_FMT_U8</name></expr>,

                                                  <expr pos:start="295:51" pos:end="295:67"><name pos:start="295:51" pos:end="295:67">AV_SAMPLE_FMT_S16</name></expr>,

                                                  <expr pos:start="297:51" pos:end="297:67"><name pos:start="297:51" pos:end="297:67">AV_SAMPLE_FMT_S32</name></expr>,

                                                  <expr pos:start="299:51" pos:end="299:67"><name pos:start="299:51" pos:end="299:67">AV_SAMPLE_FMT_FLT</name></expr>,

                                                  <expr pos:start="301:51" pos:end="301:67"><name pos:start="301:51" pos:end="301:67">AV_SAMPLE_FMT_DBL</name></expr>, <expr pos:start="301:70" pos:end="301:71"><operator pos:start="301:70" pos:end="301:70">-</operator><literal type="number" pos:start="301:71" pos:end="301:71">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="305:13" pos:end="309:67"><expr pos:start="305:13" pos:end="309:66"><name pos:start="305:13" pos:end="305:15">ret</name> <operator pos:start="305:17" pos:end="305:17">=</operator> <call pos:start="305:19" pos:end="309:66"><name pos:start="305:19" pos:end="305:46">avfilter_graph_create_filter</name><argument_list pos:start="305:47" pos:end="309:66">(<argument pos:start="305:48" pos:end="305:52"><expr pos:start="305:48" pos:end="305:52"><operator pos:start="305:48" pos:end="305:48">&amp;</operator><name pos:start="305:49" pos:end="305:52">sink</name></expr></argument>, <argument pos:start="305:55" pos:end="305:65"><expr pos:start="305:55" pos:end="305:65"><name pos:start="305:55" pos:end="305:65">abuffersink</name></expr></argument>,

                                               <argument pos:start="307:48" pos:end="307:58"><expr pos:start="307:48" pos:end="307:58"><name pos:start="307:48" pos:end="307:58"><name pos:start="307:48" pos:end="307:52">inout</name><operator pos:start="307:53" pos:end="307:54">-&gt;</operator><name pos:start="307:55" pos:end="307:58">name</name></name></expr></argument>, <argument pos:start="307:61" pos:end="307:64"><expr pos:start="307:61" pos:end="307:64"><name pos:start="307:61" pos:end="307:64">NULL</name></expr></argument>,

                                               <argument pos:start="309:48" pos:end="309:51"><expr pos:start="309:48" pos:end="309:51"><name pos:start="309:48" pos:end="309:51">NULL</name></expr></argument>, <argument pos:start="309:54" pos:end="309:65"><expr pos:start="309:54" pos:end="309:65"><name pos:start="309:54" pos:end="309:65"><name pos:start="309:54" pos:end="309:58">lavfi</name><operator pos:start="309:59" pos:end="309:60">-&gt;</operator><name pos:start="309:61" pos:end="309:65">graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="313:13" pos:end="313:111"><expr pos:start="313:13" pos:end="313:110"><call pos:start="313:13" pos:end="313:110"><name pos:start="313:13" pos:end="313:31">av_opt_set_int_list</name><argument_list pos:start="313:32" pos:end="313:110">(<argument pos:start="313:33" pos:end="313:36"><expr pos:start="313:33" pos:end="313:36"><name pos:start="313:33" pos:end="313:36">sink</name></expr></argument>, <argument pos:start="313:39" pos:end="313:51"><expr pos:start="313:39" pos:end="313:51"><literal type="string" pos:start="313:39" pos:end="313:51">"sample_fmts"</literal></expr></argument>, <argument pos:start="313:54" pos:end="313:64"><expr pos:start="313:54" pos:end="313:64"><name pos:start="313:54" pos:end="313:64">sample_fmts</name></expr></argument>,  <argument pos:start="313:68" pos:end="313:85"><expr pos:start="313:68" pos:end="313:85"><name pos:start="313:68" pos:end="313:85">AV_SAMPLE_FMT_NONE</name></expr></argument>, <argument pos:start="313:88" pos:end="313:109"><expr pos:start="313:88" pos:end="313:109"><name pos:start="313:88" pos:end="313:109">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="315:13" pos:end="317:25"><if pos:start="315:13" pos:end="317:25">if <condition pos:start="315:16" pos:end="315:24">(<expr pos:start="315:17" pos:end="315:23"><name pos:start="315:17" pos:end="315:19">ret</name> <operator pos:start="315:21" pos:end="315:21">&lt;</operator> <literal type="number" pos:start="315:23" pos:end="315:23">0</literal></expr>)</condition><block type="pseudo" pos:start="317:17" pos:end="317:25"><block_content pos:start="317:17" pos:end="317:25">

                <goto pos:start="317:17" pos:end="317:25">goto <name pos:start="317:22" pos:end="317:24">end</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="323:9" pos:end="323:31"><expr pos:start="323:9" pos:end="323:30"><name pos:start="323:9" pos:end="323:23"><name pos:start="323:9" pos:end="323:13">lavfi</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:20">sinks</name><index pos:start="323:21" pos:end="323:23">[<expr pos:start="323:22" pos:end="323:22"><name pos:start="323:22" pos:end="323:22">i</name></expr>]</index></name> <operator pos:start="323:25" pos:end="323:25">=</operator> <name pos:start="323:27" pos:end="323:30">sink</name></expr>;</expr_stmt>

        <if_stmt pos:start="325:9" pos:end="327:22"><if pos:start="325:9" pos:end="327:22">if <condition pos:start="325:12" pos:end="325:82">(<expr pos:start="325:13" pos:end="325:81"><operator pos:start="325:13" pos:end="325:13">(</operator><name pos:start="325:14" pos:end="325:16">ret</name> <operator pos:start="325:18" pos:end="325:18">=</operator> <call pos:start="325:20" pos:end="325:76"><name pos:start="325:20" pos:end="325:32">avfilter_link</name><argument_list pos:start="325:33" pos:end="325:76">(<argument pos:start="325:34" pos:end="325:50"><expr pos:start="325:34" pos:end="325:50"><name pos:start="325:34" pos:end="325:50"><name pos:start="325:34" pos:end="325:38">inout</name><operator pos:start="325:39" pos:end="325:40">-&gt;</operator><name pos:start="325:41" pos:end="325:50">filter_ctx</name></name></expr></argument>, <argument pos:start="325:53" pos:end="325:66"><expr pos:start="325:53" pos:end="325:66"><name pos:start="325:53" pos:end="325:66"><name pos:start="325:53" pos:end="325:57">inout</name><operator pos:start="325:58" pos:end="325:59">-&gt;</operator><name pos:start="325:60" pos:end="325:66">pad_idx</name></name></expr></argument>, <argument pos:start="325:69" pos:end="325:72"><expr pos:start="325:69" pos:end="325:72"><name pos:start="325:69" pos:end="325:72">sink</name></expr></argument>, <argument pos:start="325:75" pos:end="325:75"><expr pos:start="325:75" pos:end="325:75"><literal type="number" pos:start="325:75" pos:end="325:75">0</literal></expr></argument>)</argument_list></call><operator pos:start="325:77" pos:end="325:77">)</operator> <operator pos:start="325:79" pos:end="325:79">&lt;</operator> <literal type="number" pos:start="325:81" pos:end="325:81">0</literal></expr>)</condition><block type="pseudo" pos:start="327:13" pos:end="327:22"><block_content pos:start="327:13" pos:end="327:22">

            <expr_stmt pos:start="327:13" pos:end="327:22"><expr pos:start="327:13" pos:end="327:21"><call pos:start="327:13" pos:end="327:21"><name pos:start="327:13" pos:end="327:16">FAIL</name><argument_list pos:start="327:17" pos:end="327:21">(<argument pos:start="327:18" pos:end="327:20"><expr pos:start="327:18" pos:end="327:20"><name pos:start="327:18" pos:end="327:20">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="333:5" pos:end="333:29">/* configure the graph */</comment>

    <if_stmt pos:start="335:5" pos:end="337:18"><if pos:start="335:5" pos:end="337:18">if <condition pos:start="335:8" pos:end="335:63">(<expr pos:start="335:9" pos:end="335:62"><operator pos:start="335:9" pos:end="335:9">(</operator><name pos:start="335:10" pos:end="335:12">ret</name> <operator pos:start="335:14" pos:end="335:14">=</operator> <call pos:start="335:16" pos:end="335:57"><name pos:start="335:16" pos:end="335:36">avfilter_graph_config</name><argument_list pos:start="335:37" pos:end="335:57">(<argument pos:start="335:38" pos:end="335:49"><expr pos:start="335:38" pos:end="335:49"><name pos:start="335:38" pos:end="335:49"><name pos:start="335:38" pos:end="335:42">lavfi</name><operator pos:start="335:43" pos:end="335:44">-&gt;</operator><name pos:start="335:45" pos:end="335:49">graph</name></name></expr></argument>, <argument pos:start="335:52" pos:end="335:56"><expr pos:start="335:52" pos:end="335:56"><name pos:start="335:52" pos:end="335:56">avctx</name></expr></argument>)</argument_list></call><operator pos:start="335:58" pos:end="335:58">)</operator> <operator pos:start="335:60" pos:end="335:60">&lt;</operator> <literal type="number" pos:start="335:62" pos:end="335:62">0</literal></expr>)</condition><block type="pseudo" pos:start="337:9" pos:end="337:18"><block_content pos:start="337:9" pos:end="337:18">

        <expr_stmt pos:start="337:9" pos:end="337:18"><expr pos:start="337:9" pos:end="337:17"><call pos:start="337:9" pos:end="337:17"><name pos:start="337:9" pos:end="337:12">FAIL</name><argument_list pos:start="337:13" pos:end="337:17">(<argument pos:start="337:14" pos:end="337:16"><expr pos:start="337:14" pos:end="337:16"><name pos:start="337:14" pos:end="337:16">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="341:5" pos:end="351:5"><if pos:start="341:5" pos:end="351:5">if <condition pos:start="341:8" pos:end="341:26">(<expr pos:start="341:9" pos:end="341:25"><name pos:start="341:9" pos:end="341:25"><name pos:start="341:9" pos:end="341:13">lavfi</name><operator pos:start="341:14" pos:end="341:15">-&gt;</operator><name pos:start="341:16" pos:end="341:25">dump_graph</name></name></expr>)</condition> <block pos:start="341:28" pos:end="351:5">{<block_content pos:start="343:9" pos:end="349:22">

        <decl_stmt pos:start="343:9" pos:end="343:74"><decl pos:start="343:9" pos:end="343:73"><type pos:start="343:9" pos:end="343:14"><name pos:start="343:9" pos:end="343:12">char</name> <modifier pos:start="343:14" pos:end="343:14">*</modifier></type><name pos:start="343:15" pos:end="343:18">dump</name> <init pos:start="343:20" pos:end="343:73">= <expr pos:start="343:22" pos:end="343:73"><call pos:start="343:22" pos:end="343:73"><name pos:start="343:22" pos:end="343:40">avfilter_graph_dump</name><argument_list pos:start="343:41" pos:end="343:73">(<argument pos:start="343:42" pos:end="343:53"><expr pos:start="343:42" pos:end="343:53"><name pos:start="343:42" pos:end="343:53"><name pos:start="343:42" pos:end="343:46">lavfi</name><operator pos:start="343:47" pos:end="343:48">-&gt;</operator><name pos:start="343:49" pos:end="343:53">graph</name></name></expr></argument>, <argument pos:start="343:56" pos:end="343:72"><expr pos:start="343:56" pos:end="343:72"><name pos:start="343:56" pos:end="343:72"><name pos:start="343:56" pos:end="343:60">lavfi</name><operator pos:start="343:61" pos:end="343:62">-&gt;</operator><name pos:start="343:63" pos:end="343:72">dump_graph</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:28"><expr pos:start="345:9" pos:end="345:27"><call pos:start="345:9" pos:end="345:27"><name pos:start="345:9" pos:end="345:13">fputs</name><argument_list pos:start="345:14" pos:end="345:27">(<argument pos:start="345:15" pos:end="345:18"><expr pos:start="345:15" pos:end="345:18"><name pos:start="345:15" pos:end="345:18">dump</name></expr></argument>, <argument pos:start="345:21" pos:end="345:26"><expr pos:start="345:21" pos:end="345:26"><name pos:start="345:21" pos:end="345:26">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:23"><expr pos:start="347:9" pos:end="347:22"><call pos:start="347:9" pos:end="347:22"><name pos:start="347:9" pos:end="347:14">fflush</name><argument_list pos:start="347:15" pos:end="347:22">(<argument pos:start="347:16" pos:end="347:21"><expr pos:start="347:16" pos:end="347:21"><name pos:start="347:16" pos:end="347:21">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:22"><expr pos:start="349:9" pos:end="349:21"><call pos:start="349:9" pos:end="349:21"><name pos:start="349:9" pos:end="349:15">av_free</name><argument_list pos:start="349:16" pos:end="349:21">(<argument pos:start="349:17" pos:end="349:20"><expr pos:start="349:17" pos:end="349:20"><name pos:start="349:17" pos:end="349:20">dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="355:5" pos:end="355:73">/* fill each stream with the information in the corresponding sink */</comment>

    <for pos:start="357:5" pos:end="415:5">for <control pos:start="357:9" pos:end="357:43">(<init pos:start="357:10" pos:end="357:15"><expr pos:start="357:10" pos:end="357:14"><name pos:start="357:10" pos:end="357:10">i</name> <operator pos:start="357:12" pos:end="357:12">=</operator> <literal type="number" pos:start="357:14" pos:end="357:14">0</literal></expr>;</init> <condition pos:start="357:17" pos:end="357:38"><expr pos:start="357:17" pos:end="357:37"><name pos:start="357:17" pos:end="357:17">i</name> <operator pos:start="357:19" pos:end="357:19">&lt;</operator> <name pos:start="357:21" pos:end="357:37"><name pos:start="357:21" pos:end="357:25">avctx</name><operator pos:start="357:26" pos:end="357:27">-&gt;</operator><name pos:start="357:28" pos:end="357:37">nb_streams</name></name></expr>;</condition> <incr pos:start="357:40" pos:end="357:42"><expr pos:start="357:40" pos:end="357:42"><name pos:start="357:40" pos:end="357:40">i</name><operator pos:start="357:41" pos:end="357:42">++</operator></expr></incr>)</control> <block pos:start="357:45" pos:end="415:5">{<block_content pos:start="359:9" pos:end="413:9">

        <decl_stmt pos:start="359:9" pos:end="359:80"><decl pos:start="359:9" pos:end="359:79"><type pos:start="359:9" pos:end="359:22"><name pos:start="359:9" pos:end="359:20">AVFilterLink</name> <modifier pos:start="359:22" pos:end="359:22">*</modifier></type><name pos:start="359:23" pos:end="359:26">link</name> <init pos:start="359:28" pos:end="359:79">= <expr pos:start="359:30" pos:end="359:79"><name pos:start="359:30" pos:end="359:68"><name pos:start="359:30" pos:end="359:34">lavfi</name><operator pos:start="359:35" pos:end="359:36">-&gt;</operator><name pos:start="359:37" pos:end="359:41">sinks</name><index pos:start="359:42" pos:end="359:68">[<expr pos:start="359:43" pos:end="359:67"><name pos:start="359:43" pos:end="359:67"><name pos:start="359:43" pos:end="359:47">lavfi</name><operator pos:start="359:48" pos:end="359:49">-&gt;</operator><name pos:start="359:50" pos:end="359:64">stream_sink_map</name><index pos:start="359:65" pos:end="359:67">[<expr pos:start="359:66" pos:end="359:66"><name pos:start="359:66" pos:end="359:66">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="359:69" pos:end="359:70">-&gt;</operator><name pos:start="359:71" pos:end="359:79"><name pos:start="359:71" pos:end="359:76">inputs</name><index pos:start="359:77" pos:end="359:79">[<expr pos:start="359:78" pos:end="359:78"><literal type="number" pos:start="359:78" pos:end="359:78">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="361:9" pos:end="361:41"><decl pos:start="361:9" pos:end="361:40"><type pos:start="361:9" pos:end="361:18"><name pos:start="361:9" pos:end="361:16">AVStream</name> <modifier pos:start="361:18" pos:end="361:18">*</modifier></type><name pos:start="361:19" pos:end="361:20">st</name> <init pos:start="361:22" pos:end="361:40">= <expr pos:start="361:24" pos:end="361:40"><name pos:start="361:24" pos:end="361:40"><name pos:start="361:24" pos:end="361:28">avctx</name><operator pos:start="361:29" pos:end="361:30">-&gt;</operator><name pos:start="361:31" pos:end="361:37">streams</name><index pos:start="361:38" pos:end="361:40">[<expr pos:start="361:39" pos:end="361:39"><name pos:start="361:39" pos:end="361:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:43"><expr pos:start="363:9" pos:end="363:42"><name pos:start="363:9" pos:end="363:29"><name pos:start="363:9" pos:end="363:10">st</name><operator pos:start="363:11" pos:end="363:12">-&gt;</operator><name pos:start="363:13" pos:end="363:17">codec</name><operator pos:start="363:18" pos:end="363:19">-&gt;</operator><name pos:start="363:20" pos:end="363:29">codec_type</name></name> <operator pos:start="363:31" pos:end="363:31">=</operator> <name pos:start="363:33" pos:end="363:42"><name pos:start="363:33" pos:end="363:36">link</name><operator pos:start="363:37" pos:end="363:38">-&gt;</operator><name pos:start="363:39" pos:end="363:42">type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:78"><expr pos:start="365:9" pos:end="365:77"><call pos:start="365:9" pos:end="365:77"><name pos:start="365:9" pos:end="365:27">avpriv_set_pts_info</name><argument_list pos:start="365:28" pos:end="365:77">(<argument pos:start="365:29" pos:end="365:30"><expr pos:start="365:29" pos:end="365:30"><name pos:start="365:29" pos:end="365:30">st</name></expr></argument>, <argument pos:start="365:33" pos:end="365:34"><expr pos:start="365:33" pos:end="365:34"><literal type="number" pos:start="365:33" pos:end="365:34">64</literal></expr></argument>, <argument pos:start="365:37" pos:end="365:55"><expr pos:start="365:37" pos:end="365:55"><name pos:start="365:37" pos:end="365:55"><name pos:start="365:37" pos:end="365:40">link</name><operator pos:start="365:41" pos:end="365:42">-&gt;</operator><name pos:start="365:43" pos:end="365:51">time_base</name><operator pos:start="365:52" pos:end="365:52">.</operator><name pos:start="365:53" pos:end="365:55">num</name></name></expr></argument>, <argument pos:start="365:58" pos:end="365:76"><expr pos:start="365:58" pos:end="365:76"><name pos:start="365:58" pos:end="365:76"><name pos:start="365:58" pos:end="365:61">link</name><operator pos:start="365:62" pos:end="365:63">-&gt;</operator><name pos:start="365:64" pos:end="365:72">time_base</name><operator pos:start="365:73" pos:end="365:73">.</operator><name pos:start="365:74" pos:end="365:76">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="367:9" pos:end="413:9"><if pos:start="367:9" pos:end="391:9">if <condition pos:start="367:12" pos:end="367:45">(<expr pos:start="367:13" pos:end="367:44"><name pos:start="367:13" pos:end="367:22"><name pos:start="367:13" pos:end="367:16">link</name><operator pos:start="367:17" pos:end="367:18">-&gt;</operator><name pos:start="367:19" pos:end="367:22">type</name></name> <operator pos:start="367:24" pos:end="367:25">==</operator> <name pos:start="367:27" pos:end="367:44">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="367:47" pos:end="391:9">{<block_content pos:start="369:13" pos:end="389:41">

            <expr_stmt pos:start="369:13" pos:end="369:57"><expr pos:start="369:13" pos:end="369:56"><name pos:start="369:13" pos:end="369:31"><name pos:start="369:13" pos:end="369:14">st</name><operator pos:start="369:15" pos:end="369:16">-&gt;</operator><name pos:start="369:17" pos:end="369:21">codec</name><operator pos:start="369:22" pos:end="369:23">-&gt;</operator><name pos:start="369:24" pos:end="369:31">codec_id</name></name>   <operator pos:start="369:35" pos:end="369:35">=</operator> <name pos:start="369:37" pos:end="369:56">AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:49"><expr pos:start="371:13" pos:end="371:48"><name pos:start="371:13" pos:end="371:30"><name pos:start="371:13" pos:end="371:14">st</name><operator pos:start="371:15" pos:end="371:16">-&gt;</operator><name pos:start="371:17" pos:end="371:21">codec</name><operator pos:start="371:22" pos:end="371:23">-&gt;</operator><name pos:start="371:24" pos:end="371:30">pix_fmt</name></name>    <operator pos:start="371:35" pos:end="371:35">=</operator> <name pos:start="371:37" pos:end="371:48"><name pos:start="371:37" pos:end="371:40">link</name><operator pos:start="371:41" pos:end="371:42">-&gt;</operator><name pos:start="371:43" pos:end="371:48">format</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:52"><expr pos:start="373:13" pos:end="373:51"><name pos:start="373:13" pos:end="373:32"><name pos:start="373:13" pos:end="373:14">st</name><operator pos:start="373:15" pos:end="373:16">-&gt;</operator><name pos:start="373:17" pos:end="373:21">codec</name><operator pos:start="373:22" pos:end="373:23">-&gt;</operator><name pos:start="373:24" pos:end="373:32">time_base</name></name>  <operator pos:start="373:35" pos:end="373:35">=</operator> <name pos:start="373:37" pos:end="373:51"><name pos:start="373:37" pos:end="373:40">link</name><operator pos:start="373:41" pos:end="373:42">-&gt;</operator><name pos:start="373:43" pos:end="373:51">time_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="375:13" pos:end="375:44"><expr pos:start="375:13" pos:end="375:43"><name pos:start="375:13" pos:end="375:28"><name pos:start="375:13" pos:end="375:14">st</name><operator pos:start="375:15" pos:end="375:16">-&gt;</operator><name pos:start="375:17" pos:end="375:21">codec</name><operator pos:start="375:22" pos:end="375:23">-&gt;</operator><name pos:start="375:24" pos:end="375:28">width</name></name>      <operator pos:start="375:35" pos:end="375:35">=</operator> <name pos:start="375:37" pos:end="375:43"><name pos:start="375:37" pos:end="375:40">link</name><operator pos:start="375:41" pos:end="375:42">-&gt;</operator><name pos:start="375:43" pos:end="375:43">w</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="377:13" pos:end="377:44"><expr pos:start="377:13" pos:end="377:43"><name pos:start="377:13" pos:end="377:29"><name pos:start="377:13" pos:end="377:14">st</name><operator pos:start="377:15" pos:end="377:16">-&gt;</operator><name pos:start="377:17" pos:end="377:21">codec</name><operator pos:start="377:22" pos:end="377:23">-&gt;</operator><name pos:start="377:24" pos:end="377:29">height</name></name>     <operator pos:start="377:35" pos:end="377:35">=</operator> <name pos:start="377:37" pos:end="377:43"><name pos:start="377:37" pos:end="377:40">link</name><operator pos:start="377:41" pos:end="377:42">-&gt;</operator><name pos:start="377:43" pos:end="377:43">h</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="379:13" pos:end="381:71"><expr pos:start="379:13" pos:end="381:70"><name pos:start="379:13" pos:end="379:42"><name pos:start="379:13" pos:end="379:14">st</name>       <operator pos:start="379:22" pos:end="379:23">-&gt;</operator><name pos:start="379:24" pos:end="379:42">sample_aspect_ratio</name></name> <operator pos:start="379:44" pos:end="379:44">=</operator>

            <name pos:start="381:13" pos:end="381:42"><name pos:start="381:13" pos:end="381:14">st</name><operator pos:start="381:15" pos:end="381:16">-&gt;</operator><name pos:start="381:17" pos:end="381:21">codec</name><operator pos:start="381:22" pos:end="381:23">-&gt;</operator><name pos:start="381:24" pos:end="381:42">sample_aspect_ratio</name></name> <operator pos:start="381:44" pos:end="381:44">=</operator> <name pos:start="381:46" pos:end="381:70"><name pos:start="381:46" pos:end="381:49">link</name><operator pos:start="381:50" pos:end="381:51">-&gt;</operator><name pos:start="381:52" pos:end="381:70">sample_aspect_ratio</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="389:41"><expr pos:start="383:13" pos:end="389:40"><name pos:start="383:13" pos:end="383:28"><name pos:start="383:13" pos:end="383:17">avctx</name><operator pos:start="383:18" pos:end="383:19">-&gt;</operator><name pos:start="383:20" pos:end="383:28">probesize</name></name> <operator pos:start="383:30" pos:end="383:30">=</operator> <call pos:start="383:32" pos:end="389:40"><name pos:start="383:32" pos:end="383:36">FFMAX</name><argument_list pos:start="383:37" pos:end="389:40">(<argument pos:start="383:38" pos:end="383:53"><expr pos:start="383:38" pos:end="383:53"><name pos:start="383:38" pos:end="383:53"><name pos:start="383:38" pos:end="383:42">avctx</name><operator pos:start="383:43" pos:end="383:44">-&gt;</operator><name pos:start="383:45" pos:end="383:53">probesize</name></name></expr></argument>,

                                     <argument pos:start="385:38" pos:end="389:39"><expr pos:start="385:38" pos:end="389:39"><name pos:start="385:38" pos:end="385:44"><name pos:start="385:38" pos:end="385:41">link</name><operator pos:start="385:42" pos:end="385:43">-&gt;</operator><name pos:start="385:44" pos:end="385:44">w</name></name> <operator pos:start="385:46" pos:end="385:46">*</operator> <name pos:start="385:48" pos:end="385:54"><name pos:start="385:48" pos:end="385:51">link</name><operator pos:start="385:52" pos:end="385:53">-&gt;</operator><name pos:start="385:54" pos:end="385:54">h</name></name> <operator pos:start="385:56" pos:end="385:56">*</operator>

                                     <call pos:start="387:38" pos:end="387:100"><name pos:start="387:38" pos:end="387:65">av_get_padded_bits_per_pixel</name><argument_list pos:start="387:66" pos:end="387:100">(<argument pos:start="387:67" pos:end="387:99"><expr pos:start="387:67" pos:end="387:99"><call pos:start="387:67" pos:end="387:99"><name pos:start="387:67" pos:end="387:85">av_pix_fmt_desc_get</name><argument_list pos:start="387:86" pos:end="387:99">(<argument pos:start="387:87" pos:end="387:98"><expr pos:start="387:87" pos:end="387:98"><name pos:start="387:87" pos:end="387:98"><name pos:start="387:87" pos:end="387:90">link</name><operator pos:start="387:91" pos:end="387:92">-&gt;</operator><name pos:start="387:93" pos:end="387:98">format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="387:102" pos:end="387:102">*</operator>

                                     <literal type="number" pos:start="389:38" pos:end="389:39">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="391:11" pos:end="413:9">else if <condition pos:start="391:19" pos:end="391:52">(<expr pos:start="391:20" pos:end="391:51"><name pos:start="391:20" pos:end="391:29"><name pos:start="391:20" pos:end="391:23">link</name><operator pos:start="391:24" pos:end="391:25">-&gt;</operator><name pos:start="391:26" pos:end="391:29">type</name></name> <operator pos:start="391:31" pos:end="391:32">==</operator> <name pos:start="391:34" pos:end="391:51">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="391:54" pos:end="413:9">{<block_content pos:start="393:13" pos:end="411:61">

            <expr_stmt pos:start="393:13" pos:end="393:72"><expr pos:start="393:13" pos:end="393:71"><name pos:start="393:13" pos:end="393:31"><name pos:start="393:13" pos:end="393:14">st</name><operator pos:start="393:15" pos:end="393:16">-&gt;</operator><name pos:start="393:17" pos:end="393:21">codec</name><operator pos:start="393:22" pos:end="393:23">-&gt;</operator><name pos:start="393:24" pos:end="393:31">codec_id</name></name>    <operator pos:start="393:36" pos:end="393:36">=</operator> <call pos:start="393:38" pos:end="393:71"><name pos:start="393:38" pos:end="393:53">av_get_pcm_codec</name><argument_list pos:start="393:54" pos:end="393:71">(<argument pos:start="393:55" pos:end="393:66"><expr pos:start="393:55" pos:end="393:66"><name pos:start="393:55" pos:end="393:66"><name pos:start="393:55" pos:end="393:58">link</name><operator pos:start="393:59" pos:end="393:60">-&gt;</operator><name pos:start="393:61" pos:end="393:66">format</name></name></expr></argument>, <argument pos:start="393:69" pos:end="393:70"><expr pos:start="393:69" pos:end="393:70"><operator pos:start="393:69" pos:end="393:69">-</operator><literal type="number" pos:start="393:70" pos:end="393:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:93"><expr pos:start="395:13" pos:end="395:92"><name pos:start="395:13" pos:end="395:31"><name pos:start="395:13" pos:end="395:14">st</name><operator pos:start="395:15" pos:end="395:16">-&gt;</operator><name pos:start="395:17" pos:end="395:21">codec</name><operator pos:start="395:22" pos:end="395:23">-&gt;</operator><name pos:start="395:24" pos:end="395:31">channels</name></name>    <operator pos:start="395:36" pos:end="395:36">=</operator> <call pos:start="395:38" pos:end="395:92"><name pos:start="395:38" pos:end="395:70">av_get_channel_layout_nb_channels</name><argument_list pos:start="395:71" pos:end="395:92">(<argument pos:start="395:72" pos:end="395:91"><expr pos:start="395:72" pos:end="395:91"><name pos:start="395:72" pos:end="395:91"><name pos:start="395:72" pos:end="395:75">link</name><operator pos:start="395:76" pos:end="395:77">-&gt;</operator><name pos:start="395:78" pos:end="395:91">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:50"><expr pos:start="397:13" pos:end="397:49"><name pos:start="397:13" pos:end="397:33"><name pos:start="397:13" pos:end="397:14">st</name><operator pos:start="397:15" pos:end="397:16">-&gt;</operator><name pos:start="397:17" pos:end="397:21">codec</name><operator pos:start="397:22" pos:end="397:23">-&gt;</operator><name pos:start="397:24" pos:end="397:33">sample_fmt</name></name>  <operator pos:start="397:36" pos:end="397:36">=</operator> <name pos:start="397:38" pos:end="397:49"><name pos:start="397:38" pos:end="397:41">link</name><operator pos:start="397:42" pos:end="397:43">-&gt;</operator><name pos:start="397:44" pos:end="397:49">format</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:55"><expr pos:start="399:13" pos:end="399:54"><name pos:start="399:13" pos:end="399:34"><name pos:start="399:13" pos:end="399:14">st</name><operator pos:start="399:15" pos:end="399:16">-&gt;</operator><name pos:start="399:17" pos:end="399:21">codec</name><operator pos:start="399:22" pos:end="399:23">-&gt;</operator><name pos:start="399:24" pos:end="399:34">sample_rate</name></name> <operator pos:start="399:36" pos:end="399:36">=</operator> <name pos:start="399:38" pos:end="399:54"><name pos:start="399:38" pos:end="399:41">link</name><operator pos:start="399:42" pos:end="399:43">-&gt;</operator><name pos:start="399:44" pos:end="399:54">sample_rate</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:53"><expr pos:start="401:13" pos:end="401:52"><name pos:start="401:13" pos:end="401:32"><name pos:start="401:13" pos:end="401:14">st</name><operator pos:start="401:15" pos:end="401:16">-&gt;</operator><name pos:start="401:17" pos:end="401:21">codec</name><operator pos:start="401:22" pos:end="401:23">-&gt;</operator><name pos:start="401:24" pos:end="401:32">time_base</name></name>   <operator pos:start="401:36" pos:end="401:36">=</operator> <name pos:start="401:38" pos:end="401:52"><name pos:start="401:38" pos:end="401:41">link</name><operator pos:start="401:42" pos:end="401:43">-&gt;</operator><name pos:start="401:44" pos:end="401:52">time_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="403:13" pos:end="403:61"><expr pos:start="403:13" pos:end="403:60"><name pos:start="403:13" pos:end="403:37"><name pos:start="403:13" pos:end="403:14">st</name><operator pos:start="403:15" pos:end="403:16">-&gt;</operator><name pos:start="403:17" pos:end="403:21">codec</name><operator pos:start="403:22" pos:end="403:23">-&gt;</operator><name pos:start="403:24" pos:end="403:37">channel_layout</name></name> <operator pos:start="403:39" pos:end="403:39">=</operator> <name pos:start="403:41" pos:end="403:60"><name pos:start="403:41" pos:end="403:44">link</name><operator pos:start="403:45" pos:end="403:46">-&gt;</operator><name pos:start="403:47" pos:end="403:60">channel_layout</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="405:13" pos:end="411:61"><if pos:start="405:13" pos:end="411:61">if <condition pos:start="405:16" pos:end="405:56">(<expr pos:start="405:17" pos:end="405:55"><name pos:start="405:17" pos:end="405:35"><name pos:start="405:17" pos:end="405:18">st</name><operator pos:start="405:19" pos:end="405:20">-&gt;</operator><name pos:start="405:21" pos:end="405:25">codec</name><operator pos:start="405:26" pos:end="405:27">-&gt;</operator><name pos:start="405:28" pos:end="405:35">codec_id</name></name> <operator pos:start="405:37" pos:end="405:38">==</operator> <name pos:start="405:40" pos:end="405:55">AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo" pos:start="407:17" pos:end="411:61"><block_content pos:start="407:17" pos:end="411:61">

                <expr_stmt pos:start="407:17" pos:end="411:61"><expr pos:start="407:17" pos:end="411:60"><call pos:start="407:17" pos:end="411:60"><name pos:start="407:17" pos:end="407:22">av_log</name><argument_list pos:start="407:23" pos:end="411:60">(<argument pos:start="407:24" pos:end="407:28"><expr pos:start="407:24" pos:end="407:28"><name pos:start="407:24" pos:end="407:28">avctx</name></expr></argument>, <argument pos:start="407:31" pos:end="407:42"><expr pos:start="407:31" pos:end="407:42"><name pos:start="407:31" pos:end="407:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="409:24" pos:end="409:73"><expr pos:start="409:24" pos:end="409:73"><literal type="string" pos:start="409:24" pos:end="409:73">"Could not find PCM codec for sample format %s.\n"</literal></expr></argument>,

                       <argument pos:start="411:24" pos:end="411:59"><expr pos:start="411:24" pos:end="411:59"><call pos:start="411:24" pos:end="411:59"><name pos:start="411:24" pos:end="411:45">av_get_sample_fmt_name</name><argument_list pos:start="411:46" pos:end="411:59">(<argument pos:start="411:47" pos:end="411:58"><expr pos:start="411:47" pos:end="411:58"><name pos:start="411:47" pos:end="411:58"><name pos:start="411:47" pos:end="411:50">link</name><operator pos:start="411:51" pos:end="411:52">-&gt;</operator><name pos:start="411:53" pos:end="411:58">format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="419:5" pos:end="421:30"><if pos:start="419:5" pos:end="421:30">if <condition pos:start="419:8" pos:end="419:51">(<expr pos:start="419:9" pos:end="419:50"><operator pos:start="419:9" pos:end="419:9">!</operator><operator pos:start="419:10" pos:end="419:10">(</operator><name pos:start="419:11" pos:end="419:30"><name pos:start="419:11" pos:end="419:15">lavfi</name><operator pos:start="419:16" pos:end="419:17">-&gt;</operator><name pos:start="419:18" pos:end="419:30">decoded_frame</name></name> <operator pos:start="419:32" pos:end="419:32">=</operator> <call pos:start="419:34" pos:end="419:49"><name pos:start="419:34" pos:end="419:47">av_frame_alloc</name><argument_list pos:start="419:48" pos:end="419:49">()</argument_list></call><operator pos:start="419:50" pos:end="419:50">)</operator></expr>)</condition><block type="pseudo" pos:start="421:9" pos:end="421:30"><block_content pos:start="421:9" pos:end="421:30">

        <expr_stmt pos:start="421:9" pos:end="421:30"><expr pos:start="421:9" pos:end="421:29"><call pos:start="421:9" pos:end="421:29"><name pos:start="421:9" pos:end="421:12">FAIL</name><argument_list pos:start="421:13" pos:end="421:29">(<argument pos:start="421:14" pos:end="421:28"><expr pos:start="421:14" pos:end="421:28"><call pos:start="421:14" pos:end="421:28"><name pos:start="421:14" pos:end="421:20">AVERROR</name><argument_list pos:start="421:21" pos:end="421:28">(<argument pos:start="421:22" pos:end="421:27"><expr pos:start="421:22" pos:end="421:27"><name pos:start="421:22" pos:end="421:27">ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="425:1" pos:end="425:4"><name pos:start="425:1" pos:end="425:3">end</name>:</label>

    <expr_stmt pos:start="427:5" pos:end="427:22"><expr pos:start="427:5" pos:end="427:21"><call pos:start="427:5" pos:end="427:21"><name pos:start="427:5" pos:end="427:11">av_free</name><argument_list pos:start="427:12" pos:end="427:21">(<argument pos:start="427:13" pos:end="427:20"><expr pos:start="427:13" pos:end="427:20"><name pos:start="427:13" pos:end="427:20">pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:38"><expr pos:start="429:5" pos:end="429:37"><call pos:start="429:5" pos:end="429:37"><name pos:start="429:5" pos:end="429:23">avfilter_inout_free</name><argument_list pos:start="429:24" pos:end="429:37">(<argument pos:start="429:25" pos:end="429:36"><expr pos:start="429:25" pos:end="429:36"><operator pos:start="429:25" pos:end="429:25">&amp;</operator><name pos:start="429:26" pos:end="429:36">input_links</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:39"><expr pos:start="431:5" pos:end="431:38"><call pos:start="431:5" pos:end="431:38"><name pos:start="431:5" pos:end="431:23">avfilter_inout_free</name><argument_list pos:start="431:24" pos:end="431:38">(<argument pos:start="431:25" pos:end="431:37"><expr pos:start="431:25" pos:end="431:37"><operator pos:start="431:25" pos:end="431:25">&amp;</operator><name pos:start="431:26" pos:end="431:37">output_links</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="433:5" pos:end="435:32"><if pos:start="433:5" pos:end="435:32">if <condition pos:start="433:8" pos:end="433:16">(<expr pos:start="433:9" pos:end="433:15"><name pos:start="433:9" pos:end="433:11">ret</name> <operator pos:start="433:13" pos:end="433:13">&lt;</operator> <literal type="number" pos:start="433:15" pos:end="433:15">0</literal></expr>)</condition><block type="pseudo" pos:start="435:9" pos:end="435:32"><block_content pos:start="435:9" pos:end="435:32">

        <expr_stmt pos:start="435:9" pos:end="435:32"><expr pos:start="435:9" pos:end="435:31"><call pos:start="435:9" pos:end="435:31"><name pos:start="435:9" pos:end="435:24">lavfi_read_close</name><argument_list pos:start="435:25" pos:end="435:31">(<argument pos:start="435:26" pos:end="435:30"><expr pos:start="435:26" pos:end="435:30"><name pos:start="435:26" pos:end="435:30">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="437:5" pos:end="437:15">return <expr pos:start="437:12" pos:end="437:14"><name pos:start="437:12" pos:end="437:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
