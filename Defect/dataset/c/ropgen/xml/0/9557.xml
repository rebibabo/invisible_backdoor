<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9557.c" pos:tabs="8"><function pos:start="1:1" pos:end="525:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">decode_micromips_opc</name> <parameter_list pos:start="1:33" pos:end="1:70">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:45">CPUMIPSState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">env</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:69"><decl pos:start="1:53" pos:end="1:69"><type pos:start="1:53" pos:end="1:69"><name pos:start="1:53" pos:end="1:64">DisasContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="525:1">{<block_content pos:start="5:5" pos:end="523:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">op</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:59">/* make sure instructions are on a halfword boundary */</comment>

    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:11">ctx</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:15">pc</name></name> <operator pos:start="11:17" pos:end="11:17">&amp;</operator> <literal type="number" pos:start="11:19" pos:end="11:21">0x1</literal></expr>)</condition> <block pos:start="11:24" pos:end="21:5">{<block_content pos:start="13:9" pos:end="19:17">

        <expr_stmt pos:start="13:9" pos:end="13:36"><expr pos:start="13:9" pos:end="13:35"><name pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:11">env</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:25">CP0_BadVAddr</name></name> <operator pos:start="13:27" pos:end="13:27">=</operator> <name pos:start="13:29" pos:end="13:35"><name pos:start="13:29" pos:end="13:31">ctx</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:35">pc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:43"><expr pos:start="15:9" pos:end="15:42"><call pos:start="15:9" pos:end="15:42"><name pos:start="15:9" pos:end="15:26">generate_exception</name><argument_list pos:start="15:27" pos:end="15:42">(<argument pos:start="15:28" pos:end="15:30"><expr pos:start="15:28" pos:end="15:30"><name pos:start="15:28" pos:end="15:30">ctx</name></expr></argument>, <argument pos:start="15:33" pos:end="15:41"><expr pos:start="15:33" pos:end="15:41"><name pos:start="15:33" pos:end="15:41">EXCP_AdEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:11">ctx</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:19">bstate</name></name> <operator pos:start="17:21" pos:end="17:21">=</operator> <name pos:start="17:23" pos:end="17:29">BS_STOP</name></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">2</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:6">op</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <operator pos:start="25:10" pos:end="25:10">(</operator><name pos:start="25:11" pos:end="25:21"><name pos:start="25:11" pos:end="25:13">ctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:21">opcode</name></name> <operator pos:start="25:23" pos:end="25:24">&gt;&gt;</operator> <literal type="number" pos:start="25:26" pos:end="25:27">10</literal><operator pos:start="25:28" pos:end="25:28">)</operator> <operator pos:start="25:30" pos:end="25:30">&amp;</operator> <literal type="number" pos:start="25:32" pos:end="25:35">0x3f</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:61">/* Enforce properly-sized instructions in a delay slot */</comment>

    <if_stmt pos:start="29:5" pos:end="95:5"><if pos:start="29:5" pos:end="95:5">if <condition pos:start="29:8" pos:end="29:44">(<expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:11">ctx</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:19">hflags</name></name> <operator pos:start="29:21" pos:end="29:21">&amp;</operator> <name pos:start="29:23" pos:end="29:43">MIPS_HFLAG_BDS_STRICT</name></expr>)</condition> <block pos:start="29:46" pos:end="95:5">{<block_content pos:start="31:9" pos:end="93:9">

        <switch pos:start="31:9" pos:end="93:9">switch <condition pos:start="31:16" pos:end="31:25">(<expr pos:start="31:17" pos:end="31:24"><name pos:start="31:17" pos:end="31:18">op</name> <operator pos:start="31:20" pos:end="31:20">&amp;</operator> <literal type="number" pos:start="31:22" pos:end="31:24">0x7</literal></expr>)</condition> <block pos:start="31:27" pos:end="93:9">{<block_content pos:start="33:9" pos:end="91:18"> <comment type="block" pos:start="31:29" pos:end="31:46">/* MSB-3..MSB-5 */</comment>

        <case pos:start="33:9" pos:end="33:15">case <expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>:</case>

        <comment type="block" pos:start="35:9" pos:end="35:48">/* POOL32A, POOL32B, POOL32I, POOL32C */</comment>

        <case pos:start="37:9" pos:end="37:15">case <expr pos:start="37:14" pos:end="37:14"><literal type="number" pos:start="37:14" pos:end="37:14">4</literal></expr>:</case>

        <comment type="block" pos:start="39:9" pos:end="39:77">/* ADDI32, ADDIU32, ORI32, XORI32, SLTI32, SLTIU32, ANDI32, JALX32 */</comment>

        <case pos:start="41:9" pos:end="41:15">case <expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">5</literal></expr>:</case>

        <comment type="block" pos:start="43:9" pos:end="43:69">/* LBU32, LHU32, POOL32F, JALS32, BEQ32, BNE32, J32, JAL32 */</comment>

        <case pos:start="45:9" pos:end="45:15">case <expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">6</literal></expr>:</case>

        <comment type="block" pos:start="47:9" pos:end="47:55">/* SB32, SH32, ADDIUPC, SWC132, SDC132, SW32 */</comment>

        <case pos:start="49:9" pos:end="49:15">case <expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">7</literal></expr>:</case>

        <comment type="block" pos:start="51:9" pos:end="51:46">/* LB32, LH32, LWC132, LDC132, LW32 */</comment>

            <if_stmt pos:start="53:13" pos:end="63:13"><if pos:start="53:13" pos:end="63:13">if <condition pos:start="53:16" pos:end="53:47">(<expr pos:start="53:17" pos:end="53:46"><name pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:19">ctx</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:27">hflags</name></name> <operator pos:start="53:29" pos:end="53:29">&amp;</operator> <name pos:start="53:31" pos:end="53:46">MIPS_HFLAG_BDS16</name></expr>)</condition> <block pos:start="53:49" pos:end="63:13">{<block_content pos:start="55:17" pos:end="61:25">

                <expr_stmt pos:start="55:17" pos:end="55:49"><expr pos:start="55:17" pos:end="55:48"><call pos:start="55:17" pos:end="55:48"><name pos:start="55:17" pos:end="55:34">generate_exception</name><argument_list pos:start="55:35" pos:end="55:48">(<argument pos:start="55:36" pos:end="55:38"><expr pos:start="55:36" pos:end="55:38"><name pos:start="55:36" pos:end="55:38">ctx</name></expr></argument>, <argument pos:start="55:41" pos:end="55:47"><expr pos:start="55:41" pos:end="55:47"><name pos:start="55:41" pos:end="55:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="57:17" pos:end="57:67">/* Just stop translation; the user is confused.  */</comment>

                <expr_stmt pos:start="59:17" pos:end="59:38"><expr pos:start="59:17" pos:end="59:37"><name pos:start="59:17" pos:end="59:27"><name pos:start="59:17" pos:end="59:19">ctx</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:27">bstate</name></name> <operator pos:start="59:29" pos:end="59:29">=</operator> <name pos:start="59:31" pos:end="59:37">BS_STOP</name></expr>;</expr_stmt>

                <return pos:start="61:17" pos:end="61:25">return <expr pos:start="61:24" pos:end="61:24"><literal type="number" pos:start="61:24" pos:end="61:24">2</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <case pos:start="67:9" pos:end="67:15">case <expr pos:start="67:14" pos:end="67:14"><literal type="number" pos:start="67:14" pos:end="67:14">1</literal></expr>:</case>

        <comment type="block" pos:start="69:9" pos:end="69:56">/* POOL16A, POOL16B, POOL16C, LWGP16, POOL16F */</comment>

        <case pos:start="71:9" pos:end="71:15">case <expr pos:start="71:14" pos:end="71:14"><literal type="number" pos:start="71:14" pos:end="71:14">2</literal></expr>:</case>

        <comment type="block" pos:start="73:9" pos:end="73:66">/* LBU16, LHU16, LWSP16, LW16, SB16, SH16, SWSP16, SW16 */</comment>

        <case pos:start="75:9" pos:end="75:15">case <expr pos:start="75:14" pos:end="75:14"><literal type="number" pos:start="75:14" pos:end="75:14">3</literal></expr>:</case>

        <comment type="block" pos:start="77:9" pos:end="77:73">/* MOVE16, ANDI16, POOL16D, POOL16E, BEQZ16, BNEZ16, B16, LI16 */</comment>

            <if_stmt pos:start="79:13" pos:end="89:13"><if pos:start="79:13" pos:end="89:13">if <condition pos:start="79:16" pos:end="79:47">(<expr pos:start="79:17" pos:end="79:46"><name pos:start="79:17" pos:end="79:27"><name pos:start="79:17" pos:end="79:19">ctx</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:27">hflags</name></name> <operator pos:start="79:29" pos:end="79:29">&amp;</operator> <name pos:start="79:31" pos:end="79:46">MIPS_HFLAG_BDS32</name></expr>)</condition> <block pos:start="79:49" pos:end="89:13">{<block_content pos:start="81:17" pos:end="87:25">

                <expr_stmt pos:start="81:17" pos:end="81:49"><expr pos:start="81:17" pos:end="81:48"><call pos:start="81:17" pos:end="81:48"><name pos:start="81:17" pos:end="81:34">generate_exception</name><argument_list pos:start="81:35" pos:end="81:48">(<argument pos:start="81:36" pos:end="81:38"><expr pos:start="81:36" pos:end="81:38"><name pos:start="81:36" pos:end="81:38">ctx</name></expr></argument>, <argument pos:start="81:41" pos:end="81:47"><expr pos:start="81:41" pos:end="81:47"><name pos:start="81:41" pos:end="81:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="83:17" pos:end="83:67">/* Just stop translation; the user is confused.  */</comment>

                <expr_stmt pos:start="85:17" pos:end="85:38"><expr pos:start="85:17" pos:end="85:37"><name pos:start="85:17" pos:end="85:27"><name pos:start="85:17" pos:end="85:19">ctx</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:27">bstate</name></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <name pos:start="85:31" pos:end="85:37">BS_STOP</name></expr>;</expr_stmt>

                <return pos:start="87:17" pos:end="87:25">return <expr pos:start="87:24" pos:end="87:24"><literal type="number" pos:start="87:24" pos:end="87:24">2</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="99:5" pos:end="519:5">switch <condition pos:start="99:12" pos:end="99:15">(<expr pos:start="99:13" pos:end="99:14"><name pos:start="99:13" pos:end="99:14">op</name></expr>)</condition> <block pos:start="99:17" pos:end="519:5">{<block_content pos:start="101:5" pos:end="517:17">

    <case pos:start="101:5" pos:end="101:17">case <expr pos:start="101:10" pos:end="101:16"><name pos:start="101:10" pos:end="101:16">POOL16A</name></expr>:</case>

        <block pos:start="103:9" pos:end="135:9">{<block_content pos:start="105:13" pos:end="133:46">

            <decl_stmt pos:start="105:13" pos:end="105:50"><decl pos:start="105:13" pos:end="105:49"><type pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">int</name></type> <name pos:start="105:17" pos:end="105:18">rd</name> <init pos:start="105:20" pos:end="105:49">= <expr pos:start="105:22" pos:end="105:49"><call pos:start="105:22" pos:end="105:49"><name pos:start="105:22" pos:end="105:26">mmreg</name><argument_list pos:start="105:27" pos:end="105:49">(<argument pos:start="105:28" pos:end="105:48"><expr pos:start="105:28" pos:end="105:48"><call pos:start="105:28" pos:end="105:48"><name pos:start="105:28" pos:end="105:35">uMIPS_RD</name><argument_list pos:start="105:36" pos:end="105:48">(<argument pos:start="105:37" pos:end="105:47"><expr pos:start="105:37" pos:end="105:47"><name pos:start="105:37" pos:end="105:47"><name pos:start="105:37" pos:end="105:39">ctx</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="107:13" pos:end="107:52"><decl pos:start="107:13" pos:end="107:51"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:19">rs1</name> <init pos:start="107:21" pos:end="107:51">= <expr pos:start="107:23" pos:end="107:51"><call pos:start="107:23" pos:end="107:51"><name pos:start="107:23" pos:end="107:27">mmreg</name><argument_list pos:start="107:28" pos:end="107:51">(<argument pos:start="107:29" pos:end="107:50"><expr pos:start="107:29" pos:end="107:50"><call pos:start="107:29" pos:end="107:50"><name pos:start="107:29" pos:end="107:37">uMIPS_RS1</name><argument_list pos:start="107:38" pos:end="107:50">(<argument pos:start="107:39" pos:end="107:49"><expr pos:start="107:39" pos:end="107:49"><name pos:start="107:39" pos:end="107:49"><name pos:start="107:39" pos:end="107:41">ctx</name><operator pos:start="107:42" pos:end="107:43">-&gt;</operator><name pos:start="107:44" pos:end="107:49">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="109:13" pos:end="109:52"><decl pos:start="109:13" pos:end="109:51"><type pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">int</name></type> <name pos:start="109:17" pos:end="109:19">rs2</name> <init pos:start="109:21" pos:end="109:51">= <expr pos:start="109:23" pos:end="109:51"><call pos:start="109:23" pos:end="109:51"><name pos:start="109:23" pos:end="109:27">mmreg</name><argument_list pos:start="109:28" pos:end="109:51">(<argument pos:start="109:29" pos:end="109:50"><expr pos:start="109:29" pos:end="109:50"><call pos:start="109:29" pos:end="109:50"><name pos:start="109:29" pos:end="109:37">uMIPS_RS2</name><argument_list pos:start="109:38" pos:end="109:50">(<argument pos:start="109:39" pos:end="109:49"><expr pos:start="109:39" pos:end="109:49"><name pos:start="109:39" pos:end="109:49"><name pos:start="109:39" pos:end="109:41">ctx</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:49">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="111:13" pos:end="111:29"><decl pos:start="111:13" pos:end="111:28"><type pos:start="111:13" pos:end="111:20"><name pos:start="111:13" pos:end="111:20">uint32_t</name></type> <name pos:start="111:22" pos:end="111:24">opc</name> <init pos:start="111:26" pos:end="111:28">= <expr pos:start="111:28" pos:end="111:28"><literal type="number" pos:start="111:28" pos:end="111:28">0</literal></expr></init></decl>;</decl_stmt>



            <switch pos:start="115:13" pos:end="129:13">switch <condition pos:start="115:20" pos:end="115:38">(<expr pos:start="115:21" pos:end="115:37"><name pos:start="115:21" pos:end="115:31"><name pos:start="115:21" pos:end="115:23">ctx</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:31">opcode</name></name> <operator pos:start="115:33" pos:end="115:33">&amp;</operator> <literal type="number" pos:start="115:35" pos:end="115:37">0x1</literal></expr>)</condition> <block pos:start="115:40" pos:end="129:13">{<block_content pos:start="117:13" pos:end="127:22">

            <case pos:start="117:13" pos:end="117:24">case <expr pos:start="117:18" pos:end="117:23"><name pos:start="117:18" pos:end="117:23">ADDU16</name></expr>:</case>

                <expr_stmt pos:start="119:17" pos:end="119:31"><expr pos:start="119:17" pos:end="119:30"><name pos:start="119:17" pos:end="119:19">opc</name> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:30">OPC_ADDU</name></expr>;</expr_stmt>

                <break pos:start="121:17" pos:end="121:22">break;</break>

            <case pos:start="123:13" pos:end="123:24">case <expr pos:start="123:18" pos:end="123:23"><name pos:start="123:18" pos:end="123:23">SUBU16</name></expr>:</case>

                <expr_stmt pos:start="125:17" pos:end="125:31"><expr pos:start="125:17" pos:end="125:30"><name pos:start="125:17" pos:end="125:19">opc</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <name pos:start="125:23" pos:end="125:30">OPC_SUBU</name></expr>;</expr_stmt>

                <break pos:start="127:17" pos:end="127:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="133:13" pos:end="133:46"><expr pos:start="133:13" pos:end="133:45"><call pos:start="133:13" pos:end="133:45"><name pos:start="133:13" pos:end="133:21">gen_arith</name><argument_list pos:start="133:22" pos:end="133:45">(<argument pos:start="133:23" pos:end="133:25"><expr pos:start="133:23" pos:end="133:25"><name pos:start="133:23" pos:end="133:25">ctx</name></expr></argument>, <argument pos:start="133:28" pos:end="133:30"><expr pos:start="133:28" pos:end="133:30"><name pos:start="133:28" pos:end="133:30">opc</name></expr></argument>, <argument pos:start="133:33" pos:end="133:34"><expr pos:start="133:33" pos:end="133:34"><name pos:start="133:33" pos:end="133:34">rd</name></expr></argument>, <argument pos:start="133:37" pos:end="133:39"><expr pos:start="133:37" pos:end="133:39"><name pos:start="133:37" pos:end="133:39">rs1</name></expr></argument>, <argument pos:start="133:42" pos:end="133:44"><expr pos:start="133:42" pos:end="133:44"><name pos:start="133:42" pos:end="133:44">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:17">case <expr pos:start="139:10" pos:end="139:16"><name pos:start="139:10" pos:end="139:16">POOL16B</name></expr>:</case>

        <block pos:start="141:9" pos:end="175:9">{<block_content pos:start="143:13" pos:end="173:52">

            <decl_stmt pos:start="143:13" pos:end="143:50"><decl pos:start="143:13" pos:end="143:49"><type pos:start="143:13" pos:end="143:15"><name pos:start="143:13" pos:end="143:15">int</name></type> <name pos:start="143:17" pos:end="143:18">rd</name> <init pos:start="143:20" pos:end="143:49">= <expr pos:start="143:22" pos:end="143:49"><call pos:start="143:22" pos:end="143:49"><name pos:start="143:22" pos:end="143:26">mmreg</name><argument_list pos:start="143:27" pos:end="143:49">(<argument pos:start="143:28" pos:end="143:48"><expr pos:start="143:28" pos:end="143:48"><call pos:start="143:28" pos:end="143:48"><name pos:start="143:28" pos:end="143:35">uMIPS_RD</name><argument_list pos:start="143:36" pos:end="143:48">(<argument pos:start="143:37" pos:end="143:47"><expr pos:start="143:37" pos:end="143:47"><name pos:start="143:37" pos:end="143:47"><name pos:start="143:37" pos:end="143:39">ctx</name><operator pos:start="143:40" pos:end="143:41">-&gt;</operator><name pos:start="143:42" pos:end="143:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="145:13" pos:end="145:50"><decl pos:start="145:13" pos:end="145:49"><type pos:start="145:13" pos:end="145:15"><name pos:start="145:13" pos:end="145:15">int</name></type> <name pos:start="145:17" pos:end="145:18">rs</name> <init pos:start="145:20" pos:end="145:49">= <expr pos:start="145:22" pos:end="145:49"><call pos:start="145:22" pos:end="145:49"><name pos:start="145:22" pos:end="145:26">mmreg</name><argument_list pos:start="145:27" pos:end="145:49">(<argument pos:start="145:28" pos:end="145:48"><expr pos:start="145:28" pos:end="145:48"><call pos:start="145:28" pos:end="145:48"><name pos:start="145:28" pos:end="145:35">uMIPS_RS</name><argument_list pos:start="145:36" pos:end="145:48">(<argument pos:start="145:37" pos:end="145:47"><expr pos:start="145:37" pos:end="145:47"><name pos:start="145:37" pos:end="145:47"><name pos:start="145:37" pos:end="145:39">ctx</name><operator pos:start="145:40" pos:end="145:41">-&gt;</operator><name pos:start="145:42" pos:end="145:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="147:13" pos:end="147:50"><decl pos:start="147:13" pos:end="147:49"><type pos:start="147:13" pos:end="147:15"><name pos:start="147:13" pos:end="147:15">int</name></type> <name pos:start="147:17" pos:end="147:22">amount</name> <init pos:start="147:24" pos:end="147:49">= <expr pos:start="147:26" pos:end="147:49"><operator pos:start="147:26" pos:end="147:26">(</operator><name pos:start="147:27" pos:end="147:37"><name pos:start="147:27" pos:end="147:29">ctx</name><operator pos:start="147:30" pos:end="147:31">-&gt;</operator><name pos:start="147:32" pos:end="147:37">opcode</name></name> <operator pos:start="147:39" pos:end="147:40">&gt;&gt;</operator> <literal type="number" pos:start="147:42" pos:end="147:42">1</literal><operator pos:start="147:43" pos:end="147:43">)</operator> <operator pos:start="147:45" pos:end="147:45">&amp;</operator> <literal type="number" pos:start="147:47" pos:end="147:49">0x7</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="149:13" pos:end="149:29"><decl pos:start="149:13" pos:end="149:28"><type pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:20">uint32_t</name></type> <name pos:start="149:22" pos:end="149:24">opc</name> <init pos:start="149:26" pos:end="149:28">= <expr pos:start="149:28" pos:end="149:28"><literal type="number" pos:start="149:28" pos:end="149:28">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:46"><expr pos:start="151:13" pos:end="151:45"><name pos:start="151:13" pos:end="151:18">amount</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <ternary pos:start="151:22" pos:end="151:45"><condition pos:start="151:22" pos:end="151:34"><expr pos:start="151:22" pos:end="151:32"><name pos:start="151:22" pos:end="151:27">amount</name> <operator pos:start="151:29" pos:end="151:30">==</operator> <literal type="number" pos:start="151:32" pos:end="151:32">0</literal></expr> ?</condition><then pos:start="151:36" pos:end="151:36"> <expr pos:start="151:36" pos:end="151:36"><literal type="number" pos:start="151:36" pos:end="151:36">8</literal></expr> </then><else pos:start="151:38" pos:end="151:45">: <expr pos:start="151:40" pos:end="151:45"><name pos:start="151:40" pos:end="151:45">amount</name></expr></else></ternary></expr>;</expr_stmt>



            <switch pos:start="155:13" pos:end="169:13">switch <condition pos:start="155:20" pos:end="155:38">(<expr pos:start="155:21" pos:end="155:37"><name pos:start="155:21" pos:end="155:31"><name pos:start="155:21" pos:end="155:23">ctx</name><operator pos:start="155:24" pos:end="155:25">-&gt;</operator><name pos:start="155:26" pos:end="155:31">opcode</name></name> <operator pos:start="155:33" pos:end="155:33">&amp;</operator> <literal type="number" pos:start="155:35" pos:end="155:37">0x1</literal></expr>)</condition> <block pos:start="155:40" pos:end="169:13">{<block_content pos:start="157:13" pos:end="167:22">

            <case pos:start="157:13" pos:end="157:23">case <expr pos:start="157:18" pos:end="157:22"><name pos:start="157:18" pos:end="157:22">SLL16</name></expr>:</case>

                <expr_stmt pos:start="159:17" pos:end="159:30"><expr pos:start="159:17" pos:end="159:29"><name pos:start="159:17" pos:end="159:19">opc</name> <operator pos:start="159:21" pos:end="159:21">=</operator> <name pos:start="159:23" pos:end="159:29">OPC_SLL</name></expr>;</expr_stmt>

                <break pos:start="161:17" pos:end="161:22">break;</break>

            <case pos:start="163:13" pos:end="163:23">case <expr pos:start="163:18" pos:end="163:22"><name pos:start="163:18" pos:end="163:22">SRL16</name></expr>:</case>

                <expr_stmt pos:start="165:17" pos:end="165:30"><expr pos:start="165:17" pos:end="165:29"><name pos:start="165:17" pos:end="165:19">opc</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <name pos:start="165:23" pos:end="165:29">OPC_SRL</name></expr>;</expr_stmt>

                <break pos:start="167:17" pos:end="167:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="173:13" pos:end="173:52"><expr pos:start="173:13" pos:end="173:51"><call pos:start="173:13" pos:end="173:51"><name pos:start="173:13" pos:end="173:25">gen_shift_imm</name><argument_list pos:start="173:26" pos:end="173:51">(<argument pos:start="173:27" pos:end="173:29"><expr pos:start="173:27" pos:end="173:29"><name pos:start="173:27" pos:end="173:29">ctx</name></expr></argument>, <argument pos:start="173:32" pos:end="173:34"><expr pos:start="173:32" pos:end="173:34"><name pos:start="173:32" pos:end="173:34">opc</name></expr></argument>, <argument pos:start="173:37" pos:end="173:38"><expr pos:start="173:37" pos:end="173:38"><name pos:start="173:37" pos:end="173:38">rd</name></expr></argument>, <argument pos:start="173:41" pos:end="173:42"><expr pos:start="173:41" pos:end="173:42"><name pos:start="173:41" pos:end="173:42">rs</name></expr></argument>, <argument pos:start="173:45" pos:end="173:50"><expr pos:start="173:45" pos:end="173:50"><name pos:start="173:45" pos:end="173:50">amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="177:9" pos:end="177:14">break;</break>

    <case pos:start="179:5" pos:end="179:17">case <expr pos:start="179:10" pos:end="179:16"><name pos:start="179:10" pos:end="179:16">POOL16C</name></expr>:</case>

        <expr_stmt pos:start="181:9" pos:end="181:30"><expr pos:start="181:9" pos:end="181:29"><call pos:start="181:9" pos:end="181:29"><name pos:start="181:9" pos:end="181:24">gen_pool16c_insn</name><argument_list pos:start="181:25" pos:end="181:29">(<argument pos:start="181:26" pos:end="181:28"><expr pos:start="181:26" pos:end="181:28"><name pos:start="181:26" pos:end="181:28">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="183:9" pos:end="183:14">break;</break>

    <case pos:start="185:5" pos:end="185:16">case <expr pos:start="185:10" pos:end="185:15"><name pos:start="185:10" pos:end="185:15">LWGP16</name></expr>:</case>

        <block pos:start="187:9" pos:end="199:9">{<block_content pos:start="189:13" pos:end="197:48">

            <decl_stmt pos:start="189:13" pos:end="189:50"><decl pos:start="189:13" pos:end="189:49"><type pos:start="189:13" pos:end="189:15"><name pos:start="189:13" pos:end="189:15">int</name></type> <name pos:start="189:17" pos:end="189:18">rd</name> <init pos:start="189:20" pos:end="189:49">= <expr pos:start="189:22" pos:end="189:49"><call pos:start="189:22" pos:end="189:49"><name pos:start="189:22" pos:end="189:26">mmreg</name><argument_list pos:start="189:27" pos:end="189:49">(<argument pos:start="189:28" pos:end="189:48"><expr pos:start="189:28" pos:end="189:48"><call pos:start="189:28" pos:end="189:48"><name pos:start="189:28" pos:end="189:35">uMIPS_RD</name><argument_list pos:start="189:36" pos:end="189:48">(<argument pos:start="189:37" pos:end="189:47"><expr pos:start="189:37" pos:end="189:47"><name pos:start="189:37" pos:end="189:47"><name pos:start="189:37" pos:end="189:39">ctx</name><operator pos:start="189:40" pos:end="189:41">-&gt;</operator><name pos:start="189:42" pos:end="189:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="191:13" pos:end="191:24"><decl pos:start="191:13" pos:end="191:23"><type pos:start="191:13" pos:end="191:15"><name pos:start="191:13" pos:end="191:15">int</name></type> <name pos:start="191:17" pos:end="191:18">rb</name> <init pos:start="191:20" pos:end="191:23">= <expr pos:start="191:22" pos:end="191:23"><literal type="number" pos:start="191:22" pos:end="191:23">28</literal></expr></init></decl>;</decl_stmt>            <comment type="block" pos:start="191:37" pos:end="191:44">/* GP */</comment>

            <decl_stmt pos:start="193:13" pos:end="193:58"><decl pos:start="193:13" pos:end="193:57"><type pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:19">int16_t</name></type> <name pos:start="193:21" pos:end="193:26">offset</name> <init pos:start="193:28" pos:end="193:57">= <expr pos:start="193:30" pos:end="193:57"><call pos:start="193:30" pos:end="193:52"><name pos:start="193:30" pos:end="193:33">SIMM</name><argument_list pos:start="193:34" pos:end="193:52">(<argument pos:start="193:35" pos:end="193:45"><expr pos:start="193:35" pos:end="193:45"><name pos:start="193:35" pos:end="193:45"><name pos:start="193:35" pos:end="193:37">ctx</name><operator pos:start="193:38" pos:end="193:39">-&gt;</operator><name pos:start="193:40" pos:end="193:45">opcode</name></name></expr></argument>, <argument pos:start="193:48" pos:end="193:48"><expr pos:start="193:48" pos:end="193:48"><literal type="number" pos:start="193:48" pos:end="193:48">0</literal></expr></argument>, <argument pos:start="193:51" pos:end="193:51"><expr pos:start="193:51" pos:end="193:51"><literal type="number" pos:start="193:51" pos:end="193:51">7</literal></expr></argument>)</argument_list></call> <operator pos:start="193:54" pos:end="193:55">&lt;&lt;</operator> <literal type="number" pos:start="193:57" pos:end="193:57">2</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="197:13" pos:end="197:48"><expr pos:start="197:13" pos:end="197:47"><call pos:start="197:13" pos:end="197:47"><name pos:start="197:13" pos:end="197:18">gen_ld</name><argument_list pos:start="197:19" pos:end="197:47">(<argument pos:start="197:20" pos:end="197:22"><expr pos:start="197:20" pos:end="197:22"><name pos:start="197:20" pos:end="197:22">ctx</name></expr></argument>, <argument pos:start="197:25" pos:end="197:30"><expr pos:start="197:25" pos:end="197:30"><name pos:start="197:25" pos:end="197:30">OPC_LW</name></expr></argument>, <argument pos:start="197:33" pos:end="197:34"><expr pos:start="197:33" pos:end="197:34"><name pos:start="197:33" pos:end="197:34">rd</name></expr></argument>, <argument pos:start="197:37" pos:end="197:38"><expr pos:start="197:37" pos:end="197:38"><name pos:start="197:37" pos:end="197:38">rb</name></expr></argument>, <argument pos:start="197:41" pos:end="197:46"><expr pos:start="197:41" pos:end="197:46"><name pos:start="197:41" pos:end="197:46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="201:9" pos:end="201:14">break;</break>

    <case pos:start="203:5" pos:end="203:17">case <expr pos:start="203:10" pos:end="203:16"><name pos:start="203:10" pos:end="203:16">POOL16F</name></expr>:</case>

        <expr_stmt pos:start="205:9" pos:end="205:50"><expr pos:start="205:9" pos:end="205:49"><call pos:start="205:9" pos:end="205:49"><name pos:start="205:9" pos:end="205:30">check_insn_opc_removed</name><argument_list pos:start="205:31" pos:end="205:49">(<argument pos:start="205:32" pos:end="205:34"><expr pos:start="205:32" pos:end="205:34"><name pos:start="205:32" pos:end="205:34">ctx</name></expr></argument>, <argument pos:start="205:37" pos:end="205:48"><expr pos:start="205:37" pos:end="205:48"><name pos:start="205:37" pos:end="205:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="207:9" pos:end="245:9"><if pos:start="207:9" pos:end="211:9">if <condition pos:start="207:12" pos:end="207:28">(<expr pos:start="207:13" pos:end="207:27"><name pos:start="207:13" pos:end="207:23"><name pos:start="207:13" pos:end="207:15">ctx</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:23">opcode</name></name> <operator pos:start="207:25" pos:end="207:25">&amp;</operator> <literal type="number" pos:start="207:27" pos:end="207:27">1</literal></expr>)</condition> <block pos:start="207:30" pos:end="211:9">{<block_content pos:start="209:13" pos:end="209:45">

            <expr_stmt pos:start="209:13" pos:end="209:45"><expr pos:start="209:13" pos:end="209:44"><call pos:start="209:13" pos:end="209:44"><name pos:start="209:13" pos:end="209:30">generate_exception</name><argument_list pos:start="209:31" pos:end="209:44">(<argument pos:start="209:32" pos:end="209:34"><expr pos:start="209:32" pos:end="209:34"><name pos:start="209:32" pos:end="209:34">ctx</name></expr></argument>, <argument pos:start="209:37" pos:end="209:43"><expr pos:start="209:37" pos:end="209:43"><name pos:start="209:37" pos:end="209:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="211:11" pos:end="245:9">else <block pos:start="211:16" pos:end="245:9">{<block_content pos:start="215:13" pos:end="243:48">

            <comment type="block" pos:start="213:13" pos:end="213:23">/* MOVEP */</comment>

            <decl_stmt pos:start="215:13" pos:end="215:49"><decl pos:start="215:13" pos:end="215:48"><type pos:start="215:13" pos:end="215:15"><name pos:start="215:13" pos:end="215:15">int</name></type> <name pos:start="215:17" pos:end="215:24">enc_dest</name> <init pos:start="215:26" pos:end="215:48">= <expr pos:start="215:28" pos:end="215:48"><call pos:start="215:28" pos:end="215:48"><name pos:start="215:28" pos:end="215:35">uMIPS_RD</name><argument_list pos:start="215:36" pos:end="215:48">(<argument pos:start="215:37" pos:end="215:47"><expr pos:start="215:37" pos:end="215:47"><name pos:start="215:37" pos:end="215:47"><name pos:start="215:37" pos:end="215:39">ctx</name><operator pos:start="215:40" pos:end="215:41">-&gt;</operator><name pos:start="215:42" pos:end="215:47">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="217:13" pos:end="217:48"><decl pos:start="217:13" pos:end="217:47"><type pos:start="217:13" pos:end="217:15"><name pos:start="217:13" pos:end="217:15">int</name></type> <name pos:start="217:17" pos:end="217:22">enc_rt</name> <init pos:start="217:24" pos:end="217:47">= <expr pos:start="217:26" pos:end="217:47"><call pos:start="217:26" pos:end="217:47"><name pos:start="217:26" pos:end="217:34">uMIPS_RS2</name><argument_list pos:start="217:35" pos:end="217:47">(<argument pos:start="217:36" pos:end="217:46"><expr pos:start="217:36" pos:end="217:46"><name pos:start="217:36" pos:end="217:46"><name pos:start="217:36" pos:end="217:38">ctx</name><operator pos:start="217:39" pos:end="217:40">-&gt;</operator><name pos:start="217:41" pos:end="217:46">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="219:13" pos:end="219:48"><decl pos:start="219:13" pos:end="219:47"><type pos:start="219:13" pos:end="219:15"><name pos:start="219:13" pos:end="219:15">int</name></type> <name pos:start="219:17" pos:end="219:22">enc_rs</name> <init pos:start="219:24" pos:end="219:47">= <expr pos:start="219:26" pos:end="219:47"><call pos:start="219:26" pos:end="219:47"><name pos:start="219:26" pos:end="219:34">uMIPS_RS1</name><argument_list pos:start="219:35" pos:end="219:47">(<argument pos:start="219:36" pos:end="219:46"><expr pos:start="219:36" pos:end="219:46"><name pos:start="219:36" pos:end="219:46"><name pos:start="219:36" pos:end="219:38">ctx</name><operator pos:start="219:39" pos:end="219:40">-&gt;</operator><name pos:start="219:41" pos:end="219:46">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="221:13" pos:end="221:31"><decl pos:start="221:13" pos:end="221:18"><type pos:start="221:13" pos:end="221:15"><name pos:start="221:13" pos:end="221:15">int</name></type> <name pos:start="221:17" pos:end="221:18">rd</name></decl>, <decl pos:start="221:21" pos:end="221:22"><type ref="prev" pos:start="221:13" pos:end="221:15"/><name pos:start="221:21" pos:end="221:22">rs</name></decl>, <decl pos:start="221:25" pos:end="221:26"><type ref="prev" pos:start="221:13" pos:end="221:15"/><name pos:start="221:25" pos:end="221:26">re</name></decl>, <decl pos:start="221:29" pos:end="221:30"><type ref="prev" pos:start="221:13" pos:end="221:15"/><name pos:start="221:29" pos:end="221:30">rt</name></decl>;</decl_stmt>

            <decl_stmt pos:start="223:13" pos:end="223:67"><decl pos:start="223:13" pos:end="223:66"><type pos:start="223:13" pos:end="223:28"><specifier pos:start="223:13" pos:end="223:18">static</specifier> <specifier pos:start="223:20" pos:end="223:24">const</specifier> <name pos:start="223:26" pos:end="223:28">int</name></type> <name pos:start="223:30" pos:end="223:37"><name pos:start="223:30" pos:end="223:35">rd_enc</name><index pos:start="223:36" pos:end="223:37">[]</index></name> <init pos:start="223:39" pos:end="223:66">= <expr pos:start="223:41" pos:end="223:66"><block pos:start="223:41" pos:end="223:66">{ <expr pos:start="223:43" pos:end="223:43"><literal type="number" pos:start="223:43" pos:end="223:43">5</literal></expr>, <expr pos:start="223:46" pos:end="223:46"><literal type="number" pos:start="223:46" pos:end="223:46">5</literal></expr>, <expr pos:start="223:49" pos:end="223:49"><literal type="number" pos:start="223:49" pos:end="223:49">6</literal></expr>, <expr pos:start="223:52" pos:end="223:52"><literal type="number" pos:start="223:52" pos:end="223:52">4</literal></expr>, <expr pos:start="223:55" pos:end="223:55"><literal type="number" pos:start="223:55" pos:end="223:55">4</literal></expr>, <expr pos:start="223:58" pos:end="223:58"><literal type="number" pos:start="223:58" pos:end="223:58">4</literal></expr>, <expr pos:start="223:61" pos:end="223:61"><literal type="number" pos:start="223:61" pos:end="223:61">4</literal></expr>, <expr pos:start="223:64" pos:end="223:64"><literal type="number" pos:start="223:64" pos:end="223:64">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="225:13" pos:end="225:69"><decl pos:start="225:13" pos:end="225:68"><type pos:start="225:13" pos:end="225:28"><specifier pos:start="225:13" pos:end="225:18">static</specifier> <specifier pos:start="225:20" pos:end="225:24">const</specifier> <name pos:start="225:26" pos:end="225:28">int</name></type> <name pos:start="225:30" pos:end="225:37"><name pos:start="225:30" pos:end="225:35">re_enc</name><index pos:start="225:36" pos:end="225:37">[]</index></name> <init pos:start="225:39" pos:end="225:68">= <expr pos:start="225:41" pos:end="225:68"><block pos:start="225:41" pos:end="225:68">{ <expr pos:start="225:43" pos:end="225:43"><literal type="number" pos:start="225:43" pos:end="225:43">6</literal></expr>, <expr pos:start="225:46" pos:end="225:46"><literal type="number" pos:start="225:46" pos:end="225:46">7</literal></expr>, <expr pos:start="225:49" pos:end="225:49"><literal type="number" pos:start="225:49" pos:end="225:49">7</literal></expr>, <expr pos:start="225:52" pos:end="225:53"><literal type="number" pos:start="225:52" pos:end="225:53">21</literal></expr>, <expr pos:start="225:56" pos:end="225:57"><literal type="number" pos:start="225:56" pos:end="225:57">22</literal></expr>, <expr pos:start="225:60" pos:end="225:60"><literal type="number" pos:start="225:60" pos:end="225:60">5</literal></expr>, <expr pos:start="225:63" pos:end="225:63"><literal type="number" pos:start="225:63" pos:end="225:63">6</literal></expr>, <expr pos:start="225:66" pos:end="225:66"><literal type="number" pos:start="225:66" pos:end="225:66">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="227:13" pos:end="227:75"><decl pos:start="227:13" pos:end="227:74"><type pos:start="227:13" pos:end="227:28"><specifier pos:start="227:13" pos:end="227:18">static</specifier> <specifier pos:start="227:20" pos:end="227:24">const</specifier> <name pos:start="227:26" pos:end="227:28">int</name></type> <name pos:start="227:30" pos:end="227:40"><name pos:start="227:30" pos:end="227:38">rs_rt_enc</name><index pos:start="227:39" pos:end="227:40">[]</index></name> <init pos:start="227:42" pos:end="227:74">= <expr pos:start="227:44" pos:end="227:74"><block pos:start="227:44" pos:end="227:74">{ <expr pos:start="227:46" pos:end="227:46"><literal type="number" pos:start="227:46" pos:end="227:46">0</literal></expr>, <expr pos:start="227:49" pos:end="227:50"><literal type="number" pos:start="227:49" pos:end="227:50">17</literal></expr>, <expr pos:start="227:53" pos:end="227:53"><literal type="number" pos:start="227:53" pos:end="227:53">2</literal></expr>, <expr pos:start="227:56" pos:end="227:56"><literal type="number" pos:start="227:56" pos:end="227:56">3</literal></expr>, <expr pos:start="227:59" pos:end="227:60"><literal type="number" pos:start="227:59" pos:end="227:60">16</literal></expr>, <expr pos:start="227:63" pos:end="227:64"><literal type="number" pos:start="227:63" pos:end="227:64">18</literal></expr>, <expr pos:start="227:67" pos:end="227:68"><literal type="number" pos:start="227:67" pos:end="227:68">19</literal></expr>, <expr pos:start="227:71" pos:end="227:72"><literal type="number" pos:start="227:71" pos:end="227:72">20</literal></expr> }</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="231:13" pos:end="231:34"><expr pos:start="231:13" pos:end="231:33"><name pos:start="231:13" pos:end="231:14">rd</name> <operator pos:start="231:16" pos:end="231:16">=</operator> <name pos:start="231:18" pos:end="231:33"><name pos:start="231:18" pos:end="231:23">rd_enc</name><index pos:start="231:24" pos:end="231:33">[<expr pos:start="231:25" pos:end="231:32"><name pos:start="231:25" pos:end="231:32">enc_dest</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:34"><expr pos:start="233:13" pos:end="233:33"><name pos:start="233:13" pos:end="233:14">re</name> <operator pos:start="233:16" pos:end="233:16">=</operator> <name pos:start="233:18" pos:end="233:33"><name pos:start="233:18" pos:end="233:23">re_enc</name><index pos:start="233:24" pos:end="233:33">[<expr pos:start="233:25" pos:end="233:32"><name pos:start="233:25" pos:end="233:32">enc_dest</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:35"><expr pos:start="235:13" pos:end="235:34"><name pos:start="235:13" pos:end="235:14">rs</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <name pos:start="235:18" pos:end="235:34"><name pos:start="235:18" pos:end="235:26">rs_rt_enc</name><index pos:start="235:27" pos:end="235:34">[<expr pos:start="235:28" pos:end="235:33"><name pos:start="235:28" pos:end="235:33">enc_rs</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:35"><expr pos:start="237:13" pos:end="237:34"><name pos:start="237:13" pos:end="237:14">rt</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <name pos:start="237:18" pos:end="237:34"><name pos:start="237:18" pos:end="237:26">rs_rt_enc</name><index pos:start="237:27" pos:end="237:34">[<expr pos:start="237:28" pos:end="237:33"><name pos:start="237:28" pos:end="237:33">enc_rt</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="241:13" pos:end="241:48"><expr pos:start="241:13" pos:end="241:47"><call pos:start="241:13" pos:end="241:47"><name pos:start="241:13" pos:end="241:21">gen_arith</name><argument_list pos:start="241:22" pos:end="241:47">(<argument pos:start="241:23" pos:end="241:25"><expr pos:start="241:23" pos:end="241:25"><name pos:start="241:23" pos:end="241:25">ctx</name></expr></argument>, <argument pos:start="241:28" pos:end="241:35"><expr pos:start="241:28" pos:end="241:35"><name pos:start="241:28" pos:end="241:35">OPC_ADDU</name></expr></argument>, <argument pos:start="241:38" pos:end="241:39"><expr pos:start="241:38" pos:end="241:39"><name pos:start="241:38" pos:end="241:39">rd</name></expr></argument>, <argument pos:start="241:42" pos:end="241:43"><expr pos:start="241:42" pos:end="241:43"><name pos:start="241:42" pos:end="241:43">rs</name></expr></argument>, <argument pos:start="241:46" pos:end="241:46"><expr pos:start="241:46" pos:end="241:46"><literal type="number" pos:start="241:46" pos:end="241:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:48"><expr pos:start="243:13" pos:end="243:47"><call pos:start="243:13" pos:end="243:47"><name pos:start="243:13" pos:end="243:21">gen_arith</name><argument_list pos:start="243:22" pos:end="243:47">(<argument pos:start="243:23" pos:end="243:25"><expr pos:start="243:23" pos:end="243:25"><name pos:start="243:23" pos:end="243:25">ctx</name></expr></argument>, <argument pos:start="243:28" pos:end="243:35"><expr pos:start="243:28" pos:end="243:35"><name pos:start="243:28" pos:end="243:35">OPC_ADDU</name></expr></argument>, <argument pos:start="243:38" pos:end="243:39"><expr pos:start="243:38" pos:end="243:39"><name pos:start="243:38" pos:end="243:39">re</name></expr></argument>, <argument pos:start="243:42" pos:end="243:43"><expr pos:start="243:42" pos:end="243:43"><name pos:start="243:42" pos:end="243:43">rt</name></expr></argument>, <argument pos:start="243:46" pos:end="243:46"><expr pos:start="243:46" pos:end="243:46"><literal type="number" pos:start="243:46" pos:end="243:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="247:9" pos:end="247:14">break;</break>

    <case pos:start="249:5" pos:end="249:15">case <expr pos:start="249:10" pos:end="249:14"><name pos:start="249:10" pos:end="249:14">LBU16</name></expr>:</case>

        <block pos:start="251:9" pos:end="265:9">{<block_content pos:start="253:13" pos:end="263:49">

            <decl_stmt pos:start="253:13" pos:end="253:50"><decl pos:start="253:13" pos:end="253:49"><type pos:start="253:13" pos:end="253:15"><name pos:start="253:13" pos:end="253:15">int</name></type> <name pos:start="253:17" pos:end="253:18">rd</name> <init pos:start="253:20" pos:end="253:49">= <expr pos:start="253:22" pos:end="253:49"><call pos:start="253:22" pos:end="253:49"><name pos:start="253:22" pos:end="253:26">mmreg</name><argument_list pos:start="253:27" pos:end="253:49">(<argument pos:start="253:28" pos:end="253:48"><expr pos:start="253:28" pos:end="253:48"><call pos:start="253:28" pos:end="253:48"><name pos:start="253:28" pos:end="253:35">uMIPS_RD</name><argument_list pos:start="253:36" pos:end="253:48">(<argument pos:start="253:37" pos:end="253:47"><expr pos:start="253:37" pos:end="253:47"><name pos:start="253:37" pos:end="253:47"><name pos:start="253:37" pos:end="253:39">ctx</name><operator pos:start="253:40" pos:end="253:41">-&gt;</operator><name pos:start="253:42" pos:end="253:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="255:13" pos:end="255:50"><decl pos:start="255:13" pos:end="255:49"><type pos:start="255:13" pos:end="255:15"><name pos:start="255:13" pos:end="255:15">int</name></type> <name pos:start="255:17" pos:end="255:18">rb</name> <init pos:start="255:20" pos:end="255:49">= <expr pos:start="255:22" pos:end="255:49"><call pos:start="255:22" pos:end="255:49"><name pos:start="255:22" pos:end="255:26">mmreg</name><argument_list pos:start="255:27" pos:end="255:49">(<argument pos:start="255:28" pos:end="255:48"><expr pos:start="255:28" pos:end="255:48"><call pos:start="255:28" pos:end="255:48"><name pos:start="255:28" pos:end="255:35">uMIPS_RS</name><argument_list pos:start="255:36" pos:end="255:48">(<argument pos:start="255:37" pos:end="255:47"><expr pos:start="255:37" pos:end="255:47"><name pos:start="255:37" pos:end="255:47"><name pos:start="255:37" pos:end="255:39">ctx</name><operator pos:start="255:40" pos:end="255:41">-&gt;</operator><name pos:start="255:42" pos:end="255:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="257:13" pos:end="257:53"><decl pos:start="257:13" pos:end="257:52"><type pos:start="257:13" pos:end="257:19"><name pos:start="257:13" pos:end="257:19">int16_t</name></type> <name pos:start="257:21" pos:end="257:26">offset</name> <init pos:start="257:28" pos:end="257:52">= <expr pos:start="257:30" pos:end="257:52"><call pos:start="257:30" pos:end="257:52"><name pos:start="257:30" pos:end="257:33">ZIMM</name><argument_list pos:start="257:34" pos:end="257:52">(<argument pos:start="257:35" pos:end="257:45"><expr pos:start="257:35" pos:end="257:45"><name pos:start="257:35" pos:end="257:45"><name pos:start="257:35" pos:end="257:37">ctx</name><operator pos:start="257:38" pos:end="257:39">-&gt;</operator><name pos:start="257:40" pos:end="257:45">opcode</name></name></expr></argument>, <argument pos:start="257:48" pos:end="257:48"><expr pos:start="257:48" pos:end="257:48"><literal type="number" pos:start="257:48" pos:end="257:48">0</literal></expr></argument>, <argument pos:start="257:51" pos:end="257:51"><expr pos:start="257:51" pos:end="257:51"><literal type="number" pos:start="257:51" pos:end="257:51">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:51"><expr pos:start="259:13" pos:end="259:50"><name pos:start="259:13" pos:end="259:18">offset</name> <operator pos:start="259:20" pos:end="259:20">=</operator> <operator pos:start="259:22" pos:end="259:22">(</operator><ternary pos:start="259:23" pos:end="259:49"><condition pos:start="259:23" pos:end="259:37"><expr pos:start="259:23" pos:end="259:35"><name pos:start="259:23" pos:end="259:28">offset</name> <operator pos:start="259:30" pos:end="259:31">==</operator> <literal type="number" pos:start="259:33" pos:end="259:35">0xf</literal></expr> ?</condition><then pos:start="259:39" pos:end="259:40"> <expr pos:start="259:39" pos:end="259:40"><operator pos:start="259:39" pos:end="259:39">-</operator><literal type="number" pos:start="259:40" pos:end="259:40">1</literal></expr> </then><else pos:start="259:42" pos:end="259:49">: <expr pos:start="259:44" pos:end="259:49"><name pos:start="259:44" pos:end="259:49">offset</name></expr></else></ternary><operator pos:start="259:50" pos:end="259:50">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="263:13" pos:end="263:49"><expr pos:start="263:13" pos:end="263:48"><call pos:start="263:13" pos:end="263:48"><name pos:start="263:13" pos:end="263:18">gen_ld</name><argument_list pos:start="263:19" pos:end="263:48">(<argument pos:start="263:20" pos:end="263:22"><expr pos:start="263:20" pos:end="263:22"><name pos:start="263:20" pos:end="263:22">ctx</name></expr></argument>, <argument pos:start="263:25" pos:end="263:31"><expr pos:start="263:25" pos:end="263:31"><name pos:start="263:25" pos:end="263:31">OPC_LBU</name></expr></argument>, <argument pos:start="263:34" pos:end="263:35"><expr pos:start="263:34" pos:end="263:35"><name pos:start="263:34" pos:end="263:35">rd</name></expr></argument>, <argument pos:start="263:38" pos:end="263:39"><expr pos:start="263:38" pos:end="263:39"><name pos:start="263:38" pos:end="263:39">rb</name></expr></argument>, <argument pos:start="263:42" pos:end="263:47"><expr pos:start="263:42" pos:end="263:47"><name pos:start="263:42" pos:end="263:47">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="267:9" pos:end="267:14">break;</break>

    <case pos:start="269:5" pos:end="269:15">case <expr pos:start="269:10" pos:end="269:14"><name pos:start="269:10" pos:end="269:14">LHU16</name></expr>:</case>

        <block pos:start="271:9" pos:end="283:9">{<block_content pos:start="273:13" pos:end="281:49">

            <decl_stmt pos:start="273:13" pos:end="273:50"><decl pos:start="273:13" pos:end="273:49"><type pos:start="273:13" pos:end="273:15"><name pos:start="273:13" pos:end="273:15">int</name></type> <name pos:start="273:17" pos:end="273:18">rd</name> <init pos:start="273:20" pos:end="273:49">= <expr pos:start="273:22" pos:end="273:49"><call pos:start="273:22" pos:end="273:49"><name pos:start="273:22" pos:end="273:26">mmreg</name><argument_list pos:start="273:27" pos:end="273:49">(<argument pos:start="273:28" pos:end="273:48"><expr pos:start="273:28" pos:end="273:48"><call pos:start="273:28" pos:end="273:48"><name pos:start="273:28" pos:end="273:35">uMIPS_RD</name><argument_list pos:start="273:36" pos:end="273:48">(<argument pos:start="273:37" pos:end="273:47"><expr pos:start="273:37" pos:end="273:47"><name pos:start="273:37" pos:end="273:47"><name pos:start="273:37" pos:end="273:39">ctx</name><operator pos:start="273:40" pos:end="273:41">-&gt;</operator><name pos:start="273:42" pos:end="273:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="275:13" pos:end="275:50"><decl pos:start="275:13" pos:end="275:49"><type pos:start="275:13" pos:end="275:15"><name pos:start="275:13" pos:end="275:15">int</name></type> <name pos:start="275:17" pos:end="275:18">rb</name> <init pos:start="275:20" pos:end="275:49">= <expr pos:start="275:22" pos:end="275:49"><call pos:start="275:22" pos:end="275:49"><name pos:start="275:22" pos:end="275:26">mmreg</name><argument_list pos:start="275:27" pos:end="275:49">(<argument pos:start="275:28" pos:end="275:48"><expr pos:start="275:28" pos:end="275:48"><call pos:start="275:28" pos:end="275:48"><name pos:start="275:28" pos:end="275:35">uMIPS_RS</name><argument_list pos:start="275:36" pos:end="275:48">(<argument pos:start="275:37" pos:end="275:47"><expr pos:start="275:37" pos:end="275:47"><name pos:start="275:37" pos:end="275:47"><name pos:start="275:37" pos:end="275:39">ctx</name><operator pos:start="275:40" pos:end="275:41">-&gt;</operator><name pos:start="275:42" pos:end="275:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="277:13" pos:end="277:58"><decl pos:start="277:13" pos:end="277:57"><type pos:start="277:13" pos:end="277:19"><name pos:start="277:13" pos:end="277:19">int16_t</name></type> <name pos:start="277:21" pos:end="277:26">offset</name> <init pos:start="277:28" pos:end="277:57">= <expr pos:start="277:30" pos:end="277:57"><call pos:start="277:30" pos:end="277:52"><name pos:start="277:30" pos:end="277:33">ZIMM</name><argument_list pos:start="277:34" pos:end="277:52">(<argument pos:start="277:35" pos:end="277:45"><expr pos:start="277:35" pos:end="277:45"><name pos:start="277:35" pos:end="277:45"><name pos:start="277:35" pos:end="277:37">ctx</name><operator pos:start="277:38" pos:end="277:39">-&gt;</operator><name pos:start="277:40" pos:end="277:45">opcode</name></name></expr></argument>, <argument pos:start="277:48" pos:end="277:48"><expr pos:start="277:48" pos:end="277:48"><literal type="number" pos:start="277:48" pos:end="277:48">0</literal></expr></argument>, <argument pos:start="277:51" pos:end="277:51"><expr pos:start="277:51" pos:end="277:51"><literal type="number" pos:start="277:51" pos:end="277:51">4</literal></expr></argument>)</argument_list></call> <operator pos:start="277:54" pos:end="277:55">&lt;&lt;</operator> <literal type="number" pos:start="277:57" pos:end="277:57">1</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="281:13" pos:end="281:49"><expr pos:start="281:13" pos:end="281:48"><call pos:start="281:13" pos:end="281:48"><name pos:start="281:13" pos:end="281:18">gen_ld</name><argument_list pos:start="281:19" pos:end="281:48">(<argument pos:start="281:20" pos:end="281:22"><expr pos:start="281:20" pos:end="281:22"><name pos:start="281:20" pos:end="281:22">ctx</name></expr></argument>, <argument pos:start="281:25" pos:end="281:31"><expr pos:start="281:25" pos:end="281:31"><name pos:start="281:25" pos:end="281:31">OPC_LHU</name></expr></argument>, <argument pos:start="281:34" pos:end="281:35"><expr pos:start="281:34" pos:end="281:35"><name pos:start="281:34" pos:end="281:35">rd</name></expr></argument>, <argument pos:start="281:38" pos:end="281:39"><expr pos:start="281:38" pos:end="281:39"><name pos:start="281:38" pos:end="281:39">rb</name></expr></argument>, <argument pos:start="281:42" pos:end="281:47"><expr pos:start="281:42" pos:end="281:47"><name pos:start="281:42" pos:end="281:47">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="285:9" pos:end="285:14">break;</break>

    <case pos:start="287:5" pos:end="287:16">case <expr pos:start="287:10" pos:end="287:15"><name pos:start="287:10" pos:end="287:15">LWSP16</name></expr>:</case>

        <block pos:start="289:9" pos:end="301:9">{<block_content pos:start="291:13" pos:end="299:48">

            <decl_stmt pos:start="291:13" pos:end="291:47"><decl pos:start="291:13" pos:end="291:46"><type pos:start="291:13" pos:end="291:15"><name pos:start="291:13" pos:end="291:15">int</name></type> <name pos:start="291:17" pos:end="291:18">rd</name> <init pos:start="291:20" pos:end="291:46">= <expr pos:start="291:22" pos:end="291:46"><operator pos:start="291:22" pos:end="291:22">(</operator><name pos:start="291:23" pos:end="291:33"><name pos:start="291:23" pos:end="291:25">ctx</name><operator pos:start="291:26" pos:end="291:27">-&gt;</operator><name pos:start="291:28" pos:end="291:33">opcode</name></name> <operator pos:start="291:35" pos:end="291:36">&gt;&gt;</operator> <literal type="number" pos:start="291:38" pos:end="291:38">5</literal><operator pos:start="291:39" pos:end="291:39">)</operator> <operator pos:start="291:41" pos:end="291:41">&amp;</operator> <literal type="number" pos:start="291:43" pos:end="291:46">0x1f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="293:13" pos:end="293:24"><decl pos:start="293:13" pos:end="293:23"><type pos:start="293:13" pos:end="293:15"><name pos:start="293:13" pos:end="293:15">int</name></type> <name pos:start="293:17" pos:end="293:18">rb</name> <init pos:start="293:20" pos:end="293:23">= <expr pos:start="293:22" pos:end="293:23"><literal type="number" pos:start="293:22" pos:end="293:23">29</literal></expr></init></decl>;</decl_stmt>            <comment type="block" pos:start="293:37" pos:end="293:44">/* SP */</comment>

            <decl_stmt pos:start="295:13" pos:end="295:58"><decl pos:start="295:13" pos:end="295:57"><type pos:start="295:13" pos:end="295:19"><name pos:start="295:13" pos:end="295:19">int16_t</name></type> <name pos:start="295:21" pos:end="295:26">offset</name> <init pos:start="295:28" pos:end="295:57">= <expr pos:start="295:30" pos:end="295:57"><call pos:start="295:30" pos:end="295:52"><name pos:start="295:30" pos:end="295:33">ZIMM</name><argument_list pos:start="295:34" pos:end="295:52">(<argument pos:start="295:35" pos:end="295:45"><expr pos:start="295:35" pos:end="295:45"><name pos:start="295:35" pos:end="295:45"><name pos:start="295:35" pos:end="295:37">ctx</name><operator pos:start="295:38" pos:end="295:39">-&gt;</operator><name pos:start="295:40" pos:end="295:45">opcode</name></name></expr></argument>, <argument pos:start="295:48" pos:end="295:48"><expr pos:start="295:48" pos:end="295:48"><literal type="number" pos:start="295:48" pos:end="295:48">0</literal></expr></argument>, <argument pos:start="295:51" pos:end="295:51"><expr pos:start="295:51" pos:end="295:51"><literal type="number" pos:start="295:51" pos:end="295:51">5</literal></expr></argument>)</argument_list></call> <operator pos:start="295:54" pos:end="295:55">&lt;&lt;</operator> <literal type="number" pos:start="295:57" pos:end="295:57">2</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="299:13" pos:end="299:48"><expr pos:start="299:13" pos:end="299:47"><call pos:start="299:13" pos:end="299:47"><name pos:start="299:13" pos:end="299:18">gen_ld</name><argument_list pos:start="299:19" pos:end="299:47">(<argument pos:start="299:20" pos:end="299:22"><expr pos:start="299:20" pos:end="299:22"><name pos:start="299:20" pos:end="299:22">ctx</name></expr></argument>, <argument pos:start="299:25" pos:end="299:30"><expr pos:start="299:25" pos:end="299:30"><name pos:start="299:25" pos:end="299:30">OPC_LW</name></expr></argument>, <argument pos:start="299:33" pos:end="299:34"><expr pos:start="299:33" pos:end="299:34"><name pos:start="299:33" pos:end="299:34">rd</name></expr></argument>, <argument pos:start="299:37" pos:end="299:38"><expr pos:start="299:37" pos:end="299:38"><name pos:start="299:37" pos:end="299:38">rb</name></expr></argument>, <argument pos:start="299:41" pos:end="299:46"><expr pos:start="299:41" pos:end="299:46"><name pos:start="299:41" pos:end="299:46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="303:9" pos:end="303:14">break;</break>

    <case pos:start="305:5" pos:end="305:14">case <expr pos:start="305:10" pos:end="305:13"><name pos:start="305:10" pos:end="305:13">LW16</name></expr>:</case>

        <block pos:start="307:9" pos:end="319:9">{<block_content pos:start="309:13" pos:end="317:48">

            <decl_stmt pos:start="309:13" pos:end="309:50"><decl pos:start="309:13" pos:end="309:49"><type pos:start="309:13" pos:end="309:15"><name pos:start="309:13" pos:end="309:15">int</name></type> <name pos:start="309:17" pos:end="309:18">rd</name> <init pos:start="309:20" pos:end="309:49">= <expr pos:start="309:22" pos:end="309:49"><call pos:start="309:22" pos:end="309:49"><name pos:start="309:22" pos:end="309:26">mmreg</name><argument_list pos:start="309:27" pos:end="309:49">(<argument pos:start="309:28" pos:end="309:48"><expr pos:start="309:28" pos:end="309:48"><call pos:start="309:28" pos:end="309:48"><name pos:start="309:28" pos:end="309:35">uMIPS_RD</name><argument_list pos:start="309:36" pos:end="309:48">(<argument pos:start="309:37" pos:end="309:47"><expr pos:start="309:37" pos:end="309:47"><name pos:start="309:37" pos:end="309:47"><name pos:start="309:37" pos:end="309:39">ctx</name><operator pos:start="309:40" pos:end="309:41">-&gt;</operator><name pos:start="309:42" pos:end="309:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="311:13" pos:end="311:50"><decl pos:start="311:13" pos:end="311:49"><type pos:start="311:13" pos:end="311:15"><name pos:start="311:13" pos:end="311:15">int</name></type> <name pos:start="311:17" pos:end="311:18">rb</name> <init pos:start="311:20" pos:end="311:49">= <expr pos:start="311:22" pos:end="311:49"><call pos:start="311:22" pos:end="311:49"><name pos:start="311:22" pos:end="311:26">mmreg</name><argument_list pos:start="311:27" pos:end="311:49">(<argument pos:start="311:28" pos:end="311:48"><expr pos:start="311:28" pos:end="311:48"><call pos:start="311:28" pos:end="311:48"><name pos:start="311:28" pos:end="311:35">uMIPS_RS</name><argument_list pos:start="311:36" pos:end="311:48">(<argument pos:start="311:37" pos:end="311:47"><expr pos:start="311:37" pos:end="311:47"><name pos:start="311:37" pos:end="311:47"><name pos:start="311:37" pos:end="311:39">ctx</name><operator pos:start="311:40" pos:end="311:41">-&gt;</operator><name pos:start="311:42" pos:end="311:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="313:13" pos:end="313:58"><decl pos:start="313:13" pos:end="313:57"><type pos:start="313:13" pos:end="313:19"><name pos:start="313:13" pos:end="313:19">int16_t</name></type> <name pos:start="313:21" pos:end="313:26">offset</name> <init pos:start="313:28" pos:end="313:57">= <expr pos:start="313:30" pos:end="313:57"><call pos:start="313:30" pos:end="313:52"><name pos:start="313:30" pos:end="313:33">ZIMM</name><argument_list pos:start="313:34" pos:end="313:52">(<argument pos:start="313:35" pos:end="313:45"><expr pos:start="313:35" pos:end="313:45"><name pos:start="313:35" pos:end="313:45"><name pos:start="313:35" pos:end="313:37">ctx</name><operator pos:start="313:38" pos:end="313:39">-&gt;</operator><name pos:start="313:40" pos:end="313:45">opcode</name></name></expr></argument>, <argument pos:start="313:48" pos:end="313:48"><expr pos:start="313:48" pos:end="313:48"><literal type="number" pos:start="313:48" pos:end="313:48">0</literal></expr></argument>, <argument pos:start="313:51" pos:end="313:51"><expr pos:start="313:51" pos:end="313:51"><literal type="number" pos:start="313:51" pos:end="313:51">4</literal></expr></argument>)</argument_list></call> <operator pos:start="313:54" pos:end="313:55">&lt;&lt;</operator> <literal type="number" pos:start="313:57" pos:end="313:57">2</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="317:13" pos:end="317:48"><expr pos:start="317:13" pos:end="317:47"><call pos:start="317:13" pos:end="317:47"><name pos:start="317:13" pos:end="317:18">gen_ld</name><argument_list pos:start="317:19" pos:end="317:47">(<argument pos:start="317:20" pos:end="317:22"><expr pos:start="317:20" pos:end="317:22"><name pos:start="317:20" pos:end="317:22">ctx</name></expr></argument>, <argument pos:start="317:25" pos:end="317:30"><expr pos:start="317:25" pos:end="317:30"><name pos:start="317:25" pos:end="317:30">OPC_LW</name></expr></argument>, <argument pos:start="317:33" pos:end="317:34"><expr pos:start="317:33" pos:end="317:34"><name pos:start="317:33" pos:end="317:34">rd</name></expr></argument>, <argument pos:start="317:37" pos:end="317:38"><expr pos:start="317:37" pos:end="317:38"><name pos:start="317:37" pos:end="317:38">rb</name></expr></argument>, <argument pos:start="317:41" pos:end="317:46"><expr pos:start="317:41" pos:end="317:46"><name pos:start="317:41" pos:end="317:46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="321:9" pos:end="321:14">break;</break>

    <case pos:start="323:5" pos:end="323:14">case <expr pos:start="323:10" pos:end="323:13"><name pos:start="323:10" pos:end="323:13">SB16</name></expr>:</case>

        <block pos:start="325:9" pos:end="337:9">{<block_content pos:start="327:13" pos:end="335:48">

            <decl_stmt pos:start="327:13" pos:end="327:51"><decl pos:start="327:13" pos:end="327:50"><type pos:start="327:13" pos:end="327:15"><name pos:start="327:13" pos:end="327:15">int</name></type> <name pos:start="327:17" pos:end="327:18">rd</name> <init pos:start="327:20" pos:end="327:50">= <expr pos:start="327:22" pos:end="327:50"><call pos:start="327:22" pos:end="327:50"><name pos:start="327:22" pos:end="327:27">mmreg2</name><argument_list pos:start="327:28" pos:end="327:50">(<argument pos:start="327:29" pos:end="327:49"><expr pos:start="327:29" pos:end="327:49"><call pos:start="327:29" pos:end="327:49"><name pos:start="327:29" pos:end="327:36">uMIPS_RD</name><argument_list pos:start="327:37" pos:end="327:49">(<argument pos:start="327:38" pos:end="327:48"><expr pos:start="327:38" pos:end="327:48"><name pos:start="327:38" pos:end="327:48"><name pos:start="327:38" pos:end="327:40">ctx</name><operator pos:start="327:41" pos:end="327:42">-&gt;</operator><name pos:start="327:43" pos:end="327:48">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="329:13" pos:end="329:50"><decl pos:start="329:13" pos:end="329:49"><type pos:start="329:13" pos:end="329:15"><name pos:start="329:13" pos:end="329:15">int</name></type> <name pos:start="329:17" pos:end="329:18">rb</name> <init pos:start="329:20" pos:end="329:49">= <expr pos:start="329:22" pos:end="329:49"><call pos:start="329:22" pos:end="329:49"><name pos:start="329:22" pos:end="329:26">mmreg</name><argument_list pos:start="329:27" pos:end="329:49">(<argument pos:start="329:28" pos:end="329:48"><expr pos:start="329:28" pos:end="329:48"><call pos:start="329:28" pos:end="329:48"><name pos:start="329:28" pos:end="329:35">uMIPS_RS</name><argument_list pos:start="329:36" pos:end="329:48">(<argument pos:start="329:37" pos:end="329:47"><expr pos:start="329:37" pos:end="329:47"><name pos:start="329:37" pos:end="329:47"><name pos:start="329:37" pos:end="329:39">ctx</name><operator pos:start="329:40" pos:end="329:41">-&gt;</operator><name pos:start="329:42" pos:end="329:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="331:13" pos:end="331:53"><decl pos:start="331:13" pos:end="331:52"><type pos:start="331:13" pos:end="331:19"><name pos:start="331:13" pos:end="331:19">int16_t</name></type> <name pos:start="331:21" pos:end="331:26">offset</name> <init pos:start="331:28" pos:end="331:52">= <expr pos:start="331:30" pos:end="331:52"><call pos:start="331:30" pos:end="331:52"><name pos:start="331:30" pos:end="331:33">ZIMM</name><argument_list pos:start="331:34" pos:end="331:52">(<argument pos:start="331:35" pos:end="331:45"><expr pos:start="331:35" pos:end="331:45"><name pos:start="331:35" pos:end="331:45"><name pos:start="331:35" pos:end="331:37">ctx</name><operator pos:start="331:38" pos:end="331:39">-&gt;</operator><name pos:start="331:40" pos:end="331:45">opcode</name></name></expr></argument>, <argument pos:start="331:48" pos:end="331:48"><expr pos:start="331:48" pos:end="331:48"><literal type="number" pos:start="331:48" pos:end="331:48">0</literal></expr></argument>, <argument pos:start="331:51" pos:end="331:51"><expr pos:start="331:51" pos:end="331:51"><literal type="number" pos:start="331:51" pos:end="331:51">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="335:13" pos:end="335:48"><expr pos:start="335:13" pos:end="335:47"><call pos:start="335:13" pos:end="335:47"><name pos:start="335:13" pos:end="335:18">gen_st</name><argument_list pos:start="335:19" pos:end="335:47">(<argument pos:start="335:20" pos:end="335:22"><expr pos:start="335:20" pos:end="335:22"><name pos:start="335:20" pos:end="335:22">ctx</name></expr></argument>, <argument pos:start="335:25" pos:end="335:30"><expr pos:start="335:25" pos:end="335:30"><name pos:start="335:25" pos:end="335:30">OPC_SB</name></expr></argument>, <argument pos:start="335:33" pos:end="335:34"><expr pos:start="335:33" pos:end="335:34"><name pos:start="335:33" pos:end="335:34">rd</name></expr></argument>, <argument pos:start="335:37" pos:end="335:38"><expr pos:start="335:37" pos:end="335:38"><name pos:start="335:37" pos:end="335:38">rb</name></expr></argument>, <argument pos:start="335:41" pos:end="335:46"><expr pos:start="335:41" pos:end="335:46"><name pos:start="335:41" pos:end="335:46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="339:9" pos:end="339:14">break;</break>

    <case pos:start="341:5" pos:end="341:14">case <expr pos:start="341:10" pos:end="341:13"><name pos:start="341:10" pos:end="341:13">SH16</name></expr>:</case>

        <block pos:start="343:9" pos:end="355:9">{<block_content pos:start="345:13" pos:end="353:48">

            <decl_stmt pos:start="345:13" pos:end="345:51"><decl pos:start="345:13" pos:end="345:50"><type pos:start="345:13" pos:end="345:15"><name pos:start="345:13" pos:end="345:15">int</name></type> <name pos:start="345:17" pos:end="345:18">rd</name> <init pos:start="345:20" pos:end="345:50">= <expr pos:start="345:22" pos:end="345:50"><call pos:start="345:22" pos:end="345:50"><name pos:start="345:22" pos:end="345:27">mmreg2</name><argument_list pos:start="345:28" pos:end="345:50">(<argument pos:start="345:29" pos:end="345:49"><expr pos:start="345:29" pos:end="345:49"><call pos:start="345:29" pos:end="345:49"><name pos:start="345:29" pos:end="345:36">uMIPS_RD</name><argument_list pos:start="345:37" pos:end="345:49">(<argument pos:start="345:38" pos:end="345:48"><expr pos:start="345:38" pos:end="345:48"><name pos:start="345:38" pos:end="345:48"><name pos:start="345:38" pos:end="345:40">ctx</name><operator pos:start="345:41" pos:end="345:42">-&gt;</operator><name pos:start="345:43" pos:end="345:48">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="347:13" pos:end="347:50"><decl pos:start="347:13" pos:end="347:49"><type pos:start="347:13" pos:end="347:15"><name pos:start="347:13" pos:end="347:15">int</name></type> <name pos:start="347:17" pos:end="347:18">rb</name> <init pos:start="347:20" pos:end="347:49">= <expr pos:start="347:22" pos:end="347:49"><call pos:start="347:22" pos:end="347:49"><name pos:start="347:22" pos:end="347:26">mmreg</name><argument_list pos:start="347:27" pos:end="347:49">(<argument pos:start="347:28" pos:end="347:48"><expr pos:start="347:28" pos:end="347:48"><call pos:start="347:28" pos:end="347:48"><name pos:start="347:28" pos:end="347:35">uMIPS_RS</name><argument_list pos:start="347:36" pos:end="347:48">(<argument pos:start="347:37" pos:end="347:47"><expr pos:start="347:37" pos:end="347:47"><name pos:start="347:37" pos:end="347:47"><name pos:start="347:37" pos:end="347:39">ctx</name><operator pos:start="347:40" pos:end="347:41">-&gt;</operator><name pos:start="347:42" pos:end="347:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="349:13" pos:end="349:58"><decl pos:start="349:13" pos:end="349:57"><type pos:start="349:13" pos:end="349:19"><name pos:start="349:13" pos:end="349:19">int16_t</name></type> <name pos:start="349:21" pos:end="349:26">offset</name> <init pos:start="349:28" pos:end="349:57">= <expr pos:start="349:30" pos:end="349:57"><call pos:start="349:30" pos:end="349:52"><name pos:start="349:30" pos:end="349:33">ZIMM</name><argument_list pos:start="349:34" pos:end="349:52">(<argument pos:start="349:35" pos:end="349:45"><expr pos:start="349:35" pos:end="349:45"><name pos:start="349:35" pos:end="349:45"><name pos:start="349:35" pos:end="349:37">ctx</name><operator pos:start="349:38" pos:end="349:39">-&gt;</operator><name pos:start="349:40" pos:end="349:45">opcode</name></name></expr></argument>, <argument pos:start="349:48" pos:end="349:48"><expr pos:start="349:48" pos:end="349:48"><literal type="number" pos:start="349:48" pos:end="349:48">0</literal></expr></argument>, <argument pos:start="349:51" pos:end="349:51"><expr pos:start="349:51" pos:end="349:51"><literal type="number" pos:start="349:51" pos:end="349:51">4</literal></expr></argument>)</argument_list></call> <operator pos:start="349:54" pos:end="349:55">&lt;&lt;</operator> <literal type="number" pos:start="349:57" pos:end="349:57">1</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="353:13" pos:end="353:48"><expr pos:start="353:13" pos:end="353:47"><call pos:start="353:13" pos:end="353:47"><name pos:start="353:13" pos:end="353:18">gen_st</name><argument_list pos:start="353:19" pos:end="353:47">(<argument pos:start="353:20" pos:end="353:22"><expr pos:start="353:20" pos:end="353:22"><name pos:start="353:20" pos:end="353:22">ctx</name></expr></argument>, <argument pos:start="353:25" pos:end="353:30"><expr pos:start="353:25" pos:end="353:30"><name pos:start="353:25" pos:end="353:30">OPC_SH</name></expr></argument>, <argument pos:start="353:33" pos:end="353:34"><expr pos:start="353:33" pos:end="353:34"><name pos:start="353:33" pos:end="353:34">rd</name></expr></argument>, <argument pos:start="353:37" pos:end="353:38"><expr pos:start="353:37" pos:end="353:38"><name pos:start="353:37" pos:end="353:38">rb</name></expr></argument>, <argument pos:start="353:41" pos:end="353:46"><expr pos:start="353:41" pos:end="353:46"><name pos:start="353:41" pos:end="353:46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="357:9" pos:end="357:14">break;</break>

    <case pos:start="359:5" pos:end="359:16">case <expr pos:start="359:10" pos:end="359:15"><name pos:start="359:10" pos:end="359:15">SWSP16</name></expr>:</case>

        <block pos:start="361:9" pos:end="373:9">{<block_content pos:start="363:13" pos:end="371:48">

            <decl_stmt pos:start="363:13" pos:end="363:47"><decl pos:start="363:13" pos:end="363:46"><type pos:start="363:13" pos:end="363:15"><name pos:start="363:13" pos:end="363:15">int</name></type> <name pos:start="363:17" pos:end="363:18">rd</name> <init pos:start="363:20" pos:end="363:46">= <expr pos:start="363:22" pos:end="363:46"><operator pos:start="363:22" pos:end="363:22">(</operator><name pos:start="363:23" pos:end="363:33"><name pos:start="363:23" pos:end="363:25">ctx</name><operator pos:start="363:26" pos:end="363:27">-&gt;</operator><name pos:start="363:28" pos:end="363:33">opcode</name></name> <operator pos:start="363:35" pos:end="363:36">&gt;&gt;</operator> <literal type="number" pos:start="363:38" pos:end="363:38">5</literal><operator pos:start="363:39" pos:end="363:39">)</operator> <operator pos:start="363:41" pos:end="363:41">&amp;</operator> <literal type="number" pos:start="363:43" pos:end="363:46">0x1f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="365:13" pos:end="365:24"><decl pos:start="365:13" pos:end="365:23"><type pos:start="365:13" pos:end="365:15"><name pos:start="365:13" pos:end="365:15">int</name></type> <name pos:start="365:17" pos:end="365:18">rb</name> <init pos:start="365:20" pos:end="365:23">= <expr pos:start="365:22" pos:end="365:23"><literal type="number" pos:start="365:22" pos:end="365:23">29</literal></expr></init></decl>;</decl_stmt>            <comment type="block" pos:start="365:37" pos:end="365:44">/* SP */</comment>

            <decl_stmt pos:start="367:13" pos:end="367:58"><decl pos:start="367:13" pos:end="367:57"><type pos:start="367:13" pos:end="367:19"><name pos:start="367:13" pos:end="367:19">int16_t</name></type> <name pos:start="367:21" pos:end="367:26">offset</name> <init pos:start="367:28" pos:end="367:57">= <expr pos:start="367:30" pos:end="367:57"><call pos:start="367:30" pos:end="367:52"><name pos:start="367:30" pos:end="367:33">ZIMM</name><argument_list pos:start="367:34" pos:end="367:52">(<argument pos:start="367:35" pos:end="367:45"><expr pos:start="367:35" pos:end="367:45"><name pos:start="367:35" pos:end="367:45"><name pos:start="367:35" pos:end="367:37">ctx</name><operator pos:start="367:38" pos:end="367:39">-&gt;</operator><name pos:start="367:40" pos:end="367:45">opcode</name></name></expr></argument>, <argument pos:start="367:48" pos:end="367:48"><expr pos:start="367:48" pos:end="367:48"><literal type="number" pos:start="367:48" pos:end="367:48">0</literal></expr></argument>, <argument pos:start="367:51" pos:end="367:51"><expr pos:start="367:51" pos:end="367:51"><literal type="number" pos:start="367:51" pos:end="367:51">5</literal></expr></argument>)</argument_list></call> <operator pos:start="367:54" pos:end="367:55">&lt;&lt;</operator> <literal type="number" pos:start="367:57" pos:end="367:57">2</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="371:13" pos:end="371:48"><expr pos:start="371:13" pos:end="371:47"><call pos:start="371:13" pos:end="371:47"><name pos:start="371:13" pos:end="371:18">gen_st</name><argument_list pos:start="371:19" pos:end="371:47">(<argument pos:start="371:20" pos:end="371:22"><expr pos:start="371:20" pos:end="371:22"><name pos:start="371:20" pos:end="371:22">ctx</name></expr></argument>, <argument pos:start="371:25" pos:end="371:30"><expr pos:start="371:25" pos:end="371:30"><name pos:start="371:25" pos:end="371:30">OPC_SW</name></expr></argument>, <argument pos:start="371:33" pos:end="371:34"><expr pos:start="371:33" pos:end="371:34"><name pos:start="371:33" pos:end="371:34">rd</name></expr></argument>, <argument pos:start="371:37" pos:end="371:38"><expr pos:start="371:37" pos:end="371:38"><name pos:start="371:37" pos:end="371:38">rb</name></expr></argument>, <argument pos:start="371:41" pos:end="371:46"><expr pos:start="371:41" pos:end="371:46"><name pos:start="371:41" pos:end="371:46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="375:9" pos:end="375:14">break;</break>

    <case pos:start="377:5" pos:end="377:14">case <expr pos:start="377:10" pos:end="377:13"><name pos:start="377:10" pos:end="377:13">SW16</name></expr>:</case>

        <block pos:start="379:9" pos:end="391:9">{<block_content pos:start="381:13" pos:end="389:48">

            <decl_stmt pos:start="381:13" pos:end="381:51"><decl pos:start="381:13" pos:end="381:50"><type pos:start="381:13" pos:end="381:15"><name pos:start="381:13" pos:end="381:15">int</name></type> <name pos:start="381:17" pos:end="381:18">rd</name> <init pos:start="381:20" pos:end="381:50">= <expr pos:start="381:22" pos:end="381:50"><call pos:start="381:22" pos:end="381:50"><name pos:start="381:22" pos:end="381:27">mmreg2</name><argument_list pos:start="381:28" pos:end="381:50">(<argument pos:start="381:29" pos:end="381:49"><expr pos:start="381:29" pos:end="381:49"><call pos:start="381:29" pos:end="381:49"><name pos:start="381:29" pos:end="381:36">uMIPS_RD</name><argument_list pos:start="381:37" pos:end="381:49">(<argument pos:start="381:38" pos:end="381:48"><expr pos:start="381:38" pos:end="381:48"><name pos:start="381:38" pos:end="381:48"><name pos:start="381:38" pos:end="381:40">ctx</name><operator pos:start="381:41" pos:end="381:42">-&gt;</operator><name pos:start="381:43" pos:end="381:48">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="383:13" pos:end="383:50"><decl pos:start="383:13" pos:end="383:49"><type pos:start="383:13" pos:end="383:15"><name pos:start="383:13" pos:end="383:15">int</name></type> <name pos:start="383:17" pos:end="383:18">rb</name> <init pos:start="383:20" pos:end="383:49">= <expr pos:start="383:22" pos:end="383:49"><call pos:start="383:22" pos:end="383:49"><name pos:start="383:22" pos:end="383:26">mmreg</name><argument_list pos:start="383:27" pos:end="383:49">(<argument pos:start="383:28" pos:end="383:48"><expr pos:start="383:28" pos:end="383:48"><call pos:start="383:28" pos:end="383:48"><name pos:start="383:28" pos:end="383:35">uMIPS_RS</name><argument_list pos:start="383:36" pos:end="383:48">(<argument pos:start="383:37" pos:end="383:47"><expr pos:start="383:37" pos:end="383:47"><name pos:start="383:37" pos:end="383:47"><name pos:start="383:37" pos:end="383:39">ctx</name><operator pos:start="383:40" pos:end="383:41">-&gt;</operator><name pos:start="383:42" pos:end="383:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="385:13" pos:end="385:58"><decl pos:start="385:13" pos:end="385:57"><type pos:start="385:13" pos:end="385:19"><name pos:start="385:13" pos:end="385:19">int16_t</name></type> <name pos:start="385:21" pos:end="385:26">offset</name> <init pos:start="385:28" pos:end="385:57">= <expr pos:start="385:30" pos:end="385:57"><call pos:start="385:30" pos:end="385:52"><name pos:start="385:30" pos:end="385:33">ZIMM</name><argument_list pos:start="385:34" pos:end="385:52">(<argument pos:start="385:35" pos:end="385:45"><expr pos:start="385:35" pos:end="385:45"><name pos:start="385:35" pos:end="385:45"><name pos:start="385:35" pos:end="385:37">ctx</name><operator pos:start="385:38" pos:end="385:39">-&gt;</operator><name pos:start="385:40" pos:end="385:45">opcode</name></name></expr></argument>, <argument pos:start="385:48" pos:end="385:48"><expr pos:start="385:48" pos:end="385:48"><literal type="number" pos:start="385:48" pos:end="385:48">0</literal></expr></argument>, <argument pos:start="385:51" pos:end="385:51"><expr pos:start="385:51" pos:end="385:51"><literal type="number" pos:start="385:51" pos:end="385:51">4</literal></expr></argument>)</argument_list></call> <operator pos:start="385:54" pos:end="385:55">&lt;&lt;</operator> <literal type="number" pos:start="385:57" pos:end="385:57">2</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="389:13" pos:end="389:48"><expr pos:start="389:13" pos:end="389:47"><call pos:start="389:13" pos:end="389:47"><name pos:start="389:13" pos:end="389:18">gen_st</name><argument_list pos:start="389:19" pos:end="389:47">(<argument pos:start="389:20" pos:end="389:22"><expr pos:start="389:20" pos:end="389:22"><name pos:start="389:20" pos:end="389:22">ctx</name></expr></argument>, <argument pos:start="389:25" pos:end="389:30"><expr pos:start="389:25" pos:end="389:30"><name pos:start="389:25" pos:end="389:30">OPC_SW</name></expr></argument>, <argument pos:start="389:33" pos:end="389:34"><expr pos:start="389:33" pos:end="389:34"><name pos:start="389:33" pos:end="389:34">rd</name></expr></argument>, <argument pos:start="389:37" pos:end="389:38"><expr pos:start="389:37" pos:end="389:38"><name pos:start="389:37" pos:end="389:38">rb</name></expr></argument>, <argument pos:start="389:41" pos:end="389:46"><expr pos:start="389:41" pos:end="389:46"><name pos:start="389:41" pos:end="389:46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="393:9" pos:end="393:14">break;</break>

    <case pos:start="395:5" pos:end="395:16">case <expr pos:start="395:10" pos:end="395:15"><name pos:start="395:10" pos:end="395:15">MOVE16</name></expr>:</case>

        <block pos:start="397:9" pos:end="407:9">{<block_content pos:start="399:13" pos:end="405:48">

            <decl_stmt pos:start="399:13" pos:end="399:44"><decl pos:start="399:13" pos:end="399:43"><type pos:start="399:13" pos:end="399:15"><name pos:start="399:13" pos:end="399:15">int</name></type> <name pos:start="399:17" pos:end="399:18">rd</name> <init pos:start="399:20" pos:end="399:43">= <expr pos:start="399:22" pos:end="399:43"><call pos:start="399:22" pos:end="399:43"><name pos:start="399:22" pos:end="399:30">uMIPS_RD5</name><argument_list pos:start="399:31" pos:end="399:43">(<argument pos:start="399:32" pos:end="399:42"><expr pos:start="399:32" pos:end="399:42"><name pos:start="399:32" pos:end="399:42"><name pos:start="399:32" pos:end="399:34">ctx</name><operator pos:start="399:35" pos:end="399:36">-&gt;</operator><name pos:start="399:37" pos:end="399:42">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="401:13" pos:end="401:44"><decl pos:start="401:13" pos:end="401:43"><type pos:start="401:13" pos:end="401:15"><name pos:start="401:13" pos:end="401:15">int</name></type> <name pos:start="401:17" pos:end="401:18">rs</name> <init pos:start="401:20" pos:end="401:43">= <expr pos:start="401:22" pos:end="401:43"><call pos:start="401:22" pos:end="401:43"><name pos:start="401:22" pos:end="401:30">uMIPS_RS5</name><argument_list pos:start="401:31" pos:end="401:43">(<argument pos:start="401:32" pos:end="401:42"><expr pos:start="401:32" pos:end="401:42"><name pos:start="401:32" pos:end="401:42"><name pos:start="401:32" pos:end="401:34">ctx</name><operator pos:start="401:35" pos:end="401:36">-&gt;</operator><name pos:start="401:37" pos:end="401:42">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="405:13" pos:end="405:48"><expr pos:start="405:13" pos:end="405:47"><call pos:start="405:13" pos:end="405:47"><name pos:start="405:13" pos:end="405:21">gen_arith</name><argument_list pos:start="405:22" pos:end="405:47">(<argument pos:start="405:23" pos:end="405:25"><expr pos:start="405:23" pos:end="405:25"><name pos:start="405:23" pos:end="405:25">ctx</name></expr></argument>, <argument pos:start="405:28" pos:end="405:35"><expr pos:start="405:28" pos:end="405:35"><name pos:start="405:28" pos:end="405:35">OPC_ADDU</name></expr></argument>, <argument pos:start="405:38" pos:end="405:39"><expr pos:start="405:38" pos:end="405:39"><name pos:start="405:38" pos:end="405:39">rd</name></expr></argument>, <argument pos:start="405:42" pos:end="405:43"><expr pos:start="405:42" pos:end="405:43"><name pos:start="405:42" pos:end="405:43">rs</name></expr></argument>, <argument pos:start="405:46" pos:end="405:46"><expr pos:start="405:46" pos:end="405:46"><literal type="number" pos:start="405:46" pos:end="405:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="409:9" pos:end="409:14">break;</break>

    <case pos:start="411:5" pos:end="411:16">case <expr pos:start="411:10" pos:end="411:15"><name pos:start="411:10" pos:end="411:15">ANDI16</name></expr>:</case>

        <expr_stmt pos:start="413:9" pos:end="413:24"><expr pos:start="413:9" pos:end="413:23"><call pos:start="413:9" pos:end="413:23"><name pos:start="413:9" pos:end="413:18">gen_andi16</name><argument_list pos:start="413:19" pos:end="413:23">(<argument pos:start="413:20" pos:end="413:22"><expr pos:start="413:20" pos:end="413:22"><name pos:start="413:20" pos:end="413:22">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="415:9" pos:end="415:14">break;</break>

    <case pos:start="417:5" pos:end="417:17">case <expr pos:start="417:10" pos:end="417:16"><name pos:start="417:10" pos:end="417:16">POOL16D</name></expr>:</case>

        <switch pos:start="419:9" pos:end="433:9">switch <condition pos:start="419:16" pos:end="419:34">(<expr pos:start="419:17" pos:end="419:33"><name pos:start="419:17" pos:end="419:27"><name pos:start="419:17" pos:end="419:19">ctx</name><operator pos:start="419:20" pos:end="419:21">-&gt;</operator><name pos:start="419:22" pos:end="419:27">opcode</name></name> <operator pos:start="419:29" pos:end="419:29">&amp;</operator> <literal type="number" pos:start="419:31" pos:end="419:33">0x1</literal></expr>)</condition> <block pos:start="419:36" pos:end="433:9">{<block_content pos:start="421:9" pos:end="431:18">

        <case pos:start="421:9" pos:end="421:21">case <expr pos:start="421:14" pos:end="421:20"><name pos:start="421:14" pos:end="421:20">ADDIUS5</name></expr>:</case>

            <expr_stmt pos:start="423:13" pos:end="423:29"><expr pos:start="423:13" pos:end="423:28"><call pos:start="423:13" pos:end="423:28"><name pos:start="423:13" pos:end="423:23">gen_addius5</name><argument_list pos:start="423:24" pos:end="423:28">(<argument pos:start="423:25" pos:end="423:27"><expr pos:start="423:25" pos:end="423:27"><name pos:start="423:25" pos:end="423:27">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="425:13" pos:end="425:18">break;</break>

        <case pos:start="427:9" pos:end="427:21">case <expr pos:start="427:14" pos:end="427:20"><name pos:start="427:14" pos:end="427:20">ADDIUSP</name></expr>:</case>

            <expr_stmt pos:start="429:13" pos:end="429:29"><expr pos:start="429:13" pos:end="429:28"><call pos:start="429:13" pos:end="429:28"><name pos:start="429:13" pos:end="429:23">gen_addiusp</name><argument_list pos:start="429:24" pos:end="429:28">(<argument pos:start="429:25" pos:end="429:27"><expr pos:start="429:25" pos:end="429:27"><name pos:start="429:25" pos:end="429:27">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="431:13" pos:end="431:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="435:9" pos:end="435:14">break;</break>

    <case pos:start="437:5" pos:end="437:17">case <expr pos:start="437:10" pos:end="437:16"><name pos:start="437:10" pos:end="437:16">POOL16E</name></expr>:</case>

        <switch pos:start="439:9" pos:end="453:9">switch <condition pos:start="439:16" pos:end="439:34">(<expr pos:start="439:17" pos:end="439:33"><name pos:start="439:17" pos:end="439:27"><name pos:start="439:17" pos:end="439:19">ctx</name><operator pos:start="439:20" pos:end="439:21">-&gt;</operator><name pos:start="439:22" pos:end="439:27">opcode</name></name> <operator pos:start="439:29" pos:end="439:29">&amp;</operator> <literal type="number" pos:start="439:31" pos:end="439:33">0x1</literal></expr>)</condition> <block pos:start="439:36" pos:end="453:9">{<block_content pos:start="441:9" pos:end="451:18">

        <case pos:start="441:9" pos:end="441:21">case <expr pos:start="441:14" pos:end="441:20"><name pos:start="441:14" pos:end="441:20">ADDIUR2</name></expr>:</case>

            <expr_stmt pos:start="443:13" pos:end="443:29"><expr pos:start="443:13" pos:end="443:28"><call pos:start="443:13" pos:end="443:28"><name pos:start="443:13" pos:end="443:23">gen_addiur2</name><argument_list pos:start="443:24" pos:end="443:28">(<argument pos:start="443:25" pos:end="443:27"><expr pos:start="443:25" pos:end="443:27"><name pos:start="443:25" pos:end="443:27">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="445:13" pos:end="445:18">break;</break>

        <case pos:start="447:9" pos:end="447:23">case <expr pos:start="447:14" pos:end="447:22"><name pos:start="447:14" pos:end="447:22">ADDIUR1SP</name></expr>:</case>

            <expr_stmt pos:start="449:13" pos:end="449:31"><expr pos:start="449:13" pos:end="449:30"><call pos:start="449:13" pos:end="449:30"><name pos:start="449:13" pos:end="449:25">gen_addiur1sp</name><argument_list pos:start="449:26" pos:end="449:30">(<argument pos:start="449:27" pos:end="449:29"><expr pos:start="449:27" pos:end="449:29"><name pos:start="449:27" pos:end="449:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="451:13" pos:end="451:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="455:9" pos:end="455:14">break;</break>

    <case pos:start="457:5" pos:end="457:13">case <expr pos:start="457:10" pos:end="457:12"><name pos:start="457:10" pos:end="457:12">B16</name></expr>:</case>

        <expr_stmt pos:start="459:9" pos:end="461:61"><expr pos:start="459:9" pos:end="461:60"><call pos:start="459:9" pos:end="461:60"><name pos:start="459:9" pos:end="459:26">gen_compute_branch</name><argument_list pos:start="459:27" pos:end="461:60">(<argument pos:start="459:28" pos:end="459:30"><expr pos:start="459:28" pos:end="459:30"><name pos:start="459:28" pos:end="459:30">ctx</name></expr></argument>, <argument pos:start="459:33" pos:end="459:39"><expr pos:start="459:33" pos:end="459:39"><name pos:start="459:33" pos:end="459:39">OPC_BEQ</name></expr></argument>, <argument pos:start="459:42" pos:end="459:42"><expr pos:start="459:42" pos:end="459:42"><literal type="number" pos:start="459:42" pos:end="459:42">2</literal></expr></argument>, <argument pos:start="459:45" pos:end="459:45"><expr pos:start="459:45" pos:end="459:45"><literal type="number" pos:start="459:45" pos:end="459:45">0</literal></expr></argument>, <argument pos:start="459:48" pos:end="459:48"><expr pos:start="459:48" pos:end="459:48"><literal type="number" pos:start="459:48" pos:end="459:48">0</literal></expr></argument>,

                           <argument pos:start="461:28" pos:end="461:56"><expr pos:start="461:28" pos:end="461:56"><call pos:start="461:28" pos:end="461:51"><name pos:start="461:28" pos:end="461:31">SIMM</name><argument_list pos:start="461:32" pos:end="461:51">(<argument pos:start="461:33" pos:end="461:43"><expr pos:start="461:33" pos:end="461:43"><name pos:start="461:33" pos:end="461:43"><name pos:start="461:33" pos:end="461:35">ctx</name><operator pos:start="461:36" pos:end="461:37">-&gt;</operator><name pos:start="461:38" pos:end="461:43">opcode</name></name></expr></argument>, <argument pos:start="461:46" pos:end="461:46"><expr pos:start="461:46" pos:end="461:46"><literal type="number" pos:start="461:46" pos:end="461:46">0</literal></expr></argument>, <argument pos:start="461:49" pos:end="461:50"><expr pos:start="461:49" pos:end="461:50"><literal type="number" pos:start="461:49" pos:end="461:50">10</literal></expr></argument>)</argument_list></call> <operator pos:start="461:53" pos:end="461:54">&lt;&lt;</operator> <literal type="number" pos:start="461:56" pos:end="461:56">1</literal></expr></argument>, <argument pos:start="461:59" pos:end="461:59"><expr pos:start="461:59" pos:end="461:59"><literal type="number" pos:start="461:59" pos:end="461:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="463:9" pos:end="463:14">break;</break>

    <case pos:start="465:5" pos:end="465:16">case <expr pos:start="465:10" pos:end="465:15"><name pos:start="465:10" pos:end="465:15">BNEZ16</name></expr>:</case>

    <case pos:start="467:5" pos:end="467:16">case <expr pos:start="467:10" pos:end="467:15"><name pos:start="467:10" pos:end="467:15">BEQZ16</name></expr>:</case>

        <expr_stmt pos:start="469:9" pos:end="473:63"><expr pos:start="469:9" pos:end="473:62"><call pos:start="469:9" pos:end="473:62"><name pos:start="469:9" pos:end="469:26">gen_compute_branch</name><argument_list pos:start="469:27" pos:end="473:62">(<argument pos:start="469:28" pos:end="469:30"><expr pos:start="469:28" pos:end="469:30"><name pos:start="469:28" pos:end="469:30">ctx</name></expr></argument>, <argument pos:start="469:33" pos:end="469:64"><expr pos:start="469:33" pos:end="469:64"><ternary pos:start="469:33" pos:end="469:64"><condition pos:start="469:33" pos:end="469:46"><expr pos:start="469:33" pos:end="469:44"><name pos:start="469:33" pos:end="469:34">op</name> <operator pos:start="469:36" pos:end="469:37">==</operator> <name pos:start="469:39" pos:end="469:44">BNEZ16</name></expr> ?</condition><then pos:start="469:48" pos:end="469:54"> <expr pos:start="469:48" pos:end="469:54"><name pos:start="469:48" pos:end="469:54">OPC_BNE</name></expr> </then><else pos:start="469:56" pos:end="469:64">: <expr pos:start="469:58" pos:end="469:64"><name pos:start="469:58" pos:end="469:64">OPC_BEQ</name></expr></else></ternary></expr></argument>, <argument pos:start="469:67" pos:end="469:67"><expr pos:start="469:67" pos:end="469:67"><literal type="number" pos:start="469:67" pos:end="469:67">2</literal></expr></argument>,

                           <argument pos:start="471:28" pos:end="471:55"><expr pos:start="471:28" pos:end="471:55"><call pos:start="471:28" pos:end="471:55"><name pos:start="471:28" pos:end="471:32">mmreg</name><argument_list pos:start="471:33" pos:end="471:55">(<argument pos:start="471:34" pos:end="471:54"><expr pos:start="471:34" pos:end="471:54"><call pos:start="471:34" pos:end="471:54"><name pos:start="471:34" pos:end="471:41">uMIPS_RD</name><argument_list pos:start="471:42" pos:end="471:54">(<argument pos:start="471:43" pos:end="471:53"><expr pos:start="471:43" pos:end="471:53"><name pos:start="471:43" pos:end="471:53"><name pos:start="471:43" pos:end="471:45">ctx</name><operator pos:start="471:46" pos:end="471:47">-&gt;</operator><name pos:start="471:48" pos:end="471:53">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="473:28" pos:end="473:28"><expr pos:start="473:28" pos:end="473:28"><literal type="number" pos:start="473:28" pos:end="473:28">0</literal></expr></argument>, <argument pos:start="473:31" pos:end="473:58"><expr pos:start="473:31" pos:end="473:58"><call pos:start="473:31" pos:end="473:53"><name pos:start="473:31" pos:end="473:34">SIMM</name><argument_list pos:start="473:35" pos:end="473:53">(<argument pos:start="473:36" pos:end="473:46"><expr pos:start="473:36" pos:end="473:46"><name pos:start="473:36" pos:end="473:46"><name pos:start="473:36" pos:end="473:38">ctx</name><operator pos:start="473:39" pos:end="473:40">-&gt;</operator><name pos:start="473:41" pos:end="473:46">opcode</name></name></expr></argument>, <argument pos:start="473:49" pos:end="473:49"><expr pos:start="473:49" pos:end="473:49"><literal type="number" pos:start="473:49" pos:end="473:49">0</literal></expr></argument>, <argument pos:start="473:52" pos:end="473:52"><expr pos:start="473:52" pos:end="473:52"><literal type="number" pos:start="473:52" pos:end="473:52">7</literal></expr></argument>)</argument_list></call> <operator pos:start="473:55" pos:end="473:56">&lt;&lt;</operator> <literal type="number" pos:start="473:58" pos:end="473:58">1</literal></expr></argument>, <argument pos:start="473:61" pos:end="473:61"><expr pos:start="473:61" pos:end="473:61"><literal type="number" pos:start="473:61" pos:end="473:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="475:9" pos:end="475:14">break;</break>

    <case pos:start="477:5" pos:end="477:14">case <expr pos:start="477:10" pos:end="477:13"><name pos:start="477:10" pos:end="477:13">LI16</name></expr>:</case>

        <block pos:start="479:9" pos:end="491:9">{<block_content pos:start="481:13" pos:end="489:47">

            <decl_stmt pos:start="481:13" pos:end="481:51"><decl pos:start="481:13" pos:end="481:50"><type pos:start="481:13" pos:end="481:15"><name pos:start="481:13" pos:end="481:15">int</name></type> <name pos:start="481:17" pos:end="481:19">reg</name> <init pos:start="481:21" pos:end="481:50">= <expr pos:start="481:23" pos:end="481:50"><call pos:start="481:23" pos:end="481:50"><name pos:start="481:23" pos:end="481:27">mmreg</name><argument_list pos:start="481:28" pos:end="481:50">(<argument pos:start="481:29" pos:end="481:49"><expr pos:start="481:29" pos:end="481:49"><call pos:start="481:29" pos:end="481:49"><name pos:start="481:29" pos:end="481:36">uMIPS_RD</name><argument_list pos:start="481:37" pos:end="481:49">(<argument pos:start="481:38" pos:end="481:48"><expr pos:start="481:38" pos:end="481:48"><name pos:start="481:38" pos:end="481:48"><name pos:start="481:38" pos:end="481:40">ctx</name><operator pos:start="481:41" pos:end="481:42">-&gt;</operator><name pos:start="481:43" pos:end="481:48">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="483:13" pos:end="483:46"><decl pos:start="483:13" pos:end="483:45"><type pos:start="483:13" pos:end="483:15"><name pos:start="483:13" pos:end="483:15">int</name></type> <name pos:start="483:17" pos:end="483:19">imm</name> <init pos:start="483:21" pos:end="483:45">= <expr pos:start="483:23" pos:end="483:45"><call pos:start="483:23" pos:end="483:45"><name pos:start="483:23" pos:end="483:26">ZIMM</name><argument_list pos:start="483:27" pos:end="483:45">(<argument pos:start="483:28" pos:end="483:38"><expr pos:start="483:28" pos:end="483:38"><name pos:start="483:28" pos:end="483:38"><name pos:start="483:28" pos:end="483:30">ctx</name><operator pos:start="483:31" pos:end="483:32">-&gt;</operator><name pos:start="483:33" pos:end="483:38">opcode</name></name></expr></argument>, <argument pos:start="483:41" pos:end="483:41"><expr pos:start="483:41" pos:end="483:41"><literal type="number" pos:start="483:41" pos:end="483:41">0</literal></expr></argument>, <argument pos:start="483:44" pos:end="483:44"><expr pos:start="483:44" pos:end="483:44"><literal type="number" pos:start="483:44" pos:end="483:44">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="487:13" pos:end="487:43"><expr pos:start="487:13" pos:end="487:42"><name pos:start="487:13" pos:end="487:15">imm</name> <operator pos:start="487:17" pos:end="487:17">=</operator> <operator pos:start="487:19" pos:end="487:19">(</operator><ternary pos:start="487:20" pos:end="487:41"><condition pos:start="487:20" pos:end="487:32"><expr pos:start="487:20" pos:end="487:30"><name pos:start="487:20" pos:end="487:22">imm</name> <operator pos:start="487:24" pos:end="487:25">==</operator> <literal type="number" pos:start="487:27" pos:end="487:30">0x7f</literal></expr> ?</condition><then pos:start="487:34" pos:end="487:35"> <expr pos:start="487:34" pos:end="487:35"><operator pos:start="487:34" pos:end="487:34">-</operator><literal type="number" pos:start="487:35" pos:end="487:35">1</literal></expr> </then><else pos:start="487:37" pos:end="487:41">: <expr pos:start="487:39" pos:end="487:41"><name pos:start="487:39" pos:end="487:41">imm</name></expr></else></ternary><operator pos:start="487:42" pos:end="487:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:47"><expr pos:start="489:13" pos:end="489:46"><call pos:start="489:13" pos:end="489:46"><name pos:start="489:13" pos:end="489:27">tcg_gen_movi_tl</name><argument_list pos:start="489:28" pos:end="489:46">(<argument pos:start="489:29" pos:end="489:40"><expr pos:start="489:29" pos:end="489:40"><name pos:start="489:29" pos:end="489:40"><name pos:start="489:29" pos:end="489:35">cpu_gpr</name><index pos:start="489:36" pos:end="489:40">[<expr pos:start="489:37" pos:end="489:39"><name pos:start="489:37" pos:end="489:39">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="489:43" pos:end="489:45"><expr pos:start="489:43" pos:end="489:45"><name pos:start="489:43" pos:end="489:45">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="493:9" pos:end="493:14">break;</break>

    <case pos:start="495:5" pos:end="495:16">case <expr pos:start="495:10" pos:end="495:15"><name pos:start="495:10" pos:end="495:15">RES_20</name></expr>:</case>

    <case pos:start="497:5" pos:end="497:16">case <expr pos:start="497:10" pos:end="497:15"><name pos:start="497:10" pos:end="497:15">RES_28</name></expr>:</case>

    <case pos:start="499:5" pos:end="499:16">case <expr pos:start="499:10" pos:end="499:15"><name pos:start="499:10" pos:end="499:15">RES_29</name></expr>:</case>

    <case pos:start="501:5" pos:end="501:16">case <expr pos:start="501:10" pos:end="501:15"><name pos:start="501:10" pos:end="501:15">RES_30</name></expr>:</case>

    <case pos:start="503:5" pos:end="503:16">case <expr pos:start="503:10" pos:end="503:15"><name pos:start="503:10" pos:end="503:15">RES_31</name></expr>:</case>

    <case pos:start="505:5" pos:end="505:16">case <expr pos:start="505:10" pos:end="505:15"><name pos:start="505:10" pos:end="505:15">RES_38</name></expr>:</case>

    <case pos:start="507:5" pos:end="507:16">case <expr pos:start="507:10" pos:end="507:15"><name pos:start="507:10" pos:end="507:15">RES_39</name></expr>:</case>

        <expr_stmt pos:start="509:9" pos:end="509:41"><expr pos:start="509:9" pos:end="509:40"><call pos:start="509:9" pos:end="509:40"><name pos:start="509:9" pos:end="509:26">generate_exception</name><argument_list pos:start="509:27" pos:end="509:40">(<argument pos:start="509:28" pos:end="509:30"><expr pos:start="509:28" pos:end="509:30"><name pos:start="509:28" pos:end="509:30">ctx</name></expr></argument>, <argument pos:start="509:33" pos:end="509:39"><expr pos:start="509:33" pos:end="509:39"><name pos:start="509:33" pos:end="509:39">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="511:9" pos:end="511:14">break;</break>

    <default pos:start="513:5" pos:end="513:12">default:</default>

        <expr_stmt pos:start="515:9" pos:end="515:41"><expr pos:start="515:9" pos:end="515:40"><call pos:start="515:9" pos:end="515:40"><name pos:start="515:9" pos:end="515:30">decode_micromips32_opc</name><argument_list pos:start="515:31" pos:end="515:40">(<argument pos:start="515:32" pos:end="515:34"><expr pos:start="515:32" pos:end="515:34"><name pos:start="515:32" pos:end="515:34">env</name></expr></argument>, <argument pos:start="515:37" pos:end="515:39"><expr pos:start="515:37" pos:end="515:39"><name pos:start="515:37" pos:end="515:39">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="517:9" pos:end="517:17">return <expr pos:start="517:16" pos:end="517:16"><literal type="number" pos:start="517:16" pos:end="517:16">4</literal></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="523:5" pos:end="523:13">return <expr pos:start="523:12" pos:end="523:12"><literal type="number" pos:start="523:12" pos:end="523:12">2</literal></expr>;</return>

</block_content>}</block></function>
</unit>
