<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5572.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">virtio_net_tx_bh</name><parameter_list pos:start="1:29" pos:end="1:42">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:35"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">VirtIONetQueue</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">q</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">VirtIONet</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">n</name> <init pos:start="7:18" pos:end="7:23">= <expr pos:start="7:20" pos:end="7:23"><name pos:start="7:20" pos:end="7:23"><name pos:start="7:20" pos:end="7:20">q</name><operator pos:start="7:21" pos:end="7:22">-&gt;</operator><name pos:start="7:23" pos:end="7:23">n</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">VirtIODevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">vdev</name> <init pos:start="9:24" pos:end="9:41">= <expr pos:start="9:26" pos:end="9:41"><call pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:38">VIRTIO_DEVICE</name><argument_list pos:start="9:39" pos:end="9:41">(<argument pos:start="9:40" pos:end="9:40"><expr pos:start="9:40" pos:end="9:40"><name pos:start="9:40" pos:end="9:40">n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int32_t</name></type> <name pos:start="11:13" pos:end="11:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:29"><expr pos:start="15:5" pos:end="15:28"><call pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:28">(<argument pos:start="15:12" pos:end="15:27"><expr pos:start="15:12" pos:end="15:27"><name pos:start="15:12" pos:end="15:27"><name pos:start="15:12" pos:end="15:15">vdev</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:27">vm_running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:5">q</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:17">tx_waiting</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:54">/* Just in case the driver is not ready on more */</comment>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:62">(<expr pos:start="25:9" pos:end="25:61"><call pos:start="25:9" pos:end="25:61"><name pos:start="25:9" pos:end="25:16">unlikely</name><argument_list pos:start="25:17" pos:end="25:61">(<argument pos:start="25:18" pos:end="25:60"><expr pos:start="25:18" pos:end="25:60"><operator pos:start="25:18" pos:end="25:18">!</operator><operator pos:start="25:19" pos:end="25:19">(</operator><name pos:start="25:20" pos:end="25:31"><name pos:start="25:20" pos:end="25:23">vdev</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:31">status</name></name> <operator pos:start="25:33" pos:end="25:33">&amp;</operator> <name pos:start="25:35" pos:end="25:59">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="25:60" pos:end="25:60">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:64" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:32"><name pos:start="33:11" pos:end="33:29">virtio_net_flush_tx</name><argument_list pos:start="33:30" pos:end="33:32">(<argument pos:start="33:31" pos:end="33:31"><expr pos:start="33:31" pos:end="33:31"><name pos:start="33:31" pos:end="33:31">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:14">==</operator> <operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:21">EBUSY</name></expr>)</condition> <block pos:start="35:24" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:15">

        <return pos:start="37:9" pos:end="37:15">return;</return> <comment type="block" pos:start="37:17" pos:end="37:67">/* Notification re-enable handled by tx_complete */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:48">/* If we flush a full burst of packets, assume there are

     * more coming and immediately reschedule */</comment>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:27">(<expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:14">&gt;=</operator> <name pos:start="47:16" pos:end="47:26"><name pos:start="47:16" pos:end="47:16">n</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:26">tx_burst</name></name></expr>)</condition> <block pos:start="47:29" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:15">

        <expr_stmt pos:start="49:9" pos:end="49:35"><expr pos:start="49:9" pos:end="49:34"><call pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:24">qemu_bh_schedule</name><argument_list pos:start="49:25" pos:end="49:34">(<argument pos:start="49:26" pos:end="49:33"><expr pos:start="49:26" pos:end="49:33"><name pos:start="49:26" pos:end="49:33"><name pos:start="49:26" pos:end="49:26">q</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:33">tx_bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:26"><expr pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:9">q</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:21">tx_waiting</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <literal type="number" pos:start="51:25" pos:end="51:25">1</literal></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="63:76">/* If less than a full burst, re-enable notification and flush

     * anything that may have come in while we weren't looking.  If

     * we find something, assume the guest is still active and reschedule */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:47"><expr pos:start="65:5" pos:end="65:46"><call pos:start="65:5" pos:end="65:46"><name pos:start="65:5" pos:end="65:33">virtio_queue_set_notification</name><argument_list pos:start="65:34" pos:end="65:46">(<argument pos:start="65:35" pos:end="65:42"><expr pos:start="65:35" pos:end="65:42"><name pos:start="65:35" pos:end="65:42"><name pos:start="65:35" pos:end="65:35">q</name><operator pos:start="65:36" pos:end="65:37">-&gt;</operator><name pos:start="65:38" pos:end="65:42">tx_vq</name></name></expr></argument>, <argument pos:start="65:45" pos:end="65:45"><expr pos:start="65:45" pos:end="65:45"><literal type="number" pos:start="65:45" pos:end="65:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:35">(<expr pos:start="67:9" pos:end="67:34"><call pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:27">virtio_net_flush_tx</name><argument_list pos:start="67:28" pos:end="67:30">(<argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">q</name></expr></argument>)</argument_list></call> <operator pos:start="67:32" pos:end="67:32">&gt;</operator> <literal type="number" pos:start="67:34" pos:end="67:34">0</literal></expr>)</condition> <block pos:start="67:37" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:26">

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><call pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:37">virtio_queue_set_notification</name><argument_list pos:start="69:38" pos:end="69:50">(<argument pos:start="69:39" pos:end="69:46"><expr pos:start="69:39" pos:end="69:46"><name pos:start="69:39" pos:end="69:46"><name pos:start="69:39" pos:end="69:39">q</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:46">tx_vq</name></name></expr></argument>, <argument pos:start="69:49" pos:end="69:49"><expr pos:start="69:49" pos:end="69:49"><literal type="number" pos:start="69:49" pos:end="69:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><call pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:24">qemu_bh_schedule</name><argument_list pos:start="71:25" pos:end="71:34">(<argument pos:start="71:26" pos:end="71:33"><expr pos:start="71:26" pos:end="71:33"><name pos:start="71:26" pos:end="71:33"><name pos:start="71:26" pos:end="71:26">q</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:33">tx_bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:9">q</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:21">tx_waiting</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <literal type="number" pos:start="73:25" pos:end="73:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
