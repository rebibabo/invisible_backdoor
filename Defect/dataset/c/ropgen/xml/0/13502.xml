<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13502.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">net_slirp_init</name><parameter_list pos:start="1:26" pos:end="13:49">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:33">Monitor</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">mon</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:49">VLANState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">vlan</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:74"><decl pos:start="1:58" pos:end="1:74"><type pos:start="1:58" pos:end="1:74"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:74">model</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">name</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:58">restricted</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:46"><decl pos:start="5:27" pos:end="5:46"><type pos:start="5:27" pos:end="5:46"><specifier pos:start="5:27" pos:end="5:31">const</specifier> <name pos:start="5:33" pos:end="5:36">char</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:46">vnetwork</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:65"><decl pos:start="5:49" pos:end="5:65"><type pos:start="5:49" pos:end="5:65"><specifier pos:start="5:49" pos:end="5:53">const</specifier> <name pos:start="5:55" pos:end="5:58">char</name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:65">vhost</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:47"><decl pos:start="7:27" pos:end="7:47"><type pos:start="7:27" pos:end="7:47"><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:36">char</name> <modifier pos:start="7:38" pos:end="7:38">*</modifier></type><name pos:start="7:39" pos:end="7:47">vhostname</name></decl></parameter>, <parameter pos:start="7:50" pos:end="7:72"><decl pos:start="7:50" pos:end="7:72"><type pos:start="7:50" pos:end="7:72"><specifier pos:start="7:50" pos:end="7:54">const</specifier> <name pos:start="7:56" pos:end="7:59">char</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:72">tftp_export</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:46"><decl pos:start="9:27" pos:end="9:46"><type pos:start="9:27" pos:end="9:46"><specifier pos:start="9:27" pos:end="9:31">const</specifier> <name pos:start="9:33" pos:end="9:36">char</name> <modifier pos:start="9:38" pos:end="9:38">*</modifier></type><name pos:start="9:39" pos:end="9:46">bootfile</name></decl></parameter>, <parameter pos:start="9:49" pos:end="9:71"><decl pos:start="9:49" pos:end="9:71"><type pos:start="9:49" pos:end="9:71"><specifier pos:start="9:49" pos:end="9:53">const</specifier> <name pos:start="9:55" pos:end="9:58">char</name> <modifier pos:start="9:60" pos:end="9:60">*</modifier></type><name pos:start="9:61" pos:end="9:71">vdhcp_start</name></decl></parameter>,

                          <parameter pos:start="11:27" pos:end="11:49"><decl pos:start="11:27" pos:end="11:49"><type pos:start="11:27" pos:end="11:49"><specifier pos:start="11:27" pos:end="11:31">const</specifier> <name pos:start="11:33" pos:end="11:36">char</name> <modifier pos:start="11:38" pos:end="11:38">*</modifier></type><name pos:start="11:39" pos:end="11:49">vnameserver</name></decl></parameter>, <parameter pos:start="11:52" pos:end="11:73"><decl pos:start="11:52" pos:end="11:73"><type pos:start="11:52" pos:end="11:73"><specifier pos:start="11:52" pos:end="11:56">const</specifier> <name pos:start="11:58" pos:end="11:61">char</name> <modifier pos:start="11:63" pos:end="11:63">*</modifier></type><name pos:start="11:64" pos:end="11:73">smb_export</name></decl></parameter>,

                          <parameter pos:start="13:27" pos:end="13:48"><decl pos:start="13:27" pos:end="13:48"><type pos:start="13:27" pos:end="13:48"><specifier pos:start="13:27" pos:end="13:31">const</specifier> <name pos:start="13:33" pos:end="13:36">char</name> <modifier pos:start="13:38" pos:end="13:38">*</modifier></type><name pos:start="13:39" pos:end="13:48">vsmbserver</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="267:1">{<block_content pos:start="19:5" pos:end="265:13">

    <comment type="block" pos:start="17:5" pos:end="17:54">/* default settings according to historic slirp */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:57"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:18">in_addr</name></name></type> <name pos:start="19:20" pos:end="19:22">net</name>  <init pos:start="19:25" pos:end="19:57">= <expr pos:start="19:27" pos:end="19:57"><block pos:start="19:27" pos:end="19:57">{ <expr pos:start="19:29" pos:end="19:55"><operator pos:start="19:29" pos:end="19:29">.</operator><name pos:start="19:30" pos:end="19:35">s_addr</name> <operator pos:start="19:37" pos:end="19:37">=</operator> <macro pos:start="19:39" pos:end="19:55"><name pos:start="19:39" pos:end="19:43">htonl</name><argument_list pos:start="19:44" pos:end="19:55">(<argument pos:start="19:45" pos:end="19:54"><literal type="number" pos:start="19:45" pos:end="19:54">0x0a000200</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="19:60" pos:end="19:73">/* 10.0.2.0 */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:58"><decl pos:start="21:5" pos:end="21:57"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:18">in_addr</name></name></type> <name pos:start="21:20" pos:end="21:23">mask</name> <init pos:start="21:25" pos:end="21:57">= <expr pos:start="21:27" pos:end="21:57"><block pos:start="21:27" pos:end="21:57">{ <expr pos:start="21:29" pos:end="21:55"><operator pos:start="21:29" pos:end="21:29">.</operator><name pos:start="21:30" pos:end="21:35">s_addr</name> <operator pos:start="21:37" pos:end="21:37">=</operator> <macro pos:start="21:39" pos:end="21:55"><name pos:start="21:39" pos:end="21:43">htonl</name><argument_list pos:start="21:44" pos:end="21:55">(<argument pos:start="21:45" pos:end="21:54"><literal type="number" pos:start="21:45" pos:end="21:54">0xffffff00</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="21:60" pos:end="21:78">/* 255.255.255.0 */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:58"><decl pos:start="23:5" pos:end="23:57"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:18">in_addr</name></name></type> <name pos:start="23:20" pos:end="23:23">host</name> <init pos:start="23:25" pos:end="23:57">= <expr pos:start="23:27" pos:end="23:57"><block pos:start="23:27" pos:end="23:57">{ <expr pos:start="23:29" pos:end="23:55"><operator pos:start="23:29" pos:end="23:29">.</operator><name pos:start="23:30" pos:end="23:35">s_addr</name> <operator pos:start="23:37" pos:end="23:37">=</operator> <macro pos:start="23:39" pos:end="23:55"><name pos:start="23:39" pos:end="23:43">htonl</name><argument_list pos:start="23:44" pos:end="23:55">(<argument pos:start="23:45" pos:end="23:54"><literal type="number" pos:start="23:45" pos:end="23:54">0x0a000202</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="23:60" pos:end="23:73">/* 10.0.2.2 */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:58"><decl pos:start="25:5" pos:end="25:57"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:10">struct</name> <name pos:start="25:12" pos:end="25:18">in_addr</name></name></type> <name pos:start="25:20" pos:end="25:23">dhcp</name> <init pos:start="25:25" pos:end="25:57">= <expr pos:start="25:27" pos:end="25:57"><block pos:start="25:27" pos:end="25:57">{ <expr pos:start="25:29" pos:end="25:55"><operator pos:start="25:29" pos:end="25:29">.</operator><name pos:start="25:30" pos:end="25:35">s_addr</name> <operator pos:start="25:37" pos:end="25:37">=</operator> <macro pos:start="25:39" pos:end="25:55"><name pos:start="25:39" pos:end="25:43">htonl</name><argument_list pos:start="25:44" pos:end="25:55">(<argument pos:start="25:45" pos:end="25:54"><literal type="number" pos:start="25:45" pos:end="25:54">0x0a00020f</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="25:60" pos:end="25:74">/* 10.0.2.15 */</comment>

    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:57"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:10">struct</name> <name pos:start="27:12" pos:end="27:18">in_addr</name></name></type> <name pos:start="27:20" pos:end="27:22">dns</name>  <init pos:start="27:25" pos:end="27:57">= <expr pos:start="27:27" pos:end="27:57"><block pos:start="27:27" pos:end="27:57">{ <expr pos:start="27:29" pos:end="27:55"><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:35">s_addr</name> <operator pos:start="27:37" pos:end="27:37">=</operator> <macro pos:start="27:39" pos:end="27:55"><name pos:start="27:39" pos:end="27:43">htonl</name><argument_list pos:start="27:44" pos:end="27:55">(<argument pos:start="27:45" pos:end="27:54"><literal type="number" pos:start="27:45" pos:end="27:54">0x0a000203</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="27:60" pos:end="27:73">/* 10.0.2.3 */</comment>

<cpp:ifndef pos:start="29:1" pos:end="29:14">#<cpp:directive pos:start="29:2" pos:end="29:7">ifndef</cpp:directive> <name pos:start="29:9" pos:end="29:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="31:5" pos:end="34:0"><decl pos:start="31:5" pos:end="31:43"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:10">struct</name> <name pos:start="31:12" pos:end="31:18">in_addr</name></name></type> <name pos:start="31:20" pos:end="31:25">smbsrv</name> <init pos:start="31:27" pos:end="31:43">= <expr pos:start="31:29" pos:end="31:43"><block pos:start="31:29" pos:end="31:43">{ <expr pos:start="31:31" pos:end="31:41"><operator pos:start="31:31" pos:end="31:31">.</operator><name pos:start="31:32" pos:end="31:37">s_addr</name> <operator pos:start="31:39" pos:end="31:39">=</operator> <literal type="number" pos:start="31:41" pos:end="31:41">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:14">SlirpState</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:17">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:17"><decl pos:start="37:5" pos:end="37:16"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">char</name></type> <name pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:12">buf</name><index pos:start="37:13" pos:end="37:16">[<expr pos:start="37:14" pos:end="37:15"><literal type="number" pos:start="37:14" pos:end="37:15">20</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:18"><decl pos:start="39:5" pos:end="39:17"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:12">uint32_t</name></type> <name pos:start="39:14" pos:end="39:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:14"><decl pos:start="41:5" pos:end="41:13"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:14"><decl pos:start="43:5" pos:end="43:13"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:8">char</name> <modifier pos:start="43:10" pos:end="43:10">*</modifier></type><name pos:start="43:11" pos:end="43:13">end</name></decl>;</decl_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:21">(<expr pos:start="47:9" pos:end="47:20"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:20">tftp_export</name></expr>)</condition> <block pos:start="47:23" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:41">

        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:19">tftp_export</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:40">legacy_tftp_prefix</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:18">(<expr pos:start="53:9" pos:end="53:17"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:17">bootfile</name></expr>)</condition> <block pos:start="53:20" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:41">

        <expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:16">bootfile</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:40">legacy_bootp_filename</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="141:5"><if pos:start="61:5" pos:end="141:5">if <condition pos:start="61:8" pos:end="61:17">(<expr pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">vnetwork</name></expr>)</condition> <block pos:start="61:19" pos:end="141:5">{<block_content pos:start="63:9" pos:end="139:66">

        <if_stmt pos:start="63:9" pos:end="131:9"><if pos:start="63:9" pos:end="103:9">if <condition pos:start="63:12" pos:end="63:62">(<expr pos:start="63:13" pos:end="63:61"><call pos:start="63:13" pos:end="63:57"><name pos:start="63:13" pos:end="63:23">get_str_sep</name><argument_list pos:start="63:24" pos:end="63:57">(<argument pos:start="63:25" pos:end="63:27"><expr pos:start="63:25" pos:end="63:27"><name pos:start="63:25" pos:end="63:27">buf</name></expr></argument>, <argument pos:start="63:30" pos:end="63:40"><expr pos:start="63:30" pos:end="63:40"><sizeof pos:start="63:30" pos:end="63:40">sizeof<argument_list pos:start="63:36" pos:end="63:40">(<argument pos:start="63:37" pos:end="63:39"><expr pos:start="63:37" pos:end="63:39"><name pos:start="63:37" pos:end="63:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="63:43" pos:end="63:51"><expr pos:start="63:43" pos:end="63:51"><operator pos:start="63:43" pos:end="63:43">&amp;</operator><name pos:start="63:44" pos:end="63:51">vnetwork</name></expr></argument>, <argument pos:start="63:54" pos:end="63:56"><expr pos:start="63:54" pos:end="63:56"><literal type="char" pos:start="63:54" pos:end="63:56">'/'</literal></expr></argument>)</argument_list></call> <operator pos:start="63:59" pos:end="63:59">&lt;</operator> <literal type="number" pos:start="63:61" pos:end="63:61">0</literal></expr>)</condition> <block pos:start="63:64" pos:end="103:9">{<block_content pos:start="65:13" pos:end="101:13">

            <if_stmt pos:start="65:13" pos:end="69:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:43">(<expr pos:start="65:17" pos:end="65:42"><operator pos:start="65:17" pos:end="65:17">!</operator><call pos:start="65:18" pos:end="65:42"><name pos:start="65:18" pos:end="65:26">inet_aton</name><argument_list pos:start="65:27" pos:end="65:42">(<argument pos:start="65:28" pos:end="65:35"><expr pos:start="65:28" pos:end="65:35"><name pos:start="65:28" pos:end="65:35">vnetwork</name></expr></argument>, <argument pos:start="65:38" pos:end="65:41"><expr pos:start="65:38" pos:end="65:41"><operator pos:start="65:38" pos:end="65:38">&amp;</operator><name pos:start="65:39" pos:end="65:41">net</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:45" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:26">

                <return pos:start="67:17" pos:end="67:26">return <expr pos:start="67:24" pos:end="67:25"><operator pos:start="67:24" pos:end="67:24">-</operator><literal type="number" pos:start="67:25" pos:end="67:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:37"><expr pos:start="71:13" pos:end="71:36"><name pos:start="71:13" pos:end="71:16">addr</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <call pos:start="71:20" pos:end="71:36"><name pos:start="71:20" pos:end="71:24">ntohl</name><argument_list pos:start="71:25" pos:end="71:36">(<argument pos:start="71:26" pos:end="71:35"><expr pos:start="71:26" pos:end="71:35"><name pos:start="71:26" pos:end="71:35"><name pos:start="71:26" pos:end="71:28">net</name><operator pos:start="71:29" pos:end="71:29">.</operator><name pos:start="71:30" pos:end="71:35">s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="101:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:37">(<expr pos:start="73:17" pos:end="73:36"><operator pos:start="73:17" pos:end="73:17">!</operator><operator pos:start="73:18" pos:end="73:18">(</operator><name pos:start="73:19" pos:end="73:22">addr</name> <operator pos:start="73:24" pos:end="73:24">&amp;</operator> <literal type="number" pos:start="73:26" pos:end="73:35">0x80000000</literal><operator pos:start="73:36" pos:end="73:36">)</operator></expr>)</condition> <block pos:start="73:39" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:48">

                <expr_stmt pos:start="75:17" pos:end="75:48"><expr pos:start="75:17" pos:end="75:47"><name pos:start="75:17" pos:end="75:27"><name pos:start="75:17" pos:end="75:20">mask</name><operator pos:start="75:21" pos:end="75:21">.</operator><name pos:start="75:22" pos:end="75:27">s_addr</name></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <call pos:start="75:31" pos:end="75:47"><name pos:start="75:31" pos:end="75:35">htonl</name><argument_list pos:start="75:36" pos:end="75:47">(<argument pos:start="75:37" pos:end="75:46"><expr pos:start="75:37" pos:end="75:46"><literal type="number" pos:start="75:37" pos:end="75:46">0xff000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="75:50" pos:end="75:62">/* class A */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="77:15" pos:end="81:13">else if <condition pos:start="77:23" pos:end="77:57">(<expr pos:start="77:24" pos:end="77:56"><operator pos:start="77:24" pos:end="77:24">(</operator><name pos:start="77:25" pos:end="77:28">addr</name> <operator pos:start="77:30" pos:end="77:30">&amp;</operator> <literal type="number" pos:start="77:32" pos:end="77:41">0xfff00000</literal><operator pos:start="77:42" pos:end="77:42">)</operator> <operator pos:start="77:44" pos:end="77:45">==</operator> <literal type="number" pos:start="77:47" pos:end="77:56">0xac100000</literal></expr>)</condition> <block pos:start="77:59" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:48">

                <expr_stmt pos:start="79:17" pos:end="79:48"><expr pos:start="79:17" pos:end="79:47"><name pos:start="79:17" pos:end="79:27"><name pos:start="79:17" pos:end="79:20">mask</name><operator pos:start="79:21" pos:end="79:21">.</operator><name pos:start="79:22" pos:end="79:27">s_addr</name></name> <operator pos:start="79:29" pos:end="79:29">=</operator> <call pos:start="79:31" pos:end="79:47"><name pos:start="79:31" pos:end="79:35">htonl</name><argument_list pos:start="79:36" pos:end="79:47">(<argument pos:start="79:37" pos:end="79:46"><expr pos:start="79:37" pos:end="79:46"><literal type="number" pos:start="79:37" pos:end="79:46">0xfff00000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:50" pos:end="79:74">/* priv. 172.16.0.0/12 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="81:15" pos:end="85:13">else if <condition pos:start="81:23" pos:end="81:57">(<expr pos:start="81:24" pos:end="81:56"><operator pos:start="81:24" pos:end="81:24">(</operator><name pos:start="81:25" pos:end="81:28">addr</name> <operator pos:start="81:30" pos:end="81:30">&amp;</operator> <literal type="number" pos:start="81:32" pos:end="81:41">0xc0000000</literal><operator pos:start="81:42" pos:end="81:42">)</operator> <operator pos:start="81:44" pos:end="81:45">==</operator> <literal type="number" pos:start="81:47" pos:end="81:56">0x80000000</literal></expr>)</condition> <block pos:start="81:59" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:48">

                <expr_stmt pos:start="83:17" pos:end="83:48"><expr pos:start="83:17" pos:end="83:47"><name pos:start="83:17" pos:end="83:27"><name pos:start="83:17" pos:end="83:20">mask</name><operator pos:start="83:21" pos:end="83:21">.</operator><name pos:start="83:22" pos:end="83:27">s_addr</name></name> <operator pos:start="83:29" pos:end="83:29">=</operator> <call pos:start="83:31" pos:end="83:47"><name pos:start="83:31" pos:end="83:35">htonl</name><argument_list pos:start="83:36" pos:end="83:47">(<argument pos:start="83:37" pos:end="83:46"><expr pos:start="83:37" pos:end="83:46"><literal type="number" pos:start="83:37" pos:end="83:46">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="83:50" pos:end="83:62">/* class B */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="85:15" pos:end="89:13">else if <condition pos:start="85:23" pos:end="85:57">(<expr pos:start="85:24" pos:end="85:56"><operator pos:start="85:24" pos:end="85:24">(</operator><name pos:start="85:25" pos:end="85:28">addr</name> <operator pos:start="85:30" pos:end="85:30">&amp;</operator> <literal type="number" pos:start="85:32" pos:end="85:41">0xffff0000</literal><operator pos:start="85:42" pos:end="85:42">)</operator> <operator pos:start="85:44" pos:end="85:45">==</operator> <literal type="number" pos:start="85:47" pos:end="85:56">0xc0a80000</literal></expr>)</condition> <block pos:start="85:59" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:48">

                <expr_stmt pos:start="87:17" pos:end="87:48"><expr pos:start="87:17" pos:end="87:47"><name pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:20">mask</name><operator pos:start="87:21" pos:end="87:21">.</operator><name pos:start="87:22" pos:end="87:27">s_addr</name></name> <operator pos:start="87:29" pos:end="87:29">=</operator> <call pos:start="87:31" pos:end="87:47"><name pos:start="87:31" pos:end="87:35">htonl</name><argument_list pos:start="87:36" pos:end="87:47">(<argument pos:start="87:37" pos:end="87:46"><expr pos:start="87:37" pos:end="87:46"><literal type="number" pos:start="87:37" pos:end="87:46">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:50" pos:end="87:75">/* priv. 192.168.0.0/16 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="89:15" pos:end="93:13">else if <condition pos:start="89:23" pos:end="89:57">(<expr pos:start="89:24" pos:end="89:56"><operator pos:start="89:24" pos:end="89:24">(</operator><name pos:start="89:25" pos:end="89:28">addr</name> <operator pos:start="89:30" pos:end="89:30">&amp;</operator> <literal type="number" pos:start="89:32" pos:end="89:41">0xffff0000</literal><operator pos:start="89:42" pos:end="89:42">)</operator> <operator pos:start="89:44" pos:end="89:45">==</operator> <literal type="number" pos:start="89:47" pos:end="89:56">0xc6120000</literal></expr>)</condition> <block pos:start="89:59" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:48">

                <expr_stmt pos:start="91:17" pos:end="91:48"><expr pos:start="91:17" pos:end="91:47"><name pos:start="91:17" pos:end="91:27"><name pos:start="91:17" pos:end="91:20">mask</name><operator pos:start="91:21" pos:end="91:21">.</operator><name pos:start="91:22" pos:end="91:27">s_addr</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <call pos:start="91:31" pos:end="91:47"><name pos:start="91:31" pos:end="91:35">htonl</name><argument_list pos:start="91:36" pos:end="91:47">(<argument pos:start="91:37" pos:end="91:46"><expr pos:start="91:37" pos:end="91:46"><literal type="number" pos:start="91:37" pos:end="91:46">0xfffe0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="91:50" pos:end="91:74">/* tests 198.18.0.0/15 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="93:15" pos:end="97:13">else if <condition pos:start="93:23" pos:end="93:57">(<expr pos:start="93:24" pos:end="93:56"><operator pos:start="93:24" pos:end="93:24">(</operator><name pos:start="93:25" pos:end="93:28">addr</name> <operator pos:start="93:30" pos:end="93:30">&amp;</operator> <literal type="number" pos:start="93:32" pos:end="93:41">0xe0000000</literal><operator pos:start="93:42" pos:end="93:42">)</operator> <operator pos:start="93:44" pos:end="93:45">==</operator> <literal type="number" pos:start="93:47" pos:end="93:56">0xe0000000</literal></expr>)</condition> <block pos:start="93:59" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:48">

                <expr_stmt pos:start="95:17" pos:end="95:48"><expr pos:start="95:17" pos:end="95:47"><name pos:start="95:17" pos:end="95:27"><name pos:start="95:17" pos:end="95:20">mask</name><operator pos:start="95:21" pos:end="95:21">.</operator><name pos:start="95:22" pos:end="95:27">s_addr</name></name> <operator pos:start="95:29" pos:end="95:29">=</operator> <call pos:start="95:31" pos:end="95:47"><name pos:start="95:31" pos:end="95:35">htonl</name><argument_list pos:start="95:36" pos:end="95:47">(<argument pos:start="95:37" pos:end="95:46"><expr pos:start="95:37" pos:end="95:46"><literal type="number" pos:start="95:37" pos:end="95:46">0xffffff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="95:50" pos:end="95:62">/* class C */</comment>

            </block_content>}</block></if> <else pos:start="97:15" pos:end="101:13">else <block pos:start="97:20" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:48">

                <expr_stmt pos:start="99:17" pos:end="99:48"><expr pos:start="99:17" pos:end="99:47"><name pos:start="99:17" pos:end="99:27"><name pos:start="99:17" pos:end="99:20">mask</name><operator pos:start="99:21" pos:end="99:21">.</operator><name pos:start="99:22" pos:end="99:27">s_addr</name></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <call pos:start="99:31" pos:end="99:47"><name pos:start="99:31" pos:end="99:35">htonl</name><argument_list pos:start="99:36" pos:end="99:47">(<argument pos:start="99:37" pos:end="99:46"><expr pos:start="99:37" pos:end="99:46"><literal type="number" pos:start="99:37" pos:end="99:46">0xfffffff0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="99:50" pos:end="99:73">/* multicast/reserved */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="131:9">else <block pos:start="103:16" pos:end="131:9">{<block_content pos:start="105:13" pos:end="129:13">

            <if_stmt pos:start="105:13" pos:end="109:13"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:38">(<expr pos:start="105:17" pos:end="105:37"><operator pos:start="105:17" pos:end="105:17">!</operator><call pos:start="105:18" pos:end="105:37"><name pos:start="105:18" pos:end="105:26">inet_aton</name><argument_list pos:start="105:27" pos:end="105:37">(<argument pos:start="105:28" pos:end="105:30"><expr pos:start="105:28" pos:end="105:30"><name pos:start="105:28" pos:end="105:30">buf</name></expr></argument>, <argument pos:start="105:33" pos:end="105:36"><expr pos:start="105:33" pos:end="105:36"><operator pos:start="105:33" pos:end="105:33">&amp;</operator><name pos:start="105:34" pos:end="105:36">net</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:40" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:26">

                <return pos:start="107:17" pos:end="107:26">return <expr pos:start="107:24" pos:end="107:25"><operator pos:start="107:24" pos:end="107:24">-</operator><literal type="number" pos:start="107:25" pos:end="107:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:47"><expr pos:start="111:13" pos:end="111:46"><name pos:start="111:13" pos:end="111:17">shift</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:46"><name pos:start="111:21" pos:end="111:26">strtol</name><argument_list pos:start="111:27" pos:end="111:46">(<argument pos:start="111:28" pos:end="111:35"><expr pos:start="111:28" pos:end="111:35"><name pos:start="111:28" pos:end="111:35">vnetwork</name></expr></argument>, <argument pos:start="111:38" pos:end="111:41"><expr pos:start="111:38" pos:end="111:41"><operator pos:start="111:38" pos:end="111:38">&amp;</operator><name pos:start="111:39" pos:end="111:41">end</name></expr></argument>, <argument pos:start="111:44" pos:end="111:45"><expr pos:start="111:44" pos:end="111:45"><literal type="number" pos:start="111:44" pos:end="111:45">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="129:13"><if pos:start="113:13" pos:end="121:13">if <condition pos:start="113:16" pos:end="113:29">(<expr pos:start="113:17" pos:end="113:28"><operator pos:start="113:17" pos:end="113:17">*</operator><name pos:start="113:18" pos:end="113:20">end</name> <operator pos:start="113:22" pos:end="113:23">!=</operator> <literal type="char" pos:start="113:25" pos:end="113:28">'\0'</literal></expr>)</condition> <block pos:start="113:31" pos:end="121:13">{<block_content pos:start="115:17" pos:end="119:17">

                <if_stmt pos:start="115:17" pos:end="119:17"><if pos:start="115:17" pos:end="119:17">if <condition pos:start="115:20" pos:end="115:48">(<expr pos:start="115:21" pos:end="115:47"><operator pos:start="115:21" pos:end="115:21">!</operator><call pos:start="115:22" pos:end="115:47"><name pos:start="115:22" pos:end="115:30">inet_aton</name><argument_list pos:start="115:31" pos:end="115:47">(<argument pos:start="115:32" pos:end="115:39"><expr pos:start="115:32" pos:end="115:39"><name pos:start="115:32" pos:end="115:39">vnetwork</name></expr></argument>, <argument pos:start="115:42" pos:end="115:46"><expr pos:start="115:42" pos:end="115:46"><operator pos:start="115:42" pos:end="115:42">&amp;</operator><name pos:start="115:43" pos:end="115:46">mask</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:50" pos:end="119:17">{<block_content pos:start="117:21" pos:end="117:30">

                    <return pos:start="117:21" pos:end="117:30">return <expr pos:start="117:28" pos:end="117:29"><operator pos:start="117:28" pos:end="117:28">-</operator><literal type="number" pos:start="117:29" pos:end="117:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="121:15" pos:end="125:13">else if <condition pos:start="121:23" pos:end="121:47">(<expr pos:start="121:24" pos:end="121:46"><name pos:start="121:24" pos:end="121:43"><name pos:start="121:24" pos:end="121:28">shift</name> <argument_list type="generic" pos:start="121:30" pos:end="121:43">&lt; <argument pos:start="121:32" pos:end="121:41"><expr pos:start="121:32" pos:end="121:41"><literal type="number" pos:start="121:32" pos:end="121:32">4</literal> <operator pos:start="121:34" pos:end="121:35">||</operator> <name pos:start="121:37" pos:end="121:41">shift</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="121:45" pos:end="121:46">32</literal></expr>)</condition> <block pos:start="121:49" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:26">

                <return pos:start="123:17" pos:end="123:26">return <expr pos:start="123:24" pos:end="123:25"><operator pos:start="123:24" pos:end="123:24">-</operator><literal type="number" pos:start="123:25" pos:end="123:25">1</literal></expr>;</return>

            </block_content>}</block></if> <else pos:start="125:15" pos:end="129:13">else <block pos:start="125:20" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:64">

                <expr_stmt pos:start="127:17" pos:end="127:64"><expr pos:start="127:17" pos:end="127:63"><name pos:start="127:17" pos:end="127:27"><name pos:start="127:17" pos:end="127:20">mask</name><operator pos:start="127:21" pos:end="127:21">.</operator><name pos:start="127:22" pos:end="127:27">s_addr</name></name> <operator pos:start="127:29" pos:end="127:29">=</operator> <call pos:start="127:31" pos:end="127:63"><name pos:start="127:31" pos:end="127:35">htonl</name><argument_list pos:start="127:36" pos:end="127:63">(<argument pos:start="127:37" pos:end="127:62"><expr pos:start="127:37" pos:end="127:62"><literal type="number" pos:start="127:37" pos:end="127:46">0xffffffff</literal> <operator pos:start="127:48" pos:end="127:49">&lt;&lt;</operator> <operator pos:start="127:51" pos:end="127:51">(</operator><literal type="number" pos:start="127:52" pos:end="127:55">32</literal> <operator pos:start="127:55" pos:end="127:55">-</operator> <name pos:start="127:57" pos:end="127:61">shift</name><operator pos:start="127:62" pos:end="127:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:34"><expr pos:start="133:9" pos:end="133:33"><name pos:start="133:9" pos:end="133:18"><name pos:start="133:9" pos:end="133:11">net</name><operator pos:start="133:12" pos:end="133:12">.</operator><name pos:start="133:13" pos:end="133:18">s_addr</name></name> <operator pos:start="133:20" pos:end="133:21">&amp;=</operator> <name pos:start="133:23" pos:end="133:33"><name pos:start="133:23" pos:end="133:26">mask</name><operator pos:start="133:27" pos:end="133:27">.</operator><name pos:start="133:28" pos:end="133:33">s_addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:66"><expr pos:start="135:9" pos:end="135:65"><name pos:start="135:9" pos:end="135:19"><name pos:start="135:9" pos:end="135:12">host</name><operator pos:start="135:13" pos:end="135:13">.</operator><name pos:start="135:14" pos:end="135:19">s_addr</name></name> <operator pos:start="135:21" pos:end="135:21">=</operator> <name pos:start="135:23" pos:end="135:32"><name pos:start="135:23" pos:end="135:25">net</name><operator pos:start="135:26" pos:end="135:26">.</operator><name pos:start="135:27" pos:end="135:32">s_addr</name></name> <operator pos:start="135:34" pos:end="135:34">|</operator> <operator pos:start="135:36" pos:end="135:36">(</operator><call pos:start="135:37" pos:end="135:49"><name pos:start="135:37" pos:end="135:41">htonl</name><argument_list pos:start="135:42" pos:end="135:49">(<argument pos:start="135:43" pos:end="135:48"><expr pos:start="135:43" pos:end="135:48"><literal type="number" pos:start="135:43" pos:end="135:48">0x0202</literal></expr></argument>)</argument_list></call> <operator pos:start="135:51" pos:end="135:51">&amp;</operator> <operator pos:start="135:53" pos:end="135:53">~</operator><name pos:start="135:54" pos:end="135:64"><name pos:start="135:54" pos:end="135:57">mask</name><operator pos:start="135:58" pos:end="135:58">.</operator><name pos:start="135:59" pos:end="135:64">s_addr</name></name><operator pos:start="135:65" pos:end="135:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:66"><expr pos:start="137:9" pos:end="137:65"><name pos:start="137:9" pos:end="137:19"><name pos:start="137:9" pos:end="137:12">dhcp</name><operator pos:start="137:13" pos:end="137:13">.</operator><name pos:start="137:14" pos:end="137:19">s_addr</name></name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:32"><name pos:start="137:23" pos:end="137:25">net</name><operator pos:start="137:26" pos:end="137:26">.</operator><name pos:start="137:27" pos:end="137:32">s_addr</name></name> <operator pos:start="137:34" pos:end="137:34">|</operator> <operator pos:start="137:36" pos:end="137:36">(</operator><call pos:start="137:37" pos:end="137:49"><name pos:start="137:37" pos:end="137:41">htonl</name><argument_list pos:start="137:42" pos:end="137:49">(<argument pos:start="137:43" pos:end="137:48"><expr pos:start="137:43" pos:end="137:48"><literal type="number" pos:start="137:43" pos:end="137:48">0x020f</literal></expr></argument>)</argument_list></call> <operator pos:start="137:51" pos:end="137:51">&amp;</operator> <operator pos:start="137:53" pos:end="137:53">~</operator><name pos:start="137:54" pos:end="137:64"><name pos:start="137:54" pos:end="137:57">mask</name><operator pos:start="137:58" pos:end="137:58">.</operator><name pos:start="137:59" pos:end="137:64">s_addr</name></name><operator pos:start="137:65" pos:end="137:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:66"><expr pos:start="139:9" pos:end="139:65"><name pos:start="139:9" pos:end="139:18"><name pos:start="139:9" pos:end="139:11">dns</name><operator pos:start="139:12" pos:end="139:12">.</operator><name pos:start="139:13" pos:end="139:18">s_addr</name></name>  <operator pos:start="139:21" pos:end="139:21">=</operator> <name pos:start="139:23" pos:end="139:32"><name pos:start="139:23" pos:end="139:25">net</name><operator pos:start="139:26" pos:end="139:26">.</operator><name pos:start="139:27" pos:end="139:32">s_addr</name></name> <operator pos:start="139:34" pos:end="139:34">|</operator> <operator pos:start="139:36" pos:end="139:36">(</operator><call pos:start="139:37" pos:end="139:49"><name pos:start="139:37" pos:end="139:41">htonl</name><argument_list pos:start="139:42" pos:end="139:49">(<argument pos:start="139:43" pos:end="139:48"><expr pos:start="139:43" pos:end="139:48"><literal type="number" pos:start="139:43" pos:end="139:48">0x0203</literal></expr></argument>)</argument_list></call> <operator pos:start="139:51" pos:end="139:51">&amp;</operator> <operator pos:start="139:53" pos:end="139:53">~</operator><name pos:start="139:54" pos:end="139:64"><name pos:start="139:54" pos:end="139:57">mask</name><operator pos:start="139:58" pos:end="139:58">.</operator><name pos:start="139:59" pos:end="139:64">s_addr</name></name><operator pos:start="139:65" pos:end="139:65">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:42">(<expr pos:start="145:9" pos:end="145:41"><name pos:start="145:9" pos:end="145:13">vhost</name> <operator pos:start="145:15" pos:end="145:16">&amp;&amp;</operator> <operator pos:start="145:18" pos:end="145:18">!</operator><call pos:start="145:19" pos:end="145:41"><name pos:start="145:19" pos:end="145:27">inet_aton</name><argument_list pos:start="145:28" pos:end="145:41">(<argument pos:start="145:29" pos:end="145:33"><expr pos:start="145:29" pos:end="145:33"><name pos:start="145:29" pos:end="145:33">vhost</name></expr></argument>, <argument pos:start="145:36" pos:end="145:40"><expr pos:start="145:36" pos:end="145:40"><operator pos:start="145:36" pos:end="145:36">&amp;</operator><name pos:start="145:37" pos:end="145:40">host</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:44" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:18">

        <return pos:start="147:9" pos:end="147:18">return <expr pos:start="147:16" pos:end="147:17"><operator pos:start="147:16" pos:end="147:16">-</operator><literal type="number" pos:start="147:17" pos:end="147:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="151:5" pos:end="155:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:50">(<expr pos:start="151:9" pos:end="151:49"><operator pos:start="151:9" pos:end="151:9">(</operator><name pos:start="151:10" pos:end="151:20"><name pos:start="151:10" pos:end="151:13">host</name><operator pos:start="151:14" pos:end="151:14">.</operator><name pos:start="151:15" pos:end="151:20">s_addr</name></name> <operator pos:start="151:22" pos:end="151:22">&amp;</operator> <name pos:start="151:24" pos:end="151:34"><name pos:start="151:24" pos:end="151:27">mask</name><operator pos:start="151:28" pos:end="151:28">.</operator><name pos:start="151:29" pos:end="151:34">s_addr</name></name><operator pos:start="151:35" pos:end="151:35">)</operator> <operator pos:start="151:37" pos:end="151:38">!=</operator> <name pos:start="151:40" pos:end="151:49"><name pos:start="151:40" pos:end="151:42">net</name><operator pos:start="151:43" pos:end="151:43">.</operator><name pos:start="151:44" pos:end="151:49">s_addr</name></name></expr>)</condition> <block pos:start="151:52" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:18">

        <return pos:start="153:9" pos:end="153:18">return <expr pos:start="153:16" pos:end="153:17"><operator pos:start="153:16" pos:end="153:16">-</operator><literal type="number" pos:start="153:17" pos:end="153:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:54">(<expr pos:start="159:9" pos:end="159:53"><name pos:start="159:9" pos:end="159:19">vdhcp_start</name> <operator pos:start="159:21" pos:end="159:22">&amp;&amp;</operator> <operator pos:start="159:24" pos:end="159:24">!</operator><call pos:start="159:25" pos:end="159:53"><name pos:start="159:25" pos:end="159:33">inet_aton</name><argument_list pos:start="159:34" pos:end="159:53">(<argument pos:start="159:35" pos:end="159:45"><expr pos:start="159:35" pos:end="159:45"><name pos:start="159:35" pos:end="159:45">vdhcp_start</name></expr></argument>, <argument pos:start="159:48" pos:end="159:52"><expr pos:start="159:48" pos:end="159:52"><operator pos:start="159:48" pos:end="159:48">&amp;</operator><name pos:start="159:49" pos:end="159:52">dhcp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:56" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:18">

        <return pos:start="161:9" pos:end="161:18">return <expr pos:start="161:16" pos:end="161:17"><operator pos:start="161:16" pos:end="161:16">-</operator><literal type="number" pos:start="161:17" pos:end="161:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="165:5" pos:end="171:5"><if pos:start="165:5" pos:end="171:5">if <condition pos:start="165:8" pos:end="167:64">(<expr pos:start="165:9" pos:end="167:63"><operator pos:start="165:9" pos:end="165:9">(</operator><name pos:start="165:10" pos:end="165:20"><name pos:start="165:10" pos:end="165:13">dhcp</name><operator pos:start="165:14" pos:end="165:14">.</operator><name pos:start="165:15" pos:end="165:20">s_addr</name></name> <operator pos:start="165:22" pos:end="165:22">&amp;</operator> <name pos:start="165:24" pos:end="165:34"><name pos:start="165:24" pos:end="165:27">mask</name><operator pos:start="165:28" pos:end="165:28">.</operator><name pos:start="165:29" pos:end="165:34">s_addr</name></name><operator pos:start="165:35" pos:end="165:35">)</operator> <operator pos:start="165:37" pos:end="165:38">!=</operator> <name pos:start="165:40" pos:end="165:49"><name pos:start="165:40" pos:end="165:42">net</name><operator pos:start="165:43" pos:end="165:43">.</operator><name pos:start="165:44" pos:end="165:49">s_addr</name></name> <operator pos:start="165:51" pos:end="165:52">||</operator>

        <name pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:12">dhcp</name><operator pos:start="167:13" pos:end="167:13">.</operator><name pos:start="167:14" pos:end="167:19">s_addr</name></name> <operator pos:start="167:21" pos:end="167:22">==</operator> <name pos:start="167:24" pos:end="167:34"><name pos:start="167:24" pos:end="167:27">host</name><operator pos:start="167:28" pos:end="167:28">.</operator><name pos:start="167:29" pos:end="167:34">s_addr</name></name> <operator pos:start="167:36" pos:end="167:37">||</operator> <name pos:start="167:39" pos:end="167:49"><name pos:start="167:39" pos:end="167:42">dhcp</name><operator pos:start="167:43" pos:end="167:43">.</operator><name pos:start="167:44" pos:end="167:49">s_addr</name></name> <operator pos:start="167:51" pos:end="167:52">==</operator> <name pos:start="167:54" pos:end="167:63"><name pos:start="167:54" pos:end="167:56">dns</name><operator pos:start="167:57" pos:end="167:57">.</operator><name pos:start="167:58" pos:end="167:63">s_addr</name></name></expr>)</condition> <block pos:start="167:66" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:18">

        <return pos:start="169:9" pos:end="169:18">return <expr pos:start="169:16" pos:end="169:17"><operator pos:start="169:16" pos:end="169:16">-</operator><literal type="number" pos:start="169:17" pos:end="169:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="175:5" pos:end="179:5"><if pos:start="175:5" pos:end="179:5">if <condition pos:start="175:8" pos:end="175:53">(<expr pos:start="175:9" pos:end="175:52"><name pos:start="175:9" pos:end="175:19">vnameserver</name> <operator pos:start="175:21" pos:end="175:22">&amp;&amp;</operator> <operator pos:start="175:24" pos:end="175:24">!</operator><call pos:start="175:25" pos:end="175:52"><name pos:start="175:25" pos:end="175:33">inet_aton</name><argument_list pos:start="175:34" pos:end="175:52">(<argument pos:start="175:35" pos:end="175:45"><expr pos:start="175:35" pos:end="175:45"><name pos:start="175:35" pos:end="175:45">vnameserver</name></expr></argument>, <argument pos:start="175:48" pos:end="175:51"><expr pos:start="175:48" pos:end="175:51"><operator pos:start="175:48" pos:end="175:48">&amp;</operator><name pos:start="175:49" pos:end="175:51">dns</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="175:55" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:18">

        <return pos:start="177:9" pos:end="177:18">return <expr pos:start="177:16" pos:end="177:17"><operator pos:start="177:16" pos:end="177:16">-</operator><literal type="number" pos:start="177:17" pos:end="177:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="181:5" pos:end="192:0"><if pos:start="181:5" pos:end="192:0">if <condition pos:start="181:8" pos:end="183:34">(<expr pos:start="181:9" pos:end="183:33"><operator pos:start="181:9" pos:end="181:9">(</operator><name pos:start="181:10" pos:end="181:19"><name pos:start="181:10" pos:end="181:12">dns</name><operator pos:start="181:13" pos:end="181:13">.</operator><name pos:start="181:14" pos:end="181:19">s_addr</name></name> <operator pos:start="181:21" pos:end="181:21">&amp;</operator> <name pos:start="181:23" pos:end="181:33"><name pos:start="181:23" pos:end="181:26">mask</name><operator pos:start="181:27" pos:end="181:27">.</operator><name pos:start="181:28" pos:end="181:33">s_addr</name></name><operator pos:start="181:34" pos:end="181:34">)</operator> <operator pos:start="181:36" pos:end="181:37">!=</operator> <name pos:start="181:39" pos:end="181:48"><name pos:start="181:39" pos:end="181:41">net</name><operator pos:start="181:42" pos:end="181:42">.</operator><name pos:start="181:43" pos:end="181:48">s_addr</name></name> <operator pos:start="181:50" pos:end="181:51">||</operator>

        <name pos:start="183:9" pos:end="183:18"><name pos:start="183:9" pos:end="183:11">dns</name><operator pos:start="183:12" pos:end="183:12">.</operator><name pos:start="183:13" pos:end="183:18">s_addr</name></name> <operator pos:start="183:20" pos:end="183:21">==</operator> <name pos:start="183:23" pos:end="183:33"><name pos:start="183:23" pos:end="183:26">host</name><operator pos:start="183:27" pos:end="183:27">.</operator><name pos:start="183:28" pos:end="183:33">s_addr</name></name></expr>)</condition> <block pos:start="183:36" pos:end="192:0">{<block_content pos:start="185:9" pos:end="185:18">

        <return pos:start="185:9" pos:end="185:18">return <expr pos:start="185:16" pos:end="185:17"><operator pos:start="185:16" pos:end="185:16">-</operator><literal type="number" pos:start="185:17" pos:end="185:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="191:1" pos:end="191:14">#<cpp:directive pos:start="191:2" pos:end="191:7">ifndef</cpp:directive> <name pos:start="191:9" pos:end="191:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="193:5" pos:end="200:0"><if pos:start="193:5" pos:end="200:0">if <condition pos:start="193:8" pos:end="193:54">(<expr pos:start="193:9" pos:end="193:53"><name pos:start="193:9" pos:end="193:18">vsmbserver</name> <operator pos:start="193:20" pos:end="193:21">&amp;&amp;</operator> <operator pos:start="193:23" pos:end="193:23">!</operator><call pos:start="193:24" pos:end="193:53"><name pos:start="193:24" pos:end="193:32">inet_aton</name><argument_list pos:start="193:33" pos:end="193:53">(<argument pos:start="193:34" pos:end="193:43"><expr pos:start="193:34" pos:end="193:43"><name pos:start="193:34" pos:end="193:43">vsmbserver</name></expr></argument>, <argument pos:start="193:46" pos:end="193:52"><expr pos:start="193:46" pos:end="193:52"><operator pos:start="193:46" pos:end="193:46">&amp;</operator><name pos:start="193:47" pos:end="193:52">smbsrv</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:56" pos:end="200:0">{<block_content pos:start="195:9" pos:end="195:18">

        <return pos:start="195:9" pos:end="195:18">return <expr pos:start="195:16" pos:end="195:17"><operator pos:start="195:16" pos:end="195:16">-</operator><literal type="number" pos:start="195:17" pos:end="195:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="199:1" pos:end="199:6">#<cpp:directive pos:start="199:2" pos:end="199:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="203:5" pos:end="203:41"><expr pos:start="203:5" pos:end="203:40"><name pos:start="203:5" pos:end="203:5">s</name> <operator pos:start="203:7" pos:end="203:7">=</operator> <call pos:start="203:9" pos:end="203:40"><name pos:start="203:9" pos:end="203:20">qemu_mallocz</name><argument_list pos:start="203:21" pos:end="203:40">(<argument pos:start="203:22" pos:end="203:39"><expr pos:start="203:22" pos:end="203:39"><sizeof pos:start="203:22" pos:end="203:39">sizeof<argument_list pos:start="203:28" pos:end="203:39">(<argument pos:start="203:29" pos:end="203:38"><expr pos:start="203:29" pos:end="203:38"><name pos:start="203:29" pos:end="203:38">SlirpState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="207:63"><expr pos:start="205:5" pos:end="207:62"><name pos:start="205:5" pos:end="205:12"><name pos:start="205:5" pos:end="205:5">s</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:12">slirp</name></name> <operator pos:start="205:14" pos:end="205:14">=</operator> <call pos:start="205:16" pos:end="207:62"><name pos:start="205:16" pos:end="205:25">slirp_init</name><argument_list pos:start="205:26" pos:end="207:62">(<argument pos:start="205:27" pos:end="205:36"><expr pos:start="205:27" pos:end="205:36"><name pos:start="205:27" pos:end="205:36">restricted</name></expr></argument>, <argument pos:start="205:39" pos:end="205:41"><expr pos:start="205:39" pos:end="205:41"><name pos:start="205:39" pos:end="205:41">net</name></expr></argument>, <argument pos:start="205:44" pos:end="205:47"><expr pos:start="205:44" pos:end="205:47"><name pos:start="205:44" pos:end="205:47">mask</name></expr></argument>, <argument pos:start="205:50" pos:end="205:53"><expr pos:start="205:50" pos:end="205:53"><name pos:start="205:50" pos:end="205:53">host</name></expr></argument>, <argument pos:start="205:56" pos:end="205:64"><expr pos:start="205:56" pos:end="205:64"><name pos:start="205:56" pos:end="205:64">vhostname</name></expr></argument>,

                          <argument pos:start="207:27" pos:end="207:37"><expr pos:start="207:27" pos:end="207:37"><name pos:start="207:27" pos:end="207:37">tftp_export</name></expr></argument>, <argument pos:start="207:40" pos:end="207:47"><expr pos:start="207:40" pos:end="207:47"><name pos:start="207:40" pos:end="207:47">bootfile</name></expr></argument>, <argument pos:start="207:50" pos:end="207:53"><expr pos:start="207:50" pos:end="207:53"><name pos:start="207:50" pos:end="207:53">dhcp</name></expr></argument>, <argument pos:start="207:56" pos:end="207:58"><expr pos:start="207:56" pos:end="207:58"><name pos:start="207:56" pos:end="207:58">dns</name></expr></argument>, <argument pos:start="207:61" pos:end="207:61"><expr pos:start="207:61" pos:end="207:61"><name pos:start="207:61" pos:end="207:61">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:47"><expr pos:start="209:5" pos:end="209:46"><call pos:start="209:5" pos:end="209:46"><name pos:start="209:5" pos:end="209:21">TAILQ_INSERT_TAIL</name><argument_list pos:start="209:22" pos:end="209:46">(<argument pos:start="209:23" pos:end="209:35"><expr pos:start="209:23" pos:end="209:35"><operator pos:start="209:23" pos:end="209:23">&amp;</operator><name pos:start="209:24" pos:end="209:35">slirp_stacks</name></expr></argument>, <argument pos:start="209:38" pos:end="209:38"><expr pos:start="209:38" pos:end="209:38"><name pos:start="209:38" pos:end="209:38">s</name></expr></argument>, <argument pos:start="209:41" pos:end="209:45"><expr pos:start="209:41" pos:end="209:45"><name pos:start="209:41" pos:end="209:45">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="213:5" pos:end="240:0">while <condition pos:start="213:11" pos:end="213:25">(<expr pos:start="213:12" pos:end="213:24"><name pos:start="213:12" pos:end="213:24">slirp_configs</name></expr>)</condition> <block pos:start="213:27" pos:end="240:0">{<block_content pos:start="215:9" pos:end="235:26">

        <decl_stmt pos:start="215:9" pos:end="215:56"><decl pos:start="215:9" pos:end="215:55"><type pos:start="215:9" pos:end="215:33"><name pos:start="215:9" pos:end="215:31"><name pos:start="215:9" pos:end="215:14">struct</name> <name pos:start="215:16" pos:end="215:31">slirp_config_str</name></name> <modifier pos:start="215:33" pos:end="215:33">*</modifier></type><name pos:start="215:34" pos:end="215:39">config</name> <init pos:start="215:41" pos:end="215:55">= <expr pos:start="215:43" pos:end="215:55"><name pos:start="215:43" pos:end="215:55">slirp_configs</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="219:9" pos:end="231:9"><if pos:start="219:9" pos:end="225:9">if <condition pos:start="219:12" pos:end="219:46">(<expr pos:start="219:13" pos:end="219:45"><name pos:start="219:13" pos:end="219:25"><name pos:start="219:13" pos:end="219:18">config</name><operator pos:start="219:19" pos:end="219:20">-&gt;</operator><name pos:start="219:21" pos:end="219:25">flags</name></name> <operator pos:start="219:27" pos:end="219:27">&amp;</operator> <name pos:start="219:29" pos:end="219:45">SLIRP_CFG_HOSTFWD</name></expr>)</condition> <block pos:start="219:48" pos:end="225:9">{<block_content pos:start="221:13" pos:end="223:60">

            <expr_stmt pos:start="221:13" pos:end="223:60"><expr pos:start="221:13" pos:end="223:59"><call pos:start="221:13" pos:end="223:59"><name pos:start="221:13" pos:end="221:25">slirp_hostfwd</name><argument_list pos:start="221:26" pos:end="223:59">(<argument pos:start="221:27" pos:end="221:27"><expr pos:start="221:27" pos:end="221:27"><name pos:start="221:27" pos:end="221:27">s</name></expr></argument>, <argument pos:start="221:30" pos:end="221:32"><expr pos:start="221:30" pos:end="221:32"><name pos:start="221:30" pos:end="221:32">mon</name></expr></argument>, <argument pos:start="221:35" pos:end="221:45"><expr pos:start="221:35" pos:end="221:45"><name pos:start="221:35" pos:end="221:45"><name pos:start="221:35" pos:end="221:40">config</name><operator pos:start="221:41" pos:end="221:42">-&gt;</operator><name pos:start="221:43" pos:end="221:45">str</name></name></expr></argument>,

                          <argument pos:start="223:27" pos:end="223:58"><expr pos:start="223:27" pos:end="223:58"><name pos:start="223:27" pos:end="223:39"><name pos:start="223:27" pos:end="223:32">config</name><operator pos:start="223:33" pos:end="223:34">-&gt;</operator><name pos:start="223:35" pos:end="223:39">flags</name></name> <operator pos:start="223:41" pos:end="223:41">&amp;</operator> <name pos:start="223:43" pos:end="223:58">SLIRP_CFG_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="225:11" pos:end="231:9">else <block pos:start="225:16" pos:end="231:9">{<block_content pos:start="227:13" pos:end="229:61">

            <expr_stmt pos:start="227:13" pos:end="229:61"><expr pos:start="227:13" pos:end="229:60"><call pos:start="227:13" pos:end="229:60"><name pos:start="227:13" pos:end="227:26">slirp_guestfwd</name><argument_list pos:start="227:27" pos:end="229:60">(<argument pos:start="227:28" pos:end="227:28"><expr pos:start="227:28" pos:end="227:28"><name pos:start="227:28" pos:end="227:28">s</name></expr></argument>, <argument pos:start="227:31" pos:end="227:33"><expr pos:start="227:31" pos:end="227:33"><name pos:start="227:31" pos:end="227:33">mon</name></expr></argument>, <argument pos:start="227:36" pos:end="227:46"><expr pos:start="227:36" pos:end="227:46"><name pos:start="227:36" pos:end="227:46"><name pos:start="227:36" pos:end="227:41">config</name><operator pos:start="227:42" pos:end="227:43">-&gt;</operator><name pos:start="227:44" pos:end="227:46">str</name></name></expr></argument>,

                           <argument pos:start="229:28" pos:end="229:59"><expr pos:start="229:28" pos:end="229:59"><name pos:start="229:28" pos:end="229:40"><name pos:start="229:28" pos:end="229:33">config</name><operator pos:start="229:34" pos:end="229:35">-&gt;</operator><name pos:start="229:36" pos:end="229:40">flags</name></name> <operator pos:start="229:42" pos:end="229:42">&amp;</operator> <name pos:start="229:44" pos:end="229:59">SLIRP_CFG_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:37"><expr pos:start="233:9" pos:end="233:36"><name pos:start="233:9" pos:end="233:21">slirp_configs</name> <operator pos:start="233:23" pos:end="233:23">=</operator> <name pos:start="233:25" pos:end="233:36"><name pos:start="233:25" pos:end="233:30">config</name><operator pos:start="233:31" pos:end="233:32">-&gt;</operator><name pos:start="233:33" pos:end="233:36">next</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:26"><expr pos:start="235:9" pos:end="235:25"><call pos:start="235:9" pos:end="235:25"><name pos:start="235:9" pos:end="235:17">qemu_free</name><argument_list pos:start="235:18" pos:end="235:25">(<argument pos:start="235:19" pos:end="235:24"><expr pos:start="235:19" pos:end="235:24"><name pos:start="235:19" pos:end="235:24">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

<cpp:ifndef pos:start="239:1" pos:end="239:14">#<cpp:directive pos:start="239:2" pos:end="239:7">ifndef</cpp:directive> <name pos:start="239:9" pos:end="239:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="241:5" pos:end="245:5"><if pos:start="241:5" pos:end="245:5">if <condition pos:start="241:8" pos:end="241:20">(<expr pos:start="241:9" pos:end="241:19"><operator pos:start="241:9" pos:end="241:9">!</operator><name pos:start="241:10" pos:end="241:19">smb_export</name></expr>)</condition> <block pos:start="241:22" pos:end="245:5">{<block_content pos:start="243:9" pos:end="243:39">

        <expr_stmt pos:start="243:9" pos:end="243:39"><expr pos:start="243:9" pos:end="243:38"><name pos:start="243:9" pos:end="243:18">smb_export</name> <operator pos:start="243:20" pos:end="243:20">=</operator> <name pos:start="243:22" pos:end="243:38">legacy_smb_export</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="247:5" pos:end="254:0"><if pos:start="247:5" pos:end="254:0">if <condition pos:start="247:8" pos:end="247:19">(<expr pos:start="247:9" pos:end="247:18"><name pos:start="247:9" pos:end="247:18">smb_export</name></expr>)</condition> <block pos:start="247:21" pos:end="254:0">{<block_content pos:start="249:9" pos:end="249:46">

        <expr_stmt pos:start="249:9" pos:end="249:46"><expr pos:start="249:9" pos:end="249:45"><call pos:start="249:9" pos:end="249:45"><name pos:start="249:9" pos:end="249:17">slirp_smb</name><argument_list pos:start="249:18" pos:end="249:45">(<argument pos:start="249:19" pos:end="249:19"><expr pos:start="249:19" pos:end="249:19"><name pos:start="249:19" pos:end="249:19">s</name></expr></argument>, <argument pos:start="249:22" pos:end="249:24"><expr pos:start="249:22" pos:end="249:24"><name pos:start="249:22" pos:end="249:24">mon</name></expr></argument>, <argument pos:start="249:27" pos:end="249:36"><expr pos:start="249:27" pos:end="249:36"><name pos:start="249:27" pos:end="249:36">smb_export</name></expr></argument>, <argument pos:start="249:39" pos:end="249:44"><expr pos:start="249:39" pos:end="249:44"><name pos:start="249:39" pos:end="249:44">smbsrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="257:5" pos:end="259:55"><expr pos:start="257:5" pos:end="259:54"><name pos:start="257:5" pos:end="257:9"><name pos:start="257:5" pos:end="257:5">s</name><operator pos:start="257:6" pos:end="257:7">-&gt;</operator><name pos:start="257:8" pos:end="257:9">vc</name></name> <operator pos:start="257:11" pos:end="257:11">=</operator> <call pos:start="257:13" pos:end="259:54"><name pos:start="257:13" pos:end="257:32">qemu_new_vlan_client</name><argument_list pos:start="257:33" pos:end="259:54">(<argument pos:start="257:34" pos:end="257:37"><expr pos:start="257:34" pos:end="257:37"><name pos:start="257:34" pos:end="257:37">vlan</name></expr></argument>, <argument pos:start="257:40" pos:end="257:44"><expr pos:start="257:40" pos:end="257:44"><name pos:start="257:40" pos:end="257:44">model</name></expr></argument>, <argument pos:start="257:47" pos:end="257:50"><expr pos:start="257:47" pos:end="257:50"><name pos:start="257:47" pos:end="257:50">name</name></expr></argument>, <argument pos:start="257:53" pos:end="257:56"><expr pos:start="257:53" pos:end="257:56"><name pos:start="257:53" pos:end="257:56">NULL</name></expr></argument>, <argument pos:start="257:59" pos:end="257:71"><expr pos:start="257:59" pos:end="257:71"><name pos:start="257:59" pos:end="257:71">slirp_receive</name></expr></argument>, <argument pos:start="257:74" pos:end="257:77"><expr pos:start="257:74" pos:end="257:77"><name pos:start="257:74" pos:end="257:77">NULL</name></expr></argument>,

                                 <argument pos:start="259:34" pos:end="259:50"><expr pos:start="259:34" pos:end="259:50"><name pos:start="259:34" pos:end="259:50">net_slirp_cleanup</name></expr></argument>, <argument pos:start="259:53" pos:end="259:53"><expr pos:start="259:53" pos:end="259:53"><name pos:start="259:53" pos:end="259:53">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="263:78"><expr pos:start="261:5" pos:end="263:77"><call pos:start="261:5" pos:end="263:77"><name pos:start="261:5" pos:end="261:12">snprintf</name><argument_list pos:start="261:13" pos:end="263:77">(<argument pos:start="261:14" pos:end="261:28"><expr pos:start="261:14" pos:end="261:28"><name pos:start="261:14" pos:end="261:28"><name pos:start="261:14" pos:end="261:14">s</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:18">vc</name><operator pos:start="261:19" pos:end="261:20">-&gt;</operator><name pos:start="261:21" pos:end="261:28">info_str</name></name></expr></argument>, <argument pos:start="261:31" pos:end="261:53"><expr pos:start="261:31" pos:end="261:53"><sizeof pos:start="261:31" pos:end="261:53">sizeof<argument_list pos:start="261:37" pos:end="261:53">(<argument pos:start="261:38" pos:end="261:52"><expr pos:start="261:38" pos:end="261:52"><name pos:start="261:38" pos:end="261:52"><name pos:start="261:38" pos:end="261:38">s</name><operator pos:start="261:39" pos:end="261:40">-&gt;</operator><name pos:start="261:41" pos:end="261:42">vc</name><operator pos:start="261:43" pos:end="261:44">-&gt;</operator><name pos:start="261:45" pos:end="261:52">info_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="263:14" pos:end="263:36"><expr pos:start="263:14" pos:end="263:36"><literal type="string" pos:start="263:14" pos:end="263:36">"net=%s, restricted=%c"</literal></expr></argument>, <argument pos:start="263:39" pos:end="263:52"><expr pos:start="263:39" pos:end="263:52"><call pos:start="263:39" pos:end="263:52"><name pos:start="263:39" pos:end="263:47">inet_ntoa</name><argument_list pos:start="263:48" pos:end="263:52">(<argument pos:start="263:49" pos:end="263:51"><expr pos:start="263:49" pos:end="263:51"><name pos:start="263:49" pos:end="263:51">net</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="263:55" pos:end="263:76"><expr pos:start="263:55" pos:end="263:76"><ternary pos:start="263:55" pos:end="263:76"><condition pos:start="263:55" pos:end="263:66"><expr pos:start="263:55" pos:end="263:64"><name pos:start="263:55" pos:end="263:64">restricted</name></expr> ?</condition><then pos:start="263:68" pos:end="263:70"> <expr pos:start="263:68" pos:end="263:70"><literal type="char" pos:start="263:68" pos:end="263:70">'y'</literal></expr> </then><else pos:start="263:72" pos:end="263:76">: <expr pos:start="263:74" pos:end="263:76"><literal type="char" pos:start="263:74" pos:end="263:76">'n'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="265:5" pos:end="265:13">return <expr pos:start="265:12" pos:end="265:12"><literal type="number" pos:start="265:12" pos:end="265:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
