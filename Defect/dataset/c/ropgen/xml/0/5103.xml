<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5103.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:51">qed_need_check_timer_entry</name><parameter_list pos:start="1:52" pos:end="1:65">(<parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:58"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:64">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVQEDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><name pos:start="5:23" pos:end="5:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:72">/* The timer should only fire when allocating writes have drained */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><call pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:30">(<argument pos:start="13:12" pos:end="13:29"><expr pos:start="13:12" pos:end="13:29"><operator pos:start="13:12" pos:end="13:12">!</operator><name pos:start="13:13" pos:end="13:29"><name pos:start="13:13" pos:end="13:13">s</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:29">allocating_acb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:37"><expr pos:start="17:5" pos:end="17:36"><call pos:start="17:5" pos:end="17:36"><name pos:start="17:5" pos:end="17:33">trace_qed_need_check_timer_cb</name><argument_list pos:start="17:34" pos:end="17:36">(<argument pos:start="17:35" pos:end="17:35"><expr pos:start="17:35" pos:end="17:35"><name pos:start="17:35" pos:end="17:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><call pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:15">qed_acquire</name><argument_list pos:start="21:16" pos:end="21:18">(<argument pos:start="21:17" pos:end="21:17"><expr pos:start="21:17" pos:end="21:17"><name pos:start="21:17" pos:end="21:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><call pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:34">qed_plug_allocating_write_reqs</name><argument_list pos:start="23:35" pos:end="23:37">(<argument pos:start="23:36" pos:end="23:36"><expr pos:start="23:36" pos:end="23:36"><name pos:start="23:36" pos:end="23:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:56">/* Ensure writes are on disk before clearing flag */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:40"><name pos:start="29:11" pos:end="29:23">bdrv_co_flush</name><argument_list pos:start="29:24" pos:end="29:40">(<argument pos:start="29:25" pos:end="29:39"><expr pos:start="29:25" pos:end="29:39"><name pos:start="29:25" pos:end="29:39"><name pos:start="29:25" pos:end="29:25">s</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:29">bs</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:35">file</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:39">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><call pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:15">qed_release</name><argument_list pos:start="31:16" pos:end="31:18">(<argument pos:start="31:17" pos:end="31:17"><expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><call pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:40">qed_unplug_allocating_write_reqs</name><argument_list pos:start="35:41" pos:end="35:43">(<argument pos:start="35:42" pos:end="35:42"><expr pos:start="35:42" pos:end="35:42"><name pos:start="35:42" pos:end="35:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:13">header</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:22">features</name></name> <operator pos:start="43:24" pos:end="43:25">&amp;=</operator> <operator pos:start="43:27" pos:end="43:27">~</operator><name pos:start="43:28" pos:end="43:43">QED_F_NEED_CHECK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:29"><name pos:start="45:11" pos:end="45:26">qed_write_header</name><argument_list pos:start="45:27" pos:end="45:29">(<argument pos:start="45:28" pos:end="45:28"><expr pos:start="45:28" pos:end="45:28"><name pos:start="45:28" pos:end="45:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:15"><expr pos:start="47:5" pos:end="47:14"><operator pos:start="47:5" pos:end="47:5">(</operator><name pos:start="47:6" pos:end="47:9">void</name><operator pos:start="47:10" pos:end="47:10">)</operator> <name pos:start="47:12" pos:end="47:14">ret</name></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:40"><expr pos:start="51:5" pos:end="51:39"><call pos:start="51:5" pos:end="51:39"><name pos:start="51:5" pos:end="51:36">qed_unplug_allocating_write_reqs</name><argument_list pos:start="51:37" pos:end="51:39">(<argument pos:start="51:38" pos:end="51:38"><expr pos:start="51:38" pos:end="51:38"><name pos:start="51:38" pos:end="51:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:31"><expr pos:start="55:5" pos:end="55:30"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:30"><name pos:start="55:11" pos:end="55:23">bdrv_co_flush</name><argument_list pos:start="55:24" pos:end="55:30">(<argument pos:start="55:25" pos:end="55:29"><expr pos:start="55:25" pos:end="55:29"><name pos:start="55:25" pos:end="55:29"><name pos:start="55:25" pos:end="55:25">s</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:29">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:15"><expr pos:start="57:5" pos:end="57:14"><operator pos:start="57:5" pos:end="57:5">(</operator><name pos:start="57:6" pos:end="57:9">void</name><operator pos:start="57:10" pos:end="57:10">)</operator> <name pos:start="57:12" pos:end="57:14">ret</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
