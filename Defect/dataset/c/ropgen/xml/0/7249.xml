<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7249.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">unpack_block_qpis</name><parameter_list pos:start="1:29" pos:end="1:68">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:48"><name pos:start="1:30" pos:end="1:45">Vp3DecodeContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:67"><decl pos:start="1:51" pos:end="1:67"><type pos:start="1:51" pos:end="1:67"><name pos:start="1:51" pos:end="1:63">GetBitContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:13">

    <decl_stmt pos:start="5:5" pos:end="5:70"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">qpi</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>, <decl pos:start="5:17" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:17">j</name></decl>, <decl pos:start="5:20" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:22">bit</name></decl>, <decl pos:start="5:25" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:34">run_length</name></decl>, <decl pos:start="5:37" pos:end="5:50"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:37" pos:end="5:50">blocks_decoded</name></decl>, <decl pos:start="5:53" pos:end="5:69"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:53" pos:end="5:69">num_blocks_at_qpi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">num_blocks</name> <init pos:start="7:20" pos:end="7:49">= <expr pos:start="7:22" pos:end="7:49"><name pos:start="7:22" pos:end="7:49"><name pos:start="7:22" pos:end="7:22">s</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:49">coded_fragment_list_index</name></name></expr></init></decl>;</decl_stmt>



    <for pos:start="11:5" pos:end="73:5">for <control pos:start="11:9" pos:end="11:59">(<init pos:start="11:10" pos:end="11:17"><expr pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:12">qpi</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr>;</init> <condition pos:start="11:19" pos:end="11:52"><expr pos:start="11:19" pos:end="11:51"><name pos:start="11:19" pos:end="11:49"><name pos:start="11:19" pos:end="11:21">qpi</name> <argument_list type="generic" pos:start="11:23" pos:end="11:49">&lt; <argument pos:start="11:25" pos:end="11:47"><expr pos:start="11:25" pos:end="11:47"><name pos:start="11:25" pos:end="11:31"><name pos:start="11:25" pos:end="11:25">s</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:31">nqps</name></name><operator pos:start="11:32" pos:end="11:32">-</operator><literal type="number" pos:start="11:33" pos:end="11:33">1</literal> <operator pos:start="11:35" pos:end="11:36">&amp;&amp;</operator> <name pos:start="11:38" pos:end="11:47">num_blocks</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="11:51" pos:end="11:51">0</literal></expr>;</condition> <incr pos:start="11:54" pos:end="11:58"><expr pos:start="11:54" pos:end="11:58"><name pos:start="11:54" pos:end="11:56">qpi</name><operator pos:start="11:57" pos:end="11:58">++</operator></expr></incr>)</control> <block pos:start="11:61" pos:end="73:5">{<block_content pos:start="13:9" pos:end="71:40">

        <expr_stmt pos:start="13:9" pos:end="13:51"><expr pos:start="13:9" pos:end="13:50"><name pos:start="13:9" pos:end="13:9">i</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <name pos:start="13:13" pos:end="13:26">blocks_decoded</name> <operator pos:start="13:28" pos:end="13:28">=</operator> <name pos:start="13:30" pos:end="13:46">num_blocks_at_qpi</name> <operator pos:start="13:48" pos:end="13:48">=</operator> <literal type="number" pos:start="13:50" pos:end="13:50">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="17:9" pos:end="17:28"><expr pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:11">bit</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:27"><name pos:start="17:15" pos:end="17:23">get_bits1</name><argument_list pos:start="17:24" pos:end="17:27">(<argument pos:start="17:25" pos:end="17:26"><expr pos:start="17:25" pos:end="17:26"><name pos:start="17:25" pos:end="17:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <do pos:start="21:9" pos:end="67:46">do <block pos:start="21:12" pos:end="67:9">{<block_content pos:start="23:13" pos:end="65:25">

            <expr_stmt pos:start="23:13" pos:end="23:84"><expr pos:start="23:13" pos:end="23:83"><name pos:start="23:13" pos:end="23:22">run_length</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <call pos:start="23:26" pos:end="23:79"><name pos:start="23:26" pos:end="23:33">get_vlc2</name><argument_list pos:start="23:34" pos:end="23:79">(<argument pos:start="23:35" pos:end="23:36"><expr pos:start="23:35" pos:end="23:36"><name pos:start="23:35" pos:end="23:36">gb</name></expr></argument>, <argument pos:start="23:39" pos:end="23:72"><expr pos:start="23:39" pos:end="23:72"><name pos:start="23:39" pos:end="23:72"><name pos:start="23:39" pos:end="23:39">s</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:66">superblock_run_length_vlc</name><operator pos:start="23:67" pos:end="23:67">.</operator><name pos:start="23:68" pos:end="23:72">table</name></name></expr></argument>, <argument pos:start="23:75" pos:end="23:75"><expr pos:start="23:75" pos:end="23:75"><literal type="number" pos:start="23:75" pos:end="23:75">6</literal></expr></argument>, <argument pos:start="23:78" pos:end="23:78"><expr pos:start="23:78" pos:end="23:78"><literal type="number" pos:start="23:78" pos:end="23:78">2</literal></expr></argument>)</argument_list></call> <operator pos:start="23:81" pos:end="23:81">+</operator> <literal type="number" pos:start="23:83" pos:end="23:83">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="25:13" pos:end="27:47"><if pos:start="25:13" pos:end="27:47">if <condition pos:start="25:16" pos:end="25:33">(<expr pos:start="25:17" pos:end="25:32"><name pos:start="25:17" pos:end="25:26">run_length</name> <operator pos:start="25:28" pos:end="25:29">==</operator> <literal type="number" pos:start="25:31" pos:end="25:32">34</literal></expr>)</condition><block type="pseudo" pos:start="27:17" pos:end="27:47"><block_content pos:start="27:17" pos:end="27:47">

                <expr_stmt pos:start="27:17" pos:end="27:47"><expr pos:start="27:17" pos:end="27:46"><name pos:start="27:17" pos:end="27:26">run_length</name> <operator pos:start="27:28" pos:end="27:29">+=</operator> <call pos:start="27:31" pos:end="27:46"><name pos:start="27:31" pos:end="27:38">get_bits</name><argument_list pos:start="27:39" pos:end="27:46">(<argument pos:start="27:40" pos:end="27:41"><expr pos:start="27:40" pos:end="27:41"><name pos:start="27:40" pos:end="27:41">gb</name></expr></argument>, <argument pos:start="27:44" pos:end="27:45"><expr pos:start="27:44" pos:end="27:45"><literal type="number" pos:start="27:44" pos:end="27:45">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:41"><expr pos:start="29:13" pos:end="29:40"><name pos:start="29:13" pos:end="29:26">blocks_decoded</name> <operator pos:start="29:28" pos:end="29:29">+=</operator> <name pos:start="29:31" pos:end="29:40">run_length</name></expr>;</expr_stmt>



            <if_stmt pos:start="33:13" pos:end="35:48"><if pos:start="33:13" pos:end="35:48">if <condition pos:start="33:16" pos:end="33:21">(<expr pos:start="33:17" pos:end="33:20"><operator pos:start="33:17" pos:end="33:17">!</operator><name pos:start="33:18" pos:end="33:20">bit</name></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:48"><block_content pos:start="35:17" pos:end="35:48">

                <expr_stmt pos:start="35:17" pos:end="35:48"><expr pos:start="35:17" pos:end="35:47"><name pos:start="35:17" pos:end="35:33">num_blocks_at_qpi</name> <operator pos:start="35:35" pos:end="35:36">+=</operator> <name pos:start="35:38" pos:end="35:47">run_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <for pos:start="39:13" pos:end="55:13">for <control pos:start="39:17" pos:end="39:44">(<init pos:start="39:18" pos:end="39:23"><expr pos:start="39:18" pos:end="39:22"><name pos:start="39:18" pos:end="39:18">j</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <literal type="number" pos:start="39:22" pos:end="39:22">0</literal></expr>;</init> <condition pos:start="39:25" pos:end="39:39"><expr pos:start="39:25" pos:end="39:38"><name pos:start="39:25" pos:end="39:25">j</name> <operator pos:start="39:27" pos:end="39:27">&lt;</operator> <name pos:start="39:29" pos:end="39:38">run_length</name></expr>;</condition> <incr pos:start="39:41" pos:end="39:43"><expr pos:start="39:41" pos:end="39:43"><name pos:start="39:41" pos:end="39:41">i</name><operator pos:start="39:42" pos:end="39:43">++</operator></expr></incr>)</control> <block pos:start="39:46" pos:end="55:13">{<block_content pos:start="41:17" pos:end="53:17">

                <if_stmt pos:start="41:17" pos:end="43:30"><if pos:start="41:17" pos:end="43:30">if <condition pos:start="41:20" pos:end="41:53">(<expr pos:start="41:21" pos:end="41:52"><name pos:start="41:21" pos:end="41:21">i</name> <operator pos:start="41:23" pos:end="41:23">&gt;</operator> <name pos:start="41:25" pos:end="41:52"><name pos:start="41:25" pos:end="41:25">s</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:52">coded_fragment_list_index</name></name></expr>)</condition><block type="pseudo" pos:start="43:21" pos:end="43:30"><block_content pos:start="43:21" pos:end="43:30">

                    <return pos:start="43:21" pos:end="43:30">return <expr pos:start="43:28" pos:end="43:29"><operator pos:start="43:28" pos:end="43:28">-</operator><literal type="number" pos:start="43:29" pos:end="43:29">1</literal></expr>;</return></block_content></block></if></if_stmt>



                <if_stmt pos:start="47:17" pos:end="53:17"><if pos:start="47:17" pos:end="53:17">if <condition pos:start="47:20" pos:end="47:75">(<expr pos:start="47:21" pos:end="47:74"><name pos:start="47:21" pos:end="47:63"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:36">all_fragments</name><index pos:start="47:37" pos:end="47:63">[<expr pos:start="47:38" pos:end="47:62"><name pos:start="47:38" pos:end="47:62"><name pos:start="47:38" pos:end="47:38">s</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:59">coded_fragment_list</name><index pos:start="47:60" pos:end="47:62">[<expr pos:start="47:61" pos:end="47:61"><name pos:start="47:61" pos:end="47:61">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="47:64" pos:end="47:64">.</operator><name pos:start="47:65" pos:end="47:67">qpi</name> <operator pos:start="47:69" pos:end="47:70">==</operator> <name pos:start="47:72" pos:end="47:74">qpi</name></expr>)</condition> <block pos:start="47:77" pos:end="53:17">{<block_content pos:start="49:21" pos:end="51:24">

                    <expr_stmt pos:start="49:21" pos:end="49:75"><expr pos:start="49:21" pos:end="49:74"><name pos:start="49:21" pos:end="49:63"><name pos:start="49:21" pos:end="49:21">s</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:36">all_fragments</name><index pos:start="49:37" pos:end="49:63">[<expr pos:start="49:38" pos:end="49:62"><name pos:start="49:38" pos:end="49:62"><name pos:start="49:38" pos:end="49:38">s</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:59">coded_fragment_list</name><index pos:start="49:60" pos:end="49:62">[<expr pos:start="49:61" pos:end="49:61"><name pos:start="49:61" pos:end="49:61">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="49:64" pos:end="49:64">.</operator><name pos:start="49:65" pos:end="49:67">qpi</name> <operator pos:start="49:69" pos:end="49:70">+=</operator> <name pos:start="49:72" pos:end="49:74">bit</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="51:21" pos:end="51:24"><expr pos:start="51:21" pos:end="51:23"><name pos:start="51:21" pos:end="51:21">j</name><operator pos:start="51:22" pos:end="51:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="59:13" pos:end="65:25"><if pos:start="59:13" pos:end="61:36">if <condition pos:start="59:16" pos:end="59:35">(<expr pos:start="59:17" pos:end="59:34"><name pos:start="59:17" pos:end="59:26">run_length</name> <operator pos:start="59:28" pos:end="59:29">==</operator> <literal type="number" pos:start="59:31" pos:end="59:34">4129</literal></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:36"><block_content pos:start="61:17" pos:end="61:36">

                <expr_stmt pos:start="61:17" pos:end="61:36"><expr pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:19">bit</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:35"><name pos:start="61:23" pos:end="61:31">get_bits1</name><argument_list pos:start="61:32" pos:end="61:35">(<argument pos:start="61:33" pos:end="61:34"><expr pos:start="61:33" pos:end="61:34"><name pos:start="61:33" pos:end="61:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="63:13" pos:end="65:25">else<block type="pseudo" pos:start="65:17" pos:end="65:25"><block_content pos:start="65:17" pos:end="65:25">

                <expr_stmt pos:start="65:17" pos:end="65:25"><expr pos:start="65:17" pos:end="65:24"><name pos:start="65:17" pos:end="65:19">bit</name> <operator pos:start="65:21" pos:end="65:22">^=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block> while <condition pos:start="67:17" pos:end="67:45">(<expr pos:start="67:18" pos:end="67:44"><name pos:start="67:18" pos:end="67:31">blocks_decoded</name> <operator pos:start="67:33" pos:end="67:33">&lt;</operator> <name pos:start="67:35" pos:end="67:44">num_blocks</name></expr>)</condition>;</do>



        <expr_stmt pos:start="71:9" pos:end="71:40"><expr pos:start="71:9" pos:end="71:39"><name pos:start="71:9" pos:end="71:18">num_blocks</name> <operator pos:start="71:20" pos:end="71:21">-=</operator> <name pos:start="71:23" pos:end="71:39">num_blocks_at_qpi</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="77:5" pos:end="77:13">return <expr pos:start="77:12" pos:end="77:12"><literal type="number" pos:start="77:12" pos:end="77:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
