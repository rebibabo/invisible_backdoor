<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22170.c" pos:tabs="8"><function pos:start="1:1" pos:end="321:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">kvm_set_phys_mem</name><parameter_list pos:start="1:29" pos:end="1:68">(<parameter pos:start="1:30" pos:end="1:57"><decl pos:start="1:30" pos:end="1:57"><type pos:start="1:30" pos:end="1:57"><name pos:start="1:30" pos:end="1:48">MemoryRegionSection</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">section</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:67"><decl pos:start="1:60" pos:end="1:67"><type pos:start="1:60" pos:end="1:67"><name pos:start="1:60" pos:end="1:63">bool</name></type> <name pos:start="1:65" pos:end="1:67">add</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="321:1">{<block_content pos:start="5:5" pos:end="319:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">KVMState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:27">= <expr pos:start="5:19" pos:end="5:27"><name pos:start="5:19" pos:end="5:27">kvm_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">KVMSlot</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">mem</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:13"/><name pos:start="7:19" pos:end="7:21">old</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mr</name> <init pos:start="11:22" pos:end="11:34">= <expr pos:start="11:24" pos:end="11:34"><name pos:start="11:24" pos:end="11:34"><name pos:start="11:24" pos:end="11:30">section</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:34">mr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:18">log_dirty</name> <init pos:start="13:20" pos:end="13:49">= <expr pos:start="13:22" pos:end="13:49"><call pos:start="13:22" pos:end="13:49"><name pos:start="13:22" pos:end="13:45">memory_region_is_logging</name><argument_list pos:start="13:46" pos:end="13:49">(<argument pos:start="13:47" pos:end="13:48"><expr pos:start="13:47" pos:end="13:48"><name pos:start="13:47" pos:end="13:48">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:18">writeable</name> <init pos:start="15:20" pos:end="15:53">= <expr pos:start="15:22" pos:end="15:53"><operator pos:start="15:22" pos:end="15:22">!</operator><name pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:24">mr</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:34">readonly</name></name> <operator pos:start="15:36" pos:end="15:37">&amp;&amp;</operator> <operator pos:start="15:39" pos:end="15:39">!</operator><name pos:start="15:40" pos:end="15:53"><name pos:start="15:40" pos:end="15:41">mr</name><operator pos:start="15:42" pos:end="15:43">-&gt;</operator><name pos:start="15:44" pos:end="15:53">rom_device</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:67"><decl pos:start="17:5" pos:end="17:66"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:22">readonly_flag</name> <init pos:start="17:24" pos:end="17:66">= <expr pos:start="17:26" pos:end="17:66"><name pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:27">mr</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:37">readonly</name></name> <operator pos:start="17:39" pos:end="17:40">||</operator> <call pos:start="17:42" pos:end="17:66"><name pos:start="17:42" pos:end="17:62">memory_region_is_romd</name><argument_list pos:start="17:63" pos:end="17:66">(<argument pos:start="17:64" pos:end="17:65"><expr pos:start="17:64" pos:end="17:65"><name pos:start="17:64" pos:end="17:65">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:61"><decl pos:start="19:5" pos:end="19:60"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">hwaddr</name></type> <name pos:start="19:12" pos:end="19:21">start_addr</name> <init pos:start="19:23" pos:end="19:60">= <expr pos:start="19:25" pos:end="19:60"><name pos:start="19:25" pos:end="19:60"><name pos:start="19:25" pos:end="19:31">section</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:60">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:50"><decl pos:start="21:5" pos:end="21:49"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ram_addr_t</name></type> <name pos:start="21:16" pos:end="21:19">size</name> <init pos:start="21:21" pos:end="21:49">= <expr pos:start="21:23" pos:end="21:49"><call pos:start="21:23" pos:end="21:49"><name pos:start="21:23" pos:end="21:34">int128_get64</name><argument_list pos:start="21:35" pos:end="21:49">(<argument pos:start="21:36" pos:end="21:48"><expr pos:start="21:36" pos:end="21:48"><name pos:start="21:36" pos:end="21:48"><name pos:start="21:36" pos:end="21:42">section</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:48">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:13">ram</name> <init pos:start="23:15" pos:end="23:20">= <expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">unsigned</name></type> <name pos:start="25:14" pos:end="25:18">delta</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="33:70">/* kvm works in page size chunks, but the function may be called

       with sub-page size and unaligned start address. Pad the start

       address to next and truncate size to previous page boundary. */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:66"><expr pos:start="35:5" pos:end="35:65"><name pos:start="35:5" pos:end="35:9">delta</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:29">TARGET_PAGE_SIZE</name> <operator pos:start="35:31" pos:end="35:31">-</operator> <operator pos:start="35:33" pos:end="35:33">(</operator><name pos:start="35:34" pos:end="35:43">start_addr</name> <operator pos:start="35:45" pos:end="35:45">&amp;</operator> <operator pos:start="35:47" pos:end="35:47">~</operator><name pos:start="35:48" pos:end="35:63">TARGET_PAGE_MASK</name><operator pos:start="35:64" pos:end="35:64">)</operator><operator pos:start="35:65" pos:end="35:65">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:9">delta</name> <operator pos:start="37:11" pos:end="37:12">&amp;=</operator> <operator pos:start="37:14" pos:end="37:14">~</operator><name pos:start="37:15" pos:end="37:30">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:21">(<expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:13">delta</name> <operator pos:start="39:15" pos:end="39:15">&gt;</operator> <name pos:start="39:17" pos:end="39:20">size</name></expr>)</condition> <block pos:start="39:23" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:15">

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:14">start_addr</name> <operator pos:start="45:16" pos:end="45:17">+=</operator> <name pos:start="45:19" pos:end="45:23">delta</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:18"><expr pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:8">size</name> <operator pos:start="47:10" pos:end="47:11">-=</operator> <name pos:start="47:13" pos:end="47:17">delta</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:8">size</name> <operator pos:start="49:10" pos:end="49:11">&amp;=</operator> <name pos:start="49:13" pos:end="49:28">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:50">(<expr pos:start="51:9" pos:end="51:49"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:13">size</name> <operator pos:start="51:15" pos:end="51:16">||</operator> <operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:28">start_addr</name> <operator pos:start="51:30" pos:end="51:30">&amp;</operator> <operator pos:start="51:32" pos:end="51:32">~</operator><name pos:start="51:33" pos:end="51:48">TARGET_PAGE_MASK</name><operator pos:start="51:49" pos:end="51:49">)</operator></expr>)</condition> <block pos:start="51:52" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:15">

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="75:5"><if pos:start="59:5" pos:end="75:5">if <condition pos:start="59:8" pos:end="59:34">(<expr pos:start="59:9" pos:end="59:33"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:33"><name pos:start="59:10" pos:end="59:29">memory_region_is_ram</name><argument_list pos:start="59:30" pos:end="59:33">(<argument pos:start="59:31" pos:end="59:32"><expr pos:start="59:31" pos:end="59:32"><name pos:start="59:31" pos:end="59:32">mr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:36" pos:end="75:5">{<block_content pos:start="61:9" pos:end="73:9">

        <if_stmt pos:start="61:9" pos:end="73:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:51">(<expr pos:start="61:13" pos:end="61:50"><name pos:start="61:13" pos:end="61:21">writeable</name> <operator pos:start="61:23" pos:end="61:24">||</operator> <operator pos:start="61:26" pos:end="61:26">!</operator><name pos:start="61:27" pos:end="61:50">kvm_readonly_mem_allowed</name></expr>)</condition> <block pos:start="61:53" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:19">

            <return pos:start="63:13" pos:end="63:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="73:9">else if <condition pos:start="65:19" pos:end="65:34">(<expr pos:start="65:20" pos:end="65:33"><operator pos:start="65:20" pos:end="65:20">!</operator><name pos:start="65:21" pos:end="65:33"><name pos:start="65:21" pos:end="65:22">mr</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:33">romd_mode</name></name></expr>)</condition> <block pos:start="65:36" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:24">

            <comment type="block" pos:start="67:13" pos:end="69:74">/* If the memory device is not in romd_mode, then we actually want

             * to remove the kvm memory slot so all accesses will trap. */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:24"><expr pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:15">add</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:23">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:80"><expr pos:start="79:5" pos:end="79:79"><name pos:start="79:5" pos:end="79:7">ram</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:39"><name pos:start="79:11" pos:end="79:35">memory_region_get_ram_ptr</name><argument_list pos:start="79:36" pos:end="79:39">(<argument pos:start="79:37" pos:end="79:38"><expr pos:start="79:37" pos:end="79:38"><name pos:start="79:37" pos:end="79:38">mr</name></expr></argument>)</argument_list></call> <operator pos:start="79:41" pos:end="79:41">+</operator> <name pos:start="79:43" pos:end="79:71"><name pos:start="79:43" pos:end="79:49">section</name><operator pos:start="79:50" pos:end="79:51">-&gt;</operator><name pos:start="79:52" pos:end="79:71">offset_within_region</name></name> <operator pos:start="79:73" pos:end="79:73">+</operator> <name pos:start="79:75" pos:end="79:79">delta</name></expr>;</expr_stmt>



    <while pos:start="83:5" pos:end="279:5">while <condition pos:start="83:11" pos:end="83:13">(<expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">1</literal></expr>)</condition> <block pos:start="83:15" pos:end="279:5">{<block_content pos:start="85:9" pos:end="277:9">

        <expr_stmt pos:start="85:9" pos:end="85:76"><expr pos:start="85:9" pos:end="85:75"><name pos:start="85:9" pos:end="85:11">mem</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:75"><name pos:start="85:15" pos:end="85:41">kvm_lookup_overlapping_slot</name><argument_list pos:start="85:42" pos:end="85:75">(<argument pos:start="85:43" pos:end="85:43"><expr pos:start="85:43" pos:end="85:43"><name pos:start="85:43" pos:end="85:43">s</name></expr></argument>, <argument pos:start="85:46" pos:end="85:55"><expr pos:start="85:46" pos:end="85:55"><name pos:start="85:46" pos:end="85:55">start_addr</name></expr></argument>, <argument pos:start="85:58" pos:end="85:74"><expr pos:start="85:58" pos:end="85:74"><name pos:start="85:58" pos:end="85:67">start_addr</name> <operator pos:start="85:69" pos:end="85:69">+</operator> <name pos:start="85:71" pos:end="85:74">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:17">(<expr pos:start="87:13" pos:end="87:16"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:16">mem</name></expr>)</condition> <block pos:start="87:19" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:18">

            <break pos:start="89:13" pos:end="89:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="95:9" pos:end="109:9"><if pos:start="95:9" pos:end="109:9">if <condition pos:start="95:12" pos:end="99:61">(<expr pos:start="95:13" pos:end="99:60"><name pos:start="95:13" pos:end="95:15">add</name> <operator pos:start="95:17" pos:end="95:18">&amp;&amp;</operator> <name pos:start="95:20" pos:end="95:29">start_addr</name> <operator pos:start="95:31" pos:end="95:32">&gt;=</operator> <name pos:start="95:34" pos:end="95:48"><name pos:start="95:34" pos:end="95:36">mem</name><operator pos:start="95:37" pos:end="95:38">-&gt;</operator><name pos:start="95:39" pos:end="95:48">start_addr</name></name> <operator pos:start="95:50" pos:end="95:51">&amp;&amp;</operator>

            <operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:23">start_addr</name> <operator pos:start="97:25" pos:end="97:25">+</operator> <name pos:start="97:27" pos:end="97:30">size</name> <operator pos:start="97:32" pos:end="97:33">&lt;=</operator> <name pos:start="97:35" pos:end="97:49"><name pos:start="97:35" pos:end="97:37">mem</name><operator pos:start="97:38" pos:end="97:39">-&gt;</operator><name pos:start="97:40" pos:end="97:49">start_addr</name></name> <operator pos:start="97:51" pos:end="97:51">+</operator> <name pos:start="97:53" pos:end="97:68"><name pos:start="97:53" pos:end="97:55">mem</name><operator pos:start="97:56" pos:end="97:57">-&gt;</operator><name pos:start="97:58" pos:end="97:68">memory_size</name></name><operator pos:start="97:69" pos:end="97:69">)</operator> <operator pos:start="97:71" pos:end="97:72">&amp;&amp;</operator>

            <operator pos:start="99:13" pos:end="99:13">(</operator><name pos:start="99:14" pos:end="99:16">ram</name> <operator pos:start="99:18" pos:end="99:18">-</operator> <name pos:start="99:20" pos:end="99:29">start_addr</name> <operator pos:start="99:31" pos:end="99:32">==</operator> <name pos:start="99:34" pos:end="99:41"><name pos:start="99:34" pos:end="99:36">mem</name><operator pos:start="99:37" pos:end="99:38">-&gt;</operator><name pos:start="99:39" pos:end="99:41">ram</name></name> <operator pos:start="99:43" pos:end="99:43">-</operator> <name pos:start="99:45" pos:end="99:59"><name pos:start="99:45" pos:end="99:47">mem</name><operator pos:start="99:48" pos:end="99:49">-&gt;</operator><name pos:start="99:50" pos:end="99:59">start_addr</name></name><operator pos:start="99:60" pos:end="99:60">)</operator></expr>)</condition> <block pos:start="99:63" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:19">

            <comment type="block" pos:start="101:13" pos:end="103:63">/* The new slot fits into the existing one and comes with

             * identical parameters - update flags and done. */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:60"><expr pos:start="105:13" pos:end="105:59"><call pos:start="105:13" pos:end="105:59"><name pos:start="105:13" pos:end="105:43">kvm_slot_dirty_pages_log_change</name><argument_list pos:start="105:44" pos:end="105:59">(<argument pos:start="105:45" pos:end="105:47"><expr pos:start="105:45" pos:end="105:47"><name pos:start="105:45" pos:end="105:47">mem</name></expr></argument>, <argument pos:start="105:50" pos:end="105:58"><expr pos:start="105:50" pos:end="105:58"><name pos:start="105:50" pos:end="105:58">log_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:19"><expr pos:start="113:9" pos:end="113:18"><name pos:start="113:9" pos:end="113:11">old</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <operator pos:start="113:15" pos:end="113:15">*</operator><name pos:start="113:16" pos:end="113:18">mem</name></expr>;</expr_stmt>



        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:71">(<expr pos:start="117:13" pos:end="117:70"><operator pos:start="117:13" pos:end="117:13">(</operator><name pos:start="117:14" pos:end="117:23"><name pos:start="117:14" pos:end="117:16">mem</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:23">flags</name></name> <operator pos:start="117:25" pos:end="117:25">&amp;</operator> <name pos:start="117:27" pos:end="117:49">KVM_MEM_LOG_DIRTY_PAGES</name><operator pos:start="117:50" pos:end="117:50">)</operator> <operator pos:start="117:52" pos:end="117:53">||</operator> <name pos:start="117:55" pos:end="117:70"><name pos:start="117:55" pos:end="117:55">s</name><operator pos:start="117:56" pos:end="117:57">-&gt;</operator><name pos:start="117:58" pos:end="117:70">migration_log</name></name></expr>)</condition> <block pos:start="117:73" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:52">

            <expr_stmt pos:start="119:13" pos:end="119:52"><expr pos:start="119:13" pos:end="119:51"><call pos:start="119:13" pos:end="119:51"><name pos:start="119:13" pos:end="119:42">kvm_physical_sync_dirty_bitmap</name><argument_list pos:start="119:43" pos:end="119:51">(<argument pos:start="119:44" pos:end="119:50"><expr pos:start="119:44" pos:end="119:50"><name pos:start="119:44" pos:end="119:50">section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="125:9" pos:end="125:45">/* unregister the overlapping slot */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:29"><expr pos:start="127:9" pos:end="127:28"><name pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:11">mem</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:24">memory_size</name></name> <operator pos:start="127:26" pos:end="127:26">=</operator> <literal type="number" pos:start="127:28" pos:end="127:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:49"><expr pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:11">err</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="129:48"><name pos:start="129:15" pos:end="129:40">kvm_set_user_memory_region</name><argument_list pos:start="129:41" pos:end="129:48">(<argument pos:start="129:42" pos:end="129:42"><expr pos:start="129:42" pos:end="129:42"><name pos:start="129:42" pos:end="129:42">s</name></expr></argument>, <argument pos:start="129:45" pos:end="129:47"><expr pos:start="129:45" pos:end="129:47"><name pos:start="129:45" pos:end="129:47">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="139:9">if <condition pos:start="131:12" pos:end="131:16">(<expr pos:start="131:13" pos:end="131:15"><name pos:start="131:13" pos:end="131:15">err</name></expr>)</condition> <block pos:start="131:18" pos:end="139:9">{<block_content pos:start="133:13" pos:end="137:20">

            <expr_stmt pos:start="133:13" pos:end="135:46"><expr pos:start="133:13" pos:end="135:45"><call pos:start="133:13" pos:end="135:45"><name pos:start="133:13" pos:end="133:19">fprintf</name><argument_list pos:start="133:20" pos:end="135:45">(<argument pos:start="133:21" pos:end="133:26"><expr pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:26">stderr</name></expr></argument>, <argument pos:start="133:29" pos:end="133:76"><expr pos:start="133:29" pos:end="133:76"><literal type="string" pos:start="133:29" pos:end="133:76">"%s: error unregistering overlapping slot: %s\n"</literal></expr></argument>,

                    <argument pos:start="135:21" pos:end="135:28"><expr pos:start="135:21" pos:end="135:28"><name pos:start="135:21" pos:end="135:28">__func__</name></expr></argument>, <argument pos:start="135:31" pos:end="135:44"><expr pos:start="135:31" pos:end="135:44"><call pos:start="135:31" pos:end="135:44"><name pos:start="135:31" pos:end="135:38">strerror</name><argument_list pos:start="135:39" pos:end="135:44">(<argument pos:start="135:40" pos:end="135:43"><expr pos:start="135:40" pos:end="135:43"><operator pos:start="135:40" pos:end="135:40">-</operator><name pos:start="135:41" pos:end="135:43">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:20"><expr pos:start="137:13" pos:end="137:19"><call pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:17">abort</name><argument_list pos:start="137:18" pos:end="137:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="143:9" pos:end="157:58">/* Workaround for older KVM versions: we can't join slots, even not by

         * unregistering the previous ones and then registering the larger

         * slot. We have to maintain the existing fragmentation. Sigh.

         *

         * This workaround assumes that the new slot starts at the same

         * address as the first existing one. If not or if some overlapping

         * slot comes around later, we will fail (not seen in practice so far)

         * - and actually require a recent KVM version. */</comment>

        <if_stmt pos:start="159:9" pos:end="197:9"><if pos:start="159:9" pos:end="197:9">if <condition pos:start="159:12" pos:end="161:74">(<expr pos:start="159:13" pos:end="161:73"><name pos:start="159:13" pos:end="159:36"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:36">broken_set_mem_region</name></name> <operator pos:start="159:38" pos:end="159:39">&amp;&amp;</operator>

            <name pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:15">old</name><operator pos:start="161:16" pos:end="161:16">.</operator><name pos:start="161:17" pos:end="161:26">start_addr</name></name> <operator pos:start="161:28" pos:end="161:29">==</operator> <name pos:start="161:31" pos:end="161:40">start_addr</name> <operator pos:start="161:42" pos:end="161:43">&amp;&amp;</operator> <name pos:start="161:45" pos:end="161:59"><name pos:start="161:45" pos:end="161:47">old</name><operator pos:start="161:48" pos:end="161:48">.</operator><name pos:start="161:49" pos:end="161:59">memory_size</name></name> <operator pos:start="161:61" pos:end="161:61">&lt;</operator> <name pos:start="161:63" pos:end="161:66">size</name> <operator pos:start="161:68" pos:end="161:69">&amp;&amp;</operator> <name pos:start="161:71" pos:end="161:73">add</name></expr>)</condition> <block pos:start="161:76" pos:end="197:9">{<block_content pos:start="163:13" pos:end="195:21">

            <expr_stmt pos:start="163:13" pos:end="163:36"><expr pos:start="163:13" pos:end="163:35"><name pos:start="163:13" pos:end="163:15">mem</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <call pos:start="163:19" pos:end="163:35"><name pos:start="163:19" pos:end="163:32">kvm_alloc_slot</name><argument_list pos:start="163:33" pos:end="163:35">(<argument pos:start="163:34" pos:end="163:34"><expr pos:start="163:34" pos:end="163:34"><name pos:start="163:34" pos:end="163:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:47"><expr pos:start="165:13" pos:end="165:46"><name pos:start="165:13" pos:end="165:28"><name pos:start="165:13" pos:end="165:15">mem</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:28">memory_size</name></name> <operator pos:start="165:30" pos:end="165:30">=</operator> <name pos:start="165:32" pos:end="165:46"><name pos:start="165:32" pos:end="165:34">old</name><operator pos:start="165:35" pos:end="165:35">.</operator><name pos:start="165:36" pos:end="165:46">memory_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:45"><expr pos:start="167:13" pos:end="167:44"><name pos:start="167:13" pos:end="167:27"><name pos:start="167:13" pos:end="167:15">mem</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:27">start_addr</name></name> <operator pos:start="167:29" pos:end="167:29">=</operator> <name pos:start="167:31" pos:end="167:44"><name pos:start="167:31" pos:end="167:33">old</name><operator pos:start="167:34" pos:end="167:34">.</operator><name pos:start="167:35" pos:end="167:44">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:31"><expr pos:start="169:13" pos:end="169:30"><name pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:15">mem</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:20">ram</name></name> <operator pos:start="169:22" pos:end="169:22">=</operator> <name pos:start="169:24" pos:end="169:30"><name pos:start="169:24" pos:end="169:26">old</name><operator pos:start="169:27" pos:end="169:27">.</operator><name pos:start="169:28" pos:end="169:30">ram</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:68"><expr pos:start="171:13" pos:end="171:67"><name pos:start="171:13" pos:end="171:22"><name pos:start="171:13" pos:end="171:15">mem</name><operator pos:start="171:16" pos:end="171:17">-&gt;</operator><name pos:start="171:18" pos:end="171:22">flags</name></name> <operator pos:start="171:24" pos:end="171:24">=</operator> <call pos:start="171:26" pos:end="171:67"><name pos:start="171:26" pos:end="171:38">kvm_mem_flags</name><argument_list pos:start="171:39" pos:end="171:67">(<argument pos:start="171:40" pos:end="171:40"><expr pos:start="171:40" pos:end="171:40"><name pos:start="171:40" pos:end="171:40">s</name></expr></argument>, <argument pos:start="171:43" pos:end="171:51"><expr pos:start="171:43" pos:end="171:51"><name pos:start="171:43" pos:end="171:51">log_dirty</name></expr></argument>, <argument pos:start="171:54" pos:end="171:66"><expr pos:start="171:54" pos:end="171:66"><name pos:start="171:54" pos:end="171:66">readonly_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="175:13" pos:end="175:53"><expr pos:start="175:13" pos:end="175:52"><name pos:start="175:13" pos:end="175:15">err</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <call pos:start="175:19" pos:end="175:52"><name pos:start="175:19" pos:end="175:44">kvm_set_user_memory_region</name><argument_list pos:start="175:45" pos:end="175:52">(<argument pos:start="175:46" pos:end="175:46"><expr pos:start="175:46" pos:end="175:46"><name pos:start="175:46" pos:end="175:46">s</name></expr></argument>, <argument pos:start="175:49" pos:end="175:51"><expr pos:start="175:49" pos:end="175:51"><name pos:start="175:49" pos:end="175:51">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="185:13"><if pos:start="177:13" pos:end="185:13">if <condition pos:start="177:16" pos:end="177:20">(<expr pos:start="177:17" pos:end="177:19"><name pos:start="177:17" pos:end="177:19">err</name></expr>)</condition> <block pos:start="177:22" pos:end="185:13">{<block_content pos:start="179:17" pos:end="183:24">

                <expr_stmt pos:start="179:17" pos:end="181:40"><expr pos:start="179:17" pos:end="181:39"><call pos:start="179:17" pos:end="181:39"><name pos:start="179:17" pos:end="179:23">fprintf</name><argument_list pos:start="179:24" pos:end="181:39">(<argument pos:start="179:25" pos:end="179:30"><expr pos:start="179:25" pos:end="179:30"><name pos:start="179:25" pos:end="179:30">stderr</name></expr></argument>, <argument pos:start="179:33" pos:end="179:63"><expr pos:start="179:33" pos:end="179:63"><literal type="string" pos:start="179:33" pos:end="179:63">"%s: error updating slot: %s\n"</literal></expr></argument>, <argument pos:start="179:66" pos:end="179:73"><expr pos:start="179:66" pos:end="179:73"><name pos:start="179:66" pos:end="179:73">__func__</name></expr></argument>,

                        <argument pos:start="181:25" pos:end="181:38"><expr pos:start="181:25" pos:end="181:38"><call pos:start="181:25" pos:end="181:38"><name pos:start="181:25" pos:end="181:32">strerror</name><argument_list pos:start="181:33" pos:end="181:38">(<argument pos:start="181:34" pos:end="181:37"><expr pos:start="181:34" pos:end="181:37"><operator pos:start="181:34" pos:end="181:34">-</operator><name pos:start="181:35" pos:end="181:37">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:24"><expr pos:start="183:17" pos:end="183:23"><call pos:start="183:17" pos:end="183:23"><name pos:start="183:17" pos:end="183:21">abort</name><argument_list pos:start="183:22" pos:end="183:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="189:13" pos:end="189:42"><expr pos:start="189:13" pos:end="189:41"><name pos:start="189:13" pos:end="189:22">start_addr</name> <operator pos:start="189:24" pos:end="189:25">+=</operator> <name pos:start="189:27" pos:end="189:41"><name pos:start="189:27" pos:end="189:29">old</name><operator pos:start="189:30" pos:end="189:30">.</operator><name pos:start="189:31" pos:end="189:41">memory_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:35"><expr pos:start="191:13" pos:end="191:34"><name pos:start="191:13" pos:end="191:15">ram</name> <operator pos:start="191:17" pos:end="191:18">+=</operator> <name pos:start="191:20" pos:end="191:34"><name pos:start="191:20" pos:end="191:22">old</name><operator pos:start="191:23" pos:end="191:23">.</operator><name pos:start="191:24" pos:end="191:34">memory_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:36"><expr pos:start="193:13" pos:end="193:35"><name pos:start="193:13" pos:end="193:16">size</name> <operator pos:start="193:18" pos:end="193:19">-=</operator> <name pos:start="193:21" pos:end="193:35"><name pos:start="193:21" pos:end="193:23">old</name><operator pos:start="193:24" pos:end="193:24">.</operator><name pos:start="193:25" pos:end="193:35">memory_size</name></name></expr>;</expr_stmt>

            <continue pos:start="195:13" pos:end="195:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="201:9" pos:end="201:34">/* register prefix slot */</comment>

        <if_stmt pos:start="203:9" pos:end="239:9"><if pos:start="203:9" pos:end="239:9">if <condition pos:start="203:12" pos:end="203:40">(<expr pos:start="203:13" pos:end="203:39"><name pos:start="203:13" pos:end="203:26"><name pos:start="203:13" pos:end="203:15">old</name><operator pos:start="203:16" pos:end="203:16">.</operator><name pos:start="203:17" pos:end="203:26">start_addr</name></name> <operator pos:start="203:28" pos:end="203:28">&lt;</operator> <name pos:start="203:30" pos:end="203:39">start_addr</name></expr>)</condition> <block pos:start="203:42" pos:end="239:9">{<block_content pos:start="205:13" pos:end="237:13">

            <expr_stmt pos:start="205:13" pos:end="205:36"><expr pos:start="205:13" pos:end="205:35"><name pos:start="205:13" pos:end="205:15">mem</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <call pos:start="205:19" pos:end="205:35"><name pos:start="205:19" pos:end="205:32">kvm_alloc_slot</name><argument_list pos:start="205:33" pos:end="205:35">(<argument pos:start="205:34" pos:end="205:34"><expr pos:start="205:34" pos:end="205:34"><name pos:start="205:34" pos:end="205:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:59"><expr pos:start="207:13" pos:end="207:58"><name pos:start="207:13" pos:end="207:28"><name pos:start="207:13" pos:end="207:15">mem</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:28">memory_size</name></name> <operator pos:start="207:30" pos:end="207:30">=</operator> <name pos:start="207:32" pos:end="207:41">start_addr</name> <operator pos:start="207:43" pos:end="207:43">-</operator> <name pos:start="207:45" pos:end="207:58"><name pos:start="207:45" pos:end="207:47">old</name><operator pos:start="207:48" pos:end="207:48">.</operator><name pos:start="207:49" pos:end="207:58">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:45"><expr pos:start="209:13" pos:end="209:44"><name pos:start="209:13" pos:end="209:27"><name pos:start="209:13" pos:end="209:15">mem</name><operator pos:start="209:16" pos:end="209:17">-&gt;</operator><name pos:start="209:18" pos:end="209:27">start_addr</name></name> <operator pos:start="209:29" pos:end="209:29">=</operator> <name pos:start="209:31" pos:end="209:44"><name pos:start="209:31" pos:end="209:33">old</name><operator pos:start="209:34" pos:end="209:34">.</operator><name pos:start="209:35" pos:end="209:44">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:31"><expr pos:start="211:13" pos:end="211:30"><name pos:start="211:13" pos:end="211:20"><name pos:start="211:13" pos:end="211:15">mem</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:20">ram</name></name> <operator pos:start="211:22" pos:end="211:22">=</operator> <name pos:start="211:24" pos:end="211:30"><name pos:start="211:24" pos:end="211:26">old</name><operator pos:start="211:27" pos:end="211:27">.</operator><name pos:start="211:28" pos:end="211:30">ram</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:69"><expr pos:start="213:13" pos:end="213:68"><name pos:start="213:13" pos:end="213:22"><name pos:start="213:13" pos:end="213:15">mem</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:22">flags</name></name> <operator pos:start="213:24" pos:end="213:24">=</operator>  <call pos:start="213:27" pos:end="213:68"><name pos:start="213:27" pos:end="213:39">kvm_mem_flags</name><argument_list pos:start="213:40" pos:end="213:68">(<argument pos:start="213:41" pos:end="213:41"><expr pos:start="213:41" pos:end="213:41"><name pos:start="213:41" pos:end="213:41">s</name></expr></argument>, <argument pos:start="213:44" pos:end="213:52"><expr pos:start="213:44" pos:end="213:52"><name pos:start="213:44" pos:end="213:52">log_dirty</name></expr></argument>, <argument pos:start="213:55" pos:end="213:67"><expr pos:start="213:55" pos:end="213:67"><name pos:start="213:55" pos:end="213:67">readonly_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="217:13" pos:end="217:53"><expr pos:start="217:13" pos:end="217:52"><name pos:start="217:13" pos:end="217:15">err</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <call pos:start="217:19" pos:end="217:52"><name pos:start="217:19" pos:end="217:44">kvm_set_user_memory_region</name><argument_list pos:start="217:45" pos:end="217:52">(<argument pos:start="217:46" pos:end="217:46"><expr pos:start="217:46" pos:end="217:46"><name pos:start="217:46" pos:end="217:46">s</name></expr></argument>, <argument pos:start="217:49" pos:end="217:51"><expr pos:start="217:49" pos:end="217:51"><name pos:start="217:49" pos:end="217:51">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="237:13"><if pos:start="219:13" pos:end="237:13">if <condition pos:start="219:16" pos:end="219:20">(<expr pos:start="219:17" pos:end="219:19"><name pos:start="219:17" pos:end="219:19">err</name></expr>)</condition> <block pos:start="219:22" pos:end="237:13">{<block_content pos:start="221:17" pos:end="235:24">

                <expr_stmt pos:start="221:17" pos:end="226:0"><expr pos:start="221:17" pos:end="223:49"><call pos:start="221:17" pos:end="223:49"><name pos:start="221:17" pos:end="221:23">fprintf</name><argument_list pos:start="221:24" pos:end="223:49">(<argument pos:start="221:25" pos:end="221:30"><expr pos:start="221:25" pos:end="221:30"><name pos:start="221:25" pos:end="221:30">stderr</name></expr></argument>, <argument pos:start="221:33" pos:end="221:73"><expr pos:start="221:33" pos:end="221:73"><literal type="string" pos:start="221:33" pos:end="221:73">"%s: error registering prefix slot: %s\n"</literal></expr></argument>,

                        <argument pos:start="223:25" pos:end="223:32"><expr pos:start="223:25" pos:end="223:32"><name pos:start="223:25" pos:end="223:32">__func__</name></expr></argument>, <argument pos:start="223:35" pos:end="223:48"><expr pos:start="223:35" pos:end="223:48"><call pos:start="223:35" pos:end="223:48"><name pos:start="223:35" pos:end="223:42">strerror</name><argument_list pos:start="223:43" pos:end="223:48">(<argument pos:start="223:44" pos:end="223:47"><expr pos:start="223:44" pos:end="223:47"><operator pos:start="223:44" pos:end="223:44">-</operator><name pos:start="223:45" pos:end="223:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="225:1" pos:end="225:17">#<cpp:directive pos:start="225:2" pos:end="225:6">ifdef</cpp:directive> <name pos:start="225:8" pos:end="225:17">TARGET_PPC</name></cpp:ifdef>

                <expr_stmt pos:start="227:17" pos:end="234:0"><expr pos:start="227:17" pos:end="231:57"><call pos:start="227:17" pos:end="231:57"><name pos:start="227:17" pos:end="227:23">fprintf</name><argument_list pos:start="227:24" pos:end="231:57">(<argument pos:start="227:25" pos:end="227:30"><expr pos:start="227:25" pos:end="227:30"><name pos:start="227:25" pos:end="227:30">stderr</name></expr></argument>, <argument pos:start="227:33" pos:end="231:46"><expr pos:start="227:33" pos:end="231:46"><literal type="string" pos:start="227:33" pos:end="227:77">"%s: This is probably because your kernel's "</literal> \

                                <literal type="string" pos:start="229:33" pos:end="229:77">"PAGE_SIZE is too big. Please try to use 4k "</literal> \

                                <literal type="string" pos:start="231:33" pos:end="231:46">"PAGE_SIZE!\n"</literal></expr></argument>, <argument pos:start="231:49" pos:end="231:56"><expr pos:start="231:49" pos:end="231:56"><name pos:start="231:49" pos:end="231:56">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="235:17" pos:end="235:24"><expr pos:start="235:17" pos:end="235:23"><call pos:start="235:17" pos:end="235:23"><name pos:start="235:17" pos:end="235:21">abort</name><argument_list pos:start="235:22" pos:end="235:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="243:9" pos:end="243:34">/* register suffix slot */</comment>

        <if_stmt pos:start="245:9" pos:end="277:9"><if pos:start="245:9" pos:end="277:9">if <condition pos:start="245:12" pos:end="245:65">(<expr pos:start="245:13" pos:end="245:64"><name pos:start="245:13" pos:end="245:26"><name pos:start="245:13" pos:end="245:15">old</name><operator pos:start="245:16" pos:end="245:16">.</operator><name pos:start="245:17" pos:end="245:26">start_addr</name></name> <operator pos:start="245:28" pos:end="245:28">+</operator> <name pos:start="245:30" pos:end="245:44"><name pos:start="245:30" pos:end="245:32">old</name><operator pos:start="245:33" pos:end="245:33">.</operator><name pos:start="245:34" pos:end="245:44">memory_size</name></name> <operator pos:start="245:46" pos:end="245:46">&gt;</operator> <name pos:start="245:48" pos:end="245:57">start_addr</name> <operator pos:start="245:59" pos:end="245:59">+</operator> <name pos:start="245:61" pos:end="245:64">size</name></expr>)</condition> <block pos:start="245:67" pos:end="277:9">{<block_content pos:start="247:13" pos:end="275:13">

            <decl_stmt pos:start="247:13" pos:end="247:34"><decl pos:start="247:13" pos:end="247:33"><type pos:start="247:13" pos:end="247:22"><name pos:start="247:13" pos:end="247:22">ram_addr_t</name></type> <name pos:start="247:24" pos:end="247:33">size_delta</name></decl>;</decl_stmt>



            <expr_stmt pos:start="251:13" pos:end="251:36"><expr pos:start="251:13" pos:end="251:35"><name pos:start="251:13" pos:end="251:15">mem</name> <operator pos:start="251:17" pos:end="251:17">=</operator> <call pos:start="251:19" pos:end="251:35"><name pos:start="251:19" pos:end="251:32">kvm_alloc_slot</name><argument_list pos:start="251:33" pos:end="251:35">(<argument pos:start="251:34" pos:end="251:34"><expr pos:start="251:34" pos:end="251:34"><name pos:start="251:34" pos:end="251:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:48"><expr pos:start="253:13" pos:end="253:47"><name pos:start="253:13" pos:end="253:27"><name pos:start="253:13" pos:end="253:15">mem</name><operator pos:start="253:16" pos:end="253:17">-&gt;</operator><name pos:start="253:18" pos:end="253:27">start_addr</name></name> <operator pos:start="253:29" pos:end="253:29">=</operator> <name pos:start="253:31" pos:end="253:40">start_addr</name> <operator pos:start="253:42" pos:end="253:42">+</operator> <name pos:start="253:44" pos:end="253:47">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:58"><expr pos:start="255:13" pos:end="255:57"><name pos:start="255:13" pos:end="255:22">size_delta</name> <operator pos:start="255:24" pos:end="255:24">=</operator> <name pos:start="255:26" pos:end="255:40"><name pos:start="255:26" pos:end="255:28">mem</name><operator pos:start="255:29" pos:end="255:30">-&gt;</operator><name pos:start="255:31" pos:end="255:40">start_addr</name></name> <operator pos:start="255:42" pos:end="255:42">-</operator> <name pos:start="255:44" pos:end="255:57"><name pos:start="255:44" pos:end="255:46">old</name><operator pos:start="255:47" pos:end="255:47">.</operator><name pos:start="255:48" pos:end="255:57">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:60"><expr pos:start="257:13" pos:end="257:59"><name pos:start="257:13" pos:end="257:28"><name pos:start="257:13" pos:end="257:15">mem</name><operator pos:start="257:16" pos:end="257:17">-&gt;</operator><name pos:start="257:18" pos:end="257:28">memory_size</name></name> <operator pos:start="257:30" pos:end="257:30">=</operator> <name pos:start="257:32" pos:end="257:46"><name pos:start="257:32" pos:end="257:34">old</name><operator pos:start="257:35" pos:end="257:35">.</operator><name pos:start="257:36" pos:end="257:46">memory_size</name></name> <operator pos:start="257:48" pos:end="257:48">-</operator> <name pos:start="257:50" pos:end="257:59">size_delta</name></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:44"><expr pos:start="259:13" pos:end="259:43"><name pos:start="259:13" pos:end="259:20"><name pos:start="259:13" pos:end="259:15">mem</name><operator pos:start="259:16" pos:end="259:17">-&gt;</operator><name pos:start="259:18" pos:end="259:20">ram</name></name> <operator pos:start="259:22" pos:end="259:22">=</operator> <name pos:start="259:24" pos:end="259:30"><name pos:start="259:24" pos:end="259:26">old</name><operator pos:start="259:27" pos:end="259:27">.</operator><name pos:start="259:28" pos:end="259:30">ram</name></name> <operator pos:start="259:32" pos:end="259:32">+</operator> <name pos:start="259:34" pos:end="259:43">size_delta</name></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:68"><expr pos:start="261:13" pos:end="261:67"><name pos:start="261:13" pos:end="261:22"><name pos:start="261:13" pos:end="261:15">mem</name><operator pos:start="261:16" pos:end="261:17">-&gt;</operator><name pos:start="261:18" pos:end="261:22">flags</name></name> <operator pos:start="261:24" pos:end="261:24">=</operator> <call pos:start="261:26" pos:end="261:67"><name pos:start="261:26" pos:end="261:38">kvm_mem_flags</name><argument_list pos:start="261:39" pos:end="261:67">(<argument pos:start="261:40" pos:end="261:40"><expr pos:start="261:40" pos:end="261:40"><name pos:start="261:40" pos:end="261:40">s</name></expr></argument>, <argument pos:start="261:43" pos:end="261:51"><expr pos:start="261:43" pos:end="261:51"><name pos:start="261:43" pos:end="261:51">log_dirty</name></expr></argument>, <argument pos:start="261:54" pos:end="261:66"><expr pos:start="261:54" pos:end="261:66"><name pos:start="261:54" pos:end="261:66">readonly_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="265:13" pos:end="265:53"><expr pos:start="265:13" pos:end="265:52"><name pos:start="265:13" pos:end="265:15">err</name> <operator pos:start="265:17" pos:end="265:17">=</operator> <call pos:start="265:19" pos:end="265:52"><name pos:start="265:19" pos:end="265:44">kvm_set_user_memory_region</name><argument_list pos:start="265:45" pos:end="265:52">(<argument pos:start="265:46" pos:end="265:46"><expr pos:start="265:46" pos:end="265:46"><name pos:start="265:46" pos:end="265:46">s</name></expr></argument>, <argument pos:start="265:49" pos:end="265:51"><expr pos:start="265:49" pos:end="265:51"><name pos:start="265:49" pos:end="265:51">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="267:13" pos:end="275:13"><if pos:start="267:13" pos:end="275:13">if <condition pos:start="267:16" pos:end="267:20">(<expr pos:start="267:17" pos:end="267:19"><name pos:start="267:17" pos:end="267:19">err</name></expr>)</condition> <block pos:start="267:22" pos:end="275:13">{<block_content pos:start="269:17" pos:end="273:24">

                <expr_stmt pos:start="269:17" pos:end="271:50"><expr pos:start="269:17" pos:end="271:49"><call pos:start="269:17" pos:end="271:49"><name pos:start="269:17" pos:end="269:23">fprintf</name><argument_list pos:start="269:24" pos:end="271:49">(<argument pos:start="269:25" pos:end="269:30"><expr pos:start="269:25" pos:end="269:30"><name pos:start="269:25" pos:end="269:30">stderr</name></expr></argument>, <argument pos:start="269:33" pos:end="269:73"><expr pos:start="269:33" pos:end="269:73"><literal type="string" pos:start="269:33" pos:end="269:73">"%s: error registering suffix slot: %s\n"</literal></expr></argument>,

                        <argument pos:start="271:25" pos:end="271:32"><expr pos:start="271:25" pos:end="271:32"><name pos:start="271:25" pos:end="271:32">__func__</name></expr></argument>, <argument pos:start="271:35" pos:end="271:48"><expr pos:start="271:35" pos:end="271:48"><call pos:start="271:35" pos:end="271:48"><name pos:start="271:35" pos:end="271:42">strerror</name><argument_list pos:start="271:43" pos:end="271:48">(<argument pos:start="271:44" pos:end="271:47"><expr pos:start="271:44" pos:end="271:47"><operator pos:start="271:44" pos:end="271:44">-</operator><name pos:start="271:45" pos:end="271:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:24"><expr pos:start="273:17" pos:end="273:23"><call pos:start="273:17" pos:end="273:23"><name pos:start="273:17" pos:end="273:21">abort</name><argument_list pos:start="273:22" pos:end="273:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="283:5" pos:end="283:72">/* in case the KVM bug workaround already "consumed" the new slot */</comment>

    <if_stmt pos:start="285:5" pos:end="289:5"><if pos:start="285:5" pos:end="289:5">if <condition pos:start="285:8" pos:end="285:14">(<expr pos:start="285:9" pos:end="285:13"><operator pos:start="285:9" pos:end="285:9">!</operator><name pos:start="285:10" pos:end="285:13">size</name></expr>)</condition> <block pos:start="285:16" pos:end="289:5">{<block_content pos:start="287:9" pos:end="287:15">

        <return pos:start="287:9" pos:end="287:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="291:5" pos:end="295:5"><if pos:start="291:5" pos:end="295:5">if <condition pos:start="291:8" pos:end="291:13">(<expr pos:start="291:9" pos:end="291:12"><operator pos:start="291:9" pos:end="291:9">!</operator><name pos:start="291:10" pos:end="291:12">add</name></expr>)</condition> <block pos:start="291:15" pos:end="295:5">{<block_content pos:start="293:9" pos:end="293:15">

        <return pos:start="293:9" pos:end="293:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:28"><expr pos:start="297:5" pos:end="297:27"><name pos:start="297:5" pos:end="297:7">mem</name> <operator pos:start="297:9" pos:end="297:9">=</operator> <call pos:start="297:11" pos:end="297:27"><name pos:start="297:11" pos:end="297:24">kvm_alloc_slot</name><argument_list pos:start="297:25" pos:end="297:27">(<argument pos:start="297:26" pos:end="297:26"><expr pos:start="297:26" pos:end="297:26"><name pos:start="297:26" pos:end="297:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:28"><expr pos:start="299:5" pos:end="299:27"><name pos:start="299:5" pos:end="299:20"><name pos:start="299:5" pos:end="299:7">mem</name><operator pos:start="299:8" pos:end="299:9">-&gt;</operator><name pos:start="299:10" pos:end="299:20">memory_size</name></name> <operator pos:start="299:22" pos:end="299:22">=</operator> <name pos:start="299:24" pos:end="299:27">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:33"><expr pos:start="301:5" pos:end="301:32"><name pos:start="301:5" pos:end="301:19"><name pos:start="301:5" pos:end="301:7">mem</name><operator pos:start="301:8" pos:end="301:9">-&gt;</operator><name pos:start="301:10" pos:end="301:19">start_addr</name></name> <operator pos:start="301:21" pos:end="301:21">=</operator> <name pos:start="301:23" pos:end="301:32">start_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:19"><expr pos:start="303:5" pos:end="303:18"><name pos:start="303:5" pos:end="303:12"><name pos:start="303:5" pos:end="303:7">mem</name><operator pos:start="303:8" pos:end="303:9">-&gt;</operator><name pos:start="303:10" pos:end="303:12">ram</name></name> <operator pos:start="303:14" pos:end="303:14">=</operator> <name pos:start="303:16" pos:end="303:18">ram</name></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:60"><expr pos:start="305:5" pos:end="305:59"><name pos:start="305:5" pos:end="305:14"><name pos:start="305:5" pos:end="305:7">mem</name><operator pos:start="305:8" pos:end="305:9">-&gt;</operator><name pos:start="305:10" pos:end="305:14">flags</name></name> <operator pos:start="305:16" pos:end="305:16">=</operator> <call pos:start="305:18" pos:end="305:59"><name pos:start="305:18" pos:end="305:30">kvm_mem_flags</name><argument_list pos:start="305:31" pos:end="305:59">(<argument pos:start="305:32" pos:end="305:32"><expr pos:start="305:32" pos:end="305:32"><name pos:start="305:32" pos:end="305:32">s</name></expr></argument>, <argument pos:start="305:35" pos:end="305:43"><expr pos:start="305:35" pos:end="305:43"><name pos:start="305:35" pos:end="305:43">log_dirty</name></expr></argument>, <argument pos:start="305:46" pos:end="305:58"><expr pos:start="305:46" pos:end="305:58"><name pos:start="305:46" pos:end="305:58">readonly_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="309:5" pos:end="309:45"><expr pos:start="309:5" pos:end="309:44"><name pos:start="309:5" pos:end="309:7">err</name> <operator pos:start="309:9" pos:end="309:9">=</operator> <call pos:start="309:11" pos:end="309:44"><name pos:start="309:11" pos:end="309:36">kvm_set_user_memory_region</name><argument_list pos:start="309:37" pos:end="309:44">(<argument pos:start="309:38" pos:end="309:38"><expr pos:start="309:38" pos:end="309:38"><name pos:start="309:38" pos:end="309:38">s</name></expr></argument>, <argument pos:start="309:41" pos:end="309:43"><expr pos:start="309:41" pos:end="309:43"><name pos:start="309:41" pos:end="309:43">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="311:5" pos:end="319:5"><if pos:start="311:5" pos:end="319:5">if <condition pos:start="311:8" pos:end="311:12">(<expr pos:start="311:9" pos:end="311:11"><name pos:start="311:9" pos:end="311:11">err</name></expr>)</condition> <block pos:start="311:14" pos:end="319:5">{<block_content pos:start="313:9" pos:end="317:16">

        <expr_stmt pos:start="313:9" pos:end="315:32"><expr pos:start="313:9" pos:end="315:31"><call pos:start="313:9" pos:end="315:31"><name pos:start="313:9" pos:end="313:15">fprintf</name><argument_list pos:start="313:16" pos:end="315:31">(<argument pos:start="313:17" pos:end="313:22"><expr pos:start="313:17" pos:end="313:22"><name pos:start="313:17" pos:end="313:22">stderr</name></expr></argument>, <argument pos:start="313:25" pos:end="313:58"><expr pos:start="313:25" pos:end="313:58"><literal type="string" pos:start="313:25" pos:end="313:58">"%s: error registering slot: %s\n"</literal></expr></argument>, <argument pos:start="313:61" pos:end="313:68"><expr pos:start="313:61" pos:end="313:68"><name pos:start="313:61" pos:end="313:68">__func__</name></expr></argument>,

                <argument pos:start="315:17" pos:end="315:30"><expr pos:start="315:17" pos:end="315:30"><call pos:start="315:17" pos:end="315:30"><name pos:start="315:17" pos:end="315:24">strerror</name><argument_list pos:start="315:25" pos:end="315:30">(<argument pos:start="315:26" pos:end="315:29"><expr pos:start="315:26" pos:end="315:29"><operator pos:start="315:26" pos:end="315:26">-</operator><name pos:start="315:27" pos:end="315:29">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:16"><expr pos:start="317:9" pos:end="317:15"><call pos:start="317:9" pos:end="317:15"><name pos:start="317:9" pos:end="317:13">abort</name><argument_list pos:start="317:14" pos:end="317:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
