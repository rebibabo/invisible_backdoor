<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1689.c" pos:tabs="8"><function pos:start="1:1" pos:end="351:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">vhdx_log_write</name><parameter_list pos:start="1:26" pos:end="3:71">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:61">BDRVVHDXState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:64">s</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:36"><decl pos:start="3:27" pos:end="3:36"><type pos:start="3:27" pos:end="3:36"><name pos:start="3:27" pos:end="3:30">void</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:36">data</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:53"><decl pos:start="3:39" pos:end="3:53"><type pos:start="3:39" pos:end="3:53"><name pos:start="3:39" pos:end="3:46">uint32_t</name></type> <name pos:start="3:48" pos:end="3:53">length</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:70"><decl pos:start="3:56" pos:end="3:70"><type pos:start="3:56" pos:end="3:70"><name pos:start="3:56" pos:end="3:63">uint64_t</name></type> <name pos:start="3:65" pos:end="3:70">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="351:1">{<block_content pos:start="7:5" pos:end="349:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:16">buffer</name> <init pos:start="9:18" pos:end="9:23">= <expr pos:start="9:20" pos:end="9:23"><name pos:start="9:20" pos:end="9:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:23">merged_sector</name> <init pos:start="11:25" pos:end="11:30">= <expr pos:start="11:27" pos:end="11:30"><name pos:start="11:27" pos:end="11:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:18">data_tmp</name></decl>, <decl pos:start="13:21" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:33">sector_write</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:21">sector_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:49"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:25">desc_sectors</name></decl>, <decl pos:start="19:28" pos:end="19:34"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:28" pos:end="19:34">sectors</name></decl>, <decl pos:start="19:37" pos:end="19:48"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:37" pos:end="19:48">total_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:28">sectors_written</name> <init pos:start="21:30" pos:end="21:32">= <expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:27">aligned_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:27">leading_length</name> <init pos:start="25:29" pos:end="25:31">= <expr pos:start="25:31" pos:end="25:31"><literal type="number" pos:start="25:31" pos:end="25:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:33"><decl pos:start="27:5" pos:end="27:32"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint32_t</name></type> <name pos:start="27:14" pos:end="27:28">trailing_length</name> <init pos:start="27:30" pos:end="27:32">= <expr pos:start="27:32" pos:end="27:32"><literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:33"><decl pos:start="29:5" pos:end="29:32"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:28">partial_sectors</name> <init pos:start="29:30" pos:end="29:32">= <expr pos:start="29:32" pos:end="29:32"><literal type="number" pos:start="29:32" pos:end="29:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:30"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">uint32_t</name></type> <name pos:start="31:14" pos:end="31:26">bytes_written</name> <init pos:start="31:28" pos:end="31:30">= <expr pos:start="31:30" pos:end="31:30"><literal type="number" pos:start="31:30" pos:end="31:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:25"><decl pos:start="33:5" pos:end="33:24"><type pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:12">uint64_t</name></type> <name pos:start="33:14" pos:end="33:24">file_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:23"><decl pos:start="35:5" pos:end="35:22"><type pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:14">VHDXHeader</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:31"><decl pos:start="37:5" pos:end="37:30"><type pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:22">VHDXLogEntryHeader</name></type> <name pos:start="37:24" pos:end="37:30">new_hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:39"><decl pos:start="39:5" pos:end="39:38"><type pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:21">VHDXLogDescriptor</name> <modifier pos:start="39:23" pos:end="39:23">*</modifier></type><name pos:start="39:24" pos:end="39:31">new_desc</name> <init pos:start="39:33" pos:end="39:38">= <expr pos:start="39:35" pos:end="39:38"><name pos:start="39:35" pos:end="39:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:42"><decl pos:start="41:5" pos:end="41:41"><type pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:21">VHDXLogDataSector</name> <modifier pos:start="41:23" pos:end="41:23">*</modifier></type><name pos:start="41:24" pos:end="41:34">data_sector</name> <init pos:start="41:36" pos:end="41:41">= <expr pos:start="41:38" pos:end="41:41"><name pos:start="41:38" pos:end="41:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:28"><decl pos:start="43:5" pos:end="43:27"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:10">MSGUID</name></type> <name pos:start="43:12" pos:end="43:19">new_guid</name> <init pos:start="43:21" pos:end="43:27">= <expr pos:start="43:23" pos:end="43:27"><block pos:start="43:23" pos:end="43:27">{ <expr pos:start="43:25" pos:end="43:25"><literal type="number" pos:start="43:25" pos:end="43:25">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:10">header</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:39"><name pos:start="47:14" pos:end="47:14">s</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:23">headers</name><index pos:start="47:24" pos:end="47:39">[<expr pos:start="47:25" pos:end="47:38"><name pos:start="47:25" pos:end="47:38"><name pos:start="47:25" pos:end="47:25">s</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:38">curr_header</name></name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:69">/* need to have offset read data, and be on 4096 byte boundary */</comment>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:36">(<expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:14">length</name> <operator pos:start="55:16" pos:end="55:16">&gt;</operator> <name pos:start="55:18" pos:end="55:35"><name pos:start="55:18" pos:end="55:23">header</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:35">log_length</name></name></expr>)</condition> <block pos:start="55:38" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <comment type="block" pos:start="57:9" pos:end="57:76">/* no log present.  we could create a log here instead of failing */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <operator pos:start="59:15" pos:end="59:15">-</operator><name pos:start="59:16" pos:end="59:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:18">goto <name pos:start="61:14" pos:end="61:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="83:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:45">(<expr pos:start="67:9" pos:end="67:44"><call pos:start="67:9" pos:end="67:44"><name pos:start="67:9" pos:end="67:15">guid_eq</name><argument_list pos:start="67:16" pos:end="67:44">(<argument pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:22">header</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:32">log_guid</name></name></expr></argument>, <argument pos:start="67:35" pos:end="67:43"><expr pos:start="67:35" pos:end="67:43"><name pos:start="67:35" pos:end="67:43">zero_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:47" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:53">

        <expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><call pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:26">vhdx_guid_generate</name><argument_list pos:start="69:27" pos:end="69:37">(<argument pos:start="69:28" pos:end="69:36"><expr pos:start="69:28" pos:end="69:36"><operator pos:start="69:28" pos:end="69:28">&amp;</operator><name pos:start="69:29" pos:end="69:36">new_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:53"><expr pos:start="71:9" pos:end="71:52"><call pos:start="71:9" pos:end="71:52"><name pos:start="71:9" pos:end="71:27">vhdx_update_headers</name><argument_list pos:start="71:28" pos:end="71:52">(<argument pos:start="71:29" pos:end="71:30"><expr pos:start="71:29" pos:end="71:30"><name pos:start="71:29" pos:end="71:30">bs</name></expr></argument>, <argument pos:start="71:33" pos:end="71:33"><expr pos:start="71:33" pos:end="71:33"><name pos:start="71:33" pos:end="71:33">s</name></expr></argument>, <argument pos:start="71:36" pos:end="71:40"><expr pos:start="71:36" pos:end="71:40"><name pos:start="71:36" pos:end="71:40">false</name></expr></argument>, <argument pos:start="71:43" pos:end="71:51"><expr pos:start="71:43" pos:end="71:51"><operator pos:start="71:43" pos:end="71:43">&amp;</operator><name pos:start="71:44" pos:end="71:51">new_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="83:5">else <block pos:start="73:12" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:18">

        <comment type="block" pos:start="75:9" pos:end="77:26">/* currently, we require that the log be flushed after

         * every write. */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <operator pos:start="79:15" pos:end="79:15">-</operator><name pos:start="79:16" pos:end="79:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">exit</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="89:38">/* 0 is an invalid sequence number, but may also represent the first

     * log write (or a wrapped seq) */</comment>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:29">(<expr pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:14">log</name><operator pos:start="91:15" pos:end="91:15">.</operator><name pos:start="91:16" pos:end="91:23">sequence</name></name> <operator pos:start="91:25" pos:end="91:26">==</operator> <literal type="number" pos:start="91:28" pos:end="91:28">0</literal></expr>)</condition> <block pos:start="91:31" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:28">

        <expr_stmt pos:start="93:9" pos:end="93:28"><expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:14">log</name><operator pos:start="93:15" pos:end="93:15">.</operator><name pos:start="93:16" pos:end="93:23">sequence</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <literal type="number" pos:start="93:27" pos:end="93:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:50"><expr pos:start="99:5" pos:end="99:49"><name pos:start="99:5" pos:end="99:17">sector_offset</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <name pos:start="99:21" pos:end="99:26">offset</name> <operator pos:start="99:28" pos:end="99:28">%</operator> <name pos:start="99:30" pos:end="99:49">VHDX_LOG_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:73"><expr pos:start="101:5" pos:end="101:72"><name pos:start="101:5" pos:end="101:15">file_offset</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <operator pos:start="101:19" pos:end="101:19">(</operator><name pos:start="101:20" pos:end="101:25">offset</name> <operator pos:start="101:27" pos:end="101:27">/</operator> <name pos:start="101:29" pos:end="101:48">VHDX_LOG_SECTOR_SIZE</name><operator pos:start="101:49" pos:end="101:49">)</operator> <operator pos:start="101:51" pos:end="101:51">*</operator> <name pos:start="101:53" pos:end="101:72">VHDX_LOG_SECTOR_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:28"><expr pos:start="105:5" pos:end="105:27"><name pos:start="105:5" pos:end="105:18">aligned_length</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <name pos:start="105:22" pos:end="105:27">length</name></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:50">/* add in the unaligned head and tail bytes */</comment>

    <if_stmt pos:start="111:5" pos:end="121:5"><if pos:start="111:5" pos:end="121:5">if <condition pos:start="111:8" pos:end="111:22">(<expr pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:21">sector_offset</name></expr>)</condition> <block pos:start="111:24" pos:end="121:5">{<block_content pos:start="113:9" pos:end="119:26">

        <expr_stmt pos:start="113:9" pos:end="113:64"><expr pos:start="113:9" pos:end="113:63"><name pos:start="113:9" pos:end="113:22">leading_length</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <operator pos:start="113:26" pos:end="113:26">(</operator><name pos:start="113:27" pos:end="113:46">VHDX_LOG_SECTOR_SIZE</name> <operator pos:start="113:48" pos:end="113:48">-</operator> <name pos:start="113:50" pos:end="113:62">sector_offset</name><operator pos:start="113:63" pos:end="113:63">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:75"><expr pos:start="115:9" pos:end="115:74"><name pos:start="115:9" pos:end="115:22">leading_length</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <ternary pos:start="115:26" pos:end="115:74"><condition pos:start="115:26" pos:end="115:50"><expr pos:start="115:26" pos:end="115:48"><name pos:start="115:26" pos:end="115:39">leading_length</name> <operator pos:start="115:41" pos:end="115:41">&gt;</operator> <name pos:start="115:43" pos:end="115:48">length</name></expr> ?</condition><then pos:start="115:52" pos:end="115:57"> <expr pos:start="115:52" pos:end="115:57"><name pos:start="115:52" pos:end="115:57">length</name></expr> </then><else pos:start="115:59" pos:end="115:74">: <expr pos:start="115:61" pos:end="115:74"><name pos:start="115:61" pos:end="115:74">leading_length</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:41"><expr pos:start="117:9" pos:end="117:40"><name pos:start="117:9" pos:end="117:22">aligned_length</name> <operator pos:start="117:24" pos:end="117:25">-=</operator> <name pos:start="117:27" pos:end="117:40">leading_length</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:26"><expr pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:23">partial_sectors</name><operator pos:start="119:24" pos:end="119:25">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:52"><expr pos:start="125:5" pos:end="125:51"><name pos:start="125:5" pos:end="125:11">sectors</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <name pos:start="125:15" pos:end="125:28">aligned_length</name> <operator pos:start="125:30" pos:end="125:30">/</operator> <name pos:start="125:32" pos:end="125:51">VHDX_LOG_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:72"><expr pos:start="127:5" pos:end="127:71"><name pos:start="127:5" pos:end="127:19">trailing_length</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <name pos:start="127:23" pos:end="127:36">aligned_length</name> <operator pos:start="127:38" pos:end="127:38">-</operator> <operator pos:start="127:40" pos:end="127:40">(</operator><name pos:start="127:41" pos:end="127:47">sectors</name> <operator pos:start="127:49" pos:end="127:49">*</operator> <name pos:start="127:51" pos:end="127:70">VHDX_LOG_SECTOR_SIZE</name><operator pos:start="127:71" pos:end="127:71">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:24">(<expr pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:23">trailing_length</name></expr>)</condition> <block pos:start="129:26" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:26">

        <expr_stmt pos:start="131:9" pos:end="131:26"><expr pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:23">partial_sectors</name><operator pos:start="131:24" pos:end="131:25">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:31"><expr pos:start="137:5" pos:end="137:30"><name pos:start="137:5" pos:end="137:11">sectors</name> <operator pos:start="137:13" pos:end="137:14">+=</operator> <name pos:start="137:16" pos:end="137:30">partial_sectors</name></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="143:54">/* sectors is now how many sectors the data itself takes, not

     * including the header and descriptor metadata */</comment>



    <expr_stmt pos:start="147:5" pos:end="163:16"><expr pos:start="147:5" pos:end="163:15"><name pos:start="147:5" pos:end="147:11">new_hdr</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <operator pos:start="147:15" pos:end="147:15">(</operator><name pos:start="147:16" pos:end="147:33">VHDXLogEntryHeader</name><operator pos:start="147:34" pos:end="147:34">)</operator> <block pos:start="147:36" pos:end="163:15">{

                <expr pos:start="149:17" pos:end="149:57"><operator pos:start="149:17" pos:end="149:17">.</operator><name pos:start="149:18" pos:end="149:26">signature</name>           <operator pos:start="149:38" pos:end="149:38">=</operator> <name pos:start="149:40" pos:end="149:57">VHDX_LOG_SIGNATURE</name></expr>,

                <expr pos:start="151:17" pos:end="151:50"><operator pos:start="151:17" pos:end="151:17">.</operator><name pos:start="151:18" pos:end="151:21">tail</name>                <operator pos:start="151:38" pos:end="151:38">=</operator> <name pos:start="151:40" pos:end="151:50"><name pos:start="151:40" pos:end="151:40">s</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:45">log</name><operator pos:start="151:46" pos:end="151:46">.</operator><name pos:start="151:47" pos:end="151:50">tail</name></name></expr>,

                <expr pos:start="153:17" pos:end="153:54"><operator pos:start="153:17" pos:end="153:17">.</operator><name pos:start="153:18" pos:end="153:32">sequence_number</name>     <operator pos:start="153:38" pos:end="153:38">=</operator> <name pos:start="153:40" pos:end="153:54"><name pos:start="153:40" pos:end="153:40">s</name><operator pos:start="153:41" pos:end="153:42">-&gt;</operator><name pos:start="153:43" pos:end="153:45">log</name><operator pos:start="153:46" pos:end="153:46">.</operator><name pos:start="153:47" pos:end="153:54">sequence</name></name></expr>,

                <expr pos:start="155:17" pos:end="155:46"><operator pos:start="155:17" pos:end="155:17">.</operator><name pos:start="155:18" pos:end="155:33">descriptor_count</name>    <operator pos:start="155:38" pos:end="155:38">=</operator> <name pos:start="155:40" pos:end="155:46">sectors</name></expr>,

                <expr pos:start="157:17" pos:end="157:40"><operator pos:start="157:17" pos:end="157:17">.</operator><name pos:start="157:18" pos:end="157:25">reserved</name>            <operator pos:start="157:38" pos:end="157:38">=</operator> <literal type="number" pos:start="157:40" pos:end="157:40">0</literal></expr>,

                <expr pos:start="159:17" pos:end="159:63"><operator pos:start="159:17" pos:end="159:17">.</operator><name pos:start="159:18" pos:end="159:36">flushed_file_offset</name> <operator pos:start="159:38" pos:end="159:38">=</operator> <call pos:start="159:40" pos:end="159:63"><name pos:start="159:40" pos:end="159:53">bdrv_getlength</name><argument_list pos:start="159:54" pos:end="159:63">(<argument pos:start="159:55" pos:end="159:62"><expr pos:start="159:55" pos:end="159:62"><name pos:start="159:55" pos:end="159:62"><name pos:start="159:55" pos:end="159:56">bs</name><operator pos:start="159:57" pos:end="159:58">-&gt;</operator><name pos:start="159:59" pos:end="159:62">file</name></name></expr></argument>)</argument_list></call></expr>,

                <expr pos:start="161:17" pos:end="161:63"><operator pos:start="161:17" pos:end="161:17">.</operator><name pos:start="161:18" pos:end="161:33">last_file_offset</name>    <operator pos:start="161:38" pos:end="161:38">=</operator> <call pos:start="161:40" pos:end="161:63"><name pos:start="161:40" pos:end="161:53">bdrv_getlength</name><argument_list pos:start="161:54" pos:end="161:63">(<argument pos:start="161:55" pos:end="161:62"><expr pos:start="161:55" pos:end="161:62"><name pos:start="161:55" pos:end="161:62"><name pos:start="161:55" pos:end="161:56">bs</name><operator pos:start="161:57" pos:end="161:58">-&gt;</operator><name pos:start="161:59" pos:end="161:62">file</name></name></expr></argument>)</argument_list></call></expr>,

              }</block></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:40"><expr pos:start="167:5" pos:end="167:39"><name pos:start="167:5" pos:end="167:20"><name pos:start="167:5" pos:end="167:11">new_hdr</name><operator pos:start="167:12" pos:end="167:12">.</operator><name pos:start="167:13" pos:end="167:20">log_guid</name></name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:39"><name pos:start="167:24" pos:end="167:29">header</name><operator pos:start="167:30" pos:end="167:31">-&gt;</operator><name pos:start="167:32" pos:end="167:39">log_guid</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:71"><expr pos:start="171:5" pos:end="171:70"><name pos:start="171:5" pos:end="171:16">desc_sectors</name> <operator pos:start="171:18" pos:end="171:18">=</operator> <call pos:start="171:20" pos:end="171:70"><name pos:start="171:20" pos:end="171:44">vhdx_compute_desc_sectors</name><argument_list pos:start="171:45" pos:end="171:70">(<argument pos:start="171:46" pos:end="171:69"><expr pos:start="171:46" pos:end="171:69"><name pos:start="171:46" pos:end="171:69"><name pos:start="171:46" pos:end="171:52">new_hdr</name><operator pos:start="171:53" pos:end="171:53">.</operator><name pos:start="171:54" pos:end="171:69">descriptor_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:67"><expr pos:start="175:5" pos:end="175:66"><name pos:start="175:5" pos:end="175:16">total_length</name> <operator pos:start="175:18" pos:end="175:18">=</operator> <operator pos:start="175:20" pos:end="175:20">(</operator><name pos:start="175:21" pos:end="175:32">desc_sectors</name> <operator pos:start="175:34" pos:end="175:34">+</operator> <name pos:start="175:36" pos:end="175:42">sectors</name><operator pos:start="175:43" pos:end="175:43">)</operator> <operator pos:start="175:45" pos:end="175:45">*</operator> <name pos:start="175:47" pos:end="175:66">VHDX_LOG_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:40"><expr pos:start="177:5" pos:end="177:39"><name pos:start="177:5" pos:end="177:24"><name pos:start="177:5" pos:end="177:11">new_hdr</name><operator pos:start="177:12" pos:end="177:12">.</operator><name pos:start="177:13" pos:end="177:24">entry_length</name></name> <operator pos:start="177:26" pos:end="177:26">=</operator> <name pos:start="177:28" pos:end="177:39">total_length</name></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:43"><expr pos:start="181:5" pos:end="181:42"><call pos:start="181:5" pos:end="181:42"><name pos:start="181:5" pos:end="181:32">vhdx_log_entry_hdr_le_export</name><argument_list pos:start="181:33" pos:end="181:42">(<argument pos:start="181:34" pos:end="181:41"><expr pos:start="181:34" pos:end="181:41"><operator pos:start="181:34" pos:end="181:34">&amp;</operator><name pos:start="181:35" pos:end="181:41">new_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:47"><expr pos:start="185:5" pos:end="185:46"><name pos:start="185:5" pos:end="185:10">buffer</name> <operator pos:start="185:12" pos:end="185:12">=</operator> <call pos:start="185:14" pos:end="185:46"><name pos:start="185:14" pos:end="185:28">qemu_blockalign</name><argument_list pos:start="185:29" pos:end="185:46">(<argument pos:start="185:30" pos:end="185:31"><expr pos:start="185:30" pos:end="185:31"><name pos:start="185:30" pos:end="185:31">bs</name></expr></argument>, <argument pos:start="185:34" pos:end="185:45"><expr pos:start="185:34" pos:end="185:45"><name pos:start="185:34" pos:end="185:45">total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:46"><expr pos:start="187:5" pos:end="187:45"><call pos:start="187:5" pos:end="187:45"><name pos:start="187:5" pos:end="187:10">memcpy</name><argument_list pos:start="187:11" pos:end="187:45">(<argument pos:start="187:12" pos:end="187:17"><expr pos:start="187:12" pos:end="187:17"><name pos:start="187:12" pos:end="187:17">buffer</name></expr></argument>, <argument pos:start="187:20" pos:end="187:27"><expr pos:start="187:20" pos:end="187:27"><operator pos:start="187:20" pos:end="187:20">&amp;</operator><name pos:start="187:21" pos:end="187:27">new_hdr</name></expr></argument>, <argument pos:start="187:30" pos:end="187:44"><expr pos:start="187:30" pos:end="187:44"><sizeof pos:start="187:30" pos:end="187:44">sizeof<argument_list pos:start="187:36" pos:end="187:44">(<argument pos:start="187:37" pos:end="187:43"><expr pos:start="187:37" pos:end="187:43"><name pos:start="187:37" pos:end="187:43">new_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:64"><expr pos:start="191:5" pos:end="191:63"><name pos:start="191:5" pos:end="191:12">new_desc</name> <operator pos:start="191:14" pos:end="191:14">=</operator> <operator pos:start="191:16" pos:end="191:16">(</operator><name pos:start="191:17" pos:end="191:33">VHDXLogDescriptor</name> <operator pos:start="191:35" pos:end="191:35">*</operator><operator pos:start="191:36" pos:end="191:36">)</operator> <operator pos:start="191:38" pos:end="191:38">(</operator><name pos:start="191:39" pos:end="191:44">buffer</name> <operator pos:start="191:46" pos:end="191:46">+</operator> <sizeof pos:start="191:48" pos:end="191:62">sizeof<argument_list pos:start="191:54" pos:end="191:62">(<argument pos:start="191:55" pos:end="191:61"><expr pos:start="191:55" pos:end="191:61"><name pos:start="191:55" pos:end="191:61">new_hdr</name></expr></argument>)</argument_list></sizeof><operator pos:start="191:63" pos:end="191:63">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:65"><expr pos:start="193:5" pos:end="193:64"><name pos:start="193:5" pos:end="193:15">data_sector</name> <operator pos:start="193:17" pos:end="193:17">=</operator> <name pos:start="193:19" pos:end="193:24">buffer</name> <operator pos:start="193:26" pos:end="193:26">+</operator> <operator pos:start="193:28" pos:end="193:28">(</operator><name pos:start="193:29" pos:end="193:40">desc_sectors</name> <operator pos:start="193:42" pos:end="193:42">*</operator> <name pos:start="193:44" pos:end="193:63">VHDX_LOG_SECTOR_SIZE</name><operator pos:start="193:64" pos:end="193:64">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:20"><expr pos:start="195:5" pos:end="195:19"><name pos:start="195:5" pos:end="195:12">data_tmp</name> <operator pos:start="195:14" pos:end="195:14">=</operator> <name pos:start="195:16" pos:end="195:19">data</name></expr>;</expr_stmt>



    <comment type="block" pos:start="199:5" pos:end="203:21">/* All log sectors are 4KB, so for any partial sectors we must

     * merge the data with preexisting data from the final file

     * destination */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:62"><expr pos:start="205:5" pos:end="205:61"><name pos:start="205:5" pos:end="205:17">merged_sector</name> <operator pos:start="205:19" pos:end="205:19">=</operator> <call pos:start="205:21" pos:end="205:61"><name pos:start="205:21" pos:end="205:35">qemu_blockalign</name><argument_list pos:start="205:36" pos:end="205:61">(<argument pos:start="205:37" pos:end="205:38"><expr pos:start="205:37" pos:end="205:38"><name pos:start="205:37" pos:end="205:38">bs</name></expr></argument>, <argument pos:start="205:41" pos:end="205:60"><expr pos:start="205:41" pos:end="205:60"><name pos:start="205:41" pos:end="205:60">VHDX_LOG_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="209:5" pos:end="293:5">for <control pos:start="209:9" pos:end="209:33">(<init pos:start="209:10" pos:end="209:15"><expr pos:start="209:10" pos:end="209:14"><name pos:start="209:10" pos:end="209:10">i</name> <operator pos:start="209:12" pos:end="209:12">=</operator> <literal type="number" pos:start="209:14" pos:end="209:14">0</literal></expr>;</init> <condition pos:start="209:17" pos:end="209:28"><expr pos:start="209:17" pos:end="209:27"><name pos:start="209:17" pos:end="209:17">i</name> <operator pos:start="209:19" pos:end="209:19">&lt;</operator> <name pos:start="209:21" pos:end="209:27">sectors</name></expr>;</condition> <incr pos:start="209:30" pos:end="209:32"><expr pos:start="209:30" pos:end="209:32"><name pos:start="209:30" pos:end="209:30">i</name><operator pos:start="209:31" pos:end="209:32">++</operator></expr></incr>)</control> <block pos:start="209:35" pos:end="293:5">{<block_content pos:start="211:9" pos:end="291:44">

        <expr_stmt pos:start="211:9" pos:end="211:60"><expr pos:start="211:9" pos:end="211:59"><name pos:start="211:9" pos:end="211:27"><name pos:start="211:9" pos:end="211:16">new_desc</name><operator pos:start="211:17" pos:end="211:18">-&gt;</operator><name pos:start="211:19" pos:end="211:27">signature</name></name>       <operator pos:start="211:35" pos:end="211:35">=</operator> <name pos:start="211:37" pos:end="211:59">VHDX_LOG_DESC_SIGNATURE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:52"><expr pos:start="213:9" pos:end="213:51"><name pos:start="213:9" pos:end="213:33"><name pos:start="213:9" pos:end="213:16">new_desc</name><operator pos:start="213:17" pos:end="213:18">-&gt;</operator><name pos:start="213:19" pos:end="213:33">sequence_number</name></name> <operator pos:start="213:35" pos:end="213:35">=</operator> <name pos:start="213:37" pos:end="213:51"><name pos:start="213:37" pos:end="213:37">s</name><operator pos:start="213:38" pos:end="213:39">-&gt;</operator><name pos:start="213:40" pos:end="213:42">log</name><operator pos:start="213:43" pos:end="213:43">.</operator><name pos:start="213:44" pos:end="213:51">sequence</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:48"><expr pos:start="215:9" pos:end="215:47"><name pos:start="215:9" pos:end="215:29"><name pos:start="215:9" pos:end="215:16">new_desc</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:29">file_offset</name></name>     <operator pos:start="215:35" pos:end="215:35">=</operator> <name pos:start="215:37" pos:end="215:47">file_offset</name></expr>;</expr_stmt>



        <if_stmt pos:start="219:9" pos:end="269:9"><if pos:start="219:9" pos:end="239:9">if <condition pos:start="219:12" pos:end="219:37">(<expr pos:start="219:13" pos:end="219:36"><name pos:start="219:13" pos:end="219:13">i</name> <operator pos:start="219:15" pos:end="219:16">==</operator> <literal type="number" pos:start="219:18" pos:end="219:18">0</literal> <operator pos:start="219:20" pos:end="219:21">&amp;&amp;</operator> <name pos:start="219:23" pos:end="219:36">leading_length</name></expr>)</condition> <block pos:start="219:39" pos:end="239:9">{<block_content pos:start="223:13" pos:end="237:41">

            <comment type="block" pos:start="221:13" pos:end="221:59">/* partial sector at the front of the buffer */</comment>

            <expr_stmt pos:start="223:13" pos:end="225:51"><expr pos:start="223:13" pos:end="225:50"><name pos:start="223:13" pos:end="223:15">ret</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <call pos:start="223:19" pos:end="225:50"><name pos:start="223:19" pos:end="223:28">bdrv_pread</name><argument_list pos:start="223:29" pos:end="225:50">(<argument pos:start="223:30" pos:end="223:37"><expr pos:start="223:30" pos:end="223:37"><name pos:start="223:30" pos:end="223:37"><name pos:start="223:30" pos:end="223:31">bs</name><operator pos:start="223:32" pos:end="223:33">-&gt;</operator><name pos:start="223:34" pos:end="223:37">file</name></name></expr></argument>, <argument pos:start="223:40" pos:end="223:50"><expr pos:start="223:40" pos:end="223:50"><name pos:start="223:40" pos:end="223:50">file_offset</name></expr></argument>, <argument pos:start="223:53" pos:end="223:65"><expr pos:start="223:53" pos:end="223:65"><name pos:start="223:53" pos:end="223:65">merged_sector</name></expr></argument>,

                             <argument pos:start="225:30" pos:end="225:49"><expr pos:start="225:30" pos:end="225:49"><name pos:start="225:30" pos:end="225:49">VHDX_LOG_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="227:13" pos:end="231:13"><if pos:start="227:13" pos:end="231:13">if <condition pos:start="227:16" pos:end="227:24">(<expr pos:start="227:17" pos:end="227:23"><name pos:start="227:17" pos:end="227:19">ret</name> <operator pos:start="227:21" pos:end="227:21">&lt;</operator> <literal type="number" pos:start="227:23" pos:end="227:23">0</literal></expr>)</condition> <block pos:start="227:26" pos:end="231:13">{<block_content pos:start="229:17" pos:end="229:26">

                <goto pos:start="229:17" pos:end="229:26">goto <name pos:start="229:22" pos:end="229:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:76"><expr pos:start="233:13" pos:end="233:75"><call pos:start="233:13" pos:end="233:75"><name pos:start="233:13" pos:end="233:18">memcpy</name><argument_list pos:start="233:19" pos:end="233:75">(<argument pos:start="233:20" pos:end="233:48"><expr pos:start="233:20" pos:end="233:48"><name pos:start="233:20" pos:end="233:32">merged_sector</name> <operator pos:start="233:34" pos:end="233:34">+</operator> <name pos:start="233:36" pos:end="233:48">sector_offset</name></expr></argument>, <argument pos:start="233:51" pos:end="233:58"><expr pos:start="233:51" pos:end="233:58"><name pos:start="233:51" pos:end="233:58">data_tmp</name></expr></argument>, <argument pos:start="233:61" pos:end="233:74"><expr pos:start="233:61" pos:end="233:74"><name pos:start="233:61" pos:end="233:74">leading_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:43"><expr pos:start="235:13" pos:end="235:42"><name pos:start="235:13" pos:end="235:25">bytes_written</name> <operator pos:start="235:27" pos:end="235:27">=</operator> <name pos:start="235:29" pos:end="235:42">leading_length</name></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:41"><expr pos:start="237:13" pos:end="237:40"><name pos:start="237:13" pos:end="237:24">sector_write</name> <operator pos:start="237:26" pos:end="237:26">=</operator> <name pos:start="237:28" pos:end="237:40">merged_sector</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="239:11" pos:end="263:9">else if <condition pos:start="239:19" pos:end="239:55">(<expr pos:start="239:20" pos:end="239:54"><name pos:start="239:20" pos:end="239:20">i</name> <operator pos:start="239:22" pos:end="239:23">==</operator> <name pos:start="239:25" pos:end="239:31">sectors</name> <operator pos:start="239:33" pos:end="239:33">-</operator> <literal type="number" pos:start="239:35" pos:end="239:35">1</literal> <operator pos:start="239:37" pos:end="239:38">&amp;&amp;</operator> <name pos:start="239:40" pos:end="239:54">trailing_length</name></expr>)</condition> <block pos:start="239:57" pos:end="263:9">{<block_content pos:start="243:13" pos:end="261:41">

            <comment type="block" pos:start="241:13" pos:end="241:57">/* partial sector at the end of the buffer */</comment>

            <expr_stmt pos:start="243:13" pos:end="249:68"><expr pos:start="243:13" pos:end="249:67"><name pos:start="243:13" pos:end="243:15">ret</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <call pos:start="243:19" pos:end="249:67"><name pos:start="243:19" pos:end="243:28">bdrv_pread</name><argument_list pos:start="243:29" pos:end="249:67">(<argument pos:start="243:30" pos:end="243:37"><expr pos:start="243:30" pos:end="243:37"><name pos:start="243:30" pos:end="243:37"><name pos:start="243:30" pos:end="243:31">bs</name><operator pos:start="243:32" pos:end="243:33">-&gt;</operator><name pos:start="243:34" pos:end="243:37">file</name></name></expr></argument>,

                            <argument pos:start="245:29" pos:end="245:39"><expr pos:start="245:29" pos:end="245:39"><name pos:start="245:29" pos:end="245:39">file_offset</name></expr></argument>,

                            <argument pos:start="247:29" pos:end="247:59"><expr pos:start="247:29" pos:end="247:59"><name pos:start="247:29" pos:end="247:41">merged_sector</name> <operator pos:start="247:43" pos:end="247:43">+</operator> <name pos:start="247:45" pos:end="247:59">trailing_length</name></expr></argument>,

                            <argument pos:start="249:29" pos:end="249:66"><expr pos:start="249:29" pos:end="249:66"><name pos:start="249:29" pos:end="249:48">VHDX_LOG_SECTOR_SIZE</name> <operator pos:start="249:50" pos:end="249:50">-</operator> <name pos:start="249:52" pos:end="249:66">trailing_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="251:13" pos:end="255:13"><if pos:start="251:13" pos:end="255:13">if <condition pos:start="251:16" pos:end="251:24">(<expr pos:start="251:17" pos:end="251:23"><name pos:start="251:17" pos:end="251:19">ret</name> <operator pos:start="251:21" pos:end="251:21">&lt;</operator> <literal type="number" pos:start="251:23" pos:end="251:23">0</literal></expr>)</condition> <block pos:start="251:26" pos:end="255:13">{<block_content pos:start="253:17" pos:end="253:26">

                <goto pos:start="253:17" pos:end="253:26">goto <name pos:start="253:22" pos:end="253:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:61"><expr pos:start="257:13" pos:end="257:60"><call pos:start="257:13" pos:end="257:60"><name pos:start="257:13" pos:end="257:18">memcpy</name><argument_list pos:start="257:19" pos:end="257:60">(<argument pos:start="257:20" pos:end="257:32"><expr pos:start="257:20" pos:end="257:32"><name pos:start="257:20" pos:end="257:32">merged_sector</name></expr></argument>, <argument pos:start="257:35" pos:end="257:42"><expr pos:start="257:35" pos:end="257:42"><name pos:start="257:35" pos:end="257:42">data_tmp</name></expr></argument>, <argument pos:start="257:45" pos:end="257:59"><expr pos:start="257:45" pos:end="257:59"><name pos:start="257:45" pos:end="257:59">trailing_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:44"><expr pos:start="259:13" pos:end="259:43"><name pos:start="259:13" pos:end="259:25">bytes_written</name> <operator pos:start="259:27" pos:end="259:27">=</operator> <name pos:start="259:29" pos:end="259:43">trailing_length</name></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:41"><expr pos:start="261:13" pos:end="261:40"><name pos:start="261:13" pos:end="261:24">sector_write</name> <operator pos:start="261:26" pos:end="261:26">=</operator> <name pos:start="261:28" pos:end="261:40">merged_sector</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="263:11" pos:end="269:9">else <block pos:start="263:16" pos:end="269:9">{<block_content pos:start="265:13" pos:end="267:36">

            <expr_stmt pos:start="265:13" pos:end="265:49"><expr pos:start="265:13" pos:end="265:48"><name pos:start="265:13" pos:end="265:25">bytes_written</name> <operator pos:start="265:27" pos:end="265:27">=</operator> <name pos:start="265:29" pos:end="265:48">VHDX_LOG_SECTOR_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:36"><expr pos:start="267:13" pos:end="267:35"><name pos:start="267:13" pos:end="267:24">sector_write</name> <operator pos:start="267:26" pos:end="267:26">=</operator> <name pos:start="267:28" pos:end="267:35">data_tmp</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="273:9" pos:end="277:24">/* populate the raw sector data into the proper structures,

         * as well as update the descriptor, and convert to proper

         * endianness */</comment>

        <expr_stmt pos:start="279:9" pos:end="281:51"><expr pos:start="279:9" pos:end="281:50"><call pos:start="279:9" pos:end="281:50"><name pos:start="279:9" pos:end="279:33">vhdx_log_raw_to_le_sector</name><argument_list pos:start="279:34" pos:end="281:50">(<argument pos:start="279:35" pos:end="279:42"><expr pos:start="279:35" pos:end="279:42"><name pos:start="279:35" pos:end="279:42">new_desc</name></expr></argument>, <argument pos:start="279:45" pos:end="279:55"><expr pos:start="279:45" pos:end="279:55"><name pos:start="279:45" pos:end="279:55">data_sector</name></expr></argument>, <argument pos:start="279:58" pos:end="279:69"><expr pos:start="279:58" pos:end="279:69"><name pos:start="279:58" pos:end="279:69">sector_write</name></expr></argument>,

                                  <argument pos:start="281:35" pos:end="281:49"><expr pos:start="281:35" pos:end="281:49"><name pos:start="281:35" pos:end="281:49"><name pos:start="281:35" pos:end="281:35">s</name><operator pos:start="281:36" pos:end="281:37">-&gt;</operator><name pos:start="281:38" pos:end="281:40">log</name><operator pos:start="281:41" pos:end="281:41">.</operator><name pos:start="281:42" pos:end="281:49">sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="285:9" pos:end="285:34"><expr pos:start="285:9" pos:end="285:33"><name pos:start="285:9" pos:end="285:16">data_tmp</name> <operator pos:start="285:18" pos:end="285:19">+=</operator> <name pos:start="285:21" pos:end="285:33">bytes_written</name></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:22"><expr pos:start="287:9" pos:end="287:21"><name pos:start="287:9" pos:end="287:19">data_sector</name><operator pos:start="287:20" pos:end="287:21">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:19"><expr pos:start="289:9" pos:end="289:18"><name pos:start="289:9" pos:end="289:16">new_desc</name><operator pos:start="289:17" pos:end="289:18">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:44"><expr pos:start="291:9" pos:end="291:43"><name pos:start="291:9" pos:end="291:19">file_offset</name> <operator pos:start="291:21" pos:end="291:22">+=</operator> <name pos:start="291:24" pos:end="291:43">VHDX_LOG_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="297:5" pos:end="299:26">/* checksum covers entire entry, from the log header through the

     * last data sector */</comment>

    <expr_stmt pos:start="301:5" pos:end="303:65"><expr pos:start="301:5" pos:end="303:64"><call pos:start="301:5" pos:end="303:64"><name pos:start="301:5" pos:end="301:24">vhdx_update_checksum</name><argument_list pos:start="301:25" pos:end="303:64">(<argument pos:start="301:26" pos:end="301:31"><expr pos:start="301:26" pos:end="301:31"><name pos:start="301:26" pos:end="301:31">buffer</name></expr></argument>, <argument pos:start="301:34" pos:end="301:45"><expr pos:start="301:34" pos:end="301:45"><name pos:start="301:34" pos:end="301:45">total_length</name></expr></argument>,

                         <argument pos:start="303:26" pos:end="303:63"><expr pos:start="303:26" pos:end="303:63"><call pos:start="303:26" pos:end="303:63"><name pos:start="303:26" pos:end="303:33">offsetof</name><argument_list pos:start="303:34" pos:end="303:63">(<argument pos:start="303:35" pos:end="303:52"><expr pos:start="303:35" pos:end="303:52"><name pos:start="303:35" pos:end="303:52">VHDXLogEntryHeader</name></expr></argument>, <argument pos:start="303:55" pos:end="303:62"><expr pos:start="303:55" pos:end="303:62"><name pos:start="303:55" pos:end="303:62">checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:43"><expr pos:start="305:5" pos:end="305:42"><call pos:start="305:5" pos:end="305:42"><name pos:start="305:5" pos:end="305:16">cpu_to_le32s</name><argument_list pos:start="305:17" pos:end="305:42">(<argument pos:start="305:18" pos:end="305:41"><expr pos:start="305:18" pos:end="305:41"><operator pos:start="305:18" pos:end="305:18">(</operator><name pos:start="305:19" pos:end="305:26">uint32_t</name> <operator pos:start="305:28" pos:end="305:28">*</operator><operator pos:start="305:29" pos:end="305:29">)</operator><operator pos:start="305:30" pos:end="305:30">(</operator><name pos:start="305:31" pos:end="305:36">buffer</name> <operator pos:start="305:38" pos:end="305:38">+</operator> <literal type="number" pos:start="305:40" pos:end="305:40">4</literal><operator pos:start="305:41" pos:end="305:41">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="309:5" pos:end="309:30">/* now write to the log */</comment>

    <expr_stmt pos:start="311:5" pos:end="313:51"><expr pos:start="311:5" pos:end="313:50"><call pos:start="311:5" pos:end="313:50"><name pos:start="311:5" pos:end="311:26">vhdx_log_write_sectors</name><argument_list pos:start="311:27" pos:end="313:50">(<argument pos:start="311:28" pos:end="311:29"><expr pos:start="311:28" pos:end="311:29"><name pos:start="311:28" pos:end="311:29">bs</name></expr></argument>, <argument pos:start="311:32" pos:end="311:38"><expr pos:start="311:32" pos:end="311:38"><operator pos:start="311:32" pos:end="311:32">&amp;</operator><name pos:start="311:33" pos:end="311:38"><name pos:start="311:33" pos:end="311:33">s</name><operator pos:start="311:34" pos:end="311:35">-&gt;</operator><name pos:start="311:36" pos:end="311:38">log</name></name></expr></argument>, <argument pos:start="311:41" pos:end="311:56"><expr pos:start="311:41" pos:end="311:56"><operator pos:start="311:41" pos:end="311:41">&amp;</operator><name pos:start="311:42" pos:end="311:56">sectors_written</name></expr></argument>, <argument pos:start="311:59" pos:end="311:64"><expr pos:start="311:59" pos:end="311:64"><name pos:start="311:59" pos:end="311:64">buffer</name></expr></argument>,

                           <argument pos:start="313:28" pos:end="313:49"><expr pos:start="313:28" pos:end="313:49"><name pos:start="313:28" pos:end="313:39">desc_sectors</name> <operator pos:start="313:41" pos:end="313:41">+</operator> <name pos:start="313:43" pos:end="313:49">sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="315:5" pos:end="319:5"><if pos:start="315:5" pos:end="319:5">if <condition pos:start="315:8" pos:end="315:16">(<expr pos:start="315:9" pos:end="315:15"><name pos:start="315:9" pos:end="315:11">ret</name> <operator pos:start="315:13" pos:end="315:13">&lt;</operator> <literal type="number" pos:start="315:15" pos:end="315:15">0</literal></expr>)</condition> <block pos:start="315:18" pos:end="319:5">{<block_content pos:start="317:9" pos:end="317:18">

        <goto pos:start="317:9" pos:end="317:18">goto <name pos:start="317:14" pos:end="317:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="323:5" pos:end="331:5"><if pos:start="323:5" pos:end="331:5">if <condition pos:start="323:8" pos:end="323:50">(<expr pos:start="323:9" pos:end="323:49"><name pos:start="323:9" pos:end="323:23">sectors_written</name> <operator pos:start="323:25" pos:end="323:26">!=</operator> <name pos:start="323:28" pos:end="323:39">desc_sectors</name> <operator pos:start="323:41" pos:end="323:41">+</operator> <name pos:start="323:43" pos:end="323:49">sectors</name></expr>)</condition> <block pos:start="323:52" pos:end="331:5">{<block_content pos:start="327:9" pos:end="329:18">

        <comment type="block" pos:start="325:9" pos:end="325:61">/* instead of failing, we could flush the log here */</comment>

        <expr_stmt pos:start="327:9" pos:end="327:22"><expr pos:start="327:9" pos:end="327:21"><name pos:start="327:9" pos:end="327:11">ret</name> <operator pos:start="327:13" pos:end="327:13">=</operator> <operator pos:start="327:15" pos:end="327:15">-</operator><name pos:start="327:16" pos:end="327:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="329:9" pos:end="329:18">goto <name pos:start="329:14" pos:end="329:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="335:5" pos:end="335:22"><expr pos:start="335:5" pos:end="335:21"><name pos:start="335:5" pos:end="335:19"><name pos:start="335:5" pos:end="335:5">s</name><operator pos:start="335:6" pos:end="335:7">-&gt;</operator><name pos:start="335:8" pos:end="335:10">log</name><operator pos:start="335:11" pos:end="335:11">.</operator><name pos:start="335:12" pos:end="335:19">sequence</name></name><operator pos:start="335:20" pos:end="335:21">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="337:5" pos:end="337:24">/* write new tail */</comment>

    <expr_stmt pos:start="339:5" pos:end="339:31"><expr pos:start="339:5" pos:end="339:30"><name pos:start="339:5" pos:end="339:15"><name pos:start="339:5" pos:end="339:5">s</name><operator pos:start="339:6" pos:end="339:7">-&gt;</operator><name pos:start="339:8" pos:end="339:10">log</name><operator pos:start="339:11" pos:end="339:11">.</operator><name pos:start="339:12" pos:end="339:15">tail</name></name> <operator pos:start="339:17" pos:end="339:17">=</operator> <name pos:start="339:19" pos:end="339:30"><name pos:start="339:19" pos:end="339:19">s</name><operator pos:start="339:20" pos:end="339:21">-&gt;</operator><name pos:start="339:22" pos:end="339:24">log</name><operator pos:start="339:25" pos:end="339:25">.</operator><name pos:start="339:26" pos:end="339:30">write</name></name></expr>;</expr_stmt>



<label pos:start="343:1" pos:end="343:5"><name pos:start="343:1" pos:end="343:4">exit</name>:</label>

    <expr_stmt pos:start="345:5" pos:end="345:23"><expr pos:start="345:5" pos:end="345:22"><call pos:start="345:5" pos:end="345:22"><name pos:start="345:5" pos:end="345:14">qemu_vfree</name><argument_list pos:start="345:15" pos:end="345:22">(<argument pos:start="345:16" pos:end="345:21"><expr pos:start="345:16" pos:end="345:21"><name pos:start="345:16" pos:end="345:21">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:30"><expr pos:start="347:5" pos:end="347:29"><call pos:start="347:5" pos:end="347:29"><name pos:start="347:5" pos:end="347:14">qemu_vfree</name><argument_list pos:start="347:15" pos:end="347:29">(<argument pos:start="347:16" pos:end="347:28"><expr pos:start="347:16" pos:end="347:28"><name pos:start="347:16" pos:end="347:28">merged_sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="349:5" pos:end="349:15">return <expr pos:start="349:12" pos:end="349:14"><name pos:start="349:12" pos:end="349:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
