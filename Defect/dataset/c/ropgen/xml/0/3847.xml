<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3847.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:28">spapr_build_fdt</name><parameter_list pos:start="1:29" pos:end="5:46">(<parameter pos:start="1:30" pos:end="1:53"><decl pos:start="1:30" pos:end="1:53"><type pos:start="1:30" pos:end="1:53"><name pos:start="1:30" pos:end="1:46">sPAPRMachineState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">spapr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:35">hwaddr</name></type> <name pos:start="3:37" pos:end="3:45">rtas_addr</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:45"><decl pos:start="5:30" pos:end="5:45"><type pos:start="5:30" pos:end="5:45"><name pos:start="5:30" pos:end="5:35">hwaddr</name></type> <name pos:start="5:37" pos:end="5:45">rtas_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="249:1">{<block_content pos:start="9:5" pos:end="247:15">

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:25">machine</name> <init pos:start="9:27" pos:end="9:55">= <expr pos:start="9:29" pos:end="9:55"><call pos:start="9:29" pos:end="9:55"><name pos:start="9:29" pos:end="9:35">MACHINE</name><argument_list pos:start="9:36" pos:end="9:55">(<argument pos:start="9:37" pos:end="9:54"><expr pos:start="9:37" pos:end="9:54"><call pos:start="9:37" pos:end="9:54"><name pos:start="9:37" pos:end="9:52">qdev_get_machine</name><argument_list pos:start="9:53" pos:end="9:54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MachineClass</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mc</name> <init pos:start="11:22" pos:end="11:49">= <expr pos:start="11:24" pos:end="11:49"><call pos:start="11:24" pos:end="11:49"><name pos:start="11:24" pos:end="11:40">MACHINE_GET_CLASS</name><argument_list pos:start="11:41" pos:end="11:49">(<argument pos:start="11:42" pos:end="11:48"><expr pos:start="11:42" pos:end="11:48"><name pos:start="11:42" pos:end="11:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:62"><decl pos:start="13:5" pos:end="13:61"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">sPAPRMachineClass</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:26">smc</name> <init pos:start="13:28" pos:end="13:61">= <expr pos:start="13:30" pos:end="13:61"><call pos:start="13:30" pos:end="13:61"><name pos:start="13:30" pos:end="13:52">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="13:53" pos:end="13:61">(<argument pos:start="13:54" pos:end="13:60"><expr pos:start="13:54" pos:end="13:60"><name pos:start="13:54" pos:end="13:60">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">sPAPRPHBState</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:22">phb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:13">buf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:7">fdt</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:33"><name pos:start="25:11" pos:end="25:19">g_malloc0</name><argument_list pos:start="25:20" pos:end="25:33">(<argument pos:start="25:21" pos:end="25:32"><expr pos:start="25:21" pos:end="25:32"><name pos:start="25:21" pos:end="25:32">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:53"><expr pos:start="27:5" pos:end="27:52"><call pos:start="27:5" pos:end="27:52"><name pos:start="27:5" pos:end="27:8">_FDT</name><argument_list pos:start="27:9" pos:end="27:52">(<argument pos:start="27:10" pos:end="27:51"><expr pos:start="27:10" pos:end="27:51"><operator pos:start="27:10" pos:end="27:10">(</operator><call pos:start="27:11" pos:end="27:50"><name pos:start="27:11" pos:end="27:31">fdt_create_empty_tree</name><argument_list pos:start="27:32" pos:end="27:50">(<argument pos:start="27:33" pos:end="27:35"><expr pos:start="27:33" pos:end="27:35"><name pos:start="27:33" pos:end="27:35">fdt</name></expr></argument>, <argument pos:start="27:38" pos:end="27:49"><expr pos:start="27:38" pos:end="27:49"><name pos:start="27:38" pos:end="27:49">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="27:51" pos:end="27:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:19">/* Root node */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:60"><expr pos:start="33:5" pos:end="33:59"><call pos:start="33:5" pos:end="33:59"><name pos:start="33:5" pos:end="33:8">_FDT</name><argument_list pos:start="33:9" pos:end="33:59">(<argument pos:start="33:10" pos:end="33:58"><expr pos:start="33:10" pos:end="33:58"><call pos:start="33:10" pos:end="33:58"><name pos:start="33:10" pos:end="33:27">fdt_setprop_string</name><argument_list pos:start="33:28" pos:end="33:58">(<argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:31">fdt</name></expr></argument>, <argument pos:start="33:34" pos:end="33:34"><expr pos:start="33:34" pos:end="33:34"><literal type="number" pos:start="33:34" pos:end="33:34">0</literal></expr></argument>, <argument pos:start="33:37" pos:end="33:49"><expr pos:start="33:37" pos:end="33:49"><literal type="string" pos:start="33:37" pos:end="33:49">"device_type"</literal></expr></argument>, <argument pos:start="33:52" pos:end="33:57"><expr pos:start="33:52" pos:end="33:57"><literal type="string" pos:start="33:52" pos:end="33:57">"chrp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:80"><expr pos:start="35:5" pos:end="35:79"><call pos:start="35:5" pos:end="35:79"><name pos:start="35:5" pos:end="35:8">_FDT</name><argument_list pos:start="35:9" pos:end="35:79">(<argument pos:start="35:10" pos:end="35:78"><expr pos:start="35:10" pos:end="35:78"><call pos:start="35:10" pos:end="35:78"><name pos:start="35:10" pos:end="35:27">fdt_setprop_string</name><argument_list pos:start="35:28" pos:end="35:78">(<argument pos:start="35:29" pos:end="35:31"><expr pos:start="35:29" pos:end="35:31"><name pos:start="35:29" pos:end="35:31">fdt</name></expr></argument>, <argument pos:start="35:34" pos:end="35:34"><expr pos:start="35:34" pos:end="35:34"><literal type="number" pos:start="35:34" pos:end="35:34">0</literal></expr></argument>, <argument pos:start="35:37" pos:end="35:43"><expr pos:start="35:37" pos:end="35:43"><literal type="string" pos:start="35:37" pos:end="35:43">"model"</literal></expr></argument>, <argument pos:start="35:46" pos:end="35:77"><expr pos:start="35:46" pos:end="35:77"><literal type="string" pos:start="35:46" pos:end="35:77">"IBM pSeries (emulated by qemu)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:67"><expr pos:start="37:5" pos:end="37:66"><call pos:start="37:5" pos:end="37:66"><name pos:start="37:5" pos:end="37:8">_FDT</name><argument_list pos:start="37:9" pos:end="37:66">(<argument pos:start="37:10" pos:end="37:65"><expr pos:start="37:10" pos:end="37:65"><call pos:start="37:10" pos:end="37:65"><name pos:start="37:10" pos:end="37:27">fdt_setprop_string</name><argument_list pos:start="37:28" pos:end="37:65">(<argument pos:start="37:29" pos:end="37:31"><expr pos:start="37:29" pos:end="37:31"><name pos:start="37:29" pos:end="37:31">fdt</name></expr></argument>, <argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><literal type="number" pos:start="37:34" pos:end="37:34">0</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:48"><expr pos:start="37:37" pos:end="37:48"><literal type="string" pos:start="37:37" pos:end="37:48">"compatible"</literal></expr></argument>, <argument pos:start="37:51" pos:end="37:64"><expr pos:start="37:51" pos:end="37:64"><literal type="string" pos:start="37:51" pos:end="37:64">"qemu,pseries"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="47:7">/*

     * Add info to guest to indentify which host is it being run on

     * and what is the uuid of the guest

     */</comment>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:36">(<expr pos:start="49:9" pos:end="49:35"><call pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:29">kvmppc_get_host_model</name><argument_list pos:start="49:30" pos:end="49:35">(<argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><operator pos:start="49:31" pos:end="49:31">&amp;</operator><name pos:start="49:32" pos:end="49:34">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:38" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:20">

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><call pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:12">_FDT</name><argument_list pos:start="51:13" pos:end="51:59">(<argument pos:start="51:14" pos:end="51:58"><expr pos:start="51:14" pos:end="51:58"><call pos:start="51:14" pos:end="51:58"><name pos:start="51:14" pos:end="51:31">fdt_setprop_string</name><argument_list pos:start="51:32" pos:end="51:58">(<argument pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:35">fdt</name></expr></argument>, <argument pos:start="51:38" pos:end="51:38"><expr pos:start="51:38" pos:end="51:38"><literal type="number" pos:start="51:38" pos:end="51:38">0</literal></expr></argument>, <argument pos:start="51:41" pos:end="51:52"><expr pos:start="51:41" pos:end="51:52"><literal type="string" pos:start="51:41" pos:end="51:52">"host-model"</literal></expr></argument>, <argument pos:start="51:55" pos:end="51:57"><expr pos:start="51:55" pos:end="51:57"><name pos:start="51:55" pos:end="51:57">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:20"><expr pos:start="53:9" pos:end="53:19"><call pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:14">g_free</name><argument_list pos:start="53:15" pos:end="53:19">(<argument pos:start="53:16" pos:end="53:18"><expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:37">(<expr pos:start="57:9" pos:end="57:36"><call pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:30">kvmppc_get_host_serial</name><argument_list pos:start="57:31" pos:end="57:36">(<argument pos:start="57:32" pos:end="57:35"><expr pos:start="57:32" pos:end="57:35"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:35">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:39" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:20">

        <expr_stmt pos:start="59:9" pos:end="59:61"><expr pos:start="59:9" pos:end="59:60"><call pos:start="59:9" pos:end="59:60"><name pos:start="59:9" pos:end="59:12">_FDT</name><argument_list pos:start="59:13" pos:end="59:60">(<argument pos:start="59:14" pos:end="59:59"><expr pos:start="59:14" pos:end="59:59"><call pos:start="59:14" pos:end="59:59"><name pos:start="59:14" pos:end="59:31">fdt_setprop_string</name><argument_list pos:start="59:32" pos:end="59:59">(<argument pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:35">fdt</name></expr></argument>, <argument pos:start="59:38" pos:end="59:38"><expr pos:start="59:38" pos:end="59:38"><literal type="number" pos:start="59:38" pos:end="59:38">0</literal></expr></argument>, <argument pos:start="59:41" pos:end="59:53"><expr pos:start="59:41" pos:end="59:53"><literal type="string" pos:start="59:41" pos:end="59:53">"host-serial"</literal></expr></argument>, <argument pos:start="59:56" pos:end="59:58"><expr pos:start="59:56" pos:end="59:58"><name pos:start="59:56" pos:end="59:58">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:20"><expr pos:start="61:9" pos:end="61:19"><call pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:14">g_free</name><argument_list pos:start="61:15" pos:end="61:19">(<argument pos:start="61:16" pos:end="61:18"><expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:7">buf</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:46"><name pos:start="67:11" pos:end="67:34">qemu_uuid_unparse_strdup</name><argument_list pos:start="67:35" pos:end="67:46">(<argument pos:start="67:36" pos:end="67:45"><expr pos:start="67:36" pos:end="67:45"><operator pos:start="67:36" pos:end="67:36">&amp;</operator><name pos:start="67:37" pos:end="67:45">qemu_uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:53"><expr pos:start="71:5" pos:end="71:52"><call pos:start="71:5" pos:end="71:52"><name pos:start="71:5" pos:end="71:8">_FDT</name><argument_list pos:start="71:9" pos:end="71:52">(<argument pos:start="71:10" pos:end="71:51"><expr pos:start="71:10" pos:end="71:51"><call pos:start="71:10" pos:end="71:51"><name pos:start="71:10" pos:end="71:27">fdt_setprop_string</name><argument_list pos:start="71:28" pos:end="71:51">(<argument pos:start="71:29" pos:end="71:31"><expr pos:start="71:29" pos:end="71:31"><name pos:start="71:29" pos:end="71:31">fdt</name></expr></argument>, <argument pos:start="71:34" pos:end="71:34"><expr pos:start="71:34" pos:end="71:34"><literal type="number" pos:start="71:34" pos:end="71:34">0</literal></expr></argument>, <argument pos:start="71:37" pos:end="71:45"><expr pos:start="71:37" pos:end="71:45"><literal type="string" pos:start="71:37" pos:end="71:45">"vm,uuid"</literal></expr></argument>, <argument pos:start="71:48" pos:end="71:50"><expr pos:start="71:48" pos:end="71:50"><name pos:start="71:48" pos:end="71:50">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:22">(<expr pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:21">qemu_uuid_set</name></expr>)</condition> <block pos:start="73:24" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:59">

        <expr_stmt pos:start="75:9" pos:end="75:59"><expr pos:start="75:9" pos:end="75:58"><call pos:start="75:9" pos:end="75:58"><name pos:start="75:9" pos:end="75:12">_FDT</name><argument_list pos:start="75:13" pos:end="75:58">(<argument pos:start="75:14" pos:end="75:57"><expr pos:start="75:14" pos:end="75:57"><call pos:start="75:14" pos:end="75:57"><name pos:start="75:14" pos:end="75:31">fdt_setprop_string</name><argument_list pos:start="75:32" pos:end="75:57">(<argument pos:start="75:33" pos:end="75:35"><expr pos:start="75:33" pos:end="75:35"><name pos:start="75:33" pos:end="75:35">fdt</name></expr></argument>, <argument pos:start="75:38" pos:end="75:38"><expr pos:start="75:38" pos:end="75:38"><literal type="number" pos:start="75:38" pos:end="75:38">0</literal></expr></argument>, <argument pos:start="75:41" pos:end="75:51"><expr pos:start="75:41" pos:end="75:51"><literal type="string" pos:start="75:41" pos:end="75:51">"system-id"</literal></expr></argument>, <argument pos:start="75:54" pos:end="75:56"><expr pos:start="75:54" pos:end="75:56"><name pos:start="75:54" pos:end="75:56">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:16"><expr pos:start="79:5" pos:end="79:15"><call pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:10">g_free</name><argument_list pos:start="79:11" pos:end="79:15">(<argument pos:start="79:12" pos:end="79:14"><expr pos:start="79:12" pos:end="79:14"><name pos:start="79:12" pos:end="79:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:27">(<expr pos:start="83:9" pos:end="83:26"><call pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:24">qemu_get_vm_name</name><argument_list pos:start="83:25" pos:end="83:26">()</argument_list></call></expr>)</condition> <block pos:start="83:29" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:53">

        <expr_stmt pos:start="85:9" pos:end="87:53"><expr pos:start="85:9" pos:end="87:52"><call pos:start="85:9" pos:end="87:52"><name pos:start="85:9" pos:end="85:12">_FDT</name><argument_list pos:start="85:13" pos:end="87:52">(<argument pos:start="85:14" pos:end="87:51"><expr pos:start="85:14" pos:end="87:51"><call pos:start="85:14" pos:end="87:51"><name pos:start="85:14" pos:end="85:31">fdt_setprop_string</name><argument_list pos:start="85:32" pos:end="87:51">(<argument pos:start="85:33" pos:end="85:35"><expr pos:start="85:33" pos:end="85:35"><name pos:start="85:33" pos:end="85:35">fdt</name></expr></argument>, <argument pos:start="85:38" pos:end="85:38"><expr pos:start="85:38" pos:end="85:38"><literal type="number" pos:start="85:38" pos:end="85:38">0</literal></expr></argument>, <argument pos:start="85:41" pos:end="85:60"><expr pos:start="85:41" pos:end="85:60"><literal type="string" pos:start="85:41" pos:end="85:60">"ibm,partition-name"</literal></expr></argument>,

                                <argument pos:start="87:33" pos:end="87:50"><expr pos:start="87:33" pos:end="87:50"><call pos:start="87:33" pos:end="87:50"><name pos:start="87:33" pos:end="87:48">qemu_get_vm_name</name><argument_list pos:start="87:49" pos:end="87:50">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:56"><expr pos:start="93:5" pos:end="93:55"><call pos:start="93:5" pos:end="93:55"><name pos:start="93:5" pos:end="93:8">_FDT</name><argument_list pos:start="93:9" pos:end="93:55">(<argument pos:start="93:10" pos:end="93:54"><expr pos:start="93:10" pos:end="93:54"><call pos:start="93:10" pos:end="93:54"><name pos:start="93:10" pos:end="93:25">fdt_setprop_cell</name><argument_list pos:start="93:26" pos:end="93:54">(<argument pos:start="93:27" pos:end="93:29"><expr pos:start="93:27" pos:end="93:29"><name pos:start="93:27" pos:end="93:29">fdt</name></expr></argument>, <argument pos:start="93:32" pos:end="93:32"><expr pos:start="93:32" pos:end="93:32"><literal type="number" pos:start="93:32" pos:end="93:32">0</literal></expr></argument>, <argument pos:start="93:35" pos:end="93:50"><expr pos:start="93:35" pos:end="93:50"><literal type="string" pos:start="93:35" pos:end="93:50">"#address-cells"</literal></expr></argument>, <argument pos:start="93:53" pos:end="93:53"><expr pos:start="93:53" pos:end="93:53"><literal type="number" pos:start="93:53" pos:end="93:53">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:53"><expr pos:start="95:5" pos:end="95:52"><call pos:start="95:5" pos:end="95:52"><name pos:start="95:5" pos:end="95:8">_FDT</name><argument_list pos:start="95:9" pos:end="95:52">(<argument pos:start="95:10" pos:end="95:51"><expr pos:start="95:10" pos:end="95:51"><call pos:start="95:10" pos:end="95:51"><name pos:start="95:10" pos:end="95:25">fdt_setprop_cell</name><argument_list pos:start="95:26" pos:end="95:51">(<argument pos:start="95:27" pos:end="95:29"><expr pos:start="95:27" pos:end="95:29"><name pos:start="95:27" pos:end="95:29">fdt</name></expr></argument>, <argument pos:start="95:32" pos:end="95:32"><expr pos:start="95:32" pos:end="95:32"><literal type="number" pos:start="95:32" pos:end="95:32">0</literal></expr></argument>, <argument pos:start="95:35" pos:end="95:47"><expr pos:start="95:35" pos:end="95:47"><literal type="string" pos:start="95:35" pos:end="95:47">"#size-cells"</literal></expr></argument>, <argument pos:start="95:50" pos:end="95:50"><expr pos:start="95:50" pos:end="95:50"><literal type="number" pos:start="95:50" pos:end="95:50">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:31">/* /interrupt controller */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:50"><expr pos:start="101:5" pos:end="101:49"><call pos:start="101:5" pos:end="101:49"><name pos:start="101:5" pos:end="101:17">spapr_dt_xics</name><argument_list pos:start="101:18" pos:end="101:49">(<argument pos:start="101:19" pos:end="101:29"><expr pos:start="101:19" pos:end="101:29"><name pos:start="101:19" pos:end="101:29"><name pos:start="101:19" pos:end="101:23">spapr</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:29">xics</name></name></expr></argument>, <argument pos:start="101:32" pos:end="101:34"><expr pos:start="101:32" pos:end="101:34"><name pos:start="101:32" pos:end="101:34">fdt</name></expr></argument>, <argument pos:start="101:37" pos:end="101:48"><expr pos:start="101:37" pos:end="101:48"><name pos:start="101:37" pos:end="101:48">PHANDLE_XICP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:44"><expr pos:start="105:5" pos:end="105:43"><name pos:start="105:5" pos:end="105:7">ret</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:43"><name pos:start="105:11" pos:end="105:31">spapr_populate_memory</name><argument_list pos:start="105:32" pos:end="105:43">(<argument pos:start="105:33" pos:end="105:37"><expr pos:start="105:33" pos:end="105:37"><name pos:start="105:33" pos:end="105:37">spapr</name></expr></argument>, <argument pos:start="105:40" pos:end="105:42"><expr pos:start="105:40" pos:end="105:42"><name pos:start="105:40" pos:end="105:42">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:16">(<expr pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">&lt;</operator> <literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>)</condition> <block pos:start="107:18" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:16">

        <expr_stmt pos:start="109:9" pos:end="109:59"><expr pos:start="109:9" pos:end="109:58"><call pos:start="109:9" pos:end="109:58"><name pos:start="109:9" pos:end="109:20">error_report</name><argument_list pos:start="109:21" pos:end="109:58">(<argument pos:start="109:22" pos:end="109:57"><expr pos:start="109:22" pos:end="109:57"><literal type="string" pos:start="109:22" pos:end="109:57">"couldn't setup memory nodes in fdt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:16"><expr pos:start="111:9" pos:end="111:15"><call pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:12">exit</name><argument_list pos:start="111:13" pos:end="111:15">(<argument pos:start="111:14" pos:end="111:14"><expr pos:start="111:14" pos:end="111:14"><literal type="number" pos:start="111:14" pos:end="111:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:18">/* /vdevice */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:42"><expr pos:start="119:5" pos:end="119:41"><call pos:start="119:5" pos:end="119:41"><name pos:start="119:5" pos:end="119:20">spapr_dt_vdevice</name><argument_list pos:start="119:21" pos:end="119:41">(<argument pos:start="119:22" pos:end="119:35"><expr pos:start="119:22" pos:end="119:35"><name pos:start="119:22" pos:end="119:35"><name pos:start="119:22" pos:end="119:26">spapr</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:35">vio_bus</name></name></expr></argument>, <argument pos:start="119:38" pos:end="119:40"><expr pos:start="119:38" pos:end="119:40"><name pos:start="119:38" pos:end="119:40">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="135:5"><if pos:start="123:5" pos:end="135:5">if <condition pos:start="123:8" pos:end="123:59">(<expr pos:start="123:9" pos:end="123:58"><call pos:start="123:9" pos:end="123:58"><name pos:start="123:9" pos:end="123:32">object_resolve_path_type</name><argument_list pos:start="123:33" pos:end="123:58">(<argument pos:start="123:34" pos:end="123:35"><expr pos:start="123:34" pos:end="123:35"><literal type="string" pos:start="123:34" pos:end="123:35">""</literal></expr></argument>, <argument pos:start="123:38" pos:end="123:51"><expr pos:start="123:38" pos:end="123:51"><name pos:start="123:38" pos:end="123:51">TYPE_SPAPR_RNG</name></expr></argument>, <argument pos:start="123:54" pos:end="123:57"><expr pos:start="123:54" pos:end="123:57"><name pos:start="123:54" pos:end="123:57">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:61" pos:end="135:5">{<block_content pos:start="125:9" pos:end="133:9">

        <expr_stmt pos:start="125:9" pos:end="125:41"><expr pos:start="125:9" pos:end="125:40"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <call pos:start="125:15" pos:end="125:40"><name pos:start="125:15" pos:end="125:35">spapr_rng_populate_dt</name><argument_list pos:start="125:36" pos:end="125:40">(<argument pos:start="125:37" pos:end="125:39"><expr pos:start="125:37" pos:end="125:39"><name pos:start="125:37" pos:end="125:39">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:20">(<expr pos:start="127:13" pos:end="127:19"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">&lt;</operator> <literal type="number" pos:start="127:19" pos:end="127:19">0</literal></expr>)</condition> <block pos:start="127:22" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:20">

            <expr_stmt pos:start="129:13" pos:end="129:67"><expr pos:start="129:13" pos:end="129:66"><call pos:start="129:13" pos:end="129:66"><name pos:start="129:13" pos:end="129:24">error_report</name><argument_list pos:start="129:25" pos:end="129:66">(<argument pos:start="129:26" pos:end="129:65"><expr pos:start="129:26" pos:end="129:65"><literal type="string" pos:start="129:26" pos:end="129:65">"could not set up rng device in the fdt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:20"><expr pos:start="131:13" pos:end="131:19"><call pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:16">exit</name><argument_list pos:start="131:17" pos:end="131:19">(<argument pos:start="131:18" pos:end="131:18"><expr pos:start="131:18" pos:end="131:18"><literal type="number" pos:start="131:18" pos:end="131:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="139:5" pos:end="139:42"><name pos:start="139:5" pos:end="139:17">QLIST_FOREACH</name><argument_list pos:start="139:18" pos:end="139:42">(<argument pos:start="139:19" pos:end="139:21">phb</argument>, <argument pos:start="139:24" pos:end="139:35">&amp;spapr-&gt;phbs</argument>, <argument pos:start="139:38" pos:end="139:41">list</argument>)</argument_list></macro> <block pos:start="139:44" pos:end="151:5">{<block_content pos:start="141:9" pos:end="149:9">

        <expr_stmt pos:start="141:9" pos:end="141:60"><expr pos:start="141:9" pos:end="141:59"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="141:59"><name pos:start="141:15" pos:end="141:35">spapr_populate_pci_dt</name><argument_list pos:start="141:36" pos:end="141:59">(<argument pos:start="141:37" pos:end="141:39"><expr pos:start="141:37" pos:end="141:39"><name pos:start="141:37" pos:end="141:39">phb</name></expr></argument>, <argument pos:start="141:42" pos:end="141:53"><expr pos:start="141:42" pos:end="141:53"><name pos:start="141:42" pos:end="141:53">PHANDLE_XICP</name></expr></argument>, <argument pos:start="141:56" pos:end="141:58"><expr pos:start="141:56" pos:end="141:58"><name pos:start="141:56" pos:end="141:58">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="149:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:20">(<expr pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">&lt;</operator> <literal type="number" pos:start="143:19" pos:end="143:19">0</literal></expr>)</condition> <block pos:start="143:22" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:20">

            <expr_stmt pos:start="145:13" pos:end="145:62"><expr pos:start="145:13" pos:end="145:61"><call pos:start="145:13" pos:end="145:61"><name pos:start="145:13" pos:end="145:24">error_report</name><argument_list pos:start="145:25" pos:end="145:61">(<argument pos:start="145:26" pos:end="145:60"><expr pos:start="145:26" pos:end="145:60"><literal type="string" pos:start="145:26" pos:end="145:60">"couldn't setup PCI devices in fdt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:20"><expr pos:start="147:13" pos:end="147:19"><call pos:start="147:13" pos:end="147:19"><name pos:start="147:13" pos:end="147:16">exit</name><argument_list pos:start="147:17" pos:end="147:19">(<argument pos:start="147:18" pos:end="147:18"><expr pos:start="147:18" pos:end="147:18"><literal type="number" pos:start="147:18" pos:end="147:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="155:5" pos:end="155:14">/* cpus */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:44"><expr pos:start="157:5" pos:end="157:43"><call pos:start="157:5" pos:end="157:43"><name pos:start="157:5" pos:end="157:31">spapr_populate_cpus_dt_node</name><argument_list pos:start="157:32" pos:end="157:43">(<argument pos:start="157:33" pos:end="157:35"><expr pos:start="157:33" pos:end="157:35"><name pos:start="157:33" pos:end="157:35">fdt</name></expr></argument>, <argument pos:start="157:38" pos:end="157:42"><expr pos:start="157:38" pos:end="157:42"><name pos:start="157:38" pos:end="157:42">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:28">(<expr pos:start="161:9" pos:end="161:27"><name pos:start="161:9" pos:end="161:27"><name pos:start="161:9" pos:end="161:11">smc</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:27">dr_lmb_enabled</name></name></expr>)</condition> <block pos:start="161:30" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:79">

        <expr_stmt pos:start="163:9" pos:end="163:79"><expr pos:start="163:9" pos:end="163:78"><call pos:start="163:9" pos:end="163:78"><name pos:start="163:9" pos:end="163:12">_FDT</name><argument_list pos:start="163:13" pos:end="163:78">(<argument pos:start="163:14" pos:end="163:77"><expr pos:start="163:14" pos:end="163:77"><call pos:start="163:14" pos:end="163:77"><name pos:start="163:14" pos:end="163:34">spapr_drc_populate_dt</name><argument_list pos:start="163:35" pos:end="163:77">(<argument pos:start="163:36" pos:end="163:38"><expr pos:start="163:36" pos:end="163:38"><name pos:start="163:36" pos:end="163:38">fdt</name></expr></argument>, <argument pos:start="163:41" pos:end="163:41"><expr pos:start="163:41" pos:end="163:41"><literal type="number" pos:start="163:41" pos:end="163:41">0</literal></expr></argument>, <argument pos:start="163:44" pos:end="163:47"><expr pos:start="163:44" pos:end="163:47"><name pos:start="163:44" pos:end="163:47">NULL</name></expr></argument>, <argument pos:start="163:50" pos:end="163:76"><expr pos:start="163:50" pos:end="163:76"><name pos:start="163:50" pos:end="163:76">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="185:5"><if pos:start="169:5" pos:end="185:5">if <condition pos:start="169:8" pos:end="169:36">(<expr pos:start="169:9" pos:end="169:35"><name pos:start="169:9" pos:end="169:35"><name pos:start="169:9" pos:end="169:10">mc</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:35">query_hotpluggable_cpus</name></name></expr>)</condition> <block pos:start="169:38" pos:end="185:5">{<block_content pos:start="171:9" pos:end="183:9">

        <decl_stmt pos:start="171:9" pos:end="171:51"><decl pos:start="171:9" pos:end="171:50"><type pos:start="171:9" pos:end="171:11"><name pos:start="171:9" pos:end="171:11">int</name></type> <name pos:start="171:13" pos:end="171:18">offset</name> <init pos:start="171:20" pos:end="171:50">= <expr pos:start="171:22" pos:end="171:50"><call pos:start="171:22" pos:end="171:50"><name pos:start="171:22" pos:end="171:36">fdt_path_offset</name><argument_list pos:start="171:37" pos:end="171:50">(<argument pos:start="171:38" pos:end="171:40"><expr pos:start="171:38" pos:end="171:40"><name pos:start="171:38" pos:end="171:40">fdt</name></expr></argument>, <argument pos:start="171:43" pos:end="171:49"><expr pos:start="171:43" pos:end="171:49"><literal type="string" pos:start="171:43" pos:end="171:49">"/cpus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="173:9" pos:end="175:65"><expr pos:start="173:9" pos:end="175:64"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="175:64"><name pos:start="173:15" pos:end="173:35">spapr_drc_populate_dt</name><argument_list pos:start="173:36" pos:end="175:64">(<argument pos:start="173:37" pos:end="173:39"><expr pos:start="173:37" pos:end="173:39"><name pos:start="173:37" pos:end="173:39">fdt</name></expr></argument>, <argument pos:start="173:42" pos:end="173:47"><expr pos:start="173:42" pos:end="173:47"><name pos:start="173:42" pos:end="173:47">offset</name></expr></argument>, <argument pos:start="173:50" pos:end="173:53"><expr pos:start="173:50" pos:end="173:53"><name pos:start="173:50" pos:end="173:53">NULL</name></expr></argument>,

                                    <argument pos:start="175:37" pos:end="175:63"><expr pos:start="175:37" pos:end="175:63"><name pos:start="175:37" pos:end="175:63">SPAPR_DR_CONNECTOR_TYPE_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:20">(<expr pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">&lt;</operator> <literal type="number" pos:start="177:19" pos:end="177:19">0</literal></expr>)</condition> <block pos:start="177:22" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:20">

            <expr_stmt pos:start="179:13" pos:end="179:74"><expr pos:start="179:13" pos:end="179:73"><call pos:start="179:13" pos:end="179:73"><name pos:start="179:13" pos:end="179:24">error_report</name><argument_list pos:start="179:25" pos:end="179:73">(<argument pos:start="179:26" pos:end="179:72"><expr pos:start="179:26" pos:end="179:72"><literal type="string" pos:start="179:26" pos:end="179:72">"Couldn't set up CPU DR device tree properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:20"><expr pos:start="181:13" pos:end="181:19"><call pos:start="181:13" pos:end="181:19"><name pos:start="181:13" pos:end="181:16">exit</name><argument_list pos:start="181:17" pos:end="181:19">(<argument pos:start="181:18" pos:end="181:18"><expr pos:start="181:18" pos:end="181:18"><literal type="number" pos:start="181:18" pos:end="181:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:24">/* /event-sources */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:53"><expr pos:start="191:5" pos:end="191:52"><call pos:start="191:5" pos:end="191:52"><name pos:start="191:5" pos:end="191:19">spapr_dt_events</name><argument_list pos:start="191:20" pos:end="191:52">(<argument pos:start="191:21" pos:end="191:23"><expr pos:start="191:21" pos:end="191:23"><name pos:start="191:21" pos:end="191:23">fdt</name></expr></argument>, <argument pos:start="191:26" pos:end="191:51"><expr pos:start="191:26" pos:end="191:51"><name pos:start="191:26" pos:end="191:51"><name pos:start="191:26" pos:end="191:30">spapr</name><operator pos:start="191:31" pos:end="191:32">-&gt;</operator><name pos:start="191:33" pos:end="191:51">check_exception_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="195:5" pos:end="195:15">/* /rtas */</comment>

    <expr_stmt pos:start="197:5" pos:end="197:30"><expr pos:start="197:5" pos:end="197:29"><call pos:start="197:5" pos:end="197:29"><name pos:start="197:5" pos:end="197:17">spapr_dt_rtas</name><argument_list pos:start="197:18" pos:end="197:29">(<argument pos:start="197:19" pos:end="197:23"><expr pos:start="197:19" pos:end="197:23"><name pos:start="197:19" pos:end="197:23">spapr</name></expr></argument>, <argument pos:start="197:26" pos:end="197:28"><expr pos:start="197:26" pos:end="197:28"><name pos:start="197:26" pos:end="197:28">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="201:5" pos:end="201:17">/* /chosen */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:32"><expr pos:start="203:5" pos:end="203:31"><call pos:start="203:5" pos:end="203:31"><name pos:start="203:5" pos:end="203:19">spapr_dt_chosen</name><argument_list pos:start="203:20" pos:end="203:31">(<argument pos:start="203:21" pos:end="203:25"><expr pos:start="203:21" pos:end="203:25"><name pos:start="203:21" pos:end="203:25">spapr</name></expr></argument>, <argument pos:start="203:28" pos:end="203:30"><expr pos:start="203:28" pos:end="203:30"><name pos:start="203:28" pos:end="203:30">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:21">/* /hypervisor */</comment>

    <if_stmt pos:start="209:5" pos:end="213:5"><if pos:start="209:5" pos:end="213:5">if <condition pos:start="209:8" pos:end="209:22">(<expr pos:start="209:9" pos:end="209:21"><call pos:start="209:9" pos:end="209:21"><name pos:start="209:9" pos:end="209:19">kvm_enabled</name><argument_list pos:start="209:20" pos:end="209:21">()</argument_list></call></expr>)</condition> <block pos:start="209:24" pos:end="213:5">{<block_content pos:start="211:9" pos:end="211:40">

        <expr_stmt pos:start="211:9" pos:end="211:40"><expr pos:start="211:9" pos:end="211:39"><call pos:start="211:9" pos:end="211:39"><name pos:start="211:9" pos:end="211:27">spapr_dt_hypervisor</name><argument_list pos:start="211:28" pos:end="211:39">(<argument pos:start="211:29" pos:end="211:33"><expr pos:start="211:29" pos:end="211:33"><name pos:start="211:29" pos:end="211:33">spapr</name></expr></argument>, <argument pos:start="211:36" pos:end="211:38"><expr pos:start="211:36" pos:end="211:38"><name pos:start="211:36" pos:end="211:38">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="217:5" pos:end="217:34">/* Build memory reserve map */</comment>

    <if_stmt pos:start="219:5" pos:end="223:5"><if pos:start="219:5" pos:end="223:5">if <condition pos:start="219:8" pos:end="219:27">(<expr pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:13">spapr</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:26">kernel_size</name></name></expr>)</condition> <block pos:start="219:29" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:75">

        <expr_stmt pos:start="221:9" pos:end="221:75"><expr pos:start="221:9" pos:end="221:74"><call pos:start="221:9" pos:end="221:74"><name pos:start="221:9" pos:end="221:12">_FDT</name><argument_list pos:start="221:13" pos:end="221:74">(<argument pos:start="221:14" pos:end="221:73"><expr pos:start="221:14" pos:end="221:73"><operator pos:start="221:14" pos:end="221:14">(</operator><call pos:start="221:15" pos:end="221:72"><name pos:start="221:15" pos:end="221:29">fdt_add_mem_rsv</name><argument_list pos:start="221:30" pos:end="221:72">(<argument pos:start="221:31" pos:end="221:33"><expr pos:start="221:31" pos:end="221:33"><name pos:start="221:31" pos:end="221:33">fdt</name></expr></argument>, <argument pos:start="221:36" pos:end="221:51"><expr pos:start="221:36" pos:end="221:51"><name pos:start="221:36" pos:end="221:51">KERNEL_LOAD_ADDR</name></expr></argument>, <argument pos:start="221:54" pos:end="221:71"><expr pos:start="221:54" pos:end="221:71"><name pos:start="221:54" pos:end="221:71"><name pos:start="221:54" pos:end="221:58">spapr</name><operator pos:start="221:59" pos:end="221:60">-&gt;</operator><name pos:start="221:61" pos:end="221:71">kernel_size</name></name></expr></argument>)</argument_list></call><operator pos:start="221:73" pos:end="221:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="225:5" pos:end="229:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:27">(<expr pos:start="225:9" pos:end="225:26"><name pos:start="225:9" pos:end="225:26"><name pos:start="225:9" pos:end="225:13">spapr</name><operator pos:start="225:14" pos:end="225:15">-&gt;</operator><name pos:start="225:16" pos:end="225:26">initrd_size</name></name></expr>)</condition> <block pos:start="225:29" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:77">

        <expr_stmt pos:start="227:9" pos:end="227:77"><expr pos:start="227:9" pos:end="227:76"><call pos:start="227:9" pos:end="227:76"><name pos:start="227:9" pos:end="227:12">_FDT</name><argument_list pos:start="227:13" pos:end="227:76">(<argument pos:start="227:14" pos:end="227:75"><expr pos:start="227:14" pos:end="227:75"><operator pos:start="227:14" pos:end="227:14">(</operator><call pos:start="227:15" pos:end="227:74"><name pos:start="227:15" pos:end="227:29">fdt_add_mem_rsv</name><argument_list pos:start="227:30" pos:end="227:74">(<argument pos:start="227:31" pos:end="227:33"><expr pos:start="227:31" pos:end="227:33"><name pos:start="227:31" pos:end="227:33">fdt</name></expr></argument>, <argument pos:start="227:36" pos:end="227:53"><expr pos:start="227:36" pos:end="227:53"><name pos:start="227:36" pos:end="227:53"><name pos:start="227:36" pos:end="227:40">spapr</name><operator pos:start="227:41" pos:end="227:42">-&gt;</operator><name pos:start="227:43" pos:end="227:53">initrd_base</name></name></expr></argument>, <argument pos:start="227:56" pos:end="227:73"><expr pos:start="227:56" pos:end="227:73"><name pos:start="227:56" pos:end="227:73"><name pos:start="227:56" pos:end="227:60">spapr</name><operator pos:start="227:61" pos:end="227:62">-&gt;</operator><name pos:start="227:63" pos:end="227:73">initrd_size</name></name></expr></argument>)</argument_list></call><operator pos:start="227:75" pos:end="227:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="233:5" pos:end="233:49">/* ibm,client-architecture-support updates */</comment>

    <expr_stmt pos:start="235:5" pos:end="235:59"><expr pos:start="235:5" pos:end="235:58"><name pos:start="235:5" pos:end="235:7">ret</name> <operator pos:start="235:9" pos:end="235:9">=</operator> <call pos:start="235:11" pos:end="235:58"><name pos:start="235:11" pos:end="235:30">spapr_dt_cas_updates</name><argument_list pos:start="235:31" pos:end="235:58">(<argument pos:start="235:32" pos:end="235:36"><expr pos:start="235:32" pos:end="235:36"><name pos:start="235:32" pos:end="235:36">spapr</name></expr></argument>, <argument pos:start="235:39" pos:end="235:41"><expr pos:start="235:39" pos:end="235:41"><name pos:start="235:39" pos:end="235:41">fdt</name></expr></argument>, <argument pos:start="235:44" pos:end="235:57"><expr pos:start="235:44" pos:end="235:57"><name pos:start="235:44" pos:end="235:57"><name pos:start="235:44" pos:end="235:48">spapr</name><operator pos:start="235:49" pos:end="235:50">-&gt;</operator><name pos:start="235:51" pos:end="235:57">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:16">(<expr pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">&lt;</operator> <literal type="number" pos:start="237:15" pos:end="237:15">0</literal></expr>)</condition> <block pos:start="237:18" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:16">

        <expr_stmt pos:start="239:9" pos:end="239:58"><expr pos:start="239:9" pos:end="239:57"><call pos:start="239:9" pos:end="239:57"><name pos:start="239:9" pos:end="239:20">error_report</name><argument_list pos:start="239:21" pos:end="239:57">(<argument pos:start="239:22" pos:end="239:56"><expr pos:start="239:22" pos:end="239:56"><literal type="string" pos:start="239:22" pos:end="239:56">"couldn't setup CAS properties fdt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:16"><expr pos:start="241:9" pos:end="241:15"><call pos:start="241:9" pos:end="241:15"><name pos:start="241:9" pos:end="241:12">exit</name><argument_list pos:start="241:13" pos:end="241:15">(<argument pos:start="241:14" pos:end="241:14"><expr pos:start="241:14" pos:end="241:14"><literal type="number" pos:start="241:14" pos:end="241:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="247:5" pos:end="247:15">return <expr pos:start="247:12" pos:end="247:14"><name pos:start="247:12" pos:end="247:14">fdt</name></expr>;</return>

</block_content>}</block></function>
</unit>
