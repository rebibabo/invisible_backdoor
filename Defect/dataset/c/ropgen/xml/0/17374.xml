<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17374.c" pos:tabs="8"><function pos:start="1:1" pos:end="1077:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">av_encode</name><parameter_list pos:start="1:21" pos:end="9:66">(<parameter pos:start="1:22" pos:end="1:51"><decl pos:start="1:22" pos:end="1:51"><type pos:start="1:22" pos:end="1:51"><name pos:start="1:22" pos:end="1:36">AVFormatContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:51">output_files</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:40"><decl pos:start="3:22" pos:end="3:40"><type pos:start="3:22" pos:end="3:40"><name pos:start="3:22" pos:end="3:24">int</name></type> <name pos:start="3:26" pos:end="3:40">nb_output_files</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:50"><decl pos:start="5:22" pos:end="5:50"><type pos:start="5:22" pos:end="5:50"><name pos:start="5:22" pos:end="5:36">AVFormatContext</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier><modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:50">input_files</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:39"><decl pos:start="7:22" pos:end="7:39"><type pos:start="7:22" pos:end="7:39"><name pos:start="7:22" pos:end="7:24">int</name></type> <name pos:start="7:26" pos:end="7:39">nb_input_files</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:45"><decl pos:start="9:22" pos:end="9:45"><type pos:start="9:22" pos:end="9:45"><name pos:start="9:22" pos:end="9:32">AVStreamMap</name> <modifier pos:start="9:34" pos:end="9:34">*</modifier></type><name pos:start="9:35" pos:end="9:45">stream_maps</name></decl></parameter>, <parameter pos:start="9:48" pos:end="9:65"><decl pos:start="9:48" pos:end="9:65"><type pos:start="9:48" pos:end="9:65"><name pos:start="9:48" pos:end="9:50">int</name></type> <name pos:start="9:52" pos:end="9:65">nb_stream_maps</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="1077:1">{<block_content pos:start="13:5" pos:end="1075:15">

    <decl_stmt pos:start="13:5" pos:end="13:58"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">i</name></decl>, <decl pos:start="13:17" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:17">j</name></decl>, <decl pos:start="13:20" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:20">k</name></decl>, <decl pos:start="13:23" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:23">n</name></decl>, <decl pos:start="13:26" pos:end="13:40"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:26" pos:end="13:36">nb_istreams</name> <init pos:start="13:38" pos:end="13:40">= <expr pos:start="13:40" pos:end="13:40"><literal type="number" pos:start="13:40" pos:end="13:40">0</literal></expr></init></decl>, <decl pos:start="13:43" pos:end="13:57"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:43" pos:end="13:53">nb_ostreams</name> <init pos:start="13:55" pos:end="13:57">= <expr pos:start="13:57" pos:end="13:57"><literal type="number" pos:start="13:57" pos:end="13:57">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">AVFormatContext</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:23">is</name></decl>, <decl pos:start="15:26" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:21"><modifier pos:start="15:26" pos:end="15:26">*</modifier></type><name pos:start="15:27" pos:end="15:28">os</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">AVCodecContext</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:25">codec</name></decl>, <decl pos:start="17:28" pos:end="17:34"><type ref="prev" pos:start="17:5" pos:end="17:20"><modifier pos:start="17:28" pos:end="17:28">*</modifier></type><name pos:start="17:29" pos:end="17:34">icodec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">AVOutputStream</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">ost</name></decl>, <decl pos:start="19:26" pos:end="19:43"><type ref="prev" pos:start="19:5" pos:end="19:20"><modifier pos:start="19:26" pos:end="19:26">*</modifier><modifier pos:start="19:27" pos:end="19:27">*</modifier></type><name pos:start="19:28" pos:end="19:36">ost_table</name> <init pos:start="19:38" pos:end="19:43">= <expr pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:43"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:17">AVInputStream</name> <modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:22">ist</name></decl>, <decl pos:start="21:25" pos:end="21:42"><type ref="prev" pos:start="21:5" pos:end="21:19"><modifier pos:start="21:25" pos:end="21:25">*</modifier><modifier pos:start="21:26" pos:end="21:26">*</modifier></type><name pos:start="21:27" pos:end="21:35">ist_table</name> <init pos:start="21:37" pos:end="21:42">= <expr pos:start="21:39" pos:end="21:42"><name pos:start="21:39" pos:end="21:42">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">AVInputFile</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:27">file_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:36"><decl pos:start="25:5" pos:end="25:35"><type pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:19">AVFormatContext</name> <modifier pos:start="25:21" pos:end="25:21">*</modifier></type><name pos:start="25:22" pos:end="25:35">stream_no_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:12"><decl pos:start="27:5" pos:end="27:11"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">key</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:80"><expr pos:start="31:5" pos:end="31:79"><name pos:start="31:5" pos:end="31:14">file_table</name><operator pos:start="31:15" pos:end="31:15">=</operator> <operator pos:start="31:17" pos:end="31:17">(</operator><name pos:start="31:18" pos:end="31:28">AVInputFile</name><operator pos:start="31:29" pos:end="31:29">*</operator><operator pos:start="31:30" pos:end="31:30">)</operator> <call pos:start="31:32" pos:end="31:79"><name pos:start="31:32" pos:end="31:41">av_mallocz</name><argument_list pos:start="31:42" pos:end="31:79">(<argument pos:start="31:43" pos:end="31:78"><expr pos:start="31:43" pos:end="31:78"><name pos:start="31:43" pos:end="31:56">nb_input_files</name> <operator pos:start="31:58" pos:end="31:58">*</operator> <sizeof pos:start="31:60" pos:end="31:78">sizeof<argument_list pos:start="31:66" pos:end="31:78">(<argument pos:start="31:67" pos:end="31:77"><expr pos:start="31:67" pos:end="31:77"><name pos:start="31:67" pos:end="31:77">AVInputFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:18"><if pos:start="33:5" pos:end="35:18">if <condition pos:start="33:8" pos:end="33:20">(<expr pos:start="33:9" pos:end="33:19"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:19">file_table</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:18"><block_content pos:start="35:9" pos:end="35:18">

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:27">/* input stream init */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:10"><expr pos:start="41:5" pos:end="41:9"><name pos:start="41:5" pos:end="41:5">j</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <literal type="number" pos:start="41:9" pos:end="41:9">0</literal></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="53:5">for<control pos:start="43:8" pos:end="43:33">(<init pos:start="43:9" pos:end="43:12"><expr pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:9">i</name><operator pos:start="43:10" pos:end="43:10">=</operator><literal type="number" pos:start="43:11" pos:end="43:11">0</literal></expr>;</init><condition pos:start="43:13" pos:end="43:29"><expr pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:13">i</name><operator pos:start="43:14" pos:end="43:14">&lt;</operator><name pos:start="43:15" pos:end="43:28">nb_input_files</name></expr>;</condition><incr pos:start="43:30" pos:end="43:32"><expr pos:start="43:30" pos:end="43:32"><name pos:start="43:30" pos:end="43:30">i</name><operator pos:start="43:31" pos:end="43:32">++</operator></expr></incr>)</control> <block pos:start="43:35" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:28">

        <expr_stmt pos:start="45:9" pos:end="45:28"><expr pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:10">is</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <name pos:start="45:14" pos:end="45:27"><name pos:start="45:14" pos:end="45:24">input_files</name><index pos:start="45:25" pos:end="45:27">[<expr pos:start="45:26" pos:end="45:26"><name pos:start="45:26" pos:end="45:26">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:18">file_table</name><index pos:start="47:19" pos:end="47:21">[<expr pos:start="47:20" pos:end="47:20"><name pos:start="47:20" pos:end="47:20">i</name></expr>]</index></name><operator pos:start="47:22" pos:end="47:22">.</operator><name pos:start="47:23" pos:end="47:31">ist_index</name> <operator pos:start="47:33" pos:end="47:33">=</operator> <name pos:start="47:35" pos:end="47:35">j</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:50"><expr pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:18">file_table</name><index pos:start="49:19" pos:end="49:21">[<expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">i</name></expr>]</index></name><operator pos:start="49:22" pos:end="49:22">.</operator><name pos:start="49:23" pos:end="49:32">nb_streams</name> <operator pos:start="49:34" pos:end="49:34">=</operator> <name pos:start="49:36" pos:end="49:49"><name pos:start="49:36" pos:end="49:37">is</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:49">nb_streams</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:9">j</name> <operator pos:start="51:11" pos:end="51:12">+=</operator> <name pos:start="51:14" pos:end="51:27"><name pos:start="51:14" pos:end="51:15">is</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:27">nb_streams</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:15">nb_istreams</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:19">j</name></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:66"><expr pos:start="59:5" pos:end="59:65"><name pos:start="59:5" pos:end="59:13">ist_table</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:65"><name pos:start="59:17" pos:end="59:26">av_mallocz</name><argument_list pos:start="59:27" pos:end="59:65">(<argument pos:start="59:28" pos:end="59:64"><expr pos:start="59:28" pos:end="59:64"><name pos:start="59:28" pos:end="59:38">nb_istreams</name> <operator pos:start="59:40" pos:end="59:40">*</operator> <sizeof pos:start="59:42" pos:end="59:64">sizeof<argument_list pos:start="59:48" pos:end="59:64">(<argument pos:start="59:49" pos:end="59:63"><expr pos:start="59:49" pos:end="59:63"><name pos:start="59:49" pos:end="59:61">AVInputStream</name> <operator pos:start="59:63" pos:end="59:63">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="63:18"><if pos:start="61:5" pos:end="63:18">if <condition pos:start="61:8" pos:end="61:19">(<expr pos:start="61:9" pos:end="61:18"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:18">ist_table</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:18"><block_content pos:start="63:9" pos:end="63:18">

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto></block_content></block></if></if_stmt>

    

    <for pos:start="67:5" pos:end="77:5">for<control pos:start="67:8" pos:end="67:30">(<init pos:start="67:9" pos:end="67:12"><expr pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:9">i</name><operator pos:start="67:10" pos:end="67:10">=</operator><literal type="number" pos:start="67:11" pos:end="67:11">0</literal></expr>;</init><condition pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:13">i</name><operator pos:start="67:14" pos:end="67:14">&lt;</operator><name pos:start="67:15" pos:end="67:25">nb_istreams</name></expr>;</condition><incr pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:27">i</name><operator pos:start="67:28" pos:end="67:29">++</operator></expr></incr>)</control> <block pos:start="67:32" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:27">

        <expr_stmt pos:start="69:9" pos:end="69:48"><expr pos:start="69:9" pos:end="69:47"><name pos:start="69:9" pos:end="69:11">ist</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:47"><name pos:start="69:15" pos:end="69:24">av_mallocz</name><argument_list pos:start="69:25" pos:end="69:47">(<argument pos:start="69:26" pos:end="69:46"><expr pos:start="69:26" pos:end="69:46"><sizeof pos:start="69:26" pos:end="69:46">sizeof<argument_list pos:start="69:32" pos:end="69:46">(<argument pos:start="69:33" pos:end="69:45"><expr pos:start="69:33" pos:end="69:45"><name pos:start="69:33" pos:end="69:45">AVInputStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="73:22"><if pos:start="71:9" pos:end="73:22">if <condition pos:start="71:12" pos:end="71:17">(<expr pos:start="71:13" pos:end="71:16"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:16">ist</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:22"><block_content pos:start="73:13" pos:end="73:22">

            <goto pos:start="73:13" pos:end="73:22">goto <name pos:start="73:18" pos:end="73:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:27"><expr pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:17">ist_table</name><index pos:start="75:18" pos:end="75:20">[<expr pos:start="75:19" pos:end="75:19"><name pos:start="75:19" pos:end="75:19">i</name></expr>]</index></name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:26">ist</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="79:5" pos:end="79:10"><expr pos:start="79:5" pos:end="79:9"><name pos:start="79:5" pos:end="79:5">j</name> <operator pos:start="79:7" pos:end="79:7">=</operator> <literal type="number" pos:start="79:9" pos:end="79:9">0</literal></expr>;</expr_stmt>

    <for pos:start="81:5" pos:end="111:5">for<control pos:start="81:8" pos:end="81:33">(<init pos:start="81:9" pos:end="81:12"><expr pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:9">i</name><operator pos:start="81:10" pos:end="81:10">=</operator><literal type="number" pos:start="81:11" pos:end="81:11">0</literal></expr>;</init><condition pos:start="81:13" pos:end="81:29"><expr pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:13">i</name><operator pos:start="81:14" pos:end="81:14">&lt;</operator><name pos:start="81:15" pos:end="81:28">nb_input_files</name></expr>;</condition><incr pos:start="81:30" pos:end="81:32"><expr pos:start="81:30" pos:end="81:32"><name pos:start="81:30" pos:end="81:30">i</name><operator pos:start="81:31" pos:end="81:32">++</operator></expr></incr>)</control> <block pos:start="81:35" pos:end="111:5">{<block_content pos:start="83:9" pos:end="109:9">

        <expr_stmt pos:start="83:9" pos:end="83:28"><expr pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:10">is</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <name pos:start="83:14" pos:end="83:27"><name pos:start="83:14" pos:end="83:24">input_files</name><index pos:start="83:25" pos:end="83:27">[<expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">i</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="85:9" pos:end="109:9">for<control pos:start="85:12" pos:end="85:37">(<init pos:start="85:13" pos:end="85:16"><expr pos:start="85:13" pos:end="85:15"><name pos:start="85:13" pos:end="85:13">k</name><operator pos:start="85:14" pos:end="85:14">=</operator><literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>;</init><condition pos:start="85:17" pos:end="85:33"><expr pos:start="85:17" pos:end="85:32"><name pos:start="85:17" pos:end="85:17">k</name><operator pos:start="85:18" pos:end="85:18">&lt;</operator><name pos:start="85:19" pos:end="85:32"><name pos:start="85:19" pos:end="85:20">is</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:32">nb_streams</name></name></expr>;</condition><incr pos:start="85:34" pos:end="85:36"><expr pos:start="85:34" pos:end="85:36"><name pos:start="85:34" pos:end="85:34">k</name><operator pos:start="85:35" pos:end="85:36">++</operator></expr></incr>)</control> <block pos:start="85:39" pos:end="109:9">{<block_content pos:start="87:13" pos:end="107:13">

            <expr_stmt pos:start="87:13" pos:end="87:33"><expr pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:15">ist</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:32"><name pos:start="87:19" pos:end="87:27">ist_table</name><index pos:start="87:28" pos:end="87:32">[<expr pos:start="87:29" pos:end="87:31"><name pos:start="87:29" pos:end="87:29">j</name><operator pos:start="87:30" pos:end="87:31">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:37"><expr pos:start="89:13" pos:end="89:36"><name pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:15">ist</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:19">st</name></name> <operator pos:start="89:21" pos:end="89:21">=</operator> <name pos:start="89:23" pos:end="89:36"><name pos:start="89:23" pos:end="89:24">is</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:33">streams</name><index pos:start="89:34" pos:end="89:36">[<expr pos:start="89:35" pos:end="89:35"><name pos:start="89:35" pos:end="89:35">k</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:27"><name pos:start="91:13" pos:end="91:15">ist</name><operator pos:start="91:16" pos:end="91:17">-&gt;</operator><name pos:start="91:18" pos:end="91:27">file_index</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:31">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:27"><expr pos:start="93:13" pos:end="93:26"><name pos:start="93:13" pos:end="93:22"><name pos:start="93:13" pos:end="93:15">ist</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:22">index</name></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:26">k</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:29"><expr pos:start="95:13" pos:end="95:28"><name pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:15">ist</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:24">discard</name></name> <operator pos:start="95:26" pos:end="95:26">=</operator> <literal type="number" pos:start="95:28" pos:end="95:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="95:31" pos:end="97:51">/* the stream is discarded by default

                                 (changed later) */</comment>



            <if_stmt pos:start="101:13" pos:end="107:13"><if pos:start="101:13" pos:end="107:13">if <condition pos:start="101:16" pos:end="101:40">(<expr pos:start="101:17" pos:end="101:39"><name pos:start="101:17" pos:end="101:39"><name pos:start="101:17" pos:end="101:19">ist</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:23">st</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:30">codec</name><operator pos:start="101:31" pos:end="101:31">.</operator><name pos:start="101:32" pos:end="101:39">rate_emu</name></name></expr>)</condition> <block pos:start="101:42" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:31">

                <expr_stmt pos:start="103:17" pos:end="103:42"><expr pos:start="103:17" pos:end="103:41"><name pos:start="103:17" pos:end="103:26"><name pos:start="103:17" pos:end="103:19">ist</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:26">start</name></name> <operator pos:start="103:28" pos:end="103:28">=</operator> <call pos:start="103:30" pos:end="103:41"><name pos:start="103:30" pos:end="103:39">av_gettime</name><argument_list pos:start="103:40" pos:end="103:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:31"><expr pos:start="105:17" pos:end="105:30"><name pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:19">ist</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:26">frame</name></name> <operator pos:start="105:28" pos:end="105:28">=</operator> <literal type="number" pos:start="105:30" pos:end="105:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="115:5" pos:end="115:28">/* output stream init */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:20"><expr pos:start="117:5" pos:end="117:19"><name pos:start="117:5" pos:end="117:15">nb_ostreams</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr>;</expr_stmt>

    <for pos:start="119:5" pos:end="125:5">for<control pos:start="119:8" pos:end="119:34">(<init pos:start="119:9" pos:end="119:12"><expr pos:start="119:9" pos:end="119:11"><name pos:start="119:9" pos:end="119:9">i</name><operator pos:start="119:10" pos:end="119:10">=</operator><literal type="number" pos:start="119:11" pos:end="119:11">0</literal></expr>;</init><condition pos:start="119:13" pos:end="119:30"><expr pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:13">i</name><operator pos:start="119:14" pos:end="119:14">&lt;</operator><name pos:start="119:15" pos:end="119:29">nb_output_files</name></expr>;</condition><incr pos:start="119:31" pos:end="119:33"><expr pos:start="119:31" pos:end="119:33"><name pos:start="119:31" pos:end="119:31">i</name><operator pos:start="119:32" pos:end="119:33">++</operator></expr></incr>)</control> <block pos:start="119:36" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:38">

        <expr_stmt pos:start="121:9" pos:end="121:29"><expr pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:10">os</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <name pos:start="121:14" pos:end="121:28"><name pos:start="121:14" pos:end="121:25">output_files</name><index pos:start="121:26" pos:end="121:28">[<expr pos:start="121:27" pos:end="121:27"><name pos:start="121:27" pos:end="121:27">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:38"><expr pos:start="123:9" pos:end="123:37"><name pos:start="123:9" pos:end="123:19">nb_ostreams</name> <operator pos:start="123:21" pos:end="123:22">+=</operator> <name pos:start="123:24" pos:end="123:37"><name pos:start="123:24" pos:end="123:25">os</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:37">nb_streams</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:60">(<expr pos:start="127:9" pos:end="127:59"><name pos:start="127:9" pos:end="127:22">nb_stream_maps</name> <operator pos:start="127:24" pos:end="127:24">&gt;</operator> <literal type="number" pos:start="127:26" pos:end="127:26">0</literal> <operator pos:start="127:28" pos:end="127:29">&amp;&amp;</operator> <name pos:start="127:31" pos:end="127:44">nb_stream_maps</name> <operator pos:start="127:46" pos:end="127:47">!=</operator> <name pos:start="127:49" pos:end="127:59">nb_ostreams</name></expr>)</condition> <block pos:start="127:62" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:16">

        <expr_stmt pos:start="129:9" pos:end="129:87"><expr pos:start="129:9" pos:end="129:86"><call pos:start="129:9" pos:end="129:86"><name pos:start="129:9" pos:end="129:15">fprintf</name><argument_list pos:start="129:16" pos:end="129:86">(<argument pos:start="129:17" pos:end="129:22"><expr pos:start="129:17" pos:end="129:22"><name pos:start="129:17" pos:end="129:22">stderr</name></expr></argument>, <argument pos:start="129:25" pos:end="129:85"><expr pos:start="129:25" pos:end="129:85"><literal type="string" pos:start="129:25" pos:end="129:85">"Number of stream maps must match number of output streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:16"><expr pos:start="131:9" pos:end="131:15"><call pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:12">exit</name><argument_list pos:start="131:13" pos:end="131:15">(<argument pos:start="131:14" pos:end="131:14"><expr pos:start="131:14" pos:end="131:14"><literal type="number" pos:start="131:14" pos:end="131:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:78">/* Sanity check the mapping args -- do the input files &amp; streams exist? */</comment>

    <for pos:start="139:5" pos:end="157:5">for<control pos:start="139:8" pos:end="139:33">(<init pos:start="139:9" pos:end="139:12"><expr pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:9">i</name><operator pos:start="139:10" pos:end="139:10">=</operator><literal type="number" pos:start="139:11" pos:end="139:11">0</literal></expr>;</init><condition pos:start="139:13" pos:end="139:29"><expr pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:13">i</name><operator pos:start="139:14" pos:end="139:14">&lt;</operator><name pos:start="139:15" pos:end="139:28">nb_stream_maps</name></expr>;</condition><incr pos:start="139:30" pos:end="139:32"><expr pos:start="139:30" pos:end="139:32"><name pos:start="139:30" pos:end="139:30">i</name><operator pos:start="139:31" pos:end="139:32">++</operator></expr></incr>)</control> <block pos:start="139:35" pos:end="157:5">{<block_content pos:start="141:9" pos:end="155:9">

        <decl_stmt pos:start="141:9" pos:end="141:43"><decl pos:start="141:9" pos:end="141:42"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:14">fi</name> <init pos:start="141:16" pos:end="141:42">= <expr pos:start="141:18" pos:end="141:42"><name pos:start="141:18" pos:end="141:31"><name pos:start="141:18" pos:end="141:28">stream_maps</name><index pos:start="141:29" pos:end="141:31">[<expr pos:start="141:30" pos:end="141:30"><name pos:start="141:30" pos:end="141:30">i</name></expr>]</index></name><operator pos:start="141:32" pos:end="141:32">.</operator><name pos:start="141:33" pos:end="141:42">file_index</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:45"><decl pos:start="143:9" pos:end="143:44"><type pos:start="143:9" pos:end="143:11"><name pos:start="143:9" pos:end="143:11">int</name></type> <name pos:start="143:13" pos:end="143:14">si</name> <init pos:start="143:16" pos:end="143:44">= <expr pos:start="143:18" pos:end="143:44"><name pos:start="143:18" pos:end="143:31"><name pos:start="143:18" pos:end="143:28">stream_maps</name><index pos:start="143:29" pos:end="143:31">[<expr pos:start="143:30" pos:end="143:30"><name pos:start="143:30" pos:end="143:30">i</name></expr>]</index></name><operator pos:start="143:32" pos:end="143:32">.</operator><name pos:start="143:33" pos:end="143:44">stream_index</name></expr></init></decl>;</decl_stmt>

        

        <if_stmt pos:start="147:9" pos:end="155:9"><if pos:start="147:9" pos:end="155:9">if <condition pos:start="147:12" pos:end="149:57">(<expr pos:start="147:13" pos:end="149:56"><name pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:14">fi</name> <argument_list type="generic" pos:start="147:16" pos:end="147:26">&lt; <argument pos:start="147:18" pos:end="147:24"><expr pos:start="147:18" pos:end="147:24"><literal type="number" pos:start="147:18" pos:end="147:18">0</literal> <operator pos:start="147:20" pos:end="147:21">||</operator> <name pos:start="147:23" pos:end="147:24">fi</name></expr></argument> &gt;</argument_list></name> <name pos:start="147:28" pos:end="147:41">nb_input_files</name> <operator pos:start="147:43" pos:end="147:43">-</operator> <literal type="number" pos:start="147:45" pos:end="147:45">1</literal> <operator pos:start="147:47" pos:end="147:48">||</operator>

            <name pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:14">si</name> <argument_list type="generic" pos:start="149:16" pos:end="149:26">&lt; <argument pos:start="149:18" pos:end="149:24"><expr pos:start="149:18" pos:end="149:24"><literal type="number" pos:start="149:18" pos:end="149:18">0</literal> <operator pos:start="149:20" pos:end="149:21">||</operator> <name pos:start="149:23" pos:end="149:24">si</name></expr></argument> &gt;</argument_list></name> <name pos:start="149:28" pos:end="149:41"><name pos:start="149:28" pos:end="149:37">file_table</name><index pos:start="149:38" pos:end="149:41">[<expr pos:start="149:39" pos:end="149:40"><name pos:start="149:39" pos:end="149:40">fi</name></expr>]</index></name><operator pos:start="149:42" pos:end="149:42">.</operator><name pos:start="149:43" pos:end="149:52">nb_streams</name> <operator pos:start="149:54" pos:end="149:54">-</operator> <literal type="number" pos:start="149:56" pos:end="149:56">1</literal></expr>)</condition> <block pos:start="149:59" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:20">

            <expr_stmt pos:start="151:13" pos:end="151:75"><expr pos:start="151:13" pos:end="151:74"><call pos:start="151:13" pos:end="151:74"><name pos:start="151:13" pos:end="151:19">fprintf</name><argument_list pos:start="151:20" pos:end="151:74">(<argument pos:start="151:21" pos:end="151:26"><expr pos:start="151:21" pos:end="151:26"><name pos:start="151:21" pos:end="151:26">stderr</name></expr></argument>,<argument pos:start="151:28" pos:end="151:65"><expr pos:start="151:28" pos:end="151:65"><literal type="string" pos:start="151:28" pos:end="151:65">"Could not find input stream #%d.%d\n"</literal></expr></argument>, <argument pos:start="151:68" pos:end="151:69"><expr pos:start="151:68" pos:end="151:69"><name pos:start="151:68" pos:end="151:69">fi</name></expr></argument>, <argument pos:start="151:72" pos:end="151:73"><expr pos:start="151:72" pos:end="151:73"><name pos:start="151:72" pos:end="151:73">si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:20"><expr pos:start="153:13" pos:end="153:19"><call pos:start="153:13" pos:end="153:19"><name pos:start="153:13" pos:end="153:16">exit</name><argument_list pos:start="153:17" pos:end="153:19">(<argument pos:start="153:18" pos:end="153:18"><expr pos:start="153:18" pos:end="153:18"><literal type="number" pos:start="153:18" pos:end="153:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    

    <expr_stmt pos:start="161:5" pos:end="161:67"><expr pos:start="161:5" pos:end="161:66"><name pos:start="161:5" pos:end="161:13">ost_table</name> <operator pos:start="161:15" pos:end="161:15">=</operator> <call pos:start="161:17" pos:end="161:66"><name pos:start="161:17" pos:end="161:26">av_mallocz</name><argument_list pos:start="161:27" pos:end="161:66">(<argument pos:start="161:28" pos:end="161:65"><expr pos:start="161:28" pos:end="161:65"><sizeof pos:start="161:28" pos:end="161:51">sizeof<argument_list pos:start="161:34" pos:end="161:51">(<argument pos:start="161:35" pos:end="161:50"><expr pos:start="161:35" pos:end="161:50"><name pos:start="161:35" pos:end="161:48">AVOutputStream</name> <operator pos:start="161:50" pos:end="161:50">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="161:53" pos:end="161:53">*</operator> <name pos:start="161:55" pos:end="161:65">nb_ostreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="165:18"><if pos:start="163:5" pos:end="165:18">if <condition pos:start="163:8" pos:end="163:19">(<expr pos:start="163:9" pos:end="163:18"><operator pos:start="163:9" pos:end="163:9">!</operator><name pos:start="163:10" pos:end="163:18">ost_table</name></expr>)</condition><block type="pseudo" pos:start="165:9" pos:end="165:18"><block_content pos:start="165:9" pos:end="165:18">

        <goto pos:start="165:9" pos:end="165:18">goto <name pos:start="165:14" pos:end="165:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="167:5" pos:end="177:5">for<control pos:start="167:8" pos:end="167:30">(<init pos:start="167:9" pos:end="167:12"><expr pos:start="167:9" pos:end="167:11"><name pos:start="167:9" pos:end="167:9">i</name><operator pos:start="167:10" pos:end="167:10">=</operator><literal type="number" pos:start="167:11" pos:end="167:11">0</literal></expr>;</init><condition pos:start="167:13" pos:end="167:26"><expr pos:start="167:13" pos:end="167:25"><name pos:start="167:13" pos:end="167:13">i</name><operator pos:start="167:14" pos:end="167:14">&lt;</operator><name pos:start="167:15" pos:end="167:25">nb_ostreams</name></expr>;</condition><incr pos:start="167:27" pos:end="167:29"><expr pos:start="167:27" pos:end="167:29"><name pos:start="167:27" pos:end="167:27">i</name><operator pos:start="167:28" pos:end="167:29">++</operator></expr></incr>)</control> <block pos:start="167:32" pos:end="177:5">{<block_content pos:start="169:9" pos:end="175:27">

        <expr_stmt pos:start="169:9" pos:end="169:49"><expr pos:start="169:9" pos:end="169:48"><name pos:start="169:9" pos:end="169:11">ost</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:48"><name pos:start="169:15" pos:end="169:24">av_mallocz</name><argument_list pos:start="169:25" pos:end="169:48">(<argument pos:start="169:26" pos:end="169:47"><expr pos:start="169:26" pos:end="169:47"><sizeof pos:start="169:26" pos:end="169:47">sizeof<argument_list pos:start="169:32" pos:end="169:47">(<argument pos:start="169:33" pos:end="169:46"><expr pos:start="169:33" pos:end="169:46"><name pos:start="169:33" pos:end="169:46">AVOutputStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="173:22"><if pos:start="171:9" pos:end="173:22">if <condition pos:start="171:12" pos:end="171:17">(<expr pos:start="171:13" pos:end="171:16"><operator pos:start="171:13" pos:end="171:13">!</operator><name pos:start="171:14" pos:end="171:16">ost</name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:22"><block_content pos:start="173:13" pos:end="173:22">

            <goto pos:start="173:13" pos:end="173:22">goto <name pos:start="173:18" pos:end="173:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:27"><expr pos:start="175:9" pos:end="175:26"><name pos:start="175:9" pos:end="175:20"><name pos:start="175:9" pos:end="175:17">ost_table</name><index pos:start="175:18" pos:end="175:20">[<expr pos:start="175:19" pos:end="175:19"><name pos:start="175:19" pos:end="175:19">i</name></expr>]</index></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <name pos:start="175:24" pos:end="175:26">ost</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    

    <expr_stmt pos:start="181:5" pos:end="181:10"><expr pos:start="181:5" pos:end="181:9"><name pos:start="181:5" pos:end="181:5">n</name> <operator pos:start="181:7" pos:end="181:7">=</operator> <literal type="number" pos:start="181:9" pos:end="181:9">0</literal></expr>;</expr_stmt>

    <for pos:start="183:5" pos:end="285:5">for<control pos:start="183:8" pos:end="183:34">(<init pos:start="183:9" pos:end="183:12"><expr pos:start="183:9" pos:end="183:11"><name pos:start="183:9" pos:end="183:9">k</name><operator pos:start="183:10" pos:end="183:10">=</operator><literal type="number" pos:start="183:11" pos:end="183:11">0</literal></expr>;</init><condition pos:start="183:13" pos:end="183:30"><expr pos:start="183:13" pos:end="183:29"><name pos:start="183:13" pos:end="183:13">k</name><operator pos:start="183:14" pos:end="183:14">&lt;</operator><name pos:start="183:15" pos:end="183:29">nb_output_files</name></expr>;</condition><incr pos:start="183:31" pos:end="183:33"><expr pos:start="183:31" pos:end="183:33"><name pos:start="183:31" pos:end="183:31">k</name><operator pos:start="183:32" pos:end="183:33">++</operator></expr></incr>)</control> <block pos:start="183:36" pos:end="285:5">{<block_content pos:start="185:9" pos:end="283:9">

        <expr_stmt pos:start="185:9" pos:end="185:29"><expr pos:start="185:9" pos:end="185:28"><name pos:start="185:9" pos:end="185:10">os</name> <operator pos:start="185:12" pos:end="185:12">=</operator> <name pos:start="185:14" pos:end="185:28"><name pos:start="185:14" pos:end="185:25">output_files</name><index pos:start="185:26" pos:end="185:28">[<expr pos:start="185:27" pos:end="185:27"><name pos:start="185:27" pos:end="185:27">k</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="187:9" pos:end="283:9">for<control pos:start="187:12" pos:end="187:37">(<init pos:start="187:13" pos:end="187:16"><expr pos:start="187:13" pos:end="187:15"><name pos:start="187:13" pos:end="187:13">i</name><operator pos:start="187:14" pos:end="187:14">=</operator><literal type="number" pos:start="187:15" pos:end="187:15">0</literal></expr>;</init><condition pos:start="187:17" pos:end="187:33"><expr pos:start="187:17" pos:end="187:32"><name pos:start="187:17" pos:end="187:17">i</name><operator pos:start="187:18" pos:end="187:18">&lt;</operator><name pos:start="187:19" pos:end="187:32"><name pos:start="187:19" pos:end="187:20">os</name><operator pos:start="187:21" pos:end="187:22">-&gt;</operator><name pos:start="187:23" pos:end="187:32">nb_streams</name></name></expr>;</condition><incr pos:start="187:34" pos:end="187:36"><expr pos:start="187:34" pos:end="187:36"><name pos:start="187:34" pos:end="187:34">i</name><operator pos:start="187:35" pos:end="187:36">++</operator></expr></incr>)</control> <block pos:start="187:39" pos:end="283:9">{<block_content pos:start="189:13" pos:end="281:29">

            <decl_stmt pos:start="189:13" pos:end="189:22"><decl pos:start="189:13" pos:end="189:21"><type pos:start="189:13" pos:end="189:15"><name pos:start="189:13" pos:end="189:15">int</name></type> <name pos:start="189:17" pos:end="189:21">found</name></decl>;</decl_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:33"><expr pos:start="191:13" pos:end="191:32"><name pos:start="191:13" pos:end="191:15">ost</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <name pos:start="191:19" pos:end="191:32"><name pos:start="191:19" pos:end="191:27">ost_table</name><index pos:start="191:28" pos:end="191:32">[<expr pos:start="191:29" pos:end="191:31"><name pos:start="191:29" pos:end="191:29">n</name><operator pos:start="191:30" pos:end="191:31">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:32"><expr pos:start="193:13" pos:end="193:31"><name pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:15">ost</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:27">file_index</name></name> <operator pos:start="193:29" pos:end="193:29">=</operator> <name pos:start="193:31" pos:end="193:31">k</name></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:27"><expr pos:start="195:13" pos:end="195:26"><name pos:start="195:13" pos:end="195:22"><name pos:start="195:13" pos:end="195:15">ost</name><operator pos:start="195:16" pos:end="195:17">-&gt;</operator><name pos:start="195:18" pos:end="195:22">index</name></name> <operator pos:start="195:24" pos:end="195:24">=</operator> <name pos:start="195:26" pos:end="195:26">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:37"><expr pos:start="197:13" pos:end="197:36"><name pos:start="197:13" pos:end="197:19"><name pos:start="197:13" pos:end="197:15">ost</name><operator pos:start="197:16" pos:end="197:17">-&gt;</operator><name pos:start="197:18" pos:end="197:19">st</name></name> <operator pos:start="197:21" pos:end="197:21">=</operator> <name pos:start="197:23" pos:end="197:36"><name pos:start="197:23" pos:end="197:24">os</name><operator pos:start="197:25" pos:end="197:26">-&gt;</operator><name pos:start="197:27" pos:end="197:33">streams</name><index pos:start="197:34" pos:end="197:36">[<expr pos:start="197:35" pos:end="197:35"><name pos:start="197:35" pos:end="197:35">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="277:13"><if pos:start="199:13" pos:end="223:13">if <condition pos:start="199:16" pos:end="199:35">(<expr pos:start="199:17" pos:end="199:34"><name pos:start="199:17" pos:end="199:30">nb_stream_maps</name> <operator pos:start="199:32" pos:end="199:32">&gt;</operator> <literal type="number" pos:start="199:34" pos:end="199:34">0</literal></expr>)</condition> <block pos:start="199:37" pos:end="223:13">{<block_content pos:start="201:17" pos:end="219:17">

                <expr_stmt pos:start="201:17" pos:end="203:50"><expr pos:start="201:17" pos:end="203:49"><name pos:start="201:17" pos:end="201:33"><name pos:start="201:17" pos:end="201:19">ost</name><operator pos:start="201:20" pos:end="201:21">-&gt;</operator><name pos:start="201:22" pos:end="201:33">source_index</name></name> <operator pos:start="201:35" pos:end="201:35">=</operator> <name pos:start="201:37" pos:end="201:75"><name pos:start="201:37" pos:end="201:46">file_table</name><index pos:start="201:47" pos:end="201:75">[<expr pos:start="201:48" pos:end="201:74"><name pos:start="201:48" pos:end="201:63"><name pos:start="201:48" pos:end="201:58">stream_maps</name><index pos:start="201:59" pos:end="201:63">[<expr pos:start="201:60" pos:end="201:62"><name pos:start="201:60" pos:end="201:60">n</name><operator pos:start="201:61" pos:end="201:61">-</operator><literal type="number" pos:start="201:62" pos:end="201:62">1</literal></expr>]</index></name><operator pos:start="201:64" pos:end="201:64">.</operator><name pos:start="201:65" pos:end="201:74">file_index</name></expr>]</index></name><operator pos:start="201:76" pos:end="201:76">.</operator><name pos:start="201:77" pos:end="201:85">ist_index</name> <operator pos:start="201:87" pos:end="201:87">+</operator> 

                    <name pos:start="203:21" pos:end="203:36"><name pos:start="203:21" pos:end="203:31">stream_maps</name><index pos:start="203:32" pos:end="203:36">[<expr pos:start="203:33" pos:end="203:35"><name pos:start="203:33" pos:end="203:33">n</name><operator pos:start="203:34" pos:end="203:34">-</operator><literal type="number" pos:start="203:35" pos:end="203:35">1</literal></expr>]</index></name><operator pos:start="203:37" pos:end="203:37">.</operator><name pos:start="203:38" pos:end="203:49">stream_index</name></expr>;</expr_stmt>

                    

                <comment type="block" pos:start="207:17" pos:end="207:62">/* Sanity check that the stream types match */</comment>

                <if_stmt pos:start="209:17" pos:end="219:17"><if pos:start="209:17" pos:end="219:17">if <condition pos:start="209:20" pos:end="209:100">(<expr pos:start="209:21" pos:end="209:99"><name pos:start="209:21" pos:end="209:48"><name pos:start="209:21" pos:end="209:29">ist_table</name><index pos:start="209:30" pos:end="209:48">[<expr pos:start="209:31" pos:end="209:47"><name pos:start="209:31" pos:end="209:47"><name pos:start="209:31" pos:end="209:33">ost</name><operator pos:start="209:34" pos:end="209:35">-&gt;</operator><name pos:start="209:36" pos:end="209:47">source_index</name></name></expr>]</index></name><operator pos:start="209:49" pos:end="209:50">-&gt;</operator><name pos:start="209:51" pos:end="209:70"><name pos:start="209:51" pos:end="209:52">st</name><operator pos:start="209:53" pos:end="209:54">-&gt;</operator><name pos:start="209:55" pos:end="209:59">codec</name><operator pos:start="209:60" pos:end="209:60">.</operator><name pos:start="209:61" pos:end="209:70">codec_type</name></name> <operator pos:start="209:72" pos:end="209:73">!=</operator> <name pos:start="209:75" pos:end="209:99"><name pos:start="209:75" pos:end="209:77">ost</name><operator pos:start="209:78" pos:end="209:79">-&gt;</operator><name pos:start="209:80" pos:end="209:81">st</name><operator pos:start="209:82" pos:end="209:83">-&gt;</operator><name pos:start="209:84" pos:end="209:88">codec</name><operator pos:start="209:89" pos:end="209:89">.</operator><name pos:start="209:90" pos:end="209:99">codec_type</name></name></expr>)</condition> <block pos:start="209:102" pos:end="219:17">{<block_content pos:start="211:21" pos:end="217:28">

                    <expr_stmt pos:start="211:21" pos:end="215:53"><expr pos:start="211:21" pos:end="215:52"><call pos:start="211:21" pos:end="215:52"><name pos:start="211:21" pos:end="211:27">fprintf</name><argument_list pos:start="211:28" pos:end="215:52">(<argument pos:start="211:29" pos:end="211:34"><expr pos:start="211:29" pos:end="211:34"><name pos:start="211:29" pos:end="211:34">stderr</name></expr></argument>, <argument pos:start="211:37" pos:end="211:88"><expr pos:start="211:37" pos:end="211:88"><literal type="string" pos:start="211:37" pos:end="211:88">"Codec type mismatch for mapping #%d.%d -&gt; #%d.%d\n"</literal></expr></argument>,

                        <argument pos:start="213:25" pos:end="213:51"><expr pos:start="213:25" pos:end="213:51"><name pos:start="213:25" pos:end="213:40"><name pos:start="213:25" pos:end="213:35">stream_maps</name><index pos:start="213:36" pos:end="213:40">[<expr pos:start="213:37" pos:end="213:39"><name pos:start="213:37" pos:end="213:37">n</name><operator pos:start="213:38" pos:end="213:38">-</operator><literal type="number" pos:start="213:39" pos:end="213:39">1</literal></expr>]</index></name><operator pos:start="213:41" pos:end="213:41">.</operator><name pos:start="213:42" pos:end="213:51">file_index</name></expr></argument>, <argument pos:start="213:54" pos:end="213:82"><expr pos:start="213:54" pos:end="213:82"><name pos:start="213:54" pos:end="213:69"><name pos:start="213:54" pos:end="213:64">stream_maps</name><index pos:start="213:65" pos:end="213:69">[<expr pos:start="213:66" pos:end="213:68"><name pos:start="213:66" pos:end="213:66">n</name><operator pos:start="213:67" pos:end="213:67">-</operator><literal type="number" pos:start="213:68" pos:end="213:68">1</literal></expr>]</index></name><operator pos:start="213:70" pos:end="213:70">.</operator><name pos:start="213:71" pos:end="213:82">stream_index</name></expr></argument>,

                        <argument pos:start="215:25" pos:end="215:39"><expr pos:start="215:25" pos:end="215:39"><name pos:start="215:25" pos:end="215:39"><name pos:start="215:25" pos:end="215:27">ost</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:39">file_index</name></name></expr></argument>, <argument pos:start="215:42" pos:end="215:51"><expr pos:start="215:42" pos:end="215:51"><name pos:start="215:42" pos:end="215:51"><name pos:start="215:42" pos:end="215:44">ost</name><operator pos:start="215:45" pos:end="215:46">-&gt;</operator><name pos:start="215:47" pos:end="215:51">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:28"><expr pos:start="217:21" pos:end="217:27"><call pos:start="217:21" pos:end="217:27"><name pos:start="217:21" pos:end="217:24">exit</name><argument_list pos:start="217:25" pos:end="217:27">(<argument pos:start="217:26" pos:end="217:26"><expr pos:start="217:26" pos:end="217:26"><literal type="number" pos:start="217:26" pos:end="217:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                

            </block_content>}</block></if> <else pos:start="223:15" pos:end="277:13">else <block pos:start="223:20" pos:end="277:13">{<block_content pos:start="227:17" pos:end="275:17">

                <comment type="block" pos:start="225:17" pos:end="225:104">/* get corresponding input stream index : we select the first one with the right type */</comment>

                <expr_stmt pos:start="227:17" pos:end="227:26"><expr pos:start="227:17" pos:end="227:25"><name pos:start="227:17" pos:end="227:21">found</name> <operator pos:start="227:23" pos:end="227:23">=</operator> <literal type="number" pos:start="227:25" pos:end="227:25">0</literal></expr>;</expr_stmt>

                <for pos:start="229:17" pos:end="243:17">for<control pos:start="229:20" pos:end="229:42">(<init pos:start="229:21" pos:end="229:24"><expr pos:start="229:21" pos:end="229:23"><name pos:start="229:21" pos:end="229:21">j</name><operator pos:start="229:22" pos:end="229:22">=</operator><literal type="number" pos:start="229:23" pos:end="229:23">0</literal></expr>;</init><condition pos:start="229:25" pos:end="229:38"><expr pos:start="229:25" pos:end="229:37"><name pos:start="229:25" pos:end="229:25">j</name><operator pos:start="229:26" pos:end="229:26">&lt;</operator><name pos:start="229:27" pos:end="229:37">nb_istreams</name></expr>;</condition><incr pos:start="229:39" pos:end="229:41"><expr pos:start="229:39" pos:end="229:41"><name pos:start="229:39" pos:end="229:39">j</name><operator pos:start="229:40" pos:end="229:41">++</operator></expr></incr>)</control> <block pos:start="229:44" pos:end="243:17">{<block_content pos:start="231:21" pos:end="241:21">

                    <expr_stmt pos:start="231:21" pos:end="231:39"><expr pos:start="231:21" pos:end="231:38"><name pos:start="231:21" pos:end="231:23">ist</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <name pos:start="231:27" pos:end="231:38"><name pos:start="231:27" pos:end="231:35">ist_table</name><index pos:start="231:36" pos:end="231:38">[<expr pos:start="231:37" pos:end="231:37"><name pos:start="231:37" pos:end="231:37">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="233:21" pos:end="241:21"><if pos:start="233:21" pos:end="241:21">if <condition pos:start="233:24" pos:end="235:79">(<expr pos:start="233:25" pos:end="235:78"><name pos:start="233:25" pos:end="233:36"><name pos:start="233:25" pos:end="233:27">ist</name><operator pos:start="233:28" pos:end="233:29">-&gt;</operator><name pos:start="233:30" pos:end="233:36">discard</name></name> <operator pos:start="233:38" pos:end="233:39">&amp;&amp;</operator> 

                        <name pos:start="235:25" pos:end="235:49"><name pos:start="235:25" pos:end="235:27">ist</name><operator pos:start="235:28" pos:end="235:29">-&gt;</operator><name pos:start="235:30" pos:end="235:31">st</name><operator pos:start="235:32" pos:end="235:33">-&gt;</operator><name pos:start="235:34" pos:end="235:38">codec</name><operator pos:start="235:39" pos:end="235:39">.</operator><name pos:start="235:40" pos:end="235:49">codec_type</name></name> <operator pos:start="235:51" pos:end="235:52">==</operator> <name pos:start="235:54" pos:end="235:78"><name pos:start="235:54" pos:end="235:56">ost</name><operator pos:start="235:57" pos:end="235:58">-&gt;</operator><name pos:start="235:59" pos:end="235:60">st</name><operator pos:start="235:61" pos:end="235:62">-&gt;</operator><name pos:start="235:63" pos:end="235:67">codec</name><operator pos:start="235:68" pos:end="235:68">.</operator><name pos:start="235:69" pos:end="235:78">codec_type</name></name></expr>)</condition> <block pos:start="235:81" pos:end="241:21">{<block_content pos:start="237:25" pos:end="239:34">

                        <expr_stmt pos:start="237:25" pos:end="237:46"><expr pos:start="237:25" pos:end="237:45"><name pos:start="237:25" pos:end="237:41"><name pos:start="237:25" pos:end="237:27">ost</name><operator pos:start="237:28" pos:end="237:29">-&gt;</operator><name pos:start="237:30" pos:end="237:41">source_index</name></name> <operator pos:start="237:43" pos:end="237:43">=</operator> <name pos:start="237:45" pos:end="237:45">j</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="239:25" pos:end="239:34"><expr pos:start="239:25" pos:end="239:33"><name pos:start="239:25" pos:end="239:29">found</name> <operator pos:start="239:31" pos:end="239:31">=</operator> <literal type="number" pos:start="239:33" pos:end="239:33">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                

                <if_stmt pos:start="247:17" pos:end="275:17"><if pos:start="247:17" pos:end="275:17">if <condition pos:start="247:20" pos:end="247:27">(<expr pos:start="247:21" pos:end="247:26"><operator pos:start="247:21" pos:end="247:21">!</operator><name pos:start="247:22" pos:end="247:26">found</name></expr>)</condition> <block pos:start="247:29" pos:end="275:17">{<block_content pos:start="251:21" pos:end="273:21">

                    <comment type="block" pos:start="249:21" pos:end="249:61">/* try again and reuse existing stream */</comment>

                    <for pos:start="251:21" pos:end="263:21">for<control pos:start="251:24" pos:end="251:46">(<init pos:start="251:25" pos:end="251:28"><expr pos:start="251:25" pos:end="251:27"><name pos:start="251:25" pos:end="251:25">j</name><operator pos:start="251:26" pos:end="251:26">=</operator><literal type="number" pos:start="251:27" pos:end="251:27">0</literal></expr>;</init><condition pos:start="251:29" pos:end="251:42"><expr pos:start="251:29" pos:end="251:41"><name pos:start="251:29" pos:end="251:29">j</name><operator pos:start="251:30" pos:end="251:30">&lt;</operator><name pos:start="251:31" pos:end="251:41">nb_istreams</name></expr>;</condition><incr pos:start="251:43" pos:end="251:45"><expr pos:start="251:43" pos:end="251:45"><name pos:start="251:43" pos:end="251:43">j</name><operator pos:start="251:44" pos:end="251:45">++</operator></expr></incr>)</control> <block pos:start="251:48" pos:end="263:21">{<block_content pos:start="253:25" pos:end="261:25">

                        <expr_stmt pos:start="253:25" pos:end="253:43"><expr pos:start="253:25" pos:end="253:42"><name pos:start="253:25" pos:end="253:27">ist</name> <operator pos:start="253:29" pos:end="253:29">=</operator> <name pos:start="253:31" pos:end="253:42"><name pos:start="253:31" pos:end="253:39">ist_table</name><index pos:start="253:40" pos:end="253:42">[<expr pos:start="253:41" pos:end="253:41"><name pos:start="253:41" pos:end="253:41">j</name></expr>]</index></name></expr>;</expr_stmt>

                        <if_stmt pos:start="255:25" pos:end="261:25"><if pos:start="255:25" pos:end="261:25">if <condition pos:start="255:28" pos:end="255:83">(<expr pos:start="255:29" pos:end="255:82"><name pos:start="255:29" pos:end="255:53"><name pos:start="255:29" pos:end="255:31">ist</name><operator pos:start="255:32" pos:end="255:33">-&gt;</operator><name pos:start="255:34" pos:end="255:35">st</name><operator pos:start="255:36" pos:end="255:37">-&gt;</operator><name pos:start="255:38" pos:end="255:42">codec</name><operator pos:start="255:43" pos:end="255:43">.</operator><name pos:start="255:44" pos:end="255:53">codec_type</name></name> <operator pos:start="255:55" pos:end="255:56">==</operator> <name pos:start="255:58" pos:end="255:82"><name pos:start="255:58" pos:end="255:60">ost</name><operator pos:start="255:61" pos:end="255:62">-&gt;</operator><name pos:start="255:63" pos:end="255:64">st</name><operator pos:start="255:65" pos:end="255:66">-&gt;</operator><name pos:start="255:67" pos:end="255:71">codec</name><operator pos:start="255:72" pos:end="255:72">.</operator><name pos:start="255:73" pos:end="255:82">codec_type</name></name></expr>)</condition> <block pos:start="255:85" pos:end="261:25">{<block_content pos:start="257:29" pos:end="259:38">

                            <expr_stmt pos:start="257:29" pos:end="257:50"><expr pos:start="257:29" pos:end="257:49"><name pos:start="257:29" pos:end="257:45"><name pos:start="257:29" pos:end="257:31">ost</name><operator pos:start="257:32" pos:end="257:33">-&gt;</operator><name pos:start="257:34" pos:end="257:45">source_index</name></name> <operator pos:start="257:47" pos:end="257:47">=</operator> <name pos:start="257:49" pos:end="257:49">j</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="259:29" pos:end="259:38"><expr pos:start="259:29" pos:end="259:37"><name pos:start="259:29" pos:end="259:33">found</name> <operator pos:start="259:35" pos:end="259:35">=</operator> <literal type="number" pos:start="259:37" pos:end="259:37">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                    <if_stmt pos:start="265:21" pos:end="273:21"><if pos:start="265:21" pos:end="273:21">if <condition pos:start="265:24" pos:end="265:31">(<expr pos:start="265:25" pos:end="265:30"><operator pos:start="265:25" pos:end="265:25">!</operator><name pos:start="265:26" pos:end="265:30">found</name></expr>)</condition> <block pos:start="265:33" pos:end="273:21">{<block_content pos:start="267:25" pos:end="271:32">

                        <expr_stmt pos:start="267:25" pos:end="269:61"><expr pos:start="267:25" pos:end="269:60"><call pos:start="267:25" pos:end="269:60"><name pos:start="267:25" pos:end="267:31">fprintf</name><argument_list pos:start="267:32" pos:end="269:60">(<argument pos:start="267:33" pos:end="267:38"><expr pos:start="267:33" pos:end="267:38"><name pos:start="267:33" pos:end="267:38">stderr</name></expr></argument>, <argument pos:start="267:41" pos:end="267:101"><expr pos:start="267:41" pos:end="267:101"><literal type="string" pos:start="267:41" pos:end="267:101">"Could not find input stream matching output stream #%d.%d\n"</literal></expr></argument>,

                                <argument pos:start="269:33" pos:end="269:47"><expr pos:start="269:33" pos:end="269:47"><name pos:start="269:33" pos:end="269:47"><name pos:start="269:33" pos:end="269:35">ost</name><operator pos:start="269:36" pos:end="269:37">-&gt;</operator><name pos:start="269:38" pos:end="269:47">file_index</name></name></expr></argument>, <argument pos:start="269:50" pos:end="269:59"><expr pos:start="269:50" pos:end="269:59"><name pos:start="269:50" pos:end="269:59"><name pos:start="269:50" pos:end="269:52">ost</name><operator pos:start="269:53" pos:end="269:54">-&gt;</operator><name pos:start="269:55" pos:end="269:59">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="271:25" pos:end="271:32"><expr pos:start="271:25" pos:end="271:31"><call pos:start="271:25" pos:end="271:31"><name pos:start="271:25" pos:end="271:28">exit</name><argument_list pos:start="271:29" pos:end="271:31">(<argument pos:start="271:30" pos:end="271:30"><expr pos:start="271:30" pos:end="271:30"><literal type="number" pos:start="271:30" pos:end="271:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:47"><expr pos:start="279:13" pos:end="279:46"><name pos:start="279:13" pos:end="279:15">ist</name> <operator pos:start="279:17" pos:end="279:17">=</operator> <name pos:start="279:19" pos:end="279:46"><name pos:start="279:19" pos:end="279:27">ist_table</name><index pos:start="279:28" pos:end="279:46">[<expr pos:start="279:29" pos:end="279:45"><name pos:start="279:29" pos:end="279:45"><name pos:start="279:29" pos:end="279:31">ost</name><operator pos:start="279:32" pos:end="279:33">-&gt;</operator><name pos:start="279:34" pos:end="279:45">source_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:29"><expr pos:start="281:13" pos:end="281:28"><name pos:start="281:13" pos:end="281:24"><name pos:start="281:13" pos:end="281:15">ist</name><operator pos:start="281:16" pos:end="281:17">-&gt;</operator><name pos:start="281:18" pos:end="281:24">discard</name></name> <operator pos:start="281:26" pos:end="281:26">=</operator> <literal type="number" pos:start="281:28" pos:end="281:28">0</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="289:5" pos:end="289:74">/* for each output stream, we compute the right encoding parameters */</comment>

    <for pos:start="291:5" pos:end="593:5">for<control pos:start="291:8" pos:end="291:30">(<init pos:start="291:9" pos:end="291:12"><expr pos:start="291:9" pos:end="291:11"><name pos:start="291:9" pos:end="291:9">i</name><operator pos:start="291:10" pos:end="291:10">=</operator><literal type="number" pos:start="291:11" pos:end="291:11">0</literal></expr>;</init><condition pos:start="291:13" pos:end="291:26"><expr pos:start="291:13" pos:end="291:25"><name pos:start="291:13" pos:end="291:13">i</name><operator pos:start="291:14" pos:end="291:14">&lt;</operator><name pos:start="291:15" pos:end="291:25">nb_ostreams</name></expr>;</condition><incr pos:start="291:27" pos:end="291:29"><expr pos:start="291:27" pos:end="291:29"><name pos:start="291:27" pos:end="291:27">i</name><operator pos:start="291:28" pos:end="291:29">++</operator></expr></incr>)</control> <block pos:start="291:32" pos:end="593:5">{<block_content pos:start="293:9" pos:end="591:9">

        <expr_stmt pos:start="293:9" pos:end="293:27"><expr pos:start="293:9" pos:end="293:26"><name pos:start="293:9" pos:end="293:11">ost</name> <operator pos:start="293:13" pos:end="293:13">=</operator> <name pos:start="293:15" pos:end="293:26"><name pos:start="293:15" pos:end="293:23">ost_table</name><index pos:start="293:24" pos:end="293:26">[<expr pos:start="293:25" pos:end="293:25"><name pos:start="293:25" pos:end="293:25">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:43"><expr pos:start="295:9" pos:end="295:42"><name pos:start="295:9" pos:end="295:11">ist</name> <operator pos:start="295:13" pos:end="295:13">=</operator> <name pos:start="295:15" pos:end="295:42"><name pos:start="295:15" pos:end="295:23">ist_table</name><index pos:start="295:24" pos:end="295:42">[<expr pos:start="295:25" pos:end="295:41"><name pos:start="295:25" pos:end="295:41"><name pos:start="295:25" pos:end="295:27">ost</name><operator pos:start="295:28" pos:end="295:29">-&gt;</operator><name pos:start="295:30" pos:end="295:41">source_index</name></name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="299:9" pos:end="299:32"><expr pos:start="299:9" pos:end="299:31"><name pos:start="299:9" pos:end="299:13">codec</name> <operator pos:start="299:15" pos:end="299:15">=</operator> <operator pos:start="299:17" pos:end="299:17">&amp;</operator><name pos:start="299:18" pos:end="299:31"><name pos:start="299:18" pos:end="299:20">ost</name><operator pos:start="299:21" pos:end="299:22">-&gt;</operator><name pos:start="299:23" pos:end="299:24">st</name><operator pos:start="299:25" pos:end="299:26">-&gt;</operator><name pos:start="299:27" pos:end="299:31">codec</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:33"><expr pos:start="301:9" pos:end="301:32"><name pos:start="301:9" pos:end="301:14">icodec</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <operator pos:start="301:18" pos:end="301:18">&amp;</operator><name pos:start="301:19" pos:end="301:32"><name pos:start="301:19" pos:end="301:21">ist</name><operator pos:start="301:22" pos:end="301:23">-&gt;</operator><name pos:start="301:24" pos:end="301:25">st</name><operator pos:start="301:26" pos:end="301:27">-&gt;</operator><name pos:start="301:28" pos:end="301:32">codec</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="305:9" pos:end="591:9"><if pos:start="305:9" pos:end="345:9">if <condition pos:start="305:12" pos:end="305:33">(<expr pos:start="305:13" pos:end="305:32"><name pos:start="305:13" pos:end="305:32"><name pos:start="305:13" pos:end="305:15">ost</name><operator pos:start="305:16" pos:end="305:17">-&gt;</operator><name pos:start="305:18" pos:end="305:19">st</name><operator pos:start="305:20" pos:end="305:21">-&gt;</operator><name pos:start="305:22" pos:end="305:32">stream_copy</name></name></expr>)</condition> <block pos:start="305:35" pos:end="345:9">{<block_content pos:start="309:13" pos:end="343:13">

            <comment type="block" pos:start="307:13" pos:end="307:73">/* if stream_copy is selected, no need to decode or encode */</comment>

            <expr_stmt pos:start="309:13" pos:end="309:47"><expr pos:start="309:13" pos:end="309:46"><name pos:start="309:13" pos:end="309:27"><name pos:start="309:13" pos:end="309:17">codec</name><operator pos:start="309:18" pos:end="309:19">-&gt;</operator><name pos:start="309:20" pos:end="309:27">codec_id</name></name> <operator pos:start="309:29" pos:end="309:29">=</operator> <name pos:start="309:31" pos:end="309:46"><name pos:start="309:31" pos:end="309:36">icodec</name><operator pos:start="309:37" pos:end="309:38">-&gt;</operator><name pos:start="309:39" pos:end="309:46">codec_id</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:51"><expr pos:start="311:13" pos:end="311:50"><name pos:start="311:13" pos:end="311:29"><name pos:start="311:13" pos:end="311:17">codec</name><operator pos:start="311:18" pos:end="311:19">-&gt;</operator><name pos:start="311:20" pos:end="311:29">codec_type</name></name> <operator pos:start="311:31" pos:end="311:31">=</operator> <name pos:start="311:33" pos:end="311:50"><name pos:start="311:33" pos:end="311:38">icodec</name><operator pos:start="311:39" pos:end="311:40">-&gt;</operator><name pos:start="311:41" pos:end="311:50">codec_type</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:49"><expr pos:start="313:13" pos:end="313:48"><name pos:start="313:13" pos:end="313:28"><name pos:start="313:13" pos:end="313:17">codec</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:28">codec_tag</name></name> <operator pos:start="313:30" pos:end="313:30">=</operator> <name pos:start="313:32" pos:end="313:48"><name pos:start="313:32" pos:end="313:37">icodec</name><operator pos:start="313:38" pos:end="313:39">-&gt;</operator><name pos:start="313:40" pos:end="313:48">codec_tag</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:47"><expr pos:start="315:13" pos:end="315:46"><name pos:start="315:13" pos:end="315:27"><name pos:start="315:13" pos:end="315:17">codec</name><operator pos:start="315:18" pos:end="315:19">-&gt;</operator><name pos:start="315:20" pos:end="315:27">bit_rate</name></name> <operator pos:start="315:29" pos:end="315:29">=</operator> <name pos:start="315:31" pos:end="315:46"><name pos:start="315:31" pos:end="315:36">icodec</name><operator pos:start="315:37" pos:end="315:38">-&gt;</operator><name pos:start="315:39" pos:end="315:46">bit_rate</name></name></expr>;</expr_stmt>

            <switch pos:start="317:13" pos:end="343:13">switch<condition pos:start="317:19" pos:end="317:37">(<expr pos:start="317:20" pos:end="317:36"><name pos:start="317:20" pos:end="317:36"><name pos:start="317:20" pos:end="317:24">codec</name><operator pos:start="317:25" pos:end="317:26">-&gt;</operator><name pos:start="317:27" pos:end="317:36">codec_type</name></name></expr>)</condition> <block pos:start="317:39" pos:end="343:13">{<block_content pos:start="319:13" pos:end="341:27">

            <case pos:start="319:13" pos:end="319:34">case <expr pos:start="319:18" pos:end="319:33"><name pos:start="319:18" pos:end="319:33">CODEC_TYPE_AUDIO</name></expr>:</case>

                <expr_stmt pos:start="321:17" pos:end="321:57"><expr pos:start="321:17" pos:end="321:56"><name pos:start="321:17" pos:end="321:34"><name pos:start="321:17" pos:end="321:21">codec</name><operator pos:start="321:22" pos:end="321:23">-&gt;</operator><name pos:start="321:24" pos:end="321:34">sample_rate</name></name> <operator pos:start="321:36" pos:end="321:36">=</operator> <name pos:start="321:38" pos:end="321:56"><name pos:start="321:38" pos:end="321:43">icodec</name><operator pos:start="321:44" pos:end="321:45">-&gt;</operator><name pos:start="321:46" pos:end="321:56">sample_rate</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="323:17" pos:end="323:51"><expr pos:start="323:17" pos:end="323:50"><name pos:start="323:17" pos:end="323:31"><name pos:start="323:17" pos:end="323:21">codec</name><operator pos:start="323:22" pos:end="323:23">-&gt;</operator><name pos:start="323:24" pos:end="323:31">channels</name></name> <operator pos:start="323:33" pos:end="323:33">=</operator> <name pos:start="323:35" pos:end="323:50"><name pos:start="323:35" pos:end="323:40">icodec</name><operator pos:start="323:41" pos:end="323:42">-&gt;</operator><name pos:start="323:43" pos:end="323:50">channels</name></name></expr>;</expr_stmt>

                <break pos:start="325:17" pos:end="325:22">break;</break>

            <case pos:start="327:13" pos:end="327:34">case <expr pos:start="327:18" pos:end="327:33"><name pos:start="327:18" pos:end="327:33">CODEC_TYPE_VIDEO</name></expr>:</case>

                <expr_stmt pos:start="329:17" pos:end="329:55"><expr pos:start="329:17" pos:end="329:54"><name pos:start="329:17" pos:end="329:33"><name pos:start="329:17" pos:end="329:21">codec</name><operator pos:start="329:22" pos:end="329:23">-&gt;</operator><name pos:start="329:24" pos:end="329:33">frame_rate</name></name> <operator pos:start="329:35" pos:end="329:35">=</operator> <name pos:start="329:37" pos:end="329:54"><name pos:start="329:37" pos:end="329:42">icodec</name><operator pos:start="329:43" pos:end="329:44">-&gt;</operator><name pos:start="329:45" pos:end="329:54">frame_rate</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:65"><expr pos:start="331:17" pos:end="331:64"><name pos:start="331:17" pos:end="331:38"><name pos:start="331:17" pos:end="331:21">codec</name><operator pos:start="331:22" pos:end="331:23">-&gt;</operator><name pos:start="331:24" pos:end="331:38">frame_rate_base</name></name> <operator pos:start="331:40" pos:end="331:40">=</operator> <name pos:start="331:42" pos:end="331:64"><name pos:start="331:42" pos:end="331:47">icodec</name><operator pos:start="331:48" pos:end="331:49">-&gt;</operator><name pos:start="331:50" pos:end="331:64">frame_rate_base</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:45"><expr pos:start="333:17" pos:end="333:44"><name pos:start="333:17" pos:end="333:28"><name pos:start="333:17" pos:end="333:21">codec</name><operator pos:start="333:22" pos:end="333:23">-&gt;</operator><name pos:start="333:24" pos:end="333:28">width</name></name> <operator pos:start="333:30" pos:end="333:30">=</operator> <name pos:start="333:32" pos:end="333:44"><name pos:start="333:32" pos:end="333:37">icodec</name><operator pos:start="333:38" pos:end="333:39">-&gt;</operator><name pos:start="333:40" pos:end="333:44">width</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:47"><expr pos:start="335:17" pos:end="335:46"><name pos:start="335:17" pos:end="335:29"><name pos:start="335:17" pos:end="335:21">codec</name><operator pos:start="335:22" pos:end="335:23">-&gt;</operator><name pos:start="335:24" pos:end="335:29">height</name></name> <operator pos:start="335:31" pos:end="335:31">=</operator> <name pos:start="335:33" pos:end="335:46"><name pos:start="335:33" pos:end="335:38">icodec</name><operator pos:start="335:39" pos:end="335:40">-&gt;</operator><name pos:start="335:41" pos:end="335:46">height</name></name></expr>;</expr_stmt>

                <break pos:start="337:17" pos:end="337:22">break;</break>

            <default pos:start="339:13" pos:end="339:20">default:</default>

                <expr_stmt pos:start="341:17" pos:end="341:27"><expr pos:start="341:17" pos:end="341:26"><call pos:start="341:17" pos:end="341:26"><name pos:start="341:17" pos:end="341:24">av_abort</name><argument_list pos:start="341:25" pos:end="341:26">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="345:11" pos:end="591:9">else <block pos:start="345:16" pos:end="591:9">{<block_content pos:start="347:13" pos:end="589:13">

            <switch pos:start="347:13" pos:end="511:13">switch<condition pos:start="347:19" pos:end="347:37">(<expr pos:start="347:20" pos:end="347:36"><name pos:start="347:20" pos:end="347:36"><name pos:start="347:20" pos:end="347:24">codec</name><operator pos:start="347:25" pos:end="347:26">-&gt;</operator><name pos:start="347:27" pos:end="347:36">codec_type</name></name></expr>)</condition> <block pos:start="347:39" pos:end="511:13">{<block_content pos:start="349:13" pos:end="509:27">

            <case pos:start="349:13" pos:end="349:34">case <expr pos:start="349:18" pos:end="349:33"><name pos:start="349:18" pos:end="349:33">CODEC_TYPE_AUDIO</name></expr>:</case>

                <if_stmt pos:start="351:17" pos:end="353:30"><if pos:start="351:17" pos:end="353:30">if <condition pos:start="351:20" pos:end="351:69">(<expr pos:start="351:21" pos:end="351:68"><call pos:start="351:21" pos:end="351:68"><name pos:start="351:21" pos:end="351:29">fifo_init</name><argument_list pos:start="351:30" pos:end="351:68">(<argument pos:start="351:31" pos:end="351:40"><expr pos:start="351:31" pos:end="351:40"><operator pos:start="351:31" pos:end="351:31">&amp;</operator><name pos:start="351:32" pos:end="351:40"><name pos:start="351:32" pos:end="351:34">ost</name><operator pos:start="351:35" pos:end="351:36">-&gt;</operator><name pos:start="351:37" pos:end="351:40">fifo</name></name></expr></argument>, <argument pos:start="351:43" pos:end="351:67"><expr pos:start="351:43" pos:end="351:67"><literal type="number" pos:start="351:43" pos:end="351:43">2</literal> <operator pos:start="351:45" pos:end="351:45">*</operator> <name pos:start="351:47" pos:end="351:67">MAX_AUDIO_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="353:21" pos:end="353:30"><block_content pos:start="353:21" pos:end="353:30">

                    <goto pos:start="353:21" pos:end="353:30">goto <name pos:start="353:26" pos:end="353:29">fail</name>;</goto></block_content></block></if></if_stmt>

                

                <if_stmt pos:start="357:17" pos:end="429:17"><if pos:start="357:17" pos:end="363:17">if <condition pos:start="357:20" pos:end="359:62">(<expr pos:start="357:21" pos:end="359:61"><name pos:start="357:21" pos:end="357:35"><name pos:start="357:21" pos:end="357:25">codec</name><operator pos:start="357:26" pos:end="357:27">-&gt;</operator><name pos:start="357:28" pos:end="357:35">channels</name></name> <operator pos:start="357:37" pos:end="357:38">==</operator> <name pos:start="357:40" pos:end="357:55"><name pos:start="357:40" pos:end="357:45">icodec</name><operator pos:start="357:46" pos:end="357:47">-&gt;</operator><name pos:start="357:48" pos:end="357:55">channels</name></name> <operator pos:start="357:57" pos:end="357:58">&amp;&amp;</operator>

                    <name pos:start="359:21" pos:end="359:38"><name pos:start="359:21" pos:end="359:25">codec</name><operator pos:start="359:26" pos:end="359:27">-&gt;</operator><name pos:start="359:28" pos:end="359:38">sample_rate</name></name> <operator pos:start="359:40" pos:end="359:41">==</operator> <name pos:start="359:43" pos:end="359:61"><name pos:start="359:43" pos:end="359:48">icodec</name><operator pos:start="359:49" pos:end="359:50">-&gt;</operator><name pos:start="359:51" pos:end="359:61">sample_rate</name></name></expr>)</condition> <block pos:start="359:64" pos:end="363:17">{<block_content pos:start="361:21" pos:end="361:44">

                    <expr_stmt pos:start="361:21" pos:end="361:44"><expr pos:start="361:21" pos:end="361:43"><name pos:start="361:21" pos:end="361:39"><name pos:start="361:21" pos:end="361:23">ost</name><operator pos:start="361:24" pos:end="361:25">-&gt;</operator><name pos:start="361:26" pos:end="361:39">audio_resample</name></name> <operator pos:start="361:41" pos:end="361:41">=</operator> <literal type="number" pos:start="361:43" pos:end="361:43">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="363:19" pos:end="429:17">else <block pos:start="363:24" pos:end="429:17">{<block_content pos:start="365:21" pos:end="427:21">

                    <if_stmt pos:start="365:21" pos:end="427:21"><if pos:start="365:21" pos:end="407:21">if <condition pos:start="365:24" pos:end="367:57">(<expr pos:start="365:25" pos:end="367:56"><name pos:start="365:25" pos:end="365:39"><name pos:start="365:25" pos:end="365:29">codec</name><operator pos:start="365:30" pos:end="365:31">-&gt;</operator><name pos:start="365:32" pos:end="365:39">channels</name></name> <operator pos:start="365:41" pos:end="365:42">!=</operator> <name pos:start="365:44" pos:end="365:59"><name pos:start="365:44" pos:end="365:49">icodec</name><operator pos:start="365:50" pos:end="365:51">-&gt;</operator><name pos:start="365:52" pos:end="365:59">channels</name></name> <operator pos:start="365:61" pos:end="365:62">&amp;&amp;</operator>

                        <name pos:start="367:25" pos:end="367:40"><name pos:start="367:25" pos:end="367:30">icodec</name><operator pos:start="367:31" pos:end="367:32">-&gt;</operator><name pos:start="367:33" pos:end="367:40">codec_id</name></name> <operator pos:start="367:42" pos:end="367:43">==</operator> <name pos:start="367:45" pos:end="367:56">CODEC_ID_AC3</name></expr>)</condition> <block pos:start="367:59" pos:end="407:21">{<block_content pos:start="375:25" pos:end="405:59">

                        <comment type="block" pos:start="369:25" pos:end="369:60">/* Special case for 5:1 AC3 input */</comment>

                        <comment type="block" pos:start="371:25" pos:end="371:60">/* and mono or stereo output      */</comment>

                        <comment type="block" pos:start="373:25" pos:end="373:65">/* Request specific number of channels */</comment>

                        <expr_stmt pos:start="375:25" pos:end="375:59"><expr pos:start="375:25" pos:end="375:58"><name pos:start="375:25" pos:end="375:40"><name pos:start="375:25" pos:end="375:30">icodec</name><operator pos:start="375:31" pos:end="375:32">-&gt;</operator><name pos:start="375:33" pos:end="375:40">channels</name></name> <operator pos:start="375:42" pos:end="375:42">=</operator> <name pos:start="375:44" pos:end="375:58"><name pos:start="375:44" pos:end="375:48">codec</name><operator pos:start="375:49" pos:end="375:50">-&gt;</operator><name pos:start="375:51" pos:end="375:58">channels</name></name></expr>;</expr_stmt>

                        <if_stmt pos:start="377:25" pos:end="401:25"><if pos:start="377:25" pos:end="379:52">if <condition pos:start="377:28" pos:end="377:70">(<expr pos:start="377:29" pos:end="377:69"><name pos:start="377:29" pos:end="377:46"><name pos:start="377:29" pos:end="377:33">codec</name><operator pos:start="377:34" pos:end="377:35">-&gt;</operator><name pos:start="377:36" pos:end="377:46">sample_rate</name></name> <operator pos:start="377:48" pos:end="377:49">==</operator> <name pos:start="377:51" pos:end="377:69"><name pos:start="377:51" pos:end="377:56">icodec</name><operator pos:start="377:57" pos:end="377:58">-&gt;</operator><name pos:start="377:59" pos:end="377:69">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="379:29" pos:end="379:52"><block_content pos:start="379:29" pos:end="379:52">

                            <expr_stmt pos:start="379:29" pos:end="379:52"><expr pos:start="379:29" pos:end="379:51"><name pos:start="379:29" pos:end="379:47"><name pos:start="379:29" pos:end="379:31">ost</name><operator pos:start="379:32" pos:end="379:33">-&gt;</operator><name pos:start="379:34" pos:end="379:47">audio_resample</name></name> <operator pos:start="379:49" pos:end="379:49">=</operator> <literal type="number" pos:start="379:51" pos:end="379:51">0</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="381:25" pos:end="401:25">else <block pos:start="381:30" pos:end="401:25">{<block_content pos:start="383:29" pos:end="399:31">

                            <expr_stmt pos:start="383:29" pos:end="383:52"><expr pos:start="383:29" pos:end="383:51"><name pos:start="383:29" pos:end="383:47"><name pos:start="383:29" pos:end="383:31">ost</name><operator pos:start="383:32" pos:end="383:33">-&gt;</operator><name pos:start="383:34" pos:end="383:47">audio_resample</name></name> <operator pos:start="383:49" pos:end="383:49">=</operator> <literal type="number" pos:start="383:51" pos:end="383:51">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="385:29" pos:end="389:77"><expr pos:start="385:29" pos:end="389:76"><name pos:start="385:29" pos:end="385:41"><name pos:start="385:29" pos:end="385:31">ost</name><operator pos:start="385:32" pos:end="385:33">-&gt;</operator><name pos:start="385:34" pos:end="385:41">resample</name></name> <operator pos:start="385:43" pos:end="385:43">=</operator> <call pos:start="385:45" pos:end="389:76"><name pos:start="385:45" pos:end="385:63">audio_resample_init</name><argument_list pos:start="385:64" pos:end="389:76">(<argument pos:start="385:65" pos:end="385:79"><expr pos:start="385:65" pos:end="385:79"><name pos:start="385:65" pos:end="385:79"><name pos:start="385:65" pos:end="385:69">codec</name><operator pos:start="385:70" pos:end="385:71">-&gt;</operator><name pos:start="385:72" pos:end="385:79">channels</name></name></expr></argument>, <argument pos:start="385:82" pos:end="385:97"><expr pos:start="385:82" pos:end="385:97"><name pos:start="385:82" pos:end="385:97"><name pos:start="385:82" pos:end="385:87">icodec</name><operator pos:start="385:88" pos:end="385:89">-&gt;</operator><name pos:start="385:90" pos:end="385:97">channels</name></name></expr></argument>,

                                                        <argument pos:start="387:57" pos:end="387:74"><expr pos:start="387:57" pos:end="387:74"><name pos:start="387:57" pos:end="387:74"><name pos:start="387:57" pos:end="387:61">codec</name><operator pos:start="387:62" pos:end="387:63">-&gt;</operator><name pos:start="387:64" pos:end="387:74">sample_rate</name></name></expr></argument>, 

                                                        <argument pos:start="389:57" pos:end="389:75"><expr pos:start="389:57" pos:end="389:75"><name pos:start="389:57" pos:end="389:75"><name pos:start="389:57" pos:end="389:62">icodec</name><operator pos:start="389:63" pos:end="389:64">-&gt;</operator><name pos:start="389:65" pos:end="389:75">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <if_stmt pos:start="391:29" pos:end="399:31"><if pos:start="391:29" pos:end="399:31">if<condition pos:start="391:31" pos:end="391:46">(<expr pos:start="391:32" pos:end="391:45"><operator pos:start="391:32" pos:end="391:32">!</operator><name pos:start="391:33" pos:end="391:45"><name pos:start="391:33" pos:end="391:35">ost</name><operator pos:start="391:36" pos:end="391:37">-&gt;</operator><name pos:start="391:38" pos:end="391:45">resample</name></name></expr>)</condition>

			      <block pos:start="393:31" pos:end="399:31">{<block_content pos:start="395:33" pos:end="397:43">

				<expr_stmt pos:start="395:33" pos:end="395:71"><expr pos:start="395:33" pos:end="395:70"><call pos:start="395:33" pos:end="395:70"><name pos:start="395:33" pos:end="395:38">printf</name><argument_list pos:start="395:39" pos:end="395:70">(<argument pos:start="395:40" pos:end="395:69"><expr pos:start="395:40" pos:end="395:69"><literal type="string" pos:start="395:40" pos:end="395:69">"Can't resample.  Aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt pos:start="397:33" pos:end="397:43"><expr pos:start="397:33" pos:end="397:42"><call pos:start="397:33" pos:end="397:42"><name pos:start="397:33" pos:end="397:40">av_abort</name><argument_list pos:start="397:41" pos:end="397:42">()</argument_list></call></expr>;</expr_stmt>

			      </block_content>}</block></if></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <comment type="block" pos:start="403:25" pos:end="403:65">/* Request specific number of channels */</comment>

                        <expr_stmt pos:start="405:25" pos:end="405:59"><expr pos:start="405:25" pos:end="405:58"><name pos:start="405:25" pos:end="405:40"><name pos:start="405:25" pos:end="405:30">icodec</name><operator pos:start="405:31" pos:end="405:32">-&gt;</operator><name pos:start="405:33" pos:end="405:40">channels</name></name> <operator pos:start="405:42" pos:end="405:42">=</operator> <name pos:start="405:44" pos:end="405:58"><name pos:start="405:44" pos:end="405:48">codec</name><operator pos:start="405:49" pos:end="405:50">-&gt;</operator><name pos:start="405:51" pos:end="405:58">channels</name></name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="407:23" pos:end="427:21">else <block pos:start="407:28" pos:end="427:21">{<block_content pos:start="409:25" pos:end="425:27">

                        <expr_stmt pos:start="409:25" pos:end="409:48"><expr pos:start="409:25" pos:end="409:47"><name pos:start="409:25" pos:end="409:43"><name pos:start="409:25" pos:end="409:27">ost</name><operator pos:start="409:28" pos:end="409:29">-&gt;</operator><name pos:start="409:30" pos:end="409:43">audio_resample</name></name> <operator pos:start="409:45" pos:end="409:45">=</operator> <literal type="number" pos:start="409:47" pos:end="409:47">1</literal></expr>;</expr_stmt> 

                        <expr_stmt pos:start="411:25" pos:end="415:77"><expr pos:start="411:25" pos:end="415:76"><name pos:start="411:25" pos:end="411:37"><name pos:start="411:25" pos:end="411:27">ost</name><operator pos:start="411:28" pos:end="411:29">-&gt;</operator><name pos:start="411:30" pos:end="411:37">resample</name></name> <operator pos:start="411:39" pos:end="411:39">=</operator> <call pos:start="411:41" pos:end="415:76"><name pos:start="411:41" pos:end="411:59">audio_resample_init</name><argument_list pos:start="411:60" pos:end="415:76">(<argument pos:start="411:61" pos:end="411:75"><expr pos:start="411:61" pos:end="411:75"><name pos:start="411:61" pos:end="411:75"><name pos:start="411:61" pos:end="411:65">codec</name><operator pos:start="411:66" pos:end="411:67">-&gt;</operator><name pos:start="411:68" pos:end="411:75">channels</name></name></expr></argument>, <argument pos:start="411:78" pos:end="411:93"><expr pos:start="411:78" pos:end="411:93"><name pos:start="411:78" pos:end="411:93"><name pos:start="411:78" pos:end="411:83">icodec</name><operator pos:start="411:84" pos:end="411:85">-&gt;</operator><name pos:start="411:86" pos:end="411:93">channels</name></name></expr></argument>,

                                                        <argument pos:start="413:57" pos:end="413:74"><expr pos:start="413:57" pos:end="413:74"><name pos:start="413:57" pos:end="413:74"><name pos:start="413:57" pos:end="413:61">codec</name><operator pos:start="413:62" pos:end="413:63">-&gt;</operator><name pos:start="413:64" pos:end="413:74">sample_rate</name></name></expr></argument>, 

                                                        <argument pos:start="415:57" pos:end="415:75"><expr pos:start="415:57" pos:end="415:75"><name pos:start="415:57" pos:end="415:75"><name pos:start="415:57" pos:end="415:62">icodec</name><operator pos:start="415:63" pos:end="415:64">-&gt;</operator><name pos:start="415:65" pos:end="415:75">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt pos:start="417:25" pos:end="425:27"><if pos:start="417:25" pos:end="425:27">if<condition pos:start="417:27" pos:end="417:42">(<expr pos:start="417:28" pos:end="417:41"><operator pos:start="417:28" pos:end="417:28">!</operator><name pos:start="417:29" pos:end="417:41"><name pos:start="417:29" pos:end="417:31">ost</name><operator pos:start="417:32" pos:end="417:33">-&gt;</operator><name pos:start="417:34" pos:end="417:41">resample</name></name></expr>)</condition>

			  <block pos:start="419:27" pos:end="425:27">{<block_content pos:start="421:29" pos:end="423:39">

			    <expr_stmt pos:start="421:29" pos:end="421:67"><expr pos:start="421:29" pos:end="421:66"><call pos:start="421:29" pos:end="421:66"><name pos:start="421:29" pos:end="421:34">printf</name><argument_list pos:start="421:35" pos:end="421:66">(<argument pos:start="421:36" pos:end="421:65"><expr pos:start="421:36" pos:end="421:65"><literal type="string" pos:start="421:36" pos:end="421:65">"Can't resample.  Aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <expr_stmt pos:start="423:29" pos:end="423:39"><expr pos:start="423:29" pos:end="423:38"><call pos:start="423:29" pos:end="423:38"><name pos:start="423:29" pos:end="423:36">av_abort</name><argument_list pos:start="423:37" pos:end="423:38">()</argument_list></call></expr>;</expr_stmt>

			  </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="431:17" pos:end="431:41"><expr pos:start="431:17" pos:end="431:40"><name pos:start="431:17" pos:end="431:36"><name pos:start="431:17" pos:end="431:19">ist</name><operator pos:start="431:20" pos:end="431:21">-&gt;</operator><name pos:start="431:22" pos:end="431:36">decoding_needed</name></name> <operator pos:start="431:38" pos:end="431:38">=</operator> <literal type="number" pos:start="431:40" pos:end="431:40">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:41"><expr pos:start="433:17" pos:end="433:40"><name pos:start="433:17" pos:end="433:36"><name pos:start="433:17" pos:end="433:19">ost</name><operator pos:start="433:20" pos:end="433:21">-&gt;</operator><name pos:start="433:22" pos:end="433:36">encoding_needed</name></name> <operator pos:start="433:38" pos:end="433:38">=</operator> <literal type="number" pos:start="433:40" pos:end="433:40">1</literal></expr>;</expr_stmt>

                <break pos:start="435:17" pos:end="435:22">break;</break>

            <case pos:start="437:13" pos:end="437:34">case <expr pos:start="437:18" pos:end="437:33"><name pos:start="437:18" pos:end="437:33">CODEC_TYPE_VIDEO</name></expr>:</case>

                <if_stmt pos:start="439:17" pos:end="499:17"><if pos:start="439:17" pos:end="457:17">if <condition pos:start="439:20" pos:end="449:41">(<expr pos:start="439:21" pos:end="449:40"><name pos:start="439:21" pos:end="439:32"><name pos:start="439:21" pos:end="439:25">codec</name><operator pos:start="439:26" pos:end="439:27">-&gt;</operator><name pos:start="439:28" pos:end="439:32">width</name></name> <operator pos:start="439:34" pos:end="439:35">==</operator> <name pos:start="439:37" pos:end="439:49"><name pos:start="439:37" pos:end="439:42">icodec</name><operator pos:start="439:43" pos:end="439:44">-&gt;</operator><name pos:start="439:45" pos:end="439:49">width</name></name> <operator pos:start="439:51" pos:end="439:52">&amp;&amp;</operator>

                    <name pos:start="441:21" pos:end="441:33"><name pos:start="441:21" pos:end="441:25">codec</name><operator pos:start="441:26" pos:end="441:27">-&gt;</operator><name pos:start="441:28" pos:end="441:33">height</name></name> <operator pos:start="441:35" pos:end="441:36">==</operator> <name pos:start="441:38" pos:end="441:51"><name pos:start="441:38" pos:end="441:43">icodec</name><operator pos:start="441:44" pos:end="441:45">-&gt;</operator><name pos:start="441:46" pos:end="441:51">height</name></name> <operator pos:start="441:53" pos:end="441:54">&amp;&amp;</operator>

                    <name pos:start="443:21" pos:end="443:33">frame_topBand</name> <operator pos:start="443:35" pos:end="443:36">==</operator> <literal type="number" pos:start="443:38" pos:end="443:38">0</literal> <operator pos:start="443:40" pos:end="443:41">&amp;&amp;</operator>

                    <name pos:start="445:21" pos:end="445:36">frame_bottomBand</name> <operator pos:start="445:38" pos:end="445:39">==</operator> <literal type="number" pos:start="445:41" pos:end="445:41">0</literal> <operator pos:start="445:43" pos:end="445:44">&amp;&amp;</operator>

                    <name pos:start="447:21" pos:end="447:34">frame_leftBand</name> <operator pos:start="447:36" pos:end="447:37">==</operator> <literal type="number" pos:start="447:39" pos:end="447:39">0</literal> <operator pos:start="447:41" pos:end="447:42">&amp;&amp;</operator>

                    <name pos:start="449:21" pos:end="449:35">frame_rightBand</name> <operator pos:start="449:37" pos:end="449:38">==</operator> <literal type="number" pos:start="449:40" pos:end="449:40">0</literal></expr>)</condition>

                <block pos:start="451:17" pos:end="457:17">{<block_content pos:start="453:21" pos:end="455:40">

                    <expr_stmt pos:start="453:21" pos:end="453:44"><expr pos:start="453:21" pos:end="453:43"><name pos:start="453:21" pos:end="453:39"><name pos:start="453:21" pos:end="453:23">ost</name><operator pos:start="453:24" pos:end="453:25">-&gt;</operator><name pos:start="453:26" pos:end="453:39">video_resample</name></name> <operator pos:start="453:41" pos:end="453:41">=</operator> <literal type="number" pos:start="453:43" pos:end="453:43">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="455:21" pos:end="455:40"><expr pos:start="455:21" pos:end="455:39"><name pos:start="455:21" pos:end="455:35"><name pos:start="455:21" pos:end="455:23">ost</name><operator pos:start="455:24" pos:end="455:25">-&gt;</operator><name pos:start="455:26" pos:end="455:35">video_crop</name></name> <operator pos:start="455:37" pos:end="455:37">=</operator> <literal type="number" pos:start="455:39" pos:end="455:39">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="457:19" pos:end="475:17">else if <condition pos:start="457:27" pos:end="463:69">(<expr pos:start="457:28" pos:end="463:68"><operator pos:start="457:28" pos:end="457:28">(</operator><name pos:start="457:29" pos:end="457:40"><name pos:start="457:29" pos:end="457:33">codec</name><operator pos:start="457:34" pos:end="457:35">-&gt;</operator><name pos:start="457:36" pos:end="457:40">width</name></name> <operator pos:start="457:42" pos:end="457:43">==</operator> <name pos:start="457:45" pos:end="457:57"><name pos:start="457:45" pos:end="457:50">icodec</name><operator pos:start="457:51" pos:end="457:52">-&gt;</operator><name pos:start="457:53" pos:end="457:57">width</name></name> <operator pos:start="457:59" pos:end="457:59">-</operator>

                                <operator pos:start="459:33" pos:end="459:33">(</operator><name pos:start="459:34" pos:end="459:47">frame_leftBand</name> <operator pos:start="459:49" pos:end="459:49">+</operator> <name pos:start="459:51" pos:end="459:65">frame_rightBand</name><operator pos:start="459:66" pos:end="459:66">)</operator><operator pos:start="459:67" pos:end="459:67">)</operator> <operator pos:start="459:69" pos:end="459:70">&amp;&amp;</operator>

                        <operator pos:start="461:25" pos:end="461:25">(</operator><name pos:start="461:26" pos:end="461:38"><name pos:start="461:26" pos:end="461:30">codec</name><operator pos:start="461:31" pos:end="461:32">-&gt;</operator><name pos:start="461:33" pos:end="461:38">height</name></name> <operator pos:start="461:40" pos:end="461:41">==</operator> <name pos:start="461:43" pos:end="461:56"><name pos:start="461:43" pos:end="461:48">icodec</name><operator pos:start="461:49" pos:end="461:50">-&gt;</operator><name pos:start="461:51" pos:end="461:56">height</name></name> <operator pos:start="461:58" pos:end="461:58">-</operator>

                                <operator pos:start="463:33" pos:end="463:33">(</operator><name pos:start="463:34" pos:end="463:46">frame_topBand</name>  <operator pos:start="463:49" pos:end="463:49">+</operator> <name pos:start="463:51" pos:end="463:66">frame_bottomBand</name><operator pos:start="463:67" pos:end="463:67">)</operator><operator pos:start="463:68" pos:end="463:68">)</operator></expr>)</condition>

                <block pos:start="465:17" pos:end="475:17">{<block_content pos:start="467:21" pos:end="473:51">

                    <expr_stmt pos:start="467:21" pos:end="467:44"><expr pos:start="467:21" pos:end="467:43"><name pos:start="467:21" pos:end="467:39"><name pos:start="467:21" pos:end="467:23">ost</name><operator pos:start="467:24" pos:end="467:25">-&gt;</operator><name pos:start="467:26" pos:end="467:39">video_resample</name></name> <operator pos:start="467:41" pos:end="467:41">=</operator> <literal type="number" pos:start="467:43" pos:end="467:43">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="469:21" pos:end="469:40"><expr pos:start="469:21" pos:end="469:39"><name pos:start="469:21" pos:end="469:35"><name pos:start="469:21" pos:end="469:23">ost</name><operator pos:start="469:24" pos:end="469:25">-&gt;</operator><name pos:start="469:26" pos:end="469:35">video_crop</name></name> <operator pos:start="469:37" pos:end="469:37">=</operator> <literal type="number" pos:start="469:39" pos:end="469:39">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="471:21" pos:end="471:49"><expr pos:start="471:21" pos:end="471:48"><name pos:start="471:21" pos:end="471:32"><name pos:start="471:21" pos:end="471:23">ost</name><operator pos:start="471:24" pos:end="471:25">-&gt;</operator><name pos:start="471:26" pos:end="471:32">topBand</name></name> <operator pos:start="471:34" pos:end="471:34">=</operator> <name pos:start="471:36" pos:end="471:48">frame_topBand</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="473:21" pos:end="473:51"><expr pos:start="473:21" pos:end="473:50"><name pos:start="473:21" pos:end="473:33"><name pos:start="473:21" pos:end="473:23">ost</name><operator pos:start="473:24" pos:end="473:25">-&gt;</operator><name pos:start="473:26" pos:end="473:33">leftBand</name></name> <operator pos:start="473:35" pos:end="473:35">=</operator> <name pos:start="473:37" pos:end="473:50">frame_leftBand</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="475:19" pos:end="499:17">else <block pos:start="475:24" pos:end="499:17">{<block_content pos:start="477:21" pos:end="497:71">

                    <expr_stmt pos:start="477:21" pos:end="477:44"><expr pos:start="477:21" pos:end="477:43"><name pos:start="477:21" pos:end="477:39"><name pos:start="477:21" pos:end="477:23">ost</name><operator pos:start="477:24" pos:end="477:25">-&gt;</operator><name pos:start="477:26" pos:end="477:39">video_resample</name></name> <operator pos:start="477:41" pos:end="477:41">=</operator> <literal type="number" pos:start="477:43" pos:end="477:43">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="479:21" pos:end="479:40"><expr pos:start="479:21" pos:end="479:39"><name pos:start="479:21" pos:end="479:35"><name pos:start="479:21" pos:end="479:23">ost</name><operator pos:start="479:24" pos:end="479:25">-&gt;</operator><name pos:start="479:26" pos:end="479:35">video_crop</name></name> <operator pos:start="479:37" pos:end="479:37">=</operator> <literal type="number" pos:start="479:39" pos:end="479:39">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="479:42" pos:end="479:83">// cropping is handled as part of resample</comment>

                    <if_stmt pos:start="481:21" pos:end="485:34"><if pos:start="481:21" pos:end="485:34">if<condition pos:start="481:23" pos:end="483:72">( <expr pos:start="481:25" pos:end="483:70"><call pos:start="481:25" pos:end="483:70"><name pos:start="481:25" pos:end="481:39">avpicture_alloc</name><argument_list pos:start="481:40" pos:end="483:70">( <argument pos:start="481:42" pos:end="481:55"><expr pos:start="481:42" pos:end="481:55"><operator pos:start="481:42" pos:end="481:42">&amp;</operator><name pos:start="481:43" pos:end="481:55"><name pos:start="481:43" pos:end="481:45">ost</name><operator pos:start="481:46" pos:end="481:47">-&gt;</operator><name pos:start="481:48" pos:end="481:55">pict_tmp</name></name></expr></argument>, <argument pos:start="481:58" pos:end="481:72"><expr pos:start="481:58" pos:end="481:72"><name pos:start="481:58" pos:end="481:72">PIX_FMT_YUV420P</name></expr></argument>,

                                         <argument pos:start="483:42" pos:end="483:53"><expr pos:start="483:42" pos:end="483:53"><name pos:start="483:42" pos:end="483:53"><name pos:start="483:42" pos:end="483:46">codec</name><operator pos:start="483:47" pos:end="483:48">-&gt;</operator><name pos:start="483:49" pos:end="483:53">width</name></name></expr></argument>, <argument pos:start="483:56" pos:end="483:68"><expr pos:start="483:56" pos:end="483:68"><name pos:start="483:56" pos:end="483:68"><name pos:start="483:56" pos:end="483:60">codec</name><operator pos:start="483:61" pos:end="483:62">-&gt;</operator><name pos:start="483:63" pos:end="483:68">height</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="485:25" pos:end="485:34"><block_content pos:start="485:25" pos:end="485:34">

                        <goto pos:start="485:25" pos:end="485:34">goto <name pos:start="485:30" pos:end="485:33">fail</name>;</goto></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="489:21" pos:end="497:71"><expr pos:start="489:21" pos:end="497:70"><name pos:start="489:21" pos:end="489:41"><name pos:start="489:21" pos:end="489:23">ost</name><operator pos:start="489:24" pos:end="489:25">-&gt;</operator><name pos:start="489:26" pos:end="489:41">img_resample_ctx</name></name> <operator pos:start="489:43" pos:end="489:43">=</operator> <call pos:start="489:45" pos:end="497:70"><name pos:start="489:45" pos:end="489:66">img_resample_full_init</name><argument_list pos:start="489:67" pos:end="497:70">( 

                                      <argument pos:start="491:39" pos:end="491:58"><expr pos:start="491:39" pos:end="491:58"><name pos:start="491:39" pos:end="491:58"><name pos:start="491:39" pos:end="491:41">ost</name><operator pos:start="491:42" pos:end="491:43">-&gt;</operator><name pos:start="491:44" pos:end="491:45">st</name><operator pos:start="491:46" pos:end="491:47">-&gt;</operator><name pos:start="491:48" pos:end="491:52">codec</name><operator pos:start="491:53" pos:end="491:53">.</operator><name pos:start="491:54" pos:end="491:58">width</name></name></expr></argument>, <argument pos:start="491:61" pos:end="491:81"><expr pos:start="491:61" pos:end="491:81"><name pos:start="491:61" pos:end="491:81"><name pos:start="491:61" pos:end="491:63">ost</name><operator pos:start="491:64" pos:end="491:65">-&gt;</operator><name pos:start="491:66" pos:end="491:67">st</name><operator pos:start="491:68" pos:end="491:69">-&gt;</operator><name pos:start="491:70" pos:end="491:74">codec</name><operator pos:start="491:75" pos:end="491:75">.</operator><name pos:start="491:76" pos:end="491:81">height</name></name></expr></argument>,

                                      <argument pos:start="493:39" pos:end="493:58"><expr pos:start="493:39" pos:end="493:58"><name pos:start="493:39" pos:end="493:58"><name pos:start="493:39" pos:end="493:41">ist</name><operator pos:start="493:42" pos:end="493:43">-&gt;</operator><name pos:start="493:44" pos:end="493:45">st</name><operator pos:start="493:46" pos:end="493:47">-&gt;</operator><name pos:start="493:48" pos:end="493:52">codec</name><operator pos:start="493:53" pos:end="493:53">.</operator><name pos:start="493:54" pos:end="493:58">width</name></name></expr></argument>, <argument pos:start="493:61" pos:end="493:81"><expr pos:start="493:61" pos:end="493:81"><name pos:start="493:61" pos:end="493:81"><name pos:start="493:61" pos:end="493:63">ist</name><operator pos:start="493:64" pos:end="493:65">-&gt;</operator><name pos:start="493:66" pos:end="493:67">st</name><operator pos:start="493:68" pos:end="493:69">-&gt;</operator><name pos:start="493:70" pos:end="493:74">codec</name><operator pos:start="493:75" pos:end="493:75">.</operator><name pos:start="493:76" pos:end="493:81">height</name></name></expr></argument>,

                                      <argument pos:start="495:39" pos:end="495:51"><expr pos:start="495:39" pos:end="495:51"><name pos:start="495:39" pos:end="495:51">frame_topBand</name></expr></argument>, <argument pos:start="495:54" pos:end="495:69"><expr pos:start="495:54" pos:end="495:69"><name pos:start="495:54" pos:end="495:69">frame_bottomBand</name></expr></argument>,

                                      <argument pos:start="497:39" pos:end="497:52"><expr pos:start="497:39" pos:end="497:52"><name pos:start="497:39" pos:end="497:52">frame_leftBand</name></expr></argument>, <argument pos:start="497:55" pos:end="497:69"><expr pos:start="497:55" pos:end="497:69"><name pos:start="497:55" pos:end="497:69">frame_rightBand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="501:17" pos:end="501:41"><expr pos:start="501:17" pos:end="501:40"><name pos:start="501:17" pos:end="501:36"><name pos:start="501:17" pos:end="501:19">ost</name><operator pos:start="501:20" pos:end="501:21">-&gt;</operator><name pos:start="501:22" pos:end="501:36">encoding_needed</name></name> <operator pos:start="501:38" pos:end="501:38">=</operator> <literal type="number" pos:start="501:40" pos:end="501:40">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="503:17" pos:end="503:41"><expr pos:start="503:17" pos:end="503:40"><name pos:start="503:17" pos:end="503:36"><name pos:start="503:17" pos:end="503:19">ist</name><operator pos:start="503:20" pos:end="503:21">-&gt;</operator><name pos:start="503:22" pos:end="503:36">decoding_needed</name></name> <operator pos:start="503:38" pos:end="503:38">=</operator> <literal type="number" pos:start="503:40" pos:end="503:40">1</literal></expr>;</expr_stmt>

                <break pos:start="505:17" pos:end="505:22">break;</break>

            <default pos:start="507:13" pos:end="507:20">default:</default>

                <expr_stmt pos:start="509:17" pos:end="509:27"><expr pos:start="509:17" pos:end="509:26"><call pos:start="509:17" pos:end="509:26"><name pos:start="509:17" pos:end="509:24">av_abort</name><argument_list pos:start="509:25" pos:end="509:26">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <comment type="block" pos:start="513:13" pos:end="513:31">/* two pass mode */</comment>

            <if_stmt pos:start="515:13" pos:end="589:13"><if pos:start="515:13" pos:end="589:13">if <condition pos:start="515:16" pos:end="517:71">(<expr pos:start="515:17" pos:end="517:70"><name pos:start="515:17" pos:end="515:36"><name pos:start="515:17" pos:end="515:19">ost</name><operator pos:start="515:20" pos:end="515:21">-&gt;</operator><name pos:start="515:22" pos:end="515:36">encoding_needed</name></name> <operator pos:start="515:38" pos:end="515:39">&amp;&amp;</operator> 

                <operator pos:start="517:17" pos:end="517:17">(</operator><name pos:start="517:18" pos:end="517:29"><name pos:start="517:18" pos:end="517:22">codec</name><operator pos:start="517:23" pos:end="517:24">-&gt;</operator><name pos:start="517:25" pos:end="517:29">flags</name></name> <operator pos:start="517:31" pos:end="517:31">&amp;</operator> <operator pos:start="517:33" pos:end="517:33">(</operator><name pos:start="517:34" pos:end="517:49">CODEC_FLAG_PASS1</name> <operator pos:start="517:51" pos:end="517:51">|</operator> <name pos:start="517:53" pos:end="517:68">CODEC_FLAG_PASS2</name><operator pos:start="517:69" pos:end="517:69">)</operator><operator pos:start="517:70" pos:end="517:70">)</operator></expr>)</condition> <block pos:start="517:73" pos:end="589:13">{<block_content pos:start="519:17" pos:end="587:17">

                <decl_stmt pos:start="519:17" pos:end="519:39"><decl pos:start="519:17" pos:end="519:38"><type pos:start="519:17" pos:end="519:20"><name pos:start="519:17" pos:end="519:20">char</name></type> <name pos:start="519:22" pos:end="519:38"><name pos:start="519:22" pos:end="519:32">logfilename</name><index pos:start="519:33" pos:end="519:38">[<expr pos:start="519:34" pos:end="519:37"><literal type="number" pos:start="519:34" pos:end="519:37">1024</literal></expr>]</index></name></decl>;</decl_stmt>

                <decl_stmt pos:start="521:17" pos:end="521:24"><decl pos:start="521:17" pos:end="521:23"><type pos:start="521:17" pos:end="521:22"><name pos:start="521:17" pos:end="521:20">FILE</name> <modifier pos:start="521:22" pos:end="521:22">*</modifier></type><name pos:start="521:23" pos:end="521:23">f</name></decl>;</decl_stmt>

                <decl_stmt pos:start="523:17" pos:end="523:25"><decl pos:start="523:17" pos:end="523:24"><type pos:start="523:17" pos:end="523:19"><name pos:start="523:17" pos:end="523:19">int</name></type> <name pos:start="523:21" pos:end="523:24">size</name></decl>;</decl_stmt>

                <decl_stmt pos:start="525:17" pos:end="525:32"><decl pos:start="525:17" pos:end="525:31"><type pos:start="525:17" pos:end="525:22"><name pos:start="525:17" pos:end="525:20">char</name> <modifier pos:start="525:22" pos:end="525:22">*</modifier></type><name pos:start="525:23" pos:end="525:31">logbuffer</name></decl>;</decl_stmt>

                

                <expr_stmt pos:start="529:17" pos:end="533:73"><expr pos:start="529:17" pos:end="533:72"><call pos:start="529:17" pos:end="533:72"><name pos:start="529:17" pos:end="529:24">snprintf</name><argument_list pos:start="529:25" pos:end="533:72">(<argument pos:start="529:26" pos:end="529:36"><expr pos:start="529:26" pos:end="529:36"><name pos:start="529:26" pos:end="529:36">logfilename</name></expr></argument>, <argument pos:start="529:39" pos:end="529:57"><expr pos:start="529:39" pos:end="529:57"><sizeof pos:start="529:39" pos:end="529:57">sizeof<argument_list pos:start="529:45" pos:end="529:57">(<argument pos:start="529:46" pos:end="529:56"><expr pos:start="529:46" pos:end="529:56"><name pos:start="529:46" pos:end="529:56">logfilename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="529:60" pos:end="529:70"><expr pos:start="529:60" pos:end="529:70"><literal type="string" pos:start="529:60" pos:end="529:70">"%s-%d.log"</literal></expr></argument>, 

                         <argument pos:start="531:26" pos:end="533:68"><expr pos:start="531:26" pos:end="533:68"><ternary pos:start="531:26" pos:end="533:68"><condition pos:start="531:26" pos:end="531:43"><expr pos:start="531:26" pos:end="531:41"><name pos:start="531:26" pos:end="531:41">pass_logfilename</name></expr> ?</condition><then pos:start="533:26" pos:end="533:41"> 

                         <expr pos:start="533:26" pos:end="533:41"><name pos:start="533:26" pos:end="533:41">pass_logfilename</name></expr> </then><else pos:start="533:43" pos:end="533:68">: <expr pos:start="533:45" pos:end="533:68"><name pos:start="533:45" pos:end="533:68">DEFAULT_PASS_LOGFILENAME</name></expr></else></ternary></expr></argument>, <argument pos:start="533:71" pos:end="533:71"><expr pos:start="533:71" pos:end="533:71"><name pos:start="533:71" pos:end="533:71">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="535:17" pos:end="587:17"><if pos:start="535:17" pos:end="549:17">if <condition pos:start="535:20" pos:end="535:52">(<expr pos:start="535:21" pos:end="535:51"><name pos:start="535:21" pos:end="535:32"><name pos:start="535:21" pos:end="535:25">codec</name><operator pos:start="535:26" pos:end="535:27">-&gt;</operator><name pos:start="535:28" pos:end="535:32">flags</name></name> <operator pos:start="535:34" pos:end="535:34">&amp;</operator> <name pos:start="535:36" pos:end="535:51">CODEC_FLAG_PASS1</name></expr>)</condition> <block pos:start="535:54" pos:end="549:17">{<block_content pos:start="537:21" pos:end="547:37">

                    <expr_stmt pos:start="537:21" pos:end="537:48"><expr pos:start="537:21" pos:end="537:47"><name pos:start="537:21" pos:end="537:21">f</name> <operator pos:start="537:23" pos:end="537:23">=</operator> <call pos:start="537:25" pos:end="537:47"><name pos:start="537:25" pos:end="537:29">fopen</name><argument_list pos:start="537:30" pos:end="537:47">(<argument pos:start="537:31" pos:end="537:41"><expr pos:start="537:31" pos:end="537:41"><name pos:start="537:31" pos:end="537:41">logfilename</name></expr></argument>, <argument pos:start="537:44" pos:end="537:46"><expr pos:start="537:44" pos:end="537:46"><literal type="string" pos:start="537:44" pos:end="537:46">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="539:21" pos:end="545:21"><if pos:start="539:21" pos:end="545:21">if <condition pos:start="539:24" pos:end="539:27">(<expr pos:start="539:25" pos:end="539:26"><operator pos:start="539:25" pos:end="539:25">!</operator><name pos:start="539:26" pos:end="539:26">f</name></expr>)</condition> <block pos:start="539:29" pos:end="545:21">{<block_content pos:start="541:25" pos:end="543:32">

                        <expr_stmt pos:start="541:25" pos:end="541:44"><expr pos:start="541:25" pos:end="541:43"><call pos:start="541:25" pos:end="541:43"><name pos:start="541:25" pos:end="541:30">perror</name><argument_list pos:start="541:31" pos:end="541:43">(<argument pos:start="541:32" pos:end="541:42"><expr pos:start="541:32" pos:end="541:42"><name pos:start="541:32" pos:end="541:42">logfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="543:25" pos:end="543:32"><expr pos:start="543:25" pos:end="543:31"><call pos:start="543:25" pos:end="543:31"><name pos:start="543:25" pos:end="543:28">exit</name><argument_list pos:start="543:29" pos:end="543:31">(<argument pos:start="543:30" pos:end="543:30"><expr pos:start="543:30" pos:end="543:30"><literal type="number" pos:start="543:30" pos:end="543:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="547:21" pos:end="547:37"><expr pos:start="547:21" pos:end="547:36"><name pos:start="547:21" pos:end="547:32"><name pos:start="547:21" pos:end="547:23">ost</name><operator pos:start="547:24" pos:end="547:25">-&gt;</operator><name pos:start="547:26" pos:end="547:32">logfile</name></name> <operator pos:start="547:34" pos:end="547:34">=</operator> <name pos:start="547:36" pos:end="547:36">f</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="549:19" pos:end="587:17">else <block pos:start="549:24" pos:end="587:17">{<block_content pos:start="553:21" pos:end="585:48">

                    <comment type="block" pos:start="551:21" pos:end="551:43">/* read the log file */</comment>

                    <expr_stmt pos:start="553:21" pos:end="553:48"><expr pos:start="553:21" pos:end="553:47"><name pos:start="553:21" pos:end="553:21">f</name> <operator pos:start="553:23" pos:end="553:23">=</operator> <call pos:start="553:25" pos:end="553:47"><name pos:start="553:25" pos:end="553:29">fopen</name><argument_list pos:start="553:30" pos:end="553:47">(<argument pos:start="553:31" pos:end="553:41"><expr pos:start="553:31" pos:end="553:41"><name pos:start="553:31" pos:end="553:41">logfilename</name></expr></argument>, <argument pos:start="553:44" pos:end="553:46"><expr pos:start="553:44" pos:end="553:46"><literal type="string" pos:start="553:44" pos:end="553:46">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="555:21" pos:end="561:21"><if pos:start="555:21" pos:end="561:21">if <condition pos:start="555:24" pos:end="555:27">(<expr pos:start="555:25" pos:end="555:26"><operator pos:start="555:25" pos:end="555:25">!</operator><name pos:start="555:26" pos:end="555:26">f</name></expr>)</condition> <block pos:start="555:29" pos:end="561:21">{<block_content pos:start="557:25" pos:end="559:32">

                        <expr_stmt pos:start="557:25" pos:end="557:44"><expr pos:start="557:25" pos:end="557:43"><call pos:start="557:25" pos:end="557:43"><name pos:start="557:25" pos:end="557:30">perror</name><argument_list pos:start="557:31" pos:end="557:43">(<argument pos:start="557:32" pos:end="557:42"><expr pos:start="557:32" pos:end="557:42"><name pos:start="557:32" pos:end="557:42">logfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="559:25" pos:end="559:32"><expr pos:start="559:25" pos:end="559:31"><call pos:start="559:25" pos:end="559:31"><name pos:start="559:25" pos:end="559:28">exit</name><argument_list pos:start="559:29" pos:end="559:31">(<argument pos:start="559:30" pos:end="559:30"><expr pos:start="559:30" pos:end="559:30"><literal type="number" pos:start="559:30" pos:end="559:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="563:21" pos:end="563:42"><expr pos:start="563:21" pos:end="563:41"><call pos:start="563:21" pos:end="563:41"><name pos:start="563:21" pos:end="563:25">fseek</name><argument_list pos:start="563:26" pos:end="563:41">(<argument pos:start="563:27" pos:end="563:27"><expr pos:start="563:27" pos:end="563:27"><name pos:start="563:27" pos:end="563:27">f</name></expr></argument>, <argument pos:start="563:30" pos:end="563:30"><expr pos:start="563:30" pos:end="563:30"><literal type="number" pos:start="563:30" pos:end="563:30">0</literal></expr></argument>, <argument pos:start="563:33" pos:end="563:40"><expr pos:start="563:33" pos:end="563:40"><name pos:start="563:33" pos:end="563:40">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="565:21" pos:end="565:36"><expr pos:start="565:21" pos:end="565:35"><name pos:start="565:21" pos:end="565:24">size</name> <operator pos:start="565:26" pos:end="565:26">=</operator> <call pos:start="565:28" pos:end="565:35"><name pos:start="565:28" pos:end="565:32">ftell</name><argument_list pos:start="565:33" pos:end="565:35">(<argument pos:start="565:34" pos:end="565:34"><expr pos:start="565:34" pos:end="565:34"><name pos:start="565:34" pos:end="565:34">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="567:21" pos:end="567:42"><expr pos:start="567:21" pos:end="567:41"><call pos:start="567:21" pos:end="567:41"><name pos:start="567:21" pos:end="567:25">fseek</name><argument_list pos:start="567:26" pos:end="567:41">(<argument pos:start="567:27" pos:end="567:27"><expr pos:start="567:27" pos:end="567:27"><name pos:start="567:27" pos:end="567:27">f</name></expr></argument>, <argument pos:start="567:30" pos:end="567:30"><expr pos:start="567:30" pos:end="567:30"><literal type="number" pos:start="567:30" pos:end="567:30">0</literal></expr></argument>, <argument pos:start="567:33" pos:end="567:40"><expr pos:start="567:33" pos:end="567:40"><name pos:start="567:33" pos:end="567:40">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="569:21" pos:end="569:52"><expr pos:start="569:21" pos:end="569:51"><name pos:start="569:21" pos:end="569:29">logbuffer</name> <operator pos:start="569:31" pos:end="569:31">=</operator> <call pos:start="569:33" pos:end="569:51"><name pos:start="569:33" pos:end="569:41">av_malloc</name><argument_list pos:start="569:42" pos:end="569:51">(<argument pos:start="569:43" pos:end="569:50"><expr pos:start="569:43" pos:end="569:50"><name pos:start="569:43" pos:end="569:46">size</name> <operator pos:start="569:48" pos:end="569:48">+</operator> <literal type="number" pos:start="569:50" pos:end="569:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="571:21" pos:end="577:21"><if pos:start="571:21" pos:end="577:21">if <condition pos:start="571:24" pos:end="571:35">(<expr pos:start="571:25" pos:end="571:34"><operator pos:start="571:25" pos:end="571:25">!</operator><name pos:start="571:26" pos:end="571:34">logbuffer</name></expr>)</condition> <block pos:start="571:37" pos:end="577:21">{<block_content pos:start="573:25" pos:end="575:32">

                        <expr_stmt pos:start="573:25" pos:end="573:75"><expr pos:start="573:25" pos:end="573:74"><call pos:start="573:25" pos:end="573:74"><name pos:start="573:25" pos:end="573:31">fprintf</name><argument_list pos:start="573:32" pos:end="573:74">(<argument pos:start="573:33" pos:end="573:38"><expr pos:start="573:33" pos:end="573:38"><name pos:start="573:33" pos:end="573:38">stderr</name></expr></argument>, <argument pos:start="573:41" pos:end="573:73"><expr pos:start="573:41" pos:end="573:73"><literal type="string" pos:start="573:41" pos:end="573:73">"Could not allocate log buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="575:25" pos:end="575:32"><expr pos:start="575:25" pos:end="575:31"><call pos:start="575:25" pos:end="575:31"><name pos:start="575:25" pos:end="575:28">exit</name><argument_list pos:start="575:29" pos:end="575:31">(<argument pos:start="575:30" pos:end="575:30"><expr pos:start="575:30" pos:end="575:30"><literal type="number" pos:start="575:30" pos:end="575:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="579:21" pos:end="579:56"><expr pos:start="579:21" pos:end="579:55"><name pos:start="579:21" pos:end="579:24">size</name> <operator pos:start="579:26" pos:end="579:26">=</operator> <call pos:start="579:28" pos:end="579:55"><name pos:start="579:28" pos:end="579:32">fread</name><argument_list pos:start="579:33" pos:end="579:55">(<argument pos:start="579:34" pos:end="579:42"><expr pos:start="579:34" pos:end="579:42"><name pos:start="579:34" pos:end="579:42">logbuffer</name></expr></argument>, <argument pos:start="579:45" pos:end="579:45"><expr pos:start="579:45" pos:end="579:45"><literal type="number" pos:start="579:45" pos:end="579:45">1</literal></expr></argument>, <argument pos:start="579:48" pos:end="579:51"><expr pos:start="579:48" pos:end="579:51"><name pos:start="579:48" pos:end="579:51">size</name></expr></argument>, <argument pos:start="579:54" pos:end="579:54"><expr pos:start="579:54" pos:end="579:54"><name pos:start="579:54" pos:end="579:54">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="581:21" pos:end="581:30"><expr pos:start="581:21" pos:end="581:29"><call pos:start="581:21" pos:end="581:29"><name pos:start="581:21" pos:end="581:26">fclose</name><argument_list pos:start="581:27" pos:end="581:29">(<argument pos:start="581:28" pos:end="581:28"><expr pos:start="581:28" pos:end="581:28"><name pos:start="581:28" pos:end="581:28">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="583:21" pos:end="583:43"><expr pos:start="583:21" pos:end="583:42"><name pos:start="583:21" pos:end="583:35"><name pos:start="583:21" pos:end="583:29">logbuffer</name><index pos:start="583:30" pos:end="583:35">[<expr pos:start="583:31" pos:end="583:34"><name pos:start="583:31" pos:end="583:34">size</name></expr>]</index></name> <operator pos:start="583:37" pos:end="583:37">=</operator> <literal type="char" pos:start="583:39" pos:end="583:42">'\0'</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="585:21" pos:end="585:48"><expr pos:start="585:21" pos:end="585:47"><name pos:start="585:21" pos:end="585:35"><name pos:start="585:21" pos:end="585:25">codec</name><operator pos:start="585:26" pos:end="585:27">-&gt;</operator><name pos:start="585:28" pos:end="585:35">stats_in</name></name> <operator pos:start="585:37" pos:end="585:37">=</operator> <name pos:start="585:39" pos:end="585:47">logbuffer</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="597:5" pos:end="599:24">/* dump the file output parameters - cannot be done before in case

       of stream copy */</comment>

    <for pos:start="601:5" pos:end="605:5">for<control pos:start="601:8" pos:end="601:34">(<init pos:start="601:9" pos:end="601:12"><expr pos:start="601:9" pos:end="601:11"><name pos:start="601:9" pos:end="601:9">i</name><operator pos:start="601:10" pos:end="601:10">=</operator><literal type="number" pos:start="601:11" pos:end="601:11">0</literal></expr>;</init><condition pos:start="601:13" pos:end="601:30"><expr pos:start="601:13" pos:end="601:29"><name pos:start="601:13" pos:end="601:13">i</name><operator pos:start="601:14" pos:end="601:14">&lt;</operator><name pos:start="601:15" pos:end="601:29">nb_output_files</name></expr>;</condition><incr pos:start="601:31" pos:end="601:33"><expr pos:start="601:31" pos:end="601:33"><name pos:start="601:31" pos:end="601:31">i</name><operator pos:start="601:32" pos:end="601:33">++</operator></expr></incr>)</control> <block pos:start="601:36" pos:end="605:5">{<block_content pos:start="603:9" pos:end="603:70">

        <expr_stmt pos:start="603:9" pos:end="603:70"><expr pos:start="603:9" pos:end="603:69"><call pos:start="603:9" pos:end="603:69"><name pos:start="603:9" pos:end="603:19">dump_format</name><argument_list pos:start="603:20" pos:end="603:69">(<argument pos:start="603:21" pos:end="603:35"><expr pos:start="603:21" pos:end="603:35"><name pos:start="603:21" pos:end="603:35"><name pos:start="603:21" pos:end="603:32">output_files</name><index pos:start="603:33" pos:end="603:35">[<expr pos:start="603:34" pos:end="603:34"><name pos:start="603:34" pos:end="603:34">i</name></expr>]</index></name></expr></argument>, <argument pos:start="603:38" pos:end="603:38"><expr pos:start="603:38" pos:end="603:38"><name pos:start="603:38" pos:end="603:38">i</name></expr></argument>, <argument pos:start="603:41" pos:end="603:65"><expr pos:start="603:41" pos:end="603:65"><name pos:start="603:41" pos:end="603:55"><name pos:start="603:41" pos:end="603:52">output_files</name><index pos:start="603:53" pos:end="603:55">[<expr pos:start="603:54" pos:end="603:54"><name pos:start="603:54" pos:end="603:54">i</name></expr>]</index></name><operator pos:start="603:56" pos:end="603:57">-&gt;</operator><name pos:start="603:58" pos:end="603:65">filename</name></expr></argument>, <argument pos:start="603:68" pos:end="603:68"><expr pos:start="603:68" pos:end="603:68"><literal type="number" pos:start="603:68" pos:end="603:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="609:5" pos:end="609:33">/* dump the stream mapping */</comment>

    <expr_stmt pos:start="611:5" pos:end="611:41"><expr pos:start="611:5" pos:end="611:40"><call pos:start="611:5" pos:end="611:40"><name pos:start="611:5" pos:end="611:11">fprintf</name><argument_list pos:start="611:12" pos:end="611:40">(<argument pos:start="611:13" pos:end="611:18"><expr pos:start="611:13" pos:end="611:18"><name pos:start="611:13" pos:end="611:18">stderr</name></expr></argument>, <argument pos:start="611:21" pos:end="611:39"><expr pos:start="611:21" pos:end="611:39"><literal type="string" pos:start="611:21" pos:end="611:39">"Stream mapping:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="613:5" pos:end="627:5">for<control pos:start="613:8" pos:end="613:30">(<init pos:start="613:9" pos:end="613:12"><expr pos:start="613:9" pos:end="613:11"><name pos:start="613:9" pos:end="613:9">i</name><operator pos:start="613:10" pos:end="613:10">=</operator><literal type="number" pos:start="613:11" pos:end="613:11">0</literal></expr>;</init><condition pos:start="613:13" pos:end="613:26"><expr pos:start="613:13" pos:end="613:25"><name pos:start="613:13" pos:end="613:13">i</name><operator pos:start="613:14" pos:end="613:14">&lt;</operator><name pos:start="613:15" pos:end="613:25">nb_ostreams</name></expr>;</condition><incr pos:start="613:27" pos:end="613:29"><expr pos:start="613:27" pos:end="613:29"><name pos:start="613:27" pos:end="613:27">i</name><operator pos:start="613:28" pos:end="613:29">++</operator></expr></incr>)</control> <block pos:start="613:32" pos:end="627:5">{<block_content pos:start="615:9" pos:end="625:28">

        <expr_stmt pos:start="615:9" pos:end="615:27"><expr pos:start="615:9" pos:end="615:26"><name pos:start="615:9" pos:end="615:11">ost</name> <operator pos:start="615:13" pos:end="615:13">=</operator> <name pos:start="615:15" pos:end="615:26"><name pos:start="615:15" pos:end="615:23">ost_table</name><index pos:start="615:24" pos:end="615:26">[<expr pos:start="615:25" pos:end="615:25"><name pos:start="615:25" pos:end="615:25">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="617:9" pos:end="625:28"><expr pos:start="617:9" pos:end="625:27"><call pos:start="617:9" pos:end="625:27"><name pos:start="617:9" pos:end="617:15">fprintf</name><argument_list pos:start="617:16" pos:end="625:27">(<argument pos:start="617:17" pos:end="617:22"><expr pos:start="617:17" pos:end="617:22"><name pos:start="617:17" pos:end="617:22">stderr</name></expr></argument>, <argument pos:start="617:25" pos:end="617:53"><expr pos:start="617:25" pos:end="617:53"><literal type="string" pos:start="617:25" pos:end="617:53">"  Stream #%d.%d -&gt; #%d.%d\n"</literal></expr></argument>,

                <argument pos:start="619:17" pos:end="619:56"><expr pos:start="619:17" pos:end="619:56"><name pos:start="619:17" pos:end="619:44"><name pos:start="619:17" pos:end="619:25">ist_table</name><index pos:start="619:26" pos:end="619:44">[<expr pos:start="619:27" pos:end="619:43"><name pos:start="619:27" pos:end="619:43"><name pos:start="619:27" pos:end="619:29">ost</name><operator pos:start="619:30" pos:end="619:31">-&gt;</operator><name pos:start="619:32" pos:end="619:43">source_index</name></name></expr>]</index></name><operator pos:start="619:45" pos:end="619:46">-&gt;</operator><name pos:start="619:47" pos:end="619:56">file_index</name></expr></argument>,

                <argument pos:start="621:17" pos:end="621:51"><expr pos:start="621:17" pos:end="621:51"><name pos:start="621:17" pos:end="621:44"><name pos:start="621:17" pos:end="621:25">ist_table</name><index pos:start="621:26" pos:end="621:44">[<expr pos:start="621:27" pos:end="621:43"><name pos:start="621:27" pos:end="621:43"><name pos:start="621:27" pos:end="621:29">ost</name><operator pos:start="621:30" pos:end="621:31">-&gt;</operator><name pos:start="621:32" pos:end="621:43">source_index</name></name></expr>]</index></name><operator pos:start="621:45" pos:end="621:46">-&gt;</operator><name pos:start="621:47" pos:end="621:51">index</name></expr></argument>,

                <argument pos:start="623:17" pos:end="623:31"><expr pos:start="623:17" pos:end="623:31"><name pos:start="623:17" pos:end="623:31"><name pos:start="623:17" pos:end="623:19">ost</name><operator pos:start="623:20" pos:end="623:21">-&gt;</operator><name pos:start="623:22" pos:end="623:31">file_index</name></name></expr></argument>, 

                <argument pos:start="625:17" pos:end="625:26"><expr pos:start="625:17" pos:end="625:26"><name pos:start="625:17" pos:end="625:26"><name pos:start="625:17" pos:end="625:19">ost</name><operator pos:start="625:20" pos:end="625:21">-&gt;</operator><name pos:start="625:22" pos:end="625:26">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="631:5" pos:end="631:27">/* open each encoder */</comment>

    <for pos:start="633:5" pos:end="665:5">for<control pos:start="633:8" pos:end="633:30">(<init pos:start="633:9" pos:end="633:12"><expr pos:start="633:9" pos:end="633:11"><name pos:start="633:9" pos:end="633:9">i</name><operator pos:start="633:10" pos:end="633:10">=</operator><literal type="number" pos:start="633:11" pos:end="633:11">0</literal></expr>;</init><condition pos:start="633:13" pos:end="633:26"><expr pos:start="633:13" pos:end="633:25"><name pos:start="633:13" pos:end="633:13">i</name><operator pos:start="633:14" pos:end="633:14">&lt;</operator><name pos:start="633:15" pos:end="633:25">nb_ostreams</name></expr>;</condition><incr pos:start="633:27" pos:end="633:29"><expr pos:start="633:27" pos:end="633:29"><name pos:start="633:27" pos:end="633:27">i</name><operator pos:start="633:28" pos:end="633:29">++</operator></expr></incr>)</control> <block pos:start="633:32" pos:end="665:5">{<block_content pos:start="635:9" pos:end="663:9">

        <expr_stmt pos:start="635:9" pos:end="635:27"><expr pos:start="635:9" pos:end="635:26"><name pos:start="635:9" pos:end="635:11">ost</name> <operator pos:start="635:13" pos:end="635:13">=</operator> <name pos:start="635:15" pos:end="635:26"><name pos:start="635:15" pos:end="635:23">ost_table</name><index pos:start="635:24" pos:end="635:26">[<expr pos:start="635:25" pos:end="635:25"><name pos:start="635:25" pos:end="635:25">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="637:9" pos:end="663:9"><if pos:start="637:9" pos:end="663:9">if <condition pos:start="637:12" pos:end="637:33">(<expr pos:start="637:13" pos:end="637:32"><name pos:start="637:13" pos:end="637:32"><name pos:start="637:13" pos:end="637:15">ost</name><operator pos:start="637:16" pos:end="637:17">-&gt;</operator><name pos:start="637:18" pos:end="637:32">encoding_needed</name></name></expr>)</condition> <block pos:start="637:35" pos:end="663:9">{<block_content pos:start="639:13" pos:end="661:13">

            <decl_stmt pos:start="639:13" pos:end="639:27"><decl pos:start="639:13" pos:end="639:26"><type pos:start="639:13" pos:end="639:21"><name pos:start="639:13" pos:end="639:19">AVCodec</name> <modifier pos:start="639:21" pos:end="639:21">*</modifier></type><name pos:start="639:22" pos:end="639:26">codec</name></decl>;</decl_stmt>

            <expr_stmt pos:start="641:13" pos:end="641:66"><expr pos:start="641:13" pos:end="641:65"><name pos:start="641:13" pos:end="641:17">codec</name> <operator pos:start="641:19" pos:end="641:19">=</operator> <call pos:start="641:21" pos:end="641:65"><name pos:start="641:21" pos:end="641:40">avcodec_find_encoder</name><argument_list pos:start="641:41" pos:end="641:65">(<argument pos:start="641:42" pos:end="641:64"><expr pos:start="641:42" pos:end="641:64"><name pos:start="641:42" pos:end="641:64"><name pos:start="641:42" pos:end="641:44">ost</name><operator pos:start="641:45" pos:end="641:46">-&gt;</operator><name pos:start="641:47" pos:end="641:48">st</name><operator pos:start="641:49" pos:end="641:50">-&gt;</operator><name pos:start="641:51" pos:end="641:55">codec</name><operator pos:start="641:56" pos:end="641:56">.</operator><name pos:start="641:57" pos:end="641:64">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="643:13" pos:end="651:13"><if pos:start="643:13" pos:end="651:13">if <condition pos:start="643:16" pos:end="643:23">(<expr pos:start="643:17" pos:end="643:22"><operator pos:start="643:17" pos:end="643:17">!</operator><name pos:start="643:18" pos:end="643:22">codec</name></expr>)</condition> <block pos:start="643:25" pos:end="651:13">{<block_content pos:start="645:17" pos:end="649:24">

                <expr_stmt pos:start="645:17" pos:end="647:53"><expr pos:start="645:17" pos:end="647:52"><call pos:start="645:17" pos:end="647:52"><name pos:start="645:17" pos:end="645:23">fprintf</name><argument_list pos:start="645:24" pos:end="647:52">(<argument pos:start="645:25" pos:end="645:30"><expr pos:start="645:25" pos:end="645:30"><name pos:start="645:25" pos:end="645:30">stderr</name></expr></argument>, <argument pos:start="645:33" pos:end="645:78"><expr pos:start="645:33" pos:end="645:78"><literal type="string" pos:start="645:33" pos:end="645:78">"Unsupported codec for output stream #%d.%d\n"</literal></expr></argument>, 

                        <argument pos:start="647:25" pos:end="647:39"><expr pos:start="647:25" pos:end="647:39"><name pos:start="647:25" pos:end="647:39"><name pos:start="647:25" pos:end="647:27">ost</name><operator pos:start="647:28" pos:end="647:29">-&gt;</operator><name pos:start="647:30" pos:end="647:39">file_index</name></name></expr></argument>, <argument pos:start="647:42" pos:end="647:51"><expr pos:start="647:42" pos:end="647:51"><name pos:start="647:42" pos:end="647:51"><name pos:start="647:42" pos:end="647:44">ost</name><operator pos:start="647:45" pos:end="647:46">-&gt;</operator><name pos:start="647:47" pos:end="647:51">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="649:17" pos:end="649:24"><expr pos:start="649:17" pos:end="649:23"><call pos:start="649:17" pos:end="649:23"><name pos:start="649:17" pos:end="649:20">exit</name><argument_list pos:start="649:21" pos:end="649:23">(<argument pos:start="649:22" pos:end="649:22"><expr pos:start="649:22" pos:end="649:22"><literal type="number" pos:start="649:22" pos:end="649:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="653:13" pos:end="661:13"><if pos:start="653:13" pos:end="661:13">if <condition pos:start="653:16" pos:end="653:57">(<expr pos:start="653:17" pos:end="653:56"><call pos:start="653:17" pos:end="653:52"><name pos:start="653:17" pos:end="653:28">avcodec_open</name><argument_list pos:start="653:29" pos:end="653:52">(<argument pos:start="653:30" pos:end="653:44"><expr pos:start="653:30" pos:end="653:44"><operator pos:start="653:30" pos:end="653:30">&amp;</operator><name pos:start="653:31" pos:end="653:44"><name pos:start="653:31" pos:end="653:33">ost</name><operator pos:start="653:34" pos:end="653:35">-&gt;</operator><name pos:start="653:36" pos:end="653:37">st</name><operator pos:start="653:38" pos:end="653:39">-&gt;</operator><name pos:start="653:40" pos:end="653:44">codec</name></name></expr></argument>, <argument pos:start="653:47" pos:end="653:51"><expr pos:start="653:47" pos:end="653:51"><name pos:start="653:47" pos:end="653:51">codec</name></expr></argument>)</argument_list></call> <operator pos:start="653:54" pos:end="653:54">&lt;</operator> <literal type="number" pos:start="653:56" pos:end="653:56">0</literal></expr>)</condition> <block pos:start="653:59" pos:end="661:13">{<block_content pos:start="655:17" pos:end="659:24">

                <expr_stmt pos:start="655:17" pos:end="657:53"><expr pos:start="655:17" pos:end="657:52"><call pos:start="655:17" pos:end="657:52"><name pos:start="655:17" pos:end="655:23">fprintf</name><argument_list pos:start="655:24" pos:end="657:52">(<argument pos:start="655:25" pos:end="655:30"><expr pos:start="655:25" pos:end="655:30"><name pos:start="655:25" pos:end="655:30">stderr</name></expr></argument>, <argument pos:start="655:33" pos:end="655:148"><expr pos:start="655:33" pos:end="655:148"><literal type="string" pos:start="655:33" pos:end="655:148">"Error while opening codec for stream #%d.%d - maybe incorrect parameters such as bit_rate, rate, width or height\n"</literal></expr></argument>, 

                        <argument pos:start="657:25" pos:end="657:39"><expr pos:start="657:25" pos:end="657:39"><name pos:start="657:25" pos:end="657:39"><name pos:start="657:25" pos:end="657:27">ost</name><operator pos:start="657:28" pos:end="657:29">-&gt;</operator><name pos:start="657:30" pos:end="657:39">file_index</name></name></expr></argument>, <argument pos:start="657:42" pos:end="657:51"><expr pos:start="657:42" pos:end="657:51"><name pos:start="657:42" pos:end="657:51"><name pos:start="657:42" pos:end="657:44">ost</name><operator pos:start="657:45" pos:end="657:46">-&gt;</operator><name pos:start="657:47" pos:end="657:51">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="659:17" pos:end="659:24"><expr pos:start="659:17" pos:end="659:23"><call pos:start="659:17" pos:end="659:23"><name pos:start="659:17" pos:end="659:20">exit</name><argument_list pos:start="659:21" pos:end="659:23">(<argument pos:start="659:22" pos:end="659:22"><expr pos:start="659:22" pos:end="659:22"><literal type="number" pos:start="659:22" pos:end="659:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="669:5" pos:end="669:27">/* open each decoder */</comment>

    <for pos:start="671:5" pos:end="707:5">for<control pos:start="671:8" pos:end="671:30">(<init pos:start="671:9" pos:end="671:12"><expr pos:start="671:9" pos:end="671:11"><name pos:start="671:9" pos:end="671:9">i</name><operator pos:start="671:10" pos:end="671:10">=</operator><literal type="number" pos:start="671:11" pos:end="671:11">0</literal></expr>;</init><condition pos:start="671:13" pos:end="671:26"><expr pos:start="671:13" pos:end="671:25"><name pos:start="671:13" pos:end="671:13">i</name><operator pos:start="671:14" pos:end="671:14">&lt;</operator><name pos:start="671:15" pos:end="671:25">nb_istreams</name></expr>;</condition><incr pos:start="671:27" pos:end="671:29"><expr pos:start="671:27" pos:end="671:29"><name pos:start="671:27" pos:end="671:27">i</name><operator pos:start="671:28" pos:end="671:29">++</operator></expr></incr>)</control> <block pos:start="671:32" pos:end="707:5">{<block_content pos:start="673:9" pos:end="705:9">

        <expr_stmt pos:start="673:9" pos:end="673:27"><expr pos:start="673:9" pos:end="673:26"><name pos:start="673:9" pos:end="673:11">ist</name> <operator pos:start="673:13" pos:end="673:13">=</operator> <name pos:start="673:15" pos:end="673:26"><name pos:start="673:15" pos:end="673:23">ist_table</name><index pos:start="673:24" pos:end="673:26">[<expr pos:start="673:25" pos:end="673:25"><name pos:start="673:25" pos:end="673:25">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="675:9" pos:end="705:9"><if pos:start="675:9" pos:end="705:9">if <condition pos:start="675:12" pos:end="675:33">(<expr pos:start="675:13" pos:end="675:32"><name pos:start="675:13" pos:end="675:32"><name pos:start="675:13" pos:end="675:15">ist</name><operator pos:start="675:16" pos:end="675:17">-&gt;</operator><name pos:start="675:18" pos:end="675:32">decoding_needed</name></name></expr>)</condition> <block pos:start="675:35" pos:end="705:9">{<block_content pos:start="677:13" pos:end="699:13">

            <decl_stmt pos:start="677:13" pos:end="677:27"><decl pos:start="677:13" pos:end="677:26"><type pos:start="677:13" pos:end="677:21"><name pos:start="677:13" pos:end="677:19">AVCodec</name> <modifier pos:start="677:21" pos:end="677:21">*</modifier></type><name pos:start="677:22" pos:end="677:26">codec</name></decl>;</decl_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:66"><expr pos:start="679:13" pos:end="679:65"><name pos:start="679:13" pos:end="679:17">codec</name> <operator pos:start="679:19" pos:end="679:19">=</operator> <call pos:start="679:21" pos:end="679:65"><name pos:start="679:21" pos:end="679:40">avcodec_find_decoder</name><argument_list pos:start="679:41" pos:end="679:65">(<argument pos:start="679:42" pos:end="679:64"><expr pos:start="679:42" pos:end="679:64"><name pos:start="679:42" pos:end="679:64"><name pos:start="679:42" pos:end="679:44">ist</name><operator pos:start="679:45" pos:end="679:46">-&gt;</operator><name pos:start="679:47" pos:end="679:48">st</name><operator pos:start="679:49" pos:end="679:50">-&gt;</operator><name pos:start="679:51" pos:end="679:55">codec</name><operator pos:start="679:56" pos:end="679:56">.</operator><name pos:start="679:57" pos:end="679:64">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="681:13" pos:end="689:13"><if pos:start="681:13" pos:end="689:13">if <condition pos:start="681:16" pos:end="681:23">(<expr pos:start="681:17" pos:end="681:22"><operator pos:start="681:17" pos:end="681:17">!</operator><name pos:start="681:18" pos:end="681:22">codec</name></expr>)</condition> <block pos:start="681:25" pos:end="689:13">{<block_content pos:start="683:17" pos:end="687:24">

                <expr_stmt pos:start="683:17" pos:end="685:78"><expr pos:start="683:17" pos:end="685:77"><call pos:start="683:17" pos:end="685:77"><name pos:start="683:17" pos:end="683:23">fprintf</name><argument_list pos:start="683:24" pos:end="685:77">(<argument pos:start="683:25" pos:end="683:30"><expr pos:start="683:25" pos:end="683:30"><name pos:start="683:25" pos:end="683:30">stderr</name></expr></argument>, <argument pos:start="683:33" pos:end="683:85"><expr pos:start="683:33" pos:end="683:85"><literal type="string" pos:start="683:33" pos:end="683:85">"Unsupported codec (id=%d) for input stream #%d.%d\n"</literal></expr></argument>, 

                        <argument pos:start="685:25" pos:end="685:47"><expr pos:start="685:25" pos:end="685:47"><name pos:start="685:25" pos:end="685:47"><name pos:start="685:25" pos:end="685:27">ist</name><operator pos:start="685:28" pos:end="685:29">-&gt;</operator><name pos:start="685:30" pos:end="685:31">st</name><operator pos:start="685:32" pos:end="685:33">-&gt;</operator><name pos:start="685:34" pos:end="685:38">codec</name><operator pos:start="685:39" pos:end="685:39">.</operator><name pos:start="685:40" pos:end="685:47">codec_id</name></name></expr></argument>, <argument pos:start="685:50" pos:end="685:64"><expr pos:start="685:50" pos:end="685:64"><name pos:start="685:50" pos:end="685:64"><name pos:start="685:50" pos:end="685:52">ist</name><operator pos:start="685:53" pos:end="685:54">-&gt;</operator><name pos:start="685:55" pos:end="685:64">file_index</name></name></expr></argument>, <argument pos:start="685:67" pos:end="685:76"><expr pos:start="685:67" pos:end="685:76"><name pos:start="685:67" pos:end="685:76"><name pos:start="685:67" pos:end="685:69">ist</name><operator pos:start="685:70" pos:end="685:71">-&gt;</operator><name pos:start="685:72" pos:end="685:76">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="687:17" pos:end="687:24"><expr pos:start="687:17" pos:end="687:23"><call pos:start="687:17" pos:end="687:23"><name pos:start="687:17" pos:end="687:20">exit</name><argument_list pos:start="687:21" pos:end="687:23">(<argument pos:start="687:22" pos:end="687:22"><expr pos:start="687:22" pos:end="687:22"><literal type="number" pos:start="687:22" pos:end="687:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="691:13" pos:end="699:13"><if pos:start="691:13" pos:end="699:13">if <condition pos:start="691:16" pos:end="691:57">(<expr pos:start="691:17" pos:end="691:56"><call pos:start="691:17" pos:end="691:52"><name pos:start="691:17" pos:end="691:28">avcodec_open</name><argument_list pos:start="691:29" pos:end="691:52">(<argument pos:start="691:30" pos:end="691:44"><expr pos:start="691:30" pos:end="691:44"><operator pos:start="691:30" pos:end="691:30">&amp;</operator><name pos:start="691:31" pos:end="691:44"><name pos:start="691:31" pos:end="691:33">ist</name><operator pos:start="691:34" pos:end="691:35">-&gt;</operator><name pos:start="691:36" pos:end="691:37">st</name><operator pos:start="691:38" pos:end="691:39">-&gt;</operator><name pos:start="691:40" pos:end="691:44">codec</name></name></expr></argument>, <argument pos:start="691:47" pos:end="691:51"><expr pos:start="691:47" pos:end="691:51"><name pos:start="691:47" pos:end="691:51">codec</name></expr></argument>)</argument_list></call> <operator pos:start="691:54" pos:end="691:54">&lt;</operator> <literal type="number" pos:start="691:56" pos:end="691:56">0</literal></expr>)</condition> <block pos:start="691:59" pos:end="699:13">{<block_content pos:start="693:17" pos:end="697:24">

                <expr_stmt pos:start="693:17" pos:end="695:53"><expr pos:start="693:17" pos:end="695:52"><call pos:start="693:17" pos:end="695:52"><name pos:start="693:17" pos:end="693:23">fprintf</name><argument_list pos:start="693:24" pos:end="695:52">(<argument pos:start="693:25" pos:end="693:30"><expr pos:start="693:25" pos:end="693:30"><name pos:start="693:25" pos:end="693:30">stderr</name></expr></argument>, <argument pos:start="693:33" pos:end="693:85"><expr pos:start="693:33" pos:end="693:85"><literal type="string" pos:start="693:33" pos:end="693:85">"Error while opening codec for input stream #%d.%d\n"</literal></expr></argument>, 

                        <argument pos:start="695:25" pos:end="695:39"><expr pos:start="695:25" pos:end="695:39"><name pos:start="695:25" pos:end="695:39"><name pos:start="695:25" pos:end="695:27">ist</name><operator pos:start="695:28" pos:end="695:29">-&gt;</operator><name pos:start="695:30" pos:end="695:39">file_index</name></name></expr></argument>, <argument pos:start="695:42" pos:end="695:51"><expr pos:start="695:42" pos:end="695:51"><name pos:start="695:42" pos:end="695:51"><name pos:start="695:42" pos:end="695:44">ist</name><operator pos:start="695:45" pos:end="695:46">-&gt;</operator><name pos:start="695:47" pos:end="695:51">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="697:24"><expr pos:start="697:17" pos:end="697:23"><call pos:start="697:17" pos:end="697:23"><name pos:start="697:17" pos:end="697:20">exit</name><argument_list pos:start="697:21" pos:end="697:23">(<argument pos:start="697:22" pos:end="697:22"><expr pos:start="697:22" pos:end="697:22"><literal type="number" pos:start="697:22" pos:end="697:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="701:13" pos:end="701:64">//if (ist-&gt;st-&gt;codec.codec_type == CODEC_TYPE_VIDEO)</comment>

            <comment type="line" pos:start="703:13" pos:end="703:66">//    ist-&gt;st-&gt;codec.flags |= CODEC_FLAG_REPEAT_FIELD;</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="711:5" pos:end="711:18">/* init pts */</comment>

    <for pos:start="713:5" pos:end="723:5">for<control pos:start="713:8" pos:end="713:30">(<init pos:start="713:9" pos:end="713:12"><expr pos:start="713:9" pos:end="713:11"><name pos:start="713:9" pos:end="713:9">i</name><operator pos:start="713:10" pos:end="713:10">=</operator><literal type="number" pos:start="713:11" pos:end="713:11">0</literal></expr>;</init><condition pos:start="713:13" pos:end="713:26"><expr pos:start="713:13" pos:end="713:25"><name pos:start="713:13" pos:end="713:13">i</name><operator pos:start="713:14" pos:end="713:14">&lt;</operator><name pos:start="713:15" pos:end="713:25">nb_istreams</name></expr>;</condition><incr pos:start="713:27" pos:end="713:29"><expr pos:start="713:27" pos:end="713:29"><name pos:start="713:27" pos:end="713:27">i</name><operator pos:start="713:28" pos:end="713:29">++</operator></expr></incr>)</control> <block pos:start="713:32" pos:end="723:5">{<block_content pos:start="715:9" pos:end="721:26">

        <expr_stmt pos:start="715:9" pos:end="715:27"><expr pos:start="715:9" pos:end="715:26"><name pos:start="715:9" pos:end="715:11">ist</name> <operator pos:start="715:13" pos:end="715:13">=</operator> <name pos:start="715:15" pos:end="715:26"><name pos:start="715:15" pos:end="715:23">ist_table</name><index pos:start="715:24" pos:end="715:26">[<expr pos:start="715:25" pos:end="715:25"><name pos:start="715:25" pos:end="715:25">i</name></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt pos:start="717:9" pos:end="717:42"><expr pos:start="717:9" pos:end="717:41"><name pos:start="717:9" pos:end="717:10">is</name> <operator pos:start="717:12" pos:end="717:12">=</operator> <name pos:start="717:14" pos:end="717:41"><name pos:start="717:14" pos:end="717:24">input_files</name><index pos:start="717:25" pos:end="717:41">[<expr pos:start="717:26" pos:end="717:40"><name pos:start="717:26" pos:end="717:40"><name pos:start="717:26" pos:end="717:28">ist</name><operator pos:start="717:29" pos:end="717:30">-&gt;</operator><name pos:start="717:31" pos:end="717:40">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="719:9" pos:end="719:21"><expr pos:start="719:9" pos:end="719:20"><name pos:start="719:9" pos:end="719:16"><name pos:start="719:9" pos:end="719:11">ist</name><operator pos:start="719:12" pos:end="719:13">-&gt;</operator><name pos:start="719:14" pos:end="719:16">pts</name></name> <operator pos:start="719:18" pos:end="719:18">=</operator> <literal type="number" pos:start="719:20" pos:end="719:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="721:9" pos:end="721:26"><expr pos:start="721:9" pos:end="721:25"><name pos:start="721:9" pos:end="721:21"><name pos:start="721:9" pos:end="721:11">ist</name><operator pos:start="721:12" pos:end="721:13">-&gt;</operator><name pos:start="721:14" pos:end="721:21">next_pts</name></name> <operator pos:start="721:23" pos:end="721:23">=</operator> <literal type="number" pos:start="721:25" pos:end="721:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    

    <comment type="block" pos:start="727:5" pos:end="727:67">/* compute buffer size max (should use a complete heuristic) */</comment>

    <for pos:start="729:5" pos:end="733:5">for<control pos:start="729:8" pos:end="729:33">(<init pos:start="729:9" pos:end="729:12"><expr pos:start="729:9" pos:end="729:11"><name pos:start="729:9" pos:end="729:9">i</name><operator pos:start="729:10" pos:end="729:10">=</operator><literal type="number" pos:start="729:11" pos:end="729:11">0</literal></expr>;</init><condition pos:start="729:13" pos:end="729:29"><expr pos:start="729:13" pos:end="729:28"><name pos:start="729:13" pos:end="729:13">i</name><operator pos:start="729:14" pos:end="729:14">&lt;</operator><name pos:start="729:15" pos:end="729:28">nb_input_files</name></expr>;</condition><incr pos:start="729:30" pos:end="729:32"><expr pos:start="729:30" pos:end="729:32"><name pos:start="729:30" pos:end="729:30">i</name><operator pos:start="729:31" pos:end="729:32">++</operator></expr></incr>)</control> <block pos:start="729:35" pos:end="733:5">{<block_content pos:start="731:9" pos:end="731:45">

        <expr_stmt pos:start="731:9" pos:end="731:45"><expr pos:start="731:9" pos:end="731:44"><name pos:start="731:9" pos:end="731:21"><name pos:start="731:9" pos:end="731:18">file_table</name><index pos:start="731:19" pos:end="731:21">[<expr pos:start="731:20" pos:end="731:20"><name pos:start="731:20" pos:end="731:20">i</name></expr>]</index></name><operator pos:start="731:22" pos:end="731:22">.</operator><name pos:start="731:23" pos:end="731:37">buffer_size_max</name> <operator pos:start="731:39" pos:end="731:39">=</operator> <literal type="number" pos:start="731:41" pos:end="731:44">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="737:5" pos:end="737:43">/* open files and write file headers */</comment>

    <for pos:start="739:5" pos:end="758:0">for<control pos:start="739:8" pos:end="739:34">(<init pos:start="739:9" pos:end="739:12"><expr pos:start="739:9" pos:end="739:11"><name pos:start="739:9" pos:end="739:9">i</name><operator pos:start="739:10" pos:end="739:10">=</operator><literal type="number" pos:start="739:11" pos:end="739:11">0</literal></expr>;</init><condition pos:start="739:13" pos:end="739:30"><expr pos:start="739:13" pos:end="739:29"><name pos:start="739:13" pos:end="739:13">i</name><operator pos:start="739:14" pos:end="739:14">&lt;</operator><name pos:start="739:15" pos:end="739:29">nb_output_files</name></expr>;</condition><incr pos:start="739:31" pos:end="739:33"><expr pos:start="739:31" pos:end="739:33"><name pos:start="739:31" pos:end="739:31">i</name><operator pos:start="739:32" pos:end="739:33">++</operator></expr></incr>)</control> <block pos:start="739:36" pos:end="758:0">{<block_content pos:start="741:9" pos:end="751:9">

        <expr_stmt pos:start="741:9" pos:end="741:29"><expr pos:start="741:9" pos:end="741:28"><name pos:start="741:9" pos:end="741:10">os</name> <operator pos:start="741:12" pos:end="741:12">=</operator> <name pos:start="741:14" pos:end="741:28"><name pos:start="741:14" pos:end="741:25">output_files</name><index pos:start="741:26" pos:end="741:28">[<expr pos:start="741:27" pos:end="741:27"><name pos:start="741:27" pos:end="741:27">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="743:9" pos:end="751:9"><if pos:start="743:9" pos:end="751:9">if <condition pos:start="743:12" pos:end="743:36">(<expr pos:start="743:13" pos:end="743:35"><call pos:start="743:13" pos:end="743:31"><name pos:start="743:13" pos:end="743:27">av_write_header</name><argument_list pos:start="743:28" pos:end="743:31">(<argument pos:start="743:29" pos:end="743:30"><expr pos:start="743:29" pos:end="743:30"><name pos:start="743:29" pos:end="743:30">os</name></expr></argument>)</argument_list></call> <operator pos:start="743:33" pos:end="743:33">&lt;</operator> <literal type="number" pos:start="743:35" pos:end="743:35">0</literal></expr>)</condition> <block pos:start="743:38" pos:end="751:9">{<block_content pos:start="745:13" pos:end="749:22">

            <expr_stmt pos:start="745:13" pos:end="745:109"><expr pos:start="745:13" pos:end="745:108"><call pos:start="745:13" pos:end="745:108"><name pos:start="745:13" pos:end="745:19">fprintf</name><argument_list pos:start="745:20" pos:end="745:108">(<argument pos:start="745:21" pos:end="745:26"><expr pos:start="745:21" pos:end="745:26"><name pos:start="745:21" pos:end="745:26">stderr</name></expr></argument>, <argument pos:start="745:29" pos:end="745:104"><expr pos:start="745:29" pos:end="745:104"><literal type="string" pos:start="745:29" pos:end="745:104">"Could not write header for output file #%d (incorrect codec paramters ?)\n"</literal></expr></argument>, <argument pos:start="745:107" pos:end="745:107"><expr pos:start="745:107" pos:end="745:107"><name pos:start="745:107" pos:end="745:107">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="747:13" pos:end="747:26"><expr pos:start="747:13" pos:end="747:25"><name pos:start="747:13" pos:end="747:15">ret</name> <operator pos:start="747:17" pos:end="747:17">=</operator> <operator pos:start="747:19" pos:end="747:19">-</operator><name pos:start="747:20" pos:end="747:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="749:13" pos:end="749:22">goto <name pos:start="749:18" pos:end="749:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



<cpp:ifndef pos:start="757:1" pos:end="757:20">#<cpp:directive pos:start="757:2" pos:end="757:7">ifndef</cpp:directive> <name pos:start="757:9" pos:end="757:20">CONFIG_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="759:5" pos:end="764:0"><if pos:start="759:5" pos:end="764:0">if <condition pos:start="759:8" pos:end="759:23">( <expr pos:start="759:10" pos:end="759:21"><operator pos:start="759:10" pos:end="759:10">!</operator><name pos:start="759:11" pos:end="759:21">using_stdin</name></expr> )</condition><block type="pseudo" pos:start="761:9" pos:end="764:0"><block_content pos:start="761:9" pos:end="764:0">

        <expr_stmt pos:start="761:9" pos:end="764:0"><expr pos:start="761:9" pos:end="761:55"><call pos:start="761:9" pos:end="761:55"><name pos:start="761:9" pos:end="761:15">fprintf</name><argument_list pos:start="761:16" pos:end="761:55">(<argument pos:start="761:17" pos:end="761:22"><expr pos:start="761:17" pos:end="761:22"><name pos:start="761:17" pos:end="761:22">stderr</name></expr></argument>, <argument pos:start="761:25" pos:end="761:54"><expr pos:start="761:25" pos:end="761:54"><literal type="string" pos:start="761:25" pos:end="761:54">"Press [q] to stop encoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="763:1" pos:end="763:6">#<cpp:directive pos:start="763:2" pos:end="763:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="765:5" pos:end="765:16"><expr pos:start="765:5" pos:end="765:15"><call pos:start="765:5" pos:end="765:15"><name pos:start="765:5" pos:end="765:13">term_init</name><argument_list pos:start="765:14" pos:end="765:15">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="769:5" pos:end="769:23"><expr pos:start="769:5" pos:end="769:22"><name pos:start="769:5" pos:end="769:18">stream_no_data</name> <operator pos:start="769:20" pos:end="769:20">=</operator> <literal type="number" pos:start="769:22" pos:end="769:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="771:5" pos:end="771:13"><expr pos:start="771:5" pos:end="771:12"><name pos:start="771:5" pos:end="771:7">key</name> <operator pos:start="771:9" pos:end="771:9">=</operator> <operator pos:start="771:11" pos:end="771:11">-</operator><literal type="number" pos:start="771:12" pos:end="771:12">1</literal></expr>;</expr_stmt>



    <for pos:start="775:5" pos:end="927:5">for<control pos:start="775:8" pos:end="775:33">(<init pos:start="775:9" pos:end="775:9">;</init> <condition pos:start="775:11" pos:end="775:32"><expr pos:start="775:11" pos:end="775:31"><name pos:start="775:11" pos:end="775:26">received_sigterm</name> <operator pos:start="775:28" pos:end="775:29">==</operator> <literal type="number" pos:start="775:31" pos:end="775:31">0</literal></expr>;</condition><incr/>)</control> <block pos:start="775:35" pos:end="927:5">{<block_content pos:start="777:9" pos:end="925:62">

        <decl_stmt pos:start="777:9" pos:end="777:34"><decl pos:start="777:9" pos:end="777:22"><type pos:start="777:9" pos:end="777:11"><name pos:start="777:9" pos:end="777:11">int</name></type> <name pos:start="777:13" pos:end="777:22">file_index</name></decl>, <decl pos:start="777:25" pos:end="777:33"><type ref="prev" pos:start="777:9" pos:end="777:11"/><name pos:start="777:25" pos:end="777:33">ist_index</name></decl>;</decl_stmt>

        <decl_stmt pos:start="779:9" pos:end="779:21"><decl pos:start="779:9" pos:end="779:20"><type pos:start="779:9" pos:end="779:16"><name pos:start="779:9" pos:end="779:16">AVPacket</name></type> <name pos:start="779:18" pos:end="779:20">pkt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="781:9" pos:end="781:23"><decl pos:start="781:9" pos:end="781:22"><type pos:start="781:9" pos:end="781:14"><name pos:start="781:9" pos:end="781:14">double</name></type> <name pos:start="781:16" pos:end="781:22">pts_min</name></decl>;</decl_stmt>

        

    <label pos:start="785:5" pos:end="785:9"><name pos:start="785:5" pos:end="785:8">redo</name>:</label>

        <comment type="block" pos:start="787:9" pos:end="787:35">/* if 'q' pressed, exits */</comment>

        <if_stmt pos:start="789:9" pos:end="799:9"><if pos:start="789:9" pos:end="799:9">if <condition pos:start="789:12" pos:end="789:25">(<expr pos:start="789:13" pos:end="789:24"><operator pos:start="789:13" pos:end="789:13">!</operator><name pos:start="789:14" pos:end="789:24">using_stdin</name></expr>)</condition> <block pos:start="789:27" pos:end="799:9">{<block_content pos:start="793:13" pos:end="797:22">

            <comment type="block" pos:start="791:13" pos:end="791:45">/* read_key() returns 0 on EOF */</comment>

            <expr_stmt pos:start="793:13" pos:end="793:29"><expr pos:start="793:13" pos:end="793:28"><name pos:start="793:13" pos:end="793:15">key</name> <operator pos:start="793:17" pos:end="793:17">=</operator> <call pos:start="793:19" pos:end="793:28"><name pos:start="793:19" pos:end="793:26">read_key</name><argument_list pos:start="793:27" pos:end="793:28">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="795:13" pos:end="797:22"><if pos:start="795:13" pos:end="797:22">if <condition pos:start="795:16" pos:end="795:27">(<expr pos:start="795:17" pos:end="795:26"><name pos:start="795:17" pos:end="795:19">key</name> <operator pos:start="795:21" pos:end="795:22">==</operator> <literal type="char" pos:start="795:24" pos:end="795:26">'q'</literal></expr>)</condition><block type="pseudo" pos:start="797:17" pos:end="797:22"><block_content pos:start="797:17" pos:end="797:22">

                <break pos:start="797:17" pos:end="797:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="803:9" pos:end="805:33">/* select the stream that we must read now by looking at the

           smallest output pts */</comment>

        <expr_stmt pos:start="807:9" pos:end="807:24"><expr pos:start="807:9" pos:end="807:23"><name pos:start="807:9" pos:end="807:18">file_index</name> <operator pos:start="807:20" pos:end="807:20">=</operator> <operator pos:start="807:22" pos:end="807:22">-</operator><literal type="number" pos:start="807:23" pos:end="807:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="809:9" pos:end="809:23"><expr pos:start="809:9" pos:end="809:22"><name pos:start="809:9" pos:end="809:15">pts_min</name> <operator pos:start="809:17" pos:end="809:17">=</operator> <literal type="number" pos:start="809:19" pos:end="809:22">1e10</literal></expr>;</expr_stmt>

        <for pos:start="811:9" pos:end="833:9">for<control pos:start="811:12" pos:end="811:34">(<init pos:start="811:13" pos:end="811:16"><expr pos:start="811:13" pos:end="811:15"><name pos:start="811:13" pos:end="811:13">i</name><operator pos:start="811:14" pos:end="811:14">=</operator><literal type="number" pos:start="811:15" pos:end="811:15">0</literal></expr>;</init><condition pos:start="811:17" pos:end="811:30"><expr pos:start="811:17" pos:end="811:29"><name pos:start="811:17" pos:end="811:17">i</name><operator pos:start="811:18" pos:end="811:18">&lt;</operator><name pos:start="811:19" pos:end="811:29">nb_ostreams</name></expr>;</condition><incr pos:start="811:31" pos:end="811:33"><expr pos:start="811:31" pos:end="811:33"><name pos:start="811:31" pos:end="811:31">i</name><operator pos:start="811:32" pos:end="811:33">++</operator></expr></incr>)</control> <block pos:start="811:36" pos:end="833:9">{<block_content pos:start="813:13" pos:end="831:13">

            <decl_stmt pos:start="813:13" pos:end="813:23"><decl pos:start="813:13" pos:end="813:22"><type pos:start="813:13" pos:end="813:18"><name pos:start="813:13" pos:end="813:18">double</name></type> <name pos:start="813:20" pos:end="813:22">pts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="815:13" pos:end="815:31"><expr pos:start="815:13" pos:end="815:30"><name pos:start="815:13" pos:end="815:15">ost</name> <operator pos:start="815:17" pos:end="815:17">=</operator> <name pos:start="815:19" pos:end="815:30"><name pos:start="815:19" pos:end="815:27">ost_table</name><index pos:start="815:28" pos:end="815:30">[<expr pos:start="815:29" pos:end="815:29"><name pos:start="815:29" pos:end="815:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="817:13" pos:end="817:47"><expr pos:start="817:13" pos:end="817:46"><name pos:start="817:13" pos:end="817:14">os</name> <operator pos:start="817:16" pos:end="817:16">=</operator> <name pos:start="817:18" pos:end="817:46"><name pos:start="817:18" pos:end="817:29">output_files</name><index pos:start="817:30" pos:end="817:46">[<expr pos:start="817:31" pos:end="817:45"><name pos:start="817:31" pos:end="817:45"><name pos:start="817:31" pos:end="817:33">ost</name><operator pos:start="817:34" pos:end="817:35">-&gt;</operator><name pos:start="817:36" pos:end="817:45">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="819:13" pos:end="819:47"><expr pos:start="819:13" pos:end="819:46"><name pos:start="819:13" pos:end="819:15">ist</name> <operator pos:start="819:17" pos:end="819:17">=</operator> <name pos:start="819:19" pos:end="819:46"><name pos:start="819:19" pos:end="819:27">ist_table</name><index pos:start="819:28" pos:end="819:46">[<expr pos:start="819:29" pos:end="819:45"><name pos:start="819:29" pos:end="819:45"><name pos:start="819:29" pos:end="819:31">ost</name><operator pos:start="819:32" pos:end="819:33">-&gt;</operator><name pos:start="819:34" pos:end="819:45">source_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="821:13" pos:end="821:71"><expr pos:start="821:13" pos:end="821:70"><name pos:start="821:13" pos:end="821:15">pts</name> <operator pos:start="821:17" pos:end="821:17">=</operator> <operator pos:start="821:19" pos:end="821:19">(</operator><name pos:start="821:20" pos:end="821:25">double</name><operator pos:start="821:26" pos:end="821:26">)</operator><name pos:start="821:27" pos:end="821:42"><name pos:start="821:27" pos:end="821:29">ost</name><operator pos:start="821:30" pos:end="821:31">-&gt;</operator><name pos:start="821:32" pos:end="821:33">st</name><operator pos:start="821:34" pos:end="821:35">-&gt;</operator><name pos:start="821:36" pos:end="821:38">pts</name><operator pos:start="821:39" pos:end="821:39">.</operator><name pos:start="821:40" pos:end="821:42">val</name></name> <operator pos:start="821:44" pos:end="821:44">*</operator> <name pos:start="821:46" pos:end="821:56"><name pos:start="821:46" pos:end="821:47">os</name><operator pos:start="821:48" pos:end="821:49">-&gt;</operator><name pos:start="821:50" pos:end="821:56">pts_num</name></name> <operator pos:start="821:58" pos:end="821:58">/</operator> <name pos:start="821:60" pos:end="821:70"><name pos:start="821:60" pos:end="821:61">os</name><operator pos:start="821:62" pos:end="821:63">-&gt;</operator><name pos:start="821:64" pos:end="821:70">pts_den</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="823:13" pos:end="831:13"><if pos:start="823:13" pos:end="831:13">if <condition pos:start="823:16" pos:end="825:30">(<expr pos:start="823:17" pos:end="825:29"><operator pos:start="823:17" pos:end="823:17">!</operator><name pos:start="823:18" pos:end="823:44"><name pos:start="823:18" pos:end="823:27">file_table</name><index pos:start="823:28" pos:end="823:44">[<expr pos:start="823:29" pos:end="823:43"><name pos:start="823:29" pos:end="823:43"><name pos:start="823:29" pos:end="823:31">ist</name><operator pos:start="823:32" pos:end="823:33">-&gt;</operator><name pos:start="823:34" pos:end="823:43">file_index</name></name></expr>]</index></name><operator pos:start="823:45" pos:end="823:45">.</operator><name pos:start="823:46" pos:end="823:56">eof_reached</name> <operator pos:start="823:58" pos:end="823:59">&amp;&amp;</operator> 

                <name pos:start="825:17" pos:end="825:19">pts</name> <operator pos:start="825:21" pos:end="825:21">&lt;</operator> <name pos:start="825:23" pos:end="825:29">pts_min</name></expr>)</condition> <block pos:start="825:32" pos:end="831:13">{<block_content pos:start="827:17" pos:end="829:45">

                <expr_stmt pos:start="827:17" pos:end="827:30"><expr pos:start="827:17" pos:end="827:29"><name pos:start="827:17" pos:end="827:23">pts_min</name> <operator pos:start="827:25" pos:end="827:25">=</operator> <name pos:start="827:27" pos:end="827:29">pts</name></expr>;</expr_stmt>

                <expr_stmt pos:start="829:17" pos:end="829:45"><expr pos:start="829:17" pos:end="829:44"><name pos:start="829:17" pos:end="829:26">file_index</name> <operator pos:start="829:28" pos:end="829:28">=</operator> <name pos:start="829:30" pos:end="829:44"><name pos:start="829:30" pos:end="829:32">ist</name><operator pos:start="829:33" pos:end="829:34">-&gt;</operator><name pos:start="829:35" pos:end="829:44">file_index</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="835:9" pos:end="835:37">/* if none, if is finished */</comment>

        <if_stmt pos:start="837:9" pos:end="841:9"><if pos:start="837:9" pos:end="841:9">if <condition pos:start="837:12" pos:end="837:27">(<expr pos:start="837:13" pos:end="837:26"><name pos:start="837:13" pos:end="837:22">file_index</name> <operator pos:start="837:24" pos:end="837:24">&lt;</operator> <literal type="number" pos:start="837:26" pos:end="837:26">0</literal></expr>)</condition> <block pos:start="837:29" pos:end="841:9">{<block_content pos:start="839:13" pos:end="839:18">

            <break pos:start="839:13" pos:end="839:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="845:9" pos:end="845:48">/* finish if recording time exhausted */</comment>

        <if_stmt pos:start="847:9" pos:end="849:18"><if pos:start="847:9" pos:end="849:18">if <condition pos:start="847:12" pos:end="847:74">(<expr pos:start="847:13" pos:end="847:73"><name pos:start="847:13" pos:end="847:26">recording_time</name> <operator pos:start="847:28" pos:end="847:28">&gt;</operator> <literal type="number" pos:start="847:30" pos:end="847:30">0</literal> <operator pos:start="847:32" pos:end="847:33">&amp;&amp;</operator> <name pos:start="847:35" pos:end="847:41">pts_min</name> <operator pos:start="847:43" pos:end="847:44">&gt;=</operator> <operator pos:start="847:46" pos:end="847:46">(</operator><name pos:start="847:47" pos:end="847:60">recording_time</name> <operator pos:start="847:62" pos:end="847:62">/</operator> <literal type="number" pos:start="847:64" pos:end="847:72">1000000.0</literal><operator pos:start="847:73" pos:end="847:73">)</operator></expr>)</condition><block type="pseudo" pos:start="849:13" pos:end="849:18"><block_content pos:start="849:13" pos:end="849:18">

            <break pos:start="849:13" pos:end="849:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="853:9" pos:end="853:60">/* read a frame from it and output it in the fifo */</comment>

        <expr_stmt pos:start="855:9" pos:end="855:37"><expr pos:start="855:9" pos:end="855:36"><name pos:start="855:9" pos:end="855:10">is</name> <operator pos:start="855:12" pos:end="855:12">=</operator> <name pos:start="855:14" pos:end="855:36"><name pos:start="855:14" pos:end="855:24">input_files</name><index pos:start="855:25" pos:end="855:36">[<expr pos:start="855:26" pos:end="855:35"><name pos:start="855:26" pos:end="855:35">file_index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="857:9" pos:end="863:9"><if pos:start="857:9" pos:end="863:9">if <condition pos:start="857:12" pos:end="857:40">(<expr pos:start="857:13" pos:end="857:39"><call pos:start="857:13" pos:end="857:35"><name pos:start="857:13" pos:end="857:25">av_read_frame</name><argument_list pos:start="857:26" pos:end="857:35">(<argument pos:start="857:27" pos:end="857:28"><expr pos:start="857:27" pos:end="857:28"><name pos:start="857:27" pos:end="857:28">is</name></expr></argument>, <argument pos:start="857:31" pos:end="857:34"><expr pos:start="857:31" pos:end="857:34"><operator pos:start="857:31" pos:end="857:31">&amp;</operator><name pos:start="857:32" pos:end="857:34">pkt</name></expr></argument>)</argument_list></call> <operator pos:start="857:37" pos:end="857:37">&lt;</operator> <literal type="number" pos:start="857:39" pos:end="857:39">0</literal></expr>)</condition> <block pos:start="857:42" pos:end="863:9">{<block_content pos:start="859:13" pos:end="861:21">

            <expr_stmt pos:start="859:13" pos:end="859:51"><expr pos:start="859:13" pos:end="859:50"><name pos:start="859:13" pos:end="859:34"><name pos:start="859:13" pos:end="859:22">file_table</name><index pos:start="859:23" pos:end="859:34">[<expr pos:start="859:24" pos:end="859:33"><name pos:start="859:24" pos:end="859:33">file_index</name></expr>]</index></name><operator pos:start="859:35" pos:end="859:35">.</operator><name pos:start="859:36" pos:end="859:46">eof_reached</name> <operator pos:start="859:48" pos:end="859:48">=</operator> <literal type="number" pos:start="859:50" pos:end="859:50">1</literal></expr>;</expr_stmt>

            <continue pos:start="861:13" pos:end="861:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="867:9" pos:end="875:9"><if pos:start="867:9" pos:end="871:9">if <condition pos:start="867:12" pos:end="867:22">(<expr pos:start="867:13" pos:end="867:21"><operator pos:start="867:13" pos:end="867:13">!</operator><name pos:start="867:14" pos:end="867:21"><name pos:start="867:14" pos:end="867:16">pkt</name><operator pos:start="867:17" pos:end="867:17">.</operator><name pos:start="867:18" pos:end="867:21">size</name></name></expr>)</condition> <block pos:start="867:24" pos:end="871:9">{<block_content pos:start="869:13" pos:end="869:32">

            <expr_stmt pos:start="869:13" pos:end="869:32"><expr pos:start="869:13" pos:end="869:31"><name pos:start="869:13" pos:end="869:26">stream_no_data</name> <operator pos:start="869:28" pos:end="869:28">=</operator> <name pos:start="869:30" pos:end="869:31">is</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="871:11" pos:end="875:9">else <block pos:start="871:16" pos:end="875:9">{<block_content pos:start="873:13" pos:end="873:31">

            <expr_stmt pos:start="873:13" pos:end="873:31"><expr pos:start="873:13" pos:end="873:30"><name pos:start="873:13" pos:end="873:26">stream_no_data</name> <operator pos:start="873:28" pos:end="873:28">=</operator> <literal type="number" pos:start="873:30" pos:end="873:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="877:9" pos:end="881:9"><if pos:start="877:9" pos:end="881:9">if <condition pos:start="877:12" pos:end="877:24">(<expr pos:start="877:13" pos:end="877:23"><name pos:start="877:13" pos:end="877:23">do_pkt_dump</name></expr>)</condition> <block pos:start="877:26" pos:end="881:9">{<block_content pos:start="879:13" pos:end="879:51">

            <expr_stmt pos:start="879:13" pos:end="879:51"><expr pos:start="879:13" pos:end="879:50"><call pos:start="879:13" pos:end="879:50"><name pos:start="879:13" pos:end="879:23">av_pkt_dump</name><argument_list pos:start="879:24" pos:end="879:50">(<argument pos:start="879:25" pos:end="879:30"><expr pos:start="879:25" pos:end="879:30"><name pos:start="879:25" pos:end="879:30">stdout</name></expr></argument>, <argument pos:start="879:33" pos:end="879:36"><expr pos:start="879:33" pos:end="879:36"><operator pos:start="879:33" pos:end="879:33">&amp;</operator><name pos:start="879:34" pos:end="879:36">pkt</name></expr></argument>, <argument pos:start="879:39" pos:end="879:49"><expr pos:start="879:39" pos:end="879:49"><name pos:start="879:39" pos:end="879:49">do_hex_dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="883:9" pos:end="885:52">/* the following test is needed in case new streams appear

           dynamically in stream : we ignore them */</comment>

        <if_stmt pos:start="887:9" pos:end="889:32"><if pos:start="887:9" pos:end="889:32">if <condition pos:start="887:12" pos:end="887:66">(<expr pos:start="887:13" pos:end="887:65"><name pos:start="887:13" pos:end="887:28"><name pos:start="887:13" pos:end="887:15">pkt</name><operator pos:start="887:16" pos:end="887:16">.</operator><name pos:start="887:17" pos:end="887:28">stream_index</name></name> <operator pos:start="887:30" pos:end="887:31">&gt;=</operator> <name pos:start="887:33" pos:end="887:54"><name pos:start="887:33" pos:end="887:42">file_table</name><index pos:start="887:43" pos:end="887:54">[<expr pos:start="887:44" pos:end="887:53"><name pos:start="887:44" pos:end="887:53">file_index</name></expr>]</index></name><operator pos:start="887:55" pos:end="887:55">.</operator><name pos:start="887:56" pos:end="887:65">nb_streams</name></expr>)</condition><block type="pseudo" pos:start="889:13" pos:end="889:32"><block_content pos:start="889:13" pos:end="889:32">

            <goto pos:start="889:13" pos:end="889:32">goto <name pos:start="889:18" pos:end="889:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="891:9" pos:end="891:72"><expr pos:start="891:9" pos:end="891:71"><name pos:start="891:9" pos:end="891:17">ist_index</name> <operator pos:start="891:19" pos:end="891:19">=</operator> <name pos:start="891:21" pos:end="891:42"><name pos:start="891:21" pos:end="891:30">file_table</name><index pos:start="891:31" pos:end="891:42">[<expr pos:start="891:32" pos:end="891:41"><name pos:start="891:32" pos:end="891:41">file_index</name></expr>]</index></name><operator pos:start="891:43" pos:end="891:43">.</operator><name pos:start="891:44" pos:end="891:52">ist_index</name> <operator pos:start="891:54" pos:end="891:54">+</operator> <name pos:start="891:56" pos:end="891:71"><name pos:start="891:56" pos:end="891:58">pkt</name><operator pos:start="891:59" pos:end="891:59">.</operator><name pos:start="891:60" pos:end="891:71">stream_index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="893:9" pos:end="893:35"><expr pos:start="893:9" pos:end="893:34"><name pos:start="893:9" pos:end="893:11">ist</name> <operator pos:start="893:13" pos:end="893:13">=</operator> <name pos:start="893:15" pos:end="893:34"><name pos:start="893:15" pos:end="893:23">ist_table</name><index pos:start="893:24" pos:end="893:34">[<expr pos:start="893:25" pos:end="893:33"><name pos:start="893:25" pos:end="893:33">ist_index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="895:9" pos:end="897:32"><if pos:start="895:9" pos:end="897:32">if <condition pos:start="895:12" pos:end="895:25">(<expr pos:start="895:13" pos:end="895:24"><name pos:start="895:13" pos:end="895:24"><name pos:start="895:13" pos:end="895:15">ist</name><operator pos:start="895:16" pos:end="895:17">-&gt;</operator><name pos:start="895:18" pos:end="895:24">discard</name></name></expr>)</condition><block type="pseudo" pos:start="897:13" pos:end="897:32"><block_content pos:start="897:13" pos:end="897:32">

            <goto pos:start="897:13" pos:end="897:32">goto <name pos:start="897:18" pos:end="897:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>



        <comment type="line" pos:start="901:9" pos:end="901:89">//fprintf(stderr,"read #%d.%d size=%d\n", ist-&gt;file_index, ist-&gt;index, pkt.size);</comment>

        <if_stmt pos:start="903:9" pos:end="913:9"><if pos:start="903:9" pos:end="913:9">if <condition pos:start="903:12" pos:end="903:76">(<expr pos:start="903:13" pos:end="903:75"><call pos:start="903:13" pos:end="903:71"><name pos:start="903:13" pos:end="903:25">output_packet</name><argument_list pos:start="903:26" pos:end="903:71">(<argument pos:start="903:27" pos:end="903:29"><expr pos:start="903:27" pos:end="903:29"><name pos:start="903:27" pos:end="903:29">ist</name></expr></argument>, <argument pos:start="903:32" pos:end="903:40"><expr pos:start="903:32" pos:end="903:40"><name pos:start="903:32" pos:end="903:40">ist_index</name></expr></argument>, <argument pos:start="903:43" pos:end="903:51"><expr pos:start="903:43" pos:end="903:51"><name pos:start="903:43" pos:end="903:51">ost_table</name></expr></argument>, <argument pos:start="903:54" pos:end="903:64"><expr pos:start="903:54" pos:end="903:64"><name pos:start="903:54" pos:end="903:64">nb_ostreams</name></expr></argument>, <argument pos:start="903:67" pos:end="903:70"><expr pos:start="903:67" pos:end="903:70"><operator pos:start="903:67" pos:end="903:67">&amp;</operator><name pos:start="903:68" pos:end="903:70">pkt</name></expr></argument>)</argument_list></call> <operator pos:start="903:73" pos:end="903:73">&lt;</operator> <literal type="number" pos:start="903:75" pos:end="903:75">0</literal></expr>)</condition> <block pos:start="903:78" pos:end="913:9">{<block_content pos:start="905:13" pos:end="911:22">

            <expr_stmt pos:start="905:13" pos:end="907:49"><expr pos:start="905:13" pos:end="907:48"><call pos:start="905:13" pos:end="907:48"><name pos:start="905:13" pos:end="905:19">fprintf</name><argument_list pos:start="905:20" pos:end="907:48">(<argument pos:start="905:21" pos:end="905:26"><expr pos:start="905:21" pos:end="905:26"><name pos:start="905:21" pos:end="905:26">stderr</name></expr></argument>, <argument pos:start="905:29" pos:end="905:66"><expr pos:start="905:29" pos:end="905:66"><literal type="string" pos:start="905:29" pos:end="905:66">"Error while decoding stream #%d.%d\n"</literal></expr></argument>,

                    <argument pos:start="907:21" pos:end="907:35"><expr pos:start="907:21" pos:end="907:35"><name pos:start="907:21" pos:end="907:35"><name pos:start="907:21" pos:end="907:23">ist</name><operator pos:start="907:24" pos:end="907:25">-&gt;</operator><name pos:start="907:26" pos:end="907:35">file_index</name></name></expr></argument>, <argument pos:start="907:38" pos:end="907:47"><expr pos:start="907:38" pos:end="907:47"><name pos:start="907:38" pos:end="907:47"><name pos:start="907:38" pos:end="907:40">ist</name><operator pos:start="907:41" pos:end="907:42">-&gt;</operator><name pos:start="907:43" pos:end="907:47">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="909:13" pos:end="909:33"><expr pos:start="909:13" pos:end="909:32"><call pos:start="909:13" pos:end="909:32"><name pos:start="909:13" pos:end="909:26">av_free_packet</name><argument_list pos:start="909:27" pos:end="909:32">(<argument pos:start="909:28" pos:end="909:31"><expr pos:start="909:28" pos:end="909:31"><operator pos:start="909:28" pos:end="909:28">&amp;</operator><name pos:start="909:29" pos:end="909:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="911:13" pos:end="911:22">goto <name pos:start="911:18" pos:end="911:21">redo</name>;</goto>

        </block_content>}</block></if></if_stmt>

        

    <label pos:start="917:5" pos:end="917:19"><name pos:start="917:5" pos:end="917:18">discard_packet</name>:</label>

        <expr_stmt pos:start="919:9" pos:end="919:29"><expr pos:start="919:9" pos:end="919:28"><call pos:start="919:9" pos:end="919:28"><name pos:start="919:9" pos:end="919:22">av_free_packet</name><argument_list pos:start="919:23" pos:end="919:28">(<argument pos:start="919:24" pos:end="919:27"><expr pos:start="919:24" pos:end="919:27"><operator pos:start="919:24" pos:end="919:24">&amp;</operator><name pos:start="919:25" pos:end="919:27">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <comment type="block" pos:start="923:9" pos:end="923:75">/* dump report by using the output first video and audio streams */</comment>

        <expr_stmt pos:start="925:9" pos:end="925:62"><expr pos:start="925:9" pos:end="925:61"><call pos:start="925:9" pos:end="925:61"><name pos:start="925:9" pos:end="925:20">print_report</name><argument_list pos:start="925:21" pos:end="925:61">(<argument pos:start="925:22" pos:end="925:33"><expr pos:start="925:22" pos:end="925:33"><name pos:start="925:22" pos:end="925:33">output_files</name></expr></argument>, <argument pos:start="925:36" pos:end="925:44"><expr pos:start="925:36" pos:end="925:44"><name pos:start="925:36" pos:end="925:44">ost_table</name></expr></argument>, <argument pos:start="925:47" pos:end="925:57"><expr pos:start="925:47" pos:end="925:57"><name pos:start="925:47" pos:end="925:57">nb_ostreams</name></expr></argument>, <argument pos:start="925:60" pos:end="925:60"><expr pos:start="925:60" pos:end="925:60"><literal type="number" pos:start="925:60" pos:end="925:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="931:5" pos:end="931:65">/* at the end of stream, we must flush the decoder buffers */</comment>

    <for pos:start="933:5" pos:end="943:5">for<control pos:start="933:8" pos:end="933:30">(<init pos:start="933:9" pos:end="933:12"><expr pos:start="933:9" pos:end="933:11"><name pos:start="933:9" pos:end="933:9">i</name><operator pos:start="933:10" pos:end="933:10">=</operator><literal type="number" pos:start="933:11" pos:end="933:11">0</literal></expr>;</init><condition pos:start="933:13" pos:end="933:26"><expr pos:start="933:13" pos:end="933:25"><name pos:start="933:13" pos:end="933:13">i</name><operator pos:start="933:14" pos:end="933:14">&lt;</operator><name pos:start="933:15" pos:end="933:25">nb_istreams</name></expr>;</condition><incr pos:start="933:27" pos:end="933:29"><expr pos:start="933:27" pos:end="933:29"><name pos:start="933:27" pos:end="933:27">i</name><operator pos:start="933:28" pos:end="933:29">++</operator></expr></incr>)</control> <block pos:start="933:32" pos:end="943:5">{<block_content pos:start="935:9" pos:end="941:9">

        <expr_stmt pos:start="935:9" pos:end="935:27"><expr pos:start="935:9" pos:end="935:26"><name pos:start="935:9" pos:end="935:11">ist</name> <operator pos:start="935:13" pos:end="935:13">=</operator> <name pos:start="935:15" pos:end="935:26"><name pos:start="935:15" pos:end="935:23">ist_table</name><index pos:start="935:24" pos:end="935:26">[<expr pos:start="935:25" pos:end="935:25"><name pos:start="935:25" pos:end="935:25">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="937:9" pos:end="941:9"><if pos:start="937:9" pos:end="941:9">if <condition pos:start="937:12" pos:end="937:33">(<expr pos:start="937:13" pos:end="937:32"><name pos:start="937:13" pos:end="937:32"><name pos:start="937:13" pos:end="937:15">ist</name><operator pos:start="937:16" pos:end="937:17">-&gt;</operator><name pos:start="937:18" pos:end="937:32">decoding_needed</name></name></expr>)</condition> <block pos:start="937:35" pos:end="941:9">{<block_content pos:start="939:13" pos:end="939:64">

            <expr_stmt pos:start="939:13" pos:end="939:64"><expr pos:start="939:13" pos:end="939:63"><call pos:start="939:13" pos:end="939:63"><name pos:start="939:13" pos:end="939:25">output_packet</name><argument_list pos:start="939:26" pos:end="939:63">(<argument pos:start="939:27" pos:end="939:29"><expr pos:start="939:27" pos:end="939:29"><name pos:start="939:27" pos:end="939:29">ist</name></expr></argument>, <argument pos:start="939:32" pos:end="939:32"><expr pos:start="939:32" pos:end="939:32"><name pos:start="939:32" pos:end="939:32">i</name></expr></argument>, <argument pos:start="939:35" pos:end="939:43"><expr pos:start="939:35" pos:end="939:43"><name pos:start="939:35" pos:end="939:43">ost_table</name></expr></argument>, <argument pos:start="939:46" pos:end="939:56"><expr pos:start="939:46" pos:end="939:56"><name pos:start="939:46" pos:end="939:56">nb_ostreams</name></expr></argument>, <argument pos:start="939:59" pos:end="939:62"><expr pos:start="939:59" pos:end="939:62"><name pos:start="939:59" pos:end="939:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="947:5" pos:end="947:16"><expr pos:start="947:5" pos:end="947:15"><call pos:start="947:5" pos:end="947:15"><name pos:start="947:5" pos:end="947:13">term_exit</name><argument_list pos:start="947:14" pos:end="947:15">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="951:5" pos:end="951:64">/* dump report by using the first video and audio streams */</comment>

    <expr_stmt pos:start="953:5" pos:end="953:58"><expr pos:start="953:5" pos:end="953:57"><call pos:start="953:5" pos:end="953:57"><name pos:start="953:5" pos:end="953:16">print_report</name><argument_list pos:start="953:17" pos:end="953:57">(<argument pos:start="953:18" pos:end="953:29"><expr pos:start="953:18" pos:end="953:29"><name pos:start="953:18" pos:end="953:29">output_files</name></expr></argument>, <argument pos:start="953:32" pos:end="953:40"><expr pos:start="953:32" pos:end="953:40"><name pos:start="953:32" pos:end="953:40">ost_table</name></expr></argument>, <argument pos:start="953:43" pos:end="953:53"><expr pos:start="953:43" pos:end="953:53"><name pos:start="953:43" pos:end="953:53">nb_ostreams</name></expr></argument>, <argument pos:start="953:56" pos:end="953:56"><expr pos:start="953:56" pos:end="953:56"><literal type="number" pos:start="953:56" pos:end="953:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="957:5" pos:end="957:52">/* write the trailer if needed and close file */</comment>

    <for pos:start="959:5" pos:end="965:5">for<control pos:start="959:8" pos:end="959:34">(<init pos:start="959:9" pos:end="959:12"><expr pos:start="959:9" pos:end="959:11"><name pos:start="959:9" pos:end="959:9">i</name><operator pos:start="959:10" pos:end="959:10">=</operator><literal type="number" pos:start="959:11" pos:end="959:11">0</literal></expr>;</init><condition pos:start="959:13" pos:end="959:30"><expr pos:start="959:13" pos:end="959:29"><name pos:start="959:13" pos:end="959:13">i</name><operator pos:start="959:14" pos:end="959:14">&lt;</operator><name pos:start="959:15" pos:end="959:29">nb_output_files</name></expr>;</condition><incr pos:start="959:31" pos:end="959:33"><expr pos:start="959:31" pos:end="959:33"><name pos:start="959:31" pos:end="959:31">i</name><operator pos:start="959:32" pos:end="959:33">++</operator></expr></incr>)</control> <block pos:start="959:36" pos:end="965:5">{<block_content pos:start="961:9" pos:end="963:29">

        <expr_stmt pos:start="961:9" pos:end="961:29"><expr pos:start="961:9" pos:end="961:28"><name pos:start="961:9" pos:end="961:10">os</name> <operator pos:start="961:12" pos:end="961:12">=</operator> <name pos:start="961:14" pos:end="961:28"><name pos:start="961:14" pos:end="961:25">output_files</name><index pos:start="961:26" pos:end="961:28">[<expr pos:start="961:27" pos:end="961:27"><name pos:start="961:27" pos:end="961:27">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="963:9" pos:end="963:29"><expr pos:start="963:9" pos:end="963:28"><call pos:start="963:9" pos:end="963:28"><name pos:start="963:9" pos:end="963:24">av_write_trailer</name><argument_list pos:start="963:25" pos:end="963:28">(<argument pos:start="963:26" pos:end="963:27"><expr pos:start="963:26" pos:end="963:27"><name pos:start="963:26" pos:end="963:27">os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="969:5" pos:end="969:28">/* close each encoder */</comment>

    <for pos:start="971:5" pos:end="983:5">for<control pos:start="971:8" pos:end="971:30">(<init pos:start="971:9" pos:end="971:12"><expr pos:start="971:9" pos:end="971:11"><name pos:start="971:9" pos:end="971:9">i</name><operator pos:start="971:10" pos:end="971:10">=</operator><literal type="number" pos:start="971:11" pos:end="971:11">0</literal></expr>;</init><condition pos:start="971:13" pos:end="971:26"><expr pos:start="971:13" pos:end="971:25"><name pos:start="971:13" pos:end="971:13">i</name><operator pos:start="971:14" pos:end="971:14">&lt;</operator><name pos:start="971:15" pos:end="971:25">nb_ostreams</name></expr>;</condition><incr pos:start="971:27" pos:end="971:29"><expr pos:start="971:27" pos:end="971:29"><name pos:start="971:27" pos:end="971:27">i</name><operator pos:start="971:28" pos:end="971:29">++</operator></expr></incr>)</control> <block pos:start="971:32" pos:end="983:5">{<block_content pos:start="973:9" pos:end="981:9">

        <expr_stmt pos:start="973:9" pos:end="973:27"><expr pos:start="973:9" pos:end="973:26"><name pos:start="973:9" pos:end="973:11">ost</name> <operator pos:start="973:13" pos:end="973:13">=</operator> <name pos:start="973:15" pos:end="973:26"><name pos:start="973:15" pos:end="973:23">ost_table</name><index pos:start="973:24" pos:end="973:26">[<expr pos:start="973:25" pos:end="973:25"><name pos:start="973:25" pos:end="973:25">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="975:9" pos:end="981:9"><if pos:start="975:9" pos:end="981:9">if <condition pos:start="975:12" pos:end="975:33">(<expr pos:start="975:13" pos:end="975:32"><name pos:start="975:13" pos:end="975:32"><name pos:start="975:13" pos:end="975:15">ost</name><operator pos:start="975:16" pos:end="975:17">-&gt;</operator><name pos:start="975:18" pos:end="975:32">encoding_needed</name></name></expr>)</condition> <block pos:start="975:35" pos:end="981:9">{<block_content pos:start="977:13" pos:end="979:43">

            <expr_stmt pos:start="977:13" pos:end="977:47"><expr pos:start="977:13" pos:end="977:46"><call pos:start="977:13" pos:end="977:46"><name pos:start="977:13" pos:end="977:20">av_freep</name><argument_list pos:start="977:21" pos:end="977:46">(<argument pos:start="977:22" pos:end="977:45"><expr pos:start="977:22" pos:end="977:45"><operator pos:start="977:22" pos:end="977:22">&amp;</operator><name pos:start="977:23" pos:end="977:45"><name pos:start="977:23" pos:end="977:25">ost</name><operator pos:start="977:26" pos:end="977:27">-&gt;</operator><name pos:start="977:28" pos:end="977:29">st</name><operator pos:start="977:30" pos:end="977:31">-&gt;</operator><name pos:start="977:32" pos:end="977:36">codec</name><operator pos:start="977:37" pos:end="977:37">.</operator><name pos:start="977:38" pos:end="977:45">stats_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="979:13" pos:end="979:43"><expr pos:start="979:13" pos:end="979:42"><call pos:start="979:13" pos:end="979:42"><name pos:start="979:13" pos:end="979:25">avcodec_close</name><argument_list pos:start="979:26" pos:end="979:42">(<argument pos:start="979:27" pos:end="979:41"><expr pos:start="979:27" pos:end="979:41"><operator pos:start="979:27" pos:end="979:27">&amp;</operator><name pos:start="979:28" pos:end="979:41"><name pos:start="979:28" pos:end="979:30">ost</name><operator pos:start="979:31" pos:end="979:32">-&gt;</operator><name pos:start="979:33" pos:end="979:34">st</name><operator pos:start="979:35" pos:end="979:36">-&gt;</operator><name pos:start="979:37" pos:end="979:41">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    

    <comment type="block" pos:start="987:5" pos:end="987:28">/* close each decoder */</comment>

    <for pos:start="989:5" pos:end="999:5">for<control pos:start="989:8" pos:end="989:30">(<init pos:start="989:9" pos:end="989:12"><expr pos:start="989:9" pos:end="989:11"><name pos:start="989:9" pos:end="989:9">i</name><operator pos:start="989:10" pos:end="989:10">=</operator><literal type="number" pos:start="989:11" pos:end="989:11">0</literal></expr>;</init><condition pos:start="989:13" pos:end="989:26"><expr pos:start="989:13" pos:end="989:25"><name pos:start="989:13" pos:end="989:13">i</name><operator pos:start="989:14" pos:end="989:14">&lt;</operator><name pos:start="989:15" pos:end="989:25">nb_istreams</name></expr>;</condition><incr pos:start="989:27" pos:end="989:29"><expr pos:start="989:27" pos:end="989:29"><name pos:start="989:27" pos:end="989:27">i</name><operator pos:start="989:28" pos:end="989:29">++</operator></expr></incr>)</control> <block pos:start="989:32" pos:end="999:5">{<block_content pos:start="991:9" pos:end="997:9">

        <expr_stmt pos:start="991:9" pos:end="991:27"><expr pos:start="991:9" pos:end="991:26"><name pos:start="991:9" pos:end="991:11">ist</name> <operator pos:start="991:13" pos:end="991:13">=</operator> <name pos:start="991:15" pos:end="991:26"><name pos:start="991:15" pos:end="991:23">ist_table</name><index pos:start="991:24" pos:end="991:26">[<expr pos:start="991:25" pos:end="991:25"><name pos:start="991:25" pos:end="991:25">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="993:9" pos:end="997:9"><if pos:start="993:9" pos:end="997:9">if <condition pos:start="993:12" pos:end="993:33">(<expr pos:start="993:13" pos:end="993:32"><name pos:start="993:13" pos:end="993:32"><name pos:start="993:13" pos:end="993:15">ist</name><operator pos:start="993:16" pos:end="993:17">-&gt;</operator><name pos:start="993:18" pos:end="993:32">decoding_needed</name></name></expr>)</condition> <block pos:start="993:35" pos:end="997:9">{<block_content pos:start="995:13" pos:end="995:43">

            <expr_stmt pos:start="995:13" pos:end="995:43"><expr pos:start="995:13" pos:end="995:42"><call pos:start="995:13" pos:end="995:42"><name pos:start="995:13" pos:end="995:25">avcodec_close</name><argument_list pos:start="995:26" pos:end="995:42">(<argument pos:start="995:27" pos:end="995:41"><expr pos:start="995:27" pos:end="995:41"><operator pos:start="995:27" pos:end="995:27">&amp;</operator><name pos:start="995:28" pos:end="995:41"><name pos:start="995:28" pos:end="995:30">ist</name><operator pos:start="995:31" pos:end="995:32">-&gt;</operator><name pos:start="995:33" pos:end="995:34">st</name><operator pos:start="995:35" pos:end="995:36">-&gt;</operator><name pos:start="995:37" pos:end="995:41">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="1003:5" pos:end="1003:20">/* finished ! */</comment>

    

    <expr_stmt pos:start="1007:5" pos:end="1007:12"><expr pos:start="1007:5" pos:end="1007:11"><name pos:start="1007:5" pos:end="1007:7">ret</name> <operator pos:start="1007:9" pos:end="1007:9">=</operator> <literal type="number" pos:start="1007:11" pos:end="1007:11">0</literal></expr>;</expr_stmt>

 <label pos:start="1009:2" pos:end="1009:7"><name pos:start="1009:2" pos:end="1009:6">fail1</name>:</label>

    <expr_stmt pos:start="1011:5" pos:end="1011:24"><expr pos:start="1011:5" pos:end="1011:23"><call pos:start="1011:5" pos:end="1011:23"><name pos:start="1011:5" pos:end="1011:11">av_free</name><argument_list pos:start="1011:12" pos:end="1011:23">(<argument pos:start="1011:13" pos:end="1011:22"><expr pos:start="1011:13" pos:end="1011:22"><name pos:start="1011:13" pos:end="1011:22">file_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="1015:5" pos:end="1027:5"><if pos:start="1015:5" pos:end="1027:5">if <condition pos:start="1015:8" pos:end="1015:18">(<expr pos:start="1015:9" pos:end="1015:17"><name pos:start="1015:9" pos:end="1015:17">ist_table</name></expr>)</condition> <block pos:start="1015:20" pos:end="1027:5">{<block_content pos:start="1017:9" pos:end="1025:27">

        <for pos:start="1017:9" pos:end="1023:9">for<control pos:start="1017:12" pos:end="1017:34">(<init pos:start="1017:13" pos:end="1017:16"><expr pos:start="1017:13" pos:end="1017:15"><name pos:start="1017:13" pos:end="1017:13">i</name><operator pos:start="1017:14" pos:end="1017:14">=</operator><literal type="number" pos:start="1017:15" pos:end="1017:15">0</literal></expr>;</init><condition pos:start="1017:17" pos:end="1017:30"><expr pos:start="1017:17" pos:end="1017:29"><name pos:start="1017:17" pos:end="1017:17">i</name><operator pos:start="1017:18" pos:end="1017:18">&lt;</operator><name pos:start="1017:19" pos:end="1017:29">nb_istreams</name></expr>;</condition><incr pos:start="1017:31" pos:end="1017:33"><expr pos:start="1017:31" pos:end="1017:33"><name pos:start="1017:31" pos:end="1017:31">i</name><operator pos:start="1017:32" pos:end="1017:33">++</operator></expr></incr>)</control> <block pos:start="1017:36" pos:end="1023:9">{<block_content pos:start="1019:13" pos:end="1021:25">

            <expr_stmt pos:start="1019:13" pos:end="1019:31"><expr pos:start="1019:13" pos:end="1019:30"><name pos:start="1019:13" pos:end="1019:15">ist</name> <operator pos:start="1019:17" pos:end="1019:17">=</operator> <name pos:start="1019:19" pos:end="1019:30"><name pos:start="1019:19" pos:end="1019:27">ist_table</name><index pos:start="1019:28" pos:end="1019:30">[<expr pos:start="1019:29" pos:end="1019:29"><name pos:start="1019:29" pos:end="1019:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1021:13" pos:end="1021:25"><expr pos:start="1021:13" pos:end="1021:24"><call pos:start="1021:13" pos:end="1021:24"><name pos:start="1021:13" pos:end="1021:19">av_free</name><argument_list pos:start="1021:20" pos:end="1021:24">(<argument pos:start="1021:21" pos:end="1021:23"><expr pos:start="1021:21" pos:end="1021:23"><name pos:start="1021:21" pos:end="1021:23">ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="1025:9" pos:end="1025:27"><expr pos:start="1025:9" pos:end="1025:26"><call pos:start="1025:9" pos:end="1025:26"><name pos:start="1025:9" pos:end="1025:15">av_free</name><argument_list pos:start="1025:16" pos:end="1025:26">(<argument pos:start="1025:17" pos:end="1025:25"><expr pos:start="1025:17" pos:end="1025:25"><name pos:start="1025:17" pos:end="1025:25">ist_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1029:5" pos:end="1067:5"><if pos:start="1029:5" pos:end="1067:5">if <condition pos:start="1029:8" pos:end="1029:18">(<expr pos:start="1029:9" pos:end="1029:17"><name pos:start="1029:9" pos:end="1029:17">ost_table</name></expr>)</condition> <block pos:start="1029:20" pos:end="1067:5">{<block_content pos:start="1031:9" pos:end="1065:27">

        <for pos:start="1031:9" pos:end="1063:9">for<control pos:start="1031:12" pos:end="1031:34">(<init pos:start="1031:13" pos:end="1031:16"><expr pos:start="1031:13" pos:end="1031:15"><name pos:start="1031:13" pos:end="1031:13">i</name><operator pos:start="1031:14" pos:end="1031:14">=</operator><literal type="number" pos:start="1031:15" pos:end="1031:15">0</literal></expr>;</init><condition pos:start="1031:17" pos:end="1031:30"><expr pos:start="1031:17" pos:end="1031:29"><name pos:start="1031:17" pos:end="1031:17">i</name><operator pos:start="1031:18" pos:end="1031:18">&lt;</operator><name pos:start="1031:19" pos:end="1031:29">nb_ostreams</name></expr>;</condition><incr pos:start="1031:31" pos:end="1031:33"><expr pos:start="1031:31" pos:end="1031:33"><name pos:start="1031:31" pos:end="1031:31">i</name><operator pos:start="1031:32" pos:end="1031:33">++</operator></expr></incr>)</control> <block pos:start="1031:36" pos:end="1063:9">{<block_content pos:start="1033:13" pos:end="1061:13">

            <expr_stmt pos:start="1033:13" pos:end="1033:31"><expr pos:start="1033:13" pos:end="1033:30"><name pos:start="1033:13" pos:end="1033:15">ost</name> <operator pos:start="1033:17" pos:end="1033:17">=</operator> <name pos:start="1033:19" pos:end="1033:30"><name pos:start="1033:19" pos:end="1033:27">ost_table</name><index pos:start="1033:28" pos:end="1033:30">[<expr pos:start="1033:29" pos:end="1033:29"><name pos:start="1033:29" pos:end="1033:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="1035:13" pos:end="1061:13"><if pos:start="1035:13" pos:end="1061:13">if <condition pos:start="1035:16" pos:end="1035:20">(<expr pos:start="1035:17" pos:end="1035:19"><name pos:start="1035:17" pos:end="1035:19">ost</name></expr>)</condition> <block pos:start="1035:22" pos:end="1061:13">{<block_content pos:start="1037:17" pos:end="1059:29">

                <if_stmt pos:start="1037:17" pos:end="1043:17"><if pos:start="1037:17" pos:end="1043:17">if <condition pos:start="1037:20" pos:end="1037:33">(<expr pos:start="1037:21" pos:end="1037:32"><name pos:start="1037:21" pos:end="1037:32"><name pos:start="1037:21" pos:end="1037:23">ost</name><operator pos:start="1037:24" pos:end="1037:25">-&gt;</operator><name pos:start="1037:26" pos:end="1037:32">logfile</name></name></expr>)</condition> <block pos:start="1037:35" pos:end="1043:17">{<block_content pos:start="1039:21" pos:end="1041:40">

                    <expr_stmt pos:start="1039:21" pos:end="1039:41"><expr pos:start="1039:21" pos:end="1039:40"><call pos:start="1039:21" pos:end="1039:40"><name pos:start="1039:21" pos:end="1039:26">fclose</name><argument_list pos:start="1039:27" pos:end="1039:40">(<argument pos:start="1039:28" pos:end="1039:39"><expr pos:start="1039:28" pos:end="1039:39"><name pos:start="1039:28" pos:end="1039:39"><name pos:start="1039:28" pos:end="1039:30">ost</name><operator pos:start="1039:31" pos:end="1039:32">-&gt;</operator><name pos:start="1039:33" pos:end="1039:39">logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1041:21" pos:end="1041:40"><expr pos:start="1041:21" pos:end="1041:39"><name pos:start="1041:21" pos:end="1041:32"><name pos:start="1041:21" pos:end="1041:23">ost</name><operator pos:start="1041:24" pos:end="1041:25">-&gt;</operator><name pos:start="1041:26" pos:end="1041:32">logfile</name></name> <operator pos:start="1041:34" pos:end="1041:34">=</operator> <name pos:start="1041:36" pos:end="1041:39">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1045:17" pos:end="1045:38"><expr pos:start="1045:17" pos:end="1045:37"><call pos:start="1045:17" pos:end="1045:37"><name pos:start="1045:17" pos:end="1045:25">fifo_free</name><argument_list pos:start="1045:26" pos:end="1045:37">(<argument pos:start="1045:27" pos:end="1045:36"><expr pos:start="1045:27" pos:end="1045:36"><operator pos:start="1045:27" pos:end="1045:27">&amp;</operator><name pos:start="1045:28" pos:end="1045:36"><name pos:start="1045:28" pos:end="1045:30">ost</name><operator pos:start="1045:31" pos:end="1045:32">-&gt;</operator><name pos:start="1045:33" pos:end="1045:36">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="1045:40" pos:end="1047:72">/* works even if fifo is not

                                          initialized but set to zero */</comment>

                <expr_stmt pos:start="1049:17" pos:end="1049:47"><expr pos:start="1049:17" pos:end="1049:46"><call pos:start="1049:17" pos:end="1049:46"><name pos:start="1049:17" pos:end="1049:23">av_free</name><argument_list pos:start="1049:24" pos:end="1049:46">(<argument pos:start="1049:25" pos:end="1049:45"><expr pos:start="1049:25" pos:end="1049:45"><name pos:start="1049:25" pos:end="1049:45"><name pos:start="1049:25" pos:end="1049:27">ost</name><operator pos:start="1049:28" pos:end="1049:29">-&gt;</operator><name pos:start="1049:30" pos:end="1049:37">pict_tmp</name><operator pos:start="1049:38" pos:end="1049:38">.</operator><name pos:start="1049:39" pos:end="1049:42">data</name><index pos:start="1049:43" pos:end="1049:45">[<expr pos:start="1049:44" pos:end="1049:44"><literal type="number" pos:start="1049:44" pos:end="1049:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1051:17" pos:end="1053:62"><if pos:start="1051:17" pos:end="1053:62">if <condition pos:start="1051:20" pos:end="1051:40">(<expr pos:start="1051:21" pos:end="1051:39"><name pos:start="1051:21" pos:end="1051:39"><name pos:start="1051:21" pos:end="1051:23">ost</name><operator pos:start="1051:24" pos:end="1051:25">-&gt;</operator><name pos:start="1051:26" pos:end="1051:39">video_resample</name></name></expr>)</condition><block type="pseudo" pos:start="1053:21" pos:end="1053:62"><block_content pos:start="1053:21" pos:end="1053:62">

                    <expr_stmt pos:start="1053:21" pos:end="1053:62"><expr pos:start="1053:21" pos:end="1053:61"><call pos:start="1053:21" pos:end="1053:61"><name pos:start="1053:21" pos:end="1053:38">img_resample_close</name><argument_list pos:start="1053:39" pos:end="1053:61">(<argument pos:start="1053:40" pos:end="1053:60"><expr pos:start="1053:40" pos:end="1053:60"><name pos:start="1053:40" pos:end="1053:60"><name pos:start="1053:40" pos:end="1053:42">ost</name><operator pos:start="1053:43" pos:end="1053:44">-&gt;</operator><name pos:start="1053:45" pos:end="1053:60">img_resample_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="1055:17" pos:end="1057:56"><if pos:start="1055:17" pos:end="1057:56">if <condition pos:start="1055:20" pos:end="1055:40">(<expr pos:start="1055:21" pos:end="1055:39"><name pos:start="1055:21" pos:end="1055:39"><name pos:start="1055:21" pos:end="1055:23">ost</name><operator pos:start="1055:24" pos:end="1055:25">-&gt;</operator><name pos:start="1055:26" pos:end="1055:39">audio_resample</name></name></expr>)</condition><block type="pseudo" pos:start="1057:21" pos:end="1057:56"><block_content pos:start="1057:21" pos:end="1057:56">

                    <expr_stmt pos:start="1057:21" pos:end="1057:56"><expr pos:start="1057:21" pos:end="1057:55"><call pos:start="1057:21" pos:end="1057:55"><name pos:start="1057:21" pos:end="1057:40">audio_resample_close</name><argument_list pos:start="1057:41" pos:end="1057:55">(<argument pos:start="1057:42" pos:end="1057:54"><expr pos:start="1057:42" pos:end="1057:54"><name pos:start="1057:42" pos:end="1057:54"><name pos:start="1057:42" pos:end="1057:44">ost</name><operator pos:start="1057:45" pos:end="1057:46">-&gt;</operator><name pos:start="1057:47" pos:end="1057:54">resample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1059:17" pos:end="1059:29"><expr pos:start="1059:17" pos:end="1059:28"><call pos:start="1059:17" pos:end="1059:28"><name pos:start="1059:17" pos:end="1059:23">av_free</name><argument_list pos:start="1059:24" pos:end="1059:28">(<argument pos:start="1059:25" pos:end="1059:27"><expr pos:start="1059:25" pos:end="1059:27"><name pos:start="1059:25" pos:end="1059:27">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="1065:9" pos:end="1065:27"><expr pos:start="1065:9" pos:end="1065:26"><call pos:start="1065:9" pos:end="1065:26"><name pos:start="1065:9" pos:end="1065:15">av_free</name><argument_list pos:start="1065:16" pos:end="1065:26">(<argument pos:start="1065:17" pos:end="1065:25"><expr pos:start="1065:17" pos:end="1065:25"><name pos:start="1065:17" pos:end="1065:25">ost_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="1069:5" pos:end="1069:15">return <expr pos:start="1069:12" pos:end="1069:14"><name pos:start="1069:12" pos:end="1069:14">ret</name></expr>;</return>

 <label pos:start="1071:2" pos:end="1071:6"><name pos:start="1071:2" pos:end="1071:5">fail</name>:</label>

    <expr_stmt pos:start="1073:5" pos:end="1073:18"><expr pos:start="1073:5" pos:end="1073:17"><name pos:start="1073:5" pos:end="1073:7">ret</name> <operator pos:start="1073:9" pos:end="1073:9">=</operator> <operator pos:start="1073:11" pos:end="1073:11">-</operator><name pos:start="1073:12" pos:end="1073:17">ENOMEM</name></expr>;</expr_stmt>

    <goto pos:start="1075:5" pos:end="1075:15">goto <name pos:start="1075:10" pos:end="1075:14">fail1</name>;</goto>

</block_content>}</block></function>
</unit>
