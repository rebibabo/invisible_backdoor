<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15979.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:15">init</name><parameter_list pos:start="1:16" pos:end="1:37">(<parameter pos:start="1:17" pos:end="1:36"><decl pos:start="1:17" pos:end="1:36"><type pos:start="1:17" pos:end="1:33"><name pos:start="1:17" pos:end="1:31">AVFilterContext</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">EvalContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:21">eval</name> <init pos:start="5:23" pos:end="5:33">= <expr pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">ctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:33">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:15">args1</name> <init pos:start="7:17" pos:end="7:40">= <expr pos:start="7:19" pos:end="7:40"><call pos:start="7:19" pos:end="7:40"><name pos:start="7:19" pos:end="7:27">av_strdup</name><argument_list pos:start="7:28" pos:end="7:40">(<argument pos:start="7:29" pos:end="7:39"><expr pos:start="7:29" pos:end="7:39"><name pos:start="7:29" pos:end="7:39"><name pos:start="7:29" pos:end="7:32">eval</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:39">exprs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:14">expr</name></decl>, <decl pos:start="9:17" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:14">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:15">(<expr pos:start="15:9" pos:end="15:14"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:14">args1</name></expr>)</condition> <block pos:start="15:17" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:17">

        <expr_stmt pos:start="17:9" pos:end="17:74"><expr pos:start="17:9" pos:end="17:73"><call pos:start="17:9" pos:end="17:73"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:73">(<argument pos:start="17:16" pos:end="17:18"><expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ctx</name></expr></argument>, <argument pos:start="17:21" pos:end="17:32"><expr pos:start="17:21" pos:end="17:32"><name pos:start="17:21" pos:end="17:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:35" pos:end="17:72"><expr pos:start="17:35" pos:end="17:72"><literal type="string" pos:start="17:35" pos:end="17:72">"Channels expressions list is empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:62"><expr pos:start="19:9" pos:end="19:61"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <ternary pos:start="19:15" pos:end="19:61"><condition pos:start="19:15" pos:end="19:27"><expr pos:start="19:15" pos:end="19:25"><name pos:start="19:15" pos:end="19:25"><name pos:start="19:15" pos:end="19:18">eval</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:25">exprs</name></name></expr> ?</condition><then pos:start="19:29" pos:end="19:43"> <expr pos:start="19:29" pos:end="19:43"><call pos:start="19:29" pos:end="19:43"><name pos:start="19:29" pos:end="19:35">AVERROR</name><argument_list pos:start="19:36" pos:end="19:43">(<argument pos:start="19:37" pos:end="19:42"><expr pos:start="19:37" pos:end="19:42"><name pos:start="19:37" pos:end="19:42">ENOMEM</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="19:45" pos:end="19:61">: <expr pos:start="19:47" pos:end="19:61"><call pos:start="19:47" pos:end="19:61"><name pos:start="19:47" pos:end="19:53">AVERROR</name><argument_list pos:start="19:54" pos:end="19:61">(<argument pos:start="19:55" pos:end="19:60"><expr pos:start="19:55" pos:end="19:60"><name pos:start="19:55" pos:end="19:60">EINVAL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <goto pos:start="21:9" pos:end="21:17">goto <name pos:start="21:14" pos:end="21:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:27">/* parse expressions */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:7">buf</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:15">args1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:10"><expr pos:start="31:5" pos:end="31:9"><name pos:start="31:5" pos:end="31:5">i</name> <operator pos:start="31:7" pos:end="31:7">=</operator> <literal type="number" pos:start="31:9" pos:end="31:9">0</literal></expr>;</expr_stmt>

    <while pos:start="33:5" pos:end="45:5">while <condition pos:start="33:11" pos:end="33:80">(<expr pos:start="33:12" pos:end="33:79"><name pos:start="33:12" pos:end="33:12">i</name> <operator pos:start="33:14" pos:end="33:14">&lt;</operator> <call pos:start="33:16" pos:end="33:41"><name pos:start="33:16" pos:end="33:29">FF_ARRAY_ELEMS</name><argument_list pos:start="33:30" pos:end="33:41">(<argument pos:start="33:31" pos:end="33:40"><expr pos:start="33:31" pos:end="33:40"><name pos:start="33:31" pos:end="33:40"><name pos:start="33:31" pos:end="33:34">eval</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:40">expr</name></name></expr></argument>)</argument_list></call> <operator pos:start="33:43" pos:end="33:44">&amp;&amp;</operator> <operator pos:start="33:46" pos:end="33:46">(</operator><name pos:start="33:47" pos:end="33:50">expr</name> <operator pos:start="33:52" pos:end="33:52">=</operator> <call pos:start="33:54" pos:end="33:78"><name pos:start="33:54" pos:end="33:62">av_strtok</name><argument_list pos:start="33:63" pos:end="33:78">(<argument pos:start="33:64" pos:end="33:66"><expr pos:start="33:64" pos:end="33:66"><name pos:start="33:64" pos:end="33:66">buf</name></expr></argument>, <argument pos:start="33:69" pos:end="33:71"><expr pos:start="33:69" pos:end="33:71"><literal type="string" pos:start="33:69" pos:end="33:71">"|"</literal></expr></argument>, <argument pos:start="33:74" pos:end="33:77"><expr pos:start="33:74" pos:end="33:77"><operator pos:start="33:74" pos:end="33:74">&amp;</operator><name pos:start="33:75" pos:end="33:77">buf</name></expr></argument>)</argument_list></call><operator pos:start="33:79" pos:end="33:79">)</operator></expr>)</condition> <block pos:start="33:82" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:12">

        <expr_stmt pos:start="35:9" pos:end="37:60"><expr pos:start="35:9" pos:end="37:59"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="37:59"><name pos:start="35:15" pos:end="35:27">av_expr_parse</name><argument_list pos:start="35:28" pos:end="37:59">(<argument pos:start="35:29" pos:end="35:42"><expr pos:start="35:29" pos:end="35:42"><operator pos:start="35:29" pos:end="35:29">&amp;</operator><name pos:start="35:30" pos:end="35:42"><name pos:start="35:30" pos:end="35:33">eval</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:39">expr</name><index pos:start="35:40" pos:end="35:42">[<expr pos:start="35:41" pos:end="35:41"><name pos:start="35:41" pos:end="35:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="35:45" pos:end="35:48"><expr pos:start="35:45" pos:end="35:48"><name pos:start="35:45" pos:end="35:48">expr</name></expr></argument>, <argument pos:start="35:51" pos:end="35:59"><expr pos:start="35:51" pos:end="35:59"><name pos:start="35:51" pos:end="35:59">var_names</name></expr></argument>,

                            <argument pos:start="37:29" pos:end="37:32"><expr pos:start="37:29" pos:end="37:32"><name pos:start="37:29" pos:end="37:32">NULL</name></expr></argument>, <argument pos:start="37:35" pos:end="37:38"><expr pos:start="37:35" pos:end="37:38"><name pos:start="37:35" pos:end="37:38">NULL</name></expr></argument>, <argument pos:start="37:41" pos:end="37:44"><expr pos:start="37:41" pos:end="37:44"><name pos:start="37:41" pos:end="37:44">NULL</name></expr></argument>, <argument pos:start="37:47" pos:end="37:50"><expr pos:start="37:47" pos:end="37:50"><name pos:start="37:47" pos:end="37:50">NULL</name></expr></argument>, <argument pos:start="37:53" pos:end="37:53"><expr pos:start="37:53" pos:end="37:53"><literal type="number" pos:start="37:53" pos:end="37:53">0</literal></expr></argument>, <argument pos:start="37:56" pos:end="37:58"><expr pos:start="37:56" pos:end="37:58"><name pos:start="37:56" pos:end="37:58">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="41:21"><if pos:start="39:9" pos:end="41:21">if <condition pos:start="39:12" pos:end="39:20">(<expr pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">&lt;</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:21"><block_content pos:start="41:13" pos:end="41:21">

            <goto pos:start="41:13" pos:end="41:21">goto <name pos:start="41:18" pos:end="41:20">end</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:12"><expr pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:9">i</name><operator pos:start="43:10" pos:end="43:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="47:5" pos:end="47:26"><expr pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:8">eval</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:21">nb_channels</name></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:25">i</name></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="99:5"><if pos:start="51:5" pos:end="81:5">if <condition pos:start="51:8" pos:end="51:27">(<expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:12">eval</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:26">chlayout_str</name></name></expr>)</condition> <block pos:start="51:29" pos:end="81:5">{<block_content pos:start="53:9" pos:end="79:9">

        <decl_stmt pos:start="53:9" pos:end="53:14"><decl pos:start="53:9" pos:end="53:13"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:13">n</name></decl>;</decl_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:80"><expr pos:start="55:9" pos:end="55:79"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:79"><name pos:start="55:15" pos:end="55:37">ff_parse_channel_layout</name><argument_list pos:start="55:38" pos:end="55:79">(<argument pos:start="55:39" pos:end="55:53"><expr pos:start="55:39" pos:end="55:53"><operator pos:start="55:39" pos:end="55:39">&amp;</operator><name pos:start="55:40" pos:end="55:53"><name pos:start="55:40" pos:end="55:43">eval</name><operator pos:start="55:44" pos:end="55:45">-&gt;</operator><name pos:start="55:46" pos:end="55:53">chlayout</name></name></expr></argument>, <argument pos:start="55:56" pos:end="55:73"><expr pos:start="55:56" pos:end="55:73"><name pos:start="55:56" pos:end="55:73"><name pos:start="55:56" pos:end="55:59">eval</name><operator pos:start="55:60" pos:end="55:61">-&gt;</operator><name pos:start="55:62" pos:end="55:73">chlayout_str</name></name></expr></argument>, <argument pos:start="55:76" pos:end="55:78"><expr pos:start="55:76" pos:end="55:78"><name pos:start="55:76" pos:end="55:78">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="59:21"><if pos:start="57:9" pos:end="59:21">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:21"><block_content pos:start="59:13" pos:end="59:21">

            <goto pos:start="59:13" pos:end="59:21">goto <name pos:start="59:18" pos:end="59:20">end</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:62"><expr pos:start="63:9" pos:end="63:61"><name pos:start="63:9" pos:end="63:9">n</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:61"><name pos:start="63:13" pos:end="63:45">av_get_channel_layout_nb_channels</name><argument_list pos:start="63:46" pos:end="63:61">(<argument pos:start="63:47" pos:end="63:60"><expr pos:start="63:47" pos:end="63:60"><name pos:start="63:47" pos:end="63:60"><name pos:start="63:47" pos:end="63:50">eval</name><operator pos:start="63:51" pos:end="63:52">-&gt;</operator><name pos:start="63:53" pos:end="63:60">chlayout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="79:9"><if pos:start="65:9" pos:end="79:9">if <condition pos:start="65:12" pos:end="65:35">(<expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:13">n</name> <operator pos:start="65:15" pos:end="65:16">!=</operator> <name pos:start="65:18" pos:end="65:34"><name pos:start="65:18" pos:end="65:21">eval</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:34">nb_channels</name></name></expr>)</condition> <block pos:start="65:37" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:21">

            <expr_stmt pos:start="67:13" pos:end="73:61"><expr pos:start="67:13" pos:end="73:60"><call pos:start="67:13" pos:end="73:60"><name pos:start="67:13" pos:end="67:18">av_log</name><argument_list pos:start="67:19" pos:end="73:60">(<argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">ctx</name></expr></argument>, <argument pos:start="67:25" pos:end="67:36"><expr pos:start="67:25" pos:end="67:36"><name pos:start="67:25" pos:end="67:36">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="69:20" pos:end="71:91"><expr pos:start="69:20" pos:end="71:91"><literal type="string" pos:start="69:20" pos:end="69:76">"Mismatch between the specified number of channels '%d' "</literal>

                   <literal type="string" pos:start="71:20" pos:end="71:91">"and the number of channels '%d' in the specified channel layout '%s'\n"</literal></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:36"><expr pos:start="73:20" pos:end="73:36"><name pos:start="73:20" pos:end="73:36"><name pos:start="73:20" pos:end="73:23">eval</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:36">nb_channels</name></name></expr></argument>, <argument pos:start="73:39" pos:end="73:39"><expr pos:start="73:39" pos:end="73:39"><name pos:start="73:39" pos:end="73:39">n</name></expr></argument>, <argument pos:start="73:42" pos:end="73:59"><expr pos:start="73:42" pos:end="73:59"><name pos:start="73:42" pos:end="73:59"><name pos:start="73:42" pos:end="73:45">eval</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:59">chlayout_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:34"><expr pos:start="75:13" pos:end="75:33"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:33"><name pos:start="75:19" pos:end="75:25">AVERROR</name><argument_list pos:start="75:26" pos:end="75:33">(<argument pos:start="75:27" pos:end="75:32"><expr pos:start="75:27" pos:end="75:32"><name pos:start="75:27" pos:end="75:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:21">goto <name pos:start="77:18" pos:end="77:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="99:5">else <block pos:start="81:12" pos:end="99:5">{<block_content pos:start="85:9" pos:end="97:9">

        <comment type="block" pos:start="83:9" pos:end="83:63">/* guess channel layout from nb expressions/channels */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:74"><expr pos:start="85:9" pos:end="85:73"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:12">eval</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:22">chlayout</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <call pos:start="85:26" pos:end="85:73"><name pos:start="85:26" pos:end="85:54">av_get_default_channel_layout</name><argument_list pos:start="85:55" pos:end="85:73">(<argument pos:start="85:56" pos:end="85:72"><expr pos:start="85:56" pos:end="85:72"><name pos:start="85:56" pos:end="85:72"><name pos:start="85:56" pos:end="85:59">eval</name><operator pos:start="85:60" pos:end="85:61">-&gt;</operator><name pos:start="85:62" pos:end="85:72">nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="97:9"><if pos:start="87:9" pos:end="97:9">if <condition pos:start="87:12" pos:end="87:28">(<expr pos:start="87:13" pos:end="87:27"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:27"><name pos:start="87:14" pos:end="87:17">eval</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:27">chlayout</name></name></expr>)</condition> <block pos:start="87:30" pos:end="97:9">{<block_content pos:start="89:13" pos:end="95:21">

            <expr_stmt pos:start="89:13" pos:end="91:38"><expr pos:start="89:13" pos:end="91:37"><call pos:start="89:13" pos:end="91:37"><name pos:start="89:13" pos:end="89:18">av_log</name><argument_list pos:start="89:19" pos:end="91:37">(<argument pos:start="89:20" pos:end="89:22"><expr pos:start="89:20" pos:end="89:22"><name pos:start="89:20" pos:end="89:22">ctx</name></expr></argument>, <argument pos:start="89:25" pos:end="89:36"><expr pos:start="89:25" pos:end="89:36"><name pos:start="89:25" pos:end="89:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:39" pos:end="89:82"><expr pos:start="89:39" pos:end="89:82"><literal type="string" pos:start="89:39" pos:end="89:82">"Invalid number of channels '%d' provided\n"</literal></expr></argument>,

                   <argument pos:start="91:20" pos:end="91:36"><expr pos:start="91:20" pos:end="91:36"><name pos:start="91:20" pos:end="91:36"><name pos:start="91:20" pos:end="91:23">eval</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:36">nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:34"><expr pos:start="93:13" pos:end="93:33"><name pos:start="93:13" pos:end="93:15">ret</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:33"><name pos:start="93:19" pos:end="93:25">AVERROR</name><argument_list pos:start="93:26" pos:end="93:33">(<argument pos:start="93:27" pos:end="93:32"><expr pos:start="93:27" pos:end="93:32"><name pos:start="93:27" pos:end="93:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="95:13" pos:end="95:21">goto <name pos:start="95:18" pos:end="95:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="103:5" pos:end="105:17"><if pos:start="103:5" pos:end="105:17">if <condition pos:start="103:8" pos:end="103:85">(<expr pos:start="103:9" pos:end="103:84"><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:12">ret</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <call pos:start="103:16" pos:end="103:83"><name pos:start="103:16" pos:end="103:35">ff_parse_sample_rate</name><argument_list pos:start="103:36" pos:end="103:83">(<argument pos:start="103:37" pos:end="103:54"><expr pos:start="103:37" pos:end="103:54"><operator pos:start="103:37" pos:end="103:37">&amp;</operator><name pos:start="103:38" pos:end="103:54"><name pos:start="103:38" pos:end="103:41">eval</name><operator pos:start="103:42" pos:end="103:43">-&gt;</operator><name pos:start="103:44" pos:end="103:54">sample_rate</name></name></expr></argument>, <argument pos:start="103:57" pos:end="103:77"><expr pos:start="103:57" pos:end="103:77"><name pos:start="103:57" pos:end="103:77"><name pos:start="103:57" pos:end="103:60">eval</name><operator pos:start="103:61" pos:end="103:62">-&gt;</operator><name pos:start="103:63" pos:end="103:77">sample_rate_str</name></name></expr></argument>, <argument pos:start="103:80" pos:end="103:82"><expr pos:start="103:80" pos:end="103:82"><name pos:start="103:80" pos:end="103:82">ctx</name></expr></argument>)</argument_list></call><operator pos:start="103:84" pos:end="103:84">)</operator></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:17"><block_content pos:start="105:9" pos:end="105:17">

        <goto pos:start="105:9" pos:end="105:17">goto <name pos:start="105:14" pos:end="105:16">end</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:16"><expr pos:start="107:5" pos:end="107:15"><name pos:start="107:5" pos:end="107:11"><name pos:start="107:5" pos:end="107:8">eval</name><operator pos:start="107:9" pos:end="107:10">-&gt;</operator><name pos:start="107:11" pos:end="107:11">n</name></name> <operator pos:start="107:13" pos:end="107:13">=</operator> <literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>;</expr_stmt>



<label pos:start="111:1" pos:end="111:4"><name pos:start="111:1" pos:end="111:3">end</name>:</label>

    <expr_stmt pos:start="113:5" pos:end="113:19"><expr pos:start="113:5" pos:end="113:18"><call pos:start="113:5" pos:end="113:18"><name pos:start="113:5" pos:end="113:11">av_free</name><argument_list pos:start="113:12" pos:end="113:18">(<argument pos:start="113:13" pos:end="113:17"><expr pos:start="113:13" pos:end="113:17"><name pos:start="113:13" pos:end="113:17">args1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:15">return <expr pos:start="115:12" pos:end="115:14"><name pos:start="115:12" pos:end="115:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
