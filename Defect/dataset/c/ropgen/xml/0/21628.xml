<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21628.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">vncws_send_handshake_response</name><parameter_list pos:start="1:42" pos:end="1:72">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:50">VncState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">vs</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:66">char</name><modifier pos:start="1:67" pos:end="1:67">*</modifier></type> <name pos:start="1:69" pos:end="1:71">key</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:23">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:58"><name pos:start="5:10" pos:end="5:21">combined_key</name><index pos:start="5:22" pos:end="5:58">[<expr pos:start="5:23" pos:end="5:57"><name pos:start="5:23" pos:end="5:39">WS_CLIENT_KEY_LEN</name> <operator pos:start="5:41" pos:end="5:41">+</operator> <name pos:start="5:43" pos:end="5:53">WS_GUID_LEN</name> <operator pos:start="5:55" pos:end="5:55">+</operator> <literal type="number" pos:start="5:57" pos:end="5:57">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:39"><name pos:start="7:19" pos:end="7:22">hash</name><index pos:start="7:23" pos:end="7:39">[<expr pos:start="7:24" pos:end="7:38"><name pos:start="7:24" pos:end="7:38">SHA1_DIGEST_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:20">hash_size</name> <init pos:start="9:22" pos:end="9:35">= <expr pos:start="9:24" pos:end="9:35"><sizeof pos:start="9:24" pos:end="9:35">sizeof<argument_list pos:start="9:30" pos:end="9:35">(<argument pos:start="9:31" pos:end="9:34"><expr pos:start="9:31" pos:end="9:34"><name pos:start="9:31" pos:end="9:34">hash</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:16">accept</name> <init pos:start="11:18" pos:end="11:23">= <expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">NULL</name></expr></init></decl>, <decl pos:start="11:26" pos:end="11:41"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:34">response</name> <init pos:start="11:36" pos:end="11:41">= <expr pos:start="11:38" pos:end="11:41"><name pos:start="11:38" pos:end="11:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">gnutls_datum_t</name></type> <name pos:start="13:20" pos:end="13:21">in</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:56"><expr pos:start="19:5" pos:end="19:55"><call pos:start="19:5" pos:end="19:55"><name pos:start="19:5" pos:end="19:13">g_strlcpy</name><argument_list pos:start="19:14" pos:end="19:55">(<argument pos:start="19:15" pos:end="19:26"><expr pos:start="19:15" pos:end="19:26"><name pos:start="19:15" pos:end="19:26">combined_key</name></expr></argument>, <argument pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:31">key</name></expr></argument>, <argument pos:start="19:34" pos:end="19:54"><expr pos:start="19:34" pos:end="19:54"><name pos:start="19:34" pos:end="19:50">WS_CLIENT_KEY_LEN</name> <operator pos:start="19:52" pos:end="19:52">+</operator> <literal type="number" pos:start="19:54" pos:end="19:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:74"><expr pos:start="21:5" pos:end="21:73"><call pos:start="21:5" pos:end="21:73"><name pos:start="21:5" pos:end="21:13">g_strlcat</name><argument_list pos:start="21:14" pos:end="21:73">(<argument pos:start="21:15" pos:end="21:26"><expr pos:start="21:15" pos:end="21:26"><name pos:start="21:15" pos:end="21:26">combined_key</name></expr></argument>, <argument pos:start="21:29" pos:end="21:35"><expr pos:start="21:29" pos:end="21:35"><name pos:start="21:29" pos:end="21:35">WS_GUID</name></expr></argument>, <argument pos:start="21:38" pos:end="21:72"><expr pos:start="21:38" pos:end="21:72"><name pos:start="21:38" pos:end="21:54">WS_CLIENT_KEY_LEN</name> <operator pos:start="21:56" pos:end="21:56">+</operator> <name pos:start="21:58" pos:end="21:68">WS_GUID_LEN</name> <operator pos:start="21:70" pos:end="21:70">+</operator> <literal type="number" pos:start="21:72" pos:end="21:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:28">/* hash and encode it */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:6">in</name><operator pos:start="27:7" pos:end="27:7">.</operator><name pos:start="27:8" pos:end="27:11">data</name></name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">(</operator><name pos:start="27:16" pos:end="27:19">void</name> <operator pos:start="27:21" pos:end="27:21">*</operator><operator pos:start="27:22" pos:end="27:22">)</operator><name pos:start="27:23" pos:end="27:34">combined_key</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:6">in</name><operator pos:start="29:7" pos:end="29:7">.</operator><name pos:start="29:8" pos:end="29:11">size</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:31">WS_CLIENT_KEY_LEN</name> <operator pos:start="29:33" pos:end="29:33">+</operator> <name pos:start="29:35" pos:end="29:45">WS_GUID_LEN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:69"><expr pos:start="31:5" pos:end="31:68"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:68"><name pos:start="31:11" pos:end="31:28">gnutls_fingerprint</name><argument_list pos:start="31:29" pos:end="31:68">(<argument pos:start="31:30" pos:end="31:44"><expr pos:start="31:30" pos:end="31:44"><name pos:start="31:30" pos:end="31:44">GNUTLS_DIG_SHA1</name></expr></argument>, <argument pos:start="31:47" pos:end="31:49"><expr pos:start="31:47" pos:end="31:49"><operator pos:start="31:47" pos:end="31:47">&amp;</operator><name pos:start="31:48" pos:end="31:49">in</name></expr></argument>, <argument pos:start="31:52" pos:end="31:55"><expr pos:start="31:52" pos:end="31:55"><name pos:start="31:52" pos:end="31:55">hash</name></expr></argument>, <argument pos:start="31:58" pos:end="31:67"><expr pos:start="31:58" pos:end="31:67"><operator pos:start="31:58" pos:end="31:58">&amp;</operator><name pos:start="31:59" pos:end="31:67">hash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:64">(<expr pos:start="33:9" pos:end="33:63"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:14">==</operator> <name pos:start="33:16" pos:end="33:31">GNUTLS_E_SUCCESS</name> <operator pos:start="33:33" pos:end="33:34">&amp;&amp;</operator> <name pos:start="33:36" pos:end="33:44">hash_size</name> <operator pos:start="33:46" pos:end="33:47">&lt;=</operator> <name pos:start="33:49" pos:end="33:63">SHA1_DIGEST_LEN</name></expr>)</condition> <block pos:start="33:66" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:50">

        <expr_stmt pos:start="35:9" pos:end="35:50"><expr pos:start="35:9" pos:end="35:49"><name pos:start="35:9" pos:end="35:14">accept</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:49"><name pos:start="35:18" pos:end="35:32">g_base64_encode</name><argument_list pos:start="35:33" pos:end="35:49">(<argument pos:start="35:34" pos:end="35:37"><expr pos:start="35:34" pos:end="35:37"><name pos:start="35:34" pos:end="35:37">hash</name></expr></argument>, <argument pos:start="35:40" pos:end="35:48"><expr pos:start="35:40" pos:end="35:48"><name pos:start="35:40" pos:end="35:48">hash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:14">accept</name> <operator pos:start="39:16" pos:end="39:17">==</operator> <name pos:start="39:19" pos:end="39:22">NULL</name></expr>)</condition> <block pos:start="39:25" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:15">

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><call pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:17">VNC_DEBUG</name><argument_list pos:start="41:18" pos:end="41:60">(<argument pos:start="41:19" pos:end="41:59"><expr pos:start="41:19" pos:end="41:59"><literal type="string" pos:start="41:19" pos:end="41:59">"Hashing Websocket combined key failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:29"><expr pos:start="43:9" pos:end="43:28"><call pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:24">vnc_client_error</name><argument_list pos:start="43:25" pos:end="43:28">(<argument pos:start="43:26" pos:end="43:27"><expr pos:start="43:26" pos:end="43:27"><name pos:start="43:26" pos:end="43:27">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:53"><expr pos:start="51:5" pos:end="51:52"><name pos:start="51:5" pos:end="51:12">response</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:52"><name pos:start="51:16" pos:end="51:30">g_strdup_printf</name><argument_list pos:start="51:31" pos:end="51:52">(<argument pos:start="51:32" pos:end="51:43"><expr pos:start="51:32" pos:end="51:43"><name pos:start="51:32" pos:end="51:43">WS_HANDSHAKE</name></expr></argument>, <argument pos:start="51:46" pos:end="51:51"><expr pos:start="51:46" pos:end="51:51"><name pos:start="51:46" pos:end="51:51">accept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:74"><expr pos:start="53:5" pos:end="53:73"><call pos:start="53:5" pos:end="53:73"><name pos:start="53:5" pos:end="53:24">vnc_client_write_buf</name><argument_list pos:start="53:25" pos:end="53:73">(<argument pos:start="53:26" pos:end="53:27"><expr pos:start="53:26" pos:end="53:27"><name pos:start="53:26" pos:end="53:27">vs</name></expr></argument>, <argument pos:start="53:30" pos:end="53:54"><expr pos:start="53:30" pos:end="53:54"><operator pos:start="53:30" pos:end="53:30">(</operator><specifier pos:start="53:31" pos:end="53:35">const</specifier> <name pos:start="53:37" pos:end="53:43">uint8_t</name> <operator pos:start="53:45" pos:end="53:45">*</operator><operator pos:start="53:46" pos:end="53:46">)</operator><name pos:start="53:47" pos:end="53:54">response</name></expr></argument>, <argument pos:start="53:57" pos:end="53:72"><expr pos:start="53:57" pos:end="53:72"><call pos:start="53:57" pos:end="53:72"><name pos:start="53:57" pos:end="53:62">strlen</name><argument_list pos:start="53:63" pos:end="53:72">(<argument pos:start="53:64" pos:end="53:71"><expr pos:start="53:64" pos:end="53:71"><name pos:start="53:64" pos:end="53:71">response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:19"><expr pos:start="57:5" pos:end="57:18"><call pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:10">g_free</name><argument_list pos:start="57:11" pos:end="57:18">(<argument pos:start="57:12" pos:end="57:17"><expr pos:start="57:12" pos:end="57:17"><name pos:start="57:12" pos:end="57:17">accept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><call pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:10">g_free</name><argument_list pos:start="59:11" pos:end="59:20">(<argument pos:start="59:12" pos:end="59:19"><expr pos:start="59:12" pos:end="59:19"><name pos:start="59:12" pos:end="59:19">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:22"><expr pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:6">vs</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:17">encode_ws</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:23"><expr pos:start="65:5" pos:end="65:22"><call pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:18">vnc_init_state</name><argument_list pos:start="65:19" pos:end="65:22">(<argument pos:start="65:20" pos:end="65:21"><expr pos:start="65:20" pos:end="65:21"><name pos:start="65:20" pos:end="65:21">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
