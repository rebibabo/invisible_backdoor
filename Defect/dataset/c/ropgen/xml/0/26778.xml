<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26778.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:44">qio_dns_resolver_lookup_sync_inet</name><parameter_list pos:start="1:45" pos:end="9:58">(<parameter pos:start="1:46" pos:end="1:69"><decl pos:start="1:46" pos:end="1:69"><type pos:start="1:46" pos:end="1:69"><name pos:start="1:46" pos:end="1:59">QIODNSResolver</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:69">resolver</name></decl></parameter>,

                                             <parameter pos:start="3:46" pos:end="3:64"><decl pos:start="3:46" pos:end="3:64"><type pos:start="3:46" pos:end="3:64"><name pos:start="3:46" pos:end="3:58">SocketAddress</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:64">addr</name></decl></parameter>,

                                             <parameter pos:start="5:46" pos:end="5:59"><decl pos:start="5:46" pos:end="5:59"><type pos:start="5:46" pos:end="5:59"><name pos:start="5:46" pos:end="5:51">size_t</name> <modifier pos:start="5:53" pos:end="5:53">*</modifier></type><name pos:start="5:54" pos:end="5:59">naddrs</name></decl></parameter>,

                                             <parameter pos:start="7:46" pos:end="7:67"><decl pos:start="7:46" pos:end="7:67"><type pos:start="7:46" pos:end="7:67"><name pos:start="7:46" pos:end="7:58">SocketAddress</name> <modifier pos:start="7:60" pos:end="7:60">*</modifier><modifier pos:start="7:61" pos:end="7:61">*</modifier><modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:67">addrs</name></decl></parameter>,

                                             <parameter pos:start="9:46" pos:end="9:57"><decl pos:start="9:46" pos:end="9:57"><type pos:start="9:46" pos:end="9:57"><name pos:start="9:46" pos:end="9:50">Error</name> <modifier pos:start="9:52" pos:end="9:52">*</modifier><modifier pos:start="9:53" pos:end="9:53">*</modifier></type><name pos:start="9:54" pos:end="9:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="163:1">{<block_content pos:start="13:5" pos:end="161:13">

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:19">addrinfo</name></name></type> <name pos:start="13:21" pos:end="13:22">ai</name></decl>, <decl pos:start="13:25" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:19"><modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:28">res</name></decl>, <decl pos:start="13:31" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:19"><modifier pos:start="13:31" pos:end="13:31">*</modifier></type><name pos:start="13:32" pos:end="13:32">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:48"><type pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:21">InetSocketAddress</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:28">iaddr</name> <init pos:start="15:30" pos:end="15:48">= <expr pos:start="15:32" pos:end="15:48"><name pos:start="15:32" pos:end="15:48"><name pos:start="15:32" pos:end="15:35">addr</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:38">u</name><operator pos:start="15:39" pos:end="15:39">.</operator><name pos:start="15:40" pos:end="15:43">inet</name><operator pos:start="15:44" pos:end="15:44">.</operator><name pos:start="15:45" pos:end="15:48">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:13">port</name><index pos:start="17:14" pos:end="17:17">[<expr pos:start="17:15" pos:end="17:16"><literal type="number" pos:start="17:15" pos:end="17:16">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:36"><name pos:start="19:10" pos:end="19:14">uaddr</name><index pos:start="19:15" pos:end="19:36">[<expr pos:start="19:16" pos:end="19:35"><name pos:start="19:16" pos:end="19:31">INET6_ADDRSTRLEN</name> <operator pos:start="19:33" pos:end="19:33">+</operator> <literal type="number" pos:start="19:35" pos:end="19:35">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:18"><name pos:start="21:10" pos:end="21:14">uport</name><index pos:start="21:15" pos:end="21:18">[<expr pos:start="21:16" pos:end="21:17"><literal type="number" pos:start="21:16" pos:end="21:17">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:11"><decl pos:start="23:5" pos:end="23:10"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:9">Error</name> <modifier pos:start="25:11" pos:end="25:11">*</modifier></type><name pos:start="25:12" pos:end="25:14">err</name> <init pos:start="25:16" pos:end="25:21">= <expr pos:start="25:18" pos:end="25:21"><name pos:start="25:18" pos:end="25:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:13"><decl pos:start="27:5" pos:end="27:12"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:10">size_t</name></type> <name pos:start="27:12" pos:end="27:12">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:16"><expr pos:start="31:5" pos:end="31:15"><operator pos:start="31:5" pos:end="31:5">*</operator><name pos:start="31:6" pos:end="31:11">naddrs</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:18"><expr pos:start="33:5" pos:end="33:17"><operator pos:start="33:5" pos:end="33:5">*</operator><name pos:start="33:6" pos:end="33:10">addrs</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:17">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><call pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:30">(<argument pos:start="37:12" pos:end="37:14"><expr pos:start="37:12" pos:end="37:14"><operator pos:start="37:12" pos:end="37:12">&amp;</operator><name pos:start="37:13" pos:end="37:14">ai</name></expr></argument>, <argument pos:start="37:17" pos:end="37:17"><expr pos:start="37:17" pos:end="37:17"><literal type="number" pos:start="37:17" pos:end="37:17">0</literal></expr></argument>, <argument pos:start="37:20" pos:end="37:29"><expr pos:start="37:20" pos:end="37:29"><sizeof pos:start="37:20" pos:end="37:29">sizeof<argument_list pos:start="37:26" pos:end="37:29">(<argument pos:start="37:27" pos:end="37:28"><expr pos:start="37:27" pos:end="37:28"><name pos:start="37:27" pos:end="37:28">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:6">ai</name><operator pos:start="39:7" pos:end="39:7">.</operator><name pos:start="39:8" pos:end="39:15">ai_flags</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:28">AI_PASSIVE</name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:45">(<expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:13">iaddr</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:26">has_numeric</name></name> <operator pos:start="41:28" pos:end="41:29">&amp;&amp;</operator> <name pos:start="41:31" pos:end="41:44"><name pos:start="41:31" pos:end="41:35">iaddr</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:44">numeric</name></name></expr>)</condition> <block pos:start="41:47" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:55">

        <expr_stmt pos:start="43:9" pos:end="43:55"><expr pos:start="43:9" pos:end="43:54"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:10">ai</name><operator pos:start="43:11" pos:end="43:11">.</operator><name pos:start="43:12" pos:end="43:19">ai_flags</name></name> <operator pos:start="43:21" pos:end="43:22">|=</operator> <name pos:start="43:24" pos:end="43:37">AI_NUMERICHOST</name> <operator pos:start="43:39" pos:end="43:39">|</operator> <name pos:start="43:41" pos:end="43:54">AI_NUMERICSERV</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:60"><expr pos:start="47:5" pos:end="47:59"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:6">ai</name><operator pos:start="47:7" pos:end="47:7">.</operator><name pos:start="47:8" pos:end="47:16">ai_family</name></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="47:59"><name pos:start="47:20" pos:end="47:46">inet_ai_family_from_address</name><argument_list pos:start="47:47" pos:end="47:59">(<argument pos:start="47:48" pos:end="47:52"><expr pos:start="47:48" pos:end="47:52"><name pos:start="47:48" pos:end="47:52">iaddr</name></expr></argument>, <argument pos:start="47:55" pos:end="47:58"><expr pos:start="47:55" pos:end="47:58"><operator pos:start="47:55" pos:end="47:55">&amp;</operator><name pos:start="47:56" pos:end="47:58">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:33"><expr pos:start="49:5" pos:end="49:32"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:6">ai</name><operator pos:start="49:7" pos:end="49:7">.</operator><name pos:start="49:8" pos:end="49:18">ai_socktype</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:32">SOCK_STREAM</name></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">err</name></expr>)</condition> <block pos:start="53:14" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><call pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:23">error_propagate</name><argument_list pos:start="55:24" pos:end="55:34">(<argument pos:start="55:25" pos:end="55:28"><expr pos:start="55:25" pos:end="55:28"><name pos:start="55:25" pos:end="55:28">errp</name></expr></argument>, <argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:28">(<expr pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:13">iaddr</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:19">host</name></name> <operator pos:start="63:21" pos:end="63:22">==</operator> <name pos:start="63:24" pos:end="63:27">NULL</name></expr>)</condition> <block pos:start="63:30" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:47"><expr pos:start="65:9" pos:end="65:46"><call pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:18">error_setg</name><argument_list pos:start="65:19" pos:end="65:46">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">errp</name></expr></argument>, <argument pos:start="65:26" pos:end="65:45"><expr pos:start="65:26" pos:end="65:45"><literal type="string" pos:start="65:26" pos:end="65:45">"host not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:28">(<expr pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:13">iaddr</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:19">port</name></name> <operator pos:start="71:21" pos:end="71:22">!=</operator> <name pos:start="71:24" pos:end="71:27">NULL</name></expr>)</condition> <block pos:start="71:30" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:49">

        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:15">pstrcpy</name><argument_list pos:start="73:16" pos:end="73:48">(<argument pos:start="73:17" pos:end="73:20"><expr pos:start="73:17" pos:end="73:20"><name pos:start="73:17" pos:end="73:20">port</name></expr></argument>, <argument pos:start="73:23" pos:end="73:34"><expr pos:start="73:23" pos:end="73:34"><sizeof pos:start="73:23" pos:end="73:34">sizeof<argument_list pos:start="73:29" pos:end="73:34">(<argument pos:start="73:30" pos:end="73:33"><expr pos:start="73:30" pos:end="73:33"><name pos:start="73:30" pos:end="73:33">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="73:37" pos:end="73:47"><expr pos:start="73:37" pos:end="73:47"><name pos:start="73:37" pos:end="73:47"><name pos:start="73:37" pos:end="73:41">iaddr</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:47">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:23">

        <expr_stmt pos:start="77:9" pos:end="77:23"><expr pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:12">port</name><index pos:start="77:13" pos:end="77:15">[<expr pos:start="77:14" pos:end="77:14"><literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>]</index></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <literal type="char" pos:start="77:19" pos:end="77:22">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="85:60"><expr pos:start="83:5" pos:end="85:59"><name pos:start="83:5" pos:end="83:6">rc</name> <operator pos:start="83:8" pos:end="83:8">=</operator> <call pos:start="83:10" pos:end="85:59"><name pos:start="83:10" pos:end="83:20">getaddrinfo</name><argument_list pos:start="83:21" pos:end="85:59">(<argument pos:start="83:22" pos:end="83:61"><expr pos:start="83:22" pos:end="83:61"><ternary pos:start="83:22" pos:end="83:61"><condition pos:start="83:22" pos:end="83:42"><expr pos:start="83:22" pos:end="83:40"><call pos:start="83:22" pos:end="83:40"><name pos:start="83:22" pos:end="83:27">strlen</name><argument_list pos:start="83:28" pos:end="83:40">(<argument pos:start="83:29" pos:end="83:39"><expr pos:start="83:29" pos:end="83:39"><name pos:start="83:29" pos:end="83:39"><name pos:start="83:29" pos:end="83:33">iaddr</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:39">host</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="83:44" pos:end="83:54"> <expr pos:start="83:44" pos:end="83:54"><name pos:start="83:44" pos:end="83:54"><name pos:start="83:44" pos:end="83:48">iaddr</name><operator pos:start="83:49" pos:end="83:50">-&gt;</operator><name pos:start="83:51" pos:end="83:54">host</name></name></expr> </then><else pos:start="83:56" pos:end="83:61">: <expr pos:start="83:58" pos:end="83:61"><name pos:start="83:58" pos:end="83:61">NULL</name></expr></else></ternary></expr></argument>,

                     <argument pos:start="85:22" pos:end="85:47"><expr pos:start="85:22" pos:end="85:47"><ternary pos:start="85:22" pos:end="85:47"><condition pos:start="85:22" pos:end="85:35"><expr pos:start="85:22" pos:end="85:33"><call pos:start="85:22" pos:end="85:33"><name pos:start="85:22" pos:end="85:27">strlen</name><argument_list pos:start="85:28" pos:end="85:33">(<argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><name pos:start="85:29" pos:end="85:32">port</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="85:37" pos:end="85:40"> <expr pos:start="85:37" pos:end="85:40"><name pos:start="85:37" pos:end="85:40">port</name></expr> </then><else pos:start="85:42" pos:end="85:47">: <expr pos:start="85:44" pos:end="85:47"><name pos:start="85:44" pos:end="85:47">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="85:50" pos:end="85:52"><expr pos:start="85:50" pos:end="85:52"><operator pos:start="85:50" pos:end="85:50">&amp;</operator><name pos:start="85:51" pos:end="85:52">ai</name></expr></argument>, <argument pos:start="85:55" pos:end="85:58"><expr pos:start="85:55" pos:end="85:58"><operator pos:start="85:55" pos:end="85:55">&amp;</operator><name pos:start="85:56" pos:end="85:58">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:10">rc</name> <operator pos:start="87:12" pos:end="87:13">!=</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr>)</condition> <block pos:start="87:18" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:18">

        <expr_stmt pos:start="89:9" pos:end="91:56"><expr pos:start="89:9" pos:end="91:55"><call pos:start="89:9" pos:end="91:55"><name pos:start="89:9" pos:end="89:18">error_setg</name><argument_list pos:start="89:19" pos:end="91:55">(<argument pos:start="89:20" pos:end="89:23"><expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">errp</name></expr></argument>, <argument pos:start="89:26" pos:end="89:66"><expr pos:start="89:26" pos:end="89:66"><literal type="string" pos:start="89:26" pos:end="89:66">"address resolution failed for %s:%s: %s"</literal></expr></argument>,

                   <argument pos:start="91:20" pos:end="91:30"><expr pos:start="91:20" pos:end="91:30"><name pos:start="91:20" pos:end="91:30"><name pos:start="91:20" pos:end="91:24">iaddr</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:30">host</name></name></expr></argument>, <argument pos:start="91:33" pos:end="91:36"><expr pos:start="91:33" pos:end="91:36"><name pos:start="91:33" pos:end="91:36">port</name></expr></argument>, <argument pos:start="91:39" pos:end="91:54"><expr pos:start="91:39" pos:end="91:54"><call pos:start="91:39" pos:end="91:54"><name pos:start="91:39" pos:end="91:50">gai_strerror</name><argument_list pos:start="91:51" pos:end="91:54">(<argument pos:start="91:52" pos:end="91:53"><expr pos:start="91:52" pos:end="91:53"><name pos:start="91:52" pos:end="91:53">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:18">return <expr pos:start="93:16" pos:end="93:17"><operator pos:start="93:16" pos:end="93:16">-</operator><literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="99:5" pos:end="103:5">for <control pos:start="99:9" pos:end="99:44">(<init pos:start="99:10" pos:end="99:17"><expr pos:start="99:10" pos:end="99:16"><name pos:start="99:10" pos:end="99:10">e</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:16">res</name></expr>;</init> <condition pos:start="99:19" pos:end="99:28"><expr pos:start="99:19" pos:end="99:27"><name pos:start="99:19" pos:end="99:19">e</name> <operator pos:start="99:21" pos:end="99:22">!=</operator> <name pos:start="99:24" pos:end="99:27">NULL</name></expr>;</condition> <incr pos:start="99:30" pos:end="99:43"><expr pos:start="99:30" pos:end="99:43"><name pos:start="99:30" pos:end="99:30">e</name> <operator pos:start="99:32" pos:end="99:32">=</operator> <name pos:start="99:34" pos:end="99:43"><name pos:start="99:34" pos:end="99:34">e</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:43">ai_next</name></name></expr></incr>)</control> <block pos:start="99:46" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:20">

        <expr_stmt pos:start="101:9" pos:end="101:20"><expr pos:start="101:9" pos:end="101:19"><operator pos:start="101:9" pos:end="101:9">(</operator><operator pos:start="101:10" pos:end="101:10">*</operator><name pos:start="101:11" pos:end="101:16">naddrs</name><operator pos:start="101:17" pos:end="101:17">)</operator><operator pos:start="101:18" pos:end="101:19">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="107:5" pos:end="107:46"><expr pos:start="107:5" pos:end="107:45"><operator pos:start="107:5" pos:end="107:5">*</operator><name pos:start="107:6" pos:end="107:10">addrs</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <call pos:start="107:14" pos:end="107:45"><name pos:start="107:14" pos:end="107:19">g_new0</name><argument_list pos:start="107:20" pos:end="107:45">(<argument pos:start="107:21" pos:end="107:35"><expr pos:start="107:21" pos:end="107:35"><name pos:start="107:21" pos:end="107:33">SocketAddress</name> <operator pos:start="107:35" pos:end="107:35">*</operator></expr></argument>, <argument pos:start="107:38" pos:end="107:44"><expr pos:start="107:38" pos:end="107:44"><operator pos:start="107:38" pos:end="107:38">*</operator><name pos:start="107:39" pos:end="107:44">naddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:30">/* create socket + bind */</comment>

    <for pos:start="113:5" pos:end="157:5">for <control pos:start="113:9" pos:end="113:56">(<init pos:start="113:10" pos:end="113:24"><expr pos:start="113:10" pos:end="113:14"><name pos:start="113:10" pos:end="113:10">i</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr><operator pos:start="113:15" pos:end="113:15">,</operator> <expr pos:start="113:17" pos:end="113:23"><name pos:start="113:17" pos:end="113:17">e</name> <operator pos:start="113:19" pos:end="113:19">=</operator> <name pos:start="113:21" pos:end="113:23">res</name></expr>;</init> <condition pos:start="113:26" pos:end="113:35"><expr pos:start="113:26" pos:end="113:34"><name pos:start="113:26" pos:end="113:26">e</name> <operator pos:start="113:28" pos:end="113:29">!=</operator> <name pos:start="113:31" pos:end="113:34">NULL</name></expr>;</condition> <incr pos:start="113:37" pos:end="113:55"><expr pos:start="113:37" pos:end="113:39"><name pos:start="113:37" pos:end="113:37">i</name><operator pos:start="113:38" pos:end="113:39">++</operator></expr><operator pos:start="113:40" pos:end="113:40">,</operator> <expr pos:start="113:42" pos:end="113:55"><name pos:start="113:42" pos:end="113:42">e</name> <operator pos:start="113:44" pos:end="113:44">=</operator> <name pos:start="113:46" pos:end="113:55"><name pos:start="113:46" pos:end="113:46">e</name><operator pos:start="113:47" pos:end="113:48">-&gt;</operator><name pos:start="113:49" pos:end="113:55">ai_next</name></name></expr></incr>)</control> <block pos:start="113:58" pos:end="157:5">{<block_content pos:start="115:9" pos:end="155:30">

        <decl_stmt pos:start="115:9" pos:end="115:58"><decl pos:start="115:9" pos:end="115:57"><type pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:21">SocketAddress</name> <modifier pos:start="115:23" pos:end="115:23">*</modifier></type><name pos:start="115:24" pos:end="115:30">newaddr</name> <init pos:start="115:32" pos:end="115:57">= <expr pos:start="115:34" pos:end="115:57"><call pos:start="115:34" pos:end="115:57"><name pos:start="115:34" pos:end="115:39">g_new0</name><argument_list pos:start="115:40" pos:end="115:57">(<argument pos:start="115:41" pos:end="115:53"><expr pos:start="115:41" pos:end="115:53"><name pos:start="115:41" pos:end="115:53">SocketAddress</name></expr></argument>, <argument pos:start="115:56" pos:end="115:56"><expr pos:start="115:56" pos:end="115:56"><literal type="number" pos:start="115:56" pos:end="115:56">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:67"><decl pos:start="117:9" pos:end="117:66"><type pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:25">InetSocketAddress</name> <modifier pos:start="117:27" pos:end="117:27">*</modifier></type><name pos:start="117:28" pos:end="117:35">newiaddr</name> <init pos:start="117:37" pos:end="117:66">= <expr pos:start="117:39" pos:end="117:66"><call pos:start="117:39" pos:end="117:66"><name pos:start="117:39" pos:end="117:44">g_new0</name><argument_list pos:start="117:45" pos:end="117:66">(<argument pos:start="117:46" pos:end="117:62"><expr pos:start="117:46" pos:end="117:62"><name pos:start="117:46" pos:end="117:62">InetSocketAddress</name></expr></argument>, <argument pos:start="117:65" pos:end="117:65"><expr pos:start="117:65" pos:end="117:65"><literal type="number" pos:start="117:65" pos:end="117:65">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:40"><expr pos:start="119:9" pos:end="119:39"><name pos:start="119:9" pos:end="119:28"><name pos:start="119:9" pos:end="119:15">newaddr</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:18">u</name><operator pos:start="119:19" pos:end="119:19">.</operator><name pos:start="119:20" pos:end="119:23">inet</name><operator pos:start="119:24" pos:end="119:24">.</operator><name pos:start="119:25" pos:end="119:28">data</name></name> <operator pos:start="119:30" pos:end="119:30">=</operator> <name pos:start="119:32" pos:end="119:39">newiaddr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:49"><expr pos:start="121:9" pos:end="121:48"><name pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:15">newaddr</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:21">type</name></name> <operator pos:start="121:23" pos:end="121:23">=</operator> <name pos:start="121:25" pos:end="121:48">SOCKET_ADDRESS_KIND_INET</name></expr>;</expr_stmt>



        <expr_stmt pos:start="125:9" pos:end="129:53"><expr pos:start="125:9" pos:end="129:52"><call pos:start="125:9" pos:end="129:52"><name pos:start="125:9" pos:end="125:19">getnameinfo</name><argument_list pos:start="125:20" pos:end="129:52">(<argument pos:start="125:21" pos:end="125:49"><expr pos:start="125:21" pos:end="125:49"><operator pos:start="125:21" pos:end="125:21">(</operator>struct <name pos:start="125:29" pos:end="125:36">sockaddr</name> <operator pos:start="125:38" pos:end="125:38">*</operator><operator pos:start="125:39" pos:end="125:39">)</operator><name pos:start="125:40" pos:end="125:49"><name pos:start="125:40" pos:end="125:40">e</name><operator pos:start="125:41" pos:end="125:42">-&gt;</operator><name pos:start="125:43" pos:end="125:49">ai_addr</name></name></expr></argument>, <argument pos:start="125:52" pos:end="125:64"><expr pos:start="125:52" pos:end="125:64"><name pos:start="125:52" pos:end="125:64"><name pos:start="125:52" pos:end="125:52">e</name><operator pos:start="125:53" pos:end="125:54">-&gt;</operator><name pos:start="125:55" pos:end="125:64">ai_addrlen</name></name></expr></argument>,

                    <argument pos:start="127:21" pos:end="127:25"><expr pos:start="127:21" pos:end="127:25"><name pos:start="127:21" pos:end="127:25">uaddr</name></expr></argument>, <argument pos:start="127:28" pos:end="127:43"><expr pos:start="127:28" pos:end="127:43"><name pos:start="127:28" pos:end="127:43">INET6_ADDRSTRLEN</name></expr></argument>, <argument pos:start="127:46" pos:end="127:50"><expr pos:start="127:46" pos:end="127:50"><name pos:start="127:46" pos:end="127:50">uport</name></expr></argument>, <argument pos:start="127:53" pos:end="127:54"><expr pos:start="127:53" pos:end="127:54"><literal type="number" pos:start="127:53" pos:end="127:54">32</literal></expr></argument>,

                    <argument pos:start="129:21" pos:end="129:51"><expr pos:start="129:21" pos:end="129:51"><name pos:start="129:21" pos:end="129:34">NI_NUMERICHOST</name> <operator pos:start="129:36" pos:end="129:36">|</operator> <name pos:start="129:38" pos:end="129:51">NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="151:10"><expr pos:start="133:9" pos:end="151:9"><operator pos:start="133:9" pos:end="133:9">*</operator><name pos:start="133:10" pos:end="133:17">newiaddr</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <operator pos:start="133:21" pos:end="133:21">(</operator><name pos:start="133:22" pos:end="133:38">InetSocketAddress</name><operator pos:start="133:39" pos:end="133:39">)</operator><block pos:start="133:40" pos:end="151:9">{

            <expr pos:start="135:13" pos:end="135:35"><operator pos:start="135:13" pos:end="135:13">.</operator><name pos:start="135:14" pos:end="135:17">host</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <call pos:start="135:21" pos:end="135:35"><name pos:start="135:21" pos:end="135:28">g_strdup</name><argument_list pos:start="135:29" pos:end="135:35">(<argument pos:start="135:30" pos:end="135:34"><expr pos:start="135:30" pos:end="135:34"><name pos:start="135:30" pos:end="135:34">uaddr</name></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="137:13" pos:end="137:35"><operator pos:start="137:13" pos:end="137:13">.</operator><name pos:start="137:14" pos:end="137:17">port</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <call pos:start="137:21" pos:end="137:35"><name pos:start="137:21" pos:end="137:28">g_strdup</name><argument_list pos:start="137:29" pos:end="137:35">(<argument pos:start="137:30" pos:end="137:34"><expr pos:start="137:30" pos:end="137:34"><name pos:start="137:30" pos:end="137:34">uport</name></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="139:13" pos:end="139:31"><operator pos:start="139:13" pos:end="139:13">.</operator><name pos:start="139:14" pos:end="139:24">has_numeric</name> <operator pos:start="139:26" pos:end="139:26">=</operator> <name pos:start="139:28" pos:end="139:31">true</name></expr>,

            <expr pos:start="141:13" pos:end="141:27"><operator pos:start="141:13" pos:end="141:13">.</operator><name pos:start="141:14" pos:end="141:20">numeric</name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:27">true</name></expr>,

            <expr pos:start="143:13" pos:end="143:35"><operator pos:start="143:13" pos:end="143:13">.</operator><name pos:start="143:14" pos:end="143:19">has_to</name> <operator pos:start="143:21" pos:end="143:21">=</operator> <name pos:start="143:23" pos:end="143:35"><name pos:start="143:23" pos:end="143:27">iaddr</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:35">has_to</name></name></expr>,

            <expr pos:start="145:13" pos:end="145:27"><operator pos:start="145:13" pos:end="145:13">.</operator><name pos:start="145:14" pos:end="145:15">to</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <name pos:start="145:19" pos:end="145:27"><name pos:start="145:19" pos:end="145:23">iaddr</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:27">to</name></name></expr>,

            <expr pos:start="147:13" pos:end="147:29"><operator pos:start="147:13" pos:end="147:13">.</operator><name pos:start="147:14" pos:end="147:21">has_ipv4</name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:29">false</name></expr>,

            <expr pos:start="149:13" pos:end="149:29"><operator pos:start="149:13" pos:end="149:13">.</operator><name pos:start="149:14" pos:end="149:21">has_ipv6</name> <operator pos:start="149:23" pos:end="149:23">=</operator> <name pos:start="149:25" pos:end="149:29">false</name></expr>,

        }</block></expr>;</expr_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:30"><expr pos:start="155:9" pos:end="155:29"><operator pos:start="155:9" pos:end="155:9">(</operator><operator pos:start="155:10" pos:end="155:10">*</operator><name pos:start="155:11" pos:end="155:15">addrs</name><operator pos:start="155:16" pos:end="155:16">)</operator><index pos:start="155:17" pos:end="155:19">[<expr pos:start="155:18" pos:end="155:18"><name pos:start="155:18" pos:end="155:18">i</name></expr>]</index> <operator pos:start="155:21" pos:end="155:21">=</operator> <name pos:start="155:23" pos:end="155:29">newaddr</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="159:5" pos:end="159:22"><expr pos:start="159:5" pos:end="159:21"><call pos:start="159:5" pos:end="159:21"><name pos:start="159:5" pos:end="159:16">freeaddrinfo</name><argument_list pos:start="159:17" pos:end="159:21">(<argument pos:start="159:18" pos:end="159:20"><expr pos:start="159:18" pos:end="159:20"><name pos:start="159:18" pos:end="159:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
