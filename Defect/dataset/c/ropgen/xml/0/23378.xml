<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23378.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:48">x86_cpu_class_check_missing_features</name><parameter_list pos:start="1:49" pos:end="3:73">(<parameter pos:start="1:50" pos:end="1:65"><decl pos:start="1:50" pos:end="1:65"><type pos:start="1:50" pos:end="1:65"><name pos:start="1:50" pos:end="1:60">X86CPUClass</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">xcc</name></decl></parameter>,

                                                 <parameter pos:start="3:50" pos:end="3:72"><decl pos:start="3:50" pos:end="3:72"><type pos:start="3:50" pos:end="3:72"><name pos:start="3:50" pos:end="3:56">strList</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier><modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:72">missing_feats</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="91:1">{<block_content pos:start="7:5" pos:end="89:29">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">X86CPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:14">xc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">FeatureWord</name></type> <name pos:start="9:17" pos:end="9:17">w</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:11">strList</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier><modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">next</name> <init pos:start="13:20" pos:end="13:34">= <expr pos:start="13:22" pos:end="13:34"><name pos:start="13:22" pos:end="13:34">missing_feats</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:44">(<expr pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:11">xcc</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:25">kvm_required</name></name> <operator pos:start="17:27" pos:end="17:28">&amp;&amp;</operator> <operator pos:start="17:30" pos:end="17:30">!</operator><call pos:start="17:31" pos:end="17:43"><name pos:start="17:31" pos:end="17:41">kvm_enabled</name><argument_list pos:start="17:42" pos:end="17:43">()</argument_list></call></expr>)</condition> <block pos:start="17:46" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:15">

        <decl_stmt pos:start="19:9" pos:end="19:42"><decl pos:start="19:9" pos:end="19:41"><type pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:15">strList</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">new</name> <init pos:start="19:22" pos:end="19:41">= <expr pos:start="19:24" pos:end="19:41"><call pos:start="19:24" pos:end="19:41"><name pos:start="19:24" pos:end="19:29">g_new0</name><argument_list pos:start="19:30" pos:end="19:41">(<argument pos:start="19:31" pos:end="19:37"><expr pos:start="19:31" pos:end="19:37"><name pos:start="19:31" pos:end="19:37">strList</name></expr></argument>, <argument pos:start="19:40" pos:end="19:40"><expr pos:start="19:40" pos:end="19:40"><literal type="number" pos:start="19:40" pos:end="19:40">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:37"><expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:11">new</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:18">value</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <call pos:start="21:22" pos:end="21:36"><name pos:start="21:22" pos:end="21:29">g_strdup</name><argument_list pos:start="21:30" pos:end="21:36">(<argument pos:start="21:31" pos:end="21:35"><expr pos:start="21:31" pos:end="21:35"><literal type="string" pos:start="21:31" pos:end="21:35">"kvm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt pos:start="21:38" pos:end="21:38">;</empty_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:29"><expr pos:start="23:9" pos:end="23:28"><operator pos:start="23:9" pos:end="23:9">*</operator><name pos:start="23:10" pos:end="23:22">missing_feats</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <name pos:start="23:26" pos:end="23:28">new</name></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:71"><expr pos:start="31:5" pos:end="31:70"><name pos:start="31:5" pos:end="31:6">xc</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:70"><name pos:start="31:10" pos:end="31:16">X86_CPU</name><argument_list pos:start="31:17" pos:end="31:70">(<argument pos:start="31:18" pos:end="31:69"><expr pos:start="31:18" pos:end="31:69"><call pos:start="31:18" pos:end="31:69"><name pos:start="31:18" pos:end="31:27">object_new</name><argument_list pos:start="31:28" pos:end="31:69">(<argument pos:start="31:29" pos:end="31:68"><expr pos:start="31:29" pos:end="31:68"><call pos:start="31:29" pos:end="31:68"><name pos:start="31:29" pos:end="31:49">object_class_get_name</name><argument_list pos:start="31:50" pos:end="31:68">(<argument pos:start="31:51" pos:end="31:67"><expr pos:start="31:51" pos:end="31:67"><call pos:start="31:51" pos:end="31:67"><name pos:start="31:51" pos:end="31:62">OBJECT_CLASS</name><argument_list pos:start="31:63" pos:end="31:67">(<argument pos:start="31:64" pos:end="31:66"><expr pos:start="31:64" pos:end="31:66"><name pos:start="31:64" pos:end="31:66">xcc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><call pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:25">x86_cpu_load_features</name><argument_list pos:start="35:26" pos:end="35:35">(<argument pos:start="35:27" pos:end="35:28"><expr pos:start="35:27" pos:end="35:28"><name pos:start="35:27" pos:end="35:28">xc</name></expr></argument>, <argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><operator pos:start="35:31" pos:end="35:31">&amp;</operator><name pos:start="35:32" pos:end="35:34">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="55:5"><if pos:start="37:5" pos:end="55:5">if <condition pos:start="37:8" pos:end="37:12">(<expr pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">err</name></expr>)</condition> <block pos:start="37:14" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:26">

        <comment type="block" pos:start="39:9" pos:end="45:11">/* Errors at x86_cpu_load_features should never happen,

         * but in case it does, just report the model as not

         * runnable at all using the "type" property.

         */</comment>

        <decl_stmt pos:start="47:9" pos:end="47:42"><decl pos:start="47:9" pos:end="47:41"><type pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:15">strList</name> <modifier pos:start="47:17" pos:end="47:17">*</modifier></type><name pos:start="47:18" pos:end="47:20">new</name> <init pos:start="47:22" pos:end="47:41">= <expr pos:start="47:24" pos:end="47:41"><call pos:start="47:24" pos:end="47:41"><name pos:start="47:24" pos:end="47:29">g_new0</name><argument_list pos:start="47:30" pos:end="47:41">(<argument pos:start="47:31" pos:end="47:37"><expr pos:start="47:31" pos:end="47:37"><name pos:start="47:31" pos:end="47:37">strList</name></expr></argument>, <argument pos:start="47:40" pos:end="47:40"><expr pos:start="47:40" pos:end="47:40"><literal type="number" pos:start="47:40" pos:end="47:40">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:38"><expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:11">new</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:18">value</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="49:37"><name pos:start="49:22" pos:end="49:29">g_strdup</name><argument_list pos:start="49:30" pos:end="49:37">(<argument pos:start="49:31" pos:end="49:36"><expr pos:start="49:31" pos:end="49:36"><literal type="string" pos:start="49:31" pos:end="49:36">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:20"><expr pos:start="51:9" pos:end="51:19"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:13">next</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:19">new</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:26"><expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:12">next</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <operator pos:start="53:16" pos:end="53:16">&amp;</operator><name pos:start="53:17" pos:end="53:25"><name pos:start="53:17" pos:end="53:19">new</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:25">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:32"><expr pos:start="59:5" pos:end="59:31"><call pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:27">x86_cpu_filter_features</name><argument_list pos:start="59:28" pos:end="59:31">(<argument pos:start="59:29" pos:end="59:30"><expr pos:start="59:29" pos:end="59:30"><name pos:start="59:29" pos:end="59:30">xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="63:5" pos:end="85:5">for <control pos:start="63:9" pos:end="63:39">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">w</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:34"><expr pos:start="63:17" pos:end="63:33"><name pos:start="63:17" pos:end="63:17">w</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:33">FEATURE_WORDS</name></expr>;</condition> <incr pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:36">w</name><operator pos:start="63:37" pos:end="63:38">++</operator></expr></incr>)</control> <block pos:start="63:41" pos:end="85:5">{<block_content pos:start="65:9" pos:end="83:9">

        <decl_stmt pos:start="65:9" pos:end="65:53"><decl pos:start="65:9" pos:end="65:52"><type pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">uint32_t</name></type> <name pos:start="65:18" pos:end="65:25">filtered</name> <init pos:start="65:27" pos:end="65:52">= <expr pos:start="65:29" pos:end="65:52"><name pos:start="65:29" pos:end="65:52"><name pos:start="65:29" pos:end="65:30">xc</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:49">filtered_features</name><index pos:start="65:50" pos:end="65:52">[<expr pos:start="65:51" pos:end="65:51"><name pos:start="65:51" pos:end="65:51">w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:14"><decl pos:start="67:9" pos:end="67:13"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:13">i</name></decl>;</decl_stmt>

        <for pos:start="69:9" pos:end="83:9">for <control pos:start="69:13" pos:end="69:32">(<init pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:14">i</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</init> <condition pos:start="69:21" pos:end="69:27"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:21">i</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <literal type="number" pos:start="69:25" pos:end="69:26">32</literal></expr>;</condition> <incr pos:start="69:29" pos:end="69:31"><expr pos:start="69:29" pos:end="69:31"><name pos:start="69:29" pos:end="69:29">i</name><operator pos:start="69:30" pos:end="69:31">++</operator></expr></incr>)</control> <block pos:start="69:34" pos:end="83:9">{<block_content pos:start="71:13" pos:end="81:13">

            <if_stmt pos:start="71:13" pos:end="81:13"><if pos:start="71:13" pos:end="81:13">if <condition pos:start="71:16" pos:end="71:38">(<expr pos:start="71:17" pos:end="71:37"><name pos:start="71:17" pos:end="71:24">filtered</name> <operator pos:start="71:26" pos:end="71:26">&amp;</operator> <operator pos:start="71:28" pos:end="71:28">(</operator><literal type="number" pos:start="71:29" pos:end="71:31">1UL</literal> <operator pos:start="71:33" pos:end="71:34">&lt;&lt;</operator> <name pos:start="71:36" pos:end="71:36">i</name><operator pos:start="71:37" pos:end="71:37">)</operator></expr>)</condition> <block pos:start="71:40" pos:end="81:13">{<block_content pos:start="73:17" pos:end="79:34">

                <decl_stmt pos:start="73:17" pos:end="73:50"><decl pos:start="73:17" pos:end="73:49"><type pos:start="73:17" pos:end="73:25"><name pos:start="73:17" pos:end="73:23">strList</name> <modifier pos:start="73:25" pos:end="73:25">*</modifier></type><name pos:start="73:26" pos:end="73:28">new</name> <init pos:start="73:30" pos:end="73:49">= <expr pos:start="73:32" pos:end="73:49"><call pos:start="73:32" pos:end="73:49"><name pos:start="73:32" pos:end="73:37">g_new0</name><argument_list pos:start="73:38" pos:end="73:49">(<argument pos:start="73:39" pos:end="73:45"><expr pos:start="73:39" pos:end="73:45"><name pos:start="73:39" pos:end="73:45">strList</name></expr></argument>, <argument pos:start="73:48" pos:end="73:48"><expr pos:start="73:48" pos:end="73:48"><literal type="number" pos:start="73:48" pos:end="73:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:66"><expr pos:start="75:17" pos:end="75:65"><name pos:start="75:17" pos:end="75:26"><name pos:start="75:17" pos:end="75:19">new</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:26">value</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <call pos:start="75:30" pos:end="75:65"><name pos:start="75:30" pos:end="75:37">g_strdup</name><argument_list pos:start="75:38" pos:end="75:65">(<argument pos:start="75:39" pos:end="75:64"><expr pos:start="75:39" pos:end="75:64"><call pos:start="75:39" pos:end="75:64"><name pos:start="75:39" pos:end="75:58">x86_cpu_feature_name</name><argument_list pos:start="75:59" pos:end="75:64">(<argument pos:start="75:60" pos:end="75:60"><expr pos:start="75:60" pos:end="75:60"><name pos:start="75:60" pos:end="75:60">w</name></expr></argument>, <argument pos:start="75:63" pos:end="75:63"><expr pos:start="75:63" pos:end="75:63"><name pos:start="75:63" pos:end="75:63">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:28"><expr pos:start="77:17" pos:end="77:27"><operator pos:start="77:17" pos:end="77:17">*</operator><name pos:start="77:18" pos:end="77:21">next</name> <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:27">new</name></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:34"><expr pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:20">next</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <operator pos:start="79:24" pos:end="79:24">&amp;</operator><name pos:start="79:25" pos:end="79:33"><name pos:start="79:25" pos:end="79:27">new</name><operator pos:start="79:28" pos:end="79:29">-&gt;</operator><name pos:start="79:30" pos:end="79:33">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="89:5" pos:end="89:29"><expr pos:start="89:5" pos:end="89:28"><call pos:start="89:5" pos:end="89:28"><name pos:start="89:5" pos:end="89:16">object_unref</name><argument_list pos:start="89:17" pos:end="89:28">(<argument pos:start="89:18" pos:end="89:27"><expr pos:start="89:18" pos:end="89:27"><call pos:start="89:18" pos:end="89:27"><name pos:start="89:18" pos:end="89:23">OBJECT</name><argument_list pos:start="89:24" pos:end="89:27">(<argument pos:start="89:25" pos:end="89:26"><expr pos:start="89:25" pos:end="89:26"><name pos:start="89:25" pos:end="89:26">xc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
