<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10335.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">decode_motion_vector</name> <parameter_list pos:start="1:33" pos:end="1:88">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:45">bit_buffer_t</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:53">bitbuf</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:69"><decl pos:start="1:56" pos:end="1:69"><type pos:start="1:56" pos:end="1:69"><name pos:start="1:56" pos:end="1:65">svq1_pmv_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">mv</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:87"><decl pos:start="1:72" pos:end="1:87"><type pos:start="1:72" pos:end="1:87"><name pos:start="1:72" pos:end="1:81">svq1_pmv_t</name> <modifier pos:start="1:83" pos:end="1:83">*</modifier><modifier pos:start="1:84" pos:end="1:84">*</modifier></type><name pos:start="1:85" pos:end="1:87">pmv</name></decl></parameter>)</parameter_list> <block pos:start="1:90" pos:end="87:1">{<block_content pos:start="3:3" pos:end="85:11">

  <decl_stmt pos:start="3:3" pos:end="3:24"><decl pos:start="3:3" pos:end="3:23"><type pos:start="3:3" pos:end="3:10"><name pos:start="3:3" pos:end="3:10">uint32_t</name></type>    <name pos:start="3:15" pos:end="3:23">bit_cache</name></decl>;</decl_stmt>

  <decl_stmt pos:start="5:3" pos:end="5:18"><decl pos:start="5:3" pos:end="5:17"><type pos:start="5:3" pos:end="5:14"><name pos:start="5:3" pos:end="5:12">vlc_code_t</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">vlc</name></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:25"><decl pos:start="7:3" pos:end="7:18"><type pos:start="7:3" pos:end="7:5"><name pos:start="7:3" pos:end="7:5">int</name></type>	      <name pos:start="7:15" pos:end="7:18">diff</name></decl>, <decl pos:start="7:21" pos:end="7:24"><type ref="prev" pos:start="7:3" pos:end="7:5"/><name pos:start="7:21" pos:end="7:24">sign</name></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:16"><decl pos:start="9:3" pos:end="9:15"><type pos:start="9:3" pos:end="9:5"><name pos:start="9:3" pos:end="9:5">int</name></type>	      <name pos:start="9:15" pos:end="9:15">i</name></decl>;</decl_stmt>



  <for pos:start="13:3" pos:end="81:3">for <control pos:start="13:7" pos:end="13:23">(<init pos:start="13:8" pos:end="13:11"><expr pos:start="13:8" pos:end="13:10"><name pos:start="13:8" pos:end="13:8">i</name><operator pos:start="13:9" pos:end="13:9">=</operator><literal type="number" pos:start="13:10" pos:end="13:10">0</literal></expr>;</init> <condition pos:start="13:13" pos:end="13:18"><expr pos:start="13:13" pos:end="13:17"><name pos:start="13:13" pos:end="13:13">i</name> <operator pos:start="13:15" pos:end="13:15">&lt;</operator> <literal type="number" pos:start="13:17" pos:end="13:17">2</literal></expr>;</condition> <incr pos:start="13:20" pos:end="13:22"><expr pos:start="13:20" pos:end="13:22"><name pos:start="13:20" pos:end="13:20">i</name><operator pos:start="13:21" pos:end="13:22">++</operator></expr></incr>)</control> <block pos:start="13:25" pos:end="81:3">{<block_content pos:start="19:5" pos:end="79:77">



    <comment type="block" pos:start="17:5" pos:end="17:25">/* get motion code */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:39"><expr pos:start="19:5" pos:end="19:38"><name pos:start="19:5" pos:end="19:13">bit_cache</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:38"><name pos:start="19:17" pos:end="19:29">get_bit_cache</name> <argument_list pos:start="19:31" pos:end="19:38">(<argument pos:start="19:32" pos:end="19:37"><expr pos:start="19:32" pos:end="19:37"><name pos:start="19:32" pos:end="19:37">bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="25:16"><if pos:start="23:5" pos:end="25:16">if <condition pos:start="23:8" pos:end="23:34">(<expr pos:start="23:9" pos:end="23:33"><operator pos:start="23:9" pos:end="23:9">!</operator><operator pos:start="23:10" pos:end="23:10">(</operator><name pos:start="23:11" pos:end="23:19">bit_cache</name> <operator pos:start="23:21" pos:end="23:21">&amp;</operator> <literal type="number" pos:start="23:23" pos:end="23:32">0xFFE00000</literal><operator pos:start="23:33" pos:end="23:33">)</operator></expr>)</condition><block type="pseudo" pos:start="25:7" pos:end="25:16"><block_content pos:start="25:7" pos:end="25:16">

      <return pos:start="25:7" pos:end="25:16">return <expr pos:start="25:14" pos:end="25:15"><operator pos:start="25:14" pos:end="25:14">-</operator><literal type="number" pos:start="25:15" pos:end="25:15">1</literal></expr>;</return></block_content></block></if></if_stmt>	<comment type="block" pos:start="25:25" pos:end="25:46">/* invalid vlc code */</comment>



    <if_stmt pos:start="29:5" pos:end="67:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:31">(<expr pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:17">bit_cache</name> <operator pos:start="29:19" pos:end="29:19">&amp;</operator> <literal type="number" pos:start="29:21" pos:end="29:30">0x80000000</literal></expr>)</condition> <block pos:start="29:33" pos:end="41:5">{<block_content pos:start="31:7" pos:end="37:26">

      <expr_stmt pos:start="31:7" pos:end="31:15"><expr pos:start="31:7" pos:end="31:14"><name pos:start="31:7" pos:end="31:10">diff</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</expr_stmt>



      <comment type="block" pos:start="35:7" pos:end="35:21">/* flush bit */</comment>

      <expr_stmt pos:start="37:7" pos:end="37:26"><expr pos:start="37:7" pos:end="37:25"><call pos:start="37:7" pos:end="37:25"><name pos:start="37:7" pos:end="37:15">skip_bits</name><argument_list pos:start="37:16" pos:end="37:25">(<argument pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">bitbuf</name></expr></argument>,<argument pos:start="37:24" pos:end="37:24"><expr pos:start="37:24" pos:end="37:24"><literal type="number" pos:start="37:24" pos:end="37:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="41:7" pos:end="67:5">else <block pos:start="41:12" pos:end="67:5">{<block_content pos:start="43:7" pos:end="65:36">

      <if_stmt pos:start="43:7" pos:end="51:7"><if pos:start="43:7" pos:end="47:7">if <condition pos:start="43:10" pos:end="43:34">(<expr pos:start="43:11" pos:end="43:33"><name pos:start="43:11" pos:end="43:19">bit_cache</name> <operator pos:start="43:21" pos:end="43:22">&gt;=</operator> <literal type="number" pos:start="43:24" pos:end="43:33">0x06000000</literal></expr>)</condition> <block pos:start="43:36" pos:end="47:7">{<block_content pos:start="45:9" pos:end="45:59">

        <expr_stmt pos:start="45:9" pos:end="45:59"><expr pos:start="45:9" pos:end="45:58"><name pos:start="45:9" pos:end="45:11">vlc</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">&amp;</operator><name pos:start="45:16" pos:end="45:58"><name pos:start="45:16" pos:end="45:29">motion_table_0</name><index pos:start="45:30" pos:end="45:58">[<expr pos:start="45:31" pos:end="45:57"><operator pos:start="45:31" pos:end="45:31">(</operator><name pos:start="45:32" pos:end="45:40">bit_cache</name> <operator pos:start="45:42" pos:end="45:43">&gt;&gt;</operator> <operator pos:start="45:45" pos:end="45:45">(</operator><literal type="number" pos:start="45:46" pos:end="45:49">32</literal> <operator pos:start="45:49" pos:end="45:49">-</operator> <literal type="number" pos:start="45:51" pos:end="45:51">7</literal><operator pos:start="45:52" pos:end="45:52">)</operator><operator pos:start="45:53" pos:end="45:53">)</operator> <operator pos:start="45:55" pos:end="45:55">-</operator> <literal type="number" pos:start="45:57" pos:end="45:57">3</literal></expr>]</index></name></expr>;</expr_stmt>

      </block_content>}</block></if> <else pos:start="47:9" pos:end="51:7">else <block pos:start="47:14" pos:end="51:7">{<block_content pos:start="49:9" pos:end="49:60">

        <expr_stmt pos:start="49:9" pos:end="49:60"><expr pos:start="49:9" pos:end="49:59"><name pos:start="49:9" pos:end="49:11">vlc</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <operator pos:start="49:15" pos:end="49:15">&amp;</operator><name pos:start="49:16" pos:end="49:59"><name pos:start="49:16" pos:end="49:29">motion_table_1</name><index pos:start="49:30" pos:end="49:59">[<expr pos:start="49:31" pos:end="49:58"><operator pos:start="49:31" pos:end="49:31">(</operator><name pos:start="49:32" pos:end="49:40">bit_cache</name> <operator pos:start="49:42" pos:end="49:43">&gt;&gt;</operator> <operator pos:start="49:45" pos:end="49:45">(</operator><literal type="number" pos:start="49:46" pos:end="49:49">32</literal> <operator pos:start="49:49" pos:end="49:49">-</operator> <literal type="number" pos:start="49:51" pos:end="49:52">12</literal><operator pos:start="49:53" pos:end="49:53">)</operator><operator pos:start="49:54" pos:end="49:54">)</operator> <operator pos:start="49:56" pos:end="49:56">-</operator> <literal type="number" pos:start="49:58" pos:end="49:58">2</literal></expr>]</index></name></expr>;</expr_stmt>

      </block_content>}</block></else></if_stmt>



      <comment type="block" pos:start="55:7" pos:end="55:45">/* decode motion vector differential */</comment>

      <expr_stmt pos:start="57:7" pos:end="57:58"><expr pos:start="57:7" pos:end="57:57"><name pos:start="57:7" pos:end="57:10">sign</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <operator pos:start="57:14" pos:end="57:14">(</operator><name pos:start="57:15" pos:end="57:17">int</name><operator pos:start="57:18" pos:end="57:18">)</operator> <operator pos:start="57:20" pos:end="57:20">(</operator><name pos:start="57:21" pos:end="57:29">bit_cache</name> <operator pos:start="57:31" pos:end="57:32">&lt;&lt;</operator> <operator pos:start="57:34" pos:end="57:34">(</operator><name pos:start="57:35" pos:end="57:45"><name pos:start="57:35" pos:end="57:37">vlc</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:45">length</name></name> <operator pos:start="57:47" pos:end="57:47">-</operator> <literal type="number" pos:start="57:49" pos:end="57:49">1</literal><operator pos:start="57:50" pos:end="57:50">)</operator><operator pos:start="57:51" pos:end="57:51">)</operator> <operator pos:start="57:53" pos:end="57:54">&gt;&gt;</operator> <literal type="number" pos:start="57:56" pos:end="57:57">31</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="59:7" pos:end="59:40"><expr pos:start="59:7" pos:end="59:39"><name pos:start="59:7" pos:end="59:10">diff</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <operator pos:start="59:14" pos:end="59:14">(</operator><name pos:start="59:15" pos:end="59:24"><name pos:start="59:15" pos:end="59:17">vlc</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:24">value</name></name> <operator pos:start="59:26" pos:end="59:26">^</operator> <name pos:start="59:28" pos:end="59:31">sign</name><operator pos:start="59:32" pos:end="59:32">)</operator> <operator pos:start="59:34" pos:end="59:34">-</operator> <name pos:start="59:36" pos:end="59:39">sign</name></expr>;</expr_stmt>



      <comment type="block" pos:start="63:7" pos:end="63:22">/* flush bits */</comment>

      <expr_stmt pos:start="65:7" pos:end="65:36"><expr pos:start="65:7" pos:end="65:35"><call pos:start="65:7" pos:end="65:35"><name pos:start="65:7" pos:end="65:15">skip_bits</name><argument_list pos:start="65:16" pos:end="65:35">(<argument pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:22">bitbuf</name></expr></argument>,<argument pos:start="65:24" pos:end="65:34"><expr pos:start="65:24" pos:end="65:34"><name pos:start="65:24" pos:end="65:34"><name pos:start="65:24" pos:end="65:26">vlc</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:34">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:64">/* add median of motion vector predictors and clip result */</comment>

    <if_stmt pos:start="73:5" pos:end="79:77"><if pos:start="73:5" pos:end="75:77">if <condition pos:start="73:8" pos:end="73:15">(<expr pos:start="73:9" pos:end="73:14"><name pos:start="73:9" pos:end="73:9">i</name> <operator pos:start="73:11" pos:end="73:12">==</operator> <literal type="number" pos:start="73:14" pos:end="73:14">1</literal></expr>)</condition><block type="pseudo" pos:start="75:7" pos:end="75:77"><block_content pos:start="75:7" pos:end="75:77">

      <expr_stmt pos:start="75:7" pos:end="75:77"><expr pos:start="75:7" pos:end="75:76"><name pos:start="75:7" pos:end="75:11"><name pos:start="75:7" pos:end="75:8">mv</name><operator pos:start="75:9" pos:end="75:10">-&gt;</operator><name pos:start="75:11" pos:end="75:11">y</name></name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">(</operator><operator pos:start="75:16" pos:end="75:16">(</operator><name pos:start="75:17" pos:end="75:20">diff</name> <operator pos:start="75:22" pos:end="75:22">+</operator> <call pos:start="75:24" pos:end="75:62"><name pos:start="75:24" pos:end="75:29">MEDIAN</name><argument_list pos:start="75:30" pos:end="75:62">(<argument pos:start="75:31" pos:end="75:39"><expr pos:start="75:31" pos:end="75:39"><name pos:start="75:31" pos:end="75:36"><name pos:start="75:31" pos:end="75:33">pmv</name><index pos:start="75:34" pos:end="75:36">[<expr pos:start="75:35" pos:end="75:35"><literal type="number" pos:start="75:35" pos:end="75:35">0</literal></expr>]</index></name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:39">y</name></expr></argument>, <argument pos:start="75:42" pos:end="75:50"><expr pos:start="75:42" pos:end="75:50"><name pos:start="75:42" pos:end="75:47"><name pos:start="75:42" pos:end="75:44">pmv</name><index pos:start="75:45" pos:end="75:47">[<expr pos:start="75:46" pos:end="75:46"><literal type="number" pos:start="75:46" pos:end="75:46">1</literal></expr>]</index></name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:50">y</name></expr></argument>, <argument pos:start="75:53" pos:end="75:61"><expr pos:start="75:53" pos:end="75:61"><name pos:start="75:53" pos:end="75:58"><name pos:start="75:53" pos:end="75:55">pmv</name><index pos:start="75:56" pos:end="75:58">[<expr pos:start="75:57" pos:end="75:57"><literal type="number" pos:start="75:57" pos:end="75:57">2</literal></expr>]</index></name><operator pos:start="75:59" pos:end="75:60">-&gt;</operator><name pos:start="75:61" pos:end="75:61">y</name></expr></argument>)</argument_list></call><operator pos:start="75:63" pos:end="75:63">)</operator> <operator pos:start="75:65" pos:end="75:66">&lt;&lt;</operator> <literal type="number" pos:start="75:68" pos:end="75:69">26</literal><operator pos:start="75:70" pos:end="75:70">)</operator> <operator pos:start="75:72" pos:end="75:73">&gt;&gt;</operator> <literal type="number" pos:start="75:75" pos:end="75:76">26</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="77:5" pos:end="79:77">else<block type="pseudo" pos:start="79:7" pos:end="79:77"><block_content pos:start="79:7" pos:end="79:77">

      <expr_stmt pos:start="79:7" pos:end="79:77"><expr pos:start="79:7" pos:end="79:76"><name pos:start="79:7" pos:end="79:11"><name pos:start="79:7" pos:end="79:8">mv</name><operator pos:start="79:9" pos:end="79:10">-&gt;</operator><name pos:start="79:11" pos:end="79:11">x</name></name> <operator pos:start="79:13" pos:end="79:13">=</operator> <operator pos:start="79:15" pos:end="79:15">(</operator><operator pos:start="79:16" pos:end="79:16">(</operator><name pos:start="79:17" pos:end="79:20">diff</name> <operator pos:start="79:22" pos:end="79:22">+</operator> <call pos:start="79:24" pos:end="79:62"><name pos:start="79:24" pos:end="79:29">MEDIAN</name><argument_list pos:start="79:30" pos:end="79:62">(<argument pos:start="79:31" pos:end="79:39"><expr pos:start="79:31" pos:end="79:39"><name pos:start="79:31" pos:end="79:36"><name pos:start="79:31" pos:end="79:33">pmv</name><index pos:start="79:34" pos:end="79:36">[<expr pos:start="79:35" pos:end="79:35"><literal type="number" pos:start="79:35" pos:end="79:35">0</literal></expr>]</index></name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:39">x</name></expr></argument>, <argument pos:start="79:42" pos:end="79:50"><expr pos:start="79:42" pos:end="79:50"><name pos:start="79:42" pos:end="79:47"><name pos:start="79:42" pos:end="79:44">pmv</name><index pos:start="79:45" pos:end="79:47">[<expr pos:start="79:46" pos:end="79:46"><literal type="number" pos:start="79:46" pos:end="79:46">1</literal></expr>]</index></name><operator pos:start="79:48" pos:end="79:49">-&gt;</operator><name pos:start="79:50" pos:end="79:50">x</name></expr></argument>, <argument pos:start="79:53" pos:end="79:61"><expr pos:start="79:53" pos:end="79:61"><name pos:start="79:53" pos:end="79:58"><name pos:start="79:53" pos:end="79:55">pmv</name><index pos:start="79:56" pos:end="79:58">[<expr pos:start="79:57" pos:end="79:57"><literal type="number" pos:start="79:57" pos:end="79:57">2</literal></expr>]</index></name><operator pos:start="79:59" pos:end="79:60">-&gt;</operator><name pos:start="79:61" pos:end="79:61">x</name></expr></argument>)</argument_list></call><operator pos:start="79:63" pos:end="79:63">)</operator> <operator pos:start="79:65" pos:end="79:66">&lt;&lt;</operator> <literal type="number" pos:start="79:68" pos:end="79:69">26</literal><operator pos:start="79:70" pos:end="79:70">)</operator> <operator pos:start="79:72" pos:end="79:73">&gt;&gt;</operator> <literal type="number" pos:start="79:75" pos:end="79:76">26</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

  </block_content>}</block></for>



  <return pos:start="85:3" pos:end="85:11">return <expr pos:start="85:10" pos:end="85:10"><literal type="number" pos:start="85:10" pos:end="85:10">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
