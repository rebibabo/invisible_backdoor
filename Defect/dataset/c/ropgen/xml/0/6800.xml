<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6800.c" pos:tabs="8"><function pos:start="1:1" pos:end="695:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:32">dering</name>)<parameter_list pos:start="1:34" pos:end="1:74">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:45"><name pos:start="1:35" pos:end="1:41">uint8_t</name></type> <name pos:start="1:43" pos:end="1:47"><name pos:start="1:43" pos:end="1:45">src</name><index pos:start="1:46" pos:end="1:47">[]</index></name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:59">stride</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:70">PPContext</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:73">c</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="695:1">{<block_content pos:start="7:5" pos:end="694:0">

<cpp:if pos:start="5:1" pos:end="5:59">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:59"><name pos:start="5:5" pos:end="5:14">HAVE_7REGS</name> <operator pos:start="5:16" pos:end="5:17">&amp;&amp;</operator> <operator pos:start="5:19" pos:end="5:19">(</operator><name pos:start="5:20" pos:end="5:37">TEMPLATE_PP_MMXEXT</name> <operator pos:start="5:39" pos:end="5:40">||</operator> <name pos:start="5:42" pos:end="5:58">TEMPLATE_PP_3DNOW</name><operator pos:start="5:59" pos:end="5:59">)</operator></expr></cpp:if>

    <expr_stmt pos:start="7:5" pos:end="7:41"><expr pos:start="7:5" pos:end="7:40"><call pos:start="7:5" pos:end="7:37"><name pos:start="7:5" pos:end="7:19">DECLARE_ALIGNED</name><argument_list pos:start="7:20" pos:end="7:37">(<argument pos:start="7:21" pos:end="7:21"><expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">8</literal></expr></argument>, <argument pos:start="7:24" pos:end="7:31"><expr pos:start="7:24" pos:end="7:31"><name pos:start="7:24" pos:end="7:31">uint64_t</name></expr></argument>, <argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">tmp</name></expr></argument>)</argument_list></call><index pos:start="7:38" pos:end="7:40">[<expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">3</literal></expr>]</index></expr>;</expr_stmt>

    <asm pos:start="9:5" pos:end="458:0">__asm__ <specifier pos:start="9:13" pos:end="9:20">volatile</specifier>(

        "pxor %%mm6, %%mm6                      \n\t"

        "pcmpeqb %%mm7, %%mm7                   \n\t"

        "movq %2, %%mm0                         \n\t"

        "punpcklbw %%mm6, %%mm0                 \n\t"

        "psrlw $1, %%mm0                        \n\t"

        "psubw %%mm7, %%mm0                     \n\t"

        "packuswb %%mm0, %%mm0                  \n\t"

        "movq %%mm0, %3                         \n\t"



        "lea (%0, %1), %%"REG_a"                \n\t"

        "lea (%%"REG_a", %1, 4), %%"REG_d"      \n\t"



<comment type="line" pos:start="35:1" pos:end="35:92">//        0        1        2        3        4        5        6        7        8        9</comment>

<comment type="line" pos:start="37:1" pos:end="37:135">//        %0        eax        eax+%1        eax+2%1        %0+4%1        edx        edx+%1        edx+2%1        %0+8%1        edx+4%1</comment>



<cpp:undef pos:start="41:1" pos:end="41:24">#<cpp:directive pos:start="41:2" pos:end="41:6">undef</cpp:directive> <name pos:start="41:8" pos:end="41:24">REAL_FIND_MIN_MAX</name></cpp:undef>

<cpp:undef pos:start="43:1" pos:end="43:19">#<cpp:directive pos:start="43:2" pos:end="43:6">undef</cpp:directive> <name pos:start="43:8" pos:end="43:19">FIND_MIN_MAX</name></cpp:undef>

<cpp:if pos:start="45:1" pos:end="45:22">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:22">TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

<cpp:define pos:start="47:1" pos:end="53:53">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:25">REAL_FIND_MIN_MAX</name><parameter_list pos:start="47:26" pos:end="47:31">(<parameter pos:start="47:27" pos:end="47:30"><type pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">addr</name></type></parameter>)</parameter_list></cpp:macro>\

        <cpp:value pos:start="49:9" pos:end="53:53">"movq " #addr ", %%mm0                  \n\t"\

        "pminub %%mm0, %%mm7                    \n\t"\

        "pmaxub %%mm0, %%mm6                    \n\t"</cpp:value></cpp:define>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="57:1" pos:end="69:53">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:25">REAL_FIND_MIN_MAX</name><parameter_list pos:start="57:26" pos:end="57:31">(<parameter pos:start="57:27" pos:end="57:30"><type pos:start="57:27" pos:end="57:30"><name pos:start="57:27" pos:end="57:30">addr</name></type></parameter>)</parameter_list></cpp:macro>\

        <cpp:value pos:start="59:9" pos:end="69:53">"movq " #addr ", %%mm0                  \n\t"\

        "movq %%mm7, %%mm1                      \n\t"\

        "psubusb %%mm0, %%mm6                   \n\t"\

        "paddb %%mm0, %%mm6                     \n\t"\

        "psubusb %%mm0, %%mm1                   \n\t"\

        "psubb %%mm1, %%mm7                     \n\t"</cpp:value></cpp:define>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="73:1" pos:end="73:51">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:20">FIND_MIN_MAX</name><parameter_list pos:start="73:21" pos:end="73:26">(<parameter pos:start="73:22" pos:end="73:25"><type pos:start="73:22" pos:end="73:25"><name pos:start="73:22" pos:end="73:25">addr</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="73:29" pos:end="73:51">REAL_FIND_MIN_MAX(addr)</cpp:value></cpp:define>



FIND_MIN_MAX((%%REGa))

FIND_MIN_MAX((%%REGa, %1))

FIND_MIN_MAX((%%REGa, %1, 2))

FIND_MIN_MAX((%0, %1, 4))

FIND_MIN_MAX((%%REGd))

FIND_MIN_MAX((%%REGd, %1))

FIND_MIN_MAX((%%REGd, %1, 2))

FIND_MIN_MAX((%0, %1, 8))



        "movq %%mm7, %%mm4                      \n\t"

        "psrlq $8, %%mm7                        \n\t"

<cpp:if pos:start="99:1" pos:end="99:22">#<cpp:directive pos:start="99:2" pos:end="99:3">if</cpp:directive> <expr pos:start="99:5" pos:end="99:22"><name pos:start="99:5" pos:end="99:22">TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

        "pminub %%mm4, %%mm7                    \n\t" <comment type="line" pos:start="101:55" pos:end="101:70">// min of pixels</comment>

        "pshufw $0xF9, %%mm7, %%mm4             \n\t"

        "pminub %%mm4, %%mm7                    \n\t" <comment type="line" pos:start="105:55" pos:end="105:70">// min of pixels</comment>

        "pshufw $0xFE, %%mm7, %%mm4             \n\t"

        "pminub %%mm4, %%mm7                    \n\t"

<cpp:else pos:start="111:1" pos:end="111:5">#<cpp:directive pos:start="111:2" pos:end="111:5">else</cpp:directive></cpp:else>

        "movq %%mm7, %%mm1                      \n\t"

        "psubusb %%mm4, %%mm1                   \n\t"

        "psubb %%mm1, %%mm7                     \n\t"

        "movq %%mm7, %%mm4                      \n\t"

        "psrlq $16, %%mm7                       \n\t"

        "movq %%mm7, %%mm1                      \n\t"

        "psubusb %%mm4, %%mm1                   \n\t"

        "psubb %%mm1, %%mm7                     \n\t"

        "movq %%mm7, %%mm4                      \n\t"

        "psrlq $32, %%mm7                       \n\t"

        "movq %%mm7, %%mm1                      \n\t"

        "psubusb %%mm4, %%mm1                   \n\t"

        "psubb %%mm1, %%mm7                     \n\t"

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif>





        "movq %%mm6, %%mm4                      \n\t"

        "psrlq $8, %%mm6                        \n\t"

<cpp:if pos:start="149:1" pos:end="149:22">#<cpp:directive pos:start="149:2" pos:end="149:3">if</cpp:directive> <expr pos:start="149:5" pos:end="149:22"><name pos:start="149:5" pos:end="149:22">TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

        "pmaxub %%mm4, %%mm6                    \n\t" <comment type="line" pos:start="151:55" pos:end="151:70">// max of pixels</comment>

        "pshufw $0xF9, %%mm6, %%mm4             \n\t"

        "pmaxub %%mm4, %%mm6                    \n\t"

        "pshufw $0xFE, %%mm6, %%mm4             \n\t"

        "pmaxub %%mm4, %%mm6                    \n\t"

<cpp:else pos:start="161:1" pos:end="161:5">#<cpp:directive pos:start="161:2" pos:end="161:5">else</cpp:directive></cpp:else>

        "psubusb %%mm4, %%mm6                   \n\t"

        "paddb %%mm4, %%mm6                     \n\t"

        "movq %%mm6, %%mm4                      \n\t"

        "psrlq $16, %%mm6                       \n\t"

        "psubusb %%mm4, %%mm6                   \n\t"

        "paddb %%mm4, %%mm6                     \n\t"

        "movq %%mm6, %%mm4                      \n\t"

        "psrlq $32, %%mm6                       \n\t"

        "psubusb %%mm4, %%mm6                   \n\t"

        "paddb %%mm4, %%mm6                     \n\t"

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>

        "movq %%mm6, %%mm0                      \n\t" <comment type="line" pos:start="185:55" pos:end="185:60">// max</comment>

        "psubb %%mm7, %%mm6                     \n\t" <comment type="line" pos:start="187:55" pos:end="187:66">// max - min</comment>

        "push %4                              \n\t"

        "movd %%mm6, %k4                        \n\t"

        "cmpb "MANGLE(deringThreshold)", %b4    \n\t"

        "pop %4                               \n\t"

        " jb 1f                                 \n\t"

        PAVGB(%%mm0, %%mm7)                           <comment type="line" pos:start="199:55" pos:end="199:72">// a=(max + min)/2</comment>

        "punpcklbw %%mm7, %%mm7                 \n\t"

        "punpcklbw %%mm7, %%mm7                 \n\t"

        "punpcklbw %%mm7, %%mm7                 \n\t"

        "movq %%mm7, (%4)                       \n\t"



        "movq (%0), %%mm0                       \n\t" <comment type="line" pos:start="211:55" pos:end="211:60">// L10</comment>

        "movq %%mm0, %%mm1                      \n\t" <comment type="line" pos:start="213:55" pos:end="213:60">// L10</comment>

        "movq %%mm0, %%mm2                      \n\t" <comment type="line" pos:start="215:55" pos:end="215:60">// L10</comment>

        "psllq $8, %%mm1                        \n\t"

        "psrlq $8, %%mm2                        \n\t"

        "movd -4(%0), %%mm3                     \n\t"

        "movd 8(%0), %%mm4                      \n\t"

        "psrlq $24, %%mm3                       \n\t"

        "psllq $56, %%mm4                       \n\t"

        "por %%mm3, %%mm1                       \n\t" <comment type="line" pos:start="229:55" pos:end="229:60">// L00</comment>

        "por %%mm4, %%mm2                       \n\t" <comment type="line" pos:start="231:55" pos:end="231:60">// L20</comment>

        "movq %%mm1, %%mm3                      \n\t" <comment type="line" pos:start="233:55" pos:end="233:60">// L00</comment>

        PAVGB(%%mm2, %%mm1)                           <comment type="line" pos:start="235:55" pos:end="235:70">// (L20 + L00)/2</comment>

        PAVGB(%%mm0, %%mm1)                           <comment type="line" pos:start="237:55" pos:end="237:77">// (L20 + L00 + 2L10)/4</comment>

        "psubusb %%mm7, %%mm0                   \n\t"

        "psubusb %%mm7, %%mm2                   \n\t"

        "psubusb %%mm7, %%mm3                   \n\t"

        "pcmpeqb "MANGLE(b00)", %%mm0           \n\t" <comment type="line" pos:start="245:55" pos:end="245:73">// L10 &gt; a ? 0 : -1</comment>

        "pcmpeqb "MANGLE(b00)", %%mm2           \n\t" <comment type="line" pos:start="247:55" pos:end="247:73">// L20 &gt; a ? 0 : -1</comment>

        "pcmpeqb "MANGLE(b00)", %%mm3           \n\t" <comment type="line" pos:start="249:55" pos:end="249:73">// L00 &gt; a ? 0 : -1</comment>

        "paddb %%mm2, %%mm0                     \n\t"

        "paddb %%mm3, %%mm0                     \n\t"



        "movq (%%"REG_a"), %%mm2                \n\t" <comment type="line" pos:start="257:55" pos:end="257:60">// L11</comment>

        "movq %%mm2, %%mm3                      \n\t" <comment type="line" pos:start="259:55" pos:end="259:60">// L11</comment>

        "movq %%mm2, %%mm4                      \n\t" <comment type="line" pos:start="261:55" pos:end="261:60">// L11</comment>

        "psllq $8, %%mm3                        \n\t"

        "psrlq $8, %%mm4                        \n\t"

        "movd -4(%%"REG_a"), %%mm5              \n\t"

        "movd 8(%%"REG_a"), %%mm6               \n\t"

        "psrlq $24, %%mm5                       \n\t"

        "psllq $56, %%mm6                       \n\t"

        "por %%mm5, %%mm3                       \n\t" <comment type="line" pos:start="275:55" pos:end="275:60">// L01</comment>

        "por %%mm6, %%mm4                       \n\t" <comment type="line" pos:start="277:55" pos:end="277:60">// L21</comment>

        "movq %%mm3, %%mm5                      \n\t" <comment type="line" pos:start="279:55" pos:end="279:60">// L01</comment>

        PAVGB(%%mm4, %%mm3)                           <comment type="line" pos:start="281:55" pos:end="281:70">// (L21 + L01)/2</comment>

        PAVGB(%%mm2, %%mm3)                           <comment type="line" pos:start="283:55" pos:end="283:77">// (L21 + L01 + 2L11)/4</comment>

        "psubusb %%mm7, %%mm2                   \n\t"

        "psubusb %%mm7, %%mm4                   \n\t"

        "psubusb %%mm7, %%mm5                   \n\t"

        "pcmpeqb "MANGLE(b00)", %%mm2           \n\t" <comment type="line" pos:start="291:55" pos:end="291:73">// L11 &gt; a ? 0 : -1</comment>

        "pcmpeqb "MANGLE(b00)", %%mm4           \n\t" <comment type="line" pos:start="293:55" pos:end="293:73">// L21 &gt; a ? 0 : -1</comment>

        "pcmpeqb "MANGLE(b00)", %%mm5           \n\t" <comment type="line" pos:start="295:55" pos:end="295:73">// L01 &gt; a ? 0 : -1</comment>

        "paddb %%mm4, %%mm2                     \n\t"

        "paddb %%mm5, %%mm2                     \n\t"

<comment type="line" pos:start="301:1" pos:end="301:13">// 0, 2, 3, 1</comment>

<cpp:define pos:start="303:1" pos:end="391:53">#<cpp:directive pos:start="303:2" pos:end="303:7">define</cpp:directive> <cpp:macro pos:start="303:9" pos:end="303:63"><name pos:start="303:9" pos:end="303:24">REAL_DERING_CORE</name><parameter_list pos:start="303:25" pos:end="303:63">(<parameter pos:start="303:26" pos:end="303:28"><type pos:start="303:26" pos:end="303:28"><name pos:start="303:26" pos:end="303:28">dst</name></type></parameter>,<parameter pos:start="303:30" pos:end="303:32"><type pos:start="303:30" pos:end="303:32"><name pos:start="303:30" pos:end="303:32">src</name></type></parameter>,<parameter pos:start="303:34" pos:end="303:37"><type pos:start="303:34" pos:end="303:37"><name pos:start="303:34" pos:end="303:37">ppsx</name></type></parameter>,<parameter pos:start="303:39" pos:end="303:41"><type pos:start="303:39" pos:end="303:41"><name pos:start="303:39" pos:end="303:41">psx</name></type></parameter>,<parameter pos:start="303:43" pos:end="303:44"><type pos:start="303:43" pos:end="303:44"><name pos:start="303:43" pos:end="303:44">sx</name></type></parameter>,<parameter pos:start="303:46" pos:end="303:49"><type pos:start="303:46" pos:end="303:49"><name pos:start="303:46" pos:end="303:49">pplx</name></type></parameter>,<parameter pos:start="303:51" pos:end="303:53"><type pos:start="303:51" pos:end="303:53"><name pos:start="303:51" pos:end="303:53">plx</name></type></parameter>,<parameter pos:start="303:55" pos:end="303:56"><type pos:start="303:55" pos:end="303:56"><name pos:start="303:55" pos:end="303:56">lx</name></type></parameter>,<parameter pos:start="303:58" pos:end="303:59"><type pos:start="303:58" pos:end="303:59"><name pos:start="303:58" pos:end="303:59">t0</name></type></parameter>,<parameter pos:start="303:61" pos:end="303:62"><type pos:start="303:61" pos:end="303:62"><name pos:start="303:61" pos:end="303:62">t1</name></type></parameter>)</parameter_list></cpp:macro> \

        <cpp:value pos:start="305:9" pos:end="391:53">"movq " #src ", " #sx "                 \n\t" <comment type="block" pos:start="305:55" pos:end="305:66">/* src[0] */</comment>\

        "movq " #sx ", " #lx "                  \n\t" <comment type="block" pos:start="307:55" pos:end="307:66">/* src[0] */</comment>\

        "movq " #sx ", " #t0 "                  \n\t" <comment type="block" pos:start="309:55" pos:end="309:66">/* src[0] */</comment>\

        "psllq $8, " #lx "                      \n\t"\

        "psrlq $8, " #t0 "                      \n\t"\

        "movd -4" #src ", " #t1 "               \n\t"\

        "psrlq $24, " #t1 "                     \n\t"\

        "por " #t1 ", " #lx "                   \n\t" <comment type="block" pos:start="319:55" pos:end="319:67">/* src[-1] */</comment>\

        "movd 8" #src ", " #t1 "                \n\t"\

        "psllq $56, " #t1 "                     \n\t"\

        "por " #t1 ", " #t0 "                   \n\t" <comment type="block" pos:start="325:55" pos:end="325:67">/* src[+1] */</comment>\

        "movq " #lx ", " #t1 "                  \n\t" <comment type="block" pos:start="327:55" pos:end="327:67">/* src[-1] */</comment>\

        PAVGB(t0, lx)                                 <comment type="block" pos:start="329:55" pos:end="329:81">/* (src[-1] + src[+1])/2 */</comment>\

        PAVGB(sx, lx)                                 <comment type="block" pos:start="331:55" pos:end="331:91">/* (src[-1] + 2src[0] + src[+1])/4 */</comment>\

        PAVGB(lx, pplx)                                     \

        "movq " #lx ", 8(%4)                    \n\t"\

        "movq (%4), " #lx "                     \n\t"\

        "psubusb " #lx ", " #t1 "               \n\t"\

        "psubusb " #lx ", " #t0 "               \n\t"\

        "psubusb " #lx ", " #sx "               \n\t"\

        "movq "MANGLE(b00)", " #lx "            \n\t"\

        "pcmpeqb " #lx ", " #t1 "               \n\t" <comment type="block" pos:start="347:55" pos:end="347:79">/* src[-1] &gt; a ? 0 : -1*/</comment>\

        "pcmpeqb " #lx ", " #t0 "               \n\t" <comment type="block" pos:start="349:55" pos:end="349:79">/* src[+1] &gt; a ? 0 : -1*/</comment>\

        "pcmpeqb " #lx ", " #sx "               \n\t" <comment type="block" pos:start="351:55" pos:end="351:79">/* src[0]  &gt; a ? 0 : -1*/</comment>\

        "paddb " #t1 ", " #t0 "                 \n\t"\

        "paddb " #t0 ", " #sx "                 \n\t"\

\

        PAVGB(plx, pplx)                              <comment type="block" pos:start="359:55" pos:end="359:68">/* filtered */</comment>\

        "movq " #dst ", " #t0 "                 \n\t" <comment type="block" pos:start="361:55" pos:end="361:63">/* dst */</comment>\

        "movq " #t0 ", " #t1 "                  \n\t" <comment type="block" pos:start="363:55" pos:end="363:63">/* dst */</comment>\

        "psubusb %3, " #t0 "                    \n\t"\

        "paddusb %3, " #t1 "                    \n\t"\

        PMAXUB(t0, pplx)\

        PMINUB(t1, pplx, t0)\

        "paddb " #sx ", " #ppsx "               \n\t"\

        "paddb " #psx ", " #ppsx "              \n\t"\

        "#paddb "MANGLE(b02)", " #ppsx "        \n\t"\

        "pand "MANGLE(b08)", " #ppsx "          \n\t"\

        "pcmpeqb " #lx ", " #ppsx "             \n\t"\

        "pand " #ppsx ", " #pplx "              \n\t"\

        "pandn " #dst ", " #ppsx "              \n\t"\

        "por " #pplx ", " #ppsx "               \n\t"\

        "movq " #ppsx ", " #dst "               \n\t"\

        "movq 8(%4), " #lx "                    \n\t"</cpp:value></cpp:define>



<cpp:define pos:start="395:1" pos:end="397:58">#<cpp:directive pos:start="395:2" pos:end="395:7">define</cpp:directive> <cpp:macro pos:start="395:9" pos:end="395:58"><name pos:start="395:9" pos:end="395:19">DERING_CORE</name><parameter_list pos:start="395:20" pos:end="395:58">(<parameter pos:start="395:21" pos:end="395:23"><type pos:start="395:21" pos:end="395:23"><name pos:start="395:21" pos:end="395:23">dst</name></type></parameter>,<parameter pos:start="395:25" pos:end="395:27"><type pos:start="395:25" pos:end="395:27"><name pos:start="395:25" pos:end="395:27">src</name></type></parameter>,<parameter pos:start="395:29" pos:end="395:32"><type pos:start="395:29" pos:end="395:32"><name pos:start="395:29" pos:end="395:32">ppsx</name></type></parameter>,<parameter pos:start="395:34" pos:end="395:36"><type pos:start="395:34" pos:end="395:36"><name pos:start="395:34" pos:end="395:36">psx</name></type></parameter>,<parameter pos:start="395:38" pos:end="395:39"><type pos:start="395:38" pos:end="395:39"><name pos:start="395:38" pos:end="395:39">sx</name></type></parameter>,<parameter pos:start="395:41" pos:end="395:44"><type pos:start="395:41" pos:end="395:44"><name pos:start="395:41" pos:end="395:44">pplx</name></type></parameter>,<parameter pos:start="395:46" pos:end="395:48"><type pos:start="395:46" pos:end="395:48"><name pos:start="395:46" pos:end="395:48">plx</name></type></parameter>,<parameter pos:start="395:50" pos:end="395:51"><type pos:start="395:50" pos:end="395:51"><name pos:start="395:50" pos:end="395:51">lx</name></type></parameter>,<parameter pos:start="395:53" pos:end="395:54"><type pos:start="395:53" pos:end="395:54"><name pos:start="395:53" pos:end="395:54">t0</name></type></parameter>,<parameter pos:start="395:56" pos:end="395:57"><type pos:start="395:56" pos:end="395:57"><name pos:start="395:56" pos:end="395:57">t1</name></type></parameter>)</parameter_list></cpp:macro> \

   <cpp:value pos:start="397:4" pos:end="397:58">REAL_DERING_CORE(dst,src,ppsx,psx,sx,pplx,plx,lx,t0,t1)</cpp:value></cpp:define>

<comment type="block" pos:start="399:1" pos:end="427:2">/*

0000000

1111111



1111110

1111101

1111100

1111011

1111010

1111001



1111000

1110111



*/</comment>

<comment type="line" pos:start="429:1" pos:end="429:89">//DERING_CORE(dst          ,src            ,ppsx ,psx  ,sx   ,pplx ,plx  ,lx   ,t0   ,t1)</comment>

DERING_CORE((%%REGa)       ,(%%REGa, %1)   ,%%mm0,%%mm2,%%mm4,%%mm1,%%mm3,%%mm5,%%mm6,%%mm7)

DERING_CORE((%%REGa, %1)   ,(%%REGa, %1, 2),%%mm2,%%mm4,%%mm0,%%mm3,%%mm5,%%mm1,%%mm6,%%mm7)

DERING_CORE((%%REGa, %1, 2),(%0, %1, 4)    ,%%mm4,%%mm0,%%mm2,%%mm5,%%mm1,%%mm3,%%mm6,%%mm7)

DERING_CORE((%0, %1, 4)    ,(%%REGd)       ,%%mm0,%%mm2,%%mm4,%%mm1,%%mm3,%%mm5,%%mm6,%%mm7)

DERING_CORE((%%REGd)       ,(%%REGd, %1)   ,%%mm2,%%mm4,%%mm0,%%mm3,%%mm5,%%mm1,%%mm6,%%mm7)

DERING_CORE((%%REGd, %1)   ,(%%REGd, %1, 2),%%mm4,%%mm0,%%mm2,%%mm5,%%mm1,%%mm3,%%mm6,%%mm7)

DERING_CORE((%%REGd, %1, 2),(%0, %1, 8)    ,%%mm0,%%mm2,%%mm4,%%mm1,%%mm3,%%mm5,%%mm6,%%mm7)

DERING_CORE((%0, %1, 8)    ,(%%REGd, %1, 4),%%mm2,%%mm4,%%mm0,%%mm3,%%mm5,%%mm1,%%mm6,%%mm7)



        "1:                        \n\t"

        : : "r" (src), "r" ((x86_reg)stride), "m" (c-&gt;pQPb), "m"(c-&gt;pQPb2), "q"(tmp)

        : "%"REG_a, "%"REG_d

    );</asm>

<cpp:else pos:start="457:1" pos:end="457:5">#<cpp:directive pos:start="457:2" pos:end="457:5">else</cpp:directive></cpp:else> <comment type="line" pos:start="457:7" pos:end="457:64">// HAVE_7REGS &amp;&amp; (TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW)</comment>

    <decl_stmt pos:start="459:5" pos:end="459:10"><decl pos:start="459:5" pos:end="459:9"><type pos:start="459:5" pos:end="459:7"><name pos:start="459:5" pos:end="459:7">int</name></type> <name pos:start="459:9" pos:end="459:9">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="461:5" pos:end="461:16"><decl pos:start="461:5" pos:end="461:15"><type pos:start="461:5" pos:end="461:7"><name pos:start="461:5" pos:end="461:7">int</name></type> <name pos:start="461:9" pos:end="461:11">min</name><init pos:start="461:12" pos:end="461:15">=<expr pos:start="461:13" pos:end="461:15"><literal type="number" pos:start="461:13" pos:end="461:15">255</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="463:5" pos:end="463:14"><decl pos:start="463:5" pos:end="463:13"><type pos:start="463:5" pos:end="463:7"><name pos:start="463:5" pos:end="463:7">int</name></type> <name pos:start="463:9" pos:end="463:11">max</name><init pos:start="463:12" pos:end="463:13">=<expr pos:start="463:13" pos:end="463:13"><literal type="number" pos:start="463:13" pos:end="463:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="465:5" pos:end="465:12"><decl pos:start="465:5" pos:end="465:11"><type pos:start="465:5" pos:end="465:7"><name pos:start="465:5" pos:end="465:7">int</name></type> <name pos:start="465:9" pos:end="465:11">avg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="467:5" pos:end="467:15"><decl pos:start="467:5" pos:end="467:14"><type pos:start="467:5" pos:end="467:13"><name pos:start="467:5" pos:end="467:11">uint8_t</name> <modifier pos:start="467:13" pos:end="467:13">*</modifier></type><name pos:start="467:14" pos:end="467:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="469:5" pos:end="469:14"><decl pos:start="469:5" pos:end="469:13"><type pos:start="469:5" pos:end="469:7"><name pos:start="469:5" pos:end="469:7">int</name></type> <name pos:start="469:9" pos:end="469:13"><name pos:start="469:9" pos:end="469:9">s</name><index pos:start="469:10" pos:end="469:13">[<expr pos:start="469:11" pos:end="469:12"><literal type="number" pos:start="469:11" pos:end="469:12">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="471:5" pos:end="471:31"><decl pos:start="471:5" pos:end="471:30"><type pos:start="471:5" pos:end="471:13"><specifier pos:start="471:5" pos:end="471:9">const</specifier> <name pos:start="471:11" pos:end="471:13">int</name></type> <name pos:start="471:15" pos:end="471:17">QP2</name><init pos:start="471:18" pos:end="471:30">= <expr pos:start="471:20" pos:end="471:30"><name pos:start="471:20" pos:end="471:24"><name pos:start="471:20" pos:end="471:20">c</name><operator pos:start="471:21" pos:end="471:22">-&gt;</operator><name pos:start="471:23" pos:end="471:24">QP</name></name><operator pos:start="471:25" pos:end="471:25">/</operator><literal type="number" pos:start="471:26" pos:end="471:28">2</literal> <operator pos:start="471:28" pos:end="471:28">+</operator> <literal type="number" pos:start="471:30" pos:end="471:30">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="475:5" pos:end="475:11"><expr pos:start="475:5" pos:end="475:10"><name pos:start="475:5" pos:end="475:7">src</name> <operator pos:start="475:9" pos:end="475:10">--</operator></expr>;</expr_stmt>

    <for pos:start="477:5" pos:end="493:5">for<control pos:start="477:8" pos:end="477:22">(<init pos:start="477:9" pos:end="477:12"><expr pos:start="477:9" pos:end="477:11"><name pos:start="477:9" pos:end="477:9">y</name><operator pos:start="477:10" pos:end="477:10">=</operator><literal type="number" pos:start="477:11" pos:end="477:11">1</literal></expr>;</init> <condition pos:start="477:14" pos:end="477:17"><expr pos:start="477:14" pos:end="477:16"><name pos:start="477:14" pos:end="477:14">y</name><operator pos:start="477:15" pos:end="477:15">&lt;</operator><literal type="number" pos:start="477:16" pos:end="477:16">9</literal></expr>;</condition> <incr pos:start="477:19" pos:end="477:21"><expr pos:start="477:19" pos:end="477:21"><name pos:start="477:19" pos:end="477:19">y</name><operator pos:start="477:20" pos:end="477:21">++</operator></expr></incr>)</control><block pos:start="477:23" pos:end="493:5">{<block_content pos:start="479:9" pos:end="491:9">

        <decl_stmt pos:start="479:9" pos:end="479:14"><decl pos:start="479:9" pos:end="479:13"><type pos:start="479:9" pos:end="479:11"><name pos:start="479:9" pos:end="479:11">int</name></type> <name pos:start="479:13" pos:end="479:13">x</name></decl>;</decl_stmt>

        <expr_stmt pos:start="481:9" pos:end="481:26"><expr pos:start="481:9" pos:end="481:25"><name pos:start="481:9" pos:end="481:9">p</name><operator pos:start="481:10" pos:end="481:10">=</operator> <name pos:start="481:12" pos:end="481:14">src</name> <operator pos:start="481:16" pos:end="481:16">+</operator> <name pos:start="481:18" pos:end="481:23">stride</name><operator pos:start="481:24" pos:end="481:24">*</operator><name pos:start="481:25" pos:end="481:25">y</name></expr>;</expr_stmt>

        <for pos:start="483:9" pos:end="491:9">for<control pos:start="483:12" pos:end="483:26">(<init pos:start="483:13" pos:end="483:16"><expr pos:start="483:13" pos:end="483:15"><name pos:start="483:13" pos:end="483:13">x</name><operator pos:start="483:14" pos:end="483:14">=</operator><literal type="number" pos:start="483:15" pos:end="483:15">1</literal></expr>;</init> <condition pos:start="483:18" pos:end="483:21"><expr pos:start="483:18" pos:end="483:20"><name pos:start="483:18" pos:end="483:18">x</name><operator pos:start="483:19" pos:end="483:19">&lt;</operator><literal type="number" pos:start="483:20" pos:end="483:20">9</literal></expr>;</condition> <incr pos:start="483:23" pos:end="483:25"><expr pos:start="483:23" pos:end="483:25"><name pos:start="483:23" pos:end="483:23">x</name><operator pos:start="483:24" pos:end="483:25">++</operator></expr></incr>)</control><block pos:start="483:27" pos:end="491:9">{<block_content pos:start="485:13" pos:end="489:33">

            <expr_stmt pos:start="485:13" pos:end="485:16"><expr pos:start="485:13" pos:end="485:15"><name pos:start="485:13" pos:end="485:13">p</name><operator pos:start="485:14" pos:end="485:15">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="487:13" pos:end="487:33"><if pos:start="487:13" pos:end="487:33">if<condition pos:start="487:15" pos:end="487:24">(<expr pos:start="487:16" pos:end="487:23"><operator pos:start="487:16" pos:end="487:16">*</operator><name pos:start="487:17" pos:end="487:17">p</name> <operator pos:start="487:19" pos:end="487:19">&gt;</operator> <name pos:start="487:21" pos:end="487:23">max</name></expr>)</condition><block type="pseudo" pos:start="487:26" pos:end="487:33"><block_content pos:start="487:26" pos:end="487:33"> <expr_stmt pos:start="487:26" pos:end="487:33"><expr pos:start="487:26" pos:end="487:32"><name pos:start="487:26" pos:end="487:28">max</name><operator pos:start="487:29" pos:end="487:29">=</operator> <operator pos:start="487:31" pos:end="487:31">*</operator><name pos:start="487:32" pos:end="487:32">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="489:13" pos:end="489:33"><if pos:start="489:13" pos:end="489:33">if<condition pos:start="489:15" pos:end="489:24">(<expr pos:start="489:16" pos:end="489:23"><operator pos:start="489:16" pos:end="489:16">*</operator><name pos:start="489:17" pos:end="489:17">p</name> <operator pos:start="489:19" pos:end="489:19">&lt;</operator> <name pos:start="489:21" pos:end="489:23">min</name></expr>)</condition><block type="pseudo" pos:start="489:26" pos:end="489:33"><block_content pos:start="489:26" pos:end="489:33"> <expr_stmt pos:start="489:26" pos:end="489:33"><expr pos:start="489:26" pos:end="489:32"><name pos:start="489:26" pos:end="489:28">min</name><operator pos:start="489:29" pos:end="489:29">=</operator> <operator pos:start="489:31" pos:end="489:31">*</operator><name pos:start="489:32" pos:end="489:32">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <expr_stmt pos:start="495:5" pos:end="495:28"><expr pos:start="495:5" pos:end="495:27"><name pos:start="495:5" pos:end="495:7">avg</name><operator pos:start="495:8" pos:end="495:8">=</operator> <operator pos:start="495:10" pos:end="495:10">(</operator><name pos:start="495:11" pos:end="495:13">min</name> <operator pos:start="495:15" pos:end="495:15">+</operator> <name pos:start="495:17" pos:end="495:19">max</name> <operator pos:start="495:21" pos:end="495:21">+</operator> <literal type="number" pos:start="495:23" pos:end="495:23">1</literal><operator pos:start="495:24" pos:end="495:24">)</operator><operator pos:start="495:25" pos:end="495:26">&gt;&gt;</operator><literal type="number" pos:start="495:27" pos:end="495:27">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="499:5" pos:end="499:42"><if pos:start="499:5" pos:end="499:42">if<condition pos:start="499:7" pos:end="499:34">(<expr pos:start="499:8" pos:end="499:33"><name pos:start="499:8" pos:end="499:10">max</name> <operator pos:start="499:12" pos:end="499:12">-</operator> <name pos:start="499:14" pos:end="499:16">min</name> <operator pos:start="499:18" pos:end="499:18">&lt;</operator><name pos:start="499:19" pos:end="499:33">deringThreshold</name></expr>)</condition><block type="pseudo" pos:start="499:36" pos:end="499:42"><block_content pos:start="499:36" pos:end="499:42"> <return pos:start="499:36" pos:end="499:42">return;</return></block_content></block></if></if_stmt>



    <for pos:start="503:5" pos:end="537:5">for<control pos:start="503:8" pos:end="503:23">(<init pos:start="503:9" pos:end="503:12"><expr pos:start="503:9" pos:end="503:11"><name pos:start="503:9" pos:end="503:9">y</name><operator pos:start="503:10" pos:end="503:10">=</operator><literal type="number" pos:start="503:11" pos:end="503:11">0</literal></expr>;</init> <condition pos:start="503:14" pos:end="503:18"><expr pos:start="503:14" pos:end="503:17"><name pos:start="503:14" pos:end="503:14">y</name><operator pos:start="503:15" pos:end="503:15">&lt;</operator><literal type="number" pos:start="503:16" pos:end="503:17">10</literal></expr>;</condition> <incr pos:start="503:20" pos:end="503:22"><expr pos:start="503:20" pos:end="503:22"><name pos:start="503:20" pos:end="503:20">y</name><operator pos:start="503:21" pos:end="503:22">++</operator></expr></incr>)</control><block pos:start="503:24" pos:end="537:5">{<block_content pos:start="505:9" pos:end="535:17">

        <decl_stmt pos:start="505:9" pos:end="505:18"><decl pos:start="505:9" pos:end="505:17"><type pos:start="505:9" pos:end="505:11"><name pos:start="505:9" pos:end="505:11">int</name></type> <name pos:start="505:13" pos:end="505:13">t</name> <init pos:start="505:15" pos:end="505:17">= <expr pos:start="505:17" pos:end="505:17"><literal type="number" pos:start="505:17" pos:end="505:17">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="509:9" pos:end="509:42"><if pos:start="509:9" pos:end="509:42">if<condition pos:start="509:11" pos:end="509:35">(<expr pos:start="509:12" pos:end="509:34"><name pos:start="509:12" pos:end="509:28"><name pos:start="509:12" pos:end="509:14">src</name><index pos:start="509:15" pos:end="509:28">[<expr pos:start="509:16" pos:end="509:27"><name pos:start="509:16" pos:end="509:21">stride</name><operator pos:start="509:22" pos:end="509:22">*</operator><name pos:start="509:23" pos:end="509:23">y</name> <operator pos:start="509:25" pos:end="509:25">+</operator> <literal type="number" pos:start="509:27" pos:end="509:27">0</literal></expr>]</index></name> <operator pos:start="509:30" pos:end="509:30">&gt;</operator> <name pos:start="509:32" pos:end="509:34">avg</name></expr>)</condition><block type="pseudo" pos:start="509:37" pos:end="509:42"><block_content pos:start="509:37" pos:end="509:42"> <expr_stmt pos:start="509:37" pos:end="509:42"><expr pos:start="509:37" pos:end="509:41"><name pos:start="509:37" pos:end="509:37">t</name><operator pos:start="509:38" pos:end="509:39">+=</operator> <literal type="number" pos:start="509:41" pos:end="509:41">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="511:9" pos:end="511:42"><if pos:start="511:9" pos:end="511:42">if<condition pos:start="511:11" pos:end="511:35">(<expr pos:start="511:12" pos:end="511:34"><name pos:start="511:12" pos:end="511:28"><name pos:start="511:12" pos:end="511:14">src</name><index pos:start="511:15" pos:end="511:28">[<expr pos:start="511:16" pos:end="511:27"><name pos:start="511:16" pos:end="511:21">stride</name><operator pos:start="511:22" pos:end="511:22">*</operator><name pos:start="511:23" pos:end="511:23">y</name> <operator pos:start="511:25" pos:end="511:25">+</operator> <literal type="number" pos:start="511:27" pos:end="511:27">1</literal></expr>]</index></name> <operator pos:start="511:30" pos:end="511:30">&gt;</operator> <name pos:start="511:32" pos:end="511:34">avg</name></expr>)</condition><block type="pseudo" pos:start="511:37" pos:end="511:42"><block_content pos:start="511:37" pos:end="511:42"> <expr_stmt pos:start="511:37" pos:end="511:42"><expr pos:start="511:37" pos:end="511:41"><name pos:start="511:37" pos:end="511:37">t</name><operator pos:start="511:38" pos:end="511:39">+=</operator> <literal type="number" pos:start="511:41" pos:end="511:41">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="513:9" pos:end="513:42"><if pos:start="513:9" pos:end="513:42">if<condition pos:start="513:11" pos:end="513:35">(<expr pos:start="513:12" pos:end="513:34"><name pos:start="513:12" pos:end="513:28"><name pos:start="513:12" pos:end="513:14">src</name><index pos:start="513:15" pos:end="513:28">[<expr pos:start="513:16" pos:end="513:27"><name pos:start="513:16" pos:end="513:21">stride</name><operator pos:start="513:22" pos:end="513:22">*</operator><name pos:start="513:23" pos:end="513:23">y</name> <operator pos:start="513:25" pos:end="513:25">+</operator> <literal type="number" pos:start="513:27" pos:end="513:27">2</literal></expr>]</index></name> <operator pos:start="513:30" pos:end="513:30">&gt;</operator> <name pos:start="513:32" pos:end="513:34">avg</name></expr>)</condition><block type="pseudo" pos:start="513:37" pos:end="513:42"><block_content pos:start="513:37" pos:end="513:42"> <expr_stmt pos:start="513:37" pos:end="513:42"><expr pos:start="513:37" pos:end="513:41"><name pos:start="513:37" pos:end="513:37">t</name><operator pos:start="513:38" pos:end="513:39">+=</operator> <literal type="number" pos:start="513:41" pos:end="513:41">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="515:9" pos:end="515:42"><if pos:start="515:9" pos:end="515:42">if<condition pos:start="515:11" pos:end="515:35">(<expr pos:start="515:12" pos:end="515:34"><name pos:start="515:12" pos:end="515:28"><name pos:start="515:12" pos:end="515:14">src</name><index pos:start="515:15" pos:end="515:28">[<expr pos:start="515:16" pos:end="515:27"><name pos:start="515:16" pos:end="515:21">stride</name><operator pos:start="515:22" pos:end="515:22">*</operator><name pos:start="515:23" pos:end="515:23">y</name> <operator pos:start="515:25" pos:end="515:25">+</operator> <literal type="number" pos:start="515:27" pos:end="515:27">3</literal></expr>]</index></name> <operator pos:start="515:30" pos:end="515:30">&gt;</operator> <name pos:start="515:32" pos:end="515:34">avg</name></expr>)</condition><block type="pseudo" pos:start="515:37" pos:end="515:42"><block_content pos:start="515:37" pos:end="515:42"> <expr_stmt pos:start="515:37" pos:end="515:42"><expr pos:start="515:37" pos:end="515:41"><name pos:start="515:37" pos:end="515:37">t</name><operator pos:start="515:38" pos:end="515:39">+=</operator> <literal type="number" pos:start="515:41" pos:end="515:41">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="517:9" pos:end="517:43"><if pos:start="517:9" pos:end="517:43">if<condition pos:start="517:11" pos:end="517:35">(<expr pos:start="517:12" pos:end="517:34"><name pos:start="517:12" pos:end="517:28"><name pos:start="517:12" pos:end="517:14">src</name><index pos:start="517:15" pos:end="517:28">[<expr pos:start="517:16" pos:end="517:27"><name pos:start="517:16" pos:end="517:21">stride</name><operator pos:start="517:22" pos:end="517:22">*</operator><name pos:start="517:23" pos:end="517:23">y</name> <operator pos:start="517:25" pos:end="517:25">+</operator> <literal type="number" pos:start="517:27" pos:end="517:27">4</literal></expr>]</index></name> <operator pos:start="517:30" pos:end="517:30">&gt;</operator> <name pos:start="517:32" pos:end="517:34">avg</name></expr>)</condition><block type="pseudo" pos:start="517:37" pos:end="517:43"><block_content pos:start="517:37" pos:end="517:43"> <expr_stmt pos:start="517:37" pos:end="517:43"><expr pos:start="517:37" pos:end="517:42"><name pos:start="517:37" pos:end="517:37">t</name><operator pos:start="517:38" pos:end="517:39">+=</operator> <literal type="number" pos:start="517:41" pos:end="517:42">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="519:9" pos:end="519:43"><if pos:start="519:9" pos:end="519:43">if<condition pos:start="519:11" pos:end="519:35">(<expr pos:start="519:12" pos:end="519:34"><name pos:start="519:12" pos:end="519:28"><name pos:start="519:12" pos:end="519:14">src</name><index pos:start="519:15" pos:end="519:28">[<expr pos:start="519:16" pos:end="519:27"><name pos:start="519:16" pos:end="519:21">stride</name><operator pos:start="519:22" pos:end="519:22">*</operator><name pos:start="519:23" pos:end="519:23">y</name> <operator pos:start="519:25" pos:end="519:25">+</operator> <literal type="number" pos:start="519:27" pos:end="519:27">5</literal></expr>]</index></name> <operator pos:start="519:30" pos:end="519:30">&gt;</operator> <name pos:start="519:32" pos:end="519:34">avg</name></expr>)</condition><block type="pseudo" pos:start="519:37" pos:end="519:43"><block_content pos:start="519:37" pos:end="519:43"> <expr_stmt pos:start="519:37" pos:end="519:43"><expr pos:start="519:37" pos:end="519:42"><name pos:start="519:37" pos:end="519:37">t</name><operator pos:start="519:38" pos:end="519:39">+=</operator> <literal type="number" pos:start="519:41" pos:end="519:42">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="521:9" pos:end="521:43"><if pos:start="521:9" pos:end="521:43">if<condition pos:start="521:11" pos:end="521:35">(<expr pos:start="521:12" pos:end="521:34"><name pos:start="521:12" pos:end="521:28"><name pos:start="521:12" pos:end="521:14">src</name><index pos:start="521:15" pos:end="521:28">[<expr pos:start="521:16" pos:end="521:27"><name pos:start="521:16" pos:end="521:21">stride</name><operator pos:start="521:22" pos:end="521:22">*</operator><name pos:start="521:23" pos:end="521:23">y</name> <operator pos:start="521:25" pos:end="521:25">+</operator> <literal type="number" pos:start="521:27" pos:end="521:27">6</literal></expr>]</index></name> <operator pos:start="521:30" pos:end="521:30">&gt;</operator> <name pos:start="521:32" pos:end="521:34">avg</name></expr>)</condition><block type="pseudo" pos:start="521:37" pos:end="521:43"><block_content pos:start="521:37" pos:end="521:43"> <expr_stmt pos:start="521:37" pos:end="521:43"><expr pos:start="521:37" pos:end="521:42"><name pos:start="521:37" pos:end="521:37">t</name><operator pos:start="521:38" pos:end="521:39">+=</operator> <literal type="number" pos:start="521:41" pos:end="521:42">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="523:9" pos:end="523:44"><if pos:start="523:9" pos:end="523:44">if<condition pos:start="523:11" pos:end="523:35">(<expr pos:start="523:12" pos:end="523:34"><name pos:start="523:12" pos:end="523:28"><name pos:start="523:12" pos:end="523:14">src</name><index pos:start="523:15" pos:end="523:28">[<expr pos:start="523:16" pos:end="523:27"><name pos:start="523:16" pos:end="523:21">stride</name><operator pos:start="523:22" pos:end="523:22">*</operator><name pos:start="523:23" pos:end="523:23">y</name> <operator pos:start="523:25" pos:end="523:25">+</operator> <literal type="number" pos:start="523:27" pos:end="523:27">7</literal></expr>]</index></name> <operator pos:start="523:30" pos:end="523:30">&gt;</operator> <name pos:start="523:32" pos:end="523:34">avg</name></expr>)</condition><block type="pseudo" pos:start="523:37" pos:end="523:44"><block_content pos:start="523:37" pos:end="523:44"> <expr_stmt pos:start="523:37" pos:end="523:44"><expr pos:start="523:37" pos:end="523:43"><name pos:start="523:37" pos:end="523:37">t</name><operator pos:start="523:38" pos:end="523:39">+=</operator> <literal type="number" pos:start="523:41" pos:end="523:43">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="525:9" pos:end="525:44"><if pos:start="525:9" pos:end="525:44">if<condition pos:start="525:11" pos:end="525:35">(<expr pos:start="525:12" pos:end="525:34"><name pos:start="525:12" pos:end="525:28"><name pos:start="525:12" pos:end="525:14">src</name><index pos:start="525:15" pos:end="525:28">[<expr pos:start="525:16" pos:end="525:27"><name pos:start="525:16" pos:end="525:21">stride</name><operator pos:start="525:22" pos:end="525:22">*</operator><name pos:start="525:23" pos:end="525:23">y</name> <operator pos:start="525:25" pos:end="525:25">+</operator> <literal type="number" pos:start="525:27" pos:end="525:27">8</literal></expr>]</index></name> <operator pos:start="525:30" pos:end="525:30">&gt;</operator> <name pos:start="525:32" pos:end="525:34">avg</name></expr>)</condition><block type="pseudo" pos:start="525:37" pos:end="525:44"><block_content pos:start="525:37" pos:end="525:44"> <expr_stmt pos:start="525:37" pos:end="525:44"><expr pos:start="525:37" pos:end="525:43"><name pos:start="525:37" pos:end="525:37">t</name><operator pos:start="525:38" pos:end="525:39">+=</operator> <literal type="number" pos:start="525:41" pos:end="525:43">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="527:9" pos:end="527:44"><if pos:start="527:9" pos:end="527:44">if<condition pos:start="527:11" pos:end="527:35">(<expr pos:start="527:12" pos:end="527:34"><name pos:start="527:12" pos:end="527:28"><name pos:start="527:12" pos:end="527:14">src</name><index pos:start="527:15" pos:end="527:28">[<expr pos:start="527:16" pos:end="527:27"><name pos:start="527:16" pos:end="527:21">stride</name><operator pos:start="527:22" pos:end="527:22">*</operator><name pos:start="527:23" pos:end="527:23">y</name> <operator pos:start="527:25" pos:end="527:25">+</operator> <literal type="number" pos:start="527:27" pos:end="527:27">9</literal></expr>]</index></name> <operator pos:start="527:30" pos:end="527:30">&gt;</operator> <name pos:start="527:32" pos:end="527:34">avg</name></expr>)</condition><block type="pseudo" pos:start="527:37" pos:end="527:44"><block_content pos:start="527:37" pos:end="527:44"> <expr_stmt pos:start="527:37" pos:end="527:44"><expr pos:start="527:37" pos:end="527:43"><name pos:start="527:37" pos:end="527:37">t</name><operator pos:start="527:38" pos:end="527:39">+=</operator> <literal type="number" pos:start="527:41" pos:end="527:43">512</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="531:9" pos:end="531:22"><expr pos:start="531:9" pos:end="531:21"><name pos:start="531:9" pos:end="531:9">t</name> <operator pos:start="531:11" pos:end="531:12">|=</operator> <operator pos:start="531:14" pos:end="531:14">(</operator><operator pos:start="531:15" pos:end="531:15">~</operator><name pos:start="531:16" pos:end="531:16">t</name><operator pos:start="531:17" pos:end="531:17">)</operator><operator pos:start="531:18" pos:end="531:19">&lt;&lt;</operator><literal type="number" pos:start="531:20" pos:end="531:21">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="533:9" pos:end="533:29"><expr pos:start="533:9" pos:end="533:28"><name pos:start="533:9" pos:end="533:9">t</name> <operator pos:start="533:11" pos:end="533:12">&amp;=</operator> <operator pos:start="533:14" pos:end="533:14">(</operator><name pos:start="533:15" pos:end="533:15">t</name><operator pos:start="533:16" pos:end="533:17">&lt;&lt;</operator><literal type="number" pos:start="533:18" pos:end="533:18">1</literal><operator pos:start="533:19" pos:end="533:19">)</operator> <operator pos:start="533:21" pos:end="533:21">&amp;</operator> <operator pos:start="533:23" pos:end="533:23">(</operator><name pos:start="533:24" pos:end="533:24">t</name><operator pos:start="533:25" pos:end="533:26">&gt;&gt;</operator><literal type="number" pos:start="533:27" pos:end="533:27">1</literal><operator pos:start="533:28" pos:end="533:28">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="535:9" pos:end="535:17"><expr pos:start="535:9" pos:end="535:16"><name pos:start="535:9" pos:end="535:12"><name pos:start="535:9" pos:end="535:9">s</name><index pos:start="535:10" pos:end="535:12">[<expr pos:start="535:11" pos:end="535:11"><name pos:start="535:11" pos:end="535:11">y</name></expr>]</index></name> <operator pos:start="535:14" pos:end="535:14">=</operator> <name pos:start="535:16" pos:end="535:16">t</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="541:5" pos:end="549:5">for<control pos:start="541:8" pos:end="541:22">(<init pos:start="541:9" pos:end="541:12"><expr pos:start="541:9" pos:end="541:11"><name pos:start="541:9" pos:end="541:9">y</name><operator pos:start="541:10" pos:end="541:10">=</operator><literal type="number" pos:start="541:11" pos:end="541:11">1</literal></expr>;</init> <condition pos:start="541:14" pos:end="541:17"><expr pos:start="541:14" pos:end="541:16"><name pos:start="541:14" pos:end="541:14">y</name><operator pos:start="541:15" pos:end="541:15">&lt;</operator><literal type="number" pos:start="541:16" pos:end="541:16">9</literal></expr>;</condition> <incr pos:start="541:19" pos:end="541:21"><expr pos:start="541:19" pos:end="541:21"><name pos:start="541:19" pos:end="541:19">y</name><operator pos:start="541:20" pos:end="541:21">++</operator></expr></incr>)</control><block pos:start="541:23" pos:end="549:5">{<block_content pos:start="543:9" pos:end="547:18">

        <decl_stmt pos:start="543:9" pos:end="543:39"><decl pos:start="543:9" pos:end="543:38"><type pos:start="543:9" pos:end="543:11"><name pos:start="543:9" pos:end="543:11">int</name></type> <name pos:start="543:13" pos:end="543:13">t</name> <init pos:start="543:15" pos:end="543:38">= <expr pos:start="543:17" pos:end="543:38"><name pos:start="543:17" pos:end="543:22"><name pos:start="543:17" pos:end="543:17">s</name><index pos:start="543:18" pos:end="543:22">[<expr pos:start="543:19" pos:end="543:21"><name pos:start="543:19" pos:end="543:19">y</name><operator pos:start="543:20" pos:end="543:20">-</operator><literal type="number" pos:start="543:21" pos:end="543:21">1</literal></expr>]</index></name> <operator pos:start="543:24" pos:end="543:24">&amp;</operator> <name pos:start="543:26" pos:end="543:29"><name pos:start="543:26" pos:end="543:26">s</name><index pos:start="543:27" pos:end="543:29">[<expr pos:start="543:28" pos:end="543:28"><name pos:start="543:28" pos:end="543:28">y</name></expr>]</index></name> <operator pos:start="543:31" pos:end="543:31">&amp;</operator> <name pos:start="543:33" pos:end="543:38"><name pos:start="543:33" pos:end="543:33">s</name><index pos:start="543:34" pos:end="543:38">[<expr pos:start="543:35" pos:end="543:37"><name pos:start="543:35" pos:end="543:35">y</name><operator pos:start="543:36" pos:end="543:36">+</operator><literal type="number" pos:start="543:37" pos:end="543:37">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="545:9" pos:end="545:18"><expr pos:start="545:9" pos:end="545:17"><name pos:start="545:9" pos:end="545:9">t</name><operator pos:start="545:10" pos:end="545:11">|=</operator> <name pos:start="545:13" pos:end="545:13">t</name><operator pos:start="545:14" pos:end="545:15">&gt;&gt;</operator><literal type="number" pos:start="545:16" pos:end="545:17">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="547:9" pos:end="547:18"><expr pos:start="547:9" pos:end="547:17"><name pos:start="547:9" pos:end="547:14"><name pos:start="547:9" pos:end="547:9">s</name><index pos:start="547:10" pos:end="547:14">[<expr pos:start="547:11" pos:end="547:13"><name pos:start="547:11" pos:end="547:11">y</name><operator pos:start="547:12" pos:end="547:12">-</operator><literal type="number" pos:start="547:13" pos:end="547:13">1</literal></expr>]</index></name><operator pos:start="547:15" pos:end="547:15">=</operator> <name pos:start="547:17" pos:end="547:17">t</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="553:5" pos:end="666:0">for<control pos:start="553:8" pos:end="553:22">(<init pos:start="553:9" pos:end="553:12"><expr pos:start="553:9" pos:end="553:11"><name pos:start="553:9" pos:end="553:9">y</name><operator pos:start="553:10" pos:end="553:10">=</operator><literal type="number" pos:start="553:11" pos:end="553:11">1</literal></expr>;</init> <condition pos:start="553:14" pos:end="553:17"><expr pos:start="553:14" pos:end="553:16"><name pos:start="553:14" pos:end="553:14">y</name><operator pos:start="553:15" pos:end="553:15">&lt;</operator><literal type="number" pos:start="553:16" pos:end="553:16">9</literal></expr>;</condition> <incr pos:start="553:19" pos:end="553:21"><expr pos:start="553:19" pos:end="553:21"><name pos:start="553:19" pos:end="553:19">y</name><operator pos:start="553:20" pos:end="553:21">++</operator></expr></incr>)</control><block pos:start="553:23" pos:end="666:0">{<block_content pos:start="555:9" pos:end="661:9">

        <decl_stmt pos:start="555:9" pos:end="555:14"><decl pos:start="555:9" pos:end="555:13"><type pos:start="555:9" pos:end="555:11"><name pos:start="555:9" pos:end="555:11">int</name></type> <name pos:start="555:13" pos:end="555:13">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="557:9" pos:end="557:23"><decl pos:start="557:9" pos:end="557:22"><type pos:start="557:9" pos:end="557:11"><name pos:start="557:9" pos:end="557:11">int</name></type> <name pos:start="557:13" pos:end="557:13">t</name> <init pos:start="557:15" pos:end="557:22">= <expr pos:start="557:17" pos:end="557:22"><name pos:start="557:17" pos:end="557:22"><name pos:start="557:17" pos:end="557:17">s</name><index pos:start="557:18" pos:end="557:22">[<expr pos:start="557:19" pos:end="557:21"><name pos:start="557:19" pos:end="557:19">y</name><operator pos:start="557:20" pos:end="557:20">-</operator><literal type="number" pos:start="557:21" pos:end="557:21">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="561:9" pos:end="561:26"><expr pos:start="561:9" pos:end="561:25"><name pos:start="561:9" pos:end="561:9">p</name><operator pos:start="561:10" pos:end="561:10">=</operator> <name pos:start="561:12" pos:end="561:14">src</name> <operator pos:start="561:16" pos:end="561:16">+</operator> <name pos:start="561:18" pos:end="561:23">stride</name><operator pos:start="561:24" pos:end="561:24">*</operator><name pos:start="561:25" pos:end="561:25">y</name></expr>;</expr_stmt>

        <for pos:start="563:9" pos:end="661:9">for<control pos:start="563:12" pos:end="563:26">(<init pos:start="563:13" pos:end="563:16"><expr pos:start="563:13" pos:end="563:15"><name pos:start="563:13" pos:end="563:13">x</name><operator pos:start="563:14" pos:end="563:14">=</operator><literal type="number" pos:start="563:15" pos:end="563:15">1</literal></expr>;</init> <condition pos:start="563:18" pos:end="563:21"><expr pos:start="563:18" pos:end="563:20"><name pos:start="563:18" pos:end="563:18">x</name><operator pos:start="563:19" pos:end="563:19">&lt;</operator><literal type="number" pos:start="563:20" pos:end="563:20">9</literal></expr>;</condition> <incr pos:start="563:23" pos:end="563:25"><expr pos:start="563:23" pos:end="563:25"><name pos:start="563:23" pos:end="563:23">x</name><operator pos:start="563:24" pos:end="563:25">++</operator></expr></incr>)</control><block pos:start="563:27" pos:end="661:9">{<block_content pos:start="565:13" pos:end="659:13">

            <expr_stmt pos:start="565:13" pos:end="565:16"><expr pos:start="565:13" pos:end="565:15"><name pos:start="565:13" pos:end="565:13">p</name><operator pos:start="565:14" pos:end="565:15">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="567:13" pos:end="659:13"><if pos:start="567:13" pos:end="659:13">if<condition pos:start="567:15" pos:end="567:26">(<expr pos:start="567:16" pos:end="567:25"><name pos:start="567:16" pos:end="567:16">t</name> <operator pos:start="567:18" pos:end="567:18">&amp;</operator> <operator pos:start="567:20" pos:end="567:20">(</operator><literal type="number" pos:start="567:21" pos:end="567:21">1</literal><operator pos:start="567:22" pos:end="567:23">&lt;&lt;</operator><name pos:start="567:24" pos:end="567:24">x</name><operator pos:start="567:25" pos:end="567:25">)</operator></expr>)</condition><block pos:start="567:27" pos:end="659:13">{<block_content pos:start="569:17" pos:end="657:30">

                <decl_stmt pos:start="569:17" pos:end="573:75"><decl pos:start="569:17" pos:end="573:74"><type pos:start="569:17" pos:end="569:19"><name pos:start="569:17" pos:end="569:19">int</name></type> <name pos:start="569:21" pos:end="569:21">f</name><init pos:start="569:22" pos:end="573:74">= <expr pos:start="569:24" pos:end="573:74"><operator pos:start="569:24" pos:end="569:24">(</operator><operator pos:start="569:25" pos:end="569:25">*</operator><operator pos:start="569:26" pos:end="569:26">(</operator><name pos:start="569:27" pos:end="569:27">p</name><operator pos:start="569:28" pos:end="569:28">-</operator><name pos:start="569:29" pos:end="569:34">stride</name><operator pos:start="569:35" pos:end="569:35">-</operator><literal type="number" pos:start="569:36" pos:end="569:36">1</literal><operator pos:start="569:37" pos:end="569:37">)</operator><operator pos:start="569:38" pos:end="569:38">)</operator> <operator pos:start="569:40" pos:end="569:40">+</operator> <literal type="number" pos:start="569:42" pos:end="569:42">2</literal><operator pos:start="569:43" pos:end="569:43">*</operator><operator pos:start="569:44" pos:end="569:44">(</operator><operator pos:start="569:45" pos:end="569:45">*</operator><operator pos:start="569:46" pos:end="569:46">(</operator><name pos:start="569:47" pos:end="569:47">p</name><operator pos:start="569:48" pos:end="569:48">-</operator><name pos:start="569:49" pos:end="569:54">stride</name><operator pos:start="569:55" pos:end="569:55">)</operator><operator pos:start="569:56" pos:end="569:56">)</operator> <operator pos:start="569:58" pos:end="569:58">+</operator> <operator pos:start="569:60" pos:end="569:60">(</operator><operator pos:start="569:61" pos:end="569:61">*</operator><operator pos:start="569:62" pos:end="569:62">(</operator><name pos:start="569:63" pos:end="569:63">p</name><operator pos:start="569:64" pos:end="569:64">-</operator><name pos:start="569:65" pos:end="569:70">stride</name><operator pos:start="569:71" pos:end="569:71">+</operator><literal type="number" pos:start="569:72" pos:end="569:72">1</literal><operator pos:start="569:73" pos:end="569:73">)</operator><operator pos:start="569:74" pos:end="569:74">)</operator>

                      <operator pos:start="571:23" pos:end="571:23">+</operator><literal type="number" pos:start="571:24" pos:end="571:24">2</literal><operator pos:start="571:25" pos:end="571:25">*</operator><operator pos:start="571:26" pos:end="571:26">(</operator><operator pos:start="571:27" pos:end="571:27">*</operator><operator pos:start="571:28" pos:end="571:28">(</operator><name pos:start="571:29" pos:end="571:29">p</name>     <operator pos:start="571:35" pos:end="571:35">-</operator><literal type="number" pos:start="571:36" pos:end="571:36">1</literal><operator pos:start="571:37" pos:end="571:37">)</operator><operator pos:start="571:38" pos:end="571:38">)</operator> <operator pos:start="571:40" pos:end="571:40">+</operator> <literal type="number" pos:start="571:42" pos:end="571:42">4</literal><operator pos:start="571:43" pos:end="571:43">*</operator><operator pos:start="571:44" pos:end="571:44">(</operator><operator pos:start="571:45" pos:end="571:45">*</operator><name pos:start="571:46" pos:end="571:46">p</name>         <operator pos:start="571:56" pos:end="571:56">)</operator> <operator pos:start="571:58" pos:end="571:58">+</operator> <literal type="number" pos:start="571:60" pos:end="571:60">2</literal><operator pos:start="571:61" pos:end="571:61">*</operator><operator pos:start="571:62" pos:end="571:62">(</operator><operator pos:start="571:63" pos:end="571:63">*</operator><operator pos:start="571:64" pos:end="571:64">(</operator><name pos:start="571:65" pos:end="571:65">p</name>     <operator pos:start="571:71" pos:end="571:71">+</operator><literal type="number" pos:start="571:72" pos:end="571:72">1</literal><operator pos:start="571:73" pos:end="571:73">)</operator><operator pos:start="571:74" pos:end="571:74">)</operator>

                      <operator pos:start="573:23" pos:end="573:23">+</operator><operator pos:start="573:24" pos:end="573:24">(</operator><operator pos:start="573:25" pos:end="573:25">*</operator><operator pos:start="573:26" pos:end="573:26">(</operator><name pos:start="573:27" pos:end="573:27">p</name><operator pos:start="573:28" pos:end="573:28">+</operator><name pos:start="573:29" pos:end="573:34">stride</name><operator pos:start="573:35" pos:end="573:35">-</operator><literal type="number" pos:start="573:36" pos:end="573:36">1</literal><operator pos:start="573:37" pos:end="573:37">)</operator><operator pos:start="573:38" pos:end="573:38">)</operator> <operator pos:start="573:40" pos:end="573:40">+</operator> <literal type="number" pos:start="573:42" pos:end="573:42">2</literal><operator pos:start="573:43" pos:end="573:43">*</operator><operator pos:start="573:44" pos:end="573:44">(</operator><operator pos:start="573:45" pos:end="573:45">*</operator><operator pos:start="573:46" pos:end="573:46">(</operator><name pos:start="573:47" pos:end="573:47">p</name><operator pos:start="573:48" pos:end="573:48">+</operator><name pos:start="573:49" pos:end="573:54">stride</name><operator pos:start="573:55" pos:end="573:55">)</operator><operator pos:start="573:56" pos:end="573:56">)</operator> <operator pos:start="573:58" pos:end="573:58">+</operator> <operator pos:start="573:60" pos:end="573:60">(</operator><operator pos:start="573:61" pos:end="573:61">*</operator><operator pos:start="573:62" pos:end="573:62">(</operator><name pos:start="573:63" pos:end="573:63">p</name><operator pos:start="573:64" pos:end="573:64">+</operator><name pos:start="573:65" pos:end="573:70">stride</name><operator pos:start="573:71" pos:end="573:71">+</operator><literal type="number" pos:start="573:72" pos:end="573:72">1</literal><operator pos:start="573:73" pos:end="573:73">)</operator><operator pos:start="573:74" pos:end="573:74">)</operator></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="575:17" pos:end="580:0"><expr pos:start="575:17" pos:end="575:29"><name pos:start="575:17" pos:end="575:17">f</name><operator pos:start="575:18" pos:end="575:18">=</operator> <operator pos:start="575:20" pos:end="575:20">(</operator><name pos:start="575:21" pos:end="575:21">f</name> <operator pos:start="575:23" pos:end="575:23">+</operator> <literal type="number" pos:start="575:25" pos:end="575:25">8</literal><operator pos:start="575:26" pos:end="575:26">)</operator><operator pos:start="575:27" pos:end="575:28">&gt;&gt;</operator><literal type="number" pos:start="575:29" pos:end="575:29">4</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="579:1" pos:end="579:29">#<cpp:directive pos:start="579:2" pos:end="579:6">ifdef</cpp:directive> <name pos:start="579:8" pos:end="579:29">DEBUG_DERING_THRESHOLD</name></cpp:ifdef>

                    <asm pos:start="581:21" pos:end="581:50">__asm__ <specifier pos:start="581:29" pos:end="581:36">volatile</specifier>("emms\n\t":);</asm>

                    <block pos:start="583:21" pos:end="652:0">{<block_content pos:start="585:21" pos:end="647:21">

                    <decl_stmt pos:start="585:21" pos:end="585:49"><decl pos:start="585:21" pos:end="585:48"><type pos:start="585:21" pos:end="585:36"><specifier pos:start="585:21" pos:end="585:26">static</specifier> <name pos:start="585:28" pos:end="585:31">long</name> <name pos:start="585:33" pos:end="585:36">long</name></type> <name pos:start="585:38" pos:end="585:46">numPixels</name><init pos:start="585:47" pos:end="585:48">=<expr pos:start="585:48" pos:end="585:48"><literal type="number" pos:start="585:48" pos:end="585:48">0</literal></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="587:21" pos:end="587:65"><if pos:start="587:21" pos:end="587:65">if<condition pos:start="587:23" pos:end="587:52">(<expr pos:start="587:24" pos:end="587:51"><name pos:start="587:24" pos:end="587:24">x</name><operator pos:start="587:25" pos:end="587:26">!=</operator><literal type="number" pos:start="587:27" pos:end="587:27">1</literal> <operator pos:start="587:29" pos:end="587:30">&amp;&amp;</operator> <name pos:start="587:32" pos:end="587:32">x</name><operator pos:start="587:33" pos:end="587:34">!=</operator><literal type="number" pos:start="587:35" pos:end="587:35">8</literal> <operator pos:start="587:37" pos:end="587:38">&amp;&amp;</operator> <name pos:start="587:40" pos:end="587:40">y</name><operator pos:start="587:41" pos:end="587:42">!=</operator><literal type="number" pos:start="587:43" pos:end="587:43">1</literal> <operator pos:start="587:45" pos:end="587:46">&amp;&amp;</operator> <name pos:start="587:48" pos:end="587:48">y</name><operator pos:start="587:49" pos:end="587:50">!=</operator><literal type="number" pos:start="587:51" pos:end="587:51">8</literal></expr>)</condition><block type="pseudo" pos:start="587:54" pos:end="587:65"><block_content pos:start="587:54" pos:end="587:65"> <expr_stmt pos:start="587:54" pos:end="587:65"><expr pos:start="587:54" pos:end="587:64"><name pos:start="587:54" pos:end="587:62">numPixels</name><operator pos:start="587:63" pos:end="587:64">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line" pos:start="589:1" pos:end="589:58">//                    if((max-min)&lt;20 || (max-min)*QP&lt;200)</comment>

<comment type="line" pos:start="591:1" pos:end="591:44">//                    if((max-min)*QP &lt; 500)</comment>

<comment type="line" pos:start="593:1" pos:end="593:38">//                    if(max-min&lt;QP/2)</comment>

                    <if_stmt pos:start="595:21" pos:end="647:21"><if pos:start="595:21" pos:end="647:21">if<condition pos:start="595:23" pos:end="595:36">(<expr pos:start="595:24" pos:end="595:35"><name pos:start="595:24" pos:end="595:26">max</name><operator pos:start="595:27" pos:end="595:27">-</operator><name pos:start="595:28" pos:end="595:30">min</name> <operator pos:start="595:32" pos:end="595:32">&lt;</operator> <literal type="number" pos:start="595:34" pos:end="595:35">20</literal></expr>)</condition><block pos:start="595:37" pos:end="647:21">{<block_content pos:start="597:25" pos:end="645:25">

                        <decl_stmt pos:start="597:25" pos:end="597:48"><decl pos:start="597:25" pos:end="597:47"><type pos:start="597:25" pos:end="597:34"><specifier pos:start="597:25" pos:end="597:30">static</specifier> <name pos:start="597:32" pos:end="597:34">int</name></type> <name pos:start="597:36" pos:end="597:45">numSkipped</name><init pos:start="597:46" pos:end="597:47">=<expr pos:start="597:47" pos:end="597:47"><literal type="number" pos:start="597:47" pos:end="597:47">0</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="599:25" pos:end="599:46"><decl pos:start="599:25" pos:end="599:45"><type pos:start="599:25" pos:end="599:34"><specifier pos:start="599:25" pos:end="599:30">static</specifier> <name pos:start="599:32" pos:end="599:34">int</name></type> <name pos:start="599:36" pos:end="599:43">errorSum</name><init pos:start="599:44" pos:end="599:45">=<expr pos:start="599:45" pos:end="599:45"><literal type="number" pos:start="599:45" pos:end="599:45">0</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="601:25" pos:end="601:45"><decl pos:start="601:25" pos:end="601:44"><type pos:start="601:25" pos:end="601:34"><specifier pos:start="601:25" pos:end="601:30">static</specifier> <name pos:start="601:32" pos:end="601:34">int</name></type> <name pos:start="601:36" pos:end="601:42">worstQP</name><init pos:start="601:43" pos:end="601:44">=<expr pos:start="601:44" pos:end="601:44"><literal type="number" pos:start="601:44" pos:end="601:44">0</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="603:25" pos:end="603:48"><decl pos:start="603:25" pos:end="603:47"><type pos:start="603:25" pos:end="603:34"><specifier pos:start="603:25" pos:end="603:30">static</specifier> <name pos:start="603:32" pos:end="603:34">int</name></type> <name pos:start="603:36" pos:end="603:45">worstRange</name><init pos:start="603:46" pos:end="603:47">=<expr pos:start="603:47" pos:end="603:47"><literal type="number" pos:start="603:47" pos:end="603:47">0</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="605:25" pos:end="605:47"><decl pos:start="605:25" pos:end="605:46"><type pos:start="605:25" pos:end="605:34"><specifier pos:start="605:25" pos:end="605:30">static</specifier> <name pos:start="605:32" pos:end="605:34">int</name></type> <name pos:start="605:36" pos:end="605:44">worstDiff</name><init pos:start="605:45" pos:end="605:46">=<expr pos:start="605:46" pos:end="605:46"><literal type="number" pos:start="605:46" pos:end="605:46">0</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="607:25" pos:end="607:43"><decl pos:start="607:25" pos:end="607:42"><type pos:start="607:25" pos:end="607:27"><name pos:start="607:25" pos:end="607:27">int</name></type> <name pos:start="607:29" pos:end="607:32">diff</name><init pos:start="607:33" pos:end="607:42">= <expr pos:start="607:35" pos:end="607:42"><operator pos:start="607:35" pos:end="607:35">(</operator><name pos:start="607:36" pos:end="607:36">f</name> <operator pos:start="607:38" pos:end="607:38">-</operator> <operator pos:start="607:40" pos:end="607:40">*</operator><name pos:start="607:41" pos:end="607:41">p</name><operator pos:start="607:42" pos:end="607:42">)</operator></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="609:25" pos:end="609:49"><decl pos:start="609:25" pos:end="609:48"><type pos:start="609:25" pos:end="609:27"><name pos:start="609:25" pos:end="609:27">int</name></type> <name pos:start="609:29" pos:end="609:35">absDiff</name><init pos:start="609:36" pos:end="609:48">= <expr pos:start="609:38" pos:end="609:48"><call pos:start="609:38" pos:end="609:48"><name pos:start="609:38" pos:end="609:42">FFABS</name><argument_list pos:start="609:43" pos:end="609:48">(<argument pos:start="609:44" pos:end="609:47"><expr pos:start="609:44" pos:end="609:47"><name pos:start="609:44" pos:end="609:47">diff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="611:25" pos:end="611:45"><decl pos:start="611:25" pos:end="611:44"><type pos:start="611:25" pos:end="611:27"><name pos:start="611:25" pos:end="611:27">int</name></type> <name pos:start="611:29" pos:end="611:33">error</name><init pos:start="611:34" pos:end="611:44">= <expr pos:start="611:36" pos:end="611:44"><name pos:start="611:36" pos:end="611:39">diff</name><operator pos:start="611:40" pos:end="611:40">*</operator><name pos:start="611:41" pos:end="611:44">diff</name></expr></init></decl>;</decl_stmt>



                        <if_stmt pos:start="615:25" pos:end="615:66"><if pos:start="615:25" pos:end="615:66">if<condition pos:start="615:27" pos:end="615:56">(<expr pos:start="615:28" pos:end="615:55"><name pos:start="615:28" pos:end="615:28">x</name><operator pos:start="615:29" pos:end="615:30">==</operator><literal type="number" pos:start="615:31" pos:end="615:31">1</literal> <operator pos:start="615:33" pos:end="615:34">||</operator> <name pos:start="615:36" pos:end="615:36">x</name><operator pos:start="615:37" pos:end="615:38">==</operator><literal type="number" pos:start="615:39" pos:end="615:39">8</literal> <operator pos:start="615:41" pos:end="615:42">||</operator> <name pos:start="615:44" pos:end="615:44">y</name><operator pos:start="615:45" pos:end="615:46">==</operator><literal type="number" pos:start="615:47" pos:end="615:47">1</literal> <operator pos:start="615:49" pos:end="615:50">||</operator> <name pos:start="615:52" pos:end="615:52">y</name><operator pos:start="615:53" pos:end="615:54">==</operator><literal type="number" pos:start="615:55" pos:end="615:55">8</literal></expr>)</condition><block type="pseudo" pos:start="615:58" pos:end="615:66"><block_content pos:start="615:58" pos:end="615:66"> <continue pos:start="615:58" pos:end="615:66">continue;</continue></block_content></block></if></if_stmt>



                        <expr_stmt pos:start="619:25" pos:end="619:37"><expr pos:start="619:25" pos:end="619:36"><name pos:start="619:25" pos:end="619:34">numSkipped</name><operator pos:start="619:35" pos:end="619:36">++</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="621:25" pos:end="629:25"><if pos:start="621:25" pos:end="629:25">if<condition pos:start="621:27" pos:end="621:47">(<expr pos:start="621:28" pos:end="621:46"><name pos:start="621:28" pos:end="621:34">absDiff</name> <operator pos:start="621:36" pos:end="621:36">&gt;</operator> <name pos:start="621:38" pos:end="621:46">worstDiff</name></expr>)</condition><block pos:start="621:48" pos:end="629:25">{<block_content pos:start="623:29" pos:end="627:48">

                            <expr_stmt pos:start="623:29" pos:end="623:47"><expr pos:start="623:29" pos:end="623:46"><name pos:start="623:29" pos:end="623:37">worstDiff</name><operator pos:start="623:38" pos:end="623:38">=</operator> <name pos:start="623:40" pos:end="623:46">absDiff</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="625:29" pos:end="625:40"><expr pos:start="625:29" pos:end="625:39"><name pos:start="625:29" pos:end="625:35">worstQP</name><operator pos:start="625:36" pos:end="625:36">=</operator> <name pos:start="625:38" pos:end="625:39">QP</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="627:29" pos:end="627:48"><expr pos:start="627:29" pos:end="627:47"><name pos:start="627:29" pos:end="627:38">worstRange</name><operator pos:start="627:39" pos:end="627:39">=</operator> <name pos:start="627:41" pos:end="627:43">max</name><operator pos:start="627:44" pos:end="627:44">-</operator><name pos:start="627:45" pos:end="627:47">min</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="631:25" pos:end="631:41"><expr pos:start="631:25" pos:end="631:40"><name pos:start="631:25" pos:end="631:32">errorSum</name><operator pos:start="631:33" pos:end="631:34">+=</operator> <name pos:start="631:36" pos:end="631:40">error</name></expr>;</expr_stmt>



                        <if_stmt pos:start="635:25" pos:end="645:25"><if pos:start="635:25" pos:end="645:25">if<condition pos:start="635:27" pos:end="635:66">(<expr pos:start="635:28" pos:end="635:65"><literal type="number" pos:start="635:28" pos:end="635:33">1024LL</literal><operator pos:start="635:34" pos:end="635:34">*</operator><literal type="number" pos:start="635:35" pos:end="635:40">1024LL</literal><operator pos:start="635:41" pos:end="635:41">*</operator><literal type="number" pos:start="635:42" pos:end="635:47">1024LL</literal> <operator pos:start="635:49" pos:end="635:49">%</operator> <name pos:start="635:51" pos:end="635:60">numSkipped</name> <operator pos:start="635:62" pos:end="635:63">==</operator> <literal type="number" pos:start="635:65" pos:end="635:65">0</literal></expr>)</condition><block pos:start="635:67" pos:end="645:25">{<block_content pos:start="637:29" pos:end="643:75">

                            <expr_stmt pos:start="637:29" pos:end="643:75"><expr pos:start="637:29" pos:end="643:74"><call pos:start="637:29" pos:end="643:74"><name pos:start="637:29" pos:end="637:34">av_log</name><argument_list pos:start="637:35" pos:end="643:74">(<argument pos:start="637:36" pos:end="637:36"><expr pos:start="637:36" pos:end="637:36"><name pos:start="637:36" pos:end="637:36">c</name></expr></argument>, <argument pos:start="637:39" pos:end="637:49"><expr pos:start="637:39" pos:end="637:49"><name pos:start="637:39" pos:end="637:49">AV_LOG_INFO</name></expr></argument>, <argument pos:start="637:52" pos:end="639:73"><expr pos:start="637:52" pos:end="639:73"><literal type="string" pos:start="637:52" pos:end="637:81">"sum:%1.3f, skip:%d, wQP:%d, "</literal>

                                   <literal type="string" pos:start="639:36" pos:end="639:73">"wRange:%d, wDiff:%d, relSkip:%1.3f\n"</literal></expr></argument>,

                                   <argument pos:start="641:36" pos:end="641:61"><expr pos:start="641:36" pos:end="641:61"><operator pos:start="641:36" pos:end="641:36">(</operator><name pos:start="641:37" pos:end="641:41">float</name><operator pos:start="641:42" pos:end="641:42">)</operator><name pos:start="641:43" pos:end="641:50">errorSum</name><operator pos:start="641:51" pos:end="641:51">/</operator><name pos:start="641:52" pos:end="641:61">numSkipped</name></expr></argument>, <argument pos:start="641:64" pos:end="641:73"><expr pos:start="641:64" pos:end="641:73"><name pos:start="641:64" pos:end="641:73">numSkipped</name></expr></argument>, <argument pos:start="641:76" pos:end="641:82"><expr pos:start="641:76" pos:end="641:82"><name pos:start="641:76" pos:end="641:82">worstQP</name></expr></argument>, <argument pos:start="641:85" pos:end="641:94"><expr pos:start="641:85" pos:end="641:94"><name pos:start="641:85" pos:end="641:94">worstRange</name></expr></argument>,

                                   <argument pos:start="643:36" pos:end="643:44"><expr pos:start="643:36" pos:end="643:44"><name pos:start="643:36" pos:end="643:44">worstDiff</name></expr></argument>, <argument pos:start="643:47" pos:end="643:73"><expr pos:start="643:47" pos:end="643:73"><operator pos:start="643:47" pos:end="643:47">(</operator><name pos:start="643:48" pos:end="643:52">float</name><operator pos:start="643:53" pos:end="643:53">)</operator><name pos:start="643:54" pos:end="643:63">numSkipped</name><operator pos:start="643:64" pos:end="643:64">/</operator><name pos:start="643:65" pos:end="643:73">numPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    </block_content>}</block>

<cpp:endif pos:start="651:1" pos:end="651:6">#<cpp:directive pos:start="651:2" pos:end="651:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="653:21" pos:end="657:30"><if pos:start="653:21" pos:end="653:55">if     <condition pos:start="653:28" pos:end="653:41">(<expr pos:start="653:29" pos:end="653:40"><operator pos:start="653:29" pos:end="653:29">*</operator><name pos:start="653:30" pos:end="653:30">p</name> <operator pos:start="653:32" pos:end="653:32">+</operator> <name pos:start="653:34" pos:end="653:36">QP2</name> <operator pos:start="653:38" pos:end="653:38">&lt;</operator> <name pos:start="653:40" pos:end="653:40">f</name></expr>)</condition><block type="pseudo" pos:start="653:43" pos:end="653:55"><block_content pos:start="653:43" pos:end="653:55"> <expr_stmt pos:start="653:43" pos:end="653:55"><expr pos:start="653:43" pos:end="653:54"><operator pos:start="653:43" pos:end="653:43">*</operator><name pos:start="653:44" pos:end="653:44">p</name><operator pos:start="653:45" pos:end="653:45">=</operator> <operator pos:start="653:47" pos:end="653:47">*</operator><name pos:start="653:48" pos:end="653:48">p</name> <operator pos:start="653:50" pos:end="653:50">+</operator> <name pos:start="653:52" pos:end="653:54">QP2</name></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="655:21" pos:end="655:55">else if<condition pos:start="655:28" pos:end="655:41">(<expr pos:start="655:29" pos:end="655:40"><operator pos:start="655:29" pos:end="655:29">*</operator><name pos:start="655:30" pos:end="655:30">p</name> <operator pos:start="655:32" pos:end="655:32">-</operator> <name pos:start="655:34" pos:end="655:36">QP2</name> <operator pos:start="655:38" pos:end="655:38">&gt;</operator> <name pos:start="655:40" pos:end="655:40">f</name></expr>)</condition><block type="pseudo" pos:start="655:43" pos:end="655:55"><block_content pos:start="655:43" pos:end="655:55"> <expr_stmt pos:start="655:43" pos:end="655:55"><expr pos:start="655:43" pos:end="655:54"><operator pos:start="655:43" pos:end="655:43">*</operator><name pos:start="655:44" pos:end="655:44">p</name><operator pos:start="655:45" pos:end="655:45">=</operator> <operator pos:start="655:47" pos:end="655:47">*</operator><name pos:start="655:48" pos:end="655:48">p</name> <operator pos:start="655:50" pos:end="655:50">-</operator> <name pos:start="655:52" pos:end="655:54">QP2</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="657:21" pos:end="657:30">else<block type="pseudo" pos:start="657:26" pos:end="657:30"><block_content pos:start="657:26" pos:end="657:30"> <expr_stmt pos:start="657:26" pos:end="657:30"><expr pos:start="657:26" pos:end="657:29"><operator pos:start="657:26" pos:end="657:26">*</operator><name pos:start="657:27" pos:end="657:27">p</name><operator pos:start="657:28" pos:end="657:28">=</operator><name pos:start="657:29" pos:end="657:29">f</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

<cpp:ifdef pos:start="665:1" pos:end="665:29">#<cpp:directive pos:start="665:2" pos:end="665:6">ifdef</cpp:directive> <name pos:start="665:8" pos:end="665:29">DEBUG_DERING_THRESHOLD</name></cpp:ifdef>

    <if_stmt pos:start="667:5" pos:end="694:0"><if pos:start="667:5" pos:end="694:0">if<condition pos:start="667:7" pos:end="667:20">(<expr pos:start="667:8" pos:end="667:19"><name pos:start="667:8" pos:end="667:10">max</name><operator pos:start="667:11" pos:end="667:11">-</operator><name pos:start="667:12" pos:end="667:14">min</name> <operator pos:start="667:16" pos:end="667:16">&lt;</operator> <literal type="number" pos:start="667:18" pos:end="667:19">20</literal></expr>)</condition><block pos:start="667:21" pos:end="694:0">{<block_content pos:start="669:9" pos:end="685:9">

        <for pos:start="669:9" pos:end="685:9">for<control pos:start="669:12" pos:end="669:26">(<init pos:start="669:13" pos:end="669:16"><expr pos:start="669:13" pos:end="669:15"><name pos:start="669:13" pos:end="669:13">y</name><operator pos:start="669:14" pos:end="669:14">=</operator><literal type="number" pos:start="669:15" pos:end="669:15">1</literal></expr>;</init> <condition pos:start="669:18" pos:end="669:21"><expr pos:start="669:18" pos:end="669:20"><name pos:start="669:18" pos:end="669:18">y</name><operator pos:start="669:19" pos:end="669:19">&lt;</operator><literal type="number" pos:start="669:20" pos:end="669:20">9</literal></expr>;</condition> <incr pos:start="669:23" pos:end="669:25"><expr pos:start="669:23" pos:end="669:25"><name pos:start="669:23" pos:end="669:23">y</name><operator pos:start="669:24" pos:end="669:25">++</operator></expr></incr>)</control><block pos:start="669:27" pos:end="685:9">{<block_content pos:start="671:13" pos:end="683:13">

            <decl_stmt pos:start="671:13" pos:end="671:18"><decl pos:start="671:13" pos:end="671:17"><type pos:start="671:13" pos:end="671:15"><name pos:start="671:13" pos:end="671:15">int</name></type> <name pos:start="671:17" pos:end="671:17">x</name></decl>;</decl_stmt>

            <decl_stmt pos:start="673:13" pos:end="673:22"><decl pos:start="673:13" pos:end="673:21"><type pos:start="673:13" pos:end="673:15"><name pos:start="673:13" pos:end="673:15">int</name></type> <name pos:start="673:17" pos:end="673:17">t</name> <init pos:start="673:19" pos:end="673:21">= <expr pos:start="673:21" pos:end="673:21"><literal type="number" pos:start="673:21" pos:end="673:21">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="675:13" pos:end="675:30"><expr pos:start="675:13" pos:end="675:29"><name pos:start="675:13" pos:end="675:13">p</name><operator pos:start="675:14" pos:end="675:14">=</operator> <name pos:start="675:16" pos:end="675:18">src</name> <operator pos:start="675:20" pos:end="675:20">+</operator> <name pos:start="675:22" pos:end="675:27">stride</name><operator pos:start="675:28" pos:end="675:28">*</operator><name pos:start="675:29" pos:end="675:29">y</name></expr>;</expr_stmt>

            <for pos:start="677:13" pos:end="683:13">for<control pos:start="677:16" pos:end="677:30">(<init pos:start="677:17" pos:end="677:20"><expr pos:start="677:17" pos:end="677:19"><name pos:start="677:17" pos:end="677:17">x</name><operator pos:start="677:18" pos:end="677:18">=</operator><literal type="number" pos:start="677:19" pos:end="677:19">1</literal></expr>;</init> <condition pos:start="677:22" pos:end="677:25"><expr pos:start="677:22" pos:end="677:24"><name pos:start="677:22" pos:end="677:22">x</name><operator pos:start="677:23" pos:end="677:23">&lt;</operator><literal type="number" pos:start="677:24" pos:end="677:24">9</literal></expr>;</condition> <incr pos:start="677:27" pos:end="677:29"><expr pos:start="677:27" pos:end="677:29"><name pos:start="677:27" pos:end="677:27">x</name><operator pos:start="677:28" pos:end="677:29">++</operator></expr></incr>)</control><block pos:start="677:31" pos:end="683:13">{<block_content pos:start="679:17" pos:end="681:41">

                <expr_stmt pos:start="679:17" pos:end="679:20"><expr pos:start="679:17" pos:end="679:19"><name pos:start="679:17" pos:end="679:17">p</name><operator pos:start="679:18" pos:end="679:19">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="681:17" pos:end="681:41"><expr pos:start="681:17" pos:end="681:40"><operator pos:start="681:17" pos:end="681:17">*</operator><name pos:start="681:18" pos:end="681:18">p</name> <operator pos:start="681:20" pos:end="681:20">=</operator> <call pos:start="681:22" pos:end="681:40"><name pos:start="681:22" pos:end="681:26">FFMIN</name><argument_list pos:start="681:27" pos:end="681:40">(<argument pos:start="681:28" pos:end="681:34"><expr pos:start="681:28" pos:end="681:34"><operator pos:start="681:28" pos:end="681:28">*</operator><name pos:start="681:29" pos:end="681:29">p</name> <operator pos:start="681:31" pos:end="681:31">+</operator> <literal type="number" pos:start="681:33" pos:end="681:34">20</literal></expr></argument>, <argument pos:start="681:37" pos:end="681:39"><expr pos:start="681:37" pos:end="681:39"><literal type="number" pos:start="681:37" pos:end="681:39">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

<comment type="line" pos:start="687:1" pos:end="687:62">//        src[0] = src[7]=src[stride*7]=src[stride*7 + 7]=255;</comment>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="691:1" pos:end="691:6">#<cpp:directive pos:start="691:2" pos:end="691:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="693:1" pos:end="693:6">#<cpp:directive pos:start="693:2" pos:end="693:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="693:8" pos:end="693:48">//TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW</comment>

</block_content>}</block></function>
</unit>
