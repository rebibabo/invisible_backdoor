<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24846.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:41">openpic_cpu_read_internal</name><parameter_list pos:start="1:42" pos:end="3:50">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:67"><decl pos:start="1:57" pos:end="1:67"><type pos:start="1:57" pos:end="1:67"><name pos:start="1:57" pos:end="1:62">hwaddr</name></type> <name pos:start="1:64" pos:end="1:67">addr</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:49"><decl pos:start="3:43" pos:end="3:49"><type pos:start="3:43" pos:end="3:49"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:49">idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="155:1">{<block_content pos:start="7:5" pos:end="153:18">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">openpic_t</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">opp</name> <init pos:start="7:20" pos:end="7:27">= <expr pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">IRQ_src_t</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">IRQ_dst_t</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">retval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">n_IRQ</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:73"><expr pos:start="19:5" pos:end="19:72"><call pos:start="19:5" pos:end="19:72"><name pos:start="19:5" pos:end="19:11">DPRINTF</name><argument_list pos:start="19:12" pos:end="19:72">(<argument pos:start="19:13" pos:end="19:50"><expr pos:start="19:13" pos:end="19:50"><literal type="string" pos:start="19:13" pos:end="19:30">"%s: cpu %d addr "</literal> <name pos:start="19:32" pos:end="19:45">TARGET_FMT_plx</name> <literal type="string" pos:start="19:47" pos:end="19:50">"\n"</literal></expr></argument>, <argument pos:start="19:53" pos:end="19:60"><expr pos:start="19:53" pos:end="19:60"><name pos:start="19:53" pos:end="19:60">__func__</name></expr></argument>, <argument pos:start="19:63" pos:end="19:65"><expr pos:start="19:63" pos:end="19:65"><name pos:start="19:63" pos:end="19:65">idx</name></expr></argument>, <argument pos:start="19:68" pos:end="19:71"><expr pos:start="19:68" pos:end="19:71"><name pos:start="19:68" pos:end="19:71">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:10">retval</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:23">0xFFFFFFFF</literal></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:22"><if pos:start="23:5" pos:end="25:22">if <condition pos:start="23:8" pos:end="23:19">(<expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:12">addr</name> <operator pos:start="23:14" pos:end="23:14">&amp;</operator> <literal type="number" pos:start="23:16" pos:end="23:18">0xF</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:22"><block_content pos:start="25:9" pos:end="25:22">

        <return pos:start="25:9" pos:end="25:22">return <expr pos:start="25:16" pos:end="25:21"><name pos:start="25:16" pos:end="25:21">retval</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:7">dst</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <operator pos:start="27:11" pos:end="27:11">&amp;</operator><name pos:start="27:12" pos:end="27:24"><name pos:start="27:12" pos:end="27:14">opp</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:19">dst</name><index pos:start="27:20" pos:end="27:24">[<expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">idx</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:18"><expr pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:8">addr</name> <operator pos:start="29:10" pos:end="29:11">&amp;=</operator> <literal type="number" pos:start="29:13" pos:end="29:17">0xFF0</literal></expr>;</expr_stmt>

    <switch pos:start="31:5" pos:end="147:5">switch <condition pos:start="31:12" pos:end="31:17">(<expr pos:start="31:13" pos:end="31:16"><name pos:start="31:13" pos:end="31:16">addr</name></expr>)</condition> <block pos:start="31:19" pos:end="147:5">{<block_content pos:start="33:5" pos:end="145:14">

    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><literal type="number" pos:start="33:10" pos:end="33:13">0x00</literal></expr>:</case> <comment type="block" pos:start="33:16" pos:end="33:52">/* Block Revision Register1 (BRR1) */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:63"><expr pos:start="35:9" pos:end="35:62"><name pos:start="35:9" pos:end="35:14">retval</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:30">FSL_BRR1_IPID</name> <operator pos:start="35:32" pos:end="35:32">|</operator> <name pos:start="35:34" pos:end="35:46">FSL_BRR1_IPMJ</name> <operator pos:start="35:48" pos:end="35:48">|</operator> <name pos:start="35:50" pos:end="35:62">FSL_BRR1_IPMN</name></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:14">case <expr pos:start="39:10" pos:end="39:13"><literal type="number" pos:start="39:10" pos:end="39:13">0x80</literal></expr>:</case> <comment type="block" pos:start="39:16" pos:end="39:25">/* PCTP */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:14">retval</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:26"><name pos:start="41:18" pos:end="41:20">dst</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:26">pctp</name></name></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:14">case <expr pos:start="45:10" pos:end="45:13"><literal type="number" pos:start="45:10" pos:end="45:13">0x90</literal></expr>:</case> <comment type="block" pos:start="45:16" pos:end="45:27">/* WHOAMI */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:21"><expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:14">retval</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:20">idx</name></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:14">case <expr pos:start="51:10" pos:end="51:13"><literal type="number" pos:start="51:10" pos:end="51:13">0xA0</literal></expr>:</case> <comment type="block" pos:start="51:16" pos:end="51:25">/* PIAC */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:46"><expr pos:start="53:9" pos:end="53:45"><call pos:start="53:9" pos:end="53:45"><name pos:start="53:9" pos:end="53:15">DPRINTF</name><argument_list pos:start="53:16" pos:end="53:45">(<argument pos:start="53:17" pos:end="53:44"><expr pos:start="53:17" pos:end="53:44"><literal type="string" pos:start="53:17" pos:end="53:44">"Lower OpenPIC INT output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:54"><expr pos:start="55:9" pos:end="55:53"><call pos:start="55:9" pos:end="55:53"><name pos:start="55:9" pos:end="55:22">qemu_irq_lower</name><argument_list pos:start="55:23" pos:end="55:53">(<argument pos:start="55:24" pos:end="55:52"><expr pos:start="55:24" pos:end="55:52"><name pos:start="55:24" pos:end="55:52"><name pos:start="55:24" pos:end="55:26">dst</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:32">irqs</name><index pos:start="55:33" pos:end="55:52">[<expr pos:start="55:34" pos:end="55:51"><name pos:start="55:34" pos:end="55:51">OPENPIC_OUTPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:48"><expr pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:13">n_IRQ</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:47"><name pos:start="57:17" pos:end="57:28">IRQ_get_next</name><argument_list pos:start="57:29" pos:end="57:47">(<argument pos:start="57:30" pos:end="57:32"><expr pos:start="57:30" pos:end="57:32"><name pos:start="57:30" pos:end="57:32">opp</name></expr></argument>, <argument pos:start="57:35" pos:end="57:46"><expr pos:start="57:35" pos:end="57:46"><operator pos:start="57:35" pos:end="57:35">&amp;</operator><name pos:start="57:36" pos:end="57:46"><name pos:start="57:36" pos:end="57:38">dst</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:46">raised</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:41"><expr pos:start="59:9" pos:end="59:40"><call pos:start="59:9" pos:end="59:40"><name pos:start="59:9" pos:end="59:15">DPRINTF</name><argument_list pos:start="59:16" pos:end="59:40">(<argument pos:start="59:17" pos:end="59:32"><expr pos:start="59:17" pos:end="59:32"><literal type="string" pos:start="59:17" pos:end="59:32">"PIAC: irq=%d\n"</literal></expr></argument>, <argument pos:start="59:35" pos:end="59:39"><expr pos:start="59:35" pos:end="59:39"><name pos:start="59:35" pos:end="59:39">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="133:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:24">(<expr pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:17">n_IRQ</name> <operator pos:start="61:19" pos:end="61:20">==</operator> <operator pos:start="61:22" pos:end="61:22">-</operator><literal type="number" pos:start="61:23" pos:end="61:23">1</literal></expr>)</condition> <block pos:start="61:26" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:44">

            <comment type="block" pos:start="63:13" pos:end="63:43">/* No more interrupt pending */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:44"><expr pos:start="65:13" pos:end="65:43"><name pos:start="65:13" pos:end="65:18">retval</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:43"><name pos:start="65:22" pos:end="65:32">IPVP_VECTOR</name><argument_list pos:start="65:33" pos:end="65:43">(<argument pos:start="65:34" pos:end="65:42"><expr pos:start="65:34" pos:end="65:42"><name pos:start="65:34" pos:end="65:42"><name pos:start="65:34" pos:end="65:36">opp</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:42">spve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="133:9">else <block pos:start="67:16" pos:end="133:9">{<block_content pos:start="69:13" pos:end="131:13">

            <expr_stmt pos:start="69:13" pos:end="69:35"><expr pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:15">src</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <operator pos:start="69:19" pos:end="69:19">&amp;</operator><name pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:22">opp</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:27">src</name><index pos:start="69:28" pos:end="69:34">[<expr pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:33">n_IRQ</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="95:13"><if pos:start="71:13" pos:end="87:13">if <condition pos:start="71:16" pos:end="73:56">(<expr pos:start="71:17" pos:end="73:55"><operator pos:start="71:17" pos:end="71:17">!</operator><call pos:start="71:18" pos:end="71:52"><name pos:start="71:18" pos:end="71:25">test_bit</name><argument_list pos:start="71:26" pos:end="71:52">(<argument pos:start="71:27" pos:end="71:36"><expr pos:start="71:27" pos:end="71:36"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:36"><name pos:start="71:28" pos:end="71:30">src</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:36">ipvp</name></name></expr></argument>, <argument pos:start="71:39" pos:end="71:51"><expr pos:start="71:39" pos:end="71:51"><name pos:start="71:39" pos:end="71:51">IPVP_ACTIVITY</name></expr></argument>)</argument_list></call> <operator pos:start="71:54" pos:end="71:55">||</operator>

                <operator pos:start="73:17" pos:end="73:17">!</operator><operator pos:start="73:18" pos:end="73:18">(</operator><call pos:start="73:19" pos:end="73:42"><name pos:start="73:19" pos:end="73:31">IPVP_PRIORITY</name><argument_list pos:start="73:32" pos:end="73:42">(<argument pos:start="73:33" pos:end="73:41"><expr pos:start="73:33" pos:end="73:41"><name pos:start="73:33" pos:end="73:41"><name pos:start="73:33" pos:end="73:35">src</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:41">ipvp</name></name></expr></argument>)</argument_list></call> <operator pos:start="73:44" pos:end="73:44">&gt;</operator> <name pos:start="73:46" pos:end="73:54"><name pos:start="73:46" pos:end="73:48">dst</name><operator pos:start="73:49" pos:end="73:50">-&gt;</operator><name pos:start="73:51" pos:end="73:54">pctp</name></name><operator pos:start="73:55" pos:end="73:55">)</operator></expr>)</condition> <block pos:start="73:58" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:48">

                <comment type="block" pos:start="75:17" pos:end="81:19">/* - Spurious level-sensitive IRQ

                 * - Priorities has been changed

                 *   and the pending IRQ isn't allowed anymore

                 */</comment>

                <expr_stmt pos:start="83:17" pos:end="83:53"><expr pos:start="83:17" pos:end="83:52"><call pos:start="83:17" pos:end="83:52"><name pos:start="83:17" pos:end="83:25">reset_bit</name><argument_list pos:start="83:26" pos:end="83:52">(<argument pos:start="83:27" pos:end="83:36"><expr pos:start="83:27" pos:end="83:36"><operator pos:start="83:27" pos:end="83:27">&amp;</operator><name pos:start="83:28" pos:end="83:36"><name pos:start="83:28" pos:end="83:30">src</name><operator pos:start="83:31" pos:end="83:32">-&gt;</operator><name pos:start="83:33" pos:end="83:36">ipvp</name></name></expr></argument>, <argument pos:start="83:39" pos:end="83:51"><expr pos:start="83:39" pos:end="83:51"><name pos:start="83:39" pos:end="83:51">IPVP_ACTIVITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:48"><expr pos:start="85:17" pos:end="85:47"><name pos:start="85:17" pos:end="85:22">retval</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <call pos:start="85:26" pos:end="85:47"><name pos:start="85:26" pos:end="85:36">IPVP_VECTOR</name><argument_list pos:start="85:37" pos:end="85:47">(<argument pos:start="85:38" pos:end="85:46"><expr pos:start="85:38" pos:end="85:46"><name pos:start="85:38" pos:end="85:46"><name pos:start="85:38" pos:end="85:40">opp</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:46">spve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="87:15" pos:end="95:13">else <block pos:start="87:20" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:48">

                <comment type="block" pos:start="89:17" pos:end="89:47">/* IRQ enter servicing state */</comment>

                <expr_stmt pos:start="91:17" pos:end="91:51"><expr pos:start="91:17" pos:end="91:50"><call pos:start="91:17" pos:end="91:50"><name pos:start="91:17" pos:end="91:26">IRQ_setbit</name><argument_list pos:start="91:27" pos:end="91:50">(<argument pos:start="91:28" pos:end="91:42"><expr pos:start="91:28" pos:end="91:42"><operator pos:start="91:28" pos:end="91:28">&amp;</operator><name pos:start="91:29" pos:end="91:42"><name pos:start="91:29" pos:end="91:31">dst</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:42">servicing</name></name></expr></argument>, <argument pos:start="91:45" pos:end="91:49"><expr pos:start="91:45" pos:end="91:49"><name pos:start="91:45" pos:end="91:49">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:48"><expr pos:start="93:17" pos:end="93:47"><name pos:start="93:17" pos:end="93:22">retval</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <call pos:start="93:26" pos:end="93:47"><name pos:start="93:26" pos:end="93:36">IPVP_VECTOR</name><argument_list pos:start="93:37" pos:end="93:47">(<argument pos:start="93:38" pos:end="93:46"><expr pos:start="93:38" pos:end="93:46"><name pos:start="93:38" pos:end="93:46"><name pos:start="93:38" pos:end="93:40">src</name><operator pos:start="93:41" pos:end="93:42">-&gt;</operator><name pos:start="93:43" pos:end="93:46">ipvp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:46"><expr pos:start="97:13" pos:end="97:45"><call pos:start="97:13" pos:end="97:45"><name pos:start="97:13" pos:end="97:24">IRQ_resetbit</name><argument_list pos:start="97:25" pos:end="97:45">(<argument pos:start="97:26" pos:end="97:37"><expr pos:start="97:26" pos:end="97:37"><operator pos:start="97:26" pos:end="97:26">&amp;</operator><name pos:start="97:27" pos:end="97:37"><name pos:start="97:27" pos:end="97:29">dst</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:37">raised</name></name></expr></argument>, <argument pos:start="97:40" pos:end="97:44"><expr pos:start="97:40" pos:end="97:44"><name pos:start="97:40" pos:end="97:44">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:34"><expr pos:start="99:13" pos:end="99:33"><name pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:15">dst</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:23">raised</name><operator pos:start="99:24" pos:end="99:24">.</operator><name pos:start="99:25" pos:end="99:28">next</name></name> <operator pos:start="99:30" pos:end="99:30">=</operator> <operator pos:start="99:32" pos:end="99:32">-</operator><literal type="number" pos:start="99:33" pos:end="99:33">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="109:13"><if pos:start="101:13" pos:end="109:13">if <condition pos:start="101:16" pos:end="101:50">(<expr pos:start="101:17" pos:end="101:49"><operator pos:start="101:17" pos:end="101:17">!</operator><call pos:start="101:18" pos:end="101:49"><name pos:start="101:18" pos:end="101:25">test_bit</name><argument_list pos:start="101:26" pos:end="101:49">(<argument pos:start="101:27" pos:end="101:36"><expr pos:start="101:27" pos:end="101:36"><operator pos:start="101:27" pos:end="101:27">&amp;</operator><name pos:start="101:28" pos:end="101:36"><name pos:start="101:28" pos:end="101:30">src</name><operator pos:start="101:31" pos:end="101:32">-&gt;</operator><name pos:start="101:33" pos:end="101:36">ipvp</name></name></expr></argument>, <argument pos:start="101:39" pos:end="101:48"><expr pos:start="101:39" pos:end="101:48"><name pos:start="101:39" pos:end="101:48">IPVP_SENSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:52" pos:end="109:13">{<block_content pos:start="105:17" pos:end="107:33">

                <comment type="block" pos:start="103:17" pos:end="103:40">/* edge-sensitive IRQ */</comment>

                <expr_stmt pos:start="105:17" pos:end="105:53"><expr pos:start="105:17" pos:end="105:52"><call pos:start="105:17" pos:end="105:52"><name pos:start="105:17" pos:end="105:25">reset_bit</name><argument_list pos:start="105:26" pos:end="105:52">(<argument pos:start="105:27" pos:end="105:36"><expr pos:start="105:27" pos:end="105:36"><operator pos:start="105:27" pos:end="105:27">&amp;</operator><name pos:start="105:28" pos:end="105:36"><name pos:start="105:28" pos:end="105:30">src</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:36">ipvp</name></name></expr></argument>, <argument pos:start="105:39" pos:end="105:51"><expr pos:start="105:39" pos:end="105:51"><name pos:start="105:39" pos:end="105:51">IPVP_ACTIVITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:33"><expr pos:start="107:17" pos:end="107:32"><name pos:start="107:17" pos:end="107:28"><name pos:start="107:17" pos:end="107:19">src</name><operator pos:start="107:20" pos:end="107:21">-&gt;</operator><name pos:start="107:22" pos:end="107:28">pending</name></name> <operator pos:start="107:30" pos:end="107:30">=</operator> <literal type="number" pos:start="107:32" pos:end="107:32">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="113:13" pos:end="131:13"><if pos:start="113:13" pos:end="131:13">if <condition pos:start="113:16" pos:end="113:81">(<expr pos:start="113:17" pos:end="113:80"><operator pos:start="113:17" pos:end="113:17">(</operator><name pos:start="113:18" pos:end="113:22">n_IRQ</name> <operator pos:start="113:24" pos:end="113:25">&gt;=</operator> <name pos:start="113:27" pos:end="113:39"><name pos:start="113:27" pos:end="113:29">opp</name><operator pos:start="113:30" pos:end="113:31">-&gt;</operator><name pos:start="113:32" pos:end="113:39">irq_ipi0</name></name><operator pos:start="113:40" pos:end="113:40">)</operator> <operator pos:start="113:42" pos:end="113:43">&amp;&amp;</operator>  <operator pos:start="113:46" pos:end="113:46">(</operator><name pos:start="113:47" pos:end="113:51">n_IRQ</name> <operator pos:start="113:53" pos:end="113:53">&lt;</operator> <operator pos:start="113:55" pos:end="113:55">(</operator><name pos:start="113:56" pos:end="113:68"><name pos:start="113:56" pos:end="113:58">opp</name><operator pos:start="113:59" pos:end="113:60">-&gt;</operator><name pos:start="113:61" pos:end="113:68">irq_ipi0</name></name> <operator pos:start="113:70" pos:end="113:70">+</operator> <name pos:start="113:72" pos:end="113:78">MAX_IPI</name><operator pos:start="113:79" pos:end="113:79">)</operator><operator pos:start="113:80" pos:end="113:80">)</operator></expr>)</condition> <block pos:start="113:83" pos:end="131:13">{<block_content pos:start="115:17" pos:end="129:17">

                <expr_stmt pos:start="115:17" pos:end="115:40"><expr pos:start="115:17" pos:end="115:39"><name pos:start="115:17" pos:end="115:24"><name pos:start="115:17" pos:end="115:19">src</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:24">ide</name></name> <operator pos:start="115:26" pos:end="115:27">&amp;=</operator> <operator pos:start="115:29" pos:end="115:29">~</operator><operator pos:start="115:30" pos:end="115:30">(</operator><literal type="number" pos:start="115:31" pos:end="115:31">1</literal> <operator pos:start="115:33" pos:end="115:34">&lt;&lt;</operator> <name pos:start="115:36" pos:end="115:38">idx</name><operator pos:start="115:39" pos:end="115:39">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="117:17" pos:end="129:17"><if pos:start="117:17" pos:end="129:17">if <condition pos:start="117:20" pos:end="117:66">(<expr pos:start="117:21" pos:end="117:65"><name pos:start="117:21" pos:end="117:28"><name pos:start="117:21" pos:end="117:23">src</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:28">ide</name></name> <operator pos:start="117:30" pos:end="117:31">&amp;&amp;</operator> <operator pos:start="117:33" pos:end="117:33">!</operator><call pos:start="117:34" pos:end="117:65"><name pos:start="117:34" pos:end="117:41">test_bit</name><argument_list pos:start="117:42" pos:end="117:65">(<argument pos:start="117:43" pos:end="117:52"><expr pos:start="117:43" pos:end="117:52"><operator pos:start="117:43" pos:end="117:43">&amp;</operator><name pos:start="117:44" pos:end="117:52"><name pos:start="117:44" pos:end="117:46">src</name><operator pos:start="117:47" pos:end="117:48">-&gt;</operator><name pos:start="117:49" pos:end="117:52">ipvp</name></name></expr></argument>, <argument pos:start="117:55" pos:end="117:64"><expr pos:start="117:55" pos:end="117:64"><name pos:start="117:55" pos:end="117:64">IPVP_SENSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:68" pos:end="129:17">{<block_content pos:start="121:21" pos:end="127:55">

                    <comment type="block" pos:start="119:21" pos:end="119:71">/* trigger on CPUs that didn't know about it yet */</comment>

                    <expr_stmt pos:start="121:21" pos:end="121:51"><expr pos:start="121:21" pos:end="121:50"><call pos:start="121:21" pos:end="121:50"><name pos:start="121:21" pos:end="121:35">openpic_set_irq</name><argument_list pos:start="121:36" pos:end="121:50">(<argument pos:start="121:37" pos:end="121:39"><expr pos:start="121:37" pos:end="121:39"><name pos:start="121:37" pos:end="121:39">opp</name></expr></argument>, <argument pos:start="121:42" pos:end="121:46"><expr pos:start="121:42" pos:end="121:46"><name pos:start="121:42" pos:end="121:46">n_IRQ</name></expr></argument>, <argument pos:start="121:49" pos:end="121:49"><expr pos:start="121:49" pos:end="121:49"><literal type="number" pos:start="121:49" pos:end="121:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:51"><expr pos:start="123:21" pos:end="123:50"><call pos:start="123:21" pos:end="123:50"><name pos:start="123:21" pos:end="123:35">openpic_set_irq</name><argument_list pos:start="123:36" pos:end="123:50">(<argument pos:start="123:37" pos:end="123:39"><expr pos:start="123:37" pos:end="123:39"><name pos:start="123:37" pos:end="123:39">opp</name></expr></argument>, <argument pos:start="123:42" pos:end="123:46"><expr pos:start="123:42" pos:end="123:46"><name pos:start="123:42" pos:end="123:46">n_IRQ</name></expr></argument>, <argument pos:start="123:49" pos:end="123:49"><expr pos:start="123:49" pos:end="123:49"><literal type="number" pos:start="123:49" pos:end="123:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="125:21" pos:end="125:73">/* if all CPUs knew about it, set active bit again */</comment>

                    <expr_stmt pos:start="127:21" pos:end="127:55"><expr pos:start="127:21" pos:end="127:54"><call pos:start="127:21" pos:end="127:54"><name pos:start="127:21" pos:end="127:27">set_bit</name><argument_list pos:start="127:28" pos:end="127:54">(<argument pos:start="127:29" pos:end="127:38"><expr pos:start="127:29" pos:end="127:38"><operator pos:start="127:29" pos:end="127:29">&amp;</operator><name pos:start="127:30" pos:end="127:38"><name pos:start="127:30" pos:end="127:32">src</name><operator pos:start="127:33" pos:end="127:34">-&gt;</operator><name pos:start="127:35" pos:end="127:38">ipvp</name></name></expr></argument>, <argument pos:start="127:41" pos:end="127:53"><expr pos:start="127:41" pos:end="127:53"><name pos:start="127:41" pos:end="127:53">IPVP_ACTIVITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:14">case <expr pos:start="137:10" pos:end="137:13"><literal type="number" pos:start="137:10" pos:end="137:13">0xB0</literal></expr>:</case> <comment type="block" pos:start="137:16" pos:end="137:25">/* PEOI */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:19"><expr pos:start="139:9" pos:end="139:18"><name pos:start="139:9" pos:end="139:14">retval</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <literal type="number" pos:start="139:18" pos:end="139:18">0</literal></expr>;</expr_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <default pos:start="143:5" pos:end="143:12">default:</default>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="149:5" pos:end="149:47"><expr pos:start="149:5" pos:end="149:46"><call pos:start="149:5" pos:end="149:46"><name pos:start="149:5" pos:end="149:11">DPRINTF</name><argument_list pos:start="149:12" pos:end="149:46">(<argument pos:start="149:13" pos:end="149:27"><expr pos:start="149:13" pos:end="149:27"><literal type="string" pos:start="149:13" pos:end="149:27">"%s: =&gt; %08x\n"</literal></expr></argument>, <argument pos:start="149:30" pos:end="149:37"><expr pos:start="149:30" pos:end="149:37"><name pos:start="149:30" pos:end="149:37">__func__</name></expr></argument>, <argument pos:start="149:40" pos:end="149:45"><expr pos:start="149:40" pos:end="149:45"><name pos:start="149:40" pos:end="149:45">retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="153:5" pos:end="153:18">return <expr pos:start="153:12" pos:end="153:17"><name pos:start="153:12" pos:end="153:17">retval</name></expr>;</return>

</block_content>}</block></function>
</unit>
