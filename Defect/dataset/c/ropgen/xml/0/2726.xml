<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2726.c" pos:tabs="8"><function pos:start="1:1" pos:end="371:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">vexpress_a9_init</name><parameter_list pos:start="1:29" pos:end="7:72">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:48"><name pos:start="1:30" pos:end="1:39">ram_addr_t</name></type> <name pos:start="1:41" pos:end="1:48">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:71"><decl pos:start="7:51" pos:end="7:71"><type pos:start="7:51" pos:end="7:71"><specifier pos:start="7:51" pos:end="7:55">const</specifier> <name pos:start="7:57" pos:end="7:60">char</name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:71">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="371:1">{<block_content pos:start="11:5" pos:end="369:48">

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name> <init pos:start="11:19" pos:end="11:24">= <expr pos:start="11:21" pos:end="11:24"><name pos:start="11:21" pos:end="11:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:24">sysmem</name> <init pos:start="13:26" pos:end="13:46">= <expr pos:start="13:28" pos:end="13:46"><call pos:start="13:28" pos:end="13:46"><name pos:start="13:28" pos:end="13:44">get_system_memory</name><argument_list pos:start="13:45" pos:end="13:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">ram</name> <init pos:start="15:23" pos:end="15:46">= <expr pos:start="15:25" pos:end="15:46"><call pos:start="15:25" pos:end="15:46"><name pos:start="15:25" pos:end="15:29">g_new</name><argument_list pos:start="15:30" pos:end="15:46">(<argument pos:start="15:31" pos:end="15:42"><expr pos:start="15:31" pos:end="15:42"><name pos:start="15:31" pos:end="15:42">MemoryRegion</name></expr></argument>, <argument pos:start="15:45" pos:end="15:45"><expr pos:start="15:45" pos:end="15:45"><literal type="number" pos:start="15:45" pos:end="15:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:50"><decl pos:start="17:5" pos:end="17:49"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">lowram</name> <init pos:start="17:26" pos:end="17:49">= <expr pos:start="17:28" pos:end="17:49"><call pos:start="17:28" pos:end="17:49"><name pos:start="17:28" pos:end="17:32">g_new</name><argument_list pos:start="17:33" pos:end="17:49">(<argument pos:start="17:34" pos:end="17:45"><expr pos:start="17:34" pos:end="17:45"><name pos:start="17:34" pos:end="17:45">MemoryRegion</name></expr></argument>, <argument pos:start="17:48" pos:end="17:48"><expr pos:start="17:48" pos:end="17:48"><literal type="number" pos:start="17:48" pos:end="17:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:48"><decl pos:start="19:5" pos:end="19:47"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:22">vram</name> <init pos:start="19:24" pos:end="19:47">= <expr pos:start="19:26" pos:end="19:47"><call pos:start="19:26" pos:end="19:47"><name pos:start="19:26" pos:end="19:30">g_new</name><argument_list pos:start="19:31" pos:end="19:47">(<argument pos:start="19:32" pos:end="19:43"><expr pos:start="19:32" pos:end="19:43"><name pos:start="19:32" pos:end="19:43">MemoryRegion</name></expr></argument>, <argument pos:start="19:46" pos:end="19:46"><expr pos:start="19:46" pos:end="19:46"><literal type="number" pos:start="19:46" pos:end="19:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:48"><decl pos:start="21:5" pos:end="21:47"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:22">sram</name> <init pos:start="21:24" pos:end="21:47">= <expr pos:start="21:26" pos:end="21:47"><call pos:start="21:26" pos:end="21:47"><name pos:start="21:26" pos:end="21:30">g_new</name><argument_list pos:start="21:31" pos:end="21:47">(<argument pos:start="21:32" pos:end="21:43"><expr pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:43">MemoryRegion</name></expr></argument>, <argument pos:start="21:46" pos:end="21:46"><expr pos:start="21:46" pos:end="21:46"><literal type="number" pos:start="21:46" pos:end="21:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:51"><decl pos:start="23:5" pos:end="23:50"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:25">hackram</name> <init pos:start="23:27" pos:end="23:50">= <expr pos:start="23:29" pos:end="23:50"><call pos:start="23:29" pos:end="23:50"><name pos:start="23:29" pos:end="23:33">g_new</name><argument_list pos:start="23:34" pos:end="23:50">(<argument pos:start="23:35" pos:end="23:46"><expr pos:start="23:35" pos:end="23:46"><name pos:start="23:35" pos:end="23:46">MemoryRegion</name></expr></argument>, <argument pos:start="23:49" pos:end="23:49"><expr pos:start="23:49" pos:end="23:49"><literal type="number" pos:start="23:49" pos:end="23:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:38"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">DeviceState</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:20">dev</name></decl>, <decl pos:start="25:23" pos:end="25:29"><type ref="prev" pos:start="25:5" pos:end="25:17"><modifier pos:start="25:23" pos:end="25:23">*</modifier></type><name pos:start="25:24" pos:end="25:29">sysctl</name></decl>, <decl pos:start="25:32" pos:end="25:37"><type ref="prev" pos:start="25:5" pos:end="25:17"><modifier pos:start="25:32" pos:end="25:32">*</modifier></type><name pos:start="25:33" pos:end="25:37">pl041</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">SysBusDevice</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:24">busdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:18">irqp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:21"><decl pos:start="31:5" pos:end="31:20"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">qemu_irq</name></type> <name pos:start="31:14" pos:end="31:20"><name pos:start="31:14" pos:end="31:16">pic</name><index pos:start="31:17" pos:end="31:20">[<expr pos:start="31:18" pos:end="31:19"><literal type="number" pos:start="31:18" pos:end="31:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:10"><decl pos:start="33:5" pos:end="33:9"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">qemu_irq</name></type> <name pos:start="35:14" pos:end="35:23"><name pos:start="35:14" pos:end="35:20">cpu_irq</name><index pos:start="35:21" pos:end="35:23">[<expr pos:start="35:22" pos:end="35:22"><literal type="number" pos:start="35:22" pos:end="35:22">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:21"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:12">uint32_t</name></type> <name pos:start="37:14" pos:end="37:20">proc_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:12">uint32_t</name></type> <name pos:start="39:14" pos:end="39:19">sys_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:50"><decl pos:start="41:5" pos:end="41:27"><type pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:14">ram_addr_t</name></type> <name pos:start="41:16" pos:end="41:27">low_ram_size</name></decl>, <decl pos:start="41:30" pos:end="41:38"><type ref="prev" pos:start="41:5" pos:end="41:14"/><name pos:start="41:30" pos:end="41:38">vram_size</name></decl>, <decl pos:start="41:41" pos:end="41:49"><type ref="prev" pos:start="41:5" pos:end="41:14"/><name pos:start="41:41" pos:end="41:49">sram_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:53"><decl pos:start="43:5" pos:end="43:52"><type pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:22">target_phys_addr_t</name> <modifier pos:start="43:24" pos:end="43:24">*</modifier></type><name pos:start="43:25" pos:end="43:27">map</name> <init pos:start="43:29" pos:end="43:52">= <expr pos:start="43:31" pos:end="43:52"><name pos:start="43:31" pos:end="43:52">motherboard_legacy_map</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:19">(<expr pos:start="47:9" pos:end="47:18"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:18">cpu_model</name></expr>)</condition> <block pos:start="47:21" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:32">

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:17">cpu_model</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <literal type="string" pos:start="49:21" pos:end="49:31">"cortex-a9"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="55:5" pos:end="71:5">for <control pos:start="55:9" pos:end="55:34">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">n</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:29"><expr pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:17">n</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <name pos:start="55:21" pos:end="55:28">smp_cpus</name></expr>;</condition> <incr pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:31">n</name><operator pos:start="55:32" pos:end="55:33">++</operator></expr></incr>)</control> <block pos:start="55:36" pos:end="71:5">{<block_content pos:start="57:9" pos:end="69:43">

        <expr_stmt pos:start="57:9" pos:end="57:34"><expr pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:11">env</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:33"><name pos:start="57:15" pos:end="57:22">cpu_init</name><argument_list pos:start="57:23" pos:end="57:33">(<argument pos:start="57:24" pos:end="57:32"><expr pos:start="57:24" pos:end="57:32"><name pos:start="57:24" pos:end="57:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:17">(<expr pos:start="59:13" pos:end="59:16"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:16">env</name></expr>)</condition> <block pos:start="59:19" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:20">

            <expr_stmt pos:start="61:13" pos:end="61:63"><expr pos:start="61:13" pos:end="61:62"><call pos:start="61:13" pos:end="61:62"><name pos:start="61:13" pos:end="61:19">fprintf</name><argument_list pos:start="61:20" pos:end="61:62">(<argument pos:start="61:21" pos:end="61:26"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:26">stderr</name></expr></argument>, <argument pos:start="61:29" pos:end="61:61"><expr pos:start="61:29" pos:end="61:61"><literal type="string" pos:start="61:29" pos:end="61:61">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:20"><expr pos:start="63:13" pos:end="63:19"><call pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:16">exit</name><argument_list pos:start="63:17" pos:end="63:19">(<argument pos:start="63:18" pos:end="63:18"><expr pos:start="63:18" pos:end="63:18"><literal type="number" pos:start="63:18" pos:end="63:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:37"><expr pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:12">irqp</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <call pos:start="67:16" pos:end="67:36"><name pos:start="67:16" pos:end="67:31">arm_pic_init_cpu</name><argument_list pos:start="67:32" pos:end="67:36">(<argument pos:start="67:33" pos:end="67:35"><expr pos:start="67:33" pos:end="67:35"><name pos:start="67:33" pos:end="67:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:43"><expr pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:15">cpu_irq</name><index pos:start="69:16" pos:end="69:18">[<expr pos:start="69:17" pos:end="69:17"><name pos:start="69:17" pos:end="69:17">n</name></expr>]</index></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:42"><name pos:start="69:22" pos:end="69:25">irqp</name><index pos:start="69:26" pos:end="69:42">[<expr pos:start="69:27" pos:end="69:41"><name pos:start="69:27" pos:end="69:41">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:30">(<expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:16">ram_size</name> <operator pos:start="75:18" pos:end="75:18">&gt;</operator> <literal type="number" pos:start="75:20" pos:end="75:29">0x40000000</literal></expr>)</condition> <block pos:start="75:32" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:16">

        <comment type="block" pos:start="77:9" pos:end="77:58">/* 1GB is the maximum the address space permits */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:70"><expr pos:start="79:9" pos:end="79:69"><call pos:start="79:9" pos:end="79:69"><name pos:start="79:9" pos:end="79:15">fprintf</name><argument_list pos:start="79:16" pos:end="79:69">(<argument pos:start="79:17" pos:end="79:22"><expr pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:22">stderr</name></expr></argument>, <argument pos:start="79:25" pos:end="79:68"><expr pos:start="79:25" pos:end="79:68"><literal type="string" pos:start="79:25" pos:end="79:68">"vexpress: cannot model more than 1GB RAM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:16"><expr pos:start="81:9" pos:end="81:15"><call pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:12">exit</name><argument_list pos:start="81:13" pos:end="81:15">(<argument pos:start="81:14" pos:end="81:14"><expr pos:start="81:14" pos:end="81:14"><literal type="number" pos:start="81:14" pos:end="81:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:62"><expr pos:start="87:5" pos:end="87:61"><call pos:start="87:5" pos:end="87:61"><name pos:start="87:5" pos:end="87:26">memory_region_init_ram</name><argument_list pos:start="87:27" pos:end="87:61">(<argument pos:start="87:28" pos:end="87:30"><expr pos:start="87:28" pos:end="87:30"><name pos:start="87:28" pos:end="87:30">ram</name></expr></argument>, <argument pos:start="87:33" pos:end="87:50"><expr pos:start="87:33" pos:end="87:50"><literal type="string" pos:start="87:33" pos:end="87:50">"vexpress.highmem"</literal></expr></argument>, <argument pos:start="87:53" pos:end="87:60"><expr pos:start="87:53" pos:end="87:60"><name pos:start="87:53" pos:end="87:60">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:37"><expr pos:start="89:5" pos:end="89:36"><call pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:31">vmstate_register_ram_global</name><argument_list pos:start="89:32" pos:end="89:36">(<argument pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><name pos:start="89:33" pos:end="89:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:28"><expr pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:16">low_ram_size</name> <operator pos:start="91:18" pos:end="91:18">=</operator> <name pos:start="91:20" pos:end="91:27">ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:33">(<expr pos:start="93:9" pos:end="93:32"><name pos:start="93:9" pos:end="93:20">low_ram_size</name> <operator pos:start="93:22" pos:end="93:22">&gt;</operator> <literal type="number" pos:start="93:24" pos:end="93:32">0x4000000</literal></expr>)</condition> <block pos:start="93:35" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:33">

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:20">low_ram_size</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <literal type="number" pos:start="95:24" pos:end="95:32">0x4000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="99:5" pos:end="105:7">/* RAM is from 0x60000000 upwards. The bottom 64MB of the

     * address space should in theory be remappable to various

     * things including ROM or RAM; we always map the RAM there.

     */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:78"><expr pos:start="107:5" pos:end="107:77"><call pos:start="107:5" pos:end="107:77"><name pos:start="107:5" pos:end="107:28">memory_region_init_alias</name><argument_list pos:start="107:29" pos:end="107:77">(<argument pos:start="107:30" pos:end="107:35"><expr pos:start="107:30" pos:end="107:35"><name pos:start="107:30" pos:end="107:35">lowram</name></expr></argument>, <argument pos:start="107:38" pos:end="107:54"><expr pos:start="107:38" pos:end="107:54"><literal type="string" pos:start="107:38" pos:end="107:54">"vexpress.lowmem"</literal></expr></argument>, <argument pos:start="107:57" pos:end="107:59"><expr pos:start="107:57" pos:end="107:59"><name pos:start="107:57" pos:end="107:59">ram</name></expr></argument>, <argument pos:start="107:62" pos:end="107:62"><expr pos:start="107:62" pos:end="107:62"><literal type="number" pos:start="107:62" pos:end="107:62">0</literal></expr></argument>, <argument pos:start="107:65" pos:end="107:76"><expr pos:start="107:65" pos:end="107:76"><name pos:start="107:65" pos:end="107:76">low_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:53"><expr pos:start="109:5" pos:end="109:52"><call pos:start="109:5" pos:end="109:52"><name pos:start="109:5" pos:end="109:31">memory_region_add_subregion</name><argument_list pos:start="109:32" pos:end="109:52">(<argument pos:start="109:33" pos:end="109:38"><expr pos:start="109:33" pos:end="109:38"><name pos:start="109:33" pos:end="109:38">sysmem</name></expr></argument>, <argument pos:start="109:41" pos:end="109:43"><expr pos:start="109:41" pos:end="109:43"><literal type="number" pos:start="109:41" pos:end="109:43">0x0</literal></expr></argument>, <argument pos:start="109:46" pos:end="109:51"><expr pos:start="109:46" pos:end="109:51"><name pos:start="109:46" pos:end="109:51">lowram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:57"><expr pos:start="111:5" pos:end="111:56"><call pos:start="111:5" pos:end="111:56"><name pos:start="111:5" pos:end="111:31">memory_region_add_subregion</name><argument_list pos:start="111:32" pos:end="111:56">(<argument pos:start="111:33" pos:end="111:38"><expr pos:start="111:33" pos:end="111:38"><name pos:start="111:33" pos:end="111:38">sysmem</name></expr></argument>, <argument pos:start="111:41" pos:end="111:50"><expr pos:start="111:41" pos:end="111:50"><literal type="number" pos:start="111:41" pos:end="111:50">0x60000000</literal></expr></argument>, <argument pos:start="111:53" pos:end="111:55"><expr pos:start="111:53" pos:end="111:55"><name pos:start="111:53" pos:end="111:55">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:57">/* 0x1e000000 A9MPCore (SCU) private memory region */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:45"><expr pos:start="117:5" pos:end="117:44"><name pos:start="117:5" pos:end="117:7">dev</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:44"><name pos:start="117:11" pos:end="117:21">qdev_create</name><argument_list pos:start="117:22" pos:end="117:44">(<argument pos:start="117:23" pos:end="117:26"><expr pos:start="117:23" pos:end="117:26"><name pos:start="117:23" pos:end="117:26">NULL</name></expr></argument>, <argument pos:start="117:29" pos:end="117:43"><expr pos:start="117:29" pos:end="117:43"><literal type="string" pos:start="117:29" pos:end="117:43">"a9mpcore_priv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:51"><expr pos:start="119:5" pos:end="119:50"><call pos:start="119:5" pos:end="119:50"><name pos:start="119:5" pos:end="119:24">qdev_prop_set_uint32</name><argument_list pos:start="119:25" pos:end="119:50">(<argument pos:start="119:26" pos:end="119:28"><expr pos:start="119:26" pos:end="119:28"><name pos:start="119:26" pos:end="119:28">dev</name></expr></argument>, <argument pos:start="119:31" pos:end="119:39"><expr pos:start="119:31" pos:end="119:39"><literal type="string" pos:start="119:31" pos:end="119:39">"num-cpu"</literal></expr></argument>, <argument pos:start="119:42" pos:end="119:49"><expr pos:start="119:42" pos:end="119:49"><name pos:start="119:42" pos:end="119:49">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:26"><expr pos:start="121:5" pos:end="121:25"><call pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:20">qdev_init_nofail</name><argument_list pos:start="121:21" pos:end="121:25">(<argument pos:start="121:22" pos:end="121:24"><expr pos:start="121:22" pos:end="121:24"><name pos:start="121:22" pos:end="121:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:35"><expr pos:start="123:5" pos:end="123:34"><name pos:start="123:5" pos:end="123:10">busdev</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <call pos:start="123:14" pos:end="123:34"><name pos:start="123:14" pos:end="123:29">sysbus_from_qdev</name><argument_list pos:start="123:30" pos:end="123:34">(<argument pos:start="123:31" pos:end="123:33"><expr pos:start="123:31" pos:end="123:33"><name pos:start="123:31" pos:end="123:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:46"><expr pos:start="125:5" pos:end="125:45"><name pos:start="125:5" pos:end="125:32"><name pos:start="125:5" pos:end="125:18">vexpress_binfo</name><operator pos:start="125:19" pos:end="125:19">.</operator><name pos:start="125:20" pos:end="125:32">smp_priv_base</name></name> <operator pos:start="125:34" pos:end="125:34">=</operator> <literal type="number" pos:start="125:36" pos:end="125:45">0x1e000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:61"><expr pos:start="127:5" pos:end="127:60"><call pos:start="127:5" pos:end="127:60"><name pos:start="127:5" pos:end="127:19">sysbus_mmio_map</name><argument_list pos:start="127:20" pos:end="127:60">(<argument pos:start="127:21" pos:end="127:26"><expr pos:start="127:21" pos:end="127:26"><name pos:start="127:21" pos:end="127:26">busdev</name></expr></argument>, <argument pos:start="127:29" pos:end="127:29"><expr pos:start="127:29" pos:end="127:29"><literal type="number" pos:start="127:29" pos:end="127:29">0</literal></expr></argument>, <argument pos:start="127:32" pos:end="127:59"><expr pos:start="127:32" pos:end="127:59"><name pos:start="127:32" pos:end="127:59"><name pos:start="127:32" pos:end="127:45">vexpress_binfo</name><operator pos:start="127:46" pos:end="127:46">.</operator><name pos:start="127:47" pos:end="127:59">smp_priv_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="129:5" pos:end="133:5">for <control pos:start="129:9" pos:end="129:34">(<init pos:start="129:10" pos:end="129:15"><expr pos:start="129:10" pos:end="129:14"><name pos:start="129:10" pos:end="129:10">n</name> <operator pos:start="129:12" pos:end="129:12">=</operator> <literal type="number" pos:start="129:14" pos:end="129:14">0</literal></expr>;</init> <condition pos:start="129:17" pos:end="129:29"><expr pos:start="129:17" pos:end="129:28"><name pos:start="129:17" pos:end="129:17">n</name> <operator pos:start="129:19" pos:end="129:19">&lt;</operator> <name pos:start="129:21" pos:end="129:28">smp_cpus</name></expr>;</condition> <incr pos:start="129:31" pos:end="129:33"><expr pos:start="129:31" pos:end="129:33"><name pos:start="129:31" pos:end="129:31">n</name><operator pos:start="129:32" pos:end="129:33">++</operator></expr></incr>)</control> <block pos:start="129:36" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:50">

        <expr_stmt pos:start="131:9" pos:end="131:50"><expr pos:start="131:9" pos:end="131:49"><call pos:start="131:9" pos:end="131:49"><name pos:start="131:9" pos:end="131:26">sysbus_connect_irq</name><argument_list pos:start="131:27" pos:end="131:49">(<argument pos:start="131:28" pos:end="131:33"><expr pos:start="131:28" pos:end="131:33"><name pos:start="131:28" pos:end="131:33">busdev</name></expr></argument>, <argument pos:start="131:36" pos:end="131:36"><expr pos:start="131:36" pos:end="131:36"><name pos:start="131:36" pos:end="131:36">n</name></expr></argument>, <argument pos:start="131:39" pos:end="131:48"><expr pos:start="131:39" pos:end="131:48"><name pos:start="131:39" pos:end="131:48"><name pos:start="131:39" pos:end="131:45">cpu_irq</name><index pos:start="131:46" pos:end="131:48">[<expr pos:start="131:47" pos:end="131:47"><name pos:start="131:47" pos:end="131:47">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="135:5" pos:end="145:7">/* Interrupts [42:0] are from the motherboard;

     * [47:43] are reserved; [63:48] are daughterboard

     * peripherals. Note that some documentation numbers

     * external interrupts starting from 32 (because the

     * A9MP has internal interrupts 0..31).

     */</comment>

    <for pos:start="147:5" pos:end="151:5">for <control pos:start="147:9" pos:end="147:28">(<init pos:start="147:10" pos:end="147:15"><expr pos:start="147:10" pos:end="147:14"><name pos:start="147:10" pos:end="147:10">n</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <literal type="number" pos:start="147:14" pos:end="147:14">0</literal></expr>;</init> <condition pos:start="147:17" pos:end="147:23"><expr pos:start="147:17" pos:end="147:22"><name pos:start="147:17" pos:end="147:17">n</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <literal type="number" pos:start="147:21" pos:end="147:22">64</literal></expr>;</condition> <incr pos:start="147:25" pos:end="147:27"><expr pos:start="147:25" pos:end="147:27"><name pos:start="147:25" pos:end="147:25">n</name><operator pos:start="147:26" pos:end="147:27">++</operator></expr></incr>)</control> <block pos:start="147:30" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:42">

        <expr_stmt pos:start="149:9" pos:end="149:42"><expr pos:start="149:9" pos:end="149:41"><name pos:start="149:9" pos:end="149:14"><name pos:start="149:9" pos:end="149:11">pic</name><index pos:start="149:12" pos:end="149:14">[<expr pos:start="149:13" pos:end="149:13"><name pos:start="149:13" pos:end="149:13">n</name></expr>]</index></name> <operator pos:start="149:16" pos:end="149:16">=</operator> <call pos:start="149:18" pos:end="149:41"><name pos:start="149:18" pos:end="149:33">qdev_get_gpio_in</name><argument_list pos:start="149:34" pos:end="149:41">(<argument pos:start="149:35" pos:end="149:37"><expr pos:start="149:35" pos:end="149:37"><name pos:start="149:35" pos:end="149:37">dev</name></expr></argument>, <argument pos:start="149:40" pos:end="149:40"><expr pos:start="149:40" pos:end="149:40"><name pos:start="149:40" pos:end="149:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="155:5" pos:end="159:7">/* Motherboard peripherals: the wiring is the same but the

     * addresses vary between the legacy and A-Series memory maps.

     */</comment>



    <expr_stmt pos:start="163:5" pos:end="163:24"><expr pos:start="163:5" pos:end="163:23"><name pos:start="163:5" pos:end="163:10">sys_id</name> <operator pos:start="163:12" pos:end="163:12">=</operator> <literal type="number" pos:start="163:14" pos:end="163:23">0x1190f500</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:25"><expr pos:start="165:5" pos:end="165:24"><name pos:start="165:5" pos:end="165:11">proc_id</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <literal type="number" pos:start="165:15" pos:end="165:24">0x0c000191</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:50"><expr pos:start="169:5" pos:end="169:49"><name pos:start="169:5" pos:end="169:10">sysctl</name> <operator pos:start="169:12" pos:end="169:12">=</operator> <call pos:start="169:14" pos:end="169:49"><name pos:start="169:14" pos:end="169:24">qdev_create</name><argument_list pos:start="169:25" pos:end="169:49">(<argument pos:start="169:26" pos:end="169:29"><expr pos:start="169:26" pos:end="169:29"><name pos:start="169:26" pos:end="169:29">NULL</name></expr></argument>, <argument pos:start="169:32" pos:end="169:48"><expr pos:start="169:32" pos:end="169:48"><literal type="string" pos:start="169:32" pos:end="169:48">"realview_sysctl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:51"><expr pos:start="171:5" pos:end="171:50"><call pos:start="171:5" pos:end="171:50"><name pos:start="171:5" pos:end="171:24">qdev_prop_set_uint32</name><argument_list pos:start="171:25" pos:end="171:50">(<argument pos:start="171:26" pos:end="171:31"><expr pos:start="171:26" pos:end="171:31"><name pos:start="171:26" pos:end="171:31">sysctl</name></expr></argument>, <argument pos:start="171:34" pos:end="171:41"><expr pos:start="171:34" pos:end="171:41"><literal type="string" pos:start="171:34" pos:end="171:41">"sys_id"</literal></expr></argument>, <argument pos:start="171:44" pos:end="171:49"><expr pos:start="171:44" pos:end="171:49"><name pos:start="171:44" pos:end="171:49">sys_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:53"><expr pos:start="173:5" pos:end="173:52"><call pos:start="173:5" pos:end="173:52"><name pos:start="173:5" pos:end="173:24">qdev_prop_set_uint32</name><argument_list pos:start="173:25" pos:end="173:52">(<argument pos:start="173:26" pos:end="173:31"><expr pos:start="173:26" pos:end="173:31"><name pos:start="173:26" pos:end="173:31">sysctl</name></expr></argument>, <argument pos:start="173:34" pos:end="173:42"><expr pos:start="173:34" pos:end="173:42"><literal type="string" pos:start="173:34" pos:end="173:42">"proc_id"</literal></expr></argument>, <argument pos:start="173:45" pos:end="173:51"><expr pos:start="173:45" pos:end="173:51"><name pos:start="173:45" pos:end="173:51">proc_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:29"><expr pos:start="175:5" pos:end="175:28"><call pos:start="175:5" pos:end="175:28"><name pos:start="175:5" pos:end="175:20">qdev_init_nofail</name><argument_list pos:start="175:21" pos:end="175:28">(<argument pos:start="175:22" pos:end="175:27"><expr pos:start="175:22" pos:end="175:27"><name pos:start="175:22" pos:end="175:27">sysctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:66"><expr pos:start="177:5" pos:end="177:65"><call pos:start="177:5" pos:end="177:65"><name pos:start="177:5" pos:end="177:19">sysbus_mmio_map</name><argument_list pos:start="177:20" pos:end="177:65">(<argument pos:start="177:21" pos:end="177:44"><expr pos:start="177:21" pos:end="177:44"><call pos:start="177:21" pos:end="177:44"><name pos:start="177:21" pos:end="177:36">sysbus_from_qdev</name><argument_list pos:start="177:37" pos:end="177:44">(<argument pos:start="177:38" pos:end="177:43"><expr pos:start="177:38" pos:end="177:43"><name pos:start="177:38" pos:end="177:43">sysctl</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="177:47" pos:end="177:47"><expr pos:start="177:47" pos:end="177:47"><literal type="number" pos:start="177:47" pos:end="177:47">0</literal></expr></argument>, <argument pos:start="177:50" pos:end="177:64"><expr pos:start="177:50" pos:end="177:64"><name pos:start="177:50" pos:end="177:64"><name pos:start="177:50" pos:end="177:52">map</name><index pos:start="177:53" pos:end="177:64">[<expr pos:start="177:54" pos:end="177:63"><name pos:start="177:54" pos:end="177:63">VE_SYSREGS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="181:5" pos:end="181:32">/* VE_SP810: not modelled */</comment>

    <comment type="block" pos:start="183:5" pos:end="183:36">/* VE_SERIALPCI: not modelled */</comment>



    <expr_stmt pos:start="187:5" pos:end="187:39"><expr pos:start="187:5" pos:end="187:38"><name pos:start="187:5" pos:end="187:9">pl041</name> <operator pos:start="187:11" pos:end="187:11">=</operator> <call pos:start="187:13" pos:end="187:38"><name pos:start="187:13" pos:end="187:23">qdev_create</name><argument_list pos:start="187:24" pos:end="187:38">(<argument pos:start="187:25" pos:end="187:28"><expr pos:start="187:25" pos:end="187:28"><name pos:start="187:25" pos:end="187:28">NULL</name></expr></argument>, <argument pos:start="187:31" pos:end="187:37"><expr pos:start="187:31" pos:end="187:37"><literal type="string" pos:start="187:31" pos:end="187:37">"pl041"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:54"><expr pos:start="189:5" pos:end="189:53"><call pos:start="189:5" pos:end="189:53"><name pos:start="189:5" pos:end="189:24">qdev_prop_set_uint32</name><argument_list pos:start="189:25" pos:end="189:53">(<argument pos:start="189:26" pos:end="189:30"><expr pos:start="189:26" pos:end="189:30"><name pos:start="189:26" pos:end="189:30">pl041</name></expr></argument>, <argument pos:start="189:33" pos:end="189:47"><expr pos:start="189:33" pos:end="189:47"><literal type="string" pos:start="189:33" pos:end="189:47">"nc_fifo_depth"</literal></expr></argument>, <argument pos:start="189:50" pos:end="189:52"><expr pos:start="189:50" pos:end="189:52"><literal type="number" pos:start="189:50" pos:end="189:52">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:28"><expr pos:start="191:5" pos:end="191:27"><call pos:start="191:5" pos:end="191:27"><name pos:start="191:5" pos:end="191:20">qdev_init_nofail</name><argument_list pos:start="191:21" pos:end="191:27">(<argument pos:start="191:22" pos:end="191:26"><expr pos:start="191:22" pos:end="191:26"><name pos:start="191:22" pos:end="191:26">pl041</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:63"><expr pos:start="193:5" pos:end="193:62"><call pos:start="193:5" pos:end="193:62"><name pos:start="193:5" pos:end="193:19">sysbus_mmio_map</name><argument_list pos:start="193:20" pos:end="193:62">(<argument pos:start="193:21" pos:end="193:43"><expr pos:start="193:21" pos:end="193:43"><call pos:start="193:21" pos:end="193:43"><name pos:start="193:21" pos:end="193:36">sysbus_from_qdev</name><argument_list pos:start="193:37" pos:end="193:43">(<argument pos:start="193:38" pos:end="193:42"><expr pos:start="193:38" pos:end="193:42"><name pos:start="193:38" pos:end="193:42">pl041</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:46" pos:end="193:46"><expr pos:start="193:46" pos:end="193:46"><literal type="number" pos:start="193:46" pos:end="193:46">0</literal></expr></argument>, <argument pos:start="193:49" pos:end="193:61"><expr pos:start="193:49" pos:end="193:61"><name pos:start="193:49" pos:end="193:61"><name pos:start="193:49" pos:end="193:51">map</name><index pos:start="193:52" pos:end="193:61">[<expr pos:start="193:53" pos:end="193:60"><name pos:start="193:53" pos:end="193:60">VE_PL041</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:60"><expr pos:start="195:5" pos:end="195:59"><call pos:start="195:5" pos:end="195:59"><name pos:start="195:5" pos:end="195:22">sysbus_connect_irq</name><argument_list pos:start="195:23" pos:end="195:59">(<argument pos:start="195:24" pos:end="195:46"><expr pos:start="195:24" pos:end="195:46"><call pos:start="195:24" pos:end="195:46"><name pos:start="195:24" pos:end="195:39">sysbus_from_qdev</name><argument_list pos:start="195:40" pos:end="195:46">(<argument pos:start="195:41" pos:end="195:45"><expr pos:start="195:41" pos:end="195:45"><name pos:start="195:41" pos:end="195:45">pl041</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="195:49" pos:end="195:49"><expr pos:start="195:49" pos:end="195:49"><literal type="number" pos:start="195:49" pos:end="195:49">0</literal></expr></argument>, <argument pos:start="195:52" pos:end="195:58"><expr pos:start="195:52" pos:end="195:58"><name pos:start="195:52" pos:end="195:58"><name pos:start="195:52" pos:end="195:54">pic</name><index pos:start="195:55" pos:end="195:58">[<expr pos:start="195:56" pos:end="195:57"><literal type="number" pos:start="195:56" pos:end="195:57">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:78"><expr pos:start="199:5" pos:end="199:77"><name pos:start="199:5" pos:end="199:7">dev</name> <operator pos:start="199:9" pos:end="199:9">=</operator> <call pos:start="199:11" pos:end="199:77"><name pos:start="199:11" pos:end="199:31">sysbus_create_varargs</name><argument_list pos:start="199:32" pos:end="199:77">(<argument pos:start="199:33" pos:end="199:39"><expr pos:start="199:33" pos:end="199:39"><literal type="string" pos:start="199:33" pos:end="199:39">"pl181"</literal></expr></argument>, <argument pos:start="199:42" pos:end="199:53"><expr pos:start="199:42" pos:end="199:53"><name pos:start="199:42" pos:end="199:53"><name pos:start="199:42" pos:end="199:44">map</name><index pos:start="199:45" pos:end="199:53">[<expr pos:start="199:46" pos:end="199:52"><name pos:start="199:46" pos:end="199:52">VE_MMCI</name></expr>]</index></name></expr></argument>, <argument pos:start="199:56" pos:end="199:61"><expr pos:start="199:56" pos:end="199:61"><name pos:start="199:56" pos:end="199:61"><name pos:start="199:56" pos:end="199:58">pic</name><index pos:start="199:59" pos:end="199:61">[<expr pos:start="199:60" pos:end="199:60"><literal type="number" pos:start="199:60" pos:end="199:60">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="199:64" pos:end="199:70"><expr pos:start="199:64" pos:end="199:70"><name pos:start="199:64" pos:end="199:70"><name pos:start="199:64" pos:end="199:66">pic</name><index pos:start="199:67" pos:end="199:70">[<expr pos:start="199:68" pos:end="199:69"><literal type="number" pos:start="199:68" pos:end="199:69">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="199:73" pos:end="199:76"><expr pos:start="199:73" pos:end="199:76"><name pos:start="199:73" pos:end="199:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="201:5" pos:end="201:55">/* Wire up MMC card detect and read-only signals */</comment>

    <expr_stmt pos:start="203:5" pos:end="205:79"><expr pos:start="203:5" pos:end="205:78"><call pos:start="203:5" pos:end="205:78"><name pos:start="203:5" pos:end="203:25">qdev_connect_gpio_out</name><argument_list pos:start="203:26" pos:end="205:78">(<argument pos:start="203:27" pos:end="203:29"><expr pos:start="203:27" pos:end="203:29"><name pos:start="203:27" pos:end="203:29">dev</name></expr></argument>, <argument pos:start="203:32" pos:end="203:32"><expr pos:start="203:32" pos:end="203:32"><literal type="number" pos:start="203:32" pos:end="203:32">0</literal></expr></argument>,

                          <argument pos:start="205:27" pos:end="205:77"><expr pos:start="205:27" pos:end="205:77"><call pos:start="205:27" pos:end="205:77"><name pos:start="205:27" pos:end="205:42">qdev_get_gpio_in</name><argument_list pos:start="205:43" pos:end="205:77">(<argument pos:start="205:44" pos:end="205:49"><expr pos:start="205:44" pos:end="205:49"><name pos:start="205:44" pos:end="205:49">sysctl</name></expr></argument>, <argument pos:start="205:52" pos:end="205:76"><expr pos:start="205:52" pos:end="205:76"><name pos:start="205:52" pos:end="205:76">ARM_SYSCTL_GPIO_MMC_WPROT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="209:80"><expr pos:start="207:5" pos:end="209:79"><call pos:start="207:5" pos:end="209:79"><name pos:start="207:5" pos:end="207:25">qdev_connect_gpio_out</name><argument_list pos:start="207:26" pos:end="209:79">(<argument pos:start="207:27" pos:end="207:29"><expr pos:start="207:27" pos:end="207:29"><name pos:start="207:27" pos:end="207:29">dev</name></expr></argument>, <argument pos:start="207:32" pos:end="207:32"><expr pos:start="207:32" pos:end="207:32"><literal type="number" pos:start="207:32" pos:end="207:32">1</literal></expr></argument>,

                          <argument pos:start="209:27" pos:end="209:78"><expr pos:start="209:27" pos:end="209:78"><call pos:start="209:27" pos:end="209:78"><name pos:start="209:27" pos:end="209:42">qdev_get_gpio_in</name><argument_list pos:start="209:43" pos:end="209:78">(<argument pos:start="209:44" pos:end="209:49"><expr pos:start="209:44" pos:end="209:49"><name pos:start="209:44" pos:end="209:49">sysctl</name></expr></argument>, <argument pos:start="209:52" pos:end="209:77"><expr pos:start="209:52" pos:end="209:77"><name pos:start="209:52" pos:end="209:77">ARM_SYSCTL_GPIO_MMC_CARDIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:66"><expr pos:start="213:5" pos:end="213:65"><call pos:start="213:5" pos:end="213:65"><name pos:start="213:5" pos:end="213:24">sysbus_create_simple</name><argument_list pos:start="213:25" pos:end="213:65">(<argument pos:start="213:26" pos:end="213:41"><expr pos:start="213:26" pos:end="213:41"><literal type="string" pos:start="213:26" pos:end="213:41">"pl050_keyboard"</literal></expr></argument>, <argument pos:start="213:44" pos:end="213:55"><expr pos:start="213:44" pos:end="213:55"><name pos:start="213:44" pos:end="213:55"><name pos:start="213:44" pos:end="213:46">map</name><index pos:start="213:47" pos:end="213:55">[<expr pos:start="213:48" pos:end="213:54"><name pos:start="213:48" pos:end="213:54">VE_KMI0</name></expr>]</index></name></expr></argument>, <argument pos:start="213:58" pos:end="213:64"><expr pos:start="213:58" pos:end="213:64"><name pos:start="213:58" pos:end="213:64"><name pos:start="213:58" pos:end="213:60">pic</name><index pos:start="213:61" pos:end="213:64">[<expr pos:start="213:62" pos:end="213:63"><literal type="number" pos:start="213:62" pos:end="213:63">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:63"><expr pos:start="215:5" pos:end="215:62"><call pos:start="215:5" pos:end="215:62"><name pos:start="215:5" pos:end="215:24">sysbus_create_simple</name><argument_list pos:start="215:25" pos:end="215:62">(<argument pos:start="215:26" pos:end="215:38"><expr pos:start="215:26" pos:end="215:38"><literal type="string" pos:start="215:26" pos:end="215:38">"pl050_mouse"</literal></expr></argument>, <argument pos:start="215:41" pos:end="215:52"><expr pos:start="215:41" pos:end="215:52"><name pos:start="215:41" pos:end="215:52"><name pos:start="215:41" pos:end="215:43">map</name><index pos:start="215:44" pos:end="215:52">[<expr pos:start="215:45" pos:end="215:51"><name pos:start="215:45" pos:end="215:51">VE_KMI1</name></expr>]</index></name></expr></argument>, <argument pos:start="215:55" pos:end="215:61"><expr pos:start="215:55" pos:end="215:61"><name pos:start="215:55" pos:end="215:61"><name pos:start="215:55" pos:end="215:57">pic</name><index pos:start="215:58" pos:end="215:61">[<expr pos:start="215:59" pos:end="215:60"><literal type="number" pos:start="215:59" pos:end="215:60">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:57"><expr pos:start="219:5" pos:end="219:56"><call pos:start="219:5" pos:end="219:56"><name pos:start="219:5" pos:end="219:24">sysbus_create_simple</name><argument_list pos:start="219:25" pos:end="219:56">(<argument pos:start="219:26" pos:end="219:32"><expr pos:start="219:26" pos:end="219:32"><literal type="string" pos:start="219:26" pos:end="219:32">"pl011"</literal></expr></argument>, <argument pos:start="219:35" pos:end="219:47"><expr pos:start="219:35" pos:end="219:47"><name pos:start="219:35" pos:end="219:47"><name pos:start="219:35" pos:end="219:37">map</name><index pos:start="219:38" pos:end="219:47">[<expr pos:start="219:39" pos:end="219:46"><name pos:start="219:39" pos:end="219:46">VE_UART0</name></expr>]</index></name></expr></argument>, <argument pos:start="219:50" pos:end="219:55"><expr pos:start="219:50" pos:end="219:55"><name pos:start="219:50" pos:end="219:55"><name pos:start="219:50" pos:end="219:52">pic</name><index pos:start="219:53" pos:end="219:55">[<expr pos:start="219:54" pos:end="219:54"><literal type="number" pos:start="219:54" pos:end="219:54">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:57"><expr pos:start="221:5" pos:end="221:56"><call pos:start="221:5" pos:end="221:56"><name pos:start="221:5" pos:end="221:24">sysbus_create_simple</name><argument_list pos:start="221:25" pos:end="221:56">(<argument pos:start="221:26" pos:end="221:32"><expr pos:start="221:26" pos:end="221:32"><literal type="string" pos:start="221:26" pos:end="221:32">"pl011"</literal></expr></argument>, <argument pos:start="221:35" pos:end="221:47"><expr pos:start="221:35" pos:end="221:47"><name pos:start="221:35" pos:end="221:47"><name pos:start="221:35" pos:end="221:37">map</name><index pos:start="221:38" pos:end="221:47">[<expr pos:start="221:39" pos:end="221:46"><name pos:start="221:39" pos:end="221:46">VE_UART1</name></expr>]</index></name></expr></argument>, <argument pos:start="221:50" pos:end="221:55"><expr pos:start="221:50" pos:end="221:55"><name pos:start="221:50" pos:end="221:55"><name pos:start="221:50" pos:end="221:52">pic</name><index pos:start="221:53" pos:end="221:55">[<expr pos:start="221:54" pos:end="221:54"><literal type="number" pos:start="221:54" pos:end="221:54">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:57"><expr pos:start="223:5" pos:end="223:56"><call pos:start="223:5" pos:end="223:56"><name pos:start="223:5" pos:end="223:24">sysbus_create_simple</name><argument_list pos:start="223:25" pos:end="223:56">(<argument pos:start="223:26" pos:end="223:32"><expr pos:start="223:26" pos:end="223:32"><literal type="string" pos:start="223:26" pos:end="223:32">"pl011"</literal></expr></argument>, <argument pos:start="223:35" pos:end="223:47"><expr pos:start="223:35" pos:end="223:47"><name pos:start="223:35" pos:end="223:47"><name pos:start="223:35" pos:end="223:37">map</name><index pos:start="223:38" pos:end="223:47">[<expr pos:start="223:39" pos:end="223:46"><name pos:start="223:39" pos:end="223:46">VE_UART2</name></expr>]</index></name></expr></argument>, <argument pos:start="223:50" pos:end="223:55"><expr pos:start="223:50" pos:end="223:55"><name pos:start="223:50" pos:end="223:55"><name pos:start="223:50" pos:end="223:52">pic</name><index pos:start="223:53" pos:end="223:55">[<expr pos:start="223:54" pos:end="223:54"><literal type="number" pos:start="223:54" pos:end="223:54">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:57"><expr pos:start="225:5" pos:end="225:56"><call pos:start="225:5" pos:end="225:56"><name pos:start="225:5" pos:end="225:24">sysbus_create_simple</name><argument_list pos:start="225:25" pos:end="225:56">(<argument pos:start="225:26" pos:end="225:32"><expr pos:start="225:26" pos:end="225:32"><literal type="string" pos:start="225:26" pos:end="225:32">"pl011"</literal></expr></argument>, <argument pos:start="225:35" pos:end="225:47"><expr pos:start="225:35" pos:end="225:47"><name pos:start="225:35" pos:end="225:47"><name pos:start="225:35" pos:end="225:37">map</name><index pos:start="225:38" pos:end="225:47">[<expr pos:start="225:39" pos:end="225:46"><name pos:start="225:39" pos:end="225:46">VE_UART3</name></expr>]</index></name></expr></argument>, <argument pos:start="225:50" pos:end="225:55"><expr pos:start="225:50" pos:end="225:55"><name pos:start="225:50" pos:end="225:55"><name pos:start="225:50" pos:end="225:52">pic</name><index pos:start="225:53" pos:end="225:55">[<expr pos:start="225:54" pos:end="225:54"><literal type="number" pos:start="225:54" pos:end="225:54">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="229:5" pos:end="229:59"><expr pos:start="229:5" pos:end="229:58"><call pos:start="229:5" pos:end="229:58"><name pos:start="229:5" pos:end="229:24">sysbus_create_simple</name><argument_list pos:start="229:25" pos:end="229:58">(<argument pos:start="229:26" pos:end="229:32"><expr pos:start="229:26" pos:end="229:32"><literal type="string" pos:start="229:26" pos:end="229:32">"sp804"</literal></expr></argument>, <argument pos:start="229:35" pos:end="229:49"><expr pos:start="229:35" pos:end="229:49"><name pos:start="229:35" pos:end="229:49"><name pos:start="229:35" pos:end="229:37">map</name><index pos:start="229:38" pos:end="229:49">[<expr pos:start="229:39" pos:end="229:48"><name pos:start="229:39" pos:end="229:48">VE_TIMER01</name></expr>]</index></name></expr></argument>, <argument pos:start="229:52" pos:end="229:57"><expr pos:start="229:52" pos:end="229:57"><name pos:start="229:52" pos:end="229:57"><name pos:start="229:52" pos:end="229:54">pic</name><index pos:start="229:55" pos:end="229:57">[<expr pos:start="229:56" pos:end="229:56"><literal type="number" pos:start="229:56" pos:end="229:56">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:59"><expr pos:start="231:5" pos:end="231:58"><call pos:start="231:5" pos:end="231:58"><name pos:start="231:5" pos:end="231:24">sysbus_create_simple</name><argument_list pos:start="231:25" pos:end="231:58">(<argument pos:start="231:26" pos:end="231:32"><expr pos:start="231:26" pos:end="231:32"><literal type="string" pos:start="231:26" pos:end="231:32">"sp804"</literal></expr></argument>, <argument pos:start="231:35" pos:end="231:49"><expr pos:start="231:35" pos:end="231:49"><name pos:start="231:35" pos:end="231:49"><name pos:start="231:35" pos:end="231:37">map</name><index pos:start="231:38" pos:end="231:49">[<expr pos:start="231:39" pos:end="231:48"><name pos:start="231:39" pos:end="231:48">VE_TIMER23</name></expr>]</index></name></expr></argument>, <argument pos:start="231:52" pos:end="231:57"><expr pos:start="231:52" pos:end="231:57"><name pos:start="231:52" pos:end="231:57"><name pos:start="231:52" pos:end="231:54">pic</name><index pos:start="231:55" pos:end="231:57">[<expr pos:start="231:56" pos:end="231:56"><literal type="number" pos:start="231:56" pos:end="231:56">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="235:5" pos:end="235:36">/* VE_SERIALDVI: not modelled */</comment>



    <expr_stmt pos:start="239:5" pos:end="239:55"><expr pos:start="239:5" pos:end="239:54"><call pos:start="239:5" pos:end="239:54"><name pos:start="239:5" pos:end="239:24">sysbus_create_simple</name><argument_list pos:start="239:25" pos:end="239:54">(<argument pos:start="239:26" pos:end="239:32"><expr pos:start="239:26" pos:end="239:32"><literal type="string" pos:start="239:26" pos:end="239:32">"pl031"</literal></expr></argument>, <argument pos:start="239:35" pos:end="239:45"><expr pos:start="239:35" pos:end="239:45"><name pos:start="239:35" pos:end="239:45"><name pos:start="239:35" pos:end="239:37">map</name><index pos:start="239:38" pos:end="239:45">[<expr pos:start="239:39" pos:end="239:44"><name pos:start="239:39" pos:end="239:44">VE_RTC</name></expr>]</index></name></expr></argument>, <argument pos:start="239:48" pos:end="239:53"><expr pos:start="239:48" pos:end="239:53"><name pos:start="239:48" pos:end="239:53"><name pos:start="239:48" pos:end="239:50">pic</name><index pos:start="239:51" pos:end="239:53">[<expr pos:start="239:52" pos:end="239:52"><literal type="number" pos:start="239:52" pos:end="239:52">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="239:57" pos:end="239:65">/* RTC */</comment>



    <comment type="block" pos:start="243:5" pos:end="243:39">/* VE_COMPACTFLASH: not modelled */</comment>



    <comment type="block" pos:start="247:5" pos:end="247:68">/* VE_CLCD: not modelled (we use the daughterboard CLCD only) */</comment>



    <comment type="block" pos:start="251:5" pos:end="251:62">/* Daughterboard peripherals : 0x10020000 .. 0x20000000 */</comment>



    <comment type="block" pos:start="255:5" pos:end="255:47">/* 0x10020000 PL111 CLCD (daughterboard) */</comment>

    <expr_stmt pos:start="257:5" pos:end="257:55"><expr pos:start="257:5" pos:end="257:54"><call pos:start="257:5" pos:end="257:54"><name pos:start="257:5" pos:end="257:24">sysbus_create_simple</name><argument_list pos:start="257:25" pos:end="257:54">(<argument pos:start="257:26" pos:end="257:32"><expr pos:start="257:26" pos:end="257:32"><literal type="string" pos:start="257:26" pos:end="257:32">"pl111"</literal></expr></argument>, <argument pos:start="257:35" pos:end="257:44"><expr pos:start="257:35" pos:end="257:44"><literal type="number" pos:start="257:35" pos:end="257:44">0x10020000</literal></expr></argument>, <argument pos:start="257:47" pos:end="257:53"><expr pos:start="257:47" pos:end="257:53"><name pos:start="257:47" pos:end="257:53"><name pos:start="257:47" pos:end="257:49">pic</name><index pos:start="257:50" pos:end="257:53">[<expr pos:start="257:51" pos:end="257:52"><literal type="number" pos:start="257:51" pos:end="257:52">44</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:28">/* 0x10060000 AXI RAM */</comment>

    <comment type="block" pos:start="263:5" pos:end="263:52">/* 0x100e0000 PL341 Dynamic Memory Controller */</comment>

    <comment type="block" pos:start="265:5" pos:end="265:51">/* 0x100e1000 PL354 Static Memory Controller */</comment>

    <comment type="block" pos:start="267:5" pos:end="267:52">/* 0x100e2000 System Configuration Controller */</comment>



    <expr_stmt pos:start="271:5" pos:end="271:55"><expr pos:start="271:5" pos:end="271:54"><call pos:start="271:5" pos:end="271:54"><name pos:start="271:5" pos:end="271:24">sysbus_create_simple</name><argument_list pos:start="271:25" pos:end="271:54">(<argument pos:start="271:26" pos:end="271:32"><expr pos:start="271:26" pos:end="271:32"><literal type="string" pos:start="271:26" pos:end="271:32">"sp804"</literal></expr></argument>, <argument pos:start="271:35" pos:end="271:44"><expr pos:start="271:35" pos:end="271:44"><literal type="number" pos:start="271:35" pos:end="271:44">0x100e4000</literal></expr></argument>, <argument pos:start="271:47" pos:end="271:53"><expr pos:start="271:47" pos:end="271:53"><name pos:start="271:47" pos:end="271:53"><name pos:start="271:47" pos:end="271:49">pic</name><index pos:start="271:50" pos:end="271:53">[<expr pos:start="271:51" pos:end="271:52"><literal type="number" pos:start="271:51" pos:end="271:52">48</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="273:5" pos:end="273:42">/* 0x100e5000 SP805 Watchdog module */</comment>

    <comment type="block" pos:start="275:5" pos:end="275:58">/* 0x100e6000 BP147 TrustZone Protection Controller */</comment>

    <comment type="block" pos:start="277:5" pos:end="277:44">/* 0x100e9000 PL301 'Fast' AXI matrix */</comment>

    <comment type="block" pos:start="279:5" pos:end="279:44">/* 0x100ea000 PL301 'Slow' AXI matrix */</comment>

    <comment type="block" pos:start="281:5" pos:end="281:55">/* 0x100ec000 TrustZone Address Space Controller */</comment>

    <comment type="block" pos:start="283:5" pos:end="283:40">/* 0x10200000 CoreSight debug APB */</comment>

    <comment type="block" pos:start="285:5" pos:end="285:46">/* 0x1e00a000 PL310 L2 Cache Controller */</comment>

    <expr_stmt pos:start="287:5" pos:end="287:52"><expr pos:start="287:5" pos:end="287:51"><call pos:start="287:5" pos:end="287:51"><name pos:start="287:5" pos:end="287:25">sysbus_create_varargs</name><argument_list pos:start="287:26" pos:end="287:51">(<argument pos:start="287:27" pos:end="287:32"><expr pos:start="287:27" pos:end="287:32"><literal type="string" pos:start="287:27" pos:end="287:32">"l2x0"</literal></expr></argument>, <argument pos:start="287:35" pos:end="287:44"><expr pos:start="287:35" pos:end="287:44"><literal type="number" pos:start="287:35" pos:end="287:44">0x1e00a000</literal></expr></argument>, <argument pos:start="287:47" pos:end="287:50"><expr pos:start="287:47" pos:end="287:50"><name pos:start="287:47" pos:end="287:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:36">/* VE_NORFLASH0: not modelled */</comment>

    <comment type="block" pos:start="293:5" pos:end="293:41">/* VE_NORFLASH0ALIAS: not modelled */</comment>

    <comment type="block" pos:start="295:5" pos:end="295:36">/* VE_NORFLASH1: not modelled */</comment>



    <expr_stmt pos:start="299:5" pos:end="299:26"><expr pos:start="299:5" pos:end="299:25"><name pos:start="299:5" pos:end="299:13">sram_size</name> <operator pos:start="299:15" pos:end="299:15">=</operator> <literal type="number" pos:start="299:17" pos:end="299:25">0x2000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:61"><expr pos:start="301:5" pos:end="301:60"><call pos:start="301:5" pos:end="301:60"><name pos:start="301:5" pos:end="301:26">memory_region_init_ram</name><argument_list pos:start="301:27" pos:end="301:60">(<argument pos:start="301:28" pos:end="301:31"><expr pos:start="301:28" pos:end="301:31"><name pos:start="301:28" pos:end="301:31">sram</name></expr></argument>, <argument pos:start="301:34" pos:end="301:48"><expr pos:start="301:34" pos:end="301:48"><literal type="string" pos:start="301:34" pos:end="301:48">"vexpress.sram"</literal></expr></argument>, <argument pos:start="301:51" pos:end="301:59"><expr pos:start="301:51" pos:end="301:59"><name pos:start="301:51" pos:end="301:59">sram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:38"><expr pos:start="303:5" pos:end="303:37"><call pos:start="303:5" pos:end="303:37"><name pos:start="303:5" pos:end="303:31">vmstate_register_ram_global</name><argument_list pos:start="303:32" pos:end="303:37">(<argument pos:start="303:33" pos:end="303:36"><expr pos:start="303:33" pos:end="303:36"><name pos:start="303:33" pos:end="303:36">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:60"><expr pos:start="305:5" pos:end="305:59"><call pos:start="305:5" pos:end="305:59"><name pos:start="305:5" pos:end="305:31">memory_region_add_subregion</name><argument_list pos:start="305:32" pos:end="305:59">(<argument pos:start="305:33" pos:end="305:38"><expr pos:start="305:33" pos:end="305:38"><name pos:start="305:33" pos:end="305:38">sysmem</name></expr></argument>, <argument pos:start="305:41" pos:end="305:52"><expr pos:start="305:41" pos:end="305:52"><name pos:start="305:41" pos:end="305:52"><name pos:start="305:41" pos:end="305:43">map</name><index pos:start="305:44" pos:end="305:52">[<expr pos:start="305:45" pos:end="305:51"><name pos:start="305:45" pos:end="305:51">VE_SRAM</name></expr>]</index></name></expr></argument>, <argument pos:start="305:55" pos:end="305:58"><expr pos:start="305:55" pos:end="305:58"><name pos:start="305:55" pos:end="305:58">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="309:5" pos:end="309:25"><expr pos:start="309:5" pos:end="309:24"><name pos:start="309:5" pos:end="309:13">vram_size</name> <operator pos:start="309:15" pos:end="309:15">=</operator> <literal type="number" pos:start="309:17" pos:end="309:24">0x800000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="311:5" pos:end="311:61"><expr pos:start="311:5" pos:end="311:60"><call pos:start="311:5" pos:end="311:60"><name pos:start="311:5" pos:end="311:26">memory_region_init_ram</name><argument_list pos:start="311:27" pos:end="311:60">(<argument pos:start="311:28" pos:end="311:31"><expr pos:start="311:28" pos:end="311:31"><name pos:start="311:28" pos:end="311:31">vram</name></expr></argument>, <argument pos:start="311:34" pos:end="311:48"><expr pos:start="311:34" pos:end="311:48"><literal type="string" pos:start="311:34" pos:end="311:48">"vexpress.vram"</literal></expr></argument>, <argument pos:start="311:51" pos:end="311:59"><expr pos:start="311:51" pos:end="311:59"><name pos:start="311:51" pos:end="311:59">vram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:38"><expr pos:start="313:5" pos:end="313:37"><call pos:start="313:5" pos:end="313:37"><name pos:start="313:5" pos:end="313:31">vmstate_register_ram_global</name><argument_list pos:start="313:32" pos:end="313:37">(<argument pos:start="313:33" pos:end="313:36"><expr pos:start="313:33" pos:end="313:36"><name pos:start="313:33" pos:end="313:36">vram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:64"><expr pos:start="315:5" pos:end="315:63"><call pos:start="315:5" pos:end="315:63"><name pos:start="315:5" pos:end="315:31">memory_region_add_subregion</name><argument_list pos:start="315:32" pos:end="315:63">(<argument pos:start="315:33" pos:end="315:38"><expr pos:start="315:33" pos:end="315:38"><name pos:start="315:33" pos:end="315:38">sysmem</name></expr></argument>, <argument pos:start="315:41" pos:end="315:56"><expr pos:start="315:41" pos:end="315:56"><name pos:start="315:41" pos:end="315:56"><name pos:start="315:41" pos:end="315:43">map</name><index pos:start="315:44" pos:end="315:56">[<expr pos:start="315:45" pos:end="315:55"><name pos:start="315:45" pos:end="315:55">VE_VIDEORAM</name></expr>]</index></name></expr></argument>, <argument pos:start="315:59" pos:end="315:62"><expr pos:start="315:59" pos:end="315:62"><name pos:start="315:59" pos:end="315:62">vram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="319:5" pos:end="319:37">/* 0x4e000000 LAN9118 Ethernet */</comment>

    <if_stmt pos:start="321:5" pos:end="325:5"><if pos:start="321:5" pos:end="325:5">if <condition pos:start="321:8" pos:end="321:25">(<expr pos:start="321:9" pos:end="321:24"><name pos:start="321:9" pos:end="321:19"><name pos:start="321:9" pos:end="321:16">nd_table</name><index pos:start="321:17" pos:end="321:19">[<expr pos:start="321:18" pos:end="321:18"><literal type="number" pos:start="321:18" pos:end="321:18">0</literal></expr>]</index></name><operator pos:start="321:20" pos:end="321:20">.</operator><name pos:start="321:21" pos:end="321:24">vlan</name></expr>)</condition> <block pos:start="321:27" pos:end="325:5">{<block_content pos:start="323:9" pos:end="323:62">

        <expr_stmt pos:start="323:9" pos:end="323:62"><expr pos:start="323:9" pos:end="323:61"><call pos:start="323:9" pos:end="323:61"><name pos:start="323:9" pos:end="323:20">lan9118_init</name><argument_list pos:start="323:21" pos:end="323:61">(<argument pos:start="323:22" pos:end="323:33"><expr pos:start="323:22" pos:end="323:33"><operator pos:start="323:22" pos:end="323:22">&amp;</operator><name pos:start="323:23" pos:end="323:33"><name pos:start="323:23" pos:end="323:30">nd_table</name><index pos:start="323:31" pos:end="323:33">[<expr pos:start="323:32" pos:end="323:32"><literal type="number" pos:start="323:32" pos:end="323:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="323:36" pos:end="323:51"><expr pos:start="323:36" pos:end="323:51"><name pos:start="323:36" pos:end="323:51"><name pos:start="323:36" pos:end="323:38">map</name><index pos:start="323:39" pos:end="323:51">[<expr pos:start="323:40" pos:end="323:50"><name pos:start="323:40" pos:end="323:50">VE_ETHERNET</name></expr>]</index></name></expr></argument>, <argument pos:start="323:54" pos:end="323:60"><expr pos:start="323:54" pos:end="323:60"><name pos:start="323:54" pos:end="323:60"><name pos:start="323:54" pos:end="323:56">pic</name><index pos:start="323:57" pos:end="323:60">[<expr pos:start="323:58" pos:end="323:59"><literal type="number" pos:start="323:58" pos:end="323:59">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="329:5" pos:end="329:30">/* VE_USB: not modelled */</comment>



    <comment type="block" pos:start="333:5" pos:end="333:33">/* VE_DAPROM: not modelled */</comment>



    <comment type="block" pos:start="337:5" pos:end="343:54">/* ??? Hack to map an additional page of ram for the secondary CPU

       startup code.  I guess this works on real hardware because the

       BootROM happens to be in ROM/flash or in memory that isn't clobbered

       until after Linux boots the secondary CPUs.  */</comment>

    <expr_stmt pos:start="345:5" pos:end="345:61"><expr pos:start="345:5" pos:end="345:60"><call pos:start="345:5" pos:end="345:60"><name pos:start="345:5" pos:end="345:26">memory_region_init_ram</name><argument_list pos:start="345:27" pos:end="345:60">(<argument pos:start="345:28" pos:end="345:34"><expr pos:start="345:28" pos:end="345:34"><name pos:start="345:28" pos:end="345:34">hackram</name></expr></argument>, <argument pos:start="345:37" pos:end="345:51"><expr pos:start="345:37" pos:end="345:51"><literal type="string" pos:start="345:37" pos:end="345:51">"vexpress.hack"</literal></expr></argument>, <argument pos:start="345:54" pos:end="345:59"><expr pos:start="345:54" pos:end="345:59"><literal type="number" pos:start="345:54" pos:end="345:59">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:41"><expr pos:start="347:5" pos:end="347:40"><call pos:start="347:5" pos:end="347:40"><name pos:start="347:5" pos:end="347:31">vmstate_register_ram_global</name><argument_list pos:start="347:32" pos:end="347:40">(<argument pos:start="347:33" pos:end="347:39"><expr pos:start="347:33" pos:end="347:39"><name pos:start="347:33" pos:end="347:39">hackram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:64"><expr pos:start="349:5" pos:end="349:63"><call pos:start="349:5" pos:end="349:63"><name pos:start="349:5" pos:end="349:31">memory_region_add_subregion</name><argument_list pos:start="349:32" pos:end="349:63">(<argument pos:start="349:33" pos:end="349:38"><expr pos:start="349:33" pos:end="349:38"><name pos:start="349:33" pos:end="349:38">sysmem</name></expr></argument>, <argument pos:start="349:41" pos:end="349:53"><expr pos:start="349:41" pos:end="349:53"><name pos:start="349:41" pos:end="349:53">SMP_BOOT_ADDR</name></expr></argument>, <argument pos:start="349:56" pos:end="349:62"><expr pos:start="349:56" pos:end="349:62"><name pos:start="349:56" pos:end="349:62">hackram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="353:5" pos:end="353:39"><expr pos:start="353:5" pos:end="353:38"><name pos:start="353:5" pos:end="353:27"><name pos:start="353:5" pos:end="353:18">vexpress_binfo</name><operator pos:start="353:19" pos:end="353:19">.</operator><name pos:start="353:20" pos:end="353:27">ram_size</name></name> <operator pos:start="353:29" pos:end="353:29">=</operator> <name pos:start="353:31" pos:end="353:38">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:53"><expr pos:start="355:5" pos:end="355:52"><name pos:start="355:5" pos:end="355:34"><name pos:start="355:5" pos:end="355:18">vexpress_binfo</name><operator pos:start="355:19" pos:end="355:19">.</operator><name pos:start="355:20" pos:end="355:34">kernel_filename</name></name> <operator pos:start="355:36" pos:end="355:36">=</operator> <name pos:start="355:38" pos:end="355:52">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:51"><expr pos:start="357:5" pos:end="357:50"><name pos:start="357:5" pos:end="357:33"><name pos:start="357:5" pos:end="357:18">vexpress_binfo</name><operator pos:start="357:19" pos:end="357:19">.</operator><name pos:start="357:20" pos:end="357:33">kernel_cmdline</name></name> <operator pos:start="357:35" pos:end="357:35">=</operator> <name pos:start="357:37" pos:end="357:50">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:53"><expr pos:start="359:5" pos:end="359:52"><name pos:start="359:5" pos:end="359:34"><name pos:start="359:5" pos:end="359:18">vexpress_binfo</name><operator pos:start="359:19" pos:end="359:19">.</operator><name pos:start="359:20" pos:end="359:34">initrd_filename</name></name> <operator pos:start="359:36" pos:end="359:36">=</operator> <name pos:start="359:38" pos:end="359:52">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:38"><expr pos:start="361:5" pos:end="361:37"><name pos:start="361:5" pos:end="361:26"><name pos:start="361:5" pos:end="361:18">vexpress_binfo</name><operator pos:start="361:19" pos:end="361:19">.</operator><name pos:start="361:20" pos:end="361:26">nb_cpus</name></name> <operator pos:start="361:28" pos:end="361:28">=</operator> <name pos:start="361:30" pos:end="361:37">smp_cpus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:48"><expr pos:start="363:5" pos:end="363:47"><name pos:start="363:5" pos:end="363:27"><name pos:start="363:5" pos:end="363:18">vexpress_binfo</name><operator pos:start="363:19" pos:end="363:19">.</operator><name pos:start="363:20" pos:end="363:27">board_id</name></name> <operator pos:start="363:29" pos:end="363:29">=</operator> <name pos:start="363:31" pos:end="363:47">VEXPRESS_BOARD_ID</name></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:45"><expr pos:start="365:5" pos:end="365:44"><name pos:start="365:5" pos:end="365:31"><name pos:start="365:5" pos:end="365:18">vexpress_binfo</name><operator pos:start="365:19" pos:end="365:19">.</operator><name pos:start="365:20" pos:end="365:31">loader_start</name></name> <operator pos:start="365:33" pos:end="365:33">=</operator> <literal type="number" pos:start="365:35" pos:end="365:44">0x60000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:61"><expr pos:start="367:5" pos:end="367:60"><name pos:start="367:5" pos:end="367:35"><name pos:start="367:5" pos:end="367:18">vexpress_binfo</name><operator pos:start="367:19" pos:end="367:19">.</operator><name pos:start="367:20" pos:end="367:35">smp_bootreg_addr</name></name> <operator pos:start="367:37" pos:end="367:37">=</operator> <name pos:start="367:39" pos:end="367:53"><name pos:start="367:39" pos:end="367:41">map</name><index pos:start="367:42" pos:end="367:53">[<expr pos:start="367:43" pos:end="367:52"><name pos:start="367:43" pos:end="367:52">VE_SYSREGS</name></expr>]</index></name> <operator pos:start="367:55" pos:end="367:55">+</operator> <literal type="number" pos:start="367:57" pos:end="367:60">0x30</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:48"><expr pos:start="369:5" pos:end="369:47"><call pos:start="369:5" pos:end="369:47"><name pos:start="369:5" pos:end="369:19">arm_load_kernel</name><argument_list pos:start="369:20" pos:end="369:47">(<argument pos:start="369:21" pos:end="369:29"><expr pos:start="369:21" pos:end="369:29"><name pos:start="369:21" pos:end="369:29">first_cpu</name></expr></argument>, <argument pos:start="369:32" pos:end="369:46"><expr pos:start="369:32" pos:end="369:46"><operator pos:start="369:32" pos:end="369:32">&amp;</operator><name pos:start="369:33" pos:end="369:46">vexpress_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
