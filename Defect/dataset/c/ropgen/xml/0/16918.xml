<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16918.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">rtas_set_indicator</name><parameter_list pos:start="1:31" pos:end="7:49">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:41">PowerPCCPU</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">cpu</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:72"><decl pos:start="1:49" pos:end="1:72"><type pos:start="1:49" pos:end="1:72"><name pos:start="1:49" pos:end="1:65">sPAPRMachineState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">spapr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:45"><decl pos:start="3:32" pos:end="3:45"><type pos:start="3:32" pos:end="3:45"><name pos:start="3:32" pos:end="3:39">uint32_t</name></type> <name pos:start="3:41" pos:end="3:45">token</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:61"><decl pos:start="3:48" pos:end="3:61"><type pos:start="3:48" pos:end="3:61"><name pos:start="3:48" pos:end="3:55">uint32_t</name></type> <name pos:start="3:57" pos:end="3:61">nargs</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:48"><decl pos:start="5:32" pos:end="5:48"><type pos:start="5:32" pos:end="5:48"><name pos:start="5:32" pos:end="5:43">target_ulong</name></type> <name pos:start="5:45" pos:end="5:48">args</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:63"><decl pos:start="5:51" pos:end="5:63"><type pos:start="5:51" pos:end="5:63"><name pos:start="5:51" pos:end="5:58">uint32_t</name></type> <name pos:start="5:60" pos:end="5:63">nret</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:48"><decl pos:start="7:32" pos:end="7:48"><type pos:start="7:32" pos:end="7:48"><name pos:start="7:32" pos:end="7:43">target_ulong</name></type> <name pos:start="7:45" pos:end="7:48">rets</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="113:1">{<block_content pos:start="11:5" pos:end="111:45">

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">sensor_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:25">sensor_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:25">sensor_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:16">ret</name> <init pos:start="17:18" pos:end="17:35">= <expr pos:start="17:20" pos:end="17:35"><name pos:start="17:20" pos:end="17:35">RTAS_OUT_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">sPAPRDRConnector</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:25">drc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:25">sPAPRDRConnectorClass</name> <modifier pos:start="21:27" pos:end="21:27">*</modifier></type><name pos:start="21:28" pos:end="21:31">drck</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:32">(<expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:13">nargs</name> <operator pos:start="25:15" pos:end="25:16">!=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">3</literal> <operator pos:start="25:20" pos:end="25:21">||</operator> <name pos:start="25:23" pos:end="25:26">nret</name> <operator pos:start="25:28" pos:end="25:29">!=</operator> <literal type="number" pos:start="25:31" pos:end="25:31">1</literal></expr>)</condition> <block pos:start="25:34" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:34">RTAS_OUT_PARAM_ERROR</name></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:15">sensor_type</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:34"><name pos:start="35:19" pos:end="35:25">rtas_ld</name><argument_list pos:start="35:26" pos:end="35:34">(<argument pos:start="35:27" pos:end="35:30"><expr pos:start="35:27" pos:end="35:30"><name pos:start="35:27" pos:end="35:30">args</name></expr></argument>, <argument pos:start="35:33" pos:end="35:33"><expr pos:start="35:33" pos:end="35:33"><literal type="number" pos:start="35:33" pos:end="35:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:36"><expr pos:start="37:5" pos:end="37:35"><name pos:start="37:5" pos:end="37:16">sensor_index</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:35"><name pos:start="37:20" pos:end="37:26">rtas_ld</name><argument_list pos:start="37:27" pos:end="37:35">(<argument pos:start="37:28" pos:end="37:31"><expr pos:start="37:28" pos:end="37:31"><name pos:start="37:28" pos:end="37:31">args</name></expr></argument>, <argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><literal type="number" pos:start="37:34" pos:end="37:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:16">sensor_state</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:35"><name pos:start="39:20" pos:end="39:26">rtas_ld</name><argument_list pos:start="39:27" pos:end="39:35">(<argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">args</name></expr></argument>, <argument pos:start="39:34" pos:end="39:34"><expr pos:start="39:34" pos:end="39:34"><literal type="number" pos:start="39:34" pos:end="39:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:40">(<expr pos:start="43:9" pos:end="43:39"><operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:39"><name pos:start="43:10" pos:end="43:26">sensor_type_is_dr</name><argument_list pos:start="43:27" pos:end="43:39">(<argument pos:start="43:28" pos:end="43:38"><expr pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:38">sensor_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:42" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:31">

        <goto pos:start="45:9" pos:end="45:31">goto <name pos:start="45:14" pos:end="45:30">out_unimplemented</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:72">/* if this is a DR sensor we can assume sensor_index == drc_index */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:43"><expr pos:start="53:5" pos:end="53:42"><name pos:start="53:5" pos:end="53:7">drc</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:42"><name pos:start="53:11" pos:end="53:28">spapr_drc_by_index</name><argument_list pos:start="53:29" pos:end="53:42">(<argument pos:start="53:30" pos:end="53:41"><expr pos:start="53:30" pos:end="53:41"><name pos:start="53:30" pos:end="53:41">sensor_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:13">(<expr pos:start="55:9" pos:end="55:12"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:12">drc</name></expr>)</condition> <block pos:start="55:15" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:17">

        <expr_stmt pos:start="57:9" pos:end="57:61"><expr pos:start="57:9" pos:end="57:60"><call pos:start="57:9" pos:end="57:60"><name pos:start="57:9" pos:end="57:46">trace_spapr_rtas_set_indicator_invalid</name><argument_list pos:start="57:47" pos:end="57:60">(<argument pos:start="57:48" pos:end="57:59"><expr pos:start="57:48" pos:end="57:59"><name pos:start="57:48" pos:end="57:59">sensor_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:34">RTAS_OUT_PARAM_ERROR</name></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:17">goto <name pos:start="61:14" pos:end="61:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:8">drck</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <call pos:start="65:12" pos:end="65:44"><name pos:start="65:12" pos:end="65:39">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="65:40" pos:end="65:44">(<argument pos:start="65:41" pos:end="65:43"><expr pos:start="65:41" pos:end="65:43"><name pos:start="65:41" pos:end="65:43">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="69:5" pos:end="93:5">switch <condition pos:start="69:12" pos:end="69:24">(<expr pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:23">sensor_type</name></expr>)</condition> <block pos:start="69:26" pos:end="93:5">{<block_content pos:start="71:5" pos:end="91:31">

    <case pos:start="71:5" pos:end="71:42">case <expr pos:start="71:10" pos:end="71:41"><name pos:start="71:10" pos:end="71:41">RTAS_SENSOR_TYPE_ISOLATION_STATE</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:59"><expr pos:start="73:9" pos:end="73:58"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:58"><name pos:start="73:15" pos:end="73:39"><name pos:start="73:15" pos:end="73:18">drck</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:39">set_isolation_state</name></name><argument_list pos:start="73:40" pos:end="73:58">(<argument pos:start="73:41" pos:end="73:43"><expr pos:start="73:41" pos:end="73:43"><name pos:start="73:41" pos:end="73:43">drc</name></expr></argument>, <argument pos:start="73:46" pos:end="73:57"><expr pos:start="73:46" pos:end="73:57"><name pos:start="73:46" pos:end="73:57">sensor_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:29">case <expr pos:start="77:10" pos:end="77:28"><name pos:start="77:10" pos:end="77:28">RTAS_SENSOR_TYPE_DR</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:58"><name pos:start="79:15" pos:end="79:39"><name pos:start="79:15" pos:end="79:18">drck</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:39">set_indicator_state</name></name><argument_list pos:start="79:40" pos:end="79:58">(<argument pos:start="79:41" pos:end="79:43"><expr pos:start="79:41" pos:end="79:43"><name pos:start="79:41" pos:end="79:43">drc</name></expr></argument>, <argument pos:start="79:46" pos:end="79:57"><expr pos:start="79:46" pos:end="79:57"><name pos:start="79:46" pos:end="79:57">sensor_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:43">case <expr pos:start="83:10" pos:end="83:42"><name pos:start="83:10" pos:end="83:42">RTAS_SENSOR_TYPE_ALLOCATION_STATE</name></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="85:60"><expr pos:start="85:9" pos:end="85:59"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:59"><name pos:start="85:15" pos:end="85:40"><name pos:start="85:15" pos:end="85:18">drck</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:40">set_allocation_state</name></name><argument_list pos:start="85:41" pos:end="85:59">(<argument pos:start="85:42" pos:end="85:44"><expr pos:start="85:42" pos:end="85:44"><name pos:start="85:42" pos:end="85:44">drc</name></expr></argument>, <argument pos:start="85:47" pos:end="85:58"><expr pos:start="85:47" pos:end="85:58"><name pos:start="85:47" pos:end="85:58">sensor_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <default pos:start="89:5" pos:end="89:12">default:</default>

        <goto pos:start="91:9" pos:end="91:31">goto <name pos:start="91:14" pos:end="91:30">out_unimplemented</name>;</goto>

    </block_content>}</block></switch>



<label pos:start="97:1" pos:end="97:4"><name pos:start="97:1" pos:end="97:3">out</name>:</label>

    <expr_stmt pos:start="99:5" pos:end="99:26"><expr pos:start="99:5" pos:end="99:25"><call pos:start="99:5" pos:end="99:25"><name pos:start="99:5" pos:end="99:11">rtas_st</name><argument_list pos:start="99:12" pos:end="99:25">(<argument pos:start="99:13" pos:end="99:16"><expr pos:start="99:13" pos:end="99:16"><name pos:start="99:13" pos:end="99:16">rets</name></expr></argument>, <argument pos:start="99:19" pos:end="99:19"><expr pos:start="99:19" pos:end="99:19"><literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr></argument>, <argument pos:start="99:22" pos:end="99:24"><expr pos:start="99:22" pos:end="99:24"><name pos:start="99:22" pos:end="99:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:11">return;</return>



<label pos:start="105:1" pos:end="105:18"><name pos:start="105:1" pos:end="105:17">out_unimplemented</name>:</label>

    <comment type="block" pos:start="107:5" pos:end="107:59">/* currently only DR-related sensors are implemented */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:76"><expr pos:start="109:5" pos:end="109:75"><call pos:start="109:5" pos:end="109:75"><name pos:start="109:5" pos:end="109:48">trace_spapr_rtas_set_indicator_not_supported</name><argument_list pos:start="109:49" pos:end="109:75">(<argument pos:start="109:50" pos:end="109:61"><expr pos:start="109:50" pos:end="109:61"><name pos:start="109:50" pos:end="109:61">sensor_index</name></expr></argument>, <argument pos:start="109:64" pos:end="109:74"><expr pos:start="109:64" pos:end="109:74"><name pos:start="109:64" pos:end="109:74">sensor_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:45"><expr pos:start="111:5" pos:end="111:44"><call pos:start="111:5" pos:end="111:44"><name pos:start="111:5" pos:end="111:11">rtas_st</name><argument_list pos:start="111:12" pos:end="111:44">(<argument pos:start="111:13" pos:end="111:16"><expr pos:start="111:13" pos:end="111:16"><name pos:start="111:13" pos:end="111:16">rets</name></expr></argument>, <argument pos:start="111:19" pos:end="111:19"><expr pos:start="111:19" pos:end="111:19"><literal type="number" pos:start="111:19" pos:end="111:19">0</literal></expr></argument>, <argument pos:start="111:22" pos:end="111:43"><expr pos:start="111:22" pos:end="111:43"><name pos:start="111:22" pos:end="111:43">RTAS_OUT_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
