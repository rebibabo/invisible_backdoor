<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10121.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">dump_init</name><parameter_list pos:start="1:21" pos:end="3:65">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:30">DumpState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">s</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:41"><decl pos:start="1:36" pos:end="1:41"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:41">fd</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:47">bool</name></type> <name pos:start="1:49" pos:end="1:54">paging</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><name pos:start="1:57" pos:end="1:60">bool</name></type> <name pos:start="1:62" pos:end="1:71">has_filter</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:34"><decl pos:start="3:22" pos:end="3:34"><type pos:start="3:22" pos:end="3:34"><name pos:start="3:22" pos:end="3:28">int64_t</name></type> <name pos:start="3:30" pos:end="3:34">begin</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:50"><decl pos:start="3:37" pos:end="3:50"><type pos:start="3:37" pos:end="3:50"><name pos:start="3:37" pos:end="3:43">int64_t</name></type> <name pos:start="3:45" pos:end="3:50">length</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:64"><decl pos:start="3:53" pos:end="3:64"><type pos:start="3:53" pos:end="3:64"><name pos:start="3:53" pos:end="3:57">Error</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier><modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="249:1">{<block_content pos:start="7:5" pos:end="247:14">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">nr_cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:30">(<expr pos:start="17:9" pos:end="17:29"><call pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:27">runstate_is_running</name><argument_list pos:start="17:28" pos:end="17:29">()</argument_list></call></expr>)</condition> <block pos:start="17:32" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:25">

        <expr_stmt pos:start="19:9" pos:end="19:35"><expr pos:start="19:9" pos:end="19:34"><call pos:start="19:9" pos:end="19:34"><name pos:start="19:9" pos:end="19:15">vm_stop</name><argument_list pos:start="19:16" pos:end="19:34">(<argument pos:start="19:17" pos:end="19:33"><expr pos:start="19:17" pos:end="19:33"><name pos:start="19:17" pos:end="19:33">RUN_STATE_SAVE_VM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:25"><expr pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:17">resume</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:24">true</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="27:5">else <block pos:start="23:12" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:26">

        <expr_stmt pos:start="25:9" pos:end="25:26"><expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">resume</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:25">false</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="35:7">/* If we use KVM, we should synchronize the registers before we get dump

     * info or physmap info.

     */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:30">cpu_synchronize_all_states</name><argument_list pos:start="37:31" pos:end="37:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:11">nr_cpus</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="45:5">for <control pos:start="41:9" pos:end="41:59">(<init pos:start="41:10" pos:end="41:25"><expr pos:start="41:10" pos:end="41:24"><name pos:start="41:10" pos:end="41:12">cpu</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:24">first_cpu</name></expr>;</init> <condition pos:start="41:27" pos:end="41:38"><expr pos:start="41:27" pos:end="41:37"><name pos:start="41:27" pos:end="41:29">cpu</name> <operator pos:start="41:31" pos:end="41:32">!=</operator> <name pos:start="41:34" pos:end="41:37">NULL</name></expr>;</condition> <incr pos:start="41:40" pos:end="41:58"><expr pos:start="41:40" pos:end="41:58"><name pos:start="41:40" pos:end="41:42">cpu</name> <operator pos:start="41:44" pos:end="41:44">=</operator> <name pos:start="41:46" pos:end="41:58"><name pos:start="41:46" pos:end="41:48">cpu</name><operator pos:start="41:49" pos:end="41:50">-&gt;</operator><name pos:start="41:51" pos:end="41:58">next_cpu</name></name></expr></incr>)</control> <block pos:start="41:61" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:18">

        <expr_stmt pos:start="43:9" pos:end="43:18"><expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:15">nr_cpus</name><operator pos:start="43:16" pos:end="43:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="49:5" pos:end="49:19"><expr pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:11"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:11">errp</name></name> <operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:18">errp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:15"><expr pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:9"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:9">fd</name></name> <operator pos:start="51:11" pos:end="51:11">=</operator> <name pos:start="51:13" pos:end="51:14">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:17">has_filter</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:30">has_filter</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:12">begin</name></name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:20">begin</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:23"><expr pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:13">length</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <name pos:start="57:17" pos:end="57:22">length</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:50"><expr pos:start="61:5" pos:end="61:49"><call pos:start="61:5" pos:end="61:49"><name pos:start="61:5" pos:end="61:26">guest_phys_blocks_init</name><argument_list pos:start="61:27" pos:end="61:49">(<argument pos:start="61:28" pos:end="61:48"><expr pos:start="61:28" pos:end="61:48"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:48"><name pos:start="61:29" pos:end="61:29">s</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:48">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="63:19">/* FILL LIST */</comment>



    <expr_stmt pos:start="67:5" pos:end="67:34"><expr pos:start="67:5" pos:end="67:33"><name pos:start="67:5" pos:end="67:12"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:12">start</name></name> <operator pos:start="67:14" pos:end="67:14">=</operator> <call pos:start="67:16" pos:end="67:33"><name pos:start="67:16" pos:end="67:30">get_start_block</name><argument_list pos:start="67:31" pos:end="67:33">(<argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><name pos:start="67:32" pos:end="67:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:23">(<expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:16">start</name></name> <operator pos:start="69:18" pos:end="69:19">==</operator> <operator pos:start="69:21" pos:end="69:21">-</operator><literal type="number" pos:start="69:22" pos:end="69:22">1</literal></expr>)</condition> <block pos:start="69:25" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:21">

        <expr_stmt pos:start="71:9" pos:end="71:57"><expr pos:start="71:9" pos:end="71:56"><call pos:start="71:9" pos:end="71:56"><name pos:start="71:9" pos:end="71:17">error_set</name><argument_list pos:start="71:18" pos:end="71:56">(<argument pos:start="71:19" pos:end="71:22"><expr pos:start="71:19" pos:end="71:22"><name pos:start="71:19" pos:end="71:22">errp</name></expr></argument>, <argument pos:start="71:25" pos:end="71:46"><expr pos:start="71:25" pos:end="71:46"><name pos:start="71:25" pos:end="71:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="71:49" pos:end="71:55"><expr pos:start="71:49" pos:end="71:55"><literal type="string" pos:start="71:49" pos:end="71:55">"begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:21">goto <name pos:start="73:14" pos:end="73:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="85:7">/* get dump info: endian, class and architecture.

     * If the target architecture is not supported, cpu_get_dump_info() will

     * return -1.

     */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:43"><expr pos:start="87:5" pos:end="87:42"><name pos:start="87:5" pos:end="87:7">ret</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:42"><name pos:start="87:11" pos:end="87:27">cpu_get_dump_info</name><argument_list pos:start="87:28" pos:end="87:42">(<argument pos:start="87:29" pos:end="87:41"><expr pos:start="87:29" pos:end="87:41"><operator pos:start="87:29" pos:end="87:29">&amp;</operator><name pos:start="87:30" pos:end="87:41"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:41">dump_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:16">(<expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">&lt;</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>)</condition> <block pos:start="89:18" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:21">

        <expr_stmt pos:start="91:9" pos:end="91:42"><expr pos:start="91:9" pos:end="91:41"><call pos:start="91:9" pos:end="91:41"><name pos:start="91:9" pos:end="91:17">error_set</name><argument_list pos:start="91:18" pos:end="91:41">(<argument pos:start="91:19" pos:end="91:22"><expr pos:start="91:19" pos:end="91:22"><name pos:start="91:19" pos:end="91:22">errp</name></expr></argument>, <argument pos:start="91:25" pos:end="91:40"><expr pos:start="91:25" pos:end="91:40"><name pos:start="91:25" pos:end="91:40">QERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:21">goto <name pos:start="93:14" pos:end="93:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="101:70"><expr pos:start="99:5" pos:end="101:69"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:16">note_size</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="101:69"><name pos:start="99:20" pos:end="99:36">cpu_get_note_size</name><argument_list pos:start="99:37" pos:end="101:69">(<argument pos:start="99:38" pos:end="99:57"><expr pos:start="99:38" pos:end="99:57"><name pos:start="99:38" pos:end="99:57"><name pos:start="99:38" pos:end="99:38">s</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:49">dump_info</name><operator pos:start="99:50" pos:end="99:50">.</operator><name pos:start="99:51" pos:end="99:57">d_class</name></name></expr></argument>,

                                     <argument pos:start="101:38" pos:end="101:59"><expr pos:start="101:38" pos:end="101:59"><name pos:start="101:38" pos:end="101:59"><name pos:start="101:38" pos:end="101:38">s</name><operator pos:start="101:39" pos:end="101:40">-&gt;</operator><name pos:start="101:41" pos:end="101:49">dump_info</name><operator pos:start="101:50" pos:end="101:50">.</operator><name pos:start="101:51" pos:end="101:59">d_machine</name></name></expr></argument>, <argument pos:start="101:62" pos:end="101:68"><expr pos:start="101:62" pos:end="101:68"><name pos:start="101:62" pos:end="101:68">nr_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:16">(<expr pos:start="103:9" pos:end="103:15"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">&lt;</operator> <literal type="number" pos:start="103:15" pos:end="103:15">0</literal></expr>)</condition> <block pos:start="103:18" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:21">

        <expr_stmt pos:start="105:9" pos:end="105:42"><expr pos:start="105:9" pos:end="105:41"><call pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:17">error_set</name><argument_list pos:start="105:18" pos:end="105:41">(<argument pos:start="105:19" pos:end="105:22"><expr pos:start="105:19" pos:end="105:22"><name pos:start="105:19" pos:end="105:22">errp</name></expr></argument>, <argument pos:start="105:25" pos:end="105:40"><expr pos:start="105:25" pos:end="105:40"><name pos:start="105:25" pos:end="105:40">QERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:21">goto <name pos:start="107:14" pos:end="107:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:28">/* get memory mapping */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:39"><expr pos:start="115:5" pos:end="115:38"><call pos:start="115:5" pos:end="115:38"><name pos:start="115:5" pos:end="115:28">memory_mapping_list_init</name><argument_list pos:start="115:29" pos:end="115:38">(<argument pos:start="115:30" pos:end="115:37"><expr pos:start="115:30" pos:end="115:37"><operator pos:start="115:30" pos:end="115:30">&amp;</operator><name pos:start="115:31" pos:end="115:37"><name pos:start="115:31" pos:end="115:31">s</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:37">list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="133:5"><if pos:start="117:5" pos:end="129:5">if <condition pos:start="117:8" pos:end="117:15">(<expr pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:14">paging</name></expr>)</condition> <block pos:start="117:17" pos:end="129:5">{<block_content pos:start="119:9" pos:end="127:9">

        <expr_stmt pos:start="119:9" pos:end="119:54"><expr pos:start="119:9" pos:end="119:53"><call pos:start="119:9" pos:end="119:53"><name pos:start="119:9" pos:end="119:37">qemu_get_guest_memory_mapping</name><argument_list pos:start="119:38" pos:end="119:53">(<argument pos:start="119:39" pos:end="119:46"><expr pos:start="119:39" pos:end="119:46"><operator pos:start="119:39" pos:end="119:39">&amp;</operator><name pos:start="119:40" pos:end="119:46"><name pos:start="119:40" pos:end="119:40">s</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:46">list</name></name></expr></argument>, <argument pos:start="119:49" pos:end="119:52"><expr pos:start="119:49" pos:end="119:52"><operator pos:start="119:49" pos:end="119:49">&amp;</operator><name pos:start="119:50" pos:end="119:52">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:24">(<expr pos:start="121:13" pos:end="121:23"><name pos:start="121:13" pos:end="121:15">err</name> <operator pos:start="121:17" pos:end="121:18">!=</operator> <name pos:start="121:20" pos:end="121:23">NULL</name></expr>)</condition> <block pos:start="121:26" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:25">

            <expr_stmt pos:start="123:13" pos:end="123:39"><expr pos:start="123:13" pos:end="123:38"><call pos:start="123:13" pos:end="123:38"><name pos:start="123:13" pos:end="123:27">error_propagate</name><argument_list pos:start="123:28" pos:end="123:38">(<argument pos:start="123:29" pos:end="123:32"><expr pos:start="123:29" pos:end="123:32"><name pos:start="123:29" pos:end="123:32">errp</name></expr></argument>, <argument pos:start="123:35" pos:end="123:37"><expr pos:start="123:35" pos:end="123:37"><name pos:start="123:35" pos:end="123:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:25">goto <name pos:start="125:18" pos:end="125:24">cleanup</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="133:5">else <block pos:start="129:12" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:55">

        <expr_stmt pos:start="131:9" pos:end="131:55"><expr pos:start="131:9" pos:end="131:54"><call pos:start="131:9" pos:end="131:54"><name pos:start="131:9" pos:end="131:44">qemu_get_guest_simple_memory_mapping</name><argument_list pos:start="131:45" pos:end="131:54">(<argument pos:start="131:46" pos:end="131:53"><expr pos:start="131:46" pos:end="131:53"><operator pos:start="131:46" pos:end="131:46">&amp;</operator><name pos:start="131:47" pos:end="131:53"><name pos:start="131:47" pos:end="131:47">s</name><operator pos:start="131:48" pos:end="131:49">-&gt;</operator><name pos:start="131:50" pos:end="131:53">list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="137:5" pos:end="141:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:22">(<expr pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:21">has_filter</name></name></expr>)</condition> <block pos:start="137:24" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:61">

        <expr_stmt pos:start="139:9" pos:end="139:61"><expr pos:start="139:9" pos:end="139:60"><call pos:start="139:9" pos:end="139:60"><name pos:start="139:9" pos:end="139:29">memory_mapping_filter</name><argument_list pos:start="139:30" pos:end="139:60">(<argument pos:start="139:31" pos:end="139:38"><expr pos:start="139:31" pos:end="139:38"><operator pos:start="139:31" pos:end="139:31">&amp;</operator><name pos:start="139:32" pos:end="139:38"><name pos:start="139:32" pos:end="139:32">s</name><operator pos:start="139:33" pos:end="139:34">-&gt;</operator><name pos:start="139:35" pos:end="139:38">list</name></name></expr></argument>, <argument pos:start="139:41" pos:end="139:48"><expr pos:start="139:41" pos:end="139:48"><name pos:start="139:41" pos:end="139:48"><name pos:start="139:41" pos:end="139:41">s</name><operator pos:start="139:42" pos:end="139:43">-&gt;</operator><name pos:start="139:44" pos:end="139:48">begin</name></name></expr></argument>, <argument pos:start="139:51" pos:end="139:59"><expr pos:start="139:51" pos:end="139:59"><name pos:start="139:51" pos:end="139:59"><name pos:start="139:51" pos:end="139:51">s</name><operator pos:start="139:52" pos:end="139:53">-&gt;</operator><name pos:start="139:54" pos:end="139:59">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="153:7">/*

     * calculate phdr_num

     *

     * the type of ehdr-&gt;e_phnum is uint16_t, so we should avoid overflow

     */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:20"><expr pos:start="155:5" pos:end="155:19"><name pos:start="155:5" pos:end="155:15"><name pos:start="155:5" pos:end="155:5">s</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:15">phdr_num</name></name> <operator pos:start="155:17" pos:end="155:17">=</operator> <literal type="number" pos:start="155:19" pos:end="155:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="155:22" pos:end="155:34">/* PT_NOTE */</comment>

    <if_stmt pos:start="157:5" pos:end="185:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:37">(<expr pos:start="157:9" pos:end="157:36"><name pos:start="157:9" pos:end="157:19"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:15">list</name><operator pos:start="157:16" pos:end="157:16">.</operator><name pos:start="157:17" pos:end="157:19">num</name></name> <operator pos:start="157:21" pos:end="157:21">&lt;</operator> <name pos:start="157:23" pos:end="157:32">UINT16_MAX</name> <operator pos:start="157:34" pos:end="157:34">-</operator> <literal type="number" pos:start="157:36" pos:end="157:36">2</literal></expr>)</condition> <block pos:start="157:39" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:32">

        <expr_stmt pos:start="159:9" pos:end="159:35"><expr pos:start="159:9" pos:end="159:34"><name pos:start="159:9" pos:end="159:19"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:19">phdr_num</name></name> <operator pos:start="159:21" pos:end="159:22">+=</operator> <name pos:start="159:24" pos:end="159:34"><name pos:start="159:24" pos:end="159:24">s</name><operator pos:start="159:25" pos:end="159:26">-&gt;</operator><name pos:start="159:27" pos:end="159:30">list</name><operator pos:start="159:31" pos:end="159:31">.</operator><name pos:start="159:32" pos:end="159:34">num</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:32"><expr pos:start="161:9" pos:end="161:31"><name pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:23">have_section</name></name> <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:31">false</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="185:5">else <block pos:start="163:12" pos:end="185:5">{<block_content pos:start="165:9" pos:end="183:9">

        <expr_stmt pos:start="165:9" pos:end="165:31"><expr pos:start="165:9" pos:end="165:30"><name pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:23">have_section</name></name> <operator pos:start="165:25" pos:end="165:25">=</operator> <name pos:start="165:27" pos:end="165:30">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:30"><expr pos:start="167:9" pos:end="167:29"><name pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:19">phdr_num</name></name> <operator pos:start="167:21" pos:end="167:21">=</operator> <name pos:start="167:23" pos:end="167:29">PN_XNUM</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:23"><expr pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:18"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:18">sh_info</name></name> <operator pos:start="169:20" pos:end="169:20">=</operator> <literal type="number" pos:start="169:22" pos:end="169:22">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="169:25" pos:end="169:37">/* PT_NOTE */</comment>



        <comment type="block" pos:start="173:9" pos:end="173:80">/* the type of shdr-&gt;sh_info is uint32_t, so we should avoid overflow */</comment>

        <if_stmt pos:start="175:9" pos:end="183:9"><if pos:start="175:9" pos:end="179:9">if <condition pos:start="175:12" pos:end="175:42">(<expr pos:start="175:13" pos:end="175:41"><name pos:start="175:13" pos:end="175:23"><name pos:start="175:13" pos:end="175:13">s</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:19">list</name><operator pos:start="175:20" pos:end="175:20">.</operator><name pos:start="175:21" pos:end="175:23">num</name></name> <operator pos:start="175:25" pos:end="175:26">&lt;=</operator> <name pos:start="175:28" pos:end="175:37">UINT32_MAX</name> <operator pos:start="175:39" pos:end="175:39">-</operator> <literal type="number" pos:start="175:41" pos:end="175:41">1</literal></expr>)</condition> <block pos:start="175:44" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:38">

            <expr_stmt pos:start="177:13" pos:end="177:38"><expr pos:start="177:13" pos:end="177:37"><name pos:start="177:13" pos:end="177:22"><name pos:start="177:13" pos:end="177:13">s</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:22">sh_info</name></name> <operator pos:start="177:24" pos:end="177:25">+=</operator> <name pos:start="177:27" pos:end="177:37"><name pos:start="177:27" pos:end="177:27">s</name><operator pos:start="177:28" pos:end="177:29">-&gt;</operator><name pos:start="177:30" pos:end="177:33">list</name><operator pos:start="177:34" pos:end="177:34">.</operator><name pos:start="177:35" pos:end="177:37">num</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="179:11" pos:end="183:9">else <block pos:start="179:16" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:36">

            <expr_stmt pos:start="181:13" pos:end="181:36"><expr pos:start="181:13" pos:end="181:35"><name pos:start="181:13" pos:end="181:22"><name pos:start="181:13" pos:end="181:13">s</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:22">sh_info</name></name> <operator pos:start="181:24" pos:end="181:24">=</operator> <name pos:start="181:26" pos:end="181:35">UINT32_MAX</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="189:5" pos:end="225:5"><if pos:start="189:5" pos:end="207:5">if <condition pos:start="189:8" pos:end="189:43">(<expr pos:start="189:9" pos:end="189:42"><name pos:start="189:9" pos:end="189:28"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:20">dump_info</name><operator pos:start="189:21" pos:end="189:21">.</operator><name pos:start="189:22" pos:end="189:28">d_class</name></name> <operator pos:start="189:30" pos:end="189:31">==</operator> <name pos:start="189:33" pos:end="189:42">ELFCLASS64</name></expr>)</condition> <block pos:start="189:45" pos:end="207:5">{<block_content pos:start="191:9" pos:end="205:9">

        <if_stmt pos:start="191:9" pos:end="205:9"><if pos:start="191:9" pos:end="199:9">if <condition pos:start="191:12" pos:end="191:28">(<expr pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:27">have_section</name></name></expr>)</condition> <block pos:start="191:30" pos:end="199:9">{<block_content pos:start="193:13" pos:end="197:65">

            <expr_stmt pos:start="193:13" pos:end="197:65"><expr pos:start="193:13" pos:end="197:64"><name pos:start="193:13" pos:end="193:28"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:28">memory_offset</name></name> <operator pos:start="193:30" pos:end="193:30">=</operator> <sizeof pos:start="193:32" pos:end="193:49">sizeof<argument_list pos:start="193:38" pos:end="193:49">(<argument pos:start="193:39" pos:end="193:48"><expr pos:start="193:39" pos:end="193:48"><name pos:start="193:39" pos:end="193:48">Elf64_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="193:51" pos:end="193:51">+</operator>

                               <sizeof pos:start="195:32" pos:end="195:49">sizeof<argument_list pos:start="195:38" pos:end="195:49">(<argument pos:start="195:39" pos:end="195:48"><expr pos:start="195:39" pos:end="195:48"><name pos:start="195:39" pos:end="195:48">Elf64_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="195:51" pos:end="195:51">*</operator> <name pos:start="195:53" pos:end="195:62"><name pos:start="195:53" pos:end="195:53">s</name><operator pos:start="195:54" pos:end="195:55">-&gt;</operator><name pos:start="195:56" pos:end="195:62">sh_info</name></name> <operator pos:start="195:64" pos:end="195:64">+</operator>

                               <sizeof pos:start="197:32" pos:end="197:49">sizeof<argument_list pos:start="197:38" pos:end="197:49">(<argument pos:start="197:39" pos:end="197:48"><expr pos:start="197:39" pos:end="197:48"><name pos:start="197:39" pos:end="197:48">Elf64_Shdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="197:51" pos:end="197:51">+</operator> <name pos:start="197:53" pos:end="197:64"><name pos:start="197:53" pos:end="197:53">s</name><operator pos:start="197:54" pos:end="197:55">-&gt;</operator><name pos:start="197:56" pos:end="197:64">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="199:11" pos:end="205:9">else <block pos:start="199:16" pos:end="205:9">{<block_content pos:start="201:13" pos:end="203:79">

            <expr_stmt pos:start="201:13" pos:end="203:79"><expr pos:start="201:13" pos:end="203:78"><name pos:start="201:13" pos:end="201:28"><name pos:start="201:13" pos:end="201:13">s</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:28">memory_offset</name></name> <operator pos:start="201:30" pos:end="201:30">=</operator> <sizeof pos:start="201:32" pos:end="201:49">sizeof<argument_list pos:start="201:38" pos:end="201:49">(<argument pos:start="201:39" pos:end="201:48"><expr pos:start="201:39" pos:end="201:48"><name pos:start="201:39" pos:end="201:48">Elf64_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="201:51" pos:end="201:51">+</operator>

                               <sizeof pos:start="203:32" pos:end="203:49">sizeof<argument_list pos:start="203:38" pos:end="203:49">(<argument pos:start="203:39" pos:end="203:48"><expr pos:start="203:39" pos:end="203:48"><name pos:start="203:39" pos:end="203:48">Elf64_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="203:51" pos:end="203:51">*</operator> <name pos:start="203:53" pos:end="203:63"><name pos:start="203:53" pos:end="203:53">s</name><operator pos:start="203:54" pos:end="203:55">-&gt;</operator><name pos:start="203:56" pos:end="203:63">phdr_num</name></name> <operator pos:start="203:65" pos:end="203:65">+</operator> <name pos:start="203:67" pos:end="203:78"><name pos:start="203:67" pos:end="203:67">s</name><operator pos:start="203:68" pos:end="203:69">-&gt;</operator><name pos:start="203:70" pos:end="203:78">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="207:7" pos:end="225:5">else <block pos:start="207:12" pos:end="225:5">{<block_content pos:start="209:9" pos:end="223:9">

        <if_stmt pos:start="209:9" pos:end="223:9"><if pos:start="209:9" pos:end="217:9">if <condition pos:start="209:12" pos:end="209:28">(<expr pos:start="209:13" pos:end="209:27"><name pos:start="209:13" pos:end="209:27"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:27">have_section</name></name></expr>)</condition> <block pos:start="209:30" pos:end="217:9">{<block_content pos:start="211:13" pos:end="215:65">

            <expr_stmt pos:start="211:13" pos:end="215:65"><expr pos:start="211:13" pos:end="215:64"><name pos:start="211:13" pos:end="211:28"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:28">memory_offset</name></name> <operator pos:start="211:30" pos:end="211:30">=</operator> <sizeof pos:start="211:32" pos:end="211:49">sizeof<argument_list pos:start="211:38" pos:end="211:49">(<argument pos:start="211:39" pos:end="211:48"><expr pos:start="211:39" pos:end="211:48"><name pos:start="211:39" pos:end="211:48">Elf32_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="211:51" pos:end="211:51">+</operator>

                               <sizeof pos:start="213:32" pos:end="213:49">sizeof<argument_list pos:start="213:38" pos:end="213:49">(<argument pos:start="213:39" pos:end="213:48"><expr pos:start="213:39" pos:end="213:48"><name pos:start="213:39" pos:end="213:48">Elf32_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="213:51" pos:end="213:51">*</operator> <name pos:start="213:53" pos:end="213:62"><name pos:start="213:53" pos:end="213:53">s</name><operator pos:start="213:54" pos:end="213:55">-&gt;</operator><name pos:start="213:56" pos:end="213:62">sh_info</name></name> <operator pos:start="213:64" pos:end="213:64">+</operator>

                               <sizeof pos:start="215:32" pos:end="215:49">sizeof<argument_list pos:start="215:38" pos:end="215:49">(<argument pos:start="215:39" pos:end="215:48"><expr pos:start="215:39" pos:end="215:48"><name pos:start="215:39" pos:end="215:48">Elf32_Shdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="215:51" pos:end="215:51">+</operator> <name pos:start="215:53" pos:end="215:64"><name pos:start="215:53" pos:end="215:53">s</name><operator pos:start="215:54" pos:end="215:55">-&gt;</operator><name pos:start="215:56" pos:end="215:64">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="217:11" pos:end="223:9">else <block pos:start="217:16" pos:end="223:9">{<block_content pos:start="219:13" pos:end="221:79">

            <expr_stmt pos:start="219:13" pos:end="221:79"><expr pos:start="219:13" pos:end="221:78"><name pos:start="219:13" pos:end="219:28"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:28">memory_offset</name></name> <operator pos:start="219:30" pos:end="219:30">=</operator> <sizeof pos:start="219:32" pos:end="219:49">sizeof<argument_list pos:start="219:38" pos:end="219:49">(<argument pos:start="219:39" pos:end="219:48"><expr pos:start="219:39" pos:end="219:48"><name pos:start="219:39" pos:end="219:48">Elf32_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="219:51" pos:end="219:51">+</operator>

                               <sizeof pos:start="221:32" pos:end="221:49">sizeof<argument_list pos:start="221:38" pos:end="221:49">(<argument pos:start="221:39" pos:end="221:48"><expr pos:start="221:39" pos:end="221:48"><name pos:start="221:39" pos:end="221:48">Elf32_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="221:51" pos:end="221:51">*</operator> <name pos:start="221:53" pos:end="221:63"><name pos:start="221:53" pos:end="221:53">s</name><operator pos:start="221:54" pos:end="221:55">-&gt;</operator><name pos:start="221:56" pos:end="221:63">phdr_num</name></name> <operator pos:start="221:65" pos:end="221:65">+</operator> <name pos:start="221:67" pos:end="221:78"><name pos:start="221:67" pos:end="221:67">s</name><operator pos:start="221:68" pos:end="221:69">-&gt;</operator><name pos:start="221:70" pos:end="221:78">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="229:5" pos:end="229:13">return <expr pos:start="229:12" pos:end="229:12"><literal type="number" pos:start="229:12" pos:end="229:12">0</literal></expr>;</return>



<label pos:start="233:1" pos:end="233:8"><name pos:start="233:1" pos:end="233:7">cleanup</name>:</label>

    <expr_stmt pos:start="235:5" pos:end="235:50"><expr pos:start="235:5" pos:end="235:49"><call pos:start="235:5" pos:end="235:49"><name pos:start="235:5" pos:end="235:26">guest_phys_blocks_free</name><argument_list pos:start="235:27" pos:end="235:49">(<argument pos:start="235:28" pos:end="235:48"><expr pos:start="235:28" pos:end="235:48"><operator pos:start="235:28" pos:end="235:28">&amp;</operator><name pos:start="235:29" pos:end="235:48"><name pos:start="235:29" pos:end="235:29">s</name><operator pos:start="235:30" pos:end="235:31">-&gt;</operator><name pos:start="235:32" pos:end="235:48">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="239:5" pos:end="243:5"><if pos:start="239:5" pos:end="243:5">if <condition pos:start="239:8" pos:end="239:18">(<expr pos:start="239:9" pos:end="239:17"><name pos:start="239:9" pos:end="239:17"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:17">resume</name></name></expr>)</condition> <block pos:start="239:20" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:19">

        <expr_stmt pos:start="241:9" pos:end="241:19"><expr pos:start="241:9" pos:end="241:18"><call pos:start="241:9" pos:end="241:18"><name pos:start="241:9" pos:end="241:16">vm_start</name><argument_list pos:start="241:17" pos:end="241:18">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="247:5" pos:end="247:14">return <expr pos:start="247:12" pos:end="247:13"><operator pos:start="247:12" pos:end="247:12">-</operator><literal type="number" pos:start="247:13" pos:end="247:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
