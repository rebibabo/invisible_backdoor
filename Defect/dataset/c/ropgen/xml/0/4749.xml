<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4749.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">tcp_open</name><parameter_list pos:start="1:20" pos:end="1:62">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:30">URLContext</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">h</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">char</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">uri</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:61">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_in</name></name></type> <name pos:start="5:24" pos:end="5:32">dest_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:23"><name pos:start="7:10" pos:end="7:17">hostname</name><index pos:start="7:18" pos:end="7:23">[<expr pos:start="7:19" pos:end="7:22"><literal type="number" pos:start="7:19" pos:end="7:22">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:26" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:8"><modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:27">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">port</name></decl>, <decl pos:start="9:15" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:16">fd</name> <init pos:start="9:18" pos:end="9:21">= <expr pos:start="9:20" pos:end="9:21"><operator pos:start="9:20" pos:end="9:20">-</operator><literal type="number" pos:start="9:21" pos:end="9:21">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">TCPContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">fd_set</name></type> <name pos:start="15:12" pos:end="15:15">wfds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">fd_max</name></decl>, <decl pos:start="17:17" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:17" pos:end="17:19">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:18">timeval</name></name></type> <name pos:start="19:20" pos:end="19:21">tv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">socklen_t</name></type> <name pos:start="21:15" pos:end="21:20">optlen</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:5">s</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:17">av_malloc</name><argument_list pos:start="25:18" pos:end="25:37">(<argument pos:start="25:19" pos:end="25:36"><expr pos:start="25:19" pos:end="25:36"><sizeof pos:start="25:19" pos:end="25:36">sizeof<argument_list pos:start="25:25" pos:end="25:36">(<argument pos:start="25:26" pos:end="25:35"><expr pos:start="25:26" pos:end="25:35"><name pos:start="25:26" pos:end="25:35">TCPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:23"><if pos:start="27:5" pos:end="29:23">if <condition pos:start="27:8" pos:end="27:11">(<expr pos:start="27:9" pos:end="27:10"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:10">s</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:23"><block_content pos:start="29:9" pos:end="29:23">

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:5">h</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:16">priv_data</name></name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:20">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:12"><expr pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:5">p</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <name pos:start="33:9" pos:end="33:11">uri</name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:18"><if pos:start="35:5" pos:end="37:18">if <condition pos:start="35:8" pos:end="35:35">(<expr pos:start="35:9" pos:end="35:34"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:34"><name pos:start="35:10" pos:end="35:17">strstart</name><argument_list pos:start="35:18" pos:end="35:34">(<argument pos:start="35:19" pos:end="35:19"><expr pos:start="35:19" pos:end="35:19"><name pos:start="35:19" pos:end="35:19">p</name></expr></argument>, <argument pos:start="35:22" pos:end="35:29"><expr pos:start="35:22" pos:end="35:29"><literal type="string" pos:start="35:22" pos:end="35:29">"tcp://"</literal></expr></argument>, <argument pos:start="35:32" pos:end="35:33"><expr pos:start="35:32" pos:end="35:33"><operator pos:start="35:32" pos:end="35:32">&amp;</operator><name pos:start="35:33" pos:end="35:33">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:18"><block_content pos:start="37:9" pos:end="37:18">

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:5">q</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <name pos:start="39:9" pos:end="39:16">hostname</name></expr>;</expr_stmt>

    <while pos:start="41:5" pos:end="49:5">while <condition pos:start="41:11" pos:end="41:48">(<expr pos:start="41:12" pos:end="41:47"><operator pos:start="41:12" pos:end="41:12">*</operator><name pos:start="41:13" pos:end="41:13">p</name> <operator pos:start="41:15" pos:end="41:16">!=</operator> <literal type="char" pos:start="41:18" pos:end="41:20">':'</literal> <operator pos:start="41:22" pos:end="41:23">&amp;&amp;</operator> <operator pos:start="41:25" pos:end="41:25">*</operator><name pos:start="41:26" pos:end="41:26">p</name> <operator pos:start="41:28" pos:end="41:29">!=</operator> <literal type="char" pos:start="41:31" pos:end="41:33">'/'</literal> <operator pos:start="41:35" pos:end="41:36">&amp;&amp;</operator> <operator pos:start="41:38" pos:end="41:38">*</operator><name pos:start="41:39" pos:end="41:39">p</name> <operator pos:start="41:41" pos:end="41:42">!=</operator> <literal type="char" pos:start="41:44" pos:end="41:47">'\0'</literal></expr>)</condition> <block pos:start="41:50" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:12">

        <if_stmt pos:start="43:9" pos:end="45:22"><if pos:start="43:9" pos:end="45:22">if <condition pos:start="43:12" pos:end="43:50">(<expr pos:start="43:13" pos:end="43:49"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:14">q</name> <operator pos:start="43:16" pos:end="43:16">-</operator> <name pos:start="43:18" pos:end="43:25">hostname</name><operator pos:start="43:26" pos:end="43:26">)</operator> <operator pos:start="43:28" pos:end="43:28">&lt;</operator> <sizeof pos:start="43:30" pos:end="43:45">sizeof<argument_list pos:start="43:36" pos:end="43:45">(<argument pos:start="43:37" pos:end="43:44"><expr pos:start="43:37" pos:end="43:44"><name pos:start="43:37" pos:end="43:44">hostname</name></expr></argument>)</argument_list></sizeof> <operator pos:start="43:47" pos:end="43:47">-</operator> <literal type="number" pos:start="43:49" pos:end="43:49">1</literal></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:22"><block_content pos:start="45:13" pos:end="45:22">

            <expr_stmt pos:start="45:13" pos:end="45:22"><expr pos:start="45:13" pos:end="45:21"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:14">q</name><operator pos:start="45:15" pos:end="45:16">++</operator> <operator pos:start="45:18" pos:end="45:18">=</operator> <operator pos:start="45:20" pos:end="45:20">*</operator><name pos:start="45:21" pos:end="45:21">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:12"><expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:9">p</name><operator pos:start="47:10" pos:end="47:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="51:5" pos:end="51:14"><expr pos:start="51:5" pos:end="51:13"><operator pos:start="51:5" pos:end="51:5">*</operator><name pos:start="51:6" pos:end="51:6">q</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <literal type="char" pos:start="51:10" pos:end="51:13">'\0'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:18"><if pos:start="53:5" pos:end="55:18">if <condition pos:start="53:8" pos:end="53:18">(<expr pos:start="53:9" pos:end="53:17"><operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:10">p</name> <operator pos:start="53:12" pos:end="53:13">!=</operator> <literal type="char" pos:start="53:15" pos:end="53:17">':'</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:18"><block_content pos:start="55:9" pos:end="55:18">

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:8"><expr pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:5">p</name><operator pos:start="57:6" pos:end="57:7">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:39"><expr pos:start="59:5" pos:end="59:38"><name pos:start="59:5" pos:end="59:8">port</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <call pos:start="59:12" pos:end="59:38"><name pos:start="59:12" pos:end="59:18">strtoul</name><argument_list pos:start="59:19" pos:end="59:38">(<argument pos:start="59:20" pos:end="59:20"><expr pos:start="59:20" pos:end="59:20"><name pos:start="59:20" pos:end="59:20">p</name></expr></argument>, <argument pos:start="59:23" pos:end="59:33"><expr pos:start="59:23" pos:end="59:33"><operator pos:start="59:23" pos:end="59:23">(</operator><name pos:start="59:24" pos:end="59:27">char</name> <operator pos:start="59:29" pos:end="59:29">*</operator><operator pos:start="59:30" pos:end="59:30">*</operator><operator pos:start="59:31" pos:end="59:31">)</operator><operator pos:start="59:32" pos:end="59:32">&amp;</operator><name pos:start="59:33" pos:end="59:33">p</name></expr></argument>, <argument pos:start="59:36" pos:end="59:37"><expr pos:start="59:36" pos:end="59:37"><literal type="number" pos:start="59:36" pos:end="59:37">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="63:18"><if pos:start="61:5" pos:end="63:18">if <condition pos:start="61:8" pos:end="61:35">(<expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:12">port</name> <operator pos:start="61:14" pos:end="61:15">&lt;=</operator> <literal type="number" pos:start="61:17" pos:end="61:17">0</literal> <operator pos:start="61:19" pos:end="61:20">||</operator> <name pos:start="61:22" pos:end="61:25">port</name> <operator pos:start="61:27" pos:end="61:28">&gt;=</operator> <literal type="number" pos:start="61:30" pos:end="61:34">65536</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:18"><block_content pos:start="63:9" pos:end="63:18">

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto></block_content></block></if></if_stmt>

    

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:24"><name pos:start="67:5" pos:end="67:13">dest_addr</name><operator pos:start="67:14" pos:end="67:14">.</operator><name pos:start="67:15" pos:end="67:24">sin_family</name></name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:34">AF_INET</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:13">dest_addr</name><operator pos:start="69:14" pos:end="69:14">.</operator><name pos:start="69:15" pos:end="69:22">sin_port</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <call pos:start="69:26" pos:end="69:36"><name pos:start="69:26" pos:end="69:30">htons</name><argument_list pos:start="69:31" pos:end="69:36">(<argument pos:start="69:32" pos:end="69:35"><expr pos:start="69:32" pos:end="69:35"><name pos:start="69:32" pos:end="69:35">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="73:18"><if pos:start="71:5" pos:end="73:18">if <condition pos:start="71:8" pos:end="71:56">(<expr pos:start="71:9" pos:end="71:55"><call pos:start="71:9" pos:end="71:51"><name pos:start="71:9" pos:end="71:20">resolve_host</name><argument_list pos:start="71:21" pos:end="71:51">(<argument pos:start="71:22" pos:end="71:40"><expr pos:start="71:22" pos:end="71:40"><operator pos:start="71:22" pos:end="71:22">&amp;</operator><name pos:start="71:23" pos:end="71:40"><name pos:start="71:23" pos:end="71:31">dest_addr</name><operator pos:start="71:32" pos:end="71:32">.</operator><name pos:start="71:33" pos:end="71:40">sin_addr</name></name></expr></argument>, <argument pos:start="71:43" pos:end="71:50"><expr pos:start="71:43" pos:end="71:50"><name pos:start="71:43" pos:end="71:50">hostname</name></expr></argument>)</argument_list></call> <operator pos:start="71:53" pos:end="71:53">&lt;</operator> <literal type="number" pos:start="71:55" pos:end="71:55">0</literal></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:18"><block_content pos:start="73:9" pos:end="73:18">

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:41"><expr pos:start="77:5" pos:end="77:40"><name pos:start="77:5" pos:end="77:6">fd</name> <operator pos:start="77:8" pos:end="77:8">=</operator> <call pos:start="77:10" pos:end="77:40"><name pos:start="77:10" pos:end="77:15">socket</name><argument_list pos:start="77:16" pos:end="77:40">(<argument pos:start="77:17" pos:end="77:23"><expr pos:start="77:17" pos:end="77:23"><name pos:start="77:17" pos:end="77:23">PF_INET</name></expr></argument>, <argument pos:start="77:26" pos:end="77:36"><expr pos:start="77:26" pos:end="77:36"><name pos:start="77:26" pos:end="77:36">SOCK_STREAM</name></expr></argument>, <argument pos:start="77:39" pos:end="77:39"><expr pos:start="77:39" pos:end="77:39"><literal type="number" pos:start="77:39" pos:end="77:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="81:18"><if pos:start="79:5" pos:end="81:18">if <condition pos:start="79:8" pos:end="79:15">(<expr pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:10">fd</name> <operator pos:start="79:12" pos:end="79:12">&lt;</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:18"><block_content pos:start="81:9" pos:end="81:18">

        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:35"><expr pos:start="83:5" pos:end="83:34"><call pos:start="83:5" pos:end="83:34"><name pos:start="83:5" pos:end="83:9">fcntl</name><argument_list pos:start="83:10" pos:end="83:34">(<argument pos:start="83:11" pos:end="83:12"><expr pos:start="83:11" pos:end="83:12"><name pos:start="83:11" pos:end="83:12">fd</name></expr></argument>, <argument pos:start="83:15" pos:end="83:21"><expr pos:start="83:15" pos:end="83:21"><name pos:start="83:15" pos:end="83:21">F_SETFL</name></expr></argument>, <argument pos:start="83:24" pos:end="83:33"><expr pos:start="83:24" pos:end="83:33"><name pos:start="83:24" pos:end="83:33">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

 <label pos:start="87:2" pos:end="87:6"><name pos:start="87:2" pos:end="87:5">redo</name>:</label>

    <expr_stmt pos:start="89:5" pos:end="91:37"><expr pos:start="89:5" pos:end="91:36"><name pos:start="89:5" pos:end="89:7">ret</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="91:36"><name pos:start="89:11" pos:end="89:17">connect</name><argument_list pos:start="89:18" pos:end="91:36">(<argument pos:start="89:19" pos:end="89:20"><expr pos:start="89:19" pos:end="89:20"><name pos:start="89:19" pos:end="89:20">fd</name></expr></argument>, <argument pos:start="89:23" pos:end="89:51"><expr pos:start="89:23" pos:end="89:51"><operator pos:start="89:23" pos:end="89:23">(</operator>struct <name pos:start="89:31" pos:end="89:38">sockaddr</name> <operator pos:start="89:40" pos:end="89:40">*</operator><operator pos:start="89:41" pos:end="89:41">)</operator><operator pos:start="89:42" pos:end="89:42">&amp;</operator><name pos:start="89:43" pos:end="89:51">dest_addr</name></expr></argument>, 

                  <argument pos:start="91:19" pos:end="91:35"><expr pos:start="91:19" pos:end="91:35"><sizeof pos:start="91:19" pos:end="91:35">sizeof<argument_list pos:start="91:25" pos:end="91:35">(<argument pos:start="91:26" pos:end="91:34"><expr pos:start="91:26" pos:end="91:34"><name pos:start="91:26" pos:end="91:34">dest_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="147:5"><if pos:start="93:5" pos:end="147:5">if <condition pos:start="93:8" pos:end="93:16">(<expr pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">&lt;</operator> <literal type="number" pos:start="93:15" pos:end="93:15">0</literal></expr>)</condition> <block pos:start="93:18" pos:end="147:5">{<block_content pos:start="95:9" pos:end="145:22">

        <if_stmt pos:start="95:9" pos:end="97:22"><if pos:start="95:9" pos:end="97:22">if <condition pos:start="95:12" pos:end="95:27">(<expr pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:17">errno</name> <operator pos:start="95:19" pos:end="95:20">==</operator> <name pos:start="95:22" pos:end="95:26">EINTR</name></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:22"><block_content pos:start="97:13" pos:end="97:22">

            <goto pos:start="97:13" pos:end="97:22">goto <name pos:start="97:18" pos:end="97:21">redo</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="99:9" pos:end="101:22"><if pos:start="99:9" pos:end="101:22">if <condition pos:start="99:12" pos:end="99:33">(<expr pos:start="99:13" pos:end="99:32"><name pos:start="99:13" pos:end="99:17">errno</name> <operator pos:start="99:19" pos:end="99:20">!=</operator> <name pos:start="99:22" pos:end="99:32">EINPROGRESS</name></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="101:22"><block_content pos:start="101:13" pos:end="101:22">

            <goto pos:start="101:13" pos:end="101:22">goto <name pos:start="101:18" pos:end="101:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <comment type="block" pos:start="105:9" pos:end="105:56">/* wait until we are connected or until abort */</comment>

        <for pos:start="107:9" pos:end="133:9">for<control pos:start="107:12" pos:end="107:15">(<init pos:start="107:13" pos:end="107:13">;</init><condition pos:start="107:14" pos:end="107:14">;</condition><incr/>)</control> <block pos:start="107:17" pos:end="133:9">{<block_content pos:start="109:13" pos:end="131:22">

            <if_stmt pos:start="109:13" pos:end="115:13"><if pos:start="109:13" pos:end="115:13">if <condition pos:start="109:16" pos:end="109:35">(<expr pos:start="109:17" pos:end="109:34"><call pos:start="109:17" pos:end="109:34"><name pos:start="109:17" pos:end="109:32">url_interrupt_cb</name><argument_list pos:start="109:33" pos:end="109:34">()</argument_list></call></expr>)</condition> <block pos:start="109:37" pos:end="115:13">{<block_content pos:start="111:17" pos:end="113:27">

                <expr_stmt pos:start="111:17" pos:end="111:29"><expr pos:start="111:17" pos:end="111:28"><name pos:start="111:17" pos:end="111:19">ret</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <operator pos:start="111:23" pos:end="111:23">-</operator><name pos:start="111:24" pos:end="111:28">EINTR</name></expr>;</expr_stmt>

                <goto pos:start="113:17" pos:end="113:27">goto <name pos:start="113:22" pos:end="113:26">fail1</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:24"><expr pos:start="117:13" pos:end="117:23"><name pos:start="117:13" pos:end="117:18">fd_max</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <name pos:start="117:22" pos:end="117:23">fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:27"><expr pos:start="119:13" pos:end="119:26"><call pos:start="119:13" pos:end="119:26"><name pos:start="119:13" pos:end="119:19">FD_ZERO</name><argument_list pos:start="119:20" pos:end="119:26">(<argument pos:start="119:21" pos:end="119:25"><expr pos:start="119:21" pos:end="119:25"><operator pos:start="119:21" pos:end="119:21">&amp;</operator><name pos:start="119:22" pos:end="119:25">wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:30"><expr pos:start="121:13" pos:end="121:29"><call pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:18">FD_SET</name><argument_list pos:start="121:19" pos:end="121:29">(<argument pos:start="121:20" pos:end="121:21"><expr pos:start="121:20" pos:end="121:21"><name pos:start="121:20" pos:end="121:21">fd</name></expr></argument>, <argument pos:start="121:24" pos:end="121:28"><expr pos:start="121:24" pos:end="121:28"><operator pos:start="121:24" pos:end="121:24">&amp;</operator><name pos:start="121:25" pos:end="121:28">wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:14">tv</name><operator pos:start="123:15" pos:end="123:15">.</operator><name pos:start="123:16" pos:end="123:21">tv_sec</name></name> <operator pos:start="123:23" pos:end="123:23">=</operator> <literal type="number" pos:start="123:25" pos:end="123:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:36"><expr pos:start="125:13" pos:end="125:35"><name pos:start="125:13" pos:end="125:22"><name pos:start="125:13" pos:end="125:14">tv</name><operator pos:start="125:15" pos:end="125:15">.</operator><name pos:start="125:16" pos:end="125:22">tv_usec</name></name> <operator pos:start="125:24" pos:end="125:24">=</operator> <literal type="number" pos:start="125:26" pos:end="125:28">100</literal> <operator pos:start="125:30" pos:end="125:30">*</operator> <literal type="number" pos:start="125:32" pos:end="125:35">1000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:61"><expr pos:start="127:13" pos:end="127:60"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:60"><name pos:start="127:19" pos:end="127:24">select</name><argument_list pos:start="127:25" pos:end="127:60">(<argument pos:start="127:26" pos:end="127:35"><expr pos:start="127:26" pos:end="127:35"><name pos:start="127:26" pos:end="127:31">fd_max</name> <operator pos:start="127:33" pos:end="127:33">+</operator> <literal type="number" pos:start="127:35" pos:end="127:35">1</literal></expr></argument>, <argument pos:start="127:38" pos:end="127:41"><expr pos:start="127:38" pos:end="127:41"><name pos:start="127:38" pos:end="127:41">NULL</name></expr></argument>, <argument pos:start="127:44" pos:end="127:48"><expr pos:start="127:44" pos:end="127:48"><operator pos:start="127:44" pos:end="127:44">&amp;</operator><name pos:start="127:45" pos:end="127:48">wfds</name></expr></argument>, <argument pos:start="127:51" pos:end="127:54"><expr pos:start="127:51" pos:end="127:54"><name pos:start="127:51" pos:end="127:54">NULL</name></expr></argument>, <argument pos:start="127:57" pos:end="127:59"><expr pos:start="127:57" pos:end="127:59"><operator pos:start="127:57" pos:end="127:57">&amp;</operator><name pos:start="127:58" pos:end="127:59">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="131:22"><if pos:start="129:13" pos:end="131:22">if <condition pos:start="129:16" pos:end="129:47">(<expr pos:start="129:17" pos:end="129:46"><name pos:start="129:17" pos:end="129:19">ret</name> <operator pos:start="129:21" pos:end="129:21">&gt;</operator> <literal type="number" pos:start="129:23" pos:end="129:23">0</literal> <operator pos:start="129:25" pos:end="129:26">&amp;&amp;</operator> <call pos:start="129:28" pos:end="129:46"><name pos:start="129:28" pos:end="129:35">FD_ISSET</name><argument_list pos:start="129:36" pos:end="129:46">(<argument pos:start="129:37" pos:end="129:38"><expr pos:start="129:37" pos:end="129:38"><name pos:start="129:37" pos:end="129:38">fd</name></expr></argument>, <argument pos:start="129:41" pos:end="129:45"><expr pos:start="129:41" pos:end="129:45"><operator pos:start="129:41" pos:end="129:41">&amp;</operator><name pos:start="129:42" pos:end="129:45">wfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:22"><block_content pos:start="131:17" pos:end="131:22">

                <break pos:start="131:17" pos:end="131:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        

        <comment type="block" pos:start="137:9" pos:end="137:24">/* test error */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:29"><expr pos:start="139:9" pos:end="139:28"><name pos:start="139:9" pos:end="139:14">optlen</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <sizeof pos:start="139:18" pos:end="139:28">sizeof<argument_list pos:start="139:24" pos:end="139:28">(<argument pos:start="139:25" pos:end="139:27"><expr pos:start="139:25" pos:end="139:27"><name pos:start="139:25" pos:end="139:27">ret</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:61"><expr pos:start="141:9" pos:end="141:60"><call pos:start="141:9" pos:end="141:60"><name pos:start="141:9" pos:end="141:18">getsockopt</name> <argument_list pos:start="141:20" pos:end="141:60">(<argument pos:start="141:21" pos:end="141:22"><expr pos:start="141:21" pos:end="141:22"><name pos:start="141:21" pos:end="141:22">fd</name></expr></argument>, <argument pos:start="141:25" pos:end="141:34"><expr pos:start="141:25" pos:end="141:34"><name pos:start="141:25" pos:end="141:34">SOL_SOCKET</name></expr></argument>, <argument pos:start="141:37" pos:end="141:44"><expr pos:start="141:37" pos:end="141:44"><name pos:start="141:37" pos:end="141:44">SO_ERROR</name></expr></argument>, <argument pos:start="141:47" pos:end="141:50"><expr pos:start="141:47" pos:end="141:50"><operator pos:start="141:47" pos:end="141:47">&amp;</operator><name pos:start="141:48" pos:end="141:50">ret</name></expr></argument>, <argument pos:start="141:53" pos:end="141:59"><expr pos:start="141:53" pos:end="141:59"><operator pos:start="141:53" pos:end="141:53">&amp;</operator><name pos:start="141:54" pos:end="141:59">optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="145:22"><if pos:start="143:9" pos:end="145:22">if <condition pos:start="143:12" pos:end="143:21">(<expr pos:start="143:13" pos:end="143:20"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:18">!=</operator> <literal type="number" pos:start="143:20" pos:end="143:20">0</literal></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:22"><block_content pos:start="145:13" pos:end="145:22">

            <goto pos:start="145:13" pos:end="145:22">goto <name pos:start="145:18" pos:end="145:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:15"><expr pos:start="149:5" pos:end="149:14"><name pos:start="149:5" pos:end="149:9"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:9">fd</name></name> <operator pos:start="149:11" pos:end="149:11">=</operator> <name pos:start="149:13" pos:end="149:14">fd</name></expr>;</expr_stmt>

    <return pos:start="151:5" pos:end="151:13">return <expr pos:start="151:12" pos:end="151:12"><literal type="number" pos:start="151:12" pos:end="151:12">0</literal></expr>;</return>



 <label pos:start="155:2" pos:end="155:6"><name pos:start="155:2" pos:end="155:5">fail</name>:</label>

    <expr_stmt pos:start="157:5" pos:end="157:21"><expr pos:start="157:5" pos:end="157:20"><name pos:start="157:5" pos:end="157:7">ret</name> <operator pos:start="157:9" pos:end="157:9">=</operator> <name pos:start="157:11" pos:end="157:20">AVERROR_IO</name></expr>;</expr_stmt>

 <label pos:start="159:2" pos:end="159:7"><name pos:start="159:2" pos:end="159:6">fail1</name>:</label>

    <if_stmt pos:start="161:5" pos:end="163:18"><if pos:start="161:5" pos:end="163:18">if <condition pos:start="161:8" pos:end="161:16">(<expr pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:10">fd</name> <operator pos:start="161:12" pos:end="161:13">&gt;=</operator> <literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="163:18"><block_content pos:start="163:9" pos:end="163:18">

        <expr_stmt pos:start="163:9" pos:end="163:18"><expr pos:start="163:9" pos:end="163:17"><call pos:start="163:9" pos:end="163:17"><name pos:start="163:9" pos:end="163:13">close</name><argument_list pos:start="163:14" pos:end="163:17">(<argument pos:start="163:15" pos:end="163:16"><expr pos:start="163:15" pos:end="163:16"><name pos:start="163:15" pos:end="163:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:15"><expr pos:start="165:5" pos:end="165:14"><call pos:start="165:5" pos:end="165:14"><name pos:start="165:5" pos:end="165:11">av_free</name><argument_list pos:start="165:12" pos:end="165:14">(<argument pos:start="165:13" pos:end="165:13"><expr pos:start="165:13" pos:end="165:13"><name pos:start="165:13" pos:end="165:13">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="167:5" pos:end="167:15">return <expr pos:start="167:12" pos:end="167:14"><name pos:start="167:12" pos:end="167:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
