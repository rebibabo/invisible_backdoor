<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10584.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gen_flt3_ldst</name> <parameter_list pos:start="1:27" pos:end="3:63">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:39">DisasContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:54">uint32_t</name></type> <name pos:start="1:56" pos:end="1:58">opc</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:33"><decl pos:start="3:28" pos:end="3:33"><type pos:start="3:28" pos:end="3:33"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:33">fd</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:41"><decl pos:start="3:36" pos:end="3:41"><type pos:start="3:36" pos:end="3:41"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:41">fs</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:51"><decl pos:start="3:44" pos:end="3:51"><type pos:start="3:44" pos:end="3:51"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:51">base</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:62"><decl pos:start="3:54" pos:end="3:62"><type pos:start="3:54" pos:end="3:62"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:62">index</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="201:1">{<block_content pos:start="7:5" pos:end="199:48">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">opn</name> <init pos:start="7:21" pos:end="7:49">= <expr pos:start="7:23" pos:end="7:49"><literal type="string" pos:start="7:23" pos:end="7:49">"extended float load/store"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">store</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">TCGv</name></type> <name pos:start="11:10" pos:end="11:11">t0</name> <init pos:start="11:13" pos:end="11:28">= <expr pos:start="11:15" pos:end="11:28"><call pos:start="11:15" pos:end="11:28"><name pos:start="11:15" pos:end="11:26">tcg_temp_new</name><argument_list pos:start="11:27" pos:end="11:28">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="29:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:12">base</name> <operator pos:start="15:14" pos:end="15:15">==</operator> <literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr>)</condition> <block pos:start="15:20" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:32">

        <expr_stmt pos:start="17:9" pos:end="17:32"><expr pos:start="17:9" pos:end="17:31"><call pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:20">gen_load_gpr</name><argument_list pos:start="17:21" pos:end="17:31">(<argument pos:start="17:22" pos:end="17:23"><expr pos:start="17:22" pos:end="17:23"><name pos:start="17:22" pos:end="17:23">t0</name></expr></argument>, <argument pos:start="17:26" pos:end="17:30"><expr pos:start="17:26" pos:end="17:30"><name pos:start="17:26" pos:end="17:30">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="19:7" pos:end="23:5">else if <condition pos:start="19:15" pos:end="19:26">(<expr pos:start="19:16" pos:end="19:25"><name pos:start="19:16" pos:end="19:20">index</name> <operator pos:start="19:22" pos:end="19:23">==</operator> <literal type="number" pos:start="19:25" pos:end="19:25">0</literal></expr>)</condition> <block pos:start="19:28" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:31">

        <expr_stmt pos:start="21:9" pos:end="21:31"><expr pos:start="21:9" pos:end="21:30"><call pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:20">gen_load_gpr</name><argument_list pos:start="21:21" pos:end="21:30">(<argument pos:start="21:22" pos:end="21:23"><expr pos:start="21:22" pos:end="21:23"><name pos:start="21:22" pos:end="21:23">t0</name></expr></argument>, <argument pos:start="21:26" pos:end="21:29"><expr pos:start="21:26" pos:end="21:29"><name pos:start="21:26" pos:end="21:29">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="29:5">else <block pos:start="23:12" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:48">

        <expr_stmt pos:start="25:9" pos:end="25:32"><expr pos:start="25:9" pos:end="25:31"><call pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:20">gen_load_gpr</name><argument_list pos:start="25:21" pos:end="25:31">(<argument pos:start="25:22" pos:end="25:23"><expr pos:start="25:22" pos:end="25:23"><name pos:start="25:22" pos:end="25:23">t0</name></expr></argument>, <argument pos:start="25:26" pos:end="25:30"><expr pos:start="25:26" pos:end="25:30"><name pos:start="25:26" pos:end="25:30">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:48"><expr pos:start="27:9" pos:end="27:47"><call pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:23">gen_op_addr_add</name><argument_list pos:start="27:24" pos:end="27:47">(<argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><name pos:start="27:25" pos:end="27:27">ctx</name></expr></argument>, <argument pos:start="27:30" pos:end="27:31"><expr pos:start="27:30" pos:end="27:31"><name pos:start="27:30" pos:end="27:31">t0</name></expr></argument>, <argument pos:start="27:34" pos:end="27:46"><expr pos:start="27:34" pos:end="27:46"><name pos:start="27:34" pos:end="27:46"><name pos:start="27:34" pos:end="27:40">cpu_gpr</name><index pos:start="27:41" pos:end="27:46">[<expr pos:start="27:42" pos:end="27:45"><name pos:start="27:42" pos:end="27:45">base</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="31:5" pos:end="33:24">/* Don't do NOP if destination is zero: we must perform the actual

       memory access. */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><call pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:18">save_cpu_state</name><argument_list pos:start="35:19" pos:end="35:26">(<argument pos:start="35:20" pos:end="35:22"><expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">ctx</name></expr></argument>, <argument pos:start="35:25" pos:end="35:25"><expr pos:start="35:25" pos:end="35:25"><literal type="number" pos:start="35:25" pos:end="35:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="37:5" pos:end="193:5">switch <condition pos:start="37:12" pos:end="37:16">(<expr pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">opc</name></expr>)</condition> <block pos:start="37:18" pos:end="193:5">{<block_content pos:start="39:5" pos:end="191:14">

    <case pos:start="39:5" pos:end="39:19">case <expr pos:start="39:10" pos:end="39:18"><name pos:start="39:10" pos:end="39:18">OPC_LWXC1</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:25"><expr pos:start="41:9" pos:end="41:24"><call pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:19">check_cop1x</name><argument_list pos:start="41:20" pos:end="41:24">(<argument pos:start="41:21" pos:end="41:23"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="43:9" pos:end="57:9">{<block_content pos:start="45:13" pos:end="55:35">

            <decl_stmt pos:start="45:13" pos:end="45:46"><decl pos:start="45:13" pos:end="45:45"><type pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:20">TCGv_i32</name></type> <name pos:start="45:22" pos:end="45:24">fp0</name> <init pos:start="45:26" pos:end="45:45">= <expr pos:start="45:28" pos:end="45:45"><call pos:start="45:28" pos:end="45:45"><name pos:start="45:28" pos:end="45:43">tcg_temp_new_i32</name><argument_list pos:start="45:44" pos:end="45:45">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="49:13" pos:end="49:53"><expr pos:start="49:13" pos:end="49:52"><call pos:start="49:13" pos:end="49:52"><name pos:start="49:13" pos:end="49:30">tcg_gen_qemu_ld32s</name><argument_list pos:start="49:31" pos:end="49:52">(<argument pos:start="49:32" pos:end="49:33"><expr pos:start="49:32" pos:end="49:33"><name pos:start="49:32" pos:end="49:33">t0</name></expr></argument>, <argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><name pos:start="49:36" pos:end="49:37">t0</name></expr></argument>, <argument pos:start="49:40" pos:end="49:51"><expr pos:start="49:40" pos:end="49:51"><name pos:start="49:40" pos:end="49:51"><name pos:start="49:40" pos:end="49:42">ctx</name><operator pos:start="49:43" pos:end="49:44">-&gt;</operator><name pos:start="49:45" pos:end="49:51">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:42"><expr pos:start="51:13" pos:end="51:41"><call pos:start="51:13" pos:end="51:41"><name pos:start="51:13" pos:end="51:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="51:33" pos:end="51:41">(<argument pos:start="51:34" pos:end="51:36"><expr pos:start="51:34" pos:end="51:36"><name pos:start="51:34" pos:end="51:36">fp0</name></expr></argument>, <argument pos:start="51:39" pos:end="51:40"><expr pos:start="51:39" pos:end="51:40"><name pos:start="51:39" pos:end="51:40">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:37"><expr pos:start="53:13" pos:end="53:36"><call pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:27">gen_store_fpr32</name><argument_list pos:start="53:28" pos:end="53:36">(<argument pos:start="53:29" pos:end="53:31"><expr pos:start="53:29" pos:end="53:31"><name pos:start="53:29" pos:end="53:31">fp0</name></expr></argument>, <argument pos:start="53:34" pos:end="53:35"><expr pos:start="53:34" pos:end="53:35"><name pos:start="53:34" pos:end="53:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:35"><expr pos:start="55:13" pos:end="55:34"><call pos:start="55:13" pos:end="55:34"><name pos:start="55:13" pos:end="55:29">tcg_temp_free_i32</name><argument_list pos:start="55:30" pos:end="55:34">(<argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">fp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:11">opn</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <literal type="string" pos:start="59:15" pos:end="59:21">"lwxc1"</literal></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:19">case <expr pos:start="63:10" pos:end="63:18"><name pos:start="63:10" pos:end="63:18">OPC_LDXC1</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:25"><expr pos:start="65:9" pos:end="65:24"><call pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:19">check_cop1x</name><argument_list pos:start="65:20" pos:end="65:24">(<argument pos:start="65:21" pos:end="65:23"><expr pos:start="65:21" pos:end="65:23"><name pos:start="65:21" pos:end="65:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:37"><expr pos:start="67:9" pos:end="67:36"><call pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:27">check_cp1_registers</name><argument_list pos:start="67:28" pos:end="67:36">(<argument pos:start="67:29" pos:end="67:31"><expr pos:start="67:29" pos:end="67:31"><name pos:start="67:29" pos:end="67:31">ctx</name></expr></argument>, <argument pos:start="67:34" pos:end="67:35"><expr pos:start="67:34" pos:end="67:35"><name pos:start="67:34" pos:end="67:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="69:9" pos:end="81:9">{<block_content pos:start="71:13" pos:end="79:35">

            <decl_stmt pos:start="71:13" pos:end="71:46"><decl pos:start="71:13" pos:end="71:45"><type pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:20">TCGv_i64</name></type> <name pos:start="71:22" pos:end="71:24">fp0</name> <init pos:start="71:26" pos:end="71:45">= <expr pos:start="71:28" pos:end="71:45"><call pos:start="71:28" pos:end="71:45"><name pos:start="71:28" pos:end="71:43">tcg_temp_new_i64</name><argument_list pos:start="71:44" pos:end="71:45">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="75:13" pos:end="75:53"><expr pos:start="75:13" pos:end="75:52"><call pos:start="75:13" pos:end="75:52"><name pos:start="75:13" pos:end="75:29">tcg_gen_qemu_ld64</name><argument_list pos:start="75:30" pos:end="75:52">(<argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:33">fp0</name></expr></argument>, <argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">t0</name></expr></argument>, <argument pos:start="75:40" pos:end="75:51"><expr pos:start="75:40" pos:end="75:51"><name pos:start="75:40" pos:end="75:51"><name pos:start="75:40" pos:end="75:42">ctx</name><operator pos:start="75:43" pos:end="75:44">-&gt;</operator><name pos:start="75:45" pos:end="75:51">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:42"><expr pos:start="77:13" pos:end="77:41"><call pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:27">gen_store_fpr64</name><argument_list pos:start="77:28" pos:end="77:41">(<argument pos:start="77:29" pos:end="77:31"><expr pos:start="77:29" pos:end="77:31"><name pos:start="77:29" pos:end="77:31">ctx</name></expr></argument>, <argument pos:start="77:34" pos:end="77:36"><expr pos:start="77:34" pos:end="77:36"><name pos:start="77:34" pos:end="77:36">fp0</name></expr></argument>, <argument pos:start="77:39" pos:end="77:40"><expr pos:start="77:39" pos:end="77:40"><name pos:start="77:39" pos:end="77:40">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:35"><expr pos:start="79:13" pos:end="79:34"><call pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:29">tcg_temp_free_i64</name><argument_list pos:start="79:30" pos:end="79:34">(<argument pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><name pos:start="79:31" pos:end="79:33">fp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:11">opn</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <literal type="string" pos:start="83:15" pos:end="83:21">"ldxc1"</literal></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:19">case <expr pos:start="87:10" pos:end="87:18"><name pos:start="87:10" pos:end="87:18">OPC_LUXC1</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:33"><expr pos:start="89:9" pos:end="89:32"><call pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:27">check_cp1_64bitmode</name><argument_list pos:start="89:28" pos:end="89:32">(<argument pos:start="89:29" pos:end="89:31"><expr pos:start="89:29" pos:end="89:31"><name pos:start="89:29" pos:end="89:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:38"><expr pos:start="91:9" pos:end="91:37"><call pos:start="91:9" pos:end="91:37"><name pos:start="91:9" pos:end="91:23">tcg_gen_andi_tl</name><argument_list pos:start="91:24" pos:end="91:37">(<argument pos:start="91:25" pos:end="91:26"><expr pos:start="91:25" pos:end="91:26"><name pos:start="91:25" pos:end="91:26">t0</name></expr></argument>, <argument pos:start="91:29" pos:end="91:30"><expr pos:start="91:29" pos:end="91:30"><name pos:start="91:29" pos:end="91:30">t0</name></expr></argument>, <argument pos:start="91:33" pos:end="91:36"><expr pos:start="91:33" pos:end="91:36"><operator pos:start="91:33" pos:end="91:33">~</operator><literal type="number" pos:start="91:34" pos:end="91:36">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="93:9" pos:end="105:9">{<block_content pos:start="95:13" pos:end="103:35">

            <decl_stmt pos:start="95:13" pos:end="95:46"><decl pos:start="95:13" pos:end="95:45"><type pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:20">TCGv_i64</name></type> <name pos:start="95:22" pos:end="95:24">fp0</name> <init pos:start="95:26" pos:end="95:45">= <expr pos:start="95:28" pos:end="95:45"><call pos:start="95:28" pos:end="95:45"><name pos:start="95:28" pos:end="95:43">tcg_temp_new_i64</name><argument_list pos:start="95:44" pos:end="95:45">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="99:13" pos:end="99:53"><expr pos:start="99:13" pos:end="99:52"><call pos:start="99:13" pos:end="99:52"><name pos:start="99:13" pos:end="99:29">tcg_gen_qemu_ld64</name><argument_list pos:start="99:30" pos:end="99:52">(<argument pos:start="99:31" pos:end="99:33"><expr pos:start="99:31" pos:end="99:33"><name pos:start="99:31" pos:end="99:33">fp0</name></expr></argument>, <argument pos:start="99:36" pos:end="99:37"><expr pos:start="99:36" pos:end="99:37"><name pos:start="99:36" pos:end="99:37">t0</name></expr></argument>, <argument pos:start="99:40" pos:end="99:51"><expr pos:start="99:40" pos:end="99:51"><name pos:start="99:40" pos:end="99:51"><name pos:start="99:40" pos:end="99:42">ctx</name><operator pos:start="99:43" pos:end="99:44">-&gt;</operator><name pos:start="99:45" pos:end="99:51">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><call pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:27">gen_store_fpr64</name><argument_list pos:start="101:28" pos:end="101:41">(<argument pos:start="101:29" pos:end="101:31"><expr pos:start="101:29" pos:end="101:31"><name pos:start="101:29" pos:end="101:31">ctx</name></expr></argument>, <argument pos:start="101:34" pos:end="101:36"><expr pos:start="101:34" pos:end="101:36"><name pos:start="101:34" pos:end="101:36">fp0</name></expr></argument>, <argument pos:start="101:39" pos:end="101:40"><expr pos:start="101:39" pos:end="101:40"><name pos:start="101:39" pos:end="101:40">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:35"><expr pos:start="103:13" pos:end="103:34"><call pos:start="103:13" pos:end="103:34"><name pos:start="103:13" pos:end="103:29">tcg_temp_free_i64</name><argument_list pos:start="103:30" pos:end="103:34">(<argument pos:start="103:31" pos:end="103:33"><expr pos:start="103:31" pos:end="103:33"><name pos:start="103:31" pos:end="103:33">fp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="107:9" pos:end="107:22"><expr pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:11">opn</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <literal type="string" pos:start="107:15" pos:end="107:21">"luxc1"</literal></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:19">case <expr pos:start="111:10" pos:end="111:18"><name pos:start="111:10" pos:end="111:18">OPC_SWXC1</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:25"><expr pos:start="113:9" pos:end="113:24"><call pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:19">check_cop1x</name><argument_list pos:start="113:20" pos:end="113:24">(<argument pos:start="113:21" pos:end="113:23"><expr pos:start="113:21" pos:end="113:23"><name pos:start="113:21" pos:end="113:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="115:9" pos:end="133:9">{<block_content pos:start="117:13" pos:end="131:34">

            <decl_stmt pos:start="117:13" pos:end="117:46"><decl pos:start="117:13" pos:end="117:45"><type pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:20">TCGv_i32</name></type> <name pos:start="117:22" pos:end="117:24">fp0</name> <init pos:start="117:26" pos:end="117:45">= <expr pos:start="117:28" pos:end="117:45"><call pos:start="117:28" pos:end="117:45"><name pos:start="117:28" pos:end="117:43">tcg_temp_new_i32</name><argument_list pos:start="117:44" pos:end="117:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="119:13" pos:end="119:37"><decl pos:start="119:13" pos:end="119:36"><type pos:start="119:13" pos:end="119:16"><name pos:start="119:13" pos:end="119:16">TCGv</name></type> <name pos:start="119:18" pos:end="119:19">t1</name> <init pos:start="119:21" pos:end="119:36">= <expr pos:start="119:23" pos:end="119:36"><call pos:start="119:23" pos:end="119:36"><name pos:start="119:23" pos:end="119:34">tcg_temp_new</name><argument_list pos:start="119:35" pos:end="119:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="123:13" pos:end="123:36"><expr pos:start="123:13" pos:end="123:35"><call pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:26">gen_load_fpr32</name><argument_list pos:start="123:27" pos:end="123:35">(<argument pos:start="123:28" pos:end="123:30"><expr pos:start="123:28" pos:end="123:30"><name pos:start="123:28" pos:end="123:30">fp0</name></expr></argument>, <argument pos:start="123:33" pos:end="123:34"><expr pos:start="123:33" pos:end="123:34"><name pos:start="123:33" pos:end="123:34">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:41"><expr pos:start="125:13" pos:end="125:40"><call pos:start="125:13" pos:end="125:40"><name pos:start="125:13" pos:end="125:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="125:32" pos:end="125:40">(<argument pos:start="125:33" pos:end="125:34"><expr pos:start="125:33" pos:end="125:34"><name pos:start="125:33" pos:end="125:34">t1</name></expr></argument>, <argument pos:start="125:37" pos:end="125:39"><expr pos:start="125:37" pos:end="125:39"><name pos:start="125:37" pos:end="125:39">fp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:52"><expr pos:start="127:13" pos:end="127:51"><call pos:start="127:13" pos:end="127:51"><name pos:start="127:13" pos:end="127:29">tcg_gen_qemu_st32</name><argument_list pos:start="127:30" pos:end="127:51">(<argument pos:start="127:31" pos:end="127:32"><expr pos:start="127:31" pos:end="127:32"><name pos:start="127:31" pos:end="127:32">t1</name></expr></argument>, <argument pos:start="127:35" pos:end="127:36"><expr pos:start="127:35" pos:end="127:36"><name pos:start="127:35" pos:end="127:36">t0</name></expr></argument>, <argument pos:start="127:39" pos:end="127:50"><expr pos:start="127:39" pos:end="127:50"><name pos:start="127:39" pos:end="127:50"><name pos:start="127:39" pos:end="127:41">ctx</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:50">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:35"><expr pos:start="129:13" pos:end="129:34"><call pos:start="129:13" pos:end="129:34"><name pos:start="129:13" pos:end="129:29">tcg_temp_free_i32</name><argument_list pos:start="129:30" pos:end="129:34">(<argument pos:start="129:31" pos:end="129:33"><expr pos:start="129:31" pos:end="129:33"><name pos:start="129:31" pos:end="129:33">fp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:34"><expr pos:start="131:13" pos:end="131:33"><call pos:start="131:13" pos:end="131:33"><name pos:start="131:13" pos:end="131:29">tcg_temp_free_i32</name><argument_list pos:start="131:30" pos:end="131:33">(<argument pos:start="131:31" pos:end="131:32"><expr pos:start="131:31" pos:end="131:32"><name pos:start="131:31" pos:end="131:32">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="135:9" pos:end="135:22"><expr pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:11">opn</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <literal type="string" pos:start="135:15" pos:end="135:21">"swxc1"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:18"><expr pos:start="137:9" pos:end="137:17"><name pos:start="137:9" pos:end="137:13">store</name> <operator pos:start="137:15" pos:end="137:15">=</operator> <literal type="number" pos:start="137:17" pos:end="137:17">1</literal></expr>;</expr_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <case pos:start="141:5" pos:end="141:19">case <expr pos:start="141:10" pos:end="141:18"><name pos:start="141:10" pos:end="141:18">OPC_SDXC1</name></expr>:</case>

        <expr_stmt pos:start="143:9" pos:end="143:25"><expr pos:start="143:9" pos:end="143:24"><call pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:19">check_cop1x</name><argument_list pos:start="143:20" pos:end="143:24">(<argument pos:start="143:21" pos:end="143:23"><expr pos:start="143:21" pos:end="143:23"><name pos:start="143:21" pos:end="143:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:37"><expr pos:start="145:9" pos:end="145:36"><call pos:start="145:9" pos:end="145:36"><name pos:start="145:9" pos:end="145:27">check_cp1_registers</name><argument_list pos:start="145:28" pos:end="145:36">(<argument pos:start="145:29" pos:end="145:31"><expr pos:start="145:29" pos:end="145:31"><name pos:start="145:29" pos:end="145:31">ctx</name></expr></argument>, <argument pos:start="145:34" pos:end="145:35"><expr pos:start="145:34" pos:end="145:35"><name pos:start="145:34" pos:end="145:35">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="147:9" pos:end="159:9">{<block_content pos:start="149:13" pos:end="157:35">

            <decl_stmt pos:start="149:13" pos:end="149:46"><decl pos:start="149:13" pos:end="149:45"><type pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:20">TCGv_i64</name></type> <name pos:start="149:22" pos:end="149:24">fp0</name> <init pos:start="149:26" pos:end="149:45">= <expr pos:start="149:28" pos:end="149:45"><call pos:start="149:28" pos:end="149:45"><name pos:start="149:28" pos:end="149:43">tcg_temp_new_i64</name><argument_list pos:start="149:44" pos:end="149:45">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="153:13" pos:end="153:41"><expr pos:start="153:13" pos:end="153:40"><call pos:start="153:13" pos:end="153:40"><name pos:start="153:13" pos:end="153:26">gen_load_fpr64</name><argument_list pos:start="153:27" pos:end="153:40">(<argument pos:start="153:28" pos:end="153:30"><expr pos:start="153:28" pos:end="153:30"><name pos:start="153:28" pos:end="153:30">ctx</name></expr></argument>, <argument pos:start="153:33" pos:end="153:35"><expr pos:start="153:33" pos:end="153:35"><name pos:start="153:33" pos:end="153:35">fp0</name></expr></argument>, <argument pos:start="153:38" pos:end="153:39"><expr pos:start="153:38" pos:end="153:39"><name pos:start="153:38" pos:end="153:39">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:53"><expr pos:start="155:13" pos:end="155:52"><call pos:start="155:13" pos:end="155:52"><name pos:start="155:13" pos:end="155:29">tcg_gen_qemu_st64</name><argument_list pos:start="155:30" pos:end="155:52">(<argument pos:start="155:31" pos:end="155:33"><expr pos:start="155:31" pos:end="155:33"><name pos:start="155:31" pos:end="155:33">fp0</name></expr></argument>, <argument pos:start="155:36" pos:end="155:37"><expr pos:start="155:36" pos:end="155:37"><name pos:start="155:36" pos:end="155:37">t0</name></expr></argument>, <argument pos:start="155:40" pos:end="155:51"><expr pos:start="155:40" pos:end="155:51"><name pos:start="155:40" pos:end="155:51"><name pos:start="155:40" pos:end="155:42">ctx</name><operator pos:start="155:43" pos:end="155:44">-&gt;</operator><name pos:start="155:45" pos:end="155:51">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:35"><expr pos:start="157:13" pos:end="157:34"><call pos:start="157:13" pos:end="157:34"><name pos:start="157:13" pos:end="157:29">tcg_temp_free_i64</name><argument_list pos:start="157:30" pos:end="157:34">(<argument pos:start="157:31" pos:end="157:33"><expr pos:start="157:31" pos:end="157:33"><name pos:start="157:31" pos:end="157:33">fp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="161:9" pos:end="161:22"><expr pos:start="161:9" pos:end="161:21"><name pos:start="161:9" pos:end="161:11">opn</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <literal type="string" pos:start="161:15" pos:end="161:21">"sdxc1"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:18"><expr pos:start="163:9" pos:end="163:17"><name pos:start="163:9" pos:end="163:13">store</name> <operator pos:start="163:15" pos:end="163:15">=</operator> <literal type="number" pos:start="163:17" pos:end="163:17">1</literal></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:19">case <expr pos:start="167:10" pos:end="167:18"><name pos:start="167:10" pos:end="167:18">OPC_SUXC1</name></expr>:</case>

        <expr_stmt pos:start="169:9" pos:end="169:33"><expr pos:start="169:9" pos:end="169:32"><call pos:start="169:9" pos:end="169:32"><name pos:start="169:9" pos:end="169:27">check_cp1_64bitmode</name><argument_list pos:start="169:28" pos:end="169:32">(<argument pos:start="169:29" pos:end="169:31"><expr pos:start="169:29" pos:end="169:31"><name pos:start="169:29" pos:end="169:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:38"><expr pos:start="171:9" pos:end="171:37"><call pos:start="171:9" pos:end="171:37"><name pos:start="171:9" pos:end="171:23">tcg_gen_andi_tl</name><argument_list pos:start="171:24" pos:end="171:37">(<argument pos:start="171:25" pos:end="171:26"><expr pos:start="171:25" pos:end="171:26"><name pos:start="171:25" pos:end="171:26">t0</name></expr></argument>, <argument pos:start="171:29" pos:end="171:30"><expr pos:start="171:29" pos:end="171:30"><name pos:start="171:29" pos:end="171:30">t0</name></expr></argument>, <argument pos:start="171:33" pos:end="171:36"><expr pos:start="171:33" pos:end="171:36"><operator pos:start="171:33" pos:end="171:33">~</operator><literal type="number" pos:start="171:34" pos:end="171:36">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="173:9" pos:end="185:9">{<block_content pos:start="175:13" pos:end="183:35">

            <decl_stmt pos:start="175:13" pos:end="175:46"><decl pos:start="175:13" pos:end="175:45"><type pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:20">TCGv_i64</name></type> <name pos:start="175:22" pos:end="175:24">fp0</name> <init pos:start="175:26" pos:end="175:45">= <expr pos:start="175:28" pos:end="175:45"><call pos:start="175:28" pos:end="175:45"><name pos:start="175:28" pos:end="175:43">tcg_temp_new_i64</name><argument_list pos:start="175:44" pos:end="175:45">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="179:13" pos:end="179:41"><expr pos:start="179:13" pos:end="179:40"><call pos:start="179:13" pos:end="179:40"><name pos:start="179:13" pos:end="179:26">gen_load_fpr64</name><argument_list pos:start="179:27" pos:end="179:40">(<argument pos:start="179:28" pos:end="179:30"><expr pos:start="179:28" pos:end="179:30"><name pos:start="179:28" pos:end="179:30">ctx</name></expr></argument>, <argument pos:start="179:33" pos:end="179:35"><expr pos:start="179:33" pos:end="179:35"><name pos:start="179:33" pos:end="179:35">fp0</name></expr></argument>, <argument pos:start="179:38" pos:end="179:39"><expr pos:start="179:38" pos:end="179:39"><name pos:start="179:38" pos:end="179:39">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:53"><expr pos:start="181:13" pos:end="181:52"><call pos:start="181:13" pos:end="181:52"><name pos:start="181:13" pos:end="181:29">tcg_gen_qemu_st64</name><argument_list pos:start="181:30" pos:end="181:52">(<argument pos:start="181:31" pos:end="181:33"><expr pos:start="181:31" pos:end="181:33"><name pos:start="181:31" pos:end="181:33">fp0</name></expr></argument>, <argument pos:start="181:36" pos:end="181:37"><expr pos:start="181:36" pos:end="181:37"><name pos:start="181:36" pos:end="181:37">t0</name></expr></argument>, <argument pos:start="181:40" pos:end="181:51"><expr pos:start="181:40" pos:end="181:51"><name pos:start="181:40" pos:end="181:51"><name pos:start="181:40" pos:end="181:42">ctx</name><operator pos:start="181:43" pos:end="181:44">-&gt;</operator><name pos:start="181:45" pos:end="181:51">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:35"><expr pos:start="183:13" pos:end="183:34"><call pos:start="183:13" pos:end="183:34"><name pos:start="183:13" pos:end="183:29">tcg_temp_free_i64</name><argument_list pos:start="183:30" pos:end="183:34">(<argument pos:start="183:31" pos:end="183:33"><expr pos:start="183:31" pos:end="183:33"><name pos:start="183:31" pos:end="183:33">fp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="187:9" pos:end="187:22"><expr pos:start="187:9" pos:end="187:21"><name pos:start="187:9" pos:end="187:11">opn</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <literal type="string" pos:start="187:15" pos:end="187:21">"suxc1"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:18"><expr pos:start="189:9" pos:end="189:17"><name pos:start="189:9" pos:end="189:13">store</name> <operator pos:start="189:15" pos:end="189:15">=</operator> <literal type="number" pos:start="189:17" pos:end="189:17">1</literal></expr>;</expr_stmt>

        <break pos:start="191:9" pos:end="191:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="195:5" pos:end="195:22"><expr pos:start="195:5" pos:end="195:21"><call pos:start="195:5" pos:end="195:21"><name pos:start="195:5" pos:end="195:17">tcg_temp_free</name><argument_list pos:start="195:18" pos:end="195:21">(<argument pos:start="195:19" pos:end="195:20"><expr pos:start="195:19" pos:end="195:20"><name pos:start="195:19" pos:end="195:20">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="199:48"><expr pos:start="197:5" pos:end="199:47"><call pos:start="197:5" pos:end="199:47"><name pos:start="197:5" pos:end="197:14">MIPS_DEBUG</name><argument_list pos:start="197:15" pos:end="199:47">(<argument pos:start="197:16" pos:end="197:30"><expr pos:start="197:16" pos:end="197:30"><literal type="string" pos:start="197:16" pos:end="197:30">"%s %s, %s(%s)"</literal></expr></argument>, <argument pos:start="197:33" pos:end="197:35"><expr pos:start="197:33" pos:end="197:35"><name pos:start="197:33" pos:end="197:35">opn</name></expr></argument>, <argument pos:start="197:38" pos:end="197:63"><expr pos:start="197:38" pos:end="197:63"><name pos:start="197:38" pos:end="197:63"><name pos:start="197:38" pos:end="197:46">fregnames</name><index pos:start="197:47" pos:end="197:63">[<expr pos:start="197:48" pos:end="197:62"><ternary pos:start="197:48" pos:end="197:62"><condition pos:start="197:48" pos:end="197:54"><expr pos:start="197:48" pos:end="197:52"><name pos:start="197:48" pos:end="197:52">store</name></expr> ?</condition><then pos:start="197:56" pos:end="197:57"> <expr pos:start="197:56" pos:end="197:57"><name pos:start="197:56" pos:end="197:57">fs</name></expr> </then><else pos:start="197:59" pos:end="197:62">: <expr pos:start="197:61" pos:end="197:62"><name pos:start="197:61" pos:end="197:62">fd</name></expr></else></ternary></expr>]</index></name></expr></argument>,

               <argument pos:start="199:16" pos:end="199:30"><expr pos:start="199:16" pos:end="199:30"><name pos:start="199:16" pos:end="199:30"><name pos:start="199:16" pos:end="199:23">regnames</name><index pos:start="199:24" pos:end="199:30">[<expr pos:start="199:25" pos:end="199:29"><name pos:start="199:25" pos:end="199:29">index</name></expr>]</index></name></expr></argument>, <argument pos:start="199:33" pos:end="199:46"><expr pos:start="199:33" pos:end="199:46"><name pos:start="199:33" pos:end="199:46"><name pos:start="199:33" pos:end="199:40">regnames</name><index pos:start="199:41" pos:end="199:46">[<expr pos:start="199:42" pos:end="199:45"><name pos:start="199:42" pos:end="199:45">base</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
