<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9462.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:44">avcodec_encode_audio</name><parameter_list pos:start="1:45" pos:end="5:66">(<parameter pos:start="1:46" pos:end="1:66"><decl pos:start="1:46" pos:end="1:66"><type pos:start="1:46" pos:end="1:66"><name pos:start="1:46" pos:end="1:59">AVCodecContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">avctx</name></decl></parameter>,

                                             <parameter pos:start="3:46" pos:end="3:57"><decl pos:start="3:46" pos:end="3:57"><type pos:start="3:46" pos:end="3:57"><name pos:start="3:46" pos:end="3:52">uint8_t</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:57">buf</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:71">buf_size</name></decl></parameter>,

                                             <parameter pos:start="5:46" pos:end="5:65"><decl pos:start="5:46" pos:end="5:65"><type pos:start="5:46" pos:end="5:65"><specifier pos:start="5:46" pos:end="5:50">const</specifier> <name pos:start="5:52" pos:end="5:56">short</name> <modifier pos:start="5:58" pos:end="5:58">*</modifier></type><name pos:start="5:59" pos:end="5:65">samples</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="147:1">{<block_content pos:start="9:5" pos:end="145:32">

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">AVPacket</name></type> <name pos:start="9:14" pos:end="9:16">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">AVFrame</name></type> <name pos:start="11:13" pos:end="11:18">frame0</name> <init pos:start="11:20" pos:end="11:26">= <expr pos:start="11:22" pos:end="11:26"><block pos:start="11:22" pos:end="11:26">{ <expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:18">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:25"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:25">samples_size</name></decl>, <decl pos:start="15:28" pos:end="15:37"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:28" pos:end="15:37">got_packet</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:25"><expr pos:start="19:5" pos:end="19:24"><call pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:18">av_init_packet</name><argument_list pos:start="19:19" pos:end="19:24">(<argument pos:start="19:20" pos:end="19:23"><expr pos:start="19:20" pos:end="19:23"><operator pos:start="19:20" pos:end="19:20">&amp;</operator><name pos:start="19:21" pos:end="19:23">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:7">pkt</name><operator pos:start="21:8" pos:end="21:8">.</operator><name pos:start="21:9" pos:end="21:12">data</name></name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:18">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:24"><expr pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:7">pkt</name><operator pos:start="23:8" pos:end="23:8">.</operator><name pos:start="23:9" pos:end="23:12">size</name></name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:23">buf_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="117:5"><if pos:start="27:5" pos:end="113:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">samples</name></expr>)</condition> <block pos:start="27:18" pos:end="113:5">{<block_content pos:start="29:9" pos:end="111:59">

        <expr_stmt pos:start="29:9" pos:end="29:24"><expr pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:13">frame</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <operator pos:start="29:17" pos:end="29:17">&amp;</operator><name pos:start="29:18" pos:end="29:23">frame0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:42"><expr pos:start="31:9" pos:end="31:41"><call pos:start="31:9" pos:end="31:41"><name pos:start="31:9" pos:end="31:34">avcodec_get_frame_defaults</name><argument_list pos:start="31:35" pos:end="31:41">(<argument pos:start="31:36" pos:end="31:40"><expr pos:start="31:36" pos:end="31:40"><name pos:start="31:36" pos:end="31:40">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="69:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:30">(<expr pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:17">avctx</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:29">frame_size</name></name></expr>)</condition> <block pos:start="35:32" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:50">

            <expr_stmt pos:start="37:13" pos:end="37:50"><expr pos:start="37:13" pos:end="37:49"><name pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:17">frame</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:29">nb_samples</name></name> <operator pos:start="37:31" pos:end="37:31">=</operator> <name pos:start="37:33" pos:end="37:49"><name pos:start="37:33" pos:end="37:37">avctx</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:49">frame_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="69:9">else <block pos:start="39:16" pos:end="69:9">{<block_content pos:start="45:13" pos:end="67:43">

            <comment type="block" pos:start="41:13" pos:end="43:49">/* if frame_size is not set, the number of samples must be

             * calculated from the buffer size */</comment>

            <decl_stmt pos:start="45:13" pos:end="45:31"><decl pos:start="45:13" pos:end="45:30"><type pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:19">int64_t</name></type> <name pos:start="45:21" pos:end="45:30">nb_samples</name></decl>;</decl_stmt>

            <if_stmt pos:start="47:13" pos:end="55:13"><if pos:start="47:13" pos:end="55:13">if <condition pos:start="47:16" pos:end="47:57">(<expr pos:start="47:17" pos:end="47:56"><operator pos:start="47:17" pos:end="47:17">!</operator><call pos:start="47:18" pos:end="47:56"><name pos:start="47:18" pos:end="47:39">av_get_bits_per_sample</name><argument_list pos:start="47:40" pos:end="47:56">(<argument pos:start="47:41" pos:end="47:55"><expr pos:start="47:41" pos:end="47:55"><name pos:start="47:41" pos:end="47:55"><name pos:start="47:41" pos:end="47:45">avctx</name><operator pos:start="47:46" pos:end="47:47">-&gt;</operator><name pos:start="47:48" pos:end="47:55">codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:59" pos:end="55:13">{<block_content pos:start="49:17" pos:end="53:39">

                <expr_stmt pos:start="49:17" pos:end="51:68"><expr pos:start="49:17" pos:end="51:67"><call pos:start="49:17" pos:end="51:67"><name pos:start="49:17" pos:end="49:22">av_log</name><argument_list pos:start="49:23" pos:end="51:67">(<argument pos:start="49:24" pos:end="49:28"><expr pos:start="49:24" pos:end="49:28"><name pos:start="49:24" pos:end="49:28">avctx</name></expr></argument>, <argument pos:start="49:31" pos:end="49:42"><expr pos:start="49:31" pos:end="49:42"><name pos:start="49:31" pos:end="49:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:45" pos:end="51:66"><expr pos:start="49:45" pos:end="51:66"><literal type="string" pos:start="49:45" pos:end="49:78">"avcodec_encode_audio() does not "</literal>

                                            <literal type="string" pos:start="51:45" pos:end="51:66">"support this codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="53:17" pos:end="53:39">return <expr pos:start="53:24" pos:end="53:38"><call pos:start="53:24" pos:end="53:38"><name pos:start="53:24" pos:end="53:30">AVERROR</name><argument_list pos:start="53:31" pos:end="53:38">(<argument pos:start="53:32" pos:end="53:37"><expr pos:start="53:32" pos:end="53:37"><name pos:start="53:32" pos:end="53:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="61:43"><expr pos:start="57:13" pos:end="61:42"><name pos:start="57:13" pos:end="57:22">nb_samples</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <operator pos:start="57:26" pos:end="57:26">(</operator><name pos:start="57:27" pos:end="57:33">int64_t</name><operator pos:start="57:34" pos:end="57:34">)</operator><name pos:start="57:35" pos:end="57:42">buf_size</name> <operator pos:start="57:44" pos:end="57:44">*</operator> <literal type="number" pos:start="57:46" pos:end="57:46">8</literal> <operator pos:start="57:48" pos:end="57:48">/</operator>

                         <operator pos:start="59:26" pos:end="59:26">(</operator><call pos:start="59:27" pos:end="59:65"><name pos:start="59:27" pos:end="59:48">av_get_bits_per_sample</name><argument_list pos:start="59:49" pos:end="59:65">(<argument pos:start="59:50" pos:end="59:64"><expr pos:start="59:50" pos:end="59:64"><name pos:start="59:50" pos:end="59:64"><name pos:start="59:50" pos:end="59:54">avctx</name><operator pos:start="59:55" pos:end="59:56">-&gt;</operator><name pos:start="59:57" pos:end="59:64">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:67" pos:end="59:67">*</operator>

                          <name pos:start="61:27" pos:end="61:41"><name pos:start="61:27" pos:end="61:31">avctx</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:41">channels</name></name><operator pos:start="61:42" pos:end="61:42">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="65:39"><if pos:start="63:13" pos:end="65:39">if <condition pos:start="63:16" pos:end="63:38">(<expr pos:start="63:17" pos:end="63:37"><name pos:start="63:17" pos:end="63:26">nb_samples</name> <operator pos:start="63:28" pos:end="63:29">&gt;=</operator> <name pos:start="63:31" pos:end="63:37">INT_MAX</name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:39"><block_content pos:start="65:17" pos:end="65:39">

                <return pos:start="65:17" pos:end="65:39">return <expr pos:start="65:24" pos:end="65:38"><call pos:start="65:24" pos:end="65:38"><name pos:start="65:24" pos:end="65:30">AVERROR</name><argument_list pos:start="65:31" pos:end="65:38">(<argument pos:start="65:32" pos:end="65:37"><expr pos:start="65:32" pos:end="65:37"><name pos:start="65:32" pos:end="65:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:43"><expr pos:start="67:13" pos:end="67:42"><name pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:17">frame</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:29">nb_samples</name></name> <operator pos:start="67:31" pos:end="67:31">=</operator> <name pos:start="67:33" pos:end="67:42">nb_samples</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="73:9" pos:end="75:33">/* it is assumed that the samples buffer is large enough based on the

         * relevant parameters */</comment>

        <expr_stmt pos:start="77:9" pos:end="81:72"><expr pos:start="77:9" pos:end="81:71"><name pos:start="77:9" pos:end="77:20">samples_size</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <call pos:start="77:24" pos:end="81:71"><name pos:start="77:24" pos:end="77:49">av_samples_get_buffer_size</name><argument_list pos:start="77:50" pos:end="81:71">(<argument pos:start="77:51" pos:end="77:54"><expr pos:start="77:51" pos:end="77:54"><name pos:start="77:51" pos:end="77:54">NULL</name></expr></argument>, <argument pos:start="77:57" pos:end="77:71"><expr pos:start="77:57" pos:end="77:71"><name pos:start="77:57" pos:end="77:71"><name pos:start="77:57" pos:end="77:61">avctx</name><operator pos:start="77:62" pos:end="77:63">-&gt;</operator><name pos:start="77:64" pos:end="77:71">channels</name></name></expr></argument>,

                                                  <argument pos:start="79:51" pos:end="79:67"><expr pos:start="79:51" pos:end="79:67"><name pos:start="79:51" pos:end="79:67"><name pos:start="79:51" pos:end="79:55">frame</name><operator pos:start="79:56" pos:end="79:57">-&gt;</operator><name pos:start="79:58" pos:end="79:67">nb_samples</name></name></expr></argument>,

                                                  <argument pos:start="81:51" pos:end="81:67"><expr pos:start="81:51" pos:end="81:67"><name pos:start="81:51" pos:end="81:67"><name pos:start="81:51" pos:end="81:55">avctx</name><operator pos:start="81:56" pos:end="81:57">-&gt;</operator><name pos:start="81:58" pos:end="81:67">sample_fmt</name></name></expr></argument>, <argument pos:start="81:70" pos:end="81:70"><expr pos:start="81:70" pos:end="81:70"><literal type="number" pos:start="81:70" pos:end="81:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="91:23"><if pos:start="83:9" pos:end="91:23">if <condition pos:start="83:12" pos:end="89:62">(<expr pos:start="83:13" pos:end="89:61"><operator pos:start="83:13" pos:end="83:13">(</operator><name pos:start="83:14" pos:end="83:16">ret</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <call pos:start="83:20" pos:end="89:60"><name pos:start="83:20" pos:end="83:43">avcodec_fill_audio_frame</name><argument_list pos:start="83:44" pos:end="89:60">(<argument pos:start="83:45" pos:end="83:49"><expr pos:start="83:45" pos:end="83:49"><name pos:start="83:45" pos:end="83:49">frame</name></expr></argument>, <argument pos:start="83:52" pos:end="83:66"><expr pos:start="83:52" pos:end="83:66"><name pos:start="83:52" pos:end="83:66"><name pos:start="83:52" pos:end="83:56">avctx</name><operator pos:start="83:57" pos:end="83:58">-&gt;</operator><name pos:start="83:59" pos:end="83:66">channels</name></name></expr></argument>,

                                            <argument pos:start="85:45" pos:end="85:61"><expr pos:start="85:45" pos:end="85:61"><name pos:start="85:45" pos:end="85:61"><name pos:start="85:45" pos:end="85:49">avctx</name><operator pos:start="85:50" pos:end="85:51">-&gt;</operator><name pos:start="85:52" pos:end="85:61">sample_fmt</name></name></expr></argument>,

                                            <argument pos:start="87:45" pos:end="87:68"><expr pos:start="87:45" pos:end="87:68"><operator pos:start="87:45" pos:end="87:45">(</operator><specifier pos:start="87:46" pos:end="87:50">const</specifier> <name pos:start="87:52" pos:end="87:58">uint8_t</name> <operator pos:start="87:60" pos:end="87:60">*</operator><operator pos:start="87:61" pos:end="87:61">)</operator><name pos:start="87:62" pos:end="87:68">samples</name></expr></argument>,

                                            <argument pos:start="89:45" pos:end="89:56"><expr pos:start="89:45" pos:end="89:56"><name pos:start="89:45" pos:end="89:56">samples_size</name></expr></argument>, <argument pos:start="89:59" pos:end="89:59"><expr pos:start="89:59" pos:end="89:59"><literal type="number" pos:start="89:59" pos:end="89:59">1</literal></expr></argument>)</argument_list></call><operator pos:start="89:61" pos:end="89:61">)</operator></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:23"><block_content pos:start="91:13" pos:end="91:23">

            <return pos:start="91:13" pos:end="91:23">return <expr pos:start="91:20" pos:end="91:22"><name pos:start="91:20" pos:end="91:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="95:9" pos:end="99:47">/* fabricate frame pts from sample count.

         * this is needed because the avcodec_encode_audio() API does not have

         * a way for the user to provide pts */</comment>

        <if_stmt pos:start="101:9" pos:end="109:40"><if pos:start="101:9" pos:end="105:80">if <condition pos:start="101:12" pos:end="101:55">(<expr pos:start="101:13" pos:end="101:54"><name pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:17">avctx</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:30">sample_rate</name></name> <operator pos:start="101:32" pos:end="101:33">&amp;&amp;</operator> <name pos:start="101:35" pos:end="101:54"><name pos:start="101:35" pos:end="101:39">avctx</name><operator pos:start="101:40" pos:end="101:41">-&gt;</operator><name pos:start="101:42" pos:end="101:50">time_base</name><operator pos:start="101:51" pos:end="101:51">.</operator><name pos:start="101:52" pos:end="101:54">num</name></name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="105:80"><block_content pos:start="103:13" pos:end="105:80">

            <expr_stmt pos:start="103:13" pos:end="105:80"><expr pos:start="103:13" pos:end="105:79"><name pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:17">frame</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:22">pts</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="105:79"><name pos:start="103:26" pos:end="103:48">ff_samples_to_time_base</name><argument_list pos:start="103:49" pos:end="105:79">(<argument pos:start="103:50" pos:end="103:54"><expr pos:start="103:50" pos:end="103:54"><name pos:start="103:50" pos:end="103:54">avctx</name></expr></argument>,

                                                 <argument pos:start="105:50" pos:end="105:78"><expr pos:start="105:50" pos:end="105:78"><name pos:start="105:50" pos:end="105:78"><name pos:start="105:50" pos:end="105:54">avctx</name><operator pos:start="105:55" pos:end="105:56">-&gt;</operator><name pos:start="105:57" pos:end="105:64">internal</name><operator pos:start="105:65" pos:end="105:66">-&gt;</operator><name pos:start="105:67" pos:end="105:78">sample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="107:9" pos:end="109:40">else<block type="pseudo" pos:start="109:13" pos:end="109:40"><block_content pos:start="109:13" pos:end="109:40">

            <expr_stmt pos:start="109:13" pos:end="109:40"><expr pos:start="109:13" pos:end="109:39"><name pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:17">frame</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:22">pts</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <name pos:start="109:26" pos:end="109:39">AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:59"><expr pos:start="111:9" pos:end="111:58"><name pos:start="111:9" pos:end="111:37"><name pos:start="111:9" pos:end="111:13">avctx</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:23">internal</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:37">sample_count</name></name> <operator pos:start="111:39" pos:end="111:40">+=</operator> <name pos:start="111:42" pos:end="111:58"><name pos:start="111:42" pos:end="111:46">frame</name><operator pos:start="111:47" pos:end="111:48">-&gt;</operator><name pos:start="111:49" pos:end="111:58">nb_samples</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="117:5">else <block pos:start="113:12" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:21">

        <expr_stmt pos:start="115:9" pos:end="115:21"><expr pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:13">frame</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <name pos:start="115:17" pos:end="115:20">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:19"><expr pos:start="121:5" pos:end="121:18"><name pos:start="121:5" pos:end="121:14">got_packet</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <literal type="number" pos:start="121:18" pos:end="121:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:65"><expr pos:start="123:5" pos:end="123:64"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:64"><name pos:start="123:11" pos:end="123:31">avcodec_encode_audio2</name><argument_list pos:start="123:32" pos:end="123:64">(<argument pos:start="123:33" pos:end="123:37"><expr pos:start="123:33" pos:end="123:37"><name pos:start="123:33" pos:end="123:37">avctx</name></expr></argument>, <argument pos:start="123:40" pos:end="123:43"><expr pos:start="123:40" pos:end="123:43"><operator pos:start="123:40" pos:end="123:40">&amp;</operator><name pos:start="123:41" pos:end="123:43">pkt</name></expr></argument>, <argument pos:start="123:46" pos:end="123:50"><expr pos:start="123:46" pos:end="123:50"><name pos:start="123:46" pos:end="123:50">frame</name></expr></argument>, <argument pos:start="123:53" pos:end="123:63"><expr pos:start="123:53" pos:end="123:63"><operator pos:start="123:53" pos:end="123:53">&amp;</operator><name pos:start="123:54" pos:end="123:63">got_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:49">(<expr pos:start="125:9" pos:end="125:48"><operator pos:start="125:9" pos:end="125:9">!</operator><name pos:start="125:10" pos:end="125:12">ret</name> <operator pos:start="125:14" pos:end="125:15">&amp;&amp;</operator> <name pos:start="125:17" pos:end="125:26">got_packet</name> <operator pos:start="125:28" pos:end="125:29">&amp;&amp;</operator> <name pos:start="125:31" pos:end="125:48"><name pos:start="125:31" pos:end="125:35">avctx</name><operator pos:start="125:36" pos:end="125:37">-&gt;</operator><name pos:start="125:38" pos:end="125:48">coded_frame</name></name></expr>)</condition> <block pos:start="125:51" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:72">

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:31"><name pos:start="127:9" pos:end="127:13">avctx</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:26">coded_frame</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:31">pts</name></name>       <operator pos:start="127:39" pos:end="127:39">=</operator> <name pos:start="127:41" pos:end="127:47"><name pos:start="127:41" pos:end="127:43">pkt</name><operator pos:start="127:44" pos:end="127:44">.</operator><name pos:start="127:45" pos:end="127:47">pts</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:72"><expr pos:start="129:9" pos:end="129:71"><name pos:start="129:9" pos:end="129:37"><name pos:start="129:9" pos:end="129:13">avctx</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:26">coded_frame</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:37">key_frame</name></name> <operator pos:start="129:39" pos:end="129:39">=</operator> <operator pos:start="129:41" pos:end="129:41">!</operator><operator pos:start="129:42" pos:end="129:42">!</operator><operator pos:start="129:43" pos:end="129:43">(</operator><name pos:start="129:44" pos:end="129:52"><name pos:start="129:44" pos:end="129:46">pkt</name><operator pos:start="129:47" pos:end="129:47">.</operator><name pos:start="129:48" pos:end="129:52">flags</name></name> <operator pos:start="129:54" pos:end="129:54">&amp;</operator> <name pos:start="129:56" pos:end="129:70">AV_PKT_FLAG_KEY</name><operator pos:start="129:71" pos:end="129:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="133:5" pos:end="133:54">/* free any side data since we cannot return it */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:35"><expr pos:start="135:5" pos:end="135:34"><call pos:start="135:5" pos:end="135:34"><name pos:start="135:5" pos:end="135:28">ff_packet_free_side_data</name><argument_list pos:start="135:29" pos:end="135:34">(<argument pos:start="135:30" pos:end="135:33"><expr pos:start="135:30" pos:end="135:33"><operator pos:start="135:30" pos:end="135:30">&amp;</operator><name pos:start="135:31" pos:end="135:33">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="141:40"><if pos:start="139:5" pos:end="141:40">if <condition pos:start="139:8" pos:end="139:53">(<expr pos:start="139:9" pos:end="139:52"><name pos:start="139:9" pos:end="139:13">frame</name> <operator pos:start="139:15" pos:end="139:16">&amp;&amp;</operator> <name pos:start="139:18" pos:end="139:37"><name pos:start="139:18" pos:end="139:22">frame</name><operator pos:start="139:23" pos:end="139:24">-&gt;</operator><name pos:start="139:25" pos:end="139:37">extended_data</name></name> <operator pos:start="139:39" pos:end="139:40">!=</operator> <name pos:start="139:42" pos:end="139:52"><name pos:start="139:42" pos:end="139:46">frame</name><operator pos:start="139:47" pos:end="139:48">-&gt;</operator><name pos:start="139:49" pos:end="139:52">data</name></name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:40"><block_content pos:start="141:9" pos:end="141:40">

        <expr_stmt pos:start="141:9" pos:end="141:40"><expr pos:start="141:9" pos:end="141:39"><call pos:start="141:9" pos:end="141:39"><name pos:start="141:9" pos:end="141:16">av_freep</name><argument_list pos:start="141:17" pos:end="141:39">(<argument pos:start="141:18" pos:end="141:38"><expr pos:start="141:18" pos:end="141:38"><operator pos:start="141:18" pos:end="141:18">&amp;</operator><name pos:start="141:19" pos:end="141:38"><name pos:start="141:19" pos:end="141:23">frame</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:38">extended_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="145:5" pos:end="145:32">return <expr pos:start="145:12" pos:end="145:31"><ternary pos:start="145:12" pos:end="145:31"><condition pos:start="145:12" pos:end="145:16"><expr pos:start="145:12" pos:end="145:14"><name pos:start="145:12" pos:end="145:14">ret</name></expr> ?</condition><then pos:start="145:18" pos:end="145:20"> <expr pos:start="145:18" pos:end="145:20"><name pos:start="145:18" pos:end="145:20">ret</name></expr> </then><else pos:start="145:22" pos:end="145:31">: <expr pos:start="145:24" pos:end="145:31"><name pos:start="145:24" pos:end="145:31"><name pos:start="145:24" pos:end="145:26">pkt</name><operator pos:start="145:27" pos:end="145:27">.</operator><name pos:start="145:28" pos:end="145:31">size</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
