<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7031.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">notdirty_mem_write</name><parameter_list pos:start="1:31" pos:end="3:59">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:72"><decl pos:start="1:46" pos:end="1:72"><type pos:start="1:46" pos:end="1:72"><name pos:start="1:46" pos:end="1:63">target_phys_addr_t</name></type> <name pos:start="1:65" pos:end="1:72">ram_addr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:39">uint64_t</name></type> <name pos:start="3:41" pos:end="3:43">val</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:68">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">dirty_flags</name></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:64"><expr pos:start="9:5" pos:end="9:63"><name pos:start="9:5" pos:end="9:15">dirty_flags</name> <operator pos:start="9:17" pos:end="9:17">=</operator> <call pos:start="9:19" pos:end="9:63"><name pos:start="9:19" pos:end="9:53">cpu_physical_memory_get_dirty_flags</name><argument_list pos:start="9:54" pos:end="9:63">(<argument pos:start="9:55" pos:end="9:62"><expr pos:start="9:55" pos:end="9:62"><name pos:start="9:55" pos:end="9:62">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:41">(<expr pos:start="11:9" pos:end="11:40"><operator pos:start="11:9" pos:end="11:9">!</operator><operator pos:start="11:10" pos:end="11:10">(</operator><name pos:start="11:11" pos:end="11:21">dirty_flags</name> <operator pos:start="11:23" pos:end="11:23">&amp;</operator> <name pos:start="11:25" pos:end="11:39">CODE_DIRTY_FLAG</name><operator pos:start="11:40" pos:end="11:40">)</operator></expr>)</condition> <block pos:start="11:43" pos:end="21:5">{<block_content pos:start="15:9" pos:end="20:0">

<cpp:if pos:start="13:1" pos:end="13:30">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:30"><operator pos:start="13:5" pos:end="13:5">!</operator><call pos:start="13:6" pos:end="13:30"><name pos:start="13:6" pos:end="13:12">defined</name><argument_list pos:start="13:13" pos:end="13:30">(<argument pos:start="13:14" pos:end="13:29"><expr pos:start="13:14" pos:end="13:29"><name pos:start="13:14" pos:end="13:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="15:9" pos:end="15:53"><expr pos:start="15:9" pos:end="15:52"><call pos:start="15:9" pos:end="15:52"><name pos:start="15:9" pos:end="15:36">tb_invalidate_phys_page_fast</name><argument_list pos:start="15:37" pos:end="15:52">(<argument pos:start="15:38" pos:end="15:45"><expr pos:start="15:38" pos:end="15:45"><name pos:start="15:38" pos:end="15:45">ram_addr</name></expr></argument>, <argument pos:start="15:48" pos:end="15:51"><expr pos:start="15:48" pos:end="15:51"><name pos:start="15:48" pos:end="15:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="20:0"><expr pos:start="17:9" pos:end="17:67"><name pos:start="17:9" pos:end="17:19">dirty_flags</name> <operator pos:start="17:21" pos:end="17:21">=</operator> <call pos:start="17:23" pos:end="17:67"><name pos:start="17:23" pos:end="17:57">cpu_physical_memory_get_dirty_flags</name><argument_list pos:start="17:58" pos:end="17:67">(<argument pos:start="17:59" pos:end="17:66"><expr pos:start="17:59" pos:end="17:66"><name pos:start="17:59" pos:end="17:66">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="23:5" pos:end="47:5">switch <condition pos:start="23:12" pos:end="23:17">(<expr pos:start="23:13" pos:end="23:16"><name pos:start="23:13" pos:end="23:16">size</name></expr>)</condition> <block pos:start="23:19" pos:end="47:5">{<block_content pos:start="25:5" pos:end="45:16">

    <case pos:start="25:5" pos:end="25:11">case <expr pos:start="25:10" pos:end="25:10"><literal type="number" pos:start="25:10" pos:end="25:10">1</literal></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:47"><expr pos:start="27:9" pos:end="27:46"><call pos:start="27:9" pos:end="27:46"><name pos:start="27:9" pos:end="27:13">stb_p</name><argument_list pos:start="27:14" pos:end="27:46">(<argument pos:start="27:15" pos:end="27:40"><expr pos:start="27:15" pos:end="27:40"><call pos:start="27:15" pos:end="27:40"><name pos:start="27:15" pos:end="27:30">qemu_get_ram_ptr</name><argument_list pos:start="27:31" pos:end="27:40">(<argument pos:start="27:32" pos:end="27:39"><expr pos:start="27:32" pos:end="27:39"><name pos:start="27:32" pos:end="27:39">ram_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:43" pos:end="27:45"><expr pos:start="27:43" pos:end="27:45"><name pos:start="27:43" pos:end="27:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">2</literal></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:46"><call pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:13">stw_p</name><argument_list pos:start="33:14" pos:end="33:46">(<argument pos:start="33:15" pos:end="33:40"><expr pos:start="33:15" pos:end="33:40"><call pos:start="33:15" pos:end="33:40"><name pos:start="33:15" pos:end="33:30">qemu_get_ram_ptr</name><argument_list pos:start="33:31" pos:end="33:40">(<argument pos:start="33:32" pos:end="33:39"><expr pos:start="33:32" pos:end="33:39"><name pos:start="33:32" pos:end="33:39">ram_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="33:43" pos:end="33:45"><expr pos:start="33:43" pos:end="33:45"><name pos:start="33:43" pos:end="33:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:11">case <expr pos:start="37:10" pos:end="37:10"><literal type="number" pos:start="37:10" pos:end="37:10">4</literal></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><call pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:13">stl_p</name><argument_list pos:start="39:14" pos:end="39:46">(<argument pos:start="39:15" pos:end="39:40"><expr pos:start="39:15" pos:end="39:40"><call pos:start="39:15" pos:end="39:40"><name pos:start="39:15" pos:end="39:30">qemu_get_ram_ptr</name><argument_list pos:start="39:31" pos:end="39:40">(<argument pos:start="39:32" pos:end="39:39"><expr pos:start="39:32" pos:end="39:39"><name pos:start="39:32" pos:end="39:39">ram_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:43" pos:end="39:45"><expr pos:start="39:43" pos:end="39:45"><name pos:start="39:43" pos:end="39:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <default pos:start="43:5" pos:end="43:12">default:</default>

        <expr_stmt pos:start="45:9" pos:end="45:16"><expr pos:start="45:9" pos:end="45:15"><call pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:13">abort</name><argument_list pos:start="45:14" pos:end="45:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <expr_stmt pos:start="49:5" pos:end="49:45"><expr pos:start="49:5" pos:end="49:44"><name pos:start="49:5" pos:end="49:15">dirty_flags</name> <operator pos:start="49:17" pos:end="49:18">|=</operator> <operator pos:start="49:20" pos:end="49:20">(</operator><literal type="number" pos:start="49:21" pos:end="49:24">0xff</literal> <operator pos:start="49:26" pos:end="49:26">&amp;</operator> <operator pos:start="49:28" pos:end="49:28">~</operator><name pos:start="49:29" pos:end="49:43">CODE_DIRTY_FLAG</name><operator pos:start="49:44" pos:end="49:44">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:63"><expr pos:start="51:5" pos:end="51:62"><call pos:start="51:5" pos:end="51:62"><name pos:start="51:5" pos:end="51:39">cpu_physical_memory_set_dirty_flags</name><argument_list pos:start="51:40" pos:end="51:62">(<argument pos:start="51:41" pos:end="51:48"><expr pos:start="51:41" pos:end="51:48"><name pos:start="51:41" pos:end="51:48">ram_addr</name></expr></argument>, <argument pos:start="51:51" pos:end="51:61"><expr pos:start="51:51" pos:end="51:61"><name pos:start="51:51" pos:end="51:61">dirty_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="53:5" pos:end="55:17">/* we remove the notdirty callback only if the code has been

       flushed */</comment>

    <if_stmt pos:start="57:5" pos:end="59:68"><if pos:start="57:5" pos:end="59:68">if <condition pos:start="57:8" pos:end="57:28">(<expr pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:19">dirty_flags</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <literal type="number" pos:start="57:24" pos:end="57:27">0xff</literal></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:68"><block_content pos:start="59:9" pos:end="59:68">

        <expr_stmt pos:start="59:9" pos:end="59:68"><expr pos:start="59:9" pos:end="59:67"><call pos:start="59:9" pos:end="59:67"><name pos:start="59:9" pos:end="59:21">tlb_set_dirty</name><argument_list pos:start="59:22" pos:end="59:67">(<argument pos:start="59:23" pos:end="59:36"><expr pos:start="59:23" pos:end="59:36"><name pos:start="59:23" pos:end="59:36">cpu_single_env</name></expr></argument>, <argument pos:start="59:39" pos:end="59:66"><expr pos:start="59:39" pos:end="59:66"><name pos:start="59:39" pos:end="59:66"><name pos:start="59:39" pos:end="59:52">cpu_single_env</name><operator pos:start="59:53" pos:end="59:54">-&gt;</operator><name pos:start="59:55" pos:end="59:66">mem_io_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
