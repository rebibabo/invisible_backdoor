<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9554.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:26">qpa_thread_in</name> <parameter_list pos:start="1:28" pos:end="1:38">(<parameter pos:start="1:29" pos:end="1:37"><decl pos:start="1:29" pos:end="1:37"><type pos:start="1:29" pos:end="1:34"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PAVoiceIn</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">pa</name> <init pos:start="5:19" pos:end="5:23">= <expr pos:start="5:21" pos:end="5:23"><name pos:start="5:21" pos:end="5:23">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">HWVoiceIn</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">hw</name> <init pos:start="7:19" pos:end="7:27">= <expr pos:start="7:21" pos:end="7:27"><operator pos:start="7:21" pos:end="7:21">&amp;</operator><name pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:23">pa</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">hw</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">threshold</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:13">threshold</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <ternary pos:start="13:17" pos:end="13:61"><condition pos:start="13:17" pos:end="13:30"><expr pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:20">conf</name><operator pos:start="13:21" pos:end="13:21">.</operator><name pos:start="13:22" pos:end="13:28">divisor</name></name></expr> ?</condition><then pos:start="13:32" pos:end="13:57"> <expr pos:start="13:32" pos:end="13:57"><name pos:start="13:32" pos:end="13:42"><name pos:start="13:32" pos:end="13:33">hw</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:42">samples</name></name> <operator pos:start="13:44" pos:end="13:44">/</operator> <name pos:start="13:46" pos:end="13:57"><name pos:start="13:46" pos:end="13:49">conf</name><operator pos:start="13:50" pos:end="13:50">.</operator><name pos:start="13:51" pos:end="13:57">divisor</name></name></expr> </then><else pos:start="13:59" pos:end="13:61">: <expr pos:start="13:61" pos:end="13:61"><literal type="number" pos:start="13:61" pos:end="13:61">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:44">(<expr pos:start="17:9" pos:end="17:43"><call pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:21">audio_pt_lock</name> <argument_list pos:start="17:23" pos:end="17:43">(<argument pos:start="17:24" pos:end="17:30"><expr pos:start="17:24" pos:end="17:30"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:30"><name pos:start="17:25" pos:end="17:26">pa</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:30">pt</name></name></expr></argument>, <argument pos:start="17:33" pos:end="17:42"><expr pos:start="17:33" pos:end="17:42"><name pos:start="17:33" pos:end="17:42">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:46" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="25:5" pos:end="119:5">for <control pos:start="25:9" pos:end="25:12">(<init pos:start="25:10" pos:end="25:10">;</init><condition pos:start="25:11" pos:end="25:11">;</condition><incr/>)</control> <block pos:start="25:14" pos:end="119:5">{<block_content pos:start="27:9" pos:end="117:25">

        <decl_stmt pos:start="27:9" pos:end="27:32"><decl pos:start="27:9" pos:end="27:16"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:16">incr</name></decl>, <decl pos:start="27:19" pos:end="27:25"><type ref="prev" pos:start="27:9" pos:end="27:11"/><name pos:start="27:19" pos:end="27:25">to_grab</name></decl>, <decl pos:start="27:28" pos:end="27:31"><type ref="prev" pos:start="27:9" pos:end="27:11"/><name pos:start="27:28" pos:end="27:31">wpos</name></decl>;</decl_stmt>



        <for pos:start="31:9" pos:end="55:9">for <control pos:start="31:13" pos:end="31:16">(<init pos:start="31:14" pos:end="31:14">;</init><condition pos:start="31:15" pos:end="31:15">;</condition><incr/>)</control> <block pos:start="31:18" pos:end="55:9">{<block_content pos:start="33:13" pos:end="53:13">

            <if_stmt pos:start="33:13" pos:end="37:13"><if pos:start="33:13" pos:end="37:13">if <condition pos:start="33:16" pos:end="33:25">(<expr pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:18">pa</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:24">done</name></name></expr>)</condition> <block pos:start="33:27" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:26">

                <goto pos:start="35:17" pos:end="35:26">goto <name pos:start="35:22" pos:end="35:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="41:13" pos:end="45:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:37">(<expr pos:start="41:17" pos:end="41:36"><name pos:start="41:17" pos:end="41:24"><name pos:start="41:17" pos:end="41:18">pa</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:24">dead</name></name> <operator pos:start="41:26" pos:end="41:26">&gt;</operator> <name pos:start="41:28" pos:end="41:36">threshold</name></expr>)</condition> <block pos:start="41:39" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:22">

                <break pos:start="43:17" pos:end="43:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:52">(<expr pos:start="49:17" pos:end="49:51"><call pos:start="49:17" pos:end="49:51"><name pos:start="49:17" pos:end="49:29">audio_pt_wait</name> <argument_list pos:start="49:31" pos:end="49:51">(<argument pos:start="49:32" pos:end="49:38"><expr pos:start="49:32" pos:end="49:38"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:38"><name pos:start="49:33" pos:end="49:34">pa</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:38">pt</name></name></expr></argument>, <argument pos:start="49:41" pos:end="49:50"><expr pos:start="49:41" pos:end="49:50"><name pos:start="49:41" pos:end="49:50">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:54" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:26">

                <goto pos:start="51:17" pos:end="51:26">goto <name pos:start="51:22" pos:end="51:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:12">incr</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:22">to_grab</name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:33"><name pos:start="59:26" pos:end="59:27">pa</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:33">dead</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:24"><expr pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:12">wpos</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:17">hw</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:23">wpos</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:50">(<expr pos:start="65:13" pos:end="65:49"><call pos:start="65:13" pos:end="65:49"><name pos:start="65:13" pos:end="65:27">audio_pt_unlock</name> <argument_list pos:start="65:29" pos:end="65:49">(<argument pos:start="65:30" pos:end="65:36"><expr pos:start="65:30" pos:end="65:36"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:36"><name pos:start="65:31" pos:end="65:32">pa</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:36">pt</name></name></expr></argument>, <argument pos:start="65:39" pos:end="65:48"><expr pos:start="65:39" pos:end="65:48"><name pos:start="65:39" pos:end="65:48">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:52" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:24">

            <return pos:start="67:13" pos:end="67:24">return <expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <while pos:start="73:9" pos:end="101:9">while <condition pos:start="73:15" pos:end="73:23">(<expr pos:start="73:16" pos:end="73:22"><name pos:start="73:16" pos:end="73:22">to_grab</name></expr>)</condition> <block pos:start="73:25" pos:end="101:9">{<block_content pos:start="75:13" pos:end="99:29">

            <decl_stmt pos:start="75:13" pos:end="75:22"><decl pos:start="75:13" pos:end="75:21"><type pos:start="75:13" pos:end="75:15"><name pos:start="75:13" pos:end="75:15">int</name></type> <name pos:start="75:17" pos:end="75:21">error</name></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:64"><decl pos:start="77:13" pos:end="77:63"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:21">chunk</name> <init pos:start="77:23" pos:end="77:63">= <expr pos:start="77:25" pos:end="77:63"><call pos:start="77:25" pos:end="77:63"><name pos:start="77:25" pos:end="77:33">audio_MIN</name> <argument_list pos:start="77:35" pos:end="77:63">(<argument pos:start="77:36" pos:end="77:42"><expr pos:start="77:36" pos:end="77:42"><name pos:start="77:36" pos:end="77:42">to_grab</name></expr></argument>, <argument pos:start="77:45" pos:end="77:62"><expr pos:start="77:45" pos:end="77:62"><name pos:start="77:45" pos:end="77:55"><name pos:start="77:45" pos:end="77:46">hw</name><operator pos:start="77:47" pos:end="77:48">-&gt;</operator><name pos:start="77:49" pos:end="77:55">samples</name></name> <operator pos:start="77:57" pos:end="77:57">-</operator> <name pos:start="77:59" pos:end="77:62">wpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="79:13" pos:end="79:52"><decl pos:start="79:13" pos:end="79:51"><type pos:start="79:13" pos:end="79:18"><name pos:start="79:13" pos:end="79:16">void</name> <modifier pos:start="79:18" pos:end="79:18">*</modifier></type><name pos:start="79:19" pos:end="79:21">buf</name> <init pos:start="79:23" pos:end="79:51">= <expr pos:start="79:25" pos:end="79:51"><call pos:start="79:25" pos:end="79:51"><name pos:start="79:25" pos:end="79:31">advance</name> <argument_list pos:start="79:33" pos:end="79:51">(<argument pos:start="79:34" pos:end="79:44"><expr pos:start="79:34" pos:end="79:44"><name pos:start="79:34" pos:end="79:44"><name pos:start="79:34" pos:end="79:35">pa</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:44">pcm_buf</name></name></expr></argument>, <argument pos:start="79:47" pos:end="79:50"><expr pos:start="79:47" pos:end="79:50"><name pos:start="79:47" pos:end="79:50">wpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="83:13" pos:end="91:13"><if pos:start="83:13" pos:end="91:13">if <condition pos:start="83:16" pos:end="85:69">(<expr pos:start="83:17" pos:end="85:68"><call pos:start="83:17" pos:end="85:64"><name pos:start="83:17" pos:end="83:30">pa_simple_read</name> <argument_list pos:start="83:32" pos:end="85:64">(<argument pos:start="83:33" pos:end="83:37"><expr pos:start="83:33" pos:end="83:37"><name pos:start="83:33" pos:end="83:37"><name pos:start="83:33" pos:end="83:34">pa</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:37">s</name></name></expr></argument>, <argument pos:start="83:40" pos:end="83:42"><expr pos:start="83:40" pos:end="83:42"><name pos:start="83:40" pos:end="83:42">buf</name></expr></argument>,

                                <argument pos:start="85:33" pos:end="85:55"><expr pos:start="85:33" pos:end="85:55"><name pos:start="85:33" pos:end="85:37">chunk</name> <operator pos:start="85:39" pos:end="85:40">&lt;&lt;</operator> <name pos:start="85:42" pos:end="85:55"><name pos:start="85:42" pos:end="85:43">hw</name><operator pos:start="85:44" pos:end="85:45">-&gt;</operator><name pos:start="85:46" pos:end="85:49">info</name><operator pos:start="85:50" pos:end="85:50">.</operator><name pos:start="85:51" pos:end="85:55">shift</name></name></expr></argument>, <argument pos:start="85:58" pos:end="85:63"><expr pos:start="85:58" pos:end="85:63"><operator pos:start="85:58" pos:end="85:58">&amp;</operator><name pos:start="85:59" pos:end="85:63">error</name></expr></argument>)</argument_list></call> <operator pos:start="85:66" pos:end="85:66">&lt;</operator> <literal type="number" pos:start="85:68" pos:end="85:68">0</literal></expr>)</condition> <block pos:start="85:71" pos:end="91:13">{<block_content pos:start="87:17" pos:end="89:28">

                <expr_stmt pos:start="87:17" pos:end="87:62"><expr pos:start="87:17" pos:end="87:61"><call pos:start="87:17" pos:end="87:61"><name pos:start="87:17" pos:end="87:26">qpa_logerr</name> <argument_list pos:start="87:28" pos:end="87:61">(<argument pos:start="87:29" pos:end="87:33"><expr pos:start="87:29" pos:end="87:33"><name pos:start="87:29" pos:end="87:33">error</name></expr></argument>, <argument pos:start="87:36" pos:end="87:60"><expr pos:start="87:36" pos:end="87:60"><literal type="string" pos:start="87:36" pos:end="87:60">"pa_simple_read failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="89:17" pos:end="89:28">return <expr pos:start="89:24" pos:end="89:27"><name pos:start="89:24" pos:end="89:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><call pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:14">hw</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:20">conv</name></name> <argument_list pos:start="95:22" pos:end="95:54">(<argument pos:start="95:23" pos:end="95:41"><expr pos:start="95:23" pos:end="95:41"><name pos:start="95:23" pos:end="95:34"><name pos:start="95:23" pos:end="95:24">hw</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:34">conv_buf</name></name> <operator pos:start="95:36" pos:end="95:36">+</operator> <name pos:start="95:38" pos:end="95:41">wpos</name></expr></argument>, <argument pos:start="95:44" pos:end="95:46"><expr pos:start="95:44" pos:end="95:46"><name pos:start="95:44" pos:end="95:46">buf</name></expr></argument>, <argument pos:start="95:49" pos:end="95:53"><expr pos:start="95:49" pos:end="95:53"><name pos:start="95:49" pos:end="95:53">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:48"><expr pos:start="97:13" pos:end="97:47"><name pos:start="97:13" pos:end="97:16">wpos</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <operator pos:start="97:20" pos:end="97:20">(</operator><name pos:start="97:21" pos:end="97:24">wpos</name> <operator pos:start="97:26" pos:end="97:26">+</operator> <name pos:start="97:28" pos:end="97:32">chunk</name><operator pos:start="97:33" pos:end="97:33">)</operator> <operator pos:start="97:35" pos:end="97:35">%</operator> <name pos:start="97:37" pos:end="97:47"><name pos:start="97:37" pos:end="97:38">hw</name><operator pos:start="97:39" pos:end="97:40">-&gt;</operator><name pos:start="97:41" pos:end="97:47">samples</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:29"><expr pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:19">to_grab</name> <operator pos:start="99:21" pos:end="99:22">-=</operator> <name pos:start="99:24" pos:end="99:28">chunk</name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:48">(<expr pos:start="105:13" pos:end="105:47"><call pos:start="105:13" pos:end="105:47"><name pos:start="105:13" pos:end="105:25">audio_pt_lock</name> <argument_list pos:start="105:27" pos:end="105:47">(<argument pos:start="105:28" pos:end="105:34"><expr pos:start="105:28" pos:end="105:34"><operator pos:start="105:28" pos:end="105:28">&amp;</operator><name pos:start="105:29" pos:end="105:34"><name pos:start="105:29" pos:end="105:30">pa</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:34">pt</name></name></expr></argument>, <argument pos:start="105:37" pos:end="105:46"><expr pos:start="105:37" pos:end="105:46"><name pos:start="105:37" pos:end="105:46">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:50" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:24">

            <return pos:start="107:13" pos:end="107:24">return <expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:24"><expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:10">pa</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:16">wpos</name></name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:23">wpos</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:25"><expr pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:10">pa</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:16">dead</name></name> <operator pos:start="115:18" pos:end="115:19">-=</operator> <name pos:start="115:21" pos:end="115:24">incr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:25"><expr pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:10">pa</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:16">incr</name></name> <operator pos:start="117:18" pos:end="117:19">+=</operator> <name pos:start="117:21" pos:end="117:24">incr</name></expr>;</expr_stmt>

    </block_content>}</block></for>



 <label pos:start="123:2" pos:end="123:6"><name pos:start="123:2" pos:end="123:5">exit</name>:</label>

    <expr_stmt pos:start="125:5" pos:end="125:42"><expr pos:start="125:5" pos:end="125:41"><call pos:start="125:5" pos:end="125:41"><name pos:start="125:5" pos:end="125:19">audio_pt_unlock</name> <argument_list pos:start="125:21" pos:end="125:41">(<argument pos:start="125:22" pos:end="125:28"><expr pos:start="125:22" pos:end="125:28"><operator pos:start="125:22" pos:end="125:22">&amp;</operator><name pos:start="125:23" pos:end="125:28"><name pos:start="125:23" pos:end="125:24">pa</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:28">pt</name></name></expr></argument>, <argument pos:start="125:31" pos:end="125:40"><expr pos:start="125:31" pos:end="125:40"><name pos:start="125:31" pos:end="125:40">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="127:5" pos:end="127:16">return <expr pos:start="127:12" pos:end="127:15"><name pos:start="127:12" pos:end="127:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
