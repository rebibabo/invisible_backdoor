<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19948.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">float64</name></type> <name pos:start="1:9" pos:end="1:20">float64_sqrt</name><parameter_list pos:start="1:21" pos:end="1:46">( <parameter pos:start="1:23" pos:end="1:44"><decl pos:start="1:23" pos:end="1:44"><type pos:start="1:23" pos:end="1:31"><name pos:start="1:23" pos:end="1:29">float64</name> <name pos:start="1:31" pos:end="1:31">a</name></type> <name pos:start="1:33" pos:end="1:44">STATUS_PARAM</name></decl></parameter> )</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="83:59">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">flag</name></type> <name pos:start="5:10" pos:end="5:14">aSign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">int16</name></type> <name pos:start="7:11" pos:end="7:14">aExp</name></decl>, <decl pos:start="7:17" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:9"/><name pos:start="7:17" pos:end="7:20">zExp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">bits64</name></type> <name pos:start="9:12" pos:end="9:15">aSig</name></decl>, <decl pos:start="9:18" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:18" pos:end="9:21">zSig</name></decl>, <decl pos:start="9:24" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:24" pos:end="9:33">doubleZSig</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">bits64</name></type> <name pos:start="11:12" pos:end="11:15">rem0</name></decl>, <decl pos:start="11:18" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:18" pos:end="11:21">rem1</name></decl>, <decl pos:start="11:24" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:24" pos:end="11:28">term0</name></decl>, <decl pos:start="11:31" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:31" pos:end="11:35">term1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:35"><expr pos:start="15:5" pos:end="15:34"><name pos:start="15:5" pos:end="15:8">aSig</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <call pos:start="15:12" pos:end="15:34"><name pos:start="15:12" pos:end="15:29">extractFloat64Frac</name><argument_list pos:start="15:30" pos:end="15:34">( <argument pos:start="15:32" pos:end="15:32"><expr pos:start="15:32" pos:end="15:32"><name pos:start="15:32" pos:end="15:32">a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:8">aExp</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:33"><name pos:start="17:12" pos:end="17:28">extractFloat64Exp</name><argument_list pos:start="17:29" pos:end="17:33">( <argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><name pos:start="17:31" pos:end="17:31">a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:36"><expr pos:start="19:5" pos:end="19:35"><name pos:start="19:5" pos:end="19:9">aSign</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:35"><name pos:start="19:13" pos:end="19:30">extractFloat64Sign</name><argument_list pos:start="19:31" pos:end="19:35">( <argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><name pos:start="19:33" pos:end="19:33">a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:24">( <expr pos:start="21:10" pos:end="21:22"><name pos:start="21:10" pos:end="21:13">aExp</name> <operator pos:start="21:15" pos:end="21:16">==</operator> <literal type="number" pos:start="21:18" pos:end="21:22">0x7FF</literal></expr> )</condition> <block pos:start="21:26" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:35">

        <if_stmt pos:start="23:9" pos:end="23:66"><if pos:start="23:9" pos:end="23:66">if <condition pos:start="23:12" pos:end="23:19">( <expr pos:start="23:14" pos:end="23:17"><name pos:start="23:14" pos:end="23:17">aSig</name></expr> )</condition><block type="pseudo" pos:start="23:21" pos:end="23:66"><block_content pos:start="23:21" pos:end="23:66"> <return pos:start="23:21" pos:end="23:66">return <macro pos:start="23:28" pos:end="23:65"><name pos:start="23:28" pos:end="23:46">propagateFloat64NaN</name><argument_list pos:start="23:47" pos:end="23:65">( <argument pos:start="23:49" pos:end="23:49">a</argument>, <argument pos:start="23:52" pos:end="23:63">a STATUS_VAR</argument> )</argument_list></macro>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="25:32"><if pos:start="25:9" pos:end="25:32">if <condition pos:start="25:12" pos:end="25:22">( <expr pos:start="25:14" pos:end="25:20"><operator pos:start="25:14" pos:end="25:14">!</operator> <name pos:start="25:16" pos:end="25:20">aSign</name></expr> )</condition><block type="pseudo" pos:start="25:24" pos:end="25:32"><block_content pos:start="25:24" pos:end="25:32"> <return pos:start="25:24" pos:end="25:32">return <expr pos:start="25:31" pos:end="25:31"><name pos:start="25:31" pos:end="25:31">a</name></expr>;</return></block_content></block></if></if_stmt>

        <macro pos:start="27:9" pos:end="27:51"><name pos:start="27:9" pos:end="27:19">float_raise</name><argument_list pos:start="27:20" pos:end="27:51">( <argument pos:start="27:22" pos:end="27:50">float_flag_invalid STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="27:52" pos:end="27:52">;</empty_stmt>

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">float64_default_nan</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:16">( <expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:14">aSign</name></expr> )</condition> <block pos:start="33:18" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:35">

        <if_stmt pos:start="35:9" pos:end="35:45"><if pos:start="35:9" pos:end="35:45">if <condition pos:start="35:12" pos:end="35:35">( <expr pos:start="35:14" pos:end="35:33"><operator pos:start="35:14" pos:end="35:14">(</operator> <name pos:start="35:16" pos:end="35:19">aExp</name> <operator pos:start="35:21" pos:end="35:21">|</operator> <name pos:start="35:23" pos:end="35:26">aSig</name> <operator pos:start="35:28" pos:end="35:28">)</operator> <operator pos:start="35:30" pos:end="35:31">==</operator> <literal type="number" pos:start="35:33" pos:end="35:33">0</literal></expr> )</condition><block type="pseudo" pos:start="35:37" pos:end="35:45"><block_content pos:start="35:37" pos:end="35:45"> <return pos:start="35:37" pos:end="35:45">return <expr pos:start="35:44" pos:end="35:44"><name pos:start="35:44" pos:end="35:44">a</name></expr>;</return></block_content></block></if></if_stmt>

        <macro pos:start="37:9" pos:end="37:51"><name pos:start="37:9" pos:end="37:19">float_raise</name><argument_list pos:start="37:20" pos:end="37:51">( <argument pos:start="37:22" pos:end="37:50">float_flag_invalid STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="37:52" pos:end="37:52">;</empty_stmt>

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">float64_default_nan</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:20">( <expr pos:start="43:10" pos:end="43:18"><name pos:start="43:10" pos:end="43:13">aExp</name> <operator pos:start="43:15" pos:end="43:16">==</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr> )</condition> <block pos:start="43:22" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:56">

        <if_stmt pos:start="45:9" pos:end="45:34"><if pos:start="45:9" pos:end="45:34">if <condition pos:start="45:12" pos:end="45:24">( <expr pos:start="45:14" pos:end="45:22"><name pos:start="45:14" pos:end="45:17">aSig</name> <operator pos:start="45:19" pos:end="45:20">==</operator> <literal type="number" pos:start="45:22" pos:end="45:22">0</literal></expr> )</condition><block type="pseudo" pos:start="45:26" pos:end="45:34"><block_content pos:start="45:26" pos:end="45:34"> <return pos:start="45:26" pos:end="45:34">return <expr pos:start="45:33" pos:end="45:33"><literal type="number" pos:start="45:33" pos:end="45:33">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:56"><expr pos:start="47:9" pos:end="47:55"><call pos:start="47:9" pos:end="47:55"><name pos:start="47:9" pos:end="47:33">normalizeFloat64Subnormal</name><argument_list pos:start="47:34" pos:end="47:55">( <argument pos:start="47:36" pos:end="47:39"><expr pos:start="47:36" pos:end="47:39"><name pos:start="47:36" pos:end="47:39">aSig</name></expr></argument>, <argument pos:start="47:42" pos:end="47:46"><expr pos:start="47:42" pos:end="47:46"><operator pos:start="47:42" pos:end="47:42">&amp;</operator><name pos:start="47:43" pos:end="47:46">aExp</name></expr></argument>, <argument pos:start="47:49" pos:end="47:53"><expr pos:start="47:49" pos:end="47:53"><operator pos:start="47:49" pos:end="47:49">&amp;</operator><name pos:start="47:50" pos:end="47:53">aSig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:8">zExp</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <operator pos:start="51:12" pos:end="51:12">(</operator> <operator pos:start="51:14" pos:end="51:14">(</operator> <name pos:start="51:16" pos:end="51:19">aExp</name> <operator pos:start="51:21" pos:end="51:21">-</operator> <literal type="number" pos:start="51:23" pos:end="51:27">0x3FF</literal> <operator pos:start="51:29" pos:end="51:29">)</operator><operator pos:start="51:30" pos:end="51:31">&gt;&gt;</operator><literal type="number" pos:start="51:32" pos:end="51:32">1</literal> <operator pos:start="51:34" pos:end="51:34">)</operator> <operator pos:start="51:36" pos:end="51:36">+</operator> <literal type="number" pos:start="51:38" pos:end="51:42">0x3FE</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:8">aSig</name> <operator pos:start="53:10" pos:end="53:11">|=</operator> <call pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:17">LIT64</name><argument_list pos:start="53:18" pos:end="53:39">( <argument pos:start="53:20" pos:end="53:37"><expr pos:start="53:20" pos:end="53:37"><literal type="number" pos:start="53:20" pos:end="53:37">0x0010000000000000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:8">zSig</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <call pos:start="55:12" pos:end="55:43"><name pos:start="55:12" pos:end="55:25">estimateSqrt32</name><argument_list pos:start="55:26" pos:end="55:43">( <argument pos:start="55:28" pos:end="55:31"><expr pos:start="55:28" pos:end="55:31"><name pos:start="55:28" pos:end="55:31">aExp</name></expr></argument>, <argument pos:start="55:34" pos:end="55:41"><expr pos:start="55:34" pos:end="55:41"><name pos:start="55:34" pos:end="55:37">aSig</name><operator pos:start="55:38" pos:end="55:39">&gt;&gt;</operator><literal type="number" pos:start="55:40" pos:end="55:41">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:30"><expr pos:start="57:5" pos:end="57:29"><name pos:start="57:5" pos:end="57:8">aSig</name> <operator pos:start="57:10" pos:end="57:12">&lt;&lt;=</operator> <literal type="number" pos:start="57:14" pos:end="57:16">9</literal> <operator pos:start="57:16" pos:end="57:16">-</operator> <operator pos:start="57:18" pos:end="57:18">(</operator> <name pos:start="57:20" pos:end="57:23">aExp</name> <operator pos:start="57:25" pos:end="57:25">&amp;</operator> <literal type="number" pos:start="57:27" pos:end="57:27">1</literal> <operator pos:start="57:29" pos:end="57:29">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:66"><expr pos:start="59:5" pos:end="59:65"><name pos:start="59:5" pos:end="59:8">zSig</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <call pos:start="59:12" pos:end="59:50"><name pos:start="59:12" pos:end="59:29">estimateDiv128To64</name><argument_list pos:start="59:30" pos:end="59:50">( <argument pos:start="59:32" pos:end="59:35"><expr pos:start="59:32" pos:end="59:35"><name pos:start="59:32" pos:end="59:35">aSig</name></expr></argument>, <argument pos:start="59:38" pos:end="59:38"><expr pos:start="59:38" pos:end="59:38"><literal type="number" pos:start="59:38" pos:end="59:38">0</literal></expr></argument>, <argument pos:start="59:41" pos:end="59:48"><expr pos:start="59:41" pos:end="59:48"><name pos:start="59:41" pos:end="59:44">zSig</name><operator pos:start="59:45" pos:end="59:46">&lt;&lt;</operator><literal type="number" pos:start="59:47" pos:end="59:48">32</literal></expr></argument> )</argument_list></call> <operator pos:start="59:52" pos:end="59:52">+</operator> <operator pos:start="59:54" pos:end="59:54">(</operator> <name pos:start="59:56" pos:end="59:59">zSig</name><operator pos:start="59:60" pos:end="59:61">&lt;&lt;</operator><literal type="number" pos:start="59:62" pos:end="59:63">30</literal> <operator pos:start="59:65" pos:end="59:65">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="81:5"><if pos:start="61:5" pos:end="81:5">if <condition pos:start="61:8" pos:end="61:32">( <expr pos:start="61:10" pos:end="61:30"><operator pos:start="61:10" pos:end="61:10">(</operator> <name pos:start="61:12" pos:end="61:15">zSig</name> <operator pos:start="61:17" pos:end="61:17">&amp;</operator> <literal type="number" pos:start="61:19" pos:end="61:23">0x1FF</literal> <operator pos:start="61:25" pos:end="61:25">)</operator> <operator pos:start="61:27" pos:end="61:28">&lt;=</operator> <literal type="number" pos:start="61:30" pos:end="61:30">5</literal></expr> )</condition> <block pos:start="61:34" pos:end="81:5">{<block_content pos:start="63:9" pos:end="79:41">

        <expr_stmt pos:start="63:9" pos:end="63:29"><expr pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:18">doubleZSig</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:25">zSig</name><operator pos:start="63:26" pos:end="63:27">&lt;&lt;</operator><literal type="number" pos:start="63:28" pos:end="63:28">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><call pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:18">mul64To128</name><argument_list pos:start="65:19" pos:end="65:48">( <argument pos:start="65:21" pos:end="65:24"><expr pos:start="65:21" pos:end="65:24"><name pos:start="65:21" pos:end="65:24">zSig</name></expr></argument>, <argument pos:start="65:27" pos:end="65:30"><expr pos:start="65:27" pos:end="65:30"><name pos:start="65:27" pos:end="65:30">zSig</name></expr></argument>, <argument pos:start="65:33" pos:end="65:38"><expr pos:start="65:33" pos:end="65:38"><operator pos:start="65:33" pos:end="65:33">&amp;</operator><name pos:start="65:34" pos:end="65:38">term0</name></expr></argument>, <argument pos:start="65:41" pos:end="65:46"><expr pos:start="65:41" pos:end="65:46"><operator pos:start="65:41" pos:end="65:41">&amp;</operator><name pos:start="65:42" pos:end="65:46">term1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:54"><expr pos:start="67:9" pos:end="67:53"><call pos:start="67:9" pos:end="67:53"><name pos:start="67:9" pos:end="67:14">sub128</name><argument_list pos:start="67:15" pos:end="67:53">( <argument pos:start="67:17" pos:end="67:20"><expr pos:start="67:17" pos:end="67:20"><name pos:start="67:17" pos:end="67:20">aSig</name></expr></argument>, <argument pos:start="67:23" pos:end="67:23"><expr pos:start="67:23" pos:end="67:23"><literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr></argument>, <argument pos:start="67:26" pos:end="67:30"><expr pos:start="67:26" pos:end="67:30"><name pos:start="67:26" pos:end="67:30">term0</name></expr></argument>, <argument pos:start="67:33" pos:end="67:37"><expr pos:start="67:33" pos:end="67:37"><name pos:start="67:33" pos:end="67:37">term1</name></expr></argument>, <argument pos:start="67:40" pos:end="67:44"><expr pos:start="67:40" pos:end="67:44"><operator pos:start="67:40" pos:end="67:40">&amp;</operator><name pos:start="67:41" pos:end="67:44">rem0</name></expr></argument>, <argument pos:start="67:47" pos:end="67:51"><expr pos:start="67:47" pos:end="67:51"><operator pos:start="67:47" pos:end="67:47">&amp;</operator><name pos:start="67:48" pos:end="67:51">rem1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <while pos:start="69:9" pos:end="77:9">while <condition pos:start="69:15" pos:end="69:36">( <expr pos:start="69:17" pos:end="69:34"><operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:24">sbits64</name><operator pos:start="69:25" pos:end="69:25">)</operator> <name pos:start="69:27" pos:end="69:30">rem0</name> <operator pos:start="69:32" pos:end="69:32">&lt;</operator> <literal type="number" pos:start="69:34" pos:end="69:34">0</literal></expr> )</condition> <block pos:start="69:38" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:73">

            <expr_stmt pos:start="71:13" pos:end="71:19"><expr pos:start="71:13" pos:end="71:18"><operator pos:start="71:13" pos:end="71:14">--</operator><name pos:start="71:15" pos:end="71:18">zSig</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:28"><expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:22">doubleZSig</name> <operator pos:start="73:24" pos:end="73:25">-=</operator> <literal type="number" pos:start="73:27" pos:end="73:27">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:73"><expr pos:start="75:13" pos:end="75:72"><call pos:start="75:13" pos:end="75:72"><name pos:start="75:13" pos:end="75:18">add128</name><argument_list pos:start="75:19" pos:end="75:72">( <argument pos:start="75:21" pos:end="75:24"><expr pos:start="75:21" pos:end="75:24"><name pos:start="75:21" pos:end="75:24">rem0</name></expr></argument>, <argument pos:start="75:27" pos:end="75:30"><expr pos:start="75:27" pos:end="75:30"><name pos:start="75:27" pos:end="75:30">rem1</name></expr></argument>, <argument pos:start="75:33" pos:end="75:40"><expr pos:start="75:33" pos:end="75:40"><name pos:start="75:33" pos:end="75:36">zSig</name><operator pos:start="75:37" pos:end="75:38">&gt;&gt;</operator><literal type="number" pos:start="75:39" pos:end="75:40">63</literal></expr></argument>, <argument pos:start="75:43" pos:end="75:56"><expr pos:start="75:43" pos:end="75:56"><name pos:start="75:43" pos:end="75:52">doubleZSig</name> <operator pos:start="75:54" pos:end="75:54">|</operator> <literal type="number" pos:start="75:56" pos:end="75:56">1</literal></expr></argument>, <argument pos:start="75:59" pos:end="75:63"><expr pos:start="75:59" pos:end="75:63"><operator pos:start="75:59" pos:end="75:59">&amp;</operator><name pos:start="75:60" pos:end="75:63">rem0</name></expr></argument>, <argument pos:start="75:66" pos:end="75:70"><expr pos:start="75:66" pos:end="75:70"><operator pos:start="75:66" pos:end="75:66">&amp;</operator><name pos:start="75:67" pos:end="75:70">rem1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="79:9" pos:end="79:41"><expr pos:start="79:9" pos:end="79:40"><name pos:start="79:9" pos:end="79:12">zSig</name> <operator pos:start="79:14" pos:end="79:15">|=</operator> <operator pos:start="79:17" pos:end="79:17">(</operator> <operator pos:start="79:19" pos:end="79:19">(</operator> <name pos:start="79:21" pos:end="79:24">rem0</name> <operator pos:start="79:26" pos:end="79:26">|</operator> <name pos:start="79:28" pos:end="79:31">rem1</name> <operator pos:start="79:33" pos:end="79:33">)</operator> <operator pos:start="79:35" pos:end="79:36">!=</operator> <literal type="number" pos:start="79:38" pos:end="79:38">0</literal> <operator pos:start="79:40" pos:end="79:40">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="83:5" pos:end="83:59">return <macro pos:start="83:12" pos:end="83:58"><name pos:start="83:12" pos:end="83:30">roundAndPackFloat64</name><argument_list pos:start="83:31" pos:end="83:58">( <argument pos:start="83:33" pos:end="83:33"><literal type="number" pos:start="83:33" pos:end="83:33">0</literal></argument>, <argument pos:start="83:36" pos:end="83:39">zExp</argument>, <argument pos:start="83:42" pos:end="83:56">zSig STATUS_VAR</argument> )</argument_list></macro>;</return>



</block_content>}</block></function>
</unit>
