<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2389.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:43">mpeg4_decode_video_packet_header</name><parameter_list pos:start="1:44" pos:end="1:62">(<parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:58">MpegEncContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:13">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">mb_num_bits</name><init pos:start="5:20" pos:end="5:47">= <expr pos:start="5:22" pos:end="5:47"><call pos:start="5:22" pos:end="5:43"><name pos:start="5:22" pos:end="5:28">av_log2</name><argument_list pos:start="5:29" pos:end="5:43">(<argument pos:start="5:30" pos:end="5:42"><expr pos:start="5:30" pos:end="5:42"><name pos:start="5:30" pos:end="5:38"><name pos:start="5:30" pos:end="5:30">s</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:38">mb_num</name></name> <operator pos:start="5:40" pos:end="5:40">-</operator> <literal type="number" pos:start="5:42" pos:end="5:42">1</literal></expr></argument>)</argument_list></call> <operator pos:start="5:45" pos:end="5:45">+</operator> <literal type="number" pos:start="5:47" pos:end="5:47">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:24">header_extension</name><init pos:start="7:25" pos:end="7:26">=<expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></init></decl>, <decl pos:start="7:29" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:34">mb_num</name></decl>, <decl pos:start="7:37" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:37" pos:end="7:39">len</name></decl>;</decl_stmt>

    

    <comment type="block" pos:start="11:5" pos:end="11:64">/* is there enough space left for a video packet + header */</comment>

    <if_stmt pos:start="13:5" pos:end="13:60"><if pos:start="13:5" pos:end="13:60">if<condition pos:start="13:7" pos:end="13:49">( <expr pos:start="13:9" pos:end="13:48"><call pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:22">get_bits_count</name><argument_list pos:start="13:23" pos:end="13:30">(<argument pos:start="13:24" pos:end="13:29"><expr pos:start="13:24" pos:end="13:29"><operator pos:start="13:24" pos:end="13:24">&amp;</operator><name pos:start="13:25" pos:end="13:29"><name pos:start="13:25" pos:end="13:25">s</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:29">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:32" pos:end="13:32">&gt;</operator> <name pos:start="13:34" pos:end="13:43"><name pos:start="13:34" pos:end="13:34">s</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:38">gb</name><operator pos:start="13:39" pos:end="13:39">.</operator><name pos:start="13:40" pos:end="13:43">size</name></name><operator pos:start="13:44" pos:end="13:44">*</operator><literal type="number" pos:start="13:45" pos:end="13:46">8</literal><operator pos:start="13:46" pos:end="13:46">-</operator><literal type="number" pos:start="13:47" pos:end="13:48">20</literal></expr>)</condition><block type="pseudo" pos:start="13:51" pos:end="13:60"><block_content pos:start="13:51" pos:end="13:60"> <return pos:start="13:51" pos:end="13:60">return <expr pos:start="13:58" pos:end="13:59"><operator pos:start="13:58" pos:end="13:58">-</operator><literal type="number" pos:start="13:59" pos:end="13:59">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="17:5" pos:end="21:5">for<control pos:start="17:8" pos:end="17:29">(<init pos:start="17:9" pos:end="17:14"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:11">len</name><operator pos:start="17:12" pos:end="17:12">=</operator><literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>;</init> <condition pos:start="17:16" pos:end="17:22"><expr pos:start="17:16" pos:end="17:21"><name pos:start="17:16" pos:end="17:18">len</name><operator pos:start="17:19" pos:end="17:19">&lt;</operator><literal type="number" pos:start="17:20" pos:end="17:21">32</literal></expr>;</condition> <incr pos:start="17:24" pos:end="17:28"><expr pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:26">len</name><operator pos:start="17:27" pos:end="17:28">++</operator></expr></incr>)</control><block pos:start="17:30" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:36">

        <if_stmt pos:start="19:9" pos:end="19:36"><if pos:start="19:9" pos:end="19:36">if<condition pos:start="19:11" pos:end="19:29">(<expr pos:start="19:12" pos:end="19:28"><call pos:start="19:12" pos:end="19:28"><name pos:start="19:12" pos:end="19:20">get_bits1</name><argument_list pos:start="19:21" pos:end="19:28">(<argument pos:start="19:22" pos:end="19:27"><expr pos:start="19:22" pos:end="19:27"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:27"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:31" pos:end="19:36"><block_content pos:start="19:31" pos:end="19:36"> <break pos:start="19:31" pos:end="19:36">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if<condition pos:start="25:7" pos:end="25:55">(<expr pos:start="25:8" pos:end="25:54"><name pos:start="25:8" pos:end="25:10">len</name><operator pos:start="25:11" pos:end="25:12">!=</operator><call pos:start="25:13" pos:end="25:54"><name pos:start="25:13" pos:end="25:51">ff_mpeg4_get_video_packet_prefix_length</name><argument_list pos:start="25:52" pos:end="25:54">(<argument pos:start="25:53" pos:end="25:53"><expr pos:start="25:53" pos:end="25:53"><name pos:start="25:53" pos:end="25:53">s</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="25:56" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:49"><expr pos:start="27:9" pos:end="27:48"><call pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:14">printf</name><argument_list pos:start="27:15" pos:end="27:48">(<argument pos:start="27:16" pos:end="27:47"><expr pos:start="27:16" pos:end="27:47"><literal type="string" pos:start="27:16" pos:end="27:47">"marker does not match f_code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if<condition pos:start="35:7" pos:end="35:30">(<expr pos:start="35:8" pos:end="35:29"><name pos:start="35:8" pos:end="35:15"><name pos:start="35:8" pos:end="35:8">s</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:15">shape</name></name> <operator pos:start="35:17" pos:end="35:18">!=</operator> <name pos:start="35:20" pos:end="35:29">RECT_SHAPE</name></expr>)</condition><block pos:start="35:31" pos:end="41:5">{<block_content pos:start="37:9" pos:end="37:44">

        <expr_stmt pos:start="37:9" pos:end="37:44"><expr pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:24">header_extension</name><operator pos:start="37:25" pos:end="37:25">=</operator> <call pos:start="37:27" pos:end="37:43"><name pos:start="37:27" pos:end="37:35">get_bits1</name><argument_list pos:start="37:36" pos:end="37:43">(<argument pos:start="37:37" pos:end="37:42"><expr pos:start="37:37" pos:end="37:42"><operator pos:start="37:37" pos:end="37:37">&amp;</operator><name pos:start="37:38" pos:end="37:42"><name pos:start="37:38" pos:end="37:38">s</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:42">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="39:9" pos:end="39:31">//FIXME more stuff here</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:10">mb_num</name><operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:20">get_bits</name><argument_list pos:start="45:21" pos:end="45:41">(<argument pos:start="45:22" pos:end="45:27"><expr pos:start="45:22" pos:end="45:27"><operator pos:start="45:22" pos:end="45:22">&amp;</operator><name pos:start="45:23" pos:end="45:27"><name pos:start="45:23" pos:end="45:23">s</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:27">gb</name></name></expr></argument>, <argument pos:start="45:30" pos:end="45:40"><expr pos:start="45:30" pos:end="45:40"><name pos:start="45:30" pos:end="45:40">mb_num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if<condition pos:start="47:7" pos:end="47:25">(<expr pos:start="47:8" pos:end="47:24"><name pos:start="47:8" pos:end="47:13">mb_num</name><operator pos:start="47:14" pos:end="47:15">&gt;=</operator><name pos:start="47:16" pos:end="47:24"><name pos:start="47:16" pos:end="47:16">s</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:24">mb_num</name></name></expr>)</condition><block pos:start="47:26" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:88"><expr pos:start="49:9" pos:end="49:87"><call pos:start="49:9" pos:end="49:87"><name pos:start="49:9" pos:end="49:15">fprintf</name><argument_list pos:start="49:16" pos:end="49:87">(<argument pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">stderr</name></expr></argument>, <argument pos:start="49:25" pos:end="49:67"><expr pos:start="49:25" pos:end="49:67"><literal type="string" pos:start="49:25" pos:end="49:67">"illegal mb_num in video packet (%d %d) \n"</literal></expr></argument>, <argument pos:start="49:70" pos:end="49:75"><expr pos:start="49:70" pos:end="49:75"><name pos:start="49:70" pos:end="49:75">mb_num</name></expr></argument>, <argument pos:start="49:78" pos:end="49:86"><expr pos:start="49:78" pos:end="49:86"><name pos:start="49:78" pos:end="49:86"><name pos:start="49:78" pos:end="49:78">s</name><operator pos:start="49:79" pos:end="49:80">-&gt;</operator><name pos:start="49:81" pos:end="49:86">mb_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:34"><expr pos:start="55:5" pos:end="55:33"><name pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:11">mb_x</name></name><operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:19">mb_num</name> <operator pos:start="55:21" pos:end="55:21">%</operator> <name pos:start="55:23" pos:end="55:33"><name pos:start="55:23" pos:end="55:23">s</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:33">mb_width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:34"><expr pos:start="57:5" pos:end="57:33"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:11">mb_y</name></name><operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:19">mb_num</name> <operator pos:start="57:21" pos:end="57:21">/</operator> <name pos:start="57:23" pos:end="57:33"><name pos:start="57:23" pos:end="57:23">s</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:33">mb_width</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if<condition pos:start="61:7" pos:end="61:34">(<expr pos:start="61:8" pos:end="61:33"><name pos:start="61:8" pos:end="61:15"><name pos:start="61:8" pos:end="61:8">s</name><operator pos:start="61:9" pos:end="61:10">-&gt;</operator><name pos:start="61:11" pos:end="61:15">shape</name></name> <operator pos:start="61:17" pos:end="61:18">!=</operator> <name pos:start="61:20" pos:end="61:33">BIN_ONLY_SHAPE</name></expr>)</condition><block pos:start="61:35" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:30">

        <decl_stmt pos:start="63:9" pos:end="63:57"><decl pos:start="63:9" pos:end="63:56"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:18">qscale</name><init pos:start="63:19" pos:end="63:56">= <expr pos:start="63:21" pos:end="63:56"><call pos:start="63:21" pos:end="63:56"><name pos:start="63:21" pos:end="63:28">get_bits</name><argument_list pos:start="63:29" pos:end="63:56">(<argument pos:start="63:30" pos:end="63:35"><expr pos:start="63:30" pos:end="63:35"><operator pos:start="63:30" pos:end="63:30">&amp;</operator><name pos:start="63:31" pos:end="63:35"><name pos:start="63:31" pos:end="63:31">s</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:35">gb</name></name></expr></argument>, <argument pos:start="63:38" pos:end="63:55"><expr pos:start="63:38" pos:end="63:55"><name pos:start="63:38" pos:end="63:55"><name pos:start="63:38" pos:end="63:38">s</name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:55">quant_precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

        <if_stmt pos:start="65:9" pos:end="67:30"><if pos:start="65:9" pos:end="67:30">if<condition pos:start="65:11" pos:end="65:18">(<expr pos:start="65:12" pos:end="65:17"><name pos:start="65:12" pos:end="65:17">qscale</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:30"><block_content pos:start="67:13" pos:end="67:30">

            <expr_stmt pos:start="67:13" pos:end="67:30"><expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:21">qscale</name></name><operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:29">qscale</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if<condition pos:start="73:7" pos:end="73:30">(<expr pos:start="73:8" pos:end="73:29"><name pos:start="73:8" pos:end="73:15"><name pos:start="73:8" pos:end="73:8">s</name><operator pos:start="73:9" pos:end="73:10">-&gt;</operator><name pos:start="73:11" pos:end="73:15">shape</name></name> <operator pos:start="73:17" pos:end="73:18">==</operator> <name pos:start="73:20" pos:end="73:29">RECT_SHAPE</name></expr>)</condition><block pos:start="73:31" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:44">

        <expr_stmt pos:start="75:9" pos:end="75:44"><expr pos:start="75:9" pos:end="75:43"><name pos:start="75:9" pos:end="75:24">header_extension</name><operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="75:43"><name pos:start="75:27" pos:end="75:35">get_bits1</name><argument_list pos:start="75:36" pos:end="75:43">(<argument pos:start="75:37" pos:end="75:42"><expr pos:start="75:37" pos:end="75:42"><operator pos:start="75:37" pos:end="75:37">&amp;</operator><name pos:start="75:38" pos:end="75:42"><name pos:start="75:38" pos:end="75:38">s</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:42">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="153:5"><if pos:start="79:5" pos:end="153:5">if<condition pos:start="79:7" pos:end="79:24">(<expr pos:start="79:8" pos:end="79:23"><name pos:start="79:8" pos:end="79:23">header_extension</name></expr>)</condition><block pos:start="79:25" pos:end="153:5">{<block_content pos:start="81:9" pos:end="151:9">

        <decl_stmt pos:start="81:9" pos:end="81:27"><decl pos:start="81:9" pos:end="81:26"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:26">time_increment</name></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:24"><decl pos:start="83:9" pos:end="83:23"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:21">time_incr</name><init pos:start="83:22" pos:end="83:23">=<expr pos:start="83:23" pos:end="83:23"><literal type="number" pos:start="83:23" pos:end="83:23">0</literal></expr></init></decl>;</decl_stmt>



        <while pos:start="87:9" pos:end="89:24">while <condition pos:start="87:15" pos:end="87:38">(<expr pos:start="87:16" pos:end="87:37"><call pos:start="87:16" pos:end="87:32"><name pos:start="87:16" pos:end="87:24">get_bits1</name><argument_list pos:start="87:25" pos:end="87:32">(<argument pos:start="87:26" pos:end="87:31"><expr pos:start="87:26" pos:end="87:31"><operator pos:start="87:26" pos:end="87:26">&amp;</operator><name pos:start="87:27" pos:end="87:31"><name pos:start="87:27" pos:end="87:27">s</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:31">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="87:34" pos:end="87:35">!=</operator> <literal type="number" pos:start="87:37" pos:end="87:37">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:24"><block_content pos:start="89:13" pos:end="89:24"> 

            <expr_stmt pos:start="89:13" pos:end="89:24"><expr pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:21">time_incr</name><operator pos:start="89:22" pos:end="89:23">++</operator></expr>;</expr_stmt></block_content></block></while>



        <expr_stmt pos:start="93:9" pos:end="93:77"><expr pos:start="93:9" pos:end="93:76"><call pos:start="93:9" pos:end="93:76"><name pos:start="93:9" pos:end="93:20">check_marker</name><argument_list pos:start="93:21" pos:end="93:76">(<argument pos:start="93:22" pos:end="93:27"><expr pos:start="93:22" pos:end="93:27"><operator pos:start="93:22" pos:end="93:22">&amp;</operator><name pos:start="93:23" pos:end="93:27"><name pos:start="93:23" pos:end="93:23">s</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:27">gb</name></name></expr></argument>, <argument pos:start="93:30" pos:end="93:75"><expr pos:start="93:30" pos:end="93:75"><literal type="string" pos:start="93:30" pos:end="93:75">"before time_increment in video packed header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:65"><expr pos:start="95:9" pos:end="95:64"><name pos:start="95:9" pos:end="95:22">time_increment</name><operator pos:start="95:23" pos:end="95:23">=</operator> <call pos:start="95:25" pos:end="95:64"><name pos:start="95:25" pos:end="95:32">get_bits</name><argument_list pos:start="95:33" pos:end="95:64">(<argument pos:start="95:34" pos:end="95:39"><expr pos:start="95:34" pos:end="95:39"><operator pos:start="95:34" pos:end="95:34">&amp;</operator><name pos:start="95:35" pos:end="95:39"><name pos:start="95:35" pos:end="95:35">s</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:39">gb</name></name></expr></argument>, <argument pos:start="95:42" pos:end="95:63"><expr pos:start="95:42" pos:end="95:63"><name pos:start="95:42" pos:end="95:63"><name pos:start="95:42" pos:end="95:42">s</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:63">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:78"><expr pos:start="97:9" pos:end="97:77"><call pos:start="97:9" pos:end="97:77"><name pos:start="97:9" pos:end="97:20">check_marker</name><argument_list pos:start="97:21" pos:end="97:77">(<argument pos:start="97:22" pos:end="97:27"><expr pos:start="97:22" pos:end="97:27"><operator pos:start="97:22" pos:end="97:22">&amp;</operator><name pos:start="97:23" pos:end="97:27"><name pos:start="97:23" pos:end="97:23">s</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:27">gb</name></name></expr></argument>, <argument pos:start="97:30" pos:end="97:76"><expr pos:start="97:30" pos:end="97:76"><literal type="string" pos:start="97:30" pos:end="97:76">"before vop_coding_type in video packed header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><call pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:17">skip_bits</name><argument_list pos:start="101:18" pos:end="101:28">(<argument pos:start="101:19" pos:end="101:24"><expr pos:start="101:19" pos:end="101:24"><operator pos:start="101:19" pos:end="101:19">&amp;</operator><name pos:start="101:20" pos:end="101:24"><name pos:start="101:20" pos:end="101:20">s</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:24">gb</name></name></expr></argument>, <argument pos:start="101:27" pos:end="101:27"><expr pos:start="101:27" pos:end="101:27"><literal type="number" pos:start="101:27" pos:end="101:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:31" pos:end="101:51">/* vop coding type */</comment>

        <comment type="line" pos:start="103:9" pos:end="103:35">//FIXME not rect stuff here</comment>



        <if_stmt pos:start="107:9" pos:end="151:9"><if pos:start="107:9" pos:end="151:9">if<condition pos:start="107:11" pos:end="107:38">(<expr pos:start="107:12" pos:end="107:37"><name pos:start="107:12" pos:end="107:19"><name pos:start="107:12" pos:end="107:12">s</name><operator pos:start="107:13" pos:end="107:14">-&gt;</operator><name pos:start="107:15" pos:end="107:19">shape</name></name> <operator pos:start="107:21" pos:end="107:22">!=</operator> <name pos:start="107:24" pos:end="107:37">BIN_ONLY_SHAPE</name></expr>)</condition><block pos:start="107:39" pos:end="151:9">{<block_content pos:start="109:13" pos:end="149:13">

            <expr_stmt pos:start="109:13" pos:end="109:33"><expr pos:start="109:13" pos:end="109:32"><call pos:start="109:13" pos:end="109:32"><name pos:start="109:13" pos:end="109:21">skip_bits</name><argument_list pos:start="109:22" pos:end="109:32">(<argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><operator pos:start="109:23" pos:end="109:23">&amp;</operator><name pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:28">gb</name></name></expr></argument>, <argument pos:start="109:31" pos:end="109:31"><expr pos:start="109:31" pos:end="109:31"><literal type="number" pos:start="109:31" pos:end="109:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="109:35" pos:end="109:62">/* intra dc vlc threshold */</comment>

<comment type="line" pos:start="111:1" pos:end="111:35">//FIXME dont just ignore everything</comment>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if<condition pos:start="113:15" pos:end="113:73">(<expr pos:start="113:16" pos:end="113:72"><name pos:start="113:16" pos:end="113:27"><name pos:start="113:16" pos:end="113:16">s</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:27">pict_type</name></name> <operator pos:start="113:29" pos:end="113:30">==</operator> <name pos:start="113:32" pos:end="113:37">S_TYPE</name> <operator pos:start="113:39" pos:end="113:40">&amp;&amp;</operator> <name pos:start="113:42" pos:end="113:60"><name pos:start="113:42" pos:end="113:42">s</name><operator pos:start="113:43" pos:end="113:44">-&gt;</operator><name pos:start="113:45" pos:end="113:60">vol_sprite_usage</name></name><operator pos:start="113:61" pos:end="113:62">==</operator><name pos:start="113:63" pos:end="113:72">GMC_SPRITE</name></expr>)</condition><block pos:start="113:74" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:46">

                <expr_stmt pos:start="115:17" pos:end="115:50"><expr pos:start="115:17" pos:end="115:49"><call pos:start="115:17" pos:end="115:49"><name pos:start="115:17" pos:end="115:46">mpeg4_decode_sprite_trajectory</name><argument_list pos:start="115:47" pos:end="115:49">(<argument pos:start="115:48" pos:end="115:48"><expr pos:start="115:48" pos:end="115:48"><name pos:start="115:48" pos:end="115:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:46"><expr pos:start="117:17" pos:end="117:45"><call pos:start="117:17" pos:end="117:45"><name pos:start="117:17" pos:end="117:23">fprintf</name><argument_list pos:start="117:24" pos:end="117:45">(<argument pos:start="117:25" pos:end="117:30"><expr pos:start="117:25" pos:end="117:30"><name pos:start="117:25" pos:end="117:30">stderr</name></expr></argument>, <argument pos:start="117:33" pos:end="117:44"><expr pos:start="117:33" pos:end="117:44"><literal type="string" pos:start="117:33" pos:end="117:44">"untested\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="123:13" pos:end="123:42">//FIXME reduced res stuff here</comment>

            

            <if_stmt pos:start="127:13" pos:end="137:13"><if pos:start="127:13" pos:end="137:13">if <condition pos:start="127:16" pos:end="127:39">(<expr pos:start="127:17" pos:end="127:38"><name pos:start="127:17" pos:end="127:28"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:28">pict_type</name></name> <operator pos:start="127:30" pos:end="127:31">!=</operator> <name pos:start="127:33" pos:end="127:38">I_TYPE</name></expr>)</condition> <block pos:start="127:41" pos:end="137:13">{<block_content pos:start="129:17" pos:end="135:17">

                <decl_stmt pos:start="129:17" pos:end="129:49"><decl pos:start="129:17" pos:end="129:48"><type pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:19">int</name></type> <name pos:start="129:21" pos:end="129:26">f_code</name> <init pos:start="129:28" pos:end="129:48">= <expr pos:start="129:30" pos:end="129:48"><call pos:start="129:30" pos:end="129:48"><name pos:start="129:30" pos:end="129:37">get_bits</name><argument_list pos:start="129:38" pos:end="129:48">(<argument pos:start="129:39" pos:end="129:44"><expr pos:start="129:39" pos:end="129:44"><operator pos:start="129:39" pos:end="129:39">&amp;</operator><name pos:start="129:40" pos:end="129:44"><name pos:start="129:40" pos:end="129:40">s</name><operator pos:start="129:41" pos:end="129:42">-&gt;</operator><name pos:start="129:43" pos:end="129:44">gb</name></name></expr></argument>, <argument pos:start="129:47" pos:end="129:47"><expr pos:start="129:47" pos:end="129:47"><literal type="number" pos:start="129:47" pos:end="129:47">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block" pos:start="129:57" pos:end="129:71">/* fcode_for */</comment>

                <if_stmt pos:start="131:17" pos:end="135:17"><if pos:start="131:17" pos:end="135:17">if<condition pos:start="131:19" pos:end="131:29">(<expr pos:start="131:20" pos:end="131:28"><name pos:start="131:20" pos:end="131:25">f_code</name><operator pos:start="131:26" pos:end="131:27">==</operator><literal type="number" pos:start="131:28" pos:end="131:28">0</literal></expr>)</condition><block pos:start="131:30" pos:end="135:17">{<block_content pos:start="133:21" pos:end="133:78">

                    <expr_stmt pos:start="133:21" pos:end="133:78"><expr pos:start="133:21" pos:end="133:77"><call pos:start="133:21" pos:end="133:77"><name pos:start="133:21" pos:end="133:26">printf</name><argument_list pos:start="133:27" pos:end="133:77">(<argument pos:start="133:28" pos:end="133:76"><expr pos:start="133:28" pos:end="133:76"><literal type="string" pos:start="133:28" pos:end="133:76">"Error, video packet header damaged (f_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="139:13" pos:end="149:13"><if pos:start="139:13" pos:end="149:13">if <condition pos:start="139:16" pos:end="139:39">(<expr pos:start="139:17" pos:end="139:38"><name pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:17">s</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:28">pict_type</name></name> <operator pos:start="139:30" pos:end="139:31">==</operator> <name pos:start="139:33" pos:end="139:38">B_TYPE</name></expr>)</condition> <block pos:start="139:41" pos:end="149:13">{<block_content pos:start="141:17" pos:end="147:17">

                <decl_stmt pos:start="141:17" pos:end="141:49"><decl pos:start="141:17" pos:end="141:48"><type pos:start="141:17" pos:end="141:19"><name pos:start="141:17" pos:end="141:19">int</name></type> <name pos:start="141:21" pos:end="141:26">b_code</name> <init pos:start="141:28" pos:end="141:48">= <expr pos:start="141:30" pos:end="141:48"><call pos:start="141:30" pos:end="141:48"><name pos:start="141:30" pos:end="141:37">get_bits</name><argument_list pos:start="141:38" pos:end="141:48">(<argument pos:start="141:39" pos:end="141:44"><expr pos:start="141:39" pos:end="141:44"><operator pos:start="141:39" pos:end="141:39">&amp;</operator><name pos:start="141:40" pos:end="141:44"><name pos:start="141:40" pos:end="141:40">s</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:44">gb</name></name></expr></argument>, <argument pos:start="141:47" pos:end="141:47"><expr pos:start="141:47" pos:end="141:47"><literal type="number" pos:start="141:47" pos:end="141:47">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="143:17" pos:end="147:17"><if pos:start="143:17" pos:end="147:17">if<condition pos:start="143:19" pos:end="143:29">(<expr pos:start="143:20" pos:end="143:28"><name pos:start="143:20" pos:end="143:25">b_code</name><operator pos:start="143:26" pos:end="143:27">==</operator><literal type="number" pos:start="143:28" pos:end="143:28">0</literal></expr>)</condition><block pos:start="143:30" pos:end="147:17">{<block_content pos:start="145:21" pos:end="145:78">

                    <expr_stmt pos:start="145:21" pos:end="145:78"><expr pos:start="145:21" pos:end="145:77"><call pos:start="145:21" pos:end="145:77"><name pos:start="145:21" pos:end="145:26">printf</name><argument_list pos:start="145:27" pos:end="145:77">(<argument pos:start="145:28" pos:end="145:76"><expr pos:start="145:28" pos:end="145:76"><literal type="string" pos:start="145:28" pos:end="145:76">"Error, video packet header damaged (b_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>       

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="155:5" pos:end="155:26">//FIXME new-pred stuff</comment>

    

<comment type="line" pos:start="159:1" pos:end="159:118">//printf("parse ok %d %d %d %d\n", mb_num, s-&gt;mb_x + s-&gt;mb_y*s-&gt;mb_width, get_bits_count(gb), get_bits_count(&amp;s-&gt;gb));</comment>



    <return pos:start="163:5" pos:end="163:13">return <expr pos:start="163:12" pos:end="163:12"><literal type="number" pos:start="163:12" pos:end="163:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
