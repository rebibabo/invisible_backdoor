<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23099.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">qemu_aio_complete</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:51"><decl pos:start="1:45" pos:end="1:51"><type pos:start="1:45" pos:end="1:51"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:51">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:40">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:16">ioreq</name></name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:23">ioreq</name> <init pos:start="5:25" pos:end="5:32">= <expr pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:32">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="17:5"><if pos:start="9:5" pos:end="17:5">if <condition pos:start="9:8" pos:end="9:17">(<expr pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:11">ret</name> <operator pos:start="9:13" pos:end="9:14">!=</operator> <literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr>)</condition> <block pos:start="9:19" pos:end="17:5">{<block_content pos:start="11:9" pos:end="15:28">

        <expr_stmt pos:start="11:9" pos:end="13:80"><expr pos:start="11:9" pos:end="13:79"><call pos:start="11:9" pos:end="13:79"><name pos:start="11:9" pos:end="11:21">xen_be_printf</name><argument_list pos:start="11:22" pos:end="13:79">(<argument pos:start="11:23" pos:end="11:44"><expr pos:start="11:23" pos:end="11:44"><operator pos:start="11:23" pos:end="11:23">&amp;</operator><name pos:start="11:24" pos:end="11:44"><name pos:start="11:24" pos:end="11:28">ioreq</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:36">blkdev</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:44">xendev</name></name></expr></argument>, <argument pos:start="11:47" pos:end="11:47"><expr pos:start="11:47" pos:end="11:47"><literal type="number" pos:start="11:47" pos:end="11:47">0</literal></expr></argument>, <argument pos:start="11:50" pos:end="11:65"><expr pos:start="11:50" pos:end="11:65"><literal type="string" pos:start="11:50" pos:end="11:65">"%s I/O error\n"</literal></expr></argument>,

                      <argument pos:start="13:23" pos:end="13:78"><expr pos:start="13:23" pos:end="13:78"><ternary pos:start="13:23" pos:end="13:78"><condition pos:start="13:23" pos:end="13:61"><expr pos:start="13:23" pos:end="13:59"><name pos:start="13:23" pos:end="13:42"><name pos:start="13:23" pos:end="13:27">ioreq</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:32">req</name><operator pos:start="13:33" pos:end="13:33">.</operator><name pos:start="13:34" pos:end="13:42">operation</name></name> <operator pos:start="13:44" pos:end="13:45">==</operator> <name pos:start="13:47" pos:end="13:59">BLKIF_OP_READ</name></expr> ?</condition><then pos:start="13:63" pos:end="13:68"> <expr pos:start="13:63" pos:end="13:68"><literal type="string" pos:start="13:63" pos:end="13:68">"read"</literal></expr> </then><else pos:start="13:70" pos:end="13:78">: <expr pos:start="13:72" pos:end="13:78"><literal type="string" pos:start="13:72" pos:end="13:78">"write"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:28"><expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:13">ioreq</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:25">aio_errors</name></name><operator pos:start="15:26" pos:end="15:27">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:9">ioreq</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:23">aio_inflight</name></name><operator pos:start="21:24" pos:end="21:25">--</operator></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:23">(<expr pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:13">ioreq</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:22">presync</name></name></expr>)</condition> <block pos:start="23:25" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:15">

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:13">ioreq</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:22">presync</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:36"><expr pos:start="27:9" pos:end="27:35"><call pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:28">ioreq_runio_qemu_aio</name><argument_list pos:start="27:29" pos:end="27:35">(<argument pos:start="27:30" pos:end="27:34"><expr pos:start="27:30" pos:end="27:34"><name pos:start="27:30" pos:end="27:34">ioreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:32">(<expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:13">ioreq</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:27">aio_inflight</name></name> <operator pos:start="33:29" pos:end="33:29">&gt;</operator> <literal type="number" pos:start="33:31" pos:end="33:31">0</literal></expr>)</condition> <block pos:start="33:34" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:15">

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="49:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:24">(<expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:13">ioreq</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:23">postsync</name></name></expr>)</condition> <block pos:start="39:26" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:15">

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:13">ioreq</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:23">postsync</name></name> <operator pos:start="41:25" pos:end="41:25">=</operator> <literal type="number" pos:start="41:27" pos:end="41:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:13">ioreq</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:27">aio_inflight</name></name><operator pos:start="43:28" pos:end="43:29">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:68"><expr pos:start="45:9" pos:end="45:67"><call pos:start="45:9" pos:end="45:67"><name pos:start="45:9" pos:end="45:22">bdrv_aio_flush</name><argument_list pos:start="45:23" pos:end="45:67">(<argument pos:start="45:24" pos:end="45:40"><expr pos:start="45:24" pos:end="45:40"><name pos:start="45:24" pos:end="45:40"><name pos:start="45:24" pos:end="45:28">ioreq</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:36">blkdev</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:40">bs</name></name></expr></argument>, <argument pos:start="45:43" pos:end="45:59"><expr pos:start="45:43" pos:end="45:59"><name pos:start="45:43" pos:end="45:59">qemu_aio_complete</name></expr></argument>, <argument pos:start="45:62" pos:end="45:66"><expr pos:start="45:62" pos:end="45:66"><name pos:start="45:62" pos:end="45:66">ioreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:73"><expr pos:start="53:5" pos:end="53:72"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:9">ioreq</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:17">status</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <ternary pos:start="53:21" pos:end="53:72"><condition pos:start="53:21" pos:end="53:39"><expr pos:start="53:21" pos:end="53:37"><name pos:start="53:21" pos:end="53:37"><name pos:start="53:21" pos:end="53:25">ioreq</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:37">aio_errors</name></name></expr> ?</condition><then pos:start="53:41" pos:end="53:55"> <expr pos:start="53:41" pos:end="53:55"><name pos:start="53:41" pos:end="53:55">BLKIF_RSP_ERROR</name></expr> </then><else pos:start="53:57" pos:end="53:72">: <expr pos:start="53:59" pos:end="53:72"><name pos:start="53:59" pos:end="53:72">BLKIF_RSP_OKAY</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><call pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:15">ioreq_unmap</name><argument_list pos:start="55:16" pos:end="55:22">(<argument pos:start="55:17" pos:end="55:21"><expr pos:start="55:17" pos:end="55:21"><name pos:start="55:17" pos:end="55:21">ioreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><call pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:16">ioreq_finish</name><argument_list pos:start="57:17" pos:end="57:23">(<argument pos:start="57:18" pos:end="57:22"><expr pos:start="57:18" pos:end="57:22"><name pos:start="57:18" pos:end="57:22">ioreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="59:5" pos:end="83:5">switch <condition pos:start="59:12" pos:end="59:33">(<expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:17">ioreq</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:22">req</name><operator pos:start="59:23" pos:end="59:23">.</operator><name pos:start="59:24" pos:end="59:32">operation</name></name></expr>)</condition> <block pos:start="59:35" pos:end="83:5">{<block_content pos:start="61:5" pos:end="81:14">

    <case pos:start="61:5" pos:end="61:24">case <expr pos:start="61:10" pos:end="61:23"><name pos:start="61:10" pos:end="61:23">BLKIF_OP_WRITE</name></expr>:</case>

    <case pos:start="63:5" pos:end="63:34">case <expr pos:start="63:10" pos:end="63:33"><name pos:start="63:10" pos:end="63:33">BLKIF_OP_FLUSH_DISKCACHE</name></expr>:</case>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:36">(<expr pos:start="65:13" pos:end="65:35"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:35"><name pos:start="65:14" pos:end="65:18">ioreq</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:23">req</name><operator pos:start="65:24" pos:end="65:24">.</operator><name pos:start="65:25" pos:end="65:35">nr_segments</name></name></expr>)</condition> <block pos:start="65:38" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:18">

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></if></if_stmt>

    <case pos:start="71:5" pos:end="71:23">case <expr pos:start="71:10" pos:end="71:22"><name pos:start="71:10" pos:end="71:22">BLKIF_OP_READ</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:73"><expr pos:start="73:9" pos:end="73:72"><call pos:start="73:9" pos:end="73:72"><name pos:start="73:9" pos:end="73:23">block_acct_done</name><argument_list pos:start="73:24" pos:end="73:72">(<argument pos:start="73:25" pos:end="73:57"><expr pos:start="73:25" pos:end="73:57"><call pos:start="73:25" pos:end="73:57"><name pos:start="73:25" pos:end="73:38">bdrv_get_stats</name><argument_list pos:start="73:39" pos:end="73:57">(<argument pos:start="73:40" pos:end="73:56"><expr pos:start="73:40" pos:end="73:56"><name pos:start="73:40" pos:end="73:56"><name pos:start="73:40" pos:end="73:44">ioreq</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:52">blkdev</name><operator pos:start="73:53" pos:end="73:54">-&gt;</operator><name pos:start="73:55" pos:end="73:56">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:60" pos:end="73:71"><expr pos:start="73:60" pos:end="73:71"><operator pos:start="73:60" pos:end="73:60">&amp;</operator><name pos:start="73:61" pos:end="73:71"><name pos:start="73:61" pos:end="73:65">ioreq</name><operator pos:start="73:66" pos:end="73:67">-&gt;</operator><name pos:start="73:68" pos:end="73:71">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:26">case <expr pos:start="77:10" pos:end="77:25"><name pos:start="77:10" pos:end="77:25">BLKIF_OP_DISCARD</name></expr>:</case>

    <default pos:start="79:5" pos:end="79:12">default:</default>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="85:5" pos:end="85:40"><expr pos:start="85:5" pos:end="85:39"><call pos:start="85:5" pos:end="85:39"><name pos:start="85:5" pos:end="85:20">qemu_bh_schedule</name><argument_list pos:start="85:21" pos:end="85:39">(<argument pos:start="85:22" pos:end="85:38"><expr pos:start="85:22" pos:end="85:38"><name pos:start="85:22" pos:end="85:38"><name pos:start="85:22" pos:end="85:26">ioreq</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:34">blkdev</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:38">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
