<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19104.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">serial_xmit</name><parameter_list pos:start="1:24" pos:end="1:37">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:30"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SerialState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:27">= <expr pos:start="5:22" pos:end="5:27"><name pos:start="5:22" pos:end="5:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:24">new_xmit_ts</name> <init pos:start="7:26" pos:end="7:54">= <expr pos:start="7:28" pos:end="7:54"><call pos:start="7:28" pos:end="7:54"><name pos:start="7:28" pos:end="7:44">qemu_get_clock_ns</name><argument_list pos:start="7:45" pos:end="7:54">(<argument pos:start="7:46" pos:end="7:53"><expr pos:start="7:46" pos:end="7:53"><name pos:start="7:46" pos:end="7:53">vm_clock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="29:5"><if pos:start="11:5" pos:end="29:5">if <condition pos:start="11:8" pos:end="11:26">(<expr pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:20">tsr_retry</name></name> <operator pos:start="11:22" pos:end="11:23">&lt;=</operator> <literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr>)</condition> <block pos:start="11:28" pos:end="29:5">{<block_content pos:start="13:9" pos:end="27:9">

        <if_stmt pos:start="13:9" pos:end="27:9"><if pos:start="13:9" pos:end="21:9">if <condition pos:start="13:12" pos:end="13:33">(<expr pos:start="13:13" pos:end="13:32"><name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:13">s</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:18">fcr</name></name> <operator pos:start="13:20" pos:end="13:20">&amp;</operator> <name pos:start="13:22" pos:end="13:32">UART_FCR_FE</name></expr>)</condition> <block pos:start="13:35" pos:end="21:9">{<block_content pos:start="15:13" pos:end="19:40">

            <expr_stmt pos:start="15:13" pos:end="15:43"><expr pos:start="15:13" pos:end="15:42"><name pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:13">s</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:18">tsr</name></name> <operator pos:start="15:20" pos:end="15:20">=</operator> <call pos:start="15:22" pos:end="15:42"><name pos:start="15:22" pos:end="15:29">fifo_get</name><argument_list pos:start="15:30" pos:end="15:42">(<argument pos:start="15:31" pos:end="15:31"><expr pos:start="15:31" pos:end="15:31"><name pos:start="15:31" pos:end="15:31">s</name></expr></argument>,<argument pos:start="15:33" pos:end="15:41"><expr pos:start="15:33" pos:end="15:41"><name pos:start="15:33" pos:end="15:41">XMIT_FIFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="17:13" pos:end="19:40"><if pos:start="17:13" pos:end="19:40">if <condition pos:start="17:16" pos:end="17:36">(<expr pos:start="17:17" pos:end="17:35"><operator pos:start="17:17" pos:end="17:17">!</operator><name pos:start="17:18" pos:end="17:35"><name pos:start="17:18" pos:end="17:18">s</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:29">xmit_fifo</name><operator pos:start="17:30" pos:end="17:30">.</operator><name pos:start="17:31" pos:end="17:35">count</name></name></expr>)</condition><block type="pseudo" pos:start="19:17" pos:end="19:40"><block_content pos:start="19:17" pos:end="19:40">

                <expr_stmt pos:start="19:17" pos:end="19:40"><expr pos:start="19:17" pos:end="19:39"><name pos:start="19:17" pos:end="19:22"><name pos:start="19:17" pos:end="19:17">s</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:22">lsr</name></name> <operator pos:start="19:24" pos:end="19:25">|=</operator> <name pos:start="19:27" pos:end="19:39">UART_LSR_THRE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="21:11" pos:end="27:9">else <block pos:start="21:16" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:36">

            <expr_stmt pos:start="23:13" pos:end="23:28"><expr pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:18">tsr</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <name pos:start="23:22" pos:end="23:27"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:27">thr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:36"><expr pos:start="25:13" pos:end="25:35"><name pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:18">lsr</name></name> <operator pos:start="25:20" pos:end="25:21">|=</operator> <name pos:start="25:23" pos:end="25:35">UART_LSR_THRE</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="67:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:31">(<expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:14">mcr</name></name> <operator pos:start="33:16" pos:end="33:16">&amp;</operator> <name pos:start="33:18" pos:end="33:30">UART_MCR_LOOP</name></expr>)</condition> <block pos:start="33:33" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:39">

        <comment type="block" pos:start="35:9" pos:end="35:64">/* in loopback mode, say that we just received a char */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:39"><expr pos:start="37:9" pos:end="37:38"><call pos:start="37:9" pos:end="37:38"><name pos:start="37:9" pos:end="37:23">serial_receive1</name><argument_list pos:start="37:24" pos:end="37:38">(<argument pos:start="37:25" pos:end="37:25"><expr pos:start="37:25" pos:end="37:25"><name pos:start="37:25" pos:end="37:25">s</name></expr></argument>, <argument pos:start="37:28" pos:end="37:34"><expr pos:start="37:28" pos:end="37:34"><operator pos:start="37:28" pos:end="37:28">&amp;</operator><name pos:start="37:29" pos:end="37:34"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:34">tsr</name></name></expr></argument>, <argument pos:start="37:37" pos:end="37:37"><expr pos:start="37:37" pos:end="37:37"><literal type="number" pos:start="37:37" pos:end="37:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="39:7" pos:end="61:5">else if <condition pos:start="39:15" pos:end="39:58">(<expr pos:start="39:16" pos:end="39:57"><call pos:start="39:16" pos:end="39:52"><name pos:start="39:16" pos:end="39:32">qemu_chr_fe_write</name><argument_list pos:start="39:33" pos:end="39:52">(<argument pos:start="39:34" pos:end="39:39"><expr pos:start="39:34" pos:end="39:39"><name pos:start="39:34" pos:end="39:39"><name pos:start="39:34" pos:end="39:34">s</name><operator pos:start="39:35" pos:end="39:36">-&gt;</operator><name pos:start="39:37" pos:end="39:39">chr</name></name></expr></argument>, <argument pos:start="39:42" pos:end="39:48"><expr pos:start="39:42" pos:end="39:48"><operator pos:start="39:42" pos:end="39:42">&amp;</operator><name pos:start="39:43" pos:end="39:48"><name pos:start="39:43" pos:end="39:43">s</name><operator pos:start="39:44" pos:end="39:45">-&gt;</operator><name pos:start="39:46" pos:end="39:48">tsr</name></name></expr></argument>, <argument pos:start="39:51" pos:end="39:51"><expr pos:start="39:51" pos:end="39:51"><literal type="number" pos:start="39:51" pos:end="39:51">1</literal></expr></argument>)</argument_list></call> <operator pos:start="39:54" pos:end="39:55">!=</operator> <literal type="number" pos:start="39:57" pos:end="39:57">1</literal></expr>)</condition> <block pos:start="39:60" pos:end="61:5">{<block_content pos:start="41:9" pos:end="59:9">

        <if_stmt pos:start="41:9" pos:end="59:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:67">(<expr pos:start="41:13" pos:end="41:66"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:25"><name pos:start="41:14" pos:end="41:14">s</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:25">tsr_retry</name></name> <operator pos:start="41:27" pos:end="41:27">&gt;</operator> <literal type="number" pos:start="41:29" pos:end="41:29">0</literal><operator pos:start="41:30" pos:end="41:30">)</operator> <operator pos:start="41:32" pos:end="41:33">&amp;&amp;</operator> <operator pos:start="41:35" pos:end="41:35">(</operator><name pos:start="41:36" pos:end="41:47"><name pos:start="41:36" pos:end="41:36">s</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:47">tsr_retry</name></name> <operator pos:start="41:49" pos:end="41:50">&lt;=</operator> <name pos:start="41:52" pos:end="41:65">MAX_XMIT_RETRY</name><operator pos:start="41:66" pos:end="41:66">)</operator></expr>)</condition> <block pos:start="41:69" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:19">

            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:24">tsr_retry</name></name><operator pos:start="43:25" pos:end="43:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:84"><expr pos:start="45:13" pos:end="45:83"><call pos:start="45:13" pos:end="45:83"><name pos:start="45:13" pos:end="45:26">qemu_mod_timer</name><argument_list pos:start="45:27" pos:end="45:83">(<argument pos:start="45:28" pos:end="45:44"><expr pos:start="45:28" pos:end="45:44"><name pos:start="45:28" pos:end="45:44"><name pos:start="45:28" pos:end="45:28">s</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:44">transmit_timer</name></name></expr></argument>,  <argument pos:start="45:48" pos:end="45:82"><expr pos:start="45:48" pos:end="45:82"><name pos:start="45:48" pos:end="45:58">new_xmit_ts</name> <operator pos:start="45:60" pos:end="45:60">+</operator> <name pos:start="45:62" pos:end="45:82"><name pos:start="45:62" pos:end="45:62">s</name><operator pos:start="45:63" pos:end="45:64">-&gt;</operator><name pos:start="45:65" pos:end="45:82">char_transmit_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="59:9">else if <condition pos:start="49:19" pos:end="49:35">(<expr pos:start="49:20" pos:end="49:34"><name pos:start="49:20" pos:end="49:30"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:30">poll_msl</name></name> <operator pos:start="49:32" pos:end="49:32">&lt;</operator> <literal type="number" pos:start="49:34" pos:end="49:34">0</literal></expr>)</condition> <block pos:start="49:37" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:30">

            <comment type="block" pos:start="51:13" pos:end="55:94">/* If we exceed MAX_XMIT_RETRY and the backend is not a real serial port, then

            drop any further failed writes instantly, until we get one that goes through.

            This is to prevent guests that log to unconnected pipes or pty's from stalling. */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:30"><expr pos:start="57:13" pos:end="57:29"><name pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:24">tsr_retry</name></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <operator pos:start="57:28" pos:end="57:28">-</operator><literal type="number" pos:start="57:29" pos:end="57:29">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>

    <else pos:start="63:5" pos:end="67:5">else <block pos:start="63:10" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:25">

        <expr_stmt pos:start="65:9" pos:end="65:25"><expr pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:20">tsr_retry</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:19">last_xmit_ts</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:49"><name pos:start="71:23" pos:end="71:39">qemu_get_clock_ns</name><argument_list pos:start="71:40" pos:end="71:49">(<argument pos:start="71:41" pos:end="71:48"><expr pos:start="71:41" pos:end="71:48"><name pos:start="71:41" pos:end="71:48">vm_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="75:83"><if pos:start="73:5" pos:end="75:83">if <condition pos:start="73:8" pos:end="73:34">(<expr pos:start="73:9" pos:end="73:33"><operator pos:start="73:9" pos:end="73:9">!</operator><operator pos:start="73:10" pos:end="73:10">(</operator><name pos:start="73:11" pos:end="73:16"><name pos:start="73:11" pos:end="73:11">s</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:16">lsr</name></name> <operator pos:start="73:18" pos:end="73:18">&amp;</operator> <name pos:start="73:20" pos:end="73:32">UART_LSR_THRE</name><operator pos:start="73:33" pos:end="73:33">)</operator></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:83"><block_content pos:start="75:9" pos:end="75:83">

        <expr_stmt pos:start="75:9" pos:end="75:83"><expr pos:start="75:9" pos:end="75:82"><call pos:start="75:9" pos:end="75:82"><name pos:start="75:9" pos:end="75:22">qemu_mod_timer</name><argument_list pos:start="75:23" pos:end="75:82">(<argument pos:start="75:24" pos:end="75:40"><expr pos:start="75:24" pos:end="75:40"><name pos:start="75:24" pos:end="75:40"><name pos:start="75:24" pos:end="75:24">s</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:40">transmit_timer</name></name></expr></argument>, <argument pos:start="75:43" pos:end="75:81"><expr pos:start="75:43" pos:end="75:81"><name pos:start="75:43" pos:end="75:57"><name pos:start="75:43" pos:end="75:43">s</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:57">last_xmit_ts</name></name> <operator pos:start="75:59" pos:end="75:59">+</operator> <name pos:start="75:61" pos:end="75:81"><name pos:start="75:61" pos:end="75:61">s</name><operator pos:start="75:62" pos:end="75:63">-&gt;</operator><name pos:start="75:64" pos:end="75:81">char_transmit_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="79:31">(<expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:14">lsr</name></name> <operator pos:start="79:16" pos:end="79:16">&amp;</operator> <name pos:start="79:18" pos:end="79:30">UART_LSR_THRE</name></expr>)</condition> <block pos:start="79:33" pos:end="87:5">{<block_content pos:start="81:9" pos:end="85:29">

        <expr_stmt pos:start="81:9" pos:end="81:32"><expr pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:14">lsr</name></name> <operator pos:start="81:16" pos:end="81:17">|=</operator> <name pos:start="81:19" pos:end="81:31">UART_LSR_TEMT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:28"><expr pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:23">thr_ipending</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator> <literal type="number" pos:start="83:27" pos:end="83:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:29"><expr pos:start="85:9" pos:end="85:28"><call pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:25">serial_update_irq</name><argument_list pos:start="85:26" pos:end="85:28">(<argument pos:start="85:27" pos:end="85:27"><expr pos:start="85:27" pos:end="85:27"><name pos:start="85:27" pos:end="85:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
