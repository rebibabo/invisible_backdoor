<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8637.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">xen_main_loop_prepare</name><parameter_list pos:start="1:34" pos:end="1:52">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:44">XenIOState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">state</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:5">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">evtchn_fd</name> <init pos:start="5:19" pos:end="5:22">= <expr pos:start="5:21" pos:end="5:22"><operator pos:start="5:21" pos:end="5:21">-</operator><literal type="number" pos:start="5:22" pos:end="5:22">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:54">(<expr pos:start="9:9" pos:end="9:53"><name pos:start="9:9" pos:end="9:25"><name pos:start="9:9" pos:end="9:13">state</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:25">xce_handle</name></name> <operator pos:start="9:27" pos:end="9:28">!=</operator> <name pos:start="9:30" pos:end="9:53">XC_HANDLER_INITIAL_VALUE</name></expr>)</condition> <block pos:start="9:56" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:52">

        <expr_stmt pos:start="11:9" pos:end="11:52"><expr pos:start="11:9" pos:end="11:51"><name pos:start="11:9" pos:end="11:17">evtchn_fd</name> <operator pos:start="11:19" pos:end="11:19">=</operator> <call pos:start="11:21" pos:end="11:51"><name pos:start="11:21" pos:end="11:32">xc_evtchn_fd</name><argument_list pos:start="11:33" pos:end="11:51">(<argument pos:start="11:34" pos:end="11:50"><expr pos:start="11:34" pos:end="11:50"><name pos:start="11:34" pos:end="11:50"><name pos:start="11:34" pos:end="11:38">state</name><operator pos:start="11:39" pos:end="11:40">-&gt;</operator><name pos:start="11:41" pos:end="11:50">xce_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:56"><expr pos:start="17:5" pos:end="19:55"><name pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:9">state</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:28">buffered_io_timer</name></name> <operator pos:start="17:30" pos:end="17:30">=</operator> <call pos:start="17:32" pos:end="19:55"><name pos:start="17:32" pos:end="17:43">timer_new_ms</name><argument_list pos:start="17:44" pos:end="19:55">(<argument pos:start="17:45" pos:end="17:63"><expr pos:start="17:45" pos:end="17:63"><name pos:start="17:45" pos:end="17:63">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="17:66" pos:end="17:83"><expr pos:start="17:66" pos:end="17:83"><name pos:start="17:66" pos:end="17:83">handle_buffered_io</name></expr></argument>,

                                                 <argument pos:start="19:50" pos:end="19:54"><expr pos:start="19:50" pos:end="19:54"><name pos:start="19:50" pos:end="19:54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="43:5"><if pos:start="23:5" pos:end="43:5">if <condition pos:start="23:8" pos:end="23:24">(<expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:17">evtchn_fd</name> <operator pos:start="23:19" pos:end="23:20">!=</operator> <operator pos:start="23:22" pos:end="23:22">-</operator><literal type="number" pos:start="23:23" pos:end="23:23">1</literal></expr>)</condition> <block pos:start="23:26" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:70">

        <decl_stmt pos:start="25:9" pos:end="25:28"><decl pos:start="25:9" pos:end="25:27"><type pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:16">CPUState</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:27">cpu_state</name></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:55"><expr pos:start="29:9" pos:end="29:54"><call pos:start="29:9" pos:end="29:54"><name pos:start="29:9" pos:end="29:15">DPRINTF</name><argument_list pos:start="29:16" pos:end="29:54">(<argument pos:start="29:17" pos:end="29:43"><expr pos:start="29:17" pos:end="29:43"><literal type="string" pos:start="29:17" pos:end="29:43">"%s: Init cpu_by_vcpu_id\n"</literal></expr></argument>, <argument pos:start="29:46" pos:end="29:53"><expr pos:start="29:46" pos:end="29:53"><name pos:start="29:46" pos:end="29:53">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:19">CPU_FOREACH</name><argument_list pos:start="31:20" pos:end="31:30">(<argument pos:start="31:21" pos:end="31:29">cpu_state</argument>)</argument_list></macro> <block pos:start="31:32" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:68">

            <expr_stmt pos:start="33:13" pos:end="35:63"><expr pos:start="33:13" pos:end="35:62"><call pos:start="33:13" pos:end="35:62"><name pos:start="33:13" pos:end="33:19">DPRINTF</name><argument_list pos:start="33:20" pos:end="35:62">(<argument pos:start="33:21" pos:end="33:49"><expr pos:start="33:21" pos:end="33:49"><literal type="string" pos:start="33:21" pos:end="33:49">"%s: cpu_by_vcpu_id[%d]=%p\n"</literal></expr></argument>,

                    <argument pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28">__func__</name></expr></argument>, <argument pos:start="35:31" pos:end="35:50"><expr pos:start="35:31" pos:end="35:50"><name pos:start="35:31" pos:end="35:50"><name pos:start="35:31" pos:end="35:39">cpu_state</name><operator pos:start="35:40" pos:end="35:41">-&gt;</operator><name pos:start="35:42" pos:end="35:50">cpu_index</name></name></expr></argument>, <argument pos:start="35:53" pos:end="35:61"><expr pos:start="35:53" pos:end="35:61"><name pos:start="35:53" pos:end="35:61">cpu_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:68"><expr pos:start="37:13" pos:end="37:67"><name pos:start="37:13" pos:end="37:55"><name pos:start="37:13" pos:end="37:17">state</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:33">cpu_by_vcpu_id</name><index pos:start="37:34" pos:end="37:55">[<expr pos:start="37:35" pos:end="37:54"><name pos:start="37:35" pos:end="37:54"><name pos:start="37:35" pos:end="37:43">cpu_state</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:54">cpu_index</name></name></expr>]</index></name> <operator pos:start="37:57" pos:end="37:57">=</operator> <name pos:start="37:59" pos:end="37:67">cpu_state</name></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="41:9" pos:end="41:70"><expr pos:start="41:9" pos:end="41:69"><call pos:start="41:9" pos:end="41:69"><name pos:start="41:9" pos:end="41:27">qemu_set_fd_handler</name><argument_list pos:start="41:28" pos:end="41:69">(<argument pos:start="41:29" pos:end="41:37"><expr pos:start="41:29" pos:end="41:37"><name pos:start="41:29" pos:end="41:37">evtchn_fd</name></expr></argument>, <argument pos:start="41:40" pos:end="41:55"><expr pos:start="41:40" pos:end="41:55"><name pos:start="41:40" pos:end="41:55">cpu_handle_ioreq</name></expr></argument>, <argument pos:start="41:58" pos:end="41:61"><expr pos:start="41:58" pos:end="41:61"><name pos:start="41:58" pos:end="41:61">NULL</name></expr></argument>, <argument pos:start="41:64" pos:end="41:68"><expr pos:start="41:64" pos:end="41:68"><name pos:start="41:64" pos:end="41:68">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
