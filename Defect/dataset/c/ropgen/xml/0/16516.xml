<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16516.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:33">object_create_initial</name><parameter_list pos:start="1:34" pos:end="1:51">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:46"><specifier pos:start="1:35" pos:end="1:39">const</specifier> <name pos:start="1:41" pos:end="1:44">char</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:16">

    <if_stmt pos:start="5:5" pos:end="9:5"><if pos:start="5:5" pos:end="9:5">if <condition pos:start="5:8" pos:end="5:37">(<expr pos:start="5:9" pos:end="5:36"><call pos:start="5:9" pos:end="5:36"><name pos:start="5:9" pos:end="5:19">g_str_equal</name><argument_list pos:start="5:20" pos:end="5:36">(<argument pos:start="5:21" pos:end="5:24"><expr pos:start="5:21" pos:end="5:24"><name pos:start="5:21" pos:end="5:24">type</name></expr></argument>, <argument pos:start="5:27" pos:end="5:35"><expr pos:start="5:27" pos:end="5:35"><literal type="string" pos:start="5:27" pos:end="5:35">"rng-egd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5:39" pos:end="9:5">{<block_content pos:start="7:9" pos:end="7:21">

        <return pos:start="7:9" pos:end="7:21">return <expr pos:start="7:16" pos:end="7:20"><name pos:start="7:16" pos:end="7:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="13:5" pos:end="19:7">/*

     * return false for concrete netfilters since

     * they depend on netdevs already existing

     */</comment>

    <if_stmt pos:start="21:5" pos:end="35:5"><if pos:start="21:5" pos:end="35:5">if <condition pos:start="21:8" pos:end="31:45">(<expr pos:start="21:9" pos:end="31:44"><call pos:start="21:9" pos:end="21:42"><name pos:start="21:9" pos:end="21:19">g_str_equal</name><argument_list pos:start="21:20" pos:end="21:42">(<argument pos:start="21:21" pos:end="21:24"><expr pos:start="21:21" pos:end="21:24"><name pos:start="21:21" pos:end="21:24">type</name></expr></argument>, <argument pos:start="21:27" pos:end="21:41"><expr pos:start="21:27" pos:end="21:41"><literal type="string" pos:start="21:27" pos:end="21:41">"filter-buffer"</literal></expr></argument>)</argument_list></call> <operator pos:start="21:44" pos:end="21:45">||</operator>

        <call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:19">g_str_equal</name><argument_list pos:start="23:20" pos:end="23:40">(<argument pos:start="23:21" pos:end="23:24"><expr pos:start="23:21" pos:end="23:24"><name pos:start="23:21" pos:end="23:24">type</name></expr></argument>, <argument pos:start="23:27" pos:end="23:39"><expr pos:start="23:27" pos:end="23:39"><literal type="string" pos:start="23:27" pos:end="23:39">"filter-dump"</literal></expr></argument>)</argument_list></call> <operator pos:start="23:42" pos:end="23:43">||</operator>

        <call pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:19">g_str_equal</name><argument_list pos:start="25:20" pos:end="25:42">(<argument pos:start="25:21" pos:end="25:24"><expr pos:start="25:21" pos:end="25:24"><name pos:start="25:21" pos:end="25:24">type</name></expr></argument>, <argument pos:start="25:27" pos:end="25:41"><expr pos:start="25:27" pos:end="25:41"><literal type="string" pos:start="25:27" pos:end="25:41">"filter-mirror"</literal></expr></argument>)</argument_list></call> <operator pos:start="25:44" pos:end="25:45">||</operator>

        <call pos:start="27:9" pos:end="27:46"><name pos:start="27:9" pos:end="27:19">g_str_equal</name><argument_list pos:start="27:20" pos:end="27:46">(<argument pos:start="27:21" pos:end="27:24"><expr pos:start="27:21" pos:end="27:24"><name pos:start="27:21" pos:end="27:24">type</name></expr></argument>, <argument pos:start="27:27" pos:end="27:45"><expr pos:start="27:27" pos:end="27:45"><literal type="string" pos:start="27:27" pos:end="27:45">"filter-redirector"</literal></expr></argument>)</argument_list></call> <operator pos:start="27:48" pos:end="27:49">||</operator>

        <call pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:19">g_str_equal</name><argument_list pos:start="29:20" pos:end="29:41">(<argument pos:start="29:21" pos:end="29:24"><expr pos:start="29:21" pos:end="29:24"><name pos:start="29:21" pos:end="29:24">type</name></expr></argument>, <argument pos:start="29:27" pos:end="29:40"><expr pos:start="29:27" pos:end="29:40"><literal type="string" pos:start="29:27" pos:end="29:40">"colo-compare"</literal></expr></argument>)</argument_list></call> <operator pos:start="29:43" pos:end="29:44">||</operator>

        <call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:19">g_str_equal</name><argument_list pos:start="31:20" pos:end="31:44">(<argument pos:start="31:21" pos:end="31:24"><expr pos:start="31:21" pos:end="31:24"><name pos:start="31:21" pos:end="31:24">type</name></expr></argument>, <argument pos:start="31:27" pos:end="31:43"><expr pos:start="31:27" pos:end="31:43"><literal type="string" pos:start="31:27" pos:end="31:43">"filter-rewriter"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:47" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:21">

        <return pos:start="33:9" pos:end="33:21">return <expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="55:7">/* Memory allocation by backends needs to be done

     * after configure_accelerator() (due to the tcg_enabled()

     * checks at memory_region_init_*()).

     *

     * Also, allocation of large amounts of memory may delay

     * chardev initialization for too long, and trigger timeouts

     * on software that waits for a monitor socket to be created

     * (e.g. libvirt).

     */</comment>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:50">(<expr pos:start="57:9" pos:end="57:49"><call pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:24">g_str_has_prefix</name><argument_list pos:start="57:25" pos:end="57:49">(<argument pos:start="57:26" pos:end="57:29"><expr pos:start="57:26" pos:end="57:29"><name pos:start="57:26" pos:end="57:29">type</name></expr></argument>, <argument pos:start="57:32" pos:end="57:48"><expr pos:start="57:32" pos:end="57:48"><literal type="string" pos:start="57:32" pos:end="57:48">"memory-backend-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:52" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:21">

        <return pos:start="59:9" pos:end="59:21">return <expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="65:5" pos:end="65:16">return <expr pos:start="65:12" pos:end="65:15"><name pos:start="65:12" pos:end="65:15">true</name></expr>;</return>

</block_content>}</block></function>
</unit>
