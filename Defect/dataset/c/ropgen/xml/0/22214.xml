<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22214.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">walk_memory_regions_1</name><parameter_list pos:start="1:33" pos:end="3:70">(<parameter pos:start="1:34" pos:end="1:70"><decl pos:start="1:34" pos:end="1:70"><type pos:start="1:34" pos:end="1:70"><name pos:start="1:34" pos:end="1:64"><name pos:start="1:34" pos:end="1:39">struct</name> <name pos:start="1:41" pos:end="1:64">walk_memory_regions_data</name></name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">data</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:47"><decl pos:start="3:34" pos:end="3:47"><type pos:start="3:34" pos:end="3:47"><name pos:start="3:34" pos:end="3:42">abi_ulong</name></type> <name pos:start="3:44" pos:end="3:47">base</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:58"><decl pos:start="3:50" pos:end="3:58"><type pos:start="3:50" pos:end="3:58"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:58">level</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:69"><decl pos:start="3:61" pos:end="3:69"><type pos:start="3:61" pos:end="3:69"><name pos:start="3:61" pos:end="3:64">void</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier><modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:69">lp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:13">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">abi_ulong</name></type> <name pos:start="7:15" pos:end="7:16">pa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:13"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:13">rc</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><operator pos:start="13:9" pos:end="13:9">*</operator><name pos:start="13:10" pos:end="13:11">lp</name> <operator pos:start="13:13" pos:end="13:14">==</operator> <name pos:start="13:16" pos:end="13:19">NULL</name></expr>)</condition> <block pos:start="13:22" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:54">

        <return pos:start="15:9" pos:end="15:54">return <expr pos:start="15:16" pos:end="15:53"><call pos:start="15:16" pos:end="15:53"><name pos:start="15:16" pos:end="15:38">walk_memory_regions_end</name><argument_list pos:start="15:39" pos:end="15:53">(<argument pos:start="15:40" pos:end="15:43"><expr pos:start="15:40" pos:end="15:43"><name pos:start="15:40" pos:end="15:43">data</name></expr></argument>, <argument pos:start="15:46" pos:end="15:49"><expr pos:start="15:46" pos:end="15:49"><name pos:start="15:46" pos:end="15:49">base</name></expr></argument>, <argument pos:start="15:52" pos:end="15:52"><expr pos:start="15:52" pos:end="15:52"><literal type="number" pos:start="15:52" pos:end="15:52">0</literal></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="71:5"><if pos:start="21:5" pos:end="49:5">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:13">level</name> <operator pos:start="21:15" pos:end="21:16">==</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>)</condition> <block pos:start="21:21" pos:end="49:5">{<block_content pos:start="23:9" pos:end="47:9">

        <decl_stmt pos:start="23:9" pos:end="23:27"><decl pos:start="23:9" pos:end="23:26"><type pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:16">PageDesc</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:20">pd</name> <init pos:start="23:22" pos:end="23:26">= <expr pos:start="23:24" pos:end="23:26"><operator pos:start="23:24" pos:end="23:24">*</operator><name pos:start="23:25" pos:end="23:26">lp</name></expr></init></decl>;</decl_stmt>



        <for pos:start="27:9" pos:end="47:9">for <control pos:start="27:13" pos:end="27:37">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">i</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:32"><expr pos:start="27:21" pos:end="27:31"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:31">L2_SIZE</name></expr>;</condition> <incr pos:start="27:34" pos:end="27:36"><expr pos:start="27:34" pos:end="27:36"><operator pos:start="27:34" pos:end="27:35">++</operator><name pos:start="27:36" pos:end="27:36">i</name></expr></incr>)</control> <block pos:start="27:39" pos:end="47:9">{<block_content pos:start="29:13" pos:end="45:13">

            <decl_stmt pos:start="29:13" pos:end="29:35"><decl pos:start="29:13" pos:end="29:34"><type pos:start="29:13" pos:end="29:15"><name pos:start="29:13" pos:end="29:15">int</name></type> <name pos:start="29:17" pos:end="29:20">prot</name> <init pos:start="29:22" pos:end="29:34">= <expr pos:start="29:24" pos:end="29:34"><name pos:start="29:24" pos:end="29:28"><name pos:start="29:24" pos:end="29:25">pd</name><index pos:start="29:26" pos:end="29:28">[<expr pos:start="29:27" pos:end="29:27"><name pos:start="29:27" pos:end="29:27">i</name></expr>]</index></name><operator pos:start="29:29" pos:end="29:29">.</operator><name pos:start="29:30" pos:end="29:34">flags</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="33:13" pos:end="33:48"><expr pos:start="33:13" pos:end="33:47"><name pos:start="33:13" pos:end="33:14">pa</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:21">base</name> <operator pos:start="33:23" pos:end="33:23">|</operator> <operator pos:start="33:25" pos:end="33:25">(</operator><name pos:start="33:26" pos:end="33:26">i</name> <operator pos:start="33:28" pos:end="33:29">&lt;&lt;</operator> <name pos:start="33:31" pos:end="33:46">TARGET_PAGE_BITS</name><operator pos:start="33:47" pos:end="33:47">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="45:13"><if pos:start="35:13" pos:end="45:13">if <condition pos:start="35:16" pos:end="35:35">(<expr pos:start="35:17" pos:end="35:34"><name pos:start="35:17" pos:end="35:20">prot</name> <operator pos:start="35:22" pos:end="35:23">!=</operator> <name pos:start="35:25" pos:end="35:34"><name pos:start="35:25" pos:end="35:28">data</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:34">prot</name></name></expr>)</condition> <block pos:start="35:37" pos:end="45:13">{<block_content pos:start="37:17" pos:end="43:17">

                <expr_stmt pos:start="37:17" pos:end="37:61"><expr pos:start="37:17" pos:end="37:60"><name pos:start="37:17" pos:end="37:18">rc</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <call pos:start="37:22" pos:end="37:60"><name pos:start="37:22" pos:end="37:44">walk_memory_regions_end</name><argument_list pos:start="37:45" pos:end="37:60">(<argument pos:start="37:46" pos:end="37:49"><expr pos:start="37:46" pos:end="37:49"><name pos:start="37:46" pos:end="37:49">data</name></expr></argument>, <argument pos:start="37:52" pos:end="37:53"><expr pos:start="37:52" pos:end="37:53"><name pos:start="37:52" pos:end="37:53">pa</name></expr></argument>, <argument pos:start="37:56" pos:end="37:59"><expr pos:start="37:56" pos:end="37:59"><name pos:start="37:56" pos:end="37:59">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="39:17" pos:end="43:17"><if pos:start="39:17" pos:end="43:17">if <condition pos:start="39:20" pos:end="39:28">(<expr pos:start="39:21" pos:end="39:27"><name pos:start="39:21" pos:end="39:22">rc</name> <operator pos:start="39:24" pos:end="39:25">!=</operator> <literal type="number" pos:start="39:27" pos:end="39:27">0</literal></expr>)</condition> <block pos:start="39:30" pos:end="43:17">{<block_content pos:start="41:21" pos:end="41:30">

                    <return pos:start="41:21" pos:end="41:30">return <expr pos:start="41:28" pos:end="41:29"><name pos:start="41:28" pos:end="41:29">rc</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="71:5">else <block pos:start="49:12" pos:end="71:5">{<block_content pos:start="51:9" pos:end="69:9">

        <decl_stmt pos:start="51:9" pos:end="51:24"><decl pos:start="51:9" pos:end="51:23"><type pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:12">void</name> <modifier pos:start="51:14" pos:end="51:14">*</modifier><modifier pos:start="51:15" pos:end="51:15">*</modifier></type><name pos:start="51:16" pos:end="51:17">pp</name> <init pos:start="51:19" pos:end="51:23">= <expr pos:start="51:21" pos:end="51:23"><operator pos:start="51:21" pos:end="51:21">*</operator><name pos:start="51:22" pos:end="51:23">lp</name></expr></init></decl>;</decl_stmt>



        <for pos:start="55:9" pos:end="69:9">for <control pos:start="55:13" pos:end="55:37">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">i</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init> <condition pos:start="55:21" pos:end="55:32"><expr pos:start="55:21" pos:end="55:31"><name pos:start="55:21" pos:end="55:21">i</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <name pos:start="55:25" pos:end="55:31">L2_SIZE</name></expr>;</condition> <incr pos:start="55:34" pos:end="55:36"><expr pos:start="55:34" pos:end="55:36"><operator pos:start="55:34" pos:end="55:35">++</operator><name pos:start="55:36" pos:end="55:36">i</name></expr></incr>)</control> <block pos:start="55:39" pos:end="69:9">{<block_content pos:start="57:13" pos:end="67:13">

            <expr_stmt pos:start="57:13" pos:end="59:54"><expr pos:start="57:13" pos:end="59:53"><name pos:start="57:13" pos:end="57:14">pa</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:21">base</name> <operator pos:start="57:23" pos:end="57:23">|</operator> <operator pos:start="57:25" pos:end="57:25">(</operator><operator pos:start="57:26" pos:end="57:26">(</operator><name pos:start="57:27" pos:end="57:35">abi_ulong</name><operator pos:start="57:36" pos:end="57:36">)</operator><name pos:start="57:37" pos:end="57:37">i</name> <operator pos:start="57:39" pos:end="57:40">&lt;&lt;</operator>

                <operator pos:start="59:17" pos:end="59:17">(</operator><name pos:start="59:18" pos:end="59:33">TARGET_PAGE_BITS</name> <operator pos:start="59:35" pos:end="59:35">+</operator> <name pos:start="59:37" pos:end="59:43">L2_BITS</name> <operator pos:start="59:45" pos:end="59:45">*</operator> <name pos:start="59:47" pos:end="59:51">level</name><operator pos:start="59:52" pos:end="59:52">)</operator><operator pos:start="59:53" pos:end="59:53">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:68"><expr pos:start="61:13" pos:end="61:67"><name pos:start="61:13" pos:end="61:14">rc</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:67"><name pos:start="61:18" pos:end="61:38">walk_memory_regions_1</name><argument_list pos:start="61:39" pos:end="61:67">(<argument pos:start="61:40" pos:end="61:43"><expr pos:start="61:40" pos:end="61:43"><name pos:start="61:40" pos:end="61:43">data</name></expr></argument>, <argument pos:start="61:46" pos:end="61:47"><expr pos:start="61:46" pos:end="61:47"><name pos:start="61:46" pos:end="61:47">pa</name></expr></argument>, <argument pos:start="61:50" pos:end="61:58"><expr pos:start="61:50" pos:end="61:58"><name pos:start="61:50" pos:end="61:54">level</name> <operator pos:start="61:56" pos:end="61:56">-</operator> <literal type="number" pos:start="61:58" pos:end="61:58">1</literal></expr></argument>, <argument pos:start="61:61" pos:end="61:66"><expr pos:start="61:61" pos:end="61:66"><name pos:start="61:61" pos:end="61:62">pp</name> <operator pos:start="61:64" pos:end="61:64">+</operator> <name pos:start="61:66" pos:end="61:66">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="67:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:24">(<expr pos:start="63:17" pos:end="63:23"><name pos:start="63:17" pos:end="63:18">rc</name> <operator pos:start="63:20" pos:end="63:21">!=</operator> <literal type="number" pos:start="63:23" pos:end="63:23">0</literal></expr>)</condition> <block pos:start="63:26" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:26">

                <return pos:start="65:17" pos:end="65:26">return <expr pos:start="65:24" pos:end="65:25"><name pos:start="65:24" pos:end="65:25">rc</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
