<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8985.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:46"><name pos:start="1:1" pos:end="1:30">gen_intermediate_code_internal</name> <argument_list pos:start="1:32" pos:end="3:46">(<argument pos:start="1:33" pos:end="1:45">CPUState *env</argument>, <argument pos:start="1:48" pos:end="1:67">TranslationBlock *tb</argument>,

                                <argument pos:start="3:33" pos:end="3:45">int search_pc</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="289:1">{<block_content pos:start="7:5" pos:end="288:0">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">DisasContext</name></type> <name pos:start="7:18" pos:end="7:20">ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint16_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">CPUBreakpoint</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">j</name></decl>, <decl pos:start="15:12" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:13">lj</name> <init pos:start="15:15" pos:end="15:18">= <expr pos:start="15:17" pos:end="15:18"><operator pos:start="15:17" pos:end="15:17">-</operator><literal type="number" pos:start="15:18" pos:end="15:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">max_insns</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:55"><if pos:start="23:5" pos:end="25:55">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:17">search_pc</name> <operator pos:start="23:19" pos:end="23:20">&amp;&amp;</operator> <name pos:start="23:22" pos:end="23:29">loglevel</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:55"><block_content pos:start="25:9" pos:end="25:55">

        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><call pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:15">fprintf</name> <argument_list pos:start="25:17" pos:end="25:54">(<argument pos:start="25:18" pos:end="25:24"><expr pos:start="25:18" pos:end="25:24"><name pos:start="25:18" pos:end="25:24">logfile</name></expr></argument>, <argument pos:start="25:27" pos:end="25:42"><expr pos:start="25:27" pos:end="25:42"><literal type="string" pos:start="25:27" pos:end="25:42">"search pc %d\n"</literal></expr></argument>, <argument pos:start="25:45" pos:end="25:53"><expr pos:start="25:45" pos:end="25:53"><name pos:start="25:45" pos:end="25:53">search_pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:12">pc_start</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:21"><name pos:start="29:16" pos:end="29:17">tb</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:21">pc</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:57">/* Leave some spare opc slots for branch handling. */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:15">gen_opc_end</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:29">gen_opc_buf</name> <operator pos:start="33:31" pos:end="33:31">+</operator> <name pos:start="33:33" pos:end="33:44">OPC_MAX_SIZE</name> <operator pos:start="33:46" pos:end="33:46">-</operator> <literal type="number" pos:start="33:48" pos:end="33:49">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:22"><expr pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:10">pc</name></name> <operator pos:start="35:12" pos:end="35:12">=</operator> <name pos:start="35:14" pos:end="35:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:16">saved_pc</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <operator pos:start="37:20" pos:end="37:20">-</operator><literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:10">tb</name></name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:14">bstate</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:24">BS_NONE</name></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:56">/* Restore delay slot state from the tb context.  */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:7">ctx</name><operator pos:start="45:8" pos:end="45:8">.</operator><name pos:start="45:9" pos:end="45:14">hflags</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <operator pos:start="45:18" pos:end="45:18">(</operator><name pos:start="45:19" pos:end="45:26">uint32_t</name><operator pos:start="45:27" pos:end="45:27">)</operator><name pos:start="45:28" pos:end="45:36"><name pos:start="45:28" pos:end="45:29">tb</name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:36">flags</name></name></expr>;</expr_stmt> <comment type="block" pos:start="45:39" pos:end="45:74">/* FIXME: maybe use 64 bits here? */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><call pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:21">restore_cpu_state</name><argument_list pos:start="47:22" pos:end="47:32">(<argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">env</name></expr></argument>, <argument pos:start="47:28" pos:end="47:31"><expr pos:start="47:28" pos:end="47:31"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:50"><if pos:start="49:5" pos:end="51:36">if <condition pos:start="49:8" pos:end="49:28">(<expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:11">env</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:27">user_mode_only</name></name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:36"><block_content pos:start="51:9" pos:end="51:36">

        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:11">ctx</name><operator pos:start="51:12" pos:end="51:12">.</operator><name pos:start="51:13" pos:end="51:19">mem_idx</name></name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:35">MIPS_HFLAG_UM</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="53:5" pos:end="55:50">else<block type="pseudo" pos:start="55:9" pos:end="55:50"><block_content pos:start="55:9" pos:end="55:50">

        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:11">ctx</name><operator pos:start="55:12" pos:end="55:12">.</operator><name pos:start="55:13" pos:end="55:19">mem_idx</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:32"><name pos:start="55:23" pos:end="55:25">ctx</name><operator pos:start="55:26" pos:end="55:26">.</operator><name pos:start="55:27" pos:end="55:32">hflags</name></name> <operator pos:start="55:34" pos:end="55:34">&amp;</operator> <name pos:start="55:36" pos:end="55:49">MIPS_HFLAG_KSU</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:13">num_insns</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <literal type="number" pos:start="57:17" pos:end="57:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:13">max_insns</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:26"><name pos:start="59:17" pos:end="59:18">tb</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:26">cflags</name></name> <operator pos:start="59:28" pos:end="59:28">&amp;</operator> <name pos:start="59:30" pos:end="59:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="66:0"><if pos:start="61:5" pos:end="66:0">if <condition pos:start="61:8" pos:end="61:23">(<expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:17">max_insns</name> <operator pos:start="61:19" pos:end="61:20">==</operator> <literal type="number" pos:start="61:22" pos:end="61:22">0</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="66:0"><block_content pos:start="63:9" pos:end="66:0">

        <expr_stmt pos:start="63:9" pos:end="66:0"><expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:17">max_insns</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="65:1" pos:end="65:18">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="67:5" pos:end="80:0"><if pos:start="67:5" pos:end="80:0">if <condition pos:start="67:8" pos:end="67:34">(<expr pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:16">loglevel</name> <operator pos:start="67:18" pos:end="67:18">&amp;</operator> <name pos:start="67:20" pos:end="67:33">CPU_LOG_TB_CPU</name></expr>)</condition> <block pos:start="67:36" pos:end="80:0">{<block_content pos:start="69:9" pos:end="73:49">

        <expr_stmt pos:start="69:9" pos:end="69:79"><expr pos:start="69:9" pos:end="69:78"><call pos:start="69:9" pos:end="69:78"><name pos:start="69:9" pos:end="69:15">fprintf</name><argument_list pos:start="69:16" pos:end="69:78">(<argument pos:start="69:17" pos:end="69:23"><expr pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:23">logfile</name></expr></argument>, <argument pos:start="69:26" pos:end="69:77"><expr pos:start="69:26" pos:end="69:77"><literal type="string" pos:start="69:26" pos:end="69:77">"------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="71:9" pos:end="71:64">/* FIXME: This may print out stale hflags from env... */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:22">cpu_dump_state</name><argument_list pos:start="73:23" pos:end="73:48">(<argument pos:start="73:24" pos:end="73:26"><expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">env</name></expr></argument>, <argument pos:start="73:29" pos:end="73:35"><expr pos:start="73:29" pos:end="73:35"><name pos:start="73:29" pos:end="73:35">logfile</name></expr></argument>, <argument pos:start="73:38" pos:end="73:44"><expr pos:start="73:38" pos:end="73:44"><name pos:start="73:38" pos:end="73:44">fprintf</name></expr></argument>, <argument pos:start="73:47" pos:end="73:47"><expr pos:start="73:47" pos:end="73:47"><literal type="number" pos:start="73:47" pos:end="73:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="79:1" pos:end="79:23">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:23">MIPS_DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="81:5" pos:end="88:0"><if pos:start="81:5" pos:end="88:0">if <condition pos:start="81:8" pos:end="81:37">(<expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:16">loglevel</name> <operator pos:start="81:18" pos:end="81:18">&amp;</operator> <name pos:start="81:20" pos:end="81:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="88:0"><block_content pos:start="83:9" pos:end="88:0">

        <expr_stmt pos:start="83:9" pos:end="88:0"><expr pos:start="83:9" pos:end="85:44"><call pos:start="83:9" pos:end="85:44"><name pos:start="83:9" pos:end="83:15">fprintf</name><argument_list pos:start="83:16" pos:end="85:44">(<argument pos:start="83:17" pos:end="83:23"><expr pos:start="83:17" pos:end="83:23"><name pos:start="83:17" pos:end="83:23">logfile</name></expr></argument>, <argument pos:start="83:26" pos:end="83:55"><expr pos:start="83:26" pos:end="83:55"><literal type="string" pos:start="83:26" pos:end="83:55">"\ntb %p idx %d hflags %04x\n"</literal></expr></argument>,

                <argument pos:start="85:17" pos:end="85:18"><expr pos:start="85:17" pos:end="85:18"><name pos:start="85:17" pos:end="85:18">tb</name></expr></argument>, <argument pos:start="85:21" pos:end="85:31"><expr pos:start="85:21" pos:end="85:31"><name pos:start="85:21" pos:end="85:31"><name pos:start="85:21" pos:end="85:23">ctx</name><operator pos:start="85:24" pos:end="85:24">.</operator><name pos:start="85:25" pos:end="85:31">mem_idx</name></name></expr></argument>, <argument pos:start="85:34" pos:end="85:43"><expr pos:start="85:34" pos:end="85:43"><name pos:start="85:34" pos:end="85:43"><name pos:start="85:34" pos:end="85:36">ctx</name><operator pos:start="85:37" pos:end="85:37">.</operator><name pos:start="85:38" pos:end="85:43">hflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="89:5" pos:end="89:23"><expr pos:start="89:5" pos:end="89:22"><call pos:start="89:5" pos:end="89:22"><name pos:start="89:5" pos:end="89:20">gen_icount_start</name><argument_list pos:start="89:21" pos:end="89:22">()</argument_list></call></expr>;</expr_stmt>

    <while pos:start="91:5" pos:end="187:5">while <condition pos:start="91:11" pos:end="91:33">(<expr pos:start="91:12" pos:end="91:32"><name pos:start="91:12" pos:end="91:21"><name pos:start="91:12" pos:end="91:14">ctx</name><operator pos:start="91:15" pos:end="91:15">.</operator><name pos:start="91:16" pos:end="91:21">bstate</name></name> <operator pos:start="91:23" pos:end="91:24">==</operator> <name pos:start="91:26" pos:end="91:32">BS_NONE</name></expr>)</condition> <block pos:start="91:35" pos:end="187:5">{<block_content pos:start="93:9" pos:end="186:0">

        <if_stmt pos:start="93:9" pos:end="117:9"><if pos:start="93:9" pos:end="117:9">if <condition pos:start="93:12" pos:end="93:54">(<expr pos:start="93:13" pos:end="93:53"><call pos:start="93:13" pos:end="93:53"><name pos:start="93:13" pos:end="93:20">unlikely</name><argument_list pos:start="93:21" pos:end="93:53">(<argument pos:start="93:22" pos:end="93:52"><expr pos:start="93:22" pos:end="93:52"><operator pos:start="93:22" pos:end="93:22">!</operator><call pos:start="93:23" pos:end="93:52"><name pos:start="93:23" pos:end="93:33">TAILQ_EMPTY</name><argument_list pos:start="93:34" pos:end="93:52">(<argument pos:start="93:35" pos:end="93:51"><expr pos:start="93:35" pos:end="93:51"><operator pos:start="93:35" pos:end="93:35">&amp;</operator><name pos:start="93:36" pos:end="93:51"><name pos:start="93:36" pos:end="93:38">env</name><operator pos:start="93:39" pos:end="93:40">-&gt;</operator><name pos:start="93:41" pos:end="93:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:56" pos:end="117:9">{<block_content pos:start="95:13" pos:end="115:13">

            <macro pos:start="95:13" pos:end="95:55"><name pos:start="95:13" pos:end="95:25">TAILQ_FOREACH</name><argument_list pos:start="95:26" pos:end="95:55">(<argument pos:start="95:27" pos:end="95:28">bp</argument>, <argument pos:start="95:31" pos:end="95:47">&amp;env-&gt;breakpoints</argument>, <argument pos:start="95:50" pos:end="95:54">entry</argument>)</argument_list></macro> <block pos:start="95:57" pos:end="115:13">{<block_content pos:start="97:17" pos:end="113:17">

                <if_stmt pos:start="97:17" pos:end="113:17"><if pos:start="97:17" pos:end="113:17">if <condition pos:start="97:20" pos:end="97:37">(<expr pos:start="97:21" pos:end="97:36"><name pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:22">bp</name><operator pos:start="97:23" pos:end="97:24">-&gt;</operator><name pos:start="97:25" pos:end="97:26">pc</name></name> <operator pos:start="97:28" pos:end="97:29">==</operator> <name pos:start="97:31" pos:end="97:36"><name pos:start="97:31" pos:end="97:33">ctx</name><operator pos:start="97:34" pos:end="97:34">.</operator><name pos:start="97:35" pos:end="97:36">pc</name></name></expr>)</condition> <block pos:start="97:39" pos:end="113:17">{<block_content pos:start="99:21" pos:end="111:41">

                    <expr_stmt pos:start="99:21" pos:end="99:44"><expr pos:start="99:21" pos:end="99:43"><call pos:start="99:21" pos:end="99:43"><name pos:start="99:21" pos:end="99:34">save_cpu_state</name><argument_list pos:start="99:35" pos:end="99:43">(<argument pos:start="99:36" pos:end="99:39"><expr pos:start="99:36" pos:end="99:39"><operator pos:start="99:36" pos:end="99:36">&amp;</operator><name pos:start="99:37" pos:end="99:39">ctx</name></expr></argument>, <argument pos:start="99:42" pos:end="99:42"><expr pos:start="99:42" pos:end="99:42"><literal type="number" pos:start="99:42" pos:end="99:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:43"><expr pos:start="101:21" pos:end="101:42"><name pos:start="101:21" pos:end="101:30"><name pos:start="101:21" pos:end="101:23">ctx</name><operator pos:start="101:24" pos:end="101:24">.</operator><name pos:start="101:25" pos:end="101:30">bstate</name></name> <operator pos:start="101:32" pos:end="101:32">=</operator> <name pos:start="101:34" pos:end="101:42">BS_BRANCH</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:63"><expr pos:start="103:21" pos:end="103:62"><call pos:start="103:21" pos:end="103:62"><name pos:start="103:21" pos:end="103:33">gen_helper_0i</name><argument_list pos:start="103:34" pos:end="103:62">(<argument pos:start="103:35" pos:end="103:49"><expr pos:start="103:35" pos:end="103:49"><name pos:start="103:35" pos:end="103:49">raise_exception</name></expr></argument>, <argument pos:start="103:52" pos:end="103:61"><expr pos:start="103:52" pos:end="103:61"><name pos:start="103:52" pos:end="103:61">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="105:21" pos:end="107:54">/* Include the breakpoint location or the tb won't

                     * be flushed when it must be.  */</comment>

                    <expr_stmt pos:start="109:21" pos:end="109:32"><expr pos:start="109:21" pos:end="109:31"><name pos:start="109:21" pos:end="109:26"><name pos:start="109:21" pos:end="109:23">ctx</name><operator pos:start="109:24" pos:end="109:24">.</operator><name pos:start="109:25" pos:end="109:26">pc</name></name> <operator pos:start="109:28" pos:end="109:29">+=</operator> <literal type="number" pos:start="109:31" pos:end="109:31">4</literal></expr>;</expr_stmt>

                    <goto pos:start="111:21" pos:end="111:41">goto <name pos:start="111:26" pos:end="111:40">done_generating</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="121:9" pos:end="143:9"><if pos:start="121:9" pos:end="143:9">if <condition pos:start="121:12" pos:end="121:22">(<expr pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:21">search_pc</name></expr>)</condition> <block pos:start="121:24" pos:end="143:9">{<block_content pos:start="123:13" pos:end="141:43">

            <expr_stmt pos:start="123:13" pos:end="123:42"><expr pos:start="123:13" pos:end="123:41"><name pos:start="123:13" pos:end="123:13">j</name> <operator pos:start="123:15" pos:end="123:15">=</operator> <name pos:start="123:17" pos:end="123:27">gen_opc_ptr</name> <operator pos:start="123:29" pos:end="123:29">-</operator> <name pos:start="123:31" pos:end="123:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="133:13"><if pos:start="125:13" pos:end="133:13">if <condition pos:start="125:16" pos:end="125:23">(<expr pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:18">lj</name> <operator pos:start="125:20" pos:end="125:20">&lt;</operator> <name pos:start="125:22" pos:end="125:22">j</name></expr>)</condition> <block pos:start="125:25" pos:end="133:13">{<block_content pos:start="127:17" pos:end="131:50">

                <expr_stmt pos:start="127:17" pos:end="127:21"><expr pos:start="127:17" pos:end="127:20"><name pos:start="127:17" pos:end="127:18">lj</name><operator pos:start="127:19" pos:end="127:20">++</operator></expr>;</expr_stmt>

                <while pos:start="129:17" pos:end="131:50">while <condition pos:start="129:23" pos:end="129:30">(<expr pos:start="129:24" pos:end="129:29"><name pos:start="129:24" pos:end="129:25">lj</name> <operator pos:start="129:27" pos:end="129:27">&lt;</operator> <name pos:start="129:29" pos:end="129:29">j</name></expr>)</condition><block type="pseudo" pos:start="131:21" pos:end="131:50"><block_content pos:start="131:21" pos:end="131:50">

                    <expr_stmt pos:start="131:21" pos:end="131:50"><expr pos:start="131:21" pos:end="131:49"><name pos:start="131:21" pos:end="131:45"><name pos:start="131:21" pos:end="131:39">gen_opc_instr_start</name><index pos:start="131:40" pos:end="131:45">[<expr pos:start="131:41" pos:end="131:44"><name pos:start="131:41" pos:end="131:42">lj</name><operator pos:start="131:43" pos:end="131:44">++</operator></expr>]</index></name> <operator pos:start="131:47" pos:end="131:47">=</operator> <literal type="number" pos:start="131:49" pos:end="131:49">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:36"><expr pos:start="135:13" pos:end="135:35"><name pos:start="135:13" pos:end="135:26"><name pos:start="135:13" pos:end="135:22">gen_opc_pc</name><index pos:start="135:23" pos:end="135:26">[<expr pos:start="135:24" pos:end="135:25"><name pos:start="135:24" pos:end="135:25">lj</name></expr>]</index></name> <operator pos:start="135:28" pos:end="135:28">=</operator> <name pos:start="135:30" pos:end="135:35"><name pos:start="135:30" pos:end="135:32">ctx</name><operator pos:start="135:33" pos:end="135:33">.</operator><name pos:start="135:34" pos:end="135:35">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:63"><expr pos:start="137:13" pos:end="137:62"><name pos:start="137:13" pos:end="137:30"><name pos:start="137:13" pos:end="137:26">gen_opc_hflags</name><index pos:start="137:27" pos:end="137:30">[<expr pos:start="137:28" pos:end="137:29"><name pos:start="137:28" pos:end="137:29">lj</name></expr>]</index></name> <operator pos:start="137:32" pos:end="137:32">=</operator> <name pos:start="137:34" pos:end="137:43"><name pos:start="137:34" pos:end="137:36">ctx</name><operator pos:start="137:37" pos:end="137:37">.</operator><name pos:start="137:38" pos:end="137:43">hflags</name></name> <operator pos:start="137:45" pos:end="137:45">&amp;</operator> <name pos:start="137:47" pos:end="137:62">MIPS_HFLAG_BMASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:40"><expr pos:start="139:13" pos:end="139:39"><name pos:start="139:13" pos:end="139:35"><name pos:start="139:13" pos:end="139:31">gen_opc_instr_start</name><index pos:start="139:32" pos:end="139:35">[<expr pos:start="139:33" pos:end="139:34"><name pos:start="139:33" pos:end="139:34">lj</name></expr>]</index></name> <operator pos:start="139:37" pos:end="139:37">=</operator> <literal type="number" pos:start="139:39" pos:end="139:39">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:43"><expr pos:start="141:13" pos:end="141:42"><name pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:26">gen_opc_icount</name><index pos:start="141:27" pos:end="141:30">[<expr pos:start="141:28" pos:end="141:29"><name pos:start="141:28" pos:end="141:29">lj</name></expr>]</index></name> <operator pos:start="141:32" pos:end="141:32">=</operator> <name pos:start="141:34" pos:end="141:42">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="145:9" pos:end="147:27"><if pos:start="145:9" pos:end="147:27">if <condition pos:start="145:12" pos:end="145:68">(<expr pos:start="145:13" pos:end="145:67"><name pos:start="145:13" pos:end="145:21">num_insns</name> <operator pos:start="145:23" pos:end="145:23">+</operator> <literal type="number" pos:start="145:25" pos:end="145:25">1</literal> <operator pos:start="145:27" pos:end="145:28">==</operator> <name pos:start="145:30" pos:end="145:38">max_insns</name> <operator pos:start="145:40" pos:end="145:41">&amp;&amp;</operator> <operator pos:start="145:43" pos:end="145:43">(</operator><name pos:start="145:44" pos:end="145:53"><name pos:start="145:44" pos:end="145:45">tb</name><operator pos:start="145:46" pos:end="145:47">-&gt;</operator><name pos:start="145:48" pos:end="145:53">cflags</name></name> <operator pos:start="145:55" pos:end="145:55">&amp;</operator> <name pos:start="145:57" pos:end="145:66">CF_LAST_IO</name><operator pos:start="145:67" pos:end="145:67">)</operator></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:27"><block_content pos:start="147:13" pos:end="147:27">

            <expr_stmt pos:start="147:13" pos:end="147:27"><expr pos:start="147:13" pos:end="147:26"><call pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:24">gen_io_start</name><argument_list pos:start="147:25" pos:end="147:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:38"><expr pos:start="149:9" pos:end="149:37"><name pos:start="149:9" pos:end="149:18"><name pos:start="149:9" pos:end="149:11">ctx</name><operator pos:start="149:12" pos:end="149:12">.</operator><name pos:start="149:13" pos:end="149:18">opcode</name></name> <operator pos:start="149:20" pos:end="149:20">=</operator> <call pos:start="149:22" pos:end="149:37"><name pos:start="149:22" pos:end="149:29">ldl_code</name><argument_list pos:start="149:30" pos:end="149:37">(<argument pos:start="149:31" pos:end="149:36"><expr pos:start="149:31" pos:end="149:36"><name pos:start="149:31" pos:end="149:36"><name pos:start="149:31" pos:end="149:33">ctx</name><operator pos:start="149:34" pos:end="149:34">.</operator><name pos:start="149:35" pos:end="149:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:30"><expr pos:start="151:9" pos:end="151:29"><call pos:start="151:9" pos:end="151:29"><name pos:start="151:9" pos:end="151:18">decode_opc</name><argument_list pos:start="151:19" pos:end="151:29">(<argument pos:start="151:20" pos:end="151:22"><expr pos:start="151:20" pos:end="151:22"><name pos:start="151:20" pos:end="151:22">env</name></expr></argument>, <argument pos:start="151:25" pos:end="151:28"><expr pos:start="151:25" pos:end="151:28"><operator pos:start="151:25" pos:end="151:25">&amp;</operator><name pos:start="151:26" pos:end="151:28">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:20"><expr pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:14"><name pos:start="153:9" pos:end="153:11">ctx</name><operator pos:start="153:12" pos:end="153:12">.</operator><name pos:start="153:13" pos:end="153:14">pc</name></name> <operator pos:start="153:16" pos:end="153:17">+=</operator> <literal type="number" pos:start="153:19" pos:end="153:19">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:20"><expr pos:start="155:9" pos:end="155:19"><name pos:start="155:9" pos:end="155:17">num_insns</name><operator pos:start="155:18" pos:end="155:19">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="161:18"><if pos:start="159:9" pos:end="161:18">if <condition pos:start="159:12" pos:end="159:36">(<expr pos:start="159:13" pos:end="159:35"><name pos:start="159:13" pos:end="159:35"><name pos:start="159:13" pos:end="159:15">env</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:35">singlestep_enabled</name></name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:18"><block_content pos:start="161:13" pos:end="161:18">

            <break pos:start="161:13" pos:end="161:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="165:9" pos:end="167:18"><if pos:start="165:9" pos:end="167:18">if <condition pos:start="165:12" pos:end="165:51">(<expr pos:start="165:13" pos:end="165:50"><operator pos:start="165:13" pos:end="165:13">(</operator><name pos:start="165:14" pos:end="165:19"><name pos:start="165:14" pos:end="165:16">ctx</name><operator pos:start="165:17" pos:end="165:17">.</operator><name pos:start="165:18" pos:end="165:19">pc</name></name> <operator pos:start="165:21" pos:end="165:21">&amp;</operator> <operator pos:start="165:23" pos:end="165:23">(</operator><name pos:start="165:24" pos:end="165:39">TARGET_PAGE_SIZE</name> <operator pos:start="165:41" pos:end="165:41">-</operator> <literal type="number" pos:start="165:43" pos:end="165:43">1</literal><operator pos:start="165:44" pos:end="165:44">)</operator><operator pos:start="165:45" pos:end="165:45">)</operator> <operator pos:start="165:47" pos:end="165:48">==</operator> <literal type="number" pos:start="165:50" pos:end="165:50">0</literal></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:18"><block_content pos:start="167:13" pos:end="167:18">

            <break pos:start="167:13" pos:end="167:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="171:9" pos:end="173:18"><if pos:start="171:9" pos:end="173:18">if <condition pos:start="171:12" pos:end="171:39">(<expr pos:start="171:13" pos:end="171:38"><name pos:start="171:13" pos:end="171:23">gen_opc_ptr</name> <operator pos:start="171:25" pos:end="171:26">&gt;=</operator> <name pos:start="171:28" pos:end="171:38">gen_opc_end</name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:18"><block_content pos:start="173:13" pos:end="173:18">

            <break pos:start="173:13" pos:end="173:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="177:9" pos:end="182:0"><if pos:start="177:9" pos:end="182:0">if <condition pos:start="177:12" pos:end="177:35">(<expr pos:start="177:13" pos:end="177:34"><name pos:start="177:13" pos:end="177:21">num_insns</name> <operator pos:start="177:23" pos:end="177:24">&gt;=</operator> <name pos:start="177:26" pos:end="177:34">max_insns</name></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="182:0"><block_content pos:start="179:13" pos:end="182:0">

            <break pos:start="179:13" pos:end="182:0">break;</break></block_content></block></if></if_stmt>

<cpp:if pos:start="181:1" pos:end="181:30">#<cpp:directive pos:start="181:2" pos:end="181:3">if</cpp:directive> <expr pos:start="181:5" pos:end="181:30"><call pos:start="181:5" pos:end="181:30"><name pos:start="181:5" pos:end="181:11">defined</name> <argument_list pos:start="181:13" pos:end="181:30">(<argument pos:start="181:14" pos:end="181:29"><expr pos:start="181:14" pos:end="181:29"><name pos:start="181:14" pos:end="181:29">MIPS_SINGLE_STEP</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <break pos:start="183:9" pos:end="186:0">break;</break>

<cpp:endif pos:start="185:1" pos:end="185:6">#<cpp:directive pos:start="185:2" pos:end="185:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></while>

    <if_stmt pos:start="189:5" pos:end="191:21"><if pos:start="189:5" pos:end="191:21">if <condition pos:start="189:8" pos:end="189:32">(<expr pos:start="189:9" pos:end="189:31"><name pos:start="189:9" pos:end="189:18"><name pos:start="189:9" pos:end="189:10">tb</name><operator pos:start="189:11" pos:end="189:12">-&gt;</operator><name pos:start="189:13" pos:end="189:18">cflags</name></name> <operator pos:start="189:20" pos:end="189:20">&amp;</operator> <name pos:start="189:22" pos:end="189:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:21"><block_content pos:start="191:9" pos:end="191:21">

        <expr_stmt pos:start="191:9" pos:end="191:21"><expr pos:start="191:9" pos:end="191:20"><call pos:start="191:9" pos:end="191:20"><name pos:start="191:9" pos:end="191:18">gen_io_end</name><argument_list pos:start="191:19" pos:end="191:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="193:5" pos:end="235:5"><if pos:start="193:5" pos:end="199:5">if <condition pos:start="193:8" pos:end="193:32">(<expr pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:11">env</name><operator pos:start="193:12" pos:end="193:13">-&gt;</operator><name pos:start="193:14" pos:end="193:31">singlestep_enabled</name></name></expr>)</condition> <block pos:start="193:34" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:51">

        <expr_stmt pos:start="195:9" pos:end="195:52"><expr pos:start="195:9" pos:end="195:51"><call pos:start="195:9" pos:end="195:51"><name pos:start="195:9" pos:end="195:22">save_cpu_state</name><argument_list pos:start="195:23" pos:end="195:51">(<argument pos:start="195:24" pos:end="195:27"><expr pos:start="195:24" pos:end="195:27"><operator pos:start="195:24" pos:end="195:24">&amp;</operator><name pos:start="195:25" pos:end="195:27">ctx</name></expr></argument>, <argument pos:start="195:30" pos:end="195:50"><expr pos:start="195:30" pos:end="195:50"><name pos:start="195:30" pos:end="195:39"><name pos:start="195:30" pos:end="195:32">ctx</name><operator pos:start="195:33" pos:end="195:33">.</operator><name pos:start="195:34" pos:end="195:39">bstate</name></name> <operator pos:start="195:41" pos:end="195:42">==</operator> <name pos:start="195:44" pos:end="195:50">BS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:51"><expr pos:start="197:9" pos:end="197:50"><call pos:start="197:9" pos:end="197:50"><name pos:start="197:9" pos:end="197:21">gen_helper_0i</name><argument_list pos:start="197:22" pos:end="197:50">(<argument pos:start="197:23" pos:end="197:37"><expr pos:start="197:23" pos:end="197:37"><name pos:start="197:23" pos:end="197:37">raise_exception</name></expr></argument>, <argument pos:start="197:40" pos:end="197:49"><expr pos:start="197:40" pos:end="197:49"><name pos:start="197:40" pos:end="197:49">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="199:7" pos:end="235:5">else <block pos:start="199:12" pos:end="235:5">{<block_content pos:start="201:9" pos:end="233:9">

	<switch pos:start="201:9" pos:end="233:9">switch <condition pos:start="201:16" pos:end="201:27">(<expr pos:start="201:17" pos:end="201:26"><name pos:start="201:17" pos:end="201:26"><name pos:start="201:17" pos:end="201:19">ctx</name><operator pos:start="201:20" pos:end="201:20">.</operator><name pos:start="201:21" pos:end="201:26">bstate</name></name></expr>)</condition> <block pos:start="201:29" pos:end="233:9">{<block_content pos:start="203:9" pos:end="231:18">

        <case pos:start="203:9" pos:end="203:21">case <expr pos:start="203:14" pos:end="203:20"><name pos:start="203:14" pos:end="203:20">BS_STOP</name></expr>:</case>

            <expr_stmt pos:start="205:13" pos:end="205:43"><expr pos:start="205:13" pos:end="205:42"><call pos:start="205:13" pos:end="205:42"><name pos:start="205:13" pos:end="205:40">gen_helper_interrupt_restart</name><argument_list pos:start="205:41" pos:end="205:42">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:41"><expr pos:start="207:13" pos:end="207:40"><call pos:start="207:13" pos:end="207:40"><name pos:start="207:13" pos:end="207:23">gen_goto_tb</name><argument_list pos:start="207:24" pos:end="207:40">(<argument pos:start="207:25" pos:end="207:28"><expr pos:start="207:25" pos:end="207:28"><operator pos:start="207:25" pos:end="207:25">&amp;</operator><name pos:start="207:26" pos:end="207:28">ctx</name></expr></argument>, <argument pos:start="207:31" pos:end="207:31"><expr pos:start="207:31" pos:end="207:31"><literal type="number" pos:start="207:31" pos:end="207:31">0</literal></expr></argument>, <argument pos:start="207:34" pos:end="207:39"><expr pos:start="207:34" pos:end="207:39"><name pos:start="207:34" pos:end="207:39"><name pos:start="207:34" pos:end="207:36">ctx</name><operator pos:start="207:37" pos:end="207:37">.</operator><name pos:start="207:38" pos:end="207:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        <case pos:start="211:9" pos:end="211:21">case <expr pos:start="211:14" pos:end="211:20"><name pos:start="211:14" pos:end="211:20">BS_NONE</name></expr>:</case>

            <expr_stmt pos:start="213:13" pos:end="213:36"><expr pos:start="213:13" pos:end="213:35"><call pos:start="213:13" pos:end="213:35"><name pos:start="213:13" pos:end="213:26">save_cpu_state</name><argument_list pos:start="213:27" pos:end="213:35">(<argument pos:start="213:28" pos:end="213:31"><expr pos:start="213:28" pos:end="213:31"><operator pos:start="213:28" pos:end="213:28">&amp;</operator><name pos:start="213:29" pos:end="213:31">ctx</name></expr></argument>, <argument pos:start="213:34" pos:end="213:34"><expr pos:start="213:34" pos:end="213:34"><literal type="number" pos:start="213:34" pos:end="213:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:41"><expr pos:start="215:13" pos:end="215:40"><call pos:start="215:13" pos:end="215:40"><name pos:start="215:13" pos:end="215:23">gen_goto_tb</name><argument_list pos:start="215:24" pos:end="215:40">(<argument pos:start="215:25" pos:end="215:28"><expr pos:start="215:25" pos:end="215:28"><operator pos:start="215:25" pos:end="215:25">&amp;</operator><name pos:start="215:26" pos:end="215:28">ctx</name></expr></argument>, <argument pos:start="215:31" pos:end="215:31"><expr pos:start="215:31" pos:end="215:31"><literal type="number" pos:start="215:31" pos:end="215:31">0</literal></expr></argument>, <argument pos:start="215:34" pos:end="215:39"><expr pos:start="215:34" pos:end="215:39"><name pos:start="215:34" pos:end="215:39"><name pos:start="215:34" pos:end="215:36">ctx</name><operator pos:start="215:37" pos:end="215:37">.</operator><name pos:start="215:38" pos:end="215:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        <case pos:start="219:9" pos:end="219:21">case <expr pos:start="219:14" pos:end="219:20"><name pos:start="219:14" pos:end="219:20">BS_EXCP</name></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:43"><expr pos:start="221:13" pos:end="221:42"><call pos:start="221:13" pos:end="221:42"><name pos:start="221:13" pos:end="221:40">gen_helper_interrupt_restart</name><argument_list pos:start="221:41" pos:end="221:42">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:31"><expr pos:start="223:13" pos:end="223:30"><call pos:start="223:13" pos:end="223:30"><name pos:start="223:13" pos:end="223:27">tcg_gen_exit_tb</name><argument_list pos:start="223:28" pos:end="223:30">(<argument pos:start="223:29" pos:end="223:29"><expr pos:start="223:29" pos:end="223:29"><literal type="number" pos:start="223:29" pos:end="223:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="225:13" pos:end="225:18">break;</break>

        <case pos:start="227:9" pos:end="227:23">case <expr pos:start="227:14" pos:end="227:22"><name pos:start="227:14" pos:end="227:22">BS_BRANCH</name></expr>:</case>

        <default pos:start="229:9" pos:end="229:16">default:</default>

            <break pos:start="231:13" pos:end="231:18">break;</break>

	</block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

<label pos:start="237:1" pos:end="237:16"><name pos:start="237:1" pos:end="237:15">done_generating</name>:</label>

    <expr_stmt pos:start="239:5" pos:end="239:34"><expr pos:start="239:5" pos:end="239:33"><call pos:start="239:5" pos:end="239:33"><name pos:start="239:5" pos:end="239:18">gen_icount_end</name><argument_list pos:start="239:19" pos:end="239:33">(<argument pos:start="239:20" pos:end="239:21"><expr pos:start="239:20" pos:end="239:21"><name pos:start="239:20" pos:end="239:21">tb</name></expr></argument>, <argument pos:start="239:24" pos:end="239:32"><expr pos:start="239:24" pos:end="239:32"><name pos:start="239:24" pos:end="239:32">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:32"><expr pos:start="241:5" pos:end="241:31"><operator pos:start="241:5" pos:end="241:5">*</operator><name pos:start="241:6" pos:end="241:16">gen_opc_ptr</name> <operator pos:start="241:18" pos:end="241:18">=</operator> <name pos:start="241:20" pos:end="241:31">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="264:0"><if pos:start="243:5" pos:end="253:5">if <condition pos:start="243:8" pos:end="243:18">(<expr pos:start="243:9" pos:end="243:17"><name pos:start="243:9" pos:end="243:17">search_pc</name></expr>)</condition> <block pos:start="243:20" pos:end="253:5">{<block_content pos:start="245:9" pos:end="251:42">

        <expr_stmt pos:start="245:9" pos:end="245:38"><expr pos:start="245:9" pos:end="245:37"><name pos:start="245:9" pos:end="245:9">j</name> <operator pos:start="245:11" pos:end="245:11">=</operator> <name pos:start="245:13" pos:end="245:23">gen_opc_ptr</name> <operator pos:start="245:25" pos:end="245:25">-</operator> <name pos:start="245:27" pos:end="245:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:13"><expr pos:start="247:9" pos:end="247:12"><name pos:start="247:9" pos:end="247:10">lj</name><operator pos:start="247:11" pos:end="247:12">++</operator></expr>;</expr_stmt>

        <while pos:start="249:9" pos:end="251:42">while <condition pos:start="249:15" pos:end="249:23">(<expr pos:start="249:16" pos:end="249:22"><name pos:start="249:16" pos:end="249:17">lj</name> <operator pos:start="249:19" pos:end="249:20">&lt;=</operator> <name pos:start="249:22" pos:end="249:22">j</name></expr>)</condition><block type="pseudo" pos:start="251:13" pos:end="251:42"><block_content pos:start="251:13" pos:end="251:42">

            <expr_stmt pos:start="251:13" pos:end="251:42"><expr pos:start="251:13" pos:end="251:41"><name pos:start="251:13" pos:end="251:37"><name pos:start="251:13" pos:end="251:31">gen_opc_instr_start</name><index pos:start="251:32" pos:end="251:37">[<expr pos:start="251:33" pos:end="251:36"><name pos:start="251:33" pos:end="251:34">lj</name><operator pos:start="251:35" pos:end="251:36">++</operator></expr>]</index></name> <operator pos:start="251:39" pos:end="251:39">=</operator> <literal type="number" pos:start="251:41" pos:end="251:41">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="253:7" pos:end="264:0">else <block pos:start="253:12" pos:end="264:0">{<block_content pos:start="255:9" pos:end="257:31">

        <expr_stmt pos:start="255:9" pos:end="255:37"><expr pos:start="255:9" pos:end="255:36"><name pos:start="255:9" pos:end="255:16"><name pos:start="255:9" pos:end="255:10">tb</name><operator pos:start="255:11" pos:end="255:12">-&gt;</operator><name pos:start="255:13" pos:end="255:16">size</name></name> <operator pos:start="255:18" pos:end="255:18">=</operator> <name pos:start="255:20" pos:end="255:25"><name pos:start="255:20" pos:end="255:22">ctx</name><operator pos:start="255:23" pos:end="255:23">.</operator><name pos:start="255:24" pos:end="255:25">pc</name></name> <operator pos:start="255:27" pos:end="255:27">-</operator> <name pos:start="255:29" pos:end="255:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:31"><expr pos:start="257:9" pos:end="257:30"><name pos:start="257:9" pos:end="257:18"><name pos:start="257:9" pos:end="257:10">tb</name><operator pos:start="257:11" pos:end="257:12">-&gt;</operator><name pos:start="257:13" pos:end="257:18">icount</name></name> <operator pos:start="257:20" pos:end="257:20">=</operator> <name pos:start="257:22" pos:end="257:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="261:1" pos:end="261:18">#<cpp:directive pos:start="261:2" pos:end="261:6">ifdef</cpp:directive> <name pos:start="261:8" pos:end="261:18">DEBUG_DISAS</name></cpp:ifdef>

<cpp:if pos:start="263:1" pos:end="263:28">#<cpp:directive pos:start="263:2" pos:end="263:3">if</cpp:directive> <expr pos:start="263:5" pos:end="263:28"><name pos:start="263:5" pos:end="263:11">defined</name> <name pos:start="263:13" pos:end="263:28">MIPS_DEBUG_DISAS</name></expr></cpp:if>

    <if_stmt pos:start="265:5" pos:end="270:0"><if pos:start="265:5" pos:end="270:0">if <condition pos:start="265:8" pos:end="265:37">(<expr pos:start="265:9" pos:end="265:36"><name pos:start="265:9" pos:end="265:16">loglevel</name> <operator pos:start="265:18" pos:end="265:18">&amp;</operator> <name pos:start="265:20" pos:end="265:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition><block type="pseudo" pos:start="267:9" pos:end="270:0"><block_content pos:start="267:9" pos:end="270:0">

        <expr_stmt pos:start="267:9" pos:end="270:0"><expr pos:start="267:9" pos:end="267:30"><call pos:start="267:9" pos:end="267:30"><name pos:start="267:9" pos:end="267:15">fprintf</name><argument_list pos:start="267:16" pos:end="267:30">(<argument pos:start="267:17" pos:end="267:23"><expr pos:start="267:17" pos:end="267:23"><name pos:start="267:17" pos:end="267:23">logfile</name></expr></argument>, <argument pos:start="267:26" pos:end="267:29"><expr pos:start="267:26" pos:end="267:29"><literal type="string" pos:start="267:26" pos:end="267:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="271:5" pos:end="279:5"><if pos:start="271:5" pos:end="279:5">if <condition pos:start="271:8" pos:end="271:37">(<expr pos:start="271:9" pos:end="271:36"><name pos:start="271:9" pos:end="271:16">loglevel</name> <operator pos:start="271:18" pos:end="271:18">&amp;</operator> <name pos:start="271:20" pos:end="271:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="271:39" pos:end="279:5">{<block_content pos:start="273:9" pos:end="277:31">

        <expr_stmt pos:start="273:9" pos:end="273:62"><expr pos:start="273:9" pos:end="273:61"><call pos:start="273:9" pos:end="273:61"><name pos:start="273:9" pos:end="273:15">fprintf</name><argument_list pos:start="273:16" pos:end="273:61">(<argument pos:start="273:17" pos:end="273:23"><expr pos:start="273:17" pos:end="273:23"><name pos:start="273:17" pos:end="273:23">logfile</name></expr></argument>, <argument pos:start="273:26" pos:end="273:35"><expr pos:start="273:26" pos:end="273:35"><literal type="string" pos:start="273:26" pos:end="273:35">"IN: %s\n"</literal></expr></argument>, <argument pos:start="273:38" pos:end="273:60"><expr pos:start="273:38" pos:end="273:60"><call pos:start="273:38" pos:end="273:60"><name pos:start="273:38" pos:end="273:50">lookup_symbol</name><argument_list pos:start="273:51" pos:end="273:60">(<argument pos:start="273:52" pos:end="273:59"><expr pos:start="273:52" pos:end="273:59"><name pos:start="273:52" pos:end="273:59">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:62"><expr pos:start="275:9" pos:end="275:61"><call pos:start="275:9" pos:end="275:61"><name pos:start="275:9" pos:end="275:20">target_disas</name><argument_list pos:start="275:21" pos:end="275:61">(<argument pos:start="275:22" pos:end="275:28"><expr pos:start="275:22" pos:end="275:28"><name pos:start="275:22" pos:end="275:28">logfile</name></expr></argument>, <argument pos:start="275:31" pos:end="275:38"><expr pos:start="275:31" pos:end="275:38"><name pos:start="275:31" pos:end="275:38">pc_start</name></expr></argument>, <argument pos:start="275:41" pos:end="275:57"><expr pos:start="275:41" pos:end="275:57"><name pos:start="275:41" pos:end="275:46"><name pos:start="275:41" pos:end="275:43">ctx</name><operator pos:start="275:44" pos:end="275:44">.</operator><name pos:start="275:45" pos:end="275:46">pc</name></name> <operator pos:start="275:48" pos:end="275:48">-</operator> <name pos:start="275:50" pos:end="275:57">pc_start</name></expr></argument>, <argument pos:start="275:60" pos:end="275:60"><expr pos:start="275:60" pos:end="275:60"><literal type="number" pos:start="275:60" pos:end="275:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:31"><expr pos:start="277:9" pos:end="277:30"><call pos:start="277:9" pos:end="277:30"><name pos:start="277:9" pos:end="277:15">fprintf</name><argument_list pos:start="277:16" pos:end="277:30">(<argument pos:start="277:17" pos:end="277:23"><expr pos:start="277:17" pos:end="277:23"><name pos:start="277:17" pos:end="277:23">logfile</name></expr></argument>, <argument pos:start="277:26" pos:end="277:29"><expr pos:start="277:26" pos:end="277:29"><literal type="string" pos:start="277:26" pos:end="277:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="281:5" pos:end="288:0"><if pos:start="281:5" pos:end="288:0">if <condition pos:start="281:8" pos:end="281:34">(<expr pos:start="281:9" pos:end="281:33"><name pos:start="281:9" pos:end="281:16">loglevel</name> <operator pos:start="281:18" pos:end="281:18">&amp;</operator> <name pos:start="281:20" pos:end="281:33">CPU_LOG_TB_CPU</name></expr>)</condition> <block pos:start="281:36" pos:end="288:0">{<block_content pos:start="283:9" pos:end="283:79">

        <expr_stmt pos:start="283:9" pos:end="283:79"><expr pos:start="283:9" pos:end="283:78"><call pos:start="283:9" pos:end="283:78"><name pos:start="283:9" pos:end="283:15">fprintf</name><argument_list pos:start="283:16" pos:end="283:78">(<argument pos:start="283:17" pos:end="283:23"><expr pos:start="283:17" pos:end="283:23"><name pos:start="283:17" pos:end="283:23">logfile</name></expr></argument>, <argument pos:start="283:26" pos:end="283:53"><expr pos:start="283:26" pos:end="283:53"><literal type="string" pos:start="283:26" pos:end="283:53">"---------------- %d %08x\n"</literal></expr></argument>, <argument pos:start="283:56" pos:end="283:65"><expr pos:start="283:56" pos:end="283:65"><name pos:start="283:56" pos:end="283:65"><name pos:start="283:56" pos:end="283:58">ctx</name><operator pos:start="283:59" pos:end="283:59">.</operator><name pos:start="283:60" pos:end="283:65">bstate</name></name></expr></argument>, <argument pos:start="283:68" pos:end="283:77"><expr pos:start="283:68" pos:end="283:77"><name pos:start="283:68" pos:end="283:77"><name pos:start="283:68" pos:end="283:70">ctx</name><operator pos:start="283:71" pos:end="283:71">.</operator><name pos:start="283:72" pos:end="283:77">hflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="287:1" pos:end="287:6">#<cpp:directive pos:start="287:2" pos:end="287:6">endif</cpp:directive></cpp:endif>

</block_content>}</block>
</unit>
