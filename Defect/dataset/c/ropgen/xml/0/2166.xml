<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2166.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">mem_info_pae32</name><parameter_list pos:start="1:27" pos:end="1:55">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:34">Monitor</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">mon</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:54"><decl pos:start="1:42" pos:end="1:54"><type pos:start="1:42" pos:end="1:54"><name pos:start="1:42" pos:end="1:49">CPUState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:71">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:19">l1</name></decl>, <decl pos:start="5:22" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:22" pos:end="5:23">l2</name></decl>, <decl pos:start="5:26" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:26" pos:end="5:27">l3</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">prot</name></decl>, <decl pos:start="7:15" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:23">last_prot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:17">pdpe</name></decl>, <decl pos:start="9:20" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:20" pos:end="9:22">pde</name></decl>, <decl pos:start="9:25" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:25" pos:end="9:27">pte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">pdp_addr</name></decl>, <decl pos:start="11:24" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:24" pos:end="11:30">pd_addr</name></decl>, <decl pos:start="11:33" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:33" pos:end="11:39">pt_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:22">target_phys_addr_t</name></type> <name pos:start="13:24" pos:end="13:28">start</name></decl>, <decl pos:start="13:31" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:22"/><name pos:start="13:31" pos:end="13:33">end</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:12">pdp_addr</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:18">env</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:22">cr</name><index pos:start="17:23" pos:end="17:25">[<expr pos:start="17:24" pos:end="17:24"><literal type="number" pos:start="17:24" pos:end="17:24">3</literal></expr>]</index></name> <operator pos:start="17:27" pos:end="17:27">&amp;</operator> <operator pos:start="17:29" pos:end="17:29">~</operator><literal type="number" pos:start="17:30" pos:end="17:33">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:18"><expr pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:13">last_prot</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:15"><expr pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:9">start</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <operator pos:start="21:13" pos:end="21:13">-</operator><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="101:5">for <control pos:start="23:9" pos:end="23:30">(<init pos:start="23:10" pos:end="23:16"><expr pos:start="23:10" pos:end="23:15"><name pos:start="23:10" pos:end="23:11">l1</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>;</init> <condition pos:start="23:18" pos:end="23:24"><expr pos:start="23:18" pos:end="23:23"><name pos:start="23:18" pos:end="23:19">l1</name> <operator pos:start="23:21" pos:end="23:21">&lt;</operator> <literal type="number" pos:start="23:23" pos:end="23:23">4</literal></expr>;</condition> <incr pos:start="23:26" pos:end="23:29"><expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:27">l1</name><operator pos:start="23:28" pos:end="23:29">++</operator></expr></incr>)</control> <block pos:start="23:32" pos:end="101:5">{<block_content pos:start="25:9" pos:end="99:9">

        <expr_stmt pos:start="25:9" pos:end="25:62"><expr pos:start="25:9" pos:end="25:61"><call pos:start="25:9" pos:end="25:61"><name pos:start="25:9" pos:end="25:32">cpu_physical_memory_read</name><argument_list pos:start="25:33" pos:end="25:61">(<argument pos:start="25:34" pos:end="25:50"><expr pos:start="25:34" pos:end="25:50"><name pos:start="25:34" pos:end="25:41">pdp_addr</name> <operator pos:start="25:43" pos:end="25:43">+</operator> <name pos:start="25:45" pos:end="25:46">l1</name> <operator pos:start="25:48" pos:end="25:48">*</operator> <literal type="number" pos:start="25:50" pos:end="25:50">8</literal></expr></argument>, <argument pos:start="25:53" pos:end="25:57"><expr pos:start="25:53" pos:end="25:57"><operator pos:start="25:53" pos:end="25:53">&amp;</operator><name pos:start="25:54" pos:end="25:57">pdpe</name></expr></argument>, <argument pos:start="25:60" pos:end="25:60"><expr pos:start="25:60" pos:end="25:60"><literal type="number" pos:start="25:60" pos:end="25:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:12">pdpe</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:32"><name pos:start="27:16" pos:end="27:26">le64_to_cpu</name><argument_list pos:start="27:27" pos:end="27:32">(<argument pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">pdpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:11">end</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:16">l1</name> <operator pos:start="29:18" pos:end="29:19">&lt;&lt;</operator> <literal type="number" pos:start="29:21" pos:end="29:22">30</literal></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="99:9"><if pos:start="31:9" pos:end="93:9">if <condition pos:start="31:12" pos:end="31:35">(<expr pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:16">pdpe</name> <operator pos:start="31:18" pos:end="31:18">&amp;</operator> <name pos:start="31:20" pos:end="31:34">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="31:37" pos:end="93:9">{<block_content pos:start="33:13" pos:end="91:13">

            <expr_stmt pos:start="33:13" pos:end="33:48"><expr pos:start="33:13" pos:end="33:47"><name pos:start="33:13" pos:end="33:19">pd_addr</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:26">pdpe</name> <operator pos:start="33:28" pos:end="33:28">&amp;</operator> <literal type="number" pos:start="33:30" pos:end="33:47">0x3fffffffff000ULL</literal></expr>;</expr_stmt>

            <for pos:start="35:13" pos:end="91:13">for <control pos:start="35:17" pos:end="35:40">(<init pos:start="35:18" pos:end="35:24"><expr pos:start="35:18" pos:end="35:23"><name pos:start="35:18" pos:end="35:19">l2</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>;</init> <condition pos:start="35:26" pos:end="35:34"><expr pos:start="35:26" pos:end="35:33"><name pos:start="35:26" pos:end="35:27">l2</name> <operator pos:start="35:29" pos:end="35:29">&lt;</operator> <literal type="number" pos:start="35:31" pos:end="35:33">512</literal></expr>;</condition> <incr pos:start="35:36" pos:end="35:39"><expr pos:start="35:36" pos:end="35:39"><name pos:start="35:36" pos:end="35:37">l2</name><operator pos:start="35:38" pos:end="35:39">++</operator></expr></incr>)</control> <block pos:start="35:42" pos:end="91:13">{<block_content pos:start="37:17" pos:end="89:17">

                <expr_stmt pos:start="37:17" pos:end="37:68"><expr pos:start="37:17" pos:end="37:67"><call pos:start="37:17" pos:end="37:67"><name pos:start="37:17" pos:end="37:40">cpu_physical_memory_read</name><argument_list pos:start="37:41" pos:end="37:67">(<argument pos:start="37:42" pos:end="37:57"><expr pos:start="37:42" pos:end="37:57"><name pos:start="37:42" pos:end="37:48">pd_addr</name> <operator pos:start="37:50" pos:end="37:50">+</operator> <name pos:start="37:52" pos:end="37:53">l2</name> <operator pos:start="37:55" pos:end="37:55">*</operator> <literal type="number" pos:start="37:57" pos:end="37:57">8</literal></expr></argument>, <argument pos:start="37:60" pos:end="37:63"><expr pos:start="37:60" pos:end="37:63"><operator pos:start="37:60" pos:end="37:60">&amp;</operator><name pos:start="37:61" pos:end="37:63">pde</name></expr></argument>, <argument pos:start="37:66" pos:end="37:66"><expr pos:start="37:66" pos:end="37:66"><literal type="number" pos:start="37:66" pos:end="37:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:39"><expr pos:start="39:17" pos:end="39:38"><name pos:start="39:17" pos:end="39:19">pde</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:38"><name pos:start="39:23" pos:end="39:33">le64_to_cpu</name><argument_list pos:start="39:34" pos:end="39:38">(<argument pos:start="39:35" pos:end="39:37"><expr pos:start="39:35" pos:end="39:37"><name pos:start="39:35" pos:end="39:37">pde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:46"><expr pos:start="41:17" pos:end="41:45"><name pos:start="41:17" pos:end="41:19">end</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <operator pos:start="41:23" pos:end="41:23">(</operator><name pos:start="41:24" pos:end="41:25">l1</name> <operator pos:start="41:27" pos:end="41:28">&lt;&lt;</operator> <literal type="number" pos:start="41:30" pos:end="41:31">30</literal><operator pos:start="41:32" pos:end="41:32">)</operator> <operator pos:start="41:34" pos:end="41:34">+</operator> <operator pos:start="41:36" pos:end="41:36">(</operator><name pos:start="41:37" pos:end="41:38">l2</name> <operator pos:start="41:40" pos:end="41:41">&lt;&lt;</operator> <literal type="number" pos:start="41:43" pos:end="41:44">21</literal><operator pos:start="41:45" pos:end="41:45">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="43:17" pos:end="89:17"><if pos:start="43:17" pos:end="83:17">if <condition pos:start="43:20" pos:end="43:42">(<expr pos:start="43:21" pos:end="43:41"><name pos:start="43:21" pos:end="43:23">pde</name> <operator pos:start="43:25" pos:end="43:25">&amp;</operator> <name pos:start="43:27" pos:end="43:41">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="43:44" pos:end="83:17">{<block_content pos:start="45:21" pos:end="81:21">

                    <if_stmt pos:start="45:21" pos:end="81:21"><if pos:start="45:21" pos:end="53:21">if <condition pos:start="45:24" pos:end="45:42">(<expr pos:start="45:25" pos:end="45:41"><name pos:start="45:25" pos:end="45:27">pde</name> <operator pos:start="45:29" pos:end="45:29">&amp;</operator> <name pos:start="45:31" pos:end="45:41">PG_PSE_MASK</name></expr>)</condition> <block pos:start="45:44" pos:end="53:21">{<block_content pos:start="47:25" pos:end="51:70">

                        <expr_stmt pos:start="47:25" pos:end="49:55"><expr pos:start="47:25" pos:end="49:54"><name pos:start="47:25" pos:end="47:28">prot</name> <operator pos:start="47:30" pos:end="47:30">=</operator> <name pos:start="47:32" pos:end="47:34">pde</name> <operator pos:start="47:36" pos:end="47:36">&amp;</operator> <operator pos:start="47:38" pos:end="47:38">(</operator><name pos:start="47:39" pos:end="47:50">PG_USER_MASK</name> <operator pos:start="47:52" pos:end="47:52">|</operator> <name pos:start="47:54" pos:end="47:63">PG_RW_MASK</name> <operator pos:start="47:65" pos:end="47:65">|</operator>

                                      <name pos:start="49:39" pos:end="49:53">PG_PRESENT_MASK</name><operator pos:start="49:54" pos:end="49:54">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="51:25" pos:end="51:70"><expr pos:start="51:25" pos:end="51:69"><call pos:start="51:25" pos:end="51:69"><name pos:start="51:25" pos:end="51:33">mem_print</name><argument_list pos:start="51:34" pos:end="51:69">(<argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">mon</name></expr></argument>, <argument pos:start="51:40" pos:end="51:45"><expr pos:start="51:40" pos:end="51:45"><operator pos:start="51:40" pos:end="51:40">&amp;</operator><name pos:start="51:41" pos:end="51:45">start</name></expr></argument>, <argument pos:start="51:48" pos:end="51:57"><expr pos:start="51:48" pos:end="51:57"><operator pos:start="51:48" pos:end="51:48">&amp;</operator><name pos:start="51:49" pos:end="51:57">last_prot</name></expr></argument>, <argument pos:start="51:60" pos:end="51:62"><expr pos:start="51:60" pos:end="51:62"><name pos:start="51:60" pos:end="51:62">end</name></expr></argument>, <argument pos:start="51:65" pos:end="51:68"><expr pos:start="51:65" pos:end="51:68"><name pos:start="51:65" pos:end="51:68">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="53:23" pos:end="81:21">else <block pos:start="53:28" pos:end="81:21">{<block_content pos:start="55:25" pos:end="79:25">

                        <expr_stmt pos:start="55:25" pos:end="55:59"><expr pos:start="55:25" pos:end="55:58"><name pos:start="55:25" pos:end="55:31">pt_addr</name> <operator pos:start="55:33" pos:end="55:33">=</operator> <name pos:start="55:35" pos:end="55:37">pde</name> <operator pos:start="55:39" pos:end="55:39">&amp;</operator> <literal type="number" pos:start="55:41" pos:end="55:58">0x3fffffffff000ULL</literal></expr>;</expr_stmt>

                        <for pos:start="57:25" pos:end="79:25">for <control pos:start="57:29" pos:end="57:52">(<init pos:start="57:30" pos:end="57:36"><expr pos:start="57:30" pos:end="57:35"><name pos:start="57:30" pos:end="57:31">l3</name> <operator pos:start="57:33" pos:end="57:33">=</operator> <literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr>;</init> <condition pos:start="57:38" pos:end="57:46"><expr pos:start="57:38" pos:end="57:45"><name pos:start="57:38" pos:end="57:39">l3</name> <operator pos:start="57:41" pos:end="57:41">&lt;</operator> <literal type="number" pos:start="57:43" pos:end="57:45">512</literal></expr>;</condition> <incr pos:start="57:48" pos:end="57:51"><expr pos:start="57:48" pos:end="57:51"><name pos:start="57:48" pos:end="57:49">l3</name><operator pos:start="57:50" pos:end="57:51">++</operator></expr></incr>)</control> <block pos:start="57:54" pos:end="79:25">{<block_content pos:start="59:29" pos:end="77:74">

                            <expr_stmt pos:start="59:29" pos:end="59:80"><expr pos:start="59:29" pos:end="59:79"><call pos:start="59:29" pos:end="59:79"><name pos:start="59:29" pos:end="59:52">cpu_physical_memory_read</name><argument_list pos:start="59:53" pos:end="59:79">(<argument pos:start="59:54" pos:end="59:69"><expr pos:start="59:54" pos:end="59:69"><name pos:start="59:54" pos:end="59:60">pt_addr</name> <operator pos:start="59:62" pos:end="59:62">+</operator> <name pos:start="59:64" pos:end="59:65">l3</name> <operator pos:start="59:67" pos:end="59:67">*</operator> <literal type="number" pos:start="59:69" pos:end="59:69">8</literal></expr></argument>, <argument pos:start="59:72" pos:end="59:75"><expr pos:start="59:72" pos:end="59:75"><operator pos:start="59:72" pos:end="59:72">&amp;</operator><name pos:start="59:73" pos:end="59:75">pte</name></expr></argument>, <argument pos:start="59:78" pos:end="59:78"><expr pos:start="59:78" pos:end="59:78"><literal type="number" pos:start="59:78" pos:end="59:78">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="61:29" pos:end="61:51"><expr pos:start="61:29" pos:end="61:50"><name pos:start="61:29" pos:end="61:31">pte</name> <operator pos:start="61:33" pos:end="61:33">=</operator> <call pos:start="61:35" pos:end="61:50"><name pos:start="61:35" pos:end="61:45">le64_to_cpu</name><argument_list pos:start="61:46" pos:end="61:50">(<argument pos:start="61:47" pos:end="61:49"><expr pos:start="61:47" pos:end="61:49"><name pos:start="61:47" pos:end="61:49">pte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="63:29" pos:end="63:71"><expr pos:start="63:29" pos:end="63:70"><name pos:start="63:29" pos:end="63:31">end</name> <operator pos:start="63:33" pos:end="63:33">=</operator> <operator pos:start="63:35" pos:end="63:35">(</operator><name pos:start="63:36" pos:end="63:37">l1</name> <operator pos:start="63:39" pos:end="63:40">&lt;&lt;</operator> <literal type="number" pos:start="63:42" pos:end="63:43">30</literal><operator pos:start="63:44" pos:end="63:44">)</operator> <operator pos:start="63:46" pos:end="63:46">+</operator> <operator pos:start="63:48" pos:end="63:48">(</operator><name pos:start="63:49" pos:end="63:50">l2</name> <operator pos:start="63:52" pos:end="63:53">&lt;&lt;</operator> <literal type="number" pos:start="63:55" pos:end="63:56">21</literal><operator pos:start="63:57" pos:end="63:57">)</operator> <operator pos:start="63:59" pos:end="63:59">+</operator> <operator pos:start="63:61" pos:end="63:61">(</operator><name pos:start="63:62" pos:end="63:63">l3</name> <operator pos:start="63:65" pos:end="63:66">&lt;&lt;</operator> <literal type="number" pos:start="63:68" pos:end="63:69">12</literal><operator pos:start="63:70" pos:end="63:70">)</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="65:29" pos:end="75:29"><if pos:start="65:29" pos:end="71:29">if <condition pos:start="65:32" pos:end="65:54">(<expr pos:start="65:33" pos:end="65:53"><name pos:start="65:33" pos:end="65:35">pte</name> <operator pos:start="65:37" pos:end="65:37">&amp;</operator> <name pos:start="65:39" pos:end="65:53">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="65:56" pos:end="71:29">{<block_content pos:start="67:33" pos:end="69:63">

                                <expr_stmt pos:start="67:33" pos:end="69:63"><expr pos:start="67:33" pos:end="69:62"><name pos:start="67:33" pos:end="67:36">prot</name> <operator pos:start="67:38" pos:end="67:38">=</operator> <name pos:start="67:40" pos:end="67:42">pte</name> <operator pos:start="67:44" pos:end="67:44">&amp;</operator> <operator pos:start="67:46" pos:end="67:46">(</operator><name pos:start="67:47" pos:end="67:58">PG_USER_MASK</name> <operator pos:start="67:60" pos:end="67:60">|</operator> <name pos:start="67:62" pos:end="67:71">PG_RW_MASK</name> <operator pos:start="67:73" pos:end="67:73">|</operator>

                                              <name pos:start="69:47" pos:end="69:61">PG_PRESENT_MASK</name><operator pos:start="69:62" pos:end="69:62">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="71:31" pos:end="75:29">else <block pos:start="71:36" pos:end="75:29">{<block_content pos:start="73:33" pos:end="73:41">

                                <expr_stmt pos:start="73:33" pos:end="73:41"><expr pos:start="73:33" pos:end="73:40"><name pos:start="73:33" pos:end="73:36">prot</name> <operator pos:start="73:38" pos:end="73:38">=</operator> <literal type="number" pos:start="73:40" pos:end="73:40">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <expr_stmt pos:start="77:29" pos:end="77:74"><expr pos:start="77:29" pos:end="77:73"><call pos:start="77:29" pos:end="77:73"><name pos:start="77:29" pos:end="77:37">mem_print</name><argument_list pos:start="77:38" pos:end="77:73">(<argument pos:start="77:39" pos:end="77:41"><expr pos:start="77:39" pos:end="77:41"><name pos:start="77:39" pos:end="77:41">mon</name></expr></argument>, <argument pos:start="77:44" pos:end="77:49"><expr pos:start="77:44" pos:end="77:49"><operator pos:start="77:44" pos:end="77:44">&amp;</operator><name pos:start="77:45" pos:end="77:49">start</name></expr></argument>, <argument pos:start="77:52" pos:end="77:61"><expr pos:start="77:52" pos:end="77:61"><operator pos:start="77:52" pos:end="77:52">&amp;</operator><name pos:start="77:53" pos:end="77:61">last_prot</name></expr></argument>, <argument pos:start="77:64" pos:end="77:66"><expr pos:start="77:64" pos:end="77:66"><name pos:start="77:64" pos:end="77:66">end</name></expr></argument>, <argument pos:start="77:69" pos:end="77:72"><expr pos:start="77:69" pos:end="77:72"><name pos:start="77:69" pos:end="77:72">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="83:19" pos:end="89:17">else <block pos:start="83:24" pos:end="89:17">{<block_content pos:start="85:21" pos:end="87:66">

                    <expr_stmt pos:start="85:21" pos:end="85:29"><expr pos:start="85:21" pos:end="85:28"><name pos:start="85:21" pos:end="85:24">prot</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:66"><expr pos:start="87:21" pos:end="87:65"><call pos:start="87:21" pos:end="87:65"><name pos:start="87:21" pos:end="87:29">mem_print</name><argument_list pos:start="87:30" pos:end="87:65">(<argument pos:start="87:31" pos:end="87:33"><expr pos:start="87:31" pos:end="87:33"><name pos:start="87:31" pos:end="87:33">mon</name></expr></argument>, <argument pos:start="87:36" pos:end="87:41"><expr pos:start="87:36" pos:end="87:41"><operator pos:start="87:36" pos:end="87:36">&amp;</operator><name pos:start="87:37" pos:end="87:41">start</name></expr></argument>, <argument pos:start="87:44" pos:end="87:53"><expr pos:start="87:44" pos:end="87:53"><operator pos:start="87:44" pos:end="87:44">&amp;</operator><name pos:start="87:45" pos:end="87:53">last_prot</name></expr></argument>, <argument pos:start="87:56" pos:end="87:58"><expr pos:start="87:56" pos:end="87:58"><name pos:start="87:56" pos:end="87:58">end</name></expr></argument>, <argument pos:start="87:61" pos:end="87:64"><expr pos:start="87:61" pos:end="87:64"><name pos:start="87:61" pos:end="87:64">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="99:9">else <block pos:start="93:16" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:58">

            <expr_stmt pos:start="95:13" pos:end="95:21"><expr pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:16">prot</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <literal type="number" pos:start="95:20" pos:end="95:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:58"><expr pos:start="97:13" pos:end="97:57"><call pos:start="97:13" pos:end="97:57"><name pos:start="97:13" pos:end="97:21">mem_print</name><argument_list pos:start="97:22" pos:end="97:57">(<argument pos:start="97:23" pos:end="97:25"><expr pos:start="97:23" pos:end="97:25"><name pos:start="97:23" pos:end="97:25">mon</name></expr></argument>, <argument pos:start="97:28" pos:end="97:33"><expr pos:start="97:28" pos:end="97:33"><operator pos:start="97:28" pos:end="97:28">&amp;</operator><name pos:start="97:29" pos:end="97:33">start</name></expr></argument>, <argument pos:start="97:36" pos:end="97:45"><expr pos:start="97:36" pos:end="97:45"><operator pos:start="97:36" pos:end="97:36">&amp;</operator><name pos:start="97:37" pos:end="97:45">last_prot</name></expr></argument>, <argument pos:start="97:48" pos:end="97:50"><expr pos:start="97:48" pos:end="97:50"><name pos:start="97:48" pos:end="97:50">end</name></expr></argument>, <argument pos:start="97:53" pos:end="97:56"><expr pos:start="97:53" pos:end="97:56"><name pos:start="97:53" pos:end="97:56">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="103:5" pos:end="103:26">/* Flush last range */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:71"><expr pos:start="105:5" pos:end="105:70"><call pos:start="105:5" pos:end="105:70"><name pos:start="105:5" pos:end="105:13">mem_print</name><argument_list pos:start="105:14" pos:end="105:70">(<argument pos:start="105:15" pos:end="105:17"><expr pos:start="105:15" pos:end="105:17"><name pos:start="105:15" pos:end="105:17">mon</name></expr></argument>, <argument pos:start="105:20" pos:end="105:25"><expr pos:start="105:20" pos:end="105:25"><operator pos:start="105:20" pos:end="105:20">&amp;</operator><name pos:start="105:21" pos:end="105:25">start</name></expr></argument>, <argument pos:start="105:28" pos:end="105:37"><expr pos:start="105:28" pos:end="105:37"><operator pos:start="105:28" pos:end="105:28">&amp;</operator><name pos:start="105:29" pos:end="105:37">last_prot</name></expr></argument>, <argument pos:start="105:40" pos:end="105:66"><expr pos:start="105:40" pos:end="105:66"><operator pos:start="105:40" pos:end="105:40">(</operator><name pos:start="105:41" pos:end="105:58">target_phys_addr_t</name><operator pos:start="105:59" pos:end="105:59">)</operator><literal type="number" pos:start="105:60" pos:end="105:60">1</literal> <operator pos:start="105:62" pos:end="105:63">&lt;&lt;</operator> <literal type="number" pos:start="105:65" pos:end="105:66">32</literal></expr></argument>, <argument pos:start="105:69" pos:end="105:69"><expr pos:start="105:69" pos:end="105:69"><literal type="number" pos:start="105:69" pos:end="105:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
