<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14517.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">parse_inputs</name><parameter_list pos:start="1:24" pos:end="3:71">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier><modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">buf</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:69"><decl pos:start="1:43" pos:end="1:69"><type pos:start="1:43" pos:end="1:69"><name pos:start="1:43" pos:end="1:55">AVFilterInOut</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:69">curr_inputs</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:52"><decl pos:start="3:25" pos:end="3:52"><type pos:start="3:25" pos:end="3:52"><name pos:start="3:25" pos:end="3:37">AVFilterInOut</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier><modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:52">open_outputs</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:70"><decl pos:start="3:55" pos:end="3:70"><type pos:start="3:55" pos:end="3:70"><name pos:start="3:55" pos:end="3:61">AVClass</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:70">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">pad</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="57:5">while <condition pos:start="11:11" pos:end="11:24">(<expr pos:start="11:12" pos:end="11:23"><operator pos:start="11:12" pos:end="11:12">*</operator><operator pos:start="11:13" pos:end="11:13">*</operator><name pos:start="11:14" pos:end="11:16">buf</name> <operator pos:start="11:18" pos:end="11:19">==</operator> <literal type="char" pos:start="11:21" pos:end="11:23">'['</literal></expr>)</condition> <block pos:start="11:26" pos:end="57:5">{<block_content pos:start="13:9" pos:end="55:14">

        <decl_stmt pos:start="13:9" pos:end="13:51"><decl pos:start="13:9" pos:end="13:50"><type pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:12">char</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">name</name> <init pos:start="13:20" pos:end="13:50">= <expr pos:start="13:22" pos:end="13:50"><call pos:start="13:22" pos:end="13:50"><name pos:start="13:22" pos:end="13:36">parse_link_name</name><argument_list pos:start="13:37" pos:end="13:50">(<argument pos:start="13:38" pos:end="13:40"><expr pos:start="13:38" pos:end="13:40"><name pos:start="13:38" pos:end="13:40">buf</name></expr></argument>, <argument pos:start="13:43" pos:end="13:49"><expr pos:start="13:43" pos:end="13:49"><name pos:start="13:43" pos:end="13:49">log_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:29"><decl pos:start="15:9" pos:end="15:28"><type pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:21">AVFilterInOut</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:28">match</name></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="21:22"><if pos:start="19:9" pos:end="21:22">if <condition pos:start="19:12" pos:end="19:18">(<expr pos:start="19:13" pos:end="19:17"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:17">name</name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:22"><block_content pos:start="21:13" pos:end="21:22">

            <return pos:start="21:13" pos:end="21:22">return <expr pos:start="21:20" pos:end="21:21"><operator pos:start="21:20" pos:end="21:20">-</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="25:9" pos:end="25:70">/* First check if the label is not in the open_outputs list */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:13">match</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:49"><name pos:start="27:17" pos:end="27:29">extract_inout</name><argument_list pos:start="27:30" pos:end="27:49">(<argument pos:start="27:31" pos:end="27:34"><expr pos:start="27:31" pos:end="27:34"><name pos:start="27:31" pos:end="27:34">name</name></expr></argument>, <argument pos:start="27:37" pos:end="27:48"><expr pos:start="27:37" pos:end="27:48"><name pos:start="27:37" pos:end="27:48">open_outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="45:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:18">(<expr pos:start="31:13" pos:end="31:17"><name pos:start="31:13" pos:end="31:17">match</name></expr>)</condition> <block pos:start="31:20" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:26">

            <expr_stmt pos:start="33:13" pos:end="33:26"><expr pos:start="33:13" pos:end="33:25"><call pos:start="33:13" pos:end="33:25"><name pos:start="33:13" pos:end="33:19">av_free</name><argument_list pos:start="33:20" pos:end="33:25">(<argument pos:start="33:21" pos:end="33:24"><expr pos:start="33:21" pos:end="33:24"><name pos:start="33:21" pos:end="33:24">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="45:9">else <block pos:start="35:16" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:33">

            <comment type="block" pos:start="37:13" pos:end="37:56">/* Not in the list, so add it as an input */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:54"><expr pos:start="39:13" pos:end="39:53"><name pos:start="39:13" pos:end="39:17">match</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="39:53"><name pos:start="39:21" pos:end="39:30">av_mallocz</name><argument_list pos:start="39:31" pos:end="39:53">(<argument pos:start="39:32" pos:end="39:52"><expr pos:start="39:32" pos:end="39:52"><sizeof pos:start="39:32" pos:end="39:52">sizeof<argument_list pos:start="39:38" pos:end="39:52">(<argument pos:start="39:39" pos:end="39:51"><expr pos:start="39:39" pos:end="39:51"><name pos:start="39:39" pos:end="39:51">AVFilterInOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:34"><expr pos:start="41:13" pos:end="41:33"><name pos:start="41:13" pos:end="41:23"><name pos:start="41:13" pos:end="41:17">match</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:23">name</name></name>    <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:33">name</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:33"><expr pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:17">match</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:26">pad_idx</name></name> <operator pos:start="43:28" pos:end="43:28">=</operator> <name pos:start="43:30" pos:end="43:32">pad</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><call pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:20">insert_inout</name><argument_list pos:start="49:21" pos:end="49:40">(<argument pos:start="49:22" pos:end="49:32"><expr pos:start="49:22" pos:end="49:32"><name pos:start="49:22" pos:end="49:32">curr_inputs</name></expr></argument>, <argument pos:start="49:35" pos:end="49:39"><expr pos:start="49:35" pos:end="49:39"><name pos:start="49:35" pos:end="49:39">match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:12">buf</name> <operator pos:start="53:14" pos:end="53:15">+=</operator> <call pos:start="53:17" pos:end="53:41"><name pos:start="53:17" pos:end="53:22">strspn</name><argument_list pos:start="53:23" pos:end="53:41">(<argument pos:start="53:24" pos:end="53:27"><expr pos:start="53:24" pos:end="53:27"><operator pos:start="53:24" pos:end="53:24">*</operator><name pos:start="53:25" pos:end="53:27">buf</name></expr></argument>, <argument pos:start="53:30" pos:end="53:40"><expr pos:start="53:30" pos:end="53:40"><name pos:start="53:30" pos:end="53:40">WHITESPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:14"><expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:11">pad</name><operator pos:start="55:12" pos:end="55:13">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="61:5" pos:end="61:15">return <expr pos:start="61:12" pos:end="61:14"><name pos:start="61:12" pos:end="61:14">pad</name></expr>;</return>

</block_content>}</block></function>
</unit>
