<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23684.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">long</name></type> <name pos:start="1:13" pos:end="1:30">do_rt_sigreturn_v1</name><parameter_list pos:start="1:31" pos:end="1:48">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:42">CPUARMState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:9" pos:end="79:17">

        <decl_stmt pos:start="5:9" pos:end="5:29"><decl pos:start="5:9" pos:end="5:28"><type pos:start="5:9" pos:end="5:17"><name pos:start="5:9" pos:end="5:17">abi_ulong</name></type> <name pos:start="5:19" pos:end="5:28">frame_addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7:9" pos:end="7:44"><decl pos:start="7:9" pos:end="7:43"><type pos:start="7:9" pos:end="7:31"><name pos:start="7:9" pos:end="7:29"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:29">rt_sigframe_v1</name></name> <modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:36">frame</name> <init pos:start="7:38" pos:end="7:43">= <expr pos:start="7:40" pos:end="7:43"><name pos:start="7:40" pos:end="7:43">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:26"><decl pos:start="9:9" pos:end="9:25"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">sigset_t</name></type> <name pos:start="9:18" pos:end="9:25">host_set</name></decl>;</decl_stmt>



	<comment type="block" pos:start="13:9" pos:end="21:11">/*

	 * Since we stacked the signal on a 64-bit boundary,

	 * then 'sp' should be word aligned here.  If it's

	 * not, then the user is trying to mess with us.

	 */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:35"><expr pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:18">frame_addr</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <name pos:start="23:22" pos:end="23:34"><name pos:start="23:22" pos:end="23:24">env</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:30">regs</name><index pos:start="23:31" pos:end="23:34">[<expr pos:start="23:32" pos:end="23:33"><literal type="number" pos:start="23:32" pos:end="23:33">13</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:27">(<expr pos:start="25:13" pos:end="25:26"><name pos:start="25:13" pos:end="25:22">frame_addr</name> <operator pos:start="25:24" pos:end="25:24">&amp;</operator> <literal type="number" pos:start="25:26" pos:end="25:26">7</literal></expr>)</condition> <block pos:start="25:29" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:26">

            <goto pos:start="27:13" pos:end="27:26">goto <name pos:start="27:18" pos:end="27:25">badframe</name>;</goto>

        </block_content>}</block></if></if_stmt>



	<if_stmt pos:start="33:9" pos:end="35:30"><if pos:start="33:9" pos:end="35:30">if <condition pos:start="33:12" pos:end="33:65">(<expr pos:start="33:13" pos:end="33:64"><operator pos:start="33:13" pos:end="33:13">!</operator><call pos:start="33:14" pos:end="33:64"><name pos:start="33:14" pos:end="33:29">lock_user_struct</name><argument_list pos:start="33:30" pos:end="33:64">(<argument pos:start="33:31" pos:end="33:41"><expr pos:start="33:31" pos:end="33:41"><name pos:start="33:31" pos:end="33:41">VERIFY_READ</name></expr></argument>, <argument pos:start="33:44" pos:end="33:48"><expr pos:start="33:44" pos:end="33:48"><name pos:start="33:44" pos:end="33:48">frame</name></expr></argument>, <argument pos:start="33:51" pos:end="33:60"><expr pos:start="33:51" pos:end="33:60"><name pos:start="33:51" pos:end="33:60">frame_addr</name></expr></argument>, <argument pos:start="33:63" pos:end="33:63"><expr pos:start="33:63" pos:end="33:63"><literal type="number" pos:start="33:63" pos:end="33:63">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:30"><block_content pos:start="35:17" pos:end="35:30">

                <goto pos:start="35:17" pos:end="35:30">goto <name pos:start="35:22" pos:end="35:29">badframe</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:65"><expr pos:start="39:9" pos:end="39:64"><call pos:start="39:9" pos:end="39:64"><name pos:start="39:9" pos:end="39:29">target_to_host_sigset</name><argument_list pos:start="39:30" pos:end="39:64">(<argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><operator pos:start="39:31" pos:end="39:31">&amp;</operator><name pos:start="39:32" pos:end="39:39">host_set</name></expr></argument>, <argument pos:start="39:42" pos:end="39:63"><expr pos:start="39:42" pos:end="39:63"><operator pos:start="39:42" pos:end="39:42">&amp;</operator><name pos:start="39:43" pos:end="39:63"><name pos:start="39:43" pos:end="39:47">frame</name><operator pos:start="39:48" pos:end="39:49">-&gt;</operator><name pos:start="39:50" pos:end="39:51">uc</name><operator pos:start="39:52" pos:end="39:52">.</operator><name pos:start="39:53" pos:end="39:63">tuc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:50"><expr pos:start="41:9" pos:end="41:49"><call pos:start="41:9" pos:end="41:49"><name pos:start="41:9" pos:end="41:19">sigprocmask</name><argument_list pos:start="41:20" pos:end="41:49">(<argument pos:start="41:21" pos:end="41:31"><expr pos:start="41:21" pos:end="41:31"><name pos:start="41:21" pos:end="41:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="41:34" pos:end="41:42"><expr pos:start="41:34" pos:end="41:42"><operator pos:start="41:34" pos:end="41:34">&amp;</operator><name pos:start="41:35" pos:end="41:42">host_set</name></expr></argument>, <argument pos:start="41:45" pos:end="41:48"><expr pos:start="41:45" pos:end="41:48"><name pos:start="41:45" pos:end="41:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="45:9" pos:end="47:30"><if pos:start="45:9" pos:end="47:30">if <condition pos:start="45:12" pos:end="45:61">(<expr pos:start="45:13" pos:end="45:60"><call pos:start="45:13" pos:end="45:60"><name pos:start="45:13" pos:end="45:30">restore_sigcontext</name><argument_list pos:start="45:31" pos:end="45:60">(<argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">env</name></expr></argument>, <argument pos:start="45:37" pos:end="45:59"><expr pos:start="45:37" pos:end="45:59"><operator pos:start="45:37" pos:end="45:37">&amp;</operator><name pos:start="45:38" pos:end="45:59"><name pos:start="45:38" pos:end="45:42">frame</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:46">uc</name><operator pos:start="45:47" pos:end="45:47">.</operator><name pos:start="45:48" pos:end="45:59">tuc_mcontext</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:30"><block_content pos:start="47:17" pos:end="47:30">

		<goto pos:start="47:17" pos:end="47:30">goto <name pos:start="47:22" pos:end="47:29">badframe</name>;</goto></block_content></block></if></if_stmt>



	<if_stmt pos:start="51:9" pos:end="66:0"><if pos:start="51:9" pos:end="66:0">if <condition pos:start="51:12" pos:end="51:128">(<expr pos:start="51:13" pos:end="51:127"><call pos:start="51:13" pos:end="51:116"><name pos:start="51:13" pos:end="51:26">do_sigaltstack</name><argument_list pos:start="51:27" pos:end="51:116">(<argument pos:start="51:28" pos:end="51:85"><expr pos:start="51:28" pos:end="51:85"><name pos:start="51:28" pos:end="51:37">frame_addr</name> <operator pos:start="51:39" pos:end="51:39">+</operator> <call pos:start="51:41" pos:end="51:85"><name pos:start="51:41" pos:end="51:48">offsetof</name><argument_list pos:start="51:49" pos:end="51:85">(<argument pos:start="51:50" pos:end="51:70"><expr pos:start="51:50" pos:end="51:70">struct <name pos:start="51:57" pos:end="51:70">rt_sigframe_v1</name></expr></argument>, <argument pos:start="51:73" pos:end="51:84"><expr pos:start="51:73" pos:end="51:84"><name pos:start="51:73" pos:end="51:84"><name pos:start="51:73" pos:end="51:74">uc</name><operator pos:start="51:75" pos:end="51:75">.</operator><name pos:start="51:76" pos:end="51:84">tuc_stack</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:88" pos:end="51:88"><expr pos:start="51:88" pos:end="51:88"><literal type="number" pos:start="51:88" pos:end="51:88">0</literal></expr></argument>, <argument pos:start="51:91" pos:end="51:115"><expr pos:start="51:91" pos:end="51:115"><call pos:start="51:91" pos:end="51:115"><name pos:start="51:91" pos:end="51:110">get_sp_from_cpustate</name><argument_list pos:start="51:111" pos:end="51:115">(<argument pos:start="51:112" pos:end="51:114"><expr pos:start="51:112" pos:end="51:114"><name pos:start="51:112" pos:end="51:114">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="51:118" pos:end="51:119">==</operator> <operator pos:start="51:121" pos:end="51:121">-</operator><name pos:start="51:122" pos:end="51:127">EFAULT</name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="66:0"><block_content pos:start="53:17" pos:end="66:0">

		<goto pos:start="53:17" pos:end="66:0">goto <name pos:start="53:22" pos:end="53:29">badframe</name>;</goto></block_content></block></if></if_stmt>



<cpp:if pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:5"><literal type="number" pos:start="57:5" pos:end="57:5">0</literal></expr></cpp:if>

	<comment type="block" pos:start="59:9" pos:end="59:51">/* Send SIGTRAP if we're single-stepping */</comment>

	if (ptrace_cancel_bpt(current))

		send_sig(SIGTRAP, current, 1);

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

	<expr_stmt pos:start="67:9" pos:end="67:49"><expr pos:start="67:9" pos:end="67:48"><call pos:start="67:9" pos:end="67:48"><name pos:start="67:9" pos:end="67:26">unlock_user_struct</name><argument_list pos:start="67:27" pos:end="67:48">(<argument pos:start="67:28" pos:end="67:32"><expr pos:start="67:28" pos:end="67:32"><name pos:start="67:28" pos:end="67:32">frame</name></expr></argument>, <argument pos:start="67:35" pos:end="67:44"><expr pos:start="67:35" pos:end="67:44"><name pos:start="67:35" pos:end="67:44">frame_addr</name></expr></argument>, <argument pos:start="67:47" pos:end="67:47"><expr pos:start="67:47" pos:end="67:47"><literal type="number" pos:start="67:47" pos:end="67:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="69:9" pos:end="69:28">return <expr pos:start="69:16" pos:end="69:27"><name pos:start="69:16" pos:end="69:27"><name pos:start="69:16" pos:end="69:18">env</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:24">regs</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><literal type="number" pos:start="69:26" pos:end="69:26">0</literal></expr>]</index></name></expr>;</return>



<label pos:start="73:1" pos:end="73:9"><name pos:start="73:1" pos:end="73:8">badframe</name>:</label>

	<expr_stmt pos:start="75:9" pos:end="75:49"><expr pos:start="75:9" pos:end="75:48"><call pos:start="75:9" pos:end="75:48"><name pos:start="75:9" pos:end="75:26">unlock_user_struct</name><argument_list pos:start="75:27" pos:end="75:48">(<argument pos:start="75:28" pos:end="75:32"><expr pos:start="75:28" pos:end="75:32"><name pos:start="75:28" pos:end="75:32">frame</name></expr></argument>, <argument pos:start="75:35" pos:end="75:44"><expr pos:start="75:35" pos:end="75:44"><name pos:start="75:35" pos:end="75:44">frame_addr</name></expr></argument>, <argument pos:start="75:47" pos:end="75:47"><expr pos:start="75:47" pos:end="75:47"><literal type="number" pos:start="75:47" pos:end="75:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:50"><expr pos:start="77:9" pos:end="77:49"><call pos:start="77:9" pos:end="77:49"><name pos:start="77:9" pos:end="77:17">force_sig</name><argument_list pos:start="77:18" pos:end="77:49">(<argument pos:start="77:19" pos:end="77:32"><expr pos:start="77:19" pos:end="77:32"><name pos:start="77:19" pos:end="77:32">TARGET_SIGSEGV</name></expr></argument> <comment type="block" pos:start="77:34" pos:end="77:48">/* , current */</comment>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="79:9" pos:end="79:17">return <expr pos:start="79:16" pos:end="79:16"><literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
