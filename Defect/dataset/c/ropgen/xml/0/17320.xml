<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17320.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:61"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vmdk_parse_extents</name><parameter_list pos:start="1:30" pos:end="3:35">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">desc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:68"><decl pos:start="1:49" pos:end="1:68"><type pos:start="1:49" pos:end="1:68"><name pos:start="1:49" pos:end="1:64">BlockDriverState</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:34"><decl pos:start="3:9" pos:end="3:34"><type pos:start="3:9" pos:end="3:34"><specifier pos:start="3:9" pos:end="3:13">const</specifier> <name pos:start="3:15" pos:end="3:18">char</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:34">desc_file_path</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:61">{<block_content pos:start="7:5" pos:end="125:61">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:19"><name pos:start="9:10" pos:end="9:15">access</name><index pos:start="9:16" pos:end="9:19">[<expr pos:start="9:17" pos:end="9:18"><literal type="number" pos:start="9:17" pos:end="9:18">11</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:17"><name pos:start="11:10" pos:end="11:13">type</name><index pos:start="11:14" pos:end="11:17">[<expr pos:start="11:15" pos:end="11:16"><literal type="number" pos:start="11:15" pos:end="11:16">11</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:14">fname</name><index pos:start="13:15" pos:end="13:19">[<expr pos:start="13:16" pos:end="13:18"><literal type="number" pos:start="13:16" pos:end="13:18">512</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:17">p</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">desc</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:19">sectors</name> <init pos:start="17:21" pos:end="17:23">= <expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:23">flat_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:30"><name pos:start="21:10" pos:end="21:20">extent_path</name><index pos:start="21:21" pos:end="21:30">[<expr pos:start="21:22" pos:end="21:29"><name pos:start="21:22" pos:end="21:29">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:34"><decl pos:start="23:5" pos:end="23:33"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:20">BlockDriverState</name> <modifier pos:start="23:22" pos:end="23:22">*</modifier></type><name pos:start="23:23" pos:end="23:33">extent_file</name></decl>;</decl_stmt>



    <while pos:start="27:5" pos:end="125:61">while <condition pos:start="27:11" pos:end="27:14">(<expr pos:start="27:12" pos:end="27:13"><operator pos:start="27:12" pos:end="27:12">*</operator><name pos:start="27:13" pos:end="27:13">p</name></expr>)</condition> <block pos:start="27:16" pos:end="125:61">{<block_content pos:start="39:9" pos:end="125:61">

        <comment type="block" pos:start="29:9" pos:end="37:11">/* parse extent line:

         * RW [size in sectors] FLAT "file-name.vmdk" OFFSET

         * or

         * RW [size in sectors] SPARSE "file-name.vmdk"

         */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:25"><expr pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:19">flat_offset</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <operator pos:start="39:23" pos:end="39:23">-</operator><literal type="number" pos:start="39:24" pos:end="39:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="43:61"><expr pos:start="41:9" pos:end="43:60"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="43:60"><name pos:start="41:15" pos:end="41:20">sscanf</name><argument_list pos:start="41:21" pos:end="43:60">(<argument pos:start="41:22" pos:end="41:22"><expr pos:start="41:22" pos:end="41:22"><name pos:start="41:22" pos:end="41:22">p</name></expr></argument>, <argument pos:start="41:25" pos:end="41:74"><expr pos:start="41:25" pos:end="41:74"><literal type="string" pos:start="41:25" pos:end="41:32">"%10s %"</literal> <name pos:start="41:34" pos:end="41:39">SCNd64</name> <literal type="string" pos:start="41:41" pos:end="41:67">" %10s \"%511[^\n\r\"]\" %"</literal> <name pos:start="41:69" pos:end="41:74">SCNd64</name></expr></argument>,

                <argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">access</name></expr></argument>, <argument pos:start="43:25" pos:end="43:32"><expr pos:start="43:25" pos:end="43:32"><operator pos:start="43:25" pos:end="43:25">&amp;</operator><name pos:start="43:26" pos:end="43:32">sectors</name></expr></argument>, <argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">type</name></expr></argument>, <argument pos:start="43:41" pos:end="43:45"><expr pos:start="43:41" pos:end="43:45"><name pos:start="43:41" pos:end="43:45">fname</name></expr></argument>, <argument pos:start="43:48" pos:end="43:59"><expr pos:start="43:48" pos:end="43:59"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:59">flat_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="61:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:44">(<expr pos:start="45:13" pos:end="45:43"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">4</literal> <operator pos:start="45:21" pos:end="45:22">||</operator> <call pos:start="45:24" pos:end="45:43"><name pos:start="45:24" pos:end="45:29">strcmp</name><argument_list pos:start="45:30" pos:end="45:43">(<argument pos:start="45:31" pos:end="45:36"><expr pos:start="45:31" pos:end="45:36"><name pos:start="45:31" pos:end="45:36">access</name></expr></argument>, <argument pos:start="45:39" pos:end="45:42"><expr pos:start="45:39" pos:end="45:42"><literal type="string" pos:start="45:39" pos:end="45:42">"RW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:46" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:27">

            <goto pos:start="47:13" pos:end="47:27">goto <name pos:start="47:18" pos:end="47:26">next_line</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="57:9">else if <condition pos:start="49:19" pos:end="49:41">(<expr pos:start="49:20" pos:end="49:40"><operator pos:start="49:20" pos:end="49:20">!</operator><call pos:start="49:21" pos:end="49:40"><name pos:start="49:21" pos:end="49:26">strcmp</name><argument_list pos:start="49:27" pos:end="49:40">(<argument pos:start="49:28" pos:end="49:31"><expr pos:start="49:28" pos:end="49:31"><name pos:start="49:28" pos:end="49:31">type</name></expr></argument>, <argument pos:start="49:34" pos:end="49:39"><expr pos:start="49:34" pos:end="49:39"><literal type="string" pos:start="49:34" pos:end="49:39">"FLAT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:43" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:13">

            <if_stmt pos:start="51:13" pos:end="55:13"><if pos:start="51:13" pos:end="55:13">if <condition pos:start="51:16" pos:end="51:44">(<expr pos:start="51:17" pos:end="51:43"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:22">!=</operator> <literal type="number" pos:start="51:24" pos:end="51:24">5</literal> <operator pos:start="51:26" pos:end="51:27">||</operator> <name pos:start="51:29" pos:end="51:39">flat_offset</name> <operator pos:start="51:41" pos:end="51:41">&lt;</operator> <literal type="number" pos:start="51:43" pos:end="51:43">0</literal></expr>)</condition> <block pos:start="51:46" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:31">

                <return pos:start="53:17" pos:end="53:31">return <expr pos:start="53:24" pos:end="53:30"><operator pos:start="53:24" pos:end="53:24">-</operator><name pos:start="53:25" pos:end="53:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="57:11" pos:end="61:9">else if <condition pos:start="57:19" pos:end="57:28">(<expr pos:start="57:20" pos:end="57:27"><name pos:start="57:20" pos:end="57:22">ret</name> <operator pos:start="57:24" pos:end="57:25">!=</operator> <literal type="number" pos:start="57:27" pos:end="57:27">4</literal></expr>)</condition> <block pos:start="57:30" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:27">

            <return pos:start="59:13" pos:end="59:27">return <expr pos:start="59:20" pos:end="59:26"><operator pos:start="59:20" pos:end="59:20">-</operator><name pos:start="59:21" pos:end="59:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="69:35">(<expr pos:start="65:13" pos:end="69:34"><name pos:start="65:13" pos:end="65:19">sectors</name> <operator pos:start="65:21" pos:end="65:22">&lt;=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">0</literal> <operator pos:start="65:26" pos:end="65:27">||</operator>

            <operator pos:start="67:13" pos:end="67:13">(</operator><call pos:start="67:14" pos:end="67:33"><name pos:start="67:14" pos:end="67:19">strcmp</name><argument_list pos:start="67:20" pos:end="67:33">(<argument pos:start="67:21" pos:end="67:24"><expr pos:start="67:21" pos:end="67:24"><name pos:start="67:21" pos:end="67:24">type</name></expr></argument>, <argument pos:start="67:27" pos:end="67:32"><expr pos:start="67:27" pos:end="67:32"><literal type="string" pos:start="67:27" pos:end="67:32">"FLAT"</literal></expr></argument>)</argument_list></call> <operator pos:start="67:35" pos:end="67:36">&amp;&amp;</operator> <call pos:start="67:38" pos:end="67:59"><name pos:start="67:38" pos:end="67:43">strcmp</name><argument_list pos:start="67:44" pos:end="67:59">(<argument pos:start="67:45" pos:end="67:48"><expr pos:start="67:45" pos:end="67:48"><name pos:start="67:45" pos:end="67:48">type</name></expr></argument>, <argument pos:start="67:51" pos:end="67:58"><expr pos:start="67:51" pos:end="67:58"><literal type="string" pos:start="67:51" pos:end="67:58">"SPARSE"</literal></expr></argument>)</argument_list></call><operator pos:start="67:60" pos:end="67:60">)</operator> <operator pos:start="67:62" pos:end="67:63">||</operator>

            <operator pos:start="69:13" pos:end="69:13">(</operator><call pos:start="69:14" pos:end="69:33"><name pos:start="69:14" pos:end="69:19">strcmp</name><argument_list pos:start="69:20" pos:end="69:33">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">access</name></expr></argument>, <argument pos:start="69:29" pos:end="69:32"><expr pos:start="69:29" pos:end="69:32"><literal type="string" pos:start="69:29" pos:end="69:32">"RW"</literal></expr></argument>)</argument_list></call><operator pos:start="69:34" pos:end="69:34">)</operator></expr>)</condition> <block pos:start="69:37" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:27">

            <goto pos:start="71:13" pos:end="71:27">goto <name pos:start="71:18" pos:end="71:26">next_line</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="79:39"><expr pos:start="77:9" pos:end="79:38"><call pos:start="77:9" pos:end="79:38"><name pos:start="77:9" pos:end="77:20">path_combine</name><argument_list pos:start="77:21" pos:end="79:38">(<argument pos:start="77:22" pos:end="77:32"><expr pos:start="77:22" pos:end="77:32"><name pos:start="77:22" pos:end="77:32">extent_path</name></expr></argument>, <argument pos:start="77:35" pos:end="77:53"><expr pos:start="77:35" pos:end="77:53"><sizeof pos:start="77:35" pos:end="77:53">sizeof<argument_list pos:start="77:41" pos:end="77:53">(<argument pos:start="77:42" pos:end="77:52"><expr pos:start="77:42" pos:end="77:52"><name pos:start="77:42" pos:end="77:52">extent_path</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="79:17" pos:end="79:30"><expr pos:start="79:17" pos:end="79:30"><name pos:start="79:17" pos:end="79:30">desc_file_path</name></expr></argument>, <argument pos:start="79:33" pos:end="79:37"><expr pos:start="79:33" pos:end="79:37"><name pos:start="79:33" pos:end="79:37">fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:78"><expr pos:start="81:9" pos:end="81:77"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:77"><name pos:start="81:15" pos:end="81:28">bdrv_file_open</name><argument_list pos:start="81:29" pos:end="81:77">(<argument pos:start="81:30" pos:end="81:41"><expr pos:start="81:30" pos:end="81:41"><operator pos:start="81:30" pos:end="81:30">&amp;</operator><name pos:start="81:31" pos:end="81:41">extent_file</name></expr></argument>, <argument pos:start="81:44" pos:end="81:54"><expr pos:start="81:44" pos:end="81:54"><name pos:start="81:44" pos:end="81:54">extent_path</name></expr></argument>, <argument pos:start="81:57" pos:end="81:60"><expr pos:start="81:57" pos:end="81:60"><name pos:start="81:57" pos:end="81:60">NULL</name></expr></argument>, <argument pos:start="81:63" pos:end="81:76"><expr pos:start="81:63" pos:end="81:76"><name pos:start="81:63" pos:end="81:76"><name pos:start="81:63" pos:end="81:64">bs</name><operator pos:start="81:65" pos:end="81:66">-&gt;</operator><name pos:start="81:67" pos:end="81:76">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:16">(<expr pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">ret</name></expr>)</condition> <block pos:start="83:18" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:23">

            <return pos:start="85:13" pos:end="85:23">return <expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="91:9" pos:end="91:35">/* save to extents array */</comment>

        <if_stmt pos:start="93:9" pos:end="125:61"><if pos:start="93:9" pos:end="107:9">if <condition pos:start="93:12" pos:end="93:34">(<expr pos:start="93:13" pos:end="93:33"><operator pos:start="93:13" pos:end="93:13">!</operator><call pos:start="93:14" pos:end="93:33"><name pos:start="93:14" pos:end="93:19">strcmp</name><argument_list pos:start="93:20" pos:end="93:33">(<argument pos:start="93:21" pos:end="93:24"><expr pos:start="93:21" pos:end="93:24"><name pos:start="93:21" pos:end="93:24">type</name></expr></argument>, <argument pos:start="93:27" pos:end="93:32"><expr pos:start="93:27" pos:end="93:32"><literal type="string" pos:start="93:27" pos:end="93:32">"FLAT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:36" pos:end="107:9">{<block_content pos:start="97:13" pos:end="105:57">

            <comment type="block" pos:start="95:13" pos:end="95:29">/* FLAT extent */</comment>

            <decl_stmt pos:start="97:13" pos:end="97:31"><decl pos:start="97:13" pos:end="97:30"><type pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:22">VmdkExtent</name> <modifier pos:start="97:24" pos:end="97:24">*</modifier></type><name pos:start="97:25" pos:end="97:30">extent</name></decl>;</decl_stmt>



            <expr_stmt pos:start="101:13" pos:end="103:49"><expr pos:start="101:13" pos:end="103:48"><name pos:start="101:13" pos:end="101:18">extent</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <call pos:start="101:22" pos:end="103:48"><name pos:start="101:22" pos:end="101:36">vmdk_add_extent</name><argument_list pos:start="101:37" pos:end="103:48">(<argument pos:start="101:38" pos:end="101:39"><expr pos:start="101:38" pos:end="101:39"><name pos:start="101:38" pos:end="101:39">bs</name></expr></argument>, <argument pos:start="101:42" pos:end="101:52"><expr pos:start="101:42" pos:end="101:52"><name pos:start="101:42" pos:end="101:52">extent_file</name></expr></argument>, <argument pos:start="101:55" pos:end="101:58"><expr pos:start="101:55" pos:end="101:58"><name pos:start="101:55" pos:end="101:58">true</name></expr></argument>, <argument pos:start="101:61" pos:end="101:67"><expr pos:start="101:61" pos:end="101:67"><name pos:start="101:61" pos:end="101:67">sectors</name></expr></argument>,

                            <argument pos:start="103:29" pos:end="103:29"><expr pos:start="103:29" pos:end="103:29"><literal type="number" pos:start="103:29" pos:end="103:29">0</literal></expr></argument>, <argument pos:start="103:32" pos:end="103:32"><expr pos:start="103:32" pos:end="103:32"><literal type="number" pos:start="103:32" pos:end="103:32">0</literal></expr></argument>, <argument pos:start="103:35" pos:end="103:35"><expr pos:start="103:35" pos:end="103:35"><literal type="number" pos:start="103:35" pos:end="103:35">0</literal></expr></argument>, <argument pos:start="103:38" pos:end="103:38"><expr pos:start="103:38" pos:end="103:38"><literal type="number" pos:start="103:38" pos:end="103:38">0</literal></expr></argument>, <argument pos:start="103:41" pos:end="103:47"><expr pos:start="103:41" pos:end="103:47"><name pos:start="103:41" pos:end="103:47">sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:57"><expr pos:start="105:13" pos:end="105:56"><name pos:start="105:13" pos:end="105:37"><name pos:start="105:13" pos:end="105:18">extent</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:37">flat_start_offset</name></name> <operator pos:start="105:39" pos:end="105:39">=</operator> <name pos:start="105:41" pos:end="105:51">flat_offset</name> <operator pos:start="105:53" pos:end="105:54">&lt;&lt;</operator> <literal type="number" pos:start="105:56" pos:end="105:56">9</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="121:9">else if <condition pos:start="107:19" pos:end="107:43">(<expr pos:start="107:20" pos:end="107:42"><operator pos:start="107:20" pos:end="107:20">!</operator><call pos:start="107:21" pos:end="107:42"><name pos:start="107:21" pos:end="107:26">strcmp</name><argument_list pos:start="107:27" pos:end="107:42">(<argument pos:start="107:28" pos:end="107:31"><expr pos:start="107:28" pos:end="107:31"><name pos:start="107:28" pos:end="107:31">type</name></expr></argument>, <argument pos:start="107:34" pos:end="107:41"><expr pos:start="107:34" pos:end="107:41"><literal type="string" pos:start="107:34" pos:end="107:41">"SPARSE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:45" pos:end="121:9">{<block_content pos:start="111:13" pos:end="119:13">

            <comment type="block" pos:start="109:13" pos:end="109:31">/* SPARSE extent */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:68"><expr pos:start="111:13" pos:end="111:67"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:67"><name pos:start="111:19" pos:end="111:34">vmdk_open_sparse</name><argument_list pos:start="111:35" pos:end="111:67">(<argument pos:start="111:36" pos:end="111:37"><expr pos:start="111:36" pos:end="111:37"><name pos:start="111:36" pos:end="111:37">bs</name></expr></argument>, <argument pos:start="111:40" pos:end="111:50"><expr pos:start="111:40" pos:end="111:50"><name pos:start="111:40" pos:end="111:50">extent_file</name></expr></argument>, <argument pos:start="111:53" pos:end="111:66"><expr pos:start="111:53" pos:end="111:66"><name pos:start="111:53" pos:end="111:66"><name pos:start="111:53" pos:end="111:54">bs</name><operator pos:start="111:55" pos:end="111:56">-&gt;</operator><name pos:start="111:57" pos:end="111:66">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:20">(<expr pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:19">ret</name></expr>)</condition> <block pos:start="113:22" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:27">

                <expr_stmt pos:start="115:17" pos:end="115:41"><expr pos:start="115:17" pos:end="115:40"><call pos:start="115:17" pos:end="115:40"><name pos:start="115:17" pos:end="115:27">bdrv_delete</name><argument_list pos:start="115:28" pos:end="115:40">(<argument pos:start="115:29" pos:end="115:39"><expr pos:start="115:29" pos:end="115:39"><name pos:start="115:29" pos:end="115:39">extent_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="117:17" pos:end="117:27">return <expr pos:start="117:24" pos:end="117:26"><name pos:start="117:24" pos:end="117:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="125:61">else <block pos:start="121:16" pos:end="125:61">{<block_content pos:start="123:13" pos:end="125:61">

            <macro pos:start="123:13" pos:end="125:61"><name pos:start="123:13" pos:end="123:19">fprintf</name><argument_list pos:start="123:20" pos:end="125:61">(<argument pos:start="123:21" pos:end="123:26">stderr</argument>,

                <argument pos:start="125:17" pos:end="125:61"><literal type="string" pos:start="125:17" pos:end="125:57">"VMDK: Not supported extent type \"%s\"""</literal>.\n<literal type="string" pos:start="125:61" pos:end="125:61">"</literal></argument></argument_list></macro></block_content></block></else></if_stmt></block_content></block></while></block_content></block></function>, type);

            return -ENOTSUP;

        }

next_line:

        /* move to next line */

        while (*p &amp;&amp; *p != '\n') {

            p++;

        }

        p++;

    }

    return 0;

}
</unit>
