<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22722.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">avi_extract_stream_metadata</name><parameter_list pos:start="1:39" pos:end="1:72">(<parameter pos:start="1:40" pos:end="1:57"><decl pos:start="1:40" pos:end="1:57"><type pos:start="1:40" pos:end="1:57"><name pos:start="1:40" pos:end="1:54">AVFormatContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:67">AVStream</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">st</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18">GetByteContext</name></type> <name pos:start="5:20" pos:end="5:21">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:17">data</name> <init pos:start="7:19" pos:end="7:43">= <expr pos:start="7:21" pos:end="7:43"><name pos:start="7:21" pos:end="7:43"><name pos:start="7:21" pos:end="7:22">st</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:32">codecpar</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">extradata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">data_size</name> <init pos:start="9:19" pos:end="9:48">= <expr pos:start="9:21" pos:end="9:48"><name pos:start="9:21" pos:end="9:48"><name pos:start="9:21" pos:end="9:22">st</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:32">codecpar</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:48">extradata_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">tag</name></decl>, <decl pos:start="11:14" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:19">offset</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:31">(<expr pos:start="15:9" pos:end="15:30"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:13">data</name> <operator pos:start="15:15" pos:end="15:16">||</operator> <name pos:start="15:18" pos:end="15:26">data_size</name> <operator pos:start="15:28" pos:end="15:28">&lt;</operator> <literal type="number" pos:start="15:30" pos:end="15:30">8</literal></expr>)</condition> <block pos:start="15:33" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:35">

        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:43"><expr pos:start="23:5" pos:end="23:42"><call pos:start="23:5" pos:end="23:42"><name pos:start="23:5" pos:end="23:20">bytestream2_init</name><argument_list pos:start="23:21" pos:end="23:42">(<argument pos:start="23:22" pos:end="23:24"><expr pos:start="23:22" pos:end="23:24"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:24">gb</name></expr></argument>, <argument pos:start="23:27" pos:end="23:30"><expr pos:start="23:27" pos:end="23:30"><name pos:start="23:27" pos:end="23:30">data</name></expr></argument>, <argument pos:start="23:33" pos:end="23:41"><expr pos:start="23:33" pos:end="23:41"><name pos:start="23:33" pos:end="23:41">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:36"><expr pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:7">tag</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:35"><name pos:start="27:11" pos:end="27:30">bytestream2_get_le32</name><argument_list pos:start="27:31" pos:end="27:35">(<argument pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><operator pos:start="27:32" pos:end="27:32">&amp;</operator><name pos:start="27:33" pos:end="27:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="31:5" pos:end="67:5">switch <condition pos:start="31:12" pos:end="31:16">(<expr pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">tag</name></expr>)</condition> <block pos:start="31:18" pos:end="67:5">{<block_content pos:start="33:5" pos:end="65:14">

    <case pos:start="33:5" pos:end="33:35">case <expr pos:start="33:10" pos:end="33:34"><call pos:start="33:10" pos:end="33:34"><name pos:start="33:10" pos:end="33:14">MKTAG</name><argument_list pos:start="33:15" pos:end="33:34">(<argument pos:start="33:16" pos:end="33:18"><expr pos:start="33:16" pos:end="33:18"><literal type="char" pos:start="33:16" pos:end="33:18">'A'</literal></expr></argument>, <argument pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><literal type="char" pos:start="33:21" pos:end="33:23">'V'</literal></expr></argument>, <argument pos:start="33:26" pos:end="33:28"><expr pos:start="33:26" pos:end="33:28"><literal type="char" pos:start="33:26" pos:end="33:28">'I'</literal></expr></argument>, <argument pos:start="33:31" pos:end="33:33"><expr pos:start="33:31" pos:end="33:33"><literal type="char" pos:start="33:31" pos:end="33:33">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>

        <comment type="line" pos:start="35:9" pos:end="35:30">// skip 4 byte padding</comment>

        <expr_stmt pos:start="37:9" pos:end="37:33"><expr pos:start="37:9" pos:end="37:32"><call pos:start="37:9" pos:end="37:32"><name pos:start="37:9" pos:end="37:24">bytestream2_skip</name><argument_list pos:start="37:25" pos:end="37:32">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:28">gb</name></expr></argument>, <argument pos:start="37:31" pos:end="37:31"><expr pos:start="37:31" pos:end="37:31"><literal type="number" pos:start="37:31" pos:end="37:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:39"><expr pos:start="39:9" pos:end="39:38"><name pos:start="39:9" pos:end="39:14">offset</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:38"><name pos:start="39:18" pos:end="39:33">bytestream2_tell</name><argument_list pos:start="39:34" pos:end="39:38">(<argument pos:start="39:35" pos:end="39:37"><expr pos:start="39:35" pos:end="39:37"><operator pos:start="39:35" pos:end="39:35">&amp;</operator><name pos:start="39:36" pos:end="39:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:65"><expr pos:start="41:9" pos:end="41:64"><call pos:start="41:9" pos:end="41:64"><name pos:start="41:9" pos:end="41:24">bytestream2_init</name><argument_list pos:start="41:25" pos:end="41:64">(<argument pos:start="41:26" pos:end="41:28"><expr pos:start="41:26" pos:end="41:28"><operator pos:start="41:26" pos:end="41:26">&amp;</operator><name pos:start="41:27" pos:end="41:28">gb</name></expr></argument>, <argument pos:start="41:31" pos:end="41:43"><expr pos:start="41:31" pos:end="41:43"><name pos:start="41:31" pos:end="41:34">data</name> <operator pos:start="41:36" pos:end="41:36">+</operator> <name pos:start="41:38" pos:end="41:43">offset</name></expr></argument>, <argument pos:start="41:46" pos:end="41:63"><expr pos:start="41:46" pos:end="41:63"><name pos:start="41:46" pos:end="41:54">data_size</name> <operator pos:start="41:56" pos:end="41:56">-</operator> <name pos:start="41:58" pos:end="41:63">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="45:9" pos:end="45:65">// decode EXIF tags from IFD, AVI is always little-endian</comment>

        <return pos:start="47:9" pos:end="47:67">return <expr pos:start="47:16" pos:end="47:66"><call pos:start="47:16" pos:end="47:66"><name pos:start="47:16" pos:end="47:37">avpriv_exif_decode_ifd</name><argument_list pos:start="47:38" pos:end="47:66">(<argument pos:start="47:39" pos:end="47:39"><expr pos:start="47:39" pos:end="47:39"><name pos:start="47:39" pos:end="47:39">s</name></expr></argument>, <argument pos:start="47:42" pos:end="47:44"><expr pos:start="47:42" pos:end="47:44"><operator pos:start="47:42" pos:end="47:42">&amp;</operator><name pos:start="47:43" pos:end="47:44">gb</name></expr></argument>, <argument pos:start="47:47" pos:end="47:47"><expr pos:start="47:47" pos:end="47:47"><literal type="number" pos:start="47:47" pos:end="47:47">1</literal></expr></argument>, <argument pos:start="47:50" pos:end="47:50"><expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr></argument>, <argument pos:start="47:53" pos:end="47:65"><expr pos:start="47:53" pos:end="47:65"><operator pos:start="47:53" pos:end="47:53">&amp;</operator><name pos:start="47:54" pos:end="47:65"><name pos:start="47:54" pos:end="47:55">st</name><operator pos:start="47:56" pos:end="47:57">-&gt;</operator><name pos:start="47:58" pos:end="47:65">metadata</name></name></expr></argument>)</argument_list></call></expr>;</return>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:35">case <expr pos:start="51:10" pos:end="51:34"><call pos:start="51:10" pos:end="51:34"><name pos:start="51:10" pos:end="51:14">MKTAG</name><argument_list pos:start="51:15" pos:end="51:34">(<argument pos:start="51:16" pos:end="51:18"><expr pos:start="51:16" pos:end="51:18"><literal type="char" pos:start="51:16" pos:end="51:18">'C'</literal></expr></argument>, <argument pos:start="51:21" pos:end="51:23"><expr pos:start="51:21" pos:end="51:23"><literal type="char" pos:start="51:21" pos:end="51:23">'A'</literal></expr></argument>, <argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><literal type="char" pos:start="51:26" pos:end="51:28">'S'</literal></expr></argument>, <argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><literal type="char" pos:start="51:31" pos:end="51:33">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:77"><expr pos:start="53:9" pos:end="53:76"><call pos:start="53:9" pos:end="53:76"><name pos:start="53:9" pos:end="53:29">avpriv_request_sample</name><argument_list pos:start="53:30" pos:end="53:76">(<argument pos:start="53:31" pos:end="53:31"><expr pos:start="53:31" pos:end="53:31"><name pos:start="53:31" pos:end="53:31">s</name></expr></argument>, <argument pos:start="53:34" pos:end="53:70"><expr pos:start="53:34" pos:end="53:70"><literal type="string" pos:start="53:34" pos:end="53:70">"RIFF stream data tag type CASI (%u)"</literal></expr></argument>, <argument pos:start="53:73" pos:end="53:75"><expr pos:start="53:73" pos:end="53:75"><name pos:start="53:73" pos:end="53:75">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:35">case <expr pos:start="57:10" pos:end="57:34"><call pos:start="57:10" pos:end="57:34"><name pos:start="57:10" pos:end="57:14">MKTAG</name><argument_list pos:start="57:15" pos:end="57:34">(<argument pos:start="57:16" pos:end="57:18"><expr pos:start="57:16" pos:end="57:18"><literal type="char" pos:start="57:16" pos:end="57:18">'Z'</literal></expr></argument>, <argument pos:start="57:21" pos:end="57:23"><expr pos:start="57:21" pos:end="57:23"><literal type="char" pos:start="57:21" pos:end="57:23">'o'</literal></expr></argument>, <argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><literal type="char" pos:start="57:26" pos:end="57:28">'r'</literal></expr></argument>, <argument pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><literal type="char" pos:start="57:31" pos:end="57:33">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:77"><expr pos:start="59:9" pos:end="59:76"><call pos:start="59:9" pos:end="59:76"><name pos:start="59:9" pos:end="59:29">avpriv_request_sample</name><argument_list pos:start="59:30" pos:end="59:76">(<argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><name pos:start="59:31" pos:end="59:31">s</name></expr></argument>, <argument pos:start="59:34" pos:end="59:70"><expr pos:start="59:34" pos:end="59:70"><literal type="string" pos:start="59:34" pos:end="59:70">"RIFF stream data tag type Zora (%u)"</literal></expr></argument>, <argument pos:start="59:73" pos:end="59:75"><expr pos:start="59:73" pos:end="59:75"><name pos:start="59:73" pos:end="59:75">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <default pos:start="63:5" pos:end="63:12">default:</default>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
