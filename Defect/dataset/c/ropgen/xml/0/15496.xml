<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15496.c" pos:tabs="8"><function pos:start="1:1" pos:end="521:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">img_rebase</name><parameter_list pos:start="1:22" pos:end="1:44">(<parameter pos:start="1:23" pos:end="1:30"><decl pos:start="1:23" pos:end="1:30"><type pos:start="1:23" pos:end="1:30"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:30">argc</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="521:1">{<block_content pos:start="5:5" pos:end="519:13">

    <decl_stmt pos:start="5:5" pos:end="5:73"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>, <decl pos:start="5:27" pos:end="5:48"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:41">bs_old_backing</name> <init pos:start="5:43" pos:end="5:48">= <expr pos:start="5:45" pos:end="5:48"><name pos:start="5:45" pos:end="5:48">NULL</name></expr></init></decl>, <decl pos:start="5:51" pos:end="5:72"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:51" pos:end="5:51">*</modifier></type><name pos:start="5:52" pos:end="5:65">bs_new_backing</name> <init pos:start="5:67" pos:end="5:72">= <expr pos:start="5:69" pos:end="5:72"><name pos:start="5:69" pos:end="5:72">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:32">old_backing_drv</name></decl>, <decl pos:start="7:35" pos:end="7:50"><type ref="prev" pos:start="7:5" pos:end="7:17"><modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:50">new_backing_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">fmt</name></decl>, <decl pos:start="11:22" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:27">cache</name></decl>, <decl pos:start="11:30" pos:end="11:41"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:41">out_basefmt</name></decl>, <decl pos:start="11:44" pos:end="11:55"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:44" pos:end="11:44">*</modifier></type><name pos:start="11:45" pos:end="11:55">out_baseimg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">c</name></decl>, <decl pos:start="13:12" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:16">flags</name></decl>, <decl pos:start="13:19" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:21">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">unsafe</name> <init pos:start="15:16" pos:end="15:18">= <expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">progress</name> <init pos:start="17:18" pos:end="17:20">= <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:38">/* Parse commandline parameters */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:15"><expr pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:7">fmt</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:9">cache</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <name pos:start="25:13" pos:end="25:30">BDRV_DEFAULT_CACHE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:15">out_baseimg</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <name pos:start="27:19" pos:end="27:22">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:15">out_basefmt</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:22">NULL</name></expr>;</expr_stmt>

    <for pos:start="31:5" pos:end="89:5">for<control pos:start="31:8" pos:end="31:11">(<init pos:start="31:9" pos:end="31:9">;</init><condition pos:start="31:10" pos:end="31:10">;</condition><incr/>)</control> <block pos:start="31:13" pos:end="89:5">{<block_content pos:start="33:9" pos:end="87:9">

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:9">c</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:45"><name pos:start="33:13" pos:end="33:18">getopt</name><argument_list pos:start="33:19" pos:end="33:45">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">argc</name></expr></argument>, <argument pos:start="33:26" pos:end="33:29"><expr pos:start="33:26" pos:end="33:29"><name pos:start="33:26" pos:end="33:29">argv</name></expr></argument>, <argument pos:start="33:32" pos:end="33:44"><expr pos:start="33:32" pos:end="33:44"><literal type="string" pos:start="33:32" pos:end="33:44">"uhf:F:b:pt:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:20">(<expr pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:13">c</name> <operator pos:start="35:15" pos:end="35:16">==</operator> <operator pos:start="35:18" pos:end="35:18">-</operator><literal type="number" pos:start="35:19" pos:end="35:19">1</literal></expr>)</condition> <block pos:start="35:22" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:18">

            <break pos:start="37:13" pos:end="37:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="41:9" pos:end="87:9">switch<condition pos:start="41:15" pos:end="41:17">(<expr pos:start="41:16" pos:end="41:16"><name pos:start="41:16" pos:end="41:16">c</name></expr>)</condition> <block pos:start="41:19" pos:end="87:9">{<block_content pos:start="43:9" pos:end="85:18">

        <case pos:start="43:9" pos:end="43:17">case <expr pos:start="43:14" pos:end="43:16"><literal type="char" pos:start="43:14" pos:end="43:16">'?'</literal></expr>:</case>

        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="47:13" pos:end="47:19"><expr pos:start="47:13" pos:end="47:18"><call pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:16">help</name><argument_list pos:start="47:17" pos:end="47:18">()</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:21">return <expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">0</literal></expr>;</return>

        <case pos:start="51:9" pos:end="51:17">case <expr pos:start="51:14" pos:end="51:16"><literal type="char" pos:start="51:14" pos:end="51:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:25"><expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:15">fmt</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:17">case <expr pos:start="57:14" pos:end="57:16"><literal type="char" pos:start="57:14" pos:end="57:16">'F'</literal></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:33"><expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:23">out_basefmt</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:32">optarg</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:17">case <expr pos:start="63:14" pos:end="63:16"><literal type="char" pos:start="63:14" pos:end="63:16">'b'</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:23">out_baseimg</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:32">optarg</name></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:17">case <expr pos:start="69:14" pos:end="69:16"><literal type="char" pos:start="69:14" pos:end="69:16">'u'</literal></expr>:</case>

            <expr_stmt pos:start="71:13" pos:end="71:23"><expr pos:start="71:13" pos:end="71:22"><name pos:start="71:13" pos:end="71:18">unsafe</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <literal type="number" pos:start="71:22" pos:end="71:22">1</literal></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:17">case <expr pos:start="75:14" pos:end="75:16"><literal type="char" pos:start="75:14" pos:end="75:16">'p'</literal></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:25"><expr pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:20">progress</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <literal type="number" pos:start="77:24" pos:end="77:24">1</literal></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:17">case <expr pos:start="81:14" pos:end="81:16"><literal type="char" pos:start="81:14" pos:end="81:16">'t'</literal></expr>:</case>

            <expr_stmt pos:start="83:13" pos:end="83:27"><expr pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:17">cache</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:26">optarg</name></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:54">(<expr pos:start="93:9" pos:end="93:53"><operator pos:start="93:9" pos:end="93:9">(</operator><name pos:start="93:10" pos:end="93:15">optind</name> <operator pos:start="93:17" pos:end="93:18">&gt;=</operator> <name pos:start="93:20" pos:end="93:23">argc</name><operator pos:start="93:24" pos:end="93:24">)</operator> <operator pos:start="93:26" pos:end="93:27">||</operator> <operator pos:start="93:29" pos:end="93:29">(</operator><operator pos:start="93:30" pos:end="93:30">!</operator><name pos:start="93:31" pos:end="93:36">unsafe</name> <operator pos:start="93:38" pos:end="93:39">&amp;&amp;</operator> <operator pos:start="93:41" pos:end="93:41">!</operator><name pos:start="93:42" pos:end="93:52">out_baseimg</name><operator pos:start="93:53" pos:end="93:53">)</operator></expr>)</condition> <block pos:start="93:56" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:15">

        <expr_stmt pos:start="95:9" pos:end="95:15"><expr pos:start="95:9" pos:end="95:14"><call pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:12">help</name><argument_list pos:start="95:13" pos:end="95:14">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:30"><expr pos:start="99:5" pos:end="99:29"><name pos:start="99:5" pos:end="99:12">filename</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <name pos:start="99:16" pos:end="99:29"><name pos:start="99:16" pos:end="99:19">argv</name><index pos:start="99:20" pos:end="99:29">[<expr pos:start="99:21" pos:end="99:28"><name pos:start="99:21" pos:end="99:26">optind</name><operator pos:start="99:27" pos:end="99:28">++</operator></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:38"><expr pos:start="103:5" pos:end="103:37"><call pos:start="103:5" pos:end="103:37"><name pos:start="103:5" pos:end="103:22">qemu_progress_init</name><argument_list pos:start="103:23" pos:end="103:37">(<argument pos:start="103:24" pos:end="103:31"><expr pos:start="103:24" pos:end="103:31"><name pos:start="103:24" pos:end="103:31">progress</name></expr></argument>, <argument pos:start="103:34" pos:end="103:36"><expr pos:start="103:34" pos:end="103:36"><literal type="number" pos:start="103:34" pos:end="103:36">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:32"><expr pos:start="105:5" pos:end="105:31"><call pos:start="105:5" pos:end="105:31"><name pos:start="105:5" pos:end="105:23">qemu_progress_print</name><argument_list pos:start="105:24" pos:end="105:31">(<argument pos:start="105:25" pos:end="105:25"><expr pos:start="105:25" pos:end="105:25"><literal type="number" pos:start="105:25" pos:end="105:25">0</literal></expr></argument>, <argument pos:start="105:28" pos:end="105:30"><expr pos:start="105:28" pos:end="105:30"><literal type="number" pos:start="105:28" pos:end="105:30">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:59"><expr pos:start="109:5" pos:end="109:58"><name pos:start="109:5" pos:end="109:9">flags</name> <operator pos:start="109:11" pos:end="109:11">=</operator> <name pos:start="109:13" pos:end="109:23">BDRV_O_RDWR</name> <operator pos:start="109:25" pos:end="109:25">|</operator> <operator pos:start="109:27" pos:end="109:27">(</operator><ternary pos:start="109:28" pos:end="109:57"><condition pos:start="109:28" pos:end="109:35"><expr pos:start="109:28" pos:end="109:33"><name pos:start="109:28" pos:end="109:33">unsafe</name></expr> ?</condition><then pos:start="109:37" pos:end="109:53"> <expr pos:start="109:37" pos:end="109:53"><name pos:start="109:37" pos:end="109:53">BDRV_O_NO_BACKING</name></expr> </then><else pos:start="109:55" pos:end="109:57">: <expr pos:start="109:57" pos:end="109:57"><literal type="number" pos:start="109:57" pos:end="109:57">0</literal></expr></else></ternary><operator pos:start="109:58" pos:end="109:58">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:48"><expr pos:start="111:5" pos:end="111:47"><name pos:start="111:5" pos:end="111:7">ret</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <call pos:start="111:11" pos:end="111:47"><name pos:start="111:11" pos:end="111:32">bdrv_parse_cache_flags</name><argument_list pos:start="111:33" pos:end="111:47">(<argument pos:start="111:34" pos:end="111:38"><expr pos:start="111:34" pos:end="111:38"><name pos:start="111:34" pos:end="111:38">cache</name></expr></argument>, <argument pos:start="111:41" pos:end="111:46"><expr pos:start="111:41" pos:end="111:46"><operator pos:start="111:41" pos:end="111:41">&amp;</operator><name pos:start="111:42" pos:end="111:46">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:16">(<expr pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">&lt;</operator> <literal type="number" pos:start="113:15" pos:end="113:15">0</literal></expr>)</condition> <block pos:start="113:18" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:18">

        <expr_stmt pos:start="115:9" pos:end="115:56"><expr pos:start="115:9" pos:end="115:55"><call pos:start="115:9" pos:end="115:55"><name pos:start="115:9" pos:end="115:20">error_report</name><argument_list pos:start="115:21" pos:end="115:55">(<argument pos:start="115:22" pos:end="115:47"><expr pos:start="115:22" pos:end="115:47"><literal type="string" pos:start="115:22" pos:end="115:47">"Invalid cache option: %s"</literal></expr></argument>, <argument pos:start="115:50" pos:end="115:54"><expr pos:start="115:50" pos:end="115:54"><name pos:start="115:50" pos:end="115:54">cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:18">return <expr pos:start="117:16" pos:end="117:17"><operator pos:start="117:16" pos:end="117:16">-</operator><literal type="number" pos:start="117:17" pos:end="117:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="133:7">/*

     * Open the images.

     *

     * Ignore the old backing file for unsafe rebase in case we want to correct

     * the reference to a renamed or moved backing file.

     */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:45"><expr pos:start="135:5" pos:end="135:44"><name pos:start="135:5" pos:end="135:6">bs</name> <operator pos:start="135:8" pos:end="135:8">=</operator> <call pos:start="135:10" pos:end="135:44"><name pos:start="135:10" pos:end="135:22">bdrv_new_open</name><argument_list pos:start="135:23" pos:end="135:44">(<argument pos:start="135:24" pos:end="135:31"><expr pos:start="135:24" pos:end="135:31"><name pos:start="135:24" pos:end="135:31">filename</name></expr></argument>, <argument pos:start="135:34" pos:end="135:36"><expr pos:start="135:34" pos:end="135:36"><name pos:start="135:34" pos:end="135:36">fmt</name></expr></argument>, <argument pos:start="135:39" pos:end="135:43"><expr pos:start="135:39" pos:end="135:43"><name pos:start="135:39" pos:end="135:43">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="141:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:12">(<expr pos:start="137:9" pos:end="137:11"><operator pos:start="137:9" pos:end="137:9">!</operator><name pos:start="137:10" pos:end="137:11">bs</name></expr>)</condition> <block pos:start="137:14" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:17">

        <return pos:start="139:9" pos:end="139:17">return <expr pos:start="139:16" pos:end="139:16"><literal type="number" pos:start="139:16" pos:end="139:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:54">/* Find the right drivers for the backing files */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:27"><expr pos:start="147:5" pos:end="147:26"><name pos:start="147:5" pos:end="147:19">old_backing_drv</name> <operator pos:start="147:21" pos:end="147:21">=</operator> <name pos:start="147:23" pos:end="147:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:27"><expr pos:start="149:5" pos:end="149:26"><name pos:start="149:5" pos:end="149:19">new_backing_drv</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <name pos:start="149:23" pos:end="149:26">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="153:5" pos:end="167:5"><if pos:start="153:5" pos:end="167:5">if <condition pos:start="153:8" pos:end="153:49">(<expr pos:start="153:9" pos:end="153:48"><operator pos:start="153:9" pos:end="153:9">!</operator><name pos:start="153:10" pos:end="153:15">unsafe</name> <operator pos:start="153:17" pos:end="153:18">&amp;&amp;</operator> <name pos:start="153:20" pos:end="153:40"><name pos:start="153:20" pos:end="153:21">bs</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:37">backing_format</name><index pos:start="153:38" pos:end="153:40">[<expr pos:start="153:39" pos:end="153:39"><literal type="number" pos:start="153:39" pos:end="153:39">0</literal></expr>]</index></name> <operator pos:start="153:42" pos:end="153:43">!=</operator> <literal type="char" pos:start="153:45" pos:end="153:48">'\0'</literal></expr>)</condition> <block pos:start="153:51" pos:end="167:5">{<block_content pos:start="155:9" pos:end="165:9">

        <expr_stmt pos:start="155:9" pos:end="155:63"><expr pos:start="155:9" pos:end="155:62"><name pos:start="155:9" pos:end="155:23">old_backing_drv</name> <operator pos:start="155:25" pos:end="155:25">=</operator> <call pos:start="155:27" pos:end="155:62"><name pos:start="155:27" pos:end="155:42">bdrv_find_format</name><argument_list pos:start="155:43" pos:end="155:62">(<argument pos:start="155:44" pos:end="155:61"><expr pos:start="155:44" pos:end="155:61"><name pos:start="155:44" pos:end="155:61"><name pos:start="155:44" pos:end="155:45">bs</name><operator pos:start="155:46" pos:end="155:47">-&gt;</operator><name pos:start="155:48" pos:end="155:61">backing_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="165:9"><if pos:start="157:9" pos:end="165:9">if <condition pos:start="157:12" pos:end="157:36">(<expr pos:start="157:13" pos:end="157:35"><name pos:start="157:13" pos:end="157:27">old_backing_drv</name> <operator pos:start="157:29" pos:end="157:30">==</operator> <name pos:start="157:32" pos:end="157:35">NULL</name></expr>)</condition> <block pos:start="157:38" pos:end="165:9">{<block_content pos:start="159:13" pos:end="163:21">

            <expr_stmt pos:start="159:13" pos:end="159:74"><expr pos:start="159:13" pos:end="159:73"><call pos:start="159:13" pos:end="159:73"><name pos:start="159:13" pos:end="159:24">error_report</name><argument_list pos:start="159:25" pos:end="159:73">(<argument pos:start="159:26" pos:end="159:52"><expr pos:start="159:26" pos:end="159:52"><literal type="string" pos:start="159:26" pos:end="159:52">"Invalid format name: '%s'"</literal></expr></argument>, <argument pos:start="159:55" pos:end="159:72"><expr pos:start="159:55" pos:end="159:72"><name pos:start="159:55" pos:end="159:72"><name pos:start="159:55" pos:end="159:56">bs</name><operator pos:start="159:57" pos:end="159:58">-&gt;</operator><name pos:start="159:59" pos:end="159:72">backing_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:21"><expr pos:start="161:13" pos:end="161:20"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <operator pos:start="161:19" pos:end="161:19">-</operator><literal type="number" pos:start="161:20" pos:end="161:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:21">goto <name pos:start="163:18" pos:end="163:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="171:5" pos:end="185:5"><if pos:start="171:5" pos:end="185:5">if <condition pos:start="171:8" pos:end="171:28">(<expr pos:start="171:9" pos:end="171:27"><name pos:start="171:9" pos:end="171:19">out_basefmt</name> <operator pos:start="171:21" pos:end="171:22">!=</operator> <name pos:start="171:24" pos:end="171:27">NULL</name></expr>)</condition> <block pos:start="171:30" pos:end="185:5">{<block_content pos:start="173:9" pos:end="183:9">

        <expr_stmt pos:start="173:9" pos:end="173:56"><expr pos:start="173:9" pos:end="173:55"><name pos:start="173:9" pos:end="173:23">new_backing_drv</name> <operator pos:start="173:25" pos:end="173:25">=</operator> <call pos:start="173:27" pos:end="173:55"><name pos:start="173:27" pos:end="173:42">bdrv_find_format</name><argument_list pos:start="173:43" pos:end="173:55">(<argument pos:start="173:44" pos:end="173:54"><expr pos:start="173:44" pos:end="173:54"><name pos:start="173:44" pos:end="173:54">out_basefmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="183:9"><if pos:start="175:9" pos:end="183:9">if <condition pos:start="175:12" pos:end="175:36">(<expr pos:start="175:13" pos:end="175:35"><name pos:start="175:13" pos:end="175:27">new_backing_drv</name> <operator pos:start="175:29" pos:end="175:30">==</operator> <name pos:start="175:32" pos:end="175:35">NULL</name></expr>)</condition> <block pos:start="175:38" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:21">

            <expr_stmt pos:start="177:13" pos:end="177:67"><expr pos:start="177:13" pos:end="177:66"><call pos:start="177:13" pos:end="177:66"><name pos:start="177:13" pos:end="177:24">error_report</name><argument_list pos:start="177:25" pos:end="177:66">(<argument pos:start="177:26" pos:end="177:52"><expr pos:start="177:26" pos:end="177:52"><literal type="string" pos:start="177:26" pos:end="177:52">"Invalid format name: '%s'"</literal></expr></argument>, <argument pos:start="177:55" pos:end="177:65"><expr pos:start="177:55" pos:end="177:65"><name pos:start="177:55" pos:end="177:65">out_basefmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:21"><expr pos:start="179:13" pos:end="179:20"><name pos:start="179:13" pos:end="179:15">ret</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <operator pos:start="179:19" pos:end="179:19">-</operator><literal type="number" pos:start="179:20" pos:end="179:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="181:13" pos:end="181:21">goto <name pos:start="181:18" pos:end="181:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:71">/* For safe rebasing we need to compare old and new backing file */</comment>

    <if_stmt pos:start="191:5" pos:end="237:5"><if pos:start="191:5" pos:end="199:5">if <condition pos:start="191:8" pos:end="191:15">(<expr pos:start="191:9" pos:end="191:14"><name pos:start="191:9" pos:end="191:14">unsafe</name></expr>)</condition> <block pos:start="191:17" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:30">

        <comment type="block" pos:start="193:9" pos:end="193:37">/* Make the compiler happy */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:30"><expr pos:start="195:9" pos:end="195:29"><name pos:start="195:9" pos:end="195:22">bs_old_backing</name> <operator pos:start="195:24" pos:end="195:24">=</operator> <name pos:start="195:26" pos:end="195:29">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:30"><expr pos:start="197:9" pos:end="197:29"><name pos:start="197:9" pos:end="197:22">bs_new_backing</name> <operator pos:start="197:24" pos:end="197:24">=</operator> <name pos:start="197:26" pos:end="197:29">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="199:7" pos:end="237:5">else <block pos:start="199:12" pos:end="237:5">{<block_content pos:start="201:9" pos:end="235:9">

        <decl_stmt pos:start="201:9" pos:end="201:32"><decl pos:start="201:9" pos:end="201:31"><type pos:start="201:9" pos:end="201:12"><name pos:start="201:9" pos:end="201:12">char</name></type> <name pos:start="201:14" pos:end="201:31"><name pos:start="201:14" pos:end="201:25">backing_name</name><index pos:start="201:26" pos:end="201:31">[<expr pos:start="201:27" pos:end="201:30"><literal type="number" pos:start="201:27" pos:end="201:30">1024</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="205:9" pos:end="205:49"><expr pos:start="205:9" pos:end="205:48"><name pos:start="205:9" pos:end="205:22">bs_old_backing</name> <operator pos:start="205:24" pos:end="205:24">=</operator> <call pos:start="205:26" pos:end="205:48"><name pos:start="205:26" pos:end="205:33">bdrv_new</name><argument_list pos:start="205:34" pos:end="205:48">(<argument pos:start="205:35" pos:end="205:47"><expr pos:start="205:35" pos:end="205:47"><literal type="string" pos:start="205:35" pos:end="205:47">"old_backing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:74"><expr pos:start="207:9" pos:end="207:73"><call pos:start="207:9" pos:end="207:73"><name pos:start="207:9" pos:end="207:33">bdrv_get_backing_filename</name><argument_list pos:start="207:34" pos:end="207:73">(<argument pos:start="207:35" pos:end="207:36"><expr pos:start="207:35" pos:end="207:36"><name pos:start="207:35" pos:end="207:36">bs</name></expr></argument>, <argument pos:start="207:39" pos:end="207:50"><expr pos:start="207:39" pos:end="207:50"><name pos:start="207:39" pos:end="207:50">backing_name</name></expr></argument>, <argument pos:start="207:53" pos:end="207:72"><expr pos:start="207:53" pos:end="207:72"><sizeof pos:start="207:53" pos:end="207:72">sizeof<argument_list pos:start="207:59" pos:end="207:72">(<argument pos:start="207:60" pos:end="207:71"><expr pos:start="207:60" pos:end="207:71"><name pos:start="207:60" pos:end="207:71">backing_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="211:41"><expr pos:start="209:9" pos:end="211:40"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">=</operator> <call pos:start="209:15" pos:end="211:40"><name pos:start="209:15" pos:end="209:23">bdrv_open</name><argument_list pos:start="209:24" pos:end="211:40">(<argument pos:start="209:25" pos:end="209:38"><expr pos:start="209:25" pos:end="209:38"><name pos:start="209:25" pos:end="209:38">bs_old_backing</name></expr></argument>, <argument pos:start="209:41" pos:end="209:52"><expr pos:start="209:41" pos:end="209:52"><name pos:start="209:41" pos:end="209:52">backing_name</name></expr></argument>, <argument pos:start="209:55" pos:end="209:66"><expr pos:start="209:55" pos:end="209:66"><name pos:start="209:55" pos:end="209:66">BDRV_O_FLAGS</name></expr></argument>,

                        <argument pos:start="211:25" pos:end="211:39"><expr pos:start="211:25" pos:end="211:39"><name pos:start="211:25" pos:end="211:39">old_backing_drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="219:9"><if pos:start="213:9" pos:end="219:9">if <condition pos:start="213:12" pos:end="213:16">(<expr pos:start="213:13" pos:end="213:15"><name pos:start="213:13" pos:end="213:15">ret</name></expr>)</condition> <block pos:start="213:18" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:21">

            <expr_stmt pos:start="215:13" pos:end="215:79"><expr pos:start="215:13" pos:end="215:78"><call pos:start="215:13" pos:end="215:78"><name pos:start="215:13" pos:end="215:24">error_report</name><argument_list pos:start="215:25" pos:end="215:78">(<argument pos:start="215:26" pos:end="215:63"><expr pos:start="215:26" pos:end="215:63"><literal type="string" pos:start="215:26" pos:end="215:63">"Could not open old backing file '%s'"</literal></expr></argument>, <argument pos:start="215:66" pos:end="215:77"><expr pos:start="215:66" pos:end="215:77"><name pos:start="215:66" pos:end="215:77">backing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="217:13" pos:end="217:21">goto <name pos:start="217:18" pos:end="217:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="223:9" pos:end="223:49"><expr pos:start="223:9" pos:end="223:48"><name pos:start="223:9" pos:end="223:22">bs_new_backing</name> <operator pos:start="223:24" pos:end="223:24">=</operator> <call pos:start="223:26" pos:end="223:48"><name pos:start="223:26" pos:end="223:33">bdrv_new</name><argument_list pos:start="223:34" pos:end="223:48">(<argument pos:start="223:35" pos:end="223:47"><expr pos:start="223:35" pos:end="223:47"><literal type="string" pos:start="223:35" pos:end="223:47">"new_backing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="227:41"><expr pos:start="225:9" pos:end="227:40"><name pos:start="225:9" pos:end="225:11">ret</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <call pos:start="225:15" pos:end="227:40"><name pos:start="225:15" pos:end="225:23">bdrv_open</name><argument_list pos:start="225:24" pos:end="227:40">(<argument pos:start="225:25" pos:end="225:38"><expr pos:start="225:25" pos:end="225:38"><name pos:start="225:25" pos:end="225:38">bs_new_backing</name></expr></argument>, <argument pos:start="225:41" pos:end="225:51"><expr pos:start="225:41" pos:end="225:51"><name pos:start="225:41" pos:end="225:51">out_baseimg</name></expr></argument>, <argument pos:start="225:54" pos:end="225:65"><expr pos:start="225:54" pos:end="225:65"><name pos:start="225:54" pos:end="225:65">BDRV_O_FLAGS</name></expr></argument>,

                        <argument pos:start="227:25" pos:end="227:39"><expr pos:start="227:25" pos:end="227:39"><name pos:start="227:25" pos:end="227:39">new_backing_drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="229:9" pos:end="235:9"><if pos:start="229:9" pos:end="235:9">if <condition pos:start="229:12" pos:end="229:16">(<expr pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:15">ret</name></expr>)</condition> <block pos:start="229:18" pos:end="235:9">{<block_content pos:start="231:13" pos:end="233:21">

            <expr_stmt pos:start="231:13" pos:end="231:78"><expr pos:start="231:13" pos:end="231:77"><call pos:start="231:13" pos:end="231:77"><name pos:start="231:13" pos:end="231:24">error_report</name><argument_list pos:start="231:25" pos:end="231:77">(<argument pos:start="231:26" pos:end="231:63"><expr pos:start="231:26" pos:end="231:63"><literal type="string" pos:start="231:26" pos:end="231:63">"Could not open new backing file '%s'"</literal></expr></argument>, <argument pos:start="231:66" pos:end="231:76"><expr pos:start="231:66" pos:end="231:76"><name pos:start="231:66" pos:end="231:76">out_baseimg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="233:13" pos:end="233:21">goto <name pos:start="233:18" pos:end="233:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="241:5" pos:end="257:7">/*

     * Check each unallocated cluster in the COW file. If it is unallocated,

     * accesses go to the backing file. We must therefore compare this cluster

     * in the old and new backing file, and if they differ we need to copy it

     * from the old backing file into the COW file.

     *

     * If qemu-img crashes during this step, no harm is done. The content of

     * the image is the same as the original one at any time.

     */</comment>

    <if_stmt pos:start="259:5" pos:end="441:5"><if pos:start="259:5" pos:end="441:5">if <condition pos:start="259:8" pos:end="259:16">(<expr pos:start="259:9" pos:end="259:15"><operator pos:start="259:9" pos:end="259:9">!</operator><name pos:start="259:10" pos:end="259:15">unsafe</name></expr>)</condition> <block pos:start="259:18" pos:end="441:5">{<block_content pos:start="261:9" pos:end="439:28">

        <decl_stmt pos:start="261:9" pos:end="261:29"><decl pos:start="261:9" pos:end="261:28"><type pos:start="261:9" pos:end="261:16"><name pos:start="261:9" pos:end="261:16">uint64_t</name></type> <name pos:start="261:18" pos:end="261:28">num_sectors</name></decl>;</decl_stmt>

        <decl_stmt pos:start="263:9" pos:end="263:41"><decl pos:start="263:9" pos:end="263:40"><type pos:start="263:9" pos:end="263:16"><name pos:start="263:9" pos:end="263:16">uint64_t</name></type> <name pos:start="263:18" pos:end="263:40">old_backing_num_sectors</name></decl>;</decl_stmt>

        <decl_stmt pos:start="265:9" pos:end="265:41"><decl pos:start="265:9" pos:end="265:40"><type pos:start="265:9" pos:end="265:16"><name pos:start="265:9" pos:end="265:16">uint64_t</name></type> <name pos:start="265:18" pos:end="265:40">new_backing_num_sectors</name></decl>;</decl_stmt>

        <decl_stmt pos:start="267:9" pos:end="267:24"><decl pos:start="267:9" pos:end="267:23"><type pos:start="267:9" pos:end="267:16"><name pos:start="267:9" pos:end="267:16">uint64_t</name></type> <name pos:start="267:18" pos:end="267:23">sector</name></decl>;</decl_stmt>

        <decl_stmt pos:start="269:9" pos:end="269:14"><decl pos:start="269:9" pos:end="269:13"><type pos:start="269:9" pos:end="269:11"><name pos:start="269:9" pos:end="269:11">int</name></type> <name pos:start="269:13" pos:end="269:13">n</name></decl>;</decl_stmt>

        <decl_stmt pos:start="271:9" pos:end="271:26"><decl pos:start="271:9" pos:end="271:25"><type pos:start="271:9" pos:end="271:17"><name pos:start="271:9" pos:end="271:15">uint8_t</name> <modifier pos:start="271:17" pos:end="271:17">*</modifier></type> <name pos:start="271:19" pos:end="271:25">buf_old</name></decl>;</decl_stmt>

        <decl_stmt pos:start="273:9" pos:end="273:26"><decl pos:start="273:9" pos:end="273:25"><type pos:start="273:9" pos:end="273:17"><name pos:start="273:9" pos:end="273:15">uint8_t</name> <modifier pos:start="273:17" pos:end="273:17">*</modifier></type> <name pos:start="273:19" pos:end="273:25">buf_new</name></decl>;</decl_stmt>

        <decl_stmt pos:start="275:9" pos:end="275:29"><decl pos:start="275:9" pos:end="275:28"><type pos:start="275:9" pos:end="275:13"><name pos:start="275:9" pos:end="275:13">float</name></type> <name pos:start="275:15" pos:end="275:28">local_progress</name></decl>;</decl_stmt>



        <expr_stmt pos:start="279:9" pos:end="279:51"><expr pos:start="279:9" pos:end="279:50"><name pos:start="279:9" pos:end="279:15">buf_old</name> <operator pos:start="279:17" pos:end="279:17">=</operator> <call pos:start="279:19" pos:end="279:50"><name pos:start="279:19" pos:end="279:33">qemu_blockalign</name><argument_list pos:start="279:34" pos:end="279:50">(<argument pos:start="279:35" pos:end="279:36"><expr pos:start="279:35" pos:end="279:36"><name pos:start="279:35" pos:end="279:36">bs</name></expr></argument>, <argument pos:start="279:39" pos:end="279:49"><expr pos:start="279:39" pos:end="279:49"><name pos:start="279:39" pos:end="279:49">IO_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:51"><expr pos:start="281:9" pos:end="281:50"><name pos:start="281:9" pos:end="281:15">buf_new</name> <operator pos:start="281:17" pos:end="281:17">=</operator> <call pos:start="281:19" pos:end="281:50"><name pos:start="281:19" pos:end="281:33">qemu_blockalign</name><argument_list pos:start="281:34" pos:end="281:50">(<argument pos:start="281:35" pos:end="281:36"><expr pos:start="281:35" pos:end="281:36"><name pos:start="281:35" pos:end="281:36">bs</name></expr></argument>, <argument pos:start="281:39" pos:end="281:49"><expr pos:start="281:39" pos:end="281:49"><name pos:start="281:39" pos:end="281:49">IO_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="285:9" pos:end="285:44"><expr pos:start="285:9" pos:end="285:43"><call pos:start="285:9" pos:end="285:43"><name pos:start="285:9" pos:end="285:25">bdrv_get_geometry</name><argument_list pos:start="285:26" pos:end="285:43">(<argument pos:start="285:27" pos:end="285:28"><expr pos:start="285:27" pos:end="285:28"><name pos:start="285:27" pos:end="285:28">bs</name></expr></argument>, <argument pos:start="285:31" pos:end="285:42"><expr pos:start="285:31" pos:end="285:42"><operator pos:start="285:31" pos:end="285:31">&amp;</operator><name pos:start="285:32" pos:end="285:42">num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:68"><expr pos:start="287:9" pos:end="287:67"><call pos:start="287:9" pos:end="287:67"><name pos:start="287:9" pos:end="287:25">bdrv_get_geometry</name><argument_list pos:start="287:26" pos:end="287:67">(<argument pos:start="287:27" pos:end="287:40"><expr pos:start="287:27" pos:end="287:40"><name pos:start="287:27" pos:end="287:40">bs_old_backing</name></expr></argument>, <argument pos:start="287:43" pos:end="287:66"><expr pos:start="287:43" pos:end="287:66"><operator pos:start="287:43" pos:end="287:43">&amp;</operator><name pos:start="287:44" pos:end="287:66">old_backing_num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:68"><expr pos:start="289:9" pos:end="289:67"><call pos:start="289:9" pos:end="289:67"><name pos:start="289:9" pos:end="289:25">bdrv_get_geometry</name><argument_list pos:start="289:26" pos:end="289:67">(<argument pos:start="289:27" pos:end="289:40"><expr pos:start="289:27" pos:end="289:40"><name pos:start="289:27" pos:end="289:40">bs_new_backing</name></expr></argument>, <argument pos:start="289:43" pos:end="289:66"><expr pos:start="289:43" pos:end="289:66"><operator pos:start="289:43" pos:end="289:43">&amp;</operator><name pos:start="289:44" pos:end="289:66">new_backing_num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="293:9" pos:end="295:64"><expr pos:start="293:9" pos:end="295:63"><name pos:start="293:9" pos:end="293:22">local_progress</name> <operator pos:start="293:24" pos:end="293:24">=</operator> <operator pos:start="293:26" pos:end="293:26">(</operator><name pos:start="293:27" pos:end="293:31">float</name><operator pos:start="293:32" pos:end="293:32">)</operator><literal type="number" pos:start="293:33" pos:end="293:35">100</literal> <operator pos:start="293:37" pos:end="293:37">/</operator>

            <operator pos:start="295:13" pos:end="295:13">(</operator><name pos:start="295:14" pos:end="295:24">num_sectors</name> <operator pos:start="295:26" pos:end="295:26">/</operator> <call pos:start="295:28" pos:end="295:62"><name pos:start="295:28" pos:end="295:30">MIN</name><argument_list pos:start="295:31" pos:end="295:62">(<argument pos:start="295:32" pos:end="295:42"><expr pos:start="295:32" pos:end="295:42"><name pos:start="295:32" pos:end="295:42">num_sectors</name></expr></argument>, <argument pos:start="295:45" pos:end="295:61"><expr pos:start="295:45" pos:end="295:61"><name pos:start="295:45" pos:end="295:55">IO_BUF_SIZE</name> <operator pos:start="295:57" pos:end="295:57">/</operator> <literal type="number" pos:start="295:59" pos:end="295:61">512</literal></expr></argument>)</argument_list></call><operator pos:start="295:63" pos:end="295:63">)</operator></expr>;</expr_stmt>

        <for pos:start="297:9" pos:end="433:9">for <control pos:start="297:13" pos:end="297:59">(<init pos:start="297:14" pos:end="297:24"><expr pos:start="297:14" pos:end="297:23"><name pos:start="297:14" pos:end="297:19">sector</name> <operator pos:start="297:21" pos:end="297:21">=</operator> <literal type="number" pos:start="297:23" pos:end="297:23">0</literal></expr>;</init> <condition pos:start="297:26" pos:end="297:46"><expr pos:start="297:26" pos:end="297:45"><name pos:start="297:26" pos:end="297:31">sector</name> <operator pos:start="297:33" pos:end="297:33">&lt;</operator> <name pos:start="297:35" pos:end="297:45">num_sectors</name></expr>;</condition> <incr pos:start="297:48" pos:end="297:58"><expr pos:start="297:48" pos:end="297:58"><name pos:start="297:48" pos:end="297:53">sector</name> <operator pos:start="297:55" pos:end="297:56">+=</operator> <name pos:start="297:58" pos:end="297:58">n</name></expr></incr>)</control> <block pos:start="297:61" pos:end="433:9">{<block_content pos:start="303:13" pos:end="431:53">



            <comment type="block" pos:start="301:13" pos:end="301:68">/* How many sectors can we handle with the next read? */</comment>

            <if_stmt pos:start="303:13" pos:end="311:13"><if pos:start="303:13" pos:end="307:13">if <condition pos:start="303:16" pos:end="303:60">(<expr pos:start="303:17" pos:end="303:59"><name pos:start="303:17" pos:end="303:22">sector</name> <operator pos:start="303:24" pos:end="303:24">+</operator> <operator pos:start="303:26" pos:end="303:26">(</operator><name pos:start="303:27" pos:end="303:37">IO_BUF_SIZE</name> <operator pos:start="303:39" pos:end="303:39">/</operator> <literal type="number" pos:start="303:41" pos:end="303:43">512</literal><operator pos:start="303:44" pos:end="303:44">)</operator> <operator pos:start="303:46" pos:end="303:47">&lt;=</operator> <name pos:start="303:49" pos:end="303:59">num_sectors</name></expr>)</condition> <block pos:start="303:62" pos:end="307:13">{<block_content pos:start="305:17" pos:end="305:40">

                <expr_stmt pos:start="305:17" pos:end="305:40"><expr pos:start="305:17" pos:end="305:39"><name pos:start="305:17" pos:end="305:17">n</name> <operator pos:start="305:19" pos:end="305:19">=</operator> <operator pos:start="305:21" pos:end="305:21">(</operator><name pos:start="305:22" pos:end="305:32">IO_BUF_SIZE</name> <operator pos:start="305:34" pos:end="305:34">/</operator> <literal type="number" pos:start="305:36" pos:end="305:38">512</literal><operator pos:start="305:39" pos:end="305:39">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="307:15" pos:end="311:13">else <block pos:start="307:20" pos:end="311:13">{<block_content pos:start="309:17" pos:end="309:41">

                <expr_stmt pos:start="309:17" pos:end="309:41"><expr pos:start="309:17" pos:end="309:40"><name pos:start="309:17" pos:end="309:17">n</name> <operator pos:start="309:19" pos:end="309:19">=</operator> <name pos:start="309:21" pos:end="309:31">num_sectors</name> <operator pos:start="309:33" pos:end="309:33">-</operator> <name pos:start="309:35" pos:end="309:40">sector</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="315:13" pos:end="315:75">/* If the cluster is allocated, we don't need to take action */</comment>

            <expr_stmt pos:start="317:13" pos:end="317:55"><expr pos:start="317:13" pos:end="317:54"><name pos:start="317:13" pos:end="317:15">ret</name> <operator pos:start="317:17" pos:end="317:17">=</operator> <call pos:start="317:19" pos:end="317:54"><name pos:start="317:19" pos:end="317:35">bdrv_is_allocated</name><argument_list pos:start="317:36" pos:end="317:54">(<argument pos:start="317:37" pos:end="317:38"><expr pos:start="317:37" pos:end="317:38"><name pos:start="317:37" pos:end="317:38">bs</name></expr></argument>, <argument pos:start="317:41" pos:end="317:46"><expr pos:start="317:41" pos:end="317:46"><name pos:start="317:41" pos:end="317:46">sector</name></expr></argument>, <argument pos:start="317:49" pos:end="317:49"><expr pos:start="317:49" pos:end="317:49"><name pos:start="317:49" pos:end="317:49">n</name></expr></argument>, <argument pos:start="317:52" pos:end="317:53"><expr pos:start="317:52" pos:end="317:53"><operator pos:start="317:52" pos:end="317:52">&amp;</operator><name pos:start="317:53" pos:end="317:53">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="319:13" pos:end="323:13"><if pos:start="319:13" pos:end="323:13">if <condition pos:start="319:16" pos:end="319:20">(<expr pos:start="319:17" pos:end="319:19"><name pos:start="319:17" pos:end="319:19">ret</name></expr>)</condition> <block pos:start="319:22" pos:end="323:13">{<block_content pos:start="321:17" pos:end="321:25">

                <continue pos:start="321:17" pos:end="321:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="327:13" pos:end="333:15">/*

             * Read old and new backing file and take into consideration that

             * backing files may be smaller than the COW image.

             */</comment>

            <if_stmt pos:start="335:13" pos:end="359:13"><if pos:start="335:13" pos:end="339:13">if <condition pos:start="335:16" pos:end="335:50">(<expr pos:start="335:17" pos:end="335:49"><name pos:start="335:17" pos:end="335:22">sector</name> <operator pos:start="335:24" pos:end="335:25">&gt;=</operator> <name pos:start="335:27" pos:end="335:49">old_backing_num_sectors</name></expr>)</condition> <block pos:start="335:52" pos:end="339:13">{<block_content pos:start="337:17" pos:end="337:57">

                <expr_stmt pos:start="337:17" pos:end="337:57"><expr pos:start="337:17" pos:end="337:56"><call pos:start="337:17" pos:end="337:56"><name pos:start="337:17" pos:end="337:22">memset</name><argument_list pos:start="337:23" pos:end="337:56">(<argument pos:start="337:24" pos:end="337:30"><expr pos:start="337:24" pos:end="337:30"><name pos:start="337:24" pos:end="337:30">buf_old</name></expr></argument>, <argument pos:start="337:33" pos:end="337:33"><expr pos:start="337:33" pos:end="337:33"><literal type="number" pos:start="337:33" pos:end="337:33">0</literal></expr></argument>, <argument pos:start="337:36" pos:end="337:55"><expr pos:start="337:36" pos:end="337:55"><name pos:start="337:36" pos:end="337:36">n</name> <operator pos:start="337:38" pos:end="337:38">*</operator> <name pos:start="337:40" pos:end="337:55">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="339:15" pos:end="359:13">else <block pos:start="339:20" pos:end="359:13">{<block_content pos:start="341:17" pos:end="357:17">

                <if_stmt pos:start="341:17" pos:end="345:17"><if pos:start="341:17" pos:end="345:17">if <condition pos:start="341:20" pos:end="341:57">(<expr pos:start="341:21" pos:end="341:56"><name pos:start="341:21" pos:end="341:26">sector</name> <operator pos:start="341:28" pos:end="341:28">+</operator> <name pos:start="341:30" pos:end="341:30">n</name> <operator pos:start="341:32" pos:end="341:32">&gt;</operator> <name pos:start="341:34" pos:end="341:56">old_backing_num_sectors</name></expr>)</condition> <block pos:start="341:59" pos:end="345:17">{<block_content pos:start="343:21" pos:end="343:57">

                    <expr_stmt pos:start="343:21" pos:end="343:57"><expr pos:start="343:21" pos:end="343:56"><name pos:start="343:21" pos:end="343:21">n</name> <operator pos:start="343:23" pos:end="343:23">=</operator> <name pos:start="343:25" pos:end="343:47">old_backing_num_sectors</name> <operator pos:start="343:49" pos:end="343:49">-</operator> <name pos:start="343:51" pos:end="343:56">sector</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="349:17" pos:end="349:68"><expr pos:start="349:17" pos:end="349:67"><name pos:start="349:17" pos:end="349:19">ret</name> <operator pos:start="349:21" pos:end="349:21">=</operator> <call pos:start="349:23" pos:end="349:67"><name pos:start="349:23" pos:end="349:31">bdrv_read</name><argument_list pos:start="349:32" pos:end="349:67">(<argument pos:start="349:33" pos:end="349:46"><expr pos:start="349:33" pos:end="349:46"><name pos:start="349:33" pos:end="349:46">bs_old_backing</name></expr></argument>, <argument pos:start="349:49" pos:end="349:54"><expr pos:start="349:49" pos:end="349:54"><name pos:start="349:49" pos:end="349:54">sector</name></expr></argument>, <argument pos:start="349:57" pos:end="349:63"><expr pos:start="349:57" pos:end="349:63"><name pos:start="349:57" pos:end="349:63">buf_old</name></expr></argument>, <argument pos:start="349:66" pos:end="349:66"><expr pos:start="349:66" pos:end="349:66"><name pos:start="349:66" pos:end="349:66">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="351:17" pos:end="357:17"><if pos:start="351:17" pos:end="357:17">if <condition pos:start="351:20" pos:end="351:28">(<expr pos:start="351:21" pos:end="351:27"><name pos:start="351:21" pos:end="351:23">ret</name> <operator pos:start="351:25" pos:end="351:25">&lt;</operator> <literal type="number" pos:start="351:27" pos:end="351:27">0</literal></expr>)</condition> <block pos:start="351:30" pos:end="357:17">{<block_content pos:start="353:21" pos:end="355:29">

                    <expr_stmt pos:start="353:21" pos:end="353:78"><expr pos:start="353:21" pos:end="353:77"><call pos:start="353:21" pos:end="353:77"><name pos:start="353:21" pos:end="353:32">error_report</name><argument_list pos:start="353:33" pos:end="353:77">(<argument pos:start="353:34" pos:end="353:76"><expr pos:start="353:34" pos:end="353:76"><literal type="string" pos:start="353:34" pos:end="353:76">"error while reading from old backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="355:21" pos:end="355:29">goto <name pos:start="355:26" pos:end="355:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="363:13" pos:end="387:13"><if pos:start="363:13" pos:end="367:13">if <condition pos:start="363:16" pos:end="363:50">(<expr pos:start="363:17" pos:end="363:49"><name pos:start="363:17" pos:end="363:22">sector</name> <operator pos:start="363:24" pos:end="363:25">&gt;=</operator> <name pos:start="363:27" pos:end="363:49">new_backing_num_sectors</name></expr>)</condition> <block pos:start="363:52" pos:end="367:13">{<block_content pos:start="365:17" pos:end="365:57">

                <expr_stmt pos:start="365:17" pos:end="365:57"><expr pos:start="365:17" pos:end="365:56"><call pos:start="365:17" pos:end="365:56"><name pos:start="365:17" pos:end="365:22">memset</name><argument_list pos:start="365:23" pos:end="365:56">(<argument pos:start="365:24" pos:end="365:30"><expr pos:start="365:24" pos:end="365:30"><name pos:start="365:24" pos:end="365:30">buf_new</name></expr></argument>, <argument pos:start="365:33" pos:end="365:33"><expr pos:start="365:33" pos:end="365:33"><literal type="number" pos:start="365:33" pos:end="365:33">0</literal></expr></argument>, <argument pos:start="365:36" pos:end="365:55"><expr pos:start="365:36" pos:end="365:55"><name pos:start="365:36" pos:end="365:36">n</name> <operator pos:start="365:38" pos:end="365:38">*</operator> <name pos:start="365:40" pos:end="365:55">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="367:15" pos:end="387:13">else <block pos:start="367:20" pos:end="387:13">{<block_content pos:start="369:17" pos:end="385:17">

                <if_stmt pos:start="369:17" pos:end="373:17"><if pos:start="369:17" pos:end="373:17">if <condition pos:start="369:20" pos:end="369:57">(<expr pos:start="369:21" pos:end="369:56"><name pos:start="369:21" pos:end="369:26">sector</name> <operator pos:start="369:28" pos:end="369:28">+</operator> <name pos:start="369:30" pos:end="369:30">n</name> <operator pos:start="369:32" pos:end="369:32">&gt;</operator> <name pos:start="369:34" pos:end="369:56">new_backing_num_sectors</name></expr>)</condition> <block pos:start="369:59" pos:end="373:17">{<block_content pos:start="371:21" pos:end="371:57">

                    <expr_stmt pos:start="371:21" pos:end="371:57"><expr pos:start="371:21" pos:end="371:56"><name pos:start="371:21" pos:end="371:21">n</name> <operator pos:start="371:23" pos:end="371:23">=</operator> <name pos:start="371:25" pos:end="371:47">new_backing_num_sectors</name> <operator pos:start="371:49" pos:end="371:49">-</operator> <name pos:start="371:51" pos:end="371:56">sector</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="377:17" pos:end="377:68"><expr pos:start="377:17" pos:end="377:67"><name pos:start="377:17" pos:end="377:19">ret</name> <operator pos:start="377:21" pos:end="377:21">=</operator> <call pos:start="377:23" pos:end="377:67"><name pos:start="377:23" pos:end="377:31">bdrv_read</name><argument_list pos:start="377:32" pos:end="377:67">(<argument pos:start="377:33" pos:end="377:46"><expr pos:start="377:33" pos:end="377:46"><name pos:start="377:33" pos:end="377:46">bs_new_backing</name></expr></argument>, <argument pos:start="377:49" pos:end="377:54"><expr pos:start="377:49" pos:end="377:54"><name pos:start="377:49" pos:end="377:54">sector</name></expr></argument>, <argument pos:start="377:57" pos:end="377:63"><expr pos:start="377:57" pos:end="377:63"><name pos:start="377:57" pos:end="377:63">buf_new</name></expr></argument>, <argument pos:start="377:66" pos:end="377:66"><expr pos:start="377:66" pos:end="377:66"><name pos:start="377:66" pos:end="377:66">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="379:17" pos:end="385:17"><if pos:start="379:17" pos:end="385:17">if <condition pos:start="379:20" pos:end="379:28">(<expr pos:start="379:21" pos:end="379:27"><name pos:start="379:21" pos:end="379:23">ret</name> <operator pos:start="379:25" pos:end="379:25">&lt;</operator> <literal type="number" pos:start="379:27" pos:end="379:27">0</literal></expr>)</condition> <block pos:start="379:30" pos:end="385:17">{<block_content pos:start="381:21" pos:end="383:29">

                    <expr_stmt pos:start="381:21" pos:end="381:78"><expr pos:start="381:21" pos:end="381:77"><call pos:start="381:21" pos:end="381:77"><name pos:start="381:21" pos:end="381:32">error_report</name><argument_list pos:start="381:33" pos:end="381:77">(<argument pos:start="381:34" pos:end="381:76"><expr pos:start="381:34" pos:end="381:76"><literal type="string" pos:start="381:34" pos:end="381:76">"error while reading from new backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="383:21" pos:end="383:29">goto <name pos:start="383:26" pos:end="383:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="391:13" pos:end="391:66">/* If they differ, we need to write to the COW file */</comment>

            <decl_stmt pos:start="393:13" pos:end="393:33"><decl pos:start="393:13" pos:end="393:32"><type pos:start="393:13" pos:end="393:20"><name pos:start="393:13" pos:end="393:20">uint64_t</name></type> <name pos:start="393:22" pos:end="393:28">written</name> <init pos:start="393:30" pos:end="393:32">= <expr pos:start="393:32" pos:end="393:32"><literal type="number" pos:start="393:32" pos:end="393:32">0</literal></expr></init></decl>;</decl_stmt>



            <while pos:start="397:13" pos:end="429:13">while <condition pos:start="397:19" pos:end="397:31">(<expr pos:start="397:20" pos:end="397:30"><name pos:start="397:20" pos:end="397:26">written</name> <operator pos:start="397:28" pos:end="397:28">&lt;</operator> <name pos:start="397:30" pos:end="397:30">n</name></expr>)</condition> <block pos:start="397:33" pos:end="429:13">{<block_content pos:start="399:17" pos:end="427:32">

                <decl_stmt pos:start="399:17" pos:end="399:25"><decl pos:start="399:17" pos:end="399:24"><type pos:start="399:17" pos:end="399:19"><name pos:start="399:17" pos:end="399:19">int</name></type> <name pos:start="399:21" pos:end="399:24">pnum</name></decl>;</decl_stmt>



                <if_stmt pos:start="403:17" pos:end="423:17"><if pos:start="403:17" pos:end="423:17">if <condition pos:start="403:20" pos:end="405:65">(<expr pos:start="403:21" pos:end="405:64"><call pos:start="403:21" pos:end="405:64"><name pos:start="403:21" pos:end="403:35">compare_sectors</name><argument_list pos:start="403:36" pos:end="405:64">(<argument pos:start="403:37" pos:end="403:59"><expr pos:start="403:37" pos:end="403:59"><name pos:start="403:37" pos:end="403:43">buf_old</name> <operator pos:start="403:45" pos:end="403:45">+</operator> <name pos:start="403:47" pos:end="403:53">written</name> <operator pos:start="403:55" pos:end="403:55">*</operator> <literal type="number" pos:start="403:57" pos:end="403:59">512</literal></expr></argument>,

                    <argument pos:start="405:21" pos:end="405:43"><expr pos:start="405:21" pos:end="405:43"><name pos:start="405:21" pos:end="405:27">buf_new</name> <operator pos:start="405:29" pos:end="405:29">+</operator> <name pos:start="405:31" pos:end="405:37">written</name> <operator pos:start="405:39" pos:end="405:39">*</operator> <literal type="number" pos:start="405:41" pos:end="405:43">512</literal></expr></argument>, <argument pos:start="405:46" pos:end="405:56"><expr pos:start="405:46" pos:end="405:56"><name pos:start="405:46" pos:end="405:46">n</name> <operator pos:start="405:48" pos:end="405:48">-</operator> <name pos:start="405:50" pos:end="405:56">written</name></expr></argument>, <argument pos:start="405:59" pos:end="405:63"><expr pos:start="405:59" pos:end="405:63"><operator pos:start="405:59" pos:end="405:59">&amp;</operator><name pos:start="405:60" pos:end="405:63">pnum</name></expr></argument>)</argument_list></call></expr>)</condition>

                <block pos:start="407:17" pos:end="423:17">{<block_content pos:start="409:21" pos:end="421:21">

                    <expr_stmt pos:start="409:21" pos:end="411:55"><expr pos:start="409:21" pos:end="411:54"><name pos:start="409:21" pos:end="409:23">ret</name> <operator pos:start="409:25" pos:end="409:25">=</operator> <call pos:start="409:27" pos:end="411:54"><name pos:start="409:27" pos:end="409:36">bdrv_write</name><argument_list pos:start="409:37" pos:end="411:54">(<argument pos:start="409:38" pos:end="409:39"><expr pos:start="409:38" pos:end="409:39"><name pos:start="409:38" pos:end="409:39">bs</name></expr></argument>, <argument pos:start="409:42" pos:end="409:57"><expr pos:start="409:42" pos:end="409:57"><name pos:start="409:42" pos:end="409:47">sector</name> <operator pos:start="409:49" pos:end="409:49">+</operator> <name pos:start="409:51" pos:end="409:57">written</name></expr></argument>,

                        <argument pos:start="411:25" pos:end="411:47"><expr pos:start="411:25" pos:end="411:47"><name pos:start="411:25" pos:end="411:31">buf_old</name> <operator pos:start="411:33" pos:end="411:33">+</operator> <name pos:start="411:35" pos:end="411:41">written</name> <operator pos:start="411:43" pos:end="411:43">*</operator> <literal type="number" pos:start="411:45" pos:end="411:47">512</literal></expr></argument>, <argument pos:start="411:50" pos:end="411:53"><expr pos:start="411:50" pos:end="411:53"><name pos:start="411:50" pos:end="411:53">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="413:21" pos:end="421:21"><if pos:start="413:21" pos:end="421:21">if <condition pos:start="413:24" pos:end="413:32">(<expr pos:start="413:25" pos:end="413:31"><name pos:start="413:25" pos:end="413:27">ret</name> <operator pos:start="413:29" pos:end="413:29">&lt;</operator> <literal type="number" pos:start="413:31" pos:end="413:31">0</literal></expr>)</condition> <block pos:start="413:34" pos:end="421:21">{<block_content pos:start="415:25" pos:end="419:33">

                        <expr_stmt pos:start="415:25" pos:end="417:44"><expr pos:start="415:25" pos:end="417:43"><call pos:start="415:25" pos:end="417:43"><name pos:start="415:25" pos:end="415:36">error_report</name><argument_list pos:start="415:37" pos:end="417:43">(<argument pos:start="415:38" pos:end="415:75"><expr pos:start="415:38" pos:end="415:75"><literal type="string" pos:start="415:38" pos:end="415:75">"Error while writing to COW image: %s"</literal></expr></argument>,

                            <argument pos:start="417:29" pos:end="417:42"><expr pos:start="417:29" pos:end="417:42"><call pos:start="417:29" pos:end="417:42"><name pos:start="417:29" pos:end="417:36">strerror</name><argument_list pos:start="417:37" pos:end="417:42">(<argument pos:start="417:38" pos:end="417:41"><expr pos:start="417:38" pos:end="417:41"><operator pos:start="417:38" pos:end="417:38">-</operator><name pos:start="417:39" pos:end="417:41">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="419:25" pos:end="419:33">goto <name pos:start="419:30" pos:end="419:32">out</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="427:17" pos:end="427:32"><expr pos:start="427:17" pos:end="427:31"><name pos:start="427:17" pos:end="427:23">written</name> <operator pos:start="427:25" pos:end="427:26">+=</operator> <name pos:start="427:28" pos:end="427:31">pnum</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="431:13" pos:end="431:53"><expr pos:start="431:13" pos:end="431:52"><call pos:start="431:13" pos:end="431:52"><name pos:start="431:13" pos:end="431:31">qemu_progress_print</name><argument_list pos:start="431:32" pos:end="431:52">(<argument pos:start="431:33" pos:end="431:46"><expr pos:start="431:33" pos:end="431:46"><name pos:start="431:33" pos:end="431:46">local_progress</name></expr></argument>, <argument pos:start="431:49" pos:end="431:51"><expr pos:start="431:49" pos:end="431:51"><literal type="number" pos:start="431:49" pos:end="431:51">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="437:9" pos:end="437:28"><expr pos:start="437:9" pos:end="437:27"><call pos:start="437:9" pos:end="437:27"><name pos:start="437:9" pos:end="437:18">qemu_vfree</name><argument_list pos:start="437:19" pos:end="437:27">(<argument pos:start="437:20" pos:end="437:26"><expr pos:start="437:20" pos:end="437:26"><name pos:start="437:20" pos:end="437:26">buf_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:28"><expr pos:start="439:9" pos:end="439:27"><call pos:start="439:9" pos:end="439:27"><name pos:start="439:9" pos:end="439:18">qemu_vfree</name><argument_list pos:start="439:19" pos:end="439:27">(<argument pos:start="439:20" pos:end="439:26"><expr pos:start="439:20" pos:end="439:26"><name pos:start="439:20" pos:end="439:26">buf_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="445:5" pos:end="453:7">/*

     * Change the backing file. All clusters that are different from the old

     * backing file are overwritten in the COW file now, so the visible content

     * doesn't change when we switch the backing file.

     */</comment>

    <expr_stmt pos:start="455:5" pos:end="455:65"><expr pos:start="455:5" pos:end="455:64"><name pos:start="455:5" pos:end="455:7">ret</name> <operator pos:start="455:9" pos:end="455:9">=</operator> <call pos:start="455:11" pos:end="455:64"><name pos:start="455:11" pos:end="455:34">bdrv_change_backing_file</name><argument_list pos:start="455:35" pos:end="455:64">(<argument pos:start="455:36" pos:end="455:37"><expr pos:start="455:36" pos:end="455:37"><name pos:start="455:36" pos:end="455:37">bs</name></expr></argument>, <argument pos:start="455:40" pos:end="455:50"><expr pos:start="455:40" pos:end="455:50"><name pos:start="455:40" pos:end="455:50">out_baseimg</name></expr></argument>, <argument pos:start="455:53" pos:end="455:63"><expr pos:start="455:53" pos:end="455:63"><name pos:start="455:53" pos:end="455:63">out_basefmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="457:5" pos:end="469:5"><if pos:start="457:5" pos:end="463:5">if <condition pos:start="457:8" pos:end="457:23">(<expr pos:start="457:9" pos:end="457:22"><name pos:start="457:9" pos:end="457:11">ret</name> <operator pos:start="457:13" pos:end="457:14">==</operator> <operator pos:start="457:16" pos:end="457:16">-</operator><name pos:start="457:17" pos:end="457:22">ENOSPC</name></expr>)</condition> <block pos:start="457:25" pos:end="463:5">{<block_content pos:start="459:9" pos:end="461:67">

        <expr_stmt pos:start="459:9" pos:end="461:67"><expr pos:start="459:9" pos:end="461:66"><call pos:start="459:9" pos:end="461:66"><name pos:start="459:9" pos:end="459:20">error_report</name><argument_list pos:start="459:21" pos:end="461:66">(<argument pos:start="459:22" pos:end="461:52"><expr pos:start="459:22" pos:end="461:52"><literal type="string" pos:start="459:22" pos:end="459:69">"Could not change the backing file to '%s': No "</literal>

                     <literal type="string" pos:start="461:22" pos:end="461:52">"space left in the file header"</literal></expr></argument>, <argument pos:start="461:55" pos:end="461:65"><expr pos:start="461:55" pos:end="461:65"><name pos:start="461:55" pos:end="461:65">out_baseimg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="463:7" pos:end="469:5">else if <condition pos:start="463:15" pos:end="463:23">(<expr pos:start="463:16" pos:end="463:22"><name pos:start="463:16" pos:end="463:18">ret</name> <operator pos:start="463:20" pos:end="463:20">&lt;</operator> <literal type="number" pos:start="463:22" pos:end="463:22">0</literal></expr>)</condition> <block pos:start="463:25" pos:end="469:5">{<block_content pos:start="465:9" pos:end="467:41">

        <expr_stmt pos:start="465:9" pos:end="467:41"><expr pos:start="465:9" pos:end="467:40"><call pos:start="465:9" pos:end="467:40"><name pos:start="465:9" pos:end="465:20">error_report</name><argument_list pos:start="465:21" pos:end="467:40">(<argument pos:start="465:22" pos:end="465:68"><expr pos:start="465:22" pos:end="465:68"><literal type="string" pos:start="465:22" pos:end="465:68">"Could not change the backing file to '%s': %s"</literal></expr></argument>,

            <argument pos:start="467:13" pos:end="467:23"><expr pos:start="467:13" pos:end="467:23"><name pos:start="467:13" pos:end="467:23">out_baseimg</name></expr></argument>, <argument pos:start="467:26" pos:end="467:39"><expr pos:start="467:26" pos:end="467:39"><call pos:start="467:26" pos:end="467:39"><name pos:start="467:26" pos:end="467:33">strerror</name><argument_list pos:start="467:34" pos:end="467:39">(<argument pos:start="467:35" pos:end="467:38"><expr pos:start="467:35" pos:end="467:38"><operator pos:start="467:35" pos:end="467:35">-</operator><name pos:start="467:36" pos:end="467:38">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="473:5" pos:end="473:32"><expr pos:start="473:5" pos:end="473:31"><call pos:start="473:5" pos:end="473:31"><name pos:start="473:5" pos:end="473:23">qemu_progress_print</name><argument_list pos:start="473:24" pos:end="473:31">(<argument pos:start="473:25" pos:end="473:27"><expr pos:start="473:25" pos:end="473:27"><literal type="number" pos:start="473:25" pos:end="473:27">100</literal></expr></argument>, <argument pos:start="473:30" pos:end="473:30"><expr pos:start="473:30" pos:end="473:30"><literal type="number" pos:start="473:30" pos:end="473:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="475:5" pos:end="485:7">/*

     * TODO At this point it is possible to check if any clusters that are

     * allocated in the COW file are the same in the backing file. If so, they

     * could be dropped from the COW file. Don't do this before switching the

     * backing file, in case of a crash this would lead to corruption.

     */</comment>

<label pos:start="487:1" pos:end="487:4"><name pos:start="487:1" pos:end="487:3">out</name>:</label>

    <expr_stmt pos:start="489:5" pos:end="489:24"><expr pos:start="489:5" pos:end="489:23"><call pos:start="489:5" pos:end="489:23"><name pos:start="489:5" pos:end="489:21">qemu_progress_end</name><argument_list pos:start="489:22" pos:end="489:23">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="491:5" pos:end="491:17">/* Cleanup */</comment>

    <if_stmt pos:start="493:5" pos:end="507:5"><if pos:start="493:5" pos:end="507:5">if <condition pos:start="493:8" pos:end="493:16">(<expr pos:start="493:9" pos:end="493:15"><operator pos:start="493:9" pos:end="493:9">!</operator><name pos:start="493:10" pos:end="493:15">unsafe</name></expr>)</condition> <block pos:start="493:18" pos:end="507:5">{<block_content pos:start="495:9" pos:end="505:9">

        <if_stmt pos:start="495:9" pos:end="499:9"><if pos:start="495:9" pos:end="499:9">if <condition pos:start="495:12" pos:end="495:35">(<expr pos:start="495:13" pos:end="495:34"><name pos:start="495:13" pos:end="495:26">bs_old_backing</name> <operator pos:start="495:28" pos:end="495:29">!=</operator> <name pos:start="495:31" pos:end="495:34">NULL</name></expr>)</condition> <block pos:start="495:37" pos:end="499:9">{<block_content pos:start="497:13" pos:end="497:40">

            <expr_stmt pos:start="497:13" pos:end="497:40"><expr pos:start="497:13" pos:end="497:39"><call pos:start="497:13" pos:end="497:39"><name pos:start="497:13" pos:end="497:23">bdrv_delete</name><argument_list pos:start="497:24" pos:end="497:39">(<argument pos:start="497:25" pos:end="497:38"><expr pos:start="497:25" pos:end="497:38"><name pos:start="497:25" pos:end="497:38">bs_old_backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="501:9" pos:end="505:9"><if pos:start="501:9" pos:end="505:9">if <condition pos:start="501:12" pos:end="501:35">(<expr pos:start="501:13" pos:end="501:34"><name pos:start="501:13" pos:end="501:26">bs_new_backing</name> <operator pos:start="501:28" pos:end="501:29">!=</operator> <name pos:start="501:31" pos:end="501:34">NULL</name></expr>)</condition> <block pos:start="501:37" pos:end="505:9">{<block_content pos:start="503:13" pos:end="503:40">

            <expr_stmt pos:start="503:13" pos:end="503:40"><expr pos:start="503:13" pos:end="503:39"><call pos:start="503:13" pos:end="503:39"><name pos:start="503:13" pos:end="503:23">bdrv_delete</name><argument_list pos:start="503:24" pos:end="503:39">(<argument pos:start="503:25" pos:end="503:38"><expr pos:start="503:25" pos:end="503:38"><name pos:start="503:25" pos:end="503:38">bs_new_backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="511:5" pos:end="511:20"><expr pos:start="511:5" pos:end="511:19"><call pos:start="511:5" pos:end="511:19"><name pos:start="511:5" pos:end="511:15">bdrv_delete</name><argument_list pos:start="511:16" pos:end="511:19">(<argument pos:start="511:17" pos:end="511:18"><expr pos:start="511:17" pos:end="511:18"><name pos:start="511:17" pos:end="511:18">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="513:5" pos:end="517:5"><if pos:start="513:5" pos:end="517:5">if <condition pos:start="513:8" pos:end="513:12">(<expr pos:start="513:9" pos:end="513:11"><name pos:start="513:9" pos:end="513:11">ret</name></expr>)</condition> <block pos:start="513:14" pos:end="517:5">{<block_content pos:start="515:9" pos:end="515:17">

        <return pos:start="515:9" pos:end="515:17">return <expr pos:start="515:16" pos:end="515:16"><literal type="number" pos:start="515:16" pos:end="515:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="519:5" pos:end="519:13">return <expr pos:start="519:12" pos:end="519:12"><literal type="number" pos:start="519:12" pos:end="519:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
