<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8954.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">dummy_m68k_init</name><parameter_list pos:start="1:28" pos:end="1:54">(<parameter pos:start="1:29" pos:end="1:53"><decl pos:start="1:29" pos:end="1:53"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:47">QEMUMachineInitArgs</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:20">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">CPUM68KState</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:35">address_space_mem</name> <init pos:start="13:37" pos:end="13:58">=  <expr pos:start="13:40" pos:end="13:58"><call pos:start="13:40" pos:end="13:58"><name pos:start="13:40" pos:end="13:56">get_system_memory</name><argument_list pos:start="13:57" pos:end="13:58">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">ram</name> <init pos:start="15:23" pos:end="15:46">= <expr pos:start="15:25" pos:end="15:46"><call pos:start="15:25" pos:end="15:46"><name pos:start="15:25" pos:end="15:29">g_new</name><argument_list pos:start="15:30" pos:end="15:46">(<argument pos:start="15:31" pos:end="15:42"><expr pos:start="15:31" pos:end="15:42"><name pos:start="15:31" pos:end="15:42">MemoryRegion</name></expr></argument>, <argument pos:start="15:45" pos:end="15:45"><expr pos:start="15:45" pos:end="15:45"><literal type="number" pos:start="15:45" pos:end="15:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:22">target_phys_addr_t</name></type> <name pos:start="21:24" pos:end="21:28">entry</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:28"><if pos:start="25:5" pos:end="27:28">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:28"><block_content pos:start="27:9" pos:end="27:28">

        <expr_stmt pos:start="27:9" pos:end="27:28"><expr pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:17">cpu_model</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="string" pos:start="27:21" pos:end="27:27">"cfv4e"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:7">env</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:29"><name pos:start="29:11" pos:end="29:18">cpu_init</name><argument_list pos:start="29:19" pos:end="29:29">(<argument pos:start="29:20" pos:end="29:28"><expr pos:start="29:20" pos:end="29:28"><name pos:start="29:20" pos:end="29:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">env</name></expr>)</condition> <block pos:start="31:15" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:16">

        <expr_stmt pos:start="33:9" pos:end="33:64"><expr pos:start="33:9" pos:end="33:63"><call pos:start="33:9" pos:end="33:63"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:63">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:62"><expr pos:start="33:25" pos:end="33:62"><literal type="string" pos:start="33:25" pos:end="33:62">"Unable to find m68k CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:12">exit</name><argument_list pos:start="35:13" pos:end="35:15">(<argument pos:start="35:14" pos:end="35:14"><expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:36">/* Initialize CPU registers.  */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:12">vbr</name></name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:29">/* RAM at address zero */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:60"><expr pos:start="49:5" pos:end="49:59"><call pos:start="49:5" pos:end="49:59"><name pos:start="49:5" pos:end="49:26">memory_region_init_ram</name><argument_list pos:start="49:27" pos:end="49:59">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">ram</name></expr></argument>, <argument pos:start="49:33" pos:end="49:48"><expr pos:start="49:33" pos:end="49:48"><literal type="string" pos:start="49:33" pos:end="49:48">"dummy_m68k.ram"</literal></expr></argument>, <argument pos:start="49:51" pos:end="49:58"><expr pos:start="49:51" pos:end="49:58"><name pos:start="49:51" pos:end="49:58">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:37"><expr pos:start="51:5" pos:end="51:36"><call pos:start="51:5" pos:end="51:36"><name pos:start="51:5" pos:end="51:31">vmstate_register_ram_global</name><argument_list pos:start="51:32" pos:end="51:36">(<argument pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:59"><expr pos:start="53:5" pos:end="53:58"><call pos:start="53:5" pos:end="53:58"><name pos:start="53:5" pos:end="53:31">memory_region_add_subregion</name><argument_list pos:start="53:32" pos:end="53:58">(<argument pos:start="53:33" pos:end="53:49"><expr pos:start="53:33" pos:end="53:49"><name pos:start="53:33" pos:end="53:49">address_space_mem</name></expr></argument>, <argument pos:start="53:52" pos:end="53:52"><expr pos:start="53:52" pos:end="53:52"><literal type="number" pos:start="53:52" pos:end="53:52">0</literal></expr></argument>, <argument pos:start="53:55" pos:end="53:57"><expr pos:start="53:55" pos:end="53:57"><name pos:start="53:55" pos:end="53:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:23">/* Load kernel.  */</comment>

    <if_stmt pos:start="59:5" pos:end="99:5"><if pos:start="59:5" pos:end="95:5">if <condition pos:start="59:8" pos:end="59:24">(<expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:23">kernel_filename</name></expr>)</condition> <block pos:start="59:26" pos:end="95:5">{<block_content pos:start="61:9" pos:end="93:9">

        <expr_stmt pos:start="61:9" pos:end="63:62"><expr pos:start="61:9" pos:end="63:61"><name pos:start="61:9" pos:end="61:19">kernel_size</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="63:61"><name pos:start="61:23" pos:end="61:30">load_elf</name><argument_list pos:start="61:31" pos:end="63:61">(<argument pos:start="61:32" pos:end="61:46"><expr pos:start="61:32" pos:end="61:46"><name pos:start="61:32" pos:end="61:46">kernel_filename</name></expr></argument>, <argument pos:start="61:49" pos:end="61:52"><expr pos:start="61:49" pos:end="61:52"><name pos:start="61:49" pos:end="61:52">NULL</name></expr></argument>, <argument pos:start="61:55" pos:end="61:58"><expr pos:start="61:55" pos:end="61:58"><name pos:start="61:55" pos:end="61:58">NULL</name></expr></argument>, <argument pos:start="61:61" pos:end="61:70"><expr pos:start="61:61" pos:end="61:70"><operator pos:start="61:61" pos:end="61:61">&amp;</operator><name pos:start="61:62" pos:end="61:70">elf_entry</name></expr></argument>,

                               <argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">NULL</name></expr></argument>, <argument pos:start="63:38" pos:end="63:41"><expr pos:start="63:38" pos:end="63:41"><name pos:start="63:38" pos:end="63:41">NULL</name></expr></argument>, <argument pos:start="63:44" pos:end="63:44"><expr pos:start="63:44" pos:end="63:44"><literal type="number" pos:start="63:44" pos:end="63:44">1</literal></expr></argument>, <argument pos:start="63:47" pos:end="63:57"><expr pos:start="63:47" pos:end="63:57"><name pos:start="63:47" pos:end="63:57">ELF_MACHINE</name></expr></argument>, <argument pos:start="63:60" pos:end="63:60"><expr pos:start="63:60" pos:end="63:60"><literal type="number" pos:start="63:60" pos:end="63:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:13">entry</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:25">elf_entry</name></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:28">(<expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:23">kernel_size</name> <operator pos:start="67:25" pos:end="67:25">&lt;</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>)</condition> <block pos:start="67:30" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:75">

            <expr_stmt pos:start="69:13" pos:end="69:75"><expr pos:start="69:13" pos:end="69:74"><name pos:start="69:13" pos:end="69:23">kernel_size</name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:74"><name pos:start="69:27" pos:end="69:37">load_uimage</name><argument_list pos:start="69:38" pos:end="69:74">(<argument pos:start="69:39" pos:end="69:53"><expr pos:start="69:39" pos:end="69:53"><name pos:start="69:39" pos:end="69:53">kernel_filename</name></expr></argument>, <argument pos:start="69:56" pos:end="69:61"><expr pos:start="69:56" pos:end="69:61"><operator pos:start="69:56" pos:end="69:56">&amp;</operator><name pos:start="69:57" pos:end="69:61">entry</name></expr></argument>, <argument pos:start="69:64" pos:end="69:67"><expr pos:start="69:64" pos:end="69:67"><name pos:start="69:64" pos:end="69:67">NULL</name></expr></argument>, <argument pos:start="69:70" pos:end="69:73"><expr pos:start="69:70" pos:end="69:73"><name pos:start="69:70" pos:end="69:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="83:9">if <condition pos:start="73:12" pos:end="73:28">(<expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:23">kernel_size</name> <operator pos:start="73:25" pos:end="73:25">&lt;</operator> <literal type="number" pos:start="73:27" pos:end="73:27">0</literal></expr>)</condition> <block pos:start="73:30" pos:end="83:9">{<block_content pos:start="75:13" pos:end="81:37">

            <expr_stmt pos:start="75:13" pos:end="79:75"><expr pos:start="75:13" pos:end="79:74"><name pos:start="75:13" pos:end="75:23">kernel_size</name> <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="79:74"><name pos:start="75:27" pos:end="75:45">load_image_targphys</name><argument_list pos:start="75:46" pos:end="79:74">(<argument pos:start="75:47" pos:end="75:61"><expr pos:start="75:47" pos:end="75:61"><name pos:start="75:47" pos:end="75:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="77:47" pos:end="77:62"><expr pos:start="77:47" pos:end="77:62"><name pos:start="77:47" pos:end="77:62">KERNEL_LOAD_ADDR</name></expr></argument>,

                                              <argument pos:start="79:47" pos:end="79:73"><expr pos:start="79:47" pos:end="79:73"><name pos:start="79:47" pos:end="79:54">ram_size</name> <operator pos:start="79:56" pos:end="79:56">-</operator> <name pos:start="79:58" pos:end="79:73">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:37"><expr pos:start="81:13" pos:end="81:36"><name pos:start="81:13" pos:end="81:17">entry</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:36">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:28">(<expr pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:23">kernel_size</name> <operator pos:start="85:25" pos:end="85:25">&lt;</operator> <literal type="number" pos:start="85:27" pos:end="85:27">0</literal></expr>)</condition> <block pos:start="85:30" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:20">

            <expr_stmt pos:start="87:13" pos:end="89:37"><expr pos:start="87:13" pos:end="89:36"><call pos:start="87:13" pos:end="89:36"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="89:36">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:64"><expr pos:start="87:29" pos:end="87:64"><literal type="string" pos:start="87:29" pos:end="87:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="89:21" pos:end="89:35"><expr pos:start="89:21" pos:end="89:35"><name pos:start="89:21" pos:end="89:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:20"><expr pos:start="91:13" pos:end="91:19"><call pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:16">exit</name><argument_list pos:start="91:17" pos:end="91:19">(<argument pos:start="91:18" pos:end="91:18"><expr pos:start="91:18" pos:end="91:18"><literal type="number" pos:start="91:18" pos:end="91:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="99:5">else <block pos:start="95:12" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:18">

        <expr_stmt pos:start="97:9" pos:end="97:18"><expr pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:13">entry</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <literal type="number" pos:start="97:17" pos:end="97:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:20"><expr pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:11"><name pos:start="101:5" pos:end="101:7">env</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:11">pc</name></name> <operator pos:start="101:13" pos:end="101:13">=</operator> <name pos:start="101:15" pos:end="101:19">entry</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
