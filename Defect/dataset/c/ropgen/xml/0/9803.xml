<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9803.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">usb_host_open</name><parameter_list pos:start="1:25" pos:end="5:58">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:43"><name pos:start="1:26" pos:end="1:38">USBHostDevice</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">dev</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:56"><decl pos:start="1:46" pos:end="1:56"><type pos:start="1:46" pos:end="1:56"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:56">bus_num</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:33"><decl pos:start="3:26" pos:end="3:33"><type pos:start="3:26" pos:end="3:33"><name pos:start="3:26" pos:end="3:28">int</name></type> <name pos:start="3:30" pos:end="3:33">addr</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:51"><decl pos:start="3:36" pos:end="3:51"><type pos:start="3:36" pos:end="3:51"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:45">char</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">port</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:46"><decl pos:start="5:26" pos:end="5:46"><type pos:start="5:26" pos:end="5:46"><specifier pos:start="5:26" pos:end="5:30">const</specifier> <name pos:start="5:32" pos:end="5:35">char</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:46">prod_name</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:57"><decl pos:start="5:49" pos:end="5:57"><type pos:start="5:49" pos:end="5:57"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:57">speed</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="203:1">{<block_content pos:start="9:5" pos:end="201:14">

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">fd</name> <init pos:start="9:12" pos:end="9:15">= <expr pos:start="9:14" pos:end="9:15"><operator pos:start="9:14" pos:end="9:14">-</operator><literal type="number" pos:start="9:15" pos:end="9:15">1</literal></expr></init></decl>, <decl pos:start="9:18" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:20">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:47"><expr pos:start="13:5" pos:end="13:46"><call pos:start="13:5" pos:end="13:46"><name pos:start="13:5" pos:end="13:31">trace_usb_host_open_started</name><argument_list pos:start="13:32" pos:end="13:46">(<argument pos:start="13:33" pos:end="13:39"><expr pos:start="13:33" pos:end="13:39"><name pos:start="13:33" pos:end="13:39">bus_num</name></expr></argument>, <argument pos:start="13:42" pos:end="13:45"><expr pos:start="13:42" pos:end="13:45"><name pos:start="13:42" pos:end="13:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:11">dev</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:15">fd</name></name> <operator pos:start="17:17" pos:end="17:18">!=</operator> <operator pos:start="17:20" pos:end="17:20">-</operator><literal type="number" pos:start="17:21" pos:end="17:21">1</literal></expr>)</condition> <block pos:start="17:24" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:18">

        <goto pos:start="19:9" pos:end="19:18">goto <name pos:start="19:14" pos:end="19:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:6">fd</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:44"><name pos:start="25:10" pos:end="25:29">usb_host_open_device</name><argument_list pos:start="25:30" pos:end="25:44">(<argument pos:start="25:31" pos:end="25:37"><expr pos:start="25:31" pos:end="25:37"><name pos:start="25:31" pos:end="25:37">bus_num</name></expr></argument>, <argument pos:start="25:40" pos:end="25:43"><expr pos:start="25:40" pos:end="25:43"><name pos:start="25:40" pos:end="25:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">fd</name> <operator pos:start="27:12" pos:end="27:12">&lt;</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>)</condition> <block pos:start="27:17" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:18">

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><call pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:11">DPRINTF</name><argument_list pos:start="33:12" pos:end="33:37">(<argument pos:start="33:13" pos:end="33:31"><expr pos:start="33:13" pos:end="33:31"><literal type="string" pos:start="33:13" pos:end="33:31">"husb: opened %s\n"</literal></expr></argument>, <argument pos:start="33:34" pos:end="33:36"><expr pos:start="33:34" pos:end="33:36"><name pos:start="33:34" pos:end="33:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:7">dev</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:16">bus_num</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <name pos:start="37:20" pos:end="37:26">bus_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:7">dev</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:13">addr</name></name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:20">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:28"><expr pos:start="41:5" pos:end="41:27"><call pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:10">strcpy</name><argument_list pos:start="41:11" pos:end="41:27">(<argument pos:start="41:12" pos:end="41:20"><expr pos:start="41:12" pos:end="41:20"><name pos:start="41:12" pos:end="41:20"><name pos:start="41:12" pos:end="41:14">dev</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:20">port</name></name></expr></argument>, <argument pos:start="41:23" pos:end="41:26"><expr pos:start="41:23" pos:end="41:26"><name pos:start="41:23" pos:end="41:26">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:11"><name pos:start="43:5" pos:end="43:7">dev</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:11">fd</name></name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:16">fd</name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:37">/* read the device description */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:62"><expr pos:start="49:5" pos:end="49:61"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:7">dev</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:18">descr_len</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="49:61"><name pos:start="49:22" pos:end="49:25">read</name><argument_list pos:start="49:26" pos:end="49:61">(<argument pos:start="49:27" pos:end="49:28"><expr pos:start="49:27" pos:end="49:28"><name pos:start="49:27" pos:end="49:28">fd</name></expr></argument>, <argument pos:start="49:31" pos:end="49:40"><expr pos:start="49:31" pos:end="49:40"><name pos:start="49:31" pos:end="49:40"><name pos:start="49:31" pos:end="49:33">dev</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:40">descr</name></name></expr></argument>, <argument pos:start="49:43" pos:end="49:60"><expr pos:start="49:43" pos:end="49:60"><sizeof pos:start="49:43" pos:end="49:60">sizeof<argument_list pos:start="49:49" pos:end="49:60">(<argument pos:start="49:50" pos:end="49:59"><expr pos:start="49:50" pos:end="49:59"><name pos:start="49:50" pos:end="49:59"><name pos:start="49:50" pos:end="49:52">dev</name><operator pos:start="49:53" pos:end="49:54">-&gt;</operator><name pos:start="49:55" pos:end="49:59">descr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="62:0"><if pos:start="51:5" pos:end="62:0">if <condition pos:start="51:8" pos:end="51:28">(<expr pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:11">dev</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:22">descr_len</name></name> <operator pos:start="51:24" pos:end="51:25">&lt;=</operator> <literal type="number" pos:start="51:27" pos:end="51:27">0</literal></expr>)</condition> <block pos:start="51:30" pos:end="62:0">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:14">perror</name><argument_list pos:start="53:15" pos:end="53:50">(<argument pos:start="53:16" pos:end="53:49"><expr pos:start="53:16" pos:end="53:49"><literal type="string" pos:start="53:16" pos:end="53:49">"husb: reading device data failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="61:1" pos:end="61:12">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:12">DEBUG</name></cpp:ifdef>

    <block pos:start="63:5" pos:end="80:0">{<block_content pos:start="65:9" pos:end="75:65">

        <decl_stmt pos:start="65:9" pos:end="65:14"><decl pos:start="65:9" pos:end="65:13"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:13">x</name></decl>;</decl_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:65"><expr pos:start="67:9" pos:end="67:64"><call pos:start="67:9" pos:end="67:64"><name pos:start="67:9" pos:end="67:14">printf</name><argument_list pos:start="67:15" pos:end="67:64">(<argument pos:start="67:16" pos:end="67:63"><expr pos:start="67:16" pos:end="67:63"><literal type="string" pos:start="67:16" pos:end="67:63">"=== begin dumping device descriptor data ===\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="69:9" pos:end="73:9">for <control pos:start="69:13" pos:end="69:44">(<init pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:14">x</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</init> <condition pos:start="69:21" pos:end="69:39"><expr pos:start="69:21" pos:end="69:38"><name pos:start="69:21" pos:end="69:21">x</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <name pos:start="69:25" pos:end="69:38"><name pos:start="69:25" pos:end="69:27">dev</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:38">descr_len</name></name></expr>;</condition> <incr pos:start="69:41" pos:end="69:43"><expr pos:start="69:41" pos:end="69:43"><name pos:start="69:41" pos:end="69:41">x</name><operator pos:start="69:42" pos:end="69:43">++</operator></expr></incr>)</control> <block pos:start="69:46" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:43">

            <expr_stmt pos:start="71:13" pos:end="71:43"><expr pos:start="71:13" pos:end="71:42"><call pos:start="71:13" pos:end="71:42"><name pos:start="71:13" pos:end="71:18">printf</name><argument_list pos:start="71:19" pos:end="71:42">(<argument pos:start="71:20" pos:end="71:26"><expr pos:start="71:20" pos:end="71:26"><literal type="string" pos:start="71:20" pos:end="71:26">"%02x "</literal></expr></argument>, <argument pos:start="71:29" pos:end="71:41"><expr pos:start="71:29" pos:end="71:41"><name pos:start="71:29" pos:end="71:41"><name pos:start="71:29" pos:end="71:31">dev</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:38">descr</name><index pos:start="71:39" pos:end="71:41">[<expr pos:start="71:40" pos:end="71:40"><name pos:start="71:40" pos:end="71:40">x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="75:9" pos:end="75:65"><expr pos:start="75:9" pos:end="75:64"><call pos:start="75:9" pos:end="75:64"><name pos:start="75:9" pos:end="75:14">printf</name><argument_list pos:start="75:15" pos:end="75:64">(<argument pos:start="75:16" pos:end="75:63"><expr pos:start="75:16" pos:end="75:63"><literal type="string" pos:start="75:16" pos:end="75:63">"\n=== end dumping device descriptor data ===\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>





    <comment type="block" pos:start="85:5" pos:end="85:79">/* start unconfigured -- we'll wait for the guest to set a configuration */</comment>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:43">(<expr pos:start="87:9" pos:end="87:42"><operator pos:start="87:9" pos:end="87:9">!</operator><call pos:start="87:10" pos:end="87:42"><name pos:start="87:10" pos:end="87:34">usb_host_claim_interfaces</name><argument_list pos:start="87:35" pos:end="87:42">(<argument pos:start="87:36" pos:end="87:38"><expr pos:start="87:36" pos:end="87:38"><name pos:start="87:36" pos:end="87:38">dev</name></expr></argument>, <argument pos:start="87:41" pos:end="87:41"><expr pos:start="87:41" pos:end="87:41"><literal type="number" pos:start="87:41" pos:end="87:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:45" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:18">

        <goto pos:start="89:9" pos:end="89:18">goto <name pos:start="89:14" pos:end="89:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><call pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:15">usb_ep_init</name><argument_list pos:start="95:16" pos:end="95:26">(<argument pos:start="95:17" pos:end="95:25"><expr pos:start="95:17" pos:end="95:25"><operator pos:start="95:17" pos:end="95:17">&amp;</operator><name pos:start="95:18" pos:end="95:25"><name pos:start="95:18" pos:end="95:20">dev</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:25">dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:43"><expr pos:start="97:5" pos:end="97:42"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:42"><name pos:start="97:11" pos:end="97:37">usb_linux_update_endp_table</name><argument_list pos:start="97:38" pos:end="97:42">(<argument pos:start="97:39" pos:end="97:41"><expr pos:start="97:39" pos:end="97:41"><name pos:start="97:39" pos:end="97:41">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:12">(<expr pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">ret</name></expr>)</condition> <block pos:start="99:14" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:18">

        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="135:5"><if pos:start="107:5" pos:end="135:5">if <condition pos:start="107:8" pos:end="107:20">(<expr pos:start="107:9" pos:end="107:19"><name pos:start="107:9" pos:end="107:13">speed</name> <operator pos:start="107:15" pos:end="107:16">==</operator> <operator pos:start="107:18" pos:end="107:18">-</operator><literal type="number" pos:start="107:19" pos:end="107:19">1</literal></expr>)</condition> <block pos:start="107:22" pos:end="135:5">{<block_content pos:start="109:9" pos:end="133:9">

        <decl_stmt pos:start="109:9" pos:end="109:39"><decl pos:start="109:9" pos:end="109:38"><type pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:14">struct</name> <name pos:start="109:16" pos:end="109:35">usbdevfs_connectinfo</name></name></type> <name pos:start="109:37" pos:end="109:38">ci</name></decl>;</decl_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:51"><expr pos:start="113:9" pos:end="113:50"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:50"><name pos:start="113:15" pos:end="113:19">ioctl</name><argument_list pos:start="113:20" pos:end="113:50">(<argument pos:start="113:21" pos:end="113:22"><expr pos:start="113:21" pos:end="113:22"><name pos:start="113:21" pos:end="113:22">fd</name></expr></argument>, <argument pos:start="113:25" pos:end="113:44"><expr pos:start="113:25" pos:end="113:44"><name pos:start="113:25" pos:end="113:44">USBDEVFS_CONNECTINFO</name></expr></argument>, <argument pos:start="113:47" pos:end="113:49"><expr pos:start="113:47" pos:end="113:49"><operator pos:start="113:47" pos:end="113:47">&amp;</operator><name pos:start="113:48" pos:end="113:49">ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:22">

            <expr_stmt pos:start="117:13" pos:end="117:65"><expr pos:start="117:13" pos:end="117:64"><call pos:start="117:13" pos:end="117:64"><name pos:start="117:13" pos:end="117:18">perror</name><argument_list pos:start="117:19" pos:end="117:64">(<argument pos:start="117:20" pos:end="117:63"><expr pos:start="117:20" pos:end="117:63"><literal type="string" pos:start="117:20" pos:end="117:63">"usb_host_device_open: USBDEVFS_CONNECTINFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="119:13" pos:end="119:22">goto <name pos:start="119:18" pos:end="119:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:20">(<expr pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:14">ci</name><operator pos:start="125:15" pos:end="125:15">.</operator><name pos:start="125:16" pos:end="125:19">slow</name></name></expr>)</condition> <block pos:start="125:22" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:34">

            <expr_stmt pos:start="127:13" pos:end="127:34"><expr pos:start="127:13" pos:end="127:33"><name pos:start="127:13" pos:end="127:17">speed</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:33">USB_SPEED_LOW</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="133:9">else <block pos:start="129:16" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:35">

            <expr_stmt pos:start="131:13" pos:end="131:35"><expr pos:start="131:13" pos:end="131:34"><name pos:start="131:13" pos:end="131:17">speed</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:34">USB_SPEED_HIGH</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:27"><expr pos:start="137:5" pos:end="137:26"><name pos:start="137:5" pos:end="137:18"><name pos:start="137:5" pos:end="137:7">dev</name><operator pos:start="137:8" pos:end="137:9">-&gt;</operator><name pos:start="137:10" pos:end="137:12">dev</name><operator pos:start="137:13" pos:end="137:13">.</operator><name pos:start="137:14" pos:end="137:18">speed</name></name> <operator pos:start="137:20" pos:end="137:20">=</operator> <name pos:start="137:22" pos:end="137:26">speed</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:38"><expr pos:start="139:5" pos:end="139:37"><name pos:start="139:5" pos:end="139:22"><name pos:start="139:5" pos:end="139:7">dev</name><operator pos:start="139:8" pos:end="139:9">-&gt;</operator><name pos:start="139:10" pos:end="139:12">dev</name><operator pos:start="139:13" pos:end="139:13">.</operator><name pos:start="139:14" pos:end="139:22">speedmask</name></name> <operator pos:start="139:24" pos:end="139:24">=</operator> <operator pos:start="139:26" pos:end="139:26">(</operator><literal type="number" pos:start="139:27" pos:end="139:27">1</literal> <operator pos:start="139:29" pos:end="139:30">&lt;&lt;</operator> <name pos:start="139:32" pos:end="139:36">speed</name><operator pos:start="139:37" pos:end="139:37">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="145:5"><if pos:start="141:5" pos:end="145:5">if <condition pos:start="141:8" pos:end="141:77">(<expr pos:start="141:9" pos:end="141:76"><name pos:start="141:9" pos:end="141:22"><name pos:start="141:9" pos:end="141:11">dev</name><operator pos:start="141:12" pos:end="141:13">-&gt;</operator><name pos:start="141:14" pos:end="141:16">dev</name><operator pos:start="141:17" pos:end="141:17">.</operator><name pos:start="141:18" pos:end="141:22">speed</name></name> <operator pos:start="141:24" pos:end="141:25">==</operator> <name pos:start="141:27" pos:end="141:40">USB_SPEED_HIGH</name> <operator pos:start="141:42" pos:end="141:43">&amp;&amp;</operator> <call pos:start="141:45" pos:end="141:76"><name pos:start="141:45" pos:end="141:71">usb_linux_full_speed_compat</name><argument_list pos:start="141:72" pos:end="141:76">(<argument pos:start="141:73" pos:end="141:75"><expr pos:start="141:73" pos:end="141:75"><name pos:start="141:73" pos:end="141:75">dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:79" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:50">

        <expr_stmt pos:start="143:9" pos:end="143:50"><expr pos:start="143:9" pos:end="143:49"><name pos:start="143:9" pos:end="143:26"><name pos:start="143:9" pos:end="143:11">dev</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:16">dev</name><operator pos:start="143:17" pos:end="143:17">.</operator><name pos:start="143:18" pos:end="143:26">speedmask</name></name> <operator pos:start="143:28" pos:end="143:29">|=</operator> <name pos:start="143:31" pos:end="143:49">USB_SPEED_MASK_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:47"><expr pos:start="149:5" pos:end="149:46"><call pos:start="149:5" pos:end="149:46"><name pos:start="149:5" pos:end="149:31">trace_usb_host_open_success</name><argument_list pos:start="149:32" pos:end="149:46">(<argument pos:start="149:33" pos:end="149:39"><expr pos:start="149:33" pos:end="149:39"><name pos:start="149:33" pos:end="149:39">bus_num</name></expr></argument>, <argument pos:start="149:42" pos:end="149:45"><expr pos:start="149:42" pos:end="149:45"><name pos:start="149:42" pos:end="149:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="153:5" pos:end="165:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:43">(<expr pos:start="153:9" pos:end="153:42"><operator pos:start="153:9" pos:end="153:9">!</operator><name pos:start="153:10" pos:end="153:18">prod_name</name> <operator pos:start="153:20" pos:end="153:21">||</operator> <name pos:start="153:23" pos:end="153:34"><name pos:start="153:23" pos:end="153:31">prod_name</name><index pos:start="153:32" pos:end="153:34">[<expr pos:start="153:33" pos:end="153:33"><literal type="number" pos:start="153:33" pos:end="153:33">0</literal></expr>]</index></name> <operator pos:start="153:36" pos:end="153:37">==</operator> <literal type="char" pos:start="153:39" pos:end="153:42">'\0'</literal></expr>)</condition> <block pos:start="153:45" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:46">

        <expr_stmt pos:start="155:9" pos:end="157:46"><expr pos:start="155:9" pos:end="157:45"><call pos:start="155:9" pos:end="157:45"><name pos:start="155:9" pos:end="155:16">snprintf</name><argument_list pos:start="155:17" pos:end="157:45">(<argument pos:start="155:18" pos:end="155:38"><expr pos:start="155:18" pos:end="155:38"><name pos:start="155:18" pos:end="155:38"><name pos:start="155:18" pos:end="155:20">dev</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:25">dev</name><operator pos:start="155:26" pos:end="155:26">.</operator><name pos:start="155:27" pos:end="155:38">product_desc</name></name></expr></argument>, <argument pos:start="155:41" pos:end="155:69"><expr pos:start="155:41" pos:end="155:69"><sizeof pos:start="155:41" pos:end="155:69">sizeof<argument_list pos:start="155:47" pos:end="155:69">(<argument pos:start="155:48" pos:end="155:68"><expr pos:start="155:48" pos:end="155:68"><name pos:start="155:48" pos:end="155:68"><name pos:start="155:48" pos:end="155:50">dev</name><operator pos:start="155:51" pos:end="155:52">-&gt;</operator><name pos:start="155:53" pos:end="155:55">dev</name><operator pos:start="155:56" pos:end="155:56">.</operator><name pos:start="155:57" pos:end="155:68">product_desc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="157:18" pos:end="157:29"><expr pos:start="157:18" pos:end="157:29"><literal type="string" pos:start="157:18" pos:end="157:29">"host:%d.%d"</literal></expr></argument>, <argument pos:start="157:32" pos:end="157:38"><expr pos:start="157:32" pos:end="157:38"><name pos:start="157:32" pos:end="157:38">bus_num</name></expr></argument>, <argument pos:start="157:41" pos:end="157:44"><expr pos:start="157:41" pos:end="157:44"><name pos:start="157:41" pos:end="157:44">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="159:7" pos:end="165:5">else <block pos:start="159:12" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:27">

        <expr_stmt pos:start="161:9" pos:end="163:27"><expr pos:start="161:9" pos:end="163:26"><call pos:start="161:9" pos:end="163:26"><name pos:start="161:9" pos:end="161:15">pstrcpy</name><argument_list pos:start="161:16" pos:end="163:26">(<argument pos:start="161:17" pos:end="161:37"><expr pos:start="161:17" pos:end="161:37"><name pos:start="161:17" pos:end="161:37"><name pos:start="161:17" pos:end="161:19">dev</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:24">dev</name><operator pos:start="161:25" pos:end="161:25">.</operator><name pos:start="161:26" pos:end="161:37">product_desc</name></name></expr></argument>, <argument pos:start="161:40" pos:end="161:68"><expr pos:start="161:40" pos:end="161:68"><sizeof pos:start="161:40" pos:end="161:68">sizeof<argument_list pos:start="161:46" pos:end="161:68">(<argument pos:start="161:47" pos:end="161:67"><expr pos:start="161:47" pos:end="161:67"><name pos:start="161:47" pos:end="161:67"><name pos:start="161:47" pos:end="161:49">dev</name><operator pos:start="161:50" pos:end="161:51">-&gt;</operator><name pos:start="161:52" pos:end="161:54">dev</name><operator pos:start="161:55" pos:end="161:55">.</operator><name pos:start="161:56" pos:end="161:67">product_desc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="163:17" pos:end="163:25"><expr pos:start="163:17" pos:end="163:25"><name pos:start="163:17" pos:end="163:25">prod_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:39"><expr pos:start="169:5" pos:end="169:38"><name pos:start="169:5" pos:end="169:7">ret</name> <operator pos:start="169:9" pos:end="169:9">=</operator> <call pos:start="169:11" pos:end="169:38"><name pos:start="169:11" pos:end="169:27">usb_device_attach</name><argument_list pos:start="169:28" pos:end="169:38">(<argument pos:start="169:29" pos:end="169:37"><expr pos:start="169:29" pos:end="169:37"><operator pos:start="169:29" pos:end="169:29">&amp;</operator><name pos:start="169:30" pos:end="169:37"><name pos:start="169:30" pos:end="169:32">dev</name><operator pos:start="169:33" pos:end="169:34">-&gt;</operator><name pos:start="169:35" pos:end="169:37">dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="175:5"><if pos:start="171:5" pos:end="175:5">if <condition pos:start="171:8" pos:end="171:12">(<expr pos:start="171:9" pos:end="171:11"><name pos:start="171:9" pos:end="171:11">ret</name></expr>)</condition> <block pos:start="171:14" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:18">

        <goto pos:start="173:9" pos:end="173:18">goto <name pos:start="173:14" pos:end="173:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:68">/* USB devio uses 'write' flag to check for async completions */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:60"><expr pos:start="181:5" pos:end="181:59"><call pos:start="181:5" pos:end="181:59"><name pos:start="181:5" pos:end="181:23">qemu_set_fd_handler</name><argument_list pos:start="181:24" pos:end="181:59">(<argument pos:start="181:25" pos:end="181:31"><expr pos:start="181:25" pos:end="181:31"><name pos:start="181:25" pos:end="181:31"><name pos:start="181:25" pos:end="181:27">dev</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:31">fd</name></name></expr></argument>, <argument pos:start="181:34" pos:end="181:37"><expr pos:start="181:34" pos:end="181:37"><name pos:start="181:34" pos:end="181:37">NULL</name></expr></argument>, <argument pos:start="181:40" pos:end="181:53"><expr pos:start="181:40" pos:end="181:53"><name pos:start="181:40" pos:end="181:53">async_complete</name></expr></argument>, <argument pos:start="181:56" pos:end="181:58"><expr pos:start="181:56" pos:end="181:58"><name pos:start="181:56" pos:end="181:58">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="185:5" pos:end="185:13">return <expr pos:start="185:12" pos:end="185:12"><literal type="number" pos:start="185:12" pos:end="185:12">0</literal></expr>;</return>



<label pos:start="189:1" pos:end="189:5"><name pos:start="189:1" pos:end="189:4">fail</name>:</label>

    <expr_stmt pos:start="191:5" pos:end="191:47"><expr pos:start="191:5" pos:end="191:46"><call pos:start="191:5" pos:end="191:46"><name pos:start="191:5" pos:end="191:31">trace_usb_host_open_failure</name><argument_list pos:start="191:32" pos:end="191:46">(<argument pos:start="191:33" pos:end="191:39"><expr pos:start="191:33" pos:end="191:39"><name pos:start="191:33" pos:end="191:39">bus_num</name></expr></argument>, <argument pos:start="191:42" pos:end="191:45"><expr pos:start="191:42" pos:end="191:45"><name pos:start="191:42" pos:end="191:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="199:5"><if pos:start="193:5" pos:end="199:5">if <condition pos:start="193:8" pos:end="193:22">(<expr pos:start="193:9" pos:end="193:21"><name pos:start="193:9" pos:end="193:15"><name pos:start="193:9" pos:end="193:11">dev</name><operator pos:start="193:12" pos:end="193:13">-&gt;</operator><name pos:start="193:14" pos:end="193:15">fd</name></name> <operator pos:start="193:17" pos:end="193:18">!=</operator> <operator pos:start="193:20" pos:end="193:20">-</operator><literal type="number" pos:start="193:21" pos:end="193:21">1</literal></expr>)</condition> <block pos:start="193:24" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:21">

        <expr_stmt pos:start="195:9" pos:end="195:23"><expr pos:start="195:9" pos:end="195:22"><call pos:start="195:9" pos:end="195:22"><name pos:start="195:9" pos:end="195:13">close</name><argument_list pos:start="195:14" pos:end="195:22">(<argument pos:start="195:15" pos:end="195:21"><expr pos:start="195:15" pos:end="195:21"><name pos:start="195:15" pos:end="195:21"><name pos:start="195:15" pos:end="195:17">dev</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:21">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:21"><expr pos:start="197:9" pos:end="197:20"><name pos:start="197:9" pos:end="197:15"><name pos:start="197:9" pos:end="197:11">dev</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:15">fd</name></name> <operator pos:start="197:17" pos:end="197:17">=</operator> <operator pos:start="197:19" pos:end="197:19">-</operator><literal type="number" pos:start="197:20" pos:end="197:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="201:5" pos:end="201:14">return <expr pos:start="201:12" pos:end="201:13"><operator pos:start="201:12" pos:end="201:12">-</operator><literal type="number" pos:start="201:13" pos:end="201:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
