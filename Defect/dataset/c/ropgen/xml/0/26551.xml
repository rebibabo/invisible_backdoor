<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26551.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">usb_xhci_initfn</name><parameter_list pos:start="1:27" pos:end="1:49">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:33">struct</name> <name pos:start="1:35" pos:end="1:43">PCIDevice</name></name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:13">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">XHCIState</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:19">xhci</name> <init pos:start="9:21" pos:end="9:56">= <expr pos:start="9:23" pos:end="9:56"><call pos:start="9:23" pos:end="9:56"><name pos:start="9:23" pos:end="9:31">DO_UPCAST</name><argument_list pos:start="9:32" pos:end="9:56">(<argument pos:start="9:33" pos:end="9:41"><expr pos:start="9:33" pos:end="9:41"><name pos:start="9:33" pos:end="9:41">XHCIState</name></expr></argument>, <argument pos:start="9:44" pos:end="9:50"><expr pos:start="9:44" pos:end="9:50"><name pos:start="9:44" pos:end="9:50">pci_dev</name></expr></argument>, <argument pos:start="9:53" pos:end="9:55"><expr pos:start="9:53" pos:end="9:55"><name pos:start="9:53" pos:end="9:55">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:48"><expr pos:start="13:5" pos:end="13:47"><name pos:start="13:5" pos:end="13:40"><name pos:start="13:5" pos:end="13:8">xhci</name><operator pos:start="13:9" pos:end="13:10">-&gt;</operator><name pos:start="13:11" pos:end="13:17">pci_dev</name><operator pos:start="13:18" pos:end="13:18">.</operator><name pos:start="13:19" pos:end="13:24">config</name><index pos:start="13:25" pos:end="13:40">[<expr pos:start="13:26" pos:end="13:39"><name pos:start="13:26" pos:end="13:39">PCI_CLASS_PROG</name></expr>]</index></name> <operator pos:start="13:42" pos:end="13:42">=</operator> <literal type="number" pos:start="13:44" pos:end="13:47">0x30</literal></expr>;</expr_stmt>    <comment type="block" pos:start="13:53" pos:end="13:62">/* xHCI */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:51"><expr pos:start="15:5" pos:end="15:50"><name pos:start="15:5" pos:end="15:43"><name pos:start="15:5" pos:end="15:8">xhci</name><operator pos:start="15:9" pos:end="15:10">-&gt;</operator><name pos:start="15:11" pos:end="15:17">pci_dev</name><operator pos:start="15:18" pos:end="15:18">.</operator><name pos:start="15:19" pos:end="15:24">config</name><index pos:start="15:25" pos:end="15:43">[<expr pos:start="15:26" pos:end="15:42"><name pos:start="15:26" pos:end="15:42">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="15:45" pos:end="15:45">=</operator> <literal type="number" pos:start="15:47" pos:end="15:50">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="15:53" pos:end="15:73">/* interrupt pin 1 */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:53"><expr pos:start="17:5" pos:end="17:52"><name pos:start="17:5" pos:end="17:45"><name pos:start="17:5" pos:end="17:8">xhci</name><operator pos:start="17:9" pos:end="17:10">-&gt;</operator><name pos:start="17:11" pos:end="17:17">pci_dev</name><operator pos:start="17:18" pos:end="17:18">.</operator><name pos:start="17:19" pos:end="17:24">config</name><index pos:start="17:25" pos:end="17:45">[<expr pos:start="17:26" pos:end="17:44"><name pos:start="17:26" pos:end="17:44">PCI_CACHE_LINE_SIZE</name></expr>]</index></name> <operator pos:start="17:47" pos:end="17:47">=</operator> <literal type="number" pos:start="17:49" pos:end="17:52">0x10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:38"><expr pos:start="19:5" pos:end="19:37"><name pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:8">xhci</name><operator pos:start="19:9" pos:end="19:10">-&gt;</operator><name pos:start="19:11" pos:end="19:17">pci_dev</name><operator pos:start="19:18" pos:end="19:18">.</operator><name pos:start="19:19" pos:end="19:24">config</name><index pos:start="19:25" pos:end="19:30">[<expr pos:start="19:26" pos:end="19:29"><literal type="number" pos:start="19:26" pos:end="19:29">0x60</literal></expr>]</index></name> <operator pos:start="19:32" pos:end="19:32">=</operator> <literal type="number" pos:start="19:34" pos:end="19:37">0x30</literal></expr>;</expr_stmt> <comment type="block" pos:start="19:40" pos:end="19:59">/* release number */</comment>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><call pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:17">usb_xhci_init</name><argument_list pos:start="23:18" pos:end="23:35">(<argument pos:start="23:19" pos:end="23:22"><expr pos:start="23:19" pos:end="23:22"><name pos:start="23:19" pos:end="23:22">xhci</name></expr></argument>, <argument pos:start="23:25" pos:end="23:34"><expr pos:start="23:25" pos:end="23:34"><operator pos:start="23:25" pos:end="23:25">&amp;</operator><name pos:start="23:26" pos:end="23:34"><name pos:start="23:26" pos:end="23:28">dev</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:34">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:34">(<expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:12">xhci</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:22">numintrs</name></name> <operator pos:start="27:24" pos:end="27:24">&gt;</operator> <name pos:start="27:26" pos:end="27:33">MAXINTRS</name></expr>)</condition> <block pos:start="27:36" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:34">

        <expr_stmt pos:start="29:9" pos:end="29:34"><expr pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:12">xhci</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:22">numintrs</name></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:33">MAXINTRS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:27">(<expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:12">xhci</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:22">numintrs</name></name> <operator pos:start="33:24" pos:end="33:24">&lt;</operator> <literal type="number" pos:start="33:26" pos:end="33:26">1</literal></expr>)</condition> <block pos:start="33:29" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:27">

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:12">xhci</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:22">numintrs</name></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <literal type="number" pos:start="35:26" pos:end="35:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:34">(<expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:12">xhci</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:22">numslots</name></name> <operator pos:start="39:24" pos:end="39:24">&gt;</operator> <name pos:start="39:26" pos:end="39:33">MAXSLOTS</name></expr>)</condition> <block pos:start="39:36" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:34">

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:12">xhci</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:22">numslots</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:33">MAXSLOTS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:27">(<expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:12">xhci</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:22">numslots</name></name> <operator pos:start="45:24" pos:end="45:24">&lt;</operator> <literal type="number" pos:start="45:26" pos:end="45:26">1</literal></expr>)</condition> <block pos:start="45:29" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:27">

        <expr_stmt pos:start="47:9" pos:end="47:27"><expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:12">xhci</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:22">numslots</name></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <literal type="number" pos:start="47:26" pos:end="47:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:78"><expr pos:start="53:5" pos:end="53:77"><name pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:8">xhci</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:22">mfwrap_timer</name></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <call pos:start="53:26" pos:end="53:77"><name pos:start="53:26" pos:end="53:42">qemu_new_timer_ns</name><argument_list pos:start="53:43" pos:end="53:77">(<argument pos:start="53:44" pos:end="53:51"><expr pos:start="53:44" pos:end="53:51"><name pos:start="53:44" pos:end="53:51">vm_clock</name></expr></argument>, <argument pos:start="53:54" pos:end="53:70"><expr pos:start="53:54" pos:end="53:70"><name pos:start="53:54" pos:end="53:70">xhci_mfwrap_timer</name></expr></argument>, <argument pos:start="53:73" pos:end="53:76"><expr pos:start="53:73" pos:end="53:76"><name pos:start="53:73" pos:end="53:76">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:8">xhci</name><operator pos:start="57:9" pos:end="57:10">-&gt;</operator><name pos:start="57:11" pos:end="57:13">irq</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <name pos:start="57:17" pos:end="57:36"><name pos:start="57:17" pos:end="57:20">xhci</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:29">pci_dev</name><operator pos:start="57:30" pos:end="57:30">.</operator><name pos:start="57:31" pos:end="57:33">irq</name><index pos:start="57:34" pos:end="57:36">[<expr pos:start="57:35" pos:end="57:35"><literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:53"><expr pos:start="61:5" pos:end="61:52"><call pos:start="61:5" pos:end="61:52"><name pos:start="61:5" pos:end="61:22">memory_region_init</name><argument_list pos:start="61:23" pos:end="61:52">(<argument pos:start="61:24" pos:end="61:33"><expr pos:start="61:24" pos:end="61:33"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:33"><name pos:start="61:25" pos:end="61:28">xhci</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:33">mem</name></name></expr></argument>, <argument pos:start="61:36" pos:end="61:41"><expr pos:start="61:36" pos:end="61:41"><literal type="string" pos:start="61:36" pos:end="61:41">"xhci"</literal></expr></argument>, <argument pos:start="61:44" pos:end="61:51"><expr pos:start="61:44" pos:end="61:51"><name pos:start="61:44" pos:end="61:51">LEN_REGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:51"><expr pos:start="63:5" pos:end="65:50"><call pos:start="63:5" pos:end="65:50"><name pos:start="63:5" pos:end="63:25">memory_region_init_io</name><argument_list pos:start="63:26" pos:end="65:50">(<argument pos:start="63:27" pos:end="63:40"><expr pos:start="63:27" pos:end="63:40"><operator pos:start="63:27" pos:end="63:27">&amp;</operator><name pos:start="63:28" pos:end="63:40"><name pos:start="63:28" pos:end="63:31">xhci</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:40">mem_cap</name></name></expr></argument>, <argument pos:start="63:43" pos:end="63:55"><expr pos:start="63:43" pos:end="63:55"><operator pos:start="63:43" pos:end="63:43">&amp;</operator><name pos:start="63:44" pos:end="63:55">xhci_cap_ops</name></expr></argument>, <argument pos:start="63:58" pos:end="63:61"><expr pos:start="63:58" pos:end="63:61"><name pos:start="63:58" pos:end="63:61">xhci</name></expr></argument>,

                          <argument pos:start="65:27" pos:end="65:40"><expr pos:start="65:27" pos:end="65:40"><literal type="string" pos:start="65:27" pos:end="65:40">"capabilities"</literal></expr></argument>, <argument pos:start="65:43" pos:end="65:49"><expr pos:start="65:43" pos:end="65:49"><name pos:start="65:43" pos:end="65:49">LEN_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="69:48"><expr pos:start="67:5" pos:end="69:47"><call pos:start="67:5" pos:end="69:47"><name pos:start="67:5" pos:end="67:25">memory_region_init_io</name><argument_list pos:start="67:26" pos:end="69:47">(<argument pos:start="67:27" pos:end="67:41"><expr pos:start="67:27" pos:end="67:41"><operator pos:start="67:27" pos:end="67:27">&amp;</operator><name pos:start="67:28" pos:end="67:41"><name pos:start="67:28" pos:end="67:31">xhci</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:41">mem_oper</name></name></expr></argument>, <argument pos:start="67:44" pos:end="67:57"><expr pos:start="67:44" pos:end="67:57"><operator pos:start="67:44" pos:end="67:44">&amp;</operator><name pos:start="67:45" pos:end="67:57">xhci_oper_ops</name></expr></argument>, <argument pos:start="67:60" pos:end="67:63"><expr pos:start="67:60" pos:end="67:63"><name pos:start="67:60" pos:end="67:63">xhci</name></expr></argument>,

                          <argument pos:start="69:27" pos:end="69:39"><expr pos:start="69:27" pos:end="69:39"><literal type="string" pos:start="69:27" pos:end="69:39">"operational"</literal></expr></argument>, <argument pos:start="69:42" pos:end="69:46"><expr pos:start="69:42" pos:end="69:46"><literal type="number" pos:start="69:42" pos:end="69:46">0x400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="73:50"><expr pos:start="71:5" pos:end="73:49"><call pos:start="71:5" pos:end="73:49"><name pos:start="71:5" pos:end="71:25">memory_region_init_io</name><argument_list pos:start="71:26" pos:end="73:49">(<argument pos:start="71:27" pos:end="71:44"><expr pos:start="71:27" pos:end="71:44"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:44"><name pos:start="71:28" pos:end="71:31">xhci</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:44">mem_runtime</name></name></expr></argument>, <argument pos:start="71:47" pos:end="71:63"><expr pos:start="71:47" pos:end="71:63"><operator pos:start="71:47" pos:end="71:47">&amp;</operator><name pos:start="71:48" pos:end="71:63">xhci_runtime_ops</name></expr></argument>, <argument pos:start="71:66" pos:end="71:69"><expr pos:start="71:66" pos:end="71:69"><name pos:start="71:66" pos:end="71:69">xhci</name></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:35"><expr pos:start="73:27" pos:end="73:35"><literal type="string" pos:start="73:27" pos:end="73:35">"runtime"</literal></expr></argument>, <argument pos:start="73:38" pos:end="73:48"><expr pos:start="73:38" pos:end="73:48"><name pos:start="73:38" pos:end="73:48">LEN_RUNTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="77:52"><expr pos:start="75:5" pos:end="77:51"><call pos:start="75:5" pos:end="77:51"><name pos:start="75:5" pos:end="75:25">memory_region_init_io</name><argument_list pos:start="75:26" pos:end="77:51">(<argument pos:start="75:27" pos:end="75:45"><expr pos:start="75:27" pos:end="75:45"><operator pos:start="75:27" pos:end="75:27">&amp;</operator><name pos:start="75:28" pos:end="75:45"><name pos:start="75:28" pos:end="75:31">xhci</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:45">mem_doorbell</name></name></expr></argument>, <argument pos:start="75:48" pos:end="75:65"><expr pos:start="75:48" pos:end="75:65"><operator pos:start="75:48" pos:end="75:48">&amp;</operator><name pos:start="75:49" pos:end="75:65">xhci_doorbell_ops</name></expr></argument>, <argument pos:start="75:68" pos:end="75:71"><expr pos:start="75:68" pos:end="75:71"><name pos:start="75:68" pos:end="75:71">xhci</name></expr></argument>,

                          <argument pos:start="77:27" pos:end="77:36"><expr pos:start="77:27" pos:end="77:36"><literal type="string" pos:start="77:27" pos:end="77:36">"doorbell"</literal></expr></argument>, <argument pos:start="77:39" pos:end="77:50"><expr pos:start="77:39" pos:end="77:50"><name pos:start="77:39" pos:end="77:50">LEN_DOORBELL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:74"><expr pos:start="81:5" pos:end="81:73"><call pos:start="81:5" pos:end="81:73"><name pos:start="81:5" pos:end="81:31">memory_region_add_subregion</name><argument_list pos:start="81:32" pos:end="81:73">(<argument pos:start="81:33" pos:end="81:42"><expr pos:start="81:33" pos:end="81:42"><operator pos:start="81:33" pos:end="81:33">&amp;</operator><name pos:start="81:34" pos:end="81:42"><name pos:start="81:34" pos:end="81:37">xhci</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:42">mem</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:45"><expr pos:start="81:45" pos:end="81:45"><literal type="number" pos:start="81:45" pos:end="81:45">0</literal></expr></argument>,            <argument pos:start="81:59" pos:end="81:72"><expr pos:start="81:59" pos:end="81:72"><operator pos:start="81:59" pos:end="81:59">&amp;</operator><name pos:start="81:60" pos:end="81:72"><name pos:start="81:60" pos:end="81:63">xhci</name><operator pos:start="81:64" pos:end="81:65">-&gt;</operator><name pos:start="81:66" pos:end="81:72">mem_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:75"><expr pos:start="83:5" pos:end="83:74"><call pos:start="83:5" pos:end="83:74"><name pos:start="83:5" pos:end="83:31">memory_region_add_subregion</name><argument_list pos:start="83:32" pos:end="83:74">(<argument pos:start="83:33" pos:end="83:42"><expr pos:start="83:33" pos:end="83:42"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:42"><name pos:start="83:34" pos:end="83:37">xhci</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:42">mem</name></name></expr></argument>, <argument pos:start="83:45" pos:end="83:52"><expr pos:start="83:45" pos:end="83:52"><name pos:start="83:45" pos:end="83:52">OFF_OPER</name></expr></argument>,     <argument pos:start="83:59" pos:end="83:73"><expr pos:start="83:59" pos:end="83:73"><operator pos:start="83:59" pos:end="83:59">&amp;</operator><name pos:start="83:60" pos:end="83:73"><name pos:start="83:60" pos:end="83:63">xhci</name><operator pos:start="83:64" pos:end="83:65">-&gt;</operator><name pos:start="83:66" pos:end="83:73">mem_oper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:78"><expr pos:start="85:5" pos:end="85:77"><call pos:start="85:5" pos:end="85:77"><name pos:start="85:5" pos:end="85:31">memory_region_add_subregion</name><argument_list pos:start="85:32" pos:end="85:77">(<argument pos:start="85:33" pos:end="85:42"><expr pos:start="85:33" pos:end="85:42"><operator pos:start="85:33" pos:end="85:33">&amp;</operator><name pos:start="85:34" pos:end="85:42"><name pos:start="85:34" pos:end="85:37">xhci</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:42">mem</name></name></expr></argument>, <argument pos:start="85:45" pos:end="85:55"><expr pos:start="85:45" pos:end="85:55"><name pos:start="85:45" pos:end="85:55">OFF_RUNTIME</name></expr></argument>,  <argument pos:start="85:59" pos:end="85:76"><expr pos:start="85:59" pos:end="85:76"><operator pos:start="85:59" pos:end="85:59">&amp;</operator><name pos:start="85:60" pos:end="85:76"><name pos:start="85:60" pos:end="85:63">xhci</name><operator pos:start="85:64" pos:end="85:65">-&gt;</operator><name pos:start="85:66" pos:end="85:76">mem_runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:79"><expr pos:start="87:5" pos:end="87:78"><call pos:start="87:5" pos:end="87:78"><name pos:start="87:5" pos:end="87:31">memory_region_add_subregion</name><argument_list pos:start="87:32" pos:end="87:78">(<argument pos:start="87:33" pos:end="87:42"><expr pos:start="87:33" pos:end="87:42"><operator pos:start="87:33" pos:end="87:33">&amp;</operator><name pos:start="87:34" pos:end="87:42"><name pos:start="87:34" pos:end="87:37">xhci</name><operator pos:start="87:38" pos:end="87:39">-&gt;</operator><name pos:start="87:40" pos:end="87:42">mem</name></name></expr></argument>, <argument pos:start="87:45" pos:end="87:56"><expr pos:start="87:45" pos:end="87:56"><name pos:start="87:45" pos:end="87:56">OFF_DOORBELL</name></expr></argument>, <argument pos:start="87:59" pos:end="87:77"><expr pos:start="87:59" pos:end="87:77"><operator pos:start="87:59" pos:end="87:59">&amp;</operator><name pos:start="87:60" pos:end="87:77"><name pos:start="87:60" pos:end="87:63">xhci</name><operator pos:start="87:64" pos:end="87:65">-&gt;</operator><name pos:start="87:66" pos:end="87:77">mem_doorbell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="91:5" pos:end="105:5">for <control pos:start="91:9" pos:end="91:40">(<init pos:start="91:10" pos:end="91:15"><expr pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>;</init> <condition pos:start="91:17" pos:end="91:35"><expr pos:start="91:17" pos:end="91:34"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:19">&lt;</operator> <name pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:24">xhci</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:34">numports</name></name></expr>;</condition> <incr pos:start="91:37" pos:end="91:39"><expr pos:start="91:37" pos:end="91:39"><name pos:start="91:37" pos:end="91:37">i</name><operator pos:start="91:38" pos:end="91:39">++</operator></expr></incr>)</control> <block pos:start="91:42" pos:end="105:5">{<block_content pos:start="93:9" pos:end="103:68">

        <decl_stmt pos:start="93:9" pos:end="93:41"><decl pos:start="93:9" pos:end="93:40"><type pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:16">XHCIPort</name> <modifier pos:start="93:18" pos:end="93:18">*</modifier></type><name pos:start="93:19" pos:end="93:22">port</name> <init pos:start="93:24" pos:end="93:40">= <expr pos:start="93:26" pos:end="93:40"><operator pos:start="93:26" pos:end="93:26">&amp;</operator><name pos:start="93:27" pos:end="93:40"><name pos:start="93:27" pos:end="93:30">xhci</name><operator pos:start="93:31" pos:end="93:32">-&gt;</operator><name pos:start="93:33" pos:end="93:37">ports</name><index pos:start="93:38" pos:end="93:40">[<expr pos:start="93:39" pos:end="93:39"><name pos:start="93:39" pos:end="93:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="95:54"><decl pos:start="95:9" pos:end="95:53"><type pos:start="95:9" pos:end="95:16"><name pos:start="95:9" pos:end="95:16">uint32_t</name></type> <name pos:start="95:18" pos:end="95:23">offset</name> <init pos:start="95:25" pos:end="95:53">= <expr pos:start="95:27" pos:end="95:53"><name pos:start="95:27" pos:end="95:34">OFF_OPER</name> <operator pos:start="95:36" pos:end="95:36">+</operator> <literal type="number" pos:start="95:38" pos:end="95:44">0x400</literal> <operator pos:start="95:44" pos:end="95:44">+</operator> <literal type="number" pos:start="95:46" pos:end="95:49">0x10</literal> <operator pos:start="95:51" pos:end="95:51">*</operator> <name pos:start="95:53" pos:end="95:53">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:26"><expr pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:12">port</name><operator pos:start="97:13" pos:end="97:14">-&gt;</operator><name pos:start="97:15" pos:end="97:18">xhci</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:25">xhci</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="101:48"><expr pos:start="99:9" pos:end="101:47"><call pos:start="99:9" pos:end="101:47"><name pos:start="99:9" pos:end="99:29">memory_region_init_io</name><argument_list pos:start="99:30" pos:end="101:47">(<argument pos:start="99:31" pos:end="99:40"><expr pos:start="99:31" pos:end="99:40"><operator pos:start="99:31" pos:end="99:31">&amp;</operator><name pos:start="99:32" pos:end="99:40"><name pos:start="99:32" pos:end="99:35">port</name><operator pos:start="99:36" pos:end="99:37">-&gt;</operator><name pos:start="99:38" pos:end="99:40">mem</name></name></expr></argument>, <argument pos:start="99:43" pos:end="99:56"><expr pos:start="99:43" pos:end="99:56"><operator pos:start="99:43" pos:end="99:43">&amp;</operator><name pos:start="99:44" pos:end="99:56">xhci_port_ops</name></expr></argument>, <argument pos:start="99:59" pos:end="99:62"><expr pos:start="99:59" pos:end="99:62"><name pos:start="99:59" pos:end="99:62">port</name></expr></argument>,

                              <argument pos:start="101:31" pos:end="101:40"><expr pos:start="101:31" pos:end="101:40"><name pos:start="101:31" pos:end="101:40"><name pos:start="101:31" pos:end="101:34">port</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:40">name</name></name></expr></argument>, <argument pos:start="101:43" pos:end="101:46"><expr pos:start="101:43" pos:end="101:46"><literal type="number" pos:start="101:43" pos:end="101:46">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:68"><expr pos:start="103:9" pos:end="103:67"><call pos:start="103:9" pos:end="103:67"><name pos:start="103:9" pos:end="103:35">memory_region_add_subregion</name><argument_list pos:start="103:36" pos:end="103:67">(<argument pos:start="103:37" pos:end="103:46"><expr pos:start="103:37" pos:end="103:46"><operator pos:start="103:37" pos:end="103:37">&amp;</operator><name pos:start="103:38" pos:end="103:46"><name pos:start="103:38" pos:end="103:41">xhci</name><operator pos:start="103:42" pos:end="103:43">-&gt;</operator><name pos:start="103:44" pos:end="103:46">mem</name></name></expr></argument>, <argument pos:start="103:49" pos:end="103:54"><expr pos:start="103:49" pos:end="103:54"><name pos:start="103:49" pos:end="103:54">offset</name></expr></argument>, <argument pos:start="103:57" pos:end="103:66"><expr pos:start="103:57" pos:end="103:66"><operator pos:start="103:57" pos:end="103:57">&amp;</operator><name pos:start="103:58" pos:end="103:66"><name pos:start="103:58" pos:end="103:61">port</name><operator pos:start="103:62" pos:end="103:63">-&gt;</operator><name pos:start="103:64" pos:end="103:66">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="109:5" pos:end="113:33"><expr pos:start="109:5" pos:end="113:32"><call pos:start="109:5" pos:end="113:32"><name pos:start="109:5" pos:end="109:20">pci_register_bar</name><argument_list pos:start="109:21" pos:end="113:32">(<argument pos:start="109:22" pos:end="109:35"><expr pos:start="109:22" pos:end="109:35"><operator pos:start="109:22" pos:end="109:22">&amp;</operator><name pos:start="109:23" pos:end="109:35"><name pos:start="109:23" pos:end="109:26">xhci</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:35">pci_dev</name></name></expr></argument>, <argument pos:start="109:38" pos:end="109:38"><expr pos:start="109:38" pos:end="109:38"><literal type="number" pos:start="109:38" pos:end="109:38">0</literal></expr></argument>,

                     <argument pos:start="111:22" pos:end="111:79"><expr pos:start="111:22" pos:end="111:79"><name pos:start="111:22" pos:end="111:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name><operator pos:start="111:51" pos:end="111:51">|</operator><name pos:start="111:52" pos:end="111:79">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr></argument>,

                     <argument pos:start="113:22" pos:end="113:31"><expr pos:start="113:22" pos:end="113:31"><operator pos:start="113:22" pos:end="113:22">&amp;</operator><name pos:start="113:23" pos:end="113:31"><name pos:start="113:23" pos:end="113:26">xhci</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:31">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:72"><expr pos:start="117:5" pos:end="117:71"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:71"><name pos:start="117:11" pos:end="117:23">pcie_cap_init</name><argument_list pos:start="117:24" pos:end="117:71">(<argument pos:start="117:25" pos:end="117:38"><expr pos:start="117:25" pos:end="117:38"><operator pos:start="117:25" pos:end="117:25">&amp;</operator><name pos:start="117:26" pos:end="117:38"><name pos:start="117:26" pos:end="117:29">xhci</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:38">pci_dev</name></name></expr></argument>, <argument pos:start="117:41" pos:end="117:44"><expr pos:start="117:41" pos:end="117:44"><literal type="number" pos:start="117:41" pos:end="117:44">0xa0</literal></expr></argument>, <argument pos:start="117:47" pos:end="117:67"><expr pos:start="117:47" pos:end="117:67"><name pos:start="117:47" pos:end="117:67">PCI_EXP_TYPE_ENDPOINT</name></expr></argument>, <argument pos:start="117:70" pos:end="117:70"><expr pos:start="117:70" pos:end="117:70"><literal type="number" pos:start="117:70" pos:end="117:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:21"><expr pos:start="119:5" pos:end="119:20"><call pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:10">assert</name><argument_list pos:start="119:11" pos:end="119:20">(<argument pos:start="119:12" pos:end="119:19"><expr pos:start="119:12" pos:end="119:19"><name pos:start="119:12" pos:end="119:14">ret</name> <operator pos:start="119:16" pos:end="119:17">&gt;=</operator> <literal type="number" pos:start="119:19" pos:end="119:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="127:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:47">(<expr pos:start="123:9" pos:end="123:46"><name pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:12">xhci</name><operator pos:start="123:13" pos:end="123:14">-&gt;</operator><name pos:start="123:15" pos:end="123:19">flags</name></name> <operator pos:start="123:21" pos:end="123:21">&amp;</operator> <operator pos:start="123:23" pos:end="123:23">(</operator><literal type="number" pos:start="123:24" pos:end="123:24">1</literal> <operator pos:start="123:26" pos:end="123:27">&lt;&lt;</operator> <name pos:start="123:29" pos:end="123:45">XHCI_FLAG_USE_MSI</name><operator pos:start="123:46" pos:end="123:46">)</operator></expr>)</condition> <block pos:start="123:49" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:68">

        <expr_stmt pos:start="125:9" pos:end="125:68"><expr pos:start="125:9" pos:end="125:67"><call pos:start="125:9" pos:end="125:67"><name pos:start="125:9" pos:end="125:16">msi_init</name><argument_list pos:start="125:17" pos:end="125:67">(<argument pos:start="125:18" pos:end="125:31"><expr pos:start="125:18" pos:end="125:31"><operator pos:start="125:18" pos:end="125:18">&amp;</operator><name pos:start="125:19" pos:end="125:31"><name pos:start="125:19" pos:end="125:22">xhci</name><operator pos:start="125:23" pos:end="125:24">-&gt;</operator><name pos:start="125:25" pos:end="125:31">pci_dev</name></name></expr></argument>, <argument pos:start="125:34" pos:end="125:37"><expr pos:start="125:34" pos:end="125:37"><literal type="number" pos:start="125:34" pos:end="125:37">0x70</literal></expr></argument>, <argument pos:start="125:40" pos:end="125:53"><expr pos:start="125:40" pos:end="125:53"><name pos:start="125:40" pos:end="125:53"><name pos:start="125:40" pos:end="125:43">xhci</name><operator pos:start="125:44" pos:end="125:45">-&gt;</operator><name pos:start="125:46" pos:end="125:53">numintrs</name></name></expr></argument>, <argument pos:start="125:56" pos:end="125:59"><expr pos:start="125:56" pos:end="125:59"><name pos:start="125:56" pos:end="125:59">true</name></expr></argument>, <argument pos:start="125:62" pos:end="125:66"><expr pos:start="125:62" pos:end="125:66"><name pos:start="125:62" pos:end="125:66">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="139:5"><if pos:start="129:5" pos:end="139:5">if <condition pos:start="129:8" pos:end="129:49">(<expr pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:12">xhci</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:19">flags</name></name> <operator pos:start="129:21" pos:end="129:21">&amp;</operator> <operator pos:start="129:23" pos:end="129:23">(</operator><literal type="number" pos:start="129:24" pos:end="129:24">1</literal> <operator pos:start="129:26" pos:end="129:27">&lt;&lt;</operator> <name pos:start="129:29" pos:end="129:47">XHCI_FLAG_USE_MSI_X</name><operator pos:start="129:48" pos:end="129:48">)</operator></expr>)</condition> <block pos:start="129:51" pos:end="139:5">{<block_content pos:start="131:9" pos:end="137:24">

        <expr_stmt pos:start="131:9" pos:end="137:24"><expr pos:start="131:9" pos:end="137:23"><call pos:start="131:9" pos:end="137:23"><name pos:start="131:9" pos:end="131:17">msix_init</name><argument_list pos:start="131:18" pos:end="137:23">(<argument pos:start="131:19" pos:end="131:32"><expr pos:start="131:19" pos:end="131:32"><operator pos:start="131:19" pos:end="131:19">&amp;</operator><name pos:start="131:20" pos:end="131:32"><name pos:start="131:20" pos:end="131:23">xhci</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:32">pci_dev</name></name></expr></argument>, <argument pos:start="131:35" pos:end="131:48"><expr pos:start="131:35" pos:end="131:48"><name pos:start="131:35" pos:end="131:48"><name pos:start="131:35" pos:end="131:38">xhci</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:48">numintrs</name></name></expr></argument>,

                  <argument pos:start="133:19" pos:end="133:28"><expr pos:start="133:19" pos:end="133:28"><operator pos:start="133:19" pos:end="133:19">&amp;</operator><name pos:start="133:20" pos:end="133:28"><name pos:start="133:20" pos:end="133:23">xhci</name><operator pos:start="133:24" pos:end="133:25">-&gt;</operator><name pos:start="133:26" pos:end="133:28">mem</name></name></expr></argument>, <argument pos:start="133:31" pos:end="133:31"><expr pos:start="133:31" pos:end="133:31"><literal type="number" pos:start="133:31" pos:end="133:31">0</literal></expr></argument>, <argument pos:start="133:34" pos:end="133:47"><expr pos:start="133:34" pos:end="133:47"><name pos:start="133:34" pos:end="133:47">OFF_MSIX_TABLE</name></expr></argument>,

                  <argument pos:start="135:19" pos:end="135:28"><expr pos:start="135:19" pos:end="135:28"><operator pos:start="135:19" pos:end="135:19">&amp;</operator><name pos:start="135:20" pos:end="135:28"><name pos:start="135:20" pos:end="135:23">xhci</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:28">mem</name></name></expr></argument>, <argument pos:start="135:31" pos:end="135:31"><expr pos:start="135:31" pos:end="135:31"><literal type="number" pos:start="135:31" pos:end="135:31">0</literal></expr></argument>, <argument pos:start="135:34" pos:end="135:45"><expr pos:start="135:34" pos:end="135:45"><name pos:start="135:34" pos:end="135:45">OFF_MSIX_PBA</name></expr></argument>,

                  <argument pos:start="137:19" pos:end="137:22"><expr pos:start="137:19" pos:end="137:22"><literal type="number" pos:start="137:19" pos:end="137:22">0x90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="143:5" pos:end="143:13">return <expr pos:start="143:12" pos:end="143:12"><literal type="number" pos:start="143:12" pos:end="143:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
