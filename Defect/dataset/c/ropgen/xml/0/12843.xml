<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12843.c" pos:tabs="8"><function pos:start="1:1" pos:end="473:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">spapr_phb_realize</name><parameter_list pos:start="1:30" pos:end="1:61">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:41">DeviceState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="473:1">{<block_content pos:start="5:5" pos:end="471:79">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:64"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">sPAPRMachineState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:28">spapr</name> <init pos:start="5:30" pos:end="5:64">= <expr pos:start="5:32" pos:end="5:64"><call pos:start="5:32" pos:end="5:64"><name pos:start="5:32" pos:end="5:44">SPAPR_MACHINE</name><argument_list pos:start="5:45" pos:end="5:64">(<argument pos:start="5:46" pos:end="5:63"><expr pos:start="5:46" pos:end="5:63"><call pos:start="5:46" pos:end="5:63"><name pos:start="5:46" pos:end="5:61">qdev_get_machine</name><argument_list pos:start="5:62" pos:end="5:63">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">SysBusDevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:41">= <expr pos:start="7:23" pos:end="7:41"><call pos:start="7:23" pos:end="7:41"><name pos:start="7:23" pos:end="7:36">SYS_BUS_DEVICE</name><argument_list pos:start="7:37" pos:end="7:41">(<argument pos:start="7:38" pos:end="7:40"><expr pos:start="7:38" pos:end="7:40"><name pos:start="7:38" pos:end="7:40">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">sPAPRPHBState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:23">sphb</name> <init pos:start="9:25" pos:end="9:50">= <expr pos:start="9:27" pos:end="9:50"><call pos:start="9:27" pos:end="9:50"><name pos:start="9:27" pos:end="9:47">SPAPR_PCI_HOST_BRIDGE</name><argument_list pos:start="9:48" pos:end="9:50">(<argument pos:start="9:49" pos:end="9:49"><expr pos:start="9:49" pos:end="9:49"><name pos:start="9:49" pos:end="9:49">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">PCIHostState</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">phb</name> <init pos:start="11:23" pos:end="11:42">= <expr pos:start="11:25" pos:end="11:42"><call pos:start="11:25" pos:end="11:42"><name pos:start="11:25" pos:end="11:39">PCI_HOST_BRIDGE</name><argument_list pos:start="11:40" pos:end="11:42">(<argument pos:start="11:41" pos:end="11:41"><expr pos:start="11:41" pos:end="11:41"><name pos:start="11:41" pos:end="11:41">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:17">namebuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:15">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:28">msi_window_size</name> <init pos:start="19:30" pos:end="19:35">= <expr pos:start="19:32" pos:end="19:35"><literal type="number" pos:start="19:32" pos:end="19:35">4096</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:17">sPAPRTCETable</name> <modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:23">tcet</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="25:58"><decl pos:start="23:5" pos:end="25:57"><type pos:start="23:5" pos:end="23:18"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:18">unsigned</name></type> <name pos:start="23:20" pos:end="23:36">windows_supported</name> <init pos:start="23:38" pos:end="25:57">=

        <expr pos:start="25:9" pos:end="25:57"><ternary pos:start="25:9" pos:end="25:57"><condition pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:12">sphb</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:25">ddw_enabled</name></name></expr> ?</condition><then pos:start="25:29" pos:end="25:53"> <expr pos:start="25:29" pos:end="25:53"><name pos:start="25:29" pos:end="25:53">SPAPR_PCI_DMA_MAX_WINDOWS</name></expr> </then><else pos:start="25:55" pos:end="25:57">: <expr pos:start="25:57" pos:end="25:57"><literal type="number" pos:start="25:57" pos:end="25:57">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="73:5"><if pos:start="29:5" pos:end="73:5">if <condition pos:start="29:8" pos:end="29:36">(<expr pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:12">sphb</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:19">index</name></name> <operator pos:start="29:21" pos:end="29:22">!=</operator> <operator pos:start="29:24" pos:end="29:24">(</operator><name pos:start="29:25" pos:end="29:32">uint32_t</name><operator pos:start="29:33" pos:end="29:33">)</operator><operator pos:start="29:34" pos:end="29:34">-</operator><literal type="number" pos:start="29:35" pos:end="29:35">1</literal></expr>)</condition> <block pos:start="29:38" pos:end="73:5">{<block_content pos:start="31:9" pos:end="71:9">

        <decl_stmt pos:start="31:9" pos:end="31:64"><decl pos:start="31:9" pos:end="31:63"><type pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:25">sPAPRMachineClass</name> <modifier pos:start="31:27" pos:end="31:27">*</modifier></type><name pos:start="31:28" pos:end="31:30">smc</name> <init pos:start="31:32" pos:end="31:63">= <expr pos:start="31:34" pos:end="31:63"><call pos:start="31:34" pos:end="31:63"><name pos:start="31:34" pos:end="31:56">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="31:57" pos:end="31:63">(<argument pos:start="31:58" pos:end="31:62"><expr pos:start="31:58" pos:end="31:62"><name pos:start="31:58" pos:end="31:62">spapr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:32"><decl pos:start="33:9" pos:end="33:31"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:13">Error</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:24">local_err</name> <init pos:start="33:26" pos:end="33:31">= <expr pos:start="33:28" pos:end="33:31"><name pos:start="33:28" pos:end="33:31">NULL</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="37:9" pos:end="53:9"><if pos:start="37:9" pos:end="53:9">if <condition pos:start="37:12" pos:end="45:49">(<expr pos:start="37:13" pos:end="45:48"><operator pos:start="37:13" pos:end="37:13">(</operator><name pos:start="37:14" pos:end="37:23"><name pos:start="37:14" pos:end="37:17">sphb</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:23">buid</name></name> <operator pos:start="37:25" pos:end="37:26">!=</operator> <operator pos:start="37:28" pos:end="37:28">(</operator><name pos:start="37:29" pos:end="37:36">uint64_t</name><operator pos:start="37:37" pos:end="37:37">)</operator><operator pos:start="37:38" pos:end="37:38">-</operator><literal type="number" pos:start="37:39" pos:end="37:39">1</literal><operator pos:start="37:40" pos:end="37:40">)</operator> <operator pos:start="37:42" pos:end="37:43">||</operator> <operator pos:start="37:45" pos:end="37:45">(</operator><name pos:start="37:46" pos:end="37:63"><name pos:start="37:46" pos:end="37:49">sphb</name><operator pos:start="37:50" pos:end="37:51">-&gt;</operator><name pos:start="37:52" pos:end="37:60">dma_liobn</name><index pos:start="37:61" pos:end="37:63">[<expr pos:start="37:62" pos:end="37:62"><literal type="number" pos:start="37:62" pos:end="37:62">0</literal></expr>]</index></name> <operator pos:start="37:65" pos:end="37:66">!=</operator> <operator pos:start="37:68" pos:end="37:68">(</operator><name pos:start="37:69" pos:end="37:76">uint32_t</name><operator pos:start="37:77" pos:end="37:77">)</operator><operator pos:start="37:78" pos:end="37:78">-</operator><literal type="number" pos:start="37:79" pos:end="37:79">1</literal><operator pos:start="37:80" pos:end="37:80">)</operator>

            <operator pos:start="39:13" pos:end="39:14">||</operator> <operator pos:start="39:16" pos:end="39:16">(</operator><name pos:start="39:17" pos:end="39:34"><name pos:start="39:17" pos:end="39:20">sphb</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:31">dma_liobn</name><index pos:start="39:32" pos:end="39:34">[<expr pos:start="39:33" pos:end="39:33"><literal type="number" pos:start="39:33" pos:end="39:33">1</literal></expr>]</index></name> <operator pos:start="39:36" pos:end="39:37">!=</operator> <operator pos:start="39:39" pos:end="39:39">(</operator><name pos:start="39:40" pos:end="39:47">uint32_t</name><operator pos:start="39:48" pos:end="39:48">)</operator><operator pos:start="39:49" pos:end="39:49">-</operator><literal type="number" pos:start="39:50" pos:end="39:50">1</literal> <operator pos:start="39:52" pos:end="39:53">&amp;&amp;</operator> <name pos:start="39:55" pos:end="39:71">windows_supported</name> <operator pos:start="39:73" pos:end="39:74">==</operator> <literal type="number" pos:start="39:76" pos:end="39:76">2</literal><operator pos:start="39:77" pos:end="39:77">)</operator>

            <operator pos:start="41:13" pos:end="41:14">||</operator> <operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:34"><name pos:start="41:17" pos:end="41:20">sphb</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:34">mem_win_addr</name></name> <operator pos:start="41:36" pos:end="41:37">!=</operator> <operator pos:start="41:39" pos:end="41:39">(</operator><name pos:start="41:40" pos:end="41:45">hwaddr</name><operator pos:start="41:46" pos:end="41:46">)</operator><operator pos:start="41:47" pos:end="41:47">-</operator><literal type="number" pos:start="41:48" pos:end="41:48">1</literal><operator pos:start="41:49" pos:end="41:49">)</operator>

            <operator pos:start="43:13" pos:end="43:14">||</operator> <operator pos:start="43:16" pos:end="43:16">(</operator><name pos:start="43:17" pos:end="43:36"><name pos:start="43:17" pos:end="43:20">sphb</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:36">mem64_win_addr</name></name> <operator pos:start="43:38" pos:end="43:39">!=</operator> <operator pos:start="43:41" pos:end="43:41">(</operator><name pos:start="43:42" pos:end="43:47">hwaddr</name><operator pos:start="43:48" pos:end="43:48">)</operator><operator pos:start="43:49" pos:end="43:49">-</operator><literal type="number" pos:start="43:50" pos:end="43:50">1</literal><operator pos:start="43:51" pos:end="43:51">)</operator>

            <operator pos:start="45:13" pos:end="45:14">||</operator> <operator pos:start="45:16" pos:end="45:16">(</operator><name pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:20">sphb</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:33">io_win_addr</name></name> <operator pos:start="45:35" pos:end="45:36">!=</operator> <operator pos:start="45:38" pos:end="45:38">(</operator><name pos:start="45:39" pos:end="45:44">hwaddr</name><operator pos:start="45:45" pos:end="45:45">)</operator><operator pos:start="45:46" pos:end="45:46">-</operator><literal type="number" pos:start="45:47" pos:end="45:47">1</literal><operator pos:start="45:48" pos:end="45:48">)</operator></expr>)</condition> <block pos:start="45:51" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:19">

            <expr_stmt pos:start="47:13" pos:end="49:63"><expr pos:start="47:13" pos:end="49:62"><call pos:start="47:13" pos:end="49:62"><name pos:start="47:13" pos:end="47:22">error_setg</name><argument_list pos:start="47:23" pos:end="49:62">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">errp</name></expr></argument>, <argument pos:start="47:30" pos:end="49:61"><expr pos:start="47:30" pos:end="49:61"><literal type="string" pos:start="47:30" pos:end="47:72">"Either \"index\" or other parameters must"</literal>

                       <literal type="string" pos:start="49:24" pos:end="49:61">" be specified for PAPR PHB, not both"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="63:75"><expr pos:start="57:9" pos:end="63:74"><call pos:start="57:9" pos:end="63:74"><name pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:11">smc</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:26">phb_placement</name></name><argument_list pos:start="57:27" pos:end="63:74">(<argument pos:start="57:28" pos:end="57:32"><expr pos:start="57:28" pos:end="57:32"><name pos:start="57:28" pos:end="57:32">spapr</name></expr></argument>, <argument pos:start="57:35" pos:end="57:45"><expr pos:start="57:35" pos:end="57:45"><name pos:start="57:35" pos:end="57:45"><name pos:start="57:35" pos:end="57:38">sphb</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:45">index</name></name></expr></argument>,

                           <argument pos:start="59:28" pos:end="59:38"><expr pos:start="59:28" pos:end="59:38"><operator pos:start="59:28" pos:end="59:28">&amp;</operator><name pos:start="59:29" pos:end="59:38"><name pos:start="59:29" pos:end="59:32">sphb</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:38">buid</name></name></expr></argument>, <argument pos:start="59:41" pos:end="59:58"><expr pos:start="59:41" pos:end="59:58"><operator pos:start="59:41" pos:end="59:41">&amp;</operator><name pos:start="59:42" pos:end="59:58"><name pos:start="59:42" pos:end="59:45">sphb</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:58">io_win_addr</name></name></expr></argument>,

                           <argument pos:start="61:28" pos:end="61:46"><expr pos:start="61:28" pos:end="61:46"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:46"><name pos:start="61:29" pos:end="61:32">sphb</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:46">mem_win_addr</name></name></expr></argument>, <argument pos:start="61:49" pos:end="61:69"><expr pos:start="61:49" pos:end="61:69"><operator pos:start="61:49" pos:end="61:49">&amp;</operator><name pos:start="61:50" pos:end="61:69"><name pos:start="61:50" pos:end="61:53">sphb</name><operator pos:start="61:54" pos:end="61:55">-&gt;</operator><name pos:start="61:56" pos:end="61:69">mem64_win_addr</name></name></expr></argument>,

                           <argument pos:start="63:28" pos:end="63:44"><expr pos:start="63:28" pos:end="63:44"><name pos:start="63:28" pos:end="63:44">windows_supported</name></expr></argument>, <argument pos:start="63:47" pos:end="63:61"><expr pos:start="63:47" pos:end="63:61"><name pos:start="63:47" pos:end="63:61"><name pos:start="63:47" pos:end="63:50">sphb</name><operator pos:start="63:51" pos:end="63:52">-&gt;</operator><name pos:start="63:53" pos:end="63:61">dma_liobn</name></name></expr></argument>, <argument pos:start="63:64" pos:end="63:73"><expr pos:start="63:64" pos:end="63:73"><operator pos:start="63:64" pos:end="63:64">&amp;</operator><name pos:start="63:65" pos:end="63:73">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:22">(<expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:21">local_err</name></expr>)</condition> <block pos:start="65:24" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:19">

            <expr_stmt pos:start="67:13" pos:end="67:45"><expr pos:start="67:13" pos:end="67:44"><call pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:27">error_propagate</name><argument_list pos:start="67:28" pos:end="67:44">(<argument pos:start="67:29" pos:end="67:32"><expr pos:start="67:29" pos:end="67:32"><name pos:start="67:29" pos:end="67:32">errp</name></expr></argument>, <argument pos:start="67:35" pos:end="67:43"><expr pos:start="67:35" pos:end="67:43"><name pos:start="67:35" pos:end="67:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:35">(<expr pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:12">sphb</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:18">buid</name></name> <operator pos:start="77:20" pos:end="77:21">==</operator> <operator pos:start="77:23" pos:end="77:23">(</operator><name pos:start="77:24" pos:end="77:31">uint64_t</name><operator pos:start="77:32" pos:end="77:32">)</operator><operator pos:start="77:33" pos:end="77:33">-</operator><literal type="number" pos:start="77:34" pos:end="77:34">1</literal></expr>)</condition> <block pos:start="77:37" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:15">

        <expr_stmt pos:start="79:9" pos:end="79:55"><expr pos:start="79:9" pos:end="79:54"><call pos:start="79:9" pos:end="79:54"><name pos:start="79:9" pos:end="79:18">error_setg</name><argument_list pos:start="79:19" pos:end="79:54">(<argument pos:start="79:20" pos:end="79:23"><expr pos:start="79:20" pos:end="79:23"><name pos:start="79:20" pos:end="79:23">errp</name></expr></argument>, <argument pos:start="79:26" pos:end="79:53"><expr pos:start="79:26" pos:end="79:53"><literal type="string" pos:start="79:26" pos:end="79:53">"BUID not specified for PHB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="89:74">(<expr pos:start="87:9" pos:end="89:73"><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:27"><name pos:start="87:10" pos:end="87:13">sphb</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:24">dma_liobn</name><index pos:start="87:25" pos:end="87:27">[<expr pos:start="87:26" pos:end="87:26"><literal type="number" pos:start="87:26" pos:end="87:26">0</literal></expr>]</index></name> <operator pos:start="87:29" pos:end="87:30">==</operator> <operator pos:start="87:32" pos:end="87:32">(</operator><name pos:start="87:33" pos:end="87:40">uint32_t</name><operator pos:start="87:41" pos:end="87:41">)</operator><operator pos:start="87:42" pos:end="87:42">-</operator><literal type="number" pos:start="87:43" pos:end="87:43">1</literal><operator pos:start="87:44" pos:end="87:44">)</operator> <operator pos:start="87:46" pos:end="87:47">||</operator>

        <operator pos:start="89:9" pos:end="89:9">(</operator><operator pos:start="89:10" pos:end="89:10">(</operator><name pos:start="89:11" pos:end="89:28"><name pos:start="89:11" pos:end="89:14">sphb</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:25">dma_liobn</name><index pos:start="89:26" pos:end="89:28">[<expr pos:start="89:27" pos:end="89:27"><literal type="number" pos:start="89:27" pos:end="89:27">1</literal></expr>]</index></name> <operator pos:start="89:30" pos:end="89:31">==</operator> <operator pos:start="89:33" pos:end="89:33">(</operator><name pos:start="89:34" pos:end="89:41">uint32_t</name><operator pos:start="89:42" pos:end="89:42">)</operator><operator pos:start="89:43" pos:end="89:43">-</operator><literal type="number" pos:start="89:44" pos:end="89:44">1</literal><operator pos:start="89:45" pos:end="89:45">)</operator> <operator pos:start="89:47" pos:end="89:48">&amp;&amp;</operator> <operator pos:start="89:50" pos:end="89:50">(</operator><name pos:start="89:51" pos:end="89:67">windows_supported</name> <operator pos:start="89:69" pos:end="89:69">&gt;</operator> <literal type="number" pos:start="89:71" pos:end="89:71">1</literal><operator pos:start="89:72" pos:end="89:72">)</operator><operator pos:start="89:73" pos:end="89:73">)</operator></expr>)</condition> <block pos:start="89:76" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:15">

        <expr_stmt pos:start="91:9" pos:end="91:59"><expr pos:start="91:9" pos:end="91:58"><call pos:start="91:9" pos:end="91:58"><name pos:start="91:9" pos:end="91:18">error_setg</name><argument_list pos:start="91:19" pos:end="91:58">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">errp</name></expr></argument>, <argument pos:start="91:26" pos:end="91:57"><expr pos:start="91:26" pos:end="91:57"><literal type="string" pos:start="91:26" pos:end="91:57">"LIOBN(s) not specified for PHB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:41">(<expr pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:12">sphb</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:26">mem_win_addr</name></name> <operator pos:start="99:28" pos:end="99:29">==</operator> <operator pos:start="99:31" pos:end="99:31">(</operator><name pos:start="99:32" pos:end="99:37">hwaddr</name><operator pos:start="99:38" pos:end="99:38">)</operator><operator pos:start="99:39" pos:end="99:39">-</operator><literal type="number" pos:start="99:40" pos:end="99:40">1</literal></expr>)</condition> <block pos:start="99:43" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:15">

        <expr_stmt pos:start="101:9" pos:end="101:72"><expr pos:start="101:9" pos:end="101:71"><call pos:start="101:9" pos:end="101:71"><name pos:start="101:9" pos:end="101:18">error_setg</name><argument_list pos:start="101:19" pos:end="101:71">(<argument pos:start="101:20" pos:end="101:23"><expr pos:start="101:20" pos:end="101:23"><name pos:start="101:20" pos:end="101:23">errp</name></expr></argument>, <argument pos:start="101:26" pos:end="101:70"><expr pos:start="101:26" pos:end="101:70"><literal type="string" pos:start="101:26" pos:end="101:70">"Memory window address not specified for PHB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:40">(<expr pos:start="109:9" pos:end="109:39"><name pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:12">sphb</name><operator pos:start="109:13" pos:end="109:14">-&gt;</operator><name pos:start="109:15" pos:end="109:25">io_win_addr</name></name> <operator pos:start="109:27" pos:end="109:28">==</operator> <operator pos:start="109:30" pos:end="109:30">(</operator><name pos:start="109:31" pos:end="109:36">hwaddr</name><operator pos:start="109:37" pos:end="109:37">)</operator><operator pos:start="109:38" pos:end="109:38">-</operator><literal type="number" pos:start="109:39" pos:end="109:39">1</literal></expr>)</condition> <block pos:start="109:42" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:15">

        <expr_stmt pos:start="111:9" pos:end="111:68"><expr pos:start="111:9" pos:end="111:67"><call pos:start="111:9" pos:end="111:67"><name pos:start="111:9" pos:end="111:18">error_setg</name><argument_list pos:start="111:19" pos:end="111:67">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">errp</name></expr></argument>, <argument pos:start="111:26" pos:end="111:66"><expr pos:start="111:26" pos:end="111:66"><literal type="string" pos:start="111:26" pos:end="111:66">"IO window address not specified for PHB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="179:5"><if pos:start="119:5" pos:end="153:5">if <condition pos:start="119:8" pos:end="119:34">(<expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:28"><name pos:start="119:9" pos:end="119:12">sphb</name><operator pos:start="119:13" pos:end="119:14">-&gt;</operator><name pos:start="119:15" pos:end="119:28">mem64_win_size</name></name> <operator pos:start="119:30" pos:end="119:31">!=</operator> <literal type="number" pos:start="119:33" pos:end="119:33">0</literal></expr>)</condition> <block pos:start="119:36" pos:end="153:5">{<block_content pos:start="121:9" pos:end="151:9">

        <if_stmt pos:start="121:9" pos:end="129:9"><if pos:start="121:9" pos:end="129:9">if <condition pos:start="121:12" pos:end="121:47">(<expr pos:start="121:13" pos:end="121:46"><name pos:start="121:13" pos:end="121:32"><name pos:start="121:13" pos:end="121:16">sphb</name><operator pos:start="121:17" pos:end="121:18">-&gt;</operator><name pos:start="121:19" pos:end="121:32">mem64_win_addr</name></name> <operator pos:start="121:34" pos:end="121:35">==</operator> <operator pos:start="121:37" pos:end="121:37">(</operator><name pos:start="121:38" pos:end="121:43">hwaddr</name><operator pos:start="121:44" pos:end="121:44">)</operator><operator pos:start="121:45" pos:end="121:45">-</operator><literal type="number" pos:start="121:46" pos:end="121:46">1</literal></expr>)</condition> <block pos:start="121:49" pos:end="129:9">{<block_content pos:start="123:13" pos:end="127:19">

            <expr_stmt pos:start="123:13" pos:end="125:77"><expr pos:start="123:13" pos:end="125:76"><call pos:start="123:13" pos:end="125:76"><name pos:start="123:13" pos:end="123:22">error_setg</name><argument_list pos:start="123:23" pos:end="125:76">(<argument pos:start="123:24" pos:end="123:27"><expr pos:start="123:24" pos:end="123:27"><name pos:start="123:24" pos:end="123:27">errp</name></expr></argument>,

                       <argument pos:start="125:24" pos:end="125:75"><expr pos:start="125:24" pos:end="125:75"><literal type="string" pos:start="125:24" pos:end="125:75">"64-bit memory window address not specified for PHB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="127:13" pos:end="127:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="141:9">if <condition pos:start="133:12" pos:end="133:58">(<expr pos:start="133:13" pos:end="133:57"><name pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:16">sphb</name><operator pos:start="133:17" pos:end="133:18">-&gt;</operator><name pos:start="133:19" pos:end="133:30">mem_win_size</name></name> <operator pos:start="133:32" pos:end="133:32">&gt;</operator> <name pos:start="133:34" pos:end="133:57">SPAPR_PCI_MEM32_WIN_SIZE</name></expr>)</condition> <block pos:start="133:60" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:19">

            <expr_stmt pos:start="135:13" pos:end="137:59"><expr pos:start="135:13" pos:end="137:58"><call pos:start="135:13" pos:end="137:58"><name pos:start="135:13" pos:end="135:22">error_setg</name><argument_list pos:start="135:23" pos:end="137:58">(<argument pos:start="135:24" pos:end="135:27"><expr pos:start="135:24" pos:end="135:27"><name pos:start="135:24" pos:end="135:27">errp</name></expr></argument>, <argument pos:start="135:30" pos:end="137:37"><expr pos:start="135:30" pos:end="137:37"><literal type="string" pos:start="135:30" pos:end="135:63">"32-bit memory window of size 0x%"</literal><name pos:start="135:64" pos:end="135:74">HWADDR_PRIx</name>

                       <literal type="string" pos:start="137:24" pos:end="137:37">" (max 2 GiB)"</literal></expr></argument>, <argument pos:start="137:40" pos:end="137:57"><expr pos:start="137:40" pos:end="137:57"><name pos:start="137:40" pos:end="137:57"><name pos:start="137:40" pos:end="137:43">sphb</name><operator pos:start="137:44" pos:end="137:45">-&gt;</operator><name pos:start="137:46" pos:end="137:57">mem_win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:50">(<expr pos:start="145:13" pos:end="145:49"><name pos:start="145:13" pos:end="145:35"><name pos:start="145:13" pos:end="145:16">sphb</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:35">mem64_win_pciaddr</name></name> <operator pos:start="145:37" pos:end="145:38">==</operator> <operator pos:start="145:40" pos:end="145:40">(</operator><name pos:start="145:41" pos:end="145:46">hwaddr</name><operator pos:start="145:47" pos:end="145:47">)</operator><operator pos:start="145:48" pos:end="145:48">-</operator><literal type="number" pos:start="145:49" pos:end="145:49">1</literal></expr>)</condition> <block pos:start="145:52" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:59">

            <comment type="block" pos:start="147:13" pos:end="147:60">/* 64-bit window defaults to identity mapping */</comment>

            <expr_stmt pos:start="149:13" pos:end="149:59"><expr pos:start="149:13" pos:end="149:58"><name pos:start="149:13" pos:end="149:35"><name pos:start="149:13" pos:end="149:16">sphb</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:35">mem64_win_pciaddr</name></name> <operator pos:start="149:37" pos:end="149:37">=</operator> <name pos:start="149:39" pos:end="149:58"><name pos:start="149:39" pos:end="149:42">sphb</name><operator pos:start="149:43" pos:end="149:44">-&gt;</operator><name pos:start="149:45" pos:end="149:58">mem64_win_addr</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="153:7" pos:end="179:5">else if <condition pos:start="153:15" pos:end="153:61">(<expr pos:start="153:16" pos:end="153:60"><name pos:start="153:16" pos:end="153:33"><name pos:start="153:16" pos:end="153:19">sphb</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:33">mem_win_size</name></name> <operator pos:start="153:35" pos:end="153:35">&gt;</operator> <name pos:start="153:37" pos:end="153:60">SPAPR_PCI_MEM32_WIN_SIZE</name></expr>)</condition> <block pos:start="153:63" pos:end="179:5">{<block_content pos:start="169:9" pos:end="177:54">

        <comment type="block" pos:start="155:9" pos:end="167:11">/*

         * For compatibility with old configuration, if no 64-bit MMIO

         * window is specified, but the ordinary (32-bit) memory

         * window is specified as &gt; 2GiB, we treat it as a 2GiB 32-bit

         * window, with a 64-bit MMIO window following on immediately

         * afterwards

         */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:77"><expr pos:start="169:9" pos:end="169:76"><name pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:12">sphb</name><operator pos:start="169:13" pos:end="169:14">-&gt;</operator><name pos:start="169:15" pos:end="169:28">mem64_win_size</name></name> <operator pos:start="169:30" pos:end="169:30">=</operator> <name pos:start="169:32" pos:end="169:49"><name pos:start="169:32" pos:end="169:35">sphb</name><operator pos:start="169:36" pos:end="169:37">-&gt;</operator><name pos:start="169:38" pos:end="169:49">mem_win_size</name></name> <operator pos:start="169:51" pos:end="169:51">-</operator> <name pos:start="169:53" pos:end="169:76">SPAPR_PCI_MEM32_WIN_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:77"><expr pos:start="171:9" pos:end="171:76"><name pos:start="171:9" pos:end="171:28"><name pos:start="171:9" pos:end="171:12">sphb</name><operator pos:start="171:13" pos:end="171:14">-&gt;</operator><name pos:start="171:15" pos:end="171:28">mem64_win_addr</name></name> <operator pos:start="171:30" pos:end="171:30">=</operator> <name pos:start="171:32" pos:end="171:49"><name pos:start="171:32" pos:end="171:35">sphb</name><operator pos:start="171:36" pos:end="171:37">-&gt;</operator><name pos:start="171:38" pos:end="171:49">mem_win_addr</name></name> <operator pos:start="171:51" pos:end="171:51">+</operator> <name pos:start="171:53" pos:end="171:76">SPAPR_PCI_MEM32_WIN_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="175:68"><expr pos:start="173:9" pos:end="175:67"><name pos:start="173:9" pos:end="173:31"><name pos:start="173:9" pos:end="173:12">sphb</name><operator pos:start="173:13" pos:end="173:14">-&gt;</operator><name pos:start="173:15" pos:end="173:31">mem64_win_pciaddr</name></name> <operator pos:start="173:33" pos:end="173:33">=</operator>

            <name pos:start="175:13" pos:end="175:40">SPAPR_PCI_MEM_WIN_BUS_OFFSET</name> <operator pos:start="175:42" pos:end="175:42">+</operator> <name pos:start="175:44" pos:end="175:67">SPAPR_PCI_MEM32_WIN_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:54"><expr pos:start="177:9" pos:end="177:53"><name pos:start="177:9" pos:end="177:26"><name pos:start="177:9" pos:end="177:12">sphb</name><operator pos:start="177:13" pos:end="177:14">-&gt;</operator><name pos:start="177:15" pos:end="177:26">mem_win_size</name></name> <operator pos:start="177:28" pos:end="177:28">=</operator> <name pos:start="177:30" pos:end="177:53">SPAPR_PCI_MEM32_WIN_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="183:5" pos:end="189:5"><if pos:start="183:5" pos:end="189:5">if <condition pos:start="183:8" pos:end="183:46">(<expr pos:start="183:9" pos:end="183:45"><call pos:start="183:9" pos:end="183:45"><name pos:start="183:9" pos:end="183:26">spapr_pci_find_phb</name><argument_list pos:start="183:27" pos:end="183:45">(<argument pos:start="183:28" pos:end="183:32"><expr pos:start="183:28" pos:end="183:32"><name pos:start="183:28" pos:end="183:32">spapr</name></expr></argument>, <argument pos:start="183:35" pos:end="183:44"><expr pos:start="183:35" pos:end="183:44"><name pos:start="183:35" pos:end="183:44"><name pos:start="183:35" pos:end="183:38">sphb</name><operator pos:start="183:39" pos:end="183:40">-&gt;</operator><name pos:start="183:41" pos:end="183:44">buid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="183:48" pos:end="189:5">{<block_content pos:start="185:9" pos:end="187:15">

        <expr_stmt pos:start="185:9" pos:end="185:68"><expr pos:start="185:9" pos:end="185:67"><call pos:start="185:9" pos:end="185:67"><name pos:start="185:9" pos:end="185:18">error_setg</name><argument_list pos:start="185:19" pos:end="185:67">(<argument pos:start="185:20" pos:end="185:23"><expr pos:start="185:20" pos:end="185:23"><name pos:start="185:20" pos:end="185:23">errp</name></expr></argument>, <argument pos:start="185:26" pos:end="185:66"><expr pos:start="185:26" pos:end="185:66"><literal type="string" pos:start="185:26" pos:end="185:66">"PCI host bridges must have unique BUIDs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="187:9" pos:end="187:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="193:5" pos:end="201:5"><if pos:start="193:5" pos:end="201:5">if <condition pos:start="193:8" pos:end="195:78">(<expr pos:start="193:9" pos:end="195:77"><name pos:start="193:9" pos:end="193:23"><name pos:start="193:9" pos:end="193:12">sphb</name><operator pos:start="193:13" pos:end="193:14">-&gt;</operator><name pos:start="193:15" pos:end="193:23">numa_node</name></name> <operator pos:start="193:25" pos:end="193:26">!=</operator> <operator pos:start="193:28" pos:end="193:28">-</operator><literal type="number" pos:start="193:29" pos:end="193:29">1</literal> <operator pos:start="193:31" pos:end="193:32">&amp;&amp;</operator>

        <operator pos:start="195:9" pos:end="195:9">(</operator><name pos:start="195:10" pos:end="195:24"><name pos:start="195:10" pos:end="195:13">sphb</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:24">numa_node</name></name> <operator pos:start="195:26" pos:end="195:27">&gt;=</operator> <name pos:start="195:29" pos:end="195:37">MAX_NODES</name> <operator pos:start="195:39" pos:end="195:40">||</operator> <operator pos:start="195:42" pos:end="195:42">!</operator><name pos:start="195:43" pos:end="195:68"><name pos:start="195:43" pos:end="195:51">numa_info</name><index pos:start="195:52" pos:end="195:68">[<expr pos:start="195:53" pos:end="195:67"><name pos:start="195:53" pos:end="195:67"><name pos:start="195:53" pos:end="195:56">sphb</name><operator pos:start="195:57" pos:end="195:58">-&gt;</operator><name pos:start="195:59" pos:end="195:67">numa_node</name></name></expr>]</index></name><operator pos:start="195:69" pos:end="195:69">.</operator><name pos:start="195:70" pos:end="195:76">present</name><operator pos:start="195:77" pos:end="195:77">)</operator></expr>)</condition> <block pos:start="195:80" pos:end="201:5">{<block_content pos:start="197:9" pos:end="199:15">

        <expr_stmt pos:start="197:9" pos:end="197:69"><expr pos:start="197:9" pos:end="197:68"><call pos:start="197:9" pos:end="197:68"><name pos:start="197:9" pos:end="197:18">error_setg</name><argument_list pos:start="197:19" pos:end="197:68">(<argument pos:start="197:20" pos:end="197:23"><expr pos:start="197:20" pos:end="197:23"><name pos:start="197:20" pos:end="197:23">errp</name></expr></argument>, <argument pos:start="197:26" pos:end="197:67"><expr pos:start="197:26" pos:end="197:67"><literal type="string" pos:start="197:26" pos:end="197:67">"Invalid NUMA node ID for PCI host bridge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="199:9" pos:end="199:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:66"><expr pos:start="205:5" pos:end="205:65"><name pos:start="205:5" pos:end="205:19"><name pos:start="205:5" pos:end="205:8">sphb</name><operator pos:start="205:9" pos:end="205:10">-&gt;</operator><name pos:start="205:11" pos:end="205:19">dtbusname</name></name> <operator pos:start="205:21" pos:end="205:21">=</operator> <call pos:start="205:23" pos:end="205:65"><name pos:start="205:23" pos:end="205:37">g_strdup_printf</name><argument_list pos:start="205:38" pos:end="205:65">(<argument pos:start="205:39" pos:end="205:52"><expr pos:start="205:39" pos:end="205:52"><literal type="string" pos:start="205:39" pos:end="205:45">"pci@%"</literal> <name pos:start="205:47" pos:end="205:52">PRIx64</name></expr></argument>, <argument pos:start="205:55" pos:end="205:64"><expr pos:start="205:55" pos:end="205:64"><name pos:start="205:55" pos:end="205:64"><name pos:start="205:55" pos:end="205:58">sphb</name><operator pos:start="205:59" pos:end="205:60">-&gt;</operator><name pos:start="205:61" pos:end="205:64">buid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:35">/* Initialize memory regions */</comment>

    <expr_stmt pos:start="211:5" pos:end="211:58"><expr pos:start="211:5" pos:end="211:57"><name pos:start="211:5" pos:end="211:11">namebuf</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <call pos:start="211:15" pos:end="211:57"><name pos:start="211:15" pos:end="211:29">g_strdup_printf</name><argument_list pos:start="211:30" pos:end="211:57">(<argument pos:start="211:31" pos:end="211:39"><expr pos:start="211:31" pos:end="211:39"><literal type="string" pos:start="211:31" pos:end="211:39">"%s.mmio"</literal></expr></argument>, <argument pos:start="211:42" pos:end="211:56"><expr pos:start="211:42" pos:end="211:56"><name pos:start="211:42" pos:end="211:56"><name pos:start="211:42" pos:end="211:45">sphb</name><operator pos:start="211:46" pos:end="211:47">-&gt;</operator><name pos:start="211:48" pos:end="211:56">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:75"><expr pos:start="213:5" pos:end="213:74"><call pos:start="213:5" pos:end="213:74"><name pos:start="213:5" pos:end="213:22">memory_region_init</name><argument_list pos:start="213:23" pos:end="213:74">(<argument pos:start="213:24" pos:end="213:38"><expr pos:start="213:24" pos:end="213:38"><operator pos:start="213:24" pos:end="213:24">&amp;</operator><name pos:start="213:25" pos:end="213:38"><name pos:start="213:25" pos:end="213:28">sphb</name><operator pos:start="213:29" pos:end="213:30">-&gt;</operator><name pos:start="213:31" pos:end="213:38">memspace</name></name></expr></argument>, <argument pos:start="213:41" pos:end="213:52"><expr pos:start="213:41" pos:end="213:52"><call pos:start="213:41" pos:end="213:52"><name pos:start="213:41" pos:end="213:46">OBJECT</name><argument_list pos:start="213:47" pos:end="213:52">(<argument pos:start="213:48" pos:end="213:51"><expr pos:start="213:48" pos:end="213:51"><name pos:start="213:48" pos:end="213:51">sphb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="213:55" pos:end="213:61"><expr pos:start="213:55" pos:end="213:61"><name pos:start="213:55" pos:end="213:61">namebuf</name></expr></argument>, <argument pos:start="213:64" pos:end="213:73"><expr pos:start="213:64" pos:end="213:73"><name pos:start="213:64" pos:end="213:73">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:20"><expr pos:start="215:5" pos:end="215:19"><call pos:start="215:5" pos:end="215:19"><name pos:start="215:5" pos:end="215:10">g_free</name><argument_list pos:start="215:11" pos:end="215:19">(<argument pos:start="215:12" pos:end="215:18"><expr pos:start="215:12" pos:end="215:18"><name pos:start="215:12" pos:end="215:18">namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:66"><expr pos:start="219:5" pos:end="219:65"><name pos:start="219:5" pos:end="219:11">namebuf</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <call pos:start="219:15" pos:end="219:65"><name pos:start="219:15" pos:end="219:29">g_strdup_printf</name><argument_list pos:start="219:30" pos:end="219:65">(<argument pos:start="219:31" pos:end="219:47"><expr pos:start="219:31" pos:end="219:47"><literal type="string" pos:start="219:31" pos:end="219:47">"%s.mmio32-alias"</literal></expr></argument>, <argument pos:start="219:50" pos:end="219:64"><expr pos:start="219:50" pos:end="219:64"><name pos:start="219:50" pos:end="219:64"><name pos:start="219:50" pos:end="219:53">sphb</name><operator pos:start="219:54" pos:end="219:55">-&gt;</operator><name pos:start="219:56" pos:end="219:64">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="225:79"><expr pos:start="221:5" pos:end="225:78"><call pos:start="221:5" pos:end="225:78"><name pos:start="221:5" pos:end="221:28">memory_region_init_alias</name><argument_list pos:start="221:29" pos:end="225:78">(<argument pos:start="221:30" pos:end="221:47"><expr pos:start="221:30" pos:end="221:47"><operator pos:start="221:30" pos:end="221:30">&amp;</operator><name pos:start="221:31" pos:end="221:47"><name pos:start="221:31" pos:end="221:34">sphb</name><operator pos:start="221:35" pos:end="221:36">-&gt;</operator><name pos:start="221:37" pos:end="221:47">mem32window</name></name></expr></argument>, <argument pos:start="221:50" pos:end="221:61"><expr pos:start="221:50" pos:end="221:61"><call pos:start="221:50" pos:end="221:61"><name pos:start="221:50" pos:end="221:55">OBJECT</name><argument_list pos:start="221:56" pos:end="221:61">(<argument pos:start="221:57" pos:end="221:60"><expr pos:start="221:57" pos:end="221:60"><name pos:start="221:57" pos:end="221:60">sphb</name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="223:30" pos:end="223:36"><expr pos:start="223:30" pos:end="223:36"><name pos:start="223:30" pos:end="223:36">namebuf</name></expr></argument>, <argument pos:start="223:39" pos:end="223:53"><expr pos:start="223:39" pos:end="223:53"><operator pos:start="223:39" pos:end="223:39">&amp;</operator><name pos:start="223:40" pos:end="223:53"><name pos:start="223:40" pos:end="223:43">sphb</name><operator pos:start="223:44" pos:end="223:45">-&gt;</operator><name pos:start="223:46" pos:end="223:53">memspace</name></name></expr></argument>,

                             <argument pos:start="225:30" pos:end="225:57"><expr pos:start="225:30" pos:end="225:57"><name pos:start="225:30" pos:end="225:57">SPAPR_PCI_MEM_WIN_BUS_OFFSET</name></expr></argument>, <argument pos:start="225:60" pos:end="225:77"><expr pos:start="225:60" pos:end="225:77"><name pos:start="225:60" pos:end="225:77"><name pos:start="225:60" pos:end="225:63">sphb</name><operator pos:start="225:64" pos:end="225:65">-&gt;</operator><name pos:start="225:66" pos:end="225:77">mem_win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:20"><expr pos:start="227:5" pos:end="227:19"><call pos:start="227:5" pos:end="227:19"><name pos:start="227:5" pos:end="227:10">g_free</name><argument_list pos:start="227:11" pos:end="227:19">(<argument pos:start="227:12" pos:end="227:18"><expr pos:start="227:12" pos:end="227:18"><name pos:start="227:12" pos:end="227:18">namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="231:52"><expr pos:start="229:5" pos:end="231:51"><call pos:start="229:5" pos:end="231:51"><name pos:start="229:5" pos:end="229:31">memory_region_add_subregion</name><argument_list pos:start="229:32" pos:end="231:51">(<argument pos:start="229:33" pos:end="229:51"><expr pos:start="229:33" pos:end="229:51"><call pos:start="229:33" pos:end="229:51"><name pos:start="229:33" pos:end="229:49">get_system_memory</name><argument_list pos:start="229:50" pos:end="229:51">()</argument_list></call></expr></argument>, <argument pos:start="229:54" pos:end="229:71"><expr pos:start="229:54" pos:end="229:71"><name pos:start="229:54" pos:end="229:71"><name pos:start="229:54" pos:end="229:57">sphb</name><operator pos:start="229:58" pos:end="229:59">-&gt;</operator><name pos:start="229:60" pos:end="229:71">mem_win_addr</name></name></expr></argument>,

                                <argument pos:start="231:33" pos:end="231:50"><expr pos:start="231:33" pos:end="231:50"><operator pos:start="231:33" pos:end="231:33">&amp;</operator><name pos:start="231:34" pos:end="231:50"><name pos:start="231:34" pos:end="231:37">sphb</name><operator pos:start="231:38" pos:end="231:39">-&gt;</operator><name pos:start="231:40" pos:end="231:50">mem32window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="235:5" pos:end="259:5"><if pos:start="235:5" pos:end="259:5">if <condition pos:start="235:8" pos:end="235:46">(<expr pos:start="235:9" pos:end="235:45"><name pos:start="235:9" pos:end="235:31"><name pos:start="235:9" pos:end="235:12">sphb</name><operator pos:start="235:13" pos:end="235:14">-&gt;</operator><name pos:start="235:15" pos:end="235:31">mem64_win_pciaddr</name></name> <operator pos:start="235:33" pos:end="235:34">!=</operator> <operator pos:start="235:36" pos:end="235:36">(</operator><name pos:start="235:37" pos:end="235:42">hwaddr</name><operator pos:start="235:43" pos:end="235:43">)</operator><operator pos:start="235:44" pos:end="235:44">-</operator><literal type="number" pos:start="235:45" pos:end="235:45">1</literal></expr>)</condition> <block pos:start="235:48" pos:end="259:5">{<block_content pos:start="237:9" pos:end="257:9">

        <expr_stmt pos:start="237:9" pos:end="237:70"><expr pos:start="237:9" pos:end="237:69"><name pos:start="237:9" pos:end="237:15">namebuf</name> <operator pos:start="237:17" pos:end="237:17">=</operator> <call pos:start="237:19" pos:end="237:69"><name pos:start="237:19" pos:end="237:33">g_strdup_printf</name><argument_list pos:start="237:34" pos:end="237:69">(<argument pos:start="237:35" pos:end="237:51"><expr pos:start="237:35" pos:end="237:51"><literal type="string" pos:start="237:35" pos:end="237:51">"%s.mmio64-alias"</literal></expr></argument>, <argument pos:start="237:54" pos:end="237:68"><expr pos:start="237:54" pos:end="237:68"><name pos:start="237:54" pos:end="237:68"><name pos:start="237:54" pos:end="237:57">sphb</name><operator pos:start="237:58" pos:end="237:59">-&gt;</operator><name pos:start="237:60" pos:end="237:68">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="243:80"><expr pos:start="239:9" pos:end="243:79"><call pos:start="239:9" pos:end="243:79"><name pos:start="239:9" pos:end="239:32">memory_region_init_alias</name><argument_list pos:start="239:33" pos:end="243:79">(<argument pos:start="239:34" pos:end="239:51"><expr pos:start="239:34" pos:end="239:51"><operator pos:start="239:34" pos:end="239:34">&amp;</operator><name pos:start="239:35" pos:end="239:51"><name pos:start="239:35" pos:end="239:38">sphb</name><operator pos:start="239:39" pos:end="239:40">-&gt;</operator><name pos:start="239:41" pos:end="239:51">mem64window</name></name></expr></argument>, <argument pos:start="239:54" pos:end="239:65"><expr pos:start="239:54" pos:end="239:65"><call pos:start="239:54" pos:end="239:65"><name pos:start="239:54" pos:end="239:59">OBJECT</name><argument_list pos:start="239:60" pos:end="239:65">(<argument pos:start="239:61" pos:end="239:64"><expr pos:start="239:61" pos:end="239:64"><name pos:start="239:61" pos:end="239:64">sphb</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="241:34" pos:end="241:40"><expr pos:start="241:34" pos:end="241:40"><name pos:start="241:34" pos:end="241:40">namebuf</name></expr></argument>, <argument pos:start="241:43" pos:end="241:57"><expr pos:start="241:43" pos:end="241:57"><operator pos:start="241:43" pos:end="241:43">&amp;</operator><name pos:start="241:44" pos:end="241:57"><name pos:start="241:44" pos:end="241:47">sphb</name><operator pos:start="241:48" pos:end="241:49">-&gt;</operator><name pos:start="241:50" pos:end="241:57">memspace</name></name></expr></argument>,

                                 <argument pos:start="243:34" pos:end="243:56"><expr pos:start="243:34" pos:end="243:56"><name pos:start="243:34" pos:end="243:56"><name pos:start="243:34" pos:end="243:37">sphb</name><operator pos:start="243:38" pos:end="243:39">-&gt;</operator><name pos:start="243:40" pos:end="243:56">mem64_win_pciaddr</name></name></expr></argument>, <argument pos:start="243:59" pos:end="243:78"><expr pos:start="243:59" pos:end="243:78"><name pos:start="243:59" pos:end="243:78"><name pos:start="243:59" pos:end="243:62">sphb</name><operator pos:start="243:63" pos:end="243:64">-&gt;</operator><name pos:start="243:65" pos:end="243:78">mem64_win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:24"><expr pos:start="245:9" pos:end="245:23"><call pos:start="245:9" pos:end="245:23"><name pos:start="245:9" pos:end="245:14">g_free</name><argument_list pos:start="245:15" pos:end="245:23">(<argument pos:start="245:16" pos:end="245:22"><expr pos:start="245:16" pos:end="245:22"><name pos:start="245:16" pos:end="245:22">namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="249:9" pos:end="257:9"><if pos:start="249:9" pos:end="257:9">if <condition pos:start="249:12" pos:end="249:47">(<expr pos:start="249:13" pos:end="249:46"><name pos:start="249:13" pos:end="249:32"><name pos:start="249:13" pos:end="249:16">sphb</name><operator pos:start="249:17" pos:end="249:18">-&gt;</operator><name pos:start="249:19" pos:end="249:32">mem64_win_addr</name></name> <operator pos:start="249:34" pos:end="249:35">!=</operator> <operator pos:start="249:37" pos:end="249:37">(</operator><name pos:start="249:38" pos:end="249:43">hwaddr</name><operator pos:start="249:44" pos:end="249:44">)</operator><operator pos:start="249:45" pos:end="249:45">-</operator><literal type="number" pos:start="249:46" pos:end="249:46">1</literal></expr>)</condition> <block pos:start="249:49" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:60">

            <expr_stmt pos:start="251:13" pos:end="255:60"><expr pos:start="251:13" pos:end="255:59"><call pos:start="251:13" pos:end="255:59"><name pos:start="251:13" pos:end="251:39">memory_region_add_subregion</name><argument_list pos:start="251:40" pos:end="255:59">(<argument pos:start="251:41" pos:end="251:59"><expr pos:start="251:41" pos:end="251:59"><call pos:start="251:41" pos:end="251:59"><name pos:start="251:41" pos:end="251:57">get_system_memory</name><argument_list pos:start="251:58" pos:end="251:59">()</argument_list></call></expr></argument>,

                                        <argument pos:start="253:41" pos:end="253:60"><expr pos:start="253:41" pos:end="253:60"><name pos:start="253:41" pos:end="253:60"><name pos:start="253:41" pos:end="253:44">sphb</name><operator pos:start="253:45" pos:end="253:46">-&gt;</operator><name pos:start="253:47" pos:end="253:60">mem64_win_addr</name></name></expr></argument>,

                                        <argument pos:start="255:41" pos:end="255:58"><expr pos:start="255:41" pos:end="255:58"><operator pos:start="255:41" pos:end="255:41">&amp;</operator><name pos:start="255:42" pos:end="255:58"><name pos:start="255:42" pos:end="255:45">sphb</name><operator pos:start="255:46" pos:end="255:47">-&gt;</operator><name pos:start="255:48" pos:end="255:58">mem64window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:31">/* Initialize IO regions */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:56"><expr pos:start="265:5" pos:end="265:55"><name pos:start="265:5" pos:end="265:11">namebuf</name> <operator pos:start="265:13" pos:end="265:13">=</operator> <call pos:start="265:15" pos:end="265:55"><name pos:start="265:15" pos:end="265:29">g_strdup_printf</name><argument_list pos:start="265:30" pos:end="265:55">(<argument pos:start="265:31" pos:end="265:37"><expr pos:start="265:31" pos:end="265:37"><literal type="string" pos:start="265:31" pos:end="265:37">"%s.io"</literal></expr></argument>, <argument pos:start="265:40" pos:end="265:54"><expr pos:start="265:40" pos:end="265:54"><name pos:start="265:40" pos:end="265:54"><name pos:start="265:40" pos:end="265:43">sphb</name><operator pos:start="265:44" pos:end="265:45">-&gt;</operator><name pos:start="265:46" pos:end="265:54">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="269:55"><expr pos:start="267:5" pos:end="269:54"><call pos:start="267:5" pos:end="269:54"><name pos:start="267:5" pos:end="267:22">memory_region_init</name><argument_list pos:start="267:23" pos:end="269:54">(<argument pos:start="267:24" pos:end="267:37"><expr pos:start="267:24" pos:end="267:37"><operator pos:start="267:24" pos:end="267:24">&amp;</operator><name pos:start="267:25" pos:end="267:37"><name pos:start="267:25" pos:end="267:28">sphb</name><operator pos:start="267:29" pos:end="267:30">-&gt;</operator><name pos:start="267:31" pos:end="267:37">iospace</name></name></expr></argument>, <argument pos:start="267:40" pos:end="267:51"><expr pos:start="267:40" pos:end="267:51"><call pos:start="267:40" pos:end="267:51"><name pos:start="267:40" pos:end="267:45">OBJECT</name><argument_list pos:start="267:46" pos:end="267:51">(<argument pos:start="267:47" pos:end="267:50"><expr pos:start="267:47" pos:end="267:50"><name pos:start="267:47" pos:end="267:50">sphb</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="269:24" pos:end="269:30"><expr pos:start="269:24" pos:end="269:30"><name pos:start="269:24" pos:end="269:30">namebuf</name></expr></argument>, <argument pos:start="269:33" pos:end="269:53"><expr pos:start="269:33" pos:end="269:53"><name pos:start="269:33" pos:end="269:53">SPAPR_PCI_IO_WIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:20"><expr pos:start="271:5" pos:end="271:19"><call pos:start="271:5" pos:end="271:19"><name pos:start="271:5" pos:end="271:10">g_free</name><argument_list pos:start="271:11" pos:end="271:19">(<argument pos:start="271:12" pos:end="271:18"><expr pos:start="271:12" pos:end="271:18"><name pos:start="271:12" pos:end="271:18">namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="275:5" pos:end="275:62"><expr pos:start="275:5" pos:end="275:61"><name pos:start="275:5" pos:end="275:11">namebuf</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <call pos:start="275:15" pos:end="275:61"><name pos:start="275:15" pos:end="275:29">g_strdup_printf</name><argument_list pos:start="275:30" pos:end="275:61">(<argument pos:start="275:31" pos:end="275:43"><expr pos:start="275:31" pos:end="275:43"><literal type="string" pos:start="275:31" pos:end="275:43">"%s.io-alias"</literal></expr></argument>, <argument pos:start="275:46" pos:end="275:60"><expr pos:start="275:46" pos:end="275:60"><name pos:start="275:46" pos:end="275:60"><name pos:start="275:46" pos:end="275:49">sphb</name><operator pos:start="275:50" pos:end="275:51">-&gt;</operator><name pos:start="275:52" pos:end="275:60">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="279:71"><expr pos:start="277:5" pos:end="279:70"><call pos:start="277:5" pos:end="279:70"><name pos:start="277:5" pos:end="277:28">memory_region_init_alias</name><argument_list pos:start="277:29" pos:end="279:70">(<argument pos:start="277:30" pos:end="277:44"><expr pos:start="277:30" pos:end="277:44"><operator pos:start="277:30" pos:end="277:30">&amp;</operator><name pos:start="277:31" pos:end="277:44"><name pos:start="277:31" pos:end="277:34">sphb</name><operator pos:start="277:35" pos:end="277:36">-&gt;</operator><name pos:start="277:37" pos:end="277:44">iowindow</name></name></expr></argument>, <argument pos:start="277:47" pos:end="277:58"><expr pos:start="277:47" pos:end="277:58"><call pos:start="277:47" pos:end="277:58"><name pos:start="277:47" pos:end="277:52">OBJECT</name><argument_list pos:start="277:53" pos:end="277:58">(<argument pos:start="277:54" pos:end="277:57"><expr pos:start="277:54" pos:end="277:57"><name pos:start="277:54" pos:end="277:57">sphb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="277:61" pos:end="277:67"><expr pos:start="277:61" pos:end="277:67"><name pos:start="277:61" pos:end="277:67">namebuf</name></expr></argument>,

                             <argument pos:start="279:30" pos:end="279:43"><expr pos:start="279:30" pos:end="279:43"><operator pos:start="279:30" pos:end="279:30">&amp;</operator><name pos:start="279:31" pos:end="279:43"><name pos:start="279:31" pos:end="279:34">sphb</name><operator pos:start="279:35" pos:end="279:36">-&gt;</operator><name pos:start="279:37" pos:end="279:43">iospace</name></name></expr></argument>, <argument pos:start="279:46" pos:end="279:46"><expr pos:start="279:46" pos:end="279:46"><literal type="number" pos:start="279:46" pos:end="279:46">0</literal></expr></argument>, <argument pos:start="279:49" pos:end="279:69"><expr pos:start="279:49" pos:end="279:69"><name pos:start="279:49" pos:end="279:69">SPAPR_PCI_IO_WIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:20"><expr pos:start="281:5" pos:end="281:19"><call pos:start="281:5" pos:end="281:19"><name pos:start="281:5" pos:end="281:10">g_free</name><argument_list pos:start="281:11" pos:end="281:19">(<argument pos:start="281:12" pos:end="281:18"><expr pos:start="281:12" pos:end="281:18"><name pos:start="281:12" pos:end="281:18">namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="285:49"><expr pos:start="283:5" pos:end="285:48"><call pos:start="283:5" pos:end="285:48"><name pos:start="283:5" pos:end="283:31">memory_region_add_subregion</name><argument_list pos:start="283:32" pos:end="285:48">(<argument pos:start="283:33" pos:end="283:51"><expr pos:start="283:33" pos:end="283:51"><call pos:start="283:33" pos:end="283:51"><name pos:start="283:33" pos:end="283:49">get_system_memory</name><argument_list pos:start="283:50" pos:end="283:51">()</argument_list></call></expr></argument>, <argument pos:start="283:54" pos:end="283:70"><expr pos:start="283:54" pos:end="283:70"><name pos:start="283:54" pos:end="283:70"><name pos:start="283:54" pos:end="283:57">sphb</name><operator pos:start="283:58" pos:end="283:59">-&gt;</operator><name pos:start="283:60" pos:end="283:70">io_win_addr</name></name></expr></argument>,

                                <argument pos:start="285:33" pos:end="285:47"><expr pos:start="285:33" pos:end="285:47"><operator pos:start="285:33" pos:end="285:33">&amp;</operator><name pos:start="285:34" pos:end="285:47"><name pos:start="285:34" pos:end="285:37">sphb</name><operator pos:start="285:38" pos:end="285:39">-&gt;</operator><name pos:start="285:40" pos:end="285:47">iowindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="289:5" pos:end="295:72"><expr pos:start="289:5" pos:end="295:71"><name pos:start="289:5" pos:end="289:7">bus</name> <operator pos:start="289:9" pos:end="289:9">=</operator> <call pos:start="289:11" pos:end="295:71"><name pos:start="289:11" pos:end="289:26">pci_register_bus</name><argument_list pos:start="289:27" pos:end="295:71">(<argument pos:start="289:28" pos:end="289:30"><expr pos:start="289:28" pos:end="289:30"><name pos:start="289:28" pos:end="289:30">dev</name></expr></argument>, <argument pos:start="289:33" pos:end="289:36"><expr pos:start="289:33" pos:end="289:36"><name pos:start="289:33" pos:end="289:36">NULL</name></expr></argument>,

                           <argument pos:start="291:28" pos:end="291:44"><expr pos:start="291:28" pos:end="291:44"><name pos:start="291:28" pos:end="291:44">pci_spapr_set_irq</name></expr></argument>, <argument pos:start="291:47" pos:end="291:63"><expr pos:start="291:47" pos:end="291:63"><name pos:start="291:47" pos:end="291:63">pci_spapr_map_irq</name></expr></argument>, <argument pos:start="291:66" pos:end="291:69"><expr pos:start="291:66" pos:end="291:69"><name pos:start="291:66" pos:end="291:69">sphb</name></expr></argument>,

                           <argument pos:start="293:28" pos:end="293:42"><expr pos:start="293:28" pos:end="293:42"><operator pos:start="293:28" pos:end="293:28">&amp;</operator><name pos:start="293:29" pos:end="293:42"><name pos:start="293:29" pos:end="293:32">sphb</name><operator pos:start="293:33" pos:end="293:34">-&gt;</operator><name pos:start="293:35" pos:end="293:42">memspace</name></name></expr></argument>, <argument pos:start="293:45" pos:end="293:58"><expr pos:start="293:45" pos:end="293:58"><operator pos:start="293:45" pos:end="293:45">&amp;</operator><name pos:start="293:46" pos:end="293:58"><name pos:start="293:46" pos:end="293:49">sphb</name><operator pos:start="293:50" pos:end="293:51">-&gt;</operator><name pos:start="293:52" pos:end="293:58">iospace</name></name></expr></argument>,

                           <argument pos:start="295:28" pos:end="295:42"><expr pos:start="295:28" pos:end="295:42"><call pos:start="295:28" pos:end="295:42"><name pos:start="295:28" pos:end="295:36">PCI_DEVFN</name><argument_list pos:start="295:37" pos:end="295:42">(<argument pos:start="295:38" pos:end="295:38"><expr pos:start="295:38" pos:end="295:38"><literal type="number" pos:start="295:38" pos:end="295:38">0</literal></expr></argument>, <argument pos:start="295:41" pos:end="295:41"><expr pos:start="295:41" pos:end="295:41"><literal type="number" pos:start="295:41" pos:end="295:41">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="295:45" pos:end="295:56"><expr pos:start="295:45" pos:end="295:56"><name pos:start="295:45" pos:end="295:56">PCI_NUM_PINS</name></expr></argument>, <argument pos:start="295:59" pos:end="295:70"><expr pos:start="295:59" pos:end="295:70"><name pos:start="295:59" pos:end="295:70">TYPE_PCI_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:19"><expr pos:start="297:5" pos:end="297:18"><name pos:start="297:5" pos:end="297:12"><name pos:start="297:5" pos:end="297:7">phb</name><operator pos:start="297:8" pos:end="297:9">-&gt;</operator><name pos:start="297:10" pos:end="297:12">bus</name></name> <operator pos:start="297:14" pos:end="297:14">=</operator> <name pos:start="297:16" pos:end="297:18">bus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:64"><expr pos:start="299:5" pos:end="299:63"><call pos:start="299:5" pos:end="299:63"><name pos:start="299:5" pos:end="299:28">qbus_set_hotplug_handler</name><argument_list pos:start="299:29" pos:end="299:63">(<argument pos:start="299:30" pos:end="299:42"><expr pos:start="299:30" pos:end="299:42"><call pos:start="299:30" pos:end="299:42"><name pos:start="299:30" pos:end="299:32">BUS</name><argument_list pos:start="299:33" pos:end="299:42">(<argument pos:start="299:34" pos:end="299:41"><expr pos:start="299:34" pos:end="299:41"><name pos:start="299:34" pos:end="299:41"><name pos:start="299:34" pos:end="299:36">phb</name><operator pos:start="299:37" pos:end="299:38">-&gt;</operator><name pos:start="299:39" pos:end="299:41">bus</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="299:45" pos:end="299:56"><expr pos:start="299:45" pos:end="299:56"><call pos:start="299:45" pos:end="299:56"><name pos:start="299:45" pos:end="299:50">DEVICE</name><argument_list pos:start="299:51" pos:end="299:56">(<argument pos:start="299:52" pos:end="299:55"><expr pos:start="299:52" pos:end="299:55"><name pos:start="299:52" pos:end="299:55">sphb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="299:59" pos:end="299:62"><expr pos:start="299:59" pos:end="299:62"><name pos:start="299:59" pos:end="299:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="303:5" pos:end="315:7">/*

     * Initialize PHB address space.

     * By default there will be at least one subregion for default

     * 32bit DMA window.

     * Later the guest might want to create another DMA window

     * which will become another memory subregion.

     */</comment>

    <expr_stmt pos:start="317:5" pos:end="317:64"><expr pos:start="317:5" pos:end="317:63"><name pos:start="317:5" pos:end="317:11">namebuf</name> <operator pos:start="317:13" pos:end="317:13">=</operator> <call pos:start="317:15" pos:end="317:63"><name pos:start="317:15" pos:end="317:29">g_strdup_printf</name><argument_list pos:start="317:30" pos:end="317:63">(<argument pos:start="317:31" pos:end="317:45"><expr pos:start="317:31" pos:end="317:45"><literal type="string" pos:start="317:31" pos:end="317:45">"%s.iommu-root"</literal></expr></argument>, <argument pos:start="317:48" pos:end="317:62"><expr pos:start="317:48" pos:end="317:62"><name pos:start="317:48" pos:end="317:62"><name pos:start="317:48" pos:end="317:51">sphb</name><operator pos:start="317:52" pos:end="317:53">-&gt;</operator><name pos:start="317:54" pos:end="317:62">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="321:44"><expr pos:start="319:5" pos:end="321:43"><call pos:start="319:5" pos:end="321:43"><name pos:start="319:5" pos:end="319:22">memory_region_init</name><argument_list pos:start="319:23" pos:end="321:43">(<argument pos:start="319:24" pos:end="319:40"><expr pos:start="319:24" pos:end="319:40"><operator pos:start="319:24" pos:end="319:24">&amp;</operator><name pos:start="319:25" pos:end="319:40"><name pos:start="319:25" pos:end="319:28">sphb</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:40">iommu_root</name></name></expr></argument>, <argument pos:start="319:43" pos:end="319:54"><expr pos:start="319:43" pos:end="319:54"><call pos:start="319:43" pos:end="319:54"><name pos:start="319:43" pos:end="319:48">OBJECT</name><argument_list pos:start="319:49" pos:end="319:54">(<argument pos:start="319:50" pos:end="319:53"><expr pos:start="319:50" pos:end="319:53"><name pos:start="319:50" pos:end="319:53">sphb</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="321:24" pos:end="321:30"><expr pos:start="321:24" pos:end="321:30"><name pos:start="321:24" pos:end="321:30">namebuf</name></expr></argument>, <argument pos:start="321:33" pos:end="321:42"><expr pos:start="321:33" pos:end="321:42"><name pos:start="321:33" pos:end="321:42">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:20"><expr pos:start="323:5" pos:end="323:19"><call pos:start="323:5" pos:end="323:19"><name pos:start="323:5" pos:end="323:10">g_free</name><argument_list pos:start="323:11" pos:end="323:19">(<argument pos:start="323:12" pos:end="323:18"><expr pos:start="323:12" pos:end="323:18"><name pos:start="323:12" pos:end="323:18">namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="354:0"><expr pos:start="325:5" pos:end="327:39"><call pos:start="325:5" pos:end="327:39"><name pos:start="325:5" pos:end="325:22">address_space_init</name><argument_list pos:start="325:23" pos:end="327:39">(<argument pos:start="325:24" pos:end="325:38"><expr pos:start="325:24" pos:end="325:38"><operator pos:start="325:24" pos:end="325:24">&amp;</operator><name pos:start="325:25" pos:end="325:38"><name pos:start="325:25" pos:end="325:28">sphb</name><operator pos:start="325:29" pos:end="325:30">-&gt;</operator><name pos:start="325:31" pos:end="325:38">iommu_as</name></name></expr></argument>, <argument pos:start="325:41" pos:end="325:57"><expr pos:start="325:41" pos:end="325:57"><operator pos:start="325:41" pos:end="325:41">&amp;</operator><name pos:start="325:42" pos:end="325:57"><name pos:start="325:42" pos:end="325:45">sphb</name><operator pos:start="325:46" pos:end="325:47">-&gt;</operator><name pos:start="325:48" pos:end="325:57">iommu_root</name></name></expr></argument>,

                       <argument pos:start="327:24" pos:end="327:38"><expr pos:start="327:24" pos:end="327:38"><name pos:start="327:24" pos:end="327:38"><name pos:start="327:24" pos:end="327:27">sphb</name><operator pos:start="327:28" pos:end="327:29">-&gt;</operator><name pos:start="327:30" pos:end="327:38">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="331:5" pos:end="351:7">/*

     * As MSI/MSIX interrupts trigger by writing at MSI/MSIX vectors,

     * we need to allocate some memory to catch those writes coming

     * from msi_notify()/msix_notify().

     * As MSIMessage:addr is going to be the same and MSIMessage:data

     * is going to be a VIRQ number, 4 bytes of the MSI MR will only

     * be used.

     *

     * For KVM we want to ensure that this memory is a full page so that

     * our memory slot is of page size granularity.

     */</comment>

<cpp:ifdef pos:start="353:1" pos:end="353:17">#<cpp:directive pos:start="353:2" pos:end="353:6">ifdef</cpp:directive> <name pos:start="353:8" pos:end="353:17">CONFIG_KVM</name></cpp:ifdef>

    <if_stmt pos:start="355:5" pos:end="362:0"><if pos:start="355:5" pos:end="362:0">if <condition pos:start="355:8" pos:end="355:22">(<expr pos:start="355:9" pos:end="355:21"><call pos:start="355:9" pos:end="355:21"><name pos:start="355:9" pos:end="355:19">kvm_enabled</name><argument_list pos:start="355:20" pos:end="355:21">()</argument_list></call></expr>)</condition> <block pos:start="355:24" pos:end="362:0">{<block_content pos:start="357:9" pos:end="357:40">

        <expr_stmt pos:start="357:9" pos:end="357:40"><expr pos:start="357:9" pos:end="357:39"><name pos:start="357:9" pos:end="357:23">msi_window_size</name> <operator pos:start="357:25" pos:end="357:25">=</operator> <call pos:start="357:27" pos:end="357:39"><name pos:start="357:27" pos:end="357:37">getpagesize</name><argument_list pos:start="357:38" pos:end="357:39">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="365:5" pos:end="367:50"><expr pos:start="365:5" pos:end="367:49"><call pos:start="365:5" pos:end="367:49"><name pos:start="365:5" pos:end="365:25">memory_region_init_io</name><argument_list pos:start="365:26" pos:end="367:49">(<argument pos:start="365:27" pos:end="365:42"><expr pos:start="365:27" pos:end="365:42"><operator pos:start="365:27" pos:end="365:27">&amp;</operator><name pos:start="365:28" pos:end="365:42"><name pos:start="365:28" pos:end="365:31">sphb</name><operator pos:start="365:32" pos:end="365:33">-&gt;</operator><name pos:start="365:34" pos:end="365:42">msiwindow</name></name></expr></argument>, <argument pos:start="365:45" pos:end="365:56"><expr pos:start="365:45" pos:end="365:56"><call pos:start="365:45" pos:end="365:56"><name pos:start="365:45" pos:end="365:50">OBJECT</name><argument_list pos:start="365:51" pos:end="365:56">(<argument pos:start="365:52" pos:end="365:55"><expr pos:start="365:52" pos:end="365:55"><name pos:start="365:52" pos:end="365:55">sphb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="365:59" pos:end="365:72"><expr pos:start="365:59" pos:end="365:72"><operator pos:start="365:59" pos:end="365:59">&amp;</operator><name pos:start="365:60" pos:end="365:72">spapr_msi_ops</name></expr></argument>, <argument pos:start="365:75" pos:end="365:79"><expr pos:start="365:75" pos:end="365:79"><name pos:start="365:75" pos:end="365:79">spapr</name></expr></argument>,

                          <argument pos:start="367:27" pos:end="367:31"><expr pos:start="367:27" pos:end="367:31"><literal type="string" pos:start="367:27" pos:end="367:31">"msi"</literal></expr></argument>, <argument pos:start="367:34" pos:end="367:48"><expr pos:start="367:34" pos:end="367:48"><name pos:start="367:34" pos:end="367:48">msi_window_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="371:50"><expr pos:start="369:5" pos:end="371:49"><call pos:start="369:5" pos:end="371:49"><name pos:start="369:5" pos:end="369:31">memory_region_add_subregion</name><argument_list pos:start="369:32" pos:end="371:49">(<argument pos:start="369:33" pos:end="369:49"><expr pos:start="369:33" pos:end="369:49"><operator pos:start="369:33" pos:end="369:33">&amp;</operator><name pos:start="369:34" pos:end="369:49"><name pos:start="369:34" pos:end="369:37">sphb</name><operator pos:start="369:38" pos:end="369:39">-&gt;</operator><name pos:start="369:40" pos:end="369:49">iommu_root</name></name></expr></argument>, <argument pos:start="369:52" pos:end="369:71"><expr pos:start="369:52" pos:end="369:71"><name pos:start="369:52" pos:end="369:71">SPAPR_PCI_MSI_WINDOW</name></expr></argument>,

                                <argument pos:start="371:33" pos:end="371:48"><expr pos:start="371:33" pos:end="371:48"><operator pos:start="371:33" pos:end="371:33">&amp;</operator><name pos:start="371:34" pos:end="371:48"><name pos:start="371:34" pos:end="371:37">sphb</name><operator pos:start="371:38" pos:end="371:39">-&gt;</operator><name pos:start="371:40" pos:end="371:48">msiwindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="375:5" pos:end="375:52"><expr pos:start="375:5" pos:end="375:51"><call pos:start="375:5" pos:end="375:51"><name pos:start="375:5" pos:end="375:19">pci_setup_iommu</name><argument_list pos:start="375:20" pos:end="375:51">(<argument pos:start="375:21" pos:end="375:23"><expr pos:start="375:21" pos:end="375:23"><name pos:start="375:21" pos:end="375:23">bus</name></expr></argument>, <argument pos:start="375:26" pos:end="375:44"><expr pos:start="375:26" pos:end="375:44"><name pos:start="375:26" pos:end="375:44">spapr_pci_dma_iommu</name></expr></argument>, <argument pos:start="375:47" pos:end="375:50"><expr pos:start="375:47" pos:end="375:50"><name pos:start="375:47" pos:end="375:50">sphb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="379:5" pos:end="379:63"><expr pos:start="379:5" pos:end="379:62"><call pos:start="379:5" pos:end="379:62"><name pos:start="379:5" pos:end="379:28">pci_bus_set_route_irq_fn</name><argument_list pos:start="379:29" pos:end="379:62">(<argument pos:start="379:30" pos:end="379:32"><expr pos:start="379:30" pos:end="379:32"><name pos:start="379:30" pos:end="379:32">bus</name></expr></argument>, <argument pos:start="379:35" pos:end="379:61"><expr pos:start="379:35" pos:end="379:61"><name pos:start="379:35" pos:end="379:61">spapr_route_intx_pin_to_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:48"><expr pos:start="383:5" pos:end="383:47"><call pos:start="383:5" pos:end="383:47"><name pos:start="383:5" pos:end="383:21">QLIST_INSERT_HEAD</name><argument_list pos:start="383:22" pos:end="383:47">(<argument pos:start="383:23" pos:end="383:34"><expr pos:start="383:23" pos:end="383:34"><operator pos:start="383:23" pos:end="383:23">&amp;</operator><name pos:start="383:24" pos:end="383:34"><name pos:start="383:24" pos:end="383:28">spapr</name><operator pos:start="383:29" pos:end="383:30">-&gt;</operator><name pos:start="383:31" pos:end="383:34">phbs</name></name></expr></argument>, <argument pos:start="383:37" pos:end="383:40"><expr pos:start="383:37" pos:end="383:40"><name pos:start="383:37" pos:end="383:40">sphb</name></expr></argument>, <argument pos:start="383:43" pos:end="383:46"><expr pos:start="383:43" pos:end="383:46"><name pos:start="383:43" pos:end="383:46">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="387:5" pos:end="387:34">/* Initialize the LSI table */</comment>

    <for pos:start="389:5" pos:end="413:5">for <control pos:start="389:9" pos:end="389:38">(<init pos:start="389:10" pos:end="389:15"><expr pos:start="389:10" pos:end="389:14"><name pos:start="389:10" pos:end="389:10">i</name> <operator pos:start="389:12" pos:end="389:12">=</operator> <literal type="number" pos:start="389:14" pos:end="389:14">0</literal></expr>;</init> <condition pos:start="389:17" pos:end="389:33"><expr pos:start="389:17" pos:end="389:32"><name pos:start="389:17" pos:end="389:17">i</name> <operator pos:start="389:19" pos:end="389:19">&lt;</operator> <name pos:start="389:21" pos:end="389:32">PCI_NUM_PINS</name></expr>;</condition> <incr pos:start="389:35" pos:end="389:37"><expr pos:start="389:35" pos:end="389:37"><name pos:start="389:35" pos:end="389:35">i</name><operator pos:start="389:36" pos:end="389:37">++</operator></expr></incr>)</control> <block pos:start="389:40" pos:end="413:5">{<block_content pos:start="391:9" pos:end="411:37">

        <decl_stmt pos:start="391:9" pos:end="391:21"><decl pos:start="391:9" pos:end="391:20"><type pos:start="391:9" pos:end="391:16"><name pos:start="391:9" pos:end="391:16">uint32_t</name></type> <name pos:start="391:18" pos:end="391:20">irq</name></decl>;</decl_stmt>

        <decl_stmt pos:start="393:9" pos:end="393:32"><decl pos:start="393:9" pos:end="393:31"><type pos:start="393:9" pos:end="393:15"><name pos:start="393:9" pos:end="393:13">Error</name> <modifier pos:start="393:15" pos:end="393:15">*</modifier></type><name pos:start="393:16" pos:end="393:24">local_err</name> <init pos:start="393:26" pos:end="393:31">= <expr pos:start="393:28" pos:end="393:31"><name pos:start="393:28" pos:end="393:31">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="397:9" pos:end="397:76"><expr pos:start="397:9" pos:end="397:75"><name pos:start="397:9" pos:end="397:11">irq</name> <operator pos:start="397:13" pos:end="397:13">=</operator> <call pos:start="397:15" pos:end="397:75"><name pos:start="397:15" pos:end="397:35">spapr_ics_alloc_block</name><argument_list pos:start="397:36" pos:end="397:75">(<argument pos:start="397:37" pos:end="397:46"><expr pos:start="397:37" pos:end="397:46"><name pos:start="397:37" pos:end="397:46"><name pos:start="397:37" pos:end="397:41">spapr</name><operator pos:start="397:42" pos:end="397:43">-&gt;</operator><name pos:start="397:44" pos:end="397:46">ics</name></name></expr></argument>, <argument pos:start="397:49" pos:end="397:49"><expr pos:start="397:49" pos:end="397:49"><literal type="number" pos:start="397:49" pos:end="397:49">1</literal></expr></argument>, <argument pos:start="397:52" pos:end="397:55"><expr pos:start="397:52" pos:end="397:55"><name pos:start="397:52" pos:end="397:55">true</name></expr></argument>, <argument pos:start="397:58" pos:end="397:62"><expr pos:start="397:58" pos:end="397:62"><name pos:start="397:58" pos:end="397:62">false</name></expr></argument>, <argument pos:start="397:65" pos:end="397:74"><expr pos:start="397:65" pos:end="397:74"><operator pos:start="397:65" pos:end="397:65">&amp;</operator><name pos:start="397:66" pos:end="397:74">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="399:9" pos:end="407:9"><if pos:start="399:9" pos:end="407:9">if <condition pos:start="399:12" pos:end="399:22">(<expr pos:start="399:13" pos:end="399:21"><name pos:start="399:13" pos:end="399:21">local_err</name></expr>)</condition> <block pos:start="399:24" pos:end="407:9">{<block_content pos:start="401:13" pos:end="405:19">

            <expr_stmt pos:start="401:13" pos:end="401:45"><expr pos:start="401:13" pos:end="401:44"><call pos:start="401:13" pos:end="401:44"><name pos:start="401:13" pos:end="401:27">error_propagate</name><argument_list pos:start="401:28" pos:end="401:44">(<argument pos:start="401:29" pos:end="401:32"><expr pos:start="401:29" pos:end="401:32"><name pos:start="401:29" pos:end="401:32">errp</name></expr></argument>, <argument pos:start="401:35" pos:end="401:43"><expr pos:start="401:35" pos:end="401:43"><name pos:start="401:35" pos:end="401:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="403:13" pos:end="403:57"><expr pos:start="403:13" pos:end="403:56"><call pos:start="403:13" pos:end="403:56"><name pos:start="403:13" pos:end="403:25">error_prepend</name><argument_list pos:start="403:26" pos:end="403:56">(<argument pos:start="403:27" pos:end="403:30"><expr pos:start="403:27" pos:end="403:30"><name pos:start="403:27" pos:end="403:30">errp</name></expr></argument>, <argument pos:start="403:33" pos:end="403:55"><expr pos:start="403:33" pos:end="403:55"><literal type="string" pos:start="403:33" pos:end="403:55">"can't allocate LSIs: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="405:13" pos:end="405:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="411:9" pos:end="411:37"><expr pos:start="411:9" pos:end="411:36"><name pos:start="411:9" pos:end="411:26"><name pos:start="411:9" pos:end="411:12">sphb</name><operator pos:start="411:13" pos:end="411:14">-&gt;</operator><name pos:start="411:15" pos:end="411:23">lsi_table</name><index pos:start="411:24" pos:end="411:26">[<expr pos:start="411:25" pos:end="411:25"><name pos:start="411:25" pos:end="411:25">i</name></expr>]</index></name><operator pos:start="411:27" pos:end="411:27">.</operator><name pos:start="411:28" pos:end="411:30">irq</name> <operator pos:start="411:32" pos:end="411:32">=</operator> <name pos:start="411:34" pos:end="411:36">irq</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="417:5" pos:end="417:51">/* allocate connectors for child PCI devices */</comment>

    <if_stmt pos:start="419:5" pos:end="429:5"><if pos:start="419:5" pos:end="429:5">if <condition pos:start="419:8" pos:end="419:25">(<expr pos:start="419:9" pos:end="419:24"><name pos:start="419:9" pos:end="419:24"><name pos:start="419:9" pos:end="419:12">sphb</name><operator pos:start="419:13" pos:end="419:14">-&gt;</operator><name pos:start="419:15" pos:end="419:24">dr_enabled</name></name></expr>)</condition> <block pos:start="419:27" pos:end="429:5">{<block_content pos:start="421:9" pos:end="427:9">

        <for pos:start="421:9" pos:end="427:9">for <control pos:start="421:13" pos:end="421:46">(<init pos:start="421:14" pos:end="421:19"><expr pos:start="421:14" pos:end="421:18"><name pos:start="421:14" pos:end="421:14">i</name> <operator pos:start="421:16" pos:end="421:16">=</operator> <literal type="number" pos:start="421:18" pos:end="421:18">0</literal></expr>;</init> <condition pos:start="421:21" pos:end="421:41"><expr pos:start="421:21" pos:end="421:40"><name pos:start="421:21" pos:end="421:21">i</name> <operator pos:start="421:23" pos:end="421:23">&lt;</operator> <name pos:start="421:25" pos:end="421:36">PCI_SLOT_MAX</name> <operator pos:start="421:38" pos:end="421:38">*</operator> <literal type="number" pos:start="421:40" pos:end="421:40">8</literal></expr>;</condition> <incr pos:start="421:43" pos:end="421:45"><expr pos:start="421:43" pos:end="421:45"><name pos:start="421:43" pos:end="421:43">i</name><operator pos:start="421:44" pos:end="421:45">++</operator></expr></incr>)</control> <block pos:start="421:48" pos:end="427:9">{<block_content pos:start="423:13" pos:end="425:60">

            <expr_stmt pos:start="423:13" pos:end="425:60"><expr pos:start="423:13" pos:end="425:59"><call pos:start="423:13" pos:end="425:59"><name pos:start="423:13" pos:end="423:34">spapr_dr_connector_new</name><argument_list pos:start="423:35" pos:end="425:59">(<argument pos:start="423:36" pos:end="423:46"><expr pos:start="423:36" pos:end="423:46"><call pos:start="423:36" pos:end="423:46"><name pos:start="423:36" pos:end="423:41">OBJECT</name><argument_list pos:start="423:42" pos:end="423:46">(<argument pos:start="423:43" pos:end="423:45"><expr pos:start="423:43" pos:end="423:45"><name pos:start="423:43" pos:end="423:45">phb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="423:49" pos:end="423:66"><expr pos:start="423:49" pos:end="423:66"><name pos:start="423:49" pos:end="423:66">TYPE_SPAPR_DRC_PCI</name></expr></argument>,

                                   <argument pos:start="425:36" pos:end="425:58"><expr pos:start="425:36" pos:end="425:58"><operator pos:start="425:36" pos:end="425:36">(</operator><name pos:start="425:37" pos:end="425:47"><name pos:start="425:37" pos:end="425:40">sphb</name><operator pos:start="425:41" pos:end="425:42">-&gt;</operator><name pos:start="425:43" pos:end="425:47">index</name></name> <operator pos:start="425:49" pos:end="425:50">&lt;&lt;</operator> <literal type="number" pos:start="425:52" pos:end="425:53">16</literal><operator pos:start="425:54" pos:end="425:54">)</operator> <operator pos:start="425:56" pos:end="425:56">|</operator> <name pos:start="425:58" pos:end="425:58">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="433:5" pos:end="433:19">/* DMA setup */</comment>

    <if_stmt pos:start="435:5" pos:end="445:5"><if pos:start="435:5" pos:end="445:5">if <condition pos:start="435:8" pos:end="437:25">(<expr pos:start="435:9" pos:end="437:24"><operator pos:start="435:9" pos:end="435:9">(</operator><operator pos:start="435:10" pos:end="435:10">(</operator><name pos:start="435:11" pos:end="435:30"><name pos:start="435:11" pos:end="435:14">sphb</name><operator pos:start="435:15" pos:end="435:16">-&gt;</operator><name pos:start="435:17" pos:end="435:30">page_size_mask</name></name> <operator pos:start="435:32" pos:end="435:32">&amp;</operator> <call pos:start="435:34" pos:end="435:54"><name pos:start="435:34" pos:end="435:52">qemu_getrampagesize</name><argument_list pos:start="435:53" pos:end="435:54">()</argument_list></call><operator pos:start="435:55" pos:end="435:55">)</operator> <operator pos:start="435:57" pos:end="435:58">==</operator> <literal type="number" pos:start="435:60" pos:end="435:60">0</literal><operator pos:start="435:61" pos:end="435:61">)</operator>

        <operator pos:start="437:9" pos:end="437:10">&amp;&amp;</operator> <call pos:start="437:12" pos:end="437:24"><name pos:start="437:12" pos:end="437:22">kvm_enabled</name><argument_list pos:start="437:23" pos:end="437:24">()</argument_list></call></expr>)</condition> <block pos:start="437:27" pos:end="445:5">{<block_content pos:start="439:9" pos:end="443:66">

        <expr_stmt pos:start="439:9" pos:end="443:66"><expr pos:start="439:9" pos:end="443:65"><call pos:start="439:9" pos:end="443:65"><name pos:start="439:9" pos:end="439:20">error_report</name><argument_list pos:start="439:21" pos:end="443:65">(<argument pos:start="439:22" pos:end="441:61"><expr pos:start="439:22" pos:end="441:61"><literal type="string" pos:start="439:22" pos:end="439:79">"System page size 0x%lx is not enabled in page_size_mask "</literal>

                     <literal type="string" pos:start="441:22" pos:end="441:27">"(0x%"</literal><name pos:start="441:28" pos:end="441:33">PRIx64</name><literal type="string" pos:start="441:34" pos:end="441:61">"). Performance may be slow"</literal></expr></argument>,

                     <argument pos:start="443:22" pos:end="443:42"><expr pos:start="443:22" pos:end="443:42"><call pos:start="443:22" pos:end="443:42"><name pos:start="443:22" pos:end="443:40">qemu_getrampagesize</name><argument_list pos:start="443:41" pos:end="443:42">()</argument_list></call></expr></argument>, <argument pos:start="443:45" pos:end="443:64"><expr pos:start="443:45" pos:end="443:64"><name pos:start="443:45" pos:end="443:64"><name pos:start="443:45" pos:end="443:48">sphb</name><operator pos:start="443:49" pos:end="443:50">-&gt;</operator><name pos:start="443:51" pos:end="443:64">page_size_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="449:5" pos:end="467:5">for <control pos:start="449:9" pos:end="449:43">(<init pos:start="449:10" pos:end="449:15"><expr pos:start="449:10" pos:end="449:14"><name pos:start="449:10" pos:end="449:10">i</name> <operator pos:start="449:12" pos:end="449:12">=</operator> <literal type="number" pos:start="449:14" pos:end="449:14">0</literal></expr>;</init> <condition pos:start="449:17" pos:end="449:38"><expr pos:start="449:17" pos:end="449:37"><name pos:start="449:17" pos:end="449:17">i</name> <operator pos:start="449:19" pos:end="449:19">&lt;</operator> <name pos:start="449:21" pos:end="449:37">windows_supported</name></expr>;</condition> <incr pos:start="449:40" pos:end="449:42"><expr pos:start="449:40" pos:end="449:42"><operator pos:start="449:40" pos:end="449:41">++</operator><name pos:start="449:42" pos:end="449:42">i</name></expr></incr>)</control> <block pos:start="449:45" pos:end="467:5">{<block_content pos:start="451:9" pos:end="465:63">

        <expr_stmt pos:start="451:9" pos:end="451:69"><expr pos:start="451:9" pos:end="451:68"><name pos:start="451:9" pos:end="451:12">tcet</name> <operator pos:start="451:14" pos:end="451:14">=</operator> <call pos:start="451:16" pos:end="451:68"><name pos:start="451:16" pos:end="451:34">spapr_tce_new_table</name><argument_list pos:start="451:35" pos:end="451:68">(<argument pos:start="451:36" pos:end="451:47"><expr pos:start="451:36" pos:end="451:47"><call pos:start="451:36" pos:end="451:47"><name pos:start="451:36" pos:end="451:41">DEVICE</name><argument_list pos:start="451:42" pos:end="451:47">(<argument pos:start="451:43" pos:end="451:46"><expr pos:start="451:43" pos:end="451:46"><name pos:start="451:43" pos:end="451:46">sphb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="451:50" pos:end="451:67"><expr pos:start="451:50" pos:end="451:67"><name pos:start="451:50" pos:end="451:67"><name pos:start="451:50" pos:end="451:53">sphb</name><operator pos:start="451:54" pos:end="451:55">-&gt;</operator><name pos:start="451:56" pos:end="451:64">dma_liobn</name><index pos:start="451:65" pos:end="451:67">[<expr pos:start="451:66" pos:end="451:66"><name pos:start="451:66" pos:end="451:66">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="453:9" pos:end="461:9"><if pos:start="453:9" pos:end="461:9">if <condition pos:start="453:12" pos:end="453:18">(<expr pos:start="453:13" pos:end="453:17"><operator pos:start="453:13" pos:end="453:13">!</operator><name pos:start="453:14" pos:end="453:17">tcet</name></expr>)</condition> <block pos:start="453:20" pos:end="461:9">{<block_content pos:start="455:13" pos:end="459:19">

            <expr_stmt pos:start="455:13" pos:end="457:43"><expr pos:start="455:13" pos:end="457:42"><call pos:start="455:13" pos:end="457:42"><name pos:start="455:13" pos:end="455:22">error_setg</name><argument_list pos:start="455:23" pos:end="457:42">(<argument pos:start="455:24" pos:end="455:27"><expr pos:start="455:24" pos:end="455:27"><name pos:start="455:24" pos:end="455:27">errp</name></expr></argument>, <argument pos:start="455:30" pos:end="455:63"><expr pos:start="455:30" pos:end="455:63"><literal type="string" pos:start="455:30" pos:end="455:63">"Creating window#%d failed for %s"</literal></expr></argument>,

                       <argument pos:start="457:24" pos:end="457:24"><expr pos:start="457:24" pos:end="457:24"><name pos:start="457:24" pos:end="457:24">i</name></expr></argument>, <argument pos:start="457:27" pos:end="457:41"><expr pos:start="457:27" pos:end="457:41"><name pos:start="457:27" pos:end="457:41"><name pos:start="457:27" pos:end="457:30">sphb</name><operator pos:start="457:31" pos:end="457:32">-&gt;</operator><name pos:start="457:33" pos:end="457:41">dtbusname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="459:13" pos:end="459:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="463:9" pos:end="465:63"><expr pos:start="463:9" pos:end="465:62"><call pos:start="463:9" pos:end="465:62"><name pos:start="463:9" pos:end="463:35">memory_region_add_subregion</name><argument_list pos:start="463:36" pos:end="465:62">(<argument pos:start="463:37" pos:end="463:53"><expr pos:start="463:37" pos:end="463:53"><operator pos:start="463:37" pos:end="463:37">&amp;</operator><name pos:start="463:38" pos:end="463:53"><name pos:start="463:38" pos:end="463:41">sphb</name><operator pos:start="463:42" pos:end="463:43">-&gt;</operator><name pos:start="463:44" pos:end="463:53">iommu_root</name></name></expr></argument>, <argument pos:start="463:56" pos:end="463:56"><expr pos:start="463:56" pos:end="463:56"><literal type="number" pos:start="463:56" pos:end="463:56">0</literal></expr></argument>,

                                    <argument pos:start="465:37" pos:end="465:61"><expr pos:start="465:37" pos:end="465:61"><call pos:start="465:37" pos:end="465:61"><name pos:start="465:37" pos:end="465:55">spapr_tce_get_iommu</name><argument_list pos:start="465:56" pos:end="465:61">(<argument pos:start="465:57" pos:end="465:60"><expr pos:start="465:57" pos:end="465:60"><name pos:start="465:57" pos:end="465:60">tcet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="471:5" pos:end="471:79"><expr pos:start="471:5" pos:end="471:78"><name pos:start="471:5" pos:end="471:13"><name pos:start="471:5" pos:end="471:8">sphb</name><operator pos:start="471:9" pos:end="471:10">-&gt;</operator><name pos:start="471:11" pos:end="471:13">msi</name></name> <operator pos:start="471:15" pos:end="471:15">=</operator> <call pos:start="471:17" pos:end="471:78"><name pos:start="471:17" pos:end="471:37">g_hash_table_new_full</name><argument_list pos:start="471:38" pos:end="471:78">(<argument pos:start="471:39" pos:end="471:48"><expr pos:start="471:39" pos:end="471:48"><name pos:start="471:39" pos:end="471:48">g_int_hash</name></expr></argument>, <argument pos:start="471:51" pos:end="471:61"><expr pos:start="471:51" pos:end="471:61"><name pos:start="471:51" pos:end="471:61">g_int_equal</name></expr></argument>, <argument pos:start="471:64" pos:end="471:69"><expr pos:start="471:64" pos:end="471:69"><name pos:start="471:64" pos:end="471:69">g_free</name></expr></argument>, <argument pos:start="471:72" pos:end="471:77"><expr pos:start="471:72" pos:end="471:77"><name pos:start="471:72" pos:end="471:77">g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
