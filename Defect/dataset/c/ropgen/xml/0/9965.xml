<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9965.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">parse_type_int64</name><parameter_list pos:start="1:29" pos:end="3:42">(<parameter pos:start="1:30" pos:end="1:39"><decl pos:start="1:30" pos:end="1:39"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:36">Visitor</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">v</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">name</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:66">int64_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">obj</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:34">Error</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier><modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:42">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">StringInputVisitor</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">siv</name> <init pos:start="7:29" pos:end="7:39">= <expr pos:start="7:31" pos:end="7:39"><call pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:36">to_siv</name><argument_list pos:start="7:37" pos:end="7:39">(<argument pos:start="7:38" pos:end="7:38"><expr pos:start="7:38" pos:end="7:38"><name pos:start="7:38" pos:end="7:38">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:21">(<expr pos:start="11:9" pos:end="11:20"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:20"><name pos:start="11:10" pos:end="11:12">siv</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:20">string</name></name></expr>)</condition> <block pos:start="11:23" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:15">

        <expr_stmt pos:start="13:9" pos:end="15:30"><expr pos:start="13:9" pos:end="15:29"><call pos:start="13:9" pos:end="15:29"><name pos:start="13:9" pos:end="13:18">error_setg</name><argument_list pos:start="13:19" pos:end="15:29">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">errp</name></expr></argument>, <argument pos:start="13:26" pos:end="13:52"><expr pos:start="13:26" pos:end="13:52"><name pos:start="13:26" pos:end="13:52">QERR_INVALID_PARAMETER_TYPE</name></expr></argument>, <argument pos:start="13:55" pos:end="13:74"><expr pos:start="13:55" pos:end="13:74"><ternary pos:start="13:55" pos:end="13:74"><condition pos:start="13:55" pos:end="13:60"><expr pos:start="13:55" pos:end="13:58"><name pos:start="13:55" pos:end="13:58">name</name></expr> ?</condition><then pos:start="13:62" pos:end="13:65"> <expr pos:start="13:62" pos:end="13:65"><name pos:start="13:62" pos:end="13:65">name</name></expr> </then><else pos:start="13:67" pos:end="13:74">: <expr pos:start="13:69" pos:end="13:74"><literal type="string" pos:start="13:69" pos:end="13:74">"null"</literal></expr></else></ternary></expr></argument>,

                   <argument pos:start="15:20" pos:end="15:28"><expr pos:start="15:20" pos:end="15:28"><literal type="string" pos:start="15:20" pos:end="15:28">"integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:39">(<expr pos:start="23:9" pos:end="23:38"><call pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:17">parse_str</name><argument_list pos:start="23:18" pos:end="23:34">(<argument pos:start="23:19" pos:end="23:21"><expr pos:start="23:19" pos:end="23:21"><name pos:start="23:19" pos:end="23:21">siv</name></expr></argument>, <argument pos:start="23:24" pos:end="23:27"><expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">name</name></expr></argument>, <argument pos:start="23:30" pos:end="23:33"><expr pos:start="23:30" pos:end="23:33"><name pos:start="23:30" pos:end="23:33">errp</name></expr></argument>)</argument_list></call> <operator pos:start="23:36" pos:end="23:36">&lt;</operator> <literal type="number" pos:start="23:38" pos:end="23:38">0</literal></expr>)</condition> <block pos:start="23:41" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:21">(<expr pos:start="31:9" pos:end="31:20"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:20"><name pos:start="31:10" pos:end="31:12">siv</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:20">ranges</name></name></expr>)</condition> <block pos:start="31:23" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:19">

        <goto pos:start="33:9" pos:end="33:19">goto <name pos:start="33:14" pos:end="33:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="67:5"><if pos:start="39:5" pos:end="67:5">if <condition pos:start="39:8" pos:end="39:24">(<expr pos:start="39:9" pos:end="39:23"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:23"><name pos:start="39:10" pos:end="39:12">siv</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:23">cur_range</name></name></expr>)</condition> <block pos:start="39:26" pos:end="67:5">{<block_content pos:start="41:9" pos:end="65:28">

        <decl_stmt pos:start="41:9" pos:end="41:17"><decl pos:start="41:9" pos:end="41:16"><type pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:13">Range</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:16">r</name></decl>;</decl_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:51"><expr pos:start="45:9" pos:end="45:50"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:11">siv</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:22">cur_range</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <call pos:start="45:26" pos:end="45:50"><name pos:start="45:26" pos:end="45:37">g_list_first</name><argument_list pos:start="45:38" pos:end="45:50">(<argument pos:start="45:39" pos:end="45:49"><expr pos:start="45:39" pos:end="45:49"><name pos:start="45:39" pos:end="45:49"><name pos:start="45:39" pos:end="45:41">siv</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:49">ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:28">(<expr pos:start="47:13" pos:end="47:27"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:27"><name pos:start="47:14" pos:end="47:16">siv</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:27">cur_range</name></name></expr>)</condition> <block pos:start="47:30" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:23">

            <goto pos:start="49:13" pos:end="49:23">goto <name pos:start="49:18" pos:end="49:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:9">r</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <name pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:15">siv</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:26">cur_range</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:32">data</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:15">(<expr pos:start="57:13" pos:end="57:14"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:14">r</name></expr>)</condition> <block pos:start="57:17" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:23">

            <goto pos:start="59:13" pos:end="59:23">goto <name pos:start="59:18" pos:end="59:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:28"><expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">siv</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:16">cur</name></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:27"><name pos:start="65:20" pos:end="65:20">r</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:27">begin</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:20"><expr pos:start="71:5" pos:end="71:19"><operator pos:start="71:5" pos:end="71:5">*</operator><name pos:start="71:6" pos:end="71:8">obj</name> <operator pos:start="71:10" pos:end="71:10">=</operator> <name pos:start="71:12" pos:end="71:19"><name pos:start="71:12" pos:end="71:14">siv</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:19">cur</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:15"><expr pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:12"><name pos:start="73:5" pos:end="73:7">siv</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:12">cur</name></name><operator pos:start="73:13" pos:end="73:14">++</operator></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:11">return;</return>



<label pos:start="79:1" pos:end="79:6"><name pos:start="79:1" pos:end="79:5">error</name>:</label>

    <expr_stmt pos:start="81:5" pos:end="83:42"><expr pos:start="81:5" pos:end="83:41"><call pos:start="81:5" pos:end="83:41"><name pos:start="81:5" pos:end="81:14">error_setg</name><argument_list pos:start="81:15" pos:end="83:41">(<argument pos:start="81:16" pos:end="81:19"><expr pos:start="81:16" pos:end="81:19"><name pos:start="81:16" pos:end="81:19">errp</name></expr></argument>, <argument pos:start="81:22" pos:end="81:49"><expr pos:start="81:22" pos:end="81:49"><name pos:start="81:22" pos:end="81:49">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="81:52" pos:end="81:71"><expr pos:start="81:52" pos:end="81:71"><ternary pos:start="81:52" pos:end="81:71"><condition pos:start="81:52" pos:end="81:57"><expr pos:start="81:52" pos:end="81:55"><name pos:start="81:52" pos:end="81:55">name</name></expr> ?</condition><then pos:start="81:59" pos:end="81:62"> <expr pos:start="81:59" pos:end="81:62"><name pos:start="81:59" pos:end="81:62">name</name></expr> </then><else pos:start="81:64" pos:end="81:71">: <expr pos:start="81:66" pos:end="81:71"><literal type="string" pos:start="81:66" pos:end="81:71">"null"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="83:16" pos:end="83:40"><expr pos:start="83:16" pos:end="83:40"><literal type="string" pos:start="83:16" pos:end="83:40">"an int64 value or range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
