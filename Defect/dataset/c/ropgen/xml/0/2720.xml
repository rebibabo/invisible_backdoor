<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2720.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">pc_cmos_init</name><parameter_list pos:start="1:18" pos:end="7:58">(<parameter pos:start="1:19" pos:end="1:37"><decl pos:start="1:19" pos:end="1:37"><type pos:start="1:19" pos:end="1:37"><name pos:start="1:19" pos:end="1:28">ram_addr_t</name></type> <name pos:start="1:30" pos:end="1:37">ram_size</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:67"><decl pos:start="1:40" pos:end="1:67"><type pos:start="1:40" pos:end="1:67"><name pos:start="1:40" pos:end="1:49">ram_addr_t</name></type> <name pos:start="1:51" pos:end="1:67">above_4g_mem_size</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:41"><decl pos:start="3:19" pos:end="3:41"><type pos:start="3:19" pos:end="3:41"><specifier pos:start="3:19" pos:end="3:23">const</specifier> <name pos:start="3:25" pos:end="3:28">char</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:41">boot_device</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:35"><decl pos:start="5:19" pos:end="5:35"><type pos:start="5:19" pos:end="5:35"><name pos:start="5:19" pos:end="5:26">BusState</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:35">idebus0</name></decl></parameter>, <parameter pos:start="5:38" pos:end="5:54"><decl pos:start="5:38" pos:end="5:54"><type pos:start="5:38" pos:end="5:54"><name pos:start="5:38" pos:end="5:45">BusState</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:54">idebus1</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:43"><decl pos:start="7:19" pos:end="7:43"><type pos:start="7:19" pos:end="7:43"><name pos:start="7:19" pos:end="7:24">FDCtrl</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:43">floppy_controller</name></decl></parameter>, <parameter pos:start="7:46" pos:end="7:57"><decl pos:start="7:46" pos:end="7:57"><type pos:start="7:46" pos:end="7:57"><name pos:start="7:46" pos:end="7:54">ISADevice</name> <modifier pos:start="7:56" pos:end="7:56">*</modifier></type><name pos:start="7:57" pos:end="7:57">s</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="165:1">{<block_content pos:start="11:5" pos:end="163:49">

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">val</name></decl>, <decl pos:start="11:14" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:15">nb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">FDriveType</name></type> <name pos:start="13:16" pos:end="13:18">fd0</name></decl>, <decl pos:start="13:21" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:21" pos:end="13:23">fd1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:32"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <name pos:start="15:12" pos:end="15:32">pc_cmos_init_late_arg</name></type> <name pos:start="15:34" pos:end="15:36">arg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:66">/* various important CMOS locations needed by PC/Bochs bios */</comment>



    <comment type="block" pos:start="23:5" pos:end="23:21">/* memory size */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:14"><expr pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:7">val</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <literal type="number" pos:start="25:11" pos:end="25:13">640</literal></expr>;</expr_stmt> <comment type="block" pos:start="25:16" pos:end="25:37">/* base memory in K */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:18">rtc_set_memory</name><argument_list pos:start="27:19" pos:end="27:32">(<argument pos:start="27:20" pos:end="27:20"><expr pos:start="27:20" pos:end="27:20"><name pos:start="27:20" pos:end="27:20">s</name></expr></argument>, <argument pos:start="27:23" pos:end="27:26"><expr pos:start="27:23" pos:end="27:26"><literal type="number" pos:start="27:23" pos:end="27:26">0x15</literal></expr></argument>, <argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><call pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:18">rtc_set_memory</name><argument_list pos:start="29:19" pos:end="29:37">(<argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><name pos:start="29:20" pos:end="29:20">s</name></expr></argument>, <argument pos:start="29:23" pos:end="29:26"><expr pos:start="29:23" pos:end="29:26"><literal type="number" pos:start="29:23" pos:end="29:26">0x16</literal></expr></argument>, <argument pos:start="29:29" pos:end="29:36"><expr pos:start="29:29" pos:end="29:36"><name pos:start="29:29" pos:end="29:31">val</name> <operator pos:start="29:33" pos:end="29:34">&gt;&gt;</operator> <literal type="number" pos:start="29:36" pos:end="29:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:7">val</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <operator pos:start="33:11" pos:end="33:11">(</operator><name pos:start="33:12" pos:end="33:19">ram_size</name> <operator pos:start="33:21" pos:end="33:21">/</operator> <literal type="number" pos:start="33:23" pos:end="33:26">1024</literal><operator pos:start="33:27" pos:end="33:27">)</operator> <operator pos:start="33:29" pos:end="33:29">-</operator> <literal type="number" pos:start="33:31" pos:end="33:34">1024</literal></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:20"><if pos:start="35:5" pos:end="37:20">if <condition pos:start="35:8" pos:end="35:20">(<expr pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:11">val</name> <operator pos:start="35:13" pos:end="35:13">&gt;</operator> <literal type="number" pos:start="35:15" pos:end="35:19">65535</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:20"><block_content pos:start="37:9" pos:end="37:20">

        <expr_stmt pos:start="37:9" pos:end="37:20"><expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:11">val</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <literal type="number" pos:start="37:15" pos:end="37:19">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><call pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:18">rtc_set_memory</name><argument_list pos:start="39:19" pos:end="39:32">(<argument pos:start="39:20" pos:end="39:20"><expr pos:start="39:20" pos:end="39:20"><name pos:start="39:20" pos:end="39:20">s</name></expr></argument>, <argument pos:start="39:23" pos:end="39:26"><expr pos:start="39:23" pos:end="39:26"><literal type="number" pos:start="39:23" pos:end="39:26">0x17</literal></expr></argument>, <argument pos:start="39:29" pos:end="39:31"><expr pos:start="39:29" pos:end="39:31"><name pos:start="39:29" pos:end="39:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><call pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:18">rtc_set_memory</name><argument_list pos:start="41:19" pos:end="41:37">(<argument pos:start="41:20" pos:end="41:20"><expr pos:start="41:20" pos:end="41:20"><name pos:start="41:20" pos:end="41:20">s</name></expr></argument>, <argument pos:start="41:23" pos:end="41:26"><expr pos:start="41:23" pos:end="41:26"><literal type="number" pos:start="41:23" pos:end="41:26">0x18</literal></expr></argument>, <argument pos:start="41:29" pos:end="41:36"><expr pos:start="41:29" pos:end="41:36"><name pos:start="41:29" pos:end="41:31">val</name> <operator pos:start="41:33" pos:end="41:34">&gt;&gt;</operator> <literal type="number" pos:start="41:36" pos:end="41:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><call pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:18">rtc_set_memory</name><argument_list pos:start="43:19" pos:end="43:32">(<argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">s</name></expr></argument>, <argument pos:start="43:23" pos:end="43:26"><expr pos:start="43:23" pos:end="43:26"><literal type="number" pos:start="43:23" pos:end="43:26">0x30</literal></expr></argument>, <argument pos:start="43:29" pos:end="43:31"><expr pos:start="43:29" pos:end="43:31"><name pos:start="43:29" pos:end="43:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:38"><expr pos:start="45:5" pos:end="45:37"><call pos:start="45:5" pos:end="45:37"><name pos:start="45:5" pos:end="45:18">rtc_set_memory</name><argument_list pos:start="45:19" pos:end="45:37">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">s</name></expr></argument>, <argument pos:start="45:23" pos:end="45:26"><expr pos:start="45:23" pos:end="45:26"><literal type="number" pos:start="45:23" pos:end="45:26">0x31</literal></expr></argument>, <argument pos:start="45:29" pos:end="45:36"><expr pos:start="45:29" pos:end="45:36"><name pos:start="45:29" pos:end="45:31">val</name> <operator pos:start="45:33" pos:end="45:34">&gt;&gt;</operator> <literal type="number" pos:start="45:36" pos:end="45:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:26">(<expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:25">above_4g_mem_size</name></expr>)</condition> <block pos:start="49:28" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:67">

        <expr_stmt pos:start="51:9" pos:end="51:71"><expr pos:start="51:9" pos:end="51:70"><call pos:start="51:9" pos:end="51:70"><name pos:start="51:9" pos:end="51:22">rtc_set_memory</name><argument_list pos:start="51:23" pos:end="51:70">(<argument pos:start="51:24" pos:end="51:24"><expr pos:start="51:24" pos:end="51:24"><name pos:start="51:24" pos:end="51:24">s</name></expr></argument>, <argument pos:start="51:27" pos:end="51:30"><expr pos:start="51:27" pos:end="51:30"><literal type="number" pos:start="51:27" pos:end="51:30">0x5b</literal></expr></argument>, <argument pos:start="51:33" pos:end="51:69"><expr pos:start="51:33" pos:end="51:69"><operator pos:start="51:33" pos:end="51:33">(</operator><name pos:start="51:34" pos:end="51:41">unsigned</name> <name pos:start="51:43" pos:end="51:45">int</name><operator pos:start="51:46" pos:end="51:46">)</operator><name pos:start="51:47" pos:end="51:63">above_4g_mem_size</name> <operator pos:start="51:65" pos:end="51:66">&gt;&gt;</operator> <literal type="number" pos:start="51:68" pos:end="51:69">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><call pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:22">rtc_set_memory</name><argument_list pos:start="53:23" pos:end="53:70">(<argument pos:start="53:24" pos:end="53:24"><expr pos:start="53:24" pos:end="53:24"><name pos:start="53:24" pos:end="53:24">s</name></expr></argument>, <argument pos:start="53:27" pos:end="53:30"><expr pos:start="53:27" pos:end="53:30"><literal type="number" pos:start="53:27" pos:end="53:30">0x5c</literal></expr></argument>, <argument pos:start="53:33" pos:end="53:69"><expr pos:start="53:33" pos:end="53:69"><operator pos:start="53:33" pos:end="53:33">(</operator><name pos:start="53:34" pos:end="53:41">unsigned</name> <name pos:start="53:43" pos:end="53:45">int</name><operator pos:start="53:46" pos:end="53:46">)</operator><name pos:start="53:47" pos:end="53:63">above_4g_mem_size</name> <operator pos:start="53:65" pos:end="53:66">&gt;&gt;</operator> <literal type="number" pos:start="53:68" pos:end="53:69">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:67"><expr pos:start="55:9" pos:end="55:66"><call pos:start="55:9" pos:end="55:66"><name pos:start="55:9" pos:end="55:22">rtc_set_memory</name><argument_list pos:start="55:23" pos:end="55:66">(<argument pos:start="55:24" pos:end="55:24"><expr pos:start="55:24" pos:end="55:24"><name pos:start="55:24" pos:end="55:24">s</name></expr></argument>, <argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><literal type="number" pos:start="55:27" pos:end="55:30">0x5d</literal></expr></argument>, <argument pos:start="55:33" pos:end="55:65"><expr pos:start="55:33" pos:end="55:65"><operator pos:start="55:33" pos:end="55:33">(</operator><name pos:start="55:34" pos:end="55:41">uint64_t</name><operator pos:start="55:42" pos:end="55:42">)</operator><name pos:start="55:43" pos:end="55:59">above_4g_mem_size</name> <operator pos:start="55:61" pos:end="55:62">&gt;&gt;</operator> <literal type="number" pos:start="55:64" pos:end="55:65">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="67:16"><if pos:start="61:5" pos:end="63:64">if <condition pos:start="61:8" pos:end="61:38">(<expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:16">ram_size</name> <operator pos:start="61:18" pos:end="61:18">&gt;</operator> <operator pos:start="61:20" pos:end="61:20">(</operator><literal type="number" pos:start="61:21" pos:end="61:22">16</literal> <operator pos:start="61:24" pos:end="61:24">*</operator> <literal type="number" pos:start="61:26" pos:end="61:29">1024</literal> <operator pos:start="61:31" pos:end="61:31">*</operator> <literal type="number" pos:start="61:33" pos:end="61:36">1024</literal><operator pos:start="61:37" pos:end="61:37">)</operator></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:64"><block_content pos:start="63:9" pos:end="63:64">

        <expr_stmt pos:start="63:9" pos:end="63:64"><expr pos:start="63:9" pos:end="63:63"><name pos:start="63:9" pos:end="63:11">val</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">(</operator><name pos:start="63:16" pos:end="63:23">ram_size</name> <operator pos:start="63:25" pos:end="63:25">/</operator> <literal type="number" pos:start="63:27" pos:end="63:31">65536</literal><operator pos:start="63:32" pos:end="63:32">)</operator> <operator pos:start="63:34" pos:end="63:34">-</operator> <operator pos:start="63:36" pos:end="63:36">(</operator><operator pos:start="63:37" pos:end="63:37">(</operator><literal type="number" pos:start="63:38" pos:end="63:39">16</literal> <operator pos:start="63:41" pos:end="63:41">*</operator> <literal type="number" pos:start="63:43" pos:end="63:46">1024</literal> <operator pos:start="63:48" pos:end="63:48">*</operator> <literal type="number" pos:start="63:50" pos:end="63:53">1024</literal><operator pos:start="63:54" pos:end="63:54">)</operator> <operator pos:start="63:56" pos:end="63:56">/</operator> <literal type="number" pos:start="63:58" pos:end="63:62">65536</literal><operator pos:start="63:63" pos:end="63:63">)</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="65:5" pos:end="67:16">else<block type="pseudo" pos:start="67:9" pos:end="67:16"><block_content pos:start="67:9" pos:end="67:16">

        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">val</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="69:5" pos:end="71:20"><if pos:start="69:5" pos:end="71:20">if <condition pos:start="69:8" pos:end="69:20">(<expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:11">val</name> <operator pos:start="69:13" pos:end="69:13">&gt;</operator> <literal type="number" pos:start="69:15" pos:end="69:19">65535</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:20"><block_content pos:start="71:9" pos:end="71:20">

        <expr_stmt pos:start="71:9" pos:end="71:20"><expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:11">val</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <literal type="number" pos:start="71:15" pos:end="71:19">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><call pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:18">rtc_set_memory</name><argument_list pos:start="73:19" pos:end="73:32">(<argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><name pos:start="73:20" pos:end="73:20">s</name></expr></argument>, <argument pos:start="73:23" pos:end="73:26"><expr pos:start="73:23" pos:end="73:26"><literal type="number" pos:start="73:23" pos:end="73:26">0x34</literal></expr></argument>, <argument pos:start="73:29" pos:end="73:31"><expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:38"><expr pos:start="75:5" pos:end="75:37"><call pos:start="75:5" pos:end="75:37"><name pos:start="75:5" pos:end="75:18">rtc_set_memory</name><argument_list pos:start="75:19" pos:end="75:37">(<argument pos:start="75:20" pos:end="75:20"><expr pos:start="75:20" pos:end="75:20"><name pos:start="75:20" pos:end="75:20">s</name></expr></argument>, <argument pos:start="75:23" pos:end="75:26"><expr pos:start="75:23" pos:end="75:26"><literal type="number" pos:start="75:23" pos:end="75:26">0x35</literal></expr></argument>, <argument pos:start="75:29" pos:end="75:36"><expr pos:start="75:29" pos:end="75:36"><name pos:start="75:29" pos:end="75:31">val</name> <operator pos:start="75:33" pos:end="75:34">&gt;&gt;</operator> <literal type="number" pos:start="75:36" pos:end="75:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:31">/* set the number of CPU */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:42"><expr pos:start="81:5" pos:end="81:41"><call pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:18">rtc_set_memory</name><argument_list pos:start="81:19" pos:end="81:41">(<argument pos:start="81:20" pos:end="81:20"><expr pos:start="81:20" pos:end="81:20"><name pos:start="81:20" pos:end="81:20">s</name></expr></argument>, <argument pos:start="81:23" pos:end="81:26"><expr pos:start="81:23" pos:end="81:26"><literal type="number" pos:start="81:23" pos:end="81:26">0x5f</literal></expr></argument>, <argument pos:start="81:29" pos:end="81:40"><expr pos:start="81:29" pos:end="81:40"><name pos:start="81:29" pos:end="81:36">smp_cpus</name> <operator pos:start="81:38" pos:end="81:38">-</operator> <literal type="number" pos:start="81:40" pos:end="81:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:75">/* set boot devices, and disable floppy signature check if requested */</comment>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:49">(<expr pos:start="87:9" pos:end="87:48"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:20">set_boot_dev</name><argument_list pos:start="87:21" pos:end="87:48">(<argument pos:start="87:22" pos:end="87:22"><expr pos:start="87:22" pos:end="87:22"><name pos:start="87:22" pos:end="87:22">s</name></expr></argument>, <argument pos:start="87:25" pos:end="87:35"><expr pos:start="87:25" pos:end="87:35"><name pos:start="87:25" pos:end="87:35">boot_device</name></expr></argument>, <argument pos:start="87:38" pos:end="87:47"><expr pos:start="87:38" pos:end="87:47"><name pos:start="87:38" pos:end="87:47">fd_bootchk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:51" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:16">

        <expr_stmt pos:start="89:9" pos:end="89:16"><expr pos:start="89:9" pos:end="89:15"><call pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:12">exit</name><argument_list pos:start="89:13" pos:end="89:15">(<argument pos:start="89:14" pos:end="89:14"><expr pos:start="89:14" pos:end="89:14"><literal type="number" pos:start="89:14" pos:end="89:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:21">/* floppy type */</comment>



    <expr_stmt pos:start="99:5" pos:end="99:54"><expr pos:start="99:5" pos:end="99:53"><name pos:start="99:5" pos:end="99:7">fd0</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:53"><name pos:start="99:11" pos:end="99:31">fdctrl_get_drive_type</name><argument_list pos:start="99:32" pos:end="99:53">(<argument pos:start="99:33" pos:end="99:49"><expr pos:start="99:33" pos:end="99:49"><name pos:start="99:33" pos:end="99:49">floppy_controller</name></expr></argument>, <argument pos:start="99:52" pos:end="99:52"><expr pos:start="99:52" pos:end="99:52"><literal type="number" pos:start="99:52" pos:end="99:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:54"><expr pos:start="101:5" pos:end="101:53"><name pos:start="101:5" pos:end="101:7">fd1</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:53"><name pos:start="101:11" pos:end="101:31">fdctrl_get_drive_type</name><argument_list pos:start="101:32" pos:end="101:53">(<argument pos:start="101:33" pos:end="101:49"><expr pos:start="101:33" pos:end="101:49"><name pos:start="101:33" pos:end="101:49">floppy_controller</name></expr></argument>, <argument pos:start="101:52" pos:end="101:52"><expr pos:start="101:52" pos:end="101:52"><literal type="number" pos:start="101:52" pos:end="101:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:75"><expr pos:start="105:5" pos:end="105:74"><name pos:start="105:5" pos:end="105:7">val</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <operator pos:start="105:11" pos:end="105:11">(</operator><call pos:start="105:12" pos:end="105:38"><name pos:start="105:12" pos:end="105:33">cmos_get_fd_drive_type</name><argument_list pos:start="105:34" pos:end="105:38">(<argument pos:start="105:35" pos:end="105:37"><expr pos:start="105:35" pos:end="105:37"><name pos:start="105:35" pos:end="105:37">fd0</name></expr></argument>)</argument_list></call> <operator pos:start="105:40" pos:end="105:41">&lt;&lt;</operator> <literal type="number" pos:start="105:43" pos:end="105:43">4</literal><operator pos:start="105:44" pos:end="105:44">)</operator> <operator pos:start="105:46" pos:end="105:46">|</operator> <call pos:start="105:48" pos:end="105:74"><name pos:start="105:48" pos:end="105:69">cmos_get_fd_drive_type</name><argument_list pos:start="105:70" pos:end="105:74">(<argument pos:start="105:71" pos:end="105:73"><expr pos:start="105:71" pos:end="105:73"><name pos:start="105:71" pos:end="105:73">fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:33"><expr pos:start="107:5" pos:end="107:32"><call pos:start="107:5" pos:end="107:32"><name pos:start="107:5" pos:end="107:18">rtc_set_memory</name><argument_list pos:start="107:19" pos:end="107:32">(<argument pos:start="107:20" pos:end="107:20"><expr pos:start="107:20" pos:end="107:20"><name pos:start="107:20" pos:end="107:20">s</name></expr></argument>, <argument pos:start="107:23" pos:end="107:26"><expr pos:start="107:23" pos:end="107:26"><literal type="number" pos:start="107:23" pos:end="107:26">0x10</literal></expr></argument>, <argument pos:start="107:29" pos:end="107:31"><expr pos:start="107:29" pos:end="107:31"><name pos:start="107:29" pos:end="107:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:12"><expr pos:start="111:5" pos:end="111:11"><name pos:start="111:5" pos:end="111:7">val</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <literal type="number" pos:start="111:11" pos:end="111:11">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:11"><expr pos:start="113:5" pos:end="113:10"><name pos:start="113:5" pos:end="113:6">nb</name> <operator pos:start="113:8" pos:end="113:8">=</operator> <literal type="number" pos:start="113:10" pos:end="113:10">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:30">(<expr pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:11">fd0</name> <operator pos:start="115:13" pos:end="115:13">&lt;</operator> <name pos:start="115:15" pos:end="115:29">FDRIVE_DRV_NONE</name></expr>)</condition> <block pos:start="115:32" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:13">

        <expr_stmt pos:start="117:9" pos:end="117:13"><expr pos:start="117:9" pos:end="117:12"><name pos:start="117:9" pos:end="117:10">nb</name><operator pos:start="117:11" pos:end="117:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:30">(<expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:11">fd1</name> <operator pos:start="121:13" pos:end="121:13">&lt;</operator> <name pos:start="121:15" pos:end="121:29">FDRIVE_DRV_NONE</name></expr>)</condition> <block pos:start="121:32" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:13">

        <expr_stmt pos:start="123:9" pos:end="123:13"><expr pos:start="123:9" pos:end="123:12"><name pos:start="123:9" pos:end="123:10">nb</name><operator pos:start="123:11" pos:end="123:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="127:5" pos:end="145:5">switch <condition pos:start="127:12" pos:end="127:15">(<expr pos:start="127:13" pos:end="127:14"><name pos:start="127:13" pos:end="127:14">nb</name></expr>)</condition> <block pos:start="127:17" pos:end="145:5">{<block_content pos:start="129:5" pos:end="143:14">

    <case pos:start="129:5" pos:end="129:11">case <expr pos:start="129:10" pos:end="129:10"><literal type="number" pos:start="129:10" pos:end="129:10">0</literal></expr>:</case>

        <break pos:start="131:9" pos:end="131:14">break;</break>

    <case pos:start="133:5" pos:end="133:11">case <expr pos:start="133:10" pos:end="133:10"><literal type="number" pos:start="133:10" pos:end="133:10">1</literal></expr>:</case>

        <expr_stmt pos:start="135:9" pos:end="135:20"><expr pos:start="135:9" pos:end="135:19"><name pos:start="135:9" pos:end="135:11">val</name> <operator pos:start="135:13" pos:end="135:14">|=</operator> <literal type="number" pos:start="135:16" pos:end="135:19">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="135:22" pos:end="135:50">/* 1 drive, ready for boot */</comment>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:11">case <expr pos:start="139:10" pos:end="139:10"><literal type="number" pos:start="139:10" pos:end="139:10">2</literal></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:20"><expr pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:11">val</name> <operator pos:start="141:13" pos:end="141:14">|=</operator> <literal type="number" pos:start="141:16" pos:end="141:19">0x41</literal></expr>;</expr_stmt> <comment type="block" pos:start="141:22" pos:end="141:51">/* 2 drives, ready for boot */</comment>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="147:5" pos:end="147:16"><expr pos:start="147:5" pos:end="147:15"><name pos:start="147:5" pos:end="147:7">val</name> <operator pos:start="147:9" pos:end="147:10">|=</operator> <literal type="number" pos:start="147:12" pos:end="147:15">0x02</literal></expr>;</expr_stmt> <comment type="block" pos:start="147:18" pos:end="147:35">/* FPU is there */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:16"><expr pos:start="149:5" pos:end="149:15"><name pos:start="149:5" pos:end="149:7">val</name> <operator pos:start="149:9" pos:end="149:10">|=</operator> <literal type="number" pos:start="149:12" pos:end="149:15">0x04</literal></expr>;</expr_stmt> <comment type="block" pos:start="149:18" pos:end="149:43">/* PS/2 mouse installed */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:47"><expr pos:start="151:5" pos:end="151:46"><call pos:start="151:5" pos:end="151:46"><name pos:start="151:5" pos:end="151:18">rtc_set_memory</name><argument_list pos:start="151:19" pos:end="151:46">(<argument pos:start="151:20" pos:end="151:20"><expr pos:start="151:20" pos:end="151:20"><name pos:start="151:20" pos:end="151:20">s</name></expr></argument>, <argument pos:start="151:23" pos:end="151:40"><expr pos:start="151:23" pos:end="151:40"><name pos:start="151:23" pos:end="151:40">REG_EQUIPMENT_BYTE</name></expr></argument>, <argument pos:start="151:43" pos:end="151:45"><expr pos:start="151:43" pos:end="151:45"><name pos:start="151:43" pos:end="151:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:21">/* hard drives */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:22"><expr pos:start="157:5" pos:end="157:21"><name pos:start="157:5" pos:end="157:17"><name pos:start="157:5" pos:end="157:7">arg</name><operator pos:start="157:8" pos:end="157:8">.</operator><name pos:start="157:9" pos:end="157:17">rtc_state</name></name> <operator pos:start="157:19" pos:end="157:19">=</operator> <name pos:start="157:21" pos:end="157:21">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:26"><expr pos:start="159:5" pos:end="159:25"><name pos:start="159:5" pos:end="159:15"><name pos:start="159:5" pos:end="159:7">arg</name><operator pos:start="159:8" pos:end="159:8">.</operator><name pos:start="159:9" pos:end="159:15">idebus0</name></name> <operator pos:start="159:17" pos:end="159:17">=</operator> <name pos:start="159:19" pos:end="159:25">idebus0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:26"><expr pos:start="161:5" pos:end="161:25"><name pos:start="161:5" pos:end="161:15"><name pos:start="161:5" pos:end="161:7">arg</name><operator pos:start="161:8" pos:end="161:8">.</operator><name pos:start="161:9" pos:end="161:15">idebus1</name></name> <operator pos:start="161:17" pos:end="161:17">=</operator> <name pos:start="161:19" pos:end="161:25">idebus1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:49"><expr pos:start="163:5" pos:end="163:48"><call pos:start="163:5" pos:end="163:48"><name pos:start="163:5" pos:end="163:23">qemu_register_reset</name><argument_list pos:start="163:24" pos:end="163:48">(<argument pos:start="163:25" pos:end="163:41"><expr pos:start="163:25" pos:end="163:41"><name pos:start="163:25" pos:end="163:41">pc_cmos_init_late</name></expr></argument>, <argument pos:start="163:44" pos:end="163:47"><expr pos:start="163:44" pos:end="163:47"><operator pos:start="163:44" pos:end="163:44">&amp;</operator><name pos:start="163:45" pos:end="163:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
