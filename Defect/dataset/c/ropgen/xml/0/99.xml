<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/99.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">qcrypto_init</name><parameter_list pos:start="1:17" pos:end="1:30">(<parameter pos:start="1:18" pos:end="1:29"><decl pos:start="1:18" pos:end="1:29"><type pos:start="1:18" pos:end="1:25"><name pos:start="1:18" pos:end="1:22">Error</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier><modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:29">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:31"><expr pos:start="7:5" pos:end="7:30"><name pos:start="7:5" pos:end="7:7">ret</name> <operator pos:start="7:9" pos:end="7:9">=</operator> <call pos:start="7:11" pos:end="7:30"><name pos:start="7:11" pos:end="7:28">gnutls_global_init</name><argument_list pos:start="7:29" pos:end="7:30">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="9:5" pos:end="22:0"><if pos:start="9:5" pos:end="22:0">if <condition pos:start="9:8" pos:end="9:16">(<expr pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:11">ret</name> <operator pos:start="9:13" pos:end="9:13">&lt;</operator> <literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr>)</condition> <block pos:start="9:18" pos:end="22:0">{<block_content pos:start="11:9" pos:end="17:18">

        <expr_stmt pos:start="11:9" pos:end="15:41"><expr pos:start="11:9" pos:end="15:40"><call pos:start="11:9" pos:end="15:40"><name pos:start="11:9" pos:end="11:18">error_setg</name><argument_list pos:start="11:19" pos:end="15:40">(<argument pos:start="11:20" pos:end="11:23"><expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">errp</name></expr></argument>,

                   <argument pos:start="13:20" pos:end="13:60"><expr pos:start="13:20" pos:end="13:60"><literal type="string" pos:start="13:20" pos:end="13:60">"Unable to initialize GNUTLS library: %s"</literal></expr></argument>,

                   <argument pos:start="15:20" pos:end="15:39"><expr pos:start="15:20" pos:end="15:39"><call pos:start="15:20" pos:end="15:39"><name pos:start="15:20" pos:end="15:34">gnutls_strerror</name><argument_list pos:start="15:35" pos:end="15:39">(<argument pos:start="15:36" pos:end="15:38"><expr pos:start="15:36" pos:end="15:38"><name pos:start="15:36" pos:end="15:38">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="21:1" pos:end="21:19">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:19">DEBUG_GNUTLS</name></cpp:ifdef>

    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><call pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:31">gnutls_global_set_log_level</name><argument_list pos:start="23:32" pos:end="23:35">(<argument pos:start="23:33" pos:end="23:34"><expr pos:start="23:33" pos:end="23:34"><literal type="number" pos:start="23:33" pos:end="23:34">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="32:0"><expr pos:start="25:5" pos:end="25:54"><call pos:start="25:5" pos:end="25:54"><name pos:start="25:5" pos:end="25:34">gnutls_global_set_log_function</name><argument_list pos:start="25:35" pos:end="25:54">(<argument pos:start="25:36" pos:end="25:53"><expr pos:start="25:36" pos:end="25:53"><name pos:start="25:36" pos:end="25:53">qcrypto_gnutls_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="31:1" pos:end="31:27">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:27">CONFIG_GNUTLS_GCRYPT</name></cpp:ifdef>

    <if_stmt pos:start="33:5" pos:end="42:0"><if pos:start="33:5" pos:end="42:0">if <condition pos:start="33:8" pos:end="33:44">(<expr pos:start="33:9" pos:end="33:43"><operator pos:start="33:9" pos:end="33:9">!</operator><call pos:start="33:10" pos:end="33:43"><name pos:start="33:10" pos:end="33:27">gcry_check_version</name><argument_list pos:start="33:28" pos:end="33:43">(<argument pos:start="33:29" pos:end="33:42"><expr pos:start="33:29" pos:end="33:42"><name pos:start="33:29" pos:end="33:42">GCRYPT_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:46" pos:end="42:0">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:56"><expr pos:start="35:9" pos:end="35:55"><call pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="35:55">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>, <argument pos:start="35:26" pos:end="35:54"><expr pos:start="35:26" pos:end="35:54"><literal type="string" pos:start="35:26" pos:end="35:54">"Unable to initialize gcrypt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="41:1" pos:end="41:34">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:34">QCRYPTO_INIT_GCRYPT_THREADS</name></cpp:ifdef>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:69"><call pos:start="43:5" pos:end="43:69"><name pos:start="43:5" pos:end="43:16">gcry_control</name><argument_list pos:start="43:17" pos:end="43:69">(<argument pos:start="43:18" pos:end="43:39"><expr pos:start="43:18" pos:end="43:39"><name pos:start="43:18" pos:end="43:39">GCRYCTL_SET_THREAD_CBS</name></expr></argument>, <argument pos:start="43:42" pos:end="43:68"><expr pos:start="43:42" pos:end="43:68"><operator pos:start="43:42" pos:end="43:42">&amp;</operator><name pos:start="43:43" pos:end="43:68">qcrypto_gcrypt_thread_impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="45:8" pos:end="45:40">/* QCRYPTO_INIT_GCRYPT_THREADS */</comment>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:52"><call pos:start="47:5" pos:end="47:52"><name pos:start="47:5" pos:end="47:16">gcry_control</name><argument_list pos:start="47:17" pos:end="47:52">(<argument pos:start="47:18" pos:end="47:48"><expr pos:start="47:18" pos:end="47:48"><name pos:start="47:18" pos:end="47:48">GCRYCTL_INITIALIZATION_FINISHED</name></expr></argument>, <argument pos:start="47:51" pos:end="47:51"><expr pos:start="47:51" pos:end="47:51"><literal type="number" pos:start="47:51" pos:end="47:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>



    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
